; ModuleID = './src/dispnew.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.emacs_globals = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.glyph = type { i64, i64, i16, i16, i16, i16, i24, i24, %union.anon, %union.anon.1 }
%union.anon = type { %struct.glyph_slice }
%struct.glyph_slice = type { i64 }
%union.anon.1 = type { i32 }
%struct.frame = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.face_cache*, i32, %struct.glyph_pool*, %struct.glyph_pool*, %struct.glyph_matrix*, %struct.glyph_matrix*, i48, i32, i32, i32, i32, i8*, i32*, i32*, i32*, i32*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.terminal*, %union.output_data, %struct.font_driver_list*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x double], double, i32, i64, i64 }
%struct.vectorlike_header = type { i64 }
%struct.face_cache = type { %struct.face**, %struct.frame*, %struct.face**, i64, i32, i8 }
%struct.face = type { [19 x i64], i32, %struct._XGC*, i64, i64, i64, i64, i64, i64, i64, %struct.font*, i32, i32, i24, i32, %struct.face*, %struct.face*, %struct.face*, i8* }
%struct._XGC = type opaque
%struct.font = type { %struct.vectorlike_header, [17 x i64], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, %struct.font_driver* }
%struct.font_driver = type { i64, i8, i64 (%struct.frame*)*, i64 (%struct.frame*, i64)*, i64 (%struct.frame*, i64)*, i64 (%struct.frame*)*, void (i64)*, i64 (%struct.frame*, i64, i32)*, void (%struct.font*)*, void (%struct.frame*, %struct.face*)*, void (%struct.frame*, %struct.face*)*, i32 (i64, i32)*, i32 (%struct.font*, i32)*, void (%struct.font*, i32*, i32, %struct.font_metrics*)*, i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)*, i32 (%struct.font*, i32, %struct.font_bitmap*, i32)*, void (%struct.font*, %struct.font_bitmap*)*, i32 (%struct.font*, i32, i32, i32*, i32*)*, i64 (%struct.font*)*, i32 (%struct.font*, i64, i64, i32, i32, i64, i32, i1)*, i32 (%struct.frame*)*, i32 (%struct.frame*)*, i64 (i64)*, i32 (%struct.frame*, %struct.font*)*, i32 (%struct.font*, i32, i32*)*, void (i64, i64)*, i1 (%struct.frame*, i64, i64)*, i64 (%struct.font*)* }
%struct.font_metrics = type { i16, i16, i16, i16, i16 }
%struct.glyph_string = type { i32, i32, i32, i32, i32, i32, i32, i32, %struct.frame*, %struct.window*, %struct._XDisplay*, i64, %struct.glyph_row*, i32, %struct.XChar2b*, i32, i32, %struct.face*, %struct.font*, %struct.composition*, i64, i32, i32, i8, %struct._XGC*, %struct.glyph*, %struct.image*, %struct.xwidget*, %struct.glyph_slice, %struct.glyph_string*, %struct.glyph_string*, [2 x %struct.XRectangle], i32, i32, i32, %struct.glyph_string*, %struct.glyph_string* }
%struct.window = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.glyph_matrix*, %struct.glyph_matrix*, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, %struct.cursor_pos, %struct.cursor_pos, %struct.cursor_pos, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i16, i32, i64 }
%struct.cursor_pos = type { i32, i32, i32, i32 }
%struct._XDisplay = type opaque
%struct.glyph_row = type <{ [4 x %struct.glyph*], [4 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.display_pos, %struct.display_pos, %struct.text_pos, %struct.text_pos, i32, [11 x i8], i8, i24, i24, i32, i40, i32, %struct.XRectangle* }>
%struct.display_pos = type { %struct.text_pos, i64, %struct.text_pos, i32 }
%struct.text_pos = type { i64, i64 }
%struct.XRectangle = type { i16, i16, i16, i16 }
%struct.XChar2b = type { i8, i8 }
%struct.composition = type { i32, i16, i16, i16, i16, i16, i32, i32, i64, i8*, i16* }
%struct.image = type { %struct.timespec, i64, i64, %struct._XImage*, %struct._XImage*, i64*, i32, i64, i64, i64, i8, i32, i32, [4 x i32], i32, i64, i64, i32, i32, i32, %struct.image_type*, i8, i64, i64, i64, %struct.image*, %struct.image* }
%struct.timespec = type { i64, i64 }
%struct._XImage = type { i32, i32, i32, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i8*, %struct.funcs }
%struct.funcs = type { %struct._XImage* (%struct._XDisplay*, %struct.Visual*, i32, i32, i32, i8*, i32, i32, i32, i32)*, i32 (%struct._XImage*)*, i64 (%struct._XImage*, i32, i32)*, i32 (%struct._XImage*, i32, i32, i64)*, %struct._XImage* (%struct._XImage*, i32, i32, i32, i32)*, i32 (%struct._XImage*, i64)* }
%struct.Visual = type { %struct._XExtData*, i64, i32, i64, i64, i64, i32, i32 }
%struct._XExtData = type { i32, %struct._XExtData*, i32 (%struct._XExtData*)*, i8* }
%struct.image_type = type { i32, i1 (i64)*, i1 (%struct.frame*, %struct.image*)*, void (%struct.frame*, %struct.image*)*, i1 ()*, %struct.image_type* }
%struct.xwidget = type opaque
%struct.font_bitmap = type { i32, i32, i32, i32, i8*, i32, i32, i32 }
%struct.glyph_pool = type { %struct.glyph*, i64, i32, i32 }
%struct.glyph_matrix = type { %struct.glyph_pool*, %struct.glyph_row*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, %struct.buffer*, i64, i64 }
%struct.buffer = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.buffer_text, %struct.buffer_text*, %struct.buffer*, i64, i64, i64, i64, i64, i64, %struct.buffer*, i32, i32, [50 x i8], %struct.timespec, i64, i64, i64, i64, i64, %struct.region_cache*, %struct.region_cache*, %struct.region_cache*, i8, %struct.Lisp_Overlay*, %struct.Lisp_Overlay*, i64, i64 }
%struct.buffer_text = type { i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.interval*, %struct.Lisp_Marker*, i8 }
%struct.interval = type opaque
%struct.Lisp_Marker = type { i32, %struct.buffer*, %struct.Lisp_Marker*, i64, i64 }
%struct.region_cache = type opaque
%struct.Lisp_Overlay = type { i32, %struct.Lisp_Overlay*, i64, i64, i64 }
%struct.terminal = type { %struct.vectorlike_header, i64, i64, i64, i64, %struct.terminal*, i32, i32, i32, i8*, %struct.kboard*, %struct.image_cache*, %union.display_info, %struct.coding_system*, %struct.coding_system*, %struct.redisplay_interface*, void (%struct.frame*, i32, i32)*, void (%struct.frame*, i32, i32)*, void (%struct.frame*)*, void (%struct.frame*)*, void (%struct.frame*, i32)*, void (%struct.frame*, i32, i32)*, void (%struct.frame*, %struct.glyph*, i32)*, void (%struct.frame*, %struct.glyph*, i32)*, void (%struct.frame*, i32)*, void (%struct.frame*)*, void (%struct.frame*, i1)*, void (%struct.terminal*)*, void (%struct.terminal*)*, void (%struct.frame*)*, void (%struct.frame*)*, void (%struct.frame*, i32)*, void (%struct.frame**, i32, i64*, i32*, i64*, i64*, i64*)*, void (%struct.frame*)*, void (%struct.frame*, i1)*, void (%struct.frame*)*, i64 (%struct.frame*, i32, i32, i32, i64, i8**)*, i64 (%struct.frame*, i64, i64)*, void (%struct.window*, i32, i32, i32)*, void (%struct.window*, i32, i32, i32)*, void (%struct.frame*)*, void (%struct.window*)*, void (%struct.frame*)*, i32 (%struct.terminal*, %struct.input_event*)*, void (%struct.frame*)*, void (%struct.frame*)*, void (%struct.terminal*)* }
%struct.kboard = type { %struct.kboard*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64, i64, i32, i64, i8, i8, i64 }
%struct.image_cache = type { %struct.image**, %struct.image**, i64, i64, i64 }
%union.display_info = type { %struct.tty_display_info* }
%struct.tty_display_info = type { %struct.tty_display_info*, i8*, i8*, %struct._IO_FILE*, %struct._IO_FILE*, %struct._IO_FILE*, %struct.emacs_tty*, i8, i32, %struct.terminal*, %struct.cm*, i64, %struct.frame*, i32, %struct.Mouse_HLInfo, [4096 x i8], [4096 x i8], i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32, i8, i32, i32, i8, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.emacs_tty = type opaque
%struct.cm = type { i32, i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.Mouse_HLInfo = type { i32, i32, i32, i32, i32, i32, i64, i32, i64, %struct.frame*, i32, i32, i8 }
%struct.coding_system = type { i64, i32, i32, %union.anon.5, i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8*, i64, i64, i64, i64, i8*, i32*, i32, i32, [64 x i8], i32, i32, i1 (%struct.coding_system*, %struct.coding_detection_info*)*, void (%struct.coding_system*)*, i1 (%struct.coding_system*)* }
%union.anon.5 = type { %struct.ccl_spec*, [328 x i8] }
%struct.ccl_spec = type opaque
%struct.coding_detection_info = type { i32, i32, i32 }
%struct.redisplay_interface = type { void (%struct.frame*, i64, i64)**, void (%struct.it*)*, void (%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, i32, i32)*, void (%struct.window*, %struct.run*)*, void (%struct.window*, %struct.glyph_row*)*, void (%struct.window*)*, void (%struct.window*, i1, i1)*, void (%struct.frame*)*, void (%struct.window*)*, void (%struct.glyph*, %struct.frame*, i32*, i32*)*, void (%struct.window*, %struct.glyph_row*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, %struct.draw_fringe_bitmap_params*)*, void (i32, i16*, i32, i32)*, void (i32)*, void (%struct.glyph_string*)*, void (%struct.glyph_string*)*, void (%struct.frame*, i64)*, void (%struct.frame*, i32, i32, i32, i32)*, void (%struct.window*, %struct.glyph_row*, i32, i32, i32, i32, i1, i1)*, void (%struct.window*, i32, i32, i32)*, void (%struct.window*, i32, i32, i32, i32)*, void (%struct.frame*, i32, i32, i32, i32, i32)*, void (%struct.frame*)*, void (%struct.frame*)* }
%struct.it = type { i64, %struct.window*, %struct.frame*, i32, i64, i64, i64, i64, i8*, i64, i64, i8, %struct.Lisp_Char_Table*, i64*, i64*, i32, i32, i32, [16 x i64], %struct.display_pos, %struct.display_pos, i64, i64, [16 x i64], [16 x i64], i64, i64, [5 x %struct.iterator_stack_entry], i32, i64, i32, i32, i16, i32, i32, i32, i32, %struct.composition_it, i32, i32, i64, %struct.xwidget*, %struct.it_slice, i64, i16, i16, i64, i64, %struct.text_pos, i16, i16, i32, i32, i32, i32, i32, i32, i32, i32, %struct.glyph_row*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.text_pos, i32, i32, i32, i32, i56, i24, %struct.bidi_it, i32 }
%struct.Lisp_Char_Table = type { %struct.vectorlike_header, i64, i64, i64, i64, [64 x i64], [0 x i64] }
%struct.iterator_stack_entry = type { i64, i32, i64, i64, i64, i64, %struct.composition_it, i32, %union.anon.6, %struct.text_pos, %struct.display_pos, i64, i32, i32, i32, i8, i32, i16, i64, i64 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i64, %struct.it_slice, i64 }
%struct.composition_it = type { i64, i64, i32, i32, i64, i32, i8, i64, i32, i32, i32, i32, i32 }
%struct.it_slice = type { i64, i64, i64, i64 }
%struct.bidi_it = type { i64, i64, i32, i64, i64, i32, i32, i32, i8, i8, i64, i64, %struct.bidi_saved_info, %struct.bidi_saved_info, %struct.bidi_saved_info, %struct.bidi_saved_info, %struct.bidi_saved_info, i64, i32, i64, i32, i32, i32, i64, i32, i32, [128 x %struct.bidi_stack], %struct.bidi_string_data, %struct.window*, i32, i64, i8 }
%struct.bidi_saved_info = type { i64, i32, i32 }
%struct.bidi_stack = type { i64, i16, i8, i8 }
%struct.bidi_string_data = type { i64, i8*, i64, i64, i8 }
%struct.run = type { i32, i32, i32, i32, i32, i32 }
%struct.draw_fringe_bitmap_params = type { i32, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, %struct.face* }
%struct.input_event = type { i32, i32, i32, i64, i64, i64, i64, i64 }
%union.output_data = type { %struct.tty_output* }
%struct.tty_output = type { %struct.tty_display_info* }
%struct.font_driver_list = type { i8, %struct.font_driver*, %struct.font_driver_list* }
%struct.Lisp_Subr = type { %struct.vectorlike_header, %union.anon.21, i16, i16, i8*, i8*, i8* }
%union.anon.21 = type { i64 ()* }
%struct.Lisp_Intfwd = type { i32, i64* }
%struct.Lisp_Boolfwd = type { i32, i8* }
%struct.Lisp_Objfwd = type { i32, i64* }
%struct.Lisp_Kboard_Objfwd = type { i32, i32 }
%struct.row_entry = type { i32, i32, i32, i64, %struct.glyph_row*, %struct.row_entry* }
%struct.dim = type { i32, i32 }
%struct.Lisp_Cons = type { i64, %union.anon.11 }
%union.anon.11 = type { i64 }
%struct.GLYPH = type { i32, i32 }
%struct.Lisp_Process = type opaque
%struct.sigaction = type { %union.anon.12, %struct.__sigset_t, i32, void ()* }
%union.anon.12 = type { void (i32)* }
%struct.__sigset_t = type { [16 x i64] }
%union.Aligned_Cons = type { %struct.Lisp_Cons }
%struct.x_output = type { i32, i32, i32, i32, i32, i64, %struct._XGC*, %struct._XGC*, %struct._XGC*, i64, i64, i64, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, i8, %struct._GdkGeometry, i64, %struct._GtkTooltip*, %struct._GtkWidget*, %struct._GtkWindow*, i64, %struct.font*, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.XWMHints, %struct.x_display_info*, %union._XEvent*, i8, %struct._XIC*, i64, %struct._XOC*, %struct.relief, %struct.relief, i64, i32, i32, i32 }
%struct._GdkGeometry = type { i32, i32, i32, i32, i32, i32, i32, i32, double, double, i32 }
%struct._GtkTooltip = type opaque
%struct._GtkWidget = type { %struct._GtkObject, i16, i8, i8, i8*, %struct._GtkStyle*, %struct._GtkRequisition, %struct._GdkRectangle, %struct._GdkDrawable*, %struct._GtkWidget* }
%struct._GtkObject = type { %struct._GObject, i32 }
%struct._GObject = type { %struct._GTypeInstance, i32, %struct._GData* }
%struct._GTypeInstance = type { %struct._GTypeClass* }
%struct._GTypeClass = type { i64 }
%struct._GData = type opaque
%struct._GtkStyle = type { %struct._GObject, [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], %struct._GdkColor, %struct._GdkColor, %struct._PangoFontDescription*, i32, i32, [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], %struct._GdkGC*, %struct._GdkGC*, [5 x %struct._GdkDrawable*], i32, i32, %struct._GdkColormap*, %struct._GdkFont*, %struct._PangoFontDescription*, %struct._GtkRcStyle*, %struct._GSList*, %struct._GArray*, %struct._GSList* }
%struct._GdkColor = type { i32, i16, i16, i16 }
%struct._GdkGC = type { %struct._GObject, i32, i32, i32, i32, %struct._GdkColormap* }
%struct._GdkColormap = type { %struct._GObject, i32, %struct._GdkColor*, %struct._GdkVisual*, i8* }
%struct._GdkVisual = type { %struct._GObject, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct._GdkFont = type { i32, i32, i32 }
%struct._PangoFontDescription = type opaque
%struct._GtkRcStyle = type { %struct._GObject, i8*, [5 x i8*], %struct._PangoFontDescription*, [5 x i32], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], i32, i32, %struct._GArray*, %struct._GSList*, %struct._GSList*, i8 }
%struct._GArray = type { i8*, i32 }
%struct._GSList = type { i8*, %struct._GSList* }
%struct._GtkRequisition = type { i32, i32 }
%struct._GdkRectangle = type { i32, i32, i32, i32 }
%struct._GdkDrawable = type { %struct._GObject }
%struct._GtkWindow = type <{ %struct._GtkBin, i8*, i8*, i8*, i8*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWindow*, %struct._GtkWindowGeometryInfo*, %struct._GdkDrawable*, %struct._GtkWindowGroup*, i16, i32, [2 x i8], i32, i32, i32, i32, i32, i32, %struct._GdkScreen* }>
%struct._GtkBin = type { %struct._GtkContainer, %struct._GtkWidget* }
%struct._GtkContainer = type { %struct._GtkWidget, %struct._GtkWidget*, i24 }
%struct._GtkWindowGeometryInfo = type opaque
%struct._GtkWindowGroup = type { %struct._GObject, %struct._GSList* }
%struct._GdkScreen = type { %struct._GObject, i8, [32 x %struct._GdkGC*], [32 x %struct._GdkGC*], [32 x %struct._GdkGC*], %struct._cairo_font_options*, double }
%struct._cairo_font_options = type opaque
%struct.XWMHints = type { i64, i32, i32, i64, i64, i32, i32, i64, i64 }
%struct.x_display_info = type { %struct.x_display_info*, %struct.terminal*, %struct._XDisplay*, i32, i64, i32, %struct.Screen*, double, double, %struct.Visual*, i64, i32, i32, i64, i64, i64, i64, i64, i64, void (%struct.frame*, i1)*, %struct._GdkCursor*, %struct._XrmHashBucketRec*, i32, i32, %struct._XGC*, %struct.Mouse_HLInfo, i32, i8*, i32, %struct.x_bitmap_record*, i64, i64, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.frame*, %struct.frame*, %struct.frame*, %struct.frame*, %struct.frame*, %struct.frame*, %struct.frame*, %struct.scroll_bar*, i64, i32, i32, %struct.XRectangle, i64, i64, %struct._XIM*, %struct.XIMStyles*, %struct.xim_inst_t*, %struct.color_name_cache_entry*, %struct.XColor*, i32, i32, i32, i32, i32, i32, i32, i32, i64*, i64, i64, i64, i64, i64*, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, %struct.xcb_connection_t* }
%struct.Screen = type { %struct._XExtData*, %struct._XDisplay*, i64, i32, i32, i32, i32, i32, %struct.Depth*, i32, %struct.Visual*, %struct._XGC*, i64, i64, i64, i32, i32, i32, i32, i64 }
%struct.Depth = type { i32, i32, %struct.Visual* }
%struct._GdkCursor = type { i32, i32 }
%struct._XrmHashBucketRec = type opaque
%struct.x_bitmap_record = type { i64, i8, i64, i8*, i32, i32, i32, i32 }
%struct.scroll_bar = type { %struct.vectorlike_header, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i8 }
%struct._XIM = type opaque
%struct.XIMStyles = type { i16, i64* }
%struct.xim_inst_t = type { %struct.x_display_info*, i8* }
%struct.color_name_cache_entry = type { %struct.color_name_cache_entry*, %struct.XColor, i8* }
%struct.XColor = type { i64, i16, i16, i16, i8, i8 }
%struct.xcb_connection_t = type opaque
%union._XEvent = type { [24 x i64] }
%struct._XIC = type opaque
%struct._XOC = type opaque
%struct.relief = type { %struct._XGC*, i64 }
%struct.anon = type { i32, i32 }
%struct.Lisp_Vector = type { %struct.vectorlike_header, [0 x i64] }

@globals = external global %struct.emacs_globals, align 8
@selected_window = external global i64, align 8
@minibuf_level = external global i64, align 8
@minibuf_selected_window = external global i64, align 8
@minibuf_window = external global i64, align 8
@Vframe_list = external global i64, align 8
@space_glyph = common global %struct.glyph zeroinitializer, align 8
@frame_matrix_frame = internal global %struct.frame* null, align 8
@display_completed = common global i8 0, align 1
@current_buffer = external global %struct.buffer*, align 8
@redisplaying_p = external global i8, align 1
@delayed_size_change = internal global i8 0, align 1
@selected_frame = external global i64, align 8
@.str = private unnamed_addr constant [37 x i8] c"Current frame is not on a tty device\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.2 = private unnamed_addr constant [19 x i8] c"Opening termscript\00", align 1
@stdout = external global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [43 x i8] c"Device %d is not a termcap terminal device\00", align 1
@.str.4 = private unnamed_addr constant [32 x i8] c"Terminal is currently suspended\00", align 1
@noninteractive = external global i8, align 1
@.str.5 = private unnamed_addr constant [56 x i8] c"Keyboard macro terminated by a command ringing the bell\00", align 1
@frame_and_buffer_state = internal global i64 0, align 8
@Vbuffer_alist = external global i64, align 8
@initialized = external global i8, align 1
@daemon_pipe = external global [2 x i32], align 4
@inhibit_window_system = external global i8, align 1
@display_arg = external global i8, align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"DISPLAY\00", align 1
@stderr = external global %struct._IO_FILE*, align 8
@.str.7 = private unnamed_addr constant [40 x i8] c"Display %s unavailable, simulating -nw\0A\00", align 1
@.str.8 = private unnamed_addr constant [28 x i8] c"standard input is not a tty\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"TERM\00", align 1
@.str.10 = private unnamed_addr constant [67 x i8] c"Please set the environment variable DISPLAY or TERM (see 'tset').\0A\00", align 1
@.str.11 = private unnamed_addr constant [55 x i8] c"Please set the environment variable TERM; see 'tset'.\0A\00", align 1
@initial_terminal = external global %struct.terminal*, align 8
@.str.12 = private unnamed_addr constant [26 x i8] c"screen size %dx%d too big\00", align 1
@.str.13 = private unnamed_addr constant [31 x i8] c"tty-set-up-initial-frame-faces\00", align 1
@Sredraw_display = internal global %struct.Lisp_Subr { %struct.vectorlike_header { i64 167772160 }, %union.anon.21 { i64 ()* @Fredraw_display }, i16 0, i16 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.34, i32 0, i32 0), i8* null }, align 8
@syms_of_display.i_fwd = internal global %struct.Lisp_Intfwd zeroinitializer, align 8
@.str.14 = private unnamed_addr constant [10 x i8] c"baud-rate\00", align 1
@syms_of_display.b_fwd = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.15 = private unnamed_addr constant [14 x i8] c"inverse-video\00", align 1
@syms_of_display.b_fwd.16 = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.17 = private unnamed_addr constant [13 x i8] c"visible-bell\00", align 1
@syms_of_display.b_fwd.18 = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.19 = private unnamed_addr constant [21 x i8] c"no-redraw-on-reenter\00", align 1
@syms_of_display.o_fwd = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.20 = private unnamed_addr constant [22 x i8] c"initial-window-system\00", align 1
@syms_of_display.ko_fwd = internal global %struct.Lisp_Kboard_Objfwd zeroinitializer, align 4
@.str.21 = private unnamed_addr constant [14 x i8] c"window-system\00", align 1
@syms_of_display.o_fwd.22 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.23 = private unnamed_addr constant [22 x i8] c"window-system-version\00", align 1
@syms_of_display.b_fwd.24 = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.25 = private unnamed_addr constant [20 x i8] c"cursor-in-echo-area\00", align 1
@syms_of_display.o_fwd.26 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.27 = private unnamed_addr constant [12 x i8] c"glyph-table\00", align 1
@syms_of_display.o_fwd.28 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.29 = private unnamed_addr constant [23 x i8] c"standard-display-table\00", align 1
@syms_of_display.b_fwd.30 = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.31 = private unnamed_addr constant [21 x i8] c"redisplay-dont-pause\00", align 1
@frame_garbaged = external global i8, align 1
@input_pending = external global i8, align 1
@old_lines_size = internal global i64 0, align 8
@old_lines = internal global %struct.row_entry** null, align 8
@new_lines_size = internal global i64 0, align 8
@new_lines = internal global %struct.row_entry** null, align 8
@row_table_size = internal global i64 0, align 8
@row_table = internal global %struct.row_entry** null, align 8
@row_entry_pool_size = internal global i64 0, align 8
@row_entry_pool = internal global %struct.row_entry* null, align 8
@runs_size = internal global i64 0, align 8
@runs = internal global %struct.run** null, align 8
@run_pool = internal global %struct.run* null, align 8
@row_entry_idx = internal global i64 0, align 8
@echo_area_buffer = external global [2 x i64], align 16
@echo_area_window = external global i64, align 8
@char_ins_del_vector = external global i32*, align 8
@tty_list = external global %struct.tty_display_info*, align 8
@.str.32 = private unnamed_addr constant [13 x i8] c"redraw-frame\00", align 1
@Sredraw_frame = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fredraw_frame }, i16 0, i16 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.32, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.33 = private unnamed_addr constant [15 x i8] c"redraw-display\00", align 1
@.str.34 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.35 = private unnamed_addr constant [26 x i8] c"frame-or-buffer-changed-p\00", align 1
@Sframe_or_buffer_changed_p = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fframe_or_buffer_changed_p }, i16 0, i16 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.35, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.36 = private unnamed_addr constant [16 x i8] c"open-termscript\00", align 1
@.str.37 = private unnamed_addr constant [24 x i8] c"FOpen termscript file: \00", align 1
@Sopen_termscript = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fopen_termscript }, i16 1, i16 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.37, i32 0, i32 0), i8* null }, align 8
@.str.38 = private unnamed_addr constant [5 x i8] c"ding\00", align 1
@Sding = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fding }, i16 0, i16 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.38, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.39 = private unnamed_addr constant [10 x i8] c"redisplay\00", align 1
@Sredisplay = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fredisplay }, i16 0, i16 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.39, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.40 = private unnamed_addr constant [10 x i8] c"sleep-for\00", align 1
@Ssleep_for = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fsleep_for }, i16 1, i16 2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.40, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.41 = private unnamed_addr constant [24 x i8] c"send-string-to-terminal\00", align 1
@Ssend_string_to_terminal = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fsend_string_to_terminal }, i16 1, i16 2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.41, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.42 = private unnamed_addr constant [21 x i8] c"internal-show-cursor\00", align 1
@Sinternal_show_cursor = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Finternal_show_cursor }, i16 2, i16 2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.42, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.43 = private unnamed_addr constant [23 x i8] c"internal-show-cursor-p\00", align 1
@Sinternal_show_cursor_p = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Finternal_show_cursor_p }, i16 0, i16 1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.43, i32 0, i32 0), i8* null, i8* null }, align 8

; Function Attrs: nounwind uwtable
define void @rotate_matrix(%struct.glyph_matrix* %matrix, i32 %first, i32 %last, i32 %by) #0 {
entry:
  %matrix.addr = alloca %struct.glyph_matrix*, align 8
  %first.addr = alloca i32, align 4
  %last.addr = alloca i32, align 4
  %by.addr = alloca i32, align 4
  store %struct.glyph_matrix* %matrix, %struct.glyph_matrix** %matrix.addr, align 8
  store i32 %first, i32* %first.addr, align 4
  store i32 %last, i32* %last.addr, align 4
  store i32 %by, i32* %by.addr, align 4
  %0 = load i32, i32* %by.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %by.addr, align 4
  %sub = sub nsw i32 0, %1
  store i32 %sub, i32* %by.addr, align 4
  %2 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %3 = load i32, i32* %first.addr, align 4
  %4 = load i32, i32* %first.addr, align 4
  %5 = load i32, i32* %by.addr, align 4
  %add = add nsw i32 %4, %5
  call void @reverse_rows(%struct.glyph_matrix* %2, i32 %3, i32 %add)
  %6 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %7 = load i32, i32* %first.addr, align 4
  %8 = load i32, i32* %by.addr, align 4
  %add1 = add nsw i32 %7, %8
  %9 = load i32, i32* %last.addr, align 4
  call void @reverse_rows(%struct.glyph_matrix* %6, i32 %add1, i32 %9)
  %10 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %11 = load i32, i32* %first.addr, align 4
  %12 = load i32, i32* %last.addr, align 4
  call void @reverse_rows(%struct.glyph_matrix* %10, i32 %11, i32 %12)
  br label %if.end.6

if.else:                                          ; preds = %entry
  %13 = load i32, i32* %by.addr, align 4
  %cmp2 = icmp sgt i32 %13, 0
  br i1 %cmp2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.else
  %14 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %15 = load i32, i32* %last.addr, align 4
  %16 = load i32, i32* %by.addr, align 4
  %sub4 = sub nsw i32 %15, %16
  %17 = load i32, i32* %last.addr, align 4
  call void @reverse_rows(%struct.glyph_matrix* %14, i32 %sub4, i32 %17)
  %18 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %19 = load i32, i32* %first.addr, align 4
  %20 = load i32, i32* %last.addr, align 4
  %21 = load i32, i32* %by.addr, align 4
  %sub5 = sub nsw i32 %20, %21
  call void @reverse_rows(%struct.glyph_matrix* %18, i32 %19, i32 %sub5)
  %22 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %23 = load i32, i32* %first.addr, align 4
  %24 = load i32, i32* %last.addr, align 4
  call void @reverse_rows(%struct.glyph_matrix* %22, i32 %23, i32 %24)
  br label %if.end

if.end:                                           ; preds = %if.then.3, %if.else
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @reverse_rows(%struct.glyph_matrix* %matrix, i32 %start, i32 %end) #0 {
entry:
  %matrix.addr = alloca %struct.glyph_matrix*, align 8
  %start.addr = alloca i32, align 4
  %end.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %temp = alloca %struct.glyph_row, align 8
  store %struct.glyph_matrix* %matrix, %struct.glyph_matrix** %matrix.addr, align 8
  store i32 %start, i32* %start.addr, align 4
  store i32 %end, i32* %end.addr, align 4
  %0 = load i32, i32* %start.addr, align 4
  store i32 %0, i32* %i, align 4
  %1 = load i32, i32* %end.addr, align 4
  %sub = sub nsw i32 %1, 1
  store i32 %sub, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %j, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %5, i32 0, i32 1
  %6 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %arrayidx = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %6, i64 %idxprom
  %7 = bitcast %struct.glyph_row* %temp to i8*
  %8 = bitcast %struct.glyph_row* %arrayidx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* %8, i64 256, i32 8, i1 false)
  %9 = load i32, i32* %i, align 4
  %idxprom1 = sext i32 %9 to i64
  %10 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows2 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %10, i32 0, i32 1
  %11 = load %struct.glyph_row*, %struct.glyph_row** %rows2, align 8
  %arrayidx3 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %11, i64 %idxprom1
  %12 = load i32, i32* %j, align 4
  %idxprom4 = sext i32 %12 to i64
  %13 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows5 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %13, i32 0, i32 1
  %14 = load %struct.glyph_row*, %struct.glyph_row** %rows5, align 8
  %arrayidx6 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %14, i64 %idxprom4
  %15 = bitcast %struct.glyph_row* %arrayidx3 to i8*
  %16 = bitcast %struct.glyph_row* %arrayidx6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* %16, i64 256, i32 8, i1 false)
  %17 = load i32, i32* %j, align 4
  %idxprom7 = sext i32 %17 to i64
  %18 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows8 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %18, i32 0, i32 1
  %19 = load %struct.glyph_row*, %struct.glyph_row** %rows8, align 8
  %arrayidx9 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %19, i64 %idxprom7
  %20 = bitcast %struct.glyph_row* %arrayidx9 to i8*
  %21 = bitcast %struct.glyph_row* %temp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %20, i8* %21, i64 256, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  %23 = load i32, i32* %j, align 4
  %dec = add nsw i32 %23, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @increment_matrix_positions(%struct.glyph_matrix* %matrix, i32 %start, i32 %end, i64 %delta, i64 %delta_bytes) #0 {
entry:
  %matrix.addr = alloca %struct.glyph_matrix*, align 8
  %start.addr = alloca i32, align 4
  %end.addr = alloca i32, align 4
  %delta.addr = alloca i64, align 8
  %delta_bytes.addr = alloca i64, align 8
  store %struct.glyph_matrix* %matrix, %struct.glyph_matrix** %matrix.addr, align 8
  store i32 %start, i32* %start.addr, align 4
  store i32 %end, i32* %end.addr, align 4
  store i64 %delta, i64* %delta.addr, align 8
  store i64 %delta_bytes, i64* %delta_bytes.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %start.addr, align 4
  %1 = load i32, i32* %end.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %2, i32 0, i32 1
  %3 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %4 = load i32, i32* %start.addr, align 4
  %idx.ext = sext i32 %4 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %3, i64 %idx.ext
  %5 = load i64, i64* %delta.addr, align 8
  %6 = load i64, i64* %delta_bytes.addr, align 8
  call void @increment_row_positions(%struct.glyph_row* %add.ptr, i64 %5, i64 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %start.addr, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %start.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @increment_row_positions(%struct.glyph_row* %row, i64 %delta, i64 %delta_bytes) #0 {
entry:
  %row.addr = alloca %struct.glyph_row*, align 8
  %delta.addr = alloca i64, align 8
  %delta_bytes.addr = alloca i64, align 8
  %area = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.glyph_row* %row, %struct.glyph_row** %row.addr, align 8
  store i64 %delta, i64* %delta.addr, align 8
  store i64 %delta_bytes, i64* %delta_bytes.addr, align 8
  %0 = load i64, i64* %delta.addr, align 8
  %1 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %minpos = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %1, i32 0, i32 14
  %charpos = getelementptr inbounds %struct.text_pos, %struct.text_pos* %minpos, i32 0, i32 0
  %2 = load i64, i64* %charpos, align 8
  %add = add nsw i64 %2, %0
  store i64 %add, i64* %charpos, align 8
  %3 = load i64, i64* %delta_bytes.addr, align 8
  %4 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %minpos1 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %4, i32 0, i32 14
  %bytepos = getelementptr inbounds %struct.text_pos, %struct.text_pos* %minpos1, i32 0, i32 1
  %5 = load i64, i64* %bytepos, align 8
  %add2 = add nsw i64 %5, %3
  store i64 %add2, i64* %bytepos, align 8
  %6 = load i64, i64* %delta.addr, align 8
  %7 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %maxpos = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %7, i32 0, i32 15
  %charpos3 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %maxpos, i32 0, i32 0
  %8 = load i64, i64* %charpos3, align 8
  %add4 = add nsw i64 %8, %6
  store i64 %add4, i64* %charpos3, align 8
  %9 = load i64, i64* %delta_bytes.addr, align 8
  %10 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %maxpos5 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %10, i32 0, i32 15
  %bytepos6 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %maxpos5, i32 0, i32 1
  %11 = load i64, i64* %bytepos6, align 8
  %add7 = add nsw i64 %11, %9
  store i64 %add7, i64* %bytepos6, align 8
  %12 = load i64, i64* %delta.addr, align 8
  %13 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %start = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %13, i32 0, i32 12
  %pos = getelementptr inbounds %struct.display_pos, %struct.display_pos* %start, i32 0, i32 0
  %charpos8 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos, i32 0, i32 0
  %14 = load i64, i64* %charpos8, align 8
  %add9 = add nsw i64 %14, %12
  store i64 %add9, i64* %charpos8, align 8
  %15 = load i64, i64* %delta_bytes.addr, align 8
  %16 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %start10 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %16, i32 0, i32 12
  %pos11 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %start10, i32 0, i32 0
  %bytepos12 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos11, i32 0, i32 1
  %17 = load i64, i64* %bytepos12, align 8
  %add13 = add nsw i64 %17, %15
  store i64 %add13, i64* %bytepos12, align 8
  %18 = load i64, i64* %delta.addr, align 8
  %19 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %end = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %19, i32 0, i32 13
  %pos14 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %end, i32 0, i32 0
  %charpos15 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos14, i32 0, i32 0
  %20 = load i64, i64* %charpos15, align 8
  %add16 = add nsw i64 %20, %18
  store i64 %add16, i64* %charpos15, align 8
  %21 = load i64, i64* %delta_bytes.addr, align 8
  %22 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %end17 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %22, i32 0, i32 13
  %pos18 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %end17, i32 0, i32 0
  %bytepos19 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos18, i32 0, i32 1
  %23 = load i64, i64* %bytepos19, align 8
  %add20 = add nsw i64 %23, %21
  store i64 %add20, i64* %bytepos19, align 8
  %24 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %enabled_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %24, i32 0, i32 22
  %25 = bitcast i40* %enabled_p to i64*
  %bf.load = load i64, i64* %25, align 4
  %bf.lshr = lshr i64 %bf.load, 10
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %if.end.66

if.end:                                           ; preds = %entry
  store i32 0, i32* %area, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.47, %if.end
  %26 = load i32, i32* %area, align 4
  %cmp = icmp slt i32 %26, 3
  br i1 %cmp, label %for.body, label %for.end.49

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.21

for.cond.21:                                      ; preds = %for.inc, %for.body
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %area, align 4
  %idxprom = sext i32 %28 to i64
  %29 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %used = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %29, i32 0, i32 1
  %arrayidx = getelementptr inbounds [4 x i16], [4 x i16]* %used, i32 0, i64 %idxprom
  %30 = load i16, i16* %arrayidx, align 2
  %conv = sext i16 %30 to i32
  %cmp22 = icmp slt i32 %27, %conv
  br i1 %cmp22, label %for.body.24, label %for.end

for.body.24:                                      ; preds = %for.cond.21
  %31 = load i32, i32* %i, align 4
  %idxprom25 = sext i32 %31 to i64
  %32 = load i32, i32* %area, align 4
  %idxprom26 = sext i32 %32 to i64
  %33 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %glyphs = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %33, i32 0, i32 0
  %arrayidx27 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs, i32 0, i64 %idxprom26
  %34 = load %struct.glyph*, %struct.glyph** %arrayidx27, align 8
  %arrayidx28 = getelementptr inbounds %struct.glyph, %struct.glyph* %34, i64 %idxprom25
  %object = getelementptr inbounds %struct.glyph, %struct.glyph* %arrayidx28, i32 0, i32 1
  %35 = load i64, i64* %object, align 8
  %call = call zeroext i1 @BUFFERP(i64 %35)
  br i1 %call, label %land.lhs.true, label %if.end.46

land.lhs.true:                                    ; preds = %for.body.24
  %36 = load i32, i32* %i, align 4
  %idxprom30 = sext i32 %36 to i64
  %37 = load i32, i32* %area, align 4
  %idxprom31 = sext i32 %37 to i64
  %38 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %glyphs32 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %38, i32 0, i32 0
  %arrayidx33 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs32, i32 0, i64 %idxprom31
  %39 = load %struct.glyph*, %struct.glyph** %arrayidx33, align 8
  %arrayidx34 = getelementptr inbounds %struct.glyph, %struct.glyph* %39, i64 %idxprom30
  %charpos35 = getelementptr inbounds %struct.glyph, %struct.glyph* %arrayidx34, i32 0, i32 0
  %40 = load i64, i64* %charpos35, align 8
  %cmp36 = icmp sgt i64 %40, 0
  br i1 %cmp36, label %if.then.38, label %if.end.46

if.then.38:                                       ; preds = %land.lhs.true
  %41 = load i64, i64* %delta.addr, align 8
  %42 = load i32, i32* %i, align 4
  %idxprom39 = sext i32 %42 to i64
  %43 = load i32, i32* %area, align 4
  %idxprom40 = sext i32 %43 to i64
  %44 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %glyphs41 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %44, i32 0, i32 0
  %arrayidx42 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs41, i32 0, i64 %idxprom40
  %45 = load %struct.glyph*, %struct.glyph** %arrayidx42, align 8
  %arrayidx43 = getelementptr inbounds %struct.glyph, %struct.glyph* %45, i64 %idxprom39
  %charpos44 = getelementptr inbounds %struct.glyph, %struct.glyph* %arrayidx43, i32 0, i32 0
  %46 = load i64, i64* %charpos44, align 8
  %add45 = add nsw i64 %46, %41
  store i64 %add45, i64* %charpos44, align 8
  br label %if.end.46

if.end.46:                                        ; preds = %if.then.38, %land.lhs.true, %for.body.24
  br label %for.inc

for.inc:                                          ; preds = %if.end.46
  %47 = load i32, i32* %i, align 4
  %inc = add nsw i32 %47, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.21

for.end:                                          ; preds = %for.cond.21
  br label %for.inc.47

for.inc.47:                                       ; preds = %for.end
  %48 = load i32, i32* %area, align 4
  %inc48 = add nsw i32 %48, 1
  store i32 %inc48, i32* %area, align 4
  br label %for.cond

for.end.49:                                       ; preds = %for.cond
  %49 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %used50 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %49, i32 0, i32 1
  %arrayidx51 = getelementptr inbounds [4 x i16], [4 x i16]* %used50, i32 0, i64 1
  %50 = load i16, i16* %arrayidx51, align 2
  %conv52 = sext i16 %50 to i32
  %cmp53 = icmp eq i32 %conv52, 0
  br i1 %cmp53, label %land.lhs.true.55, label %if.end.66

land.lhs.true.55:                                 ; preds = %for.end.49
  %51 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %displays_text_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %51, i32 0, i32 22
  %52 = bitcast i40* %displays_text_p to i64*
  %bf.load56 = load i64, i64* %52, align 4
  %bf.lshr57 = lshr i64 %bf.load56, 14
  %bf.clear58 = and i64 %bf.lshr57, 1
  %bf.cast59 = trunc i64 %bf.clear58 to i1
  br i1 %bf.cast59, label %if.then.61, label %if.end.66

if.then.61:                                       ; preds = %land.lhs.true.55
  %53 = load i64, i64* %delta.addr, align 8
  %54 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %glyphs62 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %54, i32 0, i32 0
  %arrayidx63 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs62, i32 0, i64 1
  %55 = load %struct.glyph*, %struct.glyph** %arrayidx63, align 8
  %charpos64 = getelementptr inbounds %struct.glyph, %struct.glyph* %55, i32 0, i32 0
  %56 = load i64, i64* %charpos64, align 8
  %add65 = add nsw i64 %56, %53
  store i64 %add65, i64* %charpos64, align 8
  br label %if.end.66

if.end.66:                                        ; preds = %if.then, %if.then.61, %land.lhs.true.55, %for.end.49
  ret void
}

; Function Attrs: nounwind uwtable
define void @clear_glyph_matrix_rows(%struct.glyph_matrix* %matrix, i32 %start, i32 %end) #0 {
entry:
  %matrix.addr = alloca %struct.glyph_matrix*, align 8
  %start.addr = alloca i32, align 4
  %end.addr = alloca i32, align 4
  store %struct.glyph_matrix* %matrix, %struct.glyph_matrix** %matrix.addr, align 8
  store i32 %start, i32* %start.addr, align 4
  store i32 %end, i32* %end.addr, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %start.addr, align 4
  %1 = load i32, i32* %end.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %start.addr, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %3, i32 0, i32 1
  %4 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %arrayidx = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %4, i64 %idxprom
  %enabled_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %arrayidx, i32 0, i32 22
  %5 = bitcast i40* %enabled_p to i64*
  %bf.load = load i64, i64* %5, align 4
  %bf.clear = and i64 %bf.load, -1025
  store i64 %bf.clear, i64* %5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %start.addr, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %start.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @clear_glyph_matrix(%struct.glyph_matrix* %matrix) #0 {
entry:
  %matrix.addr = alloca %struct.glyph_matrix*, align 8
  store %struct.glyph_matrix* %matrix, %struct.glyph_matrix** %matrix.addr, align 8
  %0 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %tobool = icmp ne %struct.glyph_matrix* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %2 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %nrows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %2, i32 0, i32 3
  %3 = load i32, i32* %nrows, align 4
  call void @clear_glyph_matrix_rows(%struct.glyph_matrix* %1, i32 0, i32 %3)
  %4 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %no_scrolling_p = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %4, i32 0, i32 15
  %bf.load = load i8, i8* %no_scrolling_p, align 8
  %bf.clear = and i8 %bf.load, -2
  store i8 %bf.clear, i8* %no_scrolling_p, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @shift_glyph_matrix(%struct.window* %w, %struct.glyph_matrix* %matrix, i32 %start, i32 %end, i32 %dy) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %matrix.addr = alloca %struct.glyph_matrix*, align 8
  %start.addr = alloca i32, align 4
  %end.addr = alloca i32, align 4
  %dy.addr = alloca i32, align 4
  %min_y = alloca i32, align 4
  %max_y = alloca i32, align 4
  %row = alloca %struct.glyph_row*, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store %struct.glyph_matrix* %matrix, %struct.glyph_matrix** %matrix.addr, align 8
  store i32 %start, i32* %start.addr, align 4
  store i32 %end, i32* %end.addr, align 4
  store i32 %dy, i32* %dy.addr, align 4
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 10
  %1 = load i64, i64* %contents, align 8
  %call = call zeroext i1 @BUFFERP(i64 %1)
  br i1 %call, label %cond.true, label %cond.false.54

cond.true:                                        ; preds = %entry
  %2 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini = getelementptr inbounds %struct.window, %struct.window* %2, i32 0, i32 67
  %bf.load = load i16, i16* %mini, align 4
  %bf.clear = and i16 %bf.load, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %cond.false.91, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.true
  %3 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 67
  %bf.load1 = load i16, i16* %pseudo_window_p, align 4
  %bf.lshr = lshr i16 %bf.load1, 11
  %bf.clear2 = and i16 %bf.lshr, 1
  %bf.cast3 = trunc i16 %bf.clear2 to i1
  br i1 %bf.cast3, label %cond.false.91, label %land.lhs.true.4

land.lhs.true.4:                                  ; preds = %land.lhs.true
  %4 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %4, i32 0, i32 1
  %5 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %5, 5
  %6 = inttoptr i64 %sub to i8*
  %7 = bitcast i8* %6 to %struct.frame*
  %wants_modeline = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 26
  %8 = bitcast i48* %wants_modeline to i64*
  %bf.load5 = load i64, i64* %8, align 8
  %bf.lshr6 = lshr i64 %bf.load5, 14
  %bf.clear7 = and i64 %bf.lshr6, 1
  %bf.cast8 = trunc i64 %bf.clear7 to i1
  br i1 %bf.cast8, label %land.lhs.true.9, label %cond.false.91

land.lhs.true.9:                                  ; preds = %land.lhs.true.4
  %9 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents10 = getelementptr inbounds %struct.window, %struct.window* %9, i32 0, i32 10
  %10 = load i64, i64* %contents10, align 8
  %call11 = call %struct.buffer* @XBUFFER(i64 %10)
  %header_line_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call11, i32 0, i32 13
  %11 = load i64, i64* %header_line_format_, align 8
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %11, %call12
  br i1 %cmp, label %cond.false.91, label %land.lhs.true.13

land.lhs.true.13:                                 ; preds = %land.lhs.true.9
  %12 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height = getelementptr inbounds %struct.window, %struct.window* %12, i32 0, i32 35
  %13 = load i32, i32* %pixel_height, align 4
  %14 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents14 = getelementptr inbounds %struct.window, %struct.window* %14, i32 0, i32 10
  %15 = load i64, i64* %contents14, align 8
  %call15 = call zeroext i1 @BUFFERP(i64 %15)
  br i1 %call15, label %cond.true.16, label %cond.false

cond.true.16:                                     ; preds = %land.lhs.true.13
  %16 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini17 = getelementptr inbounds %struct.window, %struct.window* %16, i32 0, i32 67
  %bf.load18 = load i16, i16* %mini17, align 4
  %bf.clear19 = and i16 %bf.load18, 1
  %bf.cast20 = trunc i16 %bf.clear19 to i1
  br i1 %bf.cast20, label %cond.false.49, label %land.lhs.true.21

land.lhs.true.21:                                 ; preds = %cond.true.16
  %17 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p22 = getelementptr inbounds %struct.window, %struct.window* %17, i32 0, i32 67
  %bf.load23 = load i16, i16* %pseudo_window_p22, align 4
  %bf.lshr24 = lshr i16 %bf.load23, 11
  %bf.clear25 = and i16 %bf.lshr24, 1
  %bf.cast26 = trunc i16 %bf.clear25 to i1
  br i1 %bf.cast26, label %cond.false.49, label %land.lhs.true.27

land.lhs.true.27:                                 ; preds = %land.lhs.true.21
  %18 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame28 = getelementptr inbounds %struct.window, %struct.window* %18, i32 0, i32 1
  %19 = load i64, i64* %frame28, align 8
  %sub29 = sub nsw i64 %19, 5
  %20 = inttoptr i64 %sub29 to i8*
  %21 = bitcast i8* %20 to %struct.frame*
  %wants_modeline30 = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 26
  %22 = bitcast i48* %wants_modeline30 to i64*
  %bf.load31 = load i64, i64* %22, align 8
  %bf.lshr32 = lshr i64 %bf.load31, 14
  %bf.clear33 = and i64 %bf.lshr32, 1
  %bf.cast34 = trunc i64 %bf.clear33 to i1
  br i1 %bf.cast34, label %land.lhs.true.35, label %cond.false.49

land.lhs.true.35:                                 ; preds = %land.lhs.true.27
  %23 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents36 = getelementptr inbounds %struct.window, %struct.window* %23, i32 0, i32 10
  %24 = load i64, i64* %contents36, align 8
  %call37 = call %struct.buffer* @XBUFFER(i64 %24)
  %mode_line_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call37, i32 0, i32 12
  %25 = load i64, i64* %mode_line_format_, align 8
  %call38 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp39 = icmp eq i64 %25, %call38
  br i1 %cmp39, label %cond.false.49, label %land.lhs.true.40

land.lhs.true.40:                                 ; preds = %land.lhs.true.35
  %26 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height41 = getelementptr inbounds %struct.window, %struct.window* %26, i32 0, i32 35
  %27 = load i32, i32* %pixel_height41, align 4
  %28 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame42 = getelementptr inbounds %struct.window, %struct.window* %28, i32 0, i32 1
  %29 = load i64, i64* %frame42, align 8
  %sub43 = sub nsw i64 %29, 5
  %30 = inttoptr i64 %sub43 to i8*
  %31 = bitcast i8* %30 to %struct.frame*
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %31, i32 0, i32 60
  %32 = load i32, i32* %line_height, align 4
  %cmp44 = icmp sgt i32 %27, %32
  br i1 %cmp44, label %cond.true.45, label %cond.false.49

cond.false:                                       ; preds = %land.lhs.true.13
  br i1 false, label %cond.true.45, label %cond.false.49

cond.true.45:                                     ; preds = %cond.false, %land.lhs.true.40
  %33 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame46 = getelementptr inbounds %struct.window, %struct.window* %33, i32 0, i32 1
  %34 = load i64, i64* %frame46, align 8
  %sub47 = sub nsw i64 %34, 5
  %35 = inttoptr i64 %sub47 to i8*
  %36 = bitcast i8* %35 to %struct.frame*
  %line_height48 = getelementptr inbounds %struct.frame, %struct.frame* %36, i32 0, i32 60
  %37 = load i32, i32* %line_height48, align 4
  %mul = mul nsw i32 2, %37
  br label %cond.end

cond.false.49:                                    ; preds = %cond.false, %land.lhs.true.40, %land.lhs.true.35, %land.lhs.true.27, %land.lhs.true.21, %cond.true.16
  %38 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame50 = getelementptr inbounds %struct.window, %struct.window* %38, i32 0, i32 1
  %39 = load i64, i64* %frame50, align 8
  %sub51 = sub nsw i64 %39, 5
  %40 = inttoptr i64 %sub51 to i8*
  %41 = bitcast i8* %40 to %struct.frame*
  %line_height52 = getelementptr inbounds %struct.frame, %struct.frame* %41, i32 0, i32 60
  %42 = load i32, i32* %line_height52, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false.49, %cond.true.45
  %cond = phi i32 [ %mul, %cond.true.45 ], [ %42, %cond.false.49 ]
  %cmp53 = icmp sgt i32 %13, %cond
  br i1 %cmp53, label %cond.true.55, label %cond.false.91

cond.false.54:                                    ; preds = %entry
  br i1 false, label %cond.true.55, label %cond.false.91

cond.true.55:                                     ; preds = %cond.false.54, %cond.end
  %43 = load %struct.window*, %struct.window** %w.addr, align 8
  %header_line_height = getelementptr inbounds %struct.window, %struct.window* %43, i32 0, i32 64
  %44 = load i32, i32* %header_line_height, align 4
  %cmp56 = icmp sge i32 %44, 0
  br i1 %cmp56, label %cond.true.57, label %cond.false.59

cond.true.57:                                     ; preds = %cond.true.55
  %45 = load %struct.window*, %struct.window** %w.addr, align 8
  %header_line_height58 = getelementptr inbounds %struct.window, %struct.window* %45, i32 0, i32 64
  %46 = load i32, i32* %header_line_height58, align 4
  br label %cond.end.89

cond.false.59:                                    ; preds = %cond.true.55
  %47 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %47, i32 0, i32 24
  %48 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %tobool = icmp ne %struct.glyph_matrix* %48, null
  br i1 %tobool, label %land.lhs.true.60, label %cond.false.67

land.lhs.true.60:                                 ; preds = %cond.false.59
  %49 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix61 = getelementptr inbounds %struct.window, %struct.window* %49, i32 0, i32 24
  %50 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix61, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %50, i32 0, i32 1
  %51 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %tobool62 = icmp ne %struct.glyph_row* %51, null
  br i1 %tobool62, label %cond.true.63, label %cond.false.67

cond.true.63:                                     ; preds = %land.lhs.true.60
  %52 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix64 = getelementptr inbounds %struct.window, %struct.window* %52, i32 0, i32 24
  %53 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix64, align 8
  %rows65 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %53, i32 0, i32 1
  %54 = load %struct.glyph_row*, %struct.glyph_row** %rows65, align 8
  %height = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %54, i32 0, i32 7
  %55 = load i32, i32* %height, align 4
  %tobool66 = icmp ne i32 %55, 0
  br i1 %tobool66, label %cond.true.68, label %cond.false.82

cond.false.67:                                    ; preds = %land.lhs.true.60, %cond.false.59
  br i1 false, label %cond.true.68, label %cond.false.82

cond.true.68:                                     ; preds = %cond.false.67, %cond.true.63
  %56 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix69 = getelementptr inbounds %struct.window, %struct.window* %56, i32 0, i32 24
  %57 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix69, align 8
  %tobool70 = icmp ne %struct.glyph_matrix* %57, null
  br i1 %tobool70, label %land.lhs.true.71, label %cond.false.79

land.lhs.true.71:                                 ; preds = %cond.true.68
  %58 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix72 = getelementptr inbounds %struct.window, %struct.window* %58, i32 0, i32 24
  %59 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix72, align 8
  %rows73 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %59, i32 0, i32 1
  %60 = load %struct.glyph_row*, %struct.glyph_row** %rows73, align 8
  %tobool74 = icmp ne %struct.glyph_row* %60, null
  br i1 %tobool74, label %cond.true.75, label %cond.false.79

cond.true.75:                                     ; preds = %land.lhs.true.71
  %61 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix76 = getelementptr inbounds %struct.window, %struct.window* %61, i32 0, i32 24
  %62 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix76, align 8
  %rows77 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %62, i32 0, i32 1
  %63 = load %struct.glyph_row*, %struct.glyph_row** %rows77, align 8
  %height78 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %63, i32 0, i32 7
  %64 = load i32, i32* %height78, align 4
  br label %cond.end.80

cond.false.79:                                    ; preds = %land.lhs.true.71, %cond.true.68
  br label %cond.end.80

cond.end.80:                                      ; preds = %cond.false.79, %cond.true.75
  %cond81 = phi i32 [ %64, %cond.true.75 ], [ 0, %cond.false.79 ]
  br label %cond.end.86

cond.false.82:                                    ; preds = %cond.false.67, %cond.true.63
  %65 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame83 = getelementptr inbounds %struct.window, %struct.window* %65, i32 0, i32 1
  %66 = load i64, i64* %frame83, align 8
  %sub84 = sub nsw i64 %66, 5
  %67 = inttoptr i64 %sub84 to i8*
  %68 = bitcast i8* %67 to %struct.frame*
  %call85 = call i32 @estimate_mode_line_height(%struct.frame* %68, i32 5)
  br label %cond.end.86

cond.end.86:                                      ; preds = %cond.false.82, %cond.end.80
  %cond87 = phi i32 [ %cond81, %cond.end.80 ], [ %call85, %cond.false.82 ]
  %69 = load %struct.window*, %struct.window** %w.addr, align 8
  %header_line_height88 = getelementptr inbounds %struct.window, %struct.window* %69, i32 0, i32 64
  store i32 %cond87, i32* %header_line_height88, align 4
  br label %cond.end.89

cond.end.89:                                      ; preds = %cond.end.86, %cond.true.57
  %cond90 = phi i32 [ %46, %cond.true.57 ], [ %cond87, %cond.end.86 ]
  br label %cond.end.92

cond.false.91:                                    ; preds = %cond.false.54, %cond.end, %land.lhs.true.9, %land.lhs.true.4, %land.lhs.true, %cond.true
  br label %cond.end.92

cond.end.92:                                      ; preds = %cond.false.91, %cond.end.89
  %cond93 = phi i32 [ %cond90, %cond.end.89 ], [ 0, %cond.false.91 ]
  store i32 %cond93, i32* %min_y, align 4
  %70 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height94 = getelementptr inbounds %struct.window, %struct.window* %70, i32 0, i32 35
  %71 = load i32, i32* %pixel_height94, align 4
  %72 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_top = getelementptr inbounds %struct.window, %struct.window* %72, i32 0, i32 31
  %73 = load i32, i32* %pixel_top, align 4
  %74 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height95 = getelementptr inbounds %struct.window, %struct.window* %74, i32 0, i32 35
  %75 = load i32, i32* %pixel_height95, align 4
  %add = add nsw i32 %73, %75
  %76 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame96 = getelementptr inbounds %struct.window, %struct.window* %76, i32 0, i32 1
  %77 = load i64, i64* %frame96, align 8
  %sub97 = sub nsw i64 %77, 5
  %78 = inttoptr i64 %sub97 to i8*
  %79 = bitcast i8* %78 to %struct.frame*
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %79, i32 0, i32 5
  %80 = load i64, i64* %root_window, align 8
  %call98 = call %struct.window* @XWINDOW(i64 %80)
  %pixel_top99 = getelementptr inbounds %struct.window, %struct.window* %call98, i32 0, i32 31
  %81 = load i32, i32* %pixel_top99, align 4
  %82 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame100 = getelementptr inbounds %struct.window, %struct.window* %82, i32 0, i32 1
  %83 = load i64, i64* %frame100, align 8
  %sub101 = sub nsw i64 %83, 5
  %84 = inttoptr i64 %sub101 to i8*
  %85 = bitcast i8* %84 to %struct.frame*
  %root_window102 = getelementptr inbounds %struct.frame, %struct.frame* %85, i32 0, i32 5
  %86 = load i64, i64* %root_window102, align 8
  %call103 = call %struct.window* @XWINDOW(i64 %86)
  %pixel_height104 = getelementptr inbounds %struct.window, %struct.window* %call103, i32 0, i32 35
  %87 = load i32, i32* %pixel_height104, align 4
  %add105 = add nsw i32 %81, %87
  %cmp106 = icmp eq i32 %add, %add105
  br i1 %cmp106, label %land.lhs.true.107, label %lor.lhs.false

land.lhs.true.107:                                ; preds = %cond.end.92
  %88 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame108 = getelementptr inbounds %struct.window, %struct.window* %88, i32 0, i32 1
  %89 = load i64, i64* %frame108, align 8
  %sub109 = sub nsw i64 %89, 5
  %90 = inttoptr i64 %sub109 to i8*
  %91 = bitcast i8* %90 to %struct.frame*
  %root_window110 = getelementptr inbounds %struct.frame, %struct.frame* %91, i32 0, i32 5
  %92 = load i64, i64* %root_window110, align 8
  %call111 = call %struct.window* @XWINDOW(i64 %92)
  %next = getelementptr inbounds %struct.window, %struct.window* %call111, i32 0, i32 2
  %93 = load i64, i64* %next, align 8
  %call112 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp113 = icmp eq i64 %93, %call112
  br i1 %cmp113, label %cond.true.124, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.107, %cond.end.92
  %94 = load %struct.window*, %struct.window** %w.addr, align 8
  %prev = getelementptr inbounds %struct.window, %struct.window* %94, i32 0, i32 3
  %95 = load i64, i64* %prev, align 8
  %96 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame114 = getelementptr inbounds %struct.window, %struct.window* %96, i32 0, i32 1
  %97 = load i64, i64* %frame114, align 8
  %sub115 = sub nsw i64 %97, 5
  %98 = inttoptr i64 %sub115 to i8*
  %99 = bitcast i8* %98 to %struct.frame*
  %root_window116 = getelementptr inbounds %struct.frame, %struct.frame* %99, i32 0, i32 5
  %100 = load i64, i64* %root_window116, align 8
  %cmp117 = icmp eq i64 %95, %100
  br i1 %cmp117, label %cond.true.124, label %lor.lhs.false.118

lor.lhs.false.118:                                ; preds = %lor.lhs.false
  %101 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p119 = getelementptr inbounds %struct.window, %struct.window* %101, i32 0, i32 67
  %bf.load120 = load i16, i16* %pseudo_window_p119, align 4
  %bf.lshr121 = lshr i16 %bf.load120, 11
  %bf.clear122 = and i16 %bf.lshr121, 1
  %bf.cast123 = trunc i16 %bf.clear122 to i1
  br i1 %bf.cast123, label %cond.true.124, label %cond.false.125

cond.true.124:                                    ; preds = %lor.lhs.false.118, %lor.lhs.false, %land.lhs.true.107
  br label %cond.end.128

cond.false.125:                                   ; preds = %lor.lhs.false.118
  %102 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame126 = getelementptr inbounds %struct.window, %struct.window* %102, i32 0, i32 1
  %103 = load i64, i64* %frame126, align 8
  %sub127 = sub nsw i64 %103, 5
  %104 = inttoptr i64 %sub127 to i8*
  %105 = bitcast i8* %104 to %struct.frame*
  %bottom_divider_width = getelementptr inbounds %struct.frame, %struct.frame* %105, i32 0, i32 53
  %106 = load i32, i32* %bottom_divider_width, align 4
  br label %cond.end.128

cond.end.128:                                     ; preds = %cond.false.125, %cond.true.124
  %cond129 = phi i32 [ 0, %cond.true.124 ], [ %106, %cond.false.125 ]
  %sub130 = sub nsw i32 %71, %cond129
  %107 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p131 = getelementptr inbounds %struct.window, %struct.window* %107, i32 0, i32 67
  %bf.load132 = load i16, i16* %pseudo_window_p131, align 4
  %bf.lshr133 = lshr i16 %bf.load132, 11
  %bf.clear134 = and i16 %bf.lshr133, 1
  %bf.cast135 = trunc i16 %bf.clear134 to i1
  br i1 %bf.cast135, label %cond.true.147, label %lor.lhs.false.136

lor.lhs.false.136:                                ; preds = %cond.end.128
  %108 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini137 = getelementptr inbounds %struct.window, %struct.window* %108, i32 0, i32 67
  %bf.load138 = load i16, i16* %mini137, align 4
  %bf.clear139 = and i16 %bf.load138, 1
  %bf.cast140 = trunc i16 %bf.clear139 to i1
  br i1 %bf.cast140, label %land.lhs.true.141, label %cond.false.148

land.lhs.true.141:                                ; preds = %lor.lhs.false.136
  %109 = load %struct.window*, %struct.window** %w.addr, align 8
  %prev142 = getelementptr inbounds %struct.window, %struct.window* %109, i32 0, i32 3
  %110 = load i64, i64* %prev142, align 8
  %111 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame143 = getelementptr inbounds %struct.window, %struct.window* %111, i32 0, i32 1
  %112 = load i64, i64* %frame143, align 8
  %sub144 = sub nsw i64 %112, 5
  %113 = inttoptr i64 %sub144 to i8*
  %114 = bitcast i8* %113 to %struct.frame*
  %root_window145 = getelementptr inbounds %struct.frame, %struct.frame* %114, i32 0, i32 5
  %115 = load i64, i64* %root_window145, align 8
  %cmp146 = icmp eq i64 %110, %115
  br i1 %cmp146, label %cond.true.147, label %cond.false.148

cond.true.147:                                    ; preds = %land.lhs.true.141, %cond.end.128
  br i1 false, label %cond.true.164, label %cond.false.173

cond.false.148:                                   ; preds = %land.lhs.true.141, %lor.lhs.false.136
  %116 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal_scroll_bar_type = getelementptr inbounds %struct.window, %struct.window* %116, i32 0, i32 18
  %117 = load i64, i64* %horizontal_scroll_bar_type, align 8
  %call149 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp150 = icmp eq i64 %117, %call149
  br i1 %cmp150, label %cond.true.151, label %cond.false.158

cond.true.151:                                    ; preds = %cond.false.148
  %118 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame152 = getelementptr inbounds %struct.window, %struct.window* %118, i32 0, i32 1
  %119 = load i64, i64* %frame152, align 8
  %sub153 = sub nsw i64 %119, 5
  %120 = inttoptr i64 %sub153 to i8*
  %121 = bitcast i8* %120 to %struct.frame*
  %horizontal_scroll_bars = getelementptr inbounds %struct.frame, %struct.frame* %121, i32 0, i32 26
  %122 = bitcast i48* %horizontal_scroll_bars to i64*
  %bf.load154 = load i64, i64* %122, align 8
  %bf.lshr155 = lshr i64 %bf.load154, 32
  %bf.clear156 = and i64 %bf.lshr155, 1
  %bf.cast157 = trunc i64 %bf.clear156 to i1
  br i1 %bf.cast157, label %cond.true.164, label %cond.false.173

cond.false.158:                                   ; preds = %cond.false.148
  %123 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal_scroll_bar_type159 = getelementptr inbounds %struct.window, %struct.window* %123, i32 0, i32 18
  %124 = load i64, i64* %horizontal_scroll_bar_type159, align 8
  %call160 = call i64 @builtin_lisp_symbol(i32 213)
  %cmp161 = icmp eq i64 %124, %call160
  br i1 %cmp161, label %cond.true.162, label %cond.false.163

cond.true.162:                                    ; preds = %cond.false.158
  br i1 true, label %cond.true.164, label %cond.false.173

cond.false.163:                                   ; preds = %cond.false.158
  br i1 false, label %cond.true.164, label %cond.false.173

cond.true.164:                                    ; preds = %cond.false.163, %cond.true.162, %cond.true.151, %cond.true.147
  %125 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_height = getelementptr inbounds %struct.window, %struct.window* %125, i32 0, i32 62
  %126 = load i32, i32* %scroll_bar_height, align 4
  %cmp165 = icmp sge i32 %126, 0
  br i1 %cmp165, label %cond.true.166, label %cond.false.168

cond.true.166:                                    ; preds = %cond.true.164
  %127 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_height167 = getelementptr inbounds %struct.window, %struct.window* %127, i32 0, i32 62
  %128 = load i32, i32* %scroll_bar_height167, align 4
  br label %cond.end.171

cond.false.168:                                   ; preds = %cond.true.164
  %129 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame169 = getelementptr inbounds %struct.window, %struct.window* %129, i32 0, i32 1
  %130 = load i64, i64* %frame169, align 8
  %sub170 = sub nsw i64 %130, 5
  %131 = inttoptr i64 %sub170 to i8*
  %132 = bitcast i8* %131 to %struct.frame*
  %config_scroll_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %132, i32 0, i32 71
  %133 = load i32, i32* %config_scroll_bar_height, align 4
  br label %cond.end.171

cond.end.171:                                     ; preds = %cond.false.168, %cond.true.166
  %cond172 = phi i32 [ %128, %cond.true.166 ], [ %133, %cond.false.168 ]
  br label %cond.end.174

cond.false.173:                                   ; preds = %cond.false.163, %cond.true.162, %cond.true.151, %cond.true.147
  br label %cond.end.174

cond.end.174:                                     ; preds = %cond.false.173, %cond.end.171
  %cond175 = phi i32 [ %cond172, %cond.end.171 ], [ 0, %cond.false.173 ]
  %sub176 = sub nsw i32 %sub130, %cond175
  %134 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents177 = getelementptr inbounds %struct.window, %struct.window* %134, i32 0, i32 10
  %135 = load i64, i64* %contents177, align 8
  %call178 = call zeroext i1 @BUFFERP(i64 %135)
  br i1 %call178, label %cond.true.179, label %cond.false.210

cond.true.179:                                    ; preds = %cond.end.174
  %136 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini180 = getelementptr inbounds %struct.window, %struct.window* %136, i32 0, i32 67
  %bf.load181 = load i16, i16* %mini180, align 4
  %bf.clear182 = and i16 %bf.load181, 1
  %bf.cast183 = trunc i16 %bf.clear182 to i1
  br i1 %bf.cast183, label %cond.false.273, label %land.lhs.true.184

land.lhs.true.184:                                ; preds = %cond.true.179
  %137 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p185 = getelementptr inbounds %struct.window, %struct.window* %137, i32 0, i32 67
  %bf.load186 = load i16, i16* %pseudo_window_p185, align 4
  %bf.lshr187 = lshr i16 %bf.load186, 11
  %bf.clear188 = and i16 %bf.lshr187, 1
  %bf.cast189 = trunc i16 %bf.clear188 to i1
  br i1 %bf.cast189, label %cond.false.273, label %land.lhs.true.190

land.lhs.true.190:                                ; preds = %land.lhs.true.184
  %138 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame191 = getelementptr inbounds %struct.window, %struct.window* %138, i32 0, i32 1
  %139 = load i64, i64* %frame191, align 8
  %sub192 = sub nsw i64 %139, 5
  %140 = inttoptr i64 %sub192 to i8*
  %141 = bitcast i8* %140 to %struct.frame*
  %wants_modeline193 = getelementptr inbounds %struct.frame, %struct.frame* %141, i32 0, i32 26
  %142 = bitcast i48* %wants_modeline193 to i64*
  %bf.load194 = load i64, i64* %142, align 8
  %bf.lshr195 = lshr i64 %bf.load194, 14
  %bf.clear196 = and i64 %bf.lshr195, 1
  %bf.cast197 = trunc i64 %bf.clear196 to i1
  br i1 %bf.cast197, label %land.lhs.true.198, label %cond.false.273

land.lhs.true.198:                                ; preds = %land.lhs.true.190
  %143 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents199 = getelementptr inbounds %struct.window, %struct.window* %143, i32 0, i32 10
  %144 = load i64, i64* %contents199, align 8
  %call200 = call %struct.buffer* @XBUFFER(i64 %144)
  %mode_line_format_201 = getelementptr inbounds %struct.buffer, %struct.buffer* %call200, i32 0, i32 12
  %145 = load i64, i64* %mode_line_format_201, align 8
  %call202 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp203 = icmp eq i64 %145, %call202
  br i1 %cmp203, label %cond.false.273, label %land.lhs.true.204

land.lhs.true.204:                                ; preds = %land.lhs.true.198
  %146 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height205 = getelementptr inbounds %struct.window, %struct.window* %146, i32 0, i32 35
  %147 = load i32, i32* %pixel_height205, align 4
  %148 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame206 = getelementptr inbounds %struct.window, %struct.window* %148, i32 0, i32 1
  %149 = load i64, i64* %frame206, align 8
  %sub207 = sub nsw i64 %149, 5
  %150 = inttoptr i64 %sub207 to i8*
  %151 = bitcast i8* %150 to %struct.frame*
  %line_height208 = getelementptr inbounds %struct.frame, %struct.frame* %151, i32 0, i32 60
  %152 = load i32, i32* %line_height208, align 4
  %cmp209 = icmp sgt i32 %147, %152
  br i1 %cmp209, label %cond.true.211, label %cond.false.273

cond.false.210:                                   ; preds = %cond.end.174
  br i1 false, label %cond.true.211, label %cond.false.273

cond.true.211:                                    ; preds = %cond.false.210, %land.lhs.true.204
  %153 = load %struct.window*, %struct.window** %w.addr, align 8
  %mode_line_height = getelementptr inbounds %struct.window, %struct.window* %153, i32 0, i32 63
  %154 = load i32, i32* %mode_line_height, align 4
  %cmp212 = icmp sge i32 %154, 0
  br i1 %cmp212, label %cond.true.213, label %cond.false.215

cond.true.213:                                    ; preds = %cond.true.211
  %155 = load %struct.window*, %struct.window** %w.addr, align 8
  %mode_line_height214 = getelementptr inbounds %struct.window, %struct.window* %155, i32 0, i32 63
  %156 = load i32, i32* %mode_line_height214, align 4
  br label %cond.end.271

cond.false.215:                                   ; preds = %cond.true.211
  %157 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix216 = getelementptr inbounds %struct.window, %struct.window* %157, i32 0, i32 24
  %158 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix216, align 8
  %tobool217 = icmp ne %struct.glyph_matrix* %158, null
  br i1 %tobool217, label %land.lhs.true.218, label %cond.false.229

land.lhs.true.218:                                ; preds = %cond.false.215
  %159 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix219 = getelementptr inbounds %struct.window, %struct.window* %159, i32 0, i32 24
  %160 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix219, align 8
  %rows220 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %160, i32 0, i32 1
  %161 = load %struct.glyph_row*, %struct.glyph_row** %rows220, align 8
  %tobool221 = icmp ne %struct.glyph_row* %161, null
  br i1 %tobool221, label %cond.true.222, label %cond.false.229

cond.true.222:                                    ; preds = %land.lhs.true.218
  %162 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix223 = getelementptr inbounds %struct.window, %struct.window* %162, i32 0, i32 24
  %163 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix223, align 8
  %rows224 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %163, i32 0, i32 1
  %164 = load %struct.glyph_row*, %struct.glyph_row** %rows224, align 8
  %165 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix225 = getelementptr inbounds %struct.window, %struct.window* %165, i32 0, i32 24
  %166 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix225, align 8
  %nrows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %166, i32 0, i32 3
  %167 = load i32, i32* %nrows, align 4
  %idx.ext = sext i32 %167 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %164, i64 %idx.ext
  %add.ptr226 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr, i64 -1
  %height227 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr226, i32 0, i32 7
  %168 = load i32, i32* %height227, align 4
  %tobool228 = icmp ne i32 %168, 0
  br i1 %tobool228, label %cond.true.230, label %cond.false.249

cond.false.229:                                   ; preds = %land.lhs.true.218, %cond.false.215
  br i1 false, label %cond.true.230, label %cond.false.249

cond.true.230:                                    ; preds = %cond.false.229, %cond.true.222
  %169 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix231 = getelementptr inbounds %struct.window, %struct.window* %169, i32 0, i32 24
  %170 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix231, align 8
  %tobool232 = icmp ne %struct.glyph_matrix* %170, null
  br i1 %tobool232, label %land.lhs.true.233, label %cond.false.246

land.lhs.true.233:                                ; preds = %cond.true.230
  %171 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix234 = getelementptr inbounds %struct.window, %struct.window* %171, i32 0, i32 24
  %172 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix234, align 8
  %rows235 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %172, i32 0, i32 1
  %173 = load %struct.glyph_row*, %struct.glyph_row** %rows235, align 8
  %tobool236 = icmp ne %struct.glyph_row* %173, null
  br i1 %tobool236, label %cond.true.237, label %cond.false.246

cond.true.237:                                    ; preds = %land.lhs.true.233
  %174 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix238 = getelementptr inbounds %struct.window, %struct.window* %174, i32 0, i32 24
  %175 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix238, align 8
  %rows239 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %175, i32 0, i32 1
  %176 = load %struct.glyph_row*, %struct.glyph_row** %rows239, align 8
  %177 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix240 = getelementptr inbounds %struct.window, %struct.window* %177, i32 0, i32 24
  %178 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix240, align 8
  %nrows241 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %178, i32 0, i32 3
  %179 = load i32, i32* %nrows241, align 4
  %idx.ext242 = sext i32 %179 to i64
  %add.ptr243 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %176, i64 %idx.ext242
  %add.ptr244 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr243, i64 -1
  %height245 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr244, i32 0, i32 7
  %180 = load i32, i32* %height245, align 4
  br label %cond.end.247

cond.false.246:                                   ; preds = %land.lhs.true.233, %cond.true.230
  br label %cond.end.247

cond.end.247:                                     ; preds = %cond.false.246, %cond.true.237
  %cond248 = phi i32 [ %180, %cond.true.237 ], [ 0, %cond.false.246 ]
  br label %cond.end.268

cond.false.249:                                   ; preds = %cond.false.229, %cond.true.222
  %181 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame250 = getelementptr inbounds %struct.window, %struct.window* %181, i32 0, i32 1
  %182 = load i64, i64* %frame250, align 8
  %sub251 = sub nsw i64 %182, 5
  %183 = inttoptr i64 %sub251 to i8*
  %184 = bitcast i8* %183 to %struct.frame*
  %185 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 473), align 1
  %tobool252 = trunc i8 %185 to i1
  br i1 %tobool252, label %lor.lhs.false.253, label %lor.end

lor.lhs.false.253:                                ; preds = %cond.false.249
  %186 = load %struct.window*, %struct.window** %w.addr, align 8
  %187 = load i64, i64* @selected_window, align 8
  %call254 = call %struct.window* @XWINDOW(i64 %187)
  %cmp255 = icmp eq %struct.window* %186, %call254
  br i1 %cmp255, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false.253
  %188 = load i64, i64* @minibuf_level, align 8
  %cmp256 = icmp sgt i64 %188, 0
  br i1 %cmp256, label %land.lhs.true.257, label %land.end

land.lhs.true.257:                                ; preds = %lor.rhs
  %189 = load i64, i64* @minibuf_selected_window, align 8
  %call258 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp259 = icmp eq i64 %189, %call258
  br i1 %cmp259, label %land.end, label %land.lhs.true.260

land.lhs.true.260:                                ; preds = %land.lhs.true.257
  %190 = load i64, i64* @selected_window, align 8
  %call261 = call %struct.window* @XWINDOW(i64 %190)
  %191 = load i64, i64* @minibuf_window, align 8
  %call262 = call %struct.window* @XWINDOW(i64 %191)
  %cmp263 = icmp eq %struct.window* %call261, %call262
  br i1 %cmp263, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true.260
  %192 = load %struct.window*, %struct.window** %w.addr, align 8
  %193 = load i64, i64* @minibuf_selected_window, align 8
  %call264 = call %struct.window* @XWINDOW(i64 %193)
  %cmp265 = icmp eq %struct.window* %192, %call264
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true.260, %land.lhs.true.257, %lor.rhs
  %194 = phi i1 [ false, %land.lhs.true.260 ], [ false, %land.lhs.true.257 ], [ false, %lor.rhs ], [ %cmp265, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %lor.lhs.false.253, %cond.false.249
  %195 = phi i1 [ true, %lor.lhs.false.253 ], [ true, %cond.false.249 ], [ %194, %land.end ]
  %cond266 = select i1 %195, i32 1, i32 2
  %call267 = call i32 @estimate_mode_line_height(%struct.frame* %184, i32 %cond266)
  br label %cond.end.268

cond.end.268:                                     ; preds = %lor.end, %cond.end.247
  %cond269 = phi i32 [ %cond248, %cond.end.247 ], [ %call267, %lor.end ]
  %196 = load %struct.window*, %struct.window** %w.addr, align 8
  %mode_line_height270 = getelementptr inbounds %struct.window, %struct.window* %196, i32 0, i32 63
  store i32 %cond269, i32* %mode_line_height270, align 4
  br label %cond.end.271

cond.end.271:                                     ; preds = %cond.end.268, %cond.true.213
  %cond272 = phi i32 [ %156, %cond.true.213 ], [ %cond269, %cond.end.268 ]
  br label %cond.end.274

cond.false.273:                                   ; preds = %cond.false.210, %land.lhs.true.204, %land.lhs.true.198, %land.lhs.true.190, %land.lhs.true.184, %cond.true.179
  br label %cond.end.274

cond.end.274:                                     ; preds = %cond.false.273, %cond.end.271
  %cond275 = phi i32 [ %cond272, %cond.end.271 ], [ 0, %cond.false.273 ]
  %sub276 = sub nsw i32 %sub176, %cond275
  store i32 %sub276, i32* %max_y, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end.274
  %197 = load i32, i32* %start.addr, align 4
  %198 = load i32, i32* %end.addr, align 4
  %cmp277 = icmp slt i32 %197, %198
  br i1 %cmp277, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %199 = load i32, i32* %start.addr, align 4
  %idxprom = sext i32 %199 to i64
  %200 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows278 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %200, i32 0, i32 1
  %201 = load %struct.glyph_row*, %struct.glyph_row** %rows278, align 8
  %arrayidx = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %201, i64 %idxprom
  store %struct.glyph_row* %arrayidx, %struct.glyph_row** %row, align 8
  %202 = load i32, i32* %dy.addr, align 4
  %203 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %y = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %203, i32 0, i32 4
  %204 = load i32, i32* %y, align 4
  %add279 = add nsw i32 %204, %202
  store i32 %add279, i32* %y, align 4
  %205 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %height280 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %205, i32 0, i32 7
  %206 = load i32, i32* %height280, align 4
  %207 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %visible_height = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %207, i32 0, i32 10
  store i32 %206, i32* %visible_height, align 4
  %208 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %y281 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %208, i32 0, i32 4
  %209 = load i32, i32* %y281, align 4
  %210 = load i32, i32* %min_y, align 4
  %cmp282 = icmp slt i32 %209, %210
  br i1 %cmp282, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %211 = load i32, i32* %min_y, align 4
  %212 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %y283 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %212, i32 0, i32 4
  %213 = load i32, i32* %y283, align 4
  %sub284 = sub nsw i32 %211, %213
  %214 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %visible_height285 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %214, i32 0, i32 10
  %215 = load i32, i32* %visible_height285, align 4
  %sub286 = sub nsw i32 %215, %sub284
  store i32 %sub286, i32* %visible_height285, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %216 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %y287 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %216, i32 0, i32 4
  %217 = load i32, i32* %y287, align 4
  %218 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %height288 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %218, i32 0, i32 7
  %219 = load i32, i32* %height288, align 4
  %add289 = add nsw i32 %217, %219
  %220 = load i32, i32* %max_y, align 4
  %cmp290 = icmp sgt i32 %add289, %220
  br i1 %cmp290, label %if.then.291, label %if.end.298

if.then.291:                                      ; preds = %if.end
  %221 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %y292 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %221, i32 0, i32 4
  %222 = load i32, i32* %y292, align 4
  %223 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %height293 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %223, i32 0, i32 7
  %224 = load i32, i32* %height293, align 4
  %add294 = add nsw i32 %222, %224
  %225 = load i32, i32* %max_y, align 4
  %sub295 = sub nsw i32 %add294, %225
  %226 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %visible_height296 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %226, i32 0, i32 10
  %227 = load i32, i32* %visible_height296, align 4
  %sub297 = sub nsw i32 %227, %sub295
  store i32 %sub297, i32* %visible_height296, align 4
  br label %if.end.298

if.end.298:                                       ; preds = %if.then.291, %if.end
  %228 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %fringe_bitmap_periodic_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %228, i32 0, i32 22
  %229 = bitcast i40* %fringe_bitmap_periodic_p to i64*
  %bf.load299 = load i64, i64* %229, align 4
  %bf.lshr300 = lshr i64 %bf.load299, 8
  %bf.clear301 = and i64 %bf.lshr300, 1
  %bf.cast302 = trunc i64 %bf.clear301 to i1
  br i1 %bf.cast302, label %if.then.303, label %if.end.306

if.then.303:                                      ; preds = %if.end.298
  %230 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %redraw_fringe_bitmaps_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %230, i32 0, i32 22
  %231 = bitcast i40* %redraw_fringe_bitmaps_p to i64*
  %bf.load304 = load i64, i64* %231, align 4
  %bf.clear305 = and i64 %bf.load304, -513
  %bf.set = or i64 %bf.clear305, 512
  store i64 %bf.set, i64* %231, align 4
  br label %if.end.306

if.end.306:                                       ; preds = %if.then.303, %if.end.298
  br label %for.inc

for.inc:                                          ; preds = %if.end.306
  %232 = load i32, i32* %start.addr, align 4
  %inc = add nsw i32 %232, 1
  store i32 %inc, i32* %start.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare zeroext i1 @BUFFERP(i64) #1

declare %struct.buffer* @XBUFFER(i64) #1

declare i64 @builtin_lisp_symbol(i32) #1

declare i32 @estimate_mode_line_height(%struct.frame*, i32) #1

declare %struct.window* @XWINDOW(i64) #1

; Function Attrs: nounwind uwtable
define void @clear_current_matrices(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %current_matrix = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 25
  %1 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %tobool = icmp ne %struct.glyph_matrix* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %current_matrix1 = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 25
  %3 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix1, align 8
  call void @clear_glyph_matrix(%struct.glyph_matrix* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 5
  %5 = load i64, i64* %root_window, align 8
  %call = call %struct.window* @XWINDOW(i64 %5)
  call void @clear_window_matrices(%struct.window* %call, i1 zeroext false)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @clear_window_matrices(%struct.window* %w, i1 zeroext %desired_p) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %desired_p.addr = alloca i8, align 1
  store %struct.window* %w, %struct.window** %w.addr, align 8
  %frombool = zext i1 %desired_p to i8
  store i8 %frombool, i8* %desired_p.addr, align 1
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %entry
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %tobool = icmp ne %struct.window* %0, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 10
  %2 = load i64, i64* %contents, align 8
  %call = call zeroext i1 @WINDOWP(i64 %2)
  br i1 %call, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %3 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents1 = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 10
  %4 = load i64, i64* %contents1, align 8
  %call2 = call %struct.window* @XWINDOW(i64 %4)
  %5 = load i8, i8* %desired_p.addr, align 1
  %tobool3 = trunc i8 %5 to i1
  call void @clear_window_matrices(%struct.window* %call2, i1 zeroext %tobool3)
  br label %if.end.7

if.else:                                          ; preds = %while.body
  %6 = load i8, i8* %desired_p.addr, align 1
  %tobool4 = trunc i8 %6 to i1
  br i1 %tobool4, label %if.then.5, label %if.else.6

if.then.5:                                        ; preds = %if.else
  %7 = load %struct.window*, %struct.window** %w.addr, align 8
  %desired_matrix = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 25
  %8 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  call void @clear_glyph_matrix(%struct.glyph_matrix* %8)
  br label %if.end

if.else.6:                                        ; preds = %if.else
  %9 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %9, i32 0, i32 24
  %10 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  call void @clear_glyph_matrix(%struct.glyph_matrix* %10)
  %11 = load %struct.window*, %struct.window** %w.addr, align 8
  %window_end_valid = getelementptr inbounds %struct.window, %struct.window* %11, i32 0, i32 67
  %bf.load = load i16, i16* %window_end_valid, align 4
  %bf.clear = and i16 %bf.load, -8193
  store i16 %bf.clear, i16* %window_end_valid, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.6, %if.then.5
  br label %if.end.7

if.end.7:                                         ; preds = %if.end, %if.then
  %12 = load %struct.window*, %struct.window** %w.addr, align 8
  %next = getelementptr inbounds %struct.window, %struct.window* %12, i32 0, i32 2
  %13 = load i64, i64* %next, align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %13, %call8
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.7
  br label %cond.end

cond.false:                                       ; preds = %if.end.7
  %14 = load %struct.window*, %struct.window** %w.addr, align 8
  %next9 = getelementptr inbounds %struct.window, %struct.window* %14, i32 0, i32 2
  %15 = load i64, i64* %next9, align 8
  %call10 = call %struct.window* @XWINDOW(i64 %15)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.window* [ null, %cond.true ], [ %call10, %cond.false ]
  store %struct.window* %cond, %struct.window** %w.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @clear_desired_matrices(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %desired_matrix = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 24
  %1 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %tobool = icmp ne %struct.glyph_matrix* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %desired_matrix1 = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 24
  %3 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix1, align 8
  call void @clear_glyph_matrix(%struct.glyph_matrix* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 5
  %5 = load i64, i64* %root_window, align 8
  %call = call %struct.window* @XWINDOW(i64 %5)
  call void @clear_window_matrices(%struct.window* %call, i1 zeroext true)
  ret void
}

; Function Attrs: nounwind uwtable
define void @clear_glyph_row(%struct.glyph_row* %row) #0 {
entry:
  %row.addr = alloca %struct.glyph_row*, align 8
  store %struct.glyph_row* %row, %struct.glyph_row** %row.addr, align 8
  %0 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %used = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %0, i32 0, i32 1
  %1 = bitcast [4 x i16]* %used to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 224, i32 2, i1 false)
  ret void
}

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #2

; Function Attrs: nounwind uwtable
define void @blank_row(%struct.window* %w, %struct.glyph_row* %row, i32 %y) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %row.addr = alloca %struct.glyph_row*, align 8
  %y.addr = alloca i32, align 4
  %min_y = alloca i32, align 4
  %max_y = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store %struct.glyph_row* %row, %struct.glyph_row** %row.addr, align 8
  store i32 %y, i32* %y.addr, align 4
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 10
  %1 = load i64, i64* %contents, align 8
  %call = call zeroext i1 @BUFFERP(i64 %1)
  br i1 %call, label %cond.true, label %cond.false.54

cond.true:                                        ; preds = %entry
  %2 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini = getelementptr inbounds %struct.window, %struct.window* %2, i32 0, i32 67
  %bf.load = load i16, i16* %mini, align 4
  %bf.clear = and i16 %bf.load, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %cond.false.91, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.true
  %3 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 67
  %bf.load1 = load i16, i16* %pseudo_window_p, align 4
  %bf.lshr = lshr i16 %bf.load1, 11
  %bf.clear2 = and i16 %bf.lshr, 1
  %bf.cast3 = trunc i16 %bf.clear2 to i1
  br i1 %bf.cast3, label %cond.false.91, label %land.lhs.true.4

land.lhs.true.4:                                  ; preds = %land.lhs.true
  %4 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %4, i32 0, i32 1
  %5 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %5, 5
  %6 = inttoptr i64 %sub to i8*
  %7 = bitcast i8* %6 to %struct.frame*
  %wants_modeline = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 26
  %8 = bitcast i48* %wants_modeline to i64*
  %bf.load5 = load i64, i64* %8, align 8
  %bf.lshr6 = lshr i64 %bf.load5, 14
  %bf.clear7 = and i64 %bf.lshr6, 1
  %bf.cast8 = trunc i64 %bf.clear7 to i1
  br i1 %bf.cast8, label %land.lhs.true.9, label %cond.false.91

land.lhs.true.9:                                  ; preds = %land.lhs.true.4
  %9 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents10 = getelementptr inbounds %struct.window, %struct.window* %9, i32 0, i32 10
  %10 = load i64, i64* %contents10, align 8
  %call11 = call %struct.buffer* @XBUFFER(i64 %10)
  %header_line_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call11, i32 0, i32 13
  %11 = load i64, i64* %header_line_format_, align 8
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %11, %call12
  br i1 %cmp, label %cond.false.91, label %land.lhs.true.13

land.lhs.true.13:                                 ; preds = %land.lhs.true.9
  %12 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height = getelementptr inbounds %struct.window, %struct.window* %12, i32 0, i32 35
  %13 = load i32, i32* %pixel_height, align 4
  %14 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents14 = getelementptr inbounds %struct.window, %struct.window* %14, i32 0, i32 10
  %15 = load i64, i64* %contents14, align 8
  %call15 = call zeroext i1 @BUFFERP(i64 %15)
  br i1 %call15, label %cond.true.16, label %cond.false

cond.true.16:                                     ; preds = %land.lhs.true.13
  %16 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini17 = getelementptr inbounds %struct.window, %struct.window* %16, i32 0, i32 67
  %bf.load18 = load i16, i16* %mini17, align 4
  %bf.clear19 = and i16 %bf.load18, 1
  %bf.cast20 = trunc i16 %bf.clear19 to i1
  br i1 %bf.cast20, label %cond.false.49, label %land.lhs.true.21

land.lhs.true.21:                                 ; preds = %cond.true.16
  %17 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p22 = getelementptr inbounds %struct.window, %struct.window* %17, i32 0, i32 67
  %bf.load23 = load i16, i16* %pseudo_window_p22, align 4
  %bf.lshr24 = lshr i16 %bf.load23, 11
  %bf.clear25 = and i16 %bf.lshr24, 1
  %bf.cast26 = trunc i16 %bf.clear25 to i1
  br i1 %bf.cast26, label %cond.false.49, label %land.lhs.true.27

land.lhs.true.27:                                 ; preds = %land.lhs.true.21
  %18 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame28 = getelementptr inbounds %struct.window, %struct.window* %18, i32 0, i32 1
  %19 = load i64, i64* %frame28, align 8
  %sub29 = sub nsw i64 %19, 5
  %20 = inttoptr i64 %sub29 to i8*
  %21 = bitcast i8* %20 to %struct.frame*
  %wants_modeline30 = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 26
  %22 = bitcast i48* %wants_modeline30 to i64*
  %bf.load31 = load i64, i64* %22, align 8
  %bf.lshr32 = lshr i64 %bf.load31, 14
  %bf.clear33 = and i64 %bf.lshr32, 1
  %bf.cast34 = trunc i64 %bf.clear33 to i1
  br i1 %bf.cast34, label %land.lhs.true.35, label %cond.false.49

land.lhs.true.35:                                 ; preds = %land.lhs.true.27
  %23 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents36 = getelementptr inbounds %struct.window, %struct.window* %23, i32 0, i32 10
  %24 = load i64, i64* %contents36, align 8
  %call37 = call %struct.buffer* @XBUFFER(i64 %24)
  %mode_line_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call37, i32 0, i32 12
  %25 = load i64, i64* %mode_line_format_, align 8
  %call38 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp39 = icmp eq i64 %25, %call38
  br i1 %cmp39, label %cond.false.49, label %land.lhs.true.40

land.lhs.true.40:                                 ; preds = %land.lhs.true.35
  %26 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height41 = getelementptr inbounds %struct.window, %struct.window* %26, i32 0, i32 35
  %27 = load i32, i32* %pixel_height41, align 4
  %28 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame42 = getelementptr inbounds %struct.window, %struct.window* %28, i32 0, i32 1
  %29 = load i64, i64* %frame42, align 8
  %sub43 = sub nsw i64 %29, 5
  %30 = inttoptr i64 %sub43 to i8*
  %31 = bitcast i8* %30 to %struct.frame*
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %31, i32 0, i32 60
  %32 = load i32, i32* %line_height, align 4
  %cmp44 = icmp sgt i32 %27, %32
  br i1 %cmp44, label %cond.true.45, label %cond.false.49

cond.false:                                       ; preds = %land.lhs.true.13
  br i1 false, label %cond.true.45, label %cond.false.49

cond.true.45:                                     ; preds = %cond.false, %land.lhs.true.40
  %33 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame46 = getelementptr inbounds %struct.window, %struct.window* %33, i32 0, i32 1
  %34 = load i64, i64* %frame46, align 8
  %sub47 = sub nsw i64 %34, 5
  %35 = inttoptr i64 %sub47 to i8*
  %36 = bitcast i8* %35 to %struct.frame*
  %line_height48 = getelementptr inbounds %struct.frame, %struct.frame* %36, i32 0, i32 60
  %37 = load i32, i32* %line_height48, align 4
  %mul = mul nsw i32 2, %37
  br label %cond.end

cond.false.49:                                    ; preds = %cond.false, %land.lhs.true.40, %land.lhs.true.35, %land.lhs.true.27, %land.lhs.true.21, %cond.true.16
  %38 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame50 = getelementptr inbounds %struct.window, %struct.window* %38, i32 0, i32 1
  %39 = load i64, i64* %frame50, align 8
  %sub51 = sub nsw i64 %39, 5
  %40 = inttoptr i64 %sub51 to i8*
  %41 = bitcast i8* %40 to %struct.frame*
  %line_height52 = getelementptr inbounds %struct.frame, %struct.frame* %41, i32 0, i32 60
  %42 = load i32, i32* %line_height52, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false.49, %cond.true.45
  %cond = phi i32 [ %mul, %cond.true.45 ], [ %42, %cond.false.49 ]
  %cmp53 = icmp sgt i32 %13, %cond
  br i1 %cmp53, label %cond.true.55, label %cond.false.91

cond.false.54:                                    ; preds = %entry
  br i1 false, label %cond.true.55, label %cond.false.91

cond.true.55:                                     ; preds = %cond.false.54, %cond.end
  %43 = load %struct.window*, %struct.window** %w.addr, align 8
  %header_line_height = getelementptr inbounds %struct.window, %struct.window* %43, i32 0, i32 64
  %44 = load i32, i32* %header_line_height, align 4
  %cmp56 = icmp sge i32 %44, 0
  br i1 %cmp56, label %cond.true.57, label %cond.false.59

cond.true.57:                                     ; preds = %cond.true.55
  %45 = load %struct.window*, %struct.window** %w.addr, align 8
  %header_line_height58 = getelementptr inbounds %struct.window, %struct.window* %45, i32 0, i32 64
  %46 = load i32, i32* %header_line_height58, align 4
  br label %cond.end.89

cond.false.59:                                    ; preds = %cond.true.55
  %47 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %47, i32 0, i32 24
  %48 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %tobool = icmp ne %struct.glyph_matrix* %48, null
  br i1 %tobool, label %land.lhs.true.60, label %cond.false.67

land.lhs.true.60:                                 ; preds = %cond.false.59
  %49 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix61 = getelementptr inbounds %struct.window, %struct.window* %49, i32 0, i32 24
  %50 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix61, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %50, i32 0, i32 1
  %51 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %tobool62 = icmp ne %struct.glyph_row* %51, null
  br i1 %tobool62, label %cond.true.63, label %cond.false.67

cond.true.63:                                     ; preds = %land.lhs.true.60
  %52 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix64 = getelementptr inbounds %struct.window, %struct.window* %52, i32 0, i32 24
  %53 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix64, align 8
  %rows65 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %53, i32 0, i32 1
  %54 = load %struct.glyph_row*, %struct.glyph_row** %rows65, align 8
  %height = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %54, i32 0, i32 7
  %55 = load i32, i32* %height, align 4
  %tobool66 = icmp ne i32 %55, 0
  br i1 %tobool66, label %cond.true.68, label %cond.false.82

cond.false.67:                                    ; preds = %land.lhs.true.60, %cond.false.59
  br i1 false, label %cond.true.68, label %cond.false.82

cond.true.68:                                     ; preds = %cond.false.67, %cond.true.63
  %56 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix69 = getelementptr inbounds %struct.window, %struct.window* %56, i32 0, i32 24
  %57 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix69, align 8
  %tobool70 = icmp ne %struct.glyph_matrix* %57, null
  br i1 %tobool70, label %land.lhs.true.71, label %cond.false.79

land.lhs.true.71:                                 ; preds = %cond.true.68
  %58 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix72 = getelementptr inbounds %struct.window, %struct.window* %58, i32 0, i32 24
  %59 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix72, align 8
  %rows73 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %59, i32 0, i32 1
  %60 = load %struct.glyph_row*, %struct.glyph_row** %rows73, align 8
  %tobool74 = icmp ne %struct.glyph_row* %60, null
  br i1 %tobool74, label %cond.true.75, label %cond.false.79

cond.true.75:                                     ; preds = %land.lhs.true.71
  %61 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix76 = getelementptr inbounds %struct.window, %struct.window* %61, i32 0, i32 24
  %62 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix76, align 8
  %rows77 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %62, i32 0, i32 1
  %63 = load %struct.glyph_row*, %struct.glyph_row** %rows77, align 8
  %height78 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %63, i32 0, i32 7
  %64 = load i32, i32* %height78, align 4
  br label %cond.end.80

cond.false.79:                                    ; preds = %land.lhs.true.71, %cond.true.68
  br label %cond.end.80

cond.end.80:                                      ; preds = %cond.false.79, %cond.true.75
  %cond81 = phi i32 [ %64, %cond.true.75 ], [ 0, %cond.false.79 ]
  br label %cond.end.86

cond.false.82:                                    ; preds = %cond.false.67, %cond.true.63
  %65 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame83 = getelementptr inbounds %struct.window, %struct.window* %65, i32 0, i32 1
  %66 = load i64, i64* %frame83, align 8
  %sub84 = sub nsw i64 %66, 5
  %67 = inttoptr i64 %sub84 to i8*
  %68 = bitcast i8* %67 to %struct.frame*
  %call85 = call i32 @estimate_mode_line_height(%struct.frame* %68, i32 5)
  br label %cond.end.86

cond.end.86:                                      ; preds = %cond.false.82, %cond.end.80
  %cond87 = phi i32 [ %cond81, %cond.end.80 ], [ %call85, %cond.false.82 ]
  %69 = load %struct.window*, %struct.window** %w.addr, align 8
  %header_line_height88 = getelementptr inbounds %struct.window, %struct.window* %69, i32 0, i32 64
  store i32 %cond87, i32* %header_line_height88, align 4
  br label %cond.end.89

cond.end.89:                                      ; preds = %cond.end.86, %cond.true.57
  %cond90 = phi i32 [ %46, %cond.true.57 ], [ %cond87, %cond.end.86 ]
  br label %cond.end.92

cond.false.91:                                    ; preds = %cond.false.54, %cond.end, %land.lhs.true.9, %land.lhs.true.4, %land.lhs.true, %cond.true
  br label %cond.end.92

cond.end.92:                                      ; preds = %cond.false.91, %cond.end.89
  %cond93 = phi i32 [ %cond90, %cond.end.89 ], [ 0, %cond.false.91 ]
  store i32 %cond93, i32* %min_y, align 4
  %70 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height94 = getelementptr inbounds %struct.window, %struct.window* %70, i32 0, i32 35
  %71 = load i32, i32* %pixel_height94, align 4
  %72 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_top = getelementptr inbounds %struct.window, %struct.window* %72, i32 0, i32 31
  %73 = load i32, i32* %pixel_top, align 4
  %74 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height95 = getelementptr inbounds %struct.window, %struct.window* %74, i32 0, i32 35
  %75 = load i32, i32* %pixel_height95, align 4
  %add = add nsw i32 %73, %75
  %76 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame96 = getelementptr inbounds %struct.window, %struct.window* %76, i32 0, i32 1
  %77 = load i64, i64* %frame96, align 8
  %sub97 = sub nsw i64 %77, 5
  %78 = inttoptr i64 %sub97 to i8*
  %79 = bitcast i8* %78 to %struct.frame*
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %79, i32 0, i32 5
  %80 = load i64, i64* %root_window, align 8
  %call98 = call %struct.window* @XWINDOW(i64 %80)
  %pixel_top99 = getelementptr inbounds %struct.window, %struct.window* %call98, i32 0, i32 31
  %81 = load i32, i32* %pixel_top99, align 4
  %82 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame100 = getelementptr inbounds %struct.window, %struct.window* %82, i32 0, i32 1
  %83 = load i64, i64* %frame100, align 8
  %sub101 = sub nsw i64 %83, 5
  %84 = inttoptr i64 %sub101 to i8*
  %85 = bitcast i8* %84 to %struct.frame*
  %root_window102 = getelementptr inbounds %struct.frame, %struct.frame* %85, i32 0, i32 5
  %86 = load i64, i64* %root_window102, align 8
  %call103 = call %struct.window* @XWINDOW(i64 %86)
  %pixel_height104 = getelementptr inbounds %struct.window, %struct.window* %call103, i32 0, i32 35
  %87 = load i32, i32* %pixel_height104, align 4
  %add105 = add nsw i32 %81, %87
  %cmp106 = icmp eq i32 %add, %add105
  br i1 %cmp106, label %land.lhs.true.107, label %lor.lhs.false

land.lhs.true.107:                                ; preds = %cond.end.92
  %88 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame108 = getelementptr inbounds %struct.window, %struct.window* %88, i32 0, i32 1
  %89 = load i64, i64* %frame108, align 8
  %sub109 = sub nsw i64 %89, 5
  %90 = inttoptr i64 %sub109 to i8*
  %91 = bitcast i8* %90 to %struct.frame*
  %root_window110 = getelementptr inbounds %struct.frame, %struct.frame* %91, i32 0, i32 5
  %92 = load i64, i64* %root_window110, align 8
  %call111 = call %struct.window* @XWINDOW(i64 %92)
  %next = getelementptr inbounds %struct.window, %struct.window* %call111, i32 0, i32 2
  %93 = load i64, i64* %next, align 8
  %call112 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp113 = icmp eq i64 %93, %call112
  br i1 %cmp113, label %cond.true.124, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.107, %cond.end.92
  %94 = load %struct.window*, %struct.window** %w.addr, align 8
  %prev = getelementptr inbounds %struct.window, %struct.window* %94, i32 0, i32 3
  %95 = load i64, i64* %prev, align 8
  %96 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame114 = getelementptr inbounds %struct.window, %struct.window* %96, i32 0, i32 1
  %97 = load i64, i64* %frame114, align 8
  %sub115 = sub nsw i64 %97, 5
  %98 = inttoptr i64 %sub115 to i8*
  %99 = bitcast i8* %98 to %struct.frame*
  %root_window116 = getelementptr inbounds %struct.frame, %struct.frame* %99, i32 0, i32 5
  %100 = load i64, i64* %root_window116, align 8
  %cmp117 = icmp eq i64 %95, %100
  br i1 %cmp117, label %cond.true.124, label %lor.lhs.false.118

lor.lhs.false.118:                                ; preds = %lor.lhs.false
  %101 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p119 = getelementptr inbounds %struct.window, %struct.window* %101, i32 0, i32 67
  %bf.load120 = load i16, i16* %pseudo_window_p119, align 4
  %bf.lshr121 = lshr i16 %bf.load120, 11
  %bf.clear122 = and i16 %bf.lshr121, 1
  %bf.cast123 = trunc i16 %bf.clear122 to i1
  br i1 %bf.cast123, label %cond.true.124, label %cond.false.125

cond.true.124:                                    ; preds = %lor.lhs.false.118, %lor.lhs.false, %land.lhs.true.107
  br label %cond.end.128

cond.false.125:                                   ; preds = %lor.lhs.false.118
  %102 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame126 = getelementptr inbounds %struct.window, %struct.window* %102, i32 0, i32 1
  %103 = load i64, i64* %frame126, align 8
  %sub127 = sub nsw i64 %103, 5
  %104 = inttoptr i64 %sub127 to i8*
  %105 = bitcast i8* %104 to %struct.frame*
  %bottom_divider_width = getelementptr inbounds %struct.frame, %struct.frame* %105, i32 0, i32 53
  %106 = load i32, i32* %bottom_divider_width, align 4
  br label %cond.end.128

cond.end.128:                                     ; preds = %cond.false.125, %cond.true.124
  %cond129 = phi i32 [ 0, %cond.true.124 ], [ %106, %cond.false.125 ]
  %sub130 = sub nsw i32 %71, %cond129
  %107 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p131 = getelementptr inbounds %struct.window, %struct.window* %107, i32 0, i32 67
  %bf.load132 = load i16, i16* %pseudo_window_p131, align 4
  %bf.lshr133 = lshr i16 %bf.load132, 11
  %bf.clear134 = and i16 %bf.lshr133, 1
  %bf.cast135 = trunc i16 %bf.clear134 to i1
  br i1 %bf.cast135, label %cond.true.147, label %lor.lhs.false.136

lor.lhs.false.136:                                ; preds = %cond.end.128
  %108 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini137 = getelementptr inbounds %struct.window, %struct.window* %108, i32 0, i32 67
  %bf.load138 = load i16, i16* %mini137, align 4
  %bf.clear139 = and i16 %bf.load138, 1
  %bf.cast140 = trunc i16 %bf.clear139 to i1
  br i1 %bf.cast140, label %land.lhs.true.141, label %cond.false.148

land.lhs.true.141:                                ; preds = %lor.lhs.false.136
  %109 = load %struct.window*, %struct.window** %w.addr, align 8
  %prev142 = getelementptr inbounds %struct.window, %struct.window* %109, i32 0, i32 3
  %110 = load i64, i64* %prev142, align 8
  %111 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame143 = getelementptr inbounds %struct.window, %struct.window* %111, i32 0, i32 1
  %112 = load i64, i64* %frame143, align 8
  %sub144 = sub nsw i64 %112, 5
  %113 = inttoptr i64 %sub144 to i8*
  %114 = bitcast i8* %113 to %struct.frame*
  %root_window145 = getelementptr inbounds %struct.frame, %struct.frame* %114, i32 0, i32 5
  %115 = load i64, i64* %root_window145, align 8
  %cmp146 = icmp eq i64 %110, %115
  br i1 %cmp146, label %cond.true.147, label %cond.false.148

cond.true.147:                                    ; preds = %land.lhs.true.141, %cond.end.128
  br i1 false, label %cond.true.164, label %cond.false.173

cond.false.148:                                   ; preds = %land.lhs.true.141, %lor.lhs.false.136
  %116 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal_scroll_bar_type = getelementptr inbounds %struct.window, %struct.window* %116, i32 0, i32 18
  %117 = load i64, i64* %horizontal_scroll_bar_type, align 8
  %call149 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp150 = icmp eq i64 %117, %call149
  br i1 %cmp150, label %cond.true.151, label %cond.false.158

cond.true.151:                                    ; preds = %cond.false.148
  %118 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame152 = getelementptr inbounds %struct.window, %struct.window* %118, i32 0, i32 1
  %119 = load i64, i64* %frame152, align 8
  %sub153 = sub nsw i64 %119, 5
  %120 = inttoptr i64 %sub153 to i8*
  %121 = bitcast i8* %120 to %struct.frame*
  %horizontal_scroll_bars = getelementptr inbounds %struct.frame, %struct.frame* %121, i32 0, i32 26
  %122 = bitcast i48* %horizontal_scroll_bars to i64*
  %bf.load154 = load i64, i64* %122, align 8
  %bf.lshr155 = lshr i64 %bf.load154, 32
  %bf.clear156 = and i64 %bf.lshr155, 1
  %bf.cast157 = trunc i64 %bf.clear156 to i1
  br i1 %bf.cast157, label %cond.true.164, label %cond.false.173

cond.false.158:                                   ; preds = %cond.false.148
  %123 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal_scroll_bar_type159 = getelementptr inbounds %struct.window, %struct.window* %123, i32 0, i32 18
  %124 = load i64, i64* %horizontal_scroll_bar_type159, align 8
  %call160 = call i64 @builtin_lisp_symbol(i32 213)
  %cmp161 = icmp eq i64 %124, %call160
  br i1 %cmp161, label %cond.true.162, label %cond.false.163

cond.true.162:                                    ; preds = %cond.false.158
  br i1 true, label %cond.true.164, label %cond.false.173

cond.false.163:                                   ; preds = %cond.false.158
  br i1 false, label %cond.true.164, label %cond.false.173

cond.true.164:                                    ; preds = %cond.false.163, %cond.true.162, %cond.true.151, %cond.true.147
  %125 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_height = getelementptr inbounds %struct.window, %struct.window* %125, i32 0, i32 62
  %126 = load i32, i32* %scroll_bar_height, align 4
  %cmp165 = icmp sge i32 %126, 0
  br i1 %cmp165, label %cond.true.166, label %cond.false.168

cond.true.166:                                    ; preds = %cond.true.164
  %127 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_height167 = getelementptr inbounds %struct.window, %struct.window* %127, i32 0, i32 62
  %128 = load i32, i32* %scroll_bar_height167, align 4
  br label %cond.end.171

cond.false.168:                                   ; preds = %cond.true.164
  %129 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame169 = getelementptr inbounds %struct.window, %struct.window* %129, i32 0, i32 1
  %130 = load i64, i64* %frame169, align 8
  %sub170 = sub nsw i64 %130, 5
  %131 = inttoptr i64 %sub170 to i8*
  %132 = bitcast i8* %131 to %struct.frame*
  %config_scroll_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %132, i32 0, i32 71
  %133 = load i32, i32* %config_scroll_bar_height, align 4
  br label %cond.end.171

cond.end.171:                                     ; preds = %cond.false.168, %cond.true.166
  %cond172 = phi i32 [ %128, %cond.true.166 ], [ %133, %cond.false.168 ]
  br label %cond.end.174

cond.false.173:                                   ; preds = %cond.false.163, %cond.true.162, %cond.true.151, %cond.true.147
  br label %cond.end.174

cond.end.174:                                     ; preds = %cond.false.173, %cond.end.171
  %cond175 = phi i32 [ %cond172, %cond.end.171 ], [ 0, %cond.false.173 ]
  %sub176 = sub nsw i32 %sub130, %cond175
  %134 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents177 = getelementptr inbounds %struct.window, %struct.window* %134, i32 0, i32 10
  %135 = load i64, i64* %contents177, align 8
  %call178 = call zeroext i1 @BUFFERP(i64 %135)
  br i1 %call178, label %cond.true.179, label %cond.false.210

cond.true.179:                                    ; preds = %cond.end.174
  %136 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini180 = getelementptr inbounds %struct.window, %struct.window* %136, i32 0, i32 67
  %bf.load181 = load i16, i16* %mini180, align 4
  %bf.clear182 = and i16 %bf.load181, 1
  %bf.cast183 = trunc i16 %bf.clear182 to i1
  br i1 %bf.cast183, label %cond.false.273, label %land.lhs.true.184

land.lhs.true.184:                                ; preds = %cond.true.179
  %137 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p185 = getelementptr inbounds %struct.window, %struct.window* %137, i32 0, i32 67
  %bf.load186 = load i16, i16* %pseudo_window_p185, align 4
  %bf.lshr187 = lshr i16 %bf.load186, 11
  %bf.clear188 = and i16 %bf.lshr187, 1
  %bf.cast189 = trunc i16 %bf.clear188 to i1
  br i1 %bf.cast189, label %cond.false.273, label %land.lhs.true.190

land.lhs.true.190:                                ; preds = %land.lhs.true.184
  %138 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame191 = getelementptr inbounds %struct.window, %struct.window* %138, i32 0, i32 1
  %139 = load i64, i64* %frame191, align 8
  %sub192 = sub nsw i64 %139, 5
  %140 = inttoptr i64 %sub192 to i8*
  %141 = bitcast i8* %140 to %struct.frame*
  %wants_modeline193 = getelementptr inbounds %struct.frame, %struct.frame* %141, i32 0, i32 26
  %142 = bitcast i48* %wants_modeline193 to i64*
  %bf.load194 = load i64, i64* %142, align 8
  %bf.lshr195 = lshr i64 %bf.load194, 14
  %bf.clear196 = and i64 %bf.lshr195, 1
  %bf.cast197 = trunc i64 %bf.clear196 to i1
  br i1 %bf.cast197, label %land.lhs.true.198, label %cond.false.273

land.lhs.true.198:                                ; preds = %land.lhs.true.190
  %143 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents199 = getelementptr inbounds %struct.window, %struct.window* %143, i32 0, i32 10
  %144 = load i64, i64* %contents199, align 8
  %call200 = call %struct.buffer* @XBUFFER(i64 %144)
  %mode_line_format_201 = getelementptr inbounds %struct.buffer, %struct.buffer* %call200, i32 0, i32 12
  %145 = load i64, i64* %mode_line_format_201, align 8
  %call202 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp203 = icmp eq i64 %145, %call202
  br i1 %cmp203, label %cond.false.273, label %land.lhs.true.204

land.lhs.true.204:                                ; preds = %land.lhs.true.198
  %146 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height205 = getelementptr inbounds %struct.window, %struct.window* %146, i32 0, i32 35
  %147 = load i32, i32* %pixel_height205, align 4
  %148 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame206 = getelementptr inbounds %struct.window, %struct.window* %148, i32 0, i32 1
  %149 = load i64, i64* %frame206, align 8
  %sub207 = sub nsw i64 %149, 5
  %150 = inttoptr i64 %sub207 to i8*
  %151 = bitcast i8* %150 to %struct.frame*
  %line_height208 = getelementptr inbounds %struct.frame, %struct.frame* %151, i32 0, i32 60
  %152 = load i32, i32* %line_height208, align 4
  %cmp209 = icmp sgt i32 %147, %152
  br i1 %cmp209, label %cond.true.211, label %cond.false.273

cond.false.210:                                   ; preds = %cond.end.174
  br i1 false, label %cond.true.211, label %cond.false.273

cond.true.211:                                    ; preds = %cond.false.210, %land.lhs.true.204
  %153 = load %struct.window*, %struct.window** %w.addr, align 8
  %mode_line_height = getelementptr inbounds %struct.window, %struct.window* %153, i32 0, i32 63
  %154 = load i32, i32* %mode_line_height, align 4
  %cmp212 = icmp sge i32 %154, 0
  br i1 %cmp212, label %cond.true.213, label %cond.false.215

cond.true.213:                                    ; preds = %cond.true.211
  %155 = load %struct.window*, %struct.window** %w.addr, align 8
  %mode_line_height214 = getelementptr inbounds %struct.window, %struct.window* %155, i32 0, i32 63
  %156 = load i32, i32* %mode_line_height214, align 4
  br label %cond.end.271

cond.false.215:                                   ; preds = %cond.true.211
  %157 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix216 = getelementptr inbounds %struct.window, %struct.window* %157, i32 0, i32 24
  %158 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix216, align 8
  %tobool217 = icmp ne %struct.glyph_matrix* %158, null
  br i1 %tobool217, label %land.lhs.true.218, label %cond.false.229

land.lhs.true.218:                                ; preds = %cond.false.215
  %159 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix219 = getelementptr inbounds %struct.window, %struct.window* %159, i32 0, i32 24
  %160 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix219, align 8
  %rows220 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %160, i32 0, i32 1
  %161 = load %struct.glyph_row*, %struct.glyph_row** %rows220, align 8
  %tobool221 = icmp ne %struct.glyph_row* %161, null
  br i1 %tobool221, label %cond.true.222, label %cond.false.229

cond.true.222:                                    ; preds = %land.lhs.true.218
  %162 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix223 = getelementptr inbounds %struct.window, %struct.window* %162, i32 0, i32 24
  %163 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix223, align 8
  %rows224 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %163, i32 0, i32 1
  %164 = load %struct.glyph_row*, %struct.glyph_row** %rows224, align 8
  %165 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix225 = getelementptr inbounds %struct.window, %struct.window* %165, i32 0, i32 24
  %166 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix225, align 8
  %nrows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %166, i32 0, i32 3
  %167 = load i32, i32* %nrows, align 4
  %idx.ext = sext i32 %167 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %164, i64 %idx.ext
  %add.ptr226 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr, i64 -1
  %height227 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr226, i32 0, i32 7
  %168 = load i32, i32* %height227, align 4
  %tobool228 = icmp ne i32 %168, 0
  br i1 %tobool228, label %cond.true.230, label %cond.false.249

cond.false.229:                                   ; preds = %land.lhs.true.218, %cond.false.215
  br i1 false, label %cond.true.230, label %cond.false.249

cond.true.230:                                    ; preds = %cond.false.229, %cond.true.222
  %169 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix231 = getelementptr inbounds %struct.window, %struct.window* %169, i32 0, i32 24
  %170 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix231, align 8
  %tobool232 = icmp ne %struct.glyph_matrix* %170, null
  br i1 %tobool232, label %land.lhs.true.233, label %cond.false.246

land.lhs.true.233:                                ; preds = %cond.true.230
  %171 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix234 = getelementptr inbounds %struct.window, %struct.window* %171, i32 0, i32 24
  %172 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix234, align 8
  %rows235 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %172, i32 0, i32 1
  %173 = load %struct.glyph_row*, %struct.glyph_row** %rows235, align 8
  %tobool236 = icmp ne %struct.glyph_row* %173, null
  br i1 %tobool236, label %cond.true.237, label %cond.false.246

cond.true.237:                                    ; preds = %land.lhs.true.233
  %174 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix238 = getelementptr inbounds %struct.window, %struct.window* %174, i32 0, i32 24
  %175 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix238, align 8
  %rows239 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %175, i32 0, i32 1
  %176 = load %struct.glyph_row*, %struct.glyph_row** %rows239, align 8
  %177 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix240 = getelementptr inbounds %struct.window, %struct.window* %177, i32 0, i32 24
  %178 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix240, align 8
  %nrows241 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %178, i32 0, i32 3
  %179 = load i32, i32* %nrows241, align 4
  %idx.ext242 = sext i32 %179 to i64
  %add.ptr243 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %176, i64 %idx.ext242
  %add.ptr244 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr243, i64 -1
  %height245 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr244, i32 0, i32 7
  %180 = load i32, i32* %height245, align 4
  br label %cond.end.247

cond.false.246:                                   ; preds = %land.lhs.true.233, %cond.true.230
  br label %cond.end.247

cond.end.247:                                     ; preds = %cond.false.246, %cond.true.237
  %cond248 = phi i32 [ %180, %cond.true.237 ], [ 0, %cond.false.246 ]
  br label %cond.end.268

cond.false.249:                                   ; preds = %cond.false.229, %cond.true.222
  %181 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame250 = getelementptr inbounds %struct.window, %struct.window* %181, i32 0, i32 1
  %182 = load i64, i64* %frame250, align 8
  %sub251 = sub nsw i64 %182, 5
  %183 = inttoptr i64 %sub251 to i8*
  %184 = bitcast i8* %183 to %struct.frame*
  %185 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 473), align 1
  %tobool252 = trunc i8 %185 to i1
  br i1 %tobool252, label %lor.lhs.false.253, label %lor.end

lor.lhs.false.253:                                ; preds = %cond.false.249
  %186 = load %struct.window*, %struct.window** %w.addr, align 8
  %187 = load i64, i64* @selected_window, align 8
  %call254 = call %struct.window* @XWINDOW(i64 %187)
  %cmp255 = icmp eq %struct.window* %186, %call254
  br i1 %cmp255, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false.253
  %188 = load i64, i64* @minibuf_level, align 8
  %cmp256 = icmp sgt i64 %188, 0
  br i1 %cmp256, label %land.lhs.true.257, label %land.end

land.lhs.true.257:                                ; preds = %lor.rhs
  %189 = load i64, i64* @minibuf_selected_window, align 8
  %call258 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp259 = icmp eq i64 %189, %call258
  br i1 %cmp259, label %land.end, label %land.lhs.true.260

land.lhs.true.260:                                ; preds = %land.lhs.true.257
  %190 = load i64, i64* @selected_window, align 8
  %call261 = call %struct.window* @XWINDOW(i64 %190)
  %191 = load i64, i64* @minibuf_window, align 8
  %call262 = call %struct.window* @XWINDOW(i64 %191)
  %cmp263 = icmp eq %struct.window* %call261, %call262
  br i1 %cmp263, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true.260
  %192 = load %struct.window*, %struct.window** %w.addr, align 8
  %193 = load i64, i64* @minibuf_selected_window, align 8
  %call264 = call %struct.window* @XWINDOW(i64 %193)
  %cmp265 = icmp eq %struct.window* %192, %call264
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true.260, %land.lhs.true.257, %lor.rhs
  %194 = phi i1 [ false, %land.lhs.true.260 ], [ false, %land.lhs.true.257 ], [ false, %lor.rhs ], [ %cmp265, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %lor.lhs.false.253, %cond.false.249
  %195 = phi i1 [ true, %lor.lhs.false.253 ], [ true, %cond.false.249 ], [ %194, %land.end ]
  %cond266 = select i1 %195, i32 1, i32 2
  %call267 = call i32 @estimate_mode_line_height(%struct.frame* %184, i32 %cond266)
  br label %cond.end.268

cond.end.268:                                     ; preds = %lor.end, %cond.end.247
  %cond269 = phi i32 [ %cond248, %cond.end.247 ], [ %call267, %lor.end ]
  %196 = load %struct.window*, %struct.window** %w.addr, align 8
  %mode_line_height270 = getelementptr inbounds %struct.window, %struct.window* %196, i32 0, i32 63
  store i32 %cond269, i32* %mode_line_height270, align 4
  br label %cond.end.271

cond.end.271:                                     ; preds = %cond.end.268, %cond.true.213
  %cond272 = phi i32 [ %156, %cond.true.213 ], [ %cond269, %cond.end.268 ]
  br label %cond.end.274

cond.false.273:                                   ; preds = %cond.false.210, %land.lhs.true.204, %land.lhs.true.198, %land.lhs.true.190, %land.lhs.true.184, %cond.true.179
  br label %cond.end.274

cond.end.274:                                     ; preds = %cond.false.273, %cond.end.271
  %cond275 = phi i32 [ %cond272, %cond.end.271 ], [ 0, %cond.false.273 ]
  %sub276 = sub nsw i32 %sub176, %cond275
  store i32 %sub276, i32* %max_y, align 4
  %197 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  call void @clear_glyph_row(%struct.glyph_row* %197)
  %198 = load i32, i32* %y.addr, align 4
  %199 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %y277 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %199, i32 0, i32 4
  store i32 %198, i32* %y277, align 4
  %200 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %phys_ascent = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %200, i32 0, i32 8
  store i32 0, i32* %phys_ascent, align 4
  %201 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %ascent = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %201, i32 0, i32 6
  store i32 0, i32* %ascent, align 4
  %202 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame278 = getelementptr inbounds %struct.window, %struct.window* %202, i32 0, i32 1
  %203 = load i64, i64* %frame278, align 8
  %sub279 = sub nsw i64 %203, 5
  %204 = inttoptr i64 %sub279 to i8*
  %205 = bitcast i8* %204 to %struct.frame*
  %line_height280 = getelementptr inbounds %struct.frame, %struct.frame* %205, i32 0, i32 60
  %206 = load i32, i32* %line_height280, align 4
  %207 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %phys_height = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %207, i32 0, i32 9
  store i32 %206, i32* %phys_height, align 4
  %208 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %height281 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %208, i32 0, i32 7
  store i32 %206, i32* %height281, align 4
  %209 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %height282 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %209, i32 0, i32 7
  %210 = load i32, i32* %height282, align 4
  %211 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %visible_height = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %211, i32 0, i32 10
  store i32 %210, i32* %visible_height, align 4
  %212 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %y283 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %212, i32 0, i32 4
  %213 = load i32, i32* %y283, align 4
  %214 = load i32, i32* %min_y, align 4
  %cmp284 = icmp slt i32 %213, %214
  br i1 %cmp284, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.274
  %215 = load i32, i32* %min_y, align 4
  %216 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %y285 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %216, i32 0, i32 4
  %217 = load i32, i32* %y285, align 4
  %sub286 = sub nsw i32 %215, %217
  %218 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %visible_height287 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %218, i32 0, i32 10
  %219 = load i32, i32* %visible_height287, align 4
  %sub288 = sub nsw i32 %219, %sub286
  store i32 %sub288, i32* %visible_height287, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end.274
  %220 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %y289 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %220, i32 0, i32 4
  %221 = load i32, i32* %y289, align 4
  %222 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %height290 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %222, i32 0, i32 7
  %223 = load i32, i32* %height290, align 4
  %add291 = add nsw i32 %221, %223
  %224 = load i32, i32* %max_y, align 4
  %cmp292 = icmp sgt i32 %add291, %224
  br i1 %cmp292, label %if.then.293, label %if.end.300

if.then.293:                                      ; preds = %if.end
  %225 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %y294 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %225, i32 0, i32 4
  %226 = load i32, i32* %y294, align 4
  %227 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %height295 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %227, i32 0, i32 7
  %228 = load i32, i32* %height295, align 4
  %add296 = add nsw i32 %226, %228
  %229 = load i32, i32* %max_y, align 4
  %sub297 = sub nsw i32 %add296, %229
  %230 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %visible_height298 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %230, i32 0, i32 10
  %231 = load i32, i32* %visible_height298, align 4
  %sub299 = sub nsw i32 %231, %sub297
  store i32 %sub299, i32* %visible_height298, align 4
  br label %if.end.300

if.end.300:                                       ; preds = %if.then.293, %if.end
  %232 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %enabled_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %232, i32 0, i32 22
  %233 = bitcast i40* %enabled_p to i64*
  %bf.load301 = load i64, i64* %233, align 4
  %bf.clear302 = and i64 %bf.load301, -1025
  %bf.set = or i64 %bf.clear302, 1024
  store i64 %bf.set, i64* %233, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @prepare_desired_row(%struct.window* %w, %struct.glyph_row* %row, i1 zeroext %mode_line_p) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %row.addr = alloca %struct.glyph_row*, align 8
  %mode_line_p.addr = alloca i8, align 1
  %rp = alloca i8, align 1
  %left = alloca i32, align 4
  %right = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store %struct.glyph_row* %row, %struct.glyph_row** %row.addr, align 8
  %frombool = zext i1 %mode_line_p to i8
  store i8 %frombool, i8* %mode_line_p.addr, align 1
  %0 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %enabled_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %0, i32 0, i32 22
  %1 = bitcast i40* %enabled_p to i64*
  %bf.load = load i64, i64* %1, align 4
  %bf.lshr = lshr i64 %bf.load, 10
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %reversed_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %2, i32 0, i32 22
  %3 = bitcast i40* %reversed_p to i64*
  %bf.load1 = load i64, i64* %3, align 4
  %bf.lshr2 = lshr i64 %bf.load1, 34
  %bf.clear3 = and i64 %bf.lshr2, 1
  %bf.cast4 = trunc i64 %bf.clear3 to i1
  %frombool5 = zext i1 %bf.cast4 to i8
  store i8 %frombool5, i8* %rp, align 1
  %4 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  call void @clear_glyph_row(%struct.glyph_row* %4)
  %5 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %enabled_p6 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %5, i32 0, i32 22
  %6 = bitcast i40* %enabled_p6 to i64*
  %bf.load7 = load i64, i64* %6, align 4
  %bf.clear8 = and i64 %bf.load7, -1025
  %bf.set = or i64 %bf.clear8, 1024
  store i64 %bf.set, i64* %6, align 4
  %7 = load i8, i8* %rp, align 1
  %tobool = trunc i8 %7 to i1
  %8 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %reversed_p9 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %8, i32 0, i32 22
  %9 = bitcast i40* %reversed_p9 to i64*
  %10 = zext i1 %tobool to i64
  %bf.load10 = load i64, i64* %9, align 4
  %bf.shl = shl i64 %10, 34
  %bf.clear11 = and i64 %bf.load10, -17179869185
  %bf.set12 = or i64 %bf.clear11, %bf.shl
  store i64 %bf.set12, i64* %9, align 4
  %bf.result.cast = trunc i64 %10 to i8
  %tobool13 = trunc i8 %bf.result.cast to i1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %11 = load i8, i8* %mode_line_p.addr, align 1
  %tobool14 = trunc i8 %11 to i1
  br i1 %tobool14, label %if.then.15, label %if.else

if.then.15:                                       ; preds = %if.end
  %12 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_margin_cols = getelementptr inbounds %struct.window, %struct.window* %12, i32 0, i32 59
  %13 = load i32, i32* %left_margin_cols, align 4
  %cmp = icmp sgt i32 %13, 0
  br i1 %cmp, label %if.then.16, label %if.end.19

if.then.16:                                       ; preds = %if.then.15
  %14 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %glyphs = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %14, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs, i32 0, i64 0
  %15 = load %struct.glyph*, %struct.glyph** %arrayidx, align 8
  %16 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %glyphs17 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %16, i32 0, i32 0
  %arrayidx18 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs17, i32 0, i64 1
  store %struct.glyph* %15, %struct.glyph** %arrayidx18, align 8
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.16, %if.then.15
  %17 = load %struct.window*, %struct.window** %w.addr, align 8
  %right_margin_cols = getelementptr inbounds %struct.window, %struct.window* %17, i32 0, i32 60
  %18 = load i32, i32* %right_margin_cols, align 4
  %cmp20 = icmp sgt i32 %18, 0
  br i1 %cmp20, label %if.then.21, label %if.end.26

if.then.21:                                       ; preds = %if.end.19
  %19 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %glyphs22 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %19, i32 0, i32 0
  %arrayidx23 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs22, i32 0, i64 3
  %20 = load %struct.glyph*, %struct.glyph** %arrayidx23, align 8
  %21 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %glyphs24 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %21, i32 0, i32 0
  %arrayidx25 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs24, i32 0, i64 2
  store %struct.glyph* %20, %struct.glyph** %arrayidx25, align 8
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.21, %if.end.19
  br label %if.end.65

if.else:                                          ; preds = %if.end
  %22 = load %struct.window*, %struct.window** %w.addr, align 8
  %desired_matrix = getelementptr inbounds %struct.window, %struct.window* %22, i32 0, i32 25
  %23 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %left_margin_glyphs = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %23, i32 0, i32 13
  %24 = load i32, i32* %left_margin_glyphs, align 4
  store i32 %24, i32* %left, align 4
  %25 = load %struct.window*, %struct.window** %w.addr, align 8
  %desired_matrix27 = getelementptr inbounds %struct.window, %struct.window* %25, i32 0, i32 25
  %26 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix27, align 8
  %right_margin_glyphs = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %26, i32 0, i32 14
  %27 = load i32, i32* %right_margin_glyphs, align 4
  store i32 %27, i32* %right, align 4
  %28 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_margin_cols28 = getelementptr inbounds %struct.window, %struct.window* %28, i32 0, i32 59
  %29 = load i32, i32* %left_margin_cols28, align 4
  %cmp29 = icmp sgt i32 %29, 0
  br i1 %cmp29, label %land.lhs.true, label %if.end.41

land.lhs.true:                                    ; preds = %if.else
  %30 = load i32, i32* %left, align 4
  %conv = sext i32 %30 to i64
  %31 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %glyphs30 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %31, i32 0, i32 0
  %arrayidx31 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs30, i32 0, i64 1
  %32 = load %struct.glyph*, %struct.glyph** %arrayidx31, align 8
  %33 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %glyphs32 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %33, i32 0, i32 0
  %arrayidx33 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs32, i32 0, i64 0
  %34 = load %struct.glyph*, %struct.glyph** %arrayidx33, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.glyph* %32 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.glyph* %34 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 48
  %cmp34 = icmp ne i64 %conv, %sub.ptr.div
  br i1 %cmp34, label %if.then.36, label %if.end.41

if.then.36:                                       ; preds = %land.lhs.true
  %35 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %glyphs37 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %35, i32 0, i32 0
  %arrayidx38 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs37, i32 0, i64 0
  %36 = load %struct.glyph*, %struct.glyph** %arrayidx38, align 8
  %37 = load i32, i32* %left, align 4
  %idx.ext = sext i32 %37 to i64
  %add.ptr = getelementptr inbounds %struct.glyph, %struct.glyph* %36, i64 %idx.ext
  %38 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %glyphs39 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %38, i32 0, i32 0
  %arrayidx40 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs39, i32 0, i64 1
  store %struct.glyph* %add.ptr, %struct.glyph** %arrayidx40, align 8
  br label %if.end.41

if.end.41:                                        ; preds = %if.then.36, %land.lhs.true, %if.else
  %39 = load %struct.window*, %struct.window** %w.addr, align 8
  %right_margin_cols42 = getelementptr inbounds %struct.window, %struct.window* %39, i32 0, i32 60
  %40 = load i32, i32* %right_margin_cols42, align 4
  %cmp43 = icmp sgt i32 %40, 0
  br i1 %cmp43, label %land.lhs.true.45, label %if.end.64

land.lhs.true.45:                                 ; preds = %if.end.41
  %41 = load i32, i32* %right, align 4
  %conv46 = sext i32 %41 to i64
  %42 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %glyphs47 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %42, i32 0, i32 0
  %arrayidx48 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs47, i32 0, i64 3
  %43 = load %struct.glyph*, %struct.glyph** %arrayidx48, align 8
  %44 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %glyphs49 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %44, i32 0, i32 0
  %arrayidx50 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs49, i32 0, i64 2
  %45 = load %struct.glyph*, %struct.glyph** %arrayidx50, align 8
  %sub.ptr.lhs.cast51 = ptrtoint %struct.glyph* %43 to i64
  %sub.ptr.rhs.cast52 = ptrtoint %struct.glyph* %45 to i64
  %sub.ptr.sub53 = sub i64 %sub.ptr.lhs.cast51, %sub.ptr.rhs.cast52
  %sub.ptr.div54 = sdiv exact i64 %sub.ptr.sub53, 48
  %cmp55 = icmp ne i64 %conv46, %sub.ptr.div54
  br i1 %cmp55, label %if.then.57, label %if.end.64

if.then.57:                                       ; preds = %land.lhs.true.45
  %46 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %glyphs58 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %46, i32 0, i32 0
  %arrayidx59 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs58, i32 0, i64 3
  %47 = load %struct.glyph*, %struct.glyph** %arrayidx59, align 8
  %48 = load i32, i32* %right, align 4
  %idx.ext60 = sext i32 %48 to i64
  %idx.neg = sub i64 0, %idx.ext60
  %add.ptr61 = getelementptr inbounds %struct.glyph, %struct.glyph* %47, i64 %idx.neg
  %49 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %glyphs62 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %49, i32 0, i32 0
  %arrayidx63 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs62, i32 0, i64 2
  store %struct.glyph* %add.ptr61, %struct.glyph** %arrayidx63, align 8
  br label %if.end.64

if.end.64:                                        ; preds = %if.then.57, %land.lhs.true.45, %if.end.41
  br label %if.end.65

if.end.65:                                        ; preds = %if.end.64, %if.end.26
  ret void
}

; Function Attrs: nounwind uwtable
define void @adjust_frame_glyphs(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  call void @block_input()
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 26
  %1 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %1, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @adjust_frame_glyphs_for_window_redisplay(%struct.frame* %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @adjust_frame_glyphs_for_frame_redisplay(%struct.frame* %3)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @adjust_decode_mode_spec_buffer(%struct.frame* %4)
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %glyphs_initialized_p = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 26
  %6 = bitcast i48* %glyphs_initialized_p to i64*
  %bf.load1 = load i64, i64* %6, align 8
  %bf.clear2 = and i64 %bf.load1, -2
  %bf.set = or i64 %bf.clear2, 1
  store i64 %bf.set, i64* %6, align 8
  call void @unblock_input()
  ret void
}

declare void @block_input() #1

; Function Attrs: nounwind uwtable
define internal void @adjust_frame_glyphs_for_window_redisplay(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 5
  %1 = load i64, i64* %root_window, align 8
  %call = call %struct.window* @XWINDOW(i64 %1)
  call void @allocate_matrices_for_window_redisplay(%struct.window* %call)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @adjust_frame_glyphs_for_frame_redisplay(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %matrix_dim = alloca %struct.dim, align 4
  %pool_changed_p = alloca i8, align 1
  %window_change_flags = alloca i32, align 4
  %top_window_y = alloca i32, align 4
  %coerce = alloca %struct.dim, align 4
  %coerce24 = alloca %struct.dim, align 4
  %copy = alloca %struct.glyph_matrix*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 61
  %1 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp = icmp ne %struct.terminal* %1, null
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %if.end.55

if.end:                                           ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 57
  %3 = load i32, i32* %menu_bar_lines, align 4
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 27
  %5 = load i32, i32* %tool_bar_lines, align 4
  %add = add nsw i32 %3, %5
  store i32 %add, i32* %top_window_y, align 4
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %desired_pool = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 23
  %7 = load %struct.glyph_pool*, %struct.glyph_pool** %desired_pool, align 8
  %cmp1 = icmp eq %struct.glyph_pool* %7, null
  br i1 %cmp1, label %if.then.2, label %if.end.5

if.then.2:                                        ; preds = %if.end
  %call = call %struct.glyph_pool* @new_glyph_pool()
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %desired_pool3 = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 23
  store %struct.glyph_pool* %call, %struct.glyph_pool** %desired_pool3, align 8
  %call4 = call %struct.glyph_pool* @new_glyph_pool()
  %9 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %current_pool = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 22
  store %struct.glyph_pool* %call4, %struct.glyph_pool** %current_pool, align 8
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.2, %if.end
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %desired_matrix = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 24
  %11 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %cmp6 = icmp eq %struct.glyph_matrix* %11, null
  br i1 %cmp6, label %if.then.7, label %if.end.13

if.then.7:                                        ; preds = %if.end.5
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %desired_pool8 = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 23
  %13 = load %struct.glyph_pool*, %struct.glyph_pool** %desired_pool8, align 8
  %call9 = call %struct.glyph_matrix* @new_glyph_matrix(%struct.glyph_pool* %13)
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %desired_matrix10 = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 24
  store %struct.glyph_matrix* %call9, %struct.glyph_matrix** %desired_matrix10, align 8
  %15 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %current_pool11 = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 22
  %16 = load %struct.glyph_pool*, %struct.glyph_pool** %current_pool11, align 8
  %call12 = call %struct.glyph_matrix* @new_glyph_matrix(%struct.glyph_pool* %16)
  %17 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %current_matrix = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 25
  store %struct.glyph_matrix* %call12, %struct.glyph_matrix** %current_matrix, align 8
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.7, %if.end.5
  store i32 0, i32* %window_change_flags, align 4
  %18 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 5
  %19 = load i64, i64* %root_window, align 8
  %20 = load i32, i32* %top_window_y, align 4
  %call14 = call i64 @allocate_matrices_for_frame_redisplay(i64 %19, i32 0, i32 %20, i1 zeroext true, i32* %window_change_flags)
  %21 = bitcast %struct.dim* %coerce to i64*
  store i64 %call14, i64* %21, align 4
  %22 = bitcast %struct.dim* %matrix_dim to i8*
  %23 = bitcast %struct.dim* %coerce to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %22, i8* %23, i64 8, i32 4, i1 false)
  %24 = load i32, i32* %top_window_y, align 4
  %height = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %25 = load i32, i32* %height, align 4
  %add15 = add nsw i32 %25, %24
  store i32 %add15, i32* %height, align 4
  %26 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %desired_pool16 = getelementptr inbounds %struct.frame, %struct.frame* %26, i32 0, i32 23
  %27 = load %struct.glyph_pool*, %struct.glyph_pool** %desired_pool16, align 8
  %28 = bitcast %struct.dim* %matrix_dim to i64*
  %29 = load i64, i64* %28, align 4
  %call17 = call zeroext i1 @realloc_glyph_pool(%struct.glyph_pool* %27, i64 %29)
  %frombool = zext i1 %call17 to i8
  store i8 %frombool, i8* %pool_changed_p, align 1
  %30 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %current_pool18 = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 22
  %31 = load %struct.glyph_pool*, %struct.glyph_pool** %current_pool18, align 8
  %32 = bitcast %struct.dim* %matrix_dim to i64*
  %33 = load i64, i64* %32, align 4
  %call19 = call zeroext i1 @realloc_glyph_pool(%struct.glyph_pool* %31, i64 %33)
  %34 = load i8, i8* %pool_changed_p, align 1
  %tobool = trunc i8 %34 to i1
  br i1 %tobool, label %if.then.21, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.13
  %35 = load i32, i32* %window_change_flags, align 4
  %tobool20 = icmp ne i32 %35, 0
  br i1 %tobool20, label %if.then.21, label %if.end.55

if.then.21:                                       ; preds = %lor.lhs.false, %if.end.13
  %36 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %root_window22 = getelementptr inbounds %struct.frame, %struct.frame* %36, i32 0, i32 5
  %37 = load i64, i64* %root_window22, align 8
  %38 = load i32, i32* %top_window_y, align 4
  %call23 = call i64 @allocate_matrices_for_frame_redisplay(i64 %37, i32 0, i32 %38, i1 zeroext false, i32* %window_change_flags)
  %39 = bitcast %struct.dim* %coerce24 to i64*
  store i64 %call23, i64* %39, align 4
  %width = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %40 = load i32, i32* %width, align 4
  %41 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %total_cols = getelementptr inbounds %struct.frame, %struct.frame* %41, i32 0, i32 38
  %42 = load i32, i32* %total_cols, align 4
  %cmp25 = icmp ne i32 %40, %42
  br i1 %cmp25, label %if.then.29, label %lor.lhs.false.26

lor.lhs.false.26:                                 ; preds = %if.then.21
  %height27 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %43 = load i32, i32* %height27, align 4
  %44 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %44, i32 0, i32 39
  %45 = load i32, i32* %total_lines, align 4
  %cmp28 = icmp ne i32 %43, %45
  br i1 %cmp28, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %lor.lhs.false.26, %if.then.21
  br label %if.end.55

if.end.30:                                        ; preds = %lor.lhs.false.26
  %46 = load i8, i8* @display_completed, align 1
  %tobool31 = trunc i8 %46 to i1
  br i1 %tobool31, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end.30
  %47 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %garbaged = getelementptr inbounds %struct.frame, %struct.frame* %47, i32 0, i32 26
  %48 = bitcast i48* %garbaged to i64*
  %bf.load = load i64, i64* %48, align 8
  %bf.lshr = lshr i64 %bf.load, 13
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %if.else, label %land.lhs.true.32

land.lhs.true.32:                                 ; preds = %land.lhs.true
  %width33 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %49 = load i32, i32* %width33, align 4
  %50 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %current_matrix34 = getelementptr inbounds %struct.frame, %struct.frame* %50, i32 0, i32 25
  %51 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix34, align 8
  %matrix_w = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %51, i32 0, i32 6
  %52 = load i32, i32* %matrix_w, align 4
  %cmp35 = icmp eq i32 %49, %52
  br i1 %cmp35, label %land.lhs.true.36, label %if.else

land.lhs.true.36:                                 ; preds = %land.lhs.true.32
  %height37 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %53 = load i32, i32* %height37, align 4
  %54 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %current_matrix38 = getelementptr inbounds %struct.frame, %struct.frame* %54, i32 0, i32 25
  %55 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix38, align 8
  %matrix_h = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %55, i32 0, i32 7
  %56 = load i32, i32* %matrix_h, align 4
  %cmp39 = icmp eq i32 %53, %56
  br i1 %cmp39, label %land.lhs.true.40, label %if.else

land.lhs.true.40:                                 ; preds = %land.lhs.true.36
  %57 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %root_window41 = getelementptr inbounds %struct.frame, %struct.frame* %57, i32 0, i32 5
  %58 = load i64, i64* %root_window41, align 8
  %call42 = call %struct.window* @XWINDOW(i64 %58)
  %call43 = call zeroext i1 @showing_window_margins_p(%struct.window* %call42)
  br i1 %call43, label %if.else, label %if.then.44

if.then.44:                                       ; preds = %land.lhs.true.40
  %59 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call45 = call %struct.glyph_matrix* @save_current_matrix(%struct.frame* %59)
  store %struct.glyph_matrix* %call45, %struct.glyph_matrix** %copy, align 8
  %60 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %desired_matrix46 = getelementptr inbounds %struct.frame, %struct.frame* %60, i32 0, i32 24
  %61 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix46, align 8
  %62 = bitcast %struct.dim* %matrix_dim to i64*
  %63 = load i64, i64* %62, align 4
  call void @adjust_glyph_matrix(%struct.window* null, %struct.glyph_matrix* %61, i32 0, i32 0, i64 %63)
  %64 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %current_matrix47 = getelementptr inbounds %struct.frame, %struct.frame* %64, i32 0, i32 25
  %65 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix47, align 8
  %66 = bitcast %struct.dim* %matrix_dim to i64*
  %67 = load i64, i64* %66, align 4
  call void @adjust_glyph_matrix(%struct.window* null, %struct.glyph_matrix* %65, i32 0, i32 0, i64 %67)
  %68 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %69 = load %struct.glyph_matrix*, %struct.glyph_matrix** %copy, align 8
  call void @restore_current_matrix(%struct.frame* %68, %struct.glyph_matrix* %69)
  %70 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %root_window48 = getelementptr inbounds %struct.frame, %struct.frame* %70, i32 0, i32 5
  %71 = load i64, i64* %root_window48, align 8
  call void @fake_current_matrices(i64 %71)
  br label %if.end.54

if.else:                                          ; preds = %land.lhs.true.40, %land.lhs.true.36, %land.lhs.true.32, %land.lhs.true, %if.end.30
  %72 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %desired_matrix49 = getelementptr inbounds %struct.frame, %struct.frame* %72, i32 0, i32 24
  %73 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix49, align 8
  %74 = bitcast %struct.dim* %matrix_dim to i64*
  %75 = load i64, i64* %74, align 4
  call void @adjust_glyph_matrix(%struct.window* null, %struct.glyph_matrix* %73, i32 0, i32 0, i64 %75)
  %76 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %current_matrix50 = getelementptr inbounds %struct.frame, %struct.frame* %76, i32 0, i32 25
  %77 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix50, align 8
  %78 = bitcast %struct.dim* %matrix_dim to i64*
  %79 = load i64, i64* %78, align 4
  call void @adjust_glyph_matrix(%struct.window* null, %struct.glyph_matrix* %77, i32 0, i32 0, i64 %79)
  store i8 1, i8* @frame_garbaged, align 1
  %80 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @fset_redisplay(%struct.frame* %80)
  %81 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %garbaged51 = getelementptr inbounds %struct.frame, %struct.frame* %81, i32 0, i32 26
  %82 = bitcast i48* %garbaged51 to i64*
  %bf.load52 = load i64, i64* %82, align 8
  %bf.clear53 = and i64 %bf.load52, -8193
  %bf.set = or i64 %bf.clear53, 8192
  store i64 %bf.set, i64* %82, align 8
  br label %if.end.54

if.end.54:                                        ; preds = %if.else, %if.then.44
  br label %if.end.55

if.end.55:                                        ; preds = %if.then, %if.then.29, %if.end.54, %lor.lhs.false
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @adjust_decode_mode_spec_buffer(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %frame_message_buf_size = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_cols = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 36
  %1 = load i32, i32* %text_cols, align 4
  %mul = mul nsw i32 %1, 4
  store i32 %mul, i32* %frame_message_buf_size, align 4
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %decode_mode_spec_buffer = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 31
  %3 = load i8*, i8** %decode_mode_spec_buffer, align 8
  %4 = load i32, i32* %frame_message_buf_size, align 4
  %add = add nsw i32 %4, 1
  %conv = sext i32 %add to i64
  %call = call i8* @xrealloc(i8* %3, i64 %conv)
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %decode_mode_spec_buffer1 = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 31
  store i8* %call, i8** %decode_mode_spec_buffer1, align 8
  ret void
}

declare void @unblock_input() #1

; Function Attrs: nounwind uwtable
define void @free_glyphs(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tobool = icmp ne %struct.frame* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end.19

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %glyphs_initialized_p = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 26
  %2 = bitcast i48* %glyphs_initialized_p to i64*
  %bf.load = load i64, i64* %2, align 8
  %bf.clear = and i64 %bf.load, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %if.then, label %if.end.19

if.then:                                          ; preds = %land.lhs.true
  call void @block_input()
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %glyphs_initialized_p1 = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 26
  %4 = bitcast i48* %glyphs_initialized_p1 to i64*
  %bf.load2 = load i64, i64* %4, align 8
  %bf.clear3 = and i64 %bf.load2, -2
  store i64 %bf.clear3, i64* %4, align 8
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 5
  %6 = load i64, i64* %root_window, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %6, %call
  br i1 %cmp, label %if.end, label %if.then.4

if.then.4:                                        ; preds = %if.then
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %root_window5 = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 5
  %8 = load i64, i64* %root_window5, align 8
  %call6 = call %struct.window* @XWINDOW(i64 %8)
  call void @free_window_matrices(%struct.window* %call6)
  br label %if.end

if.end:                                           ; preds = %if.then.4, %if.then
  %9 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %desired_matrix = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 24
  %10 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %tobool7 = icmp ne %struct.glyph_matrix* %10, null
  br i1 %tobool7, label %if.then.8, label %if.end.12

if.then.8:                                        ; preds = %if.end
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %desired_matrix9 = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 24
  %12 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix9, align 8
  call void @free_glyph_matrix(%struct.glyph_matrix* %12)
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %current_matrix = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 25
  %14 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  call void @free_glyph_matrix(%struct.glyph_matrix* %14)
  %15 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %current_matrix10 = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 25
  store %struct.glyph_matrix* null, %struct.glyph_matrix** %current_matrix10, align 8
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %desired_matrix11 = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 24
  store %struct.glyph_matrix* null, %struct.glyph_matrix** %desired_matrix11, align 8
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.8, %if.end
  %17 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %desired_pool = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 23
  %18 = load %struct.glyph_pool*, %struct.glyph_pool** %desired_pool, align 8
  %tobool13 = icmp ne %struct.glyph_pool* %18, null
  br i1 %tobool13, label %if.then.14, label %if.end.18

if.then.14:                                       ; preds = %if.end.12
  %19 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %desired_pool15 = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 23
  %20 = load %struct.glyph_pool*, %struct.glyph_pool** %desired_pool15, align 8
  call void @free_glyph_pool(%struct.glyph_pool* %20)
  %21 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %current_pool = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 22
  %22 = load %struct.glyph_pool*, %struct.glyph_pool** %current_pool, align 8
  call void @free_glyph_pool(%struct.glyph_pool* %22)
  %23 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %current_pool16 = getelementptr inbounds %struct.frame, %struct.frame* %23, i32 0, i32 22
  store %struct.glyph_pool* null, %struct.glyph_pool** %current_pool16, align 8
  %24 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %desired_pool17 = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 23
  store %struct.glyph_pool* null, %struct.glyph_pool** %desired_pool17, align 8
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.14, %if.end.12
  call void @unblock_input()
  br label %if.end.19

if.end.19:                                        ; preds = %if.end.18, %land.lhs.true, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @free_window_matrices(%struct.window* %w) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %entry
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %tobool = icmp ne %struct.window* %0, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 10
  %2 = load i64, i64* %contents, align 8
  %call = call zeroext i1 @WINDOWP(i64 %2)
  br i1 %call, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %3 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents1 = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 10
  %4 = load i64, i64* %contents1, align 8
  %call2 = call %struct.window* @XWINDOW(i64 %4)
  call void @free_window_matrices(%struct.window* %call2)
  br label %if.end

if.else:                                          ; preds = %while.body
  %5 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 24
  %6 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  call void @free_glyph_matrix(%struct.glyph_matrix* %6)
  %7 = load %struct.window*, %struct.window** %w.addr, align 8
  %desired_matrix = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 25
  %8 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  call void @free_glyph_matrix(%struct.glyph_matrix* %8)
  %9 = load %struct.window*, %struct.window** %w.addr, align 8
  %desired_matrix3 = getelementptr inbounds %struct.window, %struct.window* %9, i32 0, i32 25
  store %struct.glyph_matrix* null, %struct.glyph_matrix** %desired_matrix3, align 8
  %10 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix4 = getelementptr inbounds %struct.window, %struct.window* %10, i32 0, i32 24
  store %struct.glyph_matrix* null, %struct.glyph_matrix** %current_matrix4, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load %struct.window*, %struct.window** %w.addr, align 8
  %next = getelementptr inbounds %struct.window, %struct.window* %11, i32 0, i32 2
  %12 = load i64, i64* %next, align 8
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %12, %call5
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %13 = load %struct.window*, %struct.window** %w.addr, align 8
  %next6 = getelementptr inbounds %struct.window, %struct.window* %13, i32 0, i32 2
  %14 = load i64, i64* %next6, align 8
  %call7 = call %struct.window* @XWINDOW(i64 %14)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.window* [ null, %cond.true ], [ %call7, %cond.false ]
  store %struct.window* %cond, %struct.window** %w.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @free_glyph_matrix(%struct.glyph_matrix* %matrix) #0 {
entry:
  %matrix.addr = alloca %struct.glyph_matrix*, align 8
  %i = alloca i32, align 4
  store %struct.glyph_matrix* %matrix, %struct.glyph_matrix** %matrix.addr, align 8
  %0 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %tobool = icmp ne %struct.glyph_matrix* %0, null
  br i1 %tobool, label %if.then, label %if.end.6

if.then:                                          ; preds = %entry
  %1 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %pool = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %1, i32 0, i32 0
  %2 = load %struct.glyph_pool*, %struct.glyph_pool** %pool, align 8
  %cmp = icmp eq %struct.glyph_pool* %2, null
  br i1 %cmp, label %if.then.1, label %if.end

if.then.1:                                        ; preds = %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.1
  %3 = load i32, i32* %i, align 4
  %conv = sext i32 %3 to i64
  %4 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows_allocated = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %4, i32 0, i32 2
  %5 = load i64, i64* %rows_allocated, align 8
  %cmp2 = icmp slt i64 %conv, %5
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %7, i32 0, i32 1
  %8 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %arrayidx = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %8, i64 %idxprom
  %glyphs = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %arrayidx, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs, i32 0, i64 0
  %9 = load %struct.glyph*, %struct.glyph** %arrayidx4, align 8
  %10 = bitcast %struct.glyph* %9 to i8*
  call void @xfree(i8* %10)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  %12 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows5 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %12, i32 0, i32 1
  %13 = load %struct.glyph_row*, %struct.glyph_row** %rows5, align 8
  %14 = bitcast %struct.glyph_row* %13 to i8*
  call void @xfree(i8* %14)
  %15 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %16 = bitcast %struct.glyph_matrix* %15 to i8*
  call void @xfree(i8* %16)
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @free_glyph_pool(%struct.glyph_pool* %pool) #0 {
entry:
  %pool.addr = alloca %struct.glyph_pool*, align 8
  store %struct.glyph_pool* %pool, %struct.glyph_pool** %pool.addr, align 8
  %0 = load %struct.glyph_pool*, %struct.glyph_pool** %pool.addr, align 8
  %tobool = icmp ne %struct.glyph_pool* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.glyph_pool*, %struct.glyph_pool** %pool.addr, align 8
  %glyphs = getelementptr inbounds %struct.glyph_pool, %struct.glyph_pool* %1, i32 0, i32 0
  %2 = load %struct.glyph*, %struct.glyph** %glyphs, align 8
  %3 = bitcast %struct.glyph* %2 to i8*
  call void @xfree(i8* %3)
  %4 = load %struct.glyph_pool*, %struct.glyph_pool** %pool.addr, align 8
  %5 = bitcast %struct.glyph_pool* %4 to i8*
  call void @xfree(i8* %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare zeroext i1 @WINDOWP(i64) #1

; Function Attrs: nounwind uwtable
define void @check_glyph_memory() #0 {
entry:
  %tail = alloca i64, align 8
  %frame = alloca i64, align 8
  %0 = load i64, i64* @Vframe_list, align 8
  store i64 %0, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %tail, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %2 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %2, 3
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %4, i32 0, i32 0
  %5 = load i64, i64* %car, align 8
  store i64 %5, i64* %frame, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %6 = phi i1 [ false, %for.cond ], [ true, %land.rhs ]
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %7 = load i64, i64* %frame, align 8
  %sub2 = sub nsw i64 %7, 5
  %8 = inttoptr i64 %sub2 to i8*
  %9 = bitcast i8* %8 to %struct.frame*
  call void @free_glyphs(%struct.frame* %9)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i64, i64* %tail, align 8
  %sub3 = sub nsw i64 %10, 3
  %11 = inttoptr i64 %sub3 to i8*
  %12 = bitcast i8* %11 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %12, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %13 = load i64, i64* %cdr, align 8
  store i64 %13, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @spec_glyph_lookup_face(%struct.window* %w, %struct.GLYPH* %glyph) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %glyph.addr = alloca %struct.GLYPH*, align 8
  %lface_id = alloca i32, align 4
  %face_id = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store %struct.GLYPH* %glyph, %struct.GLYPH** %glyph.addr, align 8
  %0 = load %struct.GLYPH*, %struct.GLYPH** %glyph.addr, align 8
  %1 = bitcast %struct.GLYPH* %0 to i64*
  %2 = load i64, i64* %1, align 4
  %call = call i32 @GLYPH_FACE(i64 %2)
  store i32 %call, i32* %lface_id, align 4
  %3 = load i32, i32* %lface_id, align 4
  %cmp = icmp sgt i32 %3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %4, i32 0, i32 1
  %5 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %5, 5
  %6 = inttoptr i64 %sub to i8*
  %7 = bitcast i8* %6 to %struct.frame*
  %call1 = call i64 @builtin_lisp_symbol(i32 901)
  %8 = load i32, i32* %lface_id, align 4
  %call2 = call i32 @merge_faces(%struct.frame* %7, i64 %call1, i32 %8, i32 0)
  store i32 %call2, i32* %face_id, align 4
  %9 = load i32, i32* %face_id, align 4
  %10 = load %struct.GLYPH*, %struct.GLYPH** %glyph.addr, align 8
  %face_id3 = getelementptr inbounds %struct.GLYPH, %struct.GLYPH* %10, i32 0, i32 1
  store i32 %9, i32* %face_id3, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare i32 @GLYPH_FACE(i64) #1

declare i32 @merge_faces(%struct.frame*, i64, i32, i32) #1

; Function Attrs: nounwind uwtable
define void @fill_up_frame_row_with_spaces(%struct.glyph_row* %row, i32 %upto) #0 {
entry:
  %row.addr = alloca %struct.glyph_row*, align 8
  %upto.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %glyph = alloca %struct.glyph*, align 8
  store %struct.glyph_row* %row, %struct.glyph_row** %row.addr, align 8
  store i32 %upto, i32* %upto.addr, align 4
  %0 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %used = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [4 x i16], [4 x i16]* %used, i32 0, i64 1
  %1 = load i16, i16* %arrayidx, align 2
  %conv = sext i16 %1 to i32
  store i32 %conv, i32* %i, align 4
  %2 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %glyphs = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %2, i32 0, i32 0
  %arrayidx1 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs, i32 0, i64 1
  %3 = load %struct.glyph*, %struct.glyph** %arrayidx1, align 8
  store %struct.glyph* %3, %struct.glyph** %glyph, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %upto.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %arrayidx3 = getelementptr inbounds %struct.glyph, %struct.glyph* %7, i64 %idxprom
  %8 = bitcast %struct.glyph* %arrayidx3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %8, i8* bitcast (%struct.glyph* @space_glyph to i8*), i64 48, i32 8, i1 false)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %9 = load i32, i32* %i, align 4
  %conv4 = trunc i32 %9 to i16
  %10 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %used5 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %10, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [4 x i16], [4 x i16]* %used5, i32 0, i64 1
  store i16 %conv4, i16* %arrayidx6, align 2
  ret void
}

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #2

; Function Attrs: nounwind uwtable
define void @mirrored_line_dance(%struct.glyph_matrix* %matrix, i32 %unchanged_at_top, i32 %nlines, i32* %copy_from, i8* %retained_p) #0 {
entry:
  %matrix.addr = alloca %struct.glyph_matrix*, align 8
  %unchanged_at_top.addr = alloca i32, align 4
  %nlines.addr = alloca i32, align 4
  %copy_from.addr = alloca i32*, align 8
  %retained_p.addr = alloca i8*, align 8
  %old_rows = alloca %struct.glyph_row*, align 8
  %new_rows = alloca %struct.glyph_row*, align 8
  %i = alloca i32, align 4
  %sa_avail = alloca i64, align 8
  %sa_count = alloca i64, align 8
  %sa_must_free = alloca i8, align 1
  %enabled_before_p = alloca i8, align 1
  store %struct.glyph_matrix* %matrix, %struct.glyph_matrix** %matrix.addr, align 8
  store i32 %unchanged_at_top, i32* %unchanged_at_top.addr, align 4
  store i32 %nlines, i32* %nlines.addr, align 4
  store i32* %copy_from, i32** %copy_from.addr, align 8
  store i8* %retained_p, i8** %retained_p.addr, align 8
  %0 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %0, i32 0, i32 1
  %1 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %2 = load i32, i32* %unchanged_at_top.addr, align 4
  %idx.ext = sext i32 %2 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %1, i64 %idx.ext
  store %struct.glyph_row* %add.ptr, %struct.glyph_row** %new_rows, align 8
  store i64 16384, i64* %sa_avail, align 8
  %call = call i64 @SPECPDL_INDEX()
  store i64 %call, i64* %sa_count, align 8
  store i8 0, i8* %sa_must_free, align 1
  br label %do.body

do.body:                                          ; preds = %entry
  %3 = load i32, i32* %nlines.addr, align 4
  %conv = sext i32 %3 to i64
  %4 = load i64, i64* %sa_avail, align 8
  %div = udiv i64 %4, 256
  %div1 = udiv i64 %div, 1
  %cmp = icmp ule i64 %conv, %div1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.body
  %5 = load i32, i32* %nlines.addr, align 4
  %conv3 = sext i32 %5 to i64
  %mul = mul i64 256, %conv3
  %6 = load i64, i64* %sa_avail, align 8
  %sub = sub i64 %6, %mul
  store i64 %sub, i64* %sa_avail, align 8
  %7 = load i32, i32* %nlines.addr, align 4
  %conv4 = sext i32 %7 to i64
  %mul5 = mul i64 256, %conv4
  %8 = alloca i8, i64 %mul5
  %9 = bitcast i8* %8 to %struct.glyph_row*
  store %struct.glyph_row* %9, %struct.glyph_row** %old_rows, align 8
  br label %if.end

if.else:                                          ; preds = %do.body
  %10 = load i32, i32* %nlines.addr, align 4
  %conv6 = sext i32 %10 to i64
  %call7 = call noalias i8* @xnmalloc(i64 %conv6, i64 256)
  %11 = bitcast i8* %call7 to %struct.glyph_row*
  store %struct.glyph_row* %11, %struct.glyph_row** %old_rows, align 8
  store i8 1, i8* %sa_must_free, align 1
  %12 = load %struct.glyph_row*, %struct.glyph_row** %old_rows, align 8
  %13 = bitcast %struct.glyph_row* %12 to i8*
  call void @record_unwind_protect_ptr(void (i8*)* @xfree, i8* %13)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %do.end

do.end:                                           ; preds = %if.end
  %14 = load %struct.glyph_row*, %struct.glyph_row** %old_rows, align 8
  %15 = bitcast %struct.glyph_row* %14 to i8*
  %16 = load %struct.glyph_row*, %struct.glyph_row** %new_rows, align 8
  %17 = bitcast %struct.glyph_row* %16 to i8*
  %18 = load i32, i32* %nlines.addr, align 4
  %conv8 = sext i32 %18 to i64
  %mul9 = mul i64 %conv8, 256
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* %17, i64 %mul9, i32 8, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %nlines.addr, align 4
  %cmp10 = icmp slt i32 %19, %20
  br i1 %cmp10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %21 = load i32, i32* %i, align 4
  %idxprom = sext i32 %21 to i64
  %22 = load %struct.glyph_row*, %struct.glyph_row** %new_rows, align 8
  %arrayidx = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %22, i64 %idxprom
  %enabled_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %arrayidx, i32 0, i32 22
  %23 = bitcast i40* %enabled_p to i64*
  %bf.load = load i64, i64* %23, align 4
  %bf.lshr = lshr i64 %bf.load, 10
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %enabled_before_p, align 1
  %24 = load i32, i32* %i, align 4
  %idxprom12 = sext i32 %24 to i64
  %25 = load %struct.glyph_row*, %struct.glyph_row** %new_rows, align 8
  %arrayidx13 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %25, i64 %idxprom12
  %26 = load i32, i32* %i, align 4
  %idxprom14 = sext i32 %26 to i64
  %27 = load i32*, i32** %copy_from.addr, align 8
  %arrayidx15 = getelementptr inbounds i32, i32* %27, i64 %idxprom14
  %28 = load i32, i32* %arrayidx15, align 4
  %idxprom16 = sext i32 %28 to i64
  %29 = load %struct.glyph_row*, %struct.glyph_row** %old_rows, align 8
  %arrayidx17 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %29, i64 %idxprom16
  %30 = bitcast %struct.glyph_row* %arrayidx13 to i8*
  %31 = bitcast %struct.glyph_row* %arrayidx17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %30, i8* %31, i64 256, i32 8, i1 false)
  %32 = load i8, i8* %enabled_before_p, align 1
  %tobool = trunc i8 %32 to i1
  %33 = load i32, i32* %i, align 4
  %idxprom18 = sext i32 %33 to i64
  %34 = load %struct.glyph_row*, %struct.glyph_row** %new_rows, align 8
  %arrayidx19 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %34, i64 %idxprom18
  %enabled_p20 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %arrayidx19, i32 0, i32 22
  %35 = bitcast i40* %enabled_p20 to i64*
  %36 = zext i1 %tobool to i64
  %bf.load21 = load i64, i64* %35, align 4
  %bf.shl = shl i64 %36, 10
  %bf.clear22 = and i64 %bf.load21, -1025
  %bf.set = or i64 %bf.clear22, %bf.shl
  store i64 %bf.set, i64* %35, align 4
  %bf.result.cast = trunc i64 %36 to i8
  %tobool23 = trunc i8 %bf.result.cast to i1
  %37 = load i32, i32* %i, align 4
  %idxprom24 = sext i32 %37 to i64
  %38 = load i32*, i32** %copy_from.addr, align 8
  %arrayidx25 = getelementptr inbounds i32, i32* %38, i64 %idxprom24
  %39 = load i32, i32* %arrayidx25, align 4
  %idxprom26 = sext i32 %39 to i64
  %40 = load i8*, i8** %retained_p.addr, align 8
  %arrayidx27 = getelementptr inbounds i8, i8* %40, i64 %idxprom26
  %41 = load i8, i8* %arrayidx27, align 1
  %tobool28 = icmp ne i8 %41, 0
  br i1 %tobool28, label %if.end.35, label %if.then.29

if.then.29:                                       ; preds = %for.body
  %42 = load i32, i32* %i, align 4
  %idxprom30 = sext i32 %42 to i64
  %43 = load %struct.glyph_row*, %struct.glyph_row** %new_rows, align 8
  %arrayidx31 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %43, i64 %idxprom30
  %enabled_p32 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %arrayidx31, i32 0, i32 22
  %44 = bitcast i40* %enabled_p32 to i64*
  %bf.load33 = load i64, i64* %44, align 4
  %bf.clear34 = and i64 %bf.load33, -1025
  store i64 %bf.clear34, i64* %44, align 4
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.29, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.35
  %45 = load i32, i32* %i, align 4
  %inc = add nsw i32 %45, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %46 = load %struct.frame*, %struct.frame** @frame_matrix_frame, align 8
  %tobool36 = icmp ne %struct.frame* %46, null
  br i1 %tobool36, label %if.then.37, label %if.end.39

if.then.37:                                       ; preds = %for.end
  %47 = load %struct.frame*, %struct.frame** @frame_matrix_frame, align 8
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %47, i32 0, i32 5
  %48 = load i64, i64* %root_window, align 8
  %call38 = call %struct.window* @XWINDOW(i64 %48)
  %49 = load i32, i32* %unchanged_at_top.addr, align 4
  %50 = load i32, i32* %nlines.addr, align 4
  %51 = load i32*, i32** %copy_from.addr, align 8
  %52 = load i8*, i8** %retained_p.addr, align 8
  call void @mirror_line_dance(%struct.window* %call38, i32 %49, i32 %50, i32* %51, i8* %52)
  br label %if.end.39

if.end.39:                                        ; preds = %if.then.37, %for.end
  br label %do.body.40

do.body.40:                                       ; preds = %if.end.39
  %53 = load i8, i8* %sa_must_free, align 1
  %tobool41 = trunc i8 %53 to i1
  br i1 %tobool41, label %if.then.42, label %if.end.45

if.then.42:                                       ; preds = %do.body.40
  store i8 0, i8* %sa_must_free, align 1
  %54 = load i64, i64* %sa_count, align 8
  %call43 = call i64 @builtin_lisp_symbol(i32 0)
  %call44 = call i64 @unbind_to(i64 %54, i64 %call43)
  br label %if.end.45

if.end.45:                                        ; preds = %if.then.42, %do.body.40
  br label %do.end.46

do.end.46:                                        ; preds = %if.end.45
  ret void
}

declare i64 @SPECPDL_INDEX() #1

declare noalias i8* @xnmalloc(i64, i64) #1

declare void @record_unwind_protect_ptr(void (i8*)*, i8*) #1

declare void @xfree(i8*) #1

; Function Attrs: nounwind uwtable
define internal void @mirror_line_dance(%struct.window* %w, i32 %unchanged_at_top, i32 %nlines, i32* %copy_from, i8* %retained_p) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %unchanged_at_top.addr = alloca i32, align 4
  %nlines.addr = alloca i32, align 4
  %copy_from.addr = alloca i32*, align 8
  %retained_p.addr = alloca i8*, align 8
  %m = alloca %struct.glyph_matrix*, align 8
  %i = alloca i32, align 4
  %sync_p = alloca i8, align 1
  %old_rows = alloca %struct.glyph_row*, align 8
  %sa_avail = alloca i64, align 8
  %sa_count = alloca i64, align 8
  %sa_must_free = alloca i8, align 1
  %frame_to = alloca i32, align 4
  %frame_from = alloca i32, align 4
  %window_to = alloca i32, align 4
  %window_from = alloca i32, align 4
  %from_inside_window_p = alloca i8, align 1
  %to_inside_window_p = alloca i8, align 1
  %enabled_before_p = alloca i8, align 1
  %f = alloca %struct.frame*, align 8
  %root = alloca %struct.window*, align 8
  %w2 = alloca %struct.window*, align 8
  %m2 = alloca %struct.glyph_matrix*, align 8
  %m2_from = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i32 %unchanged_at_top, i32* %unchanged_at_top.addr, align 4
  store i32 %nlines, i32* %nlines.addr, align 4
  store i32* %copy_from, i32** %copy_from.addr, align 8
  store i8* %retained_p, i8** %retained_p.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %entry
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %tobool = icmp ne %struct.window* %0, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 10
  %2 = load i64, i64* %contents, align 8
  %call = call zeroext i1 @WINDOWP(i64 %2)
  br i1 %call, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %3 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents1 = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 10
  %4 = load i64, i64* %contents1, align 8
  %call2 = call %struct.window* @XWINDOW(i64 %4)
  %5 = load i32, i32* %unchanged_at_top.addr, align 4
  %6 = load i32, i32* %nlines.addr, align 4
  %7 = load i32*, i32** %copy_from.addr, align 8
  %8 = load i8*, i8** %retained_p.addr, align 8
  call void @mirror_line_dance(%struct.window* %call2, i32 %5, i32 %6, i32* %7, i8* %8)
  br label %if.end.117

if.else:                                          ; preds = %while.body
  %9 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %9, i32 0, i32 24
  %10 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  store %struct.glyph_matrix* %10, %struct.glyph_matrix** %m, align 8
  store i8 0, i8* %sync_p, align 1
  store i64 16384, i64* %sa_avail, align 8
  %call3 = call i64 @SPECPDL_INDEX()
  store i64 %call3, i64* %sa_count, align 8
  store i8 0, i8* %sa_must_free, align 1
  br label %do.body

do.body:                                          ; preds = %if.else
  %11 = load %struct.glyph_matrix*, %struct.glyph_matrix** %m, align 8
  %nrows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %11, i32 0, i32 3
  %12 = load i32, i32* %nrows, align 4
  %conv = sext i32 %12 to i64
  %13 = load i64, i64* %sa_avail, align 8
  %div = udiv i64 %13, 256
  %div4 = udiv i64 %div, 1
  %cmp = icmp ule i64 %conv, %div4
  br i1 %cmp, label %if.then.6, label %if.else.12

if.then.6:                                        ; preds = %do.body
  %14 = load %struct.glyph_matrix*, %struct.glyph_matrix** %m, align 8
  %nrows7 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %14, i32 0, i32 3
  %15 = load i32, i32* %nrows7, align 4
  %conv8 = sext i32 %15 to i64
  %mul = mul i64 256, %conv8
  %16 = load i64, i64* %sa_avail, align 8
  %sub = sub i64 %16, %mul
  store i64 %sub, i64* %sa_avail, align 8
  %17 = load %struct.glyph_matrix*, %struct.glyph_matrix** %m, align 8
  %nrows9 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %17, i32 0, i32 3
  %18 = load i32, i32* %nrows9, align 4
  %conv10 = sext i32 %18 to i64
  %mul11 = mul i64 256, %conv10
  %19 = alloca i8, i64 %mul11
  %20 = bitcast i8* %19 to %struct.glyph_row*
  store %struct.glyph_row* %20, %struct.glyph_row** %old_rows, align 8
  br label %if.end

if.else.12:                                       ; preds = %do.body
  %21 = load %struct.glyph_matrix*, %struct.glyph_matrix** %m, align 8
  %nrows13 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %21, i32 0, i32 3
  %22 = load i32, i32* %nrows13, align 4
  %conv14 = sext i32 %22 to i64
  %call15 = call noalias i8* @xnmalloc(i64 %conv14, i64 256)
  %23 = bitcast i8* %call15 to %struct.glyph_row*
  store %struct.glyph_row* %23, %struct.glyph_row** %old_rows, align 8
  store i8 1, i8* %sa_must_free, align 1
  %24 = load %struct.glyph_row*, %struct.glyph_row** %old_rows, align 8
  %25 = bitcast %struct.glyph_row* %24 to i8*
  call void @record_unwind_protect_ptr(void (i8*)* @xfree, i8* %25)
  br label %if.end

if.end:                                           ; preds = %if.else.12, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end
  %26 = load %struct.glyph_row*, %struct.glyph_row** %old_rows, align 8
  %27 = bitcast %struct.glyph_row* %26 to i8*
  %28 = load %struct.glyph_matrix*, %struct.glyph_matrix** %m, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %28, i32 0, i32 1
  %29 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %30 = bitcast %struct.glyph_row* %29 to i8*
  %31 = load %struct.glyph_matrix*, %struct.glyph_matrix** %m, align 8
  %nrows16 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %31, i32 0, i32 3
  %32 = load i32, i32* %nrows16, align 4
  %conv17 = sext i32 %32 to i64
  %mul18 = mul i64 %conv17, 256
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %30, i64 %mul18, i32 8, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end
  %33 = load i32, i32* %i, align 4
  %34 = load i32, i32* %nlines.addr, align 4
  %cmp19 = icmp slt i32 %33, %34
  br i1 %cmp19, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %35 = load i32, i32* %i, align 4
  %36 = load i32, i32* %unchanged_at_top.addr, align 4
  %add = add nsw i32 %35, %36
  store i32 %add, i32* %frame_to, align 4
  %37 = load i32, i32* %i, align 4
  %idxprom = sext i32 %37 to i64
  %38 = load i32*, i32** %copy_from.addr, align 8
  %arrayidx = getelementptr inbounds i32, i32* %38, i64 %idxprom
  %39 = load i32, i32* %arrayidx, align 4
  %40 = load i32, i32* %unchanged_at_top.addr, align 4
  %add21 = add nsw i32 %39, %40
  store i32 %add21, i32* %frame_from, align 4
  %41 = load i32, i32* %frame_to, align 4
  %42 = load %struct.glyph_matrix*, %struct.glyph_matrix** %m, align 8
  %matrix_y = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %42, i32 0, i32 5
  %43 = load i32, i32* %matrix_y, align 4
  %sub22 = sub nsw i32 %41, %43
  store i32 %sub22, i32* %window_to, align 4
  %44 = load i32, i32* %frame_from, align 4
  %45 = load %struct.glyph_matrix*, %struct.glyph_matrix** %m, align 8
  %matrix_y23 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %45, i32 0, i32 5
  %46 = load i32, i32* %matrix_y23, align 4
  %sub24 = sub nsw i32 %44, %46
  store i32 %sub24, i32* %window_from, align 4
  %47 = load i32, i32* %window_from, align 4
  %cmp25 = icmp sge i32 %47, 0
  br i1 %cmp25, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.body
  %48 = load i32, i32* %window_from, align 4
  %49 = load %struct.glyph_matrix*, %struct.glyph_matrix** %m, align 8
  %matrix_h = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %49, i32 0, i32 7
  %50 = load i32, i32* %matrix_h, align 4
  %cmp27 = icmp slt i32 %48, %50
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.body
  %51 = phi i1 [ false, %for.body ], [ %cmp27, %land.rhs ]
  %frombool = zext i1 %51 to i8
  store i8 %frombool, i8* %from_inside_window_p, align 1
  %52 = load i32, i32* %window_to, align 4
  %cmp29 = icmp sge i32 %52, 0
  br i1 %cmp29, label %land.rhs.31, label %land.end.35

land.rhs.31:                                      ; preds = %land.end
  %53 = load i32, i32* %window_to, align 4
  %54 = load %struct.glyph_matrix*, %struct.glyph_matrix** %m, align 8
  %matrix_h32 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %54, i32 0, i32 7
  %55 = load i32, i32* %matrix_h32, align 4
  %cmp33 = icmp slt i32 %53, %55
  br label %land.end.35

land.end.35:                                      ; preds = %land.rhs.31, %land.end
  %56 = phi i1 [ false, %land.end ], [ %cmp33, %land.rhs.31 ]
  %frombool36 = zext i1 %56 to i8
  store i8 %frombool36, i8* %to_inside_window_p, align 1
  %57 = load i8, i8* %from_inside_window_p, align 1
  %tobool37 = trunc i8 %57 to i1
  br i1 %tobool37, label %land.lhs.true, label %if.else.72

land.lhs.true:                                    ; preds = %land.end.35
  %58 = load i8, i8* %to_inside_window_p, align 1
  %tobool39 = trunc i8 %58 to i1
  br i1 %tobool39, label %if.then.41, label %if.else.72

if.then.41:                                       ; preds = %land.lhs.true
  %59 = load i32, i32* %window_to, align 4
  %idxprom42 = sext i32 %59 to i64
  %60 = load %struct.glyph_matrix*, %struct.glyph_matrix** %m, align 8
  %rows43 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %60, i32 0, i32 1
  %61 = load %struct.glyph_row*, %struct.glyph_row** %rows43, align 8
  %arrayidx44 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %61, i64 %idxprom42
  %enabled_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %arrayidx44, i32 0, i32 22
  %62 = bitcast i40* %enabled_p to i64*
  %bf.load = load i64, i64* %62, align 4
  %bf.lshr = lshr i64 %bf.load, 10
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  %frombool45 = zext i1 %bf.cast to i8
  store i8 %frombool45, i8* %enabled_before_p, align 1
  %63 = load i32, i32* %window_to, align 4
  %idxprom46 = sext i32 %63 to i64
  %64 = load %struct.glyph_matrix*, %struct.glyph_matrix** %m, align 8
  %rows47 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %64, i32 0, i32 1
  %65 = load %struct.glyph_row*, %struct.glyph_row** %rows47, align 8
  %arrayidx48 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %65, i64 %idxprom46
  %66 = load i32, i32* %window_from, align 4
  %idxprom49 = sext i32 %66 to i64
  %67 = load %struct.glyph_row*, %struct.glyph_row** %old_rows, align 8
  %arrayidx50 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %67, i64 %idxprom49
  %68 = bitcast %struct.glyph_row* %arrayidx48 to i8*
  %69 = bitcast %struct.glyph_row* %arrayidx50 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %68, i8* %69, i64 256, i32 8, i1 false)
  %70 = load i8, i8* %enabled_before_p, align 1
  %tobool51 = trunc i8 %70 to i1
  %71 = load i32, i32* %window_to, align 4
  %idxprom52 = sext i32 %71 to i64
  %72 = load %struct.glyph_matrix*, %struct.glyph_matrix** %m, align 8
  %rows53 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %72, i32 0, i32 1
  %73 = load %struct.glyph_row*, %struct.glyph_row** %rows53, align 8
  %arrayidx54 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %73, i64 %idxprom52
  %enabled_p55 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %arrayidx54, i32 0, i32 22
  %74 = bitcast i40* %enabled_p55 to i64*
  %75 = zext i1 %tobool51 to i64
  %bf.load56 = load i64, i64* %74, align 4
  %bf.shl = shl i64 %75, 10
  %bf.clear57 = and i64 %bf.load56, -1025
  %bf.set = or i64 %bf.clear57, %bf.shl
  store i64 %bf.set, i64* %74, align 4
  %bf.result.cast = trunc i64 %75 to i8
  %tobool58 = trunc i8 %bf.result.cast to i1
  %76 = load i32, i32* %i, align 4
  %idxprom59 = sext i32 %76 to i64
  %77 = load i32*, i32** %copy_from.addr, align 8
  %arrayidx60 = getelementptr inbounds i32, i32* %77, i64 %idxprom59
  %78 = load i32, i32* %arrayidx60, align 4
  %idxprom61 = sext i32 %78 to i64
  %79 = load i8*, i8** %retained_p.addr, align 8
  %arrayidx62 = getelementptr inbounds i8, i8* %79, i64 %idxprom61
  %80 = load i8, i8* %arrayidx62, align 1
  %tobool63 = icmp ne i8 %80, 0
  br i1 %tobool63, label %if.end.71, label %if.then.64

if.then.64:                                       ; preds = %if.then.41
  %81 = load i32, i32* %window_to, align 4
  %idxprom65 = sext i32 %81 to i64
  %82 = load %struct.glyph_matrix*, %struct.glyph_matrix** %m, align 8
  %rows66 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %82, i32 0, i32 1
  %83 = load %struct.glyph_row*, %struct.glyph_row** %rows66, align 8
  %arrayidx67 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %83, i64 %idxprom65
  %enabled_p68 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %arrayidx67, i32 0, i32 22
  %84 = bitcast i40* %enabled_p68 to i64*
  %bf.load69 = load i64, i64* %84, align 4
  %bf.clear70 = and i64 %bf.load69, -1025
  store i64 %bf.clear70, i64* %84, align 4
  br label %if.end.71

if.end.71:                                        ; preds = %if.then.64, %if.then.41
  br label %if.end.106

if.else.72:                                       ; preds = %land.lhs.true, %land.end.35
  %85 = load i8, i8* %to_inside_window_p, align 1
  %tobool73 = trunc i8 %85 to i1
  br i1 %tobool73, label %if.then.74, label %if.else.101

if.then.74:                                       ; preds = %if.else.72
  %86 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %86, i32 0, i32 1
  %87 = load i64, i64* %frame, align 8
  %sub75 = sub nsw i64 %87, 5
  %88 = inttoptr i64 %sub75 to i8*
  %89 = bitcast i8* %88 to %struct.frame*
  store %struct.frame* %89, %struct.frame** %f, align 8
  %90 = load %struct.frame*, %struct.frame** %f, align 8
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %90, i32 0, i32 5
  %91 = load i64, i64* %root_window, align 8
  %call76 = call %struct.window* @XWINDOW(i64 %91)
  store %struct.window* %call76, %struct.window** %root, align 8
  %92 = load %struct.window*, %struct.window** %root, align 8
  %93 = load i32, i32* %frame_from, align 4
  %call77 = call %struct.window* @frame_row_to_window(%struct.window* %92, i32 %93)
  store %struct.window* %call77, %struct.window** %w2, align 8
  %94 = load %struct.window*, %struct.window** %w2, align 8
  %tobool78 = icmp ne %struct.window* %94, null
  br i1 %tobool78, label %if.then.79, label %if.end.100

if.then.79:                                       ; preds = %if.then.74
  %95 = load %struct.window*, %struct.window** %w2, align 8
  %current_matrix80 = getelementptr inbounds %struct.window, %struct.window* %95, i32 0, i32 24
  %96 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix80, align 8
  store %struct.glyph_matrix* %96, %struct.glyph_matrix** %m2, align 8
  %97 = load i32, i32* %frame_from, align 4
  %98 = load %struct.glyph_matrix*, %struct.glyph_matrix** %m2, align 8
  %matrix_y81 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %98, i32 0, i32 5
  %99 = load i32, i32* %matrix_y81, align 4
  %sub82 = sub nsw i32 %97, %99
  store i32 %sub82, i32* %m2_from, align 4
  %100 = load %struct.glyph_matrix*, %struct.glyph_matrix** %m, align 8
  %rows83 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %100, i32 0, i32 1
  %101 = load %struct.glyph_row*, %struct.glyph_row** %rows83, align 8
  %102 = load i32, i32* %window_to, align 4
  %idx.ext = sext i32 %102 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %101, i64 %idx.ext
  %103 = load %struct.glyph_matrix*, %struct.glyph_matrix** %m2, align 8
  %rows84 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %103, i32 0, i32 1
  %104 = load %struct.glyph_row*, %struct.glyph_row** %rows84, align 8
  %105 = load i32, i32* %m2_from, align 4
  %idx.ext85 = sext i32 %105 to i64
  %add.ptr86 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %104, i64 %idx.ext85
  call void @copy_row_except_pointers(%struct.glyph_row* %add.ptr, %struct.glyph_row* %add.ptr86)
  %106 = load i32, i32* %i, align 4
  %idxprom87 = sext i32 %106 to i64
  %107 = load i32*, i32** %copy_from.addr, align 8
  %arrayidx88 = getelementptr inbounds i32, i32* %107, i64 %idxprom87
  %108 = load i32, i32* %arrayidx88, align 4
  %idxprom89 = sext i32 %108 to i64
  %109 = load i8*, i8** %retained_p.addr, align 8
  %arrayidx90 = getelementptr inbounds i8, i8* %109, i64 %idxprom89
  %110 = load i8, i8* %arrayidx90, align 1
  %tobool91 = icmp ne i8 %110, 0
  br i1 %tobool91, label %if.end.99, label %if.then.92

if.then.92:                                       ; preds = %if.then.79
  %111 = load i32, i32* %window_to, align 4
  %idxprom93 = sext i32 %111 to i64
  %112 = load %struct.glyph_matrix*, %struct.glyph_matrix** %m, align 8
  %rows94 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %112, i32 0, i32 1
  %113 = load %struct.glyph_row*, %struct.glyph_row** %rows94, align 8
  %arrayidx95 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %113, i64 %idxprom93
  %enabled_p96 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %arrayidx95, i32 0, i32 22
  %114 = bitcast i40* %enabled_p96 to i64*
  %bf.load97 = load i64, i64* %114, align 4
  %bf.clear98 = and i64 %bf.load97, -1025
  store i64 %bf.clear98, i64* %114, align 4
  br label %if.end.99

if.end.99:                                        ; preds = %if.then.92, %if.then.79
  br label %if.end.100

if.end.100:                                       ; preds = %if.end.99, %if.then.74
  store i8 1, i8* %sync_p, align 1
  br label %if.end.105

if.else.101:                                      ; preds = %if.else.72
  %115 = load i8, i8* %from_inside_window_p, align 1
  %tobool102 = trunc i8 %115 to i1
  br i1 %tobool102, label %if.then.103, label %if.end.104

if.then.103:                                      ; preds = %if.else.101
  store i8 1, i8* %sync_p, align 1
  br label %if.end.104

if.end.104:                                       ; preds = %if.then.103, %if.else.101
  br label %if.end.105

if.end.105:                                       ; preds = %if.end.104, %if.end.100
  br label %if.end.106

if.end.106:                                       ; preds = %if.end.105, %if.end.71
  br label %for.inc

for.inc:                                          ; preds = %if.end.106
  %116 = load i32, i32* %i, align 4
  %inc = add nsw i32 %116, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %117 = load i8, i8* %sync_p, align 1
  %tobool107 = trunc i8 %117 to i1
  br i1 %tobool107, label %if.then.108, label %if.end.109

if.then.108:                                      ; preds = %for.end
  %118 = load %struct.window*, %struct.window** %w.addr, align 8
  call void @sync_window_with_frame_matrix_rows(%struct.window* %118)
  br label %if.end.109

if.end.109:                                       ; preds = %if.then.108, %for.end
  br label %do.body.110

do.body.110:                                      ; preds = %if.end.109
  %119 = load i8, i8* %sa_must_free, align 1
  %tobool111 = trunc i8 %119 to i1
  br i1 %tobool111, label %if.then.112, label %if.end.115

if.then.112:                                      ; preds = %do.body.110
  store i8 0, i8* %sa_must_free, align 1
  %120 = load i64, i64* %sa_count, align 8
  %call113 = call i64 @builtin_lisp_symbol(i32 0)
  %call114 = call i64 @unbind_to(i64 %120, i64 %call113)
  br label %if.end.115

if.end.115:                                       ; preds = %if.then.112, %do.body.110
  br label %do.end.116

do.end.116:                                       ; preds = %if.end.115
  br label %if.end.117

if.end.117:                                       ; preds = %do.end.116, %if.then
  %121 = load %struct.window*, %struct.window** %w.addr, align 8
  %next = getelementptr inbounds %struct.window, %struct.window* %121, i32 0, i32 2
  %122 = load i64, i64* %next, align 8
  %call118 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp119 = icmp eq i64 %122, %call118
  br i1 %cmp119, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.117
  br label %cond.end

cond.false:                                       ; preds = %if.end.117
  %123 = load %struct.window*, %struct.window** %w.addr, align 8
  %next121 = getelementptr inbounds %struct.window, %struct.window* %123, i32 0, i32 2
  %124 = load i64, i64* %next121, align 8
  %call122 = call %struct.window* @XWINDOW(i64 %124)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.window* [ null, %cond.true ], [ %call122, %cond.false ]
  store %struct.window* %cond, %struct.window** %w.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

declare i64 @unbind_to(i64, i64) #1

; Function Attrs: nounwind uwtable
define void @redraw_frame(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @update_begin(%struct.frame* %0)
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @clear_frame(%struct.frame* %1)
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @clear_current_matrices(%struct.frame* %2)
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @update_end(%struct.frame* %3)
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @fset_redisplay(%struct.frame* %4)
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 5
  %6 = load i64, i64* %root_window, align 8
  call void @mark_window_display_accurate(i64 %6, i1 zeroext false)
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %root_window1 = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 5
  %8 = load i64, i64* %root_window1, align 8
  %call = call %struct.window* @XWINDOW(i64 %8)
  call void @set_window_update_flags(%struct.window* %call, i1 zeroext true)
  %9 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %garbaged = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 26
  %10 = bitcast i48* %garbaged to i64*
  %bf.load = load i64, i64* %10, align 8
  %bf.clear = and i64 %bf.load, -8193
  store i64 %bf.clear, i64* %10, align 8
  ret void
}

declare void @update_begin(%struct.frame*) #1

declare void @clear_frame(%struct.frame*) #1

declare void @update_end(%struct.frame*) #1

declare void @fset_redisplay(%struct.frame*) #1

declare void @mark_window_display_accurate(i64, i1 zeroext) #1

; Function Attrs: nounwind uwtable
define internal void @set_window_update_flags(%struct.window* %w, i1 zeroext %on_p) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %on_p.addr = alloca i8, align 1
  store %struct.window* %w, %struct.window** %w.addr, align 8
  %frombool = zext i1 %on_p to i8
  store i8 %frombool, i8* %on_p.addr, align 1
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %entry
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %tobool = icmp ne %struct.window* %0, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 10
  %2 = load i64, i64* %contents, align 8
  %call = call zeroext i1 @WINDOWP(i64 %2)
  br i1 %call, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %3 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents1 = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 10
  %4 = load i64, i64* %contents1, align 8
  %call2 = call %struct.window* @XWINDOW(i64 %4)
  %5 = load i8, i8* %on_p.addr, align 1
  %tobool3 = trunc i8 %5 to i1
  call void @set_window_update_flags(%struct.window* %call2, i1 zeroext %tobool3)
  br label %if.end

if.else:                                          ; preds = %while.body
  %6 = load i8, i8* %on_p.addr, align 1
  %tobool4 = trunc i8 %6 to i1
  %7 = load %struct.window*, %struct.window** %w.addr, align 8
  %must_be_updated_p = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 67
  %8 = zext i1 %tobool4 to i16
  %bf.load = load i16, i16* %must_be_updated_p, align 4
  %bf.shl = shl i16 %8, 10
  %bf.clear = and i16 %bf.load, -1025
  %bf.set = or i16 %bf.clear, %bf.shl
  store i16 %bf.set, i16* %must_be_updated_p, align 4
  %bf.result.cast = trunc i16 %8 to i8
  %tobool5 = trunc i8 %bf.result.cast to i1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load %struct.window*, %struct.window** %w.addr, align 8
  %next = getelementptr inbounds %struct.window, %struct.window* %9, i32 0, i32 2
  %10 = load i64, i64* %next, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %10, %call6
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %11 = load %struct.window*, %struct.window** %w.addr, align 8
  %next7 = getelementptr inbounds %struct.window, %struct.window* %11, i32 0, i32 2
  %12 = load i64, i64* %next7, align 8
  %call8 = call %struct.window* @XWINDOW(i64 %12)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.window* [ null, %cond.true ], [ %call8, %cond.false ]
  store %struct.window* %cond, %struct.window** %w.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @Fredraw_frame(i64 %frame) #0 {
entry:
  %frame.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_live_frame(i64 %0)
  call void @redraw_frame(%struct.frame* %call)
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call1
}

declare %struct.frame* @decode_live_frame(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fredraw_display() #0 {
entry:
  %tail = alloca i64, align 8
  %frame = alloca i64, align 8
  %0 = load i64, i64* @Vframe_list, align 8
  store i64 %0, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %tail, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %2 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %2, 3
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %4, i32 0, i32 0
  %5 = load i64, i64* %car, align 8
  store i64 %5, i64* %frame, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %6 = phi i1 [ false, %for.cond ], [ true, %land.rhs ]
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %7 = load i64, i64* %frame, align 8
  %sub2 = sub nsw i64 %7, 5
  %8 = inttoptr i64 %sub2 to i8*
  %9 = bitcast i8* %8 to %struct.frame*
  %visible = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 26
  %10 = bitcast i48* %visible to i64*
  %bf.load = load i64, i64* %10, align 8
  %bf.lshr = lshr i64 %bf.load, 10
  %bf.clear = and i64 %bf.lshr, 3
  %bf.cast = trunc i64 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %11 = load i64, i64* %frame, align 8
  %sub3 = sub nsw i64 %11, 5
  %12 = inttoptr i64 %sub3 to i8*
  %13 = bitcast i8* %12 to %struct.frame*
  call void @redraw_frame(%struct.frame* %13)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %14 = load i64, i64* %tail, align 8
  %sub4 = sub nsw i64 %14, 3
  %15 = inttoptr i64 %sub4 to i8*
  %16 = bitcast i8* %15 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %16, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %17 = load i64, i64* %cdr, align 8
  store i64 %17, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %call = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call
}

; Function Attrs: nounwind uwtable
define zeroext i1 @update_frame(%struct.frame* %f, i1 zeroext %force_p, i1 zeroext %inhibit_hairy_id_p) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %force_p.addr = alloca i8, align 1
  %inhibit_hairy_id_p.addr = alloca i8, align 1
  %paused_p = alloca i8, align 1
  %root_window = alloca %struct.window*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %frombool = zext i1 %force_p to i8
  store i8 %frombool, i8* %force_p.addr, align 1
  %frombool1 = zext i1 %inhibit_hairy_id_p to i8
  store i8 %frombool1, i8* %inhibit_hairy_id_p.addr, align 1
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %root_window2 = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 5
  %1 = load i64, i64* %root_window2, align 8
  %call = call %struct.window* @XWINDOW(i64 %1)
  store %struct.window* %call, %struct.window** %root_window, align 8
  %2 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 487), align 1
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i8 1, i8* %force_p.addr, align 1
  br label %if.end.6

if.else:                                          ; preds = %entry
  %3 = load i8, i8* %force_p.addr, align 1
  %tobool3 = trunc i8 %3 to i1
  br i1 %tobool3, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %call4 = call zeroext i1 @detect_input_pending_ignore_squeezables()
  br i1 %call4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %land.lhs.true
  store i8 1, i8* %paused_p, align 1
  br label %do_pause

if.end:                                           ; preds = %land.lhs.true, %if.else
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %if.then
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 26
  %5 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %5, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 2
  br i1 %cmp, label %if.then.7, label %if.else.11

if.then.7:                                        ; preds = %if.end.6
  call void @set_frame_matrix_frame(%struct.frame* null)
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @update_begin(%struct.frame* %6)
  %7 = load %struct.window*, %struct.window** %root_window, align 8
  %8 = load i8, i8* %force_p.addr, align 1
  %tobool8 = trunc i8 %8 to i1
  %call9 = call zeroext i1 @update_window_tree(%struct.window* %7, i1 zeroext %tobool8)
  %frombool10 = zext i1 %call9 to i8
  store i8 %frombool10, i8* %paused_p, align 1
  %9 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @update_end(%struct.frame* %9)
  br label %if.end.90

if.else.11:                                       ; preds = %if.end.6
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @set_frame_matrix_frame(%struct.frame* %10)
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @build_frame_matrix(%struct.frame* %11)
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @update_begin(%struct.frame* %12)
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %14 = load i8, i8* %force_p.addr, align 1
  %tobool12 = trunc i8 %14 to i1
  %15 = load i8, i8* %inhibit_hairy_id_p.addr, align 1
  %tobool13 = trunc i8 %15 to i1
  %call14 = call zeroext i1 @update_frame_1(%struct.frame* %13, i1 zeroext %tobool12, i1 zeroext %tobool13, i1 zeroext true)
  %frombool15 = zext i1 %call14 to i8
  store i8 %frombool15, i8* %paused_p, align 1
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @update_end(%struct.frame* %16)
  %17 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method16 = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 26
  %18 = bitcast i48* %output_method16 to i64*
  %bf.load17 = load i64, i64* %18, align 8
  %bf.lshr18 = lshr i64 %bf.load17, 23
  %bf.clear19 = and i64 %bf.lshr18, 7
  %bf.cast20 = trunc i64 %bf.clear19 to i32
  %cmp21 = icmp eq i32 %bf.cast20, 1
  br i1 %cmp21, label %if.then.22, label %if.end.89

if.then.22:                                       ; preds = %if.else.11
  %19 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method23 = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 26
  %20 = bitcast i48* %output_method23 to i64*
  %bf.load24 = load i64, i64* %20, align 8
  %bf.lshr25 = lshr i64 %bf.load24, 23
  %bf.clear26 = and i64 %bf.lshr25, 7
  %bf.cast27 = trunc i64 %bf.clear26 to i32
  %cmp28 = icmp eq i32 %bf.cast27, 1
  br i1 %cmp28, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.22
  %21 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method29 = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 26
  %22 = bitcast i48* %output_method29 to i64*
  %bf.load30 = load i64, i64* %22, align 8
  %bf.lshr31 = lshr i64 %bf.load30, 23
  %bf.clear32 = and i64 %bf.lshr31, 7
  %bf.cast33 = trunc i64 %bf.clear32 to i32
  %cmp34 = icmp eq i32 %bf.cast33, 3
  br i1 %cmp34, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %if.then.22
  %23 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %23, i32 0, i32 61
  %24 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %24, i32 0, i32 12
  %tty = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %25 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %26, %cond.true
  %cond = phi %struct.tty_display_info* [ %25, %cond.true ], [ null, %26 ]
  %termscript = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond, i32 0, i32 5
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** %termscript, align 8
  %tobool35 = icmp ne %struct._IO_FILE* %27, null
  br i1 %tobool35, label %if.then.36, label %if.end.59

if.then.36:                                       ; preds = %cond.end
  %28 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method37 = getelementptr inbounds %struct.frame, %struct.frame* %28, i32 0, i32 26
  %29 = bitcast i48* %output_method37 to i64*
  %bf.load38 = load i64, i64* %29, align 8
  %bf.lshr39 = lshr i64 %bf.load38, 23
  %bf.clear40 = and i64 %bf.lshr39, 7
  %bf.cast41 = trunc i64 %bf.clear40 to i32
  %cmp42 = icmp eq i32 %bf.cast41, 1
  br i1 %cmp42, label %cond.true.50, label %lor.lhs.false.43

lor.lhs.false.43:                                 ; preds = %if.then.36
  %30 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method44 = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 26
  %31 = bitcast i48* %output_method44 to i64*
  %bf.load45 = load i64, i64* %31, align 8
  %bf.lshr46 = lshr i64 %bf.load45, 23
  %bf.clear47 = and i64 %bf.lshr46, 7
  %bf.cast48 = trunc i64 %bf.clear47 to i32
  %cmp49 = icmp eq i32 %bf.cast48, 3
  br i1 %cmp49, label %cond.true.50, label %cond.false.54

cond.true.50:                                     ; preds = %lor.lhs.false.43, %if.then.36
  %32 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal51 = getelementptr inbounds %struct.frame, %struct.frame* %32, i32 0, i32 61
  %33 = load %struct.terminal*, %struct.terminal** %terminal51, align 8
  %display_info52 = getelementptr inbounds %struct.terminal, %struct.terminal* %33, i32 0, i32 12
  %tty53 = bitcast %union.display_info* %display_info52 to %struct.tty_display_info**
  %34 = load %struct.tty_display_info*, %struct.tty_display_info** %tty53, align 8
  br label %cond.end.55

cond.false.54:                                    ; preds = %lor.lhs.false.43
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.55

cond.end.55:                                      ; preds = %35, %cond.true.50
  %cond56 = phi %struct.tty_display_info* [ %34, %cond.true.50 ], [ null, %35 ]
  %termscript57 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond56, i32 0, i32 5
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** %termscript57, align 8
  %call58 = call i32 @fflush(%struct._IO_FILE* %36)
  br label %if.end.59

if.end.59:                                        ; preds = %cond.end.55, %cond.end
  %37 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method60 = getelementptr inbounds %struct.frame, %struct.frame* %37, i32 0, i32 26
  %38 = bitcast i48* %output_method60 to i64*
  %bf.load61 = load i64, i64* %38, align 8
  %bf.lshr62 = lshr i64 %bf.load61, 23
  %bf.clear63 = and i64 %bf.lshr62, 7
  %bf.cast64 = trunc i64 %bf.clear63 to i32
  %cmp65 = icmp eq i32 %bf.cast64, 1
  br i1 %cmp65, label %if.then.66, label %if.end.88

if.then.66:                                       ; preds = %if.end.59
  %39 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method67 = getelementptr inbounds %struct.frame, %struct.frame* %39, i32 0, i32 26
  %40 = bitcast i48* %output_method67 to i64*
  %bf.load68 = load i64, i64* %40, align 8
  %bf.lshr69 = lshr i64 %bf.load68, 23
  %bf.clear70 = and i64 %bf.lshr69, 7
  %bf.cast71 = trunc i64 %bf.clear70 to i32
  %cmp72 = icmp eq i32 %bf.cast71, 1
  br i1 %cmp72, label %cond.true.80, label %lor.lhs.false.73

lor.lhs.false.73:                                 ; preds = %if.then.66
  %41 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method74 = getelementptr inbounds %struct.frame, %struct.frame* %41, i32 0, i32 26
  %42 = bitcast i48* %output_method74 to i64*
  %bf.load75 = load i64, i64* %42, align 8
  %bf.lshr76 = lshr i64 %bf.load75, 23
  %bf.clear77 = and i64 %bf.lshr76, 7
  %bf.cast78 = trunc i64 %bf.clear77 to i32
  %cmp79 = icmp eq i32 %bf.cast78, 3
  br i1 %cmp79, label %cond.true.80, label %cond.false.84

cond.true.80:                                     ; preds = %lor.lhs.false.73, %if.then.66
  %43 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal81 = getelementptr inbounds %struct.frame, %struct.frame* %43, i32 0, i32 61
  %44 = load %struct.terminal*, %struct.terminal** %terminal81, align 8
  %display_info82 = getelementptr inbounds %struct.terminal, %struct.terminal* %44, i32 0, i32 12
  %tty83 = bitcast %union.display_info* %display_info82 to %struct.tty_display_info**
  %45 = load %struct.tty_display_info*, %struct.tty_display_info** %tty83, align 8
  br label %cond.end.85

cond.false.84:                                    ; preds = %lor.lhs.false.73
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.85

cond.end.85:                                      ; preds = %46, %cond.true.80
  %cond86 = phi %struct.tty_display_info* [ %45, %cond.true.80 ], [ null, %46 ]
  %output = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond86, i32 0, i32 4
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** %output, align 8
  %call87 = call i32 @fflush(%struct._IO_FILE* %47)
  br label %if.end.88

if.end.88:                                        ; preds = %cond.end.85, %if.end.59
  br label %if.end.89

if.end.89:                                        ; preds = %if.end.88, %if.else.11
  br label %if.end.90

if.end.90:                                        ; preds = %if.end.89, %if.then.7
  br label %do_pause

do_pause:                                         ; preds = %if.end.90, %if.then.5
  %48 = load %struct.window*, %struct.window** %root_window, align 8
  call void @set_window_update_flags(%struct.window* %48, i1 zeroext false)
  %49 = load i8, i8* %paused_p, align 1
  %tobool91 = trunc i8 %49 to i1
  %lnot = xor i1 %tobool91, true
  %frombool92 = zext i1 %lnot to i8
  store i8 %frombool92, i8* @display_completed, align 1
  %50 = load i8, i8* %paused_p, align 1
  %tobool93 = trunc i8 %50 to i1
  ret i1 %tobool93
}

declare zeroext i1 @detect_input_pending_ignore_squeezables() #1

; Function Attrs: nounwind uwtable
define internal void @set_frame_matrix_frame(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  store %struct.frame* %0, %struct.frame** @frame_matrix_frame, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @update_window_tree(%struct.window* %w, i1 zeroext %force_p) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %force_p.addr = alloca i8, align 1
  %paused_p = alloca i8, align 1
  store %struct.window* %w, %struct.window** %w.addr, align 8
  %frombool = zext i1 %force_p to i8
  store i8 %frombool, i8* %force_p.addr, align 1
  store i8 0, i8* %paused_p, align 1
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %entry
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %tobool = icmp ne %struct.window* %0, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %1 = load i8, i8* %paused_p, align 1
  %tobool1 = trunc i8 %1 to i1
  %lnot = xor i1 %tobool1, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %2 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ]
  br i1 %2, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %3 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 10
  %4 = load i64, i64* %contents, align 8
  %call = call zeroext i1 @WINDOWP(i64 %4)
  br i1 %call, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %5 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents2 = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 10
  %6 = load i64, i64* %contents2, align 8
  %call3 = call %struct.window* @XWINDOW(i64 %6)
  %7 = load i8, i8* %force_p.addr, align 1
  %tobool4 = trunc i8 %7 to i1
  %call5 = call zeroext i1 @update_window_tree(%struct.window* %call3, i1 zeroext %tobool4)
  %conv = zext i1 %call5 to i32
  %8 = load i8, i8* %paused_p, align 1
  %tobool6 = trunc i8 %8 to i1
  %conv7 = zext i1 %tobool6 to i32
  %or = or i32 %conv7, %conv
  %tobool8 = icmp ne i32 %or, 0
  %frombool9 = zext i1 %tobool8 to i8
  store i8 %frombool9, i8* %paused_p, align 1
  br label %if.end.19

if.else:                                          ; preds = %while.body
  %9 = load %struct.window*, %struct.window** %w.addr, align 8
  %must_be_updated_p = getelementptr inbounds %struct.window, %struct.window* %9, i32 0, i32 67
  %bf.load = load i16, i16* %must_be_updated_p, align 4
  %bf.lshr = lshr i16 %bf.load, 10
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %if.then.10, label %if.end

if.then.10:                                       ; preds = %if.else
  %10 = load %struct.window*, %struct.window** %w.addr, align 8
  %11 = load i8, i8* %force_p.addr, align 1
  %tobool11 = trunc i8 %11 to i1
  %call12 = call zeroext i1 @update_window(%struct.window* %10, i1 zeroext %tobool11)
  %conv13 = zext i1 %call12 to i32
  %12 = load i8, i8* %paused_p, align 1
  %tobool14 = trunc i8 %12 to i1
  %conv15 = zext i1 %tobool14 to i32
  %or16 = or i32 %conv15, %conv13
  %tobool17 = icmp ne i32 %or16, 0
  %frombool18 = zext i1 %tobool17 to i8
  store i8 %frombool18, i8* %paused_p, align 1
  br label %if.end

if.end:                                           ; preds = %if.then.10, %if.else
  br label %if.end.19

if.end.19:                                        ; preds = %if.end, %if.then
  %13 = load %struct.window*, %struct.window** %w.addr, align 8
  %next = getelementptr inbounds %struct.window, %struct.window* %13, i32 0, i32 2
  %14 = load i64, i64* %next, align 8
  %call20 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %14, %call20
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.19
  br label %cond.end

cond.false:                                       ; preds = %if.end.19
  %15 = load %struct.window*, %struct.window** %w.addr, align 8
  %next22 = getelementptr inbounds %struct.window, %struct.window* %15, i32 0, i32 2
  %16 = load i64, i64* %next22, align 8
  %call23 = call %struct.window* @XWINDOW(i64 %16)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.window* [ null, %cond.true ], [ %call23, %cond.false ]
  store %struct.window* %cond, %struct.window** %w.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %17 = load i8, i8* %paused_p, align 1
  %tobool24 = trunc i8 %17 to i1
  ret i1 %tobool24
}

; Function Attrs: nounwind uwtable
define internal void @build_frame_matrix(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %i = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 57
  %1 = load i32, i32* %menu_bar_lines, align 4
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 27
  %3 = load i32, i32* %tool_bar_lines, align 4
  %add = add nsw i32 %1, %3
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %desired_matrix = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 24
  %6 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %nrows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %6, i32 0, i32 3
  %7 = load i32, i32* %nrows, align 4
  %cmp = icmp slt i32 %4, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %desired_matrix1 = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 24
  %9 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix1, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %9, i32 0, i32 1
  %10 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %11 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %11 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %10, i64 %idx.ext
  call void @clear_glyph_row(%struct.glyph_row* %add.ptr)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %desired_matrix2 = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 24
  %14 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix2, align 8
  %15 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 5
  %16 = load i64, i64* %root_window, align 8
  %call = call %struct.window* @XWINDOW(i64 %16)
  call void @build_frame_matrix_from_window_tree(%struct.glyph_matrix* %14, %struct.window* %call)
  ret void
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @update_frame_1(%struct.frame* %f, i1 zeroext %force_p, i1 zeroext %inhibit_id_p, i1 zeroext %set_cursor_p) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %force_p.addr = alloca i8, align 1
  %inhibit_id_p.addr = alloca i8, align 1
  %set_cursor_p.addr = alloca i8, align 1
  %current_matrix = alloca %struct.glyph_matrix*, align 8
  %desired_matrix = alloca %struct.glyph_matrix*, align 8
  %i = alloca i32, align 4
  %pause_p = alloca i8, align 1
  %preempt_count = alloca i32, align 4
  %display_output = alloca %struct._IO_FILE*, align 8
  %outq = alloca i64, align 8
  %top = alloca i32, align 4
  %col = alloca i32, align 4
  %row = alloca i32, align 4
  %r = alloca %struct.glyph_row*, align 8
  %start = alloca %struct.glyph*, align 8
  %w = alloca %struct.window*, align 8
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %frombool = zext i1 %force_p to i8
  store i8 %frombool, i8* %force_p.addr, align 1
  %frombool1 = zext i1 %inhibit_id_p to i8
  store i8 %frombool1, i8* %inhibit_id_p.addr, align 1
  %frombool2 = zext i1 %set_cursor_p to i8
  store i8 %frombool2, i8* %set_cursor_p.addr, align 1
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %current_matrix3 = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 25
  %1 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix3, align 8
  store %struct.glyph_matrix* %1, %struct.glyph_matrix** %current_matrix, align 8
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %desired_matrix4 = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 24
  %3 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix4, align 8
  store %struct.glyph_matrix* %3, %struct.glyph_matrix** %desired_matrix, align 8
  %4 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 381), align 8
  %div = sdiv i64 %4, 2400
  %add = add nsw i64 %div, 1
  %conv = trunc i64 %add to i32
  store i32 %conv, i32* %preempt_count, align 4
  %5 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 381), align 8
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %cost_calculation_baud_rate = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 73
  %7 = load i32, i32* %cost_calculation_baud_rate, align 4
  %conv5 = sext i32 %7 to i64
  %cmp = icmp ne i64 %5, %conv5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @calculate_costs(%struct.frame* %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %9 = load i32, i32* %preempt_count, align 4
  %cmp7 = icmp sle i32 %9, 0
  br i1 %cmp7, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.end
  store i32 1, i32* %preempt_count, align 4
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.9, %if.end
  %10 = load i8, i8* %force_p.addr, align 1
  %tobool = trunc i8 %10 to i1
  br i1 %tobool, label %if.end.13, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end.10
  %call = call zeroext i1 @detect_input_pending_ignore_squeezables()
  br i1 %call, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %land.lhs.true
  store i8 1, i8* %pause_p, align 1
  br label %do_pause

if.end.13:                                        ; preds = %land.lhs.true, %if.end.10
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 26
  %12 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %12, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp14 = icmp eq i32 %bf.cast, 1
  br i1 %cmp14, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.13
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method16 = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 26
  %14 = bitcast i48* %output_method16 to i64*
  %bf.load17 = load i64, i64* %14, align 8
  %bf.lshr18 = lshr i64 %bf.load17, 23
  %bf.clear19 = and i64 %bf.lshr18, 7
  %bf.cast20 = trunc i64 %bf.clear19 to i32
  %cmp21 = icmp eq i32 %bf.cast20, 3
  br i1 %cmp21, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %if.end.13
  %15 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 61
  %16 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %16, i32 0, i32 12
  %tty = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %17 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %18, %cond.true
  %cond = phi %struct.tty_display_info* [ %17, %cond.true ], [ null, %18 ]
  %line_ins_del_ok = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond, i32 0, i32 75
  %bf.load23 = load i8, i8* %line_ins_del_ok, align 4
  %bf.lshr24 = lshr i8 %bf.load23, 4
  %bf.clear25 = and i8 %bf.lshr24, 1
  %bf.cast26 = trunc i8 %bf.clear25 to i1
  br i1 %bf.cast26, label %if.end.28, label %if.then.27

if.then.27:                                       ; preds = %cond.end
  store i8 1, i8* %inhibit_id_p.addr, align 1
  br label %if.end.28

if.end.28:                                        ; preds = %if.then.27, %cond.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.28
  %19 = load i32, i32* %i, align 4
  %20 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %nrows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %20, i32 0, i32 3
  %21 = load i32, i32* %nrows, align 4
  %cmp29 = icmp slt i32 %19, %21
  br i1 %cmp29, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %22 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %22, i32 0, i32 1
  %23 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %24 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %24 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %23, i64 %idx.ext
  %enabled_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr, i32 0, i32 22
  %25 = bitcast i40* %enabled_p to i64*
  %bf.load31 = load i64, i64* %25, align 4
  %bf.lshr32 = lshr i64 %bf.load31, 10
  %bf.clear33 = and i64 %bf.lshr32, 1
  %bf.cast34 = trunc i64 %bf.clear33 to i1
  br i1 %bf.cast34, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %for.body
  br label %for.end

if.end.36:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.36
  %26 = load i32, i32* %i, align 4
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then.35, %for.cond
  %27 = load i8, i8* %inhibit_id_p.addr, align 1
  %tobool37 = trunc i8 %27 to i1
  br i1 %tobool37, label %if.end.49, label %land.lhs.true.38

land.lhs.true.38:                                 ; preds = %for.end
  %28 = load i32, i32* %i, align 4
  %29 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %nrows39 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %29, i32 0, i32 3
  %30 = load i32, i32* %nrows39, align 4
  %cmp40 = icmp slt i32 %28, %30
  br i1 %cmp40, label %if.then.42, label %if.end.49

if.then.42:                                       ; preds = %land.lhs.true.38
  %31 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call43 = call zeroext i1 @scrolling(%struct.frame* %31)
  %conv44 = zext i1 %call43 to i32
  %32 = load i8, i8* %force_p.addr, align 1
  %tobool45 = trunc i8 %32 to i1
  %conv46 = zext i1 %tobool45 to i32
  %or = or i32 %conv46, %conv44
  %tobool47 = icmp ne i32 %or, 0
  %frombool48 = zext i1 %tobool47 to i8
  store i8 %frombool48, i8* %force_p.addr, align 1
  br label %if.end.49

if.end.49:                                        ; preds = %if.then.42, %land.lhs.true.38, %for.end
  %33 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %rows50 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %33, i32 0, i32 1
  %34 = load %struct.glyph_row*, %struct.glyph_row** %rows50, align 8
  %35 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %nrows51 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %35, i32 0, i32 3
  %36 = load i32, i32* %nrows51, align 4
  %sub = sub nsw i32 %36, 1
  %idx.ext52 = sext i32 %sub to i64
  %add.ptr53 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %34, i64 %idx.ext52
  %enabled_p54 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr53, i32 0, i32 22
  %37 = bitcast i40* %enabled_p54 to i64*
  %bf.load55 = load i64, i64* %37, align 4
  %bf.lshr56 = lshr i64 %bf.load55, 10
  %bf.clear57 = and i64 %bf.lshr56, 1
  %bf.cast58 = trunc i64 %bf.clear57 to i1
  br i1 %bf.cast58, label %if.then.59, label %if.end.62

if.then.59:                                       ; preds = %if.end.49
  %38 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %39 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %nrows60 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %39, i32 0, i32 3
  %40 = load i32, i32* %nrows60, align 4
  %sub61 = sub nsw i32 %40, 1
  call void @update_frame_line(%struct.frame* %38, i32 %sub61)
  br label %if.end.62

if.end.62:                                        ; preds = %if.then.59, %if.end.49
  store i32 0, i32* %i, align 4
  br label %for.cond.63

for.cond.63:                                      ; preds = %for.inc.138, %if.end.62
  %41 = load i32, i32* %i, align 4
  %42 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %nrows64 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %42, i32 0, i32 3
  %43 = load i32, i32* %nrows64, align 4
  %sub65 = sub nsw i32 %43, 1
  %cmp66 = icmp slt i32 %41, %sub65
  br i1 %cmp66, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond.63
  %44 = load i8, i8* %force_p.addr, align 1
  %tobool68 = trunc i8 %44 to i1
  br i1 %tobool68, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %45 = load i8, i8* @input_pending, align 1
  %tobool70 = trunc i8 %45 to i1
  %lnot = xor i1 %tobool70, true
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %46 = phi i1 [ true, %land.rhs ], [ %lnot, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %for.cond.63
  %47 = phi i1 [ false, %for.cond.63 ], [ %46, %lor.end ]
  br i1 %47, label %for.body.71, label %for.end.140

for.body.71:                                      ; preds = %land.end
  %48 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %rows72 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %48, i32 0, i32 1
  %49 = load %struct.glyph_row*, %struct.glyph_row** %rows72, align 8
  %50 = load i32, i32* %i, align 4
  %idx.ext73 = sext i32 %50 to i64
  %add.ptr74 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %49, i64 %idx.ext73
  %enabled_p75 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr74, i32 0, i32 22
  %51 = bitcast i40* %enabled_p75 to i64*
  %bf.load76 = load i64, i64* %51, align 4
  %bf.lshr77 = lshr i64 %bf.load76, 10
  %bf.clear78 = and i64 %bf.lshr77, 1
  %bf.cast79 = trunc i64 %bf.clear78 to i1
  br i1 %bf.cast79, label %if.then.80, label %if.end.137

if.then.80:                                       ; preds = %for.body.71
  %52 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method81 = getelementptr inbounds %struct.frame, %struct.frame* %52, i32 0, i32 26
  %53 = bitcast i48* %output_method81 to i64*
  %bf.load82 = load i64, i64* %53, align 8
  %bf.lshr83 = lshr i64 %bf.load82, 23
  %bf.clear84 = and i64 %bf.lshr83, 7
  %bf.cast85 = trunc i64 %bf.clear84 to i32
  %cmp86 = icmp eq i32 %bf.cast85, 1
  br i1 %cmp86, label %if.then.88, label %if.end.127

if.then.88:                                       ; preds = %if.then.80
  %54 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method89 = getelementptr inbounds %struct.frame, %struct.frame* %54, i32 0, i32 26
  %55 = bitcast i48* %output_method89 to i64*
  %bf.load90 = load i64, i64* %55, align 8
  %bf.lshr91 = lshr i64 %bf.load90, 23
  %bf.clear92 = and i64 %bf.lshr91, 7
  %bf.cast93 = trunc i64 %bf.clear92 to i32
  %cmp94 = icmp eq i32 %bf.cast93, 1
  br i1 %cmp94, label %cond.true.104, label %lor.lhs.false.96

lor.lhs.false.96:                                 ; preds = %if.then.88
  %56 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method97 = getelementptr inbounds %struct.frame, %struct.frame* %56, i32 0, i32 26
  %57 = bitcast i48* %output_method97 to i64*
  %bf.load98 = load i64, i64* %57, align 8
  %bf.lshr99 = lshr i64 %bf.load98, 23
  %bf.clear100 = and i64 %bf.lshr99, 7
  %bf.cast101 = trunc i64 %bf.clear100 to i32
  %cmp102 = icmp eq i32 %bf.cast101, 3
  br i1 %cmp102, label %cond.true.104, label %cond.false.108

cond.true.104:                                    ; preds = %lor.lhs.false.96, %if.then.88
  %58 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal105 = getelementptr inbounds %struct.frame, %struct.frame* %58, i32 0, i32 61
  %59 = load %struct.terminal*, %struct.terminal** %terminal105, align 8
  %display_info106 = getelementptr inbounds %struct.terminal, %struct.terminal* %59, i32 0, i32 12
  %tty107 = bitcast %union.display_info* %display_info106 to %struct.tty_display_info**
  %60 = load %struct.tty_display_info*, %struct.tty_display_info** %tty107, align 8
  br label %cond.end.109

cond.false.108:                                   ; preds = %lor.lhs.false.96
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.109

cond.end.109:                                     ; preds = %61, %cond.true.104
  %cond110 = phi %struct.tty_display_info* [ %60, %cond.true.104 ], [ null, %61 ]
  %output = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond110, i32 0, i32 4
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** %output, align 8
  store %struct._IO_FILE* %62, %struct._IO_FILE** %display_output, align 8
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** %display_output, align 8
  %tobool111 = icmp ne %struct._IO_FILE* %63, null
  br i1 %tobool111, label %if.then.112, label %if.end.126

if.then.112:                                      ; preds = %cond.end.109
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** %display_output, align 8
  %call113 = call i64 @__fpending(%struct._IO_FILE* %64) #2
  store i64 %call113, i64* %outq, align 8
  %65 = load i64, i64* %outq, align 8
  %cmp114 = icmp sgt i64 %65, 900
  br i1 %cmp114, label %if.then.123, label %lor.lhs.false.116

lor.lhs.false.116:                                ; preds = %if.then.112
  %66 = load i64, i64* %outq, align 8
  %cmp117 = icmp sgt i64 %66, 20
  br i1 %cmp117, label %land.lhs.true.119, label %if.end.125

land.lhs.true.119:                                ; preds = %lor.lhs.false.116
  %67 = load i32, i32* %i, align 4
  %sub120 = sub nsw i32 %67, 1
  %68 = load i32, i32* %preempt_count, align 4
  %rem = srem i32 %sub120, %68
  %cmp121 = icmp eq i32 %rem, 0
  br i1 %cmp121, label %if.then.123, label %if.end.125

if.then.123:                                      ; preds = %land.lhs.true.119, %if.then.112
  %69 = load %struct._IO_FILE*, %struct._IO_FILE** %display_output, align 8
  %call124 = call i32 @fflush(%struct._IO_FILE* %69)
  br label %if.end.125

if.end.125:                                       ; preds = %if.then.123, %land.lhs.true.119, %lor.lhs.false.116
  br label %if.end.126

if.end.126:                                       ; preds = %if.end.125, %cond.end.109
  br label %if.end.127

if.end.127:                                       ; preds = %if.end.126, %if.then.80
  %70 = load i8, i8* %force_p.addr, align 1
  %tobool128 = trunc i8 %70 to i1
  br i1 %tobool128, label %if.end.136, label %land.lhs.true.129

land.lhs.true.129:                                ; preds = %if.end.127
  %71 = load i32, i32* %i, align 4
  %sub130 = sub nsw i32 %71, 1
  %72 = load i32, i32* %preempt_count, align 4
  %rem131 = srem i32 %sub130, %72
  %cmp132 = icmp eq i32 %rem131, 0
  br i1 %cmp132, label %if.then.134, label %if.end.136

if.then.134:                                      ; preds = %land.lhs.true.129
  %call135 = call zeroext i1 @detect_input_pending_ignore_squeezables()
  br label %if.end.136

if.end.136:                                       ; preds = %if.then.134, %land.lhs.true.129, %if.end.127
  %73 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %74 = load i32, i32* %i, align 4
  call void @update_frame_line(%struct.frame* %73, i32 %74)
  br label %if.end.137

if.end.137:                                       ; preds = %if.end.136, %for.body.71
  br label %for.inc.138

for.inc.138:                                      ; preds = %if.end.137
  %75 = load i32, i32* %i, align 4
  %inc139 = add nsw i32 %75, 1
  store i32 %inc139, i32* %i, align 4
  br label %for.cond.63

for.end.140:                                      ; preds = %land.end
  %76 = load i32, i32* %i, align 4
  %cmp141 = icmp slt i32 0, %76
  br i1 %cmp141, label %land.rhs.143, label %land.end.147

land.rhs.143:                                     ; preds = %for.end.140
  %77 = load i32, i32* %i, align 4
  %78 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %78, i32 0, i32 39
  %79 = load i32, i32* %total_lines, align 4
  %sub144 = sub nsw i32 %79, 1
  %cmp145 = icmp slt i32 %77, %sub144
  br label %land.end.147

land.end.147:                                     ; preds = %land.rhs.143, %for.end.140
  %80 = phi i1 [ false, %for.end.140 ], [ %cmp145, %land.rhs.143 ]
  %frombool148 = zext i1 %80 to i8
  store i8 %frombool148, i8* %pause_p, align 1
  %81 = load i8, i8* %pause_p, align 1
  %tobool149 = trunc i8 %81 to i1
  br i1 %tobool149, label %if.end.289, label %land.lhs.true.150

land.lhs.true.150:                                ; preds = %land.end.147
  %82 = load i8, i8* %set_cursor_p.addr, align 1
  %tobool151 = trunc i8 %82 to i1
  br i1 %tobool151, label %if.then.153, label %if.end.289

if.then.153:                                      ; preds = %land.lhs.true.150
  %83 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 431), align 1
  %tobool154 = trunc i8 %83 to i1
  br i1 %tobool154, label %land.lhs.true.166, label %lor.lhs.false.156

lor.lhs.false.156:                                ; preds = %if.then.153
  %84 = load i64, i64* @minibuf_window, align 8
  %85 = load i64, i64* @selected_window, align 8
  %cmp157 = icmp eq i64 %84, %85
  br i1 %cmp157, label %land.lhs.true.159, label %if.else.262

land.lhs.true.159:                                ; preds = %lor.lhs.false.156
  %86 = load i64, i64* @minibuf_window, align 8
  %87 = load i64, i64* @echo_area_window, align 8
  %cmp160 = icmp eq i64 %86, %87
  br i1 %cmp160, label %land.lhs.true.162, label %if.else.262

land.lhs.true.162:                                ; preds = %land.lhs.true.159
  %88 = load i64, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @echo_area_buffer, i32 0, i64 0), align 8
  %call163 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp164 = icmp eq i64 %88, %call163
  br i1 %cmp164, label %if.else.262, label %land.lhs.true.166

land.lhs.true.166:                                ; preds = %land.lhs.true.162, %if.then.153
  %89 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window = getelementptr inbounds %struct.frame, %struct.frame* %89, i32 0, i32 7
  %90 = load i64, i64* %minibuffer_window, align 8
  %call167 = call zeroext i1 @WINDOWP(i64 %90)
  br i1 %call167, label %land.lhs.true.169, label %if.else.262

land.lhs.true.169:                                ; preds = %land.lhs.true.166
  %91 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window170 = getelementptr inbounds %struct.frame, %struct.frame* %91, i32 0, i32 7
  %92 = load i64, i64* %minibuffer_window170, align 8
  %call171 = call %struct.window* @XWINDOW(i64 %92)
  %frame = getelementptr inbounds %struct.window, %struct.window* %call171, i32 0, i32 1
  %93 = load i64, i64* %frame, align 8
  %sub172 = sub nsw i64 %93, 5
  %94 = inttoptr i64 %sub172 to i8*
  %95 = bitcast i8* %94 to %struct.frame*
  %96 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %cmp173 = icmp eq %struct.frame* %95, %96
  br i1 %cmp173, label %land.lhs.true.175, label %if.else.262

land.lhs.true.175:                                ; preds = %land.lhs.true.169
  %97 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window176 = getelementptr inbounds %struct.frame, %struct.frame* %97, i32 0, i32 7
  %98 = load i64, i64* %minibuffer_window176, align 8
  %99 = load i64, i64* @echo_area_window, align 8
  %cmp177 = icmp eq i64 %98, %99
  br i1 %cmp177, label %if.then.179, label %if.else.262

if.then.179:                                      ; preds = %land.lhs.true.175
  %100 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window180 = getelementptr inbounds %struct.frame, %struct.frame* %100, i32 0, i32 7
  %101 = load i64, i64* %minibuffer_window180, align 8
  %call181 = call %struct.window* @XWINDOW(i64 %101)
  %top_line = getelementptr inbounds %struct.window, %struct.window* %call181, i32 0, i32 33
  %102 = load i32, i32* %top_line, align 4
  store i32 %102, i32* %top, align 4
  %103 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %total_lines182 = getelementptr inbounds %struct.frame, %struct.frame* %103, i32 0, i32 39
  %104 = load i32, i32* %total_lines182, align 4
  store i32 %104, i32* %row, align 4
  br label %do.body

do.body:                                          ; preds = %land.end.212, %if.then.179
  %105 = load i32, i32* %row, align 4
  %dec = add nsw i32 %105, -1
  store i32 %dec, i32* %row, align 4
  store i32 0, i32* %col, align 4
  %106 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %rows183 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %106, i32 0, i32 1
  %107 = load %struct.glyph_row*, %struct.glyph_row** %rows183, align 8
  %108 = load i32, i32* %row, align 4
  %idx.ext184 = sext i32 %108 to i64
  %add.ptr185 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %107, i64 %idx.ext184
  %enabled_p186 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr185, i32 0, i32 22
  %109 = bitcast i40* %enabled_p186 to i64*
  %bf.load187 = load i64, i64* %109, align 4
  %bf.lshr188 = lshr i64 %bf.load187, 10
  %bf.clear189 = and i64 %bf.lshr188, 1
  %bf.cast190 = trunc i64 %bf.clear189 to i1
  br i1 %bf.cast190, label %if.then.191, label %if.end.206

if.then.191:                                      ; preds = %do.body
  %110 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %rows192 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %110, i32 0, i32 1
  %111 = load %struct.glyph_row*, %struct.glyph_row** %rows192, align 8
  %112 = load i32, i32* %row, align 4
  %idx.ext193 = sext i32 %112 to i64
  %add.ptr194 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %111, i64 %idx.ext193
  store %struct.glyph_row* %add.ptr194, %struct.glyph_row** %r, align 8
  %113 = load %struct.glyph_row*, %struct.glyph_row** %r, align 8
  %glyphs = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %113, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs, i32 0, i64 1
  %114 = load %struct.glyph*, %struct.glyph** %arrayidx, align 8
  store %struct.glyph* %114, %struct.glyph** %start, align 8
  %115 = load %struct.glyph_row*, %struct.glyph_row** %r, align 8
  %used = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %115, i32 0, i32 1
  %arrayidx195 = getelementptr inbounds [4 x i16], [4 x i16]* %used, i32 0, i64 1
  %116 = load i16, i16* %arrayidx195, align 2
  %conv196 = sext i16 %116 to i32
  store i32 %conv196, i32* %col, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.191
  %117 = load i32, i32* %col, align 4
  %cmp197 = icmp slt i32 0, %117
  br i1 %cmp197, label %land.rhs.199, label %land.end.204

land.rhs.199:                                     ; preds = %while.cond
  %118 = load i32, i32* %col, align 4
  %sub200 = sub nsw i32 %118, 1
  %idxprom = sext i32 %sub200 to i64
  %119 = load %struct.glyph*, %struct.glyph** %start, align 8
  %arrayidx201 = getelementptr inbounds %struct.glyph, %struct.glyph* %119, i64 %idxprom
  %charpos = getelementptr inbounds %struct.glyph, %struct.glyph* %arrayidx201, i32 0, i32 0
  %120 = load i64, i64* %charpos, align 8
  %cmp202 = icmp slt i64 %120, 0
  br label %land.end.204

land.end.204:                                     ; preds = %land.rhs.199, %while.cond
  %121 = phi i1 [ false, %while.cond ], [ %cmp202, %land.rhs.199 ]
  br i1 %121, label %while.body, label %while.end

while.body:                                       ; preds = %land.end.204
  %122 = load i32, i32* %col, align 4
  %dec205 = add nsw i32 %122, -1
  store i32 %dec205, i32* %col, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end.204
  br label %if.end.206

if.end.206:                                       ; preds = %while.end, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end.206
  %123 = load i32, i32* %row, align 4
  %124 = load i32, i32* %top, align 4
  %cmp207 = icmp sgt i32 %123, %124
  br i1 %cmp207, label %land.rhs.209, label %land.end.212

land.rhs.209:                                     ; preds = %do.cond
  %125 = load i32, i32* %col, align 4
  %cmp210 = icmp eq i32 %125, 0
  br label %land.end.212

land.end.212:                                     ; preds = %land.rhs.209, %do.cond
  %126 = phi i1 [ false, %do.cond ], [ %cmp210, %land.rhs.209 ]
  br i1 %126, label %do.body, label %do.end

do.end:                                           ; preds = %land.end.212
  %127 = load i32, i32* %col, align 4
  %128 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_cols = getelementptr inbounds %struct.frame, %struct.frame* %128, i32 0, i32 36
  %129 = load i32, i32* %text_cols, align 4
  %130 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %vertical_scroll_bar_type = getelementptr inbounds %struct.frame, %struct.frame* %130, i32 0, i32 26
  %131 = bitcast i48* %vertical_scroll_bar_type to i64*
  %bf.load213 = load i64, i64* %131, align 8
  %bf.lshr214 = lshr i64 %bf.load213, 30
  %bf.clear215 = and i64 %bf.lshr214, 3
  %bf.cast216 = trunc i64 %bf.clear215 to i32
  %cmp217 = icmp eq i32 %bf.cast216, 1
  br i1 %cmp217, label %cond.true.219, label %cond.false.220

cond.true.219:                                    ; preds = %do.end
  %132 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_cols = getelementptr inbounds %struct.frame, %struct.frame* %132, i32 0, i32 70
  %133 = load i32, i32* %config_scroll_bar_cols, align 4
  br label %cond.end.221

cond.false.220:                                   ; preds = %do.end
  br label %cond.end.221

cond.end.221:                                     ; preds = %cond.false.220, %cond.true.219
  %cond222 = phi i32 [ %133, %cond.true.219 ], [ 0, %cond.false.220 ]
  %add223 = add nsw i32 %129, %cond222
  %cmp224 = icmp sge i32 %127, %add223
  br i1 %cmp224, label %if.then.226, label %if.end.261

if.then.226:                                      ; preds = %cond.end.221
  %134 = load i32, i32* %row, align 4
  %135 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %total_lines227 = getelementptr inbounds %struct.frame, %struct.frame* %135, i32 0, i32 39
  %136 = load i32, i32* %total_lines227, align 4
  %sub228 = sub nsw i32 %136, 1
  %cmp229 = icmp slt i32 %134, %sub228
  br i1 %cmp229, label %if.then.231, label %if.else

if.then.231:                                      ; preds = %if.then.226
  %137 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %vertical_scroll_bar_type232 = getelementptr inbounds %struct.frame, %struct.frame* %137, i32 0, i32 26
  %138 = bitcast i48* %vertical_scroll_bar_type232 to i64*
  %bf.load233 = load i64, i64* %138, align 8
  %bf.lshr234 = lshr i64 %bf.load233, 30
  %bf.clear235 = and i64 %bf.lshr234, 3
  %bf.cast236 = trunc i64 %bf.clear235 to i32
  %cmp237 = icmp eq i32 %bf.cast236, 1
  br i1 %cmp237, label %cond.true.239, label %cond.false.241

cond.true.239:                                    ; preds = %if.then.231
  %139 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_cols240 = getelementptr inbounds %struct.frame, %struct.frame* %139, i32 0, i32 70
  %140 = load i32, i32* %config_scroll_bar_cols240, align 4
  br label %cond.end.242

cond.false.241:                                   ; preds = %if.then.231
  br label %cond.end.242

cond.end.242:                                     ; preds = %cond.false.241, %cond.true.239
  %cond243 = phi i32 [ %140, %cond.true.239 ], [ 0, %cond.false.241 ]
  store i32 %cond243, i32* %col, align 4
  %141 = load i32, i32* %row, align 4
  %inc244 = add nsw i32 %141, 1
  store i32 %inc244, i32* %row, align 4
  br label %if.end.260

if.else:                                          ; preds = %if.then.226
  %142 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_cols245 = getelementptr inbounds %struct.frame, %struct.frame* %142, i32 0, i32 36
  %143 = load i32, i32* %text_cols245, align 4
  %144 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %vertical_scroll_bar_type246 = getelementptr inbounds %struct.frame, %struct.frame* %144, i32 0, i32 26
  %145 = bitcast i48* %vertical_scroll_bar_type246 to i64*
  %bf.load247 = load i64, i64* %145, align 8
  %bf.lshr248 = lshr i64 %bf.load247, 30
  %bf.clear249 = and i64 %bf.lshr248, 3
  %bf.cast250 = trunc i64 %bf.clear249 to i32
  %cmp251 = icmp eq i32 %bf.cast250, 1
  br i1 %cmp251, label %cond.true.253, label %cond.false.255

cond.true.253:                                    ; preds = %if.else
  %146 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_cols254 = getelementptr inbounds %struct.frame, %struct.frame* %146, i32 0, i32 70
  %147 = load i32, i32* %config_scroll_bar_cols254, align 4
  br label %cond.end.256

cond.false.255:                                   ; preds = %if.else
  br label %cond.end.256

cond.end.256:                                     ; preds = %cond.false.255, %cond.true.253
  %cond257 = phi i32 [ %147, %cond.true.253 ], [ 0, %cond.false.255 ]
  %add258 = add nsw i32 %143, %cond257
  %sub259 = sub nsw i32 %add258, 1
  store i32 %sub259, i32* %col, align 4
  br label %if.end.260

if.end.260:                                       ; preds = %cond.end.256, %cond.end.242
  br label %if.end.261

if.end.261:                                       ; preds = %if.end.260, %cond.end.221
  %148 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %149 = load i32, i32* %row, align 4
  %150 = load i32, i32* %col, align 4
  call void @cursor_to(%struct.frame* %148, i32 %149, i32 %150)
  br label %if.end.288

if.else.262:                                      ; preds = %land.lhs.true.175, %land.lhs.true.169, %land.lhs.true.166, %land.lhs.true.162, %land.lhs.true.159, %lor.lhs.false.156
  %151 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %selected_window = getelementptr inbounds %struct.frame, %struct.frame* %151, i32 0, i32 6
  %152 = load i64, i64* %selected_window, align 8
  %call263 = call %struct.window* @XWINDOW(i64 %152)
  store %struct.window* %call263, %struct.window** %w, align 8
  %153 = load %struct.window*, %struct.window** %w, align 8
  %cursor = getelementptr inbounds %struct.window, %struct.window* %153, i32 0, i32 49
  %vpos = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %cursor, i32 0, i32 3
  %154 = load i32, i32* %vpos, align 4
  %cmp264 = icmp sge i32 %154, 0
  br i1 %cmp264, label %land.lhs.true.266, label %if.end.287

land.lhs.true.266:                                ; preds = %if.else.262
  %155 = load %struct.window*, %struct.window** %w, align 8
  %cursor267 = getelementptr inbounds %struct.window, %struct.window* %155, i32 0, i32 49
  %vpos268 = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %cursor267, i32 0, i32 3
  %156 = load i32, i32* %vpos268, align 4
  %157 = load %struct.window*, %struct.window** %w, align 8
  %total_lines269 = getelementptr inbounds %struct.window, %struct.window* %157, i32 0, i32 37
  %158 = load i32, i32* %total_lines269, align 4
  %cmp270 = icmp slt i32 %156, %158
  br i1 %cmp270, label %if.then.272, label %if.end.287

if.then.272:                                      ; preds = %land.lhs.true.266
  %159 = load %struct.window*, %struct.window** %w, align 8
  %cursor273 = getelementptr inbounds %struct.window, %struct.window* %159, i32 0, i32 49
  %hpos = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %cursor273, i32 0, i32 2
  %160 = load i32, i32* %hpos, align 4
  %161 = load %struct.window*, %struct.window** %w, align 8
  %left_col = getelementptr inbounds %struct.window, %struct.window* %161, i32 0, i32 32
  %162 = load i32, i32* %left_col, align 4
  %add274 = add nsw i32 %160, %162
  store i32 %add274, i32* %x, align 4
  %163 = load %struct.window*, %struct.window** %w, align 8
  %cursor275 = getelementptr inbounds %struct.window, %struct.window* %163, i32 0, i32 49
  %vpos276 = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %cursor275, i32 0, i32 3
  %164 = load i32, i32* %vpos276, align 4
  %165 = load %struct.window*, %struct.window** %w, align 8
  %top_line277 = getelementptr inbounds %struct.window, %struct.window* %165, i32 0, i32 33
  %166 = load i32, i32* %top_line277, align 4
  %add278 = add nsw i32 %164, %166
  store i32 %add278, i32* %y, align 4
  %167 = load %struct.window*, %struct.window** %w, align 8
  %left_margin_cols = getelementptr inbounds %struct.window, %struct.window* %167, i32 0, i32 59
  %168 = load i32, i32* %left_margin_cols, align 4
  %cmp279 = icmp sgt i32 0, %168
  br i1 %cmp279, label %cond.true.281, label %cond.false.282

cond.true.281:                                    ; preds = %if.then.272
  br label %cond.end.284

cond.false.282:                                   ; preds = %if.then.272
  %169 = load %struct.window*, %struct.window** %w, align 8
  %left_margin_cols283 = getelementptr inbounds %struct.window, %struct.window* %169, i32 0, i32 59
  %170 = load i32, i32* %left_margin_cols283, align 4
  br label %cond.end.284

cond.end.284:                                     ; preds = %cond.false.282, %cond.true.281
  %cond285 = phi i32 [ 0, %cond.true.281 ], [ %170, %cond.false.282 ]
  %171 = load i32, i32* %x, align 4
  %add286 = add nsw i32 %171, %cond285
  store i32 %add286, i32* %x, align 4
  %172 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %173 = load i32, i32* %y, align 4
  %174 = load i32, i32* %x, align 4
  call void @cursor_to(%struct.frame* %172, i32 %173, i32 %174)
  br label %if.end.287

if.end.287:                                       ; preds = %cond.end.284, %land.lhs.true.266, %if.else.262
  br label %if.end.288

if.end.288:                                       ; preds = %if.end.287, %if.end.261
  br label %if.end.289

if.end.289:                                       ; preds = %if.end.288, %land.lhs.true.150, %land.end.147
  br label %do_pause

do_pause:                                         ; preds = %if.end.289, %if.then.12
  %175 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @clear_desired_matrices(%struct.frame* %175)
  %176 = load i8, i8* %pause_p, align 1
  %tobool290 = trunc i8 %176 to i1
  ret i1 %tobool290
}

; Function Attrs: noreturn
declare void @emacs_abort() #3

declare i32 @fflush(%struct._IO_FILE*) #1

; Function Attrs: nounwind uwtable
define void @update_frame_with_menu(%struct.frame* %f, i32 %row, i32 %col) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %row.addr = alloca i32, align 4
  %col.addr = alloca i32, align 4
  %root_window = alloca %struct.window*, align 8
  %paused_p = alloca i8, align 1
  %cursor_at_point_p = alloca i8, align 1
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %row, i32* %row.addr, align 4
  store i32 %col, i32* %col.addr, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %root_window1 = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 5
  %1 = load i64, i64* %root_window1, align 8
  %call = call %struct.window* @XWINDOW(i64 %1)
  store %struct.window* %call, %struct.window** %root_window, align 8
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @set_frame_matrix_frame(%struct.frame* %2)
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @update_begin(%struct.frame* %3)
  %4 = load i32, i32* %row.addr, align 4
  %cmp = icmp sge i32 %4, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %5 = load i32, i32* %col.addr, align 4
  %cmp2 = icmp sge i32 %5, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ]
  %lnot = xor i1 %6, true
  %frombool = zext i1 %lnot to i8
  store i8 %frombool, i8* %cursor_at_point_p, align 1
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %8 = load i8, i8* %cursor_at_point_p, align 1
  %tobool = trunc i8 %8 to i1
  %call3 = call zeroext i1 @update_frame_1(%struct.frame* %7, i1 zeroext true, i1 zeroext true, i1 zeroext %tobool)
  %frombool4 = zext i1 %call3 to i8
  store i8 %frombool4, i8* %paused_p, align 1
  %9 = load i8, i8* %cursor_at_point_p, align 1
  %tobool5 = trunc i8 %9 to i1
  br i1 %tobool5, label %if.end, label %if.then

if.then:                                          ; preds = %land.end
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %11 = load i32, i32* %row.addr, align 4
  %12 = load i32, i32* %col.addr, align 4
  call void @cursor_to(%struct.frame* %10, i32 %11, i32 %12)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.end
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @update_end(%struct.frame* %13)
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 26
  %15 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %15, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp6 = icmp eq i32 %bf.cast, 1
  br i1 %cmp6, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method7 = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 26
  %17 = bitcast i48* %output_method7 to i64*
  %bf.load8 = load i64, i64* %17, align 8
  %bf.lshr9 = lshr i64 %bf.load8, 23
  %bf.clear10 = and i64 %bf.lshr9, 7
  %bf.cast11 = trunc i64 %bf.clear10 to i32
  %cmp12 = icmp eq i32 %bf.cast11, 3
  br i1 %cmp12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %if.end
  %18 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 61
  %19 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %19, i32 0, i32 12
  %tty = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %20 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %21, %cond.true
  %cond = phi %struct.tty_display_info* [ %20, %cond.true ], [ null, %21 ]
  %termscript = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond, i32 0, i32 5
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** %termscript, align 8
  %tobool13 = icmp ne %struct._IO_FILE* %22, null
  br i1 %tobool13, label %if.then.14, label %if.end.37

if.then.14:                                       ; preds = %cond.end
  %23 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method15 = getelementptr inbounds %struct.frame, %struct.frame* %23, i32 0, i32 26
  %24 = bitcast i48* %output_method15 to i64*
  %bf.load16 = load i64, i64* %24, align 8
  %bf.lshr17 = lshr i64 %bf.load16, 23
  %bf.clear18 = and i64 %bf.lshr17, 7
  %bf.cast19 = trunc i64 %bf.clear18 to i32
  %cmp20 = icmp eq i32 %bf.cast19, 1
  br i1 %cmp20, label %cond.true.28, label %lor.lhs.false.21

lor.lhs.false.21:                                 ; preds = %if.then.14
  %25 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method22 = getelementptr inbounds %struct.frame, %struct.frame* %25, i32 0, i32 26
  %26 = bitcast i48* %output_method22 to i64*
  %bf.load23 = load i64, i64* %26, align 8
  %bf.lshr24 = lshr i64 %bf.load23, 23
  %bf.clear25 = and i64 %bf.lshr24, 7
  %bf.cast26 = trunc i64 %bf.clear25 to i32
  %cmp27 = icmp eq i32 %bf.cast26, 3
  br i1 %cmp27, label %cond.true.28, label %cond.false.32

cond.true.28:                                     ; preds = %lor.lhs.false.21, %if.then.14
  %27 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal29 = getelementptr inbounds %struct.frame, %struct.frame* %27, i32 0, i32 61
  %28 = load %struct.terminal*, %struct.terminal** %terminal29, align 8
  %display_info30 = getelementptr inbounds %struct.terminal, %struct.terminal* %28, i32 0, i32 12
  %tty31 = bitcast %union.display_info* %display_info30 to %struct.tty_display_info**
  %29 = load %struct.tty_display_info*, %struct.tty_display_info** %tty31, align 8
  br label %cond.end.33

cond.false.32:                                    ; preds = %lor.lhs.false.21
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.33

cond.end.33:                                      ; preds = %30, %cond.true.28
  %cond34 = phi %struct.tty_display_info* [ %29, %cond.true.28 ], [ null, %30 ]
  %termscript35 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond34, i32 0, i32 5
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %termscript35, align 8
  %call36 = call i32 @fflush(%struct._IO_FILE* %31)
  br label %if.end.37

if.end.37:                                        ; preds = %cond.end.33, %cond.end
  %32 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method38 = getelementptr inbounds %struct.frame, %struct.frame* %32, i32 0, i32 26
  %33 = bitcast i48* %output_method38 to i64*
  %bf.load39 = load i64, i64* %33, align 8
  %bf.lshr40 = lshr i64 %bf.load39, 23
  %bf.clear41 = and i64 %bf.lshr40, 7
  %bf.cast42 = trunc i64 %bf.clear41 to i32
  %cmp43 = icmp eq i32 %bf.cast42, 1
  br i1 %cmp43, label %cond.true.51, label %lor.lhs.false.44

lor.lhs.false.44:                                 ; preds = %if.end.37
  %34 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method45 = getelementptr inbounds %struct.frame, %struct.frame* %34, i32 0, i32 26
  %35 = bitcast i48* %output_method45 to i64*
  %bf.load46 = load i64, i64* %35, align 8
  %bf.lshr47 = lshr i64 %bf.load46, 23
  %bf.clear48 = and i64 %bf.lshr47, 7
  %bf.cast49 = trunc i64 %bf.clear48 to i32
  %cmp50 = icmp eq i32 %bf.cast49, 3
  br i1 %cmp50, label %cond.true.51, label %cond.false.55

cond.true.51:                                     ; preds = %lor.lhs.false.44, %if.end.37
  %36 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal52 = getelementptr inbounds %struct.frame, %struct.frame* %36, i32 0, i32 61
  %37 = load %struct.terminal*, %struct.terminal** %terminal52, align 8
  %display_info53 = getelementptr inbounds %struct.terminal, %struct.terminal* %37, i32 0, i32 12
  %tty54 = bitcast %union.display_info* %display_info53 to %struct.tty_display_info**
  %38 = load %struct.tty_display_info*, %struct.tty_display_info** %tty54, align 8
  br label %cond.end.56

cond.false.55:                                    ; preds = %lor.lhs.false.44
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.56

cond.end.56:                                      ; preds = %39, %cond.true.51
  %cond57 = phi %struct.tty_display_info* [ %38, %cond.true.51 ], [ null, %39 ]
  %output = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond57, i32 0, i32 4
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** %output, align 8
  %call58 = call i32 @fflush(%struct._IO_FILE* %40)
  %41 = load %struct.window*, %struct.window** %root_window, align 8
  call void @set_window_update_flags(%struct.window* %41, i1 zeroext false)
  %42 = load i8, i8* %paused_p, align 1
  %tobool59 = trunc i8 %42 to i1
  %lnot60 = xor i1 %tobool59, true
  %frombool61 = zext i1 %lnot60 to i8
  store i8 %frombool61, i8* @display_completed, align 1
  ret void
}

declare void @cursor_to(%struct.frame*, i32, i32) #1

; Function Attrs: nounwind uwtable
define void @update_single_window(%struct.window* %w) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %f = alloca %struct.frame*, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %must_be_updated_p = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 67
  %bf.load = load i16, i16* %must_be_updated_p, align 4
  %bf.lshr = lshr i16 %bf.load, 10
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 1
  %2 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %2, 5
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.frame*
  store %struct.frame* %4, %struct.frame** %f, align 8
  call void @set_frame_matrix_frame(%struct.frame* null)
  %5 = load %struct.frame*, %struct.frame** %f, align 8
  call void @update_begin(%struct.frame* %5)
  %6 = load %struct.window*, %struct.window** %w.addr, align 8
  %call = call zeroext i1 @update_window(%struct.window* %6, i1 zeroext true)
  %7 = load %struct.frame*, %struct.frame** %f, align 8
  call void @update_end(%struct.frame* %7)
  %8 = load %struct.window*, %struct.window** %w.addr, align 8
  %must_be_updated_p1 = getelementptr inbounds %struct.window, %struct.window* %8, i32 0, i32 67
  %bf.load2 = load i16, i16* %must_be_updated_p1, align 4
  %bf.clear3 = and i16 %bf.load2, -1025
  store i16 %bf.clear3, i16* %must_be_updated_p1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @update_window(%struct.window* %w, i1 zeroext %force_p) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %force_p.addr = alloca i8, align 1
  %desired_matrix = alloca %struct.glyph_matrix*, align 8
  %paused_p = alloca i8, align 1
  %preempt_count = alloca i32, align 4
  %rif = alloca %struct.redisplay_interface*, align 8
  %row = alloca %struct.glyph_row*, align 8
  %end = alloca %struct.glyph_row*, align 8
  %mode_line_row = alloca %struct.glyph_row*, align 8
  %header_line_row = alloca %struct.glyph_row*, align 8
  %yb = alloca i32, align 4
  %changed_p = alloca i8, align 1
  %mouse_face_overwritten_p = alloca i8, align 1
  %n_updated = alloca i32, align 4
  %rc = alloca i32, align 4
  %vpos = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  %frombool = zext i1 %force_p to i8
  store i8 %frombool, i8* %force_p.addr, align 1
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %desired_matrix1 = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 25
  %1 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix1, align 8
  store %struct.glyph_matrix* %1, %struct.glyph_matrix** %desired_matrix, align 8
  %2 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 381), align 8
  %div = sdiv i64 %2, 2400
  %add = add nsw i64 %div, 1
  %conv = trunc i64 %add to i32
  store i32 %conv, i32* %preempt_count, align 4
  %3 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 1
  %4 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %4, 5
  %5 = inttoptr i64 %sub to i8*
  %6 = bitcast i8* %5 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 61
  %7 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %rif2 = getelementptr inbounds %struct.terminal, %struct.terminal* %7, i32 0, i32 15
  %8 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif2, align 8
  store %struct.redisplay_interface* %8, %struct.redisplay_interface** %rif, align 8
  %9 = load i8, i8* %force_p.addr, align 1
  %tobool = trunc i8 %9 to i1
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = call zeroext i1 @detect_input_pending_ignore_squeezables()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %10 = load i8, i8* %force_p.addr, align 1
  %tobool3 = trunc i8 %10 to i1
  br i1 %tobool3, label %if.then.9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %11 = load i8, i8* @input_pending, align 1
  %tobool5 = trunc i8 %11 to i1
  br i1 %tobool5, label %lor.lhs.false.6, label %if.then.9

lor.lhs.false.6:                                  ; preds = %lor.lhs.false
  %12 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 368), align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %12, %call7
  br i1 %cmp, label %if.else.202, label %if.then.9

if.then.9:                                        ; preds = %lor.lhs.false.6, %lor.lhs.false, %if.end
  store i8 0, i8* %changed_p, align 1
  store i8 0, i8* %mouse_face_overwritten_p, align 1
  store i32 0, i32* %n_updated, align 4
  %13 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif, align 8
  %update_window_begin_hook = getelementptr inbounds %struct.redisplay_interface, %struct.redisplay_interface* %13, i32 0, i32 7
  %14 = load void (%struct.window*)*, void (%struct.window*)** %update_window_begin_hook, align 8
  %15 = load %struct.window*, %struct.window** %w.addr, align 8
  call void %14(%struct.window* %15)
  %16 = load %struct.window*, %struct.window** %w.addr, align 8
  %call10 = call i32 @window_text_bottom_y(%struct.window* %16)
  store i32 %call10, i32* %yb, align 4
  %17 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %17, i32 0, i32 1
  %18 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %18, i64 0
  store %struct.glyph_row* %add.ptr, %struct.glyph_row** %row, align 8
  %19 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %rows11 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %19, i32 0, i32 1
  %20 = load %struct.glyph_row*, %struct.glyph_row** %rows11, align 8
  %21 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %nrows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %21, i32 0, i32 3
  %22 = load i32, i32* %nrows, align 4
  %idx.ext = sext i32 %22 to i64
  %add.ptr12 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %20, i64 %idx.ext
  %add.ptr13 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr12, i64 -1
  store %struct.glyph_row* %add.ptr13, %struct.glyph_row** %end, align 8
  %23 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %mode_line_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %23, i32 0, i32 22
  %24 = bitcast i40* %mode_line_p to i64*
  %bf.load = load i64, i64* %24, align 4
  %bf.lshr = lshr i64 %bf.load, 20
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %if.then.14, label %if.else

if.then.14:                                       ; preds = %if.then.9
  %25 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  store %struct.glyph_row* %25, %struct.glyph_row** %header_line_row, align 8
  %26 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %incdec.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %26, i32 1
  store %struct.glyph_row* %incdec.ptr, %struct.glyph_row** %row, align 8
  br label %if.end.15

if.else:                                          ; preds = %if.then.9
  store %struct.glyph_row* null, %struct.glyph_row** %header_line_row, align 8
  br label %if.end.15

if.end.15:                                        ; preds = %if.else, %if.then.14
  %27 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %rows16 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %27, i32 0, i32 1
  %28 = load %struct.glyph_row*, %struct.glyph_row** %rows16, align 8
  %29 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %nrows17 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %29, i32 0, i32 3
  %30 = load i32, i32* %nrows17, align 4
  %idx.ext18 = sext i32 %30 to i64
  %add.ptr19 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %28, i64 %idx.ext18
  %add.ptr20 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr19, i64 -1
  store %struct.glyph_row* %add.ptr20, %struct.glyph_row** %mode_line_row, align 8
  %31 = load %struct.glyph_row*, %struct.glyph_row** %mode_line_row, align 8
  %mode_line_p21 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %31, i32 0, i32 22
  %32 = bitcast i40* %mode_line_p21 to i64*
  %bf.load22 = load i64, i64* %32, align 4
  %bf.lshr23 = lshr i64 %bf.load22, 20
  %bf.clear24 = and i64 %bf.lshr23, 1
  %bf.cast25 = trunc i64 %bf.clear24 to i1
  br i1 %bf.cast25, label %land.lhs.true, label %if.end.81

land.lhs.true:                                    ; preds = %if.end.15
  %33 = load %struct.glyph_row*, %struct.glyph_row** %mode_line_row, align 8
  %enabled_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %33, i32 0, i32 22
  %34 = bitcast i40* %enabled_p to i64*
  %bf.load27 = load i64, i64* %34, align 4
  %bf.lshr28 = lshr i64 %bf.load27, 10
  %bf.clear29 = and i64 %bf.lshr28, 1
  %bf.cast30 = trunc i64 %bf.clear29 to i1
  br i1 %bf.cast30, label %if.then.32, label %if.end.81

if.then.32:                                       ; preds = %land.lhs.true
  %35 = load i32, i32* %yb, align 4
  %36 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p = getelementptr inbounds %struct.window, %struct.window* %36, i32 0, i32 67
  %bf.load33 = load i16, i16* %pseudo_window_p, align 4
  %bf.lshr34 = lshr i16 %bf.load33, 11
  %bf.clear35 = and i16 %bf.lshr34, 1
  %bf.cast36 = trunc i16 %bf.clear35 to i1
  br i1 %bf.cast36, label %cond.true, label %lor.lhs.false.38

lor.lhs.false.38:                                 ; preds = %if.then.32
  %37 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini = getelementptr inbounds %struct.window, %struct.window* %37, i32 0, i32 67
  %bf.load39 = load i16, i16* %mini, align 4
  %bf.clear40 = and i16 %bf.load39, 1
  %bf.cast41 = trunc i16 %bf.clear40 to i1
  br i1 %bf.cast41, label %land.lhs.true.43, label %cond.false

land.lhs.true.43:                                 ; preds = %lor.lhs.false.38
  %38 = load %struct.window*, %struct.window** %w.addr, align 8
  %prev = getelementptr inbounds %struct.window, %struct.window* %38, i32 0, i32 3
  %39 = load i64, i64* %prev, align 8
  %40 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame44 = getelementptr inbounds %struct.window, %struct.window* %40, i32 0, i32 1
  %41 = load i64, i64* %frame44, align 8
  %sub45 = sub nsw i64 %41, 5
  %42 = inttoptr i64 %sub45 to i8*
  %43 = bitcast i8* %42 to %struct.frame*
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %43, i32 0, i32 5
  %44 = load i64, i64* %root_window, align 8
  %cmp46 = icmp eq i64 %39, %44
  br i1 %cmp46, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.43, %if.then.32
  br i1 false, label %cond.true.66, label %cond.false.74

cond.false:                                       ; preds = %land.lhs.true.43, %lor.lhs.false.38
  %45 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal_scroll_bar_type = getelementptr inbounds %struct.window, %struct.window* %45, i32 0, i32 18
  %46 = load i64, i64* %horizontal_scroll_bar_type, align 8
  %call48 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp49 = icmp eq i64 %46, %call48
  br i1 %cmp49, label %cond.true.51, label %cond.false.59

cond.true.51:                                     ; preds = %cond.false
  %47 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame52 = getelementptr inbounds %struct.window, %struct.window* %47, i32 0, i32 1
  %48 = load i64, i64* %frame52, align 8
  %sub53 = sub nsw i64 %48, 5
  %49 = inttoptr i64 %sub53 to i8*
  %50 = bitcast i8* %49 to %struct.frame*
  %horizontal_scroll_bars = getelementptr inbounds %struct.frame, %struct.frame* %50, i32 0, i32 26
  %51 = bitcast i48* %horizontal_scroll_bars to i64*
  %bf.load54 = load i64, i64* %51, align 8
  %bf.lshr55 = lshr i64 %bf.load54, 32
  %bf.clear56 = and i64 %bf.lshr55, 1
  %bf.cast57 = trunc i64 %bf.clear56 to i1
  br i1 %bf.cast57, label %cond.true.66, label %cond.false.74

cond.false.59:                                    ; preds = %cond.false
  %52 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal_scroll_bar_type60 = getelementptr inbounds %struct.window, %struct.window* %52, i32 0, i32 18
  %53 = load i64, i64* %horizontal_scroll_bar_type60, align 8
  %call61 = call i64 @builtin_lisp_symbol(i32 213)
  %cmp62 = icmp eq i64 %53, %call61
  br i1 %cmp62, label %cond.true.64, label %cond.false.65

cond.true.64:                                     ; preds = %cond.false.59
  br i1 true, label %cond.true.66, label %cond.false.74

cond.false.65:                                    ; preds = %cond.false.59
  br i1 false, label %cond.true.66, label %cond.false.74

cond.true.66:                                     ; preds = %cond.false.65, %cond.true.64, %cond.true.51, %cond.true
  %54 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_height = getelementptr inbounds %struct.window, %struct.window* %54, i32 0, i32 62
  %55 = load i32, i32* %scroll_bar_height, align 4
  %cmp67 = icmp sge i32 %55, 0
  br i1 %cmp67, label %cond.true.69, label %cond.false.71

cond.true.69:                                     ; preds = %cond.true.66
  %56 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_height70 = getelementptr inbounds %struct.window, %struct.window* %56, i32 0, i32 62
  %57 = load i32, i32* %scroll_bar_height70, align 4
  br label %cond.end

cond.false.71:                                    ; preds = %cond.true.66
  %58 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame72 = getelementptr inbounds %struct.window, %struct.window* %58, i32 0, i32 1
  %59 = load i64, i64* %frame72, align 8
  %sub73 = sub nsw i64 %59, 5
  %60 = inttoptr i64 %sub73 to i8*
  %61 = bitcast i8* %60 to %struct.frame*
  %config_scroll_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %61, i32 0, i32 71
  %62 = load i32, i32* %config_scroll_bar_height, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false.71, %cond.true.69
  %cond = phi i32 [ %57, %cond.true.69 ], [ %62, %cond.false.71 ]
  br label %cond.end.75

cond.false.74:                                    ; preds = %cond.false.65, %cond.true.64, %cond.true.51, %cond.true
  br label %cond.end.75

cond.end.75:                                      ; preds = %cond.false.74, %cond.end
  %cond76 = phi i32 [ %cond, %cond.end ], [ 0, %cond.false.74 ]
  %add77 = add nsw i32 %35, %cond76
  %63 = load %struct.glyph_row*, %struct.glyph_row** %mode_line_row, align 8
  %y = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %63, i32 0, i32 4
  store i32 %add77, i32* %y, align 4
  %64 = load %struct.window*, %struct.window** %w.addr, align 8
  %65 = load %struct.glyph_row*, %struct.glyph_row** %mode_line_row, align 8
  %66 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %rows78 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %66, i32 0, i32 1
  %67 = load %struct.glyph_row*, %struct.glyph_row** %rows78, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.glyph_row* %65 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.glyph_row* %67 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 256
  %conv79 = trunc i64 %sub.ptr.div to i32
  %call80 = call zeroext i1 @update_window_line(%struct.window* %64, i32 %conv79, i8* %mouse_face_overwritten_p)
  br label %if.end.81

if.end.81:                                        ; preds = %cond.end.75, %land.lhs.true, %if.end.15
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end.81
  %68 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %69 = load %struct.glyph_row*, %struct.glyph_row** %end, align 8
  %cmp82 = icmp ult %struct.glyph_row* %68, %69
  br i1 %cmp82, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %70 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %enabled_p84 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %70, i32 0, i32 22
  %71 = bitcast i40* %enabled_p84 to i64*
  %bf.load85 = load i64, i64* %71, align 4
  %bf.lshr86 = lshr i64 %bf.load85, 10
  %bf.clear87 = and i64 %bf.lshr86, 1
  %bf.cast88 = trunc i64 %bf.clear87 to i1
  %lnot = xor i1 %bf.cast88, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %72 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ]
  br i1 %72, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %73 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %incdec.ptr89 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %73, i32 1
  store %struct.glyph_row* %incdec.ptr89, %struct.glyph_row** %row, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %74 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %75 = load %struct.glyph_row*, %struct.glyph_row** %end, align 8
  %cmp90 = icmp ult %struct.glyph_row* %74, %75
  br i1 %cmp90, label %land.lhs.true.92, label %if.end.109

land.lhs.true.92:                                 ; preds = %while.end
  %76 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %no_scrolling_p = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %76, i32 0, i32 15
  %bf.load93 = load i8, i8* %no_scrolling_p, align 8
  %bf.clear94 = and i8 %bf.load93, 1
  %bf.cast95 = trunc i8 %bf.clear94 to i1
  br i1 %bf.cast95, label %if.end.109, label %if.then.96

if.then.96:                                       ; preds = %land.lhs.true.92
  %77 = load %struct.window*, %struct.window** %w.addr, align 8
  %78 = load %struct.glyph_row*, %struct.glyph_row** %header_line_row, align 8
  %cmp97 = icmp ne %struct.glyph_row* %78, null
  %call99 = call i32 @scrolling_window(%struct.window* %77, i1 zeroext %cmp97)
  store i32 %call99, i32* %rc, align 4
  %79 = load i32, i32* %rc, align 4
  %cmp100 = icmp slt i32 %79, 0
  br i1 %cmp100, label %if.then.102, label %if.else.103

if.then.102:                                      ; preds = %if.then.96
  store i8 0, i8* %paused_p, align 1
  br label %set_cursor

if.else.103:                                      ; preds = %if.then.96
  %80 = load i32, i32* %rc, align 4
  %cmp104 = icmp sgt i32 %80, 0
  br i1 %cmp104, label %if.then.106, label %if.end.107

if.then.106:                                      ; preds = %if.else.103
  store i8 1, i8* %force_p.addr, align 1
  store i8 1, i8* %changed_p, align 1
  br label %if.end.107

if.end.107:                                       ; preds = %if.then.106, %if.else.103
  br label %if.end.108

if.end.108:                                       ; preds = %if.end.107
  br label %if.end.109

if.end.109:                                       ; preds = %if.end.108, %land.lhs.true.92, %while.end
  br label %for.cond

for.cond:                                         ; preds = %for.inc.165, %if.end.109
  %81 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %82 = load %struct.glyph_row*, %struct.glyph_row** %end, align 8
  %cmp110 = icmp ult %struct.glyph_row* %81, %82
  br i1 %cmp110, label %land.rhs.112, label %land.end.117

land.rhs.112:                                     ; preds = %for.cond
  %83 = load i8, i8* %force_p.addr, align 1
  %tobool113 = trunc i8 %83 to i1
  br i1 %tobool113, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs.112
  %84 = load i8, i8* @input_pending, align 1
  %tobool115 = trunc i8 %84 to i1
  %lnot116 = xor i1 %tobool115, true
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs.112
  %85 = phi i1 [ true, %land.rhs.112 ], [ %lnot116, %lor.rhs ]
  br label %land.end.117

land.end.117:                                     ; preds = %lor.end, %for.cond
  %86 = phi i1 [ false, %for.cond ], [ %85, %lor.end ]
  br i1 %86, label %for.body, label %for.end.167

for.body:                                         ; preds = %land.end.117
  %87 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %enabled_p118 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %87, i32 0, i32 22
  %88 = bitcast i40* %enabled_p118 to i64*
  %bf.load119 = load i64, i64* %88, align 4
  %bf.lshr120 = lshr i64 %bf.load119, 10
  %bf.clear121 = and i64 %bf.lshr120, 1
  %bf.cast122 = trunc i64 %bf.clear121 to i1
  br i1 %bf.cast122, label %if.then.123, label %if.end.164

if.then.123:                                      ; preds = %for.body
  %89 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %90 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %rows124 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %90, i32 0, i32 1
  %91 = load %struct.glyph_row*, %struct.glyph_row** %rows124, align 8
  %sub.ptr.lhs.cast125 = ptrtoint %struct.glyph_row* %89 to i64
  %sub.ptr.rhs.cast126 = ptrtoint %struct.glyph_row* %91 to i64
  %sub.ptr.sub127 = sub i64 %sub.ptr.lhs.cast125, %sub.ptr.rhs.cast126
  %sub.ptr.div128 = sdiv exact i64 %sub.ptr.sub127, 256
  %conv129 = trunc i64 %sub.ptr.div128 to i32
  store i32 %conv129, i32* %vpos, align 4
  %92 = load i8, i8* %force_p.addr, align 1
  %tobool130 = trunc i8 %92 to i1
  br i1 %tobool130, label %if.end.136, label %land.lhs.true.131

land.lhs.true.131:                                ; preds = %if.then.123
  %93 = load i32, i32* %n_updated, align 4
  %inc = add nsw i32 %93, 1
  store i32 %inc, i32* %n_updated, align 4
  %94 = load i32, i32* %preempt_count, align 4
  %rem = srem i32 %inc, %94
  %cmp132 = icmp eq i32 %rem, 0
  br i1 %cmp132, label %if.then.134, label %if.end.136

if.then.134:                                      ; preds = %land.lhs.true.131
  %call135 = call zeroext i1 @detect_input_pending_ignore_squeezables()
  br label %if.end.136

if.end.136:                                       ; preds = %if.then.134, %land.lhs.true.131, %if.then.123
  %95 = load %struct.window*, %struct.window** %w.addr, align 8
  %96 = load i32, i32* %vpos, align 4
  %call137 = call zeroext i1 @update_window_line(%struct.window* %95, i32 %96, i8* %mouse_face_overwritten_p)
  %conv138 = zext i1 %call137 to i32
  %97 = load i8, i8* %changed_p, align 1
  %tobool139 = trunc i8 %97 to i1
  %conv140 = zext i1 %tobool139 to i32
  %or = or i32 %conv140, %conv138
  %tobool141 = icmp ne i32 %or, 0
  %frombool142 = zext i1 %tobool141 to i8
  store i8 %frombool142, i8* %changed_p, align 1
  %98 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %y143 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %98, i32 0, i32 4
  %99 = load i32, i32* %y143, align 4
  %100 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %height = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %100, i32 0, i32 7
  %101 = load i32, i32* %height, align 4
  %add144 = add nsw i32 %99, %101
  %102 = load i32, i32* %yb, align 4
  %cmp145 = icmp sge i32 %add144, %102
  br i1 %cmp145, label %if.then.147, label %if.end.163

if.then.147:                                      ; preds = %if.end.136
  %103 = load i32, i32* %vpos, align 4
  %add148 = add nsw i32 %103, 1
  store i32 %add148, i32* %i, align 4
  br label %for.cond.149

for.cond.149:                                     ; preds = %for.inc, %if.then.147
  %104 = load i32, i32* %i, align 4
  %105 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %105, i32 0, i32 24
  %106 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %nrows150 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %106, i32 0, i32 3
  %107 = load i32, i32* %nrows150, align 4
  %sub151 = sub nsw i32 %107, 1
  %cmp152 = icmp slt i32 %104, %sub151
  br i1 %cmp152, label %for.body.154, label %for.end

for.body.154:                                     ; preds = %for.cond.149
  %108 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix155 = getelementptr inbounds %struct.window, %struct.window* %108, i32 0, i32 24
  %109 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix155, align 8
  %rows156 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %109, i32 0, i32 1
  %110 = load %struct.glyph_row*, %struct.glyph_row** %rows156, align 8
  %111 = load i32, i32* %i, align 4
  %idx.ext157 = sext i32 %111 to i64
  %add.ptr158 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %110, i64 %idx.ext157
  %enabled_p159 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr158, i32 0, i32 22
  %112 = bitcast i40* %enabled_p159 to i64*
  %bf.load160 = load i64, i64* %112, align 4
  %bf.clear161 = and i64 %bf.load160, -1025
  store i64 %bf.clear161, i64* %112, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body.154
  %113 = load i32, i32* %i, align 4
  %inc162 = add nsw i32 %113, 1
  store i32 %inc162, i32* %i, align 4
  br label %for.cond.149

for.end:                                          ; preds = %for.cond.149
  br label %if.end.163

if.end.163:                                       ; preds = %for.end, %if.end.136
  br label %if.end.164

if.end.164:                                       ; preds = %if.end.163, %for.body
  br label %for.inc.165

for.inc.165:                                      ; preds = %if.end.164
  %114 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %incdec.ptr166 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %114, i32 1
  store %struct.glyph_row* %incdec.ptr166, %struct.glyph_row** %row, align 8
  br label %for.cond

for.end.167:                                      ; preds = %land.end.117
  %115 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %116 = load %struct.glyph_row*, %struct.glyph_row** %end, align 8
  %cmp168 = icmp ult %struct.glyph_row* %115, %116
  %frombool170 = zext i1 %cmp168 to i8
  store i8 %frombool170, i8* %paused_p, align 1
  br label %set_cursor

set_cursor:                                       ; preds = %for.end.167, %if.then.102
  %117 = load %struct.glyph_row*, %struct.glyph_row** %header_line_row, align 8
  %tobool171 = icmp ne %struct.glyph_row* %117, null
  br i1 %tobool171, label %land.lhs.true.172, label %if.end.182

land.lhs.true.172:                                ; preds = %set_cursor
  %118 = load %struct.glyph_row*, %struct.glyph_row** %header_line_row, align 8
  %enabled_p173 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %118, i32 0, i32 22
  %119 = bitcast i40* %enabled_p173 to i64*
  %bf.load174 = load i64, i64* %119, align 4
  %bf.lshr175 = lshr i64 %bf.load174, 10
  %bf.clear176 = and i64 %bf.lshr175, 1
  %bf.cast177 = trunc i64 %bf.clear176 to i1
  br i1 %bf.cast177, label %if.then.179, label %if.end.182

if.then.179:                                      ; preds = %land.lhs.true.172
  %120 = load %struct.glyph_row*, %struct.glyph_row** %header_line_row, align 8
  %y180 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %120, i32 0, i32 4
  store i32 0, i32* %y180, align 4
  %121 = load %struct.window*, %struct.window** %w.addr, align 8
  %call181 = call zeroext i1 @update_window_line(%struct.window* %121, i32 0, i8* %mouse_face_overwritten_p)
  br label %if.end.182

if.end.182:                                       ; preds = %if.then.179, %land.lhs.true.172, %set_cursor
  %122 = load i8, i8* %paused_p, align 1
  %tobool183 = trunc i8 %122 to i1
  br i1 %tobool183, label %if.end.197, label %land.lhs.true.184

land.lhs.true.184:                                ; preds = %if.end.182
  %123 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p185 = getelementptr inbounds %struct.window, %struct.window* %123, i32 0, i32 67
  %bf.load186 = load i16, i16* %pseudo_window_p185, align 4
  %bf.lshr187 = lshr i16 %bf.load186, 11
  %bf.clear188 = and i16 %bf.lshr187, 1
  %bf.cast189 = trunc i16 %bf.clear188 to i1
  br i1 %bf.cast189, label %if.end.197, label %if.then.190

if.then.190:                                      ; preds = %land.lhs.true.184
  %124 = load i8, i8* %changed_p, align 1
  %tobool191 = trunc i8 %124 to i1
  br i1 %tobool191, label %land.lhs.true.193, label %if.end.196

land.lhs.true.193:                                ; preds = %if.then.190
  %125 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif, align 8
  %fix_overlapping_area = getelementptr inbounds %struct.redisplay_interface, %struct.redisplay_interface* %125, i32 0, i32 12
  %126 = load void (%struct.window*, %struct.glyph_row*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, i32, i32)** %fix_overlapping_area, align 8
  %tobool194 = icmp ne void (%struct.window*, %struct.glyph_row*, i32, i32)* %126, null
  br i1 %tobool194, label %if.then.195, label %if.end.196

if.then.195:                                      ; preds = %land.lhs.true.193
  %127 = load %struct.window*, %struct.window** %w.addr, align 8
  %128 = load i32, i32* %yb, align 4
  call void @redraw_overlapped_rows(%struct.window* %127, i32 %128)
  %129 = load %struct.window*, %struct.window** %w.addr, align 8
  %130 = load i32, i32* %yb, align 4
  call void @redraw_overlapping_rows(%struct.window* %129, i32 %130)
  br label %if.end.196

if.end.196:                                       ; preds = %if.then.195, %land.lhs.true.193, %if.then.190
  %131 = load %struct.window*, %struct.window** %w.addr, align 8
  call void @set_window_cursor_after_update(%struct.window* %131)
  br label %if.end.197

if.end.197:                                       ; preds = %if.end.196, %land.lhs.true.184, %if.end.182
  %132 = load %struct.window*, %struct.window** %w.addr, align 8
  %call198 = call zeroext i1 @update_window_fringes(%struct.window* %132, i1 zeroext false)
  %133 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif, align 8
  %update_window_end_hook = getelementptr inbounds %struct.redisplay_interface, %struct.redisplay_interface* %133, i32 0, i32 8
  %134 = load void (%struct.window*, i1, i1)*, void (%struct.window*, i1, i1)** %update_window_end_hook, align 8
  %135 = load %struct.window*, %struct.window** %w.addr, align 8
  %136 = load i8, i8* %paused_p, align 1
  %tobool199 = trunc i8 %136 to i1
  %lnot200 = xor i1 %tobool199, true
  %137 = load i8, i8* %mouse_face_overwritten_p, align 1
  %tobool201 = trunc i8 %137 to i1
  call void %134(%struct.window* %135, i1 zeroext %lnot200, i1 zeroext %tobool201)
  br label %if.end.203

if.else.202:                                      ; preds = %lor.lhs.false.6
  store i8 1, i8* %paused_p, align 1
  br label %if.end.203

if.end.203:                                       ; preds = %if.else.202, %if.end.197
  %138 = load %struct.window*, %struct.window** %w.addr, align 8
  %139 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix204 = getelementptr inbounds %struct.window, %struct.window* %139, i32 0, i32 24
  %140 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix204, align 8
  call void @xwidget_end_redisplay(%struct.window* %138, %struct.glyph_matrix* %140)
  %141 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  call void @clear_glyph_matrix(%struct.glyph_matrix* %141)
  %142 = load i8, i8* %paused_p, align 1
  %tobool205 = trunc i8 %142 to i1
  ret i1 %tobool205
}

; Function Attrs: nounwind uwtable
define i64 @buffer_posn_from_coords(%struct.window* %w, i32* %x, i32* %y, %struct.display_pos* %pos, i64* %object, i32* %dx, i32* %dy, i32* %width, i32* %height) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %pos.addr = alloca %struct.display_pos*, align 8
  %object.addr = alloca i64*, align 8
  %dx.addr = alloca i32*, align 8
  %dy.addr = alloca i32*, align 8
  %width.addr = alloca i32*, align 8
  %height.addr = alloca i32*, align 8
  %it = alloca %struct.it, align 8
  %old_current_buffer = alloca i64, align 8
  %startp = alloca %struct.text_pos, align 8
  %string = alloca i64, align 8
  %row = alloca %struct.glyph_row*, align 8
  %img = alloca %struct.image*, align 8
  %x0 = alloca i32, align 4
  %x1 = alloca i32, align 4
  %to_x = alloca i32, align 4
  %it_vpos = alloca i32, align 4
  %itdata = alloca i8*, align 8
  %glyph = alloca %struct.glyph*, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store %struct.display_pos* %pos, %struct.display_pos** %pos.addr, align 8
  store i64* %object, i64** %object.addr, align 8
  store i32* %dx, i32** %dx.addr, align 8
  store i32* %dy, i32** %dy.addr, align 8
  store i32* %width, i32** %width.addr, align 8
  store i32* %height, i32** %height.addr, align 8
  %call = call i64 @Fcurrent_buffer()
  store i64 %call, i64* %old_current_buffer, align 8
  store %struct.image* null, %struct.image** %img, align 8
  store i8* null, i8** %itdata, align 8
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 10
  %1 = load i64, i64* %contents, align 8
  %call1 = call i64 @Fset_buffer(i64 %1)
  %call2 = call i8* @bidi_shelve_cache()
  store i8* %call2, i8** %itdata, align 8
  %2 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %2, i32 0, i32 77
  %3 = load i64, i64* %begv, align 8
  %4 = load %struct.window*, %struct.window** %w.addr, align 8
  %start = getelementptr inbounds %struct.window, %struct.window* %4, i32 0, i32 11
  %5 = load i64, i64* %start, align 8
  %call3 = call i64 @marker_position(i64 %5)
  %6 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %6, i32 0, i32 79
  %7 = load i64, i64* %zv, align 8
  %call4 = call i64 @clip_to_bounds(i64 %3, i64 %call3, i64 %7)
  %charpos = getelementptr inbounds %struct.text_pos, %struct.text_pos* %startp, i32 0, i32 0
  store i64 %call4, i64* %charpos, align 8
  %8 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %8, i32 0, i32 78
  %9 = load i64, i64* %begv_byte, align 8
  %10 = load %struct.window*, %struct.window** %w.addr, align 8
  %start5 = getelementptr inbounds %struct.window, %struct.window* %10, i32 0, i32 11
  %11 = load i64, i64* %start5, align 8
  %call6 = call i64 @marker_byte_position(i64 %11)
  %12 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %12, i32 0, i32 80
  %13 = load i64, i64* %zv_byte, align 8
  %call7 = call i64 @clip_to_bounds(i64 %9, i64 %call6, i64 %13)
  %bytepos = getelementptr inbounds %struct.text_pos, %struct.text_pos* %startp, i32 0, i32 1
  store i64 %call7, i64* %bytepos, align 8
  %14 = load %struct.window*, %struct.window** %w.addr, align 8
  %15 = bitcast %struct.text_pos* %startp to { i64, i64 }*
  %16 = getelementptr { i64, i64 }, { i64, i64 }* %15, i32 0, i32 0
  %17 = load i64, i64* %16, align 1
  %18 = getelementptr { i64, i64 }, { i64, i64 }* %15, i32 0, i32 1
  %19 = load i64, i64* %18, align 1
  call void @start_display(%struct.it* %it, %struct.window* %14, i64 %17, i64 %19)
  %20 = load i32*, i32** %x.addr, align 8
  %21 = load i32, i32* %20, align 4
  store i32 %21, i32* %x0, align 4
  %22 = load i32*, i32** %y.addr, align 8
  %23 = load i32, i32* %22, align 4
  %call8 = call i32 @move_it_to(%struct.it* %it, i64 -1, i32 0, i32 %23, i32 -1, i32 3)
  %24 = load i32, i32* %x0, align 4
  store i32 %24, i32* %to_x, align 4
  %bidi_it = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 80
  %paragraph_dir = getelementptr inbounds %struct.bidi_it, %struct.bidi_it* %bidi_it, i32 0, i32 29
  %25 = load i32, i32* %paragraph_dir, align 4
  %cmp = icmp eq i32 %25, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %26 = load %struct.window*, %struct.window** %w.addr, align 8
  %call9 = call i32 @window_box_width(%struct.window* %26, i32 1)
  %27 = load i32, i32* %to_x, align 4
  %sub = sub nsw i32 %call9, %27
  %sub10 = sub nsw i32 %sub, 1
  store i32 %sub10, i32* %to_x, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %first_visible_x = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 51
  %28 = load i32, i32* %first_visible_x, align 4
  %29 = load i32, i32* %to_x, align 4
  %add = add nsw i32 %29, %28
  store i32 %add, i32* %to_x, align 4
  %30 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv11 = getelementptr inbounds %struct.buffer, %struct.buffer* %30, i32 0, i32 79
  %31 = load i64, i64* %zv11, align 8
  %32 = load i32, i32* %to_x, align 4
  call void @move_it_in_display_line(%struct.it* %it, i64 %31, i32 %32, i32 1)
  %33 = load i8*, i8** %itdata, align 8
  call void @bidi_unshelve_cache(i8* %33, i1 zeroext false)
  %34 = load i64, i64* %old_current_buffer, align 8
  %call12 = call i64 @Fset_buffer(i64 %34)
  %35 = load i32, i32* %to_x, align 4
  %current_x = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 71
  %36 = load i32, i32* %current_x, align 4
  %sub13 = sub nsw i32 %35, %36
  %37 = load i32*, i32** %dx.addr, align 8
  store i32 %sub13, i32* %37, align 4
  %38 = load i32*, i32** %y.addr, align 8
  %39 = load i32, i32* %38, align 4
  %current_y = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 74
  %40 = load i32, i32* %current_y, align 4
  %sub14 = sub nsw i32 %39, %40
  %41 = load i32*, i32** %dy.addr, align 8
  store i32 %sub14, i32* %41, align 4
  %42 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents15 = getelementptr inbounds %struct.window, %struct.window* %42, i32 0, i32 10
  %43 = load i64, i64* %contents15, align 8
  store i64 %43, i64* %string, align 8
  %string16 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 25
  %44 = load i64, i64* %string16, align 8
  %call17 = call zeroext i1 @STRINGP(i64 %44)
  br i1 %call17, label %if.then.18, label %if.end.20

if.then.18:                                       ; preds = %if.end
  %string19 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 25
  %45 = load i64, i64* %string19, align 8
  store i64 %45, i64* %string, align 8
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.18, %if.end
  %46 = load %struct.display_pos*, %struct.display_pos** %pos.addr, align 8
  %current = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 20
  %47 = bitcast %struct.display_pos* %46 to i8*
  %48 = bitcast %struct.display_pos* %current to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %47, i8* %48, i64 48, i32 8, i1 false)
  %what = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 30
  %49 = load i32, i32* %what, align 4
  %cmp21 = icmp eq i32 %49, 1
  br i1 %cmp21, label %land.lhs.true, label %if.end.48

land.lhs.true:                                    ; preds = %if.end.20
  %cmp_it = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 37
  %nchars = getelementptr inbounds %struct.composition_it, %struct.composition_it* %cmp_it, i32 0, i32 8
  %50 = load i32, i32* %nchars, align 4
  %cmp22 = icmp sgt i32 %50, 1
  br i1 %cmp22, label %land.lhs.true.23, label %if.end.48

land.lhs.true.23:                                 ; preds = %land.lhs.true
  %cmp_it24 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 37
  %reversed_p = getelementptr inbounds %struct.composition_it, %struct.composition_it* %cmp_it24, i32 0, i32 6
  %51 = load i8, i8* %reversed_p, align 1
  %tobool = trunc i8 %51 to i1
  br i1 %tobool, label %if.then.25, label %if.end.48

if.then.25:                                       ; preds = %land.lhs.true.23
  %cmp_it26 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 37
  %nchars27 = getelementptr inbounds %struct.composition_it, %struct.composition_it* %cmp_it26, i32 0, i32 8
  %52 = load i32, i32* %nchars27, align 4
  %sub28 = sub nsw i32 %52, 1
  %conv = sext i32 %sub28 to i64
  %53 = load %struct.display_pos*, %struct.display_pos** %pos.addr, align 8
  %pos29 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %53, i32 0, i32 0
  %charpos30 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos29, i32 0, i32 0
  %54 = load i64, i64* %charpos30, align 8
  %sub31 = sub nsw i64 %54, %conv
  store i64 %sub31, i64* %charpos30, align 8
  %string32 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 25
  %55 = load i64, i64* %string32, align 8
  %call33 = call zeroext i1 @STRINGP(i64 %55)
  br i1 %call33, label %if.then.34, label %if.else

if.then.34:                                       ; preds = %if.then.25
  %56 = load i64, i64* %string, align 8
  %57 = load %struct.display_pos*, %struct.display_pos** %pos.addr, align 8
  %pos35 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %57, i32 0, i32 0
  %charpos36 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos35, i32 0, i32 0
  %58 = load i64, i64* %charpos36, align 8
  %call37 = call i64 @string_char_to_byte(i64 %56, i64 %58)
  %59 = load %struct.display_pos*, %struct.display_pos** %pos.addr, align 8
  %pos38 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %59, i32 0, i32 0
  %bytepos39 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos38, i32 0, i32 1
  store i64 %call37, i64* %bytepos39, align 8
  br label %if.end.47

if.else:                                          ; preds = %if.then.25
  %60 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents40 = getelementptr inbounds %struct.window, %struct.window* %60, i32 0, i32 10
  %61 = load i64, i64* %contents40, align 8
  %call41 = call %struct.buffer* @XBUFFER(i64 %61)
  %62 = load %struct.display_pos*, %struct.display_pos** %pos.addr, align 8
  %pos42 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %62, i32 0, i32 0
  %charpos43 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos42, i32 0, i32 0
  %63 = load i64, i64* %charpos43, align 8
  %call44 = call i64 @buf_charpos_to_bytepos(%struct.buffer* %call41, i64 %63)
  %64 = load %struct.display_pos*, %struct.display_pos** %pos.addr, align 8
  %pos45 = getelementptr inbounds %struct.display_pos, %struct.display_pos* %64, i32 0, i32 0
  %bytepos46 = getelementptr inbounds %struct.text_pos, %struct.text_pos* %pos45, i32 0, i32 1
  store i64 %call44, i64* %bytepos46, align 8
  br label %if.end.47

if.end.47:                                        ; preds = %if.else, %if.then.34
  br label %if.end.48

if.end.48:                                        ; preds = %if.end.47, %land.lhs.true.23, %land.lhs.true, %if.end.20
  %what49 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 30
  %65 = load i32, i32* %what49, align 4
  %cmp50 = icmp eq i32 %65, 3
  br i1 %cmp50, label %if.then.52, label %if.end.72

if.then.52:                                       ; preds = %if.end.48
  %image_id = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 40
  %66 = load i64, i64* %image_id, align 8
  %cmp53 = icmp sge i64 %66, 0
  br i1 %cmp53, label %land.lhs.true.55, label %cond.false

land.lhs.true.55:                                 ; preds = %if.then.52
  %image_id56 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 40
  %67 = load i64, i64* %image_id56, align 8
  %f = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 2
  %68 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %68, i32 0, i32 61
  %69 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %image_cache = getelementptr inbounds %struct.terminal, %struct.terminal* %69, i32 0, i32 11
  %70 = load %struct.image_cache*, %struct.image_cache** %image_cache, align 8
  %used = getelementptr inbounds %struct.image_cache, %struct.image_cache* %70, i32 0, i32 3
  %71 = load i64, i64* %used, align 8
  %cmp57 = icmp slt i64 %67, %71
  br i1 %cmp57, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.55
  %image_id59 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 40
  %72 = load i64, i64* %image_id59, align 8
  %f60 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 2
  %73 = load %struct.frame*, %struct.frame** %f60, align 8
  %terminal61 = getelementptr inbounds %struct.frame, %struct.frame* %73, i32 0, i32 61
  %74 = load %struct.terminal*, %struct.terminal** %terminal61, align 8
  %image_cache62 = getelementptr inbounds %struct.terminal, %struct.terminal* %74, i32 0, i32 11
  %75 = load %struct.image_cache*, %struct.image_cache** %image_cache62, align 8
  %images = getelementptr inbounds %struct.image_cache, %struct.image_cache* %75, i32 0, i32 1
  %76 = load %struct.image**, %struct.image*** %images, align 8
  %arrayidx = getelementptr inbounds %struct.image*, %struct.image** %76, i64 %72
  %77 = load %struct.image*, %struct.image** %arrayidx, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.55, %if.then.52
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.image* [ %77, %cond.true ], [ null, %cond.false ]
  store %struct.image* %cond, %struct.image** %img, align 8
  %cmp63 = icmp ne %struct.image* %cond, null
  br i1 %cmp63, label %land.lhs.true.65, label %if.end.71

land.lhs.true.65:                                 ; preds = %cond.end
  %78 = load %struct.image*, %struct.image** %img, align 8
  %spec = getelementptr inbounds %struct.image, %struct.image* %78, i32 0, i32 15
  %79 = load i64, i64* %spec, align 8
  %call66 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp67 = icmp eq i64 %79, %call66
  br i1 %cmp67, label %if.end.71, label %if.then.69

if.then.69:                                       ; preds = %land.lhs.true.65
  %80 = load %struct.image*, %struct.image** %img, align 8
  %spec70 = getelementptr inbounds %struct.image, %struct.image* %80, i32 0, i32 15
  %81 = load i64, i64* %spec70, align 8
  %82 = load i64*, i64** %object.addr, align 8
  store i64 %81, i64* %82, align 8
  br label %if.end.71

if.end.71:                                        ; preds = %if.then.69, %land.lhs.true.65, %cond.end
  br label %if.end.72

if.end.72:                                        ; preds = %if.end.71, %if.end.48
  %vpos = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 76
  %83 = load i32, i32* %vpos, align 4
  %84 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents73 = getelementptr inbounds %struct.window, %struct.window* %84, i32 0, i32 10
  %85 = load i64, i64* %contents73, align 8
  %call74 = call zeroext i1 @BUFFERP(i64 %85)
  br i1 %call74, label %cond.true.76, label %cond.false.142

cond.true.76:                                     ; preds = %if.end.72
  %86 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini = getelementptr inbounds %struct.window, %struct.window* %86, i32 0, i32 67
  %bf.load = load i16, i16* %mini, align 4
  %bf.clear = and i16 %bf.load, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %land.end, label %land.lhs.true.77

land.lhs.true.77:                                 ; preds = %cond.true.76
  %87 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p = getelementptr inbounds %struct.window, %struct.window* %87, i32 0, i32 67
  %bf.load78 = load i16, i16* %pseudo_window_p, align 4
  %bf.lshr = lshr i16 %bf.load78, 11
  %bf.clear79 = and i16 %bf.lshr, 1
  %bf.cast80 = trunc i16 %bf.clear79 to i1
  br i1 %bf.cast80, label %land.end, label %land.lhs.true.81

land.lhs.true.81:                                 ; preds = %land.lhs.true.77
  %88 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %88, i32 0, i32 1
  %89 = load i64, i64* %frame, align 8
  %sub82 = sub nsw i64 %89, 5
  %90 = inttoptr i64 %sub82 to i8*
  %91 = bitcast i8* %90 to %struct.frame*
  %wants_modeline = getelementptr inbounds %struct.frame, %struct.frame* %91, i32 0, i32 26
  %92 = bitcast i48* %wants_modeline to i64*
  %bf.load83 = load i64, i64* %92, align 8
  %bf.lshr84 = lshr i64 %bf.load83, 14
  %bf.clear85 = and i64 %bf.lshr84, 1
  %bf.cast86 = trunc i64 %bf.clear85 to i1
  br i1 %bf.cast86, label %land.lhs.true.88, label %land.end

land.lhs.true.88:                                 ; preds = %land.lhs.true.81
  %93 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents89 = getelementptr inbounds %struct.window, %struct.window* %93, i32 0, i32 10
  %94 = load i64, i64* %contents89, align 8
  %call90 = call %struct.buffer* @XBUFFER(i64 %94)
  %header_line_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call90, i32 0, i32 13
  %95 = load i64, i64* %header_line_format_, align 8
  %call91 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp92 = icmp eq i64 %95, %call91
  br i1 %cmp92, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true.88
  %96 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height = getelementptr inbounds %struct.window, %struct.window* %96, i32 0, i32 35
  %97 = load i32, i32* %pixel_height, align 4
  %98 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents94 = getelementptr inbounds %struct.window, %struct.window* %98, i32 0, i32 10
  %99 = load i64, i64* %contents94, align 8
  %call95 = call zeroext i1 @BUFFERP(i64 %99)
  br i1 %call95, label %cond.true.97, label %cond.false.129

cond.true.97:                                     ; preds = %land.rhs
  %100 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini98 = getelementptr inbounds %struct.window, %struct.window* %100, i32 0, i32 67
  %bf.load99 = load i16, i16* %mini98, align 4
  %bf.clear100 = and i16 %bf.load99, 1
  %bf.cast101 = trunc i16 %bf.clear100 to i1
  br i1 %bf.cast101, label %cond.false.134, label %land.lhs.true.102

land.lhs.true.102:                                ; preds = %cond.true.97
  %101 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p103 = getelementptr inbounds %struct.window, %struct.window* %101, i32 0, i32 67
  %bf.load104 = load i16, i16* %pseudo_window_p103, align 4
  %bf.lshr105 = lshr i16 %bf.load104, 11
  %bf.clear106 = and i16 %bf.lshr105, 1
  %bf.cast107 = trunc i16 %bf.clear106 to i1
  br i1 %bf.cast107, label %cond.false.134, label %land.lhs.true.108

land.lhs.true.108:                                ; preds = %land.lhs.true.102
  %102 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame109 = getelementptr inbounds %struct.window, %struct.window* %102, i32 0, i32 1
  %103 = load i64, i64* %frame109, align 8
  %sub110 = sub nsw i64 %103, 5
  %104 = inttoptr i64 %sub110 to i8*
  %105 = bitcast i8* %104 to %struct.frame*
  %wants_modeline111 = getelementptr inbounds %struct.frame, %struct.frame* %105, i32 0, i32 26
  %106 = bitcast i48* %wants_modeline111 to i64*
  %bf.load112 = load i64, i64* %106, align 8
  %bf.lshr113 = lshr i64 %bf.load112, 14
  %bf.clear114 = and i64 %bf.lshr113, 1
  %bf.cast115 = trunc i64 %bf.clear114 to i1
  br i1 %bf.cast115, label %land.lhs.true.117, label %cond.false.134

land.lhs.true.117:                                ; preds = %land.lhs.true.108
  %107 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents118 = getelementptr inbounds %struct.window, %struct.window* %107, i32 0, i32 10
  %108 = load i64, i64* %contents118, align 8
  %call119 = call %struct.buffer* @XBUFFER(i64 %108)
  %mode_line_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call119, i32 0, i32 12
  %109 = load i64, i64* %mode_line_format_, align 8
  %call120 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp121 = icmp eq i64 %109, %call120
  br i1 %cmp121, label %cond.false.134, label %land.lhs.true.123

land.lhs.true.123:                                ; preds = %land.lhs.true.117
  %110 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height124 = getelementptr inbounds %struct.window, %struct.window* %110, i32 0, i32 35
  %111 = load i32, i32* %pixel_height124, align 4
  %112 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame125 = getelementptr inbounds %struct.window, %struct.window* %112, i32 0, i32 1
  %113 = load i64, i64* %frame125, align 8
  %sub126 = sub nsw i64 %113, 5
  %114 = inttoptr i64 %sub126 to i8*
  %115 = bitcast i8* %114 to %struct.frame*
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %115, i32 0, i32 60
  %116 = load i32, i32* %line_height, align 4
  %cmp127 = icmp sgt i32 %111, %116
  br i1 %cmp127, label %cond.true.130, label %cond.false.134

cond.false.129:                                   ; preds = %land.rhs
  br i1 false, label %cond.true.130, label %cond.false.134

cond.true.130:                                    ; preds = %cond.false.129, %land.lhs.true.123
  %117 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame131 = getelementptr inbounds %struct.window, %struct.window* %117, i32 0, i32 1
  %118 = load i64, i64* %frame131, align 8
  %sub132 = sub nsw i64 %118, 5
  %119 = inttoptr i64 %sub132 to i8*
  %120 = bitcast i8* %119 to %struct.frame*
  %line_height133 = getelementptr inbounds %struct.frame, %struct.frame* %120, i32 0, i32 60
  %121 = load i32, i32* %line_height133, align 4
  %mul = mul nsw i32 2, %121
  br label %cond.end.138

cond.false.134:                                   ; preds = %cond.false.129, %land.lhs.true.123, %land.lhs.true.117, %land.lhs.true.108, %land.lhs.true.102, %cond.true.97
  %122 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame135 = getelementptr inbounds %struct.window, %struct.window* %122, i32 0, i32 1
  %123 = load i64, i64* %frame135, align 8
  %sub136 = sub nsw i64 %123, 5
  %124 = inttoptr i64 %sub136 to i8*
  %125 = bitcast i8* %124 to %struct.frame*
  %line_height137 = getelementptr inbounds %struct.frame, %struct.frame* %125, i32 0, i32 60
  %126 = load i32, i32* %line_height137, align 4
  br label %cond.end.138

cond.end.138:                                     ; preds = %cond.false.134, %cond.true.130
  %cond139 = phi i32 [ %mul, %cond.true.130 ], [ %126, %cond.false.134 ]
  %cmp140 = icmp sgt i32 %97, %cond139
  br label %land.end

land.end:                                         ; preds = %cond.end.138, %land.lhs.true.88, %land.lhs.true.81, %land.lhs.true.77, %cond.true.76
  %127 = phi i1 [ false, %land.lhs.true.88 ], [ false, %land.lhs.true.81 ], [ false, %land.lhs.true.77 ], [ false, %cond.true.76 ], [ %cmp140, %cond.end.138 ]
  %land.ext = zext i1 %127 to i32
  br label %cond.end.143

cond.false.142:                                   ; preds = %if.end.72
  br label %cond.end.143

cond.end.143:                                     ; preds = %cond.false.142, %land.end
  %cond144 = phi i32 [ %land.ext, %land.end ], [ 0, %cond.false.142 ]
  %add145 = add nsw i32 %83, %cond144
  store i32 %add145, i32* %it_vpos, align 4
  %128 = load i32, i32* %it_vpos, align 4
  %129 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %129, i32 0, i32 24
  %130 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %nrows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %130, i32 0, i32 3
  %131 = load i32, i32* %nrows, align 4
  %cmp146 = icmp slt i32 %128, %131
  br i1 %cmp146, label %land.lhs.true.148, label %if.else.196

land.lhs.true.148:                                ; preds = %cond.end.143
  %132 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix149 = getelementptr inbounds %struct.window, %struct.window* %132, i32 0, i32 24
  %133 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix149, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %133, i32 0, i32 1
  %134 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %135 = load i32, i32* %it_vpos, align 4
  %idx.ext = sext i32 %135 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %134, i64 %idx.ext
  store %struct.glyph_row* %add.ptr, %struct.glyph_row** %row, align 8
  %136 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %enabled_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %136, i32 0, i32 22
  %137 = bitcast i40* %enabled_p to i64*
  %bf.load150 = load i64, i64* %137, align 4
  %bf.lshr151 = lshr i64 %bf.load150, 10
  %bf.clear152 = and i64 %bf.lshr151, 1
  %bf.cast153 = trunc i64 %bf.clear152 to i1
  br i1 %bf.cast153, label %if.then.155, label %if.else.196

if.then.155:                                      ; preds = %land.lhs.true.148
  %hpos = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 77
  %138 = load i32, i32* %hpos, align 4
  %139 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %used156 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %139, i32 0, i32 1
  %arrayidx157 = getelementptr inbounds [4 x i16], [4 x i16]* %used156, i32 0, i64 1
  %140 = load i16, i16* %arrayidx157, align 2
  %conv158 = sext i16 %140 to i32
  %cmp159 = icmp slt i32 %138, %conv158
  br i1 %cmp159, label %if.then.161, label %if.else.193

if.then.161:                                      ; preds = %if.then.155
  %141 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %glyphs = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %141, i32 0, i32 0
  %arrayidx162 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs, i32 0, i64 1
  %142 = load %struct.glyph*, %struct.glyph** %arrayidx162, align 8
  %hpos163 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 77
  %143 = load i32, i32* %hpos163, align 4
  %idx.ext164 = sext i32 %143 to i64
  %add.ptr165 = getelementptr inbounds %struct.glyph, %struct.glyph* %142, i64 %idx.ext164
  store %struct.glyph* %add.ptr165, %struct.glyph** %glyph, align 8
  %144 = load %struct.image*, %struct.image** %img, align 8
  %tobool166 = icmp ne %struct.image* %144, null
  br i1 %tobool166, label %if.then.167, label %if.else.186

if.then.167:                                      ; preds = %if.then.161
  %145 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %ascent = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %145, i32 0, i32 6
  %146 = load i32, i32* %ascent, align 4
  %147 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %ascent168 = getelementptr inbounds %struct.glyph, %struct.glyph* %147, i32 0, i32 3
  %148 = load i16, i16* %ascent168, align 2
  %conv169 = sext i16 %148 to i32
  %sub170 = sub nsw i32 %146, %conv169
  %149 = load i32*, i32** %dy.addr, align 8
  %150 = load i32, i32* %149, align 4
  %sub171 = sub nsw i32 %150, %sub170
  store i32 %sub171, i32* %149, align 4
  %151 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %slice = getelementptr inbounds %struct.glyph, %struct.glyph* %151, i32 0, i32 8
  %img172 = bitcast %union.anon* %slice to %struct.glyph_slice*
  %152 = bitcast %struct.glyph_slice* %img172 to i64*
  %bf.load173 = load i64, i64* %152, align 4
  %bf.clear174 = and i64 %bf.load173, 65535
  %bf.cast175 = trunc i64 %bf.clear174 to i32
  %153 = load i32*, i32** %dx.addr, align 8
  %154 = load i32, i32* %153, align 4
  %add176 = add nsw i32 %154, %bf.cast175
  store i32 %add176, i32* %153, align 4
  %155 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %slice177 = getelementptr inbounds %struct.glyph, %struct.glyph* %155, i32 0, i32 8
  %img178 = bitcast %union.anon* %slice177 to %struct.glyph_slice*
  %156 = bitcast %struct.glyph_slice* %img178 to i64*
  %bf.load179 = load i64, i64* %156, align 4
  %bf.lshr180 = lshr i64 %bf.load179, 16
  %bf.clear181 = and i64 %bf.lshr180, 65535
  %bf.cast182 = trunc i64 %bf.clear181 to i32
  %157 = load i32*, i32** %dy.addr, align 8
  %158 = load i32, i32* %157, align 4
  %add183 = add nsw i32 %158, %bf.cast182
  store i32 %add183, i32* %157, align 4
  %159 = load %struct.image*, %struct.image** %img, align 8
  %width184 = getelementptr inbounds %struct.image, %struct.image* %159, i32 0, i32 11
  %160 = load i32, i32* %width184, align 4
  %161 = load i32*, i32** %width.addr, align 8
  store i32 %160, i32* %161, align 4
  %162 = load %struct.image*, %struct.image** %img, align 8
  %height185 = getelementptr inbounds %struct.image, %struct.image* %162, i32 0, i32 12
  %163 = load i32, i32* %height185, align 4
  %164 = load i32*, i32** %height.addr, align 8
  store i32 %163, i32* %164, align 4
  br label %if.end.192

if.else.186:                                      ; preds = %if.then.161
  %165 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %pixel_width = getelementptr inbounds %struct.glyph, %struct.glyph* %165, i32 0, i32 2
  %166 = load i16, i16* %pixel_width, align 2
  %conv187 = sext i16 %166 to i32
  %167 = load i32*, i32** %width.addr, align 8
  store i32 %conv187, i32* %167, align 4
  %168 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %ascent188 = getelementptr inbounds %struct.glyph, %struct.glyph* %168, i32 0, i32 3
  %169 = load i16, i16* %ascent188, align 2
  %conv189 = sext i16 %169 to i32
  %170 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %descent = getelementptr inbounds %struct.glyph, %struct.glyph* %170, i32 0, i32 4
  %171 = load i16, i16* %descent, align 2
  %conv190 = sext i16 %171 to i32
  %add191 = add nsw i32 %conv189, %conv190
  %172 = load i32*, i32** %height.addr, align 8
  store i32 %add191, i32* %172, align 4
  br label %if.end.192

if.end.192:                                       ; preds = %if.else.186, %if.then.167
  br label %if.end.195

if.else.193:                                      ; preds = %if.then.155
  %173 = load i32*, i32** %width.addr, align 8
  store i32 0, i32* %173, align 4
  %174 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %height194 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %174, i32 0, i32 7
  %175 = load i32, i32* %height194, align 4
  %176 = load i32*, i32** %height.addr, align 8
  store i32 %175, i32* %176, align 4
  br label %if.end.195

if.end.195:                                       ; preds = %if.else.193, %if.end.192
  br label %if.end.197

if.else.196:                                      ; preds = %land.lhs.true.148, %cond.end.143
  %177 = load i32*, i32** %height.addr, align 8
  store i32 0, i32* %177, align 4
  %178 = load i32*, i32** %width.addr, align 8
  store i32 0, i32* %178, align 4
  br label %if.end.197

if.end.197:                                       ; preds = %if.else.196, %if.end.195
  %current_x198 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 71
  %179 = load i32, i32* %current_x198, align 4
  %pixel_width199 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 62
  %180 = load i32, i32* %pixel_width199, align 4
  %add200 = add nsw i32 %179, %180
  %cmp201 = icmp sgt i32 0, %add200
  br i1 %cmp201, label %cond.true.203, label %cond.false.204

cond.true.203:                                    ; preds = %if.end.197
  br label %cond.end.208

cond.false.204:                                   ; preds = %if.end.197
  %current_x205 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 71
  %181 = load i32, i32* %current_x205, align 4
  %pixel_width206 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 62
  %182 = load i32, i32* %pixel_width206, align 4
  %add207 = add nsw i32 %181, %182
  br label %cond.end.208

cond.end.208:                                     ; preds = %cond.false.204, %cond.true.203
  %cond209 = phi i32 [ 0, %cond.true.203 ], [ %add207, %cond.false.204 ]
  store i32 %cond209, i32* %x1, align 4
  %183 = load i32, i32* %to_x, align 4
  %184 = load i32, i32* %x1, align 4
  %cmp210 = icmp sgt i32 %183, %184
  br i1 %cmp210, label %if.then.212, label %if.end.218

if.then.212:                                      ; preds = %cond.end.208
  %185 = load i32, i32* %to_x, align 4
  %186 = load i32, i32* %x1, align 4
  %sub213 = sub nsw i32 %185, %186
  %187 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame214 = getelementptr inbounds %struct.window, %struct.window* %187, i32 0, i32 1
  %188 = load i64, i64* %frame214, align 8
  %sub215 = sub nsw i64 %188, 5
  %189 = inttoptr i64 %sub215 to i8*
  %190 = bitcast i8* %189 to %struct.frame*
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %190, i32 0, i32 59
  %191 = load i32, i32* %column_width, align 4
  %div = sdiv i32 %sub213, %191
  %hpos216 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 77
  %192 = load i32, i32* %hpos216, align 4
  %add217 = add nsw i32 %192, %div
  store i32 %add217, i32* %hpos216, align 4
  br label %if.end.218

if.end.218:                                       ; preds = %if.then.212, %cond.end.208
  %hpos219 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 77
  %193 = load i32, i32* %hpos219, align 4
  %194 = load i32*, i32** %x.addr, align 8
  store i32 %193, i32* %194, align 4
  %vpos220 = getelementptr inbounds %struct.it, %struct.it* %it, i32 0, i32 76
  %195 = load i32, i32* %vpos220, align 4
  %196 = load i32*, i32** %y.addr, align 8
  store i32 %195, i32* %196, align 4
  %197 = load i64, i64* %string, align 8
  ret i64 %197
}

declare i64 @Fcurrent_buffer() #1

declare i64 @Fset_buffer(i64) #1

declare i8* @bidi_shelve_cache() #1

declare i64 @clip_to_bounds(i64, i64, i64) #1

declare i64 @marker_position(i64) #1

declare i64 @marker_byte_position(i64) #1

declare void @start_display(%struct.it*, %struct.window*, i64, i64) #1

declare i32 @move_it_to(%struct.it*, i64, i32, i32, i32, i32) #1

declare i32 @window_box_width(%struct.window*, i32) #1

declare void @move_it_in_display_line(%struct.it*, i64, i32, i32) #1

declare void @bidi_unshelve_cache(i8*, i1 zeroext) #1

declare zeroext i1 @STRINGP(i64) #1

declare i64 @string_char_to_byte(i64, i64) #1

declare i64 @buf_charpos_to_bytepos(%struct.buffer*, i64) #1

; Function Attrs: nounwind uwtable
define i64 @mode_line_string(%struct.window* %w, i32 %part, i32* %x, i32* %y, i64* %charpos, i64* %object, i32* %dx, i32* %dy, i32* %width, i32* %height) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %part.addr = alloca i32, align 4
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %charpos.addr = alloca i64*, align 8
  %object.addr = alloca i64*, align 8
  %dx.addr = alloca i32*, align 8
  %dy.addr = alloca i32*, align 8
  %width.addr = alloca i32*, align 8
  %height.addr = alloca i32*, align 8
  %row = alloca %struct.glyph_row*, align 8
  %glyph = alloca %struct.glyph*, align 8
  %end = alloca %struct.glyph*, align 8
  %x0 = alloca i32, align 4
  %y0 = alloca i32, align 4
  %string = alloca i64, align 8
  %img = alloca %struct.image*, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i32 %part, i32* %part.addr, align 4
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i64* %charpos, i64** %charpos.addr, align 8
  store i64* %object, i64** %object.addr, align 8
  store i32* %dx, i32** %dx.addr, align 8
  store i32* %dy, i32** %dy.addr, align 8
  store i32* %width, i32** %width.addr, align 8
  store i32* %height, i32** %height.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %string, align 8
  %0 = load i32, i32* %part.addr, align 4
  %cmp = icmp eq i32 %0, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 24
  %2 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %2, i32 0, i32 1
  %3 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %4 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix1 = getelementptr inbounds %struct.window, %struct.window* %4, i32 0, i32 24
  %5 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix1, align 8
  %nrows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %5, i32 0, i32 3
  %6 = load i32, i32* %nrows, align 4
  %idx.ext = sext i32 %6 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %3, i64 %idx.ext
  %add.ptr2 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr, i64 -1
  store %struct.glyph_row* %add.ptr2, %struct.glyph_row** %row, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix3 = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 24
  %8 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix3, align 8
  %rows4 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %8, i32 0, i32 1
  %9 = load %struct.glyph_row*, %struct.glyph_row** %rows4, align 8
  store %struct.glyph_row* %9, %struct.glyph_row** %row, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = load i32*, i32** %y.addr, align 8
  %11 = load i32, i32* %10, align 4
  %12 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %y5 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %12, i32 0, i32 4
  %13 = load i32, i32* %y5, align 4
  %sub = sub nsw i32 %11, %13
  store i32 %sub, i32* %y0, align 4
  %14 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %15 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix6 = getelementptr inbounds %struct.window, %struct.window* %15, i32 0, i32 24
  %16 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix6, align 8
  %rows7 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %16, i32 0, i32 1
  %17 = load %struct.glyph_row*, %struct.glyph_row** %rows7, align 8
  %mode_line_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %17, i32 0, i32 22
  %18 = bitcast i40* %mode_line_p to i64*
  %bf.load = load i64, i64* %18, align 4
  %bf.lshr = lshr i64 %bf.load, 20
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %19 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix8 = getelementptr inbounds %struct.window, %struct.window* %19, i32 0, i32 24
  %20 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix8, align 8
  %rows9 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %20, i32 0, i32 1
  %21 = load %struct.glyph_row*, %struct.glyph_row** %rows9, align 8
  %add.ptr10 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %21, i64 1
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %22 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix11 = getelementptr inbounds %struct.window, %struct.window* %22, i32 0, i32 24
  %23 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix11, align 8
  %rows12 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %23, i32 0, i32 1
  %24 = load %struct.glyph_row*, %struct.glyph_row** %rows12, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.glyph_row* [ %add.ptr10, %cond.true ], [ %24, %cond.false ]
  %sub.ptr.lhs.cast = ptrtoint %struct.glyph_row* %14 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.glyph_row* %cond to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 256
  %conv = trunc i64 %sub.ptr.div to i32
  %25 = load i32*, i32** %y.addr, align 8
  store i32 %conv, i32* %25, align 4
  %26 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %mode_line_p13 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %26, i32 0, i32 22
  %27 = bitcast i40* %mode_line_p13 to i64*
  %bf.load14 = load i64, i64* %27, align 4
  %bf.lshr15 = lshr i64 %bf.load14, 20
  %bf.clear16 = and i64 %bf.lshr15, 1
  %bf.cast17 = trunc i64 %bf.clear16 to i1
  br i1 %bf.cast17, label %land.lhs.true, label %if.else.95

land.lhs.true:                                    ; preds = %cond.end
  %28 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %enabled_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %28, i32 0, i32 22
  %29 = bitcast i40* %enabled_p to i64*
  %bf.load19 = load i64, i64* %29, align 4
  %bf.lshr20 = lshr i64 %bf.load19, 10
  %bf.clear21 = and i64 %bf.lshr20, 1
  %bf.cast22 = trunc i64 %bf.clear21 to i1
  br i1 %bf.cast22, label %if.then.24, label %if.else.95

if.then.24:                                       ; preds = %land.lhs.true
  %30 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %glyphs = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %30, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs, i32 0, i64 1
  %31 = load %struct.glyph*, %struct.glyph** %arrayidx, align 8
  store %struct.glyph* %31, %struct.glyph** %glyph, align 8
  %32 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %33 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %used = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %33, i32 0, i32 1
  %arrayidx25 = getelementptr inbounds [4 x i16], [4 x i16]* %used, i32 0, i64 1
  %34 = load i16, i16* %arrayidx25, align 2
  %conv26 = sext i16 %34 to i32
  %idx.ext27 = sext i32 %conv26 to i64
  %add.ptr28 = getelementptr inbounds %struct.glyph, %struct.glyph* %32, i64 %idx.ext27
  store %struct.glyph* %add.ptr28, %struct.glyph** %end, align 8
  %35 = load i32*, i32** %x.addr, align 8
  %36 = load i32, i32* %35, align 4
  store i32 %36, i32* %x0, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.24
  %37 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %38 = load %struct.glyph*, %struct.glyph** %end, align 8
  %cmp29 = icmp ult %struct.glyph* %37, %38
  br i1 %cmp29, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %39 = load i32, i32* %x0, align 4
  %40 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %pixel_width = getelementptr inbounds %struct.glyph, %struct.glyph* %40, i32 0, i32 2
  %41 = load i16, i16* %pixel_width, align 2
  %conv31 = sext i16 %41 to i32
  %cmp32 = icmp sge i32 %39, %conv31
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %42 = phi i1 [ false, %for.cond ], [ %cmp32, %land.rhs ]
  br i1 %42, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %43 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %pixel_width34 = getelementptr inbounds %struct.glyph, %struct.glyph* %43, i32 0, i32 2
  %44 = load i16, i16* %pixel_width34, align 2
  %conv35 = sext i16 %44 to i32
  %45 = load i32, i32* %x0, align 4
  %sub36 = sub nsw i32 %45, %conv35
  store i32 %sub36, i32* %x0, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %46 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %incdec.ptr = getelementptr inbounds %struct.glyph, %struct.glyph* %46, i32 1
  store %struct.glyph* %incdec.ptr, %struct.glyph** %glyph, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %47 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %48 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %glyphs37 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %48, i32 0, i32 0
  %arrayidx38 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs37, i32 0, i64 1
  %49 = load %struct.glyph*, %struct.glyph** %arrayidx38, align 8
  %sub.ptr.lhs.cast39 = ptrtoint %struct.glyph* %47 to i64
  %sub.ptr.rhs.cast40 = ptrtoint %struct.glyph* %49 to i64
  %sub.ptr.sub41 = sub i64 %sub.ptr.lhs.cast39, %sub.ptr.rhs.cast40
  %sub.ptr.div42 = sdiv exact i64 %sub.ptr.sub41, 48
  %conv43 = trunc i64 %sub.ptr.div42 to i32
  %50 = load i32*, i32** %x.addr, align 8
  store i32 %conv43, i32* %50, align 4
  %51 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %52 = load %struct.glyph*, %struct.glyph** %end, align 8
  %cmp44 = icmp ult %struct.glyph* %51, %52
  br i1 %cmp44, label %if.then.46, label %if.else.89

if.then.46:                                       ; preds = %for.end
  %53 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %object47 = getelementptr inbounds %struct.glyph, %struct.glyph* %53, i32 0, i32 1
  %54 = load i64, i64* %object47, align 8
  store i64 %54, i64* %string, align 8
  %55 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %charpos48 = getelementptr inbounds %struct.glyph, %struct.glyph* %55, i32 0, i32 0
  %56 = load i64, i64* %charpos48, align 8
  %57 = load i64*, i64** %charpos.addr, align 8
  store i64 %56, i64* %57, align 8
  %58 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %pixel_width49 = getelementptr inbounds %struct.glyph, %struct.glyph* %58, i32 0, i32 2
  %59 = load i16, i16* %pixel_width49, align 2
  %conv50 = sext i16 %59 to i32
  %60 = load i32*, i32** %width.addr, align 8
  store i32 %conv50, i32* %60, align 4
  %61 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %ascent = getelementptr inbounds %struct.glyph, %struct.glyph* %61, i32 0, i32 3
  %62 = load i16, i16* %ascent, align 2
  %conv51 = sext i16 %62 to i32
  %63 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %descent = getelementptr inbounds %struct.glyph, %struct.glyph* %63, i32 0, i32 4
  %64 = load i16, i16* %descent, align 2
  %conv52 = sext i16 %64 to i32
  %add = add nsw i32 %conv51, %conv52
  %65 = load i32*, i32** %height.addr, align 8
  store i32 %add, i32* %65, align 4
  %66 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %type = getelementptr inbounds %struct.glyph, %struct.glyph* %66, i32 0, i32 6
  %67 = bitcast i24* %type to i32*
  %bf.load53 = load i32, i32* %67, align 8
  %bf.clear54 = and i32 %bf.load53, 7
  %cmp55 = icmp eq i32 %bf.clear54, 3
  br i1 %cmp55, label %if.then.57, label %if.end.88

if.then.57:                                       ; preds = %if.then.46
  %68 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %u = getelementptr inbounds %struct.glyph, %struct.glyph* %68, i32 0, i32 9
  %img_id = bitcast %union.anon.1* %u to i32*
  %69 = load i32, i32* %img_id, align 4
  %cmp58 = icmp sge i32 %69, 0
  br i1 %cmp58, label %land.lhs.true.60, label %cond.false.76

land.lhs.true.60:                                 ; preds = %if.then.57
  %70 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %u61 = getelementptr inbounds %struct.glyph, %struct.glyph* %70, i32 0, i32 9
  %img_id62 = bitcast %union.anon.1* %u61 to i32*
  %71 = load i32, i32* %img_id62, align 4
  %conv63 = sext i32 %71 to i64
  %72 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %72, i32 0, i32 1
  %73 = load i64, i64* %frame, align 8
  %sub64 = sub nsw i64 %73, 5
  %74 = inttoptr i64 %sub64 to i8*
  %75 = bitcast i8* %74 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %75, i32 0, i32 61
  %76 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %image_cache = getelementptr inbounds %struct.terminal, %struct.terminal* %76, i32 0, i32 11
  %77 = load %struct.image_cache*, %struct.image_cache** %image_cache, align 8
  %used65 = getelementptr inbounds %struct.image_cache, %struct.image_cache* %77, i32 0, i32 3
  %78 = load i64, i64* %used65, align 8
  %cmp66 = icmp slt i64 %conv63, %78
  br i1 %cmp66, label %cond.true.68, label %cond.false.76

cond.true.68:                                     ; preds = %land.lhs.true.60
  %79 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %u69 = getelementptr inbounds %struct.glyph, %struct.glyph* %79, i32 0, i32 9
  %img_id70 = bitcast %union.anon.1* %u69 to i32*
  %80 = load i32, i32* %img_id70, align 4
  %idxprom = sext i32 %80 to i64
  %81 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame71 = getelementptr inbounds %struct.window, %struct.window* %81, i32 0, i32 1
  %82 = load i64, i64* %frame71, align 8
  %sub72 = sub nsw i64 %82, 5
  %83 = inttoptr i64 %sub72 to i8*
  %84 = bitcast i8* %83 to %struct.frame*
  %terminal73 = getelementptr inbounds %struct.frame, %struct.frame* %84, i32 0, i32 61
  %85 = load %struct.terminal*, %struct.terminal** %terminal73, align 8
  %image_cache74 = getelementptr inbounds %struct.terminal, %struct.terminal* %85, i32 0, i32 11
  %86 = load %struct.image_cache*, %struct.image_cache** %image_cache74, align 8
  %images = getelementptr inbounds %struct.image_cache, %struct.image_cache* %86, i32 0, i32 1
  %87 = load %struct.image**, %struct.image*** %images, align 8
  %arrayidx75 = getelementptr inbounds %struct.image*, %struct.image** %87, i64 %idxprom
  %88 = load %struct.image*, %struct.image** %arrayidx75, align 8
  br label %cond.end.77

cond.false.76:                                    ; preds = %land.lhs.true.60, %if.then.57
  br label %cond.end.77

cond.end.77:                                      ; preds = %cond.false.76, %cond.true.68
  %cond78 = phi %struct.image* [ %88, %cond.true.68 ], [ null, %cond.false.76 ]
  store %struct.image* %cond78, %struct.image** %img, align 8
  %89 = load %struct.image*, %struct.image** %img, align 8
  %cmp79 = icmp ne %struct.image* %89, null
  br i1 %cmp79, label %if.then.81, label %if.end.82

if.then.81:                                       ; preds = %cond.end.77
  %90 = load %struct.image*, %struct.image** %img, align 8
  %spec = getelementptr inbounds %struct.image, %struct.image* %90, i32 0, i32 15
  %91 = load i64, i64* %spec, align 8
  %92 = load i64*, i64** %object.addr, align 8
  store i64 %91, i64* %92, align 8
  br label %if.end.82

if.end.82:                                        ; preds = %if.then.81, %cond.end.77
  %93 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %ascent83 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %93, i32 0, i32 6
  %94 = load i32, i32* %ascent83, align 4
  %95 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %ascent84 = getelementptr inbounds %struct.glyph, %struct.glyph* %95, i32 0, i32 3
  %96 = load i16, i16* %ascent84, align 2
  %conv85 = sext i16 %96 to i32
  %sub86 = sub nsw i32 %94, %conv85
  %97 = load i32, i32* %y0, align 4
  %sub87 = sub nsw i32 %97, %sub86
  store i32 %sub87, i32* %y0, align 4
  br label %if.end.88

if.end.88:                                        ; preds = %if.end.82, %if.then.46
  br label %if.end.94

if.else.89:                                       ; preds = %for.end
  %98 = load i32, i32* %x0, align 4
  %99 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame90 = getelementptr inbounds %struct.window, %struct.window* %99, i32 0, i32 1
  %100 = load i64, i64* %frame90, align 8
  %sub91 = sub nsw i64 %100, 5
  %101 = inttoptr i64 %sub91 to i8*
  %102 = bitcast i8* %101 to %struct.frame*
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %102, i32 0, i32 59
  %103 = load i32, i32* %column_width, align 4
  %div = sdiv i32 %98, %103
  %104 = load i32*, i32** %x.addr, align 8
  %105 = load i32, i32* %104, align 4
  %add92 = add nsw i32 %105, %div
  store i32 %add92, i32* %104, align 4
  %106 = load i32*, i32** %width.addr, align 8
  store i32 0, i32* %106, align 4
  %107 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %height93 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %107, i32 0, i32 7
  %108 = load i32, i32* %height93, align 4
  %109 = load i32*, i32** %height.addr, align 8
  store i32 %108, i32* %109, align 4
  br label %if.end.94

if.end.94:                                        ; preds = %if.else.89, %if.end.88
  br label %if.end.96

if.else.95:                                       ; preds = %land.lhs.true, %cond.end
  %110 = load i32*, i32** %x.addr, align 8
  store i32 0, i32* %110, align 4
  store i32 0, i32* %x0, align 4
  %111 = load i32*, i32** %height.addr, align 8
  store i32 0, i32* %111, align 4
  %112 = load i32*, i32** %width.addr, align 8
  store i32 0, i32* %112, align 4
  br label %if.end.96

if.end.96:                                        ; preds = %if.else.95, %if.end.94
  %113 = load i32, i32* %x0, align 4
  %114 = load i32*, i32** %dx.addr, align 8
  store i32 %113, i32* %114, align 4
  %115 = load i32, i32* %y0, align 4
  %116 = load i32*, i32** %dy.addr, align 8
  store i32 %115, i32* %116, align 4
  %117 = load i64, i64* %string, align 8
  ret i64 %117
}

; Function Attrs: nounwind uwtable
define i64 @marginal_area_string(%struct.window* %w, i32 %part, i32* %x, i32* %y, i64* %charpos, i64* %object, i32* %dx, i32* %dy, i32* %width, i32* %height) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %part.addr = alloca i32, align 4
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %charpos.addr = alloca i64*, align 8
  %object.addr = alloca i64*, align 8
  %dx.addr = alloca i32*, align 8
  %dy.addr = alloca i32*, align 8
  %width.addr = alloca i32*, align 8
  %height.addr = alloca i32*, align 8
  %row = alloca %struct.glyph_row*, align 8
  %glyph = alloca %struct.glyph*, align 8
  %end = alloca %struct.glyph*, align 8
  %x0 = alloca i32, align 4
  %y0 = alloca i32, align 4
  %i = alloca i32, align 4
  %wy = alloca i32, align 4
  %area = alloca i32, align 4
  %string = alloca i64, align 8
  %img = alloca %struct.image*, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i32 %part, i32* %part.addr, align 4
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i64* %charpos, i64** %charpos.addr, align 8
  store i64* %object, i64** %object.addr, align 8
  store i32* %dx, i32** %dx.addr, align 8
  store i32* %dy, i32** %dy.addr, align 8
  store i32* %width, i32** %width.addr, align 8
  store i32* %height, i32** %height.addr, align 8
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 24
  %1 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %1, i32 0, i32 1
  %2 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  store %struct.glyph_row* %2, %struct.glyph_row** %row, align 8
  %3 = load i32*, i32** %y.addr, align 8
  %4 = load i32, i32* %3, align 4
  store i32 %4, i32* %wy, align 4
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %string, align 8
  %5 = load i32, i32* %part.addr, align 4
  %cmp = icmp eq i32 %5, 7
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %area, align 4
  br label %if.end.4

if.else:                                          ; preds = %entry
  %6 = load i32, i32* %part.addr, align 4
  %cmp1 = icmp eq i32 %6, 8
  br i1 %cmp1, label %if.then.2, label %if.else.3

if.then.2:                                        ; preds = %if.else
  store i32 2, i32* %area, align 4
  br label %if.end

if.else.3:                                        ; preds = %if.else
  call void @emacs_abort() #8
  unreachable

if.end:                                           ; preds = %if.then.2
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.4
  %7 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %enabled_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %7, i32 0, i32 22
  %8 = bitcast i40* %enabled_p to i64*
  %bf.load = load i64, i64* %8, align 4
  %bf.lshr = lshr i64 %bf.load, 10
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %9 = load i32, i32* %i, align 4
  %10 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix5 = getelementptr inbounds %struct.window, %struct.window* %10, i32 0, i32 24
  %11 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix5, align 8
  %nrows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %11, i32 0, i32 3
  %12 = load i32, i32* %nrows, align 4
  %cmp6 = icmp slt i32 %9, %12
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %13 = phi i1 [ false, %for.cond ], [ %cmp6, %land.rhs ]
  br i1 %13, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %14 = load i32, i32* %wy, align 4
  %15 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %y7 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %15, i32 0, i32 4
  %16 = load i32, i32* %y7, align 4
  %cmp8 = icmp sge i32 %14, %16
  br i1 %cmp8, label %land.lhs.true, label %if.end.13

land.lhs.true:                                    ; preds = %for.body
  %17 = load i32, i32* %wy, align 4
  %18 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %y9 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %18, i32 0, i32 4
  %19 = load i32, i32* %y9, align 4
  %20 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %height10 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %20, i32 0, i32 7
  %21 = load i32, i32* %height10, align 4
  %add = add nsw i32 %19, %21
  %cmp11 = icmp slt i32 %17, %add
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %land.lhs.true
  br label %for.end

if.end.13:                                        ; preds = %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.13
  %22 = load i32, i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  %23 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %incdec.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %23, i32 1
  store %struct.glyph_row* %incdec.ptr, %struct.glyph_row** %row, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.12, %land.end
  %24 = load i32*, i32** %y.addr, align 8
  %25 = load i32, i32* %24, align 4
  %26 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %y14 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %26, i32 0, i32 4
  %27 = load i32, i32* %y14, align 4
  %sub = sub nsw i32 %25, %27
  store i32 %sub, i32* %y0, align 4
  %28 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %29 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix15 = getelementptr inbounds %struct.window, %struct.window* %29, i32 0, i32 24
  %30 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix15, align 8
  %rows16 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %30, i32 0, i32 1
  %31 = load %struct.glyph_row*, %struct.glyph_row** %rows16, align 8
  %mode_line_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %31, i32 0, i32 22
  %32 = bitcast i40* %mode_line_p to i64*
  %bf.load17 = load i64, i64* %32, align 4
  %bf.lshr18 = lshr i64 %bf.load17, 20
  %bf.clear19 = and i64 %bf.lshr18, 1
  %bf.cast20 = trunc i64 %bf.clear19 to i1
  br i1 %bf.cast20, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.end
  %33 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix21 = getelementptr inbounds %struct.window, %struct.window* %33, i32 0, i32 24
  %34 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix21, align 8
  %rows22 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %34, i32 0, i32 1
  %35 = load %struct.glyph_row*, %struct.glyph_row** %rows22, align 8
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %35, i64 1
  br label %cond.end

cond.false:                                       ; preds = %for.end
  %36 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix23 = getelementptr inbounds %struct.window, %struct.window* %36, i32 0, i32 24
  %37 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix23, align 8
  %rows24 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %37, i32 0, i32 1
  %38 = load %struct.glyph_row*, %struct.glyph_row** %rows24, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.glyph_row* [ %add.ptr, %cond.true ], [ %38, %cond.false ]
  %sub.ptr.lhs.cast = ptrtoint %struct.glyph_row* %28 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.glyph_row* %cond to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 256
  %conv = trunc i64 %sub.ptr.div to i32
  %39 = load i32*, i32** %y.addr, align 8
  store i32 %conv, i32* %39, align 4
  %40 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %enabled_p25 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %40, i32 0, i32 22
  %41 = bitcast i40* %enabled_p25 to i64*
  %bf.load26 = load i64, i64* %41, align 4
  %bf.lshr27 = lshr i64 %bf.load26, 10
  %bf.clear28 = and i64 %bf.lshr27, 1
  %bf.cast29 = trunc i64 %bf.clear28 to i1
  br i1 %bf.cast29, label %if.then.30, label %if.else.195

if.then.30:                                       ; preds = %cond.end
  %42 = load i32, i32* %area, align 4
  %cmp31 = icmp eq i32 %42, 2
  br i1 %cmp31, label %if.then.33, label %if.else.78

if.then.33:                                       ; preds = %if.then.30
  %43 = load %struct.window*, %struct.window** %w.addr, align 8
  %fringes_outside_margins = getelementptr inbounds %struct.window, %struct.window* %43, i32 0, i32 67
  %bf.load34 = load i16, i16* %fringes_outside_margins, align 4
  %bf.lshr35 = lshr i16 %bf.load34, 12
  %bf.clear36 = and i16 %bf.lshr35, 1
  %bf.cast37 = trunc i16 %bf.clear36 to i1
  br i1 %bf.cast37, label %cond.true.39, label %cond.false.49

cond.true.39:                                     ; preds = %if.then.33
  %44 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_fringe_width = getelementptr inbounds %struct.window, %struct.window* %44, i32 0, i32 57
  %45 = load i32, i32* %left_fringe_width, align 4
  %cmp40 = icmp sge i32 %45, 0
  br i1 %cmp40, label %cond.true.42, label %cond.false.44

cond.true.42:                                     ; preds = %cond.true.39
  %46 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_fringe_width43 = getelementptr inbounds %struct.window, %struct.window* %46, i32 0, i32 57
  %47 = load i32, i32* %left_fringe_width43, align 4
  br label %cond.end.47

cond.false.44:                                    ; preds = %cond.true.39
  %48 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %48, i32 0, i32 1
  %49 = load i64, i64* %frame, align 8
  %sub45 = sub nsw i64 %49, 5
  %50 = inttoptr i64 %sub45 to i8*
  %51 = bitcast i8* %50 to %struct.frame*
  %left_fringe_width46 = getelementptr inbounds %struct.frame, %struct.frame* %51, i32 0, i32 54
  %52 = load i32, i32* %left_fringe_width46, align 4
  br label %cond.end.47

cond.end.47:                                      ; preds = %cond.false.44, %cond.true.42
  %cond48 = phi i32 [ %47, %cond.true.42 ], [ %52, %cond.false.44 ]
  br label %cond.end.72

cond.false.49:                                    ; preds = %if.then.33
  %53 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_fringe_width50 = getelementptr inbounds %struct.window, %struct.window* %53, i32 0, i32 57
  %54 = load i32, i32* %left_fringe_width50, align 4
  %cmp51 = icmp sge i32 %54, 0
  br i1 %cmp51, label %cond.true.53, label %cond.false.55

cond.true.53:                                     ; preds = %cond.false.49
  %55 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_fringe_width54 = getelementptr inbounds %struct.window, %struct.window* %55, i32 0, i32 57
  %56 = load i32, i32* %left_fringe_width54, align 4
  br label %cond.end.59

cond.false.55:                                    ; preds = %cond.false.49
  %57 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame56 = getelementptr inbounds %struct.window, %struct.window* %57, i32 0, i32 1
  %58 = load i64, i64* %frame56, align 8
  %sub57 = sub nsw i64 %58, 5
  %59 = inttoptr i64 %sub57 to i8*
  %60 = bitcast i8* %59 to %struct.frame*
  %left_fringe_width58 = getelementptr inbounds %struct.frame, %struct.frame* %60, i32 0, i32 54
  %61 = load i32, i32* %left_fringe_width58, align 4
  br label %cond.end.59

cond.end.59:                                      ; preds = %cond.false.55, %cond.true.53
  %cond60 = phi i32 [ %56, %cond.true.53 ], [ %61, %cond.false.55 ]
  %62 = load %struct.window*, %struct.window** %w.addr, align 8
  %right_fringe_width = getelementptr inbounds %struct.window, %struct.window* %62, i32 0, i32 58
  %63 = load i32, i32* %right_fringe_width, align 4
  %cmp61 = icmp sge i32 %63, 0
  br i1 %cmp61, label %cond.true.63, label %cond.false.65

cond.true.63:                                     ; preds = %cond.end.59
  %64 = load %struct.window*, %struct.window** %w.addr, align 8
  %right_fringe_width64 = getelementptr inbounds %struct.window, %struct.window* %64, i32 0, i32 58
  %65 = load i32, i32* %right_fringe_width64, align 4
  br label %cond.end.69

cond.false.65:                                    ; preds = %cond.end.59
  %66 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame66 = getelementptr inbounds %struct.window, %struct.window* %66, i32 0, i32 1
  %67 = load i64, i64* %frame66, align 8
  %sub67 = sub nsw i64 %67, 5
  %68 = inttoptr i64 %sub67 to i8*
  %69 = bitcast i8* %68 to %struct.frame*
  %right_fringe_width68 = getelementptr inbounds %struct.frame, %struct.frame* %69, i32 0, i32 55
  %70 = load i32, i32* %right_fringe_width68, align 4
  br label %cond.end.69

cond.end.69:                                      ; preds = %cond.false.65, %cond.true.63
  %cond70 = phi i32 [ %65, %cond.true.63 ], [ %70, %cond.false.65 ]
  %add71 = add nsw i32 %cond60, %cond70
  br label %cond.end.72

cond.end.72:                                      ; preds = %cond.end.69, %cond.end.47
  %cond73 = phi i32 [ %cond48, %cond.end.47 ], [ %add71, %cond.end.69 ]
  %71 = load %struct.window*, %struct.window** %w.addr, align 8
  %call74 = call i32 @window_box_width(%struct.window* %71, i32 0)
  %add75 = add nsw i32 %cond73, %call74
  %72 = load %struct.window*, %struct.window** %w.addr, align 8
  %call76 = call i32 @window_box_width(%struct.window* %72, i32 1)
  %add77 = add nsw i32 %add75, %call76
  store i32 %add77, i32* %x0, align 4
  br label %if.end.100

if.else.78:                                       ; preds = %if.then.30
  %73 = load %struct.window*, %struct.window** %w.addr, align 8
  %fringes_outside_margins79 = getelementptr inbounds %struct.window, %struct.window* %73, i32 0, i32 67
  %bf.load80 = load i16, i16* %fringes_outside_margins79, align 4
  %bf.lshr81 = lshr i16 %bf.load80, 12
  %bf.clear82 = and i16 %bf.lshr81, 1
  %bf.cast83 = trunc i16 %bf.clear82 to i1
  br i1 %bf.cast83, label %cond.true.85, label %cond.false.97

cond.true.85:                                     ; preds = %if.else.78
  %74 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_fringe_width86 = getelementptr inbounds %struct.window, %struct.window* %74, i32 0, i32 57
  %75 = load i32, i32* %left_fringe_width86, align 4
  %cmp87 = icmp sge i32 %75, 0
  br i1 %cmp87, label %cond.true.89, label %cond.false.91

cond.true.89:                                     ; preds = %cond.true.85
  %76 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_fringe_width90 = getelementptr inbounds %struct.window, %struct.window* %76, i32 0, i32 57
  %77 = load i32, i32* %left_fringe_width90, align 4
  br label %cond.end.95

cond.false.91:                                    ; preds = %cond.true.85
  %78 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame92 = getelementptr inbounds %struct.window, %struct.window* %78, i32 0, i32 1
  %79 = load i64, i64* %frame92, align 8
  %sub93 = sub nsw i64 %79, 5
  %80 = inttoptr i64 %sub93 to i8*
  %81 = bitcast i8* %80 to %struct.frame*
  %left_fringe_width94 = getelementptr inbounds %struct.frame, %struct.frame* %81, i32 0, i32 54
  %82 = load i32, i32* %left_fringe_width94, align 4
  br label %cond.end.95

cond.end.95:                                      ; preds = %cond.false.91, %cond.true.89
  %cond96 = phi i32 [ %77, %cond.true.89 ], [ %82, %cond.false.91 ]
  br label %cond.end.98

cond.false.97:                                    ; preds = %if.else.78
  br label %cond.end.98

cond.end.98:                                      ; preds = %cond.false.97, %cond.end.95
  %cond99 = phi i32 [ %cond96, %cond.end.95 ], [ 0, %cond.false.97 ]
  store i32 %cond99, i32* %x0, align 4
  br label %if.end.100

if.end.100:                                       ; preds = %cond.end.98, %cond.end.72
  %83 = load i32, i32* %area, align 4
  %idxprom = sext i32 %83 to i64
  %84 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %glyphs = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %84, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs, i32 0, i64 %idxprom
  %85 = load %struct.glyph*, %struct.glyph** %arrayidx, align 8
  store %struct.glyph* %85, %struct.glyph** %glyph, align 8
  %86 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %87 = load i32, i32* %area, align 4
  %idxprom101 = sext i32 %87 to i64
  %88 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %used = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %88, i32 0, i32 1
  %arrayidx102 = getelementptr inbounds [4 x i16], [4 x i16]* %used, i32 0, i64 %idxprom101
  %89 = load i16, i16* %arrayidx102, align 2
  %conv103 = sext i16 %89 to i32
  %idx.ext = sext i32 %conv103 to i64
  %add.ptr104 = getelementptr inbounds %struct.glyph, %struct.glyph* %86, i64 %idx.ext
  store %struct.glyph* %add.ptr104, %struct.glyph** %end, align 8
  %90 = load i32*, i32** %x.addr, align 8
  %91 = load i32, i32* %90, align 4
  %92 = load i32, i32* %x0, align 4
  %sub105 = sub nsw i32 %91, %92
  store i32 %sub105, i32* %x0, align 4
  br label %for.cond.106

for.cond.106:                                     ; preds = %for.inc.118, %if.end.100
  %93 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %94 = load %struct.glyph*, %struct.glyph** %end, align 8
  %cmp107 = icmp ult %struct.glyph* %93, %94
  br i1 %cmp107, label %land.rhs.109, label %land.end.113

land.rhs.109:                                     ; preds = %for.cond.106
  %95 = load i32, i32* %x0, align 4
  %96 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %pixel_width = getelementptr inbounds %struct.glyph, %struct.glyph* %96, i32 0, i32 2
  %97 = load i16, i16* %pixel_width, align 2
  %conv110 = sext i16 %97 to i32
  %cmp111 = icmp sge i32 %95, %conv110
  br label %land.end.113

land.end.113:                                     ; preds = %land.rhs.109, %for.cond.106
  %98 = phi i1 [ false, %for.cond.106 ], [ %cmp111, %land.rhs.109 ]
  br i1 %98, label %for.body.114, label %for.end.120

for.body.114:                                     ; preds = %land.end.113
  %99 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %pixel_width115 = getelementptr inbounds %struct.glyph, %struct.glyph* %99, i32 0, i32 2
  %100 = load i16, i16* %pixel_width115, align 2
  %conv116 = sext i16 %100 to i32
  %101 = load i32, i32* %x0, align 4
  %sub117 = sub nsw i32 %101, %conv116
  store i32 %sub117, i32* %x0, align 4
  br label %for.inc.118

for.inc.118:                                      ; preds = %for.body.114
  %102 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %incdec.ptr119 = getelementptr inbounds %struct.glyph, %struct.glyph* %102, i32 1
  store %struct.glyph* %incdec.ptr119, %struct.glyph** %glyph, align 8
  br label %for.cond.106

for.end.120:                                      ; preds = %land.end.113
  %103 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %104 = load i32, i32* %area, align 4
  %idxprom121 = sext i32 %104 to i64
  %105 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %glyphs122 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %105, i32 0, i32 0
  %arrayidx123 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs122, i32 0, i64 %idxprom121
  %106 = load %struct.glyph*, %struct.glyph** %arrayidx123, align 8
  %sub.ptr.lhs.cast124 = ptrtoint %struct.glyph* %103 to i64
  %sub.ptr.rhs.cast125 = ptrtoint %struct.glyph* %106 to i64
  %sub.ptr.sub126 = sub i64 %sub.ptr.lhs.cast124, %sub.ptr.rhs.cast125
  %sub.ptr.div127 = sdiv exact i64 %sub.ptr.sub126, 48
  %conv128 = trunc i64 %sub.ptr.div127 to i32
  %107 = load i32*, i32** %x.addr, align 8
  store i32 %conv128, i32* %107, align 4
  %108 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %109 = load %struct.glyph*, %struct.glyph** %end, align 8
  %cmp129 = icmp ult %struct.glyph* %108, %109
  br i1 %cmp129, label %if.then.131, label %if.else.189

if.then.131:                                      ; preds = %for.end.120
  %110 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %object132 = getelementptr inbounds %struct.glyph, %struct.glyph* %110, i32 0, i32 1
  %111 = load i64, i64* %object132, align 8
  store i64 %111, i64* %string, align 8
  %112 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %charpos133 = getelementptr inbounds %struct.glyph, %struct.glyph* %112, i32 0, i32 0
  %113 = load i64, i64* %charpos133, align 8
  %114 = load i64*, i64** %charpos.addr, align 8
  store i64 %113, i64* %114, align 8
  %115 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %pixel_width134 = getelementptr inbounds %struct.glyph, %struct.glyph* %115, i32 0, i32 2
  %116 = load i16, i16* %pixel_width134, align 2
  %conv135 = sext i16 %116 to i32
  %117 = load i32*, i32** %width.addr, align 8
  store i32 %conv135, i32* %117, align 4
  %118 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %ascent = getelementptr inbounds %struct.glyph, %struct.glyph* %118, i32 0, i32 3
  %119 = load i16, i16* %ascent, align 2
  %conv136 = sext i16 %119 to i32
  %120 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %descent = getelementptr inbounds %struct.glyph, %struct.glyph* %120, i32 0, i32 4
  %121 = load i16, i16* %descent, align 2
  %conv137 = sext i16 %121 to i32
  %add138 = add nsw i32 %conv136, %conv137
  %122 = load i32*, i32** %height.addr, align 8
  store i32 %add138, i32* %122, align 4
  %123 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %type = getelementptr inbounds %struct.glyph, %struct.glyph* %123, i32 0, i32 6
  %124 = bitcast i24* %type to i32*
  %bf.load139 = load i32, i32* %124, align 8
  %bf.clear140 = and i32 %bf.load139, 7
  %cmp141 = icmp eq i32 %bf.clear140, 3
  br i1 %cmp141, label %if.then.143, label %if.end.188

if.then.143:                                      ; preds = %if.then.131
  %125 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %u = getelementptr inbounds %struct.glyph, %struct.glyph* %125, i32 0, i32 9
  %img_id = bitcast %union.anon.1* %u to i32*
  %126 = load i32, i32* %img_id, align 4
  %cmp144 = icmp sge i32 %126, 0
  br i1 %cmp144, label %land.lhs.true.146, label %cond.false.164

land.lhs.true.146:                                ; preds = %if.then.143
  %127 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %u147 = getelementptr inbounds %struct.glyph, %struct.glyph* %127, i32 0, i32 9
  %img_id148 = bitcast %union.anon.1* %u147 to i32*
  %128 = load i32, i32* %img_id148, align 4
  %conv149 = sext i32 %128 to i64
  %129 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame150 = getelementptr inbounds %struct.window, %struct.window* %129, i32 0, i32 1
  %130 = load i64, i64* %frame150, align 8
  %sub151 = sub nsw i64 %130, 5
  %131 = inttoptr i64 %sub151 to i8*
  %132 = bitcast i8* %131 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %132, i32 0, i32 61
  %133 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %image_cache = getelementptr inbounds %struct.terminal, %struct.terminal* %133, i32 0, i32 11
  %134 = load %struct.image_cache*, %struct.image_cache** %image_cache, align 8
  %used152 = getelementptr inbounds %struct.image_cache, %struct.image_cache* %134, i32 0, i32 3
  %135 = load i64, i64* %used152, align 8
  %cmp153 = icmp slt i64 %conv149, %135
  br i1 %cmp153, label %cond.true.155, label %cond.false.164

cond.true.155:                                    ; preds = %land.lhs.true.146
  %136 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %u156 = getelementptr inbounds %struct.glyph, %struct.glyph* %136, i32 0, i32 9
  %img_id157 = bitcast %union.anon.1* %u156 to i32*
  %137 = load i32, i32* %img_id157, align 4
  %idxprom158 = sext i32 %137 to i64
  %138 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame159 = getelementptr inbounds %struct.window, %struct.window* %138, i32 0, i32 1
  %139 = load i64, i64* %frame159, align 8
  %sub160 = sub nsw i64 %139, 5
  %140 = inttoptr i64 %sub160 to i8*
  %141 = bitcast i8* %140 to %struct.frame*
  %terminal161 = getelementptr inbounds %struct.frame, %struct.frame* %141, i32 0, i32 61
  %142 = load %struct.terminal*, %struct.terminal** %terminal161, align 8
  %image_cache162 = getelementptr inbounds %struct.terminal, %struct.terminal* %142, i32 0, i32 11
  %143 = load %struct.image_cache*, %struct.image_cache** %image_cache162, align 8
  %images = getelementptr inbounds %struct.image_cache, %struct.image_cache* %143, i32 0, i32 1
  %144 = load %struct.image**, %struct.image*** %images, align 8
  %arrayidx163 = getelementptr inbounds %struct.image*, %struct.image** %144, i64 %idxprom158
  %145 = load %struct.image*, %struct.image** %arrayidx163, align 8
  br label %cond.end.165

cond.false.164:                                   ; preds = %land.lhs.true.146, %if.then.143
  br label %cond.end.165

cond.end.165:                                     ; preds = %cond.false.164, %cond.true.155
  %cond166 = phi %struct.image* [ %145, %cond.true.155 ], [ null, %cond.false.164 ]
  store %struct.image* %cond166, %struct.image** %img, align 8
  %146 = load %struct.image*, %struct.image** %img, align 8
  %cmp167 = icmp ne %struct.image* %146, null
  br i1 %cmp167, label %if.then.169, label %if.end.170

if.then.169:                                      ; preds = %cond.end.165
  %147 = load %struct.image*, %struct.image** %img, align 8
  %spec = getelementptr inbounds %struct.image, %struct.image* %147, i32 0, i32 15
  %148 = load i64, i64* %spec, align 8
  %149 = load i64*, i64** %object.addr, align 8
  store i64 %148, i64* %149, align 8
  br label %if.end.170

if.end.170:                                       ; preds = %if.then.169, %cond.end.165
  %150 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %ascent171 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %150, i32 0, i32 6
  %151 = load i32, i32* %ascent171, align 4
  %152 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %ascent172 = getelementptr inbounds %struct.glyph, %struct.glyph* %152, i32 0, i32 3
  %153 = load i16, i16* %ascent172, align 2
  %conv173 = sext i16 %153 to i32
  %sub174 = sub nsw i32 %151, %conv173
  %154 = load i32, i32* %y0, align 4
  %sub175 = sub nsw i32 %154, %sub174
  store i32 %sub175, i32* %y0, align 4
  %155 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %slice = getelementptr inbounds %struct.glyph, %struct.glyph* %155, i32 0, i32 8
  %img176 = bitcast %union.anon* %slice to %struct.glyph_slice*
  %156 = bitcast %struct.glyph_slice* %img176 to i64*
  %bf.load177 = load i64, i64* %156, align 4
  %bf.clear178 = and i64 %bf.load177, 65535
  %bf.cast179 = trunc i64 %bf.clear178 to i32
  %157 = load i32, i32* %x0, align 4
  %add180 = add nsw i32 %157, %bf.cast179
  store i32 %add180, i32* %x0, align 4
  %158 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %slice181 = getelementptr inbounds %struct.glyph, %struct.glyph* %158, i32 0, i32 8
  %img182 = bitcast %union.anon* %slice181 to %struct.glyph_slice*
  %159 = bitcast %struct.glyph_slice* %img182 to i64*
  %bf.load183 = load i64, i64* %159, align 4
  %bf.lshr184 = lshr i64 %bf.load183, 16
  %bf.clear185 = and i64 %bf.lshr184, 65535
  %bf.cast186 = trunc i64 %bf.clear185 to i32
  %160 = load i32, i32* %y0, align 4
  %add187 = add nsw i32 %160, %bf.cast186
  store i32 %add187, i32* %y0, align 4
  br label %if.end.188

if.end.188:                                       ; preds = %if.end.170, %if.then.131
  br label %if.end.194

if.else.189:                                      ; preds = %for.end.120
  %161 = load i32, i32* %x0, align 4
  %162 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame190 = getelementptr inbounds %struct.window, %struct.window* %162, i32 0, i32 1
  %163 = load i64, i64* %frame190, align 8
  %sub191 = sub nsw i64 %163, 5
  %164 = inttoptr i64 %sub191 to i8*
  %165 = bitcast i8* %164 to %struct.frame*
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %165, i32 0, i32 59
  %166 = load i32, i32* %column_width, align 4
  %div = sdiv i32 %161, %166
  %167 = load i32*, i32** %x.addr, align 8
  %168 = load i32, i32* %167, align 4
  %add192 = add nsw i32 %168, %div
  store i32 %add192, i32* %167, align 4
  %169 = load i32*, i32** %width.addr, align 8
  store i32 0, i32* %169, align 4
  %170 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %height193 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %170, i32 0, i32 7
  %171 = load i32, i32* %height193, align 4
  %172 = load i32*, i32** %height.addr, align 8
  store i32 %171, i32* %172, align 4
  br label %if.end.194

if.end.194:                                       ; preds = %if.else.189, %if.end.188
  br label %if.end.196

if.else.195:                                      ; preds = %cond.end
  store i32 0, i32* %x0, align 4
  %173 = load i32*, i32** %x.addr, align 8
  store i32 0, i32* %173, align 4
  %174 = load i32*, i32** %height.addr, align 8
  store i32 0, i32* %174, align 4
  %175 = load i32*, i32** %width.addr, align 8
  store i32 0, i32* %175, align 4
  br label %if.end.196

if.end.196:                                       ; preds = %if.else.195, %if.end.194
  %176 = load i32, i32* %x0, align 4
  %177 = load i32*, i32** %dx.addr, align 8
  store i32 %176, i32* %177, align 4
  %178 = load i32, i32* %y0, align 4
  %179 = load i32*, i32** %dy.addr, align 8
  store i32 %178, i32* %179, align 4
  %180 = load i64, i64* %string, align 8
  ret i64 %180
}

; Function Attrs: nounwind uwtable
define void @do_pending_window_change(i1 zeroext %safe) #0 {
entry:
  %safe.addr = alloca i8, align 1
  %tail = alloca i64, align 8
  %frame = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %frombool = zext i1 %safe to i8
  store i8 %frombool, i8* %safe.addr, align 1
  %0 = load i8, i8* @redisplaying_p, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i8, i8* %safe.addr, align 1
  %tobool1 = trunc i8 %1 to i1
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  br label %while.end

if.end:                                           ; preds = %land.lhs.true, %entry
  br label %while.cond

while.cond:                                       ; preds = %for.end, %if.end
  %2 = load i8, i8* @delayed_size_change, align 1
  %tobool2 = trunc i8 %2 to i1
  br i1 %tobool2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i8 0, i8* @delayed_size_change, align 1
  %3 = load i64, i64* @Vframe_list, align 8
  store i64 %3, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %4 = load i64, i64* %tail, align 8
  %and = and i64 %4, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %5 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %5, 3
  %6 = inttoptr i64 %sub to i8*
  %7 = bitcast i8* %6 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %7, i32 0, i32 0
  %8 = load i64, i64* %car, align 8
  store i64 %8, i64* %frame, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ true, %land.rhs ]
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %10 = load i64, i64* %frame, align 8
  %sub4 = sub nsw i64 %10, 5
  %11 = inttoptr i64 %sub4 to i8*
  %12 = bitcast i8* %11 to %struct.frame*
  store %struct.frame* %12, %struct.frame** %f, align 8
  %13 = load %struct.frame*, %struct.frame** %f, align 8
  %new_height = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 43
  %14 = load i32, i32* %new_height, align 4
  %cmp5 = icmp ne i32 %14, 0
  br i1 %cmp5, label %if.then.9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %15 = load %struct.frame*, %struct.frame** %f, align 8
  %new_width = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 42
  %16 = load i32, i32* %new_width, align 4
  %cmp7 = icmp ne i32 %16, 0
  br i1 %cmp7, label %if.then.9, label %if.end.13

if.then.9:                                        ; preds = %lor.lhs.false, %for.body
  %17 = load %struct.frame*, %struct.frame** %f, align 8
  %18 = load %struct.frame*, %struct.frame** %f, align 8
  %new_width10 = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 42
  %19 = load i32, i32* %new_width10, align 4
  %20 = load %struct.frame*, %struct.frame** %f, align 8
  %new_height11 = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 43
  %21 = load i32, i32* %new_height11, align 4
  %22 = load i8, i8* %safe.addr, align 1
  %tobool12 = trunc i8 %22 to i1
  %23 = load %struct.frame*, %struct.frame** %f, align 8
  %new_pixelwise = getelementptr inbounds %struct.frame, %struct.frame* %23, i32 0, i32 26
  %24 = bitcast i48* %new_pixelwise to i64*
  %bf.load = load i64, i64* %24, align 8
  %bf.lshr = lshr i64 %bf.load, 33
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  call void @change_frame_size(%struct.frame* %17, i32 %19, i32 %21, i1 zeroext false, i1 zeroext false, i1 zeroext %tobool12, i1 zeroext %bf.cast)
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.9, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end.13
  %25 = load i64, i64* %tail, align 8
  %sub14 = sub nsw i64 %25, 3
  %26 = inttoptr i64 %sub14 to i8*
  %27 = bitcast i8* %26 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %27, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %28 = load i64, i64* %cdr, align 8
  store i64 %28, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @change_frame_size(%struct.frame* %f, i32 %new_width, i32 %new_height, i1 zeroext %pretend, i1 zeroext %delay, i1 zeroext %safe, i1 zeroext %pixelwise) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %new_width.addr = alloca i32, align 4
  %new_height.addr = alloca i32, align 4
  %pretend.addr = alloca i8, align 1
  %delay.addr = alloca i8, align 1
  %safe.addr = alloca i8, align 1
  %pixelwise.addr = alloca i8, align 1
  %tail = alloca i64, align 8
  %frame = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %new_width, i32* %new_width.addr, align 4
  store i32 %new_height, i32* %new_height.addr, align 4
  %frombool = zext i1 %pretend to i8
  store i8 %frombool, i8* %pretend.addr, align 1
  %frombool1 = zext i1 %delay to i8
  store i8 %frombool1, i8* %delay.addr, align 1
  %frombool2 = zext i1 %safe to i8
  store i8 %frombool2, i8* %safe.addr, align 1
  %frombool3 = zext i1 %pixelwise to i8
  store i8 %frombool3, i8* %pixelwise.addr, align 1
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1 = load i32, i32* %new_width.addr, align 4
  %2 = load i32, i32* %new_height.addr, align 4
  %3 = load i8, i8* %pretend.addr, align 1
  %tobool = trunc i8 %3 to i1
  %4 = load i8, i8* %delay.addr, align 1
  %tobool4 = trunc i8 %4 to i1
  %5 = load i8, i8* %safe.addr, align 1
  %tobool5 = trunc i8 %5 to i1
  %6 = load i8, i8* %pixelwise.addr, align 1
  %tobool6 = trunc i8 %6 to i1
  call void @change_frame_size_1(%struct.frame* %0, i32 %1, i32 %2, i1 zeroext %tobool, i1 zeroext %tobool4, i1 zeroext %tobool5, i1 zeroext %tobool6)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @change_frame_size_1(%struct.frame* %f, i32 %new_width, i32 %new_height, i1 zeroext %pretend, i1 zeroext %delay, i1 zeroext %safe, i1 zeroext %pixelwise) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %new_width.addr = alloca i32, align 4
  %new_height.addr = alloca i32, align 4
  %pretend.addr = alloca i8, align 1
  %delay.addr = alloca i8, align 1
  %safe.addr = alloca i8, align 1
  %pixelwise.addr = alloca i8, align 1
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %new_width, i32* %new_width.addr, align 4
  store i32 %new_height, i32* %new_height.addr, align 4
  %frombool = zext i1 %pretend to i8
  store i8 %frombool, i8* %pretend.addr, align 1
  %frombool1 = zext i1 %delay to i8
  store i8 %frombool1, i8* %delay.addr, align 1
  %frombool2 = zext i1 %safe to i8
  store i8 %frombool2, i8* %safe.addr, align 1
  %frombool3 = zext i1 %pixelwise to i8
  store i8 %frombool3, i8* %pixelwise.addr, align 1
  %0 = load i8, i8* %delay.addr, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8, i8* @redisplaying_p, align 1
  %tobool4 = trunc i8 %1 to i1
  br i1 %tobool4, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false
  %2 = load i8, i8* %safe.addr, align 1
  %tobool5 = trunc i8 %2 to i1
  br i1 %tobool5, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true, %entry
  %3 = load i32, i32* %new_width.addr, align 4
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %new_width6 = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 42
  store i32 %3, i32* %new_width6, align 4
  %5 = load i32, i32* %new_height.addr, align 4
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %new_height7 = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 43
  store i32 %5, i32* %new_height7, align 4
  %7 = load i8, i8* %pixelwise.addr, align 1
  %tobool8 = trunc i8 %7 to i1
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %new_pixelwise = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 26
  %9 = bitcast i48* %new_pixelwise to i64*
  %10 = zext i1 %tobool8 to i64
  %bf.load = load i64, i64* %9, align 8
  %bf.shl = shl i64 %10, 33
  %bf.clear = and i64 %bf.load, -8589934593
  %bf.set = or i64 %bf.clear, %bf.shl
  store i64 %bf.set, i64* %9, align 8
  %bf.result.cast = trunc i64 %10 to i8
  %tobool9 = trunc i8 %bf.result.cast to i1
  store i8 1, i8* @delayed_size_change, align 1
  br label %if.end.35

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %new_height10 = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 43
  store i32 0, i32* %new_height10, align 4
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %new_width11 = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 42
  store i32 0, i32* %new_width11, align 4
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %new_pixelwise12 = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 26
  %14 = bitcast i48* %new_pixelwise12 to i64*
  %bf.load13 = load i64, i64* %14, align 8
  %bf.clear14 = and i64 %bf.load13, -8589934593
  store i64 %bf.clear14, i64* %14, align 8
  %15 = load i8, i8* %pixelwise.addr, align 1
  %tobool15 = trunc i8 %15 to i1
  br i1 %tobool15, label %if.then.16, label %if.else.22

if.then.16:                                       ; preds = %if.else
  %16 = load i32, i32* %new_width.addr, align 4
  %cmp = icmp sle i32 %16, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.16
  %17 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_width = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 40
  %18 = load i32, i32* %text_width, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then.16
  %19 = load i32, i32* %new_width.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %18, %cond.true ], [ %19, %cond.false ]
  store i32 %cond, i32* %new_width.addr, align 4
  %20 = load i32, i32* %new_height.addr, align 4
  %cmp17 = icmp sle i32 %20, 0
  br i1 %cmp17, label %cond.true.18, label %cond.false.19

cond.true.18:                                     ; preds = %cond.end
  %21 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_height = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 41
  %22 = load i32, i32* %text_height, align 4
  br label %cond.end.20

cond.false.19:                                    ; preds = %cond.end
  %23 = load i32, i32* %new_height.addr, align 4
  br label %cond.end.20

cond.end.20:                                      ; preds = %cond.false.19, %cond.true.18
  %cond21 = phi i32 [ %22, %cond.true.18 ], [ %23, %cond.false.19 ]
  store i32 %cond21, i32* %new_height.addr, align 4
  br label %if.end

if.else.22:                                       ; preds = %if.else
  %24 = load i32, i32* %new_width.addr, align 4
  %cmp23 = icmp sle i32 %24, 0
  br i1 %cmp23, label %cond.true.24, label %cond.false.25

cond.true.24:                                     ; preds = %if.else.22
  %25 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_cols = getelementptr inbounds %struct.frame, %struct.frame* %25, i32 0, i32 36
  %26 = load i32, i32* %text_cols, align 4
  br label %cond.end.26

cond.false.25:                                    ; preds = %if.else.22
  %27 = load i32, i32* %new_width.addr, align 4
  br label %cond.end.26

cond.end.26:                                      ; preds = %cond.false.25, %cond.true.24
  %cond27 = phi i32 [ %26, %cond.true.24 ], [ %27, %cond.false.25 ]
  %28 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %28, i32 0, i32 59
  %29 = load i32, i32* %column_width, align 4
  %mul = mul nsw i32 %cond27, %29
  store i32 %mul, i32* %new_width.addr, align 4
  %30 = load i32, i32* %new_height.addr, align 4
  %cmp28 = icmp sle i32 %30, 0
  br i1 %cmp28, label %cond.true.29, label %cond.false.30

cond.true.29:                                     ; preds = %cond.end.26
  %31 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_lines = getelementptr inbounds %struct.frame, %struct.frame* %31, i32 0, i32 37
  %32 = load i32, i32* %text_lines, align 4
  br label %cond.end.31

cond.false.30:                                    ; preds = %cond.end.26
  %33 = load i32, i32* %new_height.addr, align 4
  br label %cond.end.31

cond.end.31:                                      ; preds = %cond.false.30, %cond.true.29
  %cond32 = phi i32 [ %32, %cond.true.29 ], [ %33, %cond.false.30 ]
  %34 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %34, i32 0, i32 60
  %35 = load i32, i32* %line_height, align 4
  %mul33 = mul nsw i32 %cond32, %35
  store i32 %mul33, i32* %new_height.addr, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end.31, %cond.end.20
  %36 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %37 = load i32, i32* %new_width.addr, align 4
  %38 = load i32, i32* %new_height.addr, align 4
  %39 = load i8, i8* %pretend.addr, align 1
  %tobool34 = trunc i8 %39 to i1
  %call = call i64 @builtin_lisp_symbol(i32 252)
  call void @adjust_frame_size(%struct.frame* %36, i32 %37, i32 %38, i32 5, i1 zeroext %tobool34, i64 %call)
  br label %if.end.35

if.end.35:                                        ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @Fopen_termscript(i64 %file) #0 {
entry:
  %file.addr = alloca i64, align 8
  %tty = alloca %struct.tty_display_info*, align 8
  store i64 %file, i64* %file.addr, align 8
  %0 = load i64, i64* @selected_frame, align 8
  %call = call zeroext i1 @FRAMEP(i64 %0)
  br i1 %call, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 61
  %4 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp = icmp ne %struct.terminal* %4, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %5 = load i64, i64* @selected_frame, align 8
  %sub1 = sub nsw i64 %5, 5
  %6 = inttoptr i64 %sub1 to i8*
  %7 = bitcast i8* %6 to %struct.frame*
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %8, %cond.true
  %cond = phi %struct.frame* [ %7, %cond.true ], [ null, %8 ]
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %cond, i32 0, i32 26
  %9 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %9, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp2 = icmp eq i32 %bf.cast, 1
  br i1 %cmp2, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end
  call void (i8*, ...) @error(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0)) #8
  unreachable

if.end:                                           ; preds = %cond.end
  %10 = load i64, i64* @selected_frame, align 8
  %call3 = call zeroext i1 @FRAMEP(i64 %10)
  br i1 %call3, label %land.lhs.true.4, label %cond.false.10

land.lhs.true.4:                                  ; preds = %if.end
  %11 = load i64, i64* @selected_frame, align 8
  %sub5 = sub nsw i64 %11, 5
  %12 = inttoptr i64 %sub5 to i8*
  %13 = bitcast i8* %12 to %struct.frame*
  %terminal6 = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 61
  %14 = load %struct.terminal*, %struct.terminal** %terminal6, align 8
  %cmp7 = icmp ne %struct.terminal* %14, null
  br i1 %cmp7, label %cond.true.8, label %cond.false.10

cond.true.8:                                      ; preds = %land.lhs.true.4
  %15 = load i64, i64* @selected_frame, align 8
  %sub9 = sub nsw i64 %15, 5
  %16 = inttoptr i64 %sub9 to i8*
  %17 = bitcast i8* %16 to %struct.frame*
  br label %cond.end.11

cond.false.10:                                    ; preds = %land.lhs.true.4, %if.end
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.11

cond.end.11:                                      ; preds = %18, %cond.true.8
  %cond12 = phi %struct.frame* [ %17, %cond.true.8 ], [ null, %18 ]
  %output_method13 = getelementptr inbounds %struct.frame, %struct.frame* %cond12, i32 0, i32 26
  %19 = bitcast i48* %output_method13 to i64*
  %bf.load14 = load i64, i64* %19, align 8
  %bf.lshr15 = lshr i64 %bf.load14, 23
  %bf.clear16 = and i64 %bf.lshr15, 7
  %bf.cast17 = trunc i64 %bf.clear16 to i32
  %cmp18 = icmp eq i32 %bf.cast17, 1
  br i1 %cmp18, label %cond.true.35, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end.11
  %20 = load i64, i64* @selected_frame, align 8
  %call19 = call zeroext i1 @FRAMEP(i64 %20)
  br i1 %call19, label %land.lhs.true.20, label %cond.false.26

land.lhs.true.20:                                 ; preds = %lor.lhs.false
  %21 = load i64, i64* @selected_frame, align 8
  %sub21 = sub nsw i64 %21, 5
  %22 = inttoptr i64 %sub21 to i8*
  %23 = bitcast i8* %22 to %struct.frame*
  %terminal22 = getelementptr inbounds %struct.frame, %struct.frame* %23, i32 0, i32 61
  %24 = load %struct.terminal*, %struct.terminal** %terminal22, align 8
  %cmp23 = icmp ne %struct.terminal* %24, null
  br i1 %cmp23, label %cond.true.24, label %cond.false.26

cond.true.24:                                     ; preds = %land.lhs.true.20
  %25 = load i64, i64* @selected_frame, align 8
  %sub25 = sub nsw i64 %25, 5
  %26 = inttoptr i64 %sub25 to i8*
  %27 = bitcast i8* %26 to %struct.frame*
  br label %cond.end.27

cond.false.26:                                    ; preds = %land.lhs.true.20, %lor.lhs.false
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.27

cond.end.27:                                      ; preds = %28, %cond.true.24
  %cond28 = phi %struct.frame* [ %27, %cond.true.24 ], [ null, %28 ]
  %output_method29 = getelementptr inbounds %struct.frame, %struct.frame* %cond28, i32 0, i32 26
  %29 = bitcast i48* %output_method29 to i64*
  %bf.load30 = load i64, i64* %29, align 8
  %bf.lshr31 = lshr i64 %bf.load30, 23
  %bf.clear32 = and i64 %bf.lshr31, 7
  %bf.cast33 = trunc i64 %bf.clear32 to i32
  %cmp34 = icmp eq i32 %bf.cast33, 3
  br i1 %cmp34, label %cond.true.35, label %cond.false.48

cond.true.35:                                     ; preds = %cond.end.27, %cond.end.11
  %30 = load i64, i64* @selected_frame, align 8
  %call36 = call zeroext i1 @FRAMEP(i64 %30)
  br i1 %call36, label %land.lhs.true.37, label %cond.false.43

land.lhs.true.37:                                 ; preds = %cond.true.35
  %31 = load i64, i64* @selected_frame, align 8
  %sub38 = sub nsw i64 %31, 5
  %32 = inttoptr i64 %sub38 to i8*
  %33 = bitcast i8* %32 to %struct.frame*
  %terminal39 = getelementptr inbounds %struct.frame, %struct.frame* %33, i32 0, i32 61
  %34 = load %struct.terminal*, %struct.terminal** %terminal39, align 8
  %cmp40 = icmp ne %struct.terminal* %34, null
  br i1 %cmp40, label %cond.true.41, label %cond.false.43

cond.true.41:                                     ; preds = %land.lhs.true.37
  %35 = load i64, i64* @selected_frame, align 8
  %sub42 = sub nsw i64 %35, 5
  %36 = inttoptr i64 %sub42 to i8*
  %37 = bitcast i8* %36 to %struct.frame*
  br label %cond.end.44

cond.false.43:                                    ; preds = %land.lhs.true.37, %cond.true.35
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.44

cond.end.44:                                      ; preds = %38, %cond.true.41
  %cond45 = phi %struct.frame* [ %37, %cond.true.41 ], [ null, %38 ]
  %terminal46 = getelementptr inbounds %struct.frame, %struct.frame* %cond45, i32 0, i32 61
  %39 = load %struct.terminal*, %struct.terminal** %terminal46, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %39, i32 0, i32 12
  %tty47 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %40 = load %struct.tty_display_info*, %struct.tty_display_info** %tty47, align 8
  br label %cond.end.49

cond.false.48:                                    ; preds = %cond.end.27
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.49

cond.end.49:                                      ; preds = %41, %cond.end.44
  %cond50 = phi %struct.tty_display_info* [ %40, %cond.end.44 ], [ null, %41 ]
  store %struct.tty_display_info* %cond50, %struct.tty_display_info** %tty, align 8
  %42 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %termscript = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %42, i32 0, i32 5
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** %termscript, align 8
  %cmp51 = icmp ne %struct._IO_FILE* %43, null
  br i1 %cmp51, label %if.then.52, label %if.end.56

if.then.52:                                       ; preds = %cond.end.49
  call void @block_input()
  %44 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %termscript53 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %44, i32 0, i32 5
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** %termscript53, align 8
  %call54 = call i32 @fclose(%struct._IO_FILE* %45)
  %46 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %termscript55 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %46, i32 0, i32 5
  store %struct._IO_FILE* null, %struct._IO_FILE** %termscript55, align 8
  call void @unblock_input()
  br label %if.end.56

if.end.56:                                        ; preds = %if.then.52, %cond.end.49
  %47 = load i64, i64* %file.addr, align 8
  %call57 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp58 = icmp eq i64 %47, %call57
  br i1 %cmp58, label %if.end.69, label %if.then.59

if.then.59:                                       ; preds = %if.end.56
  %48 = load i64, i64* %file.addr, align 8
  %call60 = call i64 @builtin_lisp_symbol(i32 0)
  %call61 = call i64 @Fexpand_file_name(i64 %48, i64 %call60)
  store i64 %call61, i64* %file.addr, align 8
  %49 = load i64, i64* %file.addr, align 8
  %call62 = call i8* @SSDATA(i64 %49)
  %call63 = call %struct._IO_FILE* @emacs_fopen(i8* %call62, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  %50 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %termscript64 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %50, i32 0, i32 5
  store %struct._IO_FILE* %call63, %struct._IO_FILE** %termscript64, align 8
  %51 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %termscript65 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %51, i32 0, i32 5
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** %termscript65, align 8
  %cmp66 = icmp eq %struct._IO_FILE* %52, null
  br i1 %cmp66, label %if.then.67, label %if.end.68

if.then.67:                                       ; preds = %if.then.59
  %53 = load i64, i64* %file.addr, align 8
  call void @report_file_error(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i32 0, i32 0), i64 %53) #8
  unreachable

if.end.68:                                        ; preds = %if.then.59
  br label %if.end.69

if.end.69:                                        ; preds = %if.end.68, %if.end.56
  %call70 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call70
}

declare zeroext i1 @FRAMEP(i64) #1

; Function Attrs: noreturn
declare void @error(i8*, ...) #3

declare i32 @fclose(%struct._IO_FILE*) #1

declare i64 @Fexpand_file_name(i64, i64) #1

declare %struct._IO_FILE* @emacs_fopen(i8*, i8*) #1

declare i8* @SSDATA(i64) #1

; Function Attrs: noreturn
declare void @report_file_error(i8*, i64) #3

; Function Attrs: nounwind uwtable
define i64 @Fsend_string_to_terminal(i64 %string, i64 %terminal) #0 {
entry:
  %string.addr = alloca i64, align 8
  %terminal.addr = alloca i64, align 8
  %t = alloca %struct.terminal*, align 8
  %out = alloca %struct._IO_FILE*, align 8
  %tty = alloca %struct.tty_display_info*, align 8
  store i64 %string, i64* %string.addr, align 8
  store i64 %terminal, i64* %terminal.addr, align 8
  %0 = load i64, i64* %terminal.addr, align 8
  %call = call %struct.terminal* @decode_live_terminal(i64 %0)
  store %struct.terminal* %call, %struct.terminal** %t, align 8
  %1 = load i64, i64* %string.addr, align 8
  call void @CHECK_STRING(i64 %1)
  call void @block_input()
  %2 = load %struct.terminal*, %struct.terminal** %t, align 8
  %type = getelementptr inbounds %struct.terminal, %struct.terminal* %2, i32 0, i32 8
  %3 = load i32, i32* %type, align 4
  %cmp = icmp eq i32 %3, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  store %struct._IO_FILE* %4, %struct._IO_FILE** %out, align 8
  br label %if.end.20

if.else:                                          ; preds = %entry
  %5 = load %struct.terminal*, %struct.terminal** %t, align 8
  %type1 = getelementptr inbounds %struct.terminal, %struct.terminal* %5, i32 0, i32 8
  %6 = load i32, i32* %type1, align 4
  %cmp2 = icmp ne i32 %6, 1
  br i1 %cmp2, label %land.lhs.true, label %if.else.6

land.lhs.true:                                    ; preds = %if.else
  %7 = load %struct.terminal*, %struct.terminal** %t, align 8
  %type3 = getelementptr inbounds %struct.terminal, %struct.terminal* %7, i32 0, i32 8
  %8 = load i32, i32* %type3, align 4
  %cmp4 = icmp ne i32 %8, 3
  br i1 %cmp4, label %if.then.5, label %if.else.6

if.then.5:                                        ; preds = %land.lhs.true
  %9 = load %struct.terminal*, %struct.terminal** %t, align 8
  %id = getelementptr inbounds %struct.terminal, %struct.terminal* %9, i32 0, i32 6
  %10 = load i32, i32* %id, align 4
  call void (i8*, ...) @error(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.3, i32 0, i32 0), i32 %10) #8
  unreachable

if.else.6:                                        ; preds = %land.lhs.true, %if.else
  %11 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %11, i32 0, i32 12
  %tty7 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %12 = load %struct.tty_display_info*, %struct.tty_display_info** %tty7, align 8
  store %struct.tty_display_info* %12, %struct.tty_display_info** %tty, align 8
  %13 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %output = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %13, i32 0, i32 4
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %output, align 8
  %tobool = icmp ne %struct._IO_FILE* %14, null
  br i1 %tobool, label %if.end, label %if.then.8

if.then.8:                                        ; preds = %if.else.6
  call void (i8*, ...) @error(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.4, i32 0, i32 0)) #8
  unreachable

if.end:                                           ; preds = %if.else.6
  %15 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %termscript = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %15, i32 0, i32 5
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** %termscript, align 8
  %tobool9 = icmp ne %struct._IO_FILE* %16, null
  br i1 %tobool9, label %if.then.10, label %if.end.17

if.then.10:                                       ; preds = %if.end
  %17 = load i64, i64* %string.addr, align 8
  %call11 = call i8* @SDATA(i64 %17)
  %18 = load i64, i64* %string.addr, align 8
  %call12 = call i64 @SBYTES(i64 %18)
  %19 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %termscript13 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %19, i32 0, i32 5
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %termscript13, align 8
  %call14 = call i64 @fwrite(i8* %call11, i64 1, i64 %call12, %struct._IO_FILE* %20)
  %21 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %termscript15 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %21, i32 0, i32 5
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** %termscript15, align 8
  %call16 = call i32 @fflush(%struct._IO_FILE* %22)
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.10, %if.end
  %23 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %output18 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %23, i32 0, i32 4
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** %output18, align 8
  store %struct._IO_FILE* %24, %struct._IO_FILE** %out, align 8
  br label %if.end.19

if.end.19:                                        ; preds = %if.end.17
  br label %if.end.20

if.end.20:                                        ; preds = %if.end.19, %if.then
  %25 = load i64, i64* %string.addr, align 8
  %call21 = call i8* @SDATA(i64 %25)
  %26 = load i64, i64* %string.addr, align 8
  %call22 = call i64 @SBYTES(i64 %26)
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** %out, align 8
  %call23 = call i64 @fwrite(i8* %call21, i64 1, i64 %call22, %struct._IO_FILE* %27)
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** %out, align 8
  %call24 = call i32 @fflush(%struct._IO_FILE* %28)
  call void @unblock_input()
  %call25 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call25
}

declare %struct.terminal* @decode_live_terminal(i64) #1

declare void @CHECK_STRING(i64) #1

declare i64 @fwrite(i8*, i64, i64, %struct._IO_FILE*) #1

declare i8* @SDATA(i64) #1

declare i64 @SBYTES(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fding(i64 %arg) #0 {
entry:
  %arg.addr = alloca i64, align 8
  store i64 %arg, i64* %arg.addr, align 8
  %0 = load i64, i64* %arg.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.else.3, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i8, i8* @noninteractive, align 1
  %tobool = trunc i8 %1 to i1
  br i1 %tobool, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.then
  %call2 = call i32 @putchar(i32 7)
  br label %if.end

if.else:                                          ; preds = %if.then
  %2 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %2, 5
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.frame*
  call void @ring_bell(%struct.frame* %4)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.1
  br label %if.end.4

if.else.3:                                        ; preds = %entry
  call void @bitch_at_user()
  br label %if.end.4

if.end.4:                                         ; preds = %if.else.3, %if.end
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call5
}

declare i32 @putchar(i32) #1

declare void @ring_bell(%struct.frame*) #1

; Function Attrs: nounwind uwtable
define void @bitch_at_user() #0 {
entry:
  %msg = alloca i8*, align 8
  %0 = load i8, i8* @noninteractive, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 @putchar(i32 7)
  br label %if.end.9

if.else:                                          ; preds = %entry
  %1 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 86), align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call1
  br i1 %cmp, label %land.lhs.true, label %if.then.3

land.lhs.true:                                    ; preds = %if.else
  %2 = load i8, i8* @noninteractive, align 1
  %tobool2 = trunc i8 %2 to i1
  br i1 %tobool2, label %if.then.3, label %if.else.8

if.then.3:                                        ; preds = %land.lhs.true, %if.else
  store i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.5, i32 0, i32 0), i8** %msg, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 981)
  %3 = load i8*, i8** %msg, align 8
  %call5 = call i64 @build_string(i8* %3)
  %call6 = call i64 @list1(i64 %call5)
  %call7 = call i64 @Fsignal(i64 %call4, i64 %call6)
  br label %if.end

if.else.8:                                        ; preds = %land.lhs.true
  %4 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %4, 5
  %5 = inttoptr i64 %sub to i8*
  %6 = bitcast i8* %5 to %struct.frame*
  call void @ring_bell(%struct.frame* %6)
  br label %if.end

if.end:                                           ; preds = %if.else.8, %if.then.3
  br label %if.end.9

if.end.9:                                         ; preds = %if.end, %if.then
  ret void
}

declare i64 @Fsignal(i64, i64) #1

declare i64 @list1(i64) #1

declare i64 @build_string(i8*) #1

; Function Attrs: nounwind uwtable
define i64 @Fsleep_for(i64 %seconds, i64 %milliseconds) #0 {
entry:
  %seconds.addr = alloca i64, align 8
  %milliseconds.addr = alloca i64, align 8
  %duration = alloca double, align 8
  %t = alloca %struct.timespec, align 8
  %tend = alloca %struct.timespec, align 8
  %agg.tmp = alloca %struct.timespec, align 8
  %agg.tmp22 = alloca %struct.timespec, align 8
  %coerce = alloca %struct.timespec, align 8
  store i64 %seconds, i64* %seconds.addr, align 8
  store i64 %milliseconds, i64* %milliseconds.addr, align 8
  %0 = load i64, i64* %seconds.addr, align 8
  %call = call double @extract_float(i64 %0)
  store double %call, double* %duration, align 8
  %1 = load i64, i64* %milliseconds.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call1
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %milliseconds.addr, align 8
  %and = and i64 %2, 7
  %conv = trunc i64 %and to i32
  %and2 = and i32 %conv, -5
  %cmp3 = icmp eq i32 %and2, 2
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %call5 = call i64 @builtin_lisp_symbol(i32 559)
  %3 = load i64, i64* %milliseconds.addr, align 8
  %4 = call i64 @wrong_type_argument(i64 %call5, i64 %3) #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %5, %cond.true
  %6 = load i64, i64* %milliseconds.addr, align 8
  %shr = ashr i64 %6, 2
  %conv6 = sitofp i64 %shr to double
  %div = fdiv double %conv6, 1.000000e+03
  %7 = load double, double* %duration, align 8
  %add = fadd double %7, %div
  store double %add, double* %duration, align 8
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %8 = load double, double* %duration, align 8
  %cmp7 = fcmp ogt double %8, 0.000000e+00
  br i1 %cmp7, label %if.then.9, label %if.end.28

if.then.9:                                        ; preds = %if.end
  %9 = load double, double* %duration, align 8
  %call10 = call { i64, i64 } @dtotimespec(double %9) #9
  %10 = bitcast %struct.timespec* %t to { i64, i64 }*
  %11 = getelementptr { i64, i64 }, { i64, i64 }* %10, i32 0, i32 0
  %12 = extractvalue { i64, i64 } %call10, 0
  store i64 %12, i64* %11, align 8
  %13 = getelementptr { i64, i64 }, { i64, i64 }* %10, i32 0, i32 1
  %14 = extractvalue { i64, i64 } %call10, 1
  store i64 %14, i64* %13, align 8
  %call11 = call { i64, i64 } @current_timespec()
  %15 = bitcast %struct.timespec* %agg.tmp to { i64, i64 }*
  %16 = getelementptr { i64, i64 }, { i64, i64 }* %15, i32 0, i32 0
  %17 = extractvalue { i64, i64 } %call11, 0
  store i64 %17, i64* %16, align 8
  %18 = getelementptr { i64, i64 }, { i64, i64 }* %15, i32 0, i32 1
  %19 = extractvalue { i64, i64 } %call11, 1
  store i64 %19, i64* %18, align 8
  %20 = bitcast %struct.timespec* %agg.tmp to { i64, i64 }*
  %21 = getelementptr { i64, i64 }, { i64, i64 }* %20, i32 0, i32 0
  %22 = load i64, i64* %21, align 1
  %23 = getelementptr { i64, i64 }, { i64, i64 }* %20, i32 0, i32 1
  %24 = load i64, i64* %23, align 1
  %25 = bitcast %struct.timespec* %t to { i64, i64 }*
  %26 = getelementptr { i64, i64 }, { i64, i64 }* %25, i32 0, i32 0
  %27 = load i64, i64* %26, align 1
  %28 = getelementptr { i64, i64 }, { i64, i64 }* %25, i32 0, i32 1
  %29 = load i64, i64* %28, align 1
  %call12 = call { i64, i64 } @timespec_add(i64 %22, i64 %24, i64 %27, i64 %29) #9
  %30 = bitcast %struct.timespec* %tend to { i64, i64 }*
  %31 = getelementptr { i64, i64 }, { i64, i64 }* %30, i32 0, i32 0
  %32 = extractvalue { i64, i64 } %call12, 0
  store i64 %32, i64* %31, align 8
  %33 = getelementptr { i64, i64 }, { i64, i64 }* %30, i32 0, i32 1
  %34 = extractvalue { i64, i64 } %call12, 1
  store i64 %34, i64* %33, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then.9
  %tv_sec = getelementptr inbounds %struct.timespec, %struct.timespec* %t, i32 0, i32 0
  %35 = load i64, i64* %tv_sec, align 8
  %cmp13 = icmp slt i64 %35, 9223372036854775807
  br i1 %cmp13, label %cond.true.15, label %cond.false.17

cond.true.15:                                     ; preds = %do.body
  %tv_sec16 = getelementptr inbounds %struct.timespec, %struct.timespec* %t, i32 0, i32 0
  %36 = load i64, i64* %tv_sec16, align 8
  br label %cond.end.18

cond.false.17:                                    ; preds = %do.body
  br label %cond.end.18

cond.end.18:                                      ; preds = %cond.false.17, %cond.true.15
  %cond = phi i64 [ %36, %cond.true.15 ], [ 9223372036854775807, %cond.false.17 ]
  %tv_nsec = getelementptr inbounds %struct.timespec, %struct.timespec* %t, i32 0, i32 1
  %37 = load i64, i64* %tv_nsec, align 8
  %conv19 = trunc i64 %37 to i32
  %call20 = call i64 @builtin_lisp_symbol(i32 0)
  %call21 = call i32 @wait_reading_process_output(i64 %cond, i32 %conv19, i32 0, i1 zeroext false, i64 %call20, %struct.Lisp_Process* null, i32 0)
  %call23 = call { i64, i64 } @current_timespec()
  %38 = bitcast %struct.timespec* %agg.tmp22 to { i64, i64 }*
  %39 = getelementptr { i64, i64 }, { i64, i64 }* %38, i32 0, i32 0
  %40 = extractvalue { i64, i64 } %call23, 0
  store i64 %40, i64* %39, align 8
  %41 = getelementptr { i64, i64 }, { i64, i64 }* %38, i32 0, i32 1
  %42 = extractvalue { i64, i64 } %call23, 1
  store i64 %42, i64* %41, align 8
  %43 = bitcast %struct.timespec* %tend to { i64, i64 }*
  %44 = getelementptr { i64, i64 }, { i64, i64 }* %43, i32 0, i32 0
  %45 = load i64, i64* %44, align 1
  %46 = getelementptr { i64, i64 }, { i64, i64 }* %43, i32 0, i32 1
  %47 = load i64, i64* %46, align 1
  %48 = bitcast %struct.timespec* %agg.tmp22 to { i64, i64 }*
  %49 = getelementptr { i64, i64 }, { i64, i64 }* %48, i32 0, i32 0
  %50 = load i64, i64* %49, align 1
  %51 = getelementptr { i64, i64 }, { i64, i64 }* %48, i32 0, i32 1
  %52 = load i64, i64* %51, align 1
  %call24 = call { i64, i64 } @timespec_sub(i64 %45, i64 %47, i64 %50, i64 %52) #9
  %53 = bitcast %struct.timespec* %coerce to { i64, i64 }*
  %54 = getelementptr { i64, i64 }, { i64, i64 }* %53, i32 0, i32 0
  %55 = extractvalue { i64, i64 } %call24, 0
  store i64 %55, i64* %54, align 8
  %56 = getelementptr { i64, i64 }, { i64, i64 }* %53, i32 0, i32 1
  %57 = extractvalue { i64, i64 } %call24, 1
  store i64 %57, i64* %56, align 8
  %58 = bitcast %struct.timespec* %t to i8*
  %59 = bitcast %struct.timespec* %coerce to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %58, i8* %59, i64 16, i32 8, i1 false)
  br label %do.cond

do.cond:                                          ; preds = %cond.end.18
  %60 = bitcast %struct.timespec* %t to { i64, i64 }*
  %61 = getelementptr { i64, i64 }, { i64, i64 }* %60, i32 0, i32 0
  %62 = load i64, i64* %61, align 1
  %63 = getelementptr { i64, i64 }, { i64, i64 }* %60, i32 0, i32 1
  %64 = load i64, i64* %63, align 1
  %call25 = call i32 @timespec_sign(i64 %62, i64 %64) #10
  %cmp26 = icmp sgt i32 %call25, 0
  br i1 %cmp26, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end.28

if.end.28:                                        ; preds = %do.end, %if.end
  %call29 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call29
}

declare double @extract_float(i64) #1

; Function Attrs: noreturn
declare i64 @wrong_type_argument(i64, i64) #3

; Function Attrs: nounwind readnone
declare { i64, i64 } @dtotimespec(double) #4

; Function Attrs: nounwind readnone
declare { i64, i64 } @timespec_add(i64, i64, i64, i64) #4

declare { i64, i64 } @current_timespec() #1

declare i32 @wait_reading_process_output(i64, i32, i32, i1 zeroext, i64, %struct.Lisp_Process*, i32) #1

; Function Attrs: nounwind readnone
declare { i64, i64 } @timespec_sub(i64, i64, i64, i64) #4

; Function Attrs: nounwind readonly
declare i32 @timespec_sign(i64, i64) #5

; Function Attrs: nounwind uwtable
define i64 @sit_for(i64 %timeout, i1 zeroext %reading, i32 %display_option) #0 {
entry:
  %retval = alloca i64, align 8
  %timeout.addr = alloca i64, align 8
  %reading.addr = alloca i8, align 1
  %display_option.addr = alloca i32, align 4
  %sec = alloca i64, align 8
  %nsec = alloca i32, align 4
  %do_display = alloca i8, align 1
  %seconds = alloca double, align 8
  %t = alloca %struct.timespec, align 8
  store i64 %timeout, i64* %timeout.addr, align 8
  %frombool = zext i1 %reading to i8
  store i8 %frombool, i8* %reading.addr, align 1
  store i32 %display_option, i32* %display_option.addr, align 4
  %0 = load i32, i32* %display_option.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  %frombool1 = zext i1 %cmp to i8
  store i8 %frombool1, i8* %do_display, align 1
  %1 = load i8, i8* %do_display, align 1
  %tobool = trunc i8 %1 to i1
  call void @swallow_events(i1 zeroext %tobool)
  %2 = load i8, i8* %do_display, align 1
  %tobool2 = trunc i8 %2 to i1
  %call = call zeroext i1 @detect_input_pending_run_timers(i1 zeroext %tobool2)
  br i1 %call, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 86), align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp4 = icmp eq i64 %3, %call3
  br i1 %cmp4, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call5, i64* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %4 = load i32, i32* %display_option.addr, align 4
  %cmp6 = icmp sgt i32 %4, 1
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end
  call void @redisplay_preserve_echo_area(i32 2)
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.7, %if.end
  %5 = load i64, i64* %timeout.addr, align 8
  %and = and i64 %5, 7
  %conv = trunc i64 %and to i32
  %and9 = and i32 %conv, -5
  %cmp10 = icmp eq i32 %and9, 2
  br i1 %cmp10, label %if.then.12, label %if.else

if.then.12:                                       ; preds = %if.end.8
  %6 = load i64, i64* %timeout.addr, align 8
  %shr = ashr i64 %6, 2
  store i64 %shr, i64* %sec, align 8
  %7 = load i64, i64* %sec, align 8
  %cmp13 = icmp sle i64 %7, 0
  br i1 %cmp13, label %if.then.15, label %if.end.17

if.then.15:                                       ; preds = %if.then.12
  %call16 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call16, i64* %retval
  br label %return

if.end.17:                                        ; preds = %if.then.12
  store i32 0, i32* %nsec, align 4
  br label %if.end.44

if.else:                                          ; preds = %if.end.8
  %8 = load i64, i64* %timeout.addr, align 8
  %and18 = and i64 %8, 7
  %conv19 = trunc i64 %and18 to i32
  %cmp20 = icmp eq i32 %conv19, 7
  br i1 %cmp20, label %if.then.22, label %if.else.35

if.then.22:                                       ; preds = %if.else
  %9 = load i64, i64* %timeout.addr, align 8
  %call23 = call double @XFLOAT_DATA(i64 %9)
  store double %call23, double* %seconds, align 8
  %10 = load double, double* %seconds, align 8
  %cmp24 = fcmp olt double 0.000000e+00, %10
  br i1 %cmp24, label %if.else.28, label %if.then.26

if.then.26:                                       ; preds = %if.then.22
  %call27 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call27, i64* %retval
  br label %return

if.else.28:                                       ; preds = %if.then.22
  %11 = load double, double* %seconds, align 8
  %call29 = call { i64, i64 } @dtotimespec(double %11) #9
  %12 = bitcast %struct.timespec* %t to { i64, i64 }*
  %13 = getelementptr { i64, i64 }, { i64, i64 }* %12, i32 0, i32 0
  %14 = extractvalue { i64, i64 } %call29, 0
  store i64 %14, i64* %13, align 8
  %15 = getelementptr { i64, i64 }, { i64, i64 }* %12, i32 0, i32 1
  %16 = extractvalue { i64, i64 } %call29, 1
  store i64 %16, i64* %15, align 8
  %tv_sec = getelementptr inbounds %struct.timespec, %struct.timespec* %t, i32 0, i32 0
  %17 = load i64, i64* %tv_sec, align 8
  %cmp30 = icmp slt i64 %17, 9223372036854775807
  br i1 %cmp30, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else.28
  %tv_sec32 = getelementptr inbounds %struct.timespec, %struct.timespec* %t, i32 0, i32 0
  %18 = load i64, i64* %tv_sec32, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else.28
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %18, %cond.true ], [ 9223372036854775807, %cond.false ]
  store i64 %cond, i64* %sec, align 8
  %tv_nsec = getelementptr inbounds %struct.timespec, %struct.timespec* %t, i32 0, i32 1
  %19 = load i64, i64* %tv_nsec, align 8
  %conv33 = trunc i64 %19 to i32
  store i32 %conv33, i32* %nsec, align 4
  br label %if.end.34

if.end.34:                                        ; preds = %cond.end
  br label %if.end.43

if.else.35:                                       ; preds = %if.else
  %20 = load i64, i64* %timeout.addr, align 8
  %call36 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp37 = icmp eq i64 %20, %call36
  br i1 %cmp37, label %if.then.39, label %if.else.40

if.then.39:                                       ; preds = %if.else.35
  store i64 0, i64* %sec, align 8
  store i32 0, i32* %nsec, align 4
  br label %if.end.42

if.else.40:                                       ; preds = %if.else.35
  %call41 = call i64 @builtin_lisp_symbol(i32 711)
  %21 = load i64, i64* %timeout.addr, align 8
  %22 = call i64 @wrong_type_argument(i64 %call41, i64 %21) #8
  unreachable

if.end.42:                                        ; preds = %if.then.39
  br label %if.end.43

if.end.43:                                        ; preds = %if.end.42, %if.end.34
  br label %if.end.44

if.end.44:                                        ; preds = %if.end.43, %if.end.17
  %call45 = call i32 @gobble_input()
  %23 = load i64, i64* %sec, align 8
  %24 = load i32, i32* %nsec, align 4
  %25 = load i8, i8* %reading.addr, align 1
  %tobool46 = trunc i8 %25 to i1
  %cond48 = select i1 %tobool46, i32 -1, i32 1
  %26 = load i8, i8* %do_display, align 1
  %tobool49 = trunc i8 %26 to i1
  %call50 = call i64 @builtin_lisp_symbol(i32 0)
  %call51 = call i32 @wait_reading_process_output(i64 %23, i32 %24, i32 %cond48, i1 zeroext %tobool49, i64 %call50, %struct.Lisp_Process* null, i32 0)
  %call52 = call zeroext i1 @detect_input_pending()
  br i1 %call52, label %cond.true.54, label %cond.false.56

cond.true.54:                                     ; preds = %if.end.44
  %call55 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.58

cond.false.56:                                    ; preds = %if.end.44
  %call57 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.58

cond.end.58:                                      ; preds = %cond.false.56, %cond.true.54
  %cond59 = phi i64 [ %call55, %cond.true.54 ], [ %call57, %cond.false.56 ]
  store i64 %cond59, i64* %retval
  br label %return

return:                                           ; preds = %cond.end.58, %if.then.26, %if.then.15, %if.then
  %27 = load i64, i64* %retval
  ret i64 %27
}

declare void @swallow_events(i1 zeroext) #1

declare zeroext i1 @detect_input_pending_run_timers(i1 zeroext) #1

declare void @redisplay_preserve_echo_area(i32) #1

declare double @XFLOAT_DATA(i64) #1

declare i32 @gobble_input() #1

declare zeroext i1 @detect_input_pending() #1

; Function Attrs: nounwind uwtable
define i64 @Fredisplay(i64 %force) #0 {
entry:
  %retval = alloca i64, align 8
  %force.addr = alloca i64, align 8
  %count = alloca i64, align 8
  store i64 %force, i64* %force.addr, align 8
  call void @swallow_events(i1 zeroext true)
  %call = call zeroext i1 @detect_input_pending_run_timers(i1 zeroext true)
  br i1 %call, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %entry
  %0 = load i64, i64* %force.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call1
  br i1 %cmp, label %land.lhs.true.2, label %lor.lhs.false

land.lhs.true.2:                                  ; preds = %land.lhs.true
  %1 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 487), align 1
  %tobool = trunc i8 %1 to i1
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %land.lhs.true.2, %land.lhs.true, %entry
  %2 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 86), align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp4 = icmp eq i64 %2, %call3
  br i1 %cmp4, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true.2
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call5, i64* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %call6 = call i64 @SPECPDL_INDEX()
  store i64 %call6, i64* %count, align 8
  %3 = load i64, i64* %force.addr, align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp8 = icmp eq i64 %3, %call7
  br i1 %cmp8, label %if.end.14, label %land.lhs.true.9

land.lhs.true.9:                                  ; preds = %if.end
  %4 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 487), align 1
  %tobool10 = trunc i8 %4 to i1
  br i1 %tobool10, label %if.end.14, label %if.then.11

if.then.11:                                       ; preds = %land.lhs.true.9
  %call12 = call i64 @builtin_lisp_symbol(i32 798)
  %call13 = call i64 @builtin_lisp_symbol(i32 901)
  call void @specbind(i64 %call12, i64 %call13)
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.11, %land.lhs.true.9, %if.end
  call void @redisplay_preserve_echo_area(i32 2)
  %5 = load i64, i64* %count, align 8
  %call15 = call i64 @builtin_lisp_symbol(i32 0)
  %call16 = call i64 @unbind_to(i64 %5, i64 %call15)
  %call17 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call17, i64* %retval
  br label %return

return:                                           ; preds = %if.end.14, %if.then
  %6 = load i64, i64* %retval
  ret i64 %6
}

declare void @specbind(i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fframe_or_buffer_changed_p(i64 %variable) #0 {
entry:
  %retval = alloca i64, align 8
  %variable.addr = alloca i64, align 8
  %state = alloca i64, align 8
  %tail = alloca i64, align 8
  %frame = alloca i64, align 8
  %buf = alloca i64, align 8
  %n = alloca i64, align 8
  %idx = alloca i64, align 8
  store i64 %variable, i64* %variable.addr, align 8
  %0 = load i64, i64* %variable.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %variable.addr, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %call3 = call i64 @builtin_lisp_symbol(i32 897)
  %2 = load i64, i64* %variable.addr, align 8
  %3 = call i64 @wrong_type_argument(i64 %call3, i64 %2) #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %4, %cond.true
  %5 = load i64, i64* %variable.addr, align 8
  %call4 = call i64 @Fsymbol_value(i64 %5)
  store i64 %call4, i64* %state, align 8
  %6 = load i64, i64* %state, align 8
  %call5 = call zeroext i1 @VECTORP(i64 %6)
  br i1 %call5, label %if.end, label %if.then.6

if.then.6:                                        ; preds = %cond.end
  br label %changed

if.end:                                           ; preds = %cond.end
  br label %if.end.7

if.else:                                          ; preds = %entry
  %7 = load i64, i64* @frame_and_buffer_state, align 8
  store i64 %7, i64* %state, align 8
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.end
  store i64 0, i64* %idx, align 8
  %8 = load i64, i64* @Vframe_list, align 8
  store i64 %8, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.7
  %9 = load i64, i64* %tail, align 8
  %and8 = and i64 %9, 7
  %conv9 = trunc i64 %and8 to i32
  %cmp10 = icmp eq i32 %conv9, 3
  br i1 %cmp10, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %10 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %10, 3
  %11 = inttoptr i64 %sub to i8*
  %12 = bitcast i8* %11 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %12, i32 0, i32 0
  %13 = load i64, i64* %car, align 8
  store i64 %13, i64* %frame, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %14 = phi i1 [ false, %for.cond ], [ true, %land.rhs ]
  br i1 %14, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %15 = load i64, i64* %idx, align 8
  %16 = load i64, i64* %state, align 8
  %call12 = call i64 @ASIZE(i64 %16)
  %cmp13 = icmp eq i64 %15, %call12
  br i1 %cmp13, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %for.body
  br label %changed

if.end.16:                                        ; preds = %for.body
  %17 = load i64, i64* %state, align 8
  %18 = load i64, i64* %idx, align 8
  %inc = add nsw i64 %18, 1
  store i64 %inc, i64* %idx, align 8
  %call17 = call i64 @AREF(i64 %17, i64 %18)
  %19 = load i64, i64* %frame, align 8
  %cmp18 = icmp eq i64 %call17, %19
  br i1 %cmp18, label %if.end.21, label %if.then.20

if.then.20:                                       ; preds = %if.end.16
  br label %changed

if.end.21:                                        ; preds = %if.end.16
  %20 = load i64, i64* %idx, align 8
  %21 = load i64, i64* %state, align 8
  %call22 = call i64 @ASIZE(i64 %21)
  %cmp23 = icmp eq i64 %20, %call22
  br i1 %cmp23, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %if.end.21
  br label %changed

if.end.26:                                        ; preds = %if.end.21
  %22 = load i64, i64* %state, align 8
  %23 = load i64, i64* %idx, align 8
  %inc27 = add nsw i64 %23, 1
  store i64 %inc27, i64* %idx, align 8
  %call28 = call i64 @AREF(i64 %22, i64 %23)
  %24 = load i64, i64* %frame, align 8
  %sub29 = sub nsw i64 %24, 5
  %25 = inttoptr i64 %sub29 to i8*
  %26 = bitcast i8* %25 to %struct.frame*
  %name = getelementptr inbounds %struct.frame, %struct.frame* %26, i32 0, i32 1
  %27 = load i64, i64* %name, align 8
  %cmp30 = icmp eq i64 %call28, %27
  br i1 %cmp30, label %if.end.33, label %if.then.32

if.then.32:                                       ; preds = %if.end.26
  br label %changed

if.end.33:                                        ; preds = %if.end.26
  br label %for.inc

for.inc:                                          ; preds = %if.end.33
  %28 = load i64, i64* %tail, align 8
  %sub34 = sub nsw i64 %28, 3
  %29 = inttoptr i64 %sub34 to i8*
  %30 = bitcast i8* %29 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %30, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %31 = load i64, i64* %cdr, align 8
  store i64 %31, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %32 = load i64, i64* @Vbuffer_alist, align 8
  store i64 %32, i64* %tail, align 8
  br label %for.cond.35

for.cond.35:                                      ; preds = %for.inc.90, %for.end
  %33 = load i64, i64* %tail, align 8
  %and36 = and i64 %33, 7
  %conv37 = trunc i64 %and36 to i32
  %cmp38 = icmp eq i32 %conv37, 3
  br i1 %cmp38, label %land.rhs.40, label %land.end.46

land.rhs.40:                                      ; preds = %for.cond.35
  %34 = load i64, i64* %tail, align 8
  %sub41 = sub nsw i64 %34, 3
  %35 = inttoptr i64 %sub41 to i8*
  %36 = bitcast i8* %35 to %struct.Lisp_Cons*
  %car42 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %36, i32 0, i32 0
  %37 = load i64, i64* %car42, align 8
  %sub43 = sub nsw i64 %37, 3
  %38 = inttoptr i64 %sub43 to i8*
  %39 = bitcast i8* %38 to %struct.Lisp_Cons*
  %u44 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %39, i32 0, i32 1
  %cdr45 = bitcast %union.anon.11* %u44 to i64*
  %40 = load i64, i64* %cdr45, align 8
  store i64 %40, i64* %buf, align 8
  br label %land.end.46

land.end.46:                                      ; preds = %land.rhs.40, %for.cond.35
  %41 = phi i1 [ false, %for.cond.35 ], [ true, %land.rhs.40 ]
  br i1 %41, label %for.body.47, label %for.end.94

for.body.47:                                      ; preds = %land.end.46
  %42 = load i64, i64* %buf, align 8
  %call48 = call %struct.buffer* @XBUFFER(i64 %42)
  %name_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call48, i32 0, i32 1
  %43 = load i64, i64* %name_, align 8
  %call49 = call zeroext i8 @SREF(i64 %43, i64 0)
  %conv50 = zext i8 %call49 to i32
  %cmp51 = icmp eq i32 %conv50, 32
  br i1 %cmp51, label %if.then.53, label %if.end.54

if.then.53:                                       ; preds = %for.body.47
  br label %for.inc.90

if.end.54:                                        ; preds = %for.body.47
  %44 = load i64, i64* %idx, align 8
  %45 = load i64, i64* %state, align 8
  %call55 = call i64 @ASIZE(i64 %45)
  %cmp56 = icmp eq i64 %44, %call55
  br i1 %cmp56, label %if.then.58, label %if.end.59

if.then.58:                                       ; preds = %if.end.54
  br label %changed

if.end.59:                                        ; preds = %if.end.54
  %46 = load i64, i64* %state, align 8
  %47 = load i64, i64* %idx, align 8
  %inc60 = add nsw i64 %47, 1
  store i64 %inc60, i64* %idx, align 8
  %call61 = call i64 @AREF(i64 %46, i64 %47)
  %48 = load i64, i64* %buf, align 8
  %cmp62 = icmp eq i64 %call61, %48
  br i1 %cmp62, label %if.end.65, label %if.then.64

if.then.64:                                       ; preds = %if.end.59
  br label %changed

if.end.65:                                        ; preds = %if.end.59
  %49 = load i64, i64* %idx, align 8
  %50 = load i64, i64* %state, align 8
  %call66 = call i64 @ASIZE(i64 %50)
  %cmp67 = icmp eq i64 %49, %call66
  br i1 %cmp67, label %if.then.69, label %if.end.70

if.then.69:                                       ; preds = %if.end.65
  br label %changed

if.end.70:                                        ; preds = %if.end.65
  %51 = load i64, i64* %state, align 8
  %52 = load i64, i64* %idx, align 8
  %inc71 = add nsw i64 %52, 1
  store i64 %inc71, i64* %idx, align 8
  %call72 = call i64 @AREF(i64 %51, i64 %52)
  %53 = load i64, i64* %buf, align 8
  %call73 = call %struct.buffer* @XBUFFER(i64 %53)
  %read_only_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call73, i32 0, i32 7
  %54 = load i64, i64* %read_only_, align 8
  %cmp74 = icmp eq i64 %call72, %54
  br i1 %cmp74, label %if.end.77, label %if.then.76

if.then.76:                                       ; preds = %if.end.70
  br label %changed

if.end.77:                                        ; preds = %if.end.70
  %55 = load i64, i64* %idx, align 8
  %56 = load i64, i64* %state, align 8
  %call78 = call i64 @ASIZE(i64 %56)
  %cmp79 = icmp eq i64 %55, %call78
  br i1 %cmp79, label %if.then.81, label %if.end.82

if.then.81:                                       ; preds = %if.end.77
  br label %changed

if.end.82:                                        ; preds = %if.end.77
  %57 = load i64, i64* %state, align 8
  %58 = load i64, i64* %idx, align 8
  %inc83 = add nsw i64 %58, 1
  store i64 %inc83, i64* %idx, align 8
  %call84 = call i64 @AREF(i64 %57, i64 %58)
  %59 = load i64, i64* %buf, align 8
  %call85 = call i64 @Fbuffer_modified_p(i64 %59)
  %cmp86 = icmp eq i64 %call84, %call85
  br i1 %cmp86, label %if.end.89, label %if.then.88

if.then.88:                                       ; preds = %if.end.82
  br label %changed

if.end.89:                                        ; preds = %if.end.82
  br label %for.inc.90

for.inc.90:                                       ; preds = %if.end.89, %if.then.53
  %60 = load i64, i64* %tail, align 8
  %sub91 = sub nsw i64 %60, 3
  %61 = inttoptr i64 %sub91 to i8*
  %62 = bitcast i8* %61 to %struct.Lisp_Cons*
  %u92 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %62, i32 0, i32 1
  %cdr93 = bitcast %union.anon.11* %u92 to i64*
  %63 = load i64, i64* %cdr93, align 8
  store i64 %63, i64* %tail, align 8
  br label %for.cond.35

for.end.94:                                       ; preds = %land.end.46
  %64 = load i64, i64* %idx, align 8
  %65 = load i64, i64* %state, align 8
  %call95 = call i64 @ASIZE(i64 %65)
  %cmp96 = icmp eq i64 %64, %call95
  br i1 %cmp96, label %if.then.98, label %if.end.99

if.then.98:                                       ; preds = %for.end.94
  br label %changed

if.end.99:                                        ; preds = %for.end.94
  %66 = load i64, i64* %state, align 8
  %67 = load i64, i64* %idx, align 8
  %call100 = call i64 @AREF(i64 %66, i64 %67)
  %call101 = call i64 @builtin_lisp_symbol(i32 598)
  %cmp102 = icmp eq i64 %call100, %call101
  br i1 %cmp102, label %if.then.104, label %if.end.106

if.then.104:                                      ; preds = %if.end.99
  %call105 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call105, i64* %retval
  br label %return

if.end.106:                                       ; preds = %if.end.99
  br label %changed

changed:                                          ; preds = %if.end.106, %if.then.98, %if.then.88, %if.then.81, %if.then.76, %if.then.69, %if.then.64, %if.then.58, %if.then.32, %if.then.25, %if.then.20, %if.then.15, %if.then.6
  store i64 1, i64* %n, align 8
  %68 = load i64, i64* @Vframe_list, align 8
  store i64 %68, i64* %tail, align 8
  br label %for.cond.107

for.cond.107:                                     ; preds = %for.inc.117, %changed
  %69 = load i64, i64* %tail, align 8
  %and108 = and i64 %69, 7
  %conv109 = trunc i64 %and108 to i32
  %cmp110 = icmp eq i32 %conv109, 3
  br i1 %cmp110, label %land.rhs.112, label %land.end.115

land.rhs.112:                                     ; preds = %for.cond.107
  %70 = load i64, i64* %tail, align 8
  %sub113 = sub nsw i64 %70, 3
  %71 = inttoptr i64 %sub113 to i8*
  %72 = bitcast i8* %71 to %struct.Lisp_Cons*
  %car114 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %72, i32 0, i32 0
  %73 = load i64, i64* %car114, align 8
  store i64 %73, i64* %frame, align 8
  br label %land.end.115

land.end.115:                                     ; preds = %land.rhs.112, %for.cond.107
  %74 = phi i1 [ false, %for.cond.107 ], [ true, %land.rhs.112 ]
  br i1 %74, label %for.body.116, label %for.end.121

for.body.116:                                     ; preds = %land.end.115
  %75 = load i64, i64* %n, align 8
  %add = add nsw i64 %75, 2
  store i64 %add, i64* %n, align 8
  br label %for.inc.117

for.inc.117:                                      ; preds = %for.body.116
  %76 = load i64, i64* %tail, align 8
  %sub118 = sub nsw i64 %76, 3
  %77 = inttoptr i64 %sub118 to i8*
  %78 = bitcast i8* %77 to %struct.Lisp_Cons*
  %u119 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %78, i32 0, i32 1
  %cdr120 = bitcast %union.anon.11* %u119 to i64*
  %79 = load i64, i64* %cdr120, align 8
  store i64 %79, i64* %tail, align 8
  br label %for.cond.107

for.end.121:                                      ; preds = %land.end.115
  %80 = load i64, i64* @Vbuffer_alist, align 8
  store i64 %80, i64* %tail, align 8
  br label %for.cond.122

for.cond.122:                                     ; preds = %for.inc.136, %for.end.121
  %81 = load i64, i64* %tail, align 8
  %and123 = and i64 %81, 7
  %conv124 = trunc i64 %and123 to i32
  %cmp125 = icmp eq i32 %conv124, 3
  br i1 %cmp125, label %land.rhs.127, label %land.end.133

land.rhs.127:                                     ; preds = %for.cond.122
  %82 = load i64, i64* %tail, align 8
  %sub128 = sub nsw i64 %82, 3
  %83 = inttoptr i64 %sub128 to i8*
  %84 = bitcast i8* %83 to %struct.Lisp_Cons*
  %car129 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %84, i32 0, i32 0
  %85 = load i64, i64* %car129, align 8
  %sub130 = sub nsw i64 %85, 3
  %86 = inttoptr i64 %sub130 to i8*
  %87 = bitcast i8* %86 to %struct.Lisp_Cons*
  %u131 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %87, i32 0, i32 1
  %cdr132 = bitcast %union.anon.11* %u131 to i64*
  %88 = load i64, i64* %cdr132, align 8
  store i64 %88, i64* %buf, align 8
  br label %land.end.133

land.end.133:                                     ; preds = %land.rhs.127, %for.cond.122
  %89 = phi i1 [ false, %for.cond.122 ], [ true, %land.rhs.127 ]
  br i1 %89, label %for.body.134, label %for.end.140

for.body.134:                                     ; preds = %land.end.133
  %90 = load i64, i64* %n, align 8
  %add135 = add nsw i64 %90, 3
  store i64 %add135, i64* %n, align 8
  br label %for.inc.136

for.inc.136:                                      ; preds = %for.body.134
  %91 = load i64, i64* %tail, align 8
  %sub137 = sub nsw i64 %91, 3
  %92 = inttoptr i64 %sub137 to i8*
  %93 = bitcast i8* %92 to %struct.Lisp_Cons*
  %u138 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %93, i32 0, i32 1
  %cdr139 = bitcast %union.anon.11* %u138 to i64*
  %94 = load i64, i64* %cdr139, align 8
  store i64 %94, i64* %tail, align 8
  br label %for.cond.122

for.end.140:                                      ; preds = %land.end.133
  %95 = load i64, i64* %state, align 8
  %call141 = call zeroext i1 @VECTORP(i64 %95)
  br i1 %call141, label %lor.lhs.false, label %if.then.150

lor.lhs.false:                                    ; preds = %for.end.140
  %96 = load i64, i64* %n, align 8
  %97 = load i64, i64* %state, align 8
  %call142 = call i64 @ASIZE(i64 %97)
  %cmp143 = icmp sgt i64 %96, %call142
  br i1 %cmp143, label %if.then.150, label %lor.lhs.false.145

lor.lhs.false.145:                                ; preds = %lor.lhs.false
  %98 = load i64, i64* %n, align 8
  %add146 = add nsw i64 %98, 20
  %99 = load i64, i64* %state, align 8
  %call147 = call i64 @ASIZE(i64 %99)
  %div = sdiv i64 %call147, 2
  %cmp148 = icmp slt i64 %add146, %div
  br i1 %cmp148, label %if.then.150, label %if.end.162

if.then.150:                                      ; preds = %lor.lhs.false.145, %lor.lhs.false, %for.end.140
  %100 = load i64, i64* %n, align 8
  %add151 = add nsw i64 %100, 20
  %shl = shl i64 %add151, 2
  %add152 = add i64 %shl, 2
  %call153 = call i64 @builtin_lisp_symbol(i32 598)
  %call154 = call i64 @Fmake_vector(i64 %add152, i64 %call153)
  store i64 %call154, i64* %state, align 8
  %101 = load i64, i64* %variable.addr, align 8
  %call155 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp156 = icmp eq i64 %101, %call155
  br i1 %cmp156, label %if.else.160, label %if.then.158

if.then.158:                                      ; preds = %if.then.150
  %102 = load i64, i64* %variable.addr, align 8
  %103 = load i64, i64* %state, align 8
  %call159 = call i64 @Fset(i64 %102, i64 %103)
  br label %if.end.161

if.else.160:                                      ; preds = %if.then.150
  %104 = load i64, i64* %state, align 8
  store i64 %104, i64* @frame_and_buffer_state, align 8
  br label %if.end.161

if.end.161:                                       ; preds = %if.else.160, %if.then.158
  br label %if.end.162

if.end.162:                                       ; preds = %if.end.161, %lor.lhs.false.145
  store i64 0, i64* %idx, align 8
  %105 = load i64, i64* @Vframe_list, align 8
  store i64 %105, i64* %tail, align 8
  br label %for.cond.163

for.cond.163:                                     ; preds = %for.inc.177, %if.end.162
  %106 = load i64, i64* %tail, align 8
  %and164 = and i64 %106, 7
  %conv165 = trunc i64 %and164 to i32
  %cmp166 = icmp eq i32 %conv165, 3
  br i1 %cmp166, label %land.rhs.168, label %land.end.171

land.rhs.168:                                     ; preds = %for.cond.163
  %107 = load i64, i64* %tail, align 8
  %sub169 = sub nsw i64 %107, 3
  %108 = inttoptr i64 %sub169 to i8*
  %109 = bitcast i8* %108 to %struct.Lisp_Cons*
  %car170 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %109, i32 0, i32 0
  %110 = load i64, i64* %car170, align 8
  store i64 %110, i64* %frame, align 8
  br label %land.end.171

land.end.171:                                     ; preds = %land.rhs.168, %for.cond.163
  %111 = phi i1 [ false, %for.cond.163 ], [ true, %land.rhs.168 ]
  br i1 %111, label %for.body.172, label %for.end.181

for.body.172:                                     ; preds = %land.end.171
  %112 = load i64, i64* %state, align 8
  %113 = load i64, i64* %idx, align 8
  %114 = load i64, i64* %frame, align 8
  call void @ASET(i64 %112, i64 %113, i64 %114)
  %115 = load i64, i64* %idx, align 8
  %inc173 = add nsw i64 %115, 1
  store i64 %inc173, i64* %idx, align 8
  %116 = load i64, i64* %state, align 8
  %117 = load i64, i64* %idx, align 8
  %118 = load i64, i64* %frame, align 8
  %sub174 = sub nsw i64 %118, 5
  %119 = inttoptr i64 %sub174 to i8*
  %120 = bitcast i8* %119 to %struct.frame*
  %name175 = getelementptr inbounds %struct.frame, %struct.frame* %120, i32 0, i32 1
  %121 = load i64, i64* %name175, align 8
  call void @ASET(i64 %116, i64 %117, i64 %121)
  %122 = load i64, i64* %idx, align 8
  %inc176 = add nsw i64 %122, 1
  store i64 %inc176, i64* %idx, align 8
  br label %for.inc.177

for.inc.177:                                      ; preds = %for.body.172
  %123 = load i64, i64* %tail, align 8
  %sub178 = sub nsw i64 %123, 3
  %124 = inttoptr i64 %sub178 to i8*
  %125 = bitcast i8* %124 to %struct.Lisp_Cons*
  %u179 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %125, i32 0, i32 1
  %cdr180 = bitcast %union.anon.11* %u179 to i64*
  %126 = load i64, i64* %cdr180, align 8
  store i64 %126, i64* %tail, align 8
  br label %for.cond.163

for.end.181:                                      ; preds = %land.end.171
  %127 = load i64, i64* @Vbuffer_alist, align 8
  store i64 %127, i64* %tail, align 8
  br label %for.cond.182

for.cond.182:                                     ; preds = %for.inc.209, %for.end.181
  %128 = load i64, i64* %tail, align 8
  %and183 = and i64 %128, 7
  %conv184 = trunc i64 %and183 to i32
  %cmp185 = icmp eq i32 %conv184, 3
  br i1 %cmp185, label %land.rhs.187, label %land.end.193

land.rhs.187:                                     ; preds = %for.cond.182
  %129 = load i64, i64* %tail, align 8
  %sub188 = sub nsw i64 %129, 3
  %130 = inttoptr i64 %sub188 to i8*
  %131 = bitcast i8* %130 to %struct.Lisp_Cons*
  %car189 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %131, i32 0, i32 0
  %132 = load i64, i64* %car189, align 8
  %sub190 = sub nsw i64 %132, 3
  %133 = inttoptr i64 %sub190 to i8*
  %134 = bitcast i8* %133 to %struct.Lisp_Cons*
  %u191 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %134, i32 0, i32 1
  %cdr192 = bitcast %union.anon.11* %u191 to i64*
  %135 = load i64, i64* %cdr192, align 8
  store i64 %135, i64* %buf, align 8
  br label %land.end.193

land.end.193:                                     ; preds = %land.rhs.187, %for.cond.182
  %136 = phi i1 [ false, %for.cond.182 ], [ true, %land.rhs.187 ]
  br i1 %136, label %for.body.194, label %for.end.213

for.body.194:                                     ; preds = %land.end.193
  %137 = load i64, i64* %buf, align 8
  %call195 = call %struct.buffer* @XBUFFER(i64 %137)
  %name_196 = getelementptr inbounds %struct.buffer, %struct.buffer* %call195, i32 0, i32 1
  %138 = load i64, i64* %name_196, align 8
  %call197 = call zeroext i8 @SREF(i64 %138, i64 0)
  %conv198 = zext i8 %call197 to i32
  %cmp199 = icmp eq i32 %conv198, 32
  br i1 %cmp199, label %if.then.201, label %if.end.202

if.then.201:                                      ; preds = %for.body.194
  br label %for.inc.209

if.end.202:                                       ; preds = %for.body.194
  %139 = load i64, i64* %state, align 8
  %140 = load i64, i64* %idx, align 8
  %141 = load i64, i64* %buf, align 8
  call void @ASET(i64 %139, i64 %140, i64 %141)
  %142 = load i64, i64* %idx, align 8
  %inc203 = add nsw i64 %142, 1
  store i64 %inc203, i64* %idx, align 8
  %143 = load i64, i64* %state, align 8
  %144 = load i64, i64* %idx, align 8
  %145 = load i64, i64* %buf, align 8
  %call204 = call %struct.buffer* @XBUFFER(i64 %145)
  %read_only_205 = getelementptr inbounds %struct.buffer, %struct.buffer* %call204, i32 0, i32 7
  %146 = load i64, i64* %read_only_205, align 8
  call void @ASET(i64 %143, i64 %144, i64 %146)
  %147 = load i64, i64* %idx, align 8
  %inc206 = add nsw i64 %147, 1
  store i64 %inc206, i64* %idx, align 8
  %148 = load i64, i64* %state, align 8
  %149 = load i64, i64* %idx, align 8
  %150 = load i64, i64* %buf, align 8
  %call207 = call i64 @Fbuffer_modified_p(i64 %150)
  call void @ASET(i64 %148, i64 %149, i64 %call207)
  %151 = load i64, i64* %idx, align 8
  %inc208 = add nsw i64 %151, 1
  store i64 %inc208, i64* %idx, align 8
  br label %for.inc.209

for.inc.209:                                      ; preds = %if.end.202, %if.then.201
  %152 = load i64, i64* %tail, align 8
  %sub210 = sub nsw i64 %152, 3
  %153 = inttoptr i64 %sub210 to i8*
  %154 = bitcast i8* %153 to %struct.Lisp_Cons*
  %u211 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %154, i32 0, i32 1
  %cdr212 = bitcast %union.anon.11* %u211 to i64*
  %155 = load i64, i64* %cdr212, align 8
  store i64 %155, i64* %tail, align 8
  br label %for.cond.182

for.end.213:                                      ; preds = %land.end.193
  %156 = load i64, i64* %state, align 8
  %157 = load i64, i64* %idx, align 8
  %call214 = call i64 @builtin_lisp_symbol(i32 598)
  call void @ASET(i64 %156, i64 %157, i64 %call214)
  %158 = load i64, i64* %idx, align 8
  %inc215 = add nsw i64 %158, 1
  store i64 %inc215, i64* %idx, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end.213
  %159 = load i64, i64* %idx, align 8
  %160 = load i64, i64* %state, align 8
  %call216 = call i64 @ASIZE(i64 %160)
  %cmp217 = icmp slt i64 %159, %call216
  br i1 %cmp217, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %161 = load i64, i64* %state, align 8
  %162 = load i64, i64* %idx, align 8
  %call219 = call i64 @builtin_lisp_symbol(i32 598)
  call void @ASET(i64 %161, i64 %162, i64 %call219)
  %163 = load i64, i64* %idx, align 8
  %inc220 = add nsw i64 %163, 1
  store i64 %inc220, i64* %idx, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call221 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call221, i64* %retval
  br label %return

return:                                           ; preds = %while.end, %if.then.104
  %164 = load i64, i64* %retval
  ret i64 %164
}

declare i64 @Fsymbol_value(i64) #1

declare zeroext i1 @VECTORP(i64) #1

declare i64 @ASIZE(i64) #1

declare i64 @AREF(i64, i64) #1

declare zeroext i8 @SREF(i64, i64) #1

declare i64 @Fbuffer_modified_p(i64) #1

declare i64 @Fmake_vector(i64, i64) #1

declare i64 @Fset(i64, i64) #1

declare void @ASET(i64, i64, i64) #1

; Function Attrs: nounwind uwtable
define void @init_display() #0 {
entry:
  %terminal_type = alloca i8*, align 8
  %action = alloca %struct.sigaction, align 8
  %display = alloca i8*, align 8
  %t = alloca %struct.terminal*, align 8
  %f = alloca %struct.frame*, align 8
  %tty_type_arg = alloca i64, align 8
  %.compoundliteral = alloca %union.Aligned_Cons, align 8
  %.compoundliteral77 = alloca %union.Aligned_Cons, align 8
  %tty_arg = alloca i64, align 8
  %.compoundliteral90 = alloca %union.Aligned_Cons, align 8
  %.compoundliteral93 = alloca %union.Aligned_Cons, align 8
  %sf = alloca %struct.frame*, align 8
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  %area = alloca i32, align 4
  %sf4568 = alloca %struct.frame*, align 8
  %bf.load = load i32, i32* bitcast (i24* getelementptr inbounds (%struct.glyph, %struct.glyph* @space_glyph, i32 0, i32 6) to i32*), align 8
  %bf.clear = and i32 %bf.load, -8
  store i32 %bf.clear, i32* bitcast (i24* getelementptr inbounds (%struct.glyph, %struct.glyph* @space_glyph, i32 0, i32 6) to i32*), align 8
  br label %do.body

do.body:                                          ; preds = %entry
  store i32 32, i32* getelementptr inbounds (%struct.glyph, %struct.glyph* @space_glyph, i32 0, i32 9, i32 0), align 4
  %bf.load1 = load i32, i32* bitcast (i24* getelementptr inbounds (%struct.glyph, %struct.glyph* @space_glyph, i32 0, i32 7) to i32*), align 4
  %bf.clear2 = and i32 %bf.load1, -1048576
  store i32 %bf.clear2, i32* bitcast (i24* getelementptr inbounds (%struct.glyph, %struct.glyph* @space_glyph, i32 0, i32 7) to i32*), align 4
  %bf.load3 = load i32, i32* bitcast (i24* getelementptr inbounds (%struct.glyph, %struct.glyph* @space_glyph, i32 0, i32 6) to i32*), align 8
  %bf.clear4 = and i32 %bf.load3, -129
  store i32 %bf.clear4, i32* bitcast (i24* getelementptr inbounds (%struct.glyph, %struct.glyph* @space_glyph, i32 0, i32 6) to i32*), align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  store i64 -1, i64* getelementptr inbounds (%struct.glyph, %struct.glyph* @space_glyph, i32 0, i32 0), align 8
  store i8 0, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 462), align 1
  store i8 0, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 431), align 1
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 142), align 8
  %0 = load i8, i8* @initialized, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  call void @emacs_sigaction_init(%struct.sigaction* %action, void (i32)* @deliver_window_change_signal)
  %call5 = call i32 @sigaction(i32 28, %struct.sigaction* %action, %struct.sigaction* null) #2
  br label %if.end

if.end:                                           ; preds = %if.then, %do.end
  %1 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @daemon_pipe, i32 0, i64 1), align 4
  %cmp = icmp ne i32 %1, 0
  br i1 %cmp, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end
  br label %if.end.4583

if.end.7:                                         ; preds = %if.end
  %2 = load i8, i8* @inhibit_window_system, align 1
  %tobool8 = trunc i8 %2 to i1
  br i1 %tobool8, label %if.end.22, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end.7
  %3 = load i8, i8* @display_arg, align 1
  %tobool9 = trunc i8 %3 to i1
  br i1 %tobool9, label %if.end.22, label %if.then.10

if.then.10:                                       ; preds = %land.lhs.true
  %call11 = call i8* @getenv(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0)) #2
  store i8* %call11, i8** %display, align 8
  %4 = load i8*, i8** %display, align 8
  %cmp12 = icmp ne i8* %4, null
  br i1 %cmp12, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.10
  %5 = load i8*, i8** %display, align 8
  %6 = load i8, i8* %5, align 1
  %conv = sext i8 %6 to i32
  %cmp13 = icmp ne i32 %conv, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.10
  %7 = phi i1 [ false, %if.then.10 ], [ %cmp13, %land.rhs ]
  %frombool = zext i1 %7 to i8
  store i8 %frombool, i8* @display_arg, align 1
  %8 = load i8, i8* @display_arg, align 1
  %tobool15 = trunc i8 %8 to i1
  br i1 %tobool15, label %land.lhs.true.17, label %if.end.21

land.lhs.true.17:                                 ; preds = %land.end
  %9 = load i8*, i8** %display, align 8
  %call18 = call zeroext i1 @x_display_ok(i8* %9)
  br i1 %call18, label %if.end.21, label %if.then.19

if.then.19:                                       ; preds = %land.lhs.true.17
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %11 = load i8*, i8** %display, align 8
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.7, i32 0, i32 0), i8* %11)
  store i8 1, i8* @inhibit_window_system, align 1
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.19, %land.lhs.true.17, %land.end
  br label %if.end.22

if.end.22:                                        ; preds = %if.end.21, %land.lhs.true, %if.end.7
  %12 = load i8, i8* @inhibit_window_system, align 1
  %tobool23 = trunc i8 %12 to i1
  br i1 %tobool23, label %if.end.29, label %land.lhs.true.24

land.lhs.true.24:                                 ; preds = %if.end.22
  %13 = load i8, i8* @display_arg, align 1
  %tobool25 = trunc i8 %13 to i1
  br i1 %tobool25, label %if.then.27, label %if.end.29

if.then.27:                                       ; preds = %land.lhs.true.24
  %call28 = call i64 @builtin_lisp_symbol(i32 1045)
  store i64 %call28, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 142), align 8
  store i64 46, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 334), align 8
  br label %if.end.4583

if.end.29:                                        ; preds = %land.lhs.true.24, %if.end.22
  %call30 = call i32 @isatty(i32 0) #2
  %tobool31 = icmp ne i32 %call30, 0
  br i1 %tobool31, label %if.end.33, label %if.then.32

if.then.32:                                       ; preds = %if.end.29
  call void (i8*, ...) @fatal(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8, i32 0, i32 0)) #8
  unreachable

if.end.33:                                        ; preds = %if.end.29
  %call34 = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0)) #2
  store i8* %call34, i8** %terminal_type, align 8
  %14 = load i8*, i8** %terminal_type, align 8
  %tobool35 = icmp ne i8* %14, null
  br i1 %tobool35, label %if.end.42, label %if.then.36

if.then.36:                                       ; preds = %if.end.33
  %15 = load i8, i8* @inhibit_window_system, align 1
  %tobool37 = trunc i8 %15 to i1
  br i1 %tobool37, label %if.else, label %if.then.38

if.then.38:                                       ; preds = %if.then.36
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call39 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.10, i32 0, i32 0))
  br label %if.end.41

if.else:                                          ; preds = %if.then.36
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call40 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.11, i32 0, i32 0))
  br label %if.end.41

if.end.41:                                        ; preds = %if.else, %if.then.38
  call void @exit(i32 1) #11
  unreachable

if.end.42:                                        ; preds = %if.end.33
  %18 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %18, 5
  %19 = inttoptr i64 %sub to i8*
  %20 = bitcast i8* %19 to %struct.frame*
  store %struct.frame* %20, %struct.frame** %f, align 8
  call void @init_foreground_group()
  %21 = load i8*, i8** %terminal_type, align 8
  %call43 = call %struct.terminal* @init_tty(i8* null, i8* %21, i1 zeroext true)
  store %struct.terminal* %call43, %struct.terminal** %t, align 8
  %22 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %22, i32 0, i32 26
  %23 = bitcast i48* %output_method to i64*
  %bf.load44 = load i64, i64* %23, align 8
  %bf.lshr = lshr i64 %bf.load44, 23
  %bf.clear45 = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear45 to i32
  %cmp46 = icmp ne i32 %bf.cast, 0
  br i1 %cmp46, label %if.then.48, label %if.end.49

if.then.48:                                       ; preds = %if.end.42
  call void @emacs_abort() #8
  unreachable

if.end.49:                                        ; preds = %if.end.42
  %24 = load %struct.terminal*, %struct.terminal** %t, align 8
  %type = getelementptr inbounds %struct.terminal, %struct.terminal* %24, i32 0, i32 8
  %25 = load i32, i32* %type, align 4
  %26 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method50 = getelementptr inbounds %struct.frame, %struct.frame* %26, i32 0, i32 26
  %27 = bitcast i48* %output_method50 to i64*
  %28 = zext i32 %25 to i64
  %bf.load51 = load i64, i64* %27, align 8
  %bf.value = and i64 %28, 7
  %bf.shl = shl i64 %bf.value, 23
  %bf.clear52 = and i64 %bf.load51, -58720257
  %bf.set = or i64 %bf.clear52, %bf.shl
  store i64 %bf.set, i64* %27, align 8
  %bf.result.cast = trunc i64 %bf.value to i32
  %29 = load %struct.terminal*, %struct.terminal** %t, align 8
  %30 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 61
  store %struct.terminal* %29, %struct.terminal** %terminal, align 8
  %31 = load %struct.terminal*, %struct.terminal** %t, align 8
  %reference_count = getelementptr inbounds %struct.terminal, %struct.terminal* %31, i32 0, i32 7
  %32 = load i32, i32* %reference_count, align 4
  %inc = add nsw i32 %32, 1
  store i32 %inc, i32* %reference_count, align 4
  %33 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method53 = getelementptr inbounds %struct.frame, %struct.frame* %33, i32 0, i32 26
  %34 = bitcast i48* %output_method53 to i64*
  %bf.load54 = load i64, i64* %34, align 8
  %bf.lshr55 = lshr i64 %bf.load54, 23
  %bf.clear56 = and i64 %bf.lshr55, 7
  %bf.cast57 = trunc i64 %bf.clear56 to i32
  %cmp58 = icmp eq i32 %bf.cast57, 1
  br i1 %cmp58, label %if.then.60, label %if.end.61

if.then.60:                                       ; preds = %if.end.49
  %35 = load %struct.frame*, %struct.frame** %f, align 8
  call void @create_tty_output(%struct.frame* %35)
  br label %if.end.61

if.end.61:                                        ; preds = %if.then.60, %if.end.49
  %36 = load i64, i64* @selected_frame, align 8
  %37 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %37, i32 0, i32 12
  %tty = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %38 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %top_frame = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %38, i32 0, i32 11
  store i64 %36, i64* %top_frame, align 8
  %39 = load i64, i64* @selected_frame, align 8
  %sub62 = sub nsw i64 %39, 5
  %40 = inttoptr i64 %sub62 to i8*
  %41 = bitcast i8* %40 to %struct.frame*
  %42 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info63 = getelementptr inbounds %struct.terminal, %struct.terminal* %42, i32 0, i32 12
  %tty64 = bitcast %union.display_info* %display_info63 to %struct.tty_display_info**
  %43 = load %struct.tty_display_info*, %struct.tty_display_info** %tty64, align 8
  %Wcm = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %43, i32 0, i32 10
  %44 = load %struct.cm*, %struct.cm** %Wcm, align 8
  %cm_cols = getelementptr inbounds %struct.cm, %struct.cm* %44, i32 0, i32 18
  %45 = load i32, i32* %cm_cols, align 4
  %46 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info65 = getelementptr inbounds %struct.terminal, %struct.terminal* %46, i32 0, i32 12
  %tty66 = bitcast %union.display_info* %display_info65 to %struct.tty_display_info**
  %47 = load %struct.tty_display_info*, %struct.tty_display_info** %tty66, align 8
  %Wcm67 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %47, i32 0, i32 10
  %48 = load %struct.cm*, %struct.cm** %Wcm67, align 8
  %cm_rows = getelementptr inbounds %struct.cm, %struct.cm* %48, i32 0, i32 19
  %49 = load i32, i32* %cm_rows, align 4
  %50 = load %struct.frame*, %struct.frame** %f, align 8
  %menu_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %50, i32 0, i32 57
  %51 = load i32, i32* %menu_bar_lines, align 4
  %sub68 = sub nsw i32 %49, %51
  call void @change_frame_size(%struct.frame* %41, i32 %45, i32 %sub68, i1 zeroext false, i1 zeroext false, i1 zeroext true, i1 zeroext false)
  %52 = load %struct.terminal*, %struct.terminal** @initial_terminal, align 8
  %reference_count69 = getelementptr inbounds %struct.terminal, %struct.terminal* %52, i32 0, i32 7
  %53 = load i32, i32* %reference_count69, align 4
  %dec = add nsw i32 %53, -1
  store i32 %dec, i32* %reference_count69, align 4
  %cmp70 = icmp eq i32 %dec, 0
  br i1 %cmp70, label %land.lhs.true.72, label %if.end.76

land.lhs.true.72:                                 ; preds = %if.end.61
  %54 = load %struct.terminal*, %struct.terminal** @initial_terminal, align 8
  %delete_terminal_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %54, i32 0, i32 46
  %55 = load void (%struct.terminal*)*, void (%struct.terminal*)** %delete_terminal_hook, align 8
  %tobool73 = icmp ne void (%struct.terminal*)* %55, null
  br i1 %tobool73, label %if.then.74, label %if.end.76

if.then.74:                                       ; preds = %land.lhs.true.72
  %56 = load %struct.terminal*, %struct.terminal** @initial_terminal, align 8
  %delete_terminal_hook75 = getelementptr inbounds %struct.terminal, %struct.terminal* %56, i32 0, i32 46
  %57 = load void (%struct.terminal*)*, void (%struct.terminal*)** %delete_terminal_hook75, align 8
  %58 = load %struct.terminal*, %struct.terminal** @initial_terminal, align 8
  call void %57(%struct.terminal* %58)
  br label %if.end.76

if.end.76:                                        ; preds = %if.then.74, %land.lhs.true.72, %if.end.61
  %s = bitcast %union.Aligned_Cons* %.compoundliteral to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %s, i32 0, i32 0
  %s78 = bitcast %union.Aligned_Cons* %.compoundliteral77 to %struct.Lisp_Cons*
  %car79 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %s78, i32 0, i32 0
  %call80 = call i64 @builtin_lisp_symbol(i32 955)
  store i64 %call80, i64* %car79, align 8
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %s78, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %59 = load i64, i64* @selected_frame, align 8
  %call81 = call i64 @Ftty_type(i64 %59)
  store i64 %call81, i64* %cdr, align 8
  %s82 = bitcast %union.Aligned_Cons* %.compoundliteral77 to %struct.Lisp_Cons*
  %60 = bitcast %struct.Lisp_Cons* %s82 to i8*
  %call83 = call i64 @make_lisp_ptr(i8* %60, i32 3)
  store i64 %call83, i64* %car, align 8
  %u84 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %s, i32 0, i32 1
  %cdr85 = bitcast %union.anon.11* %u84 to i64*
  %call86 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call86, i64* %cdr85, align 8
  %s87 = bitcast %union.Aligned_Cons* %.compoundliteral to %struct.Lisp_Cons*
  %61 = bitcast %struct.Lisp_Cons* %s87 to i8*
  %call88 = call i64 @make_lisp_ptr(i8* %61, i32 3)
  store i64 %call88, i64* %tty_type_arg, align 8
  %62 = load i64, i64* @selected_frame, align 8
  %63 = load i64, i64* %tty_type_arg, align 8
  %call89 = call i64 @Fmodify_frame_parameters(i64 %62, i64 %63)
  %s91 = bitcast %union.Aligned_Cons* %.compoundliteral90 to %struct.Lisp_Cons*
  %car92 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %s91, i32 0, i32 0
  %s94 = bitcast %union.Aligned_Cons* %.compoundliteral93 to %struct.Lisp_Cons*
  %car95 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %s94, i32 0, i32 0
  %call96 = call i64 @builtin_lisp_symbol(i32 938)
  store i64 %call96, i64* %car95, align 8
  %u97 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %s94, i32 0, i32 1
  %cdr98 = bitcast %union.anon.11* %u97 to i64*
  %64 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info99 = getelementptr inbounds %struct.terminal, %struct.terminal* %64, i32 0, i32 12
  %tty100 = bitcast %union.display_info* %display_info99 to %struct.tty_display_info**
  %65 = load %struct.tty_display_info*, %struct.tty_display_info** %tty100, align 8
  %name = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %65, i32 0, i32 1
  %66 = load i8*, i8** %name, align 8
  %tobool101 = icmp ne i8* %66, null
  br i1 %tobool101, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.76
  %67 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info102 = getelementptr inbounds %struct.terminal, %struct.terminal* %67, i32 0, i32 12
  %tty103 = bitcast %union.display_info* %display_info102 to %struct.tty_display_info**
  %68 = load %struct.tty_display_info*, %struct.tty_display_info** %tty103, align 8
  %name104 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %68, i32 0, i32 1
  %69 = load i8*, i8** %name104, align 8
  %call105 = call i64 @build_string(i8* %69)
  br label %cond.end

cond.false:                                       ; preds = %if.end.76
  %call106 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call105, %cond.true ], [ %call106, %cond.false ]
  store i64 %cond, i64* %cdr98, align 8
  %s107 = bitcast %union.Aligned_Cons* %.compoundliteral93 to %struct.Lisp_Cons*
  %70 = bitcast %struct.Lisp_Cons* %s107 to i8*
  %call108 = call i64 @make_lisp_ptr(i8* %70, i32 3)
  store i64 %call108, i64* %car92, align 8
  %u109 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %s91, i32 0, i32 1
  %cdr110 = bitcast %union.anon.11* %u109 to i64*
  %call111 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call111, i64* %cdr110, align 8
  %s112 = bitcast %union.Aligned_Cons* %.compoundliteral90 to %struct.Lisp_Cons*
  %71 = bitcast %struct.Lisp_Cons* %s112 to i8*
  %call113 = call i64 @make_lisp_ptr(i8* %71, i32 3)
  store i64 %call113, i64* %tty_arg, align 8
  %72 = load i64, i64* @selected_frame, align 8
  %73 = load i64, i64* %tty_arg, align 8
  %call114 = call i64 @Fmodify_frame_parameters(i64 %72, i64 %73)
  %74 = load i64, i64* @selected_frame, align 8
  %call115 = call zeroext i1 @FRAMEP(i64 %74)
  br i1 %call115, label %land.lhs.true.117, label %cond.false.124

land.lhs.true.117:                                ; preds = %cond.end
  %75 = load i64, i64* @selected_frame, align 8
  %sub118 = sub nsw i64 %75, 5
  %76 = inttoptr i64 %sub118 to i8*
  %77 = bitcast i8* %76 to %struct.frame*
  %terminal119 = getelementptr inbounds %struct.frame, %struct.frame* %77, i32 0, i32 61
  %78 = load %struct.terminal*, %struct.terminal** %terminal119, align 8
  %cmp120 = icmp ne %struct.terminal* %78, null
  br i1 %cmp120, label %cond.true.122, label %cond.false.124

cond.true.122:                                    ; preds = %land.lhs.true.117
  %79 = load i64, i64* @selected_frame, align 8
  %sub123 = sub nsw i64 %79, 5
  %80 = inttoptr i64 %sub123 to i8*
  %81 = bitcast i8* %80 to %struct.frame*
  br label %cond.end.125

cond.false.124:                                   ; preds = %land.lhs.true.117, %cond.end
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.125

cond.end.125:                                     ; preds = %82, %cond.true.122
  %cond126 = phi %struct.frame* [ %81, %cond.true.122 ], [ null, %82 ]
  store %struct.frame* %cond126, %struct.frame** %sf, align 8
  %83 = load %struct.frame*, %struct.frame** %sf, align 8
  %total_cols = getelementptr inbounds %struct.frame, %struct.frame* %83, i32 0, i32 38
  %84 = load i32, i32* %total_cols, align 4
  store i32 %84, i32* %width, align 4
  %85 = load %struct.frame*, %struct.frame** %sf, align 8
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %85, i32 0, i32 39
  %86 = load i32, i32* %total_lines, align 4
  store i32 %86, i32* %height, align 4
  br i1 false, label %cond.true.127, label %cond.false.483

cond.true.127:                                    ; preds = %cond.end.125
  br i1 false, label %cond.true.128, label %cond.false.324

cond.true.128:                                    ; preds = %cond.true.127
  %87 = load i32, i32* %width, align 4
  %conv129 = trunc i32 %87 to i8
  %conv130 = sext i8 %conv129 to i32
  %add = add nsw i32 0, %conv130
  %mul = mul nsw i32 0, %add
  %sub131 = sub nsw i32 %mul, 1
  %cmp132 = icmp slt i32 %sub131, 0
  br i1 %cmp132, label %cond.true.134, label %cond.false.152

cond.true.134:                                    ; preds = %cond.true.128
  %88 = load i32, i32* %width, align 4
  %conv135 = trunc i32 %88 to i8
  %conv136 = sext i8 %conv135 to i32
  %add137 = add nsw i32 0, %conv136
  %mul138 = mul nsw i32 0, %add137
  %add139 = add nsw i32 %mul138, 0
  %neg = xor i32 %add139, -1
  %cmp140 = icmp eq i32 %neg, -1
  %conv141 = zext i1 %cmp140 to i32
  %sub142 = sub nsw i32 0, %conv141
  %89 = load i32, i32* %width, align 4
  %conv143 = trunc i32 %89 to i8
  %conv144 = sext i8 %conv143 to i32
  %add145 = add nsw i32 0, %conv144
  %mul146 = mul nsw i32 0, %add145
  %add147 = add nsw i32 %mul146, 1
  %shl = shl i32 %add147, 30
  %sub148 = sub nsw i32 %shl, 1
  %mul149 = mul nsw i32 %sub148, 2
  %add150 = add nsw i32 %mul149, 1
  %sub151 = sub nsw i32 %sub142, %add150
  br label %cond.end.158

cond.false.152:                                   ; preds = %cond.true.128
  %90 = load i32, i32* %width, align 4
  %conv153 = trunc i32 %90 to i8
  %conv154 = sext i8 %conv153 to i32
  %add155 = add nsw i32 0, %conv154
  %mul156 = mul nsw i32 0, %add155
  %add157 = add nsw i32 %mul156, 0
  br label %cond.end.158

cond.end.158:                                     ; preds = %cond.false.152, %cond.true.134
  %cond159 = phi i32 [ %sub151, %cond.true.134 ], [ %add157, %cond.false.152 ]
  %cmp160 = icmp slt i32 %cond159, 0
  br i1 %cmp160, label %cond.true.162, label %cond.false.235

cond.true.162:                                    ; preds = %cond.end.158
  br i1 false, label %cond.true.163, label %cond.false.204

cond.true.163:                                    ; preds = %cond.true.162
  %91 = load i32, i32* %width, align 4
  %conv164 = trunc i32 %91 to i8
  %conv165 = sext i8 %conv164 to i32
  %92 = load i32, i32* %width, align 4
  %conv166 = trunc i32 %92 to i8
  %conv167 = sext i8 %conv166 to i32
  %add168 = add nsw i32 0, %conv167
  %mul169 = mul nsw i32 0, %add168
  %sub170 = sub nsw i32 %mul169, 1
  %cmp171 = icmp slt i32 %sub170, 0
  br i1 %cmp171, label %cond.true.173, label %cond.false.193

cond.true.173:                                    ; preds = %cond.true.163
  %93 = load i32, i32* %width, align 4
  %conv174 = trunc i32 %93 to i8
  %conv175 = sext i8 %conv174 to i32
  %add176 = add nsw i32 0, %conv175
  %mul177 = mul nsw i32 0, %add176
  %add178 = add nsw i32 %mul177, 0
  %neg179 = xor i32 %add178, -1
  %cmp180 = icmp eq i32 %neg179, -1
  %conv181 = zext i1 %cmp180 to i32
  %sub182 = sub nsw i32 0, %conv181
  %94 = load i32, i32* %width, align 4
  %conv183 = trunc i32 %94 to i8
  %conv184 = sext i8 %conv183 to i32
  %add185 = add nsw i32 0, %conv184
  %mul186 = mul nsw i32 0, %add185
  %add187 = add nsw i32 %mul186, 1
  %shl188 = shl i32 %add187, 30
  %sub189 = sub nsw i32 %shl188, 1
  %mul190 = mul nsw i32 %sub189, 2
  %add191 = add nsw i32 %mul190, 1
  %sub192 = sub nsw i32 %sub182, %add191
  br label %cond.end.199

cond.false.193:                                   ; preds = %cond.true.163
  %95 = load i32, i32* %width, align 4
  %conv194 = trunc i32 %95 to i8
  %conv195 = sext i8 %conv194 to i32
  %add196 = add nsw i32 0, %conv195
  %mul197 = mul nsw i32 0, %add196
  %add198 = add nsw i32 %mul197, 0
  br label %cond.end.199

cond.end.199:                                     ; preds = %cond.false.193, %cond.true.173
  %cond200 = phi i32 [ %sub192, %cond.true.173 ], [ %add198, %cond.false.193 ]
  %sub201 = sub nsw i32 %cond200, 2
  %cmp202 = icmp slt i32 %conv165, %sub201
  br i1 %cmp202, label %cond.true.280, label %lor.lhs.false

cond.false.204:                                   ; preds = %cond.true.162
  %96 = load i32, i32* %width, align 4
  %conv205 = trunc i32 %96 to i8
  %conv206 = sext i8 %conv205 to i32
  %add207 = add nsw i32 0, %conv206
  %mul208 = mul nsw i32 0, %add207
  %sub209 = sub nsw i32 %mul208, 1
  %cmp210 = icmp slt i32 %sub209, 0
  br i1 %cmp210, label %cond.true.212, label %cond.false.222

cond.true.212:                                    ; preds = %cond.false.204
  %97 = load i32, i32* %width, align 4
  %conv213 = trunc i32 %97 to i8
  %conv214 = sext i8 %conv213 to i32
  %add215 = add nsw i32 0, %conv214
  %mul216 = mul nsw i32 0, %add215
  %add217 = add nsw i32 %mul216, 1
  %shl218 = shl i32 %add217, 30
  %sub219 = sub nsw i32 %shl218, 1
  %mul220 = mul nsw i32 %sub219, 2
  %add221 = add nsw i32 %mul220, 1
  br label %cond.end.228

cond.false.222:                                   ; preds = %cond.false.204
  %98 = load i32, i32* %width, align 4
  %conv223 = trunc i32 %98 to i8
  %conv224 = sext i8 %conv223 to i32
  %add225 = add nsw i32 0, %conv224
  %mul226 = mul nsw i32 0, %add225
  %sub227 = sub nsw i32 %mul226, 1
  br label %cond.end.228

cond.end.228:                                     ; preds = %cond.false.222, %cond.true.212
  %cond229 = phi i32 [ %add221, %cond.true.212 ], [ %sub227, %cond.false.222 ]
  %sub230 = sub nsw i32 %cond229, 2
  %99 = load i32, i32* %width, align 4
  %conv231 = trunc i32 %99 to i8
  %conv232 = sext i8 %conv231 to i32
  %cmp233 = icmp slt i32 %sub230, %conv232
  br i1 %cmp233, label %cond.true.280, label %lor.lhs.false

cond.false.235:                                   ; preds = %cond.end.158
  %100 = load i32, i32* %width, align 4
  %conv236 = trunc i32 %100 to i8
  %conv237 = sext i8 %conv236 to i32
  %cmp238 = icmp slt i32 %conv237, 0
  br i1 %cmp238, label %cond.true.240, label %cond.false.246

cond.true.240:                                    ; preds = %cond.false.235
  %101 = load i32, i32* %width, align 4
  %conv241 = trunc i32 %101 to i8
  %conv242 = sext i8 %conv241 to i32
  %add243 = add nsw i32 %conv242, 2
  %cmp244 = icmp sle i32 2, %add243
  br i1 %cmp244, label %cond.true.280, label %lor.lhs.false

cond.false.246:                                   ; preds = %cond.false.235
  br i1 false, label %cond.true.247, label %cond.false.255

cond.true.247:                                    ; preds = %cond.false.246
  %102 = load i32, i32* %width, align 4
  %conv248 = trunc i32 %102 to i8
  %conv249 = sext i8 %conv248 to i32
  %103 = load i32, i32* %width, align 4
  %conv250 = trunc i32 %103 to i8
  %conv251 = sext i8 %conv250 to i32
  %add252 = add nsw i32 %conv251, 2
  %cmp253 = icmp sle i32 %conv249, %add252
  br i1 %cmp253, label %cond.true.280, label %lor.lhs.false

cond.false.255:                                   ; preds = %cond.false.246
  %104 = load i32, i32* %width, align 4
  %conv256 = trunc i32 %104 to i8
  %conv257 = sext i8 %conv256 to i32
  %add258 = add nsw i32 %conv257, 2
  %cmp259 = icmp slt i32 %add258, 2
  br i1 %cmp259, label %cond.true.280, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false.255, %cond.true.247, %cond.true.240, %cond.end.228, %cond.end.199
  %105 = load i32, i32* %width, align 4
  %conv261 = trunc i32 %105 to i8
  %conv262 = sext i8 %conv261 to i32
  %add263 = add nsw i32 %conv262, 2
  %mul264 = mul nsw i32 0, %add263
  %sub265 = sub nsw i32 %mul264, 1
  %cmp266 = icmp slt i32 %sub265, 0
  br i1 %cmp266, label %land.lhs.true.268, label %lor.lhs.false.274

land.lhs.true.268:                                ; preds = %lor.lhs.false
  %106 = load i32, i32* %width, align 4
  %conv269 = trunc i32 %106 to i8
  %conv270 = sext i8 %conv269 to i32
  %add271 = add nsw i32 %conv270, 2
  %cmp272 = icmp slt i32 %add271, -128
  br i1 %cmp272, label %cond.true.280, label %lor.lhs.false.274

lor.lhs.false.274:                                ; preds = %land.lhs.true.268, %lor.lhs.false
  %107 = load i32, i32* %width, align 4
  %conv275 = trunc i32 %107 to i8
  %conv276 = sext i8 %conv275 to i32
  %add277 = add nsw i32 %conv276, 2
  %cmp278 = icmp slt i32 127, %add277
  br i1 %cmp278, label %cond.true.280, label %cond.false.302

cond.true.280:                                    ; preds = %lor.lhs.false.274, %land.lhs.true.268, %cond.false.255, %cond.true.247, %cond.true.240, %cond.end.228, %cond.end.199
  %108 = load i32, i32* %width, align 4
  %conv281 = trunc i32 %108 to i8
  %conv282 = zext i8 %conv281 to i32
  %add283 = add nsw i32 %conv282, 2
  %cmp284 = icmp sle i32 %add283, 127
  br i1 %cmp284, label %cond.true.286, label %cond.false.292

cond.true.286:                                    ; preds = %cond.true.280
  %109 = load i32, i32* %width, align 4
  %conv287 = trunc i32 %109 to i8
  %conv288 = zext i8 %conv287 to i32
  %add289 = add nsw i32 %conv288, 2
  %conv290 = trunc i32 %add289 to i8
  %conv291 = sext i8 %conv290 to i32
  br label %cond.end.300

cond.false.292:                                   ; preds = %cond.true.280
  %110 = load i32, i32* %width, align 4
  %conv293 = trunc i32 %110 to i8
  %conv294 = zext i8 %conv293 to i32
  %add295 = add nsw i32 %conv294, 2
  %sub296 = sub nsw i32 %add295, -128
  %conv297 = trunc i32 %sub296 to i8
  %conv298 = sext i8 %conv297 to i32
  %add299 = add nsw i32 %conv298, -128
  br label %cond.end.300

cond.end.300:                                     ; preds = %cond.false.292, %cond.true.286
  %cond301 = phi i32 [ %conv291, %cond.true.286 ], [ %add299, %cond.false.292 ]
  store i32 %cond301, i32* %area, align 4
  br i1 true, label %if.then.4556, label %lor.lhs.false.1766

cond.false.302:                                   ; preds = %lor.lhs.false.274
  %111 = load i32, i32* %width, align 4
  %conv303 = trunc i32 %111 to i8
  %conv304 = zext i8 %conv303 to i32
  %add305 = add nsw i32 %conv304, 2
  %cmp306 = icmp sle i32 %add305, 127
  br i1 %cmp306, label %cond.true.308, label %cond.false.314

cond.true.308:                                    ; preds = %cond.false.302
  %112 = load i32, i32* %width, align 4
  %conv309 = trunc i32 %112 to i8
  %conv310 = zext i8 %conv309 to i32
  %add311 = add nsw i32 %conv310, 2
  %conv312 = trunc i32 %add311 to i8
  %conv313 = sext i8 %conv312 to i32
  br label %cond.end.322

cond.false.314:                                   ; preds = %cond.false.302
  %113 = load i32, i32* %width, align 4
  %conv315 = trunc i32 %113 to i8
  %conv316 = zext i8 %conv315 to i32
  %add317 = add nsw i32 %conv316, 2
  %sub318 = sub nsw i32 %add317, -128
  %conv319 = trunc i32 %sub318 to i8
  %conv320 = sext i8 %conv319 to i32
  %add321 = add nsw i32 %conv320, -128
  br label %cond.end.322

cond.end.322:                                     ; preds = %cond.false.314, %cond.true.308
  %cond323 = phi i32 [ %conv313, %cond.true.308 ], [ %add321, %cond.false.314 ]
  store i32 %cond323, i32* %area, align 4
  br i1 false, label %if.then.4556, label %lor.lhs.false.1766

cond.false.324:                                   ; preds = %cond.true.127
  %114 = load i32, i32* %width, align 4
  %add325 = add nsw i32 0, %114
  %mul326 = mul nsw i32 0, %add325
  %sub327 = sub nsw i32 %mul326, 1
  %cmp328 = icmp slt i32 %sub327, 0
  br i1 %cmp328, label %cond.true.330, label %cond.false.346

cond.true.330:                                    ; preds = %cond.false.324
  %115 = load i32, i32* %width, align 4
  %add331 = add nsw i32 0, %115
  %mul332 = mul nsw i32 0, %add331
  %add333 = add nsw i32 %mul332, 0
  %neg334 = xor i32 %add333, -1
  %cmp335 = icmp eq i32 %neg334, -1
  %conv336 = zext i1 %cmp335 to i32
  %sub337 = sub nsw i32 0, %conv336
  %116 = load i32, i32* %width, align 4
  %add338 = add nsw i32 0, %116
  %mul339 = mul nsw i32 0, %add338
  %add340 = add nsw i32 %mul339, 1
  %shl341 = shl i32 %add340, 30
  %sub342 = sub nsw i32 %shl341, 1
  %mul343 = mul nsw i32 %sub342, 2
  %add344 = add nsw i32 %mul343, 1
  %sub345 = sub nsw i32 %sub337, %add344
  br label %cond.end.350

cond.false.346:                                   ; preds = %cond.false.324
  %117 = load i32, i32* %width, align 4
  %add347 = add nsw i32 0, %117
  %mul348 = mul nsw i32 0, %add347
  %add349 = add nsw i32 %mul348, 0
  br label %cond.end.350

cond.end.350:                                     ; preds = %cond.false.346, %cond.true.330
  %cond351 = phi i32 [ %sub345, %cond.true.330 ], [ %add349, %cond.false.346 ]
  %cmp352 = icmp slt i32 %cond351, 0
  br i1 %cmp352, label %cond.true.354, label %cond.false.409

cond.true.354:                                    ; preds = %cond.end.350
  br i1 false, label %cond.true.355, label %cond.false.386

cond.true.355:                                    ; preds = %cond.true.354
  %118 = load i32, i32* %width, align 4
  %119 = load i32, i32* %width, align 4
  %add356 = add nsw i32 0, %119
  %mul357 = mul nsw i32 0, %add356
  %sub358 = sub nsw i32 %mul357, 1
  %cmp359 = icmp slt i32 %sub358, 0
  br i1 %cmp359, label %cond.true.361, label %cond.false.377

cond.true.361:                                    ; preds = %cond.true.355
  %120 = load i32, i32* %width, align 4
  %add362 = add nsw i32 0, %120
  %mul363 = mul nsw i32 0, %add362
  %add364 = add nsw i32 %mul363, 0
  %neg365 = xor i32 %add364, -1
  %cmp366 = icmp eq i32 %neg365, -1
  %conv367 = zext i1 %cmp366 to i32
  %sub368 = sub nsw i32 0, %conv367
  %121 = load i32, i32* %width, align 4
  %add369 = add nsw i32 0, %121
  %mul370 = mul nsw i32 0, %add369
  %add371 = add nsw i32 %mul370, 1
  %shl372 = shl i32 %add371, 30
  %sub373 = sub nsw i32 %shl372, 1
  %mul374 = mul nsw i32 %sub373, 2
  %add375 = add nsw i32 %mul374, 1
  %sub376 = sub nsw i32 %sub368, %add375
  br label %cond.end.381

cond.false.377:                                   ; preds = %cond.true.355
  %122 = load i32, i32* %width, align 4
  %add378 = add nsw i32 0, %122
  %mul379 = mul nsw i32 0, %add378
  %add380 = add nsw i32 %mul379, 0
  br label %cond.end.381

cond.end.381:                                     ; preds = %cond.false.377, %cond.true.361
  %cond382 = phi i32 [ %sub376, %cond.true.361 ], [ %add380, %cond.false.377 ]
  %sub383 = sub nsw i32 %cond382, 2
  %cmp384 = icmp slt i32 %118, %sub383
  br i1 %cmp384, label %cond.true.439, label %lor.lhs.false.425

cond.false.386:                                   ; preds = %cond.true.354
  %123 = load i32, i32* %width, align 4
  %add387 = add nsw i32 0, %123
  %mul388 = mul nsw i32 0, %add387
  %sub389 = sub nsw i32 %mul388, 1
  %cmp390 = icmp slt i32 %sub389, 0
  br i1 %cmp390, label %cond.true.392, label %cond.false.400

cond.true.392:                                    ; preds = %cond.false.386
  %124 = load i32, i32* %width, align 4
  %add393 = add nsw i32 0, %124
  %mul394 = mul nsw i32 0, %add393
  %add395 = add nsw i32 %mul394, 1
  %shl396 = shl i32 %add395, 30
  %sub397 = sub nsw i32 %shl396, 1
  %mul398 = mul nsw i32 %sub397, 2
  %add399 = add nsw i32 %mul398, 1
  br label %cond.end.404

cond.false.400:                                   ; preds = %cond.false.386
  %125 = load i32, i32* %width, align 4
  %add401 = add nsw i32 0, %125
  %mul402 = mul nsw i32 0, %add401
  %sub403 = sub nsw i32 %mul402, 1
  br label %cond.end.404

cond.end.404:                                     ; preds = %cond.false.400, %cond.true.392
  %cond405 = phi i32 [ %add399, %cond.true.392 ], [ %sub403, %cond.false.400 ]
  %sub406 = sub nsw i32 %cond405, 2
  %126 = load i32, i32* %width, align 4
  %cmp407 = icmp slt i32 %sub406, %126
  br i1 %cmp407, label %cond.true.439, label %lor.lhs.false.425

cond.false.409:                                   ; preds = %cond.end.350
  %127 = load i32, i32* %width, align 4
  %cmp410 = icmp slt i32 %127, 0
  br i1 %cmp410, label %cond.true.412, label %cond.false.416

cond.true.412:                                    ; preds = %cond.false.409
  %128 = load i32, i32* %width, align 4
  %add413 = add nsw i32 %128, 2
  %cmp414 = icmp sle i32 2, %add413
  br i1 %cmp414, label %cond.true.439, label %lor.lhs.false.425

cond.false.416:                                   ; preds = %cond.false.409
  br i1 false, label %cond.true.417, label %cond.false.421

cond.true.417:                                    ; preds = %cond.false.416
  %129 = load i32, i32* %width, align 4
  %130 = load i32, i32* %width, align 4
  %add418 = add nsw i32 %130, 2
  %cmp419 = icmp sle i32 %129, %add418
  br i1 %cmp419, label %cond.true.439, label %lor.lhs.false.425

cond.false.421:                                   ; preds = %cond.false.416
  %131 = load i32, i32* %width, align 4
  %add422 = add nsw i32 %131, 2
  %cmp423 = icmp slt i32 %add422, 2
  br i1 %cmp423, label %cond.true.439, label %lor.lhs.false.425

lor.lhs.false.425:                                ; preds = %cond.false.421, %cond.true.417, %cond.true.412, %cond.end.404, %cond.end.381
  %132 = load i32, i32* %width, align 4
  %add426 = add nsw i32 %132, 2
  %mul427 = mul nsw i32 0, %add426
  %sub428 = sub nsw i32 %mul427, 1
  %cmp429 = icmp slt i32 %sub428, 0
  br i1 %cmp429, label %land.lhs.true.431, label %lor.lhs.false.435

land.lhs.true.431:                                ; preds = %lor.lhs.false.425
  %133 = load i32, i32* %width, align 4
  %add432 = add nsw i32 %133, 2
  %cmp433 = icmp slt i32 %add432, -128
  br i1 %cmp433, label %cond.true.439, label %lor.lhs.false.435

lor.lhs.false.435:                                ; preds = %land.lhs.true.431, %lor.lhs.false.425
  %134 = load i32, i32* %width, align 4
  %add436 = add nsw i32 %134, 2
  %cmp437 = icmp slt i32 127, %add436
  br i1 %cmp437, label %cond.true.439, label %cond.false.461

cond.true.439:                                    ; preds = %lor.lhs.false.435, %land.lhs.true.431, %cond.false.421, %cond.true.417, %cond.true.412, %cond.end.404, %cond.end.381
  %135 = load i32, i32* %width, align 4
  %conv440 = trunc i32 %135 to i8
  %conv441 = zext i8 %conv440 to i32
  %add442 = add nsw i32 %conv441, 2
  %cmp443 = icmp sle i32 %add442, 127
  br i1 %cmp443, label %cond.true.445, label %cond.false.451

cond.true.445:                                    ; preds = %cond.true.439
  %136 = load i32, i32* %width, align 4
  %conv446 = trunc i32 %136 to i8
  %conv447 = zext i8 %conv446 to i32
  %add448 = add nsw i32 %conv447, 2
  %conv449 = trunc i32 %add448 to i8
  %conv450 = sext i8 %conv449 to i32
  br label %cond.end.459

cond.false.451:                                   ; preds = %cond.true.439
  %137 = load i32, i32* %width, align 4
  %conv452 = trunc i32 %137 to i8
  %conv453 = zext i8 %conv452 to i32
  %add454 = add nsw i32 %conv453, 2
  %sub455 = sub nsw i32 %add454, -128
  %conv456 = trunc i32 %sub455 to i8
  %conv457 = sext i8 %conv456 to i32
  %add458 = add nsw i32 %conv457, -128
  br label %cond.end.459

cond.end.459:                                     ; preds = %cond.false.451, %cond.true.445
  %cond460 = phi i32 [ %conv450, %cond.true.445 ], [ %add458, %cond.false.451 ]
  store i32 %cond460, i32* %area, align 4
  br i1 true, label %if.then.4556, label %lor.lhs.false.1766

cond.false.461:                                   ; preds = %lor.lhs.false.435
  %138 = load i32, i32* %width, align 4
  %conv462 = trunc i32 %138 to i8
  %conv463 = zext i8 %conv462 to i32
  %add464 = add nsw i32 %conv463, 2
  %cmp465 = icmp sle i32 %add464, 127
  br i1 %cmp465, label %cond.true.467, label %cond.false.473

cond.true.467:                                    ; preds = %cond.false.461
  %139 = load i32, i32* %width, align 4
  %conv468 = trunc i32 %139 to i8
  %conv469 = zext i8 %conv468 to i32
  %add470 = add nsw i32 %conv469, 2
  %conv471 = trunc i32 %add470 to i8
  %conv472 = sext i8 %conv471 to i32
  br label %cond.end.481

cond.false.473:                                   ; preds = %cond.false.461
  %140 = load i32, i32* %width, align 4
  %conv474 = trunc i32 %140 to i8
  %conv475 = zext i8 %conv474 to i32
  %add476 = add nsw i32 %conv475, 2
  %sub477 = sub nsw i32 %add476, -128
  %conv478 = trunc i32 %sub477 to i8
  %conv479 = sext i8 %conv478 to i32
  %add480 = add nsw i32 %conv479, -128
  br label %cond.end.481

cond.end.481:                                     ; preds = %cond.false.473, %cond.true.467
  %cond482 = phi i32 [ %conv472, %cond.true.467 ], [ %add480, %cond.false.473 ]
  store i32 %cond482, i32* %area, align 4
  br i1 false, label %if.then.4556, label %lor.lhs.false.1766

cond.false.483:                                   ; preds = %cond.end.125
  br i1 false, label %cond.true.484, label %cond.false.845

cond.true.484:                                    ; preds = %cond.false.483
  br i1 false, label %cond.true.485, label %cond.false.686

cond.true.485:                                    ; preds = %cond.true.484
  %141 = load i32, i32* %width, align 4
  %conv486 = trunc i32 %141 to i16
  %conv487 = sext i16 %conv486 to i32
  %add488 = add nsw i32 0, %conv487
  %mul489 = mul nsw i32 0, %add488
  %sub490 = sub nsw i32 %mul489, 1
  %cmp491 = icmp slt i32 %sub490, 0
  br i1 %cmp491, label %cond.true.493, label %cond.false.513

cond.true.493:                                    ; preds = %cond.true.485
  %142 = load i32, i32* %width, align 4
  %conv494 = trunc i32 %142 to i16
  %conv495 = sext i16 %conv494 to i32
  %add496 = add nsw i32 0, %conv495
  %mul497 = mul nsw i32 0, %add496
  %add498 = add nsw i32 %mul497, 0
  %neg499 = xor i32 %add498, -1
  %cmp500 = icmp eq i32 %neg499, -1
  %conv501 = zext i1 %cmp500 to i32
  %sub502 = sub nsw i32 0, %conv501
  %143 = load i32, i32* %width, align 4
  %conv503 = trunc i32 %143 to i16
  %conv504 = sext i16 %conv503 to i32
  %add505 = add nsw i32 0, %conv504
  %mul506 = mul nsw i32 0, %add505
  %add507 = add nsw i32 %mul506, 1
  %shl508 = shl i32 %add507, 30
  %sub509 = sub nsw i32 %shl508, 1
  %mul510 = mul nsw i32 %sub509, 2
  %add511 = add nsw i32 %mul510, 1
  %sub512 = sub nsw i32 %sub502, %add511
  br label %cond.end.519

cond.false.513:                                   ; preds = %cond.true.485
  %144 = load i32, i32* %width, align 4
  %conv514 = trunc i32 %144 to i16
  %conv515 = sext i16 %conv514 to i32
  %add516 = add nsw i32 0, %conv515
  %mul517 = mul nsw i32 0, %add516
  %add518 = add nsw i32 %mul517, 0
  br label %cond.end.519

cond.end.519:                                     ; preds = %cond.false.513, %cond.true.493
  %cond520 = phi i32 [ %sub512, %cond.true.493 ], [ %add518, %cond.false.513 ]
  %cmp521 = icmp slt i32 %cond520, 0
  br i1 %cmp521, label %cond.true.523, label %cond.false.596

cond.true.523:                                    ; preds = %cond.end.519
  br i1 false, label %cond.true.524, label %cond.false.565

cond.true.524:                                    ; preds = %cond.true.523
  %145 = load i32, i32* %width, align 4
  %conv525 = trunc i32 %145 to i16
  %conv526 = sext i16 %conv525 to i32
  %146 = load i32, i32* %width, align 4
  %conv527 = trunc i32 %146 to i16
  %conv528 = sext i16 %conv527 to i32
  %add529 = add nsw i32 0, %conv528
  %mul530 = mul nsw i32 0, %add529
  %sub531 = sub nsw i32 %mul530, 1
  %cmp532 = icmp slt i32 %sub531, 0
  br i1 %cmp532, label %cond.true.534, label %cond.false.554

cond.true.534:                                    ; preds = %cond.true.524
  %147 = load i32, i32* %width, align 4
  %conv535 = trunc i32 %147 to i16
  %conv536 = sext i16 %conv535 to i32
  %add537 = add nsw i32 0, %conv536
  %mul538 = mul nsw i32 0, %add537
  %add539 = add nsw i32 %mul538, 0
  %neg540 = xor i32 %add539, -1
  %cmp541 = icmp eq i32 %neg540, -1
  %conv542 = zext i1 %cmp541 to i32
  %sub543 = sub nsw i32 0, %conv542
  %148 = load i32, i32* %width, align 4
  %conv544 = trunc i32 %148 to i16
  %conv545 = sext i16 %conv544 to i32
  %add546 = add nsw i32 0, %conv545
  %mul547 = mul nsw i32 0, %add546
  %add548 = add nsw i32 %mul547, 1
  %shl549 = shl i32 %add548, 30
  %sub550 = sub nsw i32 %shl549, 1
  %mul551 = mul nsw i32 %sub550, 2
  %add552 = add nsw i32 %mul551, 1
  %sub553 = sub nsw i32 %sub543, %add552
  br label %cond.end.560

cond.false.554:                                   ; preds = %cond.true.524
  %149 = load i32, i32* %width, align 4
  %conv555 = trunc i32 %149 to i16
  %conv556 = sext i16 %conv555 to i32
  %add557 = add nsw i32 0, %conv556
  %mul558 = mul nsw i32 0, %add557
  %add559 = add nsw i32 %mul558, 0
  br label %cond.end.560

cond.end.560:                                     ; preds = %cond.false.554, %cond.true.534
  %cond561 = phi i32 [ %sub553, %cond.true.534 ], [ %add559, %cond.false.554 ]
  %sub562 = sub nsw i32 %cond561, 2
  %cmp563 = icmp slt i32 %conv526, %sub562
  br i1 %cmp563, label %cond.true.642, label %lor.lhs.false.622

cond.false.565:                                   ; preds = %cond.true.523
  %150 = load i32, i32* %width, align 4
  %conv566 = trunc i32 %150 to i16
  %conv567 = sext i16 %conv566 to i32
  %add568 = add nsw i32 0, %conv567
  %mul569 = mul nsw i32 0, %add568
  %sub570 = sub nsw i32 %mul569, 1
  %cmp571 = icmp slt i32 %sub570, 0
  br i1 %cmp571, label %cond.true.573, label %cond.false.583

cond.true.573:                                    ; preds = %cond.false.565
  %151 = load i32, i32* %width, align 4
  %conv574 = trunc i32 %151 to i16
  %conv575 = sext i16 %conv574 to i32
  %add576 = add nsw i32 0, %conv575
  %mul577 = mul nsw i32 0, %add576
  %add578 = add nsw i32 %mul577, 1
  %shl579 = shl i32 %add578, 30
  %sub580 = sub nsw i32 %shl579, 1
  %mul581 = mul nsw i32 %sub580, 2
  %add582 = add nsw i32 %mul581, 1
  br label %cond.end.589

cond.false.583:                                   ; preds = %cond.false.565
  %152 = load i32, i32* %width, align 4
  %conv584 = trunc i32 %152 to i16
  %conv585 = sext i16 %conv584 to i32
  %add586 = add nsw i32 0, %conv585
  %mul587 = mul nsw i32 0, %add586
  %sub588 = sub nsw i32 %mul587, 1
  br label %cond.end.589

cond.end.589:                                     ; preds = %cond.false.583, %cond.true.573
  %cond590 = phi i32 [ %add582, %cond.true.573 ], [ %sub588, %cond.false.583 ]
  %sub591 = sub nsw i32 %cond590, 2
  %153 = load i32, i32* %width, align 4
  %conv592 = trunc i32 %153 to i16
  %conv593 = sext i16 %conv592 to i32
  %cmp594 = icmp slt i32 %sub591, %conv593
  br i1 %cmp594, label %cond.true.642, label %lor.lhs.false.622

cond.false.596:                                   ; preds = %cond.end.519
  %154 = load i32, i32* %width, align 4
  %conv597 = trunc i32 %154 to i16
  %conv598 = sext i16 %conv597 to i32
  %cmp599 = icmp slt i32 %conv598, 0
  br i1 %cmp599, label %cond.true.601, label %cond.false.607

cond.true.601:                                    ; preds = %cond.false.596
  %155 = load i32, i32* %width, align 4
  %conv602 = trunc i32 %155 to i16
  %conv603 = sext i16 %conv602 to i32
  %add604 = add nsw i32 %conv603, 2
  %cmp605 = icmp sle i32 2, %add604
  br i1 %cmp605, label %cond.true.642, label %lor.lhs.false.622

cond.false.607:                                   ; preds = %cond.false.596
  br i1 false, label %cond.true.608, label %cond.false.616

cond.true.608:                                    ; preds = %cond.false.607
  %156 = load i32, i32* %width, align 4
  %conv609 = trunc i32 %156 to i16
  %conv610 = sext i16 %conv609 to i32
  %157 = load i32, i32* %width, align 4
  %conv611 = trunc i32 %157 to i16
  %conv612 = sext i16 %conv611 to i32
  %add613 = add nsw i32 %conv612, 2
  %cmp614 = icmp sle i32 %conv610, %add613
  br i1 %cmp614, label %cond.true.642, label %lor.lhs.false.622

cond.false.616:                                   ; preds = %cond.false.607
  %158 = load i32, i32* %width, align 4
  %conv617 = trunc i32 %158 to i16
  %conv618 = sext i16 %conv617 to i32
  %add619 = add nsw i32 %conv618, 2
  %cmp620 = icmp slt i32 %add619, 2
  br i1 %cmp620, label %cond.true.642, label %lor.lhs.false.622

lor.lhs.false.622:                                ; preds = %cond.false.616, %cond.true.608, %cond.true.601, %cond.end.589, %cond.end.560
  %159 = load i32, i32* %width, align 4
  %conv623 = trunc i32 %159 to i16
  %conv624 = sext i16 %conv623 to i32
  %add625 = add nsw i32 %conv624, 2
  %mul626 = mul nsw i32 0, %add625
  %sub627 = sub nsw i32 %mul626, 1
  %cmp628 = icmp slt i32 %sub627, 0
  br i1 %cmp628, label %land.lhs.true.630, label %lor.lhs.false.636

land.lhs.true.630:                                ; preds = %lor.lhs.false.622
  %160 = load i32, i32* %width, align 4
  %conv631 = trunc i32 %160 to i16
  %conv632 = sext i16 %conv631 to i32
  %add633 = add nsw i32 %conv632, 2
  %cmp634 = icmp slt i32 %add633, -32768
  br i1 %cmp634, label %cond.true.642, label %lor.lhs.false.636

lor.lhs.false.636:                                ; preds = %land.lhs.true.630, %lor.lhs.false.622
  %161 = load i32, i32* %width, align 4
  %conv637 = trunc i32 %161 to i16
  %conv638 = sext i16 %conv637 to i32
  %add639 = add nsw i32 %conv638, 2
  %cmp640 = icmp slt i32 32767, %add639
  br i1 %cmp640, label %cond.true.642, label %cond.false.664

cond.true.642:                                    ; preds = %lor.lhs.false.636, %land.lhs.true.630, %cond.false.616, %cond.true.608, %cond.true.601, %cond.end.589, %cond.end.560
  %162 = load i32, i32* %width, align 4
  %conv643 = trunc i32 %162 to i16
  %conv644 = zext i16 %conv643 to i32
  %add645 = add nsw i32 %conv644, 2
  %cmp646 = icmp sle i32 %add645, 32767
  br i1 %cmp646, label %cond.true.648, label %cond.false.654

cond.true.648:                                    ; preds = %cond.true.642
  %163 = load i32, i32* %width, align 4
  %conv649 = trunc i32 %163 to i16
  %conv650 = zext i16 %conv649 to i32
  %add651 = add nsw i32 %conv650, 2
  %conv652 = trunc i32 %add651 to i16
  %conv653 = sext i16 %conv652 to i32
  br label %cond.end.662

cond.false.654:                                   ; preds = %cond.true.642
  %164 = load i32, i32* %width, align 4
  %conv655 = trunc i32 %164 to i16
  %conv656 = zext i16 %conv655 to i32
  %add657 = add nsw i32 %conv656, 2
  %sub658 = sub nsw i32 %add657, -32768
  %conv659 = trunc i32 %sub658 to i16
  %conv660 = sext i16 %conv659 to i32
  %add661 = add nsw i32 %conv660, -32768
  br label %cond.end.662

cond.end.662:                                     ; preds = %cond.false.654, %cond.true.648
  %cond663 = phi i32 [ %conv653, %cond.true.648 ], [ %add661, %cond.false.654 ]
  store i32 %cond663, i32* %area, align 4
  br i1 true, label %if.then.4556, label %lor.lhs.false.1766

cond.false.664:                                   ; preds = %lor.lhs.false.636
  %165 = load i32, i32* %width, align 4
  %conv665 = trunc i32 %165 to i16
  %conv666 = zext i16 %conv665 to i32
  %add667 = add nsw i32 %conv666, 2
  %cmp668 = icmp sle i32 %add667, 32767
  br i1 %cmp668, label %cond.true.670, label %cond.false.676

cond.true.670:                                    ; preds = %cond.false.664
  %166 = load i32, i32* %width, align 4
  %conv671 = trunc i32 %166 to i16
  %conv672 = zext i16 %conv671 to i32
  %add673 = add nsw i32 %conv672, 2
  %conv674 = trunc i32 %add673 to i16
  %conv675 = sext i16 %conv674 to i32
  br label %cond.end.684

cond.false.676:                                   ; preds = %cond.false.664
  %167 = load i32, i32* %width, align 4
  %conv677 = trunc i32 %167 to i16
  %conv678 = zext i16 %conv677 to i32
  %add679 = add nsw i32 %conv678, 2
  %sub680 = sub nsw i32 %add679, -32768
  %conv681 = trunc i32 %sub680 to i16
  %conv682 = sext i16 %conv681 to i32
  %add683 = add nsw i32 %conv682, -32768
  br label %cond.end.684

cond.end.684:                                     ; preds = %cond.false.676, %cond.true.670
  %cond685 = phi i32 [ %conv675, %cond.true.670 ], [ %add683, %cond.false.676 ]
  store i32 %cond685, i32* %area, align 4
  br i1 false, label %if.then.4556, label %lor.lhs.false.1766

cond.false.686:                                   ; preds = %cond.true.484
  %168 = load i32, i32* %width, align 4
  %add687 = add nsw i32 0, %168
  %mul688 = mul nsw i32 0, %add687
  %sub689 = sub nsw i32 %mul688, 1
  %cmp690 = icmp slt i32 %sub689, 0
  br i1 %cmp690, label %cond.true.692, label %cond.false.708

cond.true.692:                                    ; preds = %cond.false.686
  %169 = load i32, i32* %width, align 4
  %add693 = add nsw i32 0, %169
  %mul694 = mul nsw i32 0, %add693
  %add695 = add nsw i32 %mul694, 0
  %neg696 = xor i32 %add695, -1
  %cmp697 = icmp eq i32 %neg696, -1
  %conv698 = zext i1 %cmp697 to i32
  %sub699 = sub nsw i32 0, %conv698
  %170 = load i32, i32* %width, align 4
  %add700 = add nsw i32 0, %170
  %mul701 = mul nsw i32 0, %add700
  %add702 = add nsw i32 %mul701, 1
  %shl703 = shl i32 %add702, 30
  %sub704 = sub nsw i32 %shl703, 1
  %mul705 = mul nsw i32 %sub704, 2
  %add706 = add nsw i32 %mul705, 1
  %sub707 = sub nsw i32 %sub699, %add706
  br label %cond.end.712

cond.false.708:                                   ; preds = %cond.false.686
  %171 = load i32, i32* %width, align 4
  %add709 = add nsw i32 0, %171
  %mul710 = mul nsw i32 0, %add709
  %add711 = add nsw i32 %mul710, 0
  br label %cond.end.712

cond.end.712:                                     ; preds = %cond.false.708, %cond.true.692
  %cond713 = phi i32 [ %sub707, %cond.true.692 ], [ %add711, %cond.false.708 ]
  %cmp714 = icmp slt i32 %cond713, 0
  br i1 %cmp714, label %cond.true.716, label %cond.false.771

cond.true.716:                                    ; preds = %cond.end.712
  br i1 false, label %cond.true.717, label %cond.false.748

cond.true.717:                                    ; preds = %cond.true.716
  %172 = load i32, i32* %width, align 4
  %173 = load i32, i32* %width, align 4
  %add718 = add nsw i32 0, %173
  %mul719 = mul nsw i32 0, %add718
  %sub720 = sub nsw i32 %mul719, 1
  %cmp721 = icmp slt i32 %sub720, 0
  br i1 %cmp721, label %cond.true.723, label %cond.false.739

cond.true.723:                                    ; preds = %cond.true.717
  %174 = load i32, i32* %width, align 4
  %add724 = add nsw i32 0, %174
  %mul725 = mul nsw i32 0, %add724
  %add726 = add nsw i32 %mul725, 0
  %neg727 = xor i32 %add726, -1
  %cmp728 = icmp eq i32 %neg727, -1
  %conv729 = zext i1 %cmp728 to i32
  %sub730 = sub nsw i32 0, %conv729
  %175 = load i32, i32* %width, align 4
  %add731 = add nsw i32 0, %175
  %mul732 = mul nsw i32 0, %add731
  %add733 = add nsw i32 %mul732, 1
  %shl734 = shl i32 %add733, 30
  %sub735 = sub nsw i32 %shl734, 1
  %mul736 = mul nsw i32 %sub735, 2
  %add737 = add nsw i32 %mul736, 1
  %sub738 = sub nsw i32 %sub730, %add737
  br label %cond.end.743

cond.false.739:                                   ; preds = %cond.true.717
  %176 = load i32, i32* %width, align 4
  %add740 = add nsw i32 0, %176
  %mul741 = mul nsw i32 0, %add740
  %add742 = add nsw i32 %mul741, 0
  br label %cond.end.743

cond.end.743:                                     ; preds = %cond.false.739, %cond.true.723
  %cond744 = phi i32 [ %sub738, %cond.true.723 ], [ %add742, %cond.false.739 ]
  %sub745 = sub nsw i32 %cond744, 2
  %cmp746 = icmp slt i32 %172, %sub745
  br i1 %cmp746, label %cond.true.801, label %lor.lhs.false.787

cond.false.748:                                   ; preds = %cond.true.716
  %177 = load i32, i32* %width, align 4
  %add749 = add nsw i32 0, %177
  %mul750 = mul nsw i32 0, %add749
  %sub751 = sub nsw i32 %mul750, 1
  %cmp752 = icmp slt i32 %sub751, 0
  br i1 %cmp752, label %cond.true.754, label %cond.false.762

cond.true.754:                                    ; preds = %cond.false.748
  %178 = load i32, i32* %width, align 4
  %add755 = add nsw i32 0, %178
  %mul756 = mul nsw i32 0, %add755
  %add757 = add nsw i32 %mul756, 1
  %shl758 = shl i32 %add757, 30
  %sub759 = sub nsw i32 %shl758, 1
  %mul760 = mul nsw i32 %sub759, 2
  %add761 = add nsw i32 %mul760, 1
  br label %cond.end.766

cond.false.762:                                   ; preds = %cond.false.748
  %179 = load i32, i32* %width, align 4
  %add763 = add nsw i32 0, %179
  %mul764 = mul nsw i32 0, %add763
  %sub765 = sub nsw i32 %mul764, 1
  br label %cond.end.766

cond.end.766:                                     ; preds = %cond.false.762, %cond.true.754
  %cond767 = phi i32 [ %add761, %cond.true.754 ], [ %sub765, %cond.false.762 ]
  %sub768 = sub nsw i32 %cond767, 2
  %180 = load i32, i32* %width, align 4
  %cmp769 = icmp slt i32 %sub768, %180
  br i1 %cmp769, label %cond.true.801, label %lor.lhs.false.787

cond.false.771:                                   ; preds = %cond.end.712
  %181 = load i32, i32* %width, align 4
  %cmp772 = icmp slt i32 %181, 0
  br i1 %cmp772, label %cond.true.774, label %cond.false.778

cond.true.774:                                    ; preds = %cond.false.771
  %182 = load i32, i32* %width, align 4
  %add775 = add nsw i32 %182, 2
  %cmp776 = icmp sle i32 2, %add775
  br i1 %cmp776, label %cond.true.801, label %lor.lhs.false.787

cond.false.778:                                   ; preds = %cond.false.771
  br i1 false, label %cond.true.779, label %cond.false.783

cond.true.779:                                    ; preds = %cond.false.778
  %183 = load i32, i32* %width, align 4
  %184 = load i32, i32* %width, align 4
  %add780 = add nsw i32 %184, 2
  %cmp781 = icmp sle i32 %183, %add780
  br i1 %cmp781, label %cond.true.801, label %lor.lhs.false.787

cond.false.783:                                   ; preds = %cond.false.778
  %185 = load i32, i32* %width, align 4
  %add784 = add nsw i32 %185, 2
  %cmp785 = icmp slt i32 %add784, 2
  br i1 %cmp785, label %cond.true.801, label %lor.lhs.false.787

lor.lhs.false.787:                                ; preds = %cond.false.783, %cond.true.779, %cond.true.774, %cond.end.766, %cond.end.743
  %186 = load i32, i32* %width, align 4
  %add788 = add nsw i32 %186, 2
  %mul789 = mul nsw i32 0, %add788
  %sub790 = sub nsw i32 %mul789, 1
  %cmp791 = icmp slt i32 %sub790, 0
  br i1 %cmp791, label %land.lhs.true.793, label %lor.lhs.false.797

land.lhs.true.793:                                ; preds = %lor.lhs.false.787
  %187 = load i32, i32* %width, align 4
  %add794 = add nsw i32 %187, 2
  %cmp795 = icmp slt i32 %add794, -32768
  br i1 %cmp795, label %cond.true.801, label %lor.lhs.false.797

lor.lhs.false.797:                                ; preds = %land.lhs.true.793, %lor.lhs.false.787
  %188 = load i32, i32* %width, align 4
  %add798 = add nsw i32 %188, 2
  %cmp799 = icmp slt i32 32767, %add798
  br i1 %cmp799, label %cond.true.801, label %cond.false.823

cond.true.801:                                    ; preds = %lor.lhs.false.797, %land.lhs.true.793, %cond.false.783, %cond.true.779, %cond.true.774, %cond.end.766, %cond.end.743
  %189 = load i32, i32* %width, align 4
  %conv802 = trunc i32 %189 to i16
  %conv803 = zext i16 %conv802 to i32
  %add804 = add nsw i32 %conv803, 2
  %cmp805 = icmp sle i32 %add804, 32767
  br i1 %cmp805, label %cond.true.807, label %cond.false.813

cond.true.807:                                    ; preds = %cond.true.801
  %190 = load i32, i32* %width, align 4
  %conv808 = trunc i32 %190 to i16
  %conv809 = zext i16 %conv808 to i32
  %add810 = add nsw i32 %conv809, 2
  %conv811 = trunc i32 %add810 to i16
  %conv812 = sext i16 %conv811 to i32
  br label %cond.end.821

cond.false.813:                                   ; preds = %cond.true.801
  %191 = load i32, i32* %width, align 4
  %conv814 = trunc i32 %191 to i16
  %conv815 = zext i16 %conv814 to i32
  %add816 = add nsw i32 %conv815, 2
  %sub817 = sub nsw i32 %add816, -32768
  %conv818 = trunc i32 %sub817 to i16
  %conv819 = sext i16 %conv818 to i32
  %add820 = add nsw i32 %conv819, -32768
  br label %cond.end.821

cond.end.821:                                     ; preds = %cond.false.813, %cond.true.807
  %cond822 = phi i32 [ %conv812, %cond.true.807 ], [ %add820, %cond.false.813 ]
  store i32 %cond822, i32* %area, align 4
  br i1 true, label %if.then.4556, label %lor.lhs.false.1766

cond.false.823:                                   ; preds = %lor.lhs.false.797
  %192 = load i32, i32* %width, align 4
  %conv824 = trunc i32 %192 to i16
  %conv825 = zext i16 %conv824 to i32
  %add826 = add nsw i32 %conv825, 2
  %cmp827 = icmp sle i32 %add826, 32767
  br i1 %cmp827, label %cond.true.829, label %cond.false.835

cond.true.829:                                    ; preds = %cond.false.823
  %193 = load i32, i32* %width, align 4
  %conv830 = trunc i32 %193 to i16
  %conv831 = zext i16 %conv830 to i32
  %add832 = add nsw i32 %conv831, 2
  %conv833 = trunc i32 %add832 to i16
  %conv834 = sext i16 %conv833 to i32
  br label %cond.end.843

cond.false.835:                                   ; preds = %cond.false.823
  %194 = load i32, i32* %width, align 4
  %conv836 = trunc i32 %194 to i16
  %conv837 = zext i16 %conv836 to i32
  %add838 = add nsw i32 %conv837, 2
  %sub839 = sub nsw i32 %add838, -32768
  %conv840 = trunc i32 %sub839 to i16
  %conv841 = sext i16 %conv840 to i32
  %add842 = add nsw i32 %conv841, -32768
  br label %cond.end.843

cond.end.843:                                     ; preds = %cond.false.835, %cond.true.829
  %cond844 = phi i32 [ %conv834, %cond.true.829 ], [ %add842, %cond.false.835 ]
  store i32 %cond844, i32* %area, align 4
  br i1 false, label %if.then.4556, label %lor.lhs.false.1766

cond.false.845:                                   ; preds = %cond.false.483
  br i1 true, label %cond.true.846, label %cond.false.1125

cond.true.846:                                    ; preds = %cond.false.845
  br i1 false, label %cond.true.847, label %cond.false.986

cond.true.847:                                    ; preds = %cond.true.846
  %195 = load i32, i32* %width, align 4
  %add848 = add nsw i32 0, %195
  %mul849 = mul nsw i32 0, %add848
  %sub850 = sub nsw i32 %mul849, 1
  %cmp851 = icmp slt i32 %sub850, 0
  br i1 %cmp851, label %cond.true.853, label %cond.false.869

cond.true.853:                                    ; preds = %cond.true.847
  %196 = load i32, i32* %width, align 4
  %add854 = add nsw i32 0, %196
  %mul855 = mul nsw i32 0, %add854
  %add856 = add nsw i32 %mul855, 0
  %neg857 = xor i32 %add856, -1
  %cmp858 = icmp eq i32 %neg857, -1
  %conv859 = zext i1 %cmp858 to i32
  %sub860 = sub nsw i32 0, %conv859
  %197 = load i32, i32* %width, align 4
  %add861 = add nsw i32 0, %197
  %mul862 = mul nsw i32 0, %add861
  %add863 = add nsw i32 %mul862, 1
  %shl864 = shl i32 %add863, 30
  %sub865 = sub nsw i32 %shl864, 1
  %mul866 = mul nsw i32 %sub865, 2
  %add867 = add nsw i32 %mul866, 1
  %sub868 = sub nsw i32 %sub860, %add867
  br label %cond.end.873

cond.false.869:                                   ; preds = %cond.true.847
  %198 = load i32, i32* %width, align 4
  %add870 = add nsw i32 0, %198
  %mul871 = mul nsw i32 0, %add870
  %add872 = add nsw i32 %mul871, 0
  br label %cond.end.873

cond.end.873:                                     ; preds = %cond.false.869, %cond.true.853
  %cond874 = phi i32 [ %sub868, %cond.true.853 ], [ %add872, %cond.false.869 ]
  %cmp875 = icmp slt i32 %cond874, 0
  br i1 %cmp875, label %cond.true.877, label %cond.false.932

cond.true.877:                                    ; preds = %cond.end.873
  br i1 false, label %cond.true.878, label %cond.false.909

cond.true.878:                                    ; preds = %cond.true.877
  %199 = load i32, i32* %width, align 4
  %200 = load i32, i32* %width, align 4
  %add879 = add nsw i32 0, %200
  %mul880 = mul nsw i32 0, %add879
  %sub881 = sub nsw i32 %mul880, 1
  %cmp882 = icmp slt i32 %sub881, 0
  br i1 %cmp882, label %cond.true.884, label %cond.false.900

cond.true.884:                                    ; preds = %cond.true.878
  %201 = load i32, i32* %width, align 4
  %add885 = add nsw i32 0, %201
  %mul886 = mul nsw i32 0, %add885
  %add887 = add nsw i32 %mul886, 0
  %neg888 = xor i32 %add887, -1
  %cmp889 = icmp eq i32 %neg888, -1
  %conv890 = zext i1 %cmp889 to i32
  %sub891 = sub nsw i32 0, %conv890
  %202 = load i32, i32* %width, align 4
  %add892 = add nsw i32 0, %202
  %mul893 = mul nsw i32 0, %add892
  %add894 = add nsw i32 %mul893, 1
  %shl895 = shl i32 %add894, 30
  %sub896 = sub nsw i32 %shl895, 1
  %mul897 = mul nsw i32 %sub896, 2
  %add898 = add nsw i32 %mul897, 1
  %sub899 = sub nsw i32 %sub891, %add898
  br label %cond.end.904

cond.false.900:                                   ; preds = %cond.true.878
  %203 = load i32, i32* %width, align 4
  %add901 = add nsw i32 0, %203
  %mul902 = mul nsw i32 0, %add901
  %add903 = add nsw i32 %mul902, 0
  br label %cond.end.904

cond.end.904:                                     ; preds = %cond.false.900, %cond.true.884
  %cond905 = phi i32 [ %sub899, %cond.true.884 ], [ %add903, %cond.false.900 ]
  %sub906 = sub nsw i32 %cond905, 2
  %cmp907 = icmp slt i32 %199, %sub906
  br i1 %cmp907, label %cond.true.962, label %lor.lhs.false.948

cond.false.909:                                   ; preds = %cond.true.877
  %204 = load i32, i32* %width, align 4
  %add910 = add nsw i32 0, %204
  %mul911 = mul nsw i32 0, %add910
  %sub912 = sub nsw i32 %mul911, 1
  %cmp913 = icmp slt i32 %sub912, 0
  br i1 %cmp913, label %cond.true.915, label %cond.false.923

cond.true.915:                                    ; preds = %cond.false.909
  %205 = load i32, i32* %width, align 4
  %add916 = add nsw i32 0, %205
  %mul917 = mul nsw i32 0, %add916
  %add918 = add nsw i32 %mul917, 1
  %shl919 = shl i32 %add918, 30
  %sub920 = sub nsw i32 %shl919, 1
  %mul921 = mul nsw i32 %sub920, 2
  %add922 = add nsw i32 %mul921, 1
  br label %cond.end.927

cond.false.923:                                   ; preds = %cond.false.909
  %206 = load i32, i32* %width, align 4
  %add924 = add nsw i32 0, %206
  %mul925 = mul nsw i32 0, %add924
  %sub926 = sub nsw i32 %mul925, 1
  br label %cond.end.927

cond.end.927:                                     ; preds = %cond.false.923, %cond.true.915
  %cond928 = phi i32 [ %add922, %cond.true.915 ], [ %sub926, %cond.false.923 ]
  %sub929 = sub nsw i32 %cond928, 2
  %207 = load i32, i32* %width, align 4
  %cmp930 = icmp slt i32 %sub929, %207
  br i1 %cmp930, label %cond.true.962, label %lor.lhs.false.948

cond.false.932:                                   ; preds = %cond.end.873
  %208 = load i32, i32* %width, align 4
  %cmp933 = icmp slt i32 %208, 0
  br i1 %cmp933, label %cond.true.935, label %cond.false.939

cond.true.935:                                    ; preds = %cond.false.932
  %209 = load i32, i32* %width, align 4
  %add936 = add nsw i32 %209, 2
  %cmp937 = icmp sle i32 2, %add936
  br i1 %cmp937, label %cond.true.962, label %lor.lhs.false.948

cond.false.939:                                   ; preds = %cond.false.932
  br i1 false, label %cond.true.940, label %cond.false.944

cond.true.940:                                    ; preds = %cond.false.939
  %210 = load i32, i32* %width, align 4
  %211 = load i32, i32* %width, align 4
  %add941 = add nsw i32 %211, 2
  %cmp942 = icmp sle i32 %210, %add941
  br i1 %cmp942, label %cond.true.962, label %lor.lhs.false.948

cond.false.944:                                   ; preds = %cond.false.939
  %212 = load i32, i32* %width, align 4
  %add945 = add nsw i32 %212, 2
  %cmp946 = icmp slt i32 %add945, 2
  br i1 %cmp946, label %cond.true.962, label %lor.lhs.false.948

lor.lhs.false.948:                                ; preds = %cond.false.944, %cond.true.940, %cond.true.935, %cond.end.927, %cond.end.904
  %213 = load i32, i32* %width, align 4
  %add949 = add nsw i32 %213, 2
  %mul950 = mul nsw i32 0, %add949
  %sub951 = sub nsw i32 %mul950, 1
  %cmp952 = icmp slt i32 %sub951, 0
  br i1 %cmp952, label %land.lhs.true.954, label %lor.lhs.false.958

land.lhs.true.954:                                ; preds = %lor.lhs.false.948
  %214 = load i32, i32* %width, align 4
  %add955 = add nsw i32 %214, 2
  %cmp956 = icmp slt i32 %add955, -2147483648
  br i1 %cmp956, label %cond.true.962, label %lor.lhs.false.958

lor.lhs.false.958:                                ; preds = %land.lhs.true.954, %lor.lhs.false.948
  %215 = load i32, i32* %width, align 4
  %add959 = add nsw i32 %215, 2
  %cmp960 = icmp slt i32 2147483647, %add959
  br i1 %cmp960, label %cond.true.962, label %cond.false.974

cond.true.962:                                    ; preds = %lor.lhs.false.958, %land.lhs.true.954, %cond.false.944, %cond.true.940, %cond.true.935, %cond.end.927, %cond.end.904
  %216 = load i32, i32* %width, align 4
  %add963 = add i32 %216, 2
  %cmp964 = icmp ule i32 %add963, 2147483647
  br i1 %cmp964, label %cond.true.966, label %cond.false.968

cond.true.966:                                    ; preds = %cond.true.962
  %217 = load i32, i32* %width, align 4
  %add967 = add i32 %217, 2
  br label %cond.end.972

cond.false.968:                                   ; preds = %cond.true.962
  %218 = load i32, i32* %width, align 4
  %add969 = add i32 %218, 2
  %sub970 = sub i32 %add969, -2147483648
  %add971 = add nsw i32 %sub970, -2147483648
  br label %cond.end.972

cond.end.972:                                     ; preds = %cond.false.968, %cond.true.966
  %cond973 = phi i32 [ %add967, %cond.true.966 ], [ %add971, %cond.false.968 ]
  store i32 %cond973, i32* %area, align 4
  br i1 true, label %if.then.4556, label %lor.lhs.false.1766

cond.false.974:                                   ; preds = %lor.lhs.false.958
  %219 = load i32, i32* %width, align 4
  %add975 = add i32 %219, 2
  %cmp976 = icmp ule i32 %add975, 2147483647
  br i1 %cmp976, label %cond.true.978, label %cond.false.980

cond.true.978:                                    ; preds = %cond.false.974
  %220 = load i32, i32* %width, align 4
  %add979 = add i32 %220, 2
  br label %cond.end.984

cond.false.980:                                   ; preds = %cond.false.974
  %221 = load i32, i32* %width, align 4
  %add981 = add i32 %221, 2
  %sub982 = sub i32 %add981, -2147483648
  %add983 = add nsw i32 %sub982, -2147483648
  br label %cond.end.984

cond.end.984:                                     ; preds = %cond.false.980, %cond.true.978
  %cond985 = phi i32 [ %add979, %cond.true.978 ], [ %add983, %cond.false.980 ]
  store i32 %cond985, i32* %area, align 4
  br i1 false, label %if.then.4556, label %lor.lhs.false.1766

cond.false.986:                                   ; preds = %cond.true.846
  %222 = load i32, i32* %width, align 4
  %add987 = add nsw i32 0, %222
  %mul988 = mul nsw i32 0, %add987
  %sub989 = sub nsw i32 %mul988, 1
  %cmp990 = icmp slt i32 %sub989, 0
  br i1 %cmp990, label %cond.true.992, label %cond.false.1008

cond.true.992:                                    ; preds = %cond.false.986
  %223 = load i32, i32* %width, align 4
  %add993 = add nsw i32 0, %223
  %mul994 = mul nsw i32 0, %add993
  %add995 = add nsw i32 %mul994, 0
  %neg996 = xor i32 %add995, -1
  %cmp997 = icmp eq i32 %neg996, -1
  %conv998 = zext i1 %cmp997 to i32
  %sub999 = sub nsw i32 0, %conv998
  %224 = load i32, i32* %width, align 4
  %add1000 = add nsw i32 0, %224
  %mul1001 = mul nsw i32 0, %add1000
  %add1002 = add nsw i32 %mul1001, 1
  %shl1003 = shl i32 %add1002, 30
  %sub1004 = sub nsw i32 %shl1003, 1
  %mul1005 = mul nsw i32 %sub1004, 2
  %add1006 = add nsw i32 %mul1005, 1
  %sub1007 = sub nsw i32 %sub999, %add1006
  br label %cond.end.1012

cond.false.1008:                                  ; preds = %cond.false.986
  %225 = load i32, i32* %width, align 4
  %add1009 = add nsw i32 0, %225
  %mul1010 = mul nsw i32 0, %add1009
  %add1011 = add nsw i32 %mul1010, 0
  br label %cond.end.1012

cond.end.1012:                                    ; preds = %cond.false.1008, %cond.true.992
  %cond1013 = phi i32 [ %sub1007, %cond.true.992 ], [ %add1011, %cond.false.1008 ]
  %cmp1014 = icmp slt i32 %cond1013, 0
  br i1 %cmp1014, label %cond.true.1016, label %cond.false.1071

cond.true.1016:                                   ; preds = %cond.end.1012
  br i1 false, label %cond.true.1017, label %cond.false.1048

cond.true.1017:                                   ; preds = %cond.true.1016
  %226 = load i32, i32* %width, align 4
  %227 = load i32, i32* %width, align 4
  %add1018 = add nsw i32 0, %227
  %mul1019 = mul nsw i32 0, %add1018
  %sub1020 = sub nsw i32 %mul1019, 1
  %cmp1021 = icmp slt i32 %sub1020, 0
  br i1 %cmp1021, label %cond.true.1023, label %cond.false.1039

cond.true.1023:                                   ; preds = %cond.true.1017
  %228 = load i32, i32* %width, align 4
  %add1024 = add nsw i32 0, %228
  %mul1025 = mul nsw i32 0, %add1024
  %add1026 = add nsw i32 %mul1025, 0
  %neg1027 = xor i32 %add1026, -1
  %cmp1028 = icmp eq i32 %neg1027, -1
  %conv1029 = zext i1 %cmp1028 to i32
  %sub1030 = sub nsw i32 0, %conv1029
  %229 = load i32, i32* %width, align 4
  %add1031 = add nsw i32 0, %229
  %mul1032 = mul nsw i32 0, %add1031
  %add1033 = add nsw i32 %mul1032, 1
  %shl1034 = shl i32 %add1033, 30
  %sub1035 = sub nsw i32 %shl1034, 1
  %mul1036 = mul nsw i32 %sub1035, 2
  %add1037 = add nsw i32 %mul1036, 1
  %sub1038 = sub nsw i32 %sub1030, %add1037
  br label %cond.end.1043

cond.false.1039:                                  ; preds = %cond.true.1017
  %230 = load i32, i32* %width, align 4
  %add1040 = add nsw i32 0, %230
  %mul1041 = mul nsw i32 0, %add1040
  %add1042 = add nsw i32 %mul1041, 0
  br label %cond.end.1043

cond.end.1043:                                    ; preds = %cond.false.1039, %cond.true.1023
  %cond1044 = phi i32 [ %sub1038, %cond.true.1023 ], [ %add1042, %cond.false.1039 ]
  %sub1045 = sub nsw i32 %cond1044, 2
  %cmp1046 = icmp slt i32 %226, %sub1045
  br i1 %cmp1046, label %cond.true.1101, label %lor.lhs.false.1087

cond.false.1048:                                  ; preds = %cond.true.1016
  %231 = load i32, i32* %width, align 4
  %add1049 = add nsw i32 0, %231
  %mul1050 = mul nsw i32 0, %add1049
  %sub1051 = sub nsw i32 %mul1050, 1
  %cmp1052 = icmp slt i32 %sub1051, 0
  br i1 %cmp1052, label %cond.true.1054, label %cond.false.1062

cond.true.1054:                                   ; preds = %cond.false.1048
  %232 = load i32, i32* %width, align 4
  %add1055 = add nsw i32 0, %232
  %mul1056 = mul nsw i32 0, %add1055
  %add1057 = add nsw i32 %mul1056, 1
  %shl1058 = shl i32 %add1057, 30
  %sub1059 = sub nsw i32 %shl1058, 1
  %mul1060 = mul nsw i32 %sub1059, 2
  %add1061 = add nsw i32 %mul1060, 1
  br label %cond.end.1066

cond.false.1062:                                  ; preds = %cond.false.1048
  %233 = load i32, i32* %width, align 4
  %add1063 = add nsw i32 0, %233
  %mul1064 = mul nsw i32 0, %add1063
  %sub1065 = sub nsw i32 %mul1064, 1
  br label %cond.end.1066

cond.end.1066:                                    ; preds = %cond.false.1062, %cond.true.1054
  %cond1067 = phi i32 [ %add1061, %cond.true.1054 ], [ %sub1065, %cond.false.1062 ]
  %sub1068 = sub nsw i32 %cond1067, 2
  %234 = load i32, i32* %width, align 4
  %cmp1069 = icmp slt i32 %sub1068, %234
  br i1 %cmp1069, label %cond.true.1101, label %lor.lhs.false.1087

cond.false.1071:                                  ; preds = %cond.end.1012
  %235 = load i32, i32* %width, align 4
  %cmp1072 = icmp slt i32 %235, 0
  br i1 %cmp1072, label %cond.true.1074, label %cond.false.1078

cond.true.1074:                                   ; preds = %cond.false.1071
  %236 = load i32, i32* %width, align 4
  %add1075 = add nsw i32 %236, 2
  %cmp1076 = icmp sle i32 2, %add1075
  br i1 %cmp1076, label %cond.true.1101, label %lor.lhs.false.1087

cond.false.1078:                                  ; preds = %cond.false.1071
  br i1 false, label %cond.true.1079, label %cond.false.1083

cond.true.1079:                                   ; preds = %cond.false.1078
  %237 = load i32, i32* %width, align 4
  %238 = load i32, i32* %width, align 4
  %add1080 = add nsw i32 %238, 2
  %cmp1081 = icmp sle i32 %237, %add1080
  br i1 %cmp1081, label %cond.true.1101, label %lor.lhs.false.1087

cond.false.1083:                                  ; preds = %cond.false.1078
  %239 = load i32, i32* %width, align 4
  %add1084 = add nsw i32 %239, 2
  %cmp1085 = icmp slt i32 %add1084, 2
  br i1 %cmp1085, label %cond.true.1101, label %lor.lhs.false.1087

lor.lhs.false.1087:                               ; preds = %cond.false.1083, %cond.true.1079, %cond.true.1074, %cond.end.1066, %cond.end.1043
  %240 = load i32, i32* %width, align 4
  %add1088 = add nsw i32 %240, 2
  %mul1089 = mul nsw i32 0, %add1088
  %sub1090 = sub nsw i32 %mul1089, 1
  %cmp1091 = icmp slt i32 %sub1090, 0
  br i1 %cmp1091, label %land.lhs.true.1093, label %lor.lhs.false.1097

land.lhs.true.1093:                               ; preds = %lor.lhs.false.1087
  %241 = load i32, i32* %width, align 4
  %add1094 = add nsw i32 %241, 2
  %cmp1095 = icmp slt i32 %add1094, -2147483648
  br i1 %cmp1095, label %cond.true.1101, label %lor.lhs.false.1097

lor.lhs.false.1097:                               ; preds = %land.lhs.true.1093, %lor.lhs.false.1087
  %242 = load i32, i32* %width, align 4
  %add1098 = add nsw i32 %242, 2
  %cmp1099 = icmp slt i32 2147483647, %add1098
  br i1 %cmp1099, label %cond.true.1101, label %cond.false.1113

cond.true.1101:                                   ; preds = %lor.lhs.false.1097, %land.lhs.true.1093, %cond.false.1083, %cond.true.1079, %cond.true.1074, %cond.end.1066, %cond.end.1043
  %243 = load i32, i32* %width, align 4
  %add1102 = add i32 %243, 2
  %cmp1103 = icmp ule i32 %add1102, 2147483647
  br i1 %cmp1103, label %cond.true.1105, label %cond.false.1107

cond.true.1105:                                   ; preds = %cond.true.1101
  %244 = load i32, i32* %width, align 4
  %add1106 = add i32 %244, 2
  br label %cond.end.1111

cond.false.1107:                                  ; preds = %cond.true.1101
  %245 = load i32, i32* %width, align 4
  %add1108 = add i32 %245, 2
  %sub1109 = sub i32 %add1108, -2147483648
  %add1110 = add nsw i32 %sub1109, -2147483648
  br label %cond.end.1111

cond.end.1111:                                    ; preds = %cond.false.1107, %cond.true.1105
  %cond1112 = phi i32 [ %add1106, %cond.true.1105 ], [ %add1110, %cond.false.1107 ]
  store i32 %cond1112, i32* %area, align 4
  br i1 true, label %if.then.4556, label %lor.lhs.false.1766

cond.false.1113:                                  ; preds = %lor.lhs.false.1097
  %246 = load i32, i32* %width, align 4
  %add1114 = add i32 %246, 2
  %cmp1115 = icmp ule i32 %add1114, 2147483647
  br i1 %cmp1115, label %cond.true.1117, label %cond.false.1119

cond.true.1117:                                   ; preds = %cond.false.1113
  %247 = load i32, i32* %width, align 4
  %add1118 = add i32 %247, 2
  br label %cond.end.1123

cond.false.1119:                                  ; preds = %cond.false.1113
  %248 = load i32, i32* %width, align 4
  %add1120 = add i32 %248, 2
  %sub1121 = sub i32 %add1120, -2147483648
  %add1122 = add nsw i32 %sub1121, -2147483648
  br label %cond.end.1123

cond.end.1123:                                    ; preds = %cond.false.1119, %cond.true.1117
  %cond1124 = phi i32 [ %add1118, %cond.true.1117 ], [ %add1122, %cond.false.1119 ]
  store i32 %cond1124, i32* %area, align 4
  br i1 false, label %if.then.4556, label %lor.lhs.false.1766

cond.false.1125:                                  ; preds = %cond.false.845
  br i1 false, label %cond.true.1126, label %cond.false.1446

cond.true.1126:                                   ; preds = %cond.false.1125
  br i1 true, label %cond.true.1127, label %cond.false.1297

cond.true.1127:                                   ; preds = %cond.true.1126
  %249 = load i32, i32* %width, align 4
  %conv1128 = sext i32 %249 to i64
  %add1129 = add nsw i64 0, %conv1128
  %mul1130 = mul nsw i64 0, %add1129
  %sub1131 = sub nsw i64 %mul1130, 1
  %cmp1132 = icmp slt i64 %sub1131, 0
  br i1 %cmp1132, label %cond.true.1134, label %cond.false.1153

cond.true.1134:                                   ; preds = %cond.true.1127
  %250 = load i32, i32* %width, align 4
  %conv1135 = sext i32 %250 to i64
  %add1136 = add nsw i64 0, %conv1135
  %mul1137 = mul nsw i64 0, %add1136
  %add1138 = add nsw i64 %mul1137, 0
  %neg1139 = xor i64 %add1138, -1
  %cmp1140 = icmp eq i64 %neg1139, -1
  %conv1141 = zext i1 %cmp1140 to i32
  %sub1142 = sub nsw i32 0, %conv1141
  %conv1143 = sext i32 %sub1142 to i64
  %251 = load i32, i32* %width, align 4
  %conv1144 = sext i32 %251 to i64
  %add1145 = add nsw i64 0, %conv1144
  %mul1146 = mul nsw i64 0, %add1145
  %add1147 = add nsw i64 %mul1146, 1
  %shl1148 = shl i64 %add1147, 62
  %sub1149 = sub nsw i64 %shl1148, 1
  %mul1150 = mul nsw i64 %sub1149, 2
  %add1151 = add nsw i64 %mul1150, 1
  %sub1152 = sub nsw i64 %conv1143, %add1151
  br label %cond.end.1158

cond.false.1153:                                  ; preds = %cond.true.1127
  %252 = load i32, i32* %width, align 4
  %conv1154 = sext i32 %252 to i64
  %add1155 = add nsw i64 0, %conv1154
  %mul1156 = mul nsw i64 0, %add1155
  %add1157 = add nsw i64 %mul1156, 0
  br label %cond.end.1158

cond.end.1158:                                    ; preds = %cond.false.1153, %cond.true.1134
  %cond1159 = phi i64 [ %sub1152, %cond.true.1134 ], [ %add1157, %cond.false.1153 ]
  %cmp1160 = icmp slt i64 %cond1159, 0
  br i1 %cmp1160, label %cond.true.1162, label %cond.false.1227

cond.true.1162:                                   ; preds = %cond.end.1158
  br i1 false, label %cond.true.1163, label %cond.false.1200

cond.true.1163:                                   ; preds = %cond.true.1162
  %253 = load i32, i32* %width, align 4
  %conv1164 = sext i32 %253 to i64
  %254 = load i32, i32* %width, align 4
  %conv1165 = sext i32 %254 to i64
  %add1166 = add nsw i64 0, %conv1165
  %mul1167 = mul nsw i64 0, %add1166
  %sub1168 = sub nsw i64 %mul1167, 1
  %cmp1169 = icmp slt i64 %sub1168, 0
  br i1 %cmp1169, label %cond.true.1171, label %cond.false.1190

cond.true.1171:                                   ; preds = %cond.true.1163
  %255 = load i32, i32* %width, align 4
  %conv1172 = sext i32 %255 to i64
  %add1173 = add nsw i64 0, %conv1172
  %mul1174 = mul nsw i64 0, %add1173
  %add1175 = add nsw i64 %mul1174, 0
  %neg1176 = xor i64 %add1175, -1
  %cmp1177 = icmp eq i64 %neg1176, -1
  %conv1178 = zext i1 %cmp1177 to i32
  %sub1179 = sub nsw i32 0, %conv1178
  %conv1180 = sext i32 %sub1179 to i64
  %256 = load i32, i32* %width, align 4
  %conv1181 = sext i32 %256 to i64
  %add1182 = add nsw i64 0, %conv1181
  %mul1183 = mul nsw i64 0, %add1182
  %add1184 = add nsw i64 %mul1183, 1
  %shl1185 = shl i64 %add1184, 62
  %sub1186 = sub nsw i64 %shl1185, 1
  %mul1187 = mul nsw i64 %sub1186, 2
  %add1188 = add nsw i64 %mul1187, 1
  %sub1189 = sub nsw i64 %conv1180, %add1188
  br label %cond.end.1195

cond.false.1190:                                  ; preds = %cond.true.1163
  %257 = load i32, i32* %width, align 4
  %conv1191 = sext i32 %257 to i64
  %add1192 = add nsw i64 0, %conv1191
  %mul1193 = mul nsw i64 0, %add1192
  %add1194 = add nsw i64 %mul1193, 0
  br label %cond.end.1195

cond.end.1195:                                    ; preds = %cond.false.1190, %cond.true.1171
  %cond1196 = phi i64 [ %sub1189, %cond.true.1171 ], [ %add1194, %cond.false.1190 ]
  %sub1197 = sub nsw i64 %cond1196, 2
  %cmp1198 = icmp slt i64 %conv1164, %sub1197
  br i1 %cmp1198, label %cond.true.1265, label %lor.lhs.false.1248

cond.false.1200:                                  ; preds = %cond.true.1162
  %258 = load i32, i32* %width, align 4
  %conv1201 = sext i32 %258 to i64
  %add1202 = add nsw i64 0, %conv1201
  %mul1203 = mul nsw i64 0, %add1202
  %sub1204 = sub nsw i64 %mul1203, 1
  %cmp1205 = icmp slt i64 %sub1204, 0
  br i1 %cmp1205, label %cond.true.1207, label %cond.false.1216

cond.true.1207:                                   ; preds = %cond.false.1200
  %259 = load i32, i32* %width, align 4
  %conv1208 = sext i32 %259 to i64
  %add1209 = add nsw i64 0, %conv1208
  %mul1210 = mul nsw i64 0, %add1209
  %add1211 = add nsw i64 %mul1210, 1
  %shl1212 = shl i64 %add1211, 62
  %sub1213 = sub nsw i64 %shl1212, 1
  %mul1214 = mul nsw i64 %sub1213, 2
  %add1215 = add nsw i64 %mul1214, 1
  br label %cond.end.1221

cond.false.1216:                                  ; preds = %cond.false.1200
  %260 = load i32, i32* %width, align 4
  %conv1217 = sext i32 %260 to i64
  %add1218 = add nsw i64 0, %conv1217
  %mul1219 = mul nsw i64 0, %add1218
  %sub1220 = sub nsw i64 %mul1219, 1
  br label %cond.end.1221

cond.end.1221:                                    ; preds = %cond.false.1216, %cond.true.1207
  %cond1222 = phi i64 [ %add1215, %cond.true.1207 ], [ %sub1220, %cond.false.1216 ]
  %sub1223 = sub nsw i64 %cond1222, 2
  %261 = load i32, i32* %width, align 4
  %conv1224 = sext i32 %261 to i64
  %cmp1225 = icmp slt i64 %sub1223, %conv1224
  br i1 %cmp1225, label %cond.true.1265, label %lor.lhs.false.1248

cond.false.1227:                                  ; preds = %cond.end.1158
  %262 = load i32, i32* %width, align 4
  %conv1228 = sext i32 %262 to i64
  %cmp1229 = icmp slt i64 %conv1228, 0
  br i1 %cmp1229, label %cond.true.1231, label %cond.false.1236

cond.true.1231:                                   ; preds = %cond.false.1227
  %263 = load i32, i32* %width, align 4
  %conv1232 = sext i32 %263 to i64
  %add1233 = add nsw i64 %conv1232, 2
  %cmp1234 = icmp sle i64 2, %add1233
  br i1 %cmp1234, label %cond.true.1265, label %lor.lhs.false.1248

cond.false.1236:                                  ; preds = %cond.false.1227
  br i1 false, label %cond.true.1237, label %cond.false.1243

cond.true.1237:                                   ; preds = %cond.false.1236
  %264 = load i32, i32* %width, align 4
  %conv1238 = sext i32 %264 to i64
  %265 = load i32, i32* %width, align 4
  %conv1239 = sext i32 %265 to i64
  %add1240 = add nsw i64 %conv1239, 2
  %cmp1241 = icmp sle i64 %conv1238, %add1240
  br i1 %cmp1241, label %cond.true.1265, label %lor.lhs.false.1248

cond.false.1243:                                  ; preds = %cond.false.1236
  %266 = load i32, i32* %width, align 4
  %conv1244 = sext i32 %266 to i64
  %add1245 = add nsw i64 %conv1244, 2
  %cmp1246 = icmp slt i64 %add1245, 2
  br i1 %cmp1246, label %cond.true.1265, label %lor.lhs.false.1248

lor.lhs.false.1248:                               ; preds = %cond.false.1243, %cond.true.1237, %cond.true.1231, %cond.end.1221, %cond.end.1195
  %267 = load i32, i32* %width, align 4
  %conv1249 = sext i32 %267 to i64
  %add1250 = add nsw i64 %conv1249, 2
  %mul1251 = mul nsw i64 0, %add1250
  %sub1252 = sub nsw i64 %mul1251, 1
  %cmp1253 = icmp slt i64 %sub1252, 0
  br i1 %cmp1253, label %land.lhs.true.1255, label %lor.lhs.false.1260

land.lhs.true.1255:                               ; preds = %lor.lhs.false.1248
  %268 = load i32, i32* %width, align 4
  %conv1256 = sext i32 %268 to i64
  %add1257 = add nsw i64 %conv1256, 2
  %cmp1258 = icmp slt i64 %add1257, -9223372036854775808
  br i1 %cmp1258, label %cond.true.1265, label %lor.lhs.false.1260

lor.lhs.false.1260:                               ; preds = %land.lhs.true.1255, %lor.lhs.false.1248
  %269 = load i32, i32* %width, align 4
  %conv1261 = sext i32 %269 to i64
  %add1262 = add nsw i64 %conv1261, 2
  %cmp1263 = icmp slt i64 9223372036854775807, %add1262
  br i1 %cmp1263, label %cond.true.1265, label %cond.false.1281

cond.true.1265:                                   ; preds = %lor.lhs.false.1260, %land.lhs.true.1255, %cond.false.1243, %cond.true.1237, %cond.true.1231, %cond.end.1221, %cond.end.1195
  %270 = load i32, i32* %width, align 4
  %conv1266 = sext i32 %270 to i64
  %add1267 = add i64 %conv1266, 2
  %cmp1268 = icmp ule i64 %add1267, 9223372036854775807
  br i1 %cmp1268, label %cond.true.1270, label %cond.false.1273

cond.true.1270:                                   ; preds = %cond.true.1265
  %271 = load i32, i32* %width, align 4
  %conv1271 = sext i32 %271 to i64
  %add1272 = add i64 %conv1271, 2
  br label %cond.end.1278

cond.false.1273:                                  ; preds = %cond.true.1265
  %272 = load i32, i32* %width, align 4
  %conv1274 = sext i32 %272 to i64
  %add1275 = add i64 %conv1274, 2
  %sub1276 = sub i64 %add1275, -9223372036854775808
  %add1277 = add nsw i64 %sub1276, -9223372036854775808
  br label %cond.end.1278

cond.end.1278:                                    ; preds = %cond.false.1273, %cond.true.1270
  %cond1279 = phi i64 [ %add1272, %cond.true.1270 ], [ %add1277, %cond.false.1273 ]
  %conv1280 = trunc i64 %cond1279 to i32
  store i32 %conv1280, i32* %area, align 4
  br i1 true, label %if.then.4556, label %lor.lhs.false.1766

cond.false.1281:                                  ; preds = %lor.lhs.false.1260
  %273 = load i32, i32* %width, align 4
  %conv1282 = sext i32 %273 to i64
  %add1283 = add i64 %conv1282, 2
  %cmp1284 = icmp ule i64 %add1283, 9223372036854775807
  br i1 %cmp1284, label %cond.true.1286, label %cond.false.1289

cond.true.1286:                                   ; preds = %cond.false.1281
  %274 = load i32, i32* %width, align 4
  %conv1287 = sext i32 %274 to i64
  %add1288 = add i64 %conv1287, 2
  br label %cond.end.1294

cond.false.1289:                                  ; preds = %cond.false.1281
  %275 = load i32, i32* %width, align 4
  %conv1290 = sext i32 %275 to i64
  %add1291 = add i64 %conv1290, 2
  %sub1292 = sub i64 %add1291, -9223372036854775808
  %add1293 = add nsw i64 %sub1292, -9223372036854775808
  br label %cond.end.1294

cond.end.1294:                                    ; preds = %cond.false.1289, %cond.true.1286
  %cond1295 = phi i64 [ %add1288, %cond.true.1286 ], [ %add1293, %cond.false.1289 ]
  %conv1296 = trunc i64 %cond1295 to i32
  store i32 %conv1296, i32* %area, align 4
  br i1 false, label %if.then.4556, label %lor.lhs.false.1766

cond.false.1297:                                  ; preds = %cond.true.1126
  %276 = load i32, i32* %width, align 4
  %add1298 = add nsw i32 0, %276
  %mul1299 = mul nsw i32 0, %add1298
  %sub1300 = sub nsw i32 %mul1299, 1
  %cmp1301 = icmp slt i32 %sub1300, 0
  br i1 %cmp1301, label %cond.true.1303, label %cond.false.1319

cond.true.1303:                                   ; preds = %cond.false.1297
  %277 = load i32, i32* %width, align 4
  %add1304 = add nsw i32 0, %277
  %mul1305 = mul nsw i32 0, %add1304
  %add1306 = add nsw i32 %mul1305, 0
  %neg1307 = xor i32 %add1306, -1
  %cmp1308 = icmp eq i32 %neg1307, -1
  %conv1309 = zext i1 %cmp1308 to i32
  %sub1310 = sub nsw i32 0, %conv1309
  %278 = load i32, i32* %width, align 4
  %add1311 = add nsw i32 0, %278
  %mul1312 = mul nsw i32 0, %add1311
  %add1313 = add nsw i32 %mul1312, 1
  %shl1314 = shl i32 %add1313, 30
  %sub1315 = sub nsw i32 %shl1314, 1
  %mul1316 = mul nsw i32 %sub1315, 2
  %add1317 = add nsw i32 %mul1316, 1
  %sub1318 = sub nsw i32 %sub1310, %add1317
  br label %cond.end.1323

cond.false.1319:                                  ; preds = %cond.false.1297
  %279 = load i32, i32* %width, align 4
  %add1320 = add nsw i32 0, %279
  %mul1321 = mul nsw i32 0, %add1320
  %add1322 = add nsw i32 %mul1321, 0
  br label %cond.end.1323

cond.end.1323:                                    ; preds = %cond.false.1319, %cond.true.1303
  %cond1324 = phi i32 [ %sub1318, %cond.true.1303 ], [ %add1322, %cond.false.1319 ]
  %cmp1325 = icmp slt i32 %cond1324, 0
  br i1 %cmp1325, label %cond.true.1327, label %cond.false.1382

cond.true.1327:                                   ; preds = %cond.end.1323
  br i1 false, label %cond.true.1328, label %cond.false.1359

cond.true.1328:                                   ; preds = %cond.true.1327
  %280 = load i32, i32* %width, align 4
  %281 = load i32, i32* %width, align 4
  %add1329 = add nsw i32 0, %281
  %mul1330 = mul nsw i32 0, %add1329
  %sub1331 = sub nsw i32 %mul1330, 1
  %cmp1332 = icmp slt i32 %sub1331, 0
  br i1 %cmp1332, label %cond.true.1334, label %cond.false.1350

cond.true.1334:                                   ; preds = %cond.true.1328
  %282 = load i32, i32* %width, align 4
  %add1335 = add nsw i32 0, %282
  %mul1336 = mul nsw i32 0, %add1335
  %add1337 = add nsw i32 %mul1336, 0
  %neg1338 = xor i32 %add1337, -1
  %cmp1339 = icmp eq i32 %neg1338, -1
  %conv1340 = zext i1 %cmp1339 to i32
  %sub1341 = sub nsw i32 0, %conv1340
  %283 = load i32, i32* %width, align 4
  %add1342 = add nsw i32 0, %283
  %mul1343 = mul nsw i32 0, %add1342
  %add1344 = add nsw i32 %mul1343, 1
  %shl1345 = shl i32 %add1344, 30
  %sub1346 = sub nsw i32 %shl1345, 1
  %mul1347 = mul nsw i32 %sub1346, 2
  %add1348 = add nsw i32 %mul1347, 1
  %sub1349 = sub nsw i32 %sub1341, %add1348
  br label %cond.end.1354

cond.false.1350:                                  ; preds = %cond.true.1328
  %284 = load i32, i32* %width, align 4
  %add1351 = add nsw i32 0, %284
  %mul1352 = mul nsw i32 0, %add1351
  %add1353 = add nsw i32 %mul1352, 0
  br label %cond.end.1354

cond.end.1354:                                    ; preds = %cond.false.1350, %cond.true.1334
  %cond1355 = phi i32 [ %sub1349, %cond.true.1334 ], [ %add1353, %cond.false.1350 ]
  %sub1356 = sub nsw i32 %cond1355, 2
  %cmp1357 = icmp slt i32 %280, %sub1356
  br i1 %cmp1357, label %cond.true.1414, label %lor.lhs.false.1398

cond.false.1359:                                  ; preds = %cond.true.1327
  %285 = load i32, i32* %width, align 4
  %add1360 = add nsw i32 0, %285
  %mul1361 = mul nsw i32 0, %add1360
  %sub1362 = sub nsw i32 %mul1361, 1
  %cmp1363 = icmp slt i32 %sub1362, 0
  br i1 %cmp1363, label %cond.true.1365, label %cond.false.1373

cond.true.1365:                                   ; preds = %cond.false.1359
  %286 = load i32, i32* %width, align 4
  %add1366 = add nsw i32 0, %286
  %mul1367 = mul nsw i32 0, %add1366
  %add1368 = add nsw i32 %mul1367, 1
  %shl1369 = shl i32 %add1368, 30
  %sub1370 = sub nsw i32 %shl1369, 1
  %mul1371 = mul nsw i32 %sub1370, 2
  %add1372 = add nsw i32 %mul1371, 1
  br label %cond.end.1377

cond.false.1373:                                  ; preds = %cond.false.1359
  %287 = load i32, i32* %width, align 4
  %add1374 = add nsw i32 0, %287
  %mul1375 = mul nsw i32 0, %add1374
  %sub1376 = sub nsw i32 %mul1375, 1
  br label %cond.end.1377

cond.end.1377:                                    ; preds = %cond.false.1373, %cond.true.1365
  %cond1378 = phi i32 [ %add1372, %cond.true.1365 ], [ %sub1376, %cond.false.1373 ]
  %sub1379 = sub nsw i32 %cond1378, 2
  %288 = load i32, i32* %width, align 4
  %cmp1380 = icmp slt i32 %sub1379, %288
  br i1 %cmp1380, label %cond.true.1414, label %lor.lhs.false.1398

cond.false.1382:                                  ; preds = %cond.end.1323
  %289 = load i32, i32* %width, align 4
  %cmp1383 = icmp slt i32 %289, 0
  br i1 %cmp1383, label %cond.true.1385, label %cond.false.1389

cond.true.1385:                                   ; preds = %cond.false.1382
  %290 = load i32, i32* %width, align 4
  %add1386 = add nsw i32 %290, 2
  %cmp1387 = icmp sle i32 2, %add1386
  br i1 %cmp1387, label %cond.true.1414, label %lor.lhs.false.1398

cond.false.1389:                                  ; preds = %cond.false.1382
  br i1 false, label %cond.true.1390, label %cond.false.1394

cond.true.1390:                                   ; preds = %cond.false.1389
  %291 = load i32, i32* %width, align 4
  %292 = load i32, i32* %width, align 4
  %add1391 = add nsw i32 %292, 2
  %cmp1392 = icmp sle i32 %291, %add1391
  br i1 %cmp1392, label %cond.true.1414, label %lor.lhs.false.1398

cond.false.1394:                                  ; preds = %cond.false.1389
  %293 = load i32, i32* %width, align 4
  %add1395 = add nsw i32 %293, 2
  %cmp1396 = icmp slt i32 %add1395, 2
  br i1 %cmp1396, label %cond.true.1414, label %lor.lhs.false.1398

lor.lhs.false.1398:                               ; preds = %cond.false.1394, %cond.true.1390, %cond.true.1385, %cond.end.1377, %cond.end.1354
  %294 = load i32, i32* %width, align 4
  %add1399 = add nsw i32 %294, 2
  %mul1400 = mul nsw i32 0, %add1399
  %sub1401 = sub nsw i32 %mul1400, 1
  %cmp1402 = icmp slt i32 %sub1401, 0
  br i1 %cmp1402, label %land.lhs.true.1404, label %lor.lhs.false.1409

land.lhs.true.1404:                               ; preds = %lor.lhs.false.1398
  %295 = load i32, i32* %width, align 4
  %add1405 = add nsw i32 %295, 2
  %conv1406 = sext i32 %add1405 to i64
  %cmp1407 = icmp slt i64 %conv1406, -9223372036854775808
  br i1 %cmp1407, label %cond.true.1414, label %lor.lhs.false.1409

lor.lhs.false.1409:                               ; preds = %land.lhs.true.1404, %lor.lhs.false.1398
  %296 = load i32, i32* %width, align 4
  %add1410 = add nsw i32 %296, 2
  %conv1411 = sext i32 %add1410 to i64
  %cmp1412 = icmp slt i64 9223372036854775807, %conv1411
  br i1 %cmp1412, label %cond.true.1414, label %cond.false.1430

cond.true.1414:                                   ; preds = %lor.lhs.false.1409, %land.lhs.true.1404, %cond.false.1394, %cond.true.1390, %cond.true.1385, %cond.end.1377, %cond.end.1354
  %297 = load i32, i32* %width, align 4
  %conv1415 = sext i32 %297 to i64
  %add1416 = add i64 %conv1415, 2
  %cmp1417 = icmp ule i64 %add1416, 9223372036854775807
  br i1 %cmp1417, label %cond.true.1419, label %cond.false.1422

cond.true.1419:                                   ; preds = %cond.true.1414
  %298 = load i32, i32* %width, align 4
  %conv1420 = sext i32 %298 to i64
  %add1421 = add i64 %conv1420, 2
  br label %cond.end.1427

cond.false.1422:                                  ; preds = %cond.true.1414
  %299 = load i32, i32* %width, align 4
  %conv1423 = sext i32 %299 to i64
  %add1424 = add i64 %conv1423, 2
  %sub1425 = sub i64 %add1424, -9223372036854775808
  %add1426 = add nsw i64 %sub1425, -9223372036854775808
  br label %cond.end.1427

cond.end.1427:                                    ; preds = %cond.false.1422, %cond.true.1419
  %cond1428 = phi i64 [ %add1421, %cond.true.1419 ], [ %add1426, %cond.false.1422 ]
  %conv1429 = trunc i64 %cond1428 to i32
  store i32 %conv1429, i32* %area, align 4
  br i1 true, label %if.then.4556, label %lor.lhs.false.1766

cond.false.1430:                                  ; preds = %lor.lhs.false.1409
  %300 = load i32, i32* %width, align 4
  %conv1431 = sext i32 %300 to i64
  %add1432 = add i64 %conv1431, 2
  %cmp1433 = icmp ule i64 %add1432, 9223372036854775807
  br i1 %cmp1433, label %cond.true.1435, label %cond.false.1438

cond.true.1435:                                   ; preds = %cond.false.1430
  %301 = load i32, i32* %width, align 4
  %conv1436 = sext i32 %301 to i64
  %add1437 = add i64 %conv1436, 2
  br label %cond.end.1443

cond.false.1438:                                  ; preds = %cond.false.1430
  %302 = load i32, i32* %width, align 4
  %conv1439 = sext i32 %302 to i64
  %add1440 = add i64 %conv1439, 2
  %sub1441 = sub i64 %add1440, -9223372036854775808
  %add1442 = add nsw i64 %sub1441, -9223372036854775808
  br label %cond.end.1443

cond.end.1443:                                    ; preds = %cond.false.1438, %cond.true.1435
  %cond1444 = phi i64 [ %add1437, %cond.true.1435 ], [ %add1442, %cond.false.1438 ]
  %conv1445 = trunc i64 %cond1444 to i32
  store i32 %conv1445, i32* %area, align 4
  br i1 false, label %if.then.4556, label %lor.lhs.false.1766

cond.false.1446:                                  ; preds = %cond.false.1125
  br i1 true, label %cond.true.1447, label %cond.false.1617

cond.true.1447:                                   ; preds = %cond.false.1446
  %303 = load i32, i32* %width, align 4
  %conv1448 = sext i32 %303 to i64
  %add1449 = add nsw i64 0, %conv1448
  %mul1450 = mul nsw i64 0, %add1449
  %sub1451 = sub nsw i64 %mul1450, 1
  %cmp1452 = icmp slt i64 %sub1451, 0
  br i1 %cmp1452, label %cond.true.1454, label %cond.false.1473

cond.true.1454:                                   ; preds = %cond.true.1447
  %304 = load i32, i32* %width, align 4
  %conv1455 = sext i32 %304 to i64
  %add1456 = add nsw i64 0, %conv1455
  %mul1457 = mul nsw i64 0, %add1456
  %add1458 = add nsw i64 %mul1457, 0
  %neg1459 = xor i64 %add1458, -1
  %cmp1460 = icmp eq i64 %neg1459, -1
  %conv1461 = zext i1 %cmp1460 to i32
  %sub1462 = sub nsw i32 0, %conv1461
  %conv1463 = sext i32 %sub1462 to i64
  %305 = load i32, i32* %width, align 4
  %conv1464 = sext i32 %305 to i64
  %add1465 = add nsw i64 0, %conv1464
  %mul1466 = mul nsw i64 0, %add1465
  %add1467 = add nsw i64 %mul1466, 1
  %shl1468 = shl i64 %add1467, 62
  %sub1469 = sub nsw i64 %shl1468, 1
  %mul1470 = mul nsw i64 %sub1469, 2
  %add1471 = add nsw i64 %mul1470, 1
  %sub1472 = sub nsw i64 %conv1463, %add1471
  br label %cond.end.1478

cond.false.1473:                                  ; preds = %cond.true.1447
  %306 = load i32, i32* %width, align 4
  %conv1474 = sext i32 %306 to i64
  %add1475 = add nsw i64 0, %conv1474
  %mul1476 = mul nsw i64 0, %add1475
  %add1477 = add nsw i64 %mul1476, 0
  br label %cond.end.1478

cond.end.1478:                                    ; preds = %cond.false.1473, %cond.true.1454
  %cond1479 = phi i64 [ %sub1472, %cond.true.1454 ], [ %add1477, %cond.false.1473 ]
  %cmp1480 = icmp slt i64 %cond1479, 0
  br i1 %cmp1480, label %cond.true.1482, label %cond.false.1547

cond.true.1482:                                   ; preds = %cond.end.1478
  br i1 false, label %cond.true.1483, label %cond.false.1520

cond.true.1483:                                   ; preds = %cond.true.1482
  %307 = load i32, i32* %width, align 4
  %conv1484 = sext i32 %307 to i64
  %308 = load i32, i32* %width, align 4
  %conv1485 = sext i32 %308 to i64
  %add1486 = add nsw i64 0, %conv1485
  %mul1487 = mul nsw i64 0, %add1486
  %sub1488 = sub nsw i64 %mul1487, 1
  %cmp1489 = icmp slt i64 %sub1488, 0
  br i1 %cmp1489, label %cond.true.1491, label %cond.false.1510

cond.true.1491:                                   ; preds = %cond.true.1483
  %309 = load i32, i32* %width, align 4
  %conv1492 = sext i32 %309 to i64
  %add1493 = add nsw i64 0, %conv1492
  %mul1494 = mul nsw i64 0, %add1493
  %add1495 = add nsw i64 %mul1494, 0
  %neg1496 = xor i64 %add1495, -1
  %cmp1497 = icmp eq i64 %neg1496, -1
  %conv1498 = zext i1 %cmp1497 to i32
  %sub1499 = sub nsw i32 0, %conv1498
  %conv1500 = sext i32 %sub1499 to i64
  %310 = load i32, i32* %width, align 4
  %conv1501 = sext i32 %310 to i64
  %add1502 = add nsw i64 0, %conv1501
  %mul1503 = mul nsw i64 0, %add1502
  %add1504 = add nsw i64 %mul1503, 1
  %shl1505 = shl i64 %add1504, 62
  %sub1506 = sub nsw i64 %shl1505, 1
  %mul1507 = mul nsw i64 %sub1506, 2
  %add1508 = add nsw i64 %mul1507, 1
  %sub1509 = sub nsw i64 %conv1500, %add1508
  br label %cond.end.1515

cond.false.1510:                                  ; preds = %cond.true.1483
  %311 = load i32, i32* %width, align 4
  %conv1511 = sext i32 %311 to i64
  %add1512 = add nsw i64 0, %conv1511
  %mul1513 = mul nsw i64 0, %add1512
  %add1514 = add nsw i64 %mul1513, 0
  br label %cond.end.1515

cond.end.1515:                                    ; preds = %cond.false.1510, %cond.true.1491
  %cond1516 = phi i64 [ %sub1509, %cond.true.1491 ], [ %add1514, %cond.false.1510 ]
  %sub1517 = sub nsw i64 %cond1516, 2
  %cmp1518 = icmp slt i64 %conv1484, %sub1517
  br i1 %cmp1518, label %cond.true.1585, label %lor.lhs.false.1568

cond.false.1520:                                  ; preds = %cond.true.1482
  %312 = load i32, i32* %width, align 4
  %conv1521 = sext i32 %312 to i64
  %add1522 = add nsw i64 0, %conv1521
  %mul1523 = mul nsw i64 0, %add1522
  %sub1524 = sub nsw i64 %mul1523, 1
  %cmp1525 = icmp slt i64 %sub1524, 0
  br i1 %cmp1525, label %cond.true.1527, label %cond.false.1536

cond.true.1527:                                   ; preds = %cond.false.1520
  %313 = load i32, i32* %width, align 4
  %conv1528 = sext i32 %313 to i64
  %add1529 = add nsw i64 0, %conv1528
  %mul1530 = mul nsw i64 0, %add1529
  %add1531 = add nsw i64 %mul1530, 1
  %shl1532 = shl i64 %add1531, 62
  %sub1533 = sub nsw i64 %shl1532, 1
  %mul1534 = mul nsw i64 %sub1533, 2
  %add1535 = add nsw i64 %mul1534, 1
  br label %cond.end.1541

cond.false.1536:                                  ; preds = %cond.false.1520
  %314 = load i32, i32* %width, align 4
  %conv1537 = sext i32 %314 to i64
  %add1538 = add nsw i64 0, %conv1537
  %mul1539 = mul nsw i64 0, %add1538
  %sub1540 = sub nsw i64 %mul1539, 1
  br label %cond.end.1541

cond.end.1541:                                    ; preds = %cond.false.1536, %cond.true.1527
  %cond1542 = phi i64 [ %add1535, %cond.true.1527 ], [ %sub1540, %cond.false.1536 ]
  %sub1543 = sub nsw i64 %cond1542, 2
  %315 = load i32, i32* %width, align 4
  %conv1544 = sext i32 %315 to i64
  %cmp1545 = icmp slt i64 %sub1543, %conv1544
  br i1 %cmp1545, label %cond.true.1585, label %lor.lhs.false.1568

cond.false.1547:                                  ; preds = %cond.end.1478
  %316 = load i32, i32* %width, align 4
  %conv1548 = sext i32 %316 to i64
  %cmp1549 = icmp slt i64 %conv1548, 0
  br i1 %cmp1549, label %cond.true.1551, label %cond.false.1556

cond.true.1551:                                   ; preds = %cond.false.1547
  %317 = load i32, i32* %width, align 4
  %conv1552 = sext i32 %317 to i64
  %add1553 = add nsw i64 %conv1552, 2
  %cmp1554 = icmp sle i64 2, %add1553
  br i1 %cmp1554, label %cond.true.1585, label %lor.lhs.false.1568

cond.false.1556:                                  ; preds = %cond.false.1547
  br i1 false, label %cond.true.1557, label %cond.false.1563

cond.true.1557:                                   ; preds = %cond.false.1556
  %318 = load i32, i32* %width, align 4
  %conv1558 = sext i32 %318 to i64
  %319 = load i32, i32* %width, align 4
  %conv1559 = sext i32 %319 to i64
  %add1560 = add nsw i64 %conv1559, 2
  %cmp1561 = icmp sle i64 %conv1558, %add1560
  br i1 %cmp1561, label %cond.true.1585, label %lor.lhs.false.1568

cond.false.1563:                                  ; preds = %cond.false.1556
  %320 = load i32, i32* %width, align 4
  %conv1564 = sext i32 %320 to i64
  %add1565 = add nsw i64 %conv1564, 2
  %cmp1566 = icmp slt i64 %add1565, 2
  br i1 %cmp1566, label %cond.true.1585, label %lor.lhs.false.1568

lor.lhs.false.1568:                               ; preds = %cond.false.1563, %cond.true.1557, %cond.true.1551, %cond.end.1541, %cond.end.1515
  %321 = load i32, i32* %width, align 4
  %conv1569 = sext i32 %321 to i64
  %add1570 = add nsw i64 %conv1569, 2
  %mul1571 = mul nsw i64 0, %add1570
  %sub1572 = sub nsw i64 %mul1571, 1
  %cmp1573 = icmp slt i64 %sub1572, 0
  br i1 %cmp1573, label %land.lhs.true.1575, label %lor.lhs.false.1580

land.lhs.true.1575:                               ; preds = %lor.lhs.false.1568
  %322 = load i32, i32* %width, align 4
  %conv1576 = sext i32 %322 to i64
  %add1577 = add nsw i64 %conv1576, 2
  %cmp1578 = icmp slt i64 %add1577, -9223372036854775808
  br i1 %cmp1578, label %cond.true.1585, label %lor.lhs.false.1580

lor.lhs.false.1580:                               ; preds = %land.lhs.true.1575, %lor.lhs.false.1568
  %323 = load i32, i32* %width, align 4
  %conv1581 = sext i32 %323 to i64
  %add1582 = add nsw i64 %conv1581, 2
  %cmp1583 = icmp slt i64 9223372036854775807, %add1582
  br i1 %cmp1583, label %cond.true.1585, label %cond.false.1601

cond.true.1585:                                   ; preds = %lor.lhs.false.1580, %land.lhs.true.1575, %cond.false.1563, %cond.true.1557, %cond.true.1551, %cond.end.1541, %cond.end.1515
  %324 = load i32, i32* %width, align 4
  %conv1586 = sext i32 %324 to i64
  %add1587 = add i64 %conv1586, 2
  %cmp1588 = icmp ule i64 %add1587, 9223372036854775807
  br i1 %cmp1588, label %cond.true.1590, label %cond.false.1593

cond.true.1590:                                   ; preds = %cond.true.1585
  %325 = load i32, i32* %width, align 4
  %conv1591 = sext i32 %325 to i64
  %add1592 = add i64 %conv1591, 2
  br label %cond.end.1598

cond.false.1593:                                  ; preds = %cond.true.1585
  %326 = load i32, i32* %width, align 4
  %conv1594 = sext i32 %326 to i64
  %add1595 = add i64 %conv1594, 2
  %sub1596 = sub i64 %add1595, -9223372036854775808
  %add1597 = add nsw i64 %sub1596, -9223372036854775808
  br label %cond.end.1598

cond.end.1598:                                    ; preds = %cond.false.1593, %cond.true.1590
  %cond1599 = phi i64 [ %add1592, %cond.true.1590 ], [ %add1597, %cond.false.1593 ]
  %conv1600 = trunc i64 %cond1599 to i32
  store i32 %conv1600, i32* %area, align 4
  br i1 true, label %if.then.4556, label %lor.lhs.false.1766

cond.false.1601:                                  ; preds = %lor.lhs.false.1580
  %327 = load i32, i32* %width, align 4
  %conv1602 = sext i32 %327 to i64
  %add1603 = add i64 %conv1602, 2
  %cmp1604 = icmp ule i64 %add1603, 9223372036854775807
  br i1 %cmp1604, label %cond.true.1606, label %cond.false.1609

cond.true.1606:                                   ; preds = %cond.false.1601
  %328 = load i32, i32* %width, align 4
  %conv1607 = sext i32 %328 to i64
  %add1608 = add i64 %conv1607, 2
  br label %cond.end.1614

cond.false.1609:                                  ; preds = %cond.false.1601
  %329 = load i32, i32* %width, align 4
  %conv1610 = sext i32 %329 to i64
  %add1611 = add i64 %conv1610, 2
  %sub1612 = sub i64 %add1611, -9223372036854775808
  %add1613 = add nsw i64 %sub1612, -9223372036854775808
  br label %cond.end.1614

cond.end.1614:                                    ; preds = %cond.false.1609, %cond.true.1606
  %cond1615 = phi i64 [ %add1608, %cond.true.1606 ], [ %add1613, %cond.false.1609 ]
  %conv1616 = trunc i64 %cond1615 to i32
  store i32 %conv1616, i32* %area, align 4
  br i1 false, label %if.then.4556, label %lor.lhs.false.1766

cond.false.1617:                                  ; preds = %cond.false.1446
  %330 = load i32, i32* %width, align 4
  %add1618 = add nsw i32 0, %330
  %mul1619 = mul nsw i32 0, %add1618
  %sub1620 = sub nsw i32 %mul1619, 1
  %cmp1621 = icmp slt i32 %sub1620, 0
  br i1 %cmp1621, label %cond.true.1623, label %cond.false.1639

cond.true.1623:                                   ; preds = %cond.false.1617
  %331 = load i32, i32* %width, align 4
  %add1624 = add nsw i32 0, %331
  %mul1625 = mul nsw i32 0, %add1624
  %add1626 = add nsw i32 %mul1625, 0
  %neg1627 = xor i32 %add1626, -1
  %cmp1628 = icmp eq i32 %neg1627, -1
  %conv1629 = zext i1 %cmp1628 to i32
  %sub1630 = sub nsw i32 0, %conv1629
  %332 = load i32, i32* %width, align 4
  %add1631 = add nsw i32 0, %332
  %mul1632 = mul nsw i32 0, %add1631
  %add1633 = add nsw i32 %mul1632, 1
  %shl1634 = shl i32 %add1633, 30
  %sub1635 = sub nsw i32 %shl1634, 1
  %mul1636 = mul nsw i32 %sub1635, 2
  %add1637 = add nsw i32 %mul1636, 1
  %sub1638 = sub nsw i32 %sub1630, %add1637
  br label %cond.end.1643

cond.false.1639:                                  ; preds = %cond.false.1617
  %333 = load i32, i32* %width, align 4
  %add1640 = add nsw i32 0, %333
  %mul1641 = mul nsw i32 0, %add1640
  %add1642 = add nsw i32 %mul1641, 0
  br label %cond.end.1643

cond.end.1643:                                    ; preds = %cond.false.1639, %cond.true.1623
  %cond1644 = phi i32 [ %sub1638, %cond.true.1623 ], [ %add1642, %cond.false.1639 ]
  %cmp1645 = icmp slt i32 %cond1644, 0
  br i1 %cmp1645, label %cond.true.1647, label %cond.false.1702

cond.true.1647:                                   ; preds = %cond.end.1643
  br i1 false, label %cond.true.1648, label %cond.false.1679

cond.true.1648:                                   ; preds = %cond.true.1647
  %334 = load i32, i32* %width, align 4
  %335 = load i32, i32* %width, align 4
  %add1649 = add nsw i32 0, %335
  %mul1650 = mul nsw i32 0, %add1649
  %sub1651 = sub nsw i32 %mul1650, 1
  %cmp1652 = icmp slt i32 %sub1651, 0
  br i1 %cmp1652, label %cond.true.1654, label %cond.false.1670

cond.true.1654:                                   ; preds = %cond.true.1648
  %336 = load i32, i32* %width, align 4
  %add1655 = add nsw i32 0, %336
  %mul1656 = mul nsw i32 0, %add1655
  %add1657 = add nsw i32 %mul1656, 0
  %neg1658 = xor i32 %add1657, -1
  %cmp1659 = icmp eq i32 %neg1658, -1
  %conv1660 = zext i1 %cmp1659 to i32
  %sub1661 = sub nsw i32 0, %conv1660
  %337 = load i32, i32* %width, align 4
  %add1662 = add nsw i32 0, %337
  %mul1663 = mul nsw i32 0, %add1662
  %add1664 = add nsw i32 %mul1663, 1
  %shl1665 = shl i32 %add1664, 30
  %sub1666 = sub nsw i32 %shl1665, 1
  %mul1667 = mul nsw i32 %sub1666, 2
  %add1668 = add nsw i32 %mul1667, 1
  %sub1669 = sub nsw i32 %sub1661, %add1668
  br label %cond.end.1674

cond.false.1670:                                  ; preds = %cond.true.1648
  %338 = load i32, i32* %width, align 4
  %add1671 = add nsw i32 0, %338
  %mul1672 = mul nsw i32 0, %add1671
  %add1673 = add nsw i32 %mul1672, 0
  br label %cond.end.1674

cond.end.1674:                                    ; preds = %cond.false.1670, %cond.true.1654
  %cond1675 = phi i32 [ %sub1669, %cond.true.1654 ], [ %add1673, %cond.false.1670 ]
  %sub1676 = sub nsw i32 %cond1675, 2
  %cmp1677 = icmp slt i32 %334, %sub1676
  br i1 %cmp1677, label %cond.true.1734, label %lor.lhs.false.1718

cond.false.1679:                                  ; preds = %cond.true.1647
  %339 = load i32, i32* %width, align 4
  %add1680 = add nsw i32 0, %339
  %mul1681 = mul nsw i32 0, %add1680
  %sub1682 = sub nsw i32 %mul1681, 1
  %cmp1683 = icmp slt i32 %sub1682, 0
  br i1 %cmp1683, label %cond.true.1685, label %cond.false.1693

cond.true.1685:                                   ; preds = %cond.false.1679
  %340 = load i32, i32* %width, align 4
  %add1686 = add nsw i32 0, %340
  %mul1687 = mul nsw i32 0, %add1686
  %add1688 = add nsw i32 %mul1687, 1
  %shl1689 = shl i32 %add1688, 30
  %sub1690 = sub nsw i32 %shl1689, 1
  %mul1691 = mul nsw i32 %sub1690, 2
  %add1692 = add nsw i32 %mul1691, 1
  br label %cond.end.1697

cond.false.1693:                                  ; preds = %cond.false.1679
  %341 = load i32, i32* %width, align 4
  %add1694 = add nsw i32 0, %341
  %mul1695 = mul nsw i32 0, %add1694
  %sub1696 = sub nsw i32 %mul1695, 1
  br label %cond.end.1697

cond.end.1697:                                    ; preds = %cond.false.1693, %cond.true.1685
  %cond1698 = phi i32 [ %add1692, %cond.true.1685 ], [ %sub1696, %cond.false.1693 ]
  %sub1699 = sub nsw i32 %cond1698, 2
  %342 = load i32, i32* %width, align 4
  %cmp1700 = icmp slt i32 %sub1699, %342
  br i1 %cmp1700, label %cond.true.1734, label %lor.lhs.false.1718

cond.false.1702:                                  ; preds = %cond.end.1643
  %343 = load i32, i32* %width, align 4
  %cmp1703 = icmp slt i32 %343, 0
  br i1 %cmp1703, label %cond.true.1705, label %cond.false.1709

cond.true.1705:                                   ; preds = %cond.false.1702
  %344 = load i32, i32* %width, align 4
  %add1706 = add nsw i32 %344, 2
  %cmp1707 = icmp sle i32 2, %add1706
  br i1 %cmp1707, label %cond.true.1734, label %lor.lhs.false.1718

cond.false.1709:                                  ; preds = %cond.false.1702
  br i1 false, label %cond.true.1710, label %cond.false.1714

cond.true.1710:                                   ; preds = %cond.false.1709
  %345 = load i32, i32* %width, align 4
  %346 = load i32, i32* %width, align 4
  %add1711 = add nsw i32 %346, 2
  %cmp1712 = icmp sle i32 %345, %add1711
  br i1 %cmp1712, label %cond.true.1734, label %lor.lhs.false.1718

cond.false.1714:                                  ; preds = %cond.false.1709
  %347 = load i32, i32* %width, align 4
  %add1715 = add nsw i32 %347, 2
  %cmp1716 = icmp slt i32 %add1715, 2
  br i1 %cmp1716, label %cond.true.1734, label %lor.lhs.false.1718

lor.lhs.false.1718:                               ; preds = %cond.false.1714, %cond.true.1710, %cond.true.1705, %cond.end.1697, %cond.end.1674
  %348 = load i32, i32* %width, align 4
  %add1719 = add nsw i32 %348, 2
  %mul1720 = mul nsw i32 0, %add1719
  %sub1721 = sub nsw i32 %mul1720, 1
  %cmp1722 = icmp slt i32 %sub1721, 0
  br i1 %cmp1722, label %land.lhs.true.1724, label %lor.lhs.false.1729

land.lhs.true.1724:                               ; preds = %lor.lhs.false.1718
  %349 = load i32, i32* %width, align 4
  %add1725 = add nsw i32 %349, 2
  %conv1726 = sext i32 %add1725 to i64
  %cmp1727 = icmp slt i64 %conv1726, -9223372036854775808
  br i1 %cmp1727, label %cond.true.1734, label %lor.lhs.false.1729

lor.lhs.false.1729:                               ; preds = %land.lhs.true.1724, %lor.lhs.false.1718
  %350 = load i32, i32* %width, align 4
  %add1730 = add nsw i32 %350, 2
  %conv1731 = sext i32 %add1730 to i64
  %cmp1732 = icmp slt i64 9223372036854775807, %conv1731
  br i1 %cmp1732, label %cond.true.1734, label %cond.false.1750

cond.true.1734:                                   ; preds = %lor.lhs.false.1729, %land.lhs.true.1724, %cond.false.1714, %cond.true.1710, %cond.true.1705, %cond.end.1697, %cond.end.1674
  %351 = load i32, i32* %width, align 4
  %conv1735 = sext i32 %351 to i64
  %add1736 = add i64 %conv1735, 2
  %cmp1737 = icmp ule i64 %add1736, 9223372036854775807
  br i1 %cmp1737, label %cond.true.1739, label %cond.false.1742

cond.true.1739:                                   ; preds = %cond.true.1734
  %352 = load i32, i32* %width, align 4
  %conv1740 = sext i32 %352 to i64
  %add1741 = add i64 %conv1740, 2
  br label %cond.end.1747

cond.false.1742:                                  ; preds = %cond.true.1734
  %353 = load i32, i32* %width, align 4
  %conv1743 = sext i32 %353 to i64
  %add1744 = add i64 %conv1743, 2
  %sub1745 = sub i64 %add1744, -9223372036854775808
  %add1746 = add nsw i64 %sub1745, -9223372036854775808
  br label %cond.end.1747

cond.end.1747:                                    ; preds = %cond.false.1742, %cond.true.1739
  %cond1748 = phi i64 [ %add1741, %cond.true.1739 ], [ %add1746, %cond.false.1742 ]
  %conv1749 = trunc i64 %cond1748 to i32
  store i32 %conv1749, i32* %area, align 4
  br i1 true, label %if.then.4556, label %lor.lhs.false.1766

cond.false.1750:                                  ; preds = %lor.lhs.false.1729
  %354 = load i32, i32* %width, align 4
  %conv1751 = sext i32 %354 to i64
  %add1752 = add i64 %conv1751, 2
  %cmp1753 = icmp ule i64 %add1752, 9223372036854775807
  br i1 %cmp1753, label %cond.true.1755, label %cond.false.1758

cond.true.1755:                                   ; preds = %cond.false.1750
  %355 = load i32, i32* %width, align 4
  %conv1756 = sext i32 %355 to i64
  %add1757 = add i64 %conv1756, 2
  br label %cond.end.1763

cond.false.1758:                                  ; preds = %cond.false.1750
  %356 = load i32, i32* %width, align 4
  %conv1759 = sext i32 %356 to i64
  %add1760 = add i64 %conv1759, 2
  %sub1761 = sub i64 %add1760, -9223372036854775808
  %add1762 = add nsw i64 %sub1761, -9223372036854775808
  br label %cond.end.1763

cond.end.1763:                                    ; preds = %cond.false.1758, %cond.true.1755
  %cond1764 = phi i64 [ %add1757, %cond.true.1755 ], [ %add1762, %cond.false.1758 ]
  %conv1765 = trunc i64 %cond1764 to i32
  store i32 %conv1765, i32* %area, align 4
  br i1 false, label %if.then.4556, label %lor.lhs.false.1766

lor.lhs.false.1766:                               ; preds = %cond.end.1763, %cond.end.1747, %cond.end.1614, %cond.end.1598, %cond.end.1443, %cond.end.1427, %cond.end.1294, %cond.end.1278, %cond.end.1123, %cond.end.1111, %cond.end.984, %cond.end.972, %cond.end.843, %cond.end.821, %cond.end.684, %cond.end.662, %cond.end.481, %cond.end.459, %cond.end.322, %cond.end.300
  br i1 false, label %cond.true.1767, label %cond.false.2395

cond.true.1767:                                   ; preds = %lor.lhs.false.1766
  br i1 false, label %cond.true.1768, label %cond.false.2140

cond.true.1768:                                   ; preds = %cond.true.1767
  %357 = load i32, i32* %area, align 4
  %conv1769 = trunc i32 %357 to i8
  %conv1770 = sext i8 %conv1769 to i32
  %mul1771 = mul nsw i32 0, %conv1770
  %358 = load i32, i32* %height, align 4
  %conv1772 = trunc i32 %358 to i8
  %conv1773 = sext i8 %conv1772 to i32
  %add1774 = add nsw i32 %mul1771, %conv1773
  %mul1775 = mul nsw i32 0, %add1774
  %sub1776 = sub nsw i32 %mul1775, 1
  %cmp1777 = icmp slt i32 %sub1776, 0
  br i1 %cmp1777, label %cond.true.1779, label %cond.false.1805

cond.true.1779:                                   ; preds = %cond.true.1768
  %359 = load i32, i32* %area, align 4
  %conv1780 = trunc i32 %359 to i8
  %conv1781 = sext i8 %conv1780 to i32
  %mul1782 = mul nsw i32 0, %conv1781
  %360 = load i32, i32* %height, align 4
  %conv1783 = trunc i32 %360 to i8
  %conv1784 = sext i8 %conv1783 to i32
  %add1785 = add nsw i32 %mul1782, %conv1784
  %mul1786 = mul nsw i32 0, %add1785
  %add1787 = add nsw i32 %mul1786, 0
  %neg1788 = xor i32 %add1787, -1
  %cmp1789 = icmp eq i32 %neg1788, -1
  %conv1790 = zext i1 %cmp1789 to i32
  %sub1791 = sub nsw i32 0, %conv1790
  %361 = load i32, i32* %area, align 4
  %conv1792 = trunc i32 %361 to i8
  %conv1793 = sext i8 %conv1792 to i32
  %mul1794 = mul nsw i32 0, %conv1793
  %362 = load i32, i32* %height, align 4
  %conv1795 = trunc i32 %362 to i8
  %conv1796 = sext i8 %conv1795 to i32
  %add1797 = add nsw i32 %mul1794, %conv1796
  %mul1798 = mul nsw i32 0, %add1797
  %add1799 = add nsw i32 %mul1798, 1
  %shl1800 = shl i32 %add1799, 30
  %sub1801 = sub nsw i32 %shl1800, 1
  %mul1802 = mul nsw i32 %sub1801, 2
  %add1803 = add nsw i32 %mul1802, 1
  %sub1804 = sub nsw i32 %sub1791, %add1803
  br label %cond.end.1814

cond.false.1805:                                  ; preds = %cond.true.1768
  %363 = load i32, i32* %area, align 4
  %conv1806 = trunc i32 %363 to i8
  %conv1807 = sext i8 %conv1806 to i32
  %mul1808 = mul nsw i32 0, %conv1807
  %364 = load i32, i32* %height, align 4
  %conv1809 = trunc i32 %364 to i8
  %conv1810 = sext i8 %conv1809 to i32
  %add1811 = add nsw i32 %mul1808, %conv1810
  %mul1812 = mul nsw i32 0, %add1811
  %add1813 = add nsw i32 %mul1812, 0
  br label %cond.end.1814

cond.end.1814:                                    ; preds = %cond.false.1805, %cond.true.1779
  %cond1815 = phi i32 [ %sub1804, %cond.true.1779 ], [ %add1813, %cond.false.1805 ]
  %cmp1816 = icmp eq i32 %cond1815, 0
  br i1 %cmp1816, label %land.lhs.true.1818, label %lor.lhs.false.1838

land.lhs.true.1818:                               ; preds = %cond.end.1814
  %365 = load i32, i32* %height, align 4
  %conv1819 = trunc i32 %365 to i8
  %conv1820 = sext i8 %conv1819 to i32
  %cmp1821 = icmp slt i32 %conv1820, 0
  br i1 %cmp1821, label %land.lhs.true.1823, label %lor.lhs.false.1828

land.lhs.true.1823:                               ; preds = %land.lhs.true.1818
  %366 = load i32, i32* %area, align 4
  %conv1824 = trunc i32 %366 to i8
  %conv1825 = sext i8 %conv1824 to i32
  %cmp1826 = icmp slt i32 0, %conv1825
  br i1 %cmp1826, label %cond.true.2084, label %lor.lhs.false.1828

lor.lhs.false.1828:                               ; preds = %land.lhs.true.1823, %land.lhs.true.1818
  %367 = load i32, i32* %area, align 4
  %conv1829 = trunc i32 %367 to i8
  %conv1830 = sext i8 %conv1829 to i32
  %cmp1831 = icmp slt i32 %conv1830, 0
  br i1 %cmp1831, label %land.lhs.true.1833, label %lor.lhs.false.1838

land.lhs.true.1833:                               ; preds = %lor.lhs.false.1828
  %368 = load i32, i32* %height, align 4
  %conv1834 = trunc i32 %368 to i8
  %conv1835 = sext i8 %conv1834 to i32
  %cmp1836 = icmp slt i32 0, %conv1835
  br i1 %cmp1836, label %cond.true.2084, label %lor.lhs.false.1838

lor.lhs.false.1838:                               ; preds = %land.lhs.true.1833, %lor.lhs.false.1828, %cond.end.1814
  %369 = load i32, i32* %area, align 4
  %conv1839 = trunc i32 %369 to i8
  %conv1840 = sext i8 %conv1839 to i32
  %cmp1841 = icmp slt i32 %conv1840, 0
  br i1 %cmp1841, label %cond.true.1843, label %cond.false.1950

cond.true.1843:                                   ; preds = %lor.lhs.false.1838
  %370 = load i32, i32* %height, align 4
  %conv1844 = trunc i32 %370 to i8
  %conv1845 = sext i8 %conv1844 to i32
  %cmp1846 = icmp slt i32 %conv1845, 0
  br i1 %cmp1846, label %cond.true.1848, label %cond.false.1889

cond.true.1848:                                   ; preds = %cond.true.1843
  %371 = load i32, i32* %height, align 4
  %conv1849 = trunc i32 %371 to i8
  %conv1850 = sext i8 %conv1849 to i32
  %372 = load i32, i32* %area, align 4
  %conv1851 = trunc i32 %372 to i8
  %conv1852 = sext i8 %conv1851 to i32
  %mul1853 = mul nsw i32 0, %conv1852
  %373 = load i32, i32* %height, align 4
  %conv1854 = trunc i32 %373 to i8
  %conv1855 = sext i8 %conv1854 to i32
  %add1856 = add nsw i32 %mul1853, %conv1855
  %mul1857 = mul nsw i32 0, %add1856
  %sub1858 = sub nsw i32 %mul1857, 1
  %cmp1859 = icmp slt i32 %sub1858, 0
  br i1 %cmp1859, label %cond.true.1861, label %cond.false.1874

cond.true.1861:                                   ; preds = %cond.true.1848
  %374 = load i32, i32* %area, align 4
  %conv1862 = trunc i32 %374 to i8
  %conv1863 = sext i8 %conv1862 to i32
  %mul1864 = mul nsw i32 0, %conv1863
  %375 = load i32, i32* %height, align 4
  %conv1865 = trunc i32 %375 to i8
  %conv1866 = sext i8 %conv1865 to i32
  %add1867 = add nsw i32 %mul1864, %conv1866
  %mul1868 = mul nsw i32 0, %add1867
  %add1869 = add nsw i32 %mul1868, 1
  %shl1870 = shl i32 %add1869, 30
  %sub1871 = sub nsw i32 %shl1870, 1
  %mul1872 = mul nsw i32 %sub1871, 2
  %add1873 = add nsw i32 %mul1872, 1
  br label %cond.end.1883

cond.false.1874:                                  ; preds = %cond.true.1848
  %376 = load i32, i32* %area, align 4
  %conv1875 = trunc i32 %376 to i8
  %conv1876 = sext i8 %conv1875 to i32
  %mul1877 = mul nsw i32 0, %conv1876
  %377 = load i32, i32* %height, align 4
  %conv1878 = trunc i32 %377 to i8
  %conv1879 = sext i8 %conv1878 to i32
  %add1880 = add nsw i32 %mul1877, %conv1879
  %mul1881 = mul nsw i32 0, %add1880
  %sub1882 = sub nsw i32 %mul1881, 1
  br label %cond.end.1883

cond.end.1883:                                    ; preds = %cond.false.1874, %cond.true.1861
  %cond1884 = phi i32 [ %add1873, %cond.true.1861 ], [ %sub1882, %cond.false.1874 ]
  %378 = load i32, i32* %area, align 4
  %conv1885 = trunc i32 %378 to i8
  %conv1886 = sext i8 %conv1885 to i32
  %div = sdiv i32 %cond1884, %conv1886
  %cmp1887 = icmp slt i32 %conv1850, %div
  br i1 %cmp1887, label %cond.true.2084, label %lor.lhs.false.2058

cond.false.1889:                                  ; preds = %cond.true.1843
  %379 = load i32, i32* %area, align 4
  %conv1890 = trunc i32 %379 to i8
  %conv1891 = sext i8 %conv1890 to i32
  %cmp1892 = icmp eq i32 %conv1891, -1
  br i1 %cmp1892, label %cond.true.1894, label %cond.false.1895

cond.true.1894:                                   ; preds = %cond.false.1889
  br i1 false, label %cond.true.2084, label %lor.lhs.false.2058

cond.false.1895:                                  ; preds = %cond.false.1889
  %380 = load i32, i32* %area, align 4
  %conv1896 = trunc i32 %380 to i8
  %conv1897 = sext i8 %conv1896 to i32
  %mul1898 = mul nsw i32 0, %conv1897
  %381 = load i32, i32* %height, align 4
  %conv1899 = trunc i32 %381 to i8
  %conv1900 = sext i8 %conv1899 to i32
  %add1901 = add nsw i32 %mul1898, %conv1900
  %mul1902 = mul nsw i32 0, %add1901
  %sub1903 = sub nsw i32 %mul1902, 1
  %cmp1904 = icmp slt i32 %sub1903, 0
  br i1 %cmp1904, label %cond.true.1906, label %cond.false.1932

cond.true.1906:                                   ; preds = %cond.false.1895
  %382 = load i32, i32* %area, align 4
  %conv1907 = trunc i32 %382 to i8
  %conv1908 = sext i8 %conv1907 to i32
  %mul1909 = mul nsw i32 0, %conv1908
  %383 = load i32, i32* %height, align 4
  %conv1910 = trunc i32 %383 to i8
  %conv1911 = sext i8 %conv1910 to i32
  %add1912 = add nsw i32 %mul1909, %conv1911
  %mul1913 = mul nsw i32 0, %add1912
  %add1914 = add nsw i32 %mul1913, 0
  %neg1915 = xor i32 %add1914, -1
  %cmp1916 = icmp eq i32 %neg1915, -1
  %conv1917 = zext i1 %cmp1916 to i32
  %sub1918 = sub nsw i32 0, %conv1917
  %384 = load i32, i32* %area, align 4
  %conv1919 = trunc i32 %384 to i8
  %conv1920 = sext i8 %conv1919 to i32
  %mul1921 = mul nsw i32 0, %conv1920
  %385 = load i32, i32* %height, align 4
  %conv1922 = trunc i32 %385 to i8
  %conv1923 = sext i8 %conv1922 to i32
  %add1924 = add nsw i32 %mul1921, %conv1923
  %mul1925 = mul nsw i32 0, %add1924
  %add1926 = add nsw i32 %mul1925, 1
  %shl1927 = shl i32 %add1926, 30
  %sub1928 = sub nsw i32 %shl1927, 1
  %mul1929 = mul nsw i32 %sub1928, 2
  %add1930 = add nsw i32 %mul1929, 1
  %sub1931 = sub nsw i32 %sub1918, %add1930
  br label %cond.end.1941

cond.false.1932:                                  ; preds = %cond.false.1895
  %386 = load i32, i32* %area, align 4
  %conv1933 = trunc i32 %386 to i8
  %conv1934 = sext i8 %conv1933 to i32
  %mul1935 = mul nsw i32 0, %conv1934
  %387 = load i32, i32* %height, align 4
  %conv1936 = trunc i32 %387 to i8
  %conv1937 = sext i8 %conv1936 to i32
  %add1938 = add nsw i32 %mul1935, %conv1937
  %mul1939 = mul nsw i32 0, %add1938
  %add1940 = add nsw i32 %mul1939, 0
  br label %cond.end.1941

cond.end.1941:                                    ; preds = %cond.false.1932, %cond.true.1906
  %cond1942 = phi i32 [ %sub1931, %cond.true.1906 ], [ %add1940, %cond.false.1932 ]
  %388 = load i32, i32* %area, align 4
  %conv1943 = trunc i32 %388 to i8
  %conv1944 = sext i8 %conv1943 to i32
  %div1945 = sdiv i32 %cond1942, %conv1944
  %389 = load i32, i32* %height, align 4
  %conv1946 = trunc i32 %389 to i8
  %conv1947 = sext i8 %conv1946 to i32
  %cmp1948 = icmp slt i32 %div1945, %conv1947
  br i1 %cmp1948, label %cond.true.2084, label %lor.lhs.false.2058

cond.false.1950:                                  ; preds = %lor.lhs.false.1838
  %390 = load i32, i32* %area, align 4
  %conv1951 = trunc i32 %390 to i8
  %conv1952 = sext i8 %conv1951 to i32
  %cmp1953 = icmp eq i32 %conv1952, 0
  br i1 %cmp1953, label %cond.true.1955, label %cond.false.1956

cond.true.1955:                                   ; preds = %cond.false.1950
  br i1 false, label %cond.true.2084, label %lor.lhs.false.2058

cond.false.1956:                                  ; preds = %cond.false.1950
  %391 = load i32, i32* %height, align 4
  %conv1957 = trunc i32 %391 to i8
  %conv1958 = sext i8 %conv1957 to i32
  %cmp1959 = icmp slt i32 %conv1958, 0
  br i1 %cmp1959, label %cond.true.1961, label %cond.false.2016

cond.true.1961:                                   ; preds = %cond.false.1956
  %392 = load i32, i32* %height, align 4
  %conv1962 = trunc i32 %392 to i8
  %conv1963 = sext i8 %conv1962 to i32
  %393 = load i32, i32* %area, align 4
  %conv1964 = trunc i32 %393 to i8
  %conv1965 = sext i8 %conv1964 to i32
  %mul1966 = mul nsw i32 0, %conv1965
  %394 = load i32, i32* %height, align 4
  %conv1967 = trunc i32 %394 to i8
  %conv1968 = sext i8 %conv1967 to i32
  %add1969 = add nsw i32 %mul1966, %conv1968
  %mul1970 = mul nsw i32 0, %add1969
  %sub1971 = sub nsw i32 %mul1970, 1
  %cmp1972 = icmp slt i32 %sub1971, 0
  br i1 %cmp1972, label %cond.true.1974, label %cond.false.2000

cond.true.1974:                                   ; preds = %cond.true.1961
  %395 = load i32, i32* %area, align 4
  %conv1975 = trunc i32 %395 to i8
  %conv1976 = sext i8 %conv1975 to i32
  %mul1977 = mul nsw i32 0, %conv1976
  %396 = load i32, i32* %height, align 4
  %conv1978 = trunc i32 %396 to i8
  %conv1979 = sext i8 %conv1978 to i32
  %add1980 = add nsw i32 %mul1977, %conv1979
  %mul1981 = mul nsw i32 0, %add1980
  %add1982 = add nsw i32 %mul1981, 0
  %neg1983 = xor i32 %add1982, -1
  %cmp1984 = icmp eq i32 %neg1983, -1
  %conv1985 = zext i1 %cmp1984 to i32
  %sub1986 = sub nsw i32 0, %conv1985
  %397 = load i32, i32* %area, align 4
  %conv1987 = trunc i32 %397 to i8
  %conv1988 = sext i8 %conv1987 to i32
  %mul1989 = mul nsw i32 0, %conv1988
  %398 = load i32, i32* %height, align 4
  %conv1990 = trunc i32 %398 to i8
  %conv1991 = sext i8 %conv1990 to i32
  %add1992 = add nsw i32 %mul1989, %conv1991
  %mul1993 = mul nsw i32 0, %add1992
  %add1994 = add nsw i32 %mul1993, 1
  %shl1995 = shl i32 %add1994, 30
  %sub1996 = sub nsw i32 %shl1995, 1
  %mul1997 = mul nsw i32 %sub1996, 2
  %add1998 = add nsw i32 %mul1997, 1
  %sub1999 = sub nsw i32 %sub1986, %add1998
  br label %cond.end.2009

cond.false.2000:                                  ; preds = %cond.true.1961
  %399 = load i32, i32* %area, align 4
  %conv2001 = trunc i32 %399 to i8
  %conv2002 = sext i8 %conv2001 to i32
  %mul2003 = mul nsw i32 0, %conv2002
  %400 = load i32, i32* %height, align 4
  %conv2004 = trunc i32 %400 to i8
  %conv2005 = sext i8 %conv2004 to i32
  %add2006 = add nsw i32 %mul2003, %conv2005
  %mul2007 = mul nsw i32 0, %add2006
  %add2008 = add nsw i32 %mul2007, 0
  br label %cond.end.2009

cond.end.2009:                                    ; preds = %cond.false.2000, %cond.true.1974
  %cond2010 = phi i32 [ %sub1999, %cond.true.1974 ], [ %add2008, %cond.false.2000 ]
  %401 = load i32, i32* %area, align 4
  %conv2011 = trunc i32 %401 to i8
  %conv2012 = sext i8 %conv2011 to i32
  %div2013 = sdiv i32 %cond2010, %conv2012
  %cmp2014 = icmp slt i32 %conv1963, %div2013
  br i1 %cmp2014, label %cond.true.2084, label %lor.lhs.false.2058

cond.false.2016:                                  ; preds = %cond.false.1956
  %402 = load i32, i32* %area, align 4
  %conv2017 = trunc i32 %402 to i8
  %conv2018 = sext i8 %conv2017 to i32
  %mul2019 = mul nsw i32 0, %conv2018
  %403 = load i32, i32* %height, align 4
  %conv2020 = trunc i32 %403 to i8
  %conv2021 = sext i8 %conv2020 to i32
  %add2022 = add nsw i32 %mul2019, %conv2021
  %mul2023 = mul nsw i32 0, %add2022
  %sub2024 = sub nsw i32 %mul2023, 1
  %cmp2025 = icmp slt i32 %sub2024, 0
  br i1 %cmp2025, label %cond.true.2027, label %cond.false.2040

cond.true.2027:                                   ; preds = %cond.false.2016
  %404 = load i32, i32* %area, align 4
  %conv2028 = trunc i32 %404 to i8
  %conv2029 = sext i8 %conv2028 to i32
  %mul2030 = mul nsw i32 0, %conv2029
  %405 = load i32, i32* %height, align 4
  %conv2031 = trunc i32 %405 to i8
  %conv2032 = sext i8 %conv2031 to i32
  %add2033 = add nsw i32 %mul2030, %conv2032
  %mul2034 = mul nsw i32 0, %add2033
  %add2035 = add nsw i32 %mul2034, 1
  %shl2036 = shl i32 %add2035, 30
  %sub2037 = sub nsw i32 %shl2036, 1
  %mul2038 = mul nsw i32 %sub2037, 2
  %add2039 = add nsw i32 %mul2038, 1
  br label %cond.end.2049

cond.false.2040:                                  ; preds = %cond.false.2016
  %406 = load i32, i32* %area, align 4
  %conv2041 = trunc i32 %406 to i8
  %conv2042 = sext i8 %conv2041 to i32
  %mul2043 = mul nsw i32 0, %conv2042
  %407 = load i32, i32* %height, align 4
  %conv2044 = trunc i32 %407 to i8
  %conv2045 = sext i8 %conv2044 to i32
  %add2046 = add nsw i32 %mul2043, %conv2045
  %mul2047 = mul nsw i32 0, %add2046
  %sub2048 = sub nsw i32 %mul2047, 1
  br label %cond.end.2049

cond.end.2049:                                    ; preds = %cond.false.2040, %cond.true.2027
  %cond2050 = phi i32 [ %add2039, %cond.true.2027 ], [ %sub2048, %cond.false.2040 ]
  %408 = load i32, i32* %area, align 4
  %conv2051 = trunc i32 %408 to i8
  %conv2052 = sext i8 %conv2051 to i32
  %div2053 = sdiv i32 %cond2050, %conv2052
  %409 = load i32, i32* %height, align 4
  %conv2054 = trunc i32 %409 to i8
  %conv2055 = sext i8 %conv2054 to i32
  %cmp2056 = icmp slt i32 %div2053, %conv2055
  br i1 %cmp2056, label %cond.true.2084, label %lor.lhs.false.2058

lor.lhs.false.2058:                               ; preds = %cond.end.2049, %cond.end.2009, %cond.true.1955, %cond.end.1941, %cond.true.1894, %cond.end.1883
  %410 = load i32, i32* %height, align 4
  %conv2059 = trunc i32 %410 to i8
  %conv2060 = sext i8 %conv2059 to i32
  %411 = load i32, i32* %area, align 4
  %conv2061 = trunc i32 %411 to i8
  %conv2062 = sext i8 %conv2061 to i32
  %mul2063 = mul nsw i32 %conv2060, %conv2062
  %mul2064 = mul nsw i32 0, %mul2063
  %sub2065 = sub nsw i32 %mul2064, 1
  %cmp2066 = icmp slt i32 %sub2065, 0
  br i1 %cmp2066, label %land.lhs.true.2068, label %lor.lhs.false.2076

land.lhs.true.2068:                               ; preds = %lor.lhs.false.2058
  %412 = load i32, i32* %height, align 4
  %conv2069 = trunc i32 %412 to i8
  %conv2070 = sext i8 %conv2069 to i32
  %413 = load i32, i32* %area, align 4
  %conv2071 = trunc i32 %413 to i8
  %conv2072 = sext i8 %conv2071 to i32
  %mul2073 = mul nsw i32 %conv2070, %conv2072
  %cmp2074 = icmp slt i32 %mul2073, -128
  br i1 %cmp2074, label %cond.true.2084, label %lor.lhs.false.2076

lor.lhs.false.2076:                               ; preds = %land.lhs.true.2068, %lor.lhs.false.2058
  %414 = load i32, i32* %height, align 4
  %conv2077 = trunc i32 %414 to i8
  %conv2078 = sext i8 %conv2077 to i32
  %415 = load i32, i32* %area, align 4
  %conv2079 = trunc i32 %415 to i8
  %conv2080 = sext i8 %conv2079 to i32
  %mul2081 = mul nsw i32 %conv2078, %conv2080
  %cmp2082 = icmp slt i32 127, %mul2081
  br i1 %cmp2082, label %cond.true.2084, label %cond.false.2112

cond.true.2084:                                   ; preds = %lor.lhs.false.2076, %land.lhs.true.2068, %cond.end.2049, %cond.end.2009, %cond.true.1955, %cond.end.1941, %cond.true.1894, %cond.end.1883, %land.lhs.true.1833, %land.lhs.true.1823
  %416 = load i32, i32* %height, align 4
  %conv2085 = trunc i32 %416 to i8
  %conv2086 = zext i8 %conv2085 to i32
  %417 = load i32, i32* %area, align 4
  %conv2087 = trunc i32 %417 to i8
  %conv2088 = zext i8 %conv2087 to i32
  %mul2089 = mul nsw i32 %conv2086, %conv2088
  %cmp2090 = icmp sle i32 %mul2089, 127
  br i1 %cmp2090, label %cond.true.2092, label %cond.false.2100

cond.true.2092:                                   ; preds = %cond.true.2084
  %418 = load i32, i32* %height, align 4
  %conv2093 = trunc i32 %418 to i8
  %conv2094 = zext i8 %conv2093 to i32
  %419 = load i32, i32* %area, align 4
  %conv2095 = trunc i32 %419 to i8
  %conv2096 = zext i8 %conv2095 to i32
  %mul2097 = mul nsw i32 %conv2094, %conv2096
  %conv2098 = trunc i32 %mul2097 to i8
  %conv2099 = sext i8 %conv2098 to i32
  br label %cond.end.2110

cond.false.2100:                                  ; preds = %cond.true.2084
  %420 = load i32, i32* %height, align 4
  %conv2101 = trunc i32 %420 to i8
  %conv2102 = zext i8 %conv2101 to i32
  %421 = load i32, i32* %area, align 4
  %conv2103 = trunc i32 %421 to i8
  %conv2104 = zext i8 %conv2103 to i32
  %mul2105 = mul nsw i32 %conv2102, %conv2104
  %sub2106 = sub nsw i32 %mul2105, -128
  %conv2107 = trunc i32 %sub2106 to i8
  %conv2108 = sext i8 %conv2107 to i32
  %add2109 = add nsw i32 %conv2108, -128
  br label %cond.end.2110

cond.end.2110:                                    ; preds = %cond.false.2100, %cond.true.2092
  %cond2111 = phi i32 [ %conv2099, %cond.true.2092 ], [ %add2109, %cond.false.2100 ]
  store i32 %cond2111, i32* %area, align 4
  br i1 true, label %if.then.4556, label %lor.lhs.false.4552

cond.false.2112:                                  ; preds = %lor.lhs.false.2076
  %422 = load i32, i32* %height, align 4
  %conv2113 = trunc i32 %422 to i8
  %conv2114 = zext i8 %conv2113 to i32
  %423 = load i32, i32* %area, align 4
  %conv2115 = trunc i32 %423 to i8
  %conv2116 = zext i8 %conv2115 to i32
  %mul2117 = mul nsw i32 %conv2114, %conv2116
  %cmp2118 = icmp sle i32 %mul2117, 127
  br i1 %cmp2118, label %cond.true.2120, label %cond.false.2128

cond.true.2120:                                   ; preds = %cond.false.2112
  %424 = load i32, i32* %height, align 4
  %conv2121 = trunc i32 %424 to i8
  %conv2122 = zext i8 %conv2121 to i32
  %425 = load i32, i32* %area, align 4
  %conv2123 = trunc i32 %425 to i8
  %conv2124 = zext i8 %conv2123 to i32
  %mul2125 = mul nsw i32 %conv2122, %conv2124
  %conv2126 = trunc i32 %mul2125 to i8
  %conv2127 = sext i8 %conv2126 to i32
  br label %cond.end.2138

cond.false.2128:                                  ; preds = %cond.false.2112
  %426 = load i32, i32* %height, align 4
  %conv2129 = trunc i32 %426 to i8
  %conv2130 = zext i8 %conv2129 to i32
  %427 = load i32, i32* %area, align 4
  %conv2131 = trunc i32 %427 to i8
  %conv2132 = zext i8 %conv2131 to i32
  %mul2133 = mul nsw i32 %conv2130, %conv2132
  %sub2134 = sub nsw i32 %mul2133, -128
  %conv2135 = trunc i32 %sub2134 to i8
  %conv2136 = sext i8 %conv2135 to i32
  %add2137 = add nsw i32 %conv2136, -128
  br label %cond.end.2138

cond.end.2138:                                    ; preds = %cond.false.2128, %cond.true.2120
  %cond2139 = phi i32 [ %conv2127, %cond.true.2120 ], [ %add2137, %cond.false.2128 ]
  store i32 %cond2139, i32* %area, align 4
  br i1 false, label %if.then.4556, label %lor.lhs.false.4552

cond.false.2140:                                  ; preds = %cond.true.1767
  %428 = load i32, i32* %area, align 4
  %mul2141 = mul nsw i32 0, %428
  %429 = load i32, i32* %height, align 4
  %add2142 = add nsw i32 %mul2141, %429
  %mul2143 = mul nsw i32 0, %add2142
  %sub2144 = sub nsw i32 %mul2143, 1
  %cmp2145 = icmp slt i32 %sub2144, 0
  br i1 %cmp2145, label %cond.true.2147, label %cond.false.2165

cond.true.2147:                                   ; preds = %cond.false.2140
  %430 = load i32, i32* %area, align 4
  %mul2148 = mul nsw i32 0, %430
  %431 = load i32, i32* %height, align 4
  %add2149 = add nsw i32 %mul2148, %431
  %mul2150 = mul nsw i32 0, %add2149
  %add2151 = add nsw i32 %mul2150, 0
  %neg2152 = xor i32 %add2151, -1
  %cmp2153 = icmp eq i32 %neg2152, -1
  %conv2154 = zext i1 %cmp2153 to i32
  %sub2155 = sub nsw i32 0, %conv2154
  %432 = load i32, i32* %area, align 4
  %mul2156 = mul nsw i32 0, %432
  %433 = load i32, i32* %height, align 4
  %add2157 = add nsw i32 %mul2156, %433
  %mul2158 = mul nsw i32 0, %add2157
  %add2159 = add nsw i32 %mul2158, 1
  %shl2160 = shl i32 %add2159, 30
  %sub2161 = sub nsw i32 %shl2160, 1
  %mul2162 = mul nsw i32 %sub2161, 2
  %add2163 = add nsw i32 %mul2162, 1
  %sub2164 = sub nsw i32 %sub2155, %add2163
  br label %cond.end.2170

cond.false.2165:                                  ; preds = %cond.false.2140
  %434 = load i32, i32* %area, align 4
  %mul2166 = mul nsw i32 0, %434
  %435 = load i32, i32* %height, align 4
  %add2167 = add nsw i32 %mul2166, %435
  %mul2168 = mul nsw i32 0, %add2167
  %add2169 = add nsw i32 %mul2168, 0
  br label %cond.end.2170

cond.end.2170:                                    ; preds = %cond.false.2165, %cond.true.2147
  %cond2171 = phi i32 [ %sub2164, %cond.true.2147 ], [ %add2169, %cond.false.2165 ]
  %cmp2172 = icmp eq i32 %cond2171, 0
  br i1 %cmp2172, label %land.lhs.true.2174, label %lor.lhs.false.2186

land.lhs.true.2174:                               ; preds = %cond.end.2170
  %436 = load i32, i32* %height, align 4
  %cmp2175 = icmp slt i32 %436, 0
  br i1 %cmp2175, label %land.lhs.true.2177, label %lor.lhs.false.2180

land.lhs.true.2177:                               ; preds = %land.lhs.true.2174
  %437 = load i32, i32* %area, align 4
  %cmp2178 = icmp slt i32 0, %437
  br i1 %cmp2178, label %cond.true.2339, label %lor.lhs.false.2180

lor.lhs.false.2180:                               ; preds = %land.lhs.true.2177, %land.lhs.true.2174
  %438 = load i32, i32* %area, align 4
  %cmp2181 = icmp slt i32 %438, 0
  br i1 %cmp2181, label %land.lhs.true.2183, label %lor.lhs.false.2186

land.lhs.true.2183:                               ; preds = %lor.lhs.false.2180
  %439 = load i32, i32* %height, align 4
  %cmp2184 = icmp slt i32 0, %439
  br i1 %cmp2184, label %cond.true.2339, label %lor.lhs.false.2186

lor.lhs.false.2186:                               ; preds = %land.lhs.true.2183, %lor.lhs.false.2180, %cond.end.2170
  %440 = load i32, i32* %area, align 4
  %cmp2187 = icmp slt i32 %440, 0
  br i1 %cmp2187, label %cond.true.2189, label %cond.false.2257

cond.true.2189:                                   ; preds = %lor.lhs.false.2186
  %441 = load i32, i32* %height, align 4
  %cmp2190 = icmp slt i32 %441, 0
  br i1 %cmp2190, label %cond.true.2192, label %cond.false.2218

cond.true.2192:                                   ; preds = %cond.true.2189
  %442 = load i32, i32* %height, align 4
  %443 = load i32, i32* %area, align 4
  %mul2193 = mul nsw i32 0, %443
  %444 = load i32, i32* %height, align 4
  %add2194 = add nsw i32 %mul2193, %444
  %mul2195 = mul nsw i32 0, %add2194
  %sub2196 = sub nsw i32 %mul2195, 1
  %cmp2197 = icmp slt i32 %sub2196, 0
  br i1 %cmp2197, label %cond.true.2199, label %cond.false.2208

cond.true.2199:                                   ; preds = %cond.true.2192
  %445 = load i32, i32* %area, align 4
  %mul2200 = mul nsw i32 0, %445
  %446 = load i32, i32* %height, align 4
  %add2201 = add nsw i32 %mul2200, %446
  %mul2202 = mul nsw i32 0, %add2201
  %add2203 = add nsw i32 %mul2202, 1
  %shl2204 = shl i32 %add2203, 30
  %sub2205 = sub nsw i32 %shl2204, 1
  %mul2206 = mul nsw i32 %sub2205, 2
  %add2207 = add nsw i32 %mul2206, 1
  br label %cond.end.2213

cond.false.2208:                                  ; preds = %cond.true.2192
  %447 = load i32, i32* %area, align 4
  %mul2209 = mul nsw i32 0, %447
  %448 = load i32, i32* %height, align 4
  %add2210 = add nsw i32 %mul2209, %448
  %mul2211 = mul nsw i32 0, %add2210
  %sub2212 = sub nsw i32 %mul2211, 1
  br label %cond.end.2213

cond.end.2213:                                    ; preds = %cond.false.2208, %cond.true.2199
  %cond2214 = phi i32 [ %add2207, %cond.true.2199 ], [ %sub2212, %cond.false.2208 ]
  %449 = load i32, i32* %area, align 4
  %div2215 = sdiv i32 %cond2214, %449
  %cmp2216 = icmp slt i32 %442, %div2215
  br i1 %cmp2216, label %cond.true.2339, label %lor.lhs.false.2325

cond.false.2218:                                  ; preds = %cond.true.2189
  %450 = load i32, i32* %area, align 4
  %cmp2219 = icmp eq i32 %450, -1
  br i1 %cmp2219, label %cond.true.2221, label %cond.false.2222

cond.true.2221:                                   ; preds = %cond.false.2218
  br i1 false, label %cond.true.2339, label %lor.lhs.false.2325

cond.false.2222:                                  ; preds = %cond.false.2218
  %451 = load i32, i32* %area, align 4
  %mul2223 = mul nsw i32 0, %451
  %452 = load i32, i32* %height, align 4
  %add2224 = add nsw i32 %mul2223, %452
  %mul2225 = mul nsw i32 0, %add2224
  %sub2226 = sub nsw i32 %mul2225, 1
  %cmp2227 = icmp slt i32 %sub2226, 0
  br i1 %cmp2227, label %cond.true.2229, label %cond.false.2247

cond.true.2229:                                   ; preds = %cond.false.2222
  %453 = load i32, i32* %area, align 4
  %mul2230 = mul nsw i32 0, %453
  %454 = load i32, i32* %height, align 4
  %add2231 = add nsw i32 %mul2230, %454
  %mul2232 = mul nsw i32 0, %add2231
  %add2233 = add nsw i32 %mul2232, 0
  %neg2234 = xor i32 %add2233, -1
  %cmp2235 = icmp eq i32 %neg2234, -1
  %conv2236 = zext i1 %cmp2235 to i32
  %sub2237 = sub nsw i32 0, %conv2236
  %455 = load i32, i32* %area, align 4
  %mul2238 = mul nsw i32 0, %455
  %456 = load i32, i32* %height, align 4
  %add2239 = add nsw i32 %mul2238, %456
  %mul2240 = mul nsw i32 0, %add2239
  %add2241 = add nsw i32 %mul2240, 1
  %shl2242 = shl i32 %add2241, 30
  %sub2243 = sub nsw i32 %shl2242, 1
  %mul2244 = mul nsw i32 %sub2243, 2
  %add2245 = add nsw i32 %mul2244, 1
  %sub2246 = sub nsw i32 %sub2237, %add2245
  br label %cond.end.2252

cond.false.2247:                                  ; preds = %cond.false.2222
  %457 = load i32, i32* %area, align 4
  %mul2248 = mul nsw i32 0, %457
  %458 = load i32, i32* %height, align 4
  %add2249 = add nsw i32 %mul2248, %458
  %mul2250 = mul nsw i32 0, %add2249
  %add2251 = add nsw i32 %mul2250, 0
  br label %cond.end.2252

cond.end.2252:                                    ; preds = %cond.false.2247, %cond.true.2229
  %cond2253 = phi i32 [ %sub2246, %cond.true.2229 ], [ %add2251, %cond.false.2247 ]
  %459 = load i32, i32* %area, align 4
  %div2254 = sdiv i32 %cond2253, %459
  %460 = load i32, i32* %height, align 4
  %cmp2255 = icmp slt i32 %div2254, %460
  br i1 %cmp2255, label %cond.true.2339, label %lor.lhs.false.2325

cond.false.2257:                                  ; preds = %lor.lhs.false.2186
  %461 = load i32, i32* %area, align 4
  %cmp2258 = icmp eq i32 %461, 0
  br i1 %cmp2258, label %cond.true.2260, label %cond.false.2261

cond.true.2260:                                   ; preds = %cond.false.2257
  br i1 false, label %cond.true.2339, label %lor.lhs.false.2325

cond.false.2261:                                  ; preds = %cond.false.2257
  %462 = load i32, i32* %height, align 4
  %cmp2262 = icmp slt i32 %462, 0
  br i1 %cmp2262, label %cond.true.2264, label %cond.false.2299

cond.true.2264:                                   ; preds = %cond.false.2261
  %463 = load i32, i32* %height, align 4
  %464 = load i32, i32* %area, align 4
  %mul2265 = mul nsw i32 0, %464
  %465 = load i32, i32* %height, align 4
  %add2266 = add nsw i32 %mul2265, %465
  %mul2267 = mul nsw i32 0, %add2266
  %sub2268 = sub nsw i32 %mul2267, 1
  %cmp2269 = icmp slt i32 %sub2268, 0
  br i1 %cmp2269, label %cond.true.2271, label %cond.false.2289

cond.true.2271:                                   ; preds = %cond.true.2264
  %466 = load i32, i32* %area, align 4
  %mul2272 = mul nsw i32 0, %466
  %467 = load i32, i32* %height, align 4
  %add2273 = add nsw i32 %mul2272, %467
  %mul2274 = mul nsw i32 0, %add2273
  %add2275 = add nsw i32 %mul2274, 0
  %neg2276 = xor i32 %add2275, -1
  %cmp2277 = icmp eq i32 %neg2276, -1
  %conv2278 = zext i1 %cmp2277 to i32
  %sub2279 = sub nsw i32 0, %conv2278
  %468 = load i32, i32* %area, align 4
  %mul2280 = mul nsw i32 0, %468
  %469 = load i32, i32* %height, align 4
  %add2281 = add nsw i32 %mul2280, %469
  %mul2282 = mul nsw i32 0, %add2281
  %add2283 = add nsw i32 %mul2282, 1
  %shl2284 = shl i32 %add2283, 30
  %sub2285 = sub nsw i32 %shl2284, 1
  %mul2286 = mul nsw i32 %sub2285, 2
  %add2287 = add nsw i32 %mul2286, 1
  %sub2288 = sub nsw i32 %sub2279, %add2287
  br label %cond.end.2294

cond.false.2289:                                  ; preds = %cond.true.2264
  %470 = load i32, i32* %area, align 4
  %mul2290 = mul nsw i32 0, %470
  %471 = load i32, i32* %height, align 4
  %add2291 = add nsw i32 %mul2290, %471
  %mul2292 = mul nsw i32 0, %add2291
  %add2293 = add nsw i32 %mul2292, 0
  br label %cond.end.2294

cond.end.2294:                                    ; preds = %cond.false.2289, %cond.true.2271
  %cond2295 = phi i32 [ %sub2288, %cond.true.2271 ], [ %add2293, %cond.false.2289 ]
  %472 = load i32, i32* %area, align 4
  %div2296 = sdiv i32 %cond2295, %472
  %cmp2297 = icmp slt i32 %463, %div2296
  br i1 %cmp2297, label %cond.true.2339, label %lor.lhs.false.2325

cond.false.2299:                                  ; preds = %cond.false.2261
  %473 = load i32, i32* %area, align 4
  %mul2300 = mul nsw i32 0, %473
  %474 = load i32, i32* %height, align 4
  %add2301 = add nsw i32 %mul2300, %474
  %mul2302 = mul nsw i32 0, %add2301
  %sub2303 = sub nsw i32 %mul2302, 1
  %cmp2304 = icmp slt i32 %sub2303, 0
  br i1 %cmp2304, label %cond.true.2306, label %cond.false.2315

cond.true.2306:                                   ; preds = %cond.false.2299
  %475 = load i32, i32* %area, align 4
  %mul2307 = mul nsw i32 0, %475
  %476 = load i32, i32* %height, align 4
  %add2308 = add nsw i32 %mul2307, %476
  %mul2309 = mul nsw i32 0, %add2308
  %add2310 = add nsw i32 %mul2309, 1
  %shl2311 = shl i32 %add2310, 30
  %sub2312 = sub nsw i32 %shl2311, 1
  %mul2313 = mul nsw i32 %sub2312, 2
  %add2314 = add nsw i32 %mul2313, 1
  br label %cond.end.2320

cond.false.2315:                                  ; preds = %cond.false.2299
  %477 = load i32, i32* %area, align 4
  %mul2316 = mul nsw i32 0, %477
  %478 = load i32, i32* %height, align 4
  %add2317 = add nsw i32 %mul2316, %478
  %mul2318 = mul nsw i32 0, %add2317
  %sub2319 = sub nsw i32 %mul2318, 1
  br label %cond.end.2320

cond.end.2320:                                    ; preds = %cond.false.2315, %cond.true.2306
  %cond2321 = phi i32 [ %add2314, %cond.true.2306 ], [ %sub2319, %cond.false.2315 ]
  %479 = load i32, i32* %area, align 4
  %div2322 = sdiv i32 %cond2321, %479
  %480 = load i32, i32* %height, align 4
  %cmp2323 = icmp slt i32 %div2322, %480
  br i1 %cmp2323, label %cond.true.2339, label %lor.lhs.false.2325

lor.lhs.false.2325:                               ; preds = %cond.end.2320, %cond.end.2294, %cond.true.2260, %cond.end.2252, %cond.true.2221, %cond.end.2213
  %481 = load i32, i32* %height, align 4
  %482 = load i32, i32* %area, align 4
  %mul2326 = mul nsw i32 %481, %482
  %mul2327 = mul nsw i32 0, %mul2326
  %sub2328 = sub nsw i32 %mul2327, 1
  %cmp2329 = icmp slt i32 %sub2328, 0
  br i1 %cmp2329, label %land.lhs.true.2331, label %lor.lhs.false.2335

land.lhs.true.2331:                               ; preds = %lor.lhs.false.2325
  %483 = load i32, i32* %height, align 4
  %484 = load i32, i32* %area, align 4
  %mul2332 = mul nsw i32 %483, %484
  %cmp2333 = icmp slt i32 %mul2332, -128
  br i1 %cmp2333, label %cond.true.2339, label %lor.lhs.false.2335

lor.lhs.false.2335:                               ; preds = %land.lhs.true.2331, %lor.lhs.false.2325
  %485 = load i32, i32* %height, align 4
  %486 = load i32, i32* %area, align 4
  %mul2336 = mul nsw i32 %485, %486
  %cmp2337 = icmp slt i32 127, %mul2336
  br i1 %cmp2337, label %cond.true.2339, label %cond.false.2367

cond.true.2339:                                   ; preds = %lor.lhs.false.2335, %land.lhs.true.2331, %cond.end.2320, %cond.end.2294, %cond.true.2260, %cond.end.2252, %cond.true.2221, %cond.end.2213, %land.lhs.true.2183, %land.lhs.true.2177
  %487 = load i32, i32* %height, align 4
  %conv2340 = trunc i32 %487 to i8
  %conv2341 = zext i8 %conv2340 to i32
  %488 = load i32, i32* %area, align 4
  %conv2342 = trunc i32 %488 to i8
  %conv2343 = zext i8 %conv2342 to i32
  %mul2344 = mul nsw i32 %conv2341, %conv2343
  %cmp2345 = icmp sle i32 %mul2344, 127
  br i1 %cmp2345, label %cond.true.2347, label %cond.false.2355

cond.true.2347:                                   ; preds = %cond.true.2339
  %489 = load i32, i32* %height, align 4
  %conv2348 = trunc i32 %489 to i8
  %conv2349 = zext i8 %conv2348 to i32
  %490 = load i32, i32* %area, align 4
  %conv2350 = trunc i32 %490 to i8
  %conv2351 = zext i8 %conv2350 to i32
  %mul2352 = mul nsw i32 %conv2349, %conv2351
  %conv2353 = trunc i32 %mul2352 to i8
  %conv2354 = sext i8 %conv2353 to i32
  br label %cond.end.2365

cond.false.2355:                                  ; preds = %cond.true.2339
  %491 = load i32, i32* %height, align 4
  %conv2356 = trunc i32 %491 to i8
  %conv2357 = zext i8 %conv2356 to i32
  %492 = load i32, i32* %area, align 4
  %conv2358 = trunc i32 %492 to i8
  %conv2359 = zext i8 %conv2358 to i32
  %mul2360 = mul nsw i32 %conv2357, %conv2359
  %sub2361 = sub nsw i32 %mul2360, -128
  %conv2362 = trunc i32 %sub2361 to i8
  %conv2363 = sext i8 %conv2362 to i32
  %add2364 = add nsw i32 %conv2363, -128
  br label %cond.end.2365

cond.end.2365:                                    ; preds = %cond.false.2355, %cond.true.2347
  %cond2366 = phi i32 [ %conv2354, %cond.true.2347 ], [ %add2364, %cond.false.2355 ]
  store i32 %cond2366, i32* %area, align 4
  br i1 true, label %if.then.4556, label %lor.lhs.false.4552

cond.false.2367:                                  ; preds = %lor.lhs.false.2335
  %493 = load i32, i32* %height, align 4
  %conv2368 = trunc i32 %493 to i8
  %conv2369 = zext i8 %conv2368 to i32
  %494 = load i32, i32* %area, align 4
  %conv2370 = trunc i32 %494 to i8
  %conv2371 = zext i8 %conv2370 to i32
  %mul2372 = mul nsw i32 %conv2369, %conv2371
  %cmp2373 = icmp sle i32 %mul2372, 127
  br i1 %cmp2373, label %cond.true.2375, label %cond.false.2383

cond.true.2375:                                   ; preds = %cond.false.2367
  %495 = load i32, i32* %height, align 4
  %conv2376 = trunc i32 %495 to i8
  %conv2377 = zext i8 %conv2376 to i32
  %496 = load i32, i32* %area, align 4
  %conv2378 = trunc i32 %496 to i8
  %conv2379 = zext i8 %conv2378 to i32
  %mul2380 = mul nsw i32 %conv2377, %conv2379
  %conv2381 = trunc i32 %mul2380 to i8
  %conv2382 = sext i8 %conv2381 to i32
  br label %cond.end.2393

cond.false.2383:                                  ; preds = %cond.false.2367
  %497 = load i32, i32* %height, align 4
  %conv2384 = trunc i32 %497 to i8
  %conv2385 = zext i8 %conv2384 to i32
  %498 = load i32, i32* %area, align 4
  %conv2386 = trunc i32 %498 to i8
  %conv2387 = zext i8 %conv2386 to i32
  %mul2388 = mul nsw i32 %conv2385, %conv2387
  %sub2389 = sub nsw i32 %mul2388, -128
  %conv2390 = trunc i32 %sub2389 to i8
  %conv2391 = sext i8 %conv2390 to i32
  %add2392 = add nsw i32 %conv2391, -128
  br label %cond.end.2393

cond.end.2393:                                    ; preds = %cond.false.2383, %cond.true.2375
  %cond2394 = phi i32 [ %conv2382, %cond.true.2375 ], [ %add2392, %cond.false.2383 ]
  store i32 %cond2394, i32* %area, align 4
  br i1 false, label %if.then.4556, label %lor.lhs.false.4552

cond.false.2395:                                  ; preds = %lor.lhs.false.1766
  br i1 false, label %cond.true.2396, label %cond.false.3025

cond.true.2396:                                   ; preds = %cond.false.2395
  br i1 false, label %cond.true.2397, label %cond.false.2770

cond.true.2397:                                   ; preds = %cond.true.2396
  %499 = load i32, i32* %area, align 4
  %conv2398 = trunc i32 %499 to i16
  %conv2399 = sext i16 %conv2398 to i32
  %mul2400 = mul nsw i32 0, %conv2399
  %500 = load i32, i32* %height, align 4
  %conv2401 = trunc i32 %500 to i16
  %conv2402 = sext i16 %conv2401 to i32
  %add2403 = add nsw i32 %mul2400, %conv2402
  %mul2404 = mul nsw i32 0, %add2403
  %sub2405 = sub nsw i32 %mul2404, 1
  %cmp2406 = icmp slt i32 %sub2405, 0
  br i1 %cmp2406, label %cond.true.2408, label %cond.false.2434

cond.true.2408:                                   ; preds = %cond.true.2397
  %501 = load i32, i32* %area, align 4
  %conv2409 = trunc i32 %501 to i16
  %conv2410 = sext i16 %conv2409 to i32
  %mul2411 = mul nsw i32 0, %conv2410
  %502 = load i32, i32* %height, align 4
  %conv2412 = trunc i32 %502 to i16
  %conv2413 = sext i16 %conv2412 to i32
  %add2414 = add nsw i32 %mul2411, %conv2413
  %mul2415 = mul nsw i32 0, %add2414
  %add2416 = add nsw i32 %mul2415, 0
  %neg2417 = xor i32 %add2416, -1
  %cmp2418 = icmp eq i32 %neg2417, -1
  %conv2419 = zext i1 %cmp2418 to i32
  %sub2420 = sub nsw i32 0, %conv2419
  %503 = load i32, i32* %area, align 4
  %conv2421 = trunc i32 %503 to i16
  %conv2422 = sext i16 %conv2421 to i32
  %mul2423 = mul nsw i32 0, %conv2422
  %504 = load i32, i32* %height, align 4
  %conv2424 = trunc i32 %504 to i16
  %conv2425 = sext i16 %conv2424 to i32
  %add2426 = add nsw i32 %mul2423, %conv2425
  %mul2427 = mul nsw i32 0, %add2426
  %add2428 = add nsw i32 %mul2427, 1
  %shl2429 = shl i32 %add2428, 30
  %sub2430 = sub nsw i32 %shl2429, 1
  %mul2431 = mul nsw i32 %sub2430, 2
  %add2432 = add nsw i32 %mul2431, 1
  %sub2433 = sub nsw i32 %sub2420, %add2432
  br label %cond.end.2443

cond.false.2434:                                  ; preds = %cond.true.2397
  %505 = load i32, i32* %area, align 4
  %conv2435 = trunc i32 %505 to i16
  %conv2436 = sext i16 %conv2435 to i32
  %mul2437 = mul nsw i32 0, %conv2436
  %506 = load i32, i32* %height, align 4
  %conv2438 = trunc i32 %506 to i16
  %conv2439 = sext i16 %conv2438 to i32
  %add2440 = add nsw i32 %mul2437, %conv2439
  %mul2441 = mul nsw i32 0, %add2440
  %add2442 = add nsw i32 %mul2441, 0
  br label %cond.end.2443

cond.end.2443:                                    ; preds = %cond.false.2434, %cond.true.2408
  %cond2444 = phi i32 [ %sub2433, %cond.true.2408 ], [ %add2442, %cond.false.2434 ]
  %cmp2445 = icmp eq i32 %cond2444, 0
  br i1 %cmp2445, label %land.lhs.true.2447, label %lor.lhs.false.2467

land.lhs.true.2447:                               ; preds = %cond.end.2443
  %507 = load i32, i32* %height, align 4
  %conv2448 = trunc i32 %507 to i16
  %conv2449 = sext i16 %conv2448 to i32
  %cmp2450 = icmp slt i32 %conv2449, 0
  br i1 %cmp2450, label %land.lhs.true.2452, label %lor.lhs.false.2457

land.lhs.true.2452:                               ; preds = %land.lhs.true.2447
  %508 = load i32, i32* %area, align 4
  %conv2453 = trunc i32 %508 to i16
  %conv2454 = sext i16 %conv2453 to i32
  %cmp2455 = icmp slt i32 0, %conv2454
  br i1 %cmp2455, label %cond.true.2714, label %lor.lhs.false.2457

lor.lhs.false.2457:                               ; preds = %land.lhs.true.2452, %land.lhs.true.2447
  %509 = load i32, i32* %area, align 4
  %conv2458 = trunc i32 %509 to i16
  %conv2459 = sext i16 %conv2458 to i32
  %cmp2460 = icmp slt i32 %conv2459, 0
  br i1 %cmp2460, label %land.lhs.true.2462, label %lor.lhs.false.2467

land.lhs.true.2462:                               ; preds = %lor.lhs.false.2457
  %510 = load i32, i32* %height, align 4
  %conv2463 = trunc i32 %510 to i16
  %conv2464 = sext i16 %conv2463 to i32
  %cmp2465 = icmp slt i32 0, %conv2464
  br i1 %cmp2465, label %cond.true.2714, label %lor.lhs.false.2467

lor.lhs.false.2467:                               ; preds = %land.lhs.true.2462, %lor.lhs.false.2457, %cond.end.2443
  %511 = load i32, i32* %area, align 4
  %conv2468 = trunc i32 %511 to i16
  %conv2469 = sext i16 %conv2468 to i32
  %cmp2470 = icmp slt i32 %conv2469, 0
  br i1 %cmp2470, label %cond.true.2472, label %cond.false.2580

cond.true.2472:                                   ; preds = %lor.lhs.false.2467
  %512 = load i32, i32* %height, align 4
  %conv2473 = trunc i32 %512 to i16
  %conv2474 = sext i16 %conv2473 to i32
  %cmp2475 = icmp slt i32 %conv2474, 0
  br i1 %cmp2475, label %cond.true.2477, label %cond.false.2519

cond.true.2477:                                   ; preds = %cond.true.2472
  %513 = load i32, i32* %height, align 4
  %conv2478 = trunc i32 %513 to i16
  %conv2479 = sext i16 %conv2478 to i32
  %514 = load i32, i32* %area, align 4
  %conv2480 = trunc i32 %514 to i16
  %conv2481 = sext i16 %conv2480 to i32
  %mul2482 = mul nsw i32 0, %conv2481
  %515 = load i32, i32* %height, align 4
  %conv2483 = trunc i32 %515 to i16
  %conv2484 = sext i16 %conv2483 to i32
  %add2485 = add nsw i32 %mul2482, %conv2484
  %mul2486 = mul nsw i32 0, %add2485
  %sub2487 = sub nsw i32 %mul2486, 1
  %cmp2488 = icmp slt i32 %sub2487, 0
  br i1 %cmp2488, label %cond.true.2490, label %cond.false.2503

cond.true.2490:                                   ; preds = %cond.true.2477
  %516 = load i32, i32* %area, align 4
  %conv2491 = trunc i32 %516 to i16
  %conv2492 = sext i16 %conv2491 to i32
  %mul2493 = mul nsw i32 0, %conv2492
  %517 = load i32, i32* %height, align 4
  %conv2494 = trunc i32 %517 to i16
  %conv2495 = sext i16 %conv2494 to i32
  %add2496 = add nsw i32 %mul2493, %conv2495
  %mul2497 = mul nsw i32 0, %add2496
  %add2498 = add nsw i32 %mul2497, 1
  %shl2499 = shl i32 %add2498, 30
  %sub2500 = sub nsw i32 %shl2499, 1
  %mul2501 = mul nsw i32 %sub2500, 2
  %add2502 = add nsw i32 %mul2501, 1
  br label %cond.end.2512

cond.false.2503:                                  ; preds = %cond.true.2477
  %518 = load i32, i32* %area, align 4
  %conv2504 = trunc i32 %518 to i16
  %conv2505 = sext i16 %conv2504 to i32
  %mul2506 = mul nsw i32 0, %conv2505
  %519 = load i32, i32* %height, align 4
  %conv2507 = trunc i32 %519 to i16
  %conv2508 = sext i16 %conv2507 to i32
  %add2509 = add nsw i32 %mul2506, %conv2508
  %mul2510 = mul nsw i32 0, %add2509
  %sub2511 = sub nsw i32 %mul2510, 1
  br label %cond.end.2512

cond.end.2512:                                    ; preds = %cond.false.2503, %cond.true.2490
  %cond2513 = phi i32 [ %add2502, %cond.true.2490 ], [ %sub2511, %cond.false.2503 ]
  %520 = load i32, i32* %area, align 4
  %conv2514 = trunc i32 %520 to i16
  %conv2515 = sext i16 %conv2514 to i32
  %div2516 = sdiv i32 %cond2513, %conv2515
  %cmp2517 = icmp slt i32 %conv2479, %div2516
  br i1 %cmp2517, label %cond.true.2714, label %lor.lhs.false.2688

cond.false.2519:                                  ; preds = %cond.true.2472
  %521 = load i32, i32* %area, align 4
  %conv2520 = trunc i32 %521 to i16
  %conv2521 = sext i16 %conv2520 to i32
  %cmp2522 = icmp eq i32 %conv2521, -1
  br i1 %cmp2522, label %cond.true.2524, label %cond.false.2525

cond.true.2524:                                   ; preds = %cond.false.2519
  br i1 false, label %cond.true.2714, label %lor.lhs.false.2688

cond.false.2525:                                  ; preds = %cond.false.2519
  %522 = load i32, i32* %area, align 4
  %conv2526 = trunc i32 %522 to i16
  %conv2527 = sext i16 %conv2526 to i32
  %mul2528 = mul nsw i32 0, %conv2527
  %523 = load i32, i32* %height, align 4
  %conv2529 = trunc i32 %523 to i16
  %conv2530 = sext i16 %conv2529 to i32
  %add2531 = add nsw i32 %mul2528, %conv2530
  %mul2532 = mul nsw i32 0, %add2531
  %sub2533 = sub nsw i32 %mul2532, 1
  %cmp2534 = icmp slt i32 %sub2533, 0
  br i1 %cmp2534, label %cond.true.2536, label %cond.false.2562

cond.true.2536:                                   ; preds = %cond.false.2525
  %524 = load i32, i32* %area, align 4
  %conv2537 = trunc i32 %524 to i16
  %conv2538 = sext i16 %conv2537 to i32
  %mul2539 = mul nsw i32 0, %conv2538
  %525 = load i32, i32* %height, align 4
  %conv2540 = trunc i32 %525 to i16
  %conv2541 = sext i16 %conv2540 to i32
  %add2542 = add nsw i32 %mul2539, %conv2541
  %mul2543 = mul nsw i32 0, %add2542
  %add2544 = add nsw i32 %mul2543, 0
  %neg2545 = xor i32 %add2544, -1
  %cmp2546 = icmp eq i32 %neg2545, -1
  %conv2547 = zext i1 %cmp2546 to i32
  %sub2548 = sub nsw i32 0, %conv2547
  %526 = load i32, i32* %area, align 4
  %conv2549 = trunc i32 %526 to i16
  %conv2550 = sext i16 %conv2549 to i32
  %mul2551 = mul nsw i32 0, %conv2550
  %527 = load i32, i32* %height, align 4
  %conv2552 = trunc i32 %527 to i16
  %conv2553 = sext i16 %conv2552 to i32
  %add2554 = add nsw i32 %mul2551, %conv2553
  %mul2555 = mul nsw i32 0, %add2554
  %add2556 = add nsw i32 %mul2555, 1
  %shl2557 = shl i32 %add2556, 30
  %sub2558 = sub nsw i32 %shl2557, 1
  %mul2559 = mul nsw i32 %sub2558, 2
  %add2560 = add nsw i32 %mul2559, 1
  %sub2561 = sub nsw i32 %sub2548, %add2560
  br label %cond.end.2571

cond.false.2562:                                  ; preds = %cond.false.2525
  %528 = load i32, i32* %area, align 4
  %conv2563 = trunc i32 %528 to i16
  %conv2564 = sext i16 %conv2563 to i32
  %mul2565 = mul nsw i32 0, %conv2564
  %529 = load i32, i32* %height, align 4
  %conv2566 = trunc i32 %529 to i16
  %conv2567 = sext i16 %conv2566 to i32
  %add2568 = add nsw i32 %mul2565, %conv2567
  %mul2569 = mul nsw i32 0, %add2568
  %add2570 = add nsw i32 %mul2569, 0
  br label %cond.end.2571

cond.end.2571:                                    ; preds = %cond.false.2562, %cond.true.2536
  %cond2572 = phi i32 [ %sub2561, %cond.true.2536 ], [ %add2570, %cond.false.2562 ]
  %530 = load i32, i32* %area, align 4
  %conv2573 = trunc i32 %530 to i16
  %conv2574 = sext i16 %conv2573 to i32
  %div2575 = sdiv i32 %cond2572, %conv2574
  %531 = load i32, i32* %height, align 4
  %conv2576 = trunc i32 %531 to i16
  %conv2577 = sext i16 %conv2576 to i32
  %cmp2578 = icmp slt i32 %div2575, %conv2577
  br i1 %cmp2578, label %cond.true.2714, label %lor.lhs.false.2688

cond.false.2580:                                  ; preds = %lor.lhs.false.2467
  %532 = load i32, i32* %area, align 4
  %conv2581 = trunc i32 %532 to i16
  %conv2582 = sext i16 %conv2581 to i32
  %cmp2583 = icmp eq i32 %conv2582, 0
  br i1 %cmp2583, label %cond.true.2585, label %cond.false.2586

cond.true.2585:                                   ; preds = %cond.false.2580
  br i1 false, label %cond.true.2714, label %lor.lhs.false.2688

cond.false.2586:                                  ; preds = %cond.false.2580
  %533 = load i32, i32* %height, align 4
  %conv2587 = trunc i32 %533 to i16
  %conv2588 = sext i16 %conv2587 to i32
  %cmp2589 = icmp slt i32 %conv2588, 0
  br i1 %cmp2589, label %cond.true.2591, label %cond.false.2646

cond.true.2591:                                   ; preds = %cond.false.2586
  %534 = load i32, i32* %height, align 4
  %conv2592 = trunc i32 %534 to i16
  %conv2593 = sext i16 %conv2592 to i32
  %535 = load i32, i32* %area, align 4
  %conv2594 = trunc i32 %535 to i16
  %conv2595 = sext i16 %conv2594 to i32
  %mul2596 = mul nsw i32 0, %conv2595
  %536 = load i32, i32* %height, align 4
  %conv2597 = trunc i32 %536 to i16
  %conv2598 = sext i16 %conv2597 to i32
  %add2599 = add nsw i32 %mul2596, %conv2598
  %mul2600 = mul nsw i32 0, %add2599
  %sub2601 = sub nsw i32 %mul2600, 1
  %cmp2602 = icmp slt i32 %sub2601, 0
  br i1 %cmp2602, label %cond.true.2604, label %cond.false.2630

cond.true.2604:                                   ; preds = %cond.true.2591
  %537 = load i32, i32* %area, align 4
  %conv2605 = trunc i32 %537 to i16
  %conv2606 = sext i16 %conv2605 to i32
  %mul2607 = mul nsw i32 0, %conv2606
  %538 = load i32, i32* %height, align 4
  %conv2608 = trunc i32 %538 to i16
  %conv2609 = sext i16 %conv2608 to i32
  %add2610 = add nsw i32 %mul2607, %conv2609
  %mul2611 = mul nsw i32 0, %add2610
  %add2612 = add nsw i32 %mul2611, 0
  %neg2613 = xor i32 %add2612, -1
  %cmp2614 = icmp eq i32 %neg2613, -1
  %conv2615 = zext i1 %cmp2614 to i32
  %sub2616 = sub nsw i32 0, %conv2615
  %539 = load i32, i32* %area, align 4
  %conv2617 = trunc i32 %539 to i16
  %conv2618 = sext i16 %conv2617 to i32
  %mul2619 = mul nsw i32 0, %conv2618
  %540 = load i32, i32* %height, align 4
  %conv2620 = trunc i32 %540 to i16
  %conv2621 = sext i16 %conv2620 to i32
  %add2622 = add nsw i32 %mul2619, %conv2621
  %mul2623 = mul nsw i32 0, %add2622
  %add2624 = add nsw i32 %mul2623, 1
  %shl2625 = shl i32 %add2624, 30
  %sub2626 = sub nsw i32 %shl2625, 1
  %mul2627 = mul nsw i32 %sub2626, 2
  %add2628 = add nsw i32 %mul2627, 1
  %sub2629 = sub nsw i32 %sub2616, %add2628
  br label %cond.end.2639

cond.false.2630:                                  ; preds = %cond.true.2591
  %541 = load i32, i32* %area, align 4
  %conv2631 = trunc i32 %541 to i16
  %conv2632 = sext i16 %conv2631 to i32
  %mul2633 = mul nsw i32 0, %conv2632
  %542 = load i32, i32* %height, align 4
  %conv2634 = trunc i32 %542 to i16
  %conv2635 = sext i16 %conv2634 to i32
  %add2636 = add nsw i32 %mul2633, %conv2635
  %mul2637 = mul nsw i32 0, %add2636
  %add2638 = add nsw i32 %mul2637, 0
  br label %cond.end.2639

cond.end.2639:                                    ; preds = %cond.false.2630, %cond.true.2604
  %cond2640 = phi i32 [ %sub2629, %cond.true.2604 ], [ %add2638, %cond.false.2630 ]
  %543 = load i32, i32* %area, align 4
  %conv2641 = trunc i32 %543 to i16
  %conv2642 = sext i16 %conv2641 to i32
  %div2643 = sdiv i32 %cond2640, %conv2642
  %cmp2644 = icmp slt i32 %conv2593, %div2643
  br i1 %cmp2644, label %cond.true.2714, label %lor.lhs.false.2688

cond.false.2646:                                  ; preds = %cond.false.2586
  %544 = load i32, i32* %area, align 4
  %conv2647 = trunc i32 %544 to i16
  %conv2648 = sext i16 %conv2647 to i32
  %mul2649 = mul nsw i32 0, %conv2648
  %545 = load i32, i32* %height, align 4
  %conv2650 = trunc i32 %545 to i16
  %conv2651 = sext i16 %conv2650 to i32
  %add2652 = add nsw i32 %mul2649, %conv2651
  %mul2653 = mul nsw i32 0, %add2652
  %sub2654 = sub nsw i32 %mul2653, 1
  %cmp2655 = icmp slt i32 %sub2654, 0
  br i1 %cmp2655, label %cond.true.2657, label %cond.false.2670

cond.true.2657:                                   ; preds = %cond.false.2646
  %546 = load i32, i32* %area, align 4
  %conv2658 = trunc i32 %546 to i16
  %conv2659 = sext i16 %conv2658 to i32
  %mul2660 = mul nsw i32 0, %conv2659
  %547 = load i32, i32* %height, align 4
  %conv2661 = trunc i32 %547 to i16
  %conv2662 = sext i16 %conv2661 to i32
  %add2663 = add nsw i32 %mul2660, %conv2662
  %mul2664 = mul nsw i32 0, %add2663
  %add2665 = add nsw i32 %mul2664, 1
  %shl2666 = shl i32 %add2665, 30
  %sub2667 = sub nsw i32 %shl2666, 1
  %mul2668 = mul nsw i32 %sub2667, 2
  %add2669 = add nsw i32 %mul2668, 1
  br label %cond.end.2679

cond.false.2670:                                  ; preds = %cond.false.2646
  %548 = load i32, i32* %area, align 4
  %conv2671 = trunc i32 %548 to i16
  %conv2672 = sext i16 %conv2671 to i32
  %mul2673 = mul nsw i32 0, %conv2672
  %549 = load i32, i32* %height, align 4
  %conv2674 = trunc i32 %549 to i16
  %conv2675 = sext i16 %conv2674 to i32
  %add2676 = add nsw i32 %mul2673, %conv2675
  %mul2677 = mul nsw i32 0, %add2676
  %sub2678 = sub nsw i32 %mul2677, 1
  br label %cond.end.2679

cond.end.2679:                                    ; preds = %cond.false.2670, %cond.true.2657
  %cond2680 = phi i32 [ %add2669, %cond.true.2657 ], [ %sub2678, %cond.false.2670 ]
  %550 = load i32, i32* %area, align 4
  %conv2681 = trunc i32 %550 to i16
  %conv2682 = sext i16 %conv2681 to i32
  %div2683 = sdiv i32 %cond2680, %conv2682
  %551 = load i32, i32* %height, align 4
  %conv2684 = trunc i32 %551 to i16
  %conv2685 = sext i16 %conv2684 to i32
  %cmp2686 = icmp slt i32 %div2683, %conv2685
  br i1 %cmp2686, label %cond.true.2714, label %lor.lhs.false.2688

lor.lhs.false.2688:                               ; preds = %cond.end.2679, %cond.end.2639, %cond.true.2585, %cond.end.2571, %cond.true.2524, %cond.end.2512
  %552 = load i32, i32* %height, align 4
  %conv2689 = trunc i32 %552 to i16
  %conv2690 = sext i16 %conv2689 to i32
  %553 = load i32, i32* %area, align 4
  %conv2691 = trunc i32 %553 to i16
  %conv2692 = sext i16 %conv2691 to i32
  %mul2693 = mul nsw i32 %conv2690, %conv2692
  %mul2694 = mul nsw i32 0, %mul2693
  %sub2695 = sub nsw i32 %mul2694, 1
  %cmp2696 = icmp slt i32 %sub2695, 0
  br i1 %cmp2696, label %land.lhs.true.2698, label %lor.lhs.false.2706

land.lhs.true.2698:                               ; preds = %lor.lhs.false.2688
  %554 = load i32, i32* %height, align 4
  %conv2699 = trunc i32 %554 to i16
  %conv2700 = sext i16 %conv2699 to i32
  %555 = load i32, i32* %area, align 4
  %conv2701 = trunc i32 %555 to i16
  %conv2702 = sext i16 %conv2701 to i32
  %mul2703 = mul nsw i32 %conv2700, %conv2702
  %cmp2704 = icmp slt i32 %mul2703, -32768
  br i1 %cmp2704, label %cond.true.2714, label %lor.lhs.false.2706

lor.lhs.false.2706:                               ; preds = %land.lhs.true.2698, %lor.lhs.false.2688
  %556 = load i32, i32* %height, align 4
  %conv2707 = trunc i32 %556 to i16
  %conv2708 = sext i16 %conv2707 to i32
  %557 = load i32, i32* %area, align 4
  %conv2709 = trunc i32 %557 to i16
  %conv2710 = sext i16 %conv2709 to i32
  %mul2711 = mul nsw i32 %conv2708, %conv2710
  %cmp2712 = icmp slt i32 32767, %mul2711
  br i1 %cmp2712, label %cond.true.2714, label %cond.false.2742

cond.true.2714:                                   ; preds = %lor.lhs.false.2706, %land.lhs.true.2698, %cond.end.2679, %cond.end.2639, %cond.true.2585, %cond.end.2571, %cond.true.2524, %cond.end.2512, %land.lhs.true.2462, %land.lhs.true.2452
  %558 = load i32, i32* %height, align 4
  %conv2715 = trunc i32 %558 to i16
  %conv2716 = zext i16 %conv2715 to i32
  %559 = load i32, i32* %area, align 4
  %conv2717 = trunc i32 %559 to i16
  %conv2718 = zext i16 %conv2717 to i32
  %mul2719 = mul nsw i32 %conv2716, %conv2718
  %cmp2720 = icmp sle i32 %mul2719, 32767
  br i1 %cmp2720, label %cond.true.2722, label %cond.false.2730

cond.true.2722:                                   ; preds = %cond.true.2714
  %560 = load i32, i32* %height, align 4
  %conv2723 = trunc i32 %560 to i16
  %conv2724 = zext i16 %conv2723 to i32
  %561 = load i32, i32* %area, align 4
  %conv2725 = trunc i32 %561 to i16
  %conv2726 = zext i16 %conv2725 to i32
  %mul2727 = mul nsw i32 %conv2724, %conv2726
  %conv2728 = trunc i32 %mul2727 to i16
  %conv2729 = sext i16 %conv2728 to i32
  br label %cond.end.2740

cond.false.2730:                                  ; preds = %cond.true.2714
  %562 = load i32, i32* %height, align 4
  %conv2731 = trunc i32 %562 to i16
  %conv2732 = zext i16 %conv2731 to i32
  %563 = load i32, i32* %area, align 4
  %conv2733 = trunc i32 %563 to i16
  %conv2734 = zext i16 %conv2733 to i32
  %mul2735 = mul nsw i32 %conv2732, %conv2734
  %sub2736 = sub nsw i32 %mul2735, -32768
  %conv2737 = trunc i32 %sub2736 to i16
  %conv2738 = sext i16 %conv2737 to i32
  %add2739 = add nsw i32 %conv2738, -32768
  br label %cond.end.2740

cond.end.2740:                                    ; preds = %cond.false.2730, %cond.true.2722
  %cond2741 = phi i32 [ %conv2729, %cond.true.2722 ], [ %add2739, %cond.false.2730 ]
  store i32 %cond2741, i32* %area, align 4
  br i1 true, label %if.then.4556, label %lor.lhs.false.4552

cond.false.2742:                                  ; preds = %lor.lhs.false.2706
  %564 = load i32, i32* %height, align 4
  %conv2743 = trunc i32 %564 to i16
  %conv2744 = zext i16 %conv2743 to i32
  %565 = load i32, i32* %area, align 4
  %conv2745 = trunc i32 %565 to i16
  %conv2746 = zext i16 %conv2745 to i32
  %mul2747 = mul nsw i32 %conv2744, %conv2746
  %cmp2748 = icmp sle i32 %mul2747, 32767
  br i1 %cmp2748, label %cond.true.2750, label %cond.false.2758

cond.true.2750:                                   ; preds = %cond.false.2742
  %566 = load i32, i32* %height, align 4
  %conv2751 = trunc i32 %566 to i16
  %conv2752 = zext i16 %conv2751 to i32
  %567 = load i32, i32* %area, align 4
  %conv2753 = trunc i32 %567 to i16
  %conv2754 = zext i16 %conv2753 to i32
  %mul2755 = mul nsw i32 %conv2752, %conv2754
  %conv2756 = trunc i32 %mul2755 to i16
  %conv2757 = sext i16 %conv2756 to i32
  br label %cond.end.2768

cond.false.2758:                                  ; preds = %cond.false.2742
  %568 = load i32, i32* %height, align 4
  %conv2759 = trunc i32 %568 to i16
  %conv2760 = zext i16 %conv2759 to i32
  %569 = load i32, i32* %area, align 4
  %conv2761 = trunc i32 %569 to i16
  %conv2762 = zext i16 %conv2761 to i32
  %mul2763 = mul nsw i32 %conv2760, %conv2762
  %sub2764 = sub nsw i32 %mul2763, -32768
  %conv2765 = trunc i32 %sub2764 to i16
  %conv2766 = sext i16 %conv2765 to i32
  %add2767 = add nsw i32 %conv2766, -32768
  br label %cond.end.2768

cond.end.2768:                                    ; preds = %cond.false.2758, %cond.true.2750
  %cond2769 = phi i32 [ %conv2757, %cond.true.2750 ], [ %add2767, %cond.false.2758 ]
  store i32 %cond2769, i32* %area, align 4
  br i1 false, label %if.then.4556, label %lor.lhs.false.4552

cond.false.2770:                                  ; preds = %cond.true.2396
  %570 = load i32, i32* %area, align 4
  %mul2771 = mul nsw i32 0, %570
  %571 = load i32, i32* %height, align 4
  %add2772 = add nsw i32 %mul2771, %571
  %mul2773 = mul nsw i32 0, %add2772
  %sub2774 = sub nsw i32 %mul2773, 1
  %cmp2775 = icmp slt i32 %sub2774, 0
  br i1 %cmp2775, label %cond.true.2777, label %cond.false.2795

cond.true.2777:                                   ; preds = %cond.false.2770
  %572 = load i32, i32* %area, align 4
  %mul2778 = mul nsw i32 0, %572
  %573 = load i32, i32* %height, align 4
  %add2779 = add nsw i32 %mul2778, %573
  %mul2780 = mul nsw i32 0, %add2779
  %add2781 = add nsw i32 %mul2780, 0
  %neg2782 = xor i32 %add2781, -1
  %cmp2783 = icmp eq i32 %neg2782, -1
  %conv2784 = zext i1 %cmp2783 to i32
  %sub2785 = sub nsw i32 0, %conv2784
  %574 = load i32, i32* %area, align 4
  %mul2786 = mul nsw i32 0, %574
  %575 = load i32, i32* %height, align 4
  %add2787 = add nsw i32 %mul2786, %575
  %mul2788 = mul nsw i32 0, %add2787
  %add2789 = add nsw i32 %mul2788, 1
  %shl2790 = shl i32 %add2789, 30
  %sub2791 = sub nsw i32 %shl2790, 1
  %mul2792 = mul nsw i32 %sub2791, 2
  %add2793 = add nsw i32 %mul2792, 1
  %sub2794 = sub nsw i32 %sub2785, %add2793
  br label %cond.end.2800

cond.false.2795:                                  ; preds = %cond.false.2770
  %576 = load i32, i32* %area, align 4
  %mul2796 = mul nsw i32 0, %576
  %577 = load i32, i32* %height, align 4
  %add2797 = add nsw i32 %mul2796, %577
  %mul2798 = mul nsw i32 0, %add2797
  %add2799 = add nsw i32 %mul2798, 0
  br label %cond.end.2800

cond.end.2800:                                    ; preds = %cond.false.2795, %cond.true.2777
  %cond2801 = phi i32 [ %sub2794, %cond.true.2777 ], [ %add2799, %cond.false.2795 ]
  %cmp2802 = icmp eq i32 %cond2801, 0
  br i1 %cmp2802, label %land.lhs.true.2804, label %lor.lhs.false.2816

land.lhs.true.2804:                               ; preds = %cond.end.2800
  %578 = load i32, i32* %height, align 4
  %cmp2805 = icmp slt i32 %578, 0
  br i1 %cmp2805, label %land.lhs.true.2807, label %lor.lhs.false.2810

land.lhs.true.2807:                               ; preds = %land.lhs.true.2804
  %579 = load i32, i32* %area, align 4
  %cmp2808 = icmp slt i32 0, %579
  br i1 %cmp2808, label %cond.true.2969, label %lor.lhs.false.2810

lor.lhs.false.2810:                               ; preds = %land.lhs.true.2807, %land.lhs.true.2804
  %580 = load i32, i32* %area, align 4
  %cmp2811 = icmp slt i32 %580, 0
  br i1 %cmp2811, label %land.lhs.true.2813, label %lor.lhs.false.2816

land.lhs.true.2813:                               ; preds = %lor.lhs.false.2810
  %581 = load i32, i32* %height, align 4
  %cmp2814 = icmp slt i32 0, %581
  br i1 %cmp2814, label %cond.true.2969, label %lor.lhs.false.2816

lor.lhs.false.2816:                               ; preds = %land.lhs.true.2813, %lor.lhs.false.2810, %cond.end.2800
  %582 = load i32, i32* %area, align 4
  %cmp2817 = icmp slt i32 %582, 0
  br i1 %cmp2817, label %cond.true.2819, label %cond.false.2887

cond.true.2819:                                   ; preds = %lor.lhs.false.2816
  %583 = load i32, i32* %height, align 4
  %cmp2820 = icmp slt i32 %583, 0
  br i1 %cmp2820, label %cond.true.2822, label %cond.false.2848

cond.true.2822:                                   ; preds = %cond.true.2819
  %584 = load i32, i32* %height, align 4
  %585 = load i32, i32* %area, align 4
  %mul2823 = mul nsw i32 0, %585
  %586 = load i32, i32* %height, align 4
  %add2824 = add nsw i32 %mul2823, %586
  %mul2825 = mul nsw i32 0, %add2824
  %sub2826 = sub nsw i32 %mul2825, 1
  %cmp2827 = icmp slt i32 %sub2826, 0
  br i1 %cmp2827, label %cond.true.2829, label %cond.false.2838

cond.true.2829:                                   ; preds = %cond.true.2822
  %587 = load i32, i32* %area, align 4
  %mul2830 = mul nsw i32 0, %587
  %588 = load i32, i32* %height, align 4
  %add2831 = add nsw i32 %mul2830, %588
  %mul2832 = mul nsw i32 0, %add2831
  %add2833 = add nsw i32 %mul2832, 1
  %shl2834 = shl i32 %add2833, 30
  %sub2835 = sub nsw i32 %shl2834, 1
  %mul2836 = mul nsw i32 %sub2835, 2
  %add2837 = add nsw i32 %mul2836, 1
  br label %cond.end.2843

cond.false.2838:                                  ; preds = %cond.true.2822
  %589 = load i32, i32* %area, align 4
  %mul2839 = mul nsw i32 0, %589
  %590 = load i32, i32* %height, align 4
  %add2840 = add nsw i32 %mul2839, %590
  %mul2841 = mul nsw i32 0, %add2840
  %sub2842 = sub nsw i32 %mul2841, 1
  br label %cond.end.2843

cond.end.2843:                                    ; preds = %cond.false.2838, %cond.true.2829
  %cond2844 = phi i32 [ %add2837, %cond.true.2829 ], [ %sub2842, %cond.false.2838 ]
  %591 = load i32, i32* %area, align 4
  %div2845 = sdiv i32 %cond2844, %591
  %cmp2846 = icmp slt i32 %584, %div2845
  br i1 %cmp2846, label %cond.true.2969, label %lor.lhs.false.2955

cond.false.2848:                                  ; preds = %cond.true.2819
  %592 = load i32, i32* %area, align 4
  %cmp2849 = icmp eq i32 %592, -1
  br i1 %cmp2849, label %cond.true.2851, label %cond.false.2852

cond.true.2851:                                   ; preds = %cond.false.2848
  br i1 false, label %cond.true.2969, label %lor.lhs.false.2955

cond.false.2852:                                  ; preds = %cond.false.2848
  %593 = load i32, i32* %area, align 4
  %mul2853 = mul nsw i32 0, %593
  %594 = load i32, i32* %height, align 4
  %add2854 = add nsw i32 %mul2853, %594
  %mul2855 = mul nsw i32 0, %add2854
  %sub2856 = sub nsw i32 %mul2855, 1
  %cmp2857 = icmp slt i32 %sub2856, 0
  br i1 %cmp2857, label %cond.true.2859, label %cond.false.2877

cond.true.2859:                                   ; preds = %cond.false.2852
  %595 = load i32, i32* %area, align 4
  %mul2860 = mul nsw i32 0, %595
  %596 = load i32, i32* %height, align 4
  %add2861 = add nsw i32 %mul2860, %596
  %mul2862 = mul nsw i32 0, %add2861
  %add2863 = add nsw i32 %mul2862, 0
  %neg2864 = xor i32 %add2863, -1
  %cmp2865 = icmp eq i32 %neg2864, -1
  %conv2866 = zext i1 %cmp2865 to i32
  %sub2867 = sub nsw i32 0, %conv2866
  %597 = load i32, i32* %area, align 4
  %mul2868 = mul nsw i32 0, %597
  %598 = load i32, i32* %height, align 4
  %add2869 = add nsw i32 %mul2868, %598
  %mul2870 = mul nsw i32 0, %add2869
  %add2871 = add nsw i32 %mul2870, 1
  %shl2872 = shl i32 %add2871, 30
  %sub2873 = sub nsw i32 %shl2872, 1
  %mul2874 = mul nsw i32 %sub2873, 2
  %add2875 = add nsw i32 %mul2874, 1
  %sub2876 = sub nsw i32 %sub2867, %add2875
  br label %cond.end.2882

cond.false.2877:                                  ; preds = %cond.false.2852
  %599 = load i32, i32* %area, align 4
  %mul2878 = mul nsw i32 0, %599
  %600 = load i32, i32* %height, align 4
  %add2879 = add nsw i32 %mul2878, %600
  %mul2880 = mul nsw i32 0, %add2879
  %add2881 = add nsw i32 %mul2880, 0
  br label %cond.end.2882

cond.end.2882:                                    ; preds = %cond.false.2877, %cond.true.2859
  %cond2883 = phi i32 [ %sub2876, %cond.true.2859 ], [ %add2881, %cond.false.2877 ]
  %601 = load i32, i32* %area, align 4
  %div2884 = sdiv i32 %cond2883, %601
  %602 = load i32, i32* %height, align 4
  %cmp2885 = icmp slt i32 %div2884, %602
  br i1 %cmp2885, label %cond.true.2969, label %lor.lhs.false.2955

cond.false.2887:                                  ; preds = %lor.lhs.false.2816
  %603 = load i32, i32* %area, align 4
  %cmp2888 = icmp eq i32 %603, 0
  br i1 %cmp2888, label %cond.true.2890, label %cond.false.2891

cond.true.2890:                                   ; preds = %cond.false.2887
  br i1 false, label %cond.true.2969, label %lor.lhs.false.2955

cond.false.2891:                                  ; preds = %cond.false.2887
  %604 = load i32, i32* %height, align 4
  %cmp2892 = icmp slt i32 %604, 0
  br i1 %cmp2892, label %cond.true.2894, label %cond.false.2929

cond.true.2894:                                   ; preds = %cond.false.2891
  %605 = load i32, i32* %height, align 4
  %606 = load i32, i32* %area, align 4
  %mul2895 = mul nsw i32 0, %606
  %607 = load i32, i32* %height, align 4
  %add2896 = add nsw i32 %mul2895, %607
  %mul2897 = mul nsw i32 0, %add2896
  %sub2898 = sub nsw i32 %mul2897, 1
  %cmp2899 = icmp slt i32 %sub2898, 0
  br i1 %cmp2899, label %cond.true.2901, label %cond.false.2919

cond.true.2901:                                   ; preds = %cond.true.2894
  %608 = load i32, i32* %area, align 4
  %mul2902 = mul nsw i32 0, %608
  %609 = load i32, i32* %height, align 4
  %add2903 = add nsw i32 %mul2902, %609
  %mul2904 = mul nsw i32 0, %add2903
  %add2905 = add nsw i32 %mul2904, 0
  %neg2906 = xor i32 %add2905, -1
  %cmp2907 = icmp eq i32 %neg2906, -1
  %conv2908 = zext i1 %cmp2907 to i32
  %sub2909 = sub nsw i32 0, %conv2908
  %610 = load i32, i32* %area, align 4
  %mul2910 = mul nsw i32 0, %610
  %611 = load i32, i32* %height, align 4
  %add2911 = add nsw i32 %mul2910, %611
  %mul2912 = mul nsw i32 0, %add2911
  %add2913 = add nsw i32 %mul2912, 1
  %shl2914 = shl i32 %add2913, 30
  %sub2915 = sub nsw i32 %shl2914, 1
  %mul2916 = mul nsw i32 %sub2915, 2
  %add2917 = add nsw i32 %mul2916, 1
  %sub2918 = sub nsw i32 %sub2909, %add2917
  br label %cond.end.2924

cond.false.2919:                                  ; preds = %cond.true.2894
  %612 = load i32, i32* %area, align 4
  %mul2920 = mul nsw i32 0, %612
  %613 = load i32, i32* %height, align 4
  %add2921 = add nsw i32 %mul2920, %613
  %mul2922 = mul nsw i32 0, %add2921
  %add2923 = add nsw i32 %mul2922, 0
  br label %cond.end.2924

cond.end.2924:                                    ; preds = %cond.false.2919, %cond.true.2901
  %cond2925 = phi i32 [ %sub2918, %cond.true.2901 ], [ %add2923, %cond.false.2919 ]
  %614 = load i32, i32* %area, align 4
  %div2926 = sdiv i32 %cond2925, %614
  %cmp2927 = icmp slt i32 %605, %div2926
  br i1 %cmp2927, label %cond.true.2969, label %lor.lhs.false.2955

cond.false.2929:                                  ; preds = %cond.false.2891
  %615 = load i32, i32* %area, align 4
  %mul2930 = mul nsw i32 0, %615
  %616 = load i32, i32* %height, align 4
  %add2931 = add nsw i32 %mul2930, %616
  %mul2932 = mul nsw i32 0, %add2931
  %sub2933 = sub nsw i32 %mul2932, 1
  %cmp2934 = icmp slt i32 %sub2933, 0
  br i1 %cmp2934, label %cond.true.2936, label %cond.false.2945

cond.true.2936:                                   ; preds = %cond.false.2929
  %617 = load i32, i32* %area, align 4
  %mul2937 = mul nsw i32 0, %617
  %618 = load i32, i32* %height, align 4
  %add2938 = add nsw i32 %mul2937, %618
  %mul2939 = mul nsw i32 0, %add2938
  %add2940 = add nsw i32 %mul2939, 1
  %shl2941 = shl i32 %add2940, 30
  %sub2942 = sub nsw i32 %shl2941, 1
  %mul2943 = mul nsw i32 %sub2942, 2
  %add2944 = add nsw i32 %mul2943, 1
  br label %cond.end.2950

cond.false.2945:                                  ; preds = %cond.false.2929
  %619 = load i32, i32* %area, align 4
  %mul2946 = mul nsw i32 0, %619
  %620 = load i32, i32* %height, align 4
  %add2947 = add nsw i32 %mul2946, %620
  %mul2948 = mul nsw i32 0, %add2947
  %sub2949 = sub nsw i32 %mul2948, 1
  br label %cond.end.2950

cond.end.2950:                                    ; preds = %cond.false.2945, %cond.true.2936
  %cond2951 = phi i32 [ %add2944, %cond.true.2936 ], [ %sub2949, %cond.false.2945 ]
  %621 = load i32, i32* %area, align 4
  %div2952 = sdiv i32 %cond2951, %621
  %622 = load i32, i32* %height, align 4
  %cmp2953 = icmp slt i32 %div2952, %622
  br i1 %cmp2953, label %cond.true.2969, label %lor.lhs.false.2955

lor.lhs.false.2955:                               ; preds = %cond.end.2950, %cond.end.2924, %cond.true.2890, %cond.end.2882, %cond.true.2851, %cond.end.2843
  %623 = load i32, i32* %height, align 4
  %624 = load i32, i32* %area, align 4
  %mul2956 = mul nsw i32 %623, %624
  %mul2957 = mul nsw i32 0, %mul2956
  %sub2958 = sub nsw i32 %mul2957, 1
  %cmp2959 = icmp slt i32 %sub2958, 0
  br i1 %cmp2959, label %land.lhs.true.2961, label %lor.lhs.false.2965

land.lhs.true.2961:                               ; preds = %lor.lhs.false.2955
  %625 = load i32, i32* %height, align 4
  %626 = load i32, i32* %area, align 4
  %mul2962 = mul nsw i32 %625, %626
  %cmp2963 = icmp slt i32 %mul2962, -32768
  br i1 %cmp2963, label %cond.true.2969, label %lor.lhs.false.2965

lor.lhs.false.2965:                               ; preds = %land.lhs.true.2961, %lor.lhs.false.2955
  %627 = load i32, i32* %height, align 4
  %628 = load i32, i32* %area, align 4
  %mul2966 = mul nsw i32 %627, %628
  %cmp2967 = icmp slt i32 32767, %mul2966
  br i1 %cmp2967, label %cond.true.2969, label %cond.false.2997

cond.true.2969:                                   ; preds = %lor.lhs.false.2965, %land.lhs.true.2961, %cond.end.2950, %cond.end.2924, %cond.true.2890, %cond.end.2882, %cond.true.2851, %cond.end.2843, %land.lhs.true.2813, %land.lhs.true.2807
  %629 = load i32, i32* %height, align 4
  %conv2970 = trunc i32 %629 to i16
  %conv2971 = zext i16 %conv2970 to i32
  %630 = load i32, i32* %area, align 4
  %conv2972 = trunc i32 %630 to i16
  %conv2973 = zext i16 %conv2972 to i32
  %mul2974 = mul nsw i32 %conv2971, %conv2973
  %cmp2975 = icmp sle i32 %mul2974, 32767
  br i1 %cmp2975, label %cond.true.2977, label %cond.false.2985

cond.true.2977:                                   ; preds = %cond.true.2969
  %631 = load i32, i32* %height, align 4
  %conv2978 = trunc i32 %631 to i16
  %conv2979 = zext i16 %conv2978 to i32
  %632 = load i32, i32* %area, align 4
  %conv2980 = trunc i32 %632 to i16
  %conv2981 = zext i16 %conv2980 to i32
  %mul2982 = mul nsw i32 %conv2979, %conv2981
  %conv2983 = trunc i32 %mul2982 to i16
  %conv2984 = sext i16 %conv2983 to i32
  br label %cond.end.2995

cond.false.2985:                                  ; preds = %cond.true.2969
  %633 = load i32, i32* %height, align 4
  %conv2986 = trunc i32 %633 to i16
  %conv2987 = zext i16 %conv2986 to i32
  %634 = load i32, i32* %area, align 4
  %conv2988 = trunc i32 %634 to i16
  %conv2989 = zext i16 %conv2988 to i32
  %mul2990 = mul nsw i32 %conv2987, %conv2989
  %sub2991 = sub nsw i32 %mul2990, -32768
  %conv2992 = trunc i32 %sub2991 to i16
  %conv2993 = sext i16 %conv2992 to i32
  %add2994 = add nsw i32 %conv2993, -32768
  br label %cond.end.2995

cond.end.2995:                                    ; preds = %cond.false.2985, %cond.true.2977
  %cond2996 = phi i32 [ %conv2984, %cond.true.2977 ], [ %add2994, %cond.false.2985 ]
  store i32 %cond2996, i32* %area, align 4
  br i1 true, label %if.then.4556, label %lor.lhs.false.4552

cond.false.2997:                                  ; preds = %lor.lhs.false.2965
  %635 = load i32, i32* %height, align 4
  %conv2998 = trunc i32 %635 to i16
  %conv2999 = zext i16 %conv2998 to i32
  %636 = load i32, i32* %area, align 4
  %conv3000 = trunc i32 %636 to i16
  %conv3001 = zext i16 %conv3000 to i32
  %mul3002 = mul nsw i32 %conv2999, %conv3001
  %cmp3003 = icmp sle i32 %mul3002, 32767
  br i1 %cmp3003, label %cond.true.3005, label %cond.false.3013

cond.true.3005:                                   ; preds = %cond.false.2997
  %637 = load i32, i32* %height, align 4
  %conv3006 = trunc i32 %637 to i16
  %conv3007 = zext i16 %conv3006 to i32
  %638 = load i32, i32* %area, align 4
  %conv3008 = trunc i32 %638 to i16
  %conv3009 = zext i16 %conv3008 to i32
  %mul3010 = mul nsw i32 %conv3007, %conv3009
  %conv3011 = trunc i32 %mul3010 to i16
  %conv3012 = sext i16 %conv3011 to i32
  br label %cond.end.3023

cond.false.3013:                                  ; preds = %cond.false.2997
  %639 = load i32, i32* %height, align 4
  %conv3014 = trunc i32 %639 to i16
  %conv3015 = zext i16 %conv3014 to i32
  %640 = load i32, i32* %area, align 4
  %conv3016 = trunc i32 %640 to i16
  %conv3017 = zext i16 %conv3016 to i32
  %mul3018 = mul nsw i32 %conv3015, %conv3017
  %sub3019 = sub nsw i32 %mul3018, -32768
  %conv3020 = trunc i32 %sub3019 to i16
  %conv3021 = sext i16 %conv3020 to i32
  %add3022 = add nsw i32 %conv3021, -32768
  br label %cond.end.3023

cond.end.3023:                                    ; preds = %cond.false.3013, %cond.true.3005
  %cond3024 = phi i32 [ %conv3012, %cond.true.3005 ], [ %add3022, %cond.false.3013 ]
  store i32 %cond3024, i32* %area, align 4
  br i1 false, label %if.then.4556, label %lor.lhs.false.4552

cond.false.3025:                                  ; preds = %cond.false.2395
  br i1 true, label %cond.true.3026, label %cond.false.3473

cond.true.3026:                                   ; preds = %cond.false.3025
  br i1 false, label %cond.true.3027, label %cond.false.3250

cond.true.3027:                                   ; preds = %cond.true.3026
  %641 = load i32, i32* %area, align 4
  %mul3028 = mul nsw i32 0, %641
  %642 = load i32, i32* %height, align 4
  %add3029 = add nsw i32 %mul3028, %642
  %mul3030 = mul nsw i32 0, %add3029
  %sub3031 = sub nsw i32 %mul3030, 1
  %cmp3032 = icmp slt i32 %sub3031, 0
  br i1 %cmp3032, label %cond.true.3034, label %cond.false.3052

cond.true.3034:                                   ; preds = %cond.true.3027
  %643 = load i32, i32* %area, align 4
  %mul3035 = mul nsw i32 0, %643
  %644 = load i32, i32* %height, align 4
  %add3036 = add nsw i32 %mul3035, %644
  %mul3037 = mul nsw i32 0, %add3036
  %add3038 = add nsw i32 %mul3037, 0
  %neg3039 = xor i32 %add3038, -1
  %cmp3040 = icmp eq i32 %neg3039, -1
  %conv3041 = zext i1 %cmp3040 to i32
  %sub3042 = sub nsw i32 0, %conv3041
  %645 = load i32, i32* %area, align 4
  %mul3043 = mul nsw i32 0, %645
  %646 = load i32, i32* %height, align 4
  %add3044 = add nsw i32 %mul3043, %646
  %mul3045 = mul nsw i32 0, %add3044
  %add3046 = add nsw i32 %mul3045, 1
  %shl3047 = shl i32 %add3046, 30
  %sub3048 = sub nsw i32 %shl3047, 1
  %mul3049 = mul nsw i32 %sub3048, 2
  %add3050 = add nsw i32 %mul3049, 1
  %sub3051 = sub nsw i32 %sub3042, %add3050
  br label %cond.end.3057

cond.false.3052:                                  ; preds = %cond.true.3027
  %647 = load i32, i32* %area, align 4
  %mul3053 = mul nsw i32 0, %647
  %648 = load i32, i32* %height, align 4
  %add3054 = add nsw i32 %mul3053, %648
  %mul3055 = mul nsw i32 0, %add3054
  %add3056 = add nsw i32 %mul3055, 0
  br label %cond.end.3057

cond.end.3057:                                    ; preds = %cond.false.3052, %cond.true.3034
  %cond3058 = phi i32 [ %sub3051, %cond.true.3034 ], [ %add3056, %cond.false.3052 ]
  %cmp3059 = icmp eq i32 %cond3058, 0
  br i1 %cmp3059, label %land.lhs.true.3061, label %lor.lhs.false.3073

land.lhs.true.3061:                               ; preds = %cond.end.3057
  %649 = load i32, i32* %height, align 4
  %cmp3062 = icmp slt i32 %649, 0
  br i1 %cmp3062, label %land.lhs.true.3064, label %lor.lhs.false.3067

land.lhs.true.3064:                               ; preds = %land.lhs.true.3061
  %650 = load i32, i32* %area, align 4
  %cmp3065 = icmp slt i32 0, %650
  br i1 %cmp3065, label %cond.true.3226, label %lor.lhs.false.3067

lor.lhs.false.3067:                               ; preds = %land.lhs.true.3064, %land.lhs.true.3061
  %651 = load i32, i32* %area, align 4
  %cmp3068 = icmp slt i32 %651, 0
  br i1 %cmp3068, label %land.lhs.true.3070, label %lor.lhs.false.3073

land.lhs.true.3070:                               ; preds = %lor.lhs.false.3067
  %652 = load i32, i32* %height, align 4
  %cmp3071 = icmp slt i32 0, %652
  br i1 %cmp3071, label %cond.true.3226, label %lor.lhs.false.3073

lor.lhs.false.3073:                               ; preds = %land.lhs.true.3070, %lor.lhs.false.3067, %cond.end.3057
  %653 = load i32, i32* %area, align 4
  %cmp3074 = icmp slt i32 %653, 0
  br i1 %cmp3074, label %cond.true.3076, label %cond.false.3144

cond.true.3076:                                   ; preds = %lor.lhs.false.3073
  %654 = load i32, i32* %height, align 4
  %cmp3077 = icmp slt i32 %654, 0
  br i1 %cmp3077, label %cond.true.3079, label %cond.false.3105

cond.true.3079:                                   ; preds = %cond.true.3076
  %655 = load i32, i32* %height, align 4
  %656 = load i32, i32* %area, align 4
  %mul3080 = mul nsw i32 0, %656
  %657 = load i32, i32* %height, align 4
  %add3081 = add nsw i32 %mul3080, %657
  %mul3082 = mul nsw i32 0, %add3081
  %sub3083 = sub nsw i32 %mul3082, 1
  %cmp3084 = icmp slt i32 %sub3083, 0
  br i1 %cmp3084, label %cond.true.3086, label %cond.false.3095

cond.true.3086:                                   ; preds = %cond.true.3079
  %658 = load i32, i32* %area, align 4
  %mul3087 = mul nsw i32 0, %658
  %659 = load i32, i32* %height, align 4
  %add3088 = add nsw i32 %mul3087, %659
  %mul3089 = mul nsw i32 0, %add3088
  %add3090 = add nsw i32 %mul3089, 1
  %shl3091 = shl i32 %add3090, 30
  %sub3092 = sub nsw i32 %shl3091, 1
  %mul3093 = mul nsw i32 %sub3092, 2
  %add3094 = add nsw i32 %mul3093, 1
  br label %cond.end.3100

cond.false.3095:                                  ; preds = %cond.true.3079
  %660 = load i32, i32* %area, align 4
  %mul3096 = mul nsw i32 0, %660
  %661 = load i32, i32* %height, align 4
  %add3097 = add nsw i32 %mul3096, %661
  %mul3098 = mul nsw i32 0, %add3097
  %sub3099 = sub nsw i32 %mul3098, 1
  br label %cond.end.3100

cond.end.3100:                                    ; preds = %cond.false.3095, %cond.true.3086
  %cond3101 = phi i32 [ %add3094, %cond.true.3086 ], [ %sub3099, %cond.false.3095 ]
  %662 = load i32, i32* %area, align 4
  %div3102 = sdiv i32 %cond3101, %662
  %cmp3103 = icmp slt i32 %655, %div3102
  br i1 %cmp3103, label %cond.true.3226, label %lor.lhs.false.3212

cond.false.3105:                                  ; preds = %cond.true.3076
  %663 = load i32, i32* %area, align 4
  %cmp3106 = icmp eq i32 %663, -1
  br i1 %cmp3106, label %cond.true.3108, label %cond.false.3109

cond.true.3108:                                   ; preds = %cond.false.3105
  br i1 false, label %cond.true.3226, label %lor.lhs.false.3212

cond.false.3109:                                  ; preds = %cond.false.3105
  %664 = load i32, i32* %area, align 4
  %mul3110 = mul nsw i32 0, %664
  %665 = load i32, i32* %height, align 4
  %add3111 = add nsw i32 %mul3110, %665
  %mul3112 = mul nsw i32 0, %add3111
  %sub3113 = sub nsw i32 %mul3112, 1
  %cmp3114 = icmp slt i32 %sub3113, 0
  br i1 %cmp3114, label %cond.true.3116, label %cond.false.3134

cond.true.3116:                                   ; preds = %cond.false.3109
  %666 = load i32, i32* %area, align 4
  %mul3117 = mul nsw i32 0, %666
  %667 = load i32, i32* %height, align 4
  %add3118 = add nsw i32 %mul3117, %667
  %mul3119 = mul nsw i32 0, %add3118
  %add3120 = add nsw i32 %mul3119, 0
  %neg3121 = xor i32 %add3120, -1
  %cmp3122 = icmp eq i32 %neg3121, -1
  %conv3123 = zext i1 %cmp3122 to i32
  %sub3124 = sub nsw i32 0, %conv3123
  %668 = load i32, i32* %area, align 4
  %mul3125 = mul nsw i32 0, %668
  %669 = load i32, i32* %height, align 4
  %add3126 = add nsw i32 %mul3125, %669
  %mul3127 = mul nsw i32 0, %add3126
  %add3128 = add nsw i32 %mul3127, 1
  %shl3129 = shl i32 %add3128, 30
  %sub3130 = sub nsw i32 %shl3129, 1
  %mul3131 = mul nsw i32 %sub3130, 2
  %add3132 = add nsw i32 %mul3131, 1
  %sub3133 = sub nsw i32 %sub3124, %add3132
  br label %cond.end.3139

cond.false.3134:                                  ; preds = %cond.false.3109
  %670 = load i32, i32* %area, align 4
  %mul3135 = mul nsw i32 0, %670
  %671 = load i32, i32* %height, align 4
  %add3136 = add nsw i32 %mul3135, %671
  %mul3137 = mul nsw i32 0, %add3136
  %add3138 = add nsw i32 %mul3137, 0
  br label %cond.end.3139

cond.end.3139:                                    ; preds = %cond.false.3134, %cond.true.3116
  %cond3140 = phi i32 [ %sub3133, %cond.true.3116 ], [ %add3138, %cond.false.3134 ]
  %672 = load i32, i32* %area, align 4
  %div3141 = sdiv i32 %cond3140, %672
  %673 = load i32, i32* %height, align 4
  %cmp3142 = icmp slt i32 %div3141, %673
  br i1 %cmp3142, label %cond.true.3226, label %lor.lhs.false.3212

cond.false.3144:                                  ; preds = %lor.lhs.false.3073
  %674 = load i32, i32* %area, align 4
  %cmp3145 = icmp eq i32 %674, 0
  br i1 %cmp3145, label %cond.true.3147, label %cond.false.3148

cond.true.3147:                                   ; preds = %cond.false.3144
  br i1 false, label %cond.true.3226, label %lor.lhs.false.3212

cond.false.3148:                                  ; preds = %cond.false.3144
  %675 = load i32, i32* %height, align 4
  %cmp3149 = icmp slt i32 %675, 0
  br i1 %cmp3149, label %cond.true.3151, label %cond.false.3186

cond.true.3151:                                   ; preds = %cond.false.3148
  %676 = load i32, i32* %height, align 4
  %677 = load i32, i32* %area, align 4
  %mul3152 = mul nsw i32 0, %677
  %678 = load i32, i32* %height, align 4
  %add3153 = add nsw i32 %mul3152, %678
  %mul3154 = mul nsw i32 0, %add3153
  %sub3155 = sub nsw i32 %mul3154, 1
  %cmp3156 = icmp slt i32 %sub3155, 0
  br i1 %cmp3156, label %cond.true.3158, label %cond.false.3176

cond.true.3158:                                   ; preds = %cond.true.3151
  %679 = load i32, i32* %area, align 4
  %mul3159 = mul nsw i32 0, %679
  %680 = load i32, i32* %height, align 4
  %add3160 = add nsw i32 %mul3159, %680
  %mul3161 = mul nsw i32 0, %add3160
  %add3162 = add nsw i32 %mul3161, 0
  %neg3163 = xor i32 %add3162, -1
  %cmp3164 = icmp eq i32 %neg3163, -1
  %conv3165 = zext i1 %cmp3164 to i32
  %sub3166 = sub nsw i32 0, %conv3165
  %681 = load i32, i32* %area, align 4
  %mul3167 = mul nsw i32 0, %681
  %682 = load i32, i32* %height, align 4
  %add3168 = add nsw i32 %mul3167, %682
  %mul3169 = mul nsw i32 0, %add3168
  %add3170 = add nsw i32 %mul3169, 1
  %shl3171 = shl i32 %add3170, 30
  %sub3172 = sub nsw i32 %shl3171, 1
  %mul3173 = mul nsw i32 %sub3172, 2
  %add3174 = add nsw i32 %mul3173, 1
  %sub3175 = sub nsw i32 %sub3166, %add3174
  br label %cond.end.3181

cond.false.3176:                                  ; preds = %cond.true.3151
  %683 = load i32, i32* %area, align 4
  %mul3177 = mul nsw i32 0, %683
  %684 = load i32, i32* %height, align 4
  %add3178 = add nsw i32 %mul3177, %684
  %mul3179 = mul nsw i32 0, %add3178
  %add3180 = add nsw i32 %mul3179, 0
  br label %cond.end.3181

cond.end.3181:                                    ; preds = %cond.false.3176, %cond.true.3158
  %cond3182 = phi i32 [ %sub3175, %cond.true.3158 ], [ %add3180, %cond.false.3176 ]
  %685 = load i32, i32* %area, align 4
  %div3183 = sdiv i32 %cond3182, %685
  %cmp3184 = icmp slt i32 %676, %div3183
  br i1 %cmp3184, label %cond.true.3226, label %lor.lhs.false.3212

cond.false.3186:                                  ; preds = %cond.false.3148
  %686 = load i32, i32* %area, align 4
  %mul3187 = mul nsw i32 0, %686
  %687 = load i32, i32* %height, align 4
  %add3188 = add nsw i32 %mul3187, %687
  %mul3189 = mul nsw i32 0, %add3188
  %sub3190 = sub nsw i32 %mul3189, 1
  %cmp3191 = icmp slt i32 %sub3190, 0
  br i1 %cmp3191, label %cond.true.3193, label %cond.false.3202

cond.true.3193:                                   ; preds = %cond.false.3186
  %688 = load i32, i32* %area, align 4
  %mul3194 = mul nsw i32 0, %688
  %689 = load i32, i32* %height, align 4
  %add3195 = add nsw i32 %mul3194, %689
  %mul3196 = mul nsw i32 0, %add3195
  %add3197 = add nsw i32 %mul3196, 1
  %shl3198 = shl i32 %add3197, 30
  %sub3199 = sub nsw i32 %shl3198, 1
  %mul3200 = mul nsw i32 %sub3199, 2
  %add3201 = add nsw i32 %mul3200, 1
  br label %cond.end.3207

cond.false.3202:                                  ; preds = %cond.false.3186
  %690 = load i32, i32* %area, align 4
  %mul3203 = mul nsw i32 0, %690
  %691 = load i32, i32* %height, align 4
  %add3204 = add nsw i32 %mul3203, %691
  %mul3205 = mul nsw i32 0, %add3204
  %sub3206 = sub nsw i32 %mul3205, 1
  br label %cond.end.3207

cond.end.3207:                                    ; preds = %cond.false.3202, %cond.true.3193
  %cond3208 = phi i32 [ %add3201, %cond.true.3193 ], [ %sub3206, %cond.false.3202 ]
  %692 = load i32, i32* %area, align 4
  %div3209 = sdiv i32 %cond3208, %692
  %693 = load i32, i32* %height, align 4
  %cmp3210 = icmp slt i32 %div3209, %693
  br i1 %cmp3210, label %cond.true.3226, label %lor.lhs.false.3212

lor.lhs.false.3212:                               ; preds = %cond.end.3207, %cond.end.3181, %cond.true.3147, %cond.end.3139, %cond.true.3108, %cond.end.3100
  %694 = load i32, i32* %height, align 4
  %695 = load i32, i32* %area, align 4
  %mul3213 = mul nsw i32 %694, %695
  %mul3214 = mul nsw i32 0, %mul3213
  %sub3215 = sub nsw i32 %mul3214, 1
  %cmp3216 = icmp slt i32 %sub3215, 0
  br i1 %cmp3216, label %land.lhs.true.3218, label %lor.lhs.false.3222

land.lhs.true.3218:                               ; preds = %lor.lhs.false.3212
  %696 = load i32, i32* %height, align 4
  %697 = load i32, i32* %area, align 4
  %mul3219 = mul nsw i32 %696, %697
  %cmp3220 = icmp slt i32 %mul3219, -2147483648
  br i1 %cmp3220, label %cond.true.3226, label %lor.lhs.false.3222

lor.lhs.false.3222:                               ; preds = %land.lhs.true.3218, %lor.lhs.false.3212
  %698 = load i32, i32* %height, align 4
  %699 = load i32, i32* %area, align 4
  %mul3223 = mul nsw i32 %698, %699
  %cmp3224 = icmp slt i32 2147483647, %mul3223
  br i1 %cmp3224, label %cond.true.3226, label %cond.false.3238

cond.true.3226:                                   ; preds = %lor.lhs.false.3222, %land.lhs.true.3218, %cond.end.3207, %cond.end.3181, %cond.true.3147, %cond.end.3139, %cond.true.3108, %cond.end.3100, %land.lhs.true.3070, %land.lhs.true.3064
  %700 = load i32, i32* %height, align 4
  %701 = load i32, i32* %area, align 4
  %mul3227 = mul i32 %700, %701
  %cmp3228 = icmp ule i32 %mul3227, 2147483647
  br i1 %cmp3228, label %cond.true.3230, label %cond.false.3232

cond.true.3230:                                   ; preds = %cond.true.3226
  %702 = load i32, i32* %height, align 4
  %703 = load i32, i32* %area, align 4
  %mul3231 = mul i32 %702, %703
  br label %cond.end.3236

cond.false.3232:                                  ; preds = %cond.true.3226
  %704 = load i32, i32* %height, align 4
  %705 = load i32, i32* %area, align 4
  %mul3233 = mul i32 %704, %705
  %sub3234 = sub i32 %mul3233, -2147483648
  %add3235 = add nsw i32 %sub3234, -2147483648
  br label %cond.end.3236

cond.end.3236:                                    ; preds = %cond.false.3232, %cond.true.3230
  %cond3237 = phi i32 [ %mul3231, %cond.true.3230 ], [ %add3235, %cond.false.3232 ]
  store i32 %cond3237, i32* %area, align 4
  br i1 true, label %if.then.4556, label %lor.lhs.false.4552

cond.false.3238:                                  ; preds = %lor.lhs.false.3222
  %706 = load i32, i32* %height, align 4
  %707 = load i32, i32* %area, align 4
  %mul3239 = mul i32 %706, %707
  %cmp3240 = icmp ule i32 %mul3239, 2147483647
  br i1 %cmp3240, label %cond.true.3242, label %cond.false.3244

cond.true.3242:                                   ; preds = %cond.false.3238
  %708 = load i32, i32* %height, align 4
  %709 = load i32, i32* %area, align 4
  %mul3243 = mul i32 %708, %709
  br label %cond.end.3248

cond.false.3244:                                  ; preds = %cond.false.3238
  %710 = load i32, i32* %height, align 4
  %711 = load i32, i32* %area, align 4
  %mul3245 = mul i32 %710, %711
  %sub3246 = sub i32 %mul3245, -2147483648
  %add3247 = add nsw i32 %sub3246, -2147483648
  br label %cond.end.3248

cond.end.3248:                                    ; preds = %cond.false.3244, %cond.true.3242
  %cond3249 = phi i32 [ %mul3243, %cond.true.3242 ], [ %add3247, %cond.false.3244 ]
  store i32 %cond3249, i32* %area, align 4
  br i1 false, label %if.then.4556, label %lor.lhs.false.4552

cond.false.3250:                                  ; preds = %cond.true.3026
  %712 = load i32, i32* %area, align 4
  %mul3251 = mul nsw i32 0, %712
  %713 = load i32, i32* %height, align 4
  %add3252 = add nsw i32 %mul3251, %713
  %mul3253 = mul nsw i32 0, %add3252
  %sub3254 = sub nsw i32 %mul3253, 1
  %cmp3255 = icmp slt i32 %sub3254, 0
  br i1 %cmp3255, label %cond.true.3257, label %cond.false.3275

cond.true.3257:                                   ; preds = %cond.false.3250
  %714 = load i32, i32* %area, align 4
  %mul3258 = mul nsw i32 0, %714
  %715 = load i32, i32* %height, align 4
  %add3259 = add nsw i32 %mul3258, %715
  %mul3260 = mul nsw i32 0, %add3259
  %add3261 = add nsw i32 %mul3260, 0
  %neg3262 = xor i32 %add3261, -1
  %cmp3263 = icmp eq i32 %neg3262, -1
  %conv3264 = zext i1 %cmp3263 to i32
  %sub3265 = sub nsw i32 0, %conv3264
  %716 = load i32, i32* %area, align 4
  %mul3266 = mul nsw i32 0, %716
  %717 = load i32, i32* %height, align 4
  %add3267 = add nsw i32 %mul3266, %717
  %mul3268 = mul nsw i32 0, %add3267
  %add3269 = add nsw i32 %mul3268, 1
  %shl3270 = shl i32 %add3269, 30
  %sub3271 = sub nsw i32 %shl3270, 1
  %mul3272 = mul nsw i32 %sub3271, 2
  %add3273 = add nsw i32 %mul3272, 1
  %sub3274 = sub nsw i32 %sub3265, %add3273
  br label %cond.end.3280

cond.false.3275:                                  ; preds = %cond.false.3250
  %718 = load i32, i32* %area, align 4
  %mul3276 = mul nsw i32 0, %718
  %719 = load i32, i32* %height, align 4
  %add3277 = add nsw i32 %mul3276, %719
  %mul3278 = mul nsw i32 0, %add3277
  %add3279 = add nsw i32 %mul3278, 0
  br label %cond.end.3280

cond.end.3280:                                    ; preds = %cond.false.3275, %cond.true.3257
  %cond3281 = phi i32 [ %sub3274, %cond.true.3257 ], [ %add3279, %cond.false.3275 ]
  %cmp3282 = icmp eq i32 %cond3281, 0
  br i1 %cmp3282, label %land.lhs.true.3284, label %lor.lhs.false.3296

land.lhs.true.3284:                               ; preds = %cond.end.3280
  %720 = load i32, i32* %height, align 4
  %cmp3285 = icmp slt i32 %720, 0
  br i1 %cmp3285, label %land.lhs.true.3287, label %lor.lhs.false.3290

land.lhs.true.3287:                               ; preds = %land.lhs.true.3284
  %721 = load i32, i32* %area, align 4
  %cmp3288 = icmp slt i32 0, %721
  br i1 %cmp3288, label %cond.true.3449, label %lor.lhs.false.3290

lor.lhs.false.3290:                               ; preds = %land.lhs.true.3287, %land.lhs.true.3284
  %722 = load i32, i32* %area, align 4
  %cmp3291 = icmp slt i32 %722, 0
  br i1 %cmp3291, label %land.lhs.true.3293, label %lor.lhs.false.3296

land.lhs.true.3293:                               ; preds = %lor.lhs.false.3290
  %723 = load i32, i32* %height, align 4
  %cmp3294 = icmp slt i32 0, %723
  br i1 %cmp3294, label %cond.true.3449, label %lor.lhs.false.3296

lor.lhs.false.3296:                               ; preds = %land.lhs.true.3293, %lor.lhs.false.3290, %cond.end.3280
  %724 = load i32, i32* %area, align 4
  %cmp3297 = icmp slt i32 %724, 0
  br i1 %cmp3297, label %cond.true.3299, label %cond.false.3367

cond.true.3299:                                   ; preds = %lor.lhs.false.3296
  %725 = load i32, i32* %height, align 4
  %cmp3300 = icmp slt i32 %725, 0
  br i1 %cmp3300, label %cond.true.3302, label %cond.false.3328

cond.true.3302:                                   ; preds = %cond.true.3299
  %726 = load i32, i32* %height, align 4
  %727 = load i32, i32* %area, align 4
  %mul3303 = mul nsw i32 0, %727
  %728 = load i32, i32* %height, align 4
  %add3304 = add nsw i32 %mul3303, %728
  %mul3305 = mul nsw i32 0, %add3304
  %sub3306 = sub nsw i32 %mul3305, 1
  %cmp3307 = icmp slt i32 %sub3306, 0
  br i1 %cmp3307, label %cond.true.3309, label %cond.false.3318

cond.true.3309:                                   ; preds = %cond.true.3302
  %729 = load i32, i32* %area, align 4
  %mul3310 = mul nsw i32 0, %729
  %730 = load i32, i32* %height, align 4
  %add3311 = add nsw i32 %mul3310, %730
  %mul3312 = mul nsw i32 0, %add3311
  %add3313 = add nsw i32 %mul3312, 1
  %shl3314 = shl i32 %add3313, 30
  %sub3315 = sub nsw i32 %shl3314, 1
  %mul3316 = mul nsw i32 %sub3315, 2
  %add3317 = add nsw i32 %mul3316, 1
  br label %cond.end.3323

cond.false.3318:                                  ; preds = %cond.true.3302
  %731 = load i32, i32* %area, align 4
  %mul3319 = mul nsw i32 0, %731
  %732 = load i32, i32* %height, align 4
  %add3320 = add nsw i32 %mul3319, %732
  %mul3321 = mul nsw i32 0, %add3320
  %sub3322 = sub nsw i32 %mul3321, 1
  br label %cond.end.3323

cond.end.3323:                                    ; preds = %cond.false.3318, %cond.true.3309
  %cond3324 = phi i32 [ %add3317, %cond.true.3309 ], [ %sub3322, %cond.false.3318 ]
  %733 = load i32, i32* %area, align 4
  %div3325 = sdiv i32 %cond3324, %733
  %cmp3326 = icmp slt i32 %726, %div3325
  br i1 %cmp3326, label %cond.true.3449, label %lor.lhs.false.3435

cond.false.3328:                                  ; preds = %cond.true.3299
  %734 = load i32, i32* %area, align 4
  %cmp3329 = icmp eq i32 %734, -1
  br i1 %cmp3329, label %cond.true.3331, label %cond.false.3332

cond.true.3331:                                   ; preds = %cond.false.3328
  br i1 false, label %cond.true.3449, label %lor.lhs.false.3435

cond.false.3332:                                  ; preds = %cond.false.3328
  %735 = load i32, i32* %area, align 4
  %mul3333 = mul nsw i32 0, %735
  %736 = load i32, i32* %height, align 4
  %add3334 = add nsw i32 %mul3333, %736
  %mul3335 = mul nsw i32 0, %add3334
  %sub3336 = sub nsw i32 %mul3335, 1
  %cmp3337 = icmp slt i32 %sub3336, 0
  br i1 %cmp3337, label %cond.true.3339, label %cond.false.3357

cond.true.3339:                                   ; preds = %cond.false.3332
  %737 = load i32, i32* %area, align 4
  %mul3340 = mul nsw i32 0, %737
  %738 = load i32, i32* %height, align 4
  %add3341 = add nsw i32 %mul3340, %738
  %mul3342 = mul nsw i32 0, %add3341
  %add3343 = add nsw i32 %mul3342, 0
  %neg3344 = xor i32 %add3343, -1
  %cmp3345 = icmp eq i32 %neg3344, -1
  %conv3346 = zext i1 %cmp3345 to i32
  %sub3347 = sub nsw i32 0, %conv3346
  %739 = load i32, i32* %area, align 4
  %mul3348 = mul nsw i32 0, %739
  %740 = load i32, i32* %height, align 4
  %add3349 = add nsw i32 %mul3348, %740
  %mul3350 = mul nsw i32 0, %add3349
  %add3351 = add nsw i32 %mul3350, 1
  %shl3352 = shl i32 %add3351, 30
  %sub3353 = sub nsw i32 %shl3352, 1
  %mul3354 = mul nsw i32 %sub3353, 2
  %add3355 = add nsw i32 %mul3354, 1
  %sub3356 = sub nsw i32 %sub3347, %add3355
  br label %cond.end.3362

cond.false.3357:                                  ; preds = %cond.false.3332
  %741 = load i32, i32* %area, align 4
  %mul3358 = mul nsw i32 0, %741
  %742 = load i32, i32* %height, align 4
  %add3359 = add nsw i32 %mul3358, %742
  %mul3360 = mul nsw i32 0, %add3359
  %add3361 = add nsw i32 %mul3360, 0
  br label %cond.end.3362

cond.end.3362:                                    ; preds = %cond.false.3357, %cond.true.3339
  %cond3363 = phi i32 [ %sub3356, %cond.true.3339 ], [ %add3361, %cond.false.3357 ]
  %743 = load i32, i32* %area, align 4
  %div3364 = sdiv i32 %cond3363, %743
  %744 = load i32, i32* %height, align 4
  %cmp3365 = icmp slt i32 %div3364, %744
  br i1 %cmp3365, label %cond.true.3449, label %lor.lhs.false.3435

cond.false.3367:                                  ; preds = %lor.lhs.false.3296
  %745 = load i32, i32* %area, align 4
  %cmp3368 = icmp eq i32 %745, 0
  br i1 %cmp3368, label %cond.true.3370, label %cond.false.3371

cond.true.3370:                                   ; preds = %cond.false.3367
  br i1 false, label %cond.true.3449, label %lor.lhs.false.3435

cond.false.3371:                                  ; preds = %cond.false.3367
  %746 = load i32, i32* %height, align 4
  %cmp3372 = icmp slt i32 %746, 0
  br i1 %cmp3372, label %cond.true.3374, label %cond.false.3409

cond.true.3374:                                   ; preds = %cond.false.3371
  %747 = load i32, i32* %height, align 4
  %748 = load i32, i32* %area, align 4
  %mul3375 = mul nsw i32 0, %748
  %749 = load i32, i32* %height, align 4
  %add3376 = add nsw i32 %mul3375, %749
  %mul3377 = mul nsw i32 0, %add3376
  %sub3378 = sub nsw i32 %mul3377, 1
  %cmp3379 = icmp slt i32 %sub3378, 0
  br i1 %cmp3379, label %cond.true.3381, label %cond.false.3399

cond.true.3381:                                   ; preds = %cond.true.3374
  %750 = load i32, i32* %area, align 4
  %mul3382 = mul nsw i32 0, %750
  %751 = load i32, i32* %height, align 4
  %add3383 = add nsw i32 %mul3382, %751
  %mul3384 = mul nsw i32 0, %add3383
  %add3385 = add nsw i32 %mul3384, 0
  %neg3386 = xor i32 %add3385, -1
  %cmp3387 = icmp eq i32 %neg3386, -1
  %conv3388 = zext i1 %cmp3387 to i32
  %sub3389 = sub nsw i32 0, %conv3388
  %752 = load i32, i32* %area, align 4
  %mul3390 = mul nsw i32 0, %752
  %753 = load i32, i32* %height, align 4
  %add3391 = add nsw i32 %mul3390, %753
  %mul3392 = mul nsw i32 0, %add3391
  %add3393 = add nsw i32 %mul3392, 1
  %shl3394 = shl i32 %add3393, 30
  %sub3395 = sub nsw i32 %shl3394, 1
  %mul3396 = mul nsw i32 %sub3395, 2
  %add3397 = add nsw i32 %mul3396, 1
  %sub3398 = sub nsw i32 %sub3389, %add3397
  br label %cond.end.3404

cond.false.3399:                                  ; preds = %cond.true.3374
  %754 = load i32, i32* %area, align 4
  %mul3400 = mul nsw i32 0, %754
  %755 = load i32, i32* %height, align 4
  %add3401 = add nsw i32 %mul3400, %755
  %mul3402 = mul nsw i32 0, %add3401
  %add3403 = add nsw i32 %mul3402, 0
  br label %cond.end.3404

cond.end.3404:                                    ; preds = %cond.false.3399, %cond.true.3381
  %cond3405 = phi i32 [ %sub3398, %cond.true.3381 ], [ %add3403, %cond.false.3399 ]
  %756 = load i32, i32* %area, align 4
  %div3406 = sdiv i32 %cond3405, %756
  %cmp3407 = icmp slt i32 %747, %div3406
  br i1 %cmp3407, label %cond.true.3449, label %lor.lhs.false.3435

cond.false.3409:                                  ; preds = %cond.false.3371
  %757 = load i32, i32* %area, align 4
  %mul3410 = mul nsw i32 0, %757
  %758 = load i32, i32* %height, align 4
  %add3411 = add nsw i32 %mul3410, %758
  %mul3412 = mul nsw i32 0, %add3411
  %sub3413 = sub nsw i32 %mul3412, 1
  %cmp3414 = icmp slt i32 %sub3413, 0
  br i1 %cmp3414, label %cond.true.3416, label %cond.false.3425

cond.true.3416:                                   ; preds = %cond.false.3409
  %759 = load i32, i32* %area, align 4
  %mul3417 = mul nsw i32 0, %759
  %760 = load i32, i32* %height, align 4
  %add3418 = add nsw i32 %mul3417, %760
  %mul3419 = mul nsw i32 0, %add3418
  %add3420 = add nsw i32 %mul3419, 1
  %shl3421 = shl i32 %add3420, 30
  %sub3422 = sub nsw i32 %shl3421, 1
  %mul3423 = mul nsw i32 %sub3422, 2
  %add3424 = add nsw i32 %mul3423, 1
  br label %cond.end.3430

cond.false.3425:                                  ; preds = %cond.false.3409
  %761 = load i32, i32* %area, align 4
  %mul3426 = mul nsw i32 0, %761
  %762 = load i32, i32* %height, align 4
  %add3427 = add nsw i32 %mul3426, %762
  %mul3428 = mul nsw i32 0, %add3427
  %sub3429 = sub nsw i32 %mul3428, 1
  br label %cond.end.3430

cond.end.3430:                                    ; preds = %cond.false.3425, %cond.true.3416
  %cond3431 = phi i32 [ %add3424, %cond.true.3416 ], [ %sub3429, %cond.false.3425 ]
  %763 = load i32, i32* %area, align 4
  %div3432 = sdiv i32 %cond3431, %763
  %764 = load i32, i32* %height, align 4
  %cmp3433 = icmp slt i32 %div3432, %764
  br i1 %cmp3433, label %cond.true.3449, label %lor.lhs.false.3435

lor.lhs.false.3435:                               ; preds = %cond.end.3430, %cond.end.3404, %cond.true.3370, %cond.end.3362, %cond.true.3331, %cond.end.3323
  %765 = load i32, i32* %height, align 4
  %766 = load i32, i32* %area, align 4
  %mul3436 = mul nsw i32 %765, %766
  %mul3437 = mul nsw i32 0, %mul3436
  %sub3438 = sub nsw i32 %mul3437, 1
  %cmp3439 = icmp slt i32 %sub3438, 0
  br i1 %cmp3439, label %land.lhs.true.3441, label %lor.lhs.false.3445

land.lhs.true.3441:                               ; preds = %lor.lhs.false.3435
  %767 = load i32, i32* %height, align 4
  %768 = load i32, i32* %area, align 4
  %mul3442 = mul nsw i32 %767, %768
  %cmp3443 = icmp slt i32 %mul3442, -2147483648
  br i1 %cmp3443, label %cond.true.3449, label %lor.lhs.false.3445

lor.lhs.false.3445:                               ; preds = %land.lhs.true.3441, %lor.lhs.false.3435
  %769 = load i32, i32* %height, align 4
  %770 = load i32, i32* %area, align 4
  %mul3446 = mul nsw i32 %769, %770
  %cmp3447 = icmp slt i32 2147483647, %mul3446
  br i1 %cmp3447, label %cond.true.3449, label %cond.false.3461

cond.true.3449:                                   ; preds = %lor.lhs.false.3445, %land.lhs.true.3441, %cond.end.3430, %cond.end.3404, %cond.true.3370, %cond.end.3362, %cond.true.3331, %cond.end.3323, %land.lhs.true.3293, %land.lhs.true.3287
  %771 = load i32, i32* %height, align 4
  %772 = load i32, i32* %area, align 4
  %mul3450 = mul i32 %771, %772
  %cmp3451 = icmp ule i32 %mul3450, 2147483647
  br i1 %cmp3451, label %cond.true.3453, label %cond.false.3455

cond.true.3453:                                   ; preds = %cond.true.3449
  %773 = load i32, i32* %height, align 4
  %774 = load i32, i32* %area, align 4
  %mul3454 = mul i32 %773, %774
  br label %cond.end.3459

cond.false.3455:                                  ; preds = %cond.true.3449
  %775 = load i32, i32* %height, align 4
  %776 = load i32, i32* %area, align 4
  %mul3456 = mul i32 %775, %776
  %sub3457 = sub i32 %mul3456, -2147483648
  %add3458 = add nsw i32 %sub3457, -2147483648
  br label %cond.end.3459

cond.end.3459:                                    ; preds = %cond.false.3455, %cond.true.3453
  %cond3460 = phi i32 [ %mul3454, %cond.true.3453 ], [ %add3458, %cond.false.3455 ]
  store i32 %cond3460, i32* %area, align 4
  br i1 true, label %if.then.4556, label %lor.lhs.false.4552

cond.false.3461:                                  ; preds = %lor.lhs.false.3445
  %777 = load i32, i32* %height, align 4
  %778 = load i32, i32* %area, align 4
  %mul3462 = mul i32 %777, %778
  %cmp3463 = icmp ule i32 %mul3462, 2147483647
  br i1 %cmp3463, label %cond.true.3465, label %cond.false.3467

cond.true.3465:                                   ; preds = %cond.false.3461
  %779 = load i32, i32* %height, align 4
  %780 = load i32, i32* %area, align 4
  %mul3466 = mul i32 %779, %780
  br label %cond.end.3471

cond.false.3467:                                  ; preds = %cond.false.3461
  %781 = load i32, i32* %height, align 4
  %782 = load i32, i32* %area, align 4
  %mul3468 = mul i32 %781, %782
  %sub3469 = sub i32 %mul3468, -2147483648
  %add3470 = add nsw i32 %sub3469, -2147483648
  br label %cond.end.3471

cond.end.3471:                                    ; preds = %cond.false.3467, %cond.true.3465
  %cond3472 = phi i32 [ %mul3466, %cond.true.3465 ], [ %add3470, %cond.false.3467 ]
  store i32 %cond3472, i32* %area, align 4
  br i1 false, label %if.then.4556, label %lor.lhs.false.4552

cond.false.3473:                                  ; preds = %cond.false.3025
  br i1 false, label %cond.true.3474, label %cond.false.4013

cond.true.3474:                                   ; preds = %cond.false.3473
  br i1 true, label %cond.true.3475, label %cond.false.3774

cond.true.3475:                                   ; preds = %cond.true.3474
  %783 = load i32, i32* %area, align 4
  %conv3476 = sext i32 %783 to i64
  %mul3477 = mul nsw i64 0, %conv3476
  %784 = load i32, i32* %height, align 4
  %conv3478 = sext i32 %784 to i64
  %add3479 = add nsw i64 %mul3477, %conv3478
  %mul3480 = mul nsw i64 0, %add3479
  %sub3481 = sub nsw i64 %mul3480, 1
  %cmp3482 = icmp slt i64 %sub3481, 0
  br i1 %cmp3482, label %cond.true.3484, label %cond.false.3507

cond.true.3484:                                   ; preds = %cond.true.3475
  %785 = load i32, i32* %area, align 4
  %conv3485 = sext i32 %785 to i64
  %mul3486 = mul nsw i64 0, %conv3485
  %786 = load i32, i32* %height, align 4
  %conv3487 = sext i32 %786 to i64
  %add3488 = add nsw i64 %mul3486, %conv3487
  %mul3489 = mul nsw i64 0, %add3488
  %add3490 = add nsw i64 %mul3489, 0
  %neg3491 = xor i64 %add3490, -1
  %cmp3492 = icmp eq i64 %neg3491, -1
  %conv3493 = zext i1 %cmp3492 to i32
  %sub3494 = sub nsw i32 0, %conv3493
  %conv3495 = sext i32 %sub3494 to i64
  %787 = load i32, i32* %area, align 4
  %conv3496 = sext i32 %787 to i64
  %mul3497 = mul nsw i64 0, %conv3496
  %788 = load i32, i32* %height, align 4
  %conv3498 = sext i32 %788 to i64
  %add3499 = add nsw i64 %mul3497, %conv3498
  %mul3500 = mul nsw i64 0, %add3499
  %add3501 = add nsw i64 %mul3500, 1
  %shl3502 = shl i64 %add3501, 62
  %sub3503 = sub nsw i64 %shl3502, 1
  %mul3504 = mul nsw i64 %sub3503, 2
  %add3505 = add nsw i64 %mul3504, 1
  %sub3506 = sub nsw i64 %conv3495, %add3505
  br label %cond.end.3514

cond.false.3507:                                  ; preds = %cond.true.3475
  %789 = load i32, i32* %area, align 4
  %conv3508 = sext i32 %789 to i64
  %mul3509 = mul nsw i64 0, %conv3508
  %790 = load i32, i32* %height, align 4
  %conv3510 = sext i32 %790 to i64
  %add3511 = add nsw i64 %mul3509, %conv3510
  %mul3512 = mul nsw i64 0, %add3511
  %add3513 = add nsw i64 %mul3512, 0
  br label %cond.end.3514

cond.end.3514:                                    ; preds = %cond.false.3507, %cond.true.3484
  %cond3515 = phi i64 [ %sub3506, %cond.true.3484 ], [ %add3513, %cond.false.3507 ]
  %cmp3516 = icmp eq i64 %cond3515, 0
  br i1 %cmp3516, label %land.lhs.true.3518, label %lor.lhs.false.3534

land.lhs.true.3518:                               ; preds = %cond.end.3514
  %791 = load i32, i32* %height, align 4
  %conv3519 = sext i32 %791 to i64
  %cmp3520 = icmp slt i64 %conv3519, 0
  br i1 %cmp3520, label %land.lhs.true.3522, label %lor.lhs.false.3526

land.lhs.true.3522:                               ; preds = %land.lhs.true.3518
  %792 = load i32, i32* %area, align 4
  %conv3523 = sext i32 %792 to i64
  %cmp3524 = icmp slt i64 0, %conv3523
  br i1 %cmp3524, label %cond.true.3736, label %lor.lhs.false.3526

lor.lhs.false.3526:                               ; preds = %land.lhs.true.3522, %land.lhs.true.3518
  %793 = load i32, i32* %area, align 4
  %conv3527 = sext i32 %793 to i64
  %cmp3528 = icmp slt i64 %conv3527, 0
  br i1 %cmp3528, label %land.lhs.true.3530, label %lor.lhs.false.3534

land.lhs.true.3530:                               ; preds = %lor.lhs.false.3526
  %794 = load i32, i32* %height, align 4
  %conv3531 = sext i32 %794 to i64
  %cmp3532 = icmp slt i64 0, %conv3531
  br i1 %cmp3532, label %cond.true.3736, label %lor.lhs.false.3534

lor.lhs.false.3534:                               ; preds = %land.lhs.true.3530, %lor.lhs.false.3526, %cond.end.3514
  %795 = load i32, i32* %area, align 4
  %conv3535 = sext i32 %795 to i64
  %cmp3536 = icmp slt i64 %conv3535, 0
  br i1 %cmp3536, label %cond.true.3538, label %cond.false.3627

cond.true.3538:                                   ; preds = %lor.lhs.false.3534
  %796 = load i32, i32* %height, align 4
  %conv3539 = sext i32 %796 to i64
  %cmp3540 = icmp slt i64 %conv3539, 0
  br i1 %cmp3540, label %cond.true.3542, label %cond.false.3576

cond.true.3542:                                   ; preds = %cond.true.3538
  %797 = load i32, i32* %height, align 4
  %conv3543 = sext i32 %797 to i64
  %798 = load i32, i32* %area, align 4
  %conv3544 = sext i32 %798 to i64
  %mul3545 = mul nsw i64 0, %conv3544
  %799 = load i32, i32* %height, align 4
  %conv3546 = sext i32 %799 to i64
  %add3547 = add nsw i64 %mul3545, %conv3546
  %mul3548 = mul nsw i64 0, %add3547
  %sub3549 = sub nsw i64 %mul3548, 1
  %cmp3550 = icmp slt i64 %sub3549, 0
  br i1 %cmp3550, label %cond.true.3552, label %cond.false.3563

cond.true.3552:                                   ; preds = %cond.true.3542
  %800 = load i32, i32* %area, align 4
  %conv3553 = sext i32 %800 to i64
  %mul3554 = mul nsw i64 0, %conv3553
  %801 = load i32, i32* %height, align 4
  %conv3555 = sext i32 %801 to i64
  %add3556 = add nsw i64 %mul3554, %conv3555
  %mul3557 = mul nsw i64 0, %add3556
  %add3558 = add nsw i64 %mul3557, 1
  %shl3559 = shl i64 %add3558, 62
  %sub3560 = sub nsw i64 %shl3559, 1
  %mul3561 = mul nsw i64 %sub3560, 2
  %add3562 = add nsw i64 %mul3561, 1
  br label %cond.end.3570

cond.false.3563:                                  ; preds = %cond.true.3542
  %802 = load i32, i32* %area, align 4
  %conv3564 = sext i32 %802 to i64
  %mul3565 = mul nsw i64 0, %conv3564
  %803 = load i32, i32* %height, align 4
  %conv3566 = sext i32 %803 to i64
  %add3567 = add nsw i64 %mul3565, %conv3566
  %mul3568 = mul nsw i64 0, %add3567
  %sub3569 = sub nsw i64 %mul3568, 1
  br label %cond.end.3570

cond.end.3570:                                    ; preds = %cond.false.3563, %cond.true.3552
  %cond3571 = phi i64 [ %add3562, %cond.true.3552 ], [ %sub3569, %cond.false.3563 ]
  %804 = load i32, i32* %area, align 4
  %conv3572 = sext i32 %804 to i64
  %div3573 = sdiv i64 %cond3571, %conv3572
  %cmp3574 = icmp slt i64 %conv3543, %div3573
  br i1 %cmp3574, label %cond.true.3736, label %lor.lhs.false.3716

cond.false.3576:                                  ; preds = %cond.true.3538
  %805 = load i32, i32* %area, align 4
  %conv3577 = sext i32 %805 to i64
  %cmp3578 = icmp eq i64 %conv3577, -1
  br i1 %cmp3578, label %cond.true.3580, label %cond.false.3581

cond.true.3580:                                   ; preds = %cond.false.3576
  br i1 false, label %cond.true.3736, label %lor.lhs.false.3716

cond.false.3581:                                  ; preds = %cond.false.3576
  %806 = load i32, i32* %area, align 4
  %conv3582 = sext i32 %806 to i64
  %mul3583 = mul nsw i64 0, %conv3582
  %807 = load i32, i32* %height, align 4
  %conv3584 = sext i32 %807 to i64
  %add3585 = add nsw i64 %mul3583, %conv3584
  %mul3586 = mul nsw i64 0, %add3585
  %sub3587 = sub nsw i64 %mul3586, 1
  %cmp3588 = icmp slt i64 %sub3587, 0
  br i1 %cmp3588, label %cond.true.3590, label %cond.false.3613

cond.true.3590:                                   ; preds = %cond.false.3581
  %808 = load i32, i32* %area, align 4
  %conv3591 = sext i32 %808 to i64
  %mul3592 = mul nsw i64 0, %conv3591
  %809 = load i32, i32* %height, align 4
  %conv3593 = sext i32 %809 to i64
  %add3594 = add nsw i64 %mul3592, %conv3593
  %mul3595 = mul nsw i64 0, %add3594
  %add3596 = add nsw i64 %mul3595, 0
  %neg3597 = xor i64 %add3596, -1
  %cmp3598 = icmp eq i64 %neg3597, -1
  %conv3599 = zext i1 %cmp3598 to i32
  %sub3600 = sub nsw i32 0, %conv3599
  %conv3601 = sext i32 %sub3600 to i64
  %810 = load i32, i32* %area, align 4
  %conv3602 = sext i32 %810 to i64
  %mul3603 = mul nsw i64 0, %conv3602
  %811 = load i32, i32* %height, align 4
  %conv3604 = sext i32 %811 to i64
  %add3605 = add nsw i64 %mul3603, %conv3604
  %mul3606 = mul nsw i64 0, %add3605
  %add3607 = add nsw i64 %mul3606, 1
  %shl3608 = shl i64 %add3607, 62
  %sub3609 = sub nsw i64 %shl3608, 1
  %mul3610 = mul nsw i64 %sub3609, 2
  %add3611 = add nsw i64 %mul3610, 1
  %sub3612 = sub nsw i64 %conv3601, %add3611
  br label %cond.end.3620

cond.false.3613:                                  ; preds = %cond.false.3581
  %812 = load i32, i32* %area, align 4
  %conv3614 = sext i32 %812 to i64
  %mul3615 = mul nsw i64 0, %conv3614
  %813 = load i32, i32* %height, align 4
  %conv3616 = sext i32 %813 to i64
  %add3617 = add nsw i64 %mul3615, %conv3616
  %mul3618 = mul nsw i64 0, %add3617
  %add3619 = add nsw i64 %mul3618, 0
  br label %cond.end.3620

cond.end.3620:                                    ; preds = %cond.false.3613, %cond.true.3590
  %cond3621 = phi i64 [ %sub3612, %cond.true.3590 ], [ %add3619, %cond.false.3613 ]
  %814 = load i32, i32* %area, align 4
  %conv3622 = sext i32 %814 to i64
  %div3623 = sdiv i64 %cond3621, %conv3622
  %815 = load i32, i32* %height, align 4
  %conv3624 = sext i32 %815 to i64
  %cmp3625 = icmp slt i64 %div3623, %conv3624
  br i1 %cmp3625, label %cond.true.3736, label %lor.lhs.false.3716

cond.false.3627:                                  ; preds = %lor.lhs.false.3534
  %816 = load i32, i32* %area, align 4
  %conv3628 = sext i32 %816 to i64
  %cmp3629 = icmp eq i64 %conv3628, 0
  br i1 %cmp3629, label %cond.true.3631, label %cond.false.3632

cond.true.3631:                                   ; preds = %cond.false.3627
  br i1 false, label %cond.true.3736, label %lor.lhs.false.3716

cond.false.3632:                                  ; preds = %cond.false.3627
  %817 = load i32, i32* %height, align 4
  %conv3633 = sext i32 %817 to i64
  %cmp3634 = icmp slt i64 %conv3633, 0
  br i1 %cmp3634, label %cond.true.3636, label %cond.false.3682

cond.true.3636:                                   ; preds = %cond.false.3632
  %818 = load i32, i32* %height, align 4
  %conv3637 = sext i32 %818 to i64
  %819 = load i32, i32* %area, align 4
  %conv3638 = sext i32 %819 to i64
  %mul3639 = mul nsw i64 0, %conv3638
  %820 = load i32, i32* %height, align 4
  %conv3640 = sext i32 %820 to i64
  %add3641 = add nsw i64 %mul3639, %conv3640
  %mul3642 = mul nsw i64 0, %add3641
  %sub3643 = sub nsw i64 %mul3642, 1
  %cmp3644 = icmp slt i64 %sub3643, 0
  br i1 %cmp3644, label %cond.true.3646, label %cond.false.3669

cond.true.3646:                                   ; preds = %cond.true.3636
  %821 = load i32, i32* %area, align 4
  %conv3647 = sext i32 %821 to i64
  %mul3648 = mul nsw i64 0, %conv3647
  %822 = load i32, i32* %height, align 4
  %conv3649 = sext i32 %822 to i64
  %add3650 = add nsw i64 %mul3648, %conv3649
  %mul3651 = mul nsw i64 0, %add3650
  %add3652 = add nsw i64 %mul3651, 0
  %neg3653 = xor i64 %add3652, -1
  %cmp3654 = icmp eq i64 %neg3653, -1
  %conv3655 = zext i1 %cmp3654 to i32
  %sub3656 = sub nsw i32 0, %conv3655
  %conv3657 = sext i32 %sub3656 to i64
  %823 = load i32, i32* %area, align 4
  %conv3658 = sext i32 %823 to i64
  %mul3659 = mul nsw i64 0, %conv3658
  %824 = load i32, i32* %height, align 4
  %conv3660 = sext i32 %824 to i64
  %add3661 = add nsw i64 %mul3659, %conv3660
  %mul3662 = mul nsw i64 0, %add3661
  %add3663 = add nsw i64 %mul3662, 1
  %shl3664 = shl i64 %add3663, 62
  %sub3665 = sub nsw i64 %shl3664, 1
  %mul3666 = mul nsw i64 %sub3665, 2
  %add3667 = add nsw i64 %mul3666, 1
  %sub3668 = sub nsw i64 %conv3657, %add3667
  br label %cond.end.3676

cond.false.3669:                                  ; preds = %cond.true.3636
  %825 = load i32, i32* %area, align 4
  %conv3670 = sext i32 %825 to i64
  %mul3671 = mul nsw i64 0, %conv3670
  %826 = load i32, i32* %height, align 4
  %conv3672 = sext i32 %826 to i64
  %add3673 = add nsw i64 %mul3671, %conv3672
  %mul3674 = mul nsw i64 0, %add3673
  %add3675 = add nsw i64 %mul3674, 0
  br label %cond.end.3676

cond.end.3676:                                    ; preds = %cond.false.3669, %cond.true.3646
  %cond3677 = phi i64 [ %sub3668, %cond.true.3646 ], [ %add3675, %cond.false.3669 ]
  %827 = load i32, i32* %area, align 4
  %conv3678 = sext i32 %827 to i64
  %div3679 = sdiv i64 %cond3677, %conv3678
  %cmp3680 = icmp slt i64 %conv3637, %div3679
  br i1 %cmp3680, label %cond.true.3736, label %lor.lhs.false.3716

cond.false.3682:                                  ; preds = %cond.false.3632
  %828 = load i32, i32* %area, align 4
  %conv3683 = sext i32 %828 to i64
  %mul3684 = mul nsw i64 0, %conv3683
  %829 = load i32, i32* %height, align 4
  %conv3685 = sext i32 %829 to i64
  %add3686 = add nsw i64 %mul3684, %conv3685
  %mul3687 = mul nsw i64 0, %add3686
  %sub3688 = sub nsw i64 %mul3687, 1
  %cmp3689 = icmp slt i64 %sub3688, 0
  br i1 %cmp3689, label %cond.true.3691, label %cond.false.3702

cond.true.3691:                                   ; preds = %cond.false.3682
  %830 = load i32, i32* %area, align 4
  %conv3692 = sext i32 %830 to i64
  %mul3693 = mul nsw i64 0, %conv3692
  %831 = load i32, i32* %height, align 4
  %conv3694 = sext i32 %831 to i64
  %add3695 = add nsw i64 %mul3693, %conv3694
  %mul3696 = mul nsw i64 0, %add3695
  %add3697 = add nsw i64 %mul3696, 1
  %shl3698 = shl i64 %add3697, 62
  %sub3699 = sub nsw i64 %shl3698, 1
  %mul3700 = mul nsw i64 %sub3699, 2
  %add3701 = add nsw i64 %mul3700, 1
  br label %cond.end.3709

cond.false.3702:                                  ; preds = %cond.false.3682
  %832 = load i32, i32* %area, align 4
  %conv3703 = sext i32 %832 to i64
  %mul3704 = mul nsw i64 0, %conv3703
  %833 = load i32, i32* %height, align 4
  %conv3705 = sext i32 %833 to i64
  %add3706 = add nsw i64 %mul3704, %conv3705
  %mul3707 = mul nsw i64 0, %add3706
  %sub3708 = sub nsw i64 %mul3707, 1
  br label %cond.end.3709

cond.end.3709:                                    ; preds = %cond.false.3702, %cond.true.3691
  %cond3710 = phi i64 [ %add3701, %cond.true.3691 ], [ %sub3708, %cond.false.3702 ]
  %834 = load i32, i32* %area, align 4
  %conv3711 = sext i32 %834 to i64
  %div3712 = sdiv i64 %cond3710, %conv3711
  %835 = load i32, i32* %height, align 4
  %conv3713 = sext i32 %835 to i64
  %cmp3714 = icmp slt i64 %div3712, %conv3713
  br i1 %cmp3714, label %cond.true.3736, label %lor.lhs.false.3716

lor.lhs.false.3716:                               ; preds = %cond.end.3709, %cond.end.3676, %cond.true.3631, %cond.end.3620, %cond.true.3580, %cond.end.3570
  %836 = load i32, i32* %height, align 4
  %conv3717 = sext i32 %836 to i64
  %837 = load i32, i32* %area, align 4
  %conv3718 = sext i32 %837 to i64
  %mul3719 = mul nsw i64 %conv3717, %conv3718
  %mul3720 = mul nsw i64 0, %mul3719
  %sub3721 = sub nsw i64 %mul3720, 1
  %cmp3722 = icmp slt i64 %sub3721, 0
  br i1 %cmp3722, label %land.lhs.true.3724, label %lor.lhs.false.3730

land.lhs.true.3724:                               ; preds = %lor.lhs.false.3716
  %838 = load i32, i32* %height, align 4
  %conv3725 = sext i32 %838 to i64
  %839 = load i32, i32* %area, align 4
  %conv3726 = sext i32 %839 to i64
  %mul3727 = mul nsw i64 %conv3725, %conv3726
  %cmp3728 = icmp slt i64 %mul3727, -9223372036854775808
  br i1 %cmp3728, label %cond.true.3736, label %lor.lhs.false.3730

lor.lhs.false.3730:                               ; preds = %land.lhs.true.3724, %lor.lhs.false.3716
  %840 = load i32, i32* %height, align 4
  %conv3731 = sext i32 %840 to i64
  %841 = load i32, i32* %area, align 4
  %conv3732 = sext i32 %841 to i64
  %mul3733 = mul nsw i64 %conv3731, %conv3732
  %cmp3734 = icmp slt i64 9223372036854775807, %mul3733
  br i1 %cmp3734, label %cond.true.3736, label %cond.false.3755

cond.true.3736:                                   ; preds = %lor.lhs.false.3730, %land.lhs.true.3724, %cond.end.3709, %cond.end.3676, %cond.true.3631, %cond.end.3620, %cond.true.3580, %cond.end.3570, %land.lhs.true.3530, %land.lhs.true.3522
  %842 = load i32, i32* %height, align 4
  %conv3737 = sext i32 %842 to i64
  %843 = load i32, i32* %area, align 4
  %conv3738 = sext i32 %843 to i64
  %mul3739 = mul i64 %conv3737, %conv3738
  %cmp3740 = icmp ule i64 %mul3739, 9223372036854775807
  br i1 %cmp3740, label %cond.true.3742, label %cond.false.3746

cond.true.3742:                                   ; preds = %cond.true.3736
  %844 = load i32, i32* %height, align 4
  %conv3743 = sext i32 %844 to i64
  %845 = load i32, i32* %area, align 4
  %conv3744 = sext i32 %845 to i64
  %mul3745 = mul i64 %conv3743, %conv3744
  br label %cond.end.3752

cond.false.3746:                                  ; preds = %cond.true.3736
  %846 = load i32, i32* %height, align 4
  %conv3747 = sext i32 %846 to i64
  %847 = load i32, i32* %area, align 4
  %conv3748 = sext i32 %847 to i64
  %mul3749 = mul i64 %conv3747, %conv3748
  %sub3750 = sub i64 %mul3749, -9223372036854775808
  %add3751 = add nsw i64 %sub3750, -9223372036854775808
  br label %cond.end.3752

cond.end.3752:                                    ; preds = %cond.false.3746, %cond.true.3742
  %cond3753 = phi i64 [ %mul3745, %cond.true.3742 ], [ %add3751, %cond.false.3746 ]
  %conv3754 = trunc i64 %cond3753 to i32
  store i32 %conv3754, i32* %area, align 4
  br i1 true, label %if.then.4556, label %lor.lhs.false.4552

cond.false.3755:                                  ; preds = %lor.lhs.false.3730
  %848 = load i32, i32* %height, align 4
  %conv3756 = sext i32 %848 to i64
  %849 = load i32, i32* %area, align 4
  %conv3757 = sext i32 %849 to i64
  %mul3758 = mul i64 %conv3756, %conv3757
  %cmp3759 = icmp ule i64 %mul3758, 9223372036854775807
  br i1 %cmp3759, label %cond.true.3761, label %cond.false.3765

cond.true.3761:                                   ; preds = %cond.false.3755
  %850 = load i32, i32* %height, align 4
  %conv3762 = sext i32 %850 to i64
  %851 = load i32, i32* %area, align 4
  %conv3763 = sext i32 %851 to i64
  %mul3764 = mul i64 %conv3762, %conv3763
  br label %cond.end.3771

cond.false.3765:                                  ; preds = %cond.false.3755
  %852 = load i32, i32* %height, align 4
  %conv3766 = sext i32 %852 to i64
  %853 = load i32, i32* %area, align 4
  %conv3767 = sext i32 %853 to i64
  %mul3768 = mul i64 %conv3766, %conv3767
  %sub3769 = sub i64 %mul3768, -9223372036854775808
  %add3770 = add nsw i64 %sub3769, -9223372036854775808
  br label %cond.end.3771

cond.end.3771:                                    ; preds = %cond.false.3765, %cond.true.3761
  %cond3772 = phi i64 [ %mul3764, %cond.true.3761 ], [ %add3770, %cond.false.3765 ]
  %conv3773 = trunc i64 %cond3772 to i32
  store i32 %conv3773, i32* %area, align 4
  br i1 false, label %if.then.4556, label %lor.lhs.false.4552

cond.false.3774:                                  ; preds = %cond.true.3474
  %854 = load i32, i32* %area, align 4
  %mul3775 = mul nsw i32 0, %854
  %855 = load i32, i32* %height, align 4
  %add3776 = add nsw i32 %mul3775, %855
  %mul3777 = mul nsw i32 0, %add3776
  %sub3778 = sub nsw i32 %mul3777, 1
  %cmp3779 = icmp slt i32 %sub3778, 0
  br i1 %cmp3779, label %cond.true.3781, label %cond.false.3799

cond.true.3781:                                   ; preds = %cond.false.3774
  %856 = load i32, i32* %area, align 4
  %mul3782 = mul nsw i32 0, %856
  %857 = load i32, i32* %height, align 4
  %add3783 = add nsw i32 %mul3782, %857
  %mul3784 = mul nsw i32 0, %add3783
  %add3785 = add nsw i32 %mul3784, 0
  %neg3786 = xor i32 %add3785, -1
  %cmp3787 = icmp eq i32 %neg3786, -1
  %conv3788 = zext i1 %cmp3787 to i32
  %sub3789 = sub nsw i32 0, %conv3788
  %858 = load i32, i32* %area, align 4
  %mul3790 = mul nsw i32 0, %858
  %859 = load i32, i32* %height, align 4
  %add3791 = add nsw i32 %mul3790, %859
  %mul3792 = mul nsw i32 0, %add3791
  %add3793 = add nsw i32 %mul3792, 1
  %shl3794 = shl i32 %add3793, 30
  %sub3795 = sub nsw i32 %shl3794, 1
  %mul3796 = mul nsw i32 %sub3795, 2
  %add3797 = add nsw i32 %mul3796, 1
  %sub3798 = sub nsw i32 %sub3789, %add3797
  br label %cond.end.3804

cond.false.3799:                                  ; preds = %cond.false.3774
  %860 = load i32, i32* %area, align 4
  %mul3800 = mul nsw i32 0, %860
  %861 = load i32, i32* %height, align 4
  %add3801 = add nsw i32 %mul3800, %861
  %mul3802 = mul nsw i32 0, %add3801
  %add3803 = add nsw i32 %mul3802, 0
  br label %cond.end.3804

cond.end.3804:                                    ; preds = %cond.false.3799, %cond.true.3781
  %cond3805 = phi i32 [ %sub3798, %cond.true.3781 ], [ %add3803, %cond.false.3799 ]
  %cmp3806 = icmp eq i32 %cond3805, 0
  br i1 %cmp3806, label %land.lhs.true.3808, label %lor.lhs.false.3820

land.lhs.true.3808:                               ; preds = %cond.end.3804
  %862 = load i32, i32* %height, align 4
  %cmp3809 = icmp slt i32 %862, 0
  br i1 %cmp3809, label %land.lhs.true.3811, label %lor.lhs.false.3814

land.lhs.true.3811:                               ; preds = %land.lhs.true.3808
  %863 = load i32, i32* %area, align 4
  %cmp3812 = icmp slt i32 0, %863
  br i1 %cmp3812, label %cond.true.3975, label %lor.lhs.false.3814

lor.lhs.false.3814:                               ; preds = %land.lhs.true.3811, %land.lhs.true.3808
  %864 = load i32, i32* %area, align 4
  %cmp3815 = icmp slt i32 %864, 0
  br i1 %cmp3815, label %land.lhs.true.3817, label %lor.lhs.false.3820

land.lhs.true.3817:                               ; preds = %lor.lhs.false.3814
  %865 = load i32, i32* %height, align 4
  %cmp3818 = icmp slt i32 0, %865
  br i1 %cmp3818, label %cond.true.3975, label %lor.lhs.false.3820

lor.lhs.false.3820:                               ; preds = %land.lhs.true.3817, %lor.lhs.false.3814, %cond.end.3804
  %866 = load i32, i32* %area, align 4
  %cmp3821 = icmp slt i32 %866, 0
  br i1 %cmp3821, label %cond.true.3823, label %cond.false.3891

cond.true.3823:                                   ; preds = %lor.lhs.false.3820
  %867 = load i32, i32* %height, align 4
  %cmp3824 = icmp slt i32 %867, 0
  br i1 %cmp3824, label %cond.true.3826, label %cond.false.3852

cond.true.3826:                                   ; preds = %cond.true.3823
  %868 = load i32, i32* %height, align 4
  %869 = load i32, i32* %area, align 4
  %mul3827 = mul nsw i32 0, %869
  %870 = load i32, i32* %height, align 4
  %add3828 = add nsw i32 %mul3827, %870
  %mul3829 = mul nsw i32 0, %add3828
  %sub3830 = sub nsw i32 %mul3829, 1
  %cmp3831 = icmp slt i32 %sub3830, 0
  br i1 %cmp3831, label %cond.true.3833, label %cond.false.3842

cond.true.3833:                                   ; preds = %cond.true.3826
  %871 = load i32, i32* %area, align 4
  %mul3834 = mul nsw i32 0, %871
  %872 = load i32, i32* %height, align 4
  %add3835 = add nsw i32 %mul3834, %872
  %mul3836 = mul nsw i32 0, %add3835
  %add3837 = add nsw i32 %mul3836, 1
  %shl3838 = shl i32 %add3837, 30
  %sub3839 = sub nsw i32 %shl3838, 1
  %mul3840 = mul nsw i32 %sub3839, 2
  %add3841 = add nsw i32 %mul3840, 1
  br label %cond.end.3847

cond.false.3842:                                  ; preds = %cond.true.3826
  %873 = load i32, i32* %area, align 4
  %mul3843 = mul nsw i32 0, %873
  %874 = load i32, i32* %height, align 4
  %add3844 = add nsw i32 %mul3843, %874
  %mul3845 = mul nsw i32 0, %add3844
  %sub3846 = sub nsw i32 %mul3845, 1
  br label %cond.end.3847

cond.end.3847:                                    ; preds = %cond.false.3842, %cond.true.3833
  %cond3848 = phi i32 [ %add3841, %cond.true.3833 ], [ %sub3846, %cond.false.3842 ]
  %875 = load i32, i32* %area, align 4
  %div3849 = sdiv i32 %cond3848, %875
  %cmp3850 = icmp slt i32 %868, %div3849
  br i1 %cmp3850, label %cond.true.3975, label %lor.lhs.false.3959

cond.false.3852:                                  ; preds = %cond.true.3823
  %876 = load i32, i32* %area, align 4
  %cmp3853 = icmp eq i32 %876, -1
  br i1 %cmp3853, label %cond.true.3855, label %cond.false.3856

cond.true.3855:                                   ; preds = %cond.false.3852
  br i1 false, label %cond.true.3975, label %lor.lhs.false.3959

cond.false.3856:                                  ; preds = %cond.false.3852
  %877 = load i32, i32* %area, align 4
  %mul3857 = mul nsw i32 0, %877
  %878 = load i32, i32* %height, align 4
  %add3858 = add nsw i32 %mul3857, %878
  %mul3859 = mul nsw i32 0, %add3858
  %sub3860 = sub nsw i32 %mul3859, 1
  %cmp3861 = icmp slt i32 %sub3860, 0
  br i1 %cmp3861, label %cond.true.3863, label %cond.false.3881

cond.true.3863:                                   ; preds = %cond.false.3856
  %879 = load i32, i32* %area, align 4
  %mul3864 = mul nsw i32 0, %879
  %880 = load i32, i32* %height, align 4
  %add3865 = add nsw i32 %mul3864, %880
  %mul3866 = mul nsw i32 0, %add3865
  %add3867 = add nsw i32 %mul3866, 0
  %neg3868 = xor i32 %add3867, -1
  %cmp3869 = icmp eq i32 %neg3868, -1
  %conv3870 = zext i1 %cmp3869 to i32
  %sub3871 = sub nsw i32 0, %conv3870
  %881 = load i32, i32* %area, align 4
  %mul3872 = mul nsw i32 0, %881
  %882 = load i32, i32* %height, align 4
  %add3873 = add nsw i32 %mul3872, %882
  %mul3874 = mul nsw i32 0, %add3873
  %add3875 = add nsw i32 %mul3874, 1
  %shl3876 = shl i32 %add3875, 30
  %sub3877 = sub nsw i32 %shl3876, 1
  %mul3878 = mul nsw i32 %sub3877, 2
  %add3879 = add nsw i32 %mul3878, 1
  %sub3880 = sub nsw i32 %sub3871, %add3879
  br label %cond.end.3886

cond.false.3881:                                  ; preds = %cond.false.3856
  %883 = load i32, i32* %area, align 4
  %mul3882 = mul nsw i32 0, %883
  %884 = load i32, i32* %height, align 4
  %add3883 = add nsw i32 %mul3882, %884
  %mul3884 = mul nsw i32 0, %add3883
  %add3885 = add nsw i32 %mul3884, 0
  br label %cond.end.3886

cond.end.3886:                                    ; preds = %cond.false.3881, %cond.true.3863
  %cond3887 = phi i32 [ %sub3880, %cond.true.3863 ], [ %add3885, %cond.false.3881 ]
  %885 = load i32, i32* %area, align 4
  %div3888 = sdiv i32 %cond3887, %885
  %886 = load i32, i32* %height, align 4
  %cmp3889 = icmp slt i32 %div3888, %886
  br i1 %cmp3889, label %cond.true.3975, label %lor.lhs.false.3959

cond.false.3891:                                  ; preds = %lor.lhs.false.3820
  %887 = load i32, i32* %area, align 4
  %cmp3892 = icmp eq i32 %887, 0
  br i1 %cmp3892, label %cond.true.3894, label %cond.false.3895

cond.true.3894:                                   ; preds = %cond.false.3891
  br i1 false, label %cond.true.3975, label %lor.lhs.false.3959

cond.false.3895:                                  ; preds = %cond.false.3891
  %888 = load i32, i32* %height, align 4
  %cmp3896 = icmp slt i32 %888, 0
  br i1 %cmp3896, label %cond.true.3898, label %cond.false.3933

cond.true.3898:                                   ; preds = %cond.false.3895
  %889 = load i32, i32* %height, align 4
  %890 = load i32, i32* %area, align 4
  %mul3899 = mul nsw i32 0, %890
  %891 = load i32, i32* %height, align 4
  %add3900 = add nsw i32 %mul3899, %891
  %mul3901 = mul nsw i32 0, %add3900
  %sub3902 = sub nsw i32 %mul3901, 1
  %cmp3903 = icmp slt i32 %sub3902, 0
  br i1 %cmp3903, label %cond.true.3905, label %cond.false.3923

cond.true.3905:                                   ; preds = %cond.true.3898
  %892 = load i32, i32* %area, align 4
  %mul3906 = mul nsw i32 0, %892
  %893 = load i32, i32* %height, align 4
  %add3907 = add nsw i32 %mul3906, %893
  %mul3908 = mul nsw i32 0, %add3907
  %add3909 = add nsw i32 %mul3908, 0
  %neg3910 = xor i32 %add3909, -1
  %cmp3911 = icmp eq i32 %neg3910, -1
  %conv3912 = zext i1 %cmp3911 to i32
  %sub3913 = sub nsw i32 0, %conv3912
  %894 = load i32, i32* %area, align 4
  %mul3914 = mul nsw i32 0, %894
  %895 = load i32, i32* %height, align 4
  %add3915 = add nsw i32 %mul3914, %895
  %mul3916 = mul nsw i32 0, %add3915
  %add3917 = add nsw i32 %mul3916, 1
  %shl3918 = shl i32 %add3917, 30
  %sub3919 = sub nsw i32 %shl3918, 1
  %mul3920 = mul nsw i32 %sub3919, 2
  %add3921 = add nsw i32 %mul3920, 1
  %sub3922 = sub nsw i32 %sub3913, %add3921
  br label %cond.end.3928

cond.false.3923:                                  ; preds = %cond.true.3898
  %896 = load i32, i32* %area, align 4
  %mul3924 = mul nsw i32 0, %896
  %897 = load i32, i32* %height, align 4
  %add3925 = add nsw i32 %mul3924, %897
  %mul3926 = mul nsw i32 0, %add3925
  %add3927 = add nsw i32 %mul3926, 0
  br label %cond.end.3928

cond.end.3928:                                    ; preds = %cond.false.3923, %cond.true.3905
  %cond3929 = phi i32 [ %sub3922, %cond.true.3905 ], [ %add3927, %cond.false.3923 ]
  %898 = load i32, i32* %area, align 4
  %div3930 = sdiv i32 %cond3929, %898
  %cmp3931 = icmp slt i32 %889, %div3930
  br i1 %cmp3931, label %cond.true.3975, label %lor.lhs.false.3959

cond.false.3933:                                  ; preds = %cond.false.3895
  %899 = load i32, i32* %area, align 4
  %mul3934 = mul nsw i32 0, %899
  %900 = load i32, i32* %height, align 4
  %add3935 = add nsw i32 %mul3934, %900
  %mul3936 = mul nsw i32 0, %add3935
  %sub3937 = sub nsw i32 %mul3936, 1
  %cmp3938 = icmp slt i32 %sub3937, 0
  br i1 %cmp3938, label %cond.true.3940, label %cond.false.3949

cond.true.3940:                                   ; preds = %cond.false.3933
  %901 = load i32, i32* %area, align 4
  %mul3941 = mul nsw i32 0, %901
  %902 = load i32, i32* %height, align 4
  %add3942 = add nsw i32 %mul3941, %902
  %mul3943 = mul nsw i32 0, %add3942
  %add3944 = add nsw i32 %mul3943, 1
  %shl3945 = shl i32 %add3944, 30
  %sub3946 = sub nsw i32 %shl3945, 1
  %mul3947 = mul nsw i32 %sub3946, 2
  %add3948 = add nsw i32 %mul3947, 1
  br label %cond.end.3954

cond.false.3949:                                  ; preds = %cond.false.3933
  %903 = load i32, i32* %area, align 4
  %mul3950 = mul nsw i32 0, %903
  %904 = load i32, i32* %height, align 4
  %add3951 = add nsw i32 %mul3950, %904
  %mul3952 = mul nsw i32 0, %add3951
  %sub3953 = sub nsw i32 %mul3952, 1
  br label %cond.end.3954

cond.end.3954:                                    ; preds = %cond.false.3949, %cond.true.3940
  %cond3955 = phi i32 [ %add3948, %cond.true.3940 ], [ %sub3953, %cond.false.3949 ]
  %905 = load i32, i32* %area, align 4
  %div3956 = sdiv i32 %cond3955, %905
  %906 = load i32, i32* %height, align 4
  %cmp3957 = icmp slt i32 %div3956, %906
  br i1 %cmp3957, label %cond.true.3975, label %lor.lhs.false.3959

lor.lhs.false.3959:                               ; preds = %cond.end.3954, %cond.end.3928, %cond.true.3894, %cond.end.3886, %cond.true.3855, %cond.end.3847
  %907 = load i32, i32* %height, align 4
  %908 = load i32, i32* %area, align 4
  %mul3960 = mul nsw i32 %907, %908
  %mul3961 = mul nsw i32 0, %mul3960
  %sub3962 = sub nsw i32 %mul3961, 1
  %cmp3963 = icmp slt i32 %sub3962, 0
  br i1 %cmp3963, label %land.lhs.true.3965, label %lor.lhs.false.3970

land.lhs.true.3965:                               ; preds = %lor.lhs.false.3959
  %909 = load i32, i32* %height, align 4
  %910 = load i32, i32* %area, align 4
  %mul3966 = mul nsw i32 %909, %910
  %conv3967 = sext i32 %mul3966 to i64
  %cmp3968 = icmp slt i64 %conv3967, -9223372036854775808
  br i1 %cmp3968, label %cond.true.3975, label %lor.lhs.false.3970

lor.lhs.false.3970:                               ; preds = %land.lhs.true.3965, %lor.lhs.false.3959
  %911 = load i32, i32* %height, align 4
  %912 = load i32, i32* %area, align 4
  %mul3971 = mul nsw i32 %911, %912
  %conv3972 = sext i32 %mul3971 to i64
  %cmp3973 = icmp slt i64 9223372036854775807, %conv3972
  br i1 %cmp3973, label %cond.true.3975, label %cond.false.3994

cond.true.3975:                                   ; preds = %lor.lhs.false.3970, %land.lhs.true.3965, %cond.end.3954, %cond.end.3928, %cond.true.3894, %cond.end.3886, %cond.true.3855, %cond.end.3847, %land.lhs.true.3817, %land.lhs.true.3811
  %913 = load i32, i32* %height, align 4
  %conv3976 = sext i32 %913 to i64
  %914 = load i32, i32* %area, align 4
  %conv3977 = sext i32 %914 to i64
  %mul3978 = mul i64 %conv3976, %conv3977
  %cmp3979 = icmp ule i64 %mul3978, 9223372036854775807
  br i1 %cmp3979, label %cond.true.3981, label %cond.false.3985

cond.true.3981:                                   ; preds = %cond.true.3975
  %915 = load i32, i32* %height, align 4
  %conv3982 = sext i32 %915 to i64
  %916 = load i32, i32* %area, align 4
  %conv3983 = sext i32 %916 to i64
  %mul3984 = mul i64 %conv3982, %conv3983
  br label %cond.end.3991

cond.false.3985:                                  ; preds = %cond.true.3975
  %917 = load i32, i32* %height, align 4
  %conv3986 = sext i32 %917 to i64
  %918 = load i32, i32* %area, align 4
  %conv3987 = sext i32 %918 to i64
  %mul3988 = mul i64 %conv3986, %conv3987
  %sub3989 = sub i64 %mul3988, -9223372036854775808
  %add3990 = add nsw i64 %sub3989, -9223372036854775808
  br label %cond.end.3991

cond.end.3991:                                    ; preds = %cond.false.3985, %cond.true.3981
  %cond3992 = phi i64 [ %mul3984, %cond.true.3981 ], [ %add3990, %cond.false.3985 ]
  %conv3993 = trunc i64 %cond3992 to i32
  store i32 %conv3993, i32* %area, align 4
  br i1 true, label %if.then.4556, label %lor.lhs.false.4552

cond.false.3994:                                  ; preds = %lor.lhs.false.3970
  %919 = load i32, i32* %height, align 4
  %conv3995 = sext i32 %919 to i64
  %920 = load i32, i32* %area, align 4
  %conv3996 = sext i32 %920 to i64
  %mul3997 = mul i64 %conv3995, %conv3996
  %cmp3998 = icmp ule i64 %mul3997, 9223372036854775807
  br i1 %cmp3998, label %cond.true.4000, label %cond.false.4004

cond.true.4000:                                   ; preds = %cond.false.3994
  %921 = load i32, i32* %height, align 4
  %conv4001 = sext i32 %921 to i64
  %922 = load i32, i32* %area, align 4
  %conv4002 = sext i32 %922 to i64
  %mul4003 = mul i64 %conv4001, %conv4002
  br label %cond.end.4010

cond.false.4004:                                  ; preds = %cond.false.3994
  %923 = load i32, i32* %height, align 4
  %conv4005 = sext i32 %923 to i64
  %924 = load i32, i32* %area, align 4
  %conv4006 = sext i32 %924 to i64
  %mul4007 = mul i64 %conv4005, %conv4006
  %sub4008 = sub i64 %mul4007, -9223372036854775808
  %add4009 = add nsw i64 %sub4008, -9223372036854775808
  br label %cond.end.4010

cond.end.4010:                                    ; preds = %cond.false.4004, %cond.true.4000
  %cond4011 = phi i64 [ %mul4003, %cond.true.4000 ], [ %add4009, %cond.false.4004 ]
  %conv4012 = trunc i64 %cond4011 to i32
  store i32 %conv4012, i32* %area, align 4
  br i1 false, label %if.then.4556, label %lor.lhs.false.4552

cond.false.4013:                                  ; preds = %cond.false.3473
  br i1 true, label %cond.true.4014, label %cond.false.4313

cond.true.4014:                                   ; preds = %cond.false.4013
  %925 = load i32, i32* %area, align 4
  %conv4015 = sext i32 %925 to i64
  %mul4016 = mul nsw i64 0, %conv4015
  %926 = load i32, i32* %height, align 4
  %conv4017 = sext i32 %926 to i64
  %add4018 = add nsw i64 %mul4016, %conv4017
  %mul4019 = mul nsw i64 0, %add4018
  %sub4020 = sub nsw i64 %mul4019, 1
  %cmp4021 = icmp slt i64 %sub4020, 0
  br i1 %cmp4021, label %cond.true.4023, label %cond.false.4046

cond.true.4023:                                   ; preds = %cond.true.4014
  %927 = load i32, i32* %area, align 4
  %conv4024 = sext i32 %927 to i64
  %mul4025 = mul nsw i64 0, %conv4024
  %928 = load i32, i32* %height, align 4
  %conv4026 = sext i32 %928 to i64
  %add4027 = add nsw i64 %mul4025, %conv4026
  %mul4028 = mul nsw i64 0, %add4027
  %add4029 = add nsw i64 %mul4028, 0
  %neg4030 = xor i64 %add4029, -1
  %cmp4031 = icmp eq i64 %neg4030, -1
  %conv4032 = zext i1 %cmp4031 to i32
  %sub4033 = sub nsw i32 0, %conv4032
  %conv4034 = sext i32 %sub4033 to i64
  %929 = load i32, i32* %area, align 4
  %conv4035 = sext i32 %929 to i64
  %mul4036 = mul nsw i64 0, %conv4035
  %930 = load i32, i32* %height, align 4
  %conv4037 = sext i32 %930 to i64
  %add4038 = add nsw i64 %mul4036, %conv4037
  %mul4039 = mul nsw i64 0, %add4038
  %add4040 = add nsw i64 %mul4039, 1
  %shl4041 = shl i64 %add4040, 62
  %sub4042 = sub nsw i64 %shl4041, 1
  %mul4043 = mul nsw i64 %sub4042, 2
  %add4044 = add nsw i64 %mul4043, 1
  %sub4045 = sub nsw i64 %conv4034, %add4044
  br label %cond.end.4053

cond.false.4046:                                  ; preds = %cond.true.4014
  %931 = load i32, i32* %area, align 4
  %conv4047 = sext i32 %931 to i64
  %mul4048 = mul nsw i64 0, %conv4047
  %932 = load i32, i32* %height, align 4
  %conv4049 = sext i32 %932 to i64
  %add4050 = add nsw i64 %mul4048, %conv4049
  %mul4051 = mul nsw i64 0, %add4050
  %add4052 = add nsw i64 %mul4051, 0
  br label %cond.end.4053

cond.end.4053:                                    ; preds = %cond.false.4046, %cond.true.4023
  %cond4054 = phi i64 [ %sub4045, %cond.true.4023 ], [ %add4052, %cond.false.4046 ]
  %cmp4055 = icmp eq i64 %cond4054, 0
  br i1 %cmp4055, label %land.lhs.true.4057, label %lor.lhs.false.4073

land.lhs.true.4057:                               ; preds = %cond.end.4053
  %933 = load i32, i32* %height, align 4
  %conv4058 = sext i32 %933 to i64
  %cmp4059 = icmp slt i64 %conv4058, 0
  br i1 %cmp4059, label %land.lhs.true.4061, label %lor.lhs.false.4065

land.lhs.true.4061:                               ; preds = %land.lhs.true.4057
  %934 = load i32, i32* %area, align 4
  %conv4062 = sext i32 %934 to i64
  %cmp4063 = icmp slt i64 0, %conv4062
  br i1 %cmp4063, label %cond.true.4275, label %lor.lhs.false.4065

lor.lhs.false.4065:                               ; preds = %land.lhs.true.4061, %land.lhs.true.4057
  %935 = load i32, i32* %area, align 4
  %conv4066 = sext i32 %935 to i64
  %cmp4067 = icmp slt i64 %conv4066, 0
  br i1 %cmp4067, label %land.lhs.true.4069, label %lor.lhs.false.4073

land.lhs.true.4069:                               ; preds = %lor.lhs.false.4065
  %936 = load i32, i32* %height, align 4
  %conv4070 = sext i32 %936 to i64
  %cmp4071 = icmp slt i64 0, %conv4070
  br i1 %cmp4071, label %cond.true.4275, label %lor.lhs.false.4073

lor.lhs.false.4073:                               ; preds = %land.lhs.true.4069, %lor.lhs.false.4065, %cond.end.4053
  %937 = load i32, i32* %area, align 4
  %conv4074 = sext i32 %937 to i64
  %cmp4075 = icmp slt i64 %conv4074, 0
  br i1 %cmp4075, label %cond.true.4077, label %cond.false.4166

cond.true.4077:                                   ; preds = %lor.lhs.false.4073
  %938 = load i32, i32* %height, align 4
  %conv4078 = sext i32 %938 to i64
  %cmp4079 = icmp slt i64 %conv4078, 0
  br i1 %cmp4079, label %cond.true.4081, label %cond.false.4115

cond.true.4081:                                   ; preds = %cond.true.4077
  %939 = load i32, i32* %height, align 4
  %conv4082 = sext i32 %939 to i64
  %940 = load i32, i32* %area, align 4
  %conv4083 = sext i32 %940 to i64
  %mul4084 = mul nsw i64 0, %conv4083
  %941 = load i32, i32* %height, align 4
  %conv4085 = sext i32 %941 to i64
  %add4086 = add nsw i64 %mul4084, %conv4085
  %mul4087 = mul nsw i64 0, %add4086
  %sub4088 = sub nsw i64 %mul4087, 1
  %cmp4089 = icmp slt i64 %sub4088, 0
  br i1 %cmp4089, label %cond.true.4091, label %cond.false.4102

cond.true.4091:                                   ; preds = %cond.true.4081
  %942 = load i32, i32* %area, align 4
  %conv4092 = sext i32 %942 to i64
  %mul4093 = mul nsw i64 0, %conv4092
  %943 = load i32, i32* %height, align 4
  %conv4094 = sext i32 %943 to i64
  %add4095 = add nsw i64 %mul4093, %conv4094
  %mul4096 = mul nsw i64 0, %add4095
  %add4097 = add nsw i64 %mul4096, 1
  %shl4098 = shl i64 %add4097, 62
  %sub4099 = sub nsw i64 %shl4098, 1
  %mul4100 = mul nsw i64 %sub4099, 2
  %add4101 = add nsw i64 %mul4100, 1
  br label %cond.end.4109

cond.false.4102:                                  ; preds = %cond.true.4081
  %944 = load i32, i32* %area, align 4
  %conv4103 = sext i32 %944 to i64
  %mul4104 = mul nsw i64 0, %conv4103
  %945 = load i32, i32* %height, align 4
  %conv4105 = sext i32 %945 to i64
  %add4106 = add nsw i64 %mul4104, %conv4105
  %mul4107 = mul nsw i64 0, %add4106
  %sub4108 = sub nsw i64 %mul4107, 1
  br label %cond.end.4109

cond.end.4109:                                    ; preds = %cond.false.4102, %cond.true.4091
  %cond4110 = phi i64 [ %add4101, %cond.true.4091 ], [ %sub4108, %cond.false.4102 ]
  %946 = load i32, i32* %area, align 4
  %conv4111 = sext i32 %946 to i64
  %div4112 = sdiv i64 %cond4110, %conv4111
  %cmp4113 = icmp slt i64 %conv4082, %div4112
  br i1 %cmp4113, label %cond.true.4275, label %lor.lhs.false.4255

cond.false.4115:                                  ; preds = %cond.true.4077
  %947 = load i32, i32* %area, align 4
  %conv4116 = sext i32 %947 to i64
  %cmp4117 = icmp eq i64 %conv4116, -1
  br i1 %cmp4117, label %cond.true.4119, label %cond.false.4120

cond.true.4119:                                   ; preds = %cond.false.4115
  br i1 false, label %cond.true.4275, label %lor.lhs.false.4255

cond.false.4120:                                  ; preds = %cond.false.4115
  %948 = load i32, i32* %area, align 4
  %conv4121 = sext i32 %948 to i64
  %mul4122 = mul nsw i64 0, %conv4121
  %949 = load i32, i32* %height, align 4
  %conv4123 = sext i32 %949 to i64
  %add4124 = add nsw i64 %mul4122, %conv4123
  %mul4125 = mul nsw i64 0, %add4124
  %sub4126 = sub nsw i64 %mul4125, 1
  %cmp4127 = icmp slt i64 %sub4126, 0
  br i1 %cmp4127, label %cond.true.4129, label %cond.false.4152

cond.true.4129:                                   ; preds = %cond.false.4120
  %950 = load i32, i32* %area, align 4
  %conv4130 = sext i32 %950 to i64
  %mul4131 = mul nsw i64 0, %conv4130
  %951 = load i32, i32* %height, align 4
  %conv4132 = sext i32 %951 to i64
  %add4133 = add nsw i64 %mul4131, %conv4132
  %mul4134 = mul nsw i64 0, %add4133
  %add4135 = add nsw i64 %mul4134, 0
  %neg4136 = xor i64 %add4135, -1
  %cmp4137 = icmp eq i64 %neg4136, -1
  %conv4138 = zext i1 %cmp4137 to i32
  %sub4139 = sub nsw i32 0, %conv4138
  %conv4140 = sext i32 %sub4139 to i64
  %952 = load i32, i32* %area, align 4
  %conv4141 = sext i32 %952 to i64
  %mul4142 = mul nsw i64 0, %conv4141
  %953 = load i32, i32* %height, align 4
  %conv4143 = sext i32 %953 to i64
  %add4144 = add nsw i64 %mul4142, %conv4143
  %mul4145 = mul nsw i64 0, %add4144
  %add4146 = add nsw i64 %mul4145, 1
  %shl4147 = shl i64 %add4146, 62
  %sub4148 = sub nsw i64 %shl4147, 1
  %mul4149 = mul nsw i64 %sub4148, 2
  %add4150 = add nsw i64 %mul4149, 1
  %sub4151 = sub nsw i64 %conv4140, %add4150
  br label %cond.end.4159

cond.false.4152:                                  ; preds = %cond.false.4120
  %954 = load i32, i32* %area, align 4
  %conv4153 = sext i32 %954 to i64
  %mul4154 = mul nsw i64 0, %conv4153
  %955 = load i32, i32* %height, align 4
  %conv4155 = sext i32 %955 to i64
  %add4156 = add nsw i64 %mul4154, %conv4155
  %mul4157 = mul nsw i64 0, %add4156
  %add4158 = add nsw i64 %mul4157, 0
  br label %cond.end.4159

cond.end.4159:                                    ; preds = %cond.false.4152, %cond.true.4129
  %cond4160 = phi i64 [ %sub4151, %cond.true.4129 ], [ %add4158, %cond.false.4152 ]
  %956 = load i32, i32* %area, align 4
  %conv4161 = sext i32 %956 to i64
  %div4162 = sdiv i64 %cond4160, %conv4161
  %957 = load i32, i32* %height, align 4
  %conv4163 = sext i32 %957 to i64
  %cmp4164 = icmp slt i64 %div4162, %conv4163
  br i1 %cmp4164, label %cond.true.4275, label %lor.lhs.false.4255

cond.false.4166:                                  ; preds = %lor.lhs.false.4073
  %958 = load i32, i32* %area, align 4
  %conv4167 = sext i32 %958 to i64
  %cmp4168 = icmp eq i64 %conv4167, 0
  br i1 %cmp4168, label %cond.true.4170, label %cond.false.4171

cond.true.4170:                                   ; preds = %cond.false.4166
  br i1 false, label %cond.true.4275, label %lor.lhs.false.4255

cond.false.4171:                                  ; preds = %cond.false.4166
  %959 = load i32, i32* %height, align 4
  %conv4172 = sext i32 %959 to i64
  %cmp4173 = icmp slt i64 %conv4172, 0
  br i1 %cmp4173, label %cond.true.4175, label %cond.false.4221

cond.true.4175:                                   ; preds = %cond.false.4171
  %960 = load i32, i32* %height, align 4
  %conv4176 = sext i32 %960 to i64
  %961 = load i32, i32* %area, align 4
  %conv4177 = sext i32 %961 to i64
  %mul4178 = mul nsw i64 0, %conv4177
  %962 = load i32, i32* %height, align 4
  %conv4179 = sext i32 %962 to i64
  %add4180 = add nsw i64 %mul4178, %conv4179
  %mul4181 = mul nsw i64 0, %add4180
  %sub4182 = sub nsw i64 %mul4181, 1
  %cmp4183 = icmp slt i64 %sub4182, 0
  br i1 %cmp4183, label %cond.true.4185, label %cond.false.4208

cond.true.4185:                                   ; preds = %cond.true.4175
  %963 = load i32, i32* %area, align 4
  %conv4186 = sext i32 %963 to i64
  %mul4187 = mul nsw i64 0, %conv4186
  %964 = load i32, i32* %height, align 4
  %conv4188 = sext i32 %964 to i64
  %add4189 = add nsw i64 %mul4187, %conv4188
  %mul4190 = mul nsw i64 0, %add4189
  %add4191 = add nsw i64 %mul4190, 0
  %neg4192 = xor i64 %add4191, -1
  %cmp4193 = icmp eq i64 %neg4192, -1
  %conv4194 = zext i1 %cmp4193 to i32
  %sub4195 = sub nsw i32 0, %conv4194
  %conv4196 = sext i32 %sub4195 to i64
  %965 = load i32, i32* %area, align 4
  %conv4197 = sext i32 %965 to i64
  %mul4198 = mul nsw i64 0, %conv4197
  %966 = load i32, i32* %height, align 4
  %conv4199 = sext i32 %966 to i64
  %add4200 = add nsw i64 %mul4198, %conv4199
  %mul4201 = mul nsw i64 0, %add4200
  %add4202 = add nsw i64 %mul4201, 1
  %shl4203 = shl i64 %add4202, 62
  %sub4204 = sub nsw i64 %shl4203, 1
  %mul4205 = mul nsw i64 %sub4204, 2
  %add4206 = add nsw i64 %mul4205, 1
  %sub4207 = sub nsw i64 %conv4196, %add4206
  br label %cond.end.4215

cond.false.4208:                                  ; preds = %cond.true.4175
  %967 = load i32, i32* %area, align 4
  %conv4209 = sext i32 %967 to i64
  %mul4210 = mul nsw i64 0, %conv4209
  %968 = load i32, i32* %height, align 4
  %conv4211 = sext i32 %968 to i64
  %add4212 = add nsw i64 %mul4210, %conv4211
  %mul4213 = mul nsw i64 0, %add4212
  %add4214 = add nsw i64 %mul4213, 0
  br label %cond.end.4215

cond.end.4215:                                    ; preds = %cond.false.4208, %cond.true.4185
  %cond4216 = phi i64 [ %sub4207, %cond.true.4185 ], [ %add4214, %cond.false.4208 ]
  %969 = load i32, i32* %area, align 4
  %conv4217 = sext i32 %969 to i64
  %div4218 = sdiv i64 %cond4216, %conv4217
  %cmp4219 = icmp slt i64 %conv4176, %div4218
  br i1 %cmp4219, label %cond.true.4275, label %lor.lhs.false.4255

cond.false.4221:                                  ; preds = %cond.false.4171
  %970 = load i32, i32* %area, align 4
  %conv4222 = sext i32 %970 to i64
  %mul4223 = mul nsw i64 0, %conv4222
  %971 = load i32, i32* %height, align 4
  %conv4224 = sext i32 %971 to i64
  %add4225 = add nsw i64 %mul4223, %conv4224
  %mul4226 = mul nsw i64 0, %add4225
  %sub4227 = sub nsw i64 %mul4226, 1
  %cmp4228 = icmp slt i64 %sub4227, 0
  br i1 %cmp4228, label %cond.true.4230, label %cond.false.4241

cond.true.4230:                                   ; preds = %cond.false.4221
  %972 = load i32, i32* %area, align 4
  %conv4231 = sext i32 %972 to i64
  %mul4232 = mul nsw i64 0, %conv4231
  %973 = load i32, i32* %height, align 4
  %conv4233 = sext i32 %973 to i64
  %add4234 = add nsw i64 %mul4232, %conv4233
  %mul4235 = mul nsw i64 0, %add4234
  %add4236 = add nsw i64 %mul4235, 1
  %shl4237 = shl i64 %add4236, 62
  %sub4238 = sub nsw i64 %shl4237, 1
  %mul4239 = mul nsw i64 %sub4238, 2
  %add4240 = add nsw i64 %mul4239, 1
  br label %cond.end.4248

cond.false.4241:                                  ; preds = %cond.false.4221
  %974 = load i32, i32* %area, align 4
  %conv4242 = sext i32 %974 to i64
  %mul4243 = mul nsw i64 0, %conv4242
  %975 = load i32, i32* %height, align 4
  %conv4244 = sext i32 %975 to i64
  %add4245 = add nsw i64 %mul4243, %conv4244
  %mul4246 = mul nsw i64 0, %add4245
  %sub4247 = sub nsw i64 %mul4246, 1
  br label %cond.end.4248

cond.end.4248:                                    ; preds = %cond.false.4241, %cond.true.4230
  %cond4249 = phi i64 [ %add4240, %cond.true.4230 ], [ %sub4247, %cond.false.4241 ]
  %976 = load i32, i32* %area, align 4
  %conv4250 = sext i32 %976 to i64
  %div4251 = sdiv i64 %cond4249, %conv4250
  %977 = load i32, i32* %height, align 4
  %conv4252 = sext i32 %977 to i64
  %cmp4253 = icmp slt i64 %div4251, %conv4252
  br i1 %cmp4253, label %cond.true.4275, label %lor.lhs.false.4255

lor.lhs.false.4255:                               ; preds = %cond.end.4248, %cond.end.4215, %cond.true.4170, %cond.end.4159, %cond.true.4119, %cond.end.4109
  %978 = load i32, i32* %height, align 4
  %conv4256 = sext i32 %978 to i64
  %979 = load i32, i32* %area, align 4
  %conv4257 = sext i32 %979 to i64
  %mul4258 = mul nsw i64 %conv4256, %conv4257
  %mul4259 = mul nsw i64 0, %mul4258
  %sub4260 = sub nsw i64 %mul4259, 1
  %cmp4261 = icmp slt i64 %sub4260, 0
  br i1 %cmp4261, label %land.lhs.true.4263, label %lor.lhs.false.4269

land.lhs.true.4263:                               ; preds = %lor.lhs.false.4255
  %980 = load i32, i32* %height, align 4
  %conv4264 = sext i32 %980 to i64
  %981 = load i32, i32* %area, align 4
  %conv4265 = sext i32 %981 to i64
  %mul4266 = mul nsw i64 %conv4264, %conv4265
  %cmp4267 = icmp slt i64 %mul4266, -9223372036854775808
  br i1 %cmp4267, label %cond.true.4275, label %lor.lhs.false.4269

lor.lhs.false.4269:                               ; preds = %land.lhs.true.4263, %lor.lhs.false.4255
  %982 = load i32, i32* %height, align 4
  %conv4270 = sext i32 %982 to i64
  %983 = load i32, i32* %area, align 4
  %conv4271 = sext i32 %983 to i64
  %mul4272 = mul nsw i64 %conv4270, %conv4271
  %cmp4273 = icmp slt i64 9223372036854775807, %mul4272
  br i1 %cmp4273, label %cond.true.4275, label %cond.false.4294

cond.true.4275:                                   ; preds = %lor.lhs.false.4269, %land.lhs.true.4263, %cond.end.4248, %cond.end.4215, %cond.true.4170, %cond.end.4159, %cond.true.4119, %cond.end.4109, %land.lhs.true.4069, %land.lhs.true.4061
  %984 = load i32, i32* %height, align 4
  %conv4276 = sext i32 %984 to i64
  %985 = load i32, i32* %area, align 4
  %conv4277 = sext i32 %985 to i64
  %mul4278 = mul i64 %conv4276, %conv4277
  %cmp4279 = icmp ule i64 %mul4278, 9223372036854775807
  br i1 %cmp4279, label %cond.true.4281, label %cond.false.4285

cond.true.4281:                                   ; preds = %cond.true.4275
  %986 = load i32, i32* %height, align 4
  %conv4282 = sext i32 %986 to i64
  %987 = load i32, i32* %area, align 4
  %conv4283 = sext i32 %987 to i64
  %mul4284 = mul i64 %conv4282, %conv4283
  br label %cond.end.4291

cond.false.4285:                                  ; preds = %cond.true.4275
  %988 = load i32, i32* %height, align 4
  %conv4286 = sext i32 %988 to i64
  %989 = load i32, i32* %area, align 4
  %conv4287 = sext i32 %989 to i64
  %mul4288 = mul i64 %conv4286, %conv4287
  %sub4289 = sub i64 %mul4288, -9223372036854775808
  %add4290 = add nsw i64 %sub4289, -9223372036854775808
  br label %cond.end.4291

cond.end.4291:                                    ; preds = %cond.false.4285, %cond.true.4281
  %cond4292 = phi i64 [ %mul4284, %cond.true.4281 ], [ %add4290, %cond.false.4285 ]
  %conv4293 = trunc i64 %cond4292 to i32
  store i32 %conv4293, i32* %area, align 4
  br i1 true, label %if.then.4556, label %lor.lhs.false.4552

cond.false.4294:                                  ; preds = %lor.lhs.false.4269
  %990 = load i32, i32* %height, align 4
  %conv4295 = sext i32 %990 to i64
  %991 = load i32, i32* %area, align 4
  %conv4296 = sext i32 %991 to i64
  %mul4297 = mul i64 %conv4295, %conv4296
  %cmp4298 = icmp ule i64 %mul4297, 9223372036854775807
  br i1 %cmp4298, label %cond.true.4300, label %cond.false.4304

cond.true.4300:                                   ; preds = %cond.false.4294
  %992 = load i32, i32* %height, align 4
  %conv4301 = sext i32 %992 to i64
  %993 = load i32, i32* %area, align 4
  %conv4302 = sext i32 %993 to i64
  %mul4303 = mul i64 %conv4301, %conv4302
  br label %cond.end.4310

cond.false.4304:                                  ; preds = %cond.false.4294
  %994 = load i32, i32* %height, align 4
  %conv4305 = sext i32 %994 to i64
  %995 = load i32, i32* %area, align 4
  %conv4306 = sext i32 %995 to i64
  %mul4307 = mul i64 %conv4305, %conv4306
  %sub4308 = sub i64 %mul4307, -9223372036854775808
  %add4309 = add nsw i64 %sub4308, -9223372036854775808
  br label %cond.end.4310

cond.end.4310:                                    ; preds = %cond.false.4304, %cond.true.4300
  %cond4311 = phi i64 [ %mul4303, %cond.true.4300 ], [ %add4309, %cond.false.4304 ]
  %conv4312 = trunc i64 %cond4311 to i32
  store i32 %conv4312, i32* %area, align 4
  br i1 false, label %if.then.4556, label %lor.lhs.false.4552

cond.false.4313:                                  ; preds = %cond.false.4013
  %996 = load i32, i32* %area, align 4
  %mul4314 = mul nsw i32 0, %996
  %997 = load i32, i32* %height, align 4
  %add4315 = add nsw i32 %mul4314, %997
  %mul4316 = mul nsw i32 0, %add4315
  %sub4317 = sub nsw i32 %mul4316, 1
  %cmp4318 = icmp slt i32 %sub4317, 0
  br i1 %cmp4318, label %cond.true.4320, label %cond.false.4338

cond.true.4320:                                   ; preds = %cond.false.4313
  %998 = load i32, i32* %area, align 4
  %mul4321 = mul nsw i32 0, %998
  %999 = load i32, i32* %height, align 4
  %add4322 = add nsw i32 %mul4321, %999
  %mul4323 = mul nsw i32 0, %add4322
  %add4324 = add nsw i32 %mul4323, 0
  %neg4325 = xor i32 %add4324, -1
  %cmp4326 = icmp eq i32 %neg4325, -1
  %conv4327 = zext i1 %cmp4326 to i32
  %sub4328 = sub nsw i32 0, %conv4327
  %1000 = load i32, i32* %area, align 4
  %mul4329 = mul nsw i32 0, %1000
  %1001 = load i32, i32* %height, align 4
  %add4330 = add nsw i32 %mul4329, %1001
  %mul4331 = mul nsw i32 0, %add4330
  %add4332 = add nsw i32 %mul4331, 1
  %shl4333 = shl i32 %add4332, 30
  %sub4334 = sub nsw i32 %shl4333, 1
  %mul4335 = mul nsw i32 %sub4334, 2
  %add4336 = add nsw i32 %mul4335, 1
  %sub4337 = sub nsw i32 %sub4328, %add4336
  br label %cond.end.4343

cond.false.4338:                                  ; preds = %cond.false.4313
  %1002 = load i32, i32* %area, align 4
  %mul4339 = mul nsw i32 0, %1002
  %1003 = load i32, i32* %height, align 4
  %add4340 = add nsw i32 %mul4339, %1003
  %mul4341 = mul nsw i32 0, %add4340
  %add4342 = add nsw i32 %mul4341, 0
  br label %cond.end.4343

cond.end.4343:                                    ; preds = %cond.false.4338, %cond.true.4320
  %cond4344 = phi i32 [ %sub4337, %cond.true.4320 ], [ %add4342, %cond.false.4338 ]
  %cmp4345 = icmp eq i32 %cond4344, 0
  br i1 %cmp4345, label %land.lhs.true.4347, label %lor.lhs.false.4359

land.lhs.true.4347:                               ; preds = %cond.end.4343
  %1004 = load i32, i32* %height, align 4
  %cmp4348 = icmp slt i32 %1004, 0
  br i1 %cmp4348, label %land.lhs.true.4350, label %lor.lhs.false.4353

land.lhs.true.4350:                               ; preds = %land.lhs.true.4347
  %1005 = load i32, i32* %area, align 4
  %cmp4351 = icmp slt i32 0, %1005
  br i1 %cmp4351, label %cond.true.4514, label %lor.lhs.false.4353

lor.lhs.false.4353:                               ; preds = %land.lhs.true.4350, %land.lhs.true.4347
  %1006 = load i32, i32* %area, align 4
  %cmp4354 = icmp slt i32 %1006, 0
  br i1 %cmp4354, label %land.lhs.true.4356, label %lor.lhs.false.4359

land.lhs.true.4356:                               ; preds = %lor.lhs.false.4353
  %1007 = load i32, i32* %height, align 4
  %cmp4357 = icmp slt i32 0, %1007
  br i1 %cmp4357, label %cond.true.4514, label %lor.lhs.false.4359

lor.lhs.false.4359:                               ; preds = %land.lhs.true.4356, %lor.lhs.false.4353, %cond.end.4343
  %1008 = load i32, i32* %area, align 4
  %cmp4360 = icmp slt i32 %1008, 0
  br i1 %cmp4360, label %cond.true.4362, label %cond.false.4430

cond.true.4362:                                   ; preds = %lor.lhs.false.4359
  %1009 = load i32, i32* %height, align 4
  %cmp4363 = icmp slt i32 %1009, 0
  br i1 %cmp4363, label %cond.true.4365, label %cond.false.4391

cond.true.4365:                                   ; preds = %cond.true.4362
  %1010 = load i32, i32* %height, align 4
  %1011 = load i32, i32* %area, align 4
  %mul4366 = mul nsw i32 0, %1011
  %1012 = load i32, i32* %height, align 4
  %add4367 = add nsw i32 %mul4366, %1012
  %mul4368 = mul nsw i32 0, %add4367
  %sub4369 = sub nsw i32 %mul4368, 1
  %cmp4370 = icmp slt i32 %sub4369, 0
  br i1 %cmp4370, label %cond.true.4372, label %cond.false.4381

cond.true.4372:                                   ; preds = %cond.true.4365
  %1013 = load i32, i32* %area, align 4
  %mul4373 = mul nsw i32 0, %1013
  %1014 = load i32, i32* %height, align 4
  %add4374 = add nsw i32 %mul4373, %1014
  %mul4375 = mul nsw i32 0, %add4374
  %add4376 = add nsw i32 %mul4375, 1
  %shl4377 = shl i32 %add4376, 30
  %sub4378 = sub nsw i32 %shl4377, 1
  %mul4379 = mul nsw i32 %sub4378, 2
  %add4380 = add nsw i32 %mul4379, 1
  br label %cond.end.4386

cond.false.4381:                                  ; preds = %cond.true.4365
  %1015 = load i32, i32* %area, align 4
  %mul4382 = mul nsw i32 0, %1015
  %1016 = load i32, i32* %height, align 4
  %add4383 = add nsw i32 %mul4382, %1016
  %mul4384 = mul nsw i32 0, %add4383
  %sub4385 = sub nsw i32 %mul4384, 1
  br label %cond.end.4386

cond.end.4386:                                    ; preds = %cond.false.4381, %cond.true.4372
  %cond4387 = phi i32 [ %add4380, %cond.true.4372 ], [ %sub4385, %cond.false.4381 ]
  %1017 = load i32, i32* %area, align 4
  %div4388 = sdiv i32 %cond4387, %1017
  %cmp4389 = icmp slt i32 %1010, %div4388
  br i1 %cmp4389, label %cond.true.4514, label %lor.lhs.false.4498

cond.false.4391:                                  ; preds = %cond.true.4362
  %1018 = load i32, i32* %area, align 4
  %cmp4392 = icmp eq i32 %1018, -1
  br i1 %cmp4392, label %cond.true.4394, label %cond.false.4395

cond.true.4394:                                   ; preds = %cond.false.4391
  br i1 false, label %cond.true.4514, label %lor.lhs.false.4498

cond.false.4395:                                  ; preds = %cond.false.4391
  %1019 = load i32, i32* %area, align 4
  %mul4396 = mul nsw i32 0, %1019
  %1020 = load i32, i32* %height, align 4
  %add4397 = add nsw i32 %mul4396, %1020
  %mul4398 = mul nsw i32 0, %add4397
  %sub4399 = sub nsw i32 %mul4398, 1
  %cmp4400 = icmp slt i32 %sub4399, 0
  br i1 %cmp4400, label %cond.true.4402, label %cond.false.4420

cond.true.4402:                                   ; preds = %cond.false.4395
  %1021 = load i32, i32* %area, align 4
  %mul4403 = mul nsw i32 0, %1021
  %1022 = load i32, i32* %height, align 4
  %add4404 = add nsw i32 %mul4403, %1022
  %mul4405 = mul nsw i32 0, %add4404
  %add4406 = add nsw i32 %mul4405, 0
  %neg4407 = xor i32 %add4406, -1
  %cmp4408 = icmp eq i32 %neg4407, -1
  %conv4409 = zext i1 %cmp4408 to i32
  %sub4410 = sub nsw i32 0, %conv4409
  %1023 = load i32, i32* %area, align 4
  %mul4411 = mul nsw i32 0, %1023
  %1024 = load i32, i32* %height, align 4
  %add4412 = add nsw i32 %mul4411, %1024
  %mul4413 = mul nsw i32 0, %add4412
  %add4414 = add nsw i32 %mul4413, 1
  %shl4415 = shl i32 %add4414, 30
  %sub4416 = sub nsw i32 %shl4415, 1
  %mul4417 = mul nsw i32 %sub4416, 2
  %add4418 = add nsw i32 %mul4417, 1
  %sub4419 = sub nsw i32 %sub4410, %add4418
  br label %cond.end.4425

cond.false.4420:                                  ; preds = %cond.false.4395
  %1025 = load i32, i32* %area, align 4
  %mul4421 = mul nsw i32 0, %1025
  %1026 = load i32, i32* %height, align 4
  %add4422 = add nsw i32 %mul4421, %1026
  %mul4423 = mul nsw i32 0, %add4422
  %add4424 = add nsw i32 %mul4423, 0
  br label %cond.end.4425

cond.end.4425:                                    ; preds = %cond.false.4420, %cond.true.4402
  %cond4426 = phi i32 [ %sub4419, %cond.true.4402 ], [ %add4424, %cond.false.4420 ]
  %1027 = load i32, i32* %area, align 4
  %div4427 = sdiv i32 %cond4426, %1027
  %1028 = load i32, i32* %height, align 4
  %cmp4428 = icmp slt i32 %div4427, %1028
  br i1 %cmp4428, label %cond.true.4514, label %lor.lhs.false.4498

cond.false.4430:                                  ; preds = %lor.lhs.false.4359
  %1029 = load i32, i32* %area, align 4
  %cmp4431 = icmp eq i32 %1029, 0
  br i1 %cmp4431, label %cond.true.4433, label %cond.false.4434

cond.true.4433:                                   ; preds = %cond.false.4430
  br i1 false, label %cond.true.4514, label %lor.lhs.false.4498

cond.false.4434:                                  ; preds = %cond.false.4430
  %1030 = load i32, i32* %height, align 4
  %cmp4435 = icmp slt i32 %1030, 0
  br i1 %cmp4435, label %cond.true.4437, label %cond.false.4472

cond.true.4437:                                   ; preds = %cond.false.4434
  %1031 = load i32, i32* %height, align 4
  %1032 = load i32, i32* %area, align 4
  %mul4438 = mul nsw i32 0, %1032
  %1033 = load i32, i32* %height, align 4
  %add4439 = add nsw i32 %mul4438, %1033
  %mul4440 = mul nsw i32 0, %add4439
  %sub4441 = sub nsw i32 %mul4440, 1
  %cmp4442 = icmp slt i32 %sub4441, 0
  br i1 %cmp4442, label %cond.true.4444, label %cond.false.4462

cond.true.4444:                                   ; preds = %cond.true.4437
  %1034 = load i32, i32* %area, align 4
  %mul4445 = mul nsw i32 0, %1034
  %1035 = load i32, i32* %height, align 4
  %add4446 = add nsw i32 %mul4445, %1035
  %mul4447 = mul nsw i32 0, %add4446
  %add4448 = add nsw i32 %mul4447, 0
  %neg4449 = xor i32 %add4448, -1
  %cmp4450 = icmp eq i32 %neg4449, -1
  %conv4451 = zext i1 %cmp4450 to i32
  %sub4452 = sub nsw i32 0, %conv4451
  %1036 = load i32, i32* %area, align 4
  %mul4453 = mul nsw i32 0, %1036
  %1037 = load i32, i32* %height, align 4
  %add4454 = add nsw i32 %mul4453, %1037
  %mul4455 = mul nsw i32 0, %add4454
  %add4456 = add nsw i32 %mul4455, 1
  %shl4457 = shl i32 %add4456, 30
  %sub4458 = sub nsw i32 %shl4457, 1
  %mul4459 = mul nsw i32 %sub4458, 2
  %add4460 = add nsw i32 %mul4459, 1
  %sub4461 = sub nsw i32 %sub4452, %add4460
  br label %cond.end.4467

cond.false.4462:                                  ; preds = %cond.true.4437
  %1038 = load i32, i32* %area, align 4
  %mul4463 = mul nsw i32 0, %1038
  %1039 = load i32, i32* %height, align 4
  %add4464 = add nsw i32 %mul4463, %1039
  %mul4465 = mul nsw i32 0, %add4464
  %add4466 = add nsw i32 %mul4465, 0
  br label %cond.end.4467

cond.end.4467:                                    ; preds = %cond.false.4462, %cond.true.4444
  %cond4468 = phi i32 [ %sub4461, %cond.true.4444 ], [ %add4466, %cond.false.4462 ]
  %1040 = load i32, i32* %area, align 4
  %div4469 = sdiv i32 %cond4468, %1040
  %cmp4470 = icmp slt i32 %1031, %div4469
  br i1 %cmp4470, label %cond.true.4514, label %lor.lhs.false.4498

cond.false.4472:                                  ; preds = %cond.false.4434
  %1041 = load i32, i32* %area, align 4
  %mul4473 = mul nsw i32 0, %1041
  %1042 = load i32, i32* %height, align 4
  %add4474 = add nsw i32 %mul4473, %1042
  %mul4475 = mul nsw i32 0, %add4474
  %sub4476 = sub nsw i32 %mul4475, 1
  %cmp4477 = icmp slt i32 %sub4476, 0
  br i1 %cmp4477, label %cond.true.4479, label %cond.false.4488

cond.true.4479:                                   ; preds = %cond.false.4472
  %1043 = load i32, i32* %area, align 4
  %mul4480 = mul nsw i32 0, %1043
  %1044 = load i32, i32* %height, align 4
  %add4481 = add nsw i32 %mul4480, %1044
  %mul4482 = mul nsw i32 0, %add4481
  %add4483 = add nsw i32 %mul4482, 1
  %shl4484 = shl i32 %add4483, 30
  %sub4485 = sub nsw i32 %shl4484, 1
  %mul4486 = mul nsw i32 %sub4485, 2
  %add4487 = add nsw i32 %mul4486, 1
  br label %cond.end.4493

cond.false.4488:                                  ; preds = %cond.false.4472
  %1045 = load i32, i32* %area, align 4
  %mul4489 = mul nsw i32 0, %1045
  %1046 = load i32, i32* %height, align 4
  %add4490 = add nsw i32 %mul4489, %1046
  %mul4491 = mul nsw i32 0, %add4490
  %sub4492 = sub nsw i32 %mul4491, 1
  br label %cond.end.4493

cond.end.4493:                                    ; preds = %cond.false.4488, %cond.true.4479
  %cond4494 = phi i32 [ %add4487, %cond.true.4479 ], [ %sub4492, %cond.false.4488 ]
  %1047 = load i32, i32* %area, align 4
  %div4495 = sdiv i32 %cond4494, %1047
  %1048 = load i32, i32* %height, align 4
  %cmp4496 = icmp slt i32 %div4495, %1048
  br i1 %cmp4496, label %cond.true.4514, label %lor.lhs.false.4498

lor.lhs.false.4498:                               ; preds = %cond.end.4493, %cond.end.4467, %cond.true.4433, %cond.end.4425, %cond.true.4394, %cond.end.4386
  %1049 = load i32, i32* %height, align 4
  %1050 = load i32, i32* %area, align 4
  %mul4499 = mul nsw i32 %1049, %1050
  %mul4500 = mul nsw i32 0, %mul4499
  %sub4501 = sub nsw i32 %mul4500, 1
  %cmp4502 = icmp slt i32 %sub4501, 0
  br i1 %cmp4502, label %land.lhs.true.4504, label %lor.lhs.false.4509

land.lhs.true.4504:                               ; preds = %lor.lhs.false.4498
  %1051 = load i32, i32* %height, align 4
  %1052 = load i32, i32* %area, align 4
  %mul4505 = mul nsw i32 %1051, %1052
  %conv4506 = sext i32 %mul4505 to i64
  %cmp4507 = icmp slt i64 %conv4506, -9223372036854775808
  br i1 %cmp4507, label %cond.true.4514, label %lor.lhs.false.4509

lor.lhs.false.4509:                               ; preds = %land.lhs.true.4504, %lor.lhs.false.4498
  %1053 = load i32, i32* %height, align 4
  %1054 = load i32, i32* %area, align 4
  %mul4510 = mul nsw i32 %1053, %1054
  %conv4511 = sext i32 %mul4510 to i64
  %cmp4512 = icmp slt i64 9223372036854775807, %conv4511
  br i1 %cmp4512, label %cond.true.4514, label %cond.false.4533

cond.true.4514:                                   ; preds = %lor.lhs.false.4509, %land.lhs.true.4504, %cond.end.4493, %cond.end.4467, %cond.true.4433, %cond.end.4425, %cond.true.4394, %cond.end.4386, %land.lhs.true.4356, %land.lhs.true.4350
  %1055 = load i32, i32* %height, align 4
  %conv4515 = sext i32 %1055 to i64
  %1056 = load i32, i32* %area, align 4
  %conv4516 = sext i32 %1056 to i64
  %mul4517 = mul i64 %conv4515, %conv4516
  %cmp4518 = icmp ule i64 %mul4517, 9223372036854775807
  br i1 %cmp4518, label %cond.true.4520, label %cond.false.4524

cond.true.4520:                                   ; preds = %cond.true.4514
  %1057 = load i32, i32* %height, align 4
  %conv4521 = sext i32 %1057 to i64
  %1058 = load i32, i32* %area, align 4
  %conv4522 = sext i32 %1058 to i64
  %mul4523 = mul i64 %conv4521, %conv4522
  br label %cond.end.4530

cond.false.4524:                                  ; preds = %cond.true.4514
  %1059 = load i32, i32* %height, align 4
  %conv4525 = sext i32 %1059 to i64
  %1060 = load i32, i32* %area, align 4
  %conv4526 = sext i32 %1060 to i64
  %mul4527 = mul i64 %conv4525, %conv4526
  %sub4528 = sub i64 %mul4527, -9223372036854775808
  %add4529 = add nsw i64 %sub4528, -9223372036854775808
  br label %cond.end.4530

cond.end.4530:                                    ; preds = %cond.false.4524, %cond.true.4520
  %cond4531 = phi i64 [ %mul4523, %cond.true.4520 ], [ %add4529, %cond.false.4524 ]
  %conv4532 = trunc i64 %cond4531 to i32
  store i32 %conv4532, i32* %area, align 4
  br i1 true, label %if.then.4556, label %lor.lhs.false.4552

cond.false.4533:                                  ; preds = %lor.lhs.false.4509
  %1061 = load i32, i32* %height, align 4
  %conv4534 = sext i32 %1061 to i64
  %1062 = load i32, i32* %area, align 4
  %conv4535 = sext i32 %1062 to i64
  %mul4536 = mul i64 %conv4534, %conv4535
  %cmp4537 = icmp ule i64 %mul4536, 9223372036854775807
  br i1 %cmp4537, label %cond.true.4539, label %cond.false.4543

cond.true.4539:                                   ; preds = %cond.false.4533
  %1063 = load i32, i32* %height, align 4
  %conv4540 = sext i32 %1063 to i64
  %1064 = load i32, i32* %area, align 4
  %conv4541 = sext i32 %1064 to i64
  %mul4542 = mul i64 %conv4540, %conv4541
  br label %cond.end.4549

cond.false.4543:                                  ; preds = %cond.false.4533
  %1065 = load i32, i32* %height, align 4
  %conv4544 = sext i32 %1065 to i64
  %1066 = load i32, i32* %area, align 4
  %conv4545 = sext i32 %1066 to i64
  %mul4546 = mul i64 %conv4544, %conv4545
  %sub4547 = sub i64 %mul4546, -9223372036854775808
  %add4548 = add nsw i64 %sub4547, -9223372036854775808
  br label %cond.end.4549

cond.end.4549:                                    ; preds = %cond.false.4543, %cond.true.4539
  %cond4550 = phi i64 [ %mul4542, %cond.true.4539 ], [ %add4548, %cond.false.4543 ]
  %conv4551 = trunc i64 %cond4550 to i32
  store i32 %conv4551, i32* %area, align 4
  br i1 false, label %if.then.4556, label %lor.lhs.false.4552

lor.lhs.false.4552:                               ; preds = %cond.end.4549, %cond.end.4530, %cond.end.4310, %cond.end.4291, %cond.end.4010, %cond.end.3991, %cond.end.3771, %cond.end.3752, %cond.end.3471, %cond.end.3459, %cond.end.3248, %cond.end.3236, %cond.end.3023, %cond.end.2995, %cond.end.2768, %cond.end.2740, %cond.end.2393, %cond.end.2365, %cond.end.2138, %cond.end.2110
  %1067 = load i32, i32* %area, align 4
  %conv4553 = sext i32 %1067 to i64
  %cmp4554 = icmp ult i64 192153584101141162, %conv4553
  br i1 %cmp4554, label %if.then.4556, label %if.end.4557

if.then.4556:                                     ; preds = %lor.lhs.false.4552, %cond.end.4549, %cond.end.4530, %cond.end.4310, %cond.end.4291, %cond.end.4010, %cond.end.3991, %cond.end.3771, %cond.end.3752, %cond.end.3471, %cond.end.3459, %cond.end.3248, %cond.end.3236, %cond.end.3023, %cond.end.2995, %cond.end.2768, %cond.end.2740, %cond.end.2393, %cond.end.2365, %cond.end.2138, %cond.end.2110, %cond.end.1763, %cond.end.1747, %cond.end.1614, %cond.end.1598, %cond.end.1443, %cond.end.1427, %cond.end.1294, %cond.end.1278, %cond.end.1123, %cond.end.1111, %cond.end.984, %cond.end.972, %cond.end.843, %cond.end.821, %cond.end.684, %cond.end.662, %cond.end.481, %cond.end.459, %cond.end.322, %cond.end.300
  %1068 = load i32, i32* %width, align 4
  %1069 = load i32, i32* %height, align 4
  call void (i8*, ...) @fatal(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.12, i32 0, i32 0), i32 %1068, i32 %1069) #8
  unreachable

if.end.4557:                                      ; preds = %lor.lhs.false.4552
  %1070 = load i64, i64* @selected_frame, align 8
  %sub4558 = sub nsw i64 %1070, 5
  %1071 = inttoptr i64 %sub4558 to i8*
  %1072 = bitcast i8* %1071 to %struct.frame*
  call void @calculate_costs(%struct.frame* %1072)
  %1073 = load i8, i8* @initialized, align 1
  %tobool4559 = trunc i8 %1073 to i1
  br i1 %tobool4559, label %land.lhs.true.4561, label %if.end.4583

land.lhs.true.4561:                               ; preds = %if.end.4557
  %1074 = load i8, i8* @noninteractive, align 1
  %tobool4562 = trunc i8 %1074 to i1
  br i1 %tobool4562, label %if.end.4583, label %land.lhs.true.4563

land.lhs.true.4563:                               ; preds = %land.lhs.true.4561
  %1075 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 142), align 8
  %call4564 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp4565 = icmp eq i64 %1075, %call4564
  br i1 %cmp4565, label %if.then.4567, label %if.end.4583

if.then.4567:                                     ; preds = %land.lhs.true.4563
  %1076 = load i64, i64* @selected_frame, align 8
  %call4569 = call zeroext i1 @FRAMEP(i64 %1076)
  br i1 %call4569, label %land.lhs.true.4571, label %cond.false.4578

land.lhs.true.4571:                               ; preds = %if.then.4567
  %1077 = load i64, i64* @selected_frame, align 8
  %sub4572 = sub nsw i64 %1077, 5
  %1078 = inttoptr i64 %sub4572 to i8*
  %1079 = bitcast i8* %1078 to %struct.frame*
  %terminal4573 = getelementptr inbounds %struct.frame, %struct.frame* %1079, i32 0, i32 61
  %1080 = load %struct.terminal*, %struct.terminal** %terminal4573, align 8
  %cmp4574 = icmp ne %struct.terminal* %1080, null
  br i1 %cmp4574, label %cond.true.4576, label %cond.false.4578

cond.true.4576:                                   ; preds = %land.lhs.true.4571
  %1081 = load i64, i64* @selected_frame, align 8
  %sub4577 = sub nsw i64 %1081, 5
  %1082 = inttoptr i64 %sub4577 to i8*
  %1083 = bitcast i8* %1082 to %struct.frame*
  br label %cond.end.4579

cond.false.4578:                                  ; preds = %land.lhs.true.4571, %if.then.4567
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.4579

cond.end.4579:                                    ; preds = %1084, %cond.true.4576
  %cond4580 = phi %struct.frame* [ %1083, %cond.true.4576 ], [ null, %1084 ]
  store %struct.frame* %cond4580, %struct.frame** %sf4568, align 8
  %1085 = load %struct.frame*, %struct.frame** %sf4568, align 8
  %foreground_pixel = getelementptr inbounds %struct.frame, %struct.frame* %1085, i32 0, i32 78
  store i64 -2, i64* %foreground_pixel, align 8
  %1086 = load %struct.frame*, %struct.frame** %sf4568, align 8
  %background_pixel = getelementptr inbounds %struct.frame, %struct.frame* %1086, i32 0, i32 77
  store i64 -3, i64* %background_pixel, align 8
  %call4581 = call i64 @intern(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.13, i32 0, i32 0))
  %call4582 = call i64 @call0(i64 %call4581)
  br label %if.end.4583

if.end.4583:                                      ; preds = %if.then.6, %if.then.27, %cond.end.4579, %land.lhs.true.4563, %land.lhs.true.4561, %if.end.4557
  ret void
}

declare void @emacs_sigaction_init(%struct.sigaction*, void (i32)*) #1

; Function Attrs: nounwind uwtable
define internal void @deliver_window_change_signal(i32 %sig) #0 {
entry:
  %sig.addr = alloca i32, align 4
  store i32 %sig, i32* %sig.addr, align 4
  %0 = load i32, i32* %sig.addr, align 4
  call void @deliver_process_signal(i32 %0, void (i32)* @handle_window_change_signal)
  ret void
}

; Function Attrs: nounwind
declare i32 @sigaction(i32, %struct.sigaction*, %struct.sigaction*) #6

; Function Attrs: nounwind
declare i8* @getenv(i8*) #6

declare zeroext i1 @x_display_ok(i8*) #1

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #1

; Function Attrs: nounwind
declare i32 @isatty(i32) #6

; Function Attrs: noreturn
declare void @fatal(i8*, ...) #3

; Function Attrs: noreturn nounwind
declare void @exit(i32) #7

declare void @init_foreground_group() #1

declare %struct.terminal* @init_tty(i8*, i8*, i1 zeroext) #1

declare void @create_tty_output(%struct.frame*) #1

declare i64 @make_lisp_ptr(i8*, i32) #1

declare i64 @Ftty_type(i64) #1

declare i64 @Fmodify_frame_parameters(i64, i64) #1

declare void @calculate_costs(%struct.frame*) #1

declare i64 @call0(i64) #1

declare i64 @intern(i8*) #1

; Function Attrs: nounwind uwtable
define i64 @Finternal_show_cursor(i64 %window, i64 %show) #0 {
entry:
  %window.addr = alloca i64, align 8
  %show.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %show, i64* %show.addr, align 8
  %0 = load i8, i8* @redisplaying_p, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %show.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call
  %2 = load i64, i64* %window.addr, align 8
  %call1 = call %struct.window* @decode_any_window(i64 %2)
  %cursor_off_p = getelementptr inbounds %struct.window, %struct.window* %call1, i32 0, i32 67
  %3 = zext i1 %cmp to i16
  %bf.load = load i16, i16* %cursor_off_p, align 4
  %bf.shl = shl i16 %3, 8
  %bf.clear = and i16 %bf.load, -257
  %bf.set = or i16 %bf.clear, %bf.shl
  store i16 %bf.set, i16* %cursor_off_p, align 4
  %bf.result.cast = trunc i16 %3 to i8
  %tobool2 = trunc i8 %bf.result.cast to i1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call3
}

declare %struct.window* @decode_any_window(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Finternal_show_cursor_p(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  store i64 %window, i64* %window.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_any_window(i64 %0)
  %cursor_off_p = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 67
  %bf.load = load i16, i16* %cursor_off_p, align 4
  %bf.lshr = lshr i16 %bf.load, 8
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call2 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call1, %cond.true ], [ %call2, %cond.false ]
  ret i64 %cond
}

; Function Attrs: nounwind uwtable
define void @syms_of_display() #0 {
entry:
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sredraw_frame to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* @Sredraw_display)
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sframe_or_buffer_changed_p to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sopen_termscript to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sding to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sredisplay to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Ssleep_for to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Ssend_string_to_terminal to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sinternal_show_cursor to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sinternal_show_cursor_p to %struct.Lisp_Subr*))
  %call = call i64 @builtin_lisp_symbol(i32 598)
  %call1 = call i64 @Fmake_vector(i64 82, i64 %call)
  store i64 %call1, i64* @frame_and_buffer_state, align 8
  call void @staticpro(i64* @frame_and_buffer_state)
  br label %do.body

do.body:                                          ; preds = %entry
  call void @defvar_int(%struct.Lisp_Intfwd* @syms_of_display.i_fwd, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 381))
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body.2

do.body.2:                                        ; preds = %do.end
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_display.b_fwd, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 462))
  br label %do.end.3

do.end.3:                                         ; preds = %do.body.2
  br label %do.body.4

do.body.4:                                        ; preds = %do.end.3
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_display.b_fwd.16, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 496))
  br label %do.end.5

do.end.5:                                         ; preds = %do.body.4
  br label %do.body.6

do.body.6:                                        ; preds = %do.end.5
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_display.b_fwd.18, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 476))
  br label %do.end.7

do.end.7:                                         ; preds = %do.body.6
  br label %do.body.8

do.body.8:                                        ; preds = %do.end.7
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_display.o_fwd, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.20, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 142))
  br label %do.end.9

do.end.9:                                         ; preds = %do.body.8
  br label %do.body.10

do.body.10:                                       ; preds = %do.end.9
  call void @defvar_kboard(%struct.Lisp_Kboard_Objfwd* @syms_of_display.ko_fwd, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.21, i32 0, i32 0), i32 136)
  br label %do.end.11

do.end.11:                                        ; preds = %do.body.10
  br label %do.body.12

do.body.12:                                       ; preds = %do.end.11
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_display.o_fwd.22, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.23, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 334))
  br label %do.end.13

do.end.13:                                        ; preds = %do.body.12
  br label %do.body.14

do.body.14:                                       ; preds = %do.end.13
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_display.b_fwd.24, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 431))
  br label %do.end.15

do.end.15:                                        ; preds = %do.body.14
  br label %do.body.16

do.body.16:                                       ; preds = %do.end.15
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_display.o_fwd.26, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.27, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 118))
  br label %do.end.17

do.end.17:                                        ; preds = %do.body.16
  %call18 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call18, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 118), align 8
  br label %do.body.19

do.body.19:                                       ; preds = %do.end.17
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_display.o_fwd.28, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.29, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 275))
  br label %do.end.20

do.end.20:                                        ; preds = %do.body.19
  %call21 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call21, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 275), align 8
  br label %do.body.22

do.body.22:                                       ; preds = %do.end.20
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_display.b_fwd.30, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 487))
  br label %do.end.23

do.end.23:                                        ; preds = %do.body.22
  store i8 1, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 487), align 1
  %call24 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call24, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 142), align 8
  %call25 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call25, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 334), align 8
  ret void
}

declare void @defsubr(%struct.Lisp_Subr*) #1

declare void @staticpro(i64*) #1

declare void @defvar_int(%struct.Lisp_Intfwd*, i8*, i64*) #1

declare void @defvar_bool(%struct.Lisp_Boolfwd*, i8*, i8*) #1

declare void @defvar_lisp(%struct.Lisp_Objfwd*, i8*, i64*) #1

declare void @defvar_kboard(%struct.Lisp_Kboard_Objfwd*, i8*, i32) #1

; Function Attrs: nounwind uwtable
define internal %struct.glyph_pool* @new_glyph_pool() #0 {
entry:
  %result = alloca %struct.glyph_pool*, align 8
  %call = call noalias i8* @xzalloc(i64 24)
  %0 = bitcast i8* %call to %struct.glyph_pool*
  store %struct.glyph_pool* %0, %struct.glyph_pool** %result, align 8
  %1 = load %struct.glyph_pool*, %struct.glyph_pool** %result, align 8
  ret %struct.glyph_pool* %1
}

; Function Attrs: nounwind uwtable
define internal %struct.glyph_matrix* @new_glyph_matrix(%struct.glyph_pool* %pool) #0 {
entry:
  %pool.addr = alloca %struct.glyph_pool*, align 8
  %result = alloca %struct.glyph_matrix*, align 8
  store %struct.glyph_pool* %pool, %struct.glyph_pool** %pool.addr, align 8
  %call = call noalias i8* @xzalloc(i64 104)
  %0 = bitcast i8* %call to %struct.glyph_matrix*
  store %struct.glyph_matrix* %0, %struct.glyph_matrix** %result, align 8
  %1 = load %struct.glyph_pool*, %struct.glyph_pool** %pool.addr, align 8
  %2 = load %struct.glyph_matrix*, %struct.glyph_matrix** %result, align 8
  %pool1 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %2, i32 0, i32 0
  store %struct.glyph_pool* %1, %struct.glyph_pool** %pool1, align 8
  %3 = load %struct.glyph_matrix*, %struct.glyph_matrix** %result, align 8
  ret %struct.glyph_matrix* %3
}

; Function Attrs: nounwind uwtable
define internal i64 @allocate_matrices_for_frame_redisplay(i64 %window, i32 %x, i32 %y, i1 zeroext %dim_only_p, i32* %window_change_flags) #0 {
entry:
  %retval = alloca %struct.dim, align 4
  %window.addr = alloca i64, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %dim_only_p.addr = alloca i8, align 1
  %window_change_flags.addr = alloca i32*, align 8
  %f = alloca %struct.frame*, align 8
  %x0 = alloca i32, align 4
  %y0 = alloca i32, align 4
  %wmax = alloca i32, align 4
  %hmax = alloca i32, align 4
  %total = alloca %struct.dim, align 4
  %dim = alloca %struct.dim, align 4
  %w = alloca %struct.window*, align 8
  %in_horz_combination_p = alloca i8, align 1
  %coerce = alloca %struct.dim, align 4
  store i64 %window, i64* %window.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %frombool = zext i1 %dim_only_p to i8
  store i8 %frombool, i8* %dim_only_p.addr, align 1
  store i32* %window_change_flags, i32** %window_change_flags.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @XWINDOW(i64 %0)
  %frame = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 1
  %1 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  store %struct.frame* %3, %struct.frame** %f, align 8
  %4 = load i32, i32* %x.addr, align 4
  store i32 %4, i32* %x0, align 4
  %5 = load i32, i32* %y.addr, align 4
  store i32 %5, i32* %y0, align 4
  store i32 0, i32* %wmax, align 4
  store i32 0, i32* %hmax, align 4
  %6 = load i64, i64* %window.addr, align 8
  %call1 = call %struct.window* @XWINDOW(i64 %6)
  %parent = getelementptr inbounds %struct.window, %struct.window* %call1, i32 0, i32 4
  %7 = load i64, i64* %parent, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %7, %call2
  br i1 %cmp, label %land.end.11, label %land.rhs

land.rhs:                                         ; preds = %entry
  %8 = load i64, i64* %window.addr, align 8
  %call3 = call %struct.window* @XWINDOW(i64 %8)
  %parent4 = getelementptr inbounds %struct.window, %struct.window* %call3, i32 0, i32 4
  %9 = load i64, i64* %parent4, align 8
  %call5 = call %struct.window* @XWINDOW(i64 %9)
  %contents = getelementptr inbounds %struct.window, %struct.window* %call5, i32 0, i32 10
  %10 = load i64, i64* %contents, align 8
  %call6 = call zeroext i1 @WINDOWP(i64 %10)
  br i1 %call6, label %land.rhs.7, label %land.end

land.rhs.7:                                       ; preds = %land.rhs
  %11 = load i64, i64* %window.addr, align 8
  %call8 = call %struct.window* @XWINDOW(i64 %11)
  %parent9 = getelementptr inbounds %struct.window, %struct.window* %call8, i32 0, i32 4
  %12 = load i64, i64* %parent9, align 8
  %call10 = call %struct.window* @XWINDOW(i64 %12)
  %horizontal = getelementptr inbounds %struct.window, %struct.window* %call10, i32 0, i32 67
  %bf.load = load i16, i16* %horizontal, align 4
  %bf.lshr = lshr i16 %bf.load, 1
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br label %land.end

land.end:                                         ; preds = %land.rhs.7, %land.rhs
  %13 = phi i1 [ false, %land.rhs ], [ %bf.cast, %land.rhs.7 ]
  br label %land.end.11

land.end.11:                                      ; preds = %land.end, %entry
  %14 = phi i1 [ false, %entry ], [ %13, %land.end ]
  %frombool12 = zext i1 %14 to i8
  store i8 %frombool12, i8* %in_horz_combination_p, align 1
  br label %do.body

do.body:                                          ; preds = %do.cond, %land.end.11
  %15 = load i64, i64* %window.addr, align 8
  %call13 = call %struct.window* @XWINDOW(i64 %15)
  store %struct.window* %call13, %struct.window** %w, align 8
  %16 = load %struct.window*, %struct.window** %w, align 8
  %contents14 = getelementptr inbounds %struct.window, %struct.window* %16, i32 0, i32 10
  %17 = load i64, i64* %contents14, align 8
  %call15 = call zeroext i1 @WINDOWP(i64 %17)
  br i1 %call15, label %if.then, label %if.else

if.then:                                          ; preds = %do.body
  %18 = load %struct.window*, %struct.window** %w, align 8
  %contents16 = getelementptr inbounds %struct.window, %struct.window* %18, i32 0, i32 10
  %19 = load i64, i64* %contents16, align 8
  %20 = load i32, i32* %x.addr, align 4
  %21 = load i32, i32* %y.addr, align 4
  %22 = load i8, i8* %dim_only_p.addr, align 1
  %tobool = trunc i8 %22 to i1
  %23 = load i32*, i32** %window_change_flags.addr, align 8
  %call17 = call i64 @allocate_matrices_for_frame_redisplay(i64 %19, i32 %20, i32 %21, i1 zeroext %tobool, i32* %23)
  %24 = bitcast %struct.dim* %coerce to i64*
  store i64 %call17, i64* %24, align 4
  %25 = bitcast %struct.dim* %dim to i8*
  %26 = bitcast %struct.dim* %coerce to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %25, i8* %26, i64 8, i32 4, i1 false)
  br label %if.end.55

if.else:                                          ; preds = %do.body
  %27 = load %struct.window*, %struct.window** %w, align 8
  %desired_matrix = getelementptr inbounds %struct.window, %struct.window* %27, i32 0, i32 25
  %28 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %cmp18 = icmp eq %struct.glyph_matrix* %28, null
  br i1 %cmp18, label %if.then.19, label %if.end

if.then.19:                                       ; preds = %if.else
  %29 = load %struct.frame*, %struct.frame** %f, align 8
  %desired_pool = getelementptr inbounds %struct.frame, %struct.frame* %29, i32 0, i32 23
  %30 = load %struct.glyph_pool*, %struct.glyph_pool** %desired_pool, align 8
  %call20 = call %struct.glyph_matrix* @new_glyph_matrix(%struct.glyph_pool* %30)
  %31 = load %struct.window*, %struct.window** %w, align 8
  %desired_matrix21 = getelementptr inbounds %struct.window, %struct.window* %31, i32 0, i32 25
  store %struct.glyph_matrix* %call20, %struct.glyph_matrix** %desired_matrix21, align 8
  %32 = load %struct.frame*, %struct.frame** %f, align 8
  %current_pool = getelementptr inbounds %struct.frame, %struct.frame* %32, i32 0, i32 22
  %33 = load %struct.glyph_pool*, %struct.glyph_pool** %current_pool, align 8
  %call22 = call %struct.glyph_matrix* @new_glyph_matrix(%struct.glyph_pool* %33)
  %34 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %34, i32 0, i32 24
  store %struct.glyph_matrix* %call22, %struct.glyph_matrix** %current_matrix, align 8
  %35 = load i32*, i32** %window_change_flags.addr, align 8
  %36 = load i32, i32* %35, align 4
  %or = or i32 %36, 1
  store i32 %or, i32* %35, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.19, %if.else
  %37 = load %struct.window*, %struct.window** %w, align 8
  %call23 = call i32 @required_matrix_width(%struct.window* %37)
  %width = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 0
  store i32 %call23, i32* %width, align 4
  %38 = load %struct.window*, %struct.window** %w, align 8
  %call24 = call i32 @required_matrix_height(%struct.window* %38)
  %height = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 1
  store i32 %call24, i32* %height, align 4
  %39 = load i32, i32* %x.addr, align 4
  %40 = load %struct.window*, %struct.window** %w, align 8
  %desired_matrix25 = getelementptr inbounds %struct.window, %struct.window* %40, i32 0, i32 25
  %41 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix25, align 8
  %matrix_x = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %41, i32 0, i32 4
  %42 = load i32, i32* %matrix_x, align 4
  %cmp26 = icmp ne i32 %39, %42
  br i1 %cmp26, label %if.then.47, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %43 = load i32, i32* %y.addr, align 4
  %44 = load %struct.window*, %struct.window** %w, align 8
  %desired_matrix27 = getelementptr inbounds %struct.window, %struct.window* %44, i32 0, i32 25
  %45 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix27, align 8
  %matrix_y = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %45, i32 0, i32 5
  %46 = load i32, i32* %matrix_y, align 4
  %cmp28 = icmp ne i32 %43, %46
  br i1 %cmp28, label %if.then.47, label %lor.lhs.false.29

lor.lhs.false.29:                                 ; preds = %lor.lhs.false
  %width30 = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 0
  %47 = load i32, i32* %width30, align 4
  %48 = load %struct.window*, %struct.window** %w, align 8
  %desired_matrix31 = getelementptr inbounds %struct.window, %struct.window* %48, i32 0, i32 25
  %49 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix31, align 8
  %matrix_w = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %49, i32 0, i32 6
  %50 = load i32, i32* %matrix_w, align 4
  %cmp32 = icmp ne i32 %47, %50
  br i1 %cmp32, label %if.then.47, label %lor.lhs.false.33

lor.lhs.false.33:                                 ; preds = %lor.lhs.false.29
  %height34 = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 1
  %51 = load i32, i32* %height34, align 4
  %52 = load %struct.window*, %struct.window** %w, align 8
  %desired_matrix35 = getelementptr inbounds %struct.window, %struct.window* %52, i32 0, i32 25
  %53 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix35, align 8
  %matrix_h = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %53, i32 0, i32 7
  %54 = load i32, i32* %matrix_h, align 4
  %cmp36 = icmp ne i32 %51, %54
  br i1 %cmp36, label %if.then.47, label %lor.lhs.false.37

lor.lhs.false.37:                                 ; preds = %lor.lhs.false.33
  %55 = load %struct.window*, %struct.window** %w, align 8
  %width38 = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 0
  %56 = load i32, i32* %width38, align 4
  %57 = load %struct.window*, %struct.window** %w, align 8
  %left_margin_cols = getelementptr inbounds %struct.window, %struct.window* %57, i32 0, i32 59
  %58 = load i32, i32* %left_margin_cols, align 4
  %call39 = call i32 @margin_glyphs_to_reserve(%struct.window* %55, i32 %56, i32 %58)
  %59 = load %struct.window*, %struct.window** %w, align 8
  %desired_matrix40 = getelementptr inbounds %struct.window, %struct.window* %59, i32 0, i32 25
  %60 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix40, align 8
  %left_margin_glyphs = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %60, i32 0, i32 13
  %61 = load i32, i32* %left_margin_glyphs, align 4
  %cmp41 = icmp ne i32 %call39, %61
  br i1 %cmp41, label %if.then.47, label %lor.lhs.false.42

lor.lhs.false.42:                                 ; preds = %lor.lhs.false.37
  %62 = load %struct.window*, %struct.window** %w, align 8
  %width43 = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 0
  %63 = load i32, i32* %width43, align 4
  %64 = load %struct.window*, %struct.window** %w, align 8
  %right_margin_cols = getelementptr inbounds %struct.window, %struct.window* %64, i32 0, i32 60
  %65 = load i32, i32* %right_margin_cols, align 4
  %call44 = call i32 @margin_glyphs_to_reserve(%struct.window* %62, i32 %63, i32 %65)
  %66 = load %struct.window*, %struct.window** %w, align 8
  %desired_matrix45 = getelementptr inbounds %struct.window, %struct.window* %66, i32 0, i32 25
  %67 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix45, align 8
  %right_margin_glyphs = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %67, i32 0, i32 14
  %68 = load i32, i32* %right_margin_glyphs, align 4
  %cmp46 = icmp ne i32 %call44, %68
  br i1 %cmp46, label %if.then.47, label %if.end.49

if.then.47:                                       ; preds = %lor.lhs.false.42, %lor.lhs.false.37, %lor.lhs.false.33, %lor.lhs.false.29, %lor.lhs.false, %if.end
  %69 = load i32*, i32** %window_change_flags.addr, align 8
  %70 = load i32, i32* %69, align 4
  %or48 = or i32 %70, 2
  store i32 %or48, i32* %69, align 4
  br label %if.end.49

if.end.49:                                        ; preds = %if.then.47, %lor.lhs.false.42
  %71 = load i8, i8* %dim_only_p.addr, align 1
  %tobool50 = trunc i8 %71 to i1
  br i1 %tobool50, label %if.end.54, label %if.then.51

if.then.51:                                       ; preds = %if.end.49
  %72 = load %struct.window*, %struct.window** %w, align 8
  %73 = load %struct.window*, %struct.window** %w, align 8
  %desired_matrix52 = getelementptr inbounds %struct.window, %struct.window* %73, i32 0, i32 25
  %74 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix52, align 8
  %75 = load i32, i32* %x.addr, align 4
  %76 = load i32, i32* %y.addr, align 4
  %77 = bitcast %struct.dim* %dim to i64*
  %78 = load i64, i64* %77, align 4
  call void @adjust_glyph_matrix(%struct.window* %72, %struct.glyph_matrix* %74, i32 %75, i32 %76, i64 %78)
  %79 = load %struct.window*, %struct.window** %w, align 8
  %80 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix53 = getelementptr inbounds %struct.window, %struct.window* %80, i32 0, i32 24
  %81 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix53, align 8
  %82 = load i32, i32* %x.addr, align 4
  %83 = load i32, i32* %y.addr, align 4
  %84 = bitcast %struct.dim* %dim to i64*
  %85 = load i64, i64* %84, align 4
  call void @adjust_glyph_matrix(%struct.window* %79, %struct.glyph_matrix* %81, i32 %82, i32 %83, i64 %85)
  br label %if.end.54

if.end.54:                                        ; preds = %if.then.51, %if.end.49
  br label %if.end.55

if.end.55:                                        ; preds = %if.end.54, %if.then
  %86 = load i8, i8* %in_horz_combination_p, align 1
  %tobool56 = trunc i8 %86 to i1
  br i1 %tobool56, label %if.then.57, label %if.else.59

if.then.57:                                       ; preds = %if.end.55
  %width58 = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 0
  %87 = load i32, i32* %width58, align 4
  %88 = load i32, i32* %x.addr, align 4
  %add = add nsw i32 %88, %87
  store i32 %add, i32* %x.addr, align 4
  br label %if.end.62

if.else.59:                                       ; preds = %if.end.55
  %height60 = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 1
  %89 = load i32, i32* %height60, align 4
  %90 = load i32, i32* %y.addr, align 4
  %add61 = add nsw i32 %90, %89
  store i32 %add61, i32* %y.addr, align 4
  br label %if.end.62

if.end.62:                                        ; preds = %if.else.59, %if.then.57
  %91 = load i32, i32* %wmax, align 4
  %width63 = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 0
  %92 = load i32, i32* %width63, align 4
  %cmp64 = icmp sgt i32 %91, %92
  br i1 %cmp64, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.62
  %93 = load i32, i32* %wmax, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end.62
  %width65 = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 0
  %94 = load i32, i32* %width65, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %93, %cond.true ], [ %94, %cond.false ]
  store i32 %cond, i32* %wmax, align 4
  %95 = load i32, i32* %hmax, align 4
  %height66 = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 1
  %96 = load i32, i32* %height66, align 4
  %cmp67 = icmp sgt i32 %95, %96
  br i1 %cmp67, label %cond.true.68, label %cond.false.69

cond.true.68:                                     ; preds = %cond.end
  %97 = load i32, i32* %hmax, align 4
  br label %cond.end.71

cond.false.69:                                    ; preds = %cond.end
  %height70 = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 1
  %98 = load i32, i32* %height70, align 4
  br label %cond.end.71

cond.end.71:                                      ; preds = %cond.false.69, %cond.true.68
  %cond72 = phi i32 [ %97, %cond.true.68 ], [ %98, %cond.false.69 ]
  store i32 %cond72, i32* %hmax, align 4
  %99 = load %struct.window*, %struct.window** %w, align 8
  %next = getelementptr inbounds %struct.window, %struct.window* %99, i32 0, i32 2
  %100 = load i64, i64* %next, align 8
  store i64 %100, i64* %window.addr, align 8
  br label %do.cond

do.cond:                                          ; preds = %cond.end.71
  %101 = load i64, i64* %window.addr, align 8
  %call73 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp74 = icmp eq i64 %101, %call73
  %lnot = xor i1 %cmp74, true
  br i1 %lnot, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %102 = load i8, i8* %in_horz_combination_p, align 1
  %tobool75 = trunc i8 %102 to i1
  br i1 %tobool75, label %if.then.76, label %if.else.80

if.then.76:                                       ; preds = %do.end
  %103 = load i32, i32* %x.addr, align 4
  %104 = load i32, i32* %x0, align 4
  %sub77 = sub nsw i32 %103, %104
  %width78 = getelementptr inbounds %struct.dim, %struct.dim* %total, i32 0, i32 0
  store i32 %sub77, i32* %width78, align 4
  %105 = load i32, i32* %hmax, align 4
  %height79 = getelementptr inbounds %struct.dim, %struct.dim* %total, i32 0, i32 1
  store i32 %105, i32* %height79, align 4
  br label %if.end.84

if.else.80:                                       ; preds = %do.end
  %106 = load i32, i32* %wmax, align 4
  %width81 = getelementptr inbounds %struct.dim, %struct.dim* %total, i32 0, i32 0
  store i32 %106, i32* %width81, align 4
  %107 = load i32, i32* %y.addr, align 4
  %108 = load i32, i32* %y0, align 4
  %sub82 = sub nsw i32 %107, %108
  %height83 = getelementptr inbounds %struct.dim, %struct.dim* %total, i32 0, i32 1
  store i32 %sub82, i32* %height83, align 4
  br label %if.end.84

if.end.84:                                        ; preds = %if.else.80, %if.then.76
  %109 = bitcast %struct.dim* %retval to i8*
  %110 = bitcast %struct.dim* %total to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %109, i8* %110, i64 8, i32 4, i1 false)
  %111 = bitcast %struct.dim* %retval to i64*
  %112 = load i64, i64* %111, align 4
  ret i64 %112
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @realloc_glyph_pool(%struct.glyph_pool* %pool, i64 %matrix_dim.coerce) #0 {
entry:
  %matrix_dim = alloca %struct.dim, align 8
  %pool.addr = alloca %struct.glyph_pool*, align 8
  %needed = alloca i64, align 8
  %changed_p = alloca i8, align 1
  %old_nglyphs = alloca i64, align 8
  %0 = bitcast %struct.dim* %matrix_dim to i64*
  store i64 %matrix_dim.coerce, i64* %0, align 8
  store %struct.glyph_pool* %pool, %struct.glyph_pool** %pool.addr, align 8
  %1 = load %struct.glyph_pool*, %struct.glyph_pool** %pool.addr, align 8
  %glyphs = getelementptr inbounds %struct.glyph_pool, %struct.glyph_pool* %1, i32 0, i32 0
  %2 = load %struct.glyph*, %struct.glyph** %glyphs, align 8
  %cmp = icmp eq %struct.glyph* %2, null
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %height = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %3 = load i32, i32* %height, align 4
  %4 = load %struct.glyph_pool*, %struct.glyph_pool** %pool.addr, align 8
  %nrows = getelementptr inbounds %struct.glyph_pool, %struct.glyph_pool* %4, i32 0, i32 2
  %5 = load i32, i32* %nrows, align 4
  %cmp1 = icmp ne i32 %3, %5
  br i1 %cmp1, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false
  %width = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %6 = load i32, i32* %width, align 4
  %7 = load %struct.glyph_pool*, %struct.glyph_pool** %pool.addr, align 8
  %ncolumns = getelementptr inbounds %struct.glyph_pool, %struct.glyph_pool* %7, i32 0, i32 3
  %8 = load i32, i32* %ncolumns, align 4
  %cmp2 = icmp ne i32 %6, %8
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %9 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp2, %lor.rhs ]
  %frombool = zext i1 %9 to i8
  store i8 %frombool, i8* %changed_p, align 1
  br i1 false, label %cond.true, label %cond.false.766

cond.true:                                        ; preds = %lor.end
  br i1 false, label %cond.true.3, label %cond.false.438

cond.true.3:                                      ; preds = %cond.true
  %width4 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %10 = load i32, i32* %width4, align 4
  %conv = trunc i32 %10 to i8
  %conv5 = sext i8 %conv to i32
  %mul = mul nsw i32 0, %conv5
  %height6 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %11 = load i32, i32* %height6, align 4
  %conv7 = trunc i32 %11 to i8
  %conv8 = sext i8 %conv7 to i32
  %add = add nsw i32 %mul, %conv8
  %mul9 = mul nsw i32 0, %add
  %sub = sub nsw i32 %mul9, 1
  %cmp10 = icmp slt i32 %sub, 0
  br i1 %cmp10, label %cond.true.12, label %cond.false

cond.true.12:                                     ; preds = %cond.true.3
  %width13 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %12 = load i32, i32* %width13, align 4
  %conv14 = trunc i32 %12 to i8
  %conv15 = sext i8 %conv14 to i32
  %mul16 = mul nsw i32 0, %conv15
  %height17 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %13 = load i32, i32* %height17, align 4
  %conv18 = trunc i32 %13 to i8
  %conv19 = sext i8 %conv18 to i32
  %add20 = add nsw i32 %mul16, %conv19
  %mul21 = mul nsw i32 0, %add20
  %add22 = add nsw i32 %mul21, 0
  %neg = xor i32 %add22, -1
  %cmp23 = icmp eq i32 %neg, -1
  %conv24 = zext i1 %cmp23 to i32
  %sub25 = sub nsw i32 0, %conv24
  %width26 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %14 = load i32, i32* %width26, align 4
  %conv27 = trunc i32 %14 to i8
  %conv28 = sext i8 %conv27 to i32
  %mul29 = mul nsw i32 0, %conv28
  %height30 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %15 = load i32, i32* %height30, align 4
  %conv31 = trunc i32 %15 to i8
  %conv32 = sext i8 %conv31 to i32
  %add33 = add nsw i32 %mul29, %conv32
  %mul34 = mul nsw i32 0, %add33
  %add35 = add nsw i32 %mul34, 1
  %shl = shl i32 %add35, 30
  %sub36 = sub nsw i32 %shl, 1
  %mul37 = mul nsw i32 %sub36, 2
  %add38 = add nsw i32 %mul37, 1
  %sub39 = sub nsw i32 %sub25, %add38
  br label %cond.end

cond.false:                                       ; preds = %cond.true.3
  %width40 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %16 = load i32, i32* %width40, align 4
  %conv41 = trunc i32 %16 to i8
  %conv42 = sext i8 %conv41 to i32
  %mul43 = mul nsw i32 0, %conv42
  %height44 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %17 = load i32, i32* %height44, align 4
  %conv45 = trunc i32 %17 to i8
  %conv46 = sext i8 %conv45 to i32
  %add47 = add nsw i32 %mul43, %conv46
  %mul48 = mul nsw i32 0, %add47
  %add49 = add nsw i32 %mul48, 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.12
  %cond = phi i32 [ %sub39, %cond.true.12 ], [ %add49, %cond.false ]
  %cmp50 = icmp eq i32 %cond, 0
  br i1 %cmp50, label %land.lhs.true, label %lor.lhs.false.75

land.lhs.true:                                    ; preds = %cond.end
  %height52 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %18 = load i32, i32* %height52, align 4
  %conv53 = trunc i32 %18 to i8
  %conv54 = sext i8 %conv53 to i32
  %cmp55 = icmp slt i32 %conv54, 0
  br i1 %cmp55, label %land.lhs.true.57, label %lor.lhs.false.63

land.lhs.true.57:                                 ; preds = %land.lhs.true
  %width58 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %19 = load i32, i32* %width58, align 4
  %conv59 = trunc i32 %19 to i8
  %conv60 = sext i8 %conv59 to i32
  %cmp61 = icmp slt i32 0, %conv60
  br i1 %cmp61, label %cond.true.368, label %lor.lhs.false.63

lor.lhs.false.63:                                 ; preds = %land.lhs.true.57, %land.lhs.true
  %width64 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %20 = load i32, i32* %width64, align 4
  %conv65 = trunc i32 %20 to i8
  %conv66 = sext i8 %conv65 to i32
  %cmp67 = icmp slt i32 %conv66, 0
  br i1 %cmp67, label %land.lhs.true.69, label %lor.lhs.false.75

land.lhs.true.69:                                 ; preds = %lor.lhs.false.63
  %height70 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %21 = load i32, i32* %height70, align 4
  %conv71 = trunc i32 %21 to i8
  %conv72 = sext i8 %conv71 to i32
  %cmp73 = icmp slt i32 0, %conv72
  br i1 %cmp73, label %cond.true.368, label %lor.lhs.false.75

lor.lhs.false.75:                                 ; preds = %land.lhs.true.69, %lor.lhs.false.63, %cond.end
  %width76 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %22 = load i32, i32* %width76, align 4
  %conv77 = trunc i32 %22 to i8
  %conv78 = sext i8 %conv77 to i32
  %cmp79 = icmp slt i32 %conv78, 0
  br i1 %cmp79, label %cond.true.81, label %cond.false.208

cond.true.81:                                     ; preds = %lor.lhs.false.75
  %height82 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %23 = load i32, i32* %height82, align 4
  %conv83 = trunc i32 %23 to i8
  %conv84 = sext i8 %conv83 to i32
  %cmp85 = icmp slt i32 %conv84, 0
  br i1 %cmp85, label %cond.true.87, label %cond.false.136

cond.true.87:                                     ; preds = %cond.true.81
  %height88 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %24 = load i32, i32* %height88, align 4
  %conv89 = trunc i32 %24 to i8
  %conv90 = sext i8 %conv89 to i32
  %width91 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %25 = load i32, i32* %width91, align 4
  %conv92 = trunc i32 %25 to i8
  %conv93 = sext i8 %conv92 to i32
  %mul94 = mul nsw i32 0, %conv93
  %height95 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %26 = load i32, i32* %height95, align 4
  %conv96 = trunc i32 %26 to i8
  %conv97 = sext i8 %conv96 to i32
  %add98 = add nsw i32 %mul94, %conv97
  %mul99 = mul nsw i32 0, %add98
  %sub100 = sub nsw i32 %mul99, 1
  %cmp101 = icmp slt i32 %sub100, 0
  br i1 %cmp101, label %cond.true.103, label %cond.false.118

cond.true.103:                                    ; preds = %cond.true.87
  %width104 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %27 = load i32, i32* %width104, align 4
  %conv105 = trunc i32 %27 to i8
  %conv106 = sext i8 %conv105 to i32
  %mul107 = mul nsw i32 0, %conv106
  %height108 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %28 = load i32, i32* %height108, align 4
  %conv109 = trunc i32 %28 to i8
  %conv110 = sext i8 %conv109 to i32
  %add111 = add nsw i32 %mul107, %conv110
  %mul112 = mul nsw i32 0, %add111
  %add113 = add nsw i32 %mul112, 1
  %shl114 = shl i32 %add113, 30
  %sub115 = sub nsw i32 %shl114, 1
  %mul116 = mul nsw i32 %sub115, 2
  %add117 = add nsw i32 %mul116, 1
  br label %cond.end.129

cond.false.118:                                   ; preds = %cond.true.87
  %width119 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %29 = load i32, i32* %width119, align 4
  %conv120 = trunc i32 %29 to i8
  %conv121 = sext i8 %conv120 to i32
  %mul122 = mul nsw i32 0, %conv121
  %height123 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %30 = load i32, i32* %height123, align 4
  %conv124 = trunc i32 %30 to i8
  %conv125 = sext i8 %conv124 to i32
  %add126 = add nsw i32 %mul122, %conv125
  %mul127 = mul nsw i32 0, %add126
  %sub128 = sub nsw i32 %mul127, 1
  br label %cond.end.129

cond.end.129:                                     ; preds = %cond.false.118, %cond.true.103
  %cond130 = phi i32 [ %add117, %cond.true.103 ], [ %sub128, %cond.false.118 ]
  %width131 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %31 = load i32, i32* %width131, align 4
  %conv132 = trunc i32 %31 to i8
  %conv133 = sext i8 %conv132 to i32
  %div = sdiv i32 %cond130, %conv133
  %cmp134 = icmp slt i32 %conv90, %div
  br i1 %cmp134, label %cond.true.368, label %lor.lhs.false.336

cond.false.136:                                   ; preds = %cond.true.81
  %width137 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %32 = load i32, i32* %width137, align 4
  %conv138 = trunc i32 %32 to i8
  %conv139 = sext i8 %conv138 to i32
  %cmp140 = icmp eq i32 %conv139, -1
  br i1 %cmp140, label %cond.true.142, label %cond.false.143

cond.true.142:                                    ; preds = %cond.false.136
  br i1 false, label %cond.true.368, label %lor.lhs.false.336

cond.false.143:                                   ; preds = %cond.false.136
  %width144 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %33 = load i32, i32* %width144, align 4
  %conv145 = trunc i32 %33 to i8
  %conv146 = sext i8 %conv145 to i32
  %mul147 = mul nsw i32 0, %conv146
  %height148 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %34 = load i32, i32* %height148, align 4
  %conv149 = trunc i32 %34 to i8
  %conv150 = sext i8 %conv149 to i32
  %add151 = add nsw i32 %mul147, %conv150
  %mul152 = mul nsw i32 0, %add151
  %sub153 = sub nsw i32 %mul152, 1
  %cmp154 = icmp slt i32 %sub153, 0
  br i1 %cmp154, label %cond.true.156, label %cond.false.186

cond.true.156:                                    ; preds = %cond.false.143
  %width157 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %35 = load i32, i32* %width157, align 4
  %conv158 = trunc i32 %35 to i8
  %conv159 = sext i8 %conv158 to i32
  %mul160 = mul nsw i32 0, %conv159
  %height161 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %36 = load i32, i32* %height161, align 4
  %conv162 = trunc i32 %36 to i8
  %conv163 = sext i8 %conv162 to i32
  %add164 = add nsw i32 %mul160, %conv163
  %mul165 = mul nsw i32 0, %add164
  %add166 = add nsw i32 %mul165, 0
  %neg167 = xor i32 %add166, -1
  %cmp168 = icmp eq i32 %neg167, -1
  %conv169 = zext i1 %cmp168 to i32
  %sub170 = sub nsw i32 0, %conv169
  %width171 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %37 = load i32, i32* %width171, align 4
  %conv172 = trunc i32 %37 to i8
  %conv173 = sext i8 %conv172 to i32
  %mul174 = mul nsw i32 0, %conv173
  %height175 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %38 = load i32, i32* %height175, align 4
  %conv176 = trunc i32 %38 to i8
  %conv177 = sext i8 %conv176 to i32
  %add178 = add nsw i32 %mul174, %conv177
  %mul179 = mul nsw i32 0, %add178
  %add180 = add nsw i32 %mul179, 1
  %shl181 = shl i32 %add180, 30
  %sub182 = sub nsw i32 %shl181, 1
  %mul183 = mul nsw i32 %sub182, 2
  %add184 = add nsw i32 %mul183, 1
  %sub185 = sub nsw i32 %sub170, %add184
  br label %cond.end.197

cond.false.186:                                   ; preds = %cond.false.143
  %width187 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %39 = load i32, i32* %width187, align 4
  %conv188 = trunc i32 %39 to i8
  %conv189 = sext i8 %conv188 to i32
  %mul190 = mul nsw i32 0, %conv189
  %height191 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %40 = load i32, i32* %height191, align 4
  %conv192 = trunc i32 %40 to i8
  %conv193 = sext i8 %conv192 to i32
  %add194 = add nsw i32 %mul190, %conv193
  %mul195 = mul nsw i32 0, %add194
  %add196 = add nsw i32 %mul195, 0
  br label %cond.end.197

cond.end.197:                                     ; preds = %cond.false.186, %cond.true.156
  %cond198 = phi i32 [ %sub185, %cond.true.156 ], [ %add196, %cond.false.186 ]
  %width199 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %41 = load i32, i32* %width199, align 4
  %conv200 = trunc i32 %41 to i8
  %conv201 = sext i8 %conv200 to i32
  %div202 = sdiv i32 %cond198, %conv201
  %height203 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %42 = load i32, i32* %height203, align 4
  %conv204 = trunc i32 %42 to i8
  %conv205 = sext i8 %conv204 to i32
  %cmp206 = icmp slt i32 %div202, %conv205
  br i1 %cmp206, label %cond.true.368, label %lor.lhs.false.336

cond.false.208:                                   ; preds = %lor.lhs.false.75
  %width209 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %43 = load i32, i32* %width209, align 4
  %conv210 = trunc i32 %43 to i8
  %conv211 = sext i8 %conv210 to i32
  %cmp212 = icmp eq i32 %conv211, 0
  br i1 %cmp212, label %cond.true.214, label %cond.false.215

cond.true.214:                                    ; preds = %cond.false.208
  br i1 false, label %cond.true.368, label %lor.lhs.false.336

cond.false.215:                                   ; preds = %cond.false.208
  %height216 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %44 = load i32, i32* %height216, align 4
  %conv217 = trunc i32 %44 to i8
  %conv218 = sext i8 %conv217 to i32
  %cmp219 = icmp slt i32 %conv218, 0
  br i1 %cmp219, label %cond.true.221, label %cond.false.286

cond.true.221:                                    ; preds = %cond.false.215
  %height222 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %45 = load i32, i32* %height222, align 4
  %conv223 = trunc i32 %45 to i8
  %conv224 = sext i8 %conv223 to i32
  %width225 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %46 = load i32, i32* %width225, align 4
  %conv226 = trunc i32 %46 to i8
  %conv227 = sext i8 %conv226 to i32
  %mul228 = mul nsw i32 0, %conv227
  %height229 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %47 = load i32, i32* %height229, align 4
  %conv230 = trunc i32 %47 to i8
  %conv231 = sext i8 %conv230 to i32
  %add232 = add nsw i32 %mul228, %conv231
  %mul233 = mul nsw i32 0, %add232
  %sub234 = sub nsw i32 %mul233, 1
  %cmp235 = icmp slt i32 %sub234, 0
  br i1 %cmp235, label %cond.true.237, label %cond.false.267

cond.true.237:                                    ; preds = %cond.true.221
  %width238 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %48 = load i32, i32* %width238, align 4
  %conv239 = trunc i32 %48 to i8
  %conv240 = sext i8 %conv239 to i32
  %mul241 = mul nsw i32 0, %conv240
  %height242 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %49 = load i32, i32* %height242, align 4
  %conv243 = trunc i32 %49 to i8
  %conv244 = sext i8 %conv243 to i32
  %add245 = add nsw i32 %mul241, %conv244
  %mul246 = mul nsw i32 0, %add245
  %add247 = add nsw i32 %mul246, 0
  %neg248 = xor i32 %add247, -1
  %cmp249 = icmp eq i32 %neg248, -1
  %conv250 = zext i1 %cmp249 to i32
  %sub251 = sub nsw i32 0, %conv250
  %width252 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %50 = load i32, i32* %width252, align 4
  %conv253 = trunc i32 %50 to i8
  %conv254 = sext i8 %conv253 to i32
  %mul255 = mul nsw i32 0, %conv254
  %height256 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %51 = load i32, i32* %height256, align 4
  %conv257 = trunc i32 %51 to i8
  %conv258 = sext i8 %conv257 to i32
  %add259 = add nsw i32 %mul255, %conv258
  %mul260 = mul nsw i32 0, %add259
  %add261 = add nsw i32 %mul260, 1
  %shl262 = shl i32 %add261, 30
  %sub263 = sub nsw i32 %shl262, 1
  %mul264 = mul nsw i32 %sub263, 2
  %add265 = add nsw i32 %mul264, 1
  %sub266 = sub nsw i32 %sub251, %add265
  br label %cond.end.278

cond.false.267:                                   ; preds = %cond.true.221
  %width268 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %52 = load i32, i32* %width268, align 4
  %conv269 = trunc i32 %52 to i8
  %conv270 = sext i8 %conv269 to i32
  %mul271 = mul nsw i32 0, %conv270
  %height272 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %53 = load i32, i32* %height272, align 4
  %conv273 = trunc i32 %53 to i8
  %conv274 = sext i8 %conv273 to i32
  %add275 = add nsw i32 %mul271, %conv274
  %mul276 = mul nsw i32 0, %add275
  %add277 = add nsw i32 %mul276, 0
  br label %cond.end.278

cond.end.278:                                     ; preds = %cond.false.267, %cond.true.237
  %cond279 = phi i32 [ %sub266, %cond.true.237 ], [ %add277, %cond.false.267 ]
  %width280 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %54 = load i32, i32* %width280, align 4
  %conv281 = trunc i32 %54 to i8
  %conv282 = sext i8 %conv281 to i32
  %div283 = sdiv i32 %cond279, %conv282
  %cmp284 = icmp slt i32 %conv224, %div283
  br i1 %cmp284, label %cond.true.368, label %lor.lhs.false.336

cond.false.286:                                   ; preds = %cond.false.215
  %width287 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %55 = load i32, i32* %width287, align 4
  %conv288 = trunc i32 %55 to i8
  %conv289 = sext i8 %conv288 to i32
  %mul290 = mul nsw i32 0, %conv289
  %height291 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %56 = load i32, i32* %height291, align 4
  %conv292 = trunc i32 %56 to i8
  %conv293 = sext i8 %conv292 to i32
  %add294 = add nsw i32 %mul290, %conv293
  %mul295 = mul nsw i32 0, %add294
  %sub296 = sub nsw i32 %mul295, 1
  %cmp297 = icmp slt i32 %sub296, 0
  br i1 %cmp297, label %cond.true.299, label %cond.false.314

cond.true.299:                                    ; preds = %cond.false.286
  %width300 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %57 = load i32, i32* %width300, align 4
  %conv301 = trunc i32 %57 to i8
  %conv302 = sext i8 %conv301 to i32
  %mul303 = mul nsw i32 0, %conv302
  %height304 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %58 = load i32, i32* %height304, align 4
  %conv305 = trunc i32 %58 to i8
  %conv306 = sext i8 %conv305 to i32
  %add307 = add nsw i32 %mul303, %conv306
  %mul308 = mul nsw i32 0, %add307
  %add309 = add nsw i32 %mul308, 1
  %shl310 = shl i32 %add309, 30
  %sub311 = sub nsw i32 %shl310, 1
  %mul312 = mul nsw i32 %sub311, 2
  %add313 = add nsw i32 %mul312, 1
  br label %cond.end.325

cond.false.314:                                   ; preds = %cond.false.286
  %width315 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %59 = load i32, i32* %width315, align 4
  %conv316 = trunc i32 %59 to i8
  %conv317 = sext i8 %conv316 to i32
  %mul318 = mul nsw i32 0, %conv317
  %height319 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %60 = load i32, i32* %height319, align 4
  %conv320 = trunc i32 %60 to i8
  %conv321 = sext i8 %conv320 to i32
  %add322 = add nsw i32 %mul318, %conv321
  %mul323 = mul nsw i32 0, %add322
  %sub324 = sub nsw i32 %mul323, 1
  br label %cond.end.325

cond.end.325:                                     ; preds = %cond.false.314, %cond.true.299
  %cond326 = phi i32 [ %add313, %cond.true.299 ], [ %sub324, %cond.false.314 ]
  %width327 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %61 = load i32, i32* %width327, align 4
  %conv328 = trunc i32 %61 to i8
  %conv329 = sext i8 %conv328 to i32
  %div330 = sdiv i32 %cond326, %conv329
  %height331 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %62 = load i32, i32* %height331, align 4
  %conv332 = trunc i32 %62 to i8
  %conv333 = sext i8 %conv332 to i32
  %cmp334 = icmp slt i32 %div330, %conv333
  br i1 %cmp334, label %cond.true.368, label %lor.lhs.false.336

lor.lhs.false.336:                                ; preds = %cond.end.325, %cond.end.278, %cond.true.214, %cond.end.197, %cond.true.142, %cond.end.129
  %height337 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %63 = load i32, i32* %height337, align 4
  %conv338 = trunc i32 %63 to i8
  %conv339 = sext i8 %conv338 to i32
  %width340 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %64 = load i32, i32* %width340, align 4
  %conv341 = trunc i32 %64 to i8
  %conv342 = sext i8 %conv341 to i32
  %mul343 = mul nsw i32 %conv339, %conv342
  %mul344 = mul nsw i32 0, %mul343
  %sub345 = sub nsw i32 %mul344, 1
  %cmp346 = icmp slt i32 %sub345, 0
  br i1 %cmp346, label %land.lhs.true.348, label %lor.lhs.false.358

land.lhs.true.348:                                ; preds = %lor.lhs.false.336
  %height349 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %65 = load i32, i32* %height349, align 4
  %conv350 = trunc i32 %65 to i8
  %conv351 = sext i8 %conv350 to i32
  %width352 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %66 = load i32, i32* %width352, align 4
  %conv353 = trunc i32 %66 to i8
  %conv354 = sext i8 %conv353 to i32
  %mul355 = mul nsw i32 %conv351, %conv354
  %cmp356 = icmp slt i32 %mul355, -128
  br i1 %cmp356, label %cond.true.368, label %lor.lhs.false.358

lor.lhs.false.358:                                ; preds = %land.lhs.true.348, %lor.lhs.false.336
  %height359 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %67 = load i32, i32* %height359, align 4
  %conv360 = trunc i32 %67 to i8
  %conv361 = sext i8 %conv360 to i32
  %width362 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %68 = load i32, i32* %width362, align 4
  %conv363 = trunc i32 %68 to i8
  %conv364 = sext i8 %conv363 to i32
  %mul365 = mul nsw i32 %conv361, %conv364
  %cmp366 = icmp slt i32 127, %mul365
  br i1 %cmp366, label %cond.true.368, label %cond.false.403

cond.true.368:                                    ; preds = %lor.lhs.false.358, %land.lhs.true.348, %cond.end.325, %cond.end.278, %cond.true.214, %cond.end.197, %cond.true.142, %cond.end.129, %land.lhs.true.69, %land.lhs.true.57
  %height369 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %69 = load i32, i32* %height369, align 4
  %conv370 = trunc i32 %69 to i8
  %conv371 = zext i8 %conv370 to i32
  %width372 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %70 = load i32, i32* %width372, align 4
  %conv373 = trunc i32 %70 to i8
  %conv374 = zext i8 %conv373 to i32
  %mul375 = mul nsw i32 %conv371, %conv374
  %cmp376 = icmp sle i32 %mul375, 127
  br i1 %cmp376, label %cond.true.378, label %cond.false.388

cond.true.378:                                    ; preds = %cond.true.368
  %height379 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %71 = load i32, i32* %height379, align 4
  %conv380 = trunc i32 %71 to i8
  %conv381 = zext i8 %conv380 to i32
  %width382 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %72 = load i32, i32* %width382, align 4
  %conv383 = trunc i32 %72 to i8
  %conv384 = zext i8 %conv383 to i32
  %mul385 = mul nsw i32 %conv381, %conv384
  %conv386 = trunc i32 %mul385 to i8
  %conv387 = sext i8 %conv386 to i32
  br label %cond.end.400

cond.false.388:                                   ; preds = %cond.true.368
  %height389 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %73 = load i32, i32* %height389, align 4
  %conv390 = trunc i32 %73 to i8
  %conv391 = zext i8 %conv390 to i32
  %width392 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %74 = load i32, i32* %width392, align 4
  %conv393 = trunc i32 %74 to i8
  %conv394 = zext i8 %conv393 to i32
  %mul395 = mul nsw i32 %conv391, %conv394
  %sub396 = sub nsw i32 %mul395, -128
  %conv397 = trunc i32 %sub396 to i8
  %conv398 = sext i8 %conv397 to i32
  %add399 = add nsw i32 %conv398, -128
  br label %cond.end.400

cond.end.400:                                     ; preds = %cond.false.388, %cond.true.378
  %cond401 = phi i32 [ %conv387, %cond.true.378 ], [ %add399, %cond.false.388 ]
  %conv402 = sext i32 %cond401 to i64
  store i64 %conv402, i64* %needed, align 8
  br i1 true, label %if.then, label %if.end

cond.false.403:                                   ; preds = %lor.lhs.false.358
  %height404 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %75 = load i32, i32* %height404, align 4
  %conv405 = trunc i32 %75 to i8
  %conv406 = zext i8 %conv405 to i32
  %width407 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %76 = load i32, i32* %width407, align 4
  %conv408 = trunc i32 %76 to i8
  %conv409 = zext i8 %conv408 to i32
  %mul410 = mul nsw i32 %conv406, %conv409
  %cmp411 = icmp sle i32 %mul410, 127
  br i1 %cmp411, label %cond.true.413, label %cond.false.423

cond.true.413:                                    ; preds = %cond.false.403
  %height414 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %77 = load i32, i32* %height414, align 4
  %conv415 = trunc i32 %77 to i8
  %conv416 = zext i8 %conv415 to i32
  %width417 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %78 = load i32, i32* %width417, align 4
  %conv418 = trunc i32 %78 to i8
  %conv419 = zext i8 %conv418 to i32
  %mul420 = mul nsw i32 %conv416, %conv419
  %conv421 = trunc i32 %mul420 to i8
  %conv422 = sext i8 %conv421 to i32
  br label %cond.end.435

cond.false.423:                                   ; preds = %cond.false.403
  %height424 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %79 = load i32, i32* %height424, align 4
  %conv425 = trunc i32 %79 to i8
  %conv426 = zext i8 %conv425 to i32
  %width427 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %80 = load i32, i32* %width427, align 4
  %conv428 = trunc i32 %80 to i8
  %conv429 = zext i8 %conv428 to i32
  %mul430 = mul nsw i32 %conv426, %conv429
  %sub431 = sub nsw i32 %mul430, -128
  %conv432 = trunc i32 %sub431 to i8
  %conv433 = sext i8 %conv432 to i32
  %add434 = add nsw i32 %conv433, -128
  br label %cond.end.435

cond.end.435:                                     ; preds = %cond.false.423, %cond.true.413
  %cond436 = phi i32 [ %conv422, %cond.true.413 ], [ %add434, %cond.false.423 ]
  %conv437 = sext i32 %cond436 to i64
  store i64 %conv437, i64* %needed, align 8
  br i1 false, label %if.then, label %if.end

cond.false.438:                                   ; preds = %cond.true
  %width439 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %81 = load i32, i32* %width439, align 4
  %mul440 = mul nsw i32 0, %81
  %height441 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %82 = load i32, i32* %height441, align 4
  %add442 = add nsw i32 %mul440, %82
  %mul443 = mul nsw i32 0, %add442
  %sub444 = sub nsw i32 %mul443, 1
  %cmp445 = icmp slt i32 %sub444, 0
  br i1 %cmp445, label %cond.true.447, label %cond.false.469

cond.true.447:                                    ; preds = %cond.false.438
  %width448 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %83 = load i32, i32* %width448, align 4
  %mul449 = mul nsw i32 0, %83
  %height450 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %84 = load i32, i32* %height450, align 4
  %add451 = add nsw i32 %mul449, %84
  %mul452 = mul nsw i32 0, %add451
  %add453 = add nsw i32 %mul452, 0
  %neg454 = xor i32 %add453, -1
  %cmp455 = icmp eq i32 %neg454, -1
  %conv456 = zext i1 %cmp455 to i32
  %sub457 = sub nsw i32 0, %conv456
  %width458 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %85 = load i32, i32* %width458, align 4
  %mul459 = mul nsw i32 0, %85
  %height460 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %86 = load i32, i32* %height460, align 4
  %add461 = add nsw i32 %mul459, %86
  %mul462 = mul nsw i32 0, %add461
  %add463 = add nsw i32 %mul462, 1
  %shl464 = shl i32 %add463, 30
  %sub465 = sub nsw i32 %shl464, 1
  %mul466 = mul nsw i32 %sub465, 2
  %add467 = add nsw i32 %mul466, 1
  %sub468 = sub nsw i32 %sub457, %add467
  br label %cond.end.476

cond.false.469:                                   ; preds = %cond.false.438
  %width470 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %87 = load i32, i32* %width470, align 4
  %mul471 = mul nsw i32 0, %87
  %height472 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %88 = load i32, i32* %height472, align 4
  %add473 = add nsw i32 %mul471, %88
  %mul474 = mul nsw i32 0, %add473
  %add475 = add nsw i32 %mul474, 0
  br label %cond.end.476

cond.end.476:                                     ; preds = %cond.false.469, %cond.true.447
  %cond477 = phi i32 [ %sub468, %cond.true.447 ], [ %add475, %cond.false.469 ]
  %cmp478 = icmp eq i32 %cond477, 0
  br i1 %cmp478, label %land.lhs.true.480, label %lor.lhs.false.496

land.lhs.true.480:                                ; preds = %cond.end.476
  %height481 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %89 = load i32, i32* %height481, align 4
  %cmp482 = icmp slt i32 %89, 0
  br i1 %cmp482, label %land.lhs.true.484, label %lor.lhs.false.488

land.lhs.true.484:                                ; preds = %land.lhs.true.480
  %width485 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %90 = load i32, i32* %width485, align 4
  %cmp486 = icmp slt i32 0, %90
  br i1 %cmp486, label %cond.true.696, label %lor.lhs.false.488

lor.lhs.false.488:                                ; preds = %land.lhs.true.484, %land.lhs.true.480
  %width489 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %91 = load i32, i32* %width489, align 4
  %cmp490 = icmp slt i32 %91, 0
  br i1 %cmp490, label %land.lhs.true.492, label %lor.lhs.false.496

land.lhs.true.492:                                ; preds = %lor.lhs.false.488
  %height493 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %92 = load i32, i32* %height493, align 4
  %cmp494 = icmp slt i32 0, %92
  br i1 %cmp494, label %cond.true.696, label %lor.lhs.false.496

lor.lhs.false.496:                                ; preds = %land.lhs.true.492, %lor.lhs.false.488, %cond.end.476
  %width497 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %93 = load i32, i32* %width497, align 4
  %cmp498 = icmp slt i32 %93, 0
  br i1 %cmp498, label %cond.true.500, label %cond.false.588

cond.true.500:                                    ; preds = %lor.lhs.false.496
  %height501 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %94 = load i32, i32* %height501, align 4
  %cmp502 = icmp slt i32 %94, 0
  br i1 %cmp502, label %cond.true.504, label %cond.false.538

cond.true.504:                                    ; preds = %cond.true.500
  %height505 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %95 = load i32, i32* %height505, align 4
  %width506 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %96 = load i32, i32* %width506, align 4
  %mul507 = mul nsw i32 0, %96
  %height508 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %97 = load i32, i32* %height508, align 4
  %add509 = add nsw i32 %mul507, %97
  %mul510 = mul nsw i32 0, %add509
  %sub511 = sub nsw i32 %mul510, 1
  %cmp512 = icmp slt i32 %sub511, 0
  br i1 %cmp512, label %cond.true.514, label %cond.false.525

cond.true.514:                                    ; preds = %cond.true.504
  %width515 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %98 = load i32, i32* %width515, align 4
  %mul516 = mul nsw i32 0, %98
  %height517 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %99 = load i32, i32* %height517, align 4
  %add518 = add nsw i32 %mul516, %99
  %mul519 = mul nsw i32 0, %add518
  %add520 = add nsw i32 %mul519, 1
  %shl521 = shl i32 %add520, 30
  %sub522 = sub nsw i32 %shl521, 1
  %mul523 = mul nsw i32 %sub522, 2
  %add524 = add nsw i32 %mul523, 1
  br label %cond.end.532

cond.false.525:                                   ; preds = %cond.true.504
  %width526 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %100 = load i32, i32* %width526, align 4
  %mul527 = mul nsw i32 0, %100
  %height528 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %101 = load i32, i32* %height528, align 4
  %add529 = add nsw i32 %mul527, %101
  %mul530 = mul nsw i32 0, %add529
  %sub531 = sub nsw i32 %mul530, 1
  br label %cond.end.532

cond.end.532:                                     ; preds = %cond.false.525, %cond.true.514
  %cond533 = phi i32 [ %add524, %cond.true.514 ], [ %sub531, %cond.false.525 ]
  %width534 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %102 = load i32, i32* %width534, align 4
  %div535 = sdiv i32 %cond533, %102
  %cmp536 = icmp slt i32 %95, %div535
  br i1 %cmp536, label %cond.true.696, label %lor.lhs.false.676

cond.false.538:                                   ; preds = %cond.true.500
  %width539 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %103 = load i32, i32* %width539, align 4
  %cmp540 = icmp eq i32 %103, -1
  br i1 %cmp540, label %cond.true.542, label %cond.false.543

cond.true.542:                                    ; preds = %cond.false.538
  br i1 false, label %cond.true.696, label %lor.lhs.false.676

cond.false.543:                                   ; preds = %cond.false.538
  %width544 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %104 = load i32, i32* %width544, align 4
  %mul545 = mul nsw i32 0, %104
  %height546 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %105 = load i32, i32* %height546, align 4
  %add547 = add nsw i32 %mul545, %105
  %mul548 = mul nsw i32 0, %add547
  %sub549 = sub nsw i32 %mul548, 1
  %cmp550 = icmp slt i32 %sub549, 0
  br i1 %cmp550, label %cond.true.552, label %cond.false.574

cond.true.552:                                    ; preds = %cond.false.543
  %width553 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %106 = load i32, i32* %width553, align 4
  %mul554 = mul nsw i32 0, %106
  %height555 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %107 = load i32, i32* %height555, align 4
  %add556 = add nsw i32 %mul554, %107
  %mul557 = mul nsw i32 0, %add556
  %add558 = add nsw i32 %mul557, 0
  %neg559 = xor i32 %add558, -1
  %cmp560 = icmp eq i32 %neg559, -1
  %conv561 = zext i1 %cmp560 to i32
  %sub562 = sub nsw i32 0, %conv561
  %width563 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %108 = load i32, i32* %width563, align 4
  %mul564 = mul nsw i32 0, %108
  %height565 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %109 = load i32, i32* %height565, align 4
  %add566 = add nsw i32 %mul564, %109
  %mul567 = mul nsw i32 0, %add566
  %add568 = add nsw i32 %mul567, 1
  %shl569 = shl i32 %add568, 30
  %sub570 = sub nsw i32 %shl569, 1
  %mul571 = mul nsw i32 %sub570, 2
  %add572 = add nsw i32 %mul571, 1
  %sub573 = sub nsw i32 %sub562, %add572
  br label %cond.end.581

cond.false.574:                                   ; preds = %cond.false.543
  %width575 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %110 = load i32, i32* %width575, align 4
  %mul576 = mul nsw i32 0, %110
  %height577 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %111 = load i32, i32* %height577, align 4
  %add578 = add nsw i32 %mul576, %111
  %mul579 = mul nsw i32 0, %add578
  %add580 = add nsw i32 %mul579, 0
  br label %cond.end.581

cond.end.581:                                     ; preds = %cond.false.574, %cond.true.552
  %cond582 = phi i32 [ %sub573, %cond.true.552 ], [ %add580, %cond.false.574 ]
  %width583 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %112 = load i32, i32* %width583, align 4
  %div584 = sdiv i32 %cond582, %112
  %height585 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %113 = load i32, i32* %height585, align 4
  %cmp586 = icmp slt i32 %div584, %113
  br i1 %cmp586, label %cond.true.696, label %lor.lhs.false.676

cond.false.588:                                   ; preds = %lor.lhs.false.496
  %width589 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %114 = load i32, i32* %width589, align 4
  %cmp590 = icmp eq i32 %114, 0
  br i1 %cmp590, label %cond.true.592, label %cond.false.593

cond.true.592:                                    ; preds = %cond.false.588
  br i1 false, label %cond.true.696, label %lor.lhs.false.676

cond.false.593:                                   ; preds = %cond.false.588
  %height594 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %115 = load i32, i32* %height594, align 4
  %cmp595 = icmp slt i32 %115, 0
  br i1 %cmp595, label %cond.true.597, label %cond.false.642

cond.true.597:                                    ; preds = %cond.false.593
  %height598 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %116 = load i32, i32* %height598, align 4
  %width599 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %117 = load i32, i32* %width599, align 4
  %mul600 = mul nsw i32 0, %117
  %height601 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %118 = load i32, i32* %height601, align 4
  %add602 = add nsw i32 %mul600, %118
  %mul603 = mul nsw i32 0, %add602
  %sub604 = sub nsw i32 %mul603, 1
  %cmp605 = icmp slt i32 %sub604, 0
  br i1 %cmp605, label %cond.true.607, label %cond.false.629

cond.true.607:                                    ; preds = %cond.true.597
  %width608 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %119 = load i32, i32* %width608, align 4
  %mul609 = mul nsw i32 0, %119
  %height610 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %120 = load i32, i32* %height610, align 4
  %add611 = add nsw i32 %mul609, %120
  %mul612 = mul nsw i32 0, %add611
  %add613 = add nsw i32 %mul612, 0
  %neg614 = xor i32 %add613, -1
  %cmp615 = icmp eq i32 %neg614, -1
  %conv616 = zext i1 %cmp615 to i32
  %sub617 = sub nsw i32 0, %conv616
  %width618 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %121 = load i32, i32* %width618, align 4
  %mul619 = mul nsw i32 0, %121
  %height620 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %122 = load i32, i32* %height620, align 4
  %add621 = add nsw i32 %mul619, %122
  %mul622 = mul nsw i32 0, %add621
  %add623 = add nsw i32 %mul622, 1
  %shl624 = shl i32 %add623, 30
  %sub625 = sub nsw i32 %shl624, 1
  %mul626 = mul nsw i32 %sub625, 2
  %add627 = add nsw i32 %mul626, 1
  %sub628 = sub nsw i32 %sub617, %add627
  br label %cond.end.636

cond.false.629:                                   ; preds = %cond.true.597
  %width630 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %123 = load i32, i32* %width630, align 4
  %mul631 = mul nsw i32 0, %123
  %height632 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %124 = load i32, i32* %height632, align 4
  %add633 = add nsw i32 %mul631, %124
  %mul634 = mul nsw i32 0, %add633
  %add635 = add nsw i32 %mul634, 0
  br label %cond.end.636

cond.end.636:                                     ; preds = %cond.false.629, %cond.true.607
  %cond637 = phi i32 [ %sub628, %cond.true.607 ], [ %add635, %cond.false.629 ]
  %width638 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %125 = load i32, i32* %width638, align 4
  %div639 = sdiv i32 %cond637, %125
  %cmp640 = icmp slt i32 %116, %div639
  br i1 %cmp640, label %cond.true.696, label %lor.lhs.false.676

cond.false.642:                                   ; preds = %cond.false.593
  %width643 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %126 = load i32, i32* %width643, align 4
  %mul644 = mul nsw i32 0, %126
  %height645 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %127 = load i32, i32* %height645, align 4
  %add646 = add nsw i32 %mul644, %127
  %mul647 = mul nsw i32 0, %add646
  %sub648 = sub nsw i32 %mul647, 1
  %cmp649 = icmp slt i32 %sub648, 0
  br i1 %cmp649, label %cond.true.651, label %cond.false.662

cond.true.651:                                    ; preds = %cond.false.642
  %width652 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %128 = load i32, i32* %width652, align 4
  %mul653 = mul nsw i32 0, %128
  %height654 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %129 = load i32, i32* %height654, align 4
  %add655 = add nsw i32 %mul653, %129
  %mul656 = mul nsw i32 0, %add655
  %add657 = add nsw i32 %mul656, 1
  %shl658 = shl i32 %add657, 30
  %sub659 = sub nsw i32 %shl658, 1
  %mul660 = mul nsw i32 %sub659, 2
  %add661 = add nsw i32 %mul660, 1
  br label %cond.end.669

cond.false.662:                                   ; preds = %cond.false.642
  %width663 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %130 = load i32, i32* %width663, align 4
  %mul664 = mul nsw i32 0, %130
  %height665 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %131 = load i32, i32* %height665, align 4
  %add666 = add nsw i32 %mul664, %131
  %mul667 = mul nsw i32 0, %add666
  %sub668 = sub nsw i32 %mul667, 1
  br label %cond.end.669

cond.end.669:                                     ; preds = %cond.false.662, %cond.true.651
  %cond670 = phi i32 [ %add661, %cond.true.651 ], [ %sub668, %cond.false.662 ]
  %width671 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %132 = load i32, i32* %width671, align 4
  %div672 = sdiv i32 %cond670, %132
  %height673 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %133 = load i32, i32* %height673, align 4
  %cmp674 = icmp slt i32 %div672, %133
  br i1 %cmp674, label %cond.true.696, label %lor.lhs.false.676

lor.lhs.false.676:                                ; preds = %cond.end.669, %cond.end.636, %cond.true.592, %cond.end.581, %cond.true.542, %cond.end.532
  %height677 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %134 = load i32, i32* %height677, align 4
  %width678 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %135 = load i32, i32* %width678, align 4
  %mul679 = mul nsw i32 %134, %135
  %mul680 = mul nsw i32 0, %mul679
  %sub681 = sub nsw i32 %mul680, 1
  %cmp682 = icmp slt i32 %sub681, 0
  br i1 %cmp682, label %land.lhs.true.684, label %lor.lhs.false.690

land.lhs.true.684:                                ; preds = %lor.lhs.false.676
  %height685 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %136 = load i32, i32* %height685, align 4
  %width686 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %137 = load i32, i32* %width686, align 4
  %mul687 = mul nsw i32 %136, %137
  %cmp688 = icmp slt i32 %mul687, -128
  br i1 %cmp688, label %cond.true.696, label %lor.lhs.false.690

lor.lhs.false.690:                                ; preds = %land.lhs.true.684, %lor.lhs.false.676
  %height691 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %138 = load i32, i32* %height691, align 4
  %width692 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %139 = load i32, i32* %width692, align 4
  %mul693 = mul nsw i32 %138, %139
  %cmp694 = icmp slt i32 127, %mul693
  br i1 %cmp694, label %cond.true.696, label %cond.false.731

cond.true.696:                                    ; preds = %lor.lhs.false.690, %land.lhs.true.684, %cond.end.669, %cond.end.636, %cond.true.592, %cond.end.581, %cond.true.542, %cond.end.532, %land.lhs.true.492, %land.lhs.true.484
  %height697 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %140 = load i32, i32* %height697, align 4
  %conv698 = trunc i32 %140 to i8
  %conv699 = zext i8 %conv698 to i32
  %width700 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %141 = load i32, i32* %width700, align 4
  %conv701 = trunc i32 %141 to i8
  %conv702 = zext i8 %conv701 to i32
  %mul703 = mul nsw i32 %conv699, %conv702
  %cmp704 = icmp sle i32 %mul703, 127
  br i1 %cmp704, label %cond.true.706, label %cond.false.716

cond.true.706:                                    ; preds = %cond.true.696
  %height707 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %142 = load i32, i32* %height707, align 4
  %conv708 = trunc i32 %142 to i8
  %conv709 = zext i8 %conv708 to i32
  %width710 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %143 = load i32, i32* %width710, align 4
  %conv711 = trunc i32 %143 to i8
  %conv712 = zext i8 %conv711 to i32
  %mul713 = mul nsw i32 %conv709, %conv712
  %conv714 = trunc i32 %mul713 to i8
  %conv715 = sext i8 %conv714 to i32
  br label %cond.end.728

cond.false.716:                                   ; preds = %cond.true.696
  %height717 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %144 = load i32, i32* %height717, align 4
  %conv718 = trunc i32 %144 to i8
  %conv719 = zext i8 %conv718 to i32
  %width720 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %145 = load i32, i32* %width720, align 4
  %conv721 = trunc i32 %145 to i8
  %conv722 = zext i8 %conv721 to i32
  %mul723 = mul nsw i32 %conv719, %conv722
  %sub724 = sub nsw i32 %mul723, -128
  %conv725 = trunc i32 %sub724 to i8
  %conv726 = sext i8 %conv725 to i32
  %add727 = add nsw i32 %conv726, -128
  br label %cond.end.728

cond.end.728:                                     ; preds = %cond.false.716, %cond.true.706
  %cond729 = phi i32 [ %conv715, %cond.true.706 ], [ %add727, %cond.false.716 ]
  %conv730 = sext i32 %cond729 to i64
  store i64 %conv730, i64* %needed, align 8
  br i1 true, label %if.then, label %if.end

cond.false.731:                                   ; preds = %lor.lhs.false.690
  %height732 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %146 = load i32, i32* %height732, align 4
  %conv733 = trunc i32 %146 to i8
  %conv734 = zext i8 %conv733 to i32
  %width735 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %147 = load i32, i32* %width735, align 4
  %conv736 = trunc i32 %147 to i8
  %conv737 = zext i8 %conv736 to i32
  %mul738 = mul nsw i32 %conv734, %conv737
  %cmp739 = icmp sle i32 %mul738, 127
  br i1 %cmp739, label %cond.true.741, label %cond.false.751

cond.true.741:                                    ; preds = %cond.false.731
  %height742 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %148 = load i32, i32* %height742, align 4
  %conv743 = trunc i32 %148 to i8
  %conv744 = zext i8 %conv743 to i32
  %width745 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %149 = load i32, i32* %width745, align 4
  %conv746 = trunc i32 %149 to i8
  %conv747 = zext i8 %conv746 to i32
  %mul748 = mul nsw i32 %conv744, %conv747
  %conv749 = trunc i32 %mul748 to i8
  %conv750 = sext i8 %conv749 to i32
  br label %cond.end.763

cond.false.751:                                   ; preds = %cond.false.731
  %height752 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %150 = load i32, i32* %height752, align 4
  %conv753 = trunc i32 %150 to i8
  %conv754 = zext i8 %conv753 to i32
  %width755 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %151 = load i32, i32* %width755, align 4
  %conv756 = trunc i32 %151 to i8
  %conv757 = zext i8 %conv756 to i32
  %mul758 = mul nsw i32 %conv754, %conv757
  %sub759 = sub nsw i32 %mul758, -128
  %conv760 = trunc i32 %sub759 to i8
  %conv761 = sext i8 %conv760 to i32
  %add762 = add nsw i32 %conv761, -128
  br label %cond.end.763

cond.end.763:                                     ; preds = %cond.false.751, %cond.true.741
  %cond764 = phi i32 [ %conv750, %cond.true.741 ], [ %add762, %cond.false.751 ]
  %conv765 = sext i32 %cond764 to i64
  store i64 %conv765, i64* %needed, align 8
  br i1 false, label %if.then, label %if.end

cond.false.766:                                   ; preds = %lor.end
  br i1 false, label %cond.true.767, label %cond.false.1542

cond.true.767:                                    ; preds = %cond.false.766
  br i1 false, label %cond.true.768, label %cond.false.1214

cond.true.768:                                    ; preds = %cond.true.767
  %width769 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %152 = load i32, i32* %width769, align 4
  %conv770 = trunc i32 %152 to i16
  %conv771 = sext i16 %conv770 to i32
  %mul772 = mul nsw i32 0, %conv771
  %height773 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %153 = load i32, i32* %height773, align 4
  %conv774 = trunc i32 %153 to i16
  %conv775 = sext i16 %conv774 to i32
  %add776 = add nsw i32 %mul772, %conv775
  %mul777 = mul nsw i32 0, %add776
  %sub778 = sub nsw i32 %mul777, 1
  %cmp779 = icmp slt i32 %sub778, 0
  br i1 %cmp779, label %cond.true.781, label %cond.false.811

cond.true.781:                                    ; preds = %cond.true.768
  %width782 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %154 = load i32, i32* %width782, align 4
  %conv783 = trunc i32 %154 to i16
  %conv784 = sext i16 %conv783 to i32
  %mul785 = mul nsw i32 0, %conv784
  %height786 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %155 = load i32, i32* %height786, align 4
  %conv787 = trunc i32 %155 to i16
  %conv788 = sext i16 %conv787 to i32
  %add789 = add nsw i32 %mul785, %conv788
  %mul790 = mul nsw i32 0, %add789
  %add791 = add nsw i32 %mul790, 0
  %neg792 = xor i32 %add791, -1
  %cmp793 = icmp eq i32 %neg792, -1
  %conv794 = zext i1 %cmp793 to i32
  %sub795 = sub nsw i32 0, %conv794
  %width796 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %156 = load i32, i32* %width796, align 4
  %conv797 = trunc i32 %156 to i16
  %conv798 = sext i16 %conv797 to i32
  %mul799 = mul nsw i32 0, %conv798
  %height800 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %157 = load i32, i32* %height800, align 4
  %conv801 = trunc i32 %157 to i16
  %conv802 = sext i16 %conv801 to i32
  %add803 = add nsw i32 %mul799, %conv802
  %mul804 = mul nsw i32 0, %add803
  %add805 = add nsw i32 %mul804, 1
  %shl806 = shl i32 %add805, 30
  %sub807 = sub nsw i32 %shl806, 1
  %mul808 = mul nsw i32 %sub807, 2
  %add809 = add nsw i32 %mul808, 1
  %sub810 = sub nsw i32 %sub795, %add809
  br label %cond.end.822

cond.false.811:                                   ; preds = %cond.true.768
  %width812 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %158 = load i32, i32* %width812, align 4
  %conv813 = trunc i32 %158 to i16
  %conv814 = sext i16 %conv813 to i32
  %mul815 = mul nsw i32 0, %conv814
  %height816 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %159 = load i32, i32* %height816, align 4
  %conv817 = trunc i32 %159 to i16
  %conv818 = sext i16 %conv817 to i32
  %add819 = add nsw i32 %mul815, %conv818
  %mul820 = mul nsw i32 0, %add819
  %add821 = add nsw i32 %mul820, 0
  br label %cond.end.822

cond.end.822:                                     ; preds = %cond.false.811, %cond.true.781
  %cond823 = phi i32 [ %sub810, %cond.true.781 ], [ %add821, %cond.false.811 ]
  %cmp824 = icmp eq i32 %cond823, 0
  br i1 %cmp824, label %land.lhs.true.826, label %lor.lhs.false.850

land.lhs.true.826:                                ; preds = %cond.end.822
  %height827 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %160 = load i32, i32* %height827, align 4
  %conv828 = trunc i32 %160 to i16
  %conv829 = sext i16 %conv828 to i32
  %cmp830 = icmp slt i32 %conv829, 0
  br i1 %cmp830, label %land.lhs.true.832, label %lor.lhs.false.838

land.lhs.true.832:                                ; preds = %land.lhs.true.826
  %width833 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %161 = load i32, i32* %width833, align 4
  %conv834 = trunc i32 %161 to i16
  %conv835 = sext i16 %conv834 to i32
  %cmp836 = icmp slt i32 0, %conv835
  br i1 %cmp836, label %cond.true.1144, label %lor.lhs.false.838

lor.lhs.false.838:                                ; preds = %land.lhs.true.832, %land.lhs.true.826
  %width839 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %162 = load i32, i32* %width839, align 4
  %conv840 = trunc i32 %162 to i16
  %conv841 = sext i16 %conv840 to i32
  %cmp842 = icmp slt i32 %conv841, 0
  br i1 %cmp842, label %land.lhs.true.844, label %lor.lhs.false.850

land.lhs.true.844:                                ; preds = %lor.lhs.false.838
  %height845 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %163 = load i32, i32* %height845, align 4
  %conv846 = trunc i32 %163 to i16
  %conv847 = sext i16 %conv846 to i32
  %cmp848 = icmp slt i32 0, %conv847
  br i1 %cmp848, label %cond.true.1144, label %lor.lhs.false.850

lor.lhs.false.850:                                ; preds = %land.lhs.true.844, %lor.lhs.false.838, %cond.end.822
  %width851 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %164 = load i32, i32* %width851, align 4
  %conv852 = trunc i32 %164 to i16
  %conv853 = sext i16 %conv852 to i32
  %cmp854 = icmp slt i32 %conv853, 0
  br i1 %cmp854, label %cond.true.856, label %cond.false.984

cond.true.856:                                    ; preds = %lor.lhs.false.850
  %height857 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %165 = load i32, i32* %height857, align 4
  %conv858 = trunc i32 %165 to i16
  %conv859 = sext i16 %conv858 to i32
  %cmp860 = icmp slt i32 %conv859, 0
  br i1 %cmp860, label %cond.true.862, label %cond.false.912

cond.true.862:                                    ; preds = %cond.true.856
  %height863 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %166 = load i32, i32* %height863, align 4
  %conv864 = trunc i32 %166 to i16
  %conv865 = sext i16 %conv864 to i32
  %width866 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %167 = load i32, i32* %width866, align 4
  %conv867 = trunc i32 %167 to i16
  %conv868 = sext i16 %conv867 to i32
  %mul869 = mul nsw i32 0, %conv868
  %height870 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %168 = load i32, i32* %height870, align 4
  %conv871 = trunc i32 %168 to i16
  %conv872 = sext i16 %conv871 to i32
  %add873 = add nsw i32 %mul869, %conv872
  %mul874 = mul nsw i32 0, %add873
  %sub875 = sub nsw i32 %mul874, 1
  %cmp876 = icmp slt i32 %sub875, 0
  br i1 %cmp876, label %cond.true.878, label %cond.false.893

cond.true.878:                                    ; preds = %cond.true.862
  %width879 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %169 = load i32, i32* %width879, align 4
  %conv880 = trunc i32 %169 to i16
  %conv881 = sext i16 %conv880 to i32
  %mul882 = mul nsw i32 0, %conv881
  %height883 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %170 = load i32, i32* %height883, align 4
  %conv884 = trunc i32 %170 to i16
  %conv885 = sext i16 %conv884 to i32
  %add886 = add nsw i32 %mul882, %conv885
  %mul887 = mul nsw i32 0, %add886
  %add888 = add nsw i32 %mul887, 1
  %shl889 = shl i32 %add888, 30
  %sub890 = sub nsw i32 %shl889, 1
  %mul891 = mul nsw i32 %sub890, 2
  %add892 = add nsw i32 %mul891, 1
  br label %cond.end.904

cond.false.893:                                   ; preds = %cond.true.862
  %width894 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %171 = load i32, i32* %width894, align 4
  %conv895 = trunc i32 %171 to i16
  %conv896 = sext i16 %conv895 to i32
  %mul897 = mul nsw i32 0, %conv896
  %height898 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %172 = load i32, i32* %height898, align 4
  %conv899 = trunc i32 %172 to i16
  %conv900 = sext i16 %conv899 to i32
  %add901 = add nsw i32 %mul897, %conv900
  %mul902 = mul nsw i32 0, %add901
  %sub903 = sub nsw i32 %mul902, 1
  br label %cond.end.904

cond.end.904:                                     ; preds = %cond.false.893, %cond.true.878
  %cond905 = phi i32 [ %add892, %cond.true.878 ], [ %sub903, %cond.false.893 ]
  %width906 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %173 = load i32, i32* %width906, align 4
  %conv907 = trunc i32 %173 to i16
  %conv908 = sext i16 %conv907 to i32
  %div909 = sdiv i32 %cond905, %conv908
  %cmp910 = icmp slt i32 %conv865, %div909
  br i1 %cmp910, label %cond.true.1144, label %lor.lhs.false.1112

cond.false.912:                                   ; preds = %cond.true.856
  %width913 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %174 = load i32, i32* %width913, align 4
  %conv914 = trunc i32 %174 to i16
  %conv915 = sext i16 %conv914 to i32
  %cmp916 = icmp eq i32 %conv915, -1
  br i1 %cmp916, label %cond.true.918, label %cond.false.919

cond.true.918:                                    ; preds = %cond.false.912
  br i1 false, label %cond.true.1144, label %lor.lhs.false.1112

cond.false.919:                                   ; preds = %cond.false.912
  %width920 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %175 = load i32, i32* %width920, align 4
  %conv921 = trunc i32 %175 to i16
  %conv922 = sext i16 %conv921 to i32
  %mul923 = mul nsw i32 0, %conv922
  %height924 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %176 = load i32, i32* %height924, align 4
  %conv925 = trunc i32 %176 to i16
  %conv926 = sext i16 %conv925 to i32
  %add927 = add nsw i32 %mul923, %conv926
  %mul928 = mul nsw i32 0, %add927
  %sub929 = sub nsw i32 %mul928, 1
  %cmp930 = icmp slt i32 %sub929, 0
  br i1 %cmp930, label %cond.true.932, label %cond.false.962

cond.true.932:                                    ; preds = %cond.false.919
  %width933 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %177 = load i32, i32* %width933, align 4
  %conv934 = trunc i32 %177 to i16
  %conv935 = sext i16 %conv934 to i32
  %mul936 = mul nsw i32 0, %conv935
  %height937 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %178 = load i32, i32* %height937, align 4
  %conv938 = trunc i32 %178 to i16
  %conv939 = sext i16 %conv938 to i32
  %add940 = add nsw i32 %mul936, %conv939
  %mul941 = mul nsw i32 0, %add940
  %add942 = add nsw i32 %mul941, 0
  %neg943 = xor i32 %add942, -1
  %cmp944 = icmp eq i32 %neg943, -1
  %conv945 = zext i1 %cmp944 to i32
  %sub946 = sub nsw i32 0, %conv945
  %width947 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %179 = load i32, i32* %width947, align 4
  %conv948 = trunc i32 %179 to i16
  %conv949 = sext i16 %conv948 to i32
  %mul950 = mul nsw i32 0, %conv949
  %height951 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %180 = load i32, i32* %height951, align 4
  %conv952 = trunc i32 %180 to i16
  %conv953 = sext i16 %conv952 to i32
  %add954 = add nsw i32 %mul950, %conv953
  %mul955 = mul nsw i32 0, %add954
  %add956 = add nsw i32 %mul955, 1
  %shl957 = shl i32 %add956, 30
  %sub958 = sub nsw i32 %shl957, 1
  %mul959 = mul nsw i32 %sub958, 2
  %add960 = add nsw i32 %mul959, 1
  %sub961 = sub nsw i32 %sub946, %add960
  br label %cond.end.973

cond.false.962:                                   ; preds = %cond.false.919
  %width963 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %181 = load i32, i32* %width963, align 4
  %conv964 = trunc i32 %181 to i16
  %conv965 = sext i16 %conv964 to i32
  %mul966 = mul nsw i32 0, %conv965
  %height967 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %182 = load i32, i32* %height967, align 4
  %conv968 = trunc i32 %182 to i16
  %conv969 = sext i16 %conv968 to i32
  %add970 = add nsw i32 %mul966, %conv969
  %mul971 = mul nsw i32 0, %add970
  %add972 = add nsw i32 %mul971, 0
  br label %cond.end.973

cond.end.973:                                     ; preds = %cond.false.962, %cond.true.932
  %cond974 = phi i32 [ %sub961, %cond.true.932 ], [ %add972, %cond.false.962 ]
  %width975 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %183 = load i32, i32* %width975, align 4
  %conv976 = trunc i32 %183 to i16
  %conv977 = sext i16 %conv976 to i32
  %div978 = sdiv i32 %cond974, %conv977
  %height979 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %184 = load i32, i32* %height979, align 4
  %conv980 = trunc i32 %184 to i16
  %conv981 = sext i16 %conv980 to i32
  %cmp982 = icmp slt i32 %div978, %conv981
  br i1 %cmp982, label %cond.true.1144, label %lor.lhs.false.1112

cond.false.984:                                   ; preds = %lor.lhs.false.850
  %width985 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %185 = load i32, i32* %width985, align 4
  %conv986 = trunc i32 %185 to i16
  %conv987 = sext i16 %conv986 to i32
  %cmp988 = icmp eq i32 %conv987, 0
  br i1 %cmp988, label %cond.true.990, label %cond.false.991

cond.true.990:                                    ; preds = %cond.false.984
  br i1 false, label %cond.true.1144, label %lor.lhs.false.1112

cond.false.991:                                   ; preds = %cond.false.984
  %height992 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %186 = load i32, i32* %height992, align 4
  %conv993 = trunc i32 %186 to i16
  %conv994 = sext i16 %conv993 to i32
  %cmp995 = icmp slt i32 %conv994, 0
  br i1 %cmp995, label %cond.true.997, label %cond.false.1062

cond.true.997:                                    ; preds = %cond.false.991
  %height998 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %187 = load i32, i32* %height998, align 4
  %conv999 = trunc i32 %187 to i16
  %conv1000 = sext i16 %conv999 to i32
  %width1001 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %188 = load i32, i32* %width1001, align 4
  %conv1002 = trunc i32 %188 to i16
  %conv1003 = sext i16 %conv1002 to i32
  %mul1004 = mul nsw i32 0, %conv1003
  %height1005 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %189 = load i32, i32* %height1005, align 4
  %conv1006 = trunc i32 %189 to i16
  %conv1007 = sext i16 %conv1006 to i32
  %add1008 = add nsw i32 %mul1004, %conv1007
  %mul1009 = mul nsw i32 0, %add1008
  %sub1010 = sub nsw i32 %mul1009, 1
  %cmp1011 = icmp slt i32 %sub1010, 0
  br i1 %cmp1011, label %cond.true.1013, label %cond.false.1043

cond.true.1013:                                   ; preds = %cond.true.997
  %width1014 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %190 = load i32, i32* %width1014, align 4
  %conv1015 = trunc i32 %190 to i16
  %conv1016 = sext i16 %conv1015 to i32
  %mul1017 = mul nsw i32 0, %conv1016
  %height1018 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %191 = load i32, i32* %height1018, align 4
  %conv1019 = trunc i32 %191 to i16
  %conv1020 = sext i16 %conv1019 to i32
  %add1021 = add nsw i32 %mul1017, %conv1020
  %mul1022 = mul nsw i32 0, %add1021
  %add1023 = add nsw i32 %mul1022, 0
  %neg1024 = xor i32 %add1023, -1
  %cmp1025 = icmp eq i32 %neg1024, -1
  %conv1026 = zext i1 %cmp1025 to i32
  %sub1027 = sub nsw i32 0, %conv1026
  %width1028 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %192 = load i32, i32* %width1028, align 4
  %conv1029 = trunc i32 %192 to i16
  %conv1030 = sext i16 %conv1029 to i32
  %mul1031 = mul nsw i32 0, %conv1030
  %height1032 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %193 = load i32, i32* %height1032, align 4
  %conv1033 = trunc i32 %193 to i16
  %conv1034 = sext i16 %conv1033 to i32
  %add1035 = add nsw i32 %mul1031, %conv1034
  %mul1036 = mul nsw i32 0, %add1035
  %add1037 = add nsw i32 %mul1036, 1
  %shl1038 = shl i32 %add1037, 30
  %sub1039 = sub nsw i32 %shl1038, 1
  %mul1040 = mul nsw i32 %sub1039, 2
  %add1041 = add nsw i32 %mul1040, 1
  %sub1042 = sub nsw i32 %sub1027, %add1041
  br label %cond.end.1054

cond.false.1043:                                  ; preds = %cond.true.997
  %width1044 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %194 = load i32, i32* %width1044, align 4
  %conv1045 = trunc i32 %194 to i16
  %conv1046 = sext i16 %conv1045 to i32
  %mul1047 = mul nsw i32 0, %conv1046
  %height1048 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %195 = load i32, i32* %height1048, align 4
  %conv1049 = trunc i32 %195 to i16
  %conv1050 = sext i16 %conv1049 to i32
  %add1051 = add nsw i32 %mul1047, %conv1050
  %mul1052 = mul nsw i32 0, %add1051
  %add1053 = add nsw i32 %mul1052, 0
  br label %cond.end.1054

cond.end.1054:                                    ; preds = %cond.false.1043, %cond.true.1013
  %cond1055 = phi i32 [ %sub1042, %cond.true.1013 ], [ %add1053, %cond.false.1043 ]
  %width1056 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %196 = load i32, i32* %width1056, align 4
  %conv1057 = trunc i32 %196 to i16
  %conv1058 = sext i16 %conv1057 to i32
  %div1059 = sdiv i32 %cond1055, %conv1058
  %cmp1060 = icmp slt i32 %conv1000, %div1059
  br i1 %cmp1060, label %cond.true.1144, label %lor.lhs.false.1112

cond.false.1062:                                  ; preds = %cond.false.991
  %width1063 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %197 = load i32, i32* %width1063, align 4
  %conv1064 = trunc i32 %197 to i16
  %conv1065 = sext i16 %conv1064 to i32
  %mul1066 = mul nsw i32 0, %conv1065
  %height1067 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %198 = load i32, i32* %height1067, align 4
  %conv1068 = trunc i32 %198 to i16
  %conv1069 = sext i16 %conv1068 to i32
  %add1070 = add nsw i32 %mul1066, %conv1069
  %mul1071 = mul nsw i32 0, %add1070
  %sub1072 = sub nsw i32 %mul1071, 1
  %cmp1073 = icmp slt i32 %sub1072, 0
  br i1 %cmp1073, label %cond.true.1075, label %cond.false.1090

cond.true.1075:                                   ; preds = %cond.false.1062
  %width1076 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %199 = load i32, i32* %width1076, align 4
  %conv1077 = trunc i32 %199 to i16
  %conv1078 = sext i16 %conv1077 to i32
  %mul1079 = mul nsw i32 0, %conv1078
  %height1080 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %200 = load i32, i32* %height1080, align 4
  %conv1081 = trunc i32 %200 to i16
  %conv1082 = sext i16 %conv1081 to i32
  %add1083 = add nsw i32 %mul1079, %conv1082
  %mul1084 = mul nsw i32 0, %add1083
  %add1085 = add nsw i32 %mul1084, 1
  %shl1086 = shl i32 %add1085, 30
  %sub1087 = sub nsw i32 %shl1086, 1
  %mul1088 = mul nsw i32 %sub1087, 2
  %add1089 = add nsw i32 %mul1088, 1
  br label %cond.end.1101

cond.false.1090:                                  ; preds = %cond.false.1062
  %width1091 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %201 = load i32, i32* %width1091, align 4
  %conv1092 = trunc i32 %201 to i16
  %conv1093 = sext i16 %conv1092 to i32
  %mul1094 = mul nsw i32 0, %conv1093
  %height1095 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %202 = load i32, i32* %height1095, align 4
  %conv1096 = trunc i32 %202 to i16
  %conv1097 = sext i16 %conv1096 to i32
  %add1098 = add nsw i32 %mul1094, %conv1097
  %mul1099 = mul nsw i32 0, %add1098
  %sub1100 = sub nsw i32 %mul1099, 1
  br label %cond.end.1101

cond.end.1101:                                    ; preds = %cond.false.1090, %cond.true.1075
  %cond1102 = phi i32 [ %add1089, %cond.true.1075 ], [ %sub1100, %cond.false.1090 ]
  %width1103 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %203 = load i32, i32* %width1103, align 4
  %conv1104 = trunc i32 %203 to i16
  %conv1105 = sext i16 %conv1104 to i32
  %div1106 = sdiv i32 %cond1102, %conv1105
  %height1107 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %204 = load i32, i32* %height1107, align 4
  %conv1108 = trunc i32 %204 to i16
  %conv1109 = sext i16 %conv1108 to i32
  %cmp1110 = icmp slt i32 %div1106, %conv1109
  br i1 %cmp1110, label %cond.true.1144, label %lor.lhs.false.1112

lor.lhs.false.1112:                               ; preds = %cond.end.1101, %cond.end.1054, %cond.true.990, %cond.end.973, %cond.true.918, %cond.end.904
  %height1113 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %205 = load i32, i32* %height1113, align 4
  %conv1114 = trunc i32 %205 to i16
  %conv1115 = sext i16 %conv1114 to i32
  %width1116 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %206 = load i32, i32* %width1116, align 4
  %conv1117 = trunc i32 %206 to i16
  %conv1118 = sext i16 %conv1117 to i32
  %mul1119 = mul nsw i32 %conv1115, %conv1118
  %mul1120 = mul nsw i32 0, %mul1119
  %sub1121 = sub nsw i32 %mul1120, 1
  %cmp1122 = icmp slt i32 %sub1121, 0
  br i1 %cmp1122, label %land.lhs.true.1124, label %lor.lhs.false.1134

land.lhs.true.1124:                               ; preds = %lor.lhs.false.1112
  %height1125 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %207 = load i32, i32* %height1125, align 4
  %conv1126 = trunc i32 %207 to i16
  %conv1127 = sext i16 %conv1126 to i32
  %width1128 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %208 = load i32, i32* %width1128, align 4
  %conv1129 = trunc i32 %208 to i16
  %conv1130 = sext i16 %conv1129 to i32
  %mul1131 = mul nsw i32 %conv1127, %conv1130
  %cmp1132 = icmp slt i32 %mul1131, -32768
  br i1 %cmp1132, label %cond.true.1144, label %lor.lhs.false.1134

lor.lhs.false.1134:                               ; preds = %land.lhs.true.1124, %lor.lhs.false.1112
  %height1135 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %209 = load i32, i32* %height1135, align 4
  %conv1136 = trunc i32 %209 to i16
  %conv1137 = sext i16 %conv1136 to i32
  %width1138 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %210 = load i32, i32* %width1138, align 4
  %conv1139 = trunc i32 %210 to i16
  %conv1140 = sext i16 %conv1139 to i32
  %mul1141 = mul nsw i32 %conv1137, %conv1140
  %cmp1142 = icmp slt i32 32767, %mul1141
  br i1 %cmp1142, label %cond.true.1144, label %cond.false.1179

cond.true.1144:                                   ; preds = %lor.lhs.false.1134, %land.lhs.true.1124, %cond.end.1101, %cond.end.1054, %cond.true.990, %cond.end.973, %cond.true.918, %cond.end.904, %land.lhs.true.844, %land.lhs.true.832
  %height1145 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %211 = load i32, i32* %height1145, align 4
  %conv1146 = trunc i32 %211 to i16
  %conv1147 = zext i16 %conv1146 to i32
  %width1148 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %212 = load i32, i32* %width1148, align 4
  %conv1149 = trunc i32 %212 to i16
  %conv1150 = zext i16 %conv1149 to i32
  %mul1151 = mul nsw i32 %conv1147, %conv1150
  %cmp1152 = icmp sle i32 %mul1151, 32767
  br i1 %cmp1152, label %cond.true.1154, label %cond.false.1164

cond.true.1154:                                   ; preds = %cond.true.1144
  %height1155 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %213 = load i32, i32* %height1155, align 4
  %conv1156 = trunc i32 %213 to i16
  %conv1157 = zext i16 %conv1156 to i32
  %width1158 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %214 = load i32, i32* %width1158, align 4
  %conv1159 = trunc i32 %214 to i16
  %conv1160 = zext i16 %conv1159 to i32
  %mul1161 = mul nsw i32 %conv1157, %conv1160
  %conv1162 = trunc i32 %mul1161 to i16
  %conv1163 = sext i16 %conv1162 to i32
  br label %cond.end.1176

cond.false.1164:                                  ; preds = %cond.true.1144
  %height1165 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %215 = load i32, i32* %height1165, align 4
  %conv1166 = trunc i32 %215 to i16
  %conv1167 = zext i16 %conv1166 to i32
  %width1168 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %216 = load i32, i32* %width1168, align 4
  %conv1169 = trunc i32 %216 to i16
  %conv1170 = zext i16 %conv1169 to i32
  %mul1171 = mul nsw i32 %conv1167, %conv1170
  %sub1172 = sub nsw i32 %mul1171, -32768
  %conv1173 = trunc i32 %sub1172 to i16
  %conv1174 = sext i16 %conv1173 to i32
  %add1175 = add nsw i32 %conv1174, -32768
  br label %cond.end.1176

cond.end.1176:                                    ; preds = %cond.false.1164, %cond.true.1154
  %cond1177 = phi i32 [ %conv1163, %cond.true.1154 ], [ %add1175, %cond.false.1164 ]
  %conv1178 = sext i32 %cond1177 to i64
  store i64 %conv1178, i64* %needed, align 8
  br i1 true, label %if.then, label %if.end

cond.false.1179:                                  ; preds = %lor.lhs.false.1134
  %height1180 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %217 = load i32, i32* %height1180, align 4
  %conv1181 = trunc i32 %217 to i16
  %conv1182 = zext i16 %conv1181 to i32
  %width1183 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %218 = load i32, i32* %width1183, align 4
  %conv1184 = trunc i32 %218 to i16
  %conv1185 = zext i16 %conv1184 to i32
  %mul1186 = mul nsw i32 %conv1182, %conv1185
  %cmp1187 = icmp sle i32 %mul1186, 32767
  br i1 %cmp1187, label %cond.true.1189, label %cond.false.1199

cond.true.1189:                                   ; preds = %cond.false.1179
  %height1190 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %219 = load i32, i32* %height1190, align 4
  %conv1191 = trunc i32 %219 to i16
  %conv1192 = zext i16 %conv1191 to i32
  %width1193 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %220 = load i32, i32* %width1193, align 4
  %conv1194 = trunc i32 %220 to i16
  %conv1195 = zext i16 %conv1194 to i32
  %mul1196 = mul nsw i32 %conv1192, %conv1195
  %conv1197 = trunc i32 %mul1196 to i16
  %conv1198 = sext i16 %conv1197 to i32
  br label %cond.end.1211

cond.false.1199:                                  ; preds = %cond.false.1179
  %height1200 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %221 = load i32, i32* %height1200, align 4
  %conv1201 = trunc i32 %221 to i16
  %conv1202 = zext i16 %conv1201 to i32
  %width1203 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %222 = load i32, i32* %width1203, align 4
  %conv1204 = trunc i32 %222 to i16
  %conv1205 = zext i16 %conv1204 to i32
  %mul1206 = mul nsw i32 %conv1202, %conv1205
  %sub1207 = sub nsw i32 %mul1206, -32768
  %conv1208 = trunc i32 %sub1207 to i16
  %conv1209 = sext i16 %conv1208 to i32
  %add1210 = add nsw i32 %conv1209, -32768
  br label %cond.end.1211

cond.end.1211:                                    ; preds = %cond.false.1199, %cond.true.1189
  %cond1212 = phi i32 [ %conv1198, %cond.true.1189 ], [ %add1210, %cond.false.1199 ]
  %conv1213 = sext i32 %cond1212 to i64
  store i64 %conv1213, i64* %needed, align 8
  br i1 false, label %if.then, label %if.end

cond.false.1214:                                  ; preds = %cond.true.767
  %width1215 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %223 = load i32, i32* %width1215, align 4
  %mul1216 = mul nsw i32 0, %223
  %height1217 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %224 = load i32, i32* %height1217, align 4
  %add1218 = add nsw i32 %mul1216, %224
  %mul1219 = mul nsw i32 0, %add1218
  %sub1220 = sub nsw i32 %mul1219, 1
  %cmp1221 = icmp slt i32 %sub1220, 0
  br i1 %cmp1221, label %cond.true.1223, label %cond.false.1245

cond.true.1223:                                   ; preds = %cond.false.1214
  %width1224 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %225 = load i32, i32* %width1224, align 4
  %mul1225 = mul nsw i32 0, %225
  %height1226 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %226 = load i32, i32* %height1226, align 4
  %add1227 = add nsw i32 %mul1225, %226
  %mul1228 = mul nsw i32 0, %add1227
  %add1229 = add nsw i32 %mul1228, 0
  %neg1230 = xor i32 %add1229, -1
  %cmp1231 = icmp eq i32 %neg1230, -1
  %conv1232 = zext i1 %cmp1231 to i32
  %sub1233 = sub nsw i32 0, %conv1232
  %width1234 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %227 = load i32, i32* %width1234, align 4
  %mul1235 = mul nsw i32 0, %227
  %height1236 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %228 = load i32, i32* %height1236, align 4
  %add1237 = add nsw i32 %mul1235, %228
  %mul1238 = mul nsw i32 0, %add1237
  %add1239 = add nsw i32 %mul1238, 1
  %shl1240 = shl i32 %add1239, 30
  %sub1241 = sub nsw i32 %shl1240, 1
  %mul1242 = mul nsw i32 %sub1241, 2
  %add1243 = add nsw i32 %mul1242, 1
  %sub1244 = sub nsw i32 %sub1233, %add1243
  br label %cond.end.1252

cond.false.1245:                                  ; preds = %cond.false.1214
  %width1246 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %229 = load i32, i32* %width1246, align 4
  %mul1247 = mul nsw i32 0, %229
  %height1248 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %230 = load i32, i32* %height1248, align 4
  %add1249 = add nsw i32 %mul1247, %230
  %mul1250 = mul nsw i32 0, %add1249
  %add1251 = add nsw i32 %mul1250, 0
  br label %cond.end.1252

cond.end.1252:                                    ; preds = %cond.false.1245, %cond.true.1223
  %cond1253 = phi i32 [ %sub1244, %cond.true.1223 ], [ %add1251, %cond.false.1245 ]
  %cmp1254 = icmp eq i32 %cond1253, 0
  br i1 %cmp1254, label %land.lhs.true.1256, label %lor.lhs.false.1272

land.lhs.true.1256:                               ; preds = %cond.end.1252
  %height1257 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %231 = load i32, i32* %height1257, align 4
  %cmp1258 = icmp slt i32 %231, 0
  br i1 %cmp1258, label %land.lhs.true.1260, label %lor.lhs.false.1264

land.lhs.true.1260:                               ; preds = %land.lhs.true.1256
  %width1261 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %232 = load i32, i32* %width1261, align 4
  %cmp1262 = icmp slt i32 0, %232
  br i1 %cmp1262, label %cond.true.1472, label %lor.lhs.false.1264

lor.lhs.false.1264:                               ; preds = %land.lhs.true.1260, %land.lhs.true.1256
  %width1265 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %233 = load i32, i32* %width1265, align 4
  %cmp1266 = icmp slt i32 %233, 0
  br i1 %cmp1266, label %land.lhs.true.1268, label %lor.lhs.false.1272

land.lhs.true.1268:                               ; preds = %lor.lhs.false.1264
  %height1269 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %234 = load i32, i32* %height1269, align 4
  %cmp1270 = icmp slt i32 0, %234
  br i1 %cmp1270, label %cond.true.1472, label %lor.lhs.false.1272

lor.lhs.false.1272:                               ; preds = %land.lhs.true.1268, %lor.lhs.false.1264, %cond.end.1252
  %width1273 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %235 = load i32, i32* %width1273, align 4
  %cmp1274 = icmp slt i32 %235, 0
  br i1 %cmp1274, label %cond.true.1276, label %cond.false.1364

cond.true.1276:                                   ; preds = %lor.lhs.false.1272
  %height1277 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %236 = load i32, i32* %height1277, align 4
  %cmp1278 = icmp slt i32 %236, 0
  br i1 %cmp1278, label %cond.true.1280, label %cond.false.1314

cond.true.1280:                                   ; preds = %cond.true.1276
  %height1281 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %237 = load i32, i32* %height1281, align 4
  %width1282 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %238 = load i32, i32* %width1282, align 4
  %mul1283 = mul nsw i32 0, %238
  %height1284 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %239 = load i32, i32* %height1284, align 4
  %add1285 = add nsw i32 %mul1283, %239
  %mul1286 = mul nsw i32 0, %add1285
  %sub1287 = sub nsw i32 %mul1286, 1
  %cmp1288 = icmp slt i32 %sub1287, 0
  br i1 %cmp1288, label %cond.true.1290, label %cond.false.1301

cond.true.1290:                                   ; preds = %cond.true.1280
  %width1291 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %240 = load i32, i32* %width1291, align 4
  %mul1292 = mul nsw i32 0, %240
  %height1293 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %241 = load i32, i32* %height1293, align 4
  %add1294 = add nsw i32 %mul1292, %241
  %mul1295 = mul nsw i32 0, %add1294
  %add1296 = add nsw i32 %mul1295, 1
  %shl1297 = shl i32 %add1296, 30
  %sub1298 = sub nsw i32 %shl1297, 1
  %mul1299 = mul nsw i32 %sub1298, 2
  %add1300 = add nsw i32 %mul1299, 1
  br label %cond.end.1308

cond.false.1301:                                  ; preds = %cond.true.1280
  %width1302 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %242 = load i32, i32* %width1302, align 4
  %mul1303 = mul nsw i32 0, %242
  %height1304 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %243 = load i32, i32* %height1304, align 4
  %add1305 = add nsw i32 %mul1303, %243
  %mul1306 = mul nsw i32 0, %add1305
  %sub1307 = sub nsw i32 %mul1306, 1
  br label %cond.end.1308

cond.end.1308:                                    ; preds = %cond.false.1301, %cond.true.1290
  %cond1309 = phi i32 [ %add1300, %cond.true.1290 ], [ %sub1307, %cond.false.1301 ]
  %width1310 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %244 = load i32, i32* %width1310, align 4
  %div1311 = sdiv i32 %cond1309, %244
  %cmp1312 = icmp slt i32 %237, %div1311
  br i1 %cmp1312, label %cond.true.1472, label %lor.lhs.false.1452

cond.false.1314:                                  ; preds = %cond.true.1276
  %width1315 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %245 = load i32, i32* %width1315, align 4
  %cmp1316 = icmp eq i32 %245, -1
  br i1 %cmp1316, label %cond.true.1318, label %cond.false.1319

cond.true.1318:                                   ; preds = %cond.false.1314
  br i1 false, label %cond.true.1472, label %lor.lhs.false.1452

cond.false.1319:                                  ; preds = %cond.false.1314
  %width1320 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %246 = load i32, i32* %width1320, align 4
  %mul1321 = mul nsw i32 0, %246
  %height1322 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %247 = load i32, i32* %height1322, align 4
  %add1323 = add nsw i32 %mul1321, %247
  %mul1324 = mul nsw i32 0, %add1323
  %sub1325 = sub nsw i32 %mul1324, 1
  %cmp1326 = icmp slt i32 %sub1325, 0
  br i1 %cmp1326, label %cond.true.1328, label %cond.false.1350

cond.true.1328:                                   ; preds = %cond.false.1319
  %width1329 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %248 = load i32, i32* %width1329, align 4
  %mul1330 = mul nsw i32 0, %248
  %height1331 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %249 = load i32, i32* %height1331, align 4
  %add1332 = add nsw i32 %mul1330, %249
  %mul1333 = mul nsw i32 0, %add1332
  %add1334 = add nsw i32 %mul1333, 0
  %neg1335 = xor i32 %add1334, -1
  %cmp1336 = icmp eq i32 %neg1335, -1
  %conv1337 = zext i1 %cmp1336 to i32
  %sub1338 = sub nsw i32 0, %conv1337
  %width1339 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %250 = load i32, i32* %width1339, align 4
  %mul1340 = mul nsw i32 0, %250
  %height1341 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %251 = load i32, i32* %height1341, align 4
  %add1342 = add nsw i32 %mul1340, %251
  %mul1343 = mul nsw i32 0, %add1342
  %add1344 = add nsw i32 %mul1343, 1
  %shl1345 = shl i32 %add1344, 30
  %sub1346 = sub nsw i32 %shl1345, 1
  %mul1347 = mul nsw i32 %sub1346, 2
  %add1348 = add nsw i32 %mul1347, 1
  %sub1349 = sub nsw i32 %sub1338, %add1348
  br label %cond.end.1357

cond.false.1350:                                  ; preds = %cond.false.1319
  %width1351 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %252 = load i32, i32* %width1351, align 4
  %mul1352 = mul nsw i32 0, %252
  %height1353 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %253 = load i32, i32* %height1353, align 4
  %add1354 = add nsw i32 %mul1352, %253
  %mul1355 = mul nsw i32 0, %add1354
  %add1356 = add nsw i32 %mul1355, 0
  br label %cond.end.1357

cond.end.1357:                                    ; preds = %cond.false.1350, %cond.true.1328
  %cond1358 = phi i32 [ %sub1349, %cond.true.1328 ], [ %add1356, %cond.false.1350 ]
  %width1359 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %254 = load i32, i32* %width1359, align 4
  %div1360 = sdiv i32 %cond1358, %254
  %height1361 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %255 = load i32, i32* %height1361, align 4
  %cmp1362 = icmp slt i32 %div1360, %255
  br i1 %cmp1362, label %cond.true.1472, label %lor.lhs.false.1452

cond.false.1364:                                  ; preds = %lor.lhs.false.1272
  %width1365 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %256 = load i32, i32* %width1365, align 4
  %cmp1366 = icmp eq i32 %256, 0
  br i1 %cmp1366, label %cond.true.1368, label %cond.false.1369

cond.true.1368:                                   ; preds = %cond.false.1364
  br i1 false, label %cond.true.1472, label %lor.lhs.false.1452

cond.false.1369:                                  ; preds = %cond.false.1364
  %height1370 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %257 = load i32, i32* %height1370, align 4
  %cmp1371 = icmp slt i32 %257, 0
  br i1 %cmp1371, label %cond.true.1373, label %cond.false.1418

cond.true.1373:                                   ; preds = %cond.false.1369
  %height1374 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %258 = load i32, i32* %height1374, align 4
  %width1375 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %259 = load i32, i32* %width1375, align 4
  %mul1376 = mul nsw i32 0, %259
  %height1377 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %260 = load i32, i32* %height1377, align 4
  %add1378 = add nsw i32 %mul1376, %260
  %mul1379 = mul nsw i32 0, %add1378
  %sub1380 = sub nsw i32 %mul1379, 1
  %cmp1381 = icmp slt i32 %sub1380, 0
  br i1 %cmp1381, label %cond.true.1383, label %cond.false.1405

cond.true.1383:                                   ; preds = %cond.true.1373
  %width1384 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %261 = load i32, i32* %width1384, align 4
  %mul1385 = mul nsw i32 0, %261
  %height1386 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %262 = load i32, i32* %height1386, align 4
  %add1387 = add nsw i32 %mul1385, %262
  %mul1388 = mul nsw i32 0, %add1387
  %add1389 = add nsw i32 %mul1388, 0
  %neg1390 = xor i32 %add1389, -1
  %cmp1391 = icmp eq i32 %neg1390, -1
  %conv1392 = zext i1 %cmp1391 to i32
  %sub1393 = sub nsw i32 0, %conv1392
  %width1394 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %263 = load i32, i32* %width1394, align 4
  %mul1395 = mul nsw i32 0, %263
  %height1396 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %264 = load i32, i32* %height1396, align 4
  %add1397 = add nsw i32 %mul1395, %264
  %mul1398 = mul nsw i32 0, %add1397
  %add1399 = add nsw i32 %mul1398, 1
  %shl1400 = shl i32 %add1399, 30
  %sub1401 = sub nsw i32 %shl1400, 1
  %mul1402 = mul nsw i32 %sub1401, 2
  %add1403 = add nsw i32 %mul1402, 1
  %sub1404 = sub nsw i32 %sub1393, %add1403
  br label %cond.end.1412

cond.false.1405:                                  ; preds = %cond.true.1373
  %width1406 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %265 = load i32, i32* %width1406, align 4
  %mul1407 = mul nsw i32 0, %265
  %height1408 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %266 = load i32, i32* %height1408, align 4
  %add1409 = add nsw i32 %mul1407, %266
  %mul1410 = mul nsw i32 0, %add1409
  %add1411 = add nsw i32 %mul1410, 0
  br label %cond.end.1412

cond.end.1412:                                    ; preds = %cond.false.1405, %cond.true.1383
  %cond1413 = phi i32 [ %sub1404, %cond.true.1383 ], [ %add1411, %cond.false.1405 ]
  %width1414 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %267 = load i32, i32* %width1414, align 4
  %div1415 = sdiv i32 %cond1413, %267
  %cmp1416 = icmp slt i32 %258, %div1415
  br i1 %cmp1416, label %cond.true.1472, label %lor.lhs.false.1452

cond.false.1418:                                  ; preds = %cond.false.1369
  %width1419 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %268 = load i32, i32* %width1419, align 4
  %mul1420 = mul nsw i32 0, %268
  %height1421 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %269 = load i32, i32* %height1421, align 4
  %add1422 = add nsw i32 %mul1420, %269
  %mul1423 = mul nsw i32 0, %add1422
  %sub1424 = sub nsw i32 %mul1423, 1
  %cmp1425 = icmp slt i32 %sub1424, 0
  br i1 %cmp1425, label %cond.true.1427, label %cond.false.1438

cond.true.1427:                                   ; preds = %cond.false.1418
  %width1428 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %270 = load i32, i32* %width1428, align 4
  %mul1429 = mul nsw i32 0, %270
  %height1430 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %271 = load i32, i32* %height1430, align 4
  %add1431 = add nsw i32 %mul1429, %271
  %mul1432 = mul nsw i32 0, %add1431
  %add1433 = add nsw i32 %mul1432, 1
  %shl1434 = shl i32 %add1433, 30
  %sub1435 = sub nsw i32 %shl1434, 1
  %mul1436 = mul nsw i32 %sub1435, 2
  %add1437 = add nsw i32 %mul1436, 1
  br label %cond.end.1445

cond.false.1438:                                  ; preds = %cond.false.1418
  %width1439 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %272 = load i32, i32* %width1439, align 4
  %mul1440 = mul nsw i32 0, %272
  %height1441 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %273 = load i32, i32* %height1441, align 4
  %add1442 = add nsw i32 %mul1440, %273
  %mul1443 = mul nsw i32 0, %add1442
  %sub1444 = sub nsw i32 %mul1443, 1
  br label %cond.end.1445

cond.end.1445:                                    ; preds = %cond.false.1438, %cond.true.1427
  %cond1446 = phi i32 [ %add1437, %cond.true.1427 ], [ %sub1444, %cond.false.1438 ]
  %width1447 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %274 = load i32, i32* %width1447, align 4
  %div1448 = sdiv i32 %cond1446, %274
  %height1449 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %275 = load i32, i32* %height1449, align 4
  %cmp1450 = icmp slt i32 %div1448, %275
  br i1 %cmp1450, label %cond.true.1472, label %lor.lhs.false.1452

lor.lhs.false.1452:                               ; preds = %cond.end.1445, %cond.end.1412, %cond.true.1368, %cond.end.1357, %cond.true.1318, %cond.end.1308
  %height1453 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %276 = load i32, i32* %height1453, align 4
  %width1454 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %277 = load i32, i32* %width1454, align 4
  %mul1455 = mul nsw i32 %276, %277
  %mul1456 = mul nsw i32 0, %mul1455
  %sub1457 = sub nsw i32 %mul1456, 1
  %cmp1458 = icmp slt i32 %sub1457, 0
  br i1 %cmp1458, label %land.lhs.true.1460, label %lor.lhs.false.1466

land.lhs.true.1460:                               ; preds = %lor.lhs.false.1452
  %height1461 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %278 = load i32, i32* %height1461, align 4
  %width1462 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %279 = load i32, i32* %width1462, align 4
  %mul1463 = mul nsw i32 %278, %279
  %cmp1464 = icmp slt i32 %mul1463, -32768
  br i1 %cmp1464, label %cond.true.1472, label %lor.lhs.false.1466

lor.lhs.false.1466:                               ; preds = %land.lhs.true.1460, %lor.lhs.false.1452
  %height1467 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %280 = load i32, i32* %height1467, align 4
  %width1468 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %281 = load i32, i32* %width1468, align 4
  %mul1469 = mul nsw i32 %280, %281
  %cmp1470 = icmp slt i32 32767, %mul1469
  br i1 %cmp1470, label %cond.true.1472, label %cond.false.1507

cond.true.1472:                                   ; preds = %lor.lhs.false.1466, %land.lhs.true.1460, %cond.end.1445, %cond.end.1412, %cond.true.1368, %cond.end.1357, %cond.true.1318, %cond.end.1308, %land.lhs.true.1268, %land.lhs.true.1260
  %height1473 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %282 = load i32, i32* %height1473, align 4
  %conv1474 = trunc i32 %282 to i16
  %conv1475 = zext i16 %conv1474 to i32
  %width1476 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %283 = load i32, i32* %width1476, align 4
  %conv1477 = trunc i32 %283 to i16
  %conv1478 = zext i16 %conv1477 to i32
  %mul1479 = mul nsw i32 %conv1475, %conv1478
  %cmp1480 = icmp sle i32 %mul1479, 32767
  br i1 %cmp1480, label %cond.true.1482, label %cond.false.1492

cond.true.1482:                                   ; preds = %cond.true.1472
  %height1483 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %284 = load i32, i32* %height1483, align 4
  %conv1484 = trunc i32 %284 to i16
  %conv1485 = zext i16 %conv1484 to i32
  %width1486 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %285 = load i32, i32* %width1486, align 4
  %conv1487 = trunc i32 %285 to i16
  %conv1488 = zext i16 %conv1487 to i32
  %mul1489 = mul nsw i32 %conv1485, %conv1488
  %conv1490 = trunc i32 %mul1489 to i16
  %conv1491 = sext i16 %conv1490 to i32
  br label %cond.end.1504

cond.false.1492:                                  ; preds = %cond.true.1472
  %height1493 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %286 = load i32, i32* %height1493, align 4
  %conv1494 = trunc i32 %286 to i16
  %conv1495 = zext i16 %conv1494 to i32
  %width1496 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %287 = load i32, i32* %width1496, align 4
  %conv1497 = trunc i32 %287 to i16
  %conv1498 = zext i16 %conv1497 to i32
  %mul1499 = mul nsw i32 %conv1495, %conv1498
  %sub1500 = sub nsw i32 %mul1499, -32768
  %conv1501 = trunc i32 %sub1500 to i16
  %conv1502 = sext i16 %conv1501 to i32
  %add1503 = add nsw i32 %conv1502, -32768
  br label %cond.end.1504

cond.end.1504:                                    ; preds = %cond.false.1492, %cond.true.1482
  %cond1505 = phi i32 [ %conv1491, %cond.true.1482 ], [ %add1503, %cond.false.1492 ]
  %conv1506 = sext i32 %cond1505 to i64
  store i64 %conv1506, i64* %needed, align 8
  br i1 true, label %if.then, label %if.end

cond.false.1507:                                  ; preds = %lor.lhs.false.1466
  %height1508 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %288 = load i32, i32* %height1508, align 4
  %conv1509 = trunc i32 %288 to i16
  %conv1510 = zext i16 %conv1509 to i32
  %width1511 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %289 = load i32, i32* %width1511, align 4
  %conv1512 = trunc i32 %289 to i16
  %conv1513 = zext i16 %conv1512 to i32
  %mul1514 = mul nsw i32 %conv1510, %conv1513
  %cmp1515 = icmp sle i32 %mul1514, 32767
  br i1 %cmp1515, label %cond.true.1517, label %cond.false.1527

cond.true.1517:                                   ; preds = %cond.false.1507
  %height1518 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %290 = load i32, i32* %height1518, align 4
  %conv1519 = trunc i32 %290 to i16
  %conv1520 = zext i16 %conv1519 to i32
  %width1521 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %291 = load i32, i32* %width1521, align 4
  %conv1522 = trunc i32 %291 to i16
  %conv1523 = zext i16 %conv1522 to i32
  %mul1524 = mul nsw i32 %conv1520, %conv1523
  %conv1525 = trunc i32 %mul1524 to i16
  %conv1526 = sext i16 %conv1525 to i32
  br label %cond.end.1539

cond.false.1527:                                  ; preds = %cond.false.1507
  %height1528 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %292 = load i32, i32* %height1528, align 4
  %conv1529 = trunc i32 %292 to i16
  %conv1530 = zext i16 %conv1529 to i32
  %width1531 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %293 = load i32, i32* %width1531, align 4
  %conv1532 = trunc i32 %293 to i16
  %conv1533 = zext i16 %conv1532 to i32
  %mul1534 = mul nsw i32 %conv1530, %conv1533
  %sub1535 = sub nsw i32 %mul1534, -32768
  %conv1536 = trunc i32 %sub1535 to i16
  %conv1537 = sext i16 %conv1536 to i32
  %add1538 = add nsw i32 %conv1537, -32768
  br label %cond.end.1539

cond.end.1539:                                    ; preds = %cond.false.1527, %cond.true.1517
  %cond1540 = phi i32 [ %conv1526, %cond.true.1517 ], [ %add1538, %cond.false.1527 ]
  %conv1541 = sext i32 %cond1540 to i64
  store i64 %conv1541, i64* %needed, align 8
  br i1 false, label %if.then, label %if.end

cond.false.1542:                                  ; preds = %cond.false.766
  br i1 false, label %cond.true.1543, label %cond.false.2136

cond.true.1543:                                   ; preds = %cond.false.1542
  br i1 false, label %cond.true.1544, label %cond.false.1840

cond.true.1544:                                   ; preds = %cond.true.1543
  %width1545 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %294 = load i32, i32* %width1545, align 4
  %mul1546 = mul nsw i32 0, %294
  %height1547 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %295 = load i32, i32* %height1547, align 4
  %add1548 = add nsw i32 %mul1546, %295
  %mul1549 = mul nsw i32 0, %add1548
  %sub1550 = sub nsw i32 %mul1549, 1
  %cmp1551 = icmp slt i32 %sub1550, 0
  br i1 %cmp1551, label %cond.true.1553, label %cond.false.1575

cond.true.1553:                                   ; preds = %cond.true.1544
  %width1554 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %296 = load i32, i32* %width1554, align 4
  %mul1555 = mul nsw i32 0, %296
  %height1556 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %297 = load i32, i32* %height1556, align 4
  %add1557 = add nsw i32 %mul1555, %297
  %mul1558 = mul nsw i32 0, %add1557
  %add1559 = add nsw i32 %mul1558, 0
  %neg1560 = xor i32 %add1559, -1
  %cmp1561 = icmp eq i32 %neg1560, -1
  %conv1562 = zext i1 %cmp1561 to i32
  %sub1563 = sub nsw i32 0, %conv1562
  %width1564 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %298 = load i32, i32* %width1564, align 4
  %mul1565 = mul nsw i32 0, %298
  %height1566 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %299 = load i32, i32* %height1566, align 4
  %add1567 = add nsw i32 %mul1565, %299
  %mul1568 = mul nsw i32 0, %add1567
  %add1569 = add nsw i32 %mul1568, 1
  %shl1570 = shl i32 %add1569, 30
  %sub1571 = sub nsw i32 %shl1570, 1
  %mul1572 = mul nsw i32 %sub1571, 2
  %add1573 = add nsw i32 %mul1572, 1
  %sub1574 = sub nsw i32 %sub1563, %add1573
  br label %cond.end.1582

cond.false.1575:                                  ; preds = %cond.true.1544
  %width1576 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %300 = load i32, i32* %width1576, align 4
  %mul1577 = mul nsw i32 0, %300
  %height1578 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %301 = load i32, i32* %height1578, align 4
  %add1579 = add nsw i32 %mul1577, %301
  %mul1580 = mul nsw i32 0, %add1579
  %add1581 = add nsw i32 %mul1580, 0
  br label %cond.end.1582

cond.end.1582:                                    ; preds = %cond.false.1575, %cond.true.1553
  %cond1583 = phi i32 [ %sub1574, %cond.true.1553 ], [ %add1581, %cond.false.1575 ]
  %cmp1584 = icmp eq i32 %cond1583, 0
  br i1 %cmp1584, label %land.lhs.true.1586, label %lor.lhs.false.1602

land.lhs.true.1586:                               ; preds = %cond.end.1582
  %height1587 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %302 = load i32, i32* %height1587, align 4
  %cmp1588 = icmp slt i32 %302, 0
  br i1 %cmp1588, label %land.lhs.true.1590, label %lor.lhs.false.1594

land.lhs.true.1590:                               ; preds = %land.lhs.true.1586
  %width1591 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %303 = load i32, i32* %width1591, align 4
  %cmp1592 = icmp slt i32 0, %303
  br i1 %cmp1592, label %cond.true.1802, label %lor.lhs.false.1594

lor.lhs.false.1594:                               ; preds = %land.lhs.true.1590, %land.lhs.true.1586
  %width1595 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %304 = load i32, i32* %width1595, align 4
  %cmp1596 = icmp slt i32 %304, 0
  br i1 %cmp1596, label %land.lhs.true.1598, label %lor.lhs.false.1602

land.lhs.true.1598:                               ; preds = %lor.lhs.false.1594
  %height1599 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %305 = load i32, i32* %height1599, align 4
  %cmp1600 = icmp slt i32 0, %305
  br i1 %cmp1600, label %cond.true.1802, label %lor.lhs.false.1602

lor.lhs.false.1602:                               ; preds = %land.lhs.true.1598, %lor.lhs.false.1594, %cond.end.1582
  %width1603 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %306 = load i32, i32* %width1603, align 4
  %cmp1604 = icmp slt i32 %306, 0
  br i1 %cmp1604, label %cond.true.1606, label %cond.false.1694

cond.true.1606:                                   ; preds = %lor.lhs.false.1602
  %height1607 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %307 = load i32, i32* %height1607, align 4
  %cmp1608 = icmp slt i32 %307, 0
  br i1 %cmp1608, label %cond.true.1610, label %cond.false.1644

cond.true.1610:                                   ; preds = %cond.true.1606
  %height1611 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %308 = load i32, i32* %height1611, align 4
  %width1612 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %309 = load i32, i32* %width1612, align 4
  %mul1613 = mul nsw i32 0, %309
  %height1614 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %310 = load i32, i32* %height1614, align 4
  %add1615 = add nsw i32 %mul1613, %310
  %mul1616 = mul nsw i32 0, %add1615
  %sub1617 = sub nsw i32 %mul1616, 1
  %cmp1618 = icmp slt i32 %sub1617, 0
  br i1 %cmp1618, label %cond.true.1620, label %cond.false.1631

cond.true.1620:                                   ; preds = %cond.true.1610
  %width1621 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %311 = load i32, i32* %width1621, align 4
  %mul1622 = mul nsw i32 0, %311
  %height1623 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %312 = load i32, i32* %height1623, align 4
  %add1624 = add nsw i32 %mul1622, %312
  %mul1625 = mul nsw i32 0, %add1624
  %add1626 = add nsw i32 %mul1625, 1
  %shl1627 = shl i32 %add1626, 30
  %sub1628 = sub nsw i32 %shl1627, 1
  %mul1629 = mul nsw i32 %sub1628, 2
  %add1630 = add nsw i32 %mul1629, 1
  br label %cond.end.1638

cond.false.1631:                                  ; preds = %cond.true.1610
  %width1632 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %313 = load i32, i32* %width1632, align 4
  %mul1633 = mul nsw i32 0, %313
  %height1634 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %314 = load i32, i32* %height1634, align 4
  %add1635 = add nsw i32 %mul1633, %314
  %mul1636 = mul nsw i32 0, %add1635
  %sub1637 = sub nsw i32 %mul1636, 1
  br label %cond.end.1638

cond.end.1638:                                    ; preds = %cond.false.1631, %cond.true.1620
  %cond1639 = phi i32 [ %add1630, %cond.true.1620 ], [ %sub1637, %cond.false.1631 ]
  %width1640 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %315 = load i32, i32* %width1640, align 4
  %div1641 = sdiv i32 %cond1639, %315
  %cmp1642 = icmp slt i32 %308, %div1641
  br i1 %cmp1642, label %cond.true.1802, label %lor.lhs.false.1782

cond.false.1644:                                  ; preds = %cond.true.1606
  %width1645 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %316 = load i32, i32* %width1645, align 4
  %cmp1646 = icmp eq i32 %316, -1
  br i1 %cmp1646, label %cond.true.1648, label %cond.false.1649

cond.true.1648:                                   ; preds = %cond.false.1644
  br i1 false, label %cond.true.1802, label %lor.lhs.false.1782

cond.false.1649:                                  ; preds = %cond.false.1644
  %width1650 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %317 = load i32, i32* %width1650, align 4
  %mul1651 = mul nsw i32 0, %317
  %height1652 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %318 = load i32, i32* %height1652, align 4
  %add1653 = add nsw i32 %mul1651, %318
  %mul1654 = mul nsw i32 0, %add1653
  %sub1655 = sub nsw i32 %mul1654, 1
  %cmp1656 = icmp slt i32 %sub1655, 0
  br i1 %cmp1656, label %cond.true.1658, label %cond.false.1680

cond.true.1658:                                   ; preds = %cond.false.1649
  %width1659 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %319 = load i32, i32* %width1659, align 4
  %mul1660 = mul nsw i32 0, %319
  %height1661 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %320 = load i32, i32* %height1661, align 4
  %add1662 = add nsw i32 %mul1660, %320
  %mul1663 = mul nsw i32 0, %add1662
  %add1664 = add nsw i32 %mul1663, 0
  %neg1665 = xor i32 %add1664, -1
  %cmp1666 = icmp eq i32 %neg1665, -1
  %conv1667 = zext i1 %cmp1666 to i32
  %sub1668 = sub nsw i32 0, %conv1667
  %width1669 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %321 = load i32, i32* %width1669, align 4
  %mul1670 = mul nsw i32 0, %321
  %height1671 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %322 = load i32, i32* %height1671, align 4
  %add1672 = add nsw i32 %mul1670, %322
  %mul1673 = mul nsw i32 0, %add1672
  %add1674 = add nsw i32 %mul1673, 1
  %shl1675 = shl i32 %add1674, 30
  %sub1676 = sub nsw i32 %shl1675, 1
  %mul1677 = mul nsw i32 %sub1676, 2
  %add1678 = add nsw i32 %mul1677, 1
  %sub1679 = sub nsw i32 %sub1668, %add1678
  br label %cond.end.1687

cond.false.1680:                                  ; preds = %cond.false.1649
  %width1681 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %323 = load i32, i32* %width1681, align 4
  %mul1682 = mul nsw i32 0, %323
  %height1683 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %324 = load i32, i32* %height1683, align 4
  %add1684 = add nsw i32 %mul1682, %324
  %mul1685 = mul nsw i32 0, %add1684
  %add1686 = add nsw i32 %mul1685, 0
  br label %cond.end.1687

cond.end.1687:                                    ; preds = %cond.false.1680, %cond.true.1658
  %cond1688 = phi i32 [ %sub1679, %cond.true.1658 ], [ %add1686, %cond.false.1680 ]
  %width1689 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %325 = load i32, i32* %width1689, align 4
  %div1690 = sdiv i32 %cond1688, %325
  %height1691 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %326 = load i32, i32* %height1691, align 4
  %cmp1692 = icmp slt i32 %div1690, %326
  br i1 %cmp1692, label %cond.true.1802, label %lor.lhs.false.1782

cond.false.1694:                                  ; preds = %lor.lhs.false.1602
  %width1695 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %327 = load i32, i32* %width1695, align 4
  %cmp1696 = icmp eq i32 %327, 0
  br i1 %cmp1696, label %cond.true.1698, label %cond.false.1699

cond.true.1698:                                   ; preds = %cond.false.1694
  br i1 false, label %cond.true.1802, label %lor.lhs.false.1782

cond.false.1699:                                  ; preds = %cond.false.1694
  %height1700 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %328 = load i32, i32* %height1700, align 4
  %cmp1701 = icmp slt i32 %328, 0
  br i1 %cmp1701, label %cond.true.1703, label %cond.false.1748

cond.true.1703:                                   ; preds = %cond.false.1699
  %height1704 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %329 = load i32, i32* %height1704, align 4
  %width1705 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %330 = load i32, i32* %width1705, align 4
  %mul1706 = mul nsw i32 0, %330
  %height1707 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %331 = load i32, i32* %height1707, align 4
  %add1708 = add nsw i32 %mul1706, %331
  %mul1709 = mul nsw i32 0, %add1708
  %sub1710 = sub nsw i32 %mul1709, 1
  %cmp1711 = icmp slt i32 %sub1710, 0
  br i1 %cmp1711, label %cond.true.1713, label %cond.false.1735

cond.true.1713:                                   ; preds = %cond.true.1703
  %width1714 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %332 = load i32, i32* %width1714, align 4
  %mul1715 = mul nsw i32 0, %332
  %height1716 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %333 = load i32, i32* %height1716, align 4
  %add1717 = add nsw i32 %mul1715, %333
  %mul1718 = mul nsw i32 0, %add1717
  %add1719 = add nsw i32 %mul1718, 0
  %neg1720 = xor i32 %add1719, -1
  %cmp1721 = icmp eq i32 %neg1720, -1
  %conv1722 = zext i1 %cmp1721 to i32
  %sub1723 = sub nsw i32 0, %conv1722
  %width1724 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %334 = load i32, i32* %width1724, align 4
  %mul1725 = mul nsw i32 0, %334
  %height1726 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %335 = load i32, i32* %height1726, align 4
  %add1727 = add nsw i32 %mul1725, %335
  %mul1728 = mul nsw i32 0, %add1727
  %add1729 = add nsw i32 %mul1728, 1
  %shl1730 = shl i32 %add1729, 30
  %sub1731 = sub nsw i32 %shl1730, 1
  %mul1732 = mul nsw i32 %sub1731, 2
  %add1733 = add nsw i32 %mul1732, 1
  %sub1734 = sub nsw i32 %sub1723, %add1733
  br label %cond.end.1742

cond.false.1735:                                  ; preds = %cond.true.1703
  %width1736 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %336 = load i32, i32* %width1736, align 4
  %mul1737 = mul nsw i32 0, %336
  %height1738 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %337 = load i32, i32* %height1738, align 4
  %add1739 = add nsw i32 %mul1737, %337
  %mul1740 = mul nsw i32 0, %add1739
  %add1741 = add nsw i32 %mul1740, 0
  br label %cond.end.1742

cond.end.1742:                                    ; preds = %cond.false.1735, %cond.true.1713
  %cond1743 = phi i32 [ %sub1734, %cond.true.1713 ], [ %add1741, %cond.false.1735 ]
  %width1744 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %338 = load i32, i32* %width1744, align 4
  %div1745 = sdiv i32 %cond1743, %338
  %cmp1746 = icmp slt i32 %329, %div1745
  br i1 %cmp1746, label %cond.true.1802, label %lor.lhs.false.1782

cond.false.1748:                                  ; preds = %cond.false.1699
  %width1749 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %339 = load i32, i32* %width1749, align 4
  %mul1750 = mul nsw i32 0, %339
  %height1751 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %340 = load i32, i32* %height1751, align 4
  %add1752 = add nsw i32 %mul1750, %340
  %mul1753 = mul nsw i32 0, %add1752
  %sub1754 = sub nsw i32 %mul1753, 1
  %cmp1755 = icmp slt i32 %sub1754, 0
  br i1 %cmp1755, label %cond.true.1757, label %cond.false.1768

cond.true.1757:                                   ; preds = %cond.false.1748
  %width1758 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %341 = load i32, i32* %width1758, align 4
  %mul1759 = mul nsw i32 0, %341
  %height1760 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %342 = load i32, i32* %height1760, align 4
  %add1761 = add nsw i32 %mul1759, %342
  %mul1762 = mul nsw i32 0, %add1761
  %add1763 = add nsw i32 %mul1762, 1
  %shl1764 = shl i32 %add1763, 30
  %sub1765 = sub nsw i32 %shl1764, 1
  %mul1766 = mul nsw i32 %sub1765, 2
  %add1767 = add nsw i32 %mul1766, 1
  br label %cond.end.1775

cond.false.1768:                                  ; preds = %cond.false.1748
  %width1769 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %343 = load i32, i32* %width1769, align 4
  %mul1770 = mul nsw i32 0, %343
  %height1771 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %344 = load i32, i32* %height1771, align 4
  %add1772 = add nsw i32 %mul1770, %344
  %mul1773 = mul nsw i32 0, %add1772
  %sub1774 = sub nsw i32 %mul1773, 1
  br label %cond.end.1775

cond.end.1775:                                    ; preds = %cond.false.1768, %cond.true.1757
  %cond1776 = phi i32 [ %add1767, %cond.true.1757 ], [ %sub1774, %cond.false.1768 ]
  %width1777 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %345 = load i32, i32* %width1777, align 4
  %div1778 = sdiv i32 %cond1776, %345
  %height1779 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %346 = load i32, i32* %height1779, align 4
  %cmp1780 = icmp slt i32 %div1778, %346
  br i1 %cmp1780, label %cond.true.1802, label %lor.lhs.false.1782

lor.lhs.false.1782:                               ; preds = %cond.end.1775, %cond.end.1742, %cond.true.1698, %cond.end.1687, %cond.true.1648, %cond.end.1638
  %height1783 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %347 = load i32, i32* %height1783, align 4
  %width1784 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %348 = load i32, i32* %width1784, align 4
  %mul1785 = mul nsw i32 %347, %348
  %mul1786 = mul nsw i32 0, %mul1785
  %sub1787 = sub nsw i32 %mul1786, 1
  %cmp1788 = icmp slt i32 %sub1787, 0
  br i1 %cmp1788, label %land.lhs.true.1790, label %lor.lhs.false.1796

land.lhs.true.1790:                               ; preds = %lor.lhs.false.1782
  %height1791 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %349 = load i32, i32* %height1791, align 4
  %width1792 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %350 = load i32, i32* %width1792, align 4
  %mul1793 = mul nsw i32 %349, %350
  %cmp1794 = icmp slt i32 %mul1793, -2147483648
  br i1 %cmp1794, label %cond.true.1802, label %lor.lhs.false.1796

lor.lhs.false.1796:                               ; preds = %land.lhs.true.1790, %lor.lhs.false.1782
  %height1797 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %351 = load i32, i32* %height1797, align 4
  %width1798 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %352 = load i32, i32* %width1798, align 4
  %mul1799 = mul nsw i32 %351, %352
  %cmp1800 = icmp slt i32 2147483647, %mul1799
  br i1 %cmp1800, label %cond.true.1802, label %cond.false.1821

cond.true.1802:                                   ; preds = %lor.lhs.false.1796, %land.lhs.true.1790, %cond.end.1775, %cond.end.1742, %cond.true.1698, %cond.end.1687, %cond.true.1648, %cond.end.1638, %land.lhs.true.1598, %land.lhs.true.1590
  %height1803 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %353 = load i32, i32* %height1803, align 4
  %width1804 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %354 = load i32, i32* %width1804, align 4
  %mul1805 = mul i32 %353, %354
  %cmp1806 = icmp ule i32 %mul1805, 2147483647
  br i1 %cmp1806, label %cond.true.1808, label %cond.false.1812

cond.true.1808:                                   ; preds = %cond.true.1802
  %height1809 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %355 = load i32, i32* %height1809, align 4
  %width1810 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %356 = load i32, i32* %width1810, align 4
  %mul1811 = mul i32 %355, %356
  br label %cond.end.1818

cond.false.1812:                                  ; preds = %cond.true.1802
  %height1813 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %357 = load i32, i32* %height1813, align 4
  %width1814 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %358 = load i32, i32* %width1814, align 4
  %mul1815 = mul i32 %357, %358
  %sub1816 = sub i32 %mul1815, -2147483648
  %add1817 = add nsw i32 %sub1816, -2147483648
  br label %cond.end.1818

cond.end.1818:                                    ; preds = %cond.false.1812, %cond.true.1808
  %cond1819 = phi i32 [ %mul1811, %cond.true.1808 ], [ %add1817, %cond.false.1812 ]
  %conv1820 = sext i32 %cond1819 to i64
  store i64 %conv1820, i64* %needed, align 8
  br i1 true, label %if.then, label %if.end

cond.false.1821:                                  ; preds = %lor.lhs.false.1796
  %height1822 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %359 = load i32, i32* %height1822, align 4
  %width1823 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %360 = load i32, i32* %width1823, align 4
  %mul1824 = mul i32 %359, %360
  %cmp1825 = icmp ule i32 %mul1824, 2147483647
  br i1 %cmp1825, label %cond.true.1827, label %cond.false.1831

cond.true.1827:                                   ; preds = %cond.false.1821
  %height1828 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %361 = load i32, i32* %height1828, align 4
  %width1829 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %362 = load i32, i32* %width1829, align 4
  %mul1830 = mul i32 %361, %362
  br label %cond.end.1837

cond.false.1831:                                  ; preds = %cond.false.1821
  %height1832 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %363 = load i32, i32* %height1832, align 4
  %width1833 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %364 = load i32, i32* %width1833, align 4
  %mul1834 = mul i32 %363, %364
  %sub1835 = sub i32 %mul1834, -2147483648
  %add1836 = add nsw i32 %sub1835, -2147483648
  br label %cond.end.1837

cond.end.1837:                                    ; preds = %cond.false.1831, %cond.true.1827
  %cond1838 = phi i32 [ %mul1830, %cond.true.1827 ], [ %add1836, %cond.false.1831 ]
  %conv1839 = sext i32 %cond1838 to i64
  store i64 %conv1839, i64* %needed, align 8
  br i1 false, label %if.then, label %if.end

cond.false.1840:                                  ; preds = %cond.true.1543
  %width1841 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %365 = load i32, i32* %width1841, align 4
  %mul1842 = mul nsw i32 0, %365
  %height1843 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %366 = load i32, i32* %height1843, align 4
  %add1844 = add nsw i32 %mul1842, %366
  %mul1845 = mul nsw i32 0, %add1844
  %sub1846 = sub nsw i32 %mul1845, 1
  %cmp1847 = icmp slt i32 %sub1846, 0
  br i1 %cmp1847, label %cond.true.1849, label %cond.false.1871

cond.true.1849:                                   ; preds = %cond.false.1840
  %width1850 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %367 = load i32, i32* %width1850, align 4
  %mul1851 = mul nsw i32 0, %367
  %height1852 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %368 = load i32, i32* %height1852, align 4
  %add1853 = add nsw i32 %mul1851, %368
  %mul1854 = mul nsw i32 0, %add1853
  %add1855 = add nsw i32 %mul1854, 0
  %neg1856 = xor i32 %add1855, -1
  %cmp1857 = icmp eq i32 %neg1856, -1
  %conv1858 = zext i1 %cmp1857 to i32
  %sub1859 = sub nsw i32 0, %conv1858
  %width1860 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %369 = load i32, i32* %width1860, align 4
  %mul1861 = mul nsw i32 0, %369
  %height1862 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %370 = load i32, i32* %height1862, align 4
  %add1863 = add nsw i32 %mul1861, %370
  %mul1864 = mul nsw i32 0, %add1863
  %add1865 = add nsw i32 %mul1864, 1
  %shl1866 = shl i32 %add1865, 30
  %sub1867 = sub nsw i32 %shl1866, 1
  %mul1868 = mul nsw i32 %sub1867, 2
  %add1869 = add nsw i32 %mul1868, 1
  %sub1870 = sub nsw i32 %sub1859, %add1869
  br label %cond.end.1878

cond.false.1871:                                  ; preds = %cond.false.1840
  %width1872 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %371 = load i32, i32* %width1872, align 4
  %mul1873 = mul nsw i32 0, %371
  %height1874 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %372 = load i32, i32* %height1874, align 4
  %add1875 = add nsw i32 %mul1873, %372
  %mul1876 = mul nsw i32 0, %add1875
  %add1877 = add nsw i32 %mul1876, 0
  br label %cond.end.1878

cond.end.1878:                                    ; preds = %cond.false.1871, %cond.true.1849
  %cond1879 = phi i32 [ %sub1870, %cond.true.1849 ], [ %add1877, %cond.false.1871 ]
  %cmp1880 = icmp eq i32 %cond1879, 0
  br i1 %cmp1880, label %land.lhs.true.1882, label %lor.lhs.false.1898

land.lhs.true.1882:                               ; preds = %cond.end.1878
  %height1883 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %373 = load i32, i32* %height1883, align 4
  %cmp1884 = icmp slt i32 %373, 0
  br i1 %cmp1884, label %land.lhs.true.1886, label %lor.lhs.false.1890

land.lhs.true.1886:                               ; preds = %land.lhs.true.1882
  %width1887 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %374 = load i32, i32* %width1887, align 4
  %cmp1888 = icmp slt i32 0, %374
  br i1 %cmp1888, label %cond.true.2098, label %lor.lhs.false.1890

lor.lhs.false.1890:                               ; preds = %land.lhs.true.1886, %land.lhs.true.1882
  %width1891 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %375 = load i32, i32* %width1891, align 4
  %cmp1892 = icmp slt i32 %375, 0
  br i1 %cmp1892, label %land.lhs.true.1894, label %lor.lhs.false.1898

land.lhs.true.1894:                               ; preds = %lor.lhs.false.1890
  %height1895 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %376 = load i32, i32* %height1895, align 4
  %cmp1896 = icmp slt i32 0, %376
  br i1 %cmp1896, label %cond.true.2098, label %lor.lhs.false.1898

lor.lhs.false.1898:                               ; preds = %land.lhs.true.1894, %lor.lhs.false.1890, %cond.end.1878
  %width1899 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %377 = load i32, i32* %width1899, align 4
  %cmp1900 = icmp slt i32 %377, 0
  br i1 %cmp1900, label %cond.true.1902, label %cond.false.1990

cond.true.1902:                                   ; preds = %lor.lhs.false.1898
  %height1903 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %378 = load i32, i32* %height1903, align 4
  %cmp1904 = icmp slt i32 %378, 0
  br i1 %cmp1904, label %cond.true.1906, label %cond.false.1940

cond.true.1906:                                   ; preds = %cond.true.1902
  %height1907 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %379 = load i32, i32* %height1907, align 4
  %width1908 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %380 = load i32, i32* %width1908, align 4
  %mul1909 = mul nsw i32 0, %380
  %height1910 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %381 = load i32, i32* %height1910, align 4
  %add1911 = add nsw i32 %mul1909, %381
  %mul1912 = mul nsw i32 0, %add1911
  %sub1913 = sub nsw i32 %mul1912, 1
  %cmp1914 = icmp slt i32 %sub1913, 0
  br i1 %cmp1914, label %cond.true.1916, label %cond.false.1927

cond.true.1916:                                   ; preds = %cond.true.1906
  %width1917 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %382 = load i32, i32* %width1917, align 4
  %mul1918 = mul nsw i32 0, %382
  %height1919 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %383 = load i32, i32* %height1919, align 4
  %add1920 = add nsw i32 %mul1918, %383
  %mul1921 = mul nsw i32 0, %add1920
  %add1922 = add nsw i32 %mul1921, 1
  %shl1923 = shl i32 %add1922, 30
  %sub1924 = sub nsw i32 %shl1923, 1
  %mul1925 = mul nsw i32 %sub1924, 2
  %add1926 = add nsw i32 %mul1925, 1
  br label %cond.end.1934

cond.false.1927:                                  ; preds = %cond.true.1906
  %width1928 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %384 = load i32, i32* %width1928, align 4
  %mul1929 = mul nsw i32 0, %384
  %height1930 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %385 = load i32, i32* %height1930, align 4
  %add1931 = add nsw i32 %mul1929, %385
  %mul1932 = mul nsw i32 0, %add1931
  %sub1933 = sub nsw i32 %mul1932, 1
  br label %cond.end.1934

cond.end.1934:                                    ; preds = %cond.false.1927, %cond.true.1916
  %cond1935 = phi i32 [ %add1926, %cond.true.1916 ], [ %sub1933, %cond.false.1927 ]
  %width1936 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %386 = load i32, i32* %width1936, align 4
  %div1937 = sdiv i32 %cond1935, %386
  %cmp1938 = icmp slt i32 %379, %div1937
  br i1 %cmp1938, label %cond.true.2098, label %lor.lhs.false.2078

cond.false.1940:                                  ; preds = %cond.true.1902
  %width1941 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %387 = load i32, i32* %width1941, align 4
  %cmp1942 = icmp eq i32 %387, -1
  br i1 %cmp1942, label %cond.true.1944, label %cond.false.1945

cond.true.1944:                                   ; preds = %cond.false.1940
  br i1 false, label %cond.true.2098, label %lor.lhs.false.2078

cond.false.1945:                                  ; preds = %cond.false.1940
  %width1946 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %388 = load i32, i32* %width1946, align 4
  %mul1947 = mul nsw i32 0, %388
  %height1948 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %389 = load i32, i32* %height1948, align 4
  %add1949 = add nsw i32 %mul1947, %389
  %mul1950 = mul nsw i32 0, %add1949
  %sub1951 = sub nsw i32 %mul1950, 1
  %cmp1952 = icmp slt i32 %sub1951, 0
  br i1 %cmp1952, label %cond.true.1954, label %cond.false.1976

cond.true.1954:                                   ; preds = %cond.false.1945
  %width1955 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %390 = load i32, i32* %width1955, align 4
  %mul1956 = mul nsw i32 0, %390
  %height1957 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %391 = load i32, i32* %height1957, align 4
  %add1958 = add nsw i32 %mul1956, %391
  %mul1959 = mul nsw i32 0, %add1958
  %add1960 = add nsw i32 %mul1959, 0
  %neg1961 = xor i32 %add1960, -1
  %cmp1962 = icmp eq i32 %neg1961, -1
  %conv1963 = zext i1 %cmp1962 to i32
  %sub1964 = sub nsw i32 0, %conv1963
  %width1965 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %392 = load i32, i32* %width1965, align 4
  %mul1966 = mul nsw i32 0, %392
  %height1967 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %393 = load i32, i32* %height1967, align 4
  %add1968 = add nsw i32 %mul1966, %393
  %mul1969 = mul nsw i32 0, %add1968
  %add1970 = add nsw i32 %mul1969, 1
  %shl1971 = shl i32 %add1970, 30
  %sub1972 = sub nsw i32 %shl1971, 1
  %mul1973 = mul nsw i32 %sub1972, 2
  %add1974 = add nsw i32 %mul1973, 1
  %sub1975 = sub nsw i32 %sub1964, %add1974
  br label %cond.end.1983

cond.false.1976:                                  ; preds = %cond.false.1945
  %width1977 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %394 = load i32, i32* %width1977, align 4
  %mul1978 = mul nsw i32 0, %394
  %height1979 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %395 = load i32, i32* %height1979, align 4
  %add1980 = add nsw i32 %mul1978, %395
  %mul1981 = mul nsw i32 0, %add1980
  %add1982 = add nsw i32 %mul1981, 0
  br label %cond.end.1983

cond.end.1983:                                    ; preds = %cond.false.1976, %cond.true.1954
  %cond1984 = phi i32 [ %sub1975, %cond.true.1954 ], [ %add1982, %cond.false.1976 ]
  %width1985 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %396 = load i32, i32* %width1985, align 4
  %div1986 = sdiv i32 %cond1984, %396
  %height1987 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %397 = load i32, i32* %height1987, align 4
  %cmp1988 = icmp slt i32 %div1986, %397
  br i1 %cmp1988, label %cond.true.2098, label %lor.lhs.false.2078

cond.false.1990:                                  ; preds = %lor.lhs.false.1898
  %width1991 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %398 = load i32, i32* %width1991, align 4
  %cmp1992 = icmp eq i32 %398, 0
  br i1 %cmp1992, label %cond.true.1994, label %cond.false.1995

cond.true.1994:                                   ; preds = %cond.false.1990
  br i1 false, label %cond.true.2098, label %lor.lhs.false.2078

cond.false.1995:                                  ; preds = %cond.false.1990
  %height1996 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %399 = load i32, i32* %height1996, align 4
  %cmp1997 = icmp slt i32 %399, 0
  br i1 %cmp1997, label %cond.true.1999, label %cond.false.2044

cond.true.1999:                                   ; preds = %cond.false.1995
  %height2000 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %400 = load i32, i32* %height2000, align 4
  %width2001 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %401 = load i32, i32* %width2001, align 4
  %mul2002 = mul nsw i32 0, %401
  %height2003 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %402 = load i32, i32* %height2003, align 4
  %add2004 = add nsw i32 %mul2002, %402
  %mul2005 = mul nsw i32 0, %add2004
  %sub2006 = sub nsw i32 %mul2005, 1
  %cmp2007 = icmp slt i32 %sub2006, 0
  br i1 %cmp2007, label %cond.true.2009, label %cond.false.2031

cond.true.2009:                                   ; preds = %cond.true.1999
  %width2010 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %403 = load i32, i32* %width2010, align 4
  %mul2011 = mul nsw i32 0, %403
  %height2012 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %404 = load i32, i32* %height2012, align 4
  %add2013 = add nsw i32 %mul2011, %404
  %mul2014 = mul nsw i32 0, %add2013
  %add2015 = add nsw i32 %mul2014, 0
  %neg2016 = xor i32 %add2015, -1
  %cmp2017 = icmp eq i32 %neg2016, -1
  %conv2018 = zext i1 %cmp2017 to i32
  %sub2019 = sub nsw i32 0, %conv2018
  %width2020 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %405 = load i32, i32* %width2020, align 4
  %mul2021 = mul nsw i32 0, %405
  %height2022 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %406 = load i32, i32* %height2022, align 4
  %add2023 = add nsw i32 %mul2021, %406
  %mul2024 = mul nsw i32 0, %add2023
  %add2025 = add nsw i32 %mul2024, 1
  %shl2026 = shl i32 %add2025, 30
  %sub2027 = sub nsw i32 %shl2026, 1
  %mul2028 = mul nsw i32 %sub2027, 2
  %add2029 = add nsw i32 %mul2028, 1
  %sub2030 = sub nsw i32 %sub2019, %add2029
  br label %cond.end.2038

cond.false.2031:                                  ; preds = %cond.true.1999
  %width2032 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %407 = load i32, i32* %width2032, align 4
  %mul2033 = mul nsw i32 0, %407
  %height2034 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %408 = load i32, i32* %height2034, align 4
  %add2035 = add nsw i32 %mul2033, %408
  %mul2036 = mul nsw i32 0, %add2035
  %add2037 = add nsw i32 %mul2036, 0
  br label %cond.end.2038

cond.end.2038:                                    ; preds = %cond.false.2031, %cond.true.2009
  %cond2039 = phi i32 [ %sub2030, %cond.true.2009 ], [ %add2037, %cond.false.2031 ]
  %width2040 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %409 = load i32, i32* %width2040, align 4
  %div2041 = sdiv i32 %cond2039, %409
  %cmp2042 = icmp slt i32 %400, %div2041
  br i1 %cmp2042, label %cond.true.2098, label %lor.lhs.false.2078

cond.false.2044:                                  ; preds = %cond.false.1995
  %width2045 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %410 = load i32, i32* %width2045, align 4
  %mul2046 = mul nsw i32 0, %410
  %height2047 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %411 = load i32, i32* %height2047, align 4
  %add2048 = add nsw i32 %mul2046, %411
  %mul2049 = mul nsw i32 0, %add2048
  %sub2050 = sub nsw i32 %mul2049, 1
  %cmp2051 = icmp slt i32 %sub2050, 0
  br i1 %cmp2051, label %cond.true.2053, label %cond.false.2064

cond.true.2053:                                   ; preds = %cond.false.2044
  %width2054 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %412 = load i32, i32* %width2054, align 4
  %mul2055 = mul nsw i32 0, %412
  %height2056 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %413 = load i32, i32* %height2056, align 4
  %add2057 = add nsw i32 %mul2055, %413
  %mul2058 = mul nsw i32 0, %add2057
  %add2059 = add nsw i32 %mul2058, 1
  %shl2060 = shl i32 %add2059, 30
  %sub2061 = sub nsw i32 %shl2060, 1
  %mul2062 = mul nsw i32 %sub2061, 2
  %add2063 = add nsw i32 %mul2062, 1
  br label %cond.end.2071

cond.false.2064:                                  ; preds = %cond.false.2044
  %width2065 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %414 = load i32, i32* %width2065, align 4
  %mul2066 = mul nsw i32 0, %414
  %height2067 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %415 = load i32, i32* %height2067, align 4
  %add2068 = add nsw i32 %mul2066, %415
  %mul2069 = mul nsw i32 0, %add2068
  %sub2070 = sub nsw i32 %mul2069, 1
  br label %cond.end.2071

cond.end.2071:                                    ; preds = %cond.false.2064, %cond.true.2053
  %cond2072 = phi i32 [ %add2063, %cond.true.2053 ], [ %sub2070, %cond.false.2064 ]
  %width2073 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %416 = load i32, i32* %width2073, align 4
  %div2074 = sdiv i32 %cond2072, %416
  %height2075 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %417 = load i32, i32* %height2075, align 4
  %cmp2076 = icmp slt i32 %div2074, %417
  br i1 %cmp2076, label %cond.true.2098, label %lor.lhs.false.2078

lor.lhs.false.2078:                               ; preds = %cond.end.2071, %cond.end.2038, %cond.true.1994, %cond.end.1983, %cond.true.1944, %cond.end.1934
  %height2079 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %418 = load i32, i32* %height2079, align 4
  %width2080 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %419 = load i32, i32* %width2080, align 4
  %mul2081 = mul nsw i32 %418, %419
  %mul2082 = mul nsw i32 0, %mul2081
  %sub2083 = sub nsw i32 %mul2082, 1
  %cmp2084 = icmp slt i32 %sub2083, 0
  br i1 %cmp2084, label %land.lhs.true.2086, label %lor.lhs.false.2092

land.lhs.true.2086:                               ; preds = %lor.lhs.false.2078
  %height2087 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %420 = load i32, i32* %height2087, align 4
  %width2088 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %421 = load i32, i32* %width2088, align 4
  %mul2089 = mul nsw i32 %420, %421
  %cmp2090 = icmp slt i32 %mul2089, -2147483648
  br i1 %cmp2090, label %cond.true.2098, label %lor.lhs.false.2092

lor.lhs.false.2092:                               ; preds = %land.lhs.true.2086, %lor.lhs.false.2078
  %height2093 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %422 = load i32, i32* %height2093, align 4
  %width2094 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %423 = load i32, i32* %width2094, align 4
  %mul2095 = mul nsw i32 %422, %423
  %cmp2096 = icmp slt i32 2147483647, %mul2095
  br i1 %cmp2096, label %cond.true.2098, label %cond.false.2117

cond.true.2098:                                   ; preds = %lor.lhs.false.2092, %land.lhs.true.2086, %cond.end.2071, %cond.end.2038, %cond.true.1994, %cond.end.1983, %cond.true.1944, %cond.end.1934, %land.lhs.true.1894, %land.lhs.true.1886
  %height2099 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %424 = load i32, i32* %height2099, align 4
  %width2100 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %425 = load i32, i32* %width2100, align 4
  %mul2101 = mul i32 %424, %425
  %cmp2102 = icmp ule i32 %mul2101, 2147483647
  br i1 %cmp2102, label %cond.true.2104, label %cond.false.2108

cond.true.2104:                                   ; preds = %cond.true.2098
  %height2105 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %426 = load i32, i32* %height2105, align 4
  %width2106 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %427 = load i32, i32* %width2106, align 4
  %mul2107 = mul i32 %426, %427
  br label %cond.end.2114

cond.false.2108:                                  ; preds = %cond.true.2098
  %height2109 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %428 = load i32, i32* %height2109, align 4
  %width2110 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %429 = load i32, i32* %width2110, align 4
  %mul2111 = mul i32 %428, %429
  %sub2112 = sub i32 %mul2111, -2147483648
  %add2113 = add nsw i32 %sub2112, -2147483648
  br label %cond.end.2114

cond.end.2114:                                    ; preds = %cond.false.2108, %cond.true.2104
  %cond2115 = phi i32 [ %mul2107, %cond.true.2104 ], [ %add2113, %cond.false.2108 ]
  %conv2116 = sext i32 %cond2115 to i64
  store i64 %conv2116, i64* %needed, align 8
  br i1 true, label %if.then, label %if.end

cond.false.2117:                                  ; preds = %lor.lhs.false.2092
  %height2118 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %430 = load i32, i32* %height2118, align 4
  %width2119 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %431 = load i32, i32* %width2119, align 4
  %mul2120 = mul i32 %430, %431
  %cmp2121 = icmp ule i32 %mul2120, 2147483647
  br i1 %cmp2121, label %cond.true.2123, label %cond.false.2127

cond.true.2123:                                   ; preds = %cond.false.2117
  %height2124 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %432 = load i32, i32* %height2124, align 4
  %width2125 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %433 = load i32, i32* %width2125, align 4
  %mul2126 = mul i32 %432, %433
  br label %cond.end.2133

cond.false.2127:                                  ; preds = %cond.false.2117
  %height2128 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %434 = load i32, i32* %height2128, align 4
  %width2129 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %435 = load i32, i32* %width2129, align 4
  %mul2130 = mul i32 %434, %435
  %sub2131 = sub i32 %mul2130, -2147483648
  %add2132 = add nsw i32 %sub2131, -2147483648
  br label %cond.end.2133

cond.end.2133:                                    ; preds = %cond.false.2127, %cond.true.2123
  %cond2134 = phi i32 [ %mul2126, %cond.true.2123 ], [ %add2132, %cond.false.2127 ]
  %conv2135 = sext i32 %cond2134 to i64
  store i64 %conv2135, i64* %needed, align 8
  br i1 false, label %if.then, label %if.end

cond.false.2136:                                  ; preds = %cond.false.1542
  br i1 true, label %cond.true.2137, label %cond.false.2814

cond.true.2137:                                   ; preds = %cond.false.2136
  br i1 true, label %cond.true.2138, label %cond.false.2506

cond.true.2138:                                   ; preds = %cond.true.2137
  %width2139 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %436 = load i32, i32* %width2139, align 4
  %conv2140 = sext i32 %436 to i64
  %mul2141 = mul nsw i64 0, %conv2140
  %height2142 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %437 = load i32, i32* %height2142, align 4
  %conv2143 = sext i32 %437 to i64
  %add2144 = add nsw i64 %mul2141, %conv2143
  %mul2145 = mul nsw i64 0, %add2144
  %sub2146 = sub nsw i64 %mul2145, 1
  %cmp2147 = icmp slt i64 %sub2146, 0
  br i1 %cmp2147, label %cond.true.2149, label %cond.false.2176

cond.true.2149:                                   ; preds = %cond.true.2138
  %width2150 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %438 = load i32, i32* %width2150, align 4
  %conv2151 = sext i32 %438 to i64
  %mul2152 = mul nsw i64 0, %conv2151
  %height2153 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %439 = load i32, i32* %height2153, align 4
  %conv2154 = sext i32 %439 to i64
  %add2155 = add nsw i64 %mul2152, %conv2154
  %mul2156 = mul nsw i64 0, %add2155
  %add2157 = add nsw i64 %mul2156, 0
  %neg2158 = xor i64 %add2157, -1
  %cmp2159 = icmp eq i64 %neg2158, -1
  %conv2160 = zext i1 %cmp2159 to i32
  %sub2161 = sub nsw i32 0, %conv2160
  %conv2162 = sext i32 %sub2161 to i64
  %width2163 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %440 = load i32, i32* %width2163, align 4
  %conv2164 = sext i32 %440 to i64
  %mul2165 = mul nsw i64 0, %conv2164
  %height2166 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %441 = load i32, i32* %height2166, align 4
  %conv2167 = sext i32 %441 to i64
  %add2168 = add nsw i64 %mul2165, %conv2167
  %mul2169 = mul nsw i64 0, %add2168
  %add2170 = add nsw i64 %mul2169, 1
  %shl2171 = shl i64 %add2170, 62
  %sub2172 = sub nsw i64 %shl2171, 1
  %mul2173 = mul nsw i64 %sub2172, 2
  %add2174 = add nsw i64 %mul2173, 1
  %sub2175 = sub nsw i64 %conv2162, %add2174
  br label %cond.end.2185

cond.false.2176:                                  ; preds = %cond.true.2138
  %width2177 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %442 = load i32, i32* %width2177, align 4
  %conv2178 = sext i32 %442 to i64
  %mul2179 = mul nsw i64 0, %conv2178
  %height2180 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %443 = load i32, i32* %height2180, align 4
  %conv2181 = sext i32 %443 to i64
  %add2182 = add nsw i64 %mul2179, %conv2181
  %mul2183 = mul nsw i64 0, %add2182
  %add2184 = add nsw i64 %mul2183, 0
  br label %cond.end.2185

cond.end.2185:                                    ; preds = %cond.false.2176, %cond.true.2149
  %cond2186 = phi i64 [ %sub2175, %cond.true.2149 ], [ %add2184, %cond.false.2176 ]
  %cmp2187 = icmp eq i64 %cond2186, 0
  br i1 %cmp2187, label %land.lhs.true.2189, label %lor.lhs.false.2209

land.lhs.true.2189:                               ; preds = %cond.end.2185
  %height2190 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %444 = load i32, i32* %height2190, align 4
  %conv2191 = sext i32 %444 to i64
  %cmp2192 = icmp slt i64 %conv2191, 0
  br i1 %cmp2192, label %land.lhs.true.2194, label %lor.lhs.false.2199

land.lhs.true.2194:                               ; preds = %land.lhs.true.2189
  %width2195 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %445 = load i32, i32* %width2195, align 4
  %conv2196 = sext i32 %445 to i64
  %cmp2197 = icmp slt i64 0, %conv2196
  br i1 %cmp2197, label %cond.true.2458, label %lor.lhs.false.2199

lor.lhs.false.2199:                               ; preds = %land.lhs.true.2194, %land.lhs.true.2189
  %width2200 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %446 = load i32, i32* %width2200, align 4
  %conv2201 = sext i32 %446 to i64
  %cmp2202 = icmp slt i64 %conv2201, 0
  br i1 %cmp2202, label %land.lhs.true.2204, label %lor.lhs.false.2209

land.lhs.true.2204:                               ; preds = %lor.lhs.false.2199
  %height2205 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %447 = load i32, i32* %height2205, align 4
  %conv2206 = sext i32 %447 to i64
  %cmp2207 = icmp slt i64 0, %conv2206
  br i1 %cmp2207, label %cond.true.2458, label %lor.lhs.false.2209

lor.lhs.false.2209:                               ; preds = %land.lhs.true.2204, %lor.lhs.false.2199, %cond.end.2185
  %width2210 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %448 = load i32, i32* %width2210, align 4
  %conv2211 = sext i32 %448 to i64
  %cmp2212 = icmp slt i64 %conv2211, 0
  br i1 %cmp2212, label %cond.true.2214, label %cond.false.2323

cond.true.2214:                                   ; preds = %lor.lhs.false.2209
  %height2215 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %449 = load i32, i32* %height2215, align 4
  %conv2216 = sext i32 %449 to i64
  %cmp2217 = icmp slt i64 %conv2216, 0
  br i1 %cmp2217, label %cond.true.2219, label %cond.false.2261

cond.true.2219:                                   ; preds = %cond.true.2214
  %height2220 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %450 = load i32, i32* %height2220, align 4
  %conv2221 = sext i32 %450 to i64
  %width2222 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %451 = load i32, i32* %width2222, align 4
  %conv2223 = sext i32 %451 to i64
  %mul2224 = mul nsw i64 0, %conv2223
  %height2225 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %452 = load i32, i32* %height2225, align 4
  %conv2226 = sext i32 %452 to i64
  %add2227 = add nsw i64 %mul2224, %conv2226
  %mul2228 = mul nsw i64 0, %add2227
  %sub2229 = sub nsw i64 %mul2228, 1
  %cmp2230 = icmp slt i64 %sub2229, 0
  br i1 %cmp2230, label %cond.true.2232, label %cond.false.2245

cond.true.2232:                                   ; preds = %cond.true.2219
  %width2233 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %453 = load i32, i32* %width2233, align 4
  %conv2234 = sext i32 %453 to i64
  %mul2235 = mul nsw i64 0, %conv2234
  %height2236 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %454 = load i32, i32* %height2236, align 4
  %conv2237 = sext i32 %454 to i64
  %add2238 = add nsw i64 %mul2235, %conv2237
  %mul2239 = mul nsw i64 0, %add2238
  %add2240 = add nsw i64 %mul2239, 1
  %shl2241 = shl i64 %add2240, 62
  %sub2242 = sub nsw i64 %shl2241, 1
  %mul2243 = mul nsw i64 %sub2242, 2
  %add2244 = add nsw i64 %mul2243, 1
  br label %cond.end.2254

cond.false.2245:                                  ; preds = %cond.true.2219
  %width2246 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %455 = load i32, i32* %width2246, align 4
  %conv2247 = sext i32 %455 to i64
  %mul2248 = mul nsw i64 0, %conv2247
  %height2249 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %456 = load i32, i32* %height2249, align 4
  %conv2250 = sext i32 %456 to i64
  %add2251 = add nsw i64 %mul2248, %conv2250
  %mul2252 = mul nsw i64 0, %add2251
  %sub2253 = sub nsw i64 %mul2252, 1
  br label %cond.end.2254

cond.end.2254:                                    ; preds = %cond.false.2245, %cond.true.2232
  %cond2255 = phi i64 [ %add2244, %cond.true.2232 ], [ %sub2253, %cond.false.2245 ]
  %width2256 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %457 = load i32, i32* %width2256, align 4
  %conv2257 = sext i32 %457 to i64
  %div2258 = sdiv i64 %cond2255, %conv2257
  %cmp2259 = icmp slt i64 %conv2221, %div2258
  br i1 %cmp2259, label %cond.true.2458, label %lor.lhs.false.2432

cond.false.2261:                                  ; preds = %cond.true.2214
  %width2262 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %458 = load i32, i32* %width2262, align 4
  %conv2263 = sext i32 %458 to i64
  %cmp2264 = icmp eq i64 %conv2263, -1
  br i1 %cmp2264, label %cond.true.2266, label %cond.false.2267

cond.true.2266:                                   ; preds = %cond.false.2261
  br i1 false, label %cond.true.2458, label %lor.lhs.false.2432

cond.false.2267:                                  ; preds = %cond.false.2261
  %width2268 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %459 = load i32, i32* %width2268, align 4
  %conv2269 = sext i32 %459 to i64
  %mul2270 = mul nsw i64 0, %conv2269
  %height2271 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %460 = load i32, i32* %height2271, align 4
  %conv2272 = sext i32 %460 to i64
  %add2273 = add nsw i64 %mul2270, %conv2272
  %mul2274 = mul nsw i64 0, %add2273
  %sub2275 = sub nsw i64 %mul2274, 1
  %cmp2276 = icmp slt i64 %sub2275, 0
  br i1 %cmp2276, label %cond.true.2278, label %cond.false.2305

cond.true.2278:                                   ; preds = %cond.false.2267
  %width2279 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %461 = load i32, i32* %width2279, align 4
  %conv2280 = sext i32 %461 to i64
  %mul2281 = mul nsw i64 0, %conv2280
  %height2282 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %462 = load i32, i32* %height2282, align 4
  %conv2283 = sext i32 %462 to i64
  %add2284 = add nsw i64 %mul2281, %conv2283
  %mul2285 = mul nsw i64 0, %add2284
  %add2286 = add nsw i64 %mul2285, 0
  %neg2287 = xor i64 %add2286, -1
  %cmp2288 = icmp eq i64 %neg2287, -1
  %conv2289 = zext i1 %cmp2288 to i32
  %sub2290 = sub nsw i32 0, %conv2289
  %conv2291 = sext i32 %sub2290 to i64
  %width2292 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %463 = load i32, i32* %width2292, align 4
  %conv2293 = sext i32 %463 to i64
  %mul2294 = mul nsw i64 0, %conv2293
  %height2295 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %464 = load i32, i32* %height2295, align 4
  %conv2296 = sext i32 %464 to i64
  %add2297 = add nsw i64 %mul2294, %conv2296
  %mul2298 = mul nsw i64 0, %add2297
  %add2299 = add nsw i64 %mul2298, 1
  %shl2300 = shl i64 %add2299, 62
  %sub2301 = sub nsw i64 %shl2300, 1
  %mul2302 = mul nsw i64 %sub2301, 2
  %add2303 = add nsw i64 %mul2302, 1
  %sub2304 = sub nsw i64 %conv2291, %add2303
  br label %cond.end.2314

cond.false.2305:                                  ; preds = %cond.false.2267
  %width2306 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %465 = load i32, i32* %width2306, align 4
  %conv2307 = sext i32 %465 to i64
  %mul2308 = mul nsw i64 0, %conv2307
  %height2309 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %466 = load i32, i32* %height2309, align 4
  %conv2310 = sext i32 %466 to i64
  %add2311 = add nsw i64 %mul2308, %conv2310
  %mul2312 = mul nsw i64 0, %add2311
  %add2313 = add nsw i64 %mul2312, 0
  br label %cond.end.2314

cond.end.2314:                                    ; preds = %cond.false.2305, %cond.true.2278
  %cond2315 = phi i64 [ %sub2304, %cond.true.2278 ], [ %add2313, %cond.false.2305 ]
  %width2316 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %467 = load i32, i32* %width2316, align 4
  %conv2317 = sext i32 %467 to i64
  %div2318 = sdiv i64 %cond2315, %conv2317
  %height2319 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %468 = load i32, i32* %height2319, align 4
  %conv2320 = sext i32 %468 to i64
  %cmp2321 = icmp slt i64 %div2318, %conv2320
  br i1 %cmp2321, label %cond.true.2458, label %lor.lhs.false.2432

cond.false.2323:                                  ; preds = %lor.lhs.false.2209
  %width2324 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %469 = load i32, i32* %width2324, align 4
  %conv2325 = sext i32 %469 to i64
  %cmp2326 = icmp eq i64 %conv2325, 0
  br i1 %cmp2326, label %cond.true.2328, label %cond.false.2329

cond.true.2328:                                   ; preds = %cond.false.2323
  br i1 false, label %cond.true.2458, label %lor.lhs.false.2432

cond.false.2329:                                  ; preds = %cond.false.2323
  %height2330 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %470 = load i32, i32* %height2330, align 4
  %conv2331 = sext i32 %470 to i64
  %cmp2332 = icmp slt i64 %conv2331, 0
  br i1 %cmp2332, label %cond.true.2334, label %cond.false.2390

cond.true.2334:                                   ; preds = %cond.false.2329
  %height2335 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %471 = load i32, i32* %height2335, align 4
  %conv2336 = sext i32 %471 to i64
  %width2337 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %472 = load i32, i32* %width2337, align 4
  %conv2338 = sext i32 %472 to i64
  %mul2339 = mul nsw i64 0, %conv2338
  %height2340 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %473 = load i32, i32* %height2340, align 4
  %conv2341 = sext i32 %473 to i64
  %add2342 = add nsw i64 %mul2339, %conv2341
  %mul2343 = mul nsw i64 0, %add2342
  %sub2344 = sub nsw i64 %mul2343, 1
  %cmp2345 = icmp slt i64 %sub2344, 0
  br i1 %cmp2345, label %cond.true.2347, label %cond.false.2374

cond.true.2347:                                   ; preds = %cond.true.2334
  %width2348 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %474 = load i32, i32* %width2348, align 4
  %conv2349 = sext i32 %474 to i64
  %mul2350 = mul nsw i64 0, %conv2349
  %height2351 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %475 = load i32, i32* %height2351, align 4
  %conv2352 = sext i32 %475 to i64
  %add2353 = add nsw i64 %mul2350, %conv2352
  %mul2354 = mul nsw i64 0, %add2353
  %add2355 = add nsw i64 %mul2354, 0
  %neg2356 = xor i64 %add2355, -1
  %cmp2357 = icmp eq i64 %neg2356, -1
  %conv2358 = zext i1 %cmp2357 to i32
  %sub2359 = sub nsw i32 0, %conv2358
  %conv2360 = sext i32 %sub2359 to i64
  %width2361 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %476 = load i32, i32* %width2361, align 4
  %conv2362 = sext i32 %476 to i64
  %mul2363 = mul nsw i64 0, %conv2362
  %height2364 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %477 = load i32, i32* %height2364, align 4
  %conv2365 = sext i32 %477 to i64
  %add2366 = add nsw i64 %mul2363, %conv2365
  %mul2367 = mul nsw i64 0, %add2366
  %add2368 = add nsw i64 %mul2367, 1
  %shl2369 = shl i64 %add2368, 62
  %sub2370 = sub nsw i64 %shl2369, 1
  %mul2371 = mul nsw i64 %sub2370, 2
  %add2372 = add nsw i64 %mul2371, 1
  %sub2373 = sub nsw i64 %conv2360, %add2372
  br label %cond.end.2383

cond.false.2374:                                  ; preds = %cond.true.2334
  %width2375 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %478 = load i32, i32* %width2375, align 4
  %conv2376 = sext i32 %478 to i64
  %mul2377 = mul nsw i64 0, %conv2376
  %height2378 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %479 = load i32, i32* %height2378, align 4
  %conv2379 = sext i32 %479 to i64
  %add2380 = add nsw i64 %mul2377, %conv2379
  %mul2381 = mul nsw i64 0, %add2380
  %add2382 = add nsw i64 %mul2381, 0
  br label %cond.end.2383

cond.end.2383:                                    ; preds = %cond.false.2374, %cond.true.2347
  %cond2384 = phi i64 [ %sub2373, %cond.true.2347 ], [ %add2382, %cond.false.2374 ]
  %width2385 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %480 = load i32, i32* %width2385, align 4
  %conv2386 = sext i32 %480 to i64
  %div2387 = sdiv i64 %cond2384, %conv2386
  %cmp2388 = icmp slt i64 %conv2336, %div2387
  br i1 %cmp2388, label %cond.true.2458, label %lor.lhs.false.2432

cond.false.2390:                                  ; preds = %cond.false.2329
  %width2391 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %481 = load i32, i32* %width2391, align 4
  %conv2392 = sext i32 %481 to i64
  %mul2393 = mul nsw i64 0, %conv2392
  %height2394 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %482 = load i32, i32* %height2394, align 4
  %conv2395 = sext i32 %482 to i64
  %add2396 = add nsw i64 %mul2393, %conv2395
  %mul2397 = mul nsw i64 0, %add2396
  %sub2398 = sub nsw i64 %mul2397, 1
  %cmp2399 = icmp slt i64 %sub2398, 0
  br i1 %cmp2399, label %cond.true.2401, label %cond.false.2414

cond.true.2401:                                   ; preds = %cond.false.2390
  %width2402 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %483 = load i32, i32* %width2402, align 4
  %conv2403 = sext i32 %483 to i64
  %mul2404 = mul nsw i64 0, %conv2403
  %height2405 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %484 = load i32, i32* %height2405, align 4
  %conv2406 = sext i32 %484 to i64
  %add2407 = add nsw i64 %mul2404, %conv2406
  %mul2408 = mul nsw i64 0, %add2407
  %add2409 = add nsw i64 %mul2408, 1
  %shl2410 = shl i64 %add2409, 62
  %sub2411 = sub nsw i64 %shl2410, 1
  %mul2412 = mul nsw i64 %sub2411, 2
  %add2413 = add nsw i64 %mul2412, 1
  br label %cond.end.2423

cond.false.2414:                                  ; preds = %cond.false.2390
  %width2415 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %485 = load i32, i32* %width2415, align 4
  %conv2416 = sext i32 %485 to i64
  %mul2417 = mul nsw i64 0, %conv2416
  %height2418 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %486 = load i32, i32* %height2418, align 4
  %conv2419 = sext i32 %486 to i64
  %add2420 = add nsw i64 %mul2417, %conv2419
  %mul2421 = mul nsw i64 0, %add2420
  %sub2422 = sub nsw i64 %mul2421, 1
  br label %cond.end.2423

cond.end.2423:                                    ; preds = %cond.false.2414, %cond.true.2401
  %cond2424 = phi i64 [ %add2413, %cond.true.2401 ], [ %sub2422, %cond.false.2414 ]
  %width2425 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %487 = load i32, i32* %width2425, align 4
  %conv2426 = sext i32 %487 to i64
  %div2427 = sdiv i64 %cond2424, %conv2426
  %height2428 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %488 = load i32, i32* %height2428, align 4
  %conv2429 = sext i32 %488 to i64
  %cmp2430 = icmp slt i64 %div2427, %conv2429
  br i1 %cmp2430, label %cond.true.2458, label %lor.lhs.false.2432

lor.lhs.false.2432:                               ; preds = %cond.end.2423, %cond.end.2383, %cond.true.2328, %cond.end.2314, %cond.true.2266, %cond.end.2254
  %height2433 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %489 = load i32, i32* %height2433, align 4
  %conv2434 = sext i32 %489 to i64
  %width2435 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %490 = load i32, i32* %width2435, align 4
  %conv2436 = sext i32 %490 to i64
  %mul2437 = mul nsw i64 %conv2434, %conv2436
  %mul2438 = mul nsw i64 0, %mul2437
  %sub2439 = sub nsw i64 %mul2438, 1
  %cmp2440 = icmp slt i64 %sub2439, 0
  br i1 %cmp2440, label %land.lhs.true.2442, label %lor.lhs.false.2450

land.lhs.true.2442:                               ; preds = %lor.lhs.false.2432
  %height2443 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %491 = load i32, i32* %height2443, align 4
  %conv2444 = sext i32 %491 to i64
  %width2445 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %492 = load i32, i32* %width2445, align 4
  %conv2446 = sext i32 %492 to i64
  %mul2447 = mul nsw i64 %conv2444, %conv2446
  %cmp2448 = icmp slt i64 %mul2447, -9223372036854775808
  br i1 %cmp2448, label %cond.true.2458, label %lor.lhs.false.2450

lor.lhs.false.2450:                               ; preds = %land.lhs.true.2442, %lor.lhs.false.2432
  %height2451 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %493 = load i32, i32* %height2451, align 4
  %conv2452 = sext i32 %493 to i64
  %width2453 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %494 = load i32, i32* %width2453, align 4
  %conv2454 = sext i32 %494 to i64
  %mul2455 = mul nsw i64 %conv2452, %conv2454
  %cmp2456 = icmp slt i64 9223372036854775807, %mul2455
  br i1 %cmp2456, label %cond.true.2458, label %cond.false.2482

cond.true.2458:                                   ; preds = %lor.lhs.false.2450, %land.lhs.true.2442, %cond.end.2423, %cond.end.2383, %cond.true.2328, %cond.end.2314, %cond.true.2266, %cond.end.2254, %land.lhs.true.2204, %land.lhs.true.2194
  %height2459 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %495 = load i32, i32* %height2459, align 4
  %conv2460 = sext i32 %495 to i64
  %width2461 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %496 = load i32, i32* %width2461, align 4
  %conv2462 = sext i32 %496 to i64
  %mul2463 = mul i64 %conv2460, %conv2462
  %cmp2464 = icmp ule i64 %mul2463, 9223372036854775807
  br i1 %cmp2464, label %cond.true.2466, label %cond.false.2472

cond.true.2466:                                   ; preds = %cond.true.2458
  %height2467 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %497 = load i32, i32* %height2467, align 4
  %conv2468 = sext i32 %497 to i64
  %width2469 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %498 = load i32, i32* %width2469, align 4
  %conv2470 = sext i32 %498 to i64
  %mul2471 = mul i64 %conv2468, %conv2470
  br label %cond.end.2480

cond.false.2472:                                  ; preds = %cond.true.2458
  %height2473 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %499 = load i32, i32* %height2473, align 4
  %conv2474 = sext i32 %499 to i64
  %width2475 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %500 = load i32, i32* %width2475, align 4
  %conv2476 = sext i32 %500 to i64
  %mul2477 = mul i64 %conv2474, %conv2476
  %sub2478 = sub i64 %mul2477, -9223372036854775808
  %add2479 = add nsw i64 %sub2478, -9223372036854775808
  br label %cond.end.2480

cond.end.2480:                                    ; preds = %cond.false.2472, %cond.true.2466
  %cond2481 = phi i64 [ %mul2471, %cond.true.2466 ], [ %add2479, %cond.false.2472 ]
  store i64 %cond2481, i64* %needed, align 8
  br i1 true, label %if.then, label %if.end

cond.false.2482:                                  ; preds = %lor.lhs.false.2450
  %height2483 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %501 = load i32, i32* %height2483, align 4
  %conv2484 = sext i32 %501 to i64
  %width2485 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %502 = load i32, i32* %width2485, align 4
  %conv2486 = sext i32 %502 to i64
  %mul2487 = mul i64 %conv2484, %conv2486
  %cmp2488 = icmp ule i64 %mul2487, 9223372036854775807
  br i1 %cmp2488, label %cond.true.2490, label %cond.false.2496

cond.true.2490:                                   ; preds = %cond.false.2482
  %height2491 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %503 = load i32, i32* %height2491, align 4
  %conv2492 = sext i32 %503 to i64
  %width2493 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %504 = load i32, i32* %width2493, align 4
  %conv2494 = sext i32 %504 to i64
  %mul2495 = mul i64 %conv2492, %conv2494
  br label %cond.end.2504

cond.false.2496:                                  ; preds = %cond.false.2482
  %height2497 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %505 = load i32, i32* %height2497, align 4
  %conv2498 = sext i32 %505 to i64
  %width2499 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %506 = load i32, i32* %width2499, align 4
  %conv2500 = sext i32 %506 to i64
  %mul2501 = mul i64 %conv2498, %conv2500
  %sub2502 = sub i64 %mul2501, -9223372036854775808
  %add2503 = add nsw i64 %sub2502, -9223372036854775808
  br label %cond.end.2504

cond.end.2504:                                    ; preds = %cond.false.2496, %cond.true.2490
  %cond2505 = phi i64 [ %mul2495, %cond.true.2490 ], [ %add2503, %cond.false.2496 ]
  store i64 %cond2505, i64* %needed, align 8
  br i1 false, label %if.then, label %if.end

cond.false.2506:                                  ; preds = %cond.true.2137
  %width2507 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %507 = load i32, i32* %width2507, align 4
  %mul2508 = mul nsw i32 0, %507
  %height2509 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %508 = load i32, i32* %height2509, align 4
  %add2510 = add nsw i32 %mul2508, %508
  %mul2511 = mul nsw i32 0, %add2510
  %sub2512 = sub nsw i32 %mul2511, 1
  %cmp2513 = icmp slt i32 %sub2512, 0
  br i1 %cmp2513, label %cond.true.2515, label %cond.false.2537

cond.true.2515:                                   ; preds = %cond.false.2506
  %width2516 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %509 = load i32, i32* %width2516, align 4
  %mul2517 = mul nsw i32 0, %509
  %height2518 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %510 = load i32, i32* %height2518, align 4
  %add2519 = add nsw i32 %mul2517, %510
  %mul2520 = mul nsw i32 0, %add2519
  %add2521 = add nsw i32 %mul2520, 0
  %neg2522 = xor i32 %add2521, -1
  %cmp2523 = icmp eq i32 %neg2522, -1
  %conv2524 = zext i1 %cmp2523 to i32
  %sub2525 = sub nsw i32 0, %conv2524
  %width2526 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %511 = load i32, i32* %width2526, align 4
  %mul2527 = mul nsw i32 0, %511
  %height2528 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %512 = load i32, i32* %height2528, align 4
  %add2529 = add nsw i32 %mul2527, %512
  %mul2530 = mul nsw i32 0, %add2529
  %add2531 = add nsw i32 %mul2530, 1
  %shl2532 = shl i32 %add2531, 30
  %sub2533 = sub nsw i32 %shl2532, 1
  %mul2534 = mul nsw i32 %sub2533, 2
  %add2535 = add nsw i32 %mul2534, 1
  %sub2536 = sub nsw i32 %sub2525, %add2535
  br label %cond.end.2544

cond.false.2537:                                  ; preds = %cond.false.2506
  %width2538 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %513 = load i32, i32* %width2538, align 4
  %mul2539 = mul nsw i32 0, %513
  %height2540 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %514 = load i32, i32* %height2540, align 4
  %add2541 = add nsw i32 %mul2539, %514
  %mul2542 = mul nsw i32 0, %add2541
  %add2543 = add nsw i32 %mul2542, 0
  br label %cond.end.2544

cond.end.2544:                                    ; preds = %cond.false.2537, %cond.true.2515
  %cond2545 = phi i32 [ %sub2536, %cond.true.2515 ], [ %add2543, %cond.false.2537 ]
  %cmp2546 = icmp eq i32 %cond2545, 0
  br i1 %cmp2546, label %land.lhs.true.2548, label %lor.lhs.false.2564

land.lhs.true.2548:                               ; preds = %cond.end.2544
  %height2549 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %515 = load i32, i32* %height2549, align 4
  %cmp2550 = icmp slt i32 %515, 0
  br i1 %cmp2550, label %land.lhs.true.2552, label %lor.lhs.false.2556

land.lhs.true.2552:                               ; preds = %land.lhs.true.2548
  %width2553 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %516 = load i32, i32* %width2553, align 4
  %cmp2554 = icmp slt i32 0, %516
  br i1 %cmp2554, label %cond.true.2766, label %lor.lhs.false.2556

lor.lhs.false.2556:                               ; preds = %land.lhs.true.2552, %land.lhs.true.2548
  %width2557 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %517 = load i32, i32* %width2557, align 4
  %cmp2558 = icmp slt i32 %517, 0
  br i1 %cmp2558, label %land.lhs.true.2560, label %lor.lhs.false.2564

land.lhs.true.2560:                               ; preds = %lor.lhs.false.2556
  %height2561 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %518 = load i32, i32* %height2561, align 4
  %cmp2562 = icmp slt i32 0, %518
  br i1 %cmp2562, label %cond.true.2766, label %lor.lhs.false.2564

lor.lhs.false.2564:                               ; preds = %land.lhs.true.2560, %lor.lhs.false.2556, %cond.end.2544
  %width2565 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %519 = load i32, i32* %width2565, align 4
  %cmp2566 = icmp slt i32 %519, 0
  br i1 %cmp2566, label %cond.true.2568, label %cond.false.2656

cond.true.2568:                                   ; preds = %lor.lhs.false.2564
  %height2569 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %520 = load i32, i32* %height2569, align 4
  %cmp2570 = icmp slt i32 %520, 0
  br i1 %cmp2570, label %cond.true.2572, label %cond.false.2606

cond.true.2572:                                   ; preds = %cond.true.2568
  %height2573 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %521 = load i32, i32* %height2573, align 4
  %width2574 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %522 = load i32, i32* %width2574, align 4
  %mul2575 = mul nsw i32 0, %522
  %height2576 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %523 = load i32, i32* %height2576, align 4
  %add2577 = add nsw i32 %mul2575, %523
  %mul2578 = mul nsw i32 0, %add2577
  %sub2579 = sub nsw i32 %mul2578, 1
  %cmp2580 = icmp slt i32 %sub2579, 0
  br i1 %cmp2580, label %cond.true.2582, label %cond.false.2593

cond.true.2582:                                   ; preds = %cond.true.2572
  %width2583 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %524 = load i32, i32* %width2583, align 4
  %mul2584 = mul nsw i32 0, %524
  %height2585 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %525 = load i32, i32* %height2585, align 4
  %add2586 = add nsw i32 %mul2584, %525
  %mul2587 = mul nsw i32 0, %add2586
  %add2588 = add nsw i32 %mul2587, 1
  %shl2589 = shl i32 %add2588, 30
  %sub2590 = sub nsw i32 %shl2589, 1
  %mul2591 = mul nsw i32 %sub2590, 2
  %add2592 = add nsw i32 %mul2591, 1
  br label %cond.end.2600

cond.false.2593:                                  ; preds = %cond.true.2572
  %width2594 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %526 = load i32, i32* %width2594, align 4
  %mul2595 = mul nsw i32 0, %526
  %height2596 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %527 = load i32, i32* %height2596, align 4
  %add2597 = add nsw i32 %mul2595, %527
  %mul2598 = mul nsw i32 0, %add2597
  %sub2599 = sub nsw i32 %mul2598, 1
  br label %cond.end.2600

cond.end.2600:                                    ; preds = %cond.false.2593, %cond.true.2582
  %cond2601 = phi i32 [ %add2592, %cond.true.2582 ], [ %sub2599, %cond.false.2593 ]
  %width2602 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %528 = load i32, i32* %width2602, align 4
  %div2603 = sdiv i32 %cond2601, %528
  %cmp2604 = icmp slt i32 %521, %div2603
  br i1 %cmp2604, label %cond.true.2766, label %lor.lhs.false.2744

cond.false.2606:                                  ; preds = %cond.true.2568
  %width2607 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %529 = load i32, i32* %width2607, align 4
  %cmp2608 = icmp eq i32 %529, -1
  br i1 %cmp2608, label %cond.true.2610, label %cond.false.2611

cond.true.2610:                                   ; preds = %cond.false.2606
  br i1 false, label %cond.true.2766, label %lor.lhs.false.2744

cond.false.2611:                                  ; preds = %cond.false.2606
  %width2612 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %530 = load i32, i32* %width2612, align 4
  %mul2613 = mul nsw i32 0, %530
  %height2614 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %531 = load i32, i32* %height2614, align 4
  %add2615 = add nsw i32 %mul2613, %531
  %mul2616 = mul nsw i32 0, %add2615
  %sub2617 = sub nsw i32 %mul2616, 1
  %cmp2618 = icmp slt i32 %sub2617, 0
  br i1 %cmp2618, label %cond.true.2620, label %cond.false.2642

cond.true.2620:                                   ; preds = %cond.false.2611
  %width2621 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %532 = load i32, i32* %width2621, align 4
  %mul2622 = mul nsw i32 0, %532
  %height2623 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %533 = load i32, i32* %height2623, align 4
  %add2624 = add nsw i32 %mul2622, %533
  %mul2625 = mul nsw i32 0, %add2624
  %add2626 = add nsw i32 %mul2625, 0
  %neg2627 = xor i32 %add2626, -1
  %cmp2628 = icmp eq i32 %neg2627, -1
  %conv2629 = zext i1 %cmp2628 to i32
  %sub2630 = sub nsw i32 0, %conv2629
  %width2631 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %534 = load i32, i32* %width2631, align 4
  %mul2632 = mul nsw i32 0, %534
  %height2633 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %535 = load i32, i32* %height2633, align 4
  %add2634 = add nsw i32 %mul2632, %535
  %mul2635 = mul nsw i32 0, %add2634
  %add2636 = add nsw i32 %mul2635, 1
  %shl2637 = shl i32 %add2636, 30
  %sub2638 = sub nsw i32 %shl2637, 1
  %mul2639 = mul nsw i32 %sub2638, 2
  %add2640 = add nsw i32 %mul2639, 1
  %sub2641 = sub nsw i32 %sub2630, %add2640
  br label %cond.end.2649

cond.false.2642:                                  ; preds = %cond.false.2611
  %width2643 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %536 = load i32, i32* %width2643, align 4
  %mul2644 = mul nsw i32 0, %536
  %height2645 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %537 = load i32, i32* %height2645, align 4
  %add2646 = add nsw i32 %mul2644, %537
  %mul2647 = mul nsw i32 0, %add2646
  %add2648 = add nsw i32 %mul2647, 0
  br label %cond.end.2649

cond.end.2649:                                    ; preds = %cond.false.2642, %cond.true.2620
  %cond2650 = phi i32 [ %sub2641, %cond.true.2620 ], [ %add2648, %cond.false.2642 ]
  %width2651 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %538 = load i32, i32* %width2651, align 4
  %div2652 = sdiv i32 %cond2650, %538
  %height2653 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %539 = load i32, i32* %height2653, align 4
  %cmp2654 = icmp slt i32 %div2652, %539
  br i1 %cmp2654, label %cond.true.2766, label %lor.lhs.false.2744

cond.false.2656:                                  ; preds = %lor.lhs.false.2564
  %width2657 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %540 = load i32, i32* %width2657, align 4
  %cmp2658 = icmp eq i32 %540, 0
  br i1 %cmp2658, label %cond.true.2660, label %cond.false.2661

cond.true.2660:                                   ; preds = %cond.false.2656
  br i1 false, label %cond.true.2766, label %lor.lhs.false.2744

cond.false.2661:                                  ; preds = %cond.false.2656
  %height2662 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %541 = load i32, i32* %height2662, align 4
  %cmp2663 = icmp slt i32 %541, 0
  br i1 %cmp2663, label %cond.true.2665, label %cond.false.2710

cond.true.2665:                                   ; preds = %cond.false.2661
  %height2666 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %542 = load i32, i32* %height2666, align 4
  %width2667 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %543 = load i32, i32* %width2667, align 4
  %mul2668 = mul nsw i32 0, %543
  %height2669 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %544 = load i32, i32* %height2669, align 4
  %add2670 = add nsw i32 %mul2668, %544
  %mul2671 = mul nsw i32 0, %add2670
  %sub2672 = sub nsw i32 %mul2671, 1
  %cmp2673 = icmp slt i32 %sub2672, 0
  br i1 %cmp2673, label %cond.true.2675, label %cond.false.2697

cond.true.2675:                                   ; preds = %cond.true.2665
  %width2676 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %545 = load i32, i32* %width2676, align 4
  %mul2677 = mul nsw i32 0, %545
  %height2678 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %546 = load i32, i32* %height2678, align 4
  %add2679 = add nsw i32 %mul2677, %546
  %mul2680 = mul nsw i32 0, %add2679
  %add2681 = add nsw i32 %mul2680, 0
  %neg2682 = xor i32 %add2681, -1
  %cmp2683 = icmp eq i32 %neg2682, -1
  %conv2684 = zext i1 %cmp2683 to i32
  %sub2685 = sub nsw i32 0, %conv2684
  %width2686 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %547 = load i32, i32* %width2686, align 4
  %mul2687 = mul nsw i32 0, %547
  %height2688 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %548 = load i32, i32* %height2688, align 4
  %add2689 = add nsw i32 %mul2687, %548
  %mul2690 = mul nsw i32 0, %add2689
  %add2691 = add nsw i32 %mul2690, 1
  %shl2692 = shl i32 %add2691, 30
  %sub2693 = sub nsw i32 %shl2692, 1
  %mul2694 = mul nsw i32 %sub2693, 2
  %add2695 = add nsw i32 %mul2694, 1
  %sub2696 = sub nsw i32 %sub2685, %add2695
  br label %cond.end.2704

cond.false.2697:                                  ; preds = %cond.true.2665
  %width2698 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %549 = load i32, i32* %width2698, align 4
  %mul2699 = mul nsw i32 0, %549
  %height2700 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %550 = load i32, i32* %height2700, align 4
  %add2701 = add nsw i32 %mul2699, %550
  %mul2702 = mul nsw i32 0, %add2701
  %add2703 = add nsw i32 %mul2702, 0
  br label %cond.end.2704

cond.end.2704:                                    ; preds = %cond.false.2697, %cond.true.2675
  %cond2705 = phi i32 [ %sub2696, %cond.true.2675 ], [ %add2703, %cond.false.2697 ]
  %width2706 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %551 = load i32, i32* %width2706, align 4
  %div2707 = sdiv i32 %cond2705, %551
  %cmp2708 = icmp slt i32 %542, %div2707
  br i1 %cmp2708, label %cond.true.2766, label %lor.lhs.false.2744

cond.false.2710:                                  ; preds = %cond.false.2661
  %width2711 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %552 = load i32, i32* %width2711, align 4
  %mul2712 = mul nsw i32 0, %552
  %height2713 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %553 = load i32, i32* %height2713, align 4
  %add2714 = add nsw i32 %mul2712, %553
  %mul2715 = mul nsw i32 0, %add2714
  %sub2716 = sub nsw i32 %mul2715, 1
  %cmp2717 = icmp slt i32 %sub2716, 0
  br i1 %cmp2717, label %cond.true.2719, label %cond.false.2730

cond.true.2719:                                   ; preds = %cond.false.2710
  %width2720 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %554 = load i32, i32* %width2720, align 4
  %mul2721 = mul nsw i32 0, %554
  %height2722 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %555 = load i32, i32* %height2722, align 4
  %add2723 = add nsw i32 %mul2721, %555
  %mul2724 = mul nsw i32 0, %add2723
  %add2725 = add nsw i32 %mul2724, 1
  %shl2726 = shl i32 %add2725, 30
  %sub2727 = sub nsw i32 %shl2726, 1
  %mul2728 = mul nsw i32 %sub2727, 2
  %add2729 = add nsw i32 %mul2728, 1
  br label %cond.end.2737

cond.false.2730:                                  ; preds = %cond.false.2710
  %width2731 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %556 = load i32, i32* %width2731, align 4
  %mul2732 = mul nsw i32 0, %556
  %height2733 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %557 = load i32, i32* %height2733, align 4
  %add2734 = add nsw i32 %mul2732, %557
  %mul2735 = mul nsw i32 0, %add2734
  %sub2736 = sub nsw i32 %mul2735, 1
  br label %cond.end.2737

cond.end.2737:                                    ; preds = %cond.false.2730, %cond.true.2719
  %cond2738 = phi i32 [ %add2729, %cond.true.2719 ], [ %sub2736, %cond.false.2730 ]
  %width2739 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %558 = load i32, i32* %width2739, align 4
  %div2740 = sdiv i32 %cond2738, %558
  %height2741 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %559 = load i32, i32* %height2741, align 4
  %cmp2742 = icmp slt i32 %div2740, %559
  br i1 %cmp2742, label %cond.true.2766, label %lor.lhs.false.2744

lor.lhs.false.2744:                               ; preds = %cond.end.2737, %cond.end.2704, %cond.true.2660, %cond.end.2649, %cond.true.2610, %cond.end.2600
  %height2745 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %560 = load i32, i32* %height2745, align 4
  %width2746 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %561 = load i32, i32* %width2746, align 4
  %mul2747 = mul nsw i32 %560, %561
  %mul2748 = mul nsw i32 0, %mul2747
  %sub2749 = sub nsw i32 %mul2748, 1
  %cmp2750 = icmp slt i32 %sub2749, 0
  br i1 %cmp2750, label %land.lhs.true.2752, label %lor.lhs.false.2759

land.lhs.true.2752:                               ; preds = %lor.lhs.false.2744
  %height2753 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %562 = load i32, i32* %height2753, align 4
  %width2754 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %563 = load i32, i32* %width2754, align 4
  %mul2755 = mul nsw i32 %562, %563
  %conv2756 = sext i32 %mul2755 to i64
  %cmp2757 = icmp slt i64 %conv2756, -9223372036854775808
  br i1 %cmp2757, label %cond.true.2766, label %lor.lhs.false.2759

lor.lhs.false.2759:                               ; preds = %land.lhs.true.2752, %lor.lhs.false.2744
  %height2760 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %564 = load i32, i32* %height2760, align 4
  %width2761 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %565 = load i32, i32* %width2761, align 4
  %mul2762 = mul nsw i32 %564, %565
  %conv2763 = sext i32 %mul2762 to i64
  %cmp2764 = icmp slt i64 9223372036854775807, %conv2763
  br i1 %cmp2764, label %cond.true.2766, label %cond.false.2790

cond.true.2766:                                   ; preds = %lor.lhs.false.2759, %land.lhs.true.2752, %cond.end.2737, %cond.end.2704, %cond.true.2660, %cond.end.2649, %cond.true.2610, %cond.end.2600, %land.lhs.true.2560, %land.lhs.true.2552
  %height2767 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %566 = load i32, i32* %height2767, align 4
  %conv2768 = sext i32 %566 to i64
  %width2769 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %567 = load i32, i32* %width2769, align 4
  %conv2770 = sext i32 %567 to i64
  %mul2771 = mul i64 %conv2768, %conv2770
  %cmp2772 = icmp ule i64 %mul2771, 9223372036854775807
  br i1 %cmp2772, label %cond.true.2774, label %cond.false.2780

cond.true.2774:                                   ; preds = %cond.true.2766
  %height2775 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %568 = load i32, i32* %height2775, align 4
  %conv2776 = sext i32 %568 to i64
  %width2777 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %569 = load i32, i32* %width2777, align 4
  %conv2778 = sext i32 %569 to i64
  %mul2779 = mul i64 %conv2776, %conv2778
  br label %cond.end.2788

cond.false.2780:                                  ; preds = %cond.true.2766
  %height2781 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %570 = load i32, i32* %height2781, align 4
  %conv2782 = sext i32 %570 to i64
  %width2783 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %571 = load i32, i32* %width2783, align 4
  %conv2784 = sext i32 %571 to i64
  %mul2785 = mul i64 %conv2782, %conv2784
  %sub2786 = sub i64 %mul2785, -9223372036854775808
  %add2787 = add nsw i64 %sub2786, -9223372036854775808
  br label %cond.end.2788

cond.end.2788:                                    ; preds = %cond.false.2780, %cond.true.2774
  %cond2789 = phi i64 [ %mul2779, %cond.true.2774 ], [ %add2787, %cond.false.2780 ]
  store i64 %cond2789, i64* %needed, align 8
  br i1 true, label %if.then, label %if.end

cond.false.2790:                                  ; preds = %lor.lhs.false.2759
  %height2791 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %572 = load i32, i32* %height2791, align 4
  %conv2792 = sext i32 %572 to i64
  %width2793 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %573 = load i32, i32* %width2793, align 4
  %conv2794 = sext i32 %573 to i64
  %mul2795 = mul i64 %conv2792, %conv2794
  %cmp2796 = icmp ule i64 %mul2795, 9223372036854775807
  br i1 %cmp2796, label %cond.true.2798, label %cond.false.2804

cond.true.2798:                                   ; preds = %cond.false.2790
  %height2799 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %574 = load i32, i32* %height2799, align 4
  %conv2800 = sext i32 %574 to i64
  %width2801 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %575 = load i32, i32* %width2801, align 4
  %conv2802 = sext i32 %575 to i64
  %mul2803 = mul i64 %conv2800, %conv2802
  br label %cond.end.2812

cond.false.2804:                                  ; preds = %cond.false.2790
  %height2805 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %576 = load i32, i32* %height2805, align 4
  %conv2806 = sext i32 %576 to i64
  %width2807 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %577 = load i32, i32* %width2807, align 4
  %conv2808 = sext i32 %577 to i64
  %mul2809 = mul i64 %conv2806, %conv2808
  %sub2810 = sub i64 %mul2809, -9223372036854775808
  %add2811 = add nsw i64 %sub2810, -9223372036854775808
  br label %cond.end.2812

cond.end.2812:                                    ; preds = %cond.false.2804, %cond.true.2798
  %cond2813 = phi i64 [ %mul2803, %cond.true.2798 ], [ %add2811, %cond.false.2804 ]
  store i64 %cond2813, i64* %needed, align 8
  br i1 false, label %if.then, label %if.end

cond.false.2814:                                  ; preds = %cond.false.2136
  br i1 true, label %cond.true.2815, label %cond.false.3183

cond.true.2815:                                   ; preds = %cond.false.2814
  %width2816 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %578 = load i32, i32* %width2816, align 4
  %conv2817 = sext i32 %578 to i64
  %mul2818 = mul nsw i64 0, %conv2817
  %height2819 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %579 = load i32, i32* %height2819, align 4
  %conv2820 = sext i32 %579 to i64
  %add2821 = add nsw i64 %mul2818, %conv2820
  %mul2822 = mul nsw i64 0, %add2821
  %sub2823 = sub nsw i64 %mul2822, 1
  %cmp2824 = icmp slt i64 %sub2823, 0
  br i1 %cmp2824, label %cond.true.2826, label %cond.false.2853

cond.true.2826:                                   ; preds = %cond.true.2815
  %width2827 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %580 = load i32, i32* %width2827, align 4
  %conv2828 = sext i32 %580 to i64
  %mul2829 = mul nsw i64 0, %conv2828
  %height2830 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %581 = load i32, i32* %height2830, align 4
  %conv2831 = sext i32 %581 to i64
  %add2832 = add nsw i64 %mul2829, %conv2831
  %mul2833 = mul nsw i64 0, %add2832
  %add2834 = add nsw i64 %mul2833, 0
  %neg2835 = xor i64 %add2834, -1
  %cmp2836 = icmp eq i64 %neg2835, -1
  %conv2837 = zext i1 %cmp2836 to i32
  %sub2838 = sub nsw i32 0, %conv2837
  %conv2839 = sext i32 %sub2838 to i64
  %width2840 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %582 = load i32, i32* %width2840, align 4
  %conv2841 = sext i32 %582 to i64
  %mul2842 = mul nsw i64 0, %conv2841
  %height2843 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %583 = load i32, i32* %height2843, align 4
  %conv2844 = sext i32 %583 to i64
  %add2845 = add nsw i64 %mul2842, %conv2844
  %mul2846 = mul nsw i64 0, %add2845
  %add2847 = add nsw i64 %mul2846, 1
  %shl2848 = shl i64 %add2847, 62
  %sub2849 = sub nsw i64 %shl2848, 1
  %mul2850 = mul nsw i64 %sub2849, 2
  %add2851 = add nsw i64 %mul2850, 1
  %sub2852 = sub nsw i64 %conv2839, %add2851
  br label %cond.end.2862

cond.false.2853:                                  ; preds = %cond.true.2815
  %width2854 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %584 = load i32, i32* %width2854, align 4
  %conv2855 = sext i32 %584 to i64
  %mul2856 = mul nsw i64 0, %conv2855
  %height2857 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %585 = load i32, i32* %height2857, align 4
  %conv2858 = sext i32 %585 to i64
  %add2859 = add nsw i64 %mul2856, %conv2858
  %mul2860 = mul nsw i64 0, %add2859
  %add2861 = add nsw i64 %mul2860, 0
  br label %cond.end.2862

cond.end.2862:                                    ; preds = %cond.false.2853, %cond.true.2826
  %cond2863 = phi i64 [ %sub2852, %cond.true.2826 ], [ %add2861, %cond.false.2853 ]
  %cmp2864 = icmp eq i64 %cond2863, 0
  br i1 %cmp2864, label %land.lhs.true.2866, label %lor.lhs.false.2886

land.lhs.true.2866:                               ; preds = %cond.end.2862
  %height2867 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %586 = load i32, i32* %height2867, align 4
  %conv2868 = sext i32 %586 to i64
  %cmp2869 = icmp slt i64 %conv2868, 0
  br i1 %cmp2869, label %land.lhs.true.2871, label %lor.lhs.false.2876

land.lhs.true.2871:                               ; preds = %land.lhs.true.2866
  %width2872 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %587 = load i32, i32* %width2872, align 4
  %conv2873 = sext i32 %587 to i64
  %cmp2874 = icmp slt i64 0, %conv2873
  br i1 %cmp2874, label %cond.true.3135, label %lor.lhs.false.2876

lor.lhs.false.2876:                               ; preds = %land.lhs.true.2871, %land.lhs.true.2866
  %width2877 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %588 = load i32, i32* %width2877, align 4
  %conv2878 = sext i32 %588 to i64
  %cmp2879 = icmp slt i64 %conv2878, 0
  br i1 %cmp2879, label %land.lhs.true.2881, label %lor.lhs.false.2886

land.lhs.true.2881:                               ; preds = %lor.lhs.false.2876
  %height2882 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %589 = load i32, i32* %height2882, align 4
  %conv2883 = sext i32 %589 to i64
  %cmp2884 = icmp slt i64 0, %conv2883
  br i1 %cmp2884, label %cond.true.3135, label %lor.lhs.false.2886

lor.lhs.false.2886:                               ; preds = %land.lhs.true.2881, %lor.lhs.false.2876, %cond.end.2862
  %width2887 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %590 = load i32, i32* %width2887, align 4
  %conv2888 = sext i32 %590 to i64
  %cmp2889 = icmp slt i64 %conv2888, 0
  br i1 %cmp2889, label %cond.true.2891, label %cond.false.3000

cond.true.2891:                                   ; preds = %lor.lhs.false.2886
  %height2892 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %591 = load i32, i32* %height2892, align 4
  %conv2893 = sext i32 %591 to i64
  %cmp2894 = icmp slt i64 %conv2893, 0
  br i1 %cmp2894, label %cond.true.2896, label %cond.false.2938

cond.true.2896:                                   ; preds = %cond.true.2891
  %height2897 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %592 = load i32, i32* %height2897, align 4
  %conv2898 = sext i32 %592 to i64
  %width2899 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %593 = load i32, i32* %width2899, align 4
  %conv2900 = sext i32 %593 to i64
  %mul2901 = mul nsw i64 0, %conv2900
  %height2902 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %594 = load i32, i32* %height2902, align 4
  %conv2903 = sext i32 %594 to i64
  %add2904 = add nsw i64 %mul2901, %conv2903
  %mul2905 = mul nsw i64 0, %add2904
  %sub2906 = sub nsw i64 %mul2905, 1
  %cmp2907 = icmp slt i64 %sub2906, 0
  br i1 %cmp2907, label %cond.true.2909, label %cond.false.2922

cond.true.2909:                                   ; preds = %cond.true.2896
  %width2910 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %595 = load i32, i32* %width2910, align 4
  %conv2911 = sext i32 %595 to i64
  %mul2912 = mul nsw i64 0, %conv2911
  %height2913 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %596 = load i32, i32* %height2913, align 4
  %conv2914 = sext i32 %596 to i64
  %add2915 = add nsw i64 %mul2912, %conv2914
  %mul2916 = mul nsw i64 0, %add2915
  %add2917 = add nsw i64 %mul2916, 1
  %shl2918 = shl i64 %add2917, 62
  %sub2919 = sub nsw i64 %shl2918, 1
  %mul2920 = mul nsw i64 %sub2919, 2
  %add2921 = add nsw i64 %mul2920, 1
  br label %cond.end.2931

cond.false.2922:                                  ; preds = %cond.true.2896
  %width2923 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %597 = load i32, i32* %width2923, align 4
  %conv2924 = sext i32 %597 to i64
  %mul2925 = mul nsw i64 0, %conv2924
  %height2926 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %598 = load i32, i32* %height2926, align 4
  %conv2927 = sext i32 %598 to i64
  %add2928 = add nsw i64 %mul2925, %conv2927
  %mul2929 = mul nsw i64 0, %add2928
  %sub2930 = sub nsw i64 %mul2929, 1
  br label %cond.end.2931

cond.end.2931:                                    ; preds = %cond.false.2922, %cond.true.2909
  %cond2932 = phi i64 [ %add2921, %cond.true.2909 ], [ %sub2930, %cond.false.2922 ]
  %width2933 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %599 = load i32, i32* %width2933, align 4
  %conv2934 = sext i32 %599 to i64
  %div2935 = sdiv i64 %cond2932, %conv2934
  %cmp2936 = icmp slt i64 %conv2898, %div2935
  br i1 %cmp2936, label %cond.true.3135, label %lor.lhs.false.3109

cond.false.2938:                                  ; preds = %cond.true.2891
  %width2939 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %600 = load i32, i32* %width2939, align 4
  %conv2940 = sext i32 %600 to i64
  %cmp2941 = icmp eq i64 %conv2940, -1
  br i1 %cmp2941, label %cond.true.2943, label %cond.false.2944

cond.true.2943:                                   ; preds = %cond.false.2938
  br i1 false, label %cond.true.3135, label %lor.lhs.false.3109

cond.false.2944:                                  ; preds = %cond.false.2938
  %width2945 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %601 = load i32, i32* %width2945, align 4
  %conv2946 = sext i32 %601 to i64
  %mul2947 = mul nsw i64 0, %conv2946
  %height2948 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %602 = load i32, i32* %height2948, align 4
  %conv2949 = sext i32 %602 to i64
  %add2950 = add nsw i64 %mul2947, %conv2949
  %mul2951 = mul nsw i64 0, %add2950
  %sub2952 = sub nsw i64 %mul2951, 1
  %cmp2953 = icmp slt i64 %sub2952, 0
  br i1 %cmp2953, label %cond.true.2955, label %cond.false.2982

cond.true.2955:                                   ; preds = %cond.false.2944
  %width2956 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %603 = load i32, i32* %width2956, align 4
  %conv2957 = sext i32 %603 to i64
  %mul2958 = mul nsw i64 0, %conv2957
  %height2959 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %604 = load i32, i32* %height2959, align 4
  %conv2960 = sext i32 %604 to i64
  %add2961 = add nsw i64 %mul2958, %conv2960
  %mul2962 = mul nsw i64 0, %add2961
  %add2963 = add nsw i64 %mul2962, 0
  %neg2964 = xor i64 %add2963, -1
  %cmp2965 = icmp eq i64 %neg2964, -1
  %conv2966 = zext i1 %cmp2965 to i32
  %sub2967 = sub nsw i32 0, %conv2966
  %conv2968 = sext i32 %sub2967 to i64
  %width2969 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %605 = load i32, i32* %width2969, align 4
  %conv2970 = sext i32 %605 to i64
  %mul2971 = mul nsw i64 0, %conv2970
  %height2972 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %606 = load i32, i32* %height2972, align 4
  %conv2973 = sext i32 %606 to i64
  %add2974 = add nsw i64 %mul2971, %conv2973
  %mul2975 = mul nsw i64 0, %add2974
  %add2976 = add nsw i64 %mul2975, 1
  %shl2977 = shl i64 %add2976, 62
  %sub2978 = sub nsw i64 %shl2977, 1
  %mul2979 = mul nsw i64 %sub2978, 2
  %add2980 = add nsw i64 %mul2979, 1
  %sub2981 = sub nsw i64 %conv2968, %add2980
  br label %cond.end.2991

cond.false.2982:                                  ; preds = %cond.false.2944
  %width2983 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %607 = load i32, i32* %width2983, align 4
  %conv2984 = sext i32 %607 to i64
  %mul2985 = mul nsw i64 0, %conv2984
  %height2986 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %608 = load i32, i32* %height2986, align 4
  %conv2987 = sext i32 %608 to i64
  %add2988 = add nsw i64 %mul2985, %conv2987
  %mul2989 = mul nsw i64 0, %add2988
  %add2990 = add nsw i64 %mul2989, 0
  br label %cond.end.2991

cond.end.2991:                                    ; preds = %cond.false.2982, %cond.true.2955
  %cond2992 = phi i64 [ %sub2981, %cond.true.2955 ], [ %add2990, %cond.false.2982 ]
  %width2993 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %609 = load i32, i32* %width2993, align 4
  %conv2994 = sext i32 %609 to i64
  %div2995 = sdiv i64 %cond2992, %conv2994
  %height2996 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %610 = load i32, i32* %height2996, align 4
  %conv2997 = sext i32 %610 to i64
  %cmp2998 = icmp slt i64 %div2995, %conv2997
  br i1 %cmp2998, label %cond.true.3135, label %lor.lhs.false.3109

cond.false.3000:                                  ; preds = %lor.lhs.false.2886
  %width3001 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %611 = load i32, i32* %width3001, align 4
  %conv3002 = sext i32 %611 to i64
  %cmp3003 = icmp eq i64 %conv3002, 0
  br i1 %cmp3003, label %cond.true.3005, label %cond.false.3006

cond.true.3005:                                   ; preds = %cond.false.3000
  br i1 false, label %cond.true.3135, label %lor.lhs.false.3109

cond.false.3006:                                  ; preds = %cond.false.3000
  %height3007 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %612 = load i32, i32* %height3007, align 4
  %conv3008 = sext i32 %612 to i64
  %cmp3009 = icmp slt i64 %conv3008, 0
  br i1 %cmp3009, label %cond.true.3011, label %cond.false.3067

cond.true.3011:                                   ; preds = %cond.false.3006
  %height3012 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %613 = load i32, i32* %height3012, align 4
  %conv3013 = sext i32 %613 to i64
  %width3014 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %614 = load i32, i32* %width3014, align 4
  %conv3015 = sext i32 %614 to i64
  %mul3016 = mul nsw i64 0, %conv3015
  %height3017 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %615 = load i32, i32* %height3017, align 4
  %conv3018 = sext i32 %615 to i64
  %add3019 = add nsw i64 %mul3016, %conv3018
  %mul3020 = mul nsw i64 0, %add3019
  %sub3021 = sub nsw i64 %mul3020, 1
  %cmp3022 = icmp slt i64 %sub3021, 0
  br i1 %cmp3022, label %cond.true.3024, label %cond.false.3051

cond.true.3024:                                   ; preds = %cond.true.3011
  %width3025 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %616 = load i32, i32* %width3025, align 4
  %conv3026 = sext i32 %616 to i64
  %mul3027 = mul nsw i64 0, %conv3026
  %height3028 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %617 = load i32, i32* %height3028, align 4
  %conv3029 = sext i32 %617 to i64
  %add3030 = add nsw i64 %mul3027, %conv3029
  %mul3031 = mul nsw i64 0, %add3030
  %add3032 = add nsw i64 %mul3031, 0
  %neg3033 = xor i64 %add3032, -1
  %cmp3034 = icmp eq i64 %neg3033, -1
  %conv3035 = zext i1 %cmp3034 to i32
  %sub3036 = sub nsw i32 0, %conv3035
  %conv3037 = sext i32 %sub3036 to i64
  %width3038 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %618 = load i32, i32* %width3038, align 4
  %conv3039 = sext i32 %618 to i64
  %mul3040 = mul nsw i64 0, %conv3039
  %height3041 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %619 = load i32, i32* %height3041, align 4
  %conv3042 = sext i32 %619 to i64
  %add3043 = add nsw i64 %mul3040, %conv3042
  %mul3044 = mul nsw i64 0, %add3043
  %add3045 = add nsw i64 %mul3044, 1
  %shl3046 = shl i64 %add3045, 62
  %sub3047 = sub nsw i64 %shl3046, 1
  %mul3048 = mul nsw i64 %sub3047, 2
  %add3049 = add nsw i64 %mul3048, 1
  %sub3050 = sub nsw i64 %conv3037, %add3049
  br label %cond.end.3060

cond.false.3051:                                  ; preds = %cond.true.3011
  %width3052 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %620 = load i32, i32* %width3052, align 4
  %conv3053 = sext i32 %620 to i64
  %mul3054 = mul nsw i64 0, %conv3053
  %height3055 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %621 = load i32, i32* %height3055, align 4
  %conv3056 = sext i32 %621 to i64
  %add3057 = add nsw i64 %mul3054, %conv3056
  %mul3058 = mul nsw i64 0, %add3057
  %add3059 = add nsw i64 %mul3058, 0
  br label %cond.end.3060

cond.end.3060:                                    ; preds = %cond.false.3051, %cond.true.3024
  %cond3061 = phi i64 [ %sub3050, %cond.true.3024 ], [ %add3059, %cond.false.3051 ]
  %width3062 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %622 = load i32, i32* %width3062, align 4
  %conv3063 = sext i32 %622 to i64
  %div3064 = sdiv i64 %cond3061, %conv3063
  %cmp3065 = icmp slt i64 %conv3013, %div3064
  br i1 %cmp3065, label %cond.true.3135, label %lor.lhs.false.3109

cond.false.3067:                                  ; preds = %cond.false.3006
  %width3068 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %623 = load i32, i32* %width3068, align 4
  %conv3069 = sext i32 %623 to i64
  %mul3070 = mul nsw i64 0, %conv3069
  %height3071 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %624 = load i32, i32* %height3071, align 4
  %conv3072 = sext i32 %624 to i64
  %add3073 = add nsw i64 %mul3070, %conv3072
  %mul3074 = mul nsw i64 0, %add3073
  %sub3075 = sub nsw i64 %mul3074, 1
  %cmp3076 = icmp slt i64 %sub3075, 0
  br i1 %cmp3076, label %cond.true.3078, label %cond.false.3091

cond.true.3078:                                   ; preds = %cond.false.3067
  %width3079 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %625 = load i32, i32* %width3079, align 4
  %conv3080 = sext i32 %625 to i64
  %mul3081 = mul nsw i64 0, %conv3080
  %height3082 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %626 = load i32, i32* %height3082, align 4
  %conv3083 = sext i32 %626 to i64
  %add3084 = add nsw i64 %mul3081, %conv3083
  %mul3085 = mul nsw i64 0, %add3084
  %add3086 = add nsw i64 %mul3085, 1
  %shl3087 = shl i64 %add3086, 62
  %sub3088 = sub nsw i64 %shl3087, 1
  %mul3089 = mul nsw i64 %sub3088, 2
  %add3090 = add nsw i64 %mul3089, 1
  br label %cond.end.3100

cond.false.3091:                                  ; preds = %cond.false.3067
  %width3092 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %627 = load i32, i32* %width3092, align 4
  %conv3093 = sext i32 %627 to i64
  %mul3094 = mul nsw i64 0, %conv3093
  %height3095 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %628 = load i32, i32* %height3095, align 4
  %conv3096 = sext i32 %628 to i64
  %add3097 = add nsw i64 %mul3094, %conv3096
  %mul3098 = mul nsw i64 0, %add3097
  %sub3099 = sub nsw i64 %mul3098, 1
  br label %cond.end.3100

cond.end.3100:                                    ; preds = %cond.false.3091, %cond.true.3078
  %cond3101 = phi i64 [ %add3090, %cond.true.3078 ], [ %sub3099, %cond.false.3091 ]
  %width3102 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %629 = load i32, i32* %width3102, align 4
  %conv3103 = sext i32 %629 to i64
  %div3104 = sdiv i64 %cond3101, %conv3103
  %height3105 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %630 = load i32, i32* %height3105, align 4
  %conv3106 = sext i32 %630 to i64
  %cmp3107 = icmp slt i64 %div3104, %conv3106
  br i1 %cmp3107, label %cond.true.3135, label %lor.lhs.false.3109

lor.lhs.false.3109:                               ; preds = %cond.end.3100, %cond.end.3060, %cond.true.3005, %cond.end.2991, %cond.true.2943, %cond.end.2931
  %height3110 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %631 = load i32, i32* %height3110, align 4
  %conv3111 = sext i32 %631 to i64
  %width3112 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %632 = load i32, i32* %width3112, align 4
  %conv3113 = sext i32 %632 to i64
  %mul3114 = mul nsw i64 %conv3111, %conv3113
  %mul3115 = mul nsw i64 0, %mul3114
  %sub3116 = sub nsw i64 %mul3115, 1
  %cmp3117 = icmp slt i64 %sub3116, 0
  br i1 %cmp3117, label %land.lhs.true.3119, label %lor.lhs.false.3127

land.lhs.true.3119:                               ; preds = %lor.lhs.false.3109
  %height3120 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %633 = load i32, i32* %height3120, align 4
  %conv3121 = sext i32 %633 to i64
  %width3122 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %634 = load i32, i32* %width3122, align 4
  %conv3123 = sext i32 %634 to i64
  %mul3124 = mul nsw i64 %conv3121, %conv3123
  %cmp3125 = icmp slt i64 %mul3124, -9223372036854775808
  br i1 %cmp3125, label %cond.true.3135, label %lor.lhs.false.3127

lor.lhs.false.3127:                               ; preds = %land.lhs.true.3119, %lor.lhs.false.3109
  %height3128 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %635 = load i32, i32* %height3128, align 4
  %conv3129 = sext i32 %635 to i64
  %width3130 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %636 = load i32, i32* %width3130, align 4
  %conv3131 = sext i32 %636 to i64
  %mul3132 = mul nsw i64 %conv3129, %conv3131
  %cmp3133 = icmp slt i64 9223372036854775807, %mul3132
  br i1 %cmp3133, label %cond.true.3135, label %cond.false.3159

cond.true.3135:                                   ; preds = %lor.lhs.false.3127, %land.lhs.true.3119, %cond.end.3100, %cond.end.3060, %cond.true.3005, %cond.end.2991, %cond.true.2943, %cond.end.2931, %land.lhs.true.2881, %land.lhs.true.2871
  %height3136 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %637 = load i32, i32* %height3136, align 4
  %conv3137 = sext i32 %637 to i64
  %width3138 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %638 = load i32, i32* %width3138, align 4
  %conv3139 = sext i32 %638 to i64
  %mul3140 = mul i64 %conv3137, %conv3139
  %cmp3141 = icmp ule i64 %mul3140, 9223372036854775807
  br i1 %cmp3141, label %cond.true.3143, label %cond.false.3149

cond.true.3143:                                   ; preds = %cond.true.3135
  %height3144 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %639 = load i32, i32* %height3144, align 4
  %conv3145 = sext i32 %639 to i64
  %width3146 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %640 = load i32, i32* %width3146, align 4
  %conv3147 = sext i32 %640 to i64
  %mul3148 = mul i64 %conv3145, %conv3147
  br label %cond.end.3157

cond.false.3149:                                  ; preds = %cond.true.3135
  %height3150 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %641 = load i32, i32* %height3150, align 4
  %conv3151 = sext i32 %641 to i64
  %width3152 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %642 = load i32, i32* %width3152, align 4
  %conv3153 = sext i32 %642 to i64
  %mul3154 = mul i64 %conv3151, %conv3153
  %sub3155 = sub i64 %mul3154, -9223372036854775808
  %add3156 = add nsw i64 %sub3155, -9223372036854775808
  br label %cond.end.3157

cond.end.3157:                                    ; preds = %cond.false.3149, %cond.true.3143
  %cond3158 = phi i64 [ %mul3148, %cond.true.3143 ], [ %add3156, %cond.false.3149 ]
  store i64 %cond3158, i64* %needed, align 8
  br i1 true, label %if.then, label %if.end

cond.false.3159:                                  ; preds = %lor.lhs.false.3127
  %height3160 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %643 = load i32, i32* %height3160, align 4
  %conv3161 = sext i32 %643 to i64
  %width3162 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %644 = load i32, i32* %width3162, align 4
  %conv3163 = sext i32 %644 to i64
  %mul3164 = mul i64 %conv3161, %conv3163
  %cmp3165 = icmp ule i64 %mul3164, 9223372036854775807
  br i1 %cmp3165, label %cond.true.3167, label %cond.false.3173

cond.true.3167:                                   ; preds = %cond.false.3159
  %height3168 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %645 = load i32, i32* %height3168, align 4
  %conv3169 = sext i32 %645 to i64
  %width3170 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %646 = load i32, i32* %width3170, align 4
  %conv3171 = sext i32 %646 to i64
  %mul3172 = mul i64 %conv3169, %conv3171
  br label %cond.end.3181

cond.false.3173:                                  ; preds = %cond.false.3159
  %height3174 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %647 = load i32, i32* %height3174, align 4
  %conv3175 = sext i32 %647 to i64
  %width3176 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %648 = load i32, i32* %width3176, align 4
  %conv3177 = sext i32 %648 to i64
  %mul3178 = mul i64 %conv3175, %conv3177
  %sub3179 = sub i64 %mul3178, -9223372036854775808
  %add3180 = add nsw i64 %sub3179, -9223372036854775808
  br label %cond.end.3181

cond.end.3181:                                    ; preds = %cond.false.3173, %cond.true.3167
  %cond3182 = phi i64 [ %mul3172, %cond.true.3167 ], [ %add3180, %cond.false.3173 ]
  store i64 %cond3182, i64* %needed, align 8
  br i1 false, label %if.then, label %if.end

cond.false.3183:                                  ; preds = %cond.false.2814
  %width3184 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %649 = load i32, i32* %width3184, align 4
  %mul3185 = mul nsw i32 0, %649
  %height3186 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %650 = load i32, i32* %height3186, align 4
  %add3187 = add nsw i32 %mul3185, %650
  %mul3188 = mul nsw i32 0, %add3187
  %sub3189 = sub nsw i32 %mul3188, 1
  %cmp3190 = icmp slt i32 %sub3189, 0
  br i1 %cmp3190, label %cond.true.3192, label %cond.false.3214

cond.true.3192:                                   ; preds = %cond.false.3183
  %width3193 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %651 = load i32, i32* %width3193, align 4
  %mul3194 = mul nsw i32 0, %651
  %height3195 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %652 = load i32, i32* %height3195, align 4
  %add3196 = add nsw i32 %mul3194, %652
  %mul3197 = mul nsw i32 0, %add3196
  %add3198 = add nsw i32 %mul3197, 0
  %neg3199 = xor i32 %add3198, -1
  %cmp3200 = icmp eq i32 %neg3199, -1
  %conv3201 = zext i1 %cmp3200 to i32
  %sub3202 = sub nsw i32 0, %conv3201
  %width3203 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %653 = load i32, i32* %width3203, align 4
  %mul3204 = mul nsw i32 0, %653
  %height3205 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %654 = load i32, i32* %height3205, align 4
  %add3206 = add nsw i32 %mul3204, %654
  %mul3207 = mul nsw i32 0, %add3206
  %add3208 = add nsw i32 %mul3207, 1
  %shl3209 = shl i32 %add3208, 30
  %sub3210 = sub nsw i32 %shl3209, 1
  %mul3211 = mul nsw i32 %sub3210, 2
  %add3212 = add nsw i32 %mul3211, 1
  %sub3213 = sub nsw i32 %sub3202, %add3212
  br label %cond.end.3221

cond.false.3214:                                  ; preds = %cond.false.3183
  %width3215 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %655 = load i32, i32* %width3215, align 4
  %mul3216 = mul nsw i32 0, %655
  %height3217 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %656 = load i32, i32* %height3217, align 4
  %add3218 = add nsw i32 %mul3216, %656
  %mul3219 = mul nsw i32 0, %add3218
  %add3220 = add nsw i32 %mul3219, 0
  br label %cond.end.3221

cond.end.3221:                                    ; preds = %cond.false.3214, %cond.true.3192
  %cond3222 = phi i32 [ %sub3213, %cond.true.3192 ], [ %add3220, %cond.false.3214 ]
  %cmp3223 = icmp eq i32 %cond3222, 0
  br i1 %cmp3223, label %land.lhs.true.3225, label %lor.lhs.false.3241

land.lhs.true.3225:                               ; preds = %cond.end.3221
  %height3226 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %657 = load i32, i32* %height3226, align 4
  %cmp3227 = icmp slt i32 %657, 0
  br i1 %cmp3227, label %land.lhs.true.3229, label %lor.lhs.false.3233

land.lhs.true.3229:                               ; preds = %land.lhs.true.3225
  %width3230 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %658 = load i32, i32* %width3230, align 4
  %cmp3231 = icmp slt i32 0, %658
  br i1 %cmp3231, label %cond.true.3443, label %lor.lhs.false.3233

lor.lhs.false.3233:                               ; preds = %land.lhs.true.3229, %land.lhs.true.3225
  %width3234 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %659 = load i32, i32* %width3234, align 4
  %cmp3235 = icmp slt i32 %659, 0
  br i1 %cmp3235, label %land.lhs.true.3237, label %lor.lhs.false.3241

land.lhs.true.3237:                               ; preds = %lor.lhs.false.3233
  %height3238 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %660 = load i32, i32* %height3238, align 4
  %cmp3239 = icmp slt i32 0, %660
  br i1 %cmp3239, label %cond.true.3443, label %lor.lhs.false.3241

lor.lhs.false.3241:                               ; preds = %land.lhs.true.3237, %lor.lhs.false.3233, %cond.end.3221
  %width3242 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %661 = load i32, i32* %width3242, align 4
  %cmp3243 = icmp slt i32 %661, 0
  br i1 %cmp3243, label %cond.true.3245, label %cond.false.3333

cond.true.3245:                                   ; preds = %lor.lhs.false.3241
  %height3246 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %662 = load i32, i32* %height3246, align 4
  %cmp3247 = icmp slt i32 %662, 0
  br i1 %cmp3247, label %cond.true.3249, label %cond.false.3283

cond.true.3249:                                   ; preds = %cond.true.3245
  %height3250 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %663 = load i32, i32* %height3250, align 4
  %width3251 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %664 = load i32, i32* %width3251, align 4
  %mul3252 = mul nsw i32 0, %664
  %height3253 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %665 = load i32, i32* %height3253, align 4
  %add3254 = add nsw i32 %mul3252, %665
  %mul3255 = mul nsw i32 0, %add3254
  %sub3256 = sub nsw i32 %mul3255, 1
  %cmp3257 = icmp slt i32 %sub3256, 0
  br i1 %cmp3257, label %cond.true.3259, label %cond.false.3270

cond.true.3259:                                   ; preds = %cond.true.3249
  %width3260 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %666 = load i32, i32* %width3260, align 4
  %mul3261 = mul nsw i32 0, %666
  %height3262 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %667 = load i32, i32* %height3262, align 4
  %add3263 = add nsw i32 %mul3261, %667
  %mul3264 = mul nsw i32 0, %add3263
  %add3265 = add nsw i32 %mul3264, 1
  %shl3266 = shl i32 %add3265, 30
  %sub3267 = sub nsw i32 %shl3266, 1
  %mul3268 = mul nsw i32 %sub3267, 2
  %add3269 = add nsw i32 %mul3268, 1
  br label %cond.end.3277

cond.false.3270:                                  ; preds = %cond.true.3249
  %width3271 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %668 = load i32, i32* %width3271, align 4
  %mul3272 = mul nsw i32 0, %668
  %height3273 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %669 = load i32, i32* %height3273, align 4
  %add3274 = add nsw i32 %mul3272, %669
  %mul3275 = mul nsw i32 0, %add3274
  %sub3276 = sub nsw i32 %mul3275, 1
  br label %cond.end.3277

cond.end.3277:                                    ; preds = %cond.false.3270, %cond.true.3259
  %cond3278 = phi i32 [ %add3269, %cond.true.3259 ], [ %sub3276, %cond.false.3270 ]
  %width3279 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %670 = load i32, i32* %width3279, align 4
  %div3280 = sdiv i32 %cond3278, %670
  %cmp3281 = icmp slt i32 %663, %div3280
  br i1 %cmp3281, label %cond.true.3443, label %lor.lhs.false.3421

cond.false.3283:                                  ; preds = %cond.true.3245
  %width3284 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %671 = load i32, i32* %width3284, align 4
  %cmp3285 = icmp eq i32 %671, -1
  br i1 %cmp3285, label %cond.true.3287, label %cond.false.3288

cond.true.3287:                                   ; preds = %cond.false.3283
  br i1 false, label %cond.true.3443, label %lor.lhs.false.3421

cond.false.3288:                                  ; preds = %cond.false.3283
  %width3289 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %672 = load i32, i32* %width3289, align 4
  %mul3290 = mul nsw i32 0, %672
  %height3291 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %673 = load i32, i32* %height3291, align 4
  %add3292 = add nsw i32 %mul3290, %673
  %mul3293 = mul nsw i32 0, %add3292
  %sub3294 = sub nsw i32 %mul3293, 1
  %cmp3295 = icmp slt i32 %sub3294, 0
  br i1 %cmp3295, label %cond.true.3297, label %cond.false.3319

cond.true.3297:                                   ; preds = %cond.false.3288
  %width3298 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %674 = load i32, i32* %width3298, align 4
  %mul3299 = mul nsw i32 0, %674
  %height3300 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %675 = load i32, i32* %height3300, align 4
  %add3301 = add nsw i32 %mul3299, %675
  %mul3302 = mul nsw i32 0, %add3301
  %add3303 = add nsw i32 %mul3302, 0
  %neg3304 = xor i32 %add3303, -1
  %cmp3305 = icmp eq i32 %neg3304, -1
  %conv3306 = zext i1 %cmp3305 to i32
  %sub3307 = sub nsw i32 0, %conv3306
  %width3308 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %676 = load i32, i32* %width3308, align 4
  %mul3309 = mul nsw i32 0, %676
  %height3310 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %677 = load i32, i32* %height3310, align 4
  %add3311 = add nsw i32 %mul3309, %677
  %mul3312 = mul nsw i32 0, %add3311
  %add3313 = add nsw i32 %mul3312, 1
  %shl3314 = shl i32 %add3313, 30
  %sub3315 = sub nsw i32 %shl3314, 1
  %mul3316 = mul nsw i32 %sub3315, 2
  %add3317 = add nsw i32 %mul3316, 1
  %sub3318 = sub nsw i32 %sub3307, %add3317
  br label %cond.end.3326

cond.false.3319:                                  ; preds = %cond.false.3288
  %width3320 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %678 = load i32, i32* %width3320, align 4
  %mul3321 = mul nsw i32 0, %678
  %height3322 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %679 = load i32, i32* %height3322, align 4
  %add3323 = add nsw i32 %mul3321, %679
  %mul3324 = mul nsw i32 0, %add3323
  %add3325 = add nsw i32 %mul3324, 0
  br label %cond.end.3326

cond.end.3326:                                    ; preds = %cond.false.3319, %cond.true.3297
  %cond3327 = phi i32 [ %sub3318, %cond.true.3297 ], [ %add3325, %cond.false.3319 ]
  %width3328 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %680 = load i32, i32* %width3328, align 4
  %div3329 = sdiv i32 %cond3327, %680
  %height3330 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %681 = load i32, i32* %height3330, align 4
  %cmp3331 = icmp slt i32 %div3329, %681
  br i1 %cmp3331, label %cond.true.3443, label %lor.lhs.false.3421

cond.false.3333:                                  ; preds = %lor.lhs.false.3241
  %width3334 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %682 = load i32, i32* %width3334, align 4
  %cmp3335 = icmp eq i32 %682, 0
  br i1 %cmp3335, label %cond.true.3337, label %cond.false.3338

cond.true.3337:                                   ; preds = %cond.false.3333
  br i1 false, label %cond.true.3443, label %lor.lhs.false.3421

cond.false.3338:                                  ; preds = %cond.false.3333
  %height3339 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %683 = load i32, i32* %height3339, align 4
  %cmp3340 = icmp slt i32 %683, 0
  br i1 %cmp3340, label %cond.true.3342, label %cond.false.3387

cond.true.3342:                                   ; preds = %cond.false.3338
  %height3343 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %684 = load i32, i32* %height3343, align 4
  %width3344 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %685 = load i32, i32* %width3344, align 4
  %mul3345 = mul nsw i32 0, %685
  %height3346 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %686 = load i32, i32* %height3346, align 4
  %add3347 = add nsw i32 %mul3345, %686
  %mul3348 = mul nsw i32 0, %add3347
  %sub3349 = sub nsw i32 %mul3348, 1
  %cmp3350 = icmp slt i32 %sub3349, 0
  br i1 %cmp3350, label %cond.true.3352, label %cond.false.3374

cond.true.3352:                                   ; preds = %cond.true.3342
  %width3353 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %687 = load i32, i32* %width3353, align 4
  %mul3354 = mul nsw i32 0, %687
  %height3355 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %688 = load i32, i32* %height3355, align 4
  %add3356 = add nsw i32 %mul3354, %688
  %mul3357 = mul nsw i32 0, %add3356
  %add3358 = add nsw i32 %mul3357, 0
  %neg3359 = xor i32 %add3358, -1
  %cmp3360 = icmp eq i32 %neg3359, -1
  %conv3361 = zext i1 %cmp3360 to i32
  %sub3362 = sub nsw i32 0, %conv3361
  %width3363 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %689 = load i32, i32* %width3363, align 4
  %mul3364 = mul nsw i32 0, %689
  %height3365 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %690 = load i32, i32* %height3365, align 4
  %add3366 = add nsw i32 %mul3364, %690
  %mul3367 = mul nsw i32 0, %add3366
  %add3368 = add nsw i32 %mul3367, 1
  %shl3369 = shl i32 %add3368, 30
  %sub3370 = sub nsw i32 %shl3369, 1
  %mul3371 = mul nsw i32 %sub3370, 2
  %add3372 = add nsw i32 %mul3371, 1
  %sub3373 = sub nsw i32 %sub3362, %add3372
  br label %cond.end.3381

cond.false.3374:                                  ; preds = %cond.true.3342
  %width3375 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %691 = load i32, i32* %width3375, align 4
  %mul3376 = mul nsw i32 0, %691
  %height3377 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %692 = load i32, i32* %height3377, align 4
  %add3378 = add nsw i32 %mul3376, %692
  %mul3379 = mul nsw i32 0, %add3378
  %add3380 = add nsw i32 %mul3379, 0
  br label %cond.end.3381

cond.end.3381:                                    ; preds = %cond.false.3374, %cond.true.3352
  %cond3382 = phi i32 [ %sub3373, %cond.true.3352 ], [ %add3380, %cond.false.3374 ]
  %width3383 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %693 = load i32, i32* %width3383, align 4
  %div3384 = sdiv i32 %cond3382, %693
  %cmp3385 = icmp slt i32 %684, %div3384
  br i1 %cmp3385, label %cond.true.3443, label %lor.lhs.false.3421

cond.false.3387:                                  ; preds = %cond.false.3338
  %width3388 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %694 = load i32, i32* %width3388, align 4
  %mul3389 = mul nsw i32 0, %694
  %height3390 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %695 = load i32, i32* %height3390, align 4
  %add3391 = add nsw i32 %mul3389, %695
  %mul3392 = mul nsw i32 0, %add3391
  %sub3393 = sub nsw i32 %mul3392, 1
  %cmp3394 = icmp slt i32 %sub3393, 0
  br i1 %cmp3394, label %cond.true.3396, label %cond.false.3407

cond.true.3396:                                   ; preds = %cond.false.3387
  %width3397 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %696 = load i32, i32* %width3397, align 4
  %mul3398 = mul nsw i32 0, %696
  %height3399 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %697 = load i32, i32* %height3399, align 4
  %add3400 = add nsw i32 %mul3398, %697
  %mul3401 = mul nsw i32 0, %add3400
  %add3402 = add nsw i32 %mul3401, 1
  %shl3403 = shl i32 %add3402, 30
  %sub3404 = sub nsw i32 %shl3403, 1
  %mul3405 = mul nsw i32 %sub3404, 2
  %add3406 = add nsw i32 %mul3405, 1
  br label %cond.end.3414

cond.false.3407:                                  ; preds = %cond.false.3387
  %width3408 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %698 = load i32, i32* %width3408, align 4
  %mul3409 = mul nsw i32 0, %698
  %height3410 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %699 = load i32, i32* %height3410, align 4
  %add3411 = add nsw i32 %mul3409, %699
  %mul3412 = mul nsw i32 0, %add3411
  %sub3413 = sub nsw i32 %mul3412, 1
  br label %cond.end.3414

cond.end.3414:                                    ; preds = %cond.false.3407, %cond.true.3396
  %cond3415 = phi i32 [ %add3406, %cond.true.3396 ], [ %sub3413, %cond.false.3407 ]
  %width3416 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %700 = load i32, i32* %width3416, align 4
  %div3417 = sdiv i32 %cond3415, %700
  %height3418 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %701 = load i32, i32* %height3418, align 4
  %cmp3419 = icmp slt i32 %div3417, %701
  br i1 %cmp3419, label %cond.true.3443, label %lor.lhs.false.3421

lor.lhs.false.3421:                               ; preds = %cond.end.3414, %cond.end.3381, %cond.true.3337, %cond.end.3326, %cond.true.3287, %cond.end.3277
  %height3422 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %702 = load i32, i32* %height3422, align 4
  %width3423 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %703 = load i32, i32* %width3423, align 4
  %mul3424 = mul nsw i32 %702, %703
  %mul3425 = mul nsw i32 0, %mul3424
  %sub3426 = sub nsw i32 %mul3425, 1
  %cmp3427 = icmp slt i32 %sub3426, 0
  br i1 %cmp3427, label %land.lhs.true.3429, label %lor.lhs.false.3436

land.lhs.true.3429:                               ; preds = %lor.lhs.false.3421
  %height3430 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %704 = load i32, i32* %height3430, align 4
  %width3431 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %705 = load i32, i32* %width3431, align 4
  %mul3432 = mul nsw i32 %704, %705
  %conv3433 = sext i32 %mul3432 to i64
  %cmp3434 = icmp slt i64 %conv3433, -9223372036854775808
  br i1 %cmp3434, label %cond.true.3443, label %lor.lhs.false.3436

lor.lhs.false.3436:                               ; preds = %land.lhs.true.3429, %lor.lhs.false.3421
  %height3437 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %706 = load i32, i32* %height3437, align 4
  %width3438 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %707 = load i32, i32* %width3438, align 4
  %mul3439 = mul nsw i32 %706, %707
  %conv3440 = sext i32 %mul3439 to i64
  %cmp3441 = icmp slt i64 9223372036854775807, %conv3440
  br i1 %cmp3441, label %cond.true.3443, label %cond.false.3467

cond.true.3443:                                   ; preds = %lor.lhs.false.3436, %land.lhs.true.3429, %cond.end.3414, %cond.end.3381, %cond.true.3337, %cond.end.3326, %cond.true.3287, %cond.end.3277, %land.lhs.true.3237, %land.lhs.true.3229
  %height3444 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %708 = load i32, i32* %height3444, align 4
  %conv3445 = sext i32 %708 to i64
  %width3446 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %709 = load i32, i32* %width3446, align 4
  %conv3447 = sext i32 %709 to i64
  %mul3448 = mul i64 %conv3445, %conv3447
  %cmp3449 = icmp ule i64 %mul3448, 9223372036854775807
  br i1 %cmp3449, label %cond.true.3451, label %cond.false.3457

cond.true.3451:                                   ; preds = %cond.true.3443
  %height3452 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %710 = load i32, i32* %height3452, align 4
  %conv3453 = sext i32 %710 to i64
  %width3454 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %711 = load i32, i32* %width3454, align 4
  %conv3455 = sext i32 %711 to i64
  %mul3456 = mul i64 %conv3453, %conv3455
  br label %cond.end.3465

cond.false.3457:                                  ; preds = %cond.true.3443
  %height3458 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %712 = load i32, i32* %height3458, align 4
  %conv3459 = sext i32 %712 to i64
  %width3460 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %713 = load i32, i32* %width3460, align 4
  %conv3461 = sext i32 %713 to i64
  %mul3462 = mul i64 %conv3459, %conv3461
  %sub3463 = sub i64 %mul3462, -9223372036854775808
  %add3464 = add nsw i64 %sub3463, -9223372036854775808
  br label %cond.end.3465

cond.end.3465:                                    ; preds = %cond.false.3457, %cond.true.3451
  %cond3466 = phi i64 [ %mul3456, %cond.true.3451 ], [ %add3464, %cond.false.3457 ]
  store i64 %cond3466, i64* %needed, align 8
  br i1 true, label %if.then, label %if.end

cond.false.3467:                                  ; preds = %lor.lhs.false.3436
  %height3468 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %714 = load i32, i32* %height3468, align 4
  %conv3469 = sext i32 %714 to i64
  %width3470 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %715 = load i32, i32* %width3470, align 4
  %conv3471 = sext i32 %715 to i64
  %mul3472 = mul i64 %conv3469, %conv3471
  %cmp3473 = icmp ule i64 %mul3472, 9223372036854775807
  br i1 %cmp3473, label %cond.true.3475, label %cond.false.3481

cond.true.3475:                                   ; preds = %cond.false.3467
  %height3476 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %716 = load i32, i32* %height3476, align 4
  %conv3477 = sext i32 %716 to i64
  %width3478 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %717 = load i32, i32* %width3478, align 4
  %conv3479 = sext i32 %717 to i64
  %mul3480 = mul i64 %conv3477, %conv3479
  br label %cond.end.3489

cond.false.3481:                                  ; preds = %cond.false.3467
  %height3482 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %718 = load i32, i32* %height3482, align 4
  %conv3483 = sext i32 %718 to i64
  %width3484 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %719 = load i32, i32* %width3484, align 4
  %conv3485 = sext i32 %719 to i64
  %mul3486 = mul i64 %conv3483, %conv3485
  %sub3487 = sub i64 %mul3486, -9223372036854775808
  %add3488 = add nsw i64 %sub3487, -9223372036854775808
  br label %cond.end.3489

cond.end.3489:                                    ; preds = %cond.false.3481, %cond.true.3475
  %cond3490 = phi i64 [ %mul3480, %cond.true.3475 ], [ %add3488, %cond.false.3481 ]
  store i64 %cond3490, i64* %needed, align 8
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.3489, %cond.end.3465, %cond.end.3181, %cond.end.3157, %cond.end.2812, %cond.end.2788, %cond.end.2504, %cond.end.2480, %cond.end.2133, %cond.end.2114, %cond.end.1837, %cond.end.1818, %cond.end.1539, %cond.end.1504, %cond.end.1211, %cond.end.1176, %cond.end.763, %cond.end.728, %cond.end.435, %cond.end.400
  call void @memory_full(i64 -1) #8
  unreachable

if.end:                                           ; preds = %cond.end.3489, %cond.end.3465, %cond.end.3181, %cond.end.3157, %cond.end.2812, %cond.end.2788, %cond.end.2504, %cond.end.2480, %cond.end.2133, %cond.end.2114, %cond.end.1837, %cond.end.1818, %cond.end.1539, %cond.end.1504, %cond.end.1211, %cond.end.1176, %cond.end.763, %cond.end.728, %cond.end.435, %cond.end.400
  %720 = load i64, i64* %needed, align 8
  %721 = load %struct.glyph_pool*, %struct.glyph_pool** %pool.addr, align 8
  %nglyphs = getelementptr inbounds %struct.glyph_pool, %struct.glyph_pool* %721, i32 0, i32 1
  %722 = load i64, i64* %nglyphs, align 8
  %cmp3491 = icmp sgt i64 %720, %722
  br i1 %cmp3491, label %if.then.3493, label %if.end.3503

if.then.3493:                                     ; preds = %if.end
  %723 = load %struct.glyph_pool*, %struct.glyph_pool** %pool.addr, align 8
  %nglyphs3494 = getelementptr inbounds %struct.glyph_pool, %struct.glyph_pool* %723, i32 0, i32 1
  %724 = load i64, i64* %nglyphs3494, align 8
  store i64 %724, i64* %old_nglyphs, align 8
  %725 = load %struct.glyph_pool*, %struct.glyph_pool** %pool.addr, align 8
  %glyphs3495 = getelementptr inbounds %struct.glyph_pool, %struct.glyph_pool* %725, i32 0, i32 0
  %726 = load %struct.glyph*, %struct.glyph** %glyphs3495, align 8
  %727 = bitcast %struct.glyph* %726 to i8*
  %728 = load %struct.glyph_pool*, %struct.glyph_pool** %pool.addr, align 8
  %nglyphs3496 = getelementptr inbounds %struct.glyph_pool, %struct.glyph_pool* %728, i32 0, i32 1
  %729 = load i64, i64* %needed, align 8
  %730 = load i64, i64* %old_nglyphs, align 8
  %sub3497 = sub nsw i64 %729, %730
  %call = call i8* @xpalloc(i8* %727, i64* %nglyphs3496, i64 %sub3497, i64 -1, i64 48)
  %731 = bitcast i8* %call to %struct.glyph*
  %732 = load %struct.glyph_pool*, %struct.glyph_pool** %pool.addr, align 8
  %glyphs3498 = getelementptr inbounds %struct.glyph_pool, %struct.glyph_pool* %732, i32 0, i32 0
  store %struct.glyph* %731, %struct.glyph** %glyphs3498, align 8
  %733 = load %struct.glyph_pool*, %struct.glyph_pool** %pool.addr, align 8
  %glyphs3499 = getelementptr inbounds %struct.glyph_pool, %struct.glyph_pool* %733, i32 0, i32 0
  %734 = load %struct.glyph*, %struct.glyph** %glyphs3499, align 8
  %735 = load i64, i64* %old_nglyphs, align 8
  %add.ptr = getelementptr inbounds %struct.glyph, %struct.glyph* %734, i64 %735
  %736 = bitcast %struct.glyph* %add.ptr to i8*
  %737 = load %struct.glyph_pool*, %struct.glyph_pool** %pool.addr, align 8
  %nglyphs3500 = getelementptr inbounds %struct.glyph_pool, %struct.glyph_pool* %737, i32 0, i32 1
  %738 = load i64, i64* %nglyphs3500, align 8
  %739 = load i64, i64* %old_nglyphs, align 8
  %sub3501 = sub nsw i64 %738, %739
  %mul3502 = mul i64 %sub3501, 48
  call void @memclear(i8* %736, i64 %mul3502)
  br label %if.end.3503

if.end.3503:                                      ; preds = %if.then.3493, %if.end
  %height3504 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 1
  %740 = load i32, i32* %height3504, align 4
  %741 = load %struct.glyph_pool*, %struct.glyph_pool** %pool.addr, align 8
  %nrows3505 = getelementptr inbounds %struct.glyph_pool, %struct.glyph_pool* %741, i32 0, i32 2
  store i32 %740, i32* %nrows3505, align 4
  %width3506 = getelementptr inbounds %struct.dim, %struct.dim* %matrix_dim, i32 0, i32 0
  %742 = load i32, i32* %width3506, align 4
  %743 = load %struct.glyph_pool*, %struct.glyph_pool** %pool.addr, align 8
  %ncolumns3507 = getelementptr inbounds %struct.glyph_pool, %struct.glyph_pool* %743, i32 0, i32 3
  store i32 %742, i32* %ncolumns3507, align 4
  %744 = load i8, i8* %changed_p, align 1
  %tobool = trunc i8 %744 to i1
  ret i1 %tobool
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @showing_window_margins_p(%struct.window* %w) #0 {
entry:
  %retval = alloca i1, align 1
  %w.addr = alloca %struct.window*, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %entry
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %tobool = icmp ne %struct.window* %0, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 10
  %2 = load i64, i64* %contents, align 8
  %call = call zeroext i1 @WINDOWP(i64 %2)
  br i1 %call, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %3 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents1 = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 10
  %4 = load i64, i64* %contents1, align 8
  %call2 = call %struct.window* @XWINDOW(i64 %4)
  %call3 = call zeroext i1 @showing_window_margins_p(%struct.window* %call2)
  br i1 %call3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  store i1 true, i1* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.8

if.else:                                          ; preds = %while.body
  %5 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_margin_cols = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 59
  %6 = load i32, i32* %left_margin_cols, align 4
  %cmp = icmp sgt i32 %6, 0
  br i1 %cmp, label %if.then.6, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %7 = load %struct.window*, %struct.window** %w.addr, align 8
  %right_margin_cols = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 60
  %8 = load i32, i32* %right_margin_cols, align 4
  %cmp5 = icmp sgt i32 %8, 0
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %lor.lhs.false, %if.else
  store i1 true, i1* %retval
  br label %return

if.end.7:                                         ; preds = %lor.lhs.false
  br label %if.end.8

if.end.8:                                         ; preds = %if.end.7, %if.end
  %9 = load %struct.window*, %struct.window** %w.addr, align 8
  %next = getelementptr inbounds %struct.window, %struct.window* %9, i32 0, i32 2
  %10 = load i64, i64* %next, align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp10 = icmp eq i64 %10, %call9
  br i1 %cmp10, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.8
  br label %cond.end

cond.false:                                       ; preds = %if.end.8
  %11 = load %struct.window*, %struct.window** %w.addr, align 8
  %next11 = getelementptr inbounds %struct.window, %struct.window* %11, i32 0, i32 2
  %12 = load i64, i64* %next11, align 8
  %call12 = call %struct.window* @XWINDOW(i64 %12)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.window* [ null, %cond.true ], [ %call12, %cond.false ]
  store %struct.window* %cond, %struct.window** %w.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i1 false, i1* %retval
  br label %return

return:                                           ; preds = %while.end, %if.then.6, %if.then.4
  %13 = load i1, i1* %retval
  ret i1 %13
}

; Function Attrs: nounwind uwtable
define internal %struct.glyph_matrix* @save_current_matrix(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %i = alloca i32, align 4
  %saved = alloca %struct.glyph_matrix*, align 8
  %from = alloca %struct.glyph_row*, align 8
  %to = alloca %struct.glyph_row*, align 8
  %nbytes = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %call = call noalias i8* @xzalloc(i64 104)
  %0 = bitcast i8* %call to %struct.glyph_matrix*
  store %struct.glyph_matrix* %0, %struct.glyph_matrix** %saved, align 8
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %current_matrix = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 25
  %2 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %nrows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %2, i32 0, i32 3
  %3 = load i32, i32* %nrows, align 4
  %4 = load %struct.glyph_matrix*, %struct.glyph_matrix** %saved, align 8
  %nrows1 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %4, i32 0, i32 3
  store i32 %3, i32* %nrows1, align 4
  %5 = load %struct.glyph_matrix*, %struct.glyph_matrix** %saved, align 8
  %nrows2 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %5, i32 0, i32 3
  %6 = load i32, i32* %nrows2, align 4
  %conv = sext i32 %6 to i64
  %mul = mul i64 %conv, 256
  %call3 = call noalias i8* @xzalloc(i64 %mul)
  %7 = bitcast i8* %call3 to %struct.glyph_row*
  %8 = load %struct.glyph_matrix*, %struct.glyph_matrix** %saved, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %8, i32 0, i32 1
  store %struct.glyph_row* %7, %struct.glyph_row** %rows, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %10 = load %struct.glyph_matrix*, %struct.glyph_matrix** %saved, align 8
  %nrows4 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %10, i32 0, i32 3
  %11 = load i32, i32* %nrows4, align 4
  %cmp = icmp slt i32 %9, %11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %current_matrix6 = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 25
  %13 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix6, align 8
  %rows7 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %13, i32 0, i32 1
  %14 = load %struct.glyph_row*, %struct.glyph_row** %rows7, align 8
  %15 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %15 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %14, i64 %idx.ext
  store %struct.glyph_row* %add.ptr, %struct.glyph_row** %from, align 8
  %16 = load %struct.glyph_matrix*, %struct.glyph_matrix** %saved, align 8
  %rows8 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %16, i32 0, i32 1
  %17 = load %struct.glyph_row*, %struct.glyph_row** %rows8, align 8
  %18 = load i32, i32* %i, align 4
  %idx.ext9 = sext i32 %18 to i64
  %add.ptr10 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %17, i64 %idx.ext9
  store %struct.glyph_row* %add.ptr10, %struct.glyph_row** %to, align 8
  %19 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %used = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %19, i32 0, i32 1
  %arrayidx = getelementptr inbounds [4 x i16], [4 x i16]* %used, i32 0, i64 1
  %20 = load i16, i16* %arrayidx, align 2
  %conv11 = sext i16 %20 to i64
  %mul12 = mul i64 %conv11, 48
  store i64 %mul12, i64* %nbytes, align 8
  %21 = load i64, i64* %nbytes, align 8
  %call13 = call noalias i8* @xmalloc(i64 %21)
  %22 = bitcast i8* %call13 to %struct.glyph*
  %23 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %glyphs = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %23, i32 0, i32 0
  %arrayidx14 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs, i32 0, i64 1
  store %struct.glyph* %22, %struct.glyph** %arrayidx14, align 8
  %24 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %glyphs15 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %24, i32 0, i32 0
  %arrayidx16 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs15, i32 0, i64 1
  %25 = load %struct.glyph*, %struct.glyph** %arrayidx16, align 8
  %26 = bitcast %struct.glyph* %25 to i8*
  %27 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %glyphs17 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %27, i32 0, i32 0
  %arrayidx18 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs17, i32 0, i64 1
  %28 = load %struct.glyph*, %struct.glyph** %arrayidx18, align 8
  %29 = bitcast %struct.glyph* %28 to i8*
  %30 = load i64, i64* %nbytes, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %26, i8* %29, i64 %30, i32 8, i1 false)
  %31 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %used19 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %31, i32 0, i32 1
  %arrayidx20 = getelementptr inbounds [4 x i16], [4 x i16]* %used19, i32 0, i64 1
  %32 = load i16, i16* %arrayidx20, align 2
  %33 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %used21 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %33, i32 0, i32 1
  %arrayidx22 = getelementptr inbounds [4 x i16], [4 x i16]* %used21, i32 0, i64 1
  store i16 %32, i16* %arrayidx22, align 2
  %34 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %enabled_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %34, i32 0, i32 22
  %35 = bitcast i40* %enabled_p to i64*
  %bf.load = load i64, i64* %35, align 4
  %bf.lshr = lshr i64 %bf.load, 10
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  %36 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %enabled_p23 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %36, i32 0, i32 22
  %37 = bitcast i40* %enabled_p23 to i64*
  %38 = zext i1 %bf.cast to i64
  %bf.load24 = load i64, i64* %37, align 4
  %bf.shl = shl i64 %38, 10
  %bf.clear25 = and i64 %bf.load24, -1025
  %bf.set = or i64 %bf.clear25, %bf.shl
  store i64 %bf.set, i64* %37, align 4
  %bf.result.cast = trunc i64 %38 to i8
  %tobool = trunc i8 %bf.result.cast to i1
  %39 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %hash = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %39, i32 0, i32 2
  %40 = load i32, i32* %hash, align 4
  %41 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %hash26 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %41, i32 0, i32 2
  store i32 %40, i32* %hash26, align 4
  %42 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %used27 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %42, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [4 x i16], [4 x i16]* %used27, i32 0, i64 0
  %43 = load i16, i16* %arrayidx28, align 2
  %tobool29 = icmp ne i16 %43, 0
  br i1 %tobool29, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %44 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %used30 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %44, i32 0, i32 1
  %arrayidx31 = getelementptr inbounds [4 x i16], [4 x i16]* %used30, i32 0, i64 0
  %45 = load i16, i16* %arrayidx31, align 2
  %conv32 = sext i16 %45 to i64
  %mul33 = mul i64 %conv32, 48
  store i64 %mul33, i64* %nbytes, align 8
  %46 = load i64, i64* %nbytes, align 8
  %call34 = call noalias i8* @xmalloc(i64 %46)
  %47 = bitcast i8* %call34 to %struct.glyph*
  %48 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %glyphs35 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %48, i32 0, i32 0
  %arrayidx36 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs35, i32 0, i64 0
  store %struct.glyph* %47, %struct.glyph** %arrayidx36, align 8
  %49 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %glyphs37 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %49, i32 0, i32 0
  %arrayidx38 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs37, i32 0, i64 0
  %50 = load %struct.glyph*, %struct.glyph** %arrayidx38, align 8
  %51 = bitcast %struct.glyph* %50 to i8*
  %52 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %glyphs39 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %52, i32 0, i32 0
  %arrayidx40 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs39, i32 0, i64 0
  %53 = load %struct.glyph*, %struct.glyph** %arrayidx40, align 8
  %54 = bitcast %struct.glyph* %53 to i8*
  %55 = load i64, i64* %nbytes, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %51, i8* %54, i64 %55, i32 8, i1 false)
  %56 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %used41 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %56, i32 0, i32 1
  %arrayidx42 = getelementptr inbounds [4 x i16], [4 x i16]* %used41, i32 0, i64 0
  %57 = load i16, i16* %arrayidx42, align 2
  %58 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %used43 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %58, i32 0, i32 1
  %arrayidx44 = getelementptr inbounds [4 x i16], [4 x i16]* %used43, i32 0, i64 0
  store i16 %57, i16* %arrayidx44, align 2
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %59 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %used45 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %59, i32 0, i32 1
  %arrayidx46 = getelementptr inbounds [4 x i16], [4 x i16]* %used45, i32 0, i64 2
  %60 = load i16, i16* %arrayidx46, align 2
  %tobool47 = icmp ne i16 %60, 0
  br i1 %tobool47, label %if.then.48, label %if.end.64

if.then.48:                                       ; preds = %if.end
  %61 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %used49 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %61, i32 0, i32 1
  %arrayidx50 = getelementptr inbounds [4 x i16], [4 x i16]* %used49, i32 0, i64 2
  %62 = load i16, i16* %arrayidx50, align 2
  %conv51 = sext i16 %62 to i64
  %mul52 = mul i64 %conv51, 48
  store i64 %mul52, i64* %nbytes, align 8
  %63 = load i64, i64* %nbytes, align 8
  %call53 = call noalias i8* @xmalloc(i64 %63)
  %64 = bitcast i8* %call53 to %struct.glyph*
  %65 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %glyphs54 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %65, i32 0, i32 0
  %arrayidx55 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs54, i32 0, i64 2
  store %struct.glyph* %64, %struct.glyph** %arrayidx55, align 8
  %66 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %glyphs56 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %66, i32 0, i32 0
  %arrayidx57 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs56, i32 0, i64 2
  %67 = load %struct.glyph*, %struct.glyph** %arrayidx57, align 8
  %68 = bitcast %struct.glyph* %67 to i8*
  %69 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %glyphs58 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %69, i32 0, i32 0
  %arrayidx59 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs58, i32 0, i64 2
  %70 = load %struct.glyph*, %struct.glyph** %arrayidx59, align 8
  %71 = bitcast %struct.glyph* %70 to i8*
  %72 = load i64, i64* %nbytes, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %68, i8* %71, i64 %72, i32 8, i1 false)
  %73 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %used60 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %73, i32 0, i32 1
  %arrayidx61 = getelementptr inbounds [4 x i16], [4 x i16]* %used60, i32 0, i64 2
  %74 = load i16, i16* %arrayidx61, align 2
  %75 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %used62 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %75, i32 0, i32 1
  %arrayidx63 = getelementptr inbounds [4 x i16], [4 x i16]* %used62, i32 0, i64 2
  store i16 %74, i16* %arrayidx63, align 2
  br label %if.end.64

if.end.64:                                        ; preds = %if.then.48, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end.64
  %76 = load i32, i32* %i, align 4
  %inc = add nsw i32 %76, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %77 = load %struct.glyph_matrix*, %struct.glyph_matrix** %saved, align 8
  ret %struct.glyph_matrix* %77
}

; Function Attrs: nounwind uwtable
define internal void @adjust_glyph_matrix(%struct.window* %w, %struct.glyph_matrix* %matrix, i32 %x, i32 %y, i64 %dim.coerce) #0 {
entry:
  %dim = alloca %struct.dim, align 8
  %w.addr = alloca %struct.window*, align 8
  %matrix.addr = alloca %struct.glyph_matrix*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %new_rows = alloca i32, align 4
  %marginal_areas_changed_p = alloca i8, align 1
  %header_line_changed_p = alloca i8, align 1
  %header_line_p = alloca i8, align 1
  %left = alloca i32, align 4
  %right = alloca i32, align 4
  %window_width = alloca i32, align 4
  %window_height = alloca i32, align 4
  %old_alloc = alloca i32, align 4
  %row = alloca %struct.glyph_row*, align 8
  %row277 = alloca %struct.glyph_row*, align 8
  %end = alloca %struct.glyph_row*, align 8
  %0 = bitcast %struct.dim* %dim to i64*
  store i64 %dim.coerce, i64* %0, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store %struct.glyph_matrix* %matrix, %struct.glyph_matrix** %matrix.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i8 0, i8* %marginal_areas_changed_p, align 1
  store i8 0, i8* %header_line_changed_p, align 1
  store i8 0, i8* %header_line_p, align 1
  store i32 -1, i32* %left, align 4
  store i32 -1, i32* %right, align 4
  store i32 -1, i32* %window_width, align 4
  store i32 -1, i32* %window_height, align 4
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %tobool = icmp ne %struct.window* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.window*, %struct.window** %w.addr, align 8
  call void @window_box(%struct.window* %2, i32 -1, i32* null, i32* null, i32* %window_width, i32* %window_height)
  %3 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 10
  %4 = load i64, i64* %contents, align 8
  %call = call zeroext i1 @BUFFERP(i64 %4)
  br i1 %call, label %cond.true, label %cond.false.53

cond.true:                                        ; preds = %if.then
  %5 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 67
  %bf.load = load i16, i16* %mini, align 4
  %bf.clear = and i16 %bf.load, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %land.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.true
  %6 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p = getelementptr inbounds %struct.window, %struct.window* %6, i32 0, i32 67
  %bf.load1 = load i16, i16* %pseudo_window_p, align 4
  %bf.lshr = lshr i16 %bf.load1, 11
  %bf.clear2 = and i16 %bf.lshr, 1
  %bf.cast3 = trunc i16 %bf.clear2 to i1
  br i1 %bf.cast3, label %land.end, label %land.lhs.true.4

land.lhs.true.4:                                  ; preds = %land.lhs.true
  %7 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 1
  %8 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %8, 5
  %9 = inttoptr i64 %sub to i8*
  %10 = bitcast i8* %9 to %struct.frame*
  %wants_modeline = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 26
  %11 = bitcast i48* %wants_modeline to i64*
  %bf.load5 = load i64, i64* %11, align 8
  %bf.lshr6 = lshr i64 %bf.load5, 14
  %bf.clear7 = and i64 %bf.lshr6, 1
  %bf.cast8 = trunc i64 %bf.clear7 to i1
  br i1 %bf.cast8, label %land.lhs.true.9, label %land.end

land.lhs.true.9:                                  ; preds = %land.lhs.true.4
  %12 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents10 = getelementptr inbounds %struct.window, %struct.window* %12, i32 0, i32 10
  %13 = load i64, i64* %contents10, align 8
  %call11 = call %struct.buffer* @XBUFFER(i64 %13)
  %header_line_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call11, i32 0, i32 13
  %14 = load i64, i64* %header_line_format_, align 8
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %14, %call12
  br i1 %cmp, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true.9
  %15 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height = getelementptr inbounds %struct.window, %struct.window* %15, i32 0, i32 35
  %16 = load i32, i32* %pixel_height, align 4
  %17 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents13 = getelementptr inbounds %struct.window, %struct.window* %17, i32 0, i32 10
  %18 = load i64, i64* %contents13, align 8
  %call14 = call zeroext i1 @BUFFERP(i64 %18)
  br i1 %call14, label %cond.true.15, label %cond.false

cond.true.15:                                     ; preds = %land.rhs
  %19 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini16 = getelementptr inbounds %struct.window, %struct.window* %19, i32 0, i32 67
  %bf.load17 = load i16, i16* %mini16, align 4
  %bf.clear18 = and i16 %bf.load17, 1
  %bf.cast19 = trunc i16 %bf.clear18 to i1
  br i1 %bf.cast19, label %cond.false.48, label %land.lhs.true.20

land.lhs.true.20:                                 ; preds = %cond.true.15
  %20 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p21 = getelementptr inbounds %struct.window, %struct.window* %20, i32 0, i32 67
  %bf.load22 = load i16, i16* %pseudo_window_p21, align 4
  %bf.lshr23 = lshr i16 %bf.load22, 11
  %bf.clear24 = and i16 %bf.lshr23, 1
  %bf.cast25 = trunc i16 %bf.clear24 to i1
  br i1 %bf.cast25, label %cond.false.48, label %land.lhs.true.26

land.lhs.true.26:                                 ; preds = %land.lhs.true.20
  %21 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame27 = getelementptr inbounds %struct.window, %struct.window* %21, i32 0, i32 1
  %22 = load i64, i64* %frame27, align 8
  %sub28 = sub nsw i64 %22, 5
  %23 = inttoptr i64 %sub28 to i8*
  %24 = bitcast i8* %23 to %struct.frame*
  %wants_modeline29 = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 26
  %25 = bitcast i48* %wants_modeline29 to i64*
  %bf.load30 = load i64, i64* %25, align 8
  %bf.lshr31 = lshr i64 %bf.load30, 14
  %bf.clear32 = and i64 %bf.lshr31, 1
  %bf.cast33 = trunc i64 %bf.clear32 to i1
  br i1 %bf.cast33, label %land.lhs.true.34, label %cond.false.48

land.lhs.true.34:                                 ; preds = %land.lhs.true.26
  %26 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents35 = getelementptr inbounds %struct.window, %struct.window* %26, i32 0, i32 10
  %27 = load i64, i64* %contents35, align 8
  %call36 = call %struct.buffer* @XBUFFER(i64 %27)
  %mode_line_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call36, i32 0, i32 12
  %28 = load i64, i64* %mode_line_format_, align 8
  %call37 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp38 = icmp eq i64 %28, %call37
  br i1 %cmp38, label %cond.false.48, label %land.lhs.true.39

land.lhs.true.39:                                 ; preds = %land.lhs.true.34
  %29 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height40 = getelementptr inbounds %struct.window, %struct.window* %29, i32 0, i32 35
  %30 = load i32, i32* %pixel_height40, align 4
  %31 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame41 = getelementptr inbounds %struct.window, %struct.window* %31, i32 0, i32 1
  %32 = load i64, i64* %frame41, align 8
  %sub42 = sub nsw i64 %32, 5
  %33 = inttoptr i64 %sub42 to i8*
  %34 = bitcast i8* %33 to %struct.frame*
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %34, i32 0, i32 60
  %35 = load i32, i32* %line_height, align 4
  %cmp43 = icmp sgt i32 %30, %35
  br i1 %cmp43, label %cond.true.44, label %cond.false.48

cond.false:                                       ; preds = %land.rhs
  br i1 false, label %cond.true.44, label %cond.false.48

cond.true.44:                                     ; preds = %cond.false, %land.lhs.true.39
  %36 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame45 = getelementptr inbounds %struct.window, %struct.window* %36, i32 0, i32 1
  %37 = load i64, i64* %frame45, align 8
  %sub46 = sub nsw i64 %37, 5
  %38 = inttoptr i64 %sub46 to i8*
  %39 = bitcast i8* %38 to %struct.frame*
  %line_height47 = getelementptr inbounds %struct.frame, %struct.frame* %39, i32 0, i32 60
  %40 = load i32, i32* %line_height47, align 4
  %mul = mul nsw i32 2, %40
  br label %cond.end

cond.false.48:                                    ; preds = %cond.false, %land.lhs.true.39, %land.lhs.true.34, %land.lhs.true.26, %land.lhs.true.20, %cond.true.15
  %41 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame49 = getelementptr inbounds %struct.window, %struct.window* %41, i32 0, i32 1
  %42 = load i64, i64* %frame49, align 8
  %sub50 = sub nsw i64 %42, 5
  %43 = inttoptr i64 %sub50 to i8*
  %44 = bitcast i8* %43 to %struct.frame*
  %line_height51 = getelementptr inbounds %struct.frame, %struct.frame* %44, i32 0, i32 60
  %45 = load i32, i32* %line_height51, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false.48, %cond.true.44
  %cond = phi i32 [ %mul, %cond.true.44 ], [ %45, %cond.false.48 ]
  %cmp52 = icmp sgt i32 %16, %cond
  br label %land.end

land.end:                                         ; preds = %cond.end, %land.lhs.true.9, %land.lhs.true.4, %land.lhs.true, %cond.true
  %46 = phi i1 [ false, %land.lhs.true.9 ], [ false, %land.lhs.true.4 ], [ false, %land.lhs.true ], [ false, %cond.true ], [ %cmp52, %cond.end ]
  %land.ext = zext i1 %46 to i32
  br label %cond.end.54

cond.false.53:                                    ; preds = %if.then
  br label %cond.end.54

cond.end.54:                                      ; preds = %cond.false.53, %land.end
  %cond55 = phi i32 [ %land.ext, %land.end ], [ 0, %cond.false.53 ]
  %tobool56 = icmp ne i32 %cond55, 0
  %frombool = zext i1 %tobool56 to i8
  store i8 %frombool, i8* %header_line_p, align 1
  %47 = load i8, i8* %header_line_p, align 1
  %tobool57 = trunc i8 %47 to i1
  %conv = zext i1 %tobool57 to i32
  %48 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %header_line_p58 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %48, i32 0, i32 15
  %bf.load59 = load i8, i8* %header_line_p58, align 8
  %bf.lshr60 = lshr i8 %bf.load59, 1
  %bf.clear61 = and i8 %bf.lshr60, 1
  %bf.cast62 = trunc i8 %bf.clear61 to i1
  %conv63 = zext i1 %bf.cast62 to i32
  %cmp64 = icmp ne i32 %conv, %conv63
  %frombool66 = zext i1 %cmp64 to i8
  store i8 %frombool66, i8* %header_line_changed_p, align 1
  br label %if.end

if.end:                                           ; preds = %cond.end.54, %entry
  %49 = load i8, i8* %header_line_p, align 1
  %tobool67 = trunc i8 %49 to i1
  %50 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %header_line_p68 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %50, i32 0, i32 15
  %51 = zext i1 %tobool67 to i8
  %bf.load69 = load i8, i8* %header_line_p68, align 8
  %bf.shl = shl i8 %51, 1
  %bf.clear70 = and i8 %bf.load69, -3
  %bf.set = or i8 %bf.clear70, %bf.shl
  store i8 %bf.set, i8* %header_line_p68, align 8
  %tobool71 = trunc i8 %51 to i1
  %52 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %pool = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %52, i32 0, i32 0
  %53 = load %struct.glyph_pool*, %struct.glyph_pool** %pool, align 8
  %cmp72 = icmp eq %struct.glyph_pool* %53, null
  br i1 %cmp72, label %if.then.74, label %if.end.112

if.then.74:                                       ; preds = %if.end
  %54 = load %struct.window*, %struct.window** %w.addr, align 8
  %width = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 0
  %55 = load i32, i32* %width, align 4
  %56 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_margin_cols = getelementptr inbounds %struct.window, %struct.window* %56, i32 0, i32 59
  %57 = load i32, i32* %left_margin_cols, align 4
  %call75 = call i32 @margin_glyphs_to_reserve(%struct.window* %54, i32 %55, i32 %57)
  store i32 %call75, i32* %left, align 4
  %58 = load %struct.window*, %struct.window** %w.addr, align 8
  %width76 = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 0
  %59 = load i32, i32* %width76, align 4
  %60 = load %struct.window*, %struct.window** %w.addr, align 8
  %right_margin_cols = getelementptr inbounds %struct.window, %struct.window* %60, i32 0, i32 60
  %61 = load i32, i32* %right_margin_cols, align 4
  %call77 = call i32 @margin_glyphs_to_reserve(%struct.window* %58, i32 %59, i32 %61)
  store i32 %call77, i32* %right, align 4
  %62 = load i32, i32* %left, align 4
  %63 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %left_margin_glyphs = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %63, i32 0, i32 13
  %64 = load i32, i32* %left_margin_glyphs, align 4
  %cmp78 = icmp ne i32 %62, %64
  br i1 %cmp78, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then.74
  %65 = load i32, i32* %right, align 4
  %66 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %right_margin_glyphs = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %66, i32 0, i32 14
  %67 = load i32, i32* %right_margin_glyphs, align 4
  %cmp80 = icmp ne i32 %65, %67
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then.74
  %68 = phi i1 [ true, %if.then.74 ], [ %cmp80, %lor.rhs ]
  %frombool82 = zext i1 %68 to i8
  store i8 %frombool82, i8* %marginal_areas_changed_p, align 1
  %69 = load i8, i8* %marginal_areas_changed_p, align 1
  %tobool83 = trunc i8 %69 to i1
  br i1 %tobool83, label %if.end.111, label %land.lhs.true.84

land.lhs.true.84:                                 ; preds = %lor.end
  %70 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame85 = getelementptr inbounds %struct.window, %struct.window* %70, i32 0, i32 1
  %71 = load i64, i64* %frame85, align 8
  %sub86 = sub nsw i64 %71, 5
  %72 = inttoptr i64 %sub86 to i8*
  %73 = bitcast i8* %72 to %struct.frame*
  %fonts_changed = getelementptr inbounds %struct.frame, %struct.frame* %73, i32 0, i32 26
  %74 = bitcast i48* %fonts_changed to i64*
  %bf.load87 = load i64, i64* %74, align 8
  %bf.lshr88 = lshr i64 %bf.load87, 6
  %bf.clear89 = and i64 %bf.lshr88, 1
  %bf.cast90 = trunc i64 %bf.clear89 to i1
  br i1 %bf.cast90, label %if.end.111, label %land.lhs.true.91

land.lhs.true.91:                                 ; preds = %land.lhs.true.84
  %75 = load i8, i8* %header_line_changed_p, align 1
  %tobool92 = trunc i8 %75 to i1
  br i1 %tobool92, label %if.end.111, label %land.lhs.true.93

land.lhs.true.93:                                 ; preds = %land.lhs.true.91
  %76 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %window_pixel_left = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %76, i32 0, i32 8
  %77 = load i32, i32* %window_pixel_left, align 4
  %78 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left = getelementptr inbounds %struct.window, %struct.window* %78, i32 0, i32 30
  %79 = load i32, i32* %pixel_left, align 4
  %cmp94 = icmp eq i32 %77, %79
  br i1 %cmp94, label %land.lhs.true.96, label %if.end.111

land.lhs.true.96:                                 ; preds = %land.lhs.true.93
  %80 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %window_pixel_top = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %80, i32 0, i32 9
  %81 = load i32, i32* %window_pixel_top, align 4
  %82 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_top = getelementptr inbounds %struct.window, %struct.window* %82, i32 0, i32 31
  %83 = load i32, i32* %pixel_top, align 4
  %cmp97 = icmp eq i32 %81, %83
  br i1 %cmp97, label %land.lhs.true.99, label %if.end.111

land.lhs.true.99:                                 ; preds = %land.lhs.true.96
  %84 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %window_height100 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %84, i32 0, i32 10
  %85 = load i32, i32* %window_height100, align 4
  %86 = load i32, i32* %window_height, align 4
  %cmp101 = icmp eq i32 %85, %86
  br i1 %cmp101, label %land.lhs.true.103, label %if.end.111

land.lhs.true.103:                                ; preds = %land.lhs.true.99
  %87 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %window_vscroll = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %87, i32 0, i32 12
  %88 = load i32, i32* %window_vscroll, align 4
  %89 = load %struct.window*, %struct.window** %w.addr, align 8
  %vscroll = getelementptr inbounds %struct.window, %struct.window* %89, i32 0, i32 68
  %90 = load i32, i32* %vscroll, align 4
  %cmp104 = icmp eq i32 %88, %90
  br i1 %cmp104, label %land.lhs.true.106, label %if.end.111

land.lhs.true.106:                                ; preds = %land.lhs.true.103
  %91 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %window_width107 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %91, i32 0, i32 11
  %92 = load i32, i32* %window_width107, align 4
  %93 = load i32, i32* %window_width, align 4
  %cmp108 = icmp eq i32 %92, %93
  br i1 %cmp108, label %if.then.110, label %if.end.111

if.then.110:                                      ; preds = %land.lhs.true.106
  br label %if.end.579

if.end.111:                                       ; preds = %land.lhs.true.106, %land.lhs.true.103, %land.lhs.true.99, %land.lhs.true.96, %land.lhs.true.93, %land.lhs.true.91, %land.lhs.true.84, %lor.end
  br label %if.end.112

if.end.112:                                       ; preds = %if.end.111, %if.end
  %94 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows_allocated = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %94, i32 0, i32 2
  %95 = load i64, i64* %rows_allocated, align 8
  %height = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 1
  %96 = load i32, i32* %height, align 4
  %conv113 = sext i32 %96 to i64
  %cmp114 = icmp slt i64 %95, %conv113
  br i1 %cmp114, label %if.then.116, label %if.else

if.then.116:                                      ; preds = %if.end.112
  %97 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows_allocated117 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %97, i32 0, i32 2
  %98 = load i64, i64* %rows_allocated117, align 8
  %conv118 = trunc i64 %98 to i32
  store i32 %conv118, i32* %old_alloc, align 4
  %height119 = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 1
  %99 = load i32, i32* %height119, align 4
  %conv120 = sext i32 %99 to i64
  %100 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows_allocated121 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %100, i32 0, i32 2
  %101 = load i64, i64* %rows_allocated121, align 8
  %sub122 = sub nsw i64 %conv120, %101
  %conv123 = trunc i64 %sub122 to i32
  store i32 %conv123, i32* %new_rows, align 4
  %102 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %102, i32 0, i32 1
  %103 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %104 = bitcast %struct.glyph_row* %103 to i8*
  %105 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows_allocated124 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %105, i32 0, i32 2
  %106 = load i32, i32* %new_rows, align 4
  %conv125 = sext i32 %106 to i64
  %call126 = call i8* @xpalloc(i8* %104, i64* %rows_allocated124, i64 %conv125, i64 2147483647, i64 256)
  %107 = bitcast i8* %call126 to %struct.glyph_row*
  %108 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows127 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %108, i32 0, i32 1
  store %struct.glyph_row* %107, %struct.glyph_row** %rows127, align 8
  %109 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows128 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %109, i32 0, i32 1
  %110 = load %struct.glyph_row*, %struct.glyph_row** %rows128, align 8
  %111 = load i32, i32* %old_alloc, align 4
  %idx.ext = sext i32 %111 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %110, i64 %idx.ext
  %112 = bitcast %struct.glyph_row* %add.ptr to i8*
  %113 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows_allocated129 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %113, i32 0, i32 2
  %114 = load i64, i64* %rows_allocated129, align 8
  %115 = load i32, i32* %old_alloc, align 4
  %conv130 = sext i32 %115 to i64
  %sub131 = sub nsw i64 %114, %conv130
  %mul132 = mul i64 %sub131, 256
  call void @llvm.memset.p0i8.i64(i8* %112, i8 0, i64 %mul132, i32 8, i1 false)
  br label %if.end.133

if.else:                                          ; preds = %if.end.112
  store i32 0, i32* %new_rows, align 4
  br label %if.end.133

if.end.133:                                       ; preds = %if.else, %if.then.116
  %116 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %pool134 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %116, i32 0, i32 0
  %117 = load %struct.glyph_pool*, %struct.glyph_pool** %pool134, align 8
  %tobool135 = icmp ne %struct.glyph_pool* %117, null
  br i1 %tobool135, label %if.then.136, label %if.else.264

if.then.136:                                      ; preds = %if.end.133
  %118 = load %struct.window*, %struct.window** %w.addr, align 8
  %tobool137 = icmp ne %struct.window* %118, null
  br i1 %tobool137, label %if.then.138, label %if.else.145

if.then.138:                                      ; preds = %if.then.136
  %119 = load %struct.window*, %struct.window** %w.addr, align 8
  %width139 = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 0
  %120 = load i32, i32* %width139, align 4
  %121 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_margin_cols140 = getelementptr inbounds %struct.window, %struct.window* %121, i32 0, i32 59
  %122 = load i32, i32* %left_margin_cols140, align 4
  %call141 = call i32 @margin_glyphs_to_reserve(%struct.window* %119, i32 %120, i32 %122)
  store i32 %call141, i32* %left, align 4
  %123 = load %struct.window*, %struct.window** %w.addr, align 8
  %width142 = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 0
  %124 = load i32, i32* %width142, align 4
  %125 = load %struct.window*, %struct.window** %w.addr, align 8
  %right_margin_cols143 = getelementptr inbounds %struct.window, %struct.window* %125, i32 0, i32 60
  %126 = load i32, i32* %right_margin_cols143, align 4
  %call144 = call i32 @margin_glyphs_to_reserve(%struct.window* %123, i32 %124, i32 %126)
  store i32 %call144, i32* %right, align 4
  br label %if.end.146

if.else.145:                                      ; preds = %if.then.136
  store i32 0, i32* %right, align 4
  store i32 0, i32* %left, align 4
  br label %if.end.146

if.end.146:                                       ; preds = %if.else.145, %if.then.138
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.146
  %127 = load i32, i32* %i, align 4
  %height147 = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 1
  %128 = load i32, i32* %height147, align 4
  %cmp148 = icmp slt i32 %127, %128
  br i1 %cmp148, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %129 = load i32, i32* %i, align 4
  %idxprom = sext i32 %129 to i64
  %130 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows150 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %130, i32 0, i32 1
  %131 = load %struct.glyph_row*, %struct.glyph_row** %rows150, align 8
  %arrayidx = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %131, i64 %idxprom
  store %struct.glyph_row* %arrayidx, %struct.glyph_row** %row, align 8
  %132 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %pool151 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %132, i32 0, i32 0
  %133 = load %struct.glyph_pool*, %struct.glyph_pool** %pool151, align 8
  %glyphs = getelementptr inbounds %struct.glyph_pool, %struct.glyph_pool* %133, i32 0, i32 0
  %134 = load %struct.glyph*, %struct.glyph** %glyphs, align 8
  %135 = load i32, i32* %y.addr, align 4
  %136 = load i32, i32* %i, align 4
  %add = add nsw i32 %135, %136
  %137 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %pool152 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %137, i32 0, i32 0
  %138 = load %struct.glyph_pool*, %struct.glyph_pool** %pool152, align 8
  %ncolumns = getelementptr inbounds %struct.glyph_pool, %struct.glyph_pool* %138, i32 0, i32 3
  %139 = load i32, i32* %ncolumns, align 4
  %mul153 = mul nsw i32 %add, %139
  %idx.ext154 = sext i32 %mul153 to i64
  %add.ptr155 = getelementptr inbounds %struct.glyph, %struct.glyph* %134, i64 %idx.ext154
  %140 = load i32, i32* %x.addr, align 4
  %idx.ext156 = sext i32 %140 to i64
  %add.ptr157 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr155, i64 %idx.ext156
  %141 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %glyphs158 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %141, i32 0, i32 0
  %arrayidx159 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs158, i32 0, i64 0
  store %struct.glyph* %add.ptr157, %struct.glyph** %arrayidx159, align 8
  %142 = load %struct.window*, %struct.window** %w.addr, align 8
  %cmp160 = icmp eq %struct.window* %142, null
  br i1 %cmp160, label %if.then.219, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %143 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %144 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows162 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %144, i32 0, i32 1
  %145 = load %struct.glyph_row*, %struct.glyph_row** %rows162, align 8
  %height163 = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 1
  %146 = load i32, i32* %height163, align 4
  %idx.ext164 = sext i32 %146 to i64
  %add.ptr165 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %145, i64 %idx.ext164
  %add.ptr166 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr165, i64 -1
  %cmp167 = icmp eq %struct.glyph_row* %143, %add.ptr166
  br i1 %cmp167, label %land.lhs.true.169, label %lor.lhs.false.208

land.lhs.true.169:                                ; preds = %lor.lhs.false
  %147 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents170 = getelementptr inbounds %struct.window, %struct.window* %147, i32 0, i32 10
  %148 = load i64, i64* %contents170, align 8
  %call171 = call zeroext i1 @BUFFERP(i64 %148)
  br i1 %call171, label %cond.true.173, label %cond.false.207

cond.true.173:                                    ; preds = %land.lhs.true.169
  %149 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini174 = getelementptr inbounds %struct.window, %struct.window* %149, i32 0, i32 67
  %bf.load175 = load i16, i16* %mini174, align 4
  %bf.clear176 = and i16 %bf.load175, 1
  %bf.cast177 = trunc i16 %bf.clear176 to i1
  br i1 %bf.cast177, label %lor.lhs.false.208, label %land.lhs.true.178

land.lhs.true.178:                                ; preds = %cond.true.173
  %150 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p179 = getelementptr inbounds %struct.window, %struct.window* %150, i32 0, i32 67
  %bf.load180 = load i16, i16* %pseudo_window_p179, align 4
  %bf.lshr181 = lshr i16 %bf.load180, 11
  %bf.clear182 = and i16 %bf.lshr181, 1
  %bf.cast183 = trunc i16 %bf.clear182 to i1
  br i1 %bf.cast183, label %lor.lhs.false.208, label %land.lhs.true.184

land.lhs.true.184:                                ; preds = %land.lhs.true.178
  %151 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame185 = getelementptr inbounds %struct.window, %struct.window* %151, i32 0, i32 1
  %152 = load i64, i64* %frame185, align 8
  %sub186 = sub nsw i64 %152, 5
  %153 = inttoptr i64 %sub186 to i8*
  %154 = bitcast i8* %153 to %struct.frame*
  %wants_modeline187 = getelementptr inbounds %struct.frame, %struct.frame* %154, i32 0, i32 26
  %155 = bitcast i48* %wants_modeline187 to i64*
  %bf.load188 = load i64, i64* %155, align 8
  %bf.lshr189 = lshr i64 %bf.load188, 14
  %bf.clear190 = and i64 %bf.lshr189, 1
  %bf.cast191 = trunc i64 %bf.clear190 to i1
  br i1 %bf.cast191, label %land.lhs.true.193, label %lor.lhs.false.208

land.lhs.true.193:                                ; preds = %land.lhs.true.184
  %156 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents194 = getelementptr inbounds %struct.window, %struct.window* %156, i32 0, i32 10
  %157 = load i64, i64* %contents194, align 8
  %call195 = call %struct.buffer* @XBUFFER(i64 %157)
  %mode_line_format_196 = getelementptr inbounds %struct.buffer, %struct.buffer* %call195, i32 0, i32 12
  %158 = load i64, i64* %mode_line_format_196, align 8
  %call197 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp198 = icmp eq i64 %158, %call197
  br i1 %cmp198, label %lor.lhs.false.208, label %land.lhs.true.200

land.lhs.true.200:                                ; preds = %land.lhs.true.193
  %159 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height201 = getelementptr inbounds %struct.window, %struct.window* %159, i32 0, i32 35
  %160 = load i32, i32* %pixel_height201, align 4
  %161 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame202 = getelementptr inbounds %struct.window, %struct.window* %161, i32 0, i32 1
  %162 = load i64, i64* %frame202, align 8
  %sub203 = sub nsw i64 %162, 5
  %163 = inttoptr i64 %sub203 to i8*
  %164 = bitcast i8* %163 to %struct.frame*
  %line_height204 = getelementptr inbounds %struct.frame, %struct.frame* %164, i32 0, i32 60
  %165 = load i32, i32* %line_height204, align 4
  %cmp205 = icmp sgt i32 %160, %165
  br i1 %cmp205, label %if.then.219, label %lor.lhs.false.208

cond.false.207:                                   ; preds = %land.lhs.true.169
  br i1 false, label %if.then.219, label %lor.lhs.false.208

lor.lhs.false.208:                                ; preds = %cond.false.207, %land.lhs.true.200, %land.lhs.true.193, %land.lhs.true.184, %land.lhs.true.178, %cond.true.173, %lor.lhs.false
  %166 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %167 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows209 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %167, i32 0, i32 1
  %168 = load %struct.glyph_row*, %struct.glyph_row** %rows209, align 8
  %cmp210 = icmp eq %struct.glyph_row* %166, %168
  br i1 %cmp210, label %land.lhs.true.212, label %if.else.235

land.lhs.true.212:                                ; preds = %lor.lhs.false.208
  %169 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %header_line_p213 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %169, i32 0, i32 15
  %bf.load214 = load i8, i8* %header_line_p213, align 8
  %bf.lshr215 = lshr i8 %bf.load214, 1
  %bf.clear216 = and i8 %bf.lshr215, 1
  %bf.cast217 = trunc i8 %bf.clear216 to i1
  br i1 %bf.cast217, label %if.then.219, label %if.else.235

if.then.219:                                      ; preds = %land.lhs.true.212, %cond.false.207, %land.lhs.true.200, %for.body
  %170 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %glyphs220 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %170, i32 0, i32 0
  %arrayidx221 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs220, i32 0, i64 0
  %171 = load %struct.glyph*, %struct.glyph** %arrayidx221, align 8
  %172 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %glyphs222 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %172, i32 0, i32 0
  %arrayidx223 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs222, i32 0, i64 1
  store %struct.glyph* %171, %struct.glyph** %arrayidx223, align 8
  %173 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %glyphs224 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %173, i32 0, i32 0
  %arrayidx225 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs224, i32 0, i64 1
  %174 = load %struct.glyph*, %struct.glyph** %arrayidx225, align 8
  %width226 = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 0
  %175 = load i32, i32* %width226, align 4
  %idx.ext227 = sext i32 %175 to i64
  %add.ptr228 = getelementptr inbounds %struct.glyph, %struct.glyph* %174, i64 %idx.ext227
  %176 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %glyphs229 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %176, i32 0, i32 0
  %arrayidx230 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs229, i32 0, i64 2
  store %struct.glyph* %add.ptr228, %struct.glyph** %arrayidx230, align 8
  %177 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %glyphs231 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %177, i32 0, i32 0
  %arrayidx232 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs231, i32 0, i64 2
  %178 = load %struct.glyph*, %struct.glyph** %arrayidx232, align 8
  %179 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %glyphs233 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %179, i32 0, i32 0
  %arrayidx234 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs233, i32 0, i64 3
  store %struct.glyph* %178, %struct.glyph** %arrayidx234, align 8
  br label %if.end.261

if.else.235:                                      ; preds = %land.lhs.true.212, %lor.lhs.false.208
  %180 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %glyphs236 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %180, i32 0, i32 0
  %arrayidx237 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs236, i32 0, i64 0
  %181 = load %struct.glyph*, %struct.glyph** %arrayidx237, align 8
  %182 = load i32, i32* %left, align 4
  %idx.ext238 = sext i32 %182 to i64
  %add.ptr239 = getelementptr inbounds %struct.glyph, %struct.glyph* %181, i64 %idx.ext238
  %183 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %glyphs240 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %183, i32 0, i32 0
  %arrayidx241 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs240, i32 0, i64 1
  store %struct.glyph* %add.ptr239, %struct.glyph** %arrayidx241, align 8
  %184 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %glyphs242 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %184, i32 0, i32 0
  %arrayidx243 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs242, i32 0, i64 1
  %185 = load %struct.glyph*, %struct.glyph** %arrayidx243, align 8
  %width244 = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 0
  %186 = load i32, i32* %width244, align 4
  %idx.ext245 = sext i32 %186 to i64
  %add.ptr246 = getelementptr inbounds %struct.glyph, %struct.glyph* %185, i64 %idx.ext245
  %187 = load i32, i32* %left, align 4
  %idx.ext247 = sext i32 %187 to i64
  %idx.neg = sub i64 0, %idx.ext247
  %add.ptr248 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr246, i64 %idx.neg
  %188 = load i32, i32* %right, align 4
  %idx.ext249 = sext i32 %188 to i64
  %idx.neg250 = sub i64 0, %idx.ext249
  %add.ptr251 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr248, i64 %idx.neg250
  %189 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %glyphs252 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %189, i32 0, i32 0
  %arrayidx253 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs252, i32 0, i64 2
  store %struct.glyph* %add.ptr251, %struct.glyph** %arrayidx253, align 8
  %190 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %glyphs254 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %190, i32 0, i32 0
  %arrayidx255 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs254, i32 0, i64 0
  %191 = load %struct.glyph*, %struct.glyph** %arrayidx255, align 8
  %width256 = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 0
  %192 = load i32, i32* %width256, align 4
  %idx.ext257 = sext i32 %192 to i64
  %add.ptr258 = getelementptr inbounds %struct.glyph, %struct.glyph* %191, i64 %idx.ext257
  %193 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %glyphs259 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %193, i32 0, i32 0
  %arrayidx260 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs259, i32 0, i64 3
  store %struct.glyph* %add.ptr258, %struct.glyph** %arrayidx260, align 8
  br label %if.end.261

if.end.261:                                       ; preds = %if.else.235, %if.then.219
  br label %for.inc

for.inc:                                          ; preds = %if.end.261
  %194 = load i32, i32* %i, align 4
  %inc = add nsw i32 %194, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %195 = load i32, i32* %left, align 4
  %196 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %left_margin_glyphs262 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %196, i32 0, i32 13
  store i32 %195, i32* %left_margin_glyphs262, align 4
  %197 = load i32, i32* %right, align 4
  %198 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %right_margin_glyphs263 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %198, i32 0, i32 14
  store i32 %197, i32* %right_margin_glyphs263, align 4
  br label %if.end.396

if.else.264:                                      ; preds = %if.end.133
  %width265 = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 0
  %199 = load i32, i32* %width265, align 4
  %200 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %matrix_w = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %200, i32 0, i32 6
  %201 = load i32, i32* %matrix_w, align 4
  %cmp266 = icmp sgt i32 %199, %201
  br i1 %cmp266, label %if.then.276, label %lor.lhs.false.268

lor.lhs.false.268:                                ; preds = %if.else.264
  %202 = load i32, i32* %new_rows, align 4
  %tobool269 = icmp ne i32 %202, 0
  br i1 %tobool269, label %if.then.276, label %lor.lhs.false.270

lor.lhs.false.270:                                ; preds = %lor.lhs.false.268
  %203 = load i8, i8* %header_line_changed_p, align 1
  %tobool271 = trunc i8 %203 to i1
  br i1 %tobool271, label %if.then.276, label %lor.lhs.false.273

lor.lhs.false.273:                                ; preds = %lor.lhs.false.270
  %204 = load i8, i8* %marginal_areas_changed_p, align 1
  %tobool274 = trunc i8 %204 to i1
  br i1 %tobool274, label %if.then.276, label %if.end.393

if.then.276:                                      ; preds = %lor.lhs.false.273, %lor.lhs.false.270, %lor.lhs.false.268, %if.else.264
  %205 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows278 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %205, i32 0, i32 1
  %206 = load %struct.glyph_row*, %struct.glyph_row** %rows278, align 8
  store %struct.glyph_row* %206, %struct.glyph_row** %row277, align 8
  %207 = load %struct.glyph_row*, %struct.glyph_row** %row277, align 8
  %208 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows_allocated279 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %208, i32 0, i32 2
  %209 = load i64, i64* %rows_allocated279, align 8
  %add.ptr280 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %207, i64 %209
  store %struct.glyph_row* %add.ptr280, %struct.glyph_row** %end, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.392, %if.then.276
  %210 = load %struct.glyph_row*, %struct.glyph_row** %row277, align 8
  %211 = load %struct.glyph_row*, %struct.glyph_row** %end, align 8
  %cmp281 = icmp ult %struct.glyph_row* %210, %211
  br i1 %cmp281, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %212 = load %struct.glyph_row*, %struct.glyph_row** %row277, align 8
  %glyphs283 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %212, i32 0, i32 0
  %arrayidx284 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs283, i32 0, i64 0
  %213 = load %struct.glyph*, %struct.glyph** %arrayidx284, align 8
  %214 = bitcast %struct.glyph* %213 to i8*
  %width285 = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 0
  %215 = load i32, i32* %width285, align 4
  %conv286 = sext i32 %215 to i64
  %call287 = call i8* @xnrealloc(i8* %214, i64 %conv286, i64 48)
  %216 = bitcast i8* %call287 to %struct.glyph*
  %217 = load %struct.glyph_row*, %struct.glyph_row** %row277, align 8
  %glyphs288 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %217, i32 0, i32 0
  %arrayidx289 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs288, i32 0, i64 0
  store %struct.glyph* %216, %struct.glyph** %arrayidx289, align 8
  %218 = load %struct.glyph_row*, %struct.glyph_row** %row277, align 8
  %219 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows290 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %219, i32 0, i32 1
  %220 = load %struct.glyph_row*, %struct.glyph_row** %rows290, align 8
  %height291 = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 1
  %221 = load i32, i32* %height291, align 4
  %idx.ext292 = sext i32 %221 to i64
  %add.ptr293 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %220, i64 %idx.ext292
  %add.ptr294 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr293, i64 -1
  %cmp295 = icmp eq %struct.glyph_row* %218, %add.ptr294
  br i1 %cmp295, label %land.lhs.true.297, label %lor.lhs.false.338

land.lhs.true.297:                                ; preds = %while.body
  %222 = load %struct.window*, %struct.window** %w.addr, align 8
  %tobool298 = icmp ne %struct.window* %222, null
  br i1 %tobool298, label %land.lhs.true.299, label %if.then.349

land.lhs.true.299:                                ; preds = %land.lhs.true.297
  %223 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents300 = getelementptr inbounds %struct.window, %struct.window* %223, i32 0, i32 10
  %224 = load i64, i64* %contents300, align 8
  %call301 = call zeroext i1 @BUFFERP(i64 %224)
  br i1 %call301, label %cond.true.303, label %cond.false.337

cond.true.303:                                    ; preds = %land.lhs.true.299
  %225 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini304 = getelementptr inbounds %struct.window, %struct.window* %225, i32 0, i32 67
  %bf.load305 = load i16, i16* %mini304, align 4
  %bf.clear306 = and i16 %bf.load305, 1
  %bf.cast307 = trunc i16 %bf.clear306 to i1
  br i1 %bf.cast307, label %if.then.349, label %land.lhs.true.308

land.lhs.true.308:                                ; preds = %cond.true.303
  %226 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p309 = getelementptr inbounds %struct.window, %struct.window* %226, i32 0, i32 67
  %bf.load310 = load i16, i16* %pseudo_window_p309, align 4
  %bf.lshr311 = lshr i16 %bf.load310, 11
  %bf.clear312 = and i16 %bf.lshr311, 1
  %bf.cast313 = trunc i16 %bf.clear312 to i1
  br i1 %bf.cast313, label %if.then.349, label %land.lhs.true.314

land.lhs.true.314:                                ; preds = %land.lhs.true.308
  %227 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame315 = getelementptr inbounds %struct.window, %struct.window* %227, i32 0, i32 1
  %228 = load i64, i64* %frame315, align 8
  %sub316 = sub nsw i64 %228, 5
  %229 = inttoptr i64 %sub316 to i8*
  %230 = bitcast i8* %229 to %struct.frame*
  %wants_modeline317 = getelementptr inbounds %struct.frame, %struct.frame* %230, i32 0, i32 26
  %231 = bitcast i48* %wants_modeline317 to i64*
  %bf.load318 = load i64, i64* %231, align 8
  %bf.lshr319 = lshr i64 %bf.load318, 14
  %bf.clear320 = and i64 %bf.lshr319, 1
  %bf.cast321 = trunc i64 %bf.clear320 to i1
  br i1 %bf.cast321, label %land.lhs.true.323, label %if.then.349

land.lhs.true.323:                                ; preds = %land.lhs.true.314
  %232 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents324 = getelementptr inbounds %struct.window, %struct.window* %232, i32 0, i32 10
  %233 = load i64, i64* %contents324, align 8
  %call325 = call %struct.buffer* @XBUFFER(i64 %233)
  %mode_line_format_326 = getelementptr inbounds %struct.buffer, %struct.buffer* %call325, i32 0, i32 12
  %234 = load i64, i64* %mode_line_format_326, align 8
  %call327 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp328 = icmp eq i64 %234, %call327
  br i1 %cmp328, label %if.then.349, label %land.lhs.true.330

land.lhs.true.330:                                ; preds = %land.lhs.true.323
  %235 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height331 = getelementptr inbounds %struct.window, %struct.window* %235, i32 0, i32 35
  %236 = load i32, i32* %pixel_height331, align 4
  %237 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame332 = getelementptr inbounds %struct.window, %struct.window* %237, i32 0, i32 1
  %238 = load i64, i64* %frame332, align 8
  %sub333 = sub nsw i64 %238, 5
  %239 = inttoptr i64 %sub333 to i8*
  %240 = bitcast i8* %239 to %struct.frame*
  %line_height334 = getelementptr inbounds %struct.frame, %struct.frame* %240, i32 0, i32 60
  %241 = load i32, i32* %line_height334, align 4
  %cmp335 = icmp sgt i32 %236, %241
  br i1 %cmp335, label %lor.lhs.false.338, label %if.then.349

cond.false.337:                                   ; preds = %land.lhs.true.299
  br i1 false, label %lor.lhs.false.338, label %if.then.349

lor.lhs.false.338:                                ; preds = %cond.false.337, %land.lhs.true.330, %while.body
  %242 = load %struct.glyph_row*, %struct.glyph_row** %row277, align 8
  %243 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows339 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %243, i32 0, i32 1
  %244 = load %struct.glyph_row*, %struct.glyph_row** %rows339, align 8
  %cmp340 = icmp eq %struct.glyph_row* %242, %244
  br i1 %cmp340, label %land.lhs.true.342, label %if.else.365

land.lhs.true.342:                                ; preds = %lor.lhs.false.338
  %245 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %header_line_p343 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %245, i32 0, i32 15
  %bf.load344 = load i8, i8* %header_line_p343, align 8
  %bf.lshr345 = lshr i8 %bf.load344, 1
  %bf.clear346 = and i8 %bf.lshr345, 1
  %bf.cast347 = trunc i8 %bf.clear346 to i1
  br i1 %bf.cast347, label %if.then.349, label %if.else.365

if.then.349:                                      ; preds = %land.lhs.true.342, %cond.false.337, %land.lhs.true.330, %land.lhs.true.323, %land.lhs.true.314, %land.lhs.true.308, %cond.true.303, %land.lhs.true.297
  %246 = load %struct.glyph_row*, %struct.glyph_row** %row277, align 8
  %glyphs350 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %246, i32 0, i32 0
  %arrayidx351 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs350, i32 0, i64 0
  %247 = load %struct.glyph*, %struct.glyph** %arrayidx351, align 8
  %248 = load %struct.glyph_row*, %struct.glyph_row** %row277, align 8
  %glyphs352 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %248, i32 0, i32 0
  %arrayidx353 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs352, i32 0, i64 1
  store %struct.glyph* %247, %struct.glyph** %arrayidx353, align 8
  %249 = load %struct.glyph_row*, %struct.glyph_row** %row277, align 8
  %glyphs354 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %249, i32 0, i32 0
  %arrayidx355 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs354, i32 0, i64 1
  %250 = load %struct.glyph*, %struct.glyph** %arrayidx355, align 8
  %width356 = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 0
  %251 = load i32, i32* %width356, align 4
  %idx.ext357 = sext i32 %251 to i64
  %add.ptr358 = getelementptr inbounds %struct.glyph, %struct.glyph* %250, i64 %idx.ext357
  %252 = load %struct.glyph_row*, %struct.glyph_row** %row277, align 8
  %glyphs359 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %252, i32 0, i32 0
  %arrayidx360 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs359, i32 0, i64 2
  store %struct.glyph* %add.ptr358, %struct.glyph** %arrayidx360, align 8
  %253 = load %struct.glyph_row*, %struct.glyph_row** %row277, align 8
  %glyphs361 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %253, i32 0, i32 0
  %arrayidx362 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs361, i32 0, i64 2
  %254 = load %struct.glyph*, %struct.glyph** %arrayidx362, align 8
  %255 = load %struct.glyph_row*, %struct.glyph_row** %row277, align 8
  %glyphs363 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %255, i32 0, i32 0
  %arrayidx364 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs363, i32 0, i64 3
  store %struct.glyph* %254, %struct.glyph** %arrayidx364, align 8
  br label %if.end.392

if.else.365:                                      ; preds = %land.lhs.true.342, %lor.lhs.false.338
  %256 = load %struct.glyph_row*, %struct.glyph_row** %row277, align 8
  %glyphs366 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %256, i32 0, i32 0
  %arrayidx367 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs366, i32 0, i64 0
  %257 = load %struct.glyph*, %struct.glyph** %arrayidx367, align 8
  %258 = load i32, i32* %left, align 4
  %idx.ext368 = sext i32 %258 to i64
  %add.ptr369 = getelementptr inbounds %struct.glyph, %struct.glyph* %257, i64 %idx.ext368
  %259 = load %struct.glyph_row*, %struct.glyph_row** %row277, align 8
  %glyphs370 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %259, i32 0, i32 0
  %arrayidx371 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs370, i32 0, i64 1
  store %struct.glyph* %add.ptr369, %struct.glyph** %arrayidx371, align 8
  %260 = load %struct.glyph_row*, %struct.glyph_row** %row277, align 8
  %glyphs372 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %260, i32 0, i32 0
  %arrayidx373 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs372, i32 0, i64 1
  %261 = load %struct.glyph*, %struct.glyph** %arrayidx373, align 8
  %width374 = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 0
  %262 = load i32, i32* %width374, align 4
  %idx.ext375 = sext i32 %262 to i64
  %add.ptr376 = getelementptr inbounds %struct.glyph, %struct.glyph* %261, i64 %idx.ext375
  %263 = load i32, i32* %left, align 4
  %idx.ext377 = sext i32 %263 to i64
  %idx.neg378 = sub i64 0, %idx.ext377
  %add.ptr379 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr376, i64 %idx.neg378
  %264 = load i32, i32* %right, align 4
  %idx.ext380 = sext i32 %264 to i64
  %idx.neg381 = sub i64 0, %idx.ext380
  %add.ptr382 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr379, i64 %idx.neg381
  %265 = load %struct.glyph_row*, %struct.glyph_row** %row277, align 8
  %glyphs383 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %265, i32 0, i32 0
  %arrayidx384 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs383, i32 0, i64 2
  store %struct.glyph* %add.ptr382, %struct.glyph** %arrayidx384, align 8
  %266 = load %struct.glyph_row*, %struct.glyph_row** %row277, align 8
  %glyphs385 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %266, i32 0, i32 0
  %arrayidx386 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs385, i32 0, i64 0
  %267 = load %struct.glyph*, %struct.glyph** %arrayidx386, align 8
  %width387 = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 0
  %268 = load i32, i32* %width387, align 4
  %idx.ext388 = sext i32 %268 to i64
  %add.ptr389 = getelementptr inbounds %struct.glyph, %struct.glyph* %267, i64 %idx.ext388
  %269 = load %struct.glyph_row*, %struct.glyph_row** %row277, align 8
  %glyphs390 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %269, i32 0, i32 0
  %arrayidx391 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs390, i32 0, i64 3
  store %struct.glyph* %add.ptr389, %struct.glyph** %arrayidx391, align 8
  br label %if.end.392

if.end.392:                                       ; preds = %if.else.365, %if.then.349
  %270 = load %struct.glyph_row*, %struct.glyph_row** %row277, align 8
  %incdec.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %270, i32 1
  store %struct.glyph_row* %incdec.ptr, %struct.glyph_row** %row277, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.393

if.end.393:                                       ; preds = %while.end, %lor.lhs.false.273
  %271 = load i32, i32* %left, align 4
  %272 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %left_margin_glyphs394 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %272, i32 0, i32 13
  store i32 %271, i32* %left_margin_glyphs394, align 4
  %273 = load i32, i32* %right, align 4
  %274 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %right_margin_glyphs395 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %274, i32 0, i32 14
  store i32 %273, i32* %right_margin_glyphs395, align 4
  br label %if.end.396

if.end.396:                                       ; preds = %if.end.393, %for.end
  %height397 = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 1
  %275 = load i32, i32* %height397, align 4
  %276 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %nrows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %276, i32 0, i32 3
  store i32 %275, i32* %nrows, align 4
  %277 = load %struct.window*, %struct.window** %w.addr, align 8
  %tobool398 = icmp ne %struct.window* %277, null
  br i1 %tobool398, label %if.then.399, label %if.end.565

if.then.399:                                      ; preds = %if.end.396
  %278 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %279 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %279, i32 0, i32 24
  %280 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %cmp400 = icmp eq %struct.glyph_matrix* %278, %280
  br i1 %cmp400, label %if.then.402, label %if.else.545

if.then.402:                                      ; preds = %if.then.399
  %281 = load i32, i32* %window_width, align 4
  %cmp403 = icmp slt i32 %281, 0
  br i1 %cmp403, label %if.then.405, label %if.end.407

if.then.405:                                      ; preds = %if.then.402
  %282 = load %struct.window*, %struct.window** %w.addr, align 8
  %call406 = call i32 @window_box_width(%struct.window* %282, i32 -1)
  store i32 %call406, i32* %window_width, align 4
  br label %if.end.407

if.end.407:                                       ; preds = %if.then.405, %if.then.402
  %283 = load i8, i8* %marginal_areas_changed_p, align 1
  %tobool408 = trunc i8 %283 to i1
  br i1 %tobool408, label %if.else.486, label %land.lhs.true.409

land.lhs.true.409:                                ; preds = %if.end.407
  %284 = load i8, i8* %header_line_changed_p, align 1
  %tobool410 = trunc i8 %284 to i1
  br i1 %tobool410, label %if.else.486, label %land.lhs.true.411

land.lhs.true.411:                                ; preds = %land.lhs.true.409
  %285 = load i32, i32* %new_rows, align 4
  %cmp412 = icmp eq i32 %285, 0
  br i1 %cmp412, label %land.lhs.true.414, label %if.else.486

land.lhs.true.414:                                ; preds = %land.lhs.true.411
  %width415 = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 0
  %286 = load i32, i32* %width415, align 4
  %287 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %matrix_w416 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %287, i32 0, i32 6
  %288 = load i32, i32* %matrix_w416, align 4
  %cmp417 = icmp eq i32 %286, %288
  br i1 %cmp417, label %land.lhs.true.419, label %if.else.486

land.lhs.true.419:                                ; preds = %land.lhs.true.414
  %289 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %window_pixel_left420 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %289, i32 0, i32 8
  %290 = load i32, i32* %window_pixel_left420, align 4
  %291 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left421 = getelementptr inbounds %struct.window, %struct.window* %291, i32 0, i32 30
  %292 = load i32, i32* %pixel_left421, align 4
  %cmp422 = icmp eq i32 %290, %292
  br i1 %cmp422, label %land.lhs.true.424, label %if.else.486

land.lhs.true.424:                                ; preds = %land.lhs.true.419
  %293 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %window_pixel_top425 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %293, i32 0, i32 9
  %294 = load i32, i32* %window_pixel_top425, align 4
  %295 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_top426 = getelementptr inbounds %struct.window, %struct.window* %295, i32 0, i32 31
  %296 = load i32, i32* %pixel_top426, align 4
  %cmp427 = icmp eq i32 %294, %296
  br i1 %cmp427, label %land.lhs.true.429, label %if.else.486

land.lhs.true.429:                                ; preds = %land.lhs.true.424
  %297 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %window_width430 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %297, i32 0, i32 11
  %298 = load i32, i32* %window_width430, align 4
  %299 = load i32, i32* %window_width, align 4
  %cmp431 = icmp eq i32 %298, %299
  br i1 %cmp431, label %if.then.433, label %if.else.486

if.then.433:                                      ; preds = %land.lhs.true.429
  store i32 0, i32* %i, align 4
  br label %for.cond.434

for.cond.434:                                     ; preds = %for.inc.464, %if.then.433
  %300 = load i32, i32* %i, align 4
  %301 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %nrows435 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %301, i32 0, i32 3
  %302 = load i32, i32* %nrows435, align 4
  %cmp436 = icmp slt i32 %300, %302
  br i1 %cmp436, label %land.rhs.438, label %land.end.447

land.rhs.438:                                     ; preds = %for.cond.434
  %303 = load i32, i32* %i, align 4
  %idxprom439 = sext i32 %303 to i64
  %304 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows440 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %304, i32 0, i32 1
  %305 = load %struct.glyph_row*, %struct.glyph_row** %rows440, align 8
  %arrayidx441 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %305, i64 %idxprom439
  %enabled_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %arrayidx441, i32 0, i32 22
  %306 = bitcast i40* %enabled_p to i64*
  %bf.load442 = load i64, i64* %306, align 4
  %bf.lshr443 = lshr i64 %bf.load442, 10
  %bf.clear444 = and i64 %bf.lshr443, 1
  %bf.cast445 = trunc i64 %bf.clear444 to i1
  br label %land.end.447

land.end.447:                                     ; preds = %land.rhs.438, %for.cond.434
  %307 = phi i1 [ false, %for.cond.434 ], [ %bf.cast445, %land.rhs.438 ]
  br i1 %307, label %for.body.449, label %for.end.466

for.body.449:                                     ; preds = %land.end.447
  %308 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows450 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %308, i32 0, i32 1
  %309 = load %struct.glyph_row*, %struct.glyph_row** %rows450, align 8
  %310 = load i32, i32* %i, align 4
  %idx.ext451 = sext i32 %310 to i64
  %add.ptr452 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %309, i64 %idx.ext451
  %y453 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr452, i32 0, i32 4
  %311 = load i32, i32* %y453, align 4
  %312 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows454 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %312, i32 0, i32 1
  %313 = load %struct.glyph_row*, %struct.glyph_row** %rows454, align 8
  %314 = load i32, i32* %i, align 4
  %idx.ext455 = sext i32 %314 to i64
  %add.ptr456 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %313, i64 %idx.ext455
  %height457 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr456, i32 0, i32 7
  %315 = load i32, i32* %height457, align 4
  %add458 = add nsw i32 %311, %315
  %316 = load i32, i32* %window_height, align 4
  %cmp459 = icmp sge i32 %add458, %316
  br i1 %cmp459, label %if.then.461, label %if.end.463

if.then.461:                                      ; preds = %for.body.449
  %317 = load i32, i32* %i, align 4
  %inc462 = add nsw i32 %317, 1
  store i32 %inc462, i32* %i, align 4
  br label %for.end.466

if.end.463:                                       ; preds = %for.body.449
  br label %for.inc.464

for.inc.464:                                      ; preds = %if.end.463
  %318 = load i32, i32* %i, align 4
  %inc465 = add nsw i32 %318, 1
  store i32 %inc465, i32* %i, align 4
  br label %for.cond.434

for.end.466:                                      ; preds = %if.then.461, %land.end.447
  %319 = load %struct.window*, %struct.window** %w.addr, align 8
  %window_end_vpos = getelementptr inbounds %struct.window, %struct.window* %319, i32 0, i32 66
  %320 = load i32, i32* %window_end_vpos, align 4
  %321 = load i32, i32* %i, align 4
  %cmp467 = icmp sge i32 %320, %321
  br i1 %cmp467, label %if.then.469, label %if.end.472

if.then.469:                                      ; preds = %for.end.466
  %322 = load %struct.window*, %struct.window** %w.addr, align 8
  %window_end_valid = getelementptr inbounds %struct.window, %struct.window* %322, i32 0, i32 67
  %bf.load470 = load i16, i16* %window_end_valid, align 4
  %bf.clear471 = and i16 %bf.load470, -8193
  store i16 %bf.clear471, i16* %window_end_valid, align 4
  br label %if.end.472

if.end.472:                                       ; preds = %if.then.469, %for.end.466
  br label %while.cond.473

while.cond.473:                                   ; preds = %while.body.477, %if.end.472
  %323 = load i32, i32* %i, align 4
  %324 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %nrows474 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %324, i32 0, i32 3
  %325 = load i32, i32* %nrows474, align 4
  %cmp475 = icmp slt i32 %323, %325
  br i1 %cmp475, label %while.body.477, label %while.end.485

while.body.477:                                   ; preds = %while.cond.473
  %326 = load i32, i32* %i, align 4
  %inc478 = add nsw i32 %326, 1
  store i32 %inc478, i32* %i, align 4
  %idxprom479 = sext i32 %326 to i64
  %327 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows480 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %327, i32 0, i32 1
  %328 = load %struct.glyph_row*, %struct.glyph_row** %rows480, align 8
  %arrayidx481 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %328, i64 %idxprom479
  %enabled_p482 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %arrayidx481, i32 0, i32 22
  %329 = bitcast i40* %enabled_p482 to i64*
  %bf.load483 = load i64, i64* %329, align 4
  %bf.clear484 = and i64 %bf.load483, -1025
  store i64 %bf.clear484, i64* %329, align 4
  br label %while.cond.473

while.end.485:                                    ; preds = %while.cond.473
  br label %if.end.501

if.else.486:                                      ; preds = %land.lhs.true.429, %land.lhs.true.424, %land.lhs.true.419, %land.lhs.true.414, %land.lhs.true.411, %land.lhs.true.409, %if.end.407
  store i32 0, i32* %i, align 4
  br label %for.cond.487

for.cond.487:                                     ; preds = %for.inc.498, %if.else.486
  %330 = load i32, i32* %i, align 4
  %331 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %nrows488 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %331, i32 0, i32 3
  %332 = load i32, i32* %nrows488, align 4
  %cmp489 = icmp slt i32 %330, %332
  br i1 %cmp489, label %for.body.491, label %for.end.500

for.body.491:                                     ; preds = %for.cond.487
  %333 = load i32, i32* %i, align 4
  %idxprom492 = sext i32 %333 to i64
  %334 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows493 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %334, i32 0, i32 1
  %335 = load %struct.glyph_row*, %struct.glyph_row** %rows493, align 8
  %arrayidx494 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %335, i64 %idxprom492
  %enabled_p495 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %arrayidx494, i32 0, i32 22
  %336 = bitcast i40* %enabled_p495 to i64*
  %bf.load496 = load i64, i64* %336, align 4
  %bf.clear497 = and i64 %bf.load496, -1025
  store i64 %bf.clear497, i64* %336, align 4
  br label %for.inc.498

for.inc.498:                                      ; preds = %for.body.491
  %337 = load i32, i32* %i, align 4
  %inc499 = add nsw i32 %337, 1
  store i32 %inc499, i32* %i, align 4
  br label %for.cond.487

for.end.500:                                      ; preds = %for.cond.487
  br label %if.end.501

if.end.501:                                       ; preds = %for.end.500, %while.end.485
  %338 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents502 = getelementptr inbounds %struct.window, %struct.window* %338, i32 0, i32 10
  %339 = load i64, i64* %contents502, align 8
  %call503 = call zeroext i1 @BUFFERP(i64 %339)
  br i1 %call503, label %cond.true.505, label %cond.false.539

cond.true.505:                                    ; preds = %if.end.501
  %340 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini506 = getelementptr inbounds %struct.window, %struct.window* %340, i32 0, i32 67
  %bf.load507 = load i16, i16* %mini506, align 4
  %bf.clear508 = and i16 %bf.load507, 1
  %bf.cast509 = trunc i16 %bf.clear508 to i1
  br i1 %bf.cast509, label %if.end.544, label %land.lhs.true.510

land.lhs.true.510:                                ; preds = %cond.true.505
  %341 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p511 = getelementptr inbounds %struct.window, %struct.window* %341, i32 0, i32 67
  %bf.load512 = load i16, i16* %pseudo_window_p511, align 4
  %bf.lshr513 = lshr i16 %bf.load512, 11
  %bf.clear514 = and i16 %bf.lshr513, 1
  %bf.cast515 = trunc i16 %bf.clear514 to i1
  br i1 %bf.cast515, label %if.end.544, label %land.lhs.true.516

land.lhs.true.516:                                ; preds = %land.lhs.true.510
  %342 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame517 = getelementptr inbounds %struct.window, %struct.window* %342, i32 0, i32 1
  %343 = load i64, i64* %frame517, align 8
  %sub518 = sub nsw i64 %343, 5
  %344 = inttoptr i64 %sub518 to i8*
  %345 = bitcast i8* %344 to %struct.frame*
  %wants_modeline519 = getelementptr inbounds %struct.frame, %struct.frame* %345, i32 0, i32 26
  %346 = bitcast i48* %wants_modeline519 to i64*
  %bf.load520 = load i64, i64* %346, align 8
  %bf.lshr521 = lshr i64 %bf.load520, 14
  %bf.clear522 = and i64 %bf.lshr521, 1
  %bf.cast523 = trunc i64 %bf.clear522 to i1
  br i1 %bf.cast523, label %land.lhs.true.525, label %if.end.544

land.lhs.true.525:                                ; preds = %land.lhs.true.516
  %347 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents526 = getelementptr inbounds %struct.window, %struct.window* %347, i32 0, i32 10
  %348 = load i64, i64* %contents526, align 8
  %call527 = call %struct.buffer* @XBUFFER(i64 %348)
  %mode_line_format_528 = getelementptr inbounds %struct.buffer, %struct.buffer* %call527, i32 0, i32 12
  %349 = load i64, i64* %mode_line_format_528, align 8
  %call529 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp530 = icmp eq i64 %349, %call529
  br i1 %cmp530, label %if.end.544, label %land.lhs.true.532

land.lhs.true.532:                                ; preds = %land.lhs.true.525
  %350 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height533 = getelementptr inbounds %struct.window, %struct.window* %350, i32 0, i32 35
  %351 = load i32, i32* %pixel_height533, align 4
  %352 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame534 = getelementptr inbounds %struct.window, %struct.window* %352, i32 0, i32 1
  %353 = load i64, i64* %frame534, align 8
  %sub535 = sub nsw i64 %353, 5
  %354 = inttoptr i64 %sub535 to i8*
  %355 = bitcast i8* %354 to %struct.frame*
  %line_height536 = getelementptr inbounds %struct.frame, %struct.frame* %355, i32 0, i32 60
  %356 = load i32, i32* %line_height536, align 4
  %cmp537 = icmp sgt i32 %351, %356
  br i1 %cmp537, label %if.then.540, label %if.end.544

cond.false.539:                                   ; preds = %if.end.501
  br i1 false, label %if.then.540, label %if.end.544

if.then.540:                                      ; preds = %cond.false.539, %land.lhs.true.532
  %357 = load %struct.window*, %struct.window** %w.addr, align 8
  %update_mode_line = getelementptr inbounds %struct.window, %struct.window* %357, i32 0, i32 67
  %bf.load541 = load i16, i16* %update_mode_line, align 4
  %bf.clear542 = and i16 %bf.load541, -5
  %bf.set543 = or i16 %bf.clear542, 4
  store i16 %bf.set543, i16* %update_mode_line, align 4
  br label %if.end.544

if.end.544:                                       ; preds = %if.then.540, %cond.false.539, %land.lhs.true.532, %land.lhs.true.525, %land.lhs.true.516, %land.lhs.true.510, %cond.true.505
  br label %if.end.564

if.else.545:                                      ; preds = %if.then.399
  %358 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %359 = load %struct.window*, %struct.window** %w.addr, align 8
  %desired_matrix = getelementptr inbounds %struct.window, %struct.window* %359, i32 0, i32 25
  %360 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %cmp546 = icmp eq %struct.glyph_matrix* %358, %360
  br i1 %cmp546, label %if.then.548, label %if.end.563

if.then.548:                                      ; preds = %if.else.545
  store i32 0, i32* %i, align 4
  br label %for.cond.549

for.cond.549:                                     ; preds = %for.inc.560, %if.then.548
  %361 = load i32, i32* %i, align 4
  %362 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %nrows550 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %362, i32 0, i32 3
  %363 = load i32, i32* %nrows550, align 4
  %cmp551 = icmp slt i32 %361, %363
  br i1 %cmp551, label %for.body.553, label %for.end.562

for.body.553:                                     ; preds = %for.cond.549
  %364 = load i32, i32* %i, align 4
  %idxprom554 = sext i32 %364 to i64
  %365 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows555 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %365, i32 0, i32 1
  %366 = load %struct.glyph_row*, %struct.glyph_row** %rows555, align 8
  %arrayidx556 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %366, i64 %idxprom554
  %enabled_p557 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %arrayidx556, i32 0, i32 22
  %367 = bitcast i40* %enabled_p557 to i64*
  %bf.load558 = load i64, i64* %367, align 4
  %bf.clear559 = and i64 %bf.load558, -1025
  store i64 %bf.clear559, i64* %367, align 4
  br label %for.inc.560

for.inc.560:                                      ; preds = %for.body.553
  %368 = load i32, i32* %i, align 4
  %inc561 = add nsw i32 %368, 1
  store i32 %inc561, i32* %i, align 4
  br label %for.cond.549

for.end.562:                                      ; preds = %for.cond.549
  br label %if.end.563

if.end.563:                                       ; preds = %for.end.562, %if.else.545
  br label %if.end.564

if.end.564:                                       ; preds = %if.end.563, %if.end.544
  br label %if.end.565

if.end.565:                                       ; preds = %if.end.564, %if.end.396
  %369 = load i32, i32* %x.addr, align 4
  %370 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %matrix_x = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %370, i32 0, i32 4
  store i32 %369, i32* %matrix_x, align 4
  %371 = load i32, i32* %y.addr, align 4
  %372 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %matrix_y = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %372, i32 0, i32 5
  store i32 %371, i32* %matrix_y, align 4
  %width566 = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 0
  %373 = load i32, i32* %width566, align 4
  %374 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %matrix_w567 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %374, i32 0, i32 6
  store i32 %373, i32* %matrix_w567, align 4
  %height568 = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 1
  %375 = load i32, i32* %height568, align 4
  %376 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %matrix_h = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %376, i32 0, i32 7
  store i32 %375, i32* %matrix_h, align 4
  %377 = load %struct.window*, %struct.window** %w.addr, align 8
  %tobool569 = icmp ne %struct.window* %377, null
  br i1 %tobool569, label %if.then.570, label %if.end.579

if.then.570:                                      ; preds = %if.end.565
  %378 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left571 = getelementptr inbounds %struct.window, %struct.window* %378, i32 0, i32 30
  %379 = load i32, i32* %pixel_left571, align 4
  %380 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %window_pixel_left572 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %380, i32 0, i32 8
  store i32 %379, i32* %window_pixel_left572, align 4
  %381 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_top573 = getelementptr inbounds %struct.window, %struct.window* %381, i32 0, i32 31
  %382 = load i32, i32* %pixel_top573, align 4
  %383 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %window_pixel_top574 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %383, i32 0, i32 9
  store i32 %382, i32* %window_pixel_top574, align 4
  %384 = load i32, i32* %window_height, align 4
  %385 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %window_height575 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %385, i32 0, i32 10
  store i32 %384, i32* %window_height575, align 4
  %386 = load i32, i32* %window_width, align 4
  %387 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %window_width576 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %387, i32 0, i32 11
  store i32 %386, i32* %window_width576, align 4
  %388 = load %struct.window*, %struct.window** %w.addr, align 8
  %vscroll577 = getelementptr inbounds %struct.window, %struct.window* %388, i32 0, i32 68
  %389 = load i32, i32* %vscroll577, align 4
  %390 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %window_vscroll578 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %390, i32 0, i32 12
  store i32 %389, i32* %window_vscroll578, align 4
  br label %if.end.579

if.end.579:                                       ; preds = %if.then.110, %if.then.570, %if.end.565
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @restore_current_matrix(%struct.frame* %f, %struct.glyph_matrix* %saved) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %saved.addr = alloca %struct.glyph_matrix*, align 8
  %i = alloca i32, align 4
  %from = alloca %struct.glyph_row*, align 8
  %to = alloca %struct.glyph_row*, align 8
  %nbytes = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.glyph_matrix* %saved, %struct.glyph_matrix** %saved.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.glyph_matrix*, %struct.glyph_matrix** %saved.addr, align 8
  %nrows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %1, i32 0, i32 3
  %2 = load i32, i32* %nrows, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.glyph_matrix*, %struct.glyph_matrix** %saved.addr, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %3, i32 0, i32 1
  %4 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %5 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %5 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %4, i64 %idx.ext
  store %struct.glyph_row* %add.ptr, %struct.glyph_row** %from, align 8
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %current_matrix = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 25
  %7 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %rows1 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %7, i32 0, i32 1
  %8 = load %struct.glyph_row*, %struct.glyph_row** %rows1, align 8
  %9 = load i32, i32* %i, align 4
  %idx.ext2 = sext i32 %9 to i64
  %add.ptr3 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %8, i64 %idx.ext2
  store %struct.glyph_row* %add.ptr3, %struct.glyph_row** %to, align 8
  %10 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %used = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %10, i32 0, i32 1
  %arrayidx = getelementptr inbounds [4 x i16], [4 x i16]* %used, i32 0, i64 1
  %11 = load i16, i16* %arrayidx, align 2
  %conv = sext i16 %11 to i64
  %mul = mul i64 %conv, 48
  store i64 %mul, i64* %nbytes, align 8
  %12 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %glyphs = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %12, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs, i32 0, i64 1
  %13 = load %struct.glyph*, %struct.glyph** %arrayidx4, align 8
  %14 = bitcast %struct.glyph* %13 to i8*
  %15 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %glyphs5 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %15, i32 0, i32 0
  %arrayidx6 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs5, i32 0, i64 1
  %16 = load %struct.glyph*, %struct.glyph** %arrayidx6, align 8
  %17 = bitcast %struct.glyph* %16 to i8*
  %18 = load i64, i64* %nbytes, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %17, i64 %18, i32 8, i1 false)
  %19 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %used7 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %19, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [4 x i16], [4 x i16]* %used7, i32 0, i64 1
  %20 = load i16, i16* %arrayidx8, align 2
  %21 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %used9 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %21, i32 0, i32 1
  %arrayidx10 = getelementptr inbounds [4 x i16], [4 x i16]* %used9, i32 0, i64 1
  store i16 %20, i16* %arrayidx10, align 2
  %22 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %glyphs11 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %22, i32 0, i32 0
  %arrayidx12 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs11, i32 0, i64 1
  %23 = load %struct.glyph*, %struct.glyph** %arrayidx12, align 8
  %24 = bitcast %struct.glyph* %23 to i8*
  call void @xfree(i8* %24)
  %25 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %used13 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %25, i32 0, i32 1
  %arrayidx14 = getelementptr inbounds [4 x i16], [4 x i16]* %used13, i32 0, i64 0
  %26 = load i16, i16* %arrayidx14, align 2
  %conv15 = sext i16 %26 to i64
  %mul16 = mul i64 %conv15, 48
  store i64 %mul16, i64* %nbytes, align 8
  %27 = load i64, i64* %nbytes, align 8
  %tobool = icmp ne i64 %27, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %28 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %glyphs17 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %28, i32 0, i32 0
  %arrayidx18 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs17, i32 0, i64 0
  %29 = load %struct.glyph*, %struct.glyph** %arrayidx18, align 8
  %30 = bitcast %struct.glyph* %29 to i8*
  %31 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %glyphs19 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %31, i32 0, i32 0
  %arrayidx20 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs19, i32 0, i64 0
  %32 = load %struct.glyph*, %struct.glyph** %arrayidx20, align 8
  %33 = bitcast %struct.glyph* %32 to i8*
  %34 = load i64, i64* %nbytes, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %30, i8* %33, i64 %34, i32 8, i1 false)
  %35 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %used21 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %35, i32 0, i32 1
  %arrayidx22 = getelementptr inbounds [4 x i16], [4 x i16]* %used21, i32 0, i64 0
  %36 = load i16, i16* %arrayidx22, align 2
  %37 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %used23 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %37, i32 0, i32 1
  %arrayidx24 = getelementptr inbounds [4 x i16], [4 x i16]* %used23, i32 0, i64 0
  store i16 %36, i16* %arrayidx24, align 2
  %38 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %glyphs25 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %38, i32 0, i32 0
  %arrayidx26 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs25, i32 0, i64 0
  %39 = load %struct.glyph*, %struct.glyph** %arrayidx26, align 8
  %40 = bitcast %struct.glyph* %39 to i8*
  call void @xfree(i8* %40)
  br label %if.end

if.else:                                          ; preds = %for.body
  %41 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %used27 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %41, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [4 x i16], [4 x i16]* %used27, i32 0, i64 0
  store i16 0, i16* %arrayidx28, align 2
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %42 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %used29 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %42, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [4 x i16], [4 x i16]* %used29, i32 0, i64 2
  %43 = load i16, i16* %arrayidx30, align 2
  %conv31 = sext i16 %43 to i64
  %mul32 = mul i64 %conv31, 48
  store i64 %mul32, i64* %nbytes, align 8
  %44 = load i64, i64* %nbytes, align 8
  %tobool33 = icmp ne i64 %44, 0
  br i1 %tobool33, label %if.then.34, label %if.else.45

if.then.34:                                       ; preds = %if.end
  %45 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %glyphs35 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %45, i32 0, i32 0
  %arrayidx36 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs35, i32 0, i64 2
  %46 = load %struct.glyph*, %struct.glyph** %arrayidx36, align 8
  %47 = bitcast %struct.glyph* %46 to i8*
  %48 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %glyphs37 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %48, i32 0, i32 0
  %arrayidx38 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs37, i32 0, i64 2
  %49 = load %struct.glyph*, %struct.glyph** %arrayidx38, align 8
  %50 = bitcast %struct.glyph* %49 to i8*
  %51 = load i64, i64* %nbytes, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %47, i8* %50, i64 %51, i32 8, i1 false)
  %52 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %used39 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %52, i32 0, i32 1
  %arrayidx40 = getelementptr inbounds [4 x i16], [4 x i16]* %used39, i32 0, i64 2
  %53 = load i16, i16* %arrayidx40, align 2
  %54 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %used41 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %54, i32 0, i32 1
  %arrayidx42 = getelementptr inbounds [4 x i16], [4 x i16]* %used41, i32 0, i64 2
  store i16 %53, i16* %arrayidx42, align 2
  %55 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %glyphs43 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %55, i32 0, i32 0
  %arrayidx44 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs43, i32 0, i64 2
  %56 = load %struct.glyph*, %struct.glyph** %arrayidx44, align 8
  %57 = bitcast %struct.glyph* %56 to i8*
  call void @xfree(i8* %57)
  br label %if.end.48

if.else.45:                                       ; preds = %if.end
  %58 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %used46 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %58, i32 0, i32 1
  %arrayidx47 = getelementptr inbounds [4 x i16], [4 x i16]* %used46, i32 0, i64 2
  store i16 0, i16* %arrayidx47, align 2
  br label %if.end.48

if.end.48:                                        ; preds = %if.else.45, %if.then.34
  br label %for.inc

for.inc:                                          ; preds = %if.end.48
  %59 = load i32, i32* %i, align 4
  %inc = add nsw i32 %59, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %60 = load %struct.glyph_matrix*, %struct.glyph_matrix** %saved.addr, align 8
  %rows49 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %60, i32 0, i32 1
  %61 = load %struct.glyph_row*, %struct.glyph_row** %rows49, align 8
  %62 = bitcast %struct.glyph_row* %61 to i8*
  call void @xfree(i8* %62)
  %63 = load %struct.glyph_matrix*, %struct.glyph_matrix** %saved.addr, align 8
  %64 = bitcast %struct.glyph_matrix* %63 to i8*
  call void @xfree(i8* %64)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @fake_current_matrices(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  %i = alloca i32, align 4
  %f = alloca %struct.frame*, align 8
  %m = alloca %struct.glyph_matrix*, align 8
  %fm = alloca %struct.glyph_matrix*, align 8
  %r = alloca %struct.glyph_row*, align 8
  %fr = alloca %struct.glyph_row*, align 8
  store i64 %window, i64* %window.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.39, %entry
  %0 = load i64, i64* %window.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  %lnot = xor i1 %cmp, true
  br i1 %lnot, label %for.body, label %for.end.40

for.body:                                         ; preds = %for.cond
  %1 = load i64, i64* %window.addr, align 8
  %call1 = call %struct.window* @XWINDOW(i64 %1)
  store %struct.window* %call1, %struct.window** %w, align 8
  %2 = load %struct.window*, %struct.window** %w, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %2, i32 0, i32 10
  %3 = load i64, i64* %contents, align 8
  %call2 = call zeroext i1 @WINDOWP(i64 %3)
  br i1 %call2, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %4 = load %struct.window*, %struct.window** %w, align 8
  %contents3 = getelementptr inbounds %struct.window, %struct.window* %4, i32 0, i32 10
  %5 = load i64, i64* %contents3, align 8
  call void @fake_current_matrices(i64 %5)
  br label %if.end.38

if.else:                                          ; preds = %for.body
  %6 = load %struct.window*, %struct.window** %w, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %6, i32 0, i32 1
  %7 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %7, 5
  %8 = inttoptr i64 %sub to i8*
  %9 = bitcast i8* %8 to %struct.frame*
  store %struct.frame* %9, %struct.frame** %f, align 8
  %10 = load %struct.window*, %struct.window** %w, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %10, i32 0, i32 24
  %11 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  store %struct.glyph_matrix* %11, %struct.glyph_matrix** %m, align 8
  %12 = load %struct.frame*, %struct.frame** %f, align 8
  %current_matrix4 = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 25
  %13 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix4, align 8
  store %struct.glyph_matrix* %13, %struct.glyph_matrix** %fm, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.5

for.cond.5:                                       ; preds = %for.inc, %if.else
  %14 = load i32, i32* %i, align 4
  %15 = load %struct.glyph_matrix*, %struct.glyph_matrix** %m, align 8
  %matrix_h = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %15, i32 0, i32 7
  %16 = load i32, i32* %matrix_h, align 4
  %cmp6 = icmp slt i32 %14, %16
  br i1 %cmp6, label %for.body.7, label %for.end

for.body.7:                                       ; preds = %for.cond.5
  %17 = load %struct.glyph_matrix*, %struct.glyph_matrix** %m, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %17, i32 0, i32 1
  %18 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %19 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %19 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %18, i64 %idx.ext
  store %struct.glyph_row* %add.ptr, %struct.glyph_row** %r, align 8
  %20 = load %struct.glyph_matrix*, %struct.glyph_matrix** %fm, align 8
  %rows8 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %20, i32 0, i32 1
  %21 = load %struct.glyph_row*, %struct.glyph_row** %rows8, align 8
  %22 = load i32, i32* %i, align 4
  %idx.ext9 = sext i32 %22 to i64
  %add.ptr10 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %21, i64 %idx.ext9
  %23 = load %struct.window*, %struct.window** %w, align 8
  %top_line = getelementptr inbounds %struct.window, %struct.window* %23, i32 0, i32 33
  %24 = load i32, i32* %top_line, align 4
  %idx.ext11 = sext i32 %24 to i64
  %add.ptr12 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr10, i64 %idx.ext11
  store %struct.glyph_row* %add.ptr12, %struct.glyph_row** %fr, align 8
  %25 = load %struct.glyph_row*, %struct.glyph_row** %fr, align 8
  %enabled_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %25, i32 0, i32 22
  %26 = bitcast i40* %enabled_p to i64*
  %bf.load = load i64, i64* %26, align 4
  %bf.lshr = lshr i64 %bf.load, 10
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  %27 = load %struct.glyph_row*, %struct.glyph_row** %r, align 8
  %enabled_p13 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %27, i32 0, i32 22
  %28 = bitcast i40* %enabled_p13 to i64*
  %29 = zext i1 %bf.cast to i64
  %bf.load14 = load i64, i64* %28, align 4
  %bf.shl = shl i64 %29, 10
  %bf.clear15 = and i64 %bf.load14, -1025
  %bf.set = or i64 %bf.clear15, %bf.shl
  store i64 %bf.set, i64* %28, align 4
  %bf.result.cast = trunc i64 %29 to i8
  %tobool = trunc i8 %bf.result.cast to i1
  %30 = load %struct.glyph_row*, %struct.glyph_row** %r, align 8
  %enabled_p16 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %30, i32 0, i32 22
  %31 = bitcast i40* %enabled_p16 to i64*
  %bf.load17 = load i64, i64* %31, align 4
  %bf.lshr18 = lshr i64 %bf.load17, 10
  %bf.clear19 = and i64 %bf.lshr18, 1
  %bf.cast20 = trunc i64 %bf.clear19 to i1
  br i1 %bf.cast20, label %if.then.21, label %if.end

if.then.21:                                       ; preds = %for.body.7
  %32 = load %struct.glyph_matrix*, %struct.glyph_matrix** %m, align 8
  %left_margin_glyphs = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %32, i32 0, i32 13
  %33 = load i32, i32* %left_margin_glyphs, align 4
  %conv = trunc i32 %33 to i16
  %34 = load %struct.glyph_row*, %struct.glyph_row** %r, align 8
  %used = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %34, i32 0, i32 1
  %arrayidx = getelementptr inbounds [4 x i16], [4 x i16]* %used, i32 0, i64 0
  store i16 %conv, i16* %arrayidx, align 2
  %35 = load %struct.glyph_matrix*, %struct.glyph_matrix** %m, align 8
  %right_margin_glyphs = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %35, i32 0, i32 14
  %36 = load i32, i32* %right_margin_glyphs, align 4
  %conv22 = trunc i32 %36 to i16
  %37 = load %struct.glyph_row*, %struct.glyph_row** %r, align 8
  %used23 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %37, i32 0, i32 1
  %arrayidx24 = getelementptr inbounds [4 x i16], [4 x i16]* %used23, i32 0, i64 2
  store i16 %conv22, i16* %arrayidx24, align 2
  %38 = load %struct.glyph_matrix*, %struct.glyph_matrix** %m, align 8
  %matrix_w = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %38, i32 0, i32 6
  %39 = load i32, i32* %matrix_w, align 4
  %40 = load %struct.glyph_row*, %struct.glyph_row** %r, align 8
  %used25 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %40, i32 0, i32 1
  %arrayidx26 = getelementptr inbounds [4 x i16], [4 x i16]* %used25, i32 0, i64 0
  %41 = load i16, i16* %arrayidx26, align 2
  %conv27 = sext i16 %41 to i32
  %sub28 = sub nsw i32 %39, %conv27
  %42 = load %struct.glyph_row*, %struct.glyph_row** %r, align 8
  %used29 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %42, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [4 x i16], [4 x i16]* %used29, i32 0, i64 2
  %43 = load i16, i16* %arrayidx30, align 2
  %conv31 = sext i16 %43 to i32
  %sub32 = sub nsw i32 %sub28, %conv31
  %conv33 = trunc i32 %sub32 to i16
  %44 = load %struct.glyph_row*, %struct.glyph_row** %r, align 8
  %used34 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %44, i32 0, i32 1
  %arrayidx35 = getelementptr inbounds [4 x i16], [4 x i16]* %used34, i32 0, i64 1
  store i16 %conv33, i16* %arrayidx35, align 2
  %45 = load %struct.glyph_row*, %struct.glyph_row** %r, align 8
  %mode_line_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %45, i32 0, i32 22
  %46 = bitcast i40* %mode_line_p to i64*
  %bf.load36 = load i64, i64* %46, align 4
  %bf.clear37 = and i64 %bf.load36, -1048577
  store i64 %bf.clear37, i64* %46, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.21, %for.body.7
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %47 = load i32, i32* %i, align 4
  %inc = add nsw i32 %47, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.5

for.end:                                          ; preds = %for.cond.5
  br label %if.end.38

if.end.38:                                        ; preds = %for.end, %if.then
  br label %for.inc.39

for.inc.39:                                       ; preds = %if.end.38
  %48 = load %struct.window*, %struct.window** %w, align 8
  %next = getelementptr inbounds %struct.window, %struct.window* %48, i32 0, i32 2
  %49 = load i64, i64* %next, align 8
  store i64 %49, i64* %window.addr, align 8
  br label %for.cond

for.end.40:                                       ; preds = %for.cond
  ret void
}

declare noalias i8* @xzalloc(i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @required_matrix_width(%struct.window* %w) #0 {
entry:
  %retval = alloca i32, align 4
  %w.addr = alloca %struct.window*, align 8
  %f = alloca %struct.frame*, align 8
  %ch_width = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 1
  %1 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  store %struct.frame* %3, %struct.frame** %f, align 8
  %4 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 26
  %5 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %5, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %7 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %7, i32 0, i32 44
  %8 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %smallest_char_width = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %8, i32 0, i32 22
  %9 = load i32, i32* %smallest_char_width, align 4
  %cmp1 = icmp sgt i32 %9, 1
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %10 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data2 = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 62
  %x3 = bitcast %union.output_data* %output_data2 to %struct.x_output**
  %11 = load %struct.x_output*, %struct.x_output** %x3, align 8
  %display_info4 = getelementptr inbounds %struct.x_output, %struct.x_output* %11, i32 0, i32 44
  %12 = load %struct.x_display_info*, %struct.x_display_info** %display_info4, align 8
  %smallest_char_width5 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %12, i32 0, i32 22
  %13 = load i32, i32* %smallest_char_width5, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %13, %cond.true ], [ 1, %cond.false ]
  store i32 %cond, i32* %ch_width, align 4
  %14 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width = getelementptr inbounds %struct.window, %struct.window* %14, i32 0, i32 34
  %15 = load i32, i32* %pixel_width, align 4
  %16 = load i32, i32* %ch_width, align 4
  %add = add nsw i32 %15, %16
  %sub6 = sub nsw i32 %add, 1
  %17 = load i32, i32* %ch_width, align 4
  %div = sdiv i32 %sub6, %17
  %18 = load %struct.window*, %struct.window** %w.addr, align 8
  %ncols_scale_factor = getelementptr inbounds %struct.window, %struct.window* %18, i32 0, i32 48
  %19 = load i32, i32* %ncols_scale_factor, align 4
  %mul = mul nsw i32 %div, %19
  %add7 = add nsw i32 %mul, 2
  %add8 = add nsw i32 %add7, 1
  %add9 = add nsw i32 %add8, 1
  store i32 %add9, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %20 = load %struct.window*, %struct.window** %w.addr, align 8
  %total_cols = getelementptr inbounds %struct.window, %struct.window* %20, i32 0, i32 36
  %21 = load i32, i32* %total_cols, align 4
  store i32 %21, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %cond.end
  %22 = load i32, i32* %retval
  ret i32 %22
}

; Function Attrs: nounwind uwtable
define internal i32 @required_matrix_height(%struct.window* %w) #0 {
entry:
  %retval = alloca i32, align 4
  %w.addr = alloca %struct.window*, align 8
  %f = alloca %struct.frame*, align 8
  %ch_height = alloca i32, align 4
  %window_pixel_height = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 1
  %1 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  store %struct.frame* %3, %struct.frame** %f, align 8
  %4 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 26
  %5 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %5, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %7 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %7, i32 0, i32 44
  %8 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %smallest_font_height = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %8, i32 0, i32 23
  %9 = load i32, i32* %smallest_font_height, align 4
  %cmp1 = icmp sgt i32 %9, 1
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %10 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data2 = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 62
  %x3 = bitcast %union.output_data* %output_data2 to %struct.x_output**
  %11 = load %struct.x_output*, %struct.x_output** %x3, align 8
  %display_info4 = getelementptr inbounds %struct.x_output, %struct.x_output* %11, i32 0, i32 44
  %12 = load %struct.x_display_info*, %struct.x_display_info** %display_info4, align 8
  %smallest_font_height5 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %12, i32 0, i32 23
  %13 = load i32, i32* %smallest_font_height5, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %13, %cond.true ], [ 1, %cond.false ]
  store i32 %cond, i32* %ch_height, align 4
  %14 = load %struct.window*, %struct.window** %w.addr, align 8
  %call = call i32 @window_box_height(%struct.window* %14)
  %15 = load %struct.window*, %struct.window** %w.addr, align 8
  %vscroll = getelementptr inbounds %struct.window, %struct.window* %15, i32 0, i32 68
  %16 = load i32, i32* %vscroll, align 4
  %cmp6 = icmp slt i32 %16, 0
  br i1 %cmp6, label %cond.true.7, label %cond.false.10

cond.true.7:                                      ; preds = %cond.end
  %17 = load %struct.window*, %struct.window** %w.addr, align 8
  %vscroll8 = getelementptr inbounds %struct.window, %struct.window* %17, i32 0, i32 68
  %18 = load i32, i32* %vscroll8, align 4
  %sub9 = sub nsw i32 0, %18
  br label %cond.end.12

cond.false.10:                                    ; preds = %cond.end
  %19 = load %struct.window*, %struct.window** %w.addr, align 8
  %vscroll11 = getelementptr inbounds %struct.window, %struct.window* %19, i32 0, i32 68
  %20 = load i32, i32* %vscroll11, align 4
  br label %cond.end.12

cond.end.12:                                      ; preds = %cond.false.10, %cond.true.7
  %cond13 = phi i32 [ %sub9, %cond.true.7 ], [ %20, %cond.false.10 ]
  %add = add nsw i32 %call, %cond13
  store i32 %add, i32* %window_pixel_height, align 4
  %21 = load i32, i32* %window_pixel_height, align 4
  %22 = load i32, i32* %ch_height, align 4
  %add14 = add nsw i32 %21, %22
  %sub15 = sub nsw i32 %add14, 1
  %23 = load i32, i32* %ch_height, align 4
  %div = sdiv i32 %sub15, %23
  %24 = load %struct.window*, %struct.window** %w.addr, align 8
  %nrows_scale_factor = getelementptr inbounds %struct.window, %struct.window* %24, i32 0, i32 47
  %25 = load i32, i32* %nrows_scale_factor, align 4
  %mul = mul nsw i32 %div, %25
  %add16 = add nsw i32 %mul, 2
  %add17 = add nsw i32 %add16, 2
  store i32 %add17, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %26 = load %struct.window*, %struct.window** %w.addr, align 8
  %total_lines = getelementptr inbounds %struct.window, %struct.window* %26, i32 0, i32 37
  %27 = load i32, i32* %total_lines, align 4
  store i32 %27, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %cond.end.12
  %28 = load i32, i32* %retval
  ret i32 %28
}

; Function Attrs: nounwind uwtable
define internal i32 @margin_glyphs_to_reserve(%struct.window* %w, i32 %total_glyphs, i32 %margin) #0 {
entry:
  %retval = alloca i32, align 4
  %w.addr = alloca %struct.window*, align 8
  %total_glyphs.addr = alloca i32, align 4
  %margin.addr = alloca i32, align 4
  %width = alloca i32, align 4
  %d = alloca double, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i32 %total_glyphs, i32* %total_glyphs.addr, align 4
  store i32 %margin, i32* %margin.addr, align 4
  %0 = load i32, i32* %margin.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %total_cols = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 36
  %2 = load i32, i32* %total_cols, align 4
  store i32 %2, i32* %width, align 4
  %3 = load i32, i32* %margin.addr, align 4
  %cmp1 = icmp sgt i32 0, %3
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %4 = load i32, i32* %margin.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %4, %cond.false ]
  %conv = sitofp i32 %cond to double
  store double %conv, double* %d, align 8
  %5 = load i32, i32* %width, align 4
  %div = sdiv i32 %5, 2
  %sub = sub nsw i32 %div, 1
  %conv2 = sitofp i32 %sub to double
  %6 = load double, double* %d, align 8
  %cmp3 = fcmp olt double %conv2, %6
  br i1 %cmp3, label %cond.true.5, label %cond.false.9

cond.true.5:                                      ; preds = %cond.end
  %7 = load i32, i32* %width, align 4
  %div6 = sdiv i32 %7, 2
  %sub7 = sub nsw i32 %div6, 1
  %conv8 = sitofp i32 %sub7 to double
  br label %cond.end.10

cond.false.9:                                     ; preds = %cond.end
  %8 = load double, double* %d, align 8
  br label %cond.end.10

cond.end.10:                                      ; preds = %cond.false.9, %cond.true.5
  %cond11 = phi double [ %conv8, %cond.true.5 ], [ %8, %cond.false.9 ]
  store double %cond11, double* %d, align 8
  %9 = load i32, i32* %total_glyphs.addr, align 4
  %conv12 = sitofp i32 %9 to double
  %10 = load i32, i32* %width, align 4
  %conv13 = sitofp i32 %10 to double
  %div14 = fdiv double %conv12, %conv13
  %11 = load double, double* %d, align 8
  %mul = fmul double %div14, %11
  %conv15 = fptosi double %mul to i32
  %cmp16 = icmp sgt i32 1, %conv15
  br i1 %cmp16, label %cond.true.18, label %cond.false.19

cond.true.18:                                     ; preds = %cond.end.10
  br label %cond.end.25

cond.false.19:                                    ; preds = %cond.end.10
  %12 = load i32, i32* %total_glyphs.addr, align 4
  %conv20 = sitofp i32 %12 to double
  %13 = load i32, i32* %width, align 4
  %conv21 = sitofp i32 %13 to double
  %div22 = fdiv double %conv20, %conv21
  %14 = load double, double* %d, align 8
  %mul23 = fmul double %div22, %14
  %conv24 = fptosi double %mul23 to i32
  br label %cond.end.25

cond.end.25:                                      ; preds = %cond.false.19, %cond.true.18
  %cond26 = phi i32 [ 1, %cond.true.18 ], [ %conv24, %cond.false.19 ]
  store i32 %cond26, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %cond.end.25
  %15 = load i32, i32* %retval
  ret i32 %15
}

declare i32 @window_box_height(%struct.window*) #1

; Function Attrs: noreturn
declare void @memory_full(i64) #3

declare i8* @xpalloc(i8*, i64*, i64, i64, i64) #1

declare void @memclear(i8*, i64) #1

declare noalias i8* @xmalloc(i64) #1

declare void @window_box(%struct.window*, i32, i32*, i32*, i32*, i32*) #1

declare i8* @xnrealloc(i8*, i64, i64) #1

; Function Attrs: nounwind uwtable
define internal void @allocate_matrices_for_window_redisplay(%struct.window* %w) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %dim = alloca %struct.dim, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %entry
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %tobool = icmp ne %struct.window* %0, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 10
  %2 = load i64, i64* %contents, align 8
  %call = call zeroext i1 @WINDOWP(i64 %2)
  br i1 %call, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %3 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents1 = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 10
  %4 = load i64, i64* %contents1, align 8
  %call2 = call %struct.window* @XWINDOW(i64 %4)
  call void @allocate_matrices_for_window_redisplay(%struct.window* %call2)
  br label %if.end.11

if.else:                                          ; preds = %while.body
  %5 = load %struct.window*, %struct.window** %w.addr, align 8
  %desired_matrix = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 25
  %6 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %cmp = icmp eq %struct.glyph_matrix* %6, null
  br i1 %cmp, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.else
  %call4 = call %struct.glyph_matrix* @new_glyph_matrix(%struct.glyph_pool* null)
  %7 = load %struct.window*, %struct.window** %w.addr, align 8
  %desired_matrix5 = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 25
  store %struct.glyph_matrix* %call4, %struct.glyph_matrix** %desired_matrix5, align 8
  %call6 = call %struct.glyph_matrix* @new_glyph_matrix(%struct.glyph_pool* null)
  %8 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %8, i32 0, i32 24
  store %struct.glyph_matrix* %call6, %struct.glyph_matrix** %current_matrix, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.3, %if.else
  %9 = load %struct.window*, %struct.window** %w.addr, align 8
  %call7 = call i32 @required_matrix_width(%struct.window* %9)
  %width = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 0
  store i32 %call7, i32* %width, align 4
  %10 = load %struct.window*, %struct.window** %w.addr, align 8
  %call8 = call i32 @required_matrix_height(%struct.window* %10)
  %height = getelementptr inbounds %struct.dim, %struct.dim* %dim, i32 0, i32 1
  store i32 %call8, i32* %height, align 4
  %11 = load %struct.window*, %struct.window** %w.addr, align 8
  %12 = load %struct.window*, %struct.window** %w.addr, align 8
  %desired_matrix9 = getelementptr inbounds %struct.window, %struct.window* %12, i32 0, i32 25
  %13 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix9, align 8
  %14 = bitcast %struct.dim* %dim to i64*
  %15 = load i64, i64* %14, align 4
  call void @adjust_glyph_matrix(%struct.window* %11, %struct.glyph_matrix* %13, i32 0, i32 0, i64 %15)
  %16 = load %struct.window*, %struct.window** %w.addr, align 8
  %17 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix10 = getelementptr inbounds %struct.window, %struct.window* %17, i32 0, i32 24
  %18 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix10, align 8
  %19 = bitcast %struct.dim* %dim to i64*
  %20 = load i64, i64* %19, align 4
  call void @adjust_glyph_matrix(%struct.window* %16, %struct.glyph_matrix* %18, i32 0, i32 0, i64 %20)
  br label %if.end.11

if.end.11:                                        ; preds = %if.end, %if.then
  %21 = load %struct.window*, %struct.window** %w.addr, align 8
  %next = getelementptr inbounds %struct.window, %struct.window* %21, i32 0, i32 2
  %22 = load i64, i64* %next, align 8
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp13 = icmp eq i64 %22, %call12
  br i1 %cmp13, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.11
  br label %cond.end

cond.false:                                       ; preds = %if.end.11
  %23 = load %struct.window*, %struct.window** %w.addr, align 8
  %next14 = getelementptr inbounds %struct.window, %struct.window* %23, i32 0, i32 2
  %24 = load i64, i64* %next14, align 8
  %call15 = call %struct.window* @XWINDOW(i64 %24)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.window* [ null, %cond.true ], [ %call15, %cond.false ]
  store %struct.window* %cond, %struct.window** %w.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

declare i8* @xrealloc(i8*, i64) #1

; Function Attrs: nounwind uwtable
define internal %struct.window* @frame_row_to_window(%struct.window* %w, i32 %row) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %row.addr = alloca i32, align 4
  %found = alloca %struct.window*, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i32 %row, i32* %row.addr, align 4
  store %struct.window* null, %struct.window** %found, align 8
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %entry
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %tobool = icmp ne %struct.window* %0, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %1 = load %struct.window*, %struct.window** %found, align 8
  %tobool1 = icmp ne %struct.window* %1, null
  %lnot = xor i1 %tobool1, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %2 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ]
  br i1 %2, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %3 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 10
  %4 = load i64, i64* %contents, align 8
  %call = call zeroext i1 @WINDOWP(i64 %4)
  br i1 %call, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %5 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents2 = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 10
  %6 = load i64, i64* %contents2, align 8
  %call3 = call %struct.window* @XWINDOW(i64 %6)
  %7 = load i32, i32* %row.addr, align 4
  %call4 = call %struct.window* @frame_row_to_window(%struct.window* %call3, i32 %7)
  store %struct.window* %call4, %struct.window** %found, align 8
  br label %if.end.8

if.else:                                          ; preds = %while.body
  %8 = load i32, i32* %row.addr, align 4
  %9 = load %struct.window*, %struct.window** %w.addr, align 8
  %top_line = getelementptr inbounds %struct.window, %struct.window* %9, i32 0, i32 33
  %10 = load i32, i32* %top_line, align 4
  %cmp = icmp sge i32 %8, %10
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.else
  %11 = load i32, i32* %row.addr, align 4
  %12 = load %struct.window*, %struct.window** %w.addr, align 8
  %top_line5 = getelementptr inbounds %struct.window, %struct.window* %12, i32 0, i32 33
  %13 = load i32, i32* %top_line5, align 4
  %14 = load %struct.window*, %struct.window** %w.addr, align 8
  %total_lines = getelementptr inbounds %struct.window, %struct.window* %14, i32 0, i32 37
  %15 = load i32, i32* %total_lines, align 4
  %add = add nsw i32 %13, %15
  %cmp6 = icmp slt i32 %11, %add
  br i1 %cmp6, label %if.then.7, label %if.end

if.then.7:                                        ; preds = %land.lhs.true
  %16 = load %struct.window*, %struct.window** %w.addr, align 8
  store %struct.window* %16, %struct.window** %found, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.7, %land.lhs.true, %if.else
  br label %if.end.8

if.end.8:                                         ; preds = %if.end, %if.then
  %17 = load %struct.window*, %struct.window** %w.addr, align 8
  %next = getelementptr inbounds %struct.window, %struct.window* %17, i32 0, i32 2
  %18 = load i64, i64* %next, align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp10 = icmp eq i64 %18, %call9
  br i1 %cmp10, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.8
  br label %cond.end

cond.false:                                       ; preds = %if.end.8
  %19 = load %struct.window*, %struct.window** %w.addr, align 8
  %next11 = getelementptr inbounds %struct.window, %struct.window* %19, i32 0, i32 2
  %20 = load i64, i64* %next11, align 8
  %call12 = call %struct.window* @XWINDOW(i64 %20)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.window* [ null, %cond.true ], [ %call12, %cond.false ]
  store %struct.window* %cond, %struct.window** %w.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %21 = load %struct.window*, %struct.window** %found, align 8
  ret %struct.window* %21
}

; Function Attrs: nounwind uwtable
define internal void @copy_row_except_pointers(%struct.glyph_row* %to, %struct.glyph_row* %from) #0 {
entry:
  %to.addr = alloca %struct.glyph_row*, align 8
  %from.addr = alloca %struct.glyph_row*, align 8
  store %struct.glyph_row* %to, %struct.glyph_row** %to.addr, align 8
  store %struct.glyph_row* %from, %struct.glyph_row** %from.addr, align 8
  %0 = load %struct.glyph_row*, %struct.glyph_row** %to.addr, align 8
  %x = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %0, i32 0, i32 3
  %1 = bitcast i32* %x to i8*
  %2 = load %struct.glyph_row*, %struct.glyph_row** %from.addr, align 8
  %x1 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %2, i32 0, i32 3
  %3 = bitcast i32* %x1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* %3, i64 212, i32 4, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @sync_window_with_frame_matrix_rows(%struct.window* %w) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %f = alloca %struct.frame*, align 8
  %window_row = alloca %struct.glyph_row*, align 8
  %window_row_end = alloca %struct.glyph_row*, align 8
  %frame_row = alloca %struct.glyph_row*, align 8
  %left = alloca i32, align 4
  %right = alloca i32, align 4
  %x = alloca i32, align 4
  %width = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 1
  %1 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  store %struct.frame* %3, %struct.frame** %f, align 8
  %4 = load %struct.window*, %struct.window** %w.addr, align 8
  %5 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_margin_cols = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 59
  %6 = load i32, i32* %left_margin_cols, align 4
  %call = call i32 @margin_glyphs_to_reserve(%struct.window* %4, i32 1, i32 %6)
  store i32 %call, i32* %left, align 4
  %7 = load %struct.window*, %struct.window** %w.addr, align 8
  %8 = load %struct.window*, %struct.window** %w.addr, align 8
  %right_margin_cols = getelementptr inbounds %struct.window, %struct.window* %8, i32 0, i32 60
  %9 = load i32, i32* %right_margin_cols, align 4
  %call1 = call i32 @margin_glyphs_to_reserve(%struct.window* %7, i32 1, i32 %9)
  store i32 %call1, i32* %right, align 4
  %10 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %10, i32 0, i32 24
  %11 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %matrix_x = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %11, i32 0, i32 4
  %12 = load i32, i32* %matrix_x, align 4
  store i32 %12, i32* %x, align 4
  %13 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix2 = getelementptr inbounds %struct.window, %struct.window* %13, i32 0, i32 24
  %14 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix2, align 8
  %matrix_w = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %14, i32 0, i32 6
  %15 = load i32, i32* %matrix_w, align 4
  store i32 %15, i32* %width, align 4
  %16 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix3 = getelementptr inbounds %struct.window, %struct.window* %16, i32 0, i32 24
  %17 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix3, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %17, i32 0, i32 1
  %18 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  store %struct.glyph_row* %18, %struct.glyph_row** %window_row, align 8
  %19 = load %struct.glyph_row*, %struct.glyph_row** %window_row, align 8
  %20 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix4 = getelementptr inbounds %struct.window, %struct.window* %20, i32 0, i32 24
  %21 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix4, align 8
  %nrows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %21, i32 0, i32 3
  %22 = load i32, i32* %nrows, align 4
  %idx.ext = sext i32 %22 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %19, i64 %idx.ext
  store %struct.glyph_row* %add.ptr, %struct.glyph_row** %window_row_end, align 8
  %23 = load %struct.frame*, %struct.frame** %f, align 8
  %current_matrix5 = getelementptr inbounds %struct.frame, %struct.frame* %23, i32 0, i32 25
  %24 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix5, align 8
  %rows6 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %24, i32 0, i32 1
  %25 = load %struct.glyph_row*, %struct.glyph_row** %rows6, align 8
  %26 = load %struct.window*, %struct.window** %w.addr, align 8
  %top_line = getelementptr inbounds %struct.window, %struct.window* %26, i32 0, i32 33
  %27 = load i32, i32* %top_line, align 4
  %idx.ext7 = sext i32 %27 to i64
  %add.ptr8 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %25, i64 %idx.ext7
  store %struct.glyph_row* %add.ptr8, %struct.glyph_row** %frame_row, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %28 = load %struct.glyph_row*, %struct.glyph_row** %window_row, align 8
  %29 = load %struct.glyph_row*, %struct.glyph_row** %window_row_end, align 8
  %cmp = icmp ult %struct.glyph_row* %28, %29
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %30 = load %struct.glyph_row*, %struct.glyph_row** %frame_row, align 8
  %glyphs = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %30, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs, i32 0, i64 0
  %31 = load %struct.glyph*, %struct.glyph** %arrayidx, align 8
  %32 = load i32, i32* %x, align 4
  %idx.ext9 = sext i32 %32 to i64
  %add.ptr10 = getelementptr inbounds %struct.glyph, %struct.glyph* %31, i64 %idx.ext9
  %33 = load %struct.glyph_row*, %struct.glyph_row** %window_row, align 8
  %glyphs11 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %33, i32 0, i32 0
  %arrayidx12 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs11, i32 0, i64 0
  store %struct.glyph* %add.ptr10, %struct.glyph** %arrayidx12, align 8
  %34 = load %struct.glyph_row*, %struct.glyph_row** %window_row, align 8
  %glyphs13 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %34, i32 0, i32 0
  %arrayidx14 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs13, i32 0, i64 0
  %35 = load %struct.glyph*, %struct.glyph** %arrayidx14, align 8
  %36 = load i32, i32* %left, align 4
  %idx.ext15 = sext i32 %36 to i64
  %add.ptr16 = getelementptr inbounds %struct.glyph, %struct.glyph* %35, i64 %idx.ext15
  %37 = load %struct.glyph_row*, %struct.glyph_row** %window_row, align 8
  %glyphs17 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %37, i32 0, i32 0
  %arrayidx18 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs17, i32 0, i64 1
  store %struct.glyph* %add.ptr16, %struct.glyph** %arrayidx18, align 8
  %38 = load %struct.glyph_row*, %struct.glyph_row** %window_row, align 8
  %glyphs19 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %38, i32 0, i32 0
  %arrayidx20 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs19, i32 0, i64 0
  %39 = load %struct.glyph*, %struct.glyph** %arrayidx20, align 8
  %40 = load i32, i32* %width, align 4
  %idx.ext21 = sext i32 %40 to i64
  %add.ptr22 = getelementptr inbounds %struct.glyph, %struct.glyph* %39, i64 %idx.ext21
  %41 = load %struct.glyph_row*, %struct.glyph_row** %window_row, align 8
  %glyphs23 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %41, i32 0, i32 0
  %arrayidx24 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs23, i32 0, i64 3
  store %struct.glyph* %add.ptr22, %struct.glyph** %arrayidx24, align 8
  %42 = load %struct.glyph_row*, %struct.glyph_row** %window_row, align 8
  %glyphs25 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %42, i32 0, i32 0
  %arrayidx26 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs25, i32 0, i64 3
  %43 = load %struct.glyph*, %struct.glyph** %arrayidx26, align 8
  %44 = load i32, i32* %right, align 4
  %idx.ext27 = sext i32 %44 to i64
  %idx.neg = sub i64 0, %idx.ext27
  %add.ptr28 = getelementptr inbounds %struct.glyph, %struct.glyph* %43, i64 %idx.neg
  %45 = load %struct.glyph_row*, %struct.glyph_row** %window_row, align 8
  %glyphs29 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %45, i32 0, i32 0
  %arrayidx30 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs29, i32 0, i64 2
  store %struct.glyph* %add.ptr28, %struct.glyph** %arrayidx30, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %46 = load %struct.glyph_row*, %struct.glyph_row** %window_row, align 8
  %incdec.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %46, i32 1
  store %struct.glyph_row* %incdec.ptr, %struct.glyph_row** %window_row, align 8
  %47 = load %struct.glyph_row*, %struct.glyph_row** %frame_row, align 8
  %incdec.ptr31 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %47, i32 1
  store %struct.glyph_row* %incdec.ptr31, %struct.glyph_row** %frame_row, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @build_frame_matrix_from_window_tree(%struct.glyph_matrix* %matrix, %struct.window* %w) #0 {
entry:
  %matrix.addr = alloca %struct.glyph_matrix*, align 8
  %w.addr = alloca %struct.window*, align 8
  store %struct.glyph_matrix* %matrix, %struct.glyph_matrix** %matrix.addr, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %entry
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %tobool = icmp ne %struct.window* %0, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 10
  %2 = load i64, i64* %contents, align 8
  %call = call zeroext i1 @WINDOWP(i64 %2)
  br i1 %call, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %3 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %4 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents1 = getelementptr inbounds %struct.window, %struct.window* %4, i32 0, i32 10
  %5 = load i64, i64* %contents1, align 8
  %call2 = call %struct.window* @XWINDOW(i64 %5)
  call void @build_frame_matrix_from_window_tree(%struct.glyph_matrix* %3, %struct.window* %call2)
  br label %if.end

if.else:                                          ; preds = %while.body
  %6 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %7 = load %struct.window*, %struct.window** %w.addr, align 8
  call void @build_frame_matrix_from_leaf_window(%struct.glyph_matrix* %6, %struct.window* %7)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %8 = load %struct.window*, %struct.window** %w.addr, align 8
  %next = getelementptr inbounds %struct.window, %struct.window* %8, i32 0, i32 2
  %9 = load i64, i64* %next, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %9, %call3
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %10 = load %struct.window*, %struct.window** %w.addr, align 8
  %next4 = getelementptr inbounds %struct.window, %struct.window* %10, i32 0, i32 2
  %11 = load i64, i64* %next4, align 8
  %call5 = call %struct.window* @XWINDOW(i64 %11)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.window* [ null, %cond.true ], [ %call5, %cond.false ]
  store %struct.window* %cond, %struct.window** %w.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @build_frame_matrix_from_leaf_window(%struct.glyph_matrix* %frame_matrix, %struct.window* %w) #0 {
entry:
  %frame_matrix.addr = alloca %struct.glyph_matrix*, align 8
  %w.addr = alloca %struct.window*, align 8
  %window_matrix = alloca %struct.glyph_matrix*, align 8
  %window_y = alloca i32, align 4
  %frame_y = alloca i32, align 4
  %right_border_glyph = alloca %struct.GLYPH, align 4
  %dp = alloca %struct.Lisp_Char_Table*, align 8
  %gc = alloca i64, align 8
  %frame_row = alloca %struct.glyph_row*, align 8
  %window_row = alloca %struct.glyph_row*, align 8
  %current_row_p = alloca i8, align 1
  %border = alloca %struct.glyph*, align 8
  store %struct.glyph_matrix* %frame_matrix, %struct.glyph_matrix** %frame_matrix.addr, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  %ch = getelementptr inbounds %struct.GLYPH, %struct.GLYPH* %right_border_glyph, i32 0, i32 0
  store i32 0, i32* %ch, align 4
  %face_id = getelementptr inbounds %struct.GLYPH, %struct.GLYPH* %right_border_glyph, i32 0, i32 1
  store i32 0, i32* %face_id, align 4
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %must_be_updated_p = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 67
  %bf.load = load i16, i16* %must_be_updated_p, align 4
  %bf.lshr = lshr i16 %bf.load, 10
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %if.then, label %if.else.40

if.then:                                          ; preds = %entry
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %desired_matrix = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 25
  %2 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  store %struct.glyph_matrix* %2, %struct.glyph_matrix** %window_matrix, align 8
  %3 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 30
  %4 = load i32, i32* %pixel_left, align 4
  %5 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 34
  %6 = load i32, i32* %pixel_width, align 4
  %add = add nsw i32 %4, %6
  %7 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 1
  %8 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %8, 5
  %9 = inttoptr i64 %sub to i8*
  %10 = bitcast i8* %9 to %struct.frame*
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 5
  %11 = load i64, i64* %root_window, align 8
  %call = call %struct.window* @XWINDOW(i64 %11)
  %pixel_left1 = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 30
  %12 = load i32, i32* %pixel_left1, align 4
  %13 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame2 = getelementptr inbounds %struct.window, %struct.window* %13, i32 0, i32 1
  %14 = load i64, i64* %frame2, align 8
  %sub3 = sub nsw i64 %14, 5
  %15 = inttoptr i64 %sub3 to i8*
  %16 = bitcast i8* %15 to %struct.frame*
  %root_window4 = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 5
  %17 = load i64, i64* %root_window4, align 8
  %call5 = call %struct.window* @XWINDOW(i64 %17)
  %pixel_width6 = getelementptr inbounds %struct.window, %struct.window* %call5, i32 0, i32 34
  %18 = load i32, i32* %pixel_width6, align 4
  %add7 = add nsw i32 %12, %18
  %cmp = icmp eq i32 %add, %add7
  br i1 %cmp, label %if.end.39, label %if.then.8

if.then.8:                                        ; preds = %if.then
  %19 = load %struct.window*, %struct.window** %w.addr, align 8
  %call9 = call %struct.Lisp_Char_Table* @window_display_table(%struct.window* %19)
  store %struct.Lisp_Char_Table* %call9, %struct.Lisp_Char_Table** %dp, align 8
  %ch10 = getelementptr inbounds %struct.GLYPH, %struct.GLYPH* %right_border_glyph, i32 0, i32 0
  store i32 124, i32* %ch10, align 4
  %face_id11 = getelementptr inbounds %struct.GLYPH, %struct.GLYPH* %right_border_glyph, i32 0, i32 1
  store i32 0, i32* %face_id11, align 4
  %20 = load %struct.Lisp_Char_Table*, %struct.Lisp_Char_Table** %dp, align 8
  %tobool = icmp ne %struct.Lisp_Char_Table* %20, null
  br i1 %tobool, label %land.lhs.true, label %if.end.32

land.lhs.true:                                    ; preds = %if.then.8
  %21 = load %struct.Lisp_Char_Table*, %struct.Lisp_Char_Table** %dp, align 8
  %extras = getelementptr inbounds %struct.Lisp_Char_Table, %struct.Lisp_Char_Table* %21, i32 0, i32 6
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* %extras, i32 0, i64 5
  %22 = load i64, i64* %arrayidx, align 8
  store i64 %22, i64* %gc, align 8
  %23 = load i64, i64* %gc, align 8
  %call12 = call zeroext i1 @GLYPH_CODE_P(i64 %23)
  br i1 %call12, label %if.then.13, label %if.end.32

if.then.13:                                       ; preds = %land.lhs.true
  br label %do.body

do.body:                                          ; preds = %if.then.13
  %24 = load i64, i64* %gc, align 8
  %and = and i64 %24, 7
  %conv = trunc i64 %and to i32
  %cmp14 = icmp eq i32 %conv, 3
  br i1 %cmp14, label %if.then.16, label %if.else

if.then.16:                                       ; preds = %do.body
  %25 = load i64, i64* %gc, align 8
  %sub17 = sub nsw i64 %25, 3
  %26 = inttoptr i64 %sub17 to i8*
  %27 = bitcast i8* %26 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %27, i32 0, i32 0
  %28 = load i64, i64* %car, align 8
  %shr = ashr i64 %28, 2
  %conv18 = trunc i64 %shr to i32
  %ch19 = getelementptr inbounds %struct.GLYPH, %struct.GLYPH* %right_border_glyph, i32 0, i32 0
  store i32 %conv18, i32* %ch19, align 4
  %29 = load i64, i64* %gc, align 8
  %sub20 = sub nsw i64 %29, 3
  %30 = inttoptr i64 %sub20 to i8*
  %31 = bitcast i8* %30 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %31, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %32 = load i64, i64* %cdr, align 8
  %shr21 = ashr i64 %32, 2
  %conv22 = trunc i64 %shr21 to i32
  %face_id23 = getelementptr inbounds %struct.GLYPH, %struct.GLYPH* %right_border_glyph, i32 0, i32 1
  store i32 %conv22, i32* %face_id23, align 4
  br label %if.end

if.else:                                          ; preds = %do.body
  %33 = load i64, i64* %gc, align 8
  %shr24 = ashr i64 %33, 2
  %and25 = and i64 %shr24, 4194303
  %conv26 = trunc i64 %and25 to i32
  %ch27 = getelementptr inbounds %struct.GLYPH, %struct.GLYPH* %right_border_glyph, i32 0, i32 0
  store i32 %conv26, i32* %ch27, align 4
  %34 = load i64, i64* %gc, align 8
  %shr28 = ashr i64 %34, 2
  %shr29 = ashr i64 %shr28, 22
  %conv30 = trunc i64 %shr29 to i32
  %face_id31 = getelementptr inbounds %struct.GLYPH, %struct.GLYPH* %right_border_glyph, i32 0, i32 1
  store i32 %conv30, i32* %face_id31, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.16
  br label %do.end

do.end:                                           ; preds = %if.end
  %35 = load %struct.window*, %struct.window** %w.addr, align 8
  call void @spec_glyph_lookup_face(%struct.window* %35, %struct.GLYPH* %right_border_glyph)
  br label %if.end.32

if.end.32:                                        ; preds = %do.end, %land.lhs.true, %if.then.8
  %36 = bitcast %struct.GLYPH* %right_border_glyph to i64*
  %37 = load i64, i64* %36, align 4
  %call33 = call i32 @GLYPH_FACE(i64 %37)
  %cmp34 = icmp sle i32 %call33, 0
  br i1 %cmp34, label %if.then.36, label %if.end.38

if.then.36:                                       ; preds = %if.end.32
  %face_id37 = getelementptr inbounds %struct.GLYPH, %struct.GLYPH* %right_border_glyph, i32 0, i32 1
  store i32 11, i32* %face_id37, align 4
  br label %if.end.38

if.end.38:                                        ; preds = %if.then.36, %if.end.32
  br label %if.end.39

if.end.39:                                        ; preds = %if.end.38, %if.then
  br label %if.end.41

if.else.40:                                       ; preds = %entry
  %38 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %38, i32 0, i32 24
  %39 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  store %struct.glyph_matrix* %39, %struct.glyph_matrix** %window_matrix, align 8
  br label %if.end.41

if.end.41:                                        ; preds = %if.else.40, %if.end.39
  store i32 0, i32* %window_y, align 4
  %40 = load %struct.glyph_matrix*, %struct.glyph_matrix** %window_matrix, align 8
  %matrix_y = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %40, i32 0, i32 5
  %41 = load i32, i32* %matrix_y, align 4
  store i32 %41, i32* %frame_y, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end.97, %if.end.41
  %42 = load i32, i32* %window_y, align 4
  %43 = load %struct.glyph_matrix*, %struct.glyph_matrix** %window_matrix, align 8
  %nrows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %43, i32 0, i32 3
  %44 = load i32, i32* %nrows, align 4
  %cmp42 = icmp slt i32 %42, %44
  br i1 %cmp42, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %45 = load %struct.glyph_matrix*, %struct.glyph_matrix** %frame_matrix.addr, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %45, i32 0, i32 1
  %46 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %47 = load i32, i32* %frame_y, align 4
  %idx.ext = sext i32 %47 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %46, i64 %idx.ext
  store %struct.glyph_row* %add.ptr, %struct.glyph_row** %frame_row, align 8
  %48 = load %struct.glyph_matrix*, %struct.glyph_matrix** %window_matrix, align 8
  %rows44 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %48, i32 0, i32 1
  %49 = load %struct.glyph_row*, %struct.glyph_row** %rows44, align 8
  %50 = load i32, i32* %window_y, align 4
  %idx.ext45 = sext i32 %50 to i64
  %add.ptr46 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %49, i64 %idx.ext45
  store %struct.glyph_row* %add.ptr46, %struct.glyph_row** %window_row, align 8
  %51 = load %struct.glyph_matrix*, %struct.glyph_matrix** %window_matrix, align 8
  %52 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix47 = getelementptr inbounds %struct.window, %struct.window* %52, i32 0, i32 24
  %53 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix47, align 8
  %cmp48 = icmp eq %struct.glyph_matrix* %51, %53
  %frombool = zext i1 %cmp48 to i8
  store i8 %frombool, i8* %current_row_p, align 1
  %54 = load %struct.glyph_row*, %struct.glyph_row** %frame_row, align 8
  %55 = load %struct.glyph_matrix*, %struct.glyph_matrix** %window_matrix, align 8
  %matrix_x = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %55, i32 0, i32 4
  %56 = load i32, i32* %matrix_x, align 4
  call void @fill_up_frame_row_with_spaces(%struct.glyph_row* %54, i32 %56)
  %57 = load %struct.glyph_row*, %struct.glyph_row** %window_row, align 8
  call void @fill_up_glyph_row_with_spaces(%struct.glyph_row* %57)
  %58 = load %struct.glyph_matrix*, %struct.glyph_matrix** %window_matrix, align 8
  %59 = load %struct.window*, %struct.window** %w.addr, align 8
  %desired_matrix50 = getelementptr inbounds %struct.window, %struct.window* %59, i32 0, i32 25
  %60 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix50, align 8
  %cmp51 = icmp eq %struct.glyph_matrix* %58, %60
  br i1 %cmp51, label %land.lhs.true.53, label %if.end.63

land.lhs.true.53:                                 ; preds = %while.body
  %61 = load %struct.glyph_row*, %struct.glyph_row** %window_row, align 8
  %enabled_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %61, i32 0, i32 22
  %62 = bitcast i40* %enabled_p to i64*
  %bf.load54 = load i64, i64* %62, align 4
  %bf.lshr55 = lshr i64 %bf.load54, 10
  %bf.clear56 = and i64 %bf.lshr55, 1
  %bf.cast57 = trunc i64 %bf.clear56 to i1
  br i1 %bf.cast57, label %if.end.63, label %if.then.58

if.then.58:                                       ; preds = %land.lhs.true.53
  %63 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix59 = getelementptr inbounds %struct.window, %struct.window* %63, i32 0, i32 24
  %64 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix59, align 8
  %rows60 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %64, i32 0, i32 1
  %65 = load %struct.glyph_row*, %struct.glyph_row** %rows60, align 8
  %66 = load i32, i32* %window_y, align 4
  %idx.ext61 = sext i32 %66 to i64
  %add.ptr62 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %65, i64 %idx.ext61
  store %struct.glyph_row* %add.ptr62, %struct.glyph_row** %window_row, align 8
  store i8 1, i8* %current_row_p, align 1
  br label %if.end.63

if.end.63:                                        ; preds = %if.then.58, %land.lhs.true.53, %while.body
  %67 = load i8, i8* %current_row_p, align 1
  %tobool64 = trunc i8 %67 to i1
  br i1 %tobool64, label %if.then.65, label %if.else.73

if.then.65:                                       ; preds = %if.end.63
  %68 = load %struct.glyph_row*, %struct.glyph_row** %frame_row, align 8
  %glyphs = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %68, i32 0, i32 0
  %arrayidx66 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs, i32 0, i64 1
  %69 = load %struct.glyph*, %struct.glyph** %arrayidx66, align 8
  %70 = load %struct.glyph_matrix*, %struct.glyph_matrix** %window_matrix, align 8
  %matrix_x67 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %70, i32 0, i32 4
  %71 = load i32, i32* %matrix_x67, align 4
  %idx.ext68 = sext i32 %71 to i64
  %add.ptr69 = getelementptr inbounds %struct.glyph, %struct.glyph* %69, i64 %idx.ext68
  %72 = bitcast %struct.glyph* %add.ptr69 to i8*
  %73 = load %struct.glyph_row*, %struct.glyph_row** %window_row, align 8
  %glyphs70 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %73, i32 0, i32 0
  %arrayidx71 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs70, i32 0, i64 0
  %74 = load %struct.glyph*, %struct.glyph** %arrayidx71, align 8
  %75 = bitcast %struct.glyph* %74 to i8*
  %76 = load %struct.glyph_matrix*, %struct.glyph_matrix** %window_matrix, align 8
  %matrix_w = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %76, i32 0, i32 6
  %77 = load i32, i32* %matrix_w, align 4
  %conv72 = sext i32 %77 to i64
  %mul = mul i64 %conv72, 48
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %72, i8* %75, i64 %mul, i32 8, i1 false)
  br label %if.end.97

if.else.73:                                       ; preds = %if.end.63
  %78 = load %struct.glyph_row*, %struct.glyph_row** %frame_row, align 8
  %enabled_p74 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %78, i32 0, i32 22
  %79 = bitcast i40* %enabled_p74 to i64*
  %bf.load75 = load i64, i64* %79, align 4
  %bf.clear76 = and i64 %bf.load75, -1025
  %bf.set = or i64 %bf.clear76, 1024
  store i64 %bf.set, i64* %79, align 4
  %80 = bitcast %struct.GLYPH* %right_border_glyph to i64*
  %81 = load i64, i64* %80, align 4
  %call77 = call i32 @GLYPH_CHAR(i64 %81)
  %cmp78 = icmp ne i32 %call77, 0
  br i1 %cmp78, label %if.then.80, label %if.end.96

if.then.80:                                       ; preds = %if.else.73
  %82 = load %struct.glyph_row*, %struct.glyph_row** %window_row, align 8
  %glyphs81 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %82, i32 0, i32 0
  %arrayidx82 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs81, i32 0, i64 3
  %83 = load %struct.glyph*, %struct.glyph** %arrayidx82, align 8
  %add.ptr83 = getelementptr inbounds %struct.glyph, %struct.glyph* %83, i64 -1
  store %struct.glyph* %add.ptr83, %struct.glyph** %border, align 8
  br label %do.body.84

do.body.84:                                       ; preds = %if.then.80
  %84 = bitcast %struct.GLYPH* %right_border_glyph to i64*
  %85 = load i64, i64* %84, align 4
  %call85 = call i32 @GLYPH_CHAR(i64 %85)
  %86 = load %struct.glyph*, %struct.glyph** %border, align 8
  %u86 = getelementptr inbounds %struct.glyph, %struct.glyph* %86, i32 0, i32 9
  %ch87 = bitcast %union.anon.1* %u86 to i32*
  store i32 %call85, i32* %ch87, align 4
  %87 = bitcast %struct.GLYPH* %right_border_glyph to i64*
  %88 = load i64, i64* %87, align 4
  %call88 = call i32 @GLYPH_FACE(i64 %88)
  %89 = load %struct.glyph*, %struct.glyph** %border, align 8
  %face_id89 = getelementptr inbounds %struct.glyph, %struct.glyph* %89, i32 0, i32 7
  %90 = bitcast i24* %face_id89 to i32*
  %bf.load90 = load i32, i32* %90, align 4
  %bf.value = and i32 %call88, 1048575
  %bf.clear91 = and i32 %bf.load90, -1048576
  %bf.set92 = or i32 %bf.clear91, %bf.value
  store i32 %bf.set92, i32* %90, align 4
  %91 = load %struct.glyph*, %struct.glyph** %border, align 8
  %padding_p = getelementptr inbounds %struct.glyph, %struct.glyph* %91, i32 0, i32 6
  %92 = bitcast i24* %padding_p to i32*
  %bf.load93 = load i32, i32* %92, align 8
  %bf.clear94 = and i32 %bf.load93, -129
  store i32 %bf.clear94, i32* %92, align 8
  br label %do.end.95

do.end.95:                                        ; preds = %do.body.84
  br label %if.end.96

if.end.96:                                        ; preds = %do.end.95, %if.else.73
  br label %if.end.97

if.end.97:                                        ; preds = %if.end.96, %if.then.65
  %93 = load %struct.glyph_matrix*, %struct.glyph_matrix** %window_matrix, align 8
  %matrix_x98 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %93, i32 0, i32 4
  %94 = load i32, i32* %matrix_x98, align 4
  %95 = load %struct.glyph_matrix*, %struct.glyph_matrix** %window_matrix, align 8
  %matrix_w99 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %95, i32 0, i32 6
  %96 = load i32, i32* %matrix_w99, align 4
  %add100 = add nsw i32 %94, %96
  %conv101 = trunc i32 %add100 to i16
  %97 = load %struct.glyph_row*, %struct.glyph_row** %frame_row, align 8
  %used = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %97, i32 0, i32 1
  %arrayidx102 = getelementptr inbounds [4 x i16], [4 x i16]* %used, i32 0, i64 1
  store i16 %conv101, i16* %arrayidx102, align 2
  %98 = load i32, i32* %window_y, align 4
  %inc = add nsw i32 %98, 1
  store i32 %inc, i32* %window_y, align 4
  %99 = load i32, i32* %frame_y, align 4
  %inc103 = add nsw i32 %99, 1
  store i32 %inc103, i32* %frame_y, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

declare %struct.Lisp_Char_Table* @window_display_table(%struct.window*) #1

declare zeroext i1 @GLYPH_CODE_P(i64) #1

; Function Attrs: nounwind uwtable
define internal void @fill_up_glyph_row_with_spaces(%struct.glyph_row* %row) #0 {
entry:
  %row.addr = alloca %struct.glyph_row*, align 8
  store %struct.glyph_row* %row, %struct.glyph_row** %row.addr, align 8
  %0 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  call void @fill_up_glyph_row_area_with_spaces(%struct.glyph_row* %0, i32 0)
  %1 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  call void @fill_up_glyph_row_area_with_spaces(%struct.glyph_row* %1, i32 1)
  %2 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  call void @fill_up_glyph_row_area_with_spaces(%struct.glyph_row* %2, i32 2)
  ret void
}

declare i32 @GLYPH_CHAR(i64) #1

; Function Attrs: nounwind uwtable
define internal void @fill_up_glyph_row_area_with_spaces(%struct.glyph_row* %row, i32 %area) #0 {
entry:
  %row.addr = alloca %struct.glyph_row*, align 8
  %area.addr = alloca i32, align 4
  %end = alloca %struct.glyph*, align 8
  %text = alloca %struct.glyph*, align 8
  store %struct.glyph_row* %row, %struct.glyph_row** %row.addr, align 8
  store i32 %area, i32* %area.addr, align 4
  %0 = load i32, i32* %area.addr, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %glyphs = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %1, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs, i32 0, i64 %idxprom
  %2 = load %struct.glyph*, %struct.glyph** %arrayidx, align 8
  %3 = load i32, i32* %area.addr, align 4
  %add = add nsw i32 %3, 1
  %idxprom1 = sext i32 %add to i64
  %4 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %glyphs2 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %4, i32 0, i32 0
  %arrayidx3 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs2, i32 0, i64 %idxprom1
  %5 = load %struct.glyph*, %struct.glyph** %arrayidx3, align 8
  %cmp = icmp ult %struct.glyph* %2, %5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load i32, i32* %area.addr, align 4
  %add4 = add nsw i32 %6, 1
  %idxprom5 = sext i32 %add4 to i64
  %7 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %glyphs6 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %7, i32 0, i32 0
  %arrayidx7 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs6, i32 0, i64 %idxprom5
  %8 = load %struct.glyph*, %struct.glyph** %arrayidx7, align 8
  store %struct.glyph* %8, %struct.glyph** %end, align 8
  %9 = load i32, i32* %area.addr, align 4
  %idxprom8 = sext i32 %9 to i64
  %10 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %glyphs9 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %10, i32 0, i32 0
  %arrayidx10 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs9, i32 0, i64 %idxprom8
  %11 = load %struct.glyph*, %struct.glyph** %arrayidx10, align 8
  %12 = load i32, i32* %area.addr, align 4
  %idxprom11 = sext i32 %12 to i64
  %13 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %used = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %13, i32 0, i32 1
  %arrayidx12 = getelementptr inbounds [4 x i16], [4 x i16]* %used, i32 0, i64 %idxprom11
  %14 = load i16, i16* %arrayidx12, align 2
  %conv = sext i16 %14 to i32
  %idx.ext = sext i32 %conv to i64
  %add.ptr = getelementptr inbounds %struct.glyph, %struct.glyph* %11, i64 %idx.ext
  store %struct.glyph* %add.ptr, %struct.glyph** %text, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %15 = load %struct.glyph*, %struct.glyph** %text, align 8
  %16 = load %struct.glyph*, %struct.glyph** %end, align 8
  %cmp13 = icmp ult %struct.glyph* %15, %16
  br i1 %cmp13, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %17 = load %struct.glyph*, %struct.glyph** %text, align 8
  %incdec.ptr = getelementptr inbounds %struct.glyph, %struct.glyph* %17, i32 1
  store %struct.glyph* %incdec.ptr, %struct.glyph** %text, align 8
  %18 = bitcast %struct.glyph* %17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %18, i8* bitcast (%struct.glyph* @space_glyph to i8*), i64 48, i32 8, i1 false)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %19 = load %struct.glyph*, %struct.glyph** %text, align 8
  %20 = load i32, i32* %area.addr, align 4
  %idxprom15 = sext i32 %20 to i64
  %21 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %glyphs16 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %21, i32 0, i32 0
  %arrayidx17 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs16, i32 0, i64 %idxprom15
  %22 = load %struct.glyph*, %struct.glyph** %arrayidx17, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.glyph* %19 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.glyph* %22 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 48
  %conv18 = trunc i64 %sub.ptr.div to i16
  %23 = load i32, i32* %area.addr, align 4
  %idxprom19 = sext i32 %23 to i64
  %24 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %used20 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %24, i32 0, i32 1
  %arrayidx21 = getelementptr inbounds [4 x i16], [4 x i16]* %used20, i32 0, i64 %idxprom19
  store i16 %conv18, i16* %arrayidx21, align 2
  br label %if.end

if.end:                                           ; preds = %while.end, %entry
  ret void
}

declare i32 @window_text_bottom_y(%struct.window*) #1

; Function Attrs: nounwind uwtable
define internal zeroext i1 @update_window_line(%struct.window* %w, i32 %vpos, i8* %mouse_face_overwritten_p) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %vpos.addr = alloca i32, align 4
  %mouse_face_overwritten_p.addr = alloca i8*, align 8
  %current_row = alloca %struct.glyph_row*, align 8
  %desired_row = alloca %struct.glyph_row*, align 8
  %rif = alloca %struct.redisplay_interface*, align 8
  %changed_p = alloca i8, align 1
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i32 %vpos, i32* %vpos.addr, align 4
  store i8* %mouse_face_overwritten_p, i8** %mouse_face_overwritten_p.addr, align 8
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 24
  %1 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %1, i32 0, i32 1
  %2 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %3 = load i32, i32* %vpos.addr, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %2, i64 %idx.ext
  store %struct.glyph_row* %add.ptr, %struct.glyph_row** %current_row, align 8
  %4 = load %struct.window*, %struct.window** %w.addr, align 8
  %desired_matrix = getelementptr inbounds %struct.window, %struct.window* %4, i32 0, i32 25
  %5 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %rows1 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %5, i32 0, i32 1
  %6 = load %struct.glyph_row*, %struct.glyph_row** %rows1, align 8
  %7 = load i32, i32* %vpos.addr, align 4
  %idx.ext2 = sext i32 %7 to i64
  %add.ptr3 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %6, i64 %idx.ext2
  store %struct.glyph_row* %add.ptr3, %struct.glyph_row** %desired_row, align 8
  %8 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %8, i32 0, i32 1
  %9 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %9, 5
  %10 = inttoptr i64 %sub to i8*
  %11 = bitcast i8* %10 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 61
  %12 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %rif4 = getelementptr inbounds %struct.terminal, %struct.terminal* %12, i32 0, i32 15
  %13 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif4, align 8
  store %struct.redisplay_interface* %13, %struct.redisplay_interface** %rif, align 8
  store i8 0, i8* %changed_p, align 1
  %14 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %mode_line_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %14, i32 0, i32 22
  %15 = bitcast i40* %mode_line_p to i64*
  %bf.load = load i64, i64* %15, align 4
  %bf.lshr = lshr i64 %bf.load, 20
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %16 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %visible_height = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %16, i32 0, i32 10
  %17 = load i32, i32* %visible_height, align 4
  %cmp = icmp sgt i32 %17, 0
  br i1 %cmp, label %if.then, label %if.end.104

if.then:                                          ; preds = %lor.lhs.false, %entry
  %18 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %full_width_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %18, i32 0, i32 22
  %19 = bitcast i40* %full_width_p to i64*
  %bf.load5 = load i64, i64* %19, align 4
  %bf.lshr6 = lshr i64 %bf.load5, 19
  %bf.clear7 = and i64 %bf.lshr6, 1
  %bf.cast8 = trunc i64 %bf.clear7 to i1
  br i1 %bf.cast8, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then
  %20 = load %struct.window*, %struct.window** %w.addr, align 8
  %left_margin_cols = getelementptr inbounds %struct.window, %struct.window* %20, i32 0, i32 59
  %21 = load i32, i32* %left_margin_cols, align 4
  %cmp9 = icmp sgt i32 %21, 0
  br i1 %cmp9, label %if.then.10, label %if.end

if.then.10:                                       ; preds = %land.lhs.true
  store i8 1, i8* %changed_p, align 1
  %22 = load %struct.window*, %struct.window** %w.addr, align 8
  %23 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %24 = load i32, i32* %vpos.addr, align 4
  call void @update_marginal_area(%struct.window* %22, %struct.glyph_row* %23, i32 0, i32 %24)
  %25 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %redraw_fringe_bitmaps_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %25, i32 0, i32 22
  %26 = bitcast i40* %redraw_fringe_bitmaps_p to i64*
  %bf.load11 = load i64, i64* %26, align 4
  %bf.clear12 = and i64 %bf.load11, -513
  %bf.set = or i64 %bf.clear12, 512
  store i64 %bf.set, i64* %26, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.10, %land.lhs.true, %if.then
  %27 = load %struct.window*, %struct.window** %w.addr, align 8
  %28 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %29 = load i32, i32* %vpos.addr, align 4
  %call = call zeroext i1 @update_text_area(%struct.window* %27, %struct.glyph_row* %28, i32 %29)
  br i1 %call, label %if.then.13, label %if.end.20

if.then.13:                                       ; preds = %if.end
  store i8 1, i8* %changed_p, align 1
  %30 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %mouse_face_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %30, i32 0, i32 22
  %31 = bitcast i40* %mouse_face_p to i64*
  %bf.load14 = load i64, i64* %31, align 4
  %bf.lshr15 = lshr i64 %bf.load14, 25
  %bf.clear16 = and i64 %bf.lshr15, 1
  %bf.cast17 = trunc i64 %bf.clear16 to i1
  br i1 %bf.cast17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %if.then.13
  %32 = load i8*, i8** %mouse_face_overwritten_p.addr, align 8
  store i8 1, i8* %32, align 1
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.18, %if.then.13
  br label %if.end.20

if.end.20:                                        ; preds = %if.end.19, %if.end
  %33 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %full_width_p21 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %33, i32 0, i32 22
  %34 = bitcast i40* %full_width_p21 to i64*
  %bf.load22 = load i64, i64* %34, align 4
  %bf.lshr23 = lshr i64 %bf.load22, 19
  %bf.clear24 = and i64 %bf.lshr23, 1
  %bf.cast25 = trunc i64 %bf.clear24 to i1
  br i1 %bf.cast25, label %if.end.29, label %land.lhs.true.26

land.lhs.true.26:                                 ; preds = %if.end.20
  %35 = load %struct.window*, %struct.window** %w.addr, align 8
  %right_margin_cols = getelementptr inbounds %struct.window, %struct.window* %35, i32 0, i32 60
  %36 = load i32, i32* %right_margin_cols, align 4
  %cmp27 = icmp sgt i32 %36, 0
  br i1 %cmp27, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %land.lhs.true.26
  store i8 1, i8* %changed_p, align 1
  %37 = load %struct.window*, %struct.window** %w.addr, align 8
  %38 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %39 = load i32, i32* %vpos.addr, align 4
  call void @update_marginal_area(%struct.window* %37, %struct.glyph_row* %38, i32 2, i32 %39)
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.28, %land.lhs.true.26, %if.end.20
  %40 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %enabled_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %40, i32 0, i32 22
  %41 = bitcast i40* %enabled_p to i64*
  %bf.load30 = load i64, i64* %41, align 4
  %bf.lshr31 = lshr i64 %bf.load30, 10
  %bf.clear32 = and i64 %bf.lshr31, 1
  %bf.cast33 = trunc i64 %bf.clear32 to i1
  br i1 %bf.cast33, label %lor.lhs.false.34, label %if.then.102

lor.lhs.false.34:                                 ; preds = %if.end.29
  %42 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %y = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %42, i32 0, i32 4
  %43 = load i32, i32* %y, align 4
  %44 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %y35 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %44, i32 0, i32 4
  %45 = load i32, i32* %y35, align 4
  %cmp36 = icmp ne i32 %43, %45
  br i1 %cmp36, label %if.then.102, label %lor.lhs.false.37

lor.lhs.false.37:                                 ; preds = %lor.lhs.false.34
  %46 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %visible_height38 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %46, i32 0, i32 10
  %47 = load i32, i32* %visible_height38, align 4
  %48 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %visible_height39 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %48, i32 0, i32 10
  %49 = load i32, i32* %visible_height39, align 4
  %cmp40 = icmp ne i32 %47, %49
  br i1 %cmp40, label %if.then.102, label %lor.lhs.false.41

lor.lhs.false.41:                                 ; preds = %lor.lhs.false.37
  %50 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %cursor_in_fringe_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %50, i32 0, i32 22
  %51 = bitcast i40* %cursor_in_fringe_p to i64*
  %bf.load42 = load i64, i64* %51, align 4
  %bf.lshr43 = lshr i64 %bf.load42, 28
  %bf.clear44 = and i64 %bf.lshr43, 1
  %bf.cast45 = trunc i64 %bf.clear44 to i1
  %conv = zext i1 %bf.cast45 to i32
  %52 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %cursor_in_fringe_p46 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %52, i32 0, i32 22
  %53 = bitcast i40* %cursor_in_fringe_p46 to i64*
  %bf.load47 = load i64, i64* %53, align 4
  %bf.lshr48 = lshr i64 %bf.load47, 28
  %bf.clear49 = and i64 %bf.lshr48, 1
  %bf.cast50 = trunc i64 %bf.clear49 to i1
  %conv51 = zext i1 %bf.cast50 to i32
  %cmp52 = icmp ne i32 %conv, %conv51
  br i1 %cmp52, label %if.then.102, label %lor.lhs.false.54

lor.lhs.false.54:                                 ; preds = %lor.lhs.false.41
  %54 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %overlay_arrow_bitmap = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %54, i32 0, i32 16
  %55 = load i32, i32* %overlay_arrow_bitmap, align 4
  %56 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %overlay_arrow_bitmap55 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %56, i32 0, i32 16
  %57 = load i32, i32* %overlay_arrow_bitmap55, align 4
  %cmp56 = icmp ne i32 %55, %57
  br i1 %cmp56, label %if.then.102, label %lor.lhs.false.58

lor.lhs.false.58:                                 ; preds = %lor.lhs.false.54
  %58 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %redraw_fringe_bitmaps_p59 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %58, i32 0, i32 22
  %59 = bitcast i40* %redraw_fringe_bitmaps_p59 to i64*
  %bf.load60 = load i64, i64* %59, align 4
  %bf.lshr61 = lshr i64 %bf.load60, 9
  %bf.clear62 = and i64 %bf.lshr61, 1
  %bf.cast63 = trunc i64 %bf.clear62 to i1
  br i1 %bf.cast63, label %if.then.102, label %lor.lhs.false.65

lor.lhs.false.65:                                 ; preds = %lor.lhs.false.58
  %60 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %mode_line_p66 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %60, i32 0, i32 22
  %61 = bitcast i40* %mode_line_p66 to i64*
  %bf.load67 = load i64, i64* %61, align 4
  %bf.lshr68 = lshr i64 %bf.load67, 20
  %bf.clear69 = and i64 %bf.lshr68, 1
  %bf.cast70 = trunc i64 %bf.clear69 to i1
  %conv71 = zext i1 %bf.cast70 to i32
  %62 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %mode_line_p72 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %62, i32 0, i32 22
  %63 = bitcast i40* %mode_line_p72 to i64*
  %bf.load73 = load i64, i64* %63, align 4
  %bf.lshr74 = lshr i64 %bf.load73, 20
  %bf.clear75 = and i64 %bf.lshr74, 1
  %bf.cast76 = trunc i64 %bf.clear75 to i1
  %conv77 = zext i1 %bf.cast76 to i32
  %cmp78 = icmp ne i32 %conv71, %conv77
  br i1 %cmp78, label %if.then.102, label %lor.lhs.false.80

lor.lhs.false.80:                                 ; preds = %lor.lhs.false.65
  %64 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %exact_window_width_line_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %64, i32 0, i32 22
  %65 = bitcast i40* %exact_window_width_line_p to i64*
  %bf.load81 = load i64, i64* %65, align 4
  %bf.lshr82 = lshr i64 %bf.load81, 27
  %bf.clear83 = and i64 %bf.lshr82, 1
  %bf.cast84 = trunc i64 %bf.clear83 to i1
  %conv85 = zext i1 %bf.cast84 to i32
  %66 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %exact_window_width_line_p86 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %66, i32 0, i32 22
  %67 = bitcast i40* %exact_window_width_line_p86 to i64*
  %bf.load87 = load i64, i64* %67, align 4
  %bf.lshr88 = lshr i64 %bf.load87, 27
  %bf.clear89 = and i64 %bf.lshr88, 1
  %bf.cast90 = trunc i64 %bf.clear89 to i1
  %conv91 = zext i1 %bf.cast90 to i32
  %cmp92 = icmp ne i32 %conv85, %conv91
  br i1 %cmp92, label %if.then.102, label %lor.lhs.false.94

lor.lhs.false.94:                                 ; preds = %lor.lhs.false.80
  %68 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %continuation_lines_width = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %68, i32 0, i32 23
  %69 = load i32, i32* %continuation_lines_width, align 4
  %cmp95 = icmp sgt i32 %69, 0
  %conv96 = zext i1 %cmp95 to i32
  %70 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %continuation_lines_width97 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %70, i32 0, i32 23
  %71 = load i32, i32* %continuation_lines_width97, align 4
  %cmp98 = icmp sgt i32 %71, 0
  %conv99 = zext i1 %cmp98 to i32
  %cmp100 = icmp ne i32 %conv96, %conv99
  br i1 %cmp100, label %if.then.102, label %if.end.103

if.then.102:                                      ; preds = %lor.lhs.false.94, %lor.lhs.false.80, %lor.lhs.false.65, %lor.lhs.false.58, %lor.lhs.false.54, %lor.lhs.false.41, %lor.lhs.false.37, %lor.lhs.false.34, %if.end.29
  %72 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif, align 8
  %after_update_window_line_hook = getelementptr inbounds %struct.redisplay_interface, %struct.redisplay_interface* %72, i32 0, i32 6
  %73 = load void (%struct.window*, %struct.glyph_row*)*, void (%struct.window*, %struct.glyph_row*)** %after_update_window_line_hook, align 8
  %74 = load %struct.window*, %struct.window** %w.addr, align 8
  %75 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  call void %73(%struct.window* %74, %struct.glyph_row* %75)
  br label %if.end.103

if.end.103:                                       ; preds = %if.then.102, %lor.lhs.false.94
  br label %if.end.104

if.end.104:                                       ; preds = %if.end.103, %lor.lhs.false
  %76 = load %struct.window*, %struct.window** %w.addr, align 8
  %desired_matrix105 = getelementptr inbounds %struct.window, %struct.window* %76, i32 0, i32 25
  %77 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix105, align 8
  %78 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix106 = getelementptr inbounds %struct.window, %struct.window* %78, i32 0, i32 24
  %79 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix106, align 8
  %80 = load i32, i32* %vpos.addr, align 4
  call void @make_current(%struct.glyph_matrix* %77, %struct.glyph_matrix* %79, i32 %80)
  %81 = load i8, i8* %changed_p, align 1
  %tobool = trunc i8 %81 to i1
  ret i1 %tobool
}

; Function Attrs: nounwind uwtable
define internal i32 @scrolling_window(%struct.window* %w, i1 zeroext %header_line_p) #0 {
entry:
  %retval = alloca i32, align 4
  %w.addr = alloca %struct.window*, align 8
  %header_line_p.addr = alloca i8, align 1
  %desired_matrix = alloca %struct.glyph_matrix*, align 8
  %current_matrix = alloca %struct.glyph_matrix*, align 8
  %yb = alloca i32, align 4
  %i = alloca i64, align 8
  %j = alloca i32, align 4
  %first_old = alloca i32, align 4
  %first_new = alloca i32, align 4
  %last_old = alloca i32, align 4
  %last_new = alloca i32, align 4
  %nruns = alloca i32, align 4
  %run_idx = alloca i32, align 4
  %n = alloca i64, align 8
  %entry3 = alloca %struct.row_entry*, align 8
  %rif = alloca %struct.redisplay_interface*, align 8
  %d = alloca %struct.glyph_row*, align 8
  %c = alloca %struct.glyph_row*, align 8
  %bottom = alloca i32, align 4
  %bottom94 = alloca i32, align 4
  %row_table_max = alloca i64, align 8
  %current_nrows_max = alloca i64, align 8
  %size = alloca i64, align 8
  %p = alloca i32, align 4
  %q = alloca i32, align 4
  %new_line = alloca i32, align 4
  %run = alloca %struct.run*, align 8
  %h = alloca i32, align 4
  %h363 = alloca i32, align 4
  %r = alloca %struct.run*, align 8
  %p435 = alloca %struct.run*, align 8
  %truncated_p = alloca i8, align 1
  %nrows_copied = alloca i32, align 4
  %height_copied = alloca i32, align 4
  %k = alloca i32, align 4
  %from = alloca %struct.glyph_row*, align 8
  %to = alloca %struct.glyph_row*, align 8
  %to_overlapped_p = alloca i8, align 1
  store %struct.window* %w, %struct.window** %w.addr, align 8
  %frombool = zext i1 %header_line_p to i8
  store i8 %frombool, i8* %header_line_p.addr, align 1
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %desired_matrix1 = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 25
  %1 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix1, align 8
  store %struct.glyph_matrix* %1, %struct.glyph_matrix** %desired_matrix, align 8
  %2 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix2 = getelementptr inbounds %struct.window, %struct.window* %2, i32 0, i32 24
  %3 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix2, align 8
  store %struct.glyph_matrix* %3, %struct.glyph_matrix** %current_matrix, align 8
  %4 = load %struct.window*, %struct.window** %w.addr, align 8
  %call = call i32 @window_text_bottom_y(%struct.window* %4)
  store i32 %call, i32* %yb, align 4
  %5 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 1
  %6 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %6, 5
  %7 = inttoptr i64 %sub to i8*
  %8 = bitcast i8* %7 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 61
  %9 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %rif4 = getelementptr inbounds %struct.terminal, %struct.terminal* %9, i32 0, i32 15
  %10 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif4, align 8
  store %struct.redisplay_interface* %10, %struct.redisplay_interface** %rif, align 8
  %11 = load i8, i8* %header_line_p.addr, align 1
  %tobool = trunc i8 %11 to i1
  %conv = zext i1 %tobool to i64
  store i64 %conv, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %12 = load i64, i64* %i, align 8
  %13 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %nrows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %13, i32 0, i32 3
  %14 = load i32, i32* %nrows, align 4
  %sub5 = sub nsw i32 %14, 1
  %conv6 = sext i32 %sub5 to i64
  %cmp = icmp slt i64 %12, %conv6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %15 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %15, i32 0, i32 1
  %16 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %17 = load i64, i64* %i, align 8
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %16, i64 %17
  store %struct.glyph_row* %add.ptr, %struct.glyph_row** %d, align 8
  %18 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %rows8 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %18, i32 0, i32 1
  %19 = load %struct.glyph_row*, %struct.glyph_row** %rows8, align 8
  %20 = load i64, i64* %i, align 8
  %add.ptr9 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %19, i64 %20
  store %struct.glyph_row* %add.ptr9, %struct.glyph_row** %c, align 8
  %21 = load %struct.glyph_row*, %struct.glyph_row** %c, align 8
  %enabled_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %21, i32 0, i32 22
  %22 = bitcast i40* %enabled_p to i64*
  %bf.load = load i64, i64* %22, align 4
  %bf.lshr = lshr i64 %bf.load, 10
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body
  %23 = load %struct.glyph_row*, %struct.glyph_row** %d, align 8
  %enabled_p11 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %23, i32 0, i32 22
  %24 = bitcast i40* %enabled_p11 to i64*
  %bf.load12 = load i64, i64* %24, align 4
  %bf.lshr13 = lshr i64 %bf.load12, 10
  %bf.clear14 = and i64 %bf.lshr13, 1
  %bf.cast15 = trunc i64 %bf.clear14 to i1
  br i1 %bf.cast15, label %land.lhs.true.17, label %if.else

land.lhs.true.17:                                 ; preds = %land.lhs.true
  %25 = load %struct.glyph_row*, %struct.glyph_row** %d, align 8
  %redraw_fringe_bitmaps_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %25, i32 0, i32 22
  %26 = bitcast i40* %redraw_fringe_bitmaps_p to i64*
  %bf.load18 = load i64, i64* %26, align 4
  %bf.lshr19 = lshr i64 %bf.load18, 9
  %bf.clear20 = and i64 %bf.lshr19, 1
  %bf.cast21 = trunc i64 %bf.clear20 to i1
  br i1 %bf.cast21, label %if.else, label %land.lhs.true.22

land.lhs.true.22:                                 ; preds = %land.lhs.true.17
  %27 = load %struct.glyph_row*, %struct.glyph_row** %c, align 8
  %y = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %27, i32 0, i32 4
  %28 = load i32, i32* %y, align 4
  %29 = load %struct.glyph_row*, %struct.glyph_row** %d, align 8
  %y23 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %29, i32 0, i32 4
  %30 = load i32, i32* %y23, align 4
  %cmp24 = icmp eq i32 %28, %30
  br i1 %cmp24, label %land.lhs.true.26, label %if.else

land.lhs.true.26:                                 ; preds = %land.lhs.true.22
  %31 = load %struct.glyph_row*, %struct.glyph_row** %c, align 8
  %y27 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %31, i32 0, i32 4
  %32 = load i32, i32* %y27, align 4
  %33 = load %struct.glyph_row*, %struct.glyph_row** %c, align 8
  %height = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %33, i32 0, i32 7
  %34 = load i32, i32* %height, align 4
  %add = add nsw i32 %32, %34
  %35 = load i32, i32* %yb, align 4
  %cmp28 = icmp sle i32 %add, %35
  br i1 %cmp28, label %land.lhs.true.30, label %if.else

land.lhs.true.30:                                 ; preds = %land.lhs.true.26
  %36 = load %struct.glyph_row*, %struct.glyph_row** %d, align 8
  %y31 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %36, i32 0, i32 4
  %37 = load i32, i32* %y31, align 4
  %38 = load %struct.glyph_row*, %struct.glyph_row** %d, align 8
  %height32 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %38, i32 0, i32 7
  %39 = load i32, i32* %height32, align 4
  %add33 = add nsw i32 %37, %39
  %40 = load i32, i32* %yb, align 4
  %cmp34 = icmp sle i32 %add33, %40
  br i1 %cmp34, label %land.lhs.true.36, label %if.else

land.lhs.true.36:                                 ; preds = %land.lhs.true.30
  %41 = load %struct.glyph_row*, %struct.glyph_row** %c, align 8
  %42 = load %struct.glyph_row*, %struct.glyph_row** %d, align 8
  %call37 = call zeroext i1 @row_equal_p(%struct.glyph_row* %41, %struct.glyph_row* %42, i1 zeroext true)
  br i1 %call37, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true.36
  %43 = load %struct.glyph_row*, %struct.glyph_row** %c, align 8
  %44 = load %struct.glyph_row*, %struct.glyph_row** %d, align 8
  call void @assign_row(%struct.glyph_row* %43, %struct.glyph_row* %44)
  %45 = load %struct.glyph_row*, %struct.glyph_row** %d, align 8
  %enabled_p39 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %45, i32 0, i32 22
  %46 = bitcast i40* %enabled_p39 to i64*
  %bf.load40 = load i64, i64* %46, align 4
  %bf.clear41 = and i64 %bf.load40, -1025
  store i64 %bf.clear41, i64* %46, align 4
  br label %if.end

if.else:                                          ; preds = %land.lhs.true.36, %land.lhs.true.30, %land.lhs.true.26, %land.lhs.true.22, %land.lhs.true.17, %land.lhs.true, %for.body
  br label %for.end

if.end:                                           ; preds = %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %47 = load i64, i64* %i, align 8
  %inc = add nsw i64 %47, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %if.else, %for.cond
  %48 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %rows42 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %48, i32 0, i32 1
  %49 = load %struct.glyph_row*, %struct.glyph_row** %rows42, align 8
  %50 = load i64, i64* %i, align 8
  %add.ptr43 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %49, i64 %50
  %enabled_p44 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr43, i32 0, i32 22
  %51 = bitcast i40* %enabled_p44 to i64*
  %bf.load45 = load i64, i64* %51, align 4
  %bf.lshr46 = lshr i64 %bf.load45, 10
  %bf.clear47 = and i64 %bf.lshr46, 1
  %bf.cast48 = trunc i64 %bf.clear47 to i1
  br i1 %bf.cast48, label %if.end.50, label %if.then.49

if.then.49:                                       ; preds = %for.end
  store i32 -1, i32* %retval
  br label %return

if.end.50:                                        ; preds = %for.end
  %52 = load i64, i64* %i, align 8
  %conv51 = trunc i64 %52 to i32
  store i32 %conv51, i32* %first_new, align 4
  store i32 %conv51, i32* %first_old, align 4
  %53 = load i32, i32* %first_new, align 4
  %add52 = add nsw i32 %53, 1
  %conv53 = sext i32 %add52 to i64
  store i64 %conv53, i64* %i, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.83, %if.end.50
  %54 = load i64, i64* %i, align 8
  %55 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %nrows54 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %55, i32 0, i32 3
  %56 = load i32, i32* %nrows54, align 4
  %sub55 = sub nsw i32 %56, 1
  %conv56 = sext i32 %sub55 to i64
  %cmp57 = icmp slt i64 %54, %conv56
  br i1 %cmp57, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %57 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %rows59 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %57, i32 0, i32 1
  %58 = load %struct.glyph_row*, %struct.glyph_row** %rows59, align 8
  %59 = load i64, i64* %i, align 8
  %add.ptr60 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %58, i64 %59
  %enabled_p61 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr60, i32 0, i32 22
  %60 = bitcast i40* %enabled_p61 to i64*
  %bf.load62 = load i64, i64* %60, align 4
  %bf.lshr63 = lshr i64 %bf.load62, 10
  %bf.clear64 = and i64 %bf.lshr63, 1
  %bf.cast65 = trunc i64 %bf.clear64 to i1
  br i1 %bf.cast65, label %if.end.67, label %if.then.66

if.then.66:                                       ; preds = %while.body
  store i32 0, i32* %retval
  br label %return

if.end.67:                                        ; preds = %while.body
  %61 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %rows68 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %61, i32 0, i32 1
  %62 = load %struct.glyph_row*, %struct.glyph_row** %rows68, align 8
  %63 = load i64, i64* %i, align 8
  %add.ptr69 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %62, i64 %63
  %y70 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr69, i32 0, i32 4
  %64 = load i32, i32* %y70, align 4
  %65 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %rows71 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %65, i32 0, i32 1
  %66 = load %struct.glyph_row*, %struct.glyph_row** %rows71, align 8
  %67 = load i64, i64* %i, align 8
  %add.ptr72 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %66, i64 %67
  %height73 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr72, i32 0, i32 7
  %68 = load i32, i32* %height73, align 4
  %add74 = add nsw i32 %64, %68
  store i32 %add74, i32* %bottom, align 4
  %69 = load i32, i32* %bottom, align 4
  %70 = load i32, i32* %yb, align 4
  %cmp75 = icmp sle i32 %69, %70
  br i1 %cmp75, label %if.then.77, label %if.end.79

if.then.77:                                       ; preds = %if.end.67
  %71 = load i64, i64* %i, align 8
  %inc78 = add nsw i64 %71, 1
  store i64 %inc78, i64* %i, align 8
  br label %if.end.79

if.end.79:                                        ; preds = %if.then.77, %if.end.67
  %72 = load i32, i32* %bottom, align 4
  %73 = load i32, i32* %yb, align 4
  %cmp80 = icmp sge i32 %72, %73
  br i1 %cmp80, label %if.then.82, label %if.end.83

if.then.82:                                       ; preds = %if.end.79
  br label %while.end

if.end.83:                                        ; preds = %if.end.79
  br label %while.cond

while.end:                                        ; preds = %if.then.82, %while.cond
  %74 = load i64, i64* %i, align 8
  %conv84 = trunc i64 %74 to i32
  store i32 %conv84, i32* %last_new, align 4
  %75 = load i32, i32* %first_old, align 4
  %add85 = add nsw i32 %75, 1
  %conv86 = sext i32 %add85 to i64
  store i64 %conv86, i64* %i, align 8
  br label %while.cond.87

while.cond.87:                                    ; preds = %if.end.110, %while.end
  %76 = load i64, i64* %i, align 8
  %77 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %nrows88 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %77, i32 0, i32 3
  %78 = load i32, i32* %nrows88, align 4
  %sub89 = sub nsw i32 %78, 1
  %conv90 = sext i32 %sub89 to i64
  %cmp91 = icmp slt i64 %76, %conv90
  br i1 %cmp91, label %while.body.93, label %while.end.111

while.body.93:                                    ; preds = %while.cond.87
  %79 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %rows95 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %79, i32 0, i32 1
  %80 = load %struct.glyph_row*, %struct.glyph_row** %rows95, align 8
  %81 = load i64, i64* %i, align 8
  %add.ptr96 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %80, i64 %81
  %y97 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr96, i32 0, i32 4
  %82 = load i32, i32* %y97, align 4
  %83 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %rows98 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %83, i32 0, i32 1
  %84 = load %struct.glyph_row*, %struct.glyph_row** %rows98, align 8
  %85 = load i64, i64* %i, align 8
  %add.ptr99 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %84, i64 %85
  %height100 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr99, i32 0, i32 7
  %86 = load i32, i32* %height100, align 4
  %add101 = add nsw i32 %82, %86
  store i32 %add101, i32* %bottom94, align 4
  %87 = load i32, i32* %bottom94, align 4
  %88 = load i32, i32* %yb, align 4
  %cmp102 = icmp sle i32 %87, %88
  br i1 %cmp102, label %if.then.104, label %if.end.106

if.then.104:                                      ; preds = %while.body.93
  %89 = load i64, i64* %i, align 8
  %inc105 = add nsw i64 %89, 1
  store i64 %inc105, i64* %i, align 8
  br label %if.end.106

if.end.106:                                       ; preds = %if.then.104, %while.body.93
  %90 = load i32, i32* %bottom94, align 4
  %91 = load i32, i32* %yb, align 4
  %cmp107 = icmp sge i32 %90, %91
  br i1 %cmp107, label %if.then.109, label %if.end.110

if.then.109:                                      ; preds = %if.end.106
  br label %while.end.111

if.end.110:                                       ; preds = %if.end.106
  br label %while.cond.87

while.end.111:                                    ; preds = %if.then.109, %while.cond.87
  %92 = load i64, i64* %i, align 8
  %conv112 = trunc i64 %92 to i32
  store i32 %conv112, i32* %last_old, align 4
  %93 = load i32, i32* %last_new, align 4
  %conv113 = sext i32 %93 to i64
  store i64 %conv113, i64* %i, align 8
  %94 = load i32, i32* %last_old, align 4
  store i32 %94, i32* %j, align 4
  br label %while.cond.114

while.cond.114:                                   ; preds = %while.body.163, %while.end.111
  %95 = load i64, i64* %i, align 8
  %sub115 = sub nsw i64 %95, 1
  %96 = load i32, i32* %first_new, align 4
  %conv116 = sext i32 %96 to i64
  %cmp117 = icmp sgt i64 %sub115, %conv116
  br i1 %cmp117, label %land.lhs.true.119, label %land.end

land.lhs.true.119:                                ; preds = %while.cond.114
  %97 = load i32, i32* %j, align 4
  %sub120 = sub nsw i32 %97, 1
  %98 = load i32, i32* %first_old, align 4
  %cmp121 = icmp sgt i32 %sub120, %98
  br i1 %cmp121, label %land.lhs.true.123, label %land.end

land.lhs.true.123:                                ; preds = %land.lhs.true.119
  %99 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %rows124 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %99, i32 0, i32 1
  %100 = load %struct.glyph_row*, %struct.glyph_row** %rows124, align 8
  %101 = load i32, i32* %j, align 4
  %sub125 = sub nsw i32 %101, 1
  %idx.ext = sext i32 %sub125 to i64
  %add.ptr126 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %100, i64 %idx.ext
  %enabled_p127 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr126, i32 0, i32 22
  %102 = bitcast i40* %enabled_p127 to i64*
  %bf.load128 = load i64, i64* %102, align 4
  %bf.lshr129 = lshr i64 %bf.load128, 10
  %bf.clear130 = and i64 %bf.lshr129, 1
  %bf.cast131 = trunc i64 %bf.clear130 to i1
  br i1 %bf.cast131, label %land.lhs.true.133, label %land.end

land.lhs.true.133:                                ; preds = %land.lhs.true.123
  %103 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %rows134 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %103, i32 0, i32 1
  %104 = load %struct.glyph_row*, %struct.glyph_row** %rows134, align 8
  %105 = load i32, i32* %j, align 4
  %sub135 = sub nsw i32 %105, 1
  %idx.ext136 = sext i32 %sub135 to i64
  %add.ptr137 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %104, i64 %idx.ext136
  %y138 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr137, i32 0, i32 4
  %106 = load i32, i32* %y138, align 4
  %107 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %rows139 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %107, i32 0, i32 1
  %108 = load %struct.glyph_row*, %struct.glyph_row** %rows139, align 8
  %109 = load i64, i64* %i, align 8
  %sub140 = sub nsw i64 %109, 1
  %add.ptr141 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %108, i64 %sub140
  %y142 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr141, i32 0, i32 4
  %110 = load i32, i32* %y142, align 4
  %cmp143 = icmp eq i32 %106, %110
  br i1 %cmp143, label %land.lhs.true.145, label %land.end

land.lhs.true.145:                                ; preds = %land.lhs.true.133
  %111 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %rows146 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %111, i32 0, i32 1
  %112 = load %struct.glyph_row*, %struct.glyph_row** %rows146, align 8
  %113 = load i64, i64* %i, align 8
  %sub147 = sub nsw i64 %113, 1
  %add.ptr148 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %112, i64 %sub147
  %redraw_fringe_bitmaps_p149 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr148, i32 0, i32 22
  %114 = bitcast i40* %redraw_fringe_bitmaps_p149 to i64*
  %bf.load150 = load i64, i64* %114, align 4
  %bf.lshr151 = lshr i64 %bf.load150, 9
  %bf.clear152 = and i64 %bf.lshr151, 1
  %bf.cast153 = trunc i64 %bf.clear152 to i1
  br i1 %bf.cast153, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true.145
  %115 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %rows154 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %115, i32 0, i32 1
  %116 = load %struct.glyph_row*, %struct.glyph_row** %rows154, align 8
  %117 = load i64, i64* %i, align 8
  %sub155 = sub nsw i64 %117, 1
  %add.ptr156 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %116, i64 %sub155
  %118 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %rows157 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %118, i32 0, i32 1
  %119 = load %struct.glyph_row*, %struct.glyph_row** %rows157, align 8
  %120 = load i32, i32* %j, align 4
  %sub158 = sub nsw i32 %120, 1
  %idx.ext159 = sext i32 %sub158 to i64
  %add.ptr160 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %119, i64 %idx.ext159
  %call161 = call zeroext i1 @row_equal_p(%struct.glyph_row* %add.ptr156, %struct.glyph_row* %add.ptr160, i1 zeroext true)
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true.145, %land.lhs.true.133, %land.lhs.true.123, %land.lhs.true.119, %while.cond.114
  %121 = phi i1 [ false, %land.lhs.true.145 ], [ false, %land.lhs.true.133 ], [ false, %land.lhs.true.123 ], [ false, %land.lhs.true.119 ], [ false, %while.cond.114 ], [ %call161, %land.rhs ]
  br i1 %121, label %while.body.163, label %while.end.165

while.body.163:                                   ; preds = %land.end
  %122 = load i64, i64* %i, align 8
  %dec = add nsw i64 %122, -1
  store i64 %dec, i64* %i, align 8
  %123 = load i32, i32* %j, align 4
  %dec164 = add nsw i32 %123, -1
  store i32 %dec164, i32* %j, align 4
  br label %while.cond.114

while.end.165:                                    ; preds = %land.end
  %124 = load i64, i64* %i, align 8
  %conv166 = trunc i64 %124 to i32
  store i32 %conv166, i32* %last_new, align 4
  %125 = load i32, i32* %j, align 4
  store i32 %125, i32* %last_old, align 4
  %126 = load i32, i32* %last_new, align 4
  %127 = load i32, i32* %first_new, align 4
  %cmp167 = icmp eq i32 %126, %127
  br i1 %cmp167, label %if.then.169, label %if.end.170

if.then.169:                                      ; preds = %while.end.165
  store i32 0, i32* %retval
  br label %return

if.end.170:                                       ; preds = %while.end.165
  store i64 384307168202282315, i64* %row_table_max, align 8
  %128 = load i64, i64* %row_table_max, align 8
  %129 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %nrows171 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %129, i32 0, i32 3
  %130 = load i32, i32* %nrows171, align 4
  %conv172 = sext i32 %130 to i64
  %sub173 = sub nsw i64 %128, %conv172
  store i64 %sub173, i64* %current_nrows_max, align 8
  %131 = load i64, i64* %current_nrows_max, align 8
  %132 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %nrows174 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %132, i32 0, i32 3
  %133 = load i32, i32* %nrows174, align 4
  %conv175 = sext i32 %133 to i64
  %cmp176 = icmp slt i64 %131, %conv175
  br i1 %cmp176, label %if.then.178, label %if.end.179

if.then.178:                                      ; preds = %if.end.170
  call void @memory_full(i64 -1) #8
  unreachable

if.end.179:                                       ; preds = %if.end.170
  %134 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %nrows180 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %134, i32 0, i32 3
  %135 = load i32, i32* %nrows180, align 4
  %conv181 = sext i32 %135 to i64
  %136 = load i64, i64* @old_lines_size, align 8
  %cmp182 = icmp sgt i64 %conv181, %136
  br i1 %cmp182, label %if.then.184, label %if.end.189

if.then.184:                                      ; preds = %if.end.179
  %137 = load %struct.row_entry**, %struct.row_entry*** @old_lines, align 8
  %138 = bitcast %struct.row_entry** %137 to i8*
  %139 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %nrows185 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %139, i32 0, i32 3
  %140 = load i32, i32* %nrows185, align 4
  %conv186 = sext i32 %140 to i64
  %141 = load i64, i64* @old_lines_size, align 8
  %sub187 = sub nsw i64 %conv186, %141
  %call188 = call i8* @xpalloc(i8* %138, i64* @old_lines_size, i64 %sub187, i64 2147483647, i64 8)
  %142 = bitcast i8* %call188 to %struct.row_entry**
  store %struct.row_entry** %142, %struct.row_entry*** @old_lines, align 8
  br label %if.end.189

if.end.189:                                       ; preds = %if.then.184, %if.end.179
  %143 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %nrows190 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %143, i32 0, i32 3
  %144 = load i32, i32* %nrows190, align 4
  %conv191 = sext i32 %144 to i64
  %145 = load i64, i64* @new_lines_size, align 8
  %cmp192 = icmp sgt i64 %conv191, %145
  br i1 %cmp192, label %if.then.194, label %if.end.199

if.then.194:                                      ; preds = %if.end.189
  %146 = load %struct.row_entry**, %struct.row_entry*** @new_lines, align 8
  %147 = bitcast %struct.row_entry** %146 to i8*
  %148 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %nrows195 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %148, i32 0, i32 3
  %149 = load i32, i32* %nrows195, align 4
  %conv196 = sext i32 %149 to i64
  %150 = load i64, i64* @new_lines_size, align 8
  %sub197 = sub nsw i64 %conv196, %150
  %call198 = call i8* @xpalloc(i8* %147, i64* @new_lines_size, i64 %sub197, i64 2147483647, i64 8)
  %151 = bitcast i8* %call198 to %struct.row_entry**
  store %struct.row_entry** %151, %struct.row_entry*** @new_lines, align 8
  br label %if.end.199

if.end.199:                                       ; preds = %if.then.194, %if.end.189
  %152 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %nrows200 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %152, i32 0, i32 3
  %153 = load i32, i32* %nrows200, align 4
  %conv201 = sext i32 %153 to i64
  store i64 %conv201, i64* %n, align 8
  %154 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %nrows202 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %154, i32 0, i32 3
  %155 = load i32, i32* %nrows202, align 4
  %conv203 = sext i32 %155 to i64
  %156 = load i64, i64* %n, align 8
  %add204 = add nsw i64 %156, %conv203
  store i64 %add204, i64* %n, align 8
  %157 = load i64, i64* @row_table_size, align 8
  %158 = load i64, i64* %n, align 8
  %mul = mul nsw i64 3, %158
  %cmp205 = icmp slt i64 %157, %mul
  br i1 %cmp205, label %if.then.207, label %if.end.212

if.then.207:                                      ; preds = %if.end.199
  %159 = load i64, i64* %n, align 8
  %mul208 = mul nsw i64 3, %159
  %call209 = call i64 @next_almost_prime(i64 %mul208) #9
  store i64 %call209, i64* %size, align 8
  %160 = load %struct.row_entry**, %struct.row_entry*** @row_table, align 8
  %161 = bitcast %struct.row_entry** %160 to i8*
  %162 = load i64, i64* %size, align 8
  %call210 = call i8* @xnrealloc(i8* %161, i64 %162, i64 8)
  %163 = bitcast i8* %call210 to %struct.row_entry**
  store %struct.row_entry** %163, %struct.row_entry*** @row_table, align 8
  %164 = load i64, i64* %size, align 8
  store i64 %164, i64* @row_table_size, align 8
  %165 = load %struct.row_entry**, %struct.row_entry*** @row_table, align 8
  %166 = bitcast %struct.row_entry** %165 to i8*
  %167 = load i64, i64* %size, align 8
  %mul211 = mul i64 %167, 8
  call void @llvm.memset.p0i8.i64(i8* %166, i8 0, i64 %mul211, i32 8, i1 false)
  br label %if.end.212

if.end.212:                                       ; preds = %if.then.207, %if.end.199
  %168 = load i64, i64* %n, align 8
  %169 = load i64, i64* @row_entry_pool_size, align 8
  %cmp213 = icmp sgt i64 %168, %169
  br i1 %cmp213, label %if.then.215, label %if.end.218

if.then.215:                                      ; preds = %if.end.212
  %170 = load %struct.row_entry*, %struct.row_entry** @row_entry_pool, align 8
  %171 = bitcast %struct.row_entry* %170 to i8*
  %172 = load i64, i64* %n, align 8
  %173 = load i64, i64* @row_entry_pool_size, align 8
  %sub216 = sub nsw i64 %172, %173
  %call217 = call i8* @xpalloc(i8* %171, i64* @row_entry_pool_size, i64 %sub216, i64 -1, i64 40)
  %174 = bitcast i8* %call217 to %struct.row_entry*
  store %struct.row_entry* %174, %struct.row_entry** @row_entry_pool, align 8
  br label %if.end.218

if.end.218:                                       ; preds = %if.then.215, %if.end.212
  %175 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %nrows219 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %175, i32 0, i32 3
  %176 = load i32, i32* %nrows219, align 4
  %conv220 = sext i32 %176 to i64
  %177 = load i64, i64* @runs_size, align 8
  %cmp221 = icmp sgt i64 %conv220, %177
  br i1 %cmp221, label %if.then.223, label %if.end.232

if.then.223:                                      ; preds = %if.end.218
  %178 = load %struct.run**, %struct.run*** @runs, align 8
  %179 = bitcast %struct.run** %178 to i8*
  %180 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %nrows224 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %180, i32 0, i32 3
  %181 = load i32, i32* %nrows224, align 4
  %conv225 = sext i32 %181 to i64
  %call226 = call i8* @xnrealloc(i8* %179, i64 %conv225, i64 8)
  %182 = bitcast i8* %call226 to %struct.run**
  store %struct.run** %182, %struct.run*** @runs, align 8
  %183 = load %struct.run*, %struct.run** @run_pool, align 8
  %184 = bitcast %struct.run* %183 to i8*
  %185 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %nrows227 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %185, i32 0, i32 3
  %186 = load i32, i32* %nrows227, align 4
  %conv228 = sext i32 %186 to i64
  %call229 = call i8* @xnrealloc(i8* %184, i64 %conv228, i64 24)
  %187 = bitcast i8* %call229 to %struct.run*
  store %struct.run* %187, %struct.run** @run_pool, align 8
  %188 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %nrows230 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %188, i32 0, i32 3
  %189 = load i32, i32* %nrows230, align 4
  %conv231 = sext i32 %189 to i64
  store i64 %conv231, i64* @runs_size, align 8
  br label %if.end.232

if.end.232:                                       ; preds = %if.then.223, %if.end.218
  store i32 0, i32* %run_idx, align 4
  store i32 0, i32* %nruns, align 4
  store i64 0, i64* @row_entry_idx, align 8
  %190 = load i32, i32* %first_old, align 4
  %conv233 = sext i32 %190 to i64
  store i64 %conv233, i64* %i, align 8
  br label %for.cond.234

for.cond.234:                                     ; preds = %for.inc.254, %if.end.232
  %191 = load i64, i64* %i, align 8
  %192 = load i32, i32* %last_old, align 4
  %conv235 = sext i32 %192 to i64
  %cmp236 = icmp slt i64 %191, %conv235
  br i1 %cmp236, label %for.body.238, label %for.end.256

for.body.238:                                     ; preds = %for.cond.234
  %193 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %rows239 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %193, i32 0, i32 1
  %194 = load %struct.glyph_row*, %struct.glyph_row** %rows239, align 8
  %195 = load i64, i64* %i, align 8
  %add.ptr240 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %194, i64 %195
  %enabled_p241 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr240, i32 0, i32 22
  %196 = bitcast i40* %enabled_p241 to i64*
  %bf.load242 = load i64, i64* %196, align 4
  %bf.lshr243 = lshr i64 %bf.load242, 10
  %bf.clear244 = and i64 %bf.lshr243, 1
  %bf.cast245 = trunc i64 %bf.clear244 to i1
  br i1 %bf.cast245, label %if.then.246, label %if.else.251

if.then.246:                                      ; preds = %for.body.238
  %197 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %rows247 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %197, i32 0, i32 1
  %198 = load %struct.glyph_row*, %struct.glyph_row** %rows247, align 8
  %199 = load i64, i64* %i, align 8
  %add.ptr248 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %198, i64 %199
  %call249 = call %struct.row_entry* @add_row_entry(%struct.glyph_row* %add.ptr248)
  store %struct.row_entry* %call249, %struct.row_entry** %entry3, align 8
  %200 = load %struct.row_entry*, %struct.row_entry** %entry3, align 8
  %201 = load i64, i64* %i, align 8
  %202 = load %struct.row_entry**, %struct.row_entry*** @old_lines, align 8
  %arrayidx = getelementptr inbounds %struct.row_entry*, %struct.row_entry** %202, i64 %201
  store %struct.row_entry* %200, %struct.row_entry** %arrayidx, align 8
  %203 = load %struct.row_entry*, %struct.row_entry** %entry3, align 8
  %old_uses = getelementptr inbounds %struct.row_entry, %struct.row_entry* %203, i32 0, i32 0
  %204 = load i32, i32* %old_uses, align 4
  %inc250 = add nsw i32 %204, 1
  store i32 %inc250, i32* %old_uses, align 4
  br label %if.end.253

if.else.251:                                      ; preds = %for.body.238
  %205 = load i64, i64* %i, align 8
  %206 = load %struct.row_entry**, %struct.row_entry*** @old_lines, align 8
  %arrayidx252 = getelementptr inbounds %struct.row_entry*, %struct.row_entry** %206, i64 %205
  store %struct.row_entry* null, %struct.row_entry** %arrayidx252, align 8
  br label %if.end.253

if.end.253:                                       ; preds = %if.else.251, %if.then.246
  br label %for.inc.254

for.inc.254:                                      ; preds = %if.end.253
  %207 = load i64, i64* %i, align 8
  %inc255 = add nsw i64 %207, 1
  store i64 %inc255, i64* %i, align 8
  br label %for.cond.234

for.end.256:                                      ; preds = %for.cond.234
  %208 = load i32, i32* %first_new, align 4
  %conv257 = sext i32 %208 to i64
  store i64 %conv257, i64* %i, align 8
  br label %for.cond.258

for.cond.258:                                     ; preds = %for.inc.269, %for.end.256
  %209 = load i64, i64* %i, align 8
  %210 = load i32, i32* %last_new, align 4
  %conv259 = sext i32 %210 to i64
  %cmp260 = icmp slt i64 %209, %conv259
  br i1 %cmp260, label %for.body.262, label %for.end.271

for.body.262:                                     ; preds = %for.cond.258
  %211 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %rows263 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %211, i32 0, i32 1
  %212 = load %struct.glyph_row*, %struct.glyph_row** %rows263, align 8
  %213 = load i64, i64* %i, align 8
  %add.ptr264 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %212, i64 %213
  %call265 = call %struct.row_entry* @add_row_entry(%struct.glyph_row* %add.ptr264)
  store %struct.row_entry* %call265, %struct.row_entry** %entry3, align 8
  %214 = load %struct.row_entry*, %struct.row_entry** %entry3, align 8
  %new_uses = getelementptr inbounds %struct.row_entry, %struct.row_entry* %214, i32 0, i32 1
  %215 = load i32, i32* %new_uses, align 4
  %inc266 = add nsw i32 %215, 1
  store i32 %inc266, i32* %new_uses, align 4
  %216 = load i64, i64* %i, align 8
  %conv267 = trunc i64 %216 to i32
  %217 = load %struct.row_entry*, %struct.row_entry** %entry3, align 8
  %new_line_number = getelementptr inbounds %struct.row_entry, %struct.row_entry* %217, i32 0, i32 2
  store i32 %conv267, i32* %new_line_number, align 4
  %218 = load %struct.row_entry*, %struct.row_entry** %entry3, align 8
  %219 = load i64, i64* %i, align 8
  %220 = load %struct.row_entry**, %struct.row_entry*** @new_lines, align 8
  %arrayidx268 = getelementptr inbounds %struct.row_entry*, %struct.row_entry** %220, i64 %219
  store %struct.row_entry* %218, %struct.row_entry** %arrayidx268, align 8
  br label %for.inc.269

for.inc.269:                                      ; preds = %for.body.262
  %221 = load i64, i64* %i, align 8
  %inc270 = add nsw i64 %221, 1
  store i64 %inc270, i64* %i, align 8
  br label %for.cond.258

for.end.271:                                      ; preds = %for.cond.258
  %222 = load i32, i32* %first_old, align 4
  %conv272 = sext i32 %222 to i64
  store i64 %conv272, i64* %i, align 8
  br label %for.cond.273

for.cond.273:                                     ; preds = %if.end.410, %for.end.271
  %223 = load i64, i64* %i, align 8
  %224 = load i32, i32* %last_old, align 4
  %conv274 = sext i32 %224 to i64
  %cmp275 = icmp slt i64 %223, %conv274
  br i1 %cmp275, label %for.body.277, label %for.end.411

for.body.277:                                     ; preds = %for.cond.273
  %225 = load i64, i64* %i, align 8
  %226 = load %struct.row_entry**, %struct.row_entry*** @old_lines, align 8
  %arrayidx278 = getelementptr inbounds %struct.row_entry*, %struct.row_entry** %226, i64 %225
  %227 = load %struct.row_entry*, %struct.row_entry** %arrayidx278, align 8
  %tobool279 = icmp ne %struct.row_entry* %227, null
  br i1 %tobool279, label %land.lhs.true.280, label %if.else.408

land.lhs.true.280:                                ; preds = %for.body.277
  %228 = load i64, i64* %i, align 8
  %229 = load %struct.row_entry**, %struct.row_entry*** @old_lines, align 8
  %arrayidx281 = getelementptr inbounds %struct.row_entry*, %struct.row_entry** %229, i64 %228
  %230 = load %struct.row_entry*, %struct.row_entry** %arrayidx281, align 8
  %old_uses282 = getelementptr inbounds %struct.row_entry, %struct.row_entry* %230, i32 0, i32 0
  %231 = load i32, i32* %old_uses282, align 4
  %cmp283 = icmp eq i32 %231, 1
  br i1 %cmp283, label %land.lhs.true.285, label %if.else.408

land.lhs.true.285:                                ; preds = %land.lhs.true.280
  %232 = load i64, i64* %i, align 8
  %233 = load %struct.row_entry**, %struct.row_entry*** @old_lines, align 8
  %arrayidx286 = getelementptr inbounds %struct.row_entry*, %struct.row_entry** %233, i64 %232
  %234 = load %struct.row_entry*, %struct.row_entry** %arrayidx286, align 8
  %new_uses287 = getelementptr inbounds %struct.row_entry, %struct.row_entry* %234, i32 0, i32 1
  %235 = load i32, i32* %new_uses287, align 4
  %cmp288 = icmp eq i32 %235, 1
  br i1 %cmp288, label %if.then.290, label %if.else.408

if.then.290:                                      ; preds = %land.lhs.true.285
  %236 = load i64, i64* %i, align 8
  %237 = load %struct.row_entry**, %struct.row_entry*** @old_lines, align 8
  %arrayidx291 = getelementptr inbounds %struct.row_entry*, %struct.row_entry** %237, i64 %236
  %238 = load %struct.row_entry*, %struct.row_entry** %arrayidx291, align 8
  %new_line_number292 = getelementptr inbounds %struct.row_entry, %struct.row_entry* %238, i32 0, i32 2
  %239 = load i32, i32* %new_line_number292, align 4
  store i32 %239, i32* %new_line, align 4
  %240 = load %struct.run*, %struct.run** @run_pool, align 8
  %241 = load i32, i32* %run_idx, align 4
  %inc293 = add nsw i32 %241, 1
  store i32 %inc293, i32* %run_idx, align 4
  %idx.ext294 = sext i32 %241 to i64
  %add.ptr295 = getelementptr inbounds %struct.run, %struct.run* %240, i64 %idx.ext294
  store %struct.run* %add.ptr295, %struct.run** %run, align 8
  %242 = load i64, i64* %i, align 8
  %conv296 = trunc i64 %242 to i32
  %243 = load %struct.run*, %struct.run** %run, align 8
  %current_vpos = getelementptr inbounds %struct.run, %struct.run* %243, i32 0, i32 3
  store i32 %conv296, i32* %current_vpos, align 4
  %244 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %rows297 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %244, i32 0, i32 1
  %245 = load %struct.glyph_row*, %struct.glyph_row** %rows297, align 8
  %246 = load i64, i64* %i, align 8
  %add.ptr298 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %245, i64 %246
  %y299 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr298, i32 0, i32 4
  %247 = load i32, i32* %y299, align 4
  %248 = load %struct.run*, %struct.run** %run, align 8
  %current_y = getelementptr inbounds %struct.run, %struct.run* %248, i32 0, i32 1
  store i32 %247, i32* %current_y, align 4
  %249 = load i32, i32* %new_line, align 4
  %250 = load %struct.run*, %struct.run** %run, align 8
  %desired_vpos = getelementptr inbounds %struct.run, %struct.run* %250, i32 0, i32 2
  store i32 %249, i32* %desired_vpos, align 4
  %251 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %rows300 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %251, i32 0, i32 1
  %252 = load %struct.glyph_row*, %struct.glyph_row** %rows300, align 8
  %253 = load i32, i32* %new_line, align 4
  %idx.ext301 = sext i32 %253 to i64
  %add.ptr302 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %252, i64 %idx.ext301
  %y303 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr302, i32 0, i32 4
  %254 = load i32, i32* %y303, align 4
  %255 = load %struct.run*, %struct.run** %run, align 8
  %desired_y = getelementptr inbounds %struct.run, %struct.run* %255, i32 0, i32 0
  store i32 %254, i32* %desired_y, align 4
  %256 = load %struct.run*, %struct.run** %run, align 8
  %nrows304 = getelementptr inbounds %struct.run, %struct.run* %256, i32 0, i32 5
  store i32 1, i32* %nrows304, align 4
  %257 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %rows305 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %257, i32 0, i32 1
  %258 = load %struct.glyph_row*, %struct.glyph_row** %rows305, align 8
  %259 = load i64, i64* %i, align 8
  %add.ptr306 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %258, i64 %259
  %height307 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr306, i32 0, i32 7
  %260 = load i32, i32* %height307, align 4
  %261 = load %struct.run*, %struct.run** %run, align 8
  %height308 = getelementptr inbounds %struct.run, %struct.run* %261, i32 0, i32 4
  store i32 %260, i32* %height308, align 4
  %262 = load i64, i64* %i, align 8
  %sub309 = sub nsw i64 %262, 1
  %conv310 = trunc i64 %sub309 to i32
  store i32 %conv310, i32* %p, align 4
  %263 = load i32, i32* %new_line, align 4
  %sub311 = sub nsw i32 %263, 1
  store i32 %sub311, i32* %q, align 4
  br label %while.cond.312

while.cond.312:                                   ; preds = %while.body.325, %if.then.290
  %264 = load i32, i32* %p, align 4
  %265 = load i32, i32* %first_old, align 4
  %cmp313 = icmp sgt i32 %264, %265
  br i1 %cmp313, label %land.lhs.true.315, label %land.end.324

land.lhs.true.315:                                ; preds = %while.cond.312
  %266 = load i32, i32* %q, align 4
  %267 = load i32, i32* %first_new, align 4
  %cmp316 = icmp sgt i32 %266, %267
  br i1 %cmp316, label %land.rhs.318, label %land.end.324

land.rhs.318:                                     ; preds = %land.lhs.true.315
  %268 = load i32, i32* %p, align 4
  %idxprom = sext i32 %268 to i64
  %269 = load %struct.row_entry**, %struct.row_entry*** @old_lines, align 8
  %arrayidx319 = getelementptr inbounds %struct.row_entry*, %struct.row_entry** %269, i64 %idxprom
  %270 = load %struct.row_entry*, %struct.row_entry** %arrayidx319, align 8
  %271 = load i32, i32* %q, align 4
  %idxprom320 = sext i32 %271 to i64
  %272 = load %struct.row_entry**, %struct.row_entry*** @new_lines, align 8
  %arrayidx321 = getelementptr inbounds %struct.row_entry*, %struct.row_entry** %272, i64 %idxprom320
  %273 = load %struct.row_entry*, %struct.row_entry** %arrayidx321, align 8
  %cmp322 = icmp eq %struct.row_entry* %270, %273
  br label %land.end.324

land.end.324:                                     ; preds = %land.rhs.318, %land.lhs.true.315, %while.cond.312
  %274 = phi i1 [ false, %land.lhs.true.315 ], [ false, %while.cond.312 ], [ %cmp322, %land.rhs.318 ]
  br i1 %274, label %while.body.325, label %while.end.344

while.body.325:                                   ; preds = %land.end.324
  %275 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %rows326 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %275, i32 0, i32 1
  %276 = load %struct.glyph_row*, %struct.glyph_row** %rows326, align 8
  %277 = load i32, i32* %p, align 4
  %idx.ext327 = sext i32 %277 to i64
  %add.ptr328 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %276, i64 %idx.ext327
  %height329 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr328, i32 0, i32 7
  %278 = load i32, i32* %height329, align 4
  store i32 %278, i32* %h, align 4
  %279 = load %struct.run*, %struct.run** %run, align 8
  %current_vpos330 = getelementptr inbounds %struct.run, %struct.run* %279, i32 0, i32 3
  %280 = load i32, i32* %current_vpos330, align 4
  %dec331 = add nsw i32 %280, -1
  store i32 %dec331, i32* %current_vpos330, align 4
  %281 = load %struct.run*, %struct.run** %run, align 8
  %desired_vpos332 = getelementptr inbounds %struct.run, %struct.run* %281, i32 0, i32 2
  %282 = load i32, i32* %desired_vpos332, align 4
  %dec333 = add nsw i32 %282, -1
  store i32 %dec333, i32* %desired_vpos332, align 4
  %283 = load %struct.run*, %struct.run** %run, align 8
  %nrows334 = getelementptr inbounds %struct.run, %struct.run* %283, i32 0, i32 5
  %284 = load i32, i32* %nrows334, align 4
  %inc335 = add nsw i32 %284, 1
  store i32 %inc335, i32* %nrows334, align 4
  %285 = load i32, i32* %h, align 4
  %286 = load %struct.run*, %struct.run** %run, align 8
  %height336 = getelementptr inbounds %struct.run, %struct.run* %286, i32 0, i32 4
  %287 = load i32, i32* %height336, align 4
  %add337 = add nsw i32 %287, %285
  store i32 %add337, i32* %height336, align 4
  %288 = load i32, i32* %h, align 4
  %289 = load %struct.run*, %struct.run** %run, align 8
  %desired_y338 = getelementptr inbounds %struct.run, %struct.run* %289, i32 0, i32 0
  %290 = load i32, i32* %desired_y338, align 4
  %sub339 = sub nsw i32 %290, %288
  store i32 %sub339, i32* %desired_y338, align 4
  %291 = load i32, i32* %h, align 4
  %292 = load %struct.run*, %struct.run** %run, align 8
  %current_y340 = getelementptr inbounds %struct.run, %struct.run* %292, i32 0, i32 1
  %293 = load i32, i32* %current_y340, align 4
  %sub341 = sub nsw i32 %293, %291
  store i32 %sub341, i32* %current_y340, align 4
  %294 = load i32, i32* %p, align 4
  %dec342 = add nsw i32 %294, -1
  store i32 %dec342, i32* %p, align 4
  %295 = load i32, i32* %q, align 4
  %dec343 = add nsw i32 %295, -1
  store i32 %dec343, i32* %q, align 4
  br label %while.cond.312

while.end.344:                                    ; preds = %land.end.324
  %296 = load i64, i64* %i, align 8
  %add345 = add nsw i64 %296, 1
  %conv346 = trunc i64 %add345 to i32
  store i32 %conv346, i32* %p, align 4
  %297 = load i32, i32* %new_line, align 4
  %add347 = add nsw i32 %297, 1
  store i32 %add347, i32* %q, align 4
  br label %while.cond.348

while.cond.348:                                   ; preds = %while.body.362, %while.end.344
  %298 = load i32, i32* %p, align 4
  %299 = load i32, i32* %last_old, align 4
  %cmp349 = icmp slt i32 %298, %299
  br i1 %cmp349, label %land.lhs.true.351, label %land.end.361

land.lhs.true.351:                                ; preds = %while.cond.348
  %300 = load i32, i32* %q, align 4
  %301 = load i32, i32* %last_new, align 4
  %cmp352 = icmp slt i32 %300, %301
  br i1 %cmp352, label %land.rhs.354, label %land.end.361

land.rhs.354:                                     ; preds = %land.lhs.true.351
  %302 = load i32, i32* %p, align 4
  %idxprom355 = sext i32 %302 to i64
  %303 = load %struct.row_entry**, %struct.row_entry*** @old_lines, align 8
  %arrayidx356 = getelementptr inbounds %struct.row_entry*, %struct.row_entry** %303, i64 %idxprom355
  %304 = load %struct.row_entry*, %struct.row_entry** %arrayidx356, align 8
  %305 = load i32, i32* %q, align 4
  %idxprom357 = sext i32 %305 to i64
  %306 = load %struct.row_entry**, %struct.row_entry*** @new_lines, align 8
  %arrayidx358 = getelementptr inbounds %struct.row_entry*, %struct.row_entry** %306, i64 %idxprom357
  %307 = load %struct.row_entry*, %struct.row_entry** %arrayidx358, align 8
  %cmp359 = icmp eq %struct.row_entry* %304, %307
  br label %land.end.361

land.end.361:                                     ; preds = %land.rhs.354, %land.lhs.true.351, %while.cond.348
  %308 = phi i1 [ false, %land.lhs.true.351 ], [ false, %while.cond.348 ], [ %cmp359, %land.rhs.354 ]
  br i1 %308, label %while.body.362, label %while.end.374

while.body.362:                                   ; preds = %land.end.361
  %309 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %rows364 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %309, i32 0, i32 1
  %310 = load %struct.glyph_row*, %struct.glyph_row** %rows364, align 8
  %311 = load i32, i32* %p, align 4
  %idx.ext365 = sext i32 %311 to i64
  %add.ptr366 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %310, i64 %idx.ext365
  %height367 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr366, i32 0, i32 7
  %312 = load i32, i32* %height367, align 4
  store i32 %312, i32* %h363, align 4
  %313 = load %struct.run*, %struct.run** %run, align 8
  %nrows368 = getelementptr inbounds %struct.run, %struct.run* %313, i32 0, i32 5
  %314 = load i32, i32* %nrows368, align 4
  %inc369 = add nsw i32 %314, 1
  store i32 %inc369, i32* %nrows368, align 4
  %315 = load i32, i32* %h363, align 4
  %316 = load %struct.run*, %struct.run** %run, align 8
  %height370 = getelementptr inbounds %struct.run, %struct.run* %316, i32 0, i32 4
  %317 = load i32, i32* %height370, align 4
  %add371 = add nsw i32 %317, %315
  store i32 %add371, i32* %height370, align 4
  %318 = load i32, i32* %p, align 4
  %inc372 = add nsw i32 %318, 1
  store i32 %inc372, i32* %p, align 4
  %319 = load i32, i32* %q, align 4
  %inc373 = add nsw i32 %319, 1
  store i32 %inc373, i32* %q, align 4
  br label %while.cond.348

while.end.374:                                    ; preds = %land.end.361
  store i32 0, i32* %p, align 4
  br label %for.cond.375

for.cond.375:                                     ; preds = %for.inc.387, %while.end.374
  %320 = load i32, i32* %p, align 4
  %321 = load i32, i32* %nruns, align 4
  %cmp376 = icmp slt i32 %320, %321
  br i1 %cmp376, label %land.rhs.378, label %land.end.385

land.rhs.378:                                     ; preds = %for.cond.375
  %322 = load i32, i32* %p, align 4
  %idxprom379 = sext i32 %322 to i64
  %323 = load %struct.run**, %struct.run*** @runs, align 8
  %arrayidx380 = getelementptr inbounds %struct.run*, %struct.run** %323, i64 %idxprom379
  %324 = load %struct.run*, %struct.run** %arrayidx380, align 8
  %height381 = getelementptr inbounds %struct.run, %struct.run* %324, i32 0, i32 4
  %325 = load i32, i32* %height381, align 4
  %326 = load %struct.run*, %struct.run** %run, align 8
  %height382 = getelementptr inbounds %struct.run, %struct.run* %326, i32 0, i32 4
  %327 = load i32, i32* %height382, align 4
  %cmp383 = icmp sgt i32 %325, %327
  br label %land.end.385

land.end.385:                                     ; preds = %land.rhs.378, %for.cond.375
  %328 = phi i1 [ false, %for.cond.375 ], [ %cmp383, %land.rhs.378 ]
  br i1 %328, label %for.body.386, label %for.end.389

for.body.386:                                     ; preds = %land.end.385
  br label %for.inc.387

for.inc.387:                                      ; preds = %for.body.386
  %329 = load i32, i32* %p, align 4
  %inc388 = add nsw i32 %329, 1
  store i32 %inc388, i32* %p, align 4
  br label %for.cond.375

for.end.389:                                      ; preds = %land.end.385
  %330 = load i32, i32* %nruns, align 4
  store i32 %330, i32* %q, align 4
  br label %for.cond.390

for.cond.390:                                     ; preds = %for.inc.399, %for.end.389
  %331 = load i32, i32* %q, align 4
  %332 = load i32, i32* %p, align 4
  %cmp391 = icmp sgt i32 %331, %332
  br i1 %cmp391, label %for.body.393, label %for.end.401

for.body.393:                                     ; preds = %for.cond.390
  %333 = load i32, i32* %q, align 4
  %sub394 = sub nsw i32 %333, 1
  %idxprom395 = sext i32 %sub394 to i64
  %334 = load %struct.run**, %struct.run*** @runs, align 8
  %arrayidx396 = getelementptr inbounds %struct.run*, %struct.run** %334, i64 %idxprom395
  %335 = load %struct.run*, %struct.run** %arrayidx396, align 8
  %336 = load i32, i32* %q, align 4
  %idxprom397 = sext i32 %336 to i64
  %337 = load %struct.run**, %struct.run*** @runs, align 8
  %arrayidx398 = getelementptr inbounds %struct.run*, %struct.run** %337, i64 %idxprom397
  store %struct.run* %335, %struct.run** %arrayidx398, align 8
  br label %for.inc.399

for.inc.399:                                      ; preds = %for.body.393
  %338 = load i32, i32* %q, align 4
  %dec400 = add nsw i32 %338, -1
  store i32 %dec400, i32* %q, align 4
  br label %for.cond.390

for.end.401:                                      ; preds = %for.cond.390
  %339 = load %struct.run*, %struct.run** %run, align 8
  %340 = load i32, i32* %p, align 4
  %idxprom402 = sext i32 %340 to i64
  %341 = load %struct.run**, %struct.run*** @runs, align 8
  %arrayidx403 = getelementptr inbounds %struct.run*, %struct.run** %341, i64 %idxprom402
  store %struct.run* %339, %struct.run** %arrayidx403, align 8
  %342 = load i32, i32* %nruns, align 4
  %inc404 = add nsw i32 %342, 1
  store i32 %inc404, i32* %nruns, align 4
  %343 = load %struct.run*, %struct.run** %run, align 8
  %nrows405 = getelementptr inbounds %struct.run, %struct.run* %343, i32 0, i32 5
  %344 = load i32, i32* %nrows405, align 4
  %conv406 = sext i32 %344 to i64
  %345 = load i64, i64* %i, align 8
  %add407 = add nsw i64 %345, %conv406
  store i64 %add407, i64* %i, align 8
  br label %if.end.410

if.else.408:                                      ; preds = %land.lhs.true.285, %land.lhs.true.280, %for.body.277
  %346 = load i64, i64* %i, align 8
  %inc409 = add nsw i64 %346, 1
  store i64 %inc409, i64* %i, align 8
  br label %if.end.410

if.end.410:                                       ; preds = %if.else.408, %for.end.401
  br label %for.cond.273

for.end.411:                                      ; preds = %for.cond.273
  store i64 0, i64* %i, align 8
  br label %for.cond.412

for.cond.412:                                     ; preds = %for.inc.602, %for.end.411
  %347 = load i64, i64* %i, align 8
  %348 = load i32, i32* %nruns, align 4
  %conv413 = sext i32 %348 to i64
  %cmp414 = icmp slt i64 %347, %conv413
  br i1 %cmp414, label %for.body.416, label %for.end.604

for.body.416:                                     ; preds = %for.cond.412
  %349 = load i64, i64* %i, align 8
  %350 = load %struct.run**, %struct.run*** @runs, align 8
  %arrayidx417 = getelementptr inbounds %struct.run*, %struct.run** %350, i64 %349
  %351 = load %struct.run*, %struct.run** %arrayidx417, align 8
  %nrows418 = getelementptr inbounds %struct.run, %struct.run* %351, i32 0, i32 5
  %352 = load i32, i32* %nrows418, align 4
  %cmp419 = icmp sgt i32 %352, 0
  br i1 %cmp419, label %if.then.421, label %if.end.601

if.then.421:                                      ; preds = %for.body.416
  %353 = load i64, i64* %i, align 8
  %354 = load %struct.run**, %struct.run*** @runs, align 8
  %arrayidx422 = getelementptr inbounds %struct.run*, %struct.run** %354, i64 %353
  %355 = load %struct.run*, %struct.run** %arrayidx422, align 8
  store %struct.run* %355, %struct.run** %r, align 8
  %356 = load %struct.run*, %struct.run** %r, align 8
  %current_y423 = getelementptr inbounds %struct.run, %struct.run* %356, i32 0, i32 1
  %357 = load i32, i32* %current_y423, align 4
  %358 = load %struct.run*, %struct.run** %r, align 8
  %desired_y424 = getelementptr inbounds %struct.run, %struct.run* %358, i32 0, i32 0
  %359 = load i32, i32* %desired_y424, align 4
  %cmp425 = icmp ne i32 %357, %359
  br i1 %cmp425, label %if.then.427, label %if.end.428

if.then.427:                                      ; preds = %if.then.421
  %360 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif, align 8
  %clear_window_mouse_face = getelementptr inbounds %struct.redisplay_interface, %struct.redisplay_interface* %360, i32 0, i32 10
  %361 = load void (%struct.window*)*, void (%struct.window*)** %clear_window_mouse_face, align 8
  %362 = load %struct.window*, %struct.window** %w.addr, align 8
  call void %361(%struct.window* %362)
  %363 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif, align 8
  %scroll_run_hook = getelementptr inbounds %struct.redisplay_interface, %struct.redisplay_interface* %363, i32 0, i32 5
  %364 = load void (%struct.window*, %struct.run*)*, void (%struct.window*, %struct.run*)** %scroll_run_hook, align 8
  %365 = load %struct.window*, %struct.window** %w.addr, align 8
  %366 = load %struct.run*, %struct.run** %r, align 8
  call void %364(%struct.window* %365, %struct.run* %366)
  br label %if.end.428

if.end.428:                                       ; preds = %if.then.427, %if.then.421
  %367 = load i32, i32* %nruns, align 4
  %sub429 = sub nsw i32 %367, 1
  store i32 %sub429, i32* %j, align 4
  br label %for.cond.430

for.cond.430:                                     ; preds = %for.inc.556, %if.end.428
  %368 = load i32, i32* %j, align 4
  %conv431 = sext i32 %368 to i64
  %369 = load i64, i64* %i, align 8
  %cmp432 = icmp sgt i64 %conv431, %369
  br i1 %cmp432, label %for.body.434, label %for.end.558

for.body.434:                                     ; preds = %for.cond.430
  %370 = load i32, i32* %j, align 4
  %idxprom436 = sext i32 %370 to i64
  %371 = load %struct.run**, %struct.run*** @runs, align 8
  %arrayidx437 = getelementptr inbounds %struct.run*, %struct.run** %371, i64 %idxprom436
  %372 = load %struct.run*, %struct.run** %arrayidx437, align 8
  store %struct.run* %372, %struct.run** %p435, align 8
  store i8 0, i8* %truncated_p, align 1
  %373 = load %struct.run*, %struct.run** %p435, align 8
  %nrows438 = getelementptr inbounds %struct.run, %struct.run* %373, i32 0, i32 5
  %374 = load i32, i32* %nrows438, align 4
  %cmp439 = icmp sgt i32 %374, 0
  br i1 %cmp439, label %land.lhs.true.441, label %if.end.500

land.lhs.true.441:                                ; preds = %for.body.434
  %375 = load %struct.run*, %struct.run** %p435, align 8
  %desired_y442 = getelementptr inbounds %struct.run, %struct.run* %375, i32 0, i32 0
  %376 = load i32, i32* %desired_y442, align 4
  %377 = load %struct.run*, %struct.run** %r, align 8
  %desired_y443 = getelementptr inbounds %struct.run, %struct.run* %377, i32 0, i32 0
  %378 = load i32, i32* %desired_y443, align 4
  %379 = load %struct.run*, %struct.run** %r, align 8
  %height444 = getelementptr inbounds %struct.run, %struct.run* %379, i32 0, i32 4
  %380 = load i32, i32* %height444, align 4
  %add445 = add nsw i32 %378, %380
  %cmp446 = icmp slt i32 %376, %add445
  br i1 %cmp446, label %land.lhs.true.448, label %if.end.500

land.lhs.true.448:                                ; preds = %land.lhs.true.441
  %381 = load %struct.run*, %struct.run** %p435, align 8
  %desired_y449 = getelementptr inbounds %struct.run, %struct.run* %381, i32 0, i32 0
  %382 = load i32, i32* %desired_y449, align 4
  %383 = load %struct.run*, %struct.run** %p435, align 8
  %height450 = getelementptr inbounds %struct.run, %struct.run* %383, i32 0, i32 4
  %384 = load i32, i32* %height450, align 4
  %add451 = add nsw i32 %382, %384
  %385 = load %struct.run*, %struct.run** %r, align 8
  %desired_y452 = getelementptr inbounds %struct.run, %struct.run* %385, i32 0, i32 0
  %386 = load i32, i32* %desired_y452, align 4
  %cmp453 = icmp sgt i32 %add451, %386
  br i1 %cmp453, label %if.then.455, label %if.end.500

if.then.455:                                      ; preds = %land.lhs.true.448
  %387 = load %struct.run*, %struct.run** %p435, align 8
  %desired_y456 = getelementptr inbounds %struct.run, %struct.run* %387, i32 0, i32 0
  %388 = load i32, i32* %desired_y456, align 4
  %389 = load %struct.run*, %struct.run** %r, align 8
  %desired_y457 = getelementptr inbounds %struct.run, %struct.run* %389, i32 0, i32 0
  %390 = load i32, i32* %desired_y457, align 4
  %cmp458 = icmp slt i32 %388, %390
  br i1 %cmp458, label %if.then.460, label %if.else.469

if.then.460:                                      ; preds = %if.then.455
  %391 = load %struct.run*, %struct.run** %r, align 8
  %desired_vpos461 = getelementptr inbounds %struct.run, %struct.run* %391, i32 0, i32 2
  %392 = load i32, i32* %desired_vpos461, align 4
  %393 = load %struct.run*, %struct.run** %p435, align 8
  %desired_vpos462 = getelementptr inbounds %struct.run, %struct.run* %393, i32 0, i32 2
  %394 = load i32, i32* %desired_vpos462, align 4
  %sub463 = sub nsw i32 %392, %394
  %395 = load %struct.run*, %struct.run** %p435, align 8
  %nrows464 = getelementptr inbounds %struct.run, %struct.run* %395, i32 0, i32 5
  store i32 %sub463, i32* %nrows464, align 4
  %396 = load %struct.run*, %struct.run** %r, align 8
  %desired_y465 = getelementptr inbounds %struct.run, %struct.run* %396, i32 0, i32 0
  %397 = load i32, i32* %desired_y465, align 4
  %398 = load %struct.run*, %struct.run** %p435, align 8
  %desired_y466 = getelementptr inbounds %struct.run, %struct.run* %398, i32 0, i32 0
  %399 = load i32, i32* %desired_y466, align 4
  %sub467 = sub nsw i32 %397, %399
  %400 = load %struct.run*, %struct.run** %p435, align 8
  %height468 = getelementptr inbounds %struct.run, %struct.run* %400, i32 0, i32 4
  store i32 %sub467, i32* %height468, align 4
  store i8 1, i8* %truncated_p, align 1
  br label %if.end.499

if.else.469:                                      ; preds = %if.then.455
  %401 = load %struct.run*, %struct.run** %r, align 8
  %desired_vpos470 = getelementptr inbounds %struct.run, %struct.run* %401, i32 0, i32 2
  %402 = load i32, i32* %desired_vpos470, align 4
  %403 = load %struct.run*, %struct.run** %r, align 8
  %nrows471 = getelementptr inbounds %struct.run, %struct.run* %403, i32 0, i32 5
  %404 = load i32, i32* %nrows471, align 4
  %add472 = add nsw i32 %402, %404
  %405 = load %struct.run*, %struct.run** %p435, align 8
  %desired_vpos473 = getelementptr inbounds %struct.run, %struct.run* %405, i32 0, i32 2
  %406 = load i32, i32* %desired_vpos473, align 4
  %sub474 = sub nsw i32 %add472, %406
  store i32 %sub474, i32* %nrows_copied, align 4
  %407 = load %struct.run*, %struct.run** %p435, align 8
  %nrows475 = getelementptr inbounds %struct.run, %struct.run* %407, i32 0, i32 5
  %408 = load i32, i32* %nrows475, align 4
  %409 = load i32, i32* %nrows_copied, align 4
  %cmp476 = icmp sle i32 %408, %409
  br i1 %cmp476, label %if.then.478, label %if.else.480

if.then.478:                                      ; preds = %if.else.469
  %410 = load %struct.run*, %struct.run** %p435, align 8
  %nrows479 = getelementptr inbounds %struct.run, %struct.run* %410, i32 0, i32 5
  store i32 0, i32* %nrows479, align 4
  br label %if.end.498

if.else.480:                                      ; preds = %if.else.469
  %411 = load %struct.run*, %struct.run** %r, align 8
  %desired_y481 = getelementptr inbounds %struct.run, %struct.run* %411, i32 0, i32 0
  %412 = load i32, i32* %desired_y481, align 4
  %413 = load %struct.run*, %struct.run** %r, align 8
  %height482 = getelementptr inbounds %struct.run, %struct.run* %413, i32 0, i32 4
  %414 = load i32, i32* %height482, align 4
  %add483 = add nsw i32 %412, %414
  %415 = load %struct.run*, %struct.run** %p435, align 8
  %desired_y484 = getelementptr inbounds %struct.run, %struct.run* %415, i32 0, i32 0
  %416 = load i32, i32* %desired_y484, align 4
  %sub485 = sub nsw i32 %add483, %416
  store i32 %sub485, i32* %height_copied, align 4
  %417 = load i32, i32* %nrows_copied, align 4
  %418 = load %struct.run*, %struct.run** %p435, align 8
  %current_vpos486 = getelementptr inbounds %struct.run, %struct.run* %418, i32 0, i32 3
  %419 = load i32, i32* %current_vpos486, align 4
  %add487 = add nsw i32 %419, %417
  store i32 %add487, i32* %current_vpos486, align 4
  %420 = load i32, i32* %nrows_copied, align 4
  %421 = load %struct.run*, %struct.run** %p435, align 8
  %desired_vpos488 = getelementptr inbounds %struct.run, %struct.run* %421, i32 0, i32 2
  %422 = load i32, i32* %desired_vpos488, align 4
  %add489 = add nsw i32 %422, %420
  store i32 %add489, i32* %desired_vpos488, align 4
  %423 = load i32, i32* %nrows_copied, align 4
  %424 = load %struct.run*, %struct.run** %p435, align 8
  %nrows490 = getelementptr inbounds %struct.run, %struct.run* %424, i32 0, i32 5
  %425 = load i32, i32* %nrows490, align 4
  %sub491 = sub nsw i32 %425, %423
  store i32 %sub491, i32* %nrows490, align 4
  %426 = load i32, i32* %height_copied, align 4
  %427 = load %struct.run*, %struct.run** %p435, align 8
  %current_y492 = getelementptr inbounds %struct.run, %struct.run* %427, i32 0, i32 1
  %428 = load i32, i32* %current_y492, align 4
  %add493 = add nsw i32 %428, %426
  store i32 %add493, i32* %current_y492, align 4
  %429 = load i32, i32* %height_copied, align 4
  %430 = load %struct.run*, %struct.run** %p435, align 8
  %desired_y494 = getelementptr inbounds %struct.run, %struct.run* %430, i32 0, i32 0
  %431 = load i32, i32* %desired_y494, align 4
  %add495 = add nsw i32 %431, %429
  store i32 %add495, i32* %desired_y494, align 4
  %432 = load i32, i32* %height_copied, align 4
  %433 = load %struct.run*, %struct.run** %p435, align 8
  %height496 = getelementptr inbounds %struct.run, %struct.run* %433, i32 0, i32 4
  %434 = load i32, i32* %height496, align 4
  %sub497 = sub nsw i32 %434, %432
  store i32 %sub497, i32* %height496, align 4
  store i8 1, i8* %truncated_p, align 1
  br label %if.end.498

if.end.498:                                       ; preds = %if.else.480, %if.then.478
  br label %if.end.499

if.end.499:                                       ; preds = %if.end.498, %if.then.460
  br label %if.end.500

if.end.500:                                       ; preds = %if.end.499, %land.lhs.true.448, %land.lhs.true.441, %for.body.434
  %435 = load %struct.run*, %struct.run** %r, align 8
  %current_y501 = getelementptr inbounds %struct.run, %struct.run* %435, i32 0, i32 1
  %436 = load i32, i32* %current_y501, align 4
  %437 = load %struct.run*, %struct.run** %r, align 8
  %desired_y502 = getelementptr inbounds %struct.run, %struct.run* %437, i32 0, i32 0
  %438 = load i32, i32* %desired_y502, align 4
  %cmp503 = icmp ne i32 %436, %438
  br i1 %cmp503, label %land.lhs.true.505, label %if.end.521

land.lhs.true.505:                                ; preds = %if.end.500
  %439 = load %struct.run*, %struct.run** %p435, align 8
  %current_y506 = getelementptr inbounds %struct.run, %struct.run* %439, i32 0, i32 1
  %440 = load i32, i32* %current_y506, align 4
  %441 = load %struct.run*, %struct.run** %r, align 8
  %desired_y507 = getelementptr inbounds %struct.run, %struct.run* %441, i32 0, i32 0
  %442 = load i32, i32* %desired_y507, align 4
  %443 = load %struct.run*, %struct.run** %r, align 8
  %height508 = getelementptr inbounds %struct.run, %struct.run* %443, i32 0, i32 4
  %444 = load i32, i32* %height508, align 4
  %add509 = add nsw i32 %442, %444
  %cmp510 = icmp slt i32 %440, %add509
  br i1 %cmp510, label %land.lhs.true.512, label %if.end.521

land.lhs.true.512:                                ; preds = %land.lhs.true.505
  %445 = load %struct.run*, %struct.run** %p435, align 8
  %current_y513 = getelementptr inbounds %struct.run, %struct.run* %445, i32 0, i32 1
  %446 = load i32, i32* %current_y513, align 4
  %447 = load %struct.run*, %struct.run** %p435, align 8
  %height514 = getelementptr inbounds %struct.run, %struct.run* %447, i32 0, i32 4
  %448 = load i32, i32* %height514, align 4
  %add515 = add nsw i32 %446, %448
  %449 = load %struct.run*, %struct.run** %r, align 8
  %desired_y516 = getelementptr inbounds %struct.run, %struct.run* %449, i32 0, i32 0
  %450 = load i32, i32* %desired_y516, align 4
  %cmp517 = icmp sgt i32 %add515, %450
  br i1 %cmp517, label %if.then.519, label %if.end.521

if.then.519:                                      ; preds = %land.lhs.true.512
  %451 = load %struct.run*, %struct.run** %p435, align 8
  %nrows520 = getelementptr inbounds %struct.run, %struct.run* %451, i32 0, i32 5
  store i32 0, i32* %nrows520, align 4
  br label %if.end.521

if.end.521:                                       ; preds = %if.then.519, %land.lhs.true.512, %land.lhs.true.505, %if.end.500
  %452 = load i8, i8* %truncated_p, align 1
  %tobool522 = trunc i8 %452 to i1
  br i1 %tobool522, label %land.lhs.true.524, label %if.end.555

land.lhs.true.524:                                ; preds = %if.end.521
  %453 = load %struct.run*, %struct.run** %p435, align 8
  %nrows525 = getelementptr inbounds %struct.run, %struct.run* %453, i32 0, i32 5
  %454 = load i32, i32* %nrows525, align 4
  %cmp526 = icmp sgt i32 %454, 0
  br i1 %cmp526, label %if.then.528, label %if.end.555

if.then.528:                                      ; preds = %land.lhs.true.524
  %455 = load i32, i32* %nruns, align 4
  %sub529 = sub nsw i32 %455, 1
  store i32 %sub529, i32* %k, align 4
  br label %while.cond.530

while.cond.530:                                   ; preds = %while.body.542, %if.then.528
  %456 = load i32, i32* %k, align 4
  %idxprom531 = sext i32 %456 to i64
  %457 = load %struct.run**, %struct.run*** @runs, align 8
  %arrayidx532 = getelementptr inbounds %struct.run*, %struct.run** %457, i64 %idxprom531
  %458 = load %struct.run*, %struct.run** %arrayidx532, align 8
  %nrows533 = getelementptr inbounds %struct.run, %struct.run* %458, i32 0, i32 5
  %459 = load i32, i32* %nrows533, align 4
  %cmp534 = icmp eq i32 %459, 0
  br i1 %cmp534, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond.530
  %460 = load i32, i32* %k, align 4
  %idxprom536 = sext i32 %460 to i64
  %461 = load %struct.run**, %struct.run*** @runs, align 8
  %arrayidx537 = getelementptr inbounds %struct.run*, %struct.run** %461, i64 %idxprom536
  %462 = load %struct.run*, %struct.run** %arrayidx537, align 8
  %height538 = getelementptr inbounds %struct.run, %struct.run* %462, i32 0, i32 4
  %463 = load i32, i32* %height538, align 4
  %464 = load %struct.run*, %struct.run** %p435, align 8
  %height539 = getelementptr inbounds %struct.run, %struct.run* %464, i32 0, i32 4
  %465 = load i32, i32* %height539, align 4
  %cmp540 = icmp slt i32 %463, %465
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.cond.530
  %466 = phi i1 [ true, %while.cond.530 ], [ %cmp540, %lor.rhs ]
  br i1 %466, label %while.body.542, label %while.end.544

while.body.542:                                   ; preds = %lor.end
  %467 = load i32, i32* %k, align 4
  %dec543 = add nsw i32 %467, -1
  store i32 %dec543, i32* %k, align 4
  br label %while.cond.530

while.end.544:                                    ; preds = %lor.end
  %468 = load %struct.run**, %struct.run*** @runs, align 8
  %469 = load i32, i32* %j, align 4
  %idx.ext545 = sext i32 %469 to i64
  %add.ptr546 = getelementptr inbounds %struct.run*, %struct.run** %468, i64 %idx.ext545
  %470 = bitcast %struct.run** %add.ptr546 to i8*
  %471 = load %struct.run**, %struct.run*** @runs, align 8
  %472 = load i32, i32* %j, align 4
  %idx.ext547 = sext i32 %472 to i64
  %add.ptr548 = getelementptr inbounds %struct.run*, %struct.run** %471, i64 %idx.ext547
  %add.ptr549 = getelementptr inbounds %struct.run*, %struct.run** %add.ptr548, i64 1
  %473 = bitcast %struct.run** %add.ptr549 to i8*
  %474 = load i32, i32* %k, align 4
  %475 = load i32, i32* %j, align 4
  %sub550 = sub nsw i32 %474, %475
  %conv551 = sext i32 %sub550 to i64
  %mul552 = mul i64 %conv551, 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %470, i8* %473, i64 %mul552, i32 8, i1 false)
  %476 = load %struct.run*, %struct.run** %p435, align 8
  %477 = load i32, i32* %k, align 4
  %idxprom553 = sext i32 %477 to i64
  %478 = load %struct.run**, %struct.run*** @runs, align 8
  %arrayidx554 = getelementptr inbounds %struct.run*, %struct.run** %478, i64 %idxprom553
  store %struct.run* %476, %struct.run** %arrayidx554, align 8
  br label %if.end.555

if.end.555:                                       ; preds = %while.end.544, %land.lhs.true.524, %if.end.521
  br label %for.inc.556

for.inc.556:                                      ; preds = %if.end.555
  %479 = load i32, i32* %j, align 4
  %dec557 = add nsw i32 %479, -1
  store i32 %dec557, i32* %j, align 4
  br label %for.cond.430

for.end.558:                                      ; preds = %for.cond.430
  store i32 0, i32* %j, align 4
  br label %for.cond.559

for.cond.559:                                     ; preds = %for.inc.598, %for.end.558
  %480 = load i32, i32* %j, align 4
  %481 = load %struct.run*, %struct.run** %r, align 8
  %nrows560 = getelementptr inbounds %struct.run, %struct.run* %481, i32 0, i32 5
  %482 = load i32, i32* %nrows560, align 4
  %cmp561 = icmp slt i32 %480, %482
  br i1 %cmp561, label %for.body.563, label %for.end.600

for.body.563:                                     ; preds = %for.cond.559
  %483 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %rows564 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %483, i32 0, i32 1
  %484 = load %struct.glyph_row*, %struct.glyph_row** %rows564, align 8
  %485 = load %struct.run*, %struct.run** %r, align 8
  %desired_vpos565 = getelementptr inbounds %struct.run, %struct.run* %485, i32 0, i32 2
  %486 = load i32, i32* %desired_vpos565, align 4
  %487 = load i32, i32* %j, align 4
  %add566 = add nsw i32 %486, %487
  %idx.ext567 = sext i32 %add566 to i64
  %add.ptr568 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %484, i64 %idx.ext567
  store %struct.glyph_row* %add.ptr568, %struct.glyph_row** %to, align 8
  %488 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %rows569 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %488, i32 0, i32 1
  %489 = load %struct.glyph_row*, %struct.glyph_row** %rows569, align 8
  %490 = load %struct.run*, %struct.run** %r, align 8
  %desired_vpos570 = getelementptr inbounds %struct.run, %struct.run* %490, i32 0, i32 2
  %491 = load i32, i32* %desired_vpos570, align 4
  %492 = load i32, i32* %j, align 4
  %add571 = add nsw i32 %491, %492
  %idx.ext572 = sext i32 %add571 to i64
  %add.ptr573 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %489, i64 %idx.ext572
  store %struct.glyph_row* %add.ptr573, %struct.glyph_row** %from, align 8
  %493 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %overlapped_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %493, i32 0, i32 22
  %494 = bitcast i40* %overlapped_p to i64*
  %bf.load574 = load i64, i64* %494, align 4
  %bf.lshr575 = lshr i64 %bf.load574, 21
  %bf.clear576 = and i64 %bf.lshr575, 1
  %bf.cast577 = trunc i64 %bf.clear576 to i1
  %frombool578 = zext i1 %bf.cast577 to i8
  store i8 %frombool578, i8* %to_overlapped_p, align 1
  %495 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %fringe_bitmap_periodic_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %495, i32 0, i32 22
  %496 = bitcast i40* %fringe_bitmap_periodic_p to i64*
  %bf.load579 = load i64, i64* %496, align 4
  %bf.lshr580 = lshr i64 %bf.load579, 8
  %bf.clear581 = and i64 %bf.lshr580, 1
  %bf.cast582 = trunc i64 %bf.clear581 to i1
  %497 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %redraw_fringe_bitmaps_p583 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %497, i32 0, i32 22
  %498 = bitcast i40* %redraw_fringe_bitmaps_p583 to i64*
  %499 = zext i1 %bf.cast582 to i64
  %bf.load584 = load i64, i64* %498, align 4
  %bf.shl = shl i64 %499, 9
  %bf.clear585 = and i64 %bf.load584, -513
  %bf.set = or i64 %bf.clear585, %bf.shl
  store i64 %bf.set, i64* %498, align 4
  %bf.result.cast = trunc i64 %499 to i8
  %tobool586 = trunc i8 %bf.result.cast to i1
  %500 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %501 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  call void @assign_row(%struct.glyph_row* %500, %struct.glyph_row* %501)
  %502 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %enabled_p587 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %502, i32 0, i32 22
  %503 = bitcast i40* %enabled_p587 to i64*
  %bf.load588 = load i64, i64* %503, align 4
  %bf.clear589 = and i64 %bf.load588, -1025
  store i64 %bf.clear589, i64* %503, align 4
  %504 = load i8, i8* %to_overlapped_p, align 1
  %tobool590 = trunc i8 %504 to i1
  %505 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %overlapped_p591 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %505, i32 0, i32 22
  %506 = bitcast i40* %overlapped_p591 to i64*
  %507 = zext i1 %tobool590 to i64
  %bf.load592 = load i64, i64* %506, align 4
  %bf.shl593 = shl i64 %507, 21
  %bf.clear594 = and i64 %bf.load592, -2097153
  %bf.set595 = or i64 %bf.clear594, %bf.shl593
  store i64 %bf.set595, i64* %506, align 4
  %bf.result.cast596 = trunc i64 %507 to i8
  %tobool597 = trunc i8 %bf.result.cast596 to i1
  br label %for.inc.598

for.inc.598:                                      ; preds = %for.body.563
  %508 = load i32, i32* %j, align 4
  %inc599 = add nsw i32 %508, 1
  store i32 %inc599, i32* %j, align 4
  br label %for.cond.559

for.end.600:                                      ; preds = %for.cond.559
  br label %if.end.601

if.end.601:                                       ; preds = %for.end.600, %for.body.416
  br label %for.inc.602

for.inc.602:                                      ; preds = %if.end.601
  %509 = load i64, i64* %i, align 8
  %inc603 = add nsw i64 %509, 1
  store i64 %inc603, i64* %i, align 8
  br label %for.cond.412

for.end.604:                                      ; preds = %for.cond.412
  store i64 0, i64* %i, align 8
  br label %for.cond.605

for.cond.605:                                     ; preds = %for.inc.611, %for.end.604
  %510 = load i64, i64* %i, align 8
  %511 = load i64, i64* @row_entry_idx, align 8
  %cmp606 = icmp slt i64 %510, %511
  br i1 %cmp606, label %for.body.608, label %for.end.613

for.body.608:                                     ; preds = %for.cond.605
  %512 = load i64, i64* %i, align 8
  %513 = load %struct.row_entry*, %struct.row_entry** @row_entry_pool, align 8
  %arrayidx609 = getelementptr inbounds %struct.row_entry, %struct.row_entry* %513, i64 %512
  %bucket = getelementptr inbounds %struct.row_entry, %struct.row_entry* %arrayidx609, i32 0, i32 3
  %514 = load i64, i64* %bucket, align 8
  %515 = load %struct.row_entry**, %struct.row_entry*** @row_table, align 8
  %arrayidx610 = getelementptr inbounds %struct.row_entry*, %struct.row_entry** %515, i64 %514
  store %struct.row_entry* null, %struct.row_entry** %arrayidx610, align 8
  br label %for.inc.611

for.inc.611:                                      ; preds = %for.body.608
  %516 = load i64, i64* %i, align 8
  %inc612 = add nsw i64 %516, 1
  store i64 %inc612, i64* %i, align 8
  br label %for.cond.605

for.end.613:                                      ; preds = %for.cond.605
  %517 = load i32, i32* %nruns, align 4
  %cmp614 = icmp sgt i32 %517, 0
  %conv615 = zext i1 %cmp614 to i32
  store i32 %conv615, i32* %retval
  br label %return

return:                                           ; preds = %for.end.613, %if.then.169, %if.then.66, %if.then.49
  %518 = load i32, i32* %retval
  ret i32 %518
}

; Function Attrs: nounwind uwtable
define internal void @redraw_overlapped_rows(%struct.window* %w, i32 %yb) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %yb.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %f = alloca %struct.frame*, align 8
  %row = alloca %struct.glyph_row*, align 8
  %area = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i32 %yb, i32* %yb.addr, align 4
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 1
  %1 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  store %struct.frame* %3, %struct.frame** %f, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.35, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 24
  %6 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %nrows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %6, i32 0, i32 3
  %7 = load i32, i32* %nrows, align 4
  %cmp = icmp slt i32 %4, %7
  br i1 %cmp, label %for.body, label %for.end.37

for.body:                                         ; preds = %for.cond
  %8 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix1 = getelementptr inbounds %struct.window, %struct.window* %8, i32 0, i32 24
  %9 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix1, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %9, i32 0, i32 1
  %10 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %11 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %11 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %10, i64 %idx.ext
  store %struct.glyph_row* %add.ptr, %struct.glyph_row** %row, align 8
  %12 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %enabled_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %12, i32 0, i32 22
  %13 = bitcast i40* %enabled_p to i64*
  %bf.load = load i64, i64* %13, align 4
  %bf.lshr = lshr i64 %bf.load, 10
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  br label %for.end.37

if.else:                                          ; preds = %for.body
  %14 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %mode_line_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %14, i32 0, i32 22
  %15 = bitcast i40* %mode_line_p to i64*
  %bf.load2 = load i64, i64* %15, align 4
  %bf.lshr3 = lshr i64 %bf.load2, 20
  %bf.clear4 = and i64 %bf.lshr3, 1
  %bf.cast5 = trunc i64 %bf.clear4 to i1
  br i1 %bf.cast5, label %if.then.6, label %if.end

if.then.6:                                        ; preds = %if.else
  br label %for.inc.35

if.end:                                           ; preds = %if.else
  br label %if.end.7

if.end.7:                                         ; preds = %if.end
  %16 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %overlapped_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %16, i32 0, i32 22
  %17 = bitcast i40* %overlapped_p to i64*
  %bf.load8 = load i64, i64* %17, align 4
  %bf.lshr9 = lshr i64 %bf.load8, 21
  %bf.clear10 = and i64 %bf.lshr9, 1
  %bf.cast11 = trunc i64 %bf.clear10 to i1
  br i1 %bf.cast11, label %if.then.12, label %if.end.29

if.then.12:                                       ; preds = %if.end.7
  store i32 0, i32* %area, align 4
  br label %for.cond.13

for.cond.13:                                      ; preds = %for.inc, %if.then.12
  %18 = load i32, i32* %area, align 4
  %cmp14 = icmp slt i32 %18, 3
  br i1 %cmp14, label %for.body.15, label %for.end

for.body.15:                                      ; preds = %for.cond.13
  %19 = load %struct.window*, %struct.window** %w.addr, align 8
  %20 = load i32, i32* %i, align 4
  %21 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %y = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %21, i32 0, i32 4
  %22 = load i32, i32* %y, align 4
  %23 = load i32, i32* %area, align 4
  %cmp16 = icmp eq i32 %23, 1
  br i1 %cmp16, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body.15
  %24 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %x = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %24, i32 0, i32 3
  %25 = load i32, i32* %x, align 4
  br label %cond.end

cond.false:                                       ; preds = %for.body.15
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %25, %cond.true ], [ 0, %cond.false ]
  call void @output_cursor_to(%struct.window* %19, i32 %20, i32 0, i32 %22, i32 %cond)
  %26 = load i32, i32* %area, align 4
  %idxprom = sext i32 %26 to i64
  %27 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %used = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %27, i32 0, i32 1
  %arrayidx = getelementptr inbounds [4 x i16], [4 x i16]* %used, i32 0, i64 %idxprom
  %28 = load i16, i16* %arrayidx, align 2
  %tobool = icmp ne i16 %28, 0
  br i1 %tobool, label %if.then.17, label %if.end.23

if.then.17:                                       ; preds = %cond.end
  %29 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %29, i32 0, i32 61
  %30 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %rif = getelementptr inbounds %struct.terminal, %struct.terminal* %30, i32 0, i32 15
  %31 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif, align 8
  %write_glyphs = getelementptr inbounds %struct.redisplay_interface, %struct.redisplay_interface* %31, i32 0, i32 2
  %32 = load void (%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32)** %write_glyphs, align 8
  %33 = load %struct.window*, %struct.window** %w.addr, align 8
  %34 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %35 = load i32, i32* %area, align 4
  %idxprom18 = sext i32 %35 to i64
  %36 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %glyphs = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %36, i32 0, i32 0
  %arrayidx19 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs, i32 0, i64 %idxprom18
  %37 = load %struct.glyph*, %struct.glyph** %arrayidx19, align 8
  %38 = load i32, i32* %area, align 4
  %39 = load i32, i32* %area, align 4
  %idxprom20 = sext i32 %39 to i64
  %40 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %used21 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %40, i32 0, i32 1
  %arrayidx22 = getelementptr inbounds [4 x i16], [4 x i16]* %used21, i32 0, i64 %idxprom20
  %41 = load i16, i16* %arrayidx22, align 2
  %conv = sext i16 %41 to i32
  call void %32(%struct.window* %33, %struct.glyph_row* %34, %struct.glyph* %37, i32 %38, i32 %conv)
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.17, %cond.end
  %42 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal24 = getelementptr inbounds %struct.frame, %struct.frame* %42, i32 0, i32 61
  %43 = load %struct.terminal*, %struct.terminal** %terminal24, align 8
  %rif25 = getelementptr inbounds %struct.terminal, %struct.terminal* %43, i32 0, i32 15
  %44 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif25, align 8
  %clear_end_of_line = getelementptr inbounds %struct.redisplay_interface, %struct.redisplay_interface* %44, i32 0, i32 4
  %45 = load void (%struct.window*, %struct.glyph_row*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, i32, i32)** %clear_end_of_line, align 8
  %46 = load %struct.window*, %struct.window** %w.addr, align 8
  %47 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %48 = load i32, i32* %area, align 4
  call void %45(%struct.window* %46, %struct.glyph_row* %47, i32 %48, i32 -1)
  br label %for.inc

for.inc:                                          ; preds = %if.end.23
  %49 = load i32, i32* %area, align 4
  %inc = add nsw i32 %49, 1
  store i32 %inc, i32* %area, align 4
  br label %for.cond.13

for.end:                                          ; preds = %for.cond.13
  %50 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %overlapped_p26 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %50, i32 0, i32 22
  %51 = bitcast i40* %overlapped_p26 to i64*
  %bf.load27 = load i64, i64* %51, align 4
  %bf.clear28 = and i64 %bf.load27, -2097153
  store i64 %bf.clear28, i64* %51, align 4
  br label %if.end.29

if.end.29:                                        ; preds = %for.end, %if.end.7
  %52 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %y30 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %52, i32 0, i32 4
  %53 = load i32, i32* %y30, align 4
  %54 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %height = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %54, i32 0, i32 7
  %55 = load i32, i32* %height, align 4
  %add = add nsw i32 %53, %55
  %56 = load i32, i32* %yb.addr, align 4
  %cmp31 = icmp sge i32 %add, %56
  br i1 %cmp31, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %if.end.29
  br label %for.end.37

if.end.34:                                        ; preds = %if.end.29
  br label %for.inc.35

for.inc.35:                                       ; preds = %if.end.34, %if.then.6
  %57 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %57, 1
  store i32 %inc36, i32* %i, align 4
  br label %for.cond

for.end.37:                                       ; preds = %if.then.33, %if.then, %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @redraw_overlapping_rows(%struct.window* %w, i32 %yb) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %yb.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %bottom_y = alloca i32, align 4
  %row = alloca %struct.glyph_row*, align 8
  %rif = alloca %struct.redisplay_interface*, align 8
  %overlaps = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i32 %yb, i32* %yb.addr, align 4
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 1
  %1 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 61
  %4 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %rif1 = getelementptr inbounds %struct.terminal, %struct.terminal* %4, i32 0, i32 15
  %5 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif1, align 8
  store %struct.redisplay_interface* %5, %struct.redisplay_interface** %rif, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 24
  %8 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %nrows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %8, i32 0, i32 3
  %9 = load i32, i32* %nrows, align 4
  %cmp = icmp slt i32 %6, %9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix2 = getelementptr inbounds %struct.window, %struct.window* %10, i32 0, i32 24
  %11 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix2, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %11, i32 0, i32 1
  %12 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %13 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %13 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %12, i64 %idx.ext
  store %struct.glyph_row* %add.ptr, %struct.glyph_row** %row, align 8
  %14 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %enabled_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %14, i32 0, i32 22
  %15 = bitcast i40* %enabled_p to i64*
  %bf.load = load i64, i64* %15, align 4
  %bf.lshr = lshr i64 %bf.load, 10
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  br label %for.end

if.else:                                          ; preds = %for.body
  %16 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %mode_line_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %16, i32 0, i32 22
  %17 = bitcast i40* %mode_line_p to i64*
  %bf.load3 = load i64, i64* %17, align 4
  %bf.lshr4 = lshr i64 %bf.load3, 20
  %bf.clear5 = and i64 %bf.lshr4, 1
  %bf.cast6 = trunc i64 %bf.clear5 to i1
  br i1 %bf.cast6, label %if.then.7, label %if.end

if.then.7:                                        ; preds = %if.else
  br label %for.inc

if.end:                                           ; preds = %if.else
  br label %if.end.8

if.end.8:                                         ; preds = %if.end
  %18 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %y = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %18, i32 0, i32 4
  %19 = load i32, i32* %y, align 4
  %20 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %height = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %20, i32 0, i32 7
  %21 = load i32, i32* %height, align 4
  %add = add nsw i32 %19, %21
  store i32 %add, i32* %bottom_y, align 4
  %22 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %overlapping_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %22, i32 0, i32 22
  %23 = bitcast i40* %overlapping_p to i64*
  %bf.load9 = load i64, i64* %23, align 4
  %bf.lshr10 = lshr i64 %bf.load9, 24
  %bf.clear11 = and i64 %bf.lshr10, 1
  %bf.cast12 = trunc i64 %bf.clear11 to i1
  br i1 %bf.cast12, label %if.then.13, label %if.end.91

if.then.13:                                       ; preds = %if.end.8
  store i32 0, i32* %overlaps, align 4
  %24 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %phys_ascent = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %24, i32 0, i32 8
  %25 = load i32, i32* %phys_ascent, align 4
  %26 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %ascent = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %26, i32 0, i32 6
  %27 = load i32, i32* %ascent, align 4
  %cmp14 = icmp sgt i32 %25, %27
  br i1 %cmp14, label %land.lhs.true, label %if.end.27

land.lhs.true:                                    ; preds = %if.then.13
  %28 = load i32, i32* %i, align 4
  %cmp15 = icmp sgt i32 %28, 0
  br i1 %cmp15, label %land.lhs.true.16, label %if.end.27

land.lhs.true.16:                                 ; preds = %land.lhs.true
  %29 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix17 = getelementptr inbounds %struct.window, %struct.window* %29, i32 0, i32 24
  %30 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix17, align 8
  %rows18 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %30, i32 0, i32 1
  %31 = load %struct.glyph_row*, %struct.glyph_row** %rows18, align 8
  %32 = load i32, i32* %i, align 4
  %sub19 = sub nsw i32 %32, 1
  %idx.ext20 = sext i32 %sub19 to i64
  %add.ptr21 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %31, i64 %idx.ext20
  %overlapped_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr21, i32 0, i32 22
  %33 = bitcast i40* %overlapped_p to i64*
  %bf.load22 = load i64, i64* %33, align 4
  %bf.lshr23 = lshr i64 %bf.load22, 21
  %bf.clear24 = and i64 %bf.lshr23, 1
  %bf.cast25 = trunc i64 %bf.clear24 to i1
  br i1 %bf.cast25, label %if.end.27, label %if.then.26

if.then.26:                                       ; preds = %land.lhs.true.16
  %34 = load i32, i32* %overlaps, align 4
  %or = or i32 %34, 1
  store i32 %or, i32* %overlaps, align 4
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.26, %land.lhs.true.16, %land.lhs.true, %if.then.13
  %35 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %phys_height = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %35, i32 0, i32 9
  %36 = load i32, i32* %phys_height, align 4
  %37 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %phys_ascent28 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %37, i32 0, i32 8
  %38 = load i32, i32* %phys_ascent28, align 4
  %sub29 = sub nsw i32 %36, %38
  %39 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %height30 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %39, i32 0, i32 7
  %40 = load i32, i32* %height30, align 4
  %41 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %ascent31 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %41, i32 0, i32 6
  %42 = load i32, i32* %ascent31, align 4
  %sub32 = sub nsw i32 %40, %42
  %cmp33 = icmp sgt i32 %sub29, %sub32
  br i1 %cmp33, label %land.lhs.true.34, label %if.end.49

land.lhs.true.34:                                 ; preds = %if.end.27
  %43 = load i32, i32* %bottom_y, align 4
  %44 = load i32, i32* %yb.addr, align 4
  %cmp35 = icmp slt i32 %43, %44
  br i1 %cmp35, label %land.lhs.true.36, label %if.end.49

land.lhs.true.36:                                 ; preds = %land.lhs.true.34
  %45 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix37 = getelementptr inbounds %struct.window, %struct.window* %45, i32 0, i32 24
  %46 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix37, align 8
  %rows38 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %46, i32 0, i32 1
  %47 = load %struct.glyph_row*, %struct.glyph_row** %rows38, align 8
  %48 = load i32, i32* %i, align 4
  %add39 = add nsw i32 %48, 1
  %idx.ext40 = sext i32 %add39 to i64
  %add.ptr41 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %47, i64 %idx.ext40
  %overlapped_p42 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr41, i32 0, i32 22
  %49 = bitcast i40* %overlapped_p42 to i64*
  %bf.load43 = load i64, i64* %49, align 4
  %bf.lshr44 = lshr i64 %bf.load43, 21
  %bf.clear45 = and i64 %bf.lshr44, 1
  %bf.cast46 = trunc i64 %bf.clear45 to i1
  br i1 %bf.cast46, label %if.end.49, label %if.then.47

if.then.47:                                       ; preds = %land.lhs.true.36
  %50 = load i32, i32* %overlaps, align 4
  %or48 = or i32 %50, 2
  store i32 %or48, i32* %overlaps, align 4
  br label %if.end.49

if.end.49:                                        ; preds = %if.then.47, %land.lhs.true.36, %land.lhs.true.34, %if.end.27
  %51 = load i32, i32* %overlaps, align 4
  %tobool = icmp ne i32 %51, 0
  br i1 %tobool, label %if.then.50, label %if.end.90

if.then.50:                                       ; preds = %if.end.49
  %52 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %used = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %52, i32 0, i32 1
  %arrayidx = getelementptr inbounds [4 x i16], [4 x i16]* %used, i32 0, i64 0
  %53 = load i16, i16* %arrayidx, align 2
  %tobool51 = icmp ne i16 %53, 0
  br i1 %tobool51, label %if.then.52, label %if.end.53

if.then.52:                                       ; preds = %if.then.50
  %54 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif, align 8
  %fix_overlapping_area = getelementptr inbounds %struct.redisplay_interface, %struct.redisplay_interface* %54, i32 0, i32 12
  %55 = load void (%struct.window*, %struct.glyph_row*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, i32, i32)** %fix_overlapping_area, align 8
  %56 = load %struct.window*, %struct.window** %w.addr, align 8
  %57 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %58 = load i32, i32* %overlaps, align 4
  call void %55(%struct.window* %56, %struct.glyph_row* %57, i32 0, i32 %58)
  br label %if.end.53

if.end.53:                                        ; preds = %if.then.52, %if.then.50
  %59 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %used54 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %59, i32 0, i32 1
  %arrayidx55 = getelementptr inbounds [4 x i16], [4 x i16]* %used54, i32 0, i64 1
  %60 = load i16, i16* %arrayidx55, align 2
  %tobool56 = icmp ne i16 %60, 0
  br i1 %tobool56, label %if.then.57, label %if.end.59

if.then.57:                                       ; preds = %if.end.53
  %61 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif, align 8
  %fix_overlapping_area58 = getelementptr inbounds %struct.redisplay_interface, %struct.redisplay_interface* %61, i32 0, i32 12
  %62 = load void (%struct.window*, %struct.glyph_row*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, i32, i32)** %fix_overlapping_area58, align 8
  %63 = load %struct.window*, %struct.window** %w.addr, align 8
  %64 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %65 = load i32, i32* %overlaps, align 4
  call void %62(%struct.window* %63, %struct.glyph_row* %64, i32 1, i32 %65)
  br label %if.end.59

if.end.59:                                        ; preds = %if.then.57, %if.end.53
  %66 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %used60 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %66, i32 0, i32 1
  %arrayidx61 = getelementptr inbounds [4 x i16], [4 x i16]* %used60, i32 0, i64 2
  %67 = load i16, i16* %arrayidx61, align 2
  %tobool62 = icmp ne i16 %67, 0
  br i1 %tobool62, label %if.then.63, label %if.end.65

if.then.63:                                       ; preds = %if.end.59
  %68 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif, align 8
  %fix_overlapping_area64 = getelementptr inbounds %struct.redisplay_interface, %struct.redisplay_interface* %68, i32 0, i32 12
  %69 = load void (%struct.window*, %struct.glyph_row*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, i32, i32)** %fix_overlapping_area64, align 8
  %70 = load %struct.window*, %struct.window** %w.addr, align 8
  %71 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %72 = load i32, i32* %overlaps, align 4
  call void %69(%struct.window* %70, %struct.glyph_row* %71, i32 2, i32 %72)
  br label %if.end.65

if.end.65:                                        ; preds = %if.then.63, %if.end.59
  %73 = load i32, i32* %overlaps, align 4
  %and = and i32 %73, 1
  %tobool66 = icmp ne i32 %and, 0
  br i1 %tobool66, label %if.then.67, label %if.end.76

if.then.67:                                       ; preds = %if.end.65
  %74 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix68 = getelementptr inbounds %struct.window, %struct.window* %74, i32 0, i32 24
  %75 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix68, align 8
  %rows69 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %75, i32 0, i32 1
  %76 = load %struct.glyph_row*, %struct.glyph_row** %rows69, align 8
  %77 = load i32, i32* %i, align 4
  %sub70 = sub nsw i32 %77, 1
  %idx.ext71 = sext i32 %sub70 to i64
  %add.ptr72 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %76, i64 %idx.ext71
  %overlapped_p73 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr72, i32 0, i32 22
  %78 = bitcast i40* %overlapped_p73 to i64*
  %bf.load74 = load i64, i64* %78, align 4
  %bf.clear75 = and i64 %bf.load74, -2097153
  %bf.set = or i64 %bf.clear75, 2097152
  store i64 %bf.set, i64* %78, align 4
  br label %if.end.76

if.end.76:                                        ; preds = %if.then.67, %if.end.65
  %79 = load i32, i32* %overlaps, align 4
  %and77 = and i32 %79, 2
  %tobool78 = icmp ne i32 %and77, 0
  br i1 %tobool78, label %if.then.79, label %if.end.89

if.then.79:                                       ; preds = %if.end.76
  %80 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix80 = getelementptr inbounds %struct.window, %struct.window* %80, i32 0, i32 24
  %81 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix80, align 8
  %rows81 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %81, i32 0, i32 1
  %82 = load %struct.glyph_row*, %struct.glyph_row** %rows81, align 8
  %83 = load i32, i32* %i, align 4
  %add82 = add nsw i32 %83, 1
  %idx.ext83 = sext i32 %add82 to i64
  %add.ptr84 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %82, i64 %idx.ext83
  %overlapped_p85 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr84, i32 0, i32 22
  %84 = bitcast i40* %overlapped_p85 to i64*
  %bf.load86 = load i64, i64* %84, align 4
  %bf.clear87 = and i64 %bf.load86, -2097153
  %bf.set88 = or i64 %bf.clear87, 2097152
  store i64 %bf.set88, i64* %84, align 4
  br label %if.end.89

if.end.89:                                        ; preds = %if.then.79, %if.end.76
  br label %if.end.90

if.end.90:                                        ; preds = %if.end.89, %if.end.49
  br label %if.end.91

if.end.91:                                        ; preds = %if.end.90, %if.end.8
  %85 = load i32, i32* %bottom_y, align 4
  %86 = load i32, i32* %yb.addr, align 4
  %cmp92 = icmp sge i32 %85, %86
  br i1 %cmp92, label %if.then.93, label %if.end.94

if.then.93:                                       ; preds = %if.end.91
  br label %for.end

if.end.94:                                        ; preds = %if.end.91
  br label %for.inc

for.inc:                                          ; preds = %if.end.94, %if.then.7
  %87 = load i32, i32* %i, align 4
  %inc = add nsw i32 %87, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then.93, %if.then, %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @set_window_cursor_after_update(%struct.window* %w) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %f = alloca %struct.frame*, align 8
  %cx = alloca i32, align 4
  %cy = alloca i32, align 4
  %vpos = alloca i32, align 4
  %hpos = alloca i32, align 4
  %last_row = alloca %struct.glyph_row*, align 8
  %yb = alloca i32, align 4
  %row = alloca %struct.glyph_row*, align 8
  %start = alloca %struct.glyph*, align 8
  %last = alloca %struct.glyph*, align 8
  %glyph = alloca %struct.glyph*, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 1
  %1 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  store %struct.frame* %3, %struct.frame** %f, align 8
  %4 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 431), align 1
  %tobool = trunc i8 %4 to i1
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %5 = load i64, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @echo_area_buffer, i32 0, i64 0), align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %5, %call
  br i1 %cmp, label %if.else, label %land.lhs.true.1

land.lhs.true.1:                                  ; preds = %land.lhs.true
  %6 = load i64, i64* @minibuf_window, align 8
  %call2 = call %struct.window* @XWINDOW(i64 %6)
  %7 = load %struct.window*, %struct.window** %w.addr, align 8
  %cmp3 = icmp eq %struct.window* %call2, %7
  br i1 %cmp3, label %land.lhs.true.4, label %if.else

land.lhs.true.4:                                  ; preds = %land.lhs.true.1
  %8 = load i64, i64* @minibuf_window, align 8
  %9 = load i64, i64* @echo_area_window, align 8
  %cmp5 = icmp eq i64 %8, %9
  br i1 %cmp5, label %land.lhs.true.6, label %if.else

land.lhs.true.6:                                  ; preds = %land.lhs.true.4
  %10 = load %struct.frame*, %struct.frame** %f, align 8
  %minibuffer_window = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 7
  %11 = load i64, i64* %minibuffer_window, align 8
  %call7 = call zeroext i1 @WINDOWP(i64 %11)
  br i1 %call7, label %land.lhs.true.8, label %if.else

land.lhs.true.8:                                  ; preds = %land.lhs.true.6
  %12 = load %struct.frame*, %struct.frame** %f, align 8
  %minibuffer_window9 = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 7
  %13 = load i64, i64* %minibuffer_window9, align 8
  %call10 = call %struct.window* @XWINDOW(i64 %13)
  %frame11 = getelementptr inbounds %struct.window, %struct.window* %call10, i32 0, i32 1
  %14 = load i64, i64* %frame11, align 8
  %sub12 = sub nsw i64 %14, 5
  %15 = inttoptr i64 %sub12 to i8*
  %16 = bitcast i8* %15 to %struct.frame*
  %17 = load %struct.frame*, %struct.frame** %f, align 8
  %cmp13 = icmp eq %struct.frame* %16, %17
  br i1 %cmp13, label %land.lhs.true.14, label %if.else

land.lhs.true.14:                                 ; preds = %land.lhs.true.8
  %18 = load %struct.frame*, %struct.frame** %f, align 8
  %minibuffer_window15 = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 7
  %19 = load i64, i64* %minibuffer_window15, align 8
  %20 = load i64, i64* @echo_area_window, align 8
  %cmp16 = icmp eq i64 %19, %20
  br i1 %cmp16, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true.14
  store i32 0, i32* %hpos, align 4
  store i32 0, i32* %vpos, align 4
  store i32 0, i32* %cy, align 4
  store i32 0, i32* %cx, align 4
  store %struct.glyph_row* null, %struct.glyph_row** %last_row, align 8
  %21 = load %struct.window*, %struct.window** %w.addr, align 8
  %call17 = call i32 @window_text_bottom_y(%struct.window* %21)
  store i32 %call17, i32* %yb, align 4
  %22 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %22, i32 0, i32 24
  %23 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %23, i32 0, i32 1
  %24 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  store %struct.glyph_row* %24, %struct.glyph_row** %row, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %25 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %enabled_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %25, i32 0, i32 22
  %26 = bitcast i40* %enabled_p to i64*
  %bf.load = load i64, i64* %26, align 4
  %bf.lshr = lshr i64 %bf.load, 10
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %27 = load %struct.glyph_row*, %struct.glyph_row** %last_row, align 8
  %tobool18 = icmp ne %struct.glyph_row* %27, null
  br i1 %tobool18, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %land.rhs
  %28 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %y = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %28, i32 0, i32 4
  %29 = load i32, i32* %y, align 4
  %30 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %height = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %30, i32 0, i32 7
  %31 = load i32, i32* %height, align 4
  %add = add nsw i32 %29, %31
  %32 = load i32, i32* %yb, align 4
  %cmp19 = icmp sle i32 %add, %32
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %33 = phi i1 [ true, %land.rhs ], [ %cmp19, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %for.cond
  %34 = phi i1 [ false, %for.cond ], [ %33, %lor.end ]
  br i1 %34, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %35 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %used = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %35, i32 0, i32 1
  %arrayidx = getelementptr inbounds [4 x i16], [4 x i16]* %used, i32 0, i64 1
  %36 = load i16, i16* %arrayidx, align 2
  %conv = sext i16 %36 to i32
  %tobool20 = icmp ne i32 %conv, 0
  br i1 %tobool20, label %land.lhs.true.21, label %if.end

land.lhs.true.21:                                 ; preds = %for.body
  %37 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %glyphs = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %37, i32 0, i32 0
  %arrayidx22 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs, i32 0, i64 1
  %38 = load %struct.glyph*, %struct.glyph** %arrayidx22, align 8
  %arrayidx23 = getelementptr inbounds %struct.glyph, %struct.glyph* %38, i64 0
  %charpos = getelementptr inbounds %struct.glyph, %struct.glyph* %arrayidx23, i32 0, i32 0
  %39 = load i64, i64* %charpos, align 8
  %cmp24 = icmp sge i64 %39, 0
  br i1 %cmp24, label %if.then.26, label %if.end

if.then.26:                                       ; preds = %land.lhs.true.21
  %40 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  store %struct.glyph_row* %40, %struct.glyph_row** %last_row, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.26, %land.lhs.true.21, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %41 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %incdec.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %41, i32 1
  store %struct.glyph_row* %incdec.ptr, %struct.glyph_row** %row, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %42 = load %struct.glyph_row*, %struct.glyph_row** %last_row, align 8
  %tobool27 = icmp ne %struct.glyph_row* %42, null
  br i1 %tobool27, label %if.then.28, label %if.end.56

if.then.28:                                       ; preds = %for.end
  %43 = load %struct.glyph_row*, %struct.glyph_row** %last_row, align 8
  %glyphs29 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %43, i32 0, i32 0
  %arrayidx30 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs29, i32 0, i64 1
  %44 = load %struct.glyph*, %struct.glyph** %arrayidx30, align 8
  store %struct.glyph* %44, %struct.glyph** %start, align 8
  %45 = load %struct.glyph*, %struct.glyph** %start, align 8
  %46 = load %struct.glyph_row*, %struct.glyph_row** %last_row, align 8
  %used31 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %46, i32 0, i32 1
  %arrayidx32 = getelementptr inbounds [4 x i16], [4 x i16]* %used31, i32 0, i64 1
  %47 = load i16, i16* %arrayidx32, align 2
  %conv33 = sext i16 %47 to i32
  %idx.ext = sext i32 %conv33 to i64
  %add.ptr = getelementptr inbounds %struct.glyph, %struct.glyph* %45, i64 %idx.ext
  %add.ptr34 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr, i64 -1
  store %struct.glyph* %add.ptr34, %struct.glyph** %last, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.28
  %48 = load %struct.glyph*, %struct.glyph** %last, align 8
  %49 = load %struct.glyph*, %struct.glyph** %start, align 8
  %cmp35 = icmp ugt %struct.glyph* %48, %49
  br i1 %cmp35, label %land.rhs.37, label %land.end.41

land.rhs.37:                                      ; preds = %while.cond
  %50 = load %struct.glyph*, %struct.glyph** %last, align 8
  %charpos38 = getelementptr inbounds %struct.glyph, %struct.glyph* %50, i32 0, i32 0
  %51 = load i64, i64* %charpos38, align 8
  %cmp39 = icmp slt i64 %51, 0
  br label %land.end.41

land.end.41:                                      ; preds = %land.rhs.37, %while.cond
  %52 = phi i1 [ false, %while.cond ], [ %cmp39, %land.rhs.37 ]
  br i1 %52, label %while.body, label %while.end

while.body:                                       ; preds = %land.end.41
  %53 = load %struct.glyph*, %struct.glyph** %last, align 8
  %incdec.ptr42 = getelementptr inbounds %struct.glyph, %struct.glyph* %53, i32 -1
  store %struct.glyph* %incdec.ptr42, %struct.glyph** %last, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end.41
  %54 = load %struct.glyph*, %struct.glyph** %start, align 8
  store %struct.glyph* %54, %struct.glyph** %glyph, align 8
  br label %for.cond.43

for.cond.43:                                      ; preds = %for.inc.49, %while.end
  %55 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %56 = load %struct.glyph*, %struct.glyph** %last, align 8
  %cmp44 = icmp ult %struct.glyph* %55, %56
  br i1 %cmp44, label %for.body.46, label %for.end.51

for.body.46:                                      ; preds = %for.cond.43
  %57 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %pixel_width = getelementptr inbounds %struct.glyph, %struct.glyph* %57, i32 0, i32 2
  %58 = load i16, i16* %pixel_width, align 2
  %conv47 = sext i16 %58 to i32
  %59 = load i32, i32* %cx, align 4
  %add48 = add nsw i32 %59, %conv47
  store i32 %add48, i32* %cx, align 4
  %60 = load i32, i32* %hpos, align 4
  %inc = add nsw i32 %60, 1
  store i32 %inc, i32* %hpos, align 4
  br label %for.inc.49

for.inc.49:                                       ; preds = %for.body.46
  %61 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %incdec.ptr50 = getelementptr inbounds %struct.glyph, %struct.glyph* %61, i32 1
  store %struct.glyph* %incdec.ptr50, %struct.glyph** %glyph, align 8
  br label %for.cond.43

for.end.51:                                       ; preds = %for.cond.43
  %62 = load %struct.glyph_row*, %struct.glyph_row** %last_row, align 8
  %y52 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %62, i32 0, i32 4
  %63 = load i32, i32* %y52, align 4
  store i32 %63, i32* %cy, align 4
  %64 = load %struct.glyph_row*, %struct.glyph_row** %last_row, align 8
  %65 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix53 = getelementptr inbounds %struct.window, %struct.window* %65, i32 0, i32 24
  %66 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix53, align 8
  %rows54 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %66, i32 0, i32 1
  %67 = load %struct.glyph_row*, %struct.glyph_row** %rows54, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.glyph_row* %64 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.glyph_row* %67 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 256
  %conv55 = trunc i64 %sub.ptr.div to i32
  store i32 %conv55, i32* %vpos, align 4
  br label %if.end.56

if.end.56:                                        ; preds = %for.end.51, %for.end
  br label %if.end.63

if.else:                                          ; preds = %land.lhs.true.14, %land.lhs.true.8, %land.lhs.true.6, %land.lhs.true.4, %land.lhs.true.1, %land.lhs.true, %entry
  %68 = load %struct.window*, %struct.window** %w.addr, align 8
  %cursor = getelementptr inbounds %struct.window, %struct.window* %68, i32 0, i32 49
  %x = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %cursor, i32 0, i32 0
  %69 = load i32, i32* %x, align 4
  store i32 %69, i32* %cx, align 4
  %70 = load %struct.window*, %struct.window** %w.addr, align 8
  %cursor57 = getelementptr inbounds %struct.window, %struct.window* %70, i32 0, i32 49
  %y58 = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %cursor57, i32 0, i32 1
  %71 = load i32, i32* %y58, align 4
  store i32 %71, i32* %cy, align 4
  %72 = load %struct.window*, %struct.window** %w.addr, align 8
  %cursor59 = getelementptr inbounds %struct.window, %struct.window* %72, i32 0, i32 49
  %hpos60 = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %cursor59, i32 0, i32 2
  %73 = load i32, i32* %hpos60, align 4
  store i32 %73, i32* %hpos, align 4
  %74 = load %struct.window*, %struct.window** %w.addr, align 8
  %cursor61 = getelementptr inbounds %struct.window, %struct.window* %74, i32 0, i32 49
  %vpos62 = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %cursor61, i32 0, i32 3
  %75 = load i32, i32* %vpos62, align 4
  store i32 %75, i32* %vpos, align 4
  br label %if.end.63

if.end.63:                                        ; preds = %if.else, %if.end.56
  %76 = load i32, i32* %hpos, align 4
  %conv64 = sext i32 %76 to i64
  %77 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix65 = getelementptr inbounds %struct.window, %struct.window* %77, i32 0, i32 24
  %78 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix65, align 8
  %matrix_w = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %78, i32 0, i32 6
  %79 = load i32, i32* %matrix_w, align 4
  %sub66 = sub nsw i32 %79, 1
  %conv67 = sext i32 %sub66 to i64
  %call68 = call i64 @clip_to_bounds(i64 -1, i64 %conv64, i64 %conv67)
  %conv69 = trunc i64 %call68 to i32
  store i32 %conv69, i32* %hpos, align 4
  %80 = load i32, i32* %vpos, align 4
  %conv70 = sext i32 %80 to i64
  %81 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix71 = getelementptr inbounds %struct.window, %struct.window* %81, i32 0, i32 24
  %82 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix71, align 8
  %nrows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %82, i32 0, i32 3
  %83 = load i32, i32* %nrows, align 4
  %sub72 = sub nsw i32 %83, 1
  %conv73 = sext i32 %sub72 to i64
  %call74 = call i64 @clip_to_bounds(i64 0, i64 %conv70, i64 %conv73)
  %conv75 = trunc i64 %call74 to i32
  store i32 %conv75, i32* %vpos, align 4
  %84 = load %struct.window*, %struct.window** %w.addr, align 8
  %85 = load i32, i32* %vpos, align 4
  %86 = load i32, i32* %hpos, align 4
  %87 = load i32, i32* %cy, align 4
  %88 = load i32, i32* %cx, align 4
  call void @output_cursor_to(%struct.window* %84, i32 %85, i32 %86, i32 %87, i32 %88)
  ret void
}

declare zeroext i1 @update_window_fringes(%struct.window*, i1 zeroext) #1

declare void @xwidget_end_redisplay(%struct.window*, %struct.glyph_matrix*) #1

; Function Attrs: nounwind uwtable
define internal void @update_marginal_area(%struct.window* %w, %struct.glyph_row* %updated_row, i32 %area, i32 %vpos) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %updated_row.addr = alloca %struct.glyph_row*, align 8
  %area.addr = alloca i32, align 4
  %vpos.addr = alloca i32, align 4
  %desired_row = alloca %struct.glyph_row*, align 8
  %rif = alloca %struct.redisplay_interface*, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store %struct.glyph_row* %updated_row, %struct.glyph_row** %updated_row.addr, align 8
  store i32 %area, i32* %area.addr, align 4
  store i32 %vpos, i32* %vpos.addr, align 4
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %desired_matrix = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 25
  %1 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %1, i32 0, i32 1
  %2 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %3 = load i32, i32* %vpos.addr, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %2, i64 %idx.ext
  store %struct.glyph_row* %add.ptr, %struct.glyph_row** %desired_row, align 8
  %4 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %4, i32 0, i32 1
  %5 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %5, 5
  %6 = inttoptr i64 %sub to i8*
  %7 = bitcast i8* %6 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 61
  %8 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %rif1 = getelementptr inbounds %struct.terminal, %struct.terminal* %8, i32 0, i32 15
  %9 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif1, align 8
  store %struct.redisplay_interface* %9, %struct.redisplay_interface** %rif, align 8
  %10 = load %struct.window*, %struct.window** %w.addr, align 8
  %11 = load i32, i32* %vpos.addr, align 4
  %12 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %y = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %12, i32 0, i32 4
  %13 = load i32, i32* %y, align 4
  call void @output_cursor_to(%struct.window* %10, i32 %11, i32 0, i32 %13, i32 0)
  %14 = load i32, i32* %area.addr, align 4
  %idxprom = sext i32 %14 to i64
  %15 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %used = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %15, i32 0, i32 1
  %arrayidx = getelementptr inbounds [4 x i16], [4 x i16]* %used, i32 0, i64 %idxprom
  %16 = load i16, i16* %arrayidx, align 2
  %tobool = icmp ne i16 %16, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %17 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif, align 8
  %write_glyphs = getelementptr inbounds %struct.redisplay_interface, %struct.redisplay_interface* %17, i32 0, i32 2
  %18 = load void (%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32)** %write_glyphs, align 8
  %19 = load %struct.window*, %struct.window** %w.addr, align 8
  %20 = load %struct.glyph_row*, %struct.glyph_row** %updated_row.addr, align 8
  %21 = load i32, i32* %area.addr, align 4
  %idxprom2 = sext i32 %21 to i64
  %22 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %glyphs = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %22, i32 0, i32 0
  %arrayidx3 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs, i32 0, i64 %idxprom2
  %23 = load %struct.glyph*, %struct.glyph** %arrayidx3, align 8
  %24 = load i32, i32* %area.addr, align 4
  %25 = load i32, i32* %area.addr, align 4
  %idxprom4 = sext i32 %25 to i64
  %26 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %used5 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %26, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [4 x i16], [4 x i16]* %used5, i32 0, i64 %idxprom4
  %27 = load i16, i16* %arrayidx6, align 2
  %conv = sext i16 %27 to i32
  call void %18(%struct.window* %19, %struct.glyph_row* %20, %struct.glyph* %23, i32 %24, i32 %conv)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %28 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif, align 8
  %clear_end_of_line = getelementptr inbounds %struct.redisplay_interface, %struct.redisplay_interface* %28, i32 0, i32 4
  %29 = load void (%struct.window*, %struct.glyph_row*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, i32, i32)** %clear_end_of_line, align 8
  %30 = load %struct.window*, %struct.window** %w.addr, align 8
  %31 = load %struct.glyph_row*, %struct.glyph_row** %updated_row.addr, align 8
  %32 = load i32, i32* %area.addr, align 4
  call void %29(%struct.window* %30, %struct.glyph_row* %31, i32 %32, i32 -1)
  ret void
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @update_text_area(%struct.window* %w, %struct.glyph_row* %updated_row, i32 %vpos) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %updated_row.addr = alloca %struct.glyph_row*, align 8
  %vpos.addr = alloca i32, align 4
  %current_row = alloca %struct.glyph_row*, align 8
  %desired_row = alloca %struct.glyph_row*, align 8
  %rif = alloca %struct.redisplay_interface*, align 8
  %changed_p = alloca i8, align 1
  %stop = alloca i32, align 4
  %i = alloca i32, align 4
  %x50 = alloca i32, align 4
  %current_glyph = alloca %struct.glyph*, align 8
  %desired_glyph = alloca %struct.glyph*, align 8
  %overlapping_glyphs_p = alloca i8, align 1
  %desired_stop_pos = alloca i32, align 4
  %abort_skipping = alloca i8, align 1
  %can_skip_p = alloca i8, align 1
  %glyph = alloca %struct.glyph*, align 8
  %left = alloca i32, align 4
  %right = alloca i32, align 4
  %start_hpos = alloca i32, align 4
  %left299 = alloca i32, align 4
  %right300 = alloca i32, align 4
  %start_x = alloca i32, align 4
  %start_hpos333 = alloca i32, align 4
  %start = alloca %struct.glyph*, align 8
  %current_x = alloca i32, align 4
  %skip_first_p = alloca i8, align 1
  %xlim = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store %struct.glyph_row* %updated_row, %struct.glyph_row** %updated_row.addr, align 8
  store i32 %vpos, i32* %vpos.addr, align 4
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 24
  %1 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %1, i32 0, i32 1
  %2 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %3 = load i32, i32* %vpos.addr, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %2, i64 %idx.ext
  store %struct.glyph_row* %add.ptr, %struct.glyph_row** %current_row, align 8
  %4 = load %struct.window*, %struct.window** %w.addr, align 8
  %desired_matrix = getelementptr inbounds %struct.window, %struct.window* %4, i32 0, i32 25
  %5 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %rows1 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %5, i32 0, i32 1
  %6 = load %struct.glyph_row*, %struct.glyph_row** %rows1, align 8
  %7 = load i32, i32* %vpos.addr, align 4
  %idx.ext2 = sext i32 %7 to i64
  %add.ptr3 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %6, i64 %idx.ext2
  store %struct.glyph_row* %add.ptr3, %struct.glyph_row** %desired_row, align 8
  %8 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %8, i32 0, i32 1
  %9 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %9, 5
  %10 = inttoptr i64 %sub to i8*
  %11 = bitcast i8* %10 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 61
  %12 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %rif4 = getelementptr inbounds %struct.terminal, %struct.terminal* %12, i32 0, i32 15
  %13 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif4, align 8
  store %struct.redisplay_interface* %13, %struct.redisplay_interface** %rif, align 8
  store i8 0, i8* %changed_p, align 1
  %14 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %enabled_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %14, i32 0, i32 22
  %15 = bitcast i40* %enabled_p to i64*
  %bf.load = load i64, i64* %15, align 4
  %bf.lshr = lshr i64 %bf.load, 10
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %16 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %y = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %16, i32 0, i32 4
  %17 = load i32, i32* %y, align 4
  %18 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %y5 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %18, i32 0, i32 4
  %19 = load i32, i32* %y5, align 4
  %cmp = icmp ne i32 %17, %19
  br i1 %cmp, label %if.then, label %lor.lhs.false.6

lor.lhs.false.6:                                  ; preds = %lor.lhs.false
  %20 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %ascent = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %20, i32 0, i32 6
  %21 = load i32, i32* %ascent, align 4
  %22 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %ascent7 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %22, i32 0, i32 6
  %23 = load i32, i32* %ascent7, align 4
  %cmp8 = icmp ne i32 %21, %23
  br i1 %cmp8, label %if.then, label %lor.lhs.false.9

lor.lhs.false.9:                                  ; preds = %lor.lhs.false.6
  %24 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %phys_ascent = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %24, i32 0, i32 8
  %25 = load i32, i32* %phys_ascent, align 4
  %26 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %phys_ascent10 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %26, i32 0, i32 8
  %27 = load i32, i32* %phys_ascent10, align 4
  %cmp11 = icmp ne i32 %25, %27
  br i1 %cmp11, label %if.then, label %lor.lhs.false.12

lor.lhs.false.12:                                 ; preds = %lor.lhs.false.9
  %28 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %phys_height = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %28, i32 0, i32 9
  %29 = load i32, i32* %phys_height, align 4
  %30 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %phys_height13 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %30, i32 0, i32 9
  %31 = load i32, i32* %phys_height13, align 4
  %cmp14 = icmp ne i32 %29, %31
  br i1 %cmp14, label %if.then, label %lor.lhs.false.15

lor.lhs.false.15:                                 ; preds = %lor.lhs.false.12
  %32 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %visible_height = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %32, i32 0, i32 10
  %33 = load i32, i32* %visible_height, align 4
  %34 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %visible_height16 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %34, i32 0, i32 10
  %35 = load i32, i32* %visible_height16, align 4
  %cmp17 = icmp ne i32 %33, %35
  br i1 %cmp17, label %if.then, label %lor.lhs.false.18

lor.lhs.false.18:                                 ; preds = %lor.lhs.false.15
  %36 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %overlapped_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %36, i32 0, i32 22
  %37 = bitcast i40* %overlapped_p to i64*
  %bf.load19 = load i64, i64* %37, align 4
  %bf.lshr20 = lshr i64 %bf.load19, 21
  %bf.clear21 = and i64 %bf.lshr20, 1
  %bf.cast22 = trunc i64 %bf.clear21 to i1
  br i1 %bf.cast22, label %if.then, label %lor.lhs.false.23

lor.lhs.false.23:                                 ; preds = %lor.lhs.false.18
  %38 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %mouse_face_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %38, i32 0, i32 22
  %39 = bitcast i40* %mouse_face_p to i64*
  %bf.load24 = load i64, i64* %39, align 4
  %bf.lshr25 = lshr i64 %bf.load24, 25
  %bf.clear26 = and i64 %bf.lshr25, 1
  %bf.cast27 = trunc i64 %bf.clear26 to i1
  br i1 %bf.cast27, label %land.lhs.true, label %lor.lhs.false.34

land.lhs.true:                                    ; preds = %lor.lhs.false.23
  %40 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %mode_line_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %40, i32 0, i32 22
  %41 = bitcast i40* %mode_line_p to i64*
  %bf.load28 = load i64, i64* %41, align 4
  %bf.lshr29 = lshr i64 %bf.load28, 20
  %bf.clear30 = and i64 %bf.lshr29, 1
  %bf.cast31 = trunc i64 %bf.clear30 to i1
  br i1 %bf.cast31, label %land.lhs.true.32, label %if.then

land.lhs.true.32:                                 ; preds = %land.lhs.true
  %42 = load i32, i32* %vpos.addr, align 4
  %cmp33 = icmp sgt i32 %42, 0
  br i1 %cmp33, label %lor.lhs.false.34, label %if.then

lor.lhs.false.34:                                 ; preds = %land.lhs.true.32, %lor.lhs.false.23
  %43 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %x = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %43, i32 0, i32 3
  %44 = load i32, i32* %x, align 4
  %45 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %x35 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %45, i32 0, i32 3
  %46 = load i32, i32* %x35, align 4
  %cmp36 = icmp ne i32 %44, %46
  br i1 %cmp36, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false.34, %land.lhs.true.32, %land.lhs.true, %lor.lhs.false.18, %lor.lhs.false.15, %lor.lhs.false.12, %lor.lhs.false.9, %lor.lhs.false.6, %lor.lhs.false, %entry
  %47 = load %struct.window*, %struct.window** %w.addr, align 8
  %48 = load i32, i32* %vpos.addr, align 4
  %49 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %y37 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %49, i32 0, i32 4
  %50 = load i32, i32* %y37, align 4
  %51 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %x38 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %51, i32 0, i32 3
  %52 = load i32, i32* %x38, align 4
  call void @output_cursor_to(%struct.window* %47, i32 %48, i32 0, i32 %50, i32 %52)
  %53 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %used = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %53, i32 0, i32 1
  %arrayidx = getelementptr inbounds [4 x i16], [4 x i16]* %used, i32 0, i64 1
  %54 = load i16, i16* %arrayidx, align 2
  %tobool = icmp ne i16 %54, 0
  br i1 %tobool, label %if.then.39, label %if.end

if.then.39:                                       ; preds = %if.then
  %55 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif, align 8
  %write_glyphs = getelementptr inbounds %struct.redisplay_interface, %struct.redisplay_interface* %55, i32 0, i32 2
  %56 = load void (%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32)** %write_glyphs, align 8
  %57 = load %struct.window*, %struct.window** %w.addr, align 8
  %58 = load %struct.glyph_row*, %struct.glyph_row** %updated_row.addr, align 8
  %59 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %glyphs = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %59, i32 0, i32 0
  %arrayidx40 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs, i32 0, i64 1
  %60 = load %struct.glyph*, %struct.glyph** %arrayidx40, align 8
  %61 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %used41 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %61, i32 0, i32 1
  %arrayidx42 = getelementptr inbounds [4 x i16], [4 x i16]* %used41, i32 0, i64 1
  %62 = load i16, i16* %arrayidx42, align 2
  %conv = sext i16 %62 to i32
  call void %56(%struct.window* %57, %struct.glyph_row* %58, %struct.glyph* %60, i32 1, i32 %conv)
  br label %if.end

if.end:                                           ; preds = %if.then.39, %if.then
  %63 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif, align 8
  %clear_end_of_line = getelementptr inbounds %struct.redisplay_interface, %struct.redisplay_interface* %63, i32 0, i32 4
  %64 = load void (%struct.window*, %struct.glyph_row*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, i32, i32)** %clear_end_of_line, align 8
  %65 = load %struct.window*, %struct.window** %w.addr, align 8
  %66 = load %struct.glyph_row*, %struct.glyph_row** %updated_row.addr, align 8
  call void %64(%struct.window* %65, %struct.glyph_row* %66, i32 1, i32 -1)
  store i8 1, i8* %changed_p, align 1
  %67 = load i32, i32* %vpos.addr, align 4
  %68 = load %struct.window*, %struct.window** %w.addr, align 8
  %phys_cursor = getelementptr inbounds %struct.window, %struct.window* %68, i32 0, i32 50
  %vpos43 = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %phys_cursor, i32 0, i32 3
  %69 = load i32, i32* %vpos43, align 4
  %cmp44 = icmp eq i32 %67, %69
  br i1 %cmp44, label %if.then.46, label %if.end.49

if.then.46:                                       ; preds = %if.end
  %70 = load %struct.window*, %struct.window** %w.addr, align 8
  %phys_cursor_on_p = getelementptr inbounds %struct.window, %struct.window* %70, i32 0, i32 67
  %bf.load47 = load i16, i16* %phys_cursor_on_p, align 4
  %bf.clear48 = and i16 %bf.load47, -129
  store i16 %bf.clear48, i16* %phys_cursor_on_p, align 4
  br label %if.end.49

if.end.49:                                        ; preds = %if.then.46, %if.end
  br label %if.end.615

if.else:                                          ; preds = %lor.lhs.false.34
  %71 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %glyphs51 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %71, i32 0, i32 0
  %arrayidx52 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs51, i32 0, i64 1
  %72 = load %struct.glyph*, %struct.glyph** %arrayidx52, align 8
  store %struct.glyph* %72, %struct.glyph** %current_glyph, align 8
  %73 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %glyphs53 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %73, i32 0, i32 0
  %arrayidx54 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs53, i32 0, i64 1
  %74 = load %struct.glyph*, %struct.glyph** %arrayidx54, align 8
  store %struct.glyph* %74, %struct.glyph** %desired_glyph, align 8
  %75 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %contains_overlapping_glyphs_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %75, i32 0, i32 22
  %76 = bitcast i40* %contains_overlapping_glyphs_p to i64*
  %bf.load55 = load i64, i64* %76, align 4
  %bf.lshr56 = lshr i64 %bf.load55, 18
  %bf.clear57 = and i64 %bf.lshr56, 1
  %bf.cast58 = trunc i64 %bf.clear57 to i1
  %frombool = zext i1 %bf.cast58 to i8
  store i8 %frombool, i8* %overlapping_glyphs_p, align 1
  %77 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %used59 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %77, i32 0, i32 1
  %arrayidx60 = getelementptr inbounds [4 x i16], [4 x i16]* %used59, i32 0, i64 1
  %78 = load i16, i16* %arrayidx60, align 2
  %conv61 = sext i16 %78 to i32
  store i32 %conv61, i32* %desired_stop_pos, align 4
  store i8 0, i8* %abort_skipping, align 1
  %79 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %fill_line_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %79, i32 0, i32 22
  %80 = bitcast i40* %fill_line_p to i64*
  %bf.load62 = load i64, i64* %80, align 4
  %bf.lshr63 = lshr i64 %bf.load62, 16
  %bf.clear64 = and i64 %bf.lshr63, 1
  %bf.cast65 = trunc i64 %bf.clear64 to i1
  br i1 %bf.cast65, label %land.lhs.true.67, label %if.end.86

land.lhs.true.67:                                 ; preds = %if.else
  %81 = load i32, i32* %desired_stop_pos, align 4
  %82 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %used68 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %82, i32 0, i32 1
  %arrayidx69 = getelementptr inbounds [4 x i16], [4 x i16]* %used68, i32 0, i64 1
  %83 = load i16, i16* %arrayidx69, align 2
  %conv70 = sext i16 %83 to i32
  %cmp71 = icmp slt i32 %81, %conv70
  br i1 %cmp71, label %if.then.85, label %lor.lhs.false.73

lor.lhs.false.73:                                 ; preds = %land.lhs.true.67
  %84 = load i32, i32* %desired_stop_pos, align 4
  %85 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %used74 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %85, i32 0, i32 1
  %arrayidx75 = getelementptr inbounds [4 x i16], [4 x i16]* %used74, i32 0, i64 1
  %86 = load i16, i16* %arrayidx75, align 2
  %conv76 = sext i16 %86 to i32
  %cmp77 = icmp eq i32 %84, %conv76
  br i1 %cmp77, label %land.lhs.true.79, label %if.end.86

land.lhs.true.79:                                 ; preds = %lor.lhs.false.73
  %87 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %fill_line_p80 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %87, i32 0, i32 22
  %88 = bitcast i40* %fill_line_p80 to i64*
  %bf.load81 = load i64, i64* %88, align 4
  %bf.lshr82 = lshr i64 %bf.load81, 16
  %bf.clear83 = and i64 %bf.lshr82, 1
  %bf.cast84 = trunc i64 %bf.clear83 to i1
  br i1 %bf.cast84, label %if.end.86, label %if.then.85

if.then.85:                                       ; preds = %land.lhs.true.79, %land.lhs.true.67
  %89 = load i32, i32* %desired_stop_pos, align 4
  %dec = add nsw i32 %89, -1
  store i32 %dec, i32* %desired_stop_pos, align 4
  br label %if.end.86

if.end.86:                                        ; preds = %if.then.85, %land.lhs.true.79, %lor.lhs.false.73, %if.else
  %90 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %used87 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %90, i32 0, i32 1
  %arrayidx88 = getelementptr inbounds [4 x i16], [4 x i16]* %used87, i32 0, i64 1
  %91 = load i16, i16* %arrayidx88, align 2
  %conv89 = sext i16 %91 to i32
  %92 = load i32, i32* %desired_stop_pos, align 4
  %cmp90 = icmp slt i32 %conv89, %92
  br i1 %cmp90, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.86
  %93 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %used92 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %93, i32 0, i32 1
  %arrayidx93 = getelementptr inbounds [4 x i16], [4 x i16]* %used92, i32 0, i64 1
  %94 = load i16, i16* %arrayidx93, align 2
  %conv94 = sext i16 %94 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end.86
  %95 = load i32, i32* %desired_stop_pos, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv94, %cond.true ], [ %95, %cond.false ]
  store i32 %cond, i32* %stop, align 4
  store i32 0, i32* %i, align 4
  %96 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %x95 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %96, i32 0, i32 3
  %97 = load i32, i32* %x95, align 4
  store i32 %97, i32* %x50, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end.529, %cond.end
  %98 = load i32, i32* %i, align 4
  %99 = load i32, i32* %stop, align 4
  %cmp96 = icmp slt i32 %98, %99
  br i1 %cmp96, label %while.body, label %while.end.530

while.body:                                       ; preds = %while.cond
  %100 = load i8, i8* %abort_skipping, align 1
  %tobool98 = trunc i8 %100 to i1
  %lnot = xor i1 %tobool98, true
  %frombool99 = zext i1 %lnot to i8
  store i8 %frombool99, i8* %can_skip_p, align 1
  %101 = load i8, i8* %overlapping_glyphs_p, align 1
  %tobool100 = trunc i8 %101 to i1
  br i1 %tobool100, label %land.lhs.true.102, label %if.end.117

land.lhs.true.102:                                ; preds = %while.body
  %102 = load i32, i32* %i, align 4
  %cmp103 = icmp sgt i32 %102, 0
  br i1 %cmp103, label %if.then.105, label %if.end.117

if.then.105:                                      ; preds = %land.lhs.true.102
  %103 = load i32, i32* %i, align 4
  %sub106 = sub nsw i32 %103, 1
  %idxprom = sext i32 %sub106 to i64
  %104 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %glyphs107 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %104, i32 0, i32 0
  %arrayidx108 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs107, i32 0, i64 1
  %105 = load %struct.glyph*, %struct.glyph** %arrayidx108, align 8
  %arrayidx109 = getelementptr inbounds %struct.glyph, %struct.glyph* %105, i64 %idxprom
  store %struct.glyph* %arrayidx109, %struct.glyph** %glyph, align 8
  %106 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif, align 8
  %get_glyph_overhangs = getelementptr inbounds %struct.redisplay_interface, %struct.redisplay_interface* %106, i32 0, i32 11
  %107 = load void (%struct.glyph*, %struct.frame*, i32*, i32*)*, void (%struct.glyph*, %struct.frame*, i32*, i32*)** %get_glyph_overhangs, align 8
  %108 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %109 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame110 = getelementptr inbounds %struct.window, %struct.window* %109, i32 0, i32 1
  %110 = load i64, i64* %frame110, align 8
  %sub111 = sub nsw i64 %110, 5
  %111 = inttoptr i64 %sub111 to i8*
  %112 = bitcast i8* %111 to %struct.frame*
  call void %107(%struct.glyph* %108, %struct.frame* %112, i32* %left, i32* %right)
  %113 = load i32, i32* %right, align 4
  %cmp112 = icmp eq i32 %113, 0
  br i1 %cmp112, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.105
  %114 = load i8, i8* %abort_skipping, align 1
  %tobool114 = trunc i8 %114 to i1
  %lnot115 = xor i1 %tobool114, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.105
  %115 = phi i1 [ false, %if.then.105 ], [ %lnot115, %land.rhs ]
  %frombool116 = zext i1 %115 to i8
  store i8 %frombool116, i8* %can_skip_p, align 1
  br label %if.end.117

if.end.117:                                       ; preds = %land.end, %land.lhs.true.102, %while.body
  %116 = load i8, i8* %can_skip_p, align 1
  %tobool118 = trunc i8 %116 to i1
  br i1 %tobool118, label %if.then.119, label %if.end.326

if.then.119:                                      ; preds = %if.end.117
  %117 = load i32, i32* %i, align 4
  store i32 %117, i32* %start_hpos, align 4
  br label %while.cond.120

while.cond.120:                                   ; preds = %while.body.274, %if.then.119
  %118 = load i32, i32* %i, align 4
  %119 = load i32, i32* %stop, align 4
  %cmp121 = icmp slt i32 %118, %119
  br i1 %cmp121, label %land.rhs.123, label %land.end.273

land.rhs.123:                                     ; preds = %while.cond.120
  %120 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %type = getelementptr inbounds %struct.glyph, %struct.glyph* %120, i32 0, i32 6
  %121 = bitcast i24* %type to i32*
  %bf.load124 = load i32, i32* %121, align 8
  %bf.clear125 = and i32 %bf.load124, 7
  %122 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %type126 = getelementptr inbounds %struct.glyph, %struct.glyph* %122, i32 0, i32 6
  %123 = bitcast i24* %type126 to i32*
  %bf.load127 = load i32, i32* %123, align 8
  %bf.clear128 = and i32 %bf.load127, 7
  %cmp129 = icmp eq i32 %bf.clear125, %bf.clear128
  br i1 %cmp129, label %land.lhs.true.131, label %land.end.272

land.lhs.true.131:                                ; preds = %land.rhs.123
  %124 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %u = getelementptr inbounds %struct.glyph, %struct.glyph* %124, i32 0, i32 9
  %val = bitcast %union.anon.1* %u to i32*
  %125 = load i32, i32* %val, align 4
  %126 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %u132 = getelementptr inbounds %struct.glyph, %struct.glyph* %126, i32 0, i32 9
  %val133 = bitcast %union.anon.1* %u132 to i32*
  %127 = load i32, i32* %val133, align 4
  %cmp134 = icmp eq i32 %125, %127
  br i1 %cmp134, label %land.lhs.true.136, label %land.end.272

land.lhs.true.136:                                ; preds = %land.lhs.true.131
  %128 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %type137 = getelementptr inbounds %struct.glyph, %struct.glyph* %128, i32 0, i32 6
  %129 = bitcast i24* %type137 to i32*
  %bf.load138 = load i32, i32* %129, align 8
  %bf.clear139 = and i32 %bf.load138, 7
  %cmp140 = icmp eq i32 %bf.clear139, 3
  br i1 %cmp140, label %cond.true.142, label %cond.false.196

cond.true.142:                                    ; preds = %land.lhs.true.136
  %130 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %slice = getelementptr inbounds %struct.glyph, %struct.glyph* %130, i32 0, i32 8
  %img = bitcast %union.anon* %slice to %struct.glyph_slice*
  %131 = bitcast %struct.glyph_slice* %img to i64*
  %bf.load143 = load i64, i64* %131, align 4
  %bf.clear144 = and i64 %bf.load143, 65535
  %bf.cast145 = trunc i64 %bf.clear144 to i32
  %132 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %slice146 = getelementptr inbounds %struct.glyph, %struct.glyph* %132, i32 0, i32 8
  %img147 = bitcast %union.anon* %slice146 to %struct.glyph_slice*
  %133 = bitcast %struct.glyph_slice* %img147 to i64*
  %bf.load148 = load i64, i64* %133, align 4
  %bf.clear149 = and i64 %bf.load148, 65535
  %bf.cast150 = trunc i64 %bf.clear149 to i32
  %cmp151 = icmp eq i32 %bf.cast145, %bf.cast150
  br i1 %cmp151, label %land.lhs.true.153, label %land.end.272

land.lhs.true.153:                                ; preds = %cond.true.142
  %134 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %slice154 = getelementptr inbounds %struct.glyph, %struct.glyph* %134, i32 0, i32 8
  %img155 = bitcast %union.anon* %slice154 to %struct.glyph_slice*
  %135 = bitcast %struct.glyph_slice* %img155 to i64*
  %bf.load156 = load i64, i64* %135, align 4
  %bf.lshr157 = lshr i64 %bf.load156, 16
  %bf.clear158 = and i64 %bf.lshr157, 65535
  %bf.cast159 = trunc i64 %bf.clear158 to i32
  %136 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %slice160 = getelementptr inbounds %struct.glyph, %struct.glyph* %136, i32 0, i32 8
  %img161 = bitcast %union.anon* %slice160 to %struct.glyph_slice*
  %137 = bitcast %struct.glyph_slice* %img161 to i64*
  %bf.load162 = load i64, i64* %137, align 4
  %bf.lshr163 = lshr i64 %bf.load162, 16
  %bf.clear164 = and i64 %bf.lshr163, 65535
  %bf.cast165 = trunc i64 %bf.clear164 to i32
  %cmp166 = icmp eq i32 %bf.cast159, %bf.cast165
  br i1 %cmp166, label %land.lhs.true.168, label %land.end.272

land.lhs.true.168:                                ; preds = %land.lhs.true.153
  %138 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %slice169 = getelementptr inbounds %struct.glyph, %struct.glyph* %138, i32 0, i32 8
  %img170 = bitcast %union.anon* %slice169 to %struct.glyph_slice*
  %139 = bitcast %struct.glyph_slice* %img170 to i64*
  %bf.load171 = load i64, i64* %139, align 4
  %bf.lshr172 = lshr i64 %bf.load171, 32
  %bf.clear173 = and i64 %bf.lshr172, 65535
  %bf.cast174 = trunc i64 %bf.clear173 to i32
  %140 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %slice175 = getelementptr inbounds %struct.glyph, %struct.glyph* %140, i32 0, i32 8
  %img176 = bitcast %union.anon* %slice175 to %struct.glyph_slice*
  %141 = bitcast %struct.glyph_slice* %img176 to i64*
  %bf.load177 = load i64, i64* %141, align 4
  %bf.lshr178 = lshr i64 %bf.load177, 32
  %bf.clear179 = and i64 %bf.lshr178, 65535
  %bf.cast180 = trunc i64 %bf.clear179 to i32
  %cmp181 = icmp eq i32 %bf.cast174, %bf.cast180
  br i1 %cmp181, label %land.lhs.true.183, label %land.end.272

land.lhs.true.183:                                ; preds = %land.lhs.true.168
  %142 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %slice184 = getelementptr inbounds %struct.glyph, %struct.glyph* %142, i32 0, i32 8
  %img185 = bitcast %union.anon* %slice184 to %struct.glyph_slice*
  %143 = bitcast %struct.glyph_slice* %img185 to i64*
  %bf.load186 = load i64, i64* %143, align 4
  %bf.lshr187 = lshr i64 %bf.load186, 48
  %bf.cast188 = trunc i64 %bf.lshr187 to i32
  %144 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %slice189 = getelementptr inbounds %struct.glyph, %struct.glyph* %144, i32 0, i32 8
  %img190 = bitcast %union.anon* %slice189 to %struct.glyph_slice*
  %145 = bitcast %struct.glyph_slice* %img190 to i64*
  %bf.load191 = load i64, i64* %145, align 4
  %bf.lshr192 = lshr i64 %bf.load191, 48
  %bf.cast193 = trunc i64 %bf.lshr192 to i32
  %cmp194 = icmp eq i32 %bf.cast188, %bf.cast193
  br i1 %cmp194, label %land.lhs.true.210, label %land.end.272

cond.false.196:                                   ; preds = %land.lhs.true.136
  %146 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %type197 = getelementptr inbounds %struct.glyph, %struct.glyph* %146, i32 0, i32 6
  %147 = bitcast i24* %type197 to i32*
  %bf.load198 = load i32, i32* %147, align 8
  %bf.clear199 = and i32 %bf.load198, 7
  %cmp200 = icmp ne i32 %bf.clear199, 1
  br i1 %cmp200, label %land.lhs.true.210, label %lor.lhs.false.202

lor.lhs.false.202:                                ; preds = %cond.false.196
  %148 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %slice203 = getelementptr inbounds %struct.glyph, %struct.glyph* %148, i32 0, i32 8
  %cmp204 = bitcast %union.anon* %slice203 to %struct.anon*
  %from = getelementptr inbounds %struct.anon, %struct.anon* %cmp204, i32 0, i32 0
  %149 = load i32, i32* %from, align 4
  %150 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %slice205 = getelementptr inbounds %struct.glyph, %struct.glyph* %150, i32 0, i32 8
  %cmp206 = bitcast %union.anon* %slice205 to %struct.anon*
  %from207 = getelementptr inbounds %struct.anon, %struct.anon* %cmp206, i32 0, i32 0
  %151 = load i32, i32* %from207, align 4
  %cmp208 = icmp eq i32 %149, %151
  br i1 %cmp208, label %land.lhs.true.210, label %land.end.272

land.lhs.true.210:                                ; preds = %lor.lhs.false.202, %cond.false.196, %land.lhs.true.183
  %152 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %face_id = getelementptr inbounds %struct.glyph, %struct.glyph* %152, i32 0, i32 7
  %153 = bitcast i24* %face_id to i32*
  %bf.load211 = load i32, i32* %153, align 4
  %bf.clear212 = and i32 %bf.load211, 1048575
  %154 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %face_id213 = getelementptr inbounds %struct.glyph, %struct.glyph* %154, i32 0, i32 7
  %155 = bitcast i24* %face_id213 to i32*
  %bf.load214 = load i32, i32* %155, align 4
  %bf.clear215 = and i32 %bf.load214, 1048575
  %cmp216 = icmp eq i32 %bf.clear212, %bf.clear215
  br i1 %cmp216, label %land.lhs.true.218, label %land.end.272

land.lhs.true.218:                                ; preds = %land.lhs.true.210
  %156 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %padding_p = getelementptr inbounds %struct.glyph, %struct.glyph* %156, i32 0, i32 6
  %157 = bitcast i24* %padding_p to i32*
  %bf.load219 = load i32, i32* %157, align 8
  %bf.lshr220 = lshr i32 %bf.load219, 7
  %bf.clear221 = and i32 %bf.lshr220, 1
  %bf.cast222 = trunc i32 %bf.clear221 to i1
  %conv223 = zext i1 %bf.cast222 to i32
  %158 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %padding_p224 = getelementptr inbounds %struct.glyph, %struct.glyph* %158, i32 0, i32 6
  %159 = bitcast i24* %padding_p224 to i32*
  %bf.load225 = load i32, i32* %159, align 8
  %bf.lshr226 = lshr i32 %bf.load225, 7
  %bf.clear227 = and i32 %bf.lshr226, 1
  %bf.cast228 = trunc i32 %bf.clear227 to i1
  %conv229 = zext i1 %bf.cast228 to i32
  %cmp230 = icmp eq i32 %conv223, %conv229
  br i1 %cmp230, label %land.lhs.true.232, label %land.end.272

land.lhs.true.232:                                ; preds = %land.lhs.true.218
  %160 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %left_box_line_p = getelementptr inbounds %struct.glyph, %struct.glyph* %160, i32 0, i32 6
  %161 = bitcast i24* %left_box_line_p to i32*
  %bf.load233 = load i32, i32* %161, align 8
  %bf.lshr234 = lshr i32 %bf.load233, 4
  %bf.clear235 = and i32 %bf.lshr234, 1
  %bf.cast236 = trunc i32 %bf.clear235 to i1
  %conv237 = zext i1 %bf.cast236 to i32
  %162 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %left_box_line_p238 = getelementptr inbounds %struct.glyph, %struct.glyph* %162, i32 0, i32 6
  %163 = bitcast i24* %left_box_line_p238 to i32*
  %bf.load239 = load i32, i32* %163, align 8
  %bf.lshr240 = lshr i32 %bf.load239, 4
  %bf.clear241 = and i32 %bf.lshr240, 1
  %bf.cast242 = trunc i32 %bf.clear241 to i1
  %conv243 = zext i1 %bf.cast242 to i32
  %cmp244 = icmp eq i32 %conv237, %conv243
  br i1 %cmp244, label %land.lhs.true.246, label %land.end.272

land.lhs.true.246:                                ; preds = %land.lhs.true.232
  %164 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %right_box_line_p = getelementptr inbounds %struct.glyph, %struct.glyph* %164, i32 0, i32 6
  %165 = bitcast i24* %right_box_line_p to i32*
  %bf.load247 = load i32, i32* %165, align 8
  %bf.lshr248 = lshr i32 %bf.load247, 5
  %bf.clear249 = and i32 %bf.lshr248, 1
  %bf.cast250 = trunc i32 %bf.clear249 to i1
  %conv251 = zext i1 %bf.cast250 to i32
  %166 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %right_box_line_p252 = getelementptr inbounds %struct.glyph, %struct.glyph* %166, i32 0, i32 6
  %167 = bitcast i24* %right_box_line_p252 to i32*
  %bf.load253 = load i32, i32* %167, align 8
  %bf.lshr254 = lshr i32 %bf.load253, 5
  %bf.clear255 = and i32 %bf.lshr254, 1
  %bf.cast256 = trunc i32 %bf.clear255 to i1
  %conv257 = zext i1 %bf.cast256 to i32
  %cmp258 = icmp eq i32 %conv251, %conv257
  br i1 %cmp258, label %land.lhs.true.260, label %land.end.272

land.lhs.true.260:                                ; preds = %land.lhs.true.246
  %168 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %voffset = getelementptr inbounds %struct.glyph, %struct.glyph* %168, i32 0, i32 5
  %169 = load i16, i16* %voffset, align 2
  %conv261 = sext i16 %169 to i32
  %170 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %voffset262 = getelementptr inbounds %struct.glyph, %struct.glyph* %170, i32 0, i32 5
  %171 = load i16, i16* %voffset262, align 2
  %conv263 = sext i16 %171 to i32
  %cmp264 = icmp eq i32 %conv261, %conv263
  br i1 %cmp264, label %land.rhs.266, label %land.end.272

land.rhs.266:                                     ; preds = %land.lhs.true.260
  %172 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %pixel_width = getelementptr inbounds %struct.glyph, %struct.glyph* %172, i32 0, i32 2
  %173 = load i16, i16* %pixel_width, align 2
  %conv267 = sext i16 %173 to i32
  %174 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %pixel_width268 = getelementptr inbounds %struct.glyph, %struct.glyph* %174, i32 0, i32 2
  %175 = load i16, i16* %pixel_width268, align 2
  %conv269 = sext i16 %175 to i32
  %cmp270 = icmp eq i32 %conv267, %conv269
  br label %land.end.272

land.end.272:                                     ; preds = %land.rhs.266, %land.lhs.true.260, %land.lhs.true.246, %land.lhs.true.232, %land.lhs.true.218, %land.lhs.true.210, %lor.lhs.false.202, %land.lhs.true.183, %land.lhs.true.168, %land.lhs.true.153, %cond.true.142, %land.lhs.true.131, %land.rhs.123
  %176 = phi i1 [ false, %land.lhs.true.260 ], [ false, %land.lhs.true.246 ], [ false, %land.lhs.true.232 ], [ false, %land.lhs.true.218 ], [ false, %land.lhs.true.210 ], [ false, %lor.lhs.false.202 ], [ false, %land.lhs.true.183 ], [ false, %land.lhs.true.168 ], [ false, %land.lhs.true.153 ], [ false, %cond.true.142 ], [ false, %land.lhs.true.131 ], [ false, %land.rhs.123 ], [ %cmp270, %land.rhs.266 ]
  br label %land.end.273

land.end.273:                                     ; preds = %land.end.272, %while.cond.120
  %177 = phi i1 [ false, %while.cond.120 ], [ %176, %land.end.272 ]
  br i1 %177, label %while.body.274, label %while.end

while.body.274:                                   ; preds = %land.end.273
  %178 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %pixel_width275 = getelementptr inbounds %struct.glyph, %struct.glyph* %178, i32 0, i32 2
  %179 = load i16, i16* %pixel_width275, align 2
  %conv276 = sext i16 %179 to i32
  %180 = load i32, i32* %x50, align 4
  %add = add nsw i32 %180, %conv276
  store i32 %add, i32* %x50, align 4
  %181 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %incdec.ptr = getelementptr inbounds %struct.glyph, %struct.glyph* %181, i32 1
  store %struct.glyph* %incdec.ptr, %struct.glyph** %desired_glyph, align 8
  %182 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %incdec.ptr277 = getelementptr inbounds %struct.glyph, %struct.glyph* %182, i32 1
  store %struct.glyph* %incdec.ptr277, %struct.glyph** %current_glyph, align 8
  %183 = load i32, i32* %i, align 4
  %inc = add nsw i32 %183, 1
  store i32 %inc, i32* %i, align 4
  br label %while.cond.120

while.end:                                        ; preds = %land.end.273
  %184 = load i8, i8* %overlapping_glyphs_p, align 1
  %tobool278 = trunc i8 %184 to i1
  br i1 %tobool278, label %land.lhs.true.280, label %if.end.325

land.lhs.true.280:                                ; preds = %while.end
  %185 = load i32, i32* %i, align 4
  %cmp281 = icmp sgt i32 %185, 0
  br i1 %cmp281, label %land.lhs.true.283, label %if.end.325

land.lhs.true.283:                                ; preds = %land.lhs.true.280
  %186 = load i32, i32* %i, align 4
  %187 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %used284 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %187, i32 0, i32 1
  %arrayidx285 = getelementptr inbounds [4 x i16], [4 x i16]* %used284, i32 0, i64 1
  %188 = load i16, i16* %arrayidx285, align 2
  %conv286 = sext i16 %188 to i32
  %cmp287 = icmp slt i32 %186, %conv286
  br i1 %cmp287, label %land.lhs.true.289, label %if.end.325

land.lhs.true.289:                                ; preds = %land.lhs.true.283
  %189 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %used290 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %189, i32 0, i32 1
  %arrayidx291 = getelementptr inbounds [4 x i16], [4 x i16]* %used290, i32 0, i64 1
  %190 = load i16, i16* %arrayidx291, align 2
  %conv292 = sext i16 %190 to i32
  %191 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %used293 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %191, i32 0, i32 1
  %arrayidx294 = getelementptr inbounds [4 x i16], [4 x i16]* %used293, i32 0, i64 1
  %192 = load i16, i16* %arrayidx294, align 2
  %conv295 = sext i16 %192 to i32
  %cmp296 = icmp ne i32 %conv292, %conv295
  br i1 %cmp296, label %if.then.298, label %if.end.325

if.then.298:                                      ; preds = %land.lhs.true.289
  %193 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif, align 8
  %get_glyph_overhangs301 = getelementptr inbounds %struct.redisplay_interface, %struct.redisplay_interface* %193, i32 0, i32 11
  %194 = load void (%struct.glyph*, %struct.frame*, i32*, i32*)*, void (%struct.glyph*, %struct.frame*, i32*, i32*)** %get_glyph_overhangs301, align 8
  %195 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %196 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame302 = getelementptr inbounds %struct.window, %struct.window* %196, i32 0, i32 1
  %197 = load i64, i64* %frame302, align 8
  %sub303 = sub nsw i64 %197, 5
  %198 = inttoptr i64 %sub303 to i8*
  %199 = bitcast i8* %198 to %struct.frame*
  call void %194(%struct.glyph* %195, %struct.frame* %199, i32* %left299, i32* %right300)
  br label %while.cond.304

while.cond.304:                                   ; preds = %while.body.311, %if.then.298
  %200 = load i32, i32* %left299, align 4
  %cmp305 = icmp sgt i32 %200, 0
  br i1 %cmp305, label %land.rhs.307, label %land.end.310

land.rhs.307:                                     ; preds = %while.cond.304
  %201 = load i32, i32* %i, align 4
  %cmp308 = icmp sgt i32 %201, 0
  br label %land.end.310

land.end.310:                                     ; preds = %land.rhs.307, %while.cond.304
  %202 = phi i1 [ false, %while.cond.304 ], [ %cmp308, %land.rhs.307 ]
  br i1 %202, label %while.body.311, label %while.end.321

while.body.311:                                   ; preds = %land.end.310
  %203 = load i32, i32* %i, align 4
  %dec312 = add nsw i32 %203, -1
  store i32 %dec312, i32* %i, align 4
  %204 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %incdec.ptr313 = getelementptr inbounds %struct.glyph, %struct.glyph* %204, i32 -1
  store %struct.glyph* %incdec.ptr313, %struct.glyph** %desired_glyph, align 8
  %205 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %incdec.ptr314 = getelementptr inbounds %struct.glyph, %struct.glyph* %205, i32 -1
  store %struct.glyph* %incdec.ptr314, %struct.glyph** %current_glyph, align 8
  %206 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %pixel_width315 = getelementptr inbounds %struct.glyph, %struct.glyph* %206, i32 0, i32 2
  %207 = load i16, i16* %pixel_width315, align 2
  %conv316 = sext i16 %207 to i32
  %208 = load i32, i32* %x50, align 4
  %sub317 = sub nsw i32 %208, %conv316
  store i32 %sub317, i32* %x50, align 4
  %209 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %pixel_width318 = getelementptr inbounds %struct.glyph, %struct.glyph* %209, i32 0, i32 2
  %210 = load i16, i16* %pixel_width318, align 2
  %conv319 = sext i16 %210 to i32
  %211 = load i32, i32* %left299, align 4
  %sub320 = sub nsw i32 %211, %conv319
  store i32 %sub320, i32* %left299, align 4
  br label %while.cond.304

while.end.321:                                    ; preds = %land.end.310
  %212 = load i32, i32* %i, align 4
  %213 = load i32, i32* %start_hpos, align 4
  %cmp322 = icmp slt i32 %212, %213
  %frombool324 = zext i1 %cmp322 to i8
  store i8 %frombool324, i8* %abort_skipping, align 1
  br label %if.end.325

if.end.325:                                       ; preds = %while.end.321, %land.lhs.true.289, %land.lhs.true.283, %land.lhs.true.280, %while.end
  br label %if.end.326

if.end.326:                                       ; preds = %if.end.325, %if.end.117
  %214 = load i32, i32* %i, align 4
  %215 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %used327 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %215, i32 0, i32 1
  %arrayidx328 = getelementptr inbounds [4 x i16], [4 x i16]* %used327, i32 0, i64 1
  %216 = load i16, i16* %arrayidx328, align 2
  %conv329 = sext i16 %216 to i32
  %cmp330 = icmp slt i32 %214, %conv329
  br i1 %cmp330, label %if.then.332, label %if.end.529

if.then.332:                                      ; preds = %if.end.326
  %217 = load i32, i32* %x50, align 4
  store i32 %217, i32* %start_x, align 4
  %218 = load i32, i32* %i, align 4
  store i32 %218, i32* %start_hpos333, align 4
  %219 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  store %struct.glyph* %219, %struct.glyph** %start, align 8
  %220 = load i32, i32* %x50, align 4
  store i32 %220, i32* %current_x, align 4
  %221 = load i8, i8* %can_skip_p, align 1
  %tobool334 = trunc i8 %221 to i1
  %lnot335 = xor i1 %tobool334, true
  %frombool336 = zext i1 %lnot335 to i8
  store i8 %frombool336, i8* %skip_first_p, align 1
  br label %while.cond.337

while.cond.337:                                   ; preds = %while.body.508, %if.then.332
  %222 = load i32, i32* %i, align 4
  %223 = load i32, i32* %stop, align 4
  %cmp338 = icmp slt i32 %222, %223
  br i1 %cmp338, label %land.lhs.true.340, label %land.end.507

land.lhs.true.340:                                ; preds = %while.cond.337
  %224 = load i8, i8* %skip_first_p, align 1
  %tobool341 = trunc i8 %224 to i1
  br i1 %tobool341, label %land.rhs.504, label %lor.lhs.false.343

lor.lhs.false.343:                                ; preds = %land.lhs.true.340
  %225 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %type344 = getelementptr inbounds %struct.glyph, %struct.glyph* %225, i32 0, i32 6
  %226 = bitcast i24* %type344 to i32*
  %bf.load345 = load i32, i32* %226, align 8
  %bf.clear346 = and i32 %bf.load345, 7
  %227 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %type347 = getelementptr inbounds %struct.glyph, %struct.glyph* %227, i32 0, i32 6
  %228 = bitcast i24* %type347 to i32*
  %bf.load348 = load i32, i32* %228, align 8
  %bf.clear349 = and i32 %bf.load348, 7
  %cmp350 = icmp eq i32 %bf.clear346, %bf.clear349
  br i1 %cmp350, label %land.lhs.true.352, label %land.rhs.504

land.lhs.true.352:                                ; preds = %lor.lhs.false.343
  %229 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %u353 = getelementptr inbounds %struct.glyph, %struct.glyph* %229, i32 0, i32 9
  %val354 = bitcast %union.anon.1* %u353 to i32*
  %230 = load i32, i32* %val354, align 4
  %231 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %u355 = getelementptr inbounds %struct.glyph, %struct.glyph* %231, i32 0, i32 9
  %val356 = bitcast %union.anon.1* %u355 to i32*
  %232 = load i32, i32* %val356, align 4
  %cmp357 = icmp eq i32 %230, %232
  br i1 %cmp357, label %land.lhs.true.359, label %land.rhs.504

land.lhs.true.359:                                ; preds = %land.lhs.true.352
  %233 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %type360 = getelementptr inbounds %struct.glyph, %struct.glyph* %233, i32 0, i32 6
  %234 = bitcast i24* %type360 to i32*
  %bf.load361 = load i32, i32* %234, align 8
  %bf.clear362 = and i32 %bf.load361, 7
  %cmp363 = icmp eq i32 %bf.clear362, 3
  br i1 %cmp363, label %cond.true.365, label %cond.false.421

cond.true.365:                                    ; preds = %land.lhs.true.359
  %235 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %slice366 = getelementptr inbounds %struct.glyph, %struct.glyph* %235, i32 0, i32 8
  %img367 = bitcast %union.anon* %slice366 to %struct.glyph_slice*
  %236 = bitcast %struct.glyph_slice* %img367 to i64*
  %bf.load368 = load i64, i64* %236, align 4
  %bf.clear369 = and i64 %bf.load368, 65535
  %bf.cast370 = trunc i64 %bf.clear369 to i32
  %237 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %slice371 = getelementptr inbounds %struct.glyph, %struct.glyph* %237, i32 0, i32 8
  %img372 = bitcast %union.anon* %slice371 to %struct.glyph_slice*
  %238 = bitcast %struct.glyph_slice* %img372 to i64*
  %bf.load373 = load i64, i64* %238, align 4
  %bf.clear374 = and i64 %bf.load373, 65535
  %bf.cast375 = trunc i64 %bf.clear374 to i32
  %cmp376 = icmp eq i32 %bf.cast370, %bf.cast375
  br i1 %cmp376, label %land.lhs.true.378, label %land.rhs.504

land.lhs.true.378:                                ; preds = %cond.true.365
  %239 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %slice379 = getelementptr inbounds %struct.glyph, %struct.glyph* %239, i32 0, i32 8
  %img380 = bitcast %union.anon* %slice379 to %struct.glyph_slice*
  %240 = bitcast %struct.glyph_slice* %img380 to i64*
  %bf.load381 = load i64, i64* %240, align 4
  %bf.lshr382 = lshr i64 %bf.load381, 16
  %bf.clear383 = and i64 %bf.lshr382, 65535
  %bf.cast384 = trunc i64 %bf.clear383 to i32
  %241 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %slice385 = getelementptr inbounds %struct.glyph, %struct.glyph* %241, i32 0, i32 8
  %img386 = bitcast %union.anon* %slice385 to %struct.glyph_slice*
  %242 = bitcast %struct.glyph_slice* %img386 to i64*
  %bf.load387 = load i64, i64* %242, align 4
  %bf.lshr388 = lshr i64 %bf.load387, 16
  %bf.clear389 = and i64 %bf.lshr388, 65535
  %bf.cast390 = trunc i64 %bf.clear389 to i32
  %cmp391 = icmp eq i32 %bf.cast384, %bf.cast390
  br i1 %cmp391, label %land.lhs.true.393, label %land.rhs.504

land.lhs.true.393:                                ; preds = %land.lhs.true.378
  %243 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %slice394 = getelementptr inbounds %struct.glyph, %struct.glyph* %243, i32 0, i32 8
  %img395 = bitcast %union.anon* %slice394 to %struct.glyph_slice*
  %244 = bitcast %struct.glyph_slice* %img395 to i64*
  %bf.load396 = load i64, i64* %244, align 4
  %bf.lshr397 = lshr i64 %bf.load396, 32
  %bf.clear398 = and i64 %bf.lshr397, 65535
  %bf.cast399 = trunc i64 %bf.clear398 to i32
  %245 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %slice400 = getelementptr inbounds %struct.glyph, %struct.glyph* %245, i32 0, i32 8
  %img401 = bitcast %union.anon* %slice400 to %struct.glyph_slice*
  %246 = bitcast %struct.glyph_slice* %img401 to i64*
  %bf.load402 = load i64, i64* %246, align 4
  %bf.lshr403 = lshr i64 %bf.load402, 32
  %bf.clear404 = and i64 %bf.lshr403, 65535
  %bf.cast405 = trunc i64 %bf.clear404 to i32
  %cmp406 = icmp eq i32 %bf.cast399, %bf.cast405
  br i1 %cmp406, label %land.lhs.true.408, label %land.rhs.504

land.lhs.true.408:                                ; preds = %land.lhs.true.393
  %247 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %slice409 = getelementptr inbounds %struct.glyph, %struct.glyph* %247, i32 0, i32 8
  %img410 = bitcast %union.anon* %slice409 to %struct.glyph_slice*
  %248 = bitcast %struct.glyph_slice* %img410 to i64*
  %bf.load411 = load i64, i64* %248, align 4
  %bf.lshr412 = lshr i64 %bf.load411, 48
  %bf.cast413 = trunc i64 %bf.lshr412 to i32
  %249 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %slice414 = getelementptr inbounds %struct.glyph, %struct.glyph* %249, i32 0, i32 8
  %img415 = bitcast %union.anon* %slice414 to %struct.glyph_slice*
  %250 = bitcast %struct.glyph_slice* %img415 to i64*
  %bf.load416 = load i64, i64* %250, align 4
  %bf.lshr417 = lshr i64 %bf.load416, 48
  %bf.cast418 = trunc i64 %bf.lshr417 to i32
  %cmp419 = icmp eq i32 %bf.cast413, %bf.cast418
  br i1 %cmp419, label %land.lhs.true.436, label %land.rhs.504

cond.false.421:                                   ; preds = %land.lhs.true.359
  %251 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %type422 = getelementptr inbounds %struct.glyph, %struct.glyph* %251, i32 0, i32 6
  %252 = bitcast i24* %type422 to i32*
  %bf.load423 = load i32, i32* %252, align 8
  %bf.clear424 = and i32 %bf.load423, 7
  %cmp425 = icmp ne i32 %bf.clear424, 1
  br i1 %cmp425, label %land.lhs.true.436, label %lor.lhs.false.427

lor.lhs.false.427:                                ; preds = %cond.false.421
  %253 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %slice428 = getelementptr inbounds %struct.glyph, %struct.glyph* %253, i32 0, i32 8
  %cmp429 = bitcast %union.anon* %slice428 to %struct.anon*
  %from430 = getelementptr inbounds %struct.anon, %struct.anon* %cmp429, i32 0, i32 0
  %254 = load i32, i32* %from430, align 4
  %255 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %slice431 = getelementptr inbounds %struct.glyph, %struct.glyph* %255, i32 0, i32 8
  %cmp432 = bitcast %union.anon* %slice431 to %struct.anon*
  %from433 = getelementptr inbounds %struct.anon, %struct.anon* %cmp432, i32 0, i32 0
  %256 = load i32, i32* %from433, align 4
  %cmp434 = icmp eq i32 %254, %256
  br i1 %cmp434, label %land.lhs.true.436, label %land.rhs.504

land.lhs.true.436:                                ; preds = %lor.lhs.false.427, %cond.false.421, %land.lhs.true.408
  %257 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %face_id437 = getelementptr inbounds %struct.glyph, %struct.glyph* %257, i32 0, i32 7
  %258 = bitcast i24* %face_id437 to i32*
  %bf.load438 = load i32, i32* %258, align 4
  %bf.clear439 = and i32 %bf.load438, 1048575
  %259 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %face_id440 = getelementptr inbounds %struct.glyph, %struct.glyph* %259, i32 0, i32 7
  %260 = bitcast i24* %face_id440 to i32*
  %bf.load441 = load i32, i32* %260, align 4
  %bf.clear442 = and i32 %bf.load441, 1048575
  %cmp443 = icmp eq i32 %bf.clear439, %bf.clear442
  br i1 %cmp443, label %land.lhs.true.445, label %land.rhs.504

land.lhs.true.445:                                ; preds = %land.lhs.true.436
  %261 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %padding_p446 = getelementptr inbounds %struct.glyph, %struct.glyph* %261, i32 0, i32 6
  %262 = bitcast i24* %padding_p446 to i32*
  %bf.load447 = load i32, i32* %262, align 8
  %bf.lshr448 = lshr i32 %bf.load447, 7
  %bf.clear449 = and i32 %bf.lshr448, 1
  %bf.cast450 = trunc i32 %bf.clear449 to i1
  %conv451 = zext i1 %bf.cast450 to i32
  %263 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %padding_p452 = getelementptr inbounds %struct.glyph, %struct.glyph* %263, i32 0, i32 6
  %264 = bitcast i24* %padding_p452 to i32*
  %bf.load453 = load i32, i32* %264, align 8
  %bf.lshr454 = lshr i32 %bf.load453, 7
  %bf.clear455 = and i32 %bf.lshr454, 1
  %bf.cast456 = trunc i32 %bf.clear455 to i1
  %conv457 = zext i1 %bf.cast456 to i32
  %cmp458 = icmp eq i32 %conv451, %conv457
  br i1 %cmp458, label %land.lhs.true.460, label %land.rhs.504

land.lhs.true.460:                                ; preds = %land.lhs.true.445
  %265 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %left_box_line_p461 = getelementptr inbounds %struct.glyph, %struct.glyph* %265, i32 0, i32 6
  %266 = bitcast i24* %left_box_line_p461 to i32*
  %bf.load462 = load i32, i32* %266, align 8
  %bf.lshr463 = lshr i32 %bf.load462, 4
  %bf.clear464 = and i32 %bf.lshr463, 1
  %bf.cast465 = trunc i32 %bf.clear464 to i1
  %conv466 = zext i1 %bf.cast465 to i32
  %267 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %left_box_line_p467 = getelementptr inbounds %struct.glyph, %struct.glyph* %267, i32 0, i32 6
  %268 = bitcast i24* %left_box_line_p467 to i32*
  %bf.load468 = load i32, i32* %268, align 8
  %bf.lshr469 = lshr i32 %bf.load468, 4
  %bf.clear470 = and i32 %bf.lshr469, 1
  %bf.cast471 = trunc i32 %bf.clear470 to i1
  %conv472 = zext i1 %bf.cast471 to i32
  %cmp473 = icmp eq i32 %conv466, %conv472
  br i1 %cmp473, label %land.lhs.true.475, label %land.rhs.504

land.lhs.true.475:                                ; preds = %land.lhs.true.460
  %269 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %right_box_line_p476 = getelementptr inbounds %struct.glyph, %struct.glyph* %269, i32 0, i32 6
  %270 = bitcast i24* %right_box_line_p476 to i32*
  %bf.load477 = load i32, i32* %270, align 8
  %bf.lshr478 = lshr i32 %bf.load477, 5
  %bf.clear479 = and i32 %bf.lshr478, 1
  %bf.cast480 = trunc i32 %bf.clear479 to i1
  %conv481 = zext i1 %bf.cast480 to i32
  %271 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %right_box_line_p482 = getelementptr inbounds %struct.glyph, %struct.glyph* %271, i32 0, i32 6
  %272 = bitcast i24* %right_box_line_p482 to i32*
  %bf.load483 = load i32, i32* %272, align 8
  %bf.lshr484 = lshr i32 %bf.load483, 5
  %bf.clear485 = and i32 %bf.lshr484, 1
  %bf.cast486 = trunc i32 %bf.clear485 to i1
  %conv487 = zext i1 %bf.cast486 to i32
  %cmp488 = icmp eq i32 %conv481, %conv487
  br i1 %cmp488, label %land.lhs.true.490, label %land.rhs.504

land.lhs.true.490:                                ; preds = %land.lhs.true.475
  %273 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %voffset491 = getelementptr inbounds %struct.glyph, %struct.glyph* %273, i32 0, i32 5
  %274 = load i16, i16* %voffset491, align 2
  %conv492 = sext i16 %274 to i32
  %275 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %voffset493 = getelementptr inbounds %struct.glyph, %struct.glyph* %275, i32 0, i32 5
  %276 = load i16, i16* %voffset493, align 2
  %conv494 = sext i16 %276 to i32
  %cmp495 = icmp eq i32 %conv492, %conv494
  br i1 %cmp495, label %land.lhs.true.497, label %land.rhs.504

land.lhs.true.497:                                ; preds = %land.lhs.true.490
  %277 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %pixel_width498 = getelementptr inbounds %struct.glyph, %struct.glyph* %277, i32 0, i32 2
  %278 = load i16, i16* %pixel_width498, align 2
  %conv499 = sext i16 %278 to i32
  %279 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %pixel_width500 = getelementptr inbounds %struct.glyph, %struct.glyph* %279, i32 0, i32 2
  %280 = load i16, i16* %pixel_width500, align 2
  %conv501 = sext i16 %280 to i32
  %cmp502 = icmp eq i32 %conv499, %conv501
  br i1 %cmp502, label %land.end.507, label %land.rhs.504

land.rhs.504:                                     ; preds = %land.lhs.true.497, %land.lhs.true.490, %land.lhs.true.475, %land.lhs.true.460, %land.lhs.true.445, %land.lhs.true.436, %lor.lhs.false.427, %land.lhs.true.408, %land.lhs.true.393, %land.lhs.true.378, %cond.true.365, %land.lhs.true.352, %lor.lhs.false.343, %land.lhs.true.340
  %281 = load i32, i32* %x50, align 4
  %282 = load i32, i32* %current_x, align 4
  %cmp505 = icmp eq i32 %281, %282
  br label %land.end.507

land.end.507:                                     ; preds = %land.rhs.504, %land.lhs.true.497, %while.cond.337
  %283 = phi i1 [ false, %land.lhs.true.497 ], [ false, %while.cond.337 ], [ %cmp505, %land.rhs.504 ]
  br i1 %283, label %while.body.508, label %while.end.518

while.body.508:                                   ; preds = %land.end.507
  %284 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %pixel_width509 = getelementptr inbounds %struct.glyph, %struct.glyph* %284, i32 0, i32 2
  %285 = load i16, i16* %pixel_width509, align 2
  %conv510 = sext i16 %285 to i32
  %286 = load i32, i32* %x50, align 4
  %add511 = add nsw i32 %286, %conv510
  store i32 %add511, i32* %x50, align 4
  %287 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %pixel_width512 = getelementptr inbounds %struct.glyph, %struct.glyph* %287, i32 0, i32 2
  %288 = load i16, i16* %pixel_width512, align 2
  %conv513 = sext i16 %288 to i32
  %289 = load i32, i32* %current_x, align 4
  %add514 = add nsw i32 %289, %conv513
  store i32 %add514, i32* %current_x, align 4
  %290 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %incdec.ptr515 = getelementptr inbounds %struct.glyph, %struct.glyph* %290, i32 1
  store %struct.glyph* %incdec.ptr515, %struct.glyph** %desired_glyph, align 8
  %291 = load %struct.glyph*, %struct.glyph** %current_glyph, align 8
  %incdec.ptr516 = getelementptr inbounds %struct.glyph, %struct.glyph* %291, i32 1
  store %struct.glyph* %incdec.ptr516, %struct.glyph** %current_glyph, align 8
  %292 = load i32, i32* %i, align 4
  %inc517 = add nsw i32 %292, 1
  store i32 %inc517, i32* %i, align 4
  store i8 0, i8* %skip_first_p, align 1
  br label %while.cond.337

while.end.518:                                    ; preds = %land.end.507
  %293 = load i32, i32* %i, align 4
  %294 = load i32, i32* %start_hpos333, align 4
  %cmp519 = icmp eq i32 %293, %294
  br i1 %cmp519, label %if.then.524, label %lor.lhs.false.521

lor.lhs.false.521:                                ; preds = %while.end.518
  %295 = load i32, i32* %x50, align 4
  %296 = load i32, i32* %current_x, align 4
  %cmp522 = icmp ne i32 %295, %296
  br i1 %cmp522, label %if.then.524, label %if.end.525

if.then.524:                                      ; preds = %lor.lhs.false.521, %while.end.518
  %297 = load i32, i32* %start_hpos333, align 4
  store i32 %297, i32* %i, align 4
  %298 = load i32, i32* %start_x, align 4
  store i32 %298, i32* %x50, align 4
  %299 = load %struct.glyph*, %struct.glyph** %start, align 8
  store %struct.glyph* %299, %struct.glyph** %desired_glyph, align 8
  br label %while.end.530

if.end.525:                                       ; preds = %lor.lhs.false.521
  %300 = load %struct.window*, %struct.window** %w.addr, align 8
  %301 = load i32, i32* %vpos.addr, align 4
  %302 = load i32, i32* %start_hpos333, align 4
  %303 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %y526 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %303, i32 0, i32 4
  %304 = load i32, i32* %y526, align 4
  %305 = load i32, i32* %start_x, align 4
  call void @output_cursor_to(%struct.window* %300, i32 %301, i32 %302, i32 %304, i32 %305)
  %306 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif, align 8
  %write_glyphs527 = getelementptr inbounds %struct.redisplay_interface, %struct.redisplay_interface* %306, i32 0, i32 2
  %307 = load void (%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32)** %write_glyphs527, align 8
  %308 = load %struct.window*, %struct.window** %w.addr, align 8
  %309 = load %struct.glyph_row*, %struct.glyph_row** %updated_row.addr, align 8
  %310 = load %struct.glyph*, %struct.glyph** %start, align 8
  %311 = load i32, i32* %i, align 4
  %312 = load i32, i32* %start_hpos333, align 4
  %sub528 = sub nsw i32 %311, %312
  call void %307(%struct.window* %308, %struct.glyph_row* %309, %struct.glyph* %310, i32 1, i32 %sub528)
  store i8 1, i8* %changed_p, align 1
  br label %if.end.529

if.end.529:                                       ; preds = %if.end.525, %if.end.326
  br label %while.cond

while.end.530:                                    ; preds = %if.then.524, %while.cond
  %313 = load i32, i32* %i, align 4
  %314 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %used531 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %314, i32 0, i32 1
  %arrayidx532 = getelementptr inbounds [4 x i16], [4 x i16]* %used531, i32 0, i64 1
  %315 = load i16, i16* %arrayidx532, align 2
  %conv533 = sext i16 %315 to i32
  %cmp534 = icmp slt i32 %313, %conv533
  br i1 %cmp534, label %if.then.536, label %if.end.543

if.then.536:                                      ; preds = %while.end.530
  %316 = load %struct.window*, %struct.window** %w.addr, align 8
  %317 = load i32, i32* %vpos.addr, align 4
  %318 = load i32, i32* %i, align 4
  %319 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %y537 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %319, i32 0, i32 4
  %320 = load i32, i32* %y537, align 4
  %321 = load i32, i32* %x50, align 4
  call void @output_cursor_to(%struct.window* %316, i32 %317, i32 %318, i32 %320, i32 %321)
  %322 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif, align 8
  %write_glyphs538 = getelementptr inbounds %struct.redisplay_interface, %struct.redisplay_interface* %322, i32 0, i32 2
  %323 = load void (%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32)** %write_glyphs538, align 8
  %324 = load %struct.window*, %struct.window** %w.addr, align 8
  %325 = load %struct.glyph_row*, %struct.glyph_row** %updated_row.addr, align 8
  %326 = load %struct.glyph*, %struct.glyph** %desired_glyph, align 8
  %327 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %used539 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %327, i32 0, i32 1
  %arrayidx540 = getelementptr inbounds [4 x i16], [4 x i16]* %used539, i32 0, i64 1
  %328 = load i16, i16* %arrayidx540, align 2
  %conv541 = sext i16 %328 to i32
  %329 = load i32, i32* %i, align 4
  %sub542 = sub nsw i32 %conv541, %329
  call void %323(%struct.window* %324, %struct.glyph_row* %325, %struct.glyph* %326, i32 1, i32 %sub542)
  store i8 1, i8* %changed_p, align 1
  br label %if.end.543

if.end.543:                                       ; preds = %if.then.536, %while.end.530
  %330 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %fill_line_p544 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %330, i32 0, i32 22
  %331 = bitcast i40* %fill_line_p544 to i64*
  %bf.load545 = load i64, i64* %331, align 4
  %bf.lshr546 = lshr i64 %bf.load545, 16
  %bf.clear547 = and i64 %bf.lshr546, 1
  %bf.cast548 = trunc i64 %bf.clear547 to i1
  br i1 %bf.cast548, label %if.then.549, label %if.else.550

if.then.549:                                      ; preds = %if.end.543
  br label %if.end.614

if.else.550:                                      ; preds = %if.end.543
  %332 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %fill_line_p551 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %332, i32 0, i32 22
  %333 = bitcast i40* %fill_line_p551 to i64*
  %bf.load552 = load i64, i64* %333, align 4
  %bf.lshr553 = lshr i64 %bf.load552, 16
  %bf.clear554 = and i64 %bf.lshr553, 1
  %bf.cast555 = trunc i64 %bf.clear554 to i1
  br i1 %bf.cast555, label %if.then.556, label %if.else.567

if.then.556:                                      ; preds = %if.else.550
  %334 = load i32, i32* %i, align 4
  %335 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %used557 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %335, i32 0, i32 1
  %arrayidx558 = getelementptr inbounds [4 x i16], [4 x i16]* %used557, i32 0, i64 1
  %336 = load i16, i16* %arrayidx558, align 2
  %conv559 = sext i16 %336 to i32
  %cmp560 = icmp sge i32 %334, %conv559
  br i1 %cmp560, label %if.then.562, label %if.end.565

if.then.562:                                      ; preds = %if.then.556
  %337 = load %struct.window*, %struct.window** %w.addr, align 8
  %338 = load i32, i32* %vpos.addr, align 4
  %339 = load i32, i32* %i, align 4
  %340 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %y563 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %340, i32 0, i32 4
  %341 = load i32, i32* %y563, align 4
  %342 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %pixel_width564 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %342, i32 0, i32 5
  %343 = load i32, i32* %pixel_width564, align 4
  call void @output_cursor_to(%struct.window* %337, i32 %338, i32 %339, i32 %341, i32 %343)
  br label %if.end.565

if.end.565:                                       ; preds = %if.then.562, %if.then.556
  %344 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif, align 8
  %clear_end_of_line566 = getelementptr inbounds %struct.redisplay_interface, %struct.redisplay_interface* %344, i32 0, i32 4
  %345 = load void (%struct.window*, %struct.glyph_row*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, i32, i32)** %clear_end_of_line566, align 8
  %346 = load %struct.window*, %struct.window** %w.addr, align 8
  %347 = load %struct.glyph_row*, %struct.glyph_row** %updated_row.addr, align 8
  call void %345(%struct.window* %346, %struct.glyph_row* %347, i32 1, i32 -1)
  store i8 1, i8* %changed_p, align 1
  br label %if.end.613

if.else.567:                                      ; preds = %if.else.550
  %348 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %pixel_width568 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %348, i32 0, i32 5
  %349 = load i32, i32* %pixel_width568, align 4
  %350 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %pixel_width569 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %350, i32 0, i32 5
  %351 = load i32, i32* %pixel_width569, align 4
  %cmp570 = icmp slt i32 %349, %351
  br i1 %cmp570, label %if.then.572, label %if.end.612

if.then.572:                                      ; preds = %if.else.567
  %352 = load i32, i32* %i, align 4
  %353 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %used573 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %353, i32 0, i32 1
  %arrayidx574 = getelementptr inbounds [4 x i16], [4 x i16]* %used573, i32 0, i64 1
  %354 = load i16, i16* %arrayidx574, align 2
  %conv575 = sext i16 %354 to i32
  %cmp576 = icmp sge i32 %352, %conv575
  br i1 %cmp576, label %if.then.578, label %if.end.581

if.then.578:                                      ; preds = %if.then.572
  %355 = load %struct.window*, %struct.window** %w.addr, align 8
  %356 = load i32, i32* %vpos.addr, align 4
  %357 = load i32, i32* %i, align 4
  %358 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %y579 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %358, i32 0, i32 4
  %359 = load i32, i32* %y579, align 4
  %360 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %pixel_width580 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %360, i32 0, i32 5
  %361 = load i32, i32* %pixel_width580, align 4
  call void @output_cursor_to(%struct.window* %355, i32 %356, i32 %357, i32 %359, i32 %361)
  br label %if.end.581

if.end.581:                                       ; preds = %if.then.578, %if.then.572
  %362 = load i32, i32* %vpos.addr, align 4
  %363 = load %struct.window*, %struct.window** %w.addr, align 8
  %phys_cursor582 = getelementptr inbounds %struct.window, %struct.window* %363, i32 0, i32 50
  %vpos583 = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %phys_cursor582, i32 0, i32 3
  %364 = load i32, i32* %vpos583, align 4
  %cmp584 = icmp eq i32 %362, %364
  br i1 %cmp584, label %land.lhs.true.586, label %if.else.608

land.lhs.true.586:                                ; preds = %if.end.581
  %365 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %reversed_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %365, i32 0, i32 22
  %366 = bitcast i40* %reversed_p to i64*
  %bf.load587 = load i64, i64* %366, align 4
  %bf.lshr588 = lshr i64 %bf.load587, 34
  %bf.clear589 = and i64 %bf.lshr588, 1
  %bf.cast590 = trunc i64 %bf.clear589 to i1
  br i1 %bf.cast590, label %cond.true.592, label %cond.false.596

cond.true.592:                                    ; preds = %land.lhs.true.586
  %367 = load %struct.window*, %struct.window** %w.addr, align 8
  %phys_cursor593 = getelementptr inbounds %struct.window, %struct.window* %367, i32 0, i32 50
  %hpos = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %phys_cursor593, i32 0, i32 2
  %368 = load i32, i32* %hpos, align 4
  %cmp594 = icmp slt i32 %368, 0
  br i1 %cmp594, label %if.then.604, label %if.else.608

cond.false.596:                                   ; preds = %land.lhs.true.586
  %369 = load %struct.window*, %struct.window** %w.addr, align 8
  %phys_cursor597 = getelementptr inbounds %struct.window, %struct.window* %369, i32 0, i32 50
  %hpos598 = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %phys_cursor597, i32 0, i32 2
  %370 = load i32, i32* %hpos598, align 4
  %371 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %used599 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %371, i32 0, i32 1
  %arrayidx600 = getelementptr inbounds [4 x i16], [4 x i16]* %used599, i32 0, i64 1
  %372 = load i16, i16* %arrayidx600, align 2
  %conv601 = sext i16 %372 to i32
  %cmp602 = icmp sge i32 %370, %conv601
  br i1 %cmp602, label %if.then.604, label %if.else.608

if.then.604:                                      ; preds = %cond.false.596, %cond.true.592
  %373 = load %struct.window*, %struct.window** %w.addr, align 8
  %phys_cursor_on_p605 = getelementptr inbounds %struct.window, %struct.window* %373, i32 0, i32 67
  %bf.load606 = load i16, i16* %phys_cursor_on_p605, align 4
  %bf.clear607 = and i16 %bf.load606, -129
  store i16 %bf.clear607, i16* %phys_cursor_on_p605, align 4
  store i32 -1, i32* %xlim, align 4
  br label %if.end.610

if.else.608:                                      ; preds = %cond.false.596, %cond.true.592, %if.end.581
  %374 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %pixel_width609 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %374, i32 0, i32 5
  %375 = load i32, i32* %pixel_width609, align 4
  store i32 %375, i32* %xlim, align 4
  br label %if.end.610

if.end.610:                                       ; preds = %if.else.608, %if.then.604
  %376 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif, align 8
  %clear_end_of_line611 = getelementptr inbounds %struct.redisplay_interface, %struct.redisplay_interface* %376, i32 0, i32 4
  %377 = load void (%struct.window*, %struct.glyph_row*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, i32, i32)** %clear_end_of_line611, align 8
  %378 = load %struct.window*, %struct.window** %w.addr, align 8
  %379 = load %struct.glyph_row*, %struct.glyph_row** %updated_row.addr, align 8
  %380 = load i32, i32* %xlim, align 4
  call void %377(%struct.window* %378, %struct.glyph_row* %379, i32 1, i32 %380)
  store i8 1, i8* %changed_p, align 1
  br label %if.end.612

if.end.612:                                       ; preds = %if.end.610, %if.else.567
  br label %if.end.613

if.end.613:                                       ; preds = %if.end.612, %if.end.565
  br label %if.end.614

if.end.614:                                       ; preds = %if.end.613, %if.then.549
  br label %if.end.615

if.end.615:                                       ; preds = %if.end.614, %if.end.49
  %381 = load i8, i8* %changed_p, align 1
  %tobool616 = trunc i8 %381 to i1
  ret i1 %tobool616
}

; Function Attrs: nounwind uwtable
define internal void @make_current(%struct.glyph_matrix* %desired_matrix, %struct.glyph_matrix* %current_matrix, i32 %row) #0 {
entry:
  %desired_matrix.addr = alloca %struct.glyph_matrix*, align 8
  %current_matrix.addr = alloca %struct.glyph_matrix*, align 8
  %row.addr = alloca i32, align 4
  %current_row = alloca %struct.glyph_row*, align 8
  %desired_row = alloca %struct.glyph_row*, align 8
  %mouse_face_p = alloca i8, align 1
  store %struct.glyph_matrix* %desired_matrix, %struct.glyph_matrix** %desired_matrix.addr, align 8
  store %struct.glyph_matrix* %current_matrix, %struct.glyph_matrix** %current_matrix.addr, align 8
  store i32 %row, i32* %row.addr, align 4
  %0 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix.addr, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %0, i32 0, i32 1
  %1 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %2 = load i32, i32* %row.addr, align 4
  %idx.ext = sext i32 %2 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %1, i64 %idx.ext
  store %struct.glyph_row* %add.ptr, %struct.glyph_row** %current_row, align 8
  %3 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix.addr, align 8
  %rows1 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %3, i32 0, i32 1
  %4 = load %struct.glyph_row*, %struct.glyph_row** %rows1, align 8
  %5 = load i32, i32* %row.addr, align 4
  %idx.ext2 = sext i32 %5 to i64
  %add.ptr3 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %4, i64 %idx.ext2
  store %struct.glyph_row* %add.ptr3, %struct.glyph_row** %desired_row, align 8
  %6 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %mouse_face_p4 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %6, i32 0, i32 22
  %7 = bitcast i40* %mouse_face_p4 to i64*
  %bf.load = load i64, i64* %7, align 4
  %bf.lshr = lshr i64 %bf.load, 25
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %mouse_face_p, align 1
  %8 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %9 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  call void @assign_row(%struct.glyph_row* %8, %struct.glyph_row* %9)
  %10 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %enabled_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %10, i32 0, i32 22
  %11 = bitcast i40* %enabled_p to i64*
  %bf.load5 = load i64, i64* %11, align 4
  %bf.clear6 = and i64 %bf.load5, -1025
  %bf.set = or i64 %bf.clear6, 1024
  store i64 %bf.set, i64* %11, align 4
  %12 = load i8, i8* %mouse_face_p, align 1
  %tobool = trunc i8 %12 to i1
  %13 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %mouse_face_p7 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %13, i32 0, i32 22
  %14 = bitcast i40* %mouse_face_p7 to i64*
  %15 = zext i1 %tobool to i64
  %bf.load8 = load i64, i64* %14, align 4
  %bf.shl = shl i64 %15, 25
  %bf.clear9 = and i64 %bf.load8, -33554433
  %bf.set10 = or i64 %bf.clear9, %bf.shl
  store i64 %bf.set10, i64* %14, align 4
  %bf.result.cast = trunc i64 %15 to i8
  %tobool11 = trunc i8 %bf.result.cast to i1
  %16 = load %struct.frame*, %struct.frame** @frame_matrix_frame, align 8
  %tobool12 = icmp ne %struct.frame* %16, null
  br i1 %tobool12, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %17 = load %struct.frame*, %struct.frame** @frame_matrix_frame, align 8
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 5
  %18 = load i64, i64* %root_window, align 8
  %call = call %struct.window* @XWINDOW(i64 %18)
  %19 = load i32, i32* %row.addr, align 4
  call void @mirror_make_current(%struct.window* %call, i32 %19)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare void @output_cursor_to(%struct.window*, i32, i32, i32, i32) #1

; Function Attrs: nounwind uwtable
define internal void @assign_row(%struct.glyph_row* %to, %struct.glyph_row* %from) #0 {
entry:
  %to.addr = alloca %struct.glyph_row*, align 8
  %from.addr = alloca %struct.glyph_row*, align 8
  store %struct.glyph_row* %to, %struct.glyph_row** %to.addr, align 8
  store %struct.glyph_row* %from, %struct.glyph_row** %from.addr, align 8
  %0 = load %struct.glyph_row*, %struct.glyph_row** %to.addr, align 8
  %1 = load %struct.glyph_row*, %struct.glyph_row** %from.addr, align 8
  call void @swap_glyph_pointers(%struct.glyph_row* %0, %struct.glyph_row* %1)
  %2 = load %struct.glyph_row*, %struct.glyph_row** %to.addr, align 8
  %3 = load %struct.glyph_row*, %struct.glyph_row** %from.addr, align 8
  call void @copy_row_except_pointers(%struct.glyph_row* %2, %struct.glyph_row* %3)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @mirror_make_current(%struct.window* %w, i32 %frame_row) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %frame_row.addr = alloca i32, align 4
  %row = alloca i32, align 4
  %current_row = alloca %struct.glyph_row*, align 8
  %desired_row = alloca %struct.glyph_row*, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i32 %frame_row, i32* %frame_row.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %entry
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %tobool = icmp ne %struct.window* %0, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 10
  %2 = load i64, i64* %contents, align 8
  %call = call zeroext i1 @WINDOWP(i64 %2)
  br i1 %call, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %3 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents1 = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 10
  %4 = load i64, i64* %contents1, align 8
  %call2 = call %struct.window* @XWINDOW(i64 %4)
  %5 = load i32, i32* %frame_row.addr, align 4
  call void @mirror_make_current(%struct.window* %call2, i32 %5)
  br label %if.end.22

if.else:                                          ; preds = %while.body
  %6 = load i32, i32* %frame_row.addr, align 4
  %7 = load %struct.window*, %struct.window** %w.addr, align 8
  %desired_matrix = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 25
  %8 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %matrix_y = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %8, i32 0, i32 5
  %9 = load i32, i32* %matrix_y, align 4
  %sub = sub nsw i32 %6, %9
  store i32 %sub, i32* %row, align 4
  %10 = load i32, i32* %row, align 4
  %cmp = icmp sge i32 %10, 0
  br i1 %cmp, label %land.lhs.true, label %if.end.21

land.lhs.true:                                    ; preds = %if.else
  %11 = load i32, i32* %row, align 4
  %12 = load %struct.window*, %struct.window** %w.addr, align 8
  %desired_matrix3 = getelementptr inbounds %struct.window, %struct.window* %12, i32 0, i32 25
  %13 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix3, align 8
  %matrix_h = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %13, i32 0, i32 7
  %14 = load i32, i32* %matrix_h, align 4
  %cmp4 = icmp slt i32 %11, %14
  br i1 %cmp4, label %if.then.5, label %if.end.21

if.then.5:                                        ; preds = %land.lhs.true
  %15 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %15, i32 0, i32 24
  %16 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %16, i32 0, i32 1
  %17 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %18 = load i32, i32* %row, align 4
  %idx.ext = sext i32 %18 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %17, i64 %idx.ext
  store %struct.glyph_row* %add.ptr, %struct.glyph_row** %current_row, align 8
  %19 = load %struct.window*, %struct.window** %w.addr, align 8
  %desired_matrix6 = getelementptr inbounds %struct.window, %struct.window* %19, i32 0, i32 25
  %20 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix6, align 8
  %rows7 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %20, i32 0, i32 1
  %21 = load %struct.glyph_row*, %struct.glyph_row** %rows7, align 8
  %22 = load i32, i32* %row, align 4
  %idx.ext8 = sext i32 %22 to i64
  %add.ptr9 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %21, i64 %idx.ext8
  store %struct.glyph_row* %add.ptr9, %struct.glyph_row** %desired_row, align 8
  %23 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %enabled_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %23, i32 0, i32 22
  %24 = bitcast i40* %enabled_p to i64*
  %bf.load = load i64, i64* %24, align 4
  %bf.lshr = lshr i64 %bf.load, 10
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %if.then.10, label %if.else.11

if.then.10:                                       ; preds = %if.then.5
  %25 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %26 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  call void @assign_row(%struct.glyph_row* %25, %struct.glyph_row* %26)
  br label %if.end

if.else.11:                                       ; preds = %if.then.5
  %27 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %28 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  call void @swap_glyph_pointers(%struct.glyph_row* %27, %struct.glyph_row* %28)
  br label %if.end

if.end:                                           ; preds = %if.else.11, %if.then.10
  %29 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %enabled_p12 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %29, i32 0, i32 22
  %30 = bitcast i40* %enabled_p12 to i64*
  %bf.load13 = load i64, i64* %30, align 4
  %bf.clear14 = and i64 %bf.load13, -1025
  %bf.set = or i64 %bf.clear14, 1024
  store i64 %bf.set, i64* %30, align 4
  %31 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %mode_line_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %31, i32 0, i32 22
  %32 = bitcast i40* %mode_line_p to i64*
  %bf.load15 = load i64, i64* %32, align 4
  %bf.lshr16 = lshr i64 %bf.load15, 20
  %bf.clear17 = and i64 %bf.lshr16, 1
  %bf.cast18 = trunc i64 %bf.clear17 to i1
  br i1 %bf.cast18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.end
  %33 = load i32, i32* %row, align 4
  %34 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %y = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %34, i32 0, i32 4
  store i32 %33, i32* %y, align 4
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.19, %if.end
  br label %if.end.21

if.end.21:                                        ; preds = %if.end.20, %land.lhs.true, %if.else
  br label %if.end.22

if.end.22:                                        ; preds = %if.end.21, %if.then
  %35 = load %struct.window*, %struct.window** %w.addr, align 8
  %next = getelementptr inbounds %struct.window, %struct.window* %35, i32 0, i32 2
  %36 = load i64, i64* %next, align 8
  %call23 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp24 = icmp eq i64 %36, %call23
  br i1 %cmp24, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.22
  br label %cond.end

cond.false:                                       ; preds = %if.end.22
  %37 = load %struct.window*, %struct.window** %w.addr, align 8
  %next25 = getelementptr inbounds %struct.window, %struct.window* %37, i32 0, i32 2
  %38 = load i64, i64* %next25, align 8
  %call26 = call %struct.window* @XWINDOW(i64 %38)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.window* [ null, %cond.true ], [ %call26, %cond.false ]
  store %struct.window* %cond, %struct.window** %w.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @swap_glyph_pointers(%struct.glyph_row* %a, %struct.glyph_row* %b) #0 {
entry:
  %a.addr = alloca %struct.glyph_row*, align 8
  %b.addr = alloca %struct.glyph_row*, align 8
  %i = alloca i32, align 4
  %hash_tem = alloca i32, align 4
  %temp = alloca %struct.glyph*, align 8
  %used_tem = alloca i16, align 2
  store %struct.glyph_row* %a, %struct.glyph_row** %a.addr, align 8
  store %struct.glyph_row* %b, %struct.glyph_row** %b.addr, align 8
  %0 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %hash = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %0, i32 0, i32 2
  %1 = load i32, i32* %hash, align 4
  store i32 %1, i32* %hash_tem, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %glyphs = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %4, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs, i32 0, i64 %idxprom
  %5 = load %struct.glyph*, %struct.glyph** %arrayidx, align 8
  store %struct.glyph* %5, %struct.glyph** %temp, align 8
  %6 = load i32, i32* %i, align 4
  %idxprom1 = sext i32 %6 to i64
  %7 = load %struct.glyph_row*, %struct.glyph_row** %b.addr, align 8
  %glyphs2 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %7, i32 0, i32 0
  %arrayidx3 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs2, i32 0, i64 %idxprom1
  %8 = load %struct.glyph*, %struct.glyph** %arrayidx3, align 8
  %9 = load i32, i32* %i, align 4
  %idxprom4 = sext i32 %9 to i64
  %10 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %glyphs5 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %10, i32 0, i32 0
  %arrayidx6 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs5, i32 0, i64 %idxprom4
  store %struct.glyph* %8, %struct.glyph** %arrayidx6, align 8
  %11 = load %struct.glyph*, %struct.glyph** %temp, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom7 = sext i32 %12 to i64
  %13 = load %struct.glyph_row*, %struct.glyph_row** %b.addr, align 8
  %glyphs8 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %13, i32 0, i32 0
  %arrayidx9 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs8, i32 0, i64 %idxprom7
  store %struct.glyph* %11, %struct.glyph** %arrayidx9, align 8
  %14 = load i32, i32* %i, align 4
  %cmp10 = icmp slt i32 %14, 3
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %15 = load i32, i32* %i, align 4
  %idxprom11 = sext i32 %15 to i64
  %16 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %used = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %16, i32 0, i32 1
  %arrayidx12 = getelementptr inbounds [4 x i16], [4 x i16]* %used, i32 0, i64 %idxprom11
  %17 = load i16, i16* %arrayidx12, align 2
  store i16 %17, i16* %used_tem, align 2
  %18 = load i32, i32* %i, align 4
  %idxprom13 = sext i32 %18 to i64
  %19 = load %struct.glyph_row*, %struct.glyph_row** %b.addr, align 8
  %used14 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %19, i32 0, i32 1
  %arrayidx15 = getelementptr inbounds [4 x i16], [4 x i16]* %used14, i32 0, i64 %idxprom13
  %20 = load i16, i16* %arrayidx15, align 2
  %21 = load i32, i32* %i, align 4
  %idxprom16 = sext i32 %21 to i64
  %22 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %used17 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %22, i32 0, i32 1
  %arrayidx18 = getelementptr inbounds [4 x i16], [4 x i16]* %used17, i32 0, i64 %idxprom16
  store i16 %20, i16* %arrayidx18, align 2
  %23 = load i16, i16* %used_tem, align 2
  %24 = load i32, i32* %i, align 4
  %idxprom19 = sext i32 %24 to i64
  %25 = load %struct.glyph_row*, %struct.glyph_row** %b.addr, align 8
  %used20 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %25, i32 0, i32 1
  %arrayidx21 = getelementptr inbounds [4 x i16], [4 x i16]* %used20, i32 0, i64 %idxprom19
  store i16 %23, i16* %arrayidx21, align 2
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %26 = load i32, i32* %i, align 4
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %27 = load %struct.glyph_row*, %struct.glyph_row** %b.addr, align 8
  %hash22 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %27, i32 0, i32 2
  %28 = load i32, i32* %hash22, align 4
  %29 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %hash23 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %29, i32 0, i32 2
  store i32 %28, i32* %hash23, align 4
  %30 = load i32, i32* %hash_tem, align 4
  %31 = load %struct.glyph_row*, %struct.glyph_row** %b.addr, align 8
  %hash24 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %31, i32 0, i32 2
  store i32 %30, i32* %hash24, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @row_equal_p(%struct.glyph_row* %a, %struct.glyph_row* %b, i1 zeroext %mouse_face_p) #0 {
entry:
  %retval = alloca i1, align 1
  %a.addr = alloca %struct.glyph_row*, align 8
  %b.addr = alloca %struct.glyph_row*, align 8
  %mouse_face_p.addr = alloca i8, align 1
  %a_glyph = alloca %struct.glyph*, align 8
  %b_glyph = alloca %struct.glyph*, align 8
  %a_end = alloca %struct.glyph*, align 8
  %area = alloca i32, align 4
  store %struct.glyph_row* %a, %struct.glyph_row** %a.addr, align 8
  store %struct.glyph_row* %b, %struct.glyph_row** %b.addr, align 8
  %frombool = zext i1 %mouse_face_p to i8
  store i8 %frombool, i8* %mouse_face_p.addr, align 1
  %0 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %1 = load %struct.glyph_row*, %struct.glyph_row** %b.addr, align 8
  %cmp = icmp eq %struct.glyph_row* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* %retval
  br label %return

if.else:                                          ; preds = %entry
  %2 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %hash = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %2, i32 0, i32 2
  %3 = load i32, i32* %hash, align 4
  %4 = load %struct.glyph_row*, %struct.glyph_row** %b.addr, align 8
  %hash1 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %4, i32 0, i32 2
  %5 = load i32, i32* %hash1, align 4
  %cmp2 = icmp ne i32 %3, %5
  br i1 %cmp2, label %if.then.3, label %if.else.4

if.then.3:                                        ; preds = %if.else
  store i1 false, i1* %retval
  br label %return

if.else.4:                                        ; preds = %if.else
  %6 = load i8, i8* %mouse_face_p.addr, align 1
  %tobool = trunc i8 %6 to i1
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.else.4
  %7 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %mouse_face_p5 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %7, i32 0, i32 22
  %8 = bitcast i40* %mouse_face_p5 to i64*
  %bf.load = load i64, i64* %8, align 4
  %bf.lshr = lshr i64 %bf.load, 25
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  %conv = zext i1 %bf.cast to i32
  %9 = load %struct.glyph_row*, %struct.glyph_row** %b.addr, align 8
  %mouse_face_p6 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %9, i32 0, i32 22
  %10 = bitcast i40* %mouse_face_p6 to i64*
  %bf.load7 = load i64, i64* %10, align 4
  %bf.lshr8 = lshr i64 %bf.load7, 25
  %bf.clear9 = and i64 %bf.lshr8, 1
  %bf.cast10 = trunc i64 %bf.clear9 to i1
  %conv11 = zext i1 %bf.cast10 to i32
  %cmp12 = icmp ne i32 %conv, %conv11
  br i1 %cmp12, label %if.then.14, label %if.end

if.then.14:                                       ; preds = %land.lhs.true
  store i1 false, i1* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %if.else.4
  store i32 0, i32* %area, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %11 = load i32, i32* %area, align 4
  %cmp15 = icmp slt i32 %11, 3
  br i1 %cmp15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %area, align 4
  %idxprom = sext i32 %12 to i64
  %13 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %used = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %13, i32 0, i32 1
  %arrayidx = getelementptr inbounds [4 x i16], [4 x i16]* %used, i32 0, i64 %idxprom
  %14 = load i16, i16* %arrayidx, align 2
  %conv17 = sext i16 %14 to i32
  %15 = load i32, i32* %area, align 4
  %idxprom18 = sext i32 %15 to i64
  %16 = load %struct.glyph_row*, %struct.glyph_row** %b.addr, align 8
  %used19 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %16, i32 0, i32 1
  %arrayidx20 = getelementptr inbounds [4 x i16], [4 x i16]* %used19, i32 0, i64 %idxprom18
  %17 = load i16, i16* %arrayidx20, align 2
  %conv21 = sext i16 %17 to i32
  %cmp22 = icmp ne i32 %conv17, %conv21
  br i1 %cmp22, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %for.body
  store i1 false, i1* %retval
  br label %return

if.end.25:                                        ; preds = %for.body
  %18 = load i32, i32* %area, align 4
  %idxprom26 = sext i32 %18 to i64
  %19 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %glyphs = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %19, i32 0, i32 0
  %arrayidx27 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs, i32 0, i64 %idxprom26
  %20 = load %struct.glyph*, %struct.glyph** %arrayidx27, align 8
  store %struct.glyph* %20, %struct.glyph** %a_glyph, align 8
  %21 = load %struct.glyph*, %struct.glyph** %a_glyph, align 8
  %22 = load i32, i32* %area, align 4
  %idxprom28 = sext i32 %22 to i64
  %23 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %used29 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %23, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [4 x i16], [4 x i16]* %used29, i32 0, i64 %idxprom28
  %24 = load i16, i16* %arrayidx30, align 2
  %conv31 = sext i16 %24 to i32
  %idx.ext = sext i32 %conv31 to i64
  %add.ptr = getelementptr inbounds %struct.glyph, %struct.glyph* %21, i64 %idx.ext
  store %struct.glyph* %add.ptr, %struct.glyph** %a_end, align 8
  %25 = load i32, i32* %area, align 4
  %idxprom32 = sext i32 %25 to i64
  %26 = load %struct.glyph_row*, %struct.glyph_row** %b.addr, align 8
  %glyphs33 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %26, i32 0, i32 0
  %arrayidx34 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs33, i32 0, i64 %idxprom32
  %27 = load %struct.glyph*, %struct.glyph** %arrayidx34, align 8
  store %struct.glyph* %27, %struct.glyph** %b_glyph, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end.25
  %28 = load %struct.glyph*, %struct.glyph** %a_glyph, align 8
  %29 = load %struct.glyph*, %struct.glyph** %a_end, align 8
  %cmp35 = icmp ult %struct.glyph* %28, %29
  br i1 %cmp35, label %land.rhs, label %land.end.182

land.rhs:                                         ; preds = %while.cond
  %30 = load %struct.glyph*, %struct.glyph** %a_glyph, align 8
  %type = getelementptr inbounds %struct.glyph, %struct.glyph* %30, i32 0, i32 6
  %31 = bitcast i24* %type to i32*
  %bf.load37 = load i32, i32* %31, align 8
  %bf.clear38 = and i32 %bf.load37, 7
  %32 = load %struct.glyph*, %struct.glyph** %b_glyph, align 8
  %type39 = getelementptr inbounds %struct.glyph, %struct.glyph* %32, i32 0, i32 6
  %33 = bitcast i24* %type39 to i32*
  %bf.load40 = load i32, i32* %33, align 8
  %bf.clear41 = and i32 %bf.load40, 7
  %cmp42 = icmp eq i32 %bf.clear38, %bf.clear41
  br i1 %cmp42, label %land.lhs.true.44, label %land.end

land.lhs.true.44:                                 ; preds = %land.rhs
  %34 = load %struct.glyph*, %struct.glyph** %a_glyph, align 8
  %u = getelementptr inbounds %struct.glyph, %struct.glyph* %34, i32 0, i32 9
  %val = bitcast %union.anon.1* %u to i32*
  %35 = load i32, i32* %val, align 4
  %36 = load %struct.glyph*, %struct.glyph** %b_glyph, align 8
  %u45 = getelementptr inbounds %struct.glyph, %struct.glyph* %36, i32 0, i32 9
  %val46 = bitcast %union.anon.1* %u45 to i32*
  %37 = load i32, i32* %val46, align 4
  %cmp47 = icmp eq i32 %35, %37
  br i1 %cmp47, label %land.lhs.true.49, label %land.end

land.lhs.true.49:                                 ; preds = %land.lhs.true.44
  %38 = load %struct.glyph*, %struct.glyph** %a_glyph, align 8
  %type50 = getelementptr inbounds %struct.glyph, %struct.glyph* %38, i32 0, i32 6
  %39 = bitcast i24* %type50 to i32*
  %bf.load51 = load i32, i32* %39, align 8
  %bf.clear52 = and i32 %bf.load51, 7
  %cmp53 = icmp eq i32 %bf.clear52, 3
  br i1 %cmp53, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.49
  %40 = load %struct.glyph*, %struct.glyph** %a_glyph, align 8
  %slice = getelementptr inbounds %struct.glyph, %struct.glyph* %40, i32 0, i32 8
  %img = bitcast %union.anon* %slice to %struct.glyph_slice*
  %41 = bitcast %struct.glyph_slice* %img to i64*
  %bf.load55 = load i64, i64* %41, align 4
  %bf.clear56 = and i64 %bf.load55, 65535
  %bf.cast57 = trunc i64 %bf.clear56 to i32
  %42 = load %struct.glyph*, %struct.glyph** %b_glyph, align 8
  %slice58 = getelementptr inbounds %struct.glyph, %struct.glyph* %42, i32 0, i32 8
  %img59 = bitcast %union.anon* %slice58 to %struct.glyph_slice*
  %43 = bitcast %struct.glyph_slice* %img59 to i64*
  %bf.load60 = load i64, i64* %43, align 4
  %bf.clear61 = and i64 %bf.load60, 65535
  %bf.cast62 = trunc i64 %bf.clear61 to i32
  %cmp63 = icmp eq i32 %bf.cast57, %bf.cast62
  br i1 %cmp63, label %land.lhs.true.65, label %land.end

land.lhs.true.65:                                 ; preds = %cond.true
  %44 = load %struct.glyph*, %struct.glyph** %a_glyph, align 8
  %slice66 = getelementptr inbounds %struct.glyph, %struct.glyph* %44, i32 0, i32 8
  %img67 = bitcast %union.anon* %slice66 to %struct.glyph_slice*
  %45 = bitcast %struct.glyph_slice* %img67 to i64*
  %bf.load68 = load i64, i64* %45, align 4
  %bf.lshr69 = lshr i64 %bf.load68, 16
  %bf.clear70 = and i64 %bf.lshr69, 65535
  %bf.cast71 = trunc i64 %bf.clear70 to i32
  %46 = load %struct.glyph*, %struct.glyph** %b_glyph, align 8
  %slice72 = getelementptr inbounds %struct.glyph, %struct.glyph* %46, i32 0, i32 8
  %img73 = bitcast %union.anon* %slice72 to %struct.glyph_slice*
  %47 = bitcast %struct.glyph_slice* %img73 to i64*
  %bf.load74 = load i64, i64* %47, align 4
  %bf.lshr75 = lshr i64 %bf.load74, 16
  %bf.clear76 = and i64 %bf.lshr75, 65535
  %bf.cast77 = trunc i64 %bf.clear76 to i32
  %cmp78 = icmp eq i32 %bf.cast71, %bf.cast77
  br i1 %cmp78, label %land.lhs.true.80, label %land.end

land.lhs.true.80:                                 ; preds = %land.lhs.true.65
  %48 = load %struct.glyph*, %struct.glyph** %a_glyph, align 8
  %slice81 = getelementptr inbounds %struct.glyph, %struct.glyph* %48, i32 0, i32 8
  %img82 = bitcast %union.anon* %slice81 to %struct.glyph_slice*
  %49 = bitcast %struct.glyph_slice* %img82 to i64*
  %bf.load83 = load i64, i64* %49, align 4
  %bf.lshr84 = lshr i64 %bf.load83, 32
  %bf.clear85 = and i64 %bf.lshr84, 65535
  %bf.cast86 = trunc i64 %bf.clear85 to i32
  %50 = load %struct.glyph*, %struct.glyph** %b_glyph, align 8
  %slice87 = getelementptr inbounds %struct.glyph, %struct.glyph* %50, i32 0, i32 8
  %img88 = bitcast %union.anon* %slice87 to %struct.glyph_slice*
  %51 = bitcast %struct.glyph_slice* %img88 to i64*
  %bf.load89 = load i64, i64* %51, align 4
  %bf.lshr90 = lshr i64 %bf.load89, 32
  %bf.clear91 = and i64 %bf.lshr90, 65535
  %bf.cast92 = trunc i64 %bf.clear91 to i32
  %cmp93 = icmp eq i32 %bf.cast86, %bf.cast92
  br i1 %cmp93, label %land.lhs.true.95, label %land.end

land.lhs.true.95:                                 ; preds = %land.lhs.true.80
  %52 = load %struct.glyph*, %struct.glyph** %a_glyph, align 8
  %slice96 = getelementptr inbounds %struct.glyph, %struct.glyph* %52, i32 0, i32 8
  %img97 = bitcast %union.anon* %slice96 to %struct.glyph_slice*
  %53 = bitcast %struct.glyph_slice* %img97 to i64*
  %bf.load98 = load i64, i64* %53, align 4
  %bf.lshr99 = lshr i64 %bf.load98, 48
  %bf.cast100 = trunc i64 %bf.lshr99 to i32
  %54 = load %struct.glyph*, %struct.glyph** %b_glyph, align 8
  %slice101 = getelementptr inbounds %struct.glyph, %struct.glyph* %54, i32 0, i32 8
  %img102 = bitcast %union.anon* %slice101 to %struct.glyph_slice*
  %55 = bitcast %struct.glyph_slice* %img102 to i64*
  %bf.load103 = load i64, i64* %55, align 4
  %bf.lshr104 = lshr i64 %bf.load103, 48
  %bf.cast105 = trunc i64 %bf.lshr104 to i32
  %cmp106 = icmp eq i32 %bf.cast100, %bf.cast105
  br i1 %cmp106, label %land.lhs.true.120, label %land.end

cond.false:                                       ; preds = %land.lhs.true.49
  %56 = load %struct.glyph*, %struct.glyph** %a_glyph, align 8
  %type108 = getelementptr inbounds %struct.glyph, %struct.glyph* %56, i32 0, i32 6
  %57 = bitcast i24* %type108 to i32*
  %bf.load109 = load i32, i32* %57, align 8
  %bf.clear110 = and i32 %bf.load109, 7
  %cmp111 = icmp ne i32 %bf.clear110, 1
  br i1 %cmp111, label %land.lhs.true.120, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false
  %58 = load %struct.glyph*, %struct.glyph** %a_glyph, align 8
  %slice113 = getelementptr inbounds %struct.glyph, %struct.glyph* %58, i32 0, i32 8
  %cmp114 = bitcast %union.anon* %slice113 to %struct.anon*
  %from = getelementptr inbounds %struct.anon, %struct.anon* %cmp114, i32 0, i32 0
  %59 = load i32, i32* %from, align 4
  %60 = load %struct.glyph*, %struct.glyph** %b_glyph, align 8
  %slice115 = getelementptr inbounds %struct.glyph, %struct.glyph* %60, i32 0, i32 8
  %cmp116 = bitcast %union.anon* %slice115 to %struct.anon*
  %from117 = getelementptr inbounds %struct.anon, %struct.anon* %cmp116, i32 0, i32 0
  %61 = load i32, i32* %from117, align 4
  %cmp118 = icmp eq i32 %59, %61
  br i1 %cmp118, label %land.lhs.true.120, label %land.end

land.lhs.true.120:                                ; preds = %lor.lhs.false, %cond.false, %land.lhs.true.95
  %62 = load %struct.glyph*, %struct.glyph** %a_glyph, align 8
  %face_id = getelementptr inbounds %struct.glyph, %struct.glyph* %62, i32 0, i32 7
  %63 = bitcast i24* %face_id to i32*
  %bf.load121 = load i32, i32* %63, align 4
  %bf.clear122 = and i32 %bf.load121, 1048575
  %64 = load %struct.glyph*, %struct.glyph** %b_glyph, align 8
  %face_id123 = getelementptr inbounds %struct.glyph, %struct.glyph* %64, i32 0, i32 7
  %65 = bitcast i24* %face_id123 to i32*
  %bf.load124 = load i32, i32* %65, align 4
  %bf.clear125 = and i32 %bf.load124, 1048575
  %cmp126 = icmp eq i32 %bf.clear122, %bf.clear125
  br i1 %cmp126, label %land.lhs.true.128, label %land.end

land.lhs.true.128:                                ; preds = %land.lhs.true.120
  %66 = load %struct.glyph*, %struct.glyph** %a_glyph, align 8
  %padding_p = getelementptr inbounds %struct.glyph, %struct.glyph* %66, i32 0, i32 6
  %67 = bitcast i24* %padding_p to i32*
  %bf.load129 = load i32, i32* %67, align 8
  %bf.lshr130 = lshr i32 %bf.load129, 7
  %bf.clear131 = and i32 %bf.lshr130, 1
  %bf.cast132 = trunc i32 %bf.clear131 to i1
  %conv133 = zext i1 %bf.cast132 to i32
  %68 = load %struct.glyph*, %struct.glyph** %b_glyph, align 8
  %padding_p134 = getelementptr inbounds %struct.glyph, %struct.glyph* %68, i32 0, i32 6
  %69 = bitcast i24* %padding_p134 to i32*
  %bf.load135 = load i32, i32* %69, align 8
  %bf.lshr136 = lshr i32 %bf.load135, 7
  %bf.clear137 = and i32 %bf.lshr136, 1
  %bf.cast138 = trunc i32 %bf.clear137 to i1
  %conv139 = zext i1 %bf.cast138 to i32
  %cmp140 = icmp eq i32 %conv133, %conv139
  br i1 %cmp140, label %land.lhs.true.142, label %land.end

land.lhs.true.142:                                ; preds = %land.lhs.true.128
  %70 = load %struct.glyph*, %struct.glyph** %a_glyph, align 8
  %left_box_line_p = getelementptr inbounds %struct.glyph, %struct.glyph* %70, i32 0, i32 6
  %71 = bitcast i24* %left_box_line_p to i32*
  %bf.load143 = load i32, i32* %71, align 8
  %bf.lshr144 = lshr i32 %bf.load143, 4
  %bf.clear145 = and i32 %bf.lshr144, 1
  %bf.cast146 = trunc i32 %bf.clear145 to i1
  %conv147 = zext i1 %bf.cast146 to i32
  %72 = load %struct.glyph*, %struct.glyph** %b_glyph, align 8
  %left_box_line_p148 = getelementptr inbounds %struct.glyph, %struct.glyph* %72, i32 0, i32 6
  %73 = bitcast i24* %left_box_line_p148 to i32*
  %bf.load149 = load i32, i32* %73, align 8
  %bf.lshr150 = lshr i32 %bf.load149, 4
  %bf.clear151 = and i32 %bf.lshr150, 1
  %bf.cast152 = trunc i32 %bf.clear151 to i1
  %conv153 = zext i1 %bf.cast152 to i32
  %cmp154 = icmp eq i32 %conv147, %conv153
  br i1 %cmp154, label %land.lhs.true.156, label %land.end

land.lhs.true.156:                                ; preds = %land.lhs.true.142
  %74 = load %struct.glyph*, %struct.glyph** %a_glyph, align 8
  %right_box_line_p = getelementptr inbounds %struct.glyph, %struct.glyph* %74, i32 0, i32 6
  %75 = bitcast i24* %right_box_line_p to i32*
  %bf.load157 = load i32, i32* %75, align 8
  %bf.lshr158 = lshr i32 %bf.load157, 5
  %bf.clear159 = and i32 %bf.lshr158, 1
  %bf.cast160 = trunc i32 %bf.clear159 to i1
  %conv161 = zext i1 %bf.cast160 to i32
  %76 = load %struct.glyph*, %struct.glyph** %b_glyph, align 8
  %right_box_line_p162 = getelementptr inbounds %struct.glyph, %struct.glyph* %76, i32 0, i32 6
  %77 = bitcast i24* %right_box_line_p162 to i32*
  %bf.load163 = load i32, i32* %77, align 8
  %bf.lshr164 = lshr i32 %bf.load163, 5
  %bf.clear165 = and i32 %bf.lshr164, 1
  %bf.cast166 = trunc i32 %bf.clear165 to i1
  %conv167 = zext i1 %bf.cast166 to i32
  %cmp168 = icmp eq i32 %conv161, %conv167
  br i1 %cmp168, label %land.lhs.true.170, label %land.end

land.lhs.true.170:                                ; preds = %land.lhs.true.156
  %78 = load %struct.glyph*, %struct.glyph** %a_glyph, align 8
  %voffset = getelementptr inbounds %struct.glyph, %struct.glyph* %78, i32 0, i32 5
  %79 = load i16, i16* %voffset, align 2
  %conv171 = sext i16 %79 to i32
  %80 = load %struct.glyph*, %struct.glyph** %b_glyph, align 8
  %voffset172 = getelementptr inbounds %struct.glyph, %struct.glyph* %80, i32 0, i32 5
  %81 = load i16, i16* %voffset172, align 2
  %conv173 = sext i16 %81 to i32
  %cmp174 = icmp eq i32 %conv171, %conv173
  br i1 %cmp174, label %land.rhs.176, label %land.end

land.rhs.176:                                     ; preds = %land.lhs.true.170
  %82 = load %struct.glyph*, %struct.glyph** %a_glyph, align 8
  %pixel_width = getelementptr inbounds %struct.glyph, %struct.glyph* %82, i32 0, i32 2
  %83 = load i16, i16* %pixel_width, align 2
  %conv177 = sext i16 %83 to i32
  %84 = load %struct.glyph*, %struct.glyph** %b_glyph, align 8
  %pixel_width178 = getelementptr inbounds %struct.glyph, %struct.glyph* %84, i32 0, i32 2
  %85 = load i16, i16* %pixel_width178, align 2
  %conv179 = sext i16 %85 to i32
  %cmp180 = icmp eq i32 %conv177, %conv179
  br label %land.end

land.end:                                         ; preds = %land.rhs.176, %land.lhs.true.170, %land.lhs.true.156, %land.lhs.true.142, %land.lhs.true.128, %land.lhs.true.120, %lor.lhs.false, %land.lhs.true.95, %land.lhs.true.80, %land.lhs.true.65, %cond.true, %land.lhs.true.44, %land.rhs
  %86 = phi i1 [ false, %land.lhs.true.170 ], [ false, %land.lhs.true.156 ], [ false, %land.lhs.true.142 ], [ false, %land.lhs.true.128 ], [ false, %land.lhs.true.120 ], [ false, %lor.lhs.false ], [ false, %land.lhs.true.95 ], [ false, %land.lhs.true.80 ], [ false, %land.lhs.true.65 ], [ false, %cond.true ], [ false, %land.lhs.true.44 ], [ false, %land.rhs ], [ %cmp180, %land.rhs.176 ]
  br label %land.end.182

land.end.182:                                     ; preds = %land.end, %while.cond
  %87 = phi i1 [ false, %while.cond ], [ %86, %land.end ]
  br i1 %87, label %while.body, label %while.end

while.body:                                       ; preds = %land.end.182
  %88 = load %struct.glyph*, %struct.glyph** %a_glyph, align 8
  %incdec.ptr = getelementptr inbounds %struct.glyph, %struct.glyph* %88, i32 1
  store %struct.glyph* %incdec.ptr, %struct.glyph** %a_glyph, align 8
  %89 = load %struct.glyph*, %struct.glyph** %b_glyph, align 8
  %incdec.ptr183 = getelementptr inbounds %struct.glyph, %struct.glyph* %89, i32 1
  store %struct.glyph* %incdec.ptr183, %struct.glyph** %b_glyph, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end.182
  %90 = load %struct.glyph*, %struct.glyph** %a_glyph, align 8
  %91 = load %struct.glyph*, %struct.glyph** %a_end, align 8
  %cmp184 = icmp ne %struct.glyph* %90, %91
  br i1 %cmp184, label %if.then.186, label %if.end.187

if.then.186:                                      ; preds = %while.end
  store i1 false, i1* %retval
  br label %return

if.end.187:                                       ; preds = %while.end
  br label %for.inc

for.inc:                                          ; preds = %if.end.187
  %92 = load i32, i32* %area, align 4
  %inc = add nsw i32 %92, 1
  store i32 %inc, i32* %area, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %93 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %fill_line_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %93, i32 0, i32 22
  %94 = bitcast i40* %fill_line_p to i64*
  %bf.load188 = load i64, i64* %94, align 4
  %bf.lshr189 = lshr i64 %bf.load188, 16
  %bf.clear190 = and i64 %bf.lshr189, 1
  %bf.cast191 = trunc i64 %bf.clear190 to i1
  %conv192 = zext i1 %bf.cast191 to i32
  %95 = load %struct.glyph_row*, %struct.glyph_row** %b.addr, align 8
  %fill_line_p193 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %95, i32 0, i32 22
  %96 = bitcast i40* %fill_line_p193 to i64*
  %bf.load194 = load i64, i64* %96, align 4
  %bf.lshr195 = lshr i64 %bf.load194, 16
  %bf.clear196 = and i64 %bf.lshr195, 1
  %bf.cast197 = trunc i64 %bf.clear196 to i1
  %conv198 = zext i1 %bf.cast197 to i32
  %cmp199 = icmp ne i32 %conv192, %conv198
  br i1 %cmp199, label %if.then.363, label %lor.lhs.false.201

lor.lhs.false.201:                                ; preds = %for.end
  %97 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %cursor_in_fringe_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %97, i32 0, i32 22
  %98 = bitcast i40* %cursor_in_fringe_p to i64*
  %bf.load202 = load i64, i64* %98, align 4
  %bf.lshr203 = lshr i64 %bf.load202, 28
  %bf.clear204 = and i64 %bf.lshr203, 1
  %bf.cast205 = trunc i64 %bf.clear204 to i1
  %conv206 = zext i1 %bf.cast205 to i32
  %99 = load %struct.glyph_row*, %struct.glyph_row** %b.addr, align 8
  %cursor_in_fringe_p207 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %99, i32 0, i32 22
  %100 = bitcast i40* %cursor_in_fringe_p207 to i64*
  %bf.load208 = load i64, i64* %100, align 4
  %bf.lshr209 = lshr i64 %bf.load208, 28
  %bf.clear210 = and i64 %bf.lshr209, 1
  %bf.cast211 = trunc i64 %bf.clear210 to i1
  %conv212 = zext i1 %bf.cast211 to i32
  %cmp213 = icmp ne i32 %conv206, %conv212
  br i1 %cmp213, label %if.then.363, label %lor.lhs.false.215

lor.lhs.false.215:                                ; preds = %lor.lhs.false.201
  %101 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %left_fringe_bitmap = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %101, i32 0, i32 17
  %102 = bitcast [11 x i8]* %left_fringe_bitmap to i88*
  %bf.load216 = load i88, i88* %102, align 4
  %bf.lshr217 = lshr i88 %bf.load216, 32
  %bf.clear218 = and i88 %bf.lshr217, 65535
  %bf.cast219 = trunc i88 %bf.clear218 to i32
  %103 = load %struct.glyph_row*, %struct.glyph_row** %b.addr, align 8
  %left_fringe_bitmap220 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %103, i32 0, i32 17
  %104 = bitcast [11 x i8]* %left_fringe_bitmap220 to i88*
  %bf.load221 = load i88, i88* %104, align 4
  %bf.lshr222 = lshr i88 %bf.load221, 32
  %bf.clear223 = and i88 %bf.lshr222, 65535
  %bf.cast224 = trunc i88 %bf.clear223 to i32
  %cmp225 = icmp ne i32 %bf.cast219, %bf.cast224
  br i1 %cmp225, label %if.then.363, label %lor.lhs.false.227

lor.lhs.false.227:                                ; preds = %lor.lhs.false.215
  %105 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %left_fringe_face_id = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %105, i32 0, i32 20
  %106 = bitcast i24* %left_fringe_face_id to i32*
  %bf.load228 = load i32, i32* %106, align 4
  %bf.clear229 = and i32 %bf.load228, 1048575
  %107 = load %struct.glyph_row*, %struct.glyph_row** %b.addr, align 8
  %left_fringe_face_id230 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %107, i32 0, i32 20
  %108 = bitcast i24* %left_fringe_face_id230 to i32*
  %bf.load231 = load i32, i32* %108, align 4
  %bf.clear232 = and i32 %bf.load231, 1048575
  %cmp233 = icmp ne i32 %bf.clear229, %bf.clear232
  br i1 %cmp233, label %if.then.363, label %lor.lhs.false.235

lor.lhs.false.235:                                ; preds = %lor.lhs.false.227
  %109 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %left_fringe_offset = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %109, i32 0, i32 21
  %bf.load236 = load i32, i32* %left_fringe_offset, align 8
  %bf.shl = shl i32 %bf.load236, 4
  %bf.ashr = ashr i32 %bf.shl, 24
  %110 = load %struct.glyph_row*, %struct.glyph_row** %b.addr, align 8
  %left_fringe_offset237 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %110, i32 0, i32 21
  %bf.load238 = load i32, i32* %left_fringe_offset237, align 8
  %bf.shl239 = shl i32 %bf.load238, 4
  %bf.ashr240 = ashr i32 %bf.shl239, 24
  %cmp241 = icmp ne i32 %bf.ashr, %bf.ashr240
  br i1 %cmp241, label %if.then.363, label %lor.lhs.false.243

lor.lhs.false.243:                                ; preds = %lor.lhs.false.235
  %111 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %right_fringe_bitmap = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %111, i32 0, i32 17
  %112 = bitcast [11 x i8]* %right_fringe_bitmap to i88*
  %bf.load244 = load i88, i88* %112, align 4
  %bf.lshr245 = lshr i88 %bf.load244, 48
  %bf.clear246 = and i88 %bf.lshr245, 65535
  %bf.cast247 = trunc i88 %bf.clear246 to i32
  %113 = load %struct.glyph_row*, %struct.glyph_row** %b.addr, align 8
  %right_fringe_bitmap248 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %113, i32 0, i32 17
  %114 = bitcast [11 x i8]* %right_fringe_bitmap248 to i88*
  %bf.load249 = load i88, i88* %114, align 4
  %bf.lshr250 = lshr i88 %bf.load249, 48
  %bf.clear251 = and i88 %bf.lshr250, 65535
  %bf.cast252 = trunc i88 %bf.clear251 to i32
  %cmp253 = icmp ne i32 %bf.cast247, %bf.cast252
  br i1 %cmp253, label %if.then.363, label %lor.lhs.false.255

lor.lhs.false.255:                                ; preds = %lor.lhs.false.243
  %115 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %right_fringe_face_id = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %115, i32 0, i32 21
  %bf.load256 = load i32, i32* %right_fringe_face_id, align 8
  %bf.clear257 = and i32 %bf.load256, 1048575
  %116 = load %struct.glyph_row*, %struct.glyph_row** %b.addr, align 8
  %right_fringe_face_id258 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %116, i32 0, i32 21
  %bf.load259 = load i32, i32* %right_fringe_face_id258, align 8
  %bf.clear260 = and i32 %bf.load259, 1048575
  %cmp261 = icmp ne i32 %bf.clear257, %bf.clear260
  br i1 %cmp261, label %if.then.363, label %lor.lhs.false.263

lor.lhs.false.263:                                ; preds = %lor.lhs.false.255
  %117 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %right_fringe_offset = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %117, i32 0, i32 22
  %118 = bitcast i40* %right_fringe_offset to i64*
  %bf.load264 = load i64, i64* %118, align 4
  %bf.shl265 = shl i64 %bf.load264, 56
  %bf.ashr266 = ashr i64 %bf.shl265, 56
  %bf.cast267 = trunc i64 %bf.ashr266 to i32
  %119 = load %struct.glyph_row*, %struct.glyph_row** %b.addr, align 8
  %right_fringe_offset268 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %119, i32 0, i32 22
  %120 = bitcast i40* %right_fringe_offset268 to i64*
  %bf.load269 = load i64, i64* %120, align 4
  %bf.shl270 = shl i64 %bf.load269, 56
  %bf.ashr271 = ashr i64 %bf.shl270, 56
  %bf.cast272 = trunc i64 %bf.ashr271 to i32
  %cmp273 = icmp ne i32 %bf.cast267, %bf.cast272
  br i1 %cmp273, label %if.then.363, label %lor.lhs.false.275

lor.lhs.false.275:                                ; preds = %lor.lhs.false.263
  %121 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %fringe_bitmap_periodic_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %121, i32 0, i32 22
  %122 = bitcast i40* %fringe_bitmap_periodic_p to i64*
  %bf.load276 = load i64, i64* %122, align 4
  %bf.lshr277 = lshr i64 %bf.load276, 8
  %bf.clear278 = and i64 %bf.lshr277, 1
  %bf.cast279 = trunc i64 %bf.clear278 to i1
  %conv280 = zext i1 %bf.cast279 to i32
  %123 = load %struct.glyph_row*, %struct.glyph_row** %b.addr, align 8
  %fringe_bitmap_periodic_p281 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %123, i32 0, i32 22
  %124 = bitcast i40* %fringe_bitmap_periodic_p281 to i64*
  %bf.load282 = load i64, i64* %124, align 4
  %bf.lshr283 = lshr i64 %bf.load282, 8
  %bf.clear284 = and i64 %bf.lshr283, 1
  %bf.cast285 = trunc i64 %bf.clear284 to i1
  %conv286 = zext i1 %bf.cast285 to i32
  %cmp287 = icmp ne i32 %conv280, %conv286
  br i1 %cmp287, label %if.then.363, label %lor.lhs.false.289

lor.lhs.false.289:                                ; preds = %lor.lhs.false.275
  %125 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %overlay_arrow_bitmap = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %125, i32 0, i32 16
  %126 = load i32, i32* %overlay_arrow_bitmap, align 4
  %127 = load %struct.glyph_row*, %struct.glyph_row** %b.addr, align 8
  %overlay_arrow_bitmap290 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %127, i32 0, i32 16
  %128 = load i32, i32* %overlay_arrow_bitmap290, align 4
  %cmp291 = icmp ne i32 %126, %128
  br i1 %cmp291, label %if.then.363, label %lor.lhs.false.293

lor.lhs.false.293:                                ; preds = %lor.lhs.false.289
  %129 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %exact_window_width_line_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %129, i32 0, i32 22
  %130 = bitcast i40* %exact_window_width_line_p to i64*
  %bf.load294 = load i64, i64* %130, align 4
  %bf.lshr295 = lshr i64 %bf.load294, 27
  %bf.clear296 = and i64 %bf.lshr295, 1
  %bf.cast297 = trunc i64 %bf.clear296 to i1
  %conv298 = zext i1 %bf.cast297 to i32
  %131 = load %struct.glyph_row*, %struct.glyph_row** %b.addr, align 8
  %exact_window_width_line_p299 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %131, i32 0, i32 22
  %132 = bitcast i40* %exact_window_width_line_p299 to i64*
  %bf.load300 = load i64, i64* %132, align 4
  %bf.lshr301 = lshr i64 %bf.load300, 27
  %bf.clear302 = and i64 %bf.lshr301, 1
  %bf.cast303 = trunc i64 %bf.clear302 to i1
  %conv304 = zext i1 %bf.cast303 to i32
  %cmp305 = icmp ne i32 %conv298, %conv304
  br i1 %cmp305, label %if.then.363, label %lor.lhs.false.307

lor.lhs.false.307:                                ; preds = %lor.lhs.false.293
  %133 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %overlapped_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %133, i32 0, i32 22
  %134 = bitcast i40* %overlapped_p to i64*
  %bf.load308 = load i64, i64* %134, align 4
  %bf.lshr309 = lshr i64 %bf.load308, 21
  %bf.clear310 = and i64 %bf.lshr309, 1
  %bf.cast311 = trunc i64 %bf.clear310 to i1
  %conv312 = zext i1 %bf.cast311 to i32
  %135 = load %struct.glyph_row*, %struct.glyph_row** %b.addr, align 8
  %overlapped_p313 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %135, i32 0, i32 22
  %136 = bitcast i40* %overlapped_p313 to i64*
  %bf.load314 = load i64, i64* %136, align 4
  %bf.lshr315 = lshr i64 %bf.load314, 21
  %bf.clear316 = and i64 %bf.lshr315, 1
  %bf.cast317 = trunc i64 %bf.clear316 to i1
  %conv318 = zext i1 %bf.cast317 to i32
  %cmp319 = icmp ne i32 %conv312, %conv318
  br i1 %cmp319, label %if.then.363, label %lor.lhs.false.321

lor.lhs.false.321:                                ; preds = %lor.lhs.false.307
  %137 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %continuation_lines_width = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %137, i32 0, i32 23
  %138 = load i32, i32* %continuation_lines_width, align 4
  %cmp322 = icmp sgt i32 %138, 0
  %conv323 = zext i1 %cmp322 to i32
  %139 = load %struct.glyph_row*, %struct.glyph_row** %b.addr, align 8
  %continuation_lines_width324 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %139, i32 0, i32 23
  %140 = load i32, i32* %continuation_lines_width324, align 4
  %cmp325 = icmp sgt i32 %140, 0
  %conv326 = zext i1 %cmp325 to i32
  %cmp327 = icmp ne i32 %conv323, %conv326
  br i1 %cmp327, label %if.then.363, label %lor.lhs.false.329

lor.lhs.false.329:                                ; preds = %lor.lhs.false.321
  %141 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %reversed_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %141, i32 0, i32 22
  %142 = bitcast i40* %reversed_p to i64*
  %bf.load330 = load i64, i64* %142, align 4
  %bf.lshr331 = lshr i64 %bf.load330, 34
  %bf.clear332 = and i64 %bf.lshr331, 1
  %bf.cast333 = trunc i64 %bf.clear332 to i1
  %conv334 = zext i1 %bf.cast333 to i32
  %143 = load %struct.glyph_row*, %struct.glyph_row** %b.addr, align 8
  %reversed_p335 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %143, i32 0, i32 22
  %144 = bitcast i40* %reversed_p335 to i64*
  %bf.load336 = load i64, i64* %144, align 4
  %bf.lshr337 = lshr i64 %bf.load336, 34
  %bf.clear338 = and i64 %bf.lshr337, 1
  %bf.cast339 = trunc i64 %bf.clear338 to i1
  %conv340 = zext i1 %bf.cast339 to i32
  %cmp341 = icmp ne i32 %conv334, %conv340
  br i1 %cmp341, label %if.then.363, label %lor.lhs.false.343

lor.lhs.false.343:                                ; preds = %lor.lhs.false.329
  %145 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %x = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %145, i32 0, i32 3
  %146 = load i32, i32* %x, align 4
  %147 = load %struct.glyph_row*, %struct.glyph_row** %b.addr, align 8
  %x344 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %147, i32 0, i32 3
  %148 = load i32, i32* %x344, align 4
  %cmp345 = icmp ne i32 %146, %148
  br i1 %cmp345, label %if.then.363, label %lor.lhs.false.347

lor.lhs.false.347:                                ; preds = %lor.lhs.false.343
  %149 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %ascent = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %149, i32 0, i32 6
  %150 = load i32, i32* %ascent, align 4
  %151 = load %struct.glyph_row*, %struct.glyph_row** %b.addr, align 8
  %ascent348 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %151, i32 0, i32 6
  %152 = load i32, i32* %ascent348, align 4
  %cmp349 = icmp ne i32 %150, %152
  br i1 %cmp349, label %if.then.363, label %lor.lhs.false.351

lor.lhs.false.351:                                ; preds = %lor.lhs.false.347
  %153 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %phys_ascent = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %153, i32 0, i32 8
  %154 = load i32, i32* %phys_ascent, align 4
  %155 = load %struct.glyph_row*, %struct.glyph_row** %b.addr, align 8
  %phys_ascent352 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %155, i32 0, i32 8
  %156 = load i32, i32* %phys_ascent352, align 4
  %cmp353 = icmp ne i32 %154, %156
  br i1 %cmp353, label %if.then.363, label %lor.lhs.false.355

lor.lhs.false.355:                                ; preds = %lor.lhs.false.351
  %157 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %phys_height = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %157, i32 0, i32 9
  %158 = load i32, i32* %phys_height, align 4
  %159 = load %struct.glyph_row*, %struct.glyph_row** %b.addr, align 8
  %phys_height356 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %159, i32 0, i32 9
  %160 = load i32, i32* %phys_height356, align 4
  %cmp357 = icmp ne i32 %158, %160
  br i1 %cmp357, label %if.then.363, label %lor.lhs.false.359

lor.lhs.false.359:                                ; preds = %lor.lhs.false.355
  %161 = load %struct.glyph_row*, %struct.glyph_row** %a.addr, align 8
  %visible_height = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %161, i32 0, i32 10
  %162 = load i32, i32* %visible_height, align 4
  %163 = load %struct.glyph_row*, %struct.glyph_row** %b.addr, align 8
  %visible_height360 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %163, i32 0, i32 10
  %164 = load i32, i32* %visible_height360, align 4
  %cmp361 = icmp ne i32 %162, %164
  br i1 %cmp361, label %if.then.363, label %if.end.364

if.then.363:                                      ; preds = %lor.lhs.false.359, %lor.lhs.false.355, %lor.lhs.false.351, %lor.lhs.false.347, %lor.lhs.false.343, %lor.lhs.false.329, %lor.lhs.false.321, %lor.lhs.false.307, %lor.lhs.false.293, %lor.lhs.false.289, %lor.lhs.false.275, %lor.lhs.false.263, %lor.lhs.false.255, %lor.lhs.false.243, %lor.lhs.false.235, %lor.lhs.false.227, %lor.lhs.false.215, %lor.lhs.false.201, %for.end
  store i1 false, i1* %retval
  br label %return

if.end.364:                                       ; preds = %lor.lhs.false.359
  br label %if.end.365

if.end.365:                                       ; preds = %if.end.364
  br label %if.end.366

if.end.366:                                       ; preds = %if.end.365
  store i1 true, i1* %retval
  br label %return

return:                                           ; preds = %if.end.366, %if.then.363, %if.then.186, %if.then.24, %if.then.14, %if.then.3, %if.then
  %165 = load i1, i1* %retval
  ret i1 %165
}

; Function Attrs: nounwind readnone
declare i64 @next_almost_prime(i64) #4

; Function Attrs: nounwind uwtable
define internal %struct.row_entry* @add_row_entry(%struct.glyph_row* %row) #0 {
entry:
  %row.addr = alloca %struct.glyph_row*, align 8
  %entry1 = alloca %struct.row_entry*, align 8
  %i = alloca i64, align 8
  store %struct.glyph_row* %row, %struct.glyph_row** %row.addr, align 8
  %0 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %hash = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %0, i32 0, i32 2
  %1 = load i32, i32* %hash, align 4
  %conv = zext i32 %1 to i64
  %2 = load i64, i64* @row_table_size, align 8
  %rem = srem i64 %conv, %2
  store i64 %rem, i64* %i, align 8
  %3 = load i64, i64* %i, align 8
  %4 = load %struct.row_entry**, %struct.row_entry*** @row_table, align 8
  %arrayidx = getelementptr inbounds %struct.row_entry*, %struct.row_entry** %4, i64 %3
  %5 = load %struct.row_entry*, %struct.row_entry** %arrayidx, align 8
  store %struct.row_entry* %5, %struct.row_entry** %entry1, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %6 = load %struct.row_entry*, %struct.row_entry** %entry1, align 8
  %tobool = icmp ne %struct.row_entry* %6, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %7 = load %struct.row_entry*, %struct.row_entry** %entry1, align 8
  %row2 = getelementptr inbounds %struct.row_entry, %struct.row_entry* %7, i32 0, i32 4
  %8 = load %struct.glyph_row*, %struct.glyph_row** %row2, align 8
  %9 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %call = call zeroext i1 @row_equal_p(%struct.glyph_row* %8, %struct.glyph_row* %9, i1 zeroext true)
  %lnot = xor i1 %call, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %10 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ]
  br i1 %10, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %11 = load %struct.row_entry*, %struct.row_entry** %entry1, align 8
  %next = getelementptr inbounds %struct.row_entry, %struct.row_entry* %11, i32 0, i32 5
  %12 = load %struct.row_entry*, %struct.row_entry** %next, align 8
  store %struct.row_entry* %12, %struct.row_entry** %entry1, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %13 = load %struct.row_entry*, %struct.row_entry** %entry1, align 8
  %cmp = icmp eq %struct.row_entry* %13, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  %14 = load %struct.row_entry*, %struct.row_entry** @row_entry_pool, align 8
  %15 = load i64, i64* @row_entry_idx, align 8
  %inc = add nsw i64 %15, 1
  store i64 %inc, i64* @row_entry_idx, align 8
  %add.ptr = getelementptr inbounds %struct.row_entry, %struct.row_entry* %14, i64 %15
  store %struct.row_entry* %add.ptr, %struct.row_entry** %entry1, align 8
  %16 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %17 = load %struct.row_entry*, %struct.row_entry** %entry1, align 8
  %row4 = getelementptr inbounds %struct.row_entry, %struct.row_entry* %17, i32 0, i32 4
  store %struct.glyph_row* %16, %struct.glyph_row** %row4, align 8
  %18 = load %struct.row_entry*, %struct.row_entry** %entry1, align 8
  %new_uses = getelementptr inbounds %struct.row_entry, %struct.row_entry* %18, i32 0, i32 1
  store i32 0, i32* %new_uses, align 4
  %19 = load %struct.row_entry*, %struct.row_entry** %entry1, align 8
  %old_uses = getelementptr inbounds %struct.row_entry, %struct.row_entry* %19, i32 0, i32 0
  store i32 0, i32* %old_uses, align 4
  %20 = load %struct.row_entry*, %struct.row_entry** %entry1, align 8
  %new_line_number = getelementptr inbounds %struct.row_entry, %struct.row_entry* %20, i32 0, i32 2
  store i32 0, i32* %new_line_number, align 4
  %21 = load i64, i64* %i, align 8
  %22 = load %struct.row_entry*, %struct.row_entry** %entry1, align 8
  %bucket = getelementptr inbounds %struct.row_entry, %struct.row_entry* %22, i32 0, i32 3
  store i64 %21, i64* %bucket, align 8
  %23 = load i64, i64* %i, align 8
  %24 = load %struct.row_entry**, %struct.row_entry*** @row_table, align 8
  %arrayidx5 = getelementptr inbounds %struct.row_entry*, %struct.row_entry** %24, i64 %23
  %25 = load %struct.row_entry*, %struct.row_entry** %arrayidx5, align 8
  %26 = load %struct.row_entry*, %struct.row_entry** %entry1, align 8
  %next6 = getelementptr inbounds %struct.row_entry, %struct.row_entry* %26, i32 0, i32 5
  store %struct.row_entry* %25, %struct.row_entry** %next6, align 8
  %27 = load %struct.row_entry*, %struct.row_entry** %entry1, align 8
  %28 = load i64, i64* %i, align 8
  %29 = load %struct.row_entry**, %struct.row_entry*** @row_table, align 8
  %arrayidx7 = getelementptr inbounds %struct.row_entry*, %struct.row_entry** %29, i64 %28
  store %struct.row_entry* %27, %struct.row_entry** %arrayidx7, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  %30 = load %struct.row_entry*, %struct.row_entry** %entry1, align 8
  ret %struct.row_entry* %30
}

; Function Attrs: nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #2

; Function Attrs: nounwind uwtable
define internal zeroext i1 @scrolling(%struct.frame* %frame) #0 {
entry:
  %retval = alloca i1, align 1
  %frame.addr = alloca %struct.frame*, align 8
  %unchanged_at_top = alloca i32, align 4
  %unchanged_at_bottom = alloca i32, align 4
  %window_size = alloca i32, align 4
  %changed_lines = alloca i32, align 4
  %i = alloca i32, align 4
  %height = alloca i32, align 4
  %free_at_end_vpos = alloca i32, align 4
  %current_matrix = alloca %struct.glyph_matrix*, align 8
  %desired_matrix = alloca %struct.glyph_matrix*, align 8
  %old_hash = alloca i32*, align 8
  %sa_avail = alloca i64, align 8
  %sa_count = alloca i64, align 8
  %sa_must_free = alloca i8, align 1
  %new_hash = alloca i32*, align 8
  %draw_cost = alloca i32*, align 8
  %old_draw_cost = alloca i32*, align 8
  store %struct.frame* %frame, %struct.frame** %frame.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 39
  %1 = load i32, i32* %total_lines, align 4
  store i32 %1, i32* %height, align 4
  %2 = load i32, i32* %height, align 4
  store i32 %2, i32* %free_at_end_vpos, align 4
  %3 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %current_matrix1 = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 25
  %4 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix1, align 8
  store %struct.glyph_matrix* %4, %struct.glyph_matrix** %current_matrix, align 8
  %5 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %desired_matrix2 = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 24
  %6 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix2, align 8
  store %struct.glyph_matrix* %6, %struct.glyph_matrix** %desired_matrix, align 8
  store i64 16384, i64* %sa_avail, align 8
  %call = call i64 @SPECPDL_INDEX()
  store i64 %call, i64* %sa_count, align 8
  store i8 0, i8* %sa_must_free, align 1
  br label %do.body

do.body:                                          ; preds = %entry
  %7 = load i32, i32* %height, align 4
  %conv = sext i32 %7 to i64
  %8 = load i64, i64* %sa_avail, align 8
  %div = udiv i64 %8, 4
  %div3 = udiv i64 %div, 4
  %cmp = icmp ule i64 %conv, %div3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.body
  %9 = load i32, i32* %height, align 4
  %conv5 = sext i32 %9 to i64
  %mul = mul i64 16, %conv5
  %10 = load i64, i64* %sa_avail, align 8
  %sub = sub i64 %10, %mul
  store i64 %sub, i64* %sa_avail, align 8
  %11 = load i32, i32* %height, align 4
  %conv6 = sext i32 %11 to i64
  %mul7 = mul i64 16, %conv6
  %12 = alloca i8, i64 %mul7
  %13 = bitcast i8* %12 to i32*
  store i32* %13, i32** %old_hash, align 8
  br label %if.end

if.else:                                          ; preds = %do.body
  %14 = load i32, i32* %height, align 4
  %conv8 = sext i32 %14 to i64
  %call9 = call noalias i8* @xnmalloc(i64 %conv8, i64 16)
  %15 = bitcast i8* %call9 to i32*
  store i32* %15, i32** %old_hash, align 8
  store i8 1, i8* %sa_must_free, align 1
  %16 = load i32*, i32** %old_hash, align 8
  %17 = bitcast i32* %16 to i8*
  call void @record_unwind_protect_ptr(void (i8*)* @xfree, i8* %17)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %do.end

do.end:                                           ; preds = %if.end
  %18 = load i32*, i32** %old_hash, align 8
  %19 = load i32, i32* %height, align 4
  %idx.ext = sext i32 %19 to i64
  %add.ptr = getelementptr inbounds i32, i32* %18, i64 %idx.ext
  store i32* %add.ptr, i32** %new_hash, align 8
  %20 = load i32*, i32** %new_hash, align 8
  %21 = load i32, i32* %height, align 4
  %idx.ext10 = sext i32 %21 to i64
  %add.ptr11 = getelementptr inbounds i32, i32* %20, i64 %idx.ext10
  store i32* %add.ptr11, i32** %draw_cost, align 8
  %22 = load i32*, i32** %draw_cost, align 8
  %23 = load i32, i32* %height, align 4
  %idx.ext12 = sext i32 %23 to i64
  %add.ptr13 = getelementptr inbounds i32, i32* %22, i64 %idx.ext12
  store i32* %add.ptr13, i32** %old_draw_cost, align 8
  store i32 0, i32* %changed_lines, align 4
  store i32 0, i32* %unchanged_at_top, align 4
  %24 = load i32, i32* %height, align 4
  store i32 %24, i32* %unchanged_at_bottom, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end
  %25 = load i32, i32* %i, align 4
  %26 = load i32, i32* %height, align 4
  %cmp14 = icmp slt i32 %25, %26
  br i1 %cmp14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %27 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %27, i32 0, i32 1
  %28 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %29 = load i32, i32* %i, align 4
  %idx.ext16 = sext i32 %29 to i64
  %add.ptr17 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %28, i64 %idx.ext16
  %enabled_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr17, i32 0, i32 22
  %30 = bitcast i40* %enabled_p to i64*
  %bf.load = load i64, i64* %30, align 4
  %bf.lshr = lshr i64 %bf.load, 10
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %if.end.25, label %if.then.18

if.then.18:                                       ; preds = %for.body
  br label %do.body.19

do.body.19:                                       ; preds = %if.then.18
  %31 = load i8, i8* %sa_must_free, align 1
  %tobool = trunc i8 %31 to i1
  br i1 %tobool, label %if.then.20, label %if.end.23

if.then.20:                                       ; preds = %do.body.19
  store i8 0, i8* %sa_must_free, align 1
  %32 = load i64, i64* %sa_count, align 8
  %call21 = call i64 @builtin_lisp_symbol(i32 0)
  %call22 = call i64 @unbind_to(i64 %32, i64 %call21)
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.20, %do.body.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  store i1 false, i1* %retval
  br label %return

if.end.25:                                        ; preds = %for.body
  %33 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %34 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %rows26 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %34, i32 0, i32 1
  %35 = load %struct.glyph_row*, %struct.glyph_row** %rows26, align 8
  %36 = load i32, i32* %i, align 4
  %idx.ext27 = sext i32 %36 to i64
  %add.ptr28 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %35, i64 %idx.ext27
  %call29 = call i32 @line_hash_code(%struct.frame* %33, %struct.glyph_row* %add.ptr28)
  %37 = load i32, i32* %i, align 4
  %idxprom = sext i32 %37 to i64
  %38 = load i32*, i32** %old_hash, align 8
  %arrayidx = getelementptr inbounds i32, i32* %38, i64 %idxprom
  store i32 %call29, i32* %arrayidx, align 4
  %39 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %rows30 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %39, i32 0, i32 1
  %40 = load %struct.glyph_row*, %struct.glyph_row** %rows30, align 8
  %41 = load i32, i32* %i, align 4
  %idx.ext31 = sext i32 %41 to i64
  %add.ptr32 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %40, i64 %idx.ext31
  %enabled_p33 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr32, i32 0, i32 22
  %42 = bitcast i40* %enabled_p33 to i64*
  %bf.load34 = load i64, i64* %42, align 4
  %bf.lshr35 = lshr i64 %bf.load34, 10
  %bf.clear36 = and i64 %bf.lshr35, 1
  %bf.cast37 = trunc i64 %bf.clear36 to i1
  br i1 %bf.cast37, label %if.else.45, label %if.then.38

if.then.38:                                       ; preds = %if.end.25
  %43 = load i32, i32* %i, align 4
  %idxprom39 = sext i32 %43 to i64
  %44 = load i32*, i32** %old_hash, align 8
  %arrayidx40 = getelementptr inbounds i32, i32* %44, i64 %idxprom39
  %45 = load i32, i32* %arrayidx40, align 4
  %46 = load i32, i32* %i, align 4
  %idxprom41 = sext i32 %46 to i64
  %47 = load i32*, i32** %new_hash, align 8
  %arrayidx42 = getelementptr inbounds i32, i32* %47, i64 %idxprom41
  store i32 %45, i32* %arrayidx42, align 4
  %48 = load i32, i32* %i, align 4
  %idxprom43 = sext i32 %48 to i64
  %49 = load i32*, i32** %draw_cost, align 8
  %arrayidx44 = getelementptr inbounds i32, i32* %49, i64 %idxprom43
  store i32 1000000, i32* %arrayidx44, align 4
  br label %if.end.55

if.else.45:                                       ; preds = %if.end.25
  %50 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %51 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %rows46 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %51, i32 0, i32 1
  %52 = load %struct.glyph_row*, %struct.glyph_row** %rows46, align 8
  %53 = load i32, i32* %i, align 4
  %idx.ext47 = sext i32 %53 to i64
  %add.ptr48 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %52, i64 %idx.ext47
  %call49 = call i32 @line_hash_code(%struct.frame* %50, %struct.glyph_row* %add.ptr48)
  %54 = load i32, i32* %i, align 4
  %idxprom50 = sext i32 %54 to i64
  %55 = load i32*, i32** %new_hash, align 8
  %arrayidx51 = getelementptr inbounds i32, i32* %55, i64 %idxprom50
  store i32 %call49, i32* %arrayidx51, align 4
  %56 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %57 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %58 = load i32, i32* %i, align 4
  %call52 = call i32 @line_draw_cost(%struct.frame* %56, %struct.glyph_matrix* %57, i32 %58)
  %59 = load i32, i32* %i, align 4
  %idxprom53 = sext i32 %59 to i64
  %60 = load i32*, i32** %draw_cost, align 8
  %arrayidx54 = getelementptr inbounds i32, i32* %60, i64 %idxprom53
  store i32 %call52, i32* %arrayidx54, align 4
  br label %if.end.55

if.end.55:                                        ; preds = %if.else.45, %if.then.38
  %61 = load i32, i32* %i, align 4
  %idxprom56 = sext i32 %61 to i64
  %62 = load i32*, i32** %old_hash, align 8
  %arrayidx57 = getelementptr inbounds i32, i32* %62, i64 %idxprom56
  %63 = load i32, i32* %arrayidx57, align 4
  %64 = load i32, i32* %i, align 4
  %idxprom58 = sext i32 %64 to i64
  %65 = load i32*, i32** %new_hash, align 8
  %arrayidx59 = getelementptr inbounds i32, i32* %65, i64 %idxprom58
  %66 = load i32, i32* %arrayidx59, align 4
  %cmp60 = icmp ne i32 %63, %66
  br i1 %cmp60, label %if.then.62, label %if.else.65

if.then.62:                                       ; preds = %if.end.55
  %67 = load i32, i32* %changed_lines, align 4
  %inc = add nsw i32 %67, 1
  store i32 %inc, i32* %changed_lines, align 4
  %68 = load i32, i32* %height, align 4
  %69 = load i32, i32* %i, align 4
  %sub63 = sub nsw i32 %68, %69
  %sub64 = sub nsw i32 %sub63, 1
  store i32 %sub64, i32* %unchanged_at_bottom, align 4
  br label %if.end.71

if.else.65:                                       ; preds = %if.end.55
  %70 = load i32, i32* %i, align 4
  %71 = load i32, i32* %unchanged_at_top, align 4
  %cmp66 = icmp eq i32 %70, %71
  br i1 %cmp66, label %if.then.68, label %if.end.70

if.then.68:                                       ; preds = %if.else.65
  %72 = load i32, i32* %unchanged_at_top, align 4
  %inc69 = add nsw i32 %72, 1
  store i32 %inc69, i32* %unchanged_at_top, align 4
  br label %if.end.70

if.end.70:                                        ; preds = %if.then.68, %if.else.65
  br label %if.end.71

if.end.71:                                        ; preds = %if.end.70, %if.then.62
  %73 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %74 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %75 = load i32, i32* %i, align 4
  %call72 = call i32 @line_draw_cost(%struct.frame* %73, %struct.glyph_matrix* %74, i32 %75)
  %76 = load i32, i32* %i, align 4
  %idxprom73 = sext i32 %76 to i64
  %77 = load i32*, i32** %old_draw_cost, align 8
  %arrayidx74 = getelementptr inbounds i32, i32* %77, i64 %idxprom73
  store i32 %call72, i32* %arrayidx74, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end.71
  %78 = load i32, i32* %i, align 4
  %inc75 = add nsw i32 %78, 1
  store i32 %inc75, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %79 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %79, i32 0, i32 26
  %80 = bitcast i48* %output_method to i64*
  %bf.load76 = load i64, i64* %80, align 8
  %bf.lshr77 = lshr i64 %bf.load76, 23
  %bf.clear78 = and i64 %bf.lshr77, 7
  %bf.cast79 = trunc i64 %bf.clear78 to i32
  %cmp80 = icmp eq i32 %bf.cast79, 1
  br i1 %cmp80, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end
  %81 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %output_method82 = getelementptr inbounds %struct.frame, %struct.frame* %81, i32 0, i32 26
  %82 = bitcast i48* %output_method82 to i64*
  %bf.load83 = load i64, i64* %82, align 8
  %bf.lshr84 = lshr i64 %bf.load83, 23
  %bf.clear85 = and i64 %bf.lshr84, 7
  %bf.cast86 = trunc i64 %bf.clear85 to i32
  %cmp87 = icmp eq i32 %bf.cast86, 3
  br i1 %cmp87, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %for.end
  %83 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %83, i32 0, i32 61
  %84 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %84, i32 0, i32 12
  %tty = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %85 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %86, %cond.true
  %cond = phi %struct.tty_display_info* [ %85, %cond.true ], [ null, %86 ]
  %scroll_region_ok = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond, i32 0, i32 75
  %bf.load89 = load i8, i8* %scroll_region_ok, align 4
  %bf.lshr90 = lshr i8 %bf.load89, 6
  %bf.clear91 = and i8 %bf.lshr90, 1
  %bf.cast92 = trunc i8 %bf.clear91 to i1
  br i1 %bf.cast92, label %lor.lhs.false.97, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.end
  %87 = load i32, i32* %changed_lines, align 4
  %conv93 = sext i32 %87 to i64
  %88 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 381), align 8
  %div94 = sdiv i64 %88, 2400
  %cmp95 = icmp slt i64 %conv93, %div94
  br i1 %cmp95, label %if.then.100, label %lor.lhs.false.97

lor.lhs.false.97:                                 ; preds = %land.lhs.true, %cond.end
  %89 = load i32, i32* %unchanged_at_bottom, align 4
  %90 = load i32, i32* %height, align 4
  %cmp98 = icmp eq i32 %89, %90
  br i1 %cmp98, label %if.then.100, label %if.end.108

if.then.100:                                      ; preds = %lor.lhs.false.97, %land.lhs.true
  br label %do.body.101

do.body.101:                                      ; preds = %if.then.100
  %91 = load i8, i8* %sa_must_free, align 1
  %tobool102 = trunc i8 %91 to i1
  br i1 %tobool102, label %if.then.103, label %if.end.106

if.then.103:                                      ; preds = %do.body.101
  store i8 0, i8* %sa_must_free, align 1
  %92 = load i64, i64* %sa_count, align 8
  %call104 = call i64 @builtin_lisp_symbol(i32 0)
  %call105 = call i64 @unbind_to(i64 %92, i64 %call104)
  br label %if.end.106

if.end.106:                                       ; preds = %if.then.103, %do.body.101
  br label %do.end.107

do.end.107:                                       ; preds = %if.end.106
  store i1 true, i1* %retval
  br label %return

if.end.108:                                       ; preds = %lor.lhs.false.97
  %93 = load i32, i32* %height, align 4
  %94 = load i32, i32* %unchanged_at_top, align 4
  %sub109 = sub nsw i32 %93, %94
  %95 = load i32, i32* %unchanged_at_bottom, align 4
  %sub110 = sub nsw i32 %sub109, %95
  store i32 %sub110, i32* %window_size, align 4
  %96 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %output_method111 = getelementptr inbounds %struct.frame, %struct.frame* %96, i32 0, i32 26
  %97 = bitcast i48* %output_method111 to i64*
  %bf.load112 = load i64, i64* %97, align 8
  %bf.lshr113 = lshr i64 %bf.load112, 23
  %bf.clear114 = and i64 %bf.lshr113, 7
  %bf.cast115 = trunc i64 %bf.clear114 to i32
  %cmp116 = icmp eq i32 %bf.cast115, 1
  br i1 %cmp116, label %cond.true.126, label %lor.lhs.false.118

lor.lhs.false.118:                                ; preds = %if.end.108
  %98 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %output_method119 = getelementptr inbounds %struct.frame, %struct.frame* %98, i32 0, i32 26
  %99 = bitcast i48* %output_method119 to i64*
  %bf.load120 = load i64, i64* %99, align 8
  %bf.lshr121 = lshr i64 %bf.load120, 23
  %bf.clear122 = and i64 %bf.lshr121, 7
  %bf.cast123 = trunc i64 %bf.clear122 to i32
  %cmp124 = icmp eq i32 %bf.cast123, 3
  br i1 %cmp124, label %cond.true.126, label %cond.false.130

cond.true.126:                                    ; preds = %lor.lhs.false.118, %if.end.108
  %100 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %terminal127 = getelementptr inbounds %struct.frame, %struct.frame* %100, i32 0, i32 61
  %101 = load %struct.terminal*, %struct.terminal** %terminal127, align 8
  %display_info128 = getelementptr inbounds %struct.terminal, %struct.terminal* %101, i32 0, i32 12
  %tty129 = bitcast %union.display_info* %display_info128 to %struct.tty_display_info**
  %102 = load %struct.tty_display_info*, %struct.tty_display_info** %tty129, align 8
  br label %cond.end.131

cond.false.130:                                   ; preds = %lor.lhs.false.118
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.131

cond.end.131:                                     ; preds = %103, %cond.true.126
  %cond132 = phi %struct.tty_display_info* [ %102, %cond.true.126 ], [ null, %103 ]
  %scroll_region_ok133 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond132, i32 0, i32 75
  %bf.load134 = load i8, i8* %scroll_region_ok133, align 4
  %bf.lshr135 = lshr i8 %bf.load134, 6
  %bf.clear136 = and i8 %bf.lshr135, 1
  %bf.cast137 = trunc i8 %bf.clear136 to i1
  br i1 %bf.cast137, label %if.then.138, label %if.else.140

if.then.138:                                      ; preds = %cond.end.131
  %104 = load i32, i32* %unchanged_at_bottom, align 4
  %105 = load i32, i32* %free_at_end_vpos, align 4
  %sub139 = sub nsw i32 %105, %104
  store i32 %sub139, i32* %free_at_end_vpos, align 4
  br label %if.end.168

if.else.140:                                      ; preds = %cond.end.131
  %106 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %output_method141 = getelementptr inbounds %struct.frame, %struct.frame* %106, i32 0, i32 26
  %107 = bitcast i48* %output_method141 to i64*
  %bf.load142 = load i64, i64* %107, align 8
  %bf.lshr143 = lshr i64 %bf.load142, 23
  %bf.clear144 = and i64 %bf.lshr143, 7
  %bf.cast145 = trunc i64 %bf.clear144 to i32
  %cmp146 = icmp eq i32 %bf.cast145, 1
  br i1 %cmp146, label %cond.true.156, label %lor.lhs.false.148

lor.lhs.false.148:                                ; preds = %if.else.140
  %108 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %output_method149 = getelementptr inbounds %struct.frame, %struct.frame* %108, i32 0, i32 26
  %109 = bitcast i48* %output_method149 to i64*
  %bf.load150 = load i64, i64* %109, align 8
  %bf.lshr151 = lshr i64 %bf.load150, 23
  %bf.clear152 = and i64 %bf.lshr151, 7
  %bf.cast153 = trunc i64 %bf.clear152 to i32
  %cmp154 = icmp eq i32 %bf.cast153, 3
  br i1 %cmp154, label %cond.true.156, label %cond.false.160

cond.true.156:                                    ; preds = %lor.lhs.false.148, %if.else.140
  %110 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %terminal157 = getelementptr inbounds %struct.frame, %struct.frame* %110, i32 0, i32 61
  %111 = load %struct.terminal*, %struct.terminal** %terminal157, align 8
  %display_info158 = getelementptr inbounds %struct.terminal, %struct.terminal* %111, i32 0, i32 12
  %tty159 = bitcast %union.display_info* %display_info158 to %struct.tty_display_info**
  %112 = load %struct.tty_display_info*, %struct.tty_display_info** %tty159, align 8
  br label %cond.end.161

cond.false.160:                                   ; preds = %lor.lhs.false.148
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.161

cond.end.161:                                     ; preds = %113, %cond.true.156
  %cond162 = phi %struct.tty_display_info* [ %112, %cond.true.156 ], [ null, %113 ]
  %memory_below_frame = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond162, i32 0, i32 75
  %bf.load163 = load i8, i8* %memory_below_frame, align 4
  %bf.lshr164 = lshr i8 %bf.load163, 7
  %bf.cast165 = trunc i8 %bf.lshr164 to i1
  br i1 %bf.cast165, label %if.then.166, label %if.end.167

if.then.166:                                      ; preds = %cond.end.161
  store i32 -1, i32* %free_at_end_vpos, align 4
  br label %if.end.167

if.end.167:                                       ; preds = %if.then.166, %cond.end.161
  br label %if.end.168

if.end.168:                                       ; preds = %if.end.167, %if.then.138
  %114 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %output_method169 = getelementptr inbounds %struct.frame, %struct.frame* %114, i32 0, i32 26
  %115 = bitcast i48* %output_method169 to i64*
  %bf.load170 = load i64, i64* %115, align 8
  %bf.lshr171 = lshr i64 %bf.load170, 23
  %bf.clear172 = and i64 %bf.lshr171, 7
  %bf.cast173 = trunc i64 %bf.clear172 to i32
  %cmp174 = icmp eq i32 %bf.cast173, 1
  br i1 %cmp174, label %cond.true.184, label %lor.lhs.false.176

lor.lhs.false.176:                                ; preds = %if.end.168
  %116 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %output_method177 = getelementptr inbounds %struct.frame, %struct.frame* %116, i32 0, i32 26
  %117 = bitcast i48* %output_method177 to i64*
  %bf.load178 = load i64, i64* %117, align 8
  %bf.lshr179 = lshr i64 %bf.load178, 23
  %bf.clear180 = and i64 %bf.lshr179, 7
  %bf.cast181 = trunc i64 %bf.clear180 to i32
  %cmp182 = icmp eq i32 %bf.cast181, 3
  br i1 %cmp182, label %cond.true.184, label %cond.false.188

cond.true.184:                                    ; preds = %lor.lhs.false.176, %if.end.168
  %118 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %terminal185 = getelementptr inbounds %struct.frame, %struct.frame* %118, i32 0, i32 61
  %119 = load %struct.terminal*, %struct.terminal** %terminal185, align 8
  %display_info186 = getelementptr inbounds %struct.terminal, %struct.terminal* %119, i32 0, i32 12
  %tty187 = bitcast %union.display_info* %display_info186 to %struct.tty_display_info**
  %120 = load %struct.tty_display_info*, %struct.tty_display_info** %tty187, align 8
  br label %cond.end.189

cond.false.188:                                   ; preds = %lor.lhs.false.176
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.189

cond.end.189:                                     ; preds = %121, %cond.true.184
  %cond190 = phi %struct.tty_display_info* [ %120, %cond.true.184 ], [ null, %121 ]
  %scroll_region_ok191 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond190, i32 0, i32 75
  %bf.load192 = load i8, i8* %scroll_region_ok191, align 4
  %bf.lshr193 = lshr i8 %bf.load192, 6
  %bf.clear194 = and i8 %bf.lshr193, 1
  %bf.cast195 = trunc i8 %bf.clear194 to i1
  br i1 %bf.cast195, label %land.lhs.true.209, label %lor.lhs.false.197

lor.lhs.false.197:                                ; preds = %cond.end.189
  %122 = load i32, i32* %window_size, align 4
  %cmp198 = icmp slt i32 %122, 18
  br i1 %cmp198, label %land.lhs.true.209, label %lor.lhs.false.200

lor.lhs.false.200:                                ; preds = %lor.lhs.false.197
  %123 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 381), align 8
  %cmp201 = icmp sle i64 %123, 2400
  br i1 %cmp201, label %land.lhs.true.209, label %lor.lhs.false.203

lor.lhs.false.203:                                ; preds = %lor.lhs.false.200
  %124 = load i32, i32* %window_size, align 4
  %125 = load i32, i32* %unchanged_at_top, align 4
  %126 = load i32, i32* %height, align 4
  %127 = load i32, i32* %unchanged_at_bottom, align 4
  %sub204 = sub nsw i32 %126, %127
  %128 = load i32*, i32** %old_hash, align 8
  %129 = load i32*, i32** %new_hash, align 8
  %130 = load i32*, i32** %draw_cost, align 8
  %call205 = call i32 @scrolling_max_lines_saved(i32 %125, i32 %sub204, i32* %128, i32* %129, i32* %130)
  %mul206 = mul nsw i32 10, %call205
  %cmp207 = icmp slt i32 %124, %mul206
  br i1 %cmp207, label %land.lhs.true.209, label %if.end.226

land.lhs.true.209:                                ; preds = %lor.lhs.false.203, %lor.lhs.false.200, %lor.lhs.false.197, %cond.end.189
  %131 = load i32, i32* %window_size, align 4
  %cmp210 = icmp sle i32 2, %131
  br i1 %cmp210, label %if.then.212, label %if.end.226

if.then.212:                                      ; preds = %land.lhs.true.209
  %132 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %133 = load i32, i32* %window_size, align 4
  %134 = load i32, i32* %unchanged_at_top, align 4
  %135 = load i32, i32* %unchanged_at_bottom, align 4
  %136 = load i32*, i32** %draw_cost, align 8
  %137 = load i32, i32* %unchanged_at_top, align 4
  %idx.ext213 = sext i32 %137 to i64
  %add.ptr214 = getelementptr inbounds i32, i32* %136, i64 %idx.ext213
  %add.ptr215 = getelementptr inbounds i32, i32* %add.ptr214, i64 -1
  %138 = load i32*, i32** %old_draw_cost, align 8
  %139 = load i32, i32* %unchanged_at_top, align 4
  %idx.ext216 = sext i32 %139 to i64
  %add.ptr217 = getelementptr inbounds i32, i32* %138, i64 %idx.ext216
  %add.ptr218 = getelementptr inbounds i32, i32* %add.ptr217, i64 -1
  %140 = load i32*, i32** %old_hash, align 8
  %141 = load i32, i32* %unchanged_at_top, align 4
  %idx.ext219 = sext i32 %141 to i64
  %add.ptr220 = getelementptr inbounds i32, i32* %140, i64 %idx.ext219
  %add.ptr221 = getelementptr inbounds i32, i32* %add.ptr220, i64 -1
  %142 = load i32*, i32** %new_hash, align 8
  %143 = load i32, i32* %unchanged_at_top, align 4
  %idx.ext222 = sext i32 %143 to i64
  %add.ptr223 = getelementptr inbounds i32, i32* %142, i64 %idx.ext222
  %add.ptr224 = getelementptr inbounds i32, i32* %add.ptr223, i64 -1
  %144 = load i32, i32* %free_at_end_vpos, align 4
  %145 = load i32, i32* %unchanged_at_top, align 4
  %sub225 = sub nsw i32 %144, %145
  call void @scrolling_1(%struct.frame* %132, i32 %133, i32 %134, i32 %135, i32* %add.ptr215, i32* %add.ptr218, i32* %add.ptr221, i32* %add.ptr224, i32 %sub225)
  br label %if.end.226

if.end.226:                                       ; preds = %if.then.212, %land.lhs.true.209, %lor.lhs.false.203
  br label %do.body.227

do.body.227:                                      ; preds = %if.end.226
  %146 = load i8, i8* %sa_must_free, align 1
  %tobool228 = trunc i8 %146 to i1
  br i1 %tobool228, label %if.then.229, label %if.end.232

if.then.229:                                      ; preds = %do.body.227
  store i8 0, i8* %sa_must_free, align 1
  %147 = load i64, i64* %sa_count, align 8
  %call230 = call i64 @builtin_lisp_symbol(i32 0)
  %call231 = call i64 @unbind_to(i64 %147, i64 %call230)
  br label %if.end.232

if.end.232:                                       ; preds = %if.then.229, %do.body.227
  br label %do.end.233

do.end.233:                                       ; preds = %if.end.232
  store i1 false, i1* %retval
  br label %return

return:                                           ; preds = %do.end.233, %do.end.107, %do.end.24
  %148 = load i1, i1* %retval
  ret i1 %148
}

; Function Attrs: nounwind uwtable
define internal void @update_frame_line(%struct.frame* %f, i32 %vpos) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %vpos.addr = alloca i32, align 4
  %obody = alloca %struct.glyph*, align 8
  %nbody = alloca %struct.glyph*, align 8
  %op1 = alloca %struct.glyph*, align 8
  %op2 = alloca %struct.glyph*, align 8
  %np1 = alloca %struct.glyph*, align 8
  %nend = alloca %struct.glyph*, align 8
  %tem = alloca i32, align 4
  %osp = alloca i32, align 4
  %nsp = alloca i32, align 4
  %begmatch = alloca i32, align 4
  %endmatch = alloca i32, align 4
  %olen = alloca i32, align 4
  %nlen = alloca i32, align 4
  %current_matrix = alloca %struct.glyph_matrix*, align 8
  %desired_matrix = alloca %struct.glyph_matrix*, align 8
  %current_row = alloca %struct.glyph_row*, align 8
  %desired_row = alloca %struct.glyph_row*, align 8
  %must_write_whole_line_p = alloca i8, align 1
  %write_spaces_p = alloca i8, align 1
  %colored_spaces_p = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %out = alloca i32, align 4
  %del = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %vpos, i32* %vpos.addr, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %current_matrix1 = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 25
  %1 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix1, align 8
  store %struct.glyph_matrix* %1, %struct.glyph_matrix** %current_matrix, align 8
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %desired_matrix2 = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 24
  %3 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix2, align 8
  store %struct.glyph_matrix* %3, %struct.glyph_matrix** %desired_matrix, align 8
  %4 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %4, i32 0, i32 1
  %5 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %6 = load i32, i32* %vpos.addr, align 4
  %idx.ext = sext i32 %6 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %5, i64 %idx.ext
  store %struct.glyph_row* %add.ptr, %struct.glyph_row** %current_row, align 8
  %7 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %rows3 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %7, i32 0, i32 1
  %8 = load %struct.glyph_row*, %struct.glyph_row** %rows3, align 8
  %9 = load i32, i32* %vpos.addr, align 4
  %idx.ext4 = sext i32 %9 to i64
  %add.ptr5 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %8, i64 %idx.ext4
  store %struct.glyph_row* %add.ptr5, %struct.glyph_row** %desired_row, align 8
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 26
  %11 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %11, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 1
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method6 = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 26
  %13 = bitcast i48* %output_method6 to i64*
  %bf.load7 = load i64, i64* %13, align 8
  %bf.lshr8 = lshr i64 %bf.load7, 23
  %bf.clear9 = and i64 %bf.lshr8, 7
  %bf.cast10 = trunc i64 %bf.clear9 to i32
  %cmp11 = icmp eq i32 %bf.cast10, 3
  br i1 %cmp11, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 61
  %15 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %15, i32 0, i32 12
  %tty = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %16 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %17, %cond.true
  %cond = phi %struct.tty_display_info* [ %16, %cond.true ], [ null, %17 ]
  %must_write_spaces = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond, i32 0, i32 75
  %bf.load12 = load i8, i8* %must_write_spaces, align 4
  %bf.lshr13 = lshr i8 %bf.load12, 3
  %bf.clear14 = and i8 %bf.lshr13, 1
  %bf.cast15 = trunc i8 %bf.clear14 to i1
  %frombool = zext i1 %bf.cast15 to i8
  store i8 %frombool, i8* %write_spaces_p, align 1
  br i1 true, label %cond.true.16, label %cond.false.18

cond.true.16:                                     ; preds = %cond.end
  %18 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %face_cache = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 20
  %19 = load %struct.face_cache*, %struct.face_cache** %face_cache, align 8
  %used = getelementptr inbounds %struct.face_cache, %struct.face_cache* %19, i32 0, i32 4
  %20 = load i32, i32* %used, align 4
  %add = add i32 %20, 0
  %cmp17 = icmp ult i32 0, %add
  br i1 %cmp17, label %cond.true.24, label %cond.false.26

cond.false.18:                                    ; preds = %cond.end
  %21 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %face_cache19 = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 20
  %22 = load %struct.face_cache*, %struct.face_cache** %face_cache19, align 8
  %used20 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %22, i32 0, i32 4
  %23 = load i32, i32* %used20, align 4
  %conv = sext i32 %23 to i64
  %add21 = add i64 %conv, 0
  %cmp22 = icmp ult i64 0, %add21
  br i1 %cmp22, label %cond.true.24, label %cond.false.26

cond.true.24:                                     ; preds = %cond.false.18, %cond.true.16
  %24 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %face_cache25 = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 20
  %25 = load %struct.face_cache*, %struct.face_cache** %face_cache25, align 8
  %faces_by_id = getelementptr inbounds %struct.face_cache, %struct.face_cache* %25, i32 0, i32 2
  %26 = load %struct.face**, %struct.face*** %faces_by_id, align 8
  %arrayidx = getelementptr inbounds %struct.face*, %struct.face** %26, i64 0
  %27 = load %struct.face*, %struct.face** %arrayidx, align 8
  br label %cond.end.27

cond.false.26:                                    ; preds = %cond.false.18, %cond.true.16
  br label %cond.end.27

cond.end.27:                                      ; preds = %cond.false.26, %cond.true.24
  %cond28 = phi %struct.face* [ %27, %cond.true.24 ], [ null, %cond.false.26 ]
  %background = getelementptr inbounds %struct.face, %struct.face* %cond28, i32 0, i32 5
  %28 = load i64, i64* %background, align 8
  %cmp29 = icmp ne i64 %28, -3
  %frombool31 = zext i1 %cmp29 to i8
  store i8 %frombool31, i8* %colored_spaces_p, align 1
  %29 = load i8, i8* %colored_spaces_p, align 1
  %tobool = trunc i8 %29 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.27
  store i8 1, i8* %write_spaces_p, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end.27
  %30 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %enabled_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %30, i32 0, i32 22
  %31 = bitcast i40* %enabled_p to i64*
  %bf.load32 = load i64, i64* %31, align 4
  %bf.lshr33 = lshr i64 %bf.load32, 10
  %bf.clear34 = and i64 %bf.lshr33, 1
  %bf.cast35 = trunc i64 %bf.clear34 to i1
  %lnot = xor i1 %bf.cast35, true
  %frombool36 = zext i1 %lnot to i8
  store i8 %frombool36, i8* %must_write_whole_line_p, align 1
  %32 = load i8, i8* %must_write_whole_line_p, align 1
  %tobool37 = trunc i8 %32 to i1
  br i1 %tobool37, label %if.then.38, label %if.else

if.then.38:                                       ; preds = %if.end
  store %struct.glyph* null, %struct.glyph** %obody, align 8
  store i32 0, i32* %olen, align 4
  br label %if.end.63

if.else:                                          ; preds = %if.end
  %33 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %rows39 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %33, i32 0, i32 1
  %34 = load %struct.glyph_row*, %struct.glyph_row** %rows39, align 8
  %35 = load i32, i32* %vpos.addr, align 4
  %idx.ext40 = sext i32 %35 to i64
  %add.ptr41 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %34, i64 %idx.ext40
  %glyphs = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr41, i32 0, i32 0
  %arrayidx42 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs, i32 0, i64 1
  %36 = load %struct.glyph*, %struct.glyph** %arrayidx42, align 8
  store %struct.glyph* %36, %struct.glyph** %obody, align 8
  %37 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %used43 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %37, i32 0, i32 1
  %arrayidx44 = getelementptr inbounds [4 x i16], [4 x i16]* %used43, i32 0, i64 1
  %38 = load i16, i16* %arrayidx44, align 2
  %conv45 = sext i16 %38 to i32
  store i32 %conv45, i32* %olen, align 4
  %39 = load i8, i8* %write_spaces_p, align 1
  %tobool46 = trunc i8 %39 to i1
  br i1 %tobool46, label %if.end.62, label %if.then.47

if.then.47:                                       ; preds = %if.else
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.47
  %40 = load i32, i32* %olen, align 4
  %cmp48 = icmp sgt i32 %40, 0
  br i1 %cmp48, label %land.rhs, label %land.end.61

land.rhs:                                         ; preds = %while.cond
  %41 = load i32, i32* %olen, align 4
  %sub = sub nsw i32 %41, 1
  %idxprom = sext i32 %sub to i64
  %42 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %arrayidx50 = getelementptr inbounds %struct.glyph, %struct.glyph* %42, i64 %idxprom
  %u = getelementptr inbounds %struct.glyph, %struct.glyph* %arrayidx50, i32 0, i32 9
  %ch = bitcast %union.anon.1* %u to i32*
  %43 = load i32, i32* %ch, align 4
  %cmp51 = icmp eq i32 %43, 32
  br i1 %cmp51, label %land.rhs.53, label %land.end

land.rhs.53:                                      ; preds = %land.rhs
  %44 = load i32, i32* %olen, align 4
  %sub54 = sub nsw i32 %44, 1
  %idxprom55 = sext i32 %sub54 to i64
  %45 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %arrayidx56 = getelementptr inbounds %struct.glyph, %struct.glyph* %45, i64 %idxprom55
  %face_id = getelementptr inbounds %struct.glyph, %struct.glyph* %arrayidx56, i32 0, i32 7
  %46 = bitcast i24* %face_id to i32*
  %bf.load57 = load i32, i32* %46, align 4
  %bf.clear58 = and i32 %bf.load57, 1048575
  %cmp59 = icmp eq i32 %bf.clear58, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs.53, %land.rhs
  %47 = phi i1 [ false, %land.rhs ], [ %cmp59, %land.rhs.53 ]
  br label %land.end.61

land.end.61:                                      ; preds = %land.end, %while.cond
  %48 = phi i1 [ false, %while.cond ], [ %47, %land.end ]
  br i1 %48, label %while.body, label %while.end

while.body:                                       ; preds = %land.end.61
  %49 = load i32, i32* %olen, align 4
  %dec = add nsw i32 %49, -1
  store i32 %dec, i32* %olen, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end.61
  br label %if.end.62

if.end.62:                                        ; preds = %while.end, %if.else
  br label %if.end.63

if.end.63:                                        ; preds = %if.end.62, %if.then.38
  %50 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %enabled_p64 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %50, i32 0, i32 22
  %51 = bitcast i40* %enabled_p64 to i64*
  %bf.load65 = load i64, i64* %51, align 4
  %bf.clear66 = and i64 %bf.load65, -1025
  %bf.set = or i64 %bf.clear66, 1024
  store i64 %bf.set, i64* %51, align 4
  %52 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %used67 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %52, i32 0, i32 1
  %arrayidx68 = getelementptr inbounds [4 x i16], [4 x i16]* %used67, i32 0, i64 1
  %53 = load i16, i16* %arrayidx68, align 2
  %54 = load %struct.glyph_row*, %struct.glyph_row** %current_row, align 8
  %used69 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %54, i32 0, i32 1
  %arrayidx70 = getelementptr inbounds [4 x i16], [4 x i16]* %used69, i32 0, i64 1
  store i16 %53, i16* %arrayidx70, align 2
  %55 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %enabled_p71 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %55, i32 0, i32 22
  %56 = bitcast i40* %enabled_p71 to i64*
  %bf.load72 = load i64, i64* %56, align 4
  %bf.lshr73 = lshr i64 %bf.load72, 10
  %bf.clear74 = and i64 %bf.lshr73, 1
  %bf.cast75 = trunc i64 %bf.clear74 to i1
  br i1 %bf.cast75, label %if.end.77, label %if.then.76

if.then.76:                                       ; preds = %if.end.63
  store i32 0, i32* %nlen, align 4
  br label %just_erase

if.end.77:                                        ; preds = %if.end.63
  %57 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %glyphs78 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %57, i32 0, i32 0
  %arrayidx79 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs78, i32 0, i64 1
  %58 = load %struct.glyph*, %struct.glyph** %arrayidx79, align 8
  store %struct.glyph* %58, %struct.glyph** %nbody, align 8
  %59 = load %struct.glyph_row*, %struct.glyph_row** %desired_row, align 8
  %used80 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %59, i32 0, i32 1
  %arrayidx81 = getelementptr inbounds [4 x i16], [4 x i16]* %used80, i32 0, i64 1
  %60 = load i16, i16* %arrayidx81, align 2
  %conv82 = sext i16 %60 to i32
  store i32 %conv82, i32* %nlen, align 4
  %61 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %62 = load i32, i32* %nlen, align 4
  %idx.ext83 = sext i32 %62 to i64
  %add.ptr84 = getelementptr inbounds %struct.glyph, %struct.glyph* %61, i64 %idx.ext83
  store %struct.glyph* %add.ptr84, %struct.glyph** %nend, align 8
  %63 = load i8, i8* %must_write_whole_line_p, align 1
  %tobool85 = trunc i8 %63 to i1
  br i1 %tobool85, label %if.then.86, label %if.end.124

if.then.86:                                       ; preds = %if.end.77
  %64 = load i8, i8* %write_spaces_p, align 1
  %tobool87 = trunc i8 %64 to i1
  br i1 %tobool87, label %if.end.114, label %if.then.88

if.then.88:                                       ; preds = %if.then.86
  br label %while.cond.89

while.cond.89:                                    ; preds = %while.body.111, %if.then.88
  %65 = load i32, i32* %nlen, align 4
  %cmp90 = icmp sgt i32 %65, 0
  br i1 %cmp90, label %land.rhs.92, label %land.end.110

land.rhs.92:                                      ; preds = %while.cond.89
  %66 = load i32, i32* %nlen, align 4
  %sub93 = sub nsw i32 %66, 1
  %idxprom94 = sext i32 %sub93 to i64
  %67 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %arrayidx95 = getelementptr inbounds %struct.glyph, %struct.glyph* %67, i64 %idxprom94
  %u96 = getelementptr inbounds %struct.glyph, %struct.glyph* %arrayidx95, i32 0, i32 9
  %ch97 = bitcast %union.anon.1* %u96 to i32*
  %68 = load i32, i32* %ch97, align 4
  %cmp98 = icmp eq i32 %68, 32
  br i1 %cmp98, label %land.rhs.100, label %land.end.109

land.rhs.100:                                     ; preds = %land.rhs.92
  %69 = load i32, i32* %nlen, align 4
  %sub101 = sub nsw i32 %69, 1
  %idxprom102 = sext i32 %sub101 to i64
  %70 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %arrayidx103 = getelementptr inbounds %struct.glyph, %struct.glyph* %70, i64 %idxprom102
  %face_id104 = getelementptr inbounds %struct.glyph, %struct.glyph* %arrayidx103, i32 0, i32 7
  %71 = bitcast i24* %face_id104 to i32*
  %bf.load105 = load i32, i32* %71, align 4
  %bf.clear106 = and i32 %bf.load105, 1048575
  %cmp107 = icmp eq i32 %bf.clear106, 0
  br label %land.end.109

land.end.109:                                     ; preds = %land.rhs.100, %land.rhs.92
  %72 = phi i1 [ false, %land.rhs.92 ], [ %cmp107, %land.rhs.100 ]
  br label %land.end.110

land.end.110:                                     ; preds = %land.end.109, %while.cond.89
  %73 = phi i1 [ false, %while.cond.89 ], [ %72, %land.end.109 ]
  br i1 %73, label %while.body.111, label %while.end.113

while.body.111:                                   ; preds = %land.end.110
  %74 = load i32, i32* %nlen, align 4
  %dec112 = add nsw i32 %74, -1
  store i32 %dec112, i32* %nlen, align 4
  br label %while.cond.89

while.end.113:                                    ; preds = %land.end.110
  br label %if.end.114

if.end.114:                                       ; preds = %while.end.113, %if.then.86
  %75 = load i32, i32* %nlen, align 4
  %tobool115 = icmp ne i32 %75, 0
  br i1 %tobool115, label %if.then.116, label %if.end.117

if.then.116:                                      ; preds = %if.end.114
  %76 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %77 = load i32, i32* %vpos.addr, align 4
  call void @cursor_to(%struct.frame* %76, i32 %77, i32 0)
  %78 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %79 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %80 = load i32, i32* %nlen, align 4
  call void @write_glyphs(%struct.frame* %78, %struct.glyph* %79, i32 %80)
  br label %if.end.117

if.end.117:                                       ; preds = %if.then.116, %if.end.114
  %81 = load i32, i32* %nlen, align 4
  %82 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %total_cols = getelementptr inbounds %struct.frame, %struct.frame* %82, i32 0, i32 38
  %83 = load i32, i32* %total_cols, align 4
  %cmp118 = icmp slt i32 %81, %83
  br i1 %cmp118, label %if.then.120, label %if.else.122

if.then.120:                                      ; preds = %if.end.117
  %84 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %85 = load i32, i32* %vpos.addr, align 4
  %86 = load i32, i32* %nlen, align 4
  call void @cursor_to(%struct.frame* %84, i32 %85, i32 %86)
  %87 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %88 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %total_cols121 = getelementptr inbounds %struct.frame, %struct.frame* %88, i32 0, i32 38
  %89 = load i32, i32* %total_cols121, align 4
  call void @clear_end_of_line(%struct.frame* %87, i32 %89)
  br label %if.end.123

if.else.122:                                      ; preds = %if.end.117
  %90 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %91 = load i32, i32* %vpos.addr, align 4
  call void @cursor_to(%struct.frame* %90, i32 %91, i32 0)
  br label %if.end.123

if.end.123:                                       ; preds = %if.else.122, %if.then.120
  %92 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %93 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %94 = load i32, i32* %vpos.addr, align 4
  call void @make_current(%struct.glyph_matrix* %92, %struct.glyph_matrix* %93, i32 %94)
  br label %return

if.end.124:                                       ; preds = %if.end.77
  %95 = load i8, i8* %write_spaces_p, align 1
  %tobool125 = trunc i8 %95 to i1
  br i1 %tobool125, label %if.end.152, label %if.then.126

if.then.126:                                      ; preds = %if.end.124
  br label %while.cond.127

while.cond.127:                                   ; preds = %while.body.149, %if.then.126
  %96 = load i32, i32* %nlen, align 4
  %cmp128 = icmp sgt i32 %96, 0
  br i1 %cmp128, label %land.rhs.130, label %land.end.148

land.rhs.130:                                     ; preds = %while.cond.127
  %97 = load i32, i32* %nlen, align 4
  %sub131 = sub nsw i32 %97, 1
  %idxprom132 = sext i32 %sub131 to i64
  %98 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %arrayidx133 = getelementptr inbounds %struct.glyph, %struct.glyph* %98, i64 %idxprom132
  %u134 = getelementptr inbounds %struct.glyph, %struct.glyph* %arrayidx133, i32 0, i32 9
  %ch135 = bitcast %union.anon.1* %u134 to i32*
  %99 = load i32, i32* %ch135, align 4
  %cmp136 = icmp eq i32 %99, 32
  br i1 %cmp136, label %land.rhs.138, label %land.end.147

land.rhs.138:                                     ; preds = %land.rhs.130
  %100 = load i32, i32* %nlen, align 4
  %sub139 = sub nsw i32 %100, 1
  %idxprom140 = sext i32 %sub139 to i64
  %101 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %arrayidx141 = getelementptr inbounds %struct.glyph, %struct.glyph* %101, i64 %idxprom140
  %face_id142 = getelementptr inbounds %struct.glyph, %struct.glyph* %arrayidx141, i32 0, i32 7
  %102 = bitcast i24* %face_id142 to i32*
  %bf.load143 = load i32, i32* %102, align 4
  %bf.clear144 = and i32 %bf.load143, 1048575
  %cmp145 = icmp eq i32 %bf.clear144, 0
  br label %land.end.147

land.end.147:                                     ; preds = %land.rhs.138, %land.rhs.130
  %103 = phi i1 [ false, %land.rhs.130 ], [ %cmp145, %land.rhs.138 ]
  br label %land.end.148

land.end.148:                                     ; preds = %land.end.147, %while.cond.127
  %104 = phi i1 [ false, %while.cond.127 ], [ %103, %land.end.147 ]
  br i1 %104, label %while.body.149, label %while.end.151

while.body.149:                                   ; preds = %land.end.148
  %105 = load i32, i32* %nlen, align 4
  %dec150 = add nsw i32 %105, -1
  store i32 %dec150, i32* %nlen, align 4
  br label %while.cond.127

while.end.151:                                    ; preds = %land.end.148
  br label %if.end.152

if.end.152:                                       ; preds = %while.end.151, %if.end.124
  %106 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method153 = getelementptr inbounds %struct.frame, %struct.frame* %106, i32 0, i32 26
  %107 = bitcast i48* %output_method153 to i64*
  %bf.load154 = load i64, i64* %107, align 8
  %bf.lshr155 = lshr i64 %bf.load154, 23
  %bf.clear156 = and i64 %bf.lshr155, 7
  %bf.cast157 = trunc i64 %bf.clear156 to i32
  %cmp158 = icmp eq i32 %bf.cast157, 1
  br i1 %cmp158, label %cond.true.168, label %lor.lhs.false.160

lor.lhs.false.160:                                ; preds = %if.end.152
  %108 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method161 = getelementptr inbounds %struct.frame, %struct.frame* %108, i32 0, i32 26
  %109 = bitcast i48* %output_method161 to i64*
  %bf.load162 = load i64, i64* %109, align 8
  %bf.lshr163 = lshr i64 %bf.load162, 23
  %bf.clear164 = and i64 %bf.lshr163, 7
  %bf.cast165 = trunc i64 %bf.clear164 to i32
  %cmp166 = icmp eq i32 %bf.cast165, 3
  br i1 %cmp166, label %cond.true.168, label %cond.false.172

cond.true.168:                                    ; preds = %lor.lhs.false.160, %if.end.152
  %110 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal169 = getelementptr inbounds %struct.frame, %struct.frame* %110, i32 0, i32 61
  %111 = load %struct.terminal*, %struct.terminal** %terminal169, align 8
  %display_info170 = getelementptr inbounds %struct.terminal, %struct.terminal* %111, i32 0, i32 12
  %tty171 = bitcast %union.display_info* %display_info170 to %struct.tty_display_info**
  %112 = load %struct.tty_display_info*, %struct.tty_display_info** %tty171, align 8
  br label %cond.end.173

cond.false.172:                                   ; preds = %lor.lhs.false.160
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.173

cond.end.173:                                     ; preds = %113, %cond.true.168
  %cond174 = phi %struct.tty_display_info* [ %112, %cond.true.168 ], [ null, %113 ]
  %char_ins_del_ok = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond174, i32 0, i32 75
  %bf.load175 = load i8, i8* %char_ins_del_ok, align 4
  %bf.lshr176 = lshr i8 %bf.load175, 5
  %bf.clear177 = and i8 %bf.lshr176, 1
  %bf.cast178 = trunc i8 %bf.clear177 to i1
  br i1 %bf.cast178, label %if.end.636, label %if.then.179

if.then.179:                                      ; preds = %cond.end.173
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.179
  %114 = load i32, i32* %i, align 4
  %115 = load i32, i32* %nlen, align 4
  %cmp180 = icmp slt i32 %114, %115
  br i1 %cmp180, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %116 = load i32, i32* %i, align 4
  %117 = load i32, i32* %olen, align 4
  %cmp182 = icmp sge i32 %116, %117
  br i1 %cmp182, label %if.then.390, label %lor.lhs.false.184

lor.lhs.false.184:                                ; preds = %for.body
  %118 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %119 = load i32, i32* %i, align 4
  %idx.ext185 = sext i32 %119 to i64
  %add.ptr186 = getelementptr inbounds %struct.glyph, %struct.glyph* %118, i64 %idx.ext185
  %type = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr186, i32 0, i32 6
  %120 = bitcast i24* %type to i32*
  %bf.load187 = load i32, i32* %120, align 8
  %bf.clear188 = and i32 %bf.load187, 7
  %121 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %122 = load i32, i32* %i, align 4
  %idx.ext189 = sext i32 %122 to i64
  %add.ptr190 = getelementptr inbounds %struct.glyph, %struct.glyph* %121, i64 %idx.ext189
  %type191 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr190, i32 0, i32 6
  %123 = bitcast i24* %type191 to i32*
  %bf.load192 = load i32, i32* %123, align 8
  %bf.clear193 = and i32 %bf.load192, 7
  %cmp194 = icmp eq i32 %bf.clear188, %bf.clear193
  br i1 %cmp194, label %land.lhs.true, label %if.then.390

land.lhs.true:                                    ; preds = %lor.lhs.false.184
  %124 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %125 = load i32, i32* %i, align 4
  %idx.ext196 = sext i32 %125 to i64
  %add.ptr197 = getelementptr inbounds %struct.glyph, %struct.glyph* %124, i64 %idx.ext196
  %u198 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr197, i32 0, i32 9
  %val = bitcast %union.anon.1* %u198 to i32*
  %126 = load i32, i32* %val, align 4
  %127 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %128 = load i32, i32* %i, align 4
  %idx.ext199 = sext i32 %128 to i64
  %add.ptr200 = getelementptr inbounds %struct.glyph, %struct.glyph* %127, i64 %idx.ext199
  %u201 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr200, i32 0, i32 9
  %val202 = bitcast %union.anon.1* %u201 to i32*
  %129 = load i32, i32* %val202, align 4
  %cmp203 = icmp eq i32 %126, %129
  br i1 %cmp203, label %land.lhs.true.205, label %if.then.390

land.lhs.true.205:                                ; preds = %land.lhs.true
  %130 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %131 = load i32, i32* %i, align 4
  %idx.ext206 = sext i32 %131 to i64
  %add.ptr207 = getelementptr inbounds %struct.glyph, %struct.glyph* %130, i64 %idx.ext206
  %type208 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr207, i32 0, i32 6
  %132 = bitcast i24* %type208 to i32*
  %bf.load209 = load i32, i32* %132, align 8
  %bf.clear210 = and i32 %bf.load209, 7
  %cmp211 = icmp eq i32 %bf.clear210, 3
  br i1 %cmp211, label %cond.true.213, label %cond.false.283

cond.true.213:                                    ; preds = %land.lhs.true.205
  %133 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %134 = load i32, i32* %i, align 4
  %idx.ext214 = sext i32 %134 to i64
  %add.ptr215 = getelementptr inbounds %struct.glyph, %struct.glyph* %133, i64 %idx.ext214
  %slice = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr215, i32 0, i32 8
  %img = bitcast %union.anon* %slice to %struct.glyph_slice*
  %135 = bitcast %struct.glyph_slice* %img to i64*
  %bf.load216 = load i64, i64* %135, align 4
  %bf.clear217 = and i64 %bf.load216, 65535
  %bf.cast218 = trunc i64 %bf.clear217 to i32
  %136 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %137 = load i32, i32* %i, align 4
  %idx.ext219 = sext i32 %137 to i64
  %add.ptr220 = getelementptr inbounds %struct.glyph, %struct.glyph* %136, i64 %idx.ext219
  %slice221 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr220, i32 0, i32 8
  %img222 = bitcast %union.anon* %slice221 to %struct.glyph_slice*
  %138 = bitcast %struct.glyph_slice* %img222 to i64*
  %bf.load223 = load i64, i64* %138, align 4
  %bf.clear224 = and i64 %bf.load223, 65535
  %bf.cast225 = trunc i64 %bf.clear224 to i32
  %cmp226 = icmp eq i32 %bf.cast218, %bf.cast225
  br i1 %cmp226, label %land.lhs.true.228, label %if.then.390

land.lhs.true.228:                                ; preds = %cond.true.213
  %139 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %140 = load i32, i32* %i, align 4
  %idx.ext229 = sext i32 %140 to i64
  %add.ptr230 = getelementptr inbounds %struct.glyph, %struct.glyph* %139, i64 %idx.ext229
  %slice231 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr230, i32 0, i32 8
  %img232 = bitcast %union.anon* %slice231 to %struct.glyph_slice*
  %141 = bitcast %struct.glyph_slice* %img232 to i64*
  %bf.load233 = load i64, i64* %141, align 4
  %bf.lshr234 = lshr i64 %bf.load233, 16
  %bf.clear235 = and i64 %bf.lshr234, 65535
  %bf.cast236 = trunc i64 %bf.clear235 to i32
  %142 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %143 = load i32, i32* %i, align 4
  %idx.ext237 = sext i32 %143 to i64
  %add.ptr238 = getelementptr inbounds %struct.glyph, %struct.glyph* %142, i64 %idx.ext237
  %slice239 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr238, i32 0, i32 8
  %img240 = bitcast %union.anon* %slice239 to %struct.glyph_slice*
  %144 = bitcast %struct.glyph_slice* %img240 to i64*
  %bf.load241 = load i64, i64* %144, align 4
  %bf.lshr242 = lshr i64 %bf.load241, 16
  %bf.clear243 = and i64 %bf.lshr242, 65535
  %bf.cast244 = trunc i64 %bf.clear243 to i32
  %cmp245 = icmp eq i32 %bf.cast236, %bf.cast244
  br i1 %cmp245, label %land.lhs.true.247, label %if.then.390

land.lhs.true.247:                                ; preds = %land.lhs.true.228
  %145 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %146 = load i32, i32* %i, align 4
  %idx.ext248 = sext i32 %146 to i64
  %add.ptr249 = getelementptr inbounds %struct.glyph, %struct.glyph* %145, i64 %idx.ext248
  %slice250 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr249, i32 0, i32 8
  %img251 = bitcast %union.anon* %slice250 to %struct.glyph_slice*
  %147 = bitcast %struct.glyph_slice* %img251 to i64*
  %bf.load252 = load i64, i64* %147, align 4
  %bf.lshr253 = lshr i64 %bf.load252, 32
  %bf.clear254 = and i64 %bf.lshr253, 65535
  %bf.cast255 = trunc i64 %bf.clear254 to i32
  %148 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %149 = load i32, i32* %i, align 4
  %idx.ext256 = sext i32 %149 to i64
  %add.ptr257 = getelementptr inbounds %struct.glyph, %struct.glyph* %148, i64 %idx.ext256
  %slice258 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr257, i32 0, i32 8
  %img259 = bitcast %union.anon* %slice258 to %struct.glyph_slice*
  %150 = bitcast %struct.glyph_slice* %img259 to i64*
  %bf.load260 = load i64, i64* %150, align 4
  %bf.lshr261 = lshr i64 %bf.load260, 32
  %bf.clear262 = and i64 %bf.lshr261, 65535
  %bf.cast263 = trunc i64 %bf.clear262 to i32
  %cmp264 = icmp eq i32 %bf.cast255, %bf.cast263
  br i1 %cmp264, label %land.lhs.true.266, label %if.then.390

land.lhs.true.266:                                ; preds = %land.lhs.true.247
  %151 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %152 = load i32, i32* %i, align 4
  %idx.ext267 = sext i32 %152 to i64
  %add.ptr268 = getelementptr inbounds %struct.glyph, %struct.glyph* %151, i64 %idx.ext267
  %slice269 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr268, i32 0, i32 8
  %img270 = bitcast %union.anon* %slice269 to %struct.glyph_slice*
  %153 = bitcast %struct.glyph_slice* %img270 to i64*
  %bf.load271 = load i64, i64* %153, align 4
  %bf.lshr272 = lshr i64 %bf.load271, 48
  %bf.cast273 = trunc i64 %bf.lshr272 to i32
  %154 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %155 = load i32, i32* %i, align 4
  %idx.ext274 = sext i32 %155 to i64
  %add.ptr275 = getelementptr inbounds %struct.glyph, %struct.glyph* %154, i64 %idx.ext274
  %slice276 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr275, i32 0, i32 8
  %img277 = bitcast %union.anon* %slice276 to %struct.glyph_slice*
  %156 = bitcast %struct.glyph_slice* %img277 to i64*
  %bf.load278 = load i64, i64* %156, align 4
  %bf.lshr279 = lshr i64 %bf.load278, 48
  %bf.cast280 = trunc i64 %bf.lshr279 to i32
  %cmp281 = icmp eq i32 %bf.cast273, %bf.cast280
  br i1 %cmp281, label %land.lhs.true.303, label %if.then.390

cond.false.283:                                   ; preds = %land.lhs.true.205
  %157 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %158 = load i32, i32* %i, align 4
  %idx.ext284 = sext i32 %158 to i64
  %add.ptr285 = getelementptr inbounds %struct.glyph, %struct.glyph* %157, i64 %idx.ext284
  %type286 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr285, i32 0, i32 6
  %159 = bitcast i24* %type286 to i32*
  %bf.load287 = load i32, i32* %159, align 8
  %bf.clear288 = and i32 %bf.load287, 7
  %cmp289 = icmp ne i32 %bf.clear288, 1
  br i1 %cmp289, label %land.lhs.true.303, label %lor.lhs.false.291

lor.lhs.false.291:                                ; preds = %cond.false.283
  %160 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %161 = load i32, i32* %i, align 4
  %idx.ext292 = sext i32 %161 to i64
  %add.ptr293 = getelementptr inbounds %struct.glyph, %struct.glyph* %160, i64 %idx.ext292
  %slice294 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr293, i32 0, i32 8
  %cmp295 = bitcast %union.anon* %slice294 to %struct.anon*
  %from = getelementptr inbounds %struct.anon, %struct.anon* %cmp295, i32 0, i32 0
  %162 = load i32, i32* %from, align 4
  %163 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %164 = load i32, i32* %i, align 4
  %idx.ext296 = sext i32 %164 to i64
  %add.ptr297 = getelementptr inbounds %struct.glyph, %struct.glyph* %163, i64 %idx.ext296
  %slice298 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr297, i32 0, i32 8
  %cmp299 = bitcast %union.anon* %slice298 to %struct.anon*
  %from300 = getelementptr inbounds %struct.anon, %struct.anon* %cmp299, i32 0, i32 0
  %165 = load i32, i32* %from300, align 4
  %cmp301 = icmp eq i32 %162, %165
  br i1 %cmp301, label %land.lhs.true.303, label %if.then.390

land.lhs.true.303:                                ; preds = %lor.lhs.false.291, %cond.false.283, %land.lhs.true.266
  %166 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %167 = load i32, i32* %i, align 4
  %idx.ext304 = sext i32 %167 to i64
  %add.ptr305 = getelementptr inbounds %struct.glyph, %struct.glyph* %166, i64 %idx.ext304
  %face_id306 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr305, i32 0, i32 7
  %168 = bitcast i24* %face_id306 to i32*
  %bf.load307 = load i32, i32* %168, align 4
  %bf.clear308 = and i32 %bf.load307, 1048575
  %169 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %170 = load i32, i32* %i, align 4
  %idx.ext309 = sext i32 %170 to i64
  %add.ptr310 = getelementptr inbounds %struct.glyph, %struct.glyph* %169, i64 %idx.ext309
  %face_id311 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr310, i32 0, i32 7
  %171 = bitcast i24* %face_id311 to i32*
  %bf.load312 = load i32, i32* %171, align 4
  %bf.clear313 = and i32 %bf.load312, 1048575
  %cmp314 = icmp eq i32 %bf.clear308, %bf.clear313
  br i1 %cmp314, label %land.lhs.true.316, label %if.then.390

land.lhs.true.316:                                ; preds = %land.lhs.true.303
  %172 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %173 = load i32, i32* %i, align 4
  %idx.ext317 = sext i32 %173 to i64
  %add.ptr318 = getelementptr inbounds %struct.glyph, %struct.glyph* %172, i64 %idx.ext317
  %padding_p = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr318, i32 0, i32 6
  %174 = bitcast i24* %padding_p to i32*
  %bf.load319 = load i32, i32* %174, align 8
  %bf.lshr320 = lshr i32 %bf.load319, 7
  %bf.clear321 = and i32 %bf.lshr320, 1
  %bf.cast322 = trunc i32 %bf.clear321 to i1
  %conv323 = zext i1 %bf.cast322 to i32
  %175 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %176 = load i32, i32* %i, align 4
  %idx.ext324 = sext i32 %176 to i64
  %add.ptr325 = getelementptr inbounds %struct.glyph, %struct.glyph* %175, i64 %idx.ext324
  %padding_p326 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr325, i32 0, i32 6
  %177 = bitcast i24* %padding_p326 to i32*
  %bf.load327 = load i32, i32* %177, align 8
  %bf.lshr328 = lshr i32 %bf.load327, 7
  %bf.clear329 = and i32 %bf.lshr328, 1
  %bf.cast330 = trunc i32 %bf.clear329 to i1
  %conv331 = zext i1 %bf.cast330 to i32
  %cmp332 = icmp eq i32 %conv323, %conv331
  br i1 %cmp332, label %land.lhs.true.334, label %if.then.390

land.lhs.true.334:                                ; preds = %land.lhs.true.316
  %178 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %179 = load i32, i32* %i, align 4
  %idx.ext335 = sext i32 %179 to i64
  %add.ptr336 = getelementptr inbounds %struct.glyph, %struct.glyph* %178, i64 %idx.ext335
  %left_box_line_p = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr336, i32 0, i32 6
  %180 = bitcast i24* %left_box_line_p to i32*
  %bf.load337 = load i32, i32* %180, align 8
  %bf.lshr338 = lshr i32 %bf.load337, 4
  %bf.clear339 = and i32 %bf.lshr338, 1
  %bf.cast340 = trunc i32 %bf.clear339 to i1
  %conv341 = zext i1 %bf.cast340 to i32
  %181 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %182 = load i32, i32* %i, align 4
  %idx.ext342 = sext i32 %182 to i64
  %add.ptr343 = getelementptr inbounds %struct.glyph, %struct.glyph* %181, i64 %idx.ext342
  %left_box_line_p344 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr343, i32 0, i32 6
  %183 = bitcast i24* %left_box_line_p344 to i32*
  %bf.load345 = load i32, i32* %183, align 8
  %bf.lshr346 = lshr i32 %bf.load345, 4
  %bf.clear347 = and i32 %bf.lshr346, 1
  %bf.cast348 = trunc i32 %bf.clear347 to i1
  %conv349 = zext i1 %bf.cast348 to i32
  %cmp350 = icmp eq i32 %conv341, %conv349
  br i1 %cmp350, label %land.lhs.true.352, label %if.then.390

land.lhs.true.352:                                ; preds = %land.lhs.true.334
  %184 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %185 = load i32, i32* %i, align 4
  %idx.ext353 = sext i32 %185 to i64
  %add.ptr354 = getelementptr inbounds %struct.glyph, %struct.glyph* %184, i64 %idx.ext353
  %right_box_line_p = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr354, i32 0, i32 6
  %186 = bitcast i24* %right_box_line_p to i32*
  %bf.load355 = load i32, i32* %186, align 8
  %bf.lshr356 = lshr i32 %bf.load355, 5
  %bf.clear357 = and i32 %bf.lshr356, 1
  %bf.cast358 = trunc i32 %bf.clear357 to i1
  %conv359 = zext i1 %bf.cast358 to i32
  %187 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %188 = load i32, i32* %i, align 4
  %idx.ext360 = sext i32 %188 to i64
  %add.ptr361 = getelementptr inbounds %struct.glyph, %struct.glyph* %187, i64 %idx.ext360
  %right_box_line_p362 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr361, i32 0, i32 6
  %189 = bitcast i24* %right_box_line_p362 to i32*
  %bf.load363 = load i32, i32* %189, align 8
  %bf.lshr364 = lshr i32 %bf.load363, 5
  %bf.clear365 = and i32 %bf.lshr364, 1
  %bf.cast366 = trunc i32 %bf.clear365 to i1
  %conv367 = zext i1 %bf.cast366 to i32
  %cmp368 = icmp eq i32 %conv359, %conv367
  br i1 %cmp368, label %land.lhs.true.370, label %if.then.390

land.lhs.true.370:                                ; preds = %land.lhs.true.352
  %190 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %191 = load i32, i32* %i, align 4
  %idx.ext371 = sext i32 %191 to i64
  %add.ptr372 = getelementptr inbounds %struct.glyph, %struct.glyph* %190, i64 %idx.ext371
  %voffset = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr372, i32 0, i32 5
  %192 = load i16, i16* %voffset, align 2
  %conv373 = sext i16 %192 to i32
  %193 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %194 = load i32, i32* %i, align 4
  %idx.ext374 = sext i32 %194 to i64
  %add.ptr375 = getelementptr inbounds %struct.glyph, %struct.glyph* %193, i64 %idx.ext374
  %voffset376 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr375, i32 0, i32 5
  %195 = load i16, i16* %voffset376, align 2
  %conv377 = sext i16 %195 to i32
  %cmp378 = icmp eq i32 %conv373, %conv377
  br i1 %cmp378, label %land.lhs.true.380, label %if.then.390

land.lhs.true.380:                                ; preds = %land.lhs.true.370
  %196 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %197 = load i32, i32* %i, align 4
  %idx.ext381 = sext i32 %197 to i64
  %add.ptr382 = getelementptr inbounds %struct.glyph, %struct.glyph* %196, i64 %idx.ext381
  %pixel_width = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr382, i32 0, i32 2
  %198 = load i16, i16* %pixel_width, align 2
  %conv383 = sext i16 %198 to i32
  %199 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %200 = load i32, i32* %i, align 4
  %idx.ext384 = sext i32 %200 to i64
  %add.ptr385 = getelementptr inbounds %struct.glyph, %struct.glyph* %199, i64 %idx.ext384
  %pixel_width386 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr385, i32 0, i32 2
  %201 = load i16, i16* %pixel_width386, align 2
  %conv387 = sext i16 %201 to i32
  %cmp388 = icmp eq i32 %conv383, %conv387
  br i1 %cmp388, label %if.end.630, label %if.then.390

if.then.390:                                      ; preds = %land.lhs.true.380, %land.lhs.true.370, %land.lhs.true.352, %land.lhs.true.334, %land.lhs.true.316, %land.lhs.true.303, %lor.lhs.false.291, %land.lhs.true.266, %land.lhs.true.247, %land.lhs.true.228, %cond.true.213, %land.lhs.true, %lor.lhs.false.184, %for.body
  %202 = load i32, i32* %i, align 4
  %add391 = add nsw i32 %202, 1
  store i32 %add391, i32* %j, align 4
  br label %while.cond.392

while.cond.392:                                   ; preds = %while.body.624, %if.then.390
  %203 = load i32, i32* %j, align 4
  %204 = load i32, i32* %nlen, align 4
  %cmp393 = icmp slt i32 %203, %204
  br i1 %cmp393, label %land.rhs.395, label %land.end.623

land.rhs.395:                                     ; preds = %while.cond.392
  %205 = load i32, i32* %j, align 4
  %206 = load i32, i32* %olen, align 4
  %cmp396 = icmp sge i32 %205, %206
  br i1 %cmp396, label %lor.end, label %lor.lhs.false.398

lor.lhs.false.398:                                ; preds = %land.rhs.395
  %207 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %208 = load i32, i32* %j, align 4
  %idx.ext399 = sext i32 %208 to i64
  %add.ptr400 = getelementptr inbounds %struct.glyph, %struct.glyph* %207, i64 %idx.ext399
  %type401 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr400, i32 0, i32 6
  %209 = bitcast i24* %type401 to i32*
  %bf.load402 = load i32, i32* %209, align 8
  %bf.clear403 = and i32 %bf.load402, 7
  %210 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %211 = load i32, i32* %j, align 4
  %idx.ext404 = sext i32 %211 to i64
  %add.ptr405 = getelementptr inbounds %struct.glyph, %struct.glyph* %210, i64 %idx.ext404
  %type406 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr405, i32 0, i32 6
  %212 = bitcast i24* %type406 to i32*
  %bf.load407 = load i32, i32* %212, align 8
  %bf.clear408 = and i32 %bf.load407, 7
  %cmp409 = icmp eq i32 %bf.clear403, %bf.clear408
  br i1 %cmp409, label %land.lhs.true.411, label %lor.end

land.lhs.true.411:                                ; preds = %lor.lhs.false.398
  %213 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %214 = load i32, i32* %j, align 4
  %idx.ext412 = sext i32 %214 to i64
  %add.ptr413 = getelementptr inbounds %struct.glyph, %struct.glyph* %213, i64 %idx.ext412
  %u414 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr413, i32 0, i32 9
  %val415 = bitcast %union.anon.1* %u414 to i32*
  %215 = load i32, i32* %val415, align 4
  %216 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %217 = load i32, i32* %j, align 4
  %idx.ext416 = sext i32 %217 to i64
  %add.ptr417 = getelementptr inbounds %struct.glyph, %struct.glyph* %216, i64 %idx.ext416
  %u418 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr417, i32 0, i32 9
  %val419 = bitcast %union.anon.1* %u418 to i32*
  %218 = load i32, i32* %val419, align 4
  %cmp420 = icmp eq i32 %215, %218
  br i1 %cmp420, label %land.lhs.true.422, label %lor.end

land.lhs.true.422:                                ; preds = %land.lhs.true.411
  %219 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %220 = load i32, i32* %j, align 4
  %idx.ext423 = sext i32 %220 to i64
  %add.ptr424 = getelementptr inbounds %struct.glyph, %struct.glyph* %219, i64 %idx.ext423
  %type425 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr424, i32 0, i32 6
  %221 = bitcast i24* %type425 to i32*
  %bf.load426 = load i32, i32* %221, align 8
  %bf.clear427 = and i32 %bf.load426, 7
  %cmp428 = icmp eq i32 %bf.clear427, 3
  br i1 %cmp428, label %cond.true.430, label %cond.false.502

cond.true.430:                                    ; preds = %land.lhs.true.422
  %222 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %223 = load i32, i32* %j, align 4
  %idx.ext431 = sext i32 %223 to i64
  %add.ptr432 = getelementptr inbounds %struct.glyph, %struct.glyph* %222, i64 %idx.ext431
  %slice433 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr432, i32 0, i32 8
  %img434 = bitcast %union.anon* %slice433 to %struct.glyph_slice*
  %224 = bitcast %struct.glyph_slice* %img434 to i64*
  %bf.load435 = load i64, i64* %224, align 4
  %bf.clear436 = and i64 %bf.load435, 65535
  %bf.cast437 = trunc i64 %bf.clear436 to i32
  %225 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %226 = load i32, i32* %j, align 4
  %idx.ext438 = sext i32 %226 to i64
  %add.ptr439 = getelementptr inbounds %struct.glyph, %struct.glyph* %225, i64 %idx.ext438
  %slice440 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr439, i32 0, i32 8
  %img441 = bitcast %union.anon* %slice440 to %struct.glyph_slice*
  %227 = bitcast %struct.glyph_slice* %img441 to i64*
  %bf.load442 = load i64, i64* %227, align 4
  %bf.clear443 = and i64 %bf.load442, 65535
  %bf.cast444 = trunc i64 %bf.clear443 to i32
  %cmp445 = icmp eq i32 %bf.cast437, %bf.cast444
  br i1 %cmp445, label %land.lhs.true.447, label %lor.end

land.lhs.true.447:                                ; preds = %cond.true.430
  %228 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %229 = load i32, i32* %j, align 4
  %idx.ext448 = sext i32 %229 to i64
  %add.ptr449 = getelementptr inbounds %struct.glyph, %struct.glyph* %228, i64 %idx.ext448
  %slice450 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr449, i32 0, i32 8
  %img451 = bitcast %union.anon* %slice450 to %struct.glyph_slice*
  %230 = bitcast %struct.glyph_slice* %img451 to i64*
  %bf.load452 = load i64, i64* %230, align 4
  %bf.lshr453 = lshr i64 %bf.load452, 16
  %bf.clear454 = and i64 %bf.lshr453, 65535
  %bf.cast455 = trunc i64 %bf.clear454 to i32
  %231 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %232 = load i32, i32* %j, align 4
  %idx.ext456 = sext i32 %232 to i64
  %add.ptr457 = getelementptr inbounds %struct.glyph, %struct.glyph* %231, i64 %idx.ext456
  %slice458 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr457, i32 0, i32 8
  %img459 = bitcast %union.anon* %slice458 to %struct.glyph_slice*
  %233 = bitcast %struct.glyph_slice* %img459 to i64*
  %bf.load460 = load i64, i64* %233, align 4
  %bf.lshr461 = lshr i64 %bf.load460, 16
  %bf.clear462 = and i64 %bf.lshr461, 65535
  %bf.cast463 = trunc i64 %bf.clear462 to i32
  %cmp464 = icmp eq i32 %bf.cast455, %bf.cast463
  br i1 %cmp464, label %land.lhs.true.466, label %lor.end

land.lhs.true.466:                                ; preds = %land.lhs.true.447
  %234 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %235 = load i32, i32* %j, align 4
  %idx.ext467 = sext i32 %235 to i64
  %add.ptr468 = getelementptr inbounds %struct.glyph, %struct.glyph* %234, i64 %idx.ext467
  %slice469 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr468, i32 0, i32 8
  %img470 = bitcast %union.anon* %slice469 to %struct.glyph_slice*
  %236 = bitcast %struct.glyph_slice* %img470 to i64*
  %bf.load471 = load i64, i64* %236, align 4
  %bf.lshr472 = lshr i64 %bf.load471, 32
  %bf.clear473 = and i64 %bf.lshr472, 65535
  %bf.cast474 = trunc i64 %bf.clear473 to i32
  %237 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %238 = load i32, i32* %j, align 4
  %idx.ext475 = sext i32 %238 to i64
  %add.ptr476 = getelementptr inbounds %struct.glyph, %struct.glyph* %237, i64 %idx.ext475
  %slice477 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr476, i32 0, i32 8
  %img478 = bitcast %union.anon* %slice477 to %struct.glyph_slice*
  %239 = bitcast %struct.glyph_slice* %img478 to i64*
  %bf.load479 = load i64, i64* %239, align 4
  %bf.lshr480 = lshr i64 %bf.load479, 32
  %bf.clear481 = and i64 %bf.lshr480, 65535
  %bf.cast482 = trunc i64 %bf.clear481 to i32
  %cmp483 = icmp eq i32 %bf.cast474, %bf.cast482
  br i1 %cmp483, label %land.lhs.true.485, label %lor.end

land.lhs.true.485:                                ; preds = %land.lhs.true.466
  %240 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %241 = load i32, i32* %j, align 4
  %idx.ext486 = sext i32 %241 to i64
  %add.ptr487 = getelementptr inbounds %struct.glyph, %struct.glyph* %240, i64 %idx.ext486
  %slice488 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr487, i32 0, i32 8
  %img489 = bitcast %union.anon* %slice488 to %struct.glyph_slice*
  %242 = bitcast %struct.glyph_slice* %img489 to i64*
  %bf.load490 = load i64, i64* %242, align 4
  %bf.lshr491 = lshr i64 %bf.load490, 48
  %bf.cast492 = trunc i64 %bf.lshr491 to i32
  %243 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %244 = load i32, i32* %j, align 4
  %idx.ext493 = sext i32 %244 to i64
  %add.ptr494 = getelementptr inbounds %struct.glyph, %struct.glyph* %243, i64 %idx.ext493
  %slice495 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr494, i32 0, i32 8
  %img496 = bitcast %union.anon* %slice495 to %struct.glyph_slice*
  %245 = bitcast %struct.glyph_slice* %img496 to i64*
  %bf.load497 = load i64, i64* %245, align 4
  %bf.lshr498 = lshr i64 %bf.load497, 48
  %bf.cast499 = trunc i64 %bf.lshr498 to i32
  %cmp500 = icmp eq i32 %bf.cast492, %bf.cast499
  br i1 %cmp500, label %land.lhs.true.523, label %lor.end

cond.false.502:                                   ; preds = %land.lhs.true.422
  %246 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %247 = load i32, i32* %j, align 4
  %idx.ext503 = sext i32 %247 to i64
  %add.ptr504 = getelementptr inbounds %struct.glyph, %struct.glyph* %246, i64 %idx.ext503
  %type505 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr504, i32 0, i32 6
  %248 = bitcast i24* %type505 to i32*
  %bf.load506 = load i32, i32* %248, align 8
  %bf.clear507 = and i32 %bf.load506, 7
  %cmp508 = icmp ne i32 %bf.clear507, 1
  br i1 %cmp508, label %land.lhs.true.523, label %lor.lhs.false.510

lor.lhs.false.510:                                ; preds = %cond.false.502
  %249 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %250 = load i32, i32* %j, align 4
  %idx.ext511 = sext i32 %250 to i64
  %add.ptr512 = getelementptr inbounds %struct.glyph, %struct.glyph* %249, i64 %idx.ext511
  %slice513 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr512, i32 0, i32 8
  %cmp514 = bitcast %union.anon* %slice513 to %struct.anon*
  %from515 = getelementptr inbounds %struct.anon, %struct.anon* %cmp514, i32 0, i32 0
  %251 = load i32, i32* %from515, align 4
  %252 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %253 = load i32, i32* %j, align 4
  %idx.ext516 = sext i32 %253 to i64
  %add.ptr517 = getelementptr inbounds %struct.glyph, %struct.glyph* %252, i64 %idx.ext516
  %slice518 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr517, i32 0, i32 8
  %cmp519 = bitcast %union.anon* %slice518 to %struct.anon*
  %from520 = getelementptr inbounds %struct.anon, %struct.anon* %cmp519, i32 0, i32 0
  %254 = load i32, i32* %from520, align 4
  %cmp521 = icmp eq i32 %251, %254
  br i1 %cmp521, label %land.lhs.true.523, label %lor.end

land.lhs.true.523:                                ; preds = %lor.lhs.false.510, %cond.false.502, %land.lhs.true.485
  %255 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %256 = load i32, i32* %j, align 4
  %idx.ext524 = sext i32 %256 to i64
  %add.ptr525 = getelementptr inbounds %struct.glyph, %struct.glyph* %255, i64 %idx.ext524
  %face_id526 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr525, i32 0, i32 7
  %257 = bitcast i24* %face_id526 to i32*
  %bf.load527 = load i32, i32* %257, align 4
  %bf.clear528 = and i32 %bf.load527, 1048575
  %258 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %259 = load i32, i32* %j, align 4
  %idx.ext529 = sext i32 %259 to i64
  %add.ptr530 = getelementptr inbounds %struct.glyph, %struct.glyph* %258, i64 %idx.ext529
  %face_id531 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr530, i32 0, i32 7
  %260 = bitcast i24* %face_id531 to i32*
  %bf.load532 = load i32, i32* %260, align 4
  %bf.clear533 = and i32 %bf.load532, 1048575
  %cmp534 = icmp eq i32 %bf.clear528, %bf.clear533
  br i1 %cmp534, label %land.lhs.true.536, label %lor.end

land.lhs.true.536:                                ; preds = %land.lhs.true.523
  %261 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %262 = load i32, i32* %j, align 4
  %idx.ext537 = sext i32 %262 to i64
  %add.ptr538 = getelementptr inbounds %struct.glyph, %struct.glyph* %261, i64 %idx.ext537
  %padding_p539 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr538, i32 0, i32 6
  %263 = bitcast i24* %padding_p539 to i32*
  %bf.load540 = load i32, i32* %263, align 8
  %bf.lshr541 = lshr i32 %bf.load540, 7
  %bf.clear542 = and i32 %bf.lshr541, 1
  %bf.cast543 = trunc i32 %bf.clear542 to i1
  %conv544 = zext i1 %bf.cast543 to i32
  %264 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %265 = load i32, i32* %j, align 4
  %idx.ext545 = sext i32 %265 to i64
  %add.ptr546 = getelementptr inbounds %struct.glyph, %struct.glyph* %264, i64 %idx.ext545
  %padding_p547 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr546, i32 0, i32 6
  %266 = bitcast i24* %padding_p547 to i32*
  %bf.load548 = load i32, i32* %266, align 8
  %bf.lshr549 = lshr i32 %bf.load548, 7
  %bf.clear550 = and i32 %bf.lshr549, 1
  %bf.cast551 = trunc i32 %bf.clear550 to i1
  %conv552 = zext i1 %bf.cast551 to i32
  %cmp553 = icmp eq i32 %conv544, %conv552
  br i1 %cmp553, label %land.lhs.true.555, label %lor.end

land.lhs.true.555:                                ; preds = %land.lhs.true.536
  %267 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %268 = load i32, i32* %j, align 4
  %idx.ext556 = sext i32 %268 to i64
  %add.ptr557 = getelementptr inbounds %struct.glyph, %struct.glyph* %267, i64 %idx.ext556
  %left_box_line_p558 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr557, i32 0, i32 6
  %269 = bitcast i24* %left_box_line_p558 to i32*
  %bf.load559 = load i32, i32* %269, align 8
  %bf.lshr560 = lshr i32 %bf.load559, 4
  %bf.clear561 = and i32 %bf.lshr560, 1
  %bf.cast562 = trunc i32 %bf.clear561 to i1
  %conv563 = zext i1 %bf.cast562 to i32
  %270 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %271 = load i32, i32* %j, align 4
  %idx.ext564 = sext i32 %271 to i64
  %add.ptr565 = getelementptr inbounds %struct.glyph, %struct.glyph* %270, i64 %idx.ext564
  %left_box_line_p566 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr565, i32 0, i32 6
  %272 = bitcast i24* %left_box_line_p566 to i32*
  %bf.load567 = load i32, i32* %272, align 8
  %bf.lshr568 = lshr i32 %bf.load567, 4
  %bf.clear569 = and i32 %bf.lshr568, 1
  %bf.cast570 = trunc i32 %bf.clear569 to i1
  %conv571 = zext i1 %bf.cast570 to i32
  %cmp572 = icmp eq i32 %conv563, %conv571
  br i1 %cmp572, label %land.lhs.true.574, label %lor.end

land.lhs.true.574:                                ; preds = %land.lhs.true.555
  %273 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %274 = load i32, i32* %j, align 4
  %idx.ext575 = sext i32 %274 to i64
  %add.ptr576 = getelementptr inbounds %struct.glyph, %struct.glyph* %273, i64 %idx.ext575
  %right_box_line_p577 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr576, i32 0, i32 6
  %275 = bitcast i24* %right_box_line_p577 to i32*
  %bf.load578 = load i32, i32* %275, align 8
  %bf.lshr579 = lshr i32 %bf.load578, 5
  %bf.clear580 = and i32 %bf.lshr579, 1
  %bf.cast581 = trunc i32 %bf.clear580 to i1
  %conv582 = zext i1 %bf.cast581 to i32
  %276 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %277 = load i32, i32* %j, align 4
  %idx.ext583 = sext i32 %277 to i64
  %add.ptr584 = getelementptr inbounds %struct.glyph, %struct.glyph* %276, i64 %idx.ext583
  %right_box_line_p585 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr584, i32 0, i32 6
  %278 = bitcast i24* %right_box_line_p585 to i32*
  %bf.load586 = load i32, i32* %278, align 8
  %bf.lshr587 = lshr i32 %bf.load586, 5
  %bf.clear588 = and i32 %bf.lshr587, 1
  %bf.cast589 = trunc i32 %bf.clear588 to i1
  %conv590 = zext i1 %bf.cast589 to i32
  %cmp591 = icmp eq i32 %conv582, %conv590
  br i1 %cmp591, label %land.lhs.true.593, label %lor.end

land.lhs.true.593:                                ; preds = %land.lhs.true.574
  %279 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %280 = load i32, i32* %j, align 4
  %idx.ext594 = sext i32 %280 to i64
  %add.ptr595 = getelementptr inbounds %struct.glyph, %struct.glyph* %279, i64 %idx.ext594
  %voffset596 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr595, i32 0, i32 5
  %281 = load i16, i16* %voffset596, align 2
  %conv597 = sext i16 %281 to i32
  %282 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %283 = load i32, i32* %j, align 4
  %idx.ext598 = sext i32 %283 to i64
  %add.ptr599 = getelementptr inbounds %struct.glyph, %struct.glyph* %282, i64 %idx.ext598
  %voffset600 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr599, i32 0, i32 5
  %284 = load i16, i16* %voffset600, align 2
  %conv601 = sext i16 %284 to i32
  %cmp602 = icmp eq i32 %conv597, %conv601
  br i1 %cmp602, label %land.lhs.true.604, label %lor.end

land.lhs.true.604:                                ; preds = %land.lhs.true.593
  %285 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %286 = load i32, i32* %j, align 4
  %idx.ext605 = sext i32 %286 to i64
  %add.ptr606 = getelementptr inbounds %struct.glyph, %struct.glyph* %285, i64 %idx.ext605
  %pixel_width607 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr606, i32 0, i32 2
  %287 = load i16, i16* %pixel_width607, align 2
  %conv608 = sext i16 %287 to i32
  %288 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %289 = load i32, i32* %j, align 4
  %idx.ext609 = sext i32 %289 to i64
  %add.ptr610 = getelementptr inbounds %struct.glyph, %struct.glyph* %288, i64 %idx.ext609
  %pixel_width611 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr610, i32 0, i32 2
  %290 = load i16, i16* %pixel_width611, align 2
  %conv612 = sext i16 %290 to i32
  %cmp613 = icmp eq i32 %conv608, %conv612
  br i1 %cmp613, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %land.lhs.true.604
  %291 = load i32, i32* %j, align 4
  %idxprom615 = sext i32 %291 to i64
  %292 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %arrayidx616 = getelementptr inbounds %struct.glyph, %struct.glyph* %292, i64 %idxprom615
  %padding_p617 = getelementptr inbounds %struct.glyph, %struct.glyph* %arrayidx616, i32 0, i32 6
  %293 = bitcast i24* %padding_p617 to i32*
  %bf.load618 = load i32, i32* %293, align 8
  %bf.lshr619 = lshr i32 %bf.load618, 7
  %bf.clear620 = and i32 %bf.lshr619, 1
  %bf.cast621 = trunc i32 %bf.clear620 to i1
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.lhs.true.604, %land.lhs.true.593, %land.lhs.true.574, %land.lhs.true.555, %land.lhs.true.536, %land.lhs.true.523, %lor.lhs.false.510, %land.lhs.true.485, %land.lhs.true.466, %land.lhs.true.447, %cond.true.430, %land.lhs.true.411, %lor.lhs.false.398, %land.rhs.395
  %294 = phi i1 [ true, %land.lhs.true.604 ], [ true, %land.lhs.true.593 ], [ true, %land.lhs.true.574 ], [ true, %land.lhs.true.555 ], [ true, %land.lhs.true.536 ], [ true, %land.lhs.true.523 ], [ true, %lor.lhs.false.510 ], [ true, %land.lhs.true.485 ], [ true, %land.lhs.true.466 ], [ true, %land.lhs.true.447 ], [ true, %cond.true.430 ], [ true, %land.lhs.true.411 ], [ true, %lor.lhs.false.398 ], [ true, %land.rhs.395 ], [ %bf.cast621, %lor.rhs ]
  br label %land.end.623

land.end.623:                                     ; preds = %lor.end, %while.cond.392
  %295 = phi i1 [ false, %while.cond.392 ], [ %294, %lor.end ]
  br i1 %295, label %while.body.624, label %while.end.625

while.body.624:                                   ; preds = %land.end.623
  %296 = load i32, i32* %j, align 4
  %inc = add nsw i32 %296, 1
  store i32 %inc, i32* %j, align 4
  br label %while.cond.392

while.end.625:                                    ; preds = %land.end.623
  %297 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %298 = load i32, i32* %vpos.addr, align 4
  %299 = load i32, i32* %i, align 4
  call void @cursor_to(%struct.frame* %297, i32 %298, i32 %299)
  %300 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %301 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %302 = load i32, i32* %i, align 4
  %idx.ext626 = sext i32 %302 to i64
  %add.ptr627 = getelementptr inbounds %struct.glyph, %struct.glyph* %301, i64 %idx.ext626
  %303 = load i32, i32* %j, align 4
  %304 = load i32, i32* %i, align 4
  %sub628 = sub nsw i32 %303, %304
  call void @write_glyphs(%struct.frame* %300, %struct.glyph* %add.ptr627, i32 %sub628)
  %305 = load i32, i32* %j, align 4
  %sub629 = sub nsw i32 %305, 1
  store i32 %sub629, i32* %i, align 4
  br label %if.end.630

if.end.630:                                       ; preds = %while.end.625, %land.lhs.true.380
  br label %for.inc

for.inc:                                          ; preds = %if.end.630
  %306 = load i32, i32* %i, align 4
  %inc631 = add nsw i32 %306, 1
  store i32 %inc631, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %307 = load i32, i32* %olen, align 4
  %308 = load i32, i32* %nlen, align 4
  %cmp632 = icmp sgt i32 %307, %308
  br i1 %cmp632, label %if.then.634, label %if.end.635

if.then.634:                                      ; preds = %for.end
  %309 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %310 = load i32, i32* %vpos.addr, align 4
  %311 = load i32, i32* %nlen, align 4
  call void @cursor_to(%struct.frame* %309, i32 %310, i32 %311)
  %312 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %313 = load i32, i32* %olen, align 4
  call void @clear_end_of_line(%struct.frame* %312, i32 %313)
  br label %if.end.635

if.end.635:                                       ; preds = %if.then.634, %for.end
  %314 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %315 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %316 = load i32, i32* %vpos.addr, align 4
  call void @make_current(%struct.glyph_matrix* %314, %struct.glyph_matrix* %315, i32 %316)
  br label %return

if.end.636:                                       ; preds = %cond.end.173
  %317 = load i32, i32* %olen, align 4
  %tobool637 = icmp ne i32 %317, 0
  br i1 %tobool637, label %if.end.650, label %if.then.638

if.then.638:                                      ; preds = %if.end.636
  %318 = load i8, i8* %write_spaces_p, align 1
  %tobool639 = trunc i8 %318 to i1
  br i1 %tobool639, label %if.then.640, label %if.else.641

if.then.640:                                      ; preds = %if.then.638
  store i32 0, i32* %nsp, align 4
  br label %if.end.642

if.else.641:                                      ; preds = %if.then.638
  %319 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %320 = load i32, i32* %nlen, align 4
  %call = call i32 @count_blanks(%struct.glyph* %319, i32 %320)
  store i32 %call, i32* %nsp, align 4
  br label %if.end.642

if.end.642:                                       ; preds = %if.else.641, %if.then.640
  %321 = load i32, i32* %nlen, align 4
  %322 = load i32, i32* %nsp, align 4
  %cmp643 = icmp sgt i32 %321, %322
  br i1 %cmp643, label %if.then.645, label %if.end.649

if.then.645:                                      ; preds = %if.end.642
  %323 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %324 = load i32, i32* %vpos.addr, align 4
  %325 = load i32, i32* %nsp, align 4
  call void @cursor_to(%struct.frame* %323, i32 %324, i32 %325)
  %326 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %327 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %328 = load i32, i32* %nsp, align 4
  %idx.ext646 = sext i32 %328 to i64
  %add.ptr647 = getelementptr inbounds %struct.glyph, %struct.glyph* %327, i64 %idx.ext646
  %329 = load i32, i32* %nlen, align 4
  %330 = load i32, i32* %nsp, align 4
  %sub648 = sub nsw i32 %329, %330
  call void @write_glyphs(%struct.frame* %326, %struct.glyph* %add.ptr647, i32 %sub648)
  br label %if.end.649

if.end.649:                                       ; preds = %if.then.645, %if.end.642
  %331 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %332 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %333 = load i32, i32* %vpos.addr, align 4
  call void @make_current(%struct.glyph_matrix* %331, %struct.glyph_matrix* %332, i32 %333)
  br label %return

if.end.650:                                       ; preds = %if.end.636
  %334 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %335 = load i32, i32* %olen, align 4
  %call651 = call i32 @count_blanks(%struct.glyph* %334, i32 %335)
  store i32 %call651, i32* %osp, align 4
  %336 = load i8, i8* %colored_spaces_p, align 1
  %tobool652 = trunc i8 %336 to i1
  br i1 %tobool652, label %cond.true.654, label %cond.false.655

cond.true.654:                                    ; preds = %if.end.650
  br label %cond.end.657

cond.false.655:                                   ; preds = %if.end.650
  %337 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %338 = load i32, i32* %nlen, align 4
  %call656 = call i32 @count_blanks(%struct.glyph* %337, i32 %338)
  br label %cond.end.657

cond.end.657:                                     ; preds = %cond.false.655, %cond.true.654
  %cond658 = phi i32 [ 0, %cond.true.654 ], [ %call656, %cond.false.655 ]
  store i32 %cond658, i32* %nsp, align 4
  %339 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %340 = load i32, i32* %osp, align 4
  %idx.ext659 = sext i32 %340 to i64
  %add.ptr660 = getelementptr inbounds %struct.glyph, %struct.glyph* %339, i64 %idx.ext659
  %341 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %342 = load i32, i32* %olen, align 4
  %idx.ext661 = sext i32 %342 to i64
  %add.ptr662 = getelementptr inbounds %struct.glyph, %struct.glyph* %341, i64 %idx.ext661
  %343 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %344 = load i32, i32* %nsp, align 4
  %idx.ext663 = sext i32 %344 to i64
  %add.ptr664 = getelementptr inbounds %struct.glyph, %struct.glyph* %343, i64 %idx.ext663
  %345 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %346 = load i32, i32* %nlen, align 4
  %idx.ext665 = sext i32 %346 to i64
  %add.ptr666 = getelementptr inbounds %struct.glyph, %struct.glyph* %345, i64 %idx.ext665
  %call667 = call i32 @count_match(%struct.glyph* %add.ptr660, %struct.glyph* %add.ptr662, %struct.glyph* %add.ptr664, %struct.glyph* %add.ptr666)
  store i32 %call667, i32* %begmatch, align 4
  %347 = load i8, i8* %write_spaces_p, align 1
  %tobool668 = trunc i8 %347 to i1
  br i1 %tobool668, label %if.end.701, label %land.lhs.true.669

land.lhs.true.669:                                ; preds = %cond.end.657
  %348 = load i32, i32* %osp, align 4
  %349 = load i32, i32* %begmatch, align 4
  %add670 = add nsw i32 %348, %349
  %350 = load i32, i32* %olen, align 4
  %cmp671 = icmp eq i32 %add670, %350
  br i1 %cmp671, label %if.then.673, label %if.end.701

if.then.673:                                      ; preds = %land.lhs.true.669
  %351 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %352 = load i32, i32* %nsp, align 4
  %idx.ext674 = sext i32 %352 to i64
  %add.ptr675 = getelementptr inbounds %struct.glyph, %struct.glyph* %351, i64 %idx.ext674
  store %struct.glyph* %add.ptr675, %struct.glyph** %np1, align 8
  br label %while.cond.676

while.cond.676:                                   ; preds = %while.body.698, %if.then.673
  %353 = load %struct.glyph*, %struct.glyph** %np1, align 8
  %354 = load i32, i32* %begmatch, align 4
  %idx.ext677 = sext i32 %354 to i64
  %add.ptr678 = getelementptr inbounds %struct.glyph, %struct.glyph* %353, i64 %idx.ext677
  %355 = load %struct.glyph*, %struct.glyph** %nend, align 8
  %cmp679 = icmp ult %struct.glyph* %add.ptr678, %355
  br i1 %cmp679, label %land.rhs.681, label %land.end.697

land.rhs.681:                                     ; preds = %while.cond.676
  %356 = load i32, i32* %begmatch, align 4
  %idxprom682 = sext i32 %356 to i64
  %357 = load %struct.glyph*, %struct.glyph** %np1, align 8
  %arrayidx683 = getelementptr inbounds %struct.glyph, %struct.glyph* %357, i64 %idxprom682
  %u684 = getelementptr inbounds %struct.glyph, %struct.glyph* %arrayidx683, i32 0, i32 9
  %ch685 = bitcast %union.anon.1* %u684 to i32*
  %358 = load i32, i32* %ch685, align 4
  %cmp686 = icmp eq i32 %358, 32
  br i1 %cmp686, label %land.rhs.688, label %land.end.696

land.rhs.688:                                     ; preds = %land.rhs.681
  %359 = load i32, i32* %begmatch, align 4
  %idxprom689 = sext i32 %359 to i64
  %360 = load %struct.glyph*, %struct.glyph** %np1, align 8
  %arrayidx690 = getelementptr inbounds %struct.glyph, %struct.glyph* %360, i64 %idxprom689
  %face_id691 = getelementptr inbounds %struct.glyph, %struct.glyph* %arrayidx690, i32 0, i32 7
  %361 = bitcast i24* %face_id691 to i32*
  %bf.load692 = load i32, i32* %361, align 4
  %bf.clear693 = and i32 %bf.load692, 1048575
  %cmp694 = icmp eq i32 %bf.clear693, 0
  br label %land.end.696

land.end.696:                                     ; preds = %land.rhs.688, %land.rhs.681
  %362 = phi i1 [ false, %land.rhs.681 ], [ %cmp694, %land.rhs.688 ]
  br label %land.end.697

land.end.697:                                     ; preds = %land.end.696, %while.cond.676
  %363 = phi i1 [ false, %while.cond.676 ], [ %362, %land.end.696 ]
  br i1 %363, label %while.body.698, label %while.end.700

while.body.698:                                   ; preds = %land.end.697
  %364 = load i32, i32* %begmatch, align 4
  %inc699 = add nsw i32 %364, 1
  store i32 %inc699, i32* %begmatch, align 4
  br label %while.cond.676

while.end.700:                                    ; preds = %land.end.697
  br label %if.end.701

if.end.701:                                       ; preds = %while.end.700, %land.lhs.true.669, %cond.end.657
  %365 = load i32, i32* %begmatch, align 4
  %cmp702 = icmp eq i32 %365, 0
  br i1 %cmp702, label %land.lhs.true.704, label %if.end.714

land.lhs.true.704:                                ; preds = %if.end.701
  %366 = load i32, i32* %osp, align 4
  %367 = load i32, i32* %nsp, align 4
  %cmp705 = icmp ne i32 %366, %367
  br i1 %cmp705, label %if.then.707, label %if.end.714

if.then.707:                                      ; preds = %land.lhs.true.704
  %368 = load i32, i32* %osp, align 4
  %369 = load i32, i32* %nsp, align 4
  %cmp708 = icmp slt i32 %368, %369
  br i1 %cmp708, label %cond.true.710, label %cond.false.711

cond.true.710:                                    ; preds = %if.then.707
  %370 = load i32, i32* %osp, align 4
  br label %cond.end.712

cond.false.711:                                   ; preds = %if.then.707
  %371 = load i32, i32* %nsp, align 4
  br label %cond.end.712

cond.end.712:                                     ; preds = %cond.false.711, %cond.true.710
  %cond713 = phi i32 [ %370, %cond.true.710 ], [ %371, %cond.false.711 ]
  store i32 %cond713, i32* %nsp, align 4
  store i32 %cond713, i32* %osp, align 4
  br label %if.end.714

if.end.714:                                       ; preds = %cond.end.712, %land.lhs.true.704, %if.end.701
  %372 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %373 = load i32, i32* %olen, align 4
  %idx.ext715 = sext i32 %373 to i64
  %add.ptr716 = getelementptr inbounds %struct.glyph, %struct.glyph* %372, i64 %idx.ext715
  store %struct.glyph* %add.ptr716, %struct.glyph** %op1, align 8
  %374 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %375 = load i32, i32* %nlen, align 4
  %idx.ext717 = sext i32 %375 to i64
  %add.ptr718 = getelementptr inbounds %struct.glyph, %struct.glyph* %374, i64 %idx.ext717
  store %struct.glyph* %add.ptr718, %struct.glyph** %np1, align 8
  %376 = load %struct.glyph*, %struct.glyph** %op1, align 8
  %377 = load i32, i32* %begmatch, align 4
  %idx.ext719 = sext i32 %377 to i64
  %add.ptr720 = getelementptr inbounds %struct.glyph, %struct.glyph* %376, i64 %idx.ext719
  %378 = load i32, i32* %olen, align 4
  %379 = load i32, i32* %osp, align 4
  %sub721 = sub nsw i32 %378, %379
  %380 = load i32, i32* %nlen, align 4
  %381 = load i32, i32* %nsp, align 4
  %sub722 = sub nsw i32 %380, %381
  %cmp723 = icmp slt i32 %sub721, %sub722
  br i1 %cmp723, label %cond.true.725, label %cond.false.727

cond.true.725:                                    ; preds = %if.end.714
  %382 = load i32, i32* %olen, align 4
  %383 = load i32, i32* %osp, align 4
  %sub726 = sub nsw i32 %382, %383
  br label %cond.end.729

cond.false.727:                                   ; preds = %if.end.714
  %384 = load i32, i32* %nlen, align 4
  %385 = load i32, i32* %nsp, align 4
  %sub728 = sub nsw i32 %384, %385
  br label %cond.end.729

cond.end.729:                                     ; preds = %cond.false.727, %cond.true.725
  %cond730 = phi i32 [ %sub726, %cond.true.725 ], [ %sub728, %cond.false.727 ]
  %idx.ext731 = sext i32 %cond730 to i64
  %idx.neg = sub i64 0, %idx.ext731
  %add.ptr732 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr720, i64 %idx.neg
  store %struct.glyph* %add.ptr732, %struct.glyph** %op2, align 8
  br label %while.cond.733

while.cond.733:                                   ; preds = %while.body.927, %cond.end.729
  %386 = load %struct.glyph*, %struct.glyph** %op1, align 8
  %387 = load %struct.glyph*, %struct.glyph** %op2, align 8
  %cmp734 = icmp ugt %struct.glyph* %386, %387
  br i1 %cmp734, label %land.rhs.736, label %land.end.926

land.rhs.736:                                     ; preds = %while.cond.733
  %388 = load %struct.glyph*, %struct.glyph** %op1, align 8
  %add.ptr737 = getelementptr inbounds %struct.glyph, %struct.glyph* %388, i64 -1
  %type738 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr737, i32 0, i32 6
  %389 = bitcast i24* %type738 to i32*
  %bf.load739 = load i32, i32* %389, align 8
  %bf.clear740 = and i32 %bf.load739, 7
  %390 = load %struct.glyph*, %struct.glyph** %np1, align 8
  %add.ptr741 = getelementptr inbounds %struct.glyph, %struct.glyph* %390, i64 -1
  %type742 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr741, i32 0, i32 6
  %391 = bitcast i24* %type742 to i32*
  %bf.load743 = load i32, i32* %391, align 8
  %bf.clear744 = and i32 %bf.load743, 7
  %cmp745 = icmp eq i32 %bf.clear740, %bf.clear744
  br i1 %cmp745, label %land.lhs.true.747, label %land.end.925

land.lhs.true.747:                                ; preds = %land.rhs.736
  %392 = load %struct.glyph*, %struct.glyph** %op1, align 8
  %add.ptr748 = getelementptr inbounds %struct.glyph, %struct.glyph* %392, i64 -1
  %u749 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr748, i32 0, i32 9
  %val750 = bitcast %union.anon.1* %u749 to i32*
  %393 = load i32, i32* %val750, align 4
  %394 = load %struct.glyph*, %struct.glyph** %np1, align 8
  %add.ptr751 = getelementptr inbounds %struct.glyph, %struct.glyph* %394, i64 -1
  %u752 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr751, i32 0, i32 9
  %val753 = bitcast %union.anon.1* %u752 to i32*
  %395 = load i32, i32* %val753, align 4
  %cmp754 = icmp eq i32 %393, %395
  br i1 %cmp754, label %land.lhs.true.756, label %land.end.925

land.lhs.true.756:                                ; preds = %land.lhs.true.747
  %396 = load %struct.glyph*, %struct.glyph** %op1, align 8
  %add.ptr757 = getelementptr inbounds %struct.glyph, %struct.glyph* %396, i64 -1
  %type758 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr757, i32 0, i32 6
  %397 = bitcast i24* %type758 to i32*
  %bf.load759 = load i32, i32* %397, align 8
  %bf.clear760 = and i32 %bf.load759, 7
  %cmp761 = icmp eq i32 %bf.clear760, 3
  br i1 %cmp761, label %cond.true.763, label %cond.false.827

cond.true.763:                                    ; preds = %land.lhs.true.756
  %398 = load %struct.glyph*, %struct.glyph** %op1, align 8
  %add.ptr764 = getelementptr inbounds %struct.glyph, %struct.glyph* %398, i64 -1
  %slice765 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr764, i32 0, i32 8
  %img766 = bitcast %union.anon* %slice765 to %struct.glyph_slice*
  %399 = bitcast %struct.glyph_slice* %img766 to i64*
  %bf.load767 = load i64, i64* %399, align 4
  %bf.clear768 = and i64 %bf.load767, 65535
  %bf.cast769 = trunc i64 %bf.clear768 to i32
  %400 = load %struct.glyph*, %struct.glyph** %np1, align 8
  %add.ptr770 = getelementptr inbounds %struct.glyph, %struct.glyph* %400, i64 -1
  %slice771 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr770, i32 0, i32 8
  %img772 = bitcast %union.anon* %slice771 to %struct.glyph_slice*
  %401 = bitcast %struct.glyph_slice* %img772 to i64*
  %bf.load773 = load i64, i64* %401, align 4
  %bf.clear774 = and i64 %bf.load773, 65535
  %bf.cast775 = trunc i64 %bf.clear774 to i32
  %cmp776 = icmp eq i32 %bf.cast769, %bf.cast775
  br i1 %cmp776, label %land.lhs.true.778, label %land.end.925

land.lhs.true.778:                                ; preds = %cond.true.763
  %402 = load %struct.glyph*, %struct.glyph** %op1, align 8
  %add.ptr779 = getelementptr inbounds %struct.glyph, %struct.glyph* %402, i64 -1
  %slice780 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr779, i32 0, i32 8
  %img781 = bitcast %union.anon* %slice780 to %struct.glyph_slice*
  %403 = bitcast %struct.glyph_slice* %img781 to i64*
  %bf.load782 = load i64, i64* %403, align 4
  %bf.lshr783 = lshr i64 %bf.load782, 16
  %bf.clear784 = and i64 %bf.lshr783, 65535
  %bf.cast785 = trunc i64 %bf.clear784 to i32
  %404 = load %struct.glyph*, %struct.glyph** %np1, align 8
  %add.ptr786 = getelementptr inbounds %struct.glyph, %struct.glyph* %404, i64 -1
  %slice787 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr786, i32 0, i32 8
  %img788 = bitcast %union.anon* %slice787 to %struct.glyph_slice*
  %405 = bitcast %struct.glyph_slice* %img788 to i64*
  %bf.load789 = load i64, i64* %405, align 4
  %bf.lshr790 = lshr i64 %bf.load789, 16
  %bf.clear791 = and i64 %bf.lshr790, 65535
  %bf.cast792 = trunc i64 %bf.clear791 to i32
  %cmp793 = icmp eq i32 %bf.cast785, %bf.cast792
  br i1 %cmp793, label %land.lhs.true.795, label %land.end.925

land.lhs.true.795:                                ; preds = %land.lhs.true.778
  %406 = load %struct.glyph*, %struct.glyph** %op1, align 8
  %add.ptr796 = getelementptr inbounds %struct.glyph, %struct.glyph* %406, i64 -1
  %slice797 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr796, i32 0, i32 8
  %img798 = bitcast %union.anon* %slice797 to %struct.glyph_slice*
  %407 = bitcast %struct.glyph_slice* %img798 to i64*
  %bf.load799 = load i64, i64* %407, align 4
  %bf.lshr800 = lshr i64 %bf.load799, 32
  %bf.clear801 = and i64 %bf.lshr800, 65535
  %bf.cast802 = trunc i64 %bf.clear801 to i32
  %408 = load %struct.glyph*, %struct.glyph** %np1, align 8
  %add.ptr803 = getelementptr inbounds %struct.glyph, %struct.glyph* %408, i64 -1
  %slice804 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr803, i32 0, i32 8
  %img805 = bitcast %union.anon* %slice804 to %struct.glyph_slice*
  %409 = bitcast %struct.glyph_slice* %img805 to i64*
  %bf.load806 = load i64, i64* %409, align 4
  %bf.lshr807 = lshr i64 %bf.load806, 32
  %bf.clear808 = and i64 %bf.lshr807, 65535
  %bf.cast809 = trunc i64 %bf.clear808 to i32
  %cmp810 = icmp eq i32 %bf.cast802, %bf.cast809
  br i1 %cmp810, label %land.lhs.true.812, label %land.end.925

land.lhs.true.812:                                ; preds = %land.lhs.true.795
  %410 = load %struct.glyph*, %struct.glyph** %op1, align 8
  %add.ptr813 = getelementptr inbounds %struct.glyph, %struct.glyph* %410, i64 -1
  %slice814 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr813, i32 0, i32 8
  %img815 = bitcast %union.anon* %slice814 to %struct.glyph_slice*
  %411 = bitcast %struct.glyph_slice* %img815 to i64*
  %bf.load816 = load i64, i64* %411, align 4
  %bf.lshr817 = lshr i64 %bf.load816, 48
  %bf.cast818 = trunc i64 %bf.lshr817 to i32
  %412 = load %struct.glyph*, %struct.glyph** %np1, align 8
  %add.ptr819 = getelementptr inbounds %struct.glyph, %struct.glyph* %412, i64 -1
  %slice820 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr819, i32 0, i32 8
  %img821 = bitcast %union.anon* %slice820 to %struct.glyph_slice*
  %413 = bitcast %struct.glyph_slice* %img821 to i64*
  %bf.load822 = load i64, i64* %413, align 4
  %bf.lshr823 = lshr i64 %bf.load822, 48
  %bf.cast824 = trunc i64 %bf.lshr823 to i32
  %cmp825 = icmp eq i32 %bf.cast818, %bf.cast824
  br i1 %cmp825, label %land.lhs.true.845, label %land.end.925

cond.false.827:                                   ; preds = %land.lhs.true.756
  %414 = load %struct.glyph*, %struct.glyph** %op1, align 8
  %add.ptr828 = getelementptr inbounds %struct.glyph, %struct.glyph* %414, i64 -1
  %type829 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr828, i32 0, i32 6
  %415 = bitcast i24* %type829 to i32*
  %bf.load830 = load i32, i32* %415, align 8
  %bf.clear831 = and i32 %bf.load830, 7
  %cmp832 = icmp ne i32 %bf.clear831, 1
  br i1 %cmp832, label %land.lhs.true.845, label %lor.lhs.false.834

lor.lhs.false.834:                                ; preds = %cond.false.827
  %416 = load %struct.glyph*, %struct.glyph** %op1, align 8
  %add.ptr835 = getelementptr inbounds %struct.glyph, %struct.glyph* %416, i64 -1
  %slice836 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr835, i32 0, i32 8
  %cmp837 = bitcast %union.anon* %slice836 to %struct.anon*
  %from838 = getelementptr inbounds %struct.anon, %struct.anon* %cmp837, i32 0, i32 0
  %417 = load i32, i32* %from838, align 4
  %418 = load %struct.glyph*, %struct.glyph** %np1, align 8
  %add.ptr839 = getelementptr inbounds %struct.glyph, %struct.glyph* %418, i64 -1
  %slice840 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr839, i32 0, i32 8
  %cmp841 = bitcast %union.anon* %slice840 to %struct.anon*
  %from842 = getelementptr inbounds %struct.anon, %struct.anon* %cmp841, i32 0, i32 0
  %419 = load i32, i32* %from842, align 4
  %cmp843 = icmp eq i32 %417, %419
  br i1 %cmp843, label %land.lhs.true.845, label %land.end.925

land.lhs.true.845:                                ; preds = %lor.lhs.false.834, %cond.false.827, %land.lhs.true.812
  %420 = load %struct.glyph*, %struct.glyph** %op1, align 8
  %add.ptr846 = getelementptr inbounds %struct.glyph, %struct.glyph* %420, i64 -1
  %face_id847 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr846, i32 0, i32 7
  %421 = bitcast i24* %face_id847 to i32*
  %bf.load848 = load i32, i32* %421, align 4
  %bf.clear849 = and i32 %bf.load848, 1048575
  %422 = load %struct.glyph*, %struct.glyph** %np1, align 8
  %add.ptr850 = getelementptr inbounds %struct.glyph, %struct.glyph* %422, i64 -1
  %face_id851 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr850, i32 0, i32 7
  %423 = bitcast i24* %face_id851 to i32*
  %bf.load852 = load i32, i32* %423, align 4
  %bf.clear853 = and i32 %bf.load852, 1048575
  %cmp854 = icmp eq i32 %bf.clear849, %bf.clear853
  br i1 %cmp854, label %land.lhs.true.856, label %land.end.925

land.lhs.true.856:                                ; preds = %land.lhs.true.845
  %424 = load %struct.glyph*, %struct.glyph** %op1, align 8
  %add.ptr857 = getelementptr inbounds %struct.glyph, %struct.glyph* %424, i64 -1
  %padding_p858 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr857, i32 0, i32 6
  %425 = bitcast i24* %padding_p858 to i32*
  %bf.load859 = load i32, i32* %425, align 8
  %bf.lshr860 = lshr i32 %bf.load859, 7
  %bf.clear861 = and i32 %bf.lshr860, 1
  %bf.cast862 = trunc i32 %bf.clear861 to i1
  %conv863 = zext i1 %bf.cast862 to i32
  %426 = load %struct.glyph*, %struct.glyph** %np1, align 8
  %add.ptr864 = getelementptr inbounds %struct.glyph, %struct.glyph* %426, i64 -1
  %padding_p865 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr864, i32 0, i32 6
  %427 = bitcast i24* %padding_p865 to i32*
  %bf.load866 = load i32, i32* %427, align 8
  %bf.lshr867 = lshr i32 %bf.load866, 7
  %bf.clear868 = and i32 %bf.lshr867, 1
  %bf.cast869 = trunc i32 %bf.clear868 to i1
  %conv870 = zext i1 %bf.cast869 to i32
  %cmp871 = icmp eq i32 %conv863, %conv870
  br i1 %cmp871, label %land.lhs.true.873, label %land.end.925

land.lhs.true.873:                                ; preds = %land.lhs.true.856
  %428 = load %struct.glyph*, %struct.glyph** %op1, align 8
  %add.ptr874 = getelementptr inbounds %struct.glyph, %struct.glyph* %428, i64 -1
  %left_box_line_p875 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr874, i32 0, i32 6
  %429 = bitcast i24* %left_box_line_p875 to i32*
  %bf.load876 = load i32, i32* %429, align 8
  %bf.lshr877 = lshr i32 %bf.load876, 4
  %bf.clear878 = and i32 %bf.lshr877, 1
  %bf.cast879 = trunc i32 %bf.clear878 to i1
  %conv880 = zext i1 %bf.cast879 to i32
  %430 = load %struct.glyph*, %struct.glyph** %np1, align 8
  %add.ptr881 = getelementptr inbounds %struct.glyph, %struct.glyph* %430, i64 -1
  %left_box_line_p882 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr881, i32 0, i32 6
  %431 = bitcast i24* %left_box_line_p882 to i32*
  %bf.load883 = load i32, i32* %431, align 8
  %bf.lshr884 = lshr i32 %bf.load883, 4
  %bf.clear885 = and i32 %bf.lshr884, 1
  %bf.cast886 = trunc i32 %bf.clear885 to i1
  %conv887 = zext i1 %bf.cast886 to i32
  %cmp888 = icmp eq i32 %conv880, %conv887
  br i1 %cmp888, label %land.lhs.true.890, label %land.end.925

land.lhs.true.890:                                ; preds = %land.lhs.true.873
  %432 = load %struct.glyph*, %struct.glyph** %op1, align 8
  %add.ptr891 = getelementptr inbounds %struct.glyph, %struct.glyph* %432, i64 -1
  %right_box_line_p892 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr891, i32 0, i32 6
  %433 = bitcast i24* %right_box_line_p892 to i32*
  %bf.load893 = load i32, i32* %433, align 8
  %bf.lshr894 = lshr i32 %bf.load893, 5
  %bf.clear895 = and i32 %bf.lshr894, 1
  %bf.cast896 = trunc i32 %bf.clear895 to i1
  %conv897 = zext i1 %bf.cast896 to i32
  %434 = load %struct.glyph*, %struct.glyph** %np1, align 8
  %add.ptr898 = getelementptr inbounds %struct.glyph, %struct.glyph* %434, i64 -1
  %right_box_line_p899 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr898, i32 0, i32 6
  %435 = bitcast i24* %right_box_line_p899 to i32*
  %bf.load900 = load i32, i32* %435, align 8
  %bf.lshr901 = lshr i32 %bf.load900, 5
  %bf.clear902 = and i32 %bf.lshr901, 1
  %bf.cast903 = trunc i32 %bf.clear902 to i1
  %conv904 = zext i1 %bf.cast903 to i32
  %cmp905 = icmp eq i32 %conv897, %conv904
  br i1 %cmp905, label %land.lhs.true.907, label %land.end.925

land.lhs.true.907:                                ; preds = %land.lhs.true.890
  %436 = load %struct.glyph*, %struct.glyph** %op1, align 8
  %add.ptr908 = getelementptr inbounds %struct.glyph, %struct.glyph* %436, i64 -1
  %voffset909 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr908, i32 0, i32 5
  %437 = load i16, i16* %voffset909, align 2
  %conv910 = sext i16 %437 to i32
  %438 = load %struct.glyph*, %struct.glyph** %np1, align 8
  %add.ptr911 = getelementptr inbounds %struct.glyph, %struct.glyph* %438, i64 -1
  %voffset912 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr911, i32 0, i32 5
  %439 = load i16, i16* %voffset912, align 2
  %conv913 = sext i16 %439 to i32
  %cmp914 = icmp eq i32 %conv910, %conv913
  br i1 %cmp914, label %land.rhs.916, label %land.end.925

land.rhs.916:                                     ; preds = %land.lhs.true.907
  %440 = load %struct.glyph*, %struct.glyph** %op1, align 8
  %add.ptr917 = getelementptr inbounds %struct.glyph, %struct.glyph* %440, i64 -1
  %pixel_width918 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr917, i32 0, i32 2
  %441 = load i16, i16* %pixel_width918, align 2
  %conv919 = sext i16 %441 to i32
  %442 = load %struct.glyph*, %struct.glyph** %np1, align 8
  %add.ptr920 = getelementptr inbounds %struct.glyph, %struct.glyph* %442, i64 -1
  %pixel_width921 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr920, i32 0, i32 2
  %443 = load i16, i16* %pixel_width921, align 2
  %conv922 = sext i16 %443 to i32
  %cmp923 = icmp eq i32 %conv919, %conv922
  br label %land.end.925

land.end.925:                                     ; preds = %land.rhs.916, %land.lhs.true.907, %land.lhs.true.890, %land.lhs.true.873, %land.lhs.true.856, %land.lhs.true.845, %lor.lhs.false.834, %land.lhs.true.812, %land.lhs.true.795, %land.lhs.true.778, %cond.true.763, %land.lhs.true.747, %land.rhs.736
  %444 = phi i1 [ false, %land.lhs.true.907 ], [ false, %land.lhs.true.890 ], [ false, %land.lhs.true.873 ], [ false, %land.lhs.true.856 ], [ false, %land.lhs.true.845 ], [ false, %lor.lhs.false.834 ], [ false, %land.lhs.true.812 ], [ false, %land.lhs.true.795 ], [ false, %land.lhs.true.778 ], [ false, %cond.true.763 ], [ false, %land.lhs.true.747 ], [ false, %land.rhs.736 ], [ %cmp923, %land.rhs.916 ]
  br label %land.end.926

land.end.926:                                     ; preds = %land.end.925, %while.cond.733
  %445 = phi i1 [ false, %while.cond.733 ], [ %444, %land.end.925 ]
  br i1 %445, label %while.body.927, label %while.end.929

while.body.927:                                   ; preds = %land.end.926
  %446 = load %struct.glyph*, %struct.glyph** %op1, align 8
  %incdec.ptr = getelementptr inbounds %struct.glyph, %struct.glyph* %446, i32 -1
  store %struct.glyph* %incdec.ptr, %struct.glyph** %op1, align 8
  %447 = load %struct.glyph*, %struct.glyph** %np1, align 8
  %incdec.ptr928 = getelementptr inbounds %struct.glyph, %struct.glyph* %447, i32 -1
  store %struct.glyph* %incdec.ptr928, %struct.glyph** %np1, align 8
  br label %while.cond.733

while.end.929:                                    ; preds = %land.end.926
  %448 = load %struct.glyph*, %struct.glyph** %obody, align 8
  %449 = load i32, i32* %olen, align 4
  %idx.ext930 = sext i32 %449 to i64
  %add.ptr931 = getelementptr inbounds %struct.glyph, %struct.glyph* %448, i64 %idx.ext930
  %450 = load %struct.glyph*, %struct.glyph** %op1, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.glyph* %add.ptr931 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.glyph* %450 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 48
  %conv932 = trunc i64 %sub.ptr.div to i32
  store i32 %conv932, i32* %endmatch, align 4
  %451 = load i32, i32* %nlen, align 4
  %452 = load i32, i32* %nsp, align 4
  %sub933 = sub nsw i32 %451, %452
  %453 = load i32, i32* %olen, align 4
  %454 = load i32, i32* %osp, align 4
  %sub934 = sub nsw i32 %453, %454
  %sub935 = sub nsw i32 %sub933, %sub934
  store i32 %sub935, i32* %tem, align 4
  %455 = load i32, i32* %endmatch, align 4
  %tobool936 = icmp ne i32 %455, 0
  br i1 %tobool936, label %land.lhs.true.937, label %if.end.976

land.lhs.true.937:                                ; preds = %while.end.929
  %456 = load i32, i32* %tem, align 4
  %tobool938 = icmp ne i32 %456, 0
  br i1 %tobool938, label %land.lhs.true.939, label %if.end.976

land.lhs.true.939:                                ; preds = %land.lhs.true.937
  %457 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method940 = getelementptr inbounds %struct.frame, %struct.frame* %457, i32 0, i32 26
  %458 = bitcast i48* %output_method940 to i64*
  %bf.load941 = load i64, i64* %458, align 8
  %bf.lshr942 = lshr i64 %bf.load941, 23
  %bf.clear943 = and i64 %bf.lshr942, 7
  %bf.cast944 = trunc i64 %bf.clear943 to i32
  %cmp945 = icmp eq i32 %bf.cast944, 1
  br i1 %cmp945, label %cond.true.955, label %lor.lhs.false.947

lor.lhs.false.947:                                ; preds = %land.lhs.true.939
  %459 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method948 = getelementptr inbounds %struct.frame, %struct.frame* %459, i32 0, i32 26
  %460 = bitcast i48* %output_method948 to i64*
  %bf.load949 = load i64, i64* %460, align 8
  %bf.lshr950 = lshr i64 %bf.load949, 23
  %bf.clear951 = and i64 %bf.lshr950, 7
  %bf.cast952 = trunc i64 %bf.clear951 to i32
  %cmp953 = icmp eq i32 %bf.cast952, 3
  br i1 %cmp953, label %cond.true.955, label %cond.false.959

cond.true.955:                                    ; preds = %lor.lhs.false.947, %land.lhs.true.939
  %461 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal956 = getelementptr inbounds %struct.frame, %struct.frame* %461, i32 0, i32 61
  %462 = load %struct.terminal*, %struct.terminal** %terminal956, align 8
  %display_info957 = getelementptr inbounds %struct.terminal, %struct.terminal* %462, i32 0, i32 12
  %tty958 = bitcast %union.display_info* %display_info957 to %struct.tty_display_info**
  %463 = load %struct.tty_display_info*, %struct.tty_display_info** %tty958, align 8
  br label %cond.end.960

cond.false.959:                                   ; preds = %lor.lhs.false.947
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.960

cond.end.960:                                     ; preds = %464, %cond.true.955
  %cond961 = phi %struct.tty_display_info* [ %463, %cond.true.955 ], [ null, %464 ]
  %char_ins_del_ok962 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond961, i32 0, i32 75
  %bf.load963 = load i8, i8* %char_ins_del_ok962, align 4
  %bf.lshr964 = lshr i8 %bf.load963, 5
  %bf.clear965 = and i8 %bf.lshr964, 1
  %bf.cast966 = trunc i8 %bf.clear965 to i1
  br i1 %bf.cast966, label %lor.lhs.false.967, label %if.then.975

lor.lhs.false.967:                                ; preds = %cond.end.960
  %465 = load i32, i32* %endmatch, align 4
  %466 = load i32, i32* %tem, align 4
  %idxprom968 = sext i32 %466 to i64
  %467 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %total_cols969 = getelementptr inbounds %struct.frame, %struct.frame* %467, i32 0, i32 38
  %468 = load i32, i32* %total_cols969, align 4
  %idxprom970 = sext i32 %468 to i64
  %469 = load i32*, i32** @char_ins_del_vector, align 8
  %arrayidx971 = getelementptr inbounds i32, i32* %469, i64 %idxprom970
  %arrayidx972 = getelementptr inbounds i32, i32* %arrayidx971, i64 %idxprom968
  %470 = load i32, i32* %arrayidx972, align 4
  %cmp973 = icmp sle i32 %465, %470
  br i1 %cmp973, label %if.then.975, label %if.end.976

if.then.975:                                      ; preds = %lor.lhs.false.967, %cond.end.960
  store i32 0, i32* %endmatch, align 4
  br label %if.end.976

if.end.976:                                       ; preds = %if.then.975, %lor.lhs.false.967, %land.lhs.true.937, %while.end.929
  %471 = load i32, i32* %nsp, align 4
  %472 = load i32, i32* %osp, align 4
  %cmp977 = icmp ne i32 %471, %472
  br i1 %cmp977, label %land.lhs.true.979, label %if.end.1024

land.lhs.true.979:                                ; preds = %if.end.976
  %473 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method980 = getelementptr inbounds %struct.frame, %struct.frame* %473, i32 0, i32 26
  %474 = bitcast i48* %output_method980 to i64*
  %bf.load981 = load i64, i64* %474, align 8
  %bf.lshr982 = lshr i64 %bf.load981, 23
  %bf.clear983 = and i64 %bf.lshr982, 7
  %bf.cast984 = trunc i64 %bf.clear983 to i32
  %cmp985 = icmp eq i32 %bf.cast984, 1
  br i1 %cmp985, label %cond.true.995, label %lor.lhs.false.987

lor.lhs.false.987:                                ; preds = %land.lhs.true.979
  %475 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method988 = getelementptr inbounds %struct.frame, %struct.frame* %475, i32 0, i32 26
  %476 = bitcast i48* %output_method988 to i64*
  %bf.load989 = load i64, i64* %476, align 8
  %bf.lshr990 = lshr i64 %bf.load989, 23
  %bf.clear991 = and i64 %bf.lshr990, 7
  %bf.cast992 = trunc i64 %bf.clear991 to i32
  %cmp993 = icmp eq i32 %bf.cast992, 3
  br i1 %cmp993, label %cond.true.995, label %cond.false.999

cond.true.995:                                    ; preds = %lor.lhs.false.987, %land.lhs.true.979
  %477 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal996 = getelementptr inbounds %struct.frame, %struct.frame* %477, i32 0, i32 61
  %478 = load %struct.terminal*, %struct.terminal** %terminal996, align 8
  %display_info997 = getelementptr inbounds %struct.terminal, %struct.terminal* %478, i32 0, i32 12
  %tty998 = bitcast %union.display_info* %display_info997 to %struct.tty_display_info**
  %479 = load %struct.tty_display_info*, %struct.tty_display_info** %tty998, align 8
  br label %cond.end.1000

cond.false.999:                                   ; preds = %lor.lhs.false.987
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.1000

cond.end.1000:                                    ; preds = %480, %cond.true.995
  %cond1001 = phi %struct.tty_display_info* [ %479, %cond.true.995 ], [ null, %480 ]
  %char_ins_del_ok1002 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond1001, i32 0, i32 75
  %bf.load1003 = load i8, i8* %char_ins_del_ok1002, align 4
  %bf.lshr1004 = lshr i8 %bf.load1003, 5
  %bf.clear1005 = and i8 %bf.lshr1004, 1
  %bf.cast1006 = trunc i8 %bf.clear1005 to i1
  br i1 %bf.cast1006, label %lor.lhs.false.1007, label %if.then.1017

lor.lhs.false.1007:                               ; preds = %cond.end.1000
  %481 = load i32, i32* %begmatch, align 4
  %482 = load i32, i32* %endmatch, align 4
  %add1008 = add nsw i32 %481, %482
  %483 = load i32, i32* %nsp, align 4
  %484 = load i32, i32* %osp, align 4
  %sub1009 = sub nsw i32 %483, %484
  %idxprom1010 = sext i32 %sub1009 to i64
  %485 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %total_cols1011 = getelementptr inbounds %struct.frame, %struct.frame* %485, i32 0, i32 38
  %486 = load i32, i32* %total_cols1011, align 4
  %idxprom1012 = sext i32 %486 to i64
  %487 = load i32*, i32** @char_ins_del_vector, align 8
  %arrayidx1013 = getelementptr inbounds i32, i32* %487, i64 %idxprom1012
  %arrayidx1014 = getelementptr inbounds i32, i32* %arrayidx1013, i64 %idxprom1010
  %488 = load i32, i32* %arrayidx1014, align 4
  %cmp1015 = icmp sle i32 %add1008, %488
  br i1 %cmp1015, label %if.then.1017, label %if.end.1024

if.then.1017:                                     ; preds = %lor.lhs.false.1007, %cond.end.1000
  store i32 0, i32* %begmatch, align 4
  store i32 0, i32* %endmatch, align 4
  %489 = load i32, i32* %osp, align 4
  %490 = load i32, i32* %nsp, align 4
  %cmp1018 = icmp slt i32 %489, %490
  br i1 %cmp1018, label %cond.true.1020, label %cond.false.1021

cond.true.1020:                                   ; preds = %if.then.1017
  %491 = load i32, i32* %osp, align 4
  br label %cond.end.1022

cond.false.1021:                                  ; preds = %if.then.1017
  %492 = load i32, i32* %nsp, align 4
  br label %cond.end.1022

cond.end.1022:                                    ; preds = %cond.false.1021, %cond.true.1020
  %cond1023 = phi i32 [ %491, %cond.true.1020 ], [ %492, %cond.false.1021 ]
  store i32 %cond1023, i32* %nsp, align 4
  store i32 %cond1023, i32* %osp, align 4
  br label %if.end.1024

if.end.1024:                                      ; preds = %cond.end.1022, %lor.lhs.false.1007, %if.end.976
  %493 = load i32, i32* %osp, align 4
  %494 = load i32, i32* %nsp, align 4
  %cmp1025 = icmp sgt i32 %493, %494
  br i1 %cmp1025, label %if.then.1027, label %if.else.1029

if.then.1027:                                     ; preds = %if.end.1024
  %495 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %496 = load i32, i32* %vpos.addr, align 4
  %497 = load i32, i32* %nsp, align 4
  call void @cursor_to(%struct.frame* %495, i32 %496, i32 %497)
  %498 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %499 = load i32, i32* %osp, align 4
  %500 = load i32, i32* %nsp, align 4
  %sub1028 = sub nsw i32 %499, %500
  call void @delete_glyphs(%struct.frame* %498, i32 %sub1028)
  br label %if.end.1051

if.else.1029:                                     ; preds = %if.end.1024
  %501 = load i32, i32* %nsp, align 4
  %502 = load i32, i32* %osp, align 4
  %cmp1030 = icmp sgt i32 %501, %502
  br i1 %cmp1030, label %if.then.1032, label %if.end.1050

if.then.1032:                                     ; preds = %if.else.1029
  %503 = load i32, i32* %endmatch, align 4
  %tobool1033 = icmp ne i32 %503, 0
  br i1 %tobool1033, label %land.lhs.true.1034, label %if.end.1048

land.lhs.true.1034:                               ; preds = %if.then.1032
  %504 = load i32, i32* %nlen, align 4
  %505 = load i32, i32* %olen, align 4
  %506 = load i32, i32* %nsp, align 4
  %add1035 = add nsw i32 %505, %506
  %507 = load i32, i32* %osp, align 4
  %sub1036 = sub nsw i32 %add1035, %507
  %cmp1037 = icmp slt i32 %504, %sub1036
  br i1 %cmp1037, label %if.then.1039, label %if.end.1048

if.then.1039:                                     ; preds = %land.lhs.true.1034
  %508 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %509 = load i32, i32* %vpos.addr, align 4
  %510 = load i32, i32* %nlen, align 4
  %511 = load i32, i32* %endmatch, align 4
  %sub1040 = sub nsw i32 %510, %511
  %512 = load i32, i32* %osp, align 4
  %add1041 = add nsw i32 %sub1040, %512
  %513 = load i32, i32* %nsp, align 4
  %sub1042 = sub nsw i32 %add1041, %513
  call void @cursor_to(%struct.frame* %508, i32 %509, i32 %sub1042)
  %514 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %515 = load i32, i32* %olen, align 4
  %516 = load i32, i32* %nsp, align 4
  %add1043 = add nsw i32 %515, %516
  %517 = load i32, i32* %osp, align 4
  %sub1044 = sub nsw i32 %add1043, %517
  %518 = load i32, i32* %nlen, align 4
  %sub1045 = sub nsw i32 %sub1044, %518
  call void @delete_glyphs(%struct.frame* %514, i32 %sub1045)
  %519 = load i32, i32* %nlen, align 4
  %520 = load i32, i32* %nsp, align 4
  %521 = load i32, i32* %osp, align 4
  %sub1046 = sub nsw i32 %520, %521
  %sub1047 = sub nsw i32 %519, %sub1046
  store i32 %sub1047, i32* %olen, align 4
  br label %if.end.1048

if.end.1048:                                      ; preds = %if.then.1039, %land.lhs.true.1034, %if.then.1032
  %522 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %523 = load i32, i32* %vpos.addr, align 4
  %524 = load i32, i32* %osp, align 4
  call void @cursor_to(%struct.frame* %522, i32 %523, i32 %524)
  %525 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %526 = load i32, i32* %nsp, align 4
  %527 = load i32, i32* %osp, align 4
  %sub1049 = sub nsw i32 %526, %527
  call void @insert_glyphs(%struct.frame* %525, %struct.glyph* null, i32 %sub1049)
  br label %if.end.1050

if.end.1050:                                      ; preds = %if.end.1048, %if.else.1029
  br label %if.end.1051

if.end.1051:                                      ; preds = %if.end.1050, %if.then.1027
  %528 = load i32, i32* %nsp, align 4
  %529 = load i32, i32* %osp, align 4
  %sub1052 = sub nsw i32 %528, %529
  %530 = load i32, i32* %olen, align 4
  %add1053 = add nsw i32 %530, %sub1052
  store i32 %add1053, i32* %olen, align 4
  %531 = load i32, i32* %nsp, align 4
  %532 = load i32, i32* %begmatch, align 4
  %add1054 = add nsw i32 %531, %532
  %533 = load i32, i32* %endmatch, align 4
  %add1055 = add nsw i32 %add1054, %533
  store i32 %add1055, i32* %tem, align 4
  %534 = load i32, i32* %nlen, align 4
  %535 = load i32, i32* %tem, align 4
  %cmp1056 = icmp ne i32 %534, %535
  br i1 %cmp1056, label %if.then.1061, label %lor.lhs.false.1058

lor.lhs.false.1058:                               ; preds = %if.end.1051
  %536 = load i32, i32* %olen, align 4
  %537 = load i32, i32* %tem, align 4
  %cmp1059 = icmp ne i32 %536, %537
  br i1 %cmp1059, label %if.then.1061, label %if.end.1134

if.then.1061:                                     ; preds = %lor.lhs.false.1058, %if.end.1051
  %538 = load i32, i32* %endmatch, align 4
  %tobool1062 = icmp ne i32 %538, 0
  br i1 %tobool1062, label %lor.lhs.false.1063, label %if.then.1066

lor.lhs.false.1063:                               ; preds = %if.then.1061
  %539 = load i32, i32* %nlen, align 4
  %540 = load i32, i32* %olen, align 4
  %cmp1064 = icmp eq i32 %539, %540
  br i1 %cmp1064, label %if.then.1066, label %if.else.1083

if.then.1066:                                     ; preds = %lor.lhs.false.1063, %if.then.1061
  %541 = load i32, i32* %nlen, align 4
  %542 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %total_cols1067 = getelementptr inbounds %struct.frame, %struct.frame* %542, i32 0, i32 38
  %543 = load i32, i32* %total_cols1067, align 4
  %cmp1068 = icmp eq i32 %541, %543
  br i1 %cmp1068, label %if.then.1070, label %if.end.1071

if.then.1070:                                     ; preds = %if.then.1066
  store i32 0, i32* %olen, align 4
  br label %if.end.1071

if.end.1071:                                      ; preds = %if.then.1070, %if.then.1066
  %544 = load i32, i32* %nlen, align 4
  %545 = load i32, i32* %tem, align 4
  %sub1072 = sub nsw i32 %544, %545
  %cmp1073 = icmp sgt i32 %sub1072, 0
  br i1 %cmp1073, label %if.then.1075, label %if.end.1082

if.then.1075:                                     ; preds = %if.end.1071
  %546 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %547 = load i32, i32* %vpos.addr, align 4
  %548 = load i32, i32* %nsp, align 4
  %549 = load i32, i32* %begmatch, align 4
  %add1076 = add nsw i32 %548, %549
  call void @cursor_to(%struct.frame* %546, i32 %547, i32 %add1076)
  %550 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %551 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %552 = load i32, i32* %nsp, align 4
  %idx.ext1077 = sext i32 %552 to i64
  %add.ptr1078 = getelementptr inbounds %struct.glyph, %struct.glyph* %551, i64 %idx.ext1077
  %553 = load i32, i32* %begmatch, align 4
  %idx.ext1079 = sext i32 %553 to i64
  %add.ptr1080 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr1078, i64 %idx.ext1079
  %554 = load i32, i32* %nlen, align 4
  %555 = load i32, i32* %tem, align 4
  %sub1081 = sub nsw i32 %554, %555
  call void @write_glyphs(%struct.frame* %550, %struct.glyph* %add.ptr1080, i32 %sub1081)
  br label %if.end.1082

if.end.1082:                                      ; preds = %if.then.1075, %if.end.1071
  br label %if.end.1133

if.else.1083:                                     ; preds = %lor.lhs.false.1063
  %556 = load i32, i32* %nlen, align 4
  %557 = load i32, i32* %olen, align 4
  %cmp1084 = icmp sgt i32 %556, %557
  br i1 %cmp1084, label %if.then.1086, label %if.else.1120

if.then.1086:                                     ; preds = %if.else.1083
  %558 = load i32, i32* %olen, align 4
  %559 = load i32, i32* %tem, align 4
  %sub1087 = sub nsw i32 %558, %559
  store i32 %sub1087, i32* %out, align 4
  %560 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %561 = load i32, i32* %vpos.addr, align 4
  %562 = load i32, i32* %nsp, align 4
  %563 = load i32, i32* %begmatch, align 4
  %add1088 = add nsw i32 %562, %563
  call void @cursor_to(%struct.frame* %560, i32 %561, i32 %add1088)
  br label %while.cond.1089

while.cond.1089:                                  ; preds = %while.body.1099, %if.then.1086
  %564 = load i32, i32* %nsp, align 4
  %565 = load i32, i32* %begmatch, align 4
  %add1090 = add nsw i32 %564, %565
  %566 = load i32, i32* %out, align 4
  %add1091 = add nsw i32 %add1090, %566
  %idxprom1092 = sext i32 %add1091 to i64
  %567 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %arrayidx1093 = getelementptr inbounds %struct.glyph, %struct.glyph* %567, i64 %idxprom1092
  %padding_p1094 = getelementptr inbounds %struct.glyph, %struct.glyph* %arrayidx1093, i32 0, i32 6
  %568 = bitcast i24* %padding_p1094 to i32*
  %bf.load1095 = load i32, i32* %568, align 8
  %bf.lshr1096 = lshr i32 %bf.load1095, 7
  %bf.clear1097 = and i32 %bf.lshr1096, 1
  %bf.cast1098 = trunc i32 %bf.clear1097 to i1
  br i1 %bf.cast1098, label %while.body.1099, label %while.end.1101

while.body.1099:                                  ; preds = %while.cond.1089
  %569 = load i32, i32* %out, align 4
  %dec1100 = add nsw i32 %569, -1
  store i32 %dec1100, i32* %out, align 4
  br label %while.cond.1089

while.end.1101:                                   ; preds = %while.cond.1089
  %570 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %571 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %572 = load i32, i32* %nsp, align 4
  %idx.ext1102 = sext i32 %572 to i64
  %add.ptr1103 = getelementptr inbounds %struct.glyph, %struct.glyph* %571, i64 %idx.ext1102
  %573 = load i32, i32* %begmatch, align 4
  %idx.ext1104 = sext i32 %573 to i64
  %add.ptr1105 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr1103, i64 %idx.ext1104
  %574 = load i32, i32* %out, align 4
  call void @write_glyphs(%struct.frame* %570, %struct.glyph* %add.ptr1105, i32 %574)
  %575 = load i32, i32* %olen, align 4
  %576 = load i32, i32* %tem, align 4
  %sub1106 = sub nsw i32 %575, %576
  %577 = load i32, i32* %out, align 4
  %sub1107 = sub nsw i32 %sub1106, %577
  store i32 %sub1107, i32* %del, align 4
  %578 = load i32, i32* %del, align 4
  %cmp1108 = icmp sgt i32 %578, 0
  br i1 %cmp1108, label %if.then.1110, label %if.end.1111

if.then.1110:                                     ; preds = %while.end.1101
  %579 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %580 = load i32, i32* %del, align 4
  call void @delete_glyphs(%struct.frame* %579, i32 %580)
  br label %if.end.1111

if.end.1111:                                      ; preds = %if.then.1110, %while.end.1101
  %581 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %582 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %583 = load i32, i32* %nsp, align 4
  %idx.ext1112 = sext i32 %583 to i64
  %add.ptr1113 = getelementptr inbounds %struct.glyph, %struct.glyph* %582, i64 %idx.ext1112
  %584 = load i32, i32* %begmatch, align 4
  %idx.ext1114 = sext i32 %584 to i64
  %add.ptr1115 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr1113, i64 %idx.ext1114
  %585 = load i32, i32* %out, align 4
  %idx.ext1116 = sext i32 %585 to i64
  %add.ptr1117 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr1115, i64 %idx.ext1116
  %586 = load i32, i32* %nlen, align 4
  %587 = load i32, i32* %olen, align 4
  %sub1118 = sub nsw i32 %586, %587
  %588 = load i32, i32* %del, align 4
  %add1119 = add nsw i32 %sub1118, %588
  call void @insert_glyphs(%struct.frame* %581, %struct.glyph* %add.ptr1117, i32 %add1119)
  %589 = load i32, i32* %nlen, align 4
  store i32 %589, i32* %olen, align 4
  br label %if.end.1132

if.else.1120:                                     ; preds = %if.else.1083
  %590 = load i32, i32* %olen, align 4
  %591 = load i32, i32* %nlen, align 4
  %cmp1121 = icmp sgt i32 %590, %591
  br i1 %cmp1121, label %if.then.1123, label %if.end.1131

if.then.1123:                                     ; preds = %if.else.1120
  %592 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %593 = load i32, i32* %vpos.addr, align 4
  %594 = load i32, i32* %nsp, align 4
  %595 = load i32, i32* %begmatch, align 4
  %add1124 = add nsw i32 %594, %595
  call void @cursor_to(%struct.frame* %592, i32 %593, i32 %add1124)
  %596 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %597 = load %struct.glyph*, %struct.glyph** %nbody, align 8
  %598 = load i32, i32* %nsp, align 4
  %idx.ext1125 = sext i32 %598 to i64
  %add.ptr1126 = getelementptr inbounds %struct.glyph, %struct.glyph* %597, i64 %idx.ext1125
  %599 = load i32, i32* %begmatch, align 4
  %idx.ext1127 = sext i32 %599 to i64
  %add.ptr1128 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr1126, i64 %idx.ext1127
  %600 = load i32, i32* %nlen, align 4
  %601 = load i32, i32* %tem, align 4
  %sub1129 = sub nsw i32 %600, %601
  call void @write_glyphs(%struct.frame* %596, %struct.glyph* %add.ptr1128, i32 %sub1129)
  %602 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %603 = load i32, i32* %olen, align 4
  %604 = load i32, i32* %nlen, align 4
  %sub1130 = sub nsw i32 %603, %604
  call void @delete_glyphs(%struct.frame* %602, i32 %sub1130)
  %605 = load i32, i32* %nlen, align 4
  store i32 %605, i32* %olen, align 4
  br label %if.end.1131

if.end.1131:                                      ; preds = %if.then.1123, %if.else.1120
  br label %if.end.1132

if.end.1132:                                      ; preds = %if.end.1131, %if.end.1111
  br label %if.end.1133

if.end.1133:                                      ; preds = %if.end.1132, %if.end.1082
  br label %if.end.1134

if.end.1134:                                      ; preds = %if.end.1133, %lor.lhs.false.1058
  br label %just_erase

just_erase:                                       ; preds = %if.end.1134, %if.then.76
  %606 = load i32, i32* %olen, align 4
  %607 = load i32, i32* %nlen, align 4
  %cmp1135 = icmp sgt i32 %606, %607
  br i1 %cmp1135, label %if.then.1137, label %if.end.1138

if.then.1137:                                     ; preds = %just_erase
  %608 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %609 = load i32, i32* %vpos.addr, align 4
  %610 = load i32, i32* %nlen, align 4
  call void @cursor_to(%struct.frame* %608, i32 %609, i32 %610)
  %611 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %612 = load i32, i32* %olen, align 4
  call void @clear_end_of_line(%struct.frame* %611, i32 %612)
  br label %if.end.1138

if.end.1138:                                      ; preds = %if.then.1137, %just_erase
  %613 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %614 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %615 = load i32, i32* %vpos.addr, align 4
  call void @make_current(%struct.glyph_matrix* %613, %struct.glyph_matrix* %614, i32 %615)
  br label %return

return:                                           ; preds = %if.end.1138, %if.end.649, %if.end.635, %if.end.123
  ret void
}

; Function Attrs: nounwind
declare i64 @__fpending(%struct._IO_FILE*) #6

; Function Attrs: nounwind uwtable
define internal i32 @line_hash_code(%struct.frame* %f, %struct.glyph_row* %row) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %row.addr = alloca %struct.glyph_row*, align 8
  %hash = alloca i32, align 4
  %glyph = alloca %struct.glyph*, align 8
  %end = alloca %struct.glyph*, align 8
  %c = alloca i32, align 4
  %face_id = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.glyph_row* %row, %struct.glyph_row** %row.addr, align 8
  store i32 0, i32* %hash, align 4
  %0 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %enabled_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %0, i32 0, i32 22
  %1 = bitcast i40* %enabled_p to i64*
  %bf.load = load i64, i64* %1, align 4
  %bf.lshr = lshr i64 %bf.load, 10
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %if.then, label %if.end.34

if.then:                                          ; preds = %entry
  %2 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %glyphs = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %2, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs, i32 0, i64 1
  %3 = load %struct.glyph*, %struct.glyph** %arrayidx, align 8
  store %struct.glyph* %3, %struct.glyph** %glyph, align 8
  %4 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %5 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %used = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %5, i32 0, i32 1
  %arrayidx1 = getelementptr inbounds [4 x i16], [4 x i16]* %used, i32 0, i64 1
  %6 = load i16, i16* %arrayidx1, align 2
  %conv = sext i16 %6 to i32
  %idx.ext = sext i32 %conv to i64
  %add.ptr = getelementptr inbounds %struct.glyph, %struct.glyph* %4, i64 %idx.ext
  store %struct.glyph* %add.ptr, %struct.glyph** %end, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.then
  %7 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %8 = load %struct.glyph*, %struct.glyph** %end, align 8
  %cmp = icmp ult %struct.glyph* %7, %8
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %u = getelementptr inbounds %struct.glyph, %struct.glyph* %9, i32 0, i32 9
  %ch = bitcast %union.anon.1* %u to i32*
  %10 = load i32, i32* %ch, align 4
  store i32 %10, i32* %c, align 4
  %11 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %face_id3 = getelementptr inbounds %struct.glyph, %struct.glyph* %11, i32 0, i32 7
  %12 = bitcast i24* %face_id3 to i32*
  %bf.load4 = load i32, i32* %12, align 4
  %bf.clear5 = and i32 %bf.load4, 1048575
  store i32 %bf.clear5, i32* %face_id, align 4
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 26
  %14 = bitcast i48* %output_method to i64*
  %bf.load6 = load i64, i64* %14, align 8
  %bf.lshr7 = lshr i64 %bf.load6, 23
  %bf.clear8 = and i64 %bf.lshr7, 7
  %bf.cast9 = trunc i64 %bf.clear8 to i32
  %cmp10 = icmp eq i32 %bf.cast9, 1
  br i1 %cmp10, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %15 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method12 = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 26
  %16 = bitcast i48* %output_method12 to i64*
  %bf.load13 = load i64, i64* %16, align 8
  %bf.lshr14 = lshr i64 %bf.load13, 23
  %bf.clear15 = and i64 %bf.lshr14, 7
  %bf.cast16 = trunc i64 %bf.clear15 to i32
  %cmp17 = icmp eq i32 %bf.cast16, 3
  br i1 %cmp17, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %while.body
  %17 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 61
  %18 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %18, i32 0, i32 12
  %tty = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %19 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %20, %cond.true
  %cond = phi %struct.tty_display_info* [ %19, %cond.true ], [ null, %20 ]
  %must_write_spaces = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond, i32 0, i32 75
  %bf.load19 = load i8, i8* %must_write_spaces, align 4
  %bf.lshr20 = lshr i8 %bf.load19, 3
  %bf.clear21 = and i8 %bf.lshr20, 1
  %bf.cast22 = trunc i8 %bf.clear21 to i1
  br i1 %bf.cast22, label %if.then.23, label %if.end

if.then.23:                                       ; preds = %cond.end
  %21 = load i32, i32* %c, align 4
  %sub = sub nsw i32 %21, 32
  store i32 %sub, i32* %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.23, %cond.end
  %22 = load i32, i32* %hash, align 4
  %shl = shl i32 %22, 4
  %23 = load i32, i32* %hash, align 4
  %shr = lshr i32 %23, 24
  %add = add i32 %shl, %shr
  %and = and i32 %add, 268435455
  %24 = load i32, i32* %c, align 4
  %add24 = add i32 %and, %24
  store i32 %add24, i32* %hash, align 4
  %25 = load i32, i32* %hash, align 4
  %shl25 = shl i32 %25, 4
  %26 = load i32, i32* %hash, align 4
  %shr26 = lshr i32 %26, 24
  %add27 = add i32 %shl25, %shr26
  %and28 = and i32 %add27, 268435455
  %27 = load i32, i32* %face_id, align 4
  %add29 = add i32 %and28, %27
  store i32 %add29, i32* %hash, align 4
  %28 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %incdec.ptr = getelementptr inbounds %struct.glyph, %struct.glyph* %28, i32 1
  store %struct.glyph* %incdec.ptr, %struct.glyph** %glyph, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %29 = load i32, i32* %hash, align 4
  %cmp30 = icmp eq i32 %29, 0
  br i1 %cmp30, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %while.end
  store i32 1, i32* %hash, align 4
  br label %if.end.33

if.end.33:                                        ; preds = %if.then.32, %while.end
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.33, %entry
  %30 = load i32, i32* %hash, align 4
  ret i32 %30
}

; Function Attrs: nounwind uwtable
define internal i32 @line_draw_cost(%struct.frame* %f, %struct.glyph_matrix* %matrix, i32 %vpos) #0 {
entry:
  %retval = alloca i32, align 4
  %f.addr = alloca %struct.frame*, align 8
  %matrix.addr = alloca %struct.glyph_matrix*, align 8
  %vpos.addr = alloca i32, align 4
  %row = alloca %struct.glyph_row*, align 8
  %beg = alloca %struct.glyph*, align 8
  %end = alloca %struct.glyph*, align 8
  %len = alloca i32, align 4
  %glyph_table_base = alloca i64*, align 8
  %glyph_table_len = alloca i64, align 8
  %g = alloca %struct.GLYPH, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.glyph_matrix* %matrix, %struct.glyph_matrix** %matrix.addr, align 8
  store i32 %vpos, i32* %vpos.addr, align 4
  %0 = load %struct.glyph_matrix*, %struct.glyph_matrix** %matrix.addr, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %0, i32 0, i32 1
  %1 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %2 = load i32, i32* %vpos.addr, align 4
  %idx.ext = sext i32 %2 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %1, i64 %idx.ext
  store %struct.glyph_row* %add.ptr, %struct.glyph_row** %row, align 8
  %3 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %glyphs = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %3, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs, i32 0, i64 1
  %4 = load %struct.glyph*, %struct.glyph** %arrayidx, align 8
  store %struct.glyph* %4, %struct.glyph** %beg, align 8
  %5 = load %struct.glyph*, %struct.glyph** %beg, align 8
  %6 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %used = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %6, i32 0, i32 1
  %arrayidx1 = getelementptr inbounds [4 x i16], [4 x i16]* %used, i32 0, i64 1
  %7 = load i16, i16* %arrayidx1, align 2
  %conv = sext i16 %7 to i32
  %idx.ext2 = sext i32 %conv to i64
  %add.ptr3 = getelementptr inbounds %struct.glyph, %struct.glyph* %5, i64 %idx.ext2
  store %struct.glyph* %add.ptr3, %struct.glyph** %end, align 8
  %8 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 118), align 8
  %call = call zeroext i1 @VECTORP(i64 %8)
  br i1 %call, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %9 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 118), align 8
  %call5 = call %struct.Lisp_Vector* @XVECTOR(i64 %9)
  %contents = getelementptr inbounds %struct.Lisp_Vector, %struct.Lisp_Vector* %call5, i32 0, i32 1
  %arraydecay = getelementptr inbounds [0 x i64], [0 x i64]* %contents, i32 0, i32 0
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64* [ %arraydecay, %cond.true ], [ null, %cond.false ]
  store i64* %cond, i64** %glyph_table_base, align 8
  %10 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 118), align 8
  %call6 = call zeroext i1 @VECTORP(i64 %10)
  br i1 %call6, label %cond.true.8, label %cond.false.10

cond.true.8:                                      ; preds = %cond.end
  %11 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 118), align 8
  %call9 = call i64 @ASIZE(i64 %11)
  br label %cond.end.11

cond.false.10:                                    ; preds = %cond.end
  br label %cond.end.11

cond.end.11:                                      ; preds = %cond.false.10, %cond.true.8
  %cond12 = phi i64 [ %call9, %cond.true.8 ], [ 0, %cond.false.10 ]
  store i64 %cond12, i64* %glyph_table_len, align 8
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 26
  %13 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %13, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 1
  br i1 %cmp, label %cond.true.21, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end.11
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method14 = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 26
  %15 = bitcast i48* %output_method14 to i64*
  %bf.load15 = load i64, i64* %15, align 8
  %bf.lshr16 = lshr i64 %bf.load15, 23
  %bf.clear17 = and i64 %bf.lshr16, 7
  %bf.cast18 = trunc i64 %bf.clear17 to i32
  %cmp19 = icmp eq i32 %bf.cast18, 3
  br i1 %cmp19, label %cond.true.21, label %cond.false.22

cond.true.21:                                     ; preds = %lor.lhs.false, %cond.end.11
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 61
  %17 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %17, i32 0, i32 12
  %tty = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %18 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  br label %cond.end.23

cond.false.22:                                    ; preds = %lor.lhs.false
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end.23

cond.end.23:                                      ; preds = %19, %cond.true.21
  %cond24 = phi %struct.tty_display_info* [ %18, %cond.true.21 ], [ null, %19 ]
  %must_write_spaces = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond24, i32 0, i32 75
  %bf.load25 = load i8, i8* %must_write_spaces, align 4
  %bf.lshr26 = lshr i8 %bf.load25, 3
  %bf.clear27 = and i8 %bf.lshr26, 1
  %bf.cast28 = trunc i8 %bf.clear27 to i1
  br i1 %bf.cast28, label %if.end.59, label %if.then

if.then:                                          ; preds = %cond.end.23
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %20 = load %struct.glyph*, %struct.glyph** %end, align 8
  %21 = load %struct.glyph*, %struct.glyph** %beg, align 8
  %cmp29 = icmp ugt %struct.glyph* %20, %21
  br i1 %cmp29, label %land.rhs, label %land.end.40

land.rhs:                                         ; preds = %while.cond
  %22 = load %struct.glyph*, %struct.glyph** %end, align 8
  %add.ptr31 = getelementptr inbounds %struct.glyph, %struct.glyph* %22, i64 -1
  %u = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr31, i32 0, i32 9
  %ch = bitcast %union.anon.1* %u to i32*
  %23 = load i32, i32* %ch, align 4
  %cmp32 = icmp eq i32 %23, 32
  br i1 %cmp32, label %land.rhs.34, label %land.end

land.rhs.34:                                      ; preds = %land.rhs
  %24 = load %struct.glyph*, %struct.glyph** %end, align 8
  %add.ptr35 = getelementptr inbounds %struct.glyph, %struct.glyph* %24, i64 -1
  %face_id = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr35, i32 0, i32 7
  %25 = bitcast i24* %face_id to i32*
  %bf.load36 = load i32, i32* %25, align 4
  %bf.clear37 = and i32 %bf.load36, 1048575
  %cmp38 = icmp eq i32 %bf.clear37, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs.34, %land.rhs
  %26 = phi i1 [ false, %land.rhs ], [ %cmp38, %land.rhs.34 ]
  br label %land.end.40

land.end.40:                                      ; preds = %land.end, %while.cond
  %27 = phi i1 [ false, %while.cond ], [ %26, %land.end ]
  br i1 %27, label %while.body, label %while.end

while.body:                                       ; preds = %land.end.40
  %28 = load %struct.glyph*, %struct.glyph** %end, align 8
  %incdec.ptr = getelementptr inbounds %struct.glyph, %struct.glyph* %28, i32 -1
  store %struct.glyph* %incdec.ptr, %struct.glyph** %end, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end.40
  %29 = load %struct.glyph*, %struct.glyph** %end, align 8
  %30 = load %struct.glyph*, %struct.glyph** %beg, align 8
  %cmp41 = icmp eq %struct.glyph* %29, %30
  br i1 %cmp41, label %if.then.43, label %if.end

if.then.43:                                       ; preds = %while.end
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %while.end
  br label %while.cond.44

while.cond.44:                                    ; preds = %while.body.56, %if.end
  %31 = load %struct.glyph*, %struct.glyph** %beg, align 8
  %u45 = getelementptr inbounds %struct.glyph, %struct.glyph* %31, i32 0, i32 9
  %ch46 = bitcast %union.anon.1* %u45 to i32*
  %32 = load i32, i32* %ch46, align 4
  %cmp47 = icmp eq i32 %32, 32
  br i1 %cmp47, label %land.rhs.49, label %land.end.55

land.rhs.49:                                      ; preds = %while.cond.44
  %33 = load %struct.glyph*, %struct.glyph** %beg, align 8
  %face_id50 = getelementptr inbounds %struct.glyph, %struct.glyph* %33, i32 0, i32 7
  %34 = bitcast i24* %face_id50 to i32*
  %bf.load51 = load i32, i32* %34, align 4
  %bf.clear52 = and i32 %bf.load51, 1048575
  %cmp53 = icmp eq i32 %bf.clear52, 0
  br label %land.end.55

land.end.55:                                      ; preds = %land.rhs.49, %while.cond.44
  %35 = phi i1 [ false, %while.cond.44 ], [ %cmp53, %land.rhs.49 ]
  br i1 %35, label %while.body.56, label %while.end.58

while.body.56:                                    ; preds = %land.end.55
  %36 = load %struct.glyph*, %struct.glyph** %beg, align 8
  %incdec.ptr57 = getelementptr inbounds %struct.glyph, %struct.glyph* %36, i32 1
  store %struct.glyph* %incdec.ptr57, %struct.glyph** %beg, align 8
  br label %while.cond.44

while.end.58:                                     ; preds = %land.end.55
  br label %if.end.59

if.end.59:                                        ; preds = %while.end.58, %cond.end.23
  %37 = load i64*, i64** %glyph_table_base, align 8
  %cmp60 = icmp eq i64* %37, null
  br i1 %cmp60, label %if.then.62, label %if.else

if.then.62:                                       ; preds = %if.end.59
  %38 = load %struct.glyph*, %struct.glyph** %end, align 8
  %39 = load %struct.glyph*, %struct.glyph** %beg, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.glyph* %38 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.glyph* %39 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 48
  %conv63 = trunc i64 %sub.ptr.div to i32
  store i32 %conv63, i32* %len, align 4
  br label %if.end.112

if.else:                                          ; preds = %if.end.59
  store i32 0, i32* %len, align 4
  br label %while.cond.64

while.cond.64:                                    ; preds = %if.end.109, %if.else
  %40 = load %struct.glyph*, %struct.glyph** %beg, align 8
  %41 = load %struct.glyph*, %struct.glyph** %end, align 8
  %cmp65 = icmp ult %struct.glyph* %40, %41
  br i1 %cmp65, label %while.body.67, label %while.end.111

while.body.67:                                    ; preds = %while.cond.64
  br label %do.body

do.body:                                          ; preds = %while.body.67
  %42 = load %struct.glyph*, %struct.glyph** %beg, align 8
  %u68 = getelementptr inbounds %struct.glyph, %struct.glyph* %42, i32 0, i32 9
  %ch69 = bitcast %union.anon.1* %u68 to i32*
  %43 = load i32, i32* %ch69, align 4
  %cmp70 = icmp ult i32 %43, 256
  br i1 %cmp70, label %if.then.72, label %if.else.80

if.then.72:                                       ; preds = %do.body
  %44 = load %struct.glyph*, %struct.glyph** %beg, align 8
  %u73 = getelementptr inbounds %struct.glyph, %struct.glyph* %44, i32 0, i32 9
  %ch74 = bitcast %union.anon.1* %u73 to i32*
  %45 = load i32, i32* %ch74, align 4
  %ch75 = getelementptr inbounds %struct.GLYPH, %struct.GLYPH* %g, i32 0, i32 0
  store i32 %45, i32* %ch75, align 4
  %46 = load %struct.glyph*, %struct.glyph** %beg, align 8
  %face_id76 = getelementptr inbounds %struct.glyph, %struct.glyph* %46, i32 0, i32 7
  %47 = bitcast i24* %face_id76 to i32*
  %bf.load77 = load i32, i32* %47, align 4
  %bf.clear78 = and i32 %bf.load77, 1048575
  %face_id79 = getelementptr inbounds %struct.GLYPH, %struct.GLYPH* %g, i32 0, i32 1
  store i32 %bf.clear78, i32* %face_id79, align 4
  br label %if.end.83

if.else.80:                                       ; preds = %do.body
  %ch81 = getelementptr inbounds %struct.GLYPH, %struct.GLYPH* %g, i32 0, i32 0
  store i32 -1, i32* %ch81, align 4
  %face_id82 = getelementptr inbounds %struct.GLYPH, %struct.GLYPH* %g, i32 0, i32 1
  store i32 0, i32* %face_id82, align 4
  br label %if.end.83

if.end.83:                                        ; preds = %if.else.80, %if.then.72
  br label %do.end

do.end:                                           ; preds = %if.end.83
  %48 = bitcast %struct.GLYPH* %g to i64*
  %49 = load i64, i64* %48, align 4
  %call84 = call i32 @GLYPH_CHAR(i64 %49)
  %cmp85 = icmp slt i32 %call84, 0
  br i1 %cmp85, label %if.then.100, label %lor.lhs.false.87

lor.lhs.false.87:                                 ; preds = %do.end
  %50 = bitcast %struct.GLYPH* %g to i64*
  %51 = load i64, i64* %50, align 4
  %call88 = call i32 @GLYPH_FACE(i64 %51)
  %cmp89 = icmp ne i32 %call88, 0
  br i1 %cmp89, label %if.then.100, label %lor.lhs.false.91

lor.lhs.false.91:                                 ; preds = %lor.lhs.false.87
  %52 = bitcast %struct.GLYPH* %g to i64*
  %53 = load i64, i64* %52, align 4
  %call92 = call i32 @GLYPH_CHAR(i64 %53)
  %conv93 = sext i32 %call92 to i64
  %54 = load i64, i64* %glyph_table_len, align 8
  %cmp94 = icmp sge i64 %conv93, %54
  br i1 %cmp94, label %if.then.100, label %lor.lhs.false.96

lor.lhs.false.96:                                 ; preds = %lor.lhs.false.91
  %55 = bitcast %struct.GLYPH* %g to i64*
  %56 = load i64, i64* %55, align 4
  %call97 = call i32 @GLYPH_CHAR(i64 %56)
  %idxprom = sext i32 %call97 to i64
  %57 = load i64*, i64** %glyph_table_base, align 8
  %arrayidx98 = getelementptr inbounds i64, i64* %57, i64 %idxprom
  %58 = load i64, i64* %arrayidx98, align 8
  %call99 = call zeroext i1 @STRINGP(i64 %58)
  br i1 %call99, label %if.else.101, label %if.then.100

if.then.100:                                      ; preds = %lor.lhs.false.96, %lor.lhs.false.91, %lor.lhs.false.87, %do.end
  %59 = load i32, i32* %len, align 4
  %add = add nsw i32 %59, 1
  store i32 %add, i32* %len, align 4
  br label %if.end.109

if.else.101:                                      ; preds = %lor.lhs.false.96
  %60 = bitcast %struct.GLYPH* %g to i64*
  %61 = load i64, i64* %60, align 4
  %call102 = call i32 @GLYPH_CHAR(i64 %61)
  %idxprom103 = sext i32 %call102 to i64
  %62 = load i64*, i64** %glyph_table_base, align 8
  %arrayidx104 = getelementptr inbounds i64, i64* %62, i64 %idxprom103
  %63 = load i64, i64* %arrayidx104, align 8
  %call105 = call i64 @SCHARS(i64 %63)
  %64 = load i32, i32* %len, align 4
  %conv106 = sext i32 %64 to i64
  %add107 = add nsw i64 %conv106, %call105
  %conv108 = trunc i64 %add107 to i32
  store i32 %conv108, i32* %len, align 4
  br label %if.end.109

if.end.109:                                       ; preds = %if.else.101, %if.then.100
  %65 = load %struct.glyph*, %struct.glyph** %beg, align 8
  %incdec.ptr110 = getelementptr inbounds %struct.glyph, %struct.glyph* %65, i32 1
  store %struct.glyph* %incdec.ptr110, %struct.glyph** %beg, align 8
  br label %while.cond.64

while.end.111:                                    ; preds = %while.cond.64
  br label %if.end.112

if.end.112:                                       ; preds = %while.end.111, %if.then.62
  %66 = load i32, i32* %len, align 4
  store i32 %66, i32* %retval
  br label %return

return:                                           ; preds = %if.end.112, %if.then.43
  %67 = load i32, i32* %retval
  ret i32 %67
}

declare i32 @scrolling_max_lines_saved(i32, i32, i32*, i32*, i32*) #1

declare void @scrolling_1(%struct.frame*, i32, i32, i32, i32*, i32*, i32*, i32*, i32) #1

declare %struct.Lisp_Vector* @XVECTOR(i64) #1

declare i64 @SCHARS(i64) #1

declare void @write_glyphs(%struct.frame*, %struct.glyph*, i32) #1

declare void @clear_end_of_line(%struct.frame*, i32) #1

; Function Attrs: nounwind uwtable
define internal i32 @count_blanks(%struct.glyph* %r, i32 %len) #0 {
entry:
  %r.addr = alloca %struct.glyph*, align 8
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.glyph* %r, %struct.glyph** %r.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load %struct.glyph*, %struct.glyph** %r.addr, align 8
  %arrayidx = getelementptr inbounds %struct.glyph, %struct.glyph* %3, i64 %idxprom
  %u = getelementptr inbounds %struct.glyph, %struct.glyph* %arrayidx, i32 0, i32 9
  %ch = bitcast %union.anon.1* %u to i32*
  %4 = load i32, i32* %ch, align 4
  %cmp1 = icmp eq i32 %4, 32
  br i1 %cmp1, label %land.lhs.true, label %if.then

land.lhs.true:                                    ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %idxprom2 = sext i32 %5 to i64
  %6 = load %struct.glyph*, %struct.glyph** %r.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.glyph, %struct.glyph* %6, i64 %idxprom2
  %face_id = getelementptr inbounds %struct.glyph, %struct.glyph* %arrayidx3, i32 0, i32 7
  %7 = bitcast i24* %face_id to i32*
  %bf.load = load i32, i32* %7, align 4
  %bf.clear = and i32 %bf.load, 1048575
  %cmp4 = icmp eq i32 %bf.clear, 0
  br i1 %cmp4, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true, %for.body
  br label %for.end

if.end:                                           ; preds = %land.lhs.true
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %9 = load i32, i32* %i, align 4
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define internal i32 @count_match(%struct.glyph* %str1, %struct.glyph* %end1, %struct.glyph* %str2, %struct.glyph* %end2) #0 {
entry:
  %str1.addr = alloca %struct.glyph*, align 8
  %end1.addr = alloca %struct.glyph*, align 8
  %str2.addr = alloca %struct.glyph*, align 8
  %end2.addr = alloca %struct.glyph*, align 8
  %p1 = alloca %struct.glyph*, align 8
  %p2 = alloca %struct.glyph*, align 8
  store %struct.glyph* %str1, %struct.glyph** %str1.addr, align 8
  store %struct.glyph* %end1, %struct.glyph** %end1.addr, align 8
  store %struct.glyph* %str2, %struct.glyph** %str2.addr, align 8
  store %struct.glyph* %end2, %struct.glyph** %end2.addr, align 8
  %0 = load %struct.glyph*, %struct.glyph** %str1.addr, align 8
  store %struct.glyph* %0, %struct.glyph** %p1, align 8
  %1 = load %struct.glyph*, %struct.glyph** %str2.addr, align 8
  store %struct.glyph* %1, %struct.glyph** %p2, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load %struct.glyph*, %struct.glyph** %p1, align 8
  %3 = load %struct.glyph*, %struct.glyph** %end1.addr, align 8
  %cmp = icmp ult %struct.glyph* %2, %3
  br i1 %cmp, label %land.lhs.true, label %land.end.21

land.lhs.true:                                    ; preds = %while.cond
  %4 = load %struct.glyph*, %struct.glyph** %p2, align 8
  %5 = load %struct.glyph*, %struct.glyph** %end2.addr, align 8
  %cmp1 = icmp ult %struct.glyph* %4, %5
  br i1 %cmp1, label %land.rhs, label %land.end.21

land.rhs:                                         ; preds = %land.lhs.true
  %6 = load %struct.glyph*, %struct.glyph** %p1, align 8
  %u = getelementptr inbounds %struct.glyph, %struct.glyph* %6, i32 0, i32 9
  %ch = bitcast %union.anon.1* %u to i32*
  %7 = load i32, i32* %ch, align 4
  %8 = load %struct.glyph*, %struct.glyph** %p2, align 8
  %u2 = getelementptr inbounds %struct.glyph, %struct.glyph* %8, i32 0, i32 9
  %ch3 = bitcast %union.anon.1* %u2 to i32*
  %9 = load i32, i32* %ch3, align 4
  %cmp4 = icmp eq i32 %7, %9
  br i1 %cmp4, label %land.lhs.true.5, label %land.end

land.lhs.true.5:                                  ; preds = %land.rhs
  %10 = load %struct.glyph*, %struct.glyph** %p1, align 8
  %face_id = getelementptr inbounds %struct.glyph, %struct.glyph* %10, i32 0, i32 7
  %11 = bitcast i24* %face_id to i32*
  %bf.load = load i32, i32* %11, align 4
  %bf.clear = and i32 %bf.load, 1048575
  %12 = load %struct.glyph*, %struct.glyph** %p2, align 8
  %face_id6 = getelementptr inbounds %struct.glyph, %struct.glyph* %12, i32 0, i32 7
  %13 = bitcast i24* %face_id6 to i32*
  %bf.load7 = load i32, i32* %13, align 4
  %bf.clear8 = and i32 %bf.load7, 1048575
  %cmp9 = icmp eq i32 %bf.clear, %bf.clear8
  br i1 %cmp9, label %land.rhs.10, label %land.end

land.rhs.10:                                      ; preds = %land.lhs.true.5
  %14 = load %struct.glyph*, %struct.glyph** %p1, align 8
  %padding_p = getelementptr inbounds %struct.glyph, %struct.glyph* %14, i32 0, i32 6
  %15 = bitcast i24* %padding_p to i32*
  %bf.load11 = load i32, i32* %15, align 8
  %bf.lshr = lshr i32 %bf.load11, 7
  %bf.clear12 = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear12 to i1
  %conv = zext i1 %bf.cast to i32
  %16 = load %struct.glyph*, %struct.glyph** %p2, align 8
  %padding_p13 = getelementptr inbounds %struct.glyph, %struct.glyph* %16, i32 0, i32 6
  %17 = bitcast i24* %padding_p13 to i32*
  %bf.load14 = load i32, i32* %17, align 8
  %bf.lshr15 = lshr i32 %bf.load14, 7
  %bf.clear16 = and i32 %bf.lshr15, 1
  %bf.cast17 = trunc i32 %bf.clear16 to i1
  %conv18 = zext i1 %bf.cast17 to i32
  %cmp19 = icmp eq i32 %conv, %conv18
  br label %land.end

land.end:                                         ; preds = %land.rhs.10, %land.lhs.true.5, %land.rhs
  %18 = phi i1 [ false, %land.lhs.true.5 ], [ false, %land.rhs ], [ %cmp19, %land.rhs.10 ]
  br label %land.end.21

land.end.21:                                      ; preds = %land.end, %land.lhs.true, %while.cond
  %19 = phi i1 [ false, %land.lhs.true ], [ false, %while.cond ], [ %18, %land.end ]
  br i1 %19, label %while.body, label %while.end

while.body:                                       ; preds = %land.end.21
  %20 = load %struct.glyph*, %struct.glyph** %p1, align 8
  %incdec.ptr = getelementptr inbounds %struct.glyph, %struct.glyph* %20, i32 1
  store %struct.glyph* %incdec.ptr, %struct.glyph** %p1, align 8
  %21 = load %struct.glyph*, %struct.glyph** %p2, align 8
  %incdec.ptr22 = getelementptr inbounds %struct.glyph, %struct.glyph* %21, i32 1
  store %struct.glyph* %incdec.ptr22, %struct.glyph** %p2, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end.21
  %22 = load %struct.glyph*, %struct.glyph** %p1, align 8
  %23 = load %struct.glyph*, %struct.glyph** %str1.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.glyph* %22 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.glyph* %23 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 48
  %conv23 = trunc i64 %sub.ptr.div to i32
  ret i32 %conv23
}

declare void @delete_glyphs(%struct.frame*, i32) #1

declare void @insert_glyphs(%struct.frame*, %struct.glyph*, i32) #1

declare void @adjust_frame_size(%struct.frame*, i32, i32, i32, i1 zeroext, i64) #1

declare void @deliver_process_signal(i32, void (i32)*) #1

; Function Attrs: nounwind uwtable
define internal void @handle_window_change_signal(i32 %sig) #0 {
entry:
  %sig.addr = alloca i32, align 4
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  %tty = alloca %struct.tty_display_info*, align 8
  %tail = alloca i64, align 8
  %frame = alloca i64, align 8
  store i32 %sig, i32* %sig.addr, align 4
  %0 = load %struct.tty_display_info*, %struct.tty_display_info** @tty_list, align 8
  store %struct.tty_display_info* %0, %struct.tty_display_info** %tty, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.45, %entry
  %1 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %tobool = icmp ne %struct.tty_display_info* %1, null
  br i1 %tobool, label %for.body, label %for.end.46

for.body:                                         ; preds = %for.cond
  %2 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %term_initted = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %2, i32 0, i32 7
  %bf.load = load i8, i8* %term_initted, align 8
  %bf.clear = and i8 %bf.load, 1
  %bf.cast = trunc i8 %bf.clear to i1
  br i1 %bf.cast, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  br label %for.inc.45

if.end:                                           ; preds = %for.body
  %3 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %input = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %3, i32 0, i32 3
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %input, align 8
  %tobool1 = icmp ne %struct._IO_FILE* %4, null
  br i1 %tobool1, label %if.end.3, label %if.then.2

if.then.2:                                        ; preds = %if.end
  br label %for.inc.45

if.end.3:                                         ; preds = %if.end
  %5 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %input4 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %5, i32 0, i32 3
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %input4, align 8
  %call = call i32 @fileno(%struct._IO_FILE* %6) #2
  call void @get_tty_size(i32 %call, i32* %width, i32* %height)
  %7 = load i32, i32* %width, align 4
  %cmp = icmp sgt i32 %7, 5
  br i1 %cmp, label %land.lhs.true, label %if.end.44

land.lhs.true:                                    ; preds = %if.end.3
  %8 = load i32, i32* %height, align 4
  %cmp5 = icmp sgt i32 %8, 2
  br i1 %cmp5, label %if.then.6, label %if.end.44

if.then.6:                                        ; preds = %land.lhs.true
  %9 = load i64, i64* @Vframe_list, align 8
  store i64 %9, i64* %tail, align 8
  br label %for.cond.7

for.cond.7:                                       ; preds = %for.inc, %if.then.6
  %10 = load i64, i64* %tail, align 8
  %and = and i64 %10, 7
  %conv = trunc i64 %and to i32
  %cmp8 = icmp eq i32 %conv, 3
  br i1 %cmp8, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond.7
  %11 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %11, 3
  %12 = inttoptr i64 %sub to i8*
  %13 = bitcast i8* %12 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %13, i32 0, i32 0
  %14 = load i64, i64* %car, align 8
  store i64 %14, i64* %frame, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond.7
  %15 = phi i1 [ false, %for.cond.7 ], [ true, %land.rhs ]
  br i1 %15, label %for.body.10, label %for.end

for.body.10:                                      ; preds = %land.end
  %16 = load i64, i64* %frame, align 8
  %sub11 = sub nsw i64 %16, 5
  %17 = inttoptr i64 %sub11 to i8*
  %18 = bitcast i8* %17 to %struct.frame*
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 26
  %19 = bitcast i48* %output_method to i64*
  %bf.load12 = load i64, i64* %19, align 8
  %bf.lshr = lshr i64 %bf.load12, 23
  %bf.clear13 = and i64 %bf.lshr, 7
  %bf.cast14 = trunc i64 %bf.clear13 to i32
  %cmp15 = icmp eq i32 %bf.cast14, 1
  br i1 %cmp15, label %land.lhs.true.17, label %if.end.42

land.lhs.true.17:                                 ; preds = %for.body.10
  %20 = load i64, i64* %frame, align 8
  %sub18 = sub nsw i64 %20, 5
  %21 = inttoptr i64 %sub18 to i8*
  %22 = bitcast i8* %21 to %struct.frame*
  %output_method19 = getelementptr inbounds %struct.frame, %struct.frame* %22, i32 0, i32 26
  %23 = bitcast i48* %output_method19 to i64*
  %bf.load20 = load i64, i64* %23, align 8
  %bf.lshr21 = lshr i64 %bf.load20, 23
  %bf.clear22 = and i64 %bf.lshr21, 7
  %bf.cast23 = trunc i64 %bf.clear22 to i32
  %cmp24 = icmp eq i32 %bf.cast23, 1
  br i1 %cmp24, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.17
  %24 = load i64, i64* %frame, align 8
  %sub26 = sub nsw i64 %24, 5
  %25 = inttoptr i64 %sub26 to i8*
  %26 = bitcast i8* %25 to %struct.frame*
  %output_method27 = getelementptr inbounds %struct.frame, %struct.frame* %26, i32 0, i32 26
  %27 = bitcast i48* %output_method27 to i64*
  %bf.load28 = load i64, i64* %27, align 8
  %bf.lshr29 = lshr i64 %bf.load28, 23
  %bf.clear30 = and i64 %bf.lshr29, 7
  %bf.cast31 = trunc i64 %bf.clear30 to i32
  %cmp32 = icmp eq i32 %bf.cast31, 3
  br i1 %cmp32, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %land.lhs.true.17
  %28 = load i64, i64* %frame, align 8
  %sub34 = sub nsw i64 %28, 5
  %29 = inttoptr i64 %sub34 to i8*
  %30 = bitcast i8* %29 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 61
  %31 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %31, i32 0, i32 12
  %tty35 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %32 = load %struct.tty_display_info*, %struct.tty_display_info** %tty35, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  call void @emacs_abort() #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %33, %cond.true
  %cond = phi %struct.tty_display_info* [ %32, %cond.true ], [ null, %33 ]
  %34 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %cmp36 = icmp eq %struct.tty_display_info* %cond, %34
  br i1 %cmp36, label %if.then.38, label %if.end.42

if.then.38:                                       ; preds = %cond.end
  %35 = load i64, i64* %frame, align 8
  %sub39 = sub nsw i64 %35, 5
  %36 = inttoptr i64 %sub39 to i8*
  %37 = bitcast i8* %36 to %struct.frame*
  %38 = load i32, i32* %width, align 4
  %39 = load i32, i32* %height, align 4
  %40 = load i64, i64* %frame, align 8
  %sub40 = sub nsw i64 %40, 5
  %41 = inttoptr i64 %sub40 to i8*
  %42 = bitcast i8* %41 to %struct.frame*
  %menu_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %42, i32 0, i32 57
  %43 = load i32, i32* %menu_bar_lines, align 4
  %sub41 = sub nsw i32 %39, %43
  call void @change_frame_size(%struct.frame* %37, i32 %38, i32 %sub41, i1 zeroext false, i1 zeroext true, i1 zeroext false, i1 zeroext false)
  br label %if.end.42

if.end.42:                                        ; preds = %if.then.38, %cond.end, %for.body.10
  br label %for.inc

for.inc:                                          ; preds = %if.end.42
  %44 = load i64, i64* %tail, align 8
  %sub43 = sub nsw i64 %44, 3
  %45 = inttoptr i64 %sub43 to i8*
  %46 = bitcast i8* %45 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %46, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %47 = load i64, i64* %cdr, align 8
  store i64 %47, i64* %tail, align 8
  br label %for.cond.7

for.end:                                          ; preds = %land.end
  br label %if.end.44

if.end.44:                                        ; preds = %for.end, %land.lhs.true, %if.end.3
  br label %for.inc.45

for.inc.45:                                       ; preds = %if.end.44, %if.then.2, %if.then
  %48 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %next = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %48, i32 0, i32 0
  %49 = load %struct.tty_display_info*, %struct.tty_display_info** %next, align 8
  store %struct.tty_display_info* %49, %struct.tty_display_info** %tty, align 8
  br label %for.cond

for.end.46:                                       ; preds = %for.cond
  ret void
}

declare void @get_tty_size(i32, i32*, i32*) #1

; Function Attrs: nounwind
declare i32 @fileno(%struct._IO_FILE*) #6

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind readonly }
attributes #11 = { noreturn nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
