; ModuleID = './src/frame.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.x_display_info = type { %struct.x_display_info*, %struct.terminal*, %struct._XDisplay*, i32, i64, i32, %struct.Screen*, double, double, %struct.Visual*, i64, i32, i32, i64, i64, i64, i64, i64, i64, void (%struct.frame*, i1)*, %struct._GdkCursor*, %struct._XrmHashBucketRec*, i32, i32, %struct._XGC*, %struct.Mouse_HLInfo, i32, i8*, i32, %struct.x_bitmap_record*, i64, i64, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.frame*, %struct.frame*, %struct.frame*, %struct.frame*, %struct.frame*, %struct.frame*, %struct.frame*, %struct.scroll_bar*, i64, i32, i32, %struct.XRectangle, i64, i64, %struct._XIM*, %struct.XIMStyles*, %struct.xim_inst_t*, %struct.color_name_cache_entry*, %struct.XColor*, i32, i32, i32, i32, i32, i32, i32, i32, i64*, i64, i64, i64, i64, i64*, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, %struct.xcb_connection_t* }
%struct.terminal = type { %struct.vectorlike_header, i64, i64, i64, i64, %struct.terminal*, i32, i32, i32, i8*, %struct.kboard*, %struct.image_cache*, %union.display_info, %struct.coding_system*, %struct.coding_system*, %struct.redisplay_interface*, void (%struct.frame*, i32, i32)*, void (%struct.frame*, i32, i32)*, void (%struct.frame*)*, void (%struct.frame*)*, void (%struct.frame*, i32)*, void (%struct.frame*, i32, i32)*, void (%struct.frame*, %struct.glyph*, i32)*, void (%struct.frame*, %struct.glyph*, i32)*, void (%struct.frame*, i32)*, void (%struct.frame*)*, void (%struct.frame*, i1)*, void (%struct.terminal*)*, void (%struct.terminal*)*, void (%struct.frame*)*, void (%struct.frame*)*, void (%struct.frame*, i32)*, void (%struct.frame**, i32, i64*, i32*, i64*, i64*, i64*)*, void (%struct.frame*)*, void (%struct.frame*, i1)*, void (%struct.frame*)*, i64 (%struct.frame*, i32, i32, i32, i64, i8**)*, i64 (%struct.frame*, i64, i64)*, void (%struct.window*, i32, i32, i32)*, void (%struct.window*, i32, i32, i32)*, void (%struct.frame*)*, void (%struct.window*)*, void (%struct.frame*)*, i32 (%struct.terminal*, %struct.input_event*)*, void (%struct.frame*)*, void (%struct.frame*)*, void (%struct.terminal*)* }
%struct.vectorlike_header = type { i64 }
%struct.kboard = type { %struct.kboard*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64, i64, i32, i64, i8, i8, i64 }
%struct.image_cache = type { %struct.image**, %struct.image**, i64, i64, i64 }
%struct.image = type { %struct.timespec, i64, i64, %struct._XImage*, %struct._XImage*, i64*, i32, i64, i64, i64, i8, i32, i32, [4 x i32], i32, i64, i64, i32, i32, i32, %struct.image_type*, i8, i64, i64, i64, %struct.image*, %struct.image* }
%struct.timespec = type { i64, i64 }
%struct._XImage = type { i32, i32, i32, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i8*, %struct.funcs }
%struct.funcs = type { %struct._XImage* (%struct._XDisplay*, %struct.Visual*, i32, i32, i32, i8*, i32, i32, i32, i32)*, i32 (%struct._XImage*)*, i64 (%struct._XImage*, i32, i32)*, i32 (%struct._XImage*, i32, i32, i64)*, %struct._XImage* (%struct._XImage*, i32, i32, i32, i32)*, i32 (%struct._XImage*, i64)* }
%struct.image_type = type { i32, i1 (i64)*, i1 (%struct.frame*, %struct.image*)*, void (%struct.frame*, %struct.image*)*, i1 ()*, %struct.image_type* }
%union.display_info = type { %struct.tty_display_info* }
%struct.tty_display_info = type { %struct.tty_display_info*, i8*, i8*, %struct._IO_FILE*, %struct._IO_FILE*, %struct._IO_FILE*, %struct.emacs_tty*, i8, i32, %struct.terminal*, %struct.cm*, i64, %struct.frame*, i32, %struct.Mouse_HLInfo, [4096 x i8], [4096 x i8], i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32, i8, i32, i32, i8, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.emacs_tty = type opaque
%struct.cm = type { i32, i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.coding_system = type { i64, i32, i32, %union.anon.5, i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8*, i64, i64, i64, i64, i8*, i32*, i32, i32, [64 x i8], i32, i32, i1 (%struct.coding_system*, %struct.coding_detection_info*)*, void (%struct.coding_system*)*, i1 (%struct.coding_system*)* }
%union.anon.5 = type { %struct.ccl_spec*, [328 x i8] }
%struct.ccl_spec = type opaque
%struct.coding_detection_info = type { i32, i32, i32 }
%struct.redisplay_interface = type { void (%struct.frame*, i64, i64)**, void (%struct.it*)*, void (%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, i32, i32)*, void (%struct.window*, %struct.run*)*, void (%struct.window*, %struct.glyph_row*)*, void (%struct.window*)*, void (%struct.window*, i1, i1)*, void (%struct.frame*)*, void (%struct.window*)*, void (%struct.glyph*, %struct.frame*, i32*, i32*)*, void (%struct.window*, %struct.glyph_row*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, %struct.draw_fringe_bitmap_params*)*, void (i32, i16*, i32, i32)*, void (i32)*, void (%struct.glyph_string*)*, void (%struct.glyph_string*)*, void (%struct.frame*, i64)*, void (%struct.frame*, i32, i32, i32, i32)*, void (%struct.window*, %struct.glyph_row*, i32, i32, i32, i32, i1, i1)*, void (%struct.window*, i32, i32, i32)*, void (%struct.window*, i32, i32, i32, i32)*, void (%struct.frame*, i32, i32, i32, i32, i32)*, void (%struct.frame*)*, void (%struct.frame*)* }
%struct.it = type { i64, %struct.window*, %struct.frame*, i32, i64, i64, i64, i64, i8*, i64, i64, i8, %struct.Lisp_Char_Table*, i64*, i64*, i32, i32, i32, [16 x i64], %struct.display_pos, %struct.display_pos, i64, i64, [16 x i64], [16 x i64], i64, i64, [5 x %struct.iterator_stack_entry], i32, i64, i32, i32, i16, i32, i32, i32, i32, %struct.composition_it, i32, i32, i64, %struct.xwidget*, %struct.it_slice, i64, i16, i16, i64, i64, %struct.text_pos, i16, i16, i32, i32, i32, i32, i32, i32, i32, i32, %struct.glyph_row*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.text_pos, i32, i32, i32, i32, i56, i24, %struct.bidi_it, i32 }
%struct.window = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.glyph_matrix*, %struct.glyph_matrix*, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, %struct.cursor_pos, %struct.cursor_pos, %struct.cursor_pos, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i16, i32, i64 }
%struct.glyph_matrix = type { %struct.glyph_pool*, %struct.glyph_row*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, %struct.buffer*, i64, i64 }
%struct.glyph_pool = type { %struct.glyph*, i64, i32, i32 }
%struct.glyph = type { i64, i64, i16, i16, i16, i16, i24, i24, %union.anon, %union.anon.1 }
%union.anon = type { %struct.glyph_slice }
%struct.glyph_slice = type { i64 }
%union.anon.1 = type { i32 }
%struct.buffer = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.buffer_text, %struct.buffer_text*, %struct.buffer*, i64, i64, i64, i64, i64, i64, %struct.buffer*, i32, i32, [50 x i8], %struct.timespec, i64, i64, i64, i64, i64, %struct.region_cache*, %struct.region_cache*, %struct.region_cache*, i8, %struct.Lisp_Overlay*, %struct.Lisp_Overlay*, i64, i64 }
%struct.buffer_text = type { i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.interval*, %struct.Lisp_Marker*, i8 }
%struct.interval = type opaque
%struct.Lisp_Marker = type { i32, %struct.buffer*, %struct.Lisp_Marker*, i64, i64 }
%struct.region_cache = type opaque
%struct.Lisp_Overlay = type { i32, %struct.Lisp_Overlay*, i64, i64, i64 }
%struct.cursor_pos = type { i32, i32, i32, i32 }
%struct.Lisp_Char_Table = type { %struct.vectorlike_header, i64, i64, i64, i64, [64 x i64], [0 x i64] }
%struct.display_pos = type { %struct.text_pos, i64, %struct.text_pos, i32 }
%struct.iterator_stack_entry = type { i64, i32, i64, i64, i64, i64, %struct.composition_it, i32, %union.anon.6, %struct.text_pos, %struct.display_pos, i64, i32, i32, i32, i8, i32, i16, i64, i64 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i64, %struct.it_slice, i64 }
%struct.composition_it = type { i64, i64, i32, i32, i64, i32, i8, i64, i32, i32, i32, i32, i32 }
%struct.xwidget = type opaque
%struct.it_slice = type { i64, i64, i64, i64 }
%struct.glyph_row = type <{ [4 x %struct.glyph*], [4 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.display_pos, %struct.display_pos, %struct.text_pos, %struct.text_pos, i32, [11 x i8], i8, i24, i24, i32, i40, i32, %struct.XRectangle* }>
%struct.text_pos = type { i64, i64 }
%struct.bidi_it = type { i64, i64, i32, i64, i64, i32, i32, i32, i8, i8, i64, i64, %struct.bidi_saved_info, %struct.bidi_saved_info, %struct.bidi_saved_info, %struct.bidi_saved_info, %struct.bidi_saved_info, i64, i32, i64, i32, i32, i32, i64, i32, i32, [128 x %struct.bidi_stack], %struct.bidi_string_data, %struct.window*, i32, i64, i8 }
%struct.bidi_saved_info = type { i64, i32, i32 }
%struct.bidi_stack = type { i64, i16, i8, i8 }
%struct.bidi_string_data = type { i64, i8*, i64, i64, i8 }
%struct.run = type { i32, i32, i32, i32, i32, i32 }
%struct.draw_fringe_bitmap_params = type { i32, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, %struct.face* }
%struct.face = type { [19 x i64], i32, %struct._XGC*, i64, i64, i64, i64, i64, i64, i64, %struct.font*, i32, i32, i24, i32, %struct.face*, %struct.face*, %struct.face*, i8* }
%struct.font = type { %struct.vectorlike_header, [17 x i64], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, %struct.font_driver* }
%struct.font_driver = type { i64, i8, i64 (%struct.frame*)*, i64 (%struct.frame*, i64)*, i64 (%struct.frame*, i64)*, i64 (%struct.frame*)*, void (i64)*, i64 (%struct.frame*, i64, i32)*, void (%struct.font*)*, void (%struct.frame*, %struct.face*)*, void (%struct.frame*, %struct.face*)*, i32 (i64, i32)*, i32 (%struct.font*, i32)*, void (%struct.font*, i32*, i32, %struct.font_metrics*)*, i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)*, i32 (%struct.font*, i32, %struct.font_bitmap*, i32)*, void (%struct.font*, %struct.font_bitmap*)*, i32 (%struct.font*, i32, i32, i32*, i32*)*, i64 (%struct.font*)*, i32 (%struct.font*, i64, i64, i32, i32, i64, i32, i1)*, i32 (%struct.frame*)*, i32 (%struct.frame*)*, i64 (i64)*, i32 (%struct.frame*, %struct.font*)*, i32 (%struct.font*, i32, i32*)*, void (i64, i64)*, i1 (%struct.frame*, i64, i64)*, i64 (%struct.font*)* }
%struct.font_metrics = type { i16, i16, i16, i16, i16 }
%struct.glyph_string = type { i32, i32, i32, i32, i32, i32, i32, i32, %struct.frame*, %struct.window*, %struct._XDisplay*, i64, %struct.glyph_row*, i32, %struct.XChar2b*, i32, i32, %struct.face*, %struct.font*, %struct.composition*, i64, i32, i32, i8, %struct._XGC*, %struct.glyph*, %struct.image*, %struct.xwidget*, %struct.glyph_slice, %struct.glyph_string*, %struct.glyph_string*, [2 x %struct.XRectangle], i32, i32, i32, %struct.glyph_string*, %struct.glyph_string* }
%struct.XChar2b = type { i8, i8 }
%struct.composition = type { i32, i16, i16, i16, i16, i16, i32, i32, i64, i8*, i16* }
%struct.font_bitmap = type { i32, i32, i32, i32, i8*, i32, i32, i32 }
%struct.input_event = type { i32, i32, i32, i64, i64, i64, i64, i64 }
%struct._XDisplay = type opaque
%struct.Screen = type { %struct._XExtData*, %struct._XDisplay*, i64, i32, i32, i32, i32, i32, %struct.Depth*, i32, %struct.Visual*, %struct._XGC*, i64, i64, i64, i32, i32, i32, i32, i64 }
%struct._XExtData = type { i32, %struct._XExtData*, i32 (%struct._XExtData*)*, i8* }
%struct.Depth = type { i32, i32, %struct.Visual* }
%struct.Visual = type { %struct._XExtData*, i64, i32, i64, i64, i64, i32, i32 }
%struct._GdkCursor = type { i32, i32 }
%struct._XrmHashBucketRec = type opaque
%struct._XGC = type opaque
%struct.Mouse_HLInfo = type { i32, i32, i32, i32, i32, i32, i64, i32, i64, %struct.frame*, i32, i32, i8 }
%struct.x_bitmap_record = type { i64, i8, i64, i8*, i32, i32, i32, i32 }
%struct.frame = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.face_cache*, i32, %struct.glyph_pool*, %struct.glyph_pool*, %struct.glyph_matrix*, %struct.glyph_matrix*, i48, i32, i32, i32, i32, i8*, i32*, i32*, i32*, i32*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.terminal*, %union.output_data, %struct.font_driver_list*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x double], double, i32, i64, i64 }
%struct.face_cache = type { %struct.face**, %struct.frame*, %struct.face**, i64, i32, i8 }
%union.output_data = type { %struct.tty_output* }
%struct.tty_output = type { %struct.tty_display_info* }
%struct.font_driver_list = type { i8, %struct.font_driver*, %struct.font_driver_list* }
%struct.scroll_bar = type { %struct.vectorlike_header, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i8 }
%struct.XRectangle = type { i16, i16, i16, i16 }
%struct._XIM = type opaque
%struct.XIMStyles = type { i16, i64* }
%struct.xim_inst_t = type { %struct.x_display_info*, i8* }
%struct.color_name_cache_entry = type { %struct.color_name_cache_entry*, %struct.XColor, i8* }
%struct.XColor = type { i64, i16, i16, i16, i8, i8 }
%struct.xcb_connection_t = type opaque
%struct.emacs_globals = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Lisp_Symbol = type { i16, i64, %union.anon.12, i64, i64, %struct.Lisp_Symbol* }
%union.anon.12 = type { i64 }
%struct.frame_parm_table = type { i8*, i32 }
%struct.Lisp_Objfwd = type { i32, i64* }
%struct.Lisp_Boolfwd = type { i32, i8* }
%struct.Lisp_Kboard_Objfwd = type { i32, i32 }
%struct.Lisp_Subr = type { %struct.vectorlike_header, %union.anon.13, i16, i16, i8*, i8*, i8* }
%union.anon.13 = type { i64 ()* }
%struct.Lisp_Cons = type { i64, %union.anon.11 }
%union.anon.11 = type { i64 }
%struct.Lisp_Vector = type { %struct.vectorlike_header, [0 x i64] }
%struct.x_output = type { i32, i32, i32, i32, i32, i64, %struct._XGC*, %struct._XGC*, %struct._XGC*, i64, i64, i64, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, i8, %struct._GdkGeometry, i64, %struct._GtkTooltip*, %struct._GtkWidget*, %struct._GtkWindow*, i64, %struct.font*, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.XWMHints, %struct.x_display_info*, %union._XEvent*, i8, %struct._XIC*, i64, %struct._XOC*, %struct.relief, %struct.relief, i64, i32, i32, i32 }
%struct._GdkGeometry = type { i32, i32, i32, i32, i32, i32, i32, i32, double, double, i32 }
%struct._GtkTooltip = type opaque
%struct._GtkWidget = type { %struct._GtkObject, i16, i8, i8, i8*, %struct._GtkStyle*, %struct._GtkRequisition, %struct._GdkRectangle, %struct._GdkDrawable*, %struct._GtkWidget* }
%struct._GtkObject = type { %struct._GObject, i32 }
%struct._GObject = type { %struct._GTypeInstance, i32, %struct._GData* }
%struct._GTypeInstance = type { %struct._GTypeClass* }
%struct._GTypeClass = type { i64 }
%struct._GData = type opaque
%struct._GtkStyle = type { %struct._GObject, [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], %struct._GdkColor, %struct._GdkColor, %struct._PangoFontDescription*, i32, i32, [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], %struct._GdkGC*, %struct._GdkGC*, [5 x %struct._GdkDrawable*], i32, i32, %struct._GdkColormap*, %struct._GdkFont*, %struct._PangoFontDescription*, %struct._GtkRcStyle*, %struct._GSList*, %struct._GArray*, %struct._GSList* }
%struct._GdkColor = type { i32, i16, i16, i16 }
%struct._GdkGC = type { %struct._GObject, i32, i32, i32, i32, %struct._GdkColormap* }
%struct._GdkColormap = type { %struct._GObject, i32, %struct._GdkColor*, %struct._GdkVisual*, i8* }
%struct._GdkVisual = type { %struct._GObject, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct._GdkFont = type { i32, i32, i32 }
%struct._PangoFontDescription = type opaque
%struct._GtkRcStyle = type { %struct._GObject, i8*, [5 x i8*], %struct._PangoFontDescription*, [5 x i32], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], i32, i32, %struct._GArray*, %struct._GSList*, %struct._GSList*, i8 }
%struct._GArray = type { i8*, i32 }
%struct._GSList = type { i8*, %struct._GSList* }
%struct._GtkRequisition = type { i32, i32 }
%struct._GdkRectangle = type { i32, i32, i32, i32 }
%struct._GdkDrawable = type { %struct._GObject }
%struct._GtkWindow = type <{ %struct._GtkBin, i8*, i8*, i8*, i8*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWindow*, %struct._GtkWindowGeometryInfo*, %struct._GdkDrawable*, %struct._GtkWindowGroup*, i16, i32, [2 x i8], i32, i32, i32, i32, i32, i32, %struct._GdkScreen* }>
%struct._GtkBin = type { %struct._GtkContainer, %struct._GtkWidget* }
%struct._GtkContainer = type { %struct._GtkWidget, %struct._GtkWidget*, i24 }
%struct._GtkWindowGeometryInfo = type opaque
%struct._GtkWindowGroup = type { %struct._GObject, %struct._GSList* }
%struct._GdkScreen = type { %struct._GObject, i8, [32 x %struct._GdkGC*], [32 x %struct._GdkGC*], [32 x %struct._GdkGC*], %struct._cairo_font_options*, double }
%struct._cairo_font_options = type opaque
%struct.XWMHints = type { i64, i32, i32, i64, i64, i32, i32, i64, i64 }
%union._XEvent = type { [24 x i64] }
%struct._XIC = type opaque
%struct._XOC = type opaque
%struct.relief = type { %struct._XGC*, i64 }
%struct.Lisp_Buffer_Local_Value = type { i8, %union.Lisp_Fwd*, i64, i64, i64 }
%union.Lisp_Fwd = type { %struct.Lisp_Intfwd }
%struct.Lisp_Intfwd = type { i32, i64* }
%union.Aligned_String = type { %struct.Lisp_String }
%struct.Lisp_String = type { i64, i64, %struct.interval*, i8* }
%union.Aligned_Cons = type { %struct.Lisp_Cons }
%struct.MonitorInfo = type { %struct.XRectangle, %struct.XRectangle, i32, i32, i8* }

@selected_frame = common global i64 0, align 8
@x_display_list = external global %struct.x_display_info*, align 8
@.str = private unnamed_addr constant [35 x i8] c"Window system frame should be used\00", align 1
@.str.1 = private unnamed_addr constant [47 x i8] c"Window system is not in use or not initialized\00", align 1
@globals = external global %struct.emacs_globals, align 8
@frame_garbaged = common global i8 0, align 1
@Vminibuffer_list = external global i64, align 8
@window_select_count = external global i64, align 8
@.str.2 = private unnamed_addr constant [50 x i8] c"Frame and minibuffer must be on the same terminal\00", align 1
@.str.3 = private unnamed_addr constant [30 x i8] c"make-initial-minibuffer-frame\00", align 1
@Vframe_list = common global i64 0, align 8
@tty_frame_count = internal global i64 0, align 8
@.str.4 = private unnamed_addr constant [3 x i8] c"F1\00", align 1
@noninteractive = external global i8, align 1
@last_nonminibuf_frame = internal global %struct.frame* null, align 8
@internal_last_event_frame = external global i64, align 8
@current_kboard = external global %struct.kboard*, align 8
@.str.5 = private unnamed_addr constant [16 x i8] c"handle-focus-in\00", align 1
@tip_frame = external global i64, align 8
@.str.6 = private unnamed_addr constant [54 x i8] c"Attempt to delete the sole visible or iconified frame\00", align 1
@.str.7 = private unnamed_addr constant [33 x i8] c"Attempt to delete the only frame\00", align 1
@.str.8 = private unnamed_addr constant [47 x i8] c"Attempt to delete a surrogate minibuffer frame\00", align 1
@Vrun_hooks = external global i64, align 8
@pending_funcalls = external global i64, align 8
@minibuf_window = external global i64, align 8
@selected_window = external global i64, align 8
@echo_area_window = external global i64, align 8
@update_mode_lines = external global i32, align 4
@.str.9 = private unnamed_addr constant [62 x i8] c"Attempt to make invisible the sole visible or iconified frame\00", align 1
@windows_or_buffers_changed = external global i32, align 4
@lispsym = external global [1074 x %struct.Lisp_Symbol], align 8
@.str.10 = private unnamed_addr constant [56 x i8] c"Surrogate minibuffer windows must be minibuffer windows\00", align 1
@.str.11 = private unnamed_addr constant [73 x i8] c"Can't change the surrogate minibuffer of a frame with its own minibuffer\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"tty\00", align 1
@.str.13 = private unnamed_addr constant [21 x i8] c"Invalid line-spacing\00", align 1
@.str.14 = private unnamed_addr constant [21 x i8] c"Invalid screen-gamma\00", align 1
@.str.15 = private unnamed_addr constant [25 x i8] c"Font `%s' is not defined\00", align 1
@.str.16 = private unnamed_addr constant [51 x i8] c"The default fontset can't be used for a frame font\00", align 1
@.str.17 = private unnamed_addr constant [20 x i8] c"Unknown fontset: %s\00", align 1
@.str.18 = private unnamed_addr constant [13 x i8] c"Invalid font\00", align 1
@.str.19 = private unnamed_addr constant [26 x i8] c"No font backend available\00", align 1
@.str.20 = private unnamed_addr constant [46 x i8] c"None of specified font backends are available\00", align 1
@face_change = external global i8, align 1
@.str.21 = private unnamed_addr constant [42 x i8] c"Cannot change the border width of a frame\00", align 1
@.str.22 = private unnamed_addr constant [6 x i8] c"Emacs\00", align 1
@.str.23 = private unnamed_addr constant [6 x i8] c"emacs\00", align 1
@.str.24 = private unnamed_addr constant [3 x i8] c"on\00", align 1
@.str.25 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@.str.26 = private unnamed_addr constant [4 x i8] c"off\00", align 1
@.str.27 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@frame_parms = internal constant [37 x %struct.frame_parm_table] [%struct.frame_parm_table { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.70, i32 0, i32 0), i32 189 }, %struct.frame_parm_table { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.71, i32 0, i32 0), i32 188 }, %struct.frame_parm_table { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.72, i32 0, i32 0), i32 -1 }, %struct.frame_parm_table { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.73, i32 0, i32 0), i32 209 }, %struct.frame_parm_table { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.74, i32 0, i32 0), i32 210 }, %struct.frame_parm_table { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.75, i32 0, i32 0), i32 307 }, %struct.frame_parm_table { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.76, i32 0, i32 0), i32 309 }, %struct.frame_parm_table { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.77, i32 0, i32 0), i32 -1 }, %struct.frame_parm_table { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.78, i32 0, i32 0), i32 -1 }, %struct.frame_parm_table { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.79, i32 0, i32 0), i32 530 }, %struct.frame_parm_table { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.80, i32 0, i32 0), i32 532 }, %struct.frame_parm_table { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.81, i32 0, i32 0), i32 563 }, %struct.frame_parm_table { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.82, i32 0, i32 0), i32 813 }, %struct.frame_parm_table { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.83, i32 0, i32 0), i32 215 }, %struct.frame_parm_table { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.84, i32 0, i32 0), i32 653 }, %struct.frame_parm_table { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.85, i32 0, i32 0), i32 686 }, %struct.frame_parm_table { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.86, i32 0, i32 0), i32 696 }, %struct.frame_parm_table { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.87, i32 0, i32 0), i32 835 }, %struct.frame_parm_table { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.88, i32 0, i32 0), i32 833 }, %struct.frame_parm_table { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.89, i32 0, i32 0), i32 919 }, %struct.frame_parm_table { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.90, i32 0, i32 0), i32 976 }, %struct.frame_parm_table { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.91, i32 0, i32 0), i32 1003 }, %struct.frame_parm_table { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.92, i32 0, i32 0), i32 525 }, %struct.frame_parm_table { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.93, i32 0, i32 0), i32 1004 }, %struct.frame_parm_table { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.94, i32 0, i32 0), i32 923 }, %struct.frame_parm_table { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.95, i32 0, i32 0), i32 832 }, %struct.frame_parm_table { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.96, i32 0, i32 0), i32 831 }, %struct.frame_parm_table { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.97, i32 0, i32 0), i32 829 }, %struct.frame_parm_table { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.98, i32 0, i32 0), i32 623 }, %struct.frame_parm_table { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.99, i32 0, i32 0), i32 608 }, %struct.frame_parm_table { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.100, i32 0, i32 0), i32 814 }, %struct.frame_parm_table { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.101, i32 0, i32 0), i32 1010 }, %struct.frame_parm_table { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.102, i32 0, i32 0), i32 472 }, %struct.frame_parm_table { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.103, i32 0, i32 0), i32 440 }, %struct.frame_parm_table { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.104, i32 0, i32 0), i32 170 }, %struct.frame_parm_table { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.105, i32 0, i32 0), i32 878 }, %struct.frame_parm_table { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.106, i32 0, i32 0), i32 924 }], align 16
@syms_of_frame.o_fwd = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.28 = private unnamed_addr constant [16 x i8] c"x-resource-name\00", align 1
@syms_of_frame.o_fwd.29 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.30 = private unnamed_addr constant [17 x i8] c"x-resource-class\00", align 1
@syms_of_frame.o_fwd.31 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.32 = private unnamed_addr constant [24 x i8] c"frame-alpha-lower-limit\00", align 1
@syms_of_frame.o_fwd.33 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.34 = private unnamed_addr constant [20 x i8] c"default-frame-alist\00", align 1
@syms_of_frame.o_fwd.35 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.36 = private unnamed_addr constant [26 x i8] c"default-frame-scroll-bars\00", align 1
@syms_of_frame.b_fwd = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.37 = private unnamed_addr constant [32 x i8] c"scroll-bar-adjust-thumb-portion\00", align 1
@syms_of_frame.o_fwd.38 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.39 = private unnamed_addr constant [15 x i8] c"terminal-frame\00", align 1
@syms_of_frame.o_fwd.40 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.41 = private unnamed_addr constant [24 x i8] c"mouse-position-function\00", align 1
@syms_of_frame.o_fwd.42 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.43 = private unnamed_addr constant [16 x i8] c"mouse-highlight\00", align 1
@syms_of_frame.o_fwd.44 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.45 = private unnamed_addr constant [23 x i8] c"make-pointer-invisible\00", align 1
@syms_of_frame.o_fwd.46 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.47 = private unnamed_addr constant [14 x i8] c"focus-in-hook\00", align 1
@syms_of_frame.o_fwd.48 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.49 = private unnamed_addr constant [15 x i8] c"focus-out-hook\00", align 1
@syms_of_frame.o_fwd.50 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.51 = private unnamed_addr constant [23 x i8] c"delete-frame-functions\00", align 1
@syms_of_frame.o_fwd.52 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.53 = private unnamed_addr constant [14 x i8] c"menu-bar-mode\00", align 1
@syms_of_frame.o_fwd.54 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.55 = private unnamed_addr constant [14 x i8] c"tool-bar-mode\00", align 1
@syms_of_frame.ko_fwd = internal global %struct.Lisp_Kboard_Objfwd zeroinitializer, align 4
@.str.56 = private unnamed_addr constant [25 x i8] c"default-minibuffer-frame\00", align 1
@syms_of_frame.b_fwd.57 = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.58 = private unnamed_addr constant [20 x i8] c"focus-follows-mouse\00", align 1
@syms_of_frame.b_fwd.59 = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.60 = private unnamed_addr constant [23 x i8] c"frame-resize-pixelwise\00", align 1
@syms_of_frame.o_fwd.61 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.62 = private unnamed_addr constant [29 x i8] c"frame-inhibit-implied-resize\00", align 1
@syms_of_frame.o_fwd.63 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.64 = private unnamed_addr constant [19 x i8] c"frame-size-history\00", align 1
@Sselected_frame = internal global %struct.Lisp_Subr { %struct.vectorlike_header { i64 167772160 }, %union.anon.13 { i64 ()* @Fselected_frame }, i16 0, i16 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.116, i32 0, i32 0), i8* null, i8* null }, align 8
@Sframe_list = internal global %struct.Lisp_Subr { %struct.vectorlike_header { i64 167772160 }, %union.anon.13 { i64 ()* @Fframe_list }, i16 0, i16 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.117, i32 0, i32 0), i8* null, i8* null }, align 8
@Slast_nonminibuf_frame = internal global %struct.Lisp_Subr { %struct.vectorlike_header { i64 167772160 }, %union.anon.13 { i64 ()* @Flast_nonminibuf_frame }, i16 0, i16 0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.120, i32 0, i32 0), i8* null, i8* null }, align 8
@Smouse_position = internal global %struct.Lisp_Subr { %struct.vectorlike_header { i64 167772160 }, %union.anon.13 { i64 ()* @Fmouse_position }, i16 0, i16 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.123, i32 0, i32 0), i8* null, i8* null }, align 8
@Smouse_pixel_position = internal global %struct.Lisp_Subr { %struct.vectorlike_header { i64 167772160 }, %union.anon.13 { i64 ()* @Fmouse_pixel_position }, i16 0, i16 0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.124, i32 0, i32 0), i8* null, i8* null }, align 8
@Svisible_frame_list = internal global %struct.Lisp_Subr { %struct.vectorlike_header { i64 167772160 }, %union.anon.13 { i64 ()* @Fvisible_frame_list }, i16 0, i16 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.131, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.65 = private unnamed_addr constant [52 x i8] c"Terminal is not live, can't create new frames on it\00", align 1
@.str.66 = private unnamed_addr constant [5 x i8] c"F%ld\00", align 1
@.str.67 = private unnamed_addr constant [52 x i8] c"Frame names of the form F<num> are usurped by Emacs\00", align 1
@unspecified_bg = external global [0 x i8], align 1
@unspecified_fg = external global [0 x i8], align 1
@.str.68 = private unnamed_addr constant [4 x i8] c"%lu\00", align 1
@.str.69 = private unnamed_addr constant [68 x i8] c"x-get-resource: must specify both COMPONENT and SUBCLASS or neither\00", align 1
@.str.70 = private unnamed_addr constant [11 x i8] c"auto-raise\00", align 1
@.str.71 = private unnamed_addr constant [11 x i8] c"auto-lower\00", align 1
@.str.72 = private unnamed_addr constant [17 x i8] c"background-color\00", align 1
@.str.73 = private unnamed_addr constant [13 x i8] c"border-color\00", align 1
@.str.74 = private unnamed_addr constant [13 x i8] c"border-width\00", align 1
@.str.75 = private unnamed_addr constant [13 x i8] c"cursor-color\00", align 1
@.str.76 = private unnamed_addr constant [12 x i8] c"cursor-type\00", align 1
@.str.77 = private unnamed_addr constant [5 x i8] c"font\00", align 1
@.str.78 = private unnamed_addr constant [17 x i8] c"foreground-color\00", align 1
@.str.79 = private unnamed_addr constant [10 x i8] c"icon-name\00", align 1
@.str.80 = private unnamed_addr constant [10 x i8] c"icon-type\00", align 1
@.str.81 = private unnamed_addr constant [22 x i8] c"internal-border-width\00", align 1
@.str.82 = private unnamed_addr constant [20 x i8] c"right-divider-width\00", align 1
@.str.83 = private unnamed_addr constant [21 x i8] c"bottom-divider-width\00", align 1
@.str.84 = private unnamed_addr constant [15 x i8] c"menu-bar-lines\00", align 1
@.str.85 = private unnamed_addr constant [12 x i8] c"mouse-color\00", align 1
@.str.86 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@.str.87 = private unnamed_addr constant [17 x i8] c"scroll-bar-width\00", align 1
@.str.88 = private unnamed_addr constant [18 x i8] c"scroll-bar-height\00", align 1
@.str.89 = private unnamed_addr constant [6 x i8] c"title\00", align 1
@.str.90 = private unnamed_addr constant [13 x i8] c"unsplittable\00", align 1
@.str.91 = private unnamed_addr constant [21 x i8] c"vertical-scroll-bars\00", align 1
@.str.92 = private unnamed_addr constant [23 x i8] c"horizontal-scroll-bars\00", align 1
@.str.93 = private unnamed_addr constant [11 x i8] c"visibility\00", align 1
@.str.94 = private unnamed_addr constant [15 x i8] c"tool-bar-lines\00", align 1
@.str.95 = private unnamed_addr constant [22 x i8] c"scroll-bar-foreground\00", align 1
@.str.96 = private unnamed_addr constant [22 x i8] c"scroll-bar-background\00", align 1
@.str.97 = private unnamed_addr constant [13 x i8] c"screen-gamma\00", align 1
@.str.98 = private unnamed_addr constant [13 x i8] c"line-spacing\00", align 1
@.str.99 = private unnamed_addr constant [12 x i8] c"left-fringe\00", align 1
@.str.100 = private unnamed_addr constant [13 x i8] c"right-fringe\00", align 1
@.str.101 = private unnamed_addr constant [12 x i8] c"wait-for-wm\00", align 1
@.str.102 = private unnamed_addr constant [11 x i8] c"fullscreen\00", align 1
@.str.103 = private unnamed_addr constant [13 x i8] c"font-backend\00", align 1
@.str.104 = private unnamed_addr constant [6 x i8] c"alpha\00", align 1
@.str.105 = private unnamed_addr constant [7 x i8] c"sticky\00", align 1
@.str.106 = private unnamed_addr constant [18 x i8] c"tool-bar-position\00", align 1
@.str.107 = private unnamed_addr constant [7 x i8] c"framep\00", align 1
@Sframep = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fframep }, i16 1, i16 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.107, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.108 = private unnamed_addr constant [13 x i8] c"frame-live-p\00", align 1
@Sframe_live_p = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fframe_live_p }, i16 1, i16 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.108, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.109 = private unnamed_addr constant [14 x i8] c"window-system\00", align 1
@Swindow_system = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fwindow_system }, i16 0, i16 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.109, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.110 = private unnamed_addr constant [23 x i8] c"frame-windows-min-size\00", align 1
@Sframe_windows_min_size = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64, i64)* } { i64 (i64, i64, i64, i64)* @Fframe_windows_min_size }, i16 4, i16 4, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.110, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.111 = private unnamed_addr constant [20 x i8] c"make-terminal-frame\00", align 1
@Smake_terminal_frame = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fmake_terminal_frame }, i16 1, i16 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.111, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.112 = private unnamed_addr constant [20 x i8] c"handle-switch-frame\00", align 1
@.str.113 = private unnamed_addr constant [3 x i8] c"^e\00", align 1
@Shandle_switch_frame = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fhandle_switch_frame }, i16 1, i16 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.112, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.113, i32 0, i32 0), i8* null }, align 8
@.str.114 = private unnamed_addr constant [13 x i8] c"select-frame\00", align 1
@.str.115 = private unnamed_addr constant [2 x i8] c"e\00", align 1
@Sselect_frame = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fselect_frame }, i16 1, i16 2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.114, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.115, i32 0, i32 0), i8* null }, align 8
@.str.116 = private unnamed_addr constant [15 x i8] c"selected-frame\00", align 1
@.str.117 = private unnamed_addr constant [11 x i8] c"frame-list\00", align 1
@.str.118 = private unnamed_addr constant [11 x i8] c"next-frame\00", align 1
@Snext_frame = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fnext_frame }, i16 0, i16 2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.118, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.119 = private unnamed_addr constant [15 x i8] c"previous-frame\00", align 1
@Sprevious_frame = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fprevious_frame }, i16 0, i16 2, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.119, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.120 = private unnamed_addr constant [25 x i8] c"last-nonminibuffer-frame\00", align 1
@.str.121 = private unnamed_addr constant [13 x i8] c"delete-frame\00", align 1
@.str.122 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@Sdelete_frame = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fdelete_frame }, i16 0, i16 2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.121, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.122, i32 0, i32 0), i8* null }, align 8
@.str.123 = private unnamed_addr constant [15 x i8] c"mouse-position\00", align 1
@.str.124 = private unnamed_addr constant [21 x i8] c"mouse-pixel-position\00", align 1
@.str.125 = private unnamed_addr constant [19 x i8] c"set-mouse-position\00", align 1
@Sset_mouse_position = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64)* } { i64 (i64, i64, i64)* @Fset_mouse_position }, i16 3, i16 3, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.125, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.126 = private unnamed_addr constant [25 x i8] c"set-mouse-pixel-position\00", align 1
@Sset_mouse_pixel_position = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64)* } { i64 (i64, i64, i64)* @Fset_mouse_pixel_position }, i16 3, i16 3, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.126, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.127 = private unnamed_addr constant [19 x i8] c"make-frame-visible\00", align 1
@Smake_frame_visible = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fmake_frame_visible }, i16 0, i16 1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.127, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.122, i32 0, i32 0), i8* null }, align 8
@.str.128 = private unnamed_addr constant [21 x i8] c"make-frame-invisible\00", align 1
@Smake_frame_invisible = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fmake_frame_invisible }, i16 0, i16 2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.128, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.122, i32 0, i32 0), i8* null }, align 8
@.str.129 = private unnamed_addr constant [14 x i8] c"iconify-frame\00", align 1
@Siconify_frame = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Ficonify_frame }, i16 0, i16 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.129, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.122, i32 0, i32 0), i8* null }, align 8
@.str.130 = private unnamed_addr constant [16 x i8] c"frame-visible-p\00", align 1
@Sframe_visible_p = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fframe_visible_p }, i16 1, i16 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.130, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.131 = private unnamed_addr constant [19 x i8] c"visible-frame-list\00", align 1
@.str.132 = private unnamed_addr constant [12 x i8] c"raise-frame\00", align 1
@Sraise_frame = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fraise_frame }, i16 0, i16 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.132, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.122, i32 0, i32 0), i8* null }, align 8
@.str.133 = private unnamed_addr constant [12 x i8] c"lower-frame\00", align 1
@Slower_frame = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Flower_frame }, i16 0, i16 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.133, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.122, i32 0, i32 0), i8* null }, align 8
@.str.134 = private unnamed_addr constant [14 x i8] c"x-focus-frame\00", align 1
@Sx_focus_frame = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fx_focus_frame }, i16 1, i16 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.134, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.135 = private unnamed_addr constant [23 x i8] c"frame-after-make-frame\00", align 1
@Sframe_after_make_frame = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fframe_after_make_frame }, i16 2, i16 2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.135, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.136 = private unnamed_addr constant [21 x i8] c"redirect-frame-focus\00", align 1
@Sredirect_frame_focus = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fredirect_frame_focus }, i16 1, i16 2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.136, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.137 = private unnamed_addr constant [12 x i8] c"frame-focus\00", align 1
@Sframe_focus = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fframe_focus }, i16 0, i16 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.137, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.138 = private unnamed_addr constant [17 x i8] c"frame-parameters\00", align 1
@Sframe_parameters = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fframe_parameters }, i16 0, i16 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.138, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.139 = private unnamed_addr constant [16 x i8] c"frame-parameter\00", align 1
@Sframe_parameter = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fframe_parameter }, i16 2, i16 2, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.139, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.140 = private unnamed_addr constant [24 x i8] c"modify-frame-parameters\00", align 1
@Smodify_frame_parameters = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fmodify_frame_parameters }, i16 2, i16 2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.140, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.141 = private unnamed_addr constant [18 x i8] c"frame-char-height\00", align 1
@Sframe_char_height = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fframe_char_height }, i16 0, i16 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.141, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.142 = private unnamed_addr constant [17 x i8] c"frame-char-width\00", align 1
@Sframe_char_width = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fframe_char_width }, i16 0, i16 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.142, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.143 = private unnamed_addr constant [19 x i8] c"frame-pixel-height\00", align 1
@Sframe_pixel_height = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fframe_pixel_height }, i16 0, i16 1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.143, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.144 = private unnamed_addr constant [18 x i8] c"frame-pixel-width\00", align 1
@Sframe_pixel_width = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fframe_pixel_width }, i16 0, i16 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.144, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.145 = private unnamed_addr constant [16 x i8] c"frame-text-cols\00", align 1
@Sframe_text_cols = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fframe_text_cols }, i16 0, i16 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.145, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.146 = private unnamed_addr constant [17 x i8] c"frame-text-lines\00", align 1
@Sframe_text_lines = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fframe_text_lines }, i16 0, i16 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.146, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.147 = private unnamed_addr constant [17 x i8] c"frame-total-cols\00", align 1
@Sframe_total_cols = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fframe_total_cols }, i16 0, i16 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.147, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.148 = private unnamed_addr constant [18 x i8] c"frame-total-lines\00", align 1
@Sframe_total_lines = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fframe_total_lines }, i16 0, i16 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.148, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.149 = private unnamed_addr constant [17 x i8] c"frame-text-width\00", align 1
@Sframe_text_width = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fframe_text_width }, i16 0, i16 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.149, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.150 = private unnamed_addr constant [18 x i8] c"frame-text-height\00", align 1
@Sframe_text_height = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fframe_text_height }, i16 0, i16 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.150, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.151 = private unnamed_addr constant [23 x i8] c"frame-scroll-bar-width\00", align 1
@Sscroll_bar_width = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fscroll_bar_width }, i16 0, i16 1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.151, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.152 = private unnamed_addr constant [24 x i8] c"frame-scroll-bar-height\00", align 1
@Sscroll_bar_height = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fscroll_bar_height }, i16 0, i16 1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.152, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.153 = private unnamed_addr constant [19 x i8] c"frame-fringe-width\00", align 1
@Sfringe_width = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Ffringe_width }, i16 0, i16 1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.153, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.154 = private unnamed_addr constant [19 x i8] c"frame-border-width\00", align 1
@Sborder_width = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fborder_width }, i16 0, i16 1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.154, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.155 = private unnamed_addr constant [26 x i8] c"frame-right-divider-width\00", align 1
@Sright_divider_width = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fright_divider_width }, i16 0, i16 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.155, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.156 = private unnamed_addr constant [27 x i8] c"frame-bottom-divider-width\00", align 1
@Sbottom_divider_width = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fbottom_divider_width }, i16 0, i16 1, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.156, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.157 = private unnamed_addr constant [21 x i8] c"tool-bar-pixel-width\00", align 1
@Stool_bar_pixel_width = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Ftool_bar_pixel_width }, i16 0, i16 1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.157, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.158 = private unnamed_addr constant [17 x i8] c"set-frame-height\00", align 1
@Sset_frame_height = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64, i64)* } { i64 (i64, i64, i64, i64)* @Fset_frame_height }, i16 2, i16 4, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.158, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.159 = private unnamed_addr constant [16 x i8] c"set-frame-width\00", align 1
@Sset_frame_width = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64, i64)* } { i64 (i64, i64, i64, i64)* @Fset_frame_width }, i16 2, i16 4, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.159, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.160 = private unnamed_addr constant [15 x i8] c"set-frame-size\00", align 1
@Sset_frame_size = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64, i64)* } { i64 (i64, i64, i64, i64)* @Fset_frame_size }, i16 3, i16 4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.160, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.161 = private unnamed_addr constant [15 x i8] c"frame-position\00", align 1
@Sframe_position = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fframe_position }, i16 0, i16 1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.161, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.162 = private unnamed_addr constant [19 x i8] c"set-frame-position\00", align 1
@Sset_frame_position = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64)* } { i64 (i64, i64, i64)* @Fset_frame_position }, i16 3, i16 3, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.162, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.163 = private unnamed_addr constant [24 x i8] c"frame-pointer-visible-p\00", align 1
@Sframe_pointer_visible_p = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fframe_pointer_visible_p }, i16 0, i16 1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.163, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.164 = private unnamed_addr constant [15 x i8] c"x-get-resource\00", align 1
@Sx_get_resource = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64, i64)* } { i64 (i64, i64, i64, i64)* @Fx_get_resource }, i16 2, i16 4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.164, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.165 = private unnamed_addr constant [17 x i8] c"x-parse-geometry\00", align 1
@Sx_parse_geometry = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fx_parse_geometry }, i16 1, i16 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.165, i32 0, i32 0), i8* null, i8* null }, align 8

; Function Attrs: nounwind uwtable
define %struct.frame* @decode_live_frame(i64 %frame) #0 {
entry:
  %frame.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64, i64* @selected_frame, align 8
  store i64 %1, i64* %frame.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i64, i64* %frame.addr, align 8
  %call1 = call zeroext i1 @FRAMEP(i64 %2)
  br i1 %call1, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.end
  %3 = load i64, i64* %frame.addr, align 8
  %sub = sub nsw i64 %3, 5
  %4 = inttoptr i64 %sub to i8*
  %5 = bitcast i8* %4 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 61
  %6 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp2 = icmp ne %struct.terminal* %6, null
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.end
  %call3 = call i64 @builtin_lisp_symbol(i32 458)
  %7 = load i64, i64* %frame.addr, align 8
  %8 = call i64 @wrong_type_argument(i64 %call3, i64 %7) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %9, %cond.true
  %10 = load i64, i64* %frame.addr, align 8
  %sub4 = sub nsw i64 %10, 5
  %11 = inttoptr i64 %sub4 to i8*
  %12 = bitcast i8* %11 to %struct.frame*
  ret %struct.frame* %12
}

declare i64 @builtin_lisp_symbol(i32) #1

declare zeroext i1 @FRAMEP(i64) #1

; Function Attrs: noreturn
declare i64 @wrong_type_argument(i64, i64) #2

; Function Attrs: nounwind uwtable
define %struct.frame* @decode_any_frame(i64 %frame) #0 {
entry:
  %frame.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64, i64* @selected_frame, align 8
  store i64 %1, i64* %frame.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i64, i64* %frame.addr, align 8
  %call1 = call zeroext i1 @FRAMEP(i64 %2)
  br i1 %call1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call2 = call i64 @builtin_lisp_symbol(i32 461)
  %3 = load i64, i64* %frame.addr, align 8
  %4 = call i64 @wrong_type_argument(i64 %call2, i64 %3) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %5, %cond.true
  %6 = load i64, i64* %frame.addr, align 8
  %sub = sub nsw i64 %6, 5
  %7 = inttoptr i64 %sub to i8*
  %8 = bitcast i8* %7 to %struct.frame*
  ret %struct.frame* %8
}

; Function Attrs: nounwind uwtable
define zeroext i1 @window_system_available(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tobool = icmp ne %struct.frame* %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 26
  %2 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %2, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 2
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %cond.true
  %3 = phi i1 [ true, %cond.true ], [ false, %lor.rhs ]
  %lor.ext = zext i1 %3 to i32
  br label %cond.end

cond.false:                                       ; preds = %entry
  %4 = load %struct.x_display_info*, %struct.x_display_info** @x_display_list, align 8
  %cmp1 = icmp ne %struct.x_display_info* %4, null
  %conv = zext i1 %cmp1 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %lor.end
  %cond = phi i32 [ %lor.ext, %lor.end ], [ %conv, %cond.false ]
  %tobool2 = icmp ne i32 %cond, 0
  ret i1 %tobool2
}

; Function Attrs: nounwind uwtable
define %struct.frame* @decode_window_system_frame(i64 %frame) #0 {
entry:
  %frame.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_live_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  %1 = load %struct.frame*, %struct.frame** %f, align 8
  %call1 = call zeroext i1 @window_system_available(%struct.frame* %1)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void (i8*, ...) @error(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i32 0, i32 0)) #7
  unreachable

if.end:                                           ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f, align 8
  ret %struct.frame* %2
}

; Function Attrs: noreturn
declare void @error(i8*, ...) #2

; Function Attrs: nounwind uwtable
define void @check_window_system(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call = call zeroext i1 @window_system_available(%struct.frame* %0)
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tobool = icmp ne %struct.frame* %1, null
  %cond = select i1 %tobool, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i32 0, i32 0)
  call void (i8*, ...) @error(i8* %cond) #7
  unreachable

if.end:                                           ; preds = %entry
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @get_frame_param(%struct.frame* %frame, i64 %prop) #0 {
entry:
  %retval = alloca i64, align 8
  %frame.addr = alloca %struct.frame*, align 8
  %prop.addr = alloca i64, align 8
  %tem = alloca i64, align 8
  store %struct.frame* %frame, %struct.frame** %frame.addr, align 8
  store i64 %prop, i64* %prop.addr, align 8
  %0 = load i64, i64* %prop.addr, align 8
  %1 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %param_alist = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 8
  %2 = load i64, i64* %param_alist, align 8
  %call = call i64 @Fassq(i64 %0, i64 %2)
  store i64 %call, i64* %tem, align 8
  %3 = load i64, i64* %tem, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %3, %call1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i64, i64* %tem, align 8
  store i64 %4, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load i64, i64* %tem, align 8
  %call2 = call i64 @Fcdr(i64 %5)
  store i64 %call2, i64* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i64, i64* %retval
  ret i64 %6
}

declare i64 @Fassq(i64, i64) #1

declare i64 @Fcdr(i64) #1

; Function Attrs: nounwind uwtable
define void @frame_size_history_add(%struct.frame* %f, i64 %fun_symbol, i32 %width, i32 %height, i64 %rest) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %fun_symbol.addr = alloca i64, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %rest.addr = alloca i64, align 8
  %frame = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %fun_symbol, i64* %fun_symbol.addr, align 8
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  store i64 %rest, i64* %rest.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1 = bitcast %struct.frame* %0 to i8*
  %call = call i64 @make_lisp_ptr(i8* %1, i32 5)
  store i64 %call, i64* %frame, align 8
  %2 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 374), align 8
  %and = and i64 %2, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 374), align 8
  %sub = sub nsw i64 %3, 3
  %4 = inttoptr i64 %sub to i8*
  %5 = bitcast i8* %4 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %5, i32 0, i32 0
  %6 = load i64, i64* %car, align 8
  %and2 = and i64 %6, 7
  %conv3 = trunc i64 %and2 to i32
  %and4 = and i32 %conv3, -5
  %cmp5 = icmp eq i32 %and4, 2
  br i1 %cmp5, label %land.lhs.true.7, label %if.end

land.lhs.true.7:                                  ; preds = %land.lhs.true
  %7 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 374), align 8
  %sub8 = sub nsw i64 %7, 3
  %8 = inttoptr i64 %sub8 to i8*
  %9 = bitcast i8* %8 to %struct.Lisp_Cons*
  %car9 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %9, i32 0, i32 0
  %10 = load i64, i64* %car9, align 8
  %shr = ashr i64 %10, 2
  %cmp10 = icmp slt i64 0, %shr
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.7
  %11 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 374), align 8
  %sub12 = sub nsw i64 %11, 3
  %12 = inttoptr i64 %sub12 to i8*
  %13 = bitcast i8* %12 to %struct.Lisp_Cons*
  %car13 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %13, i32 0, i32 0
  %14 = load i64, i64* %car13, align 8
  %shr14 = ashr i64 %14, 2
  %sub15 = sub nsw i64 %shr14, 1
  %shl = shl i64 %sub15, 2
  %add = add i64 %shl, 2
  %15 = load i64, i64* %frame, align 8
  %16 = load i64, i64* %fun_symbol.addr, align 8
  %17 = load i32, i32* %width.addr, align 4
  %cmp16 = icmp sgt i32 %17, 0
  br i1 %cmp16, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %18 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_width = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 40
  %19 = load i32, i32* %text_width, align 4
  %conv18 = sext i32 %19 to i64
  %shl19 = shl i64 %conv18, 2
  %add20 = add i64 %shl19, 2
  %20 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_height = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 41
  %21 = load i32, i32* %text_height, align 4
  %conv21 = sext i32 %21 to i64
  %shl22 = shl i64 %conv21, 2
  %add23 = add i64 %shl22, 2
  %22 = load i32, i32* %width.addr, align 4
  %conv24 = sext i32 %22 to i64
  %shl25 = shl i64 %conv24, 2
  %add26 = add i64 %shl25, 2
  %23 = load i32, i32* %height.addr, align 4
  %conv27 = sext i32 %23 to i64
  %shl28 = shl i64 %conv27, 2
  %add29 = add i64 %shl28, 2
  %call30 = call i64 @list4(i64 %add20, i64 %add23, i64 %add26, i64 %add29)
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %call31 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call30, %cond.true ], [ %call31, %cond.false ]
  %24 = load i64, i64* %rest.addr, align 8
  %call32 = call i64 @list4(i64 %15, i64 %16, i64 %cond, i64 %24)
  %25 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 374), align 8
  %sub33 = sub nsw i64 %25, 3
  %26 = inttoptr i64 %sub33 to i8*
  %27 = bitcast i8* %26 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %27, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %28 = load i64, i64* %cdr, align 8
  %call34 = call i64 @Fcons(i64 %call32, i64 %28)
  %call35 = call i64 @Fcons(i64 %add, i64 %call34)
  store i64 %call35, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 374), align 8
  br label %if.end

if.end:                                           ; preds = %cond.end, %land.lhs.true.7, %land.lhs.true, %entry
  ret void
}

declare i64 @make_lisp_ptr(i8*, i32) #1

declare i64 @Fcons(i64, i64) #1

declare i64 @list4(i64, i64, i64, i64) #1

; Function Attrs: nounwind uwtable
define zeroext i1 @frame_inhibit_resize(%struct.frame* %f, i1 zeroext %horizontal, i64 %parameter) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %horizontal.addr = alloca i8, align 1
  %parameter.addr = alloca i64, align 8
  %fullscreen = alloca i64, align 8
  %inhibit = alloca i8, align 1
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %frombool = zext i1 %horizontal to i8
  store i8 %frombool, i8* %horizontal.addr, align 1
  store i64 %parameter, i64* %parameter.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 472)
  %call1 = call i64 @get_frame_param(%struct.frame* %0, i64 %call)
  store i64 %call1, i64* %fullscreen, align 8
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %after_make_frame = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 26
  %2 = bitcast i48* %after_make_frame to i64*
  %bf.load = load i64, i64* %2, align 8
  %bf.lshr = lshr i64 %bf.load, 35
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 373), align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp = icmp eq i64 %3, %call2
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.true
  %4 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 373), align 8
  %and = and i64 %4, 7
  %conv = trunc i64 %and to i32
  %cmp3 = icmp eq i32 %conv, 3
  br i1 %cmp3, label %land.lhs.true, label %lor.lhs.false.9

land.lhs.true:                                    ; preds = %lor.lhs.false
  %5 = load i64, i64* %parameter.addr, align 8
  %6 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 373), align 8
  %call5 = call i64 @Fmemq(i64 %5, i64 %6)
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp7 = icmp eq i64 %call5, %call6
  br i1 %cmp7, label %lor.lhs.false.9, label %lor.end

lor.lhs.false.9:                                  ; preds = %land.lhs.true, %lor.lhs.false
  %7 = load i8, i8* %horizontal.addr, align 1
  %tobool = trunc i8 %7 to i1
  br i1 %tobool, label %land.lhs.true.11, label %lor.lhs.false.19

land.lhs.true.11:                                 ; preds = %lor.lhs.false.9
  %8 = load i64, i64* %fullscreen, align 8
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp13 = icmp eq i64 %8, %call12
  br i1 %cmp13, label %lor.lhs.false.19, label %land.lhs.true.15

land.lhs.true.15:                                 ; preds = %land.lhs.true.11
  %9 = load i64, i64* %fullscreen, align 8
  %call16 = call i64 @builtin_lisp_symbol(i32 471)
  %cmp17 = icmp eq i64 %9, %call16
  br i1 %cmp17, label %lor.lhs.false.19, label %lor.end

lor.lhs.false.19:                                 ; preds = %land.lhs.true.15, %land.lhs.true.11, %lor.lhs.false.9
  %10 = load i8, i8* %horizontal.addr, align 1
  %tobool20 = trunc i8 %10 to i1
  br i1 %tobool20, label %lor.lhs.false.29, label %land.lhs.true.21

land.lhs.true.21:                                 ; preds = %lor.lhs.false.19
  %11 = load i64, i64* %fullscreen, align 8
  %call22 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp23 = icmp eq i64 %11, %call22
  br i1 %cmp23, label %lor.lhs.false.29, label %land.lhs.true.25

land.lhs.true.25:                                 ; preds = %land.lhs.true.21
  %12 = load i64, i64* %fullscreen, align 8
  %call26 = call i64 @builtin_lisp_symbol(i32 473)
  %cmp27 = icmp eq i64 %12, %call26
  br i1 %cmp27, label %lor.lhs.false.29, label %lor.end

lor.lhs.false.29:                                 ; preds = %land.lhs.true.25, %land.lhs.true.21, %lor.lhs.false.19
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 26
  %14 = bitcast i48* %output_method to i64*
  %bf.load30 = load i64, i64* %14, align 8
  %bf.lshr31 = lshr i64 %bf.load30, 23
  %bf.clear32 = and i64 %bf.lshr31, 7
  %bf.cast33 = trunc i64 %bf.clear32 to i32
  %cmp34 = icmp eq i32 %bf.cast33, 1
  br i1 %cmp34, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false.29
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false.29, %land.lhs.true.25, %land.lhs.true.15, %land.lhs.true, %cond.true
  %15 = phi i1 [ true, %lor.lhs.false.29 ], [ true, %land.lhs.true.25 ], [ true, %land.lhs.true.15 ], [ true, %land.lhs.true ], [ true, %cond.true ], [ false, %lor.rhs ]
  %lor.ext = zext i1 %15 to i32
  br label %cond.end

cond.false:                                       ; preds = %entry
  %16 = load i8, i8* %horizontal.addr, align 1
  %tobool36 = trunc i8 %16 to i1
  br i1 %tobool36, label %land.lhs.true.38, label %lor.rhs.44

land.lhs.true.38:                                 ; preds = %cond.false
  %17 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %inhibit_horizontal_resize = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 26
  %18 = bitcast i48* %inhibit_horizontal_resize to i64*
  %bf.load39 = load i64, i64* %18, align 8
  %bf.lshr40 = lshr i64 %bf.load39, 38
  %bf.clear41 = and i64 %bf.lshr40, 1
  %bf.cast42 = trunc i64 %bf.clear41 to i1
  br i1 %bf.cast42, label %lor.end.51, label %lor.rhs.44

lor.rhs.44:                                       ; preds = %land.lhs.true.38, %cond.false
  %19 = load i8, i8* %horizontal.addr, align 1
  %tobool45 = trunc i8 %19 to i1
  br i1 %tobool45, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %lor.rhs.44
  %20 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %inhibit_vertical_resize = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 26
  %21 = bitcast i48* %inhibit_vertical_resize to i64*
  %bf.load46 = load i64, i64* %21, align 8
  %bf.lshr47 = lshr i64 %bf.load46, 39
  %bf.clear48 = and i64 %bf.lshr47, 1
  %bf.cast49 = trunc i64 %bf.clear48 to i1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs.44
  %22 = phi i1 [ false, %lor.rhs.44 ], [ %bf.cast49, %land.rhs ]
  br label %lor.end.51

lor.end.51:                                       ; preds = %land.end, %land.lhs.true.38
  %23 = phi i1 [ true, %land.lhs.true.38 ], [ %22, %land.end ]
  %lor.ext52 = zext i1 %23 to i32
  br label %cond.end

cond.end:                                         ; preds = %lor.end.51, %lor.end
  %cond = phi i32 [ %lor.ext, %lor.end ], [ %lor.ext52, %lor.end.51 ]
  %tobool53 = icmp ne i32 %cond, 0
  %frombool54 = zext i1 %tobool53 to i8
  store i8 %frombool54, i8* %inhibit, align 1
  %24 = load i8, i8* %inhibit, align 1
  %tobool55 = trunc i8 %24 to i1
  br i1 %tobool55, label %land.lhs.true.57, label %if.end

land.lhs.true.57:                                 ; preds = %cond.end
  %25 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method58 = getelementptr inbounds %struct.frame, %struct.frame* %25, i32 0, i32 26
  %26 = bitcast i48* %output_method58 to i64*
  %bf.load59 = load i64, i64* %26, align 8
  %bf.lshr60 = lshr i64 %bf.load59, 23
  %bf.clear61 = and i64 %bf.lshr60, 7
  %bf.cast62 = trunc i64 %bf.clear61 to i32
  %cmp63 = icmp eq i32 %bf.cast62, 1
  br i1 %cmp63, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true.57
  %27 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call65 = call i64 @builtin_lisp_symbol(i32 457)
  %28 = load i8, i8* %horizontal.addr, align 1
  %tobool66 = trunc i8 %28 to i1
  br i1 %tobool66, label %cond.true.68, label %cond.false.70

cond.true.68:                                     ; preds = %if.then
  %call69 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.72

cond.false.70:                                    ; preds = %if.then
  %call71 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.72

cond.end.72:                                      ; preds = %cond.false.70, %cond.true.68
  %cond73 = phi i64 [ %call69, %cond.true.68 ], [ %call71, %cond.false.70 ]
  %29 = load i64, i64* %parameter.addr, align 8
  %30 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %after_make_frame74 = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 26
  %31 = bitcast i48* %after_make_frame74 to i64*
  %bf.load75 = load i64, i64* %31, align 8
  %bf.lshr76 = lshr i64 %bf.load75, 35
  %bf.clear77 = and i64 %bf.lshr76, 1
  %bf.cast78 = trunc i64 %bf.clear77 to i1
  br i1 %bf.cast78, label %cond.true.80, label %cond.false.82

cond.true.80:                                     ; preds = %cond.end.72
  %call81 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.84

cond.false.82:                                    ; preds = %cond.end.72
  %call83 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.84

cond.end.84:                                      ; preds = %cond.false.82, %cond.true.80
  %cond85 = phi i64 [ %call81, %cond.true.80 ], [ %call83, %cond.false.82 ]
  %32 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 373), align 8
  %33 = load i64, i64* %fullscreen, align 8
  %call86 = call i64 @list5(i64 %cond73, i64 %29, i64 %cond85, i64 %32, i64 %33)
  call void @frame_size_history_add(%struct.frame* %27, i64 %call65, i32 0, i32 0, i64 %call86)
  br label %if.end

if.end:                                           ; preds = %cond.end.84, %land.lhs.true.57, %cond.end
  %34 = load i8, i8* %inhibit, align 1
  %tobool87 = trunc i8 %34 to i1
  ret i1 %tobool87
}

declare i64 @Fmemq(i64, i64) #1

declare i64 @list5(i64, i64, i64, i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fframep(i64 %object) #0 {
entry:
  %retval = alloca i64, align 8
  %object.addr = alloca i64, align 8
  store i64 %object, i64* %object.addr, align 8
  %0 = load i64, i64* %object.addr, align 8
  %call = call zeroext i1 @FRAMEP(i64 %0)
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call1, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i64, i64* %object.addr, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 26
  %4 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %4, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  switch i32 %bf.cast, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 2, label %sw.bb.3
    i32 4, label %sw.bb.5
    i32 3, label %sw.bb.7
    i32 5, label %sw.bb.9
  ]

sw.bb:                                            ; preds = %if.end, %if.end
  %call2 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call2, i64* %retval
  br label %return

sw.bb.3:                                          ; preds = %if.end
  %call4 = call i64 @builtin_lisp_symbol(i32 1045)
  store i64 %call4, i64* %retval
  br label %return

sw.bb.5:                                          ; preds = %if.end
  %call6 = call i64 @builtin_lisp_symbol(i32 1009)
  store i64 %call6, i64* %retval
  br label %return

sw.bb.7:                                          ; preds = %if.end
  %call8 = call i64 @builtin_lisp_symbol(i32 744)
  store i64 %call8, i64* %retval
  br label %return

sw.bb.9:                                          ; preds = %if.end
  %call10 = call i64 @builtin_lisp_symbol(i32 708)
  store i64 %call10, i64* %retval
  br label %return

sw.default:                                       ; preds = %if.end
  call void @emacs_abort() #7
  unreachable

return:                                           ; preds = %sw.bb.9, %sw.bb.7, %sw.bb.5, %sw.bb.3, %sw.bb, %if.then
  %5 = load i64, i64* %retval
  ret i64 %5
}

; Function Attrs: noreturn
declare void @emacs_abort() #2

; Function Attrs: nounwind uwtable
define i64 @Fframe_live_p(i64 %object) #0 {
entry:
  %object.addr = alloca i64, align 8
  store i64 %object, i64* %object.addr, align 8
  %0 = load i64, i64* %object.addr, align 8
  %call = call zeroext i1 @FRAMEP(i64 %0)
  br i1 %call, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %object.addr, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 61
  %4 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp = icmp ne %struct.terminal* %4, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %5 = load i64, i64* %object.addr, align 8
  %call1 = call i64 @Fframep(i64 %5)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call1, %cond.true ], [ %call2, %cond.false ]
  ret i64 %cond
}

; Function Attrs: nounwind uwtable
define i64 @Fwindow_system(i64 %frame) #0 {
entry:
  %retval = alloca i64, align 8
  %frame.addr = alloca i64, align 8
  %type = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64, i64* @selected_frame, align 8
  store i64 %1, i64* %frame.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i64, i64* %frame.addr, align 8
  %call1 = call i64 @Fframep(i64 %2)
  store i64 %call1, i64* %type, align 8
  %3 = load i64, i64* %type, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp3 = icmp eq i64 %3, %call2
  br i1 %cmp3, label %if.then.4, label %if.end.6

if.then.4:                                        ; preds = %if.end
  %call5 = call i64 @builtin_lisp_symbol(i32 461)
  %4 = load i64, i64* %frame.addr, align 8
  %5 = call i64 @wrong_type_argument(i64 %call5, i64 %4) #7
  unreachable

if.end.6:                                         ; preds = %if.end
  %6 = load i64, i64* %type, align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp8 = icmp eq i64 %6, %call7
  br i1 %cmp8, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %if.end.6
  %call10 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call10, i64* %retval
  br label %return

if.else:                                          ; preds = %if.end.6
  %7 = load i64, i64* %type, align 8
  store i64 %7, i64* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then.9
  %8 = load i64, i64* %retval
  ret i64 %8
}

; Function Attrs: nounwind readnone uwtable
define i64 @Fframe_windows_min_size(i64 %frame, i64 %horizontal, i64 %ignore, i64 %pixelwise) #3 {
entry:
  %frame.addr = alloca i64, align 8
  %horizontal.addr = alloca i64, align 8
  %ignore.addr = alloca i64, align 8
  %pixelwise.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  store i64 %horizontal, i64* %horizontal.addr, align 8
  store i64 %ignore, i64* %ignore.addr, align 8
  store i64 %pixelwise, i64* %pixelwise.addr, align 8
  ret i64 2
}

; Function Attrs: nounwind uwtable
define void @adjust_frame_size(%struct.frame* %f, i32 %new_width, i32 %new_height, i32 %inhibit, i1 zeroext %pretend, i64 %parameter) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %new_width.addr = alloca i32, align 4
  %new_height.addr = alloca i32, align 4
  %inhibit.addr = alloca i32, align 4
  %pretend.addr = alloca i8, align 1
  %parameter.addr = alloca i64, align 8
  %unit_width = alloca i32, align 4
  %unit_height = alloca i32, align 4
  %old_pixel_width = alloca i32, align 4
  %old_pixel_height = alloca i32, align 4
  %old_cols = alloca i32, align 4
  %old_lines = alloca i32, align 4
  %new_pixel_width = alloca i32, align 4
  %new_pixel_height = alloca i32, align 4
  %windows_width = alloca i32, align 4
  %windows_height = alloca i32, align 4
  %min_windows_width = alloca i32, align 4
  %min_windows_height = alloca i32, align 4
  %r = alloca %struct.window*, align 8
  %old_windows_width = alloca i32, align 4
  %old_windows_height = alloca i32, align 4
  %new_windows_width = alloca i32, align 4
  %new_windows_height = alloca i32, align 4
  %old_text_width = alloca i32, align 4
  %old_text_height = alloca i32, align 4
  %new_text_width = alloca i32, align 4
  %new_text_height = alloca i32, align 4
  %new_cols = alloca i32, align 4
  %new_lines = alloca i32, align 4
  %inhibit_horizontal = alloca i8, align 1
  %inhibit_vertical = alloca i8, align 1
  %frame31 = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  %text_area_x = alloca i32, align 4
  %text_area_y = alloca i32, align 4
  %text_area_width = alloca i32, align 4
  %text_area_height = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %new_width, i32* %new_width.addr, align 4
  store i32 %new_height, i32* %new_height.addr, align 4
  store i32 %inhibit, i32* %inhibit.addr, align 4
  %frombool = zext i1 %pretend to i8
  store i8 %frombool, i8* %pretend.addr, align 1
  store i64 %parameter, i64* %parameter.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 59
  %1 = load i32, i32* %column_width, align 4
  store i32 %1, i32* %unit_width, align 4
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 60
  %3 = load i32, i32* %line_height, align 4
  store i32 %3, i32* %unit_height, align 4
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_width = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 46
  %5 = load i32, i32* %pixel_width, align 4
  store i32 %5, i32* %old_pixel_width, align 4
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_height = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 47
  %7 = load i32, i32* %pixel_height, align 4
  store i32 %7, i32* %old_pixel_height, align 4
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_cols = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 36
  %9 = load i32, i32* %text_cols, align 4
  store i32 %9, i32* %old_cols, align 4
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_lines = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 37
  %11 = load i32, i32* %text_lines, align 4
  store i32 %11, i32* %old_lines, align 4
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_width1 = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 46
  %13 = load i32, i32* %pixel_width1, align 4
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 51
  %15 = load i32, i32* %internal_border_width, align 4
  %mul = mul nsw i32 2, %15
  %sub = sub nsw i32 %13, %mul
  store i32 %sub, i32* %windows_width, align 4
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_height2 = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 47
  %17 = load i32, i32* %pixel_height2, align 4
  %18 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 58
  %19 = load i32, i32* %menu_bar_height, align 4
  %20 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 28
  %21 = load i32, i32* %tool_bar_height, align 4
  %add = add nsw i32 %19, %21
  %sub3 = sub nsw i32 %17, %add
  %22 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width4 = getelementptr inbounds %struct.frame, %struct.frame* %22, i32 0, i32 51
  %23 = load i32, i32* %internal_border_width4, align 4
  %mul5 = mul nsw i32 2, %23
  %sub6 = sub nsw i32 %sub3, %mul5
  store i32 %sub6, i32* %windows_height, align 4
  %24 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 5
  %25 = load i64, i64* %root_window, align 8
  %call = call %struct.window* @XWINDOW(i64 %25)
  store %struct.window* %call, %struct.window** %r, align 8
  %26 = load %struct.window*, %struct.window** %r, align 8
  %pixel_width7 = getelementptr inbounds %struct.window, %struct.window* %26, i32 0, i32 34
  %27 = load i32, i32* %pixel_width7, align 4
  store i32 %27, i32* %old_windows_width, align 4
  %28 = load %struct.window*, %struct.window** %r, align 8
  %pixel_height8 = getelementptr inbounds %struct.window, %struct.window* %28, i32 0, i32 35
  %29 = load i32, i32* %pixel_height8, align 4
  %30 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 7
  %31 = load i64, i64* %minibuffer_window, align 8
  %call9 = call zeroext i1 @WINDOWP(i64 %31)
  br i1 %call9, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %32 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window10 = getelementptr inbounds %struct.frame, %struct.frame* %32, i32 0, i32 7
  %33 = load i64, i64* %minibuffer_window10, align 8
  %call11 = call %struct.window* @XWINDOW(i64 %33)
  %frame = getelementptr inbounds %struct.window, %struct.window* %call11, i32 0, i32 1
  %34 = load i64, i64* %frame, align 8
  %sub12 = sub nsw i64 %34, 5
  %35 = inttoptr i64 %sub12 to i8*
  %36 = bitcast i8* %35 to %struct.frame*
  %37 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %cmp = icmp eq %struct.frame* %36, %37
  br i1 %cmp, label %land.lhs.true.13, label %cond.false

land.lhs.true.13:                                 ; preds = %land.lhs.true
  %38 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %root_window14 = getelementptr inbounds %struct.frame, %struct.frame* %38, i32 0, i32 5
  %39 = load i64, i64* %root_window14, align 8
  %40 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window15 = getelementptr inbounds %struct.frame, %struct.frame* %40, i32 0, i32 7
  %41 = load i64, i64* %minibuffer_window15, align 8
  %cmp16 = icmp eq i64 %39, %41
  br i1 %cmp16, label %cond.false, label %cond.true

cond.true:                                        ; preds = %land.lhs.true.13
  %42 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window17 = getelementptr inbounds %struct.frame, %struct.frame* %42, i32 0, i32 7
  %43 = load i64, i64* %minibuffer_window17, align 8
  %call18 = call %struct.window* @XWINDOW(i64 %43)
  %pixel_height19 = getelementptr inbounds %struct.window, %struct.window* %call18, i32 0, i32 35
  %44 = load i32, i32* %pixel_height19, align 4
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.13, %land.lhs.true, %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %44, %cond.true ], [ 0, %cond.false ]
  %add20 = add nsw i32 %29, %cond
  store i32 %add20, i32* %old_windows_height, align 4
  %45 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_width = getelementptr inbounds %struct.frame, %struct.frame* %45, i32 0, i32 40
  %46 = load i32, i32* %text_width, align 4
  store i32 %46, i32* %old_text_width, align 4
  %47 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_height = getelementptr inbounds %struct.frame, %struct.frame* %47, i32 0, i32 41
  %48 = load i32, i32* %text_height, align 4
  store i32 %48, i32* %old_text_height, align 4
  %49 = load i32, i32* %new_width.addr, align 4
  %cmp21 = icmp sge i32 %49, 0
  br i1 %cmp21, label %cond.true.22, label %cond.false.23

cond.true.22:                                     ; preds = %cond.end
  %50 = load i32, i32* %new_width.addr, align 4
  br label %cond.end.24

cond.false.23:                                    ; preds = %cond.end
  %51 = load i32, i32* %old_text_width, align 4
  br label %cond.end.24

cond.end.24:                                      ; preds = %cond.false.23, %cond.true.22
  %cond25 = phi i32 [ %50, %cond.true.22 ], [ %51, %cond.false.23 ]
  store i32 %cond25, i32* %new_text_width, align 4
  %52 = load i32, i32* %new_height.addr, align 4
  %cmp26 = icmp sge i32 %52, 0
  br i1 %cmp26, label %cond.true.27, label %cond.false.28

cond.true.27:                                     ; preds = %cond.end.24
  %53 = load i32, i32* %new_height.addr, align 4
  br label %cond.end.29

cond.false.28:                                    ; preds = %cond.end.24
  %54 = load i32, i32* %old_text_height, align 4
  br label %cond.end.29

cond.end.29:                                      ; preds = %cond.false.28, %cond.true.27
  %cond30 = phi i32 [ %53, %cond.true.27 ], [ %54, %cond.false.28 ]
  store i32 %cond30, i32* %new_text_height, align 4
  %55 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %56 = bitcast %struct.frame* %55 to i8*
  %call32 = call i64 @make_lisp_ptr(i8* %56, i32 5)
  store i64 %call32, i64* %frame31, align 8
  %57 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call33 = call i64 @builtin_lisp_symbol(i32 162)
  %58 = load i32, i32* %new_text_width, align 4
  %59 = load i32, i32* %new_text_height, align 4
  %60 = load i64, i64* %parameter.addr, align 8
  %61 = load i32, i32* %inhibit.addr, align 4
  %conv = sext i32 %61 to i64
  %shl = shl i64 %conv, 2
  %add34 = add i64 %shl, 2
  %call35 = call i64 @list2(i64 %60, i64 %add34)
  call void @frame_size_history_add(%struct.frame* %57, i64 %call33, i32 %58, i32 %59, i64 %call35)
  %62 = load i64, i64* %frame31, align 8
  %call36 = call i64 @builtin_lisp_symbol(i32 901)
  %63 = load i32, i32* %inhibit.addr, align 4
  %cmp37 = icmp eq i32 %63, 5
  br i1 %cmp37, label %cond.true.39, label %cond.false.41

cond.true.39:                                     ; preds = %cond.end.29
  %call40 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.43

cond.false.41:                                    ; preds = %cond.end.29
  %call42 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.43

cond.end.43:                                      ; preds = %cond.false.41, %cond.true.39
  %cond44 = phi i64 [ %call40, %cond.true.39 ], [ %call42, %cond.false.41 ]
  %call45 = call i64 @builtin_lisp_symbol(i32 901)
  %call46 = call i32 @frame_windows_min_size(i64 %62, i64 %call36, i64 %cond44, i64 %call45)
  store i32 %call46, i32* %min_windows_width, align 4
  %64 = load i64, i64* %frame31, align 8
  %call47 = call i64 @builtin_lisp_symbol(i32 0)
  %65 = load i32, i32* %inhibit.addr, align 4
  %cmp48 = icmp eq i32 %65, 5
  br i1 %cmp48, label %cond.true.50, label %cond.false.52

cond.true.50:                                     ; preds = %cond.end.43
  %call51 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.54

cond.false.52:                                    ; preds = %cond.end.43
  %call53 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.54

cond.end.54:                                      ; preds = %cond.false.52, %cond.true.50
  %cond55 = phi i64 [ %call51, %cond.true.50 ], [ %call53, %cond.false.52 ]
  %call56 = call i64 @builtin_lisp_symbol(i32 901)
  %call57 = call i32 @frame_windows_min_size(i64 %64, i64 %call47, i64 %cond55, i64 %call56)
  store i32 %call57, i32* %min_windows_height, align 4
  %66 = load i32, i32* %inhibit.addr, align 4
  %cmp58 = icmp sge i32 %66, 2
  br i1 %cmp58, label %land.lhs.true.60, label %if.else

land.lhs.true.60:                                 ; preds = %cond.end.54
  %67 = load i32, i32* %inhibit.addr, align 4
  %cmp61 = icmp sle i32 %67, 4
  br i1 %cmp61, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true.60
  %68 = load i32, i32* %windows_width, align 4
  %69 = load i32, i32* %min_windows_width, align 4
  %cmp63 = icmp sge i32 %68, %69
  br i1 %cmp63, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then
  %70 = load i32, i32* %inhibit.addr, align 4
  %cmp65 = icmp eq i32 %70, 4
  br i1 %cmp65, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %71 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %72 = load i64, i64* %parameter.addr, align 8
  %call67 = call zeroext i1 @frame_inhibit_resize(%struct.frame* %71, i1 zeroext true, i64 %72)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %73 = phi i1 [ true, %land.rhs ], [ %call67, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %if.then
  %74 = phi i1 [ false, %if.then ], [ %73, %lor.end ]
  %frombool69 = zext i1 %74 to i8
  store i8 %frombool69, i8* %inhibit_horizontal, align 1
  %75 = load i32, i32* %windows_height, align 4
  %76 = load i32, i32* %min_windows_height, align 4
  %cmp70 = icmp sge i32 %75, %76
  br i1 %cmp70, label %land.rhs.72, label %land.end.79

land.rhs.72:                                      ; preds = %land.end
  %77 = load i32, i32* %inhibit.addr, align 4
  %cmp73 = icmp eq i32 %77, 4
  br i1 %cmp73, label %lor.end.78, label %lor.rhs.75

lor.rhs.75:                                       ; preds = %land.rhs.72
  %78 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %79 = load i64, i64* %parameter.addr, align 8
  %call76 = call zeroext i1 @frame_inhibit_resize(%struct.frame* %78, i1 zeroext false, i64 %79)
  br label %lor.end.78

lor.end.78:                                       ; preds = %lor.rhs.75, %land.rhs.72
  %80 = phi i1 [ true, %land.rhs.72 ], [ %call76, %lor.rhs.75 ]
  br label %land.end.79

land.end.79:                                      ; preds = %lor.end.78, %land.end
  %81 = phi i1 [ false, %land.end ], [ %80, %lor.end.78 ]
  %frombool80 = zext i1 %81 to i8
  store i8 %frombool80, i8* %inhibit_vertical, align 1
  br label %if.end

if.else:                                          ; preds = %land.lhs.true.60, %cond.end.54
  %82 = load i32, i32* %inhibit.addr, align 4
  %cmp81 = icmp eq i32 %82, 5
  %frombool83 = zext i1 %cmp81 to i8
  store i8 %frombool83, i8* %inhibit_vertical, align 1
  %frombool84 = zext i1 %cmp81 to i8
  store i8 %frombool84, i8* %inhibit_horizontal, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %land.end.79
  %83 = load i8, i8* %inhibit_horizontal, align 1
  %tobool = trunc i8 %83 to i1
  br i1 %tobool, label %land.lhs.true.86, label %cond.false.90

land.lhs.true.86:                                 ; preds = %if.end
  %84 = load i32, i32* %inhibit.addr, align 4
  %cmp87 = icmp slt i32 %84, 5
  br i1 %cmp87, label %cond.true.89, label %cond.false.90

cond.true.89:                                     ; preds = %land.lhs.true.86
  %85 = load i32, i32* %old_pixel_width, align 4
  br label %cond.end.135

cond.false.90:                                    ; preds = %land.lhs.true.86, %if.end
  %86 = load i32, i32* %new_text_width, align 4
  %87 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %vertical_scroll_bar_type = getelementptr inbounds %struct.frame, %struct.frame* %87, i32 0, i32 26
  %88 = bitcast i48* %vertical_scroll_bar_type to i64*
  %bf.load = load i64, i64* %88, align 8
  %bf.lshr = lshr i64 %bf.load, 30
  %bf.clear = and i64 %bf.lshr, 3
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp91 = icmp ne i32 %bf.cast, 0
  br i1 %cmp91, label %cond.true.93, label %cond.false.94

cond.true.93:                                     ; preds = %cond.false.90
  %89 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_width = getelementptr inbounds %struct.frame, %struct.frame* %89, i32 0, i32 69
  %90 = load i32, i32* %config_scroll_bar_width, align 4
  br label %cond.end.95

cond.false.94:                                    ; preds = %cond.false.90
  br label %cond.end.95

cond.end.95:                                      ; preds = %cond.false.94, %cond.true.93
  %cond96 = phi i32 [ %90, %cond.true.93 ], [ 0, %cond.false.94 ]
  %add97 = add nsw i32 %86, %cond96
  %91 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_fringe_width = getelementptr inbounds %struct.frame, %struct.frame* %91, i32 0, i32 54
  %92 = load i32, i32* %left_fringe_width, align 4
  %93 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %right_fringe_width = getelementptr inbounds %struct.frame, %struct.frame* %93, i32 0, i32 55
  %94 = load i32, i32* %right_fringe_width, align 4
  %add98 = add nsw i32 %92, %94
  %add99 = add nsw i32 %add97, %add98
  %95 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width100 = getelementptr inbounds %struct.frame, %struct.frame* %95, i32 0, i32 51
  %96 = load i32, i32* %internal_border_width100, align 4
  %mul101 = mul nsw i32 2, %96
  %add102 = add nsw i32 %add99, %mul101
  %97 = load i32, i32* %min_windows_width, align 4
  %98 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width103 = getelementptr inbounds %struct.frame, %struct.frame* %98, i32 0, i32 51
  %99 = load i32, i32* %internal_border_width103, align 4
  %mul104 = mul nsw i32 2, %99
  %add105 = add nsw i32 %97, %mul104
  %cmp106 = icmp sgt i32 %add102, %add105
  br i1 %cmp106, label %cond.true.108, label %cond.false.129

cond.true.108:                                    ; preds = %cond.end.95
  %100 = load i32, i32* %new_text_width, align 4
  %101 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %vertical_scroll_bar_type109 = getelementptr inbounds %struct.frame, %struct.frame* %101, i32 0, i32 26
  %102 = bitcast i48* %vertical_scroll_bar_type109 to i64*
  %bf.load110 = load i64, i64* %102, align 8
  %bf.lshr111 = lshr i64 %bf.load110, 30
  %bf.clear112 = and i64 %bf.lshr111, 3
  %bf.cast113 = trunc i64 %bf.clear112 to i32
  %cmp114 = icmp ne i32 %bf.cast113, 0
  br i1 %cmp114, label %cond.true.116, label %cond.false.118

cond.true.116:                                    ; preds = %cond.true.108
  %103 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_width117 = getelementptr inbounds %struct.frame, %struct.frame* %103, i32 0, i32 69
  %104 = load i32, i32* %config_scroll_bar_width117, align 4
  br label %cond.end.119

cond.false.118:                                   ; preds = %cond.true.108
  br label %cond.end.119

cond.end.119:                                     ; preds = %cond.false.118, %cond.true.116
  %cond120 = phi i32 [ %104, %cond.true.116 ], [ 0, %cond.false.118 ]
  %add121 = add nsw i32 %100, %cond120
  %105 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_fringe_width122 = getelementptr inbounds %struct.frame, %struct.frame* %105, i32 0, i32 54
  %106 = load i32, i32* %left_fringe_width122, align 4
  %107 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %right_fringe_width123 = getelementptr inbounds %struct.frame, %struct.frame* %107, i32 0, i32 55
  %108 = load i32, i32* %right_fringe_width123, align 4
  %add124 = add nsw i32 %106, %108
  %add125 = add nsw i32 %add121, %add124
  %109 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width126 = getelementptr inbounds %struct.frame, %struct.frame* %109, i32 0, i32 51
  %110 = load i32, i32* %internal_border_width126, align 4
  %mul127 = mul nsw i32 2, %110
  %add128 = add nsw i32 %add125, %mul127
  br label %cond.end.133

cond.false.129:                                   ; preds = %cond.end.95
  %111 = load i32, i32* %min_windows_width, align 4
  %112 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width130 = getelementptr inbounds %struct.frame, %struct.frame* %112, i32 0, i32 51
  %113 = load i32, i32* %internal_border_width130, align 4
  %mul131 = mul nsw i32 2, %113
  %add132 = add nsw i32 %111, %mul131
  br label %cond.end.133

cond.end.133:                                     ; preds = %cond.false.129, %cond.end.119
  %cond134 = phi i32 [ %add128, %cond.end.119 ], [ %add132, %cond.false.129 ]
  br label %cond.end.135

cond.end.135:                                     ; preds = %cond.end.133, %cond.true.89
  %cond136 = phi i32 [ %85, %cond.true.89 ], [ %cond134, %cond.end.133 ]
  store i32 %cond136, i32* %new_pixel_width, align 4
  %114 = load i32, i32* %new_pixel_width, align 4
  %115 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width137 = getelementptr inbounds %struct.frame, %struct.frame* %115, i32 0, i32 51
  %116 = load i32, i32* %internal_border_width137, align 4
  %mul138 = mul nsw i32 2, %116
  %sub139 = sub nsw i32 %114, %mul138
  store i32 %sub139, i32* %new_windows_width, align 4
  %117 = load i32, i32* %new_pixel_width, align 4
  %118 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %vertical_scroll_bar_type140 = getelementptr inbounds %struct.frame, %struct.frame* %118, i32 0, i32 26
  %119 = bitcast i48* %vertical_scroll_bar_type140 to i64*
  %bf.load141 = load i64, i64* %119, align 8
  %bf.lshr142 = lshr i64 %bf.load141, 30
  %bf.clear143 = and i64 %bf.lshr142, 3
  %bf.cast144 = trunc i64 %bf.clear143 to i32
  %cmp145 = icmp ne i32 %bf.cast144, 0
  br i1 %cmp145, label %cond.true.147, label %cond.false.149

cond.true.147:                                    ; preds = %cond.end.135
  %120 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_width148 = getelementptr inbounds %struct.frame, %struct.frame* %120, i32 0, i32 69
  %121 = load i32, i32* %config_scroll_bar_width148, align 4
  br label %cond.end.150

cond.false.149:                                   ; preds = %cond.end.135
  br label %cond.end.150

cond.end.150:                                     ; preds = %cond.false.149, %cond.true.147
  %cond151 = phi i32 [ %121, %cond.true.147 ], [ 0, %cond.false.149 ]
  %sub152 = sub nsw i32 %117, %cond151
  %122 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_fringe_width153 = getelementptr inbounds %struct.frame, %struct.frame* %122, i32 0, i32 54
  %123 = load i32, i32* %left_fringe_width153, align 4
  %124 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %right_fringe_width154 = getelementptr inbounds %struct.frame, %struct.frame* %124, i32 0, i32 55
  %125 = load i32, i32* %right_fringe_width154, align 4
  %add155 = add nsw i32 %123, %125
  %sub156 = sub nsw i32 %sub152, %add155
  %126 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width157 = getelementptr inbounds %struct.frame, %struct.frame* %126, i32 0, i32 51
  %127 = load i32, i32* %internal_border_width157, align 4
  %mul158 = mul nsw i32 2, %127
  %sub159 = sub nsw i32 %sub156, %mul158
  store i32 %sub159, i32* %new_text_width, align 4
  %128 = load i32, i32* %new_text_width, align 4
  %129 = load i32, i32* %unit_width, align 4
  %div = sdiv i32 %128, %129
  store i32 %div, i32* %new_cols, align 4
  %130 = load i8, i8* %inhibit_vertical, align 1
  %tobool160 = trunc i8 %130 to i1
  br i1 %tobool160, label %land.lhs.true.162, label %cond.false.166

land.lhs.true.162:                                ; preds = %cond.end.150
  %131 = load i32, i32* %inhibit.addr, align 4
  %cmp163 = icmp slt i32 %131, 5
  br i1 %cmp163, label %cond.true.165, label %cond.false.166

cond.true.165:                                    ; preds = %land.lhs.true.162
  %132 = load i32, i32* %old_pixel_height, align 4
  br label %cond.end.223

cond.false.166:                                   ; preds = %land.lhs.true.162, %cond.end.150
  %133 = load i32, i32* %new_text_height, align 4
  %134 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_height167 = getelementptr inbounds %struct.frame, %struct.frame* %134, i32 0, i32 58
  %135 = load i32, i32* %menu_bar_height167, align 4
  %136 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_height168 = getelementptr inbounds %struct.frame, %struct.frame* %136, i32 0, i32 28
  %137 = load i32, i32* %tool_bar_height168, align 4
  %add169 = add nsw i32 %135, %137
  %add170 = add nsw i32 %133, %add169
  %138 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %horizontal_scroll_bars = getelementptr inbounds %struct.frame, %struct.frame* %138, i32 0, i32 26
  %139 = bitcast i48* %horizontal_scroll_bars to i64*
  %bf.load171 = load i64, i64* %139, align 8
  %bf.lshr172 = lshr i64 %bf.load171, 32
  %bf.clear173 = and i64 %bf.lshr172, 1
  %bf.cast174 = trunc i64 %bf.clear173 to i1
  br i1 %bf.cast174, label %cond.true.176, label %cond.false.177

cond.true.176:                                    ; preds = %cond.false.166
  %140 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %140, i32 0, i32 71
  %141 = load i32, i32* %config_scroll_bar_height, align 4
  br label %cond.end.178

cond.false.177:                                   ; preds = %cond.false.166
  br label %cond.end.178

cond.end.178:                                     ; preds = %cond.false.177, %cond.true.176
  %cond179 = phi i32 [ %141, %cond.true.176 ], [ 0, %cond.false.177 ]
  %add180 = add nsw i32 %add170, %cond179
  %142 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width181 = getelementptr inbounds %struct.frame, %struct.frame* %142, i32 0, i32 51
  %143 = load i32, i32* %internal_border_width181, align 4
  %mul182 = mul nsw i32 2, %143
  %add183 = add nsw i32 %add180, %mul182
  %144 = load i32, i32* %min_windows_height, align 4
  %145 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_height184 = getelementptr inbounds %struct.frame, %struct.frame* %145, i32 0, i32 58
  %146 = load i32, i32* %menu_bar_height184, align 4
  %147 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_height185 = getelementptr inbounds %struct.frame, %struct.frame* %147, i32 0, i32 28
  %148 = load i32, i32* %tool_bar_height185, align 4
  %add186 = add nsw i32 %146, %148
  %add187 = add nsw i32 %144, %add186
  %149 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width188 = getelementptr inbounds %struct.frame, %struct.frame* %149, i32 0, i32 51
  %150 = load i32, i32* %internal_border_width188, align 4
  %mul189 = mul nsw i32 2, %150
  %add190 = add nsw i32 %add187, %mul189
  %cmp191 = icmp sgt i32 %add183, %add190
  br i1 %cmp191, label %cond.true.193, label %cond.false.213

cond.true.193:                                    ; preds = %cond.end.178
  %151 = load i32, i32* %new_text_height, align 4
  %152 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_height194 = getelementptr inbounds %struct.frame, %struct.frame* %152, i32 0, i32 58
  %153 = load i32, i32* %menu_bar_height194, align 4
  %154 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_height195 = getelementptr inbounds %struct.frame, %struct.frame* %154, i32 0, i32 28
  %155 = load i32, i32* %tool_bar_height195, align 4
  %add196 = add nsw i32 %153, %155
  %add197 = add nsw i32 %151, %add196
  %156 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %horizontal_scroll_bars198 = getelementptr inbounds %struct.frame, %struct.frame* %156, i32 0, i32 26
  %157 = bitcast i48* %horizontal_scroll_bars198 to i64*
  %bf.load199 = load i64, i64* %157, align 8
  %bf.lshr200 = lshr i64 %bf.load199, 32
  %bf.clear201 = and i64 %bf.lshr200, 1
  %bf.cast202 = trunc i64 %bf.clear201 to i1
  br i1 %bf.cast202, label %cond.true.204, label %cond.false.206

cond.true.204:                                    ; preds = %cond.true.193
  %158 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_height205 = getelementptr inbounds %struct.frame, %struct.frame* %158, i32 0, i32 71
  %159 = load i32, i32* %config_scroll_bar_height205, align 4
  br label %cond.end.207

cond.false.206:                                   ; preds = %cond.true.193
  br label %cond.end.207

cond.end.207:                                     ; preds = %cond.false.206, %cond.true.204
  %cond208 = phi i32 [ %159, %cond.true.204 ], [ 0, %cond.false.206 ]
  %add209 = add nsw i32 %add197, %cond208
  %160 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width210 = getelementptr inbounds %struct.frame, %struct.frame* %160, i32 0, i32 51
  %161 = load i32, i32* %internal_border_width210, align 4
  %mul211 = mul nsw i32 2, %161
  %add212 = add nsw i32 %add209, %mul211
  br label %cond.end.221

cond.false.213:                                   ; preds = %cond.end.178
  %162 = load i32, i32* %min_windows_height, align 4
  %163 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_height214 = getelementptr inbounds %struct.frame, %struct.frame* %163, i32 0, i32 58
  %164 = load i32, i32* %menu_bar_height214, align 4
  %165 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_height215 = getelementptr inbounds %struct.frame, %struct.frame* %165, i32 0, i32 28
  %166 = load i32, i32* %tool_bar_height215, align 4
  %add216 = add nsw i32 %164, %166
  %add217 = add nsw i32 %162, %add216
  %167 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width218 = getelementptr inbounds %struct.frame, %struct.frame* %167, i32 0, i32 51
  %168 = load i32, i32* %internal_border_width218, align 4
  %mul219 = mul nsw i32 2, %168
  %add220 = add nsw i32 %add217, %mul219
  br label %cond.end.221

cond.end.221:                                     ; preds = %cond.false.213, %cond.end.207
  %cond222 = phi i32 [ %add212, %cond.end.207 ], [ %add220, %cond.false.213 ]
  br label %cond.end.223

cond.end.223:                                     ; preds = %cond.end.221, %cond.true.165
  %cond224 = phi i32 [ %132, %cond.true.165 ], [ %cond222, %cond.end.221 ]
  store i32 %cond224, i32* %new_pixel_height, align 4
  %169 = load i32, i32* %new_pixel_height, align 4
  %170 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_height225 = getelementptr inbounds %struct.frame, %struct.frame* %170, i32 0, i32 58
  %171 = load i32, i32* %menu_bar_height225, align 4
  %172 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_height226 = getelementptr inbounds %struct.frame, %struct.frame* %172, i32 0, i32 28
  %173 = load i32, i32* %tool_bar_height226, align 4
  %add227 = add nsw i32 %171, %173
  %sub228 = sub nsw i32 %169, %add227
  %174 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width229 = getelementptr inbounds %struct.frame, %struct.frame* %174, i32 0, i32 51
  %175 = load i32, i32* %internal_border_width229, align 4
  %mul230 = mul nsw i32 2, %175
  %sub231 = sub nsw i32 %sub228, %mul230
  store i32 %sub231, i32* %new_windows_height, align 4
  %176 = load i32, i32* %new_pixel_height, align 4
  %177 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_height232 = getelementptr inbounds %struct.frame, %struct.frame* %177, i32 0, i32 58
  %178 = load i32, i32* %menu_bar_height232, align 4
  %179 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_height233 = getelementptr inbounds %struct.frame, %struct.frame* %179, i32 0, i32 28
  %180 = load i32, i32* %tool_bar_height233, align 4
  %add234 = add nsw i32 %178, %180
  %sub235 = sub nsw i32 %176, %add234
  %181 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %horizontal_scroll_bars236 = getelementptr inbounds %struct.frame, %struct.frame* %181, i32 0, i32 26
  %182 = bitcast i48* %horizontal_scroll_bars236 to i64*
  %bf.load237 = load i64, i64* %182, align 8
  %bf.lshr238 = lshr i64 %bf.load237, 32
  %bf.clear239 = and i64 %bf.lshr238, 1
  %bf.cast240 = trunc i64 %bf.clear239 to i1
  br i1 %bf.cast240, label %cond.true.242, label %cond.false.244

cond.true.242:                                    ; preds = %cond.end.223
  %183 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_height243 = getelementptr inbounds %struct.frame, %struct.frame* %183, i32 0, i32 71
  %184 = load i32, i32* %config_scroll_bar_height243, align 4
  br label %cond.end.245

cond.false.244:                                   ; preds = %cond.end.223
  br label %cond.end.245

cond.end.245:                                     ; preds = %cond.false.244, %cond.true.242
  %cond246 = phi i32 [ %184, %cond.true.242 ], [ 0, %cond.false.244 ]
  %sub247 = sub nsw i32 %sub235, %cond246
  %185 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width248 = getelementptr inbounds %struct.frame, %struct.frame* %185, i32 0, i32 51
  %186 = load i32, i32* %internal_border_width248, align 4
  %mul249 = mul nsw i32 2, %186
  %sub250 = sub nsw i32 %sub247, %mul249
  store i32 %sub250, i32* %new_text_height, align 4
  %187 = load i32, i32* %new_text_height, align 4
  %188 = load i32, i32* %unit_height, align 4
  %div251 = sdiv i32 %187, %188
  store i32 %div251, i32* %new_lines, align 4
  %189 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %189, i32 0, i32 26
  %190 = bitcast i48* %output_method to i64*
  %bf.load252 = load i64, i64* %190, align 8
  %bf.lshr253 = lshr i64 %bf.load252, 23
  %bf.clear254 = and i64 %bf.lshr253, 7
  %bf.cast255 = trunc i64 %bf.clear254 to i32
  %cmp256 = icmp eq i32 %bf.cast255, 2
  br i1 %cmp256, label %land.lhs.true.258, label %if.end.313

land.lhs.true.258:                                ; preds = %cond.end.245
  %191 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %can_x_set_window_size = getelementptr inbounds %struct.frame, %struct.frame* %191, i32 0, i32 26
  %192 = bitcast i48* %can_x_set_window_size to i64*
  %bf.load259 = load i64, i64* %192, align 8
  %bf.lshr260 = lshr i64 %bf.load259, 34
  %bf.clear261 = and i64 %bf.lshr260, 1
  %bf.cast262 = trunc i64 %bf.clear261 to i1
  br i1 %bf.cast262, label %land.lhs.true.264, label %if.end.313

land.lhs.true.264:                                ; preds = %land.lhs.true.258
  %193 = load i8, i8* %inhibit_horizontal, align 1
  %tobool265 = trunc i8 %193 to i1
  br i1 %tobool265, label %lor.lhs.false.274, label %land.lhs.true.266

land.lhs.true.266:                                ; preds = %land.lhs.true.264
  %194 = load i32, i32* %new_pixel_width, align 4
  %195 = load i32, i32* %old_pixel_width, align 4
  %cmp267 = icmp ne i32 %194, %195
  br i1 %cmp267, label %if.then.285, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.266
  %196 = load i32, i32* %inhibit.addr, align 4
  %cmp269 = icmp eq i32 %196, 0
  br i1 %cmp269, label %if.then.285, label %lor.lhs.false.271

lor.lhs.false.271:                                ; preds = %lor.lhs.false
  %197 = load i32, i32* %inhibit.addr, align 4
  %cmp272 = icmp eq i32 %197, 2
  br i1 %cmp272, label %if.then.285, label %lor.lhs.false.274

lor.lhs.false.274:                                ; preds = %lor.lhs.false.271, %land.lhs.true.264
  %198 = load i8, i8* %inhibit_vertical, align 1
  %tobool275 = trunc i8 %198 to i1
  br i1 %tobool275, label %if.end.313, label %land.lhs.true.276

land.lhs.true.276:                                ; preds = %lor.lhs.false.274
  %199 = load i32, i32* %new_pixel_height, align 4
  %200 = load i32, i32* %old_pixel_height, align 4
  %cmp277 = icmp ne i32 %199, %200
  br i1 %cmp277, label %if.then.285, label %lor.lhs.false.279

lor.lhs.false.279:                                ; preds = %land.lhs.true.276
  %201 = load i32, i32* %inhibit.addr, align 4
  %cmp280 = icmp eq i32 %201, 0
  br i1 %cmp280, label %if.then.285, label %lor.lhs.false.282

lor.lhs.false.282:                                ; preds = %lor.lhs.false.279
  %202 = load i32, i32* %inhibit.addr, align 4
  %cmp283 = icmp eq i32 %202, 2
  br i1 %cmp283, label %if.then.285, label %if.end.313

if.then.285:                                      ; preds = %lor.lhs.false.282, %lor.lhs.false.279, %land.lhs.true.276, %lor.lhs.false.271, %lor.lhs.false, %land.lhs.true.266
  %203 = load i8, i8* %inhibit_horizontal, align 1
  %tobool286 = trunc i8 %203 to i1
  br i1 %tobool286, label %if.then.287, label %if.else.288

if.then.287:                                      ; preds = %if.then.285
  %204 = load i32, i32* %old_text_width, align 4
  store i32 %204, i32* %new_text_width, align 4
  br label %if.end.292

if.else.288:                                      ; preds = %if.then.285
  %205 = load i8, i8* %inhibit_vertical, align 1
  %tobool289 = trunc i8 %205 to i1
  br i1 %tobool289, label %if.then.290, label %if.end.291

if.then.290:                                      ; preds = %if.else.288
  %206 = load i32, i32* %old_text_height, align 4
  store i32 %206, i32* %new_text_height, align 4
  br label %if.end.291

if.end.291:                                       ; preds = %if.then.290, %if.else.288
  br label %if.end.292

if.end.292:                                       ; preds = %if.end.291, %if.then.287
  %207 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call293 = call i64 @builtin_lisp_symbol(i32 163)
  %208 = load i32, i32* %new_text_width, align 4
  %209 = load i32, i32* %new_text_height, align 4
  %210 = load i8, i8* %inhibit_horizontal, align 1
  %tobool294 = trunc i8 %210 to i1
  br i1 %tobool294, label %cond.true.296, label %cond.false.298

cond.true.296:                                    ; preds = %if.end.292
  %call297 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.300

cond.false.298:                                   ; preds = %if.end.292
  %call299 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.300

cond.end.300:                                     ; preds = %cond.false.298, %cond.true.296
  %cond301 = phi i64 [ %call297, %cond.true.296 ], [ %call299, %cond.false.298 ]
  %211 = load i8, i8* %inhibit_vertical, align 1
  %tobool302 = trunc i8 %211 to i1
  br i1 %tobool302, label %cond.true.304, label %cond.false.306

cond.true.304:                                    ; preds = %cond.end.300
  %call305 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.308

cond.false.306:                                   ; preds = %cond.end.300
  %call307 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.308

cond.end.308:                                     ; preds = %cond.false.306, %cond.true.304
  %cond309 = phi i64 [ %call305, %cond.true.304 ], [ %call307, %cond.false.306 ]
  %call310 = call i64 @list2(i64 %cond301, i64 %cond309)
  call void @frame_size_history_add(%struct.frame* %207, i64 %call293, i32 %208, i32 %209, i64 %call310)
  %212 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %213 = load i32, i32* %new_text_width, align 4
  %214 = load i32, i32* %new_text_height, align 4
  call void @x_set_window_size(%struct.frame* %212, i1 zeroext false, i32 %213, i32 %214, i1 zeroext true)
  %215 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %resized_p = getelementptr inbounds %struct.frame, %struct.frame* %215, i32 0, i32 26
  %216 = bitcast i48* %resized_p to i64*
  %bf.load311 = load i64, i64* %216, align 8
  %bf.clear312 = and i64 %bf.load311, -3
  %bf.set = or i64 %bf.clear312, 2
  store i64 %bf.set, i64* %216, align 8
  br label %return

if.end.313:                                       ; preds = %lor.lhs.false.282, %lor.lhs.false.274, %land.lhs.true.258, %cond.end.245
  %217 = load i32, i32* %new_text_width, align 4
  %218 = load i32, i32* %old_text_width, align 4
  %cmp314 = icmp eq i32 %217, %218
  br i1 %cmp314, label %land.lhs.true.316, label %if.end.342

land.lhs.true.316:                                ; preds = %if.end.313
  %219 = load i32, i32* %new_text_height, align 4
  %220 = load i32, i32* %old_text_height, align 4
  %cmp317 = icmp eq i32 %219, %220
  br i1 %cmp317, label %land.lhs.true.319, label %if.end.342

land.lhs.true.319:                                ; preds = %land.lhs.true.316
  %221 = load i32, i32* %new_windows_width, align 4
  %222 = load i32, i32* %old_windows_width, align 4
  %cmp320 = icmp eq i32 %221, %222
  br i1 %cmp320, label %land.lhs.true.322, label %if.end.342

land.lhs.true.322:                                ; preds = %land.lhs.true.319
  %223 = load i32, i32* %new_windows_height, align 4
  %224 = load i32, i32* %old_windows_height, align 4
  %cmp323 = icmp eq i32 %223, %224
  br i1 %cmp323, label %land.lhs.true.325, label %if.end.342

land.lhs.true.325:                                ; preds = %land.lhs.true.322
  %225 = load i32, i32* %new_pixel_width, align 4
  %226 = load i32, i32* %old_pixel_width, align 4
  %cmp326 = icmp eq i32 %225, %226
  br i1 %cmp326, label %land.lhs.true.328, label %if.end.342

land.lhs.true.328:                                ; preds = %land.lhs.true.325
  %227 = load i32, i32* %new_pixel_height, align 4
  %228 = load i32, i32* %old_pixel_height, align 4
  %cmp329 = icmp eq i32 %227, %228
  br i1 %cmp329, label %land.lhs.true.331, label %if.end.342

land.lhs.true.331:                                ; preds = %land.lhs.true.328
  %229 = load i32, i32* %new_cols, align 4
  %230 = load i32, i32* %old_cols, align 4
  %cmp332 = icmp eq i32 %229, %230
  br i1 %cmp332, label %land.lhs.true.334, label %if.end.342

land.lhs.true.334:                                ; preds = %land.lhs.true.331
  %231 = load i32, i32* %new_lines, align 4
  %232 = load i32, i32* %old_lines, align 4
  %cmp335 = icmp eq i32 %231, %232
  br i1 %cmp335, label %if.then.337, label %if.end.342

if.then.337:                                      ; preds = %land.lhs.true.334
  %233 = load i64, i64* %frame31, align 8
  %call338 = call i64 @builtin_lisp_symbol(i32 901)
  %call339 = call i64 @sanitize_window_sizes(i64 %233, i64 %call338)
  %234 = load i64, i64* %frame31, align 8
  %call340 = call i64 @builtin_lisp_symbol(i32 0)
  %call341 = call i64 @sanitize_window_sizes(i64 %234, i64 %call340)
  br label %return

if.end.342:                                       ; preds = %land.lhs.true.334, %land.lhs.true.331, %land.lhs.true.328, %land.lhs.true.325, %land.lhs.true.322, %land.lhs.true.319, %land.lhs.true.316, %if.end.313
  call void @block_input()
  %235 = load i32, i32* %new_windows_width, align 4
  %236 = load i32, i32* %old_windows_width, align 4
  %cmp343 = icmp ne i32 %235, %236
  br i1 %cmp343, label %if.then.345, label %if.else.376

if.then.345:                                      ; preds = %if.end.342
  %237 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %238 = load i32, i32* %new_windows_width, align 4
  call void @resize_frame_windows(%struct.frame* %237, i32 %238, i1 zeroext true, i1 zeroext true)
  %239 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method346 = getelementptr inbounds %struct.frame, %struct.frame* %239, i32 0, i32 26
  %240 = bitcast i48* %output_method346 to i64*
  %bf.load347 = load i64, i64* %240, align 8
  %bf.lshr348 = lshr i64 %bf.load347, 23
  %bf.clear349 = and i64 %bf.lshr348, 7
  %bf.cast350 = trunc i64 %bf.clear349 to i32
  %cmp351 = icmp eq i32 %bf.cast350, 1
  br i1 %cmp351, label %land.lhs.true.353, label %if.end.375

land.lhs.true.353:                                ; preds = %if.then.345
  %241 = load i8, i8* %pretend.addr, align 1
  %tobool354 = trunc i8 %241 to i1
  br i1 %tobool354, label %if.end.375, label %if.then.355

if.then.355:                                      ; preds = %land.lhs.true.353
  %242 = load i32, i32* %new_cols, align 4
  %243 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method356 = getelementptr inbounds %struct.frame, %struct.frame* %243, i32 0, i32 26
  %244 = bitcast i48* %output_method356 to i64*
  %bf.load357 = load i64, i64* %244, align 8
  %bf.lshr358 = lshr i64 %bf.load357, 23
  %bf.clear359 = and i64 %bf.lshr358, 7
  %bf.cast360 = trunc i64 %bf.clear359 to i32
  %cmp361 = icmp eq i32 %bf.cast360, 1
  br i1 %cmp361, label %cond.true.371, label %lor.lhs.false.363

lor.lhs.false.363:                                ; preds = %if.then.355
  %245 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method364 = getelementptr inbounds %struct.frame, %struct.frame* %245, i32 0, i32 26
  %246 = bitcast i48* %output_method364 to i64*
  %bf.load365 = load i64, i64* %246, align 8
  %bf.lshr366 = lshr i64 %bf.load365, 23
  %bf.clear367 = and i64 %bf.lshr366, 7
  %bf.cast368 = trunc i64 %bf.clear367 to i32
  %cmp369 = icmp eq i32 %bf.cast368, 3
  br i1 %cmp369, label %cond.true.371, label %cond.false.372

cond.true.371:                                    ; preds = %lor.lhs.false.363, %if.then.355
  %247 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %247, i32 0, i32 61
  %248 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %248, i32 0, i32 12
  %tty = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %249 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  br label %cond.end.373

cond.false.372:                                   ; preds = %lor.lhs.false.363
  call void @emacs_abort() #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.373

cond.end.373:                                     ; preds = %250, %cond.true.371
  %cond374 = phi %struct.tty_display_info* [ %249, %cond.true.371 ], [ null, %250 ]
  %Wcm = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond374, i32 0, i32 10
  %251 = load %struct.cm*, %struct.cm** %Wcm, align 8
  %cm_cols = getelementptr inbounds %struct.cm, %struct.cm* %251, i32 0, i32 18
  store i32 %242, i32* %cm_cols, align 4
  br label %if.end.375

if.end.375:                                       ; preds = %cond.end.373, %land.lhs.true.353, %if.then.345
  br label %if.end.384

if.else.376:                                      ; preds = %if.end.342
  %252 = load i32, i32* %new_cols, align 4
  %253 = load i32, i32* %old_cols, align 4
  %cmp377 = icmp ne i32 %252, %253
  br i1 %cmp377, label %if.then.379, label %if.end.383

if.then.379:                                      ; preds = %if.else.376
  %call380 = call i64 @builtin_lisp_symbol(i32 1028)
  %254 = load i64, i64* %frame31, align 8
  %call381 = call i64 @builtin_lisp_symbol(i32 901)
  %call382 = call i64 @call2(i64 %call380, i64 %254, i64 %call381)
  br label %if.end.383

if.end.383:                                       ; preds = %if.then.379, %if.else.376
  br label %if.end.384

if.end.384:                                       ; preds = %if.end.383, %if.end.375
  %255 = load i32, i32* %new_windows_height, align 4
  %256 = load i32, i32* %old_windows_height, align 4
  %cmp385 = icmp ne i32 %255, %256
  br i1 %cmp385, label %if.then.393, label %lor.lhs.false.387

lor.lhs.false.387:                                ; preds = %if.end.384
  %257 = load %struct.window*, %struct.window** %r, align 8
  %pixel_top = getelementptr inbounds %struct.window, %struct.window* %257, i32 0, i32 31
  %258 = load i32, i32* %pixel_top, align 4
  %259 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_height388 = getelementptr inbounds %struct.frame, %struct.frame* %259, i32 0, i32 58
  %260 = load i32, i32* %menu_bar_height388, align 4
  %261 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_height389 = getelementptr inbounds %struct.frame, %struct.frame* %261, i32 0, i32 28
  %262 = load i32, i32* %tool_bar_height389, align 4
  %add390 = add nsw i32 %260, %262
  %cmp391 = icmp ne i32 %258, %add390
  br i1 %cmp391, label %if.then.393, label %if.else.430

if.then.393:                                      ; preds = %lor.lhs.false.387, %if.end.384
  %263 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %264 = load i32, i32* %new_windows_height, align 4
  call void @resize_frame_windows(%struct.frame* %263, i32 %264, i1 zeroext false, i1 zeroext true)
  %265 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method394 = getelementptr inbounds %struct.frame, %struct.frame* %265, i32 0, i32 26
  %266 = bitcast i48* %output_method394 to i64*
  %bf.load395 = load i64, i64* %266, align 8
  %bf.lshr396 = lshr i64 %bf.load395, 23
  %bf.clear397 = and i64 %bf.lshr396, 7
  %bf.cast398 = trunc i64 %bf.clear397 to i32
  %cmp399 = icmp eq i32 %bf.cast398, 1
  br i1 %cmp399, label %land.lhs.true.401, label %if.end.429

land.lhs.true.401:                                ; preds = %if.then.393
  %267 = load i8, i8* %pretend.addr, align 1
  %tobool402 = trunc i8 %267 to i1
  br i1 %tobool402, label %if.end.429, label %if.then.403

if.then.403:                                      ; preds = %land.lhs.true.401
  %268 = load i32, i32* %new_lines, align 4
  %269 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %269, i32 0, i32 57
  %270 = load i32, i32* %menu_bar_lines, align 4
  %271 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %271, i32 0, i32 27
  %272 = load i32, i32* %tool_bar_lines, align 4
  %add404 = add nsw i32 %270, %272
  %add405 = add nsw i32 %268, %add404
  %273 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method406 = getelementptr inbounds %struct.frame, %struct.frame* %273, i32 0, i32 26
  %274 = bitcast i48* %output_method406 to i64*
  %bf.load407 = load i64, i64* %274, align 8
  %bf.lshr408 = lshr i64 %bf.load407, 23
  %bf.clear409 = and i64 %bf.lshr408, 7
  %bf.cast410 = trunc i64 %bf.clear409 to i32
  %cmp411 = icmp eq i32 %bf.cast410, 1
  br i1 %cmp411, label %cond.true.421, label %lor.lhs.false.413

lor.lhs.false.413:                                ; preds = %if.then.403
  %275 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method414 = getelementptr inbounds %struct.frame, %struct.frame* %275, i32 0, i32 26
  %276 = bitcast i48* %output_method414 to i64*
  %bf.load415 = load i64, i64* %276, align 8
  %bf.lshr416 = lshr i64 %bf.load415, 23
  %bf.clear417 = and i64 %bf.lshr416, 7
  %bf.cast418 = trunc i64 %bf.clear417 to i32
  %cmp419 = icmp eq i32 %bf.cast418, 3
  br i1 %cmp419, label %cond.true.421, label %cond.false.425

cond.true.421:                                    ; preds = %lor.lhs.false.413, %if.then.403
  %277 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal422 = getelementptr inbounds %struct.frame, %struct.frame* %277, i32 0, i32 61
  %278 = load %struct.terminal*, %struct.terminal** %terminal422, align 8
  %display_info423 = getelementptr inbounds %struct.terminal, %struct.terminal* %278, i32 0, i32 12
  %tty424 = bitcast %union.display_info* %display_info423 to %struct.tty_display_info**
  %279 = load %struct.tty_display_info*, %struct.tty_display_info** %tty424, align 8
  br label %cond.end.426

cond.false.425:                                   ; preds = %lor.lhs.false.413
  call void @emacs_abort() #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.426

cond.end.426:                                     ; preds = %280, %cond.true.421
  %cond427 = phi %struct.tty_display_info* [ %279, %cond.true.421 ], [ null, %280 ]
  %Wcm428 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond427, i32 0, i32 10
  %281 = load %struct.cm*, %struct.cm** %Wcm428, align 8
  %cm_rows = getelementptr inbounds %struct.cm, %struct.cm* %281, i32 0, i32 19
  store i32 %add405, i32* %cm_rows, align 4
  br label %if.end.429

if.end.429:                                       ; preds = %cond.end.426, %land.lhs.true.401, %if.then.393
  br label %if.end.438

if.else.430:                                      ; preds = %lor.lhs.false.387
  %282 = load i32, i32* %new_lines, align 4
  %283 = load i32, i32* %old_lines, align 4
  %cmp431 = icmp ne i32 %282, %283
  br i1 %cmp431, label %if.then.433, label %if.end.437

if.then.433:                                      ; preds = %if.else.430
  %call434 = call i64 @builtin_lisp_symbol(i32 1028)
  %284 = load i64, i64* %frame31, align 8
  %call435 = call i64 @builtin_lisp_symbol(i32 0)
  %call436 = call i64 @call2(i64 %call434, i64 %284, i64 %call435)
  br label %if.end.437

if.end.437:                                       ; preds = %if.then.433, %if.else.430
  br label %if.end.438

if.end.438:                                       ; preds = %if.end.437, %if.end.429
  %285 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call439 = call i64 @builtin_lisp_symbol(i32 164)
  %286 = load i32, i32* %new_text_width, align 4
  %287 = load i32, i32* %new_text_height, align 4
  %288 = load i32, i32* %old_pixel_width, align 4
  %conv440 = sext i32 %288 to i64
  %shl441 = shl i64 %conv440, 2
  %add442 = add i64 %shl441, 2
  %289 = load i32, i32* %old_pixel_height, align 4
  %conv443 = sext i32 %289 to i64
  %shl444 = shl i64 %conv443, 2
  %add445 = add i64 %shl444, 2
  %290 = load i32, i32* %new_pixel_width, align 4
  %conv446 = sext i32 %290 to i64
  %shl447 = shl i64 %conv446, 2
  %add448 = add i64 %shl447, 2
  %291 = load i32, i32* %new_pixel_height, align 4
  %conv449 = sext i32 %291 to i64
  %shl450 = shl i64 %conv449, 2
  %add451 = add i64 %shl450, 2
  %call452 = call i64 @list4(i64 %add442, i64 %add445, i64 %add448, i64 %add451)
  call void @frame_size_history_add(%struct.frame* %285, i64 %call439, i32 %286, i32 %287, i64 %call452)
  %292 = load i32, i32* %new_text_width, align 4
  %293 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_width453 = getelementptr inbounds %struct.frame, %struct.frame* %293, i32 0, i32 40
  store i32 %292, i32* %text_width453, align 4
  %294 = load i32, i32* %new_text_height, align 4
  %295 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_height454 = getelementptr inbounds %struct.frame, %struct.frame* %295, i32 0, i32 41
  store i32 %294, i32* %text_height454, align 4
  %296 = load i32, i32* %new_pixel_width, align 4
  %297 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_width455 = getelementptr inbounds %struct.frame, %struct.frame* %297, i32 0, i32 46
  store i32 %296, i32* %pixel_width455, align 4
  %298 = load i32, i32* %new_pixel_height, align 4
  %299 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_height456 = getelementptr inbounds %struct.frame, %struct.frame* %299, i32 0, i32 47
  store i32 %298, i32* %pixel_height456, align 4
  %300 = load i32, i32* %new_cols, align 4
  %301 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_cols457 = getelementptr inbounds %struct.frame, %struct.frame* %301, i32 0, i32 36
  store i32 %300, i32* %text_cols457, align 4
  %302 = load i32, i32* %new_cols, align 4
  %303 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %vertical_scroll_bar_type458 = getelementptr inbounds %struct.frame, %struct.frame* %303, i32 0, i32 26
  %304 = bitcast i48* %vertical_scroll_bar_type458 to i64*
  %bf.load459 = load i64, i64* %304, align 8
  %bf.lshr460 = lshr i64 %bf.load459, 30
  %bf.clear461 = and i64 %bf.lshr460, 3
  %bf.cast462 = trunc i64 %bf.clear461 to i32
  %cmp463 = icmp ne i32 %bf.cast462, 0
  br i1 %cmp463, label %cond.true.465, label %cond.false.466

cond.true.465:                                    ; preds = %if.end.438
  %305 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_cols = getelementptr inbounds %struct.frame, %struct.frame* %305, i32 0, i32 70
  %306 = load i32, i32* %config_scroll_bar_cols, align 4
  br label %cond.end.467

cond.false.466:                                   ; preds = %if.end.438
  br label %cond.end.467

cond.end.467:                                     ; preds = %cond.false.466, %cond.true.465
  %cond468 = phi i32 [ %306, %cond.true.465 ], [ 0, %cond.false.466 ]
  %add469 = add nsw i32 %302, %cond468
  %307 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %fringe_cols = getelementptr inbounds %struct.frame, %struct.frame* %307, i32 0, i32 56
  %308 = load i32, i32* %fringe_cols, align 4
  %add470 = add nsw i32 %add469, %308
  %309 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %total_cols = getelementptr inbounds %struct.frame, %struct.frame* %309, i32 0, i32 38
  store i32 %add470, i32* %total_cols, align 4
  %310 = load i32, i32* %new_lines, align 4
  %311 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_lines471 = getelementptr inbounds %struct.frame, %struct.frame* %311, i32 0, i32 37
  store i32 %310, i32* %text_lines471, align 4
  %312 = load i32, i32* %new_lines, align 4
  %313 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_lines472 = getelementptr inbounds %struct.frame, %struct.frame* %313, i32 0, i32 57
  %314 = load i32, i32* %menu_bar_lines472, align 4
  %315 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_lines473 = getelementptr inbounds %struct.frame, %struct.frame* %315, i32 0, i32 27
  %316 = load i32, i32* %tool_bar_lines473, align 4
  %add474 = add nsw i32 %314, %316
  %add475 = add nsw i32 %312, %add474
  %317 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %horizontal_scroll_bars476 = getelementptr inbounds %struct.frame, %struct.frame* %317, i32 0, i32 26
  %318 = bitcast i48* %horizontal_scroll_bars476 to i64*
  %bf.load477 = load i64, i64* %318, align 8
  %bf.lshr478 = lshr i64 %bf.load477, 32
  %bf.clear479 = and i64 %bf.lshr478, 1
  %bf.cast480 = trunc i64 %bf.clear479 to i1
  br i1 %bf.cast480, label %cond.true.482, label %cond.false.483

cond.true.482:                                    ; preds = %cond.end.467
  %319 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %319, i32 0, i32 72
  %320 = load i32, i32* %config_scroll_bar_lines, align 4
  br label %cond.end.484

cond.false.483:                                   ; preds = %cond.end.467
  br label %cond.end.484

cond.end.484:                                     ; preds = %cond.false.483, %cond.true.482
  %cond485 = phi i32 [ %320, %cond.true.482 ], [ 0, %cond.false.483 ]
  %add486 = add nsw i32 %add475, %cond485
  %321 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %321, i32 0, i32 39
  store i32 %add486, i32* %total_lines, align 4
  %322 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %selected_window = getelementptr inbounds %struct.frame, %struct.frame* %322, i32 0, i32 6
  %323 = load i64, i64* %selected_window, align 8
  %call487 = call %struct.window* @XWINDOW(i64 %323)
  store %struct.window* %call487, %struct.window** %w, align 8
  %324 = load %struct.window*, %struct.window** %w, align 8
  call void @window_box(%struct.window* %324, i32 1, i32* %text_area_x, i32* %text_area_y, i32* %text_area_width, i32* %text_area_height)
  %325 = load %struct.window*, %struct.window** %w, align 8
  %cursor = getelementptr inbounds %struct.window, %struct.window* %325, i32 0, i32 49
  %x = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %cursor, i32 0, i32 0
  %326 = load i32, i32* %x, align 4
  %327 = load i32, i32* %text_area_x, align 4
  %328 = load i32, i32* %text_area_width, align 4
  %add488 = add nsw i32 %327, %328
  %cmp489 = icmp sge i32 %326, %add488
  br i1 %cmp489, label %if.then.491, label %if.end.495

if.then.491:                                      ; preds = %cond.end.484
  %329 = load %struct.window*, %struct.window** %w, align 8
  %cursor492 = getelementptr inbounds %struct.window, %struct.window* %329, i32 0, i32 49
  %x493 = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %cursor492, i32 0, i32 0
  store i32 0, i32* %x493, align 4
  %330 = load %struct.window*, %struct.window** %w, align 8
  %cursor494 = getelementptr inbounds %struct.window, %struct.window* %330, i32 0, i32 49
  %hpos = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %cursor494, i32 0, i32 2
  store i32 0, i32* %hpos, align 4
  br label %if.end.495

if.end.495:                                       ; preds = %if.then.491, %cond.end.484
  %331 = load %struct.window*, %struct.window** %w, align 8
  %cursor496 = getelementptr inbounds %struct.window, %struct.window* %331, i32 0, i32 49
  %y = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %cursor496, i32 0, i32 1
  %332 = load i32, i32* %y, align 4
  %333 = load i32, i32* %text_area_y, align 4
  %334 = load i32, i32* %text_area_height, align 4
  %add497 = add nsw i32 %333, %334
  %cmp498 = icmp sge i32 %332, %add497
  br i1 %cmp498, label %if.then.500, label %if.end.504

if.then.500:                                      ; preds = %if.end.495
  %335 = load %struct.window*, %struct.window** %w, align 8
  %cursor501 = getelementptr inbounds %struct.window, %struct.window* %335, i32 0, i32 49
  %y502 = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %cursor501, i32 0, i32 1
  store i32 0, i32* %y502, align 4
  %336 = load %struct.window*, %struct.window** %w, align 8
  %cursor503 = getelementptr inbounds %struct.window, %struct.window* %336, i32 0, i32 49
  %vpos = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %cursor503, i32 0, i32 3
  store i32 0, i32* %vpos, align 4
  br label %if.end.504

if.end.504:                                       ; preds = %if.then.500, %if.end.495
  %337 = load i64, i64* %frame31, align 8
  %call505 = call i64 @builtin_lisp_symbol(i32 901)
  %call506 = call i64 @sanitize_window_sizes(i64 %337, i64 %call505)
  %338 = load i64, i64* %frame31, align 8
  %call507 = call i64 @builtin_lisp_symbol(i32 0)
  %call508 = call i64 @sanitize_window_sizes(i64 %338, i64 %call507)
  %339 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @adjust_frame_glyphs(%struct.frame* %339)
  %340 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @calculate_costs(%struct.frame* %340)
  store i8 1, i8* @frame_garbaged, align 1
  %341 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @fset_redisplay(%struct.frame* %341)
  %342 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %garbaged = getelementptr inbounds %struct.frame, %struct.frame* %342, i32 0, i32 26
  %343 = bitcast i48* %garbaged to i64*
  %bf.load509 = load i64, i64* %343, align 8
  %bf.clear510 = and i64 %bf.load509, -8193
  %bf.set511 = or i64 %bf.clear510, 8192
  store i64 %bf.set511, i64* %343, align 8
  %344 = load i32, i32* %new_pixel_width, align 4
  %345 = load i32, i32* %old_pixel_width, align 4
  %cmp512 = icmp ne i32 %344, %345
  br i1 %cmp512, label %lor.end.517, label %lor.rhs.514

lor.rhs.514:                                      ; preds = %if.end.504
  %346 = load i32, i32* %new_pixel_height, align 4
  %347 = load i32, i32* %old_pixel_height, align 4
  %cmp515 = icmp ne i32 %346, %347
  br label %lor.end.517

lor.end.517:                                      ; preds = %lor.rhs.514, %if.end.504
  %348 = phi i1 [ true, %if.end.504 ], [ %cmp515, %lor.rhs.514 ]
  %349 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %resized_p518 = getelementptr inbounds %struct.frame, %struct.frame* %349, i32 0, i32 26
  %350 = bitcast i48* %resized_p518 to i64*
  %351 = zext i1 %348 to i64
  %bf.load519 = load i64, i64* %350, align 8
  %bf.shl = shl i64 %351, 1
  %bf.clear520 = and i64 %bf.load519, -3
  %bf.set521 = or i64 %bf.clear520, %bf.shl
  store i64 %bf.set521, i64* %350, align 8
  %bf.result.cast = trunc i64 %351 to i8
  %tobool522 = trunc i8 %bf.result.cast to i1
  call void @unblock_input()
  %352 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @run_window_configuration_change_hook(%struct.frame* %352)
  br label %return

return:                                           ; preds = %lor.end.517, %if.then.337, %cond.end.308
  ret void
}

declare %struct.window* @XWINDOW(i64) #1

declare zeroext i1 @WINDOWP(i64) #1

declare i64 @list2(i64, i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @frame_windows_min_size(i64 %frame, i64 %horizontal, i64 %ignore, i64 %pixelwise) #0 {
entry:
  %frame.addr = alloca i64, align 8
  %horizontal.addr = alloca i64, align 8
  %ignore.addr = alloca i64, align 8
  %pixelwise.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  store i64 %horizontal, i64* %horizontal.addr, align 8
  store i64 %ignore, i64* %ignore.addr, align 8
  store i64 %pixelwise, i64* %pixelwise.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 460)
  %0 = load i64, i64* %frame.addr, align 8
  %1 = load i64, i64* %horizontal.addr, align 8
  %2 = load i64, i64* %ignore.addr, align 8
  %3 = load i64, i64* %pixelwise.addr, align 8
  %call1 = call i64 @call4(i64 %call, i64 %0, i64 %1, i64 %2, i64 %3)
  %shr = ashr i64 %call1, 2
  %conv = trunc i64 %shr to i32
  ret i32 %conv
}

declare void @x_set_window_size(%struct.frame*, i1 zeroext, i32, i32, i1 zeroext) #1

declare i64 @sanitize_window_sizes(i64, i64) #1

declare void @block_input() #1

declare void @resize_frame_windows(%struct.frame*, i32, i1 zeroext, i1 zeroext) #1

declare i64 @call2(i64, i64, i64) #1

declare void @window_box(%struct.window*, i32, i32*, i32*, i32*, i32*) #1

declare void @adjust_frame_glyphs(%struct.frame*) #1

declare void @calculate_costs(%struct.frame*) #1

declare void @fset_redisplay(%struct.frame*) #1

declare void @unblock_input() #1

declare void @run_window_configuration_change_hook(%struct.frame*) #1

; Function Attrs: nounwind uwtable
define %struct.frame* @make_frame(i1 zeroext %mini_p) #0 {
entry:
  %mini_p.addr = alloca i8, align 1
  %frame = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %rw = alloca %struct.window*, align 8
  %mw = alloca %struct.window*, align 8
  %root_window = alloca i64, align 8
  %mini_window = alloca i64, align 8
  %buf = alloca i64, align 8
  %frombool = zext i1 %mini_p to i8
  store i8 %frombool, i8* %mini_p.addr, align 1
  %call = call %struct.frame* @allocate_frame()
  store %struct.frame* %call, %struct.frame** %f, align 8
  %0 = load %struct.frame*, %struct.frame** %f, align 8
  %1 = bitcast %struct.frame* %0 to i8*
  %call1 = call i64 @make_lisp_ptr(i8* %1, i32 5)
  store i64 %call1, i64* %frame, align 8
  %2 = load %struct.frame*, %struct.frame** %f, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 928)
  call void @fset_tool_bar_position(%struct.frame* %2, i64 %call2)
  %3 = load %struct.frame*, %struct.frame** %f, align 8
  %wants_modeline = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 26
  %4 = bitcast i48* %wants_modeline to i64*
  %bf.load = load i64, i64* %4, align 8
  %bf.clear = and i64 %bf.load, -16385
  %bf.set = or i64 %bf.clear, 16384
  store i64 %bf.set, i64* %4, align 8
  %5 = load %struct.frame*, %struct.frame** %f, align 8
  %redisplay = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 26
  %6 = bitcast i48* %redisplay to i64*
  %bf.load3 = load i64, i64* %6, align 8
  %bf.clear4 = and i64 %bf.load3, -257
  %bf.set5 = or i64 %bf.clear4, 256
  store i64 %bf.set5, i64* %6, align 8
  %7 = load %struct.frame*, %struct.frame** %f, align 8
  %garbaged = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 26
  %8 = bitcast i48* %garbaged to i64*
  %bf.load6 = load i64, i64* %8, align 8
  %bf.clear7 = and i64 %bf.load6, -8193
  %bf.set8 = or i64 %bf.clear7, 8192
  store i64 %bf.set8, i64* %8, align 8
  %9 = load %struct.frame*, %struct.frame** %f, align 8
  %can_x_set_window_size = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 26
  %10 = bitcast i48* %can_x_set_window_size to i64*
  %bf.load9 = load i64, i64* %10, align 8
  %bf.clear10 = and i64 %bf.load9, -17179869185
  store i64 %bf.clear10, i64* %10, align 8
  %11 = load %struct.frame*, %struct.frame** %f, align 8
  %after_make_frame = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 26
  %12 = bitcast i48* %after_make_frame to i64*
  %bf.load11 = load i64, i64* %12, align 8
  %bf.clear12 = and i64 %bf.load11, -34359738369
  store i64 %bf.clear12, i64* %12, align 8
  %13 = load %struct.frame*, %struct.frame** %f, align 8
  %inhibit_horizontal_resize = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 26
  %14 = bitcast i48* %inhibit_horizontal_resize to i64*
  %bf.load13 = load i64, i64* %14, align 8
  %bf.clear14 = and i64 %bf.load13, -274877906945
  store i64 %bf.clear14, i64* %14, align 8
  %15 = load %struct.frame*, %struct.frame** %f, align 8
  %inhibit_vertical_resize = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 26
  %16 = bitcast i48* %inhibit_vertical_resize to i64*
  %bf.load15 = load i64, i64* %16, align 8
  %bf.clear16 = and i64 %bf.load15, -549755813889
  store i64 %bf.clear16, i64* %16, align 8
  %17 = load %struct.frame*, %struct.frame** %f, align 8
  %tool_bar_redisplayed = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 26
  %18 = bitcast i48* %tool_bar_redisplayed to i64*
  %bf.load17 = load i64, i64* %18, align 8
  %bf.clear18 = and i64 %bf.load17, -68719476737
  store i64 %bf.clear18, i64* %18, align 8
  %19 = load %struct.frame*, %struct.frame** %f, align 8
  %tool_bar_resized = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 26
  %20 = bitcast i48* %tool_bar_resized to i64*
  %bf.load19 = load i64, i64* %20, align 8
  %bf.clear20 = and i64 %bf.load19, -137438953473
  store i64 %bf.clear20, i64* %20, align 8
  %21 = load %struct.frame*, %struct.frame** %f, align 8
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 59
  store i32 1, i32* %column_width, align 4
  %22 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %22, i32 0, i32 60
  store i32 1, i32* %line_height, align 4
  %23 = load %struct.frame*, %struct.frame** %f, align 8
  %vertical_scroll_bar_type = getelementptr inbounds %struct.frame, %struct.frame* %23, i32 0, i32 26
  %24 = bitcast i48* %vertical_scroll_bar_type to i64*
  %bf.load21 = load i64, i64* %24, align 8
  %bf.clear22 = and i64 %bf.load21, -3221225473
  store i64 %bf.clear22, i64* %24, align 8
  %25 = load %struct.frame*, %struct.frame** %f, align 8
  %horizontal_scroll_bars = getelementptr inbounds %struct.frame, %struct.frame* %25, i32 0, i32 26
  %26 = bitcast i48* %horizontal_scroll_bars to i64*
  %bf.load23 = load i64, i64* %26, align 8
  %bf.clear24 = and i64 %bf.load23, -4294967297
  store i64 %bf.clear24, i64* %26, align 8
  %27 = load %struct.frame*, %struct.frame** %f, align 8
  %want_fullscreen = getelementptr inbounds %struct.frame, %struct.frame* %27, i32 0, i32 26
  %28 = bitcast i48* %want_fullscreen to i64*
  %bf.load25 = load i64, i64* %28, align 8
  %bf.clear26 = and i64 %bf.load25, -1006632961
  store i64 %bf.clear26, i64* %28, align 8
  %call27 = call i64 @make_window()
  store i64 %call27, i64* %root_window, align 8
  %29 = load i64, i64* %root_window, align 8
  %call28 = call %struct.window* @XWINDOW(i64 %29)
  store %struct.window* %call28, %struct.window** %rw, align 8
  %30 = load i8, i8* %mini_p.addr, align 1
  %tobool = trunc i8 %30 to i1
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call29 = call i64 @make_window()
  store i64 %call29, i64* %mini_window, align 8
  %31 = load i64, i64* %mini_window, align 8
  %call30 = call %struct.window* @XWINDOW(i64 %31)
  store %struct.window* %call30, %struct.window** %mw, align 8
  %32 = load %struct.window*, %struct.window** %rw, align 8
  %33 = load i64, i64* %mini_window, align 8
  call void @wset_next(%struct.window* %32, i64 %33)
  %34 = load %struct.window*, %struct.window** %mw, align 8
  %35 = load i64, i64* %root_window, align 8
  call void @wset_prev(%struct.window* %34, i64 %35)
  %36 = load %struct.window*, %struct.window** %mw, align 8
  %mini = getelementptr inbounds %struct.window, %struct.window* %36, i32 0, i32 67
  %bf.load31 = load i16, i16* %mini, align 4
  %bf.clear32 = and i16 %bf.load31, -2
  %bf.set33 = or i16 %bf.clear32, 1
  store i16 %bf.set33, i16* %mini, align 4
  %37 = load %struct.window*, %struct.window** %mw, align 8
  %38 = load i64, i64* %frame, align 8
  call void @wset_frame(%struct.window* %37, i64 %38)
  %39 = load %struct.frame*, %struct.frame** %f, align 8
  %40 = load i64, i64* %mini_window, align 8
  call void @fset_minibuffer_window(%struct.frame* %39, i64 %40)
  br label %if.end

if.else:                                          ; preds = %entry
  %call34 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call34, i64* %mini_window, align 8
  %41 = load %struct.window*, %struct.window** %rw, align 8
  %call35 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_next(%struct.window* %41, i64 %call35)
  %42 = load %struct.frame*, %struct.frame** %f, align 8
  %call36 = call i64 @builtin_lisp_symbol(i32 0)
  call void @fset_minibuffer_window(%struct.frame* %42, i64 %call36)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %43 = load %struct.window*, %struct.window** %rw, align 8
  %44 = load i64, i64* %frame, align 8
  call void @wset_frame(%struct.window* %43, i64 %44)
  %45 = load %struct.frame*, %struct.frame** %f, align 8
  %text_cols = getelementptr inbounds %struct.frame, %struct.frame* %45, i32 0, i32 36
  store i32 10, i32* %text_cols, align 4
  %46 = load %struct.frame*, %struct.frame** %f, align 8
  %vertical_scroll_bar_type37 = getelementptr inbounds %struct.frame, %struct.frame* %46, i32 0, i32 26
  %47 = bitcast i48* %vertical_scroll_bar_type37 to i64*
  %bf.load38 = load i64, i64* %47, align 8
  %bf.lshr = lshr i64 %bf.load38, 30
  %bf.clear39 = and i64 %bf.lshr, 3
  %bf.cast = trunc i64 %bf.clear39 to i32
  %cmp = icmp ne i32 %bf.cast, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %48 = load %struct.frame*, %struct.frame** %f, align 8
  %config_scroll_bar_cols = getelementptr inbounds %struct.frame, %struct.frame* %48, i32 0, i32 70
  %49 = load i32, i32* %config_scroll_bar_cols, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %49, %cond.true ], [ 0, %cond.false ]
  %add = add nsw i32 10, %cond
  %50 = load %struct.frame*, %struct.frame** %f, align 8
  %fringe_cols = getelementptr inbounds %struct.frame, %struct.frame* %50, i32 0, i32 56
  %51 = load i32, i32* %fringe_cols, align 4
  %add40 = add nsw i32 %add, %51
  %52 = load %struct.frame*, %struct.frame** %f, align 8
  %total_cols = getelementptr inbounds %struct.frame, %struct.frame* %52, i32 0, i32 38
  store i32 %add40, i32* %total_cols, align 4
  %53 = load %struct.frame*, %struct.frame** %f, align 8
  %text_lines = getelementptr inbounds %struct.frame, %struct.frame* %53, i32 0, i32 37
  store i32 10, i32* %text_lines, align 4
  %54 = load %struct.frame*, %struct.frame** %f, align 8
  %menu_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %54, i32 0, i32 57
  %55 = load i32, i32* %menu_bar_lines, align 4
  %56 = load %struct.frame*, %struct.frame** %f, align 8
  %tool_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %56, i32 0, i32 27
  %57 = load i32, i32* %tool_bar_lines, align 4
  %add41 = add nsw i32 %55, %57
  %add42 = add nsw i32 10, %add41
  %58 = load %struct.frame*, %struct.frame** %f, align 8
  %horizontal_scroll_bars43 = getelementptr inbounds %struct.frame, %struct.frame* %58, i32 0, i32 26
  %59 = bitcast i48* %horizontal_scroll_bars43 to i64*
  %bf.load44 = load i64, i64* %59, align 8
  %bf.lshr45 = lshr i64 %bf.load44, 32
  %bf.clear46 = and i64 %bf.lshr45, 1
  %bf.cast47 = trunc i64 %bf.clear46 to i1
  br i1 %bf.cast47, label %cond.true.48, label %cond.false.49

cond.true.48:                                     ; preds = %cond.end
  %60 = load %struct.frame*, %struct.frame** %f, align 8
  %config_scroll_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %60, i32 0, i32 72
  %61 = load i32, i32* %config_scroll_bar_lines, align 4
  br label %cond.end.50

cond.false.49:                                    ; preds = %cond.end
  br label %cond.end.50

cond.end.50:                                      ; preds = %cond.false.49, %cond.true.48
  %cond51 = phi i32 [ %61, %cond.true.48 ], [ 0, %cond.false.49 ]
  %add52 = add nsw i32 %add42, %cond51
  %62 = load %struct.frame*, %struct.frame** %f, align 8
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %62, i32 0, i32 39
  store i32 %add52, i32* %total_lines, align 4
  %63 = load %struct.frame*, %struct.frame** %f, align 8
  %text_cols53 = getelementptr inbounds %struct.frame, %struct.frame* %63, i32 0, i32 36
  %64 = load i32, i32* %text_cols53, align 4
  %65 = load %struct.frame*, %struct.frame** %f, align 8
  %column_width54 = getelementptr inbounds %struct.frame, %struct.frame* %65, i32 0, i32 59
  %66 = load i32, i32* %column_width54, align 4
  %mul = mul nsw i32 %64, %66
  %67 = load %struct.frame*, %struct.frame** %f, align 8
  %text_width = getelementptr inbounds %struct.frame, %struct.frame* %67, i32 0, i32 40
  store i32 %mul, i32* %text_width, align 4
  %68 = load %struct.frame*, %struct.frame** %f, align 8
  %text_cols55 = getelementptr inbounds %struct.frame, %struct.frame* %68, i32 0, i32 36
  %69 = load i32, i32* %text_cols55, align 4
  %70 = load %struct.frame*, %struct.frame** %f, align 8
  %column_width56 = getelementptr inbounds %struct.frame, %struct.frame* %70, i32 0, i32 59
  %71 = load i32, i32* %column_width56, align 4
  %mul57 = mul nsw i32 %69, %71
  %72 = load %struct.frame*, %struct.frame** %f, align 8
  %vertical_scroll_bar_type58 = getelementptr inbounds %struct.frame, %struct.frame* %72, i32 0, i32 26
  %73 = bitcast i48* %vertical_scroll_bar_type58 to i64*
  %bf.load59 = load i64, i64* %73, align 8
  %bf.lshr60 = lshr i64 %bf.load59, 30
  %bf.clear61 = and i64 %bf.lshr60, 3
  %bf.cast62 = trunc i64 %bf.clear61 to i32
  %cmp63 = icmp ne i32 %bf.cast62, 0
  br i1 %cmp63, label %cond.true.64, label %cond.false.65

cond.true.64:                                     ; preds = %cond.end.50
  %74 = load %struct.frame*, %struct.frame** %f, align 8
  %config_scroll_bar_width = getelementptr inbounds %struct.frame, %struct.frame* %74, i32 0, i32 69
  %75 = load i32, i32* %config_scroll_bar_width, align 4
  br label %cond.end.66

cond.false.65:                                    ; preds = %cond.end.50
  br label %cond.end.66

cond.end.66:                                      ; preds = %cond.false.65, %cond.true.64
  %cond67 = phi i32 [ %75, %cond.true.64 ], [ 0, %cond.false.65 ]
  %add68 = add nsw i32 %mul57, %cond67
  %76 = load %struct.frame*, %struct.frame** %f, align 8
  %left_fringe_width = getelementptr inbounds %struct.frame, %struct.frame* %76, i32 0, i32 54
  %77 = load i32, i32* %left_fringe_width, align 4
  %78 = load %struct.frame*, %struct.frame** %f, align 8
  %right_fringe_width = getelementptr inbounds %struct.frame, %struct.frame* %78, i32 0, i32 55
  %79 = load i32, i32* %right_fringe_width, align 4
  %add69 = add nsw i32 %77, %79
  %add70 = add nsw i32 %add68, %add69
  %80 = load %struct.frame*, %struct.frame** %f, align 8
  %internal_border_width = getelementptr inbounds %struct.frame, %struct.frame* %80, i32 0, i32 51
  %81 = load i32, i32* %internal_border_width, align 4
  %mul71 = mul nsw i32 2, %81
  %add72 = add nsw i32 %add70, %mul71
  %82 = load %struct.frame*, %struct.frame** %f, align 8
  %pixel_width = getelementptr inbounds %struct.frame, %struct.frame* %82, i32 0, i32 46
  store i32 %add72, i32* %pixel_width, align 4
  %83 = load %struct.frame*, %struct.frame** %f, align 8
  %text_lines73 = getelementptr inbounds %struct.frame, %struct.frame* %83, i32 0, i32 37
  %84 = load i32, i32* %text_lines73, align 4
  %85 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height74 = getelementptr inbounds %struct.frame, %struct.frame* %85, i32 0, i32 60
  %86 = load i32, i32* %line_height74, align 4
  %mul75 = mul nsw i32 %84, %86
  %87 = load %struct.frame*, %struct.frame** %f, align 8
  %text_height = getelementptr inbounds %struct.frame, %struct.frame* %87, i32 0, i32 41
  store i32 %mul75, i32* %text_height, align 4
  %88 = load %struct.frame*, %struct.frame** %f, align 8
  %text_lines76 = getelementptr inbounds %struct.frame, %struct.frame* %88, i32 0, i32 37
  %89 = load i32, i32* %text_lines76, align 4
  %90 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height77 = getelementptr inbounds %struct.frame, %struct.frame* %90, i32 0, i32 60
  %91 = load i32, i32* %line_height77, align 4
  %mul78 = mul nsw i32 %89, %91
  %92 = load %struct.frame*, %struct.frame** %f, align 8
  %menu_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %92, i32 0, i32 58
  %93 = load i32, i32* %menu_bar_height, align 4
  %94 = load %struct.frame*, %struct.frame** %f, align 8
  %tool_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %94, i32 0, i32 28
  %95 = load i32, i32* %tool_bar_height, align 4
  %add79 = add nsw i32 %93, %95
  %add80 = add nsw i32 %mul78, %add79
  %96 = load %struct.frame*, %struct.frame** %f, align 8
  %horizontal_scroll_bars81 = getelementptr inbounds %struct.frame, %struct.frame* %96, i32 0, i32 26
  %97 = bitcast i48* %horizontal_scroll_bars81 to i64*
  %bf.load82 = load i64, i64* %97, align 8
  %bf.lshr83 = lshr i64 %bf.load82, 32
  %bf.clear84 = and i64 %bf.lshr83, 1
  %bf.cast85 = trunc i64 %bf.clear84 to i1
  br i1 %bf.cast85, label %cond.true.86, label %cond.false.87

cond.true.86:                                     ; preds = %cond.end.66
  %98 = load %struct.frame*, %struct.frame** %f, align 8
  %config_scroll_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %98, i32 0, i32 71
  %99 = load i32, i32* %config_scroll_bar_height, align 4
  br label %cond.end.88

cond.false.87:                                    ; preds = %cond.end.66
  br label %cond.end.88

cond.end.88:                                      ; preds = %cond.false.87, %cond.true.86
  %cond89 = phi i32 [ %99, %cond.true.86 ], [ 0, %cond.false.87 ]
  %add90 = add nsw i32 %add80, %cond89
  %100 = load %struct.frame*, %struct.frame** %f, align 8
  %internal_border_width91 = getelementptr inbounds %struct.frame, %struct.frame* %100, i32 0, i32 51
  %101 = load i32, i32* %internal_border_width91, align 4
  %mul92 = mul nsw i32 2, %101
  %add93 = add nsw i32 %add90, %mul92
  %102 = load %struct.frame*, %struct.frame** %f, align 8
  %pixel_height = getelementptr inbounds %struct.frame, %struct.frame* %102, i32 0, i32 47
  store i32 %add93, i32* %pixel_height, align 4
  %103 = load %struct.window*, %struct.window** %rw, align 8
  %total_cols94 = getelementptr inbounds %struct.window, %struct.window* %103, i32 0, i32 36
  store i32 10, i32* %total_cols94, align 4
  %104 = load %struct.window*, %struct.window** %rw, align 8
  %total_cols95 = getelementptr inbounds %struct.window, %struct.window* %104, i32 0, i32 36
  %105 = load i32, i32* %total_cols95, align 4
  %106 = load %struct.frame*, %struct.frame** %f, align 8
  %column_width96 = getelementptr inbounds %struct.frame, %struct.frame* %106, i32 0, i32 59
  %107 = load i32, i32* %column_width96, align 4
  %mul97 = mul nsw i32 %105, %107
  %108 = load %struct.window*, %struct.window** %rw, align 8
  %pixel_width98 = getelementptr inbounds %struct.window, %struct.window* %108, i32 0, i32 34
  store i32 %mul97, i32* %pixel_width98, align 4
  %109 = load i8, i8* %mini_p.addr, align 1
  %tobool99 = trunc i8 %109 to i1
  %cond100 = select i1 %tobool99, i32 9, i32 10
  %110 = load %struct.window*, %struct.window** %rw, align 8
  %total_lines101 = getelementptr inbounds %struct.window, %struct.window* %110, i32 0, i32 37
  store i32 %cond100, i32* %total_lines101, align 4
  %111 = load %struct.window*, %struct.window** %rw, align 8
  %total_lines102 = getelementptr inbounds %struct.window, %struct.window* %111, i32 0, i32 37
  %112 = load i32, i32* %total_lines102, align 4
  %113 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height103 = getelementptr inbounds %struct.frame, %struct.frame* %113, i32 0, i32 60
  %114 = load i32, i32* %line_height103, align 4
  %mul104 = mul nsw i32 %112, %114
  %115 = load %struct.window*, %struct.window** %rw, align 8
  %pixel_height105 = getelementptr inbounds %struct.window, %struct.window* %115, i32 0, i32 35
  store i32 %mul104, i32* %pixel_height105, align 4
  %116 = load i8, i8* %mini_p.addr, align 1
  %tobool106 = trunc i8 %116 to i1
  br i1 %tobool106, label %if.then.107, label %if.end.117

if.then.107:                                      ; preds = %cond.end.88
  %117 = load %struct.window*, %struct.window** %rw, align 8
  %total_lines108 = getelementptr inbounds %struct.window, %struct.window* %117, i32 0, i32 37
  %118 = load i32, i32* %total_lines108, align 4
  %119 = load %struct.window*, %struct.window** %mw, align 8
  %top_line = getelementptr inbounds %struct.window, %struct.window* %119, i32 0, i32 33
  store i32 %118, i32* %top_line, align 4
  %120 = load %struct.window*, %struct.window** %rw, align 8
  %pixel_height109 = getelementptr inbounds %struct.window, %struct.window* %120, i32 0, i32 35
  %121 = load i32, i32* %pixel_height109, align 4
  %122 = load %struct.window*, %struct.window** %mw, align 8
  %pixel_top = getelementptr inbounds %struct.window, %struct.window* %122, i32 0, i32 31
  store i32 %121, i32* %pixel_top, align 4
  %123 = load %struct.window*, %struct.window** %rw, align 8
  %total_cols110 = getelementptr inbounds %struct.window, %struct.window* %123, i32 0, i32 36
  %124 = load i32, i32* %total_cols110, align 4
  %125 = load %struct.window*, %struct.window** %mw, align 8
  %total_cols111 = getelementptr inbounds %struct.window, %struct.window* %125, i32 0, i32 36
  store i32 %124, i32* %total_cols111, align 4
  %126 = load %struct.window*, %struct.window** %rw, align 8
  %pixel_width112 = getelementptr inbounds %struct.window, %struct.window* %126, i32 0, i32 34
  %127 = load i32, i32* %pixel_width112, align 4
  %128 = load %struct.window*, %struct.window** %mw, align 8
  %pixel_width113 = getelementptr inbounds %struct.window, %struct.window* %128, i32 0, i32 34
  store i32 %127, i32* %pixel_width113, align 4
  %129 = load %struct.window*, %struct.window** %mw, align 8
  %total_lines114 = getelementptr inbounds %struct.window, %struct.window* %129, i32 0, i32 37
  store i32 1, i32* %total_lines114, align 4
  %130 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height115 = getelementptr inbounds %struct.frame, %struct.frame* %130, i32 0, i32 60
  %131 = load i32, i32* %line_height115, align 4
  %132 = load %struct.window*, %struct.window** %mw, align 8
  %pixel_height116 = getelementptr inbounds %struct.window, %struct.window* %132, i32 0, i32 35
  store i32 %131, i32* %pixel_height116, align 4
  br label %if.end.117

if.end.117:                                       ; preds = %if.then.107, %cond.end.88
  %call118 = call i64 @Fcurrent_buffer()
  store i64 %call118, i64* %buf, align 8
  %133 = load i64, i64* %buf, align 8
  %call119 = call %struct.buffer* @XBUFFER(i64 %133)
  %name_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call119, i32 0, i32 1
  %134 = load i64, i64* %name_, align 8
  %call120 = call zeroext i8 @SREF(i64 %134, i64 0)
  %conv = zext i8 %call120 to i32
  %cmp121 = icmp eq i32 %conv, 32
  br i1 %cmp121, label %if.then.123, label %if.end.125

if.then.123:                                      ; preds = %if.end.117
  %135 = load i64, i64* %buf, align 8
  %call124 = call i64 @other_buffer_safely(i64 %135)
  store i64 %call124, i64* %buf, align 8
  br label %if.end.125

if.end.125:                                       ; preds = %if.then.123, %if.end.117
  %136 = load i64, i64* %root_window, align 8
  %137 = load i64, i64* %buf, align 8
  call void @set_window_buffer(i64 %136, i64 %137, i1 zeroext false, i1 zeroext false)
  %138 = load %struct.frame*, %struct.frame** %f, align 8
  %139 = load i64, i64* %buf, align 8
  %call126 = call i64 @list1(i64 %139)
  call void @fset_buffer_list(%struct.frame* %138, i64 %call126)
  %140 = load i8, i8* %mini_p.addr, align 1
  %tobool127 = trunc i8 %140 to i1
  br i1 %tobool127, label %if.then.128, label %if.end.139

if.then.128:                                      ; preds = %if.end.125
  %141 = load i64, i64* %mini_window, align 8
  %142 = load i64, i64* @Vminibuffer_list, align 8
  %call129 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp130 = icmp eq i64 %142, %call129
  br i1 %cmp130, label %cond.true.132, label %cond.false.134

cond.true.132:                                    ; preds = %if.then.128
  %call133 = call i64 @get_minibuffer(i64 0)
  br label %cond.end.136

cond.false.134:                                   ; preds = %if.then.128
  %143 = load i64, i64* @Vminibuffer_list, align 8
  %call135 = call i64 @Fcar(i64 %143)
  br label %cond.end.136

cond.end.136:                                     ; preds = %cond.false.134, %cond.true.132
  %cond137 = phi i64 [ %call133, %cond.true.132 ], [ %call135, %cond.false.134 ]
  call void @set_window_buffer(i64 %141, i64 %cond137, i1 zeroext false, i1 zeroext false)
  %144 = load %struct.window*, %struct.window** %mw, align 8
  %call138 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_horizontal_scroll_bar(%struct.window* %144, i64 %call138)
  br label %if.end.139

if.end.139:                                       ; preds = %cond.end.136, %if.end.125
  %145 = load %struct.frame*, %struct.frame** %f, align 8
  %146 = load i64, i64* %root_window, align 8
  call void @fset_root_window(%struct.frame* %145, i64 %146)
  %147 = load %struct.frame*, %struct.frame** %f, align 8
  %148 = load i64, i64* %root_window, align 8
  call void @fset_selected_window(%struct.frame* %147, i64 %148)
  %149 = load i64, i64* @window_select_count, align 8
  %inc = add nsw i64 %149, 1
  store i64 %inc, i64* @window_select_count, align 8
  %150 = load %struct.frame*, %struct.frame** %f, align 8
  %selected_window = getelementptr inbounds %struct.frame, %struct.frame* %150, i32 0, i32 6
  %151 = load i64, i64* %selected_window, align 8
  %call140 = call %struct.window* @XWINDOW(i64 %151)
  %use_time = getelementptr inbounds %struct.window, %struct.window* %call140, i32 0, i32 28
  store i64 %inc, i64* %use_time, align 8
  %152 = load %struct.frame*, %struct.frame** %f, align 8
  ret %struct.frame* %152
}

; Function Attrs: nounwind uwtable
define internal %struct.frame* @allocate_frame() #0 {
entry:
  %call = call %struct.Lisp_Vector* @allocate_pseudovector(i32 60, i32 19, i32 60, i32 3)
  %0 = bitcast %struct.Lisp_Vector* %call to %struct.frame*
  ret %struct.frame* %0
}

declare void @fset_tool_bar_position(%struct.frame*, i64) #1

declare i64 @make_window() #1

declare void @wset_next(%struct.window*, i64) #1

declare void @wset_prev(%struct.window*, i64) #1

declare void @wset_frame(%struct.window*, i64) #1

; Function Attrs: nounwind uwtable
define internal void @fset_minibuffer_window(%struct.frame* %f, i64 %val) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %val.addr = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 7
  store i64 %0, i64* %minibuffer_window, align 8
  ret void
}

declare i64 @Fcurrent_buffer() #1

declare zeroext i8 @SREF(i64, i64) #1

declare %struct.buffer* @XBUFFER(i64) #1

declare i64 @other_buffer_safely(i64) #1

declare void @set_window_buffer(i64, i64, i1 zeroext, i1 zeroext) #1

declare void @fset_buffer_list(%struct.frame*, i64) #1

declare i64 @list1(i64) #1

declare i64 @get_minibuffer(i64) #1

declare i64 @Fcar(i64) #1

declare void @wset_horizontal_scroll_bar(%struct.window*, i64) #1

declare void @fset_root_window(%struct.frame*, i64) #1

declare void @fset_selected_window(%struct.frame*, i64) #1

; Function Attrs: nounwind uwtable
define %struct.frame* @make_frame_without_minibuffer(i64 %mini_window, %struct.kboard* %kb, i64 %display) #0 {
entry:
  %mini_window.addr = alloca i64, align 8
  %kb.addr = alloca %struct.kboard*, align 8
  %display.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %frame_dummy = alloca i64, align 8
  store i64 %mini_window, i64* %mini_window.addr, align 8
  store %struct.kboard* %kb, %struct.kboard** %kb.addr, align 8
  store i64 %display, i64* %display.addr, align 8
  %0 = load i64, i64* %mini_window.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %mini_window.addr, align 8
  %call1 = call zeroext i1 @WINDOWP(i64 %1)
  br i1 %call1, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.then
  %2 = load i64, i64* %mini_window.addr, align 8
  %call2 = call %struct.window* @XWINDOW(i64 %2)
  %contents = getelementptr inbounds %struct.window, %struct.window* %call2, i32 0, i32 10
  %3 = load i64, i64* %contents, align 8
  %call3 = call zeroext i1 @BUFFERP(i64 %3)
  br i1 %call3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.then
  %call4 = call i64 @builtin_lisp_symbol(i32 1027)
  %4 = load i64, i64* %mini_window.addr, align 8
  %5 = call i64 @wrong_type_argument(i64 %call4, i64 %4) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %6, %cond.true
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %7 = load i64, i64* %mini_window.addr, align 8
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp6 = icmp eq i64 %7, %call5
  br i1 %cmp6, label %if.end.11, label %land.lhs.true.7

land.lhs.true.7:                                  ; preds = %if.end
  %8 = load i64, i64* %mini_window.addr, align 8
  %call8 = call %struct.window* @XWINDOW(i64 %8)
  %frame = getelementptr inbounds %struct.window, %struct.window* %call8, i32 0, i32 1
  %9 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %9, 5
  %10 = inttoptr i64 %sub to i8*
  %11 = bitcast i8* %10 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 61
  %12 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %kboard = getelementptr inbounds %struct.terminal, %struct.terminal* %12, i32 0, i32 10
  %13 = load %struct.kboard*, %struct.kboard** %kboard, align 8
  %14 = load %struct.kboard*, %struct.kboard** %kb.addr, align 8
  %cmp9 = icmp ne %struct.kboard* %13, %14
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %land.lhs.true.7
  call void (i8*, ...) @error(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.2, i32 0, i32 0)) #7
  unreachable

if.end.11:                                        ; preds = %land.lhs.true.7, %if.end
  %call12 = call %struct.frame* @make_frame(i1 zeroext false)
  store %struct.frame* %call12, %struct.frame** %f, align 8
  %15 = load i64, i64* %mini_window.addr, align 8
  %call13 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp14 = icmp eq i64 %15, %call13
  br i1 %cmp14, label %if.then.15, label %if.end.28

if.then.15:                                       ; preds = %if.end.11
  %16 = load %struct.kboard*, %struct.kboard** %kb.addr, align 8
  %Vdefault_minibuffer_frame_ = getelementptr inbounds %struct.kboard, %struct.kboard* %16, i32 0, i32 20
  %17 = load i64, i64* %Vdefault_minibuffer_frame_, align 8
  %call16 = call zeroext i1 @FRAMEP(i64 %17)
  br i1 %call16, label %lor.lhs.false, label %if.then.21

lor.lhs.false:                                    ; preds = %if.then.15
  %18 = load %struct.kboard*, %struct.kboard** %kb.addr, align 8
  %Vdefault_minibuffer_frame_17 = getelementptr inbounds %struct.kboard, %struct.kboard* %18, i32 0, i32 20
  %19 = load i64, i64* %Vdefault_minibuffer_frame_17, align 8
  %sub18 = sub nsw i64 %19, 5
  %20 = inttoptr i64 %sub18 to i8*
  %21 = bitcast i8* %20 to %struct.frame*
  %terminal19 = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 61
  %22 = load %struct.terminal*, %struct.terminal** %terminal19, align 8
  %cmp20 = icmp ne %struct.terminal* %22, null
  br i1 %cmp20, label %if.end.25, label %if.then.21

if.then.21:                                       ; preds = %lor.lhs.false, %if.then.15
  %23 = load %struct.frame*, %struct.frame** %f, align 8
  %24 = bitcast %struct.frame* %23 to i8*
  %call22 = call i64 @make_lisp_ptr(i8* %24, i32 5)
  store i64 %call22, i64* %frame_dummy, align 8
  %25 = load %struct.kboard*, %struct.kboard** %kb.addr, align 8
  %call23 = call i64 @intern(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i32 0, i32 0))
  %26 = load i64, i64* %display.addr, align 8
  %call24 = call i64 @call1(i64 %call23, i64 %26)
  call void @kset_default_minibuffer_frame(%struct.kboard* %25, i64 %call24)
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.21, %lor.lhs.false
  %27 = load %struct.kboard*, %struct.kboard** %kb.addr, align 8
  %Vdefault_minibuffer_frame_26 = getelementptr inbounds %struct.kboard, %struct.kboard* %27, i32 0, i32 20
  %28 = load i64, i64* %Vdefault_minibuffer_frame_26, align 8
  %sub27 = sub nsw i64 %28, 5
  %29 = inttoptr i64 %sub27 to i8*
  %30 = bitcast i8* %29 to %struct.frame*
  %minibuffer_window = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 7
  %31 = load i64, i64* %minibuffer_window, align 8
  store i64 %31, i64* %mini_window.addr, align 8
  br label %if.end.28

if.end.28:                                        ; preds = %if.end.25, %if.end.11
  %32 = load %struct.frame*, %struct.frame** %f, align 8
  %33 = load i64, i64* %mini_window.addr, align 8
  call void @fset_minibuffer_window(%struct.frame* %32, i64 %33)
  %34 = load i64, i64* %mini_window.addr, align 8
  %call29 = call %struct.window* @XWINDOW(i64 %34)
  %contents30 = getelementptr inbounds %struct.window, %struct.window* %call29, i32 0, i32 10
  %35 = load i64, i64* %contents30, align 8
  %36 = load i64, i64* @Vminibuffer_list, align 8
  %call31 = call i64 @Fmemq(i64 %35, i64 %36)
  %call32 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp33 = icmp eq i64 %call31, %call32
  br i1 %cmp33, label %if.then.34, label %if.end.42

if.then.34:                                       ; preds = %if.end.28
  %37 = load i64, i64* %mini_window.addr, align 8
  %38 = load i64, i64* @Vminibuffer_list, align 8
  %call35 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp36 = icmp eq i64 %38, %call35
  br i1 %cmp36, label %cond.true.37, label %cond.false.39

cond.true.37:                                     ; preds = %if.then.34
  %call38 = call i64 @get_minibuffer(i64 0)
  br label %cond.end.41

cond.false.39:                                    ; preds = %if.then.34
  %39 = load i64, i64* @Vminibuffer_list, align 8
  %call40 = call i64 @Fcar(i64 %39)
  br label %cond.end.41

cond.end.41:                                      ; preds = %cond.false.39, %cond.true.37
  %cond = phi i64 [ %call38, %cond.true.37 ], [ %call40, %cond.false.39 ]
  call void @set_window_buffer(i64 %37, i64 %cond, i1 zeroext false, i1 zeroext false)
  br label %if.end.42

if.end.42:                                        ; preds = %cond.end.41, %if.end.28
  %40 = load %struct.frame*, %struct.frame** %f, align 8
  ret %struct.frame* %40
}

declare zeroext i1 @BUFFERP(i64) #1

declare void @kset_default_minibuffer_frame(%struct.kboard*, i64) #1

declare i64 @call1(i64, i64) #1

declare i64 @intern(i8*) #1

; Function Attrs: nounwind uwtable
define %struct.frame* @make_minibuffer_frame() #0 {
entry:
  %f = alloca %struct.frame*, align 8
  %mini_window = alloca i64, align 8
  %frame = alloca i64, align 8
  %call = call %struct.frame* @make_frame(i1 zeroext false)
  store %struct.frame* %call, %struct.frame** %f, align 8
  %0 = load %struct.frame*, %struct.frame** %f, align 8
  %1 = bitcast %struct.frame* %0 to i8*
  %call1 = call i64 @make_lisp_ptr(i8* %1, i32 5)
  store i64 %call1, i64* %frame, align 8
  %2 = load %struct.frame*, %struct.frame** %f, align 8
  %auto_raise = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 26
  %3 = bitcast i48* %auto_raise to i64*
  %bf.load = load i64, i64* %3, align 8
  %bf.clear = and i64 %bf.load, -32769
  store i64 %bf.clear, i64* %3, align 8
  %4 = load %struct.frame*, %struct.frame** %f, align 8
  %auto_lower = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 26
  %5 = bitcast i48* %auto_lower to i64*
  %bf.load2 = load i64, i64* %5, align 8
  %bf.clear3 = and i64 %bf.load2, -65537
  store i64 %bf.clear3, i64* %5, align 8
  %6 = load %struct.frame*, %struct.frame** %f, align 8
  %no_split = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 26
  %7 = bitcast i48* %no_split to i64*
  %bf.load4 = load i64, i64* %7, align 8
  %bf.clear5 = and i64 %bf.load4, -131073
  %bf.set = or i64 %bf.clear5, 131072
  store i64 %bf.set, i64* %7, align 8
  %8 = load %struct.frame*, %struct.frame** %f, align 8
  %wants_modeline = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 26
  %9 = bitcast i48* %wants_modeline to i64*
  %bf.load6 = load i64, i64* %9, align 8
  %bf.clear7 = and i64 %bf.load6, -16385
  store i64 %bf.clear7, i64* %9, align 8
  %10 = load %struct.frame*, %struct.frame** %f, align 8
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 5
  %11 = load i64, i64* %root_window, align 8
  store i64 %11, i64* %mini_window, align 8
  %12 = load %struct.frame*, %struct.frame** %f, align 8
  %13 = load i64, i64* %mini_window, align 8
  call void @fset_minibuffer_window(%struct.frame* %12, i64 %13)
  %14 = load i64, i64* %mini_window, align 8
  %call8 = call %struct.window* @XWINDOW(i64 %14)
  %mini = getelementptr inbounds %struct.window, %struct.window* %call8, i32 0, i32 67
  %bf.load9 = load i16, i16* %mini, align 4
  %bf.clear10 = and i16 %bf.load9, -2
  %bf.set11 = or i16 %bf.clear10, 1
  store i16 %bf.set11, i16* %mini, align 4
  %15 = load i64, i64* %mini_window, align 8
  %call12 = call %struct.window* @XWINDOW(i64 %15)
  %call13 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_next(%struct.window* %call12, i64 %call13)
  %16 = load i64, i64* %mini_window, align 8
  %call14 = call %struct.window* @XWINDOW(i64 %16)
  %call15 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_prev(%struct.window* %call14, i64 %call15)
  %17 = load i64, i64* %mini_window, align 8
  %call16 = call %struct.window* @XWINDOW(i64 %17)
  %18 = load i64, i64* %frame, align 8
  call void @wset_frame(%struct.window* %call16, i64 %18)
  %19 = load i64, i64* %mini_window, align 8
  %20 = load i64, i64* @Vminibuffer_list, align 8
  %call17 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %20, %call17
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %call18 = call i64 @get_minibuffer(i64 0)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %21 = load i64, i64* @Vminibuffer_list, align 8
  %call19 = call i64 @Fcar(i64 %21)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call18, %cond.true ], [ %call19, %cond.false ]
  call void @set_window_buffer(i64 %19, i64 %cond, i1 zeroext false, i1 zeroext false)
  %22 = load %struct.frame*, %struct.frame** %f, align 8
  ret %struct.frame* %22
}

; Function Attrs: nounwind uwtable
define %struct.frame* @make_initial_frame() #0 {
entry:
  %f = alloca %struct.frame*, align 8
  %terminal = alloca %struct.terminal*, align 8
  %frame = alloca i64, align 8
  %0 = load i64, i64* @Vframe_list, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i64, i64* @Vframe_list, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %cmp1 = icmp eq i32 %conv, 3
  br i1 %cmp1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call3, i64* @Vframe_list, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false, %entry
  %call4 = call %struct.terminal* @init_initial_terminal()
  store %struct.terminal* %call4, %struct.terminal** %terminal, align 8
  %call5 = call %struct.frame* @make_frame(i1 zeroext true)
  store %struct.frame* %call5, %struct.frame** %f, align 8
  %2 = load %struct.frame*, %struct.frame** %f, align 8
  %3 = bitcast %struct.frame* %2 to i8*
  %call6 = call i64 @make_lisp_ptr(i8* %3, i32 5)
  store i64 %call6, i64* %frame, align 8
  %4 = load i64, i64* %frame, align 8
  %5 = load i64, i64* @Vframe_list, align 8
  %call7 = call i64 @Fcons(i64 %4, i64 %5)
  store i64 %call7, i64* @Vframe_list, align 8
  store i64 1, i64* @tty_frame_count, align 8
  %6 = load %struct.frame*, %struct.frame** %f, align 8
  %call8 = call i64 @build_pure_c_string(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0))
  call void @fset_name(%struct.frame* %6, i64 %call8)
  %7 = load %struct.frame*, %struct.frame** %f, align 8
  call void @SET_FRAME_VISIBLE(%struct.frame* %7, i32 1)
  %8 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %type = getelementptr inbounds %struct.terminal, %struct.terminal* %8, i32 0, i32 8
  %9 = load i32, i32* %type, align 4
  %10 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 26
  %11 = bitcast i48* %output_method to i64*
  %12 = zext i32 %9 to i64
  %bf.load = load i64, i64* %11, align 8
  %bf.value = and i64 %12, 7
  %bf.shl = shl i64 %bf.value, 23
  %bf.clear = and i64 %bf.load, -58720257
  %bf.set = or i64 %bf.clear, %bf.shl
  store i64 %bf.set, i64* %11, align 8
  %bf.result.cast = trunc i64 %bf.value to i32
  %13 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %14 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal9 = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 61
  store %struct.terminal* %13, %struct.terminal** %terminal9, align 8
  %15 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal10 = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 61
  %16 = load %struct.terminal*, %struct.terminal** %terminal10, align 8
  %reference_count = getelementptr inbounds %struct.terminal, %struct.terminal* %16, i32 0, i32 7
  %17 = load i32, i32* %reference_count, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %reference_count, align 4
  %18 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 62
  %nothing = bitcast %union.output_data* %output_data to i64*
  store i64 0, i64* %nothing, align 8
  %19 = load %struct.frame*, %struct.frame** %f, align 8
  %foreground_pixel = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 78
  store i64 -2, i64* %foreground_pixel, align 8
  %20 = load %struct.frame*, %struct.frame** %f, align 8
  %background_pixel = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 77
  store i64 -3, i64* %background_pixel, align 8
  %21 = load %struct.frame*, %struct.frame** %f, align 8
  %vertical_scroll_bar_type = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 26
  %22 = bitcast i48* %vertical_scroll_bar_type to i64*
  %bf.load11 = load i64, i64* %22, align 8
  %bf.clear12 = and i64 %bf.load11, -3221225473
  store i64 %bf.clear12, i64* %22, align 8
  %23 = load %struct.frame*, %struct.frame** %f, align 8
  %horizontal_scroll_bars = getelementptr inbounds %struct.frame, %struct.frame* %23, i32 0, i32 26
  %24 = bitcast i48* %horizontal_scroll_bars to i64*
  %bf.load13 = load i64, i64* %24, align 8
  %bf.clear14 = and i64 %bf.load13, -4294967297
  store i64 %bf.clear14, i64* %24, align 8
  %25 = load %struct.frame*, %struct.frame** %f, align 8
  %call15 = call i64 @builtin_lisp_symbol(i32 0)
  call void @set_menu_bar_lines(%struct.frame* %25, i64 6, i64 %call15)
  %26 = load %struct.frame*, %struct.frame** %f, align 8
  call void @adjust_frame_glyphs(%struct.frame* %26)
  %27 = load i8, i8* @noninteractive, align 1
  %tobool = trunc i8 %27 to i1
  br i1 %tobool, label %if.end.17, label %if.then.16

if.then.16:                                       ; preds = %if.end
  %28 = load %struct.frame*, %struct.frame** %f, align 8
  call void @init_frame_faces(%struct.frame* %28)
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.16, %if.end
  %29 = load %struct.frame*, %struct.frame** %f, align 8
  store %struct.frame* %29, %struct.frame** @last_nonminibuf_frame, align 8
  %30 = load %struct.frame*, %struct.frame** %f, align 8
  %can_x_set_window_size = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 26
  %31 = bitcast i48* %can_x_set_window_size to i64*
  %bf.load18 = load i64, i64* %31, align 8
  %bf.clear19 = and i64 %bf.load18, -17179869185
  %bf.set20 = or i64 %bf.clear19, 17179869184
  store i64 %bf.set20, i64* %31, align 8
  %32 = load %struct.frame*, %struct.frame** %f, align 8
  %after_make_frame = getelementptr inbounds %struct.frame, %struct.frame* %32, i32 0, i32 26
  %33 = bitcast i48* %after_make_frame to i64*
  %bf.load21 = load i64, i64* %33, align 8
  %bf.clear22 = and i64 %bf.load21, -34359738369
  %bf.set23 = or i64 %bf.clear22, 34359738368
  store i64 %bf.set23, i64* %33, align 8
  %34 = load %struct.frame*, %struct.frame** %f, align 8
  ret %struct.frame* %34
}

declare %struct.terminal* @init_initial_terminal() #1

declare void @fset_name(%struct.frame*, i64) #1

declare i64 @build_pure_c_string(i8*) #1

declare void @SET_FRAME_VISIBLE(%struct.frame*, i32) #1

; Function Attrs: nounwind uwtable
define internal void @set_menu_bar_lines(%struct.frame* %f, i64 %value, i64 %oldval) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %value.addr = alloca i64, align 8
  %oldval.addr = alloca i64, align 8
  %nlines = alloca i32, align 4
  %olines = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %value, i64* %value.addr, align 8
  store i64 %oldval, i64* %oldval.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 57
  %1 = load i32, i32* %menu_bar_lines, align 4
  store i32 %1, i32* %olines, align 4
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 5
  %3 = load i64, i64* %root_window, align 8
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 7
  %5 = load i64, i64* %minibuffer_window, align 8
  %cmp = icmp eq i64 %3, %5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end.21

if.end:                                           ; preds = %entry
  %6 = load i64, i64* %value.addr, align 8
  %and = and i64 %6, 7
  %conv = trunc i64 %and to i32
  %and1 = and i32 %conv, -5
  %cmp2 = icmp eq i32 %and1, 2
  br i1 %cmp2, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end
  br i1 false, label %cond.false, label %cond.true

cond.true:                                        ; preds = %land.lhs.true
  %7 = load i64, i64* %value.addr, align 8
  %shr = ashr i64 %7, 2
  %cmp4 = icmp sle i64 -2147483648, %shr
  br i1 %cmp4, label %land.lhs.true.9, label %if.else

cond.false:                                       ; preds = %land.lhs.true
  %8 = load i64, i64* %value.addr, align 8
  %shr6 = ashr i64 %8, 2
  %cmp7 = icmp sle i64 0, %shr6
  br i1 %cmp7, label %land.lhs.true.9, label %if.else

land.lhs.true.9:                                  ; preds = %cond.false, %cond.true
  %9 = load i64, i64* %value.addr, align 8
  %shr10 = ashr i64 %9, 2
  %cmp11 = icmp sle i64 %shr10, 2147483647
  br i1 %cmp11, label %if.then.13, label %if.else

if.then.13:                                       ; preds = %land.lhs.true.9
  %10 = load i64, i64* %value.addr, align 8
  %shr14 = ashr i64 %10, 2
  %conv15 = trunc i64 %shr14 to i32
  store i32 %conv15, i32* %nlines, align 4
  br label %if.end.16

if.else:                                          ; preds = %land.lhs.true.9, %cond.false, %cond.true, %if.end
  store i32 0, i32* %nlines, align 4
  br label %if.end.16

if.end.16:                                        ; preds = %if.else, %if.then.13
  %11 = load i32, i32* %nlines, align 4
  %12 = load i32, i32* %olines, align 4
  %cmp17 = icmp ne i32 %11, %12
  br i1 %cmp17, label %if.then.19, label %if.end.21

if.then.19:                                       ; preds = %if.end.16
  store i32 14, i32* @windows_or_buffers_changed, align 4
  %13 = load i32, i32* %nlines, align 4
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_lines20 = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 57
  store i32 %13, i32* %menu_bar_lines20, align 4
  %15 = load i32, i32* %nlines, align 4
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 60
  %17 = load i32, i32* %line_height, align 4
  %mul = mul nsw i32 %15, %17
  %18 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 58
  store i32 %mul, i32* %menu_bar_height, align 4
  %19 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %20 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_cols = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 36
  %21 = load i32, i32* %text_cols, align 4
  %22 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_lines = getelementptr inbounds %struct.frame, %struct.frame* %22, i32 0, i32 37
  %23 = load i32, i32* %text_lines, align 4
  %24 = load i32, i32* %olines, align 4
  %add = add nsw i32 %23, %24
  %25 = load i32, i32* %nlines, align 4
  %sub = sub nsw i32 %add, %25
  call void @change_frame_size(%struct.frame* %19, i32 %21, i32 %sub, i1 zeroext false, i1 zeroext true, i1 zeroext false, i1 zeroext false)
  br label %if.end.21

if.end.21:                                        ; preds = %if.then, %if.then.19, %if.end.16
  ret void
}

declare void @init_frame_faces(%struct.frame*) #1

; Function Attrs: nounwind uwtable
define i64 @Fmake_terminal_frame(i64 %parms) #0 {
entry:
  %parms.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %t = alloca %struct.terminal*, align 8
  %frame = alloca i64, align 8
  %tem = alloca i64, align 8
  %sf = alloca %struct.frame*, align 8
  %terminal2 = alloca i64, align 8
  %name = alloca i8*, align 8
  %type = alloca i8*, align 8
  %tty = alloca i64, align 8
  %tty_type = alloca i64, align 8
  %sa_avail = alloca i64, align 8
  %sa_count = alloca i64, align 8
  %sa_must_free = alloca i8, align 1
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  store i64 %parms, i64* %parms.addr, align 8
  store %struct.terminal* null, %struct.terminal** %t, align 8
  %0 = load i64, i64* @selected_frame, align 8
  %call = call zeroext i1 @FRAMEP(i64 %0)
  br i1 %call, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 61
  %4 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp = icmp ne %struct.terminal* %4, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %5 = load i64, i64* @selected_frame, align 8
  %sub1 = sub nsw i64 %5, 5
  %6 = inttoptr i64 %sub1 to i8*
  %7 = bitcast i8* %6 to %struct.frame*
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  call void @emacs_abort() #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %8, %cond.true
  %cond = phi %struct.frame* [ %7, %cond.true ], [ null, %8 ]
  store %struct.frame* %cond, %struct.frame** %sf, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 906)
  %9 = load i64, i64* %parms.addr, align 8
  %call4 = call i64 @Fassq(i64 %call3, i64 %9)
  store i64 %call4, i64* %terminal2, align 8
  %10 = load i64, i64* %terminal2, align 8
  %and = and i64 %10, 7
  %conv = trunc i64 %and to i32
  %cmp5 = icmp eq i32 %conv, 3
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %11 = load i64, i64* %terminal2, align 8
  %sub7 = sub nsw i64 %11, 3
  %12 = inttoptr i64 %sub7 to i8*
  %13 = bitcast i8* %12 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %13, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %14 = load i64, i64* %cdr, align 8
  store i64 %14, i64* %terminal2, align 8
  %15 = load i64, i64* %terminal2, align 8
  %call8 = call %struct.terminal* @decode_live_terminal(i64 %15)
  store %struct.terminal* %call8, %struct.terminal** %t, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  %16 = load %struct.terminal*, %struct.terminal** %t, align 8
  %tobool = icmp ne %struct.terminal* %16, null
  br i1 %tobool, label %if.end.141, label %if.then.9

if.then.9:                                        ; preds = %if.end
  store i8* null, i8** %name, align 8
  store i8* null, i8** %type, align 8
  store i64 16384, i64* %sa_avail, align 8
  %call10 = call i64 @SPECPDL_INDEX()
  store i64 %call10, i64* %sa_count, align 8
  store i8 0, i8* %sa_must_free, align 1
  %call11 = call i64 @builtin_lisp_symbol(i32 938)
  %17 = load i64, i64* %parms.addr, align 8
  %18 = load i64, i64* @selected_frame, align 8
  %sub12 = sub nsw i64 %18, 5
  %19 = inttoptr i64 %sub12 to i8*
  %20 = bitcast i8* %19 to %struct.frame*
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 26
  %21 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %21, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp13 = icmp eq i32 %bf.cast, 1
  br i1 %cmp13, label %cond.true.15, label %cond.false.40

cond.true.15:                                     ; preds = %if.then.9
  %22 = load i64, i64* @selected_frame, align 8
  %sub16 = sub nsw i64 %22, 5
  %23 = inttoptr i64 %sub16 to i8*
  %24 = bitcast i8* %23 to %struct.frame*
  %output_method17 = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 26
  %25 = bitcast i48* %output_method17 to i64*
  %bf.load18 = load i64, i64* %25, align 8
  %bf.lshr19 = lshr i64 %bf.load18, 23
  %bf.clear20 = and i64 %bf.lshr19, 7
  %bf.cast21 = trunc i64 %bf.clear20 to i32
  %cmp22 = icmp eq i32 %bf.cast21, 1
  br i1 %cmp22, label %cond.true.32, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.true.15
  %26 = load i64, i64* @selected_frame, align 8
  %sub24 = sub nsw i64 %26, 5
  %27 = inttoptr i64 %sub24 to i8*
  %28 = bitcast i8* %27 to %struct.frame*
  %output_method25 = getelementptr inbounds %struct.frame, %struct.frame* %28, i32 0, i32 26
  %29 = bitcast i48* %output_method25 to i64*
  %bf.load26 = load i64, i64* %29, align 8
  %bf.lshr27 = lshr i64 %bf.load26, 23
  %bf.clear28 = and i64 %bf.lshr27, 7
  %bf.cast29 = trunc i64 %bf.clear28 to i32
  %cmp30 = icmp eq i32 %bf.cast29, 3
  br i1 %cmp30, label %cond.true.32, label %cond.false.36

cond.true.32:                                     ; preds = %lor.lhs.false, %cond.true.15
  %30 = load i64, i64* @selected_frame, align 8
  %sub33 = sub nsw i64 %30, 5
  %31 = inttoptr i64 %sub33 to i8*
  %32 = bitcast i8* %31 to %struct.frame*
  %terminal34 = getelementptr inbounds %struct.frame, %struct.frame* %32, i32 0, i32 61
  %33 = load %struct.terminal*, %struct.terminal** %terminal34, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %33, i32 0, i32 12
  %tty35 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %34 = load %struct.tty_display_info*, %struct.tty_display_info** %tty35, align 8
  br label %cond.end.37

cond.false.36:                                    ; preds = %lor.lhs.false
  call void @emacs_abort() #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.37

cond.end.37:                                      ; preds = %35, %cond.true.32
  %cond38 = phi %struct.tty_display_info* [ %34, %cond.true.32 ], [ null, %35 ]
  %name39 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond38, i32 0, i32 1
  %36 = load i8*, i8** %name39, align 8
  br label %cond.end.41

cond.false.40:                                    ; preds = %if.then.9
  br label %cond.end.41

cond.end.41:                                      ; preds = %cond.false.40, %cond.end.37
  %cond42 = phi i8* [ %36, %cond.end.37 ], [ null, %cond.false.40 ]
  %call43 = call i64 @get_future_frame_param(i64 %call11, i64 %17, i8* %cond42)
  store i64 %call43, i64* %tty, align 8
  %37 = load i64, i64* %tty, align 8
  %call44 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp45 = icmp eq i64 %37, %call44
  br i1 %cmp45, label %if.end.66, label %if.then.47

if.then.47:                                       ; preds = %cond.end.41
  br label %do.body

do.body:                                          ; preds = %if.then.47
  %38 = load i64, i64* %tty, align 8
  %call48 = call i64 @SBYTES(i64 %38)
  %add = add nsw i64 %call48, 1
  %39 = load i64, i64* %sa_avail, align 8
  %cmp49 = icmp sle i64 %add, %39
  br i1 %cmp49, label %cond.true.51, label %cond.false.57

cond.true.51:                                     ; preds = %do.body
  %40 = load i64, i64* %tty, align 8
  %call52 = call i64 @SBYTES(i64 %40)
  %add53 = add nsw i64 %call52, 1
  %41 = load i64, i64* %sa_avail, align 8
  %sub54 = sub nsw i64 %41, %add53
  store i64 %sub54, i64* %sa_avail, align 8
  %42 = load i64, i64* %tty, align 8
  %call55 = call i64 @SBYTES(i64 %42)
  %add56 = add nsw i64 %call55, 1
  %43 = alloca i8, i64 %add56
  br label %cond.end.61

cond.false.57:                                    ; preds = %do.body
  store i8 1, i8* %sa_must_free, align 1
  %44 = load i64, i64* %tty, align 8
  %call58 = call i64 @SBYTES(i64 %44)
  %add59 = add nsw i64 %call58, 1
  %call60 = call i8* @record_xmalloc(i64 %add59)
  br label %cond.end.61

cond.end.61:                                      ; preds = %cond.false.57, %cond.true.51
  %cond62 = phi i8* [ %43, %cond.true.51 ], [ %call60, %cond.false.57 ]
  store i8* %cond62, i8** %name, align 8
  %45 = load i8*, i8** %name, align 8
  %46 = load i64, i64* %tty, align 8
  %call63 = call i8* @SDATA(i64 %46)
  %47 = load i64, i64* %tty, align 8
  %call64 = call i64 @SBYTES(i64 %47)
  %add65 = add nsw i64 %call64, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %45, i8* %call63, i64 %add65, i32 1, i1 false)
  br label %do.end

do.end:                                           ; preds = %cond.end.61
  br label %if.end.66

if.end.66:                                        ; preds = %do.end, %cond.end.41
  %call67 = call i64 @builtin_lisp_symbol(i32 955)
  %48 = load i64, i64* %parms.addr, align 8
  %49 = load i64, i64* @selected_frame, align 8
  %sub68 = sub nsw i64 %49, 5
  %50 = inttoptr i64 %sub68 to i8*
  %51 = bitcast i8* %50 to %struct.frame*
  %output_method69 = getelementptr inbounds %struct.frame, %struct.frame* %51, i32 0, i32 26
  %52 = bitcast i48* %output_method69 to i64*
  %bf.load70 = load i64, i64* %52, align 8
  %bf.lshr71 = lshr i64 %bf.load70, 23
  %bf.clear72 = and i64 %bf.lshr71, 7
  %bf.cast73 = trunc i64 %bf.clear72 to i32
  %cmp74 = icmp eq i32 %bf.cast73, 1
  br i1 %cmp74, label %cond.true.76, label %cond.false.103

cond.true.76:                                     ; preds = %if.end.66
  %53 = load i64, i64* @selected_frame, align 8
  %sub77 = sub nsw i64 %53, 5
  %54 = inttoptr i64 %sub77 to i8*
  %55 = bitcast i8* %54 to %struct.frame*
  %output_method78 = getelementptr inbounds %struct.frame, %struct.frame* %55, i32 0, i32 26
  %56 = bitcast i48* %output_method78 to i64*
  %bf.load79 = load i64, i64* %56, align 8
  %bf.lshr80 = lshr i64 %bf.load79, 23
  %bf.clear81 = and i64 %bf.lshr80, 7
  %bf.cast82 = trunc i64 %bf.clear81 to i32
  %cmp83 = icmp eq i32 %bf.cast82, 1
  br i1 %cmp83, label %cond.true.94, label %lor.lhs.false.85

lor.lhs.false.85:                                 ; preds = %cond.true.76
  %57 = load i64, i64* @selected_frame, align 8
  %sub86 = sub nsw i64 %57, 5
  %58 = inttoptr i64 %sub86 to i8*
  %59 = bitcast i8* %58 to %struct.frame*
  %output_method87 = getelementptr inbounds %struct.frame, %struct.frame* %59, i32 0, i32 26
  %60 = bitcast i48* %output_method87 to i64*
  %bf.load88 = load i64, i64* %60, align 8
  %bf.lshr89 = lshr i64 %bf.load88, 23
  %bf.clear90 = and i64 %bf.lshr89, 7
  %bf.cast91 = trunc i64 %bf.clear90 to i32
  %cmp92 = icmp eq i32 %bf.cast91, 3
  br i1 %cmp92, label %cond.true.94, label %cond.false.99

cond.true.94:                                     ; preds = %lor.lhs.false.85, %cond.true.76
  %61 = load i64, i64* @selected_frame, align 8
  %sub95 = sub nsw i64 %61, 5
  %62 = inttoptr i64 %sub95 to i8*
  %63 = bitcast i8* %62 to %struct.frame*
  %terminal96 = getelementptr inbounds %struct.frame, %struct.frame* %63, i32 0, i32 61
  %64 = load %struct.terminal*, %struct.terminal** %terminal96, align 8
  %display_info97 = getelementptr inbounds %struct.terminal, %struct.terminal* %64, i32 0, i32 12
  %tty98 = bitcast %union.display_info* %display_info97 to %struct.tty_display_info**
  %65 = load %struct.tty_display_info*, %struct.tty_display_info** %tty98, align 8
  br label %cond.end.100

cond.false.99:                                    ; preds = %lor.lhs.false.85
  call void @emacs_abort() #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.100

cond.end.100:                                     ; preds = %66, %cond.true.94
  %cond101 = phi %struct.tty_display_info* [ %65, %cond.true.94 ], [ null, %66 ]
  %type102 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond101, i32 0, i32 2
  %67 = load i8*, i8** %type102, align 8
  br label %cond.end.104

cond.false.103:                                   ; preds = %if.end.66
  br label %cond.end.104

cond.end.104:                                     ; preds = %cond.false.103, %cond.end.100
  %cond105 = phi i8* [ %67, %cond.end.100 ], [ null, %cond.false.103 ]
  %call106 = call i64 @get_future_frame_param(i64 %call67, i64 %48, i8* %cond105)
  store i64 %call106, i64* %tty_type, align 8
  %68 = load i64, i64* %tty_type, align 8
  %call107 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp108 = icmp eq i64 %68, %call107
  br i1 %cmp108, label %if.end.132, label %if.then.110

if.then.110:                                      ; preds = %cond.end.104
  br label %do.body.111

do.body.111:                                      ; preds = %if.then.110
  %69 = load i64, i64* %tty_type, align 8
  %call112 = call i64 @SBYTES(i64 %69)
  %add113 = add nsw i64 %call112, 1
  %70 = load i64, i64* %sa_avail, align 8
  %cmp114 = icmp sle i64 %add113, %70
  br i1 %cmp114, label %cond.true.116, label %cond.false.122

cond.true.116:                                    ; preds = %do.body.111
  %71 = load i64, i64* %tty_type, align 8
  %call117 = call i64 @SBYTES(i64 %71)
  %add118 = add nsw i64 %call117, 1
  %72 = load i64, i64* %sa_avail, align 8
  %sub119 = sub nsw i64 %72, %add118
  store i64 %sub119, i64* %sa_avail, align 8
  %73 = load i64, i64* %tty_type, align 8
  %call120 = call i64 @SBYTES(i64 %73)
  %add121 = add nsw i64 %call120, 1
  %74 = alloca i8, i64 %add121
  br label %cond.end.126

cond.false.122:                                   ; preds = %do.body.111
  store i8 1, i8* %sa_must_free, align 1
  %75 = load i64, i64* %tty_type, align 8
  %call123 = call i64 @SBYTES(i64 %75)
  %add124 = add nsw i64 %call123, 1
  %call125 = call i8* @record_xmalloc(i64 %add124)
  br label %cond.end.126

cond.end.126:                                     ; preds = %cond.false.122, %cond.true.116
  %cond127 = phi i8* [ %74, %cond.true.116 ], [ %call125, %cond.false.122 ]
  store i8* %cond127, i8** %type, align 8
  %76 = load i8*, i8** %type, align 8
  %77 = load i64, i64* %tty_type, align 8
  %call128 = call i8* @SDATA(i64 %77)
  %78 = load i64, i64* %tty_type, align 8
  %call129 = call i64 @SBYTES(i64 %78)
  %add130 = add nsw i64 %call129, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %76, i8* %call128, i64 %add130, i32 1, i1 false)
  br label %do.end.131

do.end.131:                                       ; preds = %cond.end.126
  br label %if.end.132

if.end.132:                                       ; preds = %do.end.131, %cond.end.104
  %79 = load i8*, i8** %name, align 8
  %80 = load i8*, i8** %type, align 8
  %call133 = call %struct.terminal* @init_tty(i8* %79, i8* %80, i1 zeroext false)
  store %struct.terminal* %call133, %struct.terminal** %t, align 8
  br label %do.body.134

do.body.134:                                      ; preds = %if.end.132
  %81 = load i8, i8* %sa_must_free, align 1
  %tobool135 = trunc i8 %81 to i1
  br i1 %tobool135, label %if.then.136, label %if.end.139

if.then.136:                                      ; preds = %do.body.134
  store i8 0, i8* %sa_must_free, align 1
  %82 = load i64, i64* %sa_count, align 8
  %call137 = call i64 @builtin_lisp_symbol(i32 0)
  %call138 = call i64 @unbind_to(i64 %82, i64 %call137)
  br label %if.end.139

if.end.139:                                       ; preds = %if.then.136, %do.body.134
  br label %do.end.140

do.end.140:                                       ; preds = %if.end.139
  br label %if.end.141

if.end.141:                                       ; preds = %do.end.140, %if.end
  %83 = load %struct.terminal*, %struct.terminal** %t, align 8
  %call142 = call %struct.frame* @make_terminal_frame(%struct.terminal* %83)
  store %struct.frame* %call142, %struct.frame** %f, align 8
  %84 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method143 = getelementptr inbounds %struct.frame, %struct.frame* %84, i32 0, i32 26
  %85 = bitcast i48* %output_method143 to i64*
  %bf.load144 = load i64, i64* %85, align 8
  %bf.lshr145 = lshr i64 %bf.load144, 23
  %bf.clear146 = and i64 %bf.lshr145, 7
  %bf.cast147 = trunc i64 %bf.clear146 to i32
  %cmp148 = icmp eq i32 %bf.cast147, 1
  br i1 %cmp148, label %cond.true.158, label %lor.lhs.false.150

lor.lhs.false.150:                                ; preds = %if.end.141
  %86 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method151 = getelementptr inbounds %struct.frame, %struct.frame* %86, i32 0, i32 26
  %87 = bitcast i48* %output_method151 to i64*
  %bf.load152 = load i64, i64* %87, align 8
  %bf.lshr153 = lshr i64 %bf.load152, 23
  %bf.clear154 = and i64 %bf.lshr153, 7
  %bf.cast155 = trunc i64 %bf.clear154 to i32
  %cmp156 = icmp eq i32 %bf.cast155, 3
  br i1 %cmp156, label %cond.true.158, label %cond.false.162

cond.true.158:                                    ; preds = %lor.lhs.false.150, %if.end.141
  %88 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal159 = getelementptr inbounds %struct.frame, %struct.frame* %88, i32 0, i32 61
  %89 = load %struct.terminal*, %struct.terminal** %terminal159, align 8
  %display_info160 = getelementptr inbounds %struct.terminal, %struct.terminal* %89, i32 0, i32 12
  %tty161 = bitcast %union.display_info* %display_info160 to %struct.tty_display_info**
  %90 = load %struct.tty_display_info*, %struct.tty_display_info** %tty161, align 8
  br label %cond.end.163

cond.false.162:                                   ; preds = %lor.lhs.false.150
  call void @emacs_abort() #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.163

cond.end.163:                                     ; preds = %91, %cond.true.158
  %cond164 = phi %struct.tty_display_info* [ %90, %cond.true.158 ], [ null, %91 ]
  %input = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond164, i32 0, i32 3
  %92 = load %struct._IO_FILE*, %struct._IO_FILE** %input, align 8
  %call165 = call i32 @fileno(%struct._IO_FILE* %92) #4
  call void @get_tty_size(i32 %call165, i32* %width, i32* %height)
  %93 = load %struct.frame*, %struct.frame** %f, align 8
  %94 = load i32, i32* %width, align 4
  %95 = load i32, i32* %height, align 4
  %96 = load %struct.frame*, %struct.frame** %f, align 8
  %menu_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %96, i32 0, i32 57
  %97 = load i32, i32* %menu_bar_lines, align 4
  %sub166 = sub nsw i32 %95, %97
  %call167 = call i64 @builtin_lisp_symbol(i32 907)
  call void @adjust_frame_size(%struct.frame* %93, i32 %94, i32 %sub166, i32 5, i1 zeroext false, i64 %call167)
  %98 = load %struct.frame*, %struct.frame** %f, align 8
  call void @adjust_frame_glyphs(%struct.frame* %98)
  %99 = load %struct.frame*, %struct.frame** %f, align 8
  call void @calculate_costs(%struct.frame* %99)
  %100 = load %struct.frame*, %struct.frame** %f, align 8
  %101 = bitcast %struct.frame* %100 to i8*
  %call168 = call i64 @make_lisp_ptr(i8* %101, i32 5)
  store i64 %call168, i64* %frame, align 8
  %call169 = call i64 @builtin_lisp_symbol(i32 955)
  %102 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info170 = getelementptr inbounds %struct.terminal, %struct.terminal* %102, i32 0, i32 12
  %tty171 = bitcast %union.display_info* %display_info170 to %struct.tty_display_info**
  %103 = load %struct.tty_display_info*, %struct.tty_display_info** %tty171, align 8
  %type172 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %103, i32 0, i32 2
  %104 = load i8*, i8** %type172, align 8
  %call173 = call i64 @build_string(i8* %104)
  call void @store_in_alist(i64* %parms.addr, i64 %call169, i64 %call173)
  %call174 = call i64 @builtin_lisp_symbol(i32 938)
  %105 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info175 = getelementptr inbounds %struct.terminal, %struct.terminal* %105, i32 0, i32 12
  %tty176 = bitcast %union.display_info* %display_info175 to %struct.tty_display_info**
  %106 = load %struct.tty_display_info*, %struct.tty_display_info** %tty176, align 8
  %name177 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %106, i32 0, i32 1
  %107 = load i8*, i8** %name177, align 8
  %tobool178 = icmp ne i8* %107, null
  br i1 %tobool178, label %cond.true.179, label %cond.false.184

cond.true.179:                                    ; preds = %cond.end.163
  %108 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info180 = getelementptr inbounds %struct.terminal, %struct.terminal* %108, i32 0, i32 12
  %tty181 = bitcast %union.display_info* %display_info180 to %struct.tty_display_info**
  %109 = load %struct.tty_display_info*, %struct.tty_display_info** %tty181, align 8
  %name182 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %109, i32 0, i32 1
  %110 = load i8*, i8** %name182, align 8
  %call183 = call i64 @build_string(i8* %110)
  br label %cond.end.186

cond.false.184:                                   ; preds = %cond.end.163
  %call185 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.186

cond.end.186:                                     ; preds = %cond.false.184, %cond.true.179
  %cond187 = phi i64 [ %call183, %cond.true.179 ], [ %call185, %cond.false.184 ]
  call void @store_in_alist(i64* %parms.addr, i64 %call174, i64 %cond187)
  %111 = load i64, i64* %frame, align 8
  %112 = load i64, i64* %parms.addr, align 8
  %call188 = call i64 @Fmodify_frame_parameters(i64 %111, i64 %112)
  %113 = load %struct.frame*, %struct.frame** %f, align 8
  %114 = load %struct.frame*, %struct.frame** %sf, align 8
  %face_alist = getelementptr inbounds %struct.frame, %struct.frame* %114, i32 0, i32 12
  %115 = load i64, i64* %face_alist, align 8
  %call189 = call i64 @Fcopy_alist(i64 %115)
  call void @fset_face_alist(%struct.frame* %113, i64 %call189)
  %116 = load %struct.frame*, %struct.frame** %f, align 8
  %face_alist190 = getelementptr inbounds %struct.frame, %struct.frame* %116, i32 0, i32 12
  %117 = load i64, i64* %face_alist190, align 8
  store i64 %117, i64* %tem, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end.186
  %118 = load i64, i64* %tem, align 8
  %and191 = and i64 %118, 7
  %conv192 = trunc i64 %and191 to i32
  %cmp193 = icmp eq i32 %conv192, 3
  br i1 %cmp193, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %119 = load i64, i64* %tem, align 8
  %sub195 = sub nsw i64 %119, 3
  %120 = inttoptr i64 %sub195 to i8*
  %121 = bitcast i8* %120 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %121, i32 0, i32 0
  %122 = load i64, i64* %car, align 8
  %123 = load i64, i64* %tem, align 8
  %sub196 = sub nsw i64 %123, 3
  %124 = inttoptr i64 %sub196 to i8*
  %125 = bitcast i8* %124 to %struct.Lisp_Cons*
  %car197 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %125, i32 0, i32 0
  %126 = load i64, i64* %car197, align 8
  %sub198 = sub nsw i64 %126, 3
  %127 = inttoptr i64 %sub198 to i8*
  %128 = bitcast i8* %127 to %struct.Lisp_Cons*
  %u199 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %128, i32 0, i32 1
  %cdr200 = bitcast %union.anon.11* %u199 to i64*
  %129 = load i64, i64* %cdr200, align 8
  %call201 = call i64 @Fcopy_sequence(i64 %129)
  call void @XSETCDR(i64 %122, i64 %call201)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %130 = load i64, i64* %tem, align 8
  %sub202 = sub nsw i64 %130, 3
  %131 = inttoptr i64 %sub202 to i8*
  %132 = bitcast i8* %131 to %struct.Lisp_Cons*
  %u203 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %132, i32 0, i32 1
  %cdr204 = bitcast %union.anon.11* %u203 to i64*
  %133 = load i64, i64* %cdr204, align 8
  store i64 %133, i64* %tem, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %134 = load %struct.frame*, %struct.frame** %f, align 8
  %can_x_set_window_size = getelementptr inbounds %struct.frame, %struct.frame* %134, i32 0, i32 26
  %135 = bitcast i48* %can_x_set_window_size to i64*
  %bf.load205 = load i64, i64* %135, align 8
  %bf.clear206 = and i64 %bf.load205, -17179869185
  %bf.set = or i64 %bf.clear206, 17179869184
  store i64 %bf.set, i64* %135, align 8
  %136 = load %struct.frame*, %struct.frame** %f, align 8
  %after_make_frame = getelementptr inbounds %struct.frame, %struct.frame* %136, i32 0, i32 26
  %137 = bitcast i48* %after_make_frame to i64*
  %bf.load207 = load i64, i64* %137, align 8
  %bf.clear208 = and i64 %bf.load207, -34359738369
  %bf.set209 = or i64 %bf.clear208, 34359738368
  store i64 %bf.set209, i64* %137, align 8
  %138 = load i64, i64* %frame, align 8
  ret i64 %138
}

declare %struct.terminal* @decode_live_terminal(i64) #1

declare i64 @SPECPDL_INDEX() #1

; Function Attrs: nounwind uwtable
define internal i64 @get_future_frame_param(i64 %parameter, i64 %supplied_parms, i8* %current_value) #0 {
entry:
  %parameter.addr = alloca i64, align 8
  %supplied_parms.addr = alloca i64, align 8
  %current_value.addr = alloca i8*, align 8
  %result = alloca i64, align 8
  store i64 %parameter, i64* %parameter.addr, align 8
  store i64 %supplied_parms, i64* %supplied_parms.addr, align 8
  store i8* %current_value, i8** %current_value.addr, align 8
  %0 = load i64, i64* %parameter.addr, align 8
  %1 = load i64, i64* %supplied_parms.addr, align 8
  %call = call i64 @Fassq(i64 %0, i64 %1)
  store i64 %call, i64* %result, align 8
  %2 = load i64, i64* %result, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %2, %call1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i64, i64* %parameter.addr, align 8
  %4 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %4, 5
  %5 = inttoptr i64 %sub to i8*
  %6 = bitcast i8* %5 to %struct.frame*
  %param_alist = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 8
  %7 = load i64, i64* %param_alist, align 8
  %call2 = call i64 @Fassq(i64 %3, i64 %7)
  store i64 %call2, i64* %result, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load i64, i64* %result, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp4 = icmp eq i64 %8, %call3
  br i1 %cmp4, label %land.lhs.true, label %if.end.8

land.lhs.true:                                    ; preds = %if.end
  %9 = load i8*, i8** %current_value.addr, align 8
  %cmp5 = icmp ne i8* %9, null
  br i1 %cmp5, label %if.then.6, label %if.end.8

if.then.6:                                        ; preds = %land.lhs.true
  %10 = load i8*, i8** %current_value.addr, align 8
  %call7 = call i64 @build_string(i8* %10)
  store i64 %call7, i64* %result, align 8
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.6, %land.lhs.true, %if.end
  %11 = load i64, i64* %result, align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp10 = icmp eq i64 %11, %call9
  br i1 %cmp10, label %if.end.15, label %land.lhs.true.11

land.lhs.true.11:                                 ; preds = %if.end.8
  %12 = load i64, i64* %result, align 8
  %call12 = call zeroext i1 @STRINGP(i64 %12)
  br i1 %call12, label %if.end.15, label %if.then.13

if.then.13:                                       ; preds = %land.lhs.true.11
  %13 = load i64, i64* %result, align 8
  %sub14 = sub nsw i64 %13, 3
  %14 = inttoptr i64 %sub14 to i8*
  %15 = bitcast i8* %14 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %15, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %16 = load i64, i64* %cdr, align 8
  store i64 %16, i64* %result, align 8
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.13, %land.lhs.true.11, %if.end.8
  %17 = load i64, i64* %result, align 8
  %call16 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp17 = icmp eq i64 %17, %call16
  br i1 %cmp17, label %if.then.19, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.15
  %18 = load i64, i64* %result, align 8
  %call18 = call zeroext i1 @STRINGP(i64 %18)
  br i1 %call18, label %if.end.21, label %if.then.19

if.then.19:                                       ; preds = %lor.lhs.false, %if.end.15
  %call20 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call20, i64* %result, align 8
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.19, %lor.lhs.false
  %19 = load i64, i64* %result, align 8
  ret i64 %19
}

declare i64 @SBYTES(i64) #1

declare i8* @record_xmalloc(i64) #1

declare i8* @SDATA(i64) #1

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #4

declare %struct.terminal* @init_tty(i8*, i8*, i1 zeroext) #1

declare i64 @unbind_to(i64, i64) #1

; Function Attrs: nounwind uwtable
define internal %struct.frame* @make_terminal_frame(%struct.terminal* %terminal) #0 {
entry:
  %terminal.addr = alloca %struct.terminal*, align 8
  %f = alloca %struct.frame*, align 8
  %frame = alloca i64, align 8
  %name = alloca [22 x i8], align 16
  store %struct.terminal* %terminal, %struct.terminal** %terminal.addr, align 8
  %0 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %name1 = getelementptr inbounds %struct.terminal, %struct.terminal* %0, i32 0, i32 9
  %1 = load i8*, i8** %name1, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void (i8*, ...) @error(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.65, i32 0, i32 0)) #7
  unreachable

if.end:                                           ; preds = %entry
  %call = call %struct.frame* @make_frame(i1 zeroext true)
  store %struct.frame* %call, %struct.frame** %f, align 8
  %2 = load %struct.frame*, %struct.frame** %f, align 8
  %3 = bitcast %struct.frame* %2 to i8*
  %call2 = call i64 @make_lisp_ptr(i8* %3, i32 5)
  store i64 %call2, i64* %frame, align 8
  %4 = load i64, i64* %frame, align 8
  %5 = load i64, i64* @Vframe_list, align 8
  %call3 = call i64 @Fcons(i64 %4, i64 %5)
  store i64 %call3, i64* @Vframe_list, align 8
  %6 = load %struct.frame*, %struct.frame** %f, align 8
  %arraydecay = getelementptr inbounds [22 x i8], [22 x i8]* %name, i32 0, i32 0
  %7 = load i64, i64* @tty_frame_count, align 8
  %inc = add nsw i64 %7, 1
  store i64 %inc, i64* @tty_frame_count, align 8
  %call4 = call i64 (i8*, i8*, ...) @make_formatted_string(i8* %arraydecay, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.66, i32 0, i32 0), i64 %inc)
  call void @fset_name(%struct.frame* %6, i64 %call4)
  %8 = load %struct.frame*, %struct.frame** %f, align 8
  call void @SET_FRAME_VISIBLE(%struct.frame* %8, i32 1)
  %9 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %10 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal5 = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 61
  store %struct.terminal* %9, %struct.terminal** %terminal5, align 8
  %11 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal6 = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 61
  %12 = load %struct.terminal*, %struct.terminal** %terminal6, align 8
  %reference_count = getelementptr inbounds %struct.terminal, %struct.terminal* %12, i32 0, i32 7
  %13 = load i32, i32* %reference_count, align 4
  %inc7 = add nsw i32 %13, 1
  store i32 %inc7, i32* %reference_count, align 4
  %14 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 26
  %15 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %15, align 8
  %bf.clear = and i64 %bf.load, -58720257
  %bf.set = or i64 %bf.clear, 8388608
  store i64 %bf.set, i64* %15, align 8
  %16 = load %struct.frame*, %struct.frame** %f, align 8
  call void @create_tty_output(%struct.frame* %16)
  %17 = load %struct.frame*, %struct.frame** %f, align 8
  %foreground_pixel = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 78
  store i64 -2, i64* %foreground_pixel, align 8
  %18 = load %struct.frame*, %struct.frame** %f, align 8
  %background_pixel = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 77
  store i64 -3, i64* %background_pixel, align 8
  %19 = load %struct.frame*, %struct.frame** %f, align 8
  %vertical_scroll_bar_type = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 26
  %20 = bitcast i48* %vertical_scroll_bar_type to i64*
  %bf.load8 = load i64, i64* %20, align 8
  %bf.clear9 = and i64 %bf.load8, -3221225473
  store i64 %bf.clear9, i64* %20, align 8
  %21 = load %struct.frame*, %struct.frame** %f, align 8
  %horizontal_scroll_bars = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 26
  %22 = bitcast i48* %horizontal_scroll_bars to i64*
  %bf.load10 = load i64, i64* %22, align 8
  %bf.clear11 = and i64 %bf.load10, -4294967297
  store i64 %bf.clear11, i64* %22, align 8
  %23 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 177), align 8
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %23, %call12
  %cond = select i1 %cmp, i32 0, i32 1
  %24 = load %struct.frame*, %struct.frame** %f, align 8
  %menu_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 57
  store i32 %cond, i32* %menu_bar_lines, align 4
  %25 = load %struct.frame*, %struct.frame** %f, align 8
  %text_lines = getelementptr inbounds %struct.frame, %struct.frame* %25, i32 0, i32 37
  %26 = load i32, i32* %text_lines, align 4
  %27 = load %struct.frame*, %struct.frame** %f, align 8
  %menu_bar_lines13 = getelementptr inbounds %struct.frame, %struct.frame* %27, i32 0, i32 57
  %28 = load i32, i32* %menu_bar_lines13, align 4
  %sub = sub nsw i32 %26, %28
  %29 = load %struct.frame*, %struct.frame** %f, align 8
  %text_lines14 = getelementptr inbounds %struct.frame, %struct.frame* %29, i32 0, i32 37
  store i32 %sub, i32* %text_lines14, align 4
  %30 = load %struct.frame*, %struct.frame** %f, align 8
  %menu_bar_lines15 = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 57
  %31 = load i32, i32* %menu_bar_lines15, align 4
  %32 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %32, i32 0, i32 60
  %33 = load i32, i32* %line_height, align 4
  %mul = mul nsw i32 %31, %33
  %34 = load %struct.frame*, %struct.frame** %f, align 8
  %menu_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %34, i32 0, i32 58
  store i32 %mul, i32* %menu_bar_height, align 4
  %35 = load %struct.frame*, %struct.frame** %f, align 8
  %text_height = getelementptr inbounds %struct.frame, %struct.frame* %35, i32 0, i32 41
  %36 = load i32, i32* %text_height, align 4
  %37 = load %struct.frame*, %struct.frame** %f, align 8
  %menu_bar_height16 = getelementptr inbounds %struct.frame, %struct.frame* %37, i32 0, i32 58
  %38 = load i32, i32* %menu_bar_height16, align 4
  %sub17 = sub nsw i32 %36, %38
  %39 = load %struct.frame*, %struct.frame** %f, align 8
  %text_height18 = getelementptr inbounds %struct.frame, %struct.frame* %39, i32 0, i32 41
  store i32 %sub17, i32* %text_height18, align 4
  %40 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method19 = getelementptr inbounds %struct.frame, %struct.frame* %40, i32 0, i32 26
  %41 = bitcast i48* %output_method19 to i64*
  %bf.load20 = load i64, i64* %41, align 8
  %bf.lshr = lshr i64 %bf.load20, 23
  %bf.clear21 = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear21 to i32
  %cmp22 = icmp eq i32 %bf.cast, 1
  br i1 %cmp22, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %42 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method23 = getelementptr inbounds %struct.frame, %struct.frame* %42, i32 0, i32 26
  %43 = bitcast i48* %output_method23 to i64*
  %bf.load24 = load i64, i64* %43, align 8
  %bf.lshr25 = lshr i64 %bf.load24, 23
  %bf.clear26 = and i64 %bf.lshr25, 7
  %bf.cast27 = trunc i64 %bf.clear26 to i32
  %cmp28 = icmp eq i32 %bf.cast27, 3
  br i1 %cmp28, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %if.end
  %44 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal29 = getelementptr inbounds %struct.frame, %struct.frame* %44, i32 0, i32 61
  %45 = load %struct.terminal*, %struct.terminal** %terminal29, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %45, i32 0, i32 12
  %tty = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %46 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  call void @emacs_abort() #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %47, %cond.true
  %cond30 = phi %struct.tty_display_info* [ %46, %cond.true ], [ null, %47 ]
  %top_frame = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond30, i32 0, i32 11
  %48 = load i64, i64* %top_frame, align 8
  %call31 = call zeroext i1 @FRAMEP(i64 %48)
  br i1 %call31, label %land.lhs.true, label %if.end.79

land.lhs.true:                                    ; preds = %cond.end
  %49 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method32 = getelementptr inbounds %struct.frame, %struct.frame* %49, i32 0, i32 26
  %50 = bitcast i48* %output_method32 to i64*
  %bf.load33 = load i64, i64* %50, align 8
  %bf.lshr34 = lshr i64 %bf.load33, 23
  %bf.clear35 = and i64 %bf.lshr34, 7
  %bf.cast36 = trunc i64 %bf.clear35 to i32
  %cmp37 = icmp eq i32 %bf.cast36, 1
  br i1 %cmp37, label %cond.true.45, label %lor.lhs.false.38

lor.lhs.false.38:                                 ; preds = %land.lhs.true
  %51 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method39 = getelementptr inbounds %struct.frame, %struct.frame* %51, i32 0, i32 26
  %52 = bitcast i48* %output_method39 to i64*
  %bf.load40 = load i64, i64* %52, align 8
  %bf.lshr41 = lshr i64 %bf.load40, 23
  %bf.clear42 = and i64 %bf.lshr41, 7
  %bf.cast43 = trunc i64 %bf.clear42 to i32
  %cmp44 = icmp eq i32 %bf.cast43, 3
  br i1 %cmp44, label %cond.true.45, label %cond.false.49

cond.true.45:                                     ; preds = %lor.lhs.false.38, %land.lhs.true
  %53 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal46 = getelementptr inbounds %struct.frame, %struct.frame* %53, i32 0, i32 61
  %54 = load %struct.terminal*, %struct.terminal** %terminal46, align 8
  %display_info47 = getelementptr inbounds %struct.terminal, %struct.terminal* %54, i32 0, i32 12
  %tty48 = bitcast %union.display_info* %display_info47 to %struct.tty_display_info**
  %55 = load %struct.tty_display_info*, %struct.tty_display_info** %tty48, align 8
  br label %cond.end.50

cond.false.49:                                    ; preds = %lor.lhs.false.38
  call void @emacs_abort() #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.50

cond.end.50:                                      ; preds = %56, %cond.true.45
  %cond51 = phi %struct.tty_display_info* [ %55, %cond.true.45 ], [ null, %56 ]
  %top_frame52 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond51, i32 0, i32 11
  %57 = load i64, i64* %top_frame52, align 8
  %sub53 = sub nsw i64 %57, 5
  %58 = inttoptr i64 %sub53 to i8*
  %59 = bitcast i8* %58 to %struct.frame*
  %terminal54 = getelementptr inbounds %struct.frame, %struct.frame* %59, i32 0, i32 61
  %60 = load %struct.terminal*, %struct.terminal** %terminal54, align 8
  %cmp55 = icmp ne %struct.terminal* %60, null
  br i1 %cmp55, label %if.then.56, label %if.end.79

if.then.56:                                       ; preds = %cond.end.50
  %61 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method57 = getelementptr inbounds %struct.frame, %struct.frame* %61, i32 0, i32 26
  %62 = bitcast i48* %output_method57 to i64*
  %bf.load58 = load i64, i64* %62, align 8
  %bf.lshr59 = lshr i64 %bf.load58, 23
  %bf.clear60 = and i64 %bf.lshr59, 7
  %bf.cast61 = trunc i64 %bf.clear60 to i32
  %cmp62 = icmp eq i32 %bf.cast61, 1
  br i1 %cmp62, label %cond.true.70, label %lor.lhs.false.63

lor.lhs.false.63:                                 ; preds = %if.then.56
  %63 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method64 = getelementptr inbounds %struct.frame, %struct.frame* %63, i32 0, i32 26
  %64 = bitcast i48* %output_method64 to i64*
  %bf.load65 = load i64, i64* %64, align 8
  %bf.lshr66 = lshr i64 %bf.load65, 23
  %bf.clear67 = and i64 %bf.lshr66, 7
  %bf.cast68 = trunc i64 %bf.clear67 to i32
  %cmp69 = icmp eq i32 %bf.cast68, 3
  br i1 %cmp69, label %cond.true.70, label %cond.false.74

cond.true.70:                                     ; preds = %lor.lhs.false.63, %if.then.56
  %65 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal71 = getelementptr inbounds %struct.frame, %struct.frame* %65, i32 0, i32 61
  %66 = load %struct.terminal*, %struct.terminal** %terminal71, align 8
  %display_info72 = getelementptr inbounds %struct.terminal, %struct.terminal* %66, i32 0, i32 12
  %tty73 = bitcast %union.display_info* %display_info72 to %struct.tty_display_info**
  %67 = load %struct.tty_display_info*, %struct.tty_display_info** %tty73, align 8
  br label %cond.end.75

cond.false.74:                                    ; preds = %lor.lhs.false.63
  call void @emacs_abort() #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.75

cond.end.75:                                      ; preds = %68, %cond.true.70
  %cond76 = phi %struct.tty_display_info* [ %67, %cond.true.70 ], [ null, %68 ]
  %top_frame77 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond76, i32 0, i32 11
  %69 = load i64, i64* %top_frame77, align 8
  %sub78 = sub nsw i64 %69, 5
  %70 = inttoptr i64 %sub78 to i8*
  %71 = bitcast i8* %70 to %struct.frame*
  call void @SET_FRAME_VISIBLE(%struct.frame* %71, i32 2)
  br label %if.end.79

if.end.79:                                        ; preds = %cond.end.75, %cond.end.50, %cond.end
  %72 = load i64, i64* %frame, align 8
  %73 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method80 = getelementptr inbounds %struct.frame, %struct.frame* %73, i32 0, i32 26
  %74 = bitcast i48* %output_method80 to i64*
  %bf.load81 = load i64, i64* %74, align 8
  %bf.lshr82 = lshr i64 %bf.load81, 23
  %bf.clear83 = and i64 %bf.lshr82, 7
  %bf.cast84 = trunc i64 %bf.clear83 to i32
  %cmp85 = icmp eq i32 %bf.cast84, 1
  br i1 %cmp85, label %cond.true.93, label %lor.lhs.false.86

lor.lhs.false.86:                                 ; preds = %if.end.79
  %75 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method87 = getelementptr inbounds %struct.frame, %struct.frame* %75, i32 0, i32 26
  %76 = bitcast i48* %output_method87 to i64*
  %bf.load88 = load i64, i64* %76, align 8
  %bf.lshr89 = lshr i64 %bf.load88, 23
  %bf.clear90 = and i64 %bf.lshr89, 7
  %bf.cast91 = trunc i64 %bf.clear90 to i32
  %cmp92 = icmp eq i32 %bf.cast91, 3
  br i1 %cmp92, label %cond.true.93, label %cond.false.97

cond.true.93:                                     ; preds = %lor.lhs.false.86, %if.end.79
  %77 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal94 = getelementptr inbounds %struct.frame, %struct.frame* %77, i32 0, i32 61
  %78 = load %struct.terminal*, %struct.terminal** %terminal94, align 8
  %display_info95 = getelementptr inbounds %struct.terminal, %struct.terminal* %78, i32 0, i32 12
  %tty96 = bitcast %union.display_info* %display_info95 to %struct.tty_display_info**
  %79 = load %struct.tty_display_info*, %struct.tty_display_info** %tty96, align 8
  br label %cond.end.98

cond.false.97:                                    ; preds = %lor.lhs.false.86
  call void @emacs_abort() #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.98

cond.end.98:                                      ; preds = %80, %cond.true.93
  %cond99 = phi %struct.tty_display_info* [ %79, %cond.true.93 ], [ null, %80 ]
  %top_frame100 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond99, i32 0, i32 11
  store i64 %72, i64* %top_frame100, align 8
  %81 = load i8, i8* @noninteractive, align 1
  %tobool101 = trunc i8 %81 to i1
  br i1 %tobool101, label %if.end.103, label %if.then.102

if.then.102:                                      ; preds = %cond.end.98
  %82 = load %struct.frame*, %struct.frame** %f, align 8
  call void @init_frame_faces(%struct.frame* %82)
  br label %if.end.103

if.end.103:                                       ; preds = %if.then.102, %cond.end.98
  %83 = load %struct.frame*, %struct.frame** %f, align 8
  ret %struct.frame* %83
}

declare void @get_tty_size(i32, i32*, i32*) #1

; Function Attrs: nounwind
declare i32 @fileno(%struct._IO_FILE*) #5

; Function Attrs: nounwind uwtable
define void @store_in_alist(i64* %alistptr, i64 %prop, i64 %val) #0 {
entry:
  %alistptr.addr = alloca i64*, align 8
  %prop.addr = alloca i64, align 8
  %val.addr = alloca i64, align 8
  %tem = alloca i64, align 8
  store i64* %alistptr, i64** %alistptr.addr, align 8
  store i64 %prop, i64* %prop.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %prop.addr, align 8
  %1 = load i64*, i64** %alistptr.addr, align 8
  %2 = load i64, i64* %1, align 8
  %call = call i64 @Fassq(i64 %0, i64 %2)
  store i64 %call, i64* %tem, align 8
  %3 = load i64, i64* %tem, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %3, %call1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load i64, i64* %prop.addr, align 8
  %5 = load i64, i64* %val.addr, align 8
  %call2 = call i64 @Fcons(i64 %4, i64 %5)
  %6 = load i64*, i64** %alistptr.addr, align 8
  %7 = load i64, i64* %6, align 8
  %call3 = call i64 @Fcons(i64 %call2, i64 %7)
  %8 = load i64*, i64** %alistptr.addr, align 8
  store i64 %call3, i64* %8, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %9 = load i64, i64* %tem, align 8
  %10 = load i64, i64* %val.addr, align 8
  %call4 = call i64 @Fsetcdr(i64 %9, i64 %10)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare i64 @build_string(i8*) #1

; Function Attrs: nounwind uwtable
define i64 @Fmodify_frame_parameters(i64 %frame, i64 %alist) #0 {
entry:
  %frame.addr = alloca i64, align 8
  %alist.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %prop = alloca i64, align 8
  %val = alloca i64, align 8
  %length = alloca i64, align 8
  %i = alloca i64, align 8
  %parms = alloca i64*, align 8
  %values = alloca i64*, align 8
  %sa_avail = alloca i64, align 8
  %sa_count = alloca i64, align 8
  %sa_must_free = alloca i8, align 1
  %alloca_nbytes = alloca i64, align 8
  %arg_ = alloca i64, align 8
  %elt = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  store i64 %alist, i64* %alist.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_live_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  %1 = load i64, i64* %alist.addr, align 8
  call void @CHECK_LIST(i64 %1)
  %2 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 26
  %3 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %3, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load %struct.frame*, %struct.frame** %f, align 8
  %5 = load i64, i64* %alist.addr, align 8
  call void @x_set_frame_parameters(%struct.frame* %4, i64 %5)
  br label %if.end.2544

if.else:                                          ; preds = %entry
  %6 = load i64, i64* %alist.addr, align 8
  %call1 = call i64 @Flength(i64 %6)
  %shr = ashr i64 %call1, 2
  store i64 %shr, i64* %length, align 8
  store i64 16384, i64* %sa_avail, align 8
  %call2 = call i64 @SPECPDL_INDEX()
  store i64 %call2, i64* %sa_count, align 8
  store i8 0, i8* %sa_must_free, align 1
  br label %do.body

do.body:                                          ; preds = %if.else
  br i1 false, label %cond.true, label %cond.false.542

cond.true:                                        ; preds = %do.body
  br i1 false, label %cond.true.3, label %cond.false.293

cond.true.3:                                      ; preds = %cond.true
  %7 = load i64, i64* %length, align 8
  %mul = mul nsw i64 2, %7
  %conv = trunc i64 %mul to i8
  %conv4 = sext i8 %conv to i32
  %add = add nsw i32 0, %conv4
  %mul5 = mul nsw i32 0, %add
  %sub = sub nsw i32 %mul5, 1
  %cmp6 = icmp slt i32 %sub, 0
  br i1 %cmp6, label %cond.true.8, label %cond.false

cond.true.8:                                      ; preds = %cond.true.3
  %8 = load i64, i64* %length, align 8
  %mul9 = mul nsw i64 2, %8
  %conv10 = trunc i64 %mul9 to i8
  %conv11 = sext i8 %conv10 to i32
  %add12 = add nsw i32 0, %conv11
  %mul13 = mul nsw i32 0, %add12
  %add14 = add nsw i32 %mul13, 0
  %neg = xor i32 %add14, -1
  %cmp15 = icmp eq i32 %neg, -1
  %conv16 = zext i1 %cmp15 to i32
  %sub17 = sub nsw i32 0, %conv16
  %9 = load i64, i64* %length, align 8
  %mul18 = mul nsw i64 2, %9
  %conv19 = trunc i64 %mul18 to i8
  %conv20 = sext i8 %conv19 to i32
  %add21 = add nsw i32 0, %conv20
  %mul22 = mul nsw i32 0, %add21
  %add23 = add nsw i32 %mul22, 1
  %shl = shl i32 %add23, 30
  %sub24 = sub nsw i32 %shl, 1
  %mul25 = mul nsw i32 %sub24, 2
  %add26 = add nsw i32 %mul25, 1
  %sub27 = sub nsw i32 %sub17, %add26
  br label %cond.end

cond.false:                                       ; preds = %cond.true.3
  %10 = load i64, i64* %length, align 8
  %mul28 = mul nsw i64 2, %10
  %conv29 = trunc i64 %mul28 to i8
  %conv30 = sext i8 %conv29 to i32
  %add31 = add nsw i32 0, %conv30
  %mul32 = mul nsw i32 0, %add31
  %add33 = add nsw i32 %mul32, 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.8
  %cond = phi i32 [ %sub27, %cond.true.8 ], [ %add33, %cond.false ]
  %cmp34 = icmp eq i32 %cond, 0
  br i1 %cmp34, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %cond.end
  %11 = load i64, i64* %length, align 8
  %mul36 = mul nsw i64 2, %11
  %conv37 = trunc i64 %mul36 to i8
  %conv38 = sext i8 %conv37 to i32
  %cmp39 = icmp slt i32 %conv38, 0
  br i1 %cmp39, label %cond.true.241, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %cond.end
  br i1 false, label %cond.true.41, label %cond.false.129

cond.true.41:                                     ; preds = %lor.lhs.false
  %12 = load i64, i64* %length, align 8
  %mul42 = mul nsw i64 2, %12
  %conv43 = trunc i64 %mul42 to i8
  %conv44 = sext i8 %conv43 to i32
  %cmp45 = icmp slt i32 %conv44, 0
  br i1 %cmp45, label %cond.true.47, label %cond.false.81

cond.true.47:                                     ; preds = %cond.true.41
  %13 = load i64, i64* %length, align 8
  %mul48 = mul nsw i64 2, %13
  %conv49 = trunc i64 %mul48 to i8
  %conv50 = sext i8 %conv49 to i32
  %14 = load i64, i64* %length, align 8
  %mul51 = mul nsw i64 2, %14
  %conv52 = trunc i64 %mul51 to i8
  %conv53 = sext i8 %conv52 to i32
  %add54 = add nsw i32 0, %conv53
  %mul55 = mul nsw i32 0, %add54
  %sub56 = sub nsw i32 %mul55, 1
  %cmp57 = icmp slt i32 %sub56, 0
  br i1 %cmp57, label %cond.true.59, label %cond.false.70

cond.true.59:                                     ; preds = %cond.true.47
  %15 = load i64, i64* %length, align 8
  %mul60 = mul nsw i64 2, %15
  %conv61 = trunc i64 %mul60 to i8
  %conv62 = sext i8 %conv61 to i32
  %add63 = add nsw i32 0, %conv62
  %mul64 = mul nsw i32 0, %add63
  %add65 = add nsw i32 %mul64, 1
  %shl66 = shl i32 %add65, 30
  %sub67 = sub nsw i32 %shl66, 1
  %mul68 = mul nsw i32 %sub67, 2
  %add69 = add nsw i32 %mul68, 1
  br label %cond.end.77

cond.false.70:                                    ; preds = %cond.true.47
  %16 = load i64, i64* %length, align 8
  %mul71 = mul nsw i64 2, %16
  %conv72 = trunc i64 %mul71 to i8
  %conv73 = sext i8 %conv72 to i32
  %add74 = add nsw i32 0, %conv73
  %mul75 = mul nsw i32 0, %add74
  %sub76 = sub nsw i32 %mul75, 1
  br label %cond.end.77

cond.end.77:                                      ; preds = %cond.false.70, %cond.true.59
  %cond78 = phi i32 [ %add69, %cond.true.59 ], [ %sub76, %cond.false.70 ]
  %div = sdiv i32 %cond78, 8
  %cmp79 = icmp slt i32 %conv50, %div
  br i1 %cmp79, label %cond.true.241, label %lor.lhs.false.218

cond.false.81:                                    ; preds = %cond.true.41
  br i1 false, label %cond.true.82, label %cond.false.83

cond.true.82:                                     ; preds = %cond.false.81
  br i1 false, label %cond.true.241, label %lor.lhs.false.218

cond.false.83:                                    ; preds = %cond.false.81
  %17 = load i64, i64* %length, align 8
  %mul84 = mul nsw i64 2, %17
  %conv85 = trunc i64 %mul84 to i8
  %conv86 = sext i8 %conv85 to i32
  %add87 = add nsw i32 0, %conv86
  %mul88 = mul nsw i32 0, %add87
  %sub89 = sub nsw i32 %mul88, 1
  %cmp90 = icmp slt i32 %sub89, 0
  br i1 %cmp90, label %cond.true.92, label %cond.false.114

cond.true.92:                                     ; preds = %cond.false.83
  %18 = load i64, i64* %length, align 8
  %mul93 = mul nsw i64 2, %18
  %conv94 = trunc i64 %mul93 to i8
  %conv95 = sext i8 %conv94 to i32
  %add96 = add nsw i32 0, %conv95
  %mul97 = mul nsw i32 0, %add96
  %add98 = add nsw i32 %mul97, 0
  %neg99 = xor i32 %add98, -1
  %cmp100 = icmp eq i32 %neg99, -1
  %conv101 = zext i1 %cmp100 to i32
  %sub102 = sub nsw i32 0, %conv101
  %19 = load i64, i64* %length, align 8
  %mul103 = mul nsw i64 2, %19
  %conv104 = trunc i64 %mul103 to i8
  %conv105 = sext i8 %conv104 to i32
  %add106 = add nsw i32 0, %conv105
  %mul107 = mul nsw i32 0, %add106
  %add108 = add nsw i32 %mul107, 1
  %shl109 = shl i32 %add108, 30
  %sub110 = sub nsw i32 %shl109, 1
  %mul111 = mul nsw i32 %sub110, 2
  %add112 = add nsw i32 %mul111, 1
  %sub113 = sub nsw i32 %sub102, %add112
  br label %cond.end.121

cond.false.114:                                   ; preds = %cond.false.83
  %20 = load i64, i64* %length, align 8
  %mul115 = mul nsw i64 2, %20
  %conv116 = trunc i64 %mul115 to i8
  %conv117 = sext i8 %conv116 to i32
  %add118 = add nsw i32 0, %conv117
  %mul119 = mul nsw i32 0, %add118
  %add120 = add nsw i32 %mul119, 0
  br label %cond.end.121

cond.end.121:                                     ; preds = %cond.false.114, %cond.true.92
  %cond122 = phi i32 [ %sub113, %cond.true.92 ], [ %add120, %cond.false.114 ]
  %div123 = sdiv i32 %cond122, 8
  %21 = load i64, i64* %length, align 8
  %mul124 = mul nsw i64 2, %21
  %conv125 = trunc i64 %mul124 to i8
  %conv126 = sext i8 %conv125 to i32
  %cmp127 = icmp slt i32 %div123, %conv126
  br i1 %cmp127, label %cond.true.241, label %lor.lhs.false.218

cond.false.129:                                   ; preds = %lor.lhs.false
  br i1 false, label %cond.true.130, label %cond.false.131

cond.true.130:                                    ; preds = %cond.false.129
  br i1 false, label %cond.true.241, label %lor.lhs.false.218

cond.false.131:                                   ; preds = %cond.false.129
  %22 = load i64, i64* %length, align 8
  %mul132 = mul nsw i64 2, %22
  %conv133 = trunc i64 %mul132 to i8
  %conv134 = sext i8 %conv133 to i32
  %cmp135 = icmp slt i32 %conv134, 0
  br i1 %cmp135, label %cond.true.137, label %cond.false.183

cond.true.137:                                    ; preds = %cond.false.131
  %23 = load i64, i64* %length, align 8
  %mul138 = mul nsw i64 2, %23
  %conv139 = trunc i64 %mul138 to i8
  %conv140 = sext i8 %conv139 to i32
  %24 = load i64, i64* %length, align 8
  %mul141 = mul nsw i64 2, %24
  %conv142 = trunc i64 %mul141 to i8
  %conv143 = sext i8 %conv142 to i32
  %add144 = add nsw i32 0, %conv143
  %mul145 = mul nsw i32 0, %add144
  %sub146 = sub nsw i32 %mul145, 1
  %cmp147 = icmp slt i32 %sub146, 0
  br i1 %cmp147, label %cond.true.149, label %cond.false.171

cond.true.149:                                    ; preds = %cond.true.137
  %25 = load i64, i64* %length, align 8
  %mul150 = mul nsw i64 2, %25
  %conv151 = trunc i64 %mul150 to i8
  %conv152 = sext i8 %conv151 to i32
  %add153 = add nsw i32 0, %conv152
  %mul154 = mul nsw i32 0, %add153
  %add155 = add nsw i32 %mul154, 0
  %neg156 = xor i32 %add155, -1
  %cmp157 = icmp eq i32 %neg156, -1
  %conv158 = zext i1 %cmp157 to i32
  %sub159 = sub nsw i32 0, %conv158
  %26 = load i64, i64* %length, align 8
  %mul160 = mul nsw i64 2, %26
  %conv161 = trunc i64 %mul160 to i8
  %conv162 = sext i8 %conv161 to i32
  %add163 = add nsw i32 0, %conv162
  %mul164 = mul nsw i32 0, %add163
  %add165 = add nsw i32 %mul164, 1
  %shl166 = shl i32 %add165, 30
  %sub167 = sub nsw i32 %shl166, 1
  %mul168 = mul nsw i32 %sub167, 2
  %add169 = add nsw i32 %mul168, 1
  %sub170 = sub nsw i32 %sub159, %add169
  br label %cond.end.178

cond.false.171:                                   ; preds = %cond.true.137
  %27 = load i64, i64* %length, align 8
  %mul172 = mul nsw i64 2, %27
  %conv173 = trunc i64 %mul172 to i8
  %conv174 = sext i8 %conv173 to i32
  %add175 = add nsw i32 0, %conv174
  %mul176 = mul nsw i32 0, %add175
  %add177 = add nsw i32 %mul176, 0
  br label %cond.end.178

cond.end.178:                                     ; preds = %cond.false.171, %cond.true.149
  %cond179 = phi i32 [ %sub170, %cond.true.149 ], [ %add177, %cond.false.171 ]
  %div180 = sdiv i32 %cond179, 8
  %cmp181 = icmp slt i32 %conv140, %div180
  br i1 %cmp181, label %cond.true.241, label %lor.lhs.false.218

cond.false.183:                                   ; preds = %cond.false.131
  %28 = load i64, i64* %length, align 8
  %mul184 = mul nsw i64 2, %28
  %conv185 = trunc i64 %mul184 to i8
  %conv186 = sext i8 %conv185 to i32
  %add187 = add nsw i32 0, %conv186
  %mul188 = mul nsw i32 0, %add187
  %sub189 = sub nsw i32 %mul188, 1
  %cmp190 = icmp slt i32 %sub189, 0
  br i1 %cmp190, label %cond.true.192, label %cond.false.203

cond.true.192:                                    ; preds = %cond.false.183
  %29 = load i64, i64* %length, align 8
  %mul193 = mul nsw i64 2, %29
  %conv194 = trunc i64 %mul193 to i8
  %conv195 = sext i8 %conv194 to i32
  %add196 = add nsw i32 0, %conv195
  %mul197 = mul nsw i32 0, %add196
  %add198 = add nsw i32 %mul197, 1
  %shl199 = shl i32 %add198, 30
  %sub200 = sub nsw i32 %shl199, 1
  %mul201 = mul nsw i32 %sub200, 2
  %add202 = add nsw i32 %mul201, 1
  br label %cond.end.210

cond.false.203:                                   ; preds = %cond.false.183
  %30 = load i64, i64* %length, align 8
  %mul204 = mul nsw i64 2, %30
  %conv205 = trunc i64 %mul204 to i8
  %conv206 = sext i8 %conv205 to i32
  %add207 = add nsw i32 0, %conv206
  %mul208 = mul nsw i32 0, %add207
  %sub209 = sub nsw i32 %mul208, 1
  br label %cond.end.210

cond.end.210:                                     ; preds = %cond.false.203, %cond.true.192
  %cond211 = phi i32 [ %add202, %cond.true.192 ], [ %sub209, %cond.false.203 ]
  %div212 = sdiv i32 %cond211, 8
  %31 = load i64, i64* %length, align 8
  %mul213 = mul nsw i64 2, %31
  %conv214 = trunc i64 %mul213 to i8
  %conv215 = sext i8 %conv214 to i32
  %cmp216 = icmp slt i32 %div212, %conv215
  br i1 %cmp216, label %cond.true.241, label %lor.lhs.false.218

lor.lhs.false.218:                                ; preds = %cond.end.210, %cond.end.178, %cond.true.130, %cond.end.121, %cond.true.82, %cond.end.77
  %32 = load i64, i64* %length, align 8
  %mul219 = mul nsw i64 2, %32
  %conv220 = trunc i64 %mul219 to i8
  %conv221 = sext i8 %conv220 to i32
  %mul222 = mul nsw i32 %conv221, 8
  %mul223 = mul nsw i32 0, %mul222
  %sub224 = sub nsw i32 %mul223, 1
  %cmp225 = icmp slt i32 %sub224, 0
  br i1 %cmp225, label %land.lhs.true.227, label %lor.lhs.false.234

land.lhs.true.227:                                ; preds = %lor.lhs.false.218
  %33 = load i64, i64* %length, align 8
  %mul228 = mul nsw i64 2, %33
  %conv229 = trunc i64 %mul228 to i8
  %conv230 = sext i8 %conv229 to i32
  %mul231 = mul nsw i32 %conv230, 8
  %cmp232 = icmp slt i32 %mul231, -128
  br i1 %cmp232, label %cond.true.241, label %lor.lhs.false.234

lor.lhs.false.234:                                ; preds = %land.lhs.true.227, %lor.lhs.false.218
  %34 = load i64, i64* %length, align 8
  %mul235 = mul nsw i64 2, %34
  %conv236 = trunc i64 %mul235 to i8
  %conv237 = sext i8 %conv236 to i32
  %mul238 = mul nsw i32 %conv237, 8
  %cmp239 = icmp slt i32 127, %mul238
  br i1 %cmp239, label %cond.true.241, label %cond.false.267

cond.true.241:                                    ; preds = %lor.lhs.false.234, %land.lhs.true.227, %cond.end.210, %cond.end.178, %cond.true.130, %cond.end.121, %cond.true.82, %cond.end.77, %land.lhs.true
  %35 = load i64, i64* %length, align 8
  %mul242 = mul nsw i64 2, %35
  %conv243 = trunc i64 %mul242 to i8
  %conv244 = zext i8 %conv243 to i32
  %mul245 = mul nsw i32 %conv244, 8
  %cmp246 = icmp sle i32 %mul245, 127
  br i1 %cmp246, label %cond.true.248, label %cond.false.255

cond.true.248:                                    ; preds = %cond.true.241
  %36 = load i64, i64* %length, align 8
  %mul249 = mul nsw i64 2, %36
  %conv250 = trunc i64 %mul249 to i8
  %conv251 = zext i8 %conv250 to i32
  %mul252 = mul nsw i32 %conv251, 8
  %conv253 = trunc i32 %mul252 to i8
  %conv254 = sext i8 %conv253 to i32
  br label %cond.end.264

cond.false.255:                                   ; preds = %cond.true.241
  %37 = load i64, i64* %length, align 8
  %mul256 = mul nsw i64 2, %37
  %conv257 = trunc i64 %mul256 to i8
  %conv258 = zext i8 %conv257 to i32
  %mul259 = mul nsw i32 %conv258, 8
  %sub260 = sub nsw i32 %mul259, -128
  %conv261 = trunc i32 %sub260 to i8
  %conv262 = sext i8 %conv261 to i32
  %add263 = add nsw i32 %conv262, -128
  br label %cond.end.264

cond.end.264:                                     ; preds = %cond.false.255, %cond.true.248
  %cond265 = phi i32 [ %conv254, %cond.true.248 ], [ %add263, %cond.false.255 ]
  %conv266 = sext i32 %cond265 to i64
  store i64 %conv266, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2506, label %lor.lhs.false.2503

cond.false.267:                                   ; preds = %lor.lhs.false.234
  %38 = load i64, i64* %length, align 8
  %mul268 = mul nsw i64 2, %38
  %conv269 = trunc i64 %mul268 to i8
  %conv270 = zext i8 %conv269 to i32
  %mul271 = mul nsw i32 %conv270, 8
  %cmp272 = icmp sle i32 %mul271, 127
  br i1 %cmp272, label %cond.true.274, label %cond.false.281

cond.true.274:                                    ; preds = %cond.false.267
  %39 = load i64, i64* %length, align 8
  %mul275 = mul nsw i64 2, %39
  %conv276 = trunc i64 %mul275 to i8
  %conv277 = zext i8 %conv276 to i32
  %mul278 = mul nsw i32 %conv277, 8
  %conv279 = trunc i32 %mul278 to i8
  %conv280 = sext i8 %conv279 to i32
  br label %cond.end.290

cond.false.281:                                   ; preds = %cond.false.267
  %40 = load i64, i64* %length, align 8
  %mul282 = mul nsw i64 2, %40
  %conv283 = trunc i64 %mul282 to i8
  %conv284 = zext i8 %conv283 to i32
  %mul285 = mul nsw i32 %conv284, 8
  %sub286 = sub nsw i32 %mul285, -128
  %conv287 = trunc i32 %sub286 to i8
  %conv288 = sext i8 %conv287 to i32
  %add289 = add nsw i32 %conv288, -128
  br label %cond.end.290

cond.end.290:                                     ; preds = %cond.false.281, %cond.true.274
  %cond291 = phi i32 [ %conv280, %cond.true.274 ], [ %add289, %cond.false.281 ]
  %conv292 = sext i32 %cond291 to i64
  store i64 %conv292, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2506, label %lor.lhs.false.2503

cond.false.293:                                   ; preds = %cond.true
  %41 = load i64, i64* %length, align 8
  %mul294 = mul nsw i64 2, %41
  %add295 = add nsw i64 0, %mul294
  %mul296 = mul nsw i64 0, %add295
  %sub297 = sub nsw i64 %mul296, 1
  %cmp298 = icmp slt i64 %sub297, 0
  br i1 %cmp298, label %cond.true.300, label %cond.false.319

cond.true.300:                                    ; preds = %cond.false.293
  %42 = load i64, i64* %length, align 8
  %mul301 = mul nsw i64 2, %42
  %add302 = add nsw i64 0, %mul301
  %mul303 = mul nsw i64 0, %add302
  %add304 = add nsw i64 %mul303, 0
  %neg305 = xor i64 %add304, -1
  %cmp306 = icmp eq i64 %neg305, -1
  %conv307 = zext i1 %cmp306 to i32
  %sub308 = sub nsw i32 0, %conv307
  %conv309 = sext i32 %sub308 to i64
  %43 = load i64, i64* %length, align 8
  %mul310 = mul nsw i64 2, %43
  %add311 = add nsw i64 0, %mul310
  %mul312 = mul nsw i64 0, %add311
  %add313 = add nsw i64 %mul312, 1
  %shl314 = shl i64 %add313, 62
  %sub315 = sub nsw i64 %shl314, 1
  %mul316 = mul nsw i64 %sub315, 2
  %add317 = add nsw i64 %mul316, 1
  %sub318 = sub nsw i64 %conv309, %add317
  br label %cond.end.324

cond.false.319:                                   ; preds = %cond.false.293
  %44 = load i64, i64* %length, align 8
  %mul320 = mul nsw i64 2, %44
  %add321 = add nsw i64 0, %mul320
  %mul322 = mul nsw i64 0, %add321
  %add323 = add nsw i64 %mul322, 0
  br label %cond.end.324

cond.end.324:                                     ; preds = %cond.false.319, %cond.true.300
  %cond325 = phi i64 [ %sub318, %cond.true.300 ], [ %add323, %cond.false.319 ]
  %cmp326 = icmp eq i64 %cond325, 0
  br i1 %cmp326, label %land.lhs.true.328, label %lor.lhs.false.332

land.lhs.true.328:                                ; preds = %cond.end.324
  %45 = load i64, i64* %length, align 8
  %mul329 = mul nsw i64 2, %45
  %cmp330 = icmp slt i64 %mul329, 0
  br i1 %cmp330, label %cond.true.490, label %lor.lhs.false.332

lor.lhs.false.332:                                ; preds = %land.lhs.true.328, %cond.end.324
  br i1 false, label %cond.true.333, label %cond.false.403

cond.true.333:                                    ; preds = %lor.lhs.false.332
  %46 = load i64, i64* %length, align 8
  %mul334 = mul nsw i64 2, %46
  %cmp335 = icmp slt i64 %mul334, 0
  br i1 %cmp335, label %cond.true.337, label %cond.false.364

cond.true.337:                                    ; preds = %cond.true.333
  %47 = load i64, i64* %length, align 8
  %mul338 = mul nsw i64 2, %47
  %48 = load i64, i64* %length, align 8
  %mul339 = mul nsw i64 2, %48
  %add340 = add nsw i64 0, %mul339
  %mul341 = mul nsw i64 0, %add340
  %sub342 = sub nsw i64 %mul341, 1
  %cmp343 = icmp slt i64 %sub342, 0
  br i1 %cmp343, label %cond.true.345, label %cond.false.354

cond.true.345:                                    ; preds = %cond.true.337
  %49 = load i64, i64* %length, align 8
  %mul346 = mul nsw i64 2, %49
  %add347 = add nsw i64 0, %mul346
  %mul348 = mul nsw i64 0, %add347
  %add349 = add nsw i64 %mul348, 1
  %shl350 = shl i64 %add349, 62
  %sub351 = sub nsw i64 %shl350, 1
  %mul352 = mul nsw i64 %sub351, 2
  %add353 = add nsw i64 %mul352, 1
  br label %cond.end.359

cond.false.354:                                   ; preds = %cond.true.337
  %50 = load i64, i64* %length, align 8
  %mul355 = mul nsw i64 2, %50
  %add356 = add nsw i64 0, %mul355
  %mul357 = mul nsw i64 0, %add356
  %sub358 = sub nsw i64 %mul357, 1
  br label %cond.end.359

cond.end.359:                                     ; preds = %cond.false.354, %cond.true.345
  %cond360 = phi i64 [ %add353, %cond.true.345 ], [ %sub358, %cond.false.354 ]
  %div361 = sdiv i64 %cond360, 8
  %cmp362 = icmp slt i64 %mul338, %div361
  br i1 %cmp362, label %cond.true.490, label %lor.lhs.false.473

cond.false.364:                                   ; preds = %cond.true.333
  br i1 false, label %cond.true.365, label %cond.false.366

cond.true.365:                                    ; preds = %cond.false.364
  br i1 false, label %cond.true.490, label %lor.lhs.false.473

cond.false.366:                                   ; preds = %cond.false.364
  %51 = load i64, i64* %length, align 8
  %mul367 = mul nsw i64 2, %51
  %add368 = add nsw i64 0, %mul367
  %mul369 = mul nsw i64 0, %add368
  %sub370 = sub nsw i64 %mul369, 1
  %cmp371 = icmp slt i64 %sub370, 0
  br i1 %cmp371, label %cond.true.373, label %cond.false.392

cond.true.373:                                    ; preds = %cond.false.366
  %52 = load i64, i64* %length, align 8
  %mul374 = mul nsw i64 2, %52
  %add375 = add nsw i64 0, %mul374
  %mul376 = mul nsw i64 0, %add375
  %add377 = add nsw i64 %mul376, 0
  %neg378 = xor i64 %add377, -1
  %cmp379 = icmp eq i64 %neg378, -1
  %conv380 = zext i1 %cmp379 to i32
  %sub381 = sub nsw i32 0, %conv380
  %conv382 = sext i32 %sub381 to i64
  %53 = load i64, i64* %length, align 8
  %mul383 = mul nsw i64 2, %53
  %add384 = add nsw i64 0, %mul383
  %mul385 = mul nsw i64 0, %add384
  %add386 = add nsw i64 %mul385, 1
  %shl387 = shl i64 %add386, 62
  %sub388 = sub nsw i64 %shl387, 1
  %mul389 = mul nsw i64 %sub388, 2
  %add390 = add nsw i64 %mul389, 1
  %sub391 = sub nsw i64 %conv382, %add390
  br label %cond.end.397

cond.false.392:                                   ; preds = %cond.false.366
  %54 = load i64, i64* %length, align 8
  %mul393 = mul nsw i64 2, %54
  %add394 = add nsw i64 0, %mul393
  %mul395 = mul nsw i64 0, %add394
  %add396 = add nsw i64 %mul395, 0
  br label %cond.end.397

cond.end.397:                                     ; preds = %cond.false.392, %cond.true.373
  %cond398 = phi i64 [ %sub391, %cond.true.373 ], [ %add396, %cond.false.392 ]
  %div399 = sdiv i64 %cond398, 8
  %55 = load i64, i64* %length, align 8
  %mul400 = mul nsw i64 2, %55
  %cmp401 = icmp slt i64 %div399, %mul400
  br i1 %cmp401, label %cond.true.490, label %lor.lhs.false.473

cond.false.403:                                   ; preds = %lor.lhs.false.332
  br i1 false, label %cond.true.404, label %cond.false.405

cond.true.404:                                    ; preds = %cond.false.403
  br i1 false, label %cond.true.490, label %lor.lhs.false.473

cond.false.405:                                   ; preds = %cond.false.403
  %56 = load i64, i64* %length, align 8
  %mul406 = mul nsw i64 2, %56
  %cmp407 = icmp slt i64 %mul406, 0
  br i1 %cmp407, label %cond.true.409, label %cond.false.446

cond.true.409:                                    ; preds = %cond.false.405
  %57 = load i64, i64* %length, align 8
  %mul410 = mul nsw i64 2, %57
  %58 = load i64, i64* %length, align 8
  %mul411 = mul nsw i64 2, %58
  %add412 = add nsw i64 0, %mul411
  %mul413 = mul nsw i64 0, %add412
  %sub414 = sub nsw i64 %mul413, 1
  %cmp415 = icmp slt i64 %sub414, 0
  br i1 %cmp415, label %cond.true.417, label %cond.false.436

cond.true.417:                                    ; preds = %cond.true.409
  %59 = load i64, i64* %length, align 8
  %mul418 = mul nsw i64 2, %59
  %add419 = add nsw i64 0, %mul418
  %mul420 = mul nsw i64 0, %add419
  %add421 = add nsw i64 %mul420, 0
  %neg422 = xor i64 %add421, -1
  %cmp423 = icmp eq i64 %neg422, -1
  %conv424 = zext i1 %cmp423 to i32
  %sub425 = sub nsw i32 0, %conv424
  %conv426 = sext i32 %sub425 to i64
  %60 = load i64, i64* %length, align 8
  %mul427 = mul nsw i64 2, %60
  %add428 = add nsw i64 0, %mul427
  %mul429 = mul nsw i64 0, %add428
  %add430 = add nsw i64 %mul429, 1
  %shl431 = shl i64 %add430, 62
  %sub432 = sub nsw i64 %shl431, 1
  %mul433 = mul nsw i64 %sub432, 2
  %add434 = add nsw i64 %mul433, 1
  %sub435 = sub nsw i64 %conv426, %add434
  br label %cond.end.441

cond.false.436:                                   ; preds = %cond.true.409
  %61 = load i64, i64* %length, align 8
  %mul437 = mul nsw i64 2, %61
  %add438 = add nsw i64 0, %mul437
  %mul439 = mul nsw i64 0, %add438
  %add440 = add nsw i64 %mul439, 0
  br label %cond.end.441

cond.end.441:                                     ; preds = %cond.false.436, %cond.true.417
  %cond442 = phi i64 [ %sub435, %cond.true.417 ], [ %add440, %cond.false.436 ]
  %div443 = sdiv i64 %cond442, 8
  %cmp444 = icmp slt i64 %mul410, %div443
  br i1 %cmp444, label %cond.true.490, label %lor.lhs.false.473

cond.false.446:                                   ; preds = %cond.false.405
  %62 = load i64, i64* %length, align 8
  %mul447 = mul nsw i64 2, %62
  %add448 = add nsw i64 0, %mul447
  %mul449 = mul nsw i64 0, %add448
  %sub450 = sub nsw i64 %mul449, 1
  %cmp451 = icmp slt i64 %sub450, 0
  br i1 %cmp451, label %cond.true.453, label %cond.false.462

cond.true.453:                                    ; preds = %cond.false.446
  %63 = load i64, i64* %length, align 8
  %mul454 = mul nsw i64 2, %63
  %add455 = add nsw i64 0, %mul454
  %mul456 = mul nsw i64 0, %add455
  %add457 = add nsw i64 %mul456, 1
  %shl458 = shl i64 %add457, 62
  %sub459 = sub nsw i64 %shl458, 1
  %mul460 = mul nsw i64 %sub459, 2
  %add461 = add nsw i64 %mul460, 1
  br label %cond.end.467

cond.false.462:                                   ; preds = %cond.false.446
  %64 = load i64, i64* %length, align 8
  %mul463 = mul nsw i64 2, %64
  %add464 = add nsw i64 0, %mul463
  %mul465 = mul nsw i64 0, %add464
  %sub466 = sub nsw i64 %mul465, 1
  br label %cond.end.467

cond.end.467:                                     ; preds = %cond.false.462, %cond.true.453
  %cond468 = phi i64 [ %add461, %cond.true.453 ], [ %sub466, %cond.false.462 ]
  %div469 = sdiv i64 %cond468, 8
  %65 = load i64, i64* %length, align 8
  %mul470 = mul nsw i64 2, %65
  %cmp471 = icmp slt i64 %div469, %mul470
  br i1 %cmp471, label %cond.true.490, label %lor.lhs.false.473

lor.lhs.false.473:                                ; preds = %cond.end.467, %cond.end.441, %cond.true.404, %cond.end.397, %cond.true.365, %cond.end.359
  %66 = load i64, i64* %length, align 8
  %mul474 = mul nsw i64 2, %66
  %mul475 = mul nsw i64 %mul474, 8
  %mul476 = mul nsw i64 0, %mul475
  %sub477 = sub nsw i64 %mul476, 1
  %cmp478 = icmp slt i64 %sub477, 0
  br i1 %cmp478, label %land.lhs.true.480, label %lor.lhs.false.485

land.lhs.true.480:                                ; preds = %lor.lhs.false.473
  %67 = load i64, i64* %length, align 8
  %mul481 = mul nsw i64 2, %67
  %mul482 = mul nsw i64 %mul481, 8
  %cmp483 = icmp slt i64 %mul482, -128
  br i1 %cmp483, label %cond.true.490, label %lor.lhs.false.485

lor.lhs.false.485:                                ; preds = %land.lhs.true.480, %lor.lhs.false.473
  %68 = load i64, i64* %length, align 8
  %mul486 = mul nsw i64 2, %68
  %mul487 = mul nsw i64 %mul486, 8
  %cmp488 = icmp slt i64 127, %mul487
  br i1 %cmp488, label %cond.true.490, label %cond.false.516

cond.true.490:                                    ; preds = %lor.lhs.false.485, %land.lhs.true.480, %cond.end.467, %cond.end.441, %cond.true.404, %cond.end.397, %cond.true.365, %cond.end.359, %land.lhs.true.328
  %69 = load i64, i64* %length, align 8
  %mul491 = mul nsw i64 2, %69
  %conv492 = trunc i64 %mul491 to i8
  %conv493 = zext i8 %conv492 to i32
  %mul494 = mul nsw i32 %conv493, 8
  %cmp495 = icmp sle i32 %mul494, 127
  br i1 %cmp495, label %cond.true.497, label %cond.false.504

cond.true.497:                                    ; preds = %cond.true.490
  %70 = load i64, i64* %length, align 8
  %mul498 = mul nsw i64 2, %70
  %conv499 = trunc i64 %mul498 to i8
  %conv500 = zext i8 %conv499 to i32
  %mul501 = mul nsw i32 %conv500, 8
  %conv502 = trunc i32 %mul501 to i8
  %conv503 = sext i8 %conv502 to i32
  br label %cond.end.513

cond.false.504:                                   ; preds = %cond.true.490
  %71 = load i64, i64* %length, align 8
  %mul505 = mul nsw i64 2, %71
  %conv506 = trunc i64 %mul505 to i8
  %conv507 = zext i8 %conv506 to i32
  %mul508 = mul nsw i32 %conv507, 8
  %sub509 = sub nsw i32 %mul508, -128
  %conv510 = trunc i32 %sub509 to i8
  %conv511 = sext i8 %conv510 to i32
  %add512 = add nsw i32 %conv511, -128
  br label %cond.end.513

cond.end.513:                                     ; preds = %cond.false.504, %cond.true.497
  %cond514 = phi i32 [ %conv503, %cond.true.497 ], [ %add512, %cond.false.504 ]
  %conv515 = sext i32 %cond514 to i64
  store i64 %conv515, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2506, label %lor.lhs.false.2503

cond.false.516:                                   ; preds = %lor.lhs.false.485
  %72 = load i64, i64* %length, align 8
  %mul517 = mul nsw i64 2, %72
  %conv518 = trunc i64 %mul517 to i8
  %conv519 = zext i8 %conv518 to i32
  %mul520 = mul nsw i32 %conv519, 8
  %cmp521 = icmp sle i32 %mul520, 127
  br i1 %cmp521, label %cond.true.523, label %cond.false.530

cond.true.523:                                    ; preds = %cond.false.516
  %73 = load i64, i64* %length, align 8
  %mul524 = mul nsw i64 2, %73
  %conv525 = trunc i64 %mul524 to i8
  %conv526 = zext i8 %conv525 to i32
  %mul527 = mul nsw i32 %conv526, 8
  %conv528 = trunc i32 %mul527 to i8
  %conv529 = sext i8 %conv528 to i32
  br label %cond.end.539

cond.false.530:                                   ; preds = %cond.false.516
  %74 = load i64, i64* %length, align 8
  %mul531 = mul nsw i64 2, %74
  %conv532 = trunc i64 %mul531 to i8
  %conv533 = zext i8 %conv532 to i32
  %mul534 = mul nsw i32 %conv533, 8
  %sub535 = sub nsw i32 %mul534, -128
  %conv536 = trunc i32 %sub535 to i8
  %conv537 = sext i8 %conv536 to i32
  %add538 = add nsw i32 %conv537, -128
  br label %cond.end.539

cond.end.539:                                     ; preds = %cond.false.530, %cond.true.523
  %cond540 = phi i32 [ %conv529, %cond.true.523 ], [ %add538, %cond.false.530 ]
  %conv541 = sext i32 %cond540 to i64
  store i64 %conv541, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2506, label %lor.lhs.false.2503

cond.false.542:                                   ; preds = %do.body
  br i1 false, label %cond.true.543, label %cond.false.1095

cond.true.543:                                    ; preds = %cond.false.542
  br i1 false, label %cond.true.544, label %cond.false.846

cond.true.544:                                    ; preds = %cond.true.543
  %75 = load i64, i64* %length, align 8
  %mul545 = mul nsw i64 2, %75
  %conv546 = trunc i64 %mul545 to i16
  %conv547 = sext i16 %conv546 to i32
  %add548 = add nsw i32 0, %conv547
  %mul549 = mul nsw i32 0, %add548
  %sub550 = sub nsw i32 %mul549, 1
  %cmp551 = icmp slt i32 %sub550, 0
  br i1 %cmp551, label %cond.true.553, label %cond.false.575

cond.true.553:                                    ; preds = %cond.true.544
  %76 = load i64, i64* %length, align 8
  %mul554 = mul nsw i64 2, %76
  %conv555 = trunc i64 %mul554 to i16
  %conv556 = sext i16 %conv555 to i32
  %add557 = add nsw i32 0, %conv556
  %mul558 = mul nsw i32 0, %add557
  %add559 = add nsw i32 %mul558, 0
  %neg560 = xor i32 %add559, -1
  %cmp561 = icmp eq i32 %neg560, -1
  %conv562 = zext i1 %cmp561 to i32
  %sub563 = sub nsw i32 0, %conv562
  %77 = load i64, i64* %length, align 8
  %mul564 = mul nsw i64 2, %77
  %conv565 = trunc i64 %mul564 to i16
  %conv566 = sext i16 %conv565 to i32
  %add567 = add nsw i32 0, %conv566
  %mul568 = mul nsw i32 0, %add567
  %add569 = add nsw i32 %mul568, 1
  %shl570 = shl i32 %add569, 30
  %sub571 = sub nsw i32 %shl570, 1
  %mul572 = mul nsw i32 %sub571, 2
  %add573 = add nsw i32 %mul572, 1
  %sub574 = sub nsw i32 %sub563, %add573
  br label %cond.end.582

cond.false.575:                                   ; preds = %cond.true.544
  %78 = load i64, i64* %length, align 8
  %mul576 = mul nsw i64 2, %78
  %conv577 = trunc i64 %mul576 to i16
  %conv578 = sext i16 %conv577 to i32
  %add579 = add nsw i32 0, %conv578
  %mul580 = mul nsw i32 0, %add579
  %add581 = add nsw i32 %mul580, 0
  br label %cond.end.582

cond.end.582:                                     ; preds = %cond.false.575, %cond.true.553
  %cond583 = phi i32 [ %sub574, %cond.true.553 ], [ %add581, %cond.false.575 ]
  %cmp584 = icmp eq i32 %cond583, 0
  br i1 %cmp584, label %land.lhs.true.586, label %lor.lhs.false.592

land.lhs.true.586:                                ; preds = %cond.end.582
  %79 = load i64, i64* %length, align 8
  %mul587 = mul nsw i64 2, %79
  %conv588 = trunc i64 %mul587 to i16
  %conv589 = sext i16 %conv588 to i32
  %cmp590 = icmp slt i32 %conv589, 0
  br i1 %cmp590, label %cond.true.794, label %lor.lhs.false.592

lor.lhs.false.592:                                ; preds = %land.lhs.true.586, %cond.end.582
  br i1 false, label %cond.true.593, label %cond.false.682

cond.true.593:                                    ; preds = %lor.lhs.false.592
  %80 = load i64, i64* %length, align 8
  %mul594 = mul nsw i64 2, %80
  %conv595 = trunc i64 %mul594 to i16
  %conv596 = sext i16 %conv595 to i32
  %cmp597 = icmp slt i32 %conv596, 0
  br i1 %cmp597, label %cond.true.599, label %cond.false.634

cond.true.599:                                    ; preds = %cond.true.593
  %81 = load i64, i64* %length, align 8
  %mul600 = mul nsw i64 2, %81
  %conv601 = trunc i64 %mul600 to i16
  %conv602 = sext i16 %conv601 to i32
  %82 = load i64, i64* %length, align 8
  %mul603 = mul nsw i64 2, %82
  %conv604 = trunc i64 %mul603 to i16
  %conv605 = sext i16 %conv604 to i32
  %add606 = add nsw i32 0, %conv605
  %mul607 = mul nsw i32 0, %add606
  %sub608 = sub nsw i32 %mul607, 1
  %cmp609 = icmp slt i32 %sub608, 0
  br i1 %cmp609, label %cond.true.611, label %cond.false.622

cond.true.611:                                    ; preds = %cond.true.599
  %83 = load i64, i64* %length, align 8
  %mul612 = mul nsw i64 2, %83
  %conv613 = trunc i64 %mul612 to i16
  %conv614 = sext i16 %conv613 to i32
  %add615 = add nsw i32 0, %conv614
  %mul616 = mul nsw i32 0, %add615
  %add617 = add nsw i32 %mul616, 1
  %shl618 = shl i32 %add617, 30
  %sub619 = sub nsw i32 %shl618, 1
  %mul620 = mul nsw i32 %sub619, 2
  %add621 = add nsw i32 %mul620, 1
  br label %cond.end.629

cond.false.622:                                   ; preds = %cond.true.599
  %84 = load i64, i64* %length, align 8
  %mul623 = mul nsw i64 2, %84
  %conv624 = trunc i64 %mul623 to i16
  %conv625 = sext i16 %conv624 to i32
  %add626 = add nsw i32 0, %conv625
  %mul627 = mul nsw i32 0, %add626
  %sub628 = sub nsw i32 %mul627, 1
  br label %cond.end.629

cond.end.629:                                     ; preds = %cond.false.622, %cond.true.611
  %cond630 = phi i32 [ %add621, %cond.true.611 ], [ %sub628, %cond.false.622 ]
  %div631 = sdiv i32 %cond630, 8
  %cmp632 = icmp slt i32 %conv602, %div631
  br i1 %cmp632, label %cond.true.794, label %lor.lhs.false.771

cond.false.634:                                   ; preds = %cond.true.593
  br i1 false, label %cond.true.635, label %cond.false.636

cond.true.635:                                    ; preds = %cond.false.634
  br i1 false, label %cond.true.794, label %lor.lhs.false.771

cond.false.636:                                   ; preds = %cond.false.634
  %85 = load i64, i64* %length, align 8
  %mul637 = mul nsw i64 2, %85
  %conv638 = trunc i64 %mul637 to i16
  %conv639 = sext i16 %conv638 to i32
  %add640 = add nsw i32 0, %conv639
  %mul641 = mul nsw i32 0, %add640
  %sub642 = sub nsw i32 %mul641, 1
  %cmp643 = icmp slt i32 %sub642, 0
  br i1 %cmp643, label %cond.true.645, label %cond.false.667

cond.true.645:                                    ; preds = %cond.false.636
  %86 = load i64, i64* %length, align 8
  %mul646 = mul nsw i64 2, %86
  %conv647 = trunc i64 %mul646 to i16
  %conv648 = sext i16 %conv647 to i32
  %add649 = add nsw i32 0, %conv648
  %mul650 = mul nsw i32 0, %add649
  %add651 = add nsw i32 %mul650, 0
  %neg652 = xor i32 %add651, -1
  %cmp653 = icmp eq i32 %neg652, -1
  %conv654 = zext i1 %cmp653 to i32
  %sub655 = sub nsw i32 0, %conv654
  %87 = load i64, i64* %length, align 8
  %mul656 = mul nsw i64 2, %87
  %conv657 = trunc i64 %mul656 to i16
  %conv658 = sext i16 %conv657 to i32
  %add659 = add nsw i32 0, %conv658
  %mul660 = mul nsw i32 0, %add659
  %add661 = add nsw i32 %mul660, 1
  %shl662 = shl i32 %add661, 30
  %sub663 = sub nsw i32 %shl662, 1
  %mul664 = mul nsw i32 %sub663, 2
  %add665 = add nsw i32 %mul664, 1
  %sub666 = sub nsw i32 %sub655, %add665
  br label %cond.end.674

cond.false.667:                                   ; preds = %cond.false.636
  %88 = load i64, i64* %length, align 8
  %mul668 = mul nsw i64 2, %88
  %conv669 = trunc i64 %mul668 to i16
  %conv670 = sext i16 %conv669 to i32
  %add671 = add nsw i32 0, %conv670
  %mul672 = mul nsw i32 0, %add671
  %add673 = add nsw i32 %mul672, 0
  br label %cond.end.674

cond.end.674:                                     ; preds = %cond.false.667, %cond.true.645
  %cond675 = phi i32 [ %sub666, %cond.true.645 ], [ %add673, %cond.false.667 ]
  %div676 = sdiv i32 %cond675, 8
  %89 = load i64, i64* %length, align 8
  %mul677 = mul nsw i64 2, %89
  %conv678 = trunc i64 %mul677 to i16
  %conv679 = sext i16 %conv678 to i32
  %cmp680 = icmp slt i32 %div676, %conv679
  br i1 %cmp680, label %cond.true.794, label %lor.lhs.false.771

cond.false.682:                                   ; preds = %lor.lhs.false.592
  br i1 false, label %cond.true.683, label %cond.false.684

cond.true.683:                                    ; preds = %cond.false.682
  br i1 false, label %cond.true.794, label %lor.lhs.false.771

cond.false.684:                                   ; preds = %cond.false.682
  %90 = load i64, i64* %length, align 8
  %mul685 = mul nsw i64 2, %90
  %conv686 = trunc i64 %mul685 to i16
  %conv687 = sext i16 %conv686 to i32
  %cmp688 = icmp slt i32 %conv687, 0
  br i1 %cmp688, label %cond.true.690, label %cond.false.736

cond.true.690:                                    ; preds = %cond.false.684
  %91 = load i64, i64* %length, align 8
  %mul691 = mul nsw i64 2, %91
  %conv692 = trunc i64 %mul691 to i16
  %conv693 = sext i16 %conv692 to i32
  %92 = load i64, i64* %length, align 8
  %mul694 = mul nsw i64 2, %92
  %conv695 = trunc i64 %mul694 to i16
  %conv696 = sext i16 %conv695 to i32
  %add697 = add nsw i32 0, %conv696
  %mul698 = mul nsw i32 0, %add697
  %sub699 = sub nsw i32 %mul698, 1
  %cmp700 = icmp slt i32 %sub699, 0
  br i1 %cmp700, label %cond.true.702, label %cond.false.724

cond.true.702:                                    ; preds = %cond.true.690
  %93 = load i64, i64* %length, align 8
  %mul703 = mul nsw i64 2, %93
  %conv704 = trunc i64 %mul703 to i16
  %conv705 = sext i16 %conv704 to i32
  %add706 = add nsw i32 0, %conv705
  %mul707 = mul nsw i32 0, %add706
  %add708 = add nsw i32 %mul707, 0
  %neg709 = xor i32 %add708, -1
  %cmp710 = icmp eq i32 %neg709, -1
  %conv711 = zext i1 %cmp710 to i32
  %sub712 = sub nsw i32 0, %conv711
  %94 = load i64, i64* %length, align 8
  %mul713 = mul nsw i64 2, %94
  %conv714 = trunc i64 %mul713 to i16
  %conv715 = sext i16 %conv714 to i32
  %add716 = add nsw i32 0, %conv715
  %mul717 = mul nsw i32 0, %add716
  %add718 = add nsw i32 %mul717, 1
  %shl719 = shl i32 %add718, 30
  %sub720 = sub nsw i32 %shl719, 1
  %mul721 = mul nsw i32 %sub720, 2
  %add722 = add nsw i32 %mul721, 1
  %sub723 = sub nsw i32 %sub712, %add722
  br label %cond.end.731

cond.false.724:                                   ; preds = %cond.true.690
  %95 = load i64, i64* %length, align 8
  %mul725 = mul nsw i64 2, %95
  %conv726 = trunc i64 %mul725 to i16
  %conv727 = sext i16 %conv726 to i32
  %add728 = add nsw i32 0, %conv727
  %mul729 = mul nsw i32 0, %add728
  %add730 = add nsw i32 %mul729, 0
  br label %cond.end.731

cond.end.731:                                     ; preds = %cond.false.724, %cond.true.702
  %cond732 = phi i32 [ %sub723, %cond.true.702 ], [ %add730, %cond.false.724 ]
  %div733 = sdiv i32 %cond732, 8
  %cmp734 = icmp slt i32 %conv693, %div733
  br i1 %cmp734, label %cond.true.794, label %lor.lhs.false.771

cond.false.736:                                   ; preds = %cond.false.684
  %96 = load i64, i64* %length, align 8
  %mul737 = mul nsw i64 2, %96
  %conv738 = trunc i64 %mul737 to i16
  %conv739 = sext i16 %conv738 to i32
  %add740 = add nsw i32 0, %conv739
  %mul741 = mul nsw i32 0, %add740
  %sub742 = sub nsw i32 %mul741, 1
  %cmp743 = icmp slt i32 %sub742, 0
  br i1 %cmp743, label %cond.true.745, label %cond.false.756

cond.true.745:                                    ; preds = %cond.false.736
  %97 = load i64, i64* %length, align 8
  %mul746 = mul nsw i64 2, %97
  %conv747 = trunc i64 %mul746 to i16
  %conv748 = sext i16 %conv747 to i32
  %add749 = add nsw i32 0, %conv748
  %mul750 = mul nsw i32 0, %add749
  %add751 = add nsw i32 %mul750, 1
  %shl752 = shl i32 %add751, 30
  %sub753 = sub nsw i32 %shl752, 1
  %mul754 = mul nsw i32 %sub753, 2
  %add755 = add nsw i32 %mul754, 1
  br label %cond.end.763

cond.false.756:                                   ; preds = %cond.false.736
  %98 = load i64, i64* %length, align 8
  %mul757 = mul nsw i64 2, %98
  %conv758 = trunc i64 %mul757 to i16
  %conv759 = sext i16 %conv758 to i32
  %add760 = add nsw i32 0, %conv759
  %mul761 = mul nsw i32 0, %add760
  %sub762 = sub nsw i32 %mul761, 1
  br label %cond.end.763

cond.end.763:                                     ; preds = %cond.false.756, %cond.true.745
  %cond764 = phi i32 [ %add755, %cond.true.745 ], [ %sub762, %cond.false.756 ]
  %div765 = sdiv i32 %cond764, 8
  %99 = load i64, i64* %length, align 8
  %mul766 = mul nsw i64 2, %99
  %conv767 = trunc i64 %mul766 to i16
  %conv768 = sext i16 %conv767 to i32
  %cmp769 = icmp slt i32 %div765, %conv768
  br i1 %cmp769, label %cond.true.794, label %lor.lhs.false.771

lor.lhs.false.771:                                ; preds = %cond.end.763, %cond.end.731, %cond.true.683, %cond.end.674, %cond.true.635, %cond.end.629
  %100 = load i64, i64* %length, align 8
  %mul772 = mul nsw i64 2, %100
  %conv773 = trunc i64 %mul772 to i16
  %conv774 = sext i16 %conv773 to i32
  %mul775 = mul nsw i32 %conv774, 8
  %mul776 = mul nsw i32 0, %mul775
  %sub777 = sub nsw i32 %mul776, 1
  %cmp778 = icmp slt i32 %sub777, 0
  br i1 %cmp778, label %land.lhs.true.780, label %lor.lhs.false.787

land.lhs.true.780:                                ; preds = %lor.lhs.false.771
  %101 = load i64, i64* %length, align 8
  %mul781 = mul nsw i64 2, %101
  %conv782 = trunc i64 %mul781 to i16
  %conv783 = sext i16 %conv782 to i32
  %mul784 = mul nsw i32 %conv783, 8
  %cmp785 = icmp slt i32 %mul784, -32768
  br i1 %cmp785, label %cond.true.794, label %lor.lhs.false.787

lor.lhs.false.787:                                ; preds = %land.lhs.true.780, %lor.lhs.false.771
  %102 = load i64, i64* %length, align 8
  %mul788 = mul nsw i64 2, %102
  %conv789 = trunc i64 %mul788 to i16
  %conv790 = sext i16 %conv789 to i32
  %mul791 = mul nsw i32 %conv790, 8
  %cmp792 = icmp slt i32 32767, %mul791
  br i1 %cmp792, label %cond.true.794, label %cond.false.820

cond.true.794:                                    ; preds = %lor.lhs.false.787, %land.lhs.true.780, %cond.end.763, %cond.end.731, %cond.true.683, %cond.end.674, %cond.true.635, %cond.end.629, %land.lhs.true.586
  %103 = load i64, i64* %length, align 8
  %mul795 = mul nsw i64 2, %103
  %conv796 = trunc i64 %mul795 to i16
  %conv797 = zext i16 %conv796 to i32
  %mul798 = mul nsw i32 %conv797, 8
  %cmp799 = icmp sle i32 %mul798, 32767
  br i1 %cmp799, label %cond.true.801, label %cond.false.808

cond.true.801:                                    ; preds = %cond.true.794
  %104 = load i64, i64* %length, align 8
  %mul802 = mul nsw i64 2, %104
  %conv803 = trunc i64 %mul802 to i16
  %conv804 = zext i16 %conv803 to i32
  %mul805 = mul nsw i32 %conv804, 8
  %conv806 = trunc i32 %mul805 to i16
  %conv807 = sext i16 %conv806 to i32
  br label %cond.end.817

cond.false.808:                                   ; preds = %cond.true.794
  %105 = load i64, i64* %length, align 8
  %mul809 = mul nsw i64 2, %105
  %conv810 = trunc i64 %mul809 to i16
  %conv811 = zext i16 %conv810 to i32
  %mul812 = mul nsw i32 %conv811, 8
  %sub813 = sub nsw i32 %mul812, -32768
  %conv814 = trunc i32 %sub813 to i16
  %conv815 = sext i16 %conv814 to i32
  %add816 = add nsw i32 %conv815, -32768
  br label %cond.end.817

cond.end.817:                                     ; preds = %cond.false.808, %cond.true.801
  %cond818 = phi i32 [ %conv807, %cond.true.801 ], [ %add816, %cond.false.808 ]
  %conv819 = sext i32 %cond818 to i64
  store i64 %conv819, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2506, label %lor.lhs.false.2503

cond.false.820:                                   ; preds = %lor.lhs.false.787
  %106 = load i64, i64* %length, align 8
  %mul821 = mul nsw i64 2, %106
  %conv822 = trunc i64 %mul821 to i16
  %conv823 = zext i16 %conv822 to i32
  %mul824 = mul nsw i32 %conv823, 8
  %cmp825 = icmp sle i32 %mul824, 32767
  br i1 %cmp825, label %cond.true.827, label %cond.false.834

cond.true.827:                                    ; preds = %cond.false.820
  %107 = load i64, i64* %length, align 8
  %mul828 = mul nsw i64 2, %107
  %conv829 = trunc i64 %mul828 to i16
  %conv830 = zext i16 %conv829 to i32
  %mul831 = mul nsw i32 %conv830, 8
  %conv832 = trunc i32 %mul831 to i16
  %conv833 = sext i16 %conv832 to i32
  br label %cond.end.843

cond.false.834:                                   ; preds = %cond.false.820
  %108 = load i64, i64* %length, align 8
  %mul835 = mul nsw i64 2, %108
  %conv836 = trunc i64 %mul835 to i16
  %conv837 = zext i16 %conv836 to i32
  %mul838 = mul nsw i32 %conv837, 8
  %sub839 = sub nsw i32 %mul838, -32768
  %conv840 = trunc i32 %sub839 to i16
  %conv841 = sext i16 %conv840 to i32
  %add842 = add nsw i32 %conv841, -32768
  br label %cond.end.843

cond.end.843:                                     ; preds = %cond.false.834, %cond.true.827
  %cond844 = phi i32 [ %conv833, %cond.true.827 ], [ %add842, %cond.false.834 ]
  %conv845 = sext i32 %cond844 to i64
  store i64 %conv845, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2506, label %lor.lhs.false.2503

cond.false.846:                                   ; preds = %cond.true.543
  %109 = load i64, i64* %length, align 8
  %mul847 = mul nsw i64 2, %109
  %add848 = add nsw i64 0, %mul847
  %mul849 = mul nsw i64 0, %add848
  %sub850 = sub nsw i64 %mul849, 1
  %cmp851 = icmp slt i64 %sub850, 0
  br i1 %cmp851, label %cond.true.853, label %cond.false.872

cond.true.853:                                    ; preds = %cond.false.846
  %110 = load i64, i64* %length, align 8
  %mul854 = mul nsw i64 2, %110
  %add855 = add nsw i64 0, %mul854
  %mul856 = mul nsw i64 0, %add855
  %add857 = add nsw i64 %mul856, 0
  %neg858 = xor i64 %add857, -1
  %cmp859 = icmp eq i64 %neg858, -1
  %conv860 = zext i1 %cmp859 to i32
  %sub861 = sub nsw i32 0, %conv860
  %conv862 = sext i32 %sub861 to i64
  %111 = load i64, i64* %length, align 8
  %mul863 = mul nsw i64 2, %111
  %add864 = add nsw i64 0, %mul863
  %mul865 = mul nsw i64 0, %add864
  %add866 = add nsw i64 %mul865, 1
  %shl867 = shl i64 %add866, 62
  %sub868 = sub nsw i64 %shl867, 1
  %mul869 = mul nsw i64 %sub868, 2
  %add870 = add nsw i64 %mul869, 1
  %sub871 = sub nsw i64 %conv862, %add870
  br label %cond.end.877

cond.false.872:                                   ; preds = %cond.false.846
  %112 = load i64, i64* %length, align 8
  %mul873 = mul nsw i64 2, %112
  %add874 = add nsw i64 0, %mul873
  %mul875 = mul nsw i64 0, %add874
  %add876 = add nsw i64 %mul875, 0
  br label %cond.end.877

cond.end.877:                                     ; preds = %cond.false.872, %cond.true.853
  %cond878 = phi i64 [ %sub871, %cond.true.853 ], [ %add876, %cond.false.872 ]
  %cmp879 = icmp eq i64 %cond878, 0
  br i1 %cmp879, label %land.lhs.true.881, label %lor.lhs.false.885

land.lhs.true.881:                                ; preds = %cond.end.877
  %113 = load i64, i64* %length, align 8
  %mul882 = mul nsw i64 2, %113
  %cmp883 = icmp slt i64 %mul882, 0
  br i1 %cmp883, label %cond.true.1043, label %lor.lhs.false.885

lor.lhs.false.885:                                ; preds = %land.lhs.true.881, %cond.end.877
  br i1 false, label %cond.true.886, label %cond.false.956

cond.true.886:                                    ; preds = %lor.lhs.false.885
  %114 = load i64, i64* %length, align 8
  %mul887 = mul nsw i64 2, %114
  %cmp888 = icmp slt i64 %mul887, 0
  br i1 %cmp888, label %cond.true.890, label %cond.false.917

cond.true.890:                                    ; preds = %cond.true.886
  %115 = load i64, i64* %length, align 8
  %mul891 = mul nsw i64 2, %115
  %116 = load i64, i64* %length, align 8
  %mul892 = mul nsw i64 2, %116
  %add893 = add nsw i64 0, %mul892
  %mul894 = mul nsw i64 0, %add893
  %sub895 = sub nsw i64 %mul894, 1
  %cmp896 = icmp slt i64 %sub895, 0
  br i1 %cmp896, label %cond.true.898, label %cond.false.907

cond.true.898:                                    ; preds = %cond.true.890
  %117 = load i64, i64* %length, align 8
  %mul899 = mul nsw i64 2, %117
  %add900 = add nsw i64 0, %mul899
  %mul901 = mul nsw i64 0, %add900
  %add902 = add nsw i64 %mul901, 1
  %shl903 = shl i64 %add902, 62
  %sub904 = sub nsw i64 %shl903, 1
  %mul905 = mul nsw i64 %sub904, 2
  %add906 = add nsw i64 %mul905, 1
  br label %cond.end.912

cond.false.907:                                   ; preds = %cond.true.890
  %118 = load i64, i64* %length, align 8
  %mul908 = mul nsw i64 2, %118
  %add909 = add nsw i64 0, %mul908
  %mul910 = mul nsw i64 0, %add909
  %sub911 = sub nsw i64 %mul910, 1
  br label %cond.end.912

cond.end.912:                                     ; preds = %cond.false.907, %cond.true.898
  %cond913 = phi i64 [ %add906, %cond.true.898 ], [ %sub911, %cond.false.907 ]
  %div914 = sdiv i64 %cond913, 8
  %cmp915 = icmp slt i64 %mul891, %div914
  br i1 %cmp915, label %cond.true.1043, label %lor.lhs.false.1026

cond.false.917:                                   ; preds = %cond.true.886
  br i1 false, label %cond.true.918, label %cond.false.919

cond.true.918:                                    ; preds = %cond.false.917
  br i1 false, label %cond.true.1043, label %lor.lhs.false.1026

cond.false.919:                                   ; preds = %cond.false.917
  %119 = load i64, i64* %length, align 8
  %mul920 = mul nsw i64 2, %119
  %add921 = add nsw i64 0, %mul920
  %mul922 = mul nsw i64 0, %add921
  %sub923 = sub nsw i64 %mul922, 1
  %cmp924 = icmp slt i64 %sub923, 0
  br i1 %cmp924, label %cond.true.926, label %cond.false.945

cond.true.926:                                    ; preds = %cond.false.919
  %120 = load i64, i64* %length, align 8
  %mul927 = mul nsw i64 2, %120
  %add928 = add nsw i64 0, %mul927
  %mul929 = mul nsw i64 0, %add928
  %add930 = add nsw i64 %mul929, 0
  %neg931 = xor i64 %add930, -1
  %cmp932 = icmp eq i64 %neg931, -1
  %conv933 = zext i1 %cmp932 to i32
  %sub934 = sub nsw i32 0, %conv933
  %conv935 = sext i32 %sub934 to i64
  %121 = load i64, i64* %length, align 8
  %mul936 = mul nsw i64 2, %121
  %add937 = add nsw i64 0, %mul936
  %mul938 = mul nsw i64 0, %add937
  %add939 = add nsw i64 %mul938, 1
  %shl940 = shl i64 %add939, 62
  %sub941 = sub nsw i64 %shl940, 1
  %mul942 = mul nsw i64 %sub941, 2
  %add943 = add nsw i64 %mul942, 1
  %sub944 = sub nsw i64 %conv935, %add943
  br label %cond.end.950

cond.false.945:                                   ; preds = %cond.false.919
  %122 = load i64, i64* %length, align 8
  %mul946 = mul nsw i64 2, %122
  %add947 = add nsw i64 0, %mul946
  %mul948 = mul nsw i64 0, %add947
  %add949 = add nsw i64 %mul948, 0
  br label %cond.end.950

cond.end.950:                                     ; preds = %cond.false.945, %cond.true.926
  %cond951 = phi i64 [ %sub944, %cond.true.926 ], [ %add949, %cond.false.945 ]
  %div952 = sdiv i64 %cond951, 8
  %123 = load i64, i64* %length, align 8
  %mul953 = mul nsw i64 2, %123
  %cmp954 = icmp slt i64 %div952, %mul953
  br i1 %cmp954, label %cond.true.1043, label %lor.lhs.false.1026

cond.false.956:                                   ; preds = %lor.lhs.false.885
  br i1 false, label %cond.true.957, label %cond.false.958

cond.true.957:                                    ; preds = %cond.false.956
  br i1 false, label %cond.true.1043, label %lor.lhs.false.1026

cond.false.958:                                   ; preds = %cond.false.956
  %124 = load i64, i64* %length, align 8
  %mul959 = mul nsw i64 2, %124
  %cmp960 = icmp slt i64 %mul959, 0
  br i1 %cmp960, label %cond.true.962, label %cond.false.999

cond.true.962:                                    ; preds = %cond.false.958
  %125 = load i64, i64* %length, align 8
  %mul963 = mul nsw i64 2, %125
  %126 = load i64, i64* %length, align 8
  %mul964 = mul nsw i64 2, %126
  %add965 = add nsw i64 0, %mul964
  %mul966 = mul nsw i64 0, %add965
  %sub967 = sub nsw i64 %mul966, 1
  %cmp968 = icmp slt i64 %sub967, 0
  br i1 %cmp968, label %cond.true.970, label %cond.false.989

cond.true.970:                                    ; preds = %cond.true.962
  %127 = load i64, i64* %length, align 8
  %mul971 = mul nsw i64 2, %127
  %add972 = add nsw i64 0, %mul971
  %mul973 = mul nsw i64 0, %add972
  %add974 = add nsw i64 %mul973, 0
  %neg975 = xor i64 %add974, -1
  %cmp976 = icmp eq i64 %neg975, -1
  %conv977 = zext i1 %cmp976 to i32
  %sub978 = sub nsw i32 0, %conv977
  %conv979 = sext i32 %sub978 to i64
  %128 = load i64, i64* %length, align 8
  %mul980 = mul nsw i64 2, %128
  %add981 = add nsw i64 0, %mul980
  %mul982 = mul nsw i64 0, %add981
  %add983 = add nsw i64 %mul982, 1
  %shl984 = shl i64 %add983, 62
  %sub985 = sub nsw i64 %shl984, 1
  %mul986 = mul nsw i64 %sub985, 2
  %add987 = add nsw i64 %mul986, 1
  %sub988 = sub nsw i64 %conv979, %add987
  br label %cond.end.994

cond.false.989:                                   ; preds = %cond.true.962
  %129 = load i64, i64* %length, align 8
  %mul990 = mul nsw i64 2, %129
  %add991 = add nsw i64 0, %mul990
  %mul992 = mul nsw i64 0, %add991
  %add993 = add nsw i64 %mul992, 0
  br label %cond.end.994

cond.end.994:                                     ; preds = %cond.false.989, %cond.true.970
  %cond995 = phi i64 [ %sub988, %cond.true.970 ], [ %add993, %cond.false.989 ]
  %div996 = sdiv i64 %cond995, 8
  %cmp997 = icmp slt i64 %mul963, %div996
  br i1 %cmp997, label %cond.true.1043, label %lor.lhs.false.1026

cond.false.999:                                   ; preds = %cond.false.958
  %130 = load i64, i64* %length, align 8
  %mul1000 = mul nsw i64 2, %130
  %add1001 = add nsw i64 0, %mul1000
  %mul1002 = mul nsw i64 0, %add1001
  %sub1003 = sub nsw i64 %mul1002, 1
  %cmp1004 = icmp slt i64 %sub1003, 0
  br i1 %cmp1004, label %cond.true.1006, label %cond.false.1015

cond.true.1006:                                   ; preds = %cond.false.999
  %131 = load i64, i64* %length, align 8
  %mul1007 = mul nsw i64 2, %131
  %add1008 = add nsw i64 0, %mul1007
  %mul1009 = mul nsw i64 0, %add1008
  %add1010 = add nsw i64 %mul1009, 1
  %shl1011 = shl i64 %add1010, 62
  %sub1012 = sub nsw i64 %shl1011, 1
  %mul1013 = mul nsw i64 %sub1012, 2
  %add1014 = add nsw i64 %mul1013, 1
  br label %cond.end.1020

cond.false.1015:                                  ; preds = %cond.false.999
  %132 = load i64, i64* %length, align 8
  %mul1016 = mul nsw i64 2, %132
  %add1017 = add nsw i64 0, %mul1016
  %mul1018 = mul nsw i64 0, %add1017
  %sub1019 = sub nsw i64 %mul1018, 1
  br label %cond.end.1020

cond.end.1020:                                    ; preds = %cond.false.1015, %cond.true.1006
  %cond1021 = phi i64 [ %add1014, %cond.true.1006 ], [ %sub1019, %cond.false.1015 ]
  %div1022 = sdiv i64 %cond1021, 8
  %133 = load i64, i64* %length, align 8
  %mul1023 = mul nsw i64 2, %133
  %cmp1024 = icmp slt i64 %div1022, %mul1023
  br i1 %cmp1024, label %cond.true.1043, label %lor.lhs.false.1026

lor.lhs.false.1026:                               ; preds = %cond.end.1020, %cond.end.994, %cond.true.957, %cond.end.950, %cond.true.918, %cond.end.912
  %134 = load i64, i64* %length, align 8
  %mul1027 = mul nsw i64 2, %134
  %mul1028 = mul nsw i64 %mul1027, 8
  %mul1029 = mul nsw i64 0, %mul1028
  %sub1030 = sub nsw i64 %mul1029, 1
  %cmp1031 = icmp slt i64 %sub1030, 0
  br i1 %cmp1031, label %land.lhs.true.1033, label %lor.lhs.false.1038

land.lhs.true.1033:                               ; preds = %lor.lhs.false.1026
  %135 = load i64, i64* %length, align 8
  %mul1034 = mul nsw i64 2, %135
  %mul1035 = mul nsw i64 %mul1034, 8
  %cmp1036 = icmp slt i64 %mul1035, -32768
  br i1 %cmp1036, label %cond.true.1043, label %lor.lhs.false.1038

lor.lhs.false.1038:                               ; preds = %land.lhs.true.1033, %lor.lhs.false.1026
  %136 = load i64, i64* %length, align 8
  %mul1039 = mul nsw i64 2, %136
  %mul1040 = mul nsw i64 %mul1039, 8
  %cmp1041 = icmp slt i64 32767, %mul1040
  br i1 %cmp1041, label %cond.true.1043, label %cond.false.1069

cond.true.1043:                                   ; preds = %lor.lhs.false.1038, %land.lhs.true.1033, %cond.end.1020, %cond.end.994, %cond.true.957, %cond.end.950, %cond.true.918, %cond.end.912, %land.lhs.true.881
  %137 = load i64, i64* %length, align 8
  %mul1044 = mul nsw i64 2, %137
  %conv1045 = trunc i64 %mul1044 to i16
  %conv1046 = zext i16 %conv1045 to i32
  %mul1047 = mul nsw i32 %conv1046, 8
  %cmp1048 = icmp sle i32 %mul1047, 32767
  br i1 %cmp1048, label %cond.true.1050, label %cond.false.1057

cond.true.1050:                                   ; preds = %cond.true.1043
  %138 = load i64, i64* %length, align 8
  %mul1051 = mul nsw i64 2, %138
  %conv1052 = trunc i64 %mul1051 to i16
  %conv1053 = zext i16 %conv1052 to i32
  %mul1054 = mul nsw i32 %conv1053, 8
  %conv1055 = trunc i32 %mul1054 to i16
  %conv1056 = sext i16 %conv1055 to i32
  br label %cond.end.1066

cond.false.1057:                                  ; preds = %cond.true.1043
  %139 = load i64, i64* %length, align 8
  %mul1058 = mul nsw i64 2, %139
  %conv1059 = trunc i64 %mul1058 to i16
  %conv1060 = zext i16 %conv1059 to i32
  %mul1061 = mul nsw i32 %conv1060, 8
  %sub1062 = sub nsw i32 %mul1061, -32768
  %conv1063 = trunc i32 %sub1062 to i16
  %conv1064 = sext i16 %conv1063 to i32
  %add1065 = add nsw i32 %conv1064, -32768
  br label %cond.end.1066

cond.end.1066:                                    ; preds = %cond.false.1057, %cond.true.1050
  %cond1067 = phi i32 [ %conv1056, %cond.true.1050 ], [ %add1065, %cond.false.1057 ]
  %conv1068 = sext i32 %cond1067 to i64
  store i64 %conv1068, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2506, label %lor.lhs.false.2503

cond.false.1069:                                  ; preds = %lor.lhs.false.1038
  %140 = load i64, i64* %length, align 8
  %mul1070 = mul nsw i64 2, %140
  %conv1071 = trunc i64 %mul1070 to i16
  %conv1072 = zext i16 %conv1071 to i32
  %mul1073 = mul nsw i32 %conv1072, 8
  %cmp1074 = icmp sle i32 %mul1073, 32767
  br i1 %cmp1074, label %cond.true.1076, label %cond.false.1083

cond.true.1076:                                   ; preds = %cond.false.1069
  %141 = load i64, i64* %length, align 8
  %mul1077 = mul nsw i64 2, %141
  %conv1078 = trunc i64 %mul1077 to i16
  %conv1079 = zext i16 %conv1078 to i32
  %mul1080 = mul nsw i32 %conv1079, 8
  %conv1081 = trunc i32 %mul1080 to i16
  %conv1082 = sext i16 %conv1081 to i32
  br label %cond.end.1092

cond.false.1083:                                  ; preds = %cond.false.1069
  %142 = load i64, i64* %length, align 8
  %mul1084 = mul nsw i64 2, %142
  %conv1085 = trunc i64 %mul1084 to i16
  %conv1086 = zext i16 %conv1085 to i32
  %mul1087 = mul nsw i32 %conv1086, 8
  %sub1088 = sub nsw i32 %mul1087, -32768
  %conv1089 = trunc i32 %sub1088 to i16
  %conv1090 = sext i16 %conv1089 to i32
  %add1091 = add nsw i32 %conv1090, -32768
  br label %cond.end.1092

cond.end.1092:                                    ; preds = %cond.false.1083, %cond.true.1076
  %cond1093 = phi i32 [ %conv1082, %cond.true.1076 ], [ %add1091, %cond.false.1083 ]
  %conv1094 = sext i32 %cond1093 to i64
  store i64 %conv1094, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2506, label %lor.lhs.false.2503

cond.false.1095:                                  ; preds = %cond.false.542
  br i1 false, label %cond.true.1096, label %cond.false.1592

cond.true.1096:                                   ; preds = %cond.false.1095
  br i1 false, label %cond.true.1097, label %cond.false.1357

cond.true.1097:                                   ; preds = %cond.true.1096
  %143 = load i64, i64* %length, align 8
  %mul1098 = mul nsw i64 2, %143
  %conv1099 = trunc i64 %mul1098 to i32
  %add1100 = add nsw i32 0, %conv1099
  %mul1101 = mul nsw i32 0, %add1100
  %sub1102 = sub nsw i32 %mul1101, 1
  %cmp1103 = icmp slt i32 %sub1102, 0
  br i1 %cmp1103, label %cond.true.1105, label %cond.false.1125

cond.true.1105:                                   ; preds = %cond.true.1097
  %144 = load i64, i64* %length, align 8
  %mul1106 = mul nsw i64 2, %144
  %conv1107 = trunc i64 %mul1106 to i32
  %add1108 = add nsw i32 0, %conv1107
  %mul1109 = mul nsw i32 0, %add1108
  %add1110 = add nsw i32 %mul1109, 0
  %neg1111 = xor i32 %add1110, -1
  %cmp1112 = icmp eq i32 %neg1111, -1
  %conv1113 = zext i1 %cmp1112 to i32
  %sub1114 = sub nsw i32 0, %conv1113
  %145 = load i64, i64* %length, align 8
  %mul1115 = mul nsw i64 2, %145
  %conv1116 = trunc i64 %mul1115 to i32
  %add1117 = add nsw i32 0, %conv1116
  %mul1118 = mul nsw i32 0, %add1117
  %add1119 = add nsw i32 %mul1118, 1
  %shl1120 = shl i32 %add1119, 30
  %sub1121 = sub nsw i32 %shl1120, 1
  %mul1122 = mul nsw i32 %sub1121, 2
  %add1123 = add nsw i32 %mul1122, 1
  %sub1124 = sub nsw i32 %sub1114, %add1123
  br label %cond.end.1131

cond.false.1125:                                  ; preds = %cond.true.1097
  %146 = load i64, i64* %length, align 8
  %mul1126 = mul nsw i64 2, %146
  %conv1127 = trunc i64 %mul1126 to i32
  %add1128 = add nsw i32 0, %conv1127
  %mul1129 = mul nsw i32 0, %add1128
  %add1130 = add nsw i32 %mul1129, 0
  br label %cond.end.1131

cond.end.1131:                                    ; preds = %cond.false.1125, %cond.true.1105
  %cond1132 = phi i32 [ %sub1124, %cond.true.1105 ], [ %add1130, %cond.false.1125 ]
  %cmp1133 = icmp eq i32 %cond1132, 0
  br i1 %cmp1133, label %land.lhs.true.1135, label %lor.lhs.false.1140

land.lhs.true.1135:                               ; preds = %cond.end.1131
  %147 = load i64, i64* %length, align 8
  %mul1136 = mul nsw i64 2, %147
  %conv1137 = trunc i64 %mul1136 to i32
  %cmp1138 = icmp slt i32 %conv1137, 0
  br i1 %cmp1138, label %cond.true.1319, label %lor.lhs.false.1140

lor.lhs.false.1140:                               ; preds = %land.lhs.true.1135, %cond.end.1131
  br i1 false, label %cond.true.1141, label %cond.false.1220

cond.true.1141:                                   ; preds = %lor.lhs.false.1140
  %148 = load i64, i64* %length, align 8
  %mul1142 = mul nsw i64 2, %148
  %conv1143 = trunc i64 %mul1142 to i32
  %cmp1144 = icmp slt i32 %conv1143, 0
  br i1 %cmp1144, label %cond.true.1146, label %cond.false.1177

cond.true.1146:                                   ; preds = %cond.true.1141
  %149 = load i64, i64* %length, align 8
  %mul1147 = mul nsw i64 2, %149
  %conv1148 = trunc i64 %mul1147 to i32
  %150 = load i64, i64* %length, align 8
  %mul1149 = mul nsw i64 2, %150
  %conv1150 = trunc i64 %mul1149 to i32
  %add1151 = add nsw i32 0, %conv1150
  %mul1152 = mul nsw i32 0, %add1151
  %sub1153 = sub nsw i32 %mul1152, 1
  %cmp1154 = icmp slt i32 %sub1153, 0
  br i1 %cmp1154, label %cond.true.1156, label %cond.false.1166

cond.true.1156:                                   ; preds = %cond.true.1146
  %151 = load i64, i64* %length, align 8
  %mul1157 = mul nsw i64 2, %151
  %conv1158 = trunc i64 %mul1157 to i32
  %add1159 = add nsw i32 0, %conv1158
  %mul1160 = mul nsw i32 0, %add1159
  %add1161 = add nsw i32 %mul1160, 1
  %shl1162 = shl i32 %add1161, 30
  %sub1163 = sub nsw i32 %shl1162, 1
  %mul1164 = mul nsw i32 %sub1163, 2
  %add1165 = add nsw i32 %mul1164, 1
  br label %cond.end.1172

cond.false.1166:                                  ; preds = %cond.true.1146
  %152 = load i64, i64* %length, align 8
  %mul1167 = mul nsw i64 2, %152
  %conv1168 = trunc i64 %mul1167 to i32
  %add1169 = add nsw i32 0, %conv1168
  %mul1170 = mul nsw i32 0, %add1169
  %sub1171 = sub nsw i32 %mul1170, 1
  br label %cond.end.1172

cond.end.1172:                                    ; preds = %cond.false.1166, %cond.true.1156
  %cond1173 = phi i32 [ %add1165, %cond.true.1156 ], [ %sub1171, %cond.false.1166 ]
  %div1174 = sdiv i32 %cond1173, 8
  %cmp1175 = icmp slt i32 %conv1148, %div1174
  br i1 %cmp1175, label %cond.true.1319, label %lor.lhs.false.1299

cond.false.1177:                                  ; preds = %cond.true.1141
  br i1 false, label %cond.true.1178, label %cond.false.1179

cond.true.1178:                                   ; preds = %cond.false.1177
  br i1 false, label %cond.true.1319, label %lor.lhs.false.1299

cond.false.1179:                                  ; preds = %cond.false.1177
  %153 = load i64, i64* %length, align 8
  %mul1180 = mul nsw i64 2, %153
  %conv1181 = trunc i64 %mul1180 to i32
  %add1182 = add nsw i32 0, %conv1181
  %mul1183 = mul nsw i32 0, %add1182
  %sub1184 = sub nsw i32 %mul1183, 1
  %cmp1185 = icmp slt i32 %sub1184, 0
  br i1 %cmp1185, label %cond.true.1187, label %cond.false.1207

cond.true.1187:                                   ; preds = %cond.false.1179
  %154 = load i64, i64* %length, align 8
  %mul1188 = mul nsw i64 2, %154
  %conv1189 = trunc i64 %mul1188 to i32
  %add1190 = add nsw i32 0, %conv1189
  %mul1191 = mul nsw i32 0, %add1190
  %add1192 = add nsw i32 %mul1191, 0
  %neg1193 = xor i32 %add1192, -1
  %cmp1194 = icmp eq i32 %neg1193, -1
  %conv1195 = zext i1 %cmp1194 to i32
  %sub1196 = sub nsw i32 0, %conv1195
  %155 = load i64, i64* %length, align 8
  %mul1197 = mul nsw i64 2, %155
  %conv1198 = trunc i64 %mul1197 to i32
  %add1199 = add nsw i32 0, %conv1198
  %mul1200 = mul nsw i32 0, %add1199
  %add1201 = add nsw i32 %mul1200, 1
  %shl1202 = shl i32 %add1201, 30
  %sub1203 = sub nsw i32 %shl1202, 1
  %mul1204 = mul nsw i32 %sub1203, 2
  %add1205 = add nsw i32 %mul1204, 1
  %sub1206 = sub nsw i32 %sub1196, %add1205
  br label %cond.end.1213

cond.false.1207:                                  ; preds = %cond.false.1179
  %156 = load i64, i64* %length, align 8
  %mul1208 = mul nsw i64 2, %156
  %conv1209 = trunc i64 %mul1208 to i32
  %add1210 = add nsw i32 0, %conv1209
  %mul1211 = mul nsw i32 0, %add1210
  %add1212 = add nsw i32 %mul1211, 0
  br label %cond.end.1213

cond.end.1213:                                    ; preds = %cond.false.1207, %cond.true.1187
  %cond1214 = phi i32 [ %sub1206, %cond.true.1187 ], [ %add1212, %cond.false.1207 ]
  %div1215 = sdiv i32 %cond1214, 8
  %157 = load i64, i64* %length, align 8
  %mul1216 = mul nsw i64 2, %157
  %conv1217 = trunc i64 %mul1216 to i32
  %cmp1218 = icmp slt i32 %div1215, %conv1217
  br i1 %cmp1218, label %cond.true.1319, label %lor.lhs.false.1299

cond.false.1220:                                  ; preds = %lor.lhs.false.1140
  br i1 false, label %cond.true.1221, label %cond.false.1222

cond.true.1221:                                   ; preds = %cond.false.1220
  br i1 false, label %cond.true.1319, label %lor.lhs.false.1299

cond.false.1222:                                  ; preds = %cond.false.1220
  %158 = load i64, i64* %length, align 8
  %mul1223 = mul nsw i64 2, %158
  %conv1224 = trunc i64 %mul1223 to i32
  %cmp1225 = icmp slt i32 %conv1224, 0
  br i1 %cmp1225, label %cond.true.1227, label %cond.false.1268

cond.true.1227:                                   ; preds = %cond.false.1222
  %159 = load i64, i64* %length, align 8
  %mul1228 = mul nsw i64 2, %159
  %conv1229 = trunc i64 %mul1228 to i32
  %160 = load i64, i64* %length, align 8
  %mul1230 = mul nsw i64 2, %160
  %conv1231 = trunc i64 %mul1230 to i32
  %add1232 = add nsw i32 0, %conv1231
  %mul1233 = mul nsw i32 0, %add1232
  %sub1234 = sub nsw i32 %mul1233, 1
  %cmp1235 = icmp slt i32 %sub1234, 0
  br i1 %cmp1235, label %cond.true.1237, label %cond.false.1257

cond.true.1237:                                   ; preds = %cond.true.1227
  %161 = load i64, i64* %length, align 8
  %mul1238 = mul nsw i64 2, %161
  %conv1239 = trunc i64 %mul1238 to i32
  %add1240 = add nsw i32 0, %conv1239
  %mul1241 = mul nsw i32 0, %add1240
  %add1242 = add nsw i32 %mul1241, 0
  %neg1243 = xor i32 %add1242, -1
  %cmp1244 = icmp eq i32 %neg1243, -1
  %conv1245 = zext i1 %cmp1244 to i32
  %sub1246 = sub nsw i32 0, %conv1245
  %162 = load i64, i64* %length, align 8
  %mul1247 = mul nsw i64 2, %162
  %conv1248 = trunc i64 %mul1247 to i32
  %add1249 = add nsw i32 0, %conv1248
  %mul1250 = mul nsw i32 0, %add1249
  %add1251 = add nsw i32 %mul1250, 1
  %shl1252 = shl i32 %add1251, 30
  %sub1253 = sub nsw i32 %shl1252, 1
  %mul1254 = mul nsw i32 %sub1253, 2
  %add1255 = add nsw i32 %mul1254, 1
  %sub1256 = sub nsw i32 %sub1246, %add1255
  br label %cond.end.1263

cond.false.1257:                                  ; preds = %cond.true.1227
  %163 = load i64, i64* %length, align 8
  %mul1258 = mul nsw i64 2, %163
  %conv1259 = trunc i64 %mul1258 to i32
  %add1260 = add nsw i32 0, %conv1259
  %mul1261 = mul nsw i32 0, %add1260
  %add1262 = add nsw i32 %mul1261, 0
  br label %cond.end.1263

cond.end.1263:                                    ; preds = %cond.false.1257, %cond.true.1237
  %cond1264 = phi i32 [ %sub1256, %cond.true.1237 ], [ %add1262, %cond.false.1257 ]
  %div1265 = sdiv i32 %cond1264, 8
  %cmp1266 = icmp slt i32 %conv1229, %div1265
  br i1 %cmp1266, label %cond.true.1319, label %lor.lhs.false.1299

cond.false.1268:                                  ; preds = %cond.false.1222
  %164 = load i64, i64* %length, align 8
  %mul1269 = mul nsw i64 2, %164
  %conv1270 = trunc i64 %mul1269 to i32
  %add1271 = add nsw i32 0, %conv1270
  %mul1272 = mul nsw i32 0, %add1271
  %sub1273 = sub nsw i32 %mul1272, 1
  %cmp1274 = icmp slt i32 %sub1273, 0
  br i1 %cmp1274, label %cond.true.1276, label %cond.false.1286

cond.true.1276:                                   ; preds = %cond.false.1268
  %165 = load i64, i64* %length, align 8
  %mul1277 = mul nsw i64 2, %165
  %conv1278 = trunc i64 %mul1277 to i32
  %add1279 = add nsw i32 0, %conv1278
  %mul1280 = mul nsw i32 0, %add1279
  %add1281 = add nsw i32 %mul1280, 1
  %shl1282 = shl i32 %add1281, 30
  %sub1283 = sub nsw i32 %shl1282, 1
  %mul1284 = mul nsw i32 %sub1283, 2
  %add1285 = add nsw i32 %mul1284, 1
  br label %cond.end.1292

cond.false.1286:                                  ; preds = %cond.false.1268
  %166 = load i64, i64* %length, align 8
  %mul1287 = mul nsw i64 2, %166
  %conv1288 = trunc i64 %mul1287 to i32
  %add1289 = add nsw i32 0, %conv1288
  %mul1290 = mul nsw i32 0, %add1289
  %sub1291 = sub nsw i32 %mul1290, 1
  br label %cond.end.1292

cond.end.1292:                                    ; preds = %cond.false.1286, %cond.true.1276
  %cond1293 = phi i32 [ %add1285, %cond.true.1276 ], [ %sub1291, %cond.false.1286 ]
  %div1294 = sdiv i32 %cond1293, 8
  %167 = load i64, i64* %length, align 8
  %mul1295 = mul nsw i64 2, %167
  %conv1296 = trunc i64 %mul1295 to i32
  %cmp1297 = icmp slt i32 %div1294, %conv1296
  br i1 %cmp1297, label %cond.true.1319, label %lor.lhs.false.1299

lor.lhs.false.1299:                               ; preds = %cond.end.1292, %cond.end.1263, %cond.true.1221, %cond.end.1213, %cond.true.1178, %cond.end.1172
  %168 = load i64, i64* %length, align 8
  %mul1300 = mul nsw i64 2, %168
  %conv1301 = trunc i64 %mul1300 to i32
  %mul1302 = mul nsw i32 %conv1301, 8
  %mul1303 = mul nsw i32 0, %mul1302
  %sub1304 = sub nsw i32 %mul1303, 1
  %cmp1305 = icmp slt i32 %sub1304, 0
  br i1 %cmp1305, label %land.lhs.true.1307, label %lor.lhs.false.1313

land.lhs.true.1307:                               ; preds = %lor.lhs.false.1299
  %169 = load i64, i64* %length, align 8
  %mul1308 = mul nsw i64 2, %169
  %conv1309 = trunc i64 %mul1308 to i32
  %mul1310 = mul nsw i32 %conv1309, 8
  %cmp1311 = icmp slt i32 %mul1310, -2147483648
  br i1 %cmp1311, label %cond.true.1319, label %lor.lhs.false.1313

lor.lhs.false.1313:                               ; preds = %land.lhs.true.1307, %lor.lhs.false.1299
  %170 = load i64, i64* %length, align 8
  %mul1314 = mul nsw i64 2, %170
  %conv1315 = trunc i64 %mul1314 to i32
  %mul1316 = mul nsw i32 %conv1315, 8
  %cmp1317 = icmp slt i32 2147483647, %mul1316
  br i1 %cmp1317, label %cond.true.1319, label %cond.false.1338

cond.true.1319:                                   ; preds = %lor.lhs.false.1313, %land.lhs.true.1307, %cond.end.1292, %cond.end.1263, %cond.true.1221, %cond.end.1213, %cond.true.1178, %cond.end.1172, %land.lhs.true.1135
  %171 = load i64, i64* %length, align 8
  %mul1320 = mul nsw i64 2, %171
  %conv1321 = trunc i64 %mul1320 to i32
  %mul1322 = mul i32 %conv1321, 8
  %cmp1323 = icmp ule i32 %mul1322, 2147483647
  br i1 %cmp1323, label %cond.true.1325, label %cond.false.1329

cond.true.1325:                                   ; preds = %cond.true.1319
  %172 = load i64, i64* %length, align 8
  %mul1326 = mul nsw i64 2, %172
  %conv1327 = trunc i64 %mul1326 to i32
  %mul1328 = mul i32 %conv1327, 8
  br label %cond.end.1335

cond.false.1329:                                  ; preds = %cond.true.1319
  %173 = load i64, i64* %length, align 8
  %mul1330 = mul nsw i64 2, %173
  %conv1331 = trunc i64 %mul1330 to i32
  %mul1332 = mul i32 %conv1331, 8
  %sub1333 = sub i32 %mul1332, -2147483648
  %add1334 = add nsw i32 %sub1333, -2147483648
  br label %cond.end.1335

cond.end.1335:                                    ; preds = %cond.false.1329, %cond.true.1325
  %cond1336 = phi i32 [ %mul1328, %cond.true.1325 ], [ %add1334, %cond.false.1329 ]
  %conv1337 = sext i32 %cond1336 to i64
  store i64 %conv1337, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2506, label %lor.lhs.false.2503

cond.false.1338:                                  ; preds = %lor.lhs.false.1313
  %174 = load i64, i64* %length, align 8
  %mul1339 = mul nsw i64 2, %174
  %conv1340 = trunc i64 %mul1339 to i32
  %mul1341 = mul i32 %conv1340, 8
  %cmp1342 = icmp ule i32 %mul1341, 2147483647
  br i1 %cmp1342, label %cond.true.1344, label %cond.false.1348

cond.true.1344:                                   ; preds = %cond.false.1338
  %175 = load i64, i64* %length, align 8
  %mul1345 = mul nsw i64 2, %175
  %conv1346 = trunc i64 %mul1345 to i32
  %mul1347 = mul i32 %conv1346, 8
  br label %cond.end.1354

cond.false.1348:                                  ; preds = %cond.false.1338
  %176 = load i64, i64* %length, align 8
  %mul1349 = mul nsw i64 2, %176
  %conv1350 = trunc i64 %mul1349 to i32
  %mul1351 = mul i32 %conv1350, 8
  %sub1352 = sub i32 %mul1351, -2147483648
  %add1353 = add nsw i32 %sub1352, -2147483648
  br label %cond.end.1354

cond.end.1354:                                    ; preds = %cond.false.1348, %cond.true.1344
  %cond1355 = phi i32 [ %mul1347, %cond.true.1344 ], [ %add1353, %cond.false.1348 ]
  %conv1356 = sext i32 %cond1355 to i64
  store i64 %conv1356, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2506, label %lor.lhs.false.2503

cond.false.1357:                                  ; preds = %cond.true.1096
  %177 = load i64, i64* %length, align 8
  %mul1358 = mul nsw i64 2, %177
  %add1359 = add nsw i64 0, %mul1358
  %mul1360 = mul nsw i64 0, %add1359
  %sub1361 = sub nsw i64 %mul1360, 1
  %cmp1362 = icmp slt i64 %sub1361, 0
  br i1 %cmp1362, label %cond.true.1364, label %cond.false.1383

cond.true.1364:                                   ; preds = %cond.false.1357
  %178 = load i64, i64* %length, align 8
  %mul1365 = mul nsw i64 2, %178
  %add1366 = add nsw i64 0, %mul1365
  %mul1367 = mul nsw i64 0, %add1366
  %add1368 = add nsw i64 %mul1367, 0
  %neg1369 = xor i64 %add1368, -1
  %cmp1370 = icmp eq i64 %neg1369, -1
  %conv1371 = zext i1 %cmp1370 to i32
  %sub1372 = sub nsw i32 0, %conv1371
  %conv1373 = sext i32 %sub1372 to i64
  %179 = load i64, i64* %length, align 8
  %mul1374 = mul nsw i64 2, %179
  %add1375 = add nsw i64 0, %mul1374
  %mul1376 = mul nsw i64 0, %add1375
  %add1377 = add nsw i64 %mul1376, 1
  %shl1378 = shl i64 %add1377, 62
  %sub1379 = sub nsw i64 %shl1378, 1
  %mul1380 = mul nsw i64 %sub1379, 2
  %add1381 = add nsw i64 %mul1380, 1
  %sub1382 = sub nsw i64 %conv1373, %add1381
  br label %cond.end.1388

cond.false.1383:                                  ; preds = %cond.false.1357
  %180 = load i64, i64* %length, align 8
  %mul1384 = mul nsw i64 2, %180
  %add1385 = add nsw i64 0, %mul1384
  %mul1386 = mul nsw i64 0, %add1385
  %add1387 = add nsw i64 %mul1386, 0
  br label %cond.end.1388

cond.end.1388:                                    ; preds = %cond.false.1383, %cond.true.1364
  %cond1389 = phi i64 [ %sub1382, %cond.true.1364 ], [ %add1387, %cond.false.1383 ]
  %cmp1390 = icmp eq i64 %cond1389, 0
  br i1 %cmp1390, label %land.lhs.true.1392, label %lor.lhs.false.1396

land.lhs.true.1392:                               ; preds = %cond.end.1388
  %181 = load i64, i64* %length, align 8
  %mul1393 = mul nsw i64 2, %181
  %cmp1394 = icmp slt i64 %mul1393, 0
  br i1 %cmp1394, label %cond.true.1554, label %lor.lhs.false.1396

lor.lhs.false.1396:                               ; preds = %land.lhs.true.1392, %cond.end.1388
  br i1 false, label %cond.true.1397, label %cond.false.1467

cond.true.1397:                                   ; preds = %lor.lhs.false.1396
  %182 = load i64, i64* %length, align 8
  %mul1398 = mul nsw i64 2, %182
  %cmp1399 = icmp slt i64 %mul1398, 0
  br i1 %cmp1399, label %cond.true.1401, label %cond.false.1428

cond.true.1401:                                   ; preds = %cond.true.1397
  %183 = load i64, i64* %length, align 8
  %mul1402 = mul nsw i64 2, %183
  %184 = load i64, i64* %length, align 8
  %mul1403 = mul nsw i64 2, %184
  %add1404 = add nsw i64 0, %mul1403
  %mul1405 = mul nsw i64 0, %add1404
  %sub1406 = sub nsw i64 %mul1405, 1
  %cmp1407 = icmp slt i64 %sub1406, 0
  br i1 %cmp1407, label %cond.true.1409, label %cond.false.1418

cond.true.1409:                                   ; preds = %cond.true.1401
  %185 = load i64, i64* %length, align 8
  %mul1410 = mul nsw i64 2, %185
  %add1411 = add nsw i64 0, %mul1410
  %mul1412 = mul nsw i64 0, %add1411
  %add1413 = add nsw i64 %mul1412, 1
  %shl1414 = shl i64 %add1413, 62
  %sub1415 = sub nsw i64 %shl1414, 1
  %mul1416 = mul nsw i64 %sub1415, 2
  %add1417 = add nsw i64 %mul1416, 1
  br label %cond.end.1423

cond.false.1418:                                  ; preds = %cond.true.1401
  %186 = load i64, i64* %length, align 8
  %mul1419 = mul nsw i64 2, %186
  %add1420 = add nsw i64 0, %mul1419
  %mul1421 = mul nsw i64 0, %add1420
  %sub1422 = sub nsw i64 %mul1421, 1
  br label %cond.end.1423

cond.end.1423:                                    ; preds = %cond.false.1418, %cond.true.1409
  %cond1424 = phi i64 [ %add1417, %cond.true.1409 ], [ %sub1422, %cond.false.1418 ]
  %div1425 = sdiv i64 %cond1424, 8
  %cmp1426 = icmp slt i64 %mul1402, %div1425
  br i1 %cmp1426, label %cond.true.1554, label %lor.lhs.false.1537

cond.false.1428:                                  ; preds = %cond.true.1397
  br i1 false, label %cond.true.1429, label %cond.false.1430

cond.true.1429:                                   ; preds = %cond.false.1428
  br i1 false, label %cond.true.1554, label %lor.lhs.false.1537

cond.false.1430:                                  ; preds = %cond.false.1428
  %187 = load i64, i64* %length, align 8
  %mul1431 = mul nsw i64 2, %187
  %add1432 = add nsw i64 0, %mul1431
  %mul1433 = mul nsw i64 0, %add1432
  %sub1434 = sub nsw i64 %mul1433, 1
  %cmp1435 = icmp slt i64 %sub1434, 0
  br i1 %cmp1435, label %cond.true.1437, label %cond.false.1456

cond.true.1437:                                   ; preds = %cond.false.1430
  %188 = load i64, i64* %length, align 8
  %mul1438 = mul nsw i64 2, %188
  %add1439 = add nsw i64 0, %mul1438
  %mul1440 = mul nsw i64 0, %add1439
  %add1441 = add nsw i64 %mul1440, 0
  %neg1442 = xor i64 %add1441, -1
  %cmp1443 = icmp eq i64 %neg1442, -1
  %conv1444 = zext i1 %cmp1443 to i32
  %sub1445 = sub nsw i32 0, %conv1444
  %conv1446 = sext i32 %sub1445 to i64
  %189 = load i64, i64* %length, align 8
  %mul1447 = mul nsw i64 2, %189
  %add1448 = add nsw i64 0, %mul1447
  %mul1449 = mul nsw i64 0, %add1448
  %add1450 = add nsw i64 %mul1449, 1
  %shl1451 = shl i64 %add1450, 62
  %sub1452 = sub nsw i64 %shl1451, 1
  %mul1453 = mul nsw i64 %sub1452, 2
  %add1454 = add nsw i64 %mul1453, 1
  %sub1455 = sub nsw i64 %conv1446, %add1454
  br label %cond.end.1461

cond.false.1456:                                  ; preds = %cond.false.1430
  %190 = load i64, i64* %length, align 8
  %mul1457 = mul nsw i64 2, %190
  %add1458 = add nsw i64 0, %mul1457
  %mul1459 = mul nsw i64 0, %add1458
  %add1460 = add nsw i64 %mul1459, 0
  br label %cond.end.1461

cond.end.1461:                                    ; preds = %cond.false.1456, %cond.true.1437
  %cond1462 = phi i64 [ %sub1455, %cond.true.1437 ], [ %add1460, %cond.false.1456 ]
  %div1463 = sdiv i64 %cond1462, 8
  %191 = load i64, i64* %length, align 8
  %mul1464 = mul nsw i64 2, %191
  %cmp1465 = icmp slt i64 %div1463, %mul1464
  br i1 %cmp1465, label %cond.true.1554, label %lor.lhs.false.1537

cond.false.1467:                                  ; preds = %lor.lhs.false.1396
  br i1 false, label %cond.true.1468, label %cond.false.1469

cond.true.1468:                                   ; preds = %cond.false.1467
  br i1 false, label %cond.true.1554, label %lor.lhs.false.1537

cond.false.1469:                                  ; preds = %cond.false.1467
  %192 = load i64, i64* %length, align 8
  %mul1470 = mul nsw i64 2, %192
  %cmp1471 = icmp slt i64 %mul1470, 0
  br i1 %cmp1471, label %cond.true.1473, label %cond.false.1510

cond.true.1473:                                   ; preds = %cond.false.1469
  %193 = load i64, i64* %length, align 8
  %mul1474 = mul nsw i64 2, %193
  %194 = load i64, i64* %length, align 8
  %mul1475 = mul nsw i64 2, %194
  %add1476 = add nsw i64 0, %mul1475
  %mul1477 = mul nsw i64 0, %add1476
  %sub1478 = sub nsw i64 %mul1477, 1
  %cmp1479 = icmp slt i64 %sub1478, 0
  br i1 %cmp1479, label %cond.true.1481, label %cond.false.1500

cond.true.1481:                                   ; preds = %cond.true.1473
  %195 = load i64, i64* %length, align 8
  %mul1482 = mul nsw i64 2, %195
  %add1483 = add nsw i64 0, %mul1482
  %mul1484 = mul nsw i64 0, %add1483
  %add1485 = add nsw i64 %mul1484, 0
  %neg1486 = xor i64 %add1485, -1
  %cmp1487 = icmp eq i64 %neg1486, -1
  %conv1488 = zext i1 %cmp1487 to i32
  %sub1489 = sub nsw i32 0, %conv1488
  %conv1490 = sext i32 %sub1489 to i64
  %196 = load i64, i64* %length, align 8
  %mul1491 = mul nsw i64 2, %196
  %add1492 = add nsw i64 0, %mul1491
  %mul1493 = mul nsw i64 0, %add1492
  %add1494 = add nsw i64 %mul1493, 1
  %shl1495 = shl i64 %add1494, 62
  %sub1496 = sub nsw i64 %shl1495, 1
  %mul1497 = mul nsw i64 %sub1496, 2
  %add1498 = add nsw i64 %mul1497, 1
  %sub1499 = sub nsw i64 %conv1490, %add1498
  br label %cond.end.1505

cond.false.1500:                                  ; preds = %cond.true.1473
  %197 = load i64, i64* %length, align 8
  %mul1501 = mul nsw i64 2, %197
  %add1502 = add nsw i64 0, %mul1501
  %mul1503 = mul nsw i64 0, %add1502
  %add1504 = add nsw i64 %mul1503, 0
  br label %cond.end.1505

cond.end.1505:                                    ; preds = %cond.false.1500, %cond.true.1481
  %cond1506 = phi i64 [ %sub1499, %cond.true.1481 ], [ %add1504, %cond.false.1500 ]
  %div1507 = sdiv i64 %cond1506, 8
  %cmp1508 = icmp slt i64 %mul1474, %div1507
  br i1 %cmp1508, label %cond.true.1554, label %lor.lhs.false.1537

cond.false.1510:                                  ; preds = %cond.false.1469
  %198 = load i64, i64* %length, align 8
  %mul1511 = mul nsw i64 2, %198
  %add1512 = add nsw i64 0, %mul1511
  %mul1513 = mul nsw i64 0, %add1512
  %sub1514 = sub nsw i64 %mul1513, 1
  %cmp1515 = icmp slt i64 %sub1514, 0
  br i1 %cmp1515, label %cond.true.1517, label %cond.false.1526

cond.true.1517:                                   ; preds = %cond.false.1510
  %199 = load i64, i64* %length, align 8
  %mul1518 = mul nsw i64 2, %199
  %add1519 = add nsw i64 0, %mul1518
  %mul1520 = mul nsw i64 0, %add1519
  %add1521 = add nsw i64 %mul1520, 1
  %shl1522 = shl i64 %add1521, 62
  %sub1523 = sub nsw i64 %shl1522, 1
  %mul1524 = mul nsw i64 %sub1523, 2
  %add1525 = add nsw i64 %mul1524, 1
  br label %cond.end.1531

cond.false.1526:                                  ; preds = %cond.false.1510
  %200 = load i64, i64* %length, align 8
  %mul1527 = mul nsw i64 2, %200
  %add1528 = add nsw i64 0, %mul1527
  %mul1529 = mul nsw i64 0, %add1528
  %sub1530 = sub nsw i64 %mul1529, 1
  br label %cond.end.1531

cond.end.1531:                                    ; preds = %cond.false.1526, %cond.true.1517
  %cond1532 = phi i64 [ %add1525, %cond.true.1517 ], [ %sub1530, %cond.false.1526 ]
  %div1533 = sdiv i64 %cond1532, 8
  %201 = load i64, i64* %length, align 8
  %mul1534 = mul nsw i64 2, %201
  %cmp1535 = icmp slt i64 %div1533, %mul1534
  br i1 %cmp1535, label %cond.true.1554, label %lor.lhs.false.1537

lor.lhs.false.1537:                               ; preds = %cond.end.1531, %cond.end.1505, %cond.true.1468, %cond.end.1461, %cond.true.1429, %cond.end.1423
  %202 = load i64, i64* %length, align 8
  %mul1538 = mul nsw i64 2, %202
  %mul1539 = mul nsw i64 %mul1538, 8
  %mul1540 = mul nsw i64 0, %mul1539
  %sub1541 = sub nsw i64 %mul1540, 1
  %cmp1542 = icmp slt i64 %sub1541, 0
  br i1 %cmp1542, label %land.lhs.true.1544, label %lor.lhs.false.1549

land.lhs.true.1544:                               ; preds = %lor.lhs.false.1537
  %203 = load i64, i64* %length, align 8
  %mul1545 = mul nsw i64 2, %203
  %mul1546 = mul nsw i64 %mul1545, 8
  %cmp1547 = icmp slt i64 %mul1546, -2147483648
  br i1 %cmp1547, label %cond.true.1554, label %lor.lhs.false.1549

lor.lhs.false.1549:                               ; preds = %land.lhs.true.1544, %lor.lhs.false.1537
  %204 = load i64, i64* %length, align 8
  %mul1550 = mul nsw i64 2, %204
  %mul1551 = mul nsw i64 %mul1550, 8
  %cmp1552 = icmp slt i64 2147483647, %mul1551
  br i1 %cmp1552, label %cond.true.1554, label %cond.false.1573

cond.true.1554:                                   ; preds = %lor.lhs.false.1549, %land.lhs.true.1544, %cond.end.1531, %cond.end.1505, %cond.true.1468, %cond.end.1461, %cond.true.1429, %cond.end.1423, %land.lhs.true.1392
  %205 = load i64, i64* %length, align 8
  %mul1555 = mul nsw i64 2, %205
  %conv1556 = trunc i64 %mul1555 to i32
  %mul1557 = mul i32 %conv1556, 8
  %cmp1558 = icmp ule i32 %mul1557, 2147483647
  br i1 %cmp1558, label %cond.true.1560, label %cond.false.1564

cond.true.1560:                                   ; preds = %cond.true.1554
  %206 = load i64, i64* %length, align 8
  %mul1561 = mul nsw i64 2, %206
  %conv1562 = trunc i64 %mul1561 to i32
  %mul1563 = mul i32 %conv1562, 8
  br label %cond.end.1570

cond.false.1564:                                  ; preds = %cond.true.1554
  %207 = load i64, i64* %length, align 8
  %mul1565 = mul nsw i64 2, %207
  %conv1566 = trunc i64 %mul1565 to i32
  %mul1567 = mul i32 %conv1566, 8
  %sub1568 = sub i32 %mul1567, -2147483648
  %add1569 = add nsw i32 %sub1568, -2147483648
  br label %cond.end.1570

cond.end.1570:                                    ; preds = %cond.false.1564, %cond.true.1560
  %cond1571 = phi i32 [ %mul1563, %cond.true.1560 ], [ %add1569, %cond.false.1564 ]
  %conv1572 = sext i32 %cond1571 to i64
  store i64 %conv1572, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2506, label %lor.lhs.false.2503

cond.false.1573:                                  ; preds = %lor.lhs.false.1549
  %208 = load i64, i64* %length, align 8
  %mul1574 = mul nsw i64 2, %208
  %conv1575 = trunc i64 %mul1574 to i32
  %mul1576 = mul i32 %conv1575, 8
  %cmp1577 = icmp ule i32 %mul1576, 2147483647
  br i1 %cmp1577, label %cond.true.1579, label %cond.false.1583

cond.true.1579:                                   ; preds = %cond.false.1573
  %209 = load i64, i64* %length, align 8
  %mul1580 = mul nsw i64 2, %209
  %conv1581 = trunc i64 %mul1580 to i32
  %mul1582 = mul i32 %conv1581, 8
  br label %cond.end.1589

cond.false.1583:                                  ; preds = %cond.false.1573
  %210 = load i64, i64* %length, align 8
  %mul1584 = mul nsw i64 2, %210
  %conv1585 = trunc i64 %mul1584 to i32
  %mul1586 = mul i32 %conv1585, 8
  %sub1587 = sub i32 %mul1586, -2147483648
  %add1588 = add nsw i32 %sub1587, -2147483648
  br label %cond.end.1589

cond.end.1589:                                    ; preds = %cond.false.1583, %cond.true.1579
  %cond1590 = phi i32 [ %mul1582, %cond.true.1579 ], [ %add1588, %cond.false.1583 ]
  %conv1591 = sext i32 %cond1590 to i64
  store i64 %conv1591, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2506, label %lor.lhs.false.2503

cond.false.1592:                                  ; preds = %cond.false.1095
  br i1 true, label %cond.true.1593, label %cond.false.2048

cond.true.1593:                                   ; preds = %cond.false.1592
  br i1 false, label %cond.true.1594, label %cond.false.1821

cond.true.1594:                                   ; preds = %cond.true.1593
  %211 = load i64, i64* %length, align 8
  %mul1595 = mul nsw i64 2, %211
  %add1596 = add nsw i64 0, %mul1595
  %mul1597 = mul nsw i64 0, %add1596
  %sub1598 = sub nsw i64 %mul1597, 1
  %cmp1599 = icmp slt i64 %sub1598, 0
  br i1 %cmp1599, label %cond.true.1601, label %cond.false.1620

cond.true.1601:                                   ; preds = %cond.true.1594
  %212 = load i64, i64* %length, align 8
  %mul1602 = mul nsw i64 2, %212
  %add1603 = add nsw i64 0, %mul1602
  %mul1604 = mul nsw i64 0, %add1603
  %add1605 = add nsw i64 %mul1604, 0
  %neg1606 = xor i64 %add1605, -1
  %cmp1607 = icmp eq i64 %neg1606, -1
  %conv1608 = zext i1 %cmp1607 to i32
  %sub1609 = sub nsw i32 0, %conv1608
  %conv1610 = sext i32 %sub1609 to i64
  %213 = load i64, i64* %length, align 8
  %mul1611 = mul nsw i64 2, %213
  %add1612 = add nsw i64 0, %mul1611
  %mul1613 = mul nsw i64 0, %add1612
  %add1614 = add nsw i64 %mul1613, 1
  %shl1615 = shl i64 %add1614, 62
  %sub1616 = sub nsw i64 %shl1615, 1
  %mul1617 = mul nsw i64 %sub1616, 2
  %add1618 = add nsw i64 %mul1617, 1
  %sub1619 = sub nsw i64 %conv1610, %add1618
  br label %cond.end.1625

cond.false.1620:                                  ; preds = %cond.true.1594
  %214 = load i64, i64* %length, align 8
  %mul1621 = mul nsw i64 2, %214
  %add1622 = add nsw i64 0, %mul1621
  %mul1623 = mul nsw i64 0, %add1622
  %add1624 = add nsw i64 %mul1623, 0
  br label %cond.end.1625

cond.end.1625:                                    ; preds = %cond.false.1620, %cond.true.1601
  %cond1626 = phi i64 [ %sub1619, %cond.true.1601 ], [ %add1624, %cond.false.1620 ]
  %cmp1627 = icmp eq i64 %cond1626, 0
  br i1 %cmp1627, label %land.lhs.true.1629, label %lor.lhs.false.1633

land.lhs.true.1629:                               ; preds = %cond.end.1625
  %215 = load i64, i64* %length, align 8
  %mul1630 = mul nsw i64 2, %215
  %cmp1631 = icmp slt i64 %mul1630, 0
  br i1 %cmp1631, label %cond.true.1791, label %lor.lhs.false.1633

lor.lhs.false.1633:                               ; preds = %land.lhs.true.1629, %cond.end.1625
  br i1 false, label %cond.true.1634, label %cond.false.1704

cond.true.1634:                                   ; preds = %lor.lhs.false.1633
  %216 = load i64, i64* %length, align 8
  %mul1635 = mul nsw i64 2, %216
  %cmp1636 = icmp slt i64 %mul1635, 0
  br i1 %cmp1636, label %cond.true.1638, label %cond.false.1665

cond.true.1638:                                   ; preds = %cond.true.1634
  %217 = load i64, i64* %length, align 8
  %mul1639 = mul nsw i64 2, %217
  %218 = load i64, i64* %length, align 8
  %mul1640 = mul nsw i64 2, %218
  %add1641 = add nsw i64 0, %mul1640
  %mul1642 = mul nsw i64 0, %add1641
  %sub1643 = sub nsw i64 %mul1642, 1
  %cmp1644 = icmp slt i64 %sub1643, 0
  br i1 %cmp1644, label %cond.true.1646, label %cond.false.1655

cond.true.1646:                                   ; preds = %cond.true.1638
  %219 = load i64, i64* %length, align 8
  %mul1647 = mul nsw i64 2, %219
  %add1648 = add nsw i64 0, %mul1647
  %mul1649 = mul nsw i64 0, %add1648
  %add1650 = add nsw i64 %mul1649, 1
  %shl1651 = shl i64 %add1650, 62
  %sub1652 = sub nsw i64 %shl1651, 1
  %mul1653 = mul nsw i64 %sub1652, 2
  %add1654 = add nsw i64 %mul1653, 1
  br label %cond.end.1660

cond.false.1655:                                  ; preds = %cond.true.1638
  %220 = load i64, i64* %length, align 8
  %mul1656 = mul nsw i64 2, %220
  %add1657 = add nsw i64 0, %mul1656
  %mul1658 = mul nsw i64 0, %add1657
  %sub1659 = sub nsw i64 %mul1658, 1
  br label %cond.end.1660

cond.end.1660:                                    ; preds = %cond.false.1655, %cond.true.1646
  %cond1661 = phi i64 [ %add1654, %cond.true.1646 ], [ %sub1659, %cond.false.1655 ]
  %div1662 = sdiv i64 %cond1661, 8
  %cmp1663 = icmp slt i64 %mul1639, %div1662
  br i1 %cmp1663, label %cond.true.1791, label %lor.lhs.false.1774

cond.false.1665:                                  ; preds = %cond.true.1634
  br i1 false, label %cond.true.1666, label %cond.false.1667

cond.true.1666:                                   ; preds = %cond.false.1665
  br i1 false, label %cond.true.1791, label %lor.lhs.false.1774

cond.false.1667:                                  ; preds = %cond.false.1665
  %221 = load i64, i64* %length, align 8
  %mul1668 = mul nsw i64 2, %221
  %add1669 = add nsw i64 0, %mul1668
  %mul1670 = mul nsw i64 0, %add1669
  %sub1671 = sub nsw i64 %mul1670, 1
  %cmp1672 = icmp slt i64 %sub1671, 0
  br i1 %cmp1672, label %cond.true.1674, label %cond.false.1693

cond.true.1674:                                   ; preds = %cond.false.1667
  %222 = load i64, i64* %length, align 8
  %mul1675 = mul nsw i64 2, %222
  %add1676 = add nsw i64 0, %mul1675
  %mul1677 = mul nsw i64 0, %add1676
  %add1678 = add nsw i64 %mul1677, 0
  %neg1679 = xor i64 %add1678, -1
  %cmp1680 = icmp eq i64 %neg1679, -1
  %conv1681 = zext i1 %cmp1680 to i32
  %sub1682 = sub nsw i32 0, %conv1681
  %conv1683 = sext i32 %sub1682 to i64
  %223 = load i64, i64* %length, align 8
  %mul1684 = mul nsw i64 2, %223
  %add1685 = add nsw i64 0, %mul1684
  %mul1686 = mul nsw i64 0, %add1685
  %add1687 = add nsw i64 %mul1686, 1
  %shl1688 = shl i64 %add1687, 62
  %sub1689 = sub nsw i64 %shl1688, 1
  %mul1690 = mul nsw i64 %sub1689, 2
  %add1691 = add nsw i64 %mul1690, 1
  %sub1692 = sub nsw i64 %conv1683, %add1691
  br label %cond.end.1698

cond.false.1693:                                  ; preds = %cond.false.1667
  %224 = load i64, i64* %length, align 8
  %mul1694 = mul nsw i64 2, %224
  %add1695 = add nsw i64 0, %mul1694
  %mul1696 = mul nsw i64 0, %add1695
  %add1697 = add nsw i64 %mul1696, 0
  br label %cond.end.1698

cond.end.1698:                                    ; preds = %cond.false.1693, %cond.true.1674
  %cond1699 = phi i64 [ %sub1692, %cond.true.1674 ], [ %add1697, %cond.false.1693 ]
  %div1700 = sdiv i64 %cond1699, 8
  %225 = load i64, i64* %length, align 8
  %mul1701 = mul nsw i64 2, %225
  %cmp1702 = icmp slt i64 %div1700, %mul1701
  br i1 %cmp1702, label %cond.true.1791, label %lor.lhs.false.1774

cond.false.1704:                                  ; preds = %lor.lhs.false.1633
  br i1 false, label %cond.true.1705, label %cond.false.1706

cond.true.1705:                                   ; preds = %cond.false.1704
  br i1 false, label %cond.true.1791, label %lor.lhs.false.1774

cond.false.1706:                                  ; preds = %cond.false.1704
  %226 = load i64, i64* %length, align 8
  %mul1707 = mul nsw i64 2, %226
  %cmp1708 = icmp slt i64 %mul1707, 0
  br i1 %cmp1708, label %cond.true.1710, label %cond.false.1747

cond.true.1710:                                   ; preds = %cond.false.1706
  %227 = load i64, i64* %length, align 8
  %mul1711 = mul nsw i64 2, %227
  %228 = load i64, i64* %length, align 8
  %mul1712 = mul nsw i64 2, %228
  %add1713 = add nsw i64 0, %mul1712
  %mul1714 = mul nsw i64 0, %add1713
  %sub1715 = sub nsw i64 %mul1714, 1
  %cmp1716 = icmp slt i64 %sub1715, 0
  br i1 %cmp1716, label %cond.true.1718, label %cond.false.1737

cond.true.1718:                                   ; preds = %cond.true.1710
  %229 = load i64, i64* %length, align 8
  %mul1719 = mul nsw i64 2, %229
  %add1720 = add nsw i64 0, %mul1719
  %mul1721 = mul nsw i64 0, %add1720
  %add1722 = add nsw i64 %mul1721, 0
  %neg1723 = xor i64 %add1722, -1
  %cmp1724 = icmp eq i64 %neg1723, -1
  %conv1725 = zext i1 %cmp1724 to i32
  %sub1726 = sub nsw i32 0, %conv1725
  %conv1727 = sext i32 %sub1726 to i64
  %230 = load i64, i64* %length, align 8
  %mul1728 = mul nsw i64 2, %230
  %add1729 = add nsw i64 0, %mul1728
  %mul1730 = mul nsw i64 0, %add1729
  %add1731 = add nsw i64 %mul1730, 1
  %shl1732 = shl i64 %add1731, 62
  %sub1733 = sub nsw i64 %shl1732, 1
  %mul1734 = mul nsw i64 %sub1733, 2
  %add1735 = add nsw i64 %mul1734, 1
  %sub1736 = sub nsw i64 %conv1727, %add1735
  br label %cond.end.1742

cond.false.1737:                                  ; preds = %cond.true.1710
  %231 = load i64, i64* %length, align 8
  %mul1738 = mul nsw i64 2, %231
  %add1739 = add nsw i64 0, %mul1738
  %mul1740 = mul nsw i64 0, %add1739
  %add1741 = add nsw i64 %mul1740, 0
  br label %cond.end.1742

cond.end.1742:                                    ; preds = %cond.false.1737, %cond.true.1718
  %cond1743 = phi i64 [ %sub1736, %cond.true.1718 ], [ %add1741, %cond.false.1737 ]
  %div1744 = sdiv i64 %cond1743, 8
  %cmp1745 = icmp slt i64 %mul1711, %div1744
  br i1 %cmp1745, label %cond.true.1791, label %lor.lhs.false.1774

cond.false.1747:                                  ; preds = %cond.false.1706
  %232 = load i64, i64* %length, align 8
  %mul1748 = mul nsw i64 2, %232
  %add1749 = add nsw i64 0, %mul1748
  %mul1750 = mul nsw i64 0, %add1749
  %sub1751 = sub nsw i64 %mul1750, 1
  %cmp1752 = icmp slt i64 %sub1751, 0
  br i1 %cmp1752, label %cond.true.1754, label %cond.false.1763

cond.true.1754:                                   ; preds = %cond.false.1747
  %233 = load i64, i64* %length, align 8
  %mul1755 = mul nsw i64 2, %233
  %add1756 = add nsw i64 0, %mul1755
  %mul1757 = mul nsw i64 0, %add1756
  %add1758 = add nsw i64 %mul1757, 1
  %shl1759 = shl i64 %add1758, 62
  %sub1760 = sub nsw i64 %shl1759, 1
  %mul1761 = mul nsw i64 %sub1760, 2
  %add1762 = add nsw i64 %mul1761, 1
  br label %cond.end.1768

cond.false.1763:                                  ; preds = %cond.false.1747
  %234 = load i64, i64* %length, align 8
  %mul1764 = mul nsw i64 2, %234
  %add1765 = add nsw i64 0, %mul1764
  %mul1766 = mul nsw i64 0, %add1765
  %sub1767 = sub nsw i64 %mul1766, 1
  br label %cond.end.1768

cond.end.1768:                                    ; preds = %cond.false.1763, %cond.true.1754
  %cond1769 = phi i64 [ %add1762, %cond.true.1754 ], [ %sub1767, %cond.false.1763 ]
  %div1770 = sdiv i64 %cond1769, 8
  %235 = load i64, i64* %length, align 8
  %mul1771 = mul nsw i64 2, %235
  %cmp1772 = icmp slt i64 %div1770, %mul1771
  br i1 %cmp1772, label %cond.true.1791, label %lor.lhs.false.1774

lor.lhs.false.1774:                               ; preds = %cond.end.1768, %cond.end.1742, %cond.true.1705, %cond.end.1698, %cond.true.1666, %cond.end.1660
  %236 = load i64, i64* %length, align 8
  %mul1775 = mul nsw i64 2, %236
  %mul1776 = mul nsw i64 %mul1775, 8
  %mul1777 = mul nsw i64 0, %mul1776
  %sub1778 = sub nsw i64 %mul1777, 1
  %cmp1779 = icmp slt i64 %sub1778, 0
  br i1 %cmp1779, label %land.lhs.true.1781, label %lor.lhs.false.1786

land.lhs.true.1781:                               ; preds = %lor.lhs.false.1774
  %237 = load i64, i64* %length, align 8
  %mul1782 = mul nsw i64 2, %237
  %mul1783 = mul nsw i64 %mul1782, 8
  %cmp1784 = icmp slt i64 %mul1783, -9223372036854775808
  br i1 %cmp1784, label %cond.true.1791, label %lor.lhs.false.1786

lor.lhs.false.1786:                               ; preds = %land.lhs.true.1781, %lor.lhs.false.1774
  %238 = load i64, i64* %length, align 8
  %mul1787 = mul nsw i64 2, %238
  %mul1788 = mul nsw i64 %mul1787, 8
  %cmp1789 = icmp slt i64 9223372036854775807, %mul1788
  br i1 %cmp1789, label %cond.true.1791, label %cond.false.1806

cond.true.1791:                                   ; preds = %lor.lhs.false.1786, %land.lhs.true.1781, %cond.end.1768, %cond.end.1742, %cond.true.1705, %cond.end.1698, %cond.true.1666, %cond.end.1660, %land.lhs.true.1629
  %239 = load i64, i64* %length, align 8
  %mul1792 = mul nsw i64 2, %239
  %mul1793 = mul i64 %mul1792, 8
  %cmp1794 = icmp ule i64 %mul1793, 9223372036854775807
  br i1 %cmp1794, label %cond.true.1796, label %cond.false.1799

cond.true.1796:                                   ; preds = %cond.true.1791
  %240 = load i64, i64* %length, align 8
  %mul1797 = mul nsw i64 2, %240
  %mul1798 = mul i64 %mul1797, 8
  br label %cond.end.1804

cond.false.1799:                                  ; preds = %cond.true.1791
  %241 = load i64, i64* %length, align 8
  %mul1800 = mul nsw i64 2, %241
  %mul1801 = mul i64 %mul1800, 8
  %sub1802 = sub i64 %mul1801, -9223372036854775808
  %add1803 = add nsw i64 %sub1802, -9223372036854775808
  br label %cond.end.1804

cond.end.1804:                                    ; preds = %cond.false.1799, %cond.true.1796
  %cond1805 = phi i64 [ %mul1798, %cond.true.1796 ], [ %add1803, %cond.false.1799 ]
  store i64 %cond1805, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2506, label %lor.lhs.false.2503

cond.false.1806:                                  ; preds = %lor.lhs.false.1786
  %242 = load i64, i64* %length, align 8
  %mul1807 = mul nsw i64 2, %242
  %mul1808 = mul i64 %mul1807, 8
  %cmp1809 = icmp ule i64 %mul1808, 9223372036854775807
  br i1 %cmp1809, label %cond.true.1811, label %cond.false.1814

cond.true.1811:                                   ; preds = %cond.false.1806
  %243 = load i64, i64* %length, align 8
  %mul1812 = mul nsw i64 2, %243
  %mul1813 = mul i64 %mul1812, 8
  br label %cond.end.1819

cond.false.1814:                                  ; preds = %cond.false.1806
  %244 = load i64, i64* %length, align 8
  %mul1815 = mul nsw i64 2, %244
  %mul1816 = mul i64 %mul1815, 8
  %sub1817 = sub i64 %mul1816, -9223372036854775808
  %add1818 = add nsw i64 %sub1817, -9223372036854775808
  br label %cond.end.1819

cond.end.1819:                                    ; preds = %cond.false.1814, %cond.true.1811
  %cond1820 = phi i64 [ %mul1813, %cond.true.1811 ], [ %add1818, %cond.false.1814 ]
  store i64 %cond1820, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2506, label %lor.lhs.false.2503

cond.false.1821:                                  ; preds = %cond.true.1593
  %245 = load i64, i64* %length, align 8
  %mul1822 = mul nsw i64 2, %245
  %add1823 = add nsw i64 0, %mul1822
  %mul1824 = mul nsw i64 0, %add1823
  %sub1825 = sub nsw i64 %mul1824, 1
  %cmp1826 = icmp slt i64 %sub1825, 0
  br i1 %cmp1826, label %cond.true.1828, label %cond.false.1847

cond.true.1828:                                   ; preds = %cond.false.1821
  %246 = load i64, i64* %length, align 8
  %mul1829 = mul nsw i64 2, %246
  %add1830 = add nsw i64 0, %mul1829
  %mul1831 = mul nsw i64 0, %add1830
  %add1832 = add nsw i64 %mul1831, 0
  %neg1833 = xor i64 %add1832, -1
  %cmp1834 = icmp eq i64 %neg1833, -1
  %conv1835 = zext i1 %cmp1834 to i32
  %sub1836 = sub nsw i32 0, %conv1835
  %conv1837 = sext i32 %sub1836 to i64
  %247 = load i64, i64* %length, align 8
  %mul1838 = mul nsw i64 2, %247
  %add1839 = add nsw i64 0, %mul1838
  %mul1840 = mul nsw i64 0, %add1839
  %add1841 = add nsw i64 %mul1840, 1
  %shl1842 = shl i64 %add1841, 62
  %sub1843 = sub nsw i64 %shl1842, 1
  %mul1844 = mul nsw i64 %sub1843, 2
  %add1845 = add nsw i64 %mul1844, 1
  %sub1846 = sub nsw i64 %conv1837, %add1845
  br label %cond.end.1852

cond.false.1847:                                  ; preds = %cond.false.1821
  %248 = load i64, i64* %length, align 8
  %mul1848 = mul nsw i64 2, %248
  %add1849 = add nsw i64 0, %mul1848
  %mul1850 = mul nsw i64 0, %add1849
  %add1851 = add nsw i64 %mul1850, 0
  br label %cond.end.1852

cond.end.1852:                                    ; preds = %cond.false.1847, %cond.true.1828
  %cond1853 = phi i64 [ %sub1846, %cond.true.1828 ], [ %add1851, %cond.false.1847 ]
  %cmp1854 = icmp eq i64 %cond1853, 0
  br i1 %cmp1854, label %land.lhs.true.1856, label %lor.lhs.false.1860

land.lhs.true.1856:                               ; preds = %cond.end.1852
  %249 = load i64, i64* %length, align 8
  %mul1857 = mul nsw i64 2, %249
  %cmp1858 = icmp slt i64 %mul1857, 0
  br i1 %cmp1858, label %cond.true.2018, label %lor.lhs.false.1860

lor.lhs.false.1860:                               ; preds = %land.lhs.true.1856, %cond.end.1852
  br i1 false, label %cond.true.1861, label %cond.false.1931

cond.true.1861:                                   ; preds = %lor.lhs.false.1860
  %250 = load i64, i64* %length, align 8
  %mul1862 = mul nsw i64 2, %250
  %cmp1863 = icmp slt i64 %mul1862, 0
  br i1 %cmp1863, label %cond.true.1865, label %cond.false.1892

cond.true.1865:                                   ; preds = %cond.true.1861
  %251 = load i64, i64* %length, align 8
  %mul1866 = mul nsw i64 2, %251
  %252 = load i64, i64* %length, align 8
  %mul1867 = mul nsw i64 2, %252
  %add1868 = add nsw i64 0, %mul1867
  %mul1869 = mul nsw i64 0, %add1868
  %sub1870 = sub nsw i64 %mul1869, 1
  %cmp1871 = icmp slt i64 %sub1870, 0
  br i1 %cmp1871, label %cond.true.1873, label %cond.false.1882

cond.true.1873:                                   ; preds = %cond.true.1865
  %253 = load i64, i64* %length, align 8
  %mul1874 = mul nsw i64 2, %253
  %add1875 = add nsw i64 0, %mul1874
  %mul1876 = mul nsw i64 0, %add1875
  %add1877 = add nsw i64 %mul1876, 1
  %shl1878 = shl i64 %add1877, 62
  %sub1879 = sub nsw i64 %shl1878, 1
  %mul1880 = mul nsw i64 %sub1879, 2
  %add1881 = add nsw i64 %mul1880, 1
  br label %cond.end.1887

cond.false.1882:                                  ; preds = %cond.true.1865
  %254 = load i64, i64* %length, align 8
  %mul1883 = mul nsw i64 2, %254
  %add1884 = add nsw i64 0, %mul1883
  %mul1885 = mul nsw i64 0, %add1884
  %sub1886 = sub nsw i64 %mul1885, 1
  br label %cond.end.1887

cond.end.1887:                                    ; preds = %cond.false.1882, %cond.true.1873
  %cond1888 = phi i64 [ %add1881, %cond.true.1873 ], [ %sub1886, %cond.false.1882 ]
  %div1889 = sdiv i64 %cond1888, 8
  %cmp1890 = icmp slt i64 %mul1866, %div1889
  br i1 %cmp1890, label %cond.true.2018, label %lor.lhs.false.2001

cond.false.1892:                                  ; preds = %cond.true.1861
  br i1 false, label %cond.true.1893, label %cond.false.1894

cond.true.1893:                                   ; preds = %cond.false.1892
  br i1 false, label %cond.true.2018, label %lor.lhs.false.2001

cond.false.1894:                                  ; preds = %cond.false.1892
  %255 = load i64, i64* %length, align 8
  %mul1895 = mul nsw i64 2, %255
  %add1896 = add nsw i64 0, %mul1895
  %mul1897 = mul nsw i64 0, %add1896
  %sub1898 = sub nsw i64 %mul1897, 1
  %cmp1899 = icmp slt i64 %sub1898, 0
  br i1 %cmp1899, label %cond.true.1901, label %cond.false.1920

cond.true.1901:                                   ; preds = %cond.false.1894
  %256 = load i64, i64* %length, align 8
  %mul1902 = mul nsw i64 2, %256
  %add1903 = add nsw i64 0, %mul1902
  %mul1904 = mul nsw i64 0, %add1903
  %add1905 = add nsw i64 %mul1904, 0
  %neg1906 = xor i64 %add1905, -1
  %cmp1907 = icmp eq i64 %neg1906, -1
  %conv1908 = zext i1 %cmp1907 to i32
  %sub1909 = sub nsw i32 0, %conv1908
  %conv1910 = sext i32 %sub1909 to i64
  %257 = load i64, i64* %length, align 8
  %mul1911 = mul nsw i64 2, %257
  %add1912 = add nsw i64 0, %mul1911
  %mul1913 = mul nsw i64 0, %add1912
  %add1914 = add nsw i64 %mul1913, 1
  %shl1915 = shl i64 %add1914, 62
  %sub1916 = sub nsw i64 %shl1915, 1
  %mul1917 = mul nsw i64 %sub1916, 2
  %add1918 = add nsw i64 %mul1917, 1
  %sub1919 = sub nsw i64 %conv1910, %add1918
  br label %cond.end.1925

cond.false.1920:                                  ; preds = %cond.false.1894
  %258 = load i64, i64* %length, align 8
  %mul1921 = mul nsw i64 2, %258
  %add1922 = add nsw i64 0, %mul1921
  %mul1923 = mul nsw i64 0, %add1922
  %add1924 = add nsw i64 %mul1923, 0
  br label %cond.end.1925

cond.end.1925:                                    ; preds = %cond.false.1920, %cond.true.1901
  %cond1926 = phi i64 [ %sub1919, %cond.true.1901 ], [ %add1924, %cond.false.1920 ]
  %div1927 = sdiv i64 %cond1926, 8
  %259 = load i64, i64* %length, align 8
  %mul1928 = mul nsw i64 2, %259
  %cmp1929 = icmp slt i64 %div1927, %mul1928
  br i1 %cmp1929, label %cond.true.2018, label %lor.lhs.false.2001

cond.false.1931:                                  ; preds = %lor.lhs.false.1860
  br i1 false, label %cond.true.1932, label %cond.false.1933

cond.true.1932:                                   ; preds = %cond.false.1931
  br i1 false, label %cond.true.2018, label %lor.lhs.false.2001

cond.false.1933:                                  ; preds = %cond.false.1931
  %260 = load i64, i64* %length, align 8
  %mul1934 = mul nsw i64 2, %260
  %cmp1935 = icmp slt i64 %mul1934, 0
  br i1 %cmp1935, label %cond.true.1937, label %cond.false.1974

cond.true.1937:                                   ; preds = %cond.false.1933
  %261 = load i64, i64* %length, align 8
  %mul1938 = mul nsw i64 2, %261
  %262 = load i64, i64* %length, align 8
  %mul1939 = mul nsw i64 2, %262
  %add1940 = add nsw i64 0, %mul1939
  %mul1941 = mul nsw i64 0, %add1940
  %sub1942 = sub nsw i64 %mul1941, 1
  %cmp1943 = icmp slt i64 %sub1942, 0
  br i1 %cmp1943, label %cond.true.1945, label %cond.false.1964

cond.true.1945:                                   ; preds = %cond.true.1937
  %263 = load i64, i64* %length, align 8
  %mul1946 = mul nsw i64 2, %263
  %add1947 = add nsw i64 0, %mul1946
  %mul1948 = mul nsw i64 0, %add1947
  %add1949 = add nsw i64 %mul1948, 0
  %neg1950 = xor i64 %add1949, -1
  %cmp1951 = icmp eq i64 %neg1950, -1
  %conv1952 = zext i1 %cmp1951 to i32
  %sub1953 = sub nsw i32 0, %conv1952
  %conv1954 = sext i32 %sub1953 to i64
  %264 = load i64, i64* %length, align 8
  %mul1955 = mul nsw i64 2, %264
  %add1956 = add nsw i64 0, %mul1955
  %mul1957 = mul nsw i64 0, %add1956
  %add1958 = add nsw i64 %mul1957, 1
  %shl1959 = shl i64 %add1958, 62
  %sub1960 = sub nsw i64 %shl1959, 1
  %mul1961 = mul nsw i64 %sub1960, 2
  %add1962 = add nsw i64 %mul1961, 1
  %sub1963 = sub nsw i64 %conv1954, %add1962
  br label %cond.end.1969

cond.false.1964:                                  ; preds = %cond.true.1937
  %265 = load i64, i64* %length, align 8
  %mul1965 = mul nsw i64 2, %265
  %add1966 = add nsw i64 0, %mul1965
  %mul1967 = mul nsw i64 0, %add1966
  %add1968 = add nsw i64 %mul1967, 0
  br label %cond.end.1969

cond.end.1969:                                    ; preds = %cond.false.1964, %cond.true.1945
  %cond1970 = phi i64 [ %sub1963, %cond.true.1945 ], [ %add1968, %cond.false.1964 ]
  %div1971 = sdiv i64 %cond1970, 8
  %cmp1972 = icmp slt i64 %mul1938, %div1971
  br i1 %cmp1972, label %cond.true.2018, label %lor.lhs.false.2001

cond.false.1974:                                  ; preds = %cond.false.1933
  %266 = load i64, i64* %length, align 8
  %mul1975 = mul nsw i64 2, %266
  %add1976 = add nsw i64 0, %mul1975
  %mul1977 = mul nsw i64 0, %add1976
  %sub1978 = sub nsw i64 %mul1977, 1
  %cmp1979 = icmp slt i64 %sub1978, 0
  br i1 %cmp1979, label %cond.true.1981, label %cond.false.1990

cond.true.1981:                                   ; preds = %cond.false.1974
  %267 = load i64, i64* %length, align 8
  %mul1982 = mul nsw i64 2, %267
  %add1983 = add nsw i64 0, %mul1982
  %mul1984 = mul nsw i64 0, %add1983
  %add1985 = add nsw i64 %mul1984, 1
  %shl1986 = shl i64 %add1985, 62
  %sub1987 = sub nsw i64 %shl1986, 1
  %mul1988 = mul nsw i64 %sub1987, 2
  %add1989 = add nsw i64 %mul1988, 1
  br label %cond.end.1995

cond.false.1990:                                  ; preds = %cond.false.1974
  %268 = load i64, i64* %length, align 8
  %mul1991 = mul nsw i64 2, %268
  %add1992 = add nsw i64 0, %mul1991
  %mul1993 = mul nsw i64 0, %add1992
  %sub1994 = sub nsw i64 %mul1993, 1
  br label %cond.end.1995

cond.end.1995:                                    ; preds = %cond.false.1990, %cond.true.1981
  %cond1996 = phi i64 [ %add1989, %cond.true.1981 ], [ %sub1994, %cond.false.1990 ]
  %div1997 = sdiv i64 %cond1996, 8
  %269 = load i64, i64* %length, align 8
  %mul1998 = mul nsw i64 2, %269
  %cmp1999 = icmp slt i64 %div1997, %mul1998
  br i1 %cmp1999, label %cond.true.2018, label %lor.lhs.false.2001

lor.lhs.false.2001:                               ; preds = %cond.end.1995, %cond.end.1969, %cond.true.1932, %cond.end.1925, %cond.true.1893, %cond.end.1887
  %270 = load i64, i64* %length, align 8
  %mul2002 = mul nsw i64 2, %270
  %mul2003 = mul nsw i64 %mul2002, 8
  %mul2004 = mul nsw i64 0, %mul2003
  %sub2005 = sub nsw i64 %mul2004, 1
  %cmp2006 = icmp slt i64 %sub2005, 0
  br i1 %cmp2006, label %land.lhs.true.2008, label %lor.lhs.false.2013

land.lhs.true.2008:                               ; preds = %lor.lhs.false.2001
  %271 = load i64, i64* %length, align 8
  %mul2009 = mul nsw i64 2, %271
  %mul2010 = mul nsw i64 %mul2009, 8
  %cmp2011 = icmp slt i64 %mul2010, -9223372036854775808
  br i1 %cmp2011, label %cond.true.2018, label %lor.lhs.false.2013

lor.lhs.false.2013:                               ; preds = %land.lhs.true.2008, %lor.lhs.false.2001
  %272 = load i64, i64* %length, align 8
  %mul2014 = mul nsw i64 2, %272
  %mul2015 = mul nsw i64 %mul2014, 8
  %cmp2016 = icmp slt i64 9223372036854775807, %mul2015
  br i1 %cmp2016, label %cond.true.2018, label %cond.false.2033

cond.true.2018:                                   ; preds = %lor.lhs.false.2013, %land.lhs.true.2008, %cond.end.1995, %cond.end.1969, %cond.true.1932, %cond.end.1925, %cond.true.1893, %cond.end.1887, %land.lhs.true.1856
  %273 = load i64, i64* %length, align 8
  %mul2019 = mul nsw i64 2, %273
  %mul2020 = mul i64 %mul2019, 8
  %cmp2021 = icmp ule i64 %mul2020, 9223372036854775807
  br i1 %cmp2021, label %cond.true.2023, label %cond.false.2026

cond.true.2023:                                   ; preds = %cond.true.2018
  %274 = load i64, i64* %length, align 8
  %mul2024 = mul nsw i64 2, %274
  %mul2025 = mul i64 %mul2024, 8
  br label %cond.end.2031

cond.false.2026:                                  ; preds = %cond.true.2018
  %275 = load i64, i64* %length, align 8
  %mul2027 = mul nsw i64 2, %275
  %mul2028 = mul i64 %mul2027, 8
  %sub2029 = sub i64 %mul2028, -9223372036854775808
  %add2030 = add nsw i64 %sub2029, -9223372036854775808
  br label %cond.end.2031

cond.end.2031:                                    ; preds = %cond.false.2026, %cond.true.2023
  %cond2032 = phi i64 [ %mul2025, %cond.true.2023 ], [ %add2030, %cond.false.2026 ]
  store i64 %cond2032, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2506, label %lor.lhs.false.2503

cond.false.2033:                                  ; preds = %lor.lhs.false.2013
  %276 = load i64, i64* %length, align 8
  %mul2034 = mul nsw i64 2, %276
  %mul2035 = mul i64 %mul2034, 8
  %cmp2036 = icmp ule i64 %mul2035, 9223372036854775807
  br i1 %cmp2036, label %cond.true.2038, label %cond.false.2041

cond.true.2038:                                   ; preds = %cond.false.2033
  %277 = load i64, i64* %length, align 8
  %mul2039 = mul nsw i64 2, %277
  %mul2040 = mul i64 %mul2039, 8
  br label %cond.end.2046

cond.false.2041:                                  ; preds = %cond.false.2033
  %278 = load i64, i64* %length, align 8
  %mul2042 = mul nsw i64 2, %278
  %mul2043 = mul i64 %mul2042, 8
  %sub2044 = sub i64 %mul2043, -9223372036854775808
  %add2045 = add nsw i64 %sub2044, -9223372036854775808
  br label %cond.end.2046

cond.end.2046:                                    ; preds = %cond.false.2041, %cond.true.2038
  %cond2047 = phi i64 [ %mul2040, %cond.true.2038 ], [ %add2045, %cond.false.2041 ]
  store i64 %cond2047, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2506, label %lor.lhs.false.2503

cond.false.2048:                                  ; preds = %cond.false.1592
  br i1 false, label %cond.true.2049, label %cond.false.2276

cond.true.2049:                                   ; preds = %cond.false.2048
  %279 = load i64, i64* %length, align 8
  %mul2050 = mul nsw i64 2, %279
  %add2051 = add nsw i64 0, %mul2050
  %mul2052 = mul nsw i64 0, %add2051
  %sub2053 = sub nsw i64 %mul2052, 1
  %cmp2054 = icmp slt i64 %sub2053, 0
  br i1 %cmp2054, label %cond.true.2056, label %cond.false.2075

cond.true.2056:                                   ; preds = %cond.true.2049
  %280 = load i64, i64* %length, align 8
  %mul2057 = mul nsw i64 2, %280
  %add2058 = add nsw i64 0, %mul2057
  %mul2059 = mul nsw i64 0, %add2058
  %add2060 = add nsw i64 %mul2059, 0
  %neg2061 = xor i64 %add2060, -1
  %cmp2062 = icmp eq i64 %neg2061, -1
  %conv2063 = zext i1 %cmp2062 to i32
  %sub2064 = sub nsw i32 0, %conv2063
  %conv2065 = sext i32 %sub2064 to i64
  %281 = load i64, i64* %length, align 8
  %mul2066 = mul nsw i64 2, %281
  %add2067 = add nsw i64 0, %mul2066
  %mul2068 = mul nsw i64 0, %add2067
  %add2069 = add nsw i64 %mul2068, 1
  %shl2070 = shl i64 %add2069, 62
  %sub2071 = sub nsw i64 %shl2070, 1
  %mul2072 = mul nsw i64 %sub2071, 2
  %add2073 = add nsw i64 %mul2072, 1
  %sub2074 = sub nsw i64 %conv2065, %add2073
  br label %cond.end.2080

cond.false.2075:                                  ; preds = %cond.true.2049
  %282 = load i64, i64* %length, align 8
  %mul2076 = mul nsw i64 2, %282
  %add2077 = add nsw i64 0, %mul2076
  %mul2078 = mul nsw i64 0, %add2077
  %add2079 = add nsw i64 %mul2078, 0
  br label %cond.end.2080

cond.end.2080:                                    ; preds = %cond.false.2075, %cond.true.2056
  %cond2081 = phi i64 [ %sub2074, %cond.true.2056 ], [ %add2079, %cond.false.2075 ]
  %cmp2082 = icmp eq i64 %cond2081, 0
  br i1 %cmp2082, label %land.lhs.true.2084, label %lor.lhs.false.2088

land.lhs.true.2084:                               ; preds = %cond.end.2080
  %283 = load i64, i64* %length, align 8
  %mul2085 = mul nsw i64 2, %283
  %cmp2086 = icmp slt i64 %mul2085, 0
  br i1 %cmp2086, label %cond.true.2246, label %lor.lhs.false.2088

lor.lhs.false.2088:                               ; preds = %land.lhs.true.2084, %cond.end.2080
  br i1 false, label %cond.true.2089, label %cond.false.2159

cond.true.2089:                                   ; preds = %lor.lhs.false.2088
  %284 = load i64, i64* %length, align 8
  %mul2090 = mul nsw i64 2, %284
  %cmp2091 = icmp slt i64 %mul2090, 0
  br i1 %cmp2091, label %cond.true.2093, label %cond.false.2120

cond.true.2093:                                   ; preds = %cond.true.2089
  %285 = load i64, i64* %length, align 8
  %mul2094 = mul nsw i64 2, %285
  %286 = load i64, i64* %length, align 8
  %mul2095 = mul nsw i64 2, %286
  %add2096 = add nsw i64 0, %mul2095
  %mul2097 = mul nsw i64 0, %add2096
  %sub2098 = sub nsw i64 %mul2097, 1
  %cmp2099 = icmp slt i64 %sub2098, 0
  br i1 %cmp2099, label %cond.true.2101, label %cond.false.2110

cond.true.2101:                                   ; preds = %cond.true.2093
  %287 = load i64, i64* %length, align 8
  %mul2102 = mul nsw i64 2, %287
  %add2103 = add nsw i64 0, %mul2102
  %mul2104 = mul nsw i64 0, %add2103
  %add2105 = add nsw i64 %mul2104, 1
  %shl2106 = shl i64 %add2105, 62
  %sub2107 = sub nsw i64 %shl2106, 1
  %mul2108 = mul nsw i64 %sub2107, 2
  %add2109 = add nsw i64 %mul2108, 1
  br label %cond.end.2115

cond.false.2110:                                  ; preds = %cond.true.2093
  %288 = load i64, i64* %length, align 8
  %mul2111 = mul nsw i64 2, %288
  %add2112 = add nsw i64 0, %mul2111
  %mul2113 = mul nsw i64 0, %add2112
  %sub2114 = sub nsw i64 %mul2113, 1
  br label %cond.end.2115

cond.end.2115:                                    ; preds = %cond.false.2110, %cond.true.2101
  %cond2116 = phi i64 [ %add2109, %cond.true.2101 ], [ %sub2114, %cond.false.2110 ]
  %div2117 = sdiv i64 %cond2116, 8
  %cmp2118 = icmp slt i64 %mul2094, %div2117
  br i1 %cmp2118, label %cond.true.2246, label %lor.lhs.false.2229

cond.false.2120:                                  ; preds = %cond.true.2089
  br i1 false, label %cond.true.2121, label %cond.false.2122

cond.true.2121:                                   ; preds = %cond.false.2120
  br i1 false, label %cond.true.2246, label %lor.lhs.false.2229

cond.false.2122:                                  ; preds = %cond.false.2120
  %289 = load i64, i64* %length, align 8
  %mul2123 = mul nsw i64 2, %289
  %add2124 = add nsw i64 0, %mul2123
  %mul2125 = mul nsw i64 0, %add2124
  %sub2126 = sub nsw i64 %mul2125, 1
  %cmp2127 = icmp slt i64 %sub2126, 0
  br i1 %cmp2127, label %cond.true.2129, label %cond.false.2148

cond.true.2129:                                   ; preds = %cond.false.2122
  %290 = load i64, i64* %length, align 8
  %mul2130 = mul nsw i64 2, %290
  %add2131 = add nsw i64 0, %mul2130
  %mul2132 = mul nsw i64 0, %add2131
  %add2133 = add nsw i64 %mul2132, 0
  %neg2134 = xor i64 %add2133, -1
  %cmp2135 = icmp eq i64 %neg2134, -1
  %conv2136 = zext i1 %cmp2135 to i32
  %sub2137 = sub nsw i32 0, %conv2136
  %conv2138 = sext i32 %sub2137 to i64
  %291 = load i64, i64* %length, align 8
  %mul2139 = mul nsw i64 2, %291
  %add2140 = add nsw i64 0, %mul2139
  %mul2141 = mul nsw i64 0, %add2140
  %add2142 = add nsw i64 %mul2141, 1
  %shl2143 = shl i64 %add2142, 62
  %sub2144 = sub nsw i64 %shl2143, 1
  %mul2145 = mul nsw i64 %sub2144, 2
  %add2146 = add nsw i64 %mul2145, 1
  %sub2147 = sub nsw i64 %conv2138, %add2146
  br label %cond.end.2153

cond.false.2148:                                  ; preds = %cond.false.2122
  %292 = load i64, i64* %length, align 8
  %mul2149 = mul nsw i64 2, %292
  %add2150 = add nsw i64 0, %mul2149
  %mul2151 = mul nsw i64 0, %add2150
  %add2152 = add nsw i64 %mul2151, 0
  br label %cond.end.2153

cond.end.2153:                                    ; preds = %cond.false.2148, %cond.true.2129
  %cond2154 = phi i64 [ %sub2147, %cond.true.2129 ], [ %add2152, %cond.false.2148 ]
  %div2155 = sdiv i64 %cond2154, 8
  %293 = load i64, i64* %length, align 8
  %mul2156 = mul nsw i64 2, %293
  %cmp2157 = icmp slt i64 %div2155, %mul2156
  br i1 %cmp2157, label %cond.true.2246, label %lor.lhs.false.2229

cond.false.2159:                                  ; preds = %lor.lhs.false.2088
  br i1 false, label %cond.true.2160, label %cond.false.2161

cond.true.2160:                                   ; preds = %cond.false.2159
  br i1 false, label %cond.true.2246, label %lor.lhs.false.2229

cond.false.2161:                                  ; preds = %cond.false.2159
  %294 = load i64, i64* %length, align 8
  %mul2162 = mul nsw i64 2, %294
  %cmp2163 = icmp slt i64 %mul2162, 0
  br i1 %cmp2163, label %cond.true.2165, label %cond.false.2202

cond.true.2165:                                   ; preds = %cond.false.2161
  %295 = load i64, i64* %length, align 8
  %mul2166 = mul nsw i64 2, %295
  %296 = load i64, i64* %length, align 8
  %mul2167 = mul nsw i64 2, %296
  %add2168 = add nsw i64 0, %mul2167
  %mul2169 = mul nsw i64 0, %add2168
  %sub2170 = sub nsw i64 %mul2169, 1
  %cmp2171 = icmp slt i64 %sub2170, 0
  br i1 %cmp2171, label %cond.true.2173, label %cond.false.2192

cond.true.2173:                                   ; preds = %cond.true.2165
  %297 = load i64, i64* %length, align 8
  %mul2174 = mul nsw i64 2, %297
  %add2175 = add nsw i64 0, %mul2174
  %mul2176 = mul nsw i64 0, %add2175
  %add2177 = add nsw i64 %mul2176, 0
  %neg2178 = xor i64 %add2177, -1
  %cmp2179 = icmp eq i64 %neg2178, -1
  %conv2180 = zext i1 %cmp2179 to i32
  %sub2181 = sub nsw i32 0, %conv2180
  %conv2182 = sext i32 %sub2181 to i64
  %298 = load i64, i64* %length, align 8
  %mul2183 = mul nsw i64 2, %298
  %add2184 = add nsw i64 0, %mul2183
  %mul2185 = mul nsw i64 0, %add2184
  %add2186 = add nsw i64 %mul2185, 1
  %shl2187 = shl i64 %add2186, 62
  %sub2188 = sub nsw i64 %shl2187, 1
  %mul2189 = mul nsw i64 %sub2188, 2
  %add2190 = add nsw i64 %mul2189, 1
  %sub2191 = sub nsw i64 %conv2182, %add2190
  br label %cond.end.2197

cond.false.2192:                                  ; preds = %cond.true.2165
  %299 = load i64, i64* %length, align 8
  %mul2193 = mul nsw i64 2, %299
  %add2194 = add nsw i64 0, %mul2193
  %mul2195 = mul nsw i64 0, %add2194
  %add2196 = add nsw i64 %mul2195, 0
  br label %cond.end.2197

cond.end.2197:                                    ; preds = %cond.false.2192, %cond.true.2173
  %cond2198 = phi i64 [ %sub2191, %cond.true.2173 ], [ %add2196, %cond.false.2192 ]
  %div2199 = sdiv i64 %cond2198, 8
  %cmp2200 = icmp slt i64 %mul2166, %div2199
  br i1 %cmp2200, label %cond.true.2246, label %lor.lhs.false.2229

cond.false.2202:                                  ; preds = %cond.false.2161
  %300 = load i64, i64* %length, align 8
  %mul2203 = mul nsw i64 2, %300
  %add2204 = add nsw i64 0, %mul2203
  %mul2205 = mul nsw i64 0, %add2204
  %sub2206 = sub nsw i64 %mul2205, 1
  %cmp2207 = icmp slt i64 %sub2206, 0
  br i1 %cmp2207, label %cond.true.2209, label %cond.false.2218

cond.true.2209:                                   ; preds = %cond.false.2202
  %301 = load i64, i64* %length, align 8
  %mul2210 = mul nsw i64 2, %301
  %add2211 = add nsw i64 0, %mul2210
  %mul2212 = mul nsw i64 0, %add2211
  %add2213 = add nsw i64 %mul2212, 1
  %shl2214 = shl i64 %add2213, 62
  %sub2215 = sub nsw i64 %shl2214, 1
  %mul2216 = mul nsw i64 %sub2215, 2
  %add2217 = add nsw i64 %mul2216, 1
  br label %cond.end.2223

cond.false.2218:                                  ; preds = %cond.false.2202
  %302 = load i64, i64* %length, align 8
  %mul2219 = mul nsw i64 2, %302
  %add2220 = add nsw i64 0, %mul2219
  %mul2221 = mul nsw i64 0, %add2220
  %sub2222 = sub nsw i64 %mul2221, 1
  br label %cond.end.2223

cond.end.2223:                                    ; preds = %cond.false.2218, %cond.true.2209
  %cond2224 = phi i64 [ %add2217, %cond.true.2209 ], [ %sub2222, %cond.false.2218 ]
  %div2225 = sdiv i64 %cond2224, 8
  %303 = load i64, i64* %length, align 8
  %mul2226 = mul nsw i64 2, %303
  %cmp2227 = icmp slt i64 %div2225, %mul2226
  br i1 %cmp2227, label %cond.true.2246, label %lor.lhs.false.2229

lor.lhs.false.2229:                               ; preds = %cond.end.2223, %cond.end.2197, %cond.true.2160, %cond.end.2153, %cond.true.2121, %cond.end.2115
  %304 = load i64, i64* %length, align 8
  %mul2230 = mul nsw i64 2, %304
  %mul2231 = mul nsw i64 %mul2230, 8
  %mul2232 = mul nsw i64 0, %mul2231
  %sub2233 = sub nsw i64 %mul2232, 1
  %cmp2234 = icmp slt i64 %sub2233, 0
  br i1 %cmp2234, label %land.lhs.true.2236, label %lor.lhs.false.2241

land.lhs.true.2236:                               ; preds = %lor.lhs.false.2229
  %305 = load i64, i64* %length, align 8
  %mul2237 = mul nsw i64 2, %305
  %mul2238 = mul nsw i64 %mul2237, 8
  %cmp2239 = icmp slt i64 %mul2238, -9223372036854775808
  br i1 %cmp2239, label %cond.true.2246, label %lor.lhs.false.2241

lor.lhs.false.2241:                               ; preds = %land.lhs.true.2236, %lor.lhs.false.2229
  %306 = load i64, i64* %length, align 8
  %mul2242 = mul nsw i64 2, %306
  %mul2243 = mul nsw i64 %mul2242, 8
  %cmp2244 = icmp slt i64 9223372036854775807, %mul2243
  br i1 %cmp2244, label %cond.true.2246, label %cond.false.2261

cond.true.2246:                                   ; preds = %lor.lhs.false.2241, %land.lhs.true.2236, %cond.end.2223, %cond.end.2197, %cond.true.2160, %cond.end.2153, %cond.true.2121, %cond.end.2115, %land.lhs.true.2084
  %307 = load i64, i64* %length, align 8
  %mul2247 = mul nsw i64 2, %307
  %mul2248 = mul i64 %mul2247, 8
  %cmp2249 = icmp ule i64 %mul2248, 9223372036854775807
  br i1 %cmp2249, label %cond.true.2251, label %cond.false.2254

cond.true.2251:                                   ; preds = %cond.true.2246
  %308 = load i64, i64* %length, align 8
  %mul2252 = mul nsw i64 2, %308
  %mul2253 = mul i64 %mul2252, 8
  br label %cond.end.2259

cond.false.2254:                                  ; preds = %cond.true.2246
  %309 = load i64, i64* %length, align 8
  %mul2255 = mul nsw i64 2, %309
  %mul2256 = mul i64 %mul2255, 8
  %sub2257 = sub i64 %mul2256, -9223372036854775808
  %add2258 = add nsw i64 %sub2257, -9223372036854775808
  br label %cond.end.2259

cond.end.2259:                                    ; preds = %cond.false.2254, %cond.true.2251
  %cond2260 = phi i64 [ %mul2253, %cond.true.2251 ], [ %add2258, %cond.false.2254 ]
  store i64 %cond2260, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2506, label %lor.lhs.false.2503

cond.false.2261:                                  ; preds = %lor.lhs.false.2241
  %310 = load i64, i64* %length, align 8
  %mul2262 = mul nsw i64 2, %310
  %mul2263 = mul i64 %mul2262, 8
  %cmp2264 = icmp ule i64 %mul2263, 9223372036854775807
  br i1 %cmp2264, label %cond.true.2266, label %cond.false.2269

cond.true.2266:                                   ; preds = %cond.false.2261
  %311 = load i64, i64* %length, align 8
  %mul2267 = mul nsw i64 2, %311
  %mul2268 = mul i64 %mul2267, 8
  br label %cond.end.2274

cond.false.2269:                                  ; preds = %cond.false.2261
  %312 = load i64, i64* %length, align 8
  %mul2270 = mul nsw i64 2, %312
  %mul2271 = mul i64 %mul2270, 8
  %sub2272 = sub i64 %mul2271, -9223372036854775808
  %add2273 = add nsw i64 %sub2272, -9223372036854775808
  br label %cond.end.2274

cond.end.2274:                                    ; preds = %cond.false.2269, %cond.true.2266
  %cond2275 = phi i64 [ %mul2268, %cond.true.2266 ], [ %add2273, %cond.false.2269 ]
  store i64 %cond2275, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2506, label %lor.lhs.false.2503

cond.false.2276:                                  ; preds = %cond.false.2048
  %313 = load i64, i64* %length, align 8
  %mul2277 = mul nsw i64 2, %313
  %add2278 = add nsw i64 0, %mul2277
  %mul2279 = mul nsw i64 0, %add2278
  %sub2280 = sub nsw i64 %mul2279, 1
  %cmp2281 = icmp slt i64 %sub2280, 0
  br i1 %cmp2281, label %cond.true.2283, label %cond.false.2302

cond.true.2283:                                   ; preds = %cond.false.2276
  %314 = load i64, i64* %length, align 8
  %mul2284 = mul nsw i64 2, %314
  %add2285 = add nsw i64 0, %mul2284
  %mul2286 = mul nsw i64 0, %add2285
  %add2287 = add nsw i64 %mul2286, 0
  %neg2288 = xor i64 %add2287, -1
  %cmp2289 = icmp eq i64 %neg2288, -1
  %conv2290 = zext i1 %cmp2289 to i32
  %sub2291 = sub nsw i32 0, %conv2290
  %conv2292 = sext i32 %sub2291 to i64
  %315 = load i64, i64* %length, align 8
  %mul2293 = mul nsw i64 2, %315
  %add2294 = add nsw i64 0, %mul2293
  %mul2295 = mul nsw i64 0, %add2294
  %add2296 = add nsw i64 %mul2295, 1
  %shl2297 = shl i64 %add2296, 62
  %sub2298 = sub nsw i64 %shl2297, 1
  %mul2299 = mul nsw i64 %sub2298, 2
  %add2300 = add nsw i64 %mul2299, 1
  %sub2301 = sub nsw i64 %conv2292, %add2300
  br label %cond.end.2307

cond.false.2302:                                  ; preds = %cond.false.2276
  %316 = load i64, i64* %length, align 8
  %mul2303 = mul nsw i64 2, %316
  %add2304 = add nsw i64 0, %mul2303
  %mul2305 = mul nsw i64 0, %add2304
  %add2306 = add nsw i64 %mul2305, 0
  br label %cond.end.2307

cond.end.2307:                                    ; preds = %cond.false.2302, %cond.true.2283
  %cond2308 = phi i64 [ %sub2301, %cond.true.2283 ], [ %add2306, %cond.false.2302 ]
  %cmp2309 = icmp eq i64 %cond2308, 0
  br i1 %cmp2309, label %land.lhs.true.2311, label %lor.lhs.false.2315

land.lhs.true.2311:                               ; preds = %cond.end.2307
  %317 = load i64, i64* %length, align 8
  %mul2312 = mul nsw i64 2, %317
  %cmp2313 = icmp slt i64 %mul2312, 0
  br i1 %cmp2313, label %cond.true.2473, label %lor.lhs.false.2315

lor.lhs.false.2315:                               ; preds = %land.lhs.true.2311, %cond.end.2307
  br i1 false, label %cond.true.2316, label %cond.false.2386

cond.true.2316:                                   ; preds = %lor.lhs.false.2315
  %318 = load i64, i64* %length, align 8
  %mul2317 = mul nsw i64 2, %318
  %cmp2318 = icmp slt i64 %mul2317, 0
  br i1 %cmp2318, label %cond.true.2320, label %cond.false.2347

cond.true.2320:                                   ; preds = %cond.true.2316
  %319 = load i64, i64* %length, align 8
  %mul2321 = mul nsw i64 2, %319
  %320 = load i64, i64* %length, align 8
  %mul2322 = mul nsw i64 2, %320
  %add2323 = add nsw i64 0, %mul2322
  %mul2324 = mul nsw i64 0, %add2323
  %sub2325 = sub nsw i64 %mul2324, 1
  %cmp2326 = icmp slt i64 %sub2325, 0
  br i1 %cmp2326, label %cond.true.2328, label %cond.false.2337

cond.true.2328:                                   ; preds = %cond.true.2320
  %321 = load i64, i64* %length, align 8
  %mul2329 = mul nsw i64 2, %321
  %add2330 = add nsw i64 0, %mul2329
  %mul2331 = mul nsw i64 0, %add2330
  %add2332 = add nsw i64 %mul2331, 1
  %shl2333 = shl i64 %add2332, 62
  %sub2334 = sub nsw i64 %shl2333, 1
  %mul2335 = mul nsw i64 %sub2334, 2
  %add2336 = add nsw i64 %mul2335, 1
  br label %cond.end.2342

cond.false.2337:                                  ; preds = %cond.true.2320
  %322 = load i64, i64* %length, align 8
  %mul2338 = mul nsw i64 2, %322
  %add2339 = add nsw i64 0, %mul2338
  %mul2340 = mul nsw i64 0, %add2339
  %sub2341 = sub nsw i64 %mul2340, 1
  br label %cond.end.2342

cond.end.2342:                                    ; preds = %cond.false.2337, %cond.true.2328
  %cond2343 = phi i64 [ %add2336, %cond.true.2328 ], [ %sub2341, %cond.false.2337 ]
  %div2344 = sdiv i64 %cond2343, 8
  %cmp2345 = icmp slt i64 %mul2321, %div2344
  br i1 %cmp2345, label %cond.true.2473, label %lor.lhs.false.2456

cond.false.2347:                                  ; preds = %cond.true.2316
  br i1 false, label %cond.true.2348, label %cond.false.2349

cond.true.2348:                                   ; preds = %cond.false.2347
  br i1 false, label %cond.true.2473, label %lor.lhs.false.2456

cond.false.2349:                                  ; preds = %cond.false.2347
  %323 = load i64, i64* %length, align 8
  %mul2350 = mul nsw i64 2, %323
  %add2351 = add nsw i64 0, %mul2350
  %mul2352 = mul nsw i64 0, %add2351
  %sub2353 = sub nsw i64 %mul2352, 1
  %cmp2354 = icmp slt i64 %sub2353, 0
  br i1 %cmp2354, label %cond.true.2356, label %cond.false.2375

cond.true.2356:                                   ; preds = %cond.false.2349
  %324 = load i64, i64* %length, align 8
  %mul2357 = mul nsw i64 2, %324
  %add2358 = add nsw i64 0, %mul2357
  %mul2359 = mul nsw i64 0, %add2358
  %add2360 = add nsw i64 %mul2359, 0
  %neg2361 = xor i64 %add2360, -1
  %cmp2362 = icmp eq i64 %neg2361, -1
  %conv2363 = zext i1 %cmp2362 to i32
  %sub2364 = sub nsw i32 0, %conv2363
  %conv2365 = sext i32 %sub2364 to i64
  %325 = load i64, i64* %length, align 8
  %mul2366 = mul nsw i64 2, %325
  %add2367 = add nsw i64 0, %mul2366
  %mul2368 = mul nsw i64 0, %add2367
  %add2369 = add nsw i64 %mul2368, 1
  %shl2370 = shl i64 %add2369, 62
  %sub2371 = sub nsw i64 %shl2370, 1
  %mul2372 = mul nsw i64 %sub2371, 2
  %add2373 = add nsw i64 %mul2372, 1
  %sub2374 = sub nsw i64 %conv2365, %add2373
  br label %cond.end.2380

cond.false.2375:                                  ; preds = %cond.false.2349
  %326 = load i64, i64* %length, align 8
  %mul2376 = mul nsw i64 2, %326
  %add2377 = add nsw i64 0, %mul2376
  %mul2378 = mul nsw i64 0, %add2377
  %add2379 = add nsw i64 %mul2378, 0
  br label %cond.end.2380

cond.end.2380:                                    ; preds = %cond.false.2375, %cond.true.2356
  %cond2381 = phi i64 [ %sub2374, %cond.true.2356 ], [ %add2379, %cond.false.2375 ]
  %div2382 = sdiv i64 %cond2381, 8
  %327 = load i64, i64* %length, align 8
  %mul2383 = mul nsw i64 2, %327
  %cmp2384 = icmp slt i64 %div2382, %mul2383
  br i1 %cmp2384, label %cond.true.2473, label %lor.lhs.false.2456

cond.false.2386:                                  ; preds = %lor.lhs.false.2315
  br i1 false, label %cond.true.2387, label %cond.false.2388

cond.true.2387:                                   ; preds = %cond.false.2386
  br i1 false, label %cond.true.2473, label %lor.lhs.false.2456

cond.false.2388:                                  ; preds = %cond.false.2386
  %328 = load i64, i64* %length, align 8
  %mul2389 = mul nsw i64 2, %328
  %cmp2390 = icmp slt i64 %mul2389, 0
  br i1 %cmp2390, label %cond.true.2392, label %cond.false.2429

cond.true.2392:                                   ; preds = %cond.false.2388
  %329 = load i64, i64* %length, align 8
  %mul2393 = mul nsw i64 2, %329
  %330 = load i64, i64* %length, align 8
  %mul2394 = mul nsw i64 2, %330
  %add2395 = add nsw i64 0, %mul2394
  %mul2396 = mul nsw i64 0, %add2395
  %sub2397 = sub nsw i64 %mul2396, 1
  %cmp2398 = icmp slt i64 %sub2397, 0
  br i1 %cmp2398, label %cond.true.2400, label %cond.false.2419

cond.true.2400:                                   ; preds = %cond.true.2392
  %331 = load i64, i64* %length, align 8
  %mul2401 = mul nsw i64 2, %331
  %add2402 = add nsw i64 0, %mul2401
  %mul2403 = mul nsw i64 0, %add2402
  %add2404 = add nsw i64 %mul2403, 0
  %neg2405 = xor i64 %add2404, -1
  %cmp2406 = icmp eq i64 %neg2405, -1
  %conv2407 = zext i1 %cmp2406 to i32
  %sub2408 = sub nsw i32 0, %conv2407
  %conv2409 = sext i32 %sub2408 to i64
  %332 = load i64, i64* %length, align 8
  %mul2410 = mul nsw i64 2, %332
  %add2411 = add nsw i64 0, %mul2410
  %mul2412 = mul nsw i64 0, %add2411
  %add2413 = add nsw i64 %mul2412, 1
  %shl2414 = shl i64 %add2413, 62
  %sub2415 = sub nsw i64 %shl2414, 1
  %mul2416 = mul nsw i64 %sub2415, 2
  %add2417 = add nsw i64 %mul2416, 1
  %sub2418 = sub nsw i64 %conv2409, %add2417
  br label %cond.end.2424

cond.false.2419:                                  ; preds = %cond.true.2392
  %333 = load i64, i64* %length, align 8
  %mul2420 = mul nsw i64 2, %333
  %add2421 = add nsw i64 0, %mul2420
  %mul2422 = mul nsw i64 0, %add2421
  %add2423 = add nsw i64 %mul2422, 0
  br label %cond.end.2424

cond.end.2424:                                    ; preds = %cond.false.2419, %cond.true.2400
  %cond2425 = phi i64 [ %sub2418, %cond.true.2400 ], [ %add2423, %cond.false.2419 ]
  %div2426 = sdiv i64 %cond2425, 8
  %cmp2427 = icmp slt i64 %mul2393, %div2426
  br i1 %cmp2427, label %cond.true.2473, label %lor.lhs.false.2456

cond.false.2429:                                  ; preds = %cond.false.2388
  %334 = load i64, i64* %length, align 8
  %mul2430 = mul nsw i64 2, %334
  %add2431 = add nsw i64 0, %mul2430
  %mul2432 = mul nsw i64 0, %add2431
  %sub2433 = sub nsw i64 %mul2432, 1
  %cmp2434 = icmp slt i64 %sub2433, 0
  br i1 %cmp2434, label %cond.true.2436, label %cond.false.2445

cond.true.2436:                                   ; preds = %cond.false.2429
  %335 = load i64, i64* %length, align 8
  %mul2437 = mul nsw i64 2, %335
  %add2438 = add nsw i64 0, %mul2437
  %mul2439 = mul nsw i64 0, %add2438
  %add2440 = add nsw i64 %mul2439, 1
  %shl2441 = shl i64 %add2440, 62
  %sub2442 = sub nsw i64 %shl2441, 1
  %mul2443 = mul nsw i64 %sub2442, 2
  %add2444 = add nsw i64 %mul2443, 1
  br label %cond.end.2450

cond.false.2445:                                  ; preds = %cond.false.2429
  %336 = load i64, i64* %length, align 8
  %mul2446 = mul nsw i64 2, %336
  %add2447 = add nsw i64 0, %mul2446
  %mul2448 = mul nsw i64 0, %add2447
  %sub2449 = sub nsw i64 %mul2448, 1
  br label %cond.end.2450

cond.end.2450:                                    ; preds = %cond.false.2445, %cond.true.2436
  %cond2451 = phi i64 [ %add2444, %cond.true.2436 ], [ %sub2449, %cond.false.2445 ]
  %div2452 = sdiv i64 %cond2451, 8
  %337 = load i64, i64* %length, align 8
  %mul2453 = mul nsw i64 2, %337
  %cmp2454 = icmp slt i64 %div2452, %mul2453
  br i1 %cmp2454, label %cond.true.2473, label %lor.lhs.false.2456

lor.lhs.false.2456:                               ; preds = %cond.end.2450, %cond.end.2424, %cond.true.2387, %cond.end.2380, %cond.true.2348, %cond.end.2342
  %338 = load i64, i64* %length, align 8
  %mul2457 = mul nsw i64 2, %338
  %mul2458 = mul nsw i64 %mul2457, 8
  %mul2459 = mul nsw i64 0, %mul2458
  %sub2460 = sub nsw i64 %mul2459, 1
  %cmp2461 = icmp slt i64 %sub2460, 0
  br i1 %cmp2461, label %land.lhs.true.2463, label %lor.lhs.false.2468

land.lhs.true.2463:                               ; preds = %lor.lhs.false.2456
  %339 = load i64, i64* %length, align 8
  %mul2464 = mul nsw i64 2, %339
  %mul2465 = mul nsw i64 %mul2464, 8
  %cmp2466 = icmp slt i64 %mul2465, -9223372036854775808
  br i1 %cmp2466, label %cond.true.2473, label %lor.lhs.false.2468

lor.lhs.false.2468:                               ; preds = %land.lhs.true.2463, %lor.lhs.false.2456
  %340 = load i64, i64* %length, align 8
  %mul2469 = mul nsw i64 2, %340
  %mul2470 = mul nsw i64 %mul2469, 8
  %cmp2471 = icmp slt i64 9223372036854775807, %mul2470
  br i1 %cmp2471, label %cond.true.2473, label %cond.false.2488

cond.true.2473:                                   ; preds = %lor.lhs.false.2468, %land.lhs.true.2463, %cond.end.2450, %cond.end.2424, %cond.true.2387, %cond.end.2380, %cond.true.2348, %cond.end.2342, %land.lhs.true.2311
  %341 = load i64, i64* %length, align 8
  %mul2474 = mul nsw i64 2, %341
  %mul2475 = mul i64 %mul2474, 8
  %cmp2476 = icmp ule i64 %mul2475, 9223372036854775807
  br i1 %cmp2476, label %cond.true.2478, label %cond.false.2481

cond.true.2478:                                   ; preds = %cond.true.2473
  %342 = load i64, i64* %length, align 8
  %mul2479 = mul nsw i64 2, %342
  %mul2480 = mul i64 %mul2479, 8
  br label %cond.end.2486

cond.false.2481:                                  ; preds = %cond.true.2473
  %343 = load i64, i64* %length, align 8
  %mul2482 = mul nsw i64 2, %343
  %mul2483 = mul i64 %mul2482, 8
  %sub2484 = sub i64 %mul2483, -9223372036854775808
  %add2485 = add nsw i64 %sub2484, -9223372036854775808
  br label %cond.end.2486

cond.end.2486:                                    ; preds = %cond.false.2481, %cond.true.2478
  %cond2487 = phi i64 [ %mul2480, %cond.true.2478 ], [ %add2485, %cond.false.2481 ]
  store i64 %cond2487, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2506, label %lor.lhs.false.2503

cond.false.2488:                                  ; preds = %lor.lhs.false.2468
  %344 = load i64, i64* %length, align 8
  %mul2489 = mul nsw i64 2, %344
  %mul2490 = mul i64 %mul2489, 8
  %cmp2491 = icmp ule i64 %mul2490, 9223372036854775807
  br i1 %cmp2491, label %cond.true.2493, label %cond.false.2496

cond.true.2493:                                   ; preds = %cond.false.2488
  %345 = load i64, i64* %length, align 8
  %mul2494 = mul nsw i64 2, %345
  %mul2495 = mul i64 %mul2494, 8
  br label %cond.end.2501

cond.false.2496:                                  ; preds = %cond.false.2488
  %346 = load i64, i64* %length, align 8
  %mul2497 = mul nsw i64 2, %346
  %mul2498 = mul i64 %mul2497, 8
  %sub2499 = sub i64 %mul2498, -9223372036854775808
  %add2500 = add nsw i64 %sub2499, -9223372036854775808
  br label %cond.end.2501

cond.end.2501:                                    ; preds = %cond.false.2496, %cond.true.2493
  %cond2502 = phi i64 [ %mul2495, %cond.true.2493 ], [ %add2500, %cond.false.2496 ]
  store i64 %cond2502, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2506, label %lor.lhs.false.2503

lor.lhs.false.2503:                               ; preds = %cond.end.2501, %cond.end.2486, %cond.end.2274, %cond.end.2259, %cond.end.2046, %cond.end.2031, %cond.end.1819, %cond.end.1804, %cond.end.1589, %cond.end.1570, %cond.end.1354, %cond.end.1335, %cond.end.1092, %cond.end.1066, %cond.end.843, %cond.end.817, %cond.end.539, %cond.end.513, %cond.end.290, %cond.end.264
  %347 = load i64, i64* %alloca_nbytes, align 8
  %cmp2504 = icmp ult i64 -1, %347
  br i1 %cmp2504, label %if.then.2506, label %if.else.2507

if.then.2506:                                     ; preds = %lor.lhs.false.2503, %cond.end.2501, %cond.end.2486, %cond.end.2274, %cond.end.2259, %cond.end.2046, %cond.end.2031, %cond.end.1819, %cond.end.1804, %cond.end.1589, %cond.end.1570, %cond.end.1354, %cond.end.1335, %cond.end.1092, %cond.end.1066, %cond.end.843, %cond.end.817, %cond.end.539, %cond.end.513, %cond.end.290, %cond.end.264
  call void @memory_full(i64 -1) #7
  unreachable

if.else.2507:                                     ; preds = %lor.lhs.false.2503
  %348 = load i64, i64* %alloca_nbytes, align 8
  %349 = load i64, i64* %sa_avail, align 8
  %cmp2508 = icmp sle i64 %348, %349
  br i1 %cmp2508, label %if.then.2510, label %if.else.2512

if.then.2510:                                     ; preds = %if.else.2507
  %350 = load i64, i64* %alloca_nbytes, align 8
  %351 = load i64, i64* %sa_avail, align 8
  %sub2511 = sub nsw i64 %351, %350
  store i64 %sub2511, i64* %sa_avail, align 8
  %352 = load i64, i64* %alloca_nbytes, align 8
  %353 = alloca i8, i64 %352
  %354 = bitcast i8* %353 to i64*
  store i64* %354, i64** %parms, align 8
  br label %if.end

if.else.2512:                                     ; preds = %if.else.2507
  %355 = load i64, i64* %alloca_nbytes, align 8
  %call2513 = call noalias i8* @xmalloc(i64 %355)
  %356 = bitcast i8* %call2513 to i64*
  store i64* %356, i64** %parms, align 8
  %357 = load i64*, i64** %parms, align 8
  %358 = load i64, i64* %length, align 8
  %mul2514 = mul nsw i64 2, %358
  %call2515 = call i64 @make_save_memory(i64* %357, i64 %mul2514)
  store i64 %call2515, i64* %arg_, align 8
  store i8 1, i8* %sa_must_free, align 1
  %359 = load i64, i64* %arg_, align 8
  call void @record_unwind_protect(void (i64)* @free_save_value, i64 %359)
  br label %if.end

if.end:                                           ; preds = %if.else.2512, %if.then.2510
  br label %if.end.2516

if.end.2516:                                      ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %if.end.2516
  %360 = load i64*, i64** %parms, align 8
  %361 = load i64, i64* %length, align 8
  %add.ptr = getelementptr inbounds i64, i64* %360, i64 %361
  store i64* %add.ptr, i64** %values, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end
  %362 = load i64, i64* %alist.addr, align 8
  %and = and i64 %362, 7
  %conv2517 = trunc i64 %and to i32
  %cmp2518 = icmp eq i32 %conv2517, 3
  br i1 %cmp2518, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %363 = load i64, i64* %alist.addr, align 8
  %sub2520 = sub nsw i64 %363, 3
  %364 = inttoptr i64 %sub2520 to i8*
  %365 = bitcast i8* %364 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %365, i32 0, i32 0
  %366 = load i64, i64* %car, align 8
  store i64 %366, i64* %elt, align 8
  %367 = load i64, i64* %elt, align 8
  %call2521 = call i64 @Fcar(i64 %367)
  %368 = load i64, i64* %i, align 8
  %369 = load i64*, i64** %parms, align 8
  %arrayidx = getelementptr inbounds i64, i64* %369, i64 %368
  store i64 %call2521, i64* %arrayidx, align 8
  %370 = load i64, i64* %elt, align 8
  %call2522 = call i64 @Fcdr(i64 %370)
  %371 = load i64, i64* %i, align 8
  %372 = load i64*, i64** %values, align 8
  %arrayidx2523 = getelementptr inbounds i64, i64* %372, i64 %371
  store i64 %call2522, i64* %arrayidx2523, align 8
  %373 = load i64, i64* %i, align 8
  %inc = add nsw i64 %373, 1
  store i64 %inc, i64* %i, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %374 = load i64, i64* %alist.addr, align 8
  %sub2524 = sub nsw i64 %374, 3
  %375 = inttoptr i64 %sub2524 to i8*
  %376 = bitcast i8* %375 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %376, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %377 = load i64, i64* %cdr, align 8
  store i64 %377, i64* %alist.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %if.end.2537, %for.end
  %378 = load i64, i64* %i, align 8
  %dec = add nsw i64 %378, -1
  store i64 %dec, i64* %i, align 8
  %cmp2525 = icmp sge i64 %dec, 0
  br i1 %cmp2525, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %379 = load i64, i64* %i, align 8
  %380 = load i64*, i64** %parms, align 8
  %arrayidx2527 = getelementptr inbounds i64, i64* %380, i64 %379
  %381 = load i64, i64* %arrayidx2527, align 8
  store i64 %381, i64* %prop, align 8
  %382 = load i64, i64* %i, align 8
  %383 = load i64*, i64** %values, align 8
  %arrayidx2528 = getelementptr inbounds i64, i64* %383, i64 %382
  %384 = load i64, i64* %arrayidx2528, align 8
  store i64 %384, i64* %val, align 8
  %385 = load %struct.frame*, %struct.frame** %f, align 8
  %386 = load i64, i64* %prop, align 8
  %387 = load i64, i64* %val, align 8
  call void @store_frame_param(%struct.frame* %385, i64 %386, i64 %387)
  %388 = load i64, i64* %prop, align 8
  %call2529 = call i64 @builtin_lisp_symbol(i32 451)
  %cmp2530 = icmp eq i64 %388, %call2529
  br i1 %cmp2530, label %if.then.2536, label %lor.lhs.false.2532

lor.lhs.false.2532:                               ; preds = %while.body
  %389 = load i64, i64* %prop, align 8
  %call2533 = call i64 @builtin_lisp_symbol(i32 193)
  %cmp2534 = icmp eq i64 %389, %call2533
  br i1 %cmp2534, label %if.then.2536, label %if.end.2537

if.then.2536:                                     ; preds = %lor.lhs.false.2532, %while.body
  %390 = load %struct.frame*, %struct.frame** %f, align 8
  %391 = load i64, i64* %prop, align 8
  %392 = load i64, i64* %val, align 8
  call void @update_face_from_frame_parameter(%struct.frame* %390, i64 %391, i64 %392)
  br label %if.end.2537

if.end.2537:                                      ; preds = %if.then.2536, %lor.lhs.false.2532
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %do.body.2538

do.body.2538:                                     ; preds = %while.end
  %393 = load i8, i8* %sa_must_free, align 1
  %tobool = trunc i8 %393 to i1
  br i1 %tobool, label %if.then.2539, label %if.end.2542

if.then.2539:                                     ; preds = %do.body.2538
  store i8 0, i8* %sa_must_free, align 1
  %394 = load i64, i64* %sa_count, align 8
  %call2540 = call i64 @builtin_lisp_symbol(i32 0)
  %call2541 = call i64 @unbind_to(i64 %394, i64 %call2540)
  br label %if.end.2542

if.end.2542:                                      ; preds = %if.then.2539, %do.body.2538
  br label %do.end.2543

do.end.2543:                                      ; preds = %if.end.2542
  br label %if.end.2544

if.end.2544:                                      ; preds = %do.end.2543, %if.then
  %call2545 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call2545
}

declare void @fset_face_alist(%struct.frame*, i64) #1

declare i64 @Fcopy_alist(i64) #1

declare void @XSETCDR(i64, i64) #1

declare i64 @Fcopy_sequence(i64) #1

; Function Attrs: nounwind uwtable
define i64 @do_switch_frame(i64 %frame, i32 %track, i32 %for_deletion, i64 %norecord) #0 {
entry:
  %retval = alloca i64, align 8
  %frame.addr = alloca i64, align 8
  %track.addr = alloca i32, align 4
  %for_deletion.addr = alloca i32, align 4
  %norecord.addr = alloca i64, align 8
  %sf = alloca %struct.frame*, align 8
  %focus = alloca i64, align 8
  %xfocus = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %tty = alloca %struct.tty_display_info*, align 8
  %top_frame = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  store i32 %track, i32* %track.addr, align 4
  store i32 %for_deletion, i32* %for_deletion.addr, align 4
  store i64 %norecord, i64* %norecord.addr, align 8
  %0 = load i64, i64* @selected_frame, align 8
  %call = call zeroext i1 @FRAMEP(i64 %0)
  br i1 %call, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 61
  %4 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp = icmp ne %struct.terminal* %4, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %5 = load i64, i64* @selected_frame, align 8
  %sub1 = sub nsw i64 %5, 5
  %6 = inttoptr i64 %sub1 to i8*
  %7 = bitcast i8* %6 to %struct.frame*
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  call void @emacs_abort() #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %8, %cond.true
  %cond = phi %struct.frame* [ %7, %cond.true ], [ null, %8 ]
  store %struct.frame* %cond, %struct.frame** %sf, align 8
  %9 = load i64, i64* %frame.addr, align 8
  %and = and i64 %9, 7
  %conv = trunc i64 %and to i32
  %cmp2 = icmp eq i32 %conv, 3
  br i1 %cmp2, label %land.lhs.true.4, label %if.end

land.lhs.true.4:                                  ; preds = %cond.end
  %10 = load i64, i64* %frame.addr, align 8
  %sub5 = sub nsw i64 %10, 3
  %11 = inttoptr i64 %sub5 to i8*
  %12 = bitcast i8* %11 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %12, i32 0, i32 0
  %13 = load i64, i64* %car, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 895)
  %cmp7 = icmp eq i64 %13, %call6
  br i1 %cmp7, label %land.lhs.true.9, label %if.end

land.lhs.true.9:                                  ; preds = %land.lhs.true.4
  %14 = load i64, i64* %frame.addr, align 8
  %sub10 = sub nsw i64 %14, 3
  %15 = inttoptr i64 %sub10 to i8*
  %16 = bitcast i8* %15 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %16, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %17 = load i64, i64* %cdr, align 8
  %and11 = and i64 %17, 7
  %conv12 = trunc i64 %and11 to i32
  %cmp13 = icmp eq i32 %conv12, 3
  br i1 %cmp13, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.9
  %18 = load i64, i64* %frame.addr, align 8
  %sub15 = sub nsw i64 %18, 3
  %19 = inttoptr i64 %sub15 to i8*
  %20 = bitcast i8* %19 to %struct.Lisp_Cons*
  %u16 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %20, i32 0, i32 1
  %cdr17 = bitcast %union.anon.11* %u16 to i64*
  %21 = load i64, i64* %cdr17, align 8
  %sub18 = sub nsw i64 %21, 3
  %22 = inttoptr i64 %sub18 to i8*
  %23 = bitcast i8* %22 to %struct.Lisp_Cons*
  %car19 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %23, i32 0, i32 0
  %24 = load i64, i64* %car19, align 8
  store i64 %24, i64* %frame.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.9, %land.lhs.true.4, %cond.end
  %25 = load i64, i64* %frame.addr, align 8
  %call20 = call zeroext i1 @FRAMEP(i64 %25)
  br i1 %call20, label %cond.true.22, label %cond.false.23

cond.true.22:                                     ; preds = %if.end
  br label %cond.end.25

cond.false.23:                                    ; preds = %if.end
  %call24 = call i64 @builtin_lisp_symbol(i32 461)
  %26 = load i64, i64* %frame.addr, align 8
  %27 = call i64 @wrong_type_argument(i64 %call24, i64 %26) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.25

cond.end.25:                                      ; preds = %28, %cond.true.22
  %29 = load i64, i64* %frame.addr, align 8
  %sub26 = sub nsw i64 %29, 5
  %30 = inttoptr i64 %sub26 to i8*
  %31 = bitcast i8* %30 to %struct.frame*
  %terminal27 = getelementptr inbounds %struct.frame, %struct.frame* %31, i32 0, i32 61
  %32 = load %struct.terminal*, %struct.terminal** %terminal27, align 8
  %cmp28 = icmp ne %struct.terminal* %32, null
  br i1 %cmp28, label %if.end.32, label %if.then.30

if.then.30:                                       ; preds = %cond.end.25
  %call31 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call31, i64* %retval
  br label %return

if.end.32:                                        ; preds = %cond.end.25
  %33 = load %struct.frame*, %struct.frame** %sf, align 8
  %34 = load i64, i64* %frame.addr, align 8
  %sub33 = sub nsw i64 %34, 5
  %35 = inttoptr i64 %sub33 to i8*
  %36 = bitcast i8* %35 to %struct.frame*
  %cmp34 = icmp eq %struct.frame* %33, %36
  br i1 %cmp34, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %if.end.32
  %37 = load i64, i64* %frame.addr, align 8
  store i64 %37, i64* %retval
  br label %return

if.end.37:                                        ; preds = %if.end.32
  %38 = load i32, i32* %track.addr, align 4
  %tobool = icmp ne i32 %38, 0
  br i1 %tobool, label %land.lhs.true.38, label %if.end.70

land.lhs.true.38:                                 ; preds = %if.end.37
  %39 = load i64, i64* %frame.addr, align 8
  %sub39 = sub nsw i64 %39, 5
  %40 = inttoptr i64 %sub39 to i8*
  %41 = bitcast i8* %40 to %struct.frame*
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %41, i32 0, i32 26
  %42 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %42, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp40 = icmp eq i32 %bf.cast, 2
  br i1 %cmp40, label %if.then.42, label %if.end.70

if.then.42:                                       ; preds = %land.lhs.true.38
  %43 = load i64, i64* %frame.addr, align 8
  %sub43 = sub nsw i64 %43, 5
  %44 = inttoptr i64 %sub43 to i8*
  %45 = bitcast i8* %44 to %struct.frame*
  %call44 = call i64 @x_get_focus_frame(%struct.frame* %45)
  store i64 %call44, i64* %xfocus, align 8
  %46 = load i64, i64* %xfocus, align 8
  %call45 = call zeroext i1 @FRAMEP(i64 %46)
  br i1 %call45, label %if.then.46, label %if.end.69

if.then.46:                                       ; preds = %if.then.42
  %47 = load i64, i64* %xfocus, align 8
  %sub47 = sub nsw i64 %47, 5
  %48 = inttoptr i64 %sub47 to i8*
  %49 = bitcast i8* %48 to %struct.frame*
  %focus_frame = getelementptr inbounds %struct.frame, %struct.frame* %49, i32 0, i32 4
  %50 = load i64, i64* %focus_frame, align 8
  store i64 %50, i64* %focus, align 8
  %51 = load i64, i64* %focus, align 8
  %call48 = call zeroext i1 @FRAMEP(i64 %51)
  br i1 %call48, label %land.lhs.true.50, label %if.end.68

land.lhs.true.50:                                 ; preds = %if.then.46
  %52 = load i64, i64* %focus, align 8
  %sub51 = sub nsw i64 %52, 5
  %53 = inttoptr i64 %sub51 to i8*
  %54 = bitcast i8* %53 to %struct.frame*
  %55 = load i64, i64* @selected_frame, align 8
  %call52 = call zeroext i1 @FRAMEP(i64 %55)
  br i1 %call52, label %land.lhs.true.54, label %cond.false.61

land.lhs.true.54:                                 ; preds = %land.lhs.true.50
  %56 = load i64, i64* @selected_frame, align 8
  %sub55 = sub nsw i64 %56, 5
  %57 = inttoptr i64 %sub55 to i8*
  %58 = bitcast i8* %57 to %struct.frame*
  %terminal56 = getelementptr inbounds %struct.frame, %struct.frame* %58, i32 0, i32 61
  %59 = load %struct.terminal*, %struct.terminal** %terminal56, align 8
  %cmp57 = icmp ne %struct.terminal* %59, null
  br i1 %cmp57, label %cond.true.59, label %cond.false.61

cond.true.59:                                     ; preds = %land.lhs.true.54
  %60 = load i64, i64* @selected_frame, align 8
  %sub60 = sub nsw i64 %60, 5
  %61 = inttoptr i64 %sub60 to i8*
  %62 = bitcast i8* %61 to %struct.frame*
  br label %cond.end.62

cond.false.61:                                    ; preds = %land.lhs.true.54, %land.lhs.true.50
  call void @emacs_abort() #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.62

cond.end.62:                                      ; preds = %63, %cond.true.59
  %cond63 = phi %struct.frame* [ %62, %cond.true.59 ], [ null, %63 ]
  %cmp64 = icmp eq %struct.frame* %54, %cond63
  br i1 %cmp64, label %if.then.66, label %if.end.68

if.then.66:                                       ; preds = %cond.end.62
  %64 = load i64, i64* %xfocus, align 8
  %65 = load i64, i64* %frame.addr, align 8
  %call67 = call i64 @Fredirect_frame_focus(i64 %64, i64 %65)
  br label %if.end.68

if.end.68:                                        ; preds = %if.then.66, %cond.end.62, %if.then.46
  br label %if.end.69

if.end.69:                                        ; preds = %if.end.68, %if.then.42
  br label %if.end.70

if.end.70:                                        ; preds = %if.end.69, %land.lhs.true.38, %if.end.37
  %66 = load i32, i32* %for_deletion.addr, align 4
  %tobool71 = icmp ne i32 %66, 0
  br i1 %tobool71, label %if.end.86, label %land.lhs.true.72

land.lhs.true.72:                                 ; preds = %if.end.70
  %67 = load %struct.frame*, %struct.frame** %sf, align 8
  %minibuffer_window = getelementptr inbounds %struct.frame, %struct.frame* %67, i32 0, i32 7
  %68 = load i64, i64* %minibuffer_window, align 8
  %call73 = call zeroext i1 @WINDOWP(i64 %68)
  br i1 %call73, label %land.lhs.true.75, label %if.end.86

land.lhs.true.75:                                 ; preds = %land.lhs.true.72
  %69 = load %struct.frame*, %struct.frame** %sf, align 8
  %minibuffer_window76 = getelementptr inbounds %struct.frame, %struct.frame* %69, i32 0, i32 7
  %70 = load i64, i64* %minibuffer_window76, align 8
  %call77 = call %struct.window* @XWINDOW(i64 %70)
  %frame78 = getelementptr inbounds %struct.window, %struct.window* %call77, i32 0, i32 1
  %71 = load i64, i64* %frame78, align 8
  %sub79 = sub nsw i64 %71, 5
  %72 = inttoptr i64 %sub79 to i8*
  %73 = bitcast i8* %72 to %struct.frame*
  %74 = load %struct.frame*, %struct.frame** %sf, align 8
  %cmp80 = icmp eq %struct.frame* %73, %74
  br i1 %cmp80, label %if.then.82, label %if.end.86

if.then.82:                                       ; preds = %land.lhs.true.75
  %75 = load %struct.frame*, %struct.frame** %sf, align 8
  %minibuffer_window83 = getelementptr inbounds %struct.frame, %struct.frame* %75, i32 0, i32 7
  %76 = load i64, i64* %minibuffer_window83, align 8
  %call84 = call %struct.window* @XWINDOW(i64 %76)
  %call85 = call zeroext i1 @resize_mini_window(%struct.window* %call84, i1 zeroext true)
  br label %if.end.86

if.end.86:                                        ; preds = %if.then.82, %land.lhs.true.75, %land.lhs.true.72, %if.end.70
  %77 = load i64, i64* %frame.addr, align 8
  %sub87 = sub nsw i64 %77, 5
  %78 = inttoptr i64 %sub87 to i8*
  %79 = bitcast i8* %78 to %struct.frame*
  %output_method88 = getelementptr inbounds %struct.frame, %struct.frame* %79, i32 0, i32 26
  %80 = bitcast i48* %output_method88 to i64*
  %bf.load89 = load i64, i64* %80, align 8
  %bf.lshr90 = lshr i64 %bf.load89, 23
  %bf.clear91 = and i64 %bf.lshr90, 7
  %bf.cast92 = trunc i64 %bf.clear91 to i32
  %cmp93 = icmp eq i32 %bf.cast92, 1
  br i1 %cmp93, label %if.then.95, label %if.end.142

if.then.95:                                       ; preds = %if.end.86
  %81 = load i64, i64* %frame.addr, align 8
  %sub96 = sub nsw i64 %81, 5
  %82 = inttoptr i64 %sub96 to i8*
  %83 = bitcast i8* %82 to %struct.frame*
  store %struct.frame* %83, %struct.frame** %f, align 8
  %84 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method97 = getelementptr inbounds %struct.frame, %struct.frame* %84, i32 0, i32 26
  %85 = bitcast i48* %output_method97 to i64*
  %bf.load98 = load i64, i64* %85, align 8
  %bf.lshr99 = lshr i64 %bf.load98, 23
  %bf.clear100 = and i64 %bf.lshr99, 7
  %bf.cast101 = trunc i64 %bf.clear100 to i32
  %cmp102 = icmp eq i32 %bf.cast101, 1
  br i1 %cmp102, label %cond.true.111, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.95
  %86 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method104 = getelementptr inbounds %struct.frame, %struct.frame* %86, i32 0, i32 26
  %87 = bitcast i48* %output_method104 to i64*
  %bf.load105 = load i64, i64* %87, align 8
  %bf.lshr106 = lshr i64 %bf.load105, 23
  %bf.clear107 = and i64 %bf.lshr106, 7
  %bf.cast108 = trunc i64 %bf.clear107 to i32
  %cmp109 = icmp eq i32 %bf.cast108, 3
  br i1 %cmp109, label %cond.true.111, label %cond.false.114

cond.true.111:                                    ; preds = %lor.lhs.false, %if.then.95
  %88 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal112 = getelementptr inbounds %struct.frame, %struct.frame* %88, i32 0, i32 61
  %89 = load %struct.terminal*, %struct.terminal** %terminal112, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %89, i32 0, i32 12
  %tty113 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %90 = load %struct.tty_display_info*, %struct.tty_display_info** %tty113, align 8
  br label %cond.end.115

cond.false.114:                                   ; preds = %lor.lhs.false
  call void @emacs_abort() #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.115

cond.end.115:                                     ; preds = %91, %cond.true.111
  %cond116 = phi %struct.tty_display_info* [ %90, %cond.true.111 ], [ null, %91 ]
  store %struct.tty_display_info* %cond116, %struct.tty_display_info** %tty, align 8
  %92 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %top_frame117 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %92, i32 0, i32 11
  %93 = load i64, i64* %top_frame117, align 8
  store i64 %93, i64* %top_frame, align 8
  %94 = load i64, i64* %frame.addr, align 8
  %95 = load i64, i64* %top_frame, align 8
  %cmp118 = icmp eq i64 %94, %95
  br i1 %cmp118, label %if.end.140, label %if.then.120

if.then.120:                                      ; preds = %cond.end.115
  %96 = load i64, i64* %top_frame, align 8
  %call121 = call zeroext i1 @FRAMEP(i64 %96)
  br i1 %call121, label %if.then.122, label %if.end.124

if.then.122:                                      ; preds = %if.then.120
  %97 = load i64, i64* %top_frame, align 8
  %sub123 = sub nsw i64 %97, 5
  %98 = inttoptr i64 %sub123 to i8*
  %99 = bitcast i8* %98 to %struct.frame*
  call void @SET_FRAME_VISIBLE(%struct.frame* %99, i32 2)
  br label %if.end.124

if.end.124:                                       ; preds = %if.then.122, %if.then.120
  %100 = load %struct.frame*, %struct.frame** %f, align 8
  call void @SET_FRAME_VISIBLE(%struct.frame* %100, i32 1)
  %101 = load %struct.frame*, %struct.frame** %f, align 8
  %text_cols = getelementptr inbounds %struct.frame, %struct.frame* %101, i32 0, i32 36
  %102 = load i32, i32* %text_cols, align 4
  %103 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %103, i32 0, i32 10
  %104 = load %struct.cm*, %struct.cm** %Wcm, align 8
  %cm_cols = getelementptr inbounds %struct.cm, %struct.cm* %104, i32 0, i32 18
  %105 = load i32, i32* %cm_cols, align 4
  %cmp125 = icmp ne i32 %102, %105
  br i1 %cmp125, label %if.then.127, label %if.end.131

if.then.127:                                      ; preds = %if.end.124
  %106 = load %struct.frame*, %struct.frame** %f, align 8
  %text_cols128 = getelementptr inbounds %struct.frame, %struct.frame* %106, i32 0, i32 36
  %107 = load i32, i32* %text_cols128, align 4
  %108 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm129 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %108, i32 0, i32 10
  %109 = load %struct.cm*, %struct.cm** %Wcm129, align 8
  %cm_cols130 = getelementptr inbounds %struct.cm, %struct.cm* %109, i32 0, i32 18
  store i32 %107, i32* %cm_cols130, align 4
  br label %if.end.131

if.end.131:                                       ; preds = %if.then.127, %if.end.124
  %110 = load %struct.frame*, %struct.frame** %f, align 8
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %110, i32 0, i32 39
  %111 = load i32, i32* %total_lines, align 4
  %112 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm132 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %112, i32 0, i32 10
  %113 = load %struct.cm*, %struct.cm** %Wcm132, align 8
  %cm_rows = getelementptr inbounds %struct.cm, %struct.cm* %113, i32 0, i32 19
  %114 = load i32, i32* %cm_rows, align 4
  %cmp133 = icmp ne i32 %111, %114
  br i1 %cmp133, label %if.then.135, label %if.end.139

if.then.135:                                      ; preds = %if.end.131
  %115 = load %struct.frame*, %struct.frame** %f, align 8
  %total_lines136 = getelementptr inbounds %struct.frame, %struct.frame* %115, i32 0, i32 39
  %116 = load i32, i32* %total_lines136, align 4
  %117 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm137 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %117, i32 0, i32 10
  %118 = load %struct.cm*, %struct.cm** %Wcm137, align 8
  %cm_rows138 = getelementptr inbounds %struct.cm, %struct.cm* %118, i32 0, i32 19
  store i32 %116, i32* %cm_rows138, align 4
  br label %if.end.139

if.end.139:                                       ; preds = %if.then.135, %if.end.131
  br label %if.end.140

if.end.140:                                       ; preds = %if.end.139, %cond.end.115
  %119 = load i64, i64* %frame.addr, align 8
  %120 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %top_frame141 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %120, i32 0, i32 11
  store i64 %119, i64* %top_frame141, align 8
  br label %if.end.142

if.end.142:                                       ; preds = %if.end.140, %if.end.86
  %121 = load i64, i64* %frame.addr, align 8
  store i64 %121, i64* @selected_frame, align 8
  %122 = load i64, i64* @selected_frame, align 8
  %sub143 = sub nsw i64 %122, 5
  %123 = inttoptr i64 %sub143 to i8*
  %124 = bitcast i8* %123 to %struct.frame*
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %124, i32 0, i32 5
  %125 = load i64, i64* %root_window, align 8
  %126 = load i64, i64* @selected_frame, align 8
  %sub144 = sub nsw i64 %126, 5
  %127 = inttoptr i64 %sub144 to i8*
  %128 = bitcast i8* %127 to %struct.frame*
  %minibuffer_window145 = getelementptr inbounds %struct.frame, %struct.frame* %128, i32 0, i32 7
  %129 = load i64, i64* %minibuffer_window145, align 8
  %cmp146 = icmp eq i64 %125, %129
  br i1 %cmp146, label %if.end.150, label %if.then.148

if.then.148:                                      ; preds = %if.end.142
  %130 = load i64, i64* @selected_frame, align 8
  %sub149 = sub nsw i64 %130, 5
  %131 = inttoptr i64 %sub149 to i8*
  %132 = bitcast i8* %131 to %struct.frame*
  store %struct.frame* %132, %struct.frame** @last_nonminibuf_frame, align 8
  br label %if.end.150

if.end.150:                                       ; preds = %if.then.148, %if.end.142
  %133 = load i64, i64* %frame.addr, align 8
  %sub151 = sub nsw i64 %133, 5
  %134 = inttoptr i64 %sub151 to i8*
  %135 = bitcast i8* %134 to %struct.frame*
  %selected_window = getelementptr inbounds %struct.frame, %struct.frame* %135, i32 0, i32 6
  %136 = load i64, i64* %selected_window, align 8
  %137 = load i64, i64* %norecord.addr, align 8
  %call152 = call i64 @Fselect_window(i64 %136, i64 %137)
  %call153 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call153, i64* @internal_last_event_frame, align 8
  %138 = load i64, i64* %frame.addr, align 8
  store i64 %138, i64* %retval
  br label %return

return:                                           ; preds = %if.end.150, %if.then.36, %if.then.30
  %139 = load i64, i64* %retval
  ret i64 %139
}

declare i64 @x_get_focus_frame(%struct.frame*) #1

; Function Attrs: nounwind uwtable
define i64 @Fredirect_frame_focus(i64 %frame, i64 %focus_frame) #0 {
entry:
  %frame.addr = alloca i64, align 8
  %focus_frame.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  store i64 %frame, i64* %frame.addr, align 8
  store i64 %focus_frame, i64* %focus_frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_any_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  %1 = load i64, i64* %focus_frame.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call1
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %focus_frame.addr, align 8
  %call2 = call zeroext i1 @FRAMEP(i64 %2)
  br i1 %call2, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.then
  %3 = load i64, i64* %focus_frame.addr, align 8
  %sub = sub nsw i64 %3, 5
  %4 = inttoptr i64 %sub to i8*
  %5 = bitcast i8* %4 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 61
  %6 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp3 = icmp ne %struct.terminal* %6, null
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.then
  %call4 = call i64 @builtin_lisp_symbol(i32 458)
  %7 = load i64, i64* %focus_frame.addr, align 8
  %8 = call i64 @wrong_type_argument(i64 %call4, i64 %7) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %9, %cond.true
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %10 = load %struct.frame*, %struct.frame** %f, align 8
  %11 = load i64, i64* %focus_frame.addr, align 8
  call void @fset_focus_frame(%struct.frame* %10, i64 %11)
  %12 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal5 = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 61
  %13 = load %struct.terminal*, %struct.terminal** %terminal5, align 8
  %frame_rehighlight_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %13, i32 0, i32 33
  %14 = load void (%struct.frame*)*, void (%struct.frame*)** %frame_rehighlight_hook, align 8
  %tobool = icmp ne void (%struct.frame*)* %14, null
  br i1 %tobool, label %if.then.6, label %if.end.9

if.then.6:                                        ; preds = %if.end
  %15 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal7 = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 61
  %16 = load %struct.terminal*, %struct.terminal** %terminal7, align 8
  %frame_rehighlight_hook8 = getelementptr inbounds %struct.terminal, %struct.terminal* %16, i32 0, i32 33
  %17 = load void (%struct.frame*)*, void (%struct.frame*)** %frame_rehighlight_hook8, align 8
  %18 = load %struct.frame*, %struct.frame** %f, align 8
  call void %17(%struct.frame* %18)
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.6, %if.end
  %call10 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call10
}

declare zeroext i1 @resize_mini_window(%struct.window*, i1 zeroext) #1

declare i64 @Fselect_window(i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fselect_frame(i64 %frame, i64 %norecord) #0 {
entry:
  %frame.addr = alloca i64, align 8
  %norecord.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  store i64 %norecord, i64* %norecord.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %1 = load i64, i64* %norecord.addr, align 8
  %call = call i64 @do_switch_frame(i64 %0, i32 1, i32 0, i64 %1)
  ret i64 %call
}

; Function Attrs: nounwind uwtable
define i64 @Fhandle_switch_frame(i64 %event) #0 {
entry:
  %event.addr = alloca i64, align 8
  store i64 %event, i64* %event.addr, align 8
  %0 = load %struct.kboard*, %struct.kboard** @current_kboard, align 8
  %1 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 50), align 8
  call void @kset_prefix_arg(%struct.kboard* %0, i64 %1)
  %call = call i64 @builtin_lisp_symbol(i32 689)
  call void @run_hook(i64 %call)
  %call1 = call i64 @intern(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i32 0, i32 0))
  %2 = load i64, i64* %event.addr, align 8
  %call2 = call i64 @call1(i64 %call1, i64 %2)
  %3 = load i64, i64* %event.addr, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %call4 = call i64 @do_switch_frame(i64 %3, i32 0, i32 0, i64 %call3)
  ret i64 %call4
}

declare void @kset_prefix_arg(%struct.kboard*, i64) #1

declare void @run_hook(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fselected_frame() #0 {
entry:
  %0 = load i64, i64* @selected_frame, align 8
  ret i64 %0
}

; Function Attrs: nounwind uwtable
define i64 @Fframe_list() #0 {
entry:
  %frames = alloca i64, align 8
  %0 = load i64, i64* @Vframe_list, align 8
  %call = call i64 @Fcopy_sequence(i64 %0)
  store i64 %call, i64* %frames, align 8
  %1 = load i64, i64* @tip_frame, align 8
  %call1 = call zeroext i1 @FRAMEP(i64 %1)
  br i1 %call1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i64, i64* @tip_frame, align 8
  %3 = load i64, i64* %frames, align 8
  %call2 = call i64 @Fdelq(i64 %2, i64 %3)
  store i64 %call2, i64* %frames, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i64, i64* %frames, align 8
  ret i64 %4
}

declare i64 @Fdelq(i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fnext_frame(i64 %frame, i64 %miniframe) #0 {
entry:
  %frame.addr = alloca i64, align 8
  %miniframe.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  store i64 %miniframe, i64* %miniframe.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64, i64* @selected_frame, align 8
  store i64 %1, i64* %frame.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i64, i64* %frame.addr, align 8
  %call1 = call zeroext i1 @FRAMEP(i64 %2)
  br i1 %call1, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.end
  %3 = load i64, i64* %frame.addr, align 8
  %sub = sub nsw i64 %3, 5
  %4 = inttoptr i64 %sub to i8*
  %5 = bitcast i8* %4 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 61
  %6 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp2 = icmp ne %struct.terminal* %6, null
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.end
  %call3 = call i64 @builtin_lisp_symbol(i32 458)
  %7 = load i64, i64* %frame.addr, align 8
  %8 = call i64 @wrong_type_argument(i64 %call3, i64 %7) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %9, %cond.true
  %10 = load i64, i64* %frame.addr, align 8
  %11 = load i64, i64* %miniframe.addr, align 8
  %call4 = call i64 @next_frame(i64 %10, i64 %11)
  ret i64 %call4
}

; Function Attrs: nounwind uwtable
define internal i64 @next_frame(i64 %frame, i64 %minibuf) #0 {
entry:
  %retval = alloca i64, align 8
  %frame.addr = alloca i64, align 8
  %minibuf.addr = alloca i64, align 8
  %f = alloca i64, align 8
  %tail = alloca i64, align 8
  %passed = alloca i32, align 4
  store i64 %frame, i64* %frame.addr, align 8
  store i64 %minibuf, i64* %minibuf.addr, align 8
  store i32 0, i32* %passed, align 4
  br label %while.cond

while.cond:                                       ; preds = %for.end, %entry
  %0 = load i32, i32* %passed, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i64, i64* @Vframe_list, align 8
  store i64 %1, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %2 = load i64, i64* %tail, align 8
  %and = and i64 %2, 7
  %conv = trunc i64 %and to i32
  %cmp1 = icmp eq i32 %conv, 3
  br i1 %cmp1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %3 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %3, 3
  %4 = inttoptr i64 %sub to i8*
  %5 = bitcast i8* %4 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %5, i32 0, i32 0
  %6 = load i64, i64* %car, align 8
  store i64 %6, i64* %f, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ true, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %passed, align 4
  %tobool = icmp ne i32 %8, 0
  br i1 %tobool, label %if.then, label %if.end.7

if.then:                                          ; preds = %for.body
  %9 = load i64, i64* %f, align 8
  %10 = load i64, i64* %frame.addr, align 8
  %11 = load i64, i64* %minibuf.addr, align 8
  %call = call i64 @candidate_frame(i64 %9, i64 %10, i64 %11)
  store i64 %call, i64* %f, align 8
  %12 = load i64, i64* %f, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp4 = icmp eq i64 %12, %call3
  br i1 %cmp4, label %if.end, label %if.then.6

if.then.6:                                        ; preds = %if.then
  %13 = load i64, i64* %f, align 8
  store i64 %13, i64* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.7

if.end.7:                                         ; preds = %if.end, %for.body
  %14 = load i64, i64* %frame.addr, align 8
  %15 = load i64, i64* %f, align 8
  %cmp8 = icmp eq i64 %14, %15
  br i1 %cmp8, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %if.end.7
  %16 = load i32, i32* %passed, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %passed, align 4
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.10, %if.end.7
  br label %for.inc

for.inc:                                          ; preds = %if.end.11
  %17 = load i64, i64* %tail, align 8
  %sub12 = sub nsw i64 %17, 3
  %18 = inttoptr i64 %sub12 to i8*
  %19 = bitcast i8* %18 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %19, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %20 = load i64, i64* %cdr, align 8
  store i64 %20, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %21 = load i64, i64* %frame.addr, align 8
  store i64 %21, i64* %retval
  br label %return

return:                                           ; preds = %while.end, %if.then.6
  %22 = load i64, i64* %retval
  ret i64 %22
}

; Function Attrs: nounwind uwtable
define i64 @Fprevious_frame(i64 %frame, i64 %miniframe) #0 {
entry:
  %frame.addr = alloca i64, align 8
  %miniframe.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  store i64 %miniframe, i64* %miniframe.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64, i64* @selected_frame, align 8
  store i64 %1, i64* %frame.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i64, i64* %frame.addr, align 8
  %call1 = call zeroext i1 @FRAMEP(i64 %2)
  br i1 %call1, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.end
  %3 = load i64, i64* %frame.addr, align 8
  %sub = sub nsw i64 %3, 5
  %4 = inttoptr i64 %sub to i8*
  %5 = bitcast i8* %4 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 61
  %6 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp2 = icmp ne %struct.terminal* %6, null
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.end
  %call3 = call i64 @builtin_lisp_symbol(i32 458)
  %7 = load i64, i64* %frame.addr, align 8
  %8 = call i64 @wrong_type_argument(i64 %call3, i64 %7) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %9, %cond.true
  %10 = load i64, i64* %frame.addr, align 8
  %11 = load i64, i64* %miniframe.addr, align 8
  %call4 = call i64 @prev_frame(i64 %10, i64 %11)
  ret i64 %call4
}

; Function Attrs: nounwind uwtable
define internal i64 @prev_frame(i64 %frame, i64 %minibuf) #0 {
entry:
  %retval = alloca i64, align 8
  %frame.addr = alloca i64, align 8
  %minibuf.addr = alloca i64, align 8
  %f = alloca i64, align 8
  %tail = alloca i64, align 8
  %prev = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  store i64 %minibuf, i64* %minibuf.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %prev, align 8
  %0 = load i64, i64* @Vframe_list, align 8
  store i64 %0, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %tail, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %2 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %2, 3
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %4, i32 0, i32 0
  %5 = load i64, i64* %car, align 8
  store i64 %5, i64* %f, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %6 = phi i1 [ false, %for.cond ], [ true, %land.rhs ]
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %7 = load i64, i64* %frame.addr, align 8
  %8 = load i64, i64* %f, align 8
  %cmp2 = icmp eq i64 %7, %8
  br i1 %cmp2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %9 = load i64, i64* %prev, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp5 = icmp eq i64 %9, %call4
  br i1 %cmp5, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %10 = load i64, i64* %prev, align 8
  store i64 %10, i64* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %for.body
  %11 = load i64, i64* %f, align 8
  %12 = load i64, i64* %frame.addr, align 8
  %13 = load i64, i64* %minibuf.addr, align 8
  %call7 = call i64 @candidate_frame(i64 %11, i64 %12, i64 %13)
  store i64 %call7, i64* %f, align 8
  %14 = load i64, i64* %f, align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp9 = icmp eq i64 %14, %call8
  br i1 %cmp9, label %if.end.12, label %if.then.11

if.then.11:                                       ; preds = %if.end
  %15 = load i64, i64* %f, align 8
  store i64 %15, i64* %prev, align 8
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.11, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end.12
  %16 = load i64, i64* %tail, align 8
  %sub13 = sub nsw i64 %16, 3
  %17 = inttoptr i64 %sub13 to i8*
  %18 = bitcast i8* %17 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %18, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %19 = load i64, i64* %cdr, align 8
  store i64 %19, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %20 = load i64, i64* %prev, align 8
  %call14 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp15 = icmp eq i64 %20, %call14
  br i1 %cmp15, label %if.then.17, label %if.else

if.then.17:                                       ; preds = %for.end
  %21 = load i64, i64* %frame.addr, align 8
  store i64 %21, i64* %retval
  br label %return

if.else:                                          ; preds = %for.end
  %22 = load i64, i64* %prev, align 8
  store i64 %22, i64* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then.17, %if.then
  %23 = load i64, i64* %retval
  ret i64 %23
}

; Function Attrs: nounwind uwtable
define i64 @Flast_nonminibuf_frame() #0 {
entry:
  %frame = alloca i64, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %frame, align 8
  %0 = load %struct.frame*, %struct.frame** @last_nonminibuf_frame, align 8
  %tobool = icmp ne %struct.frame* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.frame*, %struct.frame** @last_nonminibuf_frame, align 8
  %2 = bitcast %struct.frame* %1 to i8*
  %call1 = call i64 @make_lisp_ptr(i8* %2, i32 5)
  store i64 %call1, i64* %frame, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i64, i64* %frame, align 8
  ret i64 %3
}

; Function Attrs: nounwind uwtable
define i64 @delete_frame(i64 %frame, i64 %force) #0 {
entry:
  %retval = alloca i64, align 8
  %frame.addr = alloca i64, align 8
  %force.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %sf = alloca %struct.frame*, align 8
  %kb = alloca %struct.kboard*, align 8
  %minibuffer_selected = alloca i32, align 4
  %is_tooltip_frame = alloca i32, align 4
  %frames = alloca i64, align 8
  %this = alloca i64, align 8
  %fminiw = alloca i64, align 8
  %tail = alloca i64, align 8
  %frame1 = alloca i64, align 8
  %f1 = alloca %struct.frame*, align 8
  %top_frame = alloca i64, align 8
  %terminal229 = alloca %struct.terminal*, align 8
  %tmp = alloca i64, align 8
  %frames267 = alloca i64, align 8
  %this269 = alloca i64, align 8
  %frames297 = alloca i64, align 8
  %this299 = alloca i64, align 8
  %frame_on_same_kboard = alloca i64, align 8
  %frames337 = alloca i64, align 8
  %this339 = alloca i64, align 8
  %frame_with_minibuf = alloca i64, align 8
  %frame_on_same_kboard343 = alloca i64, align 8
  %f1356 = alloca %struct.frame*, align 8
  store i64 %frame, i64* %frame.addr, align 8
  store i64 %force, i64* %force.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_any_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  %1 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 61
  %2 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp = icmp ne %struct.terminal* %2, null
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call1, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i64, i64* %force.addr, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp3 = icmp eq i64 %3, %call2
  br i1 %cmp3, label %land.lhs.true, label %if.end.6

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.frame*, %struct.frame** %f, align 8
  %call4 = call i32 @other_visible_frames(%struct.frame* %4)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.end.6, label %if.then.5

if.then.5:                                        ; preds = %land.lhs.true
  call void (i8*, ...) @error(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.6, i32 0, i32 0)) #7
  unreachable

if.end.6:                                         ; preds = %land.lhs.true, %if.end
  %5 = load i64, i64* @Vframe_list, align 8
  %sub = sub nsw i64 %5, 3
  %6 = inttoptr i64 %sub to i8*
  %7 = bitcast i8* %6 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %7, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %8 = load i64, i64* %cdr, align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp8 = icmp eq i64 %8, %call7
  br i1 %cmp8, label %land.lhs.true.9, label %if.end.13

land.lhs.true.9:                                  ; preds = %if.end.6
  %9 = load i64, i64* %force.addr, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 704)
  %cmp11 = icmp eq i64 %9, %call10
  br i1 %cmp11, label %if.end.13, label %if.then.12

if.then.12:                                       ; preds = %land.lhs.true.9
  call void (i8*, ...) @error(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.7, i32 0, i32 0)) #7
  unreachable

if.end.13:                                        ; preds = %land.lhs.true.9, %if.end.6
  %10 = load %struct.frame*, %struct.frame** %f, align 8
  %11 = bitcast %struct.frame* %10 to i8*
  %call14 = call i64 @make_lisp_ptr(i8* %11, i32 5)
  store i64 %call14, i64* %frame.addr, align 8
  %12 = load %struct.frame*, %struct.frame** %f, align 8
  %minibuffer_window = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 7
  %13 = load i64, i64* %minibuffer_window, align 8
  %call15 = call zeroext i1 @WINDOWP(i64 %13)
  br i1 %call15, label %land.lhs.true.16, label %if.end.51

land.lhs.true.16:                                 ; preds = %if.end.13
  %14 = load %struct.frame*, %struct.frame** %f, align 8
  %minibuffer_window17 = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 7
  %15 = load i64, i64* %minibuffer_window17, align 8
  %call18 = call %struct.window* @XWINDOW(i64 %15)
  %frame19 = getelementptr inbounds %struct.window, %struct.window* %call18, i32 0, i32 1
  %16 = load i64, i64* %frame19, align 8
  %sub20 = sub nsw i64 %16, 5
  %17 = inttoptr i64 %sub20 to i8*
  %18 = bitcast i8* %17 to %struct.frame*
  %19 = load %struct.frame*, %struct.frame** %f, align 8
  %cmp21 = icmp eq %struct.frame* %18, %19
  br i1 %cmp21, label %if.then.22, label %if.end.51

if.then.22:                                       ; preds = %land.lhs.true.16
  %20 = load i64, i64* @Vframe_list, align 8
  store i64 %20, i64* %frames, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.22
  %21 = load i64, i64* %frames, align 8
  %and = and i64 %21, 7
  %conv = trunc i64 %and to i32
  %cmp23 = icmp eq i32 %conv, 3
  br i1 %cmp23, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %22 = load i64, i64* %frames, align 8
  %sub25 = sub nsw i64 %22, 3
  %23 = inttoptr i64 %sub25 to i8*
  %24 = bitcast i8* %23 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %24, i32 0, i32 0
  %25 = load i64, i64* %car, align 8
  store i64 %25, i64* %this, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %26 = phi i1 [ false, %for.cond ], [ true, %land.rhs ]
  br i1 %26, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %27 = load i64, i64* %this, align 8
  %28 = load i64, i64* %frame.addr, align 8
  %cmp26 = icmp eq i64 %27, %28
  br i1 %cmp26, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %for.body
  br label %for.inc

if.end.29:                                        ; preds = %for.body
  %29 = load i64, i64* %this, align 8
  %sub30 = sub nsw i64 %29, 5
  %30 = inttoptr i64 %sub30 to i8*
  %31 = bitcast i8* %30 to %struct.frame*
  %minibuffer_window31 = getelementptr inbounds %struct.frame, %struct.frame* %31, i32 0, i32 7
  %32 = load i64, i64* %minibuffer_window31, align 8
  store i64 %32, i64* %fminiw, align 8
  %33 = load i64, i64* %fminiw, align 8
  %call32 = call zeroext i1 @WINDOWP(i64 %33)
  br i1 %call32, label %land.lhs.true.34, label %if.end.47

land.lhs.true.34:                                 ; preds = %if.end.29
  %34 = load i64, i64* %frame.addr, align 8
  %35 = load i64, i64* %fminiw, align 8
  %call35 = call %struct.window* @XWINDOW(i64 %35)
  %frame36 = getelementptr inbounds %struct.window, %struct.window* %call35, i32 0, i32 1
  %36 = load i64, i64* %frame36, align 8
  %cmp37 = icmp eq i64 %34, %36
  br i1 %cmp37, label %if.then.39, label %if.end.47

if.then.39:                                       ; preds = %land.lhs.true.34
  %37 = load i64, i64* %force.addr, align 8
  %call40 = call i64 @builtin_lisp_symbol(i32 704)
  %cmp41 = icmp eq i64 %37, %call40
  br i1 %cmp41, label %if.then.43, label %if.else

if.then.43:                                       ; preds = %if.then.39
  %38 = load i64, i64* %this, align 8
  %call44 = call i64 @builtin_lisp_symbol(i32 704)
  %call45 = call i64 @delete_frame(i64 %38, i64 %call44)
  br label %if.end.46

if.else:                                          ; preds = %if.then.39
  call void (i8*, ...) @error(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.8, i32 0, i32 0)) #7
  unreachable

if.end.46:                                        ; preds = %if.then.43
  br label %if.end.47

if.end.47:                                        ; preds = %if.end.46, %land.lhs.true.34, %if.end.29
  br label %for.inc

for.inc:                                          ; preds = %if.end.47, %if.then.28
  %39 = load i64, i64* %frames, align 8
  %sub48 = sub nsw i64 %39, 3
  %40 = inttoptr i64 %sub48 to i8*
  %41 = bitcast i8* %40 to %struct.Lisp_Cons*
  %u49 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %41, i32 0, i32 1
  %cdr50 = bitcast %union.anon.11* %u49 to i64*
  %42 = load i64, i64* %cdr50, align 8
  store i64 %42, i64* %frames, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  br label %if.end.51

if.end.51:                                        ; preds = %for.end, %land.lhs.true.16, %if.end.13
  %43 = load i64, i64* %frame.addr, align 8
  %call52 = call i64 @builtin_lisp_symbol(i32 927)
  %call53 = call i64 @Fframe_parameter(i64 %43, i64 %call52)
  %call54 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp55 = icmp eq i64 %call53, %call54
  %lnot = xor i1 %cmp55, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %is_tooltip_frame, align 4
  %44 = load i64, i64* @Vrun_hooks, align 8
  %call57 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp58 = icmp eq i64 %44, %call57
  br i1 %cmp58, label %if.then.61, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.51
  %45 = load i32, i32* %is_tooltip_frame, align 4
  %tobool60 = icmp ne i32 %45, 0
  br i1 %tobool60, label %if.then.61, label %if.else.62

if.then.61:                                       ; preds = %lor.lhs.false, %if.end.51
  br label %if.end.76

if.else.62:                                       ; preds = %lor.lhs.false
  %46 = load i64, i64* %force.addr, align 8
  %call63 = call i64 @builtin_lisp_symbol(i32 704)
  %cmp64 = icmp eq i64 %46, %call63
  br i1 %cmp64, label %if.then.66, label %if.else.71

if.then.66:                                       ; preds = %if.else.62
  %call67 = call i64 @builtin_lisp_symbol(i32 821)
  %call68 = call i64 @builtin_lisp_symbol(i32 335)
  %47 = load i64, i64* %frame.addr, align 8
  %call69 = call i64 @list3(i64 %call67, i64 %call68, i64 %47)
  %48 = load i64, i64* @pending_funcalls, align 8
  %call70 = call i64 @Fcons(i64 %call69, i64 %48)
  store i64 %call70, i64* @pending_funcalls, align 8
  br label %if.end.75

if.else.71:                                       ; preds = %if.else.62
  %49 = load i64, i64* %frame.addr, align 8
  call void @x_clipboard_manager_save_frame(i64 %49)
  %call72 = call i64 @builtin_lisp_symbol(i32 821)
  %call73 = call i64 @builtin_lisp_symbol(i32 335)
  %50 = load i64, i64* %frame.addr, align 8
  %call74 = call i64 @safe_call2(i64 %call72, i64 %call73, i64 %50)
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.71, %if.then.66
  br label %if.end.76

if.end.76:                                        ; preds = %if.end.75, %if.then.61
  %51 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal77 = getelementptr inbounds %struct.frame, %struct.frame* %51, i32 0, i32 61
  %52 = load %struct.terminal*, %struct.terminal** %terminal77, align 8
  %cmp78 = icmp ne %struct.terminal* %52, null
  br i1 %cmp78, label %if.end.82, label %if.then.80

if.then.80:                                       ; preds = %if.end.76
  %call81 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call81, i64* %retval
  br label %return

if.end.82:                                        ; preds = %if.end.76
  %53 = load i64, i64* @minibuf_window, align 8
  %54 = load i64, i64* @selected_window, align 8
  %cmp83 = icmp eq i64 %53, %54
  %conv84 = zext i1 %cmp83 to i32
  store i32 %conv84, i32* %minibuffer_selected, align 4
  %55 = load i64, i64* @selected_frame, align 8
  %call85 = call zeroext i1 @FRAMEP(i64 %55)
  br i1 %call85, label %land.lhs.true.87, label %cond.false

land.lhs.true.87:                                 ; preds = %if.end.82
  %56 = load i64, i64* @selected_frame, align 8
  %sub88 = sub nsw i64 %56, 5
  %57 = inttoptr i64 %sub88 to i8*
  %58 = bitcast i8* %57 to %struct.frame*
  %terminal89 = getelementptr inbounds %struct.frame, %struct.frame* %58, i32 0, i32 61
  %59 = load %struct.terminal*, %struct.terminal** %terminal89, align 8
  %cmp90 = icmp ne %struct.terminal* %59, null
  br i1 %cmp90, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.87
  %60 = load i64, i64* @selected_frame, align 8
  %sub92 = sub nsw i64 %60, 5
  %61 = inttoptr i64 %sub92 to i8*
  %62 = bitcast i8* %61 to %struct.frame*
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.87, %if.end.82
  call void @emacs_abort() #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %63, %cond.true
  %cond = phi %struct.frame* [ %62, %cond.true ], [ null, %63 ]
  store %struct.frame* %cond, %struct.frame** %sf, align 8
  %64 = load %struct.frame*, %struct.frame** %f, align 8
  %65 = load %struct.frame*, %struct.frame** %sf, align 8
  %cmp93 = icmp eq %struct.frame* %64, %65
  br i1 %cmp93, label %if.then.95, label %if.end.206

if.then.95:                                       ; preds = %cond.end
  %call96 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call96, i64* %frame1, align 8
  %66 = load i64, i64* @Vframe_list, align 8
  store i64 %66, i64* %tail, align 8
  br label %for.cond.97

for.cond.97:                                      ; preds = %for.inc.121, %if.then.95
  %67 = load i64, i64* %tail, align 8
  %and98 = and i64 %67, 7
  %conv99 = trunc i64 %and98 to i32
  %cmp100 = icmp eq i32 %conv99, 3
  br i1 %cmp100, label %land.rhs.102, label %land.end.105

land.rhs.102:                                     ; preds = %for.cond.97
  %68 = load i64, i64* %tail, align 8
  %sub103 = sub nsw i64 %68, 3
  %69 = inttoptr i64 %sub103 to i8*
  %70 = bitcast i8* %69 to %struct.Lisp_Cons*
  %car104 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %70, i32 0, i32 0
  %71 = load i64, i64* %car104, align 8
  store i64 %71, i64* %frame1, align 8
  br label %land.end.105

land.end.105:                                     ; preds = %land.rhs.102, %for.cond.97
  %72 = phi i1 [ false, %for.cond.97 ], [ true, %land.rhs.102 ]
  br i1 %72, label %for.body.106, label %for.end.125

for.body.106:                                     ; preds = %land.end.105
  %73 = load i64, i64* %frame.addr, align 8
  %74 = load i64, i64* %frame1, align 8
  %cmp107 = icmp eq i64 %73, %74
  br i1 %cmp107, label %if.end.120, label %land.lhs.true.109

land.lhs.true.109:                                ; preds = %for.body.106
  %75 = load i64, i64* %frame.addr, align 8
  %sub110 = sub nsw i64 %75, 5
  %76 = inttoptr i64 %sub110 to i8*
  %77 = bitcast i8* %76 to %struct.frame*
  %terminal111 = getelementptr inbounds %struct.frame, %struct.frame* %77, i32 0, i32 61
  %78 = load %struct.terminal*, %struct.terminal** %terminal111, align 8
  %79 = load i64, i64* %frame1, align 8
  %sub112 = sub nsw i64 %79, 5
  %80 = inttoptr i64 %sub112 to i8*
  %81 = bitcast i8* %80 to %struct.frame*
  %terminal113 = getelementptr inbounds %struct.frame, %struct.frame* %81, i32 0, i32 61
  %82 = load %struct.terminal*, %struct.terminal** %terminal113, align 8
  %cmp114 = icmp eq %struct.terminal* %78, %82
  br i1 %cmp114, label %land.lhs.true.116, label %if.end.120

land.lhs.true.116:                                ; preds = %land.lhs.true.109
  %83 = load i64, i64* %frame1, align 8
  %sub117 = sub nsw i64 %83, 5
  %84 = inttoptr i64 %sub117 to i8*
  %85 = bitcast i8* %84 to %struct.frame*
  %visible = getelementptr inbounds %struct.frame, %struct.frame* %85, i32 0, i32 26
  %86 = bitcast i48* %visible to i64*
  %bf.load = load i64, i64* %86, align 8
  %bf.lshr = lshr i64 %bf.load, 10
  %bf.clear = and i64 %bf.lshr, 3
  %bf.cast = trunc i64 %bf.clear to i32
  %tobool118 = icmp ne i32 %bf.cast, 0
  br i1 %tobool118, label %if.then.119, label %if.end.120

if.then.119:                                      ; preds = %land.lhs.true.116
  br label %for.end.125

if.end.120:                                       ; preds = %land.lhs.true.116, %land.lhs.true.109, %for.body.106
  br label %for.inc.121

for.inc.121:                                      ; preds = %if.end.120
  %87 = load i64, i64* %tail, align 8
  %sub122 = sub nsw i64 %87, 3
  %88 = inttoptr i64 %sub122 to i8*
  %89 = bitcast i8* %88 to %struct.Lisp_Cons*
  %u123 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %89, i32 0, i32 1
  %cdr124 = bitcast %union.anon.11* %u123 to i64*
  %90 = load i64, i64* %cdr124, align 8
  store i64 %90, i64* %tail, align 8
  br label %for.cond.97

for.end.125:                                      ; preds = %if.then.119, %land.end.105
  %91 = load i64, i64* %frame1, align 8
  %call126 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp127 = icmp eq i64 %91, %call126
  br i1 %cmp127, label %if.then.132, label %lor.lhs.false.129

lor.lhs.false.129:                                ; preds = %for.end.125
  %92 = load i64, i64* %frame1, align 8
  %93 = load i64, i64* %frame.addr, align 8
  %cmp130 = icmp eq i64 %92, %93
  br i1 %cmp130, label %if.then.132, label %if.end.191

if.then.132:                                      ; preds = %lor.lhs.false.129, %for.end.125
  %94 = load i64, i64* @Vframe_list, align 8
  store i64 %94, i64* %tail, align 8
  br label %for.cond.133

for.cond.133:                                     ; preds = %for.inc.186, %if.then.132
  %95 = load i64, i64* %tail, align 8
  %and134 = and i64 %95, 7
  %conv135 = trunc i64 %and134 to i32
  %cmp136 = icmp eq i32 %conv135, 3
  br i1 %cmp136, label %land.rhs.138, label %land.end.141

land.rhs.138:                                     ; preds = %for.cond.133
  %96 = load i64, i64* %tail, align 8
  %sub139 = sub nsw i64 %96, 3
  %97 = inttoptr i64 %sub139 to i8*
  %98 = bitcast i8* %97 to %struct.Lisp_Cons*
  %car140 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %98, i32 0, i32 0
  %99 = load i64, i64* %car140, align 8
  store i64 %99, i64* %frame1, align 8
  br label %land.end.141

land.end.141:                                     ; preds = %land.rhs.138, %for.cond.133
  %100 = phi i1 [ false, %for.cond.133 ], [ true, %land.rhs.138 ]
  br i1 %100, label %for.body.142, label %for.end.190

for.body.142:                                     ; preds = %land.end.141
  %101 = load i64, i64* %frame.addr, align 8
  %102 = load i64, i64* %frame1, align 8
  %cmp143 = icmp eq i64 %101, %102
  br i1 %cmp143, label %if.end.185, label %land.lhs.true.145

land.lhs.true.145:                                ; preds = %for.body.142
  %103 = load i64, i64* %frame1, align 8
  %sub146 = sub nsw i64 %103, 5
  %104 = inttoptr i64 %sub146 to i8*
  %105 = bitcast i8* %104 to %struct.frame*
  %terminal147 = getelementptr inbounds %struct.frame, %struct.frame* %105, i32 0, i32 61
  %106 = load %struct.terminal*, %struct.terminal** %terminal147, align 8
  %cmp148 = icmp ne %struct.terminal* %106, null
  br i1 %cmp148, label %if.then.150, label %if.end.185

if.then.150:                                      ; preds = %land.lhs.true.145
  %107 = load i64, i64* %frame1, align 8
  %sub151 = sub nsw i64 %107, 5
  %108 = inttoptr i64 %sub151 to i8*
  %109 = bitcast i8* %108 to %struct.frame*
  store %struct.frame* %109, %struct.frame** %f1, align 8
  %110 = load %struct.frame*, %struct.frame** %f1, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %110, i32 0, i32 26
  %111 = bitcast i48* %output_method to i64*
  %bf.load152 = load i64, i64* %111, align 8
  %bf.lshr153 = lshr i64 %bf.load152, 23
  %bf.clear154 = and i64 %bf.lshr153, 7
  %bf.cast155 = trunc i64 %bf.clear154 to i32
  %cmp156 = icmp eq i32 %bf.cast155, 1
  br i1 %cmp156, label %if.then.158, label %if.end.184

if.then.158:                                      ; preds = %if.then.150
  %112 = load %struct.frame*, %struct.frame** %f1, align 8
  %output_method159 = getelementptr inbounds %struct.frame, %struct.frame* %112, i32 0, i32 26
  %113 = bitcast i48* %output_method159 to i64*
  %bf.load160 = load i64, i64* %113, align 8
  %bf.lshr161 = lshr i64 %bf.load160, 23
  %bf.clear162 = and i64 %bf.lshr161, 7
  %bf.cast163 = trunc i64 %bf.clear162 to i32
  %cmp164 = icmp eq i32 %bf.cast163, 1
  br i1 %cmp164, label %cond.true.174, label %lor.lhs.false.166

lor.lhs.false.166:                                ; preds = %if.then.158
  %114 = load %struct.frame*, %struct.frame** %f1, align 8
  %output_method167 = getelementptr inbounds %struct.frame, %struct.frame* %114, i32 0, i32 26
  %115 = bitcast i48* %output_method167 to i64*
  %bf.load168 = load i64, i64* %115, align 8
  %bf.lshr169 = lshr i64 %bf.load168, 23
  %bf.clear170 = and i64 %bf.lshr169, 7
  %bf.cast171 = trunc i64 %bf.clear170 to i32
  %cmp172 = icmp eq i32 %bf.cast171, 3
  br i1 %cmp172, label %cond.true.174, label %cond.false.176

cond.true.174:                                    ; preds = %lor.lhs.false.166, %if.then.158
  %116 = load %struct.frame*, %struct.frame** %f1, align 8
  %terminal175 = getelementptr inbounds %struct.frame, %struct.frame* %116, i32 0, i32 61
  %117 = load %struct.terminal*, %struct.terminal** %terminal175, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %117, i32 0, i32 12
  %tty = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %118 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  br label %cond.end.177

cond.false.176:                                   ; preds = %lor.lhs.false.166
  call void @emacs_abort() #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.177

cond.end.177:                                     ; preds = %119, %cond.true.174
  %cond178 = phi %struct.tty_display_info* [ %118, %cond.true.174 ], [ null, %119 ]
  %top_frame179 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond178, i32 0, i32 11
  %120 = load i64, i64* %top_frame179, align 8
  store i64 %120, i64* %top_frame, align 8
  %121 = load i64, i64* %top_frame, align 8
  %122 = load i64, i64* %frame.addr, align 8
  %cmp180 = icmp eq i64 %121, %122
  br i1 %cmp180, label %if.end.183, label %if.then.182

if.then.182:                                      ; preds = %cond.end.177
  %123 = load i64, i64* %top_frame, align 8
  store i64 %123, i64* %frame1, align 8
  br label %if.end.183

if.end.183:                                       ; preds = %if.then.182, %cond.end.177
  br label %if.end.184

if.end.184:                                       ; preds = %if.end.183, %if.then.150
  br label %for.end.190

if.end.185:                                       ; preds = %land.lhs.true.145, %for.body.142
  br label %for.inc.186

for.inc.186:                                      ; preds = %if.end.185
  %124 = load i64, i64* %tail, align 8
  %sub187 = sub nsw i64 %124, 3
  %125 = inttoptr i64 %sub187 to i8*
  %126 = bitcast i8* %125 to %struct.Lisp_Cons*
  %u188 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %126, i32 0, i32 1
  %cdr189 = bitcast %union.anon.11* %u188 to i64*
  %127 = load i64, i64* %cdr189, align 8
  store i64 %127, i64* %tail, align 8
  br label %for.cond.133

for.end.190:                                      ; preds = %if.end.184, %land.end.141
  br label %if.end.191

if.end.191:                                       ; preds = %for.end.190, %lor.lhs.false.129
  %128 = load i64, i64* %frame1, align 8
  %call192 = call i64 @builtin_lisp_symbol(i32 0)
  %call193 = call i64 @do_switch_frame(i64 %128, i32 0, i32 1, i64 %call192)
  %129 = load i64, i64* @selected_frame, align 8
  %call194 = call zeroext i1 @FRAMEP(i64 %129)
  br i1 %call194, label %land.lhs.true.196, label %cond.false.203

land.lhs.true.196:                                ; preds = %if.end.191
  %130 = load i64, i64* @selected_frame, align 8
  %sub197 = sub nsw i64 %130, 5
  %131 = inttoptr i64 %sub197 to i8*
  %132 = bitcast i8* %131 to %struct.frame*
  %terminal198 = getelementptr inbounds %struct.frame, %struct.frame* %132, i32 0, i32 61
  %133 = load %struct.terminal*, %struct.terminal** %terminal198, align 8
  %cmp199 = icmp ne %struct.terminal* %133, null
  br i1 %cmp199, label %cond.true.201, label %cond.false.203

cond.true.201:                                    ; preds = %land.lhs.true.196
  %134 = load i64, i64* @selected_frame, align 8
  %sub202 = sub nsw i64 %134, 5
  %135 = inttoptr i64 %sub202 to i8*
  %136 = bitcast i8* %135 to %struct.frame*
  br label %cond.end.204

cond.false.203:                                   ; preds = %land.lhs.true.196, %if.end.191
  call void @emacs_abort() #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.204

cond.end.204:                                     ; preds = %137, %cond.true.201
  %cond205 = phi %struct.frame* [ %136, %cond.true.201 ], [ null, %137 ]
  store %struct.frame* %cond205, %struct.frame** %sf, align 8
  br label %if.end.206

if.end.206:                                       ; preds = %cond.end.204, %cond.end
  %138 = load i64, i64* %frame.addr, align 8
  %139 = load i32, i32* %minibuffer_selected, align 4
  call void @check_minibuf_window(i64 %138, i32 %139)
  %140 = load %struct.frame*, %struct.frame** %f, align 8
  %minibuffer_window207 = getelementptr inbounds %struct.frame, %struct.frame* %140, i32 0, i32 7
  %141 = load i64, i64* %minibuffer_window207, align 8
  %142 = load i64, i64* @echo_area_window, align 8
  %cmp208 = icmp eq i64 %141, %142
  br i1 %cmp208, label %if.then.210, label %if.end.212

if.then.210:                                      ; preds = %if.end.206
  %143 = load %struct.frame*, %struct.frame** %sf, align 8
  %minibuffer_window211 = getelementptr inbounds %struct.frame, %struct.frame* %143, i32 0, i32 7
  %144 = load i64, i64* %minibuffer_window211, align 8
  store i64 %144, i64* @echo_area_window, align 8
  br label %if.end.212

if.end.212:                                       ; preds = %if.then.210, %if.end.206
  %145 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method213 = getelementptr inbounds %struct.frame, %struct.frame* %145, i32 0, i32 26
  %146 = bitcast i48* %output_method213 to i64*
  %bf.load214 = load i64, i64* %146, align 8
  %bf.lshr215 = lshr i64 %bf.load214, 23
  %bf.clear216 = and i64 %bf.lshr215, 7
  %bf.cast217 = trunc i64 %bf.clear216 to i32
  %cmp218 = icmp eq i32 %bf.cast217, 2
  br i1 %cmp218, label %if.then.220, label %if.end.221

if.then.220:                                      ; preds = %if.end.212
  %147 = load %struct.frame*, %struct.frame** %f, align 8
  call void @x_clear_frame_selections(%struct.frame* %147)
  br label %if.end.221

if.end.221:                                       ; preds = %if.then.220, %if.end.212
  %148 = load %struct.frame*, %struct.frame** %f, align 8
  call void @free_glyphs(%struct.frame* %148)
  %149 = load %struct.frame*, %struct.frame** %f, align 8
  %call222 = call i64 @builtin_lisp_symbol(i32 0)
  %call223 = call i64 @font_update_drivers(%struct.frame* %149, i64 %call222)
  %150 = load %struct.frame*, %struct.frame** %f, align 8
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %150, i32 0, i32 5
  %151 = load i64, i64* %root_window, align 8
  call void @delete_all_child_windows(i64 %151)
  %152 = load %struct.frame*, %struct.frame** %f, align 8
  %call224 = call i64 @builtin_lisp_symbol(i32 0)
  call void @fset_root_window(%struct.frame* %152, i64 %call224)
  %153 = load i64, i64* %frame.addr, align 8
  %154 = load i64, i64* @Vframe_list, align 8
  %call225 = call i64 @Fdelq(i64 %153, i64 %154)
  store i64 %call225, i64* @Vframe_list, align 8
  %155 = load %struct.frame*, %struct.frame** %f, align 8
  call void @SET_FRAME_VISIBLE(%struct.frame* %155, i32 0)
  %156 = load %struct.frame*, %struct.frame** %f, align 8
  %call226 = call i64 @builtin_lisp_symbol(i32 0)
  call void @fset_menu_bar_vector(%struct.frame* %156, i64 %call226)
  %157 = load %struct.frame*, %struct.frame** %f, align 8
  %call227 = call i64 @builtin_lisp_symbol(i32 0)
  call void @fset_buffer_list(%struct.frame* %157, i64 %call227)
  %158 = load %struct.frame*, %struct.frame** %f, align 8
  %call228 = call i64 @builtin_lisp_symbol(i32 0)
  call void @fset_buried_buffer_list(%struct.frame* %158, i64 %call228)
  %159 = load %struct.frame*, %struct.frame** %f, align 8
  call void @free_font_driver_list(%struct.frame* %159)
  %160 = load %struct.frame*, %struct.frame** %f, align 8
  %decode_mode_spec_buffer = getelementptr inbounds %struct.frame, %struct.frame* %160, i32 0, i32 31
  %161 = load i8*, i8** %decode_mode_spec_buffer, align 8
  call void @xfree(i8* %161)
  %162 = load %struct.frame*, %struct.frame** %f, align 8
  %insert_line_cost = getelementptr inbounds %struct.frame, %struct.frame* %162, i32 0, i32 32
  %163 = load i32*, i32** %insert_line_cost, align 8
  %164 = bitcast i32* %163 to i8*
  call void @xfree(i8* %164)
  %165 = load %struct.frame*, %struct.frame** %f, align 8
  %delete_n_lines_cost = getelementptr inbounds %struct.frame, %struct.frame* %165, i32 0, i32 35
  %166 = load i32*, i32** %delete_n_lines_cost, align 8
  %167 = bitcast i32* %166 to i8*
  call void @xfree(i8* %167)
  %168 = load %struct.frame*, %struct.frame** %f, align 8
  %insert_n_lines_cost = getelementptr inbounds %struct.frame, %struct.frame* %168, i32 0, i32 34
  %169 = load i32*, i32** %insert_n_lines_cost, align 8
  %170 = bitcast i32* %169 to i8*
  call void @xfree(i8* %170)
  %171 = load %struct.frame*, %struct.frame** %f, align 8
  %delete_line_cost = getelementptr inbounds %struct.frame, %struct.frame* %171, i32 0, i32 33
  %172 = load i32*, i32** %delete_line_cost, align 8
  %173 = bitcast i32* %172 to i8*
  call void @xfree(i8* %173)
  call void @block_input()
  %174 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal230 = getelementptr inbounds %struct.frame, %struct.frame* %174, i32 0, i32 61
  %175 = load %struct.terminal*, %struct.terminal** %terminal230, align 8
  %delete_frame_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %175, i32 0, i32 45
  %176 = load void (%struct.frame*)*, void (%struct.frame*)** %delete_frame_hook, align 8
  %tobool231 = icmp ne void (%struct.frame*)* %176, null
  br i1 %tobool231, label %if.then.232, label %if.end.235

if.then.232:                                      ; preds = %if.end.221
  %177 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal233 = getelementptr inbounds %struct.frame, %struct.frame* %177, i32 0, i32 61
  %178 = load %struct.terminal*, %struct.terminal** %terminal233, align 8
  %delete_frame_hook234 = getelementptr inbounds %struct.terminal, %struct.terminal* %178, i32 0, i32 45
  %179 = load void (%struct.frame*)*, void (%struct.frame*)** %delete_frame_hook234, align 8
  %180 = load %struct.frame*, %struct.frame** %f, align 8
  call void %179(%struct.frame* %180)
  br label %if.end.235

if.end.235:                                       ; preds = %if.then.232, %if.end.221
  %181 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal236 = getelementptr inbounds %struct.frame, %struct.frame* %181, i32 0, i32 61
  %182 = load %struct.terminal*, %struct.terminal** %terminal236, align 8
  store %struct.terminal* %182, %struct.terminal** %terminal229, align 8
  %183 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %183, i32 0, i32 62
  %nothing = bitcast %union.output_data* %output_data to i64*
  store i64 0, i64* %nothing, align 8
  %184 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal237 = getelementptr inbounds %struct.frame, %struct.frame* %184, i32 0, i32 61
  store %struct.terminal* null, %struct.terminal** %terminal237, align 8
  call void @unblock_input()
  %185 = load %struct.terminal*, %struct.terminal** %terminal229, align 8
  %reference_count = getelementptr inbounds %struct.terminal, %struct.terminal* %185, i32 0, i32 7
  %186 = load i32, i32* %reference_count, align 4
  %dec = add nsw i32 %186, -1
  store i32 %dec, i32* %reference_count, align 4
  %187 = load %struct.terminal*, %struct.terminal** %terminal229, align 8
  %reference_count238 = getelementptr inbounds %struct.terminal, %struct.terminal* %187, i32 0, i32 7
  %188 = load i32, i32* %reference_count238, align 4
  %cmp239 = icmp eq i32 %188, 0
  br i1 %cmp239, label %land.lhs.true.241, label %if.end.246

land.lhs.true.241:                                ; preds = %if.end.235
  %189 = load %struct.terminal*, %struct.terminal** %terminal229, align 8
  %type = getelementptr inbounds %struct.terminal, %struct.terminal* %189, i32 0, i32 8
  %190 = load i32, i32* %type, align 4
  %cmp242 = icmp eq i32 %190, 2
  br i1 %cmp242, label %if.then.244, label %if.end.246

if.then.244:                                      ; preds = %land.lhs.true.241
  %191 = load %struct.terminal*, %struct.terminal** %terminal229, align 8
  %reference_count245 = getelementptr inbounds %struct.terminal, %struct.terminal* %191, i32 0, i32 7
  store i32 1, i32* %reference_count245, align 4
  br label %if.end.246

if.end.246:                                       ; preds = %if.then.244, %land.lhs.true.241, %if.end.235
  %192 = load %struct.terminal*, %struct.terminal** %terminal229, align 8
  %reference_count247 = getelementptr inbounds %struct.terminal, %struct.terminal* %192, i32 0, i32 7
  %193 = load i32, i32* %reference_count247, align 4
  %cmp248 = icmp eq i32 %193, 0
  br i1 %cmp248, label %if.then.250, label %if.else.261

if.then.250:                                      ; preds = %if.end.246
  %194 = load %struct.terminal*, %struct.terminal** %terminal229, align 8
  %195 = bitcast %struct.terminal* %194 to i8*
  %call251 = call i64 @make_lisp_ptr(i8* %195, i32 5)
  store i64 %call251, i64* %tmp, align 8
  store %struct.kboard* null, %struct.kboard** %kb, align 8
  %196 = load i64, i64* %tmp, align 8
  %197 = load i64, i64* %force.addr, align 8
  %call252 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp253 = icmp eq i64 %197, %call252
  br i1 %cmp253, label %cond.true.255, label %cond.false.257

cond.true.255:                                    ; preds = %if.then.250
  %call256 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.258

cond.false.257:                                   ; preds = %if.then.250
  %198 = load i64, i64* %force.addr, align 8
  br label %cond.end.258

cond.end.258:                                     ; preds = %cond.false.257, %cond.true.255
  %cond259 = phi i64 [ %call256, %cond.true.255 ], [ %198, %cond.false.257 ]
  %call260 = call i64 @Fdelete_terminal(i64 %196, i64 %cond259)
  br label %if.end.262

if.else.261:                                      ; preds = %if.end.246
  %199 = load %struct.terminal*, %struct.terminal** %terminal229, align 8
  %kboard = getelementptr inbounds %struct.terminal, %struct.terminal* %199, i32 0, i32 10
  %200 = load %struct.kboard*, %struct.kboard** %kboard, align 8
  store %struct.kboard* %200, %struct.kboard** %kb, align 8
  br label %if.end.262

if.end.262:                                       ; preds = %if.else.261, %cond.end.258
  %201 = load %struct.frame*, %struct.frame** %f, align 8
  %202 = load %struct.frame*, %struct.frame** @last_nonminibuf_frame, align 8
  %cmp263 = icmp eq %struct.frame* %201, %202
  br i1 %cmp263, label %if.then.265, label %if.end.292

if.then.265:                                      ; preds = %if.end.262
  store %struct.frame* null, %struct.frame** @last_nonminibuf_frame, align 8
  %203 = load i64, i64* @Vframe_list, align 8
  store i64 %203, i64* %frames267, align 8
  br label %for.cond.270

for.cond.270:                                     ; preds = %for.inc.287, %if.then.265
  %204 = load i64, i64* %frames267, align 8
  %and271 = and i64 %204, 7
  %conv272 = trunc i64 %and271 to i32
  %cmp273 = icmp eq i32 %conv272, 3
  br i1 %cmp273, label %land.rhs.275, label %land.end.278

land.rhs.275:                                     ; preds = %for.cond.270
  %205 = load i64, i64* %frames267, align 8
  %sub276 = sub nsw i64 %205, 3
  %206 = inttoptr i64 %sub276 to i8*
  %207 = bitcast i8* %206 to %struct.Lisp_Cons*
  %car277 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %207, i32 0, i32 0
  %208 = load i64, i64* %car277, align 8
  store i64 %208, i64* %this269, align 8
  br label %land.end.278

land.end.278:                                     ; preds = %land.rhs.275, %for.cond.270
  %209 = phi i1 [ false, %for.cond.270 ], [ true, %land.rhs.275 ]
  br i1 %209, label %for.body.279, label %for.end.291

for.body.279:                                     ; preds = %land.end.278
  %210 = load i64, i64* %this269, align 8
  %sub280 = sub nsw i64 %210, 5
  %211 = inttoptr i64 %sub280 to i8*
  %212 = bitcast i8* %211 to %struct.frame*
  store %struct.frame* %212, %struct.frame** %f, align 8
  %213 = load %struct.frame*, %struct.frame** %f, align 8
  %root_window281 = getelementptr inbounds %struct.frame, %struct.frame* %213, i32 0, i32 5
  %214 = load i64, i64* %root_window281, align 8
  %215 = load %struct.frame*, %struct.frame** %f, align 8
  %minibuffer_window282 = getelementptr inbounds %struct.frame, %struct.frame* %215, i32 0, i32 7
  %216 = load i64, i64* %minibuffer_window282, align 8
  %cmp283 = icmp eq i64 %214, %216
  br i1 %cmp283, label %if.end.286, label %if.then.285

if.then.285:                                      ; preds = %for.body.279
  %217 = load %struct.frame*, %struct.frame** %f, align 8
  store %struct.frame* %217, %struct.frame** @last_nonminibuf_frame, align 8
  br label %for.end.291

if.end.286:                                       ; preds = %for.body.279
  br label %for.inc.287

for.inc.287:                                      ; preds = %if.end.286
  %218 = load i64, i64* %frames267, align 8
  %sub288 = sub nsw i64 %218, 3
  %219 = inttoptr i64 %sub288 to i8*
  %220 = bitcast i8* %219 to %struct.Lisp_Cons*
  %u289 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %220, i32 0, i32 1
  %cdr290 = bitcast %union.anon.11* %u289 to i64*
  %221 = load i64, i64* %cdr290, align 8
  store i64 %221, i64* %frames267, align 8
  br label %for.cond.270

for.end.291:                                      ; preds = %if.then.285, %land.end.278
  br label %if.end.292

if.end.292:                                       ; preds = %for.end.291, %if.end.262
  %222 = load %struct.kboard*, %struct.kboard** %kb, align 8
  %cmp293 = icmp ne %struct.kboard* %222, null
  br i1 %cmp293, label %if.then.295, label %if.end.329

if.then.295:                                      ; preds = %if.end.292
  %call301 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call301, i64* %frame_on_same_kboard, align 8
  %223 = load i64, i64* @Vframe_list, align 8
  store i64 %223, i64* %frames297, align 8
  br label %for.cond.302

for.cond.302:                                     ; preds = %for.inc.319, %if.then.295
  %224 = load i64, i64* %frames297, align 8
  %and303 = and i64 %224, 7
  %conv304 = trunc i64 %and303 to i32
  %cmp305 = icmp eq i32 %conv304, 3
  br i1 %cmp305, label %land.rhs.307, label %land.end.310

land.rhs.307:                                     ; preds = %for.cond.302
  %225 = load i64, i64* %frames297, align 8
  %sub308 = sub nsw i64 %225, 3
  %226 = inttoptr i64 %sub308 to i8*
  %227 = bitcast i8* %226 to %struct.Lisp_Cons*
  %car309 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %227, i32 0, i32 0
  %228 = load i64, i64* %car309, align 8
  store i64 %228, i64* %this299, align 8
  br label %land.end.310

land.end.310:                                     ; preds = %land.rhs.307, %for.cond.302
  %229 = phi i1 [ false, %for.cond.302 ], [ true, %land.rhs.307 ]
  br i1 %229, label %for.body.311, label %for.end.323

for.body.311:                                     ; preds = %land.end.310
  %230 = load %struct.kboard*, %struct.kboard** %kb, align 8
  %231 = load i64, i64* %this299, align 8
  %sub312 = sub nsw i64 %231, 5
  %232 = inttoptr i64 %sub312 to i8*
  %233 = bitcast i8* %232 to %struct.frame*
  %terminal313 = getelementptr inbounds %struct.frame, %struct.frame* %233, i32 0, i32 61
  %234 = load %struct.terminal*, %struct.terminal** %terminal313, align 8
  %kboard314 = getelementptr inbounds %struct.terminal, %struct.terminal* %234, i32 0, i32 10
  %235 = load %struct.kboard*, %struct.kboard** %kboard314, align 8
  %cmp315 = icmp eq %struct.kboard* %230, %235
  br i1 %cmp315, label %if.then.317, label %if.end.318

if.then.317:                                      ; preds = %for.body.311
  %236 = load i64, i64* %this299, align 8
  store i64 %236, i64* %frame_on_same_kboard, align 8
  br label %if.end.318

if.end.318:                                       ; preds = %if.then.317, %for.body.311
  br label %for.inc.319

for.inc.319:                                      ; preds = %if.end.318
  %237 = load i64, i64* %frames297, align 8
  %sub320 = sub nsw i64 %237, 3
  %238 = inttoptr i64 %sub320 to i8*
  %239 = bitcast i8* %238 to %struct.Lisp_Cons*
  %u321 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %239, i32 0, i32 1
  %cdr322 = bitcast %union.anon.11* %u321 to i64*
  %240 = load i64, i64* %cdr322, align 8
  store i64 %240, i64* %frames297, align 8
  br label %for.cond.302

for.end.323:                                      ; preds = %land.end.310
  %241 = load i64, i64* %frame_on_same_kboard, align 8
  %call324 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp325 = icmp eq i64 %241, %call324
  br i1 %cmp325, label %if.then.327, label %if.end.328

if.then.327:                                      ; preds = %for.end.323
  %242 = load %struct.kboard*, %struct.kboard** %kb, align 8
  call void @not_single_kboard_state(%struct.kboard* %242)
  br label %if.end.328

if.end.328:                                       ; preds = %if.then.327, %for.end.323
  br label %if.end.329

if.end.329:                                       ; preds = %if.end.328, %if.end.292
  %243 = load %struct.kboard*, %struct.kboard** %kb, align 8
  %cmp330 = icmp ne %struct.kboard* %243, null
  br i1 %cmp330, label %land.lhs.true.332, label %if.end.404

land.lhs.true.332:                                ; preds = %if.end.329
  %244 = load i64, i64* %frame.addr, align 8
  %245 = load %struct.kboard*, %struct.kboard** %kb, align 8
  %Vdefault_minibuffer_frame_ = getelementptr inbounds %struct.kboard, %struct.kboard* %245, i32 0, i32 20
  %246 = load i64, i64* %Vdefault_minibuffer_frame_, align 8
  %cmp333 = icmp eq i64 %244, %246
  br i1 %cmp333, label %if.then.335, label %if.end.404

if.then.335:                                      ; preds = %land.lhs.true.332
  %call341 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call341, i64* %frame_with_minibuf, align 8
  %call344 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call344, i64* %frame_on_same_kboard343, align 8
  %247 = load i64, i64* @Vframe_list, align 8
  store i64 %247, i64* %frames337, align 8
  br label %for.cond.345

for.cond.345:                                     ; preds = %for.inc.387, %if.then.335
  %248 = load i64, i64* %frames337, align 8
  %and346 = and i64 %248, 7
  %conv347 = trunc i64 %and346 to i32
  %cmp348 = icmp eq i32 %conv347, 3
  br i1 %cmp348, label %land.rhs.350, label %land.end.353

land.rhs.350:                                     ; preds = %for.cond.345
  %249 = load i64, i64* %frames337, align 8
  %sub351 = sub nsw i64 %249, 3
  %250 = inttoptr i64 %sub351 to i8*
  %251 = bitcast i8* %250 to %struct.Lisp_Cons*
  %car352 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %251, i32 0, i32 0
  %252 = load i64, i64* %car352, align 8
  store i64 %252, i64* %this339, align 8
  br label %land.end.353

land.end.353:                                     ; preds = %land.rhs.350, %for.cond.345
  %253 = phi i1 [ false, %for.cond.345 ], [ true, %land.rhs.350 ]
  br i1 %253, label %for.body.354, label %for.end.391

for.body.354:                                     ; preds = %land.end.353
  %254 = load i64, i64* %this339, align 8
  %sub357 = sub nsw i64 %254, 5
  %255 = inttoptr i64 %sub357 to i8*
  %256 = bitcast i8* %255 to %struct.frame*
  store %struct.frame* %256, %struct.frame** %f1356, align 8
  %257 = load %struct.kboard*, %struct.kboard** %kb, align 8
  %258 = load %struct.frame*, %struct.frame** %f1356, align 8
  %terminal358 = getelementptr inbounds %struct.frame, %struct.frame* %258, i32 0, i32 61
  %259 = load %struct.terminal*, %struct.terminal** %terminal358, align 8
  %kboard359 = getelementptr inbounds %struct.terminal, %struct.terminal* %259, i32 0, i32 10
  %260 = load %struct.kboard*, %struct.kboard** %kboard359, align 8
  %cmp360 = icmp eq %struct.kboard* %257, %260
  br i1 %cmp360, label %land.lhs.true.362, label %if.end.380

land.lhs.true.362:                                ; preds = %for.body.354
  %261 = load %struct.frame*, %struct.frame** %f1356, align 8
  %minibuffer_window363 = getelementptr inbounds %struct.frame, %struct.frame* %261, i32 0, i32 7
  %262 = load i64, i64* %minibuffer_window363, align 8
  %call364 = call zeroext i1 @WINDOWP(i64 %262)
  br i1 %call364, label %land.lhs.true.366, label %if.end.380

land.lhs.true.366:                                ; preds = %land.lhs.true.362
  %263 = load %struct.frame*, %struct.frame** %f1356, align 8
  %minibuffer_window367 = getelementptr inbounds %struct.frame, %struct.frame* %263, i32 0, i32 7
  %264 = load i64, i64* %minibuffer_window367, align 8
  %call368 = call %struct.window* @XWINDOW(i64 %264)
  %frame369 = getelementptr inbounds %struct.window, %struct.window* %call368, i32 0, i32 1
  %265 = load i64, i64* %frame369, align 8
  %sub370 = sub nsw i64 %265, 5
  %266 = inttoptr i64 %sub370 to i8*
  %267 = bitcast i8* %266 to %struct.frame*
  %268 = load %struct.frame*, %struct.frame** %f1356, align 8
  %cmp371 = icmp eq %struct.frame* %267, %268
  br i1 %cmp371, label %if.then.373, label %if.end.380

if.then.373:                                      ; preds = %land.lhs.true.366
  %269 = load i64, i64* %this339, align 8
  store i64 %269, i64* %frame_with_minibuf, align 8
  %270 = load %struct.frame*, %struct.frame** %f1356, align 8
  %root_window374 = getelementptr inbounds %struct.frame, %struct.frame* %270, i32 0, i32 5
  %271 = load i64, i64* %root_window374, align 8
  %272 = load %struct.frame*, %struct.frame** %f1356, align 8
  %minibuffer_window375 = getelementptr inbounds %struct.frame, %struct.frame* %272, i32 0, i32 7
  %273 = load i64, i64* %minibuffer_window375, align 8
  %cmp376 = icmp eq i64 %271, %273
  br i1 %cmp376, label %if.then.378, label %if.end.379

if.then.378:                                      ; preds = %if.then.373
  br label %for.end.391

if.end.379:                                       ; preds = %if.then.373
  br label %if.end.380

if.end.380:                                       ; preds = %if.end.379, %land.lhs.true.366, %land.lhs.true.362, %for.body.354
  %274 = load %struct.kboard*, %struct.kboard** %kb, align 8
  %275 = load %struct.frame*, %struct.frame** %f1356, align 8
  %terminal381 = getelementptr inbounds %struct.frame, %struct.frame* %275, i32 0, i32 61
  %276 = load %struct.terminal*, %struct.terminal** %terminal381, align 8
  %kboard382 = getelementptr inbounds %struct.terminal, %struct.terminal* %276, i32 0, i32 10
  %277 = load %struct.kboard*, %struct.kboard** %kboard382, align 8
  %cmp383 = icmp eq %struct.kboard* %274, %277
  br i1 %cmp383, label %if.then.385, label %if.end.386

if.then.385:                                      ; preds = %if.end.380
  %278 = load i64, i64* %this339, align 8
  store i64 %278, i64* %frame_on_same_kboard343, align 8
  br label %if.end.386

if.end.386:                                       ; preds = %if.then.385, %if.end.380
  br label %for.inc.387

for.inc.387:                                      ; preds = %if.end.386
  %279 = load i64, i64* %frames337, align 8
  %sub388 = sub nsw i64 %279, 3
  %280 = inttoptr i64 %sub388 to i8*
  %281 = bitcast i8* %280 to %struct.Lisp_Cons*
  %u389 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %281, i32 0, i32 1
  %cdr390 = bitcast %union.anon.11* %u389 to i64*
  %282 = load i64, i64* %cdr390, align 8
  store i64 %282, i64* %frames337, align 8
  br label %for.cond.345

for.end.391:                                      ; preds = %if.then.378, %land.end.353
  %283 = load i64, i64* %frame_on_same_kboard343, align 8
  %call392 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp393 = icmp eq i64 %283, %call392
  br i1 %cmp393, label %if.else.401, label %if.then.395

if.then.395:                                      ; preds = %for.end.391
  %284 = load i64, i64* %frame_with_minibuf, align 8
  %call396 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp397 = icmp eq i64 %284, %call396
  br i1 %cmp397, label %if.then.399, label %if.end.400

if.then.399:                                      ; preds = %if.then.395
  call void @emacs_abort() #7
  unreachable

if.end.400:                                       ; preds = %if.then.395
  %285 = load %struct.kboard*, %struct.kboard** %kb, align 8
  %286 = load i64, i64* %frame_with_minibuf, align 8
  call void @kset_default_minibuffer_frame(%struct.kboard* %285, i64 %286)
  br label %if.end.403

if.else.401:                                      ; preds = %for.end.391
  %287 = load %struct.kboard*, %struct.kboard** %kb, align 8
  %call402 = call i64 @builtin_lisp_symbol(i32 0)
  call void @kset_default_minibuffer_frame(%struct.kboard* %287, i64 %call402)
  br label %if.end.403

if.end.403:                                       ; preds = %if.else.401, %if.end.400
  br label %if.end.404

if.end.404:                                       ; preds = %if.end.403, %land.lhs.true.332, %if.end.329
  %288 = load i32, i32* %is_tooltip_frame, align 4
  %tobool405 = icmp ne i32 %288, 0
  br i1 %tobool405, label %if.end.407, label %if.then.406

if.then.406:                                      ; preds = %if.end.404
  store i32 15, i32* @update_mode_lines, align 4
  br label %if.end.407

if.end.407:                                       ; preds = %if.then.406, %if.end.404
  %call408 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call408, i64* %retval
  br label %return

return:                                           ; preds = %if.end.407, %if.then.80, %if.then
  %289 = load i64, i64* %retval
  ret i64 %289
}

; Function Attrs: nounwind uwtable
define internal i32 @other_visible_frames(%struct.frame* %f) #0 {
entry:
  %retval = alloca i32, align 4
  %f.addr = alloca %struct.frame*, align 8
  %frames = alloca i64, align 8
  %this = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load i64, i64* @Vframe_list, align 8
  store i64 %0, i64* %frames, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %frames, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %2 = load i64, i64* %frames, align 8
  %sub = sub nsw i64 %2, 3
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %4, i32 0, i32 0
  %5 = load i64, i64* %car, align 8
  store i64 %5, i64* %this, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %6 = phi i1 [ false, %for.cond ], [ true, %land.rhs ]
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %8 = load i64, i64* %this, align 8
  %sub2 = sub nsw i64 %8, 5
  %9 = inttoptr i64 %sub2 to i8*
  %10 = bitcast i8* %9 to %struct.frame*
  %cmp3 = icmp eq %struct.frame* %7, %10
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %11 = load i64, i64* %this, align 8
  %sub5 = sub nsw i64 %11, 5
  %12 = inttoptr i64 %sub5 to i8*
  %13 = bitcast i8* %12 to %struct.frame*
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 26
  %14 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %14, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp6 = icmp eq i32 %bf.cast, 2
  br i1 %cmp6, label %if.then.8, label %if.end.10

if.then.8:                                        ; preds = %if.end
  %15 = load i64, i64* %this, align 8
  %sub9 = sub nsw i64 %15, 5
  %16 = inttoptr i64 %sub9 to i8*
  %17 = bitcast i8* %16 to %struct.frame*
  call void @x_sync(%struct.frame* %17)
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.8, %if.end
  %18 = load i64, i64* %this, align 8
  %sub11 = sub nsw i64 %18, 5
  %19 = inttoptr i64 %sub11 to i8*
  %20 = bitcast i8* %19 to %struct.frame*
  %visible = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 26
  %21 = bitcast i48* %visible to i64*
  %bf.load12 = load i64, i64* %21, align 8
  %bf.lshr13 = lshr i64 %bf.load12, 10
  %bf.clear14 = and i64 %bf.lshr13, 3
  %bf.cast15 = trunc i64 %bf.clear14 to i32
  %tobool = icmp ne i32 %bf.cast15, 0
  br i1 %tobool, label %if.then.38, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.10
  %22 = load i64, i64* %this, align 8
  %sub16 = sub nsw i64 %22, 5
  %23 = inttoptr i64 %sub16 to i8*
  %24 = bitcast i8* %23 to %struct.frame*
  %iconified = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 26
  %25 = bitcast i48* %iconified to i64*
  %bf.load17 = load i64, i64* %25, align 8
  %bf.lshr18 = lshr i64 %bf.load17, 12
  %bf.clear19 = and i64 %bf.lshr18, 1
  %bf.cast20 = trunc i64 %bf.clear19 to i1
  br i1 %bf.cast20, label %if.then.38, label %lor.lhs.false.22

lor.lhs.false.22:                                 ; preds = %lor.lhs.false
  %26 = load i64, i64* %this, align 8
  %sub23 = sub nsw i64 %26, 5
  %27 = inttoptr i64 %sub23 to i8*
  %28 = bitcast i8* %27 to %struct.frame*
  %output_method24 = getelementptr inbounds %struct.frame, %struct.frame* %28, i32 0, i32 26
  %29 = bitcast i48* %output_method24 to i64*
  %bf.load25 = load i64, i64* %29, align 8
  %bf.lshr26 = lshr i64 %bf.load25, 23
  %bf.clear27 = and i64 %bf.lshr26, 7
  %bf.cast28 = trunc i64 %bf.clear27 to i32
  %cmp29 = icmp eq i32 %bf.cast28, 2
  br i1 %cmp29, label %land.lhs.true, label %if.end.39

land.lhs.true:                                    ; preds = %lor.lhs.false.22
  %30 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method31 = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 26
  %31 = bitcast i48* %output_method31 to i64*
  %bf.load32 = load i64, i64* %31, align 8
  %bf.lshr33 = lshr i64 %bf.load32, 23
  %bf.clear34 = and i64 %bf.lshr33, 7
  %bf.cast35 = trunc i64 %bf.clear34 to i32
  %cmp36 = icmp eq i32 %bf.cast35, 2
  br i1 %cmp36, label %if.end.39, label %if.then.38

if.then.38:                                       ; preds = %land.lhs.true, %lor.lhs.false, %if.end.10
  store i32 1, i32* %retval
  br label %return

if.end.39:                                        ; preds = %land.lhs.true, %lor.lhs.false.22
  br label %for.inc

for.inc:                                          ; preds = %if.end.39, %if.then
  %32 = load i64, i64* %frames, align 8
  %sub40 = sub nsw i64 %32, 3
  %33 = inttoptr i64 %sub40 to i8*
  %34 = bitcast i8* %33 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %34, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %35 = load i64, i64* %cdr, align 8
  store i64 %35, i64* %frames, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.38
  %36 = load i32, i32* %retval
  ret i32 %36
}

; Function Attrs: nounwind uwtable
define i64 @Fframe_parameter(i64 %frame, i64 %parameter) #0 {
entry:
  %frame.addr = alloca i64, align 8
  %parameter.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %value = alloca i64, align 8
  %tem = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  store i64 %parameter, i64* %parameter.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_any_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call1, i64* %value, align 8
  %1 = load i64, i64* %parameter.addr, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call3 = call i64 @builtin_lisp_symbol(i32 897)
  %2 = load i64, i64* %parameter.addr, align 8
  %3 = call i64 @wrong_type_argument(i64 %call3, i64 %2) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %4, %cond.true
  %5 = load %struct.frame*, %struct.frame** %f, align 8
  %6 = bitcast %struct.frame* %5 to i8*
  %call4 = call i64 @make_lisp_ptr(i8* %6, i32 5)
  store i64 %call4, i64* %frame.addr, align 8
  %7 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 61
  %8 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp5 = icmp ne %struct.terminal* %8, null
  br i1 %cmp5, label %if.then, label %if.end.74

if.then:                                          ; preds = %cond.end
  %9 = load i64, i64* %parameter.addr, align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 696)
  %cmp8 = icmp eq i64 %9, %call7
  br i1 %cmp8, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %if.then
  %10 = load %struct.frame*, %struct.frame** %f, align 8
  %name = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 1
  %11 = load i64, i64* %name, align 8
  store i64 %11, i64* %value, align 8
  br label %if.end.73

if.else:                                          ; preds = %if.then
  %12 = load i64, i64* %parameter.addr, align 8
  %call11 = call i64 @builtin_lisp_symbol(i32 344)
  %cmp12 = icmp eq i64 %12, %call11
  br i1 %cmp12, label %land.lhs.true, label %if.else.17

land.lhs.true:                                    ; preds = %if.else
  %13 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 26
  %14 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %14, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp14 = icmp eq i32 %bf.cast, 2
  br i1 %cmp14, label %if.then.16, label %if.else.17

if.then.16:                                       ; preds = %land.lhs.true
  %15 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %16 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %16, i32 0, i32 44
  %17 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %name_list_element = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %17, i32 0, i32 4
  %18 = load i64, i64* %name_list_element, align 8
  %sub = sub nsw i64 %18, 3
  %19 = inttoptr i64 %sub to i8*
  %20 = bitcast i8* %19 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %20, i32 0, i32 0
  %21 = load i64, i64* %car, align 8
  store i64 %21, i64* %value, align 8
  br label %if.end.72

if.else.17:                                       ; preds = %land.lhs.true, %if.else
  %22 = load i64, i64* %parameter.addr, align 8
  %call18 = call i64 @builtin_lisp_symbol(i32 193)
  %cmp19 = icmp eq i64 %22, %call18
  br i1 %cmp19, label %if.then.24, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else.17
  %23 = load i64, i64* %parameter.addr, align 8
  %call21 = call i64 @builtin_lisp_symbol(i32 451)
  %cmp22 = icmp eq i64 %23, %call21
  br i1 %cmp22, label %if.then.24, label %if.else.54

if.then.24:                                       ; preds = %lor.lhs.false, %if.else.17
  %24 = load i64, i64* %parameter.addr, align 8
  %25 = load %struct.frame*, %struct.frame** %f, align 8
  %param_alist = getelementptr inbounds %struct.frame, %struct.frame* %25, i32 0, i32 8
  %26 = load i64, i64* %param_alist, align 8
  %call25 = call i64 @Fassq(i64 %24, i64 %26)
  store i64 %call25, i64* %value, align 8
  %27 = load i64, i64* %value, align 8
  %and26 = and i64 %27, 7
  %conv27 = trunc i64 %and26 to i32
  %cmp28 = icmp eq i32 %conv27, 3
  br i1 %cmp28, label %if.then.30, label %if.else.49

if.then.30:                                       ; preds = %if.then.24
  %28 = load i64, i64* %value, align 8
  %sub31 = sub nsw i64 %28, 3
  %29 = inttoptr i64 %sub31 to i8*
  %30 = bitcast i8* %29 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %30, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %31 = load i64, i64* %cdr, align 8
  store i64 %31, i64* %value, align 8
  %32 = load i64, i64* %value, align 8
  %call32 = call zeroext i1 @STRINGP(i64 %32)
  br i1 %call32, label %land.lhs.true.34, label %if.end.48

land.lhs.true.34:                                 ; preds = %if.then.30
  %33 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method35 = getelementptr inbounds %struct.frame, %struct.frame* %33, i32 0, i32 26
  %34 = bitcast i48* %output_method35 to i64*
  %bf.load36 = load i64, i64* %34, align 8
  %bf.lshr37 = lshr i64 %bf.load36, 23
  %bf.clear38 = and i64 %bf.lshr37, 7
  %bf.cast39 = trunc i64 %bf.clear38 to i32
  %cmp40 = icmp eq i32 %bf.cast39, 2
  br i1 %cmp40, label %if.end.48, label %if.then.42

if.then.42:                                       ; preds = %land.lhs.true.34
  %35 = load %struct.frame*, %struct.frame** %f, align 8
  %36 = load i64, i64* %value, align 8
  %call43 = call i64 @frame_unspecified_color(%struct.frame* %35, i64 %36)
  store i64 %call43, i64* %tem, align 8
  %37 = load i64, i64* %tem, align 8
  %call44 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp45 = icmp eq i64 %37, %call44
  br i1 %cmp45, label %if.end, label %if.then.47

if.then.47:                                       ; preds = %if.then.42
  %38 = load i64, i64* %tem, align 8
  store i64 %38, i64* %value, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.47, %if.then.42
  br label %if.end.48

if.end.48:                                        ; preds = %if.end, %land.lhs.true.34, %if.then.30
  br label %if.end.53

if.else.49:                                       ; preds = %if.then.24
  %39 = load i64, i64* %parameter.addr, align 8
  %40 = load i64, i64* %frame.addr, align 8
  %call50 = call i64 @Fframe_parameters(i64 %40)
  %call51 = call i64 @Fassq(i64 %39, i64 %call50)
  %call52 = call i64 @Fcdr(i64 %call51)
  store i64 %call52, i64* %value, align 8
  br label %if.end.53

if.end.53:                                        ; preds = %if.else.49, %if.end.48
  br label %if.end.71

if.else.54:                                       ; preds = %lor.lhs.false
  %41 = load i64, i64* %parameter.addr, align 8
  %call55 = call i64 @builtin_lisp_symbol(i32 347)
  %cmp56 = icmp eq i64 %41, %call55
  br i1 %cmp56, label %if.then.62, label %lor.lhs.false.58

lor.lhs.false.58:                                 ; preds = %if.else.54
  %42 = load i64, i64* %parameter.addr, align 8
  %call59 = call i64 @builtin_lisp_symbol(i32 194)
  %cmp60 = icmp eq i64 %42, %call59
  br i1 %cmp60, label %if.then.62, label %if.else.66

if.then.62:                                       ; preds = %lor.lhs.false.58, %if.else.54
  %43 = load i64, i64* %parameter.addr, align 8
  %44 = load %struct.frame*, %struct.frame** %f, align 8
  %param_alist63 = getelementptr inbounds %struct.frame, %struct.frame* %44, i32 0, i32 8
  %45 = load i64, i64* %param_alist63, align 8
  %call64 = call i64 @Fassq(i64 %43, i64 %45)
  %call65 = call i64 @Fcdr(i64 %call64)
  store i64 %call65, i64* %value, align 8
  br label %if.end.70

if.else.66:                                       ; preds = %lor.lhs.false.58
  %46 = load i64, i64* %parameter.addr, align 8
  %47 = load i64, i64* %frame.addr, align 8
  %call67 = call i64 @Fframe_parameters(i64 %47)
  %call68 = call i64 @Fassq(i64 %46, i64 %call67)
  %call69 = call i64 @Fcdr(i64 %call68)
  store i64 %call69, i64* %value, align 8
  br label %if.end.70

if.end.70:                                        ; preds = %if.else.66, %if.then.62
  br label %if.end.71

if.end.71:                                        ; preds = %if.end.70, %if.end.53
  br label %if.end.72

if.end.72:                                        ; preds = %if.end.71, %if.then.16
  br label %if.end.73

if.end.73:                                        ; preds = %if.end.72, %if.then.10
  br label %if.end.74

if.end.74:                                        ; preds = %if.end.73, %cond.end
  %48 = load i64, i64* %value, align 8
  ret i64 %48
}

declare i64 @list3(i64, i64, i64) #1

declare void @x_clipboard_manager_save_frame(i64) #1

declare i64 @safe_call2(i64, i64, i64) #1

; Function Attrs: nounwind uwtable
define internal void @check_minibuf_window(i64 %frame, i32 %select) #0 {
entry:
  %frame.addr = alloca i64, align 8
  %select.addr = alloca i32, align 4
  %f = alloca %struct.frame*, align 8
  %frames = alloca i64, align 8
  %this = alloca i64, align 8
  %window = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  store i32 %select, i32* %select.addr, align 4
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_live_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  %1 = load %struct.frame*, %struct.frame** %f, align 8
  %2 = bitcast %struct.frame* %1 to i8*
  %call1 = call i64 @make_lisp_ptr(i8* %2, i32 5)
  store i64 %call1, i64* %frame.addr, align 8
  %3 = load i64, i64* @minibuf_window, align 8
  %call2 = call zeroext i1 @WINDOWP(i64 %3)
  br i1 %call2, label %land.lhs.true, label %if.end.50

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.frame*, %struct.frame** %f, align 8
  %minibuffer_window = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 7
  %5 = load i64, i64* %minibuffer_window, align 8
  %6 = load i64, i64* @minibuf_window, align 8
  %cmp = icmp eq i64 %5, %6
  br i1 %cmp, label %if.then, label %if.end.50

if.then:                                          ; preds = %land.lhs.true
  store i64 2, i64* %window, align 8
  %7 = load i64, i64* %frame.addr, align 8
  %8 = load i64, i64* @selected_frame, align 8
  %cmp3 = icmp eq i64 %7, %8
  br i1 %cmp3, label %if.else, label %land.lhs.true.4

land.lhs.true.4:                                  ; preds = %if.then
  %9 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %9, 5
  %10 = inttoptr i64 %sub to i8*
  %11 = bitcast i8* %10 to %struct.frame*
  %minibuffer_window5 = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 7
  %12 = load i64, i64* %minibuffer_window5, align 8
  %call6 = call zeroext i1 @WINDOWP(i64 %12)
  br i1 %call6, label %land.lhs.true.7, label %if.else

land.lhs.true.7:                                  ; preds = %land.lhs.true.4
  %13 = load i64, i64* @selected_frame, align 8
  %sub8 = sub nsw i64 %13, 5
  %14 = inttoptr i64 %sub8 to i8*
  %15 = bitcast i8* %14 to %struct.frame*
  %minibuffer_window9 = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 7
  %16 = load i64, i64* %minibuffer_window9, align 8
  %call10 = call %struct.window* @XWINDOW(i64 %16)
  %frame11 = getelementptr inbounds %struct.window, %struct.window* %call10, i32 0, i32 1
  %17 = load i64, i64* %frame11, align 8
  %sub12 = sub nsw i64 %17, 5
  %18 = inttoptr i64 %sub12 to i8*
  %19 = bitcast i8* %18 to %struct.frame*
  %20 = load i64, i64* @selected_frame, align 8
  %sub13 = sub nsw i64 %20, 5
  %21 = inttoptr i64 %sub13 to i8*
  %22 = bitcast i8* %21 to %struct.frame*
  %cmp14 = icmp eq %struct.frame* %19, %22
  br i1 %cmp14, label %if.then.15, label %if.else

if.then.15:                                       ; preds = %land.lhs.true.7
  %23 = load i64, i64* @selected_frame, align 8
  %sub16 = sub nsw i64 %23, 5
  %24 = inttoptr i64 %sub16 to i8*
  %25 = bitcast i8* %24 to %struct.frame*
  %minibuffer_window17 = getelementptr inbounds %struct.frame, %struct.frame* %25, i32 0, i32 7
  %26 = load i64, i64* %minibuffer_window17, align 8
  store i64 %26, i64* %window, align 8
  br label %if.end.41

if.else:                                          ; preds = %land.lhs.true.7, %land.lhs.true.4, %if.then
  %27 = load i64, i64* @Vframe_list, align 8
  store i64 %27, i64* %frames, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %28 = load i64, i64* %frames, align 8
  %and = and i64 %28, 7
  %conv = trunc i64 %and to i32
  %cmp18 = icmp eq i32 %conv, 3
  br i1 %cmp18, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %29 = load i64, i64* %frames, align 8
  %sub20 = sub nsw i64 %29, 3
  %30 = inttoptr i64 %sub20 to i8*
  %31 = bitcast i8* %30 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %31, i32 0, i32 0
  %32 = load i64, i64* %car, align 8
  store i64 %32, i64* %this, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %33 = phi i1 [ false, %for.cond ], [ true, %land.rhs ]
  br i1 %33, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %34 = load i64, i64* %this, align 8
  %35 = load i64, i64* %frame.addr, align 8
  %cmp21 = icmp eq i64 %34, %35
  br i1 %cmp21, label %if.end, label %land.lhs.true.23

land.lhs.true.23:                                 ; preds = %for.body
  %36 = load i64, i64* %this, align 8
  %sub24 = sub nsw i64 %36, 5
  %37 = inttoptr i64 %sub24 to i8*
  %38 = bitcast i8* %37 to %struct.frame*
  %minibuffer_window25 = getelementptr inbounds %struct.frame, %struct.frame* %38, i32 0, i32 7
  %39 = load i64, i64* %minibuffer_window25, align 8
  %call26 = call zeroext i1 @WINDOWP(i64 %39)
  br i1 %call26, label %land.lhs.true.28, label %if.end

land.lhs.true.28:                                 ; preds = %land.lhs.true.23
  %40 = load i64, i64* %this, align 8
  %sub29 = sub nsw i64 %40, 5
  %41 = inttoptr i64 %sub29 to i8*
  %42 = bitcast i8* %41 to %struct.frame*
  %minibuffer_window30 = getelementptr inbounds %struct.frame, %struct.frame* %42, i32 0, i32 7
  %43 = load i64, i64* %minibuffer_window30, align 8
  %call31 = call %struct.window* @XWINDOW(i64 %43)
  %frame32 = getelementptr inbounds %struct.window, %struct.window* %call31, i32 0, i32 1
  %44 = load i64, i64* %frame32, align 8
  %sub33 = sub nsw i64 %44, 5
  %45 = inttoptr i64 %sub33 to i8*
  %46 = bitcast i8* %45 to %struct.frame*
  %47 = load i64, i64* %this, align 8
  %sub34 = sub nsw i64 %47, 5
  %48 = inttoptr i64 %sub34 to i8*
  %49 = bitcast i8* %48 to %struct.frame*
  %cmp35 = icmp eq %struct.frame* %46, %49
  br i1 %cmp35, label %if.then.37, label %if.end

if.then.37:                                       ; preds = %land.lhs.true.28
  %50 = load i64, i64* %this, align 8
  %sub38 = sub nsw i64 %50, 5
  %51 = inttoptr i64 %sub38 to i8*
  %52 = bitcast i8* %51 to %struct.frame*
  %minibuffer_window39 = getelementptr inbounds %struct.frame, %struct.frame* %52, i32 0, i32 7
  %53 = load i64, i64* %minibuffer_window39, align 8
  store i64 %53, i64* %window, align 8
  br label %for.end

if.end:                                           ; preds = %land.lhs.true.28, %land.lhs.true.23, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %54 = load i64, i64* %frames, align 8
  %sub40 = sub nsw i64 %54, 3
  %55 = inttoptr i64 %sub40 to i8*
  %56 = bitcast i8* %55 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %56, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %57 = load i64, i64* %cdr, align 8
  store i64 %57, i64* %frames, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.37, %land.end
  br label %if.end.41

if.end.41:                                        ; preds = %for.end, %if.then.15
  %58 = load i64, i64* %window, align 8
  %call42 = call zeroext i1 @WINDOWP(i64 %58)
  br i1 %call42, label %if.then.43, label %if.end.49

if.then.43:                                       ; preds = %if.end.41
  %59 = load i64, i64* %window, align 8
  %60 = load i64, i64* @minibuf_window, align 8
  %call44 = call %struct.window* @XWINDOW(i64 %60)
  %contents = getelementptr inbounds %struct.window, %struct.window* %call44, i32 0, i32 10
  %61 = load i64, i64* %contents, align 8
  call void @set_window_buffer(i64 %59, i64 %61, i1 zeroext false, i1 zeroext false)
  %62 = load i64, i64* %window, align 8
  store i64 %62, i64* @minibuf_window, align 8
  %63 = load i32, i32* %select.addr, align 4
  %tobool = icmp ne i32 %63, 0
  br i1 %tobool, label %if.then.45, label %if.end.48

if.then.45:                                       ; preds = %if.then.43
  %64 = load i64, i64* @minibuf_window, align 8
  %call46 = call i64 @builtin_lisp_symbol(i32 0)
  %call47 = call i64 @Fselect_window(i64 %64, i64 %call46)
  br label %if.end.48

if.end.48:                                        ; preds = %if.then.45, %if.then.43
  br label %if.end.49

if.end.49:                                        ; preds = %if.end.48, %if.end.41
  br label %if.end.50

if.end.50:                                        ; preds = %if.end.49, %land.lhs.true, %entry
  ret void
}

declare void @x_clear_frame_selections(%struct.frame*) #1

declare void @free_glyphs(%struct.frame*) #1

declare i64 @font_update_drivers(%struct.frame*, i64) #1

declare void @delete_all_child_windows(i64) #1

declare void @fset_menu_bar_vector(%struct.frame*, i64) #1

declare void @fset_buried_buffer_list(%struct.frame*, i64) #1

declare void @free_font_driver_list(%struct.frame*) #1

declare void @xfree(i8*) #1

declare i64 @Fdelete_terminal(i64, i64) #1

declare void @not_single_kboard_state(%struct.kboard*) #1

; Function Attrs: nounwind uwtable
define i64 @Fdelete_frame(i64 %frame, i64 %force) #0 {
entry:
  %frame.addr = alloca i64, align 8
  %force.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  store i64 %force, i64* %force.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %1 = load i64, i64* %force.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call
  br i1 %cmp, label %cond.false, label %cond.true

cond.true:                                        ; preds = %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call1, %cond.true ], [ %call2, %cond.false ]
  %call3 = call i64 @delete_frame(i64 %0, i64 %cond)
  ret i64 %call3
}

; Function Attrs: nounwind uwtable
define i64 @Fmouse_position() #0 {
entry:
  %f = alloca %struct.frame*, align 8
  %lispy_dummy = alloca i64, align 8
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %retval1 = alloca i64, align 8
  %party_dummy = alloca i32, align 4
  %time_dummy = alloca i64, align 8
  %col = alloca i32, align 4
  %row = alloca i32, align 4
  %0 = load i64, i64* @selected_frame, align 8
  %call = call zeroext i1 @FRAMEP(i64 %0)
  br i1 %call, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 61
  %4 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp = icmp ne %struct.terminal* %4, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %5 = load i64, i64* @selected_frame, align 8
  %sub2 = sub nsw i64 %5, 5
  %6 = inttoptr i64 %sub2 to i8*
  %7 = bitcast i8* %6 to %struct.frame*
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  call void @emacs_abort() #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %8, %cond.true
  %cond = phi %struct.frame* [ %7, %cond.true ], [ null, %8 ]
  store %struct.frame* %cond, %struct.frame** %f, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call3, i64* %y, align 8
  store i64 %call3, i64* %x, align 8
  %9 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal4 = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 61
  %10 = load %struct.terminal*, %struct.terminal** %terminal4, align 8
  %mouse_position_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %10, i32 0, i32 32
  %11 = load void (%struct.frame**, i32, i64*, i32*, i64*, i64*, i64*)*, void (%struct.frame**, i32, i64*, i32*, i64*, i64*, i64*)** %mouse_position_hook, align 8
  %tobool = icmp ne void (%struct.frame**, i32, i64*, i32*, i64*, i64*, i64*)* %11, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %12 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal5 = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 61
  %13 = load %struct.terminal*, %struct.terminal** %terminal5, align 8
  %mouse_position_hook6 = getelementptr inbounds %struct.terminal, %struct.terminal* %13, i32 0, i32 32
  %14 = load void (%struct.frame**, i32, i64*, i32*, i64*, i64*, i64*)*, void (%struct.frame**, i32, i64*, i32*, i64*, i64*, i64*)** %mouse_position_hook6, align 8
  call void %14(%struct.frame** %f, i32 -1, i64* %lispy_dummy, i32* %party_dummy, i64* %x, i64* %y, i64* %time_dummy)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  %15 = load i64, i64* %x, align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp8 = icmp eq i64 %15, %call7
  br i1 %cmp8, label %if.end.16, label %if.then.9

if.then.9:                                        ; preds = %if.end
  %16 = load i64, i64* %x, align 8
  %shr = ashr i64 %16, 2
  %conv = trunc i64 %shr to i32
  store i32 %conv, i32* %col, align 4
  %17 = load i64, i64* %y, align 8
  %shr10 = ashr i64 %17, 2
  %conv11 = trunc i64 %shr10 to i32
  store i32 %conv11, i32* %row, align 4
  %18 = load %struct.frame*, %struct.frame** %f, align 8
  %19 = load i32, i32* %col, align 4
  %20 = load i32, i32* %row, align 4
  call void @pixel_to_glyph_coords(%struct.frame* %18, i32 %19, i32 %20, i32* %col, i32* %row, %struct.XRectangle* null, i1 zeroext true)
  %21 = load i32, i32* %col, align 4
  %conv12 = sext i32 %21 to i64
  %shl = shl i64 %conv12, 2
  %add = add i64 %shl, 2
  store i64 %add, i64* %x, align 8
  %22 = load i32, i32* %row, align 4
  %conv13 = sext i32 %22 to i64
  %shl14 = shl i64 %conv13, 2
  %add15 = add i64 %shl14, 2
  store i64 %add15, i64* %y, align 8
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.9, %if.end
  %23 = load %struct.frame*, %struct.frame** %f, align 8
  %24 = bitcast %struct.frame* %23 to i8*
  %call17 = call i64 @make_lisp_ptr(i8* %24, i32 5)
  store i64 %call17, i64* %lispy_dummy, align 8
  %25 = load i64, i64* %lispy_dummy, align 8
  %26 = load i64, i64* %x, align 8
  %27 = load i64, i64* %y, align 8
  %call18 = call i64 @Fcons(i64 %26, i64 %27)
  %call19 = call i64 @Fcons(i64 %25, i64 %call18)
  store i64 %call19, i64* %retval1, align 8
  %28 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 204), align 8
  %call20 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp21 = icmp eq i64 %28, %call20
  br i1 %cmp21, label %if.end.25, label %if.then.23

if.then.23:                                       ; preds = %if.end.16
  %29 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 204), align 8
  %30 = load i64, i64* %retval1, align 8
  %call24 = call i64 @call1(i64 %29, i64 %30)
  store i64 %call24, i64* %retval1, align 8
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.23, %if.end.16
  %31 = load i64, i64* %retval1, align 8
  ret i64 %31
}

declare void @pixel_to_glyph_coords(%struct.frame*, i32, i32, i32*, i32*, %struct.XRectangle*, i1 zeroext) #1

; Function Attrs: nounwind uwtable
define i64 @Fmouse_pixel_position() #0 {
entry:
  %f = alloca %struct.frame*, align 8
  %lispy_dummy = alloca i64, align 8
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %retval1 = alloca i64, align 8
  %party_dummy = alloca i32, align 4
  %time_dummy = alloca i64, align 8
  %0 = load i64, i64* @selected_frame, align 8
  %call = call zeroext i1 @FRAMEP(i64 %0)
  br i1 %call, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 61
  %4 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp = icmp ne %struct.terminal* %4, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %5 = load i64, i64* @selected_frame, align 8
  %sub2 = sub nsw i64 %5, 5
  %6 = inttoptr i64 %sub2 to i8*
  %7 = bitcast i8* %6 to %struct.frame*
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  call void @emacs_abort() #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %8, %cond.true
  %cond = phi %struct.frame* [ %7, %cond.true ], [ null, %8 ]
  store %struct.frame* %cond, %struct.frame** %f, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call3, i64* %y, align 8
  store i64 %call3, i64* %x, align 8
  %9 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal4 = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 61
  %10 = load %struct.terminal*, %struct.terminal** %terminal4, align 8
  %mouse_position_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %10, i32 0, i32 32
  %11 = load void (%struct.frame**, i32, i64*, i32*, i64*, i64*, i64*)*, void (%struct.frame**, i32, i64*, i32*, i64*, i64*, i64*)** %mouse_position_hook, align 8
  %tobool = icmp ne void (%struct.frame**, i32, i64*, i32*, i64*, i64*, i64*)* %11, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %12 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal5 = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 61
  %13 = load %struct.terminal*, %struct.terminal** %terminal5, align 8
  %mouse_position_hook6 = getelementptr inbounds %struct.terminal, %struct.terminal* %13, i32 0, i32 32
  %14 = load void (%struct.frame**, i32, i64*, i32*, i64*, i64*, i64*)*, void (%struct.frame**, i32, i64*, i32*, i64*, i64*, i64*)** %mouse_position_hook6, align 8
  call void %14(%struct.frame** %f, i32 -1, i64* %lispy_dummy, i32* %party_dummy, i64* %x, i64* %y, i64* %time_dummy)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  %15 = load %struct.frame*, %struct.frame** %f, align 8
  %16 = bitcast %struct.frame* %15 to i8*
  %call7 = call i64 @make_lisp_ptr(i8* %16, i32 5)
  store i64 %call7, i64* %lispy_dummy, align 8
  %17 = load i64, i64* %lispy_dummy, align 8
  %18 = load i64, i64* %x, align 8
  %19 = load i64, i64* %y, align 8
  %call8 = call i64 @Fcons(i64 %18, i64 %19)
  %call9 = call i64 @Fcons(i64 %17, i64 %call8)
  store i64 %call9, i64* %retval1, align 8
  %20 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 204), align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp11 = icmp eq i64 %20, %call10
  br i1 %cmp11, label %if.end.14, label %if.then.12

if.then.12:                                       ; preds = %if.end
  %21 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 204), align 8
  %22 = load i64, i64* %retval1, align 8
  %call13 = call i64 @call1(i64 %21, i64 %22)
  store i64 %call13, i64* %retval1, align 8
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.12, %if.end
  %23 = load i64, i64* %retval1, align 8
  ret i64 %23
}

; Function Attrs: nounwind uwtable
define i64 @Fset_mouse_position(i64 %frame, i64 %x, i64 %y) #0 {
entry:
  %frame.addr = alloca i64, align 8
  %x.addr = alloca i64, align 8
  %y.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  store i64 %x, i64* %x.addr, align 8
  store i64 %y, i64* %y.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call zeroext i1 @FRAMEP(i64 %0)
  br i1 %call, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %frame.addr, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 61
  %4 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp = icmp ne %struct.terminal* %4, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 458)
  %5 = load i64, i64* %frame.addr, align 8
  %6 = call i64 @wrong_type_argument(i64 %call1, i64 %5) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %7, %cond.true
  br label %do.body

do.body:                                          ; preds = %cond.end
  br label %do.body.2

do.body.2:                                        ; preds = %do.body
  %8 = load i64, i64* %x.addr, align 8
  %and = and i64 %8, 7
  %conv = trunc i64 %and to i32
  %and3 = and i32 %conv, -5
  %cmp4 = icmp eq i32 %and3, 2
  br i1 %cmp4, label %cond.true.6, label %cond.false.7

cond.true.6:                                      ; preds = %do.body.2
  br label %cond.end.9

cond.false.7:                                     ; preds = %do.body.2
  %call8 = call i64 @builtin_lisp_symbol(i32 559)
  %9 = load i64, i64* %x.addr, align 8
  %10 = call i64 @wrong_type_argument(i64 %call8, i64 %9) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.9

cond.end.9:                                       ; preds = %11, %cond.true.6
  %12 = load i64, i64* %x.addr, align 8
  %shr = ashr i64 %12, 2
  %cmp10 = icmp sle i64 -2147483648, %shr
  br i1 %cmp10, label %land.lhs.true.12, label %if.then

land.lhs.true.12:                                 ; preds = %cond.end.9
  %13 = load i64, i64* %x.addr, align 8
  %shr13 = ashr i64 %13, 2
  %cmp14 = icmp sle i64 %shr13, 2147483647
  br i1 %cmp14, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true.12, %cond.end.9
  %14 = load i64, i64* %x.addr, align 8
  call void @args_out_of_range_3(i64 %14, i64 -8589934590, i64 8589934590) #7
  unreachable

if.end:                                           ; preds = %land.lhs.true.12
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %do.end.16

do.end.16:                                        ; preds = %do.end
  br label %do.body.17

do.body.17:                                       ; preds = %do.end.16
  br label %do.body.18

do.body.18:                                       ; preds = %do.body.17
  %15 = load i64, i64* %y.addr, align 8
  %and19 = and i64 %15, 7
  %conv20 = trunc i64 %and19 to i32
  %and21 = and i32 %conv20, -5
  %cmp22 = icmp eq i32 %and21, 2
  br i1 %cmp22, label %cond.true.24, label %cond.false.25

cond.true.24:                                     ; preds = %do.body.18
  br label %cond.end.27

cond.false.25:                                    ; preds = %do.body.18
  %call26 = call i64 @builtin_lisp_symbol(i32 559)
  %16 = load i64, i64* %y.addr, align 8
  %17 = call i64 @wrong_type_argument(i64 %call26, i64 %16) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.27

cond.end.27:                                      ; preds = %18, %cond.true.24
  %19 = load i64, i64* %y.addr, align 8
  %shr28 = ashr i64 %19, 2
  %cmp29 = icmp sle i64 -2147483648, %shr28
  br i1 %cmp29, label %land.lhs.true.31, label %if.then.35

land.lhs.true.31:                                 ; preds = %cond.end.27
  %20 = load i64, i64* %y.addr, align 8
  %shr32 = ashr i64 %20, 2
  %cmp33 = icmp sle i64 %shr32, 2147483647
  br i1 %cmp33, label %if.end.36, label %if.then.35

if.then.35:                                       ; preds = %land.lhs.true.31, %cond.end.27
  %21 = load i64, i64* %y.addr, align 8
  call void @args_out_of_range_3(i64 %21, i64 -8589934590, i64 8589934590) #7
  unreachable

if.end.36:                                        ; preds = %land.lhs.true.31
  br label %do.end.37

do.end.37:                                        ; preds = %if.end.36
  br label %do.end.38

do.end.38:                                        ; preds = %do.end.37
  %22 = load i64, i64* %frame.addr, align 8
  %sub39 = sub nsw i64 %22, 5
  %23 = inttoptr i64 %sub39 to i8*
  %24 = bitcast i8* %23 to %struct.frame*
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 26
  %25 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %25, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp40 = icmp eq i32 %bf.cast, 2
  br i1 %cmp40, label %if.then.42, label %if.end.48

if.then.42:                                       ; preds = %do.end.38
  %26 = load i64, i64* %frame.addr, align 8
  %sub43 = sub nsw i64 %26, 5
  %27 = inttoptr i64 %sub43 to i8*
  %28 = bitcast i8* %27 to %struct.frame*
  %29 = load i64, i64* %x.addr, align 8
  %shr44 = ashr i64 %29, 2
  %conv45 = trunc i64 %shr44 to i32
  %30 = load i64, i64* %y.addr, align 8
  %shr46 = ashr i64 %30, 2
  %conv47 = trunc i64 %shr46 to i32
  call void @frame_set_mouse_position(%struct.frame* %28, i32 %conv45, i32 %conv47)
  br label %if.end.48

if.end.48:                                        ; preds = %if.then.42, %do.end.38
  %call49 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call49
}

; Function Attrs: noreturn
declare void @args_out_of_range_3(i64, i64, i64) #2

; Function Attrs: nounwind uwtable
define internal void @frame_set_mouse_position(%struct.frame* %f, i32 %x, i32 %y) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %pix_x = alloca i32, align 4
  %pix_y = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1 = load i32, i32* %x.addr, align 4
  %2 = load i32, i32* %y.addr, align 4
  call void @frame_char_to_pixel_position(%struct.frame* %0, i32 %1, i32 %2, i32* %pix_x, i32* %pix_y)
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %4 = load i32, i32* %pix_x, align 4
  %5 = load i32, i32* %pix_y, align 4
  call void @frame_set_mouse_pixel_position(%struct.frame* %3, i32 %4, i32 %5)
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @Fset_mouse_pixel_position(i64 %frame, i64 %x, i64 %y) #0 {
entry:
  %frame.addr = alloca i64, align 8
  %x.addr = alloca i64, align 8
  %y.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  store i64 %x, i64* %x.addr, align 8
  store i64 %y, i64* %y.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call zeroext i1 @FRAMEP(i64 %0)
  br i1 %call, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %frame.addr, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 61
  %4 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp = icmp ne %struct.terminal* %4, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 458)
  %5 = load i64, i64* %frame.addr, align 8
  %6 = call i64 @wrong_type_argument(i64 %call1, i64 %5) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %7, %cond.true
  br label %do.body

do.body:                                          ; preds = %cond.end
  br label %do.body.2

do.body.2:                                        ; preds = %do.body
  %8 = load i64, i64* %x.addr, align 8
  %and = and i64 %8, 7
  %conv = trunc i64 %and to i32
  %and3 = and i32 %conv, -5
  %cmp4 = icmp eq i32 %and3, 2
  br i1 %cmp4, label %cond.true.6, label %cond.false.7

cond.true.6:                                      ; preds = %do.body.2
  br label %cond.end.9

cond.false.7:                                     ; preds = %do.body.2
  %call8 = call i64 @builtin_lisp_symbol(i32 559)
  %9 = load i64, i64* %x.addr, align 8
  %10 = call i64 @wrong_type_argument(i64 %call8, i64 %9) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.9

cond.end.9:                                       ; preds = %11, %cond.true.6
  %12 = load i64, i64* %x.addr, align 8
  %shr = ashr i64 %12, 2
  %cmp10 = icmp sle i64 -2147483648, %shr
  br i1 %cmp10, label %land.lhs.true.12, label %if.then

land.lhs.true.12:                                 ; preds = %cond.end.9
  %13 = load i64, i64* %x.addr, align 8
  %shr13 = ashr i64 %13, 2
  %cmp14 = icmp sle i64 %shr13, 2147483647
  br i1 %cmp14, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true.12, %cond.end.9
  %14 = load i64, i64* %x.addr, align 8
  call void @args_out_of_range_3(i64 %14, i64 -8589934590, i64 8589934590) #7
  unreachable

if.end:                                           ; preds = %land.lhs.true.12
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %do.end.16

do.end.16:                                        ; preds = %do.end
  br label %do.body.17

do.body.17:                                       ; preds = %do.end.16
  br label %do.body.18

do.body.18:                                       ; preds = %do.body.17
  %15 = load i64, i64* %y.addr, align 8
  %and19 = and i64 %15, 7
  %conv20 = trunc i64 %and19 to i32
  %and21 = and i32 %conv20, -5
  %cmp22 = icmp eq i32 %and21, 2
  br i1 %cmp22, label %cond.true.24, label %cond.false.25

cond.true.24:                                     ; preds = %do.body.18
  br label %cond.end.27

cond.false.25:                                    ; preds = %do.body.18
  %call26 = call i64 @builtin_lisp_symbol(i32 559)
  %16 = load i64, i64* %y.addr, align 8
  %17 = call i64 @wrong_type_argument(i64 %call26, i64 %16) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.27

cond.end.27:                                      ; preds = %18, %cond.true.24
  %19 = load i64, i64* %y.addr, align 8
  %shr28 = ashr i64 %19, 2
  %cmp29 = icmp sle i64 -2147483648, %shr28
  br i1 %cmp29, label %land.lhs.true.31, label %if.then.35

land.lhs.true.31:                                 ; preds = %cond.end.27
  %20 = load i64, i64* %y.addr, align 8
  %shr32 = ashr i64 %20, 2
  %cmp33 = icmp sle i64 %shr32, 2147483647
  br i1 %cmp33, label %if.end.36, label %if.then.35

if.then.35:                                       ; preds = %land.lhs.true.31, %cond.end.27
  %21 = load i64, i64* %y.addr, align 8
  call void @args_out_of_range_3(i64 %21, i64 -8589934590, i64 8589934590) #7
  unreachable

if.end.36:                                        ; preds = %land.lhs.true.31
  br label %do.end.37

do.end.37:                                        ; preds = %if.end.36
  br label %do.end.38

do.end.38:                                        ; preds = %do.end.37
  %22 = load i64, i64* %frame.addr, align 8
  %sub39 = sub nsw i64 %22, 5
  %23 = inttoptr i64 %sub39 to i8*
  %24 = bitcast i8* %23 to %struct.frame*
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 26
  %25 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %25, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp40 = icmp eq i32 %bf.cast, 2
  br i1 %cmp40, label %if.then.42, label %if.end.48

if.then.42:                                       ; preds = %do.end.38
  %26 = load i64, i64* %frame.addr, align 8
  %sub43 = sub nsw i64 %26, 5
  %27 = inttoptr i64 %sub43 to i8*
  %28 = bitcast i8* %27 to %struct.frame*
  %29 = load i64, i64* %x.addr, align 8
  %shr44 = ashr i64 %29, 2
  %conv45 = trunc i64 %shr44 to i32
  %30 = load i64, i64* %y.addr, align 8
  %shr46 = ashr i64 %30, 2
  %conv47 = trunc i64 %shr46 to i32
  call void @frame_set_mouse_pixel_position(%struct.frame* %28, i32 %conv45, i32 %conv47)
  br label %if.end.48

if.end.48:                                        ; preds = %if.then.42, %do.end.38
  %call49 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call49
}

declare void @frame_set_mouse_pixel_position(%struct.frame*, i32, i32) #1

; Function Attrs: nounwind uwtable
define i64 @Fmake_frame_visible(i64 %frame) #0 {
entry:
  %frame.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_live_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  %1 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 26
  %2 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %2, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.frame*, %struct.frame** %f, align 8
  call void @x_make_frame_visible(%struct.frame* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.frame*, %struct.frame** %f, align 8
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 5
  %5 = load i64, i64* %root_window, align 8
  call void @make_frame_visible_1(i64 %5)
  %6 = load %struct.frame*, %struct.frame** %f, align 8
  %7 = bitcast %struct.frame* %6 to i8*
  %call1 = call i64 @make_lisp_ptr(i8* %7, i32 5)
  store i64 %call1, i64* %frame.addr, align 8
  %8 = load i64, i64* %frame.addr, align 8
  ret i64 %8
}

declare void @x_make_frame_visible(%struct.frame*) #1

; Function Attrs: nounwind uwtable
define internal void @make_frame_visible_1(i64 %window) #0 {
entry:
  %window.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  store i64 %window, i64* %window.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %window.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  %lnot = xor i1 %cmp, true
  br i1 %lnot, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i64, i64* %window.addr, align 8
  %call1 = call %struct.window* @XWINDOW(i64 %1)
  store %struct.window* %call1, %struct.window** %w, align 8
  %2 = load %struct.window*, %struct.window** %w, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %2, i32 0, i32 10
  %3 = load i64, i64* %contents, align 8
  %call2 = call zeroext i1 @WINDOWP(i64 %3)
  br i1 %call2, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %4 = load %struct.window*, %struct.window** %w, align 8
  %contents3 = getelementptr inbounds %struct.window, %struct.window* %4, i32 0, i32 10
  %5 = load i64, i64* %contents3, align 8
  call void @make_frame_visible_1(i64 %5)
  br label %if.end

if.else:                                          ; preds = %for.body
  %6 = load %struct.window*, %struct.window** %w, align 8
  %contents4 = getelementptr inbounds %struct.window, %struct.window* %6, i32 0, i32 10
  %7 = load i64, i64* %contents4, align 8
  %call5 = call %struct.buffer* @XBUFFER(i64 %7)
  %call6 = call i64 @Fcurrent_time()
  call void @bset_display_time(%struct.buffer* %call5, i64 %call6)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load %struct.window*, %struct.window** %w, align 8
  %next = getelementptr inbounds %struct.window, %struct.window* %8, i32 0, i32 2
  %9 = load i64, i64* %next, align 8
  store i64 %9, i64* %window.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @Fmake_frame_invisible(i64 %frame, i64 %force) #0 {
entry:
  %frame.addr = alloca i64, align 8
  %force.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  store i64 %frame, i64* %frame.addr, align 8
  store i64 %force, i64* %force.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_live_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  %1 = load i64, i64* %force.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f, align 8
  %call2 = call i32 @other_visible_frames(%struct.frame* %2)
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  call void (i8*, ...) @error(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.9, i32 0, i32 0)) #7
  unreachable

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i64, i64* %frame.addr, align 8
  %4 = load i64, i64* @minibuf_window, align 8
  %5 = load i64, i64* @selected_window, align 8
  %cmp3 = icmp eq i64 %4, %5
  %conv = zext i1 %cmp3 to i32
  call void @check_minibuf_window(i64 %3, i32 %conv)
  %6 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 26
  %7 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %7, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp4 = icmp eq i32 %bf.cast, 2
  br i1 %cmp4, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end
  %8 = load %struct.frame*, %struct.frame** %f, align 8
  call void @x_make_frame_invisible(%struct.frame* %8)
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.6, %if.end
  store i32 16, i32* @windows_or_buffers_changed, align 4
  %call8 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call8
}

declare void @x_make_frame_invisible(%struct.frame*) #1

; Function Attrs: nounwind uwtable
define i64 @Ficonify_frame(i64 %frame) #0 {
entry:
  %frame.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_live_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  %1 = load i64, i64* %frame.addr, align 8
  %2 = load i64, i64* @minibuf_window, align 8
  %3 = load i64, i64* @selected_window, align 8
  %cmp = icmp eq i64 %2, %3
  %conv = zext i1 %cmp to i32
  call void @check_minibuf_window(i64 %1, i32 %conv)
  %4 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 26
  %5 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %5, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp1 = icmp eq i32 %bf.cast, 2
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.frame*, %struct.frame** %f, align 8
  call void @x_iconify_frame(%struct.frame* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 17, i32* @windows_or_buffers_changed, align 4
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call3
}

declare void @x_iconify_frame(%struct.frame*) #1

; Function Attrs: nounwind uwtable
define i64 @Fframe_visible_p(i64 %frame) #0 {
entry:
  %retval = alloca i64, align 8
  %frame.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call zeroext i1 @FRAMEP(i64 %0)
  br i1 %call, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %frame.addr, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 61
  %4 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp = icmp ne %struct.terminal* %4, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 458)
  %5 = load i64, i64* %frame.addr, align 8
  %6 = call i64 @wrong_type_argument(i64 %call1, i64 %5) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %7, %cond.true
  %8 = load i64, i64* %frame.addr, align 8
  %sub2 = sub nsw i64 %8, 5
  %9 = inttoptr i64 %sub2 to i8*
  %10 = bitcast i8* %9 to %struct.frame*
  %visible = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 26
  %11 = bitcast i48* %visible to i64*
  %bf.load = load i64, i64* %11, align 8
  %bf.lshr = lshr i64 %bf.load, 10
  %bf.clear = and i64 %bf.lshr, 3
  %bf.cast = trunc i64 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %call3 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call3, i64* %retval
  br label %return

if.end:                                           ; preds = %cond.end
  %12 = load i64, i64* %frame.addr, align 8
  %sub4 = sub nsw i64 %12, 5
  %13 = inttoptr i64 %sub4 to i8*
  %14 = bitcast i8* %13 to %struct.frame*
  %iconified = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 26
  %15 = bitcast i48* %iconified to i64*
  %bf.load5 = load i64, i64* %15, align 8
  %bf.lshr6 = lshr i64 %bf.load5, 12
  %bf.clear7 = and i64 %bf.lshr6, 1
  %bf.cast8 = trunc i64 %bf.clear7 to i1
  br i1 %bf.cast8, label %if.then.9, label %if.end.11

if.then.9:                                        ; preds = %if.end
  %call10 = call i64 @builtin_lisp_symbol(i32 528)
  store i64 %call10, i64* %retval
  br label %return

if.end.11:                                        ; preds = %if.end
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call12, i64* %retval
  br label %return

return:                                           ; preds = %if.end.11, %if.then.9, %if.then
  %16 = load i64, i64* %retval
  ret i64 %16
}

; Function Attrs: nounwind uwtable
define i64 @Fvisible_frame_list() #0 {
entry:
  %tail = alloca i64, align 8
  %frame = alloca i64, align 8
  %value = alloca i64, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %value, align 8
  %0 = load i64, i64* @Vframe_list, align 8
  store i64 %0, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %tail, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %2 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %2, 3
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %4, i32 0, i32 0
  %5 = load i64, i64* %car, align 8
  store i64 %5, i64* %frame, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %6 = phi i1 [ false, %for.cond ], [ true, %land.rhs ]
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %7 = load i64, i64* %frame, align 8
  %sub2 = sub nsw i64 %7, 5
  %8 = inttoptr i64 %sub2 to i8*
  %9 = bitcast i8* %8 to %struct.frame*
  %visible = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 26
  %10 = bitcast i48* %visible to i64*
  %bf.load = load i64, i64* %10, align 8
  %bf.lshr = lshr i64 %bf.load, 10
  %bf.clear = and i64 %bf.lshr, 3
  %bf.cast = trunc i64 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %11 = load i64, i64* %frame, align 8
  %12 = load i64, i64* %value, align 8
  %call3 = call i64 @Fcons(i64 %11, i64 %12)
  store i64 %call3, i64* %value, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %13 = load i64, i64* %tail, align 8
  %sub4 = sub nsw i64 %13, 3
  %14 = inttoptr i64 %sub4 to i8*
  %15 = bitcast i8* %14 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %15, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %16 = load i64, i64* %cdr, align 8
  store i64 %16, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %17 = load i64, i64* %value, align 8
  ret i64 %17
}

; Function Attrs: nounwind uwtable
define i64 @Fraise_frame(i64 %frame) #0 {
entry:
  %frame.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_live_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  %1 = load %struct.frame*, %struct.frame** %f, align 8
  %2 = bitcast %struct.frame* %1 to i8*
  %call1 = call i64 @make_lisp_ptr(i8* %2, i32 5)
  store i64 %call1, i64* %frame.addr, align 8
  %3 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 26
  %4 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %4, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %5 = load i64, i64* %frame.addr, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %call3 = call i64 @Fselect_frame(i64 %5, i64 %call2)
  br label %if.end

if.else:                                          ; preds = %entry
  %6 = load i64, i64* %frame.addr, align 8
  %call4 = call i64 @Fmake_frame_visible(i64 %6)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %7 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 61
  %8 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %frame_raise_lower_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %8, i32 0, i32 34
  %9 = load void (%struct.frame*, i1)*, void (%struct.frame*, i1)** %frame_raise_lower_hook, align 8
  %tobool = icmp ne void (%struct.frame*, i1)* %9, null
  br i1 %tobool, label %if.then.5, label %if.end.8

if.then.5:                                        ; preds = %if.end
  %10 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal6 = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 61
  %11 = load %struct.terminal*, %struct.terminal** %terminal6, align 8
  %frame_raise_lower_hook7 = getelementptr inbounds %struct.terminal, %struct.terminal* %11, i32 0, i32 34
  %12 = load void (%struct.frame*, i1)*, void (%struct.frame*, i1)** %frame_raise_lower_hook7, align 8
  %13 = load %struct.frame*, %struct.frame** %f, align 8
  call void %12(%struct.frame* %13, i1 zeroext true)
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.5, %if.end
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call9
}

; Function Attrs: nounwind uwtable
define i64 @Flower_frame(i64 %frame) #0 {
entry:
  %frame.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_live_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  %1 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 61
  %2 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %frame_raise_lower_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %2, i32 0, i32 34
  %3 = load void (%struct.frame*, i1)*, void (%struct.frame*, i1)** %frame_raise_lower_hook, align 8
  %tobool = icmp ne void (%struct.frame*, i1)* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal1 = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 61
  %5 = load %struct.terminal*, %struct.terminal** %terminal1, align 8
  %frame_raise_lower_hook2 = getelementptr inbounds %struct.terminal, %struct.terminal* %5, i32 0, i32 34
  %6 = load void (%struct.frame*, i1)*, void (%struct.frame*, i1)** %frame_raise_lower_hook2, align 8
  %7 = load %struct.frame*, %struct.frame** %f, align 8
  call void %6(%struct.frame* %7, i1 zeroext false)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call3
}

declare void @fset_focus_frame(%struct.frame*, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fframe_focus(i64 %frame) #0 {
entry:
  %frame.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_live_frame(i64 %0)
  %focus_frame = getelementptr inbounds %struct.frame, %struct.frame* %call, i32 0, i32 4
  %1 = load i64, i64* %focus_frame, align 8
  ret i64 %1
}

; Function Attrs: nounwind uwtable
define i64 @Fx_focus_frame(i64 %frame) #0 {
entry:
  %frame.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_window_system_frame(i64 %0)
  call void @x_focus_frame(%struct.frame* %call)
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call1
}

declare void @x_focus_frame(%struct.frame*) #1

; Function Attrs: nounwind uwtable
define i64 @Fframe_after_make_frame(i64 %frame, i64 %made) #0 {
entry:
  %frame.addr = alloca i64, align 8
  %made.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  store i64 %frame, i64* %frame.addr, align 8
  store i64 %made, i64* %made.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_live_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  %1 = load i64, i64* %made.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call1
  %lnot = xor i1 %cmp, true
  %2 = load %struct.frame*, %struct.frame** %f, align 8
  %after_make_frame = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 26
  %3 = bitcast i48* %after_make_frame to i64*
  %4 = zext i1 %lnot to i64
  %bf.load = load i64, i64* %3, align 8
  %bf.shl = shl i64 %4, 35
  %bf.clear = and i64 %bf.load, -34359738369
  %bf.set = or i64 %bf.clear, %bf.shl
  store i64 %bf.set, i64* %3, align 8
  %bf.result.cast = trunc i64 %4 to i8
  %tobool = trunc i8 %bf.result.cast to i1
  %5 = load %struct.frame*, %struct.frame** %f, align 8
  %inhibit_horizontal_resize = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 26
  %6 = bitcast i48* %inhibit_horizontal_resize to i64*
  %bf.load2 = load i64, i64* %6, align 8
  %bf.clear3 = and i64 %bf.load2, -274877906945
  store i64 %bf.clear3, i64* %6, align 8
  %7 = load %struct.frame*, %struct.frame** %f, align 8
  %inhibit_vertical_resize = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 26
  %8 = bitcast i48* %inhibit_vertical_resize to i64*
  %bf.load4 = load i64, i64* %8, align 8
  %bf.clear5 = and i64 %bf.load4, -549755813889
  store i64 %bf.clear5, i64* %8, align 8
  %9 = load i64, i64* %made.addr, align 8
  ret i64 %9
}

; Function Attrs: nounwind uwtable
define void @frames_discard_buffer(i64 %buffer) #0 {
entry:
  %buffer.addr = alloca i64, align 8
  %frame = alloca i64, align 8
  %tail = alloca i64, align 8
  store i64 %buffer, i64* %buffer.addr, align 8
  %0 = load i64, i64* @Vframe_list, align 8
  store i64 %0, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %tail, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %2 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %2, 3
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %4, i32 0, i32 0
  %5 = load i64, i64* %car, align 8
  store i64 %5, i64* %frame, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %6 = phi i1 [ false, %for.cond ], [ true, %land.rhs ]
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %7 = load i64, i64* %frame, align 8
  %sub2 = sub nsw i64 %7, 5
  %8 = inttoptr i64 %sub2 to i8*
  %9 = bitcast i8* %8 to %struct.frame*
  %10 = load i64, i64* %buffer.addr, align 8
  %11 = load i64, i64* %frame, align 8
  %sub3 = sub nsw i64 %11, 5
  %12 = inttoptr i64 %sub3 to i8*
  %13 = bitcast i8* %12 to %struct.frame*
  %buffer_list = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 15
  %14 = load i64, i64* %buffer_list, align 8
  %call = call i64 @Fdelq(i64 %10, i64 %14)
  call void @fset_buffer_list(%struct.frame* %9, i64 %call)
  %15 = load i64, i64* %frame, align 8
  %sub4 = sub nsw i64 %15, 5
  %16 = inttoptr i64 %sub4 to i8*
  %17 = bitcast i8* %16 to %struct.frame*
  %18 = load i64, i64* %buffer.addr, align 8
  %19 = load i64, i64* %frame, align 8
  %sub5 = sub nsw i64 %19, 5
  %20 = inttoptr i64 %sub5 to i8*
  %21 = bitcast i8* %20 to %struct.frame*
  %buried_buffer_list = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 16
  %22 = load i64, i64* %buried_buffer_list, align 8
  %call6 = call i64 @Fdelq(i64 %18, i64 %22)
  call void @fset_buried_buffer_list(%struct.frame* %17, i64 %call6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %23 = load i64, i64* %tail, align 8
  %sub7 = sub nsw i64 %23, 3
  %24 = inttoptr i64 %sub7 to i8*
  %25 = bitcast i8* %24 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %25, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %26 = load i64, i64* %cdr, align 8
  store i64 %26, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

declare i64 @Fsetcdr(i64, i64) #1

; Function Attrs: nounwind uwtable
define void @store_frame_param(%struct.frame* %f, i64 %prop, i64 %val) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %prop.addr = alloca i64, align 8
  %val.addr = alloca i64, align 8
  %old_alist_elt = alloca i64, align 8
  %list = alloca i64, align 8
  %list19 = alloca i64, align 8
  %sym = alloca %struct.Lisp_Symbol*, align 8
  %blv = alloca %struct.Lisp_Buffer_Local_Value*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %prop, i64* %prop.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %prop.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 222)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.end.14

if.then:                                          ; preds = %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call1, i64* %list, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i64, i64* %val.addr, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %cmp2 = icmp eq i32 %conv, 3
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %val.addr, align 8
  %sub = sub nsw i64 %2, 3
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %4, i32 0, i32 0
  %5 = load i64, i64* %car, align 8
  %call4 = call i64 @Fbuffer_live_p(i64 %5)
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp6 = icmp eq i64 %call4, %call5
  br i1 %cmp6, label %if.end, label %if.then.8

if.then.8:                                        ; preds = %for.body
  %6 = load i64, i64* %val.addr, align 8
  %sub9 = sub nsw i64 %6, 3
  %7 = inttoptr i64 %sub9 to i8*
  %8 = bitcast i8* %7 to %struct.Lisp_Cons*
  %car10 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %8, i32 0, i32 0
  %9 = load i64, i64* %car10, align 8
  %10 = load i64, i64* %list, align 8
  %call11 = call i64 @Fcons(i64 %9, i64 %10)
  store i64 %call11, i64* %list, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.8, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load i64, i64* %val.addr, align 8
  %sub12 = sub nsw i64 %11, 3
  %12 = inttoptr i64 %sub12 to i8*
  %13 = bitcast i8* %12 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %13, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %14 = load i64, i64* %cdr, align 8
  store i64 %14, i64* %val.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %16 = load i64, i64* %list, align 8
  %call13 = call i64 @Fnreverse(i64 %16)
  call void @fset_buffer_list(%struct.frame* %15, i64 %call13)
  br label %if.end.188

if.end.14:                                        ; preds = %entry
  %17 = load i64, i64* %prop.addr, align 8
  %call15 = call i64 @builtin_lisp_symbol(i32 231)
  %cmp16 = icmp eq i64 %17, %call15
  br i1 %cmp16, label %if.then.18, label %if.end.44

if.then.18:                                       ; preds = %if.end.14
  %call20 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call20, i64* %list19, align 8
  br label %for.cond.21

for.cond.21:                                      ; preds = %for.inc.38, %if.then.18
  %18 = load i64, i64* %val.addr, align 8
  %and22 = and i64 %18, 7
  %conv23 = trunc i64 %and22 to i32
  %cmp24 = icmp eq i32 %conv23, 3
  br i1 %cmp24, label %for.body.26, label %for.end.42

for.body.26:                                      ; preds = %for.cond.21
  %19 = load i64, i64* %val.addr, align 8
  %sub27 = sub nsw i64 %19, 3
  %20 = inttoptr i64 %sub27 to i8*
  %21 = bitcast i8* %20 to %struct.Lisp_Cons*
  %car28 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %21, i32 0, i32 0
  %22 = load i64, i64* %car28, align 8
  %call29 = call i64 @Fbuffer_live_p(i64 %22)
  %call30 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp31 = icmp eq i64 %call29, %call30
  br i1 %cmp31, label %if.end.37, label %if.then.33

if.then.33:                                       ; preds = %for.body.26
  %23 = load i64, i64* %val.addr, align 8
  %sub34 = sub nsw i64 %23, 3
  %24 = inttoptr i64 %sub34 to i8*
  %25 = bitcast i8* %24 to %struct.Lisp_Cons*
  %car35 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %25, i32 0, i32 0
  %26 = load i64, i64* %car35, align 8
  %27 = load i64, i64* %list19, align 8
  %call36 = call i64 @Fcons(i64 %26, i64 %27)
  store i64 %call36, i64* %list19, align 8
  br label %if.end.37

if.end.37:                                        ; preds = %if.then.33, %for.body.26
  br label %for.inc.38

for.inc.38:                                       ; preds = %if.end.37
  %28 = load i64, i64* %val.addr, align 8
  %sub39 = sub nsw i64 %28, 3
  %29 = inttoptr i64 %sub39 to i8*
  %30 = bitcast i8* %29 to %struct.Lisp_Cons*
  %u40 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %30, i32 0, i32 1
  %cdr41 = bitcast %union.anon.11* %u40 to i64*
  %31 = load i64, i64* %cdr41, align 8
  store i64 %31, i64* %val.addr, align 8
  br label %for.cond.21

for.end.42:                                       ; preds = %for.cond.21
  %32 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %33 = load i64, i64* %list19, align 8
  %call43 = call i64 @Fnreverse(i64 %33)
  call void @fset_buried_buffer_list(%struct.frame* %32, i64 %call43)
  br label %if.end.188

if.end.44:                                        ; preds = %if.end.14
  %34 = load i64, i64* %prop.addr, align 8
  %and45 = and i64 %34, 7
  %conv46 = trunc i64 %and45 to i32
  %cmp47 = icmp eq i32 %conv46, 0
  br i1 %cmp47, label %if.then.49, label %if.end.68

if.then.49:                                       ; preds = %if.end.44
  %35 = load i64, i64* %prop.addr, align 8
  %sub50 = sub nsw i64 %35, 0
  %add.ptr = getelementptr inbounds i8, i8* bitcast ([1074 x %struct.Lisp_Symbol]* @lispsym to i8*), i64 %sub50
  %36 = bitcast i8* %add.ptr to %struct.Lisp_Symbol*
  store %struct.Lisp_Symbol* %36, %struct.Lisp_Symbol** %sym, align 8
  br label %start

start:                                            ; preds = %sw.bb, %if.then.49
  %37 = load %struct.Lisp_Symbol*, %struct.Lisp_Symbol** %sym, align 8
  %38 = bitcast %struct.Lisp_Symbol* %37 to i16*
  %bf.load = load i16, i16* %38, align 8
  %bf.lshr = lshr i16 %bf.load, 1
  %bf.clear = and i16 %bf.lshr, 7
  %bf.cast = zext i16 %bf.clear to i32
  switch i32 %bf.cast, label %sw.default [
    i32 1, label %sw.bb
    i32 4, label %sw.bb.52
    i32 3, label %sw.bb.52
    i32 2, label %sw.bb.53
  ]

sw.bb:                                            ; preds = %start
  %39 = load %struct.Lisp_Symbol*, %struct.Lisp_Symbol** %sym, align 8
  %call51 = call %struct.Lisp_Symbol* @indirect_variable(%struct.Lisp_Symbol* %39)
  store %struct.Lisp_Symbol* %call51, %struct.Lisp_Symbol** %sym, align 8
  br label %start

sw.bb.52:                                         ; preds = %start, %start
  br label %sw.epilog

sw.bb.53:                                         ; preds = %start
  %40 = load %struct.Lisp_Symbol*, %struct.Lisp_Symbol** %sym, align 8
  %val54 = getelementptr inbounds %struct.Lisp_Symbol, %struct.Lisp_Symbol* %40, i32 0, i32 2
  %blv55 = bitcast %union.anon.12* %val54 to %struct.Lisp_Buffer_Local_Value**
  %41 = load %struct.Lisp_Buffer_Local_Value*, %struct.Lisp_Buffer_Local_Value** %blv55, align 8
  store %struct.Lisp_Buffer_Local_Value* %41, %struct.Lisp_Buffer_Local_Value** %blv, align 8
  %42 = load %struct.Lisp_Buffer_Local_Value*, %struct.Lisp_Buffer_Local_Value** %blv, align 8
  %43 = bitcast %struct.Lisp_Buffer_Local_Value* %42 to i8*
  %bf.load56 = load i8, i8* %43, align 8
  %bf.lshr57 = lshr i8 %bf.load56, 1
  %bf.clear58 = and i8 %bf.lshr57, 1
  %bf.cast59 = trunc i8 %bf.clear58 to i1
  br i1 %bf.cast59, label %land.lhs.true, label %if.end.67

land.lhs.true:                                    ; preds = %sw.bb.53
  %44 = load %struct.Lisp_Buffer_Local_Value*, %struct.Lisp_Buffer_Local_Value** %blv, align 8
  %call61 = call i32 @blv_found(%struct.Lisp_Buffer_Local_Value* %44)
  %tobool = icmp ne i32 %call61, 0
  br i1 %tobool, label %land.lhs.true.62, label %if.end.67

land.lhs.true.62:                                 ; preds = %land.lhs.true
  %45 = load %struct.Lisp_Buffer_Local_Value*, %struct.Lisp_Buffer_Local_Value** %blv, align 8
  %where = getelementptr inbounds %struct.Lisp_Buffer_Local_Value, %struct.Lisp_Buffer_Local_Value* %45, i32 0, i32 2
  %46 = load i64, i64* %where, align 8
  %sub63 = sub nsw i64 %46, 5
  %47 = inttoptr i64 %sub63 to i8*
  %48 = bitcast i8* %47 to %struct.frame*
  %49 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %cmp64 = icmp eq %struct.frame* %48, %49
  br i1 %cmp64, label %if.then.66, label %if.end.67

if.then.66:                                       ; preds = %land.lhs.true.62
  %50 = load %struct.Lisp_Symbol*, %struct.Lisp_Symbol** %sym, align 8
  call void @swap_in_global_binding(%struct.Lisp_Symbol* %50)
  br label %if.end.67

if.end.67:                                        ; preds = %if.then.66, %land.lhs.true.62, %land.lhs.true, %sw.bb.53
  br label %sw.epilog

sw.default:                                       ; preds = %start
  call void @emacs_abort() #7
  unreachable

sw.epilog:                                        ; preds = %if.end.67, %sw.bb.52
  br label %if.end.68

if.end.68:                                        ; preds = %sw.epilog, %if.end.44
  %51 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %51, i32 0, i32 26
  %52 = bitcast i48* %output_method to i64*
  %bf.load69 = load i64, i64* %52, align 8
  %bf.lshr70 = lshr i64 %bf.load69, 23
  %bf.clear71 = and i64 %bf.lshr70, 7
  %bf.cast72 = trunc i64 %bf.clear71 to i32
  %cmp73 = icmp eq i32 %bf.cast72, 1
  br i1 %cmp73, label %land.lhs.true.75, label %if.end.120

land.lhs.true.75:                                 ; preds = %if.end.68
  %53 = load i64, i64* %prop.addr, align 8
  %call76 = call i64 @builtin_lisp_symbol(i32 942)
  %cmp77 = icmp eq i64 %53, %call76
  br i1 %cmp77, label %land.lhs.true.79, label %if.end.120

land.lhs.true.79:                                 ; preds = %land.lhs.true.75
  %54 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %55 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method80 = getelementptr inbounds %struct.frame, %struct.frame* %55, i32 0, i32 26
  %56 = bitcast i48* %output_method80 to i64*
  %bf.load81 = load i64, i64* %56, align 8
  %bf.lshr82 = lshr i64 %bf.load81, 23
  %bf.clear83 = and i64 %bf.lshr82, 7
  %bf.cast84 = trunc i64 %bf.clear83 to i32
  %cmp85 = icmp eq i32 %bf.cast84, 1
  br i1 %cmp85, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.79
  %57 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method87 = getelementptr inbounds %struct.frame, %struct.frame* %57, i32 0, i32 26
  %58 = bitcast i48* %output_method87 to i64*
  %bf.load88 = load i64, i64* %58, align 8
  %bf.lshr89 = lshr i64 %bf.load88, 23
  %bf.clear90 = and i64 %bf.lshr89, 7
  %bf.cast91 = trunc i64 %bf.clear90 to i32
  %cmp92 = icmp eq i32 %bf.cast91, 3
  br i1 %cmp92, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %land.lhs.true.79
  %59 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %59, i32 0, i32 61
  %60 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %60, i32 0, i32 12
  %tty = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %61 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  call void @emacs_abort() #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %62, %cond.true
  %cond = phi %struct.tty_display_info* [ %61, %cond.true ], [ null, %62 ]
  %previous_frame = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond, i32 0, i32 12
  %63 = load %struct.frame*, %struct.frame** %previous_frame, align 8
  %cmp94 = icmp eq %struct.frame* %54, %63
  br i1 %cmp94, label %if.then.96, label %if.end.120

if.then.96:                                       ; preds = %cond.end
  %64 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method97 = getelementptr inbounds %struct.frame, %struct.frame* %64, i32 0, i32 26
  %65 = bitcast i48* %output_method97 to i64*
  %bf.load98 = load i64, i64* %65, align 8
  %bf.lshr99 = lshr i64 %bf.load98, 23
  %bf.clear100 = and i64 %bf.lshr99, 7
  %bf.cast101 = trunc i64 %bf.clear100 to i32
  %cmp102 = icmp eq i32 %bf.cast101, 1
  br i1 %cmp102, label %cond.true.112, label %lor.lhs.false.104

lor.lhs.false.104:                                ; preds = %if.then.96
  %66 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method105 = getelementptr inbounds %struct.frame, %struct.frame* %66, i32 0, i32 26
  %67 = bitcast i48* %output_method105 to i64*
  %bf.load106 = load i64, i64* %67, align 8
  %bf.lshr107 = lshr i64 %bf.load106, 23
  %bf.clear108 = and i64 %bf.lshr107, 7
  %bf.cast109 = trunc i64 %bf.clear108 to i32
  %cmp110 = icmp eq i32 %bf.cast109, 3
  br i1 %cmp110, label %cond.true.112, label %cond.false.116

cond.true.112:                                    ; preds = %lor.lhs.false.104, %if.then.96
  %68 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal113 = getelementptr inbounds %struct.frame, %struct.frame* %68, i32 0, i32 61
  %69 = load %struct.terminal*, %struct.terminal** %terminal113, align 8
  %display_info114 = getelementptr inbounds %struct.terminal, %struct.terminal* %69, i32 0, i32 12
  %tty115 = bitcast %union.display_info* %display_info114 to %struct.tty_display_info**
  %70 = load %struct.tty_display_info*, %struct.tty_display_info** %tty115, align 8
  br label %cond.end.117

cond.false.116:                                   ; preds = %lor.lhs.false.104
  call void @emacs_abort() #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.117

cond.end.117:                                     ; preds = %71, %cond.true.112
  %cond118 = phi %struct.tty_display_info* [ %70, %cond.true.112 ], [ null, %71 ]
  %previous_frame119 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond118, i32 0, i32 12
  store %struct.frame* null, %struct.frame** %previous_frame119, align 8
  br label %if.end.120

if.end.120:                                       ; preds = %cond.end.117, %cond.end, %land.lhs.true.75, %if.end.68
  %72 = load i64, i64* %prop.addr, align 8
  %73 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %param_alist = getelementptr inbounds %struct.frame, %struct.frame* %73, i32 0, i32 8
  %74 = load i64, i64* %param_alist, align 8
  %call121 = call i64 @Fassq(i64 %72, i64 %74)
  store i64 %call121, i64* %old_alist_elt, align 8
  %75 = load i64, i64* %old_alist_elt, align 8
  %call122 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp123 = icmp eq i64 %75, %call122
  br i1 %cmp123, label %if.then.125, label %if.else

if.then.125:                                      ; preds = %if.end.120
  %76 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %77 = load i64, i64* %prop.addr, align 8
  %78 = load i64, i64* %val.addr, align 8
  %call126 = call i64 @Fcons(i64 %77, i64 %78)
  %79 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %param_alist127 = getelementptr inbounds %struct.frame, %struct.frame* %79, i32 0, i32 8
  %80 = load i64, i64* %param_alist127, align 8
  %call128 = call i64 @Fcons(i64 %call126, i64 %80)
  call void @fset_param_alist(%struct.frame* %76, i64 %call128)
  br label %if.end.130

if.else:                                          ; preds = %if.end.120
  %81 = load i64, i64* %old_alist_elt, align 8
  %82 = load i64, i64* %val.addr, align 8
  %call129 = call i64 @Fsetcdr(i64 %81, i64 %82)
  br label %if.end.130

if.end.130:                                       ; preds = %if.else, %if.then.125
  %83 = load i64, i64* %prop.addr, align 8
  %call131 = call i64 @builtin_lisp_symbol(i32 227)
  %cmp132 = icmp eq i64 %83, %call131
  br i1 %cmp132, label %if.then.134, label %if.end.135

if.then.134:                                      ; preds = %if.end.130
  %84 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %85 = load i64, i64* %val.addr, align 8
  call void @fset_buffer_predicate(%struct.frame* %84, i64 %85)
  br label %if.end.135

if.end.135:                                       ; preds = %if.then.134, %if.end.130
  %86 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method136 = getelementptr inbounds %struct.frame, %struct.frame* %86, i32 0, i32 26
  %87 = bitcast i48* %output_method136 to i64*
  %bf.load137 = load i64, i64* %87, align 8
  %bf.lshr138 = lshr i64 %bf.load137, 23
  %bf.clear139 = and i64 %bf.lshr138, 7
  %bf.cast140 = trunc i64 %bf.clear139 to i32
  %cmp141 = icmp eq i32 %bf.cast140, 2
  br i1 %cmp141, label %if.end.156, label %if.then.143

if.then.143:                                      ; preds = %if.end.135
  %88 = load i64, i64* %prop.addr, align 8
  %call144 = call i64 @builtin_lisp_symbol(i32 653)
  %cmp145 = icmp eq i64 %88, %call144
  br i1 %cmp145, label %if.then.147, label %if.else.149

if.then.147:                                      ; preds = %if.then.143
  %89 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %90 = load i64, i64* %val.addr, align 8
  %91 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %91, i32 0, i32 57
  %92 = load i32, i32* %menu_bar_lines, align 4
  %conv148 = sext i32 %92 to i64
  %shl = shl i64 %conv148, 2
  %add = add i64 %shl, 2
  call void @set_menu_bar_lines(%struct.frame* %89, i64 %90, i64 %add)
  br label %if.end.155

if.else.149:                                      ; preds = %if.then.143
  %93 = load i64, i64* %prop.addr, align 8
  %call150 = call i64 @builtin_lisp_symbol(i32 696)
  %cmp151 = icmp eq i64 %93, %call150
  br i1 %cmp151, label %if.then.153, label %if.end.154

if.then.153:                                      ; preds = %if.else.149
  %94 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %95 = load i64, i64* %val.addr, align 8
  call void @set_term_frame_name(%struct.frame* %94, i64 %95)
  br label %if.end.154

if.end.154:                                       ; preds = %if.then.153, %if.else.149
  br label %if.end.155

if.end.155:                                       ; preds = %if.end.154, %if.then.147
  br label %if.end.156

if.end.156:                                       ; preds = %if.end.155, %if.end.135
  %96 = load i64, i64* %prop.addr, align 8
  %call157 = call i64 @builtin_lisp_symbol(i32 661)
  %cmp158 = icmp eq i64 %96, %call157
  br i1 %cmp158, label %land.lhs.true.160, label %if.end.188

land.lhs.true.160:                                ; preds = %if.end.156
  %97 = load i64, i64* %val.addr, align 8
  %call161 = call zeroext i1 @WINDOWP(i64 %97)
  br i1 %call161, label %if.then.163, label %if.end.188

if.then.163:                                      ; preds = %land.lhs.true.160
  %98 = load i64, i64* %val.addr, align 8
  %call164 = call %struct.window* @XWINDOW(i64 %98)
  %mini = getelementptr inbounds %struct.window, %struct.window* %call164, i32 0, i32 67
  %bf.load165 = load i16, i16* %mini, align 4
  %bf.clear166 = and i16 %bf.load165, 1
  %bf.cast167 = trunc i16 %bf.clear166 to i1
  br i1 %bf.cast167, label %if.end.169, label %if.then.168

if.then.168:                                      ; preds = %if.then.163
  call void (i8*, ...) @error(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.10, i32 0, i32 0)) #7
  unreachable

if.end.169:                                       ; preds = %if.then.163
  %99 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window = getelementptr inbounds %struct.frame, %struct.frame* %99, i32 0, i32 7
  %100 = load i64, i64* %minibuffer_window, align 8
  %call170 = call zeroext i1 @WINDOWP(i64 %100)
  br i1 %call170, label %land.lhs.true.172, label %lor.lhs.false.178

land.lhs.true.172:                                ; preds = %if.end.169
  %101 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window173 = getelementptr inbounds %struct.frame, %struct.frame* %101, i32 0, i32 7
  %102 = load i64, i64* %minibuffer_window173, align 8
  %call174 = call %struct.window* @XWINDOW(i64 %102)
  %frame = getelementptr inbounds %struct.window, %struct.window* %call174, i32 0, i32 1
  %103 = load i64, i64* %frame, align 8
  %sub175 = sub nsw i64 %103, 5
  %104 = inttoptr i64 %sub175 to i8*
  %105 = bitcast i8* %104 to %struct.frame*
  %106 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %cmp176 = icmp eq %struct.frame* %105, %106
  br i1 %cmp176, label %land.lhs.true.182, label %lor.lhs.false.178

lor.lhs.false.178:                                ; preds = %land.lhs.true.172, %if.end.169
  %107 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %107, i32 0, i32 5
  %108 = load i64, i64* %root_window, align 8
  %109 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window179 = getelementptr inbounds %struct.frame, %struct.frame* %109, i32 0, i32 7
  %110 = load i64, i64* %minibuffer_window179, align 8
  %cmp180 = icmp eq i64 %108, %110
  br i1 %cmp180, label %land.lhs.true.182, label %if.end.187

land.lhs.true.182:                                ; preds = %lor.lhs.false.178, %land.lhs.true.172
  %111 = load i64, i64* %val.addr, align 8
  %112 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window183 = getelementptr inbounds %struct.frame, %struct.frame* %112, i32 0, i32 7
  %113 = load i64, i64* %minibuffer_window183, align 8
  %cmp184 = icmp eq i64 %111, %113
  br i1 %cmp184, label %if.end.187, label %if.then.186

if.then.186:                                      ; preds = %land.lhs.true.182
  call void (i8*, ...) @error(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.11, i32 0, i32 0)) #7
  unreachable

if.end.187:                                       ; preds = %land.lhs.true.182, %lor.lhs.false.178
  %114 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %115 = load i64, i64* %val.addr, align 8
  call void @fset_minibuffer_window(%struct.frame* %114, i64 %115)
  br label %if.end.188

if.end.188:                                       ; preds = %for.end, %for.end.42, %if.end.187, %land.lhs.true.160, %if.end.156
  ret void
}

declare i64 @Fbuffer_live_p(i64) #1

declare i64 @Fnreverse(i64) #1

declare %struct.Lisp_Symbol* @indirect_variable(%struct.Lisp_Symbol*) #1

declare i32 @blv_found(%struct.Lisp_Buffer_Local_Value*) #1

declare void @swap_in_global_binding(%struct.Lisp_Symbol*) #1

declare void @fset_param_alist(%struct.frame*, i64) #1

; Function Attrs: nounwind uwtable
define internal void @fset_buffer_predicate(%struct.frame* %f, i64 %val) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %val.addr = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %buffer_predicate = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 14
  store i64 %0, i64* %buffer_predicate, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @set_term_frame_name(%struct.frame* %f, i64 %name) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %name.addr = alloca i64, align 8
  %namebuf = alloca [22 x i8], align 16
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %name, i64* %name.addr, align 8
  %0 = load i64, i64* %name.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  %lnot = xor i1 %cmp, true
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %explicit_name = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 26
  %2 = bitcast i48* %explicit_name to i64*
  %3 = zext i1 %lnot to i64
  %bf.load = load i64, i64* %2, align 8
  %bf.shl = shl i64 %3, 18
  %bf.clear = and i64 %bf.load, -262145
  %bf.set = or i64 %bf.clear, %bf.shl
  store i64 %bf.set, i64* %2, align 8
  %bf.result.cast = trunc i64 %3 to i8
  %tobool = trunc i8 %bf.result.cast to i1
  %4 = load i64, i64* %name.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2 = icmp eq i64 %4, %call1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %name3 = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 1
  %6 = load i64, i64* %name3, align 8
  %call4 = call i8* @SSDATA(i64 %6)
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %name5 = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 1
  %8 = load i64, i64* %name5, align 8
  %call6 = call i64 @SBYTES(i64 %8)
  %call7 = call i32 @frame_name_fnn_p(i8* %call4, i64 %call6)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.then.9, label %if.end

if.then.9:                                        ; preds = %if.then
  br label %return

if.end:                                           ; preds = %if.then
  %arraydecay = getelementptr inbounds [22 x i8], [22 x i8]* %namebuf, i32 0, i32 0
  %9 = load i64, i64* @tty_frame_count, align 8
  %inc = add nsw i64 %9, 1
  store i64 %inc, i64* @tty_frame_count, align 8
  %call10 = call i64 (i8*, i8*, ...) @make_formatted_string(i8* %arraydecay, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.66, i32 0, i32 0), i64 %inc)
  store i64 %call10, i64* %name.addr, align 8
  br label %if.end.23

if.else:                                          ; preds = %entry
  %10 = load i64, i64* %name.addr, align 8
  call void @CHECK_STRING(i64 %10)
  %11 = load i64, i64* %name.addr, align 8
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %name11 = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 1
  %13 = load i64, i64* %name11, align 8
  %call12 = call i64 @Fstring_equal(i64 %11, i64 %13)
  %call13 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp14 = icmp eq i64 %call12, %call13
  br i1 %cmp14, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %if.else
  br label %return

if.end.16:                                        ; preds = %if.else
  %14 = load i64, i64* %name.addr, align 8
  %call17 = call i8* @SSDATA(i64 %14)
  %15 = load i64, i64* %name.addr, align 8
  %call18 = call i64 @SBYTES(i64 %15)
  %call19 = call i32 @frame_name_fnn_p(i8* %call17, i64 %call18)
  %tobool20 = icmp ne i32 %call19, 0
  br i1 %tobool20, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %if.end.16
  call void (i8*, ...) @error(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.67, i32 0, i32 0)) #7
  unreachable

if.end.22:                                        ; preds = %if.end.16
  br label %if.end.23

if.end.23:                                        ; preds = %if.end.22, %if.end
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %17 = load i64, i64* %name.addr, align 8
  call void @fset_name(%struct.frame* %16, i64 %17)
  store i32 16, i32* @update_mode_lines, align 4
  br label %return

return:                                           ; preds = %if.end.23, %if.then.15, %if.then.9
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @Fframe_parameters(i64 %frame) #0 {
entry:
  %retval = alloca i64, align 8
  %frame.addr = alloca i64, align 8
  %alist = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %height = alloca i32, align 4
  %width = alloca i32, align 4
  %elt = alloca i64, align 8
  %lines = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_any_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  %1 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 61
  %2 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp = icmp ne %struct.terminal* %2, null
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call1, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.frame*, %struct.frame** %f, align 8
  %param_alist = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 8
  %4 = load i64, i64* %param_alist, align 8
  %call2 = call i64 @Fcopy_alist(i64 %4)
  store i64 %call2, i64* %alist, align 8
  %5 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 26
  %6 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %6, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp3 = icmp eq i32 %bf.cast, 2
  br i1 %cmp3, label %if.end.56, label %if.then.4

if.then.4:                                        ; preds = %if.end
  %call5 = call i64 @builtin_lisp_symbol(i32 451)
  %7 = load i64, i64* %alist, align 8
  %call6 = call i64 @Fassq(i64 %call5, i64 %7)
  store i64 %call6, i64* %elt, align 8
  %8 = load i64, i64* %elt, align 8
  %and = and i64 %8, 7
  %conv = trunc i64 %and to i32
  %cmp7 = icmp eq i32 %conv, 3
  br i1 %cmp7, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then.4
  %9 = load i64, i64* %elt, align 8
  %sub = sub nsw i64 %9, 3
  %10 = inttoptr i64 %sub to i8*
  %11 = bitcast i8* %10 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %11, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %12 = load i64, i64* %cdr, align 8
  %call9 = call zeroext i1 @STRINGP(i64 %12)
  br i1 %call9, label %if.then.11, label %if.else

if.then.11:                                       ; preds = %land.lhs.true
  %13 = load %struct.frame*, %struct.frame** %f, align 8
  %14 = load i64, i64* %elt, align 8
  %sub12 = sub nsw i64 %14, 3
  %15 = inttoptr i64 %sub12 to i8*
  %16 = bitcast i8* %15 to %struct.Lisp_Cons*
  %u13 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %16, i32 0, i32 1
  %cdr14 = bitcast %union.anon.11* %u13 to i64*
  %17 = load i64, i64* %cdr14, align 8
  %call15 = call i64 @frame_unspecified_color(%struct.frame* %13, i64 %17)
  store i64 %call15, i64* %elt, align 8
  %18 = load i64, i64* %elt, align 8
  %call16 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp17 = icmp eq i64 %18, %call16
  br i1 %cmp17, label %if.end.21, label %if.then.19

if.then.19:                                       ; preds = %if.then.11
  %call20 = call i64 @builtin_lisp_symbol(i32 451)
  %19 = load i64, i64* %elt, align 8
  call void @store_in_alist(i64* %alist, i64 %call20, i64 %19)
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.19, %if.then.11
  br label %if.end.25

if.else:                                          ; preds = %land.lhs.true, %if.then.4
  %call22 = call i64 @builtin_lisp_symbol(i32 451)
  %20 = load %struct.frame*, %struct.frame** %f, align 8
  %21 = load %struct.frame*, %struct.frame** %f, align 8
  %foreground_pixel = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 78
  %22 = load i64, i64* %foreground_pixel, align 8
  %conv23 = trunc i64 %22 to i32
  %call24 = call i64 @tty_color_name(%struct.frame* %20, i32 %conv23)
  call void @store_in_alist(i64* %alist, i64 %call22, i64 %call24)
  br label %if.end.25

if.end.25:                                        ; preds = %if.else, %if.end.21
  %call26 = call i64 @builtin_lisp_symbol(i32 193)
  %23 = load i64, i64* %alist, align 8
  %call27 = call i64 @Fassq(i64 %call26, i64 %23)
  store i64 %call27, i64* %elt, align 8
  %24 = load i64, i64* %elt, align 8
  %and28 = and i64 %24, 7
  %conv29 = trunc i64 %and28 to i32
  %cmp30 = icmp eq i32 %conv29, 3
  br i1 %cmp30, label %land.lhs.true.32, label %if.else.49

land.lhs.true.32:                                 ; preds = %if.end.25
  %25 = load i64, i64* %elt, align 8
  %sub33 = sub nsw i64 %25, 3
  %26 = inttoptr i64 %sub33 to i8*
  %27 = bitcast i8* %26 to %struct.Lisp_Cons*
  %u34 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %27, i32 0, i32 1
  %cdr35 = bitcast %union.anon.11* %u34 to i64*
  %28 = load i64, i64* %cdr35, align 8
  %call36 = call zeroext i1 @STRINGP(i64 %28)
  br i1 %call36, label %if.then.38, label %if.else.49

if.then.38:                                       ; preds = %land.lhs.true.32
  %29 = load %struct.frame*, %struct.frame** %f, align 8
  %30 = load i64, i64* %elt, align 8
  %sub39 = sub nsw i64 %30, 3
  %31 = inttoptr i64 %sub39 to i8*
  %32 = bitcast i8* %31 to %struct.Lisp_Cons*
  %u40 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %32, i32 0, i32 1
  %cdr41 = bitcast %union.anon.11* %u40 to i64*
  %33 = load i64, i64* %cdr41, align 8
  %call42 = call i64 @frame_unspecified_color(%struct.frame* %29, i64 %33)
  store i64 %call42, i64* %elt, align 8
  %34 = load i64, i64* %elt, align 8
  %call43 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp44 = icmp eq i64 %34, %call43
  br i1 %cmp44, label %if.end.48, label %if.then.46

if.then.46:                                       ; preds = %if.then.38
  %call47 = call i64 @builtin_lisp_symbol(i32 193)
  %35 = load i64, i64* %elt, align 8
  call void @store_in_alist(i64* %alist, i64 %call47, i64 %35)
  br label %if.end.48

if.end.48:                                        ; preds = %if.then.46, %if.then.38
  br label %if.end.53

if.else.49:                                       ; preds = %land.lhs.true.32, %if.end.25
  %call50 = call i64 @builtin_lisp_symbol(i32 193)
  %36 = load %struct.frame*, %struct.frame** %f, align 8
  %37 = load %struct.frame*, %struct.frame** %f, align 8
  %background_pixel = getelementptr inbounds %struct.frame, %struct.frame* %37, i32 0, i32 77
  %38 = load i64, i64* %background_pixel, align 8
  %conv51 = trunc i64 %38 to i32
  %call52 = call i64 @tty_color_name(%struct.frame* %36, i32 %conv51)
  call void @store_in_alist(i64* %alist, i64 %call50, i64 %call52)
  br label %if.end.53

if.end.53:                                        ; preds = %if.else.49, %if.end.48
  %call54 = call i64 @builtin_lisp_symbol(i32 439)
  %call55 = call i64 @build_string(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0))
  call void @store_in_alist(i64* %alist, i64 %call54, i64 %call55)
  br label %if.end.56

if.end.56:                                        ; preds = %if.end.53, %if.end
  %call57 = call i64 @builtin_lisp_symbol(i32 696)
  %39 = load %struct.frame*, %struct.frame** %f, align 8
  %name = getelementptr inbounds %struct.frame, %struct.frame* %39, i32 0, i32 1
  %40 = load i64, i64* %name, align 8
  call void @store_in_alist(i64* %alist, i64 %call57, i64 %40)
  %41 = load %struct.frame*, %struct.frame** %f, align 8
  %new_height = getelementptr inbounds %struct.frame, %struct.frame* %41, i32 0, i32 43
  %42 = load i32, i32* %new_height, align 4
  %tobool = icmp ne i32 %42, 0
  br i1 %tobool, label %cond.true, label %cond.false.66

cond.true:                                        ; preds = %if.end.56
  %43 = load %struct.frame*, %struct.frame** %f, align 8
  %new_pixelwise = getelementptr inbounds %struct.frame, %struct.frame* %43, i32 0, i32 26
  %44 = bitcast i48* %new_pixelwise to i64*
  %bf.load58 = load i64, i64* %44, align 8
  %bf.lshr59 = lshr i64 %bf.load58, 33
  %bf.clear60 = and i64 %bf.lshr59, 1
  %bf.cast61 = trunc i64 %bf.clear60 to i1
  br i1 %bf.cast61, label %cond.true.63, label %cond.false

cond.true.63:                                     ; preds = %cond.true
  %45 = load %struct.frame*, %struct.frame** %f, align 8
  %new_height64 = getelementptr inbounds %struct.frame, %struct.frame* %45, i32 0, i32 43
  %46 = load i32, i32* %new_height64, align 4
  %47 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %47, i32 0, i32 60
  %48 = load i32, i32* %line_height, align 4
  %div = sdiv i32 %46, %48
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %49 = load %struct.frame*, %struct.frame** %f, align 8
  %new_height65 = getelementptr inbounds %struct.frame, %struct.frame* %49, i32 0, i32 43
  %50 = load i32, i32* %new_height65, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.63
  %cond = phi i32 [ %div, %cond.true.63 ], [ %50, %cond.false ]
  br label %cond.end.67

cond.false.66:                                    ; preds = %if.end.56
  %51 = load %struct.frame*, %struct.frame** %f, align 8
  %text_lines = getelementptr inbounds %struct.frame, %struct.frame* %51, i32 0, i32 37
  %52 = load i32, i32* %text_lines, align 4
  br label %cond.end.67

cond.end.67:                                      ; preds = %cond.false.66, %cond.end
  %cond68 = phi i32 [ %cond, %cond.end ], [ %52, %cond.false.66 ]
  store i32 %cond68, i32* %height, align 4
  %call69 = call i64 @builtin_lisp_symbol(i32 515)
  %53 = load i32, i32* %height, align 4
  %conv70 = sext i32 %53 to i64
  %shl = shl i64 %conv70, 2
  %add = add i64 %shl, 2
  call void @store_in_alist(i64* %alist, i64 %call69, i64 %add)
  %54 = load %struct.frame*, %struct.frame** %f, align 8
  %new_width = getelementptr inbounds %struct.frame, %struct.frame* %54, i32 0, i32 42
  %55 = load i32, i32* %new_width, align 4
  %tobool71 = icmp ne i32 %55, 0
  br i1 %tobool71, label %cond.true.72, label %cond.false.86

cond.true.72:                                     ; preds = %cond.end.67
  %56 = load %struct.frame*, %struct.frame** %f, align 8
  %new_pixelwise73 = getelementptr inbounds %struct.frame, %struct.frame* %56, i32 0, i32 26
  %57 = bitcast i48* %new_pixelwise73 to i64*
  %bf.load74 = load i64, i64* %57, align 8
  %bf.lshr75 = lshr i64 %bf.load74, 33
  %bf.clear76 = and i64 %bf.lshr75, 1
  %bf.cast77 = trunc i64 %bf.clear76 to i1
  br i1 %bf.cast77, label %cond.true.79, label %cond.false.82

cond.true.79:                                     ; preds = %cond.true.72
  %58 = load %struct.frame*, %struct.frame** %f, align 8
  %new_width80 = getelementptr inbounds %struct.frame, %struct.frame* %58, i32 0, i32 42
  %59 = load i32, i32* %new_width80, align 4
  %60 = load %struct.frame*, %struct.frame** %f, align 8
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %60, i32 0, i32 59
  %61 = load i32, i32* %column_width, align 4
  %div81 = sdiv i32 %59, %61
  br label %cond.end.84

cond.false.82:                                    ; preds = %cond.true.72
  %62 = load %struct.frame*, %struct.frame** %f, align 8
  %new_width83 = getelementptr inbounds %struct.frame, %struct.frame* %62, i32 0, i32 42
  %63 = load i32, i32* %new_width83, align 4
  br label %cond.end.84

cond.end.84:                                      ; preds = %cond.false.82, %cond.true.79
  %cond85 = phi i32 [ %div81, %cond.true.79 ], [ %63, %cond.false.82 ]
  br label %cond.end.87

cond.false.86:                                    ; preds = %cond.end.67
  %64 = load %struct.frame*, %struct.frame** %f, align 8
  %text_cols = getelementptr inbounds %struct.frame, %struct.frame* %64, i32 0, i32 36
  %65 = load i32, i32* %text_cols, align 4
  br label %cond.end.87

cond.end.87:                                      ; preds = %cond.false.86, %cond.end.84
  %cond88 = phi i32 [ %cond85, %cond.end.84 ], [ %65, %cond.false.86 ]
  store i32 %cond88, i32* %width, align 4
  %call89 = call i64 @builtin_lisp_symbol(i32 1017)
  %66 = load i32, i32* %width, align 4
  %conv90 = sext i32 %66 to i64
  %shl91 = shl i64 %conv90, 2
  %add92 = add i64 %shl91, 2
  call void @store_in_alist(i64* %alist, i64 %call89, i64 %add92)
  %call93 = call i64 @builtin_lisp_symbol(i32 675)
  %67 = load %struct.frame*, %struct.frame** %f, align 8
  %wants_modeline = getelementptr inbounds %struct.frame, %struct.frame* %67, i32 0, i32 26
  %68 = bitcast i48* %wants_modeline to i64*
  %bf.load94 = load i64, i64* %68, align 8
  %bf.lshr95 = lshr i64 %bf.load94, 14
  %bf.clear96 = and i64 %bf.lshr95, 1
  %bf.cast97 = trunc i64 %bf.clear96 to i1
  br i1 %bf.cast97, label %cond.true.99, label %cond.false.101

cond.true.99:                                     ; preds = %cond.end.87
  %call100 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.103

cond.false.101:                                   ; preds = %cond.end.87
  %call102 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.103

cond.end.103:                                     ; preds = %cond.false.101, %cond.true.99
  %cond104 = phi i64 [ %call100, %cond.true.99 ], [ %call102, %cond.false.101 ]
  call void @store_in_alist(i64* %alist, i64 %call93, i64 %cond104)
  %call105 = call i64 @builtin_lisp_symbol(i32 661)
  %69 = load %struct.frame*, %struct.frame** %f, align 8
  %minibuffer_window = getelementptr inbounds %struct.frame, %struct.frame* %69, i32 0, i32 7
  %70 = load i64, i64* %minibuffer_window, align 8
  %call106 = call zeroext i1 @WINDOWP(i64 %70)
  br i1 %call106, label %land.lhs.true.108, label %cond.true.115

land.lhs.true.108:                                ; preds = %cond.end.103
  %71 = load %struct.frame*, %struct.frame** %f, align 8
  %minibuffer_window109 = getelementptr inbounds %struct.frame, %struct.frame* %71, i32 0, i32 7
  %72 = load i64, i64* %minibuffer_window109, align 8
  %call110 = call %struct.window* @XWINDOW(i64 %72)
  %frame111 = getelementptr inbounds %struct.window, %struct.window* %call110, i32 0, i32 1
  %73 = load i64, i64* %frame111, align 8
  %sub112 = sub nsw i64 %73, 5
  %74 = inttoptr i64 %sub112 to i8*
  %75 = bitcast i8* %74 to %struct.frame*
  %76 = load %struct.frame*, %struct.frame** %f, align 8
  %cmp113 = icmp eq %struct.frame* %75, %76
  br i1 %cmp113, label %cond.false.117, label %cond.true.115

cond.true.115:                                    ; preds = %land.lhs.true.108, %cond.end.103
  %call116 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.127

cond.false.117:                                   ; preds = %land.lhs.true.108
  %77 = load %struct.frame*, %struct.frame** %f, align 8
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %77, i32 0, i32 5
  %78 = load i64, i64* %root_window, align 8
  %79 = load %struct.frame*, %struct.frame** %f, align 8
  %minibuffer_window118 = getelementptr inbounds %struct.frame, %struct.frame* %79, i32 0, i32 7
  %80 = load i64, i64* %minibuffer_window118, align 8
  %cmp119 = icmp eq i64 %78, %80
  br i1 %cmp119, label %cond.true.121, label %cond.false.123

cond.true.121:                                    ; preds = %cond.false.117
  %call122 = call i64 @builtin_lisp_symbol(i32 717)
  br label %cond.end.125

cond.false.123:                                   ; preds = %cond.false.117
  %81 = load %struct.frame*, %struct.frame** %f, align 8
  %minibuffer_window124 = getelementptr inbounds %struct.frame, %struct.frame* %81, i32 0, i32 7
  %82 = load i64, i64* %minibuffer_window124, align 8
  br label %cond.end.125

cond.end.125:                                     ; preds = %cond.false.123, %cond.true.121
  %cond126 = phi i64 [ %call122, %cond.true.121 ], [ %82, %cond.false.123 ]
  br label %cond.end.127

cond.end.127:                                     ; preds = %cond.end.125, %cond.true.115
  %cond128 = phi i64 [ %call116, %cond.true.115 ], [ %cond126, %cond.end.125 ]
  call void @store_in_alist(i64* %alist, i64 %call105, i64 %cond128)
  %call129 = call i64 @builtin_lisp_symbol(i32 976)
  %83 = load %struct.frame*, %struct.frame** %f, align 8
  %no_split = getelementptr inbounds %struct.frame, %struct.frame* %83, i32 0, i32 26
  %84 = bitcast i48* %no_split to i64*
  %bf.load130 = load i64, i64* %84, align 8
  %bf.lshr131 = lshr i64 %bf.load130, 17
  %bf.clear132 = and i64 %bf.lshr131, 1
  %bf.cast133 = trunc i64 %bf.clear132 to i1
  br i1 %bf.cast133, label %cond.true.135, label %cond.false.137

cond.true.135:                                    ; preds = %cond.end.127
  %call136 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.139

cond.false.137:                                   ; preds = %cond.end.127
  %call138 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.139

cond.end.139:                                     ; preds = %cond.false.137, %cond.true.135
  %cond140 = phi i64 [ %call136, %cond.true.135 ], [ %call138, %cond.false.137 ]
  call void @store_in_alist(i64* %alist, i64 %call129, i64 %cond140)
  %call141 = call i64 @builtin_lisp_symbol(i32 222)
  %85 = load %struct.frame*, %struct.frame** %f, align 8
  %buffer_list = getelementptr inbounds %struct.frame, %struct.frame* %85, i32 0, i32 15
  %86 = load i64, i64* %buffer_list, align 8
  call void @store_in_alist(i64* %alist, i64 %call141, i64 %86)
  %call142 = call i64 @builtin_lisp_symbol(i32 231)
  %87 = load %struct.frame*, %struct.frame** %f, align 8
  %buried_buffer_list = getelementptr inbounds %struct.frame, %struct.frame* %87, i32 0, i32 16
  %88 = load i64, i64* %buried_buffer_list, align 8
  call void @store_in_alist(i64* %alist, i64 %call142, i64 %88)
  %89 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method143 = getelementptr inbounds %struct.frame, %struct.frame* %89, i32 0, i32 26
  %90 = bitcast i48* %output_method143 to i64*
  %bf.load144 = load i64, i64* %90, align 8
  %bf.lshr145 = lshr i64 %bf.load144, 23
  %bf.clear146 = and i64 %bf.lshr145, 7
  %bf.cast147 = trunc i64 %bf.clear146 to i32
  %cmp148 = icmp eq i32 %bf.cast147, 2
  br i1 %cmp148, label %if.then.150, label %if.else.151

if.then.150:                                      ; preds = %cond.end.139
  %91 = load %struct.frame*, %struct.frame** %f, align 8
  call void @x_report_frame_params(%struct.frame* %91, i64* %alist)
  br label %if.end.155

if.else.151:                                      ; preds = %cond.end.139
  %92 = load %struct.frame*, %struct.frame** %f, align 8
  %menu_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %92, i32 0, i32 57
  %93 = load i32, i32* %menu_bar_lines, align 4
  %conv152 = sext i32 %93 to i64
  %call153 = call i64 @make_natnum(i64 %conv152)
  store i64 %call153, i64* %lines, align 8
  %call154 = call i64 @builtin_lisp_symbol(i32 653)
  %94 = load i64, i64* %lines, align 8
  call void @store_in_alist(i64* %alist, i64 %call154, i64 %94)
  br label %if.end.155

if.end.155:                                       ; preds = %if.else.151, %if.then.150
  %95 = load i64, i64* %alist, align 8
  store i64 %95, i64* %retval
  br label %return

return:                                           ; preds = %if.end.155, %if.then
  %96 = load i64, i64* %retval
  ret i64 %96
}

declare zeroext i1 @STRINGP(i64) #1

; Function Attrs: nounwind uwtable
define internal i64 @frame_unspecified_color(%struct.frame* %f, i64 %unspec) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %unspec.addr = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %unspec, i64* %unspec.addr, align 8
  %0 = load i64, i64* %unspec.addr, align 8
  %call = call i8* @SSDATA(i64 %0)
  %1 = load i64, i64* %unspec.addr, align 8
  %call1 = call i64 @SBYTES(i64 %1)
  %call2 = call i32 @strncmp(i8* %call, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @unspecified_bg, i32 0, i32 0), i64 %call1) #8
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %background_pixel = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 77
  %4 = load i64, i64* %background_pixel, align 8
  %conv = trunc i64 %4 to i32
  %call3 = call i64 @tty_color_name(%struct.frame* %2, i32 %conv)
  br label %cond.end.13

cond.false:                                       ; preds = %entry
  %5 = load i64, i64* %unspec.addr, align 8
  %call4 = call i8* @SSDATA(i64 %5)
  %6 = load i64, i64* %unspec.addr, align 8
  %call5 = call i64 @SBYTES(i64 %6)
  %call6 = call i32 @strncmp(i8* %call4, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @unspecified_fg, i32 0, i32 0), i64 %call5) #8
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %cond.false.11, label %cond.true.8

cond.true.8:                                      ; preds = %cond.false
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %foreground_pixel = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 78
  %9 = load i64, i64* %foreground_pixel, align 8
  %conv9 = trunc i64 %9 to i32
  %call10 = call i64 @tty_color_name(%struct.frame* %7, i32 %conv9)
  br label %cond.end

cond.false.11:                                    ; preds = %cond.false
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false.11, %cond.true.8
  %cond = phi i64 [ %call10, %cond.true.8 ], [ %call12, %cond.false.11 ]
  br label %cond.end.13

cond.end.13:                                      ; preds = %cond.end, %cond.true
  %cond14 = phi i64 [ %call3, %cond.true ], [ %cond, %cond.end ]
  ret i64 %cond14
}

declare i64 @tty_color_name(%struct.frame*, i32) #1

; Function Attrs: nounwind uwtable
define internal void @x_report_frame_params(%struct.frame* %f, i64* %alistptr) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %alistptr.addr = alloca i64*, align 8
  %tem = alloca i64, align 8
  %w = alloca i64, align 8
  %buf = alloca [21 x i8], align 16
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64* %alistptr, i64** %alistptr.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_pos = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 44
  %1 = load i32, i32* %left_pos, align 4
  %conv = sext i32 %1 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  store i64 %add, i64* %tem, align 8
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_pos1 = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 44
  %3 = load i32, i32* %left_pos1, align 4
  %cmp = icmp sge i32 %3, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load i64*, i64** %alistptr.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 607)
  %5 = load i64, i64* %tem, align 8
  call void @store_in_alist(i64* %4, i64 %call, i64 %5)
  br label %if.end

if.else:                                          ; preds = %entry
  %6 = load i64*, i64** %alistptr.addr, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 607)
  %call4 = call i64 @builtin_lisp_symbol(i32 752)
  %7 = load i64, i64* %tem, align 8
  %call5 = call i64 @list2(i64 %call4, i64 %7)
  call void @store_in_alist(i64* %6, i64 %call3, i64 %call5)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %top_pos = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 45
  %9 = load i32, i32* %top_pos, align 4
  %conv6 = sext i32 %9 to i64
  %shl7 = shl i64 %conv6, 2
  %add8 = add i64 %shl7, 2
  store i64 %add8, i64* %tem, align 8
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %top_pos9 = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 45
  %11 = load i32, i32* %top_pos9, align 4
  %cmp10 = icmp sge i32 %11, 0
  br i1 %cmp10, label %if.then.12, label %if.else.14

if.then.12:                                       ; preds = %if.end
  %12 = load i64*, i64** %alistptr.addr, align 8
  %call13 = call i64 @builtin_lisp_symbol(i32 928)
  %13 = load i64, i64* %tem, align 8
  call void @store_in_alist(i64* %12, i64 %call13, i64 %13)
  br label %if.end.18

if.else.14:                                       ; preds = %if.end
  %14 = load i64*, i64** %alistptr.addr, align 8
  %call15 = call i64 @builtin_lisp_symbol(i32 928)
  %call16 = call i64 @builtin_lisp_symbol(i32 752)
  %15 = load i64, i64* %tem, align 8
  %call17 = call i64 @list2(i64 %call16, i64 %15)
  call void @store_in_alist(i64* %14, i64 %call15, i64 %call17)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.14, %if.then.12
  %16 = load i64*, i64** %alistptr.addr, align 8
  %call19 = call i64 @builtin_lisp_symbol(i32 210)
  %17 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %border_width = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 50
  %18 = load i32, i32* %border_width, align 4
  %conv20 = sext i32 %18 to i64
  %shl21 = shl i64 %conv20, 2
  %add22 = add i64 %shl21, 2
  call void @store_in_alist(i64* %16, i64 %call19, i64 %add22)
  %19 = load i64*, i64** %alistptr.addr, align 8
  %call23 = call i64 @builtin_lisp_symbol(i32 563)
  %20 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 51
  %21 = load i32, i32* %internal_border_width, align 4
  %conv24 = sext i32 %21 to i64
  %shl25 = shl i64 %conv24, 2
  %add26 = add i64 %shl25, 2
  call void @store_in_alist(i64* %19, i64 %call23, i64 %add26)
  %22 = load i64*, i64** %alistptr.addr, align 8
  %call27 = call i64 @builtin_lisp_symbol(i32 813)
  %23 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %right_divider_width = getelementptr inbounds %struct.frame, %struct.frame* %23, i32 0, i32 52
  %24 = load i32, i32* %right_divider_width, align 4
  %conv28 = sext i32 %24 to i64
  %shl29 = shl i64 %conv28, 2
  %add30 = add i64 %shl29, 2
  call void @store_in_alist(i64* %22, i64 %call27, i64 %add30)
  %25 = load i64*, i64** %alistptr.addr, align 8
  %call31 = call i64 @builtin_lisp_symbol(i32 215)
  %26 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %bottom_divider_width = getelementptr inbounds %struct.frame, %struct.frame* %26, i32 0, i32 53
  %27 = load i32, i32* %bottom_divider_width, align 4
  %conv32 = sext i32 %27 to i64
  %shl33 = shl i64 %conv32, 2
  %add34 = add i64 %shl33, 2
  call void @store_in_alist(i64* %25, i64 %call31, i64 %add34)
  %28 = load i64*, i64** %alistptr.addr, align 8
  %call35 = call i64 @builtin_lisp_symbol(i32 608)
  %29 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_fringe_width = getelementptr inbounds %struct.frame, %struct.frame* %29, i32 0, i32 54
  %30 = load i32, i32* %left_fringe_width, align 4
  %conv36 = sext i32 %30 to i64
  %shl37 = shl i64 %conv36, 2
  %add38 = add i64 %shl37, 2
  call void @store_in_alist(i64* %28, i64 %call35, i64 %add38)
  %31 = load i64*, i64** %alistptr.addr, align 8
  %call39 = call i64 @builtin_lisp_symbol(i32 814)
  %32 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %right_fringe_width = getelementptr inbounds %struct.frame, %struct.frame* %32, i32 0, i32 55
  %33 = load i32, i32* %right_fringe_width, align 4
  %conv40 = sext i32 %33 to i64
  %shl41 = shl i64 %conv40, 2
  %add42 = add i64 %shl41, 2
  call void @store_in_alist(i64* %31, i64 %call39, i64 %add42)
  %34 = load i64*, i64** %alistptr.addr, align 8
  %call43 = call i64 @builtin_lisp_symbol(i32 835)
  %35 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %vertical_scroll_bar_type = getelementptr inbounds %struct.frame, %struct.frame* %35, i32 0, i32 26
  %36 = bitcast i48* %vertical_scroll_bar_type to i64*
  %bf.load = load i64, i64* %36, align 8
  %bf.lshr = lshr i64 %bf.load, 30
  %bf.clear = and i64 %bf.lshr, 3
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp44 = icmp ne i32 %bf.cast, 0
  br i1 %cmp44, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end.18
  br label %cond.end.55

cond.false:                                       ; preds = %if.end.18
  %37 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_width = getelementptr inbounds %struct.frame, %struct.frame* %37, i32 0, i32 69
  %38 = load i32, i32* %config_scroll_bar_width, align 4
  %cmp46 = icmp sgt i32 %38, 0
  br i1 %cmp46, label %cond.true.48, label %cond.false.53

cond.true.48:                                     ; preds = %cond.false
  %39 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_width49 = getelementptr inbounds %struct.frame, %struct.frame* %39, i32 0, i32 69
  %40 = load i32, i32* %config_scroll_bar_width49, align 4
  %conv50 = sext i32 %40 to i64
  %shl51 = shl i64 %conv50, 2
  %add52 = add i64 %shl51, 2
  br label %cond.end

cond.false.53:                                    ; preds = %cond.false
  %call54 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false.53, %cond.true.48
  %cond = phi i64 [ %add52, %cond.true.48 ], [ %call54, %cond.false.53 ]
  br label %cond.end.55

cond.end.55:                                      ; preds = %cond.end, %cond.true
  %cond56 = phi i64 [ 2, %cond.true ], [ %cond, %cond.end ]
  call void @store_in_alist(i64* %34, i64 %call43, i64 %cond56)
  %41 = load i64*, i64** %alistptr.addr, align 8
  %call57 = call i64 @builtin_lisp_symbol(i32 833)
  %42 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %horizontal_scroll_bars = getelementptr inbounds %struct.frame, %struct.frame* %42, i32 0, i32 26
  %43 = bitcast i48* %horizontal_scroll_bars to i64*
  %bf.load58 = load i64, i64* %43, align 8
  %bf.lshr59 = lshr i64 %bf.load58, 32
  %bf.clear60 = and i64 %bf.lshr59, 1
  %bf.cast61 = trunc i64 %bf.clear60 to i1
  br i1 %bf.cast61, label %cond.false.63, label %cond.true.62

cond.true.62:                                     ; preds = %cond.end.55
  br label %cond.end.75

cond.false.63:                                    ; preds = %cond.end.55
  %44 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %44, i32 0, i32 71
  %45 = load i32, i32* %config_scroll_bar_height, align 4
  %cmp64 = icmp sgt i32 %45, 0
  br i1 %cmp64, label %cond.true.66, label %cond.false.71

cond.true.66:                                     ; preds = %cond.false.63
  %46 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_height67 = getelementptr inbounds %struct.frame, %struct.frame* %46, i32 0, i32 71
  %47 = load i32, i32* %config_scroll_bar_height67, align 4
  %conv68 = sext i32 %47 to i64
  %shl69 = shl i64 %conv68, 2
  %add70 = add i64 %shl69, 2
  br label %cond.end.73

cond.false.71:                                    ; preds = %cond.false.63
  %call72 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.73

cond.end.73:                                      ; preds = %cond.false.71, %cond.true.66
  %cond74 = phi i64 [ %add70, %cond.true.66 ], [ %call72, %cond.false.71 ]
  br label %cond.end.75

cond.end.75:                                      ; preds = %cond.end.73, %cond.true.62
  %cond76 = phi i64 [ 2, %cond.true.62 ], [ %cond74, %cond.end.73 ]
  call void @store_in_alist(i64* %41, i64 %call57, i64 %cond76)
  %48 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %48, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %49 = load %struct.x_output*, %struct.x_output** %x, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %49, i32 0, i32 9
  %50 = load i64, i64* %window_desc, align 8
  store i64 %50, i64* %w, align 8
  %51 = load i64*, i64** %alistptr.addr, align 8
  %call77 = call i64 @builtin_lisp_symbol(i32 1026)
  %arraydecay = getelementptr inbounds [21 x i8], [21 x i8]* %buf, i32 0, i32 0
  %52 = load i64, i64* %w, align 8
  %call78 = call i64 (i8*, i8*, ...) @make_formatted_string(i8* %arraydecay, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.68, i32 0, i32 0), i64 %52)
  call void @store_in_alist(i64* %51, i64 %call77, i64 %call78)
  %53 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data79 = getelementptr inbounds %struct.frame, %struct.frame* %53, i32 0, i32 62
  %x80 = bitcast %union.output_data* %output_data79 to %struct.x_output**
  %54 = load %struct.x_output*, %struct.x_output** %x80, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %54, i32 0, i32 12
  %55 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  %tobool = icmp ne %struct._GtkWidget* %55, null
  br i1 %tobool, label %cond.true.81, label %cond.false.100

cond.true.81:                                     ; preds = %cond.end.75
  %56 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data82 = getelementptr inbounds %struct.frame, %struct.frame* %56, i32 0, i32 62
  %x83 = bitcast %union.output_data* %output_data82 to %struct.x_output**
  %57 = load %struct.x_output*, %struct.x_output** %x83, align 8
  %widget84 = getelementptr inbounds %struct.x_output, %struct.x_output* %57, i32 0, i32 12
  %58 = load %struct._GtkWidget*, %struct._GtkWidget** %widget84, align 8
  %tobool85 = icmp ne %struct._GtkWidget* %58, null
  br i1 %tobool85, label %land.lhs.true, label %cond.false.97

land.lhs.true:                                    ; preds = %cond.true.81
  %59 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data86 = getelementptr inbounds %struct.frame, %struct.frame* %59, i32 0, i32 62
  %x87 = bitcast %union.output_data* %output_data86 to %struct.x_output**
  %60 = load %struct.x_output*, %struct.x_output** %x87, align 8
  %widget88 = getelementptr inbounds %struct.x_output, %struct.x_output* %60, i32 0, i32 12
  %61 = load %struct._GtkWidget*, %struct._GtkWidget** %widget88, align 8
  %call89 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %61)
  %tobool90 = icmp ne %struct._GdkDrawable* %call89, null
  br i1 %tobool90, label %cond.true.91, label %cond.false.97

cond.true.91:                                     ; preds = %land.lhs.true
  %62 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data92 = getelementptr inbounds %struct.frame, %struct.frame* %62, i32 0, i32 62
  %x93 = bitcast %union.output_data* %output_data92 to %struct.x_output**
  %63 = load %struct.x_output*, %struct.x_output** %x93, align 8
  %widget94 = getelementptr inbounds %struct.x_output, %struct.x_output* %63, i32 0, i32 12
  %64 = load %struct._GtkWidget*, %struct._GtkWidget** %widget94, align 8
  %call95 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %64)
  %call96 = call i64 @gdk_x11_drawable_get_xid(%struct._GdkDrawable* %call95)
  br label %cond.end.98

cond.false.97:                                    ; preds = %land.lhs.true, %cond.true.81
  br label %cond.end.98

cond.end.98:                                      ; preds = %cond.false.97, %cond.true.91
  %cond99 = phi i64 [ %call96, %cond.true.91 ], [ 0, %cond.false.97 ]
  br label %cond.end.104

cond.false.100:                                   ; preds = %cond.end.75
  %65 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data101 = getelementptr inbounds %struct.frame, %struct.frame* %65, i32 0, i32 62
  %x102 = bitcast %union.output_data* %output_data101 to %struct.x_output**
  %66 = load %struct.x_output*, %struct.x_output** %x102, align 8
  %window_desc103 = getelementptr inbounds %struct.x_output, %struct.x_output* %66, i32 0, i32 9
  %67 = load i64, i64* %window_desc103, align 8
  br label %cond.end.104

cond.end.104:                                     ; preds = %cond.false.100, %cond.end.98
  %cond105 = phi i64 [ %cond99, %cond.end.98 ], [ %67, %cond.false.100 ]
  store i64 %cond105, i64* %w, align 8
  %68 = load i64*, i64** %alistptr.addr, align 8
  %call106 = call i64 @builtin_lisp_symbol(i32 727)
  %arraydecay107 = getelementptr inbounds [21 x i8], [21 x i8]* %buf, i32 0, i32 0
  %69 = load i64, i64* %w, align 8
  %call108 = call i64 (i8*, i8*, ...) @make_formatted_string(i8* %arraydecay107, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.68, i32 0, i32 0), i64 %69)
  call void @store_in_alist(i64* %68, i64 %call106, i64 %call108)
  %70 = load i64*, i64** %alistptr.addr, align 8
  %call109 = call i64 @builtin_lisp_symbol(i32 530)
  %71 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %icon_name = getelementptr inbounds %struct.frame, %struct.frame* %71, i32 0, i32 2
  %72 = load i64, i64* %icon_name, align 8
  call void @store_in_alist(i64* %70, i64 %call109, i64 %72)
  %73 = load i64*, i64** %alistptr.addr, align 8
  %call110 = call i64 @builtin_lisp_symbol(i32 1004)
  %74 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %visible = getelementptr inbounds %struct.frame, %struct.frame* %74, i32 0, i32 26
  %75 = bitcast i48* %visible to i64*
  %bf.load111 = load i64, i64* %75, align 8
  %bf.lshr112 = lshr i64 %bf.load111, 10
  %bf.clear113 = and i64 %bf.lshr112, 3
  %bf.cast114 = trunc i64 %bf.clear113 to i32
  %tobool115 = icmp ne i32 %bf.cast114, 0
  br i1 %tobool115, label %cond.true.116, label %cond.false.118

cond.true.116:                                    ; preds = %cond.end.104
  %call117 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.130

cond.false.118:                                   ; preds = %cond.end.104
  %76 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %iconified = getelementptr inbounds %struct.frame, %struct.frame* %76, i32 0, i32 26
  %77 = bitcast i48* %iconified to i64*
  %bf.load119 = load i64, i64* %77, align 8
  %bf.lshr120 = lshr i64 %bf.load119, 12
  %bf.clear121 = and i64 %bf.lshr120, 1
  %bf.cast122 = trunc i64 %bf.clear121 to i1
  br i1 %bf.cast122, label %cond.true.124, label %cond.false.126

cond.true.124:                                    ; preds = %cond.false.118
  %call125 = call i64 @builtin_lisp_symbol(i32 528)
  br label %cond.end.128

cond.false.126:                                   ; preds = %cond.false.118
  %call127 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.128

cond.end.128:                                     ; preds = %cond.false.126, %cond.true.124
  %cond129 = phi i64 [ %call125, %cond.true.124 ], [ %call127, %cond.false.126 ]
  br label %cond.end.130

cond.end.130:                                     ; preds = %cond.end.128, %cond.true.116
  %cond131 = phi i64 [ %call117, %cond.true.116 ], [ %cond129, %cond.end.128 ]
  call void @store_in_alist(i64* %73, i64 %call110, i64 %cond131)
  %78 = load i64*, i64** %alistptr.addr, align 8
  %call132 = call i64 @builtin_lisp_symbol(i32 344)
  %79 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data133 = getelementptr inbounds %struct.frame, %struct.frame* %79, i32 0, i32 62
  %x134 = bitcast %union.output_data* %output_data133 to %struct.x_output**
  %80 = load %struct.x_output*, %struct.x_output** %x134, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %80, i32 0, i32 44
  %81 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %name_list_element = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %81, i32 0, i32 4
  %82 = load i64, i64* %name_list_element, align 8
  %sub = sub nsw i64 %82, 3
  %83 = inttoptr i64 %sub to i8*
  %84 = bitcast i8* %83 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %84, i32 0, i32 0
  %85 = load i64, i64* %car, align 8
  call void @store_in_alist(i64* %78, i64 %call132, i64 %85)
  %86 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data135 = getelementptr inbounds %struct.frame, %struct.frame* %86, i32 0, i32 62
  %x136 = bitcast %union.output_data* %output_data135 to %struct.x_output**
  %87 = load %struct.x_output*, %struct.x_output** %x136, align 8
  %parent_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %87, i32 0, i32 11
  %88 = load i64, i64* %parent_desc, align 8
  %89 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data137 = getelementptr inbounds %struct.frame, %struct.frame* %89, i32 0, i32 62
  %x138 = bitcast %union.output_data* %output_data137 to %struct.x_output**
  %90 = load %struct.x_output*, %struct.x_output** %x138, align 8
  %display_info139 = getelementptr inbounds %struct.x_output, %struct.x_output* %90, i32 0, i32 44
  %91 = load %struct.x_display_info*, %struct.x_display_info** %display_info139, align 8
  %root_window = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %91, i32 0, i32 14
  %92 = load i64, i64* %root_window, align 8
  %cmp140 = icmp eq i64 %88, %92
  br i1 %cmp140, label %if.then.142, label %if.else.144

if.then.142:                                      ; preds = %cond.end.130
  %call143 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call143, i64* %tem, align 8
  br label %if.end.149

if.else.144:                                      ; preds = %cond.end.130
  %93 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data145 = getelementptr inbounds %struct.frame, %struct.frame* %93, i32 0, i32 62
  %x146 = bitcast %union.output_data* %output_data145 to %struct.x_output**
  %94 = load %struct.x_output*, %struct.x_output** %x146, align 8
  %parent_desc147 = getelementptr inbounds %struct.x_output, %struct.x_output* %94, i32 0, i32 11
  %95 = load i64, i64* %parent_desc147, align 8
  %call148 = call i64 @make_natnum(i64 %95)
  store i64 %call148, i64* %tem, align 8
  br label %if.end.149

if.end.149:                                       ; preds = %if.else.144, %if.then.142
  %96 = load i64*, i64** %alistptr.addr, align 8
  %call150 = call i64 @builtin_lisp_symbol(i32 391)
  %97 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %explicit_name = getelementptr inbounds %struct.frame, %struct.frame* %97, i32 0, i32 26
  %98 = bitcast i48* %explicit_name to i64*
  %bf.load151 = load i64, i64* %98, align 8
  %bf.lshr152 = lshr i64 %bf.load151, 18
  %bf.clear153 = and i64 %bf.lshr152, 1
  %bf.cast154 = trunc i64 %bf.clear153 to i1
  br i1 %bf.cast154, label %cond.true.156, label %cond.false.158

cond.true.156:                                    ; preds = %if.end.149
  %call157 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.160

cond.false.158:                                   ; preds = %if.end.149
  %call159 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.160

cond.end.160:                                     ; preds = %cond.false.158, %cond.true.156
  %cond161 = phi i64 [ %call157, %cond.true.156 ], [ %call159, %cond.false.158 ]
  call void @store_in_alist(i64* %96, i64 %call150, i64 %cond161)
  %99 = load i64*, i64** %alistptr.addr, align 8
  %call162 = call i64 @builtin_lisp_symbol(i32 742)
  %100 = load i64, i64* %tem, align 8
  call void @store_in_alist(i64* %99, i64 %call162, i64 %100)
  %101 = load i64*, i64** %alistptr.addr, align 8
  %call163 = call i64 @builtin_lisp_symbol(i32 924)
  %102 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_position = getelementptr inbounds %struct.frame, %struct.frame* %102, i32 0, i32 18
  %103 = load i64, i64* %tool_bar_position, align 8
  call void @store_in_alist(i64* %101, i64 %call163, i64 %103)
  ret void
}

declare i64 @make_natnum(i64) #1

declare void @CHECK_LIST(i64) #1

; Function Attrs: nounwind uwtable
define void @x_set_frame_parameters(%struct.frame* %f, i64 %alist) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %alist.addr = alloca i64, align 8
  %tail = alloca i64, align 8
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  %width_change = alloca i8, align 1
  %height_change = alloca i8, align 1
  %left = alloca i64, align 8
  %top = alloca i64, align 8
  %icon_left = alloca i64, align 8
  %icon_top = alloca i64, align 8
  %fullscreen = alloca i64, align 8
  %fullscreen_change = alloca i8, align 1
  %parms = alloca i64*, align 8
  %values = alloca i64*, align 8
  %i = alloca i64, align 8
  %p = alloca i64, align 8
  %left_no_change = alloca i8, align 1
  %top_no_change = alloca i8, align 1
  %icon_left_no_change = alloca i8, align 1
  %icon_top_no_change = alloca i8, align 1
  %sa_avail = alloca i64, align 8
  %sa_count = alloca i64, align 8
  %sa_must_free = alloca i8, align 1
  %alloca_nbytes = alloca i64, align 8
  %arg_ = alloca i64, align 8
  %elt = alloca i64, align 8
  %prop = alloca i64, align 8
  %val = alloca i64, align 8
  %param_index = alloca i64, align 8
  %old_value = alloca i64, align 8
  %prop2583 = alloca i64, align 8
  %val2584 = alloca i64, align 8
  %param_index2697 = alloca i64, align 8
  %old_value2698 = alloca i64, align 8
  %frame = alloca i64, align 8
  %leftpos = alloca i32, align 4
  %toppos = alloca i32, align 4
  %old_value3175 = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %alist, i64* %alist.addr, align 8
  store i8 0, i8* %width_change, align 1
  store i8 0, i8* %height_change, align 1
  store i8 0, i8* %fullscreen_change, align 1
  store i8 0, i8* %left_no_change, align 1
  store i8 0, i8* %top_no_change, align 1
  store i8 0, i8* %icon_left_no_change, align 1
  store i8 0, i8* %icon_top_no_change, align 1
  store i64 0, i64* %i, align 8
  %0 = load i64, i64* %alist.addr, align 8
  store i64 %0, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %tail, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %i, align 8
  %inc = add nsw i64 %2, 1
  store i64 %inc, i64* %i, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %3, 3
  %4 = inttoptr i64 %sub to i8*
  %5 = bitcast i8* %4 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %5, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %6 = load i64, i64* %cdr, align 8
  store i64 %6, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i64 16384, i64* %sa_avail, align 8
  %call = call i64 @SPECPDL_INDEX()
  store i64 %call, i64* %sa_count, align 8
  store i8 0, i8* %sa_must_free, align 1
  br label %do.body

do.body:                                          ; preds = %for.end
  br i1 false, label %cond.true, label %cond.false.543

cond.true:                                        ; preds = %do.body
  br i1 false, label %cond.true.2, label %cond.false.294

cond.true.2:                                      ; preds = %cond.true
  %7 = load i64, i64* %i, align 8
  %mul = mul nsw i64 2, %7
  %conv3 = trunc i64 %mul to i8
  %conv4 = sext i8 %conv3 to i32
  %add = add nsw i32 0, %conv4
  %mul5 = mul nsw i32 0, %add
  %sub6 = sub nsw i32 %mul5, 1
  %cmp7 = icmp slt i32 %sub6, 0
  br i1 %cmp7, label %cond.true.9, label %cond.false

cond.true.9:                                      ; preds = %cond.true.2
  %8 = load i64, i64* %i, align 8
  %mul10 = mul nsw i64 2, %8
  %conv11 = trunc i64 %mul10 to i8
  %conv12 = sext i8 %conv11 to i32
  %add13 = add nsw i32 0, %conv12
  %mul14 = mul nsw i32 0, %add13
  %add15 = add nsw i32 %mul14, 0
  %neg = xor i32 %add15, -1
  %cmp16 = icmp eq i32 %neg, -1
  %conv17 = zext i1 %cmp16 to i32
  %sub18 = sub nsw i32 0, %conv17
  %9 = load i64, i64* %i, align 8
  %mul19 = mul nsw i64 2, %9
  %conv20 = trunc i64 %mul19 to i8
  %conv21 = sext i8 %conv20 to i32
  %add22 = add nsw i32 0, %conv21
  %mul23 = mul nsw i32 0, %add22
  %add24 = add nsw i32 %mul23, 1
  %shl = shl i32 %add24, 30
  %sub25 = sub nsw i32 %shl, 1
  %mul26 = mul nsw i32 %sub25, 2
  %add27 = add nsw i32 %mul26, 1
  %sub28 = sub nsw i32 %sub18, %add27
  br label %cond.end

cond.false:                                       ; preds = %cond.true.2
  %10 = load i64, i64* %i, align 8
  %mul29 = mul nsw i64 2, %10
  %conv30 = trunc i64 %mul29 to i8
  %conv31 = sext i8 %conv30 to i32
  %add32 = add nsw i32 0, %conv31
  %mul33 = mul nsw i32 0, %add32
  %add34 = add nsw i32 %mul33, 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.9
  %cond = phi i32 [ %sub28, %cond.true.9 ], [ %add34, %cond.false ]
  %cmp35 = icmp eq i32 %cond, 0
  br i1 %cmp35, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %cond.end
  %11 = load i64, i64* %i, align 8
  %mul37 = mul nsw i64 2, %11
  %conv38 = trunc i64 %mul37 to i8
  %conv39 = sext i8 %conv38 to i32
  %cmp40 = icmp slt i32 %conv39, 0
  br i1 %cmp40, label %cond.true.242, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %cond.end
  br i1 false, label %cond.true.42, label %cond.false.130

cond.true.42:                                     ; preds = %lor.lhs.false
  %12 = load i64, i64* %i, align 8
  %mul43 = mul nsw i64 2, %12
  %conv44 = trunc i64 %mul43 to i8
  %conv45 = sext i8 %conv44 to i32
  %cmp46 = icmp slt i32 %conv45, 0
  br i1 %cmp46, label %cond.true.48, label %cond.false.82

cond.true.48:                                     ; preds = %cond.true.42
  %13 = load i64, i64* %i, align 8
  %mul49 = mul nsw i64 2, %13
  %conv50 = trunc i64 %mul49 to i8
  %conv51 = sext i8 %conv50 to i32
  %14 = load i64, i64* %i, align 8
  %mul52 = mul nsw i64 2, %14
  %conv53 = trunc i64 %mul52 to i8
  %conv54 = sext i8 %conv53 to i32
  %add55 = add nsw i32 0, %conv54
  %mul56 = mul nsw i32 0, %add55
  %sub57 = sub nsw i32 %mul56, 1
  %cmp58 = icmp slt i32 %sub57, 0
  br i1 %cmp58, label %cond.true.60, label %cond.false.71

cond.true.60:                                     ; preds = %cond.true.48
  %15 = load i64, i64* %i, align 8
  %mul61 = mul nsw i64 2, %15
  %conv62 = trunc i64 %mul61 to i8
  %conv63 = sext i8 %conv62 to i32
  %add64 = add nsw i32 0, %conv63
  %mul65 = mul nsw i32 0, %add64
  %add66 = add nsw i32 %mul65, 1
  %shl67 = shl i32 %add66, 30
  %sub68 = sub nsw i32 %shl67, 1
  %mul69 = mul nsw i32 %sub68, 2
  %add70 = add nsw i32 %mul69, 1
  br label %cond.end.78

cond.false.71:                                    ; preds = %cond.true.48
  %16 = load i64, i64* %i, align 8
  %mul72 = mul nsw i64 2, %16
  %conv73 = trunc i64 %mul72 to i8
  %conv74 = sext i8 %conv73 to i32
  %add75 = add nsw i32 0, %conv74
  %mul76 = mul nsw i32 0, %add75
  %sub77 = sub nsw i32 %mul76, 1
  br label %cond.end.78

cond.end.78:                                      ; preds = %cond.false.71, %cond.true.60
  %cond79 = phi i32 [ %add70, %cond.true.60 ], [ %sub77, %cond.false.71 ]
  %div = sdiv i32 %cond79, 8
  %cmp80 = icmp slt i32 %conv51, %div
  br i1 %cmp80, label %cond.true.242, label %lor.lhs.false.219

cond.false.82:                                    ; preds = %cond.true.42
  br i1 false, label %cond.true.83, label %cond.false.84

cond.true.83:                                     ; preds = %cond.false.82
  br i1 false, label %cond.true.242, label %lor.lhs.false.219

cond.false.84:                                    ; preds = %cond.false.82
  %17 = load i64, i64* %i, align 8
  %mul85 = mul nsw i64 2, %17
  %conv86 = trunc i64 %mul85 to i8
  %conv87 = sext i8 %conv86 to i32
  %add88 = add nsw i32 0, %conv87
  %mul89 = mul nsw i32 0, %add88
  %sub90 = sub nsw i32 %mul89, 1
  %cmp91 = icmp slt i32 %sub90, 0
  br i1 %cmp91, label %cond.true.93, label %cond.false.115

cond.true.93:                                     ; preds = %cond.false.84
  %18 = load i64, i64* %i, align 8
  %mul94 = mul nsw i64 2, %18
  %conv95 = trunc i64 %mul94 to i8
  %conv96 = sext i8 %conv95 to i32
  %add97 = add nsw i32 0, %conv96
  %mul98 = mul nsw i32 0, %add97
  %add99 = add nsw i32 %mul98, 0
  %neg100 = xor i32 %add99, -1
  %cmp101 = icmp eq i32 %neg100, -1
  %conv102 = zext i1 %cmp101 to i32
  %sub103 = sub nsw i32 0, %conv102
  %19 = load i64, i64* %i, align 8
  %mul104 = mul nsw i64 2, %19
  %conv105 = trunc i64 %mul104 to i8
  %conv106 = sext i8 %conv105 to i32
  %add107 = add nsw i32 0, %conv106
  %mul108 = mul nsw i32 0, %add107
  %add109 = add nsw i32 %mul108, 1
  %shl110 = shl i32 %add109, 30
  %sub111 = sub nsw i32 %shl110, 1
  %mul112 = mul nsw i32 %sub111, 2
  %add113 = add nsw i32 %mul112, 1
  %sub114 = sub nsw i32 %sub103, %add113
  br label %cond.end.122

cond.false.115:                                   ; preds = %cond.false.84
  %20 = load i64, i64* %i, align 8
  %mul116 = mul nsw i64 2, %20
  %conv117 = trunc i64 %mul116 to i8
  %conv118 = sext i8 %conv117 to i32
  %add119 = add nsw i32 0, %conv118
  %mul120 = mul nsw i32 0, %add119
  %add121 = add nsw i32 %mul120, 0
  br label %cond.end.122

cond.end.122:                                     ; preds = %cond.false.115, %cond.true.93
  %cond123 = phi i32 [ %sub114, %cond.true.93 ], [ %add121, %cond.false.115 ]
  %div124 = sdiv i32 %cond123, 8
  %21 = load i64, i64* %i, align 8
  %mul125 = mul nsw i64 2, %21
  %conv126 = trunc i64 %mul125 to i8
  %conv127 = sext i8 %conv126 to i32
  %cmp128 = icmp slt i32 %div124, %conv127
  br i1 %cmp128, label %cond.true.242, label %lor.lhs.false.219

cond.false.130:                                   ; preds = %lor.lhs.false
  br i1 false, label %cond.true.131, label %cond.false.132

cond.true.131:                                    ; preds = %cond.false.130
  br i1 false, label %cond.true.242, label %lor.lhs.false.219

cond.false.132:                                   ; preds = %cond.false.130
  %22 = load i64, i64* %i, align 8
  %mul133 = mul nsw i64 2, %22
  %conv134 = trunc i64 %mul133 to i8
  %conv135 = sext i8 %conv134 to i32
  %cmp136 = icmp slt i32 %conv135, 0
  br i1 %cmp136, label %cond.true.138, label %cond.false.184

cond.true.138:                                    ; preds = %cond.false.132
  %23 = load i64, i64* %i, align 8
  %mul139 = mul nsw i64 2, %23
  %conv140 = trunc i64 %mul139 to i8
  %conv141 = sext i8 %conv140 to i32
  %24 = load i64, i64* %i, align 8
  %mul142 = mul nsw i64 2, %24
  %conv143 = trunc i64 %mul142 to i8
  %conv144 = sext i8 %conv143 to i32
  %add145 = add nsw i32 0, %conv144
  %mul146 = mul nsw i32 0, %add145
  %sub147 = sub nsw i32 %mul146, 1
  %cmp148 = icmp slt i32 %sub147, 0
  br i1 %cmp148, label %cond.true.150, label %cond.false.172

cond.true.150:                                    ; preds = %cond.true.138
  %25 = load i64, i64* %i, align 8
  %mul151 = mul nsw i64 2, %25
  %conv152 = trunc i64 %mul151 to i8
  %conv153 = sext i8 %conv152 to i32
  %add154 = add nsw i32 0, %conv153
  %mul155 = mul nsw i32 0, %add154
  %add156 = add nsw i32 %mul155, 0
  %neg157 = xor i32 %add156, -1
  %cmp158 = icmp eq i32 %neg157, -1
  %conv159 = zext i1 %cmp158 to i32
  %sub160 = sub nsw i32 0, %conv159
  %26 = load i64, i64* %i, align 8
  %mul161 = mul nsw i64 2, %26
  %conv162 = trunc i64 %mul161 to i8
  %conv163 = sext i8 %conv162 to i32
  %add164 = add nsw i32 0, %conv163
  %mul165 = mul nsw i32 0, %add164
  %add166 = add nsw i32 %mul165, 1
  %shl167 = shl i32 %add166, 30
  %sub168 = sub nsw i32 %shl167, 1
  %mul169 = mul nsw i32 %sub168, 2
  %add170 = add nsw i32 %mul169, 1
  %sub171 = sub nsw i32 %sub160, %add170
  br label %cond.end.179

cond.false.172:                                   ; preds = %cond.true.138
  %27 = load i64, i64* %i, align 8
  %mul173 = mul nsw i64 2, %27
  %conv174 = trunc i64 %mul173 to i8
  %conv175 = sext i8 %conv174 to i32
  %add176 = add nsw i32 0, %conv175
  %mul177 = mul nsw i32 0, %add176
  %add178 = add nsw i32 %mul177, 0
  br label %cond.end.179

cond.end.179:                                     ; preds = %cond.false.172, %cond.true.150
  %cond180 = phi i32 [ %sub171, %cond.true.150 ], [ %add178, %cond.false.172 ]
  %div181 = sdiv i32 %cond180, 8
  %cmp182 = icmp slt i32 %conv141, %div181
  br i1 %cmp182, label %cond.true.242, label %lor.lhs.false.219

cond.false.184:                                   ; preds = %cond.false.132
  %28 = load i64, i64* %i, align 8
  %mul185 = mul nsw i64 2, %28
  %conv186 = trunc i64 %mul185 to i8
  %conv187 = sext i8 %conv186 to i32
  %add188 = add nsw i32 0, %conv187
  %mul189 = mul nsw i32 0, %add188
  %sub190 = sub nsw i32 %mul189, 1
  %cmp191 = icmp slt i32 %sub190, 0
  br i1 %cmp191, label %cond.true.193, label %cond.false.204

cond.true.193:                                    ; preds = %cond.false.184
  %29 = load i64, i64* %i, align 8
  %mul194 = mul nsw i64 2, %29
  %conv195 = trunc i64 %mul194 to i8
  %conv196 = sext i8 %conv195 to i32
  %add197 = add nsw i32 0, %conv196
  %mul198 = mul nsw i32 0, %add197
  %add199 = add nsw i32 %mul198, 1
  %shl200 = shl i32 %add199, 30
  %sub201 = sub nsw i32 %shl200, 1
  %mul202 = mul nsw i32 %sub201, 2
  %add203 = add nsw i32 %mul202, 1
  br label %cond.end.211

cond.false.204:                                   ; preds = %cond.false.184
  %30 = load i64, i64* %i, align 8
  %mul205 = mul nsw i64 2, %30
  %conv206 = trunc i64 %mul205 to i8
  %conv207 = sext i8 %conv206 to i32
  %add208 = add nsw i32 0, %conv207
  %mul209 = mul nsw i32 0, %add208
  %sub210 = sub nsw i32 %mul209, 1
  br label %cond.end.211

cond.end.211:                                     ; preds = %cond.false.204, %cond.true.193
  %cond212 = phi i32 [ %add203, %cond.true.193 ], [ %sub210, %cond.false.204 ]
  %div213 = sdiv i32 %cond212, 8
  %31 = load i64, i64* %i, align 8
  %mul214 = mul nsw i64 2, %31
  %conv215 = trunc i64 %mul214 to i8
  %conv216 = sext i8 %conv215 to i32
  %cmp217 = icmp slt i32 %div213, %conv216
  br i1 %cmp217, label %cond.true.242, label %lor.lhs.false.219

lor.lhs.false.219:                                ; preds = %cond.end.211, %cond.end.179, %cond.true.131, %cond.end.122, %cond.true.83, %cond.end.78
  %32 = load i64, i64* %i, align 8
  %mul220 = mul nsw i64 2, %32
  %conv221 = trunc i64 %mul220 to i8
  %conv222 = sext i8 %conv221 to i32
  %mul223 = mul nsw i32 %conv222, 8
  %mul224 = mul nsw i32 0, %mul223
  %sub225 = sub nsw i32 %mul224, 1
  %cmp226 = icmp slt i32 %sub225, 0
  br i1 %cmp226, label %land.lhs.true.228, label %lor.lhs.false.235

land.lhs.true.228:                                ; preds = %lor.lhs.false.219
  %33 = load i64, i64* %i, align 8
  %mul229 = mul nsw i64 2, %33
  %conv230 = trunc i64 %mul229 to i8
  %conv231 = sext i8 %conv230 to i32
  %mul232 = mul nsw i32 %conv231, 8
  %cmp233 = icmp slt i32 %mul232, -128
  br i1 %cmp233, label %cond.true.242, label %lor.lhs.false.235

lor.lhs.false.235:                                ; preds = %land.lhs.true.228, %lor.lhs.false.219
  %34 = load i64, i64* %i, align 8
  %mul236 = mul nsw i64 2, %34
  %conv237 = trunc i64 %mul236 to i8
  %conv238 = sext i8 %conv237 to i32
  %mul239 = mul nsw i32 %conv238, 8
  %cmp240 = icmp slt i32 127, %mul239
  br i1 %cmp240, label %cond.true.242, label %cond.false.268

cond.true.242:                                    ; preds = %lor.lhs.false.235, %land.lhs.true.228, %cond.end.211, %cond.end.179, %cond.true.131, %cond.end.122, %cond.true.83, %cond.end.78, %land.lhs.true
  %35 = load i64, i64* %i, align 8
  %mul243 = mul nsw i64 2, %35
  %conv244 = trunc i64 %mul243 to i8
  %conv245 = zext i8 %conv244 to i32
  %mul246 = mul nsw i32 %conv245, 8
  %cmp247 = icmp sle i32 %mul246, 127
  br i1 %cmp247, label %cond.true.249, label %cond.false.256

cond.true.249:                                    ; preds = %cond.true.242
  %36 = load i64, i64* %i, align 8
  %mul250 = mul nsw i64 2, %36
  %conv251 = trunc i64 %mul250 to i8
  %conv252 = zext i8 %conv251 to i32
  %mul253 = mul nsw i32 %conv252, 8
  %conv254 = trunc i32 %mul253 to i8
  %conv255 = sext i8 %conv254 to i32
  br label %cond.end.265

cond.false.256:                                   ; preds = %cond.true.242
  %37 = load i64, i64* %i, align 8
  %mul257 = mul nsw i64 2, %37
  %conv258 = trunc i64 %mul257 to i8
  %conv259 = zext i8 %conv258 to i32
  %mul260 = mul nsw i32 %conv259, 8
  %sub261 = sub nsw i32 %mul260, -128
  %conv262 = trunc i32 %sub261 to i8
  %conv263 = sext i8 %conv262 to i32
  %add264 = add nsw i32 %conv263, -128
  br label %cond.end.265

cond.end.265:                                     ; preds = %cond.false.256, %cond.true.249
  %cond266 = phi i32 [ %conv255, %cond.true.249 ], [ %add264, %cond.false.256 ]
  %conv267 = sext i32 %cond266 to i64
  store i64 %conv267, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2504

cond.false.268:                                   ; preds = %lor.lhs.false.235
  %38 = load i64, i64* %i, align 8
  %mul269 = mul nsw i64 2, %38
  %conv270 = trunc i64 %mul269 to i8
  %conv271 = zext i8 %conv270 to i32
  %mul272 = mul nsw i32 %conv271, 8
  %cmp273 = icmp sle i32 %mul272, 127
  br i1 %cmp273, label %cond.true.275, label %cond.false.282

cond.true.275:                                    ; preds = %cond.false.268
  %39 = load i64, i64* %i, align 8
  %mul276 = mul nsw i64 2, %39
  %conv277 = trunc i64 %mul276 to i8
  %conv278 = zext i8 %conv277 to i32
  %mul279 = mul nsw i32 %conv278, 8
  %conv280 = trunc i32 %mul279 to i8
  %conv281 = sext i8 %conv280 to i32
  br label %cond.end.291

cond.false.282:                                   ; preds = %cond.false.268
  %40 = load i64, i64* %i, align 8
  %mul283 = mul nsw i64 2, %40
  %conv284 = trunc i64 %mul283 to i8
  %conv285 = zext i8 %conv284 to i32
  %mul286 = mul nsw i32 %conv285, 8
  %sub287 = sub nsw i32 %mul286, -128
  %conv288 = trunc i32 %sub287 to i8
  %conv289 = sext i8 %conv288 to i32
  %add290 = add nsw i32 %conv289, -128
  br label %cond.end.291

cond.end.291:                                     ; preds = %cond.false.282, %cond.true.275
  %cond292 = phi i32 [ %conv281, %cond.true.275 ], [ %add290, %cond.false.282 ]
  %conv293 = sext i32 %cond292 to i64
  store i64 %conv293, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2504

cond.false.294:                                   ; preds = %cond.true
  %41 = load i64, i64* %i, align 8
  %mul295 = mul nsw i64 2, %41
  %add296 = add nsw i64 0, %mul295
  %mul297 = mul nsw i64 0, %add296
  %sub298 = sub nsw i64 %mul297, 1
  %cmp299 = icmp slt i64 %sub298, 0
  br i1 %cmp299, label %cond.true.301, label %cond.false.320

cond.true.301:                                    ; preds = %cond.false.294
  %42 = load i64, i64* %i, align 8
  %mul302 = mul nsw i64 2, %42
  %add303 = add nsw i64 0, %mul302
  %mul304 = mul nsw i64 0, %add303
  %add305 = add nsw i64 %mul304, 0
  %neg306 = xor i64 %add305, -1
  %cmp307 = icmp eq i64 %neg306, -1
  %conv308 = zext i1 %cmp307 to i32
  %sub309 = sub nsw i32 0, %conv308
  %conv310 = sext i32 %sub309 to i64
  %43 = load i64, i64* %i, align 8
  %mul311 = mul nsw i64 2, %43
  %add312 = add nsw i64 0, %mul311
  %mul313 = mul nsw i64 0, %add312
  %add314 = add nsw i64 %mul313, 1
  %shl315 = shl i64 %add314, 62
  %sub316 = sub nsw i64 %shl315, 1
  %mul317 = mul nsw i64 %sub316, 2
  %add318 = add nsw i64 %mul317, 1
  %sub319 = sub nsw i64 %conv310, %add318
  br label %cond.end.325

cond.false.320:                                   ; preds = %cond.false.294
  %44 = load i64, i64* %i, align 8
  %mul321 = mul nsw i64 2, %44
  %add322 = add nsw i64 0, %mul321
  %mul323 = mul nsw i64 0, %add322
  %add324 = add nsw i64 %mul323, 0
  br label %cond.end.325

cond.end.325:                                     ; preds = %cond.false.320, %cond.true.301
  %cond326 = phi i64 [ %sub319, %cond.true.301 ], [ %add324, %cond.false.320 ]
  %cmp327 = icmp eq i64 %cond326, 0
  br i1 %cmp327, label %land.lhs.true.329, label %lor.lhs.false.333

land.lhs.true.329:                                ; preds = %cond.end.325
  %45 = load i64, i64* %i, align 8
  %mul330 = mul nsw i64 2, %45
  %cmp331 = icmp slt i64 %mul330, 0
  br i1 %cmp331, label %cond.true.491, label %lor.lhs.false.333

lor.lhs.false.333:                                ; preds = %land.lhs.true.329, %cond.end.325
  br i1 false, label %cond.true.334, label %cond.false.404

cond.true.334:                                    ; preds = %lor.lhs.false.333
  %46 = load i64, i64* %i, align 8
  %mul335 = mul nsw i64 2, %46
  %cmp336 = icmp slt i64 %mul335, 0
  br i1 %cmp336, label %cond.true.338, label %cond.false.365

cond.true.338:                                    ; preds = %cond.true.334
  %47 = load i64, i64* %i, align 8
  %mul339 = mul nsw i64 2, %47
  %48 = load i64, i64* %i, align 8
  %mul340 = mul nsw i64 2, %48
  %add341 = add nsw i64 0, %mul340
  %mul342 = mul nsw i64 0, %add341
  %sub343 = sub nsw i64 %mul342, 1
  %cmp344 = icmp slt i64 %sub343, 0
  br i1 %cmp344, label %cond.true.346, label %cond.false.355

cond.true.346:                                    ; preds = %cond.true.338
  %49 = load i64, i64* %i, align 8
  %mul347 = mul nsw i64 2, %49
  %add348 = add nsw i64 0, %mul347
  %mul349 = mul nsw i64 0, %add348
  %add350 = add nsw i64 %mul349, 1
  %shl351 = shl i64 %add350, 62
  %sub352 = sub nsw i64 %shl351, 1
  %mul353 = mul nsw i64 %sub352, 2
  %add354 = add nsw i64 %mul353, 1
  br label %cond.end.360

cond.false.355:                                   ; preds = %cond.true.338
  %50 = load i64, i64* %i, align 8
  %mul356 = mul nsw i64 2, %50
  %add357 = add nsw i64 0, %mul356
  %mul358 = mul nsw i64 0, %add357
  %sub359 = sub nsw i64 %mul358, 1
  br label %cond.end.360

cond.end.360:                                     ; preds = %cond.false.355, %cond.true.346
  %cond361 = phi i64 [ %add354, %cond.true.346 ], [ %sub359, %cond.false.355 ]
  %div362 = sdiv i64 %cond361, 8
  %cmp363 = icmp slt i64 %mul339, %div362
  br i1 %cmp363, label %cond.true.491, label %lor.lhs.false.474

cond.false.365:                                   ; preds = %cond.true.334
  br i1 false, label %cond.true.366, label %cond.false.367

cond.true.366:                                    ; preds = %cond.false.365
  br i1 false, label %cond.true.491, label %lor.lhs.false.474

cond.false.367:                                   ; preds = %cond.false.365
  %51 = load i64, i64* %i, align 8
  %mul368 = mul nsw i64 2, %51
  %add369 = add nsw i64 0, %mul368
  %mul370 = mul nsw i64 0, %add369
  %sub371 = sub nsw i64 %mul370, 1
  %cmp372 = icmp slt i64 %sub371, 0
  br i1 %cmp372, label %cond.true.374, label %cond.false.393

cond.true.374:                                    ; preds = %cond.false.367
  %52 = load i64, i64* %i, align 8
  %mul375 = mul nsw i64 2, %52
  %add376 = add nsw i64 0, %mul375
  %mul377 = mul nsw i64 0, %add376
  %add378 = add nsw i64 %mul377, 0
  %neg379 = xor i64 %add378, -1
  %cmp380 = icmp eq i64 %neg379, -1
  %conv381 = zext i1 %cmp380 to i32
  %sub382 = sub nsw i32 0, %conv381
  %conv383 = sext i32 %sub382 to i64
  %53 = load i64, i64* %i, align 8
  %mul384 = mul nsw i64 2, %53
  %add385 = add nsw i64 0, %mul384
  %mul386 = mul nsw i64 0, %add385
  %add387 = add nsw i64 %mul386, 1
  %shl388 = shl i64 %add387, 62
  %sub389 = sub nsw i64 %shl388, 1
  %mul390 = mul nsw i64 %sub389, 2
  %add391 = add nsw i64 %mul390, 1
  %sub392 = sub nsw i64 %conv383, %add391
  br label %cond.end.398

cond.false.393:                                   ; preds = %cond.false.367
  %54 = load i64, i64* %i, align 8
  %mul394 = mul nsw i64 2, %54
  %add395 = add nsw i64 0, %mul394
  %mul396 = mul nsw i64 0, %add395
  %add397 = add nsw i64 %mul396, 0
  br label %cond.end.398

cond.end.398:                                     ; preds = %cond.false.393, %cond.true.374
  %cond399 = phi i64 [ %sub392, %cond.true.374 ], [ %add397, %cond.false.393 ]
  %div400 = sdiv i64 %cond399, 8
  %55 = load i64, i64* %i, align 8
  %mul401 = mul nsw i64 2, %55
  %cmp402 = icmp slt i64 %div400, %mul401
  br i1 %cmp402, label %cond.true.491, label %lor.lhs.false.474

cond.false.404:                                   ; preds = %lor.lhs.false.333
  br i1 false, label %cond.true.405, label %cond.false.406

cond.true.405:                                    ; preds = %cond.false.404
  br i1 false, label %cond.true.491, label %lor.lhs.false.474

cond.false.406:                                   ; preds = %cond.false.404
  %56 = load i64, i64* %i, align 8
  %mul407 = mul nsw i64 2, %56
  %cmp408 = icmp slt i64 %mul407, 0
  br i1 %cmp408, label %cond.true.410, label %cond.false.447

cond.true.410:                                    ; preds = %cond.false.406
  %57 = load i64, i64* %i, align 8
  %mul411 = mul nsw i64 2, %57
  %58 = load i64, i64* %i, align 8
  %mul412 = mul nsw i64 2, %58
  %add413 = add nsw i64 0, %mul412
  %mul414 = mul nsw i64 0, %add413
  %sub415 = sub nsw i64 %mul414, 1
  %cmp416 = icmp slt i64 %sub415, 0
  br i1 %cmp416, label %cond.true.418, label %cond.false.437

cond.true.418:                                    ; preds = %cond.true.410
  %59 = load i64, i64* %i, align 8
  %mul419 = mul nsw i64 2, %59
  %add420 = add nsw i64 0, %mul419
  %mul421 = mul nsw i64 0, %add420
  %add422 = add nsw i64 %mul421, 0
  %neg423 = xor i64 %add422, -1
  %cmp424 = icmp eq i64 %neg423, -1
  %conv425 = zext i1 %cmp424 to i32
  %sub426 = sub nsw i32 0, %conv425
  %conv427 = sext i32 %sub426 to i64
  %60 = load i64, i64* %i, align 8
  %mul428 = mul nsw i64 2, %60
  %add429 = add nsw i64 0, %mul428
  %mul430 = mul nsw i64 0, %add429
  %add431 = add nsw i64 %mul430, 1
  %shl432 = shl i64 %add431, 62
  %sub433 = sub nsw i64 %shl432, 1
  %mul434 = mul nsw i64 %sub433, 2
  %add435 = add nsw i64 %mul434, 1
  %sub436 = sub nsw i64 %conv427, %add435
  br label %cond.end.442

cond.false.437:                                   ; preds = %cond.true.410
  %61 = load i64, i64* %i, align 8
  %mul438 = mul nsw i64 2, %61
  %add439 = add nsw i64 0, %mul438
  %mul440 = mul nsw i64 0, %add439
  %add441 = add nsw i64 %mul440, 0
  br label %cond.end.442

cond.end.442:                                     ; preds = %cond.false.437, %cond.true.418
  %cond443 = phi i64 [ %sub436, %cond.true.418 ], [ %add441, %cond.false.437 ]
  %div444 = sdiv i64 %cond443, 8
  %cmp445 = icmp slt i64 %mul411, %div444
  br i1 %cmp445, label %cond.true.491, label %lor.lhs.false.474

cond.false.447:                                   ; preds = %cond.false.406
  %62 = load i64, i64* %i, align 8
  %mul448 = mul nsw i64 2, %62
  %add449 = add nsw i64 0, %mul448
  %mul450 = mul nsw i64 0, %add449
  %sub451 = sub nsw i64 %mul450, 1
  %cmp452 = icmp slt i64 %sub451, 0
  br i1 %cmp452, label %cond.true.454, label %cond.false.463

cond.true.454:                                    ; preds = %cond.false.447
  %63 = load i64, i64* %i, align 8
  %mul455 = mul nsw i64 2, %63
  %add456 = add nsw i64 0, %mul455
  %mul457 = mul nsw i64 0, %add456
  %add458 = add nsw i64 %mul457, 1
  %shl459 = shl i64 %add458, 62
  %sub460 = sub nsw i64 %shl459, 1
  %mul461 = mul nsw i64 %sub460, 2
  %add462 = add nsw i64 %mul461, 1
  br label %cond.end.468

cond.false.463:                                   ; preds = %cond.false.447
  %64 = load i64, i64* %i, align 8
  %mul464 = mul nsw i64 2, %64
  %add465 = add nsw i64 0, %mul464
  %mul466 = mul nsw i64 0, %add465
  %sub467 = sub nsw i64 %mul466, 1
  br label %cond.end.468

cond.end.468:                                     ; preds = %cond.false.463, %cond.true.454
  %cond469 = phi i64 [ %add462, %cond.true.454 ], [ %sub467, %cond.false.463 ]
  %div470 = sdiv i64 %cond469, 8
  %65 = load i64, i64* %i, align 8
  %mul471 = mul nsw i64 2, %65
  %cmp472 = icmp slt i64 %div470, %mul471
  br i1 %cmp472, label %cond.true.491, label %lor.lhs.false.474

lor.lhs.false.474:                                ; preds = %cond.end.468, %cond.end.442, %cond.true.405, %cond.end.398, %cond.true.366, %cond.end.360
  %66 = load i64, i64* %i, align 8
  %mul475 = mul nsw i64 2, %66
  %mul476 = mul nsw i64 %mul475, 8
  %mul477 = mul nsw i64 0, %mul476
  %sub478 = sub nsw i64 %mul477, 1
  %cmp479 = icmp slt i64 %sub478, 0
  br i1 %cmp479, label %land.lhs.true.481, label %lor.lhs.false.486

land.lhs.true.481:                                ; preds = %lor.lhs.false.474
  %67 = load i64, i64* %i, align 8
  %mul482 = mul nsw i64 2, %67
  %mul483 = mul nsw i64 %mul482, 8
  %cmp484 = icmp slt i64 %mul483, -128
  br i1 %cmp484, label %cond.true.491, label %lor.lhs.false.486

lor.lhs.false.486:                                ; preds = %land.lhs.true.481, %lor.lhs.false.474
  %68 = load i64, i64* %i, align 8
  %mul487 = mul nsw i64 2, %68
  %mul488 = mul nsw i64 %mul487, 8
  %cmp489 = icmp slt i64 127, %mul488
  br i1 %cmp489, label %cond.true.491, label %cond.false.517

cond.true.491:                                    ; preds = %lor.lhs.false.486, %land.lhs.true.481, %cond.end.468, %cond.end.442, %cond.true.405, %cond.end.398, %cond.true.366, %cond.end.360, %land.lhs.true.329
  %69 = load i64, i64* %i, align 8
  %mul492 = mul nsw i64 2, %69
  %conv493 = trunc i64 %mul492 to i8
  %conv494 = zext i8 %conv493 to i32
  %mul495 = mul nsw i32 %conv494, 8
  %cmp496 = icmp sle i32 %mul495, 127
  br i1 %cmp496, label %cond.true.498, label %cond.false.505

cond.true.498:                                    ; preds = %cond.true.491
  %70 = load i64, i64* %i, align 8
  %mul499 = mul nsw i64 2, %70
  %conv500 = trunc i64 %mul499 to i8
  %conv501 = zext i8 %conv500 to i32
  %mul502 = mul nsw i32 %conv501, 8
  %conv503 = trunc i32 %mul502 to i8
  %conv504 = sext i8 %conv503 to i32
  br label %cond.end.514

cond.false.505:                                   ; preds = %cond.true.491
  %71 = load i64, i64* %i, align 8
  %mul506 = mul nsw i64 2, %71
  %conv507 = trunc i64 %mul506 to i8
  %conv508 = zext i8 %conv507 to i32
  %mul509 = mul nsw i32 %conv508, 8
  %sub510 = sub nsw i32 %mul509, -128
  %conv511 = trunc i32 %sub510 to i8
  %conv512 = sext i8 %conv511 to i32
  %add513 = add nsw i32 %conv512, -128
  br label %cond.end.514

cond.end.514:                                     ; preds = %cond.false.505, %cond.true.498
  %cond515 = phi i32 [ %conv504, %cond.true.498 ], [ %add513, %cond.false.505 ]
  %conv516 = sext i32 %cond515 to i64
  store i64 %conv516, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2504

cond.false.517:                                   ; preds = %lor.lhs.false.486
  %72 = load i64, i64* %i, align 8
  %mul518 = mul nsw i64 2, %72
  %conv519 = trunc i64 %mul518 to i8
  %conv520 = zext i8 %conv519 to i32
  %mul521 = mul nsw i32 %conv520, 8
  %cmp522 = icmp sle i32 %mul521, 127
  br i1 %cmp522, label %cond.true.524, label %cond.false.531

cond.true.524:                                    ; preds = %cond.false.517
  %73 = load i64, i64* %i, align 8
  %mul525 = mul nsw i64 2, %73
  %conv526 = trunc i64 %mul525 to i8
  %conv527 = zext i8 %conv526 to i32
  %mul528 = mul nsw i32 %conv527, 8
  %conv529 = trunc i32 %mul528 to i8
  %conv530 = sext i8 %conv529 to i32
  br label %cond.end.540

cond.false.531:                                   ; preds = %cond.false.517
  %74 = load i64, i64* %i, align 8
  %mul532 = mul nsw i64 2, %74
  %conv533 = trunc i64 %mul532 to i8
  %conv534 = zext i8 %conv533 to i32
  %mul535 = mul nsw i32 %conv534, 8
  %sub536 = sub nsw i32 %mul535, -128
  %conv537 = trunc i32 %sub536 to i8
  %conv538 = sext i8 %conv537 to i32
  %add539 = add nsw i32 %conv538, -128
  br label %cond.end.540

cond.end.540:                                     ; preds = %cond.false.531, %cond.true.524
  %cond541 = phi i32 [ %conv530, %cond.true.524 ], [ %add539, %cond.false.531 ]
  %conv542 = sext i32 %cond541 to i64
  store i64 %conv542, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2504

cond.false.543:                                   ; preds = %do.body
  br i1 false, label %cond.true.544, label %cond.false.1096

cond.true.544:                                    ; preds = %cond.false.543
  br i1 false, label %cond.true.545, label %cond.false.847

cond.true.545:                                    ; preds = %cond.true.544
  %75 = load i64, i64* %i, align 8
  %mul546 = mul nsw i64 2, %75
  %conv547 = trunc i64 %mul546 to i16
  %conv548 = sext i16 %conv547 to i32
  %add549 = add nsw i32 0, %conv548
  %mul550 = mul nsw i32 0, %add549
  %sub551 = sub nsw i32 %mul550, 1
  %cmp552 = icmp slt i32 %sub551, 0
  br i1 %cmp552, label %cond.true.554, label %cond.false.576

cond.true.554:                                    ; preds = %cond.true.545
  %76 = load i64, i64* %i, align 8
  %mul555 = mul nsw i64 2, %76
  %conv556 = trunc i64 %mul555 to i16
  %conv557 = sext i16 %conv556 to i32
  %add558 = add nsw i32 0, %conv557
  %mul559 = mul nsw i32 0, %add558
  %add560 = add nsw i32 %mul559, 0
  %neg561 = xor i32 %add560, -1
  %cmp562 = icmp eq i32 %neg561, -1
  %conv563 = zext i1 %cmp562 to i32
  %sub564 = sub nsw i32 0, %conv563
  %77 = load i64, i64* %i, align 8
  %mul565 = mul nsw i64 2, %77
  %conv566 = trunc i64 %mul565 to i16
  %conv567 = sext i16 %conv566 to i32
  %add568 = add nsw i32 0, %conv567
  %mul569 = mul nsw i32 0, %add568
  %add570 = add nsw i32 %mul569, 1
  %shl571 = shl i32 %add570, 30
  %sub572 = sub nsw i32 %shl571, 1
  %mul573 = mul nsw i32 %sub572, 2
  %add574 = add nsw i32 %mul573, 1
  %sub575 = sub nsw i32 %sub564, %add574
  br label %cond.end.583

cond.false.576:                                   ; preds = %cond.true.545
  %78 = load i64, i64* %i, align 8
  %mul577 = mul nsw i64 2, %78
  %conv578 = trunc i64 %mul577 to i16
  %conv579 = sext i16 %conv578 to i32
  %add580 = add nsw i32 0, %conv579
  %mul581 = mul nsw i32 0, %add580
  %add582 = add nsw i32 %mul581, 0
  br label %cond.end.583

cond.end.583:                                     ; preds = %cond.false.576, %cond.true.554
  %cond584 = phi i32 [ %sub575, %cond.true.554 ], [ %add582, %cond.false.576 ]
  %cmp585 = icmp eq i32 %cond584, 0
  br i1 %cmp585, label %land.lhs.true.587, label %lor.lhs.false.593

land.lhs.true.587:                                ; preds = %cond.end.583
  %79 = load i64, i64* %i, align 8
  %mul588 = mul nsw i64 2, %79
  %conv589 = trunc i64 %mul588 to i16
  %conv590 = sext i16 %conv589 to i32
  %cmp591 = icmp slt i32 %conv590, 0
  br i1 %cmp591, label %cond.true.795, label %lor.lhs.false.593

lor.lhs.false.593:                                ; preds = %land.lhs.true.587, %cond.end.583
  br i1 false, label %cond.true.594, label %cond.false.683

cond.true.594:                                    ; preds = %lor.lhs.false.593
  %80 = load i64, i64* %i, align 8
  %mul595 = mul nsw i64 2, %80
  %conv596 = trunc i64 %mul595 to i16
  %conv597 = sext i16 %conv596 to i32
  %cmp598 = icmp slt i32 %conv597, 0
  br i1 %cmp598, label %cond.true.600, label %cond.false.635

cond.true.600:                                    ; preds = %cond.true.594
  %81 = load i64, i64* %i, align 8
  %mul601 = mul nsw i64 2, %81
  %conv602 = trunc i64 %mul601 to i16
  %conv603 = sext i16 %conv602 to i32
  %82 = load i64, i64* %i, align 8
  %mul604 = mul nsw i64 2, %82
  %conv605 = trunc i64 %mul604 to i16
  %conv606 = sext i16 %conv605 to i32
  %add607 = add nsw i32 0, %conv606
  %mul608 = mul nsw i32 0, %add607
  %sub609 = sub nsw i32 %mul608, 1
  %cmp610 = icmp slt i32 %sub609, 0
  br i1 %cmp610, label %cond.true.612, label %cond.false.623

cond.true.612:                                    ; preds = %cond.true.600
  %83 = load i64, i64* %i, align 8
  %mul613 = mul nsw i64 2, %83
  %conv614 = trunc i64 %mul613 to i16
  %conv615 = sext i16 %conv614 to i32
  %add616 = add nsw i32 0, %conv615
  %mul617 = mul nsw i32 0, %add616
  %add618 = add nsw i32 %mul617, 1
  %shl619 = shl i32 %add618, 30
  %sub620 = sub nsw i32 %shl619, 1
  %mul621 = mul nsw i32 %sub620, 2
  %add622 = add nsw i32 %mul621, 1
  br label %cond.end.630

cond.false.623:                                   ; preds = %cond.true.600
  %84 = load i64, i64* %i, align 8
  %mul624 = mul nsw i64 2, %84
  %conv625 = trunc i64 %mul624 to i16
  %conv626 = sext i16 %conv625 to i32
  %add627 = add nsw i32 0, %conv626
  %mul628 = mul nsw i32 0, %add627
  %sub629 = sub nsw i32 %mul628, 1
  br label %cond.end.630

cond.end.630:                                     ; preds = %cond.false.623, %cond.true.612
  %cond631 = phi i32 [ %add622, %cond.true.612 ], [ %sub629, %cond.false.623 ]
  %div632 = sdiv i32 %cond631, 8
  %cmp633 = icmp slt i32 %conv603, %div632
  br i1 %cmp633, label %cond.true.795, label %lor.lhs.false.772

cond.false.635:                                   ; preds = %cond.true.594
  br i1 false, label %cond.true.636, label %cond.false.637

cond.true.636:                                    ; preds = %cond.false.635
  br i1 false, label %cond.true.795, label %lor.lhs.false.772

cond.false.637:                                   ; preds = %cond.false.635
  %85 = load i64, i64* %i, align 8
  %mul638 = mul nsw i64 2, %85
  %conv639 = trunc i64 %mul638 to i16
  %conv640 = sext i16 %conv639 to i32
  %add641 = add nsw i32 0, %conv640
  %mul642 = mul nsw i32 0, %add641
  %sub643 = sub nsw i32 %mul642, 1
  %cmp644 = icmp slt i32 %sub643, 0
  br i1 %cmp644, label %cond.true.646, label %cond.false.668

cond.true.646:                                    ; preds = %cond.false.637
  %86 = load i64, i64* %i, align 8
  %mul647 = mul nsw i64 2, %86
  %conv648 = trunc i64 %mul647 to i16
  %conv649 = sext i16 %conv648 to i32
  %add650 = add nsw i32 0, %conv649
  %mul651 = mul nsw i32 0, %add650
  %add652 = add nsw i32 %mul651, 0
  %neg653 = xor i32 %add652, -1
  %cmp654 = icmp eq i32 %neg653, -1
  %conv655 = zext i1 %cmp654 to i32
  %sub656 = sub nsw i32 0, %conv655
  %87 = load i64, i64* %i, align 8
  %mul657 = mul nsw i64 2, %87
  %conv658 = trunc i64 %mul657 to i16
  %conv659 = sext i16 %conv658 to i32
  %add660 = add nsw i32 0, %conv659
  %mul661 = mul nsw i32 0, %add660
  %add662 = add nsw i32 %mul661, 1
  %shl663 = shl i32 %add662, 30
  %sub664 = sub nsw i32 %shl663, 1
  %mul665 = mul nsw i32 %sub664, 2
  %add666 = add nsw i32 %mul665, 1
  %sub667 = sub nsw i32 %sub656, %add666
  br label %cond.end.675

cond.false.668:                                   ; preds = %cond.false.637
  %88 = load i64, i64* %i, align 8
  %mul669 = mul nsw i64 2, %88
  %conv670 = trunc i64 %mul669 to i16
  %conv671 = sext i16 %conv670 to i32
  %add672 = add nsw i32 0, %conv671
  %mul673 = mul nsw i32 0, %add672
  %add674 = add nsw i32 %mul673, 0
  br label %cond.end.675

cond.end.675:                                     ; preds = %cond.false.668, %cond.true.646
  %cond676 = phi i32 [ %sub667, %cond.true.646 ], [ %add674, %cond.false.668 ]
  %div677 = sdiv i32 %cond676, 8
  %89 = load i64, i64* %i, align 8
  %mul678 = mul nsw i64 2, %89
  %conv679 = trunc i64 %mul678 to i16
  %conv680 = sext i16 %conv679 to i32
  %cmp681 = icmp slt i32 %div677, %conv680
  br i1 %cmp681, label %cond.true.795, label %lor.lhs.false.772

cond.false.683:                                   ; preds = %lor.lhs.false.593
  br i1 false, label %cond.true.684, label %cond.false.685

cond.true.684:                                    ; preds = %cond.false.683
  br i1 false, label %cond.true.795, label %lor.lhs.false.772

cond.false.685:                                   ; preds = %cond.false.683
  %90 = load i64, i64* %i, align 8
  %mul686 = mul nsw i64 2, %90
  %conv687 = trunc i64 %mul686 to i16
  %conv688 = sext i16 %conv687 to i32
  %cmp689 = icmp slt i32 %conv688, 0
  br i1 %cmp689, label %cond.true.691, label %cond.false.737

cond.true.691:                                    ; preds = %cond.false.685
  %91 = load i64, i64* %i, align 8
  %mul692 = mul nsw i64 2, %91
  %conv693 = trunc i64 %mul692 to i16
  %conv694 = sext i16 %conv693 to i32
  %92 = load i64, i64* %i, align 8
  %mul695 = mul nsw i64 2, %92
  %conv696 = trunc i64 %mul695 to i16
  %conv697 = sext i16 %conv696 to i32
  %add698 = add nsw i32 0, %conv697
  %mul699 = mul nsw i32 0, %add698
  %sub700 = sub nsw i32 %mul699, 1
  %cmp701 = icmp slt i32 %sub700, 0
  br i1 %cmp701, label %cond.true.703, label %cond.false.725

cond.true.703:                                    ; preds = %cond.true.691
  %93 = load i64, i64* %i, align 8
  %mul704 = mul nsw i64 2, %93
  %conv705 = trunc i64 %mul704 to i16
  %conv706 = sext i16 %conv705 to i32
  %add707 = add nsw i32 0, %conv706
  %mul708 = mul nsw i32 0, %add707
  %add709 = add nsw i32 %mul708, 0
  %neg710 = xor i32 %add709, -1
  %cmp711 = icmp eq i32 %neg710, -1
  %conv712 = zext i1 %cmp711 to i32
  %sub713 = sub nsw i32 0, %conv712
  %94 = load i64, i64* %i, align 8
  %mul714 = mul nsw i64 2, %94
  %conv715 = trunc i64 %mul714 to i16
  %conv716 = sext i16 %conv715 to i32
  %add717 = add nsw i32 0, %conv716
  %mul718 = mul nsw i32 0, %add717
  %add719 = add nsw i32 %mul718, 1
  %shl720 = shl i32 %add719, 30
  %sub721 = sub nsw i32 %shl720, 1
  %mul722 = mul nsw i32 %sub721, 2
  %add723 = add nsw i32 %mul722, 1
  %sub724 = sub nsw i32 %sub713, %add723
  br label %cond.end.732

cond.false.725:                                   ; preds = %cond.true.691
  %95 = load i64, i64* %i, align 8
  %mul726 = mul nsw i64 2, %95
  %conv727 = trunc i64 %mul726 to i16
  %conv728 = sext i16 %conv727 to i32
  %add729 = add nsw i32 0, %conv728
  %mul730 = mul nsw i32 0, %add729
  %add731 = add nsw i32 %mul730, 0
  br label %cond.end.732

cond.end.732:                                     ; preds = %cond.false.725, %cond.true.703
  %cond733 = phi i32 [ %sub724, %cond.true.703 ], [ %add731, %cond.false.725 ]
  %div734 = sdiv i32 %cond733, 8
  %cmp735 = icmp slt i32 %conv694, %div734
  br i1 %cmp735, label %cond.true.795, label %lor.lhs.false.772

cond.false.737:                                   ; preds = %cond.false.685
  %96 = load i64, i64* %i, align 8
  %mul738 = mul nsw i64 2, %96
  %conv739 = trunc i64 %mul738 to i16
  %conv740 = sext i16 %conv739 to i32
  %add741 = add nsw i32 0, %conv740
  %mul742 = mul nsw i32 0, %add741
  %sub743 = sub nsw i32 %mul742, 1
  %cmp744 = icmp slt i32 %sub743, 0
  br i1 %cmp744, label %cond.true.746, label %cond.false.757

cond.true.746:                                    ; preds = %cond.false.737
  %97 = load i64, i64* %i, align 8
  %mul747 = mul nsw i64 2, %97
  %conv748 = trunc i64 %mul747 to i16
  %conv749 = sext i16 %conv748 to i32
  %add750 = add nsw i32 0, %conv749
  %mul751 = mul nsw i32 0, %add750
  %add752 = add nsw i32 %mul751, 1
  %shl753 = shl i32 %add752, 30
  %sub754 = sub nsw i32 %shl753, 1
  %mul755 = mul nsw i32 %sub754, 2
  %add756 = add nsw i32 %mul755, 1
  br label %cond.end.764

cond.false.757:                                   ; preds = %cond.false.737
  %98 = load i64, i64* %i, align 8
  %mul758 = mul nsw i64 2, %98
  %conv759 = trunc i64 %mul758 to i16
  %conv760 = sext i16 %conv759 to i32
  %add761 = add nsw i32 0, %conv760
  %mul762 = mul nsw i32 0, %add761
  %sub763 = sub nsw i32 %mul762, 1
  br label %cond.end.764

cond.end.764:                                     ; preds = %cond.false.757, %cond.true.746
  %cond765 = phi i32 [ %add756, %cond.true.746 ], [ %sub763, %cond.false.757 ]
  %div766 = sdiv i32 %cond765, 8
  %99 = load i64, i64* %i, align 8
  %mul767 = mul nsw i64 2, %99
  %conv768 = trunc i64 %mul767 to i16
  %conv769 = sext i16 %conv768 to i32
  %cmp770 = icmp slt i32 %div766, %conv769
  br i1 %cmp770, label %cond.true.795, label %lor.lhs.false.772

lor.lhs.false.772:                                ; preds = %cond.end.764, %cond.end.732, %cond.true.684, %cond.end.675, %cond.true.636, %cond.end.630
  %100 = load i64, i64* %i, align 8
  %mul773 = mul nsw i64 2, %100
  %conv774 = trunc i64 %mul773 to i16
  %conv775 = sext i16 %conv774 to i32
  %mul776 = mul nsw i32 %conv775, 8
  %mul777 = mul nsw i32 0, %mul776
  %sub778 = sub nsw i32 %mul777, 1
  %cmp779 = icmp slt i32 %sub778, 0
  br i1 %cmp779, label %land.lhs.true.781, label %lor.lhs.false.788

land.lhs.true.781:                                ; preds = %lor.lhs.false.772
  %101 = load i64, i64* %i, align 8
  %mul782 = mul nsw i64 2, %101
  %conv783 = trunc i64 %mul782 to i16
  %conv784 = sext i16 %conv783 to i32
  %mul785 = mul nsw i32 %conv784, 8
  %cmp786 = icmp slt i32 %mul785, -32768
  br i1 %cmp786, label %cond.true.795, label %lor.lhs.false.788

lor.lhs.false.788:                                ; preds = %land.lhs.true.781, %lor.lhs.false.772
  %102 = load i64, i64* %i, align 8
  %mul789 = mul nsw i64 2, %102
  %conv790 = trunc i64 %mul789 to i16
  %conv791 = sext i16 %conv790 to i32
  %mul792 = mul nsw i32 %conv791, 8
  %cmp793 = icmp slt i32 32767, %mul792
  br i1 %cmp793, label %cond.true.795, label %cond.false.821

cond.true.795:                                    ; preds = %lor.lhs.false.788, %land.lhs.true.781, %cond.end.764, %cond.end.732, %cond.true.684, %cond.end.675, %cond.true.636, %cond.end.630, %land.lhs.true.587
  %103 = load i64, i64* %i, align 8
  %mul796 = mul nsw i64 2, %103
  %conv797 = trunc i64 %mul796 to i16
  %conv798 = zext i16 %conv797 to i32
  %mul799 = mul nsw i32 %conv798, 8
  %cmp800 = icmp sle i32 %mul799, 32767
  br i1 %cmp800, label %cond.true.802, label %cond.false.809

cond.true.802:                                    ; preds = %cond.true.795
  %104 = load i64, i64* %i, align 8
  %mul803 = mul nsw i64 2, %104
  %conv804 = trunc i64 %mul803 to i16
  %conv805 = zext i16 %conv804 to i32
  %mul806 = mul nsw i32 %conv805, 8
  %conv807 = trunc i32 %mul806 to i16
  %conv808 = sext i16 %conv807 to i32
  br label %cond.end.818

cond.false.809:                                   ; preds = %cond.true.795
  %105 = load i64, i64* %i, align 8
  %mul810 = mul nsw i64 2, %105
  %conv811 = trunc i64 %mul810 to i16
  %conv812 = zext i16 %conv811 to i32
  %mul813 = mul nsw i32 %conv812, 8
  %sub814 = sub nsw i32 %mul813, -32768
  %conv815 = trunc i32 %sub814 to i16
  %conv816 = sext i16 %conv815 to i32
  %add817 = add nsw i32 %conv816, -32768
  br label %cond.end.818

cond.end.818:                                     ; preds = %cond.false.809, %cond.true.802
  %cond819 = phi i32 [ %conv808, %cond.true.802 ], [ %add817, %cond.false.809 ]
  %conv820 = sext i32 %cond819 to i64
  store i64 %conv820, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2504

cond.false.821:                                   ; preds = %lor.lhs.false.788
  %106 = load i64, i64* %i, align 8
  %mul822 = mul nsw i64 2, %106
  %conv823 = trunc i64 %mul822 to i16
  %conv824 = zext i16 %conv823 to i32
  %mul825 = mul nsw i32 %conv824, 8
  %cmp826 = icmp sle i32 %mul825, 32767
  br i1 %cmp826, label %cond.true.828, label %cond.false.835

cond.true.828:                                    ; preds = %cond.false.821
  %107 = load i64, i64* %i, align 8
  %mul829 = mul nsw i64 2, %107
  %conv830 = trunc i64 %mul829 to i16
  %conv831 = zext i16 %conv830 to i32
  %mul832 = mul nsw i32 %conv831, 8
  %conv833 = trunc i32 %mul832 to i16
  %conv834 = sext i16 %conv833 to i32
  br label %cond.end.844

cond.false.835:                                   ; preds = %cond.false.821
  %108 = load i64, i64* %i, align 8
  %mul836 = mul nsw i64 2, %108
  %conv837 = trunc i64 %mul836 to i16
  %conv838 = zext i16 %conv837 to i32
  %mul839 = mul nsw i32 %conv838, 8
  %sub840 = sub nsw i32 %mul839, -32768
  %conv841 = trunc i32 %sub840 to i16
  %conv842 = sext i16 %conv841 to i32
  %add843 = add nsw i32 %conv842, -32768
  br label %cond.end.844

cond.end.844:                                     ; preds = %cond.false.835, %cond.true.828
  %cond845 = phi i32 [ %conv834, %cond.true.828 ], [ %add843, %cond.false.835 ]
  %conv846 = sext i32 %cond845 to i64
  store i64 %conv846, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2504

cond.false.847:                                   ; preds = %cond.true.544
  %109 = load i64, i64* %i, align 8
  %mul848 = mul nsw i64 2, %109
  %add849 = add nsw i64 0, %mul848
  %mul850 = mul nsw i64 0, %add849
  %sub851 = sub nsw i64 %mul850, 1
  %cmp852 = icmp slt i64 %sub851, 0
  br i1 %cmp852, label %cond.true.854, label %cond.false.873

cond.true.854:                                    ; preds = %cond.false.847
  %110 = load i64, i64* %i, align 8
  %mul855 = mul nsw i64 2, %110
  %add856 = add nsw i64 0, %mul855
  %mul857 = mul nsw i64 0, %add856
  %add858 = add nsw i64 %mul857, 0
  %neg859 = xor i64 %add858, -1
  %cmp860 = icmp eq i64 %neg859, -1
  %conv861 = zext i1 %cmp860 to i32
  %sub862 = sub nsw i32 0, %conv861
  %conv863 = sext i32 %sub862 to i64
  %111 = load i64, i64* %i, align 8
  %mul864 = mul nsw i64 2, %111
  %add865 = add nsw i64 0, %mul864
  %mul866 = mul nsw i64 0, %add865
  %add867 = add nsw i64 %mul866, 1
  %shl868 = shl i64 %add867, 62
  %sub869 = sub nsw i64 %shl868, 1
  %mul870 = mul nsw i64 %sub869, 2
  %add871 = add nsw i64 %mul870, 1
  %sub872 = sub nsw i64 %conv863, %add871
  br label %cond.end.878

cond.false.873:                                   ; preds = %cond.false.847
  %112 = load i64, i64* %i, align 8
  %mul874 = mul nsw i64 2, %112
  %add875 = add nsw i64 0, %mul874
  %mul876 = mul nsw i64 0, %add875
  %add877 = add nsw i64 %mul876, 0
  br label %cond.end.878

cond.end.878:                                     ; preds = %cond.false.873, %cond.true.854
  %cond879 = phi i64 [ %sub872, %cond.true.854 ], [ %add877, %cond.false.873 ]
  %cmp880 = icmp eq i64 %cond879, 0
  br i1 %cmp880, label %land.lhs.true.882, label %lor.lhs.false.886

land.lhs.true.882:                                ; preds = %cond.end.878
  %113 = load i64, i64* %i, align 8
  %mul883 = mul nsw i64 2, %113
  %cmp884 = icmp slt i64 %mul883, 0
  br i1 %cmp884, label %cond.true.1044, label %lor.lhs.false.886

lor.lhs.false.886:                                ; preds = %land.lhs.true.882, %cond.end.878
  br i1 false, label %cond.true.887, label %cond.false.957

cond.true.887:                                    ; preds = %lor.lhs.false.886
  %114 = load i64, i64* %i, align 8
  %mul888 = mul nsw i64 2, %114
  %cmp889 = icmp slt i64 %mul888, 0
  br i1 %cmp889, label %cond.true.891, label %cond.false.918

cond.true.891:                                    ; preds = %cond.true.887
  %115 = load i64, i64* %i, align 8
  %mul892 = mul nsw i64 2, %115
  %116 = load i64, i64* %i, align 8
  %mul893 = mul nsw i64 2, %116
  %add894 = add nsw i64 0, %mul893
  %mul895 = mul nsw i64 0, %add894
  %sub896 = sub nsw i64 %mul895, 1
  %cmp897 = icmp slt i64 %sub896, 0
  br i1 %cmp897, label %cond.true.899, label %cond.false.908

cond.true.899:                                    ; preds = %cond.true.891
  %117 = load i64, i64* %i, align 8
  %mul900 = mul nsw i64 2, %117
  %add901 = add nsw i64 0, %mul900
  %mul902 = mul nsw i64 0, %add901
  %add903 = add nsw i64 %mul902, 1
  %shl904 = shl i64 %add903, 62
  %sub905 = sub nsw i64 %shl904, 1
  %mul906 = mul nsw i64 %sub905, 2
  %add907 = add nsw i64 %mul906, 1
  br label %cond.end.913

cond.false.908:                                   ; preds = %cond.true.891
  %118 = load i64, i64* %i, align 8
  %mul909 = mul nsw i64 2, %118
  %add910 = add nsw i64 0, %mul909
  %mul911 = mul nsw i64 0, %add910
  %sub912 = sub nsw i64 %mul911, 1
  br label %cond.end.913

cond.end.913:                                     ; preds = %cond.false.908, %cond.true.899
  %cond914 = phi i64 [ %add907, %cond.true.899 ], [ %sub912, %cond.false.908 ]
  %div915 = sdiv i64 %cond914, 8
  %cmp916 = icmp slt i64 %mul892, %div915
  br i1 %cmp916, label %cond.true.1044, label %lor.lhs.false.1027

cond.false.918:                                   ; preds = %cond.true.887
  br i1 false, label %cond.true.919, label %cond.false.920

cond.true.919:                                    ; preds = %cond.false.918
  br i1 false, label %cond.true.1044, label %lor.lhs.false.1027

cond.false.920:                                   ; preds = %cond.false.918
  %119 = load i64, i64* %i, align 8
  %mul921 = mul nsw i64 2, %119
  %add922 = add nsw i64 0, %mul921
  %mul923 = mul nsw i64 0, %add922
  %sub924 = sub nsw i64 %mul923, 1
  %cmp925 = icmp slt i64 %sub924, 0
  br i1 %cmp925, label %cond.true.927, label %cond.false.946

cond.true.927:                                    ; preds = %cond.false.920
  %120 = load i64, i64* %i, align 8
  %mul928 = mul nsw i64 2, %120
  %add929 = add nsw i64 0, %mul928
  %mul930 = mul nsw i64 0, %add929
  %add931 = add nsw i64 %mul930, 0
  %neg932 = xor i64 %add931, -1
  %cmp933 = icmp eq i64 %neg932, -1
  %conv934 = zext i1 %cmp933 to i32
  %sub935 = sub nsw i32 0, %conv934
  %conv936 = sext i32 %sub935 to i64
  %121 = load i64, i64* %i, align 8
  %mul937 = mul nsw i64 2, %121
  %add938 = add nsw i64 0, %mul937
  %mul939 = mul nsw i64 0, %add938
  %add940 = add nsw i64 %mul939, 1
  %shl941 = shl i64 %add940, 62
  %sub942 = sub nsw i64 %shl941, 1
  %mul943 = mul nsw i64 %sub942, 2
  %add944 = add nsw i64 %mul943, 1
  %sub945 = sub nsw i64 %conv936, %add944
  br label %cond.end.951

cond.false.946:                                   ; preds = %cond.false.920
  %122 = load i64, i64* %i, align 8
  %mul947 = mul nsw i64 2, %122
  %add948 = add nsw i64 0, %mul947
  %mul949 = mul nsw i64 0, %add948
  %add950 = add nsw i64 %mul949, 0
  br label %cond.end.951

cond.end.951:                                     ; preds = %cond.false.946, %cond.true.927
  %cond952 = phi i64 [ %sub945, %cond.true.927 ], [ %add950, %cond.false.946 ]
  %div953 = sdiv i64 %cond952, 8
  %123 = load i64, i64* %i, align 8
  %mul954 = mul nsw i64 2, %123
  %cmp955 = icmp slt i64 %div953, %mul954
  br i1 %cmp955, label %cond.true.1044, label %lor.lhs.false.1027

cond.false.957:                                   ; preds = %lor.lhs.false.886
  br i1 false, label %cond.true.958, label %cond.false.959

cond.true.958:                                    ; preds = %cond.false.957
  br i1 false, label %cond.true.1044, label %lor.lhs.false.1027

cond.false.959:                                   ; preds = %cond.false.957
  %124 = load i64, i64* %i, align 8
  %mul960 = mul nsw i64 2, %124
  %cmp961 = icmp slt i64 %mul960, 0
  br i1 %cmp961, label %cond.true.963, label %cond.false.1000

cond.true.963:                                    ; preds = %cond.false.959
  %125 = load i64, i64* %i, align 8
  %mul964 = mul nsw i64 2, %125
  %126 = load i64, i64* %i, align 8
  %mul965 = mul nsw i64 2, %126
  %add966 = add nsw i64 0, %mul965
  %mul967 = mul nsw i64 0, %add966
  %sub968 = sub nsw i64 %mul967, 1
  %cmp969 = icmp slt i64 %sub968, 0
  br i1 %cmp969, label %cond.true.971, label %cond.false.990

cond.true.971:                                    ; preds = %cond.true.963
  %127 = load i64, i64* %i, align 8
  %mul972 = mul nsw i64 2, %127
  %add973 = add nsw i64 0, %mul972
  %mul974 = mul nsw i64 0, %add973
  %add975 = add nsw i64 %mul974, 0
  %neg976 = xor i64 %add975, -1
  %cmp977 = icmp eq i64 %neg976, -1
  %conv978 = zext i1 %cmp977 to i32
  %sub979 = sub nsw i32 0, %conv978
  %conv980 = sext i32 %sub979 to i64
  %128 = load i64, i64* %i, align 8
  %mul981 = mul nsw i64 2, %128
  %add982 = add nsw i64 0, %mul981
  %mul983 = mul nsw i64 0, %add982
  %add984 = add nsw i64 %mul983, 1
  %shl985 = shl i64 %add984, 62
  %sub986 = sub nsw i64 %shl985, 1
  %mul987 = mul nsw i64 %sub986, 2
  %add988 = add nsw i64 %mul987, 1
  %sub989 = sub nsw i64 %conv980, %add988
  br label %cond.end.995

cond.false.990:                                   ; preds = %cond.true.963
  %129 = load i64, i64* %i, align 8
  %mul991 = mul nsw i64 2, %129
  %add992 = add nsw i64 0, %mul991
  %mul993 = mul nsw i64 0, %add992
  %add994 = add nsw i64 %mul993, 0
  br label %cond.end.995

cond.end.995:                                     ; preds = %cond.false.990, %cond.true.971
  %cond996 = phi i64 [ %sub989, %cond.true.971 ], [ %add994, %cond.false.990 ]
  %div997 = sdiv i64 %cond996, 8
  %cmp998 = icmp slt i64 %mul964, %div997
  br i1 %cmp998, label %cond.true.1044, label %lor.lhs.false.1027

cond.false.1000:                                  ; preds = %cond.false.959
  %130 = load i64, i64* %i, align 8
  %mul1001 = mul nsw i64 2, %130
  %add1002 = add nsw i64 0, %mul1001
  %mul1003 = mul nsw i64 0, %add1002
  %sub1004 = sub nsw i64 %mul1003, 1
  %cmp1005 = icmp slt i64 %sub1004, 0
  br i1 %cmp1005, label %cond.true.1007, label %cond.false.1016

cond.true.1007:                                   ; preds = %cond.false.1000
  %131 = load i64, i64* %i, align 8
  %mul1008 = mul nsw i64 2, %131
  %add1009 = add nsw i64 0, %mul1008
  %mul1010 = mul nsw i64 0, %add1009
  %add1011 = add nsw i64 %mul1010, 1
  %shl1012 = shl i64 %add1011, 62
  %sub1013 = sub nsw i64 %shl1012, 1
  %mul1014 = mul nsw i64 %sub1013, 2
  %add1015 = add nsw i64 %mul1014, 1
  br label %cond.end.1021

cond.false.1016:                                  ; preds = %cond.false.1000
  %132 = load i64, i64* %i, align 8
  %mul1017 = mul nsw i64 2, %132
  %add1018 = add nsw i64 0, %mul1017
  %mul1019 = mul nsw i64 0, %add1018
  %sub1020 = sub nsw i64 %mul1019, 1
  br label %cond.end.1021

cond.end.1021:                                    ; preds = %cond.false.1016, %cond.true.1007
  %cond1022 = phi i64 [ %add1015, %cond.true.1007 ], [ %sub1020, %cond.false.1016 ]
  %div1023 = sdiv i64 %cond1022, 8
  %133 = load i64, i64* %i, align 8
  %mul1024 = mul nsw i64 2, %133
  %cmp1025 = icmp slt i64 %div1023, %mul1024
  br i1 %cmp1025, label %cond.true.1044, label %lor.lhs.false.1027

lor.lhs.false.1027:                               ; preds = %cond.end.1021, %cond.end.995, %cond.true.958, %cond.end.951, %cond.true.919, %cond.end.913
  %134 = load i64, i64* %i, align 8
  %mul1028 = mul nsw i64 2, %134
  %mul1029 = mul nsw i64 %mul1028, 8
  %mul1030 = mul nsw i64 0, %mul1029
  %sub1031 = sub nsw i64 %mul1030, 1
  %cmp1032 = icmp slt i64 %sub1031, 0
  br i1 %cmp1032, label %land.lhs.true.1034, label %lor.lhs.false.1039

land.lhs.true.1034:                               ; preds = %lor.lhs.false.1027
  %135 = load i64, i64* %i, align 8
  %mul1035 = mul nsw i64 2, %135
  %mul1036 = mul nsw i64 %mul1035, 8
  %cmp1037 = icmp slt i64 %mul1036, -32768
  br i1 %cmp1037, label %cond.true.1044, label %lor.lhs.false.1039

lor.lhs.false.1039:                               ; preds = %land.lhs.true.1034, %lor.lhs.false.1027
  %136 = load i64, i64* %i, align 8
  %mul1040 = mul nsw i64 2, %136
  %mul1041 = mul nsw i64 %mul1040, 8
  %cmp1042 = icmp slt i64 32767, %mul1041
  br i1 %cmp1042, label %cond.true.1044, label %cond.false.1070

cond.true.1044:                                   ; preds = %lor.lhs.false.1039, %land.lhs.true.1034, %cond.end.1021, %cond.end.995, %cond.true.958, %cond.end.951, %cond.true.919, %cond.end.913, %land.lhs.true.882
  %137 = load i64, i64* %i, align 8
  %mul1045 = mul nsw i64 2, %137
  %conv1046 = trunc i64 %mul1045 to i16
  %conv1047 = zext i16 %conv1046 to i32
  %mul1048 = mul nsw i32 %conv1047, 8
  %cmp1049 = icmp sle i32 %mul1048, 32767
  br i1 %cmp1049, label %cond.true.1051, label %cond.false.1058

cond.true.1051:                                   ; preds = %cond.true.1044
  %138 = load i64, i64* %i, align 8
  %mul1052 = mul nsw i64 2, %138
  %conv1053 = trunc i64 %mul1052 to i16
  %conv1054 = zext i16 %conv1053 to i32
  %mul1055 = mul nsw i32 %conv1054, 8
  %conv1056 = trunc i32 %mul1055 to i16
  %conv1057 = sext i16 %conv1056 to i32
  br label %cond.end.1067

cond.false.1058:                                  ; preds = %cond.true.1044
  %139 = load i64, i64* %i, align 8
  %mul1059 = mul nsw i64 2, %139
  %conv1060 = trunc i64 %mul1059 to i16
  %conv1061 = zext i16 %conv1060 to i32
  %mul1062 = mul nsw i32 %conv1061, 8
  %sub1063 = sub nsw i32 %mul1062, -32768
  %conv1064 = trunc i32 %sub1063 to i16
  %conv1065 = sext i16 %conv1064 to i32
  %add1066 = add nsw i32 %conv1065, -32768
  br label %cond.end.1067

cond.end.1067:                                    ; preds = %cond.false.1058, %cond.true.1051
  %cond1068 = phi i32 [ %conv1057, %cond.true.1051 ], [ %add1066, %cond.false.1058 ]
  %conv1069 = sext i32 %cond1068 to i64
  store i64 %conv1069, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2504

cond.false.1070:                                  ; preds = %lor.lhs.false.1039
  %140 = load i64, i64* %i, align 8
  %mul1071 = mul nsw i64 2, %140
  %conv1072 = trunc i64 %mul1071 to i16
  %conv1073 = zext i16 %conv1072 to i32
  %mul1074 = mul nsw i32 %conv1073, 8
  %cmp1075 = icmp sle i32 %mul1074, 32767
  br i1 %cmp1075, label %cond.true.1077, label %cond.false.1084

cond.true.1077:                                   ; preds = %cond.false.1070
  %141 = load i64, i64* %i, align 8
  %mul1078 = mul nsw i64 2, %141
  %conv1079 = trunc i64 %mul1078 to i16
  %conv1080 = zext i16 %conv1079 to i32
  %mul1081 = mul nsw i32 %conv1080, 8
  %conv1082 = trunc i32 %mul1081 to i16
  %conv1083 = sext i16 %conv1082 to i32
  br label %cond.end.1093

cond.false.1084:                                  ; preds = %cond.false.1070
  %142 = load i64, i64* %i, align 8
  %mul1085 = mul nsw i64 2, %142
  %conv1086 = trunc i64 %mul1085 to i16
  %conv1087 = zext i16 %conv1086 to i32
  %mul1088 = mul nsw i32 %conv1087, 8
  %sub1089 = sub nsw i32 %mul1088, -32768
  %conv1090 = trunc i32 %sub1089 to i16
  %conv1091 = sext i16 %conv1090 to i32
  %add1092 = add nsw i32 %conv1091, -32768
  br label %cond.end.1093

cond.end.1093:                                    ; preds = %cond.false.1084, %cond.true.1077
  %cond1094 = phi i32 [ %conv1083, %cond.true.1077 ], [ %add1092, %cond.false.1084 ]
  %conv1095 = sext i32 %cond1094 to i64
  store i64 %conv1095, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2504

cond.false.1096:                                  ; preds = %cond.false.543
  br i1 false, label %cond.true.1097, label %cond.false.1593

cond.true.1097:                                   ; preds = %cond.false.1096
  br i1 false, label %cond.true.1098, label %cond.false.1358

cond.true.1098:                                   ; preds = %cond.true.1097
  %143 = load i64, i64* %i, align 8
  %mul1099 = mul nsw i64 2, %143
  %conv1100 = trunc i64 %mul1099 to i32
  %add1101 = add nsw i32 0, %conv1100
  %mul1102 = mul nsw i32 0, %add1101
  %sub1103 = sub nsw i32 %mul1102, 1
  %cmp1104 = icmp slt i32 %sub1103, 0
  br i1 %cmp1104, label %cond.true.1106, label %cond.false.1126

cond.true.1106:                                   ; preds = %cond.true.1098
  %144 = load i64, i64* %i, align 8
  %mul1107 = mul nsw i64 2, %144
  %conv1108 = trunc i64 %mul1107 to i32
  %add1109 = add nsw i32 0, %conv1108
  %mul1110 = mul nsw i32 0, %add1109
  %add1111 = add nsw i32 %mul1110, 0
  %neg1112 = xor i32 %add1111, -1
  %cmp1113 = icmp eq i32 %neg1112, -1
  %conv1114 = zext i1 %cmp1113 to i32
  %sub1115 = sub nsw i32 0, %conv1114
  %145 = load i64, i64* %i, align 8
  %mul1116 = mul nsw i64 2, %145
  %conv1117 = trunc i64 %mul1116 to i32
  %add1118 = add nsw i32 0, %conv1117
  %mul1119 = mul nsw i32 0, %add1118
  %add1120 = add nsw i32 %mul1119, 1
  %shl1121 = shl i32 %add1120, 30
  %sub1122 = sub nsw i32 %shl1121, 1
  %mul1123 = mul nsw i32 %sub1122, 2
  %add1124 = add nsw i32 %mul1123, 1
  %sub1125 = sub nsw i32 %sub1115, %add1124
  br label %cond.end.1132

cond.false.1126:                                  ; preds = %cond.true.1098
  %146 = load i64, i64* %i, align 8
  %mul1127 = mul nsw i64 2, %146
  %conv1128 = trunc i64 %mul1127 to i32
  %add1129 = add nsw i32 0, %conv1128
  %mul1130 = mul nsw i32 0, %add1129
  %add1131 = add nsw i32 %mul1130, 0
  br label %cond.end.1132

cond.end.1132:                                    ; preds = %cond.false.1126, %cond.true.1106
  %cond1133 = phi i32 [ %sub1125, %cond.true.1106 ], [ %add1131, %cond.false.1126 ]
  %cmp1134 = icmp eq i32 %cond1133, 0
  br i1 %cmp1134, label %land.lhs.true.1136, label %lor.lhs.false.1141

land.lhs.true.1136:                               ; preds = %cond.end.1132
  %147 = load i64, i64* %i, align 8
  %mul1137 = mul nsw i64 2, %147
  %conv1138 = trunc i64 %mul1137 to i32
  %cmp1139 = icmp slt i32 %conv1138, 0
  br i1 %cmp1139, label %cond.true.1320, label %lor.lhs.false.1141

lor.lhs.false.1141:                               ; preds = %land.lhs.true.1136, %cond.end.1132
  br i1 false, label %cond.true.1142, label %cond.false.1221

cond.true.1142:                                   ; preds = %lor.lhs.false.1141
  %148 = load i64, i64* %i, align 8
  %mul1143 = mul nsw i64 2, %148
  %conv1144 = trunc i64 %mul1143 to i32
  %cmp1145 = icmp slt i32 %conv1144, 0
  br i1 %cmp1145, label %cond.true.1147, label %cond.false.1178

cond.true.1147:                                   ; preds = %cond.true.1142
  %149 = load i64, i64* %i, align 8
  %mul1148 = mul nsw i64 2, %149
  %conv1149 = trunc i64 %mul1148 to i32
  %150 = load i64, i64* %i, align 8
  %mul1150 = mul nsw i64 2, %150
  %conv1151 = trunc i64 %mul1150 to i32
  %add1152 = add nsw i32 0, %conv1151
  %mul1153 = mul nsw i32 0, %add1152
  %sub1154 = sub nsw i32 %mul1153, 1
  %cmp1155 = icmp slt i32 %sub1154, 0
  br i1 %cmp1155, label %cond.true.1157, label %cond.false.1167

cond.true.1157:                                   ; preds = %cond.true.1147
  %151 = load i64, i64* %i, align 8
  %mul1158 = mul nsw i64 2, %151
  %conv1159 = trunc i64 %mul1158 to i32
  %add1160 = add nsw i32 0, %conv1159
  %mul1161 = mul nsw i32 0, %add1160
  %add1162 = add nsw i32 %mul1161, 1
  %shl1163 = shl i32 %add1162, 30
  %sub1164 = sub nsw i32 %shl1163, 1
  %mul1165 = mul nsw i32 %sub1164, 2
  %add1166 = add nsw i32 %mul1165, 1
  br label %cond.end.1173

cond.false.1167:                                  ; preds = %cond.true.1147
  %152 = load i64, i64* %i, align 8
  %mul1168 = mul nsw i64 2, %152
  %conv1169 = trunc i64 %mul1168 to i32
  %add1170 = add nsw i32 0, %conv1169
  %mul1171 = mul nsw i32 0, %add1170
  %sub1172 = sub nsw i32 %mul1171, 1
  br label %cond.end.1173

cond.end.1173:                                    ; preds = %cond.false.1167, %cond.true.1157
  %cond1174 = phi i32 [ %add1166, %cond.true.1157 ], [ %sub1172, %cond.false.1167 ]
  %div1175 = sdiv i32 %cond1174, 8
  %cmp1176 = icmp slt i32 %conv1149, %div1175
  br i1 %cmp1176, label %cond.true.1320, label %lor.lhs.false.1300

cond.false.1178:                                  ; preds = %cond.true.1142
  br i1 false, label %cond.true.1179, label %cond.false.1180

cond.true.1179:                                   ; preds = %cond.false.1178
  br i1 false, label %cond.true.1320, label %lor.lhs.false.1300

cond.false.1180:                                  ; preds = %cond.false.1178
  %153 = load i64, i64* %i, align 8
  %mul1181 = mul nsw i64 2, %153
  %conv1182 = trunc i64 %mul1181 to i32
  %add1183 = add nsw i32 0, %conv1182
  %mul1184 = mul nsw i32 0, %add1183
  %sub1185 = sub nsw i32 %mul1184, 1
  %cmp1186 = icmp slt i32 %sub1185, 0
  br i1 %cmp1186, label %cond.true.1188, label %cond.false.1208

cond.true.1188:                                   ; preds = %cond.false.1180
  %154 = load i64, i64* %i, align 8
  %mul1189 = mul nsw i64 2, %154
  %conv1190 = trunc i64 %mul1189 to i32
  %add1191 = add nsw i32 0, %conv1190
  %mul1192 = mul nsw i32 0, %add1191
  %add1193 = add nsw i32 %mul1192, 0
  %neg1194 = xor i32 %add1193, -1
  %cmp1195 = icmp eq i32 %neg1194, -1
  %conv1196 = zext i1 %cmp1195 to i32
  %sub1197 = sub nsw i32 0, %conv1196
  %155 = load i64, i64* %i, align 8
  %mul1198 = mul nsw i64 2, %155
  %conv1199 = trunc i64 %mul1198 to i32
  %add1200 = add nsw i32 0, %conv1199
  %mul1201 = mul nsw i32 0, %add1200
  %add1202 = add nsw i32 %mul1201, 1
  %shl1203 = shl i32 %add1202, 30
  %sub1204 = sub nsw i32 %shl1203, 1
  %mul1205 = mul nsw i32 %sub1204, 2
  %add1206 = add nsw i32 %mul1205, 1
  %sub1207 = sub nsw i32 %sub1197, %add1206
  br label %cond.end.1214

cond.false.1208:                                  ; preds = %cond.false.1180
  %156 = load i64, i64* %i, align 8
  %mul1209 = mul nsw i64 2, %156
  %conv1210 = trunc i64 %mul1209 to i32
  %add1211 = add nsw i32 0, %conv1210
  %mul1212 = mul nsw i32 0, %add1211
  %add1213 = add nsw i32 %mul1212, 0
  br label %cond.end.1214

cond.end.1214:                                    ; preds = %cond.false.1208, %cond.true.1188
  %cond1215 = phi i32 [ %sub1207, %cond.true.1188 ], [ %add1213, %cond.false.1208 ]
  %div1216 = sdiv i32 %cond1215, 8
  %157 = load i64, i64* %i, align 8
  %mul1217 = mul nsw i64 2, %157
  %conv1218 = trunc i64 %mul1217 to i32
  %cmp1219 = icmp slt i32 %div1216, %conv1218
  br i1 %cmp1219, label %cond.true.1320, label %lor.lhs.false.1300

cond.false.1221:                                  ; preds = %lor.lhs.false.1141
  br i1 false, label %cond.true.1222, label %cond.false.1223

cond.true.1222:                                   ; preds = %cond.false.1221
  br i1 false, label %cond.true.1320, label %lor.lhs.false.1300

cond.false.1223:                                  ; preds = %cond.false.1221
  %158 = load i64, i64* %i, align 8
  %mul1224 = mul nsw i64 2, %158
  %conv1225 = trunc i64 %mul1224 to i32
  %cmp1226 = icmp slt i32 %conv1225, 0
  br i1 %cmp1226, label %cond.true.1228, label %cond.false.1269

cond.true.1228:                                   ; preds = %cond.false.1223
  %159 = load i64, i64* %i, align 8
  %mul1229 = mul nsw i64 2, %159
  %conv1230 = trunc i64 %mul1229 to i32
  %160 = load i64, i64* %i, align 8
  %mul1231 = mul nsw i64 2, %160
  %conv1232 = trunc i64 %mul1231 to i32
  %add1233 = add nsw i32 0, %conv1232
  %mul1234 = mul nsw i32 0, %add1233
  %sub1235 = sub nsw i32 %mul1234, 1
  %cmp1236 = icmp slt i32 %sub1235, 0
  br i1 %cmp1236, label %cond.true.1238, label %cond.false.1258

cond.true.1238:                                   ; preds = %cond.true.1228
  %161 = load i64, i64* %i, align 8
  %mul1239 = mul nsw i64 2, %161
  %conv1240 = trunc i64 %mul1239 to i32
  %add1241 = add nsw i32 0, %conv1240
  %mul1242 = mul nsw i32 0, %add1241
  %add1243 = add nsw i32 %mul1242, 0
  %neg1244 = xor i32 %add1243, -1
  %cmp1245 = icmp eq i32 %neg1244, -1
  %conv1246 = zext i1 %cmp1245 to i32
  %sub1247 = sub nsw i32 0, %conv1246
  %162 = load i64, i64* %i, align 8
  %mul1248 = mul nsw i64 2, %162
  %conv1249 = trunc i64 %mul1248 to i32
  %add1250 = add nsw i32 0, %conv1249
  %mul1251 = mul nsw i32 0, %add1250
  %add1252 = add nsw i32 %mul1251, 1
  %shl1253 = shl i32 %add1252, 30
  %sub1254 = sub nsw i32 %shl1253, 1
  %mul1255 = mul nsw i32 %sub1254, 2
  %add1256 = add nsw i32 %mul1255, 1
  %sub1257 = sub nsw i32 %sub1247, %add1256
  br label %cond.end.1264

cond.false.1258:                                  ; preds = %cond.true.1228
  %163 = load i64, i64* %i, align 8
  %mul1259 = mul nsw i64 2, %163
  %conv1260 = trunc i64 %mul1259 to i32
  %add1261 = add nsw i32 0, %conv1260
  %mul1262 = mul nsw i32 0, %add1261
  %add1263 = add nsw i32 %mul1262, 0
  br label %cond.end.1264

cond.end.1264:                                    ; preds = %cond.false.1258, %cond.true.1238
  %cond1265 = phi i32 [ %sub1257, %cond.true.1238 ], [ %add1263, %cond.false.1258 ]
  %div1266 = sdiv i32 %cond1265, 8
  %cmp1267 = icmp slt i32 %conv1230, %div1266
  br i1 %cmp1267, label %cond.true.1320, label %lor.lhs.false.1300

cond.false.1269:                                  ; preds = %cond.false.1223
  %164 = load i64, i64* %i, align 8
  %mul1270 = mul nsw i64 2, %164
  %conv1271 = trunc i64 %mul1270 to i32
  %add1272 = add nsw i32 0, %conv1271
  %mul1273 = mul nsw i32 0, %add1272
  %sub1274 = sub nsw i32 %mul1273, 1
  %cmp1275 = icmp slt i32 %sub1274, 0
  br i1 %cmp1275, label %cond.true.1277, label %cond.false.1287

cond.true.1277:                                   ; preds = %cond.false.1269
  %165 = load i64, i64* %i, align 8
  %mul1278 = mul nsw i64 2, %165
  %conv1279 = trunc i64 %mul1278 to i32
  %add1280 = add nsw i32 0, %conv1279
  %mul1281 = mul nsw i32 0, %add1280
  %add1282 = add nsw i32 %mul1281, 1
  %shl1283 = shl i32 %add1282, 30
  %sub1284 = sub nsw i32 %shl1283, 1
  %mul1285 = mul nsw i32 %sub1284, 2
  %add1286 = add nsw i32 %mul1285, 1
  br label %cond.end.1293

cond.false.1287:                                  ; preds = %cond.false.1269
  %166 = load i64, i64* %i, align 8
  %mul1288 = mul nsw i64 2, %166
  %conv1289 = trunc i64 %mul1288 to i32
  %add1290 = add nsw i32 0, %conv1289
  %mul1291 = mul nsw i32 0, %add1290
  %sub1292 = sub nsw i32 %mul1291, 1
  br label %cond.end.1293

cond.end.1293:                                    ; preds = %cond.false.1287, %cond.true.1277
  %cond1294 = phi i32 [ %add1286, %cond.true.1277 ], [ %sub1292, %cond.false.1287 ]
  %div1295 = sdiv i32 %cond1294, 8
  %167 = load i64, i64* %i, align 8
  %mul1296 = mul nsw i64 2, %167
  %conv1297 = trunc i64 %mul1296 to i32
  %cmp1298 = icmp slt i32 %div1295, %conv1297
  br i1 %cmp1298, label %cond.true.1320, label %lor.lhs.false.1300

lor.lhs.false.1300:                               ; preds = %cond.end.1293, %cond.end.1264, %cond.true.1222, %cond.end.1214, %cond.true.1179, %cond.end.1173
  %168 = load i64, i64* %i, align 8
  %mul1301 = mul nsw i64 2, %168
  %conv1302 = trunc i64 %mul1301 to i32
  %mul1303 = mul nsw i32 %conv1302, 8
  %mul1304 = mul nsw i32 0, %mul1303
  %sub1305 = sub nsw i32 %mul1304, 1
  %cmp1306 = icmp slt i32 %sub1305, 0
  br i1 %cmp1306, label %land.lhs.true.1308, label %lor.lhs.false.1314

land.lhs.true.1308:                               ; preds = %lor.lhs.false.1300
  %169 = load i64, i64* %i, align 8
  %mul1309 = mul nsw i64 2, %169
  %conv1310 = trunc i64 %mul1309 to i32
  %mul1311 = mul nsw i32 %conv1310, 8
  %cmp1312 = icmp slt i32 %mul1311, -2147483648
  br i1 %cmp1312, label %cond.true.1320, label %lor.lhs.false.1314

lor.lhs.false.1314:                               ; preds = %land.lhs.true.1308, %lor.lhs.false.1300
  %170 = load i64, i64* %i, align 8
  %mul1315 = mul nsw i64 2, %170
  %conv1316 = trunc i64 %mul1315 to i32
  %mul1317 = mul nsw i32 %conv1316, 8
  %cmp1318 = icmp slt i32 2147483647, %mul1317
  br i1 %cmp1318, label %cond.true.1320, label %cond.false.1339

cond.true.1320:                                   ; preds = %lor.lhs.false.1314, %land.lhs.true.1308, %cond.end.1293, %cond.end.1264, %cond.true.1222, %cond.end.1214, %cond.true.1179, %cond.end.1173, %land.lhs.true.1136
  %171 = load i64, i64* %i, align 8
  %mul1321 = mul nsw i64 2, %171
  %conv1322 = trunc i64 %mul1321 to i32
  %mul1323 = mul i32 %conv1322, 8
  %cmp1324 = icmp ule i32 %mul1323, 2147483647
  br i1 %cmp1324, label %cond.true.1326, label %cond.false.1330

cond.true.1326:                                   ; preds = %cond.true.1320
  %172 = load i64, i64* %i, align 8
  %mul1327 = mul nsw i64 2, %172
  %conv1328 = trunc i64 %mul1327 to i32
  %mul1329 = mul i32 %conv1328, 8
  br label %cond.end.1336

cond.false.1330:                                  ; preds = %cond.true.1320
  %173 = load i64, i64* %i, align 8
  %mul1331 = mul nsw i64 2, %173
  %conv1332 = trunc i64 %mul1331 to i32
  %mul1333 = mul i32 %conv1332, 8
  %sub1334 = sub i32 %mul1333, -2147483648
  %add1335 = add nsw i32 %sub1334, -2147483648
  br label %cond.end.1336

cond.end.1336:                                    ; preds = %cond.false.1330, %cond.true.1326
  %cond1337 = phi i32 [ %mul1329, %cond.true.1326 ], [ %add1335, %cond.false.1330 ]
  %conv1338 = sext i32 %cond1337 to i64
  store i64 %conv1338, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2504

cond.false.1339:                                  ; preds = %lor.lhs.false.1314
  %174 = load i64, i64* %i, align 8
  %mul1340 = mul nsw i64 2, %174
  %conv1341 = trunc i64 %mul1340 to i32
  %mul1342 = mul i32 %conv1341, 8
  %cmp1343 = icmp ule i32 %mul1342, 2147483647
  br i1 %cmp1343, label %cond.true.1345, label %cond.false.1349

cond.true.1345:                                   ; preds = %cond.false.1339
  %175 = load i64, i64* %i, align 8
  %mul1346 = mul nsw i64 2, %175
  %conv1347 = trunc i64 %mul1346 to i32
  %mul1348 = mul i32 %conv1347, 8
  br label %cond.end.1355

cond.false.1349:                                  ; preds = %cond.false.1339
  %176 = load i64, i64* %i, align 8
  %mul1350 = mul nsw i64 2, %176
  %conv1351 = trunc i64 %mul1350 to i32
  %mul1352 = mul i32 %conv1351, 8
  %sub1353 = sub i32 %mul1352, -2147483648
  %add1354 = add nsw i32 %sub1353, -2147483648
  br label %cond.end.1355

cond.end.1355:                                    ; preds = %cond.false.1349, %cond.true.1345
  %cond1356 = phi i32 [ %mul1348, %cond.true.1345 ], [ %add1354, %cond.false.1349 ]
  %conv1357 = sext i32 %cond1356 to i64
  store i64 %conv1357, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2504

cond.false.1358:                                  ; preds = %cond.true.1097
  %177 = load i64, i64* %i, align 8
  %mul1359 = mul nsw i64 2, %177
  %add1360 = add nsw i64 0, %mul1359
  %mul1361 = mul nsw i64 0, %add1360
  %sub1362 = sub nsw i64 %mul1361, 1
  %cmp1363 = icmp slt i64 %sub1362, 0
  br i1 %cmp1363, label %cond.true.1365, label %cond.false.1384

cond.true.1365:                                   ; preds = %cond.false.1358
  %178 = load i64, i64* %i, align 8
  %mul1366 = mul nsw i64 2, %178
  %add1367 = add nsw i64 0, %mul1366
  %mul1368 = mul nsw i64 0, %add1367
  %add1369 = add nsw i64 %mul1368, 0
  %neg1370 = xor i64 %add1369, -1
  %cmp1371 = icmp eq i64 %neg1370, -1
  %conv1372 = zext i1 %cmp1371 to i32
  %sub1373 = sub nsw i32 0, %conv1372
  %conv1374 = sext i32 %sub1373 to i64
  %179 = load i64, i64* %i, align 8
  %mul1375 = mul nsw i64 2, %179
  %add1376 = add nsw i64 0, %mul1375
  %mul1377 = mul nsw i64 0, %add1376
  %add1378 = add nsw i64 %mul1377, 1
  %shl1379 = shl i64 %add1378, 62
  %sub1380 = sub nsw i64 %shl1379, 1
  %mul1381 = mul nsw i64 %sub1380, 2
  %add1382 = add nsw i64 %mul1381, 1
  %sub1383 = sub nsw i64 %conv1374, %add1382
  br label %cond.end.1389

cond.false.1384:                                  ; preds = %cond.false.1358
  %180 = load i64, i64* %i, align 8
  %mul1385 = mul nsw i64 2, %180
  %add1386 = add nsw i64 0, %mul1385
  %mul1387 = mul nsw i64 0, %add1386
  %add1388 = add nsw i64 %mul1387, 0
  br label %cond.end.1389

cond.end.1389:                                    ; preds = %cond.false.1384, %cond.true.1365
  %cond1390 = phi i64 [ %sub1383, %cond.true.1365 ], [ %add1388, %cond.false.1384 ]
  %cmp1391 = icmp eq i64 %cond1390, 0
  br i1 %cmp1391, label %land.lhs.true.1393, label %lor.lhs.false.1397

land.lhs.true.1393:                               ; preds = %cond.end.1389
  %181 = load i64, i64* %i, align 8
  %mul1394 = mul nsw i64 2, %181
  %cmp1395 = icmp slt i64 %mul1394, 0
  br i1 %cmp1395, label %cond.true.1555, label %lor.lhs.false.1397

lor.lhs.false.1397:                               ; preds = %land.lhs.true.1393, %cond.end.1389
  br i1 false, label %cond.true.1398, label %cond.false.1468

cond.true.1398:                                   ; preds = %lor.lhs.false.1397
  %182 = load i64, i64* %i, align 8
  %mul1399 = mul nsw i64 2, %182
  %cmp1400 = icmp slt i64 %mul1399, 0
  br i1 %cmp1400, label %cond.true.1402, label %cond.false.1429

cond.true.1402:                                   ; preds = %cond.true.1398
  %183 = load i64, i64* %i, align 8
  %mul1403 = mul nsw i64 2, %183
  %184 = load i64, i64* %i, align 8
  %mul1404 = mul nsw i64 2, %184
  %add1405 = add nsw i64 0, %mul1404
  %mul1406 = mul nsw i64 0, %add1405
  %sub1407 = sub nsw i64 %mul1406, 1
  %cmp1408 = icmp slt i64 %sub1407, 0
  br i1 %cmp1408, label %cond.true.1410, label %cond.false.1419

cond.true.1410:                                   ; preds = %cond.true.1402
  %185 = load i64, i64* %i, align 8
  %mul1411 = mul nsw i64 2, %185
  %add1412 = add nsw i64 0, %mul1411
  %mul1413 = mul nsw i64 0, %add1412
  %add1414 = add nsw i64 %mul1413, 1
  %shl1415 = shl i64 %add1414, 62
  %sub1416 = sub nsw i64 %shl1415, 1
  %mul1417 = mul nsw i64 %sub1416, 2
  %add1418 = add nsw i64 %mul1417, 1
  br label %cond.end.1424

cond.false.1419:                                  ; preds = %cond.true.1402
  %186 = load i64, i64* %i, align 8
  %mul1420 = mul nsw i64 2, %186
  %add1421 = add nsw i64 0, %mul1420
  %mul1422 = mul nsw i64 0, %add1421
  %sub1423 = sub nsw i64 %mul1422, 1
  br label %cond.end.1424

cond.end.1424:                                    ; preds = %cond.false.1419, %cond.true.1410
  %cond1425 = phi i64 [ %add1418, %cond.true.1410 ], [ %sub1423, %cond.false.1419 ]
  %div1426 = sdiv i64 %cond1425, 8
  %cmp1427 = icmp slt i64 %mul1403, %div1426
  br i1 %cmp1427, label %cond.true.1555, label %lor.lhs.false.1538

cond.false.1429:                                  ; preds = %cond.true.1398
  br i1 false, label %cond.true.1430, label %cond.false.1431

cond.true.1430:                                   ; preds = %cond.false.1429
  br i1 false, label %cond.true.1555, label %lor.lhs.false.1538

cond.false.1431:                                  ; preds = %cond.false.1429
  %187 = load i64, i64* %i, align 8
  %mul1432 = mul nsw i64 2, %187
  %add1433 = add nsw i64 0, %mul1432
  %mul1434 = mul nsw i64 0, %add1433
  %sub1435 = sub nsw i64 %mul1434, 1
  %cmp1436 = icmp slt i64 %sub1435, 0
  br i1 %cmp1436, label %cond.true.1438, label %cond.false.1457

cond.true.1438:                                   ; preds = %cond.false.1431
  %188 = load i64, i64* %i, align 8
  %mul1439 = mul nsw i64 2, %188
  %add1440 = add nsw i64 0, %mul1439
  %mul1441 = mul nsw i64 0, %add1440
  %add1442 = add nsw i64 %mul1441, 0
  %neg1443 = xor i64 %add1442, -1
  %cmp1444 = icmp eq i64 %neg1443, -1
  %conv1445 = zext i1 %cmp1444 to i32
  %sub1446 = sub nsw i32 0, %conv1445
  %conv1447 = sext i32 %sub1446 to i64
  %189 = load i64, i64* %i, align 8
  %mul1448 = mul nsw i64 2, %189
  %add1449 = add nsw i64 0, %mul1448
  %mul1450 = mul nsw i64 0, %add1449
  %add1451 = add nsw i64 %mul1450, 1
  %shl1452 = shl i64 %add1451, 62
  %sub1453 = sub nsw i64 %shl1452, 1
  %mul1454 = mul nsw i64 %sub1453, 2
  %add1455 = add nsw i64 %mul1454, 1
  %sub1456 = sub nsw i64 %conv1447, %add1455
  br label %cond.end.1462

cond.false.1457:                                  ; preds = %cond.false.1431
  %190 = load i64, i64* %i, align 8
  %mul1458 = mul nsw i64 2, %190
  %add1459 = add nsw i64 0, %mul1458
  %mul1460 = mul nsw i64 0, %add1459
  %add1461 = add nsw i64 %mul1460, 0
  br label %cond.end.1462

cond.end.1462:                                    ; preds = %cond.false.1457, %cond.true.1438
  %cond1463 = phi i64 [ %sub1456, %cond.true.1438 ], [ %add1461, %cond.false.1457 ]
  %div1464 = sdiv i64 %cond1463, 8
  %191 = load i64, i64* %i, align 8
  %mul1465 = mul nsw i64 2, %191
  %cmp1466 = icmp slt i64 %div1464, %mul1465
  br i1 %cmp1466, label %cond.true.1555, label %lor.lhs.false.1538

cond.false.1468:                                  ; preds = %lor.lhs.false.1397
  br i1 false, label %cond.true.1469, label %cond.false.1470

cond.true.1469:                                   ; preds = %cond.false.1468
  br i1 false, label %cond.true.1555, label %lor.lhs.false.1538

cond.false.1470:                                  ; preds = %cond.false.1468
  %192 = load i64, i64* %i, align 8
  %mul1471 = mul nsw i64 2, %192
  %cmp1472 = icmp slt i64 %mul1471, 0
  br i1 %cmp1472, label %cond.true.1474, label %cond.false.1511

cond.true.1474:                                   ; preds = %cond.false.1470
  %193 = load i64, i64* %i, align 8
  %mul1475 = mul nsw i64 2, %193
  %194 = load i64, i64* %i, align 8
  %mul1476 = mul nsw i64 2, %194
  %add1477 = add nsw i64 0, %mul1476
  %mul1478 = mul nsw i64 0, %add1477
  %sub1479 = sub nsw i64 %mul1478, 1
  %cmp1480 = icmp slt i64 %sub1479, 0
  br i1 %cmp1480, label %cond.true.1482, label %cond.false.1501

cond.true.1482:                                   ; preds = %cond.true.1474
  %195 = load i64, i64* %i, align 8
  %mul1483 = mul nsw i64 2, %195
  %add1484 = add nsw i64 0, %mul1483
  %mul1485 = mul nsw i64 0, %add1484
  %add1486 = add nsw i64 %mul1485, 0
  %neg1487 = xor i64 %add1486, -1
  %cmp1488 = icmp eq i64 %neg1487, -1
  %conv1489 = zext i1 %cmp1488 to i32
  %sub1490 = sub nsw i32 0, %conv1489
  %conv1491 = sext i32 %sub1490 to i64
  %196 = load i64, i64* %i, align 8
  %mul1492 = mul nsw i64 2, %196
  %add1493 = add nsw i64 0, %mul1492
  %mul1494 = mul nsw i64 0, %add1493
  %add1495 = add nsw i64 %mul1494, 1
  %shl1496 = shl i64 %add1495, 62
  %sub1497 = sub nsw i64 %shl1496, 1
  %mul1498 = mul nsw i64 %sub1497, 2
  %add1499 = add nsw i64 %mul1498, 1
  %sub1500 = sub nsw i64 %conv1491, %add1499
  br label %cond.end.1506

cond.false.1501:                                  ; preds = %cond.true.1474
  %197 = load i64, i64* %i, align 8
  %mul1502 = mul nsw i64 2, %197
  %add1503 = add nsw i64 0, %mul1502
  %mul1504 = mul nsw i64 0, %add1503
  %add1505 = add nsw i64 %mul1504, 0
  br label %cond.end.1506

cond.end.1506:                                    ; preds = %cond.false.1501, %cond.true.1482
  %cond1507 = phi i64 [ %sub1500, %cond.true.1482 ], [ %add1505, %cond.false.1501 ]
  %div1508 = sdiv i64 %cond1507, 8
  %cmp1509 = icmp slt i64 %mul1475, %div1508
  br i1 %cmp1509, label %cond.true.1555, label %lor.lhs.false.1538

cond.false.1511:                                  ; preds = %cond.false.1470
  %198 = load i64, i64* %i, align 8
  %mul1512 = mul nsw i64 2, %198
  %add1513 = add nsw i64 0, %mul1512
  %mul1514 = mul nsw i64 0, %add1513
  %sub1515 = sub nsw i64 %mul1514, 1
  %cmp1516 = icmp slt i64 %sub1515, 0
  br i1 %cmp1516, label %cond.true.1518, label %cond.false.1527

cond.true.1518:                                   ; preds = %cond.false.1511
  %199 = load i64, i64* %i, align 8
  %mul1519 = mul nsw i64 2, %199
  %add1520 = add nsw i64 0, %mul1519
  %mul1521 = mul nsw i64 0, %add1520
  %add1522 = add nsw i64 %mul1521, 1
  %shl1523 = shl i64 %add1522, 62
  %sub1524 = sub nsw i64 %shl1523, 1
  %mul1525 = mul nsw i64 %sub1524, 2
  %add1526 = add nsw i64 %mul1525, 1
  br label %cond.end.1532

cond.false.1527:                                  ; preds = %cond.false.1511
  %200 = load i64, i64* %i, align 8
  %mul1528 = mul nsw i64 2, %200
  %add1529 = add nsw i64 0, %mul1528
  %mul1530 = mul nsw i64 0, %add1529
  %sub1531 = sub nsw i64 %mul1530, 1
  br label %cond.end.1532

cond.end.1532:                                    ; preds = %cond.false.1527, %cond.true.1518
  %cond1533 = phi i64 [ %add1526, %cond.true.1518 ], [ %sub1531, %cond.false.1527 ]
  %div1534 = sdiv i64 %cond1533, 8
  %201 = load i64, i64* %i, align 8
  %mul1535 = mul nsw i64 2, %201
  %cmp1536 = icmp slt i64 %div1534, %mul1535
  br i1 %cmp1536, label %cond.true.1555, label %lor.lhs.false.1538

lor.lhs.false.1538:                               ; preds = %cond.end.1532, %cond.end.1506, %cond.true.1469, %cond.end.1462, %cond.true.1430, %cond.end.1424
  %202 = load i64, i64* %i, align 8
  %mul1539 = mul nsw i64 2, %202
  %mul1540 = mul nsw i64 %mul1539, 8
  %mul1541 = mul nsw i64 0, %mul1540
  %sub1542 = sub nsw i64 %mul1541, 1
  %cmp1543 = icmp slt i64 %sub1542, 0
  br i1 %cmp1543, label %land.lhs.true.1545, label %lor.lhs.false.1550

land.lhs.true.1545:                               ; preds = %lor.lhs.false.1538
  %203 = load i64, i64* %i, align 8
  %mul1546 = mul nsw i64 2, %203
  %mul1547 = mul nsw i64 %mul1546, 8
  %cmp1548 = icmp slt i64 %mul1547, -2147483648
  br i1 %cmp1548, label %cond.true.1555, label %lor.lhs.false.1550

lor.lhs.false.1550:                               ; preds = %land.lhs.true.1545, %lor.lhs.false.1538
  %204 = load i64, i64* %i, align 8
  %mul1551 = mul nsw i64 2, %204
  %mul1552 = mul nsw i64 %mul1551, 8
  %cmp1553 = icmp slt i64 2147483647, %mul1552
  br i1 %cmp1553, label %cond.true.1555, label %cond.false.1574

cond.true.1555:                                   ; preds = %lor.lhs.false.1550, %land.lhs.true.1545, %cond.end.1532, %cond.end.1506, %cond.true.1469, %cond.end.1462, %cond.true.1430, %cond.end.1424, %land.lhs.true.1393
  %205 = load i64, i64* %i, align 8
  %mul1556 = mul nsw i64 2, %205
  %conv1557 = trunc i64 %mul1556 to i32
  %mul1558 = mul i32 %conv1557, 8
  %cmp1559 = icmp ule i32 %mul1558, 2147483647
  br i1 %cmp1559, label %cond.true.1561, label %cond.false.1565

cond.true.1561:                                   ; preds = %cond.true.1555
  %206 = load i64, i64* %i, align 8
  %mul1562 = mul nsw i64 2, %206
  %conv1563 = trunc i64 %mul1562 to i32
  %mul1564 = mul i32 %conv1563, 8
  br label %cond.end.1571

cond.false.1565:                                  ; preds = %cond.true.1555
  %207 = load i64, i64* %i, align 8
  %mul1566 = mul nsw i64 2, %207
  %conv1567 = trunc i64 %mul1566 to i32
  %mul1568 = mul i32 %conv1567, 8
  %sub1569 = sub i32 %mul1568, -2147483648
  %add1570 = add nsw i32 %sub1569, -2147483648
  br label %cond.end.1571

cond.end.1571:                                    ; preds = %cond.false.1565, %cond.true.1561
  %cond1572 = phi i32 [ %mul1564, %cond.true.1561 ], [ %add1570, %cond.false.1565 ]
  %conv1573 = sext i32 %cond1572 to i64
  store i64 %conv1573, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2504

cond.false.1574:                                  ; preds = %lor.lhs.false.1550
  %208 = load i64, i64* %i, align 8
  %mul1575 = mul nsw i64 2, %208
  %conv1576 = trunc i64 %mul1575 to i32
  %mul1577 = mul i32 %conv1576, 8
  %cmp1578 = icmp ule i32 %mul1577, 2147483647
  br i1 %cmp1578, label %cond.true.1580, label %cond.false.1584

cond.true.1580:                                   ; preds = %cond.false.1574
  %209 = load i64, i64* %i, align 8
  %mul1581 = mul nsw i64 2, %209
  %conv1582 = trunc i64 %mul1581 to i32
  %mul1583 = mul i32 %conv1582, 8
  br label %cond.end.1590

cond.false.1584:                                  ; preds = %cond.false.1574
  %210 = load i64, i64* %i, align 8
  %mul1585 = mul nsw i64 2, %210
  %conv1586 = trunc i64 %mul1585 to i32
  %mul1587 = mul i32 %conv1586, 8
  %sub1588 = sub i32 %mul1587, -2147483648
  %add1589 = add nsw i32 %sub1588, -2147483648
  br label %cond.end.1590

cond.end.1590:                                    ; preds = %cond.false.1584, %cond.true.1580
  %cond1591 = phi i32 [ %mul1583, %cond.true.1580 ], [ %add1589, %cond.false.1584 ]
  %conv1592 = sext i32 %cond1591 to i64
  store i64 %conv1592, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2504

cond.false.1593:                                  ; preds = %cond.false.1096
  br i1 true, label %cond.true.1594, label %cond.false.2049

cond.true.1594:                                   ; preds = %cond.false.1593
  br i1 false, label %cond.true.1595, label %cond.false.1822

cond.true.1595:                                   ; preds = %cond.true.1594
  %211 = load i64, i64* %i, align 8
  %mul1596 = mul nsw i64 2, %211
  %add1597 = add nsw i64 0, %mul1596
  %mul1598 = mul nsw i64 0, %add1597
  %sub1599 = sub nsw i64 %mul1598, 1
  %cmp1600 = icmp slt i64 %sub1599, 0
  br i1 %cmp1600, label %cond.true.1602, label %cond.false.1621

cond.true.1602:                                   ; preds = %cond.true.1595
  %212 = load i64, i64* %i, align 8
  %mul1603 = mul nsw i64 2, %212
  %add1604 = add nsw i64 0, %mul1603
  %mul1605 = mul nsw i64 0, %add1604
  %add1606 = add nsw i64 %mul1605, 0
  %neg1607 = xor i64 %add1606, -1
  %cmp1608 = icmp eq i64 %neg1607, -1
  %conv1609 = zext i1 %cmp1608 to i32
  %sub1610 = sub nsw i32 0, %conv1609
  %conv1611 = sext i32 %sub1610 to i64
  %213 = load i64, i64* %i, align 8
  %mul1612 = mul nsw i64 2, %213
  %add1613 = add nsw i64 0, %mul1612
  %mul1614 = mul nsw i64 0, %add1613
  %add1615 = add nsw i64 %mul1614, 1
  %shl1616 = shl i64 %add1615, 62
  %sub1617 = sub nsw i64 %shl1616, 1
  %mul1618 = mul nsw i64 %sub1617, 2
  %add1619 = add nsw i64 %mul1618, 1
  %sub1620 = sub nsw i64 %conv1611, %add1619
  br label %cond.end.1626

cond.false.1621:                                  ; preds = %cond.true.1595
  %214 = load i64, i64* %i, align 8
  %mul1622 = mul nsw i64 2, %214
  %add1623 = add nsw i64 0, %mul1622
  %mul1624 = mul nsw i64 0, %add1623
  %add1625 = add nsw i64 %mul1624, 0
  br label %cond.end.1626

cond.end.1626:                                    ; preds = %cond.false.1621, %cond.true.1602
  %cond1627 = phi i64 [ %sub1620, %cond.true.1602 ], [ %add1625, %cond.false.1621 ]
  %cmp1628 = icmp eq i64 %cond1627, 0
  br i1 %cmp1628, label %land.lhs.true.1630, label %lor.lhs.false.1634

land.lhs.true.1630:                               ; preds = %cond.end.1626
  %215 = load i64, i64* %i, align 8
  %mul1631 = mul nsw i64 2, %215
  %cmp1632 = icmp slt i64 %mul1631, 0
  br i1 %cmp1632, label %cond.true.1792, label %lor.lhs.false.1634

lor.lhs.false.1634:                               ; preds = %land.lhs.true.1630, %cond.end.1626
  br i1 false, label %cond.true.1635, label %cond.false.1705

cond.true.1635:                                   ; preds = %lor.lhs.false.1634
  %216 = load i64, i64* %i, align 8
  %mul1636 = mul nsw i64 2, %216
  %cmp1637 = icmp slt i64 %mul1636, 0
  br i1 %cmp1637, label %cond.true.1639, label %cond.false.1666

cond.true.1639:                                   ; preds = %cond.true.1635
  %217 = load i64, i64* %i, align 8
  %mul1640 = mul nsw i64 2, %217
  %218 = load i64, i64* %i, align 8
  %mul1641 = mul nsw i64 2, %218
  %add1642 = add nsw i64 0, %mul1641
  %mul1643 = mul nsw i64 0, %add1642
  %sub1644 = sub nsw i64 %mul1643, 1
  %cmp1645 = icmp slt i64 %sub1644, 0
  br i1 %cmp1645, label %cond.true.1647, label %cond.false.1656

cond.true.1647:                                   ; preds = %cond.true.1639
  %219 = load i64, i64* %i, align 8
  %mul1648 = mul nsw i64 2, %219
  %add1649 = add nsw i64 0, %mul1648
  %mul1650 = mul nsw i64 0, %add1649
  %add1651 = add nsw i64 %mul1650, 1
  %shl1652 = shl i64 %add1651, 62
  %sub1653 = sub nsw i64 %shl1652, 1
  %mul1654 = mul nsw i64 %sub1653, 2
  %add1655 = add nsw i64 %mul1654, 1
  br label %cond.end.1661

cond.false.1656:                                  ; preds = %cond.true.1639
  %220 = load i64, i64* %i, align 8
  %mul1657 = mul nsw i64 2, %220
  %add1658 = add nsw i64 0, %mul1657
  %mul1659 = mul nsw i64 0, %add1658
  %sub1660 = sub nsw i64 %mul1659, 1
  br label %cond.end.1661

cond.end.1661:                                    ; preds = %cond.false.1656, %cond.true.1647
  %cond1662 = phi i64 [ %add1655, %cond.true.1647 ], [ %sub1660, %cond.false.1656 ]
  %div1663 = sdiv i64 %cond1662, 8
  %cmp1664 = icmp slt i64 %mul1640, %div1663
  br i1 %cmp1664, label %cond.true.1792, label %lor.lhs.false.1775

cond.false.1666:                                  ; preds = %cond.true.1635
  br i1 false, label %cond.true.1667, label %cond.false.1668

cond.true.1667:                                   ; preds = %cond.false.1666
  br i1 false, label %cond.true.1792, label %lor.lhs.false.1775

cond.false.1668:                                  ; preds = %cond.false.1666
  %221 = load i64, i64* %i, align 8
  %mul1669 = mul nsw i64 2, %221
  %add1670 = add nsw i64 0, %mul1669
  %mul1671 = mul nsw i64 0, %add1670
  %sub1672 = sub nsw i64 %mul1671, 1
  %cmp1673 = icmp slt i64 %sub1672, 0
  br i1 %cmp1673, label %cond.true.1675, label %cond.false.1694

cond.true.1675:                                   ; preds = %cond.false.1668
  %222 = load i64, i64* %i, align 8
  %mul1676 = mul nsw i64 2, %222
  %add1677 = add nsw i64 0, %mul1676
  %mul1678 = mul nsw i64 0, %add1677
  %add1679 = add nsw i64 %mul1678, 0
  %neg1680 = xor i64 %add1679, -1
  %cmp1681 = icmp eq i64 %neg1680, -1
  %conv1682 = zext i1 %cmp1681 to i32
  %sub1683 = sub nsw i32 0, %conv1682
  %conv1684 = sext i32 %sub1683 to i64
  %223 = load i64, i64* %i, align 8
  %mul1685 = mul nsw i64 2, %223
  %add1686 = add nsw i64 0, %mul1685
  %mul1687 = mul nsw i64 0, %add1686
  %add1688 = add nsw i64 %mul1687, 1
  %shl1689 = shl i64 %add1688, 62
  %sub1690 = sub nsw i64 %shl1689, 1
  %mul1691 = mul nsw i64 %sub1690, 2
  %add1692 = add nsw i64 %mul1691, 1
  %sub1693 = sub nsw i64 %conv1684, %add1692
  br label %cond.end.1699

cond.false.1694:                                  ; preds = %cond.false.1668
  %224 = load i64, i64* %i, align 8
  %mul1695 = mul nsw i64 2, %224
  %add1696 = add nsw i64 0, %mul1695
  %mul1697 = mul nsw i64 0, %add1696
  %add1698 = add nsw i64 %mul1697, 0
  br label %cond.end.1699

cond.end.1699:                                    ; preds = %cond.false.1694, %cond.true.1675
  %cond1700 = phi i64 [ %sub1693, %cond.true.1675 ], [ %add1698, %cond.false.1694 ]
  %div1701 = sdiv i64 %cond1700, 8
  %225 = load i64, i64* %i, align 8
  %mul1702 = mul nsw i64 2, %225
  %cmp1703 = icmp slt i64 %div1701, %mul1702
  br i1 %cmp1703, label %cond.true.1792, label %lor.lhs.false.1775

cond.false.1705:                                  ; preds = %lor.lhs.false.1634
  br i1 false, label %cond.true.1706, label %cond.false.1707

cond.true.1706:                                   ; preds = %cond.false.1705
  br i1 false, label %cond.true.1792, label %lor.lhs.false.1775

cond.false.1707:                                  ; preds = %cond.false.1705
  %226 = load i64, i64* %i, align 8
  %mul1708 = mul nsw i64 2, %226
  %cmp1709 = icmp slt i64 %mul1708, 0
  br i1 %cmp1709, label %cond.true.1711, label %cond.false.1748

cond.true.1711:                                   ; preds = %cond.false.1707
  %227 = load i64, i64* %i, align 8
  %mul1712 = mul nsw i64 2, %227
  %228 = load i64, i64* %i, align 8
  %mul1713 = mul nsw i64 2, %228
  %add1714 = add nsw i64 0, %mul1713
  %mul1715 = mul nsw i64 0, %add1714
  %sub1716 = sub nsw i64 %mul1715, 1
  %cmp1717 = icmp slt i64 %sub1716, 0
  br i1 %cmp1717, label %cond.true.1719, label %cond.false.1738

cond.true.1719:                                   ; preds = %cond.true.1711
  %229 = load i64, i64* %i, align 8
  %mul1720 = mul nsw i64 2, %229
  %add1721 = add nsw i64 0, %mul1720
  %mul1722 = mul nsw i64 0, %add1721
  %add1723 = add nsw i64 %mul1722, 0
  %neg1724 = xor i64 %add1723, -1
  %cmp1725 = icmp eq i64 %neg1724, -1
  %conv1726 = zext i1 %cmp1725 to i32
  %sub1727 = sub nsw i32 0, %conv1726
  %conv1728 = sext i32 %sub1727 to i64
  %230 = load i64, i64* %i, align 8
  %mul1729 = mul nsw i64 2, %230
  %add1730 = add nsw i64 0, %mul1729
  %mul1731 = mul nsw i64 0, %add1730
  %add1732 = add nsw i64 %mul1731, 1
  %shl1733 = shl i64 %add1732, 62
  %sub1734 = sub nsw i64 %shl1733, 1
  %mul1735 = mul nsw i64 %sub1734, 2
  %add1736 = add nsw i64 %mul1735, 1
  %sub1737 = sub nsw i64 %conv1728, %add1736
  br label %cond.end.1743

cond.false.1738:                                  ; preds = %cond.true.1711
  %231 = load i64, i64* %i, align 8
  %mul1739 = mul nsw i64 2, %231
  %add1740 = add nsw i64 0, %mul1739
  %mul1741 = mul nsw i64 0, %add1740
  %add1742 = add nsw i64 %mul1741, 0
  br label %cond.end.1743

cond.end.1743:                                    ; preds = %cond.false.1738, %cond.true.1719
  %cond1744 = phi i64 [ %sub1737, %cond.true.1719 ], [ %add1742, %cond.false.1738 ]
  %div1745 = sdiv i64 %cond1744, 8
  %cmp1746 = icmp slt i64 %mul1712, %div1745
  br i1 %cmp1746, label %cond.true.1792, label %lor.lhs.false.1775

cond.false.1748:                                  ; preds = %cond.false.1707
  %232 = load i64, i64* %i, align 8
  %mul1749 = mul nsw i64 2, %232
  %add1750 = add nsw i64 0, %mul1749
  %mul1751 = mul nsw i64 0, %add1750
  %sub1752 = sub nsw i64 %mul1751, 1
  %cmp1753 = icmp slt i64 %sub1752, 0
  br i1 %cmp1753, label %cond.true.1755, label %cond.false.1764

cond.true.1755:                                   ; preds = %cond.false.1748
  %233 = load i64, i64* %i, align 8
  %mul1756 = mul nsw i64 2, %233
  %add1757 = add nsw i64 0, %mul1756
  %mul1758 = mul nsw i64 0, %add1757
  %add1759 = add nsw i64 %mul1758, 1
  %shl1760 = shl i64 %add1759, 62
  %sub1761 = sub nsw i64 %shl1760, 1
  %mul1762 = mul nsw i64 %sub1761, 2
  %add1763 = add nsw i64 %mul1762, 1
  br label %cond.end.1769

cond.false.1764:                                  ; preds = %cond.false.1748
  %234 = load i64, i64* %i, align 8
  %mul1765 = mul nsw i64 2, %234
  %add1766 = add nsw i64 0, %mul1765
  %mul1767 = mul nsw i64 0, %add1766
  %sub1768 = sub nsw i64 %mul1767, 1
  br label %cond.end.1769

cond.end.1769:                                    ; preds = %cond.false.1764, %cond.true.1755
  %cond1770 = phi i64 [ %add1763, %cond.true.1755 ], [ %sub1768, %cond.false.1764 ]
  %div1771 = sdiv i64 %cond1770, 8
  %235 = load i64, i64* %i, align 8
  %mul1772 = mul nsw i64 2, %235
  %cmp1773 = icmp slt i64 %div1771, %mul1772
  br i1 %cmp1773, label %cond.true.1792, label %lor.lhs.false.1775

lor.lhs.false.1775:                               ; preds = %cond.end.1769, %cond.end.1743, %cond.true.1706, %cond.end.1699, %cond.true.1667, %cond.end.1661
  %236 = load i64, i64* %i, align 8
  %mul1776 = mul nsw i64 2, %236
  %mul1777 = mul nsw i64 %mul1776, 8
  %mul1778 = mul nsw i64 0, %mul1777
  %sub1779 = sub nsw i64 %mul1778, 1
  %cmp1780 = icmp slt i64 %sub1779, 0
  br i1 %cmp1780, label %land.lhs.true.1782, label %lor.lhs.false.1787

land.lhs.true.1782:                               ; preds = %lor.lhs.false.1775
  %237 = load i64, i64* %i, align 8
  %mul1783 = mul nsw i64 2, %237
  %mul1784 = mul nsw i64 %mul1783, 8
  %cmp1785 = icmp slt i64 %mul1784, -9223372036854775808
  br i1 %cmp1785, label %cond.true.1792, label %lor.lhs.false.1787

lor.lhs.false.1787:                               ; preds = %land.lhs.true.1782, %lor.lhs.false.1775
  %238 = load i64, i64* %i, align 8
  %mul1788 = mul nsw i64 2, %238
  %mul1789 = mul nsw i64 %mul1788, 8
  %cmp1790 = icmp slt i64 9223372036854775807, %mul1789
  br i1 %cmp1790, label %cond.true.1792, label %cond.false.1807

cond.true.1792:                                   ; preds = %lor.lhs.false.1787, %land.lhs.true.1782, %cond.end.1769, %cond.end.1743, %cond.true.1706, %cond.end.1699, %cond.true.1667, %cond.end.1661, %land.lhs.true.1630
  %239 = load i64, i64* %i, align 8
  %mul1793 = mul nsw i64 2, %239
  %mul1794 = mul i64 %mul1793, 8
  %cmp1795 = icmp ule i64 %mul1794, 9223372036854775807
  br i1 %cmp1795, label %cond.true.1797, label %cond.false.1800

cond.true.1797:                                   ; preds = %cond.true.1792
  %240 = load i64, i64* %i, align 8
  %mul1798 = mul nsw i64 2, %240
  %mul1799 = mul i64 %mul1798, 8
  br label %cond.end.1805

cond.false.1800:                                  ; preds = %cond.true.1792
  %241 = load i64, i64* %i, align 8
  %mul1801 = mul nsw i64 2, %241
  %mul1802 = mul i64 %mul1801, 8
  %sub1803 = sub i64 %mul1802, -9223372036854775808
  %add1804 = add nsw i64 %sub1803, -9223372036854775808
  br label %cond.end.1805

cond.end.1805:                                    ; preds = %cond.false.1800, %cond.true.1797
  %cond1806 = phi i64 [ %mul1799, %cond.true.1797 ], [ %add1804, %cond.false.1800 ]
  store i64 %cond1806, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2504

cond.false.1807:                                  ; preds = %lor.lhs.false.1787
  %242 = load i64, i64* %i, align 8
  %mul1808 = mul nsw i64 2, %242
  %mul1809 = mul i64 %mul1808, 8
  %cmp1810 = icmp ule i64 %mul1809, 9223372036854775807
  br i1 %cmp1810, label %cond.true.1812, label %cond.false.1815

cond.true.1812:                                   ; preds = %cond.false.1807
  %243 = load i64, i64* %i, align 8
  %mul1813 = mul nsw i64 2, %243
  %mul1814 = mul i64 %mul1813, 8
  br label %cond.end.1820

cond.false.1815:                                  ; preds = %cond.false.1807
  %244 = load i64, i64* %i, align 8
  %mul1816 = mul nsw i64 2, %244
  %mul1817 = mul i64 %mul1816, 8
  %sub1818 = sub i64 %mul1817, -9223372036854775808
  %add1819 = add nsw i64 %sub1818, -9223372036854775808
  br label %cond.end.1820

cond.end.1820:                                    ; preds = %cond.false.1815, %cond.true.1812
  %cond1821 = phi i64 [ %mul1814, %cond.true.1812 ], [ %add1819, %cond.false.1815 ]
  store i64 %cond1821, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2504

cond.false.1822:                                  ; preds = %cond.true.1594
  %245 = load i64, i64* %i, align 8
  %mul1823 = mul nsw i64 2, %245
  %add1824 = add nsw i64 0, %mul1823
  %mul1825 = mul nsw i64 0, %add1824
  %sub1826 = sub nsw i64 %mul1825, 1
  %cmp1827 = icmp slt i64 %sub1826, 0
  br i1 %cmp1827, label %cond.true.1829, label %cond.false.1848

cond.true.1829:                                   ; preds = %cond.false.1822
  %246 = load i64, i64* %i, align 8
  %mul1830 = mul nsw i64 2, %246
  %add1831 = add nsw i64 0, %mul1830
  %mul1832 = mul nsw i64 0, %add1831
  %add1833 = add nsw i64 %mul1832, 0
  %neg1834 = xor i64 %add1833, -1
  %cmp1835 = icmp eq i64 %neg1834, -1
  %conv1836 = zext i1 %cmp1835 to i32
  %sub1837 = sub nsw i32 0, %conv1836
  %conv1838 = sext i32 %sub1837 to i64
  %247 = load i64, i64* %i, align 8
  %mul1839 = mul nsw i64 2, %247
  %add1840 = add nsw i64 0, %mul1839
  %mul1841 = mul nsw i64 0, %add1840
  %add1842 = add nsw i64 %mul1841, 1
  %shl1843 = shl i64 %add1842, 62
  %sub1844 = sub nsw i64 %shl1843, 1
  %mul1845 = mul nsw i64 %sub1844, 2
  %add1846 = add nsw i64 %mul1845, 1
  %sub1847 = sub nsw i64 %conv1838, %add1846
  br label %cond.end.1853

cond.false.1848:                                  ; preds = %cond.false.1822
  %248 = load i64, i64* %i, align 8
  %mul1849 = mul nsw i64 2, %248
  %add1850 = add nsw i64 0, %mul1849
  %mul1851 = mul nsw i64 0, %add1850
  %add1852 = add nsw i64 %mul1851, 0
  br label %cond.end.1853

cond.end.1853:                                    ; preds = %cond.false.1848, %cond.true.1829
  %cond1854 = phi i64 [ %sub1847, %cond.true.1829 ], [ %add1852, %cond.false.1848 ]
  %cmp1855 = icmp eq i64 %cond1854, 0
  br i1 %cmp1855, label %land.lhs.true.1857, label %lor.lhs.false.1861

land.lhs.true.1857:                               ; preds = %cond.end.1853
  %249 = load i64, i64* %i, align 8
  %mul1858 = mul nsw i64 2, %249
  %cmp1859 = icmp slt i64 %mul1858, 0
  br i1 %cmp1859, label %cond.true.2019, label %lor.lhs.false.1861

lor.lhs.false.1861:                               ; preds = %land.lhs.true.1857, %cond.end.1853
  br i1 false, label %cond.true.1862, label %cond.false.1932

cond.true.1862:                                   ; preds = %lor.lhs.false.1861
  %250 = load i64, i64* %i, align 8
  %mul1863 = mul nsw i64 2, %250
  %cmp1864 = icmp slt i64 %mul1863, 0
  br i1 %cmp1864, label %cond.true.1866, label %cond.false.1893

cond.true.1866:                                   ; preds = %cond.true.1862
  %251 = load i64, i64* %i, align 8
  %mul1867 = mul nsw i64 2, %251
  %252 = load i64, i64* %i, align 8
  %mul1868 = mul nsw i64 2, %252
  %add1869 = add nsw i64 0, %mul1868
  %mul1870 = mul nsw i64 0, %add1869
  %sub1871 = sub nsw i64 %mul1870, 1
  %cmp1872 = icmp slt i64 %sub1871, 0
  br i1 %cmp1872, label %cond.true.1874, label %cond.false.1883

cond.true.1874:                                   ; preds = %cond.true.1866
  %253 = load i64, i64* %i, align 8
  %mul1875 = mul nsw i64 2, %253
  %add1876 = add nsw i64 0, %mul1875
  %mul1877 = mul nsw i64 0, %add1876
  %add1878 = add nsw i64 %mul1877, 1
  %shl1879 = shl i64 %add1878, 62
  %sub1880 = sub nsw i64 %shl1879, 1
  %mul1881 = mul nsw i64 %sub1880, 2
  %add1882 = add nsw i64 %mul1881, 1
  br label %cond.end.1888

cond.false.1883:                                  ; preds = %cond.true.1866
  %254 = load i64, i64* %i, align 8
  %mul1884 = mul nsw i64 2, %254
  %add1885 = add nsw i64 0, %mul1884
  %mul1886 = mul nsw i64 0, %add1885
  %sub1887 = sub nsw i64 %mul1886, 1
  br label %cond.end.1888

cond.end.1888:                                    ; preds = %cond.false.1883, %cond.true.1874
  %cond1889 = phi i64 [ %add1882, %cond.true.1874 ], [ %sub1887, %cond.false.1883 ]
  %div1890 = sdiv i64 %cond1889, 8
  %cmp1891 = icmp slt i64 %mul1867, %div1890
  br i1 %cmp1891, label %cond.true.2019, label %lor.lhs.false.2002

cond.false.1893:                                  ; preds = %cond.true.1862
  br i1 false, label %cond.true.1894, label %cond.false.1895

cond.true.1894:                                   ; preds = %cond.false.1893
  br i1 false, label %cond.true.2019, label %lor.lhs.false.2002

cond.false.1895:                                  ; preds = %cond.false.1893
  %255 = load i64, i64* %i, align 8
  %mul1896 = mul nsw i64 2, %255
  %add1897 = add nsw i64 0, %mul1896
  %mul1898 = mul nsw i64 0, %add1897
  %sub1899 = sub nsw i64 %mul1898, 1
  %cmp1900 = icmp slt i64 %sub1899, 0
  br i1 %cmp1900, label %cond.true.1902, label %cond.false.1921

cond.true.1902:                                   ; preds = %cond.false.1895
  %256 = load i64, i64* %i, align 8
  %mul1903 = mul nsw i64 2, %256
  %add1904 = add nsw i64 0, %mul1903
  %mul1905 = mul nsw i64 0, %add1904
  %add1906 = add nsw i64 %mul1905, 0
  %neg1907 = xor i64 %add1906, -1
  %cmp1908 = icmp eq i64 %neg1907, -1
  %conv1909 = zext i1 %cmp1908 to i32
  %sub1910 = sub nsw i32 0, %conv1909
  %conv1911 = sext i32 %sub1910 to i64
  %257 = load i64, i64* %i, align 8
  %mul1912 = mul nsw i64 2, %257
  %add1913 = add nsw i64 0, %mul1912
  %mul1914 = mul nsw i64 0, %add1913
  %add1915 = add nsw i64 %mul1914, 1
  %shl1916 = shl i64 %add1915, 62
  %sub1917 = sub nsw i64 %shl1916, 1
  %mul1918 = mul nsw i64 %sub1917, 2
  %add1919 = add nsw i64 %mul1918, 1
  %sub1920 = sub nsw i64 %conv1911, %add1919
  br label %cond.end.1926

cond.false.1921:                                  ; preds = %cond.false.1895
  %258 = load i64, i64* %i, align 8
  %mul1922 = mul nsw i64 2, %258
  %add1923 = add nsw i64 0, %mul1922
  %mul1924 = mul nsw i64 0, %add1923
  %add1925 = add nsw i64 %mul1924, 0
  br label %cond.end.1926

cond.end.1926:                                    ; preds = %cond.false.1921, %cond.true.1902
  %cond1927 = phi i64 [ %sub1920, %cond.true.1902 ], [ %add1925, %cond.false.1921 ]
  %div1928 = sdiv i64 %cond1927, 8
  %259 = load i64, i64* %i, align 8
  %mul1929 = mul nsw i64 2, %259
  %cmp1930 = icmp slt i64 %div1928, %mul1929
  br i1 %cmp1930, label %cond.true.2019, label %lor.lhs.false.2002

cond.false.1932:                                  ; preds = %lor.lhs.false.1861
  br i1 false, label %cond.true.1933, label %cond.false.1934

cond.true.1933:                                   ; preds = %cond.false.1932
  br i1 false, label %cond.true.2019, label %lor.lhs.false.2002

cond.false.1934:                                  ; preds = %cond.false.1932
  %260 = load i64, i64* %i, align 8
  %mul1935 = mul nsw i64 2, %260
  %cmp1936 = icmp slt i64 %mul1935, 0
  br i1 %cmp1936, label %cond.true.1938, label %cond.false.1975

cond.true.1938:                                   ; preds = %cond.false.1934
  %261 = load i64, i64* %i, align 8
  %mul1939 = mul nsw i64 2, %261
  %262 = load i64, i64* %i, align 8
  %mul1940 = mul nsw i64 2, %262
  %add1941 = add nsw i64 0, %mul1940
  %mul1942 = mul nsw i64 0, %add1941
  %sub1943 = sub nsw i64 %mul1942, 1
  %cmp1944 = icmp slt i64 %sub1943, 0
  br i1 %cmp1944, label %cond.true.1946, label %cond.false.1965

cond.true.1946:                                   ; preds = %cond.true.1938
  %263 = load i64, i64* %i, align 8
  %mul1947 = mul nsw i64 2, %263
  %add1948 = add nsw i64 0, %mul1947
  %mul1949 = mul nsw i64 0, %add1948
  %add1950 = add nsw i64 %mul1949, 0
  %neg1951 = xor i64 %add1950, -1
  %cmp1952 = icmp eq i64 %neg1951, -1
  %conv1953 = zext i1 %cmp1952 to i32
  %sub1954 = sub nsw i32 0, %conv1953
  %conv1955 = sext i32 %sub1954 to i64
  %264 = load i64, i64* %i, align 8
  %mul1956 = mul nsw i64 2, %264
  %add1957 = add nsw i64 0, %mul1956
  %mul1958 = mul nsw i64 0, %add1957
  %add1959 = add nsw i64 %mul1958, 1
  %shl1960 = shl i64 %add1959, 62
  %sub1961 = sub nsw i64 %shl1960, 1
  %mul1962 = mul nsw i64 %sub1961, 2
  %add1963 = add nsw i64 %mul1962, 1
  %sub1964 = sub nsw i64 %conv1955, %add1963
  br label %cond.end.1970

cond.false.1965:                                  ; preds = %cond.true.1938
  %265 = load i64, i64* %i, align 8
  %mul1966 = mul nsw i64 2, %265
  %add1967 = add nsw i64 0, %mul1966
  %mul1968 = mul nsw i64 0, %add1967
  %add1969 = add nsw i64 %mul1968, 0
  br label %cond.end.1970

cond.end.1970:                                    ; preds = %cond.false.1965, %cond.true.1946
  %cond1971 = phi i64 [ %sub1964, %cond.true.1946 ], [ %add1969, %cond.false.1965 ]
  %div1972 = sdiv i64 %cond1971, 8
  %cmp1973 = icmp slt i64 %mul1939, %div1972
  br i1 %cmp1973, label %cond.true.2019, label %lor.lhs.false.2002

cond.false.1975:                                  ; preds = %cond.false.1934
  %266 = load i64, i64* %i, align 8
  %mul1976 = mul nsw i64 2, %266
  %add1977 = add nsw i64 0, %mul1976
  %mul1978 = mul nsw i64 0, %add1977
  %sub1979 = sub nsw i64 %mul1978, 1
  %cmp1980 = icmp slt i64 %sub1979, 0
  br i1 %cmp1980, label %cond.true.1982, label %cond.false.1991

cond.true.1982:                                   ; preds = %cond.false.1975
  %267 = load i64, i64* %i, align 8
  %mul1983 = mul nsw i64 2, %267
  %add1984 = add nsw i64 0, %mul1983
  %mul1985 = mul nsw i64 0, %add1984
  %add1986 = add nsw i64 %mul1985, 1
  %shl1987 = shl i64 %add1986, 62
  %sub1988 = sub nsw i64 %shl1987, 1
  %mul1989 = mul nsw i64 %sub1988, 2
  %add1990 = add nsw i64 %mul1989, 1
  br label %cond.end.1996

cond.false.1991:                                  ; preds = %cond.false.1975
  %268 = load i64, i64* %i, align 8
  %mul1992 = mul nsw i64 2, %268
  %add1993 = add nsw i64 0, %mul1992
  %mul1994 = mul nsw i64 0, %add1993
  %sub1995 = sub nsw i64 %mul1994, 1
  br label %cond.end.1996

cond.end.1996:                                    ; preds = %cond.false.1991, %cond.true.1982
  %cond1997 = phi i64 [ %add1990, %cond.true.1982 ], [ %sub1995, %cond.false.1991 ]
  %div1998 = sdiv i64 %cond1997, 8
  %269 = load i64, i64* %i, align 8
  %mul1999 = mul nsw i64 2, %269
  %cmp2000 = icmp slt i64 %div1998, %mul1999
  br i1 %cmp2000, label %cond.true.2019, label %lor.lhs.false.2002

lor.lhs.false.2002:                               ; preds = %cond.end.1996, %cond.end.1970, %cond.true.1933, %cond.end.1926, %cond.true.1894, %cond.end.1888
  %270 = load i64, i64* %i, align 8
  %mul2003 = mul nsw i64 2, %270
  %mul2004 = mul nsw i64 %mul2003, 8
  %mul2005 = mul nsw i64 0, %mul2004
  %sub2006 = sub nsw i64 %mul2005, 1
  %cmp2007 = icmp slt i64 %sub2006, 0
  br i1 %cmp2007, label %land.lhs.true.2009, label %lor.lhs.false.2014

land.lhs.true.2009:                               ; preds = %lor.lhs.false.2002
  %271 = load i64, i64* %i, align 8
  %mul2010 = mul nsw i64 2, %271
  %mul2011 = mul nsw i64 %mul2010, 8
  %cmp2012 = icmp slt i64 %mul2011, -9223372036854775808
  br i1 %cmp2012, label %cond.true.2019, label %lor.lhs.false.2014

lor.lhs.false.2014:                               ; preds = %land.lhs.true.2009, %lor.lhs.false.2002
  %272 = load i64, i64* %i, align 8
  %mul2015 = mul nsw i64 2, %272
  %mul2016 = mul nsw i64 %mul2015, 8
  %cmp2017 = icmp slt i64 9223372036854775807, %mul2016
  br i1 %cmp2017, label %cond.true.2019, label %cond.false.2034

cond.true.2019:                                   ; preds = %lor.lhs.false.2014, %land.lhs.true.2009, %cond.end.1996, %cond.end.1970, %cond.true.1933, %cond.end.1926, %cond.true.1894, %cond.end.1888, %land.lhs.true.1857
  %273 = load i64, i64* %i, align 8
  %mul2020 = mul nsw i64 2, %273
  %mul2021 = mul i64 %mul2020, 8
  %cmp2022 = icmp ule i64 %mul2021, 9223372036854775807
  br i1 %cmp2022, label %cond.true.2024, label %cond.false.2027

cond.true.2024:                                   ; preds = %cond.true.2019
  %274 = load i64, i64* %i, align 8
  %mul2025 = mul nsw i64 2, %274
  %mul2026 = mul i64 %mul2025, 8
  br label %cond.end.2032

cond.false.2027:                                  ; preds = %cond.true.2019
  %275 = load i64, i64* %i, align 8
  %mul2028 = mul nsw i64 2, %275
  %mul2029 = mul i64 %mul2028, 8
  %sub2030 = sub i64 %mul2029, -9223372036854775808
  %add2031 = add nsw i64 %sub2030, -9223372036854775808
  br label %cond.end.2032

cond.end.2032:                                    ; preds = %cond.false.2027, %cond.true.2024
  %cond2033 = phi i64 [ %mul2026, %cond.true.2024 ], [ %add2031, %cond.false.2027 ]
  store i64 %cond2033, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2504

cond.false.2034:                                  ; preds = %lor.lhs.false.2014
  %276 = load i64, i64* %i, align 8
  %mul2035 = mul nsw i64 2, %276
  %mul2036 = mul i64 %mul2035, 8
  %cmp2037 = icmp ule i64 %mul2036, 9223372036854775807
  br i1 %cmp2037, label %cond.true.2039, label %cond.false.2042

cond.true.2039:                                   ; preds = %cond.false.2034
  %277 = load i64, i64* %i, align 8
  %mul2040 = mul nsw i64 2, %277
  %mul2041 = mul i64 %mul2040, 8
  br label %cond.end.2047

cond.false.2042:                                  ; preds = %cond.false.2034
  %278 = load i64, i64* %i, align 8
  %mul2043 = mul nsw i64 2, %278
  %mul2044 = mul i64 %mul2043, 8
  %sub2045 = sub i64 %mul2044, -9223372036854775808
  %add2046 = add nsw i64 %sub2045, -9223372036854775808
  br label %cond.end.2047

cond.end.2047:                                    ; preds = %cond.false.2042, %cond.true.2039
  %cond2048 = phi i64 [ %mul2041, %cond.true.2039 ], [ %add2046, %cond.false.2042 ]
  store i64 %cond2048, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2504

cond.false.2049:                                  ; preds = %cond.false.1593
  br i1 false, label %cond.true.2050, label %cond.false.2277

cond.true.2050:                                   ; preds = %cond.false.2049
  %279 = load i64, i64* %i, align 8
  %mul2051 = mul nsw i64 2, %279
  %add2052 = add nsw i64 0, %mul2051
  %mul2053 = mul nsw i64 0, %add2052
  %sub2054 = sub nsw i64 %mul2053, 1
  %cmp2055 = icmp slt i64 %sub2054, 0
  br i1 %cmp2055, label %cond.true.2057, label %cond.false.2076

cond.true.2057:                                   ; preds = %cond.true.2050
  %280 = load i64, i64* %i, align 8
  %mul2058 = mul nsw i64 2, %280
  %add2059 = add nsw i64 0, %mul2058
  %mul2060 = mul nsw i64 0, %add2059
  %add2061 = add nsw i64 %mul2060, 0
  %neg2062 = xor i64 %add2061, -1
  %cmp2063 = icmp eq i64 %neg2062, -1
  %conv2064 = zext i1 %cmp2063 to i32
  %sub2065 = sub nsw i32 0, %conv2064
  %conv2066 = sext i32 %sub2065 to i64
  %281 = load i64, i64* %i, align 8
  %mul2067 = mul nsw i64 2, %281
  %add2068 = add nsw i64 0, %mul2067
  %mul2069 = mul nsw i64 0, %add2068
  %add2070 = add nsw i64 %mul2069, 1
  %shl2071 = shl i64 %add2070, 62
  %sub2072 = sub nsw i64 %shl2071, 1
  %mul2073 = mul nsw i64 %sub2072, 2
  %add2074 = add nsw i64 %mul2073, 1
  %sub2075 = sub nsw i64 %conv2066, %add2074
  br label %cond.end.2081

cond.false.2076:                                  ; preds = %cond.true.2050
  %282 = load i64, i64* %i, align 8
  %mul2077 = mul nsw i64 2, %282
  %add2078 = add nsw i64 0, %mul2077
  %mul2079 = mul nsw i64 0, %add2078
  %add2080 = add nsw i64 %mul2079, 0
  br label %cond.end.2081

cond.end.2081:                                    ; preds = %cond.false.2076, %cond.true.2057
  %cond2082 = phi i64 [ %sub2075, %cond.true.2057 ], [ %add2080, %cond.false.2076 ]
  %cmp2083 = icmp eq i64 %cond2082, 0
  br i1 %cmp2083, label %land.lhs.true.2085, label %lor.lhs.false.2089

land.lhs.true.2085:                               ; preds = %cond.end.2081
  %283 = load i64, i64* %i, align 8
  %mul2086 = mul nsw i64 2, %283
  %cmp2087 = icmp slt i64 %mul2086, 0
  br i1 %cmp2087, label %cond.true.2247, label %lor.lhs.false.2089

lor.lhs.false.2089:                               ; preds = %land.lhs.true.2085, %cond.end.2081
  br i1 false, label %cond.true.2090, label %cond.false.2160

cond.true.2090:                                   ; preds = %lor.lhs.false.2089
  %284 = load i64, i64* %i, align 8
  %mul2091 = mul nsw i64 2, %284
  %cmp2092 = icmp slt i64 %mul2091, 0
  br i1 %cmp2092, label %cond.true.2094, label %cond.false.2121

cond.true.2094:                                   ; preds = %cond.true.2090
  %285 = load i64, i64* %i, align 8
  %mul2095 = mul nsw i64 2, %285
  %286 = load i64, i64* %i, align 8
  %mul2096 = mul nsw i64 2, %286
  %add2097 = add nsw i64 0, %mul2096
  %mul2098 = mul nsw i64 0, %add2097
  %sub2099 = sub nsw i64 %mul2098, 1
  %cmp2100 = icmp slt i64 %sub2099, 0
  br i1 %cmp2100, label %cond.true.2102, label %cond.false.2111

cond.true.2102:                                   ; preds = %cond.true.2094
  %287 = load i64, i64* %i, align 8
  %mul2103 = mul nsw i64 2, %287
  %add2104 = add nsw i64 0, %mul2103
  %mul2105 = mul nsw i64 0, %add2104
  %add2106 = add nsw i64 %mul2105, 1
  %shl2107 = shl i64 %add2106, 62
  %sub2108 = sub nsw i64 %shl2107, 1
  %mul2109 = mul nsw i64 %sub2108, 2
  %add2110 = add nsw i64 %mul2109, 1
  br label %cond.end.2116

cond.false.2111:                                  ; preds = %cond.true.2094
  %288 = load i64, i64* %i, align 8
  %mul2112 = mul nsw i64 2, %288
  %add2113 = add nsw i64 0, %mul2112
  %mul2114 = mul nsw i64 0, %add2113
  %sub2115 = sub nsw i64 %mul2114, 1
  br label %cond.end.2116

cond.end.2116:                                    ; preds = %cond.false.2111, %cond.true.2102
  %cond2117 = phi i64 [ %add2110, %cond.true.2102 ], [ %sub2115, %cond.false.2111 ]
  %div2118 = sdiv i64 %cond2117, 8
  %cmp2119 = icmp slt i64 %mul2095, %div2118
  br i1 %cmp2119, label %cond.true.2247, label %lor.lhs.false.2230

cond.false.2121:                                  ; preds = %cond.true.2090
  br i1 false, label %cond.true.2122, label %cond.false.2123

cond.true.2122:                                   ; preds = %cond.false.2121
  br i1 false, label %cond.true.2247, label %lor.lhs.false.2230

cond.false.2123:                                  ; preds = %cond.false.2121
  %289 = load i64, i64* %i, align 8
  %mul2124 = mul nsw i64 2, %289
  %add2125 = add nsw i64 0, %mul2124
  %mul2126 = mul nsw i64 0, %add2125
  %sub2127 = sub nsw i64 %mul2126, 1
  %cmp2128 = icmp slt i64 %sub2127, 0
  br i1 %cmp2128, label %cond.true.2130, label %cond.false.2149

cond.true.2130:                                   ; preds = %cond.false.2123
  %290 = load i64, i64* %i, align 8
  %mul2131 = mul nsw i64 2, %290
  %add2132 = add nsw i64 0, %mul2131
  %mul2133 = mul nsw i64 0, %add2132
  %add2134 = add nsw i64 %mul2133, 0
  %neg2135 = xor i64 %add2134, -1
  %cmp2136 = icmp eq i64 %neg2135, -1
  %conv2137 = zext i1 %cmp2136 to i32
  %sub2138 = sub nsw i32 0, %conv2137
  %conv2139 = sext i32 %sub2138 to i64
  %291 = load i64, i64* %i, align 8
  %mul2140 = mul nsw i64 2, %291
  %add2141 = add nsw i64 0, %mul2140
  %mul2142 = mul nsw i64 0, %add2141
  %add2143 = add nsw i64 %mul2142, 1
  %shl2144 = shl i64 %add2143, 62
  %sub2145 = sub nsw i64 %shl2144, 1
  %mul2146 = mul nsw i64 %sub2145, 2
  %add2147 = add nsw i64 %mul2146, 1
  %sub2148 = sub nsw i64 %conv2139, %add2147
  br label %cond.end.2154

cond.false.2149:                                  ; preds = %cond.false.2123
  %292 = load i64, i64* %i, align 8
  %mul2150 = mul nsw i64 2, %292
  %add2151 = add nsw i64 0, %mul2150
  %mul2152 = mul nsw i64 0, %add2151
  %add2153 = add nsw i64 %mul2152, 0
  br label %cond.end.2154

cond.end.2154:                                    ; preds = %cond.false.2149, %cond.true.2130
  %cond2155 = phi i64 [ %sub2148, %cond.true.2130 ], [ %add2153, %cond.false.2149 ]
  %div2156 = sdiv i64 %cond2155, 8
  %293 = load i64, i64* %i, align 8
  %mul2157 = mul nsw i64 2, %293
  %cmp2158 = icmp slt i64 %div2156, %mul2157
  br i1 %cmp2158, label %cond.true.2247, label %lor.lhs.false.2230

cond.false.2160:                                  ; preds = %lor.lhs.false.2089
  br i1 false, label %cond.true.2161, label %cond.false.2162

cond.true.2161:                                   ; preds = %cond.false.2160
  br i1 false, label %cond.true.2247, label %lor.lhs.false.2230

cond.false.2162:                                  ; preds = %cond.false.2160
  %294 = load i64, i64* %i, align 8
  %mul2163 = mul nsw i64 2, %294
  %cmp2164 = icmp slt i64 %mul2163, 0
  br i1 %cmp2164, label %cond.true.2166, label %cond.false.2203

cond.true.2166:                                   ; preds = %cond.false.2162
  %295 = load i64, i64* %i, align 8
  %mul2167 = mul nsw i64 2, %295
  %296 = load i64, i64* %i, align 8
  %mul2168 = mul nsw i64 2, %296
  %add2169 = add nsw i64 0, %mul2168
  %mul2170 = mul nsw i64 0, %add2169
  %sub2171 = sub nsw i64 %mul2170, 1
  %cmp2172 = icmp slt i64 %sub2171, 0
  br i1 %cmp2172, label %cond.true.2174, label %cond.false.2193

cond.true.2174:                                   ; preds = %cond.true.2166
  %297 = load i64, i64* %i, align 8
  %mul2175 = mul nsw i64 2, %297
  %add2176 = add nsw i64 0, %mul2175
  %mul2177 = mul nsw i64 0, %add2176
  %add2178 = add nsw i64 %mul2177, 0
  %neg2179 = xor i64 %add2178, -1
  %cmp2180 = icmp eq i64 %neg2179, -1
  %conv2181 = zext i1 %cmp2180 to i32
  %sub2182 = sub nsw i32 0, %conv2181
  %conv2183 = sext i32 %sub2182 to i64
  %298 = load i64, i64* %i, align 8
  %mul2184 = mul nsw i64 2, %298
  %add2185 = add nsw i64 0, %mul2184
  %mul2186 = mul nsw i64 0, %add2185
  %add2187 = add nsw i64 %mul2186, 1
  %shl2188 = shl i64 %add2187, 62
  %sub2189 = sub nsw i64 %shl2188, 1
  %mul2190 = mul nsw i64 %sub2189, 2
  %add2191 = add nsw i64 %mul2190, 1
  %sub2192 = sub nsw i64 %conv2183, %add2191
  br label %cond.end.2198

cond.false.2193:                                  ; preds = %cond.true.2166
  %299 = load i64, i64* %i, align 8
  %mul2194 = mul nsw i64 2, %299
  %add2195 = add nsw i64 0, %mul2194
  %mul2196 = mul nsw i64 0, %add2195
  %add2197 = add nsw i64 %mul2196, 0
  br label %cond.end.2198

cond.end.2198:                                    ; preds = %cond.false.2193, %cond.true.2174
  %cond2199 = phi i64 [ %sub2192, %cond.true.2174 ], [ %add2197, %cond.false.2193 ]
  %div2200 = sdiv i64 %cond2199, 8
  %cmp2201 = icmp slt i64 %mul2167, %div2200
  br i1 %cmp2201, label %cond.true.2247, label %lor.lhs.false.2230

cond.false.2203:                                  ; preds = %cond.false.2162
  %300 = load i64, i64* %i, align 8
  %mul2204 = mul nsw i64 2, %300
  %add2205 = add nsw i64 0, %mul2204
  %mul2206 = mul nsw i64 0, %add2205
  %sub2207 = sub nsw i64 %mul2206, 1
  %cmp2208 = icmp slt i64 %sub2207, 0
  br i1 %cmp2208, label %cond.true.2210, label %cond.false.2219

cond.true.2210:                                   ; preds = %cond.false.2203
  %301 = load i64, i64* %i, align 8
  %mul2211 = mul nsw i64 2, %301
  %add2212 = add nsw i64 0, %mul2211
  %mul2213 = mul nsw i64 0, %add2212
  %add2214 = add nsw i64 %mul2213, 1
  %shl2215 = shl i64 %add2214, 62
  %sub2216 = sub nsw i64 %shl2215, 1
  %mul2217 = mul nsw i64 %sub2216, 2
  %add2218 = add nsw i64 %mul2217, 1
  br label %cond.end.2224

cond.false.2219:                                  ; preds = %cond.false.2203
  %302 = load i64, i64* %i, align 8
  %mul2220 = mul nsw i64 2, %302
  %add2221 = add nsw i64 0, %mul2220
  %mul2222 = mul nsw i64 0, %add2221
  %sub2223 = sub nsw i64 %mul2222, 1
  br label %cond.end.2224

cond.end.2224:                                    ; preds = %cond.false.2219, %cond.true.2210
  %cond2225 = phi i64 [ %add2218, %cond.true.2210 ], [ %sub2223, %cond.false.2219 ]
  %div2226 = sdiv i64 %cond2225, 8
  %303 = load i64, i64* %i, align 8
  %mul2227 = mul nsw i64 2, %303
  %cmp2228 = icmp slt i64 %div2226, %mul2227
  br i1 %cmp2228, label %cond.true.2247, label %lor.lhs.false.2230

lor.lhs.false.2230:                               ; preds = %cond.end.2224, %cond.end.2198, %cond.true.2161, %cond.end.2154, %cond.true.2122, %cond.end.2116
  %304 = load i64, i64* %i, align 8
  %mul2231 = mul nsw i64 2, %304
  %mul2232 = mul nsw i64 %mul2231, 8
  %mul2233 = mul nsw i64 0, %mul2232
  %sub2234 = sub nsw i64 %mul2233, 1
  %cmp2235 = icmp slt i64 %sub2234, 0
  br i1 %cmp2235, label %land.lhs.true.2237, label %lor.lhs.false.2242

land.lhs.true.2237:                               ; preds = %lor.lhs.false.2230
  %305 = load i64, i64* %i, align 8
  %mul2238 = mul nsw i64 2, %305
  %mul2239 = mul nsw i64 %mul2238, 8
  %cmp2240 = icmp slt i64 %mul2239, -9223372036854775808
  br i1 %cmp2240, label %cond.true.2247, label %lor.lhs.false.2242

lor.lhs.false.2242:                               ; preds = %land.lhs.true.2237, %lor.lhs.false.2230
  %306 = load i64, i64* %i, align 8
  %mul2243 = mul nsw i64 2, %306
  %mul2244 = mul nsw i64 %mul2243, 8
  %cmp2245 = icmp slt i64 9223372036854775807, %mul2244
  br i1 %cmp2245, label %cond.true.2247, label %cond.false.2262

cond.true.2247:                                   ; preds = %lor.lhs.false.2242, %land.lhs.true.2237, %cond.end.2224, %cond.end.2198, %cond.true.2161, %cond.end.2154, %cond.true.2122, %cond.end.2116, %land.lhs.true.2085
  %307 = load i64, i64* %i, align 8
  %mul2248 = mul nsw i64 2, %307
  %mul2249 = mul i64 %mul2248, 8
  %cmp2250 = icmp ule i64 %mul2249, 9223372036854775807
  br i1 %cmp2250, label %cond.true.2252, label %cond.false.2255

cond.true.2252:                                   ; preds = %cond.true.2247
  %308 = load i64, i64* %i, align 8
  %mul2253 = mul nsw i64 2, %308
  %mul2254 = mul i64 %mul2253, 8
  br label %cond.end.2260

cond.false.2255:                                  ; preds = %cond.true.2247
  %309 = load i64, i64* %i, align 8
  %mul2256 = mul nsw i64 2, %309
  %mul2257 = mul i64 %mul2256, 8
  %sub2258 = sub i64 %mul2257, -9223372036854775808
  %add2259 = add nsw i64 %sub2258, -9223372036854775808
  br label %cond.end.2260

cond.end.2260:                                    ; preds = %cond.false.2255, %cond.true.2252
  %cond2261 = phi i64 [ %mul2254, %cond.true.2252 ], [ %add2259, %cond.false.2255 ]
  store i64 %cond2261, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2504

cond.false.2262:                                  ; preds = %lor.lhs.false.2242
  %310 = load i64, i64* %i, align 8
  %mul2263 = mul nsw i64 2, %310
  %mul2264 = mul i64 %mul2263, 8
  %cmp2265 = icmp ule i64 %mul2264, 9223372036854775807
  br i1 %cmp2265, label %cond.true.2267, label %cond.false.2270

cond.true.2267:                                   ; preds = %cond.false.2262
  %311 = load i64, i64* %i, align 8
  %mul2268 = mul nsw i64 2, %311
  %mul2269 = mul i64 %mul2268, 8
  br label %cond.end.2275

cond.false.2270:                                  ; preds = %cond.false.2262
  %312 = load i64, i64* %i, align 8
  %mul2271 = mul nsw i64 2, %312
  %mul2272 = mul i64 %mul2271, 8
  %sub2273 = sub i64 %mul2272, -9223372036854775808
  %add2274 = add nsw i64 %sub2273, -9223372036854775808
  br label %cond.end.2275

cond.end.2275:                                    ; preds = %cond.false.2270, %cond.true.2267
  %cond2276 = phi i64 [ %mul2269, %cond.true.2267 ], [ %add2274, %cond.false.2270 ]
  store i64 %cond2276, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2504

cond.false.2277:                                  ; preds = %cond.false.2049
  %313 = load i64, i64* %i, align 8
  %mul2278 = mul nsw i64 2, %313
  %add2279 = add nsw i64 0, %mul2278
  %mul2280 = mul nsw i64 0, %add2279
  %sub2281 = sub nsw i64 %mul2280, 1
  %cmp2282 = icmp slt i64 %sub2281, 0
  br i1 %cmp2282, label %cond.true.2284, label %cond.false.2303

cond.true.2284:                                   ; preds = %cond.false.2277
  %314 = load i64, i64* %i, align 8
  %mul2285 = mul nsw i64 2, %314
  %add2286 = add nsw i64 0, %mul2285
  %mul2287 = mul nsw i64 0, %add2286
  %add2288 = add nsw i64 %mul2287, 0
  %neg2289 = xor i64 %add2288, -1
  %cmp2290 = icmp eq i64 %neg2289, -1
  %conv2291 = zext i1 %cmp2290 to i32
  %sub2292 = sub nsw i32 0, %conv2291
  %conv2293 = sext i32 %sub2292 to i64
  %315 = load i64, i64* %i, align 8
  %mul2294 = mul nsw i64 2, %315
  %add2295 = add nsw i64 0, %mul2294
  %mul2296 = mul nsw i64 0, %add2295
  %add2297 = add nsw i64 %mul2296, 1
  %shl2298 = shl i64 %add2297, 62
  %sub2299 = sub nsw i64 %shl2298, 1
  %mul2300 = mul nsw i64 %sub2299, 2
  %add2301 = add nsw i64 %mul2300, 1
  %sub2302 = sub nsw i64 %conv2293, %add2301
  br label %cond.end.2308

cond.false.2303:                                  ; preds = %cond.false.2277
  %316 = load i64, i64* %i, align 8
  %mul2304 = mul nsw i64 2, %316
  %add2305 = add nsw i64 0, %mul2304
  %mul2306 = mul nsw i64 0, %add2305
  %add2307 = add nsw i64 %mul2306, 0
  br label %cond.end.2308

cond.end.2308:                                    ; preds = %cond.false.2303, %cond.true.2284
  %cond2309 = phi i64 [ %sub2302, %cond.true.2284 ], [ %add2307, %cond.false.2303 ]
  %cmp2310 = icmp eq i64 %cond2309, 0
  br i1 %cmp2310, label %land.lhs.true.2312, label %lor.lhs.false.2316

land.lhs.true.2312:                               ; preds = %cond.end.2308
  %317 = load i64, i64* %i, align 8
  %mul2313 = mul nsw i64 2, %317
  %cmp2314 = icmp slt i64 %mul2313, 0
  br i1 %cmp2314, label %cond.true.2474, label %lor.lhs.false.2316

lor.lhs.false.2316:                               ; preds = %land.lhs.true.2312, %cond.end.2308
  br i1 false, label %cond.true.2317, label %cond.false.2387

cond.true.2317:                                   ; preds = %lor.lhs.false.2316
  %318 = load i64, i64* %i, align 8
  %mul2318 = mul nsw i64 2, %318
  %cmp2319 = icmp slt i64 %mul2318, 0
  br i1 %cmp2319, label %cond.true.2321, label %cond.false.2348

cond.true.2321:                                   ; preds = %cond.true.2317
  %319 = load i64, i64* %i, align 8
  %mul2322 = mul nsw i64 2, %319
  %320 = load i64, i64* %i, align 8
  %mul2323 = mul nsw i64 2, %320
  %add2324 = add nsw i64 0, %mul2323
  %mul2325 = mul nsw i64 0, %add2324
  %sub2326 = sub nsw i64 %mul2325, 1
  %cmp2327 = icmp slt i64 %sub2326, 0
  br i1 %cmp2327, label %cond.true.2329, label %cond.false.2338

cond.true.2329:                                   ; preds = %cond.true.2321
  %321 = load i64, i64* %i, align 8
  %mul2330 = mul nsw i64 2, %321
  %add2331 = add nsw i64 0, %mul2330
  %mul2332 = mul nsw i64 0, %add2331
  %add2333 = add nsw i64 %mul2332, 1
  %shl2334 = shl i64 %add2333, 62
  %sub2335 = sub nsw i64 %shl2334, 1
  %mul2336 = mul nsw i64 %sub2335, 2
  %add2337 = add nsw i64 %mul2336, 1
  br label %cond.end.2343

cond.false.2338:                                  ; preds = %cond.true.2321
  %322 = load i64, i64* %i, align 8
  %mul2339 = mul nsw i64 2, %322
  %add2340 = add nsw i64 0, %mul2339
  %mul2341 = mul nsw i64 0, %add2340
  %sub2342 = sub nsw i64 %mul2341, 1
  br label %cond.end.2343

cond.end.2343:                                    ; preds = %cond.false.2338, %cond.true.2329
  %cond2344 = phi i64 [ %add2337, %cond.true.2329 ], [ %sub2342, %cond.false.2338 ]
  %div2345 = sdiv i64 %cond2344, 8
  %cmp2346 = icmp slt i64 %mul2322, %div2345
  br i1 %cmp2346, label %cond.true.2474, label %lor.lhs.false.2457

cond.false.2348:                                  ; preds = %cond.true.2317
  br i1 false, label %cond.true.2349, label %cond.false.2350

cond.true.2349:                                   ; preds = %cond.false.2348
  br i1 false, label %cond.true.2474, label %lor.lhs.false.2457

cond.false.2350:                                  ; preds = %cond.false.2348
  %323 = load i64, i64* %i, align 8
  %mul2351 = mul nsw i64 2, %323
  %add2352 = add nsw i64 0, %mul2351
  %mul2353 = mul nsw i64 0, %add2352
  %sub2354 = sub nsw i64 %mul2353, 1
  %cmp2355 = icmp slt i64 %sub2354, 0
  br i1 %cmp2355, label %cond.true.2357, label %cond.false.2376

cond.true.2357:                                   ; preds = %cond.false.2350
  %324 = load i64, i64* %i, align 8
  %mul2358 = mul nsw i64 2, %324
  %add2359 = add nsw i64 0, %mul2358
  %mul2360 = mul nsw i64 0, %add2359
  %add2361 = add nsw i64 %mul2360, 0
  %neg2362 = xor i64 %add2361, -1
  %cmp2363 = icmp eq i64 %neg2362, -1
  %conv2364 = zext i1 %cmp2363 to i32
  %sub2365 = sub nsw i32 0, %conv2364
  %conv2366 = sext i32 %sub2365 to i64
  %325 = load i64, i64* %i, align 8
  %mul2367 = mul nsw i64 2, %325
  %add2368 = add nsw i64 0, %mul2367
  %mul2369 = mul nsw i64 0, %add2368
  %add2370 = add nsw i64 %mul2369, 1
  %shl2371 = shl i64 %add2370, 62
  %sub2372 = sub nsw i64 %shl2371, 1
  %mul2373 = mul nsw i64 %sub2372, 2
  %add2374 = add nsw i64 %mul2373, 1
  %sub2375 = sub nsw i64 %conv2366, %add2374
  br label %cond.end.2381

cond.false.2376:                                  ; preds = %cond.false.2350
  %326 = load i64, i64* %i, align 8
  %mul2377 = mul nsw i64 2, %326
  %add2378 = add nsw i64 0, %mul2377
  %mul2379 = mul nsw i64 0, %add2378
  %add2380 = add nsw i64 %mul2379, 0
  br label %cond.end.2381

cond.end.2381:                                    ; preds = %cond.false.2376, %cond.true.2357
  %cond2382 = phi i64 [ %sub2375, %cond.true.2357 ], [ %add2380, %cond.false.2376 ]
  %div2383 = sdiv i64 %cond2382, 8
  %327 = load i64, i64* %i, align 8
  %mul2384 = mul nsw i64 2, %327
  %cmp2385 = icmp slt i64 %div2383, %mul2384
  br i1 %cmp2385, label %cond.true.2474, label %lor.lhs.false.2457

cond.false.2387:                                  ; preds = %lor.lhs.false.2316
  br i1 false, label %cond.true.2388, label %cond.false.2389

cond.true.2388:                                   ; preds = %cond.false.2387
  br i1 false, label %cond.true.2474, label %lor.lhs.false.2457

cond.false.2389:                                  ; preds = %cond.false.2387
  %328 = load i64, i64* %i, align 8
  %mul2390 = mul nsw i64 2, %328
  %cmp2391 = icmp slt i64 %mul2390, 0
  br i1 %cmp2391, label %cond.true.2393, label %cond.false.2430

cond.true.2393:                                   ; preds = %cond.false.2389
  %329 = load i64, i64* %i, align 8
  %mul2394 = mul nsw i64 2, %329
  %330 = load i64, i64* %i, align 8
  %mul2395 = mul nsw i64 2, %330
  %add2396 = add nsw i64 0, %mul2395
  %mul2397 = mul nsw i64 0, %add2396
  %sub2398 = sub nsw i64 %mul2397, 1
  %cmp2399 = icmp slt i64 %sub2398, 0
  br i1 %cmp2399, label %cond.true.2401, label %cond.false.2420

cond.true.2401:                                   ; preds = %cond.true.2393
  %331 = load i64, i64* %i, align 8
  %mul2402 = mul nsw i64 2, %331
  %add2403 = add nsw i64 0, %mul2402
  %mul2404 = mul nsw i64 0, %add2403
  %add2405 = add nsw i64 %mul2404, 0
  %neg2406 = xor i64 %add2405, -1
  %cmp2407 = icmp eq i64 %neg2406, -1
  %conv2408 = zext i1 %cmp2407 to i32
  %sub2409 = sub nsw i32 0, %conv2408
  %conv2410 = sext i32 %sub2409 to i64
  %332 = load i64, i64* %i, align 8
  %mul2411 = mul nsw i64 2, %332
  %add2412 = add nsw i64 0, %mul2411
  %mul2413 = mul nsw i64 0, %add2412
  %add2414 = add nsw i64 %mul2413, 1
  %shl2415 = shl i64 %add2414, 62
  %sub2416 = sub nsw i64 %shl2415, 1
  %mul2417 = mul nsw i64 %sub2416, 2
  %add2418 = add nsw i64 %mul2417, 1
  %sub2419 = sub nsw i64 %conv2410, %add2418
  br label %cond.end.2425

cond.false.2420:                                  ; preds = %cond.true.2393
  %333 = load i64, i64* %i, align 8
  %mul2421 = mul nsw i64 2, %333
  %add2422 = add nsw i64 0, %mul2421
  %mul2423 = mul nsw i64 0, %add2422
  %add2424 = add nsw i64 %mul2423, 0
  br label %cond.end.2425

cond.end.2425:                                    ; preds = %cond.false.2420, %cond.true.2401
  %cond2426 = phi i64 [ %sub2419, %cond.true.2401 ], [ %add2424, %cond.false.2420 ]
  %div2427 = sdiv i64 %cond2426, 8
  %cmp2428 = icmp slt i64 %mul2394, %div2427
  br i1 %cmp2428, label %cond.true.2474, label %lor.lhs.false.2457

cond.false.2430:                                  ; preds = %cond.false.2389
  %334 = load i64, i64* %i, align 8
  %mul2431 = mul nsw i64 2, %334
  %add2432 = add nsw i64 0, %mul2431
  %mul2433 = mul nsw i64 0, %add2432
  %sub2434 = sub nsw i64 %mul2433, 1
  %cmp2435 = icmp slt i64 %sub2434, 0
  br i1 %cmp2435, label %cond.true.2437, label %cond.false.2446

cond.true.2437:                                   ; preds = %cond.false.2430
  %335 = load i64, i64* %i, align 8
  %mul2438 = mul nsw i64 2, %335
  %add2439 = add nsw i64 0, %mul2438
  %mul2440 = mul nsw i64 0, %add2439
  %add2441 = add nsw i64 %mul2440, 1
  %shl2442 = shl i64 %add2441, 62
  %sub2443 = sub nsw i64 %shl2442, 1
  %mul2444 = mul nsw i64 %sub2443, 2
  %add2445 = add nsw i64 %mul2444, 1
  br label %cond.end.2451

cond.false.2446:                                  ; preds = %cond.false.2430
  %336 = load i64, i64* %i, align 8
  %mul2447 = mul nsw i64 2, %336
  %add2448 = add nsw i64 0, %mul2447
  %mul2449 = mul nsw i64 0, %add2448
  %sub2450 = sub nsw i64 %mul2449, 1
  br label %cond.end.2451

cond.end.2451:                                    ; preds = %cond.false.2446, %cond.true.2437
  %cond2452 = phi i64 [ %add2445, %cond.true.2437 ], [ %sub2450, %cond.false.2446 ]
  %div2453 = sdiv i64 %cond2452, 8
  %337 = load i64, i64* %i, align 8
  %mul2454 = mul nsw i64 2, %337
  %cmp2455 = icmp slt i64 %div2453, %mul2454
  br i1 %cmp2455, label %cond.true.2474, label %lor.lhs.false.2457

lor.lhs.false.2457:                               ; preds = %cond.end.2451, %cond.end.2425, %cond.true.2388, %cond.end.2381, %cond.true.2349, %cond.end.2343
  %338 = load i64, i64* %i, align 8
  %mul2458 = mul nsw i64 2, %338
  %mul2459 = mul nsw i64 %mul2458, 8
  %mul2460 = mul nsw i64 0, %mul2459
  %sub2461 = sub nsw i64 %mul2460, 1
  %cmp2462 = icmp slt i64 %sub2461, 0
  br i1 %cmp2462, label %land.lhs.true.2464, label %lor.lhs.false.2469

land.lhs.true.2464:                               ; preds = %lor.lhs.false.2457
  %339 = load i64, i64* %i, align 8
  %mul2465 = mul nsw i64 2, %339
  %mul2466 = mul nsw i64 %mul2465, 8
  %cmp2467 = icmp slt i64 %mul2466, -9223372036854775808
  br i1 %cmp2467, label %cond.true.2474, label %lor.lhs.false.2469

lor.lhs.false.2469:                               ; preds = %land.lhs.true.2464, %lor.lhs.false.2457
  %340 = load i64, i64* %i, align 8
  %mul2470 = mul nsw i64 2, %340
  %mul2471 = mul nsw i64 %mul2470, 8
  %cmp2472 = icmp slt i64 9223372036854775807, %mul2471
  br i1 %cmp2472, label %cond.true.2474, label %cond.false.2489

cond.true.2474:                                   ; preds = %lor.lhs.false.2469, %land.lhs.true.2464, %cond.end.2451, %cond.end.2425, %cond.true.2388, %cond.end.2381, %cond.true.2349, %cond.end.2343, %land.lhs.true.2312
  %341 = load i64, i64* %i, align 8
  %mul2475 = mul nsw i64 2, %341
  %mul2476 = mul i64 %mul2475, 8
  %cmp2477 = icmp ule i64 %mul2476, 9223372036854775807
  br i1 %cmp2477, label %cond.true.2479, label %cond.false.2482

cond.true.2479:                                   ; preds = %cond.true.2474
  %342 = load i64, i64* %i, align 8
  %mul2480 = mul nsw i64 2, %342
  %mul2481 = mul i64 %mul2480, 8
  br label %cond.end.2487

cond.false.2482:                                  ; preds = %cond.true.2474
  %343 = load i64, i64* %i, align 8
  %mul2483 = mul nsw i64 2, %343
  %mul2484 = mul i64 %mul2483, 8
  %sub2485 = sub i64 %mul2484, -9223372036854775808
  %add2486 = add nsw i64 %sub2485, -9223372036854775808
  br label %cond.end.2487

cond.end.2487:                                    ; preds = %cond.false.2482, %cond.true.2479
  %cond2488 = phi i64 [ %mul2481, %cond.true.2479 ], [ %add2486, %cond.false.2482 ]
  store i64 %cond2488, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2504

cond.false.2489:                                  ; preds = %lor.lhs.false.2469
  %344 = load i64, i64* %i, align 8
  %mul2490 = mul nsw i64 2, %344
  %mul2491 = mul i64 %mul2490, 8
  %cmp2492 = icmp ule i64 %mul2491, 9223372036854775807
  br i1 %cmp2492, label %cond.true.2494, label %cond.false.2497

cond.true.2494:                                   ; preds = %cond.false.2489
  %345 = load i64, i64* %i, align 8
  %mul2495 = mul nsw i64 2, %345
  %mul2496 = mul i64 %mul2495, 8
  br label %cond.end.2502

cond.false.2497:                                  ; preds = %cond.false.2489
  %346 = load i64, i64* %i, align 8
  %mul2498 = mul nsw i64 2, %346
  %mul2499 = mul i64 %mul2498, 8
  %sub2500 = sub i64 %mul2499, -9223372036854775808
  %add2501 = add nsw i64 %sub2500, -9223372036854775808
  br label %cond.end.2502

cond.end.2502:                                    ; preds = %cond.false.2497, %cond.true.2494
  %cond2503 = phi i64 [ %mul2496, %cond.true.2494 ], [ %add2501, %cond.false.2497 ]
  store i64 %cond2503, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2504

lor.lhs.false.2504:                               ; preds = %cond.end.2502, %cond.end.2487, %cond.end.2275, %cond.end.2260, %cond.end.2047, %cond.end.2032, %cond.end.1820, %cond.end.1805, %cond.end.1590, %cond.end.1571, %cond.end.1355, %cond.end.1336, %cond.end.1093, %cond.end.1067, %cond.end.844, %cond.end.818, %cond.end.540, %cond.end.514, %cond.end.291, %cond.end.265
  %347 = load i64, i64* %alloca_nbytes, align 8
  %cmp2505 = icmp ult i64 -1, %347
  br i1 %cmp2505, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false.2504, %cond.end.2502, %cond.end.2487, %cond.end.2275, %cond.end.2260, %cond.end.2047, %cond.end.2032, %cond.end.1820, %cond.end.1805, %cond.end.1590, %cond.end.1571, %cond.end.1355, %cond.end.1336, %cond.end.1093, %cond.end.1067, %cond.end.844, %cond.end.818, %cond.end.540, %cond.end.514, %cond.end.291, %cond.end.265
  call void @memory_full(i64 -1) #7
  unreachable

if.else:                                          ; preds = %lor.lhs.false.2504
  %348 = load i64, i64* %alloca_nbytes, align 8
  %349 = load i64, i64* %sa_avail, align 8
  %cmp2507 = icmp sle i64 %348, %349
  br i1 %cmp2507, label %if.then.2509, label %if.else.2511

if.then.2509:                                     ; preds = %if.else
  %350 = load i64, i64* %alloca_nbytes, align 8
  %351 = load i64, i64* %sa_avail, align 8
  %sub2510 = sub nsw i64 %351, %350
  store i64 %sub2510, i64* %sa_avail, align 8
  %352 = load i64, i64* %alloca_nbytes, align 8
  %353 = alloca i8, i64 %352
  %354 = bitcast i8* %353 to i64*
  store i64* %354, i64** %parms, align 8
  br label %if.end

if.else.2511:                                     ; preds = %if.else
  %355 = load i64, i64* %alloca_nbytes, align 8
  %call2512 = call noalias i8* @xmalloc(i64 %355)
  %356 = bitcast i8* %call2512 to i64*
  store i64* %356, i64** %parms, align 8
  %357 = load i64*, i64** %parms, align 8
  %358 = load i64, i64* %i, align 8
  %mul2513 = mul nsw i64 2, %358
  %call2514 = call i64 @make_save_memory(i64* %357, i64 %mul2513)
  store i64 %call2514, i64* %arg_, align 8
  store i8 1, i8* %sa_must_free, align 1
  %359 = load i64, i64* %arg_, align 8
  call void @record_unwind_protect(void (i64)* @free_save_value, i64 %359)
  br label %if.end

if.end:                                           ; preds = %if.else.2511, %if.then.2509
  br label %if.end.2515

if.end.2515:                                      ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %if.end.2515
  %360 = load i64*, i64** %parms, align 8
  %361 = load i64, i64* %i, align 8
  %add.ptr = getelementptr inbounds i64, i64* %360, i64 %361
  store i64* %add.ptr, i64** %values, align 8
  store i64 0, i64* %i, align 8
  %362 = load i64, i64* %alist.addr, align 8
  store i64 %362, i64* %tail, align 8
  br label %for.cond.2516

for.cond.2516:                                    ; preds = %for.inc.2527, %do.end
  %363 = load i64, i64* %tail, align 8
  %and2517 = and i64 %363, 7
  %conv2518 = trunc i64 %and2517 to i32
  %cmp2519 = icmp eq i32 %conv2518, 3
  br i1 %cmp2519, label %for.body.2521, label %for.end.2531

for.body.2521:                                    ; preds = %for.cond.2516
  %364 = load i64, i64* %tail, align 8
  %sub2522 = sub nsw i64 %364, 3
  %365 = inttoptr i64 %sub2522 to i8*
  %366 = bitcast i8* %365 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %366, i32 0, i32 0
  %367 = load i64, i64* %car, align 8
  store i64 %367, i64* %elt, align 8
  %368 = load i64, i64* %elt, align 8
  %call2523 = call i64 @Fcar(i64 %368)
  %369 = load i64, i64* %i, align 8
  %370 = load i64*, i64** %parms, align 8
  %arrayidx = getelementptr inbounds i64, i64* %370, i64 %369
  store i64 %call2523, i64* %arrayidx, align 8
  %371 = load i64, i64* %elt, align 8
  %call2524 = call i64 @Fcdr(i64 %371)
  %372 = load i64, i64* %i, align 8
  %373 = load i64*, i64** %values, align 8
  %arrayidx2525 = getelementptr inbounds i64, i64* %373, i64 %372
  store i64 %call2524, i64* %arrayidx2525, align 8
  %374 = load i64, i64* %i, align 8
  %inc2526 = add nsw i64 %374, 1
  store i64 %inc2526, i64* %i, align 8
  br label %for.inc.2527

for.inc.2527:                                     ; preds = %for.body.2521
  %375 = load i64, i64* %tail, align 8
  %sub2528 = sub nsw i64 %375, 3
  %376 = inttoptr i64 %sub2528 to i8*
  %377 = bitcast i8* %376 to %struct.Lisp_Cons*
  %u2529 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %377, i32 0, i32 1
  %cdr2530 = bitcast %union.anon.11* %u2529 to i64*
  %378 = load i64, i64* %cdr2530, align 8
  store i64 %378, i64* %tail, align 8
  br label %for.cond.2516

for.end.2531:                                     ; preds = %for.cond.2516
  %call2532 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call2532, i64* %tail, align 8
  store i64 %call2532, i64* %alist.addr, align 8
  %call2533 = call i64 @builtin_lisp_symbol(i32 957)
  store i64 %call2533, i64* %left, align 8
  store i64 %call2533, i64* %top, align 8
  %call2534 = call i64 @builtin_lisp_symbol(i32 957)
  store i64 %call2534, i64* %icon_top, align 8
  store i64 %call2534, i64* %icon_left, align 8
  store i64 0, i64* %p, align 8
  br label %for.cond.2535

for.cond.2535:                                    ; preds = %for.inc.2578, %for.end.2531
  %379 = load i64, i64* %p, align 8
  %380 = load i64, i64* %i, align 8
  %cmp2536 = icmp slt i64 %379, %380
  br i1 %cmp2536, label %for.body.2538, label %for.end.2580

for.body.2538:                                    ; preds = %for.cond.2535
  %381 = load i64, i64* %p, align 8
  %382 = load i64*, i64** %parms, align 8
  %arrayidx2539 = getelementptr inbounds i64, i64* %382, i64 %381
  %383 = load i64, i64* %arrayidx2539, align 8
  store i64 %383, i64* %prop, align 8
  %384 = load i64, i64* %p, align 8
  %385 = load i64*, i64** %values, align 8
  %arrayidx2540 = getelementptr inbounds i64, i64* %385, i64 %384
  %386 = load i64, i64* %arrayidx2540, align 8
  store i64 %386, i64* %val, align 8
  %387 = load i64, i64* %prop, align 8
  %call2541 = call i64 @builtin_lisp_symbol(i32 451)
  %cmp2542 = icmp eq i64 %387, %call2541
  br i1 %cmp2542, label %if.then.2552, label %lor.lhs.false.2544

lor.lhs.false.2544:                               ; preds = %for.body.2538
  %388 = load i64, i64* %prop, align 8
  %call2545 = call i64 @builtin_lisp_symbol(i32 193)
  %cmp2546 = icmp eq i64 %388, %call2545
  br i1 %cmp2546, label %if.then.2552, label %lor.lhs.false.2548

lor.lhs.false.2548:                               ; preds = %lor.lhs.false.2544
  %389 = load i64, i64* %prop, align 8
  %call2549 = call i64 @builtin_lisp_symbol(i32 439)
  %cmp2550 = icmp eq i64 %389, %call2549
  br i1 %cmp2550, label %if.then.2552, label %if.end.2577

if.then.2552:                                     ; preds = %lor.lhs.false.2548, %lor.lhs.false.2544, %for.body.2538
  %390 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %391 = load i64, i64* %prop, align 8
  %call2553 = call i64 @get_frame_param(%struct.frame* %390, i64 %391)
  store i64 %call2553, i64* %old_value, align 8
  %392 = load i64, i64* %val, align 8
  %393 = load i64, i64* %old_value, align 8
  %call2554 = call i64 @Fequal(i64 %392, i64 %393)
  %call2555 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2556 = icmp eq i64 %call2554, %call2555
  br i1 %cmp2556, label %if.then.2558, label %if.end.2576

if.then.2558:                                     ; preds = %if.then.2552
  %394 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %395 = load i64, i64* %prop, align 8
  %396 = load i64, i64* %val, align 8
  call void @store_frame_param(%struct.frame* %394, i64 %395, i64 %396)
  %397 = load i64, i64* %prop, align 8
  %call2559 = call i64 @builtin_lisp_symbol(i32 1049)
  %call2560 = call i64 @Fget(i64 %397, i64 %call2559)
  store i64 %call2560, i64* %param_index, align 8
  %398 = load i64, i64* %param_index, align 8
  %call2561 = call zeroext i1 @NATNUMP(i64 %398)
  br i1 %call2561, label %land.lhs.true.2563, label %if.end.2575

land.lhs.true.2563:                               ; preds = %if.then.2558
  %399 = load i64, i64* %param_index, align 8
  %shr = ashr i64 %399, 2
  %cmp2564 = icmp ult i64 %shr, 37
  br i1 %cmp2564, label %land.lhs.true.2566, label %if.end.2575

land.lhs.true.2566:                               ; preds = %land.lhs.true.2563
  %400 = load i64, i64* %param_index, align 8
  %shr2567 = ashr i64 %400, 2
  %401 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %401, i32 0, i32 61
  %402 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %rif = getelementptr inbounds %struct.terminal, %struct.terminal* %402, i32 0, i32 15
  %403 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif, align 8
  %frame_parm_handlers = getelementptr inbounds %struct.redisplay_interface, %struct.redisplay_interface* %403, i32 0, i32 0
  %404 = load void (%struct.frame*, i64, i64)**, void (%struct.frame*, i64, i64)*** %frame_parm_handlers, align 8
  %arrayidx2568 = getelementptr inbounds void (%struct.frame*, i64, i64)*, void (%struct.frame*, i64, i64)** %404, i64 %shr2567
  %405 = load void (%struct.frame*, i64, i64)*, void (%struct.frame*, i64, i64)** %arrayidx2568, align 8
  %tobool = icmp ne void (%struct.frame*, i64, i64)* %405, null
  br i1 %tobool, label %if.then.2569, label %if.end.2575

if.then.2569:                                     ; preds = %land.lhs.true.2566
  %406 = load i64, i64* %param_index, align 8
  %shr2570 = ashr i64 %406, 2
  %407 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal2571 = getelementptr inbounds %struct.frame, %struct.frame* %407, i32 0, i32 61
  %408 = load %struct.terminal*, %struct.terminal** %terminal2571, align 8
  %rif2572 = getelementptr inbounds %struct.terminal, %struct.terminal* %408, i32 0, i32 15
  %409 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif2572, align 8
  %frame_parm_handlers2573 = getelementptr inbounds %struct.redisplay_interface, %struct.redisplay_interface* %409, i32 0, i32 0
  %410 = load void (%struct.frame*, i64, i64)**, void (%struct.frame*, i64, i64)*** %frame_parm_handlers2573, align 8
  %arrayidx2574 = getelementptr inbounds void (%struct.frame*, i64, i64)*, void (%struct.frame*, i64, i64)** %410, i64 %shr2570
  %411 = load void (%struct.frame*, i64, i64)*, void (%struct.frame*, i64, i64)** %arrayidx2574, align 8
  %412 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %413 = load i64, i64* %val, align 8
  %414 = load i64, i64* %old_value, align 8
  call void %411(%struct.frame* %412, i64 %413, i64 %414)
  br label %if.end.2575

if.end.2575:                                      ; preds = %if.then.2569, %land.lhs.true.2566, %land.lhs.true.2563, %if.then.2558
  br label %if.end.2576

if.end.2576:                                      ; preds = %if.end.2575, %if.then.2552
  br label %if.end.2577

if.end.2577:                                      ; preds = %if.end.2576, %lor.lhs.false.2548
  br label %for.inc.2578

for.inc.2578:                                     ; preds = %if.end.2577
  %415 = load i64, i64* %p, align 8
  %inc2579 = add nsw i64 %415, 1
  store i64 %inc2579, i64* %p, align 8
  br label %for.cond.2535

for.end.2580:                                     ; preds = %for.cond.2535
  br label %while.cond

while.cond:                                       ; preds = %if.end.2729, %if.then.2695, %for.end.2580
  %416 = load i64, i64* %i, align 8
  %dec = add nsw i64 %416, -1
  store i64 %dec, i64* %i, align 8
  %cmp2581 = icmp ne i64 %416, 0
  br i1 %cmp2581, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %417 = load i64, i64* %i, align 8
  %418 = load i64*, i64** %parms, align 8
  %arrayidx2585 = getelementptr inbounds i64, i64* %418, i64 %417
  %419 = load i64, i64* %arrayidx2585, align 8
  store i64 %419, i64* %prop2583, align 8
  %420 = load i64, i64* %i, align 8
  %421 = load i64*, i64** %values, align 8
  %arrayidx2586 = getelementptr inbounds i64, i64* %421, i64 %420
  %422 = load i64, i64* %arrayidx2586, align 8
  store i64 %422, i64* %val2584, align 8
  %423 = load i64, i64* %prop2583, align 8
  %call2587 = call i64 @builtin_lisp_symbol(i32 1017)
  %cmp2588 = icmp eq i64 %423, %call2587
  br i1 %cmp2588, label %if.then.2590, label %if.else.2622

if.then.2590:                                     ; preds = %while.body
  %424 = load i64, i64* %val2584, align 8
  %call2591 = call zeroext i1 @RANGED_INTEGERP(i64 0, i64 %424, i64 2147483647)
  br i1 %call2591, label %if.then.2592, label %if.else.2597

if.then.2592:                                     ; preds = %if.then.2590
  %425 = load i64, i64* %val2584, align 8
  %shr2593 = ashr i64 %425, 2
  %426 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %426, i32 0, i32 59
  %427 = load i32, i32* %column_width, align 4
  %conv2594 = sext i32 %427 to i64
  %mul2595 = mul nsw i64 %shr2593, %conv2594
  %conv2596 = trunc i64 %mul2595 to i32
  store i32 %conv2596, i32* %width, align 4
  store i8 1, i8* %width_change, align 1
  br label %if.end.2621

if.else.2597:                                     ; preds = %if.then.2590
  %428 = load i64, i64* %val2584, align 8
  %and2598 = and i64 %428, 7
  %conv2599 = trunc i64 %and2598 to i32
  %cmp2600 = icmp eq i32 %conv2599, 3
  br i1 %cmp2600, label %land.lhs.true.2602, label %if.end.2620

land.lhs.true.2602:                               ; preds = %if.else.2597
  %429 = load i64, i64* %val2584, align 8
  %sub2603 = sub nsw i64 %429, 3
  %430 = inttoptr i64 %sub2603 to i8*
  %431 = bitcast i8* %430 to %struct.Lisp_Cons*
  %car2604 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %431, i32 0, i32 0
  %432 = load i64, i64* %car2604, align 8
  %call2605 = call i64 @builtin_lisp_symbol(i32 912)
  %cmp2606 = icmp eq i64 %432, %call2605
  br i1 %cmp2606, label %land.lhs.true.2608, label %if.end.2620

land.lhs.true.2608:                               ; preds = %land.lhs.true.2602
  %433 = load i64, i64* %val2584, align 8
  %sub2609 = sub nsw i64 %433, 3
  %434 = inttoptr i64 %sub2609 to i8*
  %435 = bitcast i8* %434 to %struct.Lisp_Cons*
  %u2610 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %435, i32 0, i32 1
  %cdr2611 = bitcast %union.anon.11* %u2610 to i64*
  %436 = load i64, i64* %cdr2611, align 8
  %call2612 = call zeroext i1 @RANGED_INTEGERP(i64 0, i64 %436, i64 2147483647)
  br i1 %call2612, label %if.then.2614, label %if.end.2620

if.then.2614:                                     ; preds = %land.lhs.true.2608
  %437 = load i64, i64* %val2584, align 8
  %sub2615 = sub nsw i64 %437, 3
  %438 = inttoptr i64 %sub2615 to i8*
  %439 = bitcast i8* %438 to %struct.Lisp_Cons*
  %u2616 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %439, i32 0, i32 1
  %cdr2617 = bitcast %union.anon.11* %u2616 to i64*
  %440 = load i64, i64* %cdr2617, align 8
  %shr2618 = ashr i64 %440, 2
  %conv2619 = trunc i64 %shr2618 to i32
  store i32 %conv2619, i32* %width, align 4
  store i8 1, i8* %width_change, align 1
  br label %if.end.2620

if.end.2620:                                      ; preds = %if.then.2614, %land.lhs.true.2608, %land.lhs.true.2602, %if.else.2597
  br label %if.end.2621

if.end.2621:                                      ; preds = %if.end.2620, %if.then.2592
  br label %if.end.2729

if.else.2622:                                     ; preds = %while.body
  %441 = load i64, i64* %prop2583, align 8
  %call2623 = call i64 @builtin_lisp_symbol(i32 515)
  %cmp2624 = icmp eq i64 %441, %call2623
  br i1 %cmp2624, label %if.then.2626, label %if.else.2658

if.then.2626:                                     ; preds = %if.else.2622
  %442 = load i64, i64* %val2584, align 8
  %call2627 = call zeroext i1 @RANGED_INTEGERP(i64 0, i64 %442, i64 2147483647)
  br i1 %call2627, label %if.then.2628, label %if.else.2633

if.then.2628:                                     ; preds = %if.then.2626
  %443 = load i64, i64* %val2584, align 8
  %shr2629 = ashr i64 %443, 2
  %444 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %444, i32 0, i32 60
  %445 = load i32, i32* %line_height, align 4
  %conv2630 = sext i32 %445 to i64
  %mul2631 = mul nsw i64 %shr2629, %conv2630
  %conv2632 = trunc i64 %mul2631 to i32
  store i32 %conv2632, i32* %height, align 4
  store i8 1, i8* %height_change, align 1
  br label %if.end.2657

if.else.2633:                                     ; preds = %if.then.2626
  %446 = load i64, i64* %val2584, align 8
  %and2634 = and i64 %446, 7
  %conv2635 = trunc i64 %and2634 to i32
  %cmp2636 = icmp eq i32 %conv2635, 3
  br i1 %cmp2636, label %land.lhs.true.2638, label %if.end.2656

land.lhs.true.2638:                               ; preds = %if.else.2633
  %447 = load i64, i64* %val2584, align 8
  %sub2639 = sub nsw i64 %447, 3
  %448 = inttoptr i64 %sub2639 to i8*
  %449 = bitcast i8* %448 to %struct.Lisp_Cons*
  %car2640 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %449, i32 0, i32 0
  %450 = load i64, i64* %car2640, align 8
  %call2641 = call i64 @builtin_lisp_symbol(i32 912)
  %cmp2642 = icmp eq i64 %450, %call2641
  br i1 %cmp2642, label %land.lhs.true.2644, label %if.end.2656

land.lhs.true.2644:                               ; preds = %land.lhs.true.2638
  %451 = load i64, i64* %val2584, align 8
  %sub2645 = sub nsw i64 %451, 3
  %452 = inttoptr i64 %sub2645 to i8*
  %453 = bitcast i8* %452 to %struct.Lisp_Cons*
  %u2646 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %453, i32 0, i32 1
  %cdr2647 = bitcast %union.anon.11* %u2646 to i64*
  %454 = load i64, i64* %cdr2647, align 8
  %call2648 = call zeroext i1 @RANGED_INTEGERP(i64 0, i64 %454, i64 2147483647)
  br i1 %call2648, label %if.then.2650, label %if.end.2656

if.then.2650:                                     ; preds = %land.lhs.true.2644
  %455 = load i64, i64* %val2584, align 8
  %sub2651 = sub nsw i64 %455, 3
  %456 = inttoptr i64 %sub2651 to i8*
  %457 = bitcast i8* %456 to %struct.Lisp_Cons*
  %u2652 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %457, i32 0, i32 1
  %cdr2653 = bitcast %union.anon.11* %u2652 to i64*
  %458 = load i64, i64* %cdr2653, align 8
  %shr2654 = ashr i64 %458, 2
  %conv2655 = trunc i64 %shr2654 to i32
  store i32 %conv2655, i32* %height, align 4
  store i8 1, i8* %height_change, align 1
  br label %if.end.2656

if.end.2656:                                      ; preds = %if.then.2650, %land.lhs.true.2644, %land.lhs.true.2638, %if.else.2633
  br label %if.end.2657

if.end.2657:                                      ; preds = %if.end.2656, %if.then.2628
  br label %if.end.2728

if.else.2658:                                     ; preds = %if.else.2622
  %459 = load i64, i64* %prop2583, align 8
  %call2659 = call i64 @builtin_lisp_symbol(i32 928)
  %cmp2660 = icmp eq i64 %459, %call2659
  br i1 %cmp2660, label %if.then.2662, label %if.else.2663

if.then.2662:                                     ; preds = %if.else.2658
  %460 = load i64, i64* %val2584, align 8
  store i64 %460, i64* %top, align 8
  br label %if.end.2727

if.else.2663:                                     ; preds = %if.else.2658
  %461 = load i64, i64* %prop2583, align 8
  %call2664 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp2665 = icmp eq i64 %461, %call2664
  br i1 %cmp2665, label %if.then.2667, label %if.else.2668

if.then.2667:                                     ; preds = %if.else.2663
  %462 = load i64, i64* %val2584, align 8
  store i64 %462, i64* %left, align 8
  br label %if.end.2726

if.else.2668:                                     ; preds = %if.else.2663
  %463 = load i64, i64* %prop2583, align 8
  %call2669 = call i64 @builtin_lisp_symbol(i32 531)
  %cmp2670 = icmp eq i64 %463, %call2669
  br i1 %cmp2670, label %if.then.2672, label %if.else.2673

if.then.2672:                                     ; preds = %if.else.2668
  %464 = load i64, i64* %val2584, align 8
  store i64 %464, i64* %icon_top, align 8
  br label %if.end.2725

if.else.2673:                                     ; preds = %if.else.2668
  %465 = load i64, i64* %prop2583, align 8
  %call2674 = call i64 @builtin_lisp_symbol(i32 529)
  %cmp2675 = icmp eq i64 %465, %call2674
  br i1 %cmp2675, label %if.then.2677, label %if.else.2678

if.then.2677:                                     ; preds = %if.else.2673
  %466 = load i64, i64* %val2584, align 8
  store i64 %466, i64* %icon_left, align 8
  br label %if.end.2724

if.else.2678:                                     ; preds = %if.else.2673
  %467 = load i64, i64* %prop2583, align 8
  %call2679 = call i64 @builtin_lisp_symbol(i32 472)
  %cmp2680 = icmp eq i64 %467, %call2679
  br i1 %cmp2680, label %if.then.2682, label %if.else.2683

if.then.2682:                                     ; preds = %if.else.2678
  %468 = load i64, i64* %val2584, align 8
  store i64 %468, i64* %fullscreen, align 8
  store i8 1, i8* %fullscreen_change, align 1
  br label %if.end.2723

if.else.2683:                                     ; preds = %if.else.2678
  %469 = load i64, i64* %prop2583, align 8
  %call2684 = call i64 @builtin_lisp_symbol(i32 451)
  %cmp2685 = icmp eq i64 %469, %call2684
  br i1 %cmp2685, label %if.then.2695, label %lor.lhs.false.2687

lor.lhs.false.2687:                               ; preds = %if.else.2683
  %470 = load i64, i64* %prop2583, align 8
  %call2688 = call i64 @builtin_lisp_symbol(i32 193)
  %cmp2689 = icmp eq i64 %470, %call2688
  br i1 %cmp2689, label %if.then.2695, label %lor.lhs.false.2691

lor.lhs.false.2691:                               ; preds = %lor.lhs.false.2687
  %471 = load i64, i64* %prop2583, align 8
  %call2692 = call i64 @builtin_lisp_symbol(i32 439)
  %cmp2693 = icmp eq i64 %471, %call2692
  br i1 %cmp2693, label %if.then.2695, label %if.else.2696

if.then.2695:                                     ; preds = %lor.lhs.false.2691, %lor.lhs.false.2687, %if.else.2683
  br label %while.cond

if.else.2696:                                     ; preds = %lor.lhs.false.2691
  %472 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %473 = load i64, i64* %prop2583, align 8
  %call2699 = call i64 @get_frame_param(%struct.frame* %472, i64 %473)
  store i64 %call2699, i64* %old_value2698, align 8
  %474 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %475 = load i64, i64* %prop2583, align 8
  %476 = load i64, i64* %val2584, align 8
  call void @store_frame_param(%struct.frame* %474, i64 %475, i64 %476)
  %477 = load i64, i64* %prop2583, align 8
  %call2700 = call i64 @builtin_lisp_symbol(i32 1049)
  %call2701 = call i64 @Fget(i64 %477, i64 %call2700)
  store i64 %call2701, i64* %param_index2697, align 8
  %478 = load i64, i64* %param_index2697, align 8
  %call2702 = call zeroext i1 @NATNUMP(i64 %478)
  br i1 %call2702, label %land.lhs.true.2704, label %if.end.2721

land.lhs.true.2704:                               ; preds = %if.else.2696
  %479 = load i64, i64* %param_index2697, align 8
  %shr2705 = ashr i64 %479, 2
  %cmp2706 = icmp ult i64 %shr2705, 37
  br i1 %cmp2706, label %land.lhs.true.2708, label %if.end.2721

land.lhs.true.2708:                               ; preds = %land.lhs.true.2704
  %480 = load i64, i64* %param_index2697, align 8
  %shr2709 = ashr i64 %480, 2
  %481 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal2710 = getelementptr inbounds %struct.frame, %struct.frame* %481, i32 0, i32 61
  %482 = load %struct.terminal*, %struct.terminal** %terminal2710, align 8
  %rif2711 = getelementptr inbounds %struct.terminal, %struct.terminal* %482, i32 0, i32 15
  %483 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif2711, align 8
  %frame_parm_handlers2712 = getelementptr inbounds %struct.redisplay_interface, %struct.redisplay_interface* %483, i32 0, i32 0
  %484 = load void (%struct.frame*, i64, i64)**, void (%struct.frame*, i64, i64)*** %frame_parm_handlers2712, align 8
  %arrayidx2713 = getelementptr inbounds void (%struct.frame*, i64, i64)*, void (%struct.frame*, i64, i64)** %484, i64 %shr2709
  %485 = load void (%struct.frame*, i64, i64)*, void (%struct.frame*, i64, i64)** %arrayidx2713, align 8
  %tobool2714 = icmp ne void (%struct.frame*, i64, i64)* %485, null
  br i1 %tobool2714, label %if.then.2715, label %if.end.2721

if.then.2715:                                     ; preds = %land.lhs.true.2708
  %486 = load i64, i64* %param_index2697, align 8
  %shr2716 = ashr i64 %486, 2
  %487 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal2717 = getelementptr inbounds %struct.frame, %struct.frame* %487, i32 0, i32 61
  %488 = load %struct.terminal*, %struct.terminal** %terminal2717, align 8
  %rif2718 = getelementptr inbounds %struct.terminal, %struct.terminal* %488, i32 0, i32 15
  %489 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif2718, align 8
  %frame_parm_handlers2719 = getelementptr inbounds %struct.redisplay_interface, %struct.redisplay_interface* %489, i32 0, i32 0
  %490 = load void (%struct.frame*, i64, i64)**, void (%struct.frame*, i64, i64)*** %frame_parm_handlers2719, align 8
  %arrayidx2720 = getelementptr inbounds void (%struct.frame*, i64, i64)*, void (%struct.frame*, i64, i64)** %490, i64 %shr2716
  %491 = load void (%struct.frame*, i64, i64)*, void (%struct.frame*, i64, i64)** %arrayidx2720, align 8
  %492 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %493 = load i64, i64* %val2584, align 8
  %494 = load i64, i64* %old_value2698, align 8
  call void %491(%struct.frame* %492, i64 %493, i64 %494)
  br label %if.end.2721

if.end.2721:                                      ; preds = %if.then.2715, %land.lhs.true.2708, %land.lhs.true.2704, %if.else.2696
  br label %if.end.2722

if.end.2722:                                      ; preds = %if.end.2721
  br label %if.end.2723

if.end.2723:                                      ; preds = %if.end.2722, %if.then.2682
  br label %if.end.2724

if.end.2724:                                      ; preds = %if.end.2723, %if.then.2677
  br label %if.end.2725

if.end.2725:                                      ; preds = %if.end.2724, %if.then.2672
  br label %if.end.2726

if.end.2726:                                      ; preds = %if.end.2725, %if.then.2667
  br label %if.end.2727

if.end.2727:                                      ; preds = %if.end.2726, %if.then.2662
  br label %if.end.2728

if.end.2728:                                      ; preds = %if.end.2727, %if.end.2657
  br label %if.end.2729

if.end.2729:                                      ; preds = %if.end.2728, %if.end.2621
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %495 = load i64, i64* %left, align 8
  %call2730 = call i64 @builtin_lisp_symbol(i32 957)
  %cmp2731 = icmp eq i64 %495, %call2730
  br i1 %cmp2731, label %if.then.2733, label %if.end.2749

if.then.2733:                                     ; preds = %while.end
  store i8 1, i8* %left_no_change, align 1
  %496 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_pos = getelementptr inbounds %struct.frame, %struct.frame* %496, i32 0, i32 44
  %497 = load i32, i32* %left_pos, align 4
  %cmp2734 = icmp slt i32 %497, 0
  br i1 %cmp2734, label %if.then.2736, label %if.else.2743

if.then.2736:                                     ; preds = %if.then.2733
  %call2737 = call i64 @builtin_lisp_symbol(i32 752)
  %498 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_pos2738 = getelementptr inbounds %struct.frame, %struct.frame* %498, i32 0, i32 44
  %499 = load i32, i32* %left_pos2738, align 4
  %conv2739 = sext i32 %499 to i64
  %shl2740 = shl i64 %conv2739, 2
  %add2741 = add i64 %shl2740, 2
  %call2742 = call i64 @list2(i64 %call2737, i64 %add2741)
  store i64 %call2742, i64* %left, align 8
  br label %if.end.2748

if.else.2743:                                     ; preds = %if.then.2733
  %500 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_pos2744 = getelementptr inbounds %struct.frame, %struct.frame* %500, i32 0, i32 44
  %501 = load i32, i32* %left_pos2744, align 4
  %conv2745 = sext i32 %501 to i64
  %shl2746 = shl i64 %conv2745, 2
  %add2747 = add i64 %shl2746, 2
  store i64 %add2747, i64* %left, align 8
  br label %if.end.2748

if.end.2748:                                      ; preds = %if.else.2743, %if.then.2736
  br label %if.end.2749

if.end.2749:                                      ; preds = %if.end.2748, %while.end
  %502 = load i64, i64* %top, align 8
  %call2750 = call i64 @builtin_lisp_symbol(i32 957)
  %cmp2751 = icmp eq i64 %502, %call2750
  br i1 %cmp2751, label %if.then.2753, label %if.end.2769

if.then.2753:                                     ; preds = %if.end.2749
  store i8 1, i8* %top_no_change, align 1
  %503 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %top_pos = getelementptr inbounds %struct.frame, %struct.frame* %503, i32 0, i32 45
  %504 = load i32, i32* %top_pos, align 4
  %cmp2754 = icmp slt i32 %504, 0
  br i1 %cmp2754, label %if.then.2756, label %if.else.2763

if.then.2756:                                     ; preds = %if.then.2753
  %call2757 = call i64 @builtin_lisp_symbol(i32 752)
  %505 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %top_pos2758 = getelementptr inbounds %struct.frame, %struct.frame* %505, i32 0, i32 45
  %506 = load i32, i32* %top_pos2758, align 4
  %conv2759 = sext i32 %506 to i64
  %shl2760 = shl i64 %conv2759, 2
  %add2761 = add i64 %shl2760, 2
  %call2762 = call i64 @list2(i64 %call2757, i64 %add2761)
  store i64 %call2762, i64* %top, align 8
  br label %if.end.2768

if.else.2763:                                     ; preds = %if.then.2753
  %507 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %top_pos2764 = getelementptr inbounds %struct.frame, %struct.frame* %507, i32 0, i32 45
  %508 = load i32, i32* %top_pos2764, align 4
  %conv2765 = sext i32 %508 to i64
  %shl2766 = shl i64 %conv2765, 2
  %add2767 = add i64 %shl2766, 2
  store i64 %add2767, i64* %top, align 8
  br label %if.end.2768

if.end.2768:                                      ; preds = %if.else.2763, %if.then.2756
  br label %if.end.2769

if.end.2769:                                      ; preds = %if.end.2768, %if.end.2749
  %509 = load i64, i64* %icon_left, align 8
  %and2770 = and i64 %509, 7
  %conv2771 = trunc i64 %and2770 to i32
  %and2772 = and i32 %conv2771, -5
  %cmp2773 = icmp eq i32 %and2772, 2
  br i1 %cmp2773, label %land.lhs.true.2775, label %if.then.2788

land.lhs.true.2775:                               ; preds = %if.end.2769
  br i1 false, label %cond.false.2780, label %cond.true.2776

cond.true.2776:                                   ; preds = %land.lhs.true.2775
  %510 = load i64, i64* %icon_left, align 8
  %shr2777 = ashr i64 %510, 2
  %cmp2778 = icmp sle i64 -2147483648, %shr2777
  br i1 %cmp2778, label %land.lhs.true.2784, label %if.then.2788

cond.false.2780:                                  ; preds = %land.lhs.true.2775
  %511 = load i64, i64* %icon_left, align 8
  %shr2781 = ashr i64 %511, 2
  %cmp2782 = icmp sle i64 0, %shr2781
  br i1 %cmp2782, label %land.lhs.true.2784, label %if.then.2788

land.lhs.true.2784:                               ; preds = %cond.false.2780, %cond.true.2776
  %512 = load i64, i64* %icon_left, align 8
  %shr2785 = ashr i64 %512, 2
  %cmp2786 = icmp sle i64 %shr2785, 2147483647
  br i1 %cmp2786, label %if.end.2797, label %if.then.2788

if.then.2788:                                     ; preds = %land.lhs.true.2784, %cond.false.2780, %cond.true.2776, %if.end.2769
  store i8 1, i8* %icon_left_no_change, align 1
  %call2789 = call i64 @builtin_lisp_symbol(i32 529)
  %513 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %param_alist = getelementptr inbounds %struct.frame, %struct.frame* %513, i32 0, i32 8
  %514 = load i64, i64* %param_alist, align 8
  %call2790 = call i64 @Fassq(i64 %call2789, i64 %514)
  %call2791 = call i64 @Fcdr(i64 %call2790)
  store i64 %call2791, i64* %icon_left, align 8
  %515 = load i64, i64* %icon_left, align 8
  %call2792 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2793 = icmp eq i64 %515, %call2792
  br i1 %cmp2793, label %if.then.2795, label %if.end.2796

if.then.2795:                                     ; preds = %if.then.2788
  store i64 2, i64* %icon_left, align 8
  br label %if.end.2796

if.end.2796:                                      ; preds = %if.then.2795, %if.then.2788
  br label %if.end.2797

if.end.2797:                                      ; preds = %if.end.2796, %land.lhs.true.2784
  %516 = load i64, i64* %icon_top, align 8
  %and2798 = and i64 %516, 7
  %conv2799 = trunc i64 %and2798 to i32
  %and2800 = and i32 %conv2799, -5
  %cmp2801 = icmp eq i32 %and2800, 2
  br i1 %cmp2801, label %land.lhs.true.2803, label %if.then.2816

land.lhs.true.2803:                               ; preds = %if.end.2797
  br i1 false, label %cond.false.2808, label %cond.true.2804

cond.true.2804:                                   ; preds = %land.lhs.true.2803
  %517 = load i64, i64* %icon_top, align 8
  %shr2805 = ashr i64 %517, 2
  %cmp2806 = icmp sle i64 -2147483648, %shr2805
  br i1 %cmp2806, label %land.lhs.true.2812, label %if.then.2816

cond.false.2808:                                  ; preds = %land.lhs.true.2803
  %518 = load i64, i64* %icon_top, align 8
  %shr2809 = ashr i64 %518, 2
  %cmp2810 = icmp sle i64 0, %shr2809
  br i1 %cmp2810, label %land.lhs.true.2812, label %if.then.2816

land.lhs.true.2812:                               ; preds = %cond.false.2808, %cond.true.2804
  %519 = load i64, i64* %icon_top, align 8
  %shr2813 = ashr i64 %519, 2
  %cmp2814 = icmp sle i64 %shr2813, 2147483647
  br i1 %cmp2814, label %if.end.2826, label %if.then.2816

if.then.2816:                                     ; preds = %land.lhs.true.2812, %cond.false.2808, %cond.true.2804, %if.end.2797
  store i8 1, i8* %icon_top_no_change, align 1
  %call2817 = call i64 @builtin_lisp_symbol(i32 531)
  %520 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %param_alist2818 = getelementptr inbounds %struct.frame, %struct.frame* %520, i32 0, i32 8
  %521 = load i64, i64* %param_alist2818, align 8
  %call2819 = call i64 @Fassq(i64 %call2817, i64 %521)
  %call2820 = call i64 @Fcdr(i64 %call2819)
  store i64 %call2820, i64* %icon_top, align 8
  %522 = load i64, i64* %icon_top, align 8
  %call2821 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2822 = icmp eq i64 %522, %call2821
  br i1 %cmp2822, label %if.then.2824, label %if.end.2825

if.then.2824:                                     ; preds = %if.then.2816
  store i64 2, i64* %icon_top, align 8
  br label %if.end.2825

if.end.2825:                                      ; preds = %if.then.2824, %if.then.2816
  br label %if.end.2826

if.end.2826:                                      ; preds = %if.end.2825, %land.lhs.true.2812
  %523 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %524 = bitcast %struct.frame* %523 to i8*
  %call2827 = call i64 @make_lisp_ptr(i8* %524, i32 5)
  store i64 %call2827, i64* %frame, align 8
  %525 = load i8, i8* %width_change, align 1
  %tobool2828 = trunc i8 %525 to i1
  br i1 %tobool2828, label %land.lhs.true.2830, label %lor.lhs.false.2833

land.lhs.true.2830:                               ; preds = %if.end.2826
  %526 = load i32, i32* %width, align 4
  %527 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_width = getelementptr inbounds %struct.frame, %struct.frame* %527, i32 0, i32 40
  %528 = load i32, i32* %text_width, align 4
  %cmp2831 = icmp ne i32 %526, %528
  br i1 %cmp2831, label %if.then.2839, label %lor.lhs.false.2833

lor.lhs.false.2833:                               ; preds = %land.lhs.true.2830, %if.end.2826
  %529 = load i8, i8* %height_change, align 1
  %tobool2834 = trunc i8 %529 to i1
  br i1 %tobool2834, label %land.lhs.true.2836, label %if.end.2853

land.lhs.true.2836:                               ; preds = %lor.lhs.false.2833
  %530 = load i32, i32* %height, align 4
  %531 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_height = getelementptr inbounds %struct.frame, %struct.frame* %531, i32 0, i32 41
  %532 = load i32, i32* %text_height, align 4
  %cmp2837 = icmp ne i32 %530, %532
  br i1 %cmp2837, label %if.then.2839, label %if.end.2853

if.then.2839:                                     ; preds = %land.lhs.true.2836, %land.lhs.true.2830
  %533 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %534 = load i8, i8* %width_change, align 1
  %tobool2840 = trunc i8 %534 to i1
  br i1 %tobool2840, label %cond.true.2842, label %cond.false.2843

cond.true.2842:                                   ; preds = %if.then.2839
  %535 = load i32, i32* %width, align 4
  br label %cond.end.2844

cond.false.2843:                                  ; preds = %if.then.2839
  br label %cond.end.2844

cond.end.2844:                                    ; preds = %cond.false.2843, %cond.true.2842
  %cond2845 = phi i32 [ %535, %cond.true.2842 ], [ -1, %cond.false.2843 ]
  %536 = load i8, i8* %height_change, align 1
  %tobool2846 = trunc i8 %536 to i1
  br i1 %tobool2846, label %cond.true.2848, label %cond.false.2849

cond.true.2848:                                   ; preds = %cond.end.2844
  %537 = load i32, i32* %height, align 4
  br label %cond.end.2850

cond.false.2849:                                  ; preds = %cond.end.2844
  br label %cond.end.2850

cond.end.2850:                                    ; preds = %cond.false.2849, %cond.true.2848
  %cond2851 = phi i32 [ %537, %cond.true.2848 ], [ -1, %cond.false.2849 ]
  %call2852 = call i64 @builtin_lisp_symbol(i32 1056)
  call void @adjust_frame_size(%struct.frame* %533, i32 %cond2845, i32 %cond2851, i32 1, i1 zeroext false, i64 %call2852)
  br label %if.end.2853

if.end.2853:                                      ; preds = %cond.end.2850, %land.lhs.true.2836, %lor.lhs.false.2833
  %538 = load i64, i64* %left, align 8
  %call2854 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2855 = icmp eq i64 %538, %call2854
  br i1 %cmp2855, label %lor.lhs.false.2857, label %land.lhs.true.2861

lor.lhs.false.2857:                               ; preds = %if.end.2853
  %539 = load i64, i64* %top, align 8
  %call2858 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2859 = icmp eq i64 %539, %call2858
  br i1 %cmp2859, label %if.end.3172, label %land.lhs.true.2861

land.lhs.true.2861:                               ; preds = %lor.lhs.false.2857, %if.end.2853
  %540 = load i8, i8* %left_no_change, align 1
  %tobool2862 = trunc i8 %540 to i1
  br i1 %tobool2862, label %land.lhs.true.2864, label %land.lhs.true.2867

land.lhs.true.2864:                               ; preds = %land.lhs.true.2861
  %541 = load i8, i8* %top_no_change, align 1
  %tobool2865 = trunc i8 %541 to i1
  br i1 %tobool2865, label %if.end.3172, label %land.lhs.true.2867

land.lhs.true.2867:                               ; preds = %land.lhs.true.2864, %land.lhs.true.2861
  %542 = load i64, i64* %left, align 8
  %call2868 = call zeroext i1 @NUMBERP(i64 %542)
  br i1 %call2868, label %land.lhs.true.2870, label %if.then.2885

land.lhs.true.2870:                               ; preds = %land.lhs.true.2867
  %543 = load i64, i64* %left, align 8
  %shr2871 = ashr i64 %543, 2
  %544 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_pos2872 = getelementptr inbounds %struct.frame, %struct.frame* %544, i32 0, i32 44
  %545 = load i32, i32* %left_pos2872, align 4
  %conv2873 = sext i32 %545 to i64
  %cmp2874 = icmp eq i64 %shr2871, %conv2873
  br i1 %cmp2874, label %land.lhs.true.2876, label %if.then.2885

land.lhs.true.2876:                               ; preds = %land.lhs.true.2870
  %546 = load i64, i64* %top, align 8
  %call2877 = call zeroext i1 @NUMBERP(i64 %546)
  br i1 %call2877, label %land.lhs.true.2879, label %if.then.2885

land.lhs.true.2879:                               ; preds = %land.lhs.true.2876
  %547 = load i64, i64* %top, align 8
  %shr2880 = ashr i64 %547, 2
  %548 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %top_pos2881 = getelementptr inbounds %struct.frame, %struct.frame* %548, i32 0, i32 45
  %549 = load i32, i32* %top_pos2881, align 4
  %conv2882 = sext i32 %549 to i64
  %cmp2883 = icmp eq i64 %shr2880, %conv2882
  br i1 %cmp2883, label %if.end.3172, label %if.then.2885

if.then.2885:                                     ; preds = %land.lhs.true.2879, %land.lhs.true.2876, %land.lhs.true.2870, %land.lhs.true.2867
  store i32 0, i32* %leftpos, align 4
  store i32 0, i32* %toppos, align 4
  %550 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %size_hint_flags = getelementptr inbounds %struct.frame, %struct.frame* %550, i32 0, i32 49
  %551 = load i32, i32* %size_hint_flags, align 4
  %and2886 = and i32 %551, -49
  store i32 %and2886, i32* %size_hint_flags, align 4
  %552 = load i64, i64* %left, align 8
  %call2887 = call i64 @builtin_lisp_symbol(i32 668)
  %cmp2888 = icmp eq i64 %552, %call2887
  br i1 %cmp2888, label %if.then.2890, label %if.else.2892

if.then.2890:                                     ; preds = %if.then.2885
  %553 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %size_hint_flags2891 = getelementptr inbounds %struct.frame, %struct.frame* %553, i32 0, i32 49
  %554 = load i32, i32* %size_hint_flags2891, align 4
  %or = or i32 %554, 16
  store i32 %or, i32* %size_hint_flags2891, align 4
  br label %if.end.3027

if.else.2892:                                     ; preds = %if.then.2885
  %555 = load i64, i64* %left, align 8
  %and2893 = and i64 %555, 7
  %conv2894 = trunc i64 %and2893 to i32
  %and2895 = and i32 %conv2894, -5
  %cmp2896 = icmp eq i32 %and2895, 2
  br i1 %cmp2896, label %land.lhs.true.2898, label %if.else.2920

land.lhs.true.2898:                               ; preds = %if.else.2892
  br i1 false, label %cond.false.2903, label %cond.true.2899

cond.true.2899:                                   ; preds = %land.lhs.true.2898
  %556 = load i64, i64* %left, align 8
  %shr2900 = ashr i64 %556, 2
  %cmp2901 = icmp sle i64 -2147483648, %shr2900
  br i1 %cmp2901, label %land.lhs.true.2907, label %if.else.2920

cond.false.2903:                                  ; preds = %land.lhs.true.2898
  %557 = load i64, i64* %left, align 8
  %shr2904 = ashr i64 %557, 2
  %cmp2905 = icmp sle i64 0, %shr2904
  br i1 %cmp2905, label %land.lhs.true.2907, label %if.else.2920

land.lhs.true.2907:                               ; preds = %cond.false.2903, %cond.true.2899
  %558 = load i64, i64* %left, align 8
  %shr2908 = ashr i64 %558, 2
  %cmp2909 = icmp sle i64 %shr2908, 2147483647
  br i1 %cmp2909, label %if.then.2911, label %if.else.2920

if.then.2911:                                     ; preds = %land.lhs.true.2907
  %559 = load i64, i64* %left, align 8
  %shr2912 = ashr i64 %559, 2
  %conv2913 = trunc i64 %shr2912 to i32
  store i32 %conv2913, i32* %leftpos, align 4
  %560 = load i32, i32* %leftpos, align 4
  %cmp2914 = icmp slt i32 %560, 0
  br i1 %cmp2914, label %if.then.2916, label %if.end.2919

if.then.2916:                                     ; preds = %if.then.2911
  %561 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %size_hint_flags2917 = getelementptr inbounds %struct.frame, %struct.frame* %561, i32 0, i32 49
  %562 = load i32, i32* %size_hint_flags2917, align 4
  %or2918 = or i32 %562, 16
  store i32 %or2918, i32* %size_hint_flags2917, align 4
  br label %if.end.2919

if.end.2919:                                      ; preds = %if.then.2916, %if.then.2911
  br label %if.end.3026

if.else.2920:                                     ; preds = %land.lhs.true.2907, %cond.false.2903, %cond.true.2899, %if.else.2892
  %563 = load i64, i64* %left, align 8
  %and2921 = and i64 %563, 7
  %conv2922 = trunc i64 %and2921 to i32
  %cmp2923 = icmp eq i32 %conv2922, 3
  br i1 %cmp2923, label %land.lhs.true.2925, label %if.else.2958

land.lhs.true.2925:                               ; preds = %if.else.2920
  %564 = load i64, i64* %left, align 8
  %sub2926 = sub nsw i64 %564, 3
  %565 = inttoptr i64 %sub2926 to i8*
  %566 = bitcast i8* %565 to %struct.Lisp_Cons*
  %car2927 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %566, i32 0, i32 0
  %567 = load i64, i64* %car2927, align 8
  %call2928 = call i64 @builtin_lisp_symbol(i32 668)
  %cmp2929 = icmp eq i64 %567, %call2928
  br i1 %cmp2929, label %land.lhs.true.2931, label %if.else.2958

land.lhs.true.2931:                               ; preds = %land.lhs.true.2925
  %568 = load i64, i64* %left, align 8
  %sub2932 = sub nsw i64 %568, 3
  %569 = inttoptr i64 %sub2932 to i8*
  %570 = bitcast i8* %569 to %struct.Lisp_Cons*
  %u2933 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %570, i32 0, i32 1
  %cdr2934 = bitcast %union.anon.11* %u2933 to i64*
  %571 = load i64, i64* %cdr2934, align 8
  %and2935 = and i64 %571, 7
  %conv2936 = trunc i64 %and2935 to i32
  %cmp2937 = icmp eq i32 %conv2936, 3
  br i1 %cmp2937, label %land.lhs.true.2939, label %if.else.2958

land.lhs.true.2939:                               ; preds = %land.lhs.true.2931
  %572 = load i64, i64* %left, align 8
  %sub2940 = sub nsw i64 %572, 3
  %573 = inttoptr i64 %sub2940 to i8*
  %574 = bitcast i8* %573 to %struct.Lisp_Cons*
  %u2941 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %574, i32 0, i32 1
  %cdr2942 = bitcast %union.anon.11* %u2941 to i64*
  %575 = load i64, i64* %cdr2942, align 8
  %sub2943 = sub nsw i64 %575, 3
  %576 = inttoptr i64 %sub2943 to i8*
  %577 = bitcast i8* %576 to %struct.Lisp_Cons*
  %car2944 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %577, i32 0, i32 0
  %578 = load i64, i64* %car2944, align 8
  %call2945 = call zeroext i1 @RANGED_INTEGERP(i64 -2147483647, i64 %578, i64 2147483647)
  br i1 %call2945, label %if.then.2947, label %if.else.2958

if.then.2947:                                     ; preds = %land.lhs.true.2939
  %579 = load i64, i64* %left, align 8
  %sub2948 = sub nsw i64 %579, 3
  %580 = inttoptr i64 %sub2948 to i8*
  %581 = bitcast i8* %580 to %struct.Lisp_Cons*
  %u2949 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %581, i32 0, i32 1
  %cdr2950 = bitcast %union.anon.11* %u2949 to i64*
  %582 = load i64, i64* %cdr2950, align 8
  %sub2951 = sub nsw i64 %582, 3
  %583 = inttoptr i64 %sub2951 to i8*
  %584 = bitcast i8* %583 to %struct.Lisp_Cons*
  %car2952 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %584, i32 0, i32 0
  %585 = load i64, i64* %car2952, align 8
  %shr2953 = ashr i64 %585, 2
  %sub2954 = sub nsw i64 0, %shr2953
  %conv2955 = trunc i64 %sub2954 to i32
  store i32 %conv2955, i32* %leftpos, align 4
  %586 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %size_hint_flags2956 = getelementptr inbounds %struct.frame, %struct.frame* %586, i32 0, i32 49
  %587 = load i32, i32* %size_hint_flags2956, align 4
  %or2957 = or i32 %587, 16
  store i32 %or2957, i32* %size_hint_flags2956, align 4
  br label %if.end.3025

if.else.2958:                                     ; preds = %land.lhs.true.2939, %land.lhs.true.2931, %land.lhs.true.2925, %if.else.2920
  %588 = load i64, i64* %left, align 8
  %and2959 = and i64 %588, 7
  %conv2960 = trunc i64 %and2959 to i32
  %cmp2961 = icmp eq i32 %conv2960, 3
  br i1 %cmp2961, label %land.lhs.true.2963, label %if.end.3024

land.lhs.true.2963:                               ; preds = %if.else.2958
  %589 = load i64, i64* %left, align 8
  %sub2964 = sub nsw i64 %589, 3
  %590 = inttoptr i64 %sub2964 to i8*
  %591 = bitcast i8* %590 to %struct.Lisp_Cons*
  %car2965 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %591, i32 0, i32 0
  %592 = load i64, i64* %car2965, align 8
  %call2966 = call i64 @builtin_lisp_symbol(i32 752)
  %cmp2967 = icmp eq i64 %592, %call2966
  br i1 %cmp2967, label %land.lhs.true.2969, label %if.end.3024

land.lhs.true.2969:                               ; preds = %land.lhs.true.2963
  %593 = load i64, i64* %left, align 8
  %sub2970 = sub nsw i64 %593, 3
  %594 = inttoptr i64 %sub2970 to i8*
  %595 = bitcast i8* %594 to %struct.Lisp_Cons*
  %u2971 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %595, i32 0, i32 1
  %cdr2972 = bitcast %union.anon.11* %u2971 to i64*
  %596 = load i64, i64* %cdr2972, align 8
  %and2973 = and i64 %596, 7
  %conv2974 = trunc i64 %and2973 to i32
  %cmp2975 = icmp eq i32 %conv2974, 3
  br i1 %cmp2975, label %land.lhs.true.2977, label %if.end.3024

land.lhs.true.2977:                               ; preds = %land.lhs.true.2969
  %597 = load i64, i64* %left, align 8
  %sub2978 = sub nsw i64 %597, 3
  %598 = inttoptr i64 %sub2978 to i8*
  %599 = bitcast i8* %598 to %struct.Lisp_Cons*
  %u2979 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %599, i32 0, i32 1
  %cdr2980 = bitcast %union.anon.11* %u2979 to i64*
  %600 = load i64, i64* %cdr2980, align 8
  %sub2981 = sub nsw i64 %600, 3
  %601 = inttoptr i64 %sub2981 to i8*
  %602 = bitcast i8* %601 to %struct.Lisp_Cons*
  %car2982 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %602, i32 0, i32 0
  %603 = load i64, i64* %car2982, align 8
  %and2983 = and i64 %603, 7
  %conv2984 = trunc i64 %and2983 to i32
  %and2985 = and i32 %conv2984, -5
  %cmp2986 = icmp eq i32 %and2985, 2
  br i1 %cmp2986, label %land.lhs.true.2988, label %if.end.3024

land.lhs.true.2988:                               ; preds = %land.lhs.true.2977
  br i1 false, label %cond.false.2998, label %cond.true.2989

cond.true.2989:                                   ; preds = %land.lhs.true.2988
  %604 = load i64, i64* %left, align 8
  %sub2990 = sub nsw i64 %604, 3
  %605 = inttoptr i64 %sub2990 to i8*
  %606 = bitcast i8* %605 to %struct.Lisp_Cons*
  %u2991 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %606, i32 0, i32 1
  %cdr2992 = bitcast %union.anon.11* %u2991 to i64*
  %607 = load i64, i64* %cdr2992, align 8
  %sub2993 = sub nsw i64 %607, 3
  %608 = inttoptr i64 %sub2993 to i8*
  %609 = bitcast i8* %608 to %struct.Lisp_Cons*
  %car2994 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %609, i32 0, i32 0
  %610 = load i64, i64* %car2994, align 8
  %shr2995 = ashr i64 %610, 2
  %cmp2996 = icmp sle i64 -2147483648, %shr2995
  br i1 %cmp2996, label %land.lhs.true.3007, label %if.end.3024

cond.false.2998:                                  ; preds = %land.lhs.true.2988
  %611 = load i64, i64* %left, align 8
  %sub2999 = sub nsw i64 %611, 3
  %612 = inttoptr i64 %sub2999 to i8*
  %613 = bitcast i8* %612 to %struct.Lisp_Cons*
  %u3000 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %613, i32 0, i32 1
  %cdr3001 = bitcast %union.anon.11* %u3000 to i64*
  %614 = load i64, i64* %cdr3001, align 8
  %sub3002 = sub nsw i64 %614, 3
  %615 = inttoptr i64 %sub3002 to i8*
  %616 = bitcast i8* %615 to %struct.Lisp_Cons*
  %car3003 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %616, i32 0, i32 0
  %617 = load i64, i64* %car3003, align 8
  %shr3004 = ashr i64 %617, 2
  %cmp3005 = icmp sle i64 0, %shr3004
  br i1 %cmp3005, label %land.lhs.true.3007, label %if.end.3024

land.lhs.true.3007:                               ; preds = %cond.false.2998, %cond.true.2989
  %618 = load i64, i64* %left, align 8
  %sub3008 = sub nsw i64 %618, 3
  %619 = inttoptr i64 %sub3008 to i8*
  %620 = bitcast i8* %619 to %struct.Lisp_Cons*
  %u3009 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %620, i32 0, i32 1
  %cdr3010 = bitcast %union.anon.11* %u3009 to i64*
  %621 = load i64, i64* %cdr3010, align 8
  %sub3011 = sub nsw i64 %621, 3
  %622 = inttoptr i64 %sub3011 to i8*
  %623 = bitcast i8* %622 to %struct.Lisp_Cons*
  %car3012 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %623, i32 0, i32 0
  %624 = load i64, i64* %car3012, align 8
  %shr3013 = ashr i64 %624, 2
  %cmp3014 = icmp sle i64 %shr3013, 2147483647
  br i1 %cmp3014, label %if.then.3016, label %if.end.3024

if.then.3016:                                     ; preds = %land.lhs.true.3007
  %625 = load i64, i64* %left, align 8
  %sub3017 = sub nsw i64 %625, 3
  %626 = inttoptr i64 %sub3017 to i8*
  %627 = bitcast i8* %626 to %struct.Lisp_Cons*
  %u3018 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %627, i32 0, i32 1
  %cdr3019 = bitcast %union.anon.11* %u3018 to i64*
  %628 = load i64, i64* %cdr3019, align 8
  %sub3020 = sub nsw i64 %628, 3
  %629 = inttoptr i64 %sub3020 to i8*
  %630 = bitcast i8* %629 to %struct.Lisp_Cons*
  %car3021 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %630, i32 0, i32 0
  %631 = load i64, i64* %car3021, align 8
  %shr3022 = ashr i64 %631, 2
  %conv3023 = trunc i64 %shr3022 to i32
  store i32 %conv3023, i32* %leftpos, align 4
  br label %if.end.3024

if.end.3024:                                      ; preds = %if.then.3016, %land.lhs.true.3007, %cond.false.2998, %cond.true.2989, %land.lhs.true.2977, %land.lhs.true.2969, %land.lhs.true.2963, %if.else.2958
  br label %if.end.3025

if.end.3025:                                      ; preds = %if.end.3024, %if.then.2947
  br label %if.end.3026

if.end.3026:                                      ; preds = %if.end.3025, %if.end.2919
  br label %if.end.3027

if.end.3027:                                      ; preds = %if.end.3026, %if.then.2890
  %632 = load i64, i64* %top, align 8
  %call3028 = call i64 @builtin_lisp_symbol(i32 668)
  %cmp3029 = icmp eq i64 %632, %call3028
  br i1 %cmp3029, label %if.then.3031, label %if.else.3034

if.then.3031:                                     ; preds = %if.end.3027
  %633 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %size_hint_flags3032 = getelementptr inbounds %struct.frame, %struct.frame* %633, i32 0, i32 49
  %634 = load i32, i32* %size_hint_flags3032, align 4
  %or3033 = or i32 %634, 32
  store i32 %or3033, i32* %size_hint_flags3032, align 4
  br label %if.end.3169

if.else.3034:                                     ; preds = %if.end.3027
  %635 = load i64, i64* %top, align 8
  %and3035 = and i64 %635, 7
  %conv3036 = trunc i64 %and3035 to i32
  %and3037 = and i32 %conv3036, -5
  %cmp3038 = icmp eq i32 %and3037, 2
  br i1 %cmp3038, label %land.lhs.true.3040, label %if.else.3062

land.lhs.true.3040:                               ; preds = %if.else.3034
  br i1 false, label %cond.false.3045, label %cond.true.3041

cond.true.3041:                                   ; preds = %land.lhs.true.3040
  %636 = load i64, i64* %top, align 8
  %shr3042 = ashr i64 %636, 2
  %cmp3043 = icmp sle i64 -2147483648, %shr3042
  br i1 %cmp3043, label %land.lhs.true.3049, label %if.else.3062

cond.false.3045:                                  ; preds = %land.lhs.true.3040
  %637 = load i64, i64* %top, align 8
  %shr3046 = ashr i64 %637, 2
  %cmp3047 = icmp sle i64 0, %shr3046
  br i1 %cmp3047, label %land.lhs.true.3049, label %if.else.3062

land.lhs.true.3049:                               ; preds = %cond.false.3045, %cond.true.3041
  %638 = load i64, i64* %top, align 8
  %shr3050 = ashr i64 %638, 2
  %cmp3051 = icmp sle i64 %shr3050, 2147483647
  br i1 %cmp3051, label %if.then.3053, label %if.else.3062

if.then.3053:                                     ; preds = %land.lhs.true.3049
  %639 = load i64, i64* %top, align 8
  %shr3054 = ashr i64 %639, 2
  %conv3055 = trunc i64 %shr3054 to i32
  store i32 %conv3055, i32* %toppos, align 4
  %640 = load i32, i32* %toppos, align 4
  %cmp3056 = icmp slt i32 %640, 0
  br i1 %cmp3056, label %if.then.3058, label %if.end.3061

if.then.3058:                                     ; preds = %if.then.3053
  %641 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %size_hint_flags3059 = getelementptr inbounds %struct.frame, %struct.frame* %641, i32 0, i32 49
  %642 = load i32, i32* %size_hint_flags3059, align 4
  %or3060 = or i32 %642, 32
  store i32 %or3060, i32* %size_hint_flags3059, align 4
  br label %if.end.3061

if.end.3061:                                      ; preds = %if.then.3058, %if.then.3053
  br label %if.end.3168

if.else.3062:                                     ; preds = %land.lhs.true.3049, %cond.false.3045, %cond.true.3041, %if.else.3034
  %643 = load i64, i64* %top, align 8
  %and3063 = and i64 %643, 7
  %conv3064 = trunc i64 %and3063 to i32
  %cmp3065 = icmp eq i32 %conv3064, 3
  br i1 %cmp3065, label %land.lhs.true.3067, label %if.else.3100

land.lhs.true.3067:                               ; preds = %if.else.3062
  %644 = load i64, i64* %top, align 8
  %sub3068 = sub nsw i64 %644, 3
  %645 = inttoptr i64 %sub3068 to i8*
  %646 = bitcast i8* %645 to %struct.Lisp_Cons*
  %car3069 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %646, i32 0, i32 0
  %647 = load i64, i64* %car3069, align 8
  %call3070 = call i64 @builtin_lisp_symbol(i32 668)
  %cmp3071 = icmp eq i64 %647, %call3070
  br i1 %cmp3071, label %land.lhs.true.3073, label %if.else.3100

land.lhs.true.3073:                               ; preds = %land.lhs.true.3067
  %648 = load i64, i64* %top, align 8
  %sub3074 = sub nsw i64 %648, 3
  %649 = inttoptr i64 %sub3074 to i8*
  %650 = bitcast i8* %649 to %struct.Lisp_Cons*
  %u3075 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %650, i32 0, i32 1
  %cdr3076 = bitcast %union.anon.11* %u3075 to i64*
  %651 = load i64, i64* %cdr3076, align 8
  %and3077 = and i64 %651, 7
  %conv3078 = trunc i64 %and3077 to i32
  %cmp3079 = icmp eq i32 %conv3078, 3
  br i1 %cmp3079, label %land.lhs.true.3081, label %if.else.3100

land.lhs.true.3081:                               ; preds = %land.lhs.true.3073
  %652 = load i64, i64* %top, align 8
  %sub3082 = sub nsw i64 %652, 3
  %653 = inttoptr i64 %sub3082 to i8*
  %654 = bitcast i8* %653 to %struct.Lisp_Cons*
  %u3083 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %654, i32 0, i32 1
  %cdr3084 = bitcast %union.anon.11* %u3083 to i64*
  %655 = load i64, i64* %cdr3084, align 8
  %sub3085 = sub nsw i64 %655, 3
  %656 = inttoptr i64 %sub3085 to i8*
  %657 = bitcast i8* %656 to %struct.Lisp_Cons*
  %car3086 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %657, i32 0, i32 0
  %658 = load i64, i64* %car3086, align 8
  %call3087 = call zeroext i1 @RANGED_INTEGERP(i64 -2147483647, i64 %658, i64 2147483647)
  br i1 %call3087, label %if.then.3089, label %if.else.3100

if.then.3089:                                     ; preds = %land.lhs.true.3081
  %659 = load i64, i64* %top, align 8
  %sub3090 = sub nsw i64 %659, 3
  %660 = inttoptr i64 %sub3090 to i8*
  %661 = bitcast i8* %660 to %struct.Lisp_Cons*
  %u3091 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %661, i32 0, i32 1
  %cdr3092 = bitcast %union.anon.11* %u3091 to i64*
  %662 = load i64, i64* %cdr3092, align 8
  %sub3093 = sub nsw i64 %662, 3
  %663 = inttoptr i64 %sub3093 to i8*
  %664 = bitcast i8* %663 to %struct.Lisp_Cons*
  %car3094 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %664, i32 0, i32 0
  %665 = load i64, i64* %car3094, align 8
  %shr3095 = ashr i64 %665, 2
  %sub3096 = sub nsw i64 0, %shr3095
  %conv3097 = trunc i64 %sub3096 to i32
  store i32 %conv3097, i32* %toppos, align 4
  %666 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %size_hint_flags3098 = getelementptr inbounds %struct.frame, %struct.frame* %666, i32 0, i32 49
  %667 = load i32, i32* %size_hint_flags3098, align 4
  %or3099 = or i32 %667, 32
  store i32 %or3099, i32* %size_hint_flags3098, align 4
  br label %if.end.3167

if.else.3100:                                     ; preds = %land.lhs.true.3081, %land.lhs.true.3073, %land.lhs.true.3067, %if.else.3062
  %668 = load i64, i64* %top, align 8
  %and3101 = and i64 %668, 7
  %conv3102 = trunc i64 %and3101 to i32
  %cmp3103 = icmp eq i32 %conv3102, 3
  br i1 %cmp3103, label %land.lhs.true.3105, label %if.end.3166

land.lhs.true.3105:                               ; preds = %if.else.3100
  %669 = load i64, i64* %top, align 8
  %sub3106 = sub nsw i64 %669, 3
  %670 = inttoptr i64 %sub3106 to i8*
  %671 = bitcast i8* %670 to %struct.Lisp_Cons*
  %car3107 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %671, i32 0, i32 0
  %672 = load i64, i64* %car3107, align 8
  %call3108 = call i64 @builtin_lisp_symbol(i32 752)
  %cmp3109 = icmp eq i64 %672, %call3108
  br i1 %cmp3109, label %land.lhs.true.3111, label %if.end.3166

land.lhs.true.3111:                               ; preds = %land.lhs.true.3105
  %673 = load i64, i64* %top, align 8
  %sub3112 = sub nsw i64 %673, 3
  %674 = inttoptr i64 %sub3112 to i8*
  %675 = bitcast i8* %674 to %struct.Lisp_Cons*
  %u3113 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %675, i32 0, i32 1
  %cdr3114 = bitcast %union.anon.11* %u3113 to i64*
  %676 = load i64, i64* %cdr3114, align 8
  %and3115 = and i64 %676, 7
  %conv3116 = trunc i64 %and3115 to i32
  %cmp3117 = icmp eq i32 %conv3116, 3
  br i1 %cmp3117, label %land.lhs.true.3119, label %if.end.3166

land.lhs.true.3119:                               ; preds = %land.lhs.true.3111
  %677 = load i64, i64* %top, align 8
  %sub3120 = sub nsw i64 %677, 3
  %678 = inttoptr i64 %sub3120 to i8*
  %679 = bitcast i8* %678 to %struct.Lisp_Cons*
  %u3121 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %679, i32 0, i32 1
  %cdr3122 = bitcast %union.anon.11* %u3121 to i64*
  %680 = load i64, i64* %cdr3122, align 8
  %sub3123 = sub nsw i64 %680, 3
  %681 = inttoptr i64 %sub3123 to i8*
  %682 = bitcast i8* %681 to %struct.Lisp_Cons*
  %car3124 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %682, i32 0, i32 0
  %683 = load i64, i64* %car3124, align 8
  %and3125 = and i64 %683, 7
  %conv3126 = trunc i64 %and3125 to i32
  %and3127 = and i32 %conv3126, -5
  %cmp3128 = icmp eq i32 %and3127, 2
  br i1 %cmp3128, label %land.lhs.true.3130, label %if.end.3166

land.lhs.true.3130:                               ; preds = %land.lhs.true.3119
  br i1 false, label %cond.false.3140, label %cond.true.3131

cond.true.3131:                                   ; preds = %land.lhs.true.3130
  %684 = load i64, i64* %top, align 8
  %sub3132 = sub nsw i64 %684, 3
  %685 = inttoptr i64 %sub3132 to i8*
  %686 = bitcast i8* %685 to %struct.Lisp_Cons*
  %u3133 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %686, i32 0, i32 1
  %cdr3134 = bitcast %union.anon.11* %u3133 to i64*
  %687 = load i64, i64* %cdr3134, align 8
  %sub3135 = sub nsw i64 %687, 3
  %688 = inttoptr i64 %sub3135 to i8*
  %689 = bitcast i8* %688 to %struct.Lisp_Cons*
  %car3136 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %689, i32 0, i32 0
  %690 = load i64, i64* %car3136, align 8
  %shr3137 = ashr i64 %690, 2
  %cmp3138 = icmp sle i64 -2147483648, %shr3137
  br i1 %cmp3138, label %land.lhs.true.3149, label %if.end.3166

cond.false.3140:                                  ; preds = %land.lhs.true.3130
  %691 = load i64, i64* %top, align 8
  %sub3141 = sub nsw i64 %691, 3
  %692 = inttoptr i64 %sub3141 to i8*
  %693 = bitcast i8* %692 to %struct.Lisp_Cons*
  %u3142 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %693, i32 0, i32 1
  %cdr3143 = bitcast %union.anon.11* %u3142 to i64*
  %694 = load i64, i64* %cdr3143, align 8
  %sub3144 = sub nsw i64 %694, 3
  %695 = inttoptr i64 %sub3144 to i8*
  %696 = bitcast i8* %695 to %struct.Lisp_Cons*
  %car3145 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %696, i32 0, i32 0
  %697 = load i64, i64* %car3145, align 8
  %shr3146 = ashr i64 %697, 2
  %cmp3147 = icmp sle i64 0, %shr3146
  br i1 %cmp3147, label %land.lhs.true.3149, label %if.end.3166

land.lhs.true.3149:                               ; preds = %cond.false.3140, %cond.true.3131
  %698 = load i64, i64* %top, align 8
  %sub3150 = sub nsw i64 %698, 3
  %699 = inttoptr i64 %sub3150 to i8*
  %700 = bitcast i8* %699 to %struct.Lisp_Cons*
  %u3151 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %700, i32 0, i32 1
  %cdr3152 = bitcast %union.anon.11* %u3151 to i64*
  %701 = load i64, i64* %cdr3152, align 8
  %sub3153 = sub nsw i64 %701, 3
  %702 = inttoptr i64 %sub3153 to i8*
  %703 = bitcast i8* %702 to %struct.Lisp_Cons*
  %car3154 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %703, i32 0, i32 0
  %704 = load i64, i64* %car3154, align 8
  %shr3155 = ashr i64 %704, 2
  %cmp3156 = icmp sle i64 %shr3155, 2147483647
  br i1 %cmp3156, label %if.then.3158, label %if.end.3166

if.then.3158:                                     ; preds = %land.lhs.true.3149
  %705 = load i64, i64* %top, align 8
  %sub3159 = sub nsw i64 %705, 3
  %706 = inttoptr i64 %sub3159 to i8*
  %707 = bitcast i8* %706 to %struct.Lisp_Cons*
  %u3160 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %707, i32 0, i32 1
  %cdr3161 = bitcast %union.anon.11* %u3160 to i64*
  %708 = load i64, i64* %cdr3161, align 8
  %sub3162 = sub nsw i64 %708, 3
  %709 = inttoptr i64 %sub3162 to i8*
  %710 = bitcast i8* %709 to %struct.Lisp_Cons*
  %car3163 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %710, i32 0, i32 0
  %711 = load i64, i64* %car3163, align 8
  %shr3164 = ashr i64 %711, 2
  %conv3165 = trunc i64 %shr3164 to i32
  store i32 %conv3165, i32* %toppos, align 4
  br label %if.end.3166

if.end.3166:                                      ; preds = %if.then.3158, %land.lhs.true.3149, %cond.false.3140, %cond.true.3131, %land.lhs.true.3119, %land.lhs.true.3111, %land.lhs.true.3105, %if.else.3100
  br label %if.end.3167

if.end.3167:                                      ; preds = %if.end.3166, %if.then.3089
  br label %if.end.3168

if.end.3168:                                      ; preds = %if.end.3167, %if.end.3061
  br label %if.end.3169

if.end.3169:                                      ; preds = %if.end.3168, %if.then.3031
  %712 = load i32, i32* %toppos, align 4
  %713 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %top_pos3170 = getelementptr inbounds %struct.frame, %struct.frame* %713, i32 0, i32 45
  store i32 %712, i32* %top_pos3170, align 4
  %714 = load i32, i32* %leftpos, align 4
  %715 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_pos3171 = getelementptr inbounds %struct.frame, %struct.frame* %715, i32 0, i32 44
  store i32 %714, i32* %left_pos3171, align 4
  %716 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %win_gravity = getelementptr inbounds %struct.frame, %struct.frame* %716, i32 0, i32 48
  store i32 1, i32* %win_gravity, align 4
  %717 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %718 = load i32, i32* %leftpos, align 4
  %719 = load i32, i32* %toppos, align 4
  call void @x_set_offset(%struct.frame* %717, i32 %718, i32 %719, i32 -1)
  br label %if.end.3172

if.end.3172:                                      ; preds = %if.end.3169, %land.lhs.true.2879, %land.lhs.true.2864, %lor.lhs.false.2857
  %720 = load i8, i8* %fullscreen_change, align 1
  %tobool3173 = trunc i8 %720 to i1
  br i1 %tobool3173, label %if.then.3174, label %if.end.3185

if.then.3174:                                     ; preds = %if.end.3172
  %721 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call3176 = call i64 @builtin_lisp_symbol(i32 472)
  %call3177 = call i64 @get_frame_param(%struct.frame* %721, i64 %call3176)
  store i64 %call3177, i64* %old_value3175, align 8
  %722 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call3178 = call i64 @builtin_lisp_symbol(i32 1057)
  %723 = load i64, i64* %old_value3175, align 8
  %724 = load i64, i64* %fullscreen, align 8
  %call3179 = call i64 @list2(i64 %723, i64 %724)
  call void @frame_size_history_add(%struct.frame* %722, i64 %call3178, i32 0, i32 0, i64 %call3179)
  %725 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call3180 = call i64 @builtin_lisp_symbol(i32 472)
  %726 = load i64, i64* %fullscreen, align 8
  call void @store_frame_param(%struct.frame* %725, i64 %call3180, i64 %726)
  %727 = load i64, i64* %fullscreen, align 8
  %728 = load i64, i64* %old_value3175, align 8
  %cmp3181 = icmp eq i64 %727, %728
  br i1 %cmp3181, label %if.end.3184, label %if.then.3183

if.then.3183:                                     ; preds = %if.then.3174
  %729 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %730 = load i64, i64* %fullscreen, align 8
  %731 = load i64, i64* %old_value3175, align 8
  call void @x_set_fullscreen(%struct.frame* %729, i64 %730, i64 %731)
  br label %if.end.3184

if.end.3184:                                      ; preds = %if.then.3183, %if.then.3174
  br label %if.end.3185

if.end.3185:                                      ; preds = %if.end.3184, %if.end.3172
  %732 = load i64, i64* %icon_left, align 8
  %call3186 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp3187 = icmp eq i64 %732, %call3186
  br i1 %cmp3187, label %lor.lhs.false.3189, label %land.lhs.true.3193

lor.lhs.false.3189:                               ; preds = %if.end.3185
  %733 = load i64, i64* %icon_top, align 8
  %call3190 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp3191 = icmp eq i64 %733, %call3190
  br i1 %cmp3191, label %if.end.3204, label %land.lhs.true.3193

land.lhs.true.3193:                               ; preds = %lor.lhs.false.3189, %if.end.3185
  %734 = load i8, i8* %icon_left_no_change, align 1
  %tobool3194 = trunc i8 %734 to i1
  br i1 %tobool3194, label %land.lhs.true.3196, label %if.then.3199

land.lhs.true.3196:                               ; preds = %land.lhs.true.3193
  %735 = load i8, i8* %icon_top_no_change, align 1
  %tobool3197 = trunc i8 %735 to i1
  br i1 %tobool3197, label %if.end.3204, label %if.then.3199

if.then.3199:                                     ; preds = %land.lhs.true.3196, %land.lhs.true.3193
  %736 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %737 = load i64, i64* %icon_left, align 8
  %shr3200 = ashr i64 %737, 2
  %conv3201 = trunc i64 %shr3200 to i32
  %738 = load i64, i64* %icon_top, align 8
  %shr3202 = ashr i64 %738, 2
  %conv3203 = trunc i64 %shr3202 to i32
  call void @x_wm_set_icon_position(%struct.frame* %736, i32 %conv3201, i32 %conv3203)
  br label %if.end.3204

if.end.3204:                                      ; preds = %if.then.3199, %land.lhs.true.3196, %lor.lhs.false.3189
  br label %do.body.3205

do.body.3205:                                     ; preds = %if.end.3204
  %739 = load i8, i8* %sa_must_free, align 1
  %tobool3206 = trunc i8 %739 to i1
  br i1 %tobool3206, label %if.then.3207, label %if.end.3210

if.then.3207:                                     ; preds = %do.body.3205
  store i8 0, i8* %sa_must_free, align 1
  %740 = load i64, i64* %sa_count, align 8
  %call3208 = call i64 @builtin_lisp_symbol(i32 0)
  %call3209 = call i64 @unbind_to(i64 %740, i64 %call3208)
  br label %if.end.3210

if.end.3210:                                      ; preds = %if.then.3207, %do.body.3205
  br label %do.end.3211

do.end.3211:                                      ; preds = %if.end.3210
  ret void
}

declare i64 @Flength(i64) #1

; Function Attrs: noreturn
declare void @memory_full(i64) #2

declare noalias i8* @xmalloc(i64) #1

declare i64 @make_save_memory(i64*, i64) #1

declare void @record_unwind_protect(void (i64)*, i64) #1

declare void @free_save_value(i64) #1

declare void @update_face_from_frame_parameter(%struct.frame*, i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fframe_char_height(i64 %frame) #0 {
entry:
  %retval = alloca i64, align 8
  %frame.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_any_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  %1 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 26
  %2 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %2, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 60
  %4 = load i32, i32* %line_height, align 4
  %conv = sext i32 %4 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  store i64 %add, i64* %retval
  br label %return

if.else:                                          ; preds = %entry
  store i64 6, i64* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %5 = load i64, i64* %retval
  ret i64 %5
}

; Function Attrs: nounwind uwtable
define i64 @Fframe_char_width(i64 %frame) #0 {
entry:
  %retval = alloca i64, align 8
  %frame.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_any_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  %1 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 26
  %2 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %2, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load %struct.frame*, %struct.frame** %f, align 8
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 59
  %4 = load i32, i32* %column_width, align 4
  %conv = sext i32 %4 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  store i64 %add, i64* %retval
  br label %return

if.else:                                          ; preds = %entry
  store i64 6, i64* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %5 = load i64, i64* %retval
  ret i64 %5
}

; Function Attrs: nounwind uwtable
define i64 @Fframe_pixel_height(i64 %frame) #0 {
entry:
  %retval = alloca i64, align 8
  %frame.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_any_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  %1 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 26
  %2 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %2, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load %struct.frame*, %struct.frame** %f, align 8
  %pixel_height = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 47
  %4 = load i32, i32* %pixel_height, align 4
  %conv = sext i32 %4 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  store i64 %add, i64* %retval
  br label %return

if.else:                                          ; preds = %entry
  %5 = load %struct.frame*, %struct.frame** %f, align 8
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 39
  %6 = load i32, i32* %total_lines, align 4
  %conv1 = sext i32 %6 to i64
  %shl2 = shl i64 %conv1, 2
  %add3 = add i64 %shl2, 2
  store i64 %add3, i64* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %7 = load i64, i64* %retval
  ret i64 %7
}

; Function Attrs: nounwind uwtable
define i64 @Fframe_pixel_width(i64 %frame) #0 {
entry:
  %retval = alloca i64, align 8
  %frame.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_any_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  %1 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 26
  %2 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %2, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load %struct.frame*, %struct.frame** %f, align 8
  %pixel_width = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 46
  %4 = load i32, i32* %pixel_width, align 4
  %conv = sext i32 %4 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  store i64 %add, i64* %retval
  br label %return

if.else:                                          ; preds = %entry
  %5 = load %struct.frame*, %struct.frame** %f, align 8
  %total_cols = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 38
  %6 = load i32, i32* %total_cols, align 4
  %conv1 = sext i32 %6 to i64
  %shl2 = shl i64 %conv1, 2
  %add3 = add i64 %shl2, 2
  store i64 %add3, i64* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %7 = load i64, i64* %retval
  ret i64 %7
}

; Function Attrs: nounwind uwtable
define i64 @Ftool_bar_pixel_width(i64 %frame) #0 {
entry:
  %retval = alloca i64, align 8
  %frame.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_any_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  %1 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 26
  %2 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %2, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %4 = load %struct.x_output*, %struct.x_output** %x, align 8
  %toolbar_left_width = getelementptr inbounds %struct.x_output, %struct.x_output* %4, i32 0, i32 3
  %5 = load i32, i32* %toolbar_left_width, align 4
  %6 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %7 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %toolbar_right_width = getelementptr inbounds %struct.x_output, %struct.x_output* %7, i32 0, i32 4
  %8 = load i32, i32* %toolbar_right_width, align 4
  %add = add nsw i32 %5, %8
  %conv = sext i32 %add to i64
  %shl = shl i64 %conv, 2
  %add3 = add i64 %shl, 2
  store i64 %add3, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  store i64 2, i64* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load i64, i64* %retval
  ret i64 %9
}

; Function Attrs: nounwind uwtable
define i64 @Fframe_text_cols(i64 %frame) #0 {
entry:
  %frame.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_any_frame(i64 %0)
  %text_cols = getelementptr inbounds %struct.frame, %struct.frame* %call, i32 0, i32 36
  %1 = load i32, i32* %text_cols, align 4
  %conv = sext i32 %1 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

; Function Attrs: nounwind uwtable
define i64 @Fframe_text_lines(i64 %frame) #0 {
entry:
  %frame.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_any_frame(i64 %0)
  %text_lines = getelementptr inbounds %struct.frame, %struct.frame* %call, i32 0, i32 37
  %1 = load i32, i32* %text_lines, align 4
  %conv = sext i32 %1 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

; Function Attrs: nounwind uwtable
define i64 @Fframe_total_cols(i64 %frame) #0 {
entry:
  %frame.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_any_frame(i64 %0)
  %total_cols = getelementptr inbounds %struct.frame, %struct.frame* %call, i32 0, i32 38
  %1 = load i32, i32* %total_cols, align 4
  %conv = sext i32 %1 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

; Function Attrs: nounwind uwtable
define i64 @Fframe_total_lines(i64 %frame) #0 {
entry:
  %frame.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_any_frame(i64 %0)
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %call, i32 0, i32 39
  %1 = load i32, i32* %total_lines, align 4
  %conv = sext i32 %1 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

; Function Attrs: nounwind uwtable
define i64 @Fframe_text_width(i64 %frame) #0 {
entry:
  %frame.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_any_frame(i64 %0)
  %text_width = getelementptr inbounds %struct.frame, %struct.frame* %call, i32 0, i32 40
  %1 = load i32, i32* %text_width, align 4
  %conv = sext i32 %1 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

; Function Attrs: nounwind uwtable
define i64 @Fframe_text_height(i64 %frame) #0 {
entry:
  %frame.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_any_frame(i64 %0)
  %text_height = getelementptr inbounds %struct.frame, %struct.frame* %call, i32 0, i32 41
  %1 = load i32, i32* %text_height, align 4
  %conv = sext i32 %1 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

; Function Attrs: nounwind uwtable
define i64 @Fscroll_bar_width(i64 %frame) #0 {
entry:
  %frame.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_any_frame(i64 %0)
  %vertical_scroll_bar_type = getelementptr inbounds %struct.frame, %struct.frame* %call, i32 0, i32 26
  %1 = bitcast i48* %vertical_scroll_bar_type to i64*
  %bf.load = load i64, i64* %1, align 8
  %bf.lshr = lshr i64 %bf.load, 30
  %bf.clear = and i64 %bf.lshr, 3
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp ne i32 %bf.cast, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i64, i64* %frame.addr, align 8
  %call1 = call %struct.frame* @decode_any_frame(i64 %2)
  %config_scroll_bar_width = getelementptr inbounds %struct.frame, %struct.frame* %call1, i32 0, i32 69
  %3 = load i32, i32* %config_scroll_bar_width, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ 0, %cond.false ]
  %conv = sext i32 %cond to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

; Function Attrs: nounwind uwtable
define i64 @Fscroll_bar_height(i64 %frame) #0 {
entry:
  %frame.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_any_frame(i64 %0)
  %horizontal_scroll_bars = getelementptr inbounds %struct.frame, %struct.frame* %call, i32 0, i32 26
  %1 = bitcast i48* %horizontal_scroll_bars to i64*
  %bf.load = load i64, i64* %1, align 8
  %bf.lshr = lshr i64 %bf.load, 32
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i64, i64* %frame.addr, align 8
  %call1 = call %struct.frame* @decode_any_frame(i64 %2)
  %config_scroll_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %call1, i32 0, i32 71
  %3 = load i32, i32* %config_scroll_bar_height, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ 0, %cond.false ]
  %conv = sext i32 %cond to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

; Function Attrs: nounwind uwtable
define i64 @Ffringe_width(i64 %frame) #0 {
entry:
  %frame.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_any_frame(i64 %0)
  %left_fringe_width = getelementptr inbounds %struct.frame, %struct.frame* %call, i32 0, i32 54
  %1 = load i32, i32* %left_fringe_width, align 4
  %2 = load i64, i64* %frame.addr, align 8
  %call1 = call %struct.frame* @decode_any_frame(i64 %2)
  %right_fringe_width = getelementptr inbounds %struct.frame, %struct.frame* %call1, i32 0, i32 55
  %3 = load i32, i32* %right_fringe_width, align 4
  %add = add nsw i32 %1, %3
  %conv = sext i32 %add to i64
  %shl = shl i64 %conv, 2
  %add2 = add i64 %shl, 2
  ret i64 %add2
}

; Function Attrs: nounwind uwtable
define i64 @Fborder_width(i64 %frame) #0 {
entry:
  %frame.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_any_frame(i64 %0)
  %internal_border_width = getelementptr inbounds %struct.frame, %struct.frame* %call, i32 0, i32 51
  %1 = load i32, i32* %internal_border_width, align 4
  %conv = sext i32 %1 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

; Function Attrs: nounwind uwtable
define i64 @Fright_divider_width(i64 %frame) #0 {
entry:
  %frame.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_any_frame(i64 %0)
  %right_divider_width = getelementptr inbounds %struct.frame, %struct.frame* %call, i32 0, i32 52
  %1 = load i32, i32* %right_divider_width, align 4
  %conv = sext i32 %1 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

; Function Attrs: nounwind uwtable
define i64 @Fbottom_divider_width(i64 %frame) #0 {
entry:
  %frame.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_any_frame(i64 %0)
  %bottom_divider_width = getelementptr inbounds %struct.frame, %struct.frame* %call, i32 0, i32 53
  %1 = load i32, i32* %bottom_divider_width, align 4
  %conv = sext i32 %1 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

; Function Attrs: nounwind uwtable
define i64 @Fset_frame_height(i64 %frame, i64 %height, i64 %pretend, i64 %pixelwise) #0 {
entry:
  %frame.addr = alloca i64, align 8
  %height.addr = alloca i64, align 8
  %pretend.addr = alloca i64, align 8
  %pixelwise.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %pixel_height = alloca i32, align 4
  store i64 %frame, i64* %frame.addr, align 8
  store i64 %height, i64* %height.addr, align 8
  store i64 %pretend, i64* %pretend.addr, align 8
  store i64 %pixelwise, i64* %pixelwise.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_live_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.body.1

do.body.1:                                        ; preds = %do.body
  %1 = load i64, i64* %height.addr, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %and2 = and i32 %conv, -5
  %cmp = icmp eq i32 %and2, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body.1
  br label %cond.end

cond.false:                                       ; preds = %do.body.1
  %call4 = call i64 @builtin_lisp_symbol(i32 559)
  %2 = load i64, i64* %height.addr, align 8
  %3 = call i64 @wrong_type_argument(i64 %call4, i64 %2) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %4, %cond.true
  %5 = load i64, i64* %height.addr, align 8
  %shr = ashr i64 %5, 2
  %cmp5 = icmp sle i64 -2147483648, %shr
  br i1 %cmp5, label %land.lhs.true, label %if.then

land.lhs.true:                                    ; preds = %cond.end
  %6 = load i64, i64* %height.addr, align 8
  %shr7 = ashr i64 %6, 2
  %cmp8 = icmp sle i64 %shr7, 2147483647
  br i1 %cmp8, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true, %cond.end
  %7 = load i64, i64* %height.addr, align 8
  call void @args_out_of_range_3(i64 %7, i64 -8589934590, i64 8589934590) #7
  unreachable

if.end:                                           ; preds = %land.lhs.true
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %do.end.10

do.end.10:                                        ; preds = %do.end
  %8 = load i64, i64* %pixelwise.addr, align 8
  %call11 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp12 = icmp eq i64 %8, %call11
  br i1 %cmp12, label %cond.false.16, label %cond.true.14

cond.true.14:                                     ; preds = %do.end.10
  %9 = load i64, i64* %height.addr, align 8
  %shr15 = ashr i64 %9, 2
  br label %cond.end.19

cond.false.16:                                    ; preds = %do.end.10
  %10 = load i64, i64* %height.addr, align 8
  %shr17 = ashr i64 %10, 2
  %11 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 60
  %12 = load i32, i32* %line_height, align 4
  %conv18 = sext i32 %12 to i64
  %mul = mul nsw i64 %shr17, %conv18
  br label %cond.end.19

cond.end.19:                                      ; preds = %cond.false.16, %cond.true.14
  %cond = phi i64 [ %shr15, %cond.true.14 ], [ %mul, %cond.false.16 ]
  %conv20 = trunc i64 %cond to i32
  store i32 %conv20, i32* %pixel_height, align 4
  %13 = load %struct.frame*, %struct.frame** %f, align 8
  %14 = load i32, i32* %pixel_height, align 4
  %15 = load i64, i64* %pretend.addr, align 8
  %call21 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp22 = icmp eq i64 %15, %call21
  %lnot = xor i1 %cmp22, true
  %call24 = call i64 @builtin_lisp_symbol(i32 515)
  call void @adjust_frame_size(%struct.frame* %13, i32 -1, i32 %14, i32 1, i1 zeroext %lnot, i64 %call24)
  %call25 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call25
}

; Function Attrs: nounwind uwtable
define i64 @Fset_frame_width(i64 %frame, i64 %width, i64 %pretend, i64 %pixelwise) #0 {
entry:
  %frame.addr = alloca i64, align 8
  %width.addr = alloca i64, align 8
  %pretend.addr = alloca i64, align 8
  %pixelwise.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %pixel_width = alloca i32, align 4
  store i64 %frame, i64* %frame.addr, align 8
  store i64 %width, i64* %width.addr, align 8
  store i64 %pretend, i64* %pretend.addr, align 8
  store i64 %pixelwise, i64* %pixelwise.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_live_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.body.1

do.body.1:                                        ; preds = %do.body
  %1 = load i64, i64* %width.addr, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %and2 = and i32 %conv, -5
  %cmp = icmp eq i32 %and2, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body.1
  br label %cond.end

cond.false:                                       ; preds = %do.body.1
  %call4 = call i64 @builtin_lisp_symbol(i32 559)
  %2 = load i64, i64* %width.addr, align 8
  %3 = call i64 @wrong_type_argument(i64 %call4, i64 %2) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %4, %cond.true
  %5 = load i64, i64* %width.addr, align 8
  %shr = ashr i64 %5, 2
  %cmp5 = icmp sle i64 -2147483648, %shr
  br i1 %cmp5, label %land.lhs.true, label %if.then

land.lhs.true:                                    ; preds = %cond.end
  %6 = load i64, i64* %width.addr, align 8
  %shr7 = ashr i64 %6, 2
  %cmp8 = icmp sle i64 %shr7, 2147483647
  br i1 %cmp8, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true, %cond.end
  %7 = load i64, i64* %width.addr, align 8
  call void @args_out_of_range_3(i64 %7, i64 -8589934590, i64 8589934590) #7
  unreachable

if.end:                                           ; preds = %land.lhs.true
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %do.end.10

do.end.10:                                        ; preds = %do.end
  %8 = load i64, i64* %pixelwise.addr, align 8
  %call11 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp12 = icmp eq i64 %8, %call11
  br i1 %cmp12, label %cond.false.16, label %cond.true.14

cond.true.14:                                     ; preds = %do.end.10
  %9 = load i64, i64* %width.addr, align 8
  %shr15 = ashr i64 %9, 2
  br label %cond.end.19

cond.false.16:                                    ; preds = %do.end.10
  %10 = load i64, i64* %width.addr, align 8
  %shr17 = ashr i64 %10, 2
  %11 = load %struct.frame*, %struct.frame** %f, align 8
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 59
  %12 = load i32, i32* %column_width, align 4
  %conv18 = sext i32 %12 to i64
  %mul = mul nsw i64 %shr17, %conv18
  br label %cond.end.19

cond.end.19:                                      ; preds = %cond.false.16, %cond.true.14
  %cond = phi i64 [ %shr15, %cond.true.14 ], [ %mul, %cond.false.16 ]
  %conv20 = trunc i64 %cond to i32
  store i32 %conv20, i32* %pixel_width, align 4
  %13 = load %struct.frame*, %struct.frame** %f, align 8
  %14 = load i32, i32* %pixel_width, align 4
  %15 = load i64, i64* %pretend.addr, align 8
  %call21 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp22 = icmp eq i64 %15, %call21
  %lnot = xor i1 %cmp22, true
  %call24 = call i64 @builtin_lisp_symbol(i32 1017)
  call void @adjust_frame_size(%struct.frame* %13, i32 %14, i32 -1, i32 1, i1 zeroext %lnot, i64 %call24)
  %call25 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call25
}

; Function Attrs: nounwind uwtable
define i64 @Fset_frame_size(i64 %frame, i64 %width, i64 %height, i64 %pixelwise) #0 {
entry:
  %frame.addr = alloca i64, align 8
  %width.addr = alloca i64, align 8
  %height.addr = alloca i64, align 8
  %pixelwise.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %pixel_width = alloca i32, align 4
  %pixel_height = alloca i32, align 4
  store i64 %frame, i64* %frame.addr, align 8
  store i64 %width, i64* %width.addr, align 8
  store i64 %height, i64* %height.addr, align 8
  store i64 %pixelwise, i64* %pixelwise.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_live_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.body.1

do.body.1:                                        ; preds = %do.body
  %1 = load i64, i64* %width.addr, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %and2 = and i32 %conv, -5
  %cmp = icmp eq i32 %and2, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body.1
  br label %cond.end

cond.false:                                       ; preds = %do.body.1
  %call4 = call i64 @builtin_lisp_symbol(i32 559)
  %2 = load i64, i64* %width.addr, align 8
  %3 = call i64 @wrong_type_argument(i64 %call4, i64 %2) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %4, %cond.true
  %5 = load i64, i64* %width.addr, align 8
  %shr = ashr i64 %5, 2
  %cmp5 = icmp sle i64 -2147483648, %shr
  br i1 %cmp5, label %land.lhs.true, label %if.then

land.lhs.true:                                    ; preds = %cond.end
  %6 = load i64, i64* %width.addr, align 8
  %shr7 = ashr i64 %6, 2
  %cmp8 = icmp sle i64 %shr7, 2147483647
  br i1 %cmp8, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true, %cond.end
  %7 = load i64, i64* %width.addr, align 8
  call void @args_out_of_range_3(i64 %7, i64 -8589934590, i64 8589934590) #7
  unreachable

if.end:                                           ; preds = %land.lhs.true
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %do.end.10

do.end.10:                                        ; preds = %do.end
  br label %do.body.11

do.body.11:                                       ; preds = %do.end.10
  br label %do.body.12

do.body.12:                                       ; preds = %do.body.11
  %8 = load i64, i64* %height.addr, align 8
  %and13 = and i64 %8, 7
  %conv14 = trunc i64 %and13 to i32
  %and15 = and i32 %conv14, -5
  %cmp16 = icmp eq i32 %and15, 2
  br i1 %cmp16, label %cond.true.18, label %cond.false.19

cond.true.18:                                     ; preds = %do.body.12
  br label %cond.end.21

cond.false.19:                                    ; preds = %do.body.12
  %call20 = call i64 @builtin_lisp_symbol(i32 559)
  %9 = load i64, i64* %height.addr, align 8
  %10 = call i64 @wrong_type_argument(i64 %call20, i64 %9) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.21

cond.end.21:                                      ; preds = %11, %cond.true.18
  %12 = load i64, i64* %height.addr, align 8
  %shr22 = ashr i64 %12, 2
  %cmp23 = icmp sle i64 -2147483648, %shr22
  br i1 %cmp23, label %land.lhs.true.25, label %if.then.29

land.lhs.true.25:                                 ; preds = %cond.end.21
  %13 = load i64, i64* %height.addr, align 8
  %shr26 = ashr i64 %13, 2
  %cmp27 = icmp sle i64 %shr26, 2147483647
  br i1 %cmp27, label %if.end.30, label %if.then.29

if.then.29:                                       ; preds = %land.lhs.true.25, %cond.end.21
  %14 = load i64, i64* %height.addr, align 8
  call void @args_out_of_range_3(i64 %14, i64 -8589934590, i64 8589934590) #7
  unreachable

if.end.30:                                        ; preds = %land.lhs.true.25
  br label %do.end.31

do.end.31:                                        ; preds = %if.end.30
  br label %do.end.32

do.end.32:                                        ; preds = %do.end.31
  %15 = load i64, i64* %pixelwise.addr, align 8
  %call33 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp34 = icmp eq i64 %15, %call33
  br i1 %cmp34, label %cond.false.38, label %cond.true.36

cond.true.36:                                     ; preds = %do.end.32
  %16 = load i64, i64* %width.addr, align 8
  %shr37 = ashr i64 %16, 2
  br label %cond.end.41

cond.false.38:                                    ; preds = %do.end.32
  %17 = load i64, i64* %width.addr, align 8
  %shr39 = ashr i64 %17, 2
  %18 = load %struct.frame*, %struct.frame** %f, align 8
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 59
  %19 = load i32, i32* %column_width, align 4
  %conv40 = sext i32 %19 to i64
  %mul = mul nsw i64 %shr39, %conv40
  br label %cond.end.41

cond.end.41:                                      ; preds = %cond.false.38, %cond.true.36
  %cond = phi i64 [ %shr37, %cond.true.36 ], [ %mul, %cond.false.38 ]
  %conv42 = trunc i64 %cond to i32
  store i32 %conv42, i32* %pixel_width, align 4
  %20 = load i64, i64* %pixelwise.addr, align 8
  %call43 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp44 = icmp eq i64 %20, %call43
  br i1 %cmp44, label %cond.false.48, label %cond.true.46

cond.true.46:                                     ; preds = %cond.end.41
  %21 = load i64, i64* %height.addr, align 8
  %shr47 = ashr i64 %21, 2
  br label %cond.end.52

cond.false.48:                                    ; preds = %cond.end.41
  %22 = load i64, i64* %height.addr, align 8
  %shr49 = ashr i64 %22, 2
  %23 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %23, i32 0, i32 60
  %24 = load i32, i32* %line_height, align 4
  %conv50 = sext i32 %24 to i64
  %mul51 = mul nsw i64 %shr49, %conv50
  br label %cond.end.52

cond.end.52:                                      ; preds = %cond.false.48, %cond.true.46
  %cond53 = phi i64 [ %shr47, %cond.true.46 ], [ %mul51, %cond.false.48 ]
  %conv54 = trunc i64 %cond53 to i32
  store i32 %conv54, i32* %pixel_height, align 4
  %25 = load %struct.frame*, %struct.frame** %f, align 8
  %26 = load i32, i32* %pixel_width, align 4
  %27 = load i32, i32* %pixel_height, align 4
  %call55 = call i64 @builtin_lisp_symbol(i32 864)
  call void @adjust_frame_size(%struct.frame* %25, i32 %26, i32 %27, i32 1, i1 zeroext false, i64 %call55)
  %call56 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call56
}

; Function Attrs: nounwind uwtable
define i64 @Fframe_position(i64 %frame) #0 {
entry:
  %frame.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_live_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  %1 = load %struct.frame*, %struct.frame** %f, align 8
  %left_pos = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 44
  %2 = load i32, i32* %left_pos, align 4
  %conv = sext i32 %2 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  %3 = load %struct.frame*, %struct.frame** %f, align 8
  %top_pos = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 45
  %4 = load i32, i32* %top_pos, align 4
  %conv1 = sext i32 %4 to i64
  %shl2 = shl i64 %conv1, 2
  %add3 = add i64 %shl2, 2
  %call4 = call i64 @Fcons(i64 %add, i64 %add3)
  ret i64 %call4
}

; Function Attrs: nounwind uwtable
define i64 @Fset_frame_position(i64 %frame, i64 %x, i64 %y) #0 {
entry:
  %frame.addr = alloca i64, align 8
  %x.addr = alloca i64, align 8
  %y.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  store i64 %frame, i64* %frame.addr, align 8
  store i64 %x, i64* %x.addr, align 8
  store i64 %y, i64* %y.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_live_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.body.1

do.body.1:                                        ; preds = %do.body
  %1 = load i64, i64* %x.addr, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %and2 = and i32 %conv, -5
  %cmp = icmp eq i32 %and2, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body.1
  br label %cond.end

cond.false:                                       ; preds = %do.body.1
  %call4 = call i64 @builtin_lisp_symbol(i32 559)
  %2 = load i64, i64* %x.addr, align 8
  %3 = call i64 @wrong_type_argument(i64 %call4, i64 %2) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %4, %cond.true
  %5 = load i64, i64* %x.addr, align 8
  %shr = ashr i64 %5, 2
  %cmp5 = icmp sle i64 -2147483648, %shr
  br i1 %cmp5, label %land.lhs.true, label %if.then

land.lhs.true:                                    ; preds = %cond.end
  %6 = load i64, i64* %x.addr, align 8
  %shr7 = ashr i64 %6, 2
  %cmp8 = icmp sle i64 %shr7, 2147483647
  br i1 %cmp8, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true, %cond.end
  %7 = load i64, i64* %x.addr, align 8
  call void @args_out_of_range_3(i64 %7, i64 -8589934590, i64 8589934590) #7
  unreachable

if.end:                                           ; preds = %land.lhs.true
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %do.end.10

do.end.10:                                        ; preds = %do.end
  br label %do.body.11

do.body.11:                                       ; preds = %do.end.10
  br label %do.body.12

do.body.12:                                       ; preds = %do.body.11
  %8 = load i64, i64* %y.addr, align 8
  %and13 = and i64 %8, 7
  %conv14 = trunc i64 %and13 to i32
  %and15 = and i32 %conv14, -5
  %cmp16 = icmp eq i32 %and15, 2
  br i1 %cmp16, label %cond.true.18, label %cond.false.19

cond.true.18:                                     ; preds = %do.body.12
  br label %cond.end.21

cond.false.19:                                    ; preds = %do.body.12
  %call20 = call i64 @builtin_lisp_symbol(i32 559)
  %9 = load i64, i64* %y.addr, align 8
  %10 = call i64 @wrong_type_argument(i64 %call20, i64 %9) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.21

cond.end.21:                                      ; preds = %11, %cond.true.18
  %12 = load i64, i64* %y.addr, align 8
  %shr22 = ashr i64 %12, 2
  %cmp23 = icmp sle i64 -2147483648, %shr22
  br i1 %cmp23, label %land.lhs.true.25, label %if.then.29

land.lhs.true.25:                                 ; preds = %cond.end.21
  %13 = load i64, i64* %y.addr, align 8
  %shr26 = ashr i64 %13, 2
  %cmp27 = icmp sle i64 %shr26, 2147483647
  br i1 %cmp27, label %if.end.30, label %if.then.29

if.then.29:                                       ; preds = %land.lhs.true.25, %cond.end.21
  %14 = load i64, i64* %y.addr, align 8
  call void @args_out_of_range_3(i64 %14, i64 -8589934590, i64 8589934590) #7
  unreachable

if.end.30:                                        ; preds = %land.lhs.true.25
  br label %do.end.31

do.end.31:                                        ; preds = %if.end.30
  br label %do.end.32

do.end.32:                                        ; preds = %do.end.31
  %15 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 26
  %16 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %16, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp33 = icmp eq i32 %bf.cast, 2
  br i1 %cmp33, label %if.then.35, label %if.end.40

if.then.35:                                       ; preds = %do.end.32
  %17 = load %struct.frame*, %struct.frame** %f, align 8
  %18 = load i64, i64* %x.addr, align 8
  %shr36 = ashr i64 %18, 2
  %conv37 = trunc i64 %shr36 to i32
  %19 = load i64, i64* %y.addr, align 8
  %shr38 = ashr i64 %19, 2
  %conv39 = trunc i64 %shr38 to i32
  call void @x_set_offset(%struct.frame* %17, i32 %conv37, i32 %conv39, i32 1)
  br label %if.end.40

if.end.40:                                        ; preds = %if.then.35, %do.end.32
  %call41 = call i64 @builtin_lisp_symbol(i32 901)
  ret i64 %call41
}

declare void @x_set_offset(%struct.frame*, i32, i32, i32) #1

declare i64 @Fequal(i64, i64) #1

declare i64 @Fget(i64, i64) #1

declare zeroext i1 @NATNUMP(i64) #1

declare zeroext i1 @RANGED_INTEGERP(i64, i64, i64) #1

declare zeroext i1 @NUMBERP(i64) #1

; Function Attrs: nounwind uwtable
define void @x_set_fullscreen(%struct.frame* %f, i64 %new_value, i64 %old_value) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %new_value.addr = alloca i64, align 8
  %old_value.addr = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %new_value, i64* %new_value.addr, align 8
  store i64 %old_value, i64* %old_value.addr, align 8
  %0 = load i64, i64* %new_value.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %want_fullscreen = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 26
  %2 = bitcast i48* %want_fullscreen to i64*
  %bf.load = load i64, i64* %2, align 8
  %bf.clear = and i64 %bf.load, -1006632961
  store i64 %bf.clear, i64* %2, align 8
  br label %if.end.36

if.else:                                          ; preds = %entry
  %3 = load i64, i64* %new_value.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 470)
  %cmp2 = icmp eq i64 %3, %call1
  br i1 %cmp2, label %if.then.5, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %4 = load i64, i64* %new_value.addr, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 472)
  %cmp4 = icmp eq i64 %4, %call3
  br i1 %cmp4, label %if.then.5, label %if.else.9

if.then.5:                                        ; preds = %lor.lhs.false, %if.else
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %want_fullscreen6 = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 26
  %6 = bitcast i48* %want_fullscreen6 to i64*
  %bf.load7 = load i64, i64* %6, align 8
  %bf.clear8 = and i64 %bf.load7, -1006632961
  %bf.set = or i64 %bf.clear8, 201326592
  store i64 %bf.set, i64* %6, align 8
  br label %if.end.35

if.else.9:                                        ; preds = %lor.lhs.false
  %7 = load i64, i64* %new_value.addr, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 473)
  %cmp11 = icmp eq i64 %7, %call10
  br i1 %cmp11, label %if.then.12, label %if.else.17

if.then.12:                                       ; preds = %if.else.9
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %want_fullscreen13 = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 26
  %9 = bitcast i48* %want_fullscreen13 to i64*
  %bf.load14 = load i64, i64* %9, align 8
  %bf.clear15 = and i64 %bf.load14, -1006632961
  %bf.set16 = or i64 %bf.clear15, 67108864
  store i64 %bf.set16, i64* %9, align 8
  br label %if.end.34

if.else.17:                                       ; preds = %if.else.9
  %10 = load i64, i64* %new_value.addr, align 8
  %call18 = call i64 @builtin_lisp_symbol(i32 471)
  %cmp19 = icmp eq i64 %10, %call18
  br i1 %cmp19, label %if.then.20, label %if.else.25

if.then.20:                                       ; preds = %if.else.17
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %want_fullscreen21 = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 26
  %12 = bitcast i48* %want_fullscreen21 to i64*
  %bf.load22 = load i64, i64* %12, align 8
  %bf.clear23 = and i64 %bf.load22, -1006632961
  %bf.set24 = or i64 %bf.clear23, 134217728
  store i64 %bf.set24, i64* %12, align 8
  br label %if.end.33

if.else.25:                                       ; preds = %if.else.17
  %13 = load i64, i64* %new_value.addr, align 8
  %call26 = call i64 @builtin_lisp_symbol(i32 648)
  %cmp27 = icmp eq i64 %13, %call26
  br i1 %cmp27, label %if.then.28, label %if.end

if.then.28:                                       ; preds = %if.else.25
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %want_fullscreen29 = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 26
  %15 = bitcast i48* %want_fullscreen29 to i64*
  %bf.load30 = load i64, i64* %15, align 8
  %bf.clear31 = and i64 %bf.load30, -1006632961
  %bf.set32 = or i64 %bf.clear31, 268435456
  store i64 %bf.set32, i64* %15, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.28, %if.else.25
  br label %if.end.33

if.end.33:                                        ; preds = %if.end, %if.then.20
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.33, %if.then.12
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34, %if.then.5
  br label %if.end.36

if.end.36:                                        ; preds = %if.end.35, %if.then
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 61
  %17 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %fullscreen_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %17, i32 0, i32 35
  %18 = load void (%struct.frame*)*, void (%struct.frame*)** %fullscreen_hook, align 8
  %cmp37 = icmp ne void (%struct.frame*)* %18, null
  br i1 %cmp37, label %if.then.38, label %if.end.41

if.then.38:                                       ; preds = %if.end.36
  %19 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal39 = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 61
  %20 = load %struct.terminal*, %struct.terminal** %terminal39, align 8
  %fullscreen_hook40 = getelementptr inbounds %struct.terminal, %struct.terminal* %20, i32 0, i32 35
  %21 = load void (%struct.frame*)*, void (%struct.frame*)** %fullscreen_hook40, align 8
  %22 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void %21(%struct.frame* %22)
  br label %if.end.41

if.end.41:                                        ; preds = %if.then.38, %if.end.36
  ret void
}

declare void @x_wm_set_icon_position(%struct.frame*, i32, i32) #1

; Function Attrs: nounwind uwtable
define void @x_set_line_spacing(%struct.frame* %f, i64 %new_value, i64 %old_value) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %new_value.addr = alloca i64, align 8
  %old_value.addr = alloca i64, align 8
  %new_spacing = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %new_value, i64* %new_value.addr, align 8
  store i64 %old_value, i64* %old_value.addr, align 8
  %0 = load i64, i64* %new_value.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %extra_line_spacing = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 76
  store i32 0, i32* %extra_line_spacing, align 4
  br label %if.end.20

if.else:                                          ; preds = %entry
  %2 = load i64, i64* %new_value.addr, align 8
  %call1 = call zeroext i1 @RANGED_INTEGERP(i64 0, i64 %2, i64 2147483647)
  br i1 %call1, label %if.then.2, label %if.else.4

if.then.2:                                        ; preds = %if.else
  %3 = load i64, i64* %new_value.addr, align 8
  %shr = ashr i64 %3, 2
  %conv = trunc i64 %shr to i32
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %extra_line_spacing3 = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 76
  store i32 %conv, i32* %extra_line_spacing3, align 4
  br label %if.end.19

if.else.4:                                        ; preds = %if.else
  %5 = load i64, i64* %new_value.addr, align 8
  %and = and i64 %5, 7
  %conv5 = trunc i64 %and to i32
  %cmp6 = icmp eq i32 %conv5, 7
  br i1 %cmp6, label %if.then.8, label %if.else.17

if.then.8:                                        ; preds = %if.else.4
  %6 = load i64, i64* %new_value.addr, align 8
  %call9 = call double @XFLOAT_DATA(i64 %6)
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 60
  %8 = load i32, i32* %line_height, align 4
  %conv10 = sitofp i32 %8 to double
  %mul = fmul double %call9, %conv10
  %add = fadd double %mul, 5.000000e-01
  %conv11 = fptosi double %add to i32
  store i32 %conv11, i32* %new_spacing, align 4
  %9 = load i32, i32* %new_spacing, align 4
  %cmp12 = icmp sge i32 %9, 0
  br i1 %cmp12, label %if.then.14, label %if.else.16

if.then.14:                                       ; preds = %if.then.8
  %10 = load i32, i32* %new_spacing, align 4
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %extra_line_spacing15 = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 76
  store i32 %10, i32* %extra_line_spacing15, align 4
  br label %if.end

if.else.16:                                       ; preds = %if.then.8
  %12 = load i64, i64* %new_value.addr, align 8
  call void @signal_error(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.13, i32 0, i32 0), i64 %12) #7
  unreachable

if.end:                                           ; preds = %if.then.14
  br label %if.end.18

if.else.17:                                       ; preds = %if.else.4
  %13 = load i64, i64* %new_value.addr, align 8
  call void @signal_error(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.13, i32 0, i32 0), i64 %13) #7
  unreachable

if.end.18:                                        ; preds = %if.end
  br label %if.end.19

if.end.19:                                        ; preds = %if.end.18, %if.then.2
  br label %if.end.20

if.end.20:                                        ; preds = %if.end.19, %if.then
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %visible = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 26
  %15 = bitcast i48* %visible to i64*
  %bf.load = load i64, i64* %15, align 8
  %bf.lshr = lshr i64 %bf.load, 10
  %bf.clear = and i64 %bf.lshr, 3
  %bf.cast = trunc i64 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %if.end.20
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @redraw_frame(%struct.frame* %16)
  br label %if.end.22

if.end.22:                                        ; preds = %if.then.21, %if.end.20
  ret void
}

declare double @XFLOAT_DATA(i64) #1

; Function Attrs: noreturn
declare void @signal_error(i8*, i64) #2

declare void @redraw_frame(%struct.frame*) #1

; Function Attrs: nounwind uwtable
define void @x_set_screen_gamma(%struct.frame* %f, i64 %new_value, i64 %old_value) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %new_value.addr = alloca i64, align 8
  %old_value.addr = alloca i64, align 8
  %bgcolor = alloca i64, align 8
  %parm_index = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %new_value, i64* %new_value.addr, align 8
  store i64 %old_value, i64* %old_value.addr, align 8
  %0 = load i64, i64* %new_value.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %gamma = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 75
  store double 0.000000e+00, double* %gamma, align 8
  br label %if.end.8

if.else:                                          ; preds = %entry
  %2 = load i64, i64* %new_value.addr, align 8
  %call1 = call zeroext i1 @NUMBERP(i64 %2)
  br i1 %call1, label %land.lhs.true, label %if.else.7

land.lhs.true:                                    ; preds = %if.else
  %3 = load i64, i64* %new_value.addr, align 8
  %call2 = call double @XFLOATINT(i64 %3)
  %cmp3 = fcmp ogt double %call2, 0.000000e+00
  br i1 %cmp3, label %if.then.4, label %if.else.7

if.then.4:                                        ; preds = %land.lhs.true
  %4 = load i64, i64* %new_value.addr, align 8
  %call5 = call double @XFLOATINT(i64 %4)
  %mul = fmul double 4.545000e-01, %call5
  %div = fdiv double 1.000000e+00, %mul
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %gamma6 = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 75
  store double %div, double* %gamma6, align 8
  br label %if.end

if.else.7:                                        ; preds = %land.lhs.true, %if.else
  %6 = load i64, i64* %new_value.addr, align 8
  call void @signal_error(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.14, i32 0, i32 0), i64 %6) #7
  unreachable

if.end:                                           ; preds = %if.then.4
  br label %if.end.8

if.end.8:                                         ; preds = %if.end, %if.then
  %call9 = call i64 @builtin_lisp_symbol(i32 193)
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %param_alist = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 8
  %8 = load i64, i64* %param_alist, align 8
  %call10 = call i64 @Fassq(i64 %call9, i64 %8)
  store i64 %call10, i64* %bgcolor, align 8
  %9 = load i64, i64* %bgcolor, align 8
  %and = and i64 %9, 7
  %conv = trunc i64 %and to i32
  %cmp11 = icmp eq i32 %conv, 3
  br i1 %cmp11, label %land.lhs.true.13, label %if.end.35

land.lhs.true.13:                                 ; preds = %if.end.8
  %10 = load i64, i64* %bgcolor, align 8
  %sub = sub nsw i64 %10, 3
  %11 = inttoptr i64 %sub to i8*
  %12 = bitcast i8* %11 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %12, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %13 = load i64, i64* %cdr, align 8
  store i64 %13, i64* %bgcolor, align 8
  %14 = load i64, i64* %bgcolor, align 8
  %call14 = call zeroext i1 @STRINGP(i64 %14)
  br i1 %call14, label %if.then.16, label %if.end.35

if.then.16:                                       ; preds = %land.lhs.true.13
  %call17 = call i64 @builtin_lisp_symbol(i32 193)
  %call18 = call i64 @builtin_lisp_symbol(i32 1049)
  %call19 = call i64 @Fget(i64 %call17, i64 %call18)
  store i64 %call19, i64* %parm_index, align 8
  %15 = load i64, i64* %parm_index, align 8
  %call20 = call zeroext i1 @NATNUMP(i64 %15)
  br i1 %call20, label %land.lhs.true.22, label %if.end.34

land.lhs.true.22:                                 ; preds = %if.then.16
  %16 = load i64, i64* %parm_index, align 8
  %shr = ashr i64 %16, 2
  %cmp23 = icmp ult i64 %shr, 37
  br i1 %cmp23, label %land.lhs.true.25, label %if.end.34

land.lhs.true.25:                                 ; preds = %land.lhs.true.22
  %17 = load i64, i64* %parm_index, align 8
  %shr26 = ashr i64 %17, 2
  %18 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 61
  %19 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %rif = getelementptr inbounds %struct.terminal, %struct.terminal* %19, i32 0, i32 15
  %20 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif, align 8
  %frame_parm_handlers = getelementptr inbounds %struct.redisplay_interface, %struct.redisplay_interface* %20, i32 0, i32 0
  %21 = load void (%struct.frame*, i64, i64)**, void (%struct.frame*, i64, i64)*** %frame_parm_handlers, align 8
  %arrayidx = getelementptr inbounds void (%struct.frame*, i64, i64)*, void (%struct.frame*, i64, i64)** %21, i64 %shr26
  %22 = load void (%struct.frame*, i64, i64)*, void (%struct.frame*, i64, i64)** %arrayidx, align 8
  %tobool = icmp ne void (%struct.frame*, i64, i64)* %22, null
  br i1 %tobool, label %if.then.27, label %if.end.34

if.then.27:                                       ; preds = %land.lhs.true.25
  %23 = load i64, i64* %parm_index, align 8
  %shr28 = ashr i64 %23, 2
  %24 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal29 = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 61
  %25 = load %struct.terminal*, %struct.terminal** %terminal29, align 8
  %rif30 = getelementptr inbounds %struct.terminal, %struct.terminal* %25, i32 0, i32 15
  %26 = load %struct.redisplay_interface*, %struct.redisplay_interface** %rif30, align 8
  %frame_parm_handlers31 = getelementptr inbounds %struct.redisplay_interface, %struct.redisplay_interface* %26, i32 0, i32 0
  %27 = load void (%struct.frame*, i64, i64)**, void (%struct.frame*, i64, i64)*** %frame_parm_handlers31, align 8
  %arrayidx32 = getelementptr inbounds void (%struct.frame*, i64, i64)*, void (%struct.frame*, i64, i64)** %27, i64 %shr28
  %28 = load void (%struct.frame*, i64, i64)*, void (%struct.frame*, i64, i64)** %arrayidx32, align 8
  %29 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %30 = load i64, i64* %bgcolor, align 8
  %call33 = call i64 @builtin_lisp_symbol(i32 0)
  call void %28(%struct.frame* %29, i64 %30, i64 %call33)
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.27, %land.lhs.true.25, %land.lhs.true.22, %if.then.16
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34, %land.lhs.true.13, %if.end.8
  call void @clear_face_cache(i1 zeroext true)
  %31 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @fset_redisplay(%struct.frame* %31)
  ret void
}

declare double @XFLOATINT(i64) #1

declare void @clear_face_cache(i1 zeroext) #1

; Function Attrs: nounwind uwtable
define void @x_set_font(%struct.frame* %f, i64 %arg, i64 %oldval) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %arg.addr = alloca i64, align 8
  %oldval.addr = alloca i64, align 8
  %font_object = alloca i64, align 8
  %fontset = alloca i32, align 4
  %font_param = alloca i64, align 8
  %ascii_font = alloca i64, align 8
  %spec = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %arg, i64* %arg.addr, align 8
  store i64 %oldval, i64* %oldval.addr, align 8
  store i32 -1, i32* %fontset, align 4
  %0 = load i64, i64* %arg.addr, align 8
  store i64 %0, i64* %font_param, align 8
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 439)
  %2 = load i64, i64* %oldval.addr, align 8
  call void @store_frame_param(%struct.frame* %1, i64 %call, i64 %2)
  %3 = load i64, i64* %arg.addr, align 8
  %call1 = call zeroext i1 @STRINGP(i64 %3)
  br i1 %call1, label %if.then, label %if.else.23

if.then:                                          ; preds = %entry
  %4 = load i64, i64* %arg.addr, align 8
  %call2 = call i32 @fs_query_fontset(i64 %4, i32 0)
  store i32 %call2, i32* %fontset, align 4
  %5 = load i32, i32* %fontset, align 4
  %cmp = icmp slt i32 %5, 0
  br i1 %cmp, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.then
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %7 = load i64, i64* %arg.addr, align 8
  %call4 = call i64 @font_open_by_name(%struct.frame* %6, i64 %7)
  store i64 %call4, i64* %font_object, align 8
  %8 = load i64, i64* %font_object, align 8
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp6 = icmp eq i64 %8, %call5
  br i1 %cmp6, label %if.then.7, label %if.end

if.then.7:                                        ; preds = %if.then.3
  %9 = load i64, i64* %arg.addr, align 8
  %call8 = call i8* @SSDATA(i64 %9)
  call void (i8*, ...) @error(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.15, i32 0, i32 0), i8* %call8) #7
  unreachable

if.end:                                           ; preds = %if.then.3
  %10 = load i64, i64* %font_object, align 8
  %call9 = call i64 @AREF(i64 %10, i64 14)
  store i64 %call9, i64* %arg.addr, align 8
  br label %if.end.22

if.else:                                          ; preds = %if.then
  %11 = load i32, i32* %fontset, align 4
  %cmp10 = icmp sgt i32 %11, 0
  br i1 %cmp10, label %if.then.11, label %if.else.20

if.then.11:                                       ; preds = %if.else
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %13 = load i32, i32* %fontset, align 4
  %call12 = call i64 @fontset_ascii(i32 %13)
  %call13 = call i64 @font_open_by_name(%struct.frame* %12, i64 %call12)
  store i64 %call13, i64* %font_object, align 8
  %14 = load i64, i64* %font_object, align 8
  %call14 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp15 = icmp eq i64 %14, %call14
  br i1 %cmp15, label %if.then.16, label %if.end.18

if.then.16:                                       ; preds = %if.then.11
  %15 = load i64, i64* %arg.addr, align 8
  %call17 = call i8* @SDATA(i64 %15)
  call void (i8*, ...) @error(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.15, i32 0, i32 0), i8* %call17) #7
  unreachable

if.end.18:                                        ; preds = %if.then.11
  %16 = load i64, i64* %font_object, align 8
  %call19 = call i64 @AREF(i64 %16, i64 14)
  store i64 %call19, i64* %arg.addr, align 8
  br label %if.end.21

if.else.20:                                       ; preds = %if.else
  call void (i8*, ...) @error(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.16, i32 0, i32 0)) #7
  unreachable

if.end.21:                                        ; preds = %if.end.18
  br label %if.end.22

if.end.22:                                        ; preds = %if.end.21, %if.end
  br label %if.end.71

if.else.23:                                       ; preds = %entry
  %17 = load i64, i64* %arg.addr, align 8
  %and = and i64 %17, 7
  %conv = trunc i64 %and to i32
  %cmp24 = icmp eq i32 %conv, 3
  br i1 %cmp24, label %land.lhs.true, label %if.else.49

land.lhs.true:                                    ; preds = %if.else.23
  %18 = load i64, i64* %arg.addr, align 8
  %sub = sub nsw i64 %18, 3
  %19 = inttoptr i64 %sub to i8*
  %20 = bitcast i8* %19 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %20, i32 0, i32 0
  %21 = load i64, i64* %car, align 8
  %call26 = call zeroext i1 @STRINGP(i64 %21)
  br i1 %call26, label %land.lhs.true.28, label %if.else.49

land.lhs.true.28:                                 ; preds = %land.lhs.true
  %22 = load i64, i64* %arg.addr, align 8
  %sub29 = sub nsw i64 %22, 3
  %23 = inttoptr i64 %sub29 to i8*
  %24 = bitcast i8* %23 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %24, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %25 = load i64, i64* %cdr, align 8
  %call30 = call zeroext i1 @FONT_OBJECT_P(i64 %25)
  br i1 %call30, label %if.then.32, label %if.else.49

if.then.32:                                       ; preds = %land.lhs.true.28
  %26 = load i64, i64* %arg.addr, align 8
  %sub33 = sub nsw i64 %26, 3
  %27 = inttoptr i64 %sub33 to i8*
  %28 = bitcast i8* %27 to %struct.Lisp_Cons*
  %car34 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %28, i32 0, i32 0
  %29 = load i64, i64* %car34, align 8
  %call35 = call i32 @fs_query_fontset(i64 %29, i32 0)
  store i32 %call35, i32* %fontset, align 4
  %30 = load i32, i32* %fontset, align 4
  %cmp36 = icmp slt i32 %30, 0
  br i1 %cmp36, label %if.then.38, label %if.end.42

if.then.38:                                       ; preds = %if.then.32
  %31 = load i64, i64* %arg.addr, align 8
  %sub39 = sub nsw i64 %31, 3
  %32 = inttoptr i64 %sub39 to i8*
  %33 = bitcast i8* %32 to %struct.Lisp_Cons*
  %car40 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %33, i32 0, i32 0
  %34 = load i64, i64* %car40, align 8
  %call41 = call i8* @SDATA(i64 %34)
  call void (i8*, ...) @error(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.17, i32 0, i32 0), i8* %call41) #7
  unreachable

if.end.42:                                        ; preds = %if.then.32
  %35 = load i64, i64* %arg.addr, align 8
  %sub43 = sub nsw i64 %35, 3
  %36 = inttoptr i64 %sub43 to i8*
  %37 = bitcast i8* %36 to %struct.Lisp_Cons*
  %u44 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %37, i32 0, i32 1
  %cdr45 = bitcast %union.anon.11* %u44 to i64*
  %38 = load i64, i64* %cdr45, align 8
  store i64 %38, i64* %font_object, align 8
  %39 = load i64, i64* %font_object, align 8
  %call46 = call i64 @AREF(i64 %39, i64 14)
  store i64 %call46, i64* %arg.addr, align 8
  %40 = load i64, i64* %font_object, align 8
  %call47 = call i64 @builtin_lisp_symbol(i32 86)
  %call48 = call i64 @Ffont_get(i64 %40, i64 %call47)
  store i64 %call48, i64* %font_param, align 8
  br label %if.end.70

if.else.49:                                       ; preds = %land.lhs.true.28, %land.lhs.true, %if.else.23
  %41 = load i64, i64* %arg.addr, align 8
  %call50 = call zeroext i1 @FONT_OBJECT_P(i64 %41)
  br i1 %call50, label %if.then.51, label %if.else.68

if.then.51:                                       ; preds = %if.else.49
  %42 = load i64, i64* %arg.addr, align 8
  store i64 %42, i64* %font_object, align 8
  %43 = load i64, i64* %font_object, align 8
  %call52 = call i64 @builtin_lisp_symbol(i32 86)
  %call53 = call i64 @Ffont_get(i64 %43, i64 %call52)
  store i64 %call53, i64* %font_param, align 8
  %44 = load i64, i64* %font_object, align 8
  %call54 = call i64 @AREF(i64 %44, i64 14)
  store i64 %call54, i64* %arg.addr, align 8
  %45 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %45, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %46 = load %struct.x_output*, %struct.x_output** %x, align 8
  %fontset55 = getelementptr inbounds %struct.x_output, %struct.x_output* %46, i32 0, i32 27
  %47 = load i32, i32* %fontset55, align 4
  store i32 %47, i32* %fontset, align 4
  %48 = load i32, i32* %fontset, align 4
  %cmp56 = icmp sge i32 %48, 0
  br i1 %cmp56, label %if.then.58, label %if.end.67

if.then.58:                                       ; preds = %if.then.51
  %49 = load i32, i32* %fontset, align 4
  %call59 = call i64 @fontset_ascii(i32 %49)
  store i64 %call59, i64* %ascii_font, align 8
  %50 = load i64, i64* %ascii_font, align 8
  %call60 = call i64 @font_spec_from_name(i64 %50)
  store i64 %call60, i64* %spec, align 8
  %51 = load i64, i64* %spec, align 8
  %call61 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp62 = icmp eq i64 %51, %call61
  br i1 %cmp62, label %if.then.65, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.58
  %52 = load i64, i64* %spec, align 8
  %53 = load i64, i64* %font_object, align 8
  %call64 = call zeroext i1 @font_match_p(i64 %52, i64 %53)
  br i1 %call64, label %if.end.66, label %if.then.65

if.then.65:                                       ; preds = %lor.lhs.false, %if.then.58
  store i32 -1, i32* %fontset, align 4
  br label %if.end.66

if.end.66:                                        ; preds = %if.then.65, %lor.lhs.false
  br label %if.end.67

if.end.67:                                        ; preds = %if.end.66, %if.then.51
  br label %if.end.69

if.else.68:                                       ; preds = %if.else.49
  %54 = load i64, i64* %arg.addr, align 8
  call void @signal_error(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.18, i32 0, i32 0), i64 %54) #7
  unreachable

if.end.69:                                        ; preds = %if.end.67
  br label %if.end.70

if.end.70:                                        ; preds = %if.end.69, %if.end.42
  br label %if.end.71

if.end.71:                                        ; preds = %if.end.70, %if.end.22
  %55 = load i64, i64* %font_object, align 8
  %56 = load i64, i64* %oldval.addr, align 8
  %call72 = call i64 @Fequal(i64 %55, i64 %56)
  %call73 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp74 = icmp eq i64 %call72, %call73
  br i1 %cmp74, label %if.end.77, label %if.then.76

if.then.76:                                       ; preds = %if.end.71
  br label %return

if.end.77:                                        ; preds = %if.end.71
  %57 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %58 = load i64, i64* %font_object, align 8
  %59 = load i32, i32* %fontset, align 4
  %call78 = call i64 @x_new_font(%struct.frame* %57, i64 %58, i32 %59)
  %60 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call79 = call i64 @builtin_lisp_symbol(i32 439)
  %61 = load i64, i64* %arg.addr, align 8
  call void @store_frame_param(%struct.frame* %60, i64 %call79, i64 %61)
  %62 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call80 = call i64 @builtin_lisp_symbol(i32 444)
  %63 = load i64, i64* %font_param, align 8
  call void @store_frame_param(%struct.frame* %62, i64 %call80, i64 %63)
  %64 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %n_tool_bar_rows = getelementptr inbounds %struct.frame, %struct.frame* %64, i32 0, i32 29
  store i32 0, i32* %n_tool_bar_rows, align 4
  %65 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @clear_current_matrices(%struct.frame* %65)
  store i8 1, i8* @frame_garbaged, align 1
  %66 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @fset_redisplay(%struct.frame* %66)
  %67 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %garbaged = getelementptr inbounds %struct.frame, %struct.frame* %67, i32 0, i32 26
  %68 = bitcast i48* %garbaged to i64*
  %bf.load = load i64, i64* %68, align 8
  %bf.clear = and i64 %bf.load, -8193
  %bf.set = or i64 %bf.clear, 8192
  store i64 %bf.set, i64* %68, align 8
  %69 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %fonts_changed = getelementptr inbounds %struct.frame, %struct.frame* %69, i32 0, i32 26
  %70 = bitcast i48* %fonts_changed to i64*
  %bf.load81 = load i64, i64* %70, align 8
  %bf.clear82 = and i64 %bf.load81, -65
  %bf.set83 = or i64 %bf.clear82, 64
  store i64 %bf.set83, i64* %70, align 8
  %71 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @recompute_basic_faces(%struct.frame* %71)
  call void @do_pending_window_change(i1 zeroext false)
  br label %return

return:                                           ; preds = %if.end.77, %if.then.76
  ret void
}

declare i32 @fs_query_fontset(i64, i32) #1

declare i64 @font_open_by_name(%struct.frame*, i64) #1

declare i8* @SSDATA(i64) #1

declare i64 @AREF(i64, i64) #1

declare i64 @fontset_ascii(i32) #1

declare zeroext i1 @FONT_OBJECT_P(i64) #1

declare i64 @Ffont_get(i64, i64) #1

declare i64 @font_spec_from_name(i64) #1

declare zeroext i1 @font_match_p(i64, i64) #1

declare i64 @x_new_font(%struct.frame*, i64, i32) #1

declare void @clear_current_matrices(%struct.frame*) #1

declare void @recompute_basic_faces(%struct.frame*) #1

declare void @do_pending_window_change(i1 zeroext) #1

; Function Attrs: nounwind uwtable
define void @x_set_font_backend(%struct.frame* %f, i64 %new_value, i64 %old_value) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %new_value.addr = alloca i64, align 8
  %old_value.addr = alloca i64, align 8
  %p0 = alloca i8*, align 8
  %p1 = alloca i8*, align 8
  %c = alloca i32, align 4
  %frame = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %new_value, i64* %new_value.addr, align 8
  store i64 %old_value, i64* %old_value.addr, align 8
  %0 = load i64, i64* %new_value.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.end.37, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %new_value.addr, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %cmp1 = icmp eq i32 %conv, 3
  br i1 %cmp1, label %if.end.37, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %2 = load i64, i64* %new_value.addr, align 8
  call void @CHECK_STRING(i64 %2)
  %3 = load i64, i64* %new_value.addr, align 8
  %call3 = call i8* @SSDATA(i64 %3)
  store i8* %call3, i8** %p1, align 8
  store i8* %call3, i8** %p0, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call4, i64* %new_value.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.34, %if.then
  %4 = load i8*, i8** %p0, align 8
  %5 = load i8, i8* %4, align 1
  %tobool = icmp ne i8 %5, 0
  br i1 %tobool, label %while.body, label %while.end.35

while.body:                                       ; preds = %while.cond
  br label %while.cond.5

while.cond.5:                                     ; preds = %while.body.14, %while.body
  %6 = load i8*, i8** %p1, align 8
  %7 = load i8, i8* %6, align 1
  %conv6 = sext i8 %7 to i32
  %tobool7 = icmp ne i32 %conv6, 0
  br i1 %tobool7, label %land.lhs.true.8, label %land.end

land.lhs.true.8:                                  ; preds = %while.cond.5
  %8 = load i8*, i8** %p1, align 8
  %9 = load i8, i8* %8, align 1
  %conv9 = sext i8 %9 to i32
  %call10 = call zeroext i1 @c_isspace(i32 %conv9)
  br i1 %call10, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true.8
  %10 = load i8*, i8** %p1, align 8
  %11 = load i8, i8* %10, align 1
  %conv11 = sext i8 %11 to i32
  %cmp12 = icmp ne i32 %conv11, 44
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true.8, %while.cond.5
  %12 = phi i1 [ false, %land.lhs.true.8 ], [ false, %while.cond.5 ], [ %cmp12, %land.rhs ]
  br i1 %12, label %while.body.14, label %while.end

while.body.14:                                    ; preds = %land.end
  %13 = load i8*, i8** %p1, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %13, i32 1
  store i8* %incdec.ptr, i8** %p1, align 8
  br label %while.cond.5

while.end:                                        ; preds = %land.end
  %14 = load i8*, i8** %p0, align 8
  %15 = load i8*, i8** %p1, align 8
  %cmp15 = icmp ult i8* %14, %15
  br i1 %cmp15, label %if.then.17, label %if.end

if.then.17:                                       ; preds = %while.end
  %16 = load i8*, i8** %p0, align 8
  %17 = load i8*, i8** %p1, align 8
  %18 = load i8*, i8** %p0, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %17 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %18 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call18 = call i64 @make_string(i8* %16, i64 %sub.ptr.sub)
  %call19 = call i64 @builtin_lisp_symbol(i32 0)
  %call20 = call i64 @Fintern(i64 %call18, i64 %call19)
  %19 = load i64, i64* %new_value.addr, align 8
  %call21 = call i64 @Fcons(i64 %call20, i64 %19)
  store i64 %call21, i64* %new_value.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.17, %while.end
  %20 = load i8*, i8** %p1, align 8
  %21 = load i8, i8* %20, align 1
  %tobool22 = icmp ne i8 %21, 0
  br i1 %tobool22, label %if.then.23, label %if.end.34

if.then.23:                                       ; preds = %if.end
  br label %while.cond.24

while.cond.24:                                    ; preds = %while.body.32, %if.then.23
  %22 = load i8*, i8** %p1, align 8
  %incdec.ptr25 = getelementptr inbounds i8, i8* %22, i32 1
  store i8* %incdec.ptr25, i8** %p1, align 8
  %23 = load i8, i8* %incdec.ptr25, align 1
  %conv26 = sext i8 %23 to i32
  store i32 %conv26, i32* %c, align 4
  %tobool27 = icmp ne i32 %conv26, 0
  br i1 %tobool27, label %land.rhs.28, label %land.end.31

land.rhs.28:                                      ; preds = %while.cond.24
  %24 = load i32, i32* %c, align 4
  %call29 = call zeroext i1 @c_isspace(i32 %24)
  br label %land.end.31

land.end.31:                                      ; preds = %land.rhs.28, %while.cond.24
  %25 = phi i1 [ false, %while.cond.24 ], [ %call29, %land.rhs.28 ]
  br i1 %25, label %while.body.32, label %while.end.33

while.body.32:                                    ; preds = %land.end.31
  br label %while.cond.24

while.end.33:                                     ; preds = %land.end.31
  br label %if.end.34

if.end.34:                                        ; preds = %while.end.33, %if.end
  %26 = load i8*, i8** %p1, align 8
  store i8* %26, i8** %p0, align 8
  br label %while.cond

while.end.35:                                     ; preds = %while.cond
  %27 = load i64, i64* %new_value.addr, align 8
  %call36 = call i64 @Fnreverse(i64 %27)
  store i64 %call36, i64* %new_value.addr, align 8
  br label %if.end.37

if.end.37:                                        ; preds = %while.end.35, %land.lhs.true, %entry
  %28 = load i64, i64* %old_value.addr, align 8
  %call38 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp39 = icmp eq i64 %28, %call38
  br i1 %cmp39, label %if.end.47, label %land.lhs.true.41

land.lhs.true.41:                                 ; preds = %if.end.37
  %29 = load i64, i64* %old_value.addr, align 8
  %30 = load i64, i64* %new_value.addr, align 8
  %call42 = call i64 @Fequal(i64 %29, i64 %30)
  %call43 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp44 = icmp eq i64 %call42, %call43
  br i1 %cmp44, label %if.end.47, label %if.then.46

if.then.46:                                       ; preds = %land.lhs.true.41
  br label %if.end.78

if.end.47:                                        ; preds = %land.lhs.true.41, %if.end.37
  %31 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %31, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %32 = load %struct.x_output*, %struct.x_output** %x, align 8
  %font = getelementptr inbounds %struct.x_output, %struct.x_output* %32, i32 0, i32 25
  %33 = load %struct.font*, %struct.font** %font, align 8
  %tobool48 = icmp ne %struct.font* %33, null
  br i1 %tobool48, label %if.then.49, label %if.end.51

if.then.49:                                       ; preds = %if.end.47
  %call50 = call i64 @builtin_lisp_symbol(i32 0)
  call void @free_all_realized_faces(i64 %call50)
  br label %if.end.51

if.end.51:                                        ; preds = %if.then.49, %if.end.47
  %34 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %35 = load i64, i64* %new_value.addr, align 8
  %call52 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp53 = icmp eq i64 %35, %call52
  br i1 %cmp53, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.51
  %call55 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end

cond.false:                                       ; preds = %if.end.51
  %36 = load i64, i64* %new_value.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call55, %cond.true ], [ %36, %cond.false ]
  %call56 = call i64 @font_update_drivers(%struct.frame* %34, i64 %cond)
  store i64 %call56, i64* %new_value.addr, align 8
  %37 = load i64, i64* %new_value.addr, align 8
  %call57 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp58 = icmp eq i64 %37, %call57
  br i1 %cmp58, label %if.then.60, label %if.end.67

if.then.60:                                       ; preds = %cond.end
  %38 = load i64, i64* %old_value.addr, align 8
  %call61 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp62 = icmp eq i64 %38, %call61
  br i1 %cmp62, label %if.then.64, label %if.end.65

if.then.64:                                       ; preds = %if.then.60
  call void (i8*, ...) @error(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.19, i32 0, i32 0)) #7
  unreachable

if.end.65:                                        ; preds = %if.then.60
  %39 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %40 = load i64, i64* %old_value.addr, align 8
  %call66 = call i64 @font_update_drivers(%struct.frame* %39, i64 %40)
  call void (i8*, ...) @error(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.20, i32 0, i32 0)) #7
  unreachable

if.end.67:                                        ; preds = %cond.end
  %41 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call68 = call i64 @builtin_lisp_symbol(i32 440)
  %42 = load i64, i64* %new_value.addr, align 8
  call void @store_frame_param(%struct.frame* %41, i64 %call68, i64 %42)
  %43 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data69 = getelementptr inbounds %struct.frame, %struct.frame* %43, i32 0, i32 62
  %x70 = bitcast %union.output_data* %output_data69 to %struct.x_output**
  %44 = load %struct.x_output*, %struct.x_output** %x70, align 8
  %font71 = getelementptr inbounds %struct.x_output, %struct.x_output* %44, i32 0, i32 25
  %45 = load %struct.font*, %struct.font** %font71, align 8
  %tobool72 = icmp ne %struct.font* %45, null
  br i1 %tobool72, label %if.then.73, label %if.end.78

if.then.73:                                       ; preds = %if.end.67
  %46 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %47 = bitcast %struct.frame* %46 to i8*
  %call74 = call i64 @make_lisp_ptr(i8* %47, i32 5)
  store i64 %call74, i64* %frame, align 8
  %48 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %49 = load i64, i64* %frame, align 8
  %call75 = call i64 @builtin_lisp_symbol(i32 439)
  %call76 = call i64 @Fframe_parameter(i64 %49, i64 %call75)
  %call77 = call i64 @builtin_lisp_symbol(i32 0)
  call void @x_set_font(%struct.frame* %48, i64 %call76, i64 %call77)
  store i8 1, i8* @face_change, align 1
  store i32 18, i32* @windows_or_buffers_changed, align 4
  br label %if.end.78

if.end.78:                                        ; preds = %if.then.46, %if.then.73, %if.end.67
  ret void
}

declare void @CHECK_STRING(i64) #1

declare zeroext i1 @c_isspace(i32) #1

declare i64 @Fintern(i64, i64) #1

declare i64 @make_string(i8*, i64) #1

declare void @free_all_realized_faces(i64) #1

; Function Attrs: nounwind uwtable
define void @x_set_left_fringe(%struct.frame* %f, i64 %new_value, i64 %old_value) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %new_value.addr = alloca i64, align 8
  %old_value.addr = alloca i64, align 8
  %unit = alloca i32, align 4
  %old_width = alloca i32, align 4
  %new_width = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %new_value, i64* %new_value.addr, align 8
  store i64 %old_value, i64* %old_value.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 59
  %1 = load i32, i32* %column_width, align 4
  store i32 %1, i32* %unit, align 4
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_fringe_width = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 54
  %3 = load i32, i32* %left_fringe_width, align 4
  store i32 %3, i32* %old_width, align 4
  %4 = load i64, i64* %new_value.addr, align 8
  %call = call zeroext i1 @RANGED_INTEGERP(i64 -2147483647, i64 %4, i64 2147483647)
  br i1 %call, label %cond.true, label %cond.false.4

cond.true:                                        ; preds = %entry
  %5 = load i64, i64* %new_value.addr, align 8
  %shr = ashr i64 %5, 2
  %cmp = icmp slt i64 %shr, 0
  br i1 %cmp, label %cond.true.1, label %cond.false

cond.true.1:                                      ; preds = %cond.true
  %6 = load i64, i64* %new_value.addr, align 8
  %shr2 = ashr i64 %6, 2
  %sub = sub nsw i64 0, %shr2
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %7 = load i64, i64* %new_value.addr, align 8
  %shr3 = ashr i64 %7, 2
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.1
  %cond = phi i64 [ %sub, %cond.true.1 ], [ %shr3, %cond.false ]
  br label %cond.end.5

cond.false.4:                                     ; preds = %entry
  br label %cond.end.5

cond.end.5:                                       ; preds = %cond.false.4, %cond.end
  %cond6 = phi i64 [ %cond, %cond.end ], [ 8, %cond.false.4 ]
  %conv = trunc i64 %cond6 to i32
  store i32 %conv, i32* %new_width, align 4
  %8 = load i32, i32* %new_width, align 4
  %9 = load i32, i32* %old_width, align 4
  %cmp7 = icmp ne i32 %8, %9
  br i1 %cmp7, label %if.then, label %if.end.16

if.then:                                          ; preds = %cond.end.5
  %10 = load i32, i32* %new_width, align 4
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_fringe_width9 = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 54
  store i32 %10, i32* %left_fringe_width9, align 4
  %12 = load i32, i32* %new_width, align 4
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %right_fringe_width = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 55
  %14 = load i32, i32* %right_fringe_width, align 4
  %add = add nsw i32 %12, %14
  %15 = load i32, i32* %unit, align 4
  %add10 = add nsw i32 %add, %15
  %sub11 = sub nsw i32 %add10, 1
  %16 = load i32, i32* %unit, align 4
  %div = sdiv i32 %sub11, %16
  %17 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %fringe_cols = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 56
  store i32 %div, i32* %fringe_cols, align 4
  %18 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %19 = load %struct.x_output*, %struct.x_output** %x, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %19, i32 0, i32 9
  %20 = load i64, i64* %window_desc, align 8
  %cmp12 = icmp ne i64 %20, 0
  br i1 %cmp12, label %if.then.14, label %if.end

if.then.14:                                       ; preds = %if.then
  %21 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call15 = call i64 @builtin_lisp_symbol(i32 608)
  call void @adjust_frame_size(%struct.frame* %21, i32 -1, i32 -1, i32 3, i1 zeroext false, i64 %call15)
  br label %if.end

if.end:                                           ; preds = %if.then.14, %if.then
  store i8 1, i8* @frame_garbaged, align 1
  %22 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @fset_redisplay(%struct.frame* %22)
  %23 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %garbaged = getelementptr inbounds %struct.frame, %struct.frame* %23, i32 0, i32 26
  %24 = bitcast i48* %garbaged to i64*
  %bf.load = load i64, i64* %24, align 8
  %bf.clear = and i64 %bf.load, -8193
  %bf.set = or i64 %bf.clear, 8192
  store i64 %bf.set, i64* %24, align 8
  br label %if.end.16

if.end.16:                                        ; preds = %if.end, %cond.end.5
  ret void
}

; Function Attrs: nounwind uwtable
define void @x_set_right_fringe(%struct.frame* %f, i64 %new_value, i64 %old_value) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %new_value.addr = alloca i64, align 8
  %old_value.addr = alloca i64, align 8
  %unit = alloca i32, align 4
  %old_width = alloca i32, align 4
  %new_width = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %new_value, i64* %new_value.addr, align 8
  store i64 %old_value, i64* %old_value.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 59
  %1 = load i32, i32* %column_width, align 4
  store i32 %1, i32* %unit, align 4
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %right_fringe_width = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 55
  %3 = load i32, i32* %right_fringe_width, align 4
  store i32 %3, i32* %old_width, align 4
  %4 = load i64, i64* %new_value.addr, align 8
  %call = call zeroext i1 @RANGED_INTEGERP(i64 -2147483647, i64 %4, i64 2147483647)
  br i1 %call, label %cond.true, label %cond.false.4

cond.true:                                        ; preds = %entry
  %5 = load i64, i64* %new_value.addr, align 8
  %shr = ashr i64 %5, 2
  %cmp = icmp slt i64 %shr, 0
  br i1 %cmp, label %cond.true.1, label %cond.false

cond.true.1:                                      ; preds = %cond.true
  %6 = load i64, i64* %new_value.addr, align 8
  %shr2 = ashr i64 %6, 2
  %sub = sub nsw i64 0, %shr2
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %7 = load i64, i64* %new_value.addr, align 8
  %shr3 = ashr i64 %7, 2
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.1
  %cond = phi i64 [ %sub, %cond.true.1 ], [ %shr3, %cond.false ]
  br label %cond.end.5

cond.false.4:                                     ; preds = %entry
  br label %cond.end.5

cond.end.5:                                       ; preds = %cond.false.4, %cond.end
  %cond6 = phi i64 [ %cond, %cond.end ], [ 8, %cond.false.4 ]
  %conv = trunc i64 %cond6 to i32
  store i32 %conv, i32* %new_width, align 4
  %8 = load i32, i32* %new_width, align 4
  %9 = load i32, i32* %old_width, align 4
  %cmp7 = icmp ne i32 %8, %9
  br i1 %cmp7, label %if.then, label %if.end.16

if.then:                                          ; preds = %cond.end.5
  %10 = load i32, i32* %new_width, align 4
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %right_fringe_width9 = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 55
  store i32 %10, i32* %right_fringe_width9, align 4
  %12 = load i32, i32* %new_width, align 4
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_fringe_width = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 54
  %14 = load i32, i32* %left_fringe_width, align 4
  %add = add nsw i32 %12, %14
  %15 = load i32, i32* %unit, align 4
  %add10 = add nsw i32 %add, %15
  %sub11 = sub nsw i32 %add10, 1
  %16 = load i32, i32* %unit, align 4
  %div = sdiv i32 %sub11, %16
  %17 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %fringe_cols = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 56
  store i32 %div, i32* %fringe_cols, align 4
  %18 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %19 = load %struct.x_output*, %struct.x_output** %x, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %19, i32 0, i32 9
  %20 = load i64, i64* %window_desc, align 8
  %cmp12 = icmp ne i64 %20, 0
  br i1 %cmp12, label %if.then.14, label %if.end

if.then.14:                                       ; preds = %if.then
  %21 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call15 = call i64 @builtin_lisp_symbol(i32 814)
  call void @adjust_frame_size(%struct.frame* %21, i32 -1, i32 -1, i32 3, i1 zeroext false, i64 %call15)
  br label %if.end

if.end:                                           ; preds = %if.then.14, %if.then
  store i8 1, i8* @frame_garbaged, align 1
  %22 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @fset_redisplay(%struct.frame* %22)
  %23 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %garbaged = getelementptr inbounds %struct.frame, %struct.frame* %23, i32 0, i32 26
  %24 = bitcast i48* %garbaged to i64*
  %bf.load = load i64, i64* %24, align 8
  %bf.clear = and i64 %bf.load, -8193
  %bf.set = or i64 %bf.clear, 8192
  store i64 %bf.set, i64* %24, align 8
  br label %if.end.16

if.end.16:                                        ; preds = %if.end, %cond.end.5
  ret void
}

; Function Attrs: nounwind uwtable
define void @x_set_border_width(%struct.frame* %f, i64 %arg, i64 %oldval) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %arg.addr = alloca i64, align 8
  %oldval.addr = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %arg, i64* %arg.addr, align 8
  store i64 %oldval, i64* %oldval.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.body.1

do.body.1:                                        ; preds = %do.body
  %0 = load i64, i64* %arg.addr, align 8
  %and = and i64 %0, 7
  %conv = trunc i64 %and to i32
  %and2 = and i32 %conv, -5
  %cmp = icmp eq i32 %and2, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body.1
  br label %cond.end

cond.false:                                       ; preds = %do.body.1
  %call = call i64 @builtin_lisp_symbol(i32 559)
  %1 = load i64, i64* %arg.addr, align 8
  %2 = call i64 @wrong_type_argument(i64 %call, i64 %1) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %3, %cond.true
  %4 = load i64, i64* %arg.addr, align 8
  %shr = ashr i64 %4, 2
  %cmp4 = icmp sle i64 -2147483648, %shr
  br i1 %cmp4, label %land.lhs.true, label %if.then

land.lhs.true:                                    ; preds = %cond.end
  %5 = load i64, i64* %arg.addr, align 8
  %shr6 = ashr i64 %5, 2
  %cmp7 = icmp sle i64 %shr6, 2147483647
  br i1 %cmp7, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true, %cond.end
  %6 = load i64, i64* %arg.addr, align 8
  call void @args_out_of_range_3(i64 %6, i64 -8589934590, i64 8589934590) #7
  unreachable

if.end:                                           ; preds = %land.lhs.true
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %do.end.9

do.end.9:                                         ; preds = %do.end
  %7 = load i64, i64* %arg.addr, align 8
  %shr10 = ashr i64 %7, 2
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %border_width = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 50
  %9 = load i32, i32* %border_width, align 4
  %conv11 = sext i32 %9 to i64
  %cmp12 = icmp eq i64 %shr10, %conv11
  br i1 %cmp12, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %do.end.9
  br label %return

if.end.15:                                        ; preds = %do.end.9
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %11 = load %struct.x_output*, %struct.x_output** %x, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %11, i32 0, i32 9
  %12 = load i64, i64* %window_desc, align 8
  %cmp16 = icmp ne i64 %12, 0
  br i1 %cmp16, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %if.end.15
  call void (i8*, ...) @error(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.21, i32 0, i32 0)) #7
  unreachable

if.end.19:                                        ; preds = %if.end.15
  %13 = load i64, i64* %arg.addr, align 8
  %shr20 = ashr i64 %13, 2
  %conv21 = trunc i64 %shr20 to i32
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %border_width22 = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 50
  store i32 %conv21, i32* %border_width22, align 4
  br label %return

return:                                           ; preds = %if.end.19, %if.then.14
  ret void
}

; Function Attrs: nounwind uwtable
define void @x_set_right_divider_width(%struct.frame* %f, i64 %arg, i64 %oldval) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %arg.addr = alloca i64, align 8
  %oldval.addr = alloca i64, align 8
  %old = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %arg, i64* %arg.addr, align 8
  store i64 %oldval, i64* %oldval.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %right_divider_width = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 52
  %1 = load i32, i32* %right_divider_width, align 4
  store i32 %1, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.body.1

do.body.1:                                        ; preds = %do.body
  %2 = load i64, i64* %arg.addr, align 8
  %and = and i64 %2, 7
  %conv = trunc i64 %and to i32
  %and2 = and i32 %conv, -5
  %cmp = icmp eq i32 %and2, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body.1
  br label %cond.end

cond.false:                                       ; preds = %do.body.1
  %call = call i64 @builtin_lisp_symbol(i32 559)
  %3 = load i64, i64* %arg.addr, align 8
  %4 = call i64 @wrong_type_argument(i64 %call, i64 %3) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %5, %cond.true
  %6 = load i64, i64* %arg.addr, align 8
  %shr = ashr i64 %6, 2
  %cmp4 = icmp sle i64 -2147483648, %shr
  br i1 %cmp4, label %land.lhs.true, label %if.then

land.lhs.true:                                    ; preds = %cond.end
  %7 = load i64, i64* %arg.addr, align 8
  %shr6 = ashr i64 %7, 2
  %cmp7 = icmp sle i64 %shr6, 2147483647
  br i1 %cmp7, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true, %cond.end
  %8 = load i64, i64* %arg.addr, align 8
  call void @args_out_of_range_3(i64 %8, i64 -8589934590, i64 8589934590) #7
  unreachable

if.end:                                           ; preds = %land.lhs.true
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %do.end.9

do.end.9:                                         ; preds = %do.end
  %9 = load i64, i64* %arg.addr, align 8
  %shr10 = ashr i64 %9, 2
  %conv11 = trunc i64 %shr10 to i32
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %right_divider_width12 = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 52
  store i32 %conv11, i32* %right_divider_width12, align 4
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %right_divider_width13 = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 52
  %12 = load i32, i32* %right_divider_width13, align 4
  %cmp14 = icmp slt i32 %12, 0
  br i1 %cmp14, label %if.then.16, label %if.end.18

if.then.16:                                       ; preds = %do.end.9
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %right_divider_width17 = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 52
  store i32 0, i32* %right_divider_width17, align 4
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.16, %do.end.9
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %right_divider_width19 = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 52
  %15 = load i32, i32* %right_divider_width19, align 4
  %16 = load i32, i32* %old, align 4
  %cmp20 = icmp ne i32 %15, %16
  br i1 %cmp20, label %if.then.22, label %if.end.24

if.then.22:                                       ; preds = %if.end.18
  %17 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call23 = call i64 @builtin_lisp_symbol(i32 813)
  call void @adjust_frame_size(%struct.frame* %17, i32 -1, i32 -1, i32 4, i1 zeroext false, i64 %call23)
  %18 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @adjust_frame_glyphs(%struct.frame* %18)
  store i8 1, i8* @frame_garbaged, align 1
  %19 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @fset_redisplay(%struct.frame* %19)
  %20 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %garbaged = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 26
  %21 = bitcast i48* %garbaged to i64*
  %bf.load = load i64, i64* %21, align 8
  %bf.clear = and i64 %bf.load, -8193
  %bf.set = or i64 %bf.clear, 8192
  store i64 %bf.set, i64* %21, align 8
  br label %if.end.24

if.end.24:                                        ; preds = %if.then.22, %if.end.18
  ret void
}

; Function Attrs: nounwind uwtable
define void @x_set_bottom_divider_width(%struct.frame* %f, i64 %arg, i64 %oldval) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %arg.addr = alloca i64, align 8
  %oldval.addr = alloca i64, align 8
  %old = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %arg, i64* %arg.addr, align 8
  store i64 %oldval, i64* %oldval.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %bottom_divider_width = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 53
  %1 = load i32, i32* %bottom_divider_width, align 4
  store i32 %1, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.body.1

do.body.1:                                        ; preds = %do.body
  %2 = load i64, i64* %arg.addr, align 8
  %and = and i64 %2, 7
  %conv = trunc i64 %and to i32
  %and2 = and i32 %conv, -5
  %cmp = icmp eq i32 %and2, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body.1
  br label %cond.end

cond.false:                                       ; preds = %do.body.1
  %call = call i64 @builtin_lisp_symbol(i32 559)
  %3 = load i64, i64* %arg.addr, align 8
  %4 = call i64 @wrong_type_argument(i64 %call, i64 %3) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %5, %cond.true
  %6 = load i64, i64* %arg.addr, align 8
  %shr = ashr i64 %6, 2
  %cmp4 = icmp sle i64 -2147483648, %shr
  br i1 %cmp4, label %land.lhs.true, label %if.then

land.lhs.true:                                    ; preds = %cond.end
  %7 = load i64, i64* %arg.addr, align 8
  %shr6 = ashr i64 %7, 2
  %cmp7 = icmp sle i64 %shr6, 2147483647
  br i1 %cmp7, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true, %cond.end
  %8 = load i64, i64* %arg.addr, align 8
  call void @args_out_of_range_3(i64 %8, i64 -8589934590, i64 8589934590) #7
  unreachable

if.end:                                           ; preds = %land.lhs.true
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %do.end.9

do.end.9:                                         ; preds = %do.end
  %9 = load i64, i64* %arg.addr, align 8
  %shr10 = ashr i64 %9, 2
  %conv11 = trunc i64 %shr10 to i32
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %bottom_divider_width12 = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 53
  store i32 %conv11, i32* %bottom_divider_width12, align 4
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %bottom_divider_width13 = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 53
  %12 = load i32, i32* %bottom_divider_width13, align 4
  %cmp14 = icmp slt i32 %12, 0
  br i1 %cmp14, label %if.then.16, label %if.end.18

if.then.16:                                       ; preds = %do.end.9
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %bottom_divider_width17 = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 53
  store i32 0, i32* %bottom_divider_width17, align 4
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.16, %do.end.9
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %bottom_divider_width19 = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 53
  %15 = load i32, i32* %bottom_divider_width19, align 4
  %16 = load i32, i32* %old, align 4
  %cmp20 = icmp ne i32 %15, %16
  br i1 %cmp20, label %if.then.22, label %if.end.24

if.then.22:                                       ; preds = %if.end.18
  %17 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call23 = call i64 @builtin_lisp_symbol(i32 215)
  call void @adjust_frame_size(%struct.frame* %17, i32 -1, i32 -1, i32 4, i1 zeroext false, i64 %call23)
  %18 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @adjust_frame_glyphs(%struct.frame* %18)
  store i8 1, i8* @frame_garbaged, align 1
  %19 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @fset_redisplay(%struct.frame* %19)
  %20 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %garbaged = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 26
  %21 = bitcast i48* %garbaged to i64*
  %bf.load = load i64, i64* %21, align 8
  %bf.clear = and i64 %bf.load, -8193
  %bf.set = or i64 %bf.clear, 8192
  store i64 %bf.set, i64* %21, align 8
  br label %if.end.24

if.end.24:                                        ; preds = %if.then.22, %if.end.18
  ret void
}

; Function Attrs: nounwind uwtable
define void @x_set_visibility(%struct.frame* %f, i64 %value, i64 %oldval) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %value.addr = alloca i64, align 8
  %oldval.addr = alloca i64, align 8
  %frame = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %value, i64* %value.addr, align 8
  store i64 %oldval, i64* %oldval.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1 = bitcast %struct.frame* %0 to i8*
  %call = call i64 @make_lisp_ptr(i8* %1, i32 5)
  store i64 %call, i64* %frame, align 8
  %2 = load i64, i64* %value.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %2, %call1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i64, i64* %frame, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 901)
  %call3 = call i64 @Fmake_frame_invisible(i64 %3, i64 %call2)
  br label %if.end.10

if.else:                                          ; preds = %entry
  %4 = load i64, i64* %value.addr, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 528)
  %cmp5 = icmp eq i64 %4, %call4
  br i1 %cmp5, label %if.then.6, label %if.else.8

if.then.6:                                        ; preds = %if.else
  %5 = load i64, i64* %frame, align 8
  %call7 = call i64 @Ficonify_frame(i64 %5)
  br label %if.end

if.else.8:                                        ; preds = %if.else
  %6 = load i64, i64* %frame, align 8
  %call9 = call i64 @Fmake_frame_visible(i64 %6)
  br label %if.end

if.end:                                           ; preds = %if.else.8, %if.then.6
  br label %if.end.10

if.end.10:                                        ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define void @x_set_autoraise(%struct.frame* %f, i64 %arg, i64 %oldval) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %arg.addr = alloca i64, align 8
  %oldval.addr = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %arg, i64* %arg.addr, align 8
  store i64 %oldval, i64* %oldval.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %0 = load i64, i64* %arg.addr, align 8
  %cmp = icmp eq i64 %call, %0
  %lnot = xor i1 %cmp, true
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %auto_raise = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 26
  %2 = bitcast i48* %auto_raise to i64*
  %3 = zext i1 %lnot to i64
  %bf.load = load i64, i64* %2, align 8
  %bf.shl = shl i64 %3, 15
  %bf.clear = and i64 %bf.load, -32769
  %bf.set = or i64 %bf.clear, %bf.shl
  store i64 %bf.set, i64* %2, align 8
  %bf.result.cast = trunc i64 %3 to i8
  %tobool = trunc i8 %bf.result.cast to i1
  ret void
}

; Function Attrs: nounwind uwtable
define void @x_set_autolower(%struct.frame* %f, i64 %arg, i64 %oldval) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %arg.addr = alloca i64, align 8
  %oldval.addr = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %arg, i64* %arg.addr, align 8
  store i64 %oldval, i64* %oldval.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %0 = load i64, i64* %arg.addr, align 8
  %cmp = icmp eq i64 %call, %0
  %lnot = xor i1 %cmp, true
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %auto_lower = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 26
  %2 = bitcast i48* %auto_lower to i64*
  %3 = zext i1 %lnot to i64
  %bf.load = load i64, i64* %2, align 8
  %bf.shl = shl i64 %3, 16
  %bf.clear = and i64 %bf.load, -65537
  %bf.set = or i64 %bf.clear, %bf.shl
  store i64 %bf.set, i64* %2, align 8
  %bf.result.cast = trunc i64 %3 to i8
  %tobool = trunc i8 %bf.result.cast to i1
  ret void
}

; Function Attrs: nounwind uwtable
define void @x_set_unsplittable(%struct.frame* %f, i64 %arg, i64 %oldval) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %arg.addr = alloca i64, align 8
  %oldval.addr = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %arg, i64* %arg.addr, align 8
  store i64 %oldval, i64* %oldval.addr, align 8
  %0 = load i64, i64* %arg.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  %lnot = xor i1 %cmp, true
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %no_split = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 26
  %2 = bitcast i48* %no_split to i64*
  %3 = zext i1 %lnot to i64
  %bf.load = load i64, i64* %2, align 8
  %bf.shl = shl i64 %3, 17
  %bf.clear = and i64 %bf.load, -131073
  %bf.set = or i64 %bf.clear, %bf.shl
  store i64 %bf.set, i64* %2, align 8
  %bf.result.cast = trunc i64 %3 to i8
  %tobool = trunc i8 %bf.result.cast to i1
  ret void
}

; Function Attrs: nounwind uwtable
define void @x_set_vertical_scroll_bars(%struct.frame* %f, i64 %arg, i64 %oldval) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %arg.addr = alloca i64, align 8
  %oldval.addr = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %arg, i64* %arg.addr, align 8
  store i64 %oldval, i64* %oldval.addr, align 8
  %0 = load i64, i64* %arg.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 607)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %vertical_scroll_bar_type = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 26
  %2 = bitcast i48* %vertical_scroll_bar_type to i64*
  %bf.load = load i64, i64* %2, align 8
  %bf.lshr = lshr i64 %bf.load, 30
  %bf.clear = and i64 %bf.lshr, 3
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp1 = icmp eq i32 %bf.cast, 2
  br i1 %cmp1, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %3 = load i64, i64* %arg.addr, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 811)
  %cmp3 = icmp eq i64 %3, %call2
  br i1 %cmp3, label %land.lhs.true.4, label %lor.lhs.false.11

land.lhs.true.4:                                  ; preds = %lor.lhs.false
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %vertical_scroll_bar_type5 = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 26
  %5 = bitcast i48* %vertical_scroll_bar_type5 to i64*
  %bf.load6 = load i64, i64* %5, align 8
  %bf.lshr7 = lshr i64 %bf.load6, 30
  %bf.clear8 = and i64 %bf.lshr7, 3
  %bf.cast9 = trunc i64 %bf.clear8 to i32
  %cmp10 = icmp eq i32 %bf.cast9, 1
  br i1 %cmp10, label %if.then, label %lor.lhs.false.11

lor.lhs.false.11:                                 ; preds = %land.lhs.true.4, %lor.lhs.false
  %6 = load i64, i64* %arg.addr, align 8
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp13 = icmp eq i64 %6, %call12
  br i1 %cmp13, label %land.lhs.true.14, label %lor.lhs.false.21

land.lhs.true.14:                                 ; preds = %lor.lhs.false.11
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %vertical_scroll_bar_type15 = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 26
  %8 = bitcast i48* %vertical_scroll_bar_type15 to i64*
  %bf.load16 = load i64, i64* %8, align 8
  %bf.lshr17 = lshr i64 %bf.load16, 30
  %bf.clear18 = and i64 %bf.lshr17, 3
  %bf.cast19 = trunc i64 %bf.clear18 to i32
  %cmp20 = icmp ne i32 %bf.cast19, 0
  br i1 %cmp20, label %if.then, label %lor.lhs.false.21

lor.lhs.false.21:                                 ; preds = %land.lhs.true.14, %lor.lhs.false.11
  %9 = load i64, i64* %arg.addr, align 8
  %call22 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp23 = icmp eq i64 %9, %call22
  br i1 %cmp23, label %if.end.62, label %land.lhs.true.24

land.lhs.true.24:                                 ; preds = %lor.lhs.false.21
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %vertical_scroll_bar_type25 = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 26
  %11 = bitcast i48* %vertical_scroll_bar_type25 to i64*
  %bf.load26 = load i64, i64* %11, align 8
  %bf.lshr27 = lshr i64 %bf.load26, 30
  %bf.clear28 = and i64 %bf.lshr27, 3
  %bf.cast29 = trunc i64 %bf.clear28 to i32
  %cmp30 = icmp ne i32 %bf.cast29, 0
  br i1 %cmp30, label %if.end.62, label %if.then

if.then:                                          ; preds = %land.lhs.true.24, %land.lhs.true.14, %land.lhs.true.4, %land.lhs.true
  %12 = load i64, i64* %arg.addr, align 8
  %call31 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp32 = icmp eq i64 %12, %call31
  br i1 %cmp32, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  br label %cond.end.52

cond.false:                                       ; preds = %if.then
  %call33 = call i64 @builtin_lisp_symbol(i32 607)
  %13 = load i64, i64* %arg.addr, align 8
  %cmp34 = icmp eq i64 %call33, %13
  br i1 %cmp34, label %cond.true.35, label %cond.false.36

cond.true.35:                                     ; preds = %cond.false
  br label %cond.end.50

cond.false.36:                                    ; preds = %cond.false
  %call37 = call i64 @builtin_lisp_symbol(i32 811)
  %14 = load i64, i64* %arg.addr, align 8
  %cmp38 = icmp eq i64 %call37, %14
  br i1 %cmp38, label %cond.true.39, label %cond.false.40

cond.true.39:                                     ; preds = %cond.false.36
  br label %cond.end.48

cond.false.40:                                    ; preds = %cond.false.36
  %call41 = call i64 @builtin_lisp_symbol(i32 607)
  %15 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 61), align 8
  %cmp42 = icmp eq i64 %call41, %15
  br i1 %cmp42, label %cond.true.43, label %cond.false.44

cond.true.43:                                     ; preds = %cond.false.40
  br label %cond.end

cond.false.44:                                    ; preds = %cond.false.40
  %call45 = call i64 @builtin_lisp_symbol(i32 811)
  %16 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 61), align 8
  %cmp46 = icmp eq i64 %call45, %16
  %cond = select i1 %cmp46, i32 2, i32 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false.44, %cond.true.43
  %cond47 = phi i32 [ 1, %cond.true.43 ], [ %cond, %cond.false.44 ]
  br label %cond.end.48

cond.end.48:                                      ; preds = %cond.end, %cond.true.39
  %cond49 = phi i32 [ 2, %cond.true.39 ], [ %cond47, %cond.end ]
  br label %cond.end.50

cond.end.50:                                      ; preds = %cond.end.48, %cond.true.35
  %cond51 = phi i32 [ 1, %cond.true.35 ], [ %cond49, %cond.end.48 ]
  br label %cond.end.52

cond.end.52:                                      ; preds = %cond.end.50, %cond.true
  %cond53 = phi i32 [ 0, %cond.true ], [ %cond51, %cond.end.50 ]
  %17 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %vertical_scroll_bar_type54 = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 26
  %18 = bitcast i48* %vertical_scroll_bar_type54 to i64*
  %19 = zext i32 %cond53 to i64
  %bf.load55 = load i64, i64* %18, align 8
  %bf.value = and i64 %19, 3
  %bf.shl = shl i64 %bf.value, 30
  %bf.clear56 = and i64 %bf.load55, -3221225473
  %bf.set = or i64 %bf.clear56, %bf.shl
  store i64 %bf.set, i64* %18, align 8
  %bf.result.cast = trunc i64 %bf.value to i32
  %20 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %21 = load %struct.x_output*, %struct.x_output** %x, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %21, i32 0, i32 9
  %22 = load i64, i64* %window_desc, align 8
  %tobool = icmp ne i64 %22, 0
  br i1 %tobool, label %if.then.57, label %if.end

if.then.57:                                       ; preds = %cond.end.52
  %23 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call58 = call i64 @builtin_lisp_symbol(i32 1003)
  call void @adjust_frame_size(%struct.frame* %23, i32 -1, i32 -1, i32 3, i1 zeroext false, i64 %call58)
  br label %if.end

if.end:                                           ; preds = %if.then.57, %cond.end.52
  store i8 1, i8* @frame_garbaged, align 1
  %24 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @fset_redisplay(%struct.frame* %24)
  %25 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %garbaged = getelementptr inbounds %struct.frame, %struct.frame* %25, i32 0, i32 26
  %26 = bitcast i48* %garbaged to i64*
  %bf.load59 = load i64, i64* %26, align 8
  %bf.clear60 = and i64 %bf.load59, -8193
  %bf.set61 = or i64 %bf.clear60, 8192
  store i64 %bf.set61, i64* %26, align 8
  br label %if.end.62

if.end.62:                                        ; preds = %if.end, %land.lhs.true.24, %lor.lhs.false.21
  ret void
}

; Function Attrs: nounwind uwtable
define void @x_set_horizontal_scroll_bars(%struct.frame* %f, i64 %arg, i64 %oldval) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %arg.addr = alloca i64, align 8
  %oldval.addr = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %arg, i64* %arg.addr, align 8
  store i64 %oldval, i64* %oldval.addr, align 8
  %0 = load i64, i64* %arg.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %horizontal_scroll_bars = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 26
  %2 = bitcast i48* %horizontal_scroll_bars to i64*
  %bf.load = load i64, i64* %2, align 8
  %bf.lshr = lshr i64 %bf.load, 32
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %3 = load i64, i64* %arg.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2 = icmp eq i64 %3, %call1
  br i1 %cmp2, label %if.end.21, label %land.lhs.true.3

land.lhs.true.3:                                  ; preds = %lor.lhs.false
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %horizontal_scroll_bars4 = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 26
  %5 = bitcast i48* %horizontal_scroll_bars4 to i64*
  %bf.load5 = load i64, i64* %5, align 8
  %bf.lshr6 = lshr i64 %bf.load5, 32
  %bf.clear7 = and i64 %bf.lshr6, 1
  %bf.cast8 = trunc i64 %bf.clear7 to i1
  br i1 %bf.cast8, label %if.end.21, label %if.then

if.then:                                          ; preds = %land.lhs.true.3, %land.lhs.true
  %6 = load i64, i64* %arg.addr, align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp10 = icmp eq i64 %6, %call9
  %cond = select i1 %cmp10, i32 0, i32 1
  %tobool = icmp ne i32 %cond, 0
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %horizontal_scroll_bars11 = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 26
  %8 = bitcast i48* %horizontal_scroll_bars11 to i64*
  %9 = zext i1 %tobool to i64
  %bf.load12 = load i64, i64* %8, align 8
  %bf.shl = shl i64 %9, 32
  %bf.clear13 = and i64 %bf.load12, -4294967297
  %bf.set = or i64 %bf.clear13, %bf.shl
  store i64 %bf.set, i64* %8, align 8
  %bf.result.cast = trunc i64 %9 to i8
  %tobool14 = trunc i8 %bf.result.cast to i1
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %11 = load %struct.x_output*, %struct.x_output** %x, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %11, i32 0, i32 9
  %12 = load i64, i64* %window_desc, align 8
  %tobool15 = icmp ne i64 %12, 0
  br i1 %tobool15, label %if.then.16, label %if.end

if.then.16:                                       ; preds = %if.then
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call17 = call i64 @builtin_lisp_symbol(i32 525)
  call void @adjust_frame_size(%struct.frame* %13, i32 -1, i32 -1, i32 3, i1 zeroext false, i64 %call17)
  br label %if.end

if.end:                                           ; preds = %if.then.16, %if.then
  store i8 1, i8* @frame_garbaged, align 1
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @fset_redisplay(%struct.frame* %14)
  %15 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %garbaged = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 26
  %16 = bitcast i48* %garbaged to i64*
  %bf.load18 = load i64, i64* %16, align 8
  %bf.clear19 = and i64 %bf.load18, -8193
  %bf.set20 = or i64 %bf.clear19, 8192
  store i64 %bf.set20, i64* %16, align 8
  br label %if.end.21

if.end.21:                                        ; preds = %if.end, %land.lhs.true.3, %lor.lhs.false
  ret void
}

; Function Attrs: nounwind uwtable
define void @x_set_scroll_bar_width(%struct.frame* %f, i64 %arg, i64 %oldval) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %arg.addr = alloca i64, align 8
  %oldval.addr = alloca i64, align 8
  %unit = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %arg, i64* %arg.addr, align 8
  store i64 %oldval, i64* %oldval.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 59
  %1 = load i32, i32* %column_width, align 4
  store i32 %1, i32* %unit, align 4
  %2 = load i64, i64* %arg.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %2, %call
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_set_scroll_bar_default_width(%struct.frame* %3)
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %5 = load %struct.x_output*, %struct.x_output** %x, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 9
  %6 = load i64, i64* %window_desc, align 8
  %tobool = icmp ne i64 %6, 0
  br i1 %tobool, label %if.then.1, label %if.end

if.then.1:                                        ; preds = %if.then
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 835)
  call void @adjust_frame_size(%struct.frame* %7, i32 -1, i32 -1, i32 3, i1 zeroext false, i64 %call2)
  br label %if.end

if.end:                                           ; preds = %if.then.1, %if.then
  store i8 1, i8* @frame_garbaged, align 1
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @fset_redisplay(%struct.frame* %8)
  %9 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %garbaged = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 26
  %10 = bitcast i48* %garbaged to i64*
  %bf.load = load i64, i64* %10, align 8
  %bf.clear = and i64 %bf.load, -8193
  %bf.set = or i64 %bf.clear, 8192
  store i64 %bf.set, i64* %10, align 8
  br label %if.end.26

if.else:                                          ; preds = %entry
  %11 = load i64, i64* %arg.addr, align 8
  %call3 = call zeroext i1 @RANGED_INTEGERP(i64 1, i64 %11, i64 2147483647)
  br i1 %call3, label %land.lhs.true, label %if.end.25

land.lhs.true:                                    ; preds = %if.else
  %12 = load i64, i64* %arg.addr, align 8
  %shr = ashr i64 %12, 2
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_width = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 69
  %14 = load i32, i32* %config_scroll_bar_width, align 4
  %conv = sext i32 %14 to i64
  %cmp4 = icmp ne i64 %shr, %conv
  br i1 %cmp4, label %if.then.6, label %if.end.25

if.then.6:                                        ; preds = %land.lhs.true
  %15 = load i64, i64* %arg.addr, align 8
  %shr7 = ashr i64 %15, 2
  %conv8 = trunc i64 %shr7 to i32
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_width9 = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 69
  store i32 %conv8, i32* %config_scroll_bar_width9, align 4
  %17 = load i64, i64* %arg.addr, align 8
  %shr10 = ashr i64 %17, 2
  %18 = load i32, i32* %unit, align 4
  %conv11 = sext i32 %18 to i64
  %add = add nsw i64 %shr10, %conv11
  %sub = sub nsw i64 %add, 1
  %19 = load i32, i32* %unit, align 4
  %conv12 = sext i32 %19 to i64
  %div = sdiv i64 %sub, %conv12
  %conv13 = trunc i64 %div to i32
  %20 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_cols = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 70
  store i32 %conv13, i32* %config_scroll_bar_cols, align 4
  %21 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data14 = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 62
  %x15 = bitcast %union.output_data* %output_data14 to %struct.x_output**
  %22 = load %struct.x_output*, %struct.x_output** %x15, align 8
  %window_desc16 = getelementptr inbounds %struct.x_output, %struct.x_output* %22, i32 0, i32 9
  %23 = load i64, i64* %window_desc16, align 8
  %tobool17 = icmp ne i64 %23, 0
  br i1 %tobool17, label %if.then.18, label %if.end.20

if.then.18:                                       ; preds = %if.then.6
  %24 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call19 = call i64 @builtin_lisp_symbol(i32 835)
  call void @adjust_frame_size(%struct.frame* %24, i32 -1, i32 -1, i32 3, i1 zeroext false, i64 %call19)
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.18, %if.then.6
  store i8 1, i8* @frame_garbaged, align 1
  %25 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @fset_redisplay(%struct.frame* %25)
  %26 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %garbaged21 = getelementptr inbounds %struct.frame, %struct.frame* %26, i32 0, i32 26
  %27 = bitcast i48* %garbaged21 to i64*
  %bf.load22 = load i64, i64* %27, align 8
  %bf.clear23 = and i64 %bf.load22, -8193
  %bf.set24 = or i64 %bf.clear23, 8192
  store i64 %bf.set24, i64* %27, align 8
  br label %if.end.25

if.end.25:                                        ; preds = %if.end.20, %land.lhs.true, %if.else
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %if.end
  %28 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %selected_window = getelementptr inbounds %struct.frame, %struct.frame* %28, i32 0, i32 6
  %29 = load i64, i64* %selected_window, align 8
  %call27 = call %struct.window* @XWINDOW(i64 %29)
  %cursor = getelementptr inbounds %struct.window, %struct.window* %call27, i32 0, i32 49
  %hpos = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %cursor, i32 0, i32 2
  store i32 0, i32* %hpos, align 4
  %30 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %selected_window28 = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 6
  %31 = load i64, i64* %selected_window28, align 8
  %call29 = call %struct.window* @XWINDOW(i64 %31)
  %cursor30 = getelementptr inbounds %struct.window, %struct.window* %call29, i32 0, i32 49
  %x31 = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %cursor30, i32 0, i32 0
  store i32 0, i32* %x31, align 4
  ret void
}

declare void @x_set_scroll_bar_default_width(%struct.frame*) #1

; Function Attrs: nounwind uwtable
define void @x_set_scroll_bar_height(%struct.frame* %f, i64 %arg, i64 %oldval) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %arg.addr = alloca i64, align 8
  %oldval.addr = alloca i64, align 8
  %unit = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %arg, i64* %arg.addr, align 8
  store i64 %oldval, i64* %oldval.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 60
  %1 = load i32, i32* %line_height, align 4
  store i32 %1, i32* %unit, align 4
  %2 = load i64, i64* %arg.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %2, %call
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_set_scroll_bar_default_height(%struct.frame* %3)
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %5 = load %struct.x_output*, %struct.x_output** %x, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 9
  %6 = load i64, i64* %window_desc, align 8
  %tobool = icmp ne i64 %6, 0
  br i1 %tobool, label %if.then.1, label %if.end

if.then.1:                                        ; preds = %if.then
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 833)
  call void @adjust_frame_size(%struct.frame* %7, i32 -1, i32 -1, i32 3, i1 zeroext false, i64 %call2)
  br label %if.end

if.end:                                           ; preds = %if.then.1, %if.then
  store i8 1, i8* @frame_garbaged, align 1
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @fset_redisplay(%struct.frame* %8)
  %9 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %garbaged = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 26
  %10 = bitcast i48* %garbaged to i64*
  %bf.load = load i64, i64* %10, align 8
  %bf.clear = and i64 %bf.load, -8193
  %bf.set = or i64 %bf.clear, 8192
  store i64 %bf.set, i64* %10, align 8
  br label %if.end.26

if.else:                                          ; preds = %entry
  %11 = load i64, i64* %arg.addr, align 8
  %call3 = call zeroext i1 @RANGED_INTEGERP(i64 1, i64 %11, i64 2147483647)
  br i1 %call3, label %land.lhs.true, label %if.end.25

land.lhs.true:                                    ; preds = %if.else
  %12 = load i64, i64* %arg.addr, align 8
  %shr = ashr i64 %12, 2
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 71
  %14 = load i32, i32* %config_scroll_bar_height, align 4
  %conv = sext i32 %14 to i64
  %cmp4 = icmp ne i64 %shr, %conv
  br i1 %cmp4, label %if.then.6, label %if.end.25

if.then.6:                                        ; preds = %land.lhs.true
  %15 = load i64, i64* %arg.addr, align 8
  %shr7 = ashr i64 %15, 2
  %conv8 = trunc i64 %shr7 to i32
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_height9 = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 71
  store i32 %conv8, i32* %config_scroll_bar_height9, align 4
  %17 = load i64, i64* %arg.addr, align 8
  %shr10 = ashr i64 %17, 2
  %18 = load i32, i32* %unit, align 4
  %conv11 = sext i32 %18 to i64
  %add = add nsw i64 %shr10, %conv11
  %sub = sub nsw i64 %add, 1
  %19 = load i32, i32* %unit, align 4
  %conv12 = sext i32 %19 to i64
  %div = sdiv i64 %sub, %conv12
  %conv13 = trunc i64 %div to i32
  %20 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 72
  store i32 %conv13, i32* %config_scroll_bar_lines, align 4
  %21 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data14 = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 62
  %x15 = bitcast %union.output_data* %output_data14 to %struct.x_output**
  %22 = load %struct.x_output*, %struct.x_output** %x15, align 8
  %window_desc16 = getelementptr inbounds %struct.x_output, %struct.x_output* %22, i32 0, i32 9
  %23 = load i64, i64* %window_desc16, align 8
  %tobool17 = icmp ne i64 %23, 0
  br i1 %tobool17, label %if.then.18, label %if.end.20

if.then.18:                                       ; preds = %if.then.6
  %24 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call19 = call i64 @builtin_lisp_symbol(i32 833)
  call void @adjust_frame_size(%struct.frame* %24, i32 -1, i32 -1, i32 3, i1 zeroext false, i64 %call19)
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.18, %if.then.6
  store i8 1, i8* @frame_garbaged, align 1
  %25 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @fset_redisplay(%struct.frame* %25)
  %26 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %garbaged21 = getelementptr inbounds %struct.frame, %struct.frame* %26, i32 0, i32 26
  %27 = bitcast i48* %garbaged21 to i64*
  %bf.load22 = load i64, i64* %27, align 8
  %bf.clear23 = and i64 %bf.load22, -8193
  %bf.set24 = or i64 %bf.clear23, 8192
  store i64 %bf.set24, i64* %27, align 8
  br label %if.end.25

if.end.25:                                        ; preds = %if.end.20, %land.lhs.true, %if.else
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %if.end
  %28 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %selected_window = getelementptr inbounds %struct.frame, %struct.frame* %28, i32 0, i32 6
  %29 = load i64, i64* %selected_window, align 8
  %call27 = call %struct.window* @XWINDOW(i64 %29)
  %cursor = getelementptr inbounds %struct.window, %struct.window* %call27, i32 0, i32 49
  %vpos = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %cursor, i32 0, i32 3
  store i32 0, i32* %vpos, align 4
  %30 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %selected_window28 = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 6
  %31 = load i64, i64* %selected_window28, align 8
  %call29 = call %struct.window* @XWINDOW(i64 %31)
  %cursor30 = getelementptr inbounds %struct.window, %struct.window* %call29, i32 0, i32 49
  %y = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %cursor30, i32 0, i32 1
  store i32 0, i32* %y, align 4
  ret void
}

declare void @x_set_scroll_bar_default_height(%struct.frame*) #1

; Function Attrs: nounwind uwtable
define void @x_set_alpha(%struct.frame* %f, i64 %arg, i64 %oldval) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %arg.addr = alloca i64, align 8
  %oldval.addr = alloca i64, align 8
  %alpha = alloca double, align 8
  %newval = alloca [2 x double], align 16
  %i = alloca i32, align 4
  %item = alloca i64, align 8
  %ialpha = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %arg, i64* %arg.addr, align 8
  store i64 %oldval, i64* %oldval.addr, align 8
  store double 1.000000e+00, double* %alpha, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [2 x double], [2 x double]* %newval, i32 0, i64 %idxprom
  store double 1.000000e+00, double* %arrayidx, align 8
  %2 = load i64, i64* %arg.addr, align 8
  %and = and i64 %2, 7
  %conv = trunc i64 %and to i32
  %cmp1 = icmp eq i32 %conv, 3
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %3 = load i64, i64* %arg.addr, align 8
  %call = call i64 @CAR(i64 %3)
  store i64 %call, i64* %item, align 8
  %4 = load i64, i64* %arg.addr, align 8
  %call3 = call i64 @CDR(i64 %4)
  store i64 %call3, i64* %arg.addr, align 8
  br label %if.end

if.else:                                          ; preds = %for.body
  %5 = load i64, i64* %arg.addr, align 8
  store i64 %5, i64* %item, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load i64, i64* %item, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp5 = icmp eq i64 %6, %call4
  br i1 %cmp5, label %if.then.7, label %if.else.8

if.then.7:                                        ; preds = %if.end
  store double -1.000000e+00, double* %alpha, align 8
  br label %if.end.42

if.else.8:                                        ; preds = %if.end
  %7 = load i64, i64* %item, align 8
  %and9 = and i64 %7, 7
  %conv10 = trunc i64 %and9 to i32
  %cmp11 = icmp eq i32 %conv10, 7
  br i1 %cmp11, label %if.then.13, label %if.else.23

if.then.13:                                       ; preds = %if.else.8
  %8 = load i64, i64* %item, align 8
  %call14 = call double @XFLOAT_DATA(i64 %8)
  store double %call14, double* %alpha, align 8
  %9 = load double, double* %alpha, align 8
  %cmp15 = fcmp ole double 0.000000e+00, %9
  br i1 %cmp15, label %land.lhs.true, label %if.then.19

land.lhs.true:                                    ; preds = %if.then.13
  %10 = load double, double* %alpha, align 8
  %cmp17 = fcmp ole double %10, 1.000000e+00
  br i1 %cmp17, label %if.end.22, label %if.then.19

if.then.19:                                       ; preds = %land.lhs.true, %if.then.13
  %call20 = call i64 @make_float(double 0.000000e+00)
  %call21 = call i64 @make_float(double 1.000000e+00)
  call void @args_out_of_range(i64 %call20, i64 %call21) #7
  unreachable

if.end.22:                                        ; preds = %land.lhs.true
  br label %if.end.41

if.else.23:                                       ; preds = %if.else.8
  %11 = load i64, i64* %item, align 8
  %and24 = and i64 %11, 7
  %conv25 = trunc i64 %and24 to i32
  %and26 = and i32 %conv25, -5
  %cmp27 = icmp eq i32 %and26, 2
  br i1 %cmp27, label %if.then.29, label %if.else.38

if.then.29:                                       ; preds = %if.else.23
  %12 = load i64, i64* %item, align 8
  %shr = ashr i64 %12, 2
  store i64 %shr, i64* %ialpha, align 8
  %13 = load i64, i64* %ialpha, align 8
  %cmp30 = icmp sle i64 0, %13
  br i1 %cmp30, label %land.lhs.true.32, label %if.then.35

land.lhs.true.32:                                 ; preds = %if.then.29
  %14 = load double, double* %alpha, align 8
  %cmp33 = fcmp ole double %14, 1.000000e+02
  br i1 %cmp33, label %if.end.36, label %if.then.35

if.then.35:                                       ; preds = %land.lhs.true.32, %if.then.29
  call void @args_out_of_range(i64 2, i64 402) #7
  unreachable

if.end.36:                                        ; preds = %land.lhs.true.32
  %15 = load i64, i64* %ialpha, align 8
  %conv37 = sitofp i64 %15 to double
  %div = fdiv double %conv37, 1.000000e+02
  store double %div, double* %alpha, align 8
  br label %if.end.40

if.else.38:                                       ; preds = %if.else.23
  %call39 = call i64 @builtin_lisp_symbol(i32 711)
  %16 = load i64, i64* %item, align 8
  %17 = call i64 @wrong_type_argument(i64 %call39, i64 %16) #7
  unreachable

if.end.40:                                        ; preds = %if.end.36
  br label %if.end.41

if.end.41:                                        ; preds = %if.end.40, %if.end.22
  br label %if.end.42

if.end.42:                                        ; preds = %if.end.41, %if.then.7
  %18 = load double, double* %alpha, align 8
  %19 = load i32, i32* %i, align 4
  %idxprom43 = sext i32 %19 to i64
  %arrayidx44 = getelementptr inbounds [2 x double], [2 x double]* %newval, i32 0, i64 %idxprom43
  store double %18, double* %arrayidx44, align 8
  br label %for.inc

for.inc:                                          ; preds = %if.end.42
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.45

for.cond.45:                                      ; preds = %for.inc.54, %for.end
  %21 = load i32, i32* %i, align 4
  %cmp46 = icmp slt i32 %21, 2
  br i1 %cmp46, label %for.body.48, label %for.end.56

for.body.48:                                      ; preds = %for.cond.45
  %22 = load i32, i32* %i, align 4
  %idxprom49 = sext i32 %22 to i64
  %arrayidx50 = getelementptr inbounds [2 x double], [2 x double]* %newval, i32 0, i64 %idxprom49
  %23 = load double, double* %arrayidx50, align 8
  %24 = load i32, i32* %i, align 4
  %idxprom51 = sext i32 %24 to i64
  %25 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %alpha52 = getelementptr inbounds %struct.frame, %struct.frame* %25, i32 0, i32 74
  %arrayidx53 = getelementptr inbounds [2 x double], [2 x double]* %alpha52, i32 0, i64 %idxprom51
  store double %23, double* %arrayidx53, align 8
  br label %for.inc.54

for.inc.54:                                       ; preds = %for.body.48
  %26 = load i32, i32* %i, align 4
  %inc55 = add nsw i32 %26, 1
  store i32 %inc55, i32* %i, align 4
  br label %for.cond.45

for.end.56:                                       ; preds = %for.cond.45
  call void @block_input()
  %27 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_set_frame_alpha(%struct.frame* %27)
  call void @unblock_input()
  ret void
}

declare i64 @CAR(i64) #1

declare i64 @CDR(i64) #1

; Function Attrs: noreturn
declare void @args_out_of_range(i64, i64) #2

declare i64 @make_float(double) #1

declare void @x_set_frame_alpha(%struct.frame*) #1

; Function Attrs: nounwind uwtable
define zeroext i1 @x_mouse_grabbed(%struct.x_display_info* %dpyinfo) #0 {
entry:
  %dpyinfo.addr = alloca %struct.x_display_info*, align 8
  store %struct.x_display_info* %dpyinfo, %struct.x_display_info** %dpyinfo.addr, align 8
  %0 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %grabbed = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %0, i32 0, i32 12
  %1 = load i32, i32* %grabbed, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %last_mouse_frame = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %2, i32 0, i32 75
  %3 = load %struct.frame*, %struct.frame** %last_mouse_frame, align 8
  %tobool1 = icmp ne %struct.frame* %3, null
  br i1 %tobool1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %4 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %last_mouse_frame2 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %4, i32 0, i32 75
  %5 = load %struct.frame*, %struct.frame** %last_mouse_frame2, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 61
  %6 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp = icmp ne %struct.terminal* %6, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %7 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp, %land.rhs ]
  ret i1 %7
}

; Function Attrs: nounwind uwtable
define void @x_redo_mouse_highlight(%struct.x_display_info* %dpyinfo) #0 {
entry:
  %dpyinfo.addr = alloca %struct.x_display_info*, align 8
  store %struct.x_display_info* %dpyinfo, %struct.x_display_info** %dpyinfo.addr, align 8
  %0 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %last_mouse_motion_frame = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %0, i32 0, i32 77
  %1 = load %struct.frame*, %struct.frame** %last_mouse_motion_frame, align 8
  %tobool = icmp ne %struct.frame* %1, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %last_mouse_motion_frame1 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %2, i32 0, i32 77
  %3 = load %struct.frame*, %struct.frame** %last_mouse_motion_frame1, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 61
  %4 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp = icmp ne %struct.terminal* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %last_mouse_motion_frame2 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %5, i32 0, i32 77
  %6 = load %struct.frame*, %struct.frame** %last_mouse_motion_frame2, align 8
  %7 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %last_mouse_motion_x = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %7, i32 0, i32 80
  %8 = load i32, i32* %last_mouse_motion_x, align 4
  %9 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %last_mouse_motion_y = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %9, i32 0, i32 81
  %10 = load i32, i32* %last_mouse_motion_y, align 4
  call void @note_mouse_highlight(%struct.frame* %6, i32 %8, i32 %10)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void
}

declare void @note_mouse_highlight(%struct.frame*, i32, i32) #1

; Function Attrs: nounwind uwtable
define void @validate_x_resource_name() #0 {
entry:
  %len = alloca i64, align 8
  %good_count = alloca i64, align 8
  %bad_count = alloca i64, align 8
  %new = alloca i64, align 8
  %i = alloca i64, align 8
  %p = alloca i8*, align 8
  %c = alloca i32, align 4
  %c50 = alloca i32, align 4
  store i64 0, i64* %len, align 8
  store i64 0, i64* %good_count, align 8
  store i64 0, i64* %bad_count, align 8
  %0 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 356), align 8
  %call = call zeroext i1 @STRINGP(i64 %0)
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call i64 @build_string(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0))
  store i64 %call1, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 356), align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 357), align 8
  %call2 = call zeroext i1 @STRINGP(i64 %1)
  br i1 %call2, label %if.then.3, label %if.else.31

if.then.3:                                        ; preds = %if.end
  %2 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 357), align 8
  %call4 = call i8* @SDATA(i64 %2)
  store i8* %call4, i8** %p, align 8
  %3 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 357), align 8
  %call5 = call i64 @SBYTES(i64 %3)
  store i64 %call5, i64* %len, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.3
  %4 = load i64, i64* %i, align 8
  %5 = load i64, i64* %len, align 8
  %cmp = icmp slt i64 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i64, i64* %i, align 8
  %7 = load i8*, i8** %p, align 8
  %arrayidx = getelementptr inbounds i8, i8* %7, i64 %6
  %8 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %8 to i32
  store i32 %conv, i32* %c, align 4
  %9 = load i32, i32* %c, align 4
  %cmp6 = icmp sge i32 %9, 97
  br i1 %cmp6, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %for.body
  %10 = load i32, i32* %c, align 4
  %cmp8 = icmp sle i32 %10, 122
  br i1 %cmp8, label %if.else, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %for.body
  %11 = load i32, i32* %c, align 4
  %cmp10 = icmp sge i32 %11, 65
  br i1 %cmp10, label %land.lhs.true.12, label %lor.lhs.false.15

land.lhs.true.12:                                 ; preds = %lor.lhs.false
  %12 = load i32, i32* %c, align 4
  %cmp13 = icmp sle i32 %12, 90
  br i1 %cmp13, label %if.else, label %lor.lhs.false.15

lor.lhs.false.15:                                 ; preds = %land.lhs.true.12, %lor.lhs.false
  %13 = load i32, i32* %c, align 4
  %cmp16 = icmp sge i32 %13, 48
  br i1 %cmp16, label %land.lhs.true.18, label %lor.lhs.false.21

land.lhs.true.18:                                 ; preds = %lor.lhs.false.15
  %14 = load i32, i32* %c, align 4
  %cmp19 = icmp sle i32 %14, 57
  br i1 %cmp19, label %if.else, label %lor.lhs.false.21

lor.lhs.false.21:                                 ; preds = %land.lhs.true.18, %lor.lhs.false.15
  %15 = load i32, i32* %c, align 4
  %cmp22 = icmp eq i32 %15, 45
  br i1 %cmp22, label %if.else, label %lor.lhs.false.24

lor.lhs.false.24:                                 ; preds = %lor.lhs.false.21
  %16 = load i32, i32* %c, align 4
  %cmp25 = icmp eq i32 %16, 95
  br i1 %cmp25, label %if.else, label %if.then.27

if.then.27:                                       ; preds = %lor.lhs.false.24
  %17 = load i64, i64* %bad_count, align 8
  %inc = add nsw i64 %17, 1
  store i64 %inc, i64* %bad_count, align 8
  br label %if.end.29

if.else:                                          ; preds = %lor.lhs.false.24, %lor.lhs.false.21, %land.lhs.true.18, %land.lhs.true.12, %land.lhs.true
  %18 = load i64, i64* %good_count, align 8
  %inc28 = add nsw i64 %18, 1
  store i64 %inc28, i64* %good_count, align 8
  br label %if.end.29

if.end.29:                                        ; preds = %if.else, %if.then.27
  br label %for.inc

for.inc:                                          ; preds = %if.end.29
  %19 = load i64, i64* %i, align 8
  %inc30 = add nsw i64 %19, 1
  store i64 %inc30, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.32

if.else.31:                                       ; preds = %if.end
  store i64 5, i64* %bad_count, align 8
  store i64 0, i64* %good_count, align 8
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.31, %for.end
  %20 = load i64, i64* %bad_count, align 8
  %cmp33 = icmp eq i64 %20, 0
  br i1 %cmp33, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %if.end.32
  br label %for.end.80

if.end.36:                                        ; preds = %if.end.32
  %21 = load i64, i64* %good_count, align 8
  %cmp37 = icmp slt i64 %21, 2
  br i1 %cmp37, label %if.then.42, label %lor.lhs.false.39

lor.lhs.false.39:                                 ; preds = %if.end.36
  %22 = load i64, i64* %len, align 8
  %cmp40 = icmp ult i64 16369, %22
  br i1 %cmp40, label %if.then.42, label %if.end.44

if.then.42:                                       ; preds = %lor.lhs.false.39, %if.end.36
  %call43 = call i64 @build_string(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.23, i32 0, i32 0))
  store i64 %call43, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 357), align 8
  br label %for.end.80

if.end.44:                                        ; preds = %lor.lhs.false.39
  %23 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 357), align 8
  %call45 = call i64 @Fcopy_sequence(i64 %23)
  store i64 %call45, i64* %new, align 8
  store i64 %call45, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 357), align 8
  store i64 0, i64* %i, align 8
  br label %for.cond.46

for.cond.46:                                      ; preds = %for.inc.78, %if.end.44
  %24 = load i64, i64* %i, align 8
  %25 = load i64, i64* %len, align 8
  %cmp47 = icmp slt i64 %24, %25
  br i1 %cmp47, label %for.body.49, label %for.end.80

for.body.49:                                      ; preds = %for.cond.46
  %26 = load i64, i64* %new, align 8
  %27 = load i64, i64* %i, align 8
  %call51 = call zeroext i8 @SREF(i64 %26, i64 %27)
  %conv52 = zext i8 %call51 to i32
  store i32 %conv52, i32* %c50, align 4
  %28 = load i32, i32* %c50, align 4
  %cmp53 = icmp sge i32 %28, 97
  br i1 %cmp53, label %land.lhs.true.55, label %lor.lhs.false.58

land.lhs.true.55:                                 ; preds = %for.body.49
  %29 = load i32, i32* %c50, align 4
  %cmp56 = icmp sle i32 %29, 122
  br i1 %cmp56, label %if.end.77, label %lor.lhs.false.58

lor.lhs.false.58:                                 ; preds = %land.lhs.true.55, %for.body.49
  %30 = load i32, i32* %c50, align 4
  %cmp59 = icmp sge i32 %30, 65
  br i1 %cmp59, label %land.lhs.true.61, label %lor.lhs.false.64

land.lhs.true.61:                                 ; preds = %lor.lhs.false.58
  %31 = load i32, i32* %c50, align 4
  %cmp62 = icmp sle i32 %31, 90
  br i1 %cmp62, label %if.end.77, label %lor.lhs.false.64

lor.lhs.false.64:                                 ; preds = %land.lhs.true.61, %lor.lhs.false.58
  %32 = load i32, i32* %c50, align 4
  %cmp65 = icmp sge i32 %32, 48
  br i1 %cmp65, label %land.lhs.true.67, label %lor.lhs.false.70

land.lhs.true.67:                                 ; preds = %lor.lhs.false.64
  %33 = load i32, i32* %c50, align 4
  %cmp68 = icmp sle i32 %33, 57
  br i1 %cmp68, label %if.end.77, label %lor.lhs.false.70

lor.lhs.false.70:                                 ; preds = %land.lhs.true.67, %lor.lhs.false.64
  %34 = load i32, i32* %c50, align 4
  %cmp71 = icmp eq i32 %34, 45
  br i1 %cmp71, label %if.end.77, label %lor.lhs.false.73

lor.lhs.false.73:                                 ; preds = %lor.lhs.false.70
  %35 = load i32, i32* %c50, align 4
  %cmp74 = icmp eq i32 %35, 95
  br i1 %cmp74, label %if.end.77, label %if.then.76

if.then.76:                                       ; preds = %lor.lhs.false.73
  %36 = load i64, i64* %new, align 8
  %37 = load i64, i64* %i, align 8
  call void @SSET(i64 %36, i64 %37, i8 zeroext 95)
  br label %if.end.77

if.end.77:                                        ; preds = %if.then.76, %lor.lhs.false.73, %lor.lhs.false.70, %land.lhs.true.67, %land.lhs.true.61, %land.lhs.true.55
  br label %for.inc.78

for.inc.78:                                       ; preds = %if.end.77
  %38 = load i64, i64* %i, align 8
  %inc79 = add nsw i64 %38, 1
  store i64 %inc79, i64* %i, align 8
  br label %for.cond.46

for.end.80:                                       ; preds = %if.then.35, %if.then.42, %for.cond.46
  ret void
}

declare void @SSET(i64, i64, i8 zeroext) #1

; Function Attrs: nounwind uwtable
define i64 @Fx_get_resource(i64 %attribute, i64 %class, i64 %component, i64 %subclass) #0 {
entry:
  %attribute.addr = alloca i64, align 8
  %class.addr = alloca i64, align 8
  %component.addr = alloca i64, align 8
  %subclass.addr = alloca i64, align 8
  store i64 %attribute, i64* %attribute.addr, align 8
  store i64 %class, i64* %class.addr, align 8
  store i64 %component, i64* %component.addr, align 8
  store i64 %subclass, i64* %subclass.addr, align 8
  call void @check_window_system(%struct.frame* null)
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %call1 = call %struct.x_display_info* @check_x_display_info(i64 %call)
  %xrdb = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %call1, i32 0, i32 21
  %0 = load %struct._XrmHashBucketRec*, %struct._XrmHashBucketRec** %xrdb, align 8
  %1 = load i64, i64* %attribute.addr, align 8
  %2 = load i64, i64* %class.addr, align 8
  %3 = load i64, i64* %component.addr, align 8
  %4 = load i64, i64* %subclass.addr, align 8
  %call2 = call i64 @xrdb_get_resource(%struct._XrmHashBucketRec* %0, i64 %1, i64 %2, i64 %3, i64 %4)
  ret i64 %call2
}

; Function Attrs: nounwind uwtable
define internal i64 @xrdb_get_resource(%struct._XrmHashBucketRec* %rdb, i64 %attribute, i64 %class, i64 %component, i64 %subclass) #0 {
entry:
  %retval = alloca i64, align 8
  %rdb.addr = alloca %struct._XrmHashBucketRec*, align 8
  %attribute.addr = alloca i64, align 8
  %class.addr = alloca i64, align 8
  %component.addr = alloca i64, align 8
  %subclass.addr = alloca i64, align 8
  %name_keysize = alloca i64, align 8
  %class_keysize = alloca i64, align 8
  %sa_avail = alloca i64, align 8
  %sa_count = alloca i64, align 8
  %sa_must_free = alloca i8, align 1
  %name_key = alloca i8*, align 8
  %class_key = alloca i8*, align 8
  %nz = alloca i8*, align 8
  %cz = alloca i8*, align 8
  %value = alloca i8*, align 8
  store %struct._XrmHashBucketRec* %rdb, %struct._XrmHashBucketRec** %rdb.addr, align 8
  store i64 %attribute, i64* %attribute.addr, align 8
  store i64 %class, i64* %class.addr, align 8
  store i64 %component, i64* %component.addr, align 8
  store i64 %subclass, i64* %subclass.addr, align 8
  %0 = load i64, i64* %attribute.addr, align 8
  call void @CHECK_STRING(i64 %0)
  %1 = load i64, i64* %class.addr, align 8
  call void @CHECK_STRING(i64 %1)
  %2 = load i64, i64* %component.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %2, %call
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %3 = load i64, i64* %component.addr, align 8
  call void @CHECK_STRING(i64 %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i64, i64* %subclass.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2 = icmp eq i64 %4, %call1
  br i1 %cmp2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  %5 = load i64, i64* %subclass.addr, align 8
  call void @CHECK_STRING(i64 %5)
  br label %if.end.4

if.end.4:                                         ; preds = %if.then.3, %if.end
  %6 = load i64, i64* %component.addr, align 8
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp6 = icmp eq i64 %6, %call5
  %conv = zext i1 %cmp6 to i32
  %7 = load i64, i64* %subclass.addr, align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp8 = icmp eq i64 %7, %call7
  %conv9 = zext i1 %cmp8 to i32
  %cmp10 = icmp ne i32 %conv, %conv9
  br i1 %cmp10, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.end.4
  call void (i8*, ...) @error(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.69, i32 0, i32 0)) #7
  unreachable

if.end.13:                                        ; preds = %if.end.4
  call void @validate_x_resource_name()
  %8 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 357), align 8
  %call14 = call i64 @SBYTES(i64 %8)
  %9 = load i64, i64* %component.addr, align 8
  %call15 = call zeroext i1 @STRINGP(i64 %9)
  br i1 %call15, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.13
  %10 = load i64, i64* %component.addr, align 8
  %call17 = call i64 @SBYTES(i64 %10)
  br label %cond.end

cond.false:                                       ; preds = %if.end.13
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call17, %cond.true ], [ 0, %cond.false ]
  %add = add nsw i64 %call14, %cond
  %11 = load i64, i64* %attribute.addr, align 8
  %call18 = call i64 @SBYTES(i64 %11)
  %add19 = add nsw i64 %add, %call18
  %add20 = add nsw i64 %add19, 3
  store i64 %add20, i64* %name_keysize, align 8
  %12 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 356), align 8
  %call21 = call i64 @SBYTES(i64 %12)
  %13 = load i64, i64* %class.addr, align 8
  %call22 = call i64 @SBYTES(i64 %13)
  %add23 = add nsw i64 %call21, %call22
  %14 = load i64, i64* %subclass.addr, align 8
  %call24 = call zeroext i1 @STRINGP(i64 %14)
  br i1 %call24, label %cond.true.26, label %cond.false.28

cond.true.26:                                     ; preds = %cond.end
  %15 = load i64, i64* %subclass.addr, align 8
  %call27 = call i64 @SBYTES(i64 %15)
  br label %cond.end.29

cond.false.28:                                    ; preds = %cond.end
  br label %cond.end.29

cond.end.29:                                      ; preds = %cond.false.28, %cond.true.26
  %cond30 = phi i64 [ %call27, %cond.true.26 ], [ 0, %cond.false.28 ]
  %add31 = add nsw i64 %add23, %cond30
  %add32 = add nsw i64 %add31, 3
  store i64 %add32, i64* %class_keysize, align 8
  store i64 16384, i64* %sa_avail, align 8
  %call33 = call i64 @SPECPDL_INDEX()
  store i64 %call33, i64* %sa_count, align 8
  store i8 0, i8* %sa_must_free, align 1
  %16 = load i64, i64* %name_keysize, align 8
  %17 = load i64, i64* %class_keysize, align 8
  %add34 = add nsw i64 %16, %17
  %18 = load i64, i64* %sa_avail, align 8
  %cmp35 = icmp sle i64 %add34, %18
  br i1 %cmp35, label %cond.true.37, label %cond.false.40

cond.true.37:                                     ; preds = %cond.end.29
  %19 = load i64, i64* %name_keysize, align 8
  %20 = load i64, i64* %class_keysize, align 8
  %add38 = add nsw i64 %19, %20
  %21 = load i64, i64* %sa_avail, align 8
  %sub = sub nsw i64 %21, %add38
  store i64 %sub, i64* %sa_avail, align 8
  %22 = load i64, i64* %name_keysize, align 8
  %23 = load i64, i64* %class_keysize, align 8
  %add39 = add nsw i64 %22, %23
  %24 = alloca i8, i64 %add39
  br label %cond.end.43

cond.false.40:                                    ; preds = %cond.end.29
  store i8 1, i8* %sa_must_free, align 1
  %25 = load i64, i64* %name_keysize, align 8
  %26 = load i64, i64* %class_keysize, align 8
  %add41 = add nsw i64 %25, %26
  %call42 = call i8* @record_xmalloc(i64 %add41)
  br label %cond.end.43

cond.end.43:                                      ; preds = %cond.false.40, %cond.true.37
  %cond44 = phi i8* [ %24, %cond.true.37 ], [ %call42, %cond.false.40 ]
  store i8* %cond44, i8** %name_key, align 8
  %27 = load i8*, i8** %name_key, align 8
  %28 = load i64, i64* %name_keysize, align 8
  %add.ptr = getelementptr inbounds i8, i8* %27, i64 %28
  store i8* %add.ptr, i8** %class_key, align 8
  %29 = load i8*, i8** %name_key, align 8
  %30 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 357), align 8
  %call45 = call i8* @lispstpcpy(i8* %29, i64 %30)
  store i8* %call45, i8** %nz, align 8
  %31 = load i8*, i8** %class_key, align 8
  %32 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 356), align 8
  %call46 = call i8* @lispstpcpy(i8* %31, i64 %32)
  store i8* %call46, i8** %cz, align 8
  %33 = load i8*, i8** %cz, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %33, i32 1
  store i8* %incdec.ptr, i8** %cz, align 8
  store i8 46, i8* %33, align 1
  %34 = load i8*, i8** %cz, align 8
  %35 = load i64, i64* %class.addr, align 8
  %call47 = call i8* @lispstpcpy(i8* %34, i64 %35)
  store i8* %call47, i8** %cz, align 8
  %36 = load i64, i64* %component.addr, align 8
  %call48 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp49 = icmp eq i64 %36, %call48
  br i1 %cmp49, label %if.end.56, label %if.then.51

if.then.51:                                       ; preds = %cond.end.43
  %37 = load i8*, i8** %cz, align 8
  %incdec.ptr52 = getelementptr inbounds i8, i8* %37, i32 1
  store i8* %incdec.ptr52, i8** %cz, align 8
  store i8 46, i8* %37, align 1
  %38 = load i8*, i8** %cz, align 8
  %39 = load i64, i64* %subclass.addr, align 8
  %call53 = call i8* @lispstpcpy(i8* %38, i64 %39)
  %40 = load i8*, i8** %nz, align 8
  %incdec.ptr54 = getelementptr inbounds i8, i8* %40, i32 1
  store i8* %incdec.ptr54, i8** %nz, align 8
  store i8 46, i8* %40, align 1
  %41 = load i8*, i8** %nz, align 8
  %42 = load i64, i64* %component.addr, align 8
  %call55 = call i8* @lispstpcpy(i8* %41, i64 %42)
  store i8* %call55, i8** %nz, align 8
  br label %if.end.56

if.end.56:                                        ; preds = %if.then.51, %cond.end.43
  %43 = load i8*, i8** %nz, align 8
  %incdec.ptr57 = getelementptr inbounds i8, i8* %43, i32 1
  store i8* %incdec.ptr57, i8** %nz, align 8
  store i8 46, i8* %43, align 1
  %44 = load i8*, i8** %nz, align 8
  %45 = load i64, i64* %attribute.addr, align 8
  %call58 = call i8* @lispstpcpy(i8* %44, i64 %45)
  %46 = load %struct._XrmHashBucketRec*, %struct._XrmHashBucketRec** %rdb.addr, align 8
  %47 = load i8*, i8** %name_key, align 8
  %48 = load i8*, i8** %class_key, align 8
  %call59 = call i8* @x_get_string_resource(%struct._XrmHashBucketRec* %46, i8* %47, i8* %48)
  store i8* %call59, i8** %value, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.56
  %49 = load i8, i8* %sa_must_free, align 1
  %tobool = trunc i8 %49 to i1
  br i1 %tobool, label %if.then.60, label %if.end.63

if.then.60:                                       ; preds = %do.body
  store i8 0, i8* %sa_must_free, align 1
  %50 = load i64, i64* %sa_count, align 8
  %call61 = call i64 @builtin_lisp_symbol(i32 0)
  %call62 = call i64 @unbind_to(i64 %50, i64 %call61)
  br label %if.end.63

if.end.63:                                        ; preds = %if.then.60, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.63
  %51 = load i8*, i8** %value, align 8
  %tobool64 = icmp ne i8* %51, null
  br i1 %tobool64, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %do.end
  %52 = load i8*, i8** %value, align 8
  %53 = load i8, i8* %52, align 1
  %conv65 = sext i8 %53 to i32
  %tobool66 = icmp ne i32 %conv65, 0
  br i1 %tobool66, label %if.then.67, label %if.else

if.then.67:                                       ; preds = %land.lhs.true
  %54 = load i8*, i8** %value, align 8
  %call68 = call i64 @build_string(i8* %54)
  store i64 %call68, i64* %retval
  br label %return

if.else:                                          ; preds = %land.lhs.true, %do.end
  %call69 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call69, i64* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then.67
  %55 = load i64, i64* %retval
  ret i64 %55
}

declare %struct.x_display_info* @check_x_display_info(i64) #1

; Function Attrs: nounwind uwtable
define i64 @display_x_get_resource(%struct.x_display_info* %dpyinfo, i64 %attribute, i64 %class, i64 %component, i64 %subclass) #0 {
entry:
  %dpyinfo.addr = alloca %struct.x_display_info*, align 8
  %attribute.addr = alloca i64, align 8
  %class.addr = alloca i64, align 8
  %component.addr = alloca i64, align 8
  %subclass.addr = alloca i64, align 8
  store %struct.x_display_info* %dpyinfo, %struct.x_display_info** %dpyinfo.addr, align 8
  store i64 %attribute, i64* %attribute.addr, align 8
  store i64 %class, i64* %class.addr, align 8
  store i64 %component, i64* %component.addr, align 8
  store i64 %subclass, i64* %subclass.addr, align 8
  %0 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %xrdb = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %0, i32 0, i32 21
  %1 = load %struct._XrmHashBucketRec*, %struct._XrmHashBucketRec** %xrdb, align 8
  %2 = load i64, i64* %attribute.addr, align 8
  %3 = load i64, i64* %class.addr, align 8
  %4 = load i64, i64* %component.addr, align 8
  %5 = load i64, i64* %subclass.addr, align 8
  %call = call i64 @xrdb_get_resource(%struct._XrmHashBucketRec* %1, i64 %2, i64 %3, i64 %4, i64 %5)
  ret i64 %call
}

; Function Attrs: nounwind uwtable
define i64 @x_get_arg(%struct.x_display_info* %dpyinfo, i64 %alist, i64 %param, i8* %attribute, i8* %class, i32 %type) #0 {
entry:
  %retval = alloca i64, align 8
  %dpyinfo.addr = alloca %struct.x_display_info*, align 8
  %alist.addr = alloca i64, align 8
  %param.addr = alloca i64, align 8
  %attribute.addr = alloca i8*, align 8
  %class.addr = alloca i8*, align 8
  %type.addr = alloca i32, align 4
  %tem = alloca i64, align 8
  %tail = alloca i64, align 8
  %at = alloca i64, align 8
  %.compoundliteral = alloca %union.Aligned_String, align 8
  %cl = alloca i64, align 8
  %.compoundliteral32 = alloca %union.Aligned_String, align 8
  %lower = alloca i64, align 8
  store %struct.x_display_info* %dpyinfo, %struct.x_display_info** %dpyinfo.addr, align 8
  store i64 %alist, i64* %alist.addr, align 8
  store i64 %param, i64* %param.addr, align 8
  store i8* %attribute, i8** %attribute.addr, align 8
  store i8* %class, i8** %class.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %0 = load i64, i64* %param.addr, align 8
  %1 = load i64, i64* %alist.addr, align 8
  %call = call i64 @Fassq(i64 %0, i64 %1)
  store i64 %call, i64* %tem, align 8
  %2 = load i64, i64* %tem, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %2, %call1
  br i1 %cmp, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %3 = load i64, i64* %tem, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  call void @XSETCAR(i64 %3, i64 %call2)
  %4 = load i64, i64* %alist.addr, align 8
  store i64 %4, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %5 = load i64, i64* %tail, align 8
  %and = and i64 %5, 7
  %conv = trunc i64 %and to i32
  %cmp3 = icmp eq i32 %conv, 3
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %6, 3
  %7 = inttoptr i64 %sub to i8*
  %8 = bitcast i8* %7 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %8, i32 0, i32 0
  %9 = load i64, i64* %car, align 8
  %and5 = and i64 %9, 7
  %conv6 = trunc i64 %and5 to i32
  %cmp7 = icmp eq i32 %conv6, 3
  br i1 %cmp7, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %10 = load i64, i64* %tail, align 8
  %sub9 = sub nsw i64 %10, 3
  %11 = inttoptr i64 %sub9 to i8*
  %12 = bitcast i8* %11 to %struct.Lisp_Cons*
  %car10 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %12, i32 0, i32 0
  %13 = load i64, i64* %car10, align 8
  %sub11 = sub nsw i64 %13, 3
  %14 = inttoptr i64 %sub11 to i8*
  %15 = bitcast i8* %14 to %struct.Lisp_Cons*
  %car12 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %15, i32 0, i32 0
  %16 = load i64, i64* %car12, align 8
  %17 = load i64, i64* %param.addr, align 8
  %cmp13 = icmp eq i64 %16, %17
  br i1 %cmp13, label %if.then.15, label %if.end

if.then.15:                                       ; preds = %land.lhs.true
  %18 = load i64, i64* %tail, align 8
  %sub16 = sub nsw i64 %18, 3
  %19 = inttoptr i64 %sub16 to i8*
  %20 = bitcast i8* %19 to %struct.Lisp_Cons*
  %car17 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %20, i32 0, i32 0
  %21 = load i64, i64* %car17, align 8
  %call18 = call i64 @builtin_lisp_symbol(i32 0)
  call void @XSETCAR(i64 %21, i64 %call18)
  br label %if.end

if.end:                                           ; preds = %if.then.15, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %22 = load i64, i64* %tail, align 8
  %sub19 = sub nsw i64 %22, 3
  %23 = inttoptr i64 %sub19 to i8*
  %24 = bitcast i8* %23 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %24, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %25 = load i64, i64* %cdr, align 8
  store i64 %25, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.21

if.else:                                          ; preds = %entry
  %26 = load i64, i64* %param.addr, align 8
  %27 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 60), align 8
  %call20 = call i64 @Fassq(i64 %26, i64 %27)
  store i64 %call20, i64* %tem, align 8
  br label %if.end.21

if.end.21:                                        ; preds = %if.else, %for.end
  %28 = load i64, i64* %tem, align 8
  %call22 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp23 = icmp eq i64 %28, %call22
  br i1 %cmp23, label %if.then.25, label %if.end.111

if.then.25:                                       ; preds = %if.end.21
  %29 = load i8*, i8** %attribute.addr, align 8
  %tobool = icmp ne i8* %29, null
  br i1 %tobool, label %land.lhs.true.26, label %if.else.109

land.lhs.true.26:                                 ; preds = %if.then.25
  %30 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %tobool27 = icmp ne %struct.x_display_info* %30, null
  br i1 %tobool27, label %if.then.28, label %if.else.109

if.then.28:                                       ; preds = %land.lhs.true.26
  %s = bitcast %union.Aligned_String* %.compoundliteral to %struct.Lisp_String*
  %size = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 0
  %31 = load i8*, i8** %attribute.addr, align 8
  %call29 = call i64 @strlen(i8* %31) #8
  store i64 %call29, i64* %size, align 8
  %size_byte = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 1
  store i64 -1, i64* %size_byte, align 8
  %intervals = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 2
  store %struct.interval* null, %struct.interval** %intervals, align 8
  %data = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 3
  %32 = load i8*, i8** %attribute.addr, align 8
  store i8* %32, i8** %data, align 8
  %s30 = bitcast %union.Aligned_String* %.compoundliteral to %struct.Lisp_String*
  %33 = bitcast %struct.Lisp_String* %s30 to i8*
  %call31 = call i64 @make_lisp_ptr(i8* %33, i32 4)
  store i64 %call31, i64* %at, align 8
  %s33 = bitcast %union.Aligned_String* %.compoundliteral32 to %struct.Lisp_String*
  %size34 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s33, i32 0, i32 0
  %34 = load i8*, i8** %class.addr, align 8
  %call35 = call i64 @strlen(i8* %34) #8
  store i64 %call35, i64* %size34, align 8
  %size_byte36 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s33, i32 0, i32 1
  store i64 -1, i64* %size_byte36, align 8
  %intervals37 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s33, i32 0, i32 2
  store %struct.interval* null, %struct.interval** %intervals37, align 8
  %data38 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s33, i32 0, i32 3
  %35 = load i8*, i8** %class.addr, align 8
  store i8* %35, i8** %data38, align 8
  %s39 = bitcast %union.Aligned_String* %.compoundliteral32 to %struct.Lisp_String*
  %36 = bitcast %struct.Lisp_String* %s39 to i8*
  %call40 = call i64 @make_lisp_ptr(i8* %36, i32 4)
  store i64 %call40, i64* %cl, align 8
  %37 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %38 = load i64, i64* %at, align 8
  %39 = load i64, i64* %cl, align 8
  %call41 = call i64 @builtin_lisp_symbol(i32 0)
  %call42 = call i64 @builtin_lisp_symbol(i32 0)
  %call43 = call i64 @display_x_get_resource(%struct.x_display_info* %37, i64 %38, i64 %39, i64 %call41, i64 %call42)
  store i64 %call43, i64* %tem, align 8
  %40 = load i64, i64* %tem, align 8
  %call44 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp45 = icmp eq i64 %40, %call44
  br i1 %cmp45, label %if.then.47, label %if.end.49

if.then.47:                                       ; preds = %if.then.28
  %call48 = call i64 @builtin_lisp_symbol(i32 957)
  store i64 %call48, i64* %retval
  br label %return

if.end.49:                                        ; preds = %if.then.28
  %41 = load i32, i32* %type.addr, align 4
  switch i32 %41, label %sw.default [
    i32 0, label %sw.bb
    i32 5, label %sw.bb.53
    i32 1, label %sw.bb.67
    i32 2, label %sw.bb.71
    i32 3, label %sw.bb.84
    i32 4, label %sw.bb.85
  ]

sw.bb:                                            ; preds = %if.end.49
  %42 = load i64, i64* %tem, align 8
  %call50 = call i8* @SSDATA(i64 %42)
  %call51 = call i32 @atoi(i8* %call50) #8
  %conv52 = sext i32 %call51 to i64
  %shl = shl i64 %conv52, 2
  %add = add i64 %shl, 2
  store i64 %add, i64* %retval
  br label %return

sw.bb.53:                                         ; preds = %if.end.49
  %43 = load i64, i64* %tem, align 8
  %call54 = call i8* @SSDATA(i64 %43)
  %call55 = call i32 @strcmp(i8* %call54, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i32 0, i32 0)) #8
  %tobool56 = icmp ne i32 %call55, 0
  br i1 %tobool56, label %lor.lhs.false, label %if.then.60

lor.lhs.false:                                    ; preds = %sw.bb.53
  %44 = load i64, i64* %tem, align 8
  %call57 = call i8* @SSDATA(i64 %44)
  %call58 = call i32 @strcmp(i8* %call57, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0)) #8
  %tobool59 = icmp ne i32 %call58, 0
  br i1 %tobool59, label %if.end.61, label %if.then.60

if.then.60:                                       ; preds = %lor.lhs.false, %sw.bb.53
  store i64 6, i64* %retval
  br label %return

if.end.61:                                        ; preds = %lor.lhs.false
  %45 = load i64, i64* %tem, align 8
  %call62 = call i8* @SSDATA(i64 %45)
  %call63 = call i32 @atoi(i8* %call62) #8
  %conv64 = sext i32 %call63 to i64
  %shl65 = shl i64 %conv64, 2
  %add66 = add i64 %shl65, 2
  store i64 %add66, i64* %retval
  br label %return

sw.bb.67:                                         ; preds = %if.end.49
  %46 = load i64, i64* %tem, align 8
  %call68 = call i8* @SSDATA(i64 %46)
  %call69 = call double @atof(i8* %call68) #8
  %call70 = call i64 @make_float(double %call69)
  store i64 %call70, i64* %retval
  br label %return

sw.bb.71:                                         ; preds = %if.end.49
  %47 = load i64, i64* %tem, align 8
  %call72 = call i64 @Fdowncase(i64 %47)
  store i64 %call72, i64* %tem, align 8
  %48 = load i64, i64* %tem, align 8
  %call73 = call i8* @SSDATA(i64 %48)
  %call74 = call i32 @strcmp(i8* %call73, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i32 0, i32 0)) #8
  %tobool75 = icmp ne i32 %call74, 0
  br i1 %tobool75, label %lor.lhs.false.76, label %if.then.80

lor.lhs.false.76:                                 ; preds = %sw.bb.71
  %49 = load i64, i64* %tem, align 8
  %call77 = call i8* @SSDATA(i64 %49)
  %call78 = call i32 @strcmp(i8* %call77, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0)) #8
  %tobool79 = icmp ne i32 %call78, 0
  br i1 %tobool79, label %if.else.82, label %if.then.80

if.then.80:                                       ; preds = %lor.lhs.false.76, %sw.bb.71
  %call81 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call81, i64* %retval
  br label %return

if.else.82:                                       ; preds = %lor.lhs.false.76
  %call83 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call83, i64* %retval
  br label %return

sw.bb.84:                                         ; preds = %if.end.49
  %50 = load i64, i64* %tem, align 8
  store i64 %50, i64* %retval
  br label %return

sw.bb.85:                                         ; preds = %if.end.49
  %51 = load i64, i64* %tem, align 8
  %call86 = call i64 @Fdowncase(i64 %51)
  store i64 %call86, i64* %lower, align 8
  %52 = load i64, i64* %lower, align 8
  %call87 = call i8* @SSDATA(i64 %52)
  %call88 = call i32 @strcmp(i8* %call87, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i32 0, i32 0)) #8
  %tobool89 = icmp ne i32 %call88, 0
  br i1 %tobool89, label %lor.lhs.false.90, label %if.then.94

lor.lhs.false.90:                                 ; preds = %sw.bb.85
  %53 = load i64, i64* %lower, align 8
  %call91 = call i8* @SSDATA(i64 %53)
  %call92 = call i32 @strcmp(i8* %call91, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0)) #8
  %tobool93 = icmp ne i32 %call92, 0
  br i1 %tobool93, label %if.else.96, label %if.then.94

if.then.94:                                       ; preds = %lor.lhs.false.90, %sw.bb.85
  %call95 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call95, i64* %retval
  br label %return

if.else.96:                                       ; preds = %lor.lhs.false.90
  %54 = load i64, i64* %lower, align 8
  %call97 = call i8* @SSDATA(i64 %54)
  %call98 = call i32 @strcmp(i8* %call97, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.26, i32 0, i32 0)) #8
  %tobool99 = icmp ne i32 %call98, 0
  br i1 %tobool99, label %lor.lhs.false.100, label %if.then.104

lor.lhs.false.100:                                ; preds = %if.else.96
  %55 = load i64, i64* %lower, align 8
  %call101 = call i8* @SSDATA(i64 %55)
  %call102 = call i32 @strcmp(i8* %call101, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.27, i32 0, i32 0)) #8
  %tobool103 = icmp ne i32 %call102, 0
  br i1 %tobool103, label %if.else.106, label %if.then.104

if.then.104:                                      ; preds = %lor.lhs.false.100, %if.else.96
  %call105 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call105, i64* %retval
  br label %return

if.else.106:                                      ; preds = %lor.lhs.false.100
  %56 = load i64, i64* %tem, align 8
  %call107 = call i64 @builtin_lisp_symbol(i32 0)
  %call108 = call i64 @Fintern(i64 %56, i64 %call107)
  store i64 %call108, i64* %retval
  br label %return

sw.default:                                       ; preds = %if.end.49
  call void @emacs_abort() #7
  unreachable

if.else.109:                                      ; preds = %land.lhs.true.26, %if.then.25
  %call110 = call i64 @builtin_lisp_symbol(i32 957)
  store i64 %call110, i64* %retval
  br label %return

if.end.111:                                       ; preds = %if.end.21
  %57 = load i64, i64* %tem, align 8
  %call112 = call i64 @Fcdr(i64 %57)
  store i64 %call112, i64* %retval
  br label %return

return:                                           ; preds = %if.end.111, %if.else.109, %if.else.106, %if.then.104, %if.then.94, %sw.bb.84, %if.else.82, %if.then.80, %sw.bb.67, %if.end.61, %if.then.60, %sw.bb, %if.then.47
  %58 = load i64, i64* %retval
  ret i64 %58
}

declare void @XSETCAR(i64, i64) #1

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #6

; Function Attrs: nounwind readonly
declare i32 @atoi(i8*) #6

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #6

; Function Attrs: nounwind readonly
declare double @atof(i8*) #6

declare i64 @Fdowncase(i64) #1

; Function Attrs: nounwind uwtable
define i64 @x_frame_get_and_record_arg(%struct.frame* %f, i64 %alist, i64 %param, i8* %attribute, i8* %class, i32 %type) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %alist.addr = alloca i64, align 8
  %param.addr = alloca i64, align 8
  %attribute.addr = alloca i8*, align 8
  %class.addr = alloca i8*, align 8
  %type.addr = alloca i32, align 4
  %value = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %alist, i64* %alist.addr, align 8
  store i64 %param, i64* %param.addr, align 8
  store i8* %attribute, i8** %attribute.addr, align 8
  store i8* %class, i8** %class.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %3 = load i64, i64* %alist.addr, align 8
  %4 = load i64, i64* %param.addr, align 8
  %5 = load i8*, i8** %attribute.addr, align 8
  %6 = load i8*, i8** %class.addr, align 8
  %7 = load i32, i32* %type.addr, align 4
  %call = call i64 @x_get_arg(%struct.x_display_info* %2, i64 %3, i64 %4, i8* %5, i8* %6, i32 %7)
  store i64 %call, i64* %value, align 8
  %8 = load i64, i64* %value, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %8, %call1
  br i1 %cmp, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %9 = load i64, i64* %value, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 957)
  %cmp3 = icmp eq i64 %9, %call2
  br i1 %cmp3, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %11 = load i64, i64* %param.addr, align 8
  %12 = load i64, i64* %value, align 8
  call void @store_frame_param(%struct.frame* %10, i64 %11, i64 %12)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %13 = load i64, i64* %value, align 8
  ret i64 %13
}

; Function Attrs: nounwind uwtable
define i64 @x_default_parameter(%struct.frame* %f, i64 %alist, i64 %prop, i64 %deflt, i8* %xprop, i8* %xclass, i32 %type) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %alist.addr = alloca i64, align 8
  %prop.addr = alloca i64, align 8
  %deflt.addr = alloca i64, align 8
  %xprop.addr = alloca i8*, align 8
  %xclass.addr = alloca i8*, align 8
  %type.addr = alloca i32, align 4
  %tem = alloca i64, align 8
  %arg = alloca i64, align 8
  %.compoundliteral = alloca %union.Aligned_Cons, align 8
  %.compoundliteral2 = alloca %union.Aligned_Cons, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %alist, i64* %alist.addr, align 8
  store i64 %prop, i64* %prop.addr, align 8
  store i64 %deflt, i64* %deflt.addr, align 8
  store i8* %xprop, i8** %xprop.addr, align 8
  store i8* %xclass, i8** %xclass.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1 = load i64, i64* %alist.addr, align 8
  %2 = load i64, i64* %prop.addr, align 8
  %3 = load i8*, i8** %xprop.addr, align 8
  %4 = load i8*, i8** %xclass.addr, align 8
  %5 = load i32, i32* %type.addr, align 4
  %call = call i64 @x_frame_get_arg(%struct.frame* %0, i64 %1, i64 %2, i8* %3, i8* %4, i32 %5)
  store i64 %call, i64* %tem, align 8
  %6 = load i64, i64* %tem, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 957)
  %cmp = icmp eq i64 %6, %call1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load i64, i64* %deflt.addr, align 8
  store i64 %7, i64* %tem, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %s = bitcast %union.Aligned_Cons* %.compoundliteral to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %s, i32 0, i32 0
  %s3 = bitcast %union.Aligned_Cons* %.compoundliteral2 to %struct.Lisp_Cons*
  %car4 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %s3, i32 0, i32 0
  %8 = load i64, i64* %prop.addr, align 8
  store i64 %8, i64* %car4, align 8
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %s3, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %9 = load i64, i64* %tem, align 8
  store i64 %9, i64* %cdr, align 8
  %s5 = bitcast %union.Aligned_Cons* %.compoundliteral2 to %struct.Lisp_Cons*
  %10 = bitcast %struct.Lisp_Cons* %s5 to i8*
  %call6 = call i64 @make_lisp_ptr(i8* %10, i32 3)
  store i64 %call6, i64* %car, align 8
  %u7 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %s, i32 0, i32 1
  %cdr8 = bitcast %union.anon.11* %u7 to i64*
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call9, i64* %cdr8, align 8
  %s10 = bitcast %union.Aligned_Cons* %.compoundliteral to %struct.Lisp_Cons*
  %11 = bitcast %struct.Lisp_Cons* %s10 to i8*
  %call11 = call i64 @make_lisp_ptr(i8* %11, i32 3)
  store i64 %call11, i64* %arg, align 8
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %13 = load i64, i64* %arg, align 8
  call void @x_set_frame_parameters(%struct.frame* %12, i64 %13)
  %14 = load i64, i64* %tem, align 8
  ret i64 %14
}

; Function Attrs: nounwind uwtable
define internal i64 @x_frame_get_arg(%struct.frame* %f, i64 %alist, i64 %param, i8* %attribute, i8* %class, i32 %type) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %alist.addr = alloca i64, align 8
  %param.addr = alloca i64, align 8
  %attribute.addr = alloca i8*, align 8
  %class.addr = alloca i8*, align 8
  %type.addr = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %alist, i64* %alist.addr, align 8
  store i64 %param, i64* %param.addr, align 8
  store i8* %attribute, i8** %attribute.addr, align 8
  store i8* %class, i8** %class.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %3 = load i64, i64* %alist.addr, align 8
  %4 = load i64, i64* %param.addr, align 8
  %5 = load i8*, i8** %attribute.addr, align 8
  %6 = load i8*, i8** %class.addr, align 8
  %7 = load i32, i32* %type.addr, align 4
  %call = call i64 @x_get_arg(%struct.x_display_info* %2, i64 %3, i64 %4, i8* %5, i8* %6, i32 %7)
  ret i64 %call
}

; Function Attrs: nounwind uwtable
define i64 @Fx_parse_geometry(i64 %string) #0 {
entry:
  %string.addr = alloca i64, align 8
  %geometry = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  %result = alloca i64, align 8
  %element = alloca i64, align 8
  %element33 = alloca i64, align 8
  store i64 %string, i64* %string.addr, align 8
  %0 = load i64, i64* %string.addr, align 8
  call void @CHECK_STRING(i64 %0)
  %1 = load i64, i64* %string.addr, align 8
  %call = call i8* @SSDATA(i64 %1)
  %call1 = call i32 @XParseGeometry(i8* %call, i32* %x, i32* %y, i32* %width, i32* %height)
  store i32 %call1, i32* %geometry, align 4
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call2, i64* %result, align 8
  %2 = load i32, i32* %geometry, align 4
  %and = and i32 %2, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end.29

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %x, align 4
  %cmp = icmp sge i32 %3, 0
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then
  %4 = load i32, i32* %geometry, align 4
  %and3 = and i32 %4, 16
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %land.lhs.true
  %call6 = call i64 @builtin_lisp_symbol(i32 607)
  %call7 = call i64 @builtin_lisp_symbol(i32 668)
  %5 = load i32, i32* %x, align 4
  %sub = sub nsw i32 0, %5
  %conv = sext i32 %sub to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  %call8 = call i64 @list3(i64 %call6, i64 %call7, i64 %add)
  store i64 %call8, i64* %element, align 8
  br label %if.end.27

if.else:                                          ; preds = %land.lhs.true, %if.then
  %6 = load i32, i32* %x, align 4
  %cmp9 = icmp slt i32 %6, 0
  br i1 %cmp9, label %land.lhs.true.11, label %if.else.21

land.lhs.true.11:                                 ; preds = %if.else
  %7 = load i32, i32* %geometry, align 4
  %and12 = and i32 %7, 16
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %if.else.21, label %if.then.14

if.then.14:                                       ; preds = %land.lhs.true.11
  %call15 = call i64 @builtin_lisp_symbol(i32 607)
  %call16 = call i64 @builtin_lisp_symbol(i32 752)
  %8 = load i32, i32* %x, align 4
  %conv17 = sext i32 %8 to i64
  %shl18 = shl i64 %conv17, 2
  %add19 = add i64 %shl18, 2
  %call20 = call i64 @list3(i64 %call15, i64 %call16, i64 %add19)
  store i64 %call20, i64* %element, align 8
  br label %if.end

if.else.21:                                       ; preds = %land.lhs.true.11, %if.else
  %call22 = call i64 @builtin_lisp_symbol(i32 607)
  %9 = load i32, i32* %x, align 4
  %conv23 = sext i32 %9 to i64
  %shl24 = shl i64 %conv23, 2
  %add25 = add i64 %shl24, 2
  %call26 = call i64 @Fcons(i64 %call22, i64 %add25)
  store i64 %call26, i64* %element, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.21, %if.then.14
  br label %if.end.27

if.end.27:                                        ; preds = %if.end, %if.then.5
  %10 = load i64, i64* %element, align 8
  %11 = load i64, i64* %result, align 8
  %call28 = call i64 @Fcons(i64 %10, i64 %11)
  store i64 %call28, i64* %result, align 8
  br label %if.end.29

if.end.29:                                        ; preds = %if.end.27, %entry
  %12 = load i32, i32* %geometry, align 4
  %and30 = and i32 %12, 2
  %tobool31 = icmp ne i32 %and30, 0
  br i1 %tobool31, label %if.then.32, label %if.end.69

if.then.32:                                       ; preds = %if.end.29
  %13 = load i32, i32* %y, align 4
  %cmp34 = icmp sge i32 %13, 0
  br i1 %cmp34, label %land.lhs.true.36, label %if.else.47

land.lhs.true.36:                                 ; preds = %if.then.32
  %14 = load i32, i32* %geometry, align 4
  %and37 = and i32 %14, 32
  %tobool38 = icmp ne i32 %and37, 0
  br i1 %tobool38, label %if.then.39, label %if.else.47

if.then.39:                                       ; preds = %land.lhs.true.36
  %call40 = call i64 @builtin_lisp_symbol(i32 928)
  %call41 = call i64 @builtin_lisp_symbol(i32 668)
  %15 = load i32, i32* %y, align 4
  %sub42 = sub nsw i32 0, %15
  %conv43 = sext i32 %sub42 to i64
  %shl44 = shl i64 %conv43, 2
  %add45 = add i64 %shl44, 2
  %call46 = call i64 @list3(i64 %call40, i64 %call41, i64 %add45)
  store i64 %call46, i64* %element33, align 8
  br label %if.end.67

if.else.47:                                       ; preds = %land.lhs.true.36, %if.then.32
  %16 = load i32, i32* %y, align 4
  %cmp48 = icmp slt i32 %16, 0
  br i1 %cmp48, label %land.lhs.true.50, label %if.else.60

land.lhs.true.50:                                 ; preds = %if.else.47
  %17 = load i32, i32* %geometry, align 4
  %and51 = and i32 %17, 32
  %tobool52 = icmp ne i32 %and51, 0
  br i1 %tobool52, label %if.else.60, label %if.then.53

if.then.53:                                       ; preds = %land.lhs.true.50
  %call54 = call i64 @builtin_lisp_symbol(i32 928)
  %call55 = call i64 @builtin_lisp_symbol(i32 752)
  %18 = load i32, i32* %y, align 4
  %conv56 = sext i32 %18 to i64
  %shl57 = shl i64 %conv56, 2
  %add58 = add i64 %shl57, 2
  %call59 = call i64 @list3(i64 %call54, i64 %call55, i64 %add58)
  store i64 %call59, i64* %element33, align 8
  br label %if.end.66

if.else.60:                                       ; preds = %land.lhs.true.50, %if.else.47
  %call61 = call i64 @builtin_lisp_symbol(i32 928)
  %19 = load i32, i32* %y, align 4
  %conv62 = sext i32 %19 to i64
  %shl63 = shl i64 %conv62, 2
  %add64 = add i64 %shl63, 2
  %call65 = call i64 @Fcons(i64 %call61, i64 %add64)
  store i64 %call65, i64* %element33, align 8
  br label %if.end.66

if.end.66:                                        ; preds = %if.else.60, %if.then.53
  br label %if.end.67

if.end.67:                                        ; preds = %if.end.66, %if.then.39
  %20 = load i64, i64* %element33, align 8
  %21 = load i64, i64* %result, align 8
  %call68 = call i64 @Fcons(i64 %20, i64 %21)
  store i64 %call68, i64* %result, align 8
  br label %if.end.69

if.end.69:                                        ; preds = %if.end.67, %if.end.29
  %22 = load i32, i32* %geometry, align 4
  %and70 = and i32 %22, 4
  %tobool71 = icmp ne i32 %and70, 0
  br i1 %tobool71, label %if.then.72, label %if.end.79

if.then.72:                                       ; preds = %if.end.69
  %call73 = call i64 @builtin_lisp_symbol(i32 1017)
  %23 = load i32, i32* %width, align 4
  %conv74 = zext i32 %23 to i64
  %shl75 = shl i64 %conv74, 2
  %add76 = add i64 %shl75, 2
  %call77 = call i64 @Fcons(i64 %call73, i64 %add76)
  %24 = load i64, i64* %result, align 8
  %call78 = call i64 @Fcons(i64 %call77, i64 %24)
  store i64 %call78, i64* %result, align 8
  br label %if.end.79

if.end.79:                                        ; preds = %if.then.72, %if.end.69
  %25 = load i32, i32* %geometry, align 4
  %and80 = and i32 %25, 8
  %tobool81 = icmp ne i32 %and80, 0
  br i1 %tobool81, label %if.then.82, label %if.end.89

if.then.82:                                       ; preds = %if.end.79
  %call83 = call i64 @builtin_lisp_symbol(i32 515)
  %26 = load i32, i32* %height, align 4
  %conv84 = zext i32 %26 to i64
  %shl85 = shl i64 %conv84, 2
  %add86 = add i64 %shl85, 2
  %call87 = call i64 @Fcons(i64 %call83, i64 %add86)
  %27 = load i64, i64* %result, align 8
  %call88 = call i64 @Fcons(i64 %call87, i64 %27)
  store i64 %call88, i64* %result, align 8
  br label %if.end.89

if.end.89:                                        ; preds = %if.then.82, %if.end.79
  %28 = load i64, i64* %result, align 8
  ret i64 %28
}

declare i32 @XParseGeometry(i8*, i32*, i32*, i32*, i32*) #1

; Function Attrs: nounwind uwtable
define i64 @x_figure_window_size(%struct.frame* %f, i64 %parms, i1 zeroext %toolbar_p, i32* %x_width, i32* %x_height) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %parms.addr = alloca i64, align 8
  %toolbar_p.addr = alloca i8, align 1
  %x_width.addr = alloca i32*, align 8
  %x_height.addr = alloca i32*, align 8
  %height = alloca i64, align 8
  %width = alloca i64, align 8
  %user_size = alloca i64, align 8
  %top = alloca i64, align 8
  %left = alloca i64, align 8
  %user_position = alloca i64, align 8
  %window_prompting = alloca i64, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  %margin = alloca i32, align 4
  %relief = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %parms, i64* %parms.addr, align 8
  %frombool = zext i1 %toolbar_p to i8
  store i8 %frombool, i8* %toolbar_p.addr, align 1
  store i32* %x_width, i32** %x_width.addr, align 8
  store i32* %x_height, i32** %x_height.addr, align 8
  store i64 0, i64* %window_prompting, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  store %struct.x_display_info* %2, %struct.x_display_info** %dpyinfo, align 8
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 59
  %4 = load i32, i32* %column_width, align 4
  %mul = mul nsw i32 80, %4
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_width = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 40
  store i32 %mul, i32* %text_width, align 4
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %column_width1 = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 59
  %7 = load i32, i32* %column_width1, align 4
  %mul2 = mul nsw i32 80, %7
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %vertical_scroll_bar_type = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 26
  %9 = bitcast i48* %vertical_scroll_bar_type to i64*
  %bf.load = load i64, i64* %9, align 8
  %bf.lshr = lshr i64 %bf.load, 30
  %bf.clear = and i64 %bf.lshr, 3
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp ne i32 %bf.cast, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_width = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 69
  %11 = load i32, i32* %config_scroll_bar_width, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %11, %cond.true ], [ 0, %cond.false ]
  %add = add nsw i32 %mul2, %cond
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_fringe_width = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 54
  %13 = load i32, i32* %left_fringe_width, align 4
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %right_fringe_width = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 55
  %15 = load i32, i32* %right_fringe_width, align 4
  %add3 = add nsw i32 %13, %15
  %add4 = add nsw i32 %add, %add3
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 51
  %17 = load i32, i32* %internal_border_width, align 4
  %mul5 = mul nsw i32 2, %17
  %add6 = add nsw i32 %add4, %mul5
  %18 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_width = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 46
  store i32 %add6, i32* %pixel_width, align 4
  %19 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_cols = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 36
  store i32 80, i32* %text_cols, align 4
  %20 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %vertical_scroll_bar_type7 = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 26
  %21 = bitcast i48* %vertical_scroll_bar_type7 to i64*
  %bf.load8 = load i64, i64* %21, align 8
  %bf.lshr9 = lshr i64 %bf.load8, 30
  %bf.clear10 = and i64 %bf.lshr9, 3
  %bf.cast11 = trunc i64 %bf.clear10 to i32
  %cmp12 = icmp ne i32 %bf.cast11, 0
  br i1 %cmp12, label %cond.true.13, label %cond.false.14

cond.true.13:                                     ; preds = %cond.end
  %22 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_cols = getelementptr inbounds %struct.frame, %struct.frame* %22, i32 0, i32 70
  %23 = load i32, i32* %config_scroll_bar_cols, align 4
  br label %cond.end.15

cond.false.14:                                    ; preds = %cond.end
  br label %cond.end.15

cond.end.15:                                      ; preds = %cond.false.14, %cond.true.13
  %cond16 = phi i32 [ %23, %cond.true.13 ], [ 0, %cond.false.14 ]
  %add17 = add nsw i32 80, %cond16
  %24 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %fringe_cols = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 56
  %25 = load i32, i32* %fringe_cols, align 4
  %add18 = add nsw i32 %add17, %25
  %26 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %total_cols = getelementptr inbounds %struct.frame, %struct.frame* %26, i32 0, i32 38
  store i32 %add18, i32* %total_cols, align 4
  %27 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %27, i32 0, i32 60
  %28 = load i32, i32* %line_height, align 4
  %mul19 = mul nsw i32 36, %28
  %29 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_height = getelementptr inbounds %struct.frame, %struct.frame* %29, i32 0, i32 41
  store i32 %mul19, i32* %text_height, align 4
  %30 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %line_height20 = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 60
  %31 = load i32, i32* %line_height20, align 4
  %mul21 = mul nsw i32 36, %31
  %32 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %32, i32 0, i32 58
  %33 = load i32, i32* %menu_bar_height, align 4
  %34 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %34, i32 0, i32 28
  %35 = load i32, i32* %tool_bar_height, align 4
  %add22 = add nsw i32 %33, %35
  %add23 = add nsw i32 %mul21, %add22
  %36 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %horizontal_scroll_bars = getelementptr inbounds %struct.frame, %struct.frame* %36, i32 0, i32 26
  %37 = bitcast i48* %horizontal_scroll_bars to i64*
  %bf.load24 = load i64, i64* %37, align 8
  %bf.lshr25 = lshr i64 %bf.load24, 32
  %bf.clear26 = and i64 %bf.lshr25, 1
  %bf.cast27 = trunc i64 %bf.clear26 to i1
  br i1 %bf.cast27, label %cond.true.28, label %cond.false.29

cond.true.28:                                     ; preds = %cond.end.15
  %38 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %38, i32 0, i32 71
  %39 = load i32, i32* %config_scroll_bar_height, align 4
  br label %cond.end.30

cond.false.29:                                    ; preds = %cond.end.15
  br label %cond.end.30

cond.end.30:                                      ; preds = %cond.false.29, %cond.true.28
  %cond31 = phi i32 [ %39, %cond.true.28 ], [ 0, %cond.false.29 ]
  %add32 = add nsw i32 %add23, %cond31
  %40 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width33 = getelementptr inbounds %struct.frame, %struct.frame* %40, i32 0, i32 51
  %41 = load i32, i32* %internal_border_width33, align 4
  %mul34 = mul nsw i32 2, %41
  %add35 = add nsw i32 %add32, %mul34
  %42 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_height = getelementptr inbounds %struct.frame, %struct.frame* %42, i32 0, i32 47
  store i32 %add35, i32* %pixel_height, align 4
  %43 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_lines = getelementptr inbounds %struct.frame, %struct.frame* %43, i32 0, i32 37
  store i32 36, i32* %text_lines, align 4
  %44 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %44, i32 0, i32 57
  %45 = load i32, i32* %menu_bar_lines, align 4
  %46 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %46, i32 0, i32 27
  %47 = load i32, i32* %tool_bar_lines, align 4
  %add36 = add nsw i32 %45, %47
  %add37 = add nsw i32 36, %add36
  %48 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %horizontal_scroll_bars38 = getelementptr inbounds %struct.frame, %struct.frame* %48, i32 0, i32 26
  %49 = bitcast i48* %horizontal_scroll_bars38 to i64*
  %bf.load39 = load i64, i64* %49, align 8
  %bf.lshr40 = lshr i64 %bf.load39, 32
  %bf.clear41 = and i64 %bf.lshr40, 1
  %bf.cast42 = trunc i64 %bf.clear41 to i1
  br i1 %bf.cast42, label %cond.true.43, label %cond.false.44

cond.true.43:                                     ; preds = %cond.end.30
  %50 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %50, i32 0, i32 72
  %51 = load i32, i32* %config_scroll_bar_lines, align 4
  br label %cond.end.45

cond.false.44:                                    ; preds = %cond.end.30
  br label %cond.end.45

cond.end.45:                                      ; preds = %cond.false.44, %cond.true.43
  %cond46 = phi i32 [ %51, %cond.true.43 ], [ 0, %cond.false.44 ]
  %add47 = add nsw i32 %add37, %cond46
  %52 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %52, i32 0, i32 39
  store i32 %add47, i32* %total_lines, align 4
  %53 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %top_pos = getelementptr inbounds %struct.frame, %struct.frame* %53, i32 0, i32 45
  store i32 0, i32* %top_pos, align 4
  %54 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_pos = getelementptr inbounds %struct.frame, %struct.frame* %54, i32 0, i32 44
  store i32 0, i32* %left_pos, align 4
  %55 = load i8, i8* %toolbar_p.addr, align 1
  %tobool = trunc i8 %55 to i1
  br i1 %tobool, label %land.lhs.true, label %if.end.76

land.lhs.true:                                    ; preds = %cond.end.45
  %56 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_lines48 = getelementptr inbounds %struct.frame, %struct.frame* %56, i32 0, i32 27
  %57 = load i32, i32* %tool_bar_lines48, align 4
  %tobool49 = icmp ne i32 %57, 0
  br i1 %tobool49, label %if.then, label %if.end.76

if.then:                                          ; preds = %land.lhs.true
  %58 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 413), align 8
  %cmp50 = icmp sge i64 %58, 0
  br i1 %cmp50, label %cond.true.51, label %cond.false.52

cond.true.51:                                     ; preds = %if.then
  %59 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 413), align 8
  br label %cond.end.53

cond.false.52:                                    ; preds = %if.then
  br label %cond.end.53

cond.end.53:                                      ; preds = %cond.false.52, %cond.true.51
  %cond54 = phi i64 [ %59, %cond.true.51 ], [ 1, %cond.false.52 ]
  %conv = trunc i64 %cond54 to i32
  store i32 %conv, i32* %relief, align 4
  %60 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 300), align 8
  %call = call zeroext i1 @RANGED_INTEGERP(i64 1, i64 %60, i64 2147483647)
  br i1 %call, label %if.then.55, label %if.else

if.then.55:                                       ; preds = %cond.end.53
  %61 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 300), align 8
  %shr = ashr i64 %61, 2
  %conv56 = trunc i64 %shr to i32
  store i32 %conv56, i32* %margin, align 4
  br label %if.end.70

if.else:                                          ; preds = %cond.end.53
  %62 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 300), align 8
  %and = and i64 %62, 7
  %conv57 = trunc i64 %and to i32
  %cmp58 = icmp eq i32 %conv57, 3
  br i1 %cmp58, label %land.lhs.true.60, label %if.else.69

land.lhs.true.60:                                 ; preds = %if.else
  %63 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 300), align 8
  %sub = sub nsw i64 %63, 3
  %64 = inttoptr i64 %sub to i8*
  %65 = bitcast i8* %64 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %65, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %66 = load i64, i64* %cdr, align 8
  %call61 = call zeroext i1 @RANGED_INTEGERP(i64 1, i64 %66, i64 2147483647)
  br i1 %call61, label %if.then.63, label %if.else.69

if.then.63:                                       ; preds = %land.lhs.true.60
  %67 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 300), align 8
  %sub64 = sub nsw i64 %67, 3
  %68 = inttoptr i64 %sub64 to i8*
  %69 = bitcast i8* %68 to %struct.Lisp_Cons*
  %u65 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %69, i32 0, i32 1
  %cdr66 = bitcast %union.anon.11* %u65 to i64*
  %70 = load i64, i64* %cdr66, align 8
  %shr67 = ashr i64 %70, 2
  %conv68 = trunc i64 %shr67 to i32
  store i32 %conv68, i32* %margin, align 4
  br label %if.end

if.else.69:                                       ; preds = %land.lhs.true.60, %if.else
  store i32 0, i32* %margin, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.69, %if.then.63
  br label %if.end.70

if.end.70:                                        ; preds = %if.end, %if.then.55
  %71 = load i32, i32* %margin, align 4
  %mul71 = mul nsw i32 2, %71
  %add72 = add nsw i32 24, %mul71
  %72 = load i32, i32* %relief, align 4
  %mul73 = mul nsw i32 2, %72
  %add74 = add nsw i32 %add72, %mul73
  %73 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_height75 = getelementptr inbounds %struct.frame, %struct.frame* %73, i32 0, i32 28
  store i32 %add74, i32* %tool_bar_height75, align 4
  br label %if.end.76

if.end.76:                                        ; preds = %if.end.70, %land.lhs.true, %cond.end.45
  %74 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %new_height = getelementptr inbounds %struct.frame, %struct.frame* %74, i32 0, i32 43
  store i32 0, i32* %new_height, align 4
  %75 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %new_width = getelementptr inbounds %struct.frame, %struct.frame* %75, i32 0, i32 42
  store i32 0, i32* %new_width, align 4
  %76 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %77 = load i64, i64* %parms.addr, align 8
  %call77 = call i64 @builtin_lisp_symbol(i32 515)
  %call78 = call i64 @x_get_arg(%struct.x_display_info* %76, i64 %77, i64 %call77, i8* null, i8* null, i32 0)
  store i64 %call78, i64* %height, align 8
  %78 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %79 = load i64, i64* %parms.addr, align 8
  %call79 = call i64 @builtin_lisp_symbol(i32 1017)
  %call80 = call i64 @x_get_arg(%struct.x_display_info* %78, i64 %79, i64 %call79, i8* null, i8* null, i32 0)
  store i64 %call80, i64* %width, align 8
  %80 = load i64, i64* %width, align 8
  %call81 = call i64 @builtin_lisp_symbol(i32 957)
  %cmp82 = icmp eq i64 %80, %call81
  br i1 %cmp82, label %lor.lhs.false, label %if.then.87

lor.lhs.false:                                    ; preds = %if.end.76
  %81 = load i64, i64* %height, align 8
  %call84 = call i64 @builtin_lisp_symbol(i32 957)
  %cmp85 = icmp eq i64 %81, %call84
  br i1 %cmp85, label %if.end.395, label %if.then.87

if.then.87:                                       ; preds = %lor.lhs.false, %if.end.76
  %82 = load i64, i64* %width, align 8
  %call88 = call i64 @builtin_lisp_symbol(i32 957)
  %cmp89 = icmp eq i64 %82, %call88
  br i1 %cmp89, label %if.end.234, label %if.then.91

if.then.91:                                       ; preds = %if.then.87
  %83 = load i64, i64* %width, align 8
  %and92 = and i64 %83, 7
  %conv93 = trunc i64 %and92 to i32
  %cmp94 = icmp eq i32 %conv93, 3
  br i1 %cmp94, label %land.lhs.true.96, label %if.else.178

land.lhs.true.96:                                 ; preds = %if.then.91
  %84 = load i64, i64* %width, align 8
  %sub97 = sub nsw i64 %84, 3
  %85 = inttoptr i64 %sub97 to i8*
  %86 = bitcast i8* %85 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %86, i32 0, i32 0
  %87 = load i64, i64* %car, align 8
  %call98 = call i64 @builtin_lisp_symbol(i32 912)
  %cmp99 = icmp eq i64 %87, %call98
  br i1 %cmp99, label %if.then.101, label %if.else.178

if.then.101:                                      ; preds = %land.lhs.true.96
  %88 = load i64, i64* %width, align 8
  %sub102 = sub nsw i64 %88, 3
  %89 = inttoptr i64 %sub102 to i8*
  %90 = bitcast i8* %89 to %struct.Lisp_Cons*
  %u103 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %90, i32 0, i32 1
  %cdr104 = bitcast %union.anon.11* %u103 to i64*
  %91 = load i64, i64* %cdr104, align 8
  %and105 = and i64 %91, 7
  %conv106 = trunc i64 %and105 to i32
  %and107 = and i32 %conv106, -5
  %cmp108 = icmp eq i32 %and107, 2
  br i1 %cmp108, label %cond.true.110, label %cond.false.111

cond.true.110:                                    ; preds = %if.then.101
  br label %cond.end.116

cond.false.111:                                   ; preds = %if.then.101
  %call112 = call i64 @builtin_lisp_symbol(i32 559)
  %92 = load i64, i64* %width, align 8
  %sub113 = sub nsw i64 %92, 3
  %93 = inttoptr i64 %sub113 to i8*
  %94 = bitcast i8* %93 to %struct.Lisp_Cons*
  %u114 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %94, i32 0, i32 1
  %cdr115 = bitcast %union.anon.11* %u114 to i64*
  %95 = load i64, i64* %cdr115, align 8
  %96 = call i64 @wrong_type_argument(i64 %call112, i64 %95) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.116

cond.end.116:                                     ; preds = %97, %cond.true.110
  %98 = load i64, i64* %width, align 8
  %sub117 = sub nsw i64 %98, 3
  %99 = inttoptr i64 %sub117 to i8*
  %100 = bitcast i8* %99 to %struct.Lisp_Cons*
  %u118 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %100, i32 0, i32 1
  %cdr119 = bitcast %union.anon.11* %u118 to i64*
  %101 = load i64, i64* %cdr119, align 8
  %shr120 = ashr i64 %101, 2
  %cmp121 = icmp slt i64 %shr120, 0
  br i1 %cmp121, label %if.then.130, label %lor.lhs.false.123

lor.lhs.false.123:                                ; preds = %cond.end.116
  %102 = load i64, i64* %width, align 8
  %sub124 = sub nsw i64 %102, 3
  %103 = inttoptr i64 %sub124 to i8*
  %104 = bitcast i8* %103 to %struct.Lisp_Cons*
  %u125 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %104, i32 0, i32 1
  %cdr126 = bitcast %union.anon.11* %u125 to i64*
  %105 = load i64, i64* %cdr126, align 8
  %shr127 = ashr i64 %105, 2
  %cmp128 = icmp sgt i64 %shr127, 2147483647
  br i1 %cmp128, label %if.then.130, label %if.end.135

if.then.130:                                      ; preds = %lor.lhs.false.123, %cond.end.116
  %call131 = call i64 @builtin_lisp_symbol(i32 177)
  %106 = load i64, i64* %width, align 8
  %sub132 = sub nsw i64 %106, 3
  %107 = inttoptr i64 %sub132 to i8*
  %108 = bitcast i8* %107 to %struct.Lisp_Cons*
  %u133 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %108, i32 0, i32 1
  %cdr134 = bitcast %union.anon.11* %u133 to i64*
  %109 = load i64, i64* %cdr134, align 8
  call void @xsignal1(i64 %call131, i64 %109) #7
  unreachable

if.end.135:                                       ; preds = %lor.lhs.false.123
  %110 = load i64, i64* %width, align 8
  %sub136 = sub nsw i64 %110, 3
  %111 = inttoptr i64 %sub136 to i8*
  %112 = bitcast i8* %111 to %struct.Lisp_Cons*
  %u137 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %112, i32 0, i32 1
  %cdr138 = bitcast %union.anon.11* %u137 to i64*
  %113 = load i64, i64* %cdr138, align 8
  %shr139 = ashr i64 %113, 2
  %conv140 = trunc i64 %shr139 to i32
  %114 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_width141 = getelementptr inbounds %struct.frame, %struct.frame* %114, i32 0, i32 40
  store i32 %conv140, i32* %text_width141, align 4
  %115 = load i64, i64* %width, align 8
  %sub142 = sub nsw i64 %115, 3
  %116 = inttoptr i64 %sub142 to i8*
  %117 = bitcast i8* %116 to %struct.Lisp_Cons*
  %u143 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %117, i32 0, i32 1
  %cdr144 = bitcast %union.anon.11* %u143 to i64*
  %118 = load i64, i64* %cdr144, align 8
  %shr145 = ashr i64 %118, 2
  %119 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %vertical_scroll_bar_type146 = getelementptr inbounds %struct.frame, %struct.frame* %119, i32 0, i32 26
  %120 = bitcast i48* %vertical_scroll_bar_type146 to i64*
  %bf.load147 = load i64, i64* %120, align 8
  %bf.lshr148 = lshr i64 %bf.load147, 30
  %bf.clear149 = and i64 %bf.lshr148, 3
  %bf.cast150 = trunc i64 %bf.clear149 to i32
  %cmp151 = icmp ne i32 %bf.cast150, 0
  br i1 %cmp151, label %cond.true.153, label %cond.false.155

cond.true.153:                                    ; preds = %if.end.135
  %121 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_width154 = getelementptr inbounds %struct.frame, %struct.frame* %121, i32 0, i32 69
  %122 = load i32, i32* %config_scroll_bar_width154, align 4
  br label %cond.end.156

cond.false.155:                                   ; preds = %if.end.135
  br label %cond.end.156

cond.end.156:                                     ; preds = %cond.false.155, %cond.true.153
  %cond157 = phi i32 [ %122, %cond.true.153 ], [ 0, %cond.false.155 ]
  %conv158 = sext i32 %cond157 to i64
  %add159 = add nsw i64 %shr145, %conv158
  %123 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_fringe_width160 = getelementptr inbounds %struct.frame, %struct.frame* %123, i32 0, i32 54
  %124 = load i32, i32* %left_fringe_width160, align 4
  %125 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %right_fringe_width161 = getelementptr inbounds %struct.frame, %struct.frame* %125, i32 0, i32 55
  %126 = load i32, i32* %right_fringe_width161, align 4
  %add162 = add nsw i32 %124, %126
  %conv163 = sext i32 %add162 to i64
  %add164 = add nsw i64 %add159, %conv163
  %127 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width165 = getelementptr inbounds %struct.frame, %struct.frame* %127, i32 0, i32 51
  %128 = load i32, i32* %internal_border_width165, align 4
  %mul166 = mul nsw i32 2, %128
  %conv167 = sext i32 %mul166 to i64
  %add168 = add nsw i64 %add164, %conv167
  %conv169 = trunc i64 %add168 to i32
  %129 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_width170 = getelementptr inbounds %struct.frame, %struct.frame* %129, i32 0, i32 46
  store i32 %conv169, i32* %pixel_width170, align 4
  %130 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %inhibit_horizontal_resize = getelementptr inbounds %struct.frame, %struct.frame* %130, i32 0, i32 26
  %131 = bitcast i48* %inhibit_horizontal_resize to i64*
  %bf.load171 = load i64, i64* %131, align 8
  %bf.clear172 = and i64 %bf.load171, -274877906945
  %bf.set = or i64 %bf.clear172, 274877906944
  store i64 %bf.set, i64* %131, align 8
  %132 = load i64, i64* %width, align 8
  %sub173 = sub nsw i64 %132, 3
  %133 = inttoptr i64 %sub173 to i8*
  %134 = bitcast i8* %133 to %struct.Lisp_Cons*
  %u174 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %134, i32 0, i32 1
  %cdr175 = bitcast %union.anon.11* %u174 to i64*
  %135 = load i64, i64* %cdr175, align 8
  %shr176 = ashr i64 %135, 2
  %conv177 = trunc i64 %shr176 to i32
  %136 = load i32*, i32** %x_width.addr, align 8
  store i32 %conv177, i32* %136, align 4
  br label %if.end.233

if.else.178:                                      ; preds = %land.lhs.true.96, %if.then.91
  %137 = load i64, i64* %width, align 8
  %and179 = and i64 %137, 7
  %conv180 = trunc i64 %and179 to i32
  %and181 = and i32 %conv180, -5
  %cmp182 = icmp eq i32 %and181, 2
  br i1 %cmp182, label %cond.true.184, label %cond.false.185

cond.true.184:                                    ; preds = %if.else.178
  br label %cond.end.187

cond.false.185:                                   ; preds = %if.else.178
  %call186 = call i64 @builtin_lisp_symbol(i32 559)
  %138 = load i64, i64* %width, align 8
  %139 = call i64 @wrong_type_argument(i64 %call186, i64 %138) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.187

cond.end.187:                                     ; preds = %140, %cond.true.184
  %141 = load i64, i64* %width, align 8
  %shr188 = ashr i64 %141, 2
  %cmp189 = icmp slt i64 %shr188, 0
  br i1 %cmp189, label %if.then.195, label %lor.lhs.false.191

lor.lhs.false.191:                                ; preds = %cond.end.187
  %142 = load i64, i64* %width, align 8
  %shr192 = ashr i64 %142, 2
  %cmp193 = icmp sgt i64 %shr192, 2147483647
  br i1 %cmp193, label %if.then.195, label %if.end.197

if.then.195:                                      ; preds = %lor.lhs.false.191, %cond.end.187
  %call196 = call i64 @builtin_lisp_symbol(i32 177)
  %143 = load i64, i64* %width, align 8
  call void @xsignal1(i64 %call196, i64 %143) #7
  unreachable

if.end.197:                                       ; preds = %lor.lhs.false.191
  %144 = load i64, i64* %width, align 8
  %shr198 = ashr i64 %144, 2
  %145 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %column_width199 = getelementptr inbounds %struct.frame, %struct.frame* %145, i32 0, i32 59
  %146 = load i32, i32* %column_width199, align 4
  %conv200 = sext i32 %146 to i64
  %mul201 = mul nsw i64 %shr198, %conv200
  %conv202 = trunc i64 %mul201 to i32
  %147 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_width203 = getelementptr inbounds %struct.frame, %struct.frame* %147, i32 0, i32 40
  store i32 %conv202, i32* %text_width203, align 4
  %148 = load i64, i64* %width, align 8
  %shr204 = ashr i64 %148, 2
  %149 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %column_width205 = getelementptr inbounds %struct.frame, %struct.frame* %149, i32 0, i32 59
  %150 = load i32, i32* %column_width205, align 4
  %conv206 = sext i32 %150 to i64
  %mul207 = mul nsw i64 %shr204, %conv206
  %151 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %vertical_scroll_bar_type208 = getelementptr inbounds %struct.frame, %struct.frame* %151, i32 0, i32 26
  %152 = bitcast i48* %vertical_scroll_bar_type208 to i64*
  %bf.load209 = load i64, i64* %152, align 8
  %bf.lshr210 = lshr i64 %bf.load209, 30
  %bf.clear211 = and i64 %bf.lshr210, 3
  %bf.cast212 = trunc i64 %bf.clear211 to i32
  %cmp213 = icmp ne i32 %bf.cast212, 0
  br i1 %cmp213, label %cond.true.215, label %cond.false.217

cond.true.215:                                    ; preds = %if.end.197
  %153 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_width216 = getelementptr inbounds %struct.frame, %struct.frame* %153, i32 0, i32 69
  %154 = load i32, i32* %config_scroll_bar_width216, align 4
  br label %cond.end.218

cond.false.217:                                   ; preds = %if.end.197
  br label %cond.end.218

cond.end.218:                                     ; preds = %cond.false.217, %cond.true.215
  %cond219 = phi i32 [ %154, %cond.true.215 ], [ 0, %cond.false.217 ]
  %conv220 = sext i32 %cond219 to i64
  %add221 = add nsw i64 %mul207, %conv220
  %155 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_fringe_width222 = getelementptr inbounds %struct.frame, %struct.frame* %155, i32 0, i32 54
  %156 = load i32, i32* %left_fringe_width222, align 4
  %157 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %right_fringe_width223 = getelementptr inbounds %struct.frame, %struct.frame* %157, i32 0, i32 55
  %158 = load i32, i32* %right_fringe_width223, align 4
  %add224 = add nsw i32 %156, %158
  %conv225 = sext i32 %add224 to i64
  %add226 = add nsw i64 %add221, %conv225
  %159 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width227 = getelementptr inbounds %struct.frame, %struct.frame* %159, i32 0, i32 51
  %160 = load i32, i32* %internal_border_width227, align 4
  %mul228 = mul nsw i32 2, %160
  %conv229 = sext i32 %mul228 to i64
  %add230 = add nsw i64 %add226, %conv229
  %conv231 = trunc i64 %add230 to i32
  %161 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_width232 = getelementptr inbounds %struct.frame, %struct.frame* %161, i32 0, i32 46
  store i32 %conv231, i32* %pixel_width232, align 4
  br label %if.end.233

if.end.233:                                       ; preds = %cond.end.218, %cond.end.156
  br label %if.end.234

if.end.234:                                       ; preds = %if.end.233, %if.then.87
  %162 = load i64, i64* %height, align 8
  %call235 = call i64 @builtin_lisp_symbol(i32 957)
  %cmp236 = icmp eq i64 %162, %call235
  br i1 %cmp236, label %if.end.381, label %if.then.238

if.then.238:                                      ; preds = %if.end.234
  %163 = load i64, i64* %height, align 8
  %and239 = and i64 %163, 7
  %conv240 = trunc i64 %and239 to i32
  %cmp241 = icmp eq i32 %conv240, 3
  br i1 %cmp241, label %land.lhs.true.243, label %if.else.326

land.lhs.true.243:                                ; preds = %if.then.238
  %164 = load i64, i64* %height, align 8
  %sub244 = sub nsw i64 %164, 3
  %165 = inttoptr i64 %sub244 to i8*
  %166 = bitcast i8* %165 to %struct.Lisp_Cons*
  %car245 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %166, i32 0, i32 0
  %167 = load i64, i64* %car245, align 8
  %call246 = call i64 @builtin_lisp_symbol(i32 912)
  %cmp247 = icmp eq i64 %167, %call246
  br i1 %cmp247, label %if.then.249, label %if.else.326

if.then.249:                                      ; preds = %land.lhs.true.243
  %168 = load i64, i64* %height, align 8
  %sub250 = sub nsw i64 %168, 3
  %169 = inttoptr i64 %sub250 to i8*
  %170 = bitcast i8* %169 to %struct.Lisp_Cons*
  %u251 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %170, i32 0, i32 1
  %cdr252 = bitcast %union.anon.11* %u251 to i64*
  %171 = load i64, i64* %cdr252, align 8
  %and253 = and i64 %171, 7
  %conv254 = trunc i64 %and253 to i32
  %and255 = and i32 %conv254, -5
  %cmp256 = icmp eq i32 %and255, 2
  br i1 %cmp256, label %cond.true.258, label %cond.false.259

cond.true.258:                                    ; preds = %if.then.249
  br label %cond.end.264

cond.false.259:                                   ; preds = %if.then.249
  %call260 = call i64 @builtin_lisp_symbol(i32 559)
  %172 = load i64, i64* %height, align 8
  %sub261 = sub nsw i64 %172, 3
  %173 = inttoptr i64 %sub261 to i8*
  %174 = bitcast i8* %173 to %struct.Lisp_Cons*
  %u262 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %174, i32 0, i32 1
  %cdr263 = bitcast %union.anon.11* %u262 to i64*
  %175 = load i64, i64* %cdr263, align 8
  %176 = call i64 @wrong_type_argument(i64 %call260, i64 %175) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.264

cond.end.264:                                     ; preds = %177, %cond.true.258
  %178 = load i64, i64* %height, align 8
  %sub265 = sub nsw i64 %178, 3
  %179 = inttoptr i64 %sub265 to i8*
  %180 = bitcast i8* %179 to %struct.Lisp_Cons*
  %u266 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %180, i32 0, i32 1
  %cdr267 = bitcast %union.anon.11* %u266 to i64*
  %181 = load i64, i64* %cdr267, align 8
  %shr268 = ashr i64 %181, 2
  %cmp269 = icmp slt i64 %shr268, 0
  br i1 %cmp269, label %if.then.278, label %lor.lhs.false.271

lor.lhs.false.271:                                ; preds = %cond.end.264
  %182 = load i64, i64* %height, align 8
  %sub272 = sub nsw i64 %182, 3
  %183 = inttoptr i64 %sub272 to i8*
  %184 = bitcast i8* %183 to %struct.Lisp_Cons*
  %u273 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %184, i32 0, i32 1
  %cdr274 = bitcast %union.anon.11* %u273 to i64*
  %185 = load i64, i64* %cdr274, align 8
  %shr275 = ashr i64 %185, 2
  %cmp276 = icmp sgt i64 %shr275, 2147483647
  br i1 %cmp276, label %if.then.278, label %if.end.283

if.then.278:                                      ; preds = %lor.lhs.false.271, %cond.end.264
  %call279 = call i64 @builtin_lisp_symbol(i32 177)
  %186 = load i64, i64* %height, align 8
  %sub280 = sub nsw i64 %186, 3
  %187 = inttoptr i64 %sub280 to i8*
  %188 = bitcast i8* %187 to %struct.Lisp_Cons*
  %u281 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %188, i32 0, i32 1
  %cdr282 = bitcast %union.anon.11* %u281 to i64*
  %189 = load i64, i64* %cdr282, align 8
  call void @xsignal1(i64 %call279, i64 %189) #7
  unreachable

if.end.283:                                       ; preds = %lor.lhs.false.271
  %190 = load i64, i64* %height, align 8
  %sub284 = sub nsw i64 %190, 3
  %191 = inttoptr i64 %sub284 to i8*
  %192 = bitcast i8* %191 to %struct.Lisp_Cons*
  %u285 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %192, i32 0, i32 1
  %cdr286 = bitcast %union.anon.11* %u285 to i64*
  %193 = load i64, i64* %cdr286, align 8
  %shr287 = ashr i64 %193, 2
  %conv288 = trunc i64 %shr287 to i32
  %194 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_height289 = getelementptr inbounds %struct.frame, %struct.frame* %194, i32 0, i32 41
  store i32 %conv288, i32* %text_height289, align 4
  %195 = load i64, i64* %height, align 8
  %sub290 = sub nsw i64 %195, 3
  %196 = inttoptr i64 %sub290 to i8*
  %197 = bitcast i8* %196 to %struct.Lisp_Cons*
  %u291 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %197, i32 0, i32 1
  %cdr292 = bitcast %union.anon.11* %u291 to i64*
  %198 = load i64, i64* %cdr292, align 8
  %shr293 = ashr i64 %198, 2
  %199 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_height294 = getelementptr inbounds %struct.frame, %struct.frame* %199, i32 0, i32 58
  %200 = load i32, i32* %menu_bar_height294, align 4
  %201 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_height295 = getelementptr inbounds %struct.frame, %struct.frame* %201, i32 0, i32 28
  %202 = load i32, i32* %tool_bar_height295, align 4
  %add296 = add nsw i32 %200, %202
  %conv297 = sext i32 %add296 to i64
  %add298 = add nsw i64 %shr293, %conv297
  %203 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %horizontal_scroll_bars299 = getelementptr inbounds %struct.frame, %struct.frame* %203, i32 0, i32 26
  %204 = bitcast i48* %horizontal_scroll_bars299 to i64*
  %bf.load300 = load i64, i64* %204, align 8
  %bf.lshr301 = lshr i64 %bf.load300, 32
  %bf.clear302 = and i64 %bf.lshr301, 1
  %bf.cast303 = trunc i64 %bf.clear302 to i1
  br i1 %bf.cast303, label %cond.true.305, label %cond.false.307

cond.true.305:                                    ; preds = %if.end.283
  %205 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_height306 = getelementptr inbounds %struct.frame, %struct.frame* %205, i32 0, i32 71
  %206 = load i32, i32* %config_scroll_bar_height306, align 4
  br label %cond.end.308

cond.false.307:                                   ; preds = %if.end.283
  br label %cond.end.308

cond.end.308:                                     ; preds = %cond.false.307, %cond.true.305
  %cond309 = phi i32 [ %206, %cond.true.305 ], [ 0, %cond.false.307 ]
  %conv310 = sext i32 %cond309 to i64
  %add311 = add nsw i64 %add298, %conv310
  %207 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width312 = getelementptr inbounds %struct.frame, %struct.frame* %207, i32 0, i32 51
  %208 = load i32, i32* %internal_border_width312, align 4
  %mul313 = mul nsw i32 2, %208
  %conv314 = sext i32 %mul313 to i64
  %add315 = add nsw i64 %add311, %conv314
  %conv316 = trunc i64 %add315 to i32
  %209 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_height317 = getelementptr inbounds %struct.frame, %struct.frame* %209, i32 0, i32 47
  store i32 %conv316, i32* %pixel_height317, align 4
  %210 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %inhibit_vertical_resize = getelementptr inbounds %struct.frame, %struct.frame* %210, i32 0, i32 26
  %211 = bitcast i48* %inhibit_vertical_resize to i64*
  %bf.load318 = load i64, i64* %211, align 8
  %bf.clear319 = and i64 %bf.load318, -549755813889
  %bf.set320 = or i64 %bf.clear319, 549755813888
  store i64 %bf.set320, i64* %211, align 8
  %212 = load i64, i64* %height, align 8
  %sub321 = sub nsw i64 %212, 3
  %213 = inttoptr i64 %sub321 to i8*
  %214 = bitcast i8* %213 to %struct.Lisp_Cons*
  %u322 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %214, i32 0, i32 1
  %cdr323 = bitcast %union.anon.11* %u322 to i64*
  %215 = load i64, i64* %cdr323, align 8
  %shr324 = ashr i64 %215, 2
  %conv325 = trunc i64 %shr324 to i32
  %216 = load i32*, i32** %x_height.addr, align 8
  store i32 %conv325, i32* %216, align 4
  br label %if.end.380

if.else.326:                                      ; preds = %land.lhs.true.243, %if.then.238
  %217 = load i64, i64* %height, align 8
  %and327 = and i64 %217, 7
  %conv328 = trunc i64 %and327 to i32
  %and329 = and i32 %conv328, -5
  %cmp330 = icmp eq i32 %and329, 2
  br i1 %cmp330, label %cond.true.332, label %cond.false.333

cond.true.332:                                    ; preds = %if.else.326
  br label %cond.end.335

cond.false.333:                                   ; preds = %if.else.326
  %call334 = call i64 @builtin_lisp_symbol(i32 559)
  %218 = load i64, i64* %height, align 8
  %219 = call i64 @wrong_type_argument(i64 %call334, i64 %218) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.335

cond.end.335:                                     ; preds = %220, %cond.true.332
  %221 = load i64, i64* %height, align 8
  %shr336 = ashr i64 %221, 2
  %cmp337 = icmp slt i64 %shr336, 0
  br i1 %cmp337, label %if.then.343, label %lor.lhs.false.339

lor.lhs.false.339:                                ; preds = %cond.end.335
  %222 = load i64, i64* %height, align 8
  %shr340 = ashr i64 %222, 2
  %cmp341 = icmp sgt i64 %shr340, 2147483647
  br i1 %cmp341, label %if.then.343, label %if.end.345

if.then.343:                                      ; preds = %lor.lhs.false.339, %cond.end.335
  %call344 = call i64 @builtin_lisp_symbol(i32 177)
  %223 = load i64, i64* %height, align 8
  call void @xsignal1(i64 %call344, i64 %223) #7
  unreachable

if.end.345:                                       ; preds = %lor.lhs.false.339
  %224 = load i64, i64* %height, align 8
  %shr346 = ashr i64 %224, 2
  %225 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %line_height347 = getelementptr inbounds %struct.frame, %struct.frame* %225, i32 0, i32 60
  %226 = load i32, i32* %line_height347, align 4
  %conv348 = sext i32 %226 to i64
  %mul349 = mul nsw i64 %shr346, %conv348
  %conv350 = trunc i64 %mul349 to i32
  %227 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_height351 = getelementptr inbounds %struct.frame, %struct.frame* %227, i32 0, i32 41
  store i32 %conv350, i32* %text_height351, align 4
  %228 = load i64, i64* %height, align 8
  %shr352 = ashr i64 %228, 2
  %229 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %line_height353 = getelementptr inbounds %struct.frame, %struct.frame* %229, i32 0, i32 60
  %230 = load i32, i32* %line_height353, align 4
  %conv354 = sext i32 %230 to i64
  %mul355 = mul nsw i64 %shr352, %conv354
  %231 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_height356 = getelementptr inbounds %struct.frame, %struct.frame* %231, i32 0, i32 58
  %232 = load i32, i32* %menu_bar_height356, align 4
  %233 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_height357 = getelementptr inbounds %struct.frame, %struct.frame* %233, i32 0, i32 28
  %234 = load i32, i32* %tool_bar_height357, align 4
  %add358 = add nsw i32 %232, %234
  %conv359 = sext i32 %add358 to i64
  %add360 = add nsw i64 %mul355, %conv359
  %235 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %horizontal_scroll_bars361 = getelementptr inbounds %struct.frame, %struct.frame* %235, i32 0, i32 26
  %236 = bitcast i48* %horizontal_scroll_bars361 to i64*
  %bf.load362 = load i64, i64* %236, align 8
  %bf.lshr363 = lshr i64 %bf.load362, 32
  %bf.clear364 = and i64 %bf.lshr363, 1
  %bf.cast365 = trunc i64 %bf.clear364 to i1
  br i1 %bf.cast365, label %cond.true.367, label %cond.false.369

cond.true.367:                                    ; preds = %if.end.345
  %237 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_height368 = getelementptr inbounds %struct.frame, %struct.frame* %237, i32 0, i32 71
  %238 = load i32, i32* %config_scroll_bar_height368, align 4
  br label %cond.end.370

cond.false.369:                                   ; preds = %if.end.345
  br label %cond.end.370

cond.end.370:                                     ; preds = %cond.false.369, %cond.true.367
  %cond371 = phi i32 [ %238, %cond.true.367 ], [ 0, %cond.false.369 ]
  %conv372 = sext i32 %cond371 to i64
  %add373 = add nsw i64 %add360, %conv372
  %239 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width374 = getelementptr inbounds %struct.frame, %struct.frame* %239, i32 0, i32 51
  %240 = load i32, i32* %internal_border_width374, align 4
  %mul375 = mul nsw i32 2, %240
  %conv376 = sext i32 %mul375 to i64
  %add377 = add nsw i64 %add373, %conv376
  %conv378 = trunc i64 %add377 to i32
  %241 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_height379 = getelementptr inbounds %struct.frame, %struct.frame* %241, i32 0, i32 47
  store i32 %conv378, i32* %pixel_height379, align 4
  br label %if.end.380

if.end.380:                                       ; preds = %cond.end.370, %cond.end.308
  br label %if.end.381

if.end.381:                                       ; preds = %if.end.380, %if.end.234
  %242 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %243 = load i64, i64* %parms.addr, align 8
  %call382 = call i64 @builtin_lisp_symbol(i32 985)
  %call383 = call i64 @x_get_arg(%struct.x_display_info* %242, i64 %243, i64 %call382, i8* null, i8* null, i32 0)
  store i64 %call383, i64* %user_size, align 8
  %244 = load i64, i64* %user_size, align 8
  %call384 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp385 = icmp eq i64 %244, %call384
  br i1 %cmp385, label %if.else.392, label %land.lhs.true.387

land.lhs.true.387:                                ; preds = %if.end.381
  %245 = load i64, i64* %user_size, align 8
  %call388 = call i64 @builtin_lisp_symbol(i32 957)
  %cmp389 = icmp eq i64 %245, %call388
  br i1 %cmp389, label %if.else.392, label %if.then.391

if.then.391:                                      ; preds = %land.lhs.true.387
  %246 = load i64, i64* %window_prompting, align 8
  %or = or i64 %246, 2
  store i64 %or, i64* %window_prompting, align 8
  br label %if.end.394

if.else.392:                                      ; preds = %land.lhs.true.387, %if.end.381
  %247 = load i64, i64* %window_prompting, align 8
  %or393 = or i64 %247, 8
  store i64 %or393, i64* %window_prompting, align 8
  br label %if.end.394

if.end.394:                                       ; preds = %if.else.392, %if.then.391
  br label %if.end.395

if.end.395:                                       ; preds = %if.end.394, %lor.lhs.false
  %248 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %249 = load i64, i64* %parms.addr, align 8
  %call396 = call i64 @builtin_lisp_symbol(i32 928)
  %call397 = call i64 @x_get_arg(%struct.x_display_info* %248, i64 %249, i64 %call396, i8* null, i8* null, i32 0)
  store i64 %call397, i64* %top, align 8
  %250 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %251 = load i64, i64* %parms.addr, align 8
  %call398 = call i64 @builtin_lisp_symbol(i32 607)
  %call399 = call i64 @x_get_arg(%struct.x_display_info* %250, i64 %251, i64 %call398, i8* null, i8* null, i32 0)
  store i64 %call399, i64* %left, align 8
  %252 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %253 = load i64, i64* %parms.addr, align 8
  %call400 = call i64 @builtin_lisp_symbol(i32 982)
  %call401 = call i64 @x_get_arg(%struct.x_display_info* %252, i64 %253, i64 %call400, i8* null, i8* null, i32 0)
  store i64 %call401, i64* %user_position, align 8
  %254 = load i64, i64* %top, align 8
  %call402 = call i64 @builtin_lisp_symbol(i32 957)
  %cmp403 = icmp eq i64 %254, %call402
  br i1 %cmp403, label %lor.lhs.false.405, label %if.then.409

lor.lhs.false.405:                                ; preds = %if.end.395
  %255 = load i64, i64* %left, align 8
  %call406 = call i64 @builtin_lisp_symbol(i32 957)
  %cmp407 = icmp eq i64 %255, %call406
  br i1 %cmp407, label %if.end.726, label %if.then.409

if.then.409:                                      ; preds = %lor.lhs.false.405, %if.end.395
  %256 = load i64, i64* %top, align 8
  %call410 = call i64 @builtin_lisp_symbol(i32 668)
  %cmp411 = icmp eq i64 %256, %call410
  br i1 %cmp411, label %if.then.413, label %if.else.416

if.then.413:                                      ; preds = %if.then.409
  %257 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %top_pos414 = getelementptr inbounds %struct.frame, %struct.frame* %257, i32 0, i32 45
  store i32 0, i32* %top_pos414, align 4
  %258 = load i64, i64* %window_prompting, align 8
  %or415 = or i64 %258, 32
  store i64 %or415, i64* %window_prompting, align 8
  br label %if.end.560

if.else.416:                                      ; preds = %if.then.409
  %259 = load i64, i64* %top, align 8
  %and417 = and i64 %259, 7
  %conv418 = trunc i64 %and417 to i32
  %cmp419 = icmp eq i32 %conv418, 3
  br i1 %cmp419, label %land.lhs.true.421, label %if.else.454

land.lhs.true.421:                                ; preds = %if.else.416
  %260 = load i64, i64* %top, align 8
  %sub422 = sub nsw i64 %260, 3
  %261 = inttoptr i64 %sub422 to i8*
  %262 = bitcast i8* %261 to %struct.Lisp_Cons*
  %car423 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %262, i32 0, i32 0
  %263 = load i64, i64* %car423, align 8
  %call424 = call i64 @builtin_lisp_symbol(i32 668)
  %cmp425 = icmp eq i64 %263, %call424
  br i1 %cmp425, label %land.lhs.true.427, label %if.else.454

land.lhs.true.427:                                ; preds = %land.lhs.true.421
  %264 = load i64, i64* %top, align 8
  %sub428 = sub nsw i64 %264, 3
  %265 = inttoptr i64 %sub428 to i8*
  %266 = bitcast i8* %265 to %struct.Lisp_Cons*
  %u429 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %266, i32 0, i32 1
  %cdr430 = bitcast %union.anon.11* %u429 to i64*
  %267 = load i64, i64* %cdr430, align 8
  %and431 = and i64 %267, 7
  %conv432 = trunc i64 %and431 to i32
  %cmp433 = icmp eq i32 %conv432, 3
  br i1 %cmp433, label %land.lhs.true.435, label %if.else.454

land.lhs.true.435:                                ; preds = %land.lhs.true.427
  %268 = load i64, i64* %top, align 8
  %sub436 = sub nsw i64 %268, 3
  %269 = inttoptr i64 %sub436 to i8*
  %270 = bitcast i8* %269 to %struct.Lisp_Cons*
  %u437 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %270, i32 0, i32 1
  %cdr438 = bitcast %union.anon.11* %u437 to i64*
  %271 = load i64, i64* %cdr438, align 8
  %sub439 = sub nsw i64 %271, 3
  %272 = inttoptr i64 %sub439 to i8*
  %273 = bitcast i8* %272 to %struct.Lisp_Cons*
  %car440 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %273, i32 0, i32 0
  %274 = load i64, i64* %car440, align 8
  %call441 = call zeroext i1 @RANGED_INTEGERP(i64 -2147483647, i64 %274, i64 2147483647)
  br i1 %call441, label %if.then.443, label %if.else.454

if.then.443:                                      ; preds = %land.lhs.true.435
  %275 = load i64, i64* %top, align 8
  %sub444 = sub nsw i64 %275, 3
  %276 = inttoptr i64 %sub444 to i8*
  %277 = bitcast i8* %276 to %struct.Lisp_Cons*
  %u445 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %277, i32 0, i32 1
  %cdr446 = bitcast %union.anon.11* %u445 to i64*
  %278 = load i64, i64* %cdr446, align 8
  %sub447 = sub nsw i64 %278, 3
  %279 = inttoptr i64 %sub447 to i8*
  %280 = bitcast i8* %279 to %struct.Lisp_Cons*
  %car448 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %280, i32 0, i32 0
  %281 = load i64, i64* %car448, align 8
  %shr449 = ashr i64 %281, 2
  %sub450 = sub nsw i64 0, %shr449
  %conv451 = trunc i64 %sub450 to i32
  %282 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %top_pos452 = getelementptr inbounds %struct.frame, %struct.frame* %282, i32 0, i32 45
  store i32 %conv451, i32* %top_pos452, align 4
  %283 = load i64, i64* %window_prompting, align 8
  %or453 = or i64 %283, 32
  store i64 %or453, i64* %window_prompting, align 8
  br label %if.end.559

if.else.454:                                      ; preds = %land.lhs.true.435, %land.lhs.true.427, %land.lhs.true.421, %if.else.416
  %284 = load i64, i64* %top, align 8
  %and455 = and i64 %284, 7
  %conv456 = trunc i64 %and455 to i32
  %cmp457 = icmp eq i32 %conv456, 3
  br i1 %cmp457, label %land.lhs.true.459, label %if.else.521

land.lhs.true.459:                                ; preds = %if.else.454
  %285 = load i64, i64* %top, align 8
  %sub460 = sub nsw i64 %285, 3
  %286 = inttoptr i64 %sub460 to i8*
  %287 = bitcast i8* %286 to %struct.Lisp_Cons*
  %car461 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %287, i32 0, i32 0
  %288 = load i64, i64* %car461, align 8
  %call462 = call i64 @builtin_lisp_symbol(i32 752)
  %cmp463 = icmp eq i64 %288, %call462
  br i1 %cmp463, label %land.lhs.true.465, label %if.else.521

land.lhs.true.465:                                ; preds = %land.lhs.true.459
  %289 = load i64, i64* %top, align 8
  %sub466 = sub nsw i64 %289, 3
  %290 = inttoptr i64 %sub466 to i8*
  %291 = bitcast i8* %290 to %struct.Lisp_Cons*
  %u467 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %291, i32 0, i32 1
  %cdr468 = bitcast %union.anon.11* %u467 to i64*
  %292 = load i64, i64* %cdr468, align 8
  %and469 = and i64 %292, 7
  %conv470 = trunc i64 %and469 to i32
  %cmp471 = icmp eq i32 %conv470, 3
  br i1 %cmp471, label %land.lhs.true.473, label %if.else.521

land.lhs.true.473:                                ; preds = %land.lhs.true.465
  %293 = load i64, i64* %top, align 8
  %sub474 = sub nsw i64 %293, 3
  %294 = inttoptr i64 %sub474 to i8*
  %295 = bitcast i8* %294 to %struct.Lisp_Cons*
  %u475 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %295, i32 0, i32 1
  %cdr476 = bitcast %union.anon.11* %u475 to i64*
  %296 = load i64, i64* %cdr476, align 8
  %sub477 = sub nsw i64 %296, 3
  %297 = inttoptr i64 %sub477 to i8*
  %298 = bitcast i8* %297 to %struct.Lisp_Cons*
  %car478 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %298, i32 0, i32 0
  %299 = load i64, i64* %car478, align 8
  %and479 = and i64 %299, 7
  %conv480 = trunc i64 %and479 to i32
  %and481 = and i32 %conv480, -5
  %cmp482 = icmp eq i32 %and481, 2
  br i1 %cmp482, label %land.lhs.true.484, label %if.else.521

land.lhs.true.484:                                ; preds = %land.lhs.true.473
  br i1 false, label %cond.false.494, label %cond.true.485

cond.true.485:                                    ; preds = %land.lhs.true.484
  %300 = load i64, i64* %top, align 8
  %sub486 = sub nsw i64 %300, 3
  %301 = inttoptr i64 %sub486 to i8*
  %302 = bitcast i8* %301 to %struct.Lisp_Cons*
  %u487 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %302, i32 0, i32 1
  %cdr488 = bitcast %union.anon.11* %u487 to i64*
  %303 = load i64, i64* %cdr488, align 8
  %sub489 = sub nsw i64 %303, 3
  %304 = inttoptr i64 %sub489 to i8*
  %305 = bitcast i8* %304 to %struct.Lisp_Cons*
  %car490 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %305, i32 0, i32 0
  %306 = load i64, i64* %car490, align 8
  %shr491 = ashr i64 %306, 2
  %cmp492 = icmp sle i64 -2147483648, %shr491
  br i1 %cmp492, label %land.lhs.true.503, label %if.else.521

cond.false.494:                                   ; preds = %land.lhs.true.484
  %307 = load i64, i64* %top, align 8
  %sub495 = sub nsw i64 %307, 3
  %308 = inttoptr i64 %sub495 to i8*
  %309 = bitcast i8* %308 to %struct.Lisp_Cons*
  %u496 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %309, i32 0, i32 1
  %cdr497 = bitcast %union.anon.11* %u496 to i64*
  %310 = load i64, i64* %cdr497, align 8
  %sub498 = sub nsw i64 %310, 3
  %311 = inttoptr i64 %sub498 to i8*
  %312 = bitcast i8* %311 to %struct.Lisp_Cons*
  %car499 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %312, i32 0, i32 0
  %313 = load i64, i64* %car499, align 8
  %shr500 = ashr i64 %313, 2
  %cmp501 = icmp sle i64 0, %shr500
  br i1 %cmp501, label %land.lhs.true.503, label %if.else.521

land.lhs.true.503:                                ; preds = %cond.false.494, %cond.true.485
  %314 = load i64, i64* %top, align 8
  %sub504 = sub nsw i64 %314, 3
  %315 = inttoptr i64 %sub504 to i8*
  %316 = bitcast i8* %315 to %struct.Lisp_Cons*
  %u505 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %316, i32 0, i32 1
  %cdr506 = bitcast %union.anon.11* %u505 to i64*
  %317 = load i64, i64* %cdr506, align 8
  %sub507 = sub nsw i64 %317, 3
  %318 = inttoptr i64 %sub507 to i8*
  %319 = bitcast i8* %318 to %struct.Lisp_Cons*
  %car508 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %319, i32 0, i32 0
  %320 = load i64, i64* %car508, align 8
  %shr509 = ashr i64 %320, 2
  %cmp510 = icmp sle i64 %shr509, 2147483647
  br i1 %cmp510, label %if.then.512, label %if.else.521

if.then.512:                                      ; preds = %land.lhs.true.503
  %321 = load i64, i64* %top, align 8
  %sub513 = sub nsw i64 %321, 3
  %322 = inttoptr i64 %sub513 to i8*
  %323 = bitcast i8* %322 to %struct.Lisp_Cons*
  %u514 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %323, i32 0, i32 1
  %cdr515 = bitcast %union.anon.11* %u514 to i64*
  %324 = load i64, i64* %cdr515, align 8
  %sub516 = sub nsw i64 %324, 3
  %325 = inttoptr i64 %sub516 to i8*
  %326 = bitcast i8* %325 to %struct.Lisp_Cons*
  %car517 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %326, i32 0, i32 0
  %327 = load i64, i64* %car517, align 8
  %shr518 = ashr i64 %327, 2
  %conv519 = trunc i64 %shr518 to i32
  %328 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %top_pos520 = getelementptr inbounds %struct.frame, %struct.frame* %328, i32 0, i32 45
  store i32 %conv519, i32* %top_pos520, align 4
  br label %if.end.558

if.else.521:                                      ; preds = %land.lhs.true.503, %cond.false.494, %cond.true.485, %land.lhs.true.473, %land.lhs.true.465, %land.lhs.true.459, %if.else.454
  %329 = load i64, i64* %top, align 8
  %call522 = call i64 @builtin_lisp_symbol(i32 957)
  %cmp523 = icmp eq i64 %329, %call522
  br i1 %cmp523, label %if.then.525, label %if.else.527

if.then.525:                                      ; preds = %if.else.521
  %330 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %top_pos526 = getelementptr inbounds %struct.frame, %struct.frame* %330, i32 0, i32 45
  store i32 0, i32* %top_pos526, align 4
  br label %if.end.557

if.else.527:                                      ; preds = %if.else.521
  br label %do.body

do.body:                                          ; preds = %if.else.527
  br label %do.body.528

do.body.528:                                      ; preds = %do.body
  %331 = load i64, i64* %top, align 8
  %and529 = and i64 %331, 7
  %conv530 = trunc i64 %and529 to i32
  %and531 = and i32 %conv530, -5
  %cmp532 = icmp eq i32 %and531, 2
  br i1 %cmp532, label %cond.true.534, label %cond.false.535

cond.true.534:                                    ; preds = %do.body.528
  br label %cond.end.537

cond.false.535:                                   ; preds = %do.body.528
  %call536 = call i64 @builtin_lisp_symbol(i32 559)
  %332 = load i64, i64* %top, align 8
  %333 = call i64 @wrong_type_argument(i64 %call536, i64 %332) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.537

cond.end.537:                                     ; preds = %334, %cond.true.534
  %335 = load i64, i64* %top, align 8
  %shr538 = ashr i64 %335, 2
  %cmp539 = icmp sle i64 -2147483648, %shr538
  br i1 %cmp539, label %land.lhs.true.541, label %if.then.545

land.lhs.true.541:                                ; preds = %cond.end.537
  %336 = load i64, i64* %top, align 8
  %shr542 = ashr i64 %336, 2
  %cmp543 = icmp sle i64 %shr542, 2147483647
  br i1 %cmp543, label %if.end.546, label %if.then.545

if.then.545:                                      ; preds = %land.lhs.true.541, %cond.end.537
  %337 = load i64, i64* %top, align 8
  call void @args_out_of_range_3(i64 %337, i64 -8589934590, i64 8589934590) #7
  unreachable

if.end.546:                                       ; preds = %land.lhs.true.541
  br label %do.end

do.end:                                           ; preds = %if.end.546
  br label %do.end.547

do.end.547:                                       ; preds = %do.end
  %338 = load i64, i64* %top, align 8
  %shr548 = ashr i64 %338, 2
  %conv549 = trunc i64 %shr548 to i32
  %339 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %top_pos550 = getelementptr inbounds %struct.frame, %struct.frame* %339, i32 0, i32 45
  store i32 %conv549, i32* %top_pos550, align 4
  %340 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %top_pos551 = getelementptr inbounds %struct.frame, %struct.frame* %340, i32 0, i32 45
  %341 = load i32, i32* %top_pos551, align 4
  %cmp552 = icmp slt i32 %341, 0
  br i1 %cmp552, label %if.then.554, label %if.end.556

if.then.554:                                      ; preds = %do.end.547
  %342 = load i64, i64* %window_prompting, align 8
  %or555 = or i64 %342, 32
  store i64 %or555, i64* %window_prompting, align 8
  br label %if.end.556

if.end.556:                                       ; preds = %if.then.554, %do.end.547
  br label %if.end.557

if.end.557:                                       ; preds = %if.end.556, %if.then.525
  br label %if.end.558

if.end.558:                                       ; preds = %if.end.557, %if.then.512
  br label %if.end.559

if.end.559:                                       ; preds = %if.end.558, %if.then.443
  br label %if.end.560

if.end.560:                                       ; preds = %if.end.559, %if.then.413
  %343 = load i64, i64* %left, align 8
  %call561 = call i64 @builtin_lisp_symbol(i32 668)
  %cmp562 = icmp eq i64 %343, %call561
  br i1 %cmp562, label %if.then.564, label %if.else.567

if.then.564:                                      ; preds = %if.end.560
  %344 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_pos565 = getelementptr inbounds %struct.frame, %struct.frame* %344, i32 0, i32 44
  store i32 0, i32* %left_pos565, align 4
  %345 = load i64, i64* %window_prompting, align 8
  %or566 = or i64 %345, 16
  store i64 %or566, i64* %window_prompting, align 8
  br label %if.end.713

if.else.567:                                      ; preds = %if.end.560
  %346 = load i64, i64* %left, align 8
  %and568 = and i64 %346, 7
  %conv569 = trunc i64 %and568 to i32
  %cmp570 = icmp eq i32 %conv569, 3
  br i1 %cmp570, label %land.lhs.true.572, label %if.else.605

land.lhs.true.572:                                ; preds = %if.else.567
  %347 = load i64, i64* %left, align 8
  %sub573 = sub nsw i64 %347, 3
  %348 = inttoptr i64 %sub573 to i8*
  %349 = bitcast i8* %348 to %struct.Lisp_Cons*
  %car574 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %349, i32 0, i32 0
  %350 = load i64, i64* %car574, align 8
  %call575 = call i64 @builtin_lisp_symbol(i32 668)
  %cmp576 = icmp eq i64 %350, %call575
  br i1 %cmp576, label %land.lhs.true.578, label %if.else.605

land.lhs.true.578:                                ; preds = %land.lhs.true.572
  %351 = load i64, i64* %left, align 8
  %sub579 = sub nsw i64 %351, 3
  %352 = inttoptr i64 %sub579 to i8*
  %353 = bitcast i8* %352 to %struct.Lisp_Cons*
  %u580 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %353, i32 0, i32 1
  %cdr581 = bitcast %union.anon.11* %u580 to i64*
  %354 = load i64, i64* %cdr581, align 8
  %and582 = and i64 %354, 7
  %conv583 = trunc i64 %and582 to i32
  %cmp584 = icmp eq i32 %conv583, 3
  br i1 %cmp584, label %land.lhs.true.586, label %if.else.605

land.lhs.true.586:                                ; preds = %land.lhs.true.578
  %355 = load i64, i64* %left, align 8
  %sub587 = sub nsw i64 %355, 3
  %356 = inttoptr i64 %sub587 to i8*
  %357 = bitcast i8* %356 to %struct.Lisp_Cons*
  %u588 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %357, i32 0, i32 1
  %cdr589 = bitcast %union.anon.11* %u588 to i64*
  %358 = load i64, i64* %cdr589, align 8
  %sub590 = sub nsw i64 %358, 3
  %359 = inttoptr i64 %sub590 to i8*
  %360 = bitcast i8* %359 to %struct.Lisp_Cons*
  %car591 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %360, i32 0, i32 0
  %361 = load i64, i64* %car591, align 8
  %call592 = call zeroext i1 @RANGED_INTEGERP(i64 -2147483647, i64 %361, i64 2147483647)
  br i1 %call592, label %if.then.594, label %if.else.605

if.then.594:                                      ; preds = %land.lhs.true.586
  %362 = load i64, i64* %left, align 8
  %sub595 = sub nsw i64 %362, 3
  %363 = inttoptr i64 %sub595 to i8*
  %364 = bitcast i8* %363 to %struct.Lisp_Cons*
  %u596 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %364, i32 0, i32 1
  %cdr597 = bitcast %union.anon.11* %u596 to i64*
  %365 = load i64, i64* %cdr597, align 8
  %sub598 = sub nsw i64 %365, 3
  %366 = inttoptr i64 %sub598 to i8*
  %367 = bitcast i8* %366 to %struct.Lisp_Cons*
  %car599 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %367, i32 0, i32 0
  %368 = load i64, i64* %car599, align 8
  %shr600 = ashr i64 %368, 2
  %sub601 = sub nsw i64 0, %shr600
  %conv602 = trunc i64 %sub601 to i32
  %369 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_pos603 = getelementptr inbounds %struct.frame, %struct.frame* %369, i32 0, i32 44
  store i32 %conv602, i32* %left_pos603, align 4
  %370 = load i64, i64* %window_prompting, align 8
  %or604 = or i64 %370, 16
  store i64 %or604, i64* %window_prompting, align 8
  br label %if.end.712

if.else.605:                                      ; preds = %land.lhs.true.586, %land.lhs.true.578, %land.lhs.true.572, %if.else.567
  %371 = load i64, i64* %left, align 8
  %and606 = and i64 %371, 7
  %conv607 = trunc i64 %and606 to i32
  %cmp608 = icmp eq i32 %conv607, 3
  br i1 %cmp608, label %land.lhs.true.610, label %if.else.672

land.lhs.true.610:                                ; preds = %if.else.605
  %372 = load i64, i64* %left, align 8
  %sub611 = sub nsw i64 %372, 3
  %373 = inttoptr i64 %sub611 to i8*
  %374 = bitcast i8* %373 to %struct.Lisp_Cons*
  %car612 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %374, i32 0, i32 0
  %375 = load i64, i64* %car612, align 8
  %call613 = call i64 @builtin_lisp_symbol(i32 752)
  %cmp614 = icmp eq i64 %375, %call613
  br i1 %cmp614, label %land.lhs.true.616, label %if.else.672

land.lhs.true.616:                                ; preds = %land.lhs.true.610
  %376 = load i64, i64* %left, align 8
  %sub617 = sub nsw i64 %376, 3
  %377 = inttoptr i64 %sub617 to i8*
  %378 = bitcast i8* %377 to %struct.Lisp_Cons*
  %u618 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %378, i32 0, i32 1
  %cdr619 = bitcast %union.anon.11* %u618 to i64*
  %379 = load i64, i64* %cdr619, align 8
  %and620 = and i64 %379, 7
  %conv621 = trunc i64 %and620 to i32
  %cmp622 = icmp eq i32 %conv621, 3
  br i1 %cmp622, label %land.lhs.true.624, label %if.else.672

land.lhs.true.624:                                ; preds = %land.lhs.true.616
  %380 = load i64, i64* %left, align 8
  %sub625 = sub nsw i64 %380, 3
  %381 = inttoptr i64 %sub625 to i8*
  %382 = bitcast i8* %381 to %struct.Lisp_Cons*
  %u626 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %382, i32 0, i32 1
  %cdr627 = bitcast %union.anon.11* %u626 to i64*
  %383 = load i64, i64* %cdr627, align 8
  %sub628 = sub nsw i64 %383, 3
  %384 = inttoptr i64 %sub628 to i8*
  %385 = bitcast i8* %384 to %struct.Lisp_Cons*
  %car629 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %385, i32 0, i32 0
  %386 = load i64, i64* %car629, align 8
  %and630 = and i64 %386, 7
  %conv631 = trunc i64 %and630 to i32
  %and632 = and i32 %conv631, -5
  %cmp633 = icmp eq i32 %and632, 2
  br i1 %cmp633, label %land.lhs.true.635, label %if.else.672

land.lhs.true.635:                                ; preds = %land.lhs.true.624
  br i1 false, label %cond.false.645, label %cond.true.636

cond.true.636:                                    ; preds = %land.lhs.true.635
  %387 = load i64, i64* %left, align 8
  %sub637 = sub nsw i64 %387, 3
  %388 = inttoptr i64 %sub637 to i8*
  %389 = bitcast i8* %388 to %struct.Lisp_Cons*
  %u638 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %389, i32 0, i32 1
  %cdr639 = bitcast %union.anon.11* %u638 to i64*
  %390 = load i64, i64* %cdr639, align 8
  %sub640 = sub nsw i64 %390, 3
  %391 = inttoptr i64 %sub640 to i8*
  %392 = bitcast i8* %391 to %struct.Lisp_Cons*
  %car641 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %392, i32 0, i32 0
  %393 = load i64, i64* %car641, align 8
  %shr642 = ashr i64 %393, 2
  %cmp643 = icmp sle i64 -2147483648, %shr642
  br i1 %cmp643, label %land.lhs.true.654, label %if.else.672

cond.false.645:                                   ; preds = %land.lhs.true.635
  %394 = load i64, i64* %left, align 8
  %sub646 = sub nsw i64 %394, 3
  %395 = inttoptr i64 %sub646 to i8*
  %396 = bitcast i8* %395 to %struct.Lisp_Cons*
  %u647 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %396, i32 0, i32 1
  %cdr648 = bitcast %union.anon.11* %u647 to i64*
  %397 = load i64, i64* %cdr648, align 8
  %sub649 = sub nsw i64 %397, 3
  %398 = inttoptr i64 %sub649 to i8*
  %399 = bitcast i8* %398 to %struct.Lisp_Cons*
  %car650 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %399, i32 0, i32 0
  %400 = load i64, i64* %car650, align 8
  %shr651 = ashr i64 %400, 2
  %cmp652 = icmp sle i64 0, %shr651
  br i1 %cmp652, label %land.lhs.true.654, label %if.else.672

land.lhs.true.654:                                ; preds = %cond.false.645, %cond.true.636
  %401 = load i64, i64* %left, align 8
  %sub655 = sub nsw i64 %401, 3
  %402 = inttoptr i64 %sub655 to i8*
  %403 = bitcast i8* %402 to %struct.Lisp_Cons*
  %u656 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %403, i32 0, i32 1
  %cdr657 = bitcast %union.anon.11* %u656 to i64*
  %404 = load i64, i64* %cdr657, align 8
  %sub658 = sub nsw i64 %404, 3
  %405 = inttoptr i64 %sub658 to i8*
  %406 = bitcast i8* %405 to %struct.Lisp_Cons*
  %car659 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %406, i32 0, i32 0
  %407 = load i64, i64* %car659, align 8
  %shr660 = ashr i64 %407, 2
  %cmp661 = icmp sle i64 %shr660, 2147483647
  br i1 %cmp661, label %if.then.663, label %if.else.672

if.then.663:                                      ; preds = %land.lhs.true.654
  %408 = load i64, i64* %left, align 8
  %sub664 = sub nsw i64 %408, 3
  %409 = inttoptr i64 %sub664 to i8*
  %410 = bitcast i8* %409 to %struct.Lisp_Cons*
  %u665 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %410, i32 0, i32 1
  %cdr666 = bitcast %union.anon.11* %u665 to i64*
  %411 = load i64, i64* %cdr666, align 8
  %sub667 = sub nsw i64 %411, 3
  %412 = inttoptr i64 %sub667 to i8*
  %413 = bitcast i8* %412 to %struct.Lisp_Cons*
  %car668 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %413, i32 0, i32 0
  %414 = load i64, i64* %car668, align 8
  %shr669 = ashr i64 %414, 2
  %conv670 = trunc i64 %shr669 to i32
  %415 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_pos671 = getelementptr inbounds %struct.frame, %struct.frame* %415, i32 0, i32 44
  store i32 %conv670, i32* %left_pos671, align 4
  br label %if.end.711

if.else.672:                                      ; preds = %land.lhs.true.654, %cond.false.645, %cond.true.636, %land.lhs.true.624, %land.lhs.true.616, %land.lhs.true.610, %if.else.605
  %416 = load i64, i64* %left, align 8
  %call673 = call i64 @builtin_lisp_symbol(i32 957)
  %cmp674 = icmp eq i64 %416, %call673
  br i1 %cmp674, label %if.then.676, label %if.else.678

if.then.676:                                      ; preds = %if.else.672
  %417 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_pos677 = getelementptr inbounds %struct.frame, %struct.frame* %417, i32 0, i32 44
  store i32 0, i32* %left_pos677, align 4
  br label %if.end.710

if.else.678:                                      ; preds = %if.else.672
  br label %do.body.679

do.body.679:                                      ; preds = %if.else.678
  br label %do.body.680

do.body.680:                                      ; preds = %do.body.679
  %418 = load i64, i64* %left, align 8
  %and681 = and i64 %418, 7
  %conv682 = trunc i64 %and681 to i32
  %and683 = and i32 %conv682, -5
  %cmp684 = icmp eq i32 %and683, 2
  br i1 %cmp684, label %cond.true.686, label %cond.false.687

cond.true.686:                                    ; preds = %do.body.680
  br label %cond.end.689

cond.false.687:                                   ; preds = %do.body.680
  %call688 = call i64 @builtin_lisp_symbol(i32 559)
  %419 = load i64, i64* %left, align 8
  %420 = call i64 @wrong_type_argument(i64 %call688, i64 %419) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.689

cond.end.689:                                     ; preds = %421, %cond.true.686
  %422 = load i64, i64* %left, align 8
  %shr690 = ashr i64 %422, 2
  %cmp691 = icmp sle i64 -2147483648, %shr690
  br i1 %cmp691, label %land.lhs.true.693, label %if.then.697

land.lhs.true.693:                                ; preds = %cond.end.689
  %423 = load i64, i64* %left, align 8
  %shr694 = ashr i64 %423, 2
  %cmp695 = icmp sle i64 %shr694, 2147483647
  br i1 %cmp695, label %if.end.698, label %if.then.697

if.then.697:                                      ; preds = %land.lhs.true.693, %cond.end.689
  %424 = load i64, i64* %left, align 8
  call void @args_out_of_range_3(i64 %424, i64 -8589934590, i64 8589934590) #7
  unreachable

if.end.698:                                       ; preds = %land.lhs.true.693
  br label %do.end.699

do.end.699:                                       ; preds = %if.end.698
  br label %do.end.700

do.end.700:                                       ; preds = %do.end.699
  %425 = load i64, i64* %left, align 8
  %shr701 = ashr i64 %425, 2
  %conv702 = trunc i64 %shr701 to i32
  %426 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_pos703 = getelementptr inbounds %struct.frame, %struct.frame* %426, i32 0, i32 44
  store i32 %conv702, i32* %left_pos703, align 4
  %427 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_pos704 = getelementptr inbounds %struct.frame, %struct.frame* %427, i32 0, i32 44
  %428 = load i32, i32* %left_pos704, align 4
  %cmp705 = icmp slt i32 %428, 0
  br i1 %cmp705, label %if.then.707, label %if.end.709

if.then.707:                                      ; preds = %do.end.700
  %429 = load i64, i64* %window_prompting, align 8
  %or708 = or i64 %429, 16
  store i64 %or708, i64* %window_prompting, align 8
  br label %if.end.709

if.end.709:                                       ; preds = %if.then.707, %do.end.700
  br label %if.end.710

if.end.710:                                       ; preds = %if.end.709, %if.then.676
  br label %if.end.711

if.end.711:                                       ; preds = %if.end.710, %if.then.663
  br label %if.end.712

if.end.712:                                       ; preds = %if.end.711, %if.then.594
  br label %if.end.713

if.end.713:                                       ; preds = %if.end.712, %if.then.564
  %430 = load i64, i64* %user_position, align 8
  %call714 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp715 = icmp eq i64 %430, %call714
  br i1 %cmp715, label %if.else.723, label %land.lhs.true.717

land.lhs.true.717:                                ; preds = %if.end.713
  %431 = load i64, i64* %user_position, align 8
  %call718 = call i64 @builtin_lisp_symbol(i32 957)
  %cmp719 = icmp eq i64 %431, %call718
  br i1 %cmp719, label %if.else.723, label %if.then.721

if.then.721:                                      ; preds = %land.lhs.true.717
  %432 = load i64, i64* %window_prompting, align 8
  %or722 = or i64 %432, 1
  store i64 %or722, i64* %window_prompting, align 8
  br label %if.end.725

if.else.723:                                      ; preds = %land.lhs.true.717, %if.end.713
  %433 = load i64, i64* %window_prompting, align 8
  %or724 = or i64 %433, 4
  store i64 %or724, i64* %window_prompting, align 8
  br label %if.end.725

if.end.725:                                       ; preds = %if.else.723, %if.then.721
  br label %if.end.726

if.end.726:                                       ; preds = %if.end.725, %lor.lhs.false.405
  %434 = load i64, i64* %window_prompting, align 8
  %and727 = and i64 %434, 16
  %tobool728 = icmp ne i64 %and727, 0
  br i1 %tobool728, label %if.then.729, label %if.else.736

if.then.729:                                      ; preds = %if.end.726
  %435 = load i64, i64* %window_prompting, align 8
  %and730 = and i64 %435, 32
  %tobool731 = icmp ne i64 %and730, 0
  br i1 %tobool731, label %if.then.732, label %if.else.733

if.then.732:                                      ; preds = %if.then.729
  %436 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %win_gravity = getelementptr inbounds %struct.frame, %struct.frame* %436, i32 0, i32 48
  store i32 9, i32* %win_gravity, align 4
  br label %if.end.735

if.else.733:                                      ; preds = %if.then.729
  %437 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %win_gravity734 = getelementptr inbounds %struct.frame, %struct.frame* %437, i32 0, i32 48
  store i32 3, i32* %win_gravity734, align 4
  br label %if.end.735

if.end.735:                                       ; preds = %if.else.733, %if.then.732
  br label %if.end.744

if.else.736:                                      ; preds = %if.end.726
  %438 = load i64, i64* %window_prompting, align 8
  %and737 = and i64 %438, 32
  %tobool738 = icmp ne i64 %and737, 0
  br i1 %tobool738, label %if.then.739, label %if.else.741

if.then.739:                                      ; preds = %if.else.736
  %439 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %win_gravity740 = getelementptr inbounds %struct.frame, %struct.frame* %439, i32 0, i32 48
  store i32 7, i32* %win_gravity740, align 4
  br label %if.end.743

if.else.741:                                      ; preds = %if.else.736
  %440 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %win_gravity742 = getelementptr inbounds %struct.frame, %struct.frame* %440, i32 0, i32 48
  store i32 1, i32* %win_gravity742, align 4
  br label %if.end.743

if.end.743:                                       ; preds = %if.else.741, %if.then.739
  br label %if.end.744

if.end.744:                                       ; preds = %if.end.743, %if.end.735
  %441 = load i64, i64* %window_prompting, align 8
  %conv745 = trunc i64 %441 to i32
  %442 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %size_hint_flags = getelementptr inbounds %struct.frame, %struct.frame* %442, i32 0, i32 49
  store i32 %conv745, i32* %size_hint_flags, align 4
  %443 = load i64, i64* %window_prompting, align 8
  ret i64 %443
}

; Function Attrs: noreturn
declare void @xsignal1(i64, i64) #2

; Function Attrs: nounwind uwtable
define void @frame_make_pointer_invisible(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 170), align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.end.14, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tobool = icmp ne %struct.frame* %1, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 61
  %3 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp1 = icmp ne %struct.terminal* %3, null
  br i1 %cmp1, label %land.lhs.true.2, label %if.end

land.lhs.true.2:                                  ; preds = %land.lhs.true
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pointer_invisible = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 26
  %5 = bitcast i48* %pointer_invisible to i64*
  %bf.load = load i64, i64* %5, align 8
  %bf.lshr = lshr i64 %bf.load, 21
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %if.end, label %land.lhs.true.3

land.lhs.true.3:                                  ; preds = %land.lhs.true.2
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal4 = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 61
  %7 = load %struct.terminal*, %struct.terminal** %terminal4, align 8
  %toggle_invisible_pointer_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %7, i32 0, i32 26
  %8 = load void (%struct.frame*, i1)*, void (%struct.frame*, i1)** %toggle_invisible_pointer_hook, align 8
  %tobool5 = icmp ne void (%struct.frame*, i1)* %8, null
  br i1 %tobool5, label %if.then.6, label %if.end

if.then.6:                                        ; preds = %land.lhs.true.3
  %9 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %mouse_moved = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 26
  %10 = bitcast i48* %mouse_moved to i64*
  %bf.load7 = load i64, i64* %10, align 8
  %bf.clear8 = and i64 %bf.load7, -1048577
  store i64 %bf.clear8, i64* %10, align 8
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal9 = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 61
  %12 = load %struct.terminal*, %struct.terminal** %terminal9, align 8
  %toggle_invisible_pointer_hook10 = getelementptr inbounds %struct.terminal, %struct.terminal* %12, i32 0, i32 26
  %13 = load void (%struct.frame*, i1)*, void (%struct.frame*, i1)** %toggle_invisible_pointer_hook10, align 8
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void %13(%struct.frame* %14, i1 zeroext true)
  %15 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pointer_invisible11 = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 26
  %16 = bitcast i48* %pointer_invisible11 to i64*
  %bf.load12 = load i64, i64* %16, align 8
  %bf.clear13 = and i64 %bf.load12, -2097153
  %bf.set = or i64 %bf.clear13, 2097152
  store i64 %bf.set, i64* %16, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.6, %land.lhs.true.3, %land.lhs.true.2, %land.lhs.true, %if.then
  br label %if.end.14

if.end.14:                                        ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @frame_make_pointer_visible(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tobool = icmp ne %struct.frame* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 61
  %2 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp = icmp ne %struct.terminal* %2, null
  br i1 %cmp, label %land.lhs.true.1, label %if.end

land.lhs.true.1:                                  ; preds = %land.lhs.true
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pointer_invisible = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 26
  %4 = bitcast i48* %pointer_invisible to i64*
  %bf.load = load i64, i64* %4, align 8
  %bf.lshr = lshr i64 %bf.load, 21
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %land.lhs.true.2, label %if.end

land.lhs.true.2:                                  ; preds = %land.lhs.true.1
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %mouse_moved = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 26
  %6 = bitcast i48* %mouse_moved to i64*
  %bf.load3 = load i64, i64* %6, align 8
  %bf.lshr4 = lshr i64 %bf.load3, 20
  %bf.clear5 = and i64 %bf.lshr4, 1
  %bf.cast6 = trunc i64 %bf.clear5 to i1
  br i1 %bf.cast6, label %land.lhs.true.7, label %if.end

land.lhs.true.7:                                  ; preds = %land.lhs.true.2
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal8 = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 61
  %8 = load %struct.terminal*, %struct.terminal** %terminal8, align 8
  %toggle_invisible_pointer_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %8, i32 0, i32 26
  %9 = load void (%struct.frame*, i1)*, void (%struct.frame*, i1)** %toggle_invisible_pointer_hook, align 8
  %tobool9 = icmp ne void (%struct.frame*, i1)* %9, null
  br i1 %tobool9, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.7
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal10 = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 61
  %11 = load %struct.terminal*, %struct.terminal** %terminal10, align 8
  %toggle_invisible_pointer_hook11 = getelementptr inbounds %struct.terminal, %struct.terminal* %11, i32 0, i32 26
  %12 = load void (%struct.frame*, i1)*, void (%struct.frame*, i1)** %toggle_invisible_pointer_hook11, align 8
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void %12(%struct.frame* %13, i1 zeroext false)
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pointer_invisible12 = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 26
  %15 = bitcast i48* %pointer_invisible12 to i64*
  %bf.load13 = load i64, i64* %15, align 8
  %bf.clear14 = and i64 %bf.load13, -2097153
  store i64 %bf.clear14, i64* %15, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.7, %land.lhs.true.2, %land.lhs.true.1, %land.lhs.true, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @Fframe_pointer_visible_p(i64 %frame) #0 {
entry:
  %frame.addr = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_any_frame(i64 %0)
  %pointer_invisible = getelementptr inbounds %struct.frame, %struct.frame* %call, i32 0, i32 26
  %1 = bitcast i48* %pointer_invisible to i64*
  %bf.load = load i64, i64* %1, align 8
  %bf.lshr = lshr i64 %bf.load, 21
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call2 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call1, %cond.true ], [ %call2, %cond.false ]
  ret i64 %cond
}

; Function Attrs: nounwind uwtable
define i64 @make_monitor_attribute_list(%struct.MonitorInfo* %monitors, i32 %n_monitors, i32 %primary_monitor, i64 %monitor_frames, i8* %source) #0 {
entry:
  %monitors.addr = alloca %struct.MonitorInfo*, align 8
  %n_monitors.addr = alloca i32, align 4
  %primary_monitor.addr = alloca i32, align 4
  %monitor_frames.addr = alloca i64, align 8
  %source.addr = alloca i8*, align 8
  %attributes_list = alloca i64, align 8
  %primary_monitor_attributes = alloca i64, align 8
  %i = alloca i32, align 4
  %geometry = alloca i64, align 8
  %workarea = alloca i64, align 8
  %attributes = alloca i64, align 8
  %mi = alloca %struct.MonitorInfo*, align 8
  store %struct.MonitorInfo* %monitors, %struct.MonitorInfo** %monitors.addr, align 8
  store i32 %n_monitors, i32* %n_monitors.addr, align 4
  store i32 %primary_monitor, i32* %primary_monitor.addr, align 4
  store i64 %monitor_frames, i64* %monitor_frames.addr, align 8
  store i8* %source, i8** %source.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %attributes_list, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call1, i64* %primary_monitor_attributes, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n_monitors.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call2, i64* %attributes, align 8
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load %struct.MonitorInfo*, %struct.MonitorInfo** %monitors.addr, align 8
  %arrayidx = getelementptr inbounds %struct.MonitorInfo, %struct.MonitorInfo* %3, i64 %idxprom
  store %struct.MonitorInfo* %arrayidx, %struct.MonitorInfo** %mi, align 8
  %4 = load %struct.MonitorInfo*, %struct.MonitorInfo** %mi, align 8
  %geom = getelementptr inbounds %struct.MonitorInfo, %struct.MonitorInfo* %4, i32 0, i32 0
  %width = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %geom, i32 0, i32 2
  %5 = load i16, i16* %width, align 2
  %conv = zext i16 %5 to i32
  %cmp3 = icmp eq i32 %conv, 0
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %6 = load %struct.MonitorInfo*, %struct.MonitorInfo** %mi, align 8
  %work = getelementptr inbounds %struct.MonitorInfo, %struct.MonitorInfo* %6, i32 0, i32 1
  %x = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %work, i32 0, i32 0
  %7 = load i16, i16* %x, align 2
  %conv5 = sext i16 %7 to i64
  %8 = load %struct.MonitorInfo*, %struct.MonitorInfo** %mi, align 8
  %work6 = getelementptr inbounds %struct.MonitorInfo, %struct.MonitorInfo* %8, i32 0, i32 1
  %y = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %work6, i32 0, i32 1
  %9 = load i16, i16* %y, align 2
  %conv7 = sext i16 %9 to i64
  %10 = load %struct.MonitorInfo*, %struct.MonitorInfo** %mi, align 8
  %work8 = getelementptr inbounds %struct.MonitorInfo, %struct.MonitorInfo* %10, i32 0, i32 1
  %width9 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %work8, i32 0, i32 2
  %11 = load i16, i16* %width9, align 2
  %conv10 = zext i16 %11 to i64
  %12 = load %struct.MonitorInfo*, %struct.MonitorInfo** %mi, align 8
  %work11 = getelementptr inbounds %struct.MonitorInfo, %struct.MonitorInfo* %12, i32 0, i32 1
  %height = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %work11, i32 0, i32 3
  %13 = load i16, i16* %height, align 2
  %conv12 = zext i16 %13 to i64
  %call13 = call i64 @list4i(i64 %conv5, i64 %conv7, i64 %conv10, i64 %conv12)
  store i64 %call13, i64* %workarea, align 8
  %14 = load %struct.MonitorInfo*, %struct.MonitorInfo** %mi, align 8
  %geom14 = getelementptr inbounds %struct.MonitorInfo, %struct.MonitorInfo* %14, i32 0, i32 0
  %x15 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %geom14, i32 0, i32 0
  %15 = load i16, i16* %x15, align 2
  %conv16 = sext i16 %15 to i64
  %16 = load %struct.MonitorInfo*, %struct.MonitorInfo** %mi, align 8
  %geom17 = getelementptr inbounds %struct.MonitorInfo, %struct.MonitorInfo* %16, i32 0, i32 0
  %y18 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %geom17, i32 0, i32 1
  %17 = load i16, i16* %y18, align 2
  %conv19 = sext i16 %17 to i64
  %18 = load %struct.MonitorInfo*, %struct.MonitorInfo** %mi, align 8
  %geom20 = getelementptr inbounds %struct.MonitorInfo, %struct.MonitorInfo* %18, i32 0, i32 0
  %width21 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %geom20, i32 0, i32 2
  %19 = load i16, i16* %width21, align 2
  %conv22 = zext i16 %19 to i64
  %20 = load %struct.MonitorInfo*, %struct.MonitorInfo** %mi, align 8
  %geom23 = getelementptr inbounds %struct.MonitorInfo, %struct.MonitorInfo* %20, i32 0, i32 0
  %height24 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %geom23, i32 0, i32 3
  %21 = load i16, i16* %height24, align 2
  %conv25 = zext i16 %21 to i64
  %call26 = call i64 @list4i(i64 %conv16, i64 %conv19, i64 %conv22, i64 %conv25)
  store i64 %call26, i64* %geometry, align 8
  %call27 = call i64 @builtin_lisp_symbol(i32 867)
  %22 = load i8*, i8** %source.addr, align 8
  %call28 = call i64 @build_string(i8* %22)
  %call29 = call i64 @Fcons(i64 %call27, i64 %call28)
  %23 = load i64, i64* %attributes, align 8
  %call30 = call i64 @Fcons(i64 %call29, i64 %23)
  store i64 %call30, i64* %attributes, align 8
  %call31 = call i64 @builtin_lisp_symbol(i32 462)
  %24 = load i64, i64* %monitor_frames.addr, align 8
  %25 = load i32, i32* %i, align 4
  %conv32 = sext i32 %25 to i64
  %call33 = call i64 @AREF(i64 %24, i64 %conv32)
  %call34 = call i64 @Fcons(i64 %call31, i64 %call33)
  %26 = load i64, i64* %attributes, align 8
  %call35 = call i64 @Fcons(i64 %call34, i64 %26)
  store i64 %call35, i64* %attributes, align 8
  %call36 = call i64 @builtin_lisp_symbol(i32 670)
  %27 = load %struct.MonitorInfo*, %struct.MonitorInfo** %mi, align 8
  %mm_width = getelementptr inbounds %struct.MonitorInfo, %struct.MonitorInfo* %27, i32 0, i32 2
  %28 = load i32, i32* %mm_width, align 4
  %conv37 = sext i32 %28 to i64
  %29 = load %struct.MonitorInfo*, %struct.MonitorInfo** %mi, align 8
  %mm_height = getelementptr inbounds %struct.MonitorInfo, %struct.MonitorInfo* %29, i32 0, i32 3
  %30 = load i32, i32* %mm_height, align 4
  %conv38 = sext i32 %30 to i64
  %call39 = call i64 @list2i(i64 %conv37, i64 %conv38)
  %call40 = call i64 @Fcons(i64 %call36, i64 %call39)
  %31 = load i64, i64* %attributes, align 8
  %call41 = call i64 @Fcons(i64 %call40, i64 %31)
  store i64 %call41, i64* %attributes, align 8
  %call42 = call i64 @builtin_lisp_symbol(i32 1038)
  %32 = load i64, i64* %workarea, align 8
  %call43 = call i64 @Fcons(i64 %call42, i64 %32)
  %33 = load i64, i64* %attributes, align 8
  %call44 = call i64 @Fcons(i64 %call43, i64 %33)
  store i64 %call44, i64* %attributes, align 8
  %call45 = call i64 @builtin_lisp_symbol(i32 482)
  %34 = load i64, i64* %geometry, align 8
  %call46 = call i64 @Fcons(i64 %call45, i64 %34)
  %35 = load i64, i64* %attributes, align 8
  %call47 = call i64 @Fcons(i64 %call46, i64 %35)
  store i64 %call47, i64* %attributes, align 8
  %36 = load %struct.MonitorInfo*, %struct.MonitorInfo** %mi, align 8
  %name = getelementptr inbounds %struct.MonitorInfo, %struct.MonitorInfo* %36, i32 0, i32 4
  %37 = load i8*, i8** %name, align 8
  %tobool = icmp ne i8* %37, null
  br i1 %tobool, label %if.then.48, label %if.end.56

if.then.48:                                       ; preds = %if.end
  %call49 = call i64 @builtin_lisp_symbol(i32 696)
  %38 = load %struct.MonitorInfo*, %struct.MonitorInfo** %mi, align 8
  %name50 = getelementptr inbounds %struct.MonitorInfo, %struct.MonitorInfo* %38, i32 0, i32 4
  %39 = load i8*, i8** %name50, align 8
  %40 = load %struct.MonitorInfo*, %struct.MonitorInfo** %mi, align 8
  %name51 = getelementptr inbounds %struct.MonitorInfo, %struct.MonitorInfo* %40, i32 0, i32 4
  %41 = load i8*, i8** %name51, align 8
  %call52 = call i64 @strlen(i8* %41) #8
  %call53 = call i64 @make_string(i8* %39, i64 %call52)
  %call54 = call i64 @Fcons(i64 %call49, i64 %call53)
  %42 = load i64, i64* %attributes, align 8
  %call55 = call i64 @Fcons(i64 %call54, i64 %42)
  store i64 %call55, i64* %attributes, align 8
  br label %if.end.56

if.end.56:                                        ; preds = %if.then.48, %if.end
  %43 = load i32, i32* %i, align 4
  %44 = load i32, i32* %primary_monitor.addr, align 4
  %cmp57 = icmp eq i32 %43, %44
  br i1 %cmp57, label %if.then.59, label %if.else

if.then.59:                                       ; preds = %if.end.56
  %45 = load i64, i64* %attributes, align 8
  store i64 %45, i64* %primary_monitor_attributes, align 8
  br label %if.end.61

if.else:                                          ; preds = %if.end.56
  %46 = load i64, i64* %attributes, align 8
  %47 = load i64, i64* %attributes_list, align 8
  %call60 = call i64 @Fcons(i64 %46, i64 %47)
  store i64 %call60, i64* %attributes_list, align 8
  br label %if.end.61

if.end.61:                                        ; preds = %if.else, %if.then.59
  br label %for.inc

for.inc:                                          ; preds = %if.end.61, %if.then
  %48 = load i32, i32* %i, align 4
  %inc = add nsw i32 %48, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %49 = load i64, i64* %primary_monitor_attributes, align 8
  %call62 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp63 = icmp eq i64 %49, %call62
  br i1 %cmp63, label %if.end.67, label %if.then.65

if.then.65:                                       ; preds = %for.end
  %50 = load i64, i64* %primary_monitor_attributes, align 8
  %51 = load i64, i64* %attributes_list, align 8
  %call66 = call i64 @Fcons(i64 %50, i64 %51)
  store i64 %call66, i64* %attributes_list, align 8
  br label %if.end.67

if.end.67:                                        ; preds = %if.then.65, %for.end
  %52 = load i64, i64* %attributes_list, align 8
  ret i64 %52
}

declare i64 @list4i(i64, i64, i64, i64) #1

declare i64 @list2i(i64, i64) #1

; Function Attrs: nounwind uwtable
define void @syms_of_frame() #0 {
entry:
  %i = alloca i32, align 4
  %v = alloca i64, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %conv = sext i32 %0 to i64
  %cmp = icmp ult i64 %conv, 37
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [37 x %struct.frame_parm_table], [37 x %struct.frame_parm_table]* @frame_parms, i32 0, i64 %idxprom
  %sym = getelementptr inbounds %struct.frame_parm_table, %struct.frame_parm_table* %arrayidx, i32 0, i32 1
  %2 = load i32, i32* %sym, align 4
  %cmp2 = icmp slt i32 %2, 0
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %idxprom4 = sext i32 %3 to i64
  %arrayidx5 = getelementptr inbounds [37 x %struct.frame_parm_table], [37 x %struct.frame_parm_table]* @frame_parms, i32 0, i64 %idxprom4
  %name = getelementptr inbounds %struct.frame_parm_table, %struct.frame_parm_table* %arrayidx5, i32 0, i32 0
  %4 = load i8*, i8** %name, align 8
  %call = call i64 @intern_c_string(i8* %4)
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %5 to i64
  %arrayidx7 = getelementptr inbounds [37 x %struct.frame_parm_table], [37 x %struct.frame_parm_table]* @frame_parms, i32 0, i64 %idxprom6
  %sym8 = getelementptr inbounds %struct.frame_parm_table, %struct.frame_parm_table* %arrayidx7, i32 0, i32 1
  %6 = load i32, i32* %sym8, align 4
  %call9 = call i64 @builtin_lisp_symbol(i32 %6)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call, %cond.true ], [ %call9, %cond.false ]
  store i64 %cond, i64* %v, align 8
  %7 = load i64, i64* %v, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 1049)
  %8 = load i32, i32* %i, align 4
  %conv11 = sext i32 %8 to i64
  %shl = shl i64 %conv11, 2
  %add = add i64 %shl, 2
  %call12 = call i64 @Fput(i64 %7, i64 %call10, i64 %add)
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %do.body

do.body:                                          ; preds = %for.end
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_frame.o_fwd, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 357))
  br label %do.end

do.end:                                           ; preds = %do.body
  %call13 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call13, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 357), align 8
  br label %do.body.14

do.body.14:                                       ; preds = %do.end
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_frame.o_fwd.29, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.30, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 356))
  br label %do.end.15

do.end.15:                                        ; preds = %do.body.14
  %call16 = call i64 @build_string(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0))
  store i64 %call16, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 356), align 8
  br label %do.body.17

do.body.17:                                       ; preds = %do.end.15
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_frame.o_fwd.31, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.32, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 110))
  br label %do.end.18

do.end.18:                                        ; preds = %do.body.17
  store i64 82, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 110), align 8
  br label %do.body.19

do.body.19:                                       ; preds = %do.end.18
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_frame.o_fwd.33, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.34, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 60))
  br label %do.end.20

do.end.20:                                        ; preds = %do.body.19
  %call21 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call21, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 60), align 8
  br label %do.body.22

do.body.22:                                       ; preds = %do.end.20
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_frame.o_fwd.35, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.36, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 61))
  br label %do.end.23

do.end.23:                                        ; preds = %do.body.22
  %call24 = call i64 @builtin_lisp_symbol(i32 811)
  store i64 %call24, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 61), align 8
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.23
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_frame.b_fwd, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 488))
  br label %do.end.26

do.end.26:                                        ; preds = %do.body.25
  store i8 1, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 488), align 1
  br label %do.body.27

do.body.27:                                       ; preds = %do.end.26
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_frame.o_fwd.38, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.39, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 290))
  br label %do.end.28

do.end.28:                                        ; preds = %do.body.27
  br label %do.body.29

do.body.29:                                       ; preds = %do.end.28
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_frame.o_fwd.40, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.41, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 204))
  br label %do.end.30

do.end.30:                                        ; preds = %do.body.29
  %call31 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call31, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 204), align 8
  br label %do.body.32

do.body.32:                                       ; preds = %do.end.30
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_frame.o_fwd.42, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.43, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 202))
  br label %do.end.33

do.end.33:                                        ; preds = %do.body.32
  %call34 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call34, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 202), align 8
  br label %do.body.35

do.body.35:                                       ; preds = %do.end.33
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_frame.o_fwd.44, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.45, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 170))
  br label %do.end.36

do.end.36:                                        ; preds = %do.body.35
  %call37 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call37, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 170), align 8
  br label %do.body.38

do.body.38:                                       ; preds = %do.end.36
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_frame.o_fwd.46, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.47, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 99))
  br label %do.end.39

do.end.39:                                        ; preds = %do.body.38
  %call40 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call40, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 99), align 8
  br label %do.body.41

do.body.41:                                       ; preds = %do.end.39
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_frame.o_fwd.48, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.49, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 100))
  br label %do.end.42

do.end.42:                                        ; preds = %do.body.41
  %call43 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call43, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 100), align 8
  br label %do.body.44

do.body.44:                                       ; preds = %do.end.42
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_frame.o_fwd.50, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.51, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 68))
  br label %do.end.45

do.end.45:                                        ; preds = %do.body.44
  %call46 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call46, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 68), align 8
  br label %do.body.47

do.body.47:                                       ; preds = %do.end.45
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_frame.o_fwd.52, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.53, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 177))
  br label %do.end.48

do.end.48:                                        ; preds = %do.body.47
  %call49 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call49, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 177), align 8
  br label %do.body.50

do.body.50:                                       ; preds = %do.end.48
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_frame.o_fwd.54, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.55, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 301))
  br label %do.end.51

do.end.51:                                        ; preds = %do.body.50
  %call52 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call52, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 301), align 8
  br label %do.body.53

do.body.53:                                       ; preds = %do.end.51
  call void @defvar_kboard(%struct.Lisp_Kboard_Objfwd* @syms_of_frame.ko_fwd, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.56, i32 0, i32 0), i32 160)
  br label %do.end.54

do.end.54:                                        ; preds = %do.body.53
  br label %do.body.55

do.body.55:                                       ; preds = %do.end.54
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_frame.b_fwd.57, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.58, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 440))
  br label %do.end.56

do.end.56:                                        ; preds = %do.body.55
  store i8 0, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 440), align 1
  br label %do.body.57

do.body.57:                                       ; preds = %do.end.56
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_frame.b_fwd.59, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.60, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 442))
  br label %do.end.58

do.end.58:                                        ; preds = %do.body.57
  store i8 0, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 442), align 1
  br label %do.body.59

do.body.59:                                       ; preds = %do.end.58
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_frame.o_fwd.61, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.62, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 373))
  br label %do.end.60

do.end.60:                                        ; preds = %do.body.59
  %call61 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call61, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 373), align 8
  br label %do.body.62

do.body.62:                                       ; preds = %do.end.60
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_frame.o_fwd.63, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.64, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 374))
  br label %do.end.63

do.end.63:                                        ; preds = %do.body.62
  %call64 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 374), align 8
  call void @staticpro(i64* @Vframe_list)
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sframep to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sframe_live_p to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Swindow_system to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sframe_windows_min_size to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Smake_terminal_frame to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Shandle_switch_frame to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sselect_frame to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* @Sselected_frame)
  call void @defsubr(%struct.Lisp_Subr* @Sframe_list)
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Snext_frame to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sprevious_frame to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* @Slast_nonminibuf_frame)
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sdelete_frame to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* @Smouse_position)
  call void @defsubr(%struct.Lisp_Subr* @Smouse_pixel_position)
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_mouse_position to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_mouse_pixel_position to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Smake_frame_visible to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Smake_frame_invisible to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Siconify_frame to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sframe_visible_p to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* @Svisible_frame_list)
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sraise_frame to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Slower_frame to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sx_focus_frame to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sframe_after_make_frame to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sredirect_frame_focus to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sframe_focus to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sframe_parameters to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sframe_parameter to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Smodify_frame_parameters to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sframe_char_height to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sframe_char_width to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sframe_pixel_height to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sframe_pixel_width to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sframe_text_cols to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sframe_text_lines to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sframe_total_cols to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sframe_total_lines to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sframe_text_width to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sframe_text_height to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sscroll_bar_width to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sscroll_bar_height to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sfringe_width to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sborder_width to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sright_divider_width to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sbottom_divider_width to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Stool_bar_pixel_width to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_frame_height to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_frame_width to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_frame_size to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sframe_position to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_frame_position to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sframe_pointer_visible_p to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sx_get_resource to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sx_parse_geometry to %struct.Lisp_Subr*))
  ret void
}

declare i64 @intern_c_string(i8*) #1

declare i64 @Fput(i64, i64, i64) #1

declare void @defvar_lisp(%struct.Lisp_Objfwd*, i8*, i64*) #1

declare void @defvar_bool(%struct.Lisp_Boolfwd*, i8*, i8*) #1

declare void @defvar_kboard(%struct.Lisp_Kboard_Objfwd*, i8*, i32) #1

declare void @staticpro(i64*) #1

declare void @defsubr(%struct.Lisp_Subr*) #1

declare i64 @call4(i64, i64, i64, i64, i64) #1

declare %struct.Lisp_Vector* @allocate_pseudovector(i32, i32, i32, i32) #1

declare void @change_frame_size(%struct.frame*, i32, i32, i1 zeroext, i1 zeroext, i1 zeroext, i1 zeroext) #1

declare i64 @make_formatted_string(i8*, i8*, ...) #1

declare void @create_tty_output(%struct.frame*) #1

; Function Attrs: nounwind uwtable
define internal i64 @candidate_frame(i64 %candidate, i64 %frame, i64 %minibuf) #0 {
entry:
  %retval = alloca i64, align 8
  %candidate.addr = alloca i64, align 8
  %frame.addr = alloca i64, align 8
  %minibuf.addr = alloca i64, align 8
  %c = alloca %struct.frame*, align 8
  %f = alloca %struct.frame*, align 8
  store i64 %candidate, i64* %candidate.addr, align 8
  store i64 %frame, i64* %frame.addr, align 8
  store i64 %minibuf, i64* %minibuf.addr, align 8
  %0 = load i64, i64* %candidate.addr, align 8
  %sub = sub nsw i64 %0, 5
  %1 = inttoptr i64 %sub to i8*
  %2 = bitcast i8* %1 to %struct.frame*
  store %struct.frame* %2, %struct.frame** %c, align 8
  %3 = load i64, i64* %frame.addr, align 8
  %sub1 = sub nsw i64 %3, 5
  %4 = inttoptr i64 %sub1 to i8*
  %5 = bitcast i8* %4 to %struct.frame*
  store %struct.frame* %5, %struct.frame** %f, align 8
  %6 = load %struct.frame*, %struct.frame** %c, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 26
  %7 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %7, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 1
  br i1 %cmp, label %lor.lhs.false, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %8 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method2 = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 26
  %9 = bitcast i48* %output_method2 to i64*
  %bf.load3 = load i64, i64* %9, align 8
  %bf.lshr4 = lshr i64 %bf.load3, 23
  %bf.clear5 = and i64 %bf.lshr4, 7
  %bf.cast6 = trunc i64 %bf.clear5 to i32
  %cmp7 = icmp eq i32 %bf.cast6, 1
  br i1 %cmp7, label %lor.lhs.false, label %land.lhs.true.8

land.lhs.true.8:                                  ; preds = %land.lhs.true
  %10 = load %struct.frame*, %struct.frame** %c, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 61
  %11 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %kboard = getelementptr inbounds %struct.terminal, %struct.terminal* %11, i32 0, i32 10
  %12 = load %struct.kboard*, %struct.kboard** %kboard, align 8
  %13 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal9 = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 61
  %14 = load %struct.terminal*, %struct.terminal** %terminal9, align 8
  %kboard10 = getelementptr inbounds %struct.terminal, %struct.terminal* %14, i32 0, i32 10
  %15 = load %struct.kboard*, %struct.kboard** %kboard10, align 8
  %cmp11 = icmp eq %struct.kboard* %12, %15
  br i1 %cmp11, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.8, %land.lhs.true, %entry
  %16 = load %struct.frame*, %struct.frame** %c, align 8
  %output_method12 = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 26
  %17 = bitcast i48* %output_method12 to i64*
  %bf.load13 = load i64, i64* %17, align 8
  %bf.lshr14 = lshr i64 %bf.load13, 23
  %bf.clear15 = and i64 %bf.lshr14, 7
  %bf.cast16 = trunc i64 %bf.clear15 to i32
  %cmp17 = icmp eq i32 %bf.cast16, 1
  br i1 %cmp17, label %land.lhs.true.18, label %if.end.110

land.lhs.true.18:                                 ; preds = %lor.lhs.false
  %18 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method19 = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 26
  %19 = bitcast i48* %output_method19 to i64*
  %bf.load20 = load i64, i64* %19, align 8
  %bf.lshr21 = lshr i64 %bf.load20, 23
  %bf.clear22 = and i64 %bf.lshr21, 7
  %bf.cast23 = trunc i64 %bf.clear22 to i32
  %cmp24 = icmp eq i32 %bf.cast23, 1
  br i1 %cmp24, label %land.lhs.true.25, label %if.end.110

land.lhs.true.25:                                 ; preds = %land.lhs.true.18
  %20 = load %struct.frame*, %struct.frame** %c, align 8
  %output_method26 = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 26
  %21 = bitcast i48* %output_method26 to i64*
  %bf.load27 = load i64, i64* %21, align 8
  %bf.lshr28 = lshr i64 %bf.load27, 23
  %bf.clear29 = and i64 %bf.lshr28, 7
  %bf.cast30 = trunc i64 %bf.clear29 to i32
  %cmp31 = icmp eq i32 %bf.cast30, 1
  br i1 %cmp31, label %cond.true, label %lor.lhs.false.32

lor.lhs.false.32:                                 ; preds = %land.lhs.true.25
  %22 = load %struct.frame*, %struct.frame** %c, align 8
  %output_method33 = getelementptr inbounds %struct.frame, %struct.frame* %22, i32 0, i32 26
  %23 = bitcast i48* %output_method33 to i64*
  %bf.load34 = load i64, i64* %23, align 8
  %bf.lshr35 = lshr i64 %bf.load34, 23
  %bf.clear36 = and i64 %bf.lshr35, 7
  %bf.cast37 = trunc i64 %bf.clear36 to i32
  %cmp38 = icmp eq i32 %bf.cast37, 3
  br i1 %cmp38, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false.32, %land.lhs.true.25
  %24 = load %struct.frame*, %struct.frame** %c, align 8
  %terminal39 = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 61
  %25 = load %struct.terminal*, %struct.terminal** %terminal39, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %25, i32 0, i32 12
  %tty = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %26 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false.32
  call void @emacs_abort() #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %27, %cond.true
  %cond = phi %struct.tty_display_info* [ %26, %cond.true ], [ null, %27 ]
  %28 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method40 = getelementptr inbounds %struct.frame, %struct.frame* %28, i32 0, i32 26
  %29 = bitcast i48* %output_method40 to i64*
  %bf.load41 = load i64, i64* %29, align 8
  %bf.lshr42 = lshr i64 %bf.load41, 23
  %bf.clear43 = and i64 %bf.lshr42, 7
  %bf.cast44 = trunc i64 %bf.clear43 to i32
  %cmp45 = icmp eq i32 %bf.cast44, 1
  br i1 %cmp45, label %cond.true.53, label %lor.lhs.false.46

lor.lhs.false.46:                                 ; preds = %cond.end
  %30 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method47 = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 26
  %31 = bitcast i48* %output_method47 to i64*
  %bf.load48 = load i64, i64* %31, align 8
  %bf.lshr49 = lshr i64 %bf.load48, 23
  %bf.clear50 = and i64 %bf.lshr49, 7
  %bf.cast51 = trunc i64 %bf.clear50 to i32
  %cmp52 = icmp eq i32 %bf.cast51, 3
  br i1 %cmp52, label %cond.true.53, label %cond.false.57

cond.true.53:                                     ; preds = %lor.lhs.false.46, %cond.end
  %32 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal54 = getelementptr inbounds %struct.frame, %struct.frame* %32, i32 0, i32 61
  %33 = load %struct.terminal*, %struct.terminal** %terminal54, align 8
  %display_info55 = getelementptr inbounds %struct.terminal, %struct.terminal* %33, i32 0, i32 12
  %tty56 = bitcast %union.display_info* %display_info55 to %struct.tty_display_info**
  %34 = load %struct.tty_display_info*, %struct.tty_display_info** %tty56, align 8
  br label %cond.end.58

cond.false.57:                                    ; preds = %lor.lhs.false.46
  call void @emacs_abort() #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.58

cond.end.58:                                      ; preds = %35, %cond.true.53
  %cond59 = phi %struct.tty_display_info* [ %34, %cond.true.53 ], [ null, %35 ]
  %cmp60 = icmp eq %struct.tty_display_info* %cond, %cond59
  br i1 %cmp60, label %if.then, label %if.end.110

if.then:                                          ; preds = %cond.end.58, %land.lhs.true.8
  %36 = load i64, i64* %minibuf.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp61 = icmp eq i64 %36, %call
  br i1 %cmp61, label %if.then.62, label %if.else

if.then.62:                                       ; preds = %if.then
  %37 = load %struct.frame*, %struct.frame** %c, align 8
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %37, i32 0, i32 5
  %38 = load i64, i64* %root_window, align 8
  %39 = load %struct.frame*, %struct.frame** %c, align 8
  %minibuffer_window = getelementptr inbounds %struct.frame, %struct.frame* %39, i32 0, i32 7
  %40 = load i64, i64* %minibuffer_window, align 8
  %cmp63 = icmp eq i64 %38, %40
  br i1 %cmp63, label %if.end, label %if.then.64

if.then.64:                                       ; preds = %if.then.62
  %41 = load i64, i64* %candidate.addr, align 8
  store i64 %41, i64* %retval
  br label %return

if.end:                                           ; preds = %if.then.62
  br label %if.end.109

if.else:                                          ; preds = %if.then
  %42 = load i64, i64* %minibuf.addr, align 8
  %call65 = call i64 @builtin_lisp_symbol(i32 1005)
  %cmp66 = icmp eq i64 %42, %call65
  br i1 %cmp66, label %if.then.67, label %if.else.74

if.then.67:                                       ; preds = %if.else
  %43 = load %struct.frame*, %struct.frame** %c, align 8
  %visible = getelementptr inbounds %struct.frame, %struct.frame* %43, i32 0, i32 26
  %44 = bitcast i48* %visible to i64*
  %bf.load68 = load i64, i64* %44, align 8
  %bf.lshr69 = lshr i64 %bf.load68, 10
  %bf.clear70 = and i64 %bf.lshr69, 3
  %bf.cast71 = trunc i64 %bf.clear70 to i32
  %tobool = icmp ne i32 %bf.cast71, 0
  br i1 %tobool, label %if.then.72, label %if.end.73

if.then.72:                                       ; preds = %if.then.67
  %45 = load i64, i64* %candidate.addr, align 8
  store i64 %45, i64* %retval
  br label %return

if.end.73:                                        ; preds = %if.then.67
  br label %if.end.108

if.else.74:                                       ; preds = %if.else
  %46 = load i64, i64* %minibuf.addr, align 8
  %call75 = call zeroext i1 @WINDOWP(i64 %46)
  br i1 %call75, label %if.then.76, label %if.else.89

if.then.76:                                       ; preds = %if.else.74
  %47 = load %struct.frame*, %struct.frame** %c, align 8
  %minibuffer_window77 = getelementptr inbounds %struct.frame, %struct.frame* %47, i32 0, i32 7
  %48 = load i64, i64* %minibuffer_window77, align 8
  %49 = load i64, i64* %minibuf.addr, align 8
  %cmp78 = icmp eq i64 %48, %49
  br i1 %cmp78, label %if.then.87, label %lor.lhs.false.79

lor.lhs.false.79:                                 ; preds = %if.then.76
  %50 = load i64, i64* %minibuf.addr, align 8
  %call80 = call %struct.window* @XWINDOW(i64 %50)
  %frame81 = getelementptr inbounds %struct.window, %struct.window* %call80, i32 0, i32 1
  %51 = load i64, i64* %frame81, align 8
  %52 = load i64, i64* %candidate.addr, align 8
  %cmp82 = icmp eq i64 %51, %52
  br i1 %cmp82, label %if.then.87, label %lor.lhs.false.83

lor.lhs.false.83:                                 ; preds = %lor.lhs.false.79
  %53 = load i64, i64* %minibuf.addr, align 8
  %call84 = call %struct.window* @XWINDOW(i64 %53)
  %frame85 = getelementptr inbounds %struct.window, %struct.window* %call84, i32 0, i32 1
  %54 = load i64, i64* %frame85, align 8
  %55 = load %struct.frame*, %struct.frame** %c, align 8
  %focus_frame = getelementptr inbounds %struct.frame, %struct.frame* %55, i32 0, i32 4
  %56 = load i64, i64* %focus_frame, align 8
  %cmp86 = icmp eq i64 %54, %56
  br i1 %cmp86, label %if.then.87, label %if.end.88

if.then.87:                                       ; preds = %lor.lhs.false.83, %lor.lhs.false.79, %if.then.76
  %57 = load i64, i64* %candidate.addr, align 8
  store i64 %57, i64* %retval
  br label %return

if.end.88:                                        ; preds = %lor.lhs.false.83
  br label %if.end.107

if.else.89:                                       ; preds = %if.else.74
  %58 = load i64, i64* %minibuf.addr, align 8
  %shr = ashr i64 %58, 2
  %cmp90 = icmp eq i64 %shr, 0
  br i1 %cmp90, label %if.then.91, label %if.else.105

if.then.91:                                       ; preds = %if.else.89
  %59 = load %struct.frame*, %struct.frame** %c, align 8
  %visible92 = getelementptr inbounds %struct.frame, %struct.frame* %59, i32 0, i32 26
  %60 = bitcast i48* %visible92 to i64*
  %bf.load93 = load i64, i64* %60, align 8
  %bf.lshr94 = lshr i64 %bf.load93, 10
  %bf.clear95 = and i64 %bf.lshr94, 3
  %bf.cast96 = trunc i64 %bf.clear95 to i32
  %tobool97 = icmp ne i32 %bf.cast96, 0
  br i1 %tobool97, label %if.then.103, label %lor.lhs.false.98

lor.lhs.false.98:                                 ; preds = %if.then.91
  %61 = load %struct.frame*, %struct.frame** %c, align 8
  %iconified = getelementptr inbounds %struct.frame, %struct.frame* %61, i32 0, i32 26
  %62 = bitcast i48* %iconified to i64*
  %bf.load99 = load i64, i64* %62, align 8
  %bf.lshr100 = lshr i64 %bf.load99, 12
  %bf.clear101 = and i64 %bf.lshr100, 1
  %bf.cast102 = trunc i64 %bf.clear101 to i1
  br i1 %bf.cast102, label %if.then.103, label %if.end.104

if.then.103:                                      ; preds = %lor.lhs.false.98, %if.then.91
  %63 = load i64, i64* %candidate.addr, align 8
  store i64 %63, i64* %retval
  br label %return

if.end.104:                                       ; preds = %lor.lhs.false.98
  br label %if.end.106

if.else.105:                                      ; preds = %if.else.89
  %64 = load i64, i64* %candidate.addr, align 8
  store i64 %64, i64* %retval
  br label %return

if.end.106:                                       ; preds = %if.end.104
  br label %if.end.107

if.end.107:                                       ; preds = %if.end.106, %if.end.88
  br label %if.end.108

if.end.108:                                       ; preds = %if.end.107, %if.end.73
  br label %if.end.109

if.end.109:                                       ; preds = %if.end.108, %if.end
  br label %if.end.110

if.end.110:                                       ; preds = %if.end.109, %cond.end.58, %land.lhs.true.18, %lor.lhs.false
  %call111 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call111, i64* %retval
  br label %return

return:                                           ; preds = %if.end.110, %if.else.105, %if.then.103, %if.then.87, %if.then.72, %if.then.64
  %65 = load i64, i64* %retval
  ret i64 %65
}

declare void @x_sync(%struct.frame*) #1

; Function Attrs: nounwind uwtable
define internal void @frame_char_to_pixel_position(%struct.frame* %f, i32 %x, i32 %y, i32* %pix_x, i32* %pix_y) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %pix_x.addr = alloca i32*, align 8
  %pix_y.addr = alloca i32*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32* %pix_x, i32** %pix_x.addr, align 8
  store i32* %pix_y, i32** %pix_y.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 51
  %1 = load i32, i32* %internal_border_width, align 4
  %2 = load i32, i32* %x.addr, align 4
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 59
  %4 = load i32, i32* %column_width, align 4
  %mul = mul nsw i32 %2, %4
  %add = add nsw i32 %1, %mul
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %column_width1 = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 59
  %6 = load i32, i32* %column_width1, align 4
  %div = sdiv i32 %6, 2
  %add2 = add nsw i32 %add, %div
  %7 = load i32*, i32** %pix_x.addr, align 8
  store i32 %add2, i32* %7, align 4
  %8 = load i32, i32* %y.addr, align 4
  %9 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 57
  %10 = load i32, i32* %menu_bar_lines, align 4
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 27
  %12 = load i32, i32* %tool_bar_lines, align 4
  %add3 = add nsw i32 %10, %12
  %cmp = icmp slt i32 %8, %add3
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width4 = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 51
  %14 = load i32, i32* %internal_border_width4, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %14, %cond.false ]
  %15 = load i32, i32* %y.addr, align 4
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 60
  %17 = load i32, i32* %line_height, align 4
  %mul5 = mul nsw i32 %15, %17
  %add6 = add nsw i32 %cond, %mul5
  %18 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %line_height7 = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 60
  %19 = load i32, i32* %line_height7, align 4
  %div8 = sdiv i32 %19, 2
  %add9 = add nsw i32 %add6, %div8
  %20 = load i32*, i32** %pix_y.addr, align 8
  store i32 %add9, i32* %20, align 4
  %21 = load i32*, i32** %pix_x.addr, align 8
  %22 = load i32, i32* %21, align 4
  %cmp10 = icmp slt i32 %22, 0
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %23 = load i32*, i32** %pix_x.addr, align 8
  store i32 0, i32* %23, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  %24 = load i32*, i32** %pix_x.addr, align 8
  %25 = load i32, i32* %24, align 4
  %26 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_width = getelementptr inbounds %struct.frame, %struct.frame* %26, i32 0, i32 46
  %27 = load i32, i32* %pixel_width, align 4
  %cmp11 = icmp sgt i32 %25, %27
  br i1 %cmp11, label %if.then.12, label %if.end.14

if.then.12:                                       ; preds = %if.end
  %28 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_width13 = getelementptr inbounds %struct.frame, %struct.frame* %28, i32 0, i32 46
  %29 = load i32, i32* %pixel_width13, align 4
  %30 = load i32*, i32** %pix_x.addr, align 8
  store i32 %29, i32* %30, align 4
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.12, %if.end
  %31 = load i32*, i32** %pix_y.addr, align 8
  %32 = load i32, i32* %31, align 4
  %cmp15 = icmp slt i32 %32, 0
  br i1 %cmp15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.end.14
  %33 = load i32*, i32** %pix_y.addr, align 8
  store i32 0, i32* %33, align 4
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.16, %if.end.14
  %34 = load i32*, i32** %pix_y.addr, align 8
  %35 = load i32, i32* %34, align 4
  %36 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_height = getelementptr inbounds %struct.frame, %struct.frame* %36, i32 0, i32 47
  %37 = load i32, i32* %pixel_height, align 4
  %cmp18 = icmp sgt i32 %35, %37
  br i1 %cmp18, label %if.then.19, label %if.end.21

if.then.19:                                       ; preds = %if.end.17
  %38 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_height20 = getelementptr inbounds %struct.frame, %struct.frame* %38, i32 0, i32 47
  %39 = load i32, i32* %pixel_height20, align 4
  %40 = load i32*, i32** %pix_y.addr, align 8
  store i32 %39, i32* %40, align 4
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.19, %if.end.17
  ret void
}

declare void @bset_display_time(%struct.buffer*, i64) #1

declare i64 @Fcurrent_time() #1

; Function Attrs: nounwind uwtable
define internal i32 @frame_name_fnn_p(i8* %str, i64 %len) #0 {
entry:
  %retval = alloca i32, align 4
  %str.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %p = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load i64, i64* %len.addr, align 8
  %cmp = icmp sgt i64 %0, 1
  br i1 %cmp, label %land.lhs.true, label %if.end.23

land.lhs.true:                                    ; preds = %entry
  %1 = load i8*, i8** %str.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 0
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  %cmp1 = icmp eq i32 %conv, 70
  br i1 %cmp1, label %land.lhs.true.3, label %if.end.23

land.lhs.true.3:                                  ; preds = %land.lhs.true
  %3 = load i8*, i8** %str.addr, align 8
  %arrayidx4 = getelementptr inbounds i8, i8* %3, i64 1
  %4 = load i8, i8* %arrayidx4, align 1
  %conv5 = sext i8 %4 to i32
  %cmp6 = icmp sle i32 48, %conv5
  br i1 %cmp6, label %land.lhs.true.8, label %if.end.23

land.lhs.true.8:                                  ; preds = %land.lhs.true.3
  %5 = load i8*, i8** %str.addr, align 8
  %arrayidx9 = getelementptr inbounds i8, i8* %5, i64 1
  %6 = load i8, i8* %arrayidx9, align 1
  %conv10 = sext i8 %6 to i32
  %cmp11 = icmp sle i32 %conv10, 57
  br i1 %cmp11, label %if.then, label %if.end.23

if.then:                                          ; preds = %land.lhs.true.8
  %7 = load i8*, i8** %str.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 2
  store i8* %add.ptr, i8** %p, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %8 = load i8*, i8** %p, align 8
  %9 = load i8, i8* %8, align 1
  %conv13 = sext i8 %9 to i32
  %cmp14 = icmp sle i32 48, %conv13
  br i1 %cmp14, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %10 = load i8*, i8** %p, align 8
  %11 = load i8, i8* %10, align 1
  %conv16 = sext i8 %11 to i32
  %cmp17 = icmp sle i32 %conv16, 57
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %12 = phi i1 [ false, %while.cond ], [ %cmp17, %land.rhs ]
  br i1 %12, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %13 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %13, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %14 = load i8*, i8** %p, align 8
  %15 = load i8*, i8** %str.addr, align 8
  %16 = load i64, i64* %len.addr, align 8
  %add.ptr19 = getelementptr inbounds i8, i8* %15, i64 %16
  %cmp20 = icmp eq i8* %14, %add.ptr19
  br i1 %cmp20, label %if.then.22, label %if.end

if.then.22:                                       ; preds = %while.end
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %while.end
  br label %if.end.23

if.end.23:                                        ; preds = %if.end, %land.lhs.true.8, %land.lhs.true.3, %land.lhs.true, %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.23, %if.then.22
  %17 = load i32, i32* %retval
  ret i32 %17
}

declare i64 @Fstring_equal(i64, i64) #1

; Function Attrs: nounwind readonly
declare i32 @strncmp(i8*, i8*, i64) #6

declare %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget*) #1

declare i64 @gdk_x11_drawable_get_xid(%struct._GdkDrawable*) #1

declare i8* @lispstpcpy(i8*, i64) #1

declare i8* @x_get_string_resource(%struct._XrmHashBucketRec*, i8*, i8*) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn }
attributes #8 = { nounwind readonly }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
