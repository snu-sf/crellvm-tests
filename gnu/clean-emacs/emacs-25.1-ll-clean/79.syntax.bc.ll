; ModuleID = './src/syntax.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.gl_state_s = type { i64, i64, i64, i8, i64, i64, i64, i64, i64, i8, %struct.interval*, %struct.interval*, i64 }
%struct.interval = type { i64, i64, %struct.interval*, %struct.interval*, %union.anon, i8, i64 }
%union.anon = type { %struct.interval* }
%struct.buffer = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.buffer_text, %struct.buffer_text*, %struct.buffer*, i64, i64, i64, i64, i64, i64, %struct.buffer*, i32, i32, [50 x i8], %struct.timespec, i64, i64, i64, i64, i64, %struct.region_cache*, %struct.region_cache*, %struct.region_cache*, i8, %struct.Lisp_Overlay*, %struct.Lisp_Overlay*, i64, i64 }
%struct.vectorlike_header = type { i64 }
%struct.buffer_text = type { i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.interval*, %struct.Lisp_Marker*, i8 }
%struct.Lisp_Marker = type { i32, %struct.buffer*, %struct.Lisp_Marker*, i64, i64 }
%struct.timespec = type { i64, i64 }
%struct.region_cache = type opaque
%struct.Lisp_Overlay = type { i32, %struct.Lisp_Overlay*, i64, i64, i64 }
%struct.emacs_globals = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Lisp_Boolfwd = type { i32, i8* }
%struct.Lisp_Intfwd = type { i32, i64* }
%struct.Lisp_Objfwd = type { i32, i64* }
%struct.Lisp_Subr = type { %struct.vectorlike_header, %union.anon.1, i16, i16, i8*, i8*, i8* }
%union.anon.1 = type { i64 ()* }
%struct.Lisp_Char_Table = type { %struct.vectorlike_header, i64, i64, i64, i64, [64 x i64], [0 x i64] }
%struct.Lisp_Cons = type { i64, %union.anon.0 }
%union.anon.0 = type { i64 }
%union.Aligned_String = type { %struct.Lisp_String }
%struct.Lisp_String = type { i64, i64, %struct.interval*, i8* }
%struct.lisp_parse_state = type { i64, i32, i64, i32, i8, i64, i64, i64, i64, i64, i64, i64 }
%struct.level = type { i64, i64 }

@gl_state = common global %struct.gl_state_s zeroinitializer, align 8
@current_buffer = external global %struct.buffer*, align 8
@globals = external global %struct.emacs_globals, align 8
@.str = private unnamed_addr constant [53 x i8] c"Error in syntax_table logic for to-the-end intervals\00", align 1
@.str.1 = private unnamed_addr constant [45 x i8] c"Error in syntax_table logic for intervals <-\00", align 1
@.str.2 = private unnamed_addr constant [45 x i8] c"Error in syntax_table logic for intervals ->\00", align 1
@buffer_defaults = external global %struct.buffer, align 8
@buffer_local_flags = external global %struct.buffer, align 8
@last_per_buffer_idx = external global i32, align 4
@syntax_spec_code = constant [256 x i8] calign 16
@syntax_code_spec = constant [16 x i8] c" .w_()'\22$\5C/<>@!|", align 16
@.str.3 = private unnamed_addr constant [38 x i8] c"Invalid syntax description letter: %c\00", align 1
@Vsyntax_code_object = internal global i64 0, align 8
@.str.4 = private unnamed_addr constant [8 x i8] c"default\00", align 1
@.str.5 = private unnamed_addr constant [22 x i8] c"deeper char-table ...\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"invalid\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"3\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"4\00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"p\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"b\00", align 1
@.str.14 = private unnamed_addr constant [2 x i8] c"c\00", align 1
@.str.15 = private unnamed_addr constant [2 x i8] c"n\00", align 1
@.str.16 = private unnamed_addr constant [15 x i8] c"\09which means: \00", align 1
@.str.17 = private unnamed_addr constant [11 x i8] c"whitespace\00", align 1
@.str.18 = private unnamed_addr constant [12 x i8] c"punctuation\00", align 1
@.str.19 = private unnamed_addr constant [5 x i8] c"word\00", align 1
@.str.20 = private unnamed_addr constant [7 x i8] c"symbol\00", align 1
@.str.21 = private unnamed_addr constant [5 x i8] c"open\00", align 1
@.str.22 = private unnamed_addr constant [6 x i8] c"close\00", align 1
@.str.23 = private unnamed_addr constant [7 x i8] c"prefix\00", align 1
@.str.24 = private unnamed_addr constant [7 x i8] c"string\00", align 1
@.str.25 = private unnamed_addr constant [5 x i8] c"math\00", align 1
@.str.26 = private unnamed_addr constant [7 x i8] c"escape\00", align 1
@.str.27 = private unnamed_addr constant [10 x i8] c"charquote\00", align 1
@.str.28 = private unnamed_addr constant [8 x i8] c"comment\00", align 1
@.str.29 = private unnamed_addr constant [11 x i8] c"endcomment\00", align 1
@.str.30 = private unnamed_addr constant [8 x i8] c"inherit\00", align 1
@.str.31 = private unnamed_addr constant [14 x i8] c"comment fence\00", align 1
@.str.32 = private unnamed_addr constant [13 x i8] c"string fence\00", align 1
@.str.33 = private unnamed_addr constant [11 x i8] c", matches \00", align 1
@.str.34 = private unnamed_addr constant [56 x i8] c",\0A\09  is the first character of a comment-start sequence\00", align 1
@.str.35 = private unnamed_addr constant [57 x i8] c",\0A\09  is the second character of a comment-start sequence\00", align 1
@.str.36 = private unnamed_addr constant [54 x i8] c",\0A\09  is the first character of a comment-end sequence\00", align 1
@.str.37 = private unnamed_addr constant [55 x i8] c",\0A\09  is the second character of a comment-end sequence\00", align 1
@.str.38 = private unnamed_addr constant [19 x i8] c" (comment style b)\00", align 1
@.str.39 = private unnamed_addr constant [19 x i8] c" (comment style c)\00", align 1
@.str.40 = private unnamed_addr constant [12 x i8] c" (nestable)\00", align 1
@.str.41 = private unnamed_addr constant [55 x i8] c",\0A\09  is a prefix character for `backward-prefix-chars'\00", align 1
@immediate_quit = external global i8, align 1
@pending_signals = external global i8, align 1
@.str.42 = private unnamed_addr constant [11 x i8] c"_-+*/&|<>=\00", align 1
@.str.43 = private unnamed_addr constant [13 x i8] c".,;:?!#@~^'`\00", align 1
@re_match_object = external global i64, align 8
@.str.44 = private unnamed_addr constant [11 x i8] c"Scan error\00", align 1
@syms_of_syntax.b_fwd = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.45 = private unnamed_addr constant [27 x i8] c"parse-sexp-ignore-comments\00", align 1
@syms_of_syntax.b_fwd.46 = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.47 = private unnamed_addr constant [29 x i8] c"parse-sexp-lookup-properties\00", align 1
@syms_of_syntax.i_fwd = internal global %struct.Lisp_Intfwd zeroinitializer, align 8
@.str.48 = private unnamed_addr constant [24 x i8] c"syntax-propertize--done\00", align 1
@syms_of_syntax.b_fwd.49 = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.50 = private unnamed_addr constant [22 x i8] c"words-include-escapes\00", align 1
@syms_of_syntax.b_fwd.51 = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.52 = private unnamed_addr constant [27 x i8] c"multibyte-syntax-as-symbol\00", align 1
@syms_of_syntax.b_fwd.53 = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.54 = private unnamed_addr constant [38 x i8] c"open-paren-in-column-0-is-defun-start\00", align 1
@syms_of_syntax.o_fwd = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.55 = private unnamed_addr constant [34 x i8] c"find-word-boundary-function-table\00", align 1
@syms_of_syntax.b_fwd.56 = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.57 = private unnamed_addr constant [27 x i8] c"comment-end-can-be-escaped\00", align 1
@Ssyntax_table = internal global %struct.Lisp_Subr { %struct.vectorlike_header { i64 167772160 }, %union.anon.1 { i64 ()* @Fsyntax_table }, i16 0, i16 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.64, i32 0, i32 0), i8* null, i8* null }, align 8
@Sstandard_syntax_table = internal global %struct.Lisp_Subr { %struct.vectorlike_header { i64 167772160 }, %union.anon.1 { i64 ()* @Fstandard_syntax_table }, i16 0, i16 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i32 0, i32 0), i8* null, i8* null }, align 8
@Sbackward_prefix_chars = internal global %struct.Lisp_Subr { %struct.vectorlike_header { i64 167772160 }, %union.anon.1 { i64 ()* @Fbackward_prefix_chars }, i16 0, i16 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.83, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.58 = private unnamed_addr constant [52 x i8] c"parse-sexp-propertize-function modified the buffer!\00", align 1
@.str.59 = private unnamed_addr constant [68 x i8] c"parse-sexp-propertize-function did not move syntax-propertize--done\00", align 1
@.str.60 = private unnamed_addr constant [30 x i8] c"Invalid ISO C character class\00", align 1
@find_start_value_byte = internal global i64 0, align 8
@find_start_value = internal global i64 0, align 8
@find_start_buffer = internal global %struct.buffer* null, align 8
@find_start_pos = internal global i64 0, align 8
@find_start_begv = internal global i64 0, align 8
@find_start_modiff = internal global i64 0, align 8
@.str.61 = private unnamed_addr constant [39 x i8] c"Containing expression ends prematurely\00", align 1
@.str.62 = private unnamed_addr constant [23 x i8] c"Unbalanced parentheses\00", align 1
@.str.63 = private unnamed_addr constant [15 x i8] c"syntax-table-p\00", align 1
@Ssyntax_table_p = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fsyntax_table_p }, i16 1, i16 1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.63, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.64 = private unnamed_addr constant [13 x i8] c"syntax-table\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"standard-syntax-table\00", align 1
@.str.66 = private unnamed_addr constant [18 x i8] c"copy-syntax-table\00", align 1
@Scopy_syntax_table = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fcopy_syntax_table }, i16 0, i16 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.66, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.67 = private unnamed_addr constant [17 x i8] c"set-syntax-table\00", align 1
@Sset_syntax_table = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fset_syntax_table }, i16 1, i16 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.67, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.68 = private unnamed_addr constant [12 x i8] c"char-syntax\00", align 1
@Schar_syntax = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fchar_syntax }, i16 1, i16 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.68, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.69 = private unnamed_addr constant [15 x i8] c"matching-paren\00", align 1
@Smatching_paren = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fmatching_paren }, i16 1, i16 1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.69, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.70 = private unnamed_addr constant [17 x i8] c"string-to-syntax\00", align 1
@Sstring_to_syntax = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fstring_to_syntax }, i16 1, i16 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.70, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.71 = private unnamed_addr constant [20 x i8] c"modify-syntax-entry\00", align 1
@.str.72 = private unnamed_addr constant [52 x i8] c"cSet syntax for character: \0AsSet syntax for %s to: \00", align 1
@Smodify_syntax_entry = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64)* } { i64 (i64, i64, i64)* @Fmodify_syntax_entry }, i16 2, i16 3, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.71, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.72, i32 0, i32 0), i8* null }, align 8
@.str.73 = private unnamed_addr constant [31 x i8] c"internal-describe-syntax-value\00", align 1
@Sinternal_describe_syntax_value = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Finternal_describe_syntax_value }, i16 1, i16 1, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.73, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.74 = private unnamed_addr constant [13 x i8] c"forward-word\00", align 1
@.str.75 = private unnamed_addr constant [3 x i8] c"^p\00", align 1
@Sforward_word = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fforward_word }, i16 0, i16 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.74, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.75, i32 0, i32 0), i8* null }, align 8
@.str.76 = private unnamed_addr constant [19 x i8] c"skip-chars-forward\00", align 1
@Sskip_chars_forward = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fskip_chars_forward }, i16 1, i16 2, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.76, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.77 = private unnamed_addr constant [20 x i8] c"skip-chars-backward\00", align 1
@Sskip_chars_backward = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fskip_chars_backward }, i16 1, i16 2, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.77, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.78 = private unnamed_addr constant [20 x i8] c"skip-syntax-forward\00", align 1
@Sskip_syntax_forward = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fskip_syntax_forward }, i16 1, i16 2, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.78, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.79 = private unnamed_addr constant [21 x i8] c"skip-syntax-backward\00", align 1
@Sskip_syntax_backward = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fskip_syntax_backward }, i16 1, i16 2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.79, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.80 = private unnamed_addr constant [16 x i8] c"forward-comment\00", align 1
@Sforward_comment = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fforward_comment }, i16 1, i16 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.80, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.81 = private unnamed_addr constant [11 x i8] c"scan-lists\00", align 1
@Sscan_lists = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64)* } { i64 (i64, i64, i64)* @Fscan_lists }, i16 3, i16 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.81, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.82 = private unnamed_addr constant [11 x i8] c"scan-sexps\00", align 1
@Sscan_sexps = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fscan_sexps }, i16 2, i16 2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.82, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.83 = private unnamed_addr constant [22 x i8] c"backward-prefix-chars\00", align 1
@.str.84 = private unnamed_addr constant [19 x i8] c"parse-partial-sexp\00", align 1
@Sparse_partial_sexp = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64, i64, i64, i64)* } { i64 (i64, i64, i64, i64, i64, i64)* @Fparse_partial_sexp }, i16 2, i16 6, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.84, i32 0, i32 0), i8* null, i8* null }, align 8

; Function Attrs: nounwind uwtable
define zeroext i1 @syntax_prefix_flag_p(i32 %c) #0 {
entry:
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  %call = call i32 @syntax_property_with_flags(i32 %0, i1 zeroext true)
  %call1 = call zeroext i1 @SYNTAX_FLAGS_PREFIX(i32 %call)
  ret i1 %call1
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @SYNTAX_FLAGS_PREFIX(i32 %flags) #0 {
entry:
  %flags.addr = alloca i32, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %flags.addr, align 4
  %shr = ashr i32 %0, 20
  %and = and i32 %shr, 1
  %tobool = icmp ne i32 %and, 0
  ret i1 %tobool
}

declare i32 @syntax_property_with_flags(i32, i1 zeroext) #1

; Function Attrs: nounwind uwtable
define void @SETUP_SYNTAX_TABLE_FOR_OBJECT(i64 %object, i64 %from, i64 %count) #0 {
entry:
  %object.addr = alloca i64, align 8
  %from.addr = alloca i64, align 8
  %count.addr = alloca i64, align 8
  %buf = alloca %struct.buffer*, align 8
  store i64 %object, i64* %object.addr, align 8
  store i64 %from, i64* %from.addr, align 8
  store i64 %count, i64* %count.addr, align 8
  call void @SETUP_BUFFER_SYNTAX_TABLE()
  %0 = load i64, i64* %object.addr, align 8
  store i64 %0, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 0), align 8
  %1 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 0), align 8
  %call = call zeroext i1 @BUFFERP(i64 %1)
  br i1 %call, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 0), align 8
  %call1 = call %struct.buffer* @XBUFFER(i64 %2)
  store %struct.buffer* %call1, %struct.buffer** %buf, align 8
  store i64 1, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 7), align 8
  %3 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %4 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp = icmp eq %struct.buffer* %3, %4
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %5 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %5, i32 0, i32 79
  %6 = load i64, i64* %zv, align 8
  br label %cond.end.9

cond.false:                                       ; preds = %if.then
  %7 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %zv_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %7, i32 0, i32 47
  %8 = load i64, i64* %zv_marker_, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp3 = icmp eq i64 %8, %call2
  br i1 %cmp3, label %cond.true.4, label %cond.false.6

cond.true.4:                                      ; preds = %cond.false
  %9 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %zv5 = getelementptr inbounds %struct.buffer, %struct.buffer* %9, i32 0, i32 79
  %10 = load i64, i64* %zv5, align 8
  br label %cond.end

cond.false.6:                                     ; preds = %cond.false
  %11 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %zv_marker_7 = getelementptr inbounds %struct.buffer, %struct.buffer* %11, i32 0, i32 47
  %12 = load i64, i64* %zv_marker_7, align 8
  %call8 = call i64 @marker_position(i64 %12)
  br label %cond.end

cond.end:                                         ; preds = %cond.false.6, %cond.true.4
  %cond = phi i64 [ %10, %cond.true.4 ], [ %call8, %cond.false.6 ]
  br label %cond.end.9

cond.end.9:                                       ; preds = %cond.end, %cond.true
  %cond10 = phi i64 [ %6, %cond.true ], [ %cond, %cond.end ]
  %13 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %14 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp11 = icmp eq %struct.buffer* %13, %14
  br i1 %cmp11, label %cond.true.12, label %cond.false.13

cond.true.12:                                     ; preds = %cond.end.9
  %15 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %15, i32 0, i32 77
  %16 = load i64, i64* %begv, align 8
  br label %cond.end.23

cond.false.13:                                    ; preds = %cond.end.9
  %17 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %begv_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %17, i32 0, i32 46
  %18 = load i64, i64* %begv_marker_, align 8
  %call14 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp15 = icmp eq i64 %18, %call14
  br i1 %cmp15, label %cond.true.16, label %cond.false.18

cond.true.16:                                     ; preds = %cond.false.13
  %19 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %begv17 = getelementptr inbounds %struct.buffer, %struct.buffer* %19, i32 0, i32 77
  %20 = load i64, i64* %begv17, align 8
  br label %cond.end.21

cond.false.18:                                    ; preds = %cond.false.13
  %21 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %begv_marker_19 = getelementptr inbounds %struct.buffer, %struct.buffer* %21, i32 0, i32 46
  %22 = load i64, i64* %begv_marker_19, align 8
  %call20 = call i64 @marker_position(i64 %22)
  br label %cond.end.21

cond.end.21:                                      ; preds = %cond.false.18, %cond.true.16
  %cond22 = phi i64 [ %20, %cond.true.16 ], [ %call20, %cond.false.18 ]
  br label %cond.end.23

cond.end.23:                                      ; preds = %cond.end.21, %cond.true.12
  %cond24 = phi i64 [ %16, %cond.true.12 ], [ %cond22, %cond.end.21 ]
  %sub = sub nsw i64 %cond10, %cond24
  %add = add nsw i64 %sub, 1
  store i64 %add, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 8), align 8
  %23 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %24 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp25 = icmp eq %struct.buffer* %23, %24
  br i1 %cmp25, label %cond.true.26, label %cond.false.28

cond.true.26:                                     ; preds = %cond.end.23
  %25 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv27 = getelementptr inbounds %struct.buffer, %struct.buffer* %25, i32 0, i32 77
  %26 = load i64, i64* %begv27, align 8
  br label %cond.end.39

cond.false.28:                                    ; preds = %cond.end.23
  %27 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %begv_marker_29 = getelementptr inbounds %struct.buffer, %struct.buffer* %27, i32 0, i32 46
  %28 = load i64, i64* %begv_marker_29, align 8
  %call30 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp31 = icmp eq i64 %28, %call30
  br i1 %cmp31, label %cond.true.32, label %cond.false.34

cond.true.32:                                     ; preds = %cond.false.28
  %29 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %begv33 = getelementptr inbounds %struct.buffer, %struct.buffer* %29, i32 0, i32 77
  %30 = load i64, i64* %begv33, align 8
  br label %cond.end.37

cond.false.34:                                    ; preds = %cond.false.28
  %31 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %begv_marker_35 = getelementptr inbounds %struct.buffer, %struct.buffer* %31, i32 0, i32 46
  %32 = load i64, i64* %begv_marker_35, align 8
  %call36 = call i64 @marker_position(i64 %32)
  br label %cond.end.37

cond.end.37:                                      ; preds = %cond.false.34, %cond.true.32
  %cond38 = phi i64 [ %30, %cond.true.32 ], [ %call36, %cond.false.34 ]
  br label %cond.end.39

cond.end.39:                                      ; preds = %cond.end.37, %cond.true.26
  %cond40 = phi i64 [ %26, %cond.true.26 ], [ %cond38, %cond.end.37 ]
  %sub41 = sub nsw i64 %cond40, 1
  store i64 %sub41, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 12), align 8
  br label %if.end.59

if.else:                                          ; preds = %entry
  %33 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 0), align 8
  %call42 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp43 = icmp eq i64 %33, %call42
  br i1 %cmp43, label %if.then.44, label %if.else.51

if.then.44:                                       ; preds = %if.else
  store i64 1, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 7), align 8
  %34 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv45 = getelementptr inbounds %struct.buffer, %struct.buffer* %34, i32 0, i32 79
  %35 = load i64, i64* %zv45, align 8
  %36 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv46 = getelementptr inbounds %struct.buffer, %struct.buffer* %36, i32 0, i32 77
  %37 = load i64, i64* %begv46, align 8
  %sub47 = sub nsw i64 %35, %37
  %add48 = add nsw i64 %sub47, 1
  store i64 %add48, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 8), align 8
  %38 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv49 = getelementptr inbounds %struct.buffer, %struct.buffer* %38, i32 0, i32 77
  %39 = load i64, i64* %begv49, align 8
  %sub50 = sub nsw i64 %39, 1
  store i64 %sub50, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 12), align 8
  br label %if.end.58

if.else.51:                                       ; preds = %if.else
  %40 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 0), align 8
  %call52 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp53 = icmp eq i64 %40, %call52
  br i1 %cmp53, label %if.then.54, label %if.else.55

if.then.54:                                       ; preds = %if.else.51
  store i64 0, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 7), align 8
  store i64 9223372036854775807, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 8), align 8
  store i64 0, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 12), align 8
  br label %if.end

if.else.55:                                       ; preds = %if.else.51
  store i64 0, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 7), align 8
  %41 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 0), align 8
  %call56 = call i64 @SCHARS(i64 %41)
  %add57 = add nsw i64 1, %call56
  store i64 %add57, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 8), align 8
  store i64 0, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 12), align 8
  br label %if.end

if.end:                                           ; preds = %if.else.55, %if.then.54
  br label %if.end.58

if.end.58:                                        ; preds = %if.end, %if.then.44
  br label %if.end.59

if.end.59:                                        ; preds = %if.end.58, %cond.end.39
  %42 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 480), align 1
  %tobool = trunc i8 %42 to i1
  br i1 %tobool, label %if.then.60, label %if.end.65

if.then.60:                                       ; preds = %if.end.59
  %43 = load i64, i64* %from.addr, align 8
  %44 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 12), align 8
  %add61 = add nsw i64 %43, %44
  %45 = load i64, i64* %count.addr, align 8
  %cmp62 = icmp sle i64 %45, 0
  %conv = zext i1 %cmp62 to i32
  %conv63 = sext i32 %conv to i64
  %sub64 = sub nsw i64 %add61, %conv63
  %46 = load i64, i64* %count.addr, align 8
  %47 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 0), align 8
  call void @update_syntax_table(i64 %sub64, i64 %46, i1 zeroext true, i64 %47)
  br label %if.end.65

if.end.65:                                        ; preds = %if.then.60, %if.end.59
  ret void
}

declare void @SETUP_BUFFER_SYNTAX_TABLE() #1

declare zeroext i1 @BUFFERP(i64) #1

declare %struct.buffer* @XBUFFER(i64) #1

declare i64 @builtin_lisp_symbol(i32) #1

declare i64 @marker_position(i64) #1

declare i64 @SCHARS(i64) #1

; Function Attrs: nounwind uwtable
define void @update_syntax_table(i64 %charpos, i64 %count, i1 zeroext %init, i64 %object) #0 {
entry:
  %charpos.addr = alloca i64, align 8
  %count.addr = alloca i64, align 8
  %init.addr = alloca i8, align 1
  %object.addr = alloca i64, align 8
  %tmp_table = alloca i64, align 8
  %cnt = alloca i32, align 4
  %invalidate = alloca i8, align 1
  %i = alloca %struct.interval*, align 8
  store i64 %charpos, i64* %charpos.addr, align 8
  store i64 %count, i64* %count.addr, align 8
  %frombool = zext i1 %init to i8
  store i8 %frombool, i8* %init.addr, align 1
  store i64 %object, i64* %object.addr, align 8
  store i32 0, i32* %cnt, align 4
  store i8 1, i8* %invalidate, align 1
  %0 = load i8, i8* %init.addr, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %if.then, label %if.end.107

if.then:                                          ; preds = %entry
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 6), align 8
  %1 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 7), align 8
  store i64 %1, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 1), align 8
  %2 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 8), align 8
  store i64 %2, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 2), align 8
  %3 = load i64, i64* %charpos.addr, align 8
  %4 = load i64, i64* %object.addr, align 8
  %call1 = call %struct.interval* @interval_of(i64 %3, i64 %4)
  store %struct.interval* %call1, %struct.interval** %i, align 8
  %5 = load %struct.interval*, %struct.interval** %i, align 8
  store %struct.interval* %5, %struct.interval** getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 10), align 8
  store %struct.interval* %5, %struct.interval** getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 11), align 8
  store i8 0, i8* %invalidate, align 1
  %6 = load %struct.interval*, %struct.interval** %i, align 8
  %tobool2 = icmp ne %struct.interval* %6, null
  br i1 %tobool2, label %if.end, label %if.then.3

if.then.3:                                        ; preds = %if.then
  br label %if.end.420

if.end:                                           ; preds = %if.then
  br label %while.cond

while.cond:                                       ; preds = %if.end.70, %if.end
  %7 = load %struct.interval*, %struct.interval** %i, align 8
  %up_obj = getelementptr inbounds %struct.interval, %struct.interval* %7, i32 0, i32 5
  %bf.load = load i8, i8* %up_obj, align 8
  %bf.clear = and i8 %bf.load, 1
  %bf.cast = trunc i8 %bf.clear to i1
  br i1 %bf.cast, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond
  %8 = load %struct.interval*, %struct.interval** %i, align 8
  %up = getelementptr inbounds %struct.interval, %struct.interval* %8, i32 0, i32 4
  %interval = bitcast %union.anon* %up to %struct.interval**
  %9 = load %struct.interval*, %struct.interval** %interval, align 8
  %cmp = icmp eq %struct.interval* %9, null
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %10 = phi i1 [ true, %while.cond ], [ %cmp, %lor.rhs ]
  %lnot = xor i1 %10, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end
  %11 = load %struct.interval*, %struct.interval** %i, align 8
  %up_obj4 = getelementptr inbounds %struct.interval, %struct.interval* %11, i32 0, i32 5
  %bf.load5 = load i8, i8* %up_obj4, align 8
  %bf.clear6 = and i8 %bf.load5, 1
  %bf.cast7 = trunc i8 %bf.clear6 to i1
  br i1 %bf.cast7, label %if.else, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %12 = load %struct.interval*, %struct.interval** %i, align 8
  %up8 = getelementptr inbounds %struct.interval, %struct.interval* %12, i32 0, i32 4
  %interval9 = bitcast %union.anon* %up8 to %struct.interval**
  %13 = load %struct.interval*, %struct.interval** %interval9, align 8
  %cmp10 = icmp eq %struct.interval* %13, null
  br i1 %cmp10, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %lor.lhs.false
  %14 = load %struct.interval*, %struct.interval** %i, align 8
  %up11 = getelementptr inbounds %struct.interval, %struct.interval* %14, i32 0, i32 4
  %interval12 = bitcast %union.anon* %up11 to %struct.interval**
  %15 = load %struct.interval*, %struct.interval** %interval12, align 8
  %right = getelementptr inbounds %struct.interval, %struct.interval* %15, i32 0, i32 3
  %16 = load %struct.interval*, %struct.interval** %right, align 8
  %17 = load %struct.interval*, %struct.interval** %i, align 8
  %cmp13 = icmp eq %struct.interval* %16, %17
  br i1 %cmp13, label %if.then.14, label %if.else

if.then.14:                                       ; preds = %land.lhs.true
  %18 = load %struct.interval*, %struct.interval** %i, align 8
  %position = getelementptr inbounds %struct.interval, %struct.interval* %18, i32 0, i32 1
  %19 = load i64, i64* %position, align 8
  %20 = load %struct.interval*, %struct.interval** %i, align 8
  %left = getelementptr inbounds %struct.interval, %struct.interval* %20, i32 0, i32 2
  %21 = load %struct.interval*, %struct.interval** %left, align 8
  %tobool15 = icmp ne %struct.interval* %21, null
  br i1 %tobool15, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.14
  %22 = load %struct.interval*, %struct.interval** %i, align 8
  %left16 = getelementptr inbounds %struct.interval, %struct.interval* %22, i32 0, i32 2
  %23 = load %struct.interval*, %struct.interval** %left16, align 8
  %total_length = getelementptr inbounds %struct.interval, %struct.interval* %23, i32 0, i32 0
  %24 = load i64, i64* %total_length, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then.14
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %24, %cond.true ], [ 0, %cond.false ]
  %sub = sub nsw i64 %19, %cond
  %25 = load %struct.interval*, %struct.interval** %i, align 8
  %cmp17 = icmp eq %struct.interval* %25, null
  br i1 %cmp17, label %cond.true.18, label %cond.false.19

cond.true.18:                                     ; preds = %cond.end
  br label %cond.end.21

cond.false.19:                                    ; preds = %cond.end
  %26 = load %struct.interval*, %struct.interval** %i, align 8
  %total_length20 = getelementptr inbounds %struct.interval, %struct.interval* %26, i32 0, i32 0
  %27 = load i64, i64* %total_length20, align 8
  br label %cond.end.21

cond.end.21:                                      ; preds = %cond.false.19, %cond.true.18
  %cond22 = phi i64 [ 0, %cond.true.18 ], [ %27, %cond.false.19 ]
  %add = add nsw i64 %sub, %cond22
  %28 = load %struct.interval*, %struct.interval** %i, align 8
  %up23 = getelementptr inbounds %struct.interval, %struct.interval* %28, i32 0, i32 4
  %interval24 = bitcast %union.anon* %up23 to %struct.interval**
  %29 = load %struct.interval*, %struct.interval** %interval24, align 8
  %cmp25 = icmp eq %struct.interval* %29, null
  br i1 %cmp25, label %cond.true.26, label %cond.false.27

cond.true.26:                                     ; preds = %cond.end.21
  br label %cond.end.31

cond.false.27:                                    ; preds = %cond.end.21
  %30 = load %struct.interval*, %struct.interval** %i, align 8
  %up28 = getelementptr inbounds %struct.interval, %struct.interval* %30, i32 0, i32 4
  %interval29 = bitcast %union.anon* %up28 to %struct.interval**
  %31 = load %struct.interval*, %struct.interval** %interval29, align 8
  %total_length30 = getelementptr inbounds %struct.interval, %struct.interval* %31, i32 0, i32 0
  %32 = load i64, i64* %total_length30, align 8
  br label %cond.end.31

cond.end.31:                                      ; preds = %cond.false.27, %cond.true.26
  %cond32 = phi i64 [ 0, %cond.true.26 ], [ %32, %cond.false.27 ]
  %sub33 = sub nsw i64 %add, %cond32
  %33 = load %struct.interval*, %struct.interval** %i, align 8
  %up34 = getelementptr inbounds %struct.interval, %struct.interval* %33, i32 0, i32 4
  %interval35 = bitcast %union.anon* %up34 to %struct.interval**
  %34 = load %struct.interval*, %struct.interval** %interval35, align 8
  %left36 = getelementptr inbounds %struct.interval, %struct.interval* %34, i32 0, i32 2
  %35 = load %struct.interval*, %struct.interval** %left36, align 8
  %tobool37 = icmp ne %struct.interval* %35, null
  br i1 %tobool37, label %cond.true.38, label %cond.false.43

cond.true.38:                                     ; preds = %cond.end.31
  %36 = load %struct.interval*, %struct.interval** %i, align 8
  %up39 = getelementptr inbounds %struct.interval, %struct.interval* %36, i32 0, i32 4
  %interval40 = bitcast %union.anon* %up39 to %struct.interval**
  %37 = load %struct.interval*, %struct.interval** %interval40, align 8
  %left41 = getelementptr inbounds %struct.interval, %struct.interval* %37, i32 0, i32 2
  %38 = load %struct.interval*, %struct.interval** %left41, align 8
  %total_length42 = getelementptr inbounds %struct.interval, %struct.interval* %38, i32 0, i32 0
  %39 = load i64, i64* %total_length42, align 8
  br label %cond.end.44

cond.false.43:                                    ; preds = %cond.end.31
  br label %cond.end.44

cond.end.44:                                      ; preds = %cond.false.43, %cond.true.38
  %cond45 = phi i64 [ %39, %cond.true.38 ], [ 0, %cond.false.43 ]
  %add46 = add nsw i64 %sub33, %cond45
  %40 = load %struct.interval*, %struct.interval** %i, align 8
  %up47 = getelementptr inbounds %struct.interval, %struct.interval* %40, i32 0, i32 4
  %interval48 = bitcast %union.anon* %up47 to %struct.interval**
  %41 = load %struct.interval*, %struct.interval** %interval48, align 8
  %position49 = getelementptr inbounds %struct.interval, %struct.interval* %41, i32 0, i32 1
  store i64 %add46, i64* %position49, align 8
  br label %if.end.70

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false, %while.body
  %42 = load %struct.interval*, %struct.interval** %i, align 8
  %position50 = getelementptr inbounds %struct.interval, %struct.interval* %42, i32 0, i32 1
  %43 = load i64, i64* %position50, align 8
  %44 = load %struct.interval*, %struct.interval** %i, align 8
  %left51 = getelementptr inbounds %struct.interval, %struct.interval* %44, i32 0, i32 2
  %45 = load %struct.interval*, %struct.interval** %left51, align 8
  %tobool52 = icmp ne %struct.interval* %45, null
  br i1 %tobool52, label %cond.true.53, label %cond.false.56

cond.true.53:                                     ; preds = %if.else
  %46 = load %struct.interval*, %struct.interval** %i, align 8
  %left54 = getelementptr inbounds %struct.interval, %struct.interval* %46, i32 0, i32 2
  %47 = load %struct.interval*, %struct.interval** %left54, align 8
  %total_length55 = getelementptr inbounds %struct.interval, %struct.interval* %47, i32 0, i32 0
  %48 = load i64, i64* %total_length55, align 8
  br label %cond.end.57

cond.false.56:                                    ; preds = %if.else
  br label %cond.end.57

cond.end.57:                                      ; preds = %cond.false.56, %cond.true.53
  %cond58 = phi i64 [ %48, %cond.true.53 ], [ 0, %cond.false.56 ]
  %sub59 = sub nsw i64 %43, %cond58
  %49 = load %struct.interval*, %struct.interval** %i, align 8
  %cmp60 = icmp eq %struct.interval* %49, null
  br i1 %cmp60, label %cond.true.61, label %cond.false.62

cond.true.61:                                     ; preds = %cond.end.57
  br label %cond.end.64

cond.false.62:                                    ; preds = %cond.end.57
  %50 = load %struct.interval*, %struct.interval** %i, align 8
  %total_length63 = getelementptr inbounds %struct.interval, %struct.interval* %50, i32 0, i32 0
  %51 = load i64, i64* %total_length63, align 8
  br label %cond.end.64

cond.end.64:                                      ; preds = %cond.false.62, %cond.true.61
  %cond65 = phi i64 [ 0, %cond.true.61 ], [ %51, %cond.false.62 ]
  %add66 = add nsw i64 %sub59, %cond65
  %52 = load %struct.interval*, %struct.interval** %i, align 8
  %up67 = getelementptr inbounds %struct.interval, %struct.interval* %52, i32 0, i32 4
  %interval68 = bitcast %union.anon* %up67 to %struct.interval**
  %53 = load %struct.interval*, %struct.interval** %interval68, align 8
  %position69 = getelementptr inbounds %struct.interval, %struct.interval* %53, i32 0, i32 1
  store i64 %add66, i64* %position69, align 8
  br label %if.end.70

if.end.70:                                        ; preds = %cond.end.64, %cond.end.44
  %54 = load %struct.interval*, %struct.interval** %i, align 8
  %up71 = getelementptr inbounds %struct.interval, %struct.interval* %54, i32 0, i32 4
  %interval72 = bitcast %union.anon* %up71 to %struct.interval**
  %55 = load %struct.interval*, %struct.interval** %interval72, align 8
  store %struct.interval* %55, %struct.interval** %i, align 8
  br label %while.cond

while.end:                                        ; preds = %lor.end
  %56 = load %struct.interval*, %struct.interval** getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 10), align 8
  store %struct.interval* %56, %struct.interval** %i, align 8
  %57 = load %struct.interval*, %struct.interval** %i, align 8
  %position73 = getelementptr inbounds %struct.interval, %struct.interval* %57, i32 0, i32 1
  %58 = load i64, i64* %position73, align 8
  %59 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 12), align 8
  %sub74 = sub nsw i64 %58, %59
  store i64 %sub74, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 7), align 8
  %60 = load %struct.interval*, %struct.interval** %i, align 8
  %position75 = getelementptr inbounds %struct.interval, %struct.interval* %60, i32 0, i32 1
  %61 = load i64, i64* %position75, align 8
  %62 = load %struct.interval*, %struct.interval** %i, align 8
  %cmp76 = icmp eq %struct.interval* %62, null
  br i1 %cmp76, label %cond.true.77, label %cond.false.78

cond.true.77:                                     ; preds = %while.end
  br label %cond.end.103

cond.false.78:                                    ; preds = %while.end
  %63 = load %struct.interval*, %struct.interval** %i, align 8
  %cmp79 = icmp eq %struct.interval* %63, null
  br i1 %cmp79, label %cond.true.80, label %cond.false.81

cond.true.80:                                     ; preds = %cond.false.78
  br label %cond.end.83

cond.false.81:                                    ; preds = %cond.false.78
  %64 = load %struct.interval*, %struct.interval** %i, align 8
  %total_length82 = getelementptr inbounds %struct.interval, %struct.interval* %64, i32 0, i32 0
  %65 = load i64, i64* %total_length82, align 8
  br label %cond.end.83

cond.end.83:                                      ; preds = %cond.false.81, %cond.true.80
  %cond84 = phi i64 [ 0, %cond.true.80 ], [ %65, %cond.false.81 ]
  %66 = load %struct.interval*, %struct.interval** %i, align 8
  %right85 = getelementptr inbounds %struct.interval, %struct.interval* %66, i32 0, i32 3
  %67 = load %struct.interval*, %struct.interval** %right85, align 8
  %cmp86 = icmp eq %struct.interval* %67, null
  br i1 %cmp86, label %cond.true.87, label %cond.false.88

cond.true.87:                                     ; preds = %cond.end.83
  br label %cond.end.91

cond.false.88:                                    ; preds = %cond.end.83
  %68 = load %struct.interval*, %struct.interval** %i, align 8
  %right89 = getelementptr inbounds %struct.interval, %struct.interval* %68, i32 0, i32 3
  %69 = load %struct.interval*, %struct.interval** %right89, align 8
  %total_length90 = getelementptr inbounds %struct.interval, %struct.interval* %69, i32 0, i32 0
  %70 = load i64, i64* %total_length90, align 8
  br label %cond.end.91

cond.end.91:                                      ; preds = %cond.false.88, %cond.true.87
  %cond92 = phi i64 [ 0, %cond.true.87 ], [ %70, %cond.false.88 ]
  %sub93 = sub nsw i64 %cond84, %cond92
  %71 = load %struct.interval*, %struct.interval** %i, align 8
  %left94 = getelementptr inbounds %struct.interval, %struct.interval* %71, i32 0, i32 2
  %72 = load %struct.interval*, %struct.interval** %left94, align 8
  %cmp95 = icmp eq %struct.interval* %72, null
  br i1 %cmp95, label %cond.true.96, label %cond.false.97

cond.true.96:                                     ; preds = %cond.end.91
  br label %cond.end.100

cond.false.97:                                    ; preds = %cond.end.91
  %73 = load %struct.interval*, %struct.interval** %i, align 8
  %left98 = getelementptr inbounds %struct.interval, %struct.interval* %73, i32 0, i32 2
  %74 = load %struct.interval*, %struct.interval** %left98, align 8
  %total_length99 = getelementptr inbounds %struct.interval, %struct.interval* %74, i32 0, i32 0
  %75 = load i64, i64* %total_length99, align 8
  br label %cond.end.100

cond.end.100:                                     ; preds = %cond.false.97, %cond.true.96
  %cond101 = phi i64 [ 0, %cond.true.96 ], [ %75, %cond.false.97 ]
  %sub102 = sub nsw i64 %sub93, %cond101
  br label %cond.end.103

cond.end.103:                                     ; preds = %cond.end.100, %cond.true.77
  %cond104 = phi i64 [ 0, %cond.true.77 ], [ %sub102, %cond.end.100 ]
  %add105 = add nsw i64 %61, %cond104
  %76 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 12), align 8
  %sub106 = sub nsw i64 %add105, %76
  store i64 %sub106, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 8), align 8
  br label %update

if.end.107:                                       ; preds = %entry
  %77 = load i64, i64* %count.addr, align 8
  %cmp108 = icmp sgt i64 %77, 0
  br i1 %cmp108, label %cond.true.109, label %cond.false.110

cond.true.109:                                    ; preds = %if.end.107
  %78 = load %struct.interval*, %struct.interval** getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 10), align 8
  br label %cond.end.111

cond.false.110:                                   ; preds = %if.end.107
  %79 = load %struct.interval*, %struct.interval** getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 11), align 8
  br label %cond.end.111

cond.end.111:                                     ; preds = %cond.false.110, %cond.true.109
  %cond112 = phi %struct.interval* [ %78, %cond.true.109 ], [ %79, %cond.false.110 ]
  store %struct.interval* %cond112, %struct.interval** %i, align 8
  %80 = load %struct.interval*, %struct.interval** %i, align 8
  %tobool113 = icmp ne %struct.interval* %80, null
  br i1 %tobool113, label %if.else.115, label %if.then.114

if.then.114:                                      ; preds = %cond.end.111
  call void (i8*, ...) @error(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i32 0, i32 0)) #5
  unreachable

if.else.115:                                      ; preds = %cond.end.111
  %81 = load i64, i64* %charpos.addr, align 8
  %82 = load %struct.interval*, %struct.interval** %i, align 8
  %position116 = getelementptr inbounds %struct.interval, %struct.interval* %82, i32 0, i32 1
  %83 = load i64, i64* %position116, align 8
  %cmp117 = icmp slt i64 %81, %83
  br i1 %cmp117, label %if.then.118, label %if.else.189

if.then.118:                                      ; preds = %if.else.115
  %84 = load i64, i64* %count.addr, align 8
  %cmp119 = icmp sgt i64 %84, 0
  br i1 %cmp119, label %if.then.120, label %if.end.121

if.then.120:                                      ; preds = %if.then.118
  call void (i8*, ...) @error(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.1, i32 0, i32 0)) #5
  unreachable

if.end.121:                                       ; preds = %if.then.118
  %85 = load %struct.interval*, %struct.interval** %i, align 8
  %86 = load i64, i64* %charpos.addr, align 8
  %call122 = call %struct.interval* @update_interval(%struct.interval* %85, i64 %86)
  store %struct.interval* %call122, %struct.interval** %i, align 8
  %87 = load %struct.interval*, %struct.interval** %i, align 8
  %position123 = getelementptr inbounds %struct.interval, %struct.interval* %87, i32 0, i32 1
  %88 = load i64, i64* %position123, align 8
  %89 = load %struct.interval*, %struct.interval** %i, align 8
  %cmp124 = icmp eq %struct.interval* %89, null
  br i1 %cmp124, label %cond.true.125, label %cond.false.126

cond.true.125:                                    ; preds = %if.end.121
  br label %cond.end.151

cond.false.126:                                   ; preds = %if.end.121
  %90 = load %struct.interval*, %struct.interval** %i, align 8
  %cmp127 = icmp eq %struct.interval* %90, null
  br i1 %cmp127, label %cond.true.128, label %cond.false.129

cond.true.128:                                    ; preds = %cond.false.126
  br label %cond.end.131

cond.false.129:                                   ; preds = %cond.false.126
  %91 = load %struct.interval*, %struct.interval** %i, align 8
  %total_length130 = getelementptr inbounds %struct.interval, %struct.interval* %91, i32 0, i32 0
  %92 = load i64, i64* %total_length130, align 8
  br label %cond.end.131

cond.end.131:                                     ; preds = %cond.false.129, %cond.true.128
  %cond132 = phi i64 [ 0, %cond.true.128 ], [ %92, %cond.false.129 ]
  %93 = load %struct.interval*, %struct.interval** %i, align 8
  %right133 = getelementptr inbounds %struct.interval, %struct.interval* %93, i32 0, i32 3
  %94 = load %struct.interval*, %struct.interval** %right133, align 8
  %cmp134 = icmp eq %struct.interval* %94, null
  br i1 %cmp134, label %cond.true.135, label %cond.false.136

cond.true.135:                                    ; preds = %cond.end.131
  br label %cond.end.139

cond.false.136:                                   ; preds = %cond.end.131
  %95 = load %struct.interval*, %struct.interval** %i, align 8
  %right137 = getelementptr inbounds %struct.interval, %struct.interval* %95, i32 0, i32 3
  %96 = load %struct.interval*, %struct.interval** %right137, align 8
  %total_length138 = getelementptr inbounds %struct.interval, %struct.interval* %96, i32 0, i32 0
  %97 = load i64, i64* %total_length138, align 8
  br label %cond.end.139

cond.end.139:                                     ; preds = %cond.false.136, %cond.true.135
  %cond140 = phi i64 [ 0, %cond.true.135 ], [ %97, %cond.false.136 ]
  %sub141 = sub nsw i64 %cond132, %cond140
  %98 = load %struct.interval*, %struct.interval** %i, align 8
  %left142 = getelementptr inbounds %struct.interval, %struct.interval* %98, i32 0, i32 2
  %99 = load %struct.interval*, %struct.interval** %left142, align 8
  %cmp143 = icmp eq %struct.interval* %99, null
  br i1 %cmp143, label %cond.true.144, label %cond.false.145

cond.true.144:                                    ; preds = %cond.end.139
  br label %cond.end.148

cond.false.145:                                   ; preds = %cond.end.139
  %100 = load %struct.interval*, %struct.interval** %i, align 8
  %left146 = getelementptr inbounds %struct.interval, %struct.interval* %100, i32 0, i32 2
  %101 = load %struct.interval*, %struct.interval** %left146, align 8
  %total_length147 = getelementptr inbounds %struct.interval, %struct.interval* %101, i32 0, i32 0
  %102 = load i64, i64* %total_length147, align 8
  br label %cond.end.148

cond.end.148:                                     ; preds = %cond.false.145, %cond.true.144
  %cond149 = phi i64 [ 0, %cond.true.144 ], [ %102, %cond.false.145 ]
  %sub150 = sub nsw i64 %sub141, %cond149
  br label %cond.end.151

cond.end.151:                                     ; preds = %cond.end.148, %cond.true.125
  %cond152 = phi i64 [ 0, %cond.true.125 ], [ %sub150, %cond.end.148 ]
  %add153 = add nsw i64 %88, %cond152
  %103 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 7), align 8
  %cmp154 = icmp ne i64 %add153, %103
  br i1 %cmp154, label %if.then.155, label %if.end.188

if.then.155:                                      ; preds = %cond.end.151
  store i8 0, i8* %invalidate, align 1
  %104 = load %struct.interval*, %struct.interval** %i, align 8
  store %struct.interval* %104, %struct.interval** getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 10), align 8
  %105 = load %struct.interval*, %struct.interval** %i, align 8
  %position156 = getelementptr inbounds %struct.interval, %struct.interval* %105, i32 0, i32 1
  %106 = load i64, i64* %position156, align 8
  %107 = load %struct.interval*, %struct.interval** %i, align 8
  %cmp157 = icmp eq %struct.interval* %107, null
  br i1 %cmp157, label %cond.true.158, label %cond.false.159

cond.true.158:                                    ; preds = %if.then.155
  br label %cond.end.184

cond.false.159:                                   ; preds = %if.then.155
  %108 = load %struct.interval*, %struct.interval** %i, align 8
  %cmp160 = icmp eq %struct.interval* %108, null
  br i1 %cmp160, label %cond.true.161, label %cond.false.162

cond.true.161:                                    ; preds = %cond.false.159
  br label %cond.end.164

cond.false.162:                                   ; preds = %cond.false.159
  %109 = load %struct.interval*, %struct.interval** %i, align 8
  %total_length163 = getelementptr inbounds %struct.interval, %struct.interval* %109, i32 0, i32 0
  %110 = load i64, i64* %total_length163, align 8
  br label %cond.end.164

cond.end.164:                                     ; preds = %cond.false.162, %cond.true.161
  %cond165 = phi i64 [ 0, %cond.true.161 ], [ %110, %cond.false.162 ]
  %111 = load %struct.interval*, %struct.interval** %i, align 8
  %right166 = getelementptr inbounds %struct.interval, %struct.interval* %111, i32 0, i32 3
  %112 = load %struct.interval*, %struct.interval** %right166, align 8
  %cmp167 = icmp eq %struct.interval* %112, null
  br i1 %cmp167, label %cond.true.168, label %cond.false.169

cond.true.168:                                    ; preds = %cond.end.164
  br label %cond.end.172

cond.false.169:                                   ; preds = %cond.end.164
  %113 = load %struct.interval*, %struct.interval** %i, align 8
  %right170 = getelementptr inbounds %struct.interval, %struct.interval* %113, i32 0, i32 3
  %114 = load %struct.interval*, %struct.interval** %right170, align 8
  %total_length171 = getelementptr inbounds %struct.interval, %struct.interval* %114, i32 0, i32 0
  %115 = load i64, i64* %total_length171, align 8
  br label %cond.end.172

cond.end.172:                                     ; preds = %cond.false.169, %cond.true.168
  %cond173 = phi i64 [ 0, %cond.true.168 ], [ %115, %cond.false.169 ]
  %sub174 = sub nsw i64 %cond165, %cond173
  %116 = load %struct.interval*, %struct.interval** %i, align 8
  %left175 = getelementptr inbounds %struct.interval, %struct.interval* %116, i32 0, i32 2
  %117 = load %struct.interval*, %struct.interval** %left175, align 8
  %cmp176 = icmp eq %struct.interval* %117, null
  br i1 %cmp176, label %cond.true.177, label %cond.false.178

cond.true.177:                                    ; preds = %cond.end.172
  br label %cond.end.181

cond.false.178:                                   ; preds = %cond.end.172
  %118 = load %struct.interval*, %struct.interval** %i, align 8
  %left179 = getelementptr inbounds %struct.interval, %struct.interval* %118, i32 0, i32 2
  %119 = load %struct.interval*, %struct.interval** %left179, align 8
  %total_length180 = getelementptr inbounds %struct.interval, %struct.interval* %119, i32 0, i32 0
  %120 = load i64, i64* %total_length180, align 8
  br label %cond.end.181

cond.end.181:                                     ; preds = %cond.false.178, %cond.true.177
  %cond182 = phi i64 [ 0, %cond.true.177 ], [ %120, %cond.false.178 ]
  %sub183 = sub nsw i64 %sub174, %cond182
  br label %cond.end.184

cond.end.184:                                     ; preds = %cond.end.181, %cond.true.158
  %cond185 = phi i64 [ 0, %cond.true.158 ], [ %sub183, %cond.end.181 ]
  %add186 = add nsw i64 %106, %cond185
  %121 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 12), align 8
  %sub187 = sub nsw i64 %add186, %121
  store i64 %sub187, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 8), align 8
  br label %if.end.188

if.end.188:                                       ; preds = %cond.end.184, %cond.end.151
  br label %if.end.234

if.else.189:                                      ; preds = %if.else.115
  %122 = load i64, i64* %charpos.addr, align 8
  %123 = load %struct.interval*, %struct.interval** %i, align 8
  %position190 = getelementptr inbounds %struct.interval, %struct.interval* %123, i32 0, i32 1
  %124 = load i64, i64* %position190, align 8
  %125 = load %struct.interval*, %struct.interval** %i, align 8
  %cmp191 = icmp eq %struct.interval* %125, null
  br i1 %cmp191, label %cond.true.192, label %cond.false.193

cond.true.192:                                    ; preds = %if.else.189
  br label %cond.end.218

cond.false.193:                                   ; preds = %if.else.189
  %126 = load %struct.interval*, %struct.interval** %i, align 8
  %cmp194 = icmp eq %struct.interval* %126, null
  br i1 %cmp194, label %cond.true.195, label %cond.false.196

cond.true.195:                                    ; preds = %cond.false.193
  br label %cond.end.198

cond.false.196:                                   ; preds = %cond.false.193
  %127 = load %struct.interval*, %struct.interval** %i, align 8
  %total_length197 = getelementptr inbounds %struct.interval, %struct.interval* %127, i32 0, i32 0
  %128 = load i64, i64* %total_length197, align 8
  br label %cond.end.198

cond.end.198:                                     ; preds = %cond.false.196, %cond.true.195
  %cond199 = phi i64 [ 0, %cond.true.195 ], [ %128, %cond.false.196 ]
  %129 = load %struct.interval*, %struct.interval** %i, align 8
  %right200 = getelementptr inbounds %struct.interval, %struct.interval* %129, i32 0, i32 3
  %130 = load %struct.interval*, %struct.interval** %right200, align 8
  %cmp201 = icmp eq %struct.interval* %130, null
  br i1 %cmp201, label %cond.true.202, label %cond.false.203

cond.true.202:                                    ; preds = %cond.end.198
  br label %cond.end.206

cond.false.203:                                   ; preds = %cond.end.198
  %131 = load %struct.interval*, %struct.interval** %i, align 8
  %right204 = getelementptr inbounds %struct.interval, %struct.interval* %131, i32 0, i32 3
  %132 = load %struct.interval*, %struct.interval** %right204, align 8
  %total_length205 = getelementptr inbounds %struct.interval, %struct.interval* %132, i32 0, i32 0
  %133 = load i64, i64* %total_length205, align 8
  br label %cond.end.206

cond.end.206:                                     ; preds = %cond.false.203, %cond.true.202
  %cond207 = phi i64 [ 0, %cond.true.202 ], [ %133, %cond.false.203 ]
  %sub208 = sub nsw i64 %cond199, %cond207
  %134 = load %struct.interval*, %struct.interval** %i, align 8
  %left209 = getelementptr inbounds %struct.interval, %struct.interval* %134, i32 0, i32 2
  %135 = load %struct.interval*, %struct.interval** %left209, align 8
  %cmp210 = icmp eq %struct.interval* %135, null
  br i1 %cmp210, label %cond.true.211, label %cond.false.212

cond.true.211:                                    ; preds = %cond.end.206
  br label %cond.end.215

cond.false.212:                                   ; preds = %cond.end.206
  %136 = load %struct.interval*, %struct.interval** %i, align 8
  %left213 = getelementptr inbounds %struct.interval, %struct.interval* %136, i32 0, i32 2
  %137 = load %struct.interval*, %struct.interval** %left213, align 8
  %total_length214 = getelementptr inbounds %struct.interval, %struct.interval* %137, i32 0, i32 0
  %138 = load i64, i64* %total_length214, align 8
  br label %cond.end.215

cond.end.215:                                     ; preds = %cond.false.212, %cond.true.211
  %cond216 = phi i64 [ 0, %cond.true.211 ], [ %138, %cond.false.212 ]
  %sub217 = sub nsw i64 %sub208, %cond216
  br label %cond.end.218

cond.end.218:                                     ; preds = %cond.end.215, %cond.true.192
  %cond219 = phi i64 [ 0, %cond.true.192 ], [ %sub217, %cond.end.215 ]
  %add220 = add nsw i64 %124, %cond219
  %cmp221 = icmp sge i64 %122, %add220
  br i1 %cmp221, label %if.then.222, label %if.end.233

if.then.222:                                      ; preds = %cond.end.218
  %139 = load i64, i64* %count.addr, align 8
  %cmp223 = icmp slt i64 %139, 0
  br i1 %cmp223, label %if.then.224, label %if.end.225

if.then.224:                                      ; preds = %if.then.222
  call void (i8*, ...) @error(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.2, i32 0, i32 0)) #5
  unreachable

if.end.225:                                       ; preds = %if.then.222
  %140 = load %struct.interval*, %struct.interval** %i, align 8
  %141 = load i64, i64* %charpos.addr, align 8
  %call226 = call %struct.interval* @update_interval(%struct.interval* %140, i64 %141)
  store %struct.interval* %call226, %struct.interval** %i, align 8
  %142 = load %struct.interval*, %struct.interval** %i, align 8
  %position227 = getelementptr inbounds %struct.interval, %struct.interval* %142, i32 0, i32 1
  %143 = load i64, i64* %position227, align 8
  %144 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 8), align 8
  %cmp228 = icmp ne i64 %143, %144
  br i1 %cmp228, label %if.then.229, label %if.end.232

if.then.229:                                      ; preds = %if.end.225
  store i8 0, i8* %invalidate, align 1
  %145 = load %struct.interval*, %struct.interval** %i, align 8
  store %struct.interval* %145, %struct.interval** getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 11), align 8
  %146 = load %struct.interval*, %struct.interval** %i, align 8
  %position230 = getelementptr inbounds %struct.interval, %struct.interval* %146, i32 0, i32 1
  %147 = load i64, i64* %position230, align 8
  %148 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 12), align 8
  %sub231 = sub nsw i64 %147, %148
  store i64 %sub231, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 7), align 8
  br label %if.end.232

if.end.232:                                       ; preds = %if.then.229, %if.end.225
  br label %if.end.233

if.end.233:                                       ; preds = %if.end.232, %cond.end.218
  br label %if.end.234

if.end.234:                                       ; preds = %if.end.233, %if.end.188
  br label %if.end.235

if.end.235:                                       ; preds = %if.end.234
  br label %update

update:                                           ; preds = %if.end.235, %cond.end.103
  %149 = load %struct.interval*, %struct.interval** %i, align 8
  %plist = getelementptr inbounds %struct.interval, %struct.interval* %149, i32 0, i32 6
  %150 = load i64, i64* %plist, align 8
  %call236 = call i64 @builtin_lisp_symbol(i32 899)
  %call237 = call i64 @textget(i64 %150, i64 %call236)
  store i64 %call237, i64* %tmp_table, align 8
  %151 = load i8, i8* %invalidate, align 1
  %tobool238 = trunc i8 %151 to i1
  br i1 %tobool238, label %if.then.239, label %if.end.243

if.then.239:                                      ; preds = %update
  %152 = load i64, i64* %tmp_table, align 8
  %153 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 6), align 8
  %cmp240 = icmp eq i64 %152, %153
  %lnot241 = xor i1 %cmp240, true
  %frombool242 = zext i1 %lnot241 to i8
  store i8 %frombool242, i8* %invalidate, align 1
  br label %if.end.243

if.end.243:                                       ; preds = %if.then.239, %update
  %154 = load i8, i8* %invalidate, align 1
  %tobool244 = trunc i8 %154 to i1
  br i1 %tobool244, label %if.then.245, label %if.end.284

if.then.245:                                      ; preds = %if.end.243
  %155 = load i64, i64* %count.addr, align 8
  %cmp246 = icmp sgt i64 %155, 0
  br i1 %cmp246, label %if.then.247, label %if.else.250

if.then.247:                                      ; preds = %if.then.245
  %156 = load %struct.interval*, %struct.interval** %i, align 8
  store %struct.interval* %156, %struct.interval** getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 11), align 8
  %157 = load %struct.interval*, %struct.interval** %i, align 8
  %position248 = getelementptr inbounds %struct.interval, %struct.interval* %157, i32 0, i32 1
  %158 = load i64, i64* %position248, align 8
  %159 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 12), align 8
  %sub249 = sub nsw i64 %158, %159
  store i64 %sub249, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 7), align 8
  br label %if.end.283

if.else.250:                                      ; preds = %if.then.245
  %160 = load %struct.interval*, %struct.interval** %i, align 8
  store %struct.interval* %160, %struct.interval** getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 10), align 8
  %161 = load %struct.interval*, %struct.interval** %i, align 8
  %position251 = getelementptr inbounds %struct.interval, %struct.interval* %161, i32 0, i32 1
  %162 = load i64, i64* %position251, align 8
  %163 = load %struct.interval*, %struct.interval** %i, align 8
  %cmp252 = icmp eq %struct.interval* %163, null
  br i1 %cmp252, label %cond.true.253, label %cond.false.254

cond.true.253:                                    ; preds = %if.else.250
  br label %cond.end.279

cond.false.254:                                   ; preds = %if.else.250
  %164 = load %struct.interval*, %struct.interval** %i, align 8
  %cmp255 = icmp eq %struct.interval* %164, null
  br i1 %cmp255, label %cond.true.256, label %cond.false.257

cond.true.256:                                    ; preds = %cond.false.254
  br label %cond.end.259

cond.false.257:                                   ; preds = %cond.false.254
  %165 = load %struct.interval*, %struct.interval** %i, align 8
  %total_length258 = getelementptr inbounds %struct.interval, %struct.interval* %165, i32 0, i32 0
  %166 = load i64, i64* %total_length258, align 8
  br label %cond.end.259

cond.end.259:                                     ; preds = %cond.false.257, %cond.true.256
  %cond260 = phi i64 [ 0, %cond.true.256 ], [ %166, %cond.false.257 ]
  %167 = load %struct.interval*, %struct.interval** %i, align 8
  %right261 = getelementptr inbounds %struct.interval, %struct.interval* %167, i32 0, i32 3
  %168 = load %struct.interval*, %struct.interval** %right261, align 8
  %cmp262 = icmp eq %struct.interval* %168, null
  br i1 %cmp262, label %cond.true.263, label %cond.false.264

cond.true.263:                                    ; preds = %cond.end.259
  br label %cond.end.267

cond.false.264:                                   ; preds = %cond.end.259
  %169 = load %struct.interval*, %struct.interval** %i, align 8
  %right265 = getelementptr inbounds %struct.interval, %struct.interval* %169, i32 0, i32 3
  %170 = load %struct.interval*, %struct.interval** %right265, align 8
  %total_length266 = getelementptr inbounds %struct.interval, %struct.interval* %170, i32 0, i32 0
  %171 = load i64, i64* %total_length266, align 8
  br label %cond.end.267

cond.end.267:                                     ; preds = %cond.false.264, %cond.true.263
  %cond268 = phi i64 [ 0, %cond.true.263 ], [ %171, %cond.false.264 ]
  %sub269 = sub nsw i64 %cond260, %cond268
  %172 = load %struct.interval*, %struct.interval** %i, align 8
  %left270 = getelementptr inbounds %struct.interval, %struct.interval* %172, i32 0, i32 2
  %173 = load %struct.interval*, %struct.interval** %left270, align 8
  %cmp271 = icmp eq %struct.interval* %173, null
  br i1 %cmp271, label %cond.true.272, label %cond.false.273

cond.true.272:                                    ; preds = %cond.end.267
  br label %cond.end.276

cond.false.273:                                   ; preds = %cond.end.267
  %174 = load %struct.interval*, %struct.interval** %i, align 8
  %left274 = getelementptr inbounds %struct.interval, %struct.interval* %174, i32 0, i32 2
  %175 = load %struct.interval*, %struct.interval** %left274, align 8
  %total_length275 = getelementptr inbounds %struct.interval, %struct.interval* %175, i32 0, i32 0
  %176 = load i64, i64* %total_length275, align 8
  br label %cond.end.276

cond.end.276:                                     ; preds = %cond.false.273, %cond.true.272
  %cond277 = phi i64 [ 0, %cond.true.272 ], [ %176, %cond.false.273 ]
  %sub278 = sub nsw i64 %sub269, %cond277
  br label %cond.end.279

cond.end.279:                                     ; preds = %cond.end.276, %cond.true.253
  %cond280 = phi i64 [ 0, %cond.true.253 ], [ %sub278, %cond.end.276 ]
  %add281 = add nsw i64 %162, %cond280
  %177 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 12), align 8
  %sub282 = sub nsw i64 %add281, %177
  store i64 %sub282, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 8), align 8
  br label %if.end.283

if.end.283:                                       ; preds = %cond.end.279, %if.then.247
  br label %if.end.284

if.end.284:                                       ; preds = %if.end.283, %if.end.243
  %178 = load i64, i64* %tmp_table, align 8
  %179 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 6), align 8
  %cmp285 = icmp eq i64 %178, %179
  br i1 %cmp285, label %if.end.298, label %if.then.286

if.then.286:                                      ; preds = %if.end.284
  %180 = load i64, i64* %tmp_table, align 8
  store i64 %180, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 5), align 8
  %181 = load i64, i64* %tmp_table, align 8
  store i64 %181, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 6), align 8
  %182 = load i64, i64* %tmp_table, align 8
  %call287 = call i64 @Fsyntax_table_p(i64 %182)
  %call288 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp289 = icmp eq i64 %call287, %call288
  br i1 %cmp289, label %if.then.290, label %if.else.291

if.then.290:                                      ; preds = %if.then.286
  store i8 0, i8* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 3), align 1
  br label %if.end.297

if.else.291:                                      ; preds = %if.then.286
  %183 = load i64, i64* %tmp_table, align 8
  %and = and i64 %183, 7
  %conv = trunc i64 %and to i32
  %cmp292 = icmp eq i32 %conv, 3
  br i1 %cmp292, label %if.then.294, label %if.else.295

if.then.294:                                      ; preds = %if.else.291
  store i8 1, i8* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 3), align 1
  %184 = load i64, i64* %tmp_table, align 8
  store i64 %184, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 4), align 8
  br label %if.end.296

if.else.295:                                      ; preds = %if.else.291
  store i8 0, i8* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 3), align 1
  %185 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %syntax_table_ = getelementptr inbounds %struct.buffer, %struct.buffer* %185, i32 0, i32 16
  %186 = load i64, i64* %syntax_table_, align 8
  store i64 %186, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 5), align 8
  br label %if.end.296

if.end.296:                                       ; preds = %if.else.295, %if.then.294
  br label %if.end.297

if.end.297:                                       ; preds = %if.end.296, %if.then.290
  br label %if.end.298

if.end.298:                                       ; preds = %if.end.297, %if.end.284
  br label %while.cond.299

while.cond.299:                                   ; preds = %cond.end.413, %if.end.298
  %187 = load %struct.interval*, %struct.interval** %i, align 8
  %tobool300 = icmp ne %struct.interval* %187, null
  br i1 %tobool300, label %while.body.301, label %while.end.415

while.body.301:                                   ; preds = %while.cond.299
  %188 = load i32, i32* %cnt, align 4
  %tobool302 = icmp ne i32 %188, 0
  br i1 %tobool302, label %land.lhs.true.303, label %if.else.353

land.lhs.true.303:                                ; preds = %while.body.301
  %189 = load i64, i64* %tmp_table, align 8
  %190 = load %struct.interval*, %struct.interval** %i, align 8
  %plist304 = getelementptr inbounds %struct.interval, %struct.interval* %190, i32 0, i32 6
  %191 = load i64, i64* %plist304, align 8
  %call305 = call i64 @builtin_lisp_symbol(i32 899)
  %call306 = call i64 @textget(i64 %191, i64 %call305)
  %cmp307 = icmp eq i64 %189, %call306
  br i1 %cmp307, label %if.else.353, label %if.then.309

if.then.309:                                      ; preds = %land.lhs.true.303
  %192 = load i64, i64* %count.addr, align 8
  %cmp310 = icmp sgt i64 %192, 0
  br i1 %cmp310, label %if.then.312, label %if.else.315

if.then.312:                                      ; preds = %if.then.309
  %193 = load %struct.interval*, %struct.interval** %i, align 8
  %position313 = getelementptr inbounds %struct.interval, %struct.interval* %193, i32 0, i32 1
  %194 = load i64, i64* %position313, align 8
  %195 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 12), align 8
  %sub314 = sub nsw i64 %194, %195
  store i64 %sub314, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 8), align 8
  %196 = load %struct.interval*, %struct.interval** %i, align 8
  store %struct.interval* %196, %struct.interval** getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 10), align 8
  br label %if.end.352

if.else.315:                                      ; preds = %if.then.309
  %197 = load %struct.interval*, %struct.interval** %i, align 8
  %position316 = getelementptr inbounds %struct.interval, %struct.interval* %197, i32 0, i32 1
  %198 = load i64, i64* %position316, align 8
  %199 = load %struct.interval*, %struct.interval** %i, align 8
  %cmp317 = icmp eq %struct.interval* %199, null
  br i1 %cmp317, label %cond.true.319, label %cond.false.320

cond.true.319:                                    ; preds = %if.else.315
  br label %cond.end.348

cond.false.320:                                   ; preds = %if.else.315
  %200 = load %struct.interval*, %struct.interval** %i, align 8
  %cmp321 = icmp eq %struct.interval* %200, null
  br i1 %cmp321, label %cond.true.323, label %cond.false.324

cond.true.323:                                    ; preds = %cond.false.320
  br label %cond.end.326

cond.false.324:                                   ; preds = %cond.false.320
  %201 = load %struct.interval*, %struct.interval** %i, align 8
  %total_length325 = getelementptr inbounds %struct.interval, %struct.interval* %201, i32 0, i32 0
  %202 = load i64, i64* %total_length325, align 8
  br label %cond.end.326

cond.end.326:                                     ; preds = %cond.false.324, %cond.true.323
  %cond327 = phi i64 [ 0, %cond.true.323 ], [ %202, %cond.false.324 ]
  %203 = load %struct.interval*, %struct.interval** %i, align 8
  %right328 = getelementptr inbounds %struct.interval, %struct.interval* %203, i32 0, i32 3
  %204 = load %struct.interval*, %struct.interval** %right328, align 8
  %cmp329 = icmp eq %struct.interval* %204, null
  br i1 %cmp329, label %cond.true.331, label %cond.false.332

cond.true.331:                                    ; preds = %cond.end.326
  br label %cond.end.335

cond.false.332:                                   ; preds = %cond.end.326
  %205 = load %struct.interval*, %struct.interval** %i, align 8
  %right333 = getelementptr inbounds %struct.interval, %struct.interval* %205, i32 0, i32 3
  %206 = load %struct.interval*, %struct.interval** %right333, align 8
  %total_length334 = getelementptr inbounds %struct.interval, %struct.interval* %206, i32 0, i32 0
  %207 = load i64, i64* %total_length334, align 8
  br label %cond.end.335

cond.end.335:                                     ; preds = %cond.false.332, %cond.true.331
  %cond336 = phi i64 [ 0, %cond.true.331 ], [ %207, %cond.false.332 ]
  %sub337 = sub nsw i64 %cond327, %cond336
  %208 = load %struct.interval*, %struct.interval** %i, align 8
  %left338 = getelementptr inbounds %struct.interval, %struct.interval* %208, i32 0, i32 2
  %209 = load %struct.interval*, %struct.interval** %left338, align 8
  %cmp339 = icmp eq %struct.interval* %209, null
  br i1 %cmp339, label %cond.true.341, label %cond.false.342

cond.true.341:                                    ; preds = %cond.end.335
  br label %cond.end.345

cond.false.342:                                   ; preds = %cond.end.335
  %210 = load %struct.interval*, %struct.interval** %i, align 8
  %left343 = getelementptr inbounds %struct.interval, %struct.interval* %210, i32 0, i32 2
  %211 = load %struct.interval*, %struct.interval** %left343, align 8
  %total_length344 = getelementptr inbounds %struct.interval, %struct.interval* %211, i32 0, i32 0
  %212 = load i64, i64* %total_length344, align 8
  br label %cond.end.345

cond.end.345:                                     ; preds = %cond.false.342, %cond.true.341
  %cond346 = phi i64 [ 0, %cond.true.341 ], [ %212, %cond.false.342 ]
  %sub347 = sub nsw i64 %sub337, %cond346
  br label %cond.end.348

cond.end.348:                                     ; preds = %cond.end.345, %cond.true.319
  %cond349 = phi i64 [ 0, %cond.true.319 ], [ %sub347, %cond.end.345 ]
  %add350 = add nsw i64 %198, %cond349
  %213 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 12), align 8
  %sub351 = sub nsw i64 %add350, %213
  store i64 %sub351, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 7), align 8
  %214 = load %struct.interval*, %struct.interval** %i, align 8
  store %struct.interval* %214, %struct.interval** getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 11), align 8
  br label %if.end.352

if.end.352:                                       ; preds = %cond.end.348, %if.then.312
  br label %if.end.420

if.else.353:                                      ; preds = %land.lhs.true.303, %while.body.301
  %215 = load i32, i32* %cnt, align 4
  %cmp354 = icmp eq i32 %215, 10
  br i1 %cmp354, label %if.then.356, label %if.end.405

if.then.356:                                      ; preds = %if.else.353
  %216 = load i64, i64* %count.addr, align 8
  %cmp357 = icmp sgt i64 %216, 0
  br i1 %cmp357, label %if.then.359, label %if.else.401

if.then.359:                                      ; preds = %if.then.356
  %217 = load %struct.interval*, %struct.interval** %i, align 8
  %position360 = getelementptr inbounds %struct.interval, %struct.interval* %217, i32 0, i32 1
  %218 = load i64, i64* %position360, align 8
  %219 = load %struct.interval*, %struct.interval** %i, align 8
  %cmp361 = icmp eq %struct.interval* %219, null
  br i1 %cmp361, label %cond.true.363, label %cond.false.364

cond.true.363:                                    ; preds = %if.then.359
  br label %cond.end.392

cond.false.364:                                   ; preds = %if.then.359
  %220 = load %struct.interval*, %struct.interval** %i, align 8
  %cmp365 = icmp eq %struct.interval* %220, null
  br i1 %cmp365, label %cond.true.367, label %cond.false.368

cond.true.367:                                    ; preds = %cond.false.364
  br label %cond.end.370

cond.false.368:                                   ; preds = %cond.false.364
  %221 = load %struct.interval*, %struct.interval** %i, align 8
  %total_length369 = getelementptr inbounds %struct.interval, %struct.interval* %221, i32 0, i32 0
  %222 = load i64, i64* %total_length369, align 8
  br label %cond.end.370

cond.end.370:                                     ; preds = %cond.false.368, %cond.true.367
  %cond371 = phi i64 [ 0, %cond.true.367 ], [ %222, %cond.false.368 ]
  %223 = load %struct.interval*, %struct.interval** %i, align 8
  %right372 = getelementptr inbounds %struct.interval, %struct.interval* %223, i32 0, i32 3
  %224 = load %struct.interval*, %struct.interval** %right372, align 8
  %cmp373 = icmp eq %struct.interval* %224, null
  br i1 %cmp373, label %cond.true.375, label %cond.false.376

cond.true.375:                                    ; preds = %cond.end.370
  br label %cond.end.379

cond.false.376:                                   ; preds = %cond.end.370
  %225 = load %struct.interval*, %struct.interval** %i, align 8
  %right377 = getelementptr inbounds %struct.interval, %struct.interval* %225, i32 0, i32 3
  %226 = load %struct.interval*, %struct.interval** %right377, align 8
  %total_length378 = getelementptr inbounds %struct.interval, %struct.interval* %226, i32 0, i32 0
  %227 = load i64, i64* %total_length378, align 8
  br label %cond.end.379

cond.end.379:                                     ; preds = %cond.false.376, %cond.true.375
  %cond380 = phi i64 [ 0, %cond.true.375 ], [ %227, %cond.false.376 ]
  %sub381 = sub nsw i64 %cond371, %cond380
  %228 = load %struct.interval*, %struct.interval** %i, align 8
  %left382 = getelementptr inbounds %struct.interval, %struct.interval* %228, i32 0, i32 2
  %229 = load %struct.interval*, %struct.interval** %left382, align 8
  %cmp383 = icmp eq %struct.interval* %229, null
  br i1 %cmp383, label %cond.true.385, label %cond.false.386

cond.true.385:                                    ; preds = %cond.end.379
  br label %cond.end.389

cond.false.386:                                   ; preds = %cond.end.379
  %230 = load %struct.interval*, %struct.interval** %i, align 8
  %left387 = getelementptr inbounds %struct.interval, %struct.interval* %230, i32 0, i32 2
  %231 = load %struct.interval*, %struct.interval** %left387, align 8
  %total_length388 = getelementptr inbounds %struct.interval, %struct.interval* %231, i32 0, i32 0
  %232 = load i64, i64* %total_length388, align 8
  br label %cond.end.389

cond.end.389:                                     ; preds = %cond.false.386, %cond.true.385
  %cond390 = phi i64 [ 0, %cond.true.385 ], [ %232, %cond.false.386 ]
  %sub391 = sub nsw i64 %sub381, %cond390
  br label %cond.end.392

cond.end.392:                                     ; preds = %cond.end.389, %cond.true.363
  %cond393 = phi i64 [ 0, %cond.true.363 ], [ %sub391, %cond.end.389 ]
  %add394 = add nsw i64 %218, %cond393
  %233 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 12), align 8
  %sub395 = sub nsw i64 %add394, %233
  %234 = load %struct.interval*, %struct.interval** %i, align 8
  %call396 = call %struct.interval* @next_interval(%struct.interval* %234)
  %tobool397 = icmp ne %struct.interval* %call396, null
  %cond398 = select i1 %tobool397, i32 0, i32 1
  %conv399 = sext i32 %cond398 to i64
  %add400 = add nsw i64 %sub395, %conv399
  store i64 %add400, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 8), align 8
  %235 = load %struct.interval*, %struct.interval** %i, align 8
  store %struct.interval* %235, %struct.interval** getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 10), align 8
  br label %if.end.404

if.else.401:                                      ; preds = %if.then.356
  %236 = load %struct.interval*, %struct.interval** %i, align 8
  %position402 = getelementptr inbounds %struct.interval, %struct.interval* %236, i32 0, i32 1
  %237 = load i64, i64* %position402, align 8
  %238 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 12), align 8
  %sub403 = sub nsw i64 %237, %238
  store i64 %sub403, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 7), align 8
  %239 = load %struct.interval*, %struct.interval** %i, align 8
  store %struct.interval* %239, %struct.interval** getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 11), align 8
  br label %if.end.404

if.end.404:                                       ; preds = %if.else.401, %cond.end.392
  br label %if.end.420

if.end.405:                                       ; preds = %if.else.353
  br label %if.end.406

if.end.406:                                       ; preds = %if.end.405
  %240 = load i32, i32* %cnt, align 4
  %inc = add nsw i32 %240, 1
  store i32 %inc, i32* %cnt, align 4
  %241 = load i64, i64* %count.addr, align 8
  %cmp407 = icmp sgt i64 %241, 0
  br i1 %cmp407, label %cond.true.409, label %cond.false.411

cond.true.409:                                    ; preds = %if.end.406
  %242 = load %struct.interval*, %struct.interval** %i, align 8
  %call410 = call %struct.interval* @next_interval(%struct.interval* %242)
  br label %cond.end.413

cond.false.411:                                   ; preds = %if.end.406
  %243 = load %struct.interval*, %struct.interval** %i, align 8
  %call412 = call %struct.interval* @previous_interval(%struct.interval* %243)
  br label %cond.end.413

cond.end.413:                                     ; preds = %cond.false.411, %cond.true.409
  %cond414 = phi %struct.interval* [ %call410, %cond.true.409 ], [ %call412, %cond.false.411 ]
  store %struct.interval* %cond414, %struct.interval** %i, align 8
  br label %while.cond.299

while.end.415:                                    ; preds = %while.cond.299
  %244 = load i64, i64* %count.addr, align 8
  %cmp416 = icmp sgt i64 %244, 0
  br i1 %cmp416, label %if.then.418, label %if.else.419

if.then.418:                                      ; preds = %while.end.415
  %245 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 2), align 8
  store i64 %245, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 8), align 8
  %246 = load %struct.interval*, %struct.interval** %i, align 8
  store %struct.interval* %246, %struct.interval** getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 10), align 8
  br label %if.end.420

if.else.419:                                      ; preds = %while.end.415
  %247 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 1), align 8
  store i64 %247, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 7), align 8
  br label %if.end.420

if.end.420:                                       ; preds = %if.then.3, %if.end.352, %if.end.404, %if.else.419, %if.then.418
  ret void
}

declare %struct.interval* @interval_of(i64, i64) #1

; Function Attrs: noreturn
declare void @error(i8*, ...) #2

declare %struct.interval* @update_interval(%struct.interval*, i64) #1

declare i64 @textget(i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fsyntax_table_p(i64 %object) #0 {
entry:
  %retval = alloca i64, align 8
  %object.addr = alloca i64, align 8
  store i64 %object, i64* %object.addr, align 8
  %0 = load i64, i64* %object.addr, align 8
  %call = call zeroext i1 @CHAR_TABLE_P(i64 %0)
  br i1 %call, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %object.addr, align 8
  %call1 = call %struct.Lisp_Char_Table* @XCHAR_TABLE(i64 %1)
  %purpose = getelementptr inbounds %struct.Lisp_Char_Table, %struct.Lisp_Char_Table* %call1, i32 0, i32 3
  %2 = load i64, i64* %purpose, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 899)
  %cmp = icmp eq i64 %2, %call2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %call3 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call3, i64* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call4, i64* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %3 = load i64, i64* %retval
  ret i64 %3
}

declare %struct.interval* @next_interval(%struct.interval*) #1

declare %struct.interval* @previous_interval(%struct.interval*) #1

; Function Attrs: nounwind uwtable
define void @update_syntax_table_forward(i64 %charpos, i1 zeroext %init, i64 %object) #0 {
entry:
  %charpos.addr = alloca i64, align 8
  %init.addr = alloca i8, align 1
  %object.addr = alloca i64, align 8
  store i64 %charpos, i64* %charpos.addr, align 8
  %frombool = zext i1 %init to i8
  store i8 %frombool, i8* %init.addr, align 1
  store i64 %object, i64* %object.addr, align 8
  %0 = load i8, i8* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 9), align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %charpos.addr, align 8
  call void @parse_sexp_propertize(i64 %1)
  br label %if.end.4

if.else:                                          ; preds = %entry
  %2 = load i64, i64* %charpos.addr, align 8
  %3 = load i8, i8* %init.addr, align 1
  %tobool1 = trunc i8 %3 to i1
  %4 = load i64, i64* %object.addr, align 8
  call void @update_syntax_table(i64 %2, i64 1, i1 zeroext %tobool1, i64 %4)
  %5 = load i64, i64* %object.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %5, %call
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.else
  %6 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 8), align 8
  %7 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 412), align 8
  %cmp2 = icmp sgt i64 %6, %7
  br i1 %cmp2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %land.lhs.true
  %8 = load i64, i64* %charpos.addr, align 8
  call void @parse_sexp_propertize(i64 %8)
  br label %if.end

if.end:                                           ; preds = %if.then.3, %land.lhs.true, %if.else
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @parse_sexp_propertize(i64 %charpos) #0 {
entry:
  %charpos.addr = alloca i64, align 8
  %zv = alloca i64, align 8
  %modiffs = alloca i64, align 8
  store i64 %charpos, i64* %charpos.addr, align 8
  %0 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv1 = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i32 0, i32 79
  %1 = load i64, i64* %zv1, align 8
  store i64 %1, i64* %zv, align 8
  %2 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 412), align 8
  %3 = load i64, i64* %charpos.addr, align 8
  %cmp = icmp sle i64 %2, %3
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %4 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 412), align 8
  %5 = load i64, i64* %zv, align 8
  %cmp2 = icmp slt i64 %4, %5
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %6, i32 0, i32 73
  %7 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %chars_modiff = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %7, i32 0, i32 7
  %8 = load i64, i64* %chars_modiff, align 8
  store i64 %8, i64* %modiffs, align 8
  %call = call i64 @builtin_lisp_symbol(i32 562)
  %9 = load i64, i64* %zv, align 8
  %10 = load i64, i64* %charpos.addr, align 8
  %add = add nsw i64 1, %10
  %cmp3 = icmp slt i64 %9, %add
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %11 = load i64, i64* %zv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %12 = load i64, i64* %charpos.addr, align 8
  %add4 = add nsw i64 1, %12
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %11, %cond.true ], [ %add4, %cond.false ]
  %shl = shl i64 %cond, 2
  %add5 = add i64 %shl, 2
  %call6 = call i64 @safe_call1(i64 %call, i64 %add5)
  %13 = load i64, i64* %modiffs, align 8
  %14 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text7 = getelementptr inbounds %struct.buffer, %struct.buffer* %14, i32 0, i32 73
  %15 = load %struct.buffer_text*, %struct.buffer_text** %text7, align 8
  %chars_modiff8 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %15, i32 0, i32 7
  %16 = load i64, i64* %chars_modiff8, align 8
  %cmp9 = icmp ne i64 %13, %16
  br i1 %cmp9, label %if.then.10, label %if.end

if.then.10:                                       ; preds = %cond.end
  call void (i8*, ...) @error(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.58, i32 0, i32 0)) #5
  unreachable

if.end:                                           ; preds = %cond.end
  %17 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 412), align 8
  %18 = load i64, i64* %charpos.addr, align 8
  %cmp11 = icmp sle i64 %17, %18
  br i1 %cmp11, label %land.lhs.true.12, label %if.end.15

land.lhs.true.12:                                 ; preds = %if.end
  %19 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 412), align 8
  %20 = load i64, i64* %zv, align 8
  %cmp13 = icmp slt i64 %19, %20
  br i1 %cmp13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %land.lhs.true.12
  call void (i8*, ...) @error(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.59, i32 0, i32 0)) #5
  unreachable

if.end.15:                                        ; preds = %land.lhs.true.12, %if.end
  %21 = load i64, i64* %charpos.addr, align 8
  call void @SETUP_SYNTAX_TABLE(i64 %21, i64 1)
  br label %if.end.25

if.else:                                          ; preds = %land.lhs.true, %entry
  %22 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 8), align 8
  %23 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 412), align 8
  %cmp16 = icmp sgt i64 %22, %23
  br i1 %cmp16, label %if.then.17, label %if.else.18

if.then.17:                                       ; preds = %if.else
  %24 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 412), align 8
  store i64 %24, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 8), align 8
  store i8 1, i8* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 9), align 1
  br label %if.end.24

if.else.18:                                       ; preds = %if.else
  %25 = load i8, i8* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 9), align 1
  %tobool = trunc i8 %25 to i1
  br i1 %tobool, label %land.lhs.true.19, label %if.end.23

land.lhs.true.19:                                 ; preds = %if.else.18
  %26 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 8), align 8
  %27 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 412), align 8
  %cmp20 = icmp slt i64 %26, %27
  br i1 %cmp20, label %if.then.21, label %if.end.23

if.then.21:                                       ; preds = %land.lhs.true.19
  store i8 0, i8* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 9), align 1
  %28 = load i64, i64* %charpos.addr, align 8
  %call22 = call i64 @builtin_lisp_symbol(i32 0)
  call void @update_syntax_table_forward(i64 %28, i1 zeroext false, i64 %call22)
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.21, %land.lhs.true.19, %if.else.18
  br label %if.end.24

if.end.24:                                        ; preds = %if.end.23, %if.then.17
  br label %if.end.25

if.end.25:                                        ; preds = %if.end.24, %if.end.15
  ret void
}

declare zeroext i1 @CHAR_TABLE_P(i64) #1

declare %struct.Lisp_Char_Table* @XCHAR_TABLE(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fsyntax_table() #0 {
entry:
  %0 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %syntax_table_ = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i32 0, i32 16
  %1 = load i64, i64* %syntax_table_, align 8
  ret i64 %1
}

; Function Attrs: nounwind uwtable
define i64 @Fstandard_syntax_table() #0 {
entry:
  %0 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 16), align 8
  ret i64 %0
}

; Function Attrs: nounwind uwtable
define i64 @Fcopy_syntax_table(i64 %table) #0 {
entry:
  %table.addr = alloca i64, align 8
  %copy = alloca i64, align 8
  store i64 %table, i64* %table.addr, align 8
  %0 = load i64, i64* %table.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %table.addr, align 8
  call void @check_syntax_table(i64 %1)
  br label %if.end

if.else:                                          ; preds = %entry
  %2 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 16), align 8
  store i64 %2, i64* %table.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %3 = load i64, i64* %table.addr, align 8
  %call1 = call i64 @Fcopy_sequence(i64 %3)
  store i64 %call1, i64* %copy, align 8
  %4 = load i64, i64* %copy, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  call void @set_char_table_defalt(i64 %4, i64 %call2)
  %5 = load i64, i64* %copy, align 8
  %call3 = call %struct.Lisp_Char_Table* @XCHAR_TABLE(i64 %5)
  %parent = getelementptr inbounds %struct.Lisp_Char_Table, %struct.Lisp_Char_Table* %call3, i32 0, i32 2
  %6 = load i64, i64* %parent, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp5 = icmp eq i64 %6, %call4
  br i1 %cmp5, label %if.then.6, label %if.end.8

if.then.6:                                        ; preds = %if.end
  %7 = load i64, i64* %copy, align 8
  %8 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 16), align 8
  %call7 = call i64 @Fset_char_table_parent(i64 %7, i64 %8)
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.6, %if.end
  %9 = load i64, i64* %copy, align 8
  ret i64 %9
}

; Function Attrs: nounwind uwtable
define internal void @check_syntax_table(i64 %obj) #0 {
entry:
  %obj.addr = alloca i64, align 8
  store i64 %obj, i64* %obj.addr, align 8
  %0 = load i64, i64* %obj.addr, align 8
  %call = call zeroext i1 @CHAR_TABLE_P(i64 %0)
  br i1 %call, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %obj.addr, align 8
  %call1 = call %struct.Lisp_Char_Table* @XCHAR_TABLE(i64 %1)
  %purpose = getelementptr inbounds %struct.Lisp_Char_Table, %struct.Lisp_Char_Table* %call1, i32 0, i32 3
  %2 = load i64, i64* %purpose, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 899)
  %cmp = icmp eq i64 %2, %call2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %call3 = call i64 @builtin_lisp_symbol(i32 900)
  %3 = load i64, i64* %obj.addr, align 8
  %4 = call i64 @wrong_type_argument(i64 %call3, i64 %3) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %5, %cond.true
  ret void
}

declare i64 @Fcopy_sequence(i64) #1

declare void @set_char_table_defalt(i64, i64) #1

declare i64 @Fset_char_table_parent(i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fset_syntax_table(i64 %table) #0 {
entry:
  %table.addr = alloca i64, align 8
  %idx = alloca i32, align 4
  store i64 %table, i64* %table.addr, align 8
  %0 = load i64, i64* %table.addr, align 8
  call void @check_syntax_table(i64 %0)
  %1 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %2 = load i64, i64* %table.addr, align 8
  call void @bset_syntax_table(%struct.buffer* %1, i64 %2)
  %3 = load i64, i64* bitcast (i8* getelementptr inbounds (i8, i8* bitcast (%struct.buffer* @buffer_local_flags to i8*), i64 128) to i64*), align 8
  %shr = ashr i64 %3, 2
  %conv = trunc i64 %shr to i32
  store i32 %conv, i32* %idx, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %4 = load i32, i32* %idx, align 4
  %cmp = icmp slt i32 %4, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.body
  %5 = load i32, i32* %idx, align 4
  %6 = load i32, i32* @last_per_buffer_idx, align 4
  %cmp2 = icmp sge i32 %5, %6
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %do.body
  call void @emacs_abort() #5
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %7 = load i32, i32* %idx, align 4
  %idxprom = sext i32 %7 to i64
  %8 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %local_flags = getelementptr inbounds %struct.buffer, %struct.buffer* %8, i32 0, i32 84
  %arrayidx = getelementptr inbounds [50 x i8], [50 x i8]* %local_flags, i32 0, i64 %idxprom
  store i8 1, i8* %arrayidx, align 1
  br label %do.end

do.end:                                           ; preds = %if.end
  %9 = load i64, i64* %table.addr, align 8
  ret i64 %9
}

; Function Attrs: nounwind uwtable
define internal void @bset_syntax_table(%struct.buffer* %b, i64 %val) #0 {
entry:
  %b.addr = alloca %struct.buffer*, align 8
  %val.addr = alloca i64, align 8
  store %struct.buffer* %b, %struct.buffer** %b.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** %b.addr, align 8
  %syntax_table_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 16
  store i64 %0, i64* %syntax_table_, align 8
  ret void
}

; Function Attrs: noreturn
declare void @emacs_abort() #2

; Function Attrs: nounwind uwtable
define i64 @Fchar_syntax(i64 %character) #0 {
entry:
  %character.addr = alloca i64, align 8
  %char_int = alloca i32, align 4
  store i64 %character, i64* %character.addr, align 8
  %0 = load i64, i64* %character.addr, align 8
  %call = call zeroext i1 @NATNUMP(i64 %0)
  br i1 %call, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %character.addr, align 8
  %shr = ashr i64 %1, 2
  %cmp = icmp sle i64 %shr, 4194303
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 260)
  %2 = load i64, i64* %character.addr, align 8
  %3 = call i64 @wrong_type_argument(i64 %call1, i64 %2) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %4, %cond.true
  %5 = load i64, i64* %character.addr, align 8
  %shr2 = ashr i64 %5, 2
  %conv = trunc i64 %shr2 to i32
  store i32 %conv, i32* %char_int, align 4
  call void @SETUP_BUFFER_SYNTAX_TABLE()
  %6 = load i32, i32* %char_int, align 4
  %call3 = call i32 @syntax_property(i32 %6, i1 zeroext true)
  %idxprom = zext i32 %call3 to i64
  %arrayidx = getelementptr inbounds [16 x i8], [16 x i8]* @syntax_code_spec, i32 0, i64 %idxprom
  %7 = load i8, i8* %arrayidx, align 1
  %conv4 = sext i8 %7 to i64
  %shl = shl i64 %conv4, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

declare zeroext i1 @NATNUMP(i64) #1

; Function Attrs: noreturn
declare i64 @wrong_type_argument(i64, i64) #2

declare i32 @syntax_property(i32, i1 zeroext) #1

; Function Attrs: nounwind uwtable
define i64 @Fmatching_paren(i64 %character) #0 {
entry:
  %retval = alloca i64, align 8
  %character.addr = alloca i64, align 8
  %char_int = alloca i32, align 4
  %code = alloca i32, align 4
  store i64 %character, i64* %character.addr, align 8
  %0 = load i64, i64* %character.addr, align 8
  %call = call zeroext i1 @NATNUMP(i64 %0)
  br i1 %call, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %character.addr, align 8
  %shr = ashr i64 %1, 2
  %cmp = icmp sle i64 %shr, 4194303
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 260)
  %2 = load i64, i64* %character.addr, align 8
  %3 = call i64 @wrong_type_argument(i64 %call1, i64 %2) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %4, %cond.true
  %5 = load i64, i64* %character.addr, align 8
  %shr2 = ashr i64 %5, 2
  %conv = trunc i64 %shr2 to i32
  store i32 %conv, i32* %char_int, align 4
  call void @SETUP_BUFFER_SYNTAX_TABLE()
  %6 = load i32, i32* %char_int, align 4
  %call3 = call i32 @syntax_property(i32 %6, i1 zeroext true)
  store i32 %call3, i32* %code, align 4
  %7 = load i32, i32* %code, align 4
  %cmp4 = icmp eq i32 %7, 4
  br i1 %cmp4, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %8 = load i32, i32* %code, align 4
  %cmp6 = icmp eq i32 %8, 5
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %cond.end
  %9 = load i32, i32* %char_int, align 4
  %call8 = call i64 @SYNTAX_MATCH(i32 %9)
  store i64 %call8, i64* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call9, i64* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load i64, i64* %retval
  ret i64 %10
}

; Function Attrs: nounwind uwtable
define internal i64 @SYNTAX_MATCH(i32 %c) #0 {
entry:
  %c.addr = alloca i32, align 4
  %ent = alloca i64, align 8
  store i32 %c, i32* %c.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  %call = call i64 @syntax_property_entry(i32 %0, i1 zeroext true)
  store i64 %call, i64* %ent, align 8
  %1 = load i64, i64* %ent, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i64, i64* %ent, align 8
  %sub = sub nsw i64 %2, 3
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %4, i32 0, i32 1
  %cdr = bitcast %union.anon.0* %u to i64*
  %5 = load i64, i64* %cdr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %5, %cond.true ], [ %call2, %cond.false ]
  ret i64 %cond
}

; Function Attrs: nounwind uwtable
define i64 @Fstring_to_syntax(i64 %string) #0 {
entry:
  %retval = alloca i64, align 8
  %string.addr = alloca i64, align 8
  %p = alloca i8*, align 8
  %val = alloca i32, align 4
  %match = alloca i64, align 8
  %len = alloca i32, align 4
  %character = alloca i32, align 4
  store i64 %string, i64* %string.addr, align 8
  %0 = load i64, i64* %string.addr, align 8
  call void @CHECK_STRING(i64 %0)
  %1 = load i64, i64* %string.addr, align 8
  %call = call i8* @SDATA(i64 %1)
  store i8* %call, i8** %p, align 8
  %2 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  %3 = load i8, i8* %2, align 1
  %idxprom = zext i8 %3 to i64
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @syntax_spec_code, i32 0, i64 %idxprom
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  store i32 %conv, i32* %val, align 4
  %5 = load i32, i32* %val, align 4
  %cmp = icmp eq i32 %5, 255
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load i8*, i8** %p, align 8
  %arrayidx2 = getelementptr inbounds i8, i8* %6, i64 -1
  %7 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %7 to i32
  call void (i8*, ...) @error(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3, i32 0, i32 0), i32 %conv3) #5
  unreachable

if.end:                                           ; preds = %entry
  %8 = load i32, i32* %val, align 4
  %cmp4 = icmp eq i32 %8, 13
  br i1 %cmp4, label %if.then.6, label %if.end.8

if.then.6:                                        ; preds = %if.end
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call7, i64* %retval
  br label %return

if.end.8:                                         ; preds = %if.end
  %9 = load i8*, i8** %p, align 8
  %10 = load i8, i8* %9, align 1
  %tobool = icmp ne i8 %10, 0
  br i1 %tobool, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %if.end.8
  %11 = load i8*, i8** %p, align 8
  %arrayidx10 = getelementptr inbounds i8, i8* %11, i64 0
  %12 = load i8, i8* %arrayidx10, align 1
  %conv11 = zext i8 %12 to i32
  %and = and i32 %conv11, 128
  %tobool12 = icmp ne i32 %and, 0
  br i1 %tobool12, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.then.9
  store i32 1, i32* %len, align 4
  %13 = load i8*, i8** %p, align 8
  %arrayidx13 = getelementptr inbounds i8, i8* %13, i64 0
  %14 = load i8, i8* %arrayidx13, align 1
  %conv14 = zext i8 %14 to i32
  br label %cond.end.54

cond.false:                                       ; preds = %if.then.9
  %15 = load i8*, i8** %p, align 8
  %arrayidx15 = getelementptr inbounds i8, i8* %15, i64 0
  %16 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %16 to i32
  %and17 = and i32 %conv16, 32
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %cond.false.30, label %cond.true.19

cond.true.19:                                     ; preds = %cond.false
  store i32 2, i32* %len, align 4
  %17 = load i8*, i8** %p, align 8
  %arrayidx20 = getelementptr inbounds i8, i8* %17, i64 0
  %18 = load i8, i8* %arrayidx20, align 1
  %conv21 = zext i8 %18 to i32
  %and22 = and i32 %conv21, 31
  %shl = shl i32 %and22, 6
  %19 = load i8*, i8** %p, align 8
  %arrayidx23 = getelementptr inbounds i8, i8* %19, i64 1
  %20 = load i8, i8* %arrayidx23, align 1
  %conv24 = zext i8 %20 to i32
  %and25 = and i32 %conv24, 63
  %or = or i32 %shl, %and25
  %21 = load i8*, i8** %p, align 8
  %arrayidx26 = getelementptr inbounds i8, i8* %21, i64 0
  %22 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %22 to i32
  %cmp28 = icmp slt i32 %conv27, 194
  %cond = select i1 %cmp28, i32 4194176, i32 0
  %add = add nsw i32 %or, %cond
  br label %cond.end.52

cond.false.30:                                    ; preds = %cond.false
  %23 = load i8*, i8** %p, align 8
  %arrayidx31 = getelementptr inbounds i8, i8* %23, i64 0
  %24 = load i8, i8* %arrayidx31, align 1
  %conv32 = zext i8 %24 to i32
  %and33 = and i32 %conv32, 16
  %tobool34 = icmp ne i32 %and33, 0
  br i1 %tobool34, label %cond.false.49, label %cond.true.35

cond.true.35:                                     ; preds = %cond.false.30
  store i32 3, i32* %len, align 4
  %25 = load i8*, i8** %p, align 8
  %arrayidx36 = getelementptr inbounds i8, i8* %25, i64 0
  %26 = load i8, i8* %arrayidx36, align 1
  %conv37 = zext i8 %26 to i32
  %and38 = and i32 %conv37, 15
  %shl39 = shl i32 %and38, 12
  %27 = load i8*, i8** %p, align 8
  %arrayidx40 = getelementptr inbounds i8, i8* %27, i64 1
  %28 = load i8, i8* %arrayidx40, align 1
  %conv41 = zext i8 %28 to i32
  %and42 = and i32 %conv41, 63
  %shl43 = shl i32 %and42, 6
  %or44 = or i32 %shl39, %shl43
  %29 = load i8*, i8** %p, align 8
  %arrayidx45 = getelementptr inbounds i8, i8* %29, i64 2
  %30 = load i8, i8* %arrayidx45, align 1
  %conv46 = zext i8 %30 to i32
  %and47 = and i32 %conv46, 63
  %or48 = or i32 %or44, %and47
  br label %cond.end

cond.false.49:                                    ; preds = %cond.false.30
  %31 = load i8*, i8** %p, align 8
  %call50 = call i32 @string_char(i8* %31, i8** null, i32* %len)
  br label %cond.end

cond.end:                                         ; preds = %cond.false.49, %cond.true.35
  %cond51 = phi i32 [ %or48, %cond.true.35 ], [ %call50, %cond.false.49 ]
  br label %cond.end.52

cond.end.52:                                      ; preds = %cond.end, %cond.true.19
  %cond53 = phi i32 [ %add, %cond.true.19 ], [ %cond51, %cond.end ]
  br label %cond.end.54

cond.end.54:                                      ; preds = %cond.end.52, %cond.true
  %cond55 = phi i32 [ %conv14, %cond.true ], [ %cond53, %cond.end.52 ]
  store i32 %cond55, i32* %character, align 4
  %32 = load i32, i32* %character, align 4
  %conv56 = sext i32 %32 to i64
  %shl57 = shl i64 %conv56, 2
  %add58 = add i64 %shl57, 2
  store i64 %add58, i64* %match, align 8
  %33 = load i64, i64* %match, align 8
  %shr = ashr i64 %33, 2
  %cmp59 = icmp eq i64 %shr, 32
  br i1 %cmp59, label %if.then.61, label %if.end.63

if.then.61:                                       ; preds = %cond.end.54
  %call62 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call62, i64* %match, align 8
  br label %if.end.63

if.end.63:                                        ; preds = %if.then.61, %cond.end.54
  %34 = load i32, i32* %len, align 4
  %35 = load i8*, i8** %p, align 8
  %idx.ext = sext i32 %34 to i64
  %add.ptr = getelementptr inbounds i8, i8* %35, i64 %idx.ext
  store i8* %add.ptr, i8** %p, align 8
  br label %if.end.65

if.else:                                          ; preds = %if.end.8
  %call64 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call64, i64* %match, align 8
  br label %if.end.65

if.end.65:                                        ; preds = %if.else, %if.end.63
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %if.end.65
  %36 = load i8*, i8** %p, align 8
  %37 = load i8, i8* %36, align 1
  %tobool66 = icmp ne i8 %37, 0
  br i1 %tobool66, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %38 = load i8*, i8** %p, align 8
  %incdec.ptr67 = getelementptr inbounds i8, i8* %38, i32 1
  store i8* %incdec.ptr67, i8** %p, align 8
  %39 = load i8, i8* %38, align 1
  %conv68 = zext i8 %39 to i32
  switch i32 %conv68, label %sw.epilog [
    i32 49, label %sw.bb
    i32 50, label %sw.bb.70
    i32 51, label %sw.bb.72
    i32 52, label %sw.bb.74
    i32 112, label %sw.bb.76
    i32 98, label %sw.bb.78
    i32 110, label %sw.bb.80
    i32 99, label %sw.bb.82
  ]

sw.bb:                                            ; preds = %while.body
  %40 = load i32, i32* %val, align 4
  %or69 = or i32 %40, 65536
  store i32 %or69, i32* %val, align 4
  br label %sw.epilog

sw.bb.70:                                         ; preds = %while.body
  %41 = load i32, i32* %val, align 4
  %or71 = or i32 %41, 131072
  store i32 %or71, i32* %val, align 4
  br label %sw.epilog

sw.bb.72:                                         ; preds = %while.body
  %42 = load i32, i32* %val, align 4
  %or73 = or i32 %42, 262144
  store i32 %or73, i32* %val, align 4
  br label %sw.epilog

sw.bb.74:                                         ; preds = %while.body
  %43 = load i32, i32* %val, align 4
  %or75 = or i32 %43, 524288
  store i32 %or75, i32* %val, align 4
  br label %sw.epilog

sw.bb.76:                                         ; preds = %while.body
  %44 = load i32, i32* %val, align 4
  %or77 = or i32 %44, 1048576
  store i32 %or77, i32* %val, align 4
  br label %sw.epilog

sw.bb.78:                                         ; preds = %while.body
  %45 = load i32, i32* %val, align 4
  %or79 = or i32 %45, 2097152
  store i32 %or79, i32* %val, align 4
  br label %sw.epilog

sw.bb.80:                                         ; preds = %while.body
  %46 = load i32, i32* %val, align 4
  %or81 = or i32 %46, 4194304
  store i32 %or81, i32* %val, align 4
  br label %sw.epilog

sw.bb.82:                                         ; preds = %while.body
  %47 = load i32, i32* %val, align 4
  %or83 = or i32 %47, 8388608
  store i32 %or83, i32* %val, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %while.body, %sw.bb.82, %sw.bb.80, %sw.bb.78, %sw.bb.76, %sw.bb.74, %sw.bb.72, %sw.bb.70, %sw.bb
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %48 = load i32, i32* %val, align 4
  %conv84 = sext i32 %48 to i64
  %49 = load i64, i64* @Vsyntax_code_object, align 8
  %call85 = call i64 @ASIZE(i64 %49)
  %cmp86 = icmp slt i64 %conv84, %call85
  br i1 %cmp86, label %land.lhs.true, label %if.else.94

land.lhs.true:                                    ; preds = %while.end
  %50 = load i64, i64* %match, align 8
  %call88 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp89 = icmp eq i64 %50, %call88
  br i1 %cmp89, label %if.then.91, label %if.else.94

if.then.91:                                       ; preds = %land.lhs.true
  %51 = load i64, i64* @Vsyntax_code_object, align 8
  %52 = load i32, i32* %val, align 4
  %conv92 = sext i32 %52 to i64
  %call93 = call i64 @AREF(i64 %51, i64 %conv92)
  store i64 %call93, i64* %retval
  br label %return

if.else.94:                                       ; preds = %land.lhs.true, %while.end
  %53 = load i32, i32* %val, align 4
  %conv95 = sext i32 %53 to i64
  %shl96 = shl i64 %conv95, 2
  %add97 = add i64 %shl96, 2
  %54 = load i64, i64* %match, align 8
  %call98 = call i64 @Fcons(i64 %add97, i64 %54)
  store i64 %call98, i64* %retval
  br label %return

return:                                           ; preds = %if.else.94, %if.then.91, %if.then.6
  %55 = load i64, i64* %retval
  ret i64 %55
}

declare void @CHECK_STRING(i64) #1

declare i8* @SDATA(i64) #1

declare i32 @string_char(i8*, i8**, i32*) #1

declare i64 @ASIZE(i64) #1

declare i64 @AREF(i64, i64) #1

declare i64 @Fcons(i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fmodify_syntax_entry(i64 %c, i64 %newentry, i64 %syntax_table) #0 {
entry:
  %c.addr = alloca i64, align 8
  %newentry.addr = alloca i64, align 8
  %syntax_table.addr = alloca i64, align 8
  %tmp = alloca i64, align 8
  %tmp8 = alloca i64, align 8
  store i64 %c, i64* %c.addr, align 8
  store i64 %newentry, i64* %newentry.addr, align 8
  store i64 %syntax_table, i64* %syntax_table.addr, align 8
  %0 = load i64, i64* %c.addr, align 8
  %and = and i64 %0, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %1 = load i64, i64* %c.addr, align 8
  %sub = sub nsw i64 %1, 3
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %3, i32 0, i32 0
  %4 = load i64, i64* %car, align 8
  store i64 %4, i64* %tmp, align 8
  %5 = load i64, i64* %tmp, align 8
  %call = call zeroext i1 @NATNUMP(i64 %5)
  br i1 %call, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %do.body
  %6 = load i64, i64* %tmp, align 8
  %shr = ashr i64 %6, 2
  %cmp3 = icmp sle i64 %shr, 4194303
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %do.body
  %call5 = call i64 @builtin_lisp_symbol(i32 260)
  %7 = load i64, i64* %tmp, align 8
  %8 = call i64 @wrong_type_argument(i64 %call5, i64 %7) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %9, %cond.true
  br label %do.end

do.end:                                           ; preds = %cond.end
  br label %do.body.6

do.body.6:                                        ; preds = %do.end
  %10 = load i64, i64* %c.addr, align 8
  %sub9 = sub nsw i64 %10, 3
  %11 = inttoptr i64 %sub9 to i8*
  %12 = bitcast i8* %11 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %12, i32 0, i32 1
  %cdr = bitcast %union.anon.0* %u to i64*
  %13 = load i64, i64* %cdr, align 8
  store i64 %13, i64* %tmp8, align 8
  %14 = load i64, i64* %tmp8, align 8
  %call10 = call zeroext i1 @NATNUMP(i64 %14)
  br i1 %call10, label %land.lhs.true.12, label %cond.false.17

land.lhs.true.12:                                 ; preds = %do.body.6
  %15 = load i64, i64* %tmp8, align 8
  %shr13 = ashr i64 %15, 2
  %cmp14 = icmp sle i64 %shr13, 4194303
  br i1 %cmp14, label %cond.true.16, label %cond.false.17

cond.true.16:                                     ; preds = %land.lhs.true.12
  br label %cond.end.19

cond.false.17:                                    ; preds = %land.lhs.true.12, %do.body.6
  %call18 = call i64 @builtin_lisp_symbol(i32 260)
  %16 = load i64, i64* %tmp8, align 8
  %17 = call i64 @wrong_type_argument(i64 %call18, i64 %16) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end.19

cond.end.19:                                      ; preds = %18, %cond.true.16
  br label %do.end.20

do.end.20:                                        ; preds = %cond.end.19
  br label %if.end

if.else:                                          ; preds = %entry
  %19 = load i64, i64* %c.addr, align 8
  %call21 = call zeroext i1 @NATNUMP(i64 %19)
  br i1 %call21, label %land.lhs.true.23, label %cond.false.28

land.lhs.true.23:                                 ; preds = %if.else
  %20 = load i64, i64* %c.addr, align 8
  %shr24 = ashr i64 %20, 2
  %cmp25 = icmp sle i64 %shr24, 4194303
  br i1 %cmp25, label %cond.true.27, label %cond.false.28

cond.true.27:                                     ; preds = %land.lhs.true.23
  br label %cond.end.30

cond.false.28:                                    ; preds = %land.lhs.true.23, %if.else
  %call29 = call i64 @builtin_lisp_symbol(i32 260)
  %21 = load i64, i64* %c.addr, align 8
  %22 = call i64 @wrong_type_argument(i64 %call29, i64 %21) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end.30

cond.end.30:                                      ; preds = %23, %cond.true.27
  br label %if.end

if.end:                                           ; preds = %cond.end.30, %do.end.20
  %24 = load i64, i64* %syntax_table.addr, align 8
  %call31 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp32 = icmp eq i64 %24, %call31
  br i1 %cmp32, label %if.then.34, label %if.else.35

if.then.34:                                       ; preds = %if.end
  %25 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %syntax_table_ = getelementptr inbounds %struct.buffer, %struct.buffer* %25, i32 0, i32 16
  %26 = load i64, i64* %syntax_table_, align 8
  store i64 %26, i64* %syntax_table.addr, align 8
  br label %if.end.36

if.else.35:                                       ; preds = %if.end
  %27 = load i64, i64* %syntax_table.addr, align 8
  call void @check_syntax_table(i64 %27)
  br label %if.end.36

if.end.36:                                        ; preds = %if.else.35, %if.then.34
  %28 = load i64, i64* %newentry.addr, align 8
  %call37 = call i64 @Fstring_to_syntax(i64 %28)
  store i64 %call37, i64* %newentry.addr, align 8
  %29 = load i64, i64* %c.addr, align 8
  %and38 = and i64 %29, 7
  %conv39 = trunc i64 %and38 to i32
  %cmp40 = icmp eq i32 %conv39, 3
  br i1 %cmp40, label %if.then.42, label %if.else.43

if.then.42:                                       ; preds = %if.end.36
  %30 = load i64, i64* %syntax_table.addr, align 8
  %31 = load i64, i64* %c.addr, align 8
  %32 = load i64, i64* %newentry.addr, align 8
  call void @SET_RAW_SYNTAX_ENTRY_RANGE(i64 %30, i64 %31, i64 %32)
  br label %if.end.46

if.else.43:                                       ; preds = %if.end.36
  %33 = load i64, i64* %syntax_table.addr, align 8
  %34 = load i64, i64* %c.addr, align 8
  %shr44 = ashr i64 %34, 2
  %conv45 = trunc i64 %shr44 to i32
  %35 = load i64, i64* %newentry.addr, align 8
  call void @SET_RAW_SYNTAX_ENTRY(i64 %33, i32 %conv45, i64 %35)
  br label %if.end.46

if.end.46:                                        ; preds = %if.else.43, %if.then.42
  call void @clear_regexp_cache()
  %call47 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call47
}

; Function Attrs: nounwind uwtable
define internal void @SET_RAW_SYNTAX_ENTRY_RANGE(i64 %table, i64 %range, i64 %val) #0 {
entry:
  %table.addr = alloca i64, align 8
  %range.addr = alloca i64, align 8
  %val.addr = alloca i64, align 8
  store i64 %table, i64* %table.addr, align 8
  store i64 %range, i64* %range.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %table.addr, align 8
  %1 = load i64, i64* %range.addr, align 8
  %2 = load i64, i64* %val.addr, align 8
  %call = call i64 @Fset_char_table_range(i64 %0, i64 %1, i64 %2)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @SET_RAW_SYNTAX_ENTRY(i64 %table, i32 %c, i64 %val) #0 {
entry:
  %table.addr = alloca i64, align 8
  %c.addr = alloca i32, align 4
  %val.addr = alloca i64, align 8
  store i64 %table, i64* %table.addr, align 8
  store i32 %c, i32* %c.addr, align 4
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %table.addr, align 8
  %1 = load i32, i32* %c.addr, align 4
  %2 = load i64, i64* %val.addr, align 8
  call void @CHAR_TABLE_SET(i64 %0, i32 %1, i64 %2)
  ret void
}

declare void @clear_regexp_cache() #1

; Function Attrs: nounwind uwtable
define i64 @Finternal_describe_syntax_value(i64 %syntax) #0 {
entry:
  %retval = alloca i64, align 8
  %syntax.addr = alloca i64, align 8
  %code = alloca i32, align 4
  %syntax_code = alloca i32, align 4
  %start1 = alloca i8, align 1
  %start2 = alloca i8, align 1
  %end1 = alloca i8, align 1
  %end2 = alloca i8, align 1
  %prefix = alloca i8, align 1
  %comstyleb = alloca i8, align 1
  %comstylec = alloca i8, align 1
  %comnested = alloca i8, align 1
  %str = alloca [2 x i8], align 1
  %first = alloca i64, align 8
  %match_lisp = alloca i64, align 8
  %value = alloca i64, align 8
  %prefixdoc = alloca i64, align 8
  %.compoundliteral = alloca %union.Aligned_String, align 8
  store i64 %syntax, i64* %syntax.addr, align 8
  %0 = load i64, i64* %syntax.addr, align 8
  store i64 %0, i64* %value, align 8
  %1 = load i64, i64* %value, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @insert_string(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0))
  %2 = load i64, i64* %syntax.addr, align 8
  store i64 %2, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i64, i64* %value, align 8
  %call1 = call zeroext i1 @CHAR_TABLE_P(i64 %3)
  br i1 %call1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  call void @insert_string(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5, i32 0, i32 0))
  %4 = load i64, i64* %syntax.addr, align 8
  store i64 %4, i64* %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %5 = load i64, i64* %value, align 8
  %and = and i64 %5, 7
  %conv = trunc i64 %and to i32
  %cmp4 = icmp eq i32 %conv, 3
  br i1 %cmp4, label %if.end.7, label %if.then.6

if.then.6:                                        ; preds = %if.end.3
  call void @insert_string(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0))
  %6 = load i64, i64* %syntax.addr, align 8
  store i64 %6, i64* %retval
  br label %return

if.end.7:                                         ; preds = %if.end.3
  %7 = load i64, i64* %value, align 8
  %sub = sub nsw i64 %7, 3
  %8 = inttoptr i64 %sub to i8*
  %9 = bitcast i8* %8 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %9, i32 0, i32 0
  %10 = load i64, i64* %car, align 8
  store i64 %10, i64* %first, align 8
  %11 = load i64, i64* %value, align 8
  %sub8 = sub nsw i64 %11, 3
  %12 = inttoptr i64 %sub8 to i8*
  %13 = bitcast i8* %12 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %13, i32 0, i32 1
  %cdr = bitcast %union.anon.0* %u to i64*
  %14 = load i64, i64* %cdr, align 8
  store i64 %14, i64* %match_lisp, align 8
  %15 = load i64, i64* %first, align 8
  %and9 = and i64 %15, 7
  %conv10 = trunc i64 %and9 to i32
  %and11 = and i32 %conv10, -5
  %cmp12 = icmp eq i32 %and11, 2
  br i1 %cmp12, label %lor.lhs.false, label %if.then.22

lor.lhs.false:                                    ; preds = %if.end.7
  %16 = load i64, i64* %match_lisp, align 8
  %call14 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp15 = icmp eq i64 %16, %call14
  br i1 %cmp15, label %if.end.23, label %lor.lhs.false.17

lor.lhs.false.17:                                 ; preds = %lor.lhs.false
  %17 = load i64, i64* %match_lisp, align 8
  %call18 = call zeroext i1 @NATNUMP(i64 %17)
  br i1 %call18, label %land.lhs.true, label %if.then.22

land.lhs.true:                                    ; preds = %lor.lhs.false.17
  %18 = load i64, i64* %match_lisp, align 8
  %shr = ashr i64 %18, 2
  %cmp20 = icmp sle i64 %shr, 4194303
  br i1 %cmp20, label %if.end.23, label %if.then.22

if.then.22:                                       ; preds = %land.lhs.true, %lor.lhs.false.17, %if.end.7
  call void @insert_string(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0))
  %19 = load i64, i64* %syntax.addr, align 8
  store i64 %19, i64* %retval
  br label %return

if.end.23:                                        ; preds = %land.lhs.true, %lor.lhs.false
  %20 = load i64, i64* %first, align 8
  %shr24 = ashr i64 %20, 2
  %and25 = and i64 %shr24, 2147483647
  %conv26 = trunc i64 %and25 to i32
  store i32 %conv26, i32* %syntax_code, align 4
  %21 = load i32, i32* %syntax_code, align 4
  %and27 = and i32 %21, 255
  store i32 %and27, i32* %code, align 4
  %22 = load i32, i32* %syntax_code, align 4
  %call28 = call zeroext i1 @SYNTAX_FLAGS_COMSTART_FIRST(i32 %22)
  %frombool = zext i1 %call28 to i8
  store i8 %frombool, i8* %start1, align 1
  %23 = load i32, i32* %syntax_code, align 4
  %call29 = call zeroext i1 @SYNTAX_FLAGS_COMSTART_SECOND(i32 %23)
  %frombool30 = zext i1 %call29 to i8
  store i8 %frombool30, i8* %start2, align 1
  %24 = load i32, i32* %syntax_code, align 4
  %call31 = call zeroext i1 @SYNTAX_FLAGS_COMEND_FIRST(i32 %24)
  %frombool32 = zext i1 %call31 to i8
  store i8 %frombool32, i8* %end1, align 1
  %25 = load i32, i32* %syntax_code, align 4
  %call33 = call zeroext i1 @SYNTAX_FLAGS_COMEND_SECOND(i32 %25)
  %frombool34 = zext i1 %call33 to i8
  store i8 %frombool34, i8* %end2, align 1
  %26 = load i32, i32* %syntax_code, align 4
  %call35 = call zeroext i1 @SYNTAX_FLAGS_PREFIX(i32 %26)
  %frombool36 = zext i1 %call35 to i8
  store i8 %frombool36, i8* %prefix, align 1
  %27 = load i32, i32* %syntax_code, align 4
  %call37 = call zeroext i1 @SYNTAX_FLAGS_COMMENT_STYLEB(i32 %27)
  %frombool38 = zext i1 %call37 to i8
  store i8 %frombool38, i8* %comstyleb, align 1
  %28 = load i32, i32* %syntax_code, align 4
  %call39 = call zeroext i1 @SYNTAX_FLAGS_COMMENT_STYLEC(i32 %28)
  %frombool40 = zext i1 %call39 to i8
  store i8 %frombool40, i8* %comstylec, align 1
  %29 = load i32, i32* %syntax_code, align 4
  %call41 = call zeroext i1 @SYNTAX_FLAGS_COMMENT_NESTED(i32 %29)
  %frombool42 = zext i1 %call41 to i8
  store i8 %frombool42, i8* %comnested, align 1
  %30 = load i32, i32* %code, align 4
  %cmp43 = icmp sle i32 16, %30
  br i1 %cmp43, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %if.end.23
  call void @insert_string(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0))
  %31 = load i64, i64* %syntax.addr, align 8
  store i64 %31, i64* %retval
  br label %return

if.end.46:                                        ; preds = %if.end.23
  %32 = load i32, i32* %code, align 4
  %idxprom = sext i32 %32 to i64
  %arrayidx = getelementptr inbounds [16 x i8], [16 x i8]* @syntax_code_spec, i32 0, i64 %idxprom
  %33 = load i8, i8* %arrayidx, align 1
  %arrayidx47 = getelementptr inbounds [2 x i8], [2 x i8]* %str, i32 0, i64 0
  store i8 %33, i8* %arrayidx47, align 1
  %arrayidx48 = getelementptr inbounds [2 x i8], [2 x i8]* %str, i32 0, i64 1
  store i8 0, i8* %arrayidx48, align 1
  %arraydecay = getelementptr inbounds [2 x i8], [2 x i8]* %str, i32 0, i32 0
  call void @insert(i8* %arraydecay, i64 1)
  %34 = load i64, i64* %match_lisp, align 8
  %call49 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp50 = icmp eq i64 %34, %call49
  br i1 %cmp50, label %if.then.52, label %if.else

if.then.52:                                       ; preds = %if.end.46
  call void @insert(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0), i64 1)
  br label %if.end.55

if.else:                                          ; preds = %if.end.46
  %35 = load i64, i64* %match_lisp, align 8
  %shr53 = ashr i64 %35, 2
  %conv54 = trunc i64 %shr53 to i32
  call void @insert_char(i32 %conv54)
  br label %if.end.55

if.end.55:                                        ; preds = %if.else, %if.then.52
  %36 = load i8, i8* %start1, align 1
  %tobool = trunc i8 %36 to i1
  br i1 %tobool, label %if.then.56, label %if.end.57

if.then.56:                                       ; preds = %if.end.55
  call void @insert(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i32 0, i32 0), i64 1)
  br label %if.end.57

if.end.57:                                        ; preds = %if.then.56, %if.end.55
  %37 = load i8, i8* %start2, align 1
  %tobool58 = trunc i8 %37 to i1
  br i1 %tobool58, label %if.then.59, label %if.end.60

if.then.59:                                       ; preds = %if.end.57
  call void @insert(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0), i64 1)
  br label %if.end.60

if.end.60:                                        ; preds = %if.then.59, %if.end.57
  %38 = load i8, i8* %end1, align 1
  %tobool61 = trunc i8 %38 to i1
  br i1 %tobool61, label %if.then.62, label %if.end.63

if.then.62:                                       ; preds = %if.end.60
  call void @insert(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i32 0, i32 0), i64 1)
  br label %if.end.63

if.end.63:                                        ; preds = %if.then.62, %if.end.60
  %39 = load i8, i8* %end2, align 1
  %tobool64 = trunc i8 %39 to i1
  br i1 %tobool64, label %if.then.65, label %if.end.66

if.then.65:                                       ; preds = %if.end.63
  call void @insert(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i32 0, i32 0), i64 1)
  br label %if.end.66

if.end.66:                                        ; preds = %if.then.65, %if.end.63
  %40 = load i8, i8* %prefix, align 1
  %tobool67 = trunc i8 %40 to i1
  br i1 %tobool67, label %if.then.68, label %if.end.69

if.then.68:                                       ; preds = %if.end.66
  call void @insert(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0), i64 1)
  br label %if.end.69

if.end.69:                                        ; preds = %if.then.68, %if.end.66
  %41 = load i8, i8* %comstyleb, align 1
  %tobool70 = trunc i8 %41 to i1
  br i1 %tobool70, label %if.then.71, label %if.end.72

if.then.71:                                       ; preds = %if.end.69
  call void @insert(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i32 0, i32 0), i64 1)
  br label %if.end.72

if.end.72:                                        ; preds = %if.then.71, %if.end.69
  %42 = load i8, i8* %comstylec, align 1
  %tobool73 = trunc i8 %42 to i1
  br i1 %tobool73, label %if.then.74, label %if.end.75

if.then.74:                                       ; preds = %if.end.72
  call void @insert(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i32 0, i32 0), i64 1)
  br label %if.end.75

if.end.75:                                        ; preds = %if.then.74, %if.end.72
  %43 = load i8, i8* %comnested, align 1
  %tobool76 = trunc i8 %43 to i1
  br i1 %tobool76, label %if.then.77, label %if.end.78

if.then.77:                                       ; preds = %if.end.75
  call void @insert(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i32 0, i32 0), i64 1)
  br label %if.end.78

if.end.78:                                        ; preds = %if.then.77, %if.end.75
  call void @insert_string(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.16, i32 0, i32 0))
  %44 = load i32, i32* %code, align 4
  switch i32 %44, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.79
    i32 2, label %sw.bb.80
    i32 3, label %sw.bb.81
    i32 4, label %sw.bb.82
    i32 5, label %sw.bb.83
    i32 6, label %sw.bb.84
    i32 7, label %sw.bb.85
    i32 8, label %sw.bb.86
    i32 9, label %sw.bb.87
    i32 10, label %sw.bb.88
    i32 11, label %sw.bb.89
    i32 12, label %sw.bb.90
    i32 13, label %sw.bb.91
    i32 14, label %sw.bb.92
    i32 15, label %sw.bb.93
  ]

sw.bb:                                            ; preds = %if.end.78
  call void @insert_string(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.17, i32 0, i32 0))
  br label %sw.epilog

sw.bb.79:                                         ; preds = %if.end.78
  call void @insert_string(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.18, i32 0, i32 0))
  br label %sw.epilog

sw.bb.80:                                         ; preds = %if.end.78
  call void @insert_string(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0))
  br label %sw.epilog

sw.bb.81:                                         ; preds = %if.end.78
  call void @insert_string(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.20, i32 0, i32 0))
  br label %sw.epilog

sw.bb.82:                                         ; preds = %if.end.78
  call void @insert_string(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i32 0, i32 0))
  br label %sw.epilog

sw.bb.83:                                         ; preds = %if.end.78
  call void @insert_string(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0))
  br label %sw.epilog

sw.bb.84:                                         ; preds = %if.end.78
  call void @insert_string(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.23, i32 0, i32 0))
  br label %sw.epilog

sw.bb.85:                                         ; preds = %if.end.78
  call void @insert_string(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i32 0, i32 0))
  br label %sw.epilog

sw.bb.86:                                         ; preds = %if.end.78
  call void @insert_string(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0))
  br label %sw.epilog

sw.bb.87:                                         ; preds = %if.end.78
  call void @insert_string(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26, i32 0, i32 0))
  br label %sw.epilog

sw.bb.88:                                         ; preds = %if.end.78
  call void @insert_string(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.27, i32 0, i32 0))
  br label %sw.epilog

sw.bb.89:                                         ; preds = %if.end.78
  call void @insert_string(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.28, i32 0, i32 0))
  br label %sw.epilog

sw.bb.90:                                         ; preds = %if.end.78
  call void @insert_string(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.29, i32 0, i32 0))
  br label %sw.epilog

sw.bb.91:                                         ; preds = %if.end.78
  call void @insert_string(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.30, i32 0, i32 0))
  br label %sw.epilog

sw.bb.92:                                         ; preds = %if.end.78
  call void @insert_string(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.31, i32 0, i32 0))
  br label %sw.epilog

sw.bb.93:                                         ; preds = %if.end.78
  call void @insert_string(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.32, i32 0, i32 0))
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.78
  call void @insert_string(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0))
  %45 = load i64, i64* %syntax.addr, align 8
  store i64 %45, i64* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb.93, %sw.bb.92, %sw.bb.91, %sw.bb.90, %sw.bb.89, %sw.bb.88, %sw.bb.87, %sw.bb.86, %sw.bb.85, %sw.bb.84, %sw.bb.83, %sw.bb.82, %sw.bb.81, %sw.bb.80, %sw.bb.79, %sw.bb
  %46 = load i64, i64* %match_lisp, align 8
  %call94 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp95 = icmp eq i64 %46, %call94
  br i1 %cmp95, label %if.end.100, label %if.then.97

if.then.97:                                       ; preds = %sw.epilog
  call void @insert_string(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.33, i32 0, i32 0))
  %47 = load i64, i64* %match_lisp, align 8
  %shr98 = ashr i64 %47, 2
  %conv99 = trunc i64 %shr98 to i32
  call void @insert_char(i32 %conv99)
  br label %if.end.100

if.end.100:                                       ; preds = %if.then.97, %sw.epilog
  %48 = load i8, i8* %start1, align 1
  %tobool101 = trunc i8 %48 to i1
  br i1 %tobool101, label %if.then.102, label %if.end.103

if.then.102:                                      ; preds = %if.end.100
  call void @insert_string(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.34, i32 0, i32 0))
  br label %if.end.103

if.end.103:                                       ; preds = %if.then.102, %if.end.100
  %49 = load i8, i8* %start2, align 1
  %tobool104 = trunc i8 %49 to i1
  br i1 %tobool104, label %if.then.105, label %if.end.106

if.then.105:                                      ; preds = %if.end.103
  call void @insert_string(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.35, i32 0, i32 0))
  br label %if.end.106

if.end.106:                                       ; preds = %if.then.105, %if.end.103
  %50 = load i8, i8* %end1, align 1
  %tobool107 = trunc i8 %50 to i1
  br i1 %tobool107, label %if.then.108, label %if.end.109

if.then.108:                                      ; preds = %if.end.106
  call void @insert_string(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.36, i32 0, i32 0))
  br label %if.end.109

if.end.109:                                       ; preds = %if.then.108, %if.end.106
  %51 = load i8, i8* %end2, align 1
  %tobool110 = trunc i8 %51 to i1
  br i1 %tobool110, label %if.then.111, label %if.end.112

if.then.111:                                      ; preds = %if.end.109
  call void @insert_string(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.37, i32 0, i32 0))
  br label %if.end.112

if.end.112:                                       ; preds = %if.then.111, %if.end.109
  %52 = load i8, i8* %comstyleb, align 1
  %tobool113 = trunc i8 %52 to i1
  br i1 %tobool113, label %if.then.114, label %if.end.115

if.then.114:                                      ; preds = %if.end.112
  call void @insert_string(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.38, i32 0, i32 0))
  br label %if.end.115

if.end.115:                                       ; preds = %if.then.114, %if.end.112
  %53 = load i8, i8* %comstylec, align 1
  %tobool116 = trunc i8 %53 to i1
  br i1 %tobool116, label %if.then.117, label %if.end.118

if.then.117:                                      ; preds = %if.end.115
  call void @insert_string(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.39, i32 0, i32 0))
  br label %if.end.118

if.end.118:                                       ; preds = %if.then.117, %if.end.115
  %54 = load i8, i8* %comnested, align 1
  %tobool119 = trunc i8 %54 to i1
  br i1 %tobool119, label %if.then.120, label %if.end.121

if.then.120:                                      ; preds = %if.end.118
  call void @insert_string(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.40, i32 0, i32 0))
  br label %if.end.121

if.end.121:                                       ; preds = %if.then.120, %if.end.118
  %55 = load i8, i8* %prefix, align 1
  %tobool122 = trunc i8 %55 to i1
  br i1 %tobool122, label %if.then.123, label %if.end.127

if.then.123:                                      ; preds = %if.end.121
  %s = bitcast %union.Aligned_String* %.compoundliteral to %struct.Lisp_String*
  %size = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 0
  store i64 54, i64* %size, align 8
  %size_byte = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 1
  store i64 -1, i64* %size_byte, align 8
  %intervals = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 2
  store %struct.interval* null, %struct.interval** %intervals, align 8
  %data = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 3
  store i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.41, i32 0, i32 0), i8** %data, align 8
  %s124 = bitcast %union.Aligned_String* %.compoundliteral to %struct.Lisp_String*
  %56 = bitcast %struct.Lisp_String* %s124 to i8*
  %call125 = call i64 @make_lisp_ptr(i8* %56, i32 4)
  store i64 %call125, i64* %prefixdoc, align 8
  %57 = load i64, i64* %prefixdoc, align 8
  %call126 = call i64 @Fsubstitute_command_keys(i64 %57)
  call void @insert1(i64 %call126)
  br label %if.end.127

if.end.127:                                       ; preds = %if.then.123, %if.end.121
  %58 = load i64, i64* %syntax.addr, align 8
  store i64 %58, i64* %retval
  br label %return

return:                                           ; preds = %if.end.127, %sw.default, %if.then.45, %if.then.22, %if.then.6, %if.then.2, %if.then
  %59 = load i64, i64* %retval
  ret i64 %59
}

declare void @insert_string(i8*) #1

; Function Attrs: nounwind uwtable
define internal zeroext i1 @SYNTAX_FLAGS_COMSTART_FIRST(i32 %flags) #0 {
entry:
  %flags.addr = alloca i32, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %flags.addr, align 4
  %shr = ashr i32 %0, 16
  %and = and i32 %shr, 1
  %tobool = icmp ne i32 %and, 0
  ret i1 %tobool
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @SYNTAX_FLAGS_COMSTART_SECOND(i32 %flags) #0 {
entry:
  %flags.addr = alloca i32, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %flags.addr, align 4
  %shr = ashr i32 %0, 17
  %and = and i32 %shr, 1
  %tobool = icmp ne i32 %and, 0
  ret i1 %tobool
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @SYNTAX_FLAGS_COMEND_FIRST(i32 %flags) #0 {
entry:
  %flags.addr = alloca i32, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %flags.addr, align 4
  %shr = ashr i32 %0, 18
  %and = and i32 %shr, 1
  %tobool = icmp ne i32 %and, 0
  ret i1 %tobool
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @SYNTAX_FLAGS_COMEND_SECOND(i32 %flags) #0 {
entry:
  %flags.addr = alloca i32, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %flags.addr, align 4
  %shr = ashr i32 %0, 19
  %and = and i32 %shr, 1
  %tobool = icmp ne i32 %and, 0
  ret i1 %tobool
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @SYNTAX_FLAGS_COMMENT_STYLEB(i32 %flags) #0 {
entry:
  %flags.addr = alloca i32, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %flags.addr, align 4
  %shr = ashr i32 %0, 21
  %and = and i32 %shr, 1
  %tobool = icmp ne i32 %and, 0
  ret i1 %tobool
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @SYNTAX_FLAGS_COMMENT_STYLEC(i32 %flags) #0 {
entry:
  %flags.addr = alloca i32, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %flags.addr, align 4
  %shr = ashr i32 %0, 23
  %and = and i32 %shr, 1
  %tobool = icmp ne i32 %and, 0
  ret i1 %tobool
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @SYNTAX_FLAGS_COMMENT_NESTED(i32 %flags) #0 {
entry:
  %flags.addr = alloca i32, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %flags.addr, align 4
  %shr = ashr i32 %0, 22
  %and = and i32 %shr, 1
  %tobool = icmp ne i32 %and, 0
  ret i1 %tobool
}

declare void @insert(i8*, i64) #1

declare void @insert_char(i32) #1

declare i64 @make_lisp_ptr(i8*, i32) #1

declare void @insert1(i64) #1

declare i64 @Fsubstitute_command_keys(i64) #1

; Function Attrs: nounwind uwtable
define i64 @scan_words(i64 %from, i64 %count) #0 {
entry:
  %retval = alloca i64, align 8
  %from.addr = alloca i64, align 8
  %count.addr = alloca i64, align 8
  %beg = alloca i64, align 8
  %end = alloca i64, align 8
  %from_byte = alloca i64, align 8
  %code = alloca i32, align 4
  %ch0 = alloca i32, align 4
  %ch1 = alloca i32, align 4
  %func = alloca i64, align 8
  %pos = alloca i64, align 8
  %chp = alloca i8*, align 8
  %chp298 = alloca i8*, align 8
  %chp368 = alloca i8*, align 8
  %chp548 = alloca i8*, align 8
  %chp692 = alloca i8*, align 8
  store i64 %from, i64* %from.addr, align 8
  store i64 %count, i64* %count.addr, align 8
  %0 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i32 0, i32 77
  %1 = load i64, i64* %begv, align 8
  store i64 %1, i64* %beg, align 8
  %2 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %2, i32 0, i32 79
  %3 = load i64, i64* %zv, align 8
  store i64 %3, i64* %end, align 8
  %4 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %5 = load i64, i64* %from.addr, align 8
  %call = call i64 @buf_charpos_to_bytepos(%struct.buffer* %4, i64 %5)
  store i64 %call, i64* %from_byte, align 8
  store i8 1, i8* @immediate_quit, align 1
  br label %do.body

do.body:                                          ; preds = %entry
  %6 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 241), align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %6, %call1
  br i1 %cmp, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %do.body
  %7 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 138), align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp3 = icmp eq i64 %7, %call2
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  call void @process_quit_flag()
  br label %if.end.5

if.else:                                          ; preds = %land.lhs.true, %do.body
  %8 = load volatile i8, i8* @pending_signals, align 1
  %tobool = trunc i8 %8 to i1
  br i1 %tobool, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.else
  call void @process_pending_signals()
  br label %if.end

if.end:                                           ; preds = %if.then.4, %if.else
  br label %if.end.5

if.end.5:                                         ; preds = %if.end, %if.then
  br label %do.end

do.end:                                           ; preds = %if.end.5
  %9 = load i64, i64* %from.addr, align 8
  %10 = load i64, i64* %count.addr, align 8
  call void @SETUP_SYNTAX_TABLE(i64 %9, i64 %10)
  br label %while.cond

while.cond:                                       ; preds = %if.end.346, %do.end
  %11 = load i64, i64* %count.addr, align 8
  %cmp6 = icmp sgt i64 %11, 0
  br i1 %cmp6, label %while.body, label %while.end.347

while.body:                                       ; preds = %while.cond
  br label %while.body.8

while.body.8:                                     ; preds = %while.body, %if.end.151
  %12 = load i64, i64* %from.addr, align 8
  %13 = load i64, i64* %end, align 8
  %cmp9 = icmp eq i64 %12, %13
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %while.body.8
  store i8 0, i8* @immediate_quit, align 1
  store i64 0, i64* %retval
  br label %return

if.end.11:                                        ; preds = %while.body.8
  %14 = load i64, i64* %from.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_FORWARD(i64 %14)
  %15 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %15, i32 0, i32 39
  %16 = load i64, i64* %enable_multibyte_characters_, align 8
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp13 = icmp eq i64 %16, %call12
  br i1 %cmp13, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end.11
  %17 = load i64, i64* %from_byte, align 8
  %call14 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %17)
  br label %cond.end.83

cond.false:                                       ; preds = %if.end.11
  br i1 true, label %cond.true.15, label %cond.false.26

cond.true.15:                                     ; preds = %cond.false
  %18 = load i64, i64* %from_byte, align 8
  %19 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %19, i32 0, i32 73
  %20 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %20, i32 0, i32 3
  %21 = load i64, i64* %gpt_byte, align 8
  %cmp16 = icmp sge i64 %18, %21
  br i1 %cmp16, label %cond.true.17, label %cond.false.19

cond.true.17:                                     ; preds = %cond.true.15
  %22 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text18 = getelementptr inbounds %struct.buffer, %struct.buffer* %22, i32 0, i32 73
  %23 = load %struct.buffer_text*, %struct.buffer_text** %text18, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %23, i32 0, i32 5
  %24 = load i64, i64* %gap_size, align 8
  br label %cond.end

cond.false.19:                                    ; preds = %cond.true.15
  br label %cond.end

cond.end:                                         ; preds = %cond.false.19, %cond.true.17
  %cond = phi i64 [ %24, %cond.true.17 ], [ 0, %cond.false.19 ]
  %25 = load i64, i64* %from_byte, align 8
  %add = add nsw i64 %cond, %25
  %26 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text20 = getelementptr inbounds %struct.buffer, %struct.buffer* %26, i32 0, i32 73
  %27 = load %struct.buffer_text*, %struct.buffer_text** %text20, align 8
  %beg21 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %27, i32 0, i32 0
  %28 = load i8*, i8** %beg21, align 8
  %add.ptr = getelementptr inbounds i8, i8* %28, i64 %add
  %add.ptr22 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  %29 = load i8, i8* %add.ptr22, align 1
  %conv = zext i8 %29 to i32
  %add23 = add i32 %conv, 0
  %cmp24 = icmp ult i32 %add23, 128
  br i1 %cmp24, label %cond.true.46, label %cond.false.63

cond.false.26:                                    ; preds = %cond.false
  %30 = load i64, i64* %from_byte, align 8
  %31 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text27 = getelementptr inbounds %struct.buffer, %struct.buffer* %31, i32 0, i32 73
  %32 = load %struct.buffer_text*, %struct.buffer_text** %text27, align 8
  %gpt_byte28 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %32, i32 0, i32 3
  %33 = load i64, i64* %gpt_byte28, align 8
  %cmp29 = icmp sge i64 %30, %33
  br i1 %cmp29, label %cond.true.31, label %cond.false.34

cond.true.31:                                     ; preds = %cond.false.26
  %34 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text32 = getelementptr inbounds %struct.buffer, %struct.buffer* %34, i32 0, i32 73
  %35 = load %struct.buffer_text*, %struct.buffer_text** %text32, align 8
  %gap_size33 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %35, i32 0, i32 5
  %36 = load i64, i64* %gap_size33, align 8
  br label %cond.end.35

cond.false.34:                                    ; preds = %cond.false.26
  br label %cond.end.35

cond.end.35:                                      ; preds = %cond.false.34, %cond.true.31
  %cond36 = phi i64 [ %36, %cond.true.31 ], [ 0, %cond.false.34 ]
  %37 = load i64, i64* %from_byte, align 8
  %add37 = add nsw i64 %cond36, %37
  %38 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text38 = getelementptr inbounds %struct.buffer, %struct.buffer* %38, i32 0, i32 73
  %39 = load %struct.buffer_text*, %struct.buffer_text** %text38, align 8
  %beg39 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %39, i32 0, i32 0
  %40 = load i8*, i8** %beg39, align 8
  %add.ptr40 = getelementptr inbounds i8, i8* %40, i64 %add37
  %add.ptr41 = getelementptr inbounds i8, i8* %add.ptr40, i64 -1
  %41 = load i8, i8* %add.ptr41, align 1
  %conv42 = zext i8 %41 to i64
  %add43 = add i64 %conv42, 0
  %cmp44 = icmp ult i64 %add43, 128
  br i1 %cmp44, label %cond.true.46, label %cond.false.63

cond.true.46:                                     ; preds = %cond.end.35, %cond.end
  %42 = load i64, i64* %from_byte, align 8
  %43 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text47 = getelementptr inbounds %struct.buffer, %struct.buffer* %43, i32 0, i32 73
  %44 = load %struct.buffer_text*, %struct.buffer_text** %text47, align 8
  %gpt_byte48 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %44, i32 0, i32 3
  %45 = load i64, i64* %gpt_byte48, align 8
  %cmp49 = icmp sge i64 %42, %45
  br i1 %cmp49, label %cond.true.51, label %cond.false.54

cond.true.51:                                     ; preds = %cond.true.46
  %46 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text52 = getelementptr inbounds %struct.buffer, %struct.buffer* %46, i32 0, i32 73
  %47 = load %struct.buffer_text*, %struct.buffer_text** %text52, align 8
  %gap_size53 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %47, i32 0, i32 5
  %48 = load i64, i64* %gap_size53, align 8
  br label %cond.end.55

cond.false.54:                                    ; preds = %cond.true.46
  br label %cond.end.55

cond.end.55:                                      ; preds = %cond.false.54, %cond.true.51
  %cond56 = phi i64 [ %48, %cond.true.51 ], [ 0, %cond.false.54 ]
  %49 = load i64, i64* %from_byte, align 8
  %add57 = add nsw i64 %cond56, %49
  %50 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text58 = getelementptr inbounds %struct.buffer, %struct.buffer* %50, i32 0, i32 73
  %51 = load %struct.buffer_text*, %struct.buffer_text** %text58, align 8
  %beg59 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %51, i32 0, i32 0
  %52 = load i8*, i8** %beg59, align 8
  %add.ptr60 = getelementptr inbounds i8, i8* %52, i64 %add57
  %add.ptr61 = getelementptr inbounds i8, i8* %add.ptr60, i64 -1
  %53 = load i8, i8* %add.ptr61, align 1
  %conv62 = zext i8 %53 to i32
  br label %cond.end.81

cond.false.63:                                    ; preds = %cond.end.35, %cond.end
  %54 = load i64, i64* %from_byte, align 8
  %55 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text64 = getelementptr inbounds %struct.buffer, %struct.buffer* %55, i32 0, i32 73
  %56 = load %struct.buffer_text*, %struct.buffer_text** %text64, align 8
  %gpt_byte65 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %56, i32 0, i32 3
  %57 = load i64, i64* %gpt_byte65, align 8
  %cmp66 = icmp sge i64 %54, %57
  br i1 %cmp66, label %cond.true.68, label %cond.false.71

cond.true.68:                                     ; preds = %cond.false.63
  %58 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text69 = getelementptr inbounds %struct.buffer, %struct.buffer* %58, i32 0, i32 73
  %59 = load %struct.buffer_text*, %struct.buffer_text** %text69, align 8
  %gap_size70 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %59, i32 0, i32 5
  %60 = load i64, i64* %gap_size70, align 8
  br label %cond.end.72

cond.false.71:                                    ; preds = %cond.false.63
  br label %cond.end.72

cond.end.72:                                      ; preds = %cond.false.71, %cond.true.68
  %cond73 = phi i64 [ %60, %cond.true.68 ], [ 0, %cond.false.71 ]
  %61 = load i64, i64* %from_byte, align 8
  %add74 = add nsw i64 %cond73, %61
  %62 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text75 = getelementptr inbounds %struct.buffer, %struct.buffer* %62, i32 0, i32 73
  %63 = load %struct.buffer_text*, %struct.buffer_text** %text75, align 8
  %beg76 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %63, i32 0, i32 0
  %64 = load i8*, i8** %beg76, align 8
  %add.ptr77 = getelementptr inbounds i8, i8* %64, i64 %add74
  %add.ptr78 = getelementptr inbounds i8, i8* %add.ptr77, i64 -1
  %65 = load i8, i8* %add.ptr78, align 1
  %conv79 = zext i8 %65 to i32
  %add80 = add nsw i32 %conv79, 4194048
  br label %cond.end.81

cond.end.81:                                      ; preds = %cond.end.72, %cond.end.55
  %cond82 = phi i32 [ %conv62, %cond.end.55 ], [ %add80, %cond.end.72 ]
  br label %cond.end.83

cond.end.83:                                      ; preds = %cond.end.81, %cond.true
  %cond84 = phi i32 [ %call14, %cond.true ], [ %cond82, %cond.end.81 ]
  store i32 %cond84, i32* %ch0, align 4
  %66 = load i32, i32* %ch0, align 4
  %call85 = call i32 @syntax_property(i32 %66, i1 zeroext true)
  store i32 %call85, i32* %code, align 4
  br label %do.body.86

do.body.86:                                       ; preds = %cond.end.83
  %67 = load i64, i64* %from.addr, align 8
  %inc = add nsw i64 %67, 1
  store i64 %inc, i64* %from.addr, align 8
  %68 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_87 = getelementptr inbounds %struct.buffer, %struct.buffer* %68, i32 0, i32 39
  %69 = load i64, i64* %enable_multibyte_characters_87, align 8
  %call88 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp89 = icmp eq i64 %69, %call88
  br i1 %cmp89, label %if.then.91, label %if.else.93

if.then.91:                                       ; preds = %do.body.86
  %70 = load i64, i64* %from_byte, align 8
  %inc92 = add nsw i64 %70, 1
  store i64 %inc92, i64* %from_byte, align 8
  br label %if.end.137

if.else.93:                                       ; preds = %do.body.86
  br label %do.body.94

do.body.94:                                       ; preds = %if.else.93
  %71 = load i64, i64* %from_byte, align 8
  %72 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text95 = getelementptr inbounds %struct.buffer, %struct.buffer* %72, i32 0, i32 73
  %73 = load %struct.buffer_text*, %struct.buffer_text** %text95, align 8
  %gpt_byte96 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %73, i32 0, i32 3
  %74 = load i64, i64* %gpt_byte96, align 8
  %cmp97 = icmp sge i64 %71, %74
  br i1 %cmp97, label %cond.true.99, label %cond.false.102

cond.true.99:                                     ; preds = %do.body.94
  %75 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text100 = getelementptr inbounds %struct.buffer, %struct.buffer* %75, i32 0, i32 73
  %76 = load %struct.buffer_text*, %struct.buffer_text** %text100, align 8
  %gap_size101 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %76, i32 0, i32 5
  %77 = load i64, i64* %gap_size101, align 8
  br label %cond.end.103

cond.false.102:                                   ; preds = %do.body.94
  br label %cond.end.103

cond.end.103:                                     ; preds = %cond.false.102, %cond.true.99
  %cond104 = phi i64 [ %77, %cond.true.99 ], [ 0, %cond.false.102 ]
  %78 = load i64, i64* %from_byte, align 8
  %add105 = add nsw i64 %cond104, %78
  %79 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text106 = getelementptr inbounds %struct.buffer, %struct.buffer* %79, i32 0, i32 73
  %80 = load %struct.buffer_text*, %struct.buffer_text** %text106, align 8
  %beg107 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %80, i32 0, i32 0
  %81 = load i8*, i8** %beg107, align 8
  %add.ptr108 = getelementptr inbounds i8, i8* %81, i64 %add105
  %add.ptr109 = getelementptr inbounds i8, i8* %add.ptr108, i64 -1
  store i8* %add.ptr109, i8** %chp, align 8
  %82 = load i8*, i8** %chp, align 8
  %83 = load i8, i8* %82, align 1
  %conv110 = zext i8 %83 to i32
  %and = and i32 %conv110, 128
  %tobool111 = icmp ne i32 %and, 0
  br i1 %tobool111, label %cond.false.113, label %cond.true.112

cond.true.112:                                    ; preds = %cond.end.103
  br label %cond.end.132

cond.false.113:                                   ; preds = %cond.end.103
  %84 = load i8*, i8** %chp, align 8
  %85 = load i8, i8* %84, align 1
  %conv114 = zext i8 %85 to i32
  %and115 = and i32 %conv114, 32
  %tobool116 = icmp ne i32 %and115, 0
  br i1 %tobool116, label %cond.false.118, label %cond.true.117

cond.true.117:                                    ; preds = %cond.false.113
  br label %cond.end.130

cond.false.118:                                   ; preds = %cond.false.113
  %86 = load i8*, i8** %chp, align 8
  %87 = load i8, i8* %86, align 1
  %conv119 = zext i8 %87 to i32
  %and120 = and i32 %conv119, 16
  %tobool121 = icmp ne i32 %and120, 0
  br i1 %tobool121, label %cond.false.123, label %cond.true.122

cond.true.122:                                    ; preds = %cond.false.118
  br label %cond.end.128

cond.false.123:                                   ; preds = %cond.false.118
  %88 = load i8*, i8** %chp, align 8
  %89 = load i8, i8* %88, align 1
  %conv124 = zext i8 %89 to i32
  %and125 = and i32 %conv124, 8
  %tobool126 = icmp ne i32 %and125, 0
  %lnot = xor i1 %tobool126, true
  %cond127 = select i1 %lnot, i32 4, i32 5
  br label %cond.end.128

cond.end.128:                                     ; preds = %cond.false.123, %cond.true.122
  %cond129 = phi i32 [ 3, %cond.true.122 ], [ %cond127, %cond.false.123 ]
  br label %cond.end.130

cond.end.130:                                     ; preds = %cond.end.128, %cond.true.117
  %cond131 = phi i32 [ 2, %cond.true.117 ], [ %cond129, %cond.end.128 ]
  br label %cond.end.132

cond.end.132:                                     ; preds = %cond.end.130, %cond.true.112
  %cond133 = phi i32 [ 1, %cond.true.112 ], [ %cond131, %cond.end.130 ]
  %conv134 = sext i32 %cond133 to i64
  %90 = load i64, i64* %from_byte, align 8
  %add135 = add nsw i64 %90, %conv134
  store i64 %add135, i64* %from_byte, align 8
  br label %do.end.136

do.end.136:                                       ; preds = %cond.end.132
  br label %if.end.137

if.end.137:                                       ; preds = %do.end.136, %if.then.91
  br label %do.end.138

do.end.138:                                       ; preds = %if.end.137
  %91 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 499), align 1
  %tobool139 = trunc i8 %91 to i1
  br i1 %tobool139, label %land.lhs.true.141, label %if.end.147

land.lhs.true.141:                                ; preds = %do.end.138
  %92 = load i32, i32* %code, align 4
  %cmp142 = icmp eq i32 %92, 9
  br i1 %cmp142, label %if.then.146, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.141
  %93 = load i32, i32* %code, align 4
  %cmp144 = icmp eq i32 %93, 10
  br i1 %cmp144, label %if.then.146, label %if.end.147

if.then.146:                                      ; preds = %lor.lhs.false, %land.lhs.true.141
  br label %while.end

if.end.147:                                       ; preds = %lor.lhs.false, %do.end.138
  %94 = load i32, i32* %code, align 4
  %cmp148 = icmp eq i32 %94, 2
  br i1 %cmp148, label %if.then.150, label %if.end.151

if.then.150:                                      ; preds = %if.end.147
  br label %while.end

if.end.151:                                       ; preds = %if.end.147
  br label %while.body.8

while.end:                                        ; preds = %if.then.150, %if.then.146
  %95 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 96), align 8
  %96 = load i32, i32* %ch0, align 4
  %call152 = call i64 @CHAR_TABLE_REF(i64 %95, i32 %96)
  store i64 %call152, i64* %func, align 8
  %97 = load i64, i64* %func, align 8
  %call153 = call i64 @Ffboundp(i64 %97)
  %call154 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp155 = icmp eq i64 %call153, %call154
  br i1 %cmp155, label %if.else.179, label %if.then.157

if.then.157:                                      ; preds = %while.end
  %98 = load i64, i64* %func, align 8
  %99 = load i64, i64* %from.addr, align 8
  %sub = sub nsw i64 %99, 1
  %shl = shl i64 %sub, 2
  %add158 = add i64 %shl, 2
  %100 = load i64, i64* %end, align 8
  %shl159 = shl i64 %100, 2
  %add160 = add i64 %shl159, 2
  %call161 = call i64 @call2(i64 %98, i64 %add158, i64 %add160)
  store i64 %call161, i64* %pos, align 8
  %101 = load i64, i64* %pos, align 8
  %and162 = and i64 %101, 7
  %conv163 = trunc i64 %and162 to i32
  %and164 = and i32 %conv163, -5
  %cmp165 = icmp eq i32 %and164, 2
  br i1 %cmp165, label %land.lhs.true.167, label %if.end.178

land.lhs.true.167:                                ; preds = %if.then.157
  %102 = load i64, i64* %from.addr, align 8
  %103 = load i64, i64* %pos, align 8
  %shr = ashr i64 %103, 2
  %cmp168 = icmp slt i64 %102, %shr
  br i1 %cmp168, label %land.lhs.true.170, label %if.end.178

land.lhs.true.170:                                ; preds = %land.lhs.true.167
  %104 = load i64, i64* %pos, align 8
  %shr171 = ashr i64 %104, 2
  %105 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv172 = getelementptr inbounds %struct.buffer, %struct.buffer* %105, i32 0, i32 79
  %106 = load i64, i64* %zv172, align 8
  %cmp173 = icmp sle i64 %shr171, %106
  br i1 %cmp173, label %if.then.175, label %if.end.178

if.then.175:                                      ; preds = %land.lhs.true.170
  %107 = load i64, i64* %pos, align 8
  %shr176 = ashr i64 %107, 2
  store i64 %shr176, i64* %from.addr, align 8
  %108 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %109 = load i64, i64* %from.addr, align 8
  %call177 = call i64 @buf_charpos_to_bytepos(%struct.buffer* %108, i64 %109)
  store i64 %call177, i64* %from_byte, align 8
  br label %if.end.178

if.end.178:                                       ; preds = %if.then.175, %land.lhs.true.170, %land.lhs.true.167, %if.then.157
  br label %if.end.346

if.else.179:                                      ; preds = %while.end
  br label %while.body.181

while.body.181:                                   ; preds = %if.else.179, %do.end.344
  %110 = load i64, i64* %from.addr, align 8
  %111 = load i64, i64* %end, align 8
  %cmp182 = icmp eq i64 %110, %111
  br i1 %cmp182, label %if.then.184, label %if.end.185

if.then.184:                                      ; preds = %while.body.181
  br label %while.end.345

if.end.185:                                       ; preds = %while.body.181
  %112 = load i64, i64* %from.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_FORWARD(i64 %112)
  %113 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_186 = getelementptr inbounds %struct.buffer, %struct.buffer* %113, i32 0, i32 39
  %114 = load i64, i64* %enable_multibyte_characters_186, align 8
  %call187 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp188 = icmp eq i64 %114, %call187
  br i1 %cmp188, label %cond.false.192, label %cond.true.190

cond.true.190:                                    ; preds = %if.end.185
  %115 = load i64, i64* %from_byte, align 8
  %call191 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %115)
  br label %cond.end.270

cond.false.192:                                   ; preds = %if.end.185
  br i1 true, label %cond.true.193, label %cond.false.213

cond.true.193:                                    ; preds = %cond.false.192
  %116 = load i64, i64* %from_byte, align 8
  %117 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text194 = getelementptr inbounds %struct.buffer, %struct.buffer* %117, i32 0, i32 73
  %118 = load %struct.buffer_text*, %struct.buffer_text** %text194, align 8
  %gpt_byte195 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %118, i32 0, i32 3
  %119 = load i64, i64* %gpt_byte195, align 8
  %cmp196 = icmp sge i64 %116, %119
  br i1 %cmp196, label %cond.true.198, label %cond.false.201

cond.true.198:                                    ; preds = %cond.true.193
  %120 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text199 = getelementptr inbounds %struct.buffer, %struct.buffer* %120, i32 0, i32 73
  %121 = load %struct.buffer_text*, %struct.buffer_text** %text199, align 8
  %gap_size200 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %121, i32 0, i32 5
  %122 = load i64, i64* %gap_size200, align 8
  br label %cond.end.202

cond.false.201:                                   ; preds = %cond.true.193
  br label %cond.end.202

cond.end.202:                                     ; preds = %cond.false.201, %cond.true.198
  %cond203 = phi i64 [ %122, %cond.true.198 ], [ 0, %cond.false.201 ]
  %123 = load i64, i64* %from_byte, align 8
  %add204 = add nsw i64 %cond203, %123
  %124 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text205 = getelementptr inbounds %struct.buffer, %struct.buffer* %124, i32 0, i32 73
  %125 = load %struct.buffer_text*, %struct.buffer_text** %text205, align 8
  %beg206 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %125, i32 0, i32 0
  %126 = load i8*, i8** %beg206, align 8
  %add.ptr207 = getelementptr inbounds i8, i8* %126, i64 %add204
  %add.ptr208 = getelementptr inbounds i8, i8* %add.ptr207, i64 -1
  %127 = load i8, i8* %add.ptr208, align 1
  %conv209 = zext i8 %127 to i32
  %add210 = add i32 %conv209, 0
  %cmp211 = icmp ult i32 %add210, 128
  br i1 %cmp211, label %cond.true.233, label %cond.false.250

cond.false.213:                                   ; preds = %cond.false.192
  %128 = load i64, i64* %from_byte, align 8
  %129 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text214 = getelementptr inbounds %struct.buffer, %struct.buffer* %129, i32 0, i32 73
  %130 = load %struct.buffer_text*, %struct.buffer_text** %text214, align 8
  %gpt_byte215 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %130, i32 0, i32 3
  %131 = load i64, i64* %gpt_byte215, align 8
  %cmp216 = icmp sge i64 %128, %131
  br i1 %cmp216, label %cond.true.218, label %cond.false.221

cond.true.218:                                    ; preds = %cond.false.213
  %132 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text219 = getelementptr inbounds %struct.buffer, %struct.buffer* %132, i32 0, i32 73
  %133 = load %struct.buffer_text*, %struct.buffer_text** %text219, align 8
  %gap_size220 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %133, i32 0, i32 5
  %134 = load i64, i64* %gap_size220, align 8
  br label %cond.end.222

cond.false.221:                                   ; preds = %cond.false.213
  br label %cond.end.222

cond.end.222:                                     ; preds = %cond.false.221, %cond.true.218
  %cond223 = phi i64 [ %134, %cond.true.218 ], [ 0, %cond.false.221 ]
  %135 = load i64, i64* %from_byte, align 8
  %add224 = add nsw i64 %cond223, %135
  %136 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text225 = getelementptr inbounds %struct.buffer, %struct.buffer* %136, i32 0, i32 73
  %137 = load %struct.buffer_text*, %struct.buffer_text** %text225, align 8
  %beg226 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %137, i32 0, i32 0
  %138 = load i8*, i8** %beg226, align 8
  %add.ptr227 = getelementptr inbounds i8, i8* %138, i64 %add224
  %add.ptr228 = getelementptr inbounds i8, i8* %add.ptr227, i64 -1
  %139 = load i8, i8* %add.ptr228, align 1
  %conv229 = zext i8 %139 to i64
  %add230 = add i64 %conv229, 0
  %cmp231 = icmp ult i64 %add230, 128
  br i1 %cmp231, label %cond.true.233, label %cond.false.250

cond.true.233:                                    ; preds = %cond.end.222, %cond.end.202
  %140 = load i64, i64* %from_byte, align 8
  %141 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text234 = getelementptr inbounds %struct.buffer, %struct.buffer* %141, i32 0, i32 73
  %142 = load %struct.buffer_text*, %struct.buffer_text** %text234, align 8
  %gpt_byte235 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %142, i32 0, i32 3
  %143 = load i64, i64* %gpt_byte235, align 8
  %cmp236 = icmp sge i64 %140, %143
  br i1 %cmp236, label %cond.true.238, label %cond.false.241

cond.true.238:                                    ; preds = %cond.true.233
  %144 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text239 = getelementptr inbounds %struct.buffer, %struct.buffer* %144, i32 0, i32 73
  %145 = load %struct.buffer_text*, %struct.buffer_text** %text239, align 8
  %gap_size240 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %145, i32 0, i32 5
  %146 = load i64, i64* %gap_size240, align 8
  br label %cond.end.242

cond.false.241:                                   ; preds = %cond.true.233
  br label %cond.end.242

cond.end.242:                                     ; preds = %cond.false.241, %cond.true.238
  %cond243 = phi i64 [ %146, %cond.true.238 ], [ 0, %cond.false.241 ]
  %147 = load i64, i64* %from_byte, align 8
  %add244 = add nsw i64 %cond243, %147
  %148 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text245 = getelementptr inbounds %struct.buffer, %struct.buffer* %148, i32 0, i32 73
  %149 = load %struct.buffer_text*, %struct.buffer_text** %text245, align 8
  %beg246 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %149, i32 0, i32 0
  %150 = load i8*, i8** %beg246, align 8
  %add.ptr247 = getelementptr inbounds i8, i8* %150, i64 %add244
  %add.ptr248 = getelementptr inbounds i8, i8* %add.ptr247, i64 -1
  %151 = load i8, i8* %add.ptr248, align 1
  %conv249 = zext i8 %151 to i32
  br label %cond.end.268

cond.false.250:                                   ; preds = %cond.end.222, %cond.end.202
  %152 = load i64, i64* %from_byte, align 8
  %153 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text251 = getelementptr inbounds %struct.buffer, %struct.buffer* %153, i32 0, i32 73
  %154 = load %struct.buffer_text*, %struct.buffer_text** %text251, align 8
  %gpt_byte252 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %154, i32 0, i32 3
  %155 = load i64, i64* %gpt_byte252, align 8
  %cmp253 = icmp sge i64 %152, %155
  br i1 %cmp253, label %cond.true.255, label %cond.false.258

cond.true.255:                                    ; preds = %cond.false.250
  %156 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text256 = getelementptr inbounds %struct.buffer, %struct.buffer* %156, i32 0, i32 73
  %157 = load %struct.buffer_text*, %struct.buffer_text** %text256, align 8
  %gap_size257 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %157, i32 0, i32 5
  %158 = load i64, i64* %gap_size257, align 8
  br label %cond.end.259

cond.false.258:                                   ; preds = %cond.false.250
  br label %cond.end.259

cond.end.259:                                     ; preds = %cond.false.258, %cond.true.255
  %cond260 = phi i64 [ %158, %cond.true.255 ], [ 0, %cond.false.258 ]
  %159 = load i64, i64* %from_byte, align 8
  %add261 = add nsw i64 %cond260, %159
  %160 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text262 = getelementptr inbounds %struct.buffer, %struct.buffer* %160, i32 0, i32 73
  %161 = load %struct.buffer_text*, %struct.buffer_text** %text262, align 8
  %beg263 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %161, i32 0, i32 0
  %162 = load i8*, i8** %beg263, align 8
  %add.ptr264 = getelementptr inbounds i8, i8* %162, i64 %add261
  %add.ptr265 = getelementptr inbounds i8, i8* %add.ptr264, i64 -1
  %163 = load i8, i8* %add.ptr265, align 1
  %conv266 = zext i8 %163 to i32
  %add267 = add nsw i32 %conv266, 4194048
  br label %cond.end.268

cond.end.268:                                     ; preds = %cond.end.259, %cond.end.242
  %cond269 = phi i32 [ %conv249, %cond.end.242 ], [ %add267, %cond.end.259 ]
  br label %cond.end.270

cond.end.270:                                     ; preds = %cond.end.268, %cond.true.190
  %cond271 = phi i32 [ %call191, %cond.true.190 ], [ %cond269, %cond.end.268 ]
  store i32 %cond271, i32* %ch1, align 4
  %164 = load i32, i32* %ch1, align 4
  %call272 = call i32 @syntax_property(i32 %164, i1 zeroext true)
  store i32 %call272, i32* %code, align 4
  %165 = load i32, i32* %code, align 4
  %cmp273 = icmp ne i32 %165, 2
  br i1 %cmp273, label %land.lhs.true.275, label %lor.lhs.false.283

land.lhs.true.275:                                ; preds = %cond.end.270
  %166 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 499), align 1
  %tobool276 = trunc i8 %166 to i1
  br i1 %tobool276, label %lor.lhs.false.277, label %if.then.286

lor.lhs.false.277:                                ; preds = %land.lhs.true.275
  %167 = load i32, i32* %code, align 4
  %cmp278 = icmp ne i32 %167, 9
  br i1 %cmp278, label %land.lhs.true.280, label %lor.lhs.false.283

land.lhs.true.280:                                ; preds = %lor.lhs.false.277
  %168 = load i32, i32* %code, align 4
  %cmp281 = icmp ne i32 %168, 10
  br i1 %cmp281, label %if.then.286, label %lor.lhs.false.283

lor.lhs.false.283:                                ; preds = %land.lhs.true.280, %lor.lhs.false.277, %cond.end.270
  %169 = load i32, i32* %ch0, align 4
  %170 = load i32, i32* %ch1, align 4
  %call284 = call zeroext i1 @word_boundary_p(i32 %169, i32 %170)
  br i1 %call284, label %if.then.286, label %if.end.287

if.then.286:                                      ; preds = %lor.lhs.false.283, %land.lhs.true.280, %land.lhs.true.275
  br label %while.end.345

if.end.287:                                       ; preds = %lor.lhs.false.283
  br label %do.body.288

do.body.288:                                      ; preds = %if.end.287
  %171 = load i64, i64* %from.addr, align 8
  %inc289 = add nsw i64 %171, 1
  store i64 %inc289, i64* %from.addr, align 8
  %172 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_290 = getelementptr inbounds %struct.buffer, %struct.buffer* %172, i32 0, i32 39
  %173 = load i64, i64* %enable_multibyte_characters_290, align 8
  %call291 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp292 = icmp eq i64 %173, %call291
  br i1 %cmp292, label %if.then.294, label %if.else.296

if.then.294:                                      ; preds = %do.body.288
  %174 = load i64, i64* %from_byte, align 8
  %inc295 = add nsw i64 %174, 1
  store i64 %inc295, i64* %from_byte, align 8
  br label %if.end.343

if.else.296:                                      ; preds = %do.body.288
  br label %do.body.297

do.body.297:                                      ; preds = %if.else.296
  %175 = load i64, i64* %from_byte, align 8
  %176 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text299 = getelementptr inbounds %struct.buffer, %struct.buffer* %176, i32 0, i32 73
  %177 = load %struct.buffer_text*, %struct.buffer_text** %text299, align 8
  %gpt_byte300 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %177, i32 0, i32 3
  %178 = load i64, i64* %gpt_byte300, align 8
  %cmp301 = icmp sge i64 %175, %178
  br i1 %cmp301, label %cond.true.303, label %cond.false.306

cond.true.303:                                    ; preds = %do.body.297
  %179 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text304 = getelementptr inbounds %struct.buffer, %struct.buffer* %179, i32 0, i32 73
  %180 = load %struct.buffer_text*, %struct.buffer_text** %text304, align 8
  %gap_size305 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %180, i32 0, i32 5
  %181 = load i64, i64* %gap_size305, align 8
  br label %cond.end.307

cond.false.306:                                   ; preds = %do.body.297
  br label %cond.end.307

cond.end.307:                                     ; preds = %cond.false.306, %cond.true.303
  %cond308 = phi i64 [ %181, %cond.true.303 ], [ 0, %cond.false.306 ]
  %182 = load i64, i64* %from_byte, align 8
  %add309 = add nsw i64 %cond308, %182
  %183 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text310 = getelementptr inbounds %struct.buffer, %struct.buffer* %183, i32 0, i32 73
  %184 = load %struct.buffer_text*, %struct.buffer_text** %text310, align 8
  %beg311 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %184, i32 0, i32 0
  %185 = load i8*, i8** %beg311, align 8
  %add.ptr312 = getelementptr inbounds i8, i8* %185, i64 %add309
  %add.ptr313 = getelementptr inbounds i8, i8* %add.ptr312, i64 -1
  store i8* %add.ptr313, i8** %chp298, align 8
  %186 = load i8*, i8** %chp298, align 8
  %187 = load i8, i8* %186, align 1
  %conv314 = zext i8 %187 to i32
  %and315 = and i32 %conv314, 128
  %tobool316 = icmp ne i32 %and315, 0
  br i1 %tobool316, label %cond.false.318, label %cond.true.317

cond.true.317:                                    ; preds = %cond.end.307
  br label %cond.end.338

cond.false.318:                                   ; preds = %cond.end.307
  %188 = load i8*, i8** %chp298, align 8
  %189 = load i8, i8* %188, align 1
  %conv319 = zext i8 %189 to i32
  %and320 = and i32 %conv319, 32
  %tobool321 = icmp ne i32 %and320, 0
  br i1 %tobool321, label %cond.false.323, label %cond.true.322

cond.true.322:                                    ; preds = %cond.false.318
  br label %cond.end.336

cond.false.323:                                   ; preds = %cond.false.318
  %190 = load i8*, i8** %chp298, align 8
  %191 = load i8, i8* %190, align 1
  %conv324 = zext i8 %191 to i32
  %and325 = and i32 %conv324, 16
  %tobool326 = icmp ne i32 %and325, 0
  br i1 %tobool326, label %cond.false.328, label %cond.true.327

cond.true.327:                                    ; preds = %cond.false.323
  br label %cond.end.334

cond.false.328:                                   ; preds = %cond.false.323
  %192 = load i8*, i8** %chp298, align 8
  %193 = load i8, i8* %192, align 1
  %conv329 = zext i8 %193 to i32
  %and330 = and i32 %conv329, 8
  %tobool331 = icmp ne i32 %and330, 0
  %lnot332 = xor i1 %tobool331, true
  %cond333 = select i1 %lnot332, i32 4, i32 5
  br label %cond.end.334

cond.end.334:                                     ; preds = %cond.false.328, %cond.true.327
  %cond335 = phi i32 [ 3, %cond.true.327 ], [ %cond333, %cond.false.328 ]
  br label %cond.end.336

cond.end.336:                                     ; preds = %cond.end.334, %cond.true.322
  %cond337 = phi i32 [ 2, %cond.true.322 ], [ %cond335, %cond.end.334 ]
  br label %cond.end.338

cond.end.338:                                     ; preds = %cond.end.336, %cond.true.317
  %cond339 = phi i32 [ 1, %cond.true.317 ], [ %cond337, %cond.end.336 ]
  %conv340 = sext i32 %cond339 to i64
  %194 = load i64, i64* %from_byte, align 8
  %add341 = add nsw i64 %194, %conv340
  store i64 %add341, i64* %from_byte, align 8
  br label %do.end.342

do.end.342:                                       ; preds = %cond.end.338
  br label %if.end.343

if.end.343:                                       ; preds = %do.end.342, %if.then.294
  br label %do.end.344

do.end.344:                                       ; preds = %if.end.343
  %195 = load i32, i32* %ch1, align 4
  store i32 %195, i32* %ch0, align 4
  br label %while.body.181

while.end.345:                                    ; preds = %if.then.286, %if.then.184
  br label %if.end.346

if.end.346:                                       ; preds = %while.end.345, %if.end.178
  %196 = load i64, i64* %count.addr, align 8
  %dec = add nsw i64 %196, -1
  store i64 %dec, i64* %count.addr, align 8
  br label %while.cond

while.end.347:                                    ; preds = %while.cond
  br label %while.cond.348

while.cond.348:                                   ; preds = %if.end.741, %while.end.347
  %197 = load i64, i64* %count.addr, align 8
  %cmp349 = icmp slt i64 %197, 0
  br i1 %cmp349, label %while.body.351, label %while.end.743

while.body.351:                                   ; preds = %while.cond.348
  br label %while.body.353

while.body.353:                                   ; preds = %while.body.351, %if.end.500
  %198 = load i64, i64* %from.addr, align 8
  %199 = load i64, i64* %beg, align 8
  %cmp354 = icmp eq i64 %198, %199
  br i1 %cmp354, label %if.then.356, label %if.end.357

if.then.356:                                      ; preds = %while.body.353
  store i8 0, i8* @immediate_quit, align 1
  store i64 0, i64* %retval
  br label %return

if.end.357:                                       ; preds = %while.body.353
  br label %do.body.358

do.body.358:                                      ; preds = %if.end.357
  %200 = load i64, i64* %from.addr, align 8
  %dec359 = add nsw i64 %200, -1
  store i64 %dec359, i64* %from.addr, align 8
  %201 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_360 = getelementptr inbounds %struct.buffer, %struct.buffer* %201, i32 0, i32 39
  %202 = load i64, i64* %enable_multibyte_characters_360, align 8
  %call361 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp362 = icmp eq i64 %202, %call361
  br i1 %cmp362, label %if.then.364, label %if.else.366

if.then.364:                                      ; preds = %do.body.358
  %203 = load i64, i64* %from_byte, align 8
  %dec365 = add nsw i64 %203, -1
  store i64 %dec365, i64* %from_byte, align 8
  br label %if.end.398

if.else.366:                                      ; preds = %do.body.358
  br label %do.body.367

do.body.367:                                      ; preds = %if.else.366
  %204 = load i64, i64* %from_byte, align 8
  %dec369 = add nsw i64 %204, -1
  store i64 %dec369, i64* %from_byte, align 8
  %205 = load i64, i64* %from_byte, align 8
  %206 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text370 = getelementptr inbounds %struct.buffer, %struct.buffer* %206, i32 0, i32 73
  %207 = load %struct.buffer_text*, %struct.buffer_text** %text370, align 8
  %gpt_byte371 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %207, i32 0, i32 3
  %208 = load i64, i64* %gpt_byte371, align 8
  %cmp372 = icmp slt i64 %205, %208
  br i1 %cmp372, label %if.then.374, label %if.else.379

if.then.374:                                      ; preds = %do.body.367
  %209 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text375 = getelementptr inbounds %struct.buffer, %struct.buffer* %209, i32 0, i32 73
  %210 = load %struct.buffer_text*, %struct.buffer_text** %text375, align 8
  %beg376 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %210, i32 0, i32 0
  %211 = load i8*, i8** %beg376, align 8
  %212 = load i64, i64* %from_byte, align 8
  %add.ptr377 = getelementptr inbounds i8, i8* %211, i64 %212
  %add.ptr378 = getelementptr inbounds i8, i8* %add.ptr377, i64 -1
  store i8* %add.ptr378, i8** %chp368, align 8
  br label %if.end.387

if.else.379:                                      ; preds = %do.body.367
  %213 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text380 = getelementptr inbounds %struct.buffer, %struct.buffer* %213, i32 0, i32 73
  %214 = load %struct.buffer_text*, %struct.buffer_text** %text380, align 8
  %beg381 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %214, i32 0, i32 0
  %215 = load i8*, i8** %beg381, align 8
  %216 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text382 = getelementptr inbounds %struct.buffer, %struct.buffer* %216, i32 0, i32 73
  %217 = load %struct.buffer_text*, %struct.buffer_text** %text382, align 8
  %gap_size383 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %217, i32 0, i32 5
  %218 = load i64, i64* %gap_size383, align 8
  %add.ptr384 = getelementptr inbounds i8, i8* %215, i64 %218
  %219 = load i64, i64* %from_byte, align 8
  %add.ptr385 = getelementptr inbounds i8, i8* %add.ptr384, i64 %219
  %add.ptr386 = getelementptr inbounds i8, i8* %add.ptr385, i64 -1
  store i8* %add.ptr386, i8** %chp368, align 8
  br label %if.end.387

if.end.387:                                       ; preds = %if.else.379, %if.then.374
  br label %while.cond.388

while.cond.388:                                   ; preds = %while.body.394, %if.end.387
  %220 = load i8*, i8** %chp368, align 8
  %221 = load i8, i8* %220, align 1
  %conv389 = zext i8 %221 to i32
  %and390 = and i32 %conv389, 192
  %cmp391 = icmp ne i32 %and390, 128
  %lnot393 = xor i1 %cmp391, true
  br i1 %lnot393, label %while.body.394, label %while.end.396

while.body.394:                                   ; preds = %while.cond.388
  %222 = load i8*, i8** %chp368, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %222, i32 -1
  store i8* %incdec.ptr, i8** %chp368, align 8
  %223 = load i64, i64* %from_byte, align 8
  %dec395 = add nsw i64 %223, -1
  store i64 %dec395, i64* %from_byte, align 8
  br label %while.cond.388

while.end.396:                                    ; preds = %while.cond.388
  br label %do.end.397

do.end.397:                                       ; preds = %while.end.396
  br label %if.end.398

if.end.398:                                       ; preds = %do.end.397, %if.then.364
  br label %do.end.399

do.end.399:                                       ; preds = %if.end.398
  %224 = load i64, i64* %from.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_BACKWARD(i64 %224)
  %225 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_400 = getelementptr inbounds %struct.buffer, %struct.buffer* %225, i32 0, i32 39
  %226 = load i64, i64* %enable_multibyte_characters_400, align 8
  %call401 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp402 = icmp eq i64 %226, %call401
  br i1 %cmp402, label %cond.false.406, label %cond.true.404

cond.true.404:                                    ; preds = %do.end.399
  %227 = load i64, i64* %from_byte, align 8
  %call405 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %227)
  br label %cond.end.484

cond.false.406:                                   ; preds = %do.end.399
  br i1 true, label %cond.true.407, label %cond.false.427

cond.true.407:                                    ; preds = %cond.false.406
  %228 = load i64, i64* %from_byte, align 8
  %229 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text408 = getelementptr inbounds %struct.buffer, %struct.buffer* %229, i32 0, i32 73
  %230 = load %struct.buffer_text*, %struct.buffer_text** %text408, align 8
  %gpt_byte409 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %230, i32 0, i32 3
  %231 = load i64, i64* %gpt_byte409, align 8
  %cmp410 = icmp sge i64 %228, %231
  br i1 %cmp410, label %cond.true.412, label %cond.false.415

cond.true.412:                                    ; preds = %cond.true.407
  %232 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text413 = getelementptr inbounds %struct.buffer, %struct.buffer* %232, i32 0, i32 73
  %233 = load %struct.buffer_text*, %struct.buffer_text** %text413, align 8
  %gap_size414 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %233, i32 0, i32 5
  %234 = load i64, i64* %gap_size414, align 8
  br label %cond.end.416

cond.false.415:                                   ; preds = %cond.true.407
  br label %cond.end.416

cond.end.416:                                     ; preds = %cond.false.415, %cond.true.412
  %cond417 = phi i64 [ %234, %cond.true.412 ], [ 0, %cond.false.415 ]
  %235 = load i64, i64* %from_byte, align 8
  %add418 = add nsw i64 %cond417, %235
  %236 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text419 = getelementptr inbounds %struct.buffer, %struct.buffer* %236, i32 0, i32 73
  %237 = load %struct.buffer_text*, %struct.buffer_text** %text419, align 8
  %beg420 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %237, i32 0, i32 0
  %238 = load i8*, i8** %beg420, align 8
  %add.ptr421 = getelementptr inbounds i8, i8* %238, i64 %add418
  %add.ptr422 = getelementptr inbounds i8, i8* %add.ptr421, i64 -1
  %239 = load i8, i8* %add.ptr422, align 1
  %conv423 = zext i8 %239 to i32
  %add424 = add i32 %conv423, 0
  %cmp425 = icmp ult i32 %add424, 128
  br i1 %cmp425, label %cond.true.447, label %cond.false.464

cond.false.427:                                   ; preds = %cond.false.406
  %240 = load i64, i64* %from_byte, align 8
  %241 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text428 = getelementptr inbounds %struct.buffer, %struct.buffer* %241, i32 0, i32 73
  %242 = load %struct.buffer_text*, %struct.buffer_text** %text428, align 8
  %gpt_byte429 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %242, i32 0, i32 3
  %243 = load i64, i64* %gpt_byte429, align 8
  %cmp430 = icmp sge i64 %240, %243
  br i1 %cmp430, label %cond.true.432, label %cond.false.435

cond.true.432:                                    ; preds = %cond.false.427
  %244 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text433 = getelementptr inbounds %struct.buffer, %struct.buffer* %244, i32 0, i32 73
  %245 = load %struct.buffer_text*, %struct.buffer_text** %text433, align 8
  %gap_size434 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %245, i32 0, i32 5
  %246 = load i64, i64* %gap_size434, align 8
  br label %cond.end.436

cond.false.435:                                   ; preds = %cond.false.427
  br label %cond.end.436

cond.end.436:                                     ; preds = %cond.false.435, %cond.true.432
  %cond437 = phi i64 [ %246, %cond.true.432 ], [ 0, %cond.false.435 ]
  %247 = load i64, i64* %from_byte, align 8
  %add438 = add nsw i64 %cond437, %247
  %248 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text439 = getelementptr inbounds %struct.buffer, %struct.buffer* %248, i32 0, i32 73
  %249 = load %struct.buffer_text*, %struct.buffer_text** %text439, align 8
  %beg440 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %249, i32 0, i32 0
  %250 = load i8*, i8** %beg440, align 8
  %add.ptr441 = getelementptr inbounds i8, i8* %250, i64 %add438
  %add.ptr442 = getelementptr inbounds i8, i8* %add.ptr441, i64 -1
  %251 = load i8, i8* %add.ptr442, align 1
  %conv443 = zext i8 %251 to i64
  %add444 = add i64 %conv443, 0
  %cmp445 = icmp ult i64 %add444, 128
  br i1 %cmp445, label %cond.true.447, label %cond.false.464

cond.true.447:                                    ; preds = %cond.end.436, %cond.end.416
  %252 = load i64, i64* %from_byte, align 8
  %253 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text448 = getelementptr inbounds %struct.buffer, %struct.buffer* %253, i32 0, i32 73
  %254 = load %struct.buffer_text*, %struct.buffer_text** %text448, align 8
  %gpt_byte449 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %254, i32 0, i32 3
  %255 = load i64, i64* %gpt_byte449, align 8
  %cmp450 = icmp sge i64 %252, %255
  br i1 %cmp450, label %cond.true.452, label %cond.false.455

cond.true.452:                                    ; preds = %cond.true.447
  %256 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text453 = getelementptr inbounds %struct.buffer, %struct.buffer* %256, i32 0, i32 73
  %257 = load %struct.buffer_text*, %struct.buffer_text** %text453, align 8
  %gap_size454 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %257, i32 0, i32 5
  %258 = load i64, i64* %gap_size454, align 8
  br label %cond.end.456

cond.false.455:                                   ; preds = %cond.true.447
  br label %cond.end.456

cond.end.456:                                     ; preds = %cond.false.455, %cond.true.452
  %cond457 = phi i64 [ %258, %cond.true.452 ], [ 0, %cond.false.455 ]
  %259 = load i64, i64* %from_byte, align 8
  %add458 = add nsw i64 %cond457, %259
  %260 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text459 = getelementptr inbounds %struct.buffer, %struct.buffer* %260, i32 0, i32 73
  %261 = load %struct.buffer_text*, %struct.buffer_text** %text459, align 8
  %beg460 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %261, i32 0, i32 0
  %262 = load i8*, i8** %beg460, align 8
  %add.ptr461 = getelementptr inbounds i8, i8* %262, i64 %add458
  %add.ptr462 = getelementptr inbounds i8, i8* %add.ptr461, i64 -1
  %263 = load i8, i8* %add.ptr462, align 1
  %conv463 = zext i8 %263 to i32
  br label %cond.end.482

cond.false.464:                                   ; preds = %cond.end.436, %cond.end.416
  %264 = load i64, i64* %from_byte, align 8
  %265 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text465 = getelementptr inbounds %struct.buffer, %struct.buffer* %265, i32 0, i32 73
  %266 = load %struct.buffer_text*, %struct.buffer_text** %text465, align 8
  %gpt_byte466 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %266, i32 0, i32 3
  %267 = load i64, i64* %gpt_byte466, align 8
  %cmp467 = icmp sge i64 %264, %267
  br i1 %cmp467, label %cond.true.469, label %cond.false.472

cond.true.469:                                    ; preds = %cond.false.464
  %268 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text470 = getelementptr inbounds %struct.buffer, %struct.buffer* %268, i32 0, i32 73
  %269 = load %struct.buffer_text*, %struct.buffer_text** %text470, align 8
  %gap_size471 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %269, i32 0, i32 5
  %270 = load i64, i64* %gap_size471, align 8
  br label %cond.end.473

cond.false.472:                                   ; preds = %cond.false.464
  br label %cond.end.473

cond.end.473:                                     ; preds = %cond.false.472, %cond.true.469
  %cond474 = phi i64 [ %270, %cond.true.469 ], [ 0, %cond.false.472 ]
  %271 = load i64, i64* %from_byte, align 8
  %add475 = add nsw i64 %cond474, %271
  %272 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text476 = getelementptr inbounds %struct.buffer, %struct.buffer* %272, i32 0, i32 73
  %273 = load %struct.buffer_text*, %struct.buffer_text** %text476, align 8
  %beg477 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %273, i32 0, i32 0
  %274 = load i8*, i8** %beg477, align 8
  %add.ptr478 = getelementptr inbounds i8, i8* %274, i64 %add475
  %add.ptr479 = getelementptr inbounds i8, i8* %add.ptr478, i64 -1
  %275 = load i8, i8* %add.ptr479, align 1
  %conv480 = zext i8 %275 to i32
  %add481 = add nsw i32 %conv480, 4194048
  br label %cond.end.482

cond.end.482:                                     ; preds = %cond.end.473, %cond.end.456
  %cond483 = phi i32 [ %conv463, %cond.end.456 ], [ %add481, %cond.end.473 ]
  br label %cond.end.484

cond.end.484:                                     ; preds = %cond.end.482, %cond.true.404
  %cond485 = phi i32 [ %call405, %cond.true.404 ], [ %cond483, %cond.end.482 ]
  store i32 %cond485, i32* %ch1, align 4
  %276 = load i32, i32* %ch1, align 4
  %call486 = call i32 @syntax_property(i32 %276, i1 zeroext true)
  store i32 %call486, i32* %code, align 4
  %277 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 499), align 1
  %tobool487 = trunc i8 %277 to i1
  br i1 %tobool487, label %land.lhs.true.489, label %if.end.496

land.lhs.true.489:                                ; preds = %cond.end.484
  %278 = load i32, i32* %code, align 4
  %cmp490 = icmp eq i32 %278, 9
  br i1 %cmp490, label %if.then.495, label %lor.lhs.false.492

lor.lhs.false.492:                                ; preds = %land.lhs.true.489
  %279 = load i32, i32* %code, align 4
  %cmp493 = icmp eq i32 %279, 10
  br i1 %cmp493, label %if.then.495, label %if.end.496

if.then.495:                                      ; preds = %lor.lhs.false.492, %land.lhs.true.489
  br label %while.end.501

if.end.496:                                       ; preds = %lor.lhs.false.492, %cond.end.484
  %280 = load i32, i32* %code, align 4
  %cmp497 = icmp eq i32 %280, 2
  br i1 %cmp497, label %if.then.499, label %if.end.500

if.then.499:                                      ; preds = %if.end.496
  br label %while.end.501

if.end.500:                                       ; preds = %if.end.496
  br label %while.body.353

while.end.501:                                    ; preds = %if.then.499, %if.then.495
  %281 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 96), align 8
  %282 = load i32, i32* %ch1, align 4
  %call502 = call i64 @CHAR_TABLE_REF(i64 %281, i32 %282)
  store i64 %call502, i64* %func, align 8
  %283 = load i64, i64* %func, align 8
  %call503 = call i64 @Ffboundp(i64 %283)
  %call504 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp505 = icmp eq i64 %call503, %call504
  br i1 %cmp505, label %if.else.531, label %if.then.507

if.then.507:                                      ; preds = %while.end.501
  %284 = load i64, i64* %func, align 8
  %285 = load i64, i64* %from.addr, align 8
  %shl508 = shl i64 %285, 2
  %add509 = add i64 %shl508, 2
  %286 = load i64, i64* %beg, align 8
  %shl510 = shl i64 %286, 2
  %add511 = add i64 %shl510, 2
  %call512 = call i64 @call2(i64 %284, i64 %add509, i64 %add511)
  store i64 %call512, i64* %pos, align 8
  %287 = load i64, i64* %pos, align 8
  %and513 = and i64 %287, 7
  %conv514 = trunc i64 %and513 to i32
  %and515 = and i32 %conv514, -5
  %cmp516 = icmp eq i32 %and515, 2
  br i1 %cmp516, label %land.lhs.true.518, label %if.end.530

land.lhs.true.518:                                ; preds = %if.then.507
  %288 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv519 = getelementptr inbounds %struct.buffer, %struct.buffer* %288, i32 0, i32 77
  %289 = load i64, i64* %begv519, align 8
  %290 = load i64, i64* %pos, align 8
  %shr520 = ashr i64 %290, 2
  %cmp521 = icmp sle i64 %289, %shr520
  br i1 %cmp521, label %land.lhs.true.523, label %if.end.530

land.lhs.true.523:                                ; preds = %land.lhs.true.518
  %291 = load i64, i64* %pos, align 8
  %shr524 = ashr i64 %291, 2
  %292 = load i64, i64* %from.addr, align 8
  %cmp525 = icmp slt i64 %shr524, %292
  br i1 %cmp525, label %if.then.527, label %if.end.530

if.then.527:                                      ; preds = %land.lhs.true.523
  %293 = load i64, i64* %pos, align 8
  %shr528 = ashr i64 %293, 2
  store i64 %shr528, i64* %from.addr, align 8
  %294 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %295 = load i64, i64* %from.addr, align 8
  %call529 = call i64 @buf_charpos_to_bytepos(%struct.buffer* %294, i64 %295)
  store i64 %call529, i64* %from_byte, align 8
  br label %if.end.530

if.end.530:                                       ; preds = %if.then.527, %land.lhs.true.523, %land.lhs.true.518, %if.then.507
  br label %if.end.741

if.else.531:                                      ; preds = %while.end.501
  br label %while.body.533

while.body.533:                                   ; preds = %if.else.531, %if.end.739
  %296 = load i64, i64* %from.addr, align 8
  %297 = load i64, i64* %beg, align 8
  %cmp534 = icmp eq i64 %296, %297
  br i1 %cmp534, label %if.then.536, label %if.end.537

if.then.536:                                      ; preds = %while.body.533
  br label %while.end.740

if.end.537:                                       ; preds = %while.body.533
  br label %do.body.538

do.body.538:                                      ; preds = %if.end.537
  %298 = load i64, i64* %from.addr, align 8
  %dec539 = add nsw i64 %298, -1
  store i64 %dec539, i64* %from.addr, align 8
  %299 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_540 = getelementptr inbounds %struct.buffer, %struct.buffer* %299, i32 0, i32 39
  %300 = load i64, i64* %enable_multibyte_characters_540, align 8
  %call541 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp542 = icmp eq i64 %300, %call541
  br i1 %cmp542, label %if.then.544, label %if.else.546

if.then.544:                                      ; preds = %do.body.538
  %301 = load i64, i64* %from_byte, align 8
  %dec545 = add nsw i64 %301, -1
  store i64 %dec545, i64* %from_byte, align 8
  br label %if.end.579

if.else.546:                                      ; preds = %do.body.538
  br label %do.body.547

do.body.547:                                      ; preds = %if.else.546
  %302 = load i64, i64* %from_byte, align 8
  %dec549 = add nsw i64 %302, -1
  store i64 %dec549, i64* %from_byte, align 8
  %303 = load i64, i64* %from_byte, align 8
  %304 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text550 = getelementptr inbounds %struct.buffer, %struct.buffer* %304, i32 0, i32 73
  %305 = load %struct.buffer_text*, %struct.buffer_text** %text550, align 8
  %gpt_byte551 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %305, i32 0, i32 3
  %306 = load i64, i64* %gpt_byte551, align 8
  %cmp552 = icmp slt i64 %303, %306
  br i1 %cmp552, label %if.then.554, label %if.else.559

if.then.554:                                      ; preds = %do.body.547
  %307 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text555 = getelementptr inbounds %struct.buffer, %struct.buffer* %307, i32 0, i32 73
  %308 = load %struct.buffer_text*, %struct.buffer_text** %text555, align 8
  %beg556 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %308, i32 0, i32 0
  %309 = load i8*, i8** %beg556, align 8
  %310 = load i64, i64* %from_byte, align 8
  %add.ptr557 = getelementptr inbounds i8, i8* %309, i64 %310
  %add.ptr558 = getelementptr inbounds i8, i8* %add.ptr557, i64 -1
  store i8* %add.ptr558, i8** %chp548, align 8
  br label %if.end.567

if.else.559:                                      ; preds = %do.body.547
  %311 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text560 = getelementptr inbounds %struct.buffer, %struct.buffer* %311, i32 0, i32 73
  %312 = load %struct.buffer_text*, %struct.buffer_text** %text560, align 8
  %beg561 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %312, i32 0, i32 0
  %313 = load i8*, i8** %beg561, align 8
  %314 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text562 = getelementptr inbounds %struct.buffer, %struct.buffer* %314, i32 0, i32 73
  %315 = load %struct.buffer_text*, %struct.buffer_text** %text562, align 8
  %gap_size563 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %315, i32 0, i32 5
  %316 = load i64, i64* %gap_size563, align 8
  %add.ptr564 = getelementptr inbounds i8, i8* %313, i64 %316
  %317 = load i64, i64* %from_byte, align 8
  %add.ptr565 = getelementptr inbounds i8, i8* %add.ptr564, i64 %317
  %add.ptr566 = getelementptr inbounds i8, i8* %add.ptr565, i64 -1
  store i8* %add.ptr566, i8** %chp548, align 8
  br label %if.end.567

if.end.567:                                       ; preds = %if.else.559, %if.then.554
  br label %while.cond.568

while.cond.568:                                   ; preds = %while.body.574, %if.end.567
  %318 = load i8*, i8** %chp548, align 8
  %319 = load i8, i8* %318, align 1
  %conv569 = zext i8 %319 to i32
  %and570 = and i32 %conv569, 192
  %cmp571 = icmp ne i32 %and570, 128
  %lnot573 = xor i1 %cmp571, true
  br i1 %lnot573, label %while.body.574, label %while.end.577

while.body.574:                                   ; preds = %while.cond.568
  %320 = load i8*, i8** %chp548, align 8
  %incdec.ptr575 = getelementptr inbounds i8, i8* %320, i32 -1
  store i8* %incdec.ptr575, i8** %chp548, align 8
  %321 = load i64, i64* %from_byte, align 8
  %dec576 = add nsw i64 %321, -1
  store i64 %dec576, i64* %from_byte, align 8
  br label %while.cond.568

while.end.577:                                    ; preds = %while.cond.568
  br label %do.end.578

do.end.578:                                       ; preds = %while.end.577
  br label %if.end.579

if.end.579:                                       ; preds = %do.end.578, %if.then.544
  br label %do.end.580

do.end.580:                                       ; preds = %if.end.579
  %322 = load i64, i64* %from.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_BACKWARD(i64 %322)
  %323 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_581 = getelementptr inbounds %struct.buffer, %struct.buffer* %323, i32 0, i32 39
  %324 = load i64, i64* %enable_multibyte_characters_581, align 8
  %call582 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp583 = icmp eq i64 %324, %call582
  br i1 %cmp583, label %cond.false.587, label %cond.true.585

cond.true.585:                                    ; preds = %do.end.580
  %325 = load i64, i64* %from_byte, align 8
  %call586 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %325)
  br label %cond.end.665

cond.false.587:                                   ; preds = %do.end.580
  br i1 true, label %cond.true.588, label %cond.false.608

cond.true.588:                                    ; preds = %cond.false.587
  %326 = load i64, i64* %from_byte, align 8
  %327 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text589 = getelementptr inbounds %struct.buffer, %struct.buffer* %327, i32 0, i32 73
  %328 = load %struct.buffer_text*, %struct.buffer_text** %text589, align 8
  %gpt_byte590 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %328, i32 0, i32 3
  %329 = load i64, i64* %gpt_byte590, align 8
  %cmp591 = icmp sge i64 %326, %329
  br i1 %cmp591, label %cond.true.593, label %cond.false.596

cond.true.593:                                    ; preds = %cond.true.588
  %330 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text594 = getelementptr inbounds %struct.buffer, %struct.buffer* %330, i32 0, i32 73
  %331 = load %struct.buffer_text*, %struct.buffer_text** %text594, align 8
  %gap_size595 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %331, i32 0, i32 5
  %332 = load i64, i64* %gap_size595, align 8
  br label %cond.end.597

cond.false.596:                                   ; preds = %cond.true.588
  br label %cond.end.597

cond.end.597:                                     ; preds = %cond.false.596, %cond.true.593
  %cond598 = phi i64 [ %332, %cond.true.593 ], [ 0, %cond.false.596 ]
  %333 = load i64, i64* %from_byte, align 8
  %add599 = add nsw i64 %cond598, %333
  %334 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text600 = getelementptr inbounds %struct.buffer, %struct.buffer* %334, i32 0, i32 73
  %335 = load %struct.buffer_text*, %struct.buffer_text** %text600, align 8
  %beg601 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %335, i32 0, i32 0
  %336 = load i8*, i8** %beg601, align 8
  %add.ptr602 = getelementptr inbounds i8, i8* %336, i64 %add599
  %add.ptr603 = getelementptr inbounds i8, i8* %add.ptr602, i64 -1
  %337 = load i8, i8* %add.ptr603, align 1
  %conv604 = zext i8 %337 to i32
  %add605 = add i32 %conv604, 0
  %cmp606 = icmp ult i32 %add605, 128
  br i1 %cmp606, label %cond.true.628, label %cond.false.645

cond.false.608:                                   ; preds = %cond.false.587
  %338 = load i64, i64* %from_byte, align 8
  %339 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text609 = getelementptr inbounds %struct.buffer, %struct.buffer* %339, i32 0, i32 73
  %340 = load %struct.buffer_text*, %struct.buffer_text** %text609, align 8
  %gpt_byte610 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %340, i32 0, i32 3
  %341 = load i64, i64* %gpt_byte610, align 8
  %cmp611 = icmp sge i64 %338, %341
  br i1 %cmp611, label %cond.true.613, label %cond.false.616

cond.true.613:                                    ; preds = %cond.false.608
  %342 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text614 = getelementptr inbounds %struct.buffer, %struct.buffer* %342, i32 0, i32 73
  %343 = load %struct.buffer_text*, %struct.buffer_text** %text614, align 8
  %gap_size615 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %343, i32 0, i32 5
  %344 = load i64, i64* %gap_size615, align 8
  br label %cond.end.617

cond.false.616:                                   ; preds = %cond.false.608
  br label %cond.end.617

cond.end.617:                                     ; preds = %cond.false.616, %cond.true.613
  %cond618 = phi i64 [ %344, %cond.true.613 ], [ 0, %cond.false.616 ]
  %345 = load i64, i64* %from_byte, align 8
  %add619 = add nsw i64 %cond618, %345
  %346 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text620 = getelementptr inbounds %struct.buffer, %struct.buffer* %346, i32 0, i32 73
  %347 = load %struct.buffer_text*, %struct.buffer_text** %text620, align 8
  %beg621 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %347, i32 0, i32 0
  %348 = load i8*, i8** %beg621, align 8
  %add.ptr622 = getelementptr inbounds i8, i8* %348, i64 %add619
  %add.ptr623 = getelementptr inbounds i8, i8* %add.ptr622, i64 -1
  %349 = load i8, i8* %add.ptr623, align 1
  %conv624 = zext i8 %349 to i64
  %add625 = add i64 %conv624, 0
  %cmp626 = icmp ult i64 %add625, 128
  br i1 %cmp626, label %cond.true.628, label %cond.false.645

cond.true.628:                                    ; preds = %cond.end.617, %cond.end.597
  %350 = load i64, i64* %from_byte, align 8
  %351 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text629 = getelementptr inbounds %struct.buffer, %struct.buffer* %351, i32 0, i32 73
  %352 = load %struct.buffer_text*, %struct.buffer_text** %text629, align 8
  %gpt_byte630 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %352, i32 0, i32 3
  %353 = load i64, i64* %gpt_byte630, align 8
  %cmp631 = icmp sge i64 %350, %353
  br i1 %cmp631, label %cond.true.633, label %cond.false.636

cond.true.633:                                    ; preds = %cond.true.628
  %354 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text634 = getelementptr inbounds %struct.buffer, %struct.buffer* %354, i32 0, i32 73
  %355 = load %struct.buffer_text*, %struct.buffer_text** %text634, align 8
  %gap_size635 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %355, i32 0, i32 5
  %356 = load i64, i64* %gap_size635, align 8
  br label %cond.end.637

cond.false.636:                                   ; preds = %cond.true.628
  br label %cond.end.637

cond.end.637:                                     ; preds = %cond.false.636, %cond.true.633
  %cond638 = phi i64 [ %356, %cond.true.633 ], [ 0, %cond.false.636 ]
  %357 = load i64, i64* %from_byte, align 8
  %add639 = add nsw i64 %cond638, %357
  %358 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text640 = getelementptr inbounds %struct.buffer, %struct.buffer* %358, i32 0, i32 73
  %359 = load %struct.buffer_text*, %struct.buffer_text** %text640, align 8
  %beg641 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %359, i32 0, i32 0
  %360 = load i8*, i8** %beg641, align 8
  %add.ptr642 = getelementptr inbounds i8, i8* %360, i64 %add639
  %add.ptr643 = getelementptr inbounds i8, i8* %add.ptr642, i64 -1
  %361 = load i8, i8* %add.ptr643, align 1
  %conv644 = zext i8 %361 to i32
  br label %cond.end.663

cond.false.645:                                   ; preds = %cond.end.617, %cond.end.597
  %362 = load i64, i64* %from_byte, align 8
  %363 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text646 = getelementptr inbounds %struct.buffer, %struct.buffer* %363, i32 0, i32 73
  %364 = load %struct.buffer_text*, %struct.buffer_text** %text646, align 8
  %gpt_byte647 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %364, i32 0, i32 3
  %365 = load i64, i64* %gpt_byte647, align 8
  %cmp648 = icmp sge i64 %362, %365
  br i1 %cmp648, label %cond.true.650, label %cond.false.653

cond.true.650:                                    ; preds = %cond.false.645
  %366 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text651 = getelementptr inbounds %struct.buffer, %struct.buffer* %366, i32 0, i32 73
  %367 = load %struct.buffer_text*, %struct.buffer_text** %text651, align 8
  %gap_size652 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %367, i32 0, i32 5
  %368 = load i64, i64* %gap_size652, align 8
  br label %cond.end.654

cond.false.653:                                   ; preds = %cond.false.645
  br label %cond.end.654

cond.end.654:                                     ; preds = %cond.false.653, %cond.true.650
  %cond655 = phi i64 [ %368, %cond.true.650 ], [ 0, %cond.false.653 ]
  %369 = load i64, i64* %from_byte, align 8
  %add656 = add nsw i64 %cond655, %369
  %370 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text657 = getelementptr inbounds %struct.buffer, %struct.buffer* %370, i32 0, i32 73
  %371 = load %struct.buffer_text*, %struct.buffer_text** %text657, align 8
  %beg658 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %371, i32 0, i32 0
  %372 = load i8*, i8** %beg658, align 8
  %add.ptr659 = getelementptr inbounds i8, i8* %372, i64 %add656
  %add.ptr660 = getelementptr inbounds i8, i8* %add.ptr659, i64 -1
  %373 = load i8, i8* %add.ptr660, align 1
  %conv661 = zext i8 %373 to i32
  %add662 = add nsw i32 %conv661, 4194048
  br label %cond.end.663

cond.end.663:                                     ; preds = %cond.end.654, %cond.end.637
  %cond664 = phi i32 [ %conv644, %cond.end.637 ], [ %add662, %cond.end.654 ]
  br label %cond.end.665

cond.end.665:                                     ; preds = %cond.end.663, %cond.true.585
  %cond666 = phi i32 [ %call586, %cond.true.585 ], [ %cond664, %cond.end.663 ]
  store i32 %cond666, i32* %ch0, align 4
  %374 = load i32, i32* %ch0, align 4
  %call667 = call i32 @syntax_property(i32 %374, i1 zeroext true)
  store i32 %call667, i32* %code, align 4
  %375 = load i32, i32* %code, align 4
  %cmp668 = icmp ne i32 %375, 2
  br i1 %cmp668, label %land.lhs.true.670, label %lor.lhs.false.678

land.lhs.true.670:                                ; preds = %cond.end.665
  %376 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 499), align 1
  %tobool671 = trunc i8 %376 to i1
  br i1 %tobool671, label %lor.lhs.false.672, label %if.then.681

lor.lhs.false.672:                                ; preds = %land.lhs.true.670
  %377 = load i32, i32* %code, align 4
  %cmp673 = icmp ne i32 %377, 9
  br i1 %cmp673, label %land.lhs.true.675, label %lor.lhs.false.678

land.lhs.true.675:                                ; preds = %lor.lhs.false.672
  %378 = load i32, i32* %code, align 4
  %cmp676 = icmp ne i32 %378, 10
  br i1 %cmp676, label %if.then.681, label %lor.lhs.false.678

lor.lhs.false.678:                                ; preds = %land.lhs.true.675, %lor.lhs.false.672, %cond.end.665
  %379 = load i32, i32* %ch0, align 4
  %380 = load i32, i32* %ch1, align 4
  %call679 = call zeroext i1 @word_boundary_p(i32 %379, i32 %380)
  br i1 %call679, label %if.then.681, label %if.end.739

if.then.681:                                      ; preds = %lor.lhs.false.678, %land.lhs.true.675, %land.lhs.true.670
  br label %do.body.682

do.body.682:                                      ; preds = %if.then.681
  %381 = load i64, i64* %from.addr, align 8
  %inc683 = add nsw i64 %381, 1
  store i64 %inc683, i64* %from.addr, align 8
  %382 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_684 = getelementptr inbounds %struct.buffer, %struct.buffer* %382, i32 0, i32 39
  %383 = load i64, i64* %enable_multibyte_characters_684, align 8
  %call685 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp686 = icmp eq i64 %383, %call685
  br i1 %cmp686, label %if.then.688, label %if.else.690

if.then.688:                                      ; preds = %do.body.682
  %384 = load i64, i64* %from_byte, align 8
  %inc689 = add nsw i64 %384, 1
  store i64 %inc689, i64* %from_byte, align 8
  br label %if.end.737

if.else.690:                                      ; preds = %do.body.682
  br label %do.body.691

do.body.691:                                      ; preds = %if.else.690
  %385 = load i64, i64* %from_byte, align 8
  %386 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text693 = getelementptr inbounds %struct.buffer, %struct.buffer* %386, i32 0, i32 73
  %387 = load %struct.buffer_text*, %struct.buffer_text** %text693, align 8
  %gpt_byte694 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %387, i32 0, i32 3
  %388 = load i64, i64* %gpt_byte694, align 8
  %cmp695 = icmp sge i64 %385, %388
  br i1 %cmp695, label %cond.true.697, label %cond.false.700

cond.true.697:                                    ; preds = %do.body.691
  %389 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text698 = getelementptr inbounds %struct.buffer, %struct.buffer* %389, i32 0, i32 73
  %390 = load %struct.buffer_text*, %struct.buffer_text** %text698, align 8
  %gap_size699 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %390, i32 0, i32 5
  %391 = load i64, i64* %gap_size699, align 8
  br label %cond.end.701

cond.false.700:                                   ; preds = %do.body.691
  br label %cond.end.701

cond.end.701:                                     ; preds = %cond.false.700, %cond.true.697
  %cond702 = phi i64 [ %391, %cond.true.697 ], [ 0, %cond.false.700 ]
  %392 = load i64, i64* %from_byte, align 8
  %add703 = add nsw i64 %cond702, %392
  %393 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text704 = getelementptr inbounds %struct.buffer, %struct.buffer* %393, i32 0, i32 73
  %394 = load %struct.buffer_text*, %struct.buffer_text** %text704, align 8
  %beg705 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %394, i32 0, i32 0
  %395 = load i8*, i8** %beg705, align 8
  %add.ptr706 = getelementptr inbounds i8, i8* %395, i64 %add703
  %add.ptr707 = getelementptr inbounds i8, i8* %add.ptr706, i64 -1
  store i8* %add.ptr707, i8** %chp692, align 8
  %396 = load i8*, i8** %chp692, align 8
  %397 = load i8, i8* %396, align 1
  %conv708 = zext i8 %397 to i32
  %and709 = and i32 %conv708, 128
  %tobool710 = icmp ne i32 %and709, 0
  br i1 %tobool710, label %cond.false.712, label %cond.true.711

cond.true.711:                                    ; preds = %cond.end.701
  br label %cond.end.732

cond.false.712:                                   ; preds = %cond.end.701
  %398 = load i8*, i8** %chp692, align 8
  %399 = load i8, i8* %398, align 1
  %conv713 = zext i8 %399 to i32
  %and714 = and i32 %conv713, 32
  %tobool715 = icmp ne i32 %and714, 0
  br i1 %tobool715, label %cond.false.717, label %cond.true.716

cond.true.716:                                    ; preds = %cond.false.712
  br label %cond.end.730

cond.false.717:                                   ; preds = %cond.false.712
  %400 = load i8*, i8** %chp692, align 8
  %401 = load i8, i8* %400, align 1
  %conv718 = zext i8 %401 to i32
  %and719 = and i32 %conv718, 16
  %tobool720 = icmp ne i32 %and719, 0
  br i1 %tobool720, label %cond.false.722, label %cond.true.721

cond.true.721:                                    ; preds = %cond.false.717
  br label %cond.end.728

cond.false.722:                                   ; preds = %cond.false.717
  %402 = load i8*, i8** %chp692, align 8
  %403 = load i8, i8* %402, align 1
  %conv723 = zext i8 %403 to i32
  %and724 = and i32 %conv723, 8
  %tobool725 = icmp ne i32 %and724, 0
  %lnot726 = xor i1 %tobool725, true
  %cond727 = select i1 %lnot726, i32 4, i32 5
  br label %cond.end.728

cond.end.728:                                     ; preds = %cond.false.722, %cond.true.721
  %cond729 = phi i32 [ 3, %cond.true.721 ], [ %cond727, %cond.false.722 ]
  br label %cond.end.730

cond.end.730:                                     ; preds = %cond.end.728, %cond.true.716
  %cond731 = phi i32 [ 2, %cond.true.716 ], [ %cond729, %cond.end.728 ]
  br label %cond.end.732

cond.end.732:                                     ; preds = %cond.end.730, %cond.true.711
  %cond733 = phi i32 [ 1, %cond.true.711 ], [ %cond731, %cond.end.730 ]
  %conv734 = sext i32 %cond733 to i64
  %404 = load i64, i64* %from_byte, align 8
  %add735 = add nsw i64 %404, %conv734
  store i64 %add735, i64* %from_byte, align 8
  br label %do.end.736

do.end.736:                                       ; preds = %cond.end.732
  br label %if.end.737

if.end.737:                                       ; preds = %do.end.736, %if.then.688
  br label %do.end.738

do.end.738:                                       ; preds = %if.end.737
  br label %while.end.740

if.end.739:                                       ; preds = %lor.lhs.false.678
  %405 = load i32, i32* %ch0, align 4
  store i32 %405, i32* %ch1, align 4
  br label %while.body.533

while.end.740:                                    ; preds = %do.end.738, %if.then.536
  br label %if.end.741

if.end.741:                                       ; preds = %while.end.740, %if.end.530
  %406 = load i64, i64* %count.addr, align 8
  %inc742 = add nsw i64 %406, 1
  store i64 %inc742, i64* %count.addr, align 8
  br label %while.cond.348

while.end.743:                                    ; preds = %while.cond.348
  store i8 0, i8* @immediate_quit, align 1
  %407 = load i64, i64* %from.addr, align 8
  store i64 %407, i64* %retval
  br label %return

return:                                           ; preds = %while.end.743, %if.then.356, %if.then.10
  %408 = load i64, i64* %retval
  ret i64 %408
}

declare i64 @buf_charpos_to_bytepos(%struct.buffer*, i64) #1

declare void @process_quit_flag() #1

declare void @process_pending_signals() #1

; Function Attrs: nounwind uwtable
define internal void @SETUP_SYNTAX_TABLE(i64 %from, i64 %count) #0 {
entry:
  %from.addr = alloca i64, align 8
  %count.addr = alloca i64, align 8
  store i64 %from, i64* %from.addr, align 8
  store i64 %count, i64* %count.addr, align 8
  call void @SETUP_BUFFER_SYNTAX_TABLE()
  %0 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i32 0, i32 77
  %1 = load i64, i64* %begv, align 8
  store i64 %1, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 7), align 8
  %2 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %2, i32 0, i32 79
  %3 = load i64, i64* %zv, align 8
  %add = add nsw i64 %3, 1
  store i64 %add, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 8), align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 0), align 8
  store i64 0, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 12), align 8
  %4 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 480), align 1
  %tobool = trunc i8 %4 to i1
  br i1 %tobool, label %if.then, label %if.end.9

if.then:                                          ; preds = %entry
  %5 = load i64, i64* %count.addr, align 8
  %cmp = icmp sgt i64 %5, 0
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.then
  %6 = load i64, i64* %from.addr, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  call void @update_syntax_table_forward(i64 %6, i1 zeroext true, i64 %call2)
  br label %if.end.8

if.else:                                          ; preds = %if.then
  %7 = load i64, i64* %from.addr, align 8
  %8 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv3 = getelementptr inbounds %struct.buffer, %struct.buffer* %8, i32 0, i32 77
  %9 = load i64, i64* %begv3, align 8
  %cmp4 = icmp sgt i64 %7, %9
  br i1 %cmp4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.else
  %10 = load i64, i64* %from.addr, align 8
  %sub = sub nsw i64 %10, 1
  %11 = load i64, i64* %count.addr, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  call void @update_syntax_table(i64 %sub, i64 %11, i1 zeroext true, i64 %call6)
  %12 = load i64, i64* %from.addr, align 8
  %sub7 = sub nsw i64 %12, 1
  call void @parse_sexp_propertize(i64 %sub7)
  br label %if.end

if.end:                                           ; preds = %if.then.5, %if.else
  br label %if.end.8

if.end.8:                                         ; preds = %if.end, %if.then.1
  br label %if.end.9

if.end.9:                                         ; preds = %if.end.8, %entry
  ret void
}

declare void @UPDATE_SYNTAX_TABLE_FORWARD(i64) #1

declare i32 @FETCH_MULTIBYTE_CHAR(i64) #1

declare i64 @CHAR_TABLE_REF(i64, i32) #1

declare i64 @Ffboundp(i64) #1

declare i64 @call2(i64, i64, i64) #1

declare zeroext i1 @word_boundary_p(i32, i32) #1

declare void @UPDATE_SYNTAX_TABLE_BACKWARD(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fforward_word(i64 %arg) #0 {
entry:
  %arg.addr = alloca i64, align 8
  %tmp = alloca i64, align 8
  %orig_val = alloca i64, align 8
  %val = alloca i64, align 8
  store i64 %arg, i64* %arg.addr, align 8
  %0 = load i64, i64* %arg.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call3 = call i64 @make_natnum(i64 1)
  store i64 %call3, i64* %arg.addr, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %1 = load i64, i64* %arg.addr, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %and4 = and i32 %conv, -5
  %cmp5 = icmp eq i32 %and4, 2
  br i1 %cmp5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %call7 = call i64 @builtin_lisp_symbol(i32 559)
  %2 = load i64, i64* %arg.addr, align 8
  %3 = call i64 @wrong_type_argument(i64 %call7, i64 %2) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %4, %cond.true
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  %5 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt = getelementptr inbounds %struct.buffer, %struct.buffer* %5, i32 0, i32 75
  %6 = load i64, i64* %pt, align 8
  %add = add nsw i64 %6, 0
  %7 = load i64, i64* %arg.addr, align 8
  %shr = ashr i64 %7, 2
  %call8 = call i64 @scan_words(i64 %add, i64 %shr)
  store i64 %call8, i64* %orig_val, align 8
  store i64 %call8, i64* %val, align 8
  %8 = load i64, i64* %orig_val, align 8
  %tobool = icmp ne i64 %8, 0
  br i1 %tobool, label %if.end.16, label %if.then.9

if.then.9:                                        ; preds = %if.end
  %9 = load i64, i64* %arg.addr, align 8
  %shr10 = ashr i64 %9, 2
  %cmp11 = icmp sgt i64 %shr10, 0
  br i1 %cmp11, label %cond.true.13, label %cond.false.14

cond.true.13:                                     ; preds = %if.then.9
  %10 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %10, i32 0, i32 79
  %11 = load i64, i64* %zv, align 8
  br label %cond.end.15

cond.false.14:                                    ; preds = %if.then.9
  %12 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %12, i32 0, i32 77
  %13 = load i64, i64* %begv, align 8
  br label %cond.end.15

cond.end.15:                                      ; preds = %cond.false.14, %cond.true.13
  %cond = phi i64 [ %11, %cond.true.13 ], [ %13, %cond.false.14 ]
  store i64 %cond, i64* %val, align 8
  br label %if.end.16

if.end.16:                                        ; preds = %cond.end.15, %if.end
  %14 = load i64, i64* %val, align 8
  %shl = shl i64 %14, 2
  %add17 = add i64 %shl, 2
  %15 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt18 = getelementptr inbounds %struct.buffer, %struct.buffer* %15, i32 0, i32 75
  %16 = load i64, i64* %pt18, align 8
  %add19 = add nsw i64 %16, 0
  %shl20 = shl i64 %add19, 2
  %add21 = add i64 %shl20, 2
  %call22 = call i64 @builtin_lisp_symbol(i32 0)
  %call23 = call i64 @builtin_lisp_symbol(i32 0)
  %call24 = call i64 @builtin_lisp_symbol(i32 0)
  %call25 = call i64 @Fconstrain_to_field(i64 %add17, i64 %add21, i64 %call22, i64 %call23, i64 %call24)
  store i64 %call25, i64* %tmp, align 8
  %17 = load i64, i64* %tmp, align 8
  %shr26 = ashr i64 %17, 2
  store i64 %shr26, i64* %val, align 8
  %18 = load i64, i64* %val, align 8
  call void @set_point(i64 %18)
  %19 = load i64, i64* %val, align 8
  %20 = load i64, i64* %orig_val, align 8
  %cmp27 = icmp eq i64 %19, %20
  br i1 %cmp27, label %cond.true.29, label %cond.false.31

cond.true.29:                                     ; preds = %if.end.16
  %call30 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.33

cond.false.31:                                    ; preds = %if.end.16
  %call32 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.33

cond.end.33:                                      ; preds = %cond.false.31, %cond.true.29
  %cond34 = phi i64 [ %call30, %cond.true.29 ], [ %call32, %cond.false.31 ]
  ret i64 %cond34
}

declare i64 @make_natnum(i64) #1

declare i64 @Fconstrain_to_field(i64, i64, i64, i64, i64) #1

declare void @set_point(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fskip_chars_forward(i64 %string, i64 %lim) #0 {
entry:
  %string.addr = alloca i64, align 8
  %lim.addr = alloca i64, align 8
  store i64 %string, i64* %string.addr, align 8
  store i64 %lim, i64* %lim.addr, align 8
  %0 = load i64, i64* %string.addr, align 8
  %1 = load i64, i64* %lim.addr, align 8
  %call = call i64 @skip_chars(i1 zeroext true, i64 %0, i64 %1, i1 zeroext true)
  ret i64 %call
}

; Function Attrs: nounwind uwtable
define internal i64 @skip_chars(i1 zeroext %forwardp, i64 %string, i64 %lim, i1 zeroext %handle_iso_classes) #0 {
entry:
  %forwardp.addr = alloca i8, align 1
  %string.addr = alloca i64, align 8
  %lim.addr = alloca i64, align 8
  %handle_iso_classes.addr = alloca i8, align 1
  %c = alloca i32, align 4
  %fastmap = alloca [256 x i8], align 16
  %char_ranges = alloca i32*, align 8
  %n_char_ranges = alloca i32, align 4
  %negate = alloca i8, align 1
  %i = alloca i64, align 8
  %i_byte = alloca i64, align 8
  %multibyte = alloca i8, align 1
  %string_multibyte = alloca i8, align 1
  %size_byte = alloca i64, align 8
  %str = alloca i8*, align 8
  %len = alloca i32, align 4
  %iso_classes = alloca i64, align 8
  %sa_avail = alloca i64, align 8
  %sa_count = alloca i64, align 8
  %sa_must_free = alloca i8, align 1
  %string_has_eight_bit = alloca i8, align 1
  %class_beg = alloca i8*, align 8
  %class_end = alloca i8*, align 8
  %class_limit = alloca i8*, align 8
  %class_name = alloca [10 x i8], align 1
  %cc = alloca i32, align 4
  %c2 = alloca i32, align 4
  %lim2 = alloca i32, align 4
  %p1 = alloca i8*, align 8
  %himap = alloca [129 x i8], align 16
  %c2241 = alloca i32, align 4
  %leading_code = alloca i32, align 4
  %leading_code366 = alloca i32, align 4
  %class_beg513 = alloca i8*, align 8
  %class_end516 = alloca i8*, align 8
  %class_limit517 = alloca i8*, align 8
  %class_name520 = alloca [10 x i8], align 1
  %cc521 = alloca i32, align 4
  %c2666 = alloca i32, align 4
  %leading_code2 = alloca i32, align 4
  %lim2889 = alloca i32, align 4
  %c1 = alloca i32, align 4
  %lim2946 = alloca i32, align 4
  %b = alloca i32, align 4
  %start_point = alloca i64, align 8
  %pos = alloca i64, align 8
  %pos_byte = alloca i64, align 8
  %p = alloca i8*, align 8
  %endp = alloca i8*, align 8
  %stop = alloca i8*, align 8
  %nbytes = alloca i32, align 4
  %prev_p = alloca i8*, align 8
  %frombool = zext i1 %forwardp to i8
  store i8 %frombool, i8* %forwardp.addr, align 1
  store i64 %string, i64* %string.addr, align 8
  store i64 %lim, i64* %lim.addr, align 8
  %frombool1 = zext i1 %handle_iso_classes to i8
  store i8 %frombool1, i8* %handle_iso_classes.addr, align 1
  store i32 0, i32* %n_char_ranges, align 4
  store i8 0, i8* %negate, align 1
  store i64 16384, i64* %sa_avail, align 8
  %call = call i64 @SPECPDL_INDEX()
  store i64 %call, i64* %sa_count, align 8
  store i8 0, i8* %sa_must_free, align 1
  %0 = load i64, i64* %string.addr, align 8
  call void @CHECK_STRING(i64 %0)
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call2, i64* %iso_classes, align 8
  %1 = load i64, i64* %lim.addr, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i8, i8* %forwardp.addr, align 1
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %3 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %3, i32 0, i32 79
  %4 = load i64, i64* %zv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %5 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %5, i32 0, i32 77
  %6 = load i64, i64* %begv, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %4, %cond.true ], [ %6, %cond.false ]
  %shl = shl i64 %cond, 2
  %add = add i64 %shl, 2
  store i64 %add, i64* %lim.addr, align 8
  br label %if.end.22

if.else:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.else
  %7 = load i64, i64* %lim.addr, align 8
  %and = and i64 %7, 7
  %conv = trunc i64 %and to i32
  %cmp4 = icmp eq i32 %conv, 1
  br i1 %cmp4, label %land.lhs.true, label %if.else.12

land.lhs.true:                                    ; preds = %do.body
  %8 = load i64, i64* %lim.addr, align 8
  %call6 = call i32 @XMISCTYPE(i64 %8)
  %cmp7 = icmp eq i32 %call6, 24236
  br i1 %cmp7, label %if.then.9, label %if.else.12

if.then.9:                                        ; preds = %land.lhs.true
  %9 = load i64, i64* %lim.addr, align 8
  %call10 = call i64 @marker_position(i64 %9)
  %call11 = call i64 @make_natnum(i64 %call10)
  store i64 %call11, i64* %lim.addr, align 8
  br label %if.end

if.else.12:                                       ; preds = %land.lhs.true, %do.body
  %10 = load i64, i64* %lim.addr, align 8
  %and13 = and i64 %10, 7
  %conv14 = trunc i64 %and13 to i32
  %and15 = and i32 %conv14, -5
  %cmp16 = icmp eq i32 %and15, 2
  br i1 %cmp16, label %cond.true.18, label %cond.false.19

cond.true.18:                                     ; preds = %if.else.12
  br label %cond.end.21

cond.false.19:                                    ; preds = %if.else.12
  %call20 = call i64 @builtin_lisp_symbol(i32 558)
  %11 = load i64, i64* %lim.addr, align 8
  %12 = call i64 @wrong_type_argument(i64 %call20, i64 %11) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end.21

cond.end.21:                                      ; preds = %13, %cond.true.18
  br label %if.end

if.end:                                           ; preds = %cond.end.21, %if.then.9
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.22

if.end.22:                                        ; preds = %do.end, %cond.end
  %14 = load i64, i64* %lim.addr, align 8
  %shr = ashr i64 %14, 2
  %15 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv23 = getelementptr inbounds %struct.buffer, %struct.buffer* %15, i32 0, i32 79
  %16 = load i64, i64* %zv23, align 8
  %cmp24 = icmp sgt i64 %shr, %16
  br i1 %cmp24, label %if.then.26, label %if.end.29

if.then.26:                                       ; preds = %if.end.22
  %17 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv27 = getelementptr inbounds %struct.buffer, %struct.buffer* %17, i32 0, i32 79
  %18 = load i64, i64* %zv27, align 8
  %call28 = call i64 @make_natnum(i64 %18)
  store i64 %call28, i64* %lim.addr, align 8
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.26, %if.end.22
  %19 = load i64, i64* %lim.addr, align 8
  %shr30 = ashr i64 %19, 2
  %20 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv31 = getelementptr inbounds %struct.buffer, %struct.buffer* %20, i32 0, i32 77
  %21 = load i64, i64* %begv31, align 8
  %cmp32 = icmp slt i64 %shr30, %21
  br i1 %cmp32, label %if.then.34, label %if.end.37

if.then.34:                                       ; preds = %if.end.29
  %22 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv35 = getelementptr inbounds %struct.buffer, %struct.buffer* %22, i32 0, i32 77
  %23 = load i64, i64* %begv35, align 8
  %call36 = call i64 @make_natnum(i64 %23)
  store i64 %call36, i64* %lim.addr, align 8
  br label %if.end.37

if.end.37:                                        ; preds = %if.then.34, %if.end.29
  %24 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %24, i32 0, i32 39
  %25 = load i64, i64* %enable_multibyte_characters_, align 8
  %call38 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp39 = icmp eq i64 %25, %call38
  br i1 %cmp39, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end.37
  %26 = load i64, i64* %lim.addr, align 8
  %shr41 = ashr i64 %26, 2
  %27 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt = getelementptr inbounds %struct.buffer, %struct.buffer* %27, i32 0, i32 75
  %28 = load i64, i64* %pt, align 8
  %add42 = add nsw i64 %28, 0
  %sub = sub nsw i64 %shr41, %add42
  %29 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %30 = load i64, i64* %lim.addr, align 8
  %shr43 = ashr i64 %30, 2
  %call44 = call i64 @buf_charpos_to_bytepos(%struct.buffer* %29, i64 %shr43)
  %31 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %31, i32 0, i32 76
  %32 = load i64, i64* %pt_byte, align 8
  %add45 = add nsw i64 %32, 0
  %sub46 = sub nsw i64 %call44, %add45
  %cmp47 = icmp ne i64 %sub, %sub46
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end.37
  %33 = phi i1 [ false, %if.end.37 ], [ %cmp47, %land.rhs ]
  %frombool49 = zext i1 %33 to i8
  store i8 %frombool49, i8* %multibyte, align 1
  %34 = load i64, i64* %string.addr, align 8
  %call50 = call i64 @SBYTES(i64 %34)
  %35 = load i64, i64* %string.addr, align 8
  %call51 = call i64 @SCHARS(i64 %35)
  %cmp52 = icmp sgt i64 %call50, %call51
  %frombool54 = zext i1 %cmp52 to i8
  store i8 %frombool54, i8* %string_multibyte, align 1
  %36 = bitcast [256 x i8]* %fastmap to i8*
  call void @llvm.memset.p0i8.i64(i8* %36, i8 0, i64 256, i32 16, i1 false)
  %37 = load i64, i64* %string.addr, align 8
  %call55 = call i8* @SDATA(i64 %37)
  store i8* %call55, i8** %str, align 8
  %38 = load i64, i64* %string.addr, align 8
  %call56 = call i64 @SBYTES(i64 %38)
  store i64 %call56, i64* %size_byte, align 8
  store i64 0, i64* %i_byte, align 8
  %39 = load i64, i64* %i_byte, align 8
  %40 = load i64, i64* %size_byte, align 8
  %cmp57 = icmp slt i64 %39, %40
  br i1 %cmp57, label %land.lhs.true.59, label %if.end.65

land.lhs.true.59:                                 ; preds = %land.end
  %41 = load i64, i64* %string.addr, align 8
  %call60 = call zeroext i8 @SREF(i64 %41, i64 0)
  %conv61 = zext i8 %call60 to i32
  %cmp62 = icmp eq i32 %conv61, 94
  br i1 %cmp62, label %if.then.64, label %if.end.65

if.then.64:                                       ; preds = %land.lhs.true.59
  store i8 1, i8* %negate, align 1
  %42 = load i64, i64* %i_byte, align 8
  %inc = add nsw i64 %42, 1
  store i64 %inc, i64* %i_byte, align 8
  br label %if.end.65

if.end.65:                                        ; preds = %if.then.64, %land.lhs.true.59, %land.end
  %43 = load i8, i8* %string_multibyte, align 1
  %tobool66 = trunc i8 %43 to i1
  br i1 %tobool66, label %if.else.345, label %if.then.67

if.then.67:                                       ; preds = %if.end.65
  store i8 0, i8* %string_has_eight_bit, align 1
  br label %while.cond

while.cond:                                       ; preds = %if.end.211, %if.end.130, %if.then.67
  %44 = load i64, i64* %i_byte, align 8
  %45 = load i64, i64* %size_byte, align 8
  %cmp68 = icmp slt i64 %44, %45
  br i1 %cmp68, label %while.body, label %while.end.212

while.body:                                       ; preds = %while.cond
  %46 = load i64, i64* %i_byte, align 8
  %inc70 = add nsw i64 %46, 1
  store i64 %inc70, i64* %i_byte, align 8
  %47 = load i8*, i8** %str, align 8
  %arrayidx = getelementptr inbounds i8, i8* %47, i64 %46
  %48 = load i8, i8* %arrayidx, align 1
  %conv71 = zext i8 %48 to i32
  store i32 %conv71, i32* %c, align 4
  %49 = load i8, i8* %handle_iso_classes.addr, align 1
  %tobool72 = trunc i8 %49 to i1
  br i1 %tobool72, label %land.lhs.true.74, label %if.end.139

land.lhs.true.74:                                 ; preds = %while.body
  %50 = load i32, i32* %c, align 4
  %cmp75 = icmp eq i32 %50, 91
  br i1 %cmp75, label %land.lhs.true.77, label %if.end.139

land.lhs.true.77:                                 ; preds = %land.lhs.true.74
  %51 = load i64, i64* %i_byte, align 8
  %52 = load i64, i64* %size_byte, align 8
  %cmp78 = icmp slt i64 %51, %52
  br i1 %cmp78, label %land.lhs.true.80, label %if.end.139

land.lhs.true.80:                                 ; preds = %land.lhs.true.77
  %53 = load i64, i64* %i_byte, align 8
  %54 = load i8*, i8** %str, align 8
  %arrayidx81 = getelementptr inbounds i8, i8* %54, i64 %53
  %55 = load i8, i8* %arrayidx81, align 1
  %conv82 = zext i8 %55 to i32
  %cmp83 = icmp eq i32 %conv82, 58
  br i1 %cmp83, label %if.then.85, label %if.end.139

if.then.85:                                       ; preds = %land.lhs.true.80
  %56 = load i8*, i8** %str, align 8
  %57 = load i64, i64* %i_byte, align 8
  %add.ptr = getelementptr inbounds i8, i8* %56, i64 %57
  %add.ptr86 = getelementptr inbounds i8, i8* %add.ptr, i64 1
  store i8* %add.ptr86, i8** %class_beg, align 8
  %58 = load i8*, i8** %class_beg, align 8
  store i8* %58, i8** %class_end, align 8
  %59 = load i8*, i8** %str, align 8
  %60 = load i64, i64* %size_byte, align 8
  %add.ptr87 = getelementptr inbounds i8, i8* %59, i64 %60
  %add.ptr88 = getelementptr inbounds i8, i8* %add.ptr87, i64 -2
  store i8* %add.ptr88, i8** %class_limit, align 8
  %61 = load i8*, i8** %class_limit, align 8
  %62 = load i8*, i8** %class_beg, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %61 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %62 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp89 = icmp sgt i64 %sub.ptr.sub, 9
  br i1 %cmp89, label %if.then.91, label %if.end.93

if.then.91:                                       ; preds = %if.then.85
  %63 = load i8*, i8** %class_beg, align 8
  %add.ptr92 = getelementptr inbounds i8, i8* %63, i64 9
  store i8* %add.ptr92, i8** %class_limit, align 8
  br label %if.end.93

if.end.93:                                        ; preds = %if.then.91, %if.then.85
  br label %while.cond.94

while.cond.94:                                    ; preds = %while.body.106, %if.end.93
  %64 = load i8*, i8** %class_end, align 8
  %65 = load i8*, i8** %class_limit, align 8
  %cmp95 = icmp ult i8* %64, %65
  br i1 %cmp95, label %land.lhs.true.97, label %land.end.105

land.lhs.true.97:                                 ; preds = %while.cond.94
  %66 = load i8*, i8** %class_end, align 8
  %67 = load i8, i8* %66, align 1
  %conv98 = zext i8 %67 to i32
  %cmp99 = icmp sge i32 %conv98, 97
  br i1 %cmp99, label %land.rhs.101, label %land.end.105

land.rhs.101:                                     ; preds = %land.lhs.true.97
  %68 = load i8*, i8** %class_end, align 8
  %69 = load i8, i8* %68, align 1
  %conv102 = zext i8 %69 to i32
  %cmp103 = icmp sle i32 %conv102, 122
  br label %land.end.105

land.end.105:                                     ; preds = %land.rhs.101, %land.lhs.true.97, %while.cond.94
  %70 = phi i1 [ false, %land.lhs.true.97 ], [ false, %while.cond.94 ], [ %cmp103, %land.rhs.101 ]
  br i1 %70, label %while.body.106, label %while.end

while.body.106:                                   ; preds = %land.end.105
  %71 = load i8*, i8** %class_end, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %71, i32 1
  store i8* %incdec.ptr, i8** %class_end, align 8
  br label %while.cond.94

while.end:                                        ; preds = %land.end.105
  %72 = load i8*, i8** %class_end, align 8
  %73 = load i8*, i8** %class_beg, align 8
  %cmp107 = icmp eq i8* %72, %73
  br i1 %cmp107, label %if.then.117, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.end
  %74 = load i8*, i8** %class_end, align 8
  %75 = load i8, i8* %74, align 1
  %conv109 = zext i8 %75 to i32
  %cmp110 = icmp ne i32 %conv109, 58
  br i1 %cmp110, label %if.then.117, label %lor.lhs.false.112

lor.lhs.false.112:                                ; preds = %lor.lhs.false
  %76 = load i8*, i8** %class_end, align 8
  %arrayidx113 = getelementptr inbounds i8, i8* %76, i64 1
  %77 = load i8, i8* %arrayidx113, align 1
  %conv114 = zext i8 %77 to i32
  %cmp115 = icmp ne i32 %conv114, 93
  br i1 %cmp115, label %if.then.117, label %if.end.118

if.then.117:                                      ; preds = %lor.lhs.false.112, %lor.lhs.false, %while.end
  br label %not_a_class_name

if.end.118:                                       ; preds = %lor.lhs.false.112
  %78 = bitcast [10 x i8]* %class_name to i8*
  %79 = load i8*, i8** %class_beg, align 8
  %80 = load i8*, i8** %class_end, align 8
  %81 = load i8*, i8** %class_beg, align 8
  %sub.ptr.lhs.cast119 = ptrtoint i8* %80 to i64
  %sub.ptr.rhs.cast120 = ptrtoint i8* %81 to i64
  %sub.ptr.sub121 = sub i64 %sub.ptr.lhs.cast119, %sub.ptr.rhs.cast120
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %78, i8* %79, i64 %sub.ptr.sub121, i32 1, i1 false)
  %82 = load i8*, i8** %class_end, align 8
  %83 = load i8*, i8** %class_beg, align 8
  %sub.ptr.lhs.cast122 = ptrtoint i8* %82 to i64
  %sub.ptr.rhs.cast123 = ptrtoint i8* %83 to i64
  %sub.ptr.sub124 = sub i64 %sub.ptr.lhs.cast122, %sub.ptr.rhs.cast123
  %arrayidx125 = getelementptr inbounds [10 x i8], [10 x i8]* %class_name, i32 0, i64 %sub.ptr.sub124
  store i8 0, i8* %arrayidx125, align 1
  %arraydecay = getelementptr inbounds [10 x i8], [10 x i8]* %class_name, i32 0, i32 0
  %call126 = call i32 @re_wctype(i8* %arraydecay)
  store i32 %call126, i32* %cc, align 4
  %84 = load i32, i32* %cc, align 4
  %cmp127 = icmp eq i32 %84, 0
  br i1 %cmp127, label %if.then.129, label %if.end.130

if.then.129:                                      ; preds = %if.end.118
  call void (i8*, ...) @error(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60, i32 0, i32 0)) #5
  unreachable

if.end.130:                                       ; preds = %if.end.118
  %85 = load i32, i32* %cc, align 4
  %conv131 = zext i32 %85 to i64
  %shl132 = shl i64 %conv131, 2
  %add133 = add i64 %shl132, 2
  %86 = load i64, i64* %iso_classes, align 8
  %call134 = call i64 @Fcons(i64 %add133, i64 %86)
  store i64 %call134, i64* %iso_classes, align 8
  %87 = load i8*, i8** %class_end, align 8
  %add.ptr135 = getelementptr inbounds i8, i8* %87, i64 2
  %88 = load i8*, i8** %str, align 8
  %sub.ptr.lhs.cast136 = ptrtoint i8* %add.ptr135 to i64
  %sub.ptr.rhs.cast137 = ptrtoint i8* %88 to i64
  %sub.ptr.sub138 = sub i64 %sub.ptr.lhs.cast136, %sub.ptr.rhs.cast137
  store i64 %sub.ptr.sub138, i64* %i_byte, align 8
  br label %while.cond

if.end.139:                                       ; preds = %land.lhs.true.80, %land.lhs.true.77, %land.lhs.true.74, %while.body
  br label %not_a_class_name

not_a_class_name:                                 ; preds = %if.end.139, %if.then.117
  %89 = load i32, i32* %c, align 4
  %cmp140 = icmp eq i32 %89, 92
  br i1 %cmp140, label %if.then.142, label %if.end.150

if.then.142:                                      ; preds = %not_a_class_name
  %90 = load i64, i64* %i_byte, align 8
  %91 = load i64, i64* %size_byte, align 8
  %cmp143 = icmp eq i64 %90, %91
  br i1 %cmp143, label %if.then.145, label %if.end.146

if.then.145:                                      ; preds = %if.then.142
  br label %while.end.212

if.end.146:                                       ; preds = %if.then.142
  %92 = load i64, i64* %i_byte, align 8
  %inc147 = add nsw i64 %92, 1
  store i64 %inc147, i64* %i_byte, align 8
  %93 = load i8*, i8** %str, align 8
  %arrayidx148 = getelementptr inbounds i8, i8* %93, i64 %92
  %94 = load i8, i8* %arrayidx148, align 1
  %conv149 = zext i8 %94 to i32
  store i32 %conv149, i32* %c, align 4
  br label %if.end.150

if.end.150:                                       ; preds = %if.end.146, %not_a_class_name
  %95 = load i64, i64* %i_byte, align 8
  %add151 = add nsw i64 %95, 1
  %96 = load i64, i64* %size_byte, align 8
  %cmp152 = icmp slt i64 %add151, %96
  br i1 %cmp152, label %land.lhs.true.154, label %if.else.197

land.lhs.true.154:                                ; preds = %if.end.150
  %97 = load i64, i64* %i_byte, align 8
  %98 = load i8*, i8** %str, align 8
  %arrayidx155 = getelementptr inbounds i8, i8* %98, i64 %97
  %99 = load i8, i8* %arrayidx155, align 1
  %conv156 = zext i8 %99 to i32
  %cmp157 = icmp eq i32 %conv156, 45
  br i1 %cmp157, label %if.then.159, label %if.else.197

if.then.159:                                      ; preds = %land.lhs.true.154
  %100 = load i64, i64* %i_byte, align 8
  %inc160 = add nsw i64 %100, 1
  store i64 %inc160, i64* %i_byte, align 8
  %101 = load i64, i64* %i_byte, align 8
  %inc161 = add nsw i64 %101, 1
  store i64 %inc161, i64* %i_byte, align 8
  %102 = load i8*, i8** %str, align 8
  %arrayidx162 = getelementptr inbounds i8, i8* %102, i64 %101
  %103 = load i8, i8* %arrayidx162, align 1
  %conv163 = zext i8 %103 to i32
  store i32 %conv163, i32* %c2, align 4
  %104 = load i32, i32* %c2, align 4
  %cmp164 = icmp eq i32 %104, 92
  br i1 %cmp164, label %land.lhs.true.166, label %if.end.173

land.lhs.true.166:                                ; preds = %if.then.159
  %105 = load i64, i64* %i_byte, align 8
  %106 = load i64, i64* %size_byte, align 8
  %cmp167 = icmp slt i64 %105, %106
  br i1 %cmp167, label %if.then.169, label %if.end.173

if.then.169:                                      ; preds = %land.lhs.true.166
  %107 = load i64, i64* %i_byte, align 8
  %inc170 = add nsw i64 %107, 1
  store i64 %inc170, i64* %i_byte, align 8
  %108 = load i8*, i8** %str, align 8
  %arrayidx171 = getelementptr inbounds i8, i8* %108, i64 %107
  %109 = load i8, i8* %arrayidx171, align 1
  %conv172 = zext i8 %109 to i32
  store i32 %conv172, i32* %c2, align 4
  br label %if.end.173

if.end.173:                                       ; preds = %if.then.169, %land.lhs.true.166, %if.then.159
  %110 = load i32, i32* %c, align 4
  %111 = load i32, i32* %c2, align 4
  %cmp174 = icmp sle i32 %110, %111
  br i1 %cmp174, label %if.then.176, label %if.end.196

if.then.176:                                      ; preds = %if.end.173
  %112 = load i32, i32* %c2, align 4
  %add177 = add nsw i32 %112, 1
  store i32 %add177, i32* %lim2, align 4
  br label %while.cond.178

while.cond.178:                                   ; preds = %while.body.181, %if.then.176
  %113 = load i32, i32* %c, align 4
  %114 = load i32, i32* %lim2, align 4
  %cmp179 = icmp slt i32 %113, %114
  br i1 %cmp179, label %while.body.181, label %while.end.184

while.body.181:                                   ; preds = %while.cond.178
  %115 = load i32, i32* %c, align 4
  %inc182 = add nsw i32 %115, 1
  store i32 %inc182, i32* %c, align 4
  %idxprom = sext i32 %115 to i64
  %arrayidx183 = getelementptr inbounds [256 x i8], [256 x i8]* %fastmap, i32 0, i64 %idxprom
  store i8 1, i8* %arrayidx183, align 1
  br label %while.cond.178

while.end.184:                                    ; preds = %while.cond.178
  br i1 true, label %cond.true.185, label %cond.false.189

cond.true.185:                                    ; preds = %while.end.184
  %116 = load i32, i32* %c2, align 4
  %add186 = add i32 %116, 0
  %cmp187 = icmp ult i32 %add186, 128
  br i1 %cmp187, label %if.end.195, label %if.then.194

cond.false.189:                                   ; preds = %while.end.184
  %117 = load i32, i32* %c2, align 4
  %conv190 = sext i32 %117 to i64
  %add191 = add i64 %conv190, 0
  %cmp192 = icmp ult i64 %add191, 128
  br i1 %cmp192, label %if.end.195, label %if.then.194

if.then.194:                                      ; preds = %cond.false.189, %cond.true.185
  store i8 1, i8* %string_has_eight_bit, align 1
  br label %if.end.195

if.end.195:                                       ; preds = %if.then.194, %cond.false.189, %cond.true.185
  br label %if.end.196

if.end.196:                                       ; preds = %if.end.195, %if.end.173
  br label %if.end.211

if.else.197:                                      ; preds = %land.lhs.true.154, %if.end.150
  %118 = load i32, i32* %c, align 4
  %idxprom198 = sext i32 %118 to i64
  %arrayidx199 = getelementptr inbounds [256 x i8], [256 x i8]* %fastmap, i32 0, i64 %idxprom198
  store i8 1, i8* %arrayidx199, align 1
  br i1 true, label %cond.true.200, label %cond.false.204

cond.true.200:                                    ; preds = %if.else.197
  %119 = load i32, i32* %c, align 4
  %add201 = add i32 %119, 0
  %cmp202 = icmp ult i32 %add201, 128
  br i1 %cmp202, label %if.end.210, label %if.then.209

cond.false.204:                                   ; preds = %if.else.197
  %120 = load i32, i32* %c, align 4
  %conv205 = sext i32 %120 to i64
  %add206 = add i64 %conv205, 0
  %cmp207 = icmp ult i64 %add206, 128
  br i1 %cmp207, label %if.end.210, label %if.then.209

if.then.209:                                      ; preds = %cond.false.204, %cond.true.200
  store i8 1, i8* %string_has_eight_bit, align 1
  br label %if.end.210

if.end.210:                                       ; preds = %if.then.209, %cond.false.204, %cond.true.200
  br label %if.end.211

if.end.211:                                       ; preds = %if.end.210, %if.end.196
  br label %while.cond

while.end.212:                                    ; preds = %if.then.145, %while.cond
  %121 = load i8, i8* %multibyte, align 1
  %tobool213 = trunc i8 %121 to i1
  br i1 %tobool213, label %land.lhs.true.215, label %if.end.344

land.lhs.true.215:                                ; preds = %while.end.212
  %122 = load i8, i8* %string_has_eight_bit, align 1
  %tobool216 = trunc i8 %122 to i1
  br i1 %tobool216, label %if.then.218, label %if.end.344

if.then.218:                                      ; preds = %land.lhs.true.215
  %123 = bitcast [129 x i8]* %himap to i8*
  %arraydecay219 = getelementptr inbounds [256 x i8], [256 x i8]* %fastmap, i32 0, i32 0
  %add.ptr220 = getelementptr inbounds i8, i8* %arraydecay219, i64 128
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %123, i8* %add.ptr220, i64 128, i32 1, i1 false)
  %arrayidx221 = getelementptr inbounds [129 x i8], [129 x i8]* %himap, i32 0, i64 128
  store i8 0, i8* %arrayidx221, align 1
  %arraydecay222 = getelementptr inbounds [256 x i8], [256 x i8]* %fastmap, i32 0, i32 0
  %add.ptr223 = getelementptr inbounds i8, i8* %arraydecay222, i64 128
  call void @llvm.memset.p0i8.i64(i8* %add.ptr223, i8 0, i64 128, i32 1, i1 false)
  br label %do.body.224

do.body.224:                                      ; preds = %if.then.218
  %124 = load i64, i64* %sa_avail, align 8
  %div = udiv i64 %124, 4
  %div225 = udiv i64 %div, 2
  %cmp226 = icmp ule i64 128, %div225
  br i1 %cmp226, label %if.then.228, label %if.else.230

if.then.228:                                      ; preds = %do.body.224
  %125 = load i64, i64* %sa_avail, align 8
  %sub229 = sub i64 %125, 1024
  store i64 %sub229, i64* %sa_avail, align 8
  %126 = alloca i8, i64 1024
  %127 = bitcast i8* %126 to i32*
  store i32* %127, i32** %char_ranges, align 8
  br label %if.end.232

if.else.230:                                      ; preds = %do.body.224
  %call231 = call noalias i8* @xnmalloc(i64 128, i64 8)
  %128 = bitcast i8* %call231 to i32*
  store i32* %128, i32** %char_ranges, align 8
  store i8 1, i8* %sa_must_free, align 1
  %129 = load i32*, i32** %char_ranges, align 8
  %130 = bitcast i32* %129 to i8*
  call void @record_unwind_protect_ptr(void (i8*)* @xfree, i8* %130)
  br label %if.end.232

if.end.232:                                       ; preds = %if.else.230, %if.then.228
  br label %do.end.233

do.end.233:                                       ; preds = %if.end.232
  store i64 0, i64* %i, align 8
  br label %while.cond.234

while.cond.234:                                   ; preds = %cond.end.338, %do.end.233
  %arraydecay235 = getelementptr inbounds [129 x i8], [129 x i8]* %himap, i32 0, i32 0
  %131 = load i64, i64* %i, align 8
  %add.ptr236 = getelementptr inbounds i8, i8* %arraydecay235, i64 %131
  %132 = load i64, i64* %i, align 8
  %sub237 = sub nsw i64 128, %132
  %call238 = call i8* @memchr(i8* %add.ptr236, i32 1, i64 %sub237) #6
  store i8* %call238, i8** %p1, align 8
  %tobool239 = icmp ne i8* %call238, null
  br i1 %tobool239, label %while.body.240, label %while.end.343

while.body.240:                                   ; preds = %while.cond.234
  %133 = load i8*, i8** %p1, align 8
  %arraydecay242 = getelementptr inbounds [129 x i8], [129 x i8]* %himap, i32 0, i32 0
  %sub.ptr.lhs.cast243 = ptrtoint i8* %133 to i64
  %sub.ptr.rhs.cast244 = ptrtoint i8* %arraydecay242 to i64
  %sub.ptr.sub245 = sub i64 %sub.ptr.lhs.cast243, %sub.ptr.rhs.cast244
  store i64 %sub.ptr.sub245, i64* %i, align 8
  %134 = load i64, i64* %i, align 8
  %add246 = add nsw i64 %134, 128
  %add247 = add nsw i64 %add246, 4194048
  %conv248 = trunc i64 %add247 to i32
  store i32 %conv248, i32* %c, align 4
  %135 = load i8*, i8** %p1, align 8
  %call249 = call i64 @strlen(i8* %135) #6
  %136 = load i64, i64* %i, align 8
  %add250 = add i64 %136, %call249
  store i64 %add250, i64* %i, align 8
  %137 = load i64, i64* %i, align 8
  %add251 = add nsw i64 %137, 128
  %sub252 = sub nsw i64 %add251, 1
  %add253 = add nsw i64 %sub252, 4194048
  %conv254 = trunc i64 %add253 to i32
  store i32 %conv254, i32* %c2241, align 4
  %138 = load i32, i32* %c, align 4
  %139 = load i32, i32* %n_char_ranges, align 4
  %inc255 = add nsw i32 %139, 1
  store i32 %inc255, i32* %n_char_ranges, align 4
  %idxprom256 = sext i32 %139 to i64
  %140 = load i32*, i32** %char_ranges, align 8
  %arrayidx257 = getelementptr inbounds i32, i32* %140, i64 %idxprom256
  store i32 %138, i32* %arrayidx257, align 4
  %141 = load i32, i32* %c2241, align 4
  %142 = load i32, i32* %n_char_ranges, align 4
  %inc258 = add nsw i32 %142, 1
  store i32 %inc258, i32* %n_char_ranges, align 4
  %idxprom259 = sext i32 %142 to i64
  %143 = load i32*, i32** %char_ranges, align 8
  %arrayidx260 = getelementptr inbounds i32, i32* %143, i64 %idxprom259
  store i32 %141, i32* %arrayidx260, align 4
  %144 = load i32, i32* %c, align 4
  %cmp261 = icmp sle i32 %144, 127
  br i1 %cmp261, label %cond.true.263, label %cond.false.264

cond.true.263:                                    ; preds = %while.body.240
  %145 = load i32, i32* %c, align 4
  br label %cond.end.297

cond.false.264:                                   ; preds = %while.body.240
  %146 = load i32, i32* %c, align 4
  %cmp265 = icmp sle i32 %146, 2047
  br i1 %cmp265, label %cond.true.267, label %cond.false.269

cond.true.267:                                    ; preds = %cond.false.264
  %147 = load i32, i32* %c, align 4
  %shr268 = ashr i32 %147, 6
  %or = or i32 192, %shr268
  br label %cond.end.295

cond.false.269:                                   ; preds = %cond.false.264
  %148 = load i32, i32* %c, align 4
  %cmp270 = icmp sle i32 %148, 65535
  br i1 %cmp270, label %cond.true.272, label %cond.false.275

cond.true.272:                                    ; preds = %cond.false.269
  %149 = load i32, i32* %c, align 4
  %shr273 = ashr i32 %149, 12
  %or274 = or i32 224, %shr273
  br label %cond.end.293

cond.false.275:                                   ; preds = %cond.false.269
  %150 = load i32, i32* %c, align 4
  %cmp276 = icmp sle i32 %150, 2097151
  br i1 %cmp276, label %cond.true.278, label %cond.false.281

cond.true.278:                                    ; preds = %cond.false.275
  %151 = load i32, i32* %c, align 4
  %shr279 = ashr i32 %151, 18
  %or280 = or i32 240, %shr279
  br label %cond.end.291

cond.false.281:                                   ; preds = %cond.false.275
  %152 = load i32, i32* %c, align 4
  %cmp282 = icmp sle i32 %152, 4194175
  br i1 %cmp282, label %cond.true.284, label %cond.false.285

cond.true.284:                                    ; preds = %cond.false.281
  br label %cond.end.289

cond.false.285:                                   ; preds = %cond.false.281
  %153 = load i32, i32* %c, align 4
  %shr286 = ashr i32 %153, 6
  %and287 = and i32 %shr286, 1
  %or288 = or i32 192, %and287
  br label %cond.end.289

cond.end.289:                                     ; preds = %cond.false.285, %cond.true.284
  %cond290 = phi i32 [ 248, %cond.true.284 ], [ %or288, %cond.false.285 ]
  br label %cond.end.291

cond.end.291:                                     ; preds = %cond.end.289, %cond.true.278
  %cond292 = phi i32 [ %or280, %cond.true.278 ], [ %cond290, %cond.end.289 ]
  br label %cond.end.293

cond.end.293:                                     ; preds = %cond.end.291, %cond.true.272
  %cond294 = phi i32 [ %or274, %cond.true.272 ], [ %cond292, %cond.end.291 ]
  br label %cond.end.295

cond.end.295:                                     ; preds = %cond.end.293, %cond.true.267
  %cond296 = phi i32 [ %or, %cond.true.267 ], [ %cond294, %cond.end.293 ]
  br label %cond.end.297

cond.end.297:                                     ; preds = %cond.end.295, %cond.true.263
  %cond298 = phi i32 [ %145, %cond.true.263 ], [ %cond296, %cond.end.295 ]
  store i32 %cond298, i32* %leading_code, align 4
  %arraydecay299 = getelementptr inbounds [256 x i8], [256 x i8]* %fastmap, i32 0, i32 0
  %154 = load i32, i32* %leading_code, align 4
  %idx.ext = sext i32 %154 to i64
  %add.ptr300 = getelementptr inbounds i8, i8* %arraydecay299, i64 %idx.ext
  %155 = load i32, i32* %c2241, align 4
  %cmp301 = icmp sle i32 %155, 127
  br i1 %cmp301, label %cond.true.303, label %cond.false.304

cond.true.303:                                    ; preds = %cond.end.297
  %156 = load i32, i32* %c2241, align 4
  br label %cond.end.338

cond.false.304:                                   ; preds = %cond.end.297
  %157 = load i32, i32* %c2241, align 4
  %cmp305 = icmp sle i32 %157, 2047
  br i1 %cmp305, label %cond.true.307, label %cond.false.310

cond.true.307:                                    ; preds = %cond.false.304
  %158 = load i32, i32* %c2241, align 4
  %shr308 = ashr i32 %158, 6
  %or309 = or i32 192, %shr308
  br label %cond.end.336

cond.false.310:                                   ; preds = %cond.false.304
  %159 = load i32, i32* %c2241, align 4
  %cmp311 = icmp sle i32 %159, 65535
  br i1 %cmp311, label %cond.true.313, label %cond.false.316

cond.true.313:                                    ; preds = %cond.false.310
  %160 = load i32, i32* %c2241, align 4
  %shr314 = ashr i32 %160, 12
  %or315 = or i32 224, %shr314
  br label %cond.end.334

cond.false.316:                                   ; preds = %cond.false.310
  %161 = load i32, i32* %c2241, align 4
  %cmp317 = icmp sle i32 %161, 2097151
  br i1 %cmp317, label %cond.true.319, label %cond.false.322

cond.true.319:                                    ; preds = %cond.false.316
  %162 = load i32, i32* %c2241, align 4
  %shr320 = ashr i32 %162, 18
  %or321 = or i32 240, %shr320
  br label %cond.end.332

cond.false.322:                                   ; preds = %cond.false.316
  %163 = load i32, i32* %c2241, align 4
  %cmp323 = icmp sle i32 %163, 4194175
  br i1 %cmp323, label %cond.true.325, label %cond.false.326

cond.true.325:                                    ; preds = %cond.false.322
  br label %cond.end.330

cond.false.326:                                   ; preds = %cond.false.322
  %164 = load i32, i32* %c2241, align 4
  %shr327 = ashr i32 %164, 6
  %and328 = and i32 %shr327, 1
  %or329 = or i32 192, %and328
  br label %cond.end.330

cond.end.330:                                     ; preds = %cond.false.326, %cond.true.325
  %cond331 = phi i32 [ 248, %cond.true.325 ], [ %or329, %cond.false.326 ]
  br label %cond.end.332

cond.end.332:                                     ; preds = %cond.end.330, %cond.true.319
  %cond333 = phi i32 [ %or321, %cond.true.319 ], [ %cond331, %cond.end.330 ]
  br label %cond.end.334

cond.end.334:                                     ; preds = %cond.end.332, %cond.true.313
  %cond335 = phi i32 [ %or315, %cond.true.313 ], [ %cond333, %cond.end.332 ]
  br label %cond.end.336

cond.end.336:                                     ; preds = %cond.end.334, %cond.true.307
  %cond337 = phi i32 [ %or309, %cond.true.307 ], [ %cond335, %cond.end.334 ]
  br label %cond.end.338

cond.end.338:                                     ; preds = %cond.end.336, %cond.true.303
  %cond339 = phi i32 [ %156, %cond.true.303 ], [ %cond337, %cond.end.336 ]
  %165 = load i32, i32* %leading_code, align 4
  %sub340 = sub nsw i32 %cond339, %165
  %add341 = add nsw i32 %sub340, 1
  %conv342 = sext i32 %add341 to i64
  call void @llvm.memset.p0i8.i64(i8* %add.ptr300, i8 1, i64 %conv342, i32 1, i1 false)
  br label %while.cond.234

while.end.343:                                    ; preds = %while.cond.234
  br label %if.end.344

if.end.344:                                       ; preds = %while.end.343, %land.lhs.true.215, %while.end.212
  br label %if.end.985

if.else.345:                                      ; preds = %if.end.65
  br label %do.body.346

do.body.346:                                      ; preds = %if.else.345
  %166 = load i64, i64* %string.addr, align 8
  %call347 = call i64 @SCHARS(i64 %166)
  %167 = load i64, i64* %sa_avail, align 8
  %div348 = udiv i64 %167, 4
  %div349 = udiv i64 %div348, 2
  %cmp350 = icmp ule i64 %call347, %div349
  br i1 %cmp350, label %if.then.352, label %if.else.357

if.then.352:                                      ; preds = %do.body.346
  %168 = load i64, i64* %string.addr, align 8
  %call353 = call i64 @SCHARS(i64 %168)
  %mul = mul i64 8, %call353
  %169 = load i64, i64* %sa_avail, align 8
  %sub354 = sub i64 %169, %mul
  store i64 %sub354, i64* %sa_avail, align 8
  %170 = load i64, i64* %string.addr, align 8
  %call355 = call i64 @SCHARS(i64 %170)
  %mul356 = mul i64 8, %call355
  %171 = alloca i8, i64 %mul356
  %172 = bitcast i8* %171 to i32*
  store i32* %172, i32** %char_ranges, align 8
  br label %if.end.360

if.else.357:                                      ; preds = %do.body.346
  %173 = load i64, i64* %string.addr, align 8
  %call358 = call i64 @SCHARS(i64 %173)
  %call359 = call noalias i8* @xnmalloc(i64 %call358, i64 8)
  %174 = bitcast i8* %call359 to i32*
  store i32* %174, i32** %char_ranges, align 8
  store i8 1, i8* %sa_must_free, align 1
  %175 = load i32*, i32** %char_ranges, align 8
  %176 = bitcast i32* %175 to i8*
  call void @record_unwind_protect_ptr(void (i8*)* @xfree, i8* %176)
  br label %if.end.360

if.end.360:                                       ; preds = %if.else.357, %if.then.352
  br label %do.end.361

do.end.361:                                       ; preds = %if.end.360
  br label %while.cond.362

while.cond.362:                                   ; preds = %if.end.933, %if.then.815, %if.end.570, %do.end.361
  %177 = load i64, i64* %i_byte, align 8
  %178 = load i64, i64* %size_byte, align 8
  %cmp363 = icmp slt i64 %177, %178
  br i1 %cmp363, label %while.body.365, label %while.end.934

while.body.365:                                   ; preds = %while.cond.362
  %179 = load i64, i64* %i_byte, align 8
  %180 = load i8*, i8** %str, align 8
  %arrayidx367 = getelementptr inbounds i8, i8* %180, i64 %179
  %181 = load i8, i8* %arrayidx367, align 1
  %conv368 = zext i8 %181 to i32
  store i32 %conv368, i32* %leading_code366, align 4
  %182 = load i8*, i8** %str, align 8
  %183 = load i64, i64* %i_byte, align 8
  %add.ptr369 = getelementptr inbounds i8, i8* %182, i64 %183
  %arrayidx370 = getelementptr inbounds i8, i8* %add.ptr369, i64 0
  %184 = load i8, i8* %arrayidx370, align 1
  %conv371 = zext i8 %184 to i32
  %and372 = and i32 %conv371, 128
  %tobool373 = icmp ne i32 %and372, 0
  br i1 %tobool373, label %cond.false.378, label %cond.true.374

cond.true.374:                                    ; preds = %while.body.365
  store i32 1, i32* %len, align 4
  %185 = load i8*, i8** %str, align 8
  %186 = load i64, i64* %i_byte, align 8
  %add.ptr375 = getelementptr inbounds i8, i8* %185, i64 %186
  %arrayidx376 = getelementptr inbounds i8, i8* %add.ptr375, i64 0
  %187 = load i8, i8* %arrayidx376, align 1
  %conv377 = zext i8 %187 to i32
  br label %cond.end.432

cond.false.378:                                   ; preds = %while.body.365
  %188 = load i8*, i8** %str, align 8
  %189 = load i64, i64* %i_byte, align 8
  %add.ptr379 = getelementptr inbounds i8, i8* %188, i64 %189
  %arrayidx380 = getelementptr inbounds i8, i8* %add.ptr379, i64 0
  %190 = load i8, i8* %arrayidx380, align 1
  %conv381 = zext i8 %190 to i32
  %and382 = and i32 %conv381, 32
  %tobool383 = icmp ne i32 %and382, 0
  br i1 %tobool383, label %cond.false.402, label %cond.true.384

cond.true.384:                                    ; preds = %cond.false.378
  store i32 2, i32* %len, align 4
  %191 = load i8*, i8** %str, align 8
  %192 = load i64, i64* %i_byte, align 8
  %add.ptr385 = getelementptr inbounds i8, i8* %191, i64 %192
  %arrayidx386 = getelementptr inbounds i8, i8* %add.ptr385, i64 0
  %193 = load i8, i8* %arrayidx386, align 1
  %conv387 = zext i8 %193 to i32
  %and388 = and i32 %conv387, 31
  %shl389 = shl i32 %and388, 6
  %194 = load i8*, i8** %str, align 8
  %195 = load i64, i64* %i_byte, align 8
  %add.ptr390 = getelementptr inbounds i8, i8* %194, i64 %195
  %arrayidx391 = getelementptr inbounds i8, i8* %add.ptr390, i64 1
  %196 = load i8, i8* %arrayidx391, align 1
  %conv392 = zext i8 %196 to i32
  %and393 = and i32 %conv392, 63
  %or394 = or i32 %shl389, %and393
  %197 = load i8*, i8** %str, align 8
  %198 = load i64, i64* %i_byte, align 8
  %add.ptr395 = getelementptr inbounds i8, i8* %197, i64 %198
  %arrayidx396 = getelementptr inbounds i8, i8* %add.ptr395, i64 0
  %199 = load i8, i8* %arrayidx396, align 1
  %conv397 = zext i8 %199 to i32
  %cmp398 = icmp slt i32 %conv397, 194
  %cond400 = select i1 %cmp398, i32 4194176, i32 0
  %add401 = add nsw i32 %or394, %cond400
  br label %cond.end.430

cond.false.402:                                   ; preds = %cond.false.378
  %200 = load i8*, i8** %str, align 8
  %201 = load i64, i64* %i_byte, align 8
  %add.ptr403 = getelementptr inbounds i8, i8* %200, i64 %201
  %arrayidx404 = getelementptr inbounds i8, i8* %add.ptr403, i64 0
  %202 = load i8, i8* %arrayidx404, align 1
  %conv405 = zext i8 %202 to i32
  %and406 = and i32 %conv405, 16
  %tobool407 = icmp ne i32 %and406, 0
  br i1 %tobool407, label %cond.false.425, label %cond.true.408

cond.true.408:                                    ; preds = %cond.false.402
  store i32 3, i32* %len, align 4
  %203 = load i8*, i8** %str, align 8
  %204 = load i64, i64* %i_byte, align 8
  %add.ptr409 = getelementptr inbounds i8, i8* %203, i64 %204
  %arrayidx410 = getelementptr inbounds i8, i8* %add.ptr409, i64 0
  %205 = load i8, i8* %arrayidx410, align 1
  %conv411 = zext i8 %205 to i32
  %and412 = and i32 %conv411, 15
  %shl413 = shl i32 %and412, 12
  %206 = load i8*, i8** %str, align 8
  %207 = load i64, i64* %i_byte, align 8
  %add.ptr414 = getelementptr inbounds i8, i8* %206, i64 %207
  %arrayidx415 = getelementptr inbounds i8, i8* %add.ptr414, i64 1
  %208 = load i8, i8* %arrayidx415, align 1
  %conv416 = zext i8 %208 to i32
  %and417 = and i32 %conv416, 63
  %shl418 = shl i32 %and417, 6
  %or419 = or i32 %shl413, %shl418
  %209 = load i8*, i8** %str, align 8
  %210 = load i64, i64* %i_byte, align 8
  %add.ptr420 = getelementptr inbounds i8, i8* %209, i64 %210
  %arrayidx421 = getelementptr inbounds i8, i8* %add.ptr420, i64 2
  %211 = load i8, i8* %arrayidx421, align 1
  %conv422 = zext i8 %211 to i32
  %and423 = and i32 %conv422, 63
  %or424 = or i32 %or419, %and423
  br label %cond.end.428

cond.false.425:                                   ; preds = %cond.false.402
  %212 = load i8*, i8** %str, align 8
  %213 = load i64, i64* %i_byte, align 8
  %add.ptr426 = getelementptr inbounds i8, i8* %212, i64 %213
  %call427 = call i32 @string_char(i8* %add.ptr426, i8** null, i32* %len)
  br label %cond.end.428

cond.end.428:                                     ; preds = %cond.false.425, %cond.true.408
  %cond429 = phi i32 [ %or424, %cond.true.408 ], [ %call427, %cond.false.425 ]
  br label %cond.end.430

cond.end.430:                                     ; preds = %cond.end.428, %cond.true.384
  %cond431 = phi i32 [ %add401, %cond.true.384 ], [ %cond429, %cond.end.428 ]
  br label %cond.end.432

cond.end.432:                                     ; preds = %cond.end.430, %cond.true.374
  %cond433 = phi i32 [ %conv377, %cond.true.374 ], [ %cond431, %cond.end.430 ]
  store i32 %cond433, i32* %c, align 4
  %214 = load i32, i32* %len, align 4
  %conv434 = sext i32 %214 to i64
  %215 = load i64, i64* %i_byte, align 8
  %add435 = add nsw i64 %215, %conv434
  store i64 %add435, i64* %i_byte, align 8
  %216 = load i8, i8* %handle_iso_classes.addr, align 1
  %tobool436 = trunc i8 %216 to i1
  br i1 %tobool436, label %land.lhs.true.438, label %if.end.579

land.lhs.true.438:                                ; preds = %cond.end.432
  %217 = load i32, i32* %c, align 4
  %cmp439 = icmp eq i32 %217, 91
  br i1 %cmp439, label %land.lhs.true.441, label %if.end.579

land.lhs.true.441:                                ; preds = %land.lhs.true.438
  %218 = load i64, i64* %i_byte, align 8
  %219 = load i64, i64* %size_byte, align 8
  %cmp442 = icmp slt i64 %218, %219
  br i1 %cmp442, label %land.lhs.true.444, label %if.end.579

land.lhs.true.444:                                ; preds = %land.lhs.true.441
  %220 = load i8*, i8** %str, align 8
  %221 = load i64, i64* %i_byte, align 8
  %add.ptr445 = getelementptr inbounds i8, i8* %220, i64 %221
  %arrayidx446 = getelementptr inbounds i8, i8* %add.ptr445, i64 0
  %222 = load i8, i8* %arrayidx446, align 1
  %conv447 = zext i8 %222 to i32
  %and448 = and i32 %conv447, 128
  %tobool449 = icmp ne i32 %and448, 0
  br i1 %tobool449, label %cond.false.454, label %cond.true.450

cond.true.450:                                    ; preds = %land.lhs.true.444
  %223 = load i8*, i8** %str, align 8
  %224 = load i64, i64* %i_byte, align 8
  %add.ptr451 = getelementptr inbounds i8, i8* %223, i64 %224
  %arrayidx452 = getelementptr inbounds i8, i8* %add.ptr451, i64 0
  %225 = load i8, i8* %arrayidx452, align 1
  %conv453 = zext i8 %225 to i32
  br label %cond.end.508

cond.false.454:                                   ; preds = %land.lhs.true.444
  %226 = load i8*, i8** %str, align 8
  %227 = load i64, i64* %i_byte, align 8
  %add.ptr455 = getelementptr inbounds i8, i8* %226, i64 %227
  %arrayidx456 = getelementptr inbounds i8, i8* %add.ptr455, i64 0
  %228 = load i8, i8* %arrayidx456, align 1
  %conv457 = zext i8 %228 to i32
  %and458 = and i32 %conv457, 32
  %tobool459 = icmp ne i32 %and458, 0
  br i1 %tobool459, label %cond.false.478, label %cond.true.460

cond.true.460:                                    ; preds = %cond.false.454
  %229 = load i8*, i8** %str, align 8
  %230 = load i64, i64* %i_byte, align 8
  %add.ptr461 = getelementptr inbounds i8, i8* %229, i64 %230
  %arrayidx462 = getelementptr inbounds i8, i8* %add.ptr461, i64 0
  %231 = load i8, i8* %arrayidx462, align 1
  %conv463 = zext i8 %231 to i32
  %and464 = and i32 %conv463, 31
  %shl465 = shl i32 %and464, 6
  %232 = load i8*, i8** %str, align 8
  %233 = load i64, i64* %i_byte, align 8
  %add.ptr466 = getelementptr inbounds i8, i8* %232, i64 %233
  %arrayidx467 = getelementptr inbounds i8, i8* %add.ptr466, i64 1
  %234 = load i8, i8* %arrayidx467, align 1
  %conv468 = zext i8 %234 to i32
  %and469 = and i32 %conv468, 63
  %or470 = or i32 %shl465, %and469
  %235 = load i8*, i8** %str, align 8
  %236 = load i64, i64* %i_byte, align 8
  %add.ptr471 = getelementptr inbounds i8, i8* %235, i64 %236
  %arrayidx472 = getelementptr inbounds i8, i8* %add.ptr471, i64 0
  %237 = load i8, i8* %arrayidx472, align 1
  %conv473 = zext i8 %237 to i32
  %cmp474 = icmp slt i32 %conv473, 194
  %cond476 = select i1 %cmp474, i32 4194176, i32 0
  %add477 = add nsw i32 %or470, %cond476
  br label %cond.end.506

cond.false.478:                                   ; preds = %cond.false.454
  %238 = load i8*, i8** %str, align 8
  %239 = load i64, i64* %i_byte, align 8
  %add.ptr479 = getelementptr inbounds i8, i8* %238, i64 %239
  %arrayidx480 = getelementptr inbounds i8, i8* %add.ptr479, i64 0
  %240 = load i8, i8* %arrayidx480, align 1
  %conv481 = zext i8 %240 to i32
  %and482 = and i32 %conv481, 16
  %tobool483 = icmp ne i32 %and482, 0
  br i1 %tobool483, label %cond.false.501, label %cond.true.484

cond.true.484:                                    ; preds = %cond.false.478
  %241 = load i8*, i8** %str, align 8
  %242 = load i64, i64* %i_byte, align 8
  %add.ptr485 = getelementptr inbounds i8, i8* %241, i64 %242
  %arrayidx486 = getelementptr inbounds i8, i8* %add.ptr485, i64 0
  %243 = load i8, i8* %arrayidx486, align 1
  %conv487 = zext i8 %243 to i32
  %and488 = and i32 %conv487, 15
  %shl489 = shl i32 %and488, 12
  %244 = load i8*, i8** %str, align 8
  %245 = load i64, i64* %i_byte, align 8
  %add.ptr490 = getelementptr inbounds i8, i8* %244, i64 %245
  %arrayidx491 = getelementptr inbounds i8, i8* %add.ptr490, i64 1
  %246 = load i8, i8* %arrayidx491, align 1
  %conv492 = zext i8 %246 to i32
  %and493 = and i32 %conv492, 63
  %shl494 = shl i32 %and493, 6
  %or495 = or i32 %shl489, %shl494
  %247 = load i8*, i8** %str, align 8
  %248 = load i64, i64* %i_byte, align 8
  %add.ptr496 = getelementptr inbounds i8, i8* %247, i64 %248
  %arrayidx497 = getelementptr inbounds i8, i8* %add.ptr496, i64 2
  %249 = load i8, i8* %arrayidx497, align 1
  %conv498 = zext i8 %249 to i32
  %and499 = and i32 %conv498, 63
  %or500 = or i32 %or495, %and499
  br label %cond.end.504

cond.false.501:                                   ; preds = %cond.false.478
  %250 = load i8*, i8** %str, align 8
  %251 = load i64, i64* %i_byte, align 8
  %add.ptr502 = getelementptr inbounds i8, i8* %250, i64 %251
  %call503 = call i32 @string_char(i8* %add.ptr502, i8** null, i32* null)
  br label %cond.end.504

cond.end.504:                                     ; preds = %cond.false.501, %cond.true.484
  %cond505 = phi i32 [ %or500, %cond.true.484 ], [ %call503, %cond.false.501 ]
  br label %cond.end.506

cond.end.506:                                     ; preds = %cond.end.504, %cond.true.460
  %cond507 = phi i32 [ %add477, %cond.true.460 ], [ %cond505, %cond.end.504 ]
  br label %cond.end.508

cond.end.508:                                     ; preds = %cond.end.506, %cond.true.450
  %cond509 = phi i32 [ %conv453, %cond.true.450 ], [ %cond507, %cond.end.506 ]
  %cmp510 = icmp eq i32 %cond509, 58
  br i1 %cmp510, label %if.then.512, label %if.end.579

if.then.512:                                      ; preds = %cond.end.508
  %252 = load i8*, i8** %str, align 8
  %253 = load i64, i64* %i_byte, align 8
  %add.ptr514 = getelementptr inbounds i8, i8* %252, i64 %253
  %add.ptr515 = getelementptr inbounds i8, i8* %add.ptr514, i64 1
  store i8* %add.ptr515, i8** %class_beg513, align 8
  %254 = load i8*, i8** %class_beg513, align 8
  store i8* %254, i8** %class_end516, align 8
  %255 = load i8*, i8** %str, align 8
  %256 = load i64, i64* %size_byte, align 8
  %add.ptr518 = getelementptr inbounds i8, i8* %255, i64 %256
  %add.ptr519 = getelementptr inbounds i8, i8* %add.ptr518, i64 -2
  store i8* %add.ptr519, i8** %class_limit517, align 8
  %257 = load i8*, i8** %class_limit517, align 8
  %258 = load i8*, i8** %class_beg513, align 8
  %sub.ptr.lhs.cast522 = ptrtoint i8* %257 to i64
  %sub.ptr.rhs.cast523 = ptrtoint i8* %258 to i64
  %sub.ptr.sub524 = sub i64 %sub.ptr.lhs.cast522, %sub.ptr.rhs.cast523
  %cmp525 = icmp sgt i64 %sub.ptr.sub524, 9
  br i1 %cmp525, label %if.then.527, label %if.end.529

if.then.527:                                      ; preds = %if.then.512
  %259 = load i8*, i8** %class_beg513, align 8
  %add.ptr528 = getelementptr inbounds i8, i8* %259, i64 9
  store i8* %add.ptr528, i8** %class_limit517, align 8
  br label %if.end.529

if.end.529:                                       ; preds = %if.then.527, %if.then.512
  br label %while.cond.530

while.cond.530:                                   ; preds = %while.body.542, %if.end.529
  %260 = load i8*, i8** %class_end516, align 8
  %261 = load i8*, i8** %class_limit517, align 8
  %cmp531 = icmp ult i8* %260, %261
  br i1 %cmp531, label %land.lhs.true.533, label %land.end.541

land.lhs.true.533:                                ; preds = %while.cond.530
  %262 = load i8*, i8** %class_end516, align 8
  %263 = load i8, i8* %262, align 1
  %conv534 = zext i8 %263 to i32
  %cmp535 = icmp sge i32 %conv534, 97
  br i1 %cmp535, label %land.rhs.537, label %land.end.541

land.rhs.537:                                     ; preds = %land.lhs.true.533
  %264 = load i8*, i8** %class_end516, align 8
  %265 = load i8, i8* %264, align 1
  %conv538 = zext i8 %265 to i32
  %cmp539 = icmp sle i32 %conv538, 122
  br label %land.end.541

land.end.541:                                     ; preds = %land.rhs.537, %land.lhs.true.533, %while.cond.530
  %266 = phi i1 [ false, %land.lhs.true.533 ], [ false, %while.cond.530 ], [ %cmp539, %land.rhs.537 ]
  br i1 %266, label %while.body.542, label %while.end.544

while.body.542:                                   ; preds = %land.end.541
  %267 = load i8*, i8** %class_end516, align 8
  %incdec.ptr543 = getelementptr inbounds i8, i8* %267, i32 1
  store i8* %incdec.ptr543, i8** %class_end516, align 8
  br label %while.cond.530

while.end.544:                                    ; preds = %land.end.541
  %268 = load i8*, i8** %class_end516, align 8
  %269 = load i8*, i8** %class_beg513, align 8
  %cmp545 = icmp eq i8* %268, %269
  br i1 %cmp545, label %if.then.556, label %lor.lhs.false.547

lor.lhs.false.547:                                ; preds = %while.end.544
  %270 = load i8*, i8** %class_end516, align 8
  %271 = load i8, i8* %270, align 1
  %conv548 = zext i8 %271 to i32
  %cmp549 = icmp ne i32 %conv548, 58
  br i1 %cmp549, label %if.then.556, label %lor.lhs.false.551

lor.lhs.false.551:                                ; preds = %lor.lhs.false.547
  %272 = load i8*, i8** %class_end516, align 8
  %arrayidx552 = getelementptr inbounds i8, i8* %272, i64 1
  %273 = load i8, i8* %arrayidx552, align 1
  %conv553 = zext i8 %273 to i32
  %cmp554 = icmp ne i32 %conv553, 93
  br i1 %cmp554, label %if.then.556, label %if.end.557

if.then.556:                                      ; preds = %lor.lhs.false.551, %lor.lhs.false.547, %while.end.544
  br label %not_a_class_name_multibyte

if.end.557:                                       ; preds = %lor.lhs.false.551
  %274 = bitcast [10 x i8]* %class_name520 to i8*
  %275 = load i8*, i8** %class_beg513, align 8
  %276 = load i8*, i8** %class_end516, align 8
  %277 = load i8*, i8** %class_beg513, align 8
  %sub.ptr.lhs.cast558 = ptrtoint i8* %276 to i64
  %sub.ptr.rhs.cast559 = ptrtoint i8* %277 to i64
  %sub.ptr.sub560 = sub i64 %sub.ptr.lhs.cast558, %sub.ptr.rhs.cast559
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %274, i8* %275, i64 %sub.ptr.sub560, i32 1, i1 false)
  %278 = load i8*, i8** %class_end516, align 8
  %279 = load i8*, i8** %class_beg513, align 8
  %sub.ptr.lhs.cast561 = ptrtoint i8* %278 to i64
  %sub.ptr.rhs.cast562 = ptrtoint i8* %279 to i64
  %sub.ptr.sub563 = sub i64 %sub.ptr.lhs.cast561, %sub.ptr.rhs.cast562
  %arrayidx564 = getelementptr inbounds [10 x i8], [10 x i8]* %class_name520, i32 0, i64 %sub.ptr.sub563
  store i8 0, i8* %arrayidx564, align 1
  %arraydecay565 = getelementptr inbounds [10 x i8], [10 x i8]* %class_name520, i32 0, i32 0
  %call566 = call i32 @re_wctype(i8* %arraydecay565)
  store i32 %call566, i32* %cc521, align 4
  %280 = load i32, i32* %cc521, align 4
  %cmp567 = icmp eq i32 %280, 0
  br i1 %cmp567, label %if.then.569, label %if.end.570

if.then.569:                                      ; preds = %if.end.557
  call void (i8*, ...) @error(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60, i32 0, i32 0)) #5
  unreachable

if.end.570:                                       ; preds = %if.end.557
  %281 = load i32, i32* %cc521, align 4
  %conv571 = zext i32 %281 to i64
  %shl572 = shl i64 %conv571, 2
  %add573 = add i64 %shl572, 2
  %282 = load i64, i64* %iso_classes, align 8
  %call574 = call i64 @Fcons(i64 %add573, i64 %282)
  store i64 %call574, i64* %iso_classes, align 8
  %283 = load i8*, i8** %class_end516, align 8
  %add.ptr575 = getelementptr inbounds i8, i8* %283, i64 2
  %284 = load i8*, i8** %str, align 8
  %sub.ptr.lhs.cast576 = ptrtoint i8* %add.ptr575 to i64
  %sub.ptr.rhs.cast577 = ptrtoint i8* %284 to i64
  %sub.ptr.sub578 = sub i64 %sub.ptr.lhs.cast576, %sub.ptr.rhs.cast577
  store i64 %sub.ptr.sub578, i64* %i_byte, align 8
  br label %while.cond.362

if.end.579:                                       ; preds = %cond.end.508, %land.lhs.true.441, %land.lhs.true.438, %cond.end.432
  br label %not_a_class_name_multibyte

not_a_class_name_multibyte:                       ; preds = %if.end.579, %if.then.556
  %285 = load i32, i32* %c, align 4
  %cmp580 = icmp eq i32 %285, 92
  br i1 %cmp580, label %if.then.582, label %if.end.656

if.then.582:                                      ; preds = %not_a_class_name_multibyte
  %286 = load i64, i64* %i_byte, align 8
  %287 = load i64, i64* %size_byte, align 8
  %cmp583 = icmp eq i64 %286, %287
  br i1 %cmp583, label %if.then.585, label %if.end.586

if.then.585:                                      ; preds = %if.then.582
  br label %while.end.934

if.end.586:                                       ; preds = %if.then.582
  %288 = load i64, i64* %i_byte, align 8
  %289 = load i8*, i8** %str, align 8
  %arrayidx587 = getelementptr inbounds i8, i8* %289, i64 %288
  %290 = load i8, i8* %arrayidx587, align 1
  %conv588 = zext i8 %290 to i32
  store i32 %conv588, i32* %leading_code366, align 4
  %291 = load i8*, i8** %str, align 8
  %292 = load i64, i64* %i_byte, align 8
  %add.ptr589 = getelementptr inbounds i8, i8* %291, i64 %292
  %arrayidx590 = getelementptr inbounds i8, i8* %add.ptr589, i64 0
  %293 = load i8, i8* %arrayidx590, align 1
  %conv591 = zext i8 %293 to i32
  %and592 = and i32 %conv591, 128
  %tobool593 = icmp ne i32 %and592, 0
  br i1 %tobool593, label %cond.false.598, label %cond.true.594

cond.true.594:                                    ; preds = %if.end.586
  store i32 1, i32* %len, align 4
  %294 = load i8*, i8** %str, align 8
  %295 = load i64, i64* %i_byte, align 8
  %add.ptr595 = getelementptr inbounds i8, i8* %294, i64 %295
  %arrayidx596 = getelementptr inbounds i8, i8* %add.ptr595, i64 0
  %296 = load i8, i8* %arrayidx596, align 1
  %conv597 = zext i8 %296 to i32
  br label %cond.end.652

cond.false.598:                                   ; preds = %if.end.586
  %297 = load i8*, i8** %str, align 8
  %298 = load i64, i64* %i_byte, align 8
  %add.ptr599 = getelementptr inbounds i8, i8* %297, i64 %298
  %arrayidx600 = getelementptr inbounds i8, i8* %add.ptr599, i64 0
  %299 = load i8, i8* %arrayidx600, align 1
  %conv601 = zext i8 %299 to i32
  %and602 = and i32 %conv601, 32
  %tobool603 = icmp ne i32 %and602, 0
  br i1 %tobool603, label %cond.false.622, label %cond.true.604

cond.true.604:                                    ; preds = %cond.false.598
  store i32 2, i32* %len, align 4
  %300 = load i8*, i8** %str, align 8
  %301 = load i64, i64* %i_byte, align 8
  %add.ptr605 = getelementptr inbounds i8, i8* %300, i64 %301
  %arrayidx606 = getelementptr inbounds i8, i8* %add.ptr605, i64 0
  %302 = load i8, i8* %arrayidx606, align 1
  %conv607 = zext i8 %302 to i32
  %and608 = and i32 %conv607, 31
  %shl609 = shl i32 %and608, 6
  %303 = load i8*, i8** %str, align 8
  %304 = load i64, i64* %i_byte, align 8
  %add.ptr610 = getelementptr inbounds i8, i8* %303, i64 %304
  %arrayidx611 = getelementptr inbounds i8, i8* %add.ptr610, i64 1
  %305 = load i8, i8* %arrayidx611, align 1
  %conv612 = zext i8 %305 to i32
  %and613 = and i32 %conv612, 63
  %or614 = or i32 %shl609, %and613
  %306 = load i8*, i8** %str, align 8
  %307 = load i64, i64* %i_byte, align 8
  %add.ptr615 = getelementptr inbounds i8, i8* %306, i64 %307
  %arrayidx616 = getelementptr inbounds i8, i8* %add.ptr615, i64 0
  %308 = load i8, i8* %arrayidx616, align 1
  %conv617 = zext i8 %308 to i32
  %cmp618 = icmp slt i32 %conv617, 194
  %cond620 = select i1 %cmp618, i32 4194176, i32 0
  %add621 = add nsw i32 %or614, %cond620
  br label %cond.end.650

cond.false.622:                                   ; preds = %cond.false.598
  %309 = load i8*, i8** %str, align 8
  %310 = load i64, i64* %i_byte, align 8
  %add.ptr623 = getelementptr inbounds i8, i8* %309, i64 %310
  %arrayidx624 = getelementptr inbounds i8, i8* %add.ptr623, i64 0
  %311 = load i8, i8* %arrayidx624, align 1
  %conv625 = zext i8 %311 to i32
  %and626 = and i32 %conv625, 16
  %tobool627 = icmp ne i32 %and626, 0
  br i1 %tobool627, label %cond.false.645, label %cond.true.628

cond.true.628:                                    ; preds = %cond.false.622
  store i32 3, i32* %len, align 4
  %312 = load i8*, i8** %str, align 8
  %313 = load i64, i64* %i_byte, align 8
  %add.ptr629 = getelementptr inbounds i8, i8* %312, i64 %313
  %arrayidx630 = getelementptr inbounds i8, i8* %add.ptr629, i64 0
  %314 = load i8, i8* %arrayidx630, align 1
  %conv631 = zext i8 %314 to i32
  %and632 = and i32 %conv631, 15
  %shl633 = shl i32 %and632, 12
  %315 = load i8*, i8** %str, align 8
  %316 = load i64, i64* %i_byte, align 8
  %add.ptr634 = getelementptr inbounds i8, i8* %315, i64 %316
  %arrayidx635 = getelementptr inbounds i8, i8* %add.ptr634, i64 1
  %317 = load i8, i8* %arrayidx635, align 1
  %conv636 = zext i8 %317 to i32
  %and637 = and i32 %conv636, 63
  %shl638 = shl i32 %and637, 6
  %or639 = or i32 %shl633, %shl638
  %318 = load i8*, i8** %str, align 8
  %319 = load i64, i64* %i_byte, align 8
  %add.ptr640 = getelementptr inbounds i8, i8* %318, i64 %319
  %arrayidx641 = getelementptr inbounds i8, i8* %add.ptr640, i64 2
  %320 = load i8, i8* %arrayidx641, align 1
  %conv642 = zext i8 %320 to i32
  %and643 = and i32 %conv642, 63
  %or644 = or i32 %or639, %and643
  br label %cond.end.648

cond.false.645:                                   ; preds = %cond.false.622
  %321 = load i8*, i8** %str, align 8
  %322 = load i64, i64* %i_byte, align 8
  %add.ptr646 = getelementptr inbounds i8, i8* %321, i64 %322
  %call647 = call i32 @string_char(i8* %add.ptr646, i8** null, i32* %len)
  br label %cond.end.648

cond.end.648:                                     ; preds = %cond.false.645, %cond.true.628
  %cond649 = phi i32 [ %or644, %cond.true.628 ], [ %call647, %cond.false.645 ]
  br label %cond.end.650

cond.end.650:                                     ; preds = %cond.end.648, %cond.true.604
  %cond651 = phi i32 [ %add621, %cond.true.604 ], [ %cond649, %cond.end.648 ]
  br label %cond.end.652

cond.end.652:                                     ; preds = %cond.end.650, %cond.true.594
  %cond653 = phi i32 [ %conv597, %cond.true.594 ], [ %cond651, %cond.end.650 ]
  store i32 %cond653, i32* %c, align 4
  %323 = load i32, i32* %len, align 4
  %conv654 = sext i32 %323 to i64
  %324 = load i64, i64* %i_byte, align 8
  %add655 = add nsw i64 %324, %conv654
  store i64 %add655, i64* %i_byte, align 8
  br label %if.end.656

if.end.656:                                       ; preds = %cond.end.652, %not_a_class_name_multibyte
  %325 = load i64, i64* %i_byte, align 8
  %add657 = add nsw i64 %325, 1
  %326 = load i64, i64* %size_byte, align 8
  %cmp658 = icmp slt i64 %add657, %326
  br i1 %cmp658, label %land.lhs.true.660, label %if.else.910

land.lhs.true.660:                                ; preds = %if.end.656
  %327 = load i64, i64* %i_byte, align 8
  %328 = load i8*, i8** %str, align 8
  %arrayidx661 = getelementptr inbounds i8, i8* %328, i64 %327
  %329 = load i8, i8* %arrayidx661, align 1
  %conv662 = zext i8 %329 to i32
  %cmp663 = icmp eq i32 %conv662, 45
  br i1 %cmp663, label %if.then.665, label %if.else.910

if.then.665:                                      ; preds = %land.lhs.true.660
  %330 = load i64, i64* %i_byte, align 8
  %inc667 = add nsw i64 %330, 1
  store i64 %inc667, i64* %i_byte, align 8
  %331 = load i64, i64* %i_byte, align 8
  %332 = load i8*, i8** %str, align 8
  %arrayidx668 = getelementptr inbounds i8, i8* %332, i64 %331
  %333 = load i8, i8* %arrayidx668, align 1
  %conv669 = zext i8 %333 to i32
  store i32 %conv669, i32* %leading_code2, align 4
  %334 = load i8*, i8** %str, align 8
  %335 = load i64, i64* %i_byte, align 8
  %add.ptr670 = getelementptr inbounds i8, i8* %334, i64 %335
  %arrayidx671 = getelementptr inbounds i8, i8* %add.ptr670, i64 0
  %336 = load i8, i8* %arrayidx671, align 1
  %conv672 = zext i8 %336 to i32
  %and673 = and i32 %conv672, 128
  %tobool674 = icmp ne i32 %and673, 0
  br i1 %tobool674, label %cond.false.679, label %cond.true.675

cond.true.675:                                    ; preds = %if.then.665
  store i32 1, i32* %len, align 4
  %337 = load i8*, i8** %str, align 8
  %338 = load i64, i64* %i_byte, align 8
  %add.ptr676 = getelementptr inbounds i8, i8* %337, i64 %338
  %arrayidx677 = getelementptr inbounds i8, i8* %add.ptr676, i64 0
  %339 = load i8, i8* %arrayidx677, align 1
  %conv678 = zext i8 %339 to i32
  br label %cond.end.733

cond.false.679:                                   ; preds = %if.then.665
  %340 = load i8*, i8** %str, align 8
  %341 = load i64, i64* %i_byte, align 8
  %add.ptr680 = getelementptr inbounds i8, i8* %340, i64 %341
  %arrayidx681 = getelementptr inbounds i8, i8* %add.ptr680, i64 0
  %342 = load i8, i8* %arrayidx681, align 1
  %conv682 = zext i8 %342 to i32
  %and683 = and i32 %conv682, 32
  %tobool684 = icmp ne i32 %and683, 0
  br i1 %tobool684, label %cond.false.703, label %cond.true.685

cond.true.685:                                    ; preds = %cond.false.679
  store i32 2, i32* %len, align 4
  %343 = load i8*, i8** %str, align 8
  %344 = load i64, i64* %i_byte, align 8
  %add.ptr686 = getelementptr inbounds i8, i8* %343, i64 %344
  %arrayidx687 = getelementptr inbounds i8, i8* %add.ptr686, i64 0
  %345 = load i8, i8* %arrayidx687, align 1
  %conv688 = zext i8 %345 to i32
  %and689 = and i32 %conv688, 31
  %shl690 = shl i32 %and689, 6
  %346 = load i8*, i8** %str, align 8
  %347 = load i64, i64* %i_byte, align 8
  %add.ptr691 = getelementptr inbounds i8, i8* %346, i64 %347
  %arrayidx692 = getelementptr inbounds i8, i8* %add.ptr691, i64 1
  %348 = load i8, i8* %arrayidx692, align 1
  %conv693 = zext i8 %348 to i32
  %and694 = and i32 %conv693, 63
  %or695 = or i32 %shl690, %and694
  %349 = load i8*, i8** %str, align 8
  %350 = load i64, i64* %i_byte, align 8
  %add.ptr696 = getelementptr inbounds i8, i8* %349, i64 %350
  %arrayidx697 = getelementptr inbounds i8, i8* %add.ptr696, i64 0
  %351 = load i8, i8* %arrayidx697, align 1
  %conv698 = zext i8 %351 to i32
  %cmp699 = icmp slt i32 %conv698, 194
  %cond701 = select i1 %cmp699, i32 4194176, i32 0
  %add702 = add nsw i32 %or695, %cond701
  br label %cond.end.731

cond.false.703:                                   ; preds = %cond.false.679
  %352 = load i8*, i8** %str, align 8
  %353 = load i64, i64* %i_byte, align 8
  %add.ptr704 = getelementptr inbounds i8, i8* %352, i64 %353
  %arrayidx705 = getelementptr inbounds i8, i8* %add.ptr704, i64 0
  %354 = load i8, i8* %arrayidx705, align 1
  %conv706 = zext i8 %354 to i32
  %and707 = and i32 %conv706, 16
  %tobool708 = icmp ne i32 %and707, 0
  br i1 %tobool708, label %cond.false.726, label %cond.true.709

cond.true.709:                                    ; preds = %cond.false.703
  store i32 3, i32* %len, align 4
  %355 = load i8*, i8** %str, align 8
  %356 = load i64, i64* %i_byte, align 8
  %add.ptr710 = getelementptr inbounds i8, i8* %355, i64 %356
  %arrayidx711 = getelementptr inbounds i8, i8* %add.ptr710, i64 0
  %357 = load i8, i8* %arrayidx711, align 1
  %conv712 = zext i8 %357 to i32
  %and713 = and i32 %conv712, 15
  %shl714 = shl i32 %and713, 12
  %358 = load i8*, i8** %str, align 8
  %359 = load i64, i64* %i_byte, align 8
  %add.ptr715 = getelementptr inbounds i8, i8* %358, i64 %359
  %arrayidx716 = getelementptr inbounds i8, i8* %add.ptr715, i64 1
  %360 = load i8, i8* %arrayidx716, align 1
  %conv717 = zext i8 %360 to i32
  %and718 = and i32 %conv717, 63
  %shl719 = shl i32 %and718, 6
  %or720 = or i32 %shl714, %shl719
  %361 = load i8*, i8** %str, align 8
  %362 = load i64, i64* %i_byte, align 8
  %add.ptr721 = getelementptr inbounds i8, i8* %361, i64 %362
  %arrayidx722 = getelementptr inbounds i8, i8* %add.ptr721, i64 2
  %363 = load i8, i8* %arrayidx722, align 1
  %conv723 = zext i8 %363 to i32
  %and724 = and i32 %conv723, 63
  %or725 = or i32 %or720, %and724
  br label %cond.end.729

cond.false.726:                                   ; preds = %cond.false.703
  %364 = load i8*, i8** %str, align 8
  %365 = load i64, i64* %i_byte, align 8
  %add.ptr727 = getelementptr inbounds i8, i8* %364, i64 %365
  %call728 = call i32 @string_char(i8* %add.ptr727, i8** null, i32* %len)
  br label %cond.end.729

cond.end.729:                                     ; preds = %cond.false.726, %cond.true.709
  %cond730 = phi i32 [ %or725, %cond.true.709 ], [ %call728, %cond.false.726 ]
  br label %cond.end.731

cond.end.731:                                     ; preds = %cond.end.729, %cond.true.685
  %cond732 = phi i32 [ %add702, %cond.true.685 ], [ %cond730, %cond.end.729 ]
  br label %cond.end.733

cond.end.733:                                     ; preds = %cond.end.731, %cond.true.675
  %cond734 = phi i32 [ %conv678, %cond.true.675 ], [ %cond732, %cond.end.731 ]
  store i32 %cond734, i32* %c2666, align 4
  %366 = load i32, i32* %len, align 4
  %conv735 = sext i32 %366 to i64
  %367 = load i64, i64* %i_byte, align 8
  %add736 = add nsw i64 %367, %conv735
  store i64 %add736, i64* %i_byte, align 8
  %368 = load i32, i32* %c2666, align 4
  %cmp737 = icmp eq i32 %368, 92
  br i1 %cmp737, label %land.lhs.true.739, label %if.end.812

land.lhs.true.739:                                ; preds = %cond.end.733
  %369 = load i64, i64* %i_byte, align 8
  %370 = load i64, i64* %size_byte, align 8
  %cmp740 = icmp slt i64 %369, %370
  br i1 %cmp740, label %if.then.742, label %if.end.812

if.then.742:                                      ; preds = %land.lhs.true.739
  %371 = load i64, i64* %i_byte, align 8
  %372 = load i8*, i8** %str, align 8
  %arrayidx743 = getelementptr inbounds i8, i8* %372, i64 %371
  %373 = load i8, i8* %arrayidx743, align 1
  %conv744 = zext i8 %373 to i32
  store i32 %conv744, i32* %leading_code2, align 4
  %374 = load i8*, i8** %str, align 8
  %375 = load i64, i64* %i_byte, align 8
  %add.ptr745 = getelementptr inbounds i8, i8* %374, i64 %375
  %arrayidx746 = getelementptr inbounds i8, i8* %add.ptr745, i64 0
  %376 = load i8, i8* %arrayidx746, align 1
  %conv747 = zext i8 %376 to i32
  %and748 = and i32 %conv747, 128
  %tobool749 = icmp ne i32 %and748, 0
  br i1 %tobool749, label %cond.false.754, label %cond.true.750

cond.true.750:                                    ; preds = %if.then.742
  store i32 1, i32* %len, align 4
  %377 = load i8*, i8** %str, align 8
  %378 = load i64, i64* %i_byte, align 8
  %add.ptr751 = getelementptr inbounds i8, i8* %377, i64 %378
  %arrayidx752 = getelementptr inbounds i8, i8* %add.ptr751, i64 0
  %379 = load i8, i8* %arrayidx752, align 1
  %conv753 = zext i8 %379 to i32
  br label %cond.end.808

cond.false.754:                                   ; preds = %if.then.742
  %380 = load i8*, i8** %str, align 8
  %381 = load i64, i64* %i_byte, align 8
  %add.ptr755 = getelementptr inbounds i8, i8* %380, i64 %381
  %arrayidx756 = getelementptr inbounds i8, i8* %add.ptr755, i64 0
  %382 = load i8, i8* %arrayidx756, align 1
  %conv757 = zext i8 %382 to i32
  %and758 = and i32 %conv757, 32
  %tobool759 = icmp ne i32 %and758, 0
  br i1 %tobool759, label %cond.false.778, label %cond.true.760

cond.true.760:                                    ; preds = %cond.false.754
  store i32 2, i32* %len, align 4
  %383 = load i8*, i8** %str, align 8
  %384 = load i64, i64* %i_byte, align 8
  %add.ptr761 = getelementptr inbounds i8, i8* %383, i64 %384
  %arrayidx762 = getelementptr inbounds i8, i8* %add.ptr761, i64 0
  %385 = load i8, i8* %arrayidx762, align 1
  %conv763 = zext i8 %385 to i32
  %and764 = and i32 %conv763, 31
  %shl765 = shl i32 %and764, 6
  %386 = load i8*, i8** %str, align 8
  %387 = load i64, i64* %i_byte, align 8
  %add.ptr766 = getelementptr inbounds i8, i8* %386, i64 %387
  %arrayidx767 = getelementptr inbounds i8, i8* %add.ptr766, i64 1
  %388 = load i8, i8* %arrayidx767, align 1
  %conv768 = zext i8 %388 to i32
  %and769 = and i32 %conv768, 63
  %or770 = or i32 %shl765, %and769
  %389 = load i8*, i8** %str, align 8
  %390 = load i64, i64* %i_byte, align 8
  %add.ptr771 = getelementptr inbounds i8, i8* %389, i64 %390
  %arrayidx772 = getelementptr inbounds i8, i8* %add.ptr771, i64 0
  %391 = load i8, i8* %arrayidx772, align 1
  %conv773 = zext i8 %391 to i32
  %cmp774 = icmp slt i32 %conv773, 194
  %cond776 = select i1 %cmp774, i32 4194176, i32 0
  %add777 = add nsw i32 %or770, %cond776
  br label %cond.end.806

cond.false.778:                                   ; preds = %cond.false.754
  %392 = load i8*, i8** %str, align 8
  %393 = load i64, i64* %i_byte, align 8
  %add.ptr779 = getelementptr inbounds i8, i8* %392, i64 %393
  %arrayidx780 = getelementptr inbounds i8, i8* %add.ptr779, i64 0
  %394 = load i8, i8* %arrayidx780, align 1
  %conv781 = zext i8 %394 to i32
  %and782 = and i32 %conv781, 16
  %tobool783 = icmp ne i32 %and782, 0
  br i1 %tobool783, label %cond.false.801, label %cond.true.784

cond.true.784:                                    ; preds = %cond.false.778
  store i32 3, i32* %len, align 4
  %395 = load i8*, i8** %str, align 8
  %396 = load i64, i64* %i_byte, align 8
  %add.ptr785 = getelementptr inbounds i8, i8* %395, i64 %396
  %arrayidx786 = getelementptr inbounds i8, i8* %add.ptr785, i64 0
  %397 = load i8, i8* %arrayidx786, align 1
  %conv787 = zext i8 %397 to i32
  %and788 = and i32 %conv787, 15
  %shl789 = shl i32 %and788, 12
  %398 = load i8*, i8** %str, align 8
  %399 = load i64, i64* %i_byte, align 8
  %add.ptr790 = getelementptr inbounds i8, i8* %398, i64 %399
  %arrayidx791 = getelementptr inbounds i8, i8* %add.ptr790, i64 1
  %400 = load i8, i8* %arrayidx791, align 1
  %conv792 = zext i8 %400 to i32
  %and793 = and i32 %conv792, 63
  %shl794 = shl i32 %and793, 6
  %or795 = or i32 %shl789, %shl794
  %401 = load i8*, i8** %str, align 8
  %402 = load i64, i64* %i_byte, align 8
  %add.ptr796 = getelementptr inbounds i8, i8* %401, i64 %402
  %arrayidx797 = getelementptr inbounds i8, i8* %add.ptr796, i64 2
  %403 = load i8, i8* %arrayidx797, align 1
  %conv798 = zext i8 %403 to i32
  %and799 = and i32 %conv798, 63
  %or800 = or i32 %or795, %and799
  br label %cond.end.804

cond.false.801:                                   ; preds = %cond.false.778
  %404 = load i8*, i8** %str, align 8
  %405 = load i64, i64* %i_byte, align 8
  %add.ptr802 = getelementptr inbounds i8, i8* %404, i64 %405
  %call803 = call i32 @string_char(i8* %add.ptr802, i8** null, i32* %len)
  br label %cond.end.804

cond.end.804:                                     ; preds = %cond.false.801, %cond.true.784
  %cond805 = phi i32 [ %or800, %cond.true.784 ], [ %call803, %cond.false.801 ]
  br label %cond.end.806

cond.end.806:                                     ; preds = %cond.end.804, %cond.true.760
  %cond807 = phi i32 [ %add777, %cond.true.760 ], [ %cond805, %cond.end.804 ]
  br label %cond.end.808

cond.end.808:                                     ; preds = %cond.end.806, %cond.true.750
  %cond809 = phi i32 [ %conv753, %cond.true.750 ], [ %cond807, %cond.end.806 ]
  store i32 %cond809, i32* %c2666, align 4
  %406 = load i32, i32* %len, align 4
  %conv810 = sext i32 %406 to i64
  %407 = load i64, i64* %i_byte, align 8
  %add811 = add nsw i64 %407, %conv810
  store i64 %add811, i64* %i_byte, align 8
  br label %if.end.812

if.end.812:                                       ; preds = %cond.end.808, %land.lhs.true.739, %cond.end.733
  %408 = load i32, i32* %c, align 4
  %409 = load i32, i32* %c2666, align 4
  %cmp813 = icmp sgt i32 %408, %409
  br i1 %cmp813, label %if.then.815, label %if.end.816

if.then.815:                                      ; preds = %if.end.812
  br label %while.cond.362

if.end.816:                                       ; preds = %if.end.812
  br i1 true, label %cond.true.817, label %cond.false.821

cond.true.817:                                    ; preds = %if.end.816
  %410 = load i32, i32* %c, align 4
  %add818 = add i32 %410, 0
  %cmp819 = icmp ult i32 %add818, 128
  br i1 %cmp819, label %if.then.826, label %if.end.878

cond.false.821:                                   ; preds = %if.end.816
  %411 = load i32, i32* %c, align 4
  %conv822 = sext i32 %411 to i64
  %add823 = add i64 %conv822, 0
  %cmp824 = icmp ult i64 %add823, 128
  br i1 %cmp824, label %if.then.826, label %if.end.878

if.then.826:                                      ; preds = %cond.false.821, %cond.true.817
  br label %while.cond.827

while.cond.827:                                   ; preds = %while.body.834, %if.then.826
  %412 = load i32, i32* %c, align 4
  %413 = load i32, i32* %c2666, align 4
  %cmp828 = icmp sle i32 %412, %413
  br i1 %cmp828, label %land.rhs.830, label %land.end.833

land.rhs.830:                                     ; preds = %while.cond.827
  %414 = load i32, i32* %c, align 4
  %cmp831 = icmp slt i32 %414, 128
  br label %land.end.833

land.end.833:                                     ; preds = %land.rhs.830, %while.cond.827
  %415 = phi i1 [ false, %while.cond.827 ], [ %cmp831, %land.rhs.830 ]
  br i1 %415, label %while.body.834, label %while.end.838

while.body.834:                                   ; preds = %land.end.833
  %416 = load i32, i32* %c, align 4
  %inc835 = add nsw i32 %416, 1
  store i32 %inc835, i32* %c, align 4
  %idxprom836 = sext i32 %416 to i64
  %arrayidx837 = getelementptr inbounds [256 x i8], [256 x i8]* %fastmap, i32 0, i64 %idxprom836
  store i8 1, i8* %arrayidx837, align 1
  br label %while.cond.827

while.end.838:                                    ; preds = %land.end.833
  %417 = load i32, i32* %c, align 4
  %cmp839 = icmp sle i32 %417, 127
  br i1 %cmp839, label %cond.true.841, label %cond.false.842

cond.true.841:                                    ; preds = %while.end.838
  %418 = load i32, i32* %c, align 4
  br label %cond.end.876

cond.false.842:                                   ; preds = %while.end.838
  %419 = load i32, i32* %c, align 4
  %cmp843 = icmp sle i32 %419, 2047
  br i1 %cmp843, label %cond.true.845, label %cond.false.848

cond.true.845:                                    ; preds = %cond.false.842
  %420 = load i32, i32* %c, align 4
  %shr846 = ashr i32 %420, 6
  %or847 = or i32 192, %shr846
  br label %cond.end.874

cond.false.848:                                   ; preds = %cond.false.842
  %421 = load i32, i32* %c, align 4
  %cmp849 = icmp sle i32 %421, 65535
  br i1 %cmp849, label %cond.true.851, label %cond.false.854

cond.true.851:                                    ; preds = %cond.false.848
  %422 = load i32, i32* %c, align 4
  %shr852 = ashr i32 %422, 12
  %or853 = or i32 224, %shr852
  br label %cond.end.872

cond.false.854:                                   ; preds = %cond.false.848
  %423 = load i32, i32* %c, align 4
  %cmp855 = icmp sle i32 %423, 2097151
  br i1 %cmp855, label %cond.true.857, label %cond.false.860

cond.true.857:                                    ; preds = %cond.false.854
  %424 = load i32, i32* %c, align 4
  %shr858 = ashr i32 %424, 18
  %or859 = or i32 240, %shr858
  br label %cond.end.870

cond.false.860:                                   ; preds = %cond.false.854
  %425 = load i32, i32* %c, align 4
  %cmp861 = icmp sle i32 %425, 4194175
  br i1 %cmp861, label %cond.true.863, label %cond.false.864

cond.true.863:                                    ; preds = %cond.false.860
  br label %cond.end.868

cond.false.864:                                   ; preds = %cond.false.860
  %426 = load i32, i32* %c, align 4
  %shr865 = ashr i32 %426, 6
  %and866 = and i32 %shr865, 1
  %or867 = or i32 192, %and866
  br label %cond.end.868

cond.end.868:                                     ; preds = %cond.false.864, %cond.true.863
  %cond869 = phi i32 [ 248, %cond.true.863 ], [ %or867, %cond.false.864 ]
  br label %cond.end.870

cond.end.870:                                     ; preds = %cond.end.868, %cond.true.857
  %cond871 = phi i32 [ %or859, %cond.true.857 ], [ %cond869, %cond.end.868 ]
  br label %cond.end.872

cond.end.872:                                     ; preds = %cond.end.870, %cond.true.851
  %cond873 = phi i32 [ %or853, %cond.true.851 ], [ %cond871, %cond.end.870 ]
  br label %cond.end.874

cond.end.874:                                     ; preds = %cond.end.872, %cond.true.845
  %cond875 = phi i32 [ %or847, %cond.true.845 ], [ %cond873, %cond.end.872 ]
  br label %cond.end.876

cond.end.876:                                     ; preds = %cond.end.874, %cond.true.841
  %cond877 = phi i32 [ %418, %cond.true.841 ], [ %cond875, %cond.end.874 ]
  store i32 %cond877, i32* %leading_code366, align 4
  br label %if.end.878

if.end.878:                                       ; preds = %cond.end.876, %cond.false.821, %cond.true.817
  br i1 true, label %cond.true.879, label %cond.false.883

cond.true.879:                                    ; preds = %if.end.878
  %427 = load i32, i32* %c, align 4
  %add880 = add i32 %427, 0
  %cmp881 = icmp ult i32 %add880, 128
  br i1 %cmp881, label %if.end.909, label %if.then.888

cond.false.883:                                   ; preds = %if.end.878
  %428 = load i32, i32* %c, align 4
  %conv884 = sext i32 %428 to i64
  %add885 = add i64 %conv884, 0
  %cmp886 = icmp ult i64 %add885, 128
  br i1 %cmp886, label %if.end.909, label %if.then.888

if.then.888:                                      ; preds = %cond.false.883, %cond.true.879
  %429 = load i32, i32* %leading_code2, align 4
  %add890 = add nsw i32 %429, 1
  store i32 %add890, i32* %lim2889, align 4
  br label %while.cond.891

while.cond.891:                                   ; preds = %while.body.894, %if.then.888
  %430 = load i32, i32* %leading_code366, align 4
  %431 = load i32, i32* %lim2889, align 4
  %cmp892 = icmp slt i32 %430, %431
  br i1 %cmp892, label %while.body.894, label %while.end.898

while.body.894:                                   ; preds = %while.cond.891
  %432 = load i32, i32* %leading_code366, align 4
  %inc895 = add nsw i32 %432, 1
  store i32 %inc895, i32* %leading_code366, align 4
  %idxprom896 = sext i32 %432 to i64
  %arrayidx897 = getelementptr inbounds [256 x i8], [256 x i8]* %fastmap, i32 0, i64 %idxprom896
  store i8 1, i8* %arrayidx897, align 1
  br label %while.cond.891

while.end.898:                                    ; preds = %while.cond.891
  %433 = load i32, i32* %c, align 4
  %434 = load i32, i32* %c2666, align 4
  %cmp899 = icmp sle i32 %433, %434
  br i1 %cmp899, label %if.then.901, label %if.end.908

if.then.901:                                      ; preds = %while.end.898
  %435 = load i32, i32* %c, align 4
  %436 = load i32, i32* %n_char_ranges, align 4
  %inc902 = add nsw i32 %436, 1
  store i32 %inc902, i32* %n_char_ranges, align 4
  %idxprom903 = sext i32 %436 to i64
  %437 = load i32*, i32** %char_ranges, align 8
  %arrayidx904 = getelementptr inbounds i32, i32* %437, i64 %idxprom903
  store i32 %435, i32* %arrayidx904, align 4
  %438 = load i32, i32* %c2666, align 4
  %439 = load i32, i32* %n_char_ranges, align 4
  %inc905 = add nsw i32 %439, 1
  store i32 %inc905, i32* %n_char_ranges, align 4
  %idxprom906 = sext i32 %439 to i64
  %440 = load i32*, i32** %char_ranges, align 8
  %arrayidx907 = getelementptr inbounds i32, i32* %440, i64 %idxprom906
  store i32 %438, i32* %arrayidx907, align 4
  br label %if.end.908

if.end.908:                                       ; preds = %if.then.901, %while.end.898
  br label %if.end.909

if.end.909:                                       ; preds = %if.end.908, %cond.false.883, %cond.true.879
  br label %if.end.933

if.else.910:                                      ; preds = %land.lhs.true.660, %if.end.656
  br i1 true, label %cond.true.911, label %cond.false.915

cond.true.911:                                    ; preds = %if.else.910
  %441 = load i32, i32* %c, align 4
  %add912 = add i32 %441, 0
  %cmp913 = icmp ult i32 %add912, 128
  br i1 %cmp913, label %if.then.920, label %if.else.923

cond.false.915:                                   ; preds = %if.else.910
  %442 = load i32, i32* %c, align 4
  %conv916 = sext i32 %442 to i64
  %add917 = add i64 %conv916, 0
  %cmp918 = icmp ult i64 %add917, 128
  br i1 %cmp918, label %if.then.920, label %if.else.923

if.then.920:                                      ; preds = %cond.false.915, %cond.true.911
  %443 = load i32, i32* %c, align 4
  %idxprom921 = sext i32 %443 to i64
  %arrayidx922 = getelementptr inbounds [256 x i8], [256 x i8]* %fastmap, i32 0, i64 %idxprom921
  store i8 1, i8* %arrayidx922, align 1
  br label %if.end.932

if.else.923:                                      ; preds = %cond.false.915, %cond.true.911
  %444 = load i32, i32* %leading_code366, align 4
  %idxprom924 = sext i32 %444 to i64
  %arrayidx925 = getelementptr inbounds [256 x i8], [256 x i8]* %fastmap, i32 0, i64 %idxprom924
  store i8 1, i8* %arrayidx925, align 1
  %445 = load i32, i32* %c, align 4
  %446 = load i32, i32* %n_char_ranges, align 4
  %inc926 = add nsw i32 %446, 1
  store i32 %inc926, i32* %n_char_ranges, align 4
  %idxprom927 = sext i32 %446 to i64
  %447 = load i32*, i32** %char_ranges, align 8
  %arrayidx928 = getelementptr inbounds i32, i32* %447, i64 %idxprom927
  store i32 %445, i32* %arrayidx928, align 4
  %448 = load i32, i32* %c, align 4
  %449 = load i32, i32* %n_char_ranges, align 4
  %inc929 = add nsw i32 %449, 1
  store i32 %inc929, i32* %n_char_ranges, align 4
  %idxprom930 = sext i32 %449 to i64
  %450 = load i32*, i32** %char_ranges, align 8
  %arrayidx931 = getelementptr inbounds i32, i32* %450, i64 %idxprom930
  store i32 %448, i32* %arrayidx931, align 4
  br label %if.end.932

if.end.932:                                       ; preds = %if.else.923, %if.then.920
  br label %if.end.933

if.end.933:                                       ; preds = %if.end.932, %if.end.909
  br label %while.cond.362

while.end.934:                                    ; preds = %if.then.585, %while.cond.362
  %451 = load i8, i8* %multibyte, align 1
  %tobool935 = trunc i8 %451 to i1
  br i1 %tobool935, label %if.end.984, label %land.lhs.true.936

land.lhs.true.936:                                ; preds = %while.end.934
  %452 = load i32, i32* %n_char_ranges, align 4
  %cmp937 = icmp sgt i32 %452, 0
  br i1 %cmp937, label %if.then.939, label %if.end.984

if.then.939:                                      ; preds = %land.lhs.true.936
  %arraydecay940 = getelementptr inbounds [256 x i8], [256 x i8]* %fastmap, i32 0, i32 0
  %add.ptr941 = getelementptr inbounds i8, i8* %arraydecay940, i64 128
  call void @llvm.memset.p0i8.i64(i8* %add.ptr941, i8 0, i64 128, i32 1, i1 false)
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.981, %if.then.939
  %453 = load i64, i64* %i, align 8
  %454 = load i32, i32* %n_char_ranges, align 4
  %conv942 = sext i32 %454 to i64
  %cmp943 = icmp slt i64 %453, %conv942
  br i1 %cmp943, label %for.body, label %for.end.983

for.body:                                         ; preds = %for.cond
  %455 = load i64, i64* %i, align 8
  %456 = load i32*, i32** %char_ranges, align 8
  %arrayidx945 = getelementptr inbounds i32, i32* %456, i64 %455
  %457 = load i32, i32* %arrayidx945, align 4
  store i32 %457, i32* %c1, align 4
  %458 = load i64, i64* %i, align 8
  %add947 = add nsw i64 %458, 1
  %459 = load i32*, i32** %char_ranges, align 8
  %arrayidx948 = getelementptr inbounds i32, i32* %459, i64 %add947
  %460 = load i32, i32* %arrayidx948, align 4
  %add949 = add nsw i32 %460, 1
  store i32 %add949, i32* %lim2946, align 4
  br label %for.cond.950

for.cond.950:                                     ; preds = %for.inc, %for.body
  %461 = load i32, i32* %c1, align 4
  %462 = load i32, i32* %lim2946, align 4
  %cmp951 = icmp slt i32 %461, %462
  br i1 %cmp951, label %for.body.953, label %for.end

for.body.953:                                     ; preds = %for.cond.950
  br i1 true, label %cond.true.954, label %cond.false.958

cond.true.954:                                    ; preds = %for.body.953
  %463 = load i32, i32* %c1, align 4
  %add955 = add i32 %463, 0
  %cmp956 = icmp ult i32 %add955, 128
  br i1 %cmp956, label %cond.true.963, label %cond.false.964

cond.false.958:                                   ; preds = %for.body.953
  %464 = load i32, i32* %c1, align 4
  %conv959 = sext i32 %464 to i64
  %add960 = add i64 %conv959, 0
  %cmp961 = icmp ult i64 %add960, 128
  br i1 %cmp961, label %cond.true.963, label %cond.false.964

cond.true.963:                                    ; preds = %cond.false.958, %cond.true.954
  %465 = load i32, i32* %c1, align 4
  br label %cond.end.972

cond.false.964:                                   ; preds = %cond.false.958, %cond.true.954
  %466 = load i32, i32* %c1, align 4
  %cmp965 = icmp sgt i32 %466, 4194175
  br i1 %cmp965, label %cond.true.967, label %cond.false.969

cond.true.967:                                    ; preds = %cond.false.964
  %467 = load i32, i32* %c1, align 4
  %sub968 = sub nsw i32 %467, 4194048
  br label %cond.end.970

cond.false.969:                                   ; preds = %cond.false.964
  br label %cond.end.970

cond.end.970:                                     ; preds = %cond.false.969, %cond.true.967
  %cond971 = phi i32 [ %sub968, %cond.true.967 ], [ -1, %cond.false.969 ]
  br label %cond.end.972

cond.end.972:                                     ; preds = %cond.end.970, %cond.true.963
  %cond973 = phi i32 [ %465, %cond.true.963 ], [ %cond971, %cond.end.970 ]
  store i32 %cond973, i32* %b, align 4
  %468 = load i32, i32* %b, align 4
  %cmp974 = icmp sge i32 %468, 0
  br i1 %cmp974, label %if.then.976, label %if.end.979

if.then.976:                                      ; preds = %cond.end.972
  %469 = load i32, i32* %b, align 4
  %idxprom977 = sext i32 %469 to i64
  %arrayidx978 = getelementptr inbounds [256 x i8], [256 x i8]* %fastmap, i32 0, i64 %idxprom977
  store i8 1, i8* %arrayidx978, align 1
  br label %if.end.979

if.end.979:                                       ; preds = %if.then.976, %cond.end.972
  br label %for.inc

for.inc:                                          ; preds = %if.end.979
  %470 = load i32, i32* %c1, align 4
  %inc980 = add nsw i32 %470, 1
  store i32 %inc980, i32* %c1, align 4
  br label %for.cond.950

for.end:                                          ; preds = %for.cond.950
  br label %for.inc.981

for.inc.981:                                      ; preds = %for.end
  %471 = load i64, i64* %i, align 8
  %add982 = add nsw i64 %471, 2
  store i64 %add982, i64* %i, align 8
  br label %for.cond

for.end.983:                                      ; preds = %for.cond
  br label %if.end.984

if.end.984:                                       ; preds = %for.end.983, %land.lhs.true.936, %while.end.934
  br label %if.end.985

if.end.985:                                       ; preds = %if.end.984, %if.end.344
  %472 = load i8, i8* %negate, align 1
  %tobool986 = trunc i8 %472 to i1
  br i1 %tobool986, label %if.then.987, label %if.end.1021

if.then.987:                                      ; preds = %if.end.985
  %473 = load i8, i8* %multibyte, align 1
  %tobool988 = trunc i8 %473 to i1
  br i1 %tobool988, label %if.else.1000, label %if.then.989

if.then.989:                                      ; preds = %if.then.987
  store i64 0, i64* %i, align 8
  br label %for.cond.990

for.cond.990:                                     ; preds = %for.inc.997, %if.then.989
  %474 = load i64, i64* %i, align 8
  %cmp991 = icmp ult i64 %474, 256
  br i1 %cmp991, label %for.body.993, label %for.end.999

for.body.993:                                     ; preds = %for.cond.990
  %475 = load i64, i64* %i, align 8
  %arrayidx994 = getelementptr inbounds [256 x i8], [256 x i8]* %fastmap, i32 0, i64 %475
  %476 = load i8, i8* %arrayidx994, align 1
  %conv995 = sext i8 %476 to i32
  %xor = xor i32 %conv995, 1
  %conv996 = trunc i32 %xor to i8
  store i8 %conv996, i8* %arrayidx994, align 1
  br label %for.inc.997

for.inc.997:                                      ; preds = %for.body.993
  %477 = load i64, i64* %i, align 8
  %inc998 = add nsw i64 %477, 1
  store i64 %inc998, i64* %i, align 8
  br label %for.cond.990

for.end.999:                                      ; preds = %for.cond.990
  br label %if.end.1020

if.else.1000:                                     ; preds = %if.then.987
  store i64 0, i64* %i, align 8
  br label %for.cond.1001

for.cond.1001:                                    ; preds = %for.inc.1009, %if.else.1000
  %478 = load i64, i64* %i, align 8
  %cmp1002 = icmp slt i64 %478, 128
  br i1 %cmp1002, label %for.body.1004, label %for.end.1011

for.body.1004:                                    ; preds = %for.cond.1001
  %479 = load i64, i64* %i, align 8
  %arrayidx1005 = getelementptr inbounds [256 x i8], [256 x i8]* %fastmap, i32 0, i64 %479
  %480 = load i8, i8* %arrayidx1005, align 1
  %conv1006 = sext i8 %480 to i32
  %xor1007 = xor i32 %conv1006, 1
  %conv1008 = trunc i32 %xor1007 to i8
  store i8 %conv1008, i8* %arrayidx1005, align 1
  br label %for.inc.1009

for.inc.1009:                                     ; preds = %for.body.1004
  %481 = load i64, i64* %i, align 8
  %inc1010 = add nsw i64 %481, 1
  store i64 %inc1010, i64* %i, align 8
  br label %for.cond.1001

for.end.1011:                                     ; preds = %for.cond.1001
  br label %for.cond.1012

for.cond.1012:                                    ; preds = %for.inc.1017, %for.end.1011
  %482 = load i64, i64* %i, align 8
  %cmp1013 = icmp ult i64 %482, 256
  br i1 %cmp1013, label %for.body.1015, label %for.end.1019

for.body.1015:                                    ; preds = %for.cond.1012
  %483 = load i64, i64* %i, align 8
  %arrayidx1016 = getelementptr inbounds [256 x i8], [256 x i8]* %fastmap, i32 0, i64 %483
  store i8 1, i8* %arrayidx1016, align 1
  br label %for.inc.1017

for.inc.1017:                                     ; preds = %for.body.1015
  %484 = load i64, i64* %i, align 8
  %inc1018 = add nsw i64 %484, 1
  store i64 %inc1018, i64* %i, align 8
  br label %for.cond.1012

for.end.1019:                                     ; preds = %for.cond.1012
  br label %if.end.1020

if.end.1020:                                      ; preds = %for.end.1019, %for.end.999
  br label %if.end.1021

if.end.1021:                                      ; preds = %if.end.1020, %if.end.985
  %485 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt1022 = getelementptr inbounds %struct.buffer, %struct.buffer* %485, i32 0, i32 75
  %486 = load i64, i64* %pt1022, align 8
  %add1023 = add nsw i64 %486, 0
  store i64 %add1023, i64* %start_point, align 8
  %487 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt1024 = getelementptr inbounds %struct.buffer, %struct.buffer* %487, i32 0, i32 75
  %488 = load i64, i64* %pt1024, align 8
  %add1025 = add nsw i64 %488, 0
  store i64 %add1025, i64* %pos, align 8
  %489 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte1026 = getelementptr inbounds %struct.buffer, %struct.buffer* %489, i32 0, i32 76
  %490 = load i64, i64* %pt_byte1026, align 8
  %add1027 = add nsw i64 %490, 0
  store i64 %add1027, i64* %pos_byte, align 8
  %491 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte1028 = getelementptr inbounds %struct.buffer, %struct.buffer* %491, i32 0, i32 76
  %492 = load i64, i64* %pt_byte1028, align 8
  %493 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %493, i32 0, i32 73
  %494 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %494, i32 0, i32 3
  %495 = load i64, i64* %gpt_byte, align 8
  %cmp1029 = icmp sge i64 %492, %495
  br i1 %cmp1029, label %cond.true.1031, label %cond.false.1033

cond.true.1031:                                   ; preds = %if.end.1021
  %496 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1032 = getelementptr inbounds %struct.buffer, %struct.buffer* %496, i32 0, i32 73
  %497 = load %struct.buffer_text*, %struct.buffer_text** %text1032, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %497, i32 0, i32 5
  %498 = load i64, i64* %gap_size, align 8
  br label %cond.end.1034

cond.false.1033:                                  ; preds = %if.end.1021
  br label %cond.end.1034

cond.end.1034:                                    ; preds = %cond.false.1033, %cond.true.1031
  %cond1035 = phi i64 [ %498, %cond.true.1031 ], [ 0, %cond.false.1033 ]
  %499 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte1036 = getelementptr inbounds %struct.buffer, %struct.buffer* %499, i32 0, i32 76
  %500 = load i64, i64* %pt_byte1036, align 8
  %add1037 = add nsw i64 %cond1035, %500
  %501 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1038 = getelementptr inbounds %struct.buffer, %struct.buffer* %501, i32 0, i32 73
  %502 = load %struct.buffer_text*, %struct.buffer_text** %text1038, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %502, i32 0, i32 0
  %503 = load i8*, i8** %beg, align 8
  %add.ptr1039 = getelementptr inbounds i8, i8* %503, i64 %add1037
  %add.ptr1040 = getelementptr inbounds i8, i8* %add.ptr1039, i64 -1
  store i8* %add.ptr1040, i8** %p, align 8
  %504 = load i8, i8* %forwardp.addr, align 1
  %tobool1041 = trunc i8 %504 to i1
  br i1 %tobool1041, label %if.then.1042, label %if.else.1095

if.then.1042:                                     ; preds = %cond.end.1034
  %505 = load i64, i64* %lim.addr, align 8
  %shr1043 = ashr i64 %505, 2
  %506 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1044 = getelementptr inbounds %struct.buffer, %struct.buffer* %506, i32 0, i32 73
  %507 = load %struct.buffer_text*, %struct.buffer_text** %text1044, align 8
  %gpt = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %507, i32 0, i32 1
  %508 = load i64, i64* %gpt, align 8
  %cmp1045 = icmp eq i64 %shr1043, %508
  br i1 %cmp1045, label %cond.true.1047, label %cond.false.1054

cond.true.1047:                                   ; preds = %if.then.1042
  %509 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1048 = getelementptr inbounds %struct.buffer, %struct.buffer* %509, i32 0, i32 73
  %510 = load %struct.buffer_text*, %struct.buffer_text** %text1048, align 8
  %beg1049 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %510, i32 0, i32 0
  %511 = load i8*, i8** %beg1049, align 8
  %512 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1050 = getelementptr inbounds %struct.buffer, %struct.buffer* %512, i32 0, i32 73
  %513 = load %struct.buffer_text*, %struct.buffer_text** %text1050, align 8
  %gpt_byte1051 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %513, i32 0, i32 3
  %514 = load i64, i64* %gpt_byte1051, align 8
  %add.ptr1052 = getelementptr inbounds i8, i8* %511, i64 %514
  %add.ptr1053 = getelementptr inbounds i8, i8* %add.ptr1052, i64 -1
  br label %cond.end.1073

cond.false.1054:                                  ; preds = %if.then.1042
  %515 = load i64, i64* %lim.addr, align 8
  %shr1055 = ashr i64 %515, 2
  %516 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1056 = getelementptr inbounds %struct.buffer, %struct.buffer* %516, i32 0, i32 73
  %517 = load %struct.buffer_text*, %struct.buffer_text** %text1056, align 8
  %gpt1057 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %517, i32 0, i32 1
  %518 = load i64, i64* %gpt1057, align 8
  %cmp1058 = icmp sge i64 %shr1055, %518
  br i1 %cmp1058, label %cond.true.1060, label %cond.false.1063

cond.true.1060:                                   ; preds = %cond.false.1054
  %519 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1061 = getelementptr inbounds %struct.buffer, %struct.buffer* %519, i32 0, i32 73
  %520 = load %struct.buffer_text*, %struct.buffer_text** %text1061, align 8
  %gap_size1062 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %520, i32 0, i32 5
  %521 = load i64, i64* %gap_size1062, align 8
  br label %cond.end.1064

cond.false.1063:                                  ; preds = %cond.false.1054
  br label %cond.end.1064

cond.end.1064:                                    ; preds = %cond.false.1063, %cond.true.1060
  %cond1065 = phi i64 [ %521, %cond.true.1060 ], [ 0, %cond.false.1063 ]
  %522 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %523 = load i64, i64* %lim.addr, align 8
  %shr1066 = ashr i64 %523, 2
  %call1067 = call i64 @buf_charpos_to_bytepos(%struct.buffer* %522, i64 %shr1066)
  %add1068 = add nsw i64 %cond1065, %call1067
  %524 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1069 = getelementptr inbounds %struct.buffer, %struct.buffer* %524, i32 0, i32 73
  %525 = load %struct.buffer_text*, %struct.buffer_text** %text1069, align 8
  %beg1070 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %525, i32 0, i32 0
  %526 = load i8*, i8** %beg1070, align 8
  %add.ptr1071 = getelementptr inbounds i8, i8* %526, i64 %add1068
  %add.ptr1072 = getelementptr inbounds i8, i8* %add.ptr1071, i64 -1
  br label %cond.end.1073

cond.end.1073:                                    ; preds = %cond.end.1064, %cond.true.1047
  %cond1074 = phi i8* [ %add.ptr1053, %cond.true.1047 ], [ %add.ptr1072, %cond.end.1064 ]
  store i8* %cond1074, i8** %endp, align 8
  %527 = load i64, i64* %pos, align 8
  %528 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1075 = getelementptr inbounds %struct.buffer, %struct.buffer* %528, i32 0, i32 73
  %529 = load %struct.buffer_text*, %struct.buffer_text** %text1075, align 8
  %gpt1076 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %529, i32 0, i32 1
  %530 = load i64, i64* %gpt1076, align 8
  %cmp1077 = icmp slt i64 %527, %530
  br i1 %cmp1077, label %land.lhs.true.1079, label %cond.false.1092

land.lhs.true.1079:                               ; preds = %cond.end.1073
  %531 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1080 = getelementptr inbounds %struct.buffer, %struct.buffer* %531, i32 0, i32 73
  %532 = load %struct.buffer_text*, %struct.buffer_text** %text1080, align 8
  %gpt1081 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %532, i32 0, i32 1
  %533 = load i64, i64* %gpt1081, align 8
  %534 = load i64, i64* %lim.addr, align 8
  %shr1082 = ashr i64 %534, 2
  %cmp1083 = icmp slt i64 %533, %shr1082
  br i1 %cmp1083, label %cond.true.1085, label %cond.false.1092

cond.true.1085:                                   ; preds = %land.lhs.true.1079
  %535 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1086 = getelementptr inbounds %struct.buffer, %struct.buffer* %535, i32 0, i32 73
  %536 = load %struct.buffer_text*, %struct.buffer_text** %text1086, align 8
  %beg1087 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %536, i32 0, i32 0
  %537 = load i8*, i8** %beg1087, align 8
  %538 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1088 = getelementptr inbounds %struct.buffer, %struct.buffer* %538, i32 0, i32 73
  %539 = load %struct.buffer_text*, %struct.buffer_text** %text1088, align 8
  %gpt_byte1089 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %539, i32 0, i32 3
  %540 = load i64, i64* %gpt_byte1089, align 8
  %add.ptr1090 = getelementptr inbounds i8, i8* %537, i64 %540
  %add.ptr1091 = getelementptr inbounds i8, i8* %add.ptr1090, i64 -1
  br label %cond.end.1093

cond.false.1092:                                  ; preds = %land.lhs.true.1079, %cond.end.1073
  %541 = load i8*, i8** %endp, align 8
  br label %cond.end.1093

cond.end.1093:                                    ; preds = %cond.false.1092, %cond.true.1085
  %cond1094 = phi i8* [ %add.ptr1091, %cond.true.1085 ], [ %541, %cond.false.1092 ]
  store i8* %cond1094, i8** %stop, align 8
  br label %if.end.1137

if.else.1095:                                     ; preds = %cond.end.1034
  %542 = load i64, i64* %lim.addr, align 8
  %shr1096 = ashr i64 %542, 2
  %543 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1097 = getelementptr inbounds %struct.buffer, %struct.buffer* %543, i32 0, i32 73
  %544 = load %struct.buffer_text*, %struct.buffer_text** %text1097, align 8
  %gpt1098 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %544, i32 0, i32 1
  %545 = load i64, i64* %gpt1098, align 8
  %cmp1099 = icmp sge i64 %shr1096, %545
  br i1 %cmp1099, label %cond.true.1101, label %cond.false.1104

cond.true.1101:                                   ; preds = %if.else.1095
  %546 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1102 = getelementptr inbounds %struct.buffer, %struct.buffer* %546, i32 0, i32 73
  %547 = load %struct.buffer_text*, %struct.buffer_text** %text1102, align 8
  %gap_size1103 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %547, i32 0, i32 5
  %548 = load i64, i64* %gap_size1103, align 8
  br label %cond.end.1105

cond.false.1104:                                  ; preds = %if.else.1095
  br label %cond.end.1105

cond.end.1105:                                    ; preds = %cond.false.1104, %cond.true.1101
  %cond1106 = phi i64 [ %548, %cond.true.1101 ], [ 0, %cond.false.1104 ]
  %549 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %550 = load i64, i64* %lim.addr, align 8
  %shr1107 = ashr i64 %550, 2
  %call1108 = call i64 @buf_charpos_to_bytepos(%struct.buffer* %549, i64 %shr1107)
  %add1109 = add nsw i64 %cond1106, %call1108
  %551 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1110 = getelementptr inbounds %struct.buffer, %struct.buffer* %551, i32 0, i32 73
  %552 = load %struct.buffer_text*, %struct.buffer_text** %text1110, align 8
  %beg1111 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %552, i32 0, i32 0
  %553 = load i8*, i8** %beg1111, align 8
  %add.ptr1112 = getelementptr inbounds i8, i8* %553, i64 %add1109
  %add.ptr1113 = getelementptr inbounds i8, i8* %add.ptr1112, i64 -1
  store i8* %add.ptr1113, i8** %endp, align 8
  %554 = load i64, i64* %pos, align 8
  %555 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1114 = getelementptr inbounds %struct.buffer, %struct.buffer* %555, i32 0, i32 73
  %556 = load %struct.buffer_text*, %struct.buffer_text** %text1114, align 8
  %gpt1115 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %556, i32 0, i32 1
  %557 = load i64, i64* %gpt1115, align 8
  %cmp1116 = icmp sge i64 %554, %557
  br i1 %cmp1116, label %land.lhs.true.1118, label %cond.false.1134

land.lhs.true.1118:                               ; preds = %cond.end.1105
  %558 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1119 = getelementptr inbounds %struct.buffer, %struct.buffer* %558, i32 0, i32 73
  %559 = load %struct.buffer_text*, %struct.buffer_text** %text1119, align 8
  %gpt1120 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %559, i32 0, i32 1
  %560 = load i64, i64* %gpt1120, align 8
  %561 = load i64, i64* %lim.addr, align 8
  %shr1121 = ashr i64 %561, 2
  %cmp1122 = icmp sgt i64 %560, %shr1121
  br i1 %cmp1122, label %cond.true.1124, label %cond.false.1134

cond.true.1124:                                   ; preds = %land.lhs.true.1118
  %562 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1125 = getelementptr inbounds %struct.buffer, %struct.buffer* %562, i32 0, i32 73
  %563 = load %struct.buffer_text*, %struct.buffer_text** %text1125, align 8
  %beg1126 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %563, i32 0, i32 0
  %564 = load i8*, i8** %beg1126, align 8
  %565 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1127 = getelementptr inbounds %struct.buffer, %struct.buffer* %565, i32 0, i32 73
  %566 = load %struct.buffer_text*, %struct.buffer_text** %text1127, align 8
  %gpt_byte1128 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %566, i32 0, i32 3
  %567 = load i64, i64* %gpt_byte1128, align 8
  %add.ptr1129 = getelementptr inbounds i8, i8* %564, i64 %567
  %568 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1130 = getelementptr inbounds %struct.buffer, %struct.buffer* %568, i32 0, i32 73
  %569 = load %struct.buffer_text*, %struct.buffer_text** %text1130, align 8
  %gap_size1131 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %569, i32 0, i32 5
  %570 = load i64, i64* %gap_size1131, align 8
  %add.ptr1132 = getelementptr inbounds i8, i8* %add.ptr1129, i64 %570
  %add.ptr1133 = getelementptr inbounds i8, i8* %add.ptr1132, i64 -1
  br label %cond.end.1135

cond.false.1134:                                  ; preds = %land.lhs.true.1118, %cond.end.1105
  %571 = load i8*, i8** %endp, align 8
  br label %cond.end.1135

cond.end.1135:                                    ; preds = %cond.false.1134, %cond.true.1124
  %cond1136 = phi i8* [ %add.ptr1133, %cond.true.1124 ], [ %571, %cond.false.1134 ]
  store i8* %cond1136, i8** %stop, align 8
  br label %if.end.1137

if.end.1137:                                      ; preds = %cond.end.1135, %cond.end.1093
  store i8 1, i8* @immediate_quit, align 1
  call void @SETUP_BUFFER_SYNTAX_TABLE()
  %572 = load i8, i8* %forwardp.addr, align 1
  %tobool1138 = trunc i8 %572 to i1
  br i1 %tobool1138, label %if.then.1139, label %if.else.1317

if.then.1139:                                     ; preds = %if.end.1137
  %573 = load i8, i8* %multibyte, align 1
  %tobool1140 = trunc i8 %573 to i1
  br i1 %tobool1140, label %if.then.1141, label %if.else.1275

if.then.1141:                                     ; preds = %if.then.1139
  br label %while.body.1143

while.body.1143:                                  ; preds = %if.then.1141, %fwd_ok
  %574 = load i8*, i8** %p, align 8
  %575 = load i8*, i8** %stop, align 8
  %cmp1144 = icmp uge i8* %574, %575
  br i1 %cmp1144, label %if.then.1146, label %if.end.1160

if.then.1146:                                     ; preds = %while.body.1143
  %576 = load i8*, i8** %p, align 8
  %577 = load i8*, i8** %endp, align 8
  %cmp1147 = icmp uge i8* %576, %577
  br i1 %cmp1147, label %if.then.1149, label %if.end.1150

if.then.1149:                                     ; preds = %if.then.1146
  br label %while.end.1274

if.end.1150:                                      ; preds = %if.then.1146
  %578 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1151 = getelementptr inbounds %struct.buffer, %struct.buffer* %578, i32 0, i32 73
  %579 = load %struct.buffer_text*, %struct.buffer_text** %text1151, align 8
  %beg1152 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %579, i32 0, i32 0
  %580 = load i8*, i8** %beg1152, align 8
  %581 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1153 = getelementptr inbounds %struct.buffer, %struct.buffer* %581, i32 0, i32 73
  %582 = load %struct.buffer_text*, %struct.buffer_text** %text1153, align 8
  %gpt_byte1154 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %582, i32 0, i32 3
  %583 = load i64, i64* %gpt_byte1154, align 8
  %add.ptr1155 = getelementptr inbounds i8, i8* %580, i64 %583
  %584 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1156 = getelementptr inbounds %struct.buffer, %struct.buffer* %584, i32 0, i32 73
  %585 = load %struct.buffer_text*, %struct.buffer_text** %text1156, align 8
  %gap_size1157 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %585, i32 0, i32 5
  %586 = load i64, i64* %gap_size1157, align 8
  %add.ptr1158 = getelementptr inbounds i8, i8* %add.ptr1155, i64 %586
  %add.ptr1159 = getelementptr inbounds i8, i8* %add.ptr1158, i64 -1
  store i8* %add.ptr1159, i8** %p, align 8
  %587 = load i8*, i8** %endp, align 8
  store i8* %587, i8** %stop, align 8
  br label %if.end.1160

if.end.1160:                                      ; preds = %if.end.1150, %while.body.1143
  %588 = load i8*, i8** %p, align 8
  %arrayidx1161 = getelementptr inbounds i8, i8* %588, i64 0
  %589 = load i8, i8* %arrayidx1161, align 1
  %conv1162 = zext i8 %589 to i32
  %and1163 = and i32 %conv1162, 128
  %tobool1164 = icmp ne i32 %and1163, 0
  br i1 %tobool1164, label %cond.false.1168, label %cond.true.1165

cond.true.1165:                                   ; preds = %if.end.1160
  store i32 1, i32* %nbytes, align 4
  %590 = load i8*, i8** %p, align 8
  %arrayidx1166 = getelementptr inbounds i8, i8* %590, i64 0
  %591 = load i8, i8* %arrayidx1166, align 1
  %conv1167 = zext i8 %591 to i32
  br label %cond.end.1213

cond.false.1168:                                  ; preds = %if.end.1160
  %592 = load i8*, i8** %p, align 8
  %arrayidx1169 = getelementptr inbounds i8, i8* %592, i64 0
  %593 = load i8, i8* %arrayidx1169, align 1
  %conv1170 = zext i8 %593 to i32
  %and1171 = and i32 %conv1170, 32
  %tobool1172 = icmp ne i32 %and1171, 0
  br i1 %tobool1172, label %cond.false.1188, label %cond.true.1173

cond.true.1173:                                   ; preds = %cond.false.1168
  store i32 2, i32* %nbytes, align 4
  %594 = load i8*, i8** %p, align 8
  %arrayidx1174 = getelementptr inbounds i8, i8* %594, i64 0
  %595 = load i8, i8* %arrayidx1174, align 1
  %conv1175 = zext i8 %595 to i32
  %and1176 = and i32 %conv1175, 31
  %shl1177 = shl i32 %and1176, 6
  %596 = load i8*, i8** %p, align 8
  %arrayidx1178 = getelementptr inbounds i8, i8* %596, i64 1
  %597 = load i8, i8* %arrayidx1178, align 1
  %conv1179 = zext i8 %597 to i32
  %and1180 = and i32 %conv1179, 63
  %or1181 = or i32 %shl1177, %and1180
  %598 = load i8*, i8** %p, align 8
  %arrayidx1182 = getelementptr inbounds i8, i8* %598, i64 0
  %599 = load i8, i8* %arrayidx1182, align 1
  %conv1183 = zext i8 %599 to i32
  %cmp1184 = icmp slt i32 %conv1183, 194
  %cond1186 = select i1 %cmp1184, i32 4194176, i32 0
  %add1187 = add nsw i32 %or1181, %cond1186
  br label %cond.end.1211

cond.false.1188:                                  ; preds = %cond.false.1168
  %600 = load i8*, i8** %p, align 8
  %arrayidx1189 = getelementptr inbounds i8, i8* %600, i64 0
  %601 = load i8, i8* %arrayidx1189, align 1
  %conv1190 = zext i8 %601 to i32
  %and1191 = and i32 %conv1190, 16
  %tobool1192 = icmp ne i32 %and1191, 0
  br i1 %tobool1192, label %cond.false.1207, label %cond.true.1193

cond.true.1193:                                   ; preds = %cond.false.1188
  store i32 3, i32* %nbytes, align 4
  %602 = load i8*, i8** %p, align 8
  %arrayidx1194 = getelementptr inbounds i8, i8* %602, i64 0
  %603 = load i8, i8* %arrayidx1194, align 1
  %conv1195 = zext i8 %603 to i32
  %and1196 = and i32 %conv1195, 15
  %shl1197 = shl i32 %and1196, 12
  %604 = load i8*, i8** %p, align 8
  %arrayidx1198 = getelementptr inbounds i8, i8* %604, i64 1
  %605 = load i8, i8* %arrayidx1198, align 1
  %conv1199 = zext i8 %605 to i32
  %and1200 = and i32 %conv1199, 63
  %shl1201 = shl i32 %and1200, 6
  %or1202 = or i32 %shl1197, %shl1201
  %606 = load i8*, i8** %p, align 8
  %arrayidx1203 = getelementptr inbounds i8, i8* %606, i64 2
  %607 = load i8, i8* %arrayidx1203, align 1
  %conv1204 = zext i8 %607 to i32
  %and1205 = and i32 %conv1204, 63
  %or1206 = or i32 %or1202, %and1205
  br label %cond.end.1209

cond.false.1207:                                  ; preds = %cond.false.1188
  %608 = load i8*, i8** %p, align 8
  %call1208 = call i32 @string_char(i8* %608, i8** null, i32* %nbytes)
  br label %cond.end.1209

cond.end.1209:                                    ; preds = %cond.false.1207, %cond.true.1193
  %cond1210 = phi i32 [ %or1206, %cond.true.1193 ], [ %call1208, %cond.false.1207 ]
  br label %cond.end.1211

cond.end.1211:                                    ; preds = %cond.end.1209, %cond.true.1173
  %cond1212 = phi i32 [ %add1187, %cond.true.1173 ], [ %cond1210, %cond.end.1209 ]
  br label %cond.end.1213

cond.end.1213:                                    ; preds = %cond.end.1211, %cond.true.1165
  %cond1214 = phi i32 [ %conv1167, %cond.true.1165 ], [ %cond1212, %cond.end.1211 ]
  store i32 %cond1214, i32* %c, align 4
  %609 = load i64, i64* %iso_classes, align 8
  %call1215 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1216 = icmp eq i64 %609, %call1215
  br i1 %cmp1216, label %if.end.1225, label %land.lhs.true.1218

land.lhs.true.1218:                               ; preds = %cond.end.1213
  %610 = load i32, i32* %c, align 4
  %611 = load i64, i64* %iso_classes, align 8
  %call1219 = call zeroext i1 @in_classes(i32 %610, i64 %611)
  br i1 %call1219, label %if.then.1221, label %if.end.1225

if.then.1221:                                     ; preds = %land.lhs.true.1218
  %612 = load i8, i8* %negate, align 1
  %tobool1222 = trunc i8 %612 to i1
  br i1 %tobool1222, label %if.then.1223, label %if.else.1224

if.then.1223:                                     ; preds = %if.then.1221
  br label %while.end.1274

if.else.1224:                                     ; preds = %if.then.1221
  br label %fwd_ok

if.end.1225:                                      ; preds = %land.lhs.true.1218, %cond.end.1213
  %613 = load i8*, i8** %p, align 8
  %614 = load i8, i8* %613, align 1
  %idxprom1226 = zext i8 %614 to i64
  %arrayidx1227 = getelementptr inbounds [256 x i8], [256 x i8]* %fastmap, i32 0, i64 %idxprom1226
  %615 = load i8, i8* %arrayidx1227, align 1
  %tobool1228 = icmp ne i8 %615, 0
  br i1 %tobool1228, label %if.end.1230, label %if.then.1229

if.then.1229:                                     ; preds = %if.end.1225
  br label %while.end.1274

if.end.1230:                                      ; preds = %if.end.1225
  br i1 true, label %cond.true.1231, label %cond.false.1235

cond.true.1231:                                   ; preds = %if.end.1230
  %616 = load i32, i32* %c, align 4
  %add1232 = add i32 %616, 0
  %cmp1233 = icmp ult i32 %add1232, 128
  br i1 %cmp1233, label %if.end.1268, label %if.then.1240

cond.false.1235:                                  ; preds = %if.end.1230
  %617 = load i32, i32* %c, align 4
  %conv1236 = sext i32 %617 to i64
  %add1237 = add i64 %conv1236, 0
  %cmp1238 = icmp ult i64 %add1237, 128
  br i1 %cmp1238, label %if.end.1268, label %if.then.1240

if.then.1240:                                     ; preds = %cond.false.1235, %cond.true.1231
  store i64 0, i64* %i, align 8
  br label %for.cond.1241

for.cond.1241:                                    ; preds = %for.inc.1256, %if.then.1240
  %618 = load i64, i64* %i, align 8
  %619 = load i32, i32* %n_char_ranges, align 4
  %conv1242 = sext i32 %619 to i64
  %cmp1243 = icmp slt i64 %618, %conv1242
  br i1 %cmp1243, label %for.body.1245, label %for.end.1258

for.body.1245:                                    ; preds = %for.cond.1241
  %620 = load i32, i32* %c, align 4
  %621 = load i64, i64* %i, align 8
  %622 = load i32*, i32** %char_ranges, align 8
  %arrayidx1246 = getelementptr inbounds i32, i32* %622, i64 %621
  %623 = load i32, i32* %arrayidx1246, align 4
  %cmp1247 = icmp sge i32 %620, %623
  br i1 %cmp1247, label %land.lhs.true.1249, label %if.end.1255

land.lhs.true.1249:                               ; preds = %for.body.1245
  %624 = load i32, i32* %c, align 4
  %625 = load i64, i64* %i, align 8
  %add1250 = add nsw i64 %625, 1
  %626 = load i32*, i32** %char_ranges, align 8
  %arrayidx1251 = getelementptr inbounds i32, i32* %626, i64 %add1250
  %627 = load i32, i32* %arrayidx1251, align 4
  %cmp1252 = icmp sle i32 %624, %627
  br i1 %cmp1252, label %if.then.1254, label %if.end.1255

if.then.1254:                                     ; preds = %land.lhs.true.1249
  br label %for.end.1258

if.end.1255:                                      ; preds = %land.lhs.true.1249, %for.body.1245
  br label %for.inc.1256

for.inc.1256:                                     ; preds = %if.end.1255
  %628 = load i64, i64* %i, align 8
  %add1257 = add nsw i64 %628, 2
  store i64 %add1257, i64* %i, align 8
  br label %for.cond.1241

for.end.1258:                                     ; preds = %if.then.1254, %for.cond.1241
  %629 = load i8, i8* %negate, align 1
  %tobool1259 = trunc i8 %629 to i1
  %conv1260 = zext i1 %tobool1259 to i32
  %630 = load i64, i64* %i, align 8
  %631 = load i32, i32* %n_char_ranges, align 4
  %conv1261 = sext i32 %631 to i64
  %cmp1262 = icmp slt i64 %630, %conv1261
  %conv1263 = zext i1 %cmp1262 to i32
  %xor1264 = xor i32 %conv1260, %conv1263
  %tobool1265 = icmp ne i32 %xor1264, 0
  br i1 %tobool1265, label %if.end.1267, label %if.then.1266

if.then.1266:                                     ; preds = %for.end.1258
  br label %while.end.1274

if.end.1267:                                      ; preds = %for.end.1258
  br label %if.end.1268

if.end.1268:                                      ; preds = %if.end.1267, %cond.false.1235, %cond.true.1231
  br label %fwd_ok

fwd_ok:                                           ; preds = %if.end.1268, %if.else.1224
  %632 = load i32, i32* %nbytes, align 4
  %633 = load i8*, i8** %p, align 8
  %idx.ext1269 = sext i32 %632 to i64
  %add.ptr1270 = getelementptr inbounds i8, i8* %633, i64 %idx.ext1269
  store i8* %add.ptr1270, i8** %p, align 8
  %634 = load i64, i64* %pos, align 8
  %inc1271 = add nsw i64 %634, 1
  store i64 %inc1271, i64* %pos, align 8
  %635 = load i32, i32* %nbytes, align 4
  %conv1272 = sext i32 %635 to i64
  %636 = load i64, i64* %pos_byte, align 8
  %add1273 = add nsw i64 %636, %conv1272
  store i64 %add1273, i64* %pos_byte, align 8
  br label %while.body.1143

while.end.1274:                                   ; preds = %if.then.1266, %if.then.1229, %if.then.1223, %if.then.1149
  br label %if.end.1316

if.else.1275:                                     ; preds = %if.then.1139
  br label %while.body.1277

while.body.1277:                                  ; preds = %if.else.1275, %fwd_unibyte_ok
  %637 = load i8*, i8** %p, align 8
  %638 = load i8*, i8** %stop, align 8
  %cmp1278 = icmp uge i8* %637, %638
  br i1 %cmp1278, label %if.then.1280, label %if.end.1294

if.then.1280:                                     ; preds = %while.body.1277
  %639 = load i8*, i8** %p, align 8
  %640 = load i8*, i8** %endp, align 8
  %cmp1281 = icmp uge i8* %639, %640
  br i1 %cmp1281, label %if.then.1283, label %if.end.1284

if.then.1283:                                     ; preds = %if.then.1280
  br label %while.end.1315

if.end.1284:                                      ; preds = %if.then.1280
  %641 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1285 = getelementptr inbounds %struct.buffer, %struct.buffer* %641, i32 0, i32 73
  %642 = load %struct.buffer_text*, %struct.buffer_text** %text1285, align 8
  %beg1286 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %642, i32 0, i32 0
  %643 = load i8*, i8** %beg1286, align 8
  %644 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1287 = getelementptr inbounds %struct.buffer, %struct.buffer* %644, i32 0, i32 73
  %645 = load %struct.buffer_text*, %struct.buffer_text** %text1287, align 8
  %gpt_byte1288 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %645, i32 0, i32 3
  %646 = load i64, i64* %gpt_byte1288, align 8
  %add.ptr1289 = getelementptr inbounds i8, i8* %643, i64 %646
  %647 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1290 = getelementptr inbounds %struct.buffer, %struct.buffer* %647, i32 0, i32 73
  %648 = load %struct.buffer_text*, %struct.buffer_text** %text1290, align 8
  %gap_size1291 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %648, i32 0, i32 5
  %649 = load i64, i64* %gap_size1291, align 8
  %add.ptr1292 = getelementptr inbounds i8, i8* %add.ptr1289, i64 %649
  %add.ptr1293 = getelementptr inbounds i8, i8* %add.ptr1292, i64 -1
  store i8* %add.ptr1293, i8** %p, align 8
  %650 = load i8*, i8** %endp, align 8
  store i8* %650, i8** %stop, align 8
  br label %if.end.1294

if.end.1294:                                      ; preds = %if.end.1284, %while.body.1277
  %651 = load i64, i64* %iso_classes, align 8
  %call1295 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1296 = icmp eq i64 %651, %call1295
  br i1 %cmp1296, label %if.end.1306, label %land.lhs.true.1298

land.lhs.true.1298:                               ; preds = %if.end.1294
  %652 = load i8*, i8** %p, align 8
  %653 = load i8, i8* %652, align 1
  %conv1299 = zext i8 %653 to i32
  %654 = load i64, i64* %iso_classes, align 8
  %call1300 = call zeroext i1 @in_classes(i32 %conv1299, i64 %654)
  br i1 %call1300, label %if.then.1302, label %if.end.1306

if.then.1302:                                     ; preds = %land.lhs.true.1298
  %655 = load i8, i8* %negate, align 1
  %tobool1303 = trunc i8 %655 to i1
  br i1 %tobool1303, label %if.then.1304, label %if.else.1305

if.then.1304:                                     ; preds = %if.then.1302
  br label %while.end.1315

if.else.1305:                                     ; preds = %if.then.1302
  br label %fwd_unibyte_ok

if.end.1306:                                      ; preds = %land.lhs.true.1298, %if.end.1294
  %656 = load i8*, i8** %p, align 8
  %657 = load i8, i8* %656, align 1
  %idxprom1307 = zext i8 %657 to i64
  %arrayidx1308 = getelementptr inbounds [256 x i8], [256 x i8]* %fastmap, i32 0, i64 %idxprom1307
  %658 = load i8, i8* %arrayidx1308, align 1
  %tobool1309 = icmp ne i8 %658, 0
  br i1 %tobool1309, label %if.end.1311, label %if.then.1310

if.then.1310:                                     ; preds = %if.end.1306
  br label %while.end.1315

if.end.1311:                                      ; preds = %if.end.1306
  br label %fwd_unibyte_ok

fwd_unibyte_ok:                                   ; preds = %if.end.1311, %if.else.1305
  %659 = load i8*, i8** %p, align 8
  %incdec.ptr1312 = getelementptr inbounds i8, i8* %659, i32 1
  store i8* %incdec.ptr1312, i8** %p, align 8
  %660 = load i64, i64* %pos, align 8
  %inc1313 = add nsw i64 %660, 1
  store i64 %inc1313, i64* %pos, align 8
  %661 = load i64, i64* %pos_byte, align 8
  %inc1314 = add nsw i64 %661, 1
  store i64 %inc1314, i64* %pos_byte, align 8
  br label %while.body.1277

while.end.1315:                                   ; preds = %if.then.1310, %if.then.1304, %if.then.1283
  br label %if.end.1316

if.end.1316:                                      ; preds = %while.end.1315, %while.end.1274
  br label %if.end.1502

if.else.1317:                                     ; preds = %if.end.1137
  %662 = load i8, i8* %multibyte, align 1
  %tobool1318 = trunc i8 %662 to i1
  br i1 %tobool1318, label %if.then.1319, label %if.else.1461

if.then.1319:                                     ; preds = %if.else.1317
  br label %while.body.1321

while.body.1321:                                  ; preds = %if.then.1319, %back_ok
  %663 = load i8*, i8** %p, align 8
  %664 = load i8*, i8** %stop, align 8
  %cmp1322 = icmp ule i8* %663, %664
  br i1 %cmp1322, label %if.then.1324, label %if.end.1335

if.then.1324:                                     ; preds = %while.body.1321
  %665 = load i8*, i8** %p, align 8
  %666 = load i8*, i8** %endp, align 8
  %cmp1325 = icmp ule i8* %665, %666
  br i1 %cmp1325, label %if.then.1327, label %if.end.1328

if.then.1327:                                     ; preds = %if.then.1324
  br label %while.end.1460

if.end.1328:                                      ; preds = %if.then.1324
  %667 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1329 = getelementptr inbounds %struct.buffer, %struct.buffer* %667, i32 0, i32 73
  %668 = load %struct.buffer_text*, %struct.buffer_text** %text1329, align 8
  %beg1330 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %668, i32 0, i32 0
  %669 = load i8*, i8** %beg1330, align 8
  %670 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1331 = getelementptr inbounds %struct.buffer, %struct.buffer* %670, i32 0, i32 73
  %671 = load %struct.buffer_text*, %struct.buffer_text** %text1331, align 8
  %gpt_byte1332 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %671, i32 0, i32 3
  %672 = load i64, i64* %gpt_byte1332, align 8
  %add.ptr1333 = getelementptr inbounds i8, i8* %669, i64 %672
  %add.ptr1334 = getelementptr inbounds i8, i8* %add.ptr1333, i64 -1
  store i8* %add.ptr1334, i8** %p, align 8
  %673 = load i8*, i8** %endp, align 8
  store i8* %673, i8** %stop, align 8
  br label %if.end.1335

if.end.1335:                                      ; preds = %if.end.1328, %while.body.1321
  %674 = load i8*, i8** %p, align 8
  store i8* %674, i8** %prev_p, align 8
  br label %while.cond.1336

while.cond.1336:                                  ; preds = %while.body.1346, %if.end.1335
  %675 = load i8*, i8** %p, align 8
  %incdec.ptr1337 = getelementptr inbounds i8, i8* %675, i32 -1
  store i8* %incdec.ptr1337, i8** %p, align 8
  %676 = load i8*, i8** %stop, align 8
  %cmp1338 = icmp uge i8* %incdec.ptr1337, %676
  br i1 %cmp1338, label %land.rhs.1340, label %land.end.1345

land.rhs.1340:                                    ; preds = %while.cond.1336
  %677 = load i8*, i8** %p, align 8
  %678 = load i8, i8* %677, align 1
  %conv1341 = zext i8 %678 to i32
  %and1342 = and i32 %conv1341, 192
  %cmp1343 = icmp ne i32 %and1342, 128
  %lnot = xor i1 %cmp1343, true
  br label %land.end.1345

land.end.1345:                                    ; preds = %land.rhs.1340, %while.cond.1336
  %679 = phi i1 [ false, %while.cond.1336 ], [ %lnot, %land.rhs.1340 ]
  br i1 %679, label %while.body.1346, label %while.end.1347

while.body.1346:                                  ; preds = %land.end.1345
  br label %while.cond.1336

while.end.1347:                                   ; preds = %land.end.1345
  %680 = load i8*, i8** %p, align 8
  %arrayidx1348 = getelementptr inbounds i8, i8* %680, i64 0
  %681 = load i8, i8* %arrayidx1348, align 1
  %conv1349 = zext i8 %681 to i32
  %and1350 = and i32 %conv1349, 128
  %tobool1351 = icmp ne i32 %and1350, 0
  br i1 %tobool1351, label %cond.false.1355, label %cond.true.1352

cond.true.1352:                                   ; preds = %while.end.1347
  %682 = load i8*, i8** %p, align 8
  %arrayidx1353 = getelementptr inbounds i8, i8* %682, i64 0
  %683 = load i8, i8* %arrayidx1353, align 1
  %conv1354 = zext i8 %683 to i32
  br label %cond.end.1400

cond.false.1355:                                  ; preds = %while.end.1347
  %684 = load i8*, i8** %p, align 8
  %arrayidx1356 = getelementptr inbounds i8, i8* %684, i64 0
  %685 = load i8, i8* %arrayidx1356, align 1
  %conv1357 = zext i8 %685 to i32
  %and1358 = and i32 %conv1357, 32
  %tobool1359 = icmp ne i32 %and1358, 0
  br i1 %tobool1359, label %cond.false.1375, label %cond.true.1360

cond.true.1360:                                   ; preds = %cond.false.1355
  %686 = load i8*, i8** %p, align 8
  %arrayidx1361 = getelementptr inbounds i8, i8* %686, i64 0
  %687 = load i8, i8* %arrayidx1361, align 1
  %conv1362 = zext i8 %687 to i32
  %and1363 = and i32 %conv1362, 31
  %shl1364 = shl i32 %and1363, 6
  %688 = load i8*, i8** %p, align 8
  %arrayidx1365 = getelementptr inbounds i8, i8* %688, i64 1
  %689 = load i8, i8* %arrayidx1365, align 1
  %conv1366 = zext i8 %689 to i32
  %and1367 = and i32 %conv1366, 63
  %or1368 = or i32 %shl1364, %and1367
  %690 = load i8*, i8** %p, align 8
  %arrayidx1369 = getelementptr inbounds i8, i8* %690, i64 0
  %691 = load i8, i8* %arrayidx1369, align 1
  %conv1370 = zext i8 %691 to i32
  %cmp1371 = icmp slt i32 %conv1370, 194
  %cond1373 = select i1 %cmp1371, i32 4194176, i32 0
  %add1374 = add nsw i32 %or1368, %cond1373
  br label %cond.end.1398

cond.false.1375:                                  ; preds = %cond.false.1355
  %692 = load i8*, i8** %p, align 8
  %arrayidx1376 = getelementptr inbounds i8, i8* %692, i64 0
  %693 = load i8, i8* %arrayidx1376, align 1
  %conv1377 = zext i8 %693 to i32
  %and1378 = and i32 %conv1377, 16
  %tobool1379 = icmp ne i32 %and1378, 0
  br i1 %tobool1379, label %cond.false.1394, label %cond.true.1380

cond.true.1380:                                   ; preds = %cond.false.1375
  %694 = load i8*, i8** %p, align 8
  %arrayidx1381 = getelementptr inbounds i8, i8* %694, i64 0
  %695 = load i8, i8* %arrayidx1381, align 1
  %conv1382 = zext i8 %695 to i32
  %and1383 = and i32 %conv1382, 15
  %shl1384 = shl i32 %and1383, 12
  %696 = load i8*, i8** %p, align 8
  %arrayidx1385 = getelementptr inbounds i8, i8* %696, i64 1
  %697 = load i8, i8* %arrayidx1385, align 1
  %conv1386 = zext i8 %697 to i32
  %and1387 = and i32 %conv1386, 63
  %shl1388 = shl i32 %and1387, 6
  %or1389 = or i32 %shl1384, %shl1388
  %698 = load i8*, i8** %p, align 8
  %arrayidx1390 = getelementptr inbounds i8, i8* %698, i64 2
  %699 = load i8, i8* %arrayidx1390, align 1
  %conv1391 = zext i8 %699 to i32
  %and1392 = and i32 %conv1391, 63
  %or1393 = or i32 %or1389, %and1392
  br label %cond.end.1396

cond.false.1394:                                  ; preds = %cond.false.1375
  %700 = load i8*, i8** %p, align 8
  %call1395 = call i32 @string_char(i8* %700, i8** null, i32* null)
  br label %cond.end.1396

cond.end.1396:                                    ; preds = %cond.false.1394, %cond.true.1380
  %cond1397 = phi i32 [ %or1393, %cond.true.1380 ], [ %call1395, %cond.false.1394 ]
  br label %cond.end.1398

cond.end.1398:                                    ; preds = %cond.end.1396, %cond.true.1360
  %cond1399 = phi i32 [ %add1374, %cond.true.1360 ], [ %cond1397, %cond.end.1396 ]
  br label %cond.end.1400

cond.end.1400:                                    ; preds = %cond.end.1398, %cond.true.1352
  %cond1401 = phi i32 [ %conv1354, %cond.true.1352 ], [ %cond1399, %cond.end.1398 ]
  store i32 %cond1401, i32* %c, align 4
  %701 = load i64, i64* %iso_classes, align 8
  %call1402 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1403 = icmp eq i64 %701, %call1402
  br i1 %cmp1403, label %if.end.1412, label %land.lhs.true.1405

land.lhs.true.1405:                               ; preds = %cond.end.1400
  %702 = load i32, i32* %c, align 4
  %703 = load i64, i64* %iso_classes, align 8
  %call1406 = call zeroext i1 @in_classes(i32 %702, i64 %703)
  br i1 %call1406, label %if.then.1408, label %if.end.1412

if.then.1408:                                     ; preds = %land.lhs.true.1405
  %704 = load i8, i8* %negate, align 1
  %tobool1409 = trunc i8 %704 to i1
  br i1 %tobool1409, label %if.then.1410, label %if.else.1411

if.then.1410:                                     ; preds = %if.then.1408
  br label %while.end.1460

if.else.1411:                                     ; preds = %if.then.1408
  br label %back_ok

if.end.1412:                                      ; preds = %land.lhs.true.1405, %cond.end.1400
  %705 = load i8*, i8** %p, align 8
  %706 = load i8, i8* %705, align 1
  %idxprom1413 = zext i8 %706 to i64
  %arrayidx1414 = getelementptr inbounds [256 x i8], [256 x i8]* %fastmap, i32 0, i64 %idxprom1413
  %707 = load i8, i8* %arrayidx1414, align 1
  %tobool1415 = icmp ne i8 %707, 0
  br i1 %tobool1415, label %if.end.1417, label %if.then.1416

if.then.1416:                                     ; preds = %if.end.1412
  br label %while.end.1460

if.end.1417:                                      ; preds = %if.end.1412
  br i1 true, label %cond.true.1418, label %cond.false.1422

cond.true.1418:                                   ; preds = %if.end.1417
  %708 = load i32, i32* %c, align 4
  %add1419 = add i32 %708, 0
  %cmp1420 = icmp ult i32 %add1419, 128
  br i1 %cmp1420, label %if.end.1455, label %if.then.1427

cond.false.1422:                                  ; preds = %if.end.1417
  %709 = load i32, i32* %c, align 4
  %conv1423 = sext i32 %709 to i64
  %add1424 = add i64 %conv1423, 0
  %cmp1425 = icmp ult i64 %add1424, 128
  br i1 %cmp1425, label %if.end.1455, label %if.then.1427

if.then.1427:                                     ; preds = %cond.false.1422, %cond.true.1418
  store i64 0, i64* %i, align 8
  br label %for.cond.1428

for.cond.1428:                                    ; preds = %for.inc.1443, %if.then.1427
  %710 = load i64, i64* %i, align 8
  %711 = load i32, i32* %n_char_ranges, align 4
  %conv1429 = sext i32 %711 to i64
  %cmp1430 = icmp slt i64 %710, %conv1429
  br i1 %cmp1430, label %for.body.1432, label %for.end.1445

for.body.1432:                                    ; preds = %for.cond.1428
  %712 = load i32, i32* %c, align 4
  %713 = load i64, i64* %i, align 8
  %714 = load i32*, i32** %char_ranges, align 8
  %arrayidx1433 = getelementptr inbounds i32, i32* %714, i64 %713
  %715 = load i32, i32* %arrayidx1433, align 4
  %cmp1434 = icmp sge i32 %712, %715
  br i1 %cmp1434, label %land.lhs.true.1436, label %if.end.1442

land.lhs.true.1436:                               ; preds = %for.body.1432
  %716 = load i32, i32* %c, align 4
  %717 = load i64, i64* %i, align 8
  %add1437 = add nsw i64 %717, 1
  %718 = load i32*, i32** %char_ranges, align 8
  %arrayidx1438 = getelementptr inbounds i32, i32* %718, i64 %add1437
  %719 = load i32, i32* %arrayidx1438, align 4
  %cmp1439 = icmp sle i32 %716, %719
  br i1 %cmp1439, label %if.then.1441, label %if.end.1442

if.then.1441:                                     ; preds = %land.lhs.true.1436
  br label %for.end.1445

if.end.1442:                                      ; preds = %land.lhs.true.1436, %for.body.1432
  br label %for.inc.1443

for.inc.1443:                                     ; preds = %if.end.1442
  %720 = load i64, i64* %i, align 8
  %add1444 = add nsw i64 %720, 2
  store i64 %add1444, i64* %i, align 8
  br label %for.cond.1428

for.end.1445:                                     ; preds = %if.then.1441, %for.cond.1428
  %721 = load i8, i8* %negate, align 1
  %tobool1446 = trunc i8 %721 to i1
  %conv1447 = zext i1 %tobool1446 to i32
  %722 = load i64, i64* %i, align 8
  %723 = load i32, i32* %n_char_ranges, align 4
  %conv1448 = sext i32 %723 to i64
  %cmp1449 = icmp slt i64 %722, %conv1448
  %conv1450 = zext i1 %cmp1449 to i32
  %xor1451 = xor i32 %conv1447, %conv1450
  %tobool1452 = icmp ne i32 %xor1451, 0
  br i1 %tobool1452, label %if.end.1454, label %if.then.1453

if.then.1453:                                     ; preds = %for.end.1445
  br label %while.end.1460

if.end.1454:                                      ; preds = %for.end.1445
  br label %if.end.1455

if.end.1455:                                      ; preds = %if.end.1454, %cond.false.1422, %cond.true.1418
  br label %back_ok

back_ok:                                          ; preds = %if.end.1455, %if.else.1411
  %724 = load i64, i64* %pos, align 8
  %dec = add nsw i64 %724, -1
  store i64 %dec, i64* %pos, align 8
  %725 = load i8*, i8** %prev_p, align 8
  %726 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast1456 = ptrtoint i8* %725 to i64
  %sub.ptr.rhs.cast1457 = ptrtoint i8* %726 to i64
  %sub.ptr.sub1458 = sub i64 %sub.ptr.lhs.cast1456, %sub.ptr.rhs.cast1457
  %727 = load i64, i64* %pos_byte, align 8
  %sub1459 = sub nsw i64 %727, %sub.ptr.sub1458
  store i64 %sub1459, i64* %pos_byte, align 8
  br label %while.body.1321

while.end.1460:                                   ; preds = %if.then.1453, %if.then.1416, %if.then.1410, %if.then.1327
  br label %if.end.1501

if.else.1461:                                     ; preds = %if.else.1317
  br label %while.body.1463

while.body.1463:                                  ; preds = %if.else.1461, %back_unibyte_ok
  %728 = load i8*, i8** %p, align 8
  %729 = load i8*, i8** %stop, align 8
  %cmp1464 = icmp ule i8* %728, %729
  br i1 %cmp1464, label %if.then.1466, label %if.end.1477

if.then.1466:                                     ; preds = %while.body.1463
  %730 = load i8*, i8** %p, align 8
  %731 = load i8*, i8** %endp, align 8
  %cmp1467 = icmp ule i8* %730, %731
  br i1 %cmp1467, label %if.then.1469, label %if.end.1470

if.then.1469:                                     ; preds = %if.then.1466
  br label %while.end.1500

if.end.1470:                                      ; preds = %if.then.1466
  %732 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1471 = getelementptr inbounds %struct.buffer, %struct.buffer* %732, i32 0, i32 73
  %733 = load %struct.buffer_text*, %struct.buffer_text** %text1471, align 8
  %beg1472 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %733, i32 0, i32 0
  %734 = load i8*, i8** %beg1472, align 8
  %735 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1473 = getelementptr inbounds %struct.buffer, %struct.buffer* %735, i32 0, i32 73
  %736 = load %struct.buffer_text*, %struct.buffer_text** %text1473, align 8
  %gpt_byte1474 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %736, i32 0, i32 3
  %737 = load i64, i64* %gpt_byte1474, align 8
  %add.ptr1475 = getelementptr inbounds i8, i8* %734, i64 %737
  %add.ptr1476 = getelementptr inbounds i8, i8* %add.ptr1475, i64 -1
  store i8* %add.ptr1476, i8** %p, align 8
  %738 = load i8*, i8** %endp, align 8
  store i8* %738, i8** %stop, align 8
  br label %if.end.1477

if.end.1477:                                      ; preds = %if.end.1470, %while.body.1463
  %739 = load i64, i64* %iso_classes, align 8
  %call1478 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1479 = icmp eq i64 %739, %call1478
  br i1 %cmp1479, label %if.end.1490, label %land.lhs.true.1481

land.lhs.true.1481:                               ; preds = %if.end.1477
  %740 = load i8*, i8** %p, align 8
  %arrayidx1482 = getelementptr inbounds i8, i8* %740, i64 -1
  %741 = load i8, i8* %arrayidx1482, align 1
  %conv1483 = zext i8 %741 to i32
  %742 = load i64, i64* %iso_classes, align 8
  %call1484 = call zeroext i1 @in_classes(i32 %conv1483, i64 %742)
  br i1 %call1484, label %if.then.1486, label %if.end.1490

if.then.1486:                                     ; preds = %land.lhs.true.1481
  %743 = load i8, i8* %negate, align 1
  %tobool1487 = trunc i8 %743 to i1
  br i1 %tobool1487, label %if.then.1488, label %if.else.1489

if.then.1488:                                     ; preds = %if.then.1486
  br label %while.end.1500

if.else.1489:                                     ; preds = %if.then.1486
  br label %back_unibyte_ok

if.end.1490:                                      ; preds = %land.lhs.true.1481, %if.end.1477
  %744 = load i8*, i8** %p, align 8
  %arrayidx1491 = getelementptr inbounds i8, i8* %744, i64 -1
  %745 = load i8, i8* %arrayidx1491, align 1
  %idxprom1492 = zext i8 %745 to i64
  %arrayidx1493 = getelementptr inbounds [256 x i8], [256 x i8]* %fastmap, i32 0, i64 %idxprom1492
  %746 = load i8, i8* %arrayidx1493, align 1
  %tobool1494 = icmp ne i8 %746, 0
  br i1 %tobool1494, label %if.end.1496, label %if.then.1495

if.then.1495:                                     ; preds = %if.end.1490
  br label %while.end.1500

if.end.1496:                                      ; preds = %if.end.1490
  br label %back_unibyte_ok

back_unibyte_ok:                                  ; preds = %if.end.1496, %if.else.1489
  %747 = load i8*, i8** %p, align 8
  %incdec.ptr1497 = getelementptr inbounds i8, i8* %747, i32 -1
  store i8* %incdec.ptr1497, i8** %p, align 8
  %748 = load i64, i64* %pos, align 8
  %dec1498 = add nsw i64 %748, -1
  store i64 %dec1498, i64* %pos, align 8
  %749 = load i64, i64* %pos_byte, align 8
  %dec1499 = add nsw i64 %749, -1
  store i64 %dec1499, i64* %pos_byte, align 8
  br label %while.body.1463

while.end.1500:                                   ; preds = %if.then.1495, %if.then.1488, %if.then.1469
  br label %if.end.1501

if.end.1501:                                      ; preds = %while.end.1500, %while.end.1460
  br label %if.end.1502

if.end.1502:                                      ; preds = %if.end.1501, %if.end.1316
  %750 = load i64, i64* %pos, align 8
  %751 = load i64, i64* %pos_byte, align 8
  call void @set_point_both(i64 %750, i64 %751)
  store i8 0, i8* @immediate_quit, align 1
  br label %do.body.1503

do.body.1503:                                     ; preds = %if.end.1502
  %752 = load i8, i8* %sa_must_free, align 1
  %tobool1504 = trunc i8 %752 to i1
  br i1 %tobool1504, label %if.then.1505, label %if.end.1508

if.then.1505:                                     ; preds = %do.body.1503
  store i8 0, i8* %sa_must_free, align 1
  %753 = load i64, i64* %sa_count, align 8
  %call1506 = call i64 @builtin_lisp_symbol(i32 0)
  %call1507 = call i64 @unbind_to(i64 %753, i64 %call1506)
  br label %if.end.1508

if.end.1508:                                      ; preds = %if.then.1505, %do.body.1503
  br label %do.end.1509

do.end.1509:                                      ; preds = %if.end.1508
  %754 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt1510 = getelementptr inbounds %struct.buffer, %struct.buffer* %754, i32 0, i32 75
  %755 = load i64, i64* %pt1510, align 8
  %add1511 = add nsw i64 %755, 0
  %756 = load i64, i64* %start_point, align 8
  %sub1512 = sub nsw i64 %add1511, %756
  %shl1513 = shl i64 %sub1512, 2
  %add1514 = add i64 %shl1513, 2
  ret i64 %add1514
}

; Function Attrs: nounwind uwtable
define i64 @Fskip_chars_backward(i64 %string, i64 %lim) #0 {
entry:
  %string.addr = alloca i64, align 8
  %lim.addr = alloca i64, align 8
  store i64 %string, i64* %string.addr, align 8
  store i64 %lim, i64* %lim.addr, align 8
  %0 = load i64, i64* %string.addr, align 8
  %1 = load i64, i64* %lim.addr, align 8
  %call = call i64 @skip_chars(i1 zeroext false, i64 %0, i64 %1, i1 zeroext true)
  ret i64 %call
}

; Function Attrs: nounwind uwtable
define i64 @Fskip_syntax_forward(i64 %syntax, i64 %lim) #0 {
entry:
  %syntax.addr = alloca i64, align 8
  %lim.addr = alloca i64, align 8
  store i64 %syntax, i64* %syntax.addr, align 8
  store i64 %lim, i64* %lim.addr, align 8
  %0 = load i64, i64* %syntax.addr, align 8
  %1 = load i64, i64* %lim.addr, align 8
  %call = call i64 @skip_syntaxes(i1 zeroext true, i64 %0, i64 %1)
  ret i64 %call
}

; Function Attrs: nounwind uwtable
define internal i64 @skip_syntaxes(i1 zeroext %forwardp, i64 %string, i64 %lim) #0 {
entry:
  %retval = alloca i64, align 8
  %forwardp.addr = alloca i8, align 1
  %string.addr = alloca i64, align 8
  %lim.addr = alloca i64, align 8
  %c = alloca i32, align 4
  %fastmap = alloca [256 x i8], align 16
  %negate = alloca i8, align 1
  %i = alloca i64, align 8
  %i_byte = alloca i64, align 8
  %multibyte = alloca i8, align 1
  %size_byte = alloca i64, align 8
  %str = alloca i8*, align 8
  %start_point = alloca i64, align 8
  %pos = alloca i64, align 8
  %pos_byte = alloca i64, align 8
  %p = alloca i8*, align 8
  %endp = alloca i8*, align 8
  %stop = alloca i8*, align 8
  %nbytes = alloca i32, align 4
  %prev_p = alloca i8*, align 8
  %frombool = zext i1 %forwardp to i8
  store i8 %frombool, i8* %forwardp.addr, align 1
  store i64 %string, i64* %string.addr, align 8
  store i64 %lim, i64* %lim.addr, align 8
  store i8 0, i8* %negate, align 1
  %0 = load i64, i64* %string.addr, align 8
  call void @CHECK_STRING(i64 %0)
  %1 = load i64, i64* %lim.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i8, i8* %forwardp.addr, align 1
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %3 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %3, i32 0, i32 79
  %4 = load i64, i64* %zv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %5 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %5, i32 0, i32 77
  %6 = load i64, i64* %begv, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %4, %cond.true ], [ %6, %cond.false ]
  %shl = shl i64 %cond, 2
  %add = add i64 %shl, 2
  store i64 %add, i64* %lim.addr, align 8
  br label %if.end.19

if.else:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.else
  %7 = load i64, i64* %lim.addr, align 8
  %and = and i64 %7, 7
  %conv = trunc i64 %and to i32
  %cmp1 = icmp eq i32 %conv, 1
  br i1 %cmp1, label %land.lhs.true, label %if.else.9

land.lhs.true:                                    ; preds = %do.body
  %8 = load i64, i64* %lim.addr, align 8
  %call3 = call i32 @XMISCTYPE(i64 %8)
  %cmp4 = icmp eq i32 %call3, 24236
  br i1 %cmp4, label %if.then.6, label %if.else.9

if.then.6:                                        ; preds = %land.lhs.true
  %9 = load i64, i64* %lim.addr, align 8
  %call7 = call i64 @marker_position(i64 %9)
  %call8 = call i64 @make_natnum(i64 %call7)
  store i64 %call8, i64* %lim.addr, align 8
  br label %if.end

if.else.9:                                        ; preds = %land.lhs.true, %do.body
  %10 = load i64, i64* %lim.addr, align 8
  %and10 = and i64 %10, 7
  %conv11 = trunc i64 %and10 to i32
  %and12 = and i32 %conv11, -5
  %cmp13 = icmp eq i32 %and12, 2
  br i1 %cmp13, label %cond.true.15, label %cond.false.16

cond.true.15:                                     ; preds = %if.else.9
  br label %cond.end.18

cond.false.16:                                    ; preds = %if.else.9
  %call17 = call i64 @builtin_lisp_symbol(i32 558)
  %11 = load i64, i64* %lim.addr, align 8
  %12 = call i64 @wrong_type_argument(i64 %call17, i64 %11) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end.18

cond.end.18:                                      ; preds = %13, %cond.true.15
  br label %if.end

if.end:                                           ; preds = %cond.end.18, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.19

if.end.19:                                        ; preds = %do.end, %cond.end
  %14 = load i64, i64* %lim.addr, align 8
  %shr = ashr i64 %14, 2
  %15 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv20 = getelementptr inbounds %struct.buffer, %struct.buffer* %15, i32 0, i32 79
  %16 = load i64, i64* %zv20, align 8
  %cmp21 = icmp sgt i64 %shr, %16
  br i1 %cmp21, label %if.then.23, label %if.end.26

if.then.23:                                       ; preds = %if.end.19
  %17 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv24 = getelementptr inbounds %struct.buffer, %struct.buffer* %17, i32 0, i32 79
  %18 = load i64, i64* %zv24, align 8
  %call25 = call i64 @make_natnum(i64 %18)
  store i64 %call25, i64* %lim.addr, align 8
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.23, %if.end.19
  %19 = load i64, i64* %lim.addr, align 8
  %shr27 = ashr i64 %19, 2
  %20 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv28 = getelementptr inbounds %struct.buffer, %struct.buffer* %20, i32 0, i32 77
  %21 = load i64, i64* %begv28, align 8
  %cmp29 = icmp slt i64 %shr27, %21
  br i1 %cmp29, label %if.then.31, label %if.end.34

if.then.31:                                       ; preds = %if.end.26
  %22 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv32 = getelementptr inbounds %struct.buffer, %struct.buffer* %22, i32 0, i32 77
  %23 = load i64, i64* %begv32, align 8
  %call33 = call i64 @make_natnum(i64 %23)
  store i64 %call33, i64* %lim.addr, align 8
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.31, %if.end.26
  %24 = load i8, i8* %forwardp.addr, align 1
  %tobool35 = trunc i8 %24 to i1
  br i1 %tobool35, label %cond.true.37, label %cond.false.42

cond.true.37:                                     ; preds = %if.end.34
  %25 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt = getelementptr inbounds %struct.buffer, %struct.buffer* %25, i32 0, i32 75
  %26 = load i64, i64* %pt, align 8
  %add38 = add nsw i64 %26, 0
  %27 = load i64, i64* %lim.addr, align 8
  %shr39 = ashr i64 %27, 2
  %cmp40 = icmp sge i64 %add38, %shr39
  br i1 %cmp40, label %if.then.48, label %if.end.49

cond.false.42:                                    ; preds = %if.end.34
  %28 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt43 = getelementptr inbounds %struct.buffer, %struct.buffer* %28, i32 0, i32 75
  %29 = load i64, i64* %pt43, align 8
  %add44 = add nsw i64 %29, 0
  %30 = load i64, i64* %lim.addr, align 8
  %shr45 = ashr i64 %30, 2
  %cmp46 = icmp sle i64 %add44, %shr45
  br i1 %cmp46, label %if.then.48, label %if.end.49

if.then.48:                                       ; preds = %cond.false.42, %cond.true.37
  store i64 2, i64* %retval
  br label %return

if.end.49:                                        ; preds = %cond.false.42, %cond.true.37
  %31 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %31, i32 0, i32 39
  %32 = load i64, i64* %enable_multibyte_characters_, align 8
  %call50 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp51 = icmp eq i64 %32, %call50
  br i1 %cmp51, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end.49
  %33 = load i64, i64* %lim.addr, align 8
  %shr53 = ashr i64 %33, 2
  %34 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt54 = getelementptr inbounds %struct.buffer, %struct.buffer* %34, i32 0, i32 75
  %35 = load i64, i64* %pt54, align 8
  %add55 = add nsw i64 %35, 0
  %sub = sub nsw i64 %shr53, %add55
  %36 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %37 = load i64, i64* %lim.addr, align 8
  %shr56 = ashr i64 %37, 2
  %call57 = call i64 @buf_charpos_to_bytepos(%struct.buffer* %36, i64 %shr56)
  %38 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %38, i32 0, i32 76
  %39 = load i64, i64* %pt_byte, align 8
  %add58 = add nsw i64 %39, 0
  %sub59 = sub nsw i64 %call57, %add58
  %cmp60 = icmp ne i64 %sub, %sub59
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end.49
  %40 = phi i1 [ false, %if.end.49 ], [ %cmp60, %land.rhs ]
  %frombool62 = zext i1 %40 to i8
  store i8 %frombool62, i8* %multibyte, align 1
  %41 = bitcast [256 x i8]* %fastmap to i8*
  call void @llvm.memset.p0i8.i64(i8* %41, i8 0, i64 256, i32 16, i1 false)
  %42 = load i64, i64* %string.addr, align 8
  %call63 = call i64 @SBYTES(i64 %42)
  %43 = load i64, i64* %string.addr, align 8
  %call64 = call i64 @SCHARS(i64 %43)
  %cmp65 = icmp sgt i64 %call63, %call64
  br i1 %cmp65, label %if.then.67, label %if.end.69

if.then.67:                                       ; preds = %land.end
  %44 = load i64, i64* %string.addr, align 8
  %call68 = call i64 @string_make_unibyte(i64 %44)
  store i64 %call68, i64* %string.addr, align 8
  br label %if.end.69

if.end.69:                                        ; preds = %if.then.67, %land.end
  %45 = load i64, i64* %string.addr, align 8
  %call70 = call i8* @SDATA(i64 %45)
  store i8* %call70, i8** %str, align 8
  %46 = load i64, i64* %string.addr, align 8
  %call71 = call i64 @SBYTES(i64 %46)
  store i64 %call71, i64* %size_byte, align 8
  store i64 0, i64* %i_byte, align 8
  %47 = load i64, i64* %i_byte, align 8
  %48 = load i64, i64* %size_byte, align 8
  %cmp72 = icmp slt i64 %47, %48
  br i1 %cmp72, label %land.lhs.true.74, label %if.end.80

land.lhs.true.74:                                 ; preds = %if.end.69
  %49 = load i64, i64* %string.addr, align 8
  %call75 = call zeroext i8 @SREF(i64 %49, i64 0)
  %conv76 = zext i8 %call75 to i32
  %cmp77 = icmp eq i32 %conv76, 94
  br i1 %cmp77, label %if.then.79, label %if.end.80

if.then.79:                                       ; preds = %land.lhs.true.74
  store i8 1, i8* %negate, align 1
  %50 = load i64, i64* %i_byte, align 8
  %inc = add nsw i64 %50, 1
  store i64 %inc, i64* %i_byte, align 8
  br label %if.end.80

if.end.80:                                        ; preds = %if.then.79, %land.lhs.true.74, %if.end.69
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end.80
  %51 = load i64, i64* %i_byte, align 8
  %52 = load i64, i64* %size_byte, align 8
  %cmp81 = icmp slt i64 %51, %52
  br i1 %cmp81, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %53 = load i64, i64* %i_byte, align 8
  %inc83 = add nsw i64 %53, 1
  store i64 %inc83, i64* %i_byte, align 8
  %54 = load i8*, i8** %str, align 8
  %arrayidx = getelementptr inbounds i8, i8* %54, i64 %53
  %55 = load i8, i8* %arrayidx, align 1
  %conv84 = zext i8 %55 to i32
  store i32 %conv84, i32* %c, align 4
  %56 = load i32, i32* %c, align 4
  %idxprom = sext i32 %56 to i64
  %arrayidx85 = getelementptr inbounds [256 x i8], [256 x i8]* @syntax_spec_code, i32 0, i64 %idxprom
  %57 = load i8, i8* %arrayidx85, align 1
  %idxprom86 = zext i8 %57 to i64
  %arrayidx87 = getelementptr inbounds [256 x i8], [256 x i8]* %fastmap, i32 0, i64 %idxprom86
  store i8 1, i8* %arrayidx87, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %58 = load i8, i8* %negate, align 1
  %tobool88 = trunc i8 %58 to i1
  br i1 %tobool88, label %if.then.89, label %if.end.96

if.then.89:                                       ; preds = %while.end
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.89
  %59 = load i64, i64* %i, align 8
  %cmp90 = icmp ult i64 %59, 256
  br i1 %cmp90, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %60 = load i64, i64* %i, align 8
  %arrayidx92 = getelementptr inbounds [256 x i8], [256 x i8]* %fastmap, i32 0, i64 %60
  %61 = load i8, i8* %arrayidx92, align 1
  %conv93 = zext i8 %61 to i32
  %xor = xor i32 %conv93, 1
  %conv94 = trunc i32 %xor to i8
  store i8 %conv94, i8* %arrayidx92, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %62 = load i64, i64* %i, align 8
  %inc95 = add nsw i64 %62, 1
  store i64 %inc95, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.96

if.end.96:                                        ; preds = %for.end, %while.end
  %63 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt97 = getelementptr inbounds %struct.buffer, %struct.buffer* %63, i32 0, i32 75
  %64 = load i64, i64* %pt97, align 8
  %add98 = add nsw i64 %64, 0
  store i64 %add98, i64* %start_point, align 8
  %65 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt99 = getelementptr inbounds %struct.buffer, %struct.buffer* %65, i32 0, i32 75
  %66 = load i64, i64* %pt99, align 8
  %add100 = add nsw i64 %66, 0
  store i64 %add100, i64* %pos, align 8
  %67 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte101 = getelementptr inbounds %struct.buffer, %struct.buffer* %67, i32 0, i32 76
  %68 = load i64, i64* %pt_byte101, align 8
  %add102 = add nsw i64 %68, 0
  store i64 %add102, i64* %pos_byte, align 8
  store i8 1, i8* @immediate_quit, align 1
  %69 = load i64, i64* %pos, align 8
  %70 = load i8, i8* %forwardp.addr, align 1
  %tobool103 = trunc i8 %70 to i1
  %cond105 = select i1 %tobool103, i32 1, i32 -1
  %conv106 = sext i32 %cond105 to i64
  call void @SETUP_SYNTAX_TABLE(i64 %69, i64 %conv106)
  %71 = load i8, i8* %forwardp.addr, align 1
  %tobool107 = trunc i8 %71 to i1
  br i1 %tobool107, label %if.then.108, label %if.else.264

if.then.108:                                      ; preds = %if.end.96
  br label %while.body.110

while.body.110:                                   ; preds = %if.then.108, %do.end.262
  %72 = load i64, i64* %pos_byte, align 8
  %73 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %73, i32 0, i32 73
  %74 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %74, i32 0, i32 3
  %75 = load i64, i64* %gpt_byte, align 8
  %cmp111 = icmp sge i64 %72, %75
  br i1 %cmp111, label %cond.true.113, label %cond.false.115

cond.true.113:                                    ; preds = %while.body.110
  %76 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text114 = getelementptr inbounds %struct.buffer, %struct.buffer* %76, i32 0, i32 73
  %77 = load %struct.buffer_text*, %struct.buffer_text** %text114, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %77, i32 0, i32 5
  %78 = load i64, i64* %gap_size, align 8
  br label %cond.end.116

cond.false.115:                                   ; preds = %while.body.110
  br label %cond.end.116

cond.end.116:                                     ; preds = %cond.false.115, %cond.true.113
  %cond117 = phi i64 [ %78, %cond.true.113 ], [ 0, %cond.false.115 ]
  %79 = load i64, i64* %pos_byte, align 8
  %add118 = add nsw i64 %cond117, %79
  %80 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text119 = getelementptr inbounds %struct.buffer, %struct.buffer* %80, i32 0, i32 73
  %81 = load %struct.buffer_text*, %struct.buffer_text** %text119, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %81, i32 0, i32 0
  %82 = load i8*, i8** %beg, align 8
  %add.ptr = getelementptr inbounds i8, i8* %82, i64 %add118
  %add.ptr120 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  store i8* %add.ptr120, i8** %p, align 8
  %83 = load i64, i64* %lim.addr, align 8
  %shr121 = ashr i64 %83, 2
  %84 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text122 = getelementptr inbounds %struct.buffer, %struct.buffer* %84, i32 0, i32 73
  %85 = load %struct.buffer_text*, %struct.buffer_text** %text122, align 8
  %gpt = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %85, i32 0, i32 1
  %86 = load i64, i64* %gpt, align 8
  %cmp123 = icmp eq i64 %shr121, %86
  br i1 %cmp123, label %cond.true.125, label %cond.false.132

cond.true.125:                                    ; preds = %cond.end.116
  %87 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text126 = getelementptr inbounds %struct.buffer, %struct.buffer* %87, i32 0, i32 73
  %88 = load %struct.buffer_text*, %struct.buffer_text** %text126, align 8
  %beg127 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %88, i32 0, i32 0
  %89 = load i8*, i8** %beg127, align 8
  %90 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text128 = getelementptr inbounds %struct.buffer, %struct.buffer* %90, i32 0, i32 73
  %91 = load %struct.buffer_text*, %struct.buffer_text** %text128, align 8
  %gpt_byte129 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %91, i32 0, i32 3
  %92 = load i64, i64* %gpt_byte129, align 8
  %add.ptr130 = getelementptr inbounds i8, i8* %89, i64 %92
  %add.ptr131 = getelementptr inbounds i8, i8* %add.ptr130, i64 -1
  br label %cond.end.151

cond.false.132:                                   ; preds = %cond.end.116
  %93 = load i64, i64* %lim.addr, align 8
  %shr133 = ashr i64 %93, 2
  %94 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text134 = getelementptr inbounds %struct.buffer, %struct.buffer* %94, i32 0, i32 73
  %95 = load %struct.buffer_text*, %struct.buffer_text** %text134, align 8
  %gpt135 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %95, i32 0, i32 1
  %96 = load i64, i64* %gpt135, align 8
  %cmp136 = icmp sge i64 %shr133, %96
  br i1 %cmp136, label %cond.true.138, label %cond.false.141

cond.true.138:                                    ; preds = %cond.false.132
  %97 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text139 = getelementptr inbounds %struct.buffer, %struct.buffer* %97, i32 0, i32 73
  %98 = load %struct.buffer_text*, %struct.buffer_text** %text139, align 8
  %gap_size140 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %98, i32 0, i32 5
  %99 = load i64, i64* %gap_size140, align 8
  br label %cond.end.142

cond.false.141:                                   ; preds = %cond.false.132
  br label %cond.end.142

cond.end.142:                                     ; preds = %cond.false.141, %cond.true.138
  %cond143 = phi i64 [ %99, %cond.true.138 ], [ 0, %cond.false.141 ]
  %100 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %101 = load i64, i64* %lim.addr, align 8
  %shr144 = ashr i64 %101, 2
  %call145 = call i64 @buf_charpos_to_bytepos(%struct.buffer* %100, i64 %shr144)
  %add146 = add nsw i64 %cond143, %call145
  %102 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text147 = getelementptr inbounds %struct.buffer, %struct.buffer* %102, i32 0, i32 73
  %103 = load %struct.buffer_text*, %struct.buffer_text** %text147, align 8
  %beg148 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %103, i32 0, i32 0
  %104 = load i8*, i8** %beg148, align 8
  %add.ptr149 = getelementptr inbounds i8, i8* %104, i64 %add146
  %add.ptr150 = getelementptr inbounds i8, i8* %add.ptr149, i64 -1
  br label %cond.end.151

cond.end.151:                                     ; preds = %cond.end.142, %cond.true.125
  %cond152 = phi i8* [ %add.ptr131, %cond.true.125 ], [ %add.ptr150, %cond.end.142 ]
  store i8* %cond152, i8** %endp, align 8
  %105 = load i64, i64* %pos, align 8
  %106 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text153 = getelementptr inbounds %struct.buffer, %struct.buffer* %106, i32 0, i32 73
  %107 = load %struct.buffer_text*, %struct.buffer_text** %text153, align 8
  %gpt154 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %107, i32 0, i32 1
  %108 = load i64, i64* %gpt154, align 8
  %cmp155 = icmp slt i64 %105, %108
  br i1 %cmp155, label %land.lhs.true.157, label %cond.false.170

land.lhs.true.157:                                ; preds = %cond.end.151
  %109 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text158 = getelementptr inbounds %struct.buffer, %struct.buffer* %109, i32 0, i32 73
  %110 = load %struct.buffer_text*, %struct.buffer_text** %text158, align 8
  %gpt159 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %110, i32 0, i32 1
  %111 = load i64, i64* %gpt159, align 8
  %112 = load i64, i64* %lim.addr, align 8
  %shr160 = ashr i64 %112, 2
  %cmp161 = icmp slt i64 %111, %shr160
  br i1 %cmp161, label %cond.true.163, label %cond.false.170

cond.true.163:                                    ; preds = %land.lhs.true.157
  %113 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text164 = getelementptr inbounds %struct.buffer, %struct.buffer* %113, i32 0, i32 73
  %114 = load %struct.buffer_text*, %struct.buffer_text** %text164, align 8
  %beg165 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %114, i32 0, i32 0
  %115 = load i8*, i8** %beg165, align 8
  %116 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text166 = getelementptr inbounds %struct.buffer, %struct.buffer* %116, i32 0, i32 73
  %117 = load %struct.buffer_text*, %struct.buffer_text** %text166, align 8
  %gpt_byte167 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %117, i32 0, i32 3
  %118 = load i64, i64* %gpt_byte167, align 8
  %add.ptr168 = getelementptr inbounds i8, i8* %115, i64 %118
  %add.ptr169 = getelementptr inbounds i8, i8* %add.ptr168, i64 -1
  br label %cond.end.171

cond.false.170:                                   ; preds = %land.lhs.true.157, %cond.end.151
  %119 = load i8*, i8** %endp, align 8
  br label %cond.end.171

cond.end.171:                                     ; preds = %cond.false.170, %cond.true.163
  %cond172 = phi i8* [ %add.ptr169, %cond.true.163 ], [ %119, %cond.false.170 ]
  store i8* %cond172, i8** %stop, align 8
  br label %do.body.173

do.body.173:                                      ; preds = %lor.end, %cond.end.171
  %120 = load i8*, i8** %p, align 8
  %121 = load i8*, i8** %stop, align 8
  %cmp174 = icmp uge i8* %120, %121
  br i1 %cmp174, label %if.then.176, label %if.end.190

if.then.176:                                      ; preds = %do.body.173
  %122 = load i8*, i8** %p, align 8
  %123 = load i8*, i8** %endp, align 8
  %cmp177 = icmp uge i8* %122, %123
  br i1 %cmp177, label %if.then.179, label %if.end.180

if.then.179:                                      ; preds = %if.then.176
  br label %done

if.end.180:                                       ; preds = %if.then.176
  %124 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text181 = getelementptr inbounds %struct.buffer, %struct.buffer* %124, i32 0, i32 73
  %125 = load %struct.buffer_text*, %struct.buffer_text** %text181, align 8
  %beg182 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %125, i32 0, i32 0
  %126 = load i8*, i8** %beg182, align 8
  %127 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text183 = getelementptr inbounds %struct.buffer, %struct.buffer* %127, i32 0, i32 73
  %128 = load %struct.buffer_text*, %struct.buffer_text** %text183, align 8
  %gpt_byte184 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %128, i32 0, i32 3
  %129 = load i64, i64* %gpt_byte184, align 8
  %add.ptr185 = getelementptr inbounds i8, i8* %126, i64 %129
  %130 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text186 = getelementptr inbounds %struct.buffer, %struct.buffer* %130, i32 0, i32 73
  %131 = load %struct.buffer_text*, %struct.buffer_text** %text186, align 8
  %gap_size187 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %131, i32 0, i32 5
  %132 = load i64, i64* %gap_size187, align 8
  %add.ptr188 = getelementptr inbounds i8, i8* %add.ptr185, i64 %132
  %add.ptr189 = getelementptr inbounds i8, i8* %add.ptr188, i64 -1
  store i8* %add.ptr189, i8** %p, align 8
  %133 = load i8*, i8** %endp, align 8
  store i8* %133, i8** %stop, align 8
  br label %if.end.190

if.end.190:                                       ; preds = %if.end.180, %do.body.173
  %134 = load i8, i8* %multibyte, align 1
  %tobool191 = trunc i8 %134 to i1
  br i1 %tobool191, label %if.then.192, label %if.else.246

if.then.192:                                      ; preds = %if.end.190
  %135 = load i8*, i8** %p, align 8
  %arrayidx193 = getelementptr inbounds i8, i8* %135, i64 0
  %136 = load i8, i8* %arrayidx193, align 1
  %conv194 = zext i8 %136 to i32
  %and195 = and i32 %conv194, 128
  %tobool196 = icmp ne i32 %and195, 0
  br i1 %tobool196, label %cond.false.200, label %cond.true.197

cond.true.197:                                    ; preds = %if.then.192
  store i32 1, i32* %nbytes, align 4
  %137 = load i8*, i8** %p, align 8
  %arrayidx198 = getelementptr inbounds i8, i8* %137, i64 0
  %138 = load i8, i8* %arrayidx198, align 1
  %conv199 = zext i8 %138 to i32
  br label %cond.end.244

cond.false.200:                                   ; preds = %if.then.192
  %139 = load i8*, i8** %p, align 8
  %arrayidx201 = getelementptr inbounds i8, i8* %139, i64 0
  %140 = load i8, i8* %arrayidx201, align 1
  %conv202 = zext i8 %140 to i32
  %and203 = and i32 %conv202, 32
  %tobool204 = icmp ne i32 %and203, 0
  br i1 %tobool204, label %cond.false.219, label %cond.true.205

cond.true.205:                                    ; preds = %cond.false.200
  store i32 2, i32* %nbytes, align 4
  %141 = load i8*, i8** %p, align 8
  %arrayidx206 = getelementptr inbounds i8, i8* %141, i64 0
  %142 = load i8, i8* %arrayidx206, align 1
  %conv207 = zext i8 %142 to i32
  %and208 = and i32 %conv207, 31
  %shl209 = shl i32 %and208, 6
  %143 = load i8*, i8** %p, align 8
  %arrayidx210 = getelementptr inbounds i8, i8* %143, i64 1
  %144 = load i8, i8* %arrayidx210, align 1
  %conv211 = zext i8 %144 to i32
  %and212 = and i32 %conv211, 63
  %or = or i32 %shl209, %and212
  %145 = load i8*, i8** %p, align 8
  %arrayidx213 = getelementptr inbounds i8, i8* %145, i64 0
  %146 = load i8, i8* %arrayidx213, align 1
  %conv214 = zext i8 %146 to i32
  %cmp215 = icmp slt i32 %conv214, 194
  %cond217 = select i1 %cmp215, i32 4194176, i32 0
  %add218 = add nsw i32 %or, %cond217
  br label %cond.end.242

cond.false.219:                                   ; preds = %cond.false.200
  %147 = load i8*, i8** %p, align 8
  %arrayidx220 = getelementptr inbounds i8, i8* %147, i64 0
  %148 = load i8, i8* %arrayidx220, align 1
  %conv221 = zext i8 %148 to i32
  %and222 = and i32 %conv221, 16
  %tobool223 = icmp ne i32 %and222, 0
  br i1 %tobool223, label %cond.false.238, label %cond.true.224

cond.true.224:                                    ; preds = %cond.false.219
  store i32 3, i32* %nbytes, align 4
  %149 = load i8*, i8** %p, align 8
  %arrayidx225 = getelementptr inbounds i8, i8* %149, i64 0
  %150 = load i8, i8* %arrayidx225, align 1
  %conv226 = zext i8 %150 to i32
  %and227 = and i32 %conv226, 15
  %shl228 = shl i32 %and227, 12
  %151 = load i8*, i8** %p, align 8
  %arrayidx229 = getelementptr inbounds i8, i8* %151, i64 1
  %152 = load i8, i8* %arrayidx229, align 1
  %conv230 = zext i8 %152 to i32
  %and231 = and i32 %conv230, 63
  %shl232 = shl i32 %and231, 6
  %or233 = or i32 %shl228, %shl232
  %153 = load i8*, i8** %p, align 8
  %arrayidx234 = getelementptr inbounds i8, i8* %153, i64 2
  %154 = load i8, i8* %arrayidx234, align 1
  %conv235 = zext i8 %154 to i32
  %and236 = and i32 %conv235, 63
  %or237 = or i32 %or233, %and236
  br label %cond.end.240

cond.false.238:                                   ; preds = %cond.false.219
  %155 = load i8*, i8** %p, align 8
  %call239 = call i32 @string_char(i8* %155, i8** null, i32* %nbytes)
  br label %cond.end.240

cond.end.240:                                     ; preds = %cond.false.238, %cond.true.224
  %cond241 = phi i32 [ %or237, %cond.true.224 ], [ %call239, %cond.false.238 ]
  br label %cond.end.242

cond.end.242:                                     ; preds = %cond.end.240, %cond.true.205
  %cond243 = phi i32 [ %add218, %cond.true.205 ], [ %cond241, %cond.end.240 ]
  br label %cond.end.244

cond.end.244:                                     ; preds = %cond.end.242, %cond.true.197
  %cond245 = phi i32 [ %conv199, %cond.true.197 ], [ %cond243, %cond.end.242 ]
  store i32 %cond245, i32* %c, align 4
  br label %if.end.248

if.else.246:                                      ; preds = %if.end.190
  %156 = load i8*, i8** %p, align 8
  %157 = load i8, i8* %156, align 1
  %conv247 = zext i8 %157 to i32
  store i32 %conv247, i32* %c, align 4
  store i32 1, i32* %nbytes, align 4
  br label %if.end.248

if.end.248:                                       ; preds = %if.else.246, %cond.end.244
  %158 = load i32, i32* %c, align 4
  %call249 = call i32 @syntax_property(i32 %158, i1 zeroext true)
  %idxprom250 = zext i32 %call249 to i64
  %arrayidx251 = getelementptr inbounds [256 x i8], [256 x i8]* %fastmap, i32 0, i64 %idxprom250
  %159 = load i8, i8* %arrayidx251, align 1
  %tobool252 = icmp ne i8 %159, 0
  br i1 %tobool252, label %if.end.254, label %if.then.253

if.then.253:                                      ; preds = %if.end.248
  br label %done

if.end.254:                                       ; preds = %if.end.248
  %160 = load i32, i32* %nbytes, align 4
  %161 = load i8*, i8** %p, align 8
  %idx.ext = sext i32 %160 to i64
  %add.ptr255 = getelementptr inbounds i8, i8* %161, i64 %idx.ext
  store i8* %add.ptr255, i8** %p, align 8
  %162 = load i64, i64* %pos, align 8
  %inc256 = add nsw i64 %162, 1
  store i64 %inc256, i64* %pos, align 8
  %163 = load i32, i32* %nbytes, align 4
  %conv257 = sext i32 %163 to i64
  %164 = load i64, i64* %pos_byte, align 8
  %add258 = add nsw i64 %164, %conv257
  store i64 %add258, i64* %pos_byte, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end.254
  %165 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 480), align 1
  %tobool259 = trunc i8 %165 to i1
  br i1 %tobool259, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %do.cond
  %166 = load i64, i64* %pos, align 8
  %167 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 8), align 8
  %cmp260 = icmp slt i64 %166, %167
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %do.cond
  %168 = phi i1 [ true, %do.cond ], [ %cmp260, %lor.rhs ]
  br i1 %168, label %do.body.173, label %do.end.262

do.end.262:                                       ; preds = %lor.end
  %169 = load i64, i64* %pos, align 8
  %170 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 12), align 8
  %add263 = add nsw i64 %169, %170
  %171 = load i64, i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 0), align 8
  call void @update_syntax_table_forward(i64 %add263, i1 zeroext false, i64 %171)
  br label %while.body.110

if.else.264:                                      ; preds = %if.end.96
  %172 = load i64, i64* %pos_byte, align 8
  %173 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text265 = getelementptr inbounds %struct.buffer, %struct.buffer* %173, i32 0, i32 73
  %174 = load %struct.buffer_text*, %struct.buffer_text** %text265, align 8
  %gpt_byte266 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %174, i32 0, i32 3
  %175 = load i64, i64* %gpt_byte266, align 8
  %cmp267 = icmp sge i64 %172, %175
  br i1 %cmp267, label %cond.true.269, label %cond.false.272

cond.true.269:                                    ; preds = %if.else.264
  %176 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text270 = getelementptr inbounds %struct.buffer, %struct.buffer* %176, i32 0, i32 73
  %177 = load %struct.buffer_text*, %struct.buffer_text** %text270, align 8
  %gap_size271 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %177, i32 0, i32 5
  %178 = load i64, i64* %gap_size271, align 8
  br label %cond.end.273

cond.false.272:                                   ; preds = %if.else.264
  br label %cond.end.273

cond.end.273:                                     ; preds = %cond.false.272, %cond.true.269
  %cond274 = phi i64 [ %178, %cond.true.269 ], [ 0, %cond.false.272 ]
  %179 = load i64, i64* %pos_byte, align 8
  %add275 = add nsw i64 %cond274, %179
  %180 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text276 = getelementptr inbounds %struct.buffer, %struct.buffer* %180, i32 0, i32 73
  %181 = load %struct.buffer_text*, %struct.buffer_text** %text276, align 8
  %beg277 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %181, i32 0, i32 0
  %182 = load i8*, i8** %beg277, align 8
  %add.ptr278 = getelementptr inbounds i8, i8* %182, i64 %add275
  %add.ptr279 = getelementptr inbounds i8, i8* %add.ptr278, i64 -1
  store i8* %add.ptr279, i8** %p, align 8
  %183 = load i64, i64* %lim.addr, align 8
  %shr280 = ashr i64 %183, 2
  %184 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text281 = getelementptr inbounds %struct.buffer, %struct.buffer* %184, i32 0, i32 73
  %185 = load %struct.buffer_text*, %struct.buffer_text** %text281, align 8
  %gpt282 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %185, i32 0, i32 1
  %186 = load i64, i64* %gpt282, align 8
  %cmp283 = icmp sge i64 %shr280, %186
  br i1 %cmp283, label %cond.true.285, label %cond.false.288

cond.true.285:                                    ; preds = %cond.end.273
  %187 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text286 = getelementptr inbounds %struct.buffer, %struct.buffer* %187, i32 0, i32 73
  %188 = load %struct.buffer_text*, %struct.buffer_text** %text286, align 8
  %gap_size287 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %188, i32 0, i32 5
  %189 = load i64, i64* %gap_size287, align 8
  br label %cond.end.289

cond.false.288:                                   ; preds = %cond.end.273
  br label %cond.end.289

cond.end.289:                                     ; preds = %cond.false.288, %cond.true.285
  %cond290 = phi i64 [ %189, %cond.true.285 ], [ 0, %cond.false.288 ]
  %190 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %191 = load i64, i64* %lim.addr, align 8
  %shr291 = ashr i64 %191, 2
  %call292 = call i64 @buf_charpos_to_bytepos(%struct.buffer* %190, i64 %shr291)
  %add293 = add nsw i64 %cond290, %call292
  %192 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text294 = getelementptr inbounds %struct.buffer, %struct.buffer* %192, i32 0, i32 73
  %193 = load %struct.buffer_text*, %struct.buffer_text** %text294, align 8
  %beg295 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %193, i32 0, i32 0
  %194 = load i8*, i8** %beg295, align 8
  %add.ptr296 = getelementptr inbounds i8, i8* %194, i64 %add293
  %add.ptr297 = getelementptr inbounds i8, i8* %add.ptr296, i64 -1
  store i8* %add.ptr297, i8** %endp, align 8
  %195 = load i64, i64* %pos, align 8
  %196 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text298 = getelementptr inbounds %struct.buffer, %struct.buffer* %196, i32 0, i32 73
  %197 = load %struct.buffer_text*, %struct.buffer_text** %text298, align 8
  %gpt299 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %197, i32 0, i32 1
  %198 = load i64, i64* %gpt299, align 8
  %cmp300 = icmp sge i64 %195, %198
  br i1 %cmp300, label %land.lhs.true.302, label %cond.false.318

land.lhs.true.302:                                ; preds = %cond.end.289
  %199 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text303 = getelementptr inbounds %struct.buffer, %struct.buffer* %199, i32 0, i32 73
  %200 = load %struct.buffer_text*, %struct.buffer_text** %text303, align 8
  %gpt304 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %200, i32 0, i32 1
  %201 = load i64, i64* %gpt304, align 8
  %202 = load i64, i64* %lim.addr, align 8
  %shr305 = ashr i64 %202, 2
  %cmp306 = icmp sgt i64 %201, %shr305
  br i1 %cmp306, label %cond.true.308, label %cond.false.318

cond.true.308:                                    ; preds = %land.lhs.true.302
  %203 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text309 = getelementptr inbounds %struct.buffer, %struct.buffer* %203, i32 0, i32 73
  %204 = load %struct.buffer_text*, %struct.buffer_text** %text309, align 8
  %beg310 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %204, i32 0, i32 0
  %205 = load i8*, i8** %beg310, align 8
  %206 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text311 = getelementptr inbounds %struct.buffer, %struct.buffer* %206, i32 0, i32 73
  %207 = load %struct.buffer_text*, %struct.buffer_text** %text311, align 8
  %gpt_byte312 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %207, i32 0, i32 3
  %208 = load i64, i64* %gpt_byte312, align 8
  %add.ptr313 = getelementptr inbounds i8, i8* %205, i64 %208
  %209 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text314 = getelementptr inbounds %struct.buffer, %struct.buffer* %209, i32 0, i32 73
  %210 = load %struct.buffer_text*, %struct.buffer_text** %text314, align 8
  %gap_size315 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %210, i32 0, i32 5
  %211 = load i64, i64* %gap_size315, align 8
  %add.ptr316 = getelementptr inbounds i8, i8* %add.ptr313, i64 %211
  %add.ptr317 = getelementptr inbounds i8, i8* %add.ptr316, i64 -1
  br label %cond.end.319

cond.false.318:                                   ; preds = %land.lhs.true.302, %cond.end.289
  %212 = load i8*, i8** %endp, align 8
  br label %cond.end.319

cond.end.319:                                     ; preds = %cond.false.318, %cond.true.308
  %cond320 = phi i8* [ %add.ptr317, %cond.true.308 ], [ %212, %cond.false.318 ]
  store i8* %cond320, i8** %stop, align 8
  %213 = load i8, i8* %multibyte, align 1
  %tobool321 = trunc i8 %213 to i1
  br i1 %tobool321, label %if.then.322, label %if.else.413

if.then.322:                                      ; preds = %cond.end.319
  br label %while.body.324

while.body.324:                                   ; preds = %if.then.322, %if.end.410
  %214 = load i8*, i8** %p, align 8
  %215 = load i8*, i8** %stop, align 8
  %cmp325 = icmp ule i8* %214, %215
  br i1 %cmp325, label %if.then.327, label %if.end.338

if.then.327:                                      ; preds = %while.body.324
  %216 = load i8*, i8** %p, align 8
  %217 = load i8*, i8** %endp, align 8
  %cmp328 = icmp ule i8* %216, %217
  br i1 %cmp328, label %if.then.330, label %if.end.331

if.then.330:                                      ; preds = %if.then.327
  br label %while.end.412

if.end.331:                                       ; preds = %if.then.327
  %218 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text332 = getelementptr inbounds %struct.buffer, %struct.buffer* %218, i32 0, i32 73
  %219 = load %struct.buffer_text*, %struct.buffer_text** %text332, align 8
  %beg333 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %219, i32 0, i32 0
  %220 = load i8*, i8** %beg333, align 8
  %221 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text334 = getelementptr inbounds %struct.buffer, %struct.buffer* %221, i32 0, i32 73
  %222 = load %struct.buffer_text*, %struct.buffer_text** %text334, align 8
  %gpt_byte335 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %222, i32 0, i32 3
  %223 = load i64, i64* %gpt_byte335, align 8
  %add.ptr336 = getelementptr inbounds i8, i8* %220, i64 %223
  %add.ptr337 = getelementptr inbounds i8, i8* %add.ptr336, i64 -1
  store i8* %add.ptr337, i8** %p, align 8
  %224 = load i8*, i8** %endp, align 8
  store i8* %224, i8** %stop, align 8
  br label %if.end.338

if.end.338:                                       ; preds = %if.end.331, %while.body.324
  %225 = load i64, i64* %pos, align 8
  %sub339 = sub nsw i64 %225, 1
  call void @UPDATE_SYNTAX_TABLE_BACKWARD(i64 %sub339)
  %226 = load i8*, i8** %p, align 8
  store i8* %226, i8** %prev_p, align 8
  br label %while.cond.340

while.cond.340:                                   ; preds = %while.body.349, %if.end.338
  %227 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %227, i32 -1
  store i8* %incdec.ptr, i8** %p, align 8
  %228 = load i8*, i8** %stop, align 8
  %cmp341 = icmp uge i8* %incdec.ptr, %228
  br i1 %cmp341, label %land.rhs.343, label %land.end.348

land.rhs.343:                                     ; preds = %while.cond.340
  %229 = load i8*, i8** %p, align 8
  %230 = load i8, i8* %229, align 1
  %conv344 = zext i8 %230 to i32
  %and345 = and i32 %conv344, 192
  %cmp346 = icmp ne i32 %and345, 128
  %lnot = xor i1 %cmp346, true
  br label %land.end.348

land.end.348:                                     ; preds = %land.rhs.343, %while.cond.340
  %231 = phi i1 [ false, %while.cond.340 ], [ %lnot, %land.rhs.343 ]
  br i1 %231, label %while.body.349, label %while.end.350

while.body.349:                                   ; preds = %land.end.348
  br label %while.cond.340

while.end.350:                                    ; preds = %land.end.348
  %232 = load i8*, i8** %p, align 8
  %arrayidx351 = getelementptr inbounds i8, i8* %232, i64 0
  %233 = load i8, i8* %arrayidx351, align 1
  %conv352 = zext i8 %233 to i32
  %and353 = and i32 %conv352, 128
  %tobool354 = icmp ne i32 %and353, 0
  br i1 %tobool354, label %cond.false.358, label %cond.true.355

cond.true.355:                                    ; preds = %while.end.350
  %234 = load i8*, i8** %p, align 8
  %arrayidx356 = getelementptr inbounds i8, i8* %234, i64 0
  %235 = load i8, i8* %arrayidx356, align 1
  %conv357 = zext i8 %235 to i32
  br label %cond.end.403

cond.false.358:                                   ; preds = %while.end.350
  %236 = load i8*, i8** %p, align 8
  %arrayidx359 = getelementptr inbounds i8, i8* %236, i64 0
  %237 = load i8, i8* %arrayidx359, align 1
  %conv360 = zext i8 %237 to i32
  %and361 = and i32 %conv360, 32
  %tobool362 = icmp ne i32 %and361, 0
  br i1 %tobool362, label %cond.false.378, label %cond.true.363

cond.true.363:                                    ; preds = %cond.false.358
  %238 = load i8*, i8** %p, align 8
  %arrayidx364 = getelementptr inbounds i8, i8* %238, i64 0
  %239 = load i8, i8* %arrayidx364, align 1
  %conv365 = zext i8 %239 to i32
  %and366 = and i32 %conv365, 31
  %shl367 = shl i32 %and366, 6
  %240 = load i8*, i8** %p, align 8
  %arrayidx368 = getelementptr inbounds i8, i8* %240, i64 1
  %241 = load i8, i8* %arrayidx368, align 1
  %conv369 = zext i8 %241 to i32
  %and370 = and i32 %conv369, 63
  %or371 = or i32 %shl367, %and370
  %242 = load i8*, i8** %p, align 8
  %arrayidx372 = getelementptr inbounds i8, i8* %242, i64 0
  %243 = load i8, i8* %arrayidx372, align 1
  %conv373 = zext i8 %243 to i32
  %cmp374 = icmp slt i32 %conv373, 194
  %cond376 = select i1 %cmp374, i32 4194176, i32 0
  %add377 = add nsw i32 %or371, %cond376
  br label %cond.end.401

cond.false.378:                                   ; preds = %cond.false.358
  %244 = load i8*, i8** %p, align 8
  %arrayidx379 = getelementptr inbounds i8, i8* %244, i64 0
  %245 = load i8, i8* %arrayidx379, align 1
  %conv380 = zext i8 %245 to i32
  %and381 = and i32 %conv380, 16
  %tobool382 = icmp ne i32 %and381, 0
  br i1 %tobool382, label %cond.false.397, label %cond.true.383

cond.true.383:                                    ; preds = %cond.false.378
  %246 = load i8*, i8** %p, align 8
  %arrayidx384 = getelementptr inbounds i8, i8* %246, i64 0
  %247 = load i8, i8* %arrayidx384, align 1
  %conv385 = zext i8 %247 to i32
  %and386 = and i32 %conv385, 15
  %shl387 = shl i32 %and386, 12
  %248 = load i8*, i8** %p, align 8
  %arrayidx388 = getelementptr inbounds i8, i8* %248, i64 1
  %249 = load i8, i8* %arrayidx388, align 1
  %conv389 = zext i8 %249 to i32
  %and390 = and i32 %conv389, 63
  %shl391 = shl i32 %and390, 6
  %or392 = or i32 %shl387, %shl391
  %250 = load i8*, i8** %p, align 8
  %arrayidx393 = getelementptr inbounds i8, i8* %250, i64 2
  %251 = load i8, i8* %arrayidx393, align 1
  %conv394 = zext i8 %251 to i32
  %and395 = and i32 %conv394, 63
  %or396 = or i32 %or392, %and395
  br label %cond.end.399

cond.false.397:                                   ; preds = %cond.false.378
  %252 = load i8*, i8** %p, align 8
  %call398 = call i32 @string_char(i8* %252, i8** null, i32* null)
  br label %cond.end.399

cond.end.399:                                     ; preds = %cond.false.397, %cond.true.383
  %cond400 = phi i32 [ %or396, %cond.true.383 ], [ %call398, %cond.false.397 ]
  br label %cond.end.401

cond.end.401:                                     ; preds = %cond.end.399, %cond.true.363
  %cond402 = phi i32 [ %add377, %cond.true.363 ], [ %cond400, %cond.end.399 ]
  br label %cond.end.403

cond.end.403:                                     ; preds = %cond.end.401, %cond.true.355
  %cond404 = phi i32 [ %conv357, %cond.true.355 ], [ %cond402, %cond.end.401 ]
  store i32 %cond404, i32* %c, align 4
  %253 = load i32, i32* %c, align 4
  %call405 = call i32 @syntax_property(i32 %253, i1 zeroext true)
  %idxprom406 = zext i32 %call405 to i64
  %arrayidx407 = getelementptr inbounds [256 x i8], [256 x i8]* %fastmap, i32 0, i64 %idxprom406
  %254 = load i8, i8* %arrayidx407, align 1
  %tobool408 = icmp ne i8 %254, 0
  br i1 %tobool408, label %if.end.410, label %if.then.409

if.then.409:                                      ; preds = %cond.end.403
  br label %while.end.412

if.end.410:                                       ; preds = %cond.end.403
  %255 = load i64, i64* %pos, align 8
  %dec = add nsw i64 %255, -1
  store i64 %dec, i64* %pos, align 8
  %256 = load i8*, i8** %prev_p, align 8
  %257 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %256 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %257 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %258 = load i64, i64* %pos_byte, align 8
  %sub411 = sub nsw i64 %258, %sub.ptr.sub
  store i64 %sub411, i64* %pos_byte, align 8
  br label %while.body.324

while.end.412:                                    ; preds = %if.then.409, %if.then.330
  br label %if.end.443

if.else.413:                                      ; preds = %cond.end.319
  br label %while.body.415

while.body.415:                                   ; preds = %if.else.413, %if.end.438
  %259 = load i8*, i8** %p, align 8
  %260 = load i8*, i8** %stop, align 8
  %cmp416 = icmp ule i8* %259, %260
  br i1 %cmp416, label %if.then.418, label %if.end.429

if.then.418:                                      ; preds = %while.body.415
  %261 = load i8*, i8** %p, align 8
  %262 = load i8*, i8** %endp, align 8
  %cmp419 = icmp ule i8* %261, %262
  br i1 %cmp419, label %if.then.421, label %if.end.422

if.then.421:                                      ; preds = %if.then.418
  br label %while.end.442

if.end.422:                                       ; preds = %if.then.418
  %263 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text423 = getelementptr inbounds %struct.buffer, %struct.buffer* %263, i32 0, i32 73
  %264 = load %struct.buffer_text*, %struct.buffer_text** %text423, align 8
  %beg424 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %264, i32 0, i32 0
  %265 = load i8*, i8** %beg424, align 8
  %266 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text425 = getelementptr inbounds %struct.buffer, %struct.buffer* %266, i32 0, i32 73
  %267 = load %struct.buffer_text*, %struct.buffer_text** %text425, align 8
  %gpt_byte426 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %267, i32 0, i32 3
  %268 = load i64, i64* %gpt_byte426, align 8
  %add.ptr427 = getelementptr inbounds i8, i8* %265, i64 %268
  %add.ptr428 = getelementptr inbounds i8, i8* %add.ptr427, i64 -1
  store i8* %add.ptr428, i8** %p, align 8
  %269 = load i8*, i8** %endp, align 8
  store i8* %269, i8** %stop, align 8
  br label %if.end.429

if.end.429:                                       ; preds = %if.end.422, %while.body.415
  %270 = load i64, i64* %pos, align 8
  %sub430 = sub nsw i64 %270, 1
  call void @UPDATE_SYNTAX_TABLE_BACKWARD(i64 %sub430)
  %271 = load i8*, i8** %p, align 8
  %arrayidx431 = getelementptr inbounds i8, i8* %271, i64 -1
  %272 = load i8, i8* %arrayidx431, align 1
  %conv432 = zext i8 %272 to i32
  %call433 = call i32 @syntax_property(i32 %conv432, i1 zeroext true)
  %idxprom434 = zext i32 %call433 to i64
  %arrayidx435 = getelementptr inbounds [256 x i8], [256 x i8]* %fastmap, i32 0, i64 %idxprom434
  %273 = load i8, i8* %arrayidx435, align 1
  %tobool436 = icmp ne i8 %273, 0
  br i1 %tobool436, label %if.end.438, label %if.then.437

if.then.437:                                      ; preds = %if.end.429
  br label %while.end.442

if.end.438:                                       ; preds = %if.end.429
  %274 = load i8*, i8** %p, align 8
  %incdec.ptr439 = getelementptr inbounds i8, i8* %274, i32 -1
  store i8* %incdec.ptr439, i8** %p, align 8
  %275 = load i64, i64* %pos, align 8
  %dec440 = add nsw i64 %275, -1
  store i64 %dec440, i64* %pos, align 8
  %276 = load i64, i64* %pos_byte, align 8
  %dec441 = add nsw i64 %276, -1
  store i64 %dec441, i64* %pos_byte, align 8
  br label %while.body.415

while.end.442:                                    ; preds = %if.then.437, %if.then.421
  br label %if.end.443

if.end.443:                                       ; preds = %while.end.442, %while.end.412
  br label %if.end.444

if.end.444:                                       ; preds = %if.end.443
  br label %done

done:                                             ; preds = %if.end.444, %if.then.253, %if.then.179
  %277 = load i64, i64* %pos, align 8
  %278 = load i64, i64* %pos_byte, align 8
  call void @set_point_both(i64 %277, i64 %278)
  store i8 0, i8* @immediate_quit, align 1
  %279 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt445 = getelementptr inbounds %struct.buffer, %struct.buffer* %279, i32 0, i32 75
  %280 = load i64, i64* %pt445, align 8
  %add446 = add nsw i64 %280, 0
  %281 = load i64, i64* %start_point, align 8
  %sub447 = sub nsw i64 %add446, %281
  %shl448 = shl i64 %sub447, 2
  %add449 = add i64 %shl448, 2
  store i64 %add449, i64* %retval
  br label %return

return:                                           ; preds = %done, %if.then.48
  %282 = load i64, i64* %retval
  ret i64 %282
}

; Function Attrs: nounwind uwtable
define i64 @Fskip_syntax_backward(i64 %syntax, i64 %lim) #0 {
entry:
  %syntax.addr = alloca i64, align 8
  %lim.addr = alloca i64, align 8
  store i64 %syntax, i64* %syntax.addr, align 8
  store i64 %lim, i64* %lim.addr, align 8
  %0 = load i64, i64* %syntax.addr, align 8
  %1 = load i64, i64* %lim.addr, align 8
  %call = call i64 @skip_syntaxes(i1 zeroext false, i64 %0, i64 %1)
  ret i64 %call
}

; Function Attrs: nounwind uwtable
define i64 @Fforward_comment(i64 %count) #0 {
entry:
  %retval = alloca i64, align 8
  %count.addr = alloca i64, align 8
  %from = alloca i64, align 8
  %from_byte = alloca i64, align 8
  %stop = alloca i64, align 8
  %c = alloca i32, align 4
  %c1 = alloca i32, align 4
  %code = alloca i32, align 4
  %comstyle = alloca i32, align 4
  %comnested = alloca i8, align 1
  %found = alloca i8, align 1
  %count1 = alloca i64, align 8
  %out_charpos = alloca i64, align 8
  %out_bytepos = alloca i64, align 8
  %dummy = alloca i64, align 8
  %comstart_first = alloca i8, align 1
  %syntax = alloca i32, align 4
  %other_syntax = alloca i32, align 4
  %chp = alloca i8*, align 8
  %chp278 = alloca i8*, align 8
  %chp349 = alloca i8*, align 8
  %chp403 = alloca i8*, align 8
  %quoted = alloca i8, align 1
  %syntax460 = alloca i32, align 4
  %chp477 = alloca i8*, align 8
  %other_syntax621 = alloca i32, align 4
  %chp632 = alloca i8*, align 8
  %fence_found = alloca i8, align 1
  %ini = alloca i64, align 8
  %ini_byte = alloca i64, align 8
  %chp778 = alloca i8*, align 8
  %chp945 = alloca i8*, align 8
  %chp1014 = alloca i8*, align 8
  store i64 %count, i64* %count.addr, align 8
  store i32 0, i32* %comstyle, align 4
  store i8 0, i8* %comnested, align 1
  %0 = load i64, i64* %count.addr, align 8
  %and = and i64 %0, 7
  %conv = trunc i64 %and to i32
  %and1 = and i32 %conv, -5
  %cmp = icmp eq i32 %and1, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call i64 @builtin_lisp_symbol(i32 559)
  %1 = load i64, i64* %count.addr, align 8
  %2 = call i64 @wrong_type_argument(i64 %call, i64 %1) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %3, %cond.true
  %4 = load i64, i64* %count.addr, align 8
  %shr = ashr i64 %4, 2
  store i64 %shr, i64* %count1, align 8
  %5 = load i64, i64* %count1, align 8
  %cmp3 = icmp sgt i64 %5, 0
  br i1 %cmp3, label %cond.true.5, label %cond.false.6

cond.true.5:                                      ; preds = %cond.end
  %6 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %6, i32 0, i32 79
  %7 = load i64, i64* %zv, align 8
  br label %cond.end.7

cond.false.6:                                     ; preds = %cond.end
  %8 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %8, i32 0, i32 77
  %9 = load i64, i64* %begv, align 8
  br label %cond.end.7

cond.end.7:                                       ; preds = %cond.false.6, %cond.true.5
  %cond = phi i64 [ %7, %cond.true.5 ], [ %9, %cond.false.6 ]
  store i64 %cond, i64* %stop, align 8
  store i8 1, i8* @immediate_quit, align 1
  br label %do.body

do.body:                                          ; preds = %cond.end.7
  %10 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 241), align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp9 = icmp eq i64 %10, %call8
  br i1 %cmp9, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %do.body
  %11 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 138), align 8
  %call11 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp12 = icmp eq i64 %11, %call11
  br i1 %cmp12, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  call void @process_quit_flag()
  br label %if.end.15

if.else:                                          ; preds = %land.lhs.true, %do.body
  %12 = load volatile i8, i8* @pending_signals, align 1
  %tobool = trunc i8 %12 to i1
  br i1 %tobool, label %if.then.14, label %if.end

if.then.14:                                       ; preds = %if.else
  call void @process_pending_signals()
  br label %if.end

if.end:                                           ; preds = %if.then.14, %if.else
  br label %if.end.15

if.end.15:                                        ; preds = %if.end, %if.then
  br label %do.end

do.end:                                           ; preds = %if.end.15
  %13 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt = getelementptr inbounds %struct.buffer, %struct.buffer* %13, i32 0, i32 75
  %14 = load i64, i64* %pt, align 8
  %add = add nsw i64 %14, 0
  store i64 %add, i64* %from, align 8
  %15 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %15, i32 0, i32 76
  %16 = load i64, i64* %pt_byte, align 8
  %add16 = add nsw i64 %16, 0
  store i64 %add16, i64* %from_byte, align 8
  %17 = load i64, i64* %from, align 8
  %18 = load i64, i64* %count1, align 8
  call void @SETUP_SYNTAX_TABLE(i64 %17, i64 %18)
  br label %while.cond

while.cond:                                       ; preds = %do.end.451, %do.end
  %19 = load i64, i64* %count1, align 8
  %cmp17 = icmp sgt i64 %19, 0
  br i1 %cmp17, label %while.body, label %while.end.453

while.body:                                       ; preds = %while.cond
  br label %do.body.19

do.body.19:                                       ; preds = %lor.end, %while.body
  %20 = load i64, i64* %from, align 8
  %21 = load i64, i64* %stop, align 8
  %cmp20 = icmp eq i64 %20, %21
  br i1 %cmp20, label %if.then.22, label %if.end.24

if.then.22:                                       ; preds = %do.body.19
  %22 = load i64, i64* %from, align 8
  %23 = load i64, i64* %from_byte, align 8
  call void @set_point_both(i64 %22, i64 %23)
  store i8 0, i8* @immediate_quit, align 1
  %call23 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call23, i64* %retval
  br label %return

if.end.24:                                        ; preds = %do.body.19
  %24 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %24, i32 0, i32 39
  %25 = load i64, i64* %enable_multibyte_characters_, align 8
  %call25 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp26 = icmp eq i64 %25, %call25
  br i1 %cmp26, label %cond.false.30, label %cond.true.28

cond.true.28:                                     ; preds = %if.end.24
  %26 = load i64, i64* %from_byte, align 8
  %call29 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %26)
  br label %cond.end.103

cond.false.30:                                    ; preds = %if.end.24
  br i1 true, label %cond.true.31, label %cond.false.46

cond.true.31:                                     ; preds = %cond.false.30
  %27 = load i64, i64* %from_byte, align 8
  %28 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %28, i32 0, i32 73
  %29 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %29, i32 0, i32 3
  %30 = load i64, i64* %gpt_byte, align 8
  %cmp32 = icmp sge i64 %27, %30
  br i1 %cmp32, label %cond.true.34, label %cond.false.36

cond.true.34:                                     ; preds = %cond.true.31
  %31 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text35 = getelementptr inbounds %struct.buffer, %struct.buffer* %31, i32 0, i32 73
  %32 = load %struct.buffer_text*, %struct.buffer_text** %text35, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %32, i32 0, i32 5
  %33 = load i64, i64* %gap_size, align 8
  br label %cond.end.37

cond.false.36:                                    ; preds = %cond.true.31
  br label %cond.end.37

cond.end.37:                                      ; preds = %cond.false.36, %cond.true.34
  %cond38 = phi i64 [ %33, %cond.true.34 ], [ 0, %cond.false.36 ]
  %34 = load i64, i64* %from_byte, align 8
  %add39 = add nsw i64 %cond38, %34
  %35 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text40 = getelementptr inbounds %struct.buffer, %struct.buffer* %35, i32 0, i32 73
  %36 = load %struct.buffer_text*, %struct.buffer_text** %text40, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %36, i32 0, i32 0
  %37 = load i8*, i8** %beg, align 8
  %add.ptr = getelementptr inbounds i8, i8* %37, i64 %add39
  %add.ptr41 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  %38 = load i8, i8* %add.ptr41, align 1
  %conv42 = zext i8 %38 to i32
  %add43 = add i32 %conv42, 0
  %cmp44 = icmp ult i32 %add43, 128
  br i1 %cmp44, label %cond.true.66, label %cond.false.83

cond.false.46:                                    ; preds = %cond.false.30
  %39 = load i64, i64* %from_byte, align 8
  %40 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text47 = getelementptr inbounds %struct.buffer, %struct.buffer* %40, i32 0, i32 73
  %41 = load %struct.buffer_text*, %struct.buffer_text** %text47, align 8
  %gpt_byte48 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %41, i32 0, i32 3
  %42 = load i64, i64* %gpt_byte48, align 8
  %cmp49 = icmp sge i64 %39, %42
  br i1 %cmp49, label %cond.true.51, label %cond.false.54

cond.true.51:                                     ; preds = %cond.false.46
  %43 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text52 = getelementptr inbounds %struct.buffer, %struct.buffer* %43, i32 0, i32 73
  %44 = load %struct.buffer_text*, %struct.buffer_text** %text52, align 8
  %gap_size53 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %44, i32 0, i32 5
  %45 = load i64, i64* %gap_size53, align 8
  br label %cond.end.55

cond.false.54:                                    ; preds = %cond.false.46
  br label %cond.end.55

cond.end.55:                                      ; preds = %cond.false.54, %cond.true.51
  %cond56 = phi i64 [ %45, %cond.true.51 ], [ 0, %cond.false.54 ]
  %46 = load i64, i64* %from_byte, align 8
  %add57 = add nsw i64 %cond56, %46
  %47 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text58 = getelementptr inbounds %struct.buffer, %struct.buffer* %47, i32 0, i32 73
  %48 = load %struct.buffer_text*, %struct.buffer_text** %text58, align 8
  %beg59 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %48, i32 0, i32 0
  %49 = load i8*, i8** %beg59, align 8
  %add.ptr60 = getelementptr inbounds i8, i8* %49, i64 %add57
  %add.ptr61 = getelementptr inbounds i8, i8* %add.ptr60, i64 -1
  %50 = load i8, i8* %add.ptr61, align 1
  %conv62 = zext i8 %50 to i64
  %add63 = add i64 %conv62, 0
  %cmp64 = icmp ult i64 %add63, 128
  br i1 %cmp64, label %cond.true.66, label %cond.false.83

cond.true.66:                                     ; preds = %cond.end.55, %cond.end.37
  %51 = load i64, i64* %from_byte, align 8
  %52 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text67 = getelementptr inbounds %struct.buffer, %struct.buffer* %52, i32 0, i32 73
  %53 = load %struct.buffer_text*, %struct.buffer_text** %text67, align 8
  %gpt_byte68 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %53, i32 0, i32 3
  %54 = load i64, i64* %gpt_byte68, align 8
  %cmp69 = icmp sge i64 %51, %54
  br i1 %cmp69, label %cond.true.71, label %cond.false.74

cond.true.71:                                     ; preds = %cond.true.66
  %55 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text72 = getelementptr inbounds %struct.buffer, %struct.buffer* %55, i32 0, i32 73
  %56 = load %struct.buffer_text*, %struct.buffer_text** %text72, align 8
  %gap_size73 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %56, i32 0, i32 5
  %57 = load i64, i64* %gap_size73, align 8
  br label %cond.end.75

cond.false.74:                                    ; preds = %cond.true.66
  br label %cond.end.75

cond.end.75:                                      ; preds = %cond.false.74, %cond.true.71
  %cond76 = phi i64 [ %57, %cond.true.71 ], [ 0, %cond.false.74 ]
  %58 = load i64, i64* %from_byte, align 8
  %add77 = add nsw i64 %cond76, %58
  %59 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text78 = getelementptr inbounds %struct.buffer, %struct.buffer* %59, i32 0, i32 73
  %60 = load %struct.buffer_text*, %struct.buffer_text** %text78, align 8
  %beg79 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %60, i32 0, i32 0
  %61 = load i8*, i8** %beg79, align 8
  %add.ptr80 = getelementptr inbounds i8, i8* %61, i64 %add77
  %add.ptr81 = getelementptr inbounds i8, i8* %add.ptr80, i64 -1
  %62 = load i8, i8* %add.ptr81, align 1
  %conv82 = zext i8 %62 to i32
  br label %cond.end.101

cond.false.83:                                    ; preds = %cond.end.55, %cond.end.37
  %63 = load i64, i64* %from_byte, align 8
  %64 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text84 = getelementptr inbounds %struct.buffer, %struct.buffer* %64, i32 0, i32 73
  %65 = load %struct.buffer_text*, %struct.buffer_text** %text84, align 8
  %gpt_byte85 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %65, i32 0, i32 3
  %66 = load i64, i64* %gpt_byte85, align 8
  %cmp86 = icmp sge i64 %63, %66
  br i1 %cmp86, label %cond.true.88, label %cond.false.91

cond.true.88:                                     ; preds = %cond.false.83
  %67 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text89 = getelementptr inbounds %struct.buffer, %struct.buffer* %67, i32 0, i32 73
  %68 = load %struct.buffer_text*, %struct.buffer_text** %text89, align 8
  %gap_size90 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %68, i32 0, i32 5
  %69 = load i64, i64* %gap_size90, align 8
  br label %cond.end.92

cond.false.91:                                    ; preds = %cond.false.83
  br label %cond.end.92

cond.end.92:                                      ; preds = %cond.false.91, %cond.true.88
  %cond93 = phi i64 [ %69, %cond.true.88 ], [ 0, %cond.false.91 ]
  %70 = load i64, i64* %from_byte, align 8
  %add94 = add nsw i64 %cond93, %70
  %71 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text95 = getelementptr inbounds %struct.buffer, %struct.buffer* %71, i32 0, i32 73
  %72 = load %struct.buffer_text*, %struct.buffer_text** %text95, align 8
  %beg96 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %72, i32 0, i32 0
  %73 = load i8*, i8** %beg96, align 8
  %add.ptr97 = getelementptr inbounds i8, i8* %73, i64 %add94
  %add.ptr98 = getelementptr inbounds i8, i8* %add.ptr97, i64 -1
  %74 = load i8, i8* %add.ptr98, align 1
  %conv99 = zext i8 %74 to i32
  %add100 = add nsw i32 %conv99, 4194048
  br label %cond.end.101

cond.end.101:                                     ; preds = %cond.end.92, %cond.end.75
  %cond102 = phi i32 [ %conv82, %cond.end.75 ], [ %add100, %cond.end.92 ]
  br label %cond.end.103

cond.end.103:                                     ; preds = %cond.end.101, %cond.true.28
  %cond104 = phi i32 [ %call29, %cond.true.28 ], [ %cond102, %cond.end.101 ]
  store i32 %cond104, i32* %c, align 4
  %75 = load i32, i32* %c, align 4
  %call105 = call i32 @syntax_property_with_flags(i32 %75, i1 zeroext true)
  store i32 %call105, i32* %syntax, align 4
  %76 = load i32, i32* %c, align 4
  %call106 = call i32 @syntax_property(i32 %76, i1 zeroext true)
  store i32 %call106, i32* %code, align 4
  %77 = load i32, i32* %syntax, align 4
  %call107 = call zeroext i1 @SYNTAX_FLAGS_COMSTART_FIRST(i32 %77)
  %frombool = zext i1 %call107 to i8
  store i8 %frombool, i8* %comstart_first, align 1
  %78 = load i32, i32* %syntax, align 4
  %call108 = call zeroext i1 @SYNTAX_FLAGS_COMMENT_NESTED(i32 %78)
  %frombool109 = zext i1 %call108 to i8
  store i8 %frombool109, i8* %comnested, align 1
  %79 = load i32, i32* %syntax, align 4
  %call110 = call i32 @SYNTAX_FLAGS_COMMENT_STYLE(i32 %79, i32 0)
  store i32 %call110, i32* %comstyle, align 4
  br label %do.body.111

do.body.111:                                      ; preds = %cond.end.103
  %80 = load i64, i64* %from, align 8
  %inc = add nsw i64 %80, 1
  store i64 %inc, i64* %from, align 8
  %81 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_112 = getelementptr inbounds %struct.buffer, %struct.buffer* %81, i32 0, i32 39
  %82 = load i64, i64* %enable_multibyte_characters_112, align 8
  %call113 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp114 = icmp eq i64 %82, %call113
  br i1 %cmp114, label %if.then.116, label %if.else.118

if.then.116:                                      ; preds = %do.body.111
  %83 = load i64, i64* %from_byte, align 8
  %inc117 = add nsw i64 %83, 1
  store i64 %inc117, i64* %from_byte, align 8
  br label %if.end.163

if.else.118:                                      ; preds = %do.body.111
  br label %do.body.119

do.body.119:                                      ; preds = %if.else.118
  %84 = load i64, i64* %from_byte, align 8
  %85 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text120 = getelementptr inbounds %struct.buffer, %struct.buffer* %85, i32 0, i32 73
  %86 = load %struct.buffer_text*, %struct.buffer_text** %text120, align 8
  %gpt_byte121 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %86, i32 0, i32 3
  %87 = load i64, i64* %gpt_byte121, align 8
  %cmp122 = icmp sge i64 %84, %87
  br i1 %cmp122, label %cond.true.124, label %cond.false.127

cond.true.124:                                    ; preds = %do.body.119
  %88 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text125 = getelementptr inbounds %struct.buffer, %struct.buffer* %88, i32 0, i32 73
  %89 = load %struct.buffer_text*, %struct.buffer_text** %text125, align 8
  %gap_size126 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %89, i32 0, i32 5
  %90 = load i64, i64* %gap_size126, align 8
  br label %cond.end.128

cond.false.127:                                   ; preds = %do.body.119
  br label %cond.end.128

cond.end.128:                                     ; preds = %cond.false.127, %cond.true.124
  %cond129 = phi i64 [ %90, %cond.true.124 ], [ 0, %cond.false.127 ]
  %91 = load i64, i64* %from_byte, align 8
  %add130 = add nsw i64 %cond129, %91
  %92 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text131 = getelementptr inbounds %struct.buffer, %struct.buffer* %92, i32 0, i32 73
  %93 = load %struct.buffer_text*, %struct.buffer_text** %text131, align 8
  %beg132 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %93, i32 0, i32 0
  %94 = load i8*, i8** %beg132, align 8
  %add.ptr133 = getelementptr inbounds i8, i8* %94, i64 %add130
  %add.ptr134 = getelementptr inbounds i8, i8* %add.ptr133, i64 -1
  store i8* %add.ptr134, i8** %chp, align 8
  %95 = load i8*, i8** %chp, align 8
  %96 = load i8, i8* %95, align 1
  %conv135 = zext i8 %96 to i32
  %and136 = and i32 %conv135, 128
  %tobool137 = icmp ne i32 %and136, 0
  br i1 %tobool137, label %cond.false.139, label %cond.true.138

cond.true.138:                                    ; preds = %cond.end.128
  br label %cond.end.158

cond.false.139:                                   ; preds = %cond.end.128
  %97 = load i8*, i8** %chp, align 8
  %98 = load i8, i8* %97, align 1
  %conv140 = zext i8 %98 to i32
  %and141 = and i32 %conv140, 32
  %tobool142 = icmp ne i32 %and141, 0
  br i1 %tobool142, label %cond.false.144, label %cond.true.143

cond.true.143:                                    ; preds = %cond.false.139
  br label %cond.end.156

cond.false.144:                                   ; preds = %cond.false.139
  %99 = load i8*, i8** %chp, align 8
  %100 = load i8, i8* %99, align 1
  %conv145 = zext i8 %100 to i32
  %and146 = and i32 %conv145, 16
  %tobool147 = icmp ne i32 %and146, 0
  br i1 %tobool147, label %cond.false.149, label %cond.true.148

cond.true.148:                                    ; preds = %cond.false.144
  br label %cond.end.154

cond.false.149:                                   ; preds = %cond.false.144
  %101 = load i8*, i8** %chp, align 8
  %102 = load i8, i8* %101, align 1
  %conv150 = zext i8 %102 to i32
  %and151 = and i32 %conv150, 8
  %tobool152 = icmp ne i32 %and151, 0
  %lnot = xor i1 %tobool152, true
  %cond153 = select i1 %lnot, i32 4, i32 5
  br label %cond.end.154

cond.end.154:                                     ; preds = %cond.false.149, %cond.true.148
  %cond155 = phi i32 [ 3, %cond.true.148 ], [ %cond153, %cond.false.149 ]
  br label %cond.end.156

cond.end.156:                                     ; preds = %cond.end.154, %cond.true.143
  %cond157 = phi i32 [ 2, %cond.true.143 ], [ %cond155, %cond.end.154 ]
  br label %cond.end.158

cond.end.158:                                     ; preds = %cond.end.156, %cond.true.138
  %cond159 = phi i32 [ 1, %cond.true.138 ], [ %cond157, %cond.end.156 ]
  %conv160 = sext i32 %cond159 to i64
  %103 = load i64, i64* %from_byte, align 8
  %add161 = add nsw i64 %103, %conv160
  store i64 %add161, i64* %from_byte, align 8
  br label %do.end.162

do.end.162:                                       ; preds = %cond.end.158
  br label %if.end.163

if.end.163:                                       ; preds = %do.end.162, %if.then.116
  br label %do.end.164

do.end.164:                                       ; preds = %if.end.163
  %104 = load i64, i64* %from, align 8
  call void @UPDATE_SYNTAX_TABLE_FORWARD(i64 %104)
  %105 = load i64, i64* %from, align 8
  %106 = load i64, i64* %stop, align 8
  %cmp165 = icmp slt i64 %105, %106
  br i1 %cmp165, label %land.lhs.true.167, label %if.end.325

land.lhs.true.167:                                ; preds = %do.end.164
  %107 = load i8, i8* %comstart_first, align 1
  %tobool168 = trunc i8 %107 to i1
  br i1 %tobool168, label %land.lhs.true.170, label %if.end.325

land.lhs.true.170:                                ; preds = %land.lhs.true.167
  %108 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_171 = getelementptr inbounds %struct.buffer, %struct.buffer* %108, i32 0, i32 39
  %109 = load i64, i64* %enable_multibyte_characters_171, align 8
  %call172 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp173 = icmp eq i64 %109, %call172
  br i1 %cmp173, label %cond.false.177, label %cond.true.175

cond.true.175:                                    ; preds = %land.lhs.true.170
  %110 = load i64, i64* %from_byte, align 8
  %call176 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %110)
  br label %cond.end.255

cond.false.177:                                   ; preds = %land.lhs.true.170
  br i1 true, label %cond.true.178, label %cond.false.198

cond.true.178:                                    ; preds = %cond.false.177
  %111 = load i64, i64* %from_byte, align 8
  %112 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text179 = getelementptr inbounds %struct.buffer, %struct.buffer* %112, i32 0, i32 73
  %113 = load %struct.buffer_text*, %struct.buffer_text** %text179, align 8
  %gpt_byte180 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %113, i32 0, i32 3
  %114 = load i64, i64* %gpt_byte180, align 8
  %cmp181 = icmp sge i64 %111, %114
  br i1 %cmp181, label %cond.true.183, label %cond.false.186

cond.true.183:                                    ; preds = %cond.true.178
  %115 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text184 = getelementptr inbounds %struct.buffer, %struct.buffer* %115, i32 0, i32 73
  %116 = load %struct.buffer_text*, %struct.buffer_text** %text184, align 8
  %gap_size185 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %116, i32 0, i32 5
  %117 = load i64, i64* %gap_size185, align 8
  br label %cond.end.187

cond.false.186:                                   ; preds = %cond.true.178
  br label %cond.end.187

cond.end.187:                                     ; preds = %cond.false.186, %cond.true.183
  %cond188 = phi i64 [ %117, %cond.true.183 ], [ 0, %cond.false.186 ]
  %118 = load i64, i64* %from_byte, align 8
  %add189 = add nsw i64 %cond188, %118
  %119 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text190 = getelementptr inbounds %struct.buffer, %struct.buffer* %119, i32 0, i32 73
  %120 = load %struct.buffer_text*, %struct.buffer_text** %text190, align 8
  %beg191 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %120, i32 0, i32 0
  %121 = load i8*, i8** %beg191, align 8
  %add.ptr192 = getelementptr inbounds i8, i8* %121, i64 %add189
  %add.ptr193 = getelementptr inbounds i8, i8* %add.ptr192, i64 -1
  %122 = load i8, i8* %add.ptr193, align 1
  %conv194 = zext i8 %122 to i32
  %add195 = add i32 %conv194, 0
  %cmp196 = icmp ult i32 %add195, 128
  br i1 %cmp196, label %cond.true.218, label %cond.false.235

cond.false.198:                                   ; preds = %cond.false.177
  %123 = load i64, i64* %from_byte, align 8
  %124 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text199 = getelementptr inbounds %struct.buffer, %struct.buffer* %124, i32 0, i32 73
  %125 = load %struct.buffer_text*, %struct.buffer_text** %text199, align 8
  %gpt_byte200 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %125, i32 0, i32 3
  %126 = load i64, i64* %gpt_byte200, align 8
  %cmp201 = icmp sge i64 %123, %126
  br i1 %cmp201, label %cond.true.203, label %cond.false.206

cond.true.203:                                    ; preds = %cond.false.198
  %127 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text204 = getelementptr inbounds %struct.buffer, %struct.buffer* %127, i32 0, i32 73
  %128 = load %struct.buffer_text*, %struct.buffer_text** %text204, align 8
  %gap_size205 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %128, i32 0, i32 5
  %129 = load i64, i64* %gap_size205, align 8
  br label %cond.end.207

cond.false.206:                                   ; preds = %cond.false.198
  br label %cond.end.207

cond.end.207:                                     ; preds = %cond.false.206, %cond.true.203
  %cond208 = phi i64 [ %129, %cond.true.203 ], [ 0, %cond.false.206 ]
  %130 = load i64, i64* %from_byte, align 8
  %add209 = add nsw i64 %cond208, %130
  %131 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text210 = getelementptr inbounds %struct.buffer, %struct.buffer* %131, i32 0, i32 73
  %132 = load %struct.buffer_text*, %struct.buffer_text** %text210, align 8
  %beg211 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %132, i32 0, i32 0
  %133 = load i8*, i8** %beg211, align 8
  %add.ptr212 = getelementptr inbounds i8, i8* %133, i64 %add209
  %add.ptr213 = getelementptr inbounds i8, i8* %add.ptr212, i64 -1
  %134 = load i8, i8* %add.ptr213, align 1
  %conv214 = zext i8 %134 to i64
  %add215 = add i64 %conv214, 0
  %cmp216 = icmp ult i64 %add215, 128
  br i1 %cmp216, label %cond.true.218, label %cond.false.235

cond.true.218:                                    ; preds = %cond.end.207, %cond.end.187
  %135 = load i64, i64* %from_byte, align 8
  %136 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text219 = getelementptr inbounds %struct.buffer, %struct.buffer* %136, i32 0, i32 73
  %137 = load %struct.buffer_text*, %struct.buffer_text** %text219, align 8
  %gpt_byte220 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %137, i32 0, i32 3
  %138 = load i64, i64* %gpt_byte220, align 8
  %cmp221 = icmp sge i64 %135, %138
  br i1 %cmp221, label %cond.true.223, label %cond.false.226

cond.true.223:                                    ; preds = %cond.true.218
  %139 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text224 = getelementptr inbounds %struct.buffer, %struct.buffer* %139, i32 0, i32 73
  %140 = load %struct.buffer_text*, %struct.buffer_text** %text224, align 8
  %gap_size225 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %140, i32 0, i32 5
  %141 = load i64, i64* %gap_size225, align 8
  br label %cond.end.227

cond.false.226:                                   ; preds = %cond.true.218
  br label %cond.end.227

cond.end.227:                                     ; preds = %cond.false.226, %cond.true.223
  %cond228 = phi i64 [ %141, %cond.true.223 ], [ 0, %cond.false.226 ]
  %142 = load i64, i64* %from_byte, align 8
  %add229 = add nsw i64 %cond228, %142
  %143 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text230 = getelementptr inbounds %struct.buffer, %struct.buffer* %143, i32 0, i32 73
  %144 = load %struct.buffer_text*, %struct.buffer_text** %text230, align 8
  %beg231 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %144, i32 0, i32 0
  %145 = load i8*, i8** %beg231, align 8
  %add.ptr232 = getelementptr inbounds i8, i8* %145, i64 %add229
  %add.ptr233 = getelementptr inbounds i8, i8* %add.ptr232, i64 -1
  %146 = load i8, i8* %add.ptr233, align 1
  %conv234 = zext i8 %146 to i32
  br label %cond.end.253

cond.false.235:                                   ; preds = %cond.end.207, %cond.end.187
  %147 = load i64, i64* %from_byte, align 8
  %148 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text236 = getelementptr inbounds %struct.buffer, %struct.buffer* %148, i32 0, i32 73
  %149 = load %struct.buffer_text*, %struct.buffer_text** %text236, align 8
  %gpt_byte237 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %149, i32 0, i32 3
  %150 = load i64, i64* %gpt_byte237, align 8
  %cmp238 = icmp sge i64 %147, %150
  br i1 %cmp238, label %cond.true.240, label %cond.false.243

cond.true.240:                                    ; preds = %cond.false.235
  %151 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text241 = getelementptr inbounds %struct.buffer, %struct.buffer* %151, i32 0, i32 73
  %152 = load %struct.buffer_text*, %struct.buffer_text** %text241, align 8
  %gap_size242 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %152, i32 0, i32 5
  %153 = load i64, i64* %gap_size242, align 8
  br label %cond.end.244

cond.false.243:                                   ; preds = %cond.false.235
  br label %cond.end.244

cond.end.244:                                     ; preds = %cond.false.243, %cond.true.240
  %cond245 = phi i64 [ %153, %cond.true.240 ], [ 0, %cond.false.243 ]
  %154 = load i64, i64* %from_byte, align 8
  %add246 = add nsw i64 %cond245, %154
  %155 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text247 = getelementptr inbounds %struct.buffer, %struct.buffer* %155, i32 0, i32 73
  %156 = load %struct.buffer_text*, %struct.buffer_text** %text247, align 8
  %beg248 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %156, i32 0, i32 0
  %157 = load i8*, i8** %beg248, align 8
  %add.ptr249 = getelementptr inbounds i8, i8* %157, i64 %add246
  %add.ptr250 = getelementptr inbounds i8, i8* %add.ptr249, i64 -1
  %158 = load i8, i8* %add.ptr250, align 1
  %conv251 = zext i8 %158 to i32
  %add252 = add nsw i32 %conv251, 4194048
  br label %cond.end.253

cond.end.253:                                     ; preds = %cond.end.244, %cond.end.227
  %cond254 = phi i32 [ %conv234, %cond.end.227 ], [ %add252, %cond.end.244 ]
  br label %cond.end.255

cond.end.255:                                     ; preds = %cond.end.253, %cond.true.175
  %cond256 = phi i32 [ %call176, %cond.true.175 ], [ %cond254, %cond.end.253 ]
  store i32 %cond256, i32* %c1, align 4
  %159 = load i32, i32* %c1, align 4
  %call257 = call i32 @syntax_property_with_flags(i32 %159, i1 zeroext true)
  store i32 %call257, i32* %other_syntax, align 4
  %160 = load i32, i32* %other_syntax, align 4
  %call258 = call zeroext i1 @SYNTAX_FLAGS_COMSTART_SECOND(i32 %160)
  br i1 %call258, label %if.then.260, label %if.end.325

if.then.260:                                      ; preds = %cond.end.255
  store i32 11, i32* %code, align 4
  %161 = load i32, i32* %other_syntax, align 4
  %162 = load i32, i32* %syntax, align 4
  %call261 = call i32 @SYNTAX_FLAGS_COMMENT_STYLE(i32 %161, i32 %162)
  store i32 %call261, i32* %comstyle, align 4
  %163 = load i32, i32* %other_syntax, align 4
  %call262 = call zeroext i1 @SYNTAX_FLAGS_COMMENT_NESTED(i32 %163)
  %conv263 = zext i1 %call262 to i32
  %164 = load i8, i8* %comnested, align 1
  %tobool264 = trunc i8 %164 to i1
  %conv265 = zext i1 %tobool264 to i32
  %or = or i32 %conv265, %conv263
  %tobool266 = icmp ne i32 %or, 0
  %frombool267 = zext i1 %tobool266 to i8
  store i8 %frombool267, i8* %comnested, align 1
  br label %do.body.268

do.body.268:                                      ; preds = %if.then.260
  %165 = load i64, i64* %from, align 8
  %inc269 = add nsw i64 %165, 1
  store i64 %inc269, i64* %from, align 8
  %166 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_270 = getelementptr inbounds %struct.buffer, %struct.buffer* %166, i32 0, i32 39
  %167 = load i64, i64* %enable_multibyte_characters_270, align 8
  %call271 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp272 = icmp eq i64 %167, %call271
  br i1 %cmp272, label %if.then.274, label %if.else.276

if.then.274:                                      ; preds = %do.body.268
  %168 = load i64, i64* %from_byte, align 8
  %inc275 = add nsw i64 %168, 1
  store i64 %inc275, i64* %from_byte, align 8
  br label %if.end.323

if.else.276:                                      ; preds = %do.body.268
  br label %do.body.277

do.body.277:                                      ; preds = %if.else.276
  %169 = load i64, i64* %from_byte, align 8
  %170 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text279 = getelementptr inbounds %struct.buffer, %struct.buffer* %170, i32 0, i32 73
  %171 = load %struct.buffer_text*, %struct.buffer_text** %text279, align 8
  %gpt_byte280 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %171, i32 0, i32 3
  %172 = load i64, i64* %gpt_byte280, align 8
  %cmp281 = icmp sge i64 %169, %172
  br i1 %cmp281, label %cond.true.283, label %cond.false.286

cond.true.283:                                    ; preds = %do.body.277
  %173 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text284 = getelementptr inbounds %struct.buffer, %struct.buffer* %173, i32 0, i32 73
  %174 = load %struct.buffer_text*, %struct.buffer_text** %text284, align 8
  %gap_size285 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %174, i32 0, i32 5
  %175 = load i64, i64* %gap_size285, align 8
  br label %cond.end.287

cond.false.286:                                   ; preds = %do.body.277
  br label %cond.end.287

cond.end.287:                                     ; preds = %cond.false.286, %cond.true.283
  %cond288 = phi i64 [ %175, %cond.true.283 ], [ 0, %cond.false.286 ]
  %176 = load i64, i64* %from_byte, align 8
  %add289 = add nsw i64 %cond288, %176
  %177 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text290 = getelementptr inbounds %struct.buffer, %struct.buffer* %177, i32 0, i32 73
  %178 = load %struct.buffer_text*, %struct.buffer_text** %text290, align 8
  %beg291 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %178, i32 0, i32 0
  %179 = load i8*, i8** %beg291, align 8
  %add.ptr292 = getelementptr inbounds i8, i8* %179, i64 %add289
  %add.ptr293 = getelementptr inbounds i8, i8* %add.ptr292, i64 -1
  store i8* %add.ptr293, i8** %chp278, align 8
  %180 = load i8*, i8** %chp278, align 8
  %181 = load i8, i8* %180, align 1
  %conv294 = zext i8 %181 to i32
  %and295 = and i32 %conv294, 128
  %tobool296 = icmp ne i32 %and295, 0
  br i1 %tobool296, label %cond.false.298, label %cond.true.297

cond.true.297:                                    ; preds = %cond.end.287
  br label %cond.end.318

cond.false.298:                                   ; preds = %cond.end.287
  %182 = load i8*, i8** %chp278, align 8
  %183 = load i8, i8* %182, align 1
  %conv299 = zext i8 %183 to i32
  %and300 = and i32 %conv299, 32
  %tobool301 = icmp ne i32 %and300, 0
  br i1 %tobool301, label %cond.false.303, label %cond.true.302

cond.true.302:                                    ; preds = %cond.false.298
  br label %cond.end.316

cond.false.303:                                   ; preds = %cond.false.298
  %184 = load i8*, i8** %chp278, align 8
  %185 = load i8, i8* %184, align 1
  %conv304 = zext i8 %185 to i32
  %and305 = and i32 %conv304, 16
  %tobool306 = icmp ne i32 %and305, 0
  br i1 %tobool306, label %cond.false.308, label %cond.true.307

cond.true.307:                                    ; preds = %cond.false.303
  br label %cond.end.314

cond.false.308:                                   ; preds = %cond.false.303
  %186 = load i8*, i8** %chp278, align 8
  %187 = load i8, i8* %186, align 1
  %conv309 = zext i8 %187 to i32
  %and310 = and i32 %conv309, 8
  %tobool311 = icmp ne i32 %and310, 0
  %lnot312 = xor i1 %tobool311, true
  %cond313 = select i1 %lnot312, i32 4, i32 5
  br label %cond.end.314

cond.end.314:                                     ; preds = %cond.false.308, %cond.true.307
  %cond315 = phi i32 [ 3, %cond.true.307 ], [ %cond313, %cond.false.308 ]
  br label %cond.end.316

cond.end.316:                                     ; preds = %cond.end.314, %cond.true.302
  %cond317 = phi i32 [ 2, %cond.true.302 ], [ %cond315, %cond.end.314 ]
  br label %cond.end.318

cond.end.318:                                     ; preds = %cond.end.316, %cond.true.297
  %cond319 = phi i32 [ 1, %cond.true.297 ], [ %cond317, %cond.end.316 ]
  %conv320 = sext i32 %cond319 to i64
  %188 = load i64, i64* %from_byte, align 8
  %add321 = add nsw i64 %188, %conv320
  store i64 %add321, i64* %from_byte, align 8
  br label %do.end.322

do.end.322:                                       ; preds = %cond.end.318
  br label %if.end.323

if.end.323:                                       ; preds = %do.end.322, %if.then.274
  br label %do.end.324

do.end.324:                                       ; preds = %if.end.323
  %189 = load i64, i64* %from, align 8
  call void @UPDATE_SYNTAX_TABLE_FORWARD(i64 %189)
  br label %if.end.325

if.end.325:                                       ; preds = %do.end.324, %cond.end.255, %land.lhs.true.167, %do.end.164
  br label %do.cond

do.cond:                                          ; preds = %if.end.325
  %190 = load i32, i32* %code, align 4
  %cmp326 = icmp eq i32 %190, 0
  br i1 %cmp326, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %do.cond
  %191 = load i32, i32* %code, align 4
  %cmp328 = icmp eq i32 %191, 12
  br i1 %cmp328, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %192 = load i32, i32* %c, align 4
  %cmp330 = icmp eq i32 %192, 10
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %193 = phi i1 [ false, %lor.rhs ], [ %cmp330, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %do.cond
  %194 = phi i1 [ true, %do.cond ], [ %193, %land.end ]
  br i1 %194, label %do.body.19, label %do.end.332

do.end.332:                                       ; preds = %lor.end
  %195 = load i32, i32* %code, align 4
  %cmp333 = icmp eq i32 %195, 14
  br i1 %cmp333, label %if.then.335, label %if.else.336

if.then.335:                                      ; preds = %do.end.332
  store i32 257, i32* %comstyle, align 4
  br label %if.end.384

if.else.336:                                      ; preds = %do.end.332
  %196 = load i32, i32* %code, align 4
  %cmp337 = icmp ne i32 %196, 11
  br i1 %cmp337, label %if.then.339, label %if.end.383

if.then.339:                                      ; preds = %if.else.336
  store i8 0, i8* @immediate_quit, align 1
  br label %do.body.340

do.body.340:                                      ; preds = %if.then.339
  %197 = load i64, i64* %from, align 8
  %dec = add nsw i64 %197, -1
  store i64 %dec, i64* %from, align 8
  %198 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_341 = getelementptr inbounds %struct.buffer, %struct.buffer* %198, i32 0, i32 39
  %199 = load i64, i64* %enable_multibyte_characters_341, align 8
  %call342 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp343 = icmp eq i64 %199, %call342
  br i1 %cmp343, label %if.then.345, label %if.else.347

if.then.345:                                      ; preds = %do.body.340
  %200 = load i64, i64* %from_byte, align 8
  %dec346 = add nsw i64 %200, -1
  store i64 %dec346, i64* %from_byte, align 8
  br label %if.end.379

if.else.347:                                      ; preds = %do.body.340
  br label %do.body.348

do.body.348:                                      ; preds = %if.else.347
  %201 = load i64, i64* %from_byte, align 8
  %dec350 = add nsw i64 %201, -1
  store i64 %dec350, i64* %from_byte, align 8
  %202 = load i64, i64* %from_byte, align 8
  %203 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text351 = getelementptr inbounds %struct.buffer, %struct.buffer* %203, i32 0, i32 73
  %204 = load %struct.buffer_text*, %struct.buffer_text** %text351, align 8
  %gpt_byte352 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %204, i32 0, i32 3
  %205 = load i64, i64* %gpt_byte352, align 8
  %cmp353 = icmp slt i64 %202, %205
  br i1 %cmp353, label %if.then.355, label %if.else.360

if.then.355:                                      ; preds = %do.body.348
  %206 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text356 = getelementptr inbounds %struct.buffer, %struct.buffer* %206, i32 0, i32 73
  %207 = load %struct.buffer_text*, %struct.buffer_text** %text356, align 8
  %beg357 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %207, i32 0, i32 0
  %208 = load i8*, i8** %beg357, align 8
  %209 = load i64, i64* %from_byte, align 8
  %add.ptr358 = getelementptr inbounds i8, i8* %208, i64 %209
  %add.ptr359 = getelementptr inbounds i8, i8* %add.ptr358, i64 -1
  store i8* %add.ptr359, i8** %chp349, align 8
  br label %if.end.368

if.else.360:                                      ; preds = %do.body.348
  %210 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text361 = getelementptr inbounds %struct.buffer, %struct.buffer* %210, i32 0, i32 73
  %211 = load %struct.buffer_text*, %struct.buffer_text** %text361, align 8
  %beg362 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %211, i32 0, i32 0
  %212 = load i8*, i8** %beg362, align 8
  %213 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text363 = getelementptr inbounds %struct.buffer, %struct.buffer* %213, i32 0, i32 73
  %214 = load %struct.buffer_text*, %struct.buffer_text** %text363, align 8
  %gap_size364 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %214, i32 0, i32 5
  %215 = load i64, i64* %gap_size364, align 8
  %add.ptr365 = getelementptr inbounds i8, i8* %212, i64 %215
  %216 = load i64, i64* %from_byte, align 8
  %add.ptr366 = getelementptr inbounds i8, i8* %add.ptr365, i64 %216
  %add.ptr367 = getelementptr inbounds i8, i8* %add.ptr366, i64 -1
  store i8* %add.ptr367, i8** %chp349, align 8
  br label %if.end.368

if.end.368:                                       ; preds = %if.else.360, %if.then.355
  br label %while.cond.369

while.cond.369:                                   ; preds = %while.body.375, %if.end.368
  %217 = load i8*, i8** %chp349, align 8
  %218 = load i8, i8* %217, align 1
  %conv370 = zext i8 %218 to i32
  %and371 = and i32 %conv370, 192
  %cmp372 = icmp ne i32 %and371, 128
  %lnot374 = xor i1 %cmp372, true
  br i1 %lnot374, label %while.body.375, label %while.end

while.body.375:                                   ; preds = %while.cond.369
  %219 = load i8*, i8** %chp349, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %219, i32 -1
  store i8* %incdec.ptr, i8** %chp349, align 8
  %220 = load i64, i64* %from_byte, align 8
  %dec376 = add nsw i64 %220, -1
  store i64 %dec376, i64* %from_byte, align 8
  br label %while.cond.369

while.end:                                        ; preds = %while.cond.369
  br label %do.end.378

do.end.378:                                       ; preds = %while.end
  br label %if.end.379

if.end.379:                                       ; preds = %do.end.378, %if.then.345
  br label %do.end.381

do.end.381:                                       ; preds = %if.end.379
  %221 = load i64, i64* %from, align 8
  %222 = load i64, i64* %from_byte, align 8
  call void @set_point_both(i64 %221, i64 %222)
  %call382 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call382, i64* %retval
  br label %return

if.end.383:                                       ; preds = %if.else.336
  br label %if.end.384

if.end.384:                                       ; preds = %if.end.383, %if.then.335
  %223 = load i64, i64* %from, align 8
  %224 = load i64, i64* %from_byte, align 8
  %225 = load i64, i64* %stop, align 8
  %226 = load i8, i8* %comnested, align 1
  %tobool385 = trunc i8 %226 to i1
  %conv386 = zext i1 %tobool385 to i64
  %227 = load i32, i32* %comstyle, align 4
  %call387 = call zeroext i1 @forw_comment(i64 %223, i64 %224, i64 %225, i64 %conv386, i32 %227, i32 0, i64* %out_charpos, i64* %out_bytepos, i64* %dummy)
  %frombool388 = zext i1 %call387 to i8
  store i8 %frombool388, i8* %found, align 1
  %228 = load i64, i64* %out_charpos, align 8
  store i64 %228, i64* %from, align 8
  %229 = load i64, i64* %out_bytepos, align 8
  store i64 %229, i64* %from_byte, align 8
  %230 = load i8, i8* %found, align 1
  %tobool389 = trunc i8 %230 to i1
  br i1 %tobool389, label %if.end.392, label %if.then.390

if.then.390:                                      ; preds = %if.end.384
  store i8 0, i8* @immediate_quit, align 1
  %231 = load i64, i64* %from, align 8
  %232 = load i64, i64* %from_byte, align 8
  call void @set_point_both(i64 %231, i64 %232)
  %call391 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call391, i64* %retval
  br label %return

if.end.392:                                       ; preds = %if.end.384
  br label %do.body.393

do.body.393:                                      ; preds = %if.end.392
  %233 = load i64, i64* %from, align 8
  %inc394 = add nsw i64 %233, 1
  store i64 %inc394, i64* %from, align 8
  %234 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_395 = getelementptr inbounds %struct.buffer, %struct.buffer* %234, i32 0, i32 39
  %235 = load i64, i64* %enable_multibyte_characters_395, align 8
  %call396 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp397 = icmp eq i64 %235, %call396
  br i1 %cmp397, label %if.then.399, label %if.else.401

if.then.399:                                      ; preds = %do.body.393
  %236 = load i64, i64* %from_byte, align 8
  %inc400 = add nsw i64 %236, 1
  store i64 %inc400, i64* %from_byte, align 8
  br label %if.end.449

if.else.401:                                      ; preds = %do.body.393
  br label %do.body.402

do.body.402:                                      ; preds = %if.else.401
  %237 = load i64, i64* %from_byte, align 8
  %238 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text404 = getelementptr inbounds %struct.buffer, %struct.buffer* %238, i32 0, i32 73
  %239 = load %struct.buffer_text*, %struct.buffer_text** %text404, align 8
  %gpt_byte405 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %239, i32 0, i32 3
  %240 = load i64, i64* %gpt_byte405, align 8
  %cmp406 = icmp sge i64 %237, %240
  br i1 %cmp406, label %cond.true.408, label %cond.false.411

cond.true.408:                                    ; preds = %do.body.402
  %241 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text409 = getelementptr inbounds %struct.buffer, %struct.buffer* %241, i32 0, i32 73
  %242 = load %struct.buffer_text*, %struct.buffer_text** %text409, align 8
  %gap_size410 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %242, i32 0, i32 5
  %243 = load i64, i64* %gap_size410, align 8
  br label %cond.end.412

cond.false.411:                                   ; preds = %do.body.402
  br label %cond.end.412

cond.end.412:                                     ; preds = %cond.false.411, %cond.true.408
  %cond413 = phi i64 [ %243, %cond.true.408 ], [ 0, %cond.false.411 ]
  %244 = load i64, i64* %from_byte, align 8
  %add414 = add nsw i64 %cond413, %244
  %245 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text415 = getelementptr inbounds %struct.buffer, %struct.buffer* %245, i32 0, i32 73
  %246 = load %struct.buffer_text*, %struct.buffer_text** %text415, align 8
  %beg416 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %246, i32 0, i32 0
  %247 = load i8*, i8** %beg416, align 8
  %add.ptr417 = getelementptr inbounds i8, i8* %247, i64 %add414
  %add.ptr418 = getelementptr inbounds i8, i8* %add.ptr417, i64 -1
  store i8* %add.ptr418, i8** %chp403, align 8
  %248 = load i8*, i8** %chp403, align 8
  %249 = load i8, i8* %248, align 1
  %conv419 = zext i8 %249 to i32
  %and420 = and i32 %conv419, 128
  %tobool421 = icmp ne i32 %and420, 0
  br i1 %tobool421, label %cond.false.423, label %cond.true.422

cond.true.422:                                    ; preds = %cond.end.412
  br label %cond.end.443

cond.false.423:                                   ; preds = %cond.end.412
  %250 = load i8*, i8** %chp403, align 8
  %251 = load i8, i8* %250, align 1
  %conv424 = zext i8 %251 to i32
  %and425 = and i32 %conv424, 32
  %tobool426 = icmp ne i32 %and425, 0
  br i1 %tobool426, label %cond.false.428, label %cond.true.427

cond.true.427:                                    ; preds = %cond.false.423
  br label %cond.end.441

cond.false.428:                                   ; preds = %cond.false.423
  %252 = load i8*, i8** %chp403, align 8
  %253 = load i8, i8* %252, align 1
  %conv429 = zext i8 %253 to i32
  %and430 = and i32 %conv429, 16
  %tobool431 = icmp ne i32 %and430, 0
  br i1 %tobool431, label %cond.false.433, label %cond.true.432

cond.true.432:                                    ; preds = %cond.false.428
  br label %cond.end.439

cond.false.433:                                   ; preds = %cond.false.428
  %254 = load i8*, i8** %chp403, align 8
  %255 = load i8, i8* %254, align 1
  %conv434 = zext i8 %255 to i32
  %and435 = and i32 %conv434, 8
  %tobool436 = icmp ne i32 %and435, 0
  %lnot437 = xor i1 %tobool436, true
  %cond438 = select i1 %lnot437, i32 4, i32 5
  br label %cond.end.439

cond.end.439:                                     ; preds = %cond.false.433, %cond.true.432
  %cond440 = phi i32 [ 3, %cond.true.432 ], [ %cond438, %cond.false.433 ]
  br label %cond.end.441

cond.end.441:                                     ; preds = %cond.end.439, %cond.true.427
  %cond442 = phi i32 [ 2, %cond.true.427 ], [ %cond440, %cond.end.439 ]
  br label %cond.end.443

cond.end.443:                                     ; preds = %cond.end.441, %cond.true.422
  %cond444 = phi i32 [ 1, %cond.true.422 ], [ %cond442, %cond.end.441 ]
  %conv445 = sext i32 %cond444 to i64
  %256 = load i64, i64* %from_byte, align 8
  %add446 = add nsw i64 %256, %conv445
  store i64 %add446, i64* %from_byte, align 8
  br label %do.end.448

do.end.448:                                       ; preds = %cond.end.443
  br label %if.end.449

if.end.449:                                       ; preds = %do.end.448, %if.then.399
  br label %do.end.451

do.end.451:                                       ; preds = %if.end.449
  %257 = load i64, i64* %from, align 8
  call void @UPDATE_SYNTAX_TABLE_FORWARD(i64 %257)
  %258 = load i64, i64* %count1, align 8
  %dec452 = add nsw i64 %258, -1
  store i64 %dec452, i64* %count1, align 8
  br label %while.cond

while.end.453:                                    ; preds = %while.cond
  br label %while.cond.454

while.cond.454:                                   ; preds = %while.end.1067, %while.end.453
  %259 = load i64, i64* %count1, align 8
  %cmp455 = icmp slt i64 %259, 0
  br i1 %cmp455, label %while.body.457, label %while.end.1069

while.body.457:                                   ; preds = %while.cond.454
  br label %while.body.459

while.body.459:                                   ; preds = %while.body.457, %if.end.1066
  %260 = load i64, i64* %from, align 8
  %261 = load i64, i64* %stop, align 8
  %cmp461 = icmp sle i64 %260, %261
  br i1 %cmp461, label %if.then.463, label %if.end.466

if.then.463:                                      ; preds = %while.body.459
  %262 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv464 = getelementptr inbounds %struct.buffer, %struct.buffer* %262, i32 0, i32 77
  %263 = load i64, i64* %begv464, align 8
  %264 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %264, i32 0, i32 78
  %265 = load i64, i64* %begv_byte, align 8
  call void @set_point_both(i64 %263, i64 %265)
  store i8 0, i8* @immediate_quit, align 1
  %call465 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call465, i64* %retval
  br label %return

if.end.466:                                       ; preds = %while.body.459
  br label %do.body.467

do.body.467:                                      ; preds = %if.end.466
  %266 = load i64, i64* %from, align 8
  %dec468 = add nsw i64 %266, -1
  store i64 %dec468, i64* %from, align 8
  %267 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_469 = getelementptr inbounds %struct.buffer, %struct.buffer* %267, i32 0, i32 39
  %268 = load i64, i64* %enable_multibyte_characters_469, align 8
  %call470 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp471 = icmp eq i64 %268, %call470
  br i1 %cmp471, label %if.then.473, label %if.else.475

if.then.473:                                      ; preds = %do.body.467
  %269 = load i64, i64* %from_byte, align 8
  %dec474 = add nsw i64 %269, -1
  store i64 %dec474, i64* %from_byte, align 8
  br label %if.end.509

if.else.475:                                      ; preds = %do.body.467
  br label %do.body.476

do.body.476:                                      ; preds = %if.else.475
  %270 = load i64, i64* %from_byte, align 8
  %dec478 = add nsw i64 %270, -1
  store i64 %dec478, i64* %from_byte, align 8
  %271 = load i64, i64* %from_byte, align 8
  %272 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text479 = getelementptr inbounds %struct.buffer, %struct.buffer* %272, i32 0, i32 73
  %273 = load %struct.buffer_text*, %struct.buffer_text** %text479, align 8
  %gpt_byte480 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %273, i32 0, i32 3
  %274 = load i64, i64* %gpt_byte480, align 8
  %cmp481 = icmp slt i64 %271, %274
  br i1 %cmp481, label %if.then.483, label %if.else.488

if.then.483:                                      ; preds = %do.body.476
  %275 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text484 = getelementptr inbounds %struct.buffer, %struct.buffer* %275, i32 0, i32 73
  %276 = load %struct.buffer_text*, %struct.buffer_text** %text484, align 8
  %beg485 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %276, i32 0, i32 0
  %277 = load i8*, i8** %beg485, align 8
  %278 = load i64, i64* %from_byte, align 8
  %add.ptr486 = getelementptr inbounds i8, i8* %277, i64 %278
  %add.ptr487 = getelementptr inbounds i8, i8* %add.ptr486, i64 -1
  store i8* %add.ptr487, i8** %chp477, align 8
  br label %if.end.496

if.else.488:                                      ; preds = %do.body.476
  %279 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text489 = getelementptr inbounds %struct.buffer, %struct.buffer* %279, i32 0, i32 73
  %280 = load %struct.buffer_text*, %struct.buffer_text** %text489, align 8
  %beg490 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %280, i32 0, i32 0
  %281 = load i8*, i8** %beg490, align 8
  %282 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text491 = getelementptr inbounds %struct.buffer, %struct.buffer* %282, i32 0, i32 73
  %283 = load %struct.buffer_text*, %struct.buffer_text** %text491, align 8
  %gap_size492 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %283, i32 0, i32 5
  %284 = load i64, i64* %gap_size492, align 8
  %add.ptr493 = getelementptr inbounds i8, i8* %281, i64 %284
  %285 = load i64, i64* %from_byte, align 8
  %add.ptr494 = getelementptr inbounds i8, i8* %add.ptr493, i64 %285
  %add.ptr495 = getelementptr inbounds i8, i8* %add.ptr494, i64 -1
  store i8* %add.ptr495, i8** %chp477, align 8
  br label %if.end.496

if.end.496:                                       ; preds = %if.else.488, %if.then.483
  br label %while.cond.497

while.cond.497:                                   ; preds = %while.body.503, %if.end.496
  %286 = load i8*, i8** %chp477, align 8
  %287 = load i8, i8* %286, align 1
  %conv498 = zext i8 %287 to i32
  %and499 = and i32 %conv498, 192
  %cmp500 = icmp ne i32 %and499, 128
  %lnot502 = xor i1 %cmp500, true
  br i1 %lnot502, label %while.body.503, label %while.end.506

while.body.503:                                   ; preds = %while.cond.497
  %288 = load i8*, i8** %chp477, align 8
  %incdec.ptr504 = getelementptr inbounds i8, i8* %288, i32 -1
  store i8* %incdec.ptr504, i8** %chp477, align 8
  %289 = load i64, i64* %from_byte, align 8
  %dec505 = add nsw i64 %289, -1
  store i64 %dec505, i64* %from_byte, align 8
  br label %while.cond.497

while.end.506:                                    ; preds = %while.cond.497
  br label %do.end.508

do.end.508:                                       ; preds = %while.end.506
  br label %if.end.509

if.end.509:                                       ; preds = %do.end.508, %if.then.473
  br label %do.end.511

do.end.511:                                       ; preds = %if.end.509
  %290 = load i64, i64* %from, align 8
  %291 = load i64, i64* %from_byte, align 8
  %call512 = call zeroext i1 @char_quoted(i64 %290, i64 %291)
  %frombool513 = zext i1 %call512 to i8
  store i8 %frombool513, i8* %quoted, align 1
  %292 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_514 = getelementptr inbounds %struct.buffer, %struct.buffer* %292, i32 0, i32 39
  %293 = load i64, i64* %enable_multibyte_characters_514, align 8
  %call515 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp516 = icmp eq i64 %293, %call515
  br i1 %cmp516, label %cond.false.520, label %cond.true.518

cond.true.518:                                    ; preds = %do.end.511
  %294 = load i64, i64* %from_byte, align 8
  %call519 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %294)
  br label %cond.end.598

cond.false.520:                                   ; preds = %do.end.511
  br i1 true, label %cond.true.521, label %cond.false.541

cond.true.521:                                    ; preds = %cond.false.520
  %295 = load i64, i64* %from_byte, align 8
  %296 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text522 = getelementptr inbounds %struct.buffer, %struct.buffer* %296, i32 0, i32 73
  %297 = load %struct.buffer_text*, %struct.buffer_text** %text522, align 8
  %gpt_byte523 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %297, i32 0, i32 3
  %298 = load i64, i64* %gpt_byte523, align 8
  %cmp524 = icmp sge i64 %295, %298
  br i1 %cmp524, label %cond.true.526, label %cond.false.529

cond.true.526:                                    ; preds = %cond.true.521
  %299 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text527 = getelementptr inbounds %struct.buffer, %struct.buffer* %299, i32 0, i32 73
  %300 = load %struct.buffer_text*, %struct.buffer_text** %text527, align 8
  %gap_size528 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %300, i32 0, i32 5
  %301 = load i64, i64* %gap_size528, align 8
  br label %cond.end.530

cond.false.529:                                   ; preds = %cond.true.521
  br label %cond.end.530

cond.end.530:                                     ; preds = %cond.false.529, %cond.true.526
  %cond531 = phi i64 [ %301, %cond.true.526 ], [ 0, %cond.false.529 ]
  %302 = load i64, i64* %from_byte, align 8
  %add532 = add nsw i64 %cond531, %302
  %303 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text533 = getelementptr inbounds %struct.buffer, %struct.buffer* %303, i32 0, i32 73
  %304 = load %struct.buffer_text*, %struct.buffer_text** %text533, align 8
  %beg534 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %304, i32 0, i32 0
  %305 = load i8*, i8** %beg534, align 8
  %add.ptr535 = getelementptr inbounds i8, i8* %305, i64 %add532
  %add.ptr536 = getelementptr inbounds i8, i8* %add.ptr535, i64 -1
  %306 = load i8, i8* %add.ptr536, align 1
  %conv537 = zext i8 %306 to i32
  %add538 = add i32 %conv537, 0
  %cmp539 = icmp ult i32 %add538, 128
  br i1 %cmp539, label %cond.true.561, label %cond.false.578

cond.false.541:                                   ; preds = %cond.false.520
  %307 = load i64, i64* %from_byte, align 8
  %308 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text542 = getelementptr inbounds %struct.buffer, %struct.buffer* %308, i32 0, i32 73
  %309 = load %struct.buffer_text*, %struct.buffer_text** %text542, align 8
  %gpt_byte543 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %309, i32 0, i32 3
  %310 = load i64, i64* %gpt_byte543, align 8
  %cmp544 = icmp sge i64 %307, %310
  br i1 %cmp544, label %cond.true.546, label %cond.false.549

cond.true.546:                                    ; preds = %cond.false.541
  %311 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text547 = getelementptr inbounds %struct.buffer, %struct.buffer* %311, i32 0, i32 73
  %312 = load %struct.buffer_text*, %struct.buffer_text** %text547, align 8
  %gap_size548 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %312, i32 0, i32 5
  %313 = load i64, i64* %gap_size548, align 8
  br label %cond.end.550

cond.false.549:                                   ; preds = %cond.false.541
  br label %cond.end.550

cond.end.550:                                     ; preds = %cond.false.549, %cond.true.546
  %cond551 = phi i64 [ %313, %cond.true.546 ], [ 0, %cond.false.549 ]
  %314 = load i64, i64* %from_byte, align 8
  %add552 = add nsw i64 %cond551, %314
  %315 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text553 = getelementptr inbounds %struct.buffer, %struct.buffer* %315, i32 0, i32 73
  %316 = load %struct.buffer_text*, %struct.buffer_text** %text553, align 8
  %beg554 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %316, i32 0, i32 0
  %317 = load i8*, i8** %beg554, align 8
  %add.ptr555 = getelementptr inbounds i8, i8* %317, i64 %add552
  %add.ptr556 = getelementptr inbounds i8, i8* %add.ptr555, i64 -1
  %318 = load i8, i8* %add.ptr556, align 1
  %conv557 = zext i8 %318 to i64
  %add558 = add i64 %conv557, 0
  %cmp559 = icmp ult i64 %add558, 128
  br i1 %cmp559, label %cond.true.561, label %cond.false.578

cond.true.561:                                    ; preds = %cond.end.550, %cond.end.530
  %319 = load i64, i64* %from_byte, align 8
  %320 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text562 = getelementptr inbounds %struct.buffer, %struct.buffer* %320, i32 0, i32 73
  %321 = load %struct.buffer_text*, %struct.buffer_text** %text562, align 8
  %gpt_byte563 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %321, i32 0, i32 3
  %322 = load i64, i64* %gpt_byte563, align 8
  %cmp564 = icmp sge i64 %319, %322
  br i1 %cmp564, label %cond.true.566, label %cond.false.569

cond.true.566:                                    ; preds = %cond.true.561
  %323 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text567 = getelementptr inbounds %struct.buffer, %struct.buffer* %323, i32 0, i32 73
  %324 = load %struct.buffer_text*, %struct.buffer_text** %text567, align 8
  %gap_size568 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %324, i32 0, i32 5
  %325 = load i64, i64* %gap_size568, align 8
  br label %cond.end.570

cond.false.569:                                   ; preds = %cond.true.561
  br label %cond.end.570

cond.end.570:                                     ; preds = %cond.false.569, %cond.true.566
  %cond571 = phi i64 [ %325, %cond.true.566 ], [ 0, %cond.false.569 ]
  %326 = load i64, i64* %from_byte, align 8
  %add572 = add nsw i64 %cond571, %326
  %327 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text573 = getelementptr inbounds %struct.buffer, %struct.buffer* %327, i32 0, i32 73
  %328 = load %struct.buffer_text*, %struct.buffer_text** %text573, align 8
  %beg574 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %328, i32 0, i32 0
  %329 = load i8*, i8** %beg574, align 8
  %add.ptr575 = getelementptr inbounds i8, i8* %329, i64 %add572
  %add.ptr576 = getelementptr inbounds i8, i8* %add.ptr575, i64 -1
  %330 = load i8, i8* %add.ptr576, align 1
  %conv577 = zext i8 %330 to i32
  br label %cond.end.596

cond.false.578:                                   ; preds = %cond.end.550, %cond.end.530
  %331 = load i64, i64* %from_byte, align 8
  %332 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text579 = getelementptr inbounds %struct.buffer, %struct.buffer* %332, i32 0, i32 73
  %333 = load %struct.buffer_text*, %struct.buffer_text** %text579, align 8
  %gpt_byte580 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %333, i32 0, i32 3
  %334 = load i64, i64* %gpt_byte580, align 8
  %cmp581 = icmp sge i64 %331, %334
  br i1 %cmp581, label %cond.true.583, label %cond.false.586

cond.true.583:                                    ; preds = %cond.false.578
  %335 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text584 = getelementptr inbounds %struct.buffer, %struct.buffer* %335, i32 0, i32 73
  %336 = load %struct.buffer_text*, %struct.buffer_text** %text584, align 8
  %gap_size585 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %336, i32 0, i32 5
  %337 = load i64, i64* %gap_size585, align 8
  br label %cond.end.587

cond.false.586:                                   ; preds = %cond.false.578
  br label %cond.end.587

cond.end.587:                                     ; preds = %cond.false.586, %cond.true.583
  %cond588 = phi i64 [ %337, %cond.true.583 ], [ 0, %cond.false.586 ]
  %338 = load i64, i64* %from_byte, align 8
  %add589 = add nsw i64 %cond588, %338
  %339 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text590 = getelementptr inbounds %struct.buffer, %struct.buffer* %339, i32 0, i32 73
  %340 = load %struct.buffer_text*, %struct.buffer_text** %text590, align 8
  %beg591 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %340, i32 0, i32 0
  %341 = load i8*, i8** %beg591, align 8
  %add.ptr592 = getelementptr inbounds i8, i8* %341, i64 %add589
  %add.ptr593 = getelementptr inbounds i8, i8* %add.ptr592, i64 -1
  %342 = load i8, i8* %add.ptr593, align 1
  %conv594 = zext i8 %342 to i32
  %add595 = add nsw i32 %conv594, 4194048
  br label %cond.end.596

cond.end.596:                                     ; preds = %cond.end.587, %cond.end.570
  %cond597 = phi i32 [ %conv577, %cond.end.570 ], [ %add595, %cond.end.587 ]
  br label %cond.end.598

cond.end.598:                                     ; preds = %cond.end.596, %cond.true.518
  %cond599 = phi i32 [ %call519, %cond.true.518 ], [ %cond597, %cond.end.596 ]
  store i32 %cond599, i32* %c, align 4
  %343 = load i32, i32* %c, align 4
  %call600 = call i32 @syntax_property_with_flags(i32 %343, i1 zeroext true)
  store i32 %call600, i32* %syntax460, align 4
  %344 = load i32, i32* %c, align 4
  %call601 = call i32 @syntax_property(i32 %344, i1 zeroext true)
  store i32 %call601, i32* %code, align 4
  store i32 0, i32* %comstyle, align 4
  %345 = load i32, i32* %syntax460, align 4
  %call602 = call zeroext i1 @SYNTAX_FLAGS_COMMENT_NESTED(i32 %345)
  %frombool603 = zext i1 %call602 to i8
  store i8 %frombool603, i8* %comnested, align 1
  %346 = load i32, i32* %code, align 4
  %cmp604 = icmp eq i32 %346, 12
  br i1 %cmp604, label %if.then.606, label %if.end.608

if.then.606:                                      ; preds = %cond.end.598
  %347 = load i32, i32* %syntax460, align 4
  %call607 = call i32 @SYNTAX_FLAGS_COMMENT_STYLE(i32 %347, i32 0)
  store i32 %call607, i32* %comstyle, align 4
  br label %if.end.608

if.end.608:                                       ; preds = %if.then.606, %cond.end.598
  %348 = load i64, i64* %from, align 8
  %349 = load i64, i64* %stop, align 8
  %cmp609 = icmp sgt i64 %348, %349
  br i1 %cmp609, label %land.lhs.true.611, label %if.end.762

land.lhs.true.611:                                ; preds = %if.end.608
  %350 = load i32, i32* %syntax460, align 4
  %call612 = call zeroext i1 @SYNTAX_FLAGS_COMEND_SECOND(i32 %350)
  br i1 %call612, label %land.lhs.true.614, label %if.end.762

land.lhs.true.614:                                ; preds = %land.lhs.true.611
  %351 = load i64, i64* %from, align 8
  %352 = load i64, i64* %from_byte, align 8
  %call615 = call zeroext i1 @prev_char_comend_first(i64 %351, i64 %352)
  br i1 %call615, label %land.lhs.true.617, label %if.end.762

land.lhs.true.617:                                ; preds = %land.lhs.true.614
  %353 = load i64, i64* %from, align 8
  %sub = sub nsw i64 %353, 1
  %354 = load i64, i64* %from_byte, align 8
  %call618 = call i64 @dec_bytepos(i64 %354)
  %call619 = call zeroext i1 @char_quoted(i64 %sub, i64 %call618)
  br i1 %call619, label %if.end.762, label %if.then.620

if.then.620:                                      ; preds = %land.lhs.true.617
  br label %do.body.622

do.body.622:                                      ; preds = %if.then.620
  %355 = load i64, i64* %from, align 8
  %dec623 = add nsw i64 %355, -1
  store i64 %dec623, i64* %from, align 8
  %356 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_624 = getelementptr inbounds %struct.buffer, %struct.buffer* %356, i32 0, i32 39
  %357 = load i64, i64* %enable_multibyte_characters_624, align 8
  %call625 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp626 = icmp eq i64 %357, %call625
  br i1 %cmp626, label %if.then.628, label %if.else.630

if.then.628:                                      ; preds = %do.body.622
  %358 = load i64, i64* %from_byte, align 8
  %dec629 = add nsw i64 %358, -1
  store i64 %dec629, i64* %from_byte, align 8
  br label %if.end.664

if.else.630:                                      ; preds = %do.body.622
  br label %do.body.631

do.body.631:                                      ; preds = %if.else.630
  %359 = load i64, i64* %from_byte, align 8
  %dec633 = add nsw i64 %359, -1
  store i64 %dec633, i64* %from_byte, align 8
  %360 = load i64, i64* %from_byte, align 8
  %361 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text634 = getelementptr inbounds %struct.buffer, %struct.buffer* %361, i32 0, i32 73
  %362 = load %struct.buffer_text*, %struct.buffer_text** %text634, align 8
  %gpt_byte635 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %362, i32 0, i32 3
  %363 = load i64, i64* %gpt_byte635, align 8
  %cmp636 = icmp slt i64 %360, %363
  br i1 %cmp636, label %if.then.638, label %if.else.643

if.then.638:                                      ; preds = %do.body.631
  %364 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text639 = getelementptr inbounds %struct.buffer, %struct.buffer* %364, i32 0, i32 73
  %365 = load %struct.buffer_text*, %struct.buffer_text** %text639, align 8
  %beg640 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %365, i32 0, i32 0
  %366 = load i8*, i8** %beg640, align 8
  %367 = load i64, i64* %from_byte, align 8
  %add.ptr641 = getelementptr inbounds i8, i8* %366, i64 %367
  %add.ptr642 = getelementptr inbounds i8, i8* %add.ptr641, i64 -1
  store i8* %add.ptr642, i8** %chp632, align 8
  br label %if.end.651

if.else.643:                                      ; preds = %do.body.631
  %368 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text644 = getelementptr inbounds %struct.buffer, %struct.buffer* %368, i32 0, i32 73
  %369 = load %struct.buffer_text*, %struct.buffer_text** %text644, align 8
  %beg645 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %369, i32 0, i32 0
  %370 = load i8*, i8** %beg645, align 8
  %371 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text646 = getelementptr inbounds %struct.buffer, %struct.buffer* %371, i32 0, i32 73
  %372 = load %struct.buffer_text*, %struct.buffer_text** %text646, align 8
  %gap_size647 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %372, i32 0, i32 5
  %373 = load i64, i64* %gap_size647, align 8
  %add.ptr648 = getelementptr inbounds i8, i8* %370, i64 %373
  %374 = load i64, i64* %from_byte, align 8
  %add.ptr649 = getelementptr inbounds i8, i8* %add.ptr648, i64 %374
  %add.ptr650 = getelementptr inbounds i8, i8* %add.ptr649, i64 -1
  store i8* %add.ptr650, i8** %chp632, align 8
  br label %if.end.651

if.end.651:                                       ; preds = %if.else.643, %if.then.638
  br label %while.cond.652

while.cond.652:                                   ; preds = %while.body.658, %if.end.651
  %375 = load i8*, i8** %chp632, align 8
  %376 = load i8, i8* %375, align 1
  %conv653 = zext i8 %376 to i32
  %and654 = and i32 %conv653, 192
  %cmp655 = icmp ne i32 %and654, 128
  %lnot657 = xor i1 %cmp655, true
  br i1 %lnot657, label %while.body.658, label %while.end.661

while.body.658:                                   ; preds = %while.cond.652
  %377 = load i8*, i8** %chp632, align 8
  %incdec.ptr659 = getelementptr inbounds i8, i8* %377, i32 -1
  store i8* %incdec.ptr659, i8** %chp632, align 8
  %378 = load i64, i64* %from_byte, align 8
  %dec660 = add nsw i64 %378, -1
  store i64 %dec660, i64* %from_byte, align 8
  br label %while.cond.652

while.end.661:                                    ; preds = %while.cond.652
  br label %do.end.663

do.end.663:                                       ; preds = %while.end.661
  br label %if.end.664

if.end.664:                                       ; preds = %do.end.663, %if.then.628
  br label %do.end.666

do.end.666:                                       ; preds = %if.end.664
  store i32 12, i32* %code, align 4
  %379 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_667 = getelementptr inbounds %struct.buffer, %struct.buffer* %379, i32 0, i32 39
  %380 = load i64, i64* %enable_multibyte_characters_667, align 8
  %call668 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp669 = icmp eq i64 %380, %call668
  br i1 %cmp669, label %cond.false.673, label %cond.true.671

cond.true.671:                                    ; preds = %do.end.666
  %381 = load i64, i64* %from_byte, align 8
  %call672 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %381)
  br label %cond.end.751

cond.false.673:                                   ; preds = %do.end.666
  br i1 true, label %cond.true.674, label %cond.false.694

cond.true.674:                                    ; preds = %cond.false.673
  %382 = load i64, i64* %from_byte, align 8
  %383 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text675 = getelementptr inbounds %struct.buffer, %struct.buffer* %383, i32 0, i32 73
  %384 = load %struct.buffer_text*, %struct.buffer_text** %text675, align 8
  %gpt_byte676 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %384, i32 0, i32 3
  %385 = load i64, i64* %gpt_byte676, align 8
  %cmp677 = icmp sge i64 %382, %385
  br i1 %cmp677, label %cond.true.679, label %cond.false.682

cond.true.679:                                    ; preds = %cond.true.674
  %386 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text680 = getelementptr inbounds %struct.buffer, %struct.buffer* %386, i32 0, i32 73
  %387 = load %struct.buffer_text*, %struct.buffer_text** %text680, align 8
  %gap_size681 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %387, i32 0, i32 5
  %388 = load i64, i64* %gap_size681, align 8
  br label %cond.end.683

cond.false.682:                                   ; preds = %cond.true.674
  br label %cond.end.683

cond.end.683:                                     ; preds = %cond.false.682, %cond.true.679
  %cond684 = phi i64 [ %388, %cond.true.679 ], [ 0, %cond.false.682 ]
  %389 = load i64, i64* %from_byte, align 8
  %add685 = add nsw i64 %cond684, %389
  %390 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text686 = getelementptr inbounds %struct.buffer, %struct.buffer* %390, i32 0, i32 73
  %391 = load %struct.buffer_text*, %struct.buffer_text** %text686, align 8
  %beg687 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %391, i32 0, i32 0
  %392 = load i8*, i8** %beg687, align 8
  %add.ptr688 = getelementptr inbounds i8, i8* %392, i64 %add685
  %add.ptr689 = getelementptr inbounds i8, i8* %add.ptr688, i64 -1
  %393 = load i8, i8* %add.ptr689, align 1
  %conv690 = zext i8 %393 to i32
  %add691 = add i32 %conv690, 0
  %cmp692 = icmp ult i32 %add691, 128
  br i1 %cmp692, label %cond.true.714, label %cond.false.731

cond.false.694:                                   ; preds = %cond.false.673
  %394 = load i64, i64* %from_byte, align 8
  %395 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text695 = getelementptr inbounds %struct.buffer, %struct.buffer* %395, i32 0, i32 73
  %396 = load %struct.buffer_text*, %struct.buffer_text** %text695, align 8
  %gpt_byte696 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %396, i32 0, i32 3
  %397 = load i64, i64* %gpt_byte696, align 8
  %cmp697 = icmp sge i64 %394, %397
  br i1 %cmp697, label %cond.true.699, label %cond.false.702

cond.true.699:                                    ; preds = %cond.false.694
  %398 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text700 = getelementptr inbounds %struct.buffer, %struct.buffer* %398, i32 0, i32 73
  %399 = load %struct.buffer_text*, %struct.buffer_text** %text700, align 8
  %gap_size701 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %399, i32 0, i32 5
  %400 = load i64, i64* %gap_size701, align 8
  br label %cond.end.703

cond.false.702:                                   ; preds = %cond.false.694
  br label %cond.end.703

cond.end.703:                                     ; preds = %cond.false.702, %cond.true.699
  %cond704 = phi i64 [ %400, %cond.true.699 ], [ 0, %cond.false.702 ]
  %401 = load i64, i64* %from_byte, align 8
  %add705 = add nsw i64 %cond704, %401
  %402 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text706 = getelementptr inbounds %struct.buffer, %struct.buffer* %402, i32 0, i32 73
  %403 = load %struct.buffer_text*, %struct.buffer_text** %text706, align 8
  %beg707 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %403, i32 0, i32 0
  %404 = load i8*, i8** %beg707, align 8
  %add.ptr708 = getelementptr inbounds i8, i8* %404, i64 %add705
  %add.ptr709 = getelementptr inbounds i8, i8* %add.ptr708, i64 -1
  %405 = load i8, i8* %add.ptr709, align 1
  %conv710 = zext i8 %405 to i64
  %add711 = add i64 %conv710, 0
  %cmp712 = icmp ult i64 %add711, 128
  br i1 %cmp712, label %cond.true.714, label %cond.false.731

cond.true.714:                                    ; preds = %cond.end.703, %cond.end.683
  %406 = load i64, i64* %from_byte, align 8
  %407 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text715 = getelementptr inbounds %struct.buffer, %struct.buffer* %407, i32 0, i32 73
  %408 = load %struct.buffer_text*, %struct.buffer_text** %text715, align 8
  %gpt_byte716 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %408, i32 0, i32 3
  %409 = load i64, i64* %gpt_byte716, align 8
  %cmp717 = icmp sge i64 %406, %409
  br i1 %cmp717, label %cond.true.719, label %cond.false.722

cond.true.719:                                    ; preds = %cond.true.714
  %410 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text720 = getelementptr inbounds %struct.buffer, %struct.buffer* %410, i32 0, i32 73
  %411 = load %struct.buffer_text*, %struct.buffer_text** %text720, align 8
  %gap_size721 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %411, i32 0, i32 5
  %412 = load i64, i64* %gap_size721, align 8
  br label %cond.end.723

cond.false.722:                                   ; preds = %cond.true.714
  br label %cond.end.723

cond.end.723:                                     ; preds = %cond.false.722, %cond.true.719
  %cond724 = phi i64 [ %412, %cond.true.719 ], [ 0, %cond.false.722 ]
  %413 = load i64, i64* %from_byte, align 8
  %add725 = add nsw i64 %cond724, %413
  %414 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text726 = getelementptr inbounds %struct.buffer, %struct.buffer* %414, i32 0, i32 73
  %415 = load %struct.buffer_text*, %struct.buffer_text** %text726, align 8
  %beg727 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %415, i32 0, i32 0
  %416 = load i8*, i8** %beg727, align 8
  %add.ptr728 = getelementptr inbounds i8, i8* %416, i64 %add725
  %add.ptr729 = getelementptr inbounds i8, i8* %add.ptr728, i64 -1
  %417 = load i8, i8* %add.ptr729, align 1
  %conv730 = zext i8 %417 to i32
  br label %cond.end.749

cond.false.731:                                   ; preds = %cond.end.703, %cond.end.683
  %418 = load i64, i64* %from_byte, align 8
  %419 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text732 = getelementptr inbounds %struct.buffer, %struct.buffer* %419, i32 0, i32 73
  %420 = load %struct.buffer_text*, %struct.buffer_text** %text732, align 8
  %gpt_byte733 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %420, i32 0, i32 3
  %421 = load i64, i64* %gpt_byte733, align 8
  %cmp734 = icmp sge i64 %418, %421
  br i1 %cmp734, label %cond.true.736, label %cond.false.739

cond.true.736:                                    ; preds = %cond.false.731
  %422 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text737 = getelementptr inbounds %struct.buffer, %struct.buffer* %422, i32 0, i32 73
  %423 = load %struct.buffer_text*, %struct.buffer_text** %text737, align 8
  %gap_size738 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %423, i32 0, i32 5
  %424 = load i64, i64* %gap_size738, align 8
  br label %cond.end.740

cond.false.739:                                   ; preds = %cond.false.731
  br label %cond.end.740

cond.end.740:                                     ; preds = %cond.false.739, %cond.true.736
  %cond741 = phi i64 [ %424, %cond.true.736 ], [ 0, %cond.false.739 ]
  %425 = load i64, i64* %from_byte, align 8
  %add742 = add nsw i64 %cond741, %425
  %426 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text743 = getelementptr inbounds %struct.buffer, %struct.buffer* %426, i32 0, i32 73
  %427 = load %struct.buffer_text*, %struct.buffer_text** %text743, align 8
  %beg744 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %427, i32 0, i32 0
  %428 = load i8*, i8** %beg744, align 8
  %add.ptr745 = getelementptr inbounds i8, i8* %428, i64 %add742
  %add.ptr746 = getelementptr inbounds i8, i8* %add.ptr745, i64 -1
  %429 = load i8, i8* %add.ptr746, align 1
  %conv747 = zext i8 %429 to i32
  %add748 = add nsw i32 %conv747, 4194048
  br label %cond.end.749

cond.end.749:                                     ; preds = %cond.end.740, %cond.end.723
  %cond750 = phi i32 [ %conv730, %cond.end.723 ], [ %add748, %cond.end.740 ]
  br label %cond.end.751

cond.end.751:                                     ; preds = %cond.end.749, %cond.true.671
  %cond752 = phi i32 [ %call672, %cond.true.671 ], [ %cond750, %cond.end.749 ]
  store i32 %cond752, i32* %c1, align 4
  %430 = load i32, i32* %c1, align 4
  %call753 = call i32 @syntax_property_with_flags(i32 %430, i1 zeroext true)
  store i32 %call753, i32* %other_syntax621, align 4
  %431 = load i32, i32* %other_syntax621, align 4
  %432 = load i32, i32* %syntax460, align 4
  %call754 = call i32 @SYNTAX_FLAGS_COMMENT_STYLE(i32 %431, i32 %432)
  store i32 %call754, i32* %comstyle, align 4
  %433 = load i32, i32* %other_syntax621, align 4
  %call755 = call zeroext i1 @SYNTAX_FLAGS_COMMENT_NESTED(i32 %433)
  %conv756 = zext i1 %call755 to i32
  %434 = load i8, i8* %comnested, align 1
  %tobool757 = trunc i8 %434 to i1
  %conv758 = zext i1 %tobool757 to i32
  %or759 = or i32 %conv758, %conv756
  %tobool760 = icmp ne i32 %or759, 0
  %frombool761 = zext i1 %tobool760 to i8
  store i8 %frombool761, i8* %comnested, align 1
  br label %if.end.762

if.end.762:                                       ; preds = %cond.end.751, %land.lhs.true.617, %land.lhs.true.614, %land.lhs.true.611, %if.end.608
  %435 = load i32, i32* %code, align 4
  %cmp763 = icmp eq i32 %435, 14
  br i1 %cmp763, label %if.then.765, label %if.else.918

if.then.765:                                      ; preds = %if.end.762
  store i8 0, i8* %fence_found, align 1
  %436 = load i64, i64* %from, align 8
  store i64 %436, i64* %ini, align 8
  %437 = load i64, i64* %from_byte, align 8
  store i64 %437, i64* %ini_byte, align 8
  br label %while.body.767

while.body.767:                                   ; preds = %if.then.765, %if.end.910
  br label %do.body.768

do.body.768:                                      ; preds = %while.body.767
  %438 = load i64, i64* %from, align 8
  %dec769 = add nsw i64 %438, -1
  store i64 %dec769, i64* %from, align 8
  %439 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_770 = getelementptr inbounds %struct.buffer, %struct.buffer* %439, i32 0, i32 39
  %440 = load i64, i64* %enable_multibyte_characters_770, align 8
  %call771 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp772 = icmp eq i64 %440, %call771
  br i1 %cmp772, label %if.then.774, label %if.else.776

if.then.774:                                      ; preds = %do.body.768
  %441 = load i64, i64* %from_byte, align 8
  %dec775 = add nsw i64 %441, -1
  store i64 %dec775, i64* %from_byte, align 8
  br label %if.end.810

if.else.776:                                      ; preds = %do.body.768
  br label %do.body.777

do.body.777:                                      ; preds = %if.else.776
  %442 = load i64, i64* %from_byte, align 8
  %dec779 = add nsw i64 %442, -1
  store i64 %dec779, i64* %from_byte, align 8
  %443 = load i64, i64* %from_byte, align 8
  %444 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text780 = getelementptr inbounds %struct.buffer, %struct.buffer* %444, i32 0, i32 73
  %445 = load %struct.buffer_text*, %struct.buffer_text** %text780, align 8
  %gpt_byte781 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %445, i32 0, i32 3
  %446 = load i64, i64* %gpt_byte781, align 8
  %cmp782 = icmp slt i64 %443, %446
  br i1 %cmp782, label %if.then.784, label %if.else.789

if.then.784:                                      ; preds = %do.body.777
  %447 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text785 = getelementptr inbounds %struct.buffer, %struct.buffer* %447, i32 0, i32 73
  %448 = load %struct.buffer_text*, %struct.buffer_text** %text785, align 8
  %beg786 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %448, i32 0, i32 0
  %449 = load i8*, i8** %beg786, align 8
  %450 = load i64, i64* %from_byte, align 8
  %add.ptr787 = getelementptr inbounds i8, i8* %449, i64 %450
  %add.ptr788 = getelementptr inbounds i8, i8* %add.ptr787, i64 -1
  store i8* %add.ptr788, i8** %chp778, align 8
  br label %if.end.797

if.else.789:                                      ; preds = %do.body.777
  %451 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text790 = getelementptr inbounds %struct.buffer, %struct.buffer* %451, i32 0, i32 73
  %452 = load %struct.buffer_text*, %struct.buffer_text** %text790, align 8
  %beg791 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %452, i32 0, i32 0
  %453 = load i8*, i8** %beg791, align 8
  %454 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text792 = getelementptr inbounds %struct.buffer, %struct.buffer* %454, i32 0, i32 73
  %455 = load %struct.buffer_text*, %struct.buffer_text** %text792, align 8
  %gap_size793 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %455, i32 0, i32 5
  %456 = load i64, i64* %gap_size793, align 8
  %add.ptr794 = getelementptr inbounds i8, i8* %453, i64 %456
  %457 = load i64, i64* %from_byte, align 8
  %add.ptr795 = getelementptr inbounds i8, i8* %add.ptr794, i64 %457
  %add.ptr796 = getelementptr inbounds i8, i8* %add.ptr795, i64 -1
  store i8* %add.ptr796, i8** %chp778, align 8
  br label %if.end.797

if.end.797:                                       ; preds = %if.else.789, %if.then.784
  br label %while.cond.798

while.cond.798:                                   ; preds = %while.body.804, %if.end.797
  %458 = load i8*, i8** %chp778, align 8
  %459 = load i8, i8* %458, align 1
  %conv799 = zext i8 %459 to i32
  %and800 = and i32 %conv799, 192
  %cmp801 = icmp ne i32 %and800, 128
  %lnot803 = xor i1 %cmp801, true
  br i1 %lnot803, label %while.body.804, label %while.end.807

while.body.804:                                   ; preds = %while.cond.798
  %460 = load i8*, i8** %chp778, align 8
  %incdec.ptr805 = getelementptr inbounds i8, i8* %460, i32 -1
  store i8* %incdec.ptr805, i8** %chp778, align 8
  %461 = load i64, i64* %from_byte, align 8
  %dec806 = add nsw i64 %461, -1
  store i64 %dec806, i64* %from_byte, align 8
  br label %while.cond.798

while.end.807:                                    ; preds = %while.cond.798
  br label %do.end.809

do.end.809:                                       ; preds = %while.end.807
  br label %if.end.810

if.end.810:                                       ; preds = %do.end.809, %if.then.774
  br label %do.end.812

do.end.812:                                       ; preds = %if.end.810
  %462 = load i64, i64* %from, align 8
  call void @UPDATE_SYNTAX_TABLE_BACKWARD(i64 %462)
  %463 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_813 = getelementptr inbounds %struct.buffer, %struct.buffer* %463, i32 0, i32 39
  %464 = load i64, i64* %enable_multibyte_characters_813, align 8
  %call814 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp815 = icmp eq i64 %464, %call814
  br i1 %cmp815, label %cond.false.819, label %cond.true.817

cond.true.817:                                    ; preds = %do.end.812
  %465 = load i64, i64* %from_byte, align 8
  %call818 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %465)
  br label %cond.end.897

cond.false.819:                                   ; preds = %do.end.812
  br i1 true, label %cond.true.820, label %cond.false.840

cond.true.820:                                    ; preds = %cond.false.819
  %466 = load i64, i64* %from_byte, align 8
  %467 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text821 = getelementptr inbounds %struct.buffer, %struct.buffer* %467, i32 0, i32 73
  %468 = load %struct.buffer_text*, %struct.buffer_text** %text821, align 8
  %gpt_byte822 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %468, i32 0, i32 3
  %469 = load i64, i64* %gpt_byte822, align 8
  %cmp823 = icmp sge i64 %466, %469
  br i1 %cmp823, label %cond.true.825, label %cond.false.828

cond.true.825:                                    ; preds = %cond.true.820
  %470 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text826 = getelementptr inbounds %struct.buffer, %struct.buffer* %470, i32 0, i32 73
  %471 = load %struct.buffer_text*, %struct.buffer_text** %text826, align 8
  %gap_size827 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %471, i32 0, i32 5
  %472 = load i64, i64* %gap_size827, align 8
  br label %cond.end.829

cond.false.828:                                   ; preds = %cond.true.820
  br label %cond.end.829

cond.end.829:                                     ; preds = %cond.false.828, %cond.true.825
  %cond830 = phi i64 [ %472, %cond.true.825 ], [ 0, %cond.false.828 ]
  %473 = load i64, i64* %from_byte, align 8
  %add831 = add nsw i64 %cond830, %473
  %474 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text832 = getelementptr inbounds %struct.buffer, %struct.buffer* %474, i32 0, i32 73
  %475 = load %struct.buffer_text*, %struct.buffer_text** %text832, align 8
  %beg833 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %475, i32 0, i32 0
  %476 = load i8*, i8** %beg833, align 8
  %add.ptr834 = getelementptr inbounds i8, i8* %476, i64 %add831
  %add.ptr835 = getelementptr inbounds i8, i8* %add.ptr834, i64 -1
  %477 = load i8, i8* %add.ptr835, align 1
  %conv836 = zext i8 %477 to i32
  %add837 = add i32 %conv836, 0
  %cmp838 = icmp ult i32 %add837, 128
  br i1 %cmp838, label %cond.true.860, label %cond.false.877

cond.false.840:                                   ; preds = %cond.false.819
  %478 = load i64, i64* %from_byte, align 8
  %479 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text841 = getelementptr inbounds %struct.buffer, %struct.buffer* %479, i32 0, i32 73
  %480 = load %struct.buffer_text*, %struct.buffer_text** %text841, align 8
  %gpt_byte842 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %480, i32 0, i32 3
  %481 = load i64, i64* %gpt_byte842, align 8
  %cmp843 = icmp sge i64 %478, %481
  br i1 %cmp843, label %cond.true.845, label %cond.false.848

cond.true.845:                                    ; preds = %cond.false.840
  %482 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text846 = getelementptr inbounds %struct.buffer, %struct.buffer* %482, i32 0, i32 73
  %483 = load %struct.buffer_text*, %struct.buffer_text** %text846, align 8
  %gap_size847 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %483, i32 0, i32 5
  %484 = load i64, i64* %gap_size847, align 8
  br label %cond.end.849

cond.false.848:                                   ; preds = %cond.false.840
  br label %cond.end.849

cond.end.849:                                     ; preds = %cond.false.848, %cond.true.845
  %cond850 = phi i64 [ %484, %cond.true.845 ], [ 0, %cond.false.848 ]
  %485 = load i64, i64* %from_byte, align 8
  %add851 = add nsw i64 %cond850, %485
  %486 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text852 = getelementptr inbounds %struct.buffer, %struct.buffer* %486, i32 0, i32 73
  %487 = load %struct.buffer_text*, %struct.buffer_text** %text852, align 8
  %beg853 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %487, i32 0, i32 0
  %488 = load i8*, i8** %beg853, align 8
  %add.ptr854 = getelementptr inbounds i8, i8* %488, i64 %add851
  %add.ptr855 = getelementptr inbounds i8, i8* %add.ptr854, i64 -1
  %489 = load i8, i8* %add.ptr855, align 1
  %conv856 = zext i8 %489 to i64
  %add857 = add i64 %conv856, 0
  %cmp858 = icmp ult i64 %add857, 128
  br i1 %cmp858, label %cond.true.860, label %cond.false.877

cond.true.860:                                    ; preds = %cond.end.849, %cond.end.829
  %490 = load i64, i64* %from_byte, align 8
  %491 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text861 = getelementptr inbounds %struct.buffer, %struct.buffer* %491, i32 0, i32 73
  %492 = load %struct.buffer_text*, %struct.buffer_text** %text861, align 8
  %gpt_byte862 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %492, i32 0, i32 3
  %493 = load i64, i64* %gpt_byte862, align 8
  %cmp863 = icmp sge i64 %490, %493
  br i1 %cmp863, label %cond.true.865, label %cond.false.868

cond.true.865:                                    ; preds = %cond.true.860
  %494 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text866 = getelementptr inbounds %struct.buffer, %struct.buffer* %494, i32 0, i32 73
  %495 = load %struct.buffer_text*, %struct.buffer_text** %text866, align 8
  %gap_size867 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %495, i32 0, i32 5
  %496 = load i64, i64* %gap_size867, align 8
  br label %cond.end.869

cond.false.868:                                   ; preds = %cond.true.860
  br label %cond.end.869

cond.end.869:                                     ; preds = %cond.false.868, %cond.true.865
  %cond870 = phi i64 [ %496, %cond.true.865 ], [ 0, %cond.false.868 ]
  %497 = load i64, i64* %from_byte, align 8
  %add871 = add nsw i64 %cond870, %497
  %498 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text872 = getelementptr inbounds %struct.buffer, %struct.buffer* %498, i32 0, i32 73
  %499 = load %struct.buffer_text*, %struct.buffer_text** %text872, align 8
  %beg873 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %499, i32 0, i32 0
  %500 = load i8*, i8** %beg873, align 8
  %add.ptr874 = getelementptr inbounds i8, i8* %500, i64 %add871
  %add.ptr875 = getelementptr inbounds i8, i8* %add.ptr874, i64 -1
  %501 = load i8, i8* %add.ptr875, align 1
  %conv876 = zext i8 %501 to i32
  br label %cond.end.895

cond.false.877:                                   ; preds = %cond.end.849, %cond.end.829
  %502 = load i64, i64* %from_byte, align 8
  %503 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text878 = getelementptr inbounds %struct.buffer, %struct.buffer* %503, i32 0, i32 73
  %504 = load %struct.buffer_text*, %struct.buffer_text** %text878, align 8
  %gpt_byte879 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %504, i32 0, i32 3
  %505 = load i64, i64* %gpt_byte879, align 8
  %cmp880 = icmp sge i64 %502, %505
  br i1 %cmp880, label %cond.true.882, label %cond.false.885

cond.true.882:                                    ; preds = %cond.false.877
  %506 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text883 = getelementptr inbounds %struct.buffer, %struct.buffer* %506, i32 0, i32 73
  %507 = load %struct.buffer_text*, %struct.buffer_text** %text883, align 8
  %gap_size884 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %507, i32 0, i32 5
  %508 = load i64, i64* %gap_size884, align 8
  br label %cond.end.886

cond.false.885:                                   ; preds = %cond.false.877
  br label %cond.end.886

cond.end.886:                                     ; preds = %cond.false.885, %cond.true.882
  %cond887 = phi i64 [ %508, %cond.true.882 ], [ 0, %cond.false.885 ]
  %509 = load i64, i64* %from_byte, align 8
  %add888 = add nsw i64 %cond887, %509
  %510 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text889 = getelementptr inbounds %struct.buffer, %struct.buffer* %510, i32 0, i32 73
  %511 = load %struct.buffer_text*, %struct.buffer_text** %text889, align 8
  %beg890 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %511, i32 0, i32 0
  %512 = load i8*, i8** %beg890, align 8
  %add.ptr891 = getelementptr inbounds i8, i8* %512, i64 %add888
  %add.ptr892 = getelementptr inbounds i8, i8* %add.ptr891, i64 -1
  %513 = load i8, i8* %add.ptr892, align 1
  %conv893 = zext i8 %513 to i32
  %add894 = add nsw i32 %conv893, 4194048
  br label %cond.end.895

cond.end.895:                                     ; preds = %cond.end.886, %cond.end.869
  %cond896 = phi i32 [ %conv876, %cond.end.869 ], [ %add894, %cond.end.886 ]
  br label %cond.end.897

cond.end.897:                                     ; preds = %cond.end.895, %cond.true.817
  %cond898 = phi i32 [ %call818, %cond.true.817 ], [ %cond896, %cond.end.895 ]
  store i32 %cond898, i32* %c, align 4
  %514 = load i32, i32* %c, align 4
  %call899 = call i32 @syntax_property(i32 %514, i1 zeroext true)
  %cmp900 = icmp eq i32 %call899, 14
  br i1 %cmp900, label %land.lhs.true.902, label %if.else.905

land.lhs.true.902:                                ; preds = %cond.end.897
  %515 = load i64, i64* %from, align 8
  %516 = load i64, i64* %from_byte, align 8
  %call903 = call zeroext i1 @char_quoted(i64 %515, i64 %516)
  br i1 %call903, label %if.else.905, label %if.then.904

if.then.904:                                      ; preds = %land.lhs.true.902
  store i8 1, i8* %fence_found, align 1
  br label %while.end.911

if.else.905:                                      ; preds = %land.lhs.true.902, %cond.end.897
  %517 = load i64, i64* %from, align 8
  %518 = load i64, i64* %stop, align 8
  %cmp906 = icmp eq i64 %517, %518
  br i1 %cmp906, label %if.then.908, label %if.end.909

if.then.908:                                      ; preds = %if.else.905
  br label %while.end.911

if.end.909:                                       ; preds = %if.else.905
  br label %if.end.910

if.end.910:                                       ; preds = %if.end.909
  br label %while.body.767

while.end.911:                                    ; preds = %if.then.908, %if.then.904
  %519 = load i8, i8* %fence_found, align 1
  %tobool912 = trunc i8 %519 to i1
  %conv913 = zext i1 %tobool912 to i32
  %cmp914 = icmp eq i32 %conv913, 0
  br i1 %cmp914, label %if.then.916, label %if.else.917

if.then.916:                                      ; preds = %while.end.911
  %520 = load i64, i64* %ini, align 8
  store i64 %520, i64* %from, align 8
  %521 = load i64, i64* %ini_byte, align 8
  store i64 %521, i64* %from_byte, align 8
  br label %leave

if.else.917:                                      ; preds = %while.end.911
  br label %while.end.1067

if.else.918:                                      ; preds = %if.end.762
  %522 = load i32, i32* %code, align 4
  %cmp919 = icmp eq i32 %522, 12
  br i1 %cmp919, label %if.then.921, label %if.else.998

if.then.921:                                      ; preds = %if.else.918
  %523 = load i64, i64* %from, align 8
  %524 = load i64, i64* %from_byte, align 8
  %525 = load i64, i64* %stop, align 8
  %526 = load i8, i8* %comnested, align 1
  %tobool922 = trunc i8 %526 to i1
  %527 = load i32, i32* %comstyle, align 4
  %call923 = call zeroext i1 @back_comment(i64 %523, i64 %524, i64 %525, i1 zeroext %tobool922, i32 %527, i64* %out_charpos, i64* %out_bytepos)
  %frombool924 = zext i1 %call923 to i8
  store i8 %frombool924, i8* %found, align 1
  %528 = load i8, i8* %found, align 1
  %tobool925 = trunc i8 %528 to i1
  br i1 %tobool925, label %if.else.996, label %if.then.926

if.then.926:                                      ; preds = %if.then.921
  %529 = load i32, i32* %c, align 4
  %cmp927 = icmp eq i32 %529, 10
  br i1 %cmp927, label %if.then.929, label %if.else.930

if.then.929:                                      ; preds = %if.then.926
  br label %if.end.995

if.else.930:                                      ; preds = %if.then.926
  %530 = load i32, i32* %c, align 4
  %call931 = call i32 @syntax_property(i32 %530, i1 zeroext true)
  %531 = load i32, i32* %code, align 4
  %cmp932 = icmp ne i32 %call931, %531
  br i1 %cmp932, label %if.then.934, label %if.end.994

if.then.934:                                      ; preds = %if.else.930
  br label %do.body.935

do.body.935:                                      ; preds = %if.then.934
  %532 = load i64, i64* %from, align 8
  %inc936 = add nsw i64 %532, 1
  store i64 %inc936, i64* %from, align 8
  %533 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_937 = getelementptr inbounds %struct.buffer, %struct.buffer* %533, i32 0, i32 39
  %534 = load i64, i64* %enable_multibyte_characters_937, align 8
  %call938 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp939 = icmp eq i64 %534, %call938
  br i1 %cmp939, label %if.then.941, label %if.else.943

if.then.941:                                      ; preds = %do.body.935
  %535 = load i64, i64* %from_byte, align 8
  %inc942 = add nsw i64 %535, 1
  store i64 %inc942, i64* %from_byte, align 8
  br label %if.end.991

if.else.943:                                      ; preds = %do.body.935
  br label %do.body.944

do.body.944:                                      ; preds = %if.else.943
  %536 = load i64, i64* %from_byte, align 8
  %537 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text946 = getelementptr inbounds %struct.buffer, %struct.buffer* %537, i32 0, i32 73
  %538 = load %struct.buffer_text*, %struct.buffer_text** %text946, align 8
  %gpt_byte947 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %538, i32 0, i32 3
  %539 = load i64, i64* %gpt_byte947, align 8
  %cmp948 = icmp sge i64 %536, %539
  br i1 %cmp948, label %cond.true.950, label %cond.false.953

cond.true.950:                                    ; preds = %do.body.944
  %540 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text951 = getelementptr inbounds %struct.buffer, %struct.buffer* %540, i32 0, i32 73
  %541 = load %struct.buffer_text*, %struct.buffer_text** %text951, align 8
  %gap_size952 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %541, i32 0, i32 5
  %542 = load i64, i64* %gap_size952, align 8
  br label %cond.end.954

cond.false.953:                                   ; preds = %do.body.944
  br label %cond.end.954

cond.end.954:                                     ; preds = %cond.false.953, %cond.true.950
  %cond955 = phi i64 [ %542, %cond.true.950 ], [ 0, %cond.false.953 ]
  %543 = load i64, i64* %from_byte, align 8
  %add956 = add nsw i64 %cond955, %543
  %544 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text957 = getelementptr inbounds %struct.buffer, %struct.buffer* %544, i32 0, i32 73
  %545 = load %struct.buffer_text*, %struct.buffer_text** %text957, align 8
  %beg958 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %545, i32 0, i32 0
  %546 = load i8*, i8** %beg958, align 8
  %add.ptr959 = getelementptr inbounds i8, i8* %546, i64 %add956
  %add.ptr960 = getelementptr inbounds i8, i8* %add.ptr959, i64 -1
  store i8* %add.ptr960, i8** %chp945, align 8
  %547 = load i8*, i8** %chp945, align 8
  %548 = load i8, i8* %547, align 1
  %conv961 = zext i8 %548 to i32
  %and962 = and i32 %conv961, 128
  %tobool963 = icmp ne i32 %and962, 0
  br i1 %tobool963, label %cond.false.965, label %cond.true.964

cond.true.964:                                    ; preds = %cond.end.954
  br label %cond.end.985

cond.false.965:                                   ; preds = %cond.end.954
  %549 = load i8*, i8** %chp945, align 8
  %550 = load i8, i8* %549, align 1
  %conv966 = zext i8 %550 to i32
  %and967 = and i32 %conv966, 32
  %tobool968 = icmp ne i32 %and967, 0
  br i1 %tobool968, label %cond.false.970, label %cond.true.969

cond.true.969:                                    ; preds = %cond.false.965
  br label %cond.end.983

cond.false.970:                                   ; preds = %cond.false.965
  %551 = load i8*, i8** %chp945, align 8
  %552 = load i8, i8* %551, align 1
  %conv971 = zext i8 %552 to i32
  %and972 = and i32 %conv971, 16
  %tobool973 = icmp ne i32 %and972, 0
  br i1 %tobool973, label %cond.false.975, label %cond.true.974

cond.true.974:                                    ; preds = %cond.false.970
  br label %cond.end.981

cond.false.975:                                   ; preds = %cond.false.970
  %553 = load i8*, i8** %chp945, align 8
  %554 = load i8, i8* %553, align 1
  %conv976 = zext i8 %554 to i32
  %and977 = and i32 %conv976, 8
  %tobool978 = icmp ne i32 %and977, 0
  %lnot979 = xor i1 %tobool978, true
  %cond980 = select i1 %lnot979, i32 4, i32 5
  br label %cond.end.981

cond.end.981:                                     ; preds = %cond.false.975, %cond.true.974
  %cond982 = phi i32 [ 3, %cond.true.974 ], [ %cond980, %cond.false.975 ]
  br label %cond.end.983

cond.end.983:                                     ; preds = %cond.end.981, %cond.true.969
  %cond984 = phi i32 [ 2, %cond.true.969 ], [ %cond982, %cond.end.981 ]
  br label %cond.end.985

cond.end.985:                                     ; preds = %cond.end.983, %cond.true.964
  %cond986 = phi i32 [ 1, %cond.true.964 ], [ %cond984, %cond.end.983 ]
  %conv987 = sext i32 %cond986 to i64
  %555 = load i64, i64* %from_byte, align 8
  %add988 = add nsw i64 %555, %conv987
  store i64 %add988, i64* %from_byte, align 8
  br label %do.end.990

do.end.990:                                       ; preds = %cond.end.985
  br label %if.end.991

if.end.991:                                       ; preds = %do.end.990, %if.then.941
  br label %do.end.993

do.end.993:                                       ; preds = %if.end.991
  br label %if.end.994

if.end.994:                                       ; preds = %do.end.993, %if.else.930
  br label %leave

if.end.995:                                       ; preds = %if.then.929
  br label %if.end.997

if.else.996:                                      ; preds = %if.then.921
  %556 = load i64, i64* %out_charpos, align 8
  store i64 %556, i64* %from, align 8
  %557 = load i64, i64* %out_bytepos, align 8
  store i64 %557, i64* %from_byte, align 8
  br label %while.end.1067

if.end.997:                                       ; preds = %if.end.995
  br label %if.end.1065

if.else.998:                                      ; preds = %if.else.918
  %558 = load i32, i32* %code, align 4
  %cmp999 = icmp ne i32 %558, 0
  br i1 %cmp999, label %if.then.1003, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else.998
  %559 = load i8, i8* %quoted, align 1
  %tobool1001 = trunc i8 %559 to i1
  br i1 %tobool1001, label %if.then.1003, label %if.end.1064

if.then.1003:                                     ; preds = %lor.lhs.false, %if.else.998
  br label %leave

leave:                                            ; preds = %if.then.1003, %if.end.994, %if.then.916
  store i8 0, i8* @immediate_quit, align 1
  br label %do.body.1004

do.body.1004:                                     ; preds = %leave
  %560 = load i64, i64* %from, align 8
  %inc1005 = add nsw i64 %560, 1
  store i64 %inc1005, i64* %from, align 8
  %561 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_1006 = getelementptr inbounds %struct.buffer, %struct.buffer* %561, i32 0, i32 39
  %562 = load i64, i64* %enable_multibyte_characters_1006, align 8
  %call1007 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1008 = icmp eq i64 %562, %call1007
  br i1 %cmp1008, label %if.then.1010, label %if.else.1012

if.then.1010:                                     ; preds = %do.body.1004
  %563 = load i64, i64* %from_byte, align 8
  %inc1011 = add nsw i64 %563, 1
  store i64 %inc1011, i64* %from_byte, align 8
  br label %if.end.1060

if.else.1012:                                     ; preds = %do.body.1004
  br label %do.body.1013

do.body.1013:                                     ; preds = %if.else.1012
  %564 = load i64, i64* %from_byte, align 8
  %565 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1015 = getelementptr inbounds %struct.buffer, %struct.buffer* %565, i32 0, i32 73
  %566 = load %struct.buffer_text*, %struct.buffer_text** %text1015, align 8
  %gpt_byte1016 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %566, i32 0, i32 3
  %567 = load i64, i64* %gpt_byte1016, align 8
  %cmp1017 = icmp sge i64 %564, %567
  br i1 %cmp1017, label %cond.true.1019, label %cond.false.1022

cond.true.1019:                                   ; preds = %do.body.1013
  %568 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1020 = getelementptr inbounds %struct.buffer, %struct.buffer* %568, i32 0, i32 73
  %569 = load %struct.buffer_text*, %struct.buffer_text** %text1020, align 8
  %gap_size1021 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %569, i32 0, i32 5
  %570 = load i64, i64* %gap_size1021, align 8
  br label %cond.end.1023

cond.false.1022:                                  ; preds = %do.body.1013
  br label %cond.end.1023

cond.end.1023:                                    ; preds = %cond.false.1022, %cond.true.1019
  %cond1024 = phi i64 [ %570, %cond.true.1019 ], [ 0, %cond.false.1022 ]
  %571 = load i64, i64* %from_byte, align 8
  %add1025 = add nsw i64 %cond1024, %571
  %572 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1026 = getelementptr inbounds %struct.buffer, %struct.buffer* %572, i32 0, i32 73
  %573 = load %struct.buffer_text*, %struct.buffer_text** %text1026, align 8
  %beg1027 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %573, i32 0, i32 0
  %574 = load i8*, i8** %beg1027, align 8
  %add.ptr1028 = getelementptr inbounds i8, i8* %574, i64 %add1025
  %add.ptr1029 = getelementptr inbounds i8, i8* %add.ptr1028, i64 -1
  store i8* %add.ptr1029, i8** %chp1014, align 8
  %575 = load i8*, i8** %chp1014, align 8
  %576 = load i8, i8* %575, align 1
  %conv1030 = zext i8 %576 to i32
  %and1031 = and i32 %conv1030, 128
  %tobool1032 = icmp ne i32 %and1031, 0
  br i1 %tobool1032, label %cond.false.1034, label %cond.true.1033

cond.true.1033:                                   ; preds = %cond.end.1023
  br label %cond.end.1054

cond.false.1034:                                  ; preds = %cond.end.1023
  %577 = load i8*, i8** %chp1014, align 8
  %578 = load i8, i8* %577, align 1
  %conv1035 = zext i8 %578 to i32
  %and1036 = and i32 %conv1035, 32
  %tobool1037 = icmp ne i32 %and1036, 0
  br i1 %tobool1037, label %cond.false.1039, label %cond.true.1038

cond.true.1038:                                   ; preds = %cond.false.1034
  br label %cond.end.1052

cond.false.1039:                                  ; preds = %cond.false.1034
  %579 = load i8*, i8** %chp1014, align 8
  %580 = load i8, i8* %579, align 1
  %conv1040 = zext i8 %580 to i32
  %and1041 = and i32 %conv1040, 16
  %tobool1042 = icmp ne i32 %and1041, 0
  br i1 %tobool1042, label %cond.false.1044, label %cond.true.1043

cond.true.1043:                                   ; preds = %cond.false.1039
  br label %cond.end.1050

cond.false.1044:                                  ; preds = %cond.false.1039
  %581 = load i8*, i8** %chp1014, align 8
  %582 = load i8, i8* %581, align 1
  %conv1045 = zext i8 %582 to i32
  %and1046 = and i32 %conv1045, 8
  %tobool1047 = icmp ne i32 %and1046, 0
  %lnot1048 = xor i1 %tobool1047, true
  %cond1049 = select i1 %lnot1048, i32 4, i32 5
  br label %cond.end.1050

cond.end.1050:                                    ; preds = %cond.false.1044, %cond.true.1043
  %cond1051 = phi i32 [ 3, %cond.true.1043 ], [ %cond1049, %cond.false.1044 ]
  br label %cond.end.1052

cond.end.1052:                                    ; preds = %cond.end.1050, %cond.true.1038
  %cond1053 = phi i32 [ 2, %cond.true.1038 ], [ %cond1051, %cond.end.1050 ]
  br label %cond.end.1054

cond.end.1054:                                    ; preds = %cond.end.1052, %cond.true.1033
  %cond1055 = phi i32 [ 1, %cond.true.1033 ], [ %cond1053, %cond.end.1052 ]
  %conv1056 = sext i32 %cond1055 to i64
  %583 = load i64, i64* %from_byte, align 8
  %add1057 = add nsw i64 %583, %conv1056
  store i64 %add1057, i64* %from_byte, align 8
  br label %do.end.1059

do.end.1059:                                      ; preds = %cond.end.1054
  br label %if.end.1060

if.end.1060:                                      ; preds = %do.end.1059, %if.then.1010
  br label %do.end.1062

do.end.1062:                                      ; preds = %if.end.1060
  %584 = load i64, i64* %from, align 8
  %585 = load i64, i64* %from_byte, align 8
  call void @set_point_both(i64 %584, i64 %585)
  %call1063 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call1063, i64* %retval
  br label %return

if.end.1064:                                      ; preds = %lor.lhs.false
  br label %if.end.1065

if.end.1065:                                      ; preds = %if.end.1064, %if.end.997
  br label %if.end.1066

if.end.1066:                                      ; preds = %if.end.1065
  br label %while.body.459

while.end.1067:                                   ; preds = %if.else.996, %if.else.917
  %586 = load i64, i64* %count1, align 8
  %inc1068 = add nsw i64 %586, 1
  store i64 %inc1068, i64* %count1, align 8
  br label %while.cond.454

while.end.1069:                                   ; preds = %while.cond.454
  %587 = load i64, i64* %from, align 8
  %588 = load i64, i64* %from_byte, align 8
  call void @set_point_both(i64 %587, i64 %588)
  store i8 0, i8* @immediate_quit, align 1
  %call1070 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call1070, i64* %retval
  br label %return

return:                                           ; preds = %while.end.1069, %do.end.1062, %if.then.463, %if.then.390, %do.end.381, %if.then.22
  %589 = load i64, i64* %retval
  ret i64 %589
}

declare void @set_point_both(i64, i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @SYNTAX_FLAGS_COMMENT_STYLE(i32 %flags, i32 %other_flags) #0 {
entry:
  %flags.addr = alloca i32, align 4
  %other_flags.addr = alloca i32, align 4
  store i32 %flags, i32* %flags.addr, align 4
  store i32 %other_flags, i32* %other_flags.addr, align 4
  %0 = load i32, i32* %flags.addr, align 4
  %call = call zeroext i1 @SYNTAX_FLAGS_COMMENT_STYLEB(i32 %0)
  %conv = zext i1 %call to i32
  %1 = load i32, i32* %flags.addr, align 4
  %call1 = call i32 @SYNTAX_FLAGS_COMMENT_STYLEC2(i32 %1)
  %or = or i32 %conv, %call1
  %2 = load i32, i32* %other_flags.addr, align 4
  %call2 = call i32 @SYNTAX_FLAGS_COMMENT_STYLEC2(i32 %2)
  %or3 = or i32 %or, %call2
  ret i32 %or3
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @forw_comment(i64 %from, i64 %from_byte, i64 %stop, i64 %nesting, i32 %style, i32 %prev_syntax, i64* %charpos_ptr, i64* %bytepos_ptr, i64* %incomment_ptr) #0 {
entry:
  %retval = alloca i1, align 1
  %from.addr = alloca i64, align 8
  %from_byte.addr = alloca i64, align 8
  %stop.addr = alloca i64, align 8
  %nesting.addr = alloca i64, align 8
  %style.addr = alloca i32, align 4
  %prev_syntax.addr = alloca i32, align 4
  %charpos_ptr.addr = alloca i64*, align 8
  %bytepos_ptr.addr = alloca i64*, align 8
  %incomment_ptr.addr = alloca i64*, align 8
  %c = alloca i32, align 4
  %c1 = alloca i32, align 4
  %code = alloca i32, align 4
  %syntax = alloca i32, align 4
  %other_syntax = alloca i32, align 4
  %chp = alloca i8*, align 8
  %chp302 = alloca i8*, align 8
  %chp469 = alloca i8*, align 8
  store i64 %from, i64* %from.addr, align 8
  store i64 %from_byte, i64* %from_byte.addr, align 8
  store i64 %stop, i64* %stop.addr, align 8
  store i64 %nesting, i64* %nesting.addr, align 8
  store i32 %style, i32* %style.addr, align 4
  store i32 %prev_syntax, i32* %prev_syntax.addr, align 4
  store i64* %charpos_ptr, i64** %charpos_ptr.addr, align 8
  store i64* %bytepos_ptr, i64** %bytepos_ptr.addr, align 8
  store i64* %incomment_ptr, i64** %incomment_ptr.addr, align 8
  %0 = load i64, i64* %nesting.addr, align 8
  %cmp = icmp sle i64 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 -1, i64* %nesting.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* %prev_syntax.addr, align 4
  store i32 %1, i32* %syntax, align 4
  %2 = load i32, i32* %syntax, align 4
  %cmp1 = icmp ne i32 %2, 0
  br i1 %cmp1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  br label %forw_incomment

if.end.3:                                         ; preds = %if.end
  br label %while.body

while.body:                                       ; preds = %if.end.3, %if.end.517
  %3 = load i64, i64* %from.addr, align 8
  %4 = load i64, i64* %stop.addr, align 8
  %cmp4 = icmp eq i64 %3, %4
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %while.body
  %5 = load i64, i64* %nesting.addr, align 8
  %6 = load i64*, i64** %incomment_ptr.addr, align 8
  store i64 %5, i64* %6, align 8
  %7 = load i64, i64* %from.addr, align 8
  %8 = load i64*, i64** %charpos_ptr.addr, align 8
  store i64 %7, i64* %8, align 8
  %9 = load i64, i64* %from_byte.addr, align 8
  %10 = load i64*, i64** %bytepos_ptr.addr, align 8
  store i64 %9, i64* %10, align 8
  store i1 false, i1* %retval
  br label %return

if.end.6:                                         ; preds = %while.body
  %11 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %11, i32 0, i32 39
  %12 = load i64, i64* %enable_multibyte_characters_, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp7 = icmp eq i64 %12, %call
  br i1 %cmp7, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end.6
  %13 = load i64, i64* %from_byte.addr, align 8
  %call8 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %13)
  br label %cond.end.76

cond.false:                                       ; preds = %if.end.6
  br i1 true, label %cond.true.9, label %cond.false.19

cond.true.9:                                      ; preds = %cond.false
  %14 = load i64, i64* %from_byte.addr, align 8
  %15 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %15, i32 0, i32 73
  %16 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %16, i32 0, i32 3
  %17 = load i64, i64* %gpt_byte, align 8
  %cmp10 = icmp sge i64 %14, %17
  br i1 %cmp10, label %cond.true.11, label %cond.false.13

cond.true.11:                                     ; preds = %cond.true.9
  %18 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text12 = getelementptr inbounds %struct.buffer, %struct.buffer* %18, i32 0, i32 73
  %19 = load %struct.buffer_text*, %struct.buffer_text** %text12, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %19, i32 0, i32 5
  %20 = load i64, i64* %gap_size, align 8
  br label %cond.end

cond.false.13:                                    ; preds = %cond.true.9
  br label %cond.end

cond.end:                                         ; preds = %cond.false.13, %cond.true.11
  %cond = phi i64 [ %20, %cond.true.11 ], [ 0, %cond.false.13 ]
  %21 = load i64, i64* %from_byte.addr, align 8
  %add = add nsw i64 %cond, %21
  %22 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text14 = getelementptr inbounds %struct.buffer, %struct.buffer* %22, i32 0, i32 73
  %23 = load %struct.buffer_text*, %struct.buffer_text** %text14, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %23, i32 0, i32 0
  %24 = load i8*, i8** %beg, align 8
  %add.ptr = getelementptr inbounds i8, i8* %24, i64 %add
  %add.ptr15 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  %25 = load i8, i8* %add.ptr15, align 1
  %conv = zext i8 %25 to i32
  %add16 = add i32 %conv, 0
  %cmp17 = icmp ult i32 %add16, 128
  br i1 %cmp17, label %cond.true.39, label %cond.false.56

cond.false.19:                                    ; preds = %cond.false
  %26 = load i64, i64* %from_byte.addr, align 8
  %27 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text20 = getelementptr inbounds %struct.buffer, %struct.buffer* %27, i32 0, i32 73
  %28 = load %struct.buffer_text*, %struct.buffer_text** %text20, align 8
  %gpt_byte21 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %28, i32 0, i32 3
  %29 = load i64, i64* %gpt_byte21, align 8
  %cmp22 = icmp sge i64 %26, %29
  br i1 %cmp22, label %cond.true.24, label %cond.false.27

cond.true.24:                                     ; preds = %cond.false.19
  %30 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text25 = getelementptr inbounds %struct.buffer, %struct.buffer* %30, i32 0, i32 73
  %31 = load %struct.buffer_text*, %struct.buffer_text** %text25, align 8
  %gap_size26 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %31, i32 0, i32 5
  %32 = load i64, i64* %gap_size26, align 8
  br label %cond.end.28

cond.false.27:                                    ; preds = %cond.false.19
  br label %cond.end.28

cond.end.28:                                      ; preds = %cond.false.27, %cond.true.24
  %cond29 = phi i64 [ %32, %cond.true.24 ], [ 0, %cond.false.27 ]
  %33 = load i64, i64* %from_byte.addr, align 8
  %add30 = add nsw i64 %cond29, %33
  %34 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text31 = getelementptr inbounds %struct.buffer, %struct.buffer* %34, i32 0, i32 73
  %35 = load %struct.buffer_text*, %struct.buffer_text** %text31, align 8
  %beg32 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %35, i32 0, i32 0
  %36 = load i8*, i8** %beg32, align 8
  %add.ptr33 = getelementptr inbounds i8, i8* %36, i64 %add30
  %add.ptr34 = getelementptr inbounds i8, i8* %add.ptr33, i64 -1
  %37 = load i8, i8* %add.ptr34, align 1
  %conv35 = zext i8 %37 to i64
  %add36 = add i64 %conv35, 0
  %cmp37 = icmp ult i64 %add36, 128
  br i1 %cmp37, label %cond.true.39, label %cond.false.56

cond.true.39:                                     ; preds = %cond.end.28, %cond.end
  %38 = load i64, i64* %from_byte.addr, align 8
  %39 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text40 = getelementptr inbounds %struct.buffer, %struct.buffer* %39, i32 0, i32 73
  %40 = load %struct.buffer_text*, %struct.buffer_text** %text40, align 8
  %gpt_byte41 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %40, i32 0, i32 3
  %41 = load i64, i64* %gpt_byte41, align 8
  %cmp42 = icmp sge i64 %38, %41
  br i1 %cmp42, label %cond.true.44, label %cond.false.47

cond.true.44:                                     ; preds = %cond.true.39
  %42 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text45 = getelementptr inbounds %struct.buffer, %struct.buffer* %42, i32 0, i32 73
  %43 = load %struct.buffer_text*, %struct.buffer_text** %text45, align 8
  %gap_size46 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %43, i32 0, i32 5
  %44 = load i64, i64* %gap_size46, align 8
  br label %cond.end.48

cond.false.47:                                    ; preds = %cond.true.39
  br label %cond.end.48

cond.end.48:                                      ; preds = %cond.false.47, %cond.true.44
  %cond49 = phi i64 [ %44, %cond.true.44 ], [ 0, %cond.false.47 ]
  %45 = load i64, i64* %from_byte.addr, align 8
  %add50 = add nsw i64 %cond49, %45
  %46 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text51 = getelementptr inbounds %struct.buffer, %struct.buffer* %46, i32 0, i32 73
  %47 = load %struct.buffer_text*, %struct.buffer_text** %text51, align 8
  %beg52 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %47, i32 0, i32 0
  %48 = load i8*, i8** %beg52, align 8
  %add.ptr53 = getelementptr inbounds i8, i8* %48, i64 %add50
  %add.ptr54 = getelementptr inbounds i8, i8* %add.ptr53, i64 -1
  %49 = load i8, i8* %add.ptr54, align 1
  %conv55 = zext i8 %49 to i32
  br label %cond.end.74

cond.false.56:                                    ; preds = %cond.end.28, %cond.end
  %50 = load i64, i64* %from_byte.addr, align 8
  %51 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text57 = getelementptr inbounds %struct.buffer, %struct.buffer* %51, i32 0, i32 73
  %52 = load %struct.buffer_text*, %struct.buffer_text** %text57, align 8
  %gpt_byte58 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %52, i32 0, i32 3
  %53 = load i64, i64* %gpt_byte58, align 8
  %cmp59 = icmp sge i64 %50, %53
  br i1 %cmp59, label %cond.true.61, label %cond.false.64

cond.true.61:                                     ; preds = %cond.false.56
  %54 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text62 = getelementptr inbounds %struct.buffer, %struct.buffer* %54, i32 0, i32 73
  %55 = load %struct.buffer_text*, %struct.buffer_text** %text62, align 8
  %gap_size63 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %55, i32 0, i32 5
  %56 = load i64, i64* %gap_size63, align 8
  br label %cond.end.65

cond.false.64:                                    ; preds = %cond.false.56
  br label %cond.end.65

cond.end.65:                                      ; preds = %cond.false.64, %cond.true.61
  %cond66 = phi i64 [ %56, %cond.true.61 ], [ 0, %cond.false.64 ]
  %57 = load i64, i64* %from_byte.addr, align 8
  %add67 = add nsw i64 %cond66, %57
  %58 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text68 = getelementptr inbounds %struct.buffer, %struct.buffer* %58, i32 0, i32 73
  %59 = load %struct.buffer_text*, %struct.buffer_text** %text68, align 8
  %beg69 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %59, i32 0, i32 0
  %60 = load i8*, i8** %beg69, align 8
  %add.ptr70 = getelementptr inbounds i8, i8* %60, i64 %add67
  %add.ptr71 = getelementptr inbounds i8, i8* %add.ptr70, i64 -1
  %61 = load i8, i8* %add.ptr71, align 1
  %conv72 = zext i8 %61 to i32
  %add73 = add nsw i32 %conv72, 4194048
  br label %cond.end.74

cond.end.74:                                      ; preds = %cond.end.65, %cond.end.48
  %cond75 = phi i32 [ %conv55, %cond.end.48 ], [ %add73, %cond.end.65 ]
  br label %cond.end.76

cond.end.76:                                      ; preds = %cond.end.74, %cond.true
  %cond77 = phi i32 [ %call8, %cond.true ], [ %cond75, %cond.end.74 ]
  store i32 %cond77, i32* %c, align 4
  %62 = load i32, i32* %c, align 4
  %call78 = call i32 @syntax_property_with_flags(i32 %62, i1 zeroext true)
  store i32 %call78, i32* %syntax, align 4
  %63 = load i32, i32* %syntax, align 4
  %and = and i32 %63, 255
  store i32 %and, i32* %code, align 4
  %64 = load i32, i32* %code, align 4
  %cmp79 = icmp eq i32 %64, 12
  br i1 %cmp79, label %land.lhs.true, label %if.end.102

land.lhs.true:                                    ; preds = %cond.end.76
  %65 = load i32, i32* %syntax, align 4
  %call81 = call i32 @SYNTAX_FLAGS_COMMENT_STYLE(i32 %65, i32 0)
  %66 = load i32, i32* %style.addr, align 4
  %cmp82 = icmp eq i32 %call81, %66
  br i1 %cmp82, label %land.lhs.true.84, label %if.end.102

land.lhs.true.84:                                 ; preds = %land.lhs.true
  %67 = load i32, i32* %syntax, align 4
  %call85 = call zeroext i1 @SYNTAX_FLAGS_COMMENT_NESTED(i32 %67)
  br i1 %call85, label %cond.true.87, label %cond.false.93

cond.true.87:                                     ; preds = %land.lhs.true.84
  %68 = load i64, i64* %nesting.addr, align 8
  %cmp88 = icmp sgt i64 %68, 0
  br i1 %cmp88, label %land.lhs.true.90, label %if.end.102

land.lhs.true.90:                                 ; preds = %cond.true.87
  %69 = load i64, i64* %nesting.addr, align 8
  %dec = add nsw i64 %69, -1
  store i64 %dec, i64* %nesting.addr, align 8
  %cmp91 = icmp eq i64 %dec, 0
  br i1 %cmp91, label %land.lhs.true.96, label %if.end.102

cond.false.93:                                    ; preds = %land.lhs.true.84
  %70 = load i64, i64* %nesting.addr, align 8
  %cmp94 = icmp slt i64 %70, 0
  br i1 %cmp94, label %land.lhs.true.96, label %if.end.102

land.lhs.true.96:                                 ; preds = %cond.false.93, %land.lhs.true.90
  %71 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 420), align 1
  %tobool = trunc i8 %71 to i1
  br i1 %tobool, label %land.lhs.true.98, label %if.then.101

land.lhs.true.98:                                 ; preds = %land.lhs.true.96
  %72 = load i64, i64* %from.addr, align 8
  %73 = load i64, i64* %from_byte.addr, align 8
  %call99 = call zeroext i1 @char_quoted(i64 %72, i64 %73)
  br i1 %call99, label %if.end.102, label %if.then.101

if.then.101:                                      ; preds = %land.lhs.true.98, %land.lhs.true.96
  br label %while.end

if.end.102:                                       ; preds = %land.lhs.true.98, %cond.false.93, %land.lhs.true.90, %cond.true.87, %land.lhs.true, %cond.end.76
  %74 = load i32, i32* %code, align 4
  %cmp103 = icmp eq i32 %74, 14
  br i1 %cmp103, label %land.lhs.true.105, label %if.end.109

land.lhs.true.105:                                ; preds = %if.end.102
  %75 = load i32, i32* %style.addr, align 4
  %cmp106 = icmp eq i32 %75, 257
  br i1 %cmp106, label %if.then.108, label %if.end.109

if.then.108:                                      ; preds = %land.lhs.true.105
  br label %while.end

if.end.109:                                       ; preds = %land.lhs.true.105, %if.end.102
  %76 = load i64, i64* %nesting.addr, align 8
  %cmp110 = icmp sgt i64 %76, 0
  br i1 %cmp110, label %land.lhs.true.112, label %if.end.123

land.lhs.true.112:                                ; preds = %if.end.109
  %77 = load i32, i32* %code, align 4
  %cmp113 = icmp eq i32 %77, 11
  br i1 %cmp113, label %land.lhs.true.115, label %if.end.123

land.lhs.true.115:                                ; preds = %land.lhs.true.112
  %78 = load i32, i32* %syntax, align 4
  %call116 = call zeroext i1 @SYNTAX_FLAGS_COMMENT_NESTED(i32 %78)
  br i1 %call116, label %land.lhs.true.118, label %if.end.123

land.lhs.true.118:                                ; preds = %land.lhs.true.115
  %79 = load i32, i32* %syntax, align 4
  %call119 = call i32 @SYNTAX_FLAGS_COMMENT_STYLE(i32 %79, i32 0)
  %80 = load i32, i32* %style.addr, align 4
  %cmp120 = icmp eq i32 %call119, %80
  br i1 %cmp120, label %if.then.122, label %if.end.123

if.then.122:                                      ; preds = %land.lhs.true.118
  %81 = load i64, i64* %nesting.addr, align 8
  %inc = add nsw i64 %81, 1
  store i64 %inc, i64* %nesting.addr, align 8
  br label %if.end.123

if.end.123:                                       ; preds = %if.then.122, %land.lhs.true.118, %land.lhs.true.115, %land.lhs.true.112, %if.end.109
  br label %do.body

do.body:                                          ; preds = %if.end.123
  %82 = load i64, i64* %from.addr, align 8
  %inc124 = add nsw i64 %82, 1
  store i64 %inc124, i64* %from.addr, align 8
  %83 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_125 = getelementptr inbounds %struct.buffer, %struct.buffer* %83, i32 0, i32 39
  %84 = load i64, i64* %enable_multibyte_characters_125, align 8
  %call126 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp127 = icmp eq i64 %84, %call126
  br i1 %cmp127, label %if.then.129, label %if.else

if.then.129:                                      ; preds = %do.body
  %85 = load i64, i64* %from_byte.addr, align 8
  %inc130 = add nsw i64 %85, 1
  store i64 %inc130, i64* %from_byte.addr, align 8
  br label %if.end.174

if.else:                                          ; preds = %do.body
  br label %do.body.131

do.body.131:                                      ; preds = %if.else
  %86 = load i64, i64* %from_byte.addr, align 8
  %87 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text132 = getelementptr inbounds %struct.buffer, %struct.buffer* %87, i32 0, i32 73
  %88 = load %struct.buffer_text*, %struct.buffer_text** %text132, align 8
  %gpt_byte133 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %88, i32 0, i32 3
  %89 = load i64, i64* %gpt_byte133, align 8
  %cmp134 = icmp sge i64 %86, %89
  br i1 %cmp134, label %cond.true.136, label %cond.false.139

cond.true.136:                                    ; preds = %do.body.131
  %90 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text137 = getelementptr inbounds %struct.buffer, %struct.buffer* %90, i32 0, i32 73
  %91 = load %struct.buffer_text*, %struct.buffer_text** %text137, align 8
  %gap_size138 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %91, i32 0, i32 5
  %92 = load i64, i64* %gap_size138, align 8
  br label %cond.end.140

cond.false.139:                                   ; preds = %do.body.131
  br label %cond.end.140

cond.end.140:                                     ; preds = %cond.false.139, %cond.true.136
  %cond141 = phi i64 [ %92, %cond.true.136 ], [ 0, %cond.false.139 ]
  %93 = load i64, i64* %from_byte.addr, align 8
  %add142 = add nsw i64 %cond141, %93
  %94 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text143 = getelementptr inbounds %struct.buffer, %struct.buffer* %94, i32 0, i32 73
  %95 = load %struct.buffer_text*, %struct.buffer_text** %text143, align 8
  %beg144 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %95, i32 0, i32 0
  %96 = load i8*, i8** %beg144, align 8
  %add.ptr145 = getelementptr inbounds i8, i8* %96, i64 %add142
  %add.ptr146 = getelementptr inbounds i8, i8* %add.ptr145, i64 -1
  store i8* %add.ptr146, i8** %chp, align 8
  %97 = load i8*, i8** %chp, align 8
  %98 = load i8, i8* %97, align 1
  %conv147 = zext i8 %98 to i32
  %and148 = and i32 %conv147, 128
  %tobool149 = icmp ne i32 %and148, 0
  br i1 %tobool149, label %cond.false.151, label %cond.true.150

cond.true.150:                                    ; preds = %cond.end.140
  br label %cond.end.170

cond.false.151:                                   ; preds = %cond.end.140
  %99 = load i8*, i8** %chp, align 8
  %100 = load i8, i8* %99, align 1
  %conv152 = zext i8 %100 to i32
  %and153 = and i32 %conv152, 32
  %tobool154 = icmp ne i32 %and153, 0
  br i1 %tobool154, label %cond.false.156, label %cond.true.155

cond.true.155:                                    ; preds = %cond.false.151
  br label %cond.end.168

cond.false.156:                                   ; preds = %cond.false.151
  %101 = load i8*, i8** %chp, align 8
  %102 = load i8, i8* %101, align 1
  %conv157 = zext i8 %102 to i32
  %and158 = and i32 %conv157, 16
  %tobool159 = icmp ne i32 %and158, 0
  br i1 %tobool159, label %cond.false.161, label %cond.true.160

cond.true.160:                                    ; preds = %cond.false.156
  br label %cond.end.166

cond.false.161:                                   ; preds = %cond.false.156
  %103 = load i8*, i8** %chp, align 8
  %104 = load i8, i8* %103, align 1
  %conv162 = zext i8 %104 to i32
  %and163 = and i32 %conv162, 8
  %tobool164 = icmp ne i32 %and163, 0
  %lnot = xor i1 %tobool164, true
  %cond165 = select i1 %lnot, i32 4, i32 5
  br label %cond.end.166

cond.end.166:                                     ; preds = %cond.false.161, %cond.true.160
  %cond167 = phi i32 [ 3, %cond.true.160 ], [ %cond165, %cond.false.161 ]
  br label %cond.end.168

cond.end.168:                                     ; preds = %cond.end.166, %cond.true.155
  %cond169 = phi i32 [ 2, %cond.true.155 ], [ %cond167, %cond.end.166 ]
  br label %cond.end.170

cond.end.170:                                     ; preds = %cond.end.168, %cond.true.150
  %cond171 = phi i32 [ 1, %cond.true.150 ], [ %cond169, %cond.end.168 ]
  %conv172 = sext i32 %cond171 to i64
  %105 = load i64, i64* %from_byte.addr, align 8
  %add173 = add nsw i64 %105, %conv172
  store i64 %add173, i64* %from_byte.addr, align 8
  br label %do.end

do.end:                                           ; preds = %cond.end.170
  br label %if.end.174

if.end.174:                                       ; preds = %do.end, %if.then.129
  br label %do.end.175

do.end.175:                                       ; preds = %if.end.174
  %106 = load i64, i64* %from.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_FORWARD(i64 %106)
  br label %forw_incomment

forw_incomment:                                   ; preds = %do.end.175, %if.then.2
  %107 = load i64, i64* %from.addr, align 8
  %108 = load i64, i64* %stop.addr, align 8
  %cmp176 = icmp slt i64 %107, %108
  br i1 %cmp176, label %land.lhs.true.178, label %if.end.350

land.lhs.true.178:                                ; preds = %forw_incomment
  %109 = load i32, i32* %syntax, align 4
  %call179 = call zeroext i1 @SYNTAX_FLAGS_COMEND_FIRST(i32 %109)
  br i1 %call179, label %land.lhs.true.181, label %if.end.350

land.lhs.true.181:                                ; preds = %land.lhs.true.178
  %110 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_182 = getelementptr inbounds %struct.buffer, %struct.buffer* %110, i32 0, i32 39
  %111 = load i64, i64* %enable_multibyte_characters_182, align 8
  %call183 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp184 = icmp eq i64 %111, %call183
  br i1 %cmp184, label %cond.false.188, label %cond.true.186

cond.true.186:                                    ; preds = %land.lhs.true.181
  %112 = load i64, i64* %from_byte.addr, align 8
  %call187 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %112)
  br label %cond.end.266

cond.false.188:                                   ; preds = %land.lhs.true.181
  br i1 true, label %cond.true.189, label %cond.false.209

cond.true.189:                                    ; preds = %cond.false.188
  %113 = load i64, i64* %from_byte.addr, align 8
  %114 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text190 = getelementptr inbounds %struct.buffer, %struct.buffer* %114, i32 0, i32 73
  %115 = load %struct.buffer_text*, %struct.buffer_text** %text190, align 8
  %gpt_byte191 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %115, i32 0, i32 3
  %116 = load i64, i64* %gpt_byte191, align 8
  %cmp192 = icmp sge i64 %113, %116
  br i1 %cmp192, label %cond.true.194, label %cond.false.197

cond.true.194:                                    ; preds = %cond.true.189
  %117 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text195 = getelementptr inbounds %struct.buffer, %struct.buffer* %117, i32 0, i32 73
  %118 = load %struct.buffer_text*, %struct.buffer_text** %text195, align 8
  %gap_size196 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %118, i32 0, i32 5
  %119 = load i64, i64* %gap_size196, align 8
  br label %cond.end.198

cond.false.197:                                   ; preds = %cond.true.189
  br label %cond.end.198

cond.end.198:                                     ; preds = %cond.false.197, %cond.true.194
  %cond199 = phi i64 [ %119, %cond.true.194 ], [ 0, %cond.false.197 ]
  %120 = load i64, i64* %from_byte.addr, align 8
  %add200 = add nsw i64 %cond199, %120
  %121 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text201 = getelementptr inbounds %struct.buffer, %struct.buffer* %121, i32 0, i32 73
  %122 = load %struct.buffer_text*, %struct.buffer_text** %text201, align 8
  %beg202 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %122, i32 0, i32 0
  %123 = load i8*, i8** %beg202, align 8
  %add.ptr203 = getelementptr inbounds i8, i8* %123, i64 %add200
  %add.ptr204 = getelementptr inbounds i8, i8* %add.ptr203, i64 -1
  %124 = load i8, i8* %add.ptr204, align 1
  %conv205 = zext i8 %124 to i32
  %add206 = add i32 %conv205, 0
  %cmp207 = icmp ult i32 %add206, 128
  br i1 %cmp207, label %cond.true.229, label %cond.false.246

cond.false.209:                                   ; preds = %cond.false.188
  %125 = load i64, i64* %from_byte.addr, align 8
  %126 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text210 = getelementptr inbounds %struct.buffer, %struct.buffer* %126, i32 0, i32 73
  %127 = load %struct.buffer_text*, %struct.buffer_text** %text210, align 8
  %gpt_byte211 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %127, i32 0, i32 3
  %128 = load i64, i64* %gpt_byte211, align 8
  %cmp212 = icmp sge i64 %125, %128
  br i1 %cmp212, label %cond.true.214, label %cond.false.217

cond.true.214:                                    ; preds = %cond.false.209
  %129 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text215 = getelementptr inbounds %struct.buffer, %struct.buffer* %129, i32 0, i32 73
  %130 = load %struct.buffer_text*, %struct.buffer_text** %text215, align 8
  %gap_size216 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %130, i32 0, i32 5
  %131 = load i64, i64* %gap_size216, align 8
  br label %cond.end.218

cond.false.217:                                   ; preds = %cond.false.209
  br label %cond.end.218

cond.end.218:                                     ; preds = %cond.false.217, %cond.true.214
  %cond219 = phi i64 [ %131, %cond.true.214 ], [ 0, %cond.false.217 ]
  %132 = load i64, i64* %from_byte.addr, align 8
  %add220 = add nsw i64 %cond219, %132
  %133 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text221 = getelementptr inbounds %struct.buffer, %struct.buffer* %133, i32 0, i32 73
  %134 = load %struct.buffer_text*, %struct.buffer_text** %text221, align 8
  %beg222 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %134, i32 0, i32 0
  %135 = load i8*, i8** %beg222, align 8
  %add.ptr223 = getelementptr inbounds i8, i8* %135, i64 %add220
  %add.ptr224 = getelementptr inbounds i8, i8* %add.ptr223, i64 -1
  %136 = load i8, i8* %add.ptr224, align 1
  %conv225 = zext i8 %136 to i64
  %add226 = add i64 %conv225, 0
  %cmp227 = icmp ult i64 %add226, 128
  br i1 %cmp227, label %cond.true.229, label %cond.false.246

cond.true.229:                                    ; preds = %cond.end.218, %cond.end.198
  %137 = load i64, i64* %from_byte.addr, align 8
  %138 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text230 = getelementptr inbounds %struct.buffer, %struct.buffer* %138, i32 0, i32 73
  %139 = load %struct.buffer_text*, %struct.buffer_text** %text230, align 8
  %gpt_byte231 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %139, i32 0, i32 3
  %140 = load i64, i64* %gpt_byte231, align 8
  %cmp232 = icmp sge i64 %137, %140
  br i1 %cmp232, label %cond.true.234, label %cond.false.237

cond.true.234:                                    ; preds = %cond.true.229
  %141 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text235 = getelementptr inbounds %struct.buffer, %struct.buffer* %141, i32 0, i32 73
  %142 = load %struct.buffer_text*, %struct.buffer_text** %text235, align 8
  %gap_size236 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %142, i32 0, i32 5
  %143 = load i64, i64* %gap_size236, align 8
  br label %cond.end.238

cond.false.237:                                   ; preds = %cond.true.229
  br label %cond.end.238

cond.end.238:                                     ; preds = %cond.false.237, %cond.true.234
  %cond239 = phi i64 [ %143, %cond.true.234 ], [ 0, %cond.false.237 ]
  %144 = load i64, i64* %from_byte.addr, align 8
  %add240 = add nsw i64 %cond239, %144
  %145 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text241 = getelementptr inbounds %struct.buffer, %struct.buffer* %145, i32 0, i32 73
  %146 = load %struct.buffer_text*, %struct.buffer_text** %text241, align 8
  %beg242 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %146, i32 0, i32 0
  %147 = load i8*, i8** %beg242, align 8
  %add.ptr243 = getelementptr inbounds i8, i8* %147, i64 %add240
  %add.ptr244 = getelementptr inbounds i8, i8* %add.ptr243, i64 -1
  %148 = load i8, i8* %add.ptr244, align 1
  %conv245 = zext i8 %148 to i32
  br label %cond.end.264

cond.false.246:                                   ; preds = %cond.end.218, %cond.end.198
  %149 = load i64, i64* %from_byte.addr, align 8
  %150 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text247 = getelementptr inbounds %struct.buffer, %struct.buffer* %150, i32 0, i32 73
  %151 = load %struct.buffer_text*, %struct.buffer_text** %text247, align 8
  %gpt_byte248 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %151, i32 0, i32 3
  %152 = load i64, i64* %gpt_byte248, align 8
  %cmp249 = icmp sge i64 %149, %152
  br i1 %cmp249, label %cond.true.251, label %cond.false.254

cond.true.251:                                    ; preds = %cond.false.246
  %153 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text252 = getelementptr inbounds %struct.buffer, %struct.buffer* %153, i32 0, i32 73
  %154 = load %struct.buffer_text*, %struct.buffer_text** %text252, align 8
  %gap_size253 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %154, i32 0, i32 5
  %155 = load i64, i64* %gap_size253, align 8
  br label %cond.end.255

cond.false.254:                                   ; preds = %cond.false.246
  br label %cond.end.255

cond.end.255:                                     ; preds = %cond.false.254, %cond.true.251
  %cond256 = phi i64 [ %155, %cond.true.251 ], [ 0, %cond.false.254 ]
  %156 = load i64, i64* %from_byte.addr, align 8
  %add257 = add nsw i64 %cond256, %156
  %157 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text258 = getelementptr inbounds %struct.buffer, %struct.buffer* %157, i32 0, i32 73
  %158 = load %struct.buffer_text*, %struct.buffer_text** %text258, align 8
  %beg259 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %158, i32 0, i32 0
  %159 = load i8*, i8** %beg259, align 8
  %add.ptr260 = getelementptr inbounds i8, i8* %159, i64 %add257
  %add.ptr261 = getelementptr inbounds i8, i8* %add.ptr260, i64 -1
  %160 = load i8, i8* %add.ptr261, align 1
  %conv262 = zext i8 %160 to i32
  %add263 = add nsw i32 %conv262, 4194048
  br label %cond.end.264

cond.end.264:                                     ; preds = %cond.end.255, %cond.end.238
  %cond265 = phi i32 [ %conv245, %cond.end.238 ], [ %add263, %cond.end.255 ]
  br label %cond.end.266

cond.end.266:                                     ; preds = %cond.end.264, %cond.true.186
  %cond267 = phi i32 [ %call187, %cond.true.186 ], [ %cond265, %cond.end.264 ]
  store i32 %cond267, i32* %c1, align 4
  %161 = load i32, i32* %c1, align 4
  %call268 = call i32 @syntax_property_with_flags(i32 %161, i1 zeroext true)
  store i32 %call268, i32* %other_syntax, align 4
  %162 = load i32, i32* %other_syntax, align 4
  %call269 = call zeroext i1 @SYNTAX_FLAGS_COMEND_SECOND(i32 %162)
  br i1 %call269, label %land.lhs.true.271, label %if.end.350

land.lhs.true.271:                                ; preds = %cond.end.266
  %163 = load i32, i32* %syntax, align 4
  %164 = load i32, i32* %other_syntax, align 4
  %call272 = call i32 @SYNTAX_FLAGS_COMMENT_STYLE(i32 %163, i32 %164)
  %165 = load i32, i32* %style.addr, align 4
  %cmp273 = icmp eq i32 %call272, %165
  br i1 %cmp273, label %land.lhs.true.275, label %if.end.350

land.lhs.true.275:                                ; preds = %land.lhs.true.271
  %166 = load i32, i32* %syntax, align 4
  %call276 = call zeroext i1 @SYNTAX_FLAGS_COMMENT_NESTED(i32 %166)
  br i1 %call276, label %cond.true.280, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.275
  %167 = load i32, i32* %other_syntax, align 4
  %call278 = call zeroext i1 @SYNTAX_FLAGS_COMMENT_NESTED(i32 %167)
  br i1 %call278, label %cond.true.280, label %cond.false.283

cond.true.280:                                    ; preds = %lor.lhs.false, %land.lhs.true.275
  %168 = load i64, i64* %nesting.addr, align 8
  %cmp281 = icmp sgt i64 %168, 0
  br i1 %cmp281, label %if.then.286, label %if.end.350

cond.false.283:                                   ; preds = %lor.lhs.false
  %169 = load i64, i64* %nesting.addr, align 8
  %cmp284 = icmp slt i64 %169, 0
  br i1 %cmp284, label %if.then.286, label %if.end.350

if.then.286:                                      ; preds = %cond.false.283, %cond.true.280
  %170 = load i64, i64* %nesting.addr, align 8
  %dec287 = add nsw i64 %170, -1
  store i64 %dec287, i64* %nesting.addr, align 8
  %cmp288 = icmp sle i64 %dec287, 0
  br i1 %cmp288, label %if.then.290, label %if.else.291

if.then.290:                                      ; preds = %if.then.286
  br label %while.end

if.else.291:                                      ; preds = %if.then.286
  br label %do.body.292

do.body.292:                                      ; preds = %if.else.291
  %171 = load i64, i64* %from.addr, align 8
  %inc293 = add nsw i64 %171, 1
  store i64 %inc293, i64* %from.addr, align 8
  %172 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_294 = getelementptr inbounds %struct.buffer, %struct.buffer* %172, i32 0, i32 39
  %173 = load i64, i64* %enable_multibyte_characters_294, align 8
  %call295 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp296 = icmp eq i64 %173, %call295
  br i1 %cmp296, label %if.then.298, label %if.else.300

if.then.298:                                      ; preds = %do.body.292
  %174 = load i64, i64* %from_byte.addr, align 8
  %inc299 = add nsw i64 %174, 1
  store i64 %inc299, i64* %from_byte.addr, align 8
  br label %if.end.347

if.else.300:                                      ; preds = %do.body.292
  br label %do.body.301

do.body.301:                                      ; preds = %if.else.300
  %175 = load i64, i64* %from_byte.addr, align 8
  %176 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text303 = getelementptr inbounds %struct.buffer, %struct.buffer* %176, i32 0, i32 73
  %177 = load %struct.buffer_text*, %struct.buffer_text** %text303, align 8
  %gpt_byte304 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %177, i32 0, i32 3
  %178 = load i64, i64* %gpt_byte304, align 8
  %cmp305 = icmp sge i64 %175, %178
  br i1 %cmp305, label %cond.true.307, label %cond.false.310

cond.true.307:                                    ; preds = %do.body.301
  %179 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text308 = getelementptr inbounds %struct.buffer, %struct.buffer* %179, i32 0, i32 73
  %180 = load %struct.buffer_text*, %struct.buffer_text** %text308, align 8
  %gap_size309 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %180, i32 0, i32 5
  %181 = load i64, i64* %gap_size309, align 8
  br label %cond.end.311

cond.false.310:                                   ; preds = %do.body.301
  br label %cond.end.311

cond.end.311:                                     ; preds = %cond.false.310, %cond.true.307
  %cond312 = phi i64 [ %181, %cond.true.307 ], [ 0, %cond.false.310 ]
  %182 = load i64, i64* %from_byte.addr, align 8
  %add313 = add nsw i64 %cond312, %182
  %183 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text314 = getelementptr inbounds %struct.buffer, %struct.buffer* %183, i32 0, i32 73
  %184 = load %struct.buffer_text*, %struct.buffer_text** %text314, align 8
  %beg315 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %184, i32 0, i32 0
  %185 = load i8*, i8** %beg315, align 8
  %add.ptr316 = getelementptr inbounds i8, i8* %185, i64 %add313
  %add.ptr317 = getelementptr inbounds i8, i8* %add.ptr316, i64 -1
  store i8* %add.ptr317, i8** %chp302, align 8
  %186 = load i8*, i8** %chp302, align 8
  %187 = load i8, i8* %186, align 1
  %conv318 = zext i8 %187 to i32
  %and319 = and i32 %conv318, 128
  %tobool320 = icmp ne i32 %and319, 0
  br i1 %tobool320, label %cond.false.322, label %cond.true.321

cond.true.321:                                    ; preds = %cond.end.311
  br label %cond.end.342

cond.false.322:                                   ; preds = %cond.end.311
  %188 = load i8*, i8** %chp302, align 8
  %189 = load i8, i8* %188, align 1
  %conv323 = zext i8 %189 to i32
  %and324 = and i32 %conv323, 32
  %tobool325 = icmp ne i32 %and324, 0
  br i1 %tobool325, label %cond.false.327, label %cond.true.326

cond.true.326:                                    ; preds = %cond.false.322
  br label %cond.end.340

cond.false.327:                                   ; preds = %cond.false.322
  %190 = load i8*, i8** %chp302, align 8
  %191 = load i8, i8* %190, align 1
  %conv328 = zext i8 %191 to i32
  %and329 = and i32 %conv328, 16
  %tobool330 = icmp ne i32 %and329, 0
  br i1 %tobool330, label %cond.false.332, label %cond.true.331

cond.true.331:                                    ; preds = %cond.false.327
  br label %cond.end.338

cond.false.332:                                   ; preds = %cond.false.327
  %192 = load i8*, i8** %chp302, align 8
  %193 = load i8, i8* %192, align 1
  %conv333 = zext i8 %193 to i32
  %and334 = and i32 %conv333, 8
  %tobool335 = icmp ne i32 %and334, 0
  %lnot336 = xor i1 %tobool335, true
  %cond337 = select i1 %lnot336, i32 4, i32 5
  br label %cond.end.338

cond.end.338:                                     ; preds = %cond.false.332, %cond.true.331
  %cond339 = phi i32 [ 3, %cond.true.331 ], [ %cond337, %cond.false.332 ]
  br label %cond.end.340

cond.end.340:                                     ; preds = %cond.end.338, %cond.true.326
  %cond341 = phi i32 [ 2, %cond.true.326 ], [ %cond339, %cond.end.338 ]
  br label %cond.end.342

cond.end.342:                                     ; preds = %cond.end.340, %cond.true.321
  %cond343 = phi i32 [ 1, %cond.true.321 ], [ %cond341, %cond.end.340 ]
  %conv344 = sext i32 %cond343 to i64
  %194 = load i64, i64* %from_byte.addr, align 8
  %add345 = add nsw i64 %194, %conv344
  store i64 %add345, i64* %from_byte.addr, align 8
  br label %do.end.346

do.end.346:                                       ; preds = %cond.end.342
  br label %if.end.347

if.end.347:                                       ; preds = %do.end.346, %if.then.298
  br label %do.end.348

do.end.348:                                       ; preds = %if.end.347
  %195 = load i64, i64* %from.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_FORWARD(i64 %195)
  br label %if.end.349

if.end.349:                                       ; preds = %do.end.348
  br label %if.end.350

if.end.350:                                       ; preds = %if.end.349, %cond.false.283, %cond.true.280, %land.lhs.true.271, %cond.end.266, %land.lhs.true.178, %forw_incomment
  %196 = load i64, i64* %nesting.addr, align 8
  %cmp351 = icmp sgt i64 %196, 0
  br i1 %cmp351, label %land.lhs.true.353, label %if.end.517

land.lhs.true.353:                                ; preds = %if.end.350
  %197 = load i64, i64* %from.addr, align 8
  %198 = load i64, i64* %stop.addr, align 8
  %cmp354 = icmp slt i64 %197, %198
  br i1 %cmp354, label %land.lhs.true.356, label %if.end.517

land.lhs.true.356:                                ; preds = %land.lhs.true.353
  %199 = load i32, i32* %syntax, align 4
  %call357 = call zeroext i1 @SYNTAX_FLAGS_COMSTART_FIRST(i32 %199)
  br i1 %call357, label %land.lhs.true.359, label %if.end.517

land.lhs.true.359:                                ; preds = %land.lhs.true.356
  %200 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_360 = getelementptr inbounds %struct.buffer, %struct.buffer* %200, i32 0, i32 39
  %201 = load i64, i64* %enable_multibyte_characters_360, align 8
  %call361 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp362 = icmp eq i64 %201, %call361
  br i1 %cmp362, label %cond.false.366, label %cond.true.364

cond.true.364:                                    ; preds = %land.lhs.true.359
  %202 = load i64, i64* %from_byte.addr, align 8
  %call365 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %202)
  br label %cond.end.444

cond.false.366:                                   ; preds = %land.lhs.true.359
  br i1 true, label %cond.true.367, label %cond.false.387

cond.true.367:                                    ; preds = %cond.false.366
  %203 = load i64, i64* %from_byte.addr, align 8
  %204 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text368 = getelementptr inbounds %struct.buffer, %struct.buffer* %204, i32 0, i32 73
  %205 = load %struct.buffer_text*, %struct.buffer_text** %text368, align 8
  %gpt_byte369 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %205, i32 0, i32 3
  %206 = load i64, i64* %gpt_byte369, align 8
  %cmp370 = icmp sge i64 %203, %206
  br i1 %cmp370, label %cond.true.372, label %cond.false.375

cond.true.372:                                    ; preds = %cond.true.367
  %207 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text373 = getelementptr inbounds %struct.buffer, %struct.buffer* %207, i32 0, i32 73
  %208 = load %struct.buffer_text*, %struct.buffer_text** %text373, align 8
  %gap_size374 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %208, i32 0, i32 5
  %209 = load i64, i64* %gap_size374, align 8
  br label %cond.end.376

cond.false.375:                                   ; preds = %cond.true.367
  br label %cond.end.376

cond.end.376:                                     ; preds = %cond.false.375, %cond.true.372
  %cond377 = phi i64 [ %209, %cond.true.372 ], [ 0, %cond.false.375 ]
  %210 = load i64, i64* %from_byte.addr, align 8
  %add378 = add nsw i64 %cond377, %210
  %211 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text379 = getelementptr inbounds %struct.buffer, %struct.buffer* %211, i32 0, i32 73
  %212 = load %struct.buffer_text*, %struct.buffer_text** %text379, align 8
  %beg380 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %212, i32 0, i32 0
  %213 = load i8*, i8** %beg380, align 8
  %add.ptr381 = getelementptr inbounds i8, i8* %213, i64 %add378
  %add.ptr382 = getelementptr inbounds i8, i8* %add.ptr381, i64 -1
  %214 = load i8, i8* %add.ptr382, align 1
  %conv383 = zext i8 %214 to i32
  %add384 = add i32 %conv383, 0
  %cmp385 = icmp ult i32 %add384, 128
  br i1 %cmp385, label %cond.true.407, label %cond.false.424

cond.false.387:                                   ; preds = %cond.false.366
  %215 = load i64, i64* %from_byte.addr, align 8
  %216 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text388 = getelementptr inbounds %struct.buffer, %struct.buffer* %216, i32 0, i32 73
  %217 = load %struct.buffer_text*, %struct.buffer_text** %text388, align 8
  %gpt_byte389 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %217, i32 0, i32 3
  %218 = load i64, i64* %gpt_byte389, align 8
  %cmp390 = icmp sge i64 %215, %218
  br i1 %cmp390, label %cond.true.392, label %cond.false.395

cond.true.392:                                    ; preds = %cond.false.387
  %219 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text393 = getelementptr inbounds %struct.buffer, %struct.buffer* %219, i32 0, i32 73
  %220 = load %struct.buffer_text*, %struct.buffer_text** %text393, align 8
  %gap_size394 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %220, i32 0, i32 5
  %221 = load i64, i64* %gap_size394, align 8
  br label %cond.end.396

cond.false.395:                                   ; preds = %cond.false.387
  br label %cond.end.396

cond.end.396:                                     ; preds = %cond.false.395, %cond.true.392
  %cond397 = phi i64 [ %221, %cond.true.392 ], [ 0, %cond.false.395 ]
  %222 = load i64, i64* %from_byte.addr, align 8
  %add398 = add nsw i64 %cond397, %222
  %223 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text399 = getelementptr inbounds %struct.buffer, %struct.buffer* %223, i32 0, i32 73
  %224 = load %struct.buffer_text*, %struct.buffer_text** %text399, align 8
  %beg400 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %224, i32 0, i32 0
  %225 = load i8*, i8** %beg400, align 8
  %add.ptr401 = getelementptr inbounds i8, i8* %225, i64 %add398
  %add.ptr402 = getelementptr inbounds i8, i8* %add.ptr401, i64 -1
  %226 = load i8, i8* %add.ptr402, align 1
  %conv403 = zext i8 %226 to i64
  %add404 = add i64 %conv403, 0
  %cmp405 = icmp ult i64 %add404, 128
  br i1 %cmp405, label %cond.true.407, label %cond.false.424

cond.true.407:                                    ; preds = %cond.end.396, %cond.end.376
  %227 = load i64, i64* %from_byte.addr, align 8
  %228 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text408 = getelementptr inbounds %struct.buffer, %struct.buffer* %228, i32 0, i32 73
  %229 = load %struct.buffer_text*, %struct.buffer_text** %text408, align 8
  %gpt_byte409 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %229, i32 0, i32 3
  %230 = load i64, i64* %gpt_byte409, align 8
  %cmp410 = icmp sge i64 %227, %230
  br i1 %cmp410, label %cond.true.412, label %cond.false.415

cond.true.412:                                    ; preds = %cond.true.407
  %231 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text413 = getelementptr inbounds %struct.buffer, %struct.buffer* %231, i32 0, i32 73
  %232 = load %struct.buffer_text*, %struct.buffer_text** %text413, align 8
  %gap_size414 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %232, i32 0, i32 5
  %233 = load i64, i64* %gap_size414, align 8
  br label %cond.end.416

cond.false.415:                                   ; preds = %cond.true.407
  br label %cond.end.416

cond.end.416:                                     ; preds = %cond.false.415, %cond.true.412
  %cond417 = phi i64 [ %233, %cond.true.412 ], [ 0, %cond.false.415 ]
  %234 = load i64, i64* %from_byte.addr, align 8
  %add418 = add nsw i64 %cond417, %234
  %235 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text419 = getelementptr inbounds %struct.buffer, %struct.buffer* %235, i32 0, i32 73
  %236 = load %struct.buffer_text*, %struct.buffer_text** %text419, align 8
  %beg420 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %236, i32 0, i32 0
  %237 = load i8*, i8** %beg420, align 8
  %add.ptr421 = getelementptr inbounds i8, i8* %237, i64 %add418
  %add.ptr422 = getelementptr inbounds i8, i8* %add.ptr421, i64 -1
  %238 = load i8, i8* %add.ptr422, align 1
  %conv423 = zext i8 %238 to i32
  br label %cond.end.442

cond.false.424:                                   ; preds = %cond.end.396, %cond.end.376
  %239 = load i64, i64* %from_byte.addr, align 8
  %240 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text425 = getelementptr inbounds %struct.buffer, %struct.buffer* %240, i32 0, i32 73
  %241 = load %struct.buffer_text*, %struct.buffer_text** %text425, align 8
  %gpt_byte426 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %241, i32 0, i32 3
  %242 = load i64, i64* %gpt_byte426, align 8
  %cmp427 = icmp sge i64 %239, %242
  br i1 %cmp427, label %cond.true.429, label %cond.false.432

cond.true.429:                                    ; preds = %cond.false.424
  %243 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text430 = getelementptr inbounds %struct.buffer, %struct.buffer* %243, i32 0, i32 73
  %244 = load %struct.buffer_text*, %struct.buffer_text** %text430, align 8
  %gap_size431 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %244, i32 0, i32 5
  %245 = load i64, i64* %gap_size431, align 8
  br label %cond.end.433

cond.false.432:                                   ; preds = %cond.false.424
  br label %cond.end.433

cond.end.433:                                     ; preds = %cond.false.432, %cond.true.429
  %cond434 = phi i64 [ %245, %cond.true.429 ], [ 0, %cond.false.432 ]
  %246 = load i64, i64* %from_byte.addr, align 8
  %add435 = add nsw i64 %cond434, %246
  %247 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text436 = getelementptr inbounds %struct.buffer, %struct.buffer* %247, i32 0, i32 73
  %248 = load %struct.buffer_text*, %struct.buffer_text** %text436, align 8
  %beg437 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %248, i32 0, i32 0
  %249 = load i8*, i8** %beg437, align 8
  %add.ptr438 = getelementptr inbounds i8, i8* %249, i64 %add435
  %add.ptr439 = getelementptr inbounds i8, i8* %add.ptr438, i64 -1
  %250 = load i8, i8* %add.ptr439, align 1
  %conv440 = zext i8 %250 to i32
  %add441 = add nsw i32 %conv440, 4194048
  br label %cond.end.442

cond.end.442:                                     ; preds = %cond.end.433, %cond.end.416
  %cond443 = phi i32 [ %conv423, %cond.end.416 ], [ %add441, %cond.end.433 ]
  br label %cond.end.444

cond.end.444:                                     ; preds = %cond.end.442, %cond.true.364
  %cond445 = phi i32 [ %call365, %cond.true.364 ], [ %cond443, %cond.end.442 ]
  store i32 %cond445, i32* %c1, align 4
  %251 = load i32, i32* %c1, align 4
  %call446 = call i32 @syntax_property_with_flags(i32 %251, i1 zeroext true)
  store i32 %call446, i32* %other_syntax, align 4
  %252 = load i32, i32* %other_syntax, align 4
  %253 = load i32, i32* %syntax, align 4
  %call447 = call i32 @SYNTAX_FLAGS_COMMENT_STYLE(i32 %252, i32 %253)
  %254 = load i32, i32* %style.addr, align 4
  %cmp448 = icmp eq i32 %call447, %254
  br i1 %cmp448, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.end.444
  %255 = load i32, i32* %other_syntax, align 4
  %call450 = call zeroext i1 @SYNTAX_FLAGS_COMSTART_SECOND(i32 %255)
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.end.444
  %256 = phi i1 [ false, %cond.end.444 ], [ %call450, %land.rhs ]
  br i1 %256, label %land.lhs.true.452, label %if.end.517

land.lhs.true.452:                                ; preds = %land.end
  %257 = load i32, i32* %syntax, align 4
  %call453 = call zeroext i1 @SYNTAX_FLAGS_COMMENT_NESTED(i32 %257)
  br i1 %call453, label %if.then.458, label %lor.lhs.false.455

lor.lhs.false.455:                                ; preds = %land.lhs.true.452
  %258 = load i32, i32* %other_syntax, align 4
  %call456 = call zeroext i1 @SYNTAX_FLAGS_COMMENT_NESTED(i32 %258)
  br i1 %call456, label %if.then.458, label %if.end.517

if.then.458:                                      ; preds = %lor.lhs.false.455, %land.lhs.true.452
  br label %do.body.459

do.body.459:                                      ; preds = %if.then.458
  %259 = load i64, i64* %from.addr, align 8
  %inc460 = add nsw i64 %259, 1
  store i64 %inc460, i64* %from.addr, align 8
  %260 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_461 = getelementptr inbounds %struct.buffer, %struct.buffer* %260, i32 0, i32 39
  %261 = load i64, i64* %enable_multibyte_characters_461, align 8
  %call462 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp463 = icmp eq i64 %261, %call462
  br i1 %cmp463, label %if.then.465, label %if.else.467

if.then.465:                                      ; preds = %do.body.459
  %262 = load i64, i64* %from_byte.addr, align 8
  %inc466 = add nsw i64 %262, 1
  store i64 %inc466, i64* %from_byte.addr, align 8
  br label %if.end.514

if.else.467:                                      ; preds = %do.body.459
  br label %do.body.468

do.body.468:                                      ; preds = %if.else.467
  %263 = load i64, i64* %from_byte.addr, align 8
  %264 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text470 = getelementptr inbounds %struct.buffer, %struct.buffer* %264, i32 0, i32 73
  %265 = load %struct.buffer_text*, %struct.buffer_text** %text470, align 8
  %gpt_byte471 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %265, i32 0, i32 3
  %266 = load i64, i64* %gpt_byte471, align 8
  %cmp472 = icmp sge i64 %263, %266
  br i1 %cmp472, label %cond.true.474, label %cond.false.477

cond.true.474:                                    ; preds = %do.body.468
  %267 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text475 = getelementptr inbounds %struct.buffer, %struct.buffer* %267, i32 0, i32 73
  %268 = load %struct.buffer_text*, %struct.buffer_text** %text475, align 8
  %gap_size476 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %268, i32 0, i32 5
  %269 = load i64, i64* %gap_size476, align 8
  br label %cond.end.478

cond.false.477:                                   ; preds = %do.body.468
  br label %cond.end.478

cond.end.478:                                     ; preds = %cond.false.477, %cond.true.474
  %cond479 = phi i64 [ %269, %cond.true.474 ], [ 0, %cond.false.477 ]
  %270 = load i64, i64* %from_byte.addr, align 8
  %add480 = add nsw i64 %cond479, %270
  %271 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text481 = getelementptr inbounds %struct.buffer, %struct.buffer* %271, i32 0, i32 73
  %272 = load %struct.buffer_text*, %struct.buffer_text** %text481, align 8
  %beg482 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %272, i32 0, i32 0
  %273 = load i8*, i8** %beg482, align 8
  %add.ptr483 = getelementptr inbounds i8, i8* %273, i64 %add480
  %add.ptr484 = getelementptr inbounds i8, i8* %add.ptr483, i64 -1
  store i8* %add.ptr484, i8** %chp469, align 8
  %274 = load i8*, i8** %chp469, align 8
  %275 = load i8, i8* %274, align 1
  %conv485 = zext i8 %275 to i32
  %and486 = and i32 %conv485, 128
  %tobool487 = icmp ne i32 %and486, 0
  br i1 %tobool487, label %cond.false.489, label %cond.true.488

cond.true.488:                                    ; preds = %cond.end.478
  br label %cond.end.509

cond.false.489:                                   ; preds = %cond.end.478
  %276 = load i8*, i8** %chp469, align 8
  %277 = load i8, i8* %276, align 1
  %conv490 = zext i8 %277 to i32
  %and491 = and i32 %conv490, 32
  %tobool492 = icmp ne i32 %and491, 0
  br i1 %tobool492, label %cond.false.494, label %cond.true.493

cond.true.493:                                    ; preds = %cond.false.489
  br label %cond.end.507

cond.false.494:                                   ; preds = %cond.false.489
  %278 = load i8*, i8** %chp469, align 8
  %279 = load i8, i8* %278, align 1
  %conv495 = zext i8 %279 to i32
  %and496 = and i32 %conv495, 16
  %tobool497 = icmp ne i32 %and496, 0
  br i1 %tobool497, label %cond.false.499, label %cond.true.498

cond.true.498:                                    ; preds = %cond.false.494
  br label %cond.end.505

cond.false.499:                                   ; preds = %cond.false.494
  %280 = load i8*, i8** %chp469, align 8
  %281 = load i8, i8* %280, align 1
  %conv500 = zext i8 %281 to i32
  %and501 = and i32 %conv500, 8
  %tobool502 = icmp ne i32 %and501, 0
  %lnot503 = xor i1 %tobool502, true
  %cond504 = select i1 %lnot503, i32 4, i32 5
  br label %cond.end.505

cond.end.505:                                     ; preds = %cond.false.499, %cond.true.498
  %cond506 = phi i32 [ 3, %cond.true.498 ], [ %cond504, %cond.false.499 ]
  br label %cond.end.507

cond.end.507:                                     ; preds = %cond.end.505, %cond.true.493
  %cond508 = phi i32 [ 2, %cond.true.493 ], [ %cond506, %cond.end.505 ]
  br label %cond.end.509

cond.end.509:                                     ; preds = %cond.end.507, %cond.true.488
  %cond510 = phi i32 [ 1, %cond.true.488 ], [ %cond508, %cond.end.507 ]
  %conv511 = sext i32 %cond510 to i64
  %282 = load i64, i64* %from_byte.addr, align 8
  %add512 = add nsw i64 %282, %conv511
  store i64 %add512, i64* %from_byte.addr, align 8
  br label %do.end.513

do.end.513:                                       ; preds = %cond.end.509
  br label %if.end.514

if.end.514:                                       ; preds = %do.end.513, %if.then.465
  br label %do.end.515

do.end.515:                                       ; preds = %if.end.514
  %283 = load i64, i64* %from.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_FORWARD(i64 %283)
  %284 = load i64, i64* %nesting.addr, align 8
  %inc516 = add nsw i64 %284, 1
  store i64 %inc516, i64* %nesting.addr, align 8
  br label %if.end.517

if.end.517:                                       ; preds = %do.end.515, %lor.lhs.false.455, %land.end, %land.lhs.true.356, %land.lhs.true.353, %if.end.350
  br label %while.body

while.end:                                        ; preds = %if.then.290, %if.then.108, %if.then.101
  %285 = load i64, i64* %from.addr, align 8
  %286 = load i64*, i64** %charpos_ptr.addr, align 8
  store i64 %285, i64* %286, align 8
  %287 = load i64, i64* %from_byte.addr, align 8
  %288 = load i64*, i64** %bytepos_ptr.addr, align 8
  store i64 %287, i64* %288, align 8
  store i1 true, i1* %retval
  br label %return

return:                                           ; preds = %while.end, %if.then.5
  %289 = load i1, i1* %retval
  ret i1 %289
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @char_quoted(i64 %charpos, i64 %bytepos) #0 {
entry:
  %charpos.addr = alloca i64, align 8
  %bytepos.addr = alloca i64, align 8
  %code = alloca i32, align 4
  %beg = alloca i64, align 8
  %quoted = alloca i8, align 1
  %orig = alloca i64, align 8
  %c = alloca i32, align 4
  %chp = alloca i8*, align 8
  store i64 %charpos, i64* %charpos.addr, align 8
  store i64 %bytepos, i64* %bytepos.addr, align 8
  %0 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i32 0, i32 77
  %1 = load i64, i64* %begv, align 8
  store i64 %1, i64* %beg, align 8
  store i8 0, i8* %quoted, align 1
  %2 = load i64, i64* %charpos.addr, align 8
  store i64 %2, i64* %orig, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.111, %entry
  %3 = load i64, i64* %charpos.addr, align 8
  %4 = load i64, i64* %beg, align 8
  %cmp = icmp sgt i64 %3, %4
  br i1 %cmp, label %while.body, label %while.end.113

while.body:                                       ; preds = %while.cond
  br label %do.body

do.body:                                          ; preds = %while.body
  %5 = load i64, i64* %charpos.addr, align 8
  %dec = add nsw i64 %5, -1
  store i64 %dec, i64* %charpos.addr, align 8
  %6 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %6, i32 0, i32 39
  %7 = load i64, i64* %enable_multibyte_characters_, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1 = icmp eq i64 %7, %call
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %do.body
  %8 = load i64, i64* %bytepos.addr, align 8
  %dec2 = add nsw i64 %8, -1
  store i64 %dec2, i64* %bytepos.addr, align 8
  br label %if.end.22

if.else:                                          ; preds = %do.body
  br label %do.body.3

do.body.3:                                        ; preds = %if.else
  %9 = load i64, i64* %bytepos.addr, align 8
  %dec4 = add nsw i64 %9, -1
  store i64 %dec4, i64* %bytepos.addr, align 8
  %10 = load i64, i64* %bytepos.addr, align 8
  %11 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %11, i32 0, i32 73
  %12 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %12, i32 0, i32 3
  %13 = load i64, i64* %gpt_byte, align 8
  %cmp5 = icmp slt i64 %10, %13
  br i1 %cmp5, label %if.then.6, label %if.else.10

if.then.6:                                        ; preds = %do.body.3
  %14 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text7 = getelementptr inbounds %struct.buffer, %struct.buffer* %14, i32 0, i32 73
  %15 = load %struct.buffer_text*, %struct.buffer_text** %text7, align 8
  %beg8 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %15, i32 0, i32 0
  %16 = load i8*, i8** %beg8, align 8
  %17 = load i64, i64* %bytepos.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %16, i64 %17
  %add.ptr9 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  store i8* %add.ptr9, i8** %chp, align 8
  br label %if.end

if.else.10:                                       ; preds = %do.body.3
  %18 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text11 = getelementptr inbounds %struct.buffer, %struct.buffer* %18, i32 0, i32 73
  %19 = load %struct.buffer_text*, %struct.buffer_text** %text11, align 8
  %beg12 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %19, i32 0, i32 0
  %20 = load i8*, i8** %beg12, align 8
  %21 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text13 = getelementptr inbounds %struct.buffer, %struct.buffer* %21, i32 0, i32 73
  %22 = load %struct.buffer_text*, %struct.buffer_text** %text13, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %22, i32 0, i32 5
  %23 = load i64, i64* %gap_size, align 8
  %add.ptr14 = getelementptr inbounds i8, i8* %20, i64 %23
  %24 = load i64, i64* %bytepos.addr, align 8
  %add.ptr15 = getelementptr inbounds i8, i8* %add.ptr14, i64 %24
  %add.ptr16 = getelementptr inbounds i8, i8* %add.ptr15, i64 -1
  store i8* %add.ptr16, i8** %chp, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.10, %if.then.6
  br label %while.cond.17

while.cond.17:                                    ; preds = %while.body.20, %if.end
  %25 = load i8*, i8** %chp, align 8
  %26 = load i8, i8* %25, align 1
  %conv = zext i8 %26 to i32
  %and = and i32 %conv, 192
  %cmp18 = icmp ne i32 %and, 128
  %lnot = xor i1 %cmp18, true
  br i1 %lnot, label %while.body.20, label %while.end

while.body.20:                                    ; preds = %while.cond.17
  %27 = load i8*, i8** %chp, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %27, i32 -1
  store i8* %incdec.ptr, i8** %chp, align 8
  %28 = load i64, i64* %bytepos.addr, align 8
  %dec21 = add nsw i64 %28, -1
  store i64 %dec21, i64* %bytepos.addr, align 8
  br label %while.cond.17

while.end:                                        ; preds = %while.cond.17
  br label %do.end

do.end:                                           ; preds = %while.end
  br label %if.end.22

if.end.22:                                        ; preds = %do.end, %if.then
  br label %do.end.23

do.end.23:                                        ; preds = %if.end.22
  %29 = load i64, i64* %charpos.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_BACKWARD(i64 %29)
  %30 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_24 = getelementptr inbounds %struct.buffer, %struct.buffer* %30, i32 0, i32 39
  %31 = load i64, i64* %enable_multibyte_characters_24, align 8
  %call25 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp26 = icmp eq i64 %31, %call25
  br i1 %cmp26, label %cond.false, label %cond.true

cond.true:                                        ; preds = %do.end.23
  %32 = load i64, i64* %bytepos.addr, align 8
  %call28 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %32)
  br label %cond.end.103

cond.false:                                       ; preds = %do.end.23
  br i1 true, label %cond.true.29, label %cond.false.46

cond.true.29:                                     ; preds = %cond.false
  %33 = load i64, i64* %bytepos.addr, align 8
  %34 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text30 = getelementptr inbounds %struct.buffer, %struct.buffer* %34, i32 0, i32 73
  %35 = load %struct.buffer_text*, %struct.buffer_text** %text30, align 8
  %gpt_byte31 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %35, i32 0, i32 3
  %36 = load i64, i64* %gpt_byte31, align 8
  %cmp32 = icmp sge i64 %33, %36
  br i1 %cmp32, label %cond.true.34, label %cond.false.37

cond.true.34:                                     ; preds = %cond.true.29
  %37 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text35 = getelementptr inbounds %struct.buffer, %struct.buffer* %37, i32 0, i32 73
  %38 = load %struct.buffer_text*, %struct.buffer_text** %text35, align 8
  %gap_size36 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %38, i32 0, i32 5
  %39 = load i64, i64* %gap_size36, align 8
  br label %cond.end

cond.false.37:                                    ; preds = %cond.true.29
  br label %cond.end

cond.end:                                         ; preds = %cond.false.37, %cond.true.34
  %cond = phi i64 [ %39, %cond.true.34 ], [ 0, %cond.false.37 ]
  %40 = load i64, i64* %bytepos.addr, align 8
  %add = add nsw i64 %cond, %40
  %41 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text38 = getelementptr inbounds %struct.buffer, %struct.buffer* %41, i32 0, i32 73
  %42 = load %struct.buffer_text*, %struct.buffer_text** %text38, align 8
  %beg39 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %42, i32 0, i32 0
  %43 = load i8*, i8** %beg39, align 8
  %add.ptr40 = getelementptr inbounds i8, i8* %43, i64 %add
  %add.ptr41 = getelementptr inbounds i8, i8* %add.ptr40, i64 -1
  %44 = load i8, i8* %add.ptr41, align 1
  %conv42 = zext i8 %44 to i32
  %add43 = add i32 %conv42, 0
  %cmp44 = icmp ult i32 %add43, 128
  br i1 %cmp44, label %cond.true.66, label %cond.false.83

cond.false.46:                                    ; preds = %cond.false
  %45 = load i64, i64* %bytepos.addr, align 8
  %46 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text47 = getelementptr inbounds %struct.buffer, %struct.buffer* %46, i32 0, i32 73
  %47 = load %struct.buffer_text*, %struct.buffer_text** %text47, align 8
  %gpt_byte48 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %47, i32 0, i32 3
  %48 = load i64, i64* %gpt_byte48, align 8
  %cmp49 = icmp sge i64 %45, %48
  br i1 %cmp49, label %cond.true.51, label %cond.false.54

cond.true.51:                                     ; preds = %cond.false.46
  %49 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text52 = getelementptr inbounds %struct.buffer, %struct.buffer* %49, i32 0, i32 73
  %50 = load %struct.buffer_text*, %struct.buffer_text** %text52, align 8
  %gap_size53 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %50, i32 0, i32 5
  %51 = load i64, i64* %gap_size53, align 8
  br label %cond.end.55

cond.false.54:                                    ; preds = %cond.false.46
  br label %cond.end.55

cond.end.55:                                      ; preds = %cond.false.54, %cond.true.51
  %cond56 = phi i64 [ %51, %cond.true.51 ], [ 0, %cond.false.54 ]
  %52 = load i64, i64* %bytepos.addr, align 8
  %add57 = add nsw i64 %cond56, %52
  %53 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text58 = getelementptr inbounds %struct.buffer, %struct.buffer* %53, i32 0, i32 73
  %54 = load %struct.buffer_text*, %struct.buffer_text** %text58, align 8
  %beg59 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %54, i32 0, i32 0
  %55 = load i8*, i8** %beg59, align 8
  %add.ptr60 = getelementptr inbounds i8, i8* %55, i64 %add57
  %add.ptr61 = getelementptr inbounds i8, i8* %add.ptr60, i64 -1
  %56 = load i8, i8* %add.ptr61, align 1
  %conv62 = zext i8 %56 to i64
  %add63 = add i64 %conv62, 0
  %cmp64 = icmp ult i64 %add63, 128
  br i1 %cmp64, label %cond.true.66, label %cond.false.83

cond.true.66:                                     ; preds = %cond.end.55, %cond.end
  %57 = load i64, i64* %bytepos.addr, align 8
  %58 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text67 = getelementptr inbounds %struct.buffer, %struct.buffer* %58, i32 0, i32 73
  %59 = load %struct.buffer_text*, %struct.buffer_text** %text67, align 8
  %gpt_byte68 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %59, i32 0, i32 3
  %60 = load i64, i64* %gpt_byte68, align 8
  %cmp69 = icmp sge i64 %57, %60
  br i1 %cmp69, label %cond.true.71, label %cond.false.74

cond.true.71:                                     ; preds = %cond.true.66
  %61 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text72 = getelementptr inbounds %struct.buffer, %struct.buffer* %61, i32 0, i32 73
  %62 = load %struct.buffer_text*, %struct.buffer_text** %text72, align 8
  %gap_size73 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %62, i32 0, i32 5
  %63 = load i64, i64* %gap_size73, align 8
  br label %cond.end.75

cond.false.74:                                    ; preds = %cond.true.66
  br label %cond.end.75

cond.end.75:                                      ; preds = %cond.false.74, %cond.true.71
  %cond76 = phi i64 [ %63, %cond.true.71 ], [ 0, %cond.false.74 ]
  %64 = load i64, i64* %bytepos.addr, align 8
  %add77 = add nsw i64 %cond76, %64
  %65 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text78 = getelementptr inbounds %struct.buffer, %struct.buffer* %65, i32 0, i32 73
  %66 = load %struct.buffer_text*, %struct.buffer_text** %text78, align 8
  %beg79 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %66, i32 0, i32 0
  %67 = load i8*, i8** %beg79, align 8
  %add.ptr80 = getelementptr inbounds i8, i8* %67, i64 %add77
  %add.ptr81 = getelementptr inbounds i8, i8* %add.ptr80, i64 -1
  %68 = load i8, i8* %add.ptr81, align 1
  %conv82 = zext i8 %68 to i32
  br label %cond.end.101

cond.false.83:                                    ; preds = %cond.end.55, %cond.end
  %69 = load i64, i64* %bytepos.addr, align 8
  %70 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text84 = getelementptr inbounds %struct.buffer, %struct.buffer* %70, i32 0, i32 73
  %71 = load %struct.buffer_text*, %struct.buffer_text** %text84, align 8
  %gpt_byte85 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %71, i32 0, i32 3
  %72 = load i64, i64* %gpt_byte85, align 8
  %cmp86 = icmp sge i64 %69, %72
  br i1 %cmp86, label %cond.true.88, label %cond.false.91

cond.true.88:                                     ; preds = %cond.false.83
  %73 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text89 = getelementptr inbounds %struct.buffer, %struct.buffer* %73, i32 0, i32 73
  %74 = load %struct.buffer_text*, %struct.buffer_text** %text89, align 8
  %gap_size90 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %74, i32 0, i32 5
  %75 = load i64, i64* %gap_size90, align 8
  br label %cond.end.92

cond.false.91:                                    ; preds = %cond.false.83
  br label %cond.end.92

cond.end.92:                                      ; preds = %cond.false.91, %cond.true.88
  %cond93 = phi i64 [ %75, %cond.true.88 ], [ 0, %cond.false.91 ]
  %76 = load i64, i64* %bytepos.addr, align 8
  %add94 = add nsw i64 %cond93, %76
  %77 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text95 = getelementptr inbounds %struct.buffer, %struct.buffer* %77, i32 0, i32 73
  %78 = load %struct.buffer_text*, %struct.buffer_text** %text95, align 8
  %beg96 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %78, i32 0, i32 0
  %79 = load i8*, i8** %beg96, align 8
  %add.ptr97 = getelementptr inbounds i8, i8* %79, i64 %add94
  %add.ptr98 = getelementptr inbounds i8, i8* %add.ptr97, i64 -1
  %80 = load i8, i8* %add.ptr98, align 1
  %conv99 = zext i8 %80 to i32
  %add100 = add nsw i32 %conv99, 4194048
  br label %cond.end.101

cond.end.101:                                     ; preds = %cond.end.92, %cond.end.75
  %cond102 = phi i32 [ %conv82, %cond.end.75 ], [ %add100, %cond.end.92 ]
  br label %cond.end.103

cond.end.103:                                     ; preds = %cond.end.101, %cond.true
  %cond104 = phi i32 [ %call28, %cond.true ], [ %cond102, %cond.end.101 ]
  store i32 %cond104, i32* %c, align 4
  %81 = load i32, i32* %c, align 4
  %call105 = call i32 @syntax_property(i32 %81, i1 zeroext true)
  store i32 %call105, i32* %code, align 4
  %82 = load i32, i32* %code, align 4
  %cmp106 = icmp eq i32 %82, 10
  br i1 %cmp106, label %if.end.111, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end.103
  %83 = load i32, i32* %code, align 4
  %cmp108 = icmp eq i32 %83, 9
  br i1 %cmp108, label %if.end.111, label %if.then.110

if.then.110:                                      ; preds = %lor.lhs.false
  br label %while.end.113

if.end.111:                                       ; preds = %lor.lhs.false, %cond.end.103
  %84 = load i8, i8* %quoted, align 1
  %tobool = trunc i8 %84 to i1
  %lnot112 = xor i1 %tobool, true
  %frombool = zext i1 %lnot112 to i8
  store i8 %frombool, i8* %quoted, align 1
  br label %while.cond

while.end.113:                                    ; preds = %if.then.110, %while.cond
  %85 = load i64, i64* %orig, align 8
  call void @UPDATE_SYNTAX_TABLE(i64 %85)
  %86 = load i8, i8* %quoted, align 1
  %tobool114 = trunc i8 %86 to i1
  ret i1 %tobool114
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @prev_char_comend_first(i64 %pos, i64 %pos_byte) #0 {
entry:
  %pos.addr = alloca i64, align 8
  %pos_byte.addr = alloca i64, align 8
  %c = alloca i32, align 4
  %val = alloca i8, align 1
  %chp = alloca i8*, align 8
  store i64 %pos, i64* %pos.addr, align 8
  store i64 %pos_byte, i64* %pos_byte.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i64, i64* %pos.addr, align 8
  %dec = add nsw i64 %0, -1
  store i64 %dec, i64* %pos.addr, align 8
  %1 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 39
  %2 = load i64, i64* %enable_multibyte_characters_, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %2, %call
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.body
  %3 = load i64, i64* %pos_byte.addr, align 8
  %dec1 = add nsw i64 %3, -1
  store i64 %dec1, i64* %pos_byte.addr, align 8
  br label %if.end.18

if.else:                                          ; preds = %do.body
  br label %do.body.2

do.body.2:                                        ; preds = %if.else
  %4 = load i64, i64* %pos_byte.addr, align 8
  %dec3 = add nsw i64 %4, -1
  store i64 %dec3, i64* %pos_byte.addr, align 8
  %5 = load i64, i64* %pos_byte.addr, align 8
  %6 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %6, i32 0, i32 73
  %7 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %7, i32 0, i32 3
  %8 = load i64, i64* %gpt_byte, align 8
  %cmp4 = icmp slt i64 %5, %8
  br i1 %cmp4, label %if.then.5, label %if.else.8

if.then.5:                                        ; preds = %do.body.2
  %9 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text6 = getelementptr inbounds %struct.buffer, %struct.buffer* %9, i32 0, i32 73
  %10 = load %struct.buffer_text*, %struct.buffer_text** %text6, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %10, i32 0, i32 0
  %11 = load i8*, i8** %beg, align 8
  %12 = load i64, i64* %pos_byte.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 %12
  %add.ptr7 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  store i8* %add.ptr7, i8** %chp, align 8
  br label %if.end

if.else.8:                                        ; preds = %do.body.2
  %13 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text9 = getelementptr inbounds %struct.buffer, %struct.buffer* %13, i32 0, i32 73
  %14 = load %struct.buffer_text*, %struct.buffer_text** %text9, align 8
  %beg10 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %14, i32 0, i32 0
  %15 = load i8*, i8** %beg10, align 8
  %16 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text11 = getelementptr inbounds %struct.buffer, %struct.buffer* %16, i32 0, i32 73
  %17 = load %struct.buffer_text*, %struct.buffer_text** %text11, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %17, i32 0, i32 5
  %18 = load i64, i64* %gap_size, align 8
  %add.ptr12 = getelementptr inbounds i8, i8* %15, i64 %18
  %19 = load i64, i64* %pos_byte.addr, align 8
  %add.ptr13 = getelementptr inbounds i8, i8* %add.ptr12, i64 %19
  %add.ptr14 = getelementptr inbounds i8, i8* %add.ptr13, i64 -1
  store i8* %add.ptr14, i8** %chp, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.8, %if.then.5
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %20 = load i8*, i8** %chp, align 8
  %21 = load i8, i8* %20, align 1
  %conv = zext i8 %21 to i32
  %and = and i32 %conv, 192
  %cmp15 = icmp ne i32 %and, 128
  %lnot = xor i1 %cmp15, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %22 = load i8*, i8** %chp, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %22, i32 -1
  store i8* %incdec.ptr, i8** %chp, align 8
  %23 = load i64, i64* %pos_byte.addr, align 8
  %dec17 = add nsw i64 %23, -1
  store i64 %dec17, i64* %pos_byte.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %do.end

do.end:                                           ; preds = %while.end
  br label %if.end.18

if.end.18:                                        ; preds = %do.end, %if.then
  br label %do.end.19

do.end.19:                                        ; preds = %if.end.18
  %24 = load i64, i64* %pos.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_BACKWARD(i64 %24)
  %25 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_20 = getelementptr inbounds %struct.buffer, %struct.buffer* %25, i32 0, i32 39
  %26 = load i64, i64* %enable_multibyte_characters_20, align 8
  %call21 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp22 = icmp eq i64 %26, %call21
  br i1 %cmp22, label %cond.false, label %cond.true

cond.true:                                        ; preds = %do.end.19
  %27 = load i64, i64* %pos_byte.addr, align 8
  %call24 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %27)
  br label %cond.end.38

cond.false:                                       ; preds = %do.end.19
  %28 = load i64, i64* %pos_byte.addr, align 8
  %29 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text25 = getelementptr inbounds %struct.buffer, %struct.buffer* %29, i32 0, i32 73
  %30 = load %struct.buffer_text*, %struct.buffer_text** %text25, align 8
  %gpt_byte26 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %30, i32 0, i32 3
  %31 = load i64, i64* %gpt_byte26, align 8
  %cmp27 = icmp sge i64 %28, %31
  br i1 %cmp27, label %cond.true.29, label %cond.false.32

cond.true.29:                                     ; preds = %cond.false
  %32 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text30 = getelementptr inbounds %struct.buffer, %struct.buffer* %32, i32 0, i32 73
  %33 = load %struct.buffer_text*, %struct.buffer_text** %text30, align 8
  %gap_size31 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %33, i32 0, i32 5
  %34 = load i64, i64* %gap_size31, align 8
  br label %cond.end

cond.false.32:                                    ; preds = %cond.false
  br label %cond.end

cond.end:                                         ; preds = %cond.false.32, %cond.true.29
  %cond = phi i64 [ %34, %cond.true.29 ], [ 0, %cond.false.32 ]
  %35 = load i64, i64* %pos_byte.addr, align 8
  %add = add nsw i64 %cond, %35
  %36 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text33 = getelementptr inbounds %struct.buffer, %struct.buffer* %36, i32 0, i32 73
  %37 = load %struct.buffer_text*, %struct.buffer_text** %text33, align 8
  %beg34 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %37, i32 0, i32 0
  %38 = load i8*, i8** %beg34, align 8
  %add.ptr35 = getelementptr inbounds i8, i8* %38, i64 %add
  %add.ptr36 = getelementptr inbounds i8, i8* %add.ptr35, i64 -1
  %39 = load i8, i8* %add.ptr36, align 1
  %conv37 = zext i8 %39 to i32
  br label %cond.end.38

cond.end.38:                                      ; preds = %cond.end, %cond.true
  %cond39 = phi i32 [ %call24, %cond.true ], [ %conv37, %cond.end ]
  store i32 %cond39, i32* %c, align 4
  %40 = load i32, i32* %c, align 4
  %call40 = call zeroext i1 @SYNTAX_COMEND_FIRST(i32 %40)
  %frombool = zext i1 %call40 to i8
  store i8 %frombool, i8* %val, align 1
  %41 = load i64, i64* %pos.addr, align 8
  %add41 = add nsw i64 %41, 1
  call void @UPDATE_SYNTAX_TABLE_FORWARD(i64 %add41)
  %42 = load i8, i8* %val, align 1
  %tobool = trunc i8 %42 to i1
  ret i1 %tobool
}

; Function Attrs: nounwind uwtable
define internal i64 @dec_bytepos(i64 %bytepos) #0 {
entry:
  %retval = alloca i64, align 8
  %bytepos.addr = alloca i64, align 8
  %chp = alloca i8*, align 8
  store i64 %bytepos, i64* %bytepos.addr, align 8
  %0 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i32 0, i32 39
  %1 = load i64, i64* %enable_multibyte_characters_, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %bytepos.addr, align 8
  %sub = sub nsw i64 %2, 1
  store i64 %sub, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %3 = load i64, i64* %bytepos.addr, align 8
  %dec = add nsw i64 %3, -1
  store i64 %dec, i64* %bytepos.addr, align 8
  %4 = load i64, i64* %bytepos.addr, align 8
  %5 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %5, i32 0, i32 73
  %6 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %6, i32 0, i32 3
  %7 = load i64, i64* %gpt_byte, align 8
  %cmp1 = icmp slt i64 %4, %7
  br i1 %cmp1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %do.body
  %8 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text3 = getelementptr inbounds %struct.buffer, %struct.buffer* %8, i32 0, i32 73
  %9 = load %struct.buffer_text*, %struct.buffer_text** %text3, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %9, i32 0, i32 0
  %10 = load i8*, i8** %beg, align 8
  %11 = load i64, i64* %bytepos.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 %11
  %add.ptr4 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  store i8* %add.ptr4, i8** %chp, align 8
  br label %if.end.11

if.else:                                          ; preds = %do.body
  %12 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text5 = getelementptr inbounds %struct.buffer, %struct.buffer* %12, i32 0, i32 73
  %13 = load %struct.buffer_text*, %struct.buffer_text** %text5, align 8
  %beg6 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %13, i32 0, i32 0
  %14 = load i8*, i8** %beg6, align 8
  %15 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text7 = getelementptr inbounds %struct.buffer, %struct.buffer* %15, i32 0, i32 73
  %16 = load %struct.buffer_text*, %struct.buffer_text** %text7, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %16, i32 0, i32 5
  %17 = load i64, i64* %gap_size, align 8
  %add.ptr8 = getelementptr inbounds i8, i8* %14, i64 %17
  %18 = load i64, i64* %bytepos.addr, align 8
  %add.ptr9 = getelementptr inbounds i8, i8* %add.ptr8, i64 %18
  %add.ptr10 = getelementptr inbounds i8, i8* %add.ptr9, i64 -1
  store i8* %add.ptr10, i8** %chp, align 8
  br label %if.end.11

if.end.11:                                        ; preds = %if.else, %if.then.2
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end.11
  %19 = load i8*, i8** %chp, align 8
  %20 = load i8, i8* %19, align 1
  %conv = zext i8 %20 to i32
  %and = and i32 %conv, 192
  %cmp12 = icmp ne i32 %and, 128
  %lnot = xor i1 %cmp12, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %21 = load i8*, i8** %chp, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %21, i32 -1
  store i8* %incdec.ptr, i8** %chp, align 8
  %22 = load i64, i64* %bytepos.addr, align 8
  %dec14 = add nsw i64 %22, -1
  store i64 %dec14, i64* %bytepos.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %do.end

do.end:                                           ; preds = %while.end
  %23 = load i64, i64* %bytepos.addr, align 8
  store i64 %23, i64* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %24 = load i64, i64* %retval
  ret i64 %24
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @back_comment(i64 %from, i64 %from_byte, i64 %stop, i1 zeroext %comnested, i32 %comstyle, i64* %charpos_ptr, i64* %bytepos_ptr) #0 {
entry:
  %from.addr = alloca i64, align 8
  %from_byte.addr = alloca i64, align 8
  %stop.addr = alloca i64, align 8
  %comnested.addr = alloca i8, align 1
  %comstyle.addr = alloca i32, align 4
  %charpos_ptr.addr = alloca i64*, align 8
  %bytepos_ptr.addr = alloca i64*, align 8
  %string_style = alloca i32, align 4
  %string_lossage = alloca i8, align 1
  %comment_lossage = alloca i8, align 1
  %comment_end = alloca i64, align 8
  %comment_end_byte = alloca i64, align 8
  %comstart_pos = alloca i64, align 8
  %comstart_byte = alloca i64, align 8
  %defun_start = alloca i64, align 8
  %defun_start_byte = alloca i64, align 8
  %code = alloca i32, align 4
  %nesting = alloca i64, align 8
  %c = alloca i32, align 4
  %syntax = alloca i32, align 4
  %temp_byte = alloca i64, align 8
  %prev_syntax = alloca i32, align 4
  %com2start = alloca i8, align 1
  %com2end = alloca i8, align 1
  %comstart = alloca i8, align 1
  %chp = alloca i8*, align 8
  %next = alloca i64, align 8
  %next_byte = alloca i64, align 8
  %next_c = alloca i32, align 4
  %next_syntax = alloca i32, align 4
  %chp155 = alloca i8*, align 8
  %state = alloca %struct.lisp_parse_state, align 8
  %adjusted = alloca i8, align 1
  store i64 %from, i64* %from.addr, align 8
  store i64 %from_byte, i64* %from_byte.addr, align 8
  store i64 %stop, i64* %stop.addr, align 8
  %frombool = zext i1 %comnested to i8
  store i8 %frombool, i8* %comnested.addr, align 1
  store i32 %comstyle, i32* %comstyle.addr, align 4
  store i64* %charpos_ptr, i64** %charpos_ptr.addr, align 8
  store i64* %bytepos_ptr, i64** %bytepos_ptr.addr, align 8
  store i32 -1, i32* %string_style, align 4
  store i8 0, i8* %string_lossage, align 1
  store i8 0, i8* %comment_lossage, align 1
  %0 = load i64, i64* %from.addr, align 8
  store i64 %0, i64* %comment_end, align 8
  %1 = load i64, i64* %from_byte.addr, align 8
  store i64 %1, i64* %comment_end_byte, align 8
  store i64 0, i64* %comstart_pos, align 8
  store i64 0, i64* %defun_start, align 8
  store i64 0, i64* %defun_start_byte, align 8
  store i64 1, i64* %nesting, align 8
  store i32 0, i32* %syntax, align 4
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %if.then.343, %if.then.331, %entry
  %2 = load i64, i64* %from.addr, align 8
  %3 = load i64, i64* %stop.addr, align 8
  %cmp = icmp ne i64 %2, %3
  br i1 %cmp, label %while.body, label %while.end.449

while.body:                                       ; preds = %while.cond
  br label %do.body

do.body:                                          ; preds = %while.body
  %4 = load i64, i64* %from.addr, align 8
  %dec = add nsw i64 %4, -1
  store i64 %dec, i64* %from.addr, align 8
  %5 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %5, i32 0, i32 39
  %6 = load i64, i64* %enable_multibyte_characters_, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1 = icmp eq i64 %6, %call
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %do.body
  %7 = load i64, i64* %from_byte.addr, align 8
  %dec2 = add nsw i64 %7, -1
  store i64 %dec2, i64* %from_byte.addr, align 8
  br label %if.end.21

if.else:                                          ; preds = %do.body
  br label %do.body.3

do.body.3:                                        ; preds = %if.else
  %8 = load i64, i64* %from_byte.addr, align 8
  %dec4 = add nsw i64 %8, -1
  store i64 %dec4, i64* %from_byte.addr, align 8
  %9 = load i64, i64* %from_byte.addr, align 8
  %10 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %10, i32 0, i32 73
  %11 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %11, i32 0, i32 3
  %12 = load i64, i64* %gpt_byte, align 8
  %cmp5 = icmp slt i64 %9, %12
  br i1 %cmp5, label %if.then.6, label %if.else.9

if.then.6:                                        ; preds = %do.body.3
  %13 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text7 = getelementptr inbounds %struct.buffer, %struct.buffer* %13, i32 0, i32 73
  %14 = load %struct.buffer_text*, %struct.buffer_text** %text7, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %14, i32 0, i32 0
  %15 = load i8*, i8** %beg, align 8
  %16 = load i64, i64* %from_byte.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %15, i64 %16
  %add.ptr8 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  store i8* %add.ptr8, i8** %chp, align 8
  br label %if.end

if.else.9:                                        ; preds = %do.body.3
  %17 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text10 = getelementptr inbounds %struct.buffer, %struct.buffer* %17, i32 0, i32 73
  %18 = load %struct.buffer_text*, %struct.buffer_text** %text10, align 8
  %beg11 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %18, i32 0, i32 0
  %19 = load i8*, i8** %beg11, align 8
  %20 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text12 = getelementptr inbounds %struct.buffer, %struct.buffer* %20, i32 0, i32 73
  %21 = load %struct.buffer_text*, %struct.buffer_text** %text12, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %21, i32 0, i32 5
  %22 = load i64, i64* %gap_size, align 8
  %add.ptr13 = getelementptr inbounds i8, i8* %19, i64 %22
  %23 = load i64, i64* %from_byte.addr, align 8
  %add.ptr14 = getelementptr inbounds i8, i8* %add.ptr13, i64 %23
  %add.ptr15 = getelementptr inbounds i8, i8* %add.ptr14, i64 -1
  store i8* %add.ptr15, i8** %chp, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.9, %if.then.6
  br label %while.cond.16

while.cond.16:                                    ; preds = %while.body.19, %if.end
  %24 = load i8*, i8** %chp, align 8
  %25 = load i8, i8* %24, align 1
  %conv = zext i8 %25 to i32
  %and = and i32 %conv, 192
  %cmp17 = icmp ne i32 %and, 128
  %lnot = xor i1 %cmp17, true
  br i1 %lnot, label %while.body.19, label %while.end

while.body.19:                                    ; preds = %while.cond.16
  %26 = load i8*, i8** %chp, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %26, i32 -1
  store i8* %incdec.ptr, i8** %chp, align 8
  %27 = load i64, i64* %from_byte.addr, align 8
  %dec20 = add nsw i64 %27, -1
  store i64 %dec20, i64* %from_byte.addr, align 8
  br label %while.cond.16

while.end:                                        ; preds = %while.cond.16
  br label %do.end

do.end:                                           ; preds = %while.end
  br label %if.end.21

if.end.21:                                        ; preds = %do.end, %if.then
  br label %do.end.22

do.end.22:                                        ; preds = %if.end.21
  %28 = load i64, i64* %from.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_BACKWARD(i64 %28)
  %29 = load i32, i32* %syntax, align 4
  store i32 %29, i32* %prev_syntax, align 4
  %30 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_23 = getelementptr inbounds %struct.buffer, %struct.buffer* %30, i32 0, i32 39
  %31 = load i64, i64* %enable_multibyte_characters_23, align 8
  %call24 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp25 = icmp eq i64 %31, %call24
  br i1 %cmp25, label %cond.false, label %cond.true

cond.true:                                        ; preds = %do.end.22
  %32 = load i64, i64* %from_byte.addr, align 8
  %call27 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %32)
  br label %cond.end.102

cond.false:                                       ; preds = %do.end.22
  br i1 true, label %cond.true.28, label %cond.false.45

cond.true.28:                                     ; preds = %cond.false
  %33 = load i64, i64* %from_byte.addr, align 8
  %34 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text29 = getelementptr inbounds %struct.buffer, %struct.buffer* %34, i32 0, i32 73
  %35 = load %struct.buffer_text*, %struct.buffer_text** %text29, align 8
  %gpt_byte30 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %35, i32 0, i32 3
  %36 = load i64, i64* %gpt_byte30, align 8
  %cmp31 = icmp sge i64 %33, %36
  br i1 %cmp31, label %cond.true.33, label %cond.false.36

cond.true.33:                                     ; preds = %cond.true.28
  %37 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text34 = getelementptr inbounds %struct.buffer, %struct.buffer* %37, i32 0, i32 73
  %38 = load %struct.buffer_text*, %struct.buffer_text** %text34, align 8
  %gap_size35 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %38, i32 0, i32 5
  %39 = load i64, i64* %gap_size35, align 8
  br label %cond.end

cond.false.36:                                    ; preds = %cond.true.28
  br label %cond.end

cond.end:                                         ; preds = %cond.false.36, %cond.true.33
  %cond = phi i64 [ %39, %cond.true.33 ], [ 0, %cond.false.36 ]
  %40 = load i64, i64* %from_byte.addr, align 8
  %add = add nsw i64 %cond, %40
  %41 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text37 = getelementptr inbounds %struct.buffer, %struct.buffer* %41, i32 0, i32 73
  %42 = load %struct.buffer_text*, %struct.buffer_text** %text37, align 8
  %beg38 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %42, i32 0, i32 0
  %43 = load i8*, i8** %beg38, align 8
  %add.ptr39 = getelementptr inbounds i8, i8* %43, i64 %add
  %add.ptr40 = getelementptr inbounds i8, i8* %add.ptr39, i64 -1
  %44 = load i8, i8* %add.ptr40, align 1
  %conv41 = zext i8 %44 to i32
  %add42 = add i32 %conv41, 0
  %cmp43 = icmp ult i32 %add42, 128
  br i1 %cmp43, label %cond.true.65, label %cond.false.82

cond.false.45:                                    ; preds = %cond.false
  %45 = load i64, i64* %from_byte.addr, align 8
  %46 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text46 = getelementptr inbounds %struct.buffer, %struct.buffer* %46, i32 0, i32 73
  %47 = load %struct.buffer_text*, %struct.buffer_text** %text46, align 8
  %gpt_byte47 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %47, i32 0, i32 3
  %48 = load i64, i64* %gpt_byte47, align 8
  %cmp48 = icmp sge i64 %45, %48
  br i1 %cmp48, label %cond.true.50, label %cond.false.53

cond.true.50:                                     ; preds = %cond.false.45
  %49 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text51 = getelementptr inbounds %struct.buffer, %struct.buffer* %49, i32 0, i32 73
  %50 = load %struct.buffer_text*, %struct.buffer_text** %text51, align 8
  %gap_size52 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %50, i32 0, i32 5
  %51 = load i64, i64* %gap_size52, align 8
  br label %cond.end.54

cond.false.53:                                    ; preds = %cond.false.45
  br label %cond.end.54

cond.end.54:                                      ; preds = %cond.false.53, %cond.true.50
  %cond55 = phi i64 [ %51, %cond.true.50 ], [ 0, %cond.false.53 ]
  %52 = load i64, i64* %from_byte.addr, align 8
  %add56 = add nsw i64 %cond55, %52
  %53 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text57 = getelementptr inbounds %struct.buffer, %struct.buffer* %53, i32 0, i32 73
  %54 = load %struct.buffer_text*, %struct.buffer_text** %text57, align 8
  %beg58 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %54, i32 0, i32 0
  %55 = load i8*, i8** %beg58, align 8
  %add.ptr59 = getelementptr inbounds i8, i8* %55, i64 %add56
  %add.ptr60 = getelementptr inbounds i8, i8* %add.ptr59, i64 -1
  %56 = load i8, i8* %add.ptr60, align 1
  %conv61 = zext i8 %56 to i64
  %add62 = add i64 %conv61, 0
  %cmp63 = icmp ult i64 %add62, 128
  br i1 %cmp63, label %cond.true.65, label %cond.false.82

cond.true.65:                                     ; preds = %cond.end.54, %cond.end
  %57 = load i64, i64* %from_byte.addr, align 8
  %58 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text66 = getelementptr inbounds %struct.buffer, %struct.buffer* %58, i32 0, i32 73
  %59 = load %struct.buffer_text*, %struct.buffer_text** %text66, align 8
  %gpt_byte67 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %59, i32 0, i32 3
  %60 = load i64, i64* %gpt_byte67, align 8
  %cmp68 = icmp sge i64 %57, %60
  br i1 %cmp68, label %cond.true.70, label %cond.false.73

cond.true.70:                                     ; preds = %cond.true.65
  %61 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text71 = getelementptr inbounds %struct.buffer, %struct.buffer* %61, i32 0, i32 73
  %62 = load %struct.buffer_text*, %struct.buffer_text** %text71, align 8
  %gap_size72 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %62, i32 0, i32 5
  %63 = load i64, i64* %gap_size72, align 8
  br label %cond.end.74

cond.false.73:                                    ; preds = %cond.true.65
  br label %cond.end.74

cond.end.74:                                      ; preds = %cond.false.73, %cond.true.70
  %cond75 = phi i64 [ %63, %cond.true.70 ], [ 0, %cond.false.73 ]
  %64 = load i64, i64* %from_byte.addr, align 8
  %add76 = add nsw i64 %cond75, %64
  %65 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text77 = getelementptr inbounds %struct.buffer, %struct.buffer* %65, i32 0, i32 73
  %66 = load %struct.buffer_text*, %struct.buffer_text** %text77, align 8
  %beg78 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %66, i32 0, i32 0
  %67 = load i8*, i8** %beg78, align 8
  %add.ptr79 = getelementptr inbounds i8, i8* %67, i64 %add76
  %add.ptr80 = getelementptr inbounds i8, i8* %add.ptr79, i64 -1
  %68 = load i8, i8* %add.ptr80, align 1
  %conv81 = zext i8 %68 to i32
  br label %cond.end.100

cond.false.82:                                    ; preds = %cond.end.54, %cond.end
  %69 = load i64, i64* %from_byte.addr, align 8
  %70 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text83 = getelementptr inbounds %struct.buffer, %struct.buffer* %70, i32 0, i32 73
  %71 = load %struct.buffer_text*, %struct.buffer_text** %text83, align 8
  %gpt_byte84 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %71, i32 0, i32 3
  %72 = load i64, i64* %gpt_byte84, align 8
  %cmp85 = icmp sge i64 %69, %72
  br i1 %cmp85, label %cond.true.87, label %cond.false.90

cond.true.87:                                     ; preds = %cond.false.82
  %73 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text88 = getelementptr inbounds %struct.buffer, %struct.buffer* %73, i32 0, i32 73
  %74 = load %struct.buffer_text*, %struct.buffer_text** %text88, align 8
  %gap_size89 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %74, i32 0, i32 5
  %75 = load i64, i64* %gap_size89, align 8
  br label %cond.end.91

cond.false.90:                                    ; preds = %cond.false.82
  br label %cond.end.91

cond.end.91:                                      ; preds = %cond.false.90, %cond.true.87
  %cond92 = phi i64 [ %75, %cond.true.87 ], [ 0, %cond.false.90 ]
  %76 = load i64, i64* %from_byte.addr, align 8
  %add93 = add nsw i64 %cond92, %76
  %77 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text94 = getelementptr inbounds %struct.buffer, %struct.buffer* %77, i32 0, i32 73
  %78 = load %struct.buffer_text*, %struct.buffer_text** %text94, align 8
  %beg95 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %78, i32 0, i32 0
  %79 = load i8*, i8** %beg95, align 8
  %add.ptr96 = getelementptr inbounds i8, i8* %79, i64 %add93
  %add.ptr97 = getelementptr inbounds i8, i8* %add.ptr96, i64 -1
  %80 = load i8, i8* %add.ptr97, align 1
  %conv98 = zext i8 %80 to i32
  %add99 = add nsw i32 %conv98, 4194048
  br label %cond.end.100

cond.end.100:                                     ; preds = %cond.end.91, %cond.end.74
  %cond101 = phi i32 [ %conv81, %cond.end.74 ], [ %add99, %cond.end.91 ]
  br label %cond.end.102

cond.end.102:                                     ; preds = %cond.end.100, %cond.true
  %cond103 = phi i32 [ %call27, %cond.true ], [ %cond101, %cond.end.100 ]
  store i32 %cond103, i32* %c, align 4
  %81 = load i32, i32* %c, align 4
  %call104 = call i32 @syntax_property_with_flags(i32 %81, i1 zeroext true)
  store i32 %call104, i32* %syntax, align 4
  %82 = load i32, i32* %c, align 4
  %call105 = call i32 @syntax_property(i32 %82, i1 zeroext true)
  store i32 %call105, i32* %code, align 4
  %83 = load i32, i32* %syntax, align 4
  %call106 = call zeroext i1 @SYNTAX_FLAGS_COMSTART_FIRST(i32 %83)
  br i1 %call106, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %cond.end.102
  %84 = load i32, i32* %prev_syntax, align 4
  %call108 = call zeroext i1 @SYNTAX_FLAGS_COMSTART_SECOND(i32 %84)
  br i1 %call108, label %land.lhs.true.110, label %land.end

land.lhs.true.110:                                ; preds = %land.lhs.true
  %85 = load i32, i32* %comstyle.addr, align 4
  %86 = load i32, i32* %prev_syntax, align 4
  %87 = load i32, i32* %syntax, align 4
  %call111 = call i32 @SYNTAX_FLAGS_COMMENT_STYLE(i32 %86, i32 %87)
  %cmp112 = icmp eq i32 %85, %call111
  br i1 %cmp112, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true.110
  %88 = load i32, i32* %prev_syntax, align 4
  %call114 = call zeroext i1 @SYNTAX_FLAGS_COMMENT_NESTED(i32 %88)
  br i1 %call114, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %89 = load i32, i32* %syntax, align 4
  %call116 = call zeroext i1 @SYNTAX_FLAGS_COMMENT_NESTED(i32 %89)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %90 = phi i1 [ true, %land.rhs ], [ %call116, %lor.rhs ]
  %lor.ext = zext i1 %90 to i32
  %91 = load i8, i8* %comnested.addr, align 1
  %tobool = trunc i8 %91 to i1
  %conv118 = zext i1 %tobool to i32
  %cmp119 = icmp eq i32 %lor.ext, %conv118
  br label %land.end

land.end:                                         ; preds = %lor.end, %land.lhs.true.110, %land.lhs.true, %cond.end.102
  %92 = phi i1 [ false, %land.lhs.true.110 ], [ false, %land.lhs.true ], [ false, %cond.end.102 ], [ %cmp119, %lor.end ]
  %frombool121 = zext i1 %92 to i8
  store i8 %frombool121, i8* %com2start, align 1
  %93 = load i32, i32* %syntax, align 4
  %call122 = call zeroext i1 @SYNTAX_FLAGS_COMEND_FIRST(i32 %93)
  br i1 %call122, label %land.rhs.124, label %land.end.127

land.rhs.124:                                     ; preds = %land.end
  %94 = load i32, i32* %prev_syntax, align 4
  %call125 = call zeroext i1 @SYNTAX_FLAGS_COMEND_SECOND(i32 %94)
  br label %land.end.127

land.end.127:                                     ; preds = %land.rhs.124, %land.end
  %95 = phi i1 [ false, %land.end ], [ %call125, %land.rhs.124 ]
  %frombool128 = zext i1 %95 to i8
  store i8 %frombool128, i8* %com2end, align 1
  %96 = load i8, i8* %com2start, align 1
  %tobool129 = trunc i8 %96 to i1
  br i1 %tobool129, label %lor.end.134, label %lor.rhs.131

lor.rhs.131:                                      ; preds = %land.end.127
  %97 = load i32, i32* %code, align 4
  %cmp132 = icmp eq i32 %97, 11
  br label %lor.end.134

lor.end.134:                                      ; preds = %lor.rhs.131, %land.end.127
  %98 = phi i1 [ true, %land.end.127 ], [ %cmp132, %lor.rhs.131 ]
  %frombool136 = zext i1 %98 to i8
  store i8 %frombool136, i8* %comstart, align 1
  %99 = load i64, i64* %from.addr, align 8
  %100 = load i64, i64* %stop.addr, align 8
  %cmp137 = icmp sgt i64 %99, %100
  br i1 %cmp137, label %land.lhs.true.139, label %if.end.304

land.lhs.true.139:                                ; preds = %lor.end.134
  %101 = load i8, i8* %com2end, align 1
  %tobool140 = trunc i8 %101 to i1
  br i1 %tobool140, label %if.then.144, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.139
  %102 = load i8, i8* %comstart, align 1
  %tobool142 = trunc i8 %102 to i1
  br i1 %tobool142, label %if.then.144, label %if.end.304

if.then.144:                                      ; preds = %lor.lhs.false, %land.lhs.true.139
  %103 = load i64, i64* %from.addr, align 8
  store i64 %103, i64* %next, align 8
  %104 = load i64, i64* %from_byte.addr, align 8
  store i64 %104, i64* %next_byte, align 8
  br label %do.body.145

do.body.145:                                      ; preds = %if.then.144
  %105 = load i64, i64* %next, align 8
  %dec146 = add nsw i64 %105, -1
  store i64 %dec146, i64* %next, align 8
  %106 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_147 = getelementptr inbounds %struct.buffer, %struct.buffer* %106, i32 0, i32 39
  %107 = load i64, i64* %enable_multibyte_characters_147, align 8
  %call148 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp149 = icmp eq i64 %107, %call148
  br i1 %cmp149, label %if.then.151, label %if.else.153

if.then.151:                                      ; preds = %do.body.145
  %108 = load i64, i64* %next_byte, align 8
  %dec152 = add nsw i64 %108, -1
  store i64 %dec152, i64* %next_byte, align 8
  br label %if.end.186

if.else.153:                                      ; preds = %do.body.145
  br label %do.body.154

do.body.154:                                      ; preds = %if.else.153
  %109 = load i64, i64* %next_byte, align 8
  %dec156 = add nsw i64 %109, -1
  store i64 %dec156, i64* %next_byte, align 8
  %110 = load i64, i64* %next_byte, align 8
  %111 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text157 = getelementptr inbounds %struct.buffer, %struct.buffer* %111, i32 0, i32 73
  %112 = load %struct.buffer_text*, %struct.buffer_text** %text157, align 8
  %gpt_byte158 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %112, i32 0, i32 3
  %113 = load i64, i64* %gpt_byte158, align 8
  %cmp159 = icmp slt i64 %110, %113
  br i1 %cmp159, label %if.then.161, label %if.else.166

if.then.161:                                      ; preds = %do.body.154
  %114 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text162 = getelementptr inbounds %struct.buffer, %struct.buffer* %114, i32 0, i32 73
  %115 = load %struct.buffer_text*, %struct.buffer_text** %text162, align 8
  %beg163 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %115, i32 0, i32 0
  %116 = load i8*, i8** %beg163, align 8
  %117 = load i64, i64* %next_byte, align 8
  %add.ptr164 = getelementptr inbounds i8, i8* %116, i64 %117
  %add.ptr165 = getelementptr inbounds i8, i8* %add.ptr164, i64 -1
  store i8* %add.ptr165, i8** %chp155, align 8
  br label %if.end.174

if.else.166:                                      ; preds = %do.body.154
  %118 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text167 = getelementptr inbounds %struct.buffer, %struct.buffer* %118, i32 0, i32 73
  %119 = load %struct.buffer_text*, %struct.buffer_text** %text167, align 8
  %beg168 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %119, i32 0, i32 0
  %120 = load i8*, i8** %beg168, align 8
  %121 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text169 = getelementptr inbounds %struct.buffer, %struct.buffer* %121, i32 0, i32 73
  %122 = load %struct.buffer_text*, %struct.buffer_text** %text169, align 8
  %gap_size170 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %122, i32 0, i32 5
  %123 = load i64, i64* %gap_size170, align 8
  %add.ptr171 = getelementptr inbounds i8, i8* %120, i64 %123
  %124 = load i64, i64* %next_byte, align 8
  %add.ptr172 = getelementptr inbounds i8, i8* %add.ptr171, i64 %124
  %add.ptr173 = getelementptr inbounds i8, i8* %add.ptr172, i64 -1
  store i8* %add.ptr173, i8** %chp155, align 8
  br label %if.end.174

if.end.174:                                       ; preds = %if.else.166, %if.then.161
  br label %while.cond.175

while.cond.175:                                   ; preds = %while.body.181, %if.end.174
  %125 = load i8*, i8** %chp155, align 8
  %126 = load i8, i8* %125, align 1
  %conv176 = zext i8 %126 to i32
  %and177 = and i32 %conv176, 192
  %cmp178 = icmp ne i32 %and177, 128
  %lnot180 = xor i1 %cmp178, true
  br i1 %lnot180, label %while.body.181, label %while.end.184

while.body.181:                                   ; preds = %while.cond.175
  %127 = load i8*, i8** %chp155, align 8
  %incdec.ptr182 = getelementptr inbounds i8, i8* %127, i32 -1
  store i8* %incdec.ptr182, i8** %chp155, align 8
  %128 = load i64, i64* %next_byte, align 8
  %dec183 = add nsw i64 %128, -1
  store i64 %dec183, i64* %next_byte, align 8
  br label %while.cond.175

while.end.184:                                    ; preds = %while.cond.175
  br label %do.end.185

do.end.185:                                       ; preds = %while.end.184
  br label %if.end.186

if.end.186:                                       ; preds = %do.end.185, %if.then.151
  br label %do.end.187

do.end.187:                                       ; preds = %if.end.186
  %129 = load i64, i64* %next, align 8
  call void @UPDATE_SYNTAX_TABLE_BACKWARD(i64 %129)
  %130 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_188 = getelementptr inbounds %struct.buffer, %struct.buffer* %130, i32 0, i32 39
  %131 = load i64, i64* %enable_multibyte_characters_188, align 8
  %call189 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp190 = icmp eq i64 %131, %call189
  br i1 %cmp190, label %cond.false.194, label %cond.true.192

cond.true.192:                                    ; preds = %do.end.187
  %132 = load i64, i64* %next_byte, align 8
  %call193 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %132)
  br label %cond.end.272

cond.false.194:                                   ; preds = %do.end.187
  br i1 true, label %cond.true.195, label %cond.false.215

cond.true.195:                                    ; preds = %cond.false.194
  %133 = load i64, i64* %next_byte, align 8
  %134 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text196 = getelementptr inbounds %struct.buffer, %struct.buffer* %134, i32 0, i32 73
  %135 = load %struct.buffer_text*, %struct.buffer_text** %text196, align 8
  %gpt_byte197 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %135, i32 0, i32 3
  %136 = load i64, i64* %gpt_byte197, align 8
  %cmp198 = icmp sge i64 %133, %136
  br i1 %cmp198, label %cond.true.200, label %cond.false.203

cond.true.200:                                    ; preds = %cond.true.195
  %137 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text201 = getelementptr inbounds %struct.buffer, %struct.buffer* %137, i32 0, i32 73
  %138 = load %struct.buffer_text*, %struct.buffer_text** %text201, align 8
  %gap_size202 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %138, i32 0, i32 5
  %139 = load i64, i64* %gap_size202, align 8
  br label %cond.end.204

cond.false.203:                                   ; preds = %cond.true.195
  br label %cond.end.204

cond.end.204:                                     ; preds = %cond.false.203, %cond.true.200
  %cond205 = phi i64 [ %139, %cond.true.200 ], [ 0, %cond.false.203 ]
  %140 = load i64, i64* %next_byte, align 8
  %add206 = add nsw i64 %cond205, %140
  %141 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text207 = getelementptr inbounds %struct.buffer, %struct.buffer* %141, i32 0, i32 73
  %142 = load %struct.buffer_text*, %struct.buffer_text** %text207, align 8
  %beg208 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %142, i32 0, i32 0
  %143 = load i8*, i8** %beg208, align 8
  %add.ptr209 = getelementptr inbounds i8, i8* %143, i64 %add206
  %add.ptr210 = getelementptr inbounds i8, i8* %add.ptr209, i64 -1
  %144 = load i8, i8* %add.ptr210, align 1
  %conv211 = zext i8 %144 to i32
  %add212 = add i32 %conv211, 0
  %cmp213 = icmp ult i32 %add212, 128
  br i1 %cmp213, label %cond.true.235, label %cond.false.252

cond.false.215:                                   ; preds = %cond.false.194
  %145 = load i64, i64* %next_byte, align 8
  %146 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text216 = getelementptr inbounds %struct.buffer, %struct.buffer* %146, i32 0, i32 73
  %147 = load %struct.buffer_text*, %struct.buffer_text** %text216, align 8
  %gpt_byte217 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %147, i32 0, i32 3
  %148 = load i64, i64* %gpt_byte217, align 8
  %cmp218 = icmp sge i64 %145, %148
  br i1 %cmp218, label %cond.true.220, label %cond.false.223

cond.true.220:                                    ; preds = %cond.false.215
  %149 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text221 = getelementptr inbounds %struct.buffer, %struct.buffer* %149, i32 0, i32 73
  %150 = load %struct.buffer_text*, %struct.buffer_text** %text221, align 8
  %gap_size222 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %150, i32 0, i32 5
  %151 = load i64, i64* %gap_size222, align 8
  br label %cond.end.224

cond.false.223:                                   ; preds = %cond.false.215
  br label %cond.end.224

cond.end.224:                                     ; preds = %cond.false.223, %cond.true.220
  %cond225 = phi i64 [ %151, %cond.true.220 ], [ 0, %cond.false.223 ]
  %152 = load i64, i64* %next_byte, align 8
  %add226 = add nsw i64 %cond225, %152
  %153 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text227 = getelementptr inbounds %struct.buffer, %struct.buffer* %153, i32 0, i32 73
  %154 = load %struct.buffer_text*, %struct.buffer_text** %text227, align 8
  %beg228 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %154, i32 0, i32 0
  %155 = load i8*, i8** %beg228, align 8
  %add.ptr229 = getelementptr inbounds i8, i8* %155, i64 %add226
  %add.ptr230 = getelementptr inbounds i8, i8* %add.ptr229, i64 -1
  %156 = load i8, i8* %add.ptr230, align 1
  %conv231 = zext i8 %156 to i64
  %add232 = add i64 %conv231, 0
  %cmp233 = icmp ult i64 %add232, 128
  br i1 %cmp233, label %cond.true.235, label %cond.false.252

cond.true.235:                                    ; preds = %cond.end.224, %cond.end.204
  %157 = load i64, i64* %next_byte, align 8
  %158 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text236 = getelementptr inbounds %struct.buffer, %struct.buffer* %158, i32 0, i32 73
  %159 = load %struct.buffer_text*, %struct.buffer_text** %text236, align 8
  %gpt_byte237 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %159, i32 0, i32 3
  %160 = load i64, i64* %gpt_byte237, align 8
  %cmp238 = icmp sge i64 %157, %160
  br i1 %cmp238, label %cond.true.240, label %cond.false.243

cond.true.240:                                    ; preds = %cond.true.235
  %161 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text241 = getelementptr inbounds %struct.buffer, %struct.buffer* %161, i32 0, i32 73
  %162 = load %struct.buffer_text*, %struct.buffer_text** %text241, align 8
  %gap_size242 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %162, i32 0, i32 5
  %163 = load i64, i64* %gap_size242, align 8
  br label %cond.end.244

cond.false.243:                                   ; preds = %cond.true.235
  br label %cond.end.244

cond.end.244:                                     ; preds = %cond.false.243, %cond.true.240
  %cond245 = phi i64 [ %163, %cond.true.240 ], [ 0, %cond.false.243 ]
  %164 = load i64, i64* %next_byte, align 8
  %add246 = add nsw i64 %cond245, %164
  %165 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text247 = getelementptr inbounds %struct.buffer, %struct.buffer* %165, i32 0, i32 73
  %166 = load %struct.buffer_text*, %struct.buffer_text** %text247, align 8
  %beg248 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %166, i32 0, i32 0
  %167 = load i8*, i8** %beg248, align 8
  %add.ptr249 = getelementptr inbounds i8, i8* %167, i64 %add246
  %add.ptr250 = getelementptr inbounds i8, i8* %add.ptr249, i64 -1
  %168 = load i8, i8* %add.ptr250, align 1
  %conv251 = zext i8 %168 to i32
  br label %cond.end.270

cond.false.252:                                   ; preds = %cond.end.224, %cond.end.204
  %169 = load i64, i64* %next_byte, align 8
  %170 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text253 = getelementptr inbounds %struct.buffer, %struct.buffer* %170, i32 0, i32 73
  %171 = load %struct.buffer_text*, %struct.buffer_text** %text253, align 8
  %gpt_byte254 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %171, i32 0, i32 3
  %172 = load i64, i64* %gpt_byte254, align 8
  %cmp255 = icmp sge i64 %169, %172
  br i1 %cmp255, label %cond.true.257, label %cond.false.260

cond.true.257:                                    ; preds = %cond.false.252
  %173 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text258 = getelementptr inbounds %struct.buffer, %struct.buffer* %173, i32 0, i32 73
  %174 = load %struct.buffer_text*, %struct.buffer_text** %text258, align 8
  %gap_size259 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %174, i32 0, i32 5
  %175 = load i64, i64* %gap_size259, align 8
  br label %cond.end.261

cond.false.260:                                   ; preds = %cond.false.252
  br label %cond.end.261

cond.end.261:                                     ; preds = %cond.false.260, %cond.true.257
  %cond262 = phi i64 [ %175, %cond.true.257 ], [ 0, %cond.false.260 ]
  %176 = load i64, i64* %next_byte, align 8
  %add263 = add nsw i64 %cond262, %176
  %177 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text264 = getelementptr inbounds %struct.buffer, %struct.buffer* %177, i32 0, i32 73
  %178 = load %struct.buffer_text*, %struct.buffer_text** %text264, align 8
  %beg265 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %178, i32 0, i32 0
  %179 = load i8*, i8** %beg265, align 8
  %add.ptr266 = getelementptr inbounds i8, i8* %179, i64 %add263
  %add.ptr267 = getelementptr inbounds i8, i8* %add.ptr266, i64 -1
  %180 = load i8, i8* %add.ptr267, align 1
  %conv268 = zext i8 %180 to i32
  %add269 = add nsw i32 %conv268, 4194048
  br label %cond.end.270

cond.end.270:                                     ; preds = %cond.end.261, %cond.end.244
  %cond271 = phi i32 [ %conv251, %cond.end.244 ], [ %add269, %cond.end.261 ]
  br label %cond.end.272

cond.end.272:                                     ; preds = %cond.end.270, %cond.true.192
  %cond273 = phi i32 [ %call193, %cond.true.192 ], [ %cond271, %cond.end.270 ]
  store i32 %cond273, i32* %next_c, align 4
  %181 = load i32, i32* %next_c, align 4
  %call274 = call i32 @syntax_property_with_flags(i32 %181, i1 zeroext true)
  store i32 %call274, i32* %next_syntax, align 4
  %182 = load i8, i8* %comstart, align 1
  %tobool275 = trunc i8 %182 to i1
  br i1 %tobool275, label %land.lhs.true.280, label %lor.lhs.false.277

lor.lhs.false.277:                                ; preds = %cond.end.272
  %183 = load i8, i8* %comnested.addr, align 1
  %tobool278 = trunc i8 %183 to i1
  br i1 %tobool278, label %land.lhs.true.280, label %lor.lhs.false.286

land.lhs.true.280:                                ; preds = %lor.lhs.false.277, %cond.end.272
  %184 = load i32, i32* %syntax, align 4
  %call281 = call zeroext i1 @SYNTAX_FLAGS_COMEND_SECOND(i32 %184)
  br i1 %call281, label %land.lhs.true.283, label %lor.lhs.false.286

land.lhs.true.283:                                ; preds = %land.lhs.true.280
  %185 = load i32, i32* %next_syntax, align 4
  %call284 = call zeroext i1 @SYNTAX_FLAGS_COMEND_FIRST(i32 %185)
  br i1 %call284, label %if.then.302, label %lor.lhs.false.286

lor.lhs.false.286:                                ; preds = %land.lhs.true.283, %land.lhs.true.280, %lor.lhs.false.277
  %186 = load i8, i8* %com2end, align 1
  %tobool287 = trunc i8 %186 to i1
  br i1 %tobool287, label %land.lhs.true.292, label %lor.lhs.false.289

lor.lhs.false.289:                                ; preds = %lor.lhs.false.286
  %187 = load i8, i8* %comnested.addr, align 1
  %tobool290 = trunc i8 %187 to i1
  br i1 %tobool290, label %land.lhs.true.292, label %if.end.303

land.lhs.true.292:                                ; preds = %lor.lhs.false.289, %lor.lhs.false.286
  %188 = load i32, i32* %syntax, align 4
  %call293 = call zeroext i1 @SYNTAX_FLAGS_COMSTART_SECOND(i32 %188)
  br i1 %call293, label %land.lhs.true.295, label %if.end.303

land.lhs.true.295:                                ; preds = %land.lhs.true.292
  %189 = load i32, i32* %comstyle.addr, align 4
  %190 = load i32, i32* %syntax, align 4
  %191 = load i32, i32* %prev_syntax, align 4
  %call296 = call i32 @SYNTAX_FLAGS_COMMENT_STYLE(i32 %190, i32 %191)
  %cmp297 = icmp eq i32 %189, %call296
  br i1 %cmp297, label %land.lhs.true.299, label %if.end.303

land.lhs.true.299:                                ; preds = %land.lhs.true.295
  %192 = load i32, i32* %next_syntax, align 4
  %call300 = call zeroext i1 @SYNTAX_FLAGS_COMSTART_FIRST(i32 %192)
  br i1 %call300, label %if.then.302, label %if.end.303

if.then.302:                                      ; preds = %land.lhs.true.299, %land.lhs.true.283
  br label %lossage

if.end.303:                                       ; preds = %land.lhs.true.299, %land.lhs.true.295, %land.lhs.true.292, %lor.lhs.false.289
  br label %if.end.304

if.end.304:                                       ; preds = %if.end.303, %lor.lhs.false, %lor.end.134
  %193 = load i8, i8* %com2start, align 1
  %tobool305 = trunc i8 %193 to i1
  br i1 %tobool305, label %land.lhs.true.307, label %if.end.311

land.lhs.true.307:                                ; preds = %if.end.304
  %194 = load i64, i64* %comstart_pos, align 8
  %cmp308 = icmp eq i64 %194, 0
  br i1 %cmp308, label %if.then.310, label %if.end.311

if.then.310:                                      ; preds = %land.lhs.true.307
  store i8 0, i8* %com2end, align 1
  br label %if.end.311

if.end.311:                                       ; preds = %if.then.310, %land.lhs.true.307, %if.end.304
  %195 = load i8, i8* %com2end, align 1
  %tobool312 = trunc i8 %195 to i1
  br i1 %tobool312, label %if.then.313, label %if.else.314

if.then.313:                                      ; preds = %if.end.311
  store i32 12, i32* %code, align 4
  br label %if.end.334

if.else.314:                                      ; preds = %if.end.311
  %196 = load i8, i8* %com2start, align 1
  %tobool315 = trunc i8 %196 to i1
  br i1 %tobool315, label %if.then.316, label %if.else.317

if.then.316:                                      ; preds = %if.else.314
  store i32 11, i32* %code, align 4
  br label %if.end.333

if.else.317:                                      ; preds = %if.else.314
  %197 = load i32, i32* %code, align 4
  %cmp318 = icmp eq i32 %197, 11
  br i1 %cmp318, label %land.lhs.true.320, label %if.end.332

land.lhs.true.320:                                ; preds = %if.else.317
  %198 = load i32, i32* %comstyle.addr, align 4
  %199 = load i32, i32* %syntax, align 4
  %call321 = call i32 @SYNTAX_FLAGS_COMMENT_STYLE(i32 %199, i32 0)
  %cmp322 = icmp ne i32 %198, %call321
  br i1 %cmp322, label %if.then.331, label %lor.lhs.false.324

lor.lhs.false.324:                                ; preds = %land.lhs.true.320
  %200 = load i32, i32* %syntax, align 4
  %call325 = call zeroext i1 @SYNTAX_FLAGS_COMMENT_NESTED(i32 %200)
  %conv326 = zext i1 %call325 to i32
  %201 = load i8, i8* %comnested.addr, align 1
  %tobool327 = trunc i8 %201 to i1
  %conv328 = zext i1 %tobool327 to i32
  %cmp329 = icmp ne i32 %conv326, %conv328
  br i1 %cmp329, label %if.then.331, label %if.end.332

if.then.331:                                      ; preds = %lor.lhs.false.324, %land.lhs.true.320
  br label %while.cond

if.end.332:                                       ; preds = %lor.lhs.false.324, %if.else.317
  br label %if.end.333

if.end.333:                                       ; preds = %if.end.332, %if.then.316
  br label %if.end.334

if.end.334:                                       ; preds = %if.end.333, %if.then.313
  %202 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 420), align 1
  %tobool335 = trunc i8 %202 to i1
  br i1 %tobool335, label %land.lhs.true.340, label %lor.lhs.false.337

lor.lhs.false.337:                                ; preds = %if.end.334
  %203 = load i32, i32* %code, align 4
  %cmp338 = icmp ne i32 %203, 12
  br i1 %cmp338, label %land.lhs.true.340, label %if.end.344

land.lhs.true.340:                                ; preds = %lor.lhs.false.337, %if.end.334
  %204 = load i64, i64* %from.addr, align 8
  %205 = load i64, i64* %from_byte.addr, align 8
  %call341 = call zeroext i1 @char_quoted(i64 %204, i64 %205)
  br i1 %call341, label %if.then.343, label %if.end.344

if.then.343:                                      ; preds = %land.lhs.true.340
  br label %while.cond

if.end.344:                                       ; preds = %land.lhs.true.340, %lor.lhs.false.337
  %206 = load i32, i32* %code, align 4
  switch i32 %206, label %sw.default [
    i32 15, label %sw.bb
    i32 14, label %sw.bb
    i32 7, label %sw.bb.348
    i32 11, label %sw.bb.359
    i32 12, label %sw.bb.379
    i32 4, label %sw.bb.412
  ]

sw.bb:                                            ; preds = %if.end.344, %if.end.344
  %207 = load i32, i32* %code, align 4
  %cmp345 = icmp eq i32 %207, 15
  %cond347 = select i1 %cmp345, i32 258, i32 257
  store i32 %cond347, i32* %c, align 4
  br label %sw.bb.348

sw.bb.348:                                        ; preds = %if.end.344, %sw.bb
  %208 = load i32, i32* %string_style, align 4
  %cmp349 = icmp eq i32 %208, -1
  br i1 %cmp349, label %if.then.351, label %if.else.352

if.then.351:                                      ; preds = %sw.bb.348
  %209 = load i32, i32* %c, align 4
  store i32 %209, i32* %string_style, align 4
  br label %if.end.358

if.else.352:                                      ; preds = %sw.bb.348
  %210 = load i32, i32* %string_style, align 4
  %211 = load i32, i32* %c, align 4
  %cmp353 = icmp eq i32 %210, %211
  br i1 %cmp353, label %if.then.355, label %if.else.356

if.then.355:                                      ; preds = %if.else.352
  store i32 -1, i32* %string_style, align 4
  br label %if.end.357

if.else.356:                                      ; preds = %if.else.352
  store i8 1, i8* %string_lossage, align 1
  br label %if.end.357

if.end.357:                                       ; preds = %if.else.356, %if.then.355
  br label %if.end.358

if.end.358:                                       ; preds = %if.end.357, %if.then.351
  br label %sw.epilog

sw.bb.359:                                        ; preds = %if.end.344
  %212 = load i32, i32* %string_style, align 4
  %cmp360 = icmp ne i32 %212, -1
  br i1 %cmp360, label %if.then.368, label %lor.lhs.false.362

lor.lhs.false.362:                                ; preds = %sw.bb.359
  %213 = load i8, i8* %comment_lossage, align 1
  %tobool363 = trunc i8 %213 to i1
  br i1 %tobool363, label %if.then.368, label %lor.lhs.false.365

lor.lhs.false.365:                                ; preds = %lor.lhs.false.362
  %214 = load i8, i8* %string_lossage, align 1
  %tobool366 = trunc i8 %214 to i1
  br i1 %tobool366, label %if.then.368, label %if.end.369

if.then.368:                                      ; preds = %lor.lhs.false.365, %lor.lhs.false.362, %sw.bb.359
  br label %lossage

if.end.369:                                       ; preds = %lor.lhs.false.365
  %215 = load i8, i8* %comnested.addr, align 1
  %tobool370 = trunc i8 %215 to i1
  br i1 %tobool370, label %if.else.372, label %if.then.371

if.then.371:                                      ; preds = %if.end.369
  %216 = load i64, i64* %from.addr, align 8
  store i64 %216, i64* %comstart_pos, align 8
  %217 = load i64, i64* %from_byte.addr, align 8
  store i64 %217, i64* %comstart_byte, align 8
  br label %if.end.378

if.else.372:                                      ; preds = %if.end.369
  %218 = load i64, i64* %nesting, align 8
  %dec373 = add nsw i64 %218, -1
  store i64 %dec373, i64* %nesting, align 8
  %cmp374 = icmp sle i64 %dec373, 0
  br i1 %cmp374, label %if.then.376, label %if.end.377

if.then.376:                                      ; preds = %if.else.372
  br label %done

if.end.377:                                       ; preds = %if.else.372
  br label %if.end.378

if.end.378:                                       ; preds = %if.end.377, %if.then.371
  br label %sw.epilog

sw.bb.379:                                        ; preds = %if.end.344
  %219 = load i32, i32* %syntax, align 4
  %call380 = call i32 @SYNTAX_FLAGS_COMMENT_STYLE(i32 %219, i32 0)
  %220 = load i32, i32* %comstyle.addr, align 4
  %cmp381 = icmp eq i32 %call380, %220
  br i1 %cmp381, label %land.lhs.true.383, label %if.else.403

land.lhs.true.383:                                ; preds = %sw.bb.379
  %221 = load i8, i8* %com2end, align 1
  %tobool384 = trunc i8 %221 to i1
  br i1 %tobool384, label %land.lhs.true.386, label %lor.rhs.389

land.lhs.true.386:                                ; preds = %land.lhs.true.383
  %222 = load i32, i32* %prev_syntax, align 4
  %call387 = call zeroext i1 @SYNTAX_FLAGS_COMMENT_NESTED(i32 %222)
  br i1 %call387, label %lor.end.392, label %lor.rhs.389

lor.rhs.389:                                      ; preds = %land.lhs.true.386, %land.lhs.true.383
  %223 = load i32, i32* %syntax, align 4
  %call390 = call zeroext i1 @SYNTAX_FLAGS_COMMENT_NESTED(i32 %223)
  br label %lor.end.392

lor.end.392:                                      ; preds = %lor.rhs.389, %land.lhs.true.386
  %224 = phi i1 [ true, %land.lhs.true.386 ], [ %call390, %lor.rhs.389 ]
  %lor.ext393 = zext i1 %224 to i32
  %225 = load i8, i8* %comnested.addr, align 1
  %tobool394 = trunc i8 %225 to i1
  %conv395 = zext i1 %tobool394 to i32
  %cmp396 = icmp eq i32 %lor.ext393, %conv395
  br i1 %cmp396, label %if.then.398, label %if.else.403

if.then.398:                                      ; preds = %lor.end.392
  %226 = load i8, i8* %comnested.addr, align 1
  %tobool399 = trunc i8 %226 to i1
  br i1 %tobool399, label %if.then.400, label %if.else.401

if.then.400:                                      ; preds = %if.then.398
  %227 = load i64, i64* %nesting, align 8
  %inc = add nsw i64 %227, 1
  store i64 %inc, i64* %nesting, align 8
  br label %if.end.402

if.else.401:                                      ; preds = %if.then.398
  %228 = load i64, i64* %stop.addr, align 8
  store i64 %228, i64* %from.addr, align 8
  br label %if.end.402

if.end.402:                                       ; preds = %if.else.401, %if.then.400
  br label %if.end.411

if.else.403:                                      ; preds = %lor.end.392, %sw.bb.379
  %229 = load i64, i64* %comstart_pos, align 8
  %cmp404 = icmp ne i64 %229, 0
  br i1 %cmp404, label %if.then.409, label %lor.lhs.false.406

lor.lhs.false.406:                                ; preds = %if.else.403
  %230 = load i32, i32* %c, align 4
  %cmp407 = icmp ne i32 %230, 10
  br i1 %cmp407, label %if.then.409, label %if.end.410

if.then.409:                                      ; preds = %lor.lhs.false.406, %if.else.403
  store i8 1, i8* %comment_lossage, align 1
  br label %if.end.410

if.end.410:                                       ; preds = %if.then.409, %lor.lhs.false.406
  br label %if.end.411

if.end.411:                                       ; preds = %if.end.410, %if.end.402
  br label %sw.epilog

sw.bb.412:                                        ; preds = %if.end.344
  %231 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 478), align 1
  %tobool413 = trunc i8 %231 to i1
  br i1 %tobool413, label %land.lhs.true.415, label %if.end.448

land.lhs.true.415:                                ; preds = %sw.bb.412
  %232 = load i64, i64* %from.addr, align 8
  %233 = load i64, i64* %stop.addr, align 8
  %cmp416 = icmp eq i64 %232, %233
  br i1 %cmp416, label %if.then.447, label %lor.lhs.false.418

lor.lhs.false.418:                                ; preds = %land.lhs.true.415
  %234 = load i64, i64* %from_byte.addr, align 8
  %call419 = call i64 @dec_bytepos(i64 %234)
  store i64 %call419, i64* %temp_byte, align 8
  %235 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_420 = getelementptr inbounds %struct.buffer, %struct.buffer* %235, i32 0, i32 39
  %236 = load i64, i64* %enable_multibyte_characters_420, align 8
  %call421 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp422 = icmp eq i64 %236, %call421
  br i1 %cmp422, label %cond.false.426, label %cond.true.424

cond.true.424:                                    ; preds = %lor.lhs.false.418
  %237 = load i64, i64* %temp_byte, align 8
  %call425 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %237)
  br label %cond.end.443

cond.false.426:                                   ; preds = %lor.lhs.false.418
  %238 = load i64, i64* %temp_byte, align 8
  %239 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text427 = getelementptr inbounds %struct.buffer, %struct.buffer* %239, i32 0, i32 73
  %240 = load %struct.buffer_text*, %struct.buffer_text** %text427, align 8
  %gpt_byte428 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %240, i32 0, i32 3
  %241 = load i64, i64* %gpt_byte428, align 8
  %cmp429 = icmp sge i64 %238, %241
  br i1 %cmp429, label %cond.true.431, label %cond.false.434

cond.true.431:                                    ; preds = %cond.false.426
  %242 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text432 = getelementptr inbounds %struct.buffer, %struct.buffer* %242, i32 0, i32 73
  %243 = load %struct.buffer_text*, %struct.buffer_text** %text432, align 8
  %gap_size433 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %243, i32 0, i32 5
  %244 = load i64, i64* %gap_size433, align 8
  br label %cond.end.435

cond.false.434:                                   ; preds = %cond.false.426
  br label %cond.end.435

cond.end.435:                                     ; preds = %cond.false.434, %cond.true.431
  %cond436 = phi i64 [ %244, %cond.true.431 ], [ 0, %cond.false.434 ]
  %245 = load i64, i64* %temp_byte, align 8
  %add437 = add nsw i64 %cond436, %245
  %246 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text438 = getelementptr inbounds %struct.buffer, %struct.buffer* %246, i32 0, i32 73
  %247 = load %struct.buffer_text*, %struct.buffer_text** %text438, align 8
  %beg439 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %247, i32 0, i32 0
  %248 = load i8*, i8** %beg439, align 8
  %add.ptr440 = getelementptr inbounds i8, i8* %248, i64 %add437
  %add.ptr441 = getelementptr inbounds i8, i8* %add.ptr440, i64 -1
  %249 = load i8, i8* %add.ptr441, align 1
  %conv442 = zext i8 %249 to i32
  br label %cond.end.443

cond.end.443:                                     ; preds = %cond.end.435, %cond.true.424
  %cond444 = phi i32 [ %call425, %cond.true.424 ], [ %conv442, %cond.end.435 ]
  %cmp445 = icmp eq i32 %cond444, 10
  br i1 %cmp445, label %if.then.447, label %if.end.448

if.then.447:                                      ; preds = %cond.end.443, %land.lhs.true.415
  %250 = load i64, i64* %from.addr, align 8
  store i64 %250, i64* %defun_start, align 8
  %251 = load i64, i64* %from_byte.addr, align 8
  store i64 %251, i64* %defun_start_byte, align 8
  %252 = load i64, i64* %stop.addr, align 8
  store i64 %252, i64* %from.addr, align 8
  br label %if.end.448

if.end.448:                                       ; preds = %if.then.447, %cond.end.443, %sw.bb.412
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.344
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end.448, %if.end.411, %if.end.378, %if.end.358
  br label %while.cond

while.end.449:                                    ; preds = %while.cond
  %253 = load i64, i64* %comstart_pos, align 8
  %cmp450 = icmp eq i64 %253, 0
  br i1 %cmp450, label %if.then.452, label %if.else.453

if.then.452:                                      ; preds = %while.end.449
  %254 = load i64, i64* %comment_end, align 8
  store i64 %254, i64* %from.addr, align 8
  %255 = load i64, i64* %comment_end_byte, align 8
  store i64 %255, i64* %from_byte.addr, align 8
  %256 = load i64, i64* %comment_end, align 8
  call void @UPDATE_SYNTAX_TABLE_FORWARD(i64 %256)
  br label %if.end.513

if.else.453:                                      ; preds = %while.end.449
  br i1 true, label %if.then.454, label %if.else.455

if.then.454:                                      ; preds = %if.else.453
  %257 = load i64, i64* %comstart_pos, align 8
  store i64 %257, i64* %from.addr, align 8
  %258 = load i64, i64* %comstart_byte, align 8
  store i64 %258, i64* %from_byte.addr, align 8
  %259 = load i64, i64* %from.addr, align 8
  %sub = sub nsw i64 %259, 1
  call void @UPDATE_SYNTAX_TABLE_FORWARD(i64 %sub)
  br label %if.end.512

if.else.455:                                      ; preds = %if.else.453
  br label %lossage

lossage:                                          ; preds = %if.else.455, %if.then.368, %if.then.302
  store i8 1, i8* %adjusted, align 1
  %260 = load i64, i64* %defun_start, align 8
  %cmp456 = icmp eq i64 %260, 0
  br i1 %cmp456, label %if.then.458, label %if.end.463

if.then.458:                                      ; preds = %lossage
  %261 = load i64, i64* %comment_end, align 8
  %262 = load i64, i64* %comment_end_byte, align 8
  %call459 = call i64 @find_defun_start(i64 %261, i64 %262)
  store i64 %call459, i64* %defun_start, align 8
  %263 = load i64, i64* @find_start_value_byte, align 8
  store i64 %263, i64* %defun_start_byte, align 8
  %264 = load i64, i64* %defun_start, align 8
  %265 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %265, i32 0, i32 77
  %266 = load i64, i64* %begv, align 8
  %cmp460 = icmp sgt i64 %264, %266
  %frombool462 = zext i1 %cmp460 to i8
  store i8 %frombool462, i8* %adjusted, align 1
  br label %if.end.463

if.end.463:                                       ; preds = %if.then.458, %lossage
  br label %do.body.464

do.body.464:                                      ; preds = %do.cond, %if.end.463
  %267 = load i64, i64* %defun_start, align 8
  %268 = load i64, i64* %defun_start_byte, align 8
  %269 = load i64, i64* %comment_end, align 8
  %call465 = call i64 @builtin_lisp_symbol(i32 0)
  call void @scan_sexps_forward(%struct.lisp_parse_state* %state, i64 %267, i64 %268, i64 %269, i64 -9223372036854775808, i1 zeroext false, i64 %call465, i32 0)
  %270 = load i64, i64* %comment_end, align 8
  store i64 %270, i64* %defun_start, align 8
  %271 = load i8, i8* %adjusted, align 1
  %tobool466 = trunc i8 %271 to i1
  br i1 %tobool466, label %if.end.486, label %if.then.467

if.then.467:                                      ; preds = %do.body.464
  store i8 1, i8* %adjusted, align 1
  %levelstarts = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 11
  %272 = load i64, i64* %levelstarts, align 8
  %and468 = and i64 %272, 7
  %conv469 = trunc i64 %and468 to i32
  %cmp470 = icmp eq i32 %conv469, 3
  br i1 %cmp470, label %cond.true.472, label %cond.false.475

cond.true.472:                                    ; preds = %if.then.467
  %levelstarts473 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 11
  %273 = load i64, i64* %levelstarts473, align 8
  %sub474 = sub nsw i64 %273, 3
  %274 = inttoptr i64 %sub474 to i8*
  %275 = bitcast i8* %274 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %275, i32 0, i32 0
  %276 = load i64, i64* %car, align 8
  %shr = ashr i64 %276, 2
  br label %cond.end.483

cond.false.475:                                   ; preds = %if.then.467
  %thislevelstart = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 6
  %277 = load i64, i64* %thislevelstart, align 8
  %cmp476 = icmp sge i64 %277, 0
  br i1 %cmp476, label %cond.true.478, label %cond.false.480

cond.true.478:                                    ; preds = %cond.false.475
  %thislevelstart479 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 6
  %278 = load i64, i64* %thislevelstart479, align 8
  br label %cond.end.481

cond.false.480:                                   ; preds = %cond.false.475
  %279 = load i64, i64* @find_start_value, align 8
  br label %cond.end.481

cond.end.481:                                     ; preds = %cond.false.480, %cond.true.478
  %cond482 = phi i64 [ %278, %cond.true.478 ], [ %279, %cond.false.480 ]
  br label %cond.end.483

cond.end.483:                                     ; preds = %cond.end.481, %cond.true.472
  %cond484 = phi i64 [ %shr, %cond.true.472 ], [ %cond482, %cond.end.481 ]
  store i64 %cond484, i64* @find_start_value, align 8
  %280 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %281 = load i64, i64* @find_start_value, align 8
  %call485 = call i64 @buf_charpos_to_bytepos(%struct.buffer* %280, i64 %281)
  store i64 %call485, i64* @find_start_value_byte, align 8
  br label %if.end.486

if.end.486:                                       ; preds = %cond.end.483, %do.body.464
  %incomment = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 2
  %282 = load i64, i64* %incomment, align 8
  %283 = load i8, i8* %comnested.addr, align 1
  %tobool487 = trunc i8 %283 to i1
  %cond489 = select i1 %tobool487, i32 1, i32 -1
  %conv490 = sext i32 %cond489 to i64
  %cmp491 = icmp eq i64 %282, %conv490
  br i1 %cmp491, label %land.lhs.true.493, label %if.else.498

land.lhs.true.493:                                ; preds = %if.end.486
  %comstyle494 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 3
  %284 = load i32, i32* %comstyle494, align 4
  %285 = load i32, i32* %comstyle.addr, align 4
  %cmp495 = icmp eq i32 %284, %285
  br i1 %cmp495, label %if.then.497, label %if.else.498

if.then.497:                                      ; preds = %land.lhs.true.493
  %comstr_start = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 10
  %286 = load i64, i64* %comstr_start, align 8
  store i64 %286, i64* %from.addr, align 8
  br label %if.end.506

if.else.498:                                      ; preds = %land.lhs.true.493, %if.end.486
  %287 = load i64, i64* %comment_end, align 8
  store i64 %287, i64* %from.addr, align 8
  %incomment499 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 2
  %288 = load i64, i64* %incomment499, align 8
  %tobool500 = icmp ne i64 %288, 0
  br i1 %tobool500, label %if.then.501, label %if.end.505

if.then.501:                                      ; preds = %if.else.498
  %comstr_start502 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 10
  %289 = load i64, i64* %comstr_start502, align 8
  %add503 = add nsw i64 %289, 2
  store i64 %add503, i64* %defun_start, align 8
  %290 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %291 = load i64, i64* %defun_start, align 8
  %call504 = call i64 @buf_charpos_to_bytepos(%struct.buffer* %290, i64 %291)
  store i64 %call504, i64* %defun_start_byte, align 8
  br label %if.end.505

if.end.505:                                       ; preds = %if.then.501, %if.else.498
  br label %if.end.506

if.end.506:                                       ; preds = %if.end.505, %if.then.497
  br label %do.cond

do.cond:                                          ; preds = %if.end.506
  %292 = load i64, i64* %defun_start, align 8
  %293 = load i64, i64* %comment_end, align 8
  %cmp507 = icmp slt i64 %292, %293
  br i1 %cmp507, label %do.body.464, label %do.end.509

do.end.509:                                       ; preds = %do.cond
  %294 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %295 = load i64, i64* %from.addr, align 8
  %call510 = call i64 @buf_charpos_to_bytepos(%struct.buffer* %294, i64 %295)
  store i64 %call510, i64* %from_byte.addr, align 8
  %296 = load i64, i64* %from.addr, align 8
  %sub511 = sub nsw i64 %296, 1
  call void @UPDATE_SYNTAX_TABLE_FORWARD(i64 %sub511)
  br label %if.end.512

if.end.512:                                       ; preds = %do.end.509, %if.then.454
  br label %if.end.513

if.end.513:                                       ; preds = %if.end.512, %if.then.452
  br label %done

done:                                             ; preds = %if.end.513, %if.then.376
  %297 = load i64, i64* %from.addr, align 8
  %298 = load i64*, i64** %charpos_ptr.addr, align 8
  store i64 %297, i64* %298, align 8
  %299 = load i64, i64* %from_byte.addr, align 8
  %300 = load i64*, i64** %bytepos_ptr.addr, align 8
  store i64 %299, i64* %300, align 8
  %301 = load i64, i64* %from.addr, align 8
  %302 = load i64, i64* %comment_end, align 8
  %cmp514 = icmp ne i64 %301, %302
  ret i1 %cmp514
}

; Function Attrs: nounwind uwtable
define i64 @Fscan_lists(i64 %from, i64 %count, i64 %depth) #0 {
entry:
  %from.addr = alloca i64, align 8
  %count.addr = alloca i64, align 8
  %depth.addr = alloca i64, align 8
  store i64 %from, i64* %from.addr, align 8
  store i64 %count, i64* %count.addr, align 8
  store i64 %depth, i64* %depth.addr, align 8
  %0 = load i64, i64* %from.addr, align 8
  %and = and i64 %0, 7
  %conv = trunc i64 %and to i32
  %and1 = and i32 %conv, -5
  %cmp = icmp eq i32 %and1, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call i64 @builtin_lisp_symbol(i32 559)
  %1 = load i64, i64* %from.addr, align 8
  %2 = call i64 @wrong_type_argument(i64 %call, i64 %1) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %3, %cond.true
  %4 = load i64, i64* %count.addr, align 8
  %and3 = and i64 %4, 7
  %conv4 = trunc i64 %and3 to i32
  %and5 = and i32 %conv4, -5
  %cmp6 = icmp eq i32 %and5, 2
  br i1 %cmp6, label %cond.true.8, label %cond.false.9

cond.true.8:                                      ; preds = %cond.end
  br label %cond.end.11

cond.false.9:                                     ; preds = %cond.end
  %call10 = call i64 @builtin_lisp_symbol(i32 559)
  %5 = load i64, i64* %count.addr, align 8
  %6 = call i64 @wrong_type_argument(i64 %call10, i64 %5) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end.11

cond.end.11:                                      ; preds = %7, %cond.true.8
  %8 = load i64, i64* %depth.addr, align 8
  %and12 = and i64 %8, 7
  %conv13 = trunc i64 %and12 to i32
  %and14 = and i32 %conv13, -5
  %cmp15 = icmp eq i32 %and14, 2
  br i1 %cmp15, label %cond.true.17, label %cond.false.18

cond.true.17:                                     ; preds = %cond.end.11
  br label %cond.end.20

cond.false.18:                                    ; preds = %cond.end.11
  %call19 = call i64 @builtin_lisp_symbol(i32 559)
  %9 = load i64, i64* %depth.addr, align 8
  %10 = call i64 @wrong_type_argument(i64 %call19, i64 %9) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end.20

cond.end.20:                                      ; preds = %11, %cond.true.17
  %12 = load i64, i64* %from.addr, align 8
  %shr = ashr i64 %12, 2
  %13 = load i64, i64* %count.addr, align 8
  %shr21 = ashr i64 %13, 2
  %14 = load i64, i64* %depth.addr, align 8
  %shr22 = ashr i64 %14, 2
  %call23 = call i64 @scan_lists(i64 %shr, i64 %shr21, i64 %shr22, i1 zeroext false)
  ret i64 %call23
}

; Function Attrs: nounwind uwtable
define internal i64 @scan_lists(i64 %from, i64 %count, i64 %depth, i1 zeroext %sexpflag) #0 {
entry:
  %retval = alloca i64, align 8
  %from.addr = alloca i64, align 8
  %count.addr = alloca i64, align 8
  %depth.addr = alloca i64, align 8
  %sexpflag.addr = alloca i8, align 1
  %val = alloca i64, align 8
  %stop = alloca i64, align 8
  %c = alloca i32, align 4
  %c1 = alloca i32, align 4
  %stringterm = alloca i32, align 4
  %quoted = alloca i8, align 1
  %mathexit = alloca i8, align 1
  %code = alloca i32, align 4
  %min_depth = alloca i64, align 8
  %comstyle = alloca i32, align 4
  %comnested = alloca i8, align 1
  %temp_pos = alloca i64, align 8
  %last_good = alloca i64, align 8
  %found = alloca i8, align 1
  %from_byte = alloca i64, align 8
  %out_bytepos = alloca i64, align 8
  %out_charpos = alloca i64, align 8
  %dummy = alloca i64, align 8
  %multibyte_symbol_p = alloca i8, align 1
  %comstart_first = alloca i8, align 1
  %prefix = alloca i8, align 1
  %syntax = alloca i32, align 4
  %other_syntax = alloca i32, align 4
  %chp = alloca i8*, align 8
  %chp286 = alloca i8*, align 8
  %chp351 = alloca i8*, align 8
  %chp506 = alloca i8*, align 8
  %chp568 = alloca i8*, align 8
  %chp641 = alloca i8*, align 8
  %chp794 = alloca i8*, align 8
  %c_code = alloca i32, align 4
  %chp1074 = alloca i8*, align 8
  %chp1132 = alloca i8*, align 8
  %chp1190 = alloca i8*, align 8
  %syntax1260 = alloca i32, align 4
  %chp1271 = alloca i8*, align 8
  %c2 = alloca i32, align 4
  %other_syntax1415 = alloca i32, align 4
  %chp1426 = alloca i8*, align 8
  %chp1571 = alloca i8*, align 8
  %chp1625 = alloca i8*, align 8
  %chp1766 = alloca i8*, align 8
  %chp1906 = alloca i8*, align 8
  %chp2052 = alloca i8*, align 8
  %chp2137 = alloca i8*, align 8
  %chp2378 = alloca i8*, align 8
  store i64 %from, i64* %from.addr, align 8
  store i64 %count, i64* %count.addr, align 8
  store i64 %depth, i64* %depth.addr, align 8
  %frombool = zext i1 %sexpflag to i8
  store i8 %frombool, i8* %sexpflag.addr, align 1
  %0 = load i64, i64* %count.addr, align 8
  %cmp = icmp sgt i64 %0, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 79
  %2 = load i64, i64* %zv, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %3, i32 0, i32 77
  %4 = load i64, i64* %begv, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %2, %cond.true ], [ %4, %cond.false ]
  store i64 %cond, i64* %stop, align 8
  store i8 0, i8* %mathexit, align 1
  %5 = load i64, i64* %depth.addr, align 8
  store i64 %5, i64* %min_depth, align 8
  store i32 0, i32* %comstyle, align 4
  store i8 0, i8* %comnested, align 1
  %6 = load i64, i64* %from.addr, align 8
  store i64 %6, i64* %last_good, align 8
  %7 = load i8, i8* %sexpflag.addr, align 1
  %tobool = trunc i8 %7 to i1
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.end
  %8 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 474), align 1
  %tobool1 = trunc i8 %8 to i1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.end
  %9 = phi i1 [ false, %cond.end ], [ %tobool1, %land.rhs ]
  %frombool2 = zext i1 %9 to i8
  store i8 %frombool2, i8* %multibyte_symbol_p, align 1
  %10 = load i64, i64* %depth.addr, align 8
  %cmp3 = icmp sgt i64 %10, 0
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.end
  store i64 0, i64* %min_depth, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.end
  %11 = load i64, i64* %from.addr, align 8
  %12 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv4 = getelementptr inbounds %struct.buffer, %struct.buffer* %12, i32 0, i32 79
  %13 = load i64, i64* %zv4, align 8
  %cmp5 = icmp sgt i64 %11, %13
  br i1 %cmp5, label %if.then.6, label %if.end.8

if.then.6:                                        ; preds = %if.end
  %14 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv7 = getelementptr inbounds %struct.buffer, %struct.buffer* %14, i32 0, i32 79
  %15 = load i64, i64* %zv7, align 8
  store i64 %15, i64* %from.addr, align 8
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.6, %if.end
  %16 = load i64, i64* %from.addr, align 8
  %17 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv9 = getelementptr inbounds %struct.buffer, %struct.buffer* %17, i32 0, i32 77
  %18 = load i64, i64* %begv9, align 8
  %cmp10 = icmp slt i64 %16, %18
  br i1 %cmp10, label %if.then.11, label %if.end.13

if.then.11:                                       ; preds = %if.end.8
  %19 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv12 = getelementptr inbounds %struct.buffer, %struct.buffer* %19, i32 0, i32 77
  %20 = load i64, i64* %begv12, align 8
  store i64 %20, i64* %from.addr, align 8
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.11, %if.end.8
  %21 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %22 = load i64, i64* %from.addr, align 8
  %call = call i64 @buf_charpos_to_bytepos(%struct.buffer* %21, i64 %22)
  store i64 %call, i64* %from_byte, align 8
  store i8 1, i8* @immediate_quit, align 1
  br label %do.body

do.body:                                          ; preds = %if.end.13
  %23 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 241), align 8
  %call14 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp15 = icmp eq i64 %23, %call14
  br i1 %cmp15, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %do.body
  %24 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 138), align 8
  %call16 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp17 = icmp eq i64 %24, %call16
  br i1 %cmp17, label %if.then.18, label %if.else

if.then.18:                                       ; preds = %land.lhs.true
  call void @process_quit_flag()
  br label %if.end.22

if.else:                                          ; preds = %land.lhs.true, %do.body
  %25 = load volatile i8, i8* @pending_signals, align 1
  %tobool19 = trunc i8 %25 to i1
  br i1 %tobool19, label %if.then.20, label %if.end.21

if.then.20:                                       ; preds = %if.else
  call void @process_pending_signals()
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.20, %if.else
  br label %if.end.22

if.end.22:                                        ; preds = %if.end.21, %if.then.18
  br label %do.end

do.end:                                           ; preds = %if.end.22
  %26 = load i64, i64* %from.addr, align 8
  %27 = load i64, i64* %count.addr, align 8
  call void @SETUP_SYNTAX_TABLE(i64 %26, i64 %27)
  br label %while.cond

while.cond:                                       ; preds = %done, %do.end
  %28 = load i64, i64* %count.addr, align 8
  %cmp23 = icmp sgt i64 %28, 0
  br i1 %cmp23, label %while.body, label %while.end.1251

while.body:                                       ; preds = %while.cond
  br label %while.cond.24

while.cond.24:                                    ; preds = %sw.epilog.1244, %if.then.335, %while.body
  %29 = load i64, i64* %from.addr, align 8
  %30 = load i64, i64* %stop, align 8
  %cmp25 = icmp slt i64 %29, %30
  br i1 %cmp25, label %while.body.26, label %while.end.1245

while.body.26:                                    ; preds = %while.cond.24
  %31 = load i64, i64* %from.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_FORWARD(i64 %31)
  %32 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %32, i32 0, i32 39
  %33 = load i64, i64* %enable_multibyte_characters_, align 8
  %call27 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp28 = icmp eq i64 %33, %call27
  br i1 %cmp28, label %cond.false.31, label %cond.true.29

cond.true.29:                                     ; preds = %while.body.26
  %34 = load i64, i64* %from_byte, align 8
  %call30 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %34)
  br label %cond.end.101

cond.false.31:                                    ; preds = %while.body.26
  br i1 true, label %cond.true.32, label %cond.false.44

cond.true.32:                                     ; preds = %cond.false.31
  %35 = load i64, i64* %from_byte, align 8
  %36 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %36, i32 0, i32 73
  %37 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %37, i32 0, i32 3
  %38 = load i64, i64* %gpt_byte, align 8
  %cmp33 = icmp sge i64 %35, %38
  br i1 %cmp33, label %cond.true.34, label %cond.false.36

cond.true.34:                                     ; preds = %cond.true.32
  %39 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text35 = getelementptr inbounds %struct.buffer, %struct.buffer* %39, i32 0, i32 73
  %40 = load %struct.buffer_text*, %struct.buffer_text** %text35, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %40, i32 0, i32 5
  %41 = load i64, i64* %gap_size, align 8
  br label %cond.end.37

cond.false.36:                                    ; preds = %cond.true.32
  br label %cond.end.37

cond.end.37:                                      ; preds = %cond.false.36, %cond.true.34
  %cond38 = phi i64 [ %41, %cond.true.34 ], [ 0, %cond.false.36 ]
  %42 = load i64, i64* %from_byte, align 8
  %add = add nsw i64 %cond38, %42
  %43 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text39 = getelementptr inbounds %struct.buffer, %struct.buffer* %43, i32 0, i32 73
  %44 = load %struct.buffer_text*, %struct.buffer_text** %text39, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %44, i32 0, i32 0
  %45 = load i8*, i8** %beg, align 8
  %add.ptr = getelementptr inbounds i8, i8* %45, i64 %add
  %add.ptr40 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  %46 = load i8, i8* %add.ptr40, align 1
  %conv = zext i8 %46 to i32
  %add41 = add i32 %conv, 0
  %cmp42 = icmp ult i32 %add41, 128
  br i1 %cmp42, label %cond.true.64, label %cond.false.81

cond.false.44:                                    ; preds = %cond.false.31
  %47 = load i64, i64* %from_byte, align 8
  %48 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text45 = getelementptr inbounds %struct.buffer, %struct.buffer* %48, i32 0, i32 73
  %49 = load %struct.buffer_text*, %struct.buffer_text** %text45, align 8
  %gpt_byte46 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %49, i32 0, i32 3
  %50 = load i64, i64* %gpt_byte46, align 8
  %cmp47 = icmp sge i64 %47, %50
  br i1 %cmp47, label %cond.true.49, label %cond.false.52

cond.true.49:                                     ; preds = %cond.false.44
  %51 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text50 = getelementptr inbounds %struct.buffer, %struct.buffer* %51, i32 0, i32 73
  %52 = load %struct.buffer_text*, %struct.buffer_text** %text50, align 8
  %gap_size51 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %52, i32 0, i32 5
  %53 = load i64, i64* %gap_size51, align 8
  br label %cond.end.53

cond.false.52:                                    ; preds = %cond.false.44
  br label %cond.end.53

cond.end.53:                                      ; preds = %cond.false.52, %cond.true.49
  %cond54 = phi i64 [ %53, %cond.true.49 ], [ 0, %cond.false.52 ]
  %54 = load i64, i64* %from_byte, align 8
  %add55 = add nsw i64 %cond54, %54
  %55 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text56 = getelementptr inbounds %struct.buffer, %struct.buffer* %55, i32 0, i32 73
  %56 = load %struct.buffer_text*, %struct.buffer_text** %text56, align 8
  %beg57 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %56, i32 0, i32 0
  %57 = load i8*, i8** %beg57, align 8
  %add.ptr58 = getelementptr inbounds i8, i8* %57, i64 %add55
  %add.ptr59 = getelementptr inbounds i8, i8* %add.ptr58, i64 -1
  %58 = load i8, i8* %add.ptr59, align 1
  %conv60 = zext i8 %58 to i64
  %add61 = add i64 %conv60, 0
  %cmp62 = icmp ult i64 %add61, 128
  br i1 %cmp62, label %cond.true.64, label %cond.false.81

cond.true.64:                                     ; preds = %cond.end.53, %cond.end.37
  %59 = load i64, i64* %from_byte, align 8
  %60 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text65 = getelementptr inbounds %struct.buffer, %struct.buffer* %60, i32 0, i32 73
  %61 = load %struct.buffer_text*, %struct.buffer_text** %text65, align 8
  %gpt_byte66 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %61, i32 0, i32 3
  %62 = load i64, i64* %gpt_byte66, align 8
  %cmp67 = icmp sge i64 %59, %62
  br i1 %cmp67, label %cond.true.69, label %cond.false.72

cond.true.69:                                     ; preds = %cond.true.64
  %63 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text70 = getelementptr inbounds %struct.buffer, %struct.buffer* %63, i32 0, i32 73
  %64 = load %struct.buffer_text*, %struct.buffer_text** %text70, align 8
  %gap_size71 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %64, i32 0, i32 5
  %65 = load i64, i64* %gap_size71, align 8
  br label %cond.end.73

cond.false.72:                                    ; preds = %cond.true.64
  br label %cond.end.73

cond.end.73:                                      ; preds = %cond.false.72, %cond.true.69
  %cond74 = phi i64 [ %65, %cond.true.69 ], [ 0, %cond.false.72 ]
  %66 = load i64, i64* %from_byte, align 8
  %add75 = add nsw i64 %cond74, %66
  %67 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text76 = getelementptr inbounds %struct.buffer, %struct.buffer* %67, i32 0, i32 73
  %68 = load %struct.buffer_text*, %struct.buffer_text** %text76, align 8
  %beg77 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %68, i32 0, i32 0
  %69 = load i8*, i8** %beg77, align 8
  %add.ptr78 = getelementptr inbounds i8, i8* %69, i64 %add75
  %add.ptr79 = getelementptr inbounds i8, i8* %add.ptr78, i64 -1
  %70 = load i8, i8* %add.ptr79, align 1
  %conv80 = zext i8 %70 to i32
  br label %cond.end.99

cond.false.81:                                    ; preds = %cond.end.53, %cond.end.37
  %71 = load i64, i64* %from_byte, align 8
  %72 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text82 = getelementptr inbounds %struct.buffer, %struct.buffer* %72, i32 0, i32 73
  %73 = load %struct.buffer_text*, %struct.buffer_text** %text82, align 8
  %gpt_byte83 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %73, i32 0, i32 3
  %74 = load i64, i64* %gpt_byte83, align 8
  %cmp84 = icmp sge i64 %71, %74
  br i1 %cmp84, label %cond.true.86, label %cond.false.89

cond.true.86:                                     ; preds = %cond.false.81
  %75 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text87 = getelementptr inbounds %struct.buffer, %struct.buffer* %75, i32 0, i32 73
  %76 = load %struct.buffer_text*, %struct.buffer_text** %text87, align 8
  %gap_size88 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %76, i32 0, i32 5
  %77 = load i64, i64* %gap_size88, align 8
  br label %cond.end.90

cond.false.89:                                    ; preds = %cond.false.81
  br label %cond.end.90

cond.end.90:                                      ; preds = %cond.false.89, %cond.true.86
  %cond91 = phi i64 [ %77, %cond.true.86 ], [ 0, %cond.false.89 ]
  %78 = load i64, i64* %from_byte, align 8
  %add92 = add nsw i64 %cond91, %78
  %79 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text93 = getelementptr inbounds %struct.buffer, %struct.buffer* %79, i32 0, i32 73
  %80 = load %struct.buffer_text*, %struct.buffer_text** %text93, align 8
  %beg94 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %80, i32 0, i32 0
  %81 = load i8*, i8** %beg94, align 8
  %add.ptr95 = getelementptr inbounds i8, i8* %81, i64 %add92
  %add.ptr96 = getelementptr inbounds i8, i8* %add.ptr95, i64 -1
  %82 = load i8, i8* %add.ptr96, align 1
  %conv97 = zext i8 %82 to i32
  %add98 = add nsw i32 %conv97, 4194048
  br label %cond.end.99

cond.end.99:                                      ; preds = %cond.end.90, %cond.end.73
  %cond100 = phi i32 [ %conv80, %cond.end.73 ], [ %add98, %cond.end.90 ]
  br label %cond.end.101

cond.end.101:                                     ; preds = %cond.end.99, %cond.true.29
  %cond102 = phi i32 [ %call30, %cond.true.29 ], [ %cond100, %cond.end.99 ]
  store i32 %cond102, i32* %c, align 4
  %83 = load i32, i32* %c, align 4
  %call103 = call i32 @syntax_property_with_flags(i32 %83, i1 zeroext true)
  store i32 %call103, i32* %syntax, align 4
  %84 = load i32, i32* %c, align 4
  %85 = load i8, i8* %multibyte_symbol_p, align 1
  %tobool104 = trunc i8 %85 to i1
  %call105 = call i32 @syntax_multibyte(i32 %84, i1 zeroext %tobool104)
  store i32 %call105, i32* %code, align 4
  %86 = load i32, i32* %syntax, align 4
  %call106 = call zeroext i1 @SYNTAX_FLAGS_COMSTART_FIRST(i32 %86)
  %frombool107 = zext i1 %call106 to i8
  store i8 %frombool107, i8* %comstart_first, align 1
  %87 = load i32, i32* %syntax, align 4
  %call108 = call zeroext i1 @SYNTAX_FLAGS_COMMENT_NESTED(i32 %87)
  %frombool109 = zext i1 %call108 to i8
  store i8 %frombool109, i8* %comnested, align 1
  %88 = load i32, i32* %syntax, align 4
  %call110 = call i32 @SYNTAX_FLAGS_COMMENT_STYLE(i32 %88, i32 0)
  store i32 %call110, i32* %comstyle, align 4
  %89 = load i32, i32* %syntax, align 4
  %call111 = call zeroext i1 @SYNTAX_FLAGS_PREFIX(i32 %89)
  %frombool112 = zext i1 %call111 to i8
  store i8 %frombool112, i8* %prefix, align 1
  %90 = load i64, i64* %depth.addr, align 8
  %91 = load i64, i64* %min_depth, align 8
  %cmp113 = icmp eq i64 %90, %91
  br i1 %cmp113, label %if.then.115, label %if.end.116

if.then.115:                                      ; preds = %cond.end.101
  %92 = load i64, i64* %from.addr, align 8
  store i64 %92, i64* %last_good, align 8
  br label %if.end.116

if.end.116:                                       ; preds = %if.then.115, %cond.end.101
  br label %do.body.117

do.body.117:                                      ; preds = %if.end.116
  %93 = load i64, i64* %from.addr, align 8
  %inc = add nsw i64 %93, 1
  store i64 %inc, i64* %from.addr, align 8
  %94 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_118 = getelementptr inbounds %struct.buffer, %struct.buffer* %94, i32 0, i32 39
  %95 = load i64, i64* %enable_multibyte_characters_118, align 8
  %call119 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp120 = icmp eq i64 %95, %call119
  br i1 %cmp120, label %if.then.122, label %if.else.124

if.then.122:                                      ; preds = %do.body.117
  %96 = load i64, i64* %from_byte, align 8
  %inc123 = add nsw i64 %96, 1
  store i64 %inc123, i64* %from_byte, align 8
  br label %if.end.168

if.else.124:                                      ; preds = %do.body.117
  br label %do.body.125

do.body.125:                                      ; preds = %if.else.124
  %97 = load i64, i64* %from_byte, align 8
  %98 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text126 = getelementptr inbounds %struct.buffer, %struct.buffer* %98, i32 0, i32 73
  %99 = load %struct.buffer_text*, %struct.buffer_text** %text126, align 8
  %gpt_byte127 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %99, i32 0, i32 3
  %100 = load i64, i64* %gpt_byte127, align 8
  %cmp128 = icmp sge i64 %97, %100
  br i1 %cmp128, label %cond.true.130, label %cond.false.133

cond.true.130:                                    ; preds = %do.body.125
  %101 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text131 = getelementptr inbounds %struct.buffer, %struct.buffer* %101, i32 0, i32 73
  %102 = load %struct.buffer_text*, %struct.buffer_text** %text131, align 8
  %gap_size132 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %102, i32 0, i32 5
  %103 = load i64, i64* %gap_size132, align 8
  br label %cond.end.134

cond.false.133:                                   ; preds = %do.body.125
  br label %cond.end.134

cond.end.134:                                     ; preds = %cond.false.133, %cond.true.130
  %cond135 = phi i64 [ %103, %cond.true.130 ], [ 0, %cond.false.133 ]
  %104 = load i64, i64* %from_byte, align 8
  %add136 = add nsw i64 %cond135, %104
  %105 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text137 = getelementptr inbounds %struct.buffer, %struct.buffer* %105, i32 0, i32 73
  %106 = load %struct.buffer_text*, %struct.buffer_text** %text137, align 8
  %beg138 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %106, i32 0, i32 0
  %107 = load i8*, i8** %beg138, align 8
  %add.ptr139 = getelementptr inbounds i8, i8* %107, i64 %add136
  %add.ptr140 = getelementptr inbounds i8, i8* %add.ptr139, i64 -1
  store i8* %add.ptr140, i8** %chp, align 8
  %108 = load i8*, i8** %chp, align 8
  %109 = load i8, i8* %108, align 1
  %conv141 = zext i8 %109 to i32
  %and = and i32 %conv141, 128
  %tobool142 = icmp ne i32 %and, 0
  br i1 %tobool142, label %cond.false.144, label %cond.true.143

cond.true.143:                                    ; preds = %cond.end.134
  br label %cond.end.163

cond.false.144:                                   ; preds = %cond.end.134
  %110 = load i8*, i8** %chp, align 8
  %111 = load i8, i8* %110, align 1
  %conv145 = zext i8 %111 to i32
  %and146 = and i32 %conv145, 32
  %tobool147 = icmp ne i32 %and146, 0
  br i1 %tobool147, label %cond.false.149, label %cond.true.148

cond.true.148:                                    ; preds = %cond.false.144
  br label %cond.end.161

cond.false.149:                                   ; preds = %cond.false.144
  %112 = load i8*, i8** %chp, align 8
  %113 = load i8, i8* %112, align 1
  %conv150 = zext i8 %113 to i32
  %and151 = and i32 %conv150, 16
  %tobool152 = icmp ne i32 %and151, 0
  br i1 %tobool152, label %cond.false.154, label %cond.true.153

cond.true.153:                                    ; preds = %cond.false.149
  br label %cond.end.159

cond.false.154:                                   ; preds = %cond.false.149
  %114 = load i8*, i8** %chp, align 8
  %115 = load i8, i8* %114, align 1
  %conv155 = zext i8 %115 to i32
  %and156 = and i32 %conv155, 8
  %tobool157 = icmp ne i32 %and156, 0
  %lnot = xor i1 %tobool157, true
  %cond158 = select i1 %lnot, i32 4, i32 5
  br label %cond.end.159

cond.end.159:                                     ; preds = %cond.false.154, %cond.true.153
  %cond160 = phi i32 [ 3, %cond.true.153 ], [ %cond158, %cond.false.154 ]
  br label %cond.end.161

cond.end.161:                                     ; preds = %cond.end.159, %cond.true.148
  %cond162 = phi i32 [ 2, %cond.true.148 ], [ %cond160, %cond.end.159 ]
  br label %cond.end.163

cond.end.163:                                     ; preds = %cond.end.161, %cond.true.143
  %cond164 = phi i32 [ 1, %cond.true.143 ], [ %cond162, %cond.end.161 ]
  %conv165 = sext i32 %cond164 to i64
  %116 = load i64, i64* %from_byte, align 8
  %add166 = add nsw i64 %116, %conv165
  store i64 %add166, i64* %from_byte, align 8
  br label %do.end.167

do.end.167:                                       ; preds = %cond.end.163
  br label %if.end.168

if.end.168:                                       ; preds = %do.end.167, %if.then.122
  br label %do.end.169

do.end.169:                                       ; preds = %if.end.168
  %117 = load i64, i64* %from.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_FORWARD(i64 %117)
  %118 = load i64, i64* %from.addr, align 8
  %119 = load i64, i64* %stop, align 8
  %cmp170 = icmp slt i64 %118, %119
  br i1 %cmp170, label %land.lhs.true.172, label %if.end.333

land.lhs.true.172:                                ; preds = %do.end.169
  %120 = load i8, i8* %comstart_first, align 1
  %tobool173 = trunc i8 %120 to i1
  br i1 %tobool173, label %land.lhs.true.175, label %if.end.333

land.lhs.true.175:                                ; preds = %land.lhs.true.172
  %121 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_176 = getelementptr inbounds %struct.buffer, %struct.buffer* %121, i32 0, i32 39
  %122 = load i64, i64* %enable_multibyte_characters_176, align 8
  %call177 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp178 = icmp eq i64 %122, %call177
  br i1 %cmp178, label %cond.false.182, label %cond.true.180

cond.true.180:                                    ; preds = %land.lhs.true.175
  %123 = load i64, i64* %from_byte, align 8
  %call181 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %123)
  br label %cond.end.260

cond.false.182:                                   ; preds = %land.lhs.true.175
  br i1 true, label %cond.true.183, label %cond.false.203

cond.true.183:                                    ; preds = %cond.false.182
  %124 = load i64, i64* %from_byte, align 8
  %125 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text184 = getelementptr inbounds %struct.buffer, %struct.buffer* %125, i32 0, i32 73
  %126 = load %struct.buffer_text*, %struct.buffer_text** %text184, align 8
  %gpt_byte185 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %126, i32 0, i32 3
  %127 = load i64, i64* %gpt_byte185, align 8
  %cmp186 = icmp sge i64 %124, %127
  br i1 %cmp186, label %cond.true.188, label %cond.false.191

cond.true.188:                                    ; preds = %cond.true.183
  %128 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text189 = getelementptr inbounds %struct.buffer, %struct.buffer* %128, i32 0, i32 73
  %129 = load %struct.buffer_text*, %struct.buffer_text** %text189, align 8
  %gap_size190 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %129, i32 0, i32 5
  %130 = load i64, i64* %gap_size190, align 8
  br label %cond.end.192

cond.false.191:                                   ; preds = %cond.true.183
  br label %cond.end.192

cond.end.192:                                     ; preds = %cond.false.191, %cond.true.188
  %cond193 = phi i64 [ %130, %cond.true.188 ], [ 0, %cond.false.191 ]
  %131 = load i64, i64* %from_byte, align 8
  %add194 = add nsw i64 %cond193, %131
  %132 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text195 = getelementptr inbounds %struct.buffer, %struct.buffer* %132, i32 0, i32 73
  %133 = load %struct.buffer_text*, %struct.buffer_text** %text195, align 8
  %beg196 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %133, i32 0, i32 0
  %134 = load i8*, i8** %beg196, align 8
  %add.ptr197 = getelementptr inbounds i8, i8* %134, i64 %add194
  %add.ptr198 = getelementptr inbounds i8, i8* %add.ptr197, i64 -1
  %135 = load i8, i8* %add.ptr198, align 1
  %conv199 = zext i8 %135 to i32
  %add200 = add i32 %conv199, 0
  %cmp201 = icmp ult i32 %add200, 128
  br i1 %cmp201, label %cond.true.223, label %cond.false.240

cond.false.203:                                   ; preds = %cond.false.182
  %136 = load i64, i64* %from_byte, align 8
  %137 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text204 = getelementptr inbounds %struct.buffer, %struct.buffer* %137, i32 0, i32 73
  %138 = load %struct.buffer_text*, %struct.buffer_text** %text204, align 8
  %gpt_byte205 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %138, i32 0, i32 3
  %139 = load i64, i64* %gpt_byte205, align 8
  %cmp206 = icmp sge i64 %136, %139
  br i1 %cmp206, label %cond.true.208, label %cond.false.211

cond.true.208:                                    ; preds = %cond.false.203
  %140 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text209 = getelementptr inbounds %struct.buffer, %struct.buffer* %140, i32 0, i32 73
  %141 = load %struct.buffer_text*, %struct.buffer_text** %text209, align 8
  %gap_size210 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %141, i32 0, i32 5
  %142 = load i64, i64* %gap_size210, align 8
  br label %cond.end.212

cond.false.211:                                   ; preds = %cond.false.203
  br label %cond.end.212

cond.end.212:                                     ; preds = %cond.false.211, %cond.true.208
  %cond213 = phi i64 [ %142, %cond.true.208 ], [ 0, %cond.false.211 ]
  %143 = load i64, i64* %from_byte, align 8
  %add214 = add nsw i64 %cond213, %143
  %144 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text215 = getelementptr inbounds %struct.buffer, %struct.buffer* %144, i32 0, i32 73
  %145 = load %struct.buffer_text*, %struct.buffer_text** %text215, align 8
  %beg216 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %145, i32 0, i32 0
  %146 = load i8*, i8** %beg216, align 8
  %add.ptr217 = getelementptr inbounds i8, i8* %146, i64 %add214
  %add.ptr218 = getelementptr inbounds i8, i8* %add.ptr217, i64 -1
  %147 = load i8, i8* %add.ptr218, align 1
  %conv219 = zext i8 %147 to i64
  %add220 = add i64 %conv219, 0
  %cmp221 = icmp ult i64 %add220, 128
  br i1 %cmp221, label %cond.true.223, label %cond.false.240

cond.true.223:                                    ; preds = %cond.end.212, %cond.end.192
  %148 = load i64, i64* %from_byte, align 8
  %149 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text224 = getelementptr inbounds %struct.buffer, %struct.buffer* %149, i32 0, i32 73
  %150 = load %struct.buffer_text*, %struct.buffer_text** %text224, align 8
  %gpt_byte225 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %150, i32 0, i32 3
  %151 = load i64, i64* %gpt_byte225, align 8
  %cmp226 = icmp sge i64 %148, %151
  br i1 %cmp226, label %cond.true.228, label %cond.false.231

cond.true.228:                                    ; preds = %cond.true.223
  %152 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text229 = getelementptr inbounds %struct.buffer, %struct.buffer* %152, i32 0, i32 73
  %153 = load %struct.buffer_text*, %struct.buffer_text** %text229, align 8
  %gap_size230 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %153, i32 0, i32 5
  %154 = load i64, i64* %gap_size230, align 8
  br label %cond.end.232

cond.false.231:                                   ; preds = %cond.true.223
  br label %cond.end.232

cond.end.232:                                     ; preds = %cond.false.231, %cond.true.228
  %cond233 = phi i64 [ %154, %cond.true.228 ], [ 0, %cond.false.231 ]
  %155 = load i64, i64* %from_byte, align 8
  %add234 = add nsw i64 %cond233, %155
  %156 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text235 = getelementptr inbounds %struct.buffer, %struct.buffer* %156, i32 0, i32 73
  %157 = load %struct.buffer_text*, %struct.buffer_text** %text235, align 8
  %beg236 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %157, i32 0, i32 0
  %158 = load i8*, i8** %beg236, align 8
  %add.ptr237 = getelementptr inbounds i8, i8* %158, i64 %add234
  %add.ptr238 = getelementptr inbounds i8, i8* %add.ptr237, i64 -1
  %159 = load i8, i8* %add.ptr238, align 1
  %conv239 = zext i8 %159 to i32
  br label %cond.end.258

cond.false.240:                                   ; preds = %cond.end.212, %cond.end.192
  %160 = load i64, i64* %from_byte, align 8
  %161 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text241 = getelementptr inbounds %struct.buffer, %struct.buffer* %161, i32 0, i32 73
  %162 = load %struct.buffer_text*, %struct.buffer_text** %text241, align 8
  %gpt_byte242 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %162, i32 0, i32 3
  %163 = load i64, i64* %gpt_byte242, align 8
  %cmp243 = icmp sge i64 %160, %163
  br i1 %cmp243, label %cond.true.245, label %cond.false.248

cond.true.245:                                    ; preds = %cond.false.240
  %164 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text246 = getelementptr inbounds %struct.buffer, %struct.buffer* %164, i32 0, i32 73
  %165 = load %struct.buffer_text*, %struct.buffer_text** %text246, align 8
  %gap_size247 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %165, i32 0, i32 5
  %166 = load i64, i64* %gap_size247, align 8
  br label %cond.end.249

cond.false.248:                                   ; preds = %cond.false.240
  br label %cond.end.249

cond.end.249:                                     ; preds = %cond.false.248, %cond.true.245
  %cond250 = phi i64 [ %166, %cond.true.245 ], [ 0, %cond.false.248 ]
  %167 = load i64, i64* %from_byte, align 8
  %add251 = add nsw i64 %cond250, %167
  %168 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text252 = getelementptr inbounds %struct.buffer, %struct.buffer* %168, i32 0, i32 73
  %169 = load %struct.buffer_text*, %struct.buffer_text** %text252, align 8
  %beg253 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %169, i32 0, i32 0
  %170 = load i8*, i8** %beg253, align 8
  %add.ptr254 = getelementptr inbounds i8, i8* %170, i64 %add251
  %add.ptr255 = getelementptr inbounds i8, i8* %add.ptr254, i64 -1
  %171 = load i8, i8* %add.ptr255, align 1
  %conv256 = zext i8 %171 to i32
  %add257 = add nsw i32 %conv256, 4194048
  br label %cond.end.258

cond.end.258:                                     ; preds = %cond.end.249, %cond.end.232
  %cond259 = phi i32 [ %conv239, %cond.end.232 ], [ %add257, %cond.end.249 ]
  br label %cond.end.260

cond.end.260:                                     ; preds = %cond.end.258, %cond.true.180
  %cond261 = phi i32 [ %call181, %cond.true.180 ], [ %cond259, %cond.end.258 ]
  store i32 %cond261, i32* %c, align 4
  %172 = load i32, i32* %c, align 4
  %call262 = call i32 @syntax_property_with_flags(i32 %172, i1 zeroext true)
  store i32 %call262, i32* %other_syntax, align 4
  %173 = load i32, i32* %other_syntax, align 4
  %call263 = call zeroext i1 @SYNTAX_FLAGS_COMSTART_SECOND(i32 %173)
  br i1 %call263, label %land.lhs.true.265, label %if.end.333

land.lhs.true.265:                                ; preds = %cond.end.260
  %174 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 479), align 1
  %tobool266 = trunc i8 %174 to i1
  br i1 %tobool266, label %if.then.268, label %if.end.333

if.then.268:                                      ; preds = %land.lhs.true.265
  store i32 11, i32* %code, align 4
  %175 = load i32, i32* %other_syntax, align 4
  %176 = load i32, i32* %syntax, align 4
  %call269 = call i32 @SYNTAX_FLAGS_COMMENT_STYLE(i32 %175, i32 %176)
  store i32 %call269, i32* %comstyle, align 4
  %177 = load i32, i32* %other_syntax, align 4
  %call270 = call zeroext i1 @SYNTAX_FLAGS_COMMENT_NESTED(i32 %177)
  %conv271 = zext i1 %call270 to i32
  %178 = load i8, i8* %comnested, align 1
  %tobool272 = trunc i8 %178 to i1
  %conv273 = zext i1 %tobool272 to i32
  %or = or i32 %conv273, %conv271
  %tobool274 = icmp ne i32 %or, 0
  %frombool275 = zext i1 %tobool274 to i8
  store i8 %frombool275, i8* %comnested, align 1
  br label %do.body.276

do.body.276:                                      ; preds = %if.then.268
  %179 = load i64, i64* %from.addr, align 8
  %inc277 = add nsw i64 %179, 1
  store i64 %inc277, i64* %from.addr, align 8
  %180 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_278 = getelementptr inbounds %struct.buffer, %struct.buffer* %180, i32 0, i32 39
  %181 = load i64, i64* %enable_multibyte_characters_278, align 8
  %call279 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp280 = icmp eq i64 %181, %call279
  br i1 %cmp280, label %if.then.282, label %if.else.284

if.then.282:                                      ; preds = %do.body.276
  %182 = load i64, i64* %from_byte, align 8
  %inc283 = add nsw i64 %182, 1
  store i64 %inc283, i64* %from_byte, align 8
  br label %if.end.331

if.else.284:                                      ; preds = %do.body.276
  br label %do.body.285

do.body.285:                                      ; preds = %if.else.284
  %183 = load i64, i64* %from_byte, align 8
  %184 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text287 = getelementptr inbounds %struct.buffer, %struct.buffer* %184, i32 0, i32 73
  %185 = load %struct.buffer_text*, %struct.buffer_text** %text287, align 8
  %gpt_byte288 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %185, i32 0, i32 3
  %186 = load i64, i64* %gpt_byte288, align 8
  %cmp289 = icmp sge i64 %183, %186
  br i1 %cmp289, label %cond.true.291, label %cond.false.294

cond.true.291:                                    ; preds = %do.body.285
  %187 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text292 = getelementptr inbounds %struct.buffer, %struct.buffer* %187, i32 0, i32 73
  %188 = load %struct.buffer_text*, %struct.buffer_text** %text292, align 8
  %gap_size293 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %188, i32 0, i32 5
  %189 = load i64, i64* %gap_size293, align 8
  br label %cond.end.295

cond.false.294:                                   ; preds = %do.body.285
  br label %cond.end.295

cond.end.295:                                     ; preds = %cond.false.294, %cond.true.291
  %cond296 = phi i64 [ %189, %cond.true.291 ], [ 0, %cond.false.294 ]
  %190 = load i64, i64* %from_byte, align 8
  %add297 = add nsw i64 %cond296, %190
  %191 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text298 = getelementptr inbounds %struct.buffer, %struct.buffer* %191, i32 0, i32 73
  %192 = load %struct.buffer_text*, %struct.buffer_text** %text298, align 8
  %beg299 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %192, i32 0, i32 0
  %193 = load i8*, i8** %beg299, align 8
  %add.ptr300 = getelementptr inbounds i8, i8* %193, i64 %add297
  %add.ptr301 = getelementptr inbounds i8, i8* %add.ptr300, i64 -1
  store i8* %add.ptr301, i8** %chp286, align 8
  %194 = load i8*, i8** %chp286, align 8
  %195 = load i8, i8* %194, align 1
  %conv302 = zext i8 %195 to i32
  %and303 = and i32 %conv302, 128
  %tobool304 = icmp ne i32 %and303, 0
  br i1 %tobool304, label %cond.false.306, label %cond.true.305

cond.true.305:                                    ; preds = %cond.end.295
  br label %cond.end.326

cond.false.306:                                   ; preds = %cond.end.295
  %196 = load i8*, i8** %chp286, align 8
  %197 = load i8, i8* %196, align 1
  %conv307 = zext i8 %197 to i32
  %and308 = and i32 %conv307, 32
  %tobool309 = icmp ne i32 %and308, 0
  br i1 %tobool309, label %cond.false.311, label %cond.true.310

cond.true.310:                                    ; preds = %cond.false.306
  br label %cond.end.324

cond.false.311:                                   ; preds = %cond.false.306
  %198 = load i8*, i8** %chp286, align 8
  %199 = load i8, i8* %198, align 1
  %conv312 = zext i8 %199 to i32
  %and313 = and i32 %conv312, 16
  %tobool314 = icmp ne i32 %and313, 0
  br i1 %tobool314, label %cond.false.316, label %cond.true.315

cond.true.315:                                    ; preds = %cond.false.311
  br label %cond.end.322

cond.false.316:                                   ; preds = %cond.false.311
  %200 = load i8*, i8** %chp286, align 8
  %201 = load i8, i8* %200, align 1
  %conv317 = zext i8 %201 to i32
  %and318 = and i32 %conv317, 8
  %tobool319 = icmp ne i32 %and318, 0
  %lnot320 = xor i1 %tobool319, true
  %cond321 = select i1 %lnot320, i32 4, i32 5
  br label %cond.end.322

cond.end.322:                                     ; preds = %cond.false.316, %cond.true.315
  %cond323 = phi i32 [ 3, %cond.true.315 ], [ %cond321, %cond.false.316 ]
  br label %cond.end.324

cond.end.324:                                     ; preds = %cond.end.322, %cond.true.310
  %cond325 = phi i32 [ 2, %cond.true.310 ], [ %cond323, %cond.end.322 ]
  br label %cond.end.326

cond.end.326:                                     ; preds = %cond.end.324, %cond.true.305
  %cond327 = phi i32 [ 1, %cond.true.305 ], [ %cond325, %cond.end.324 ]
  %conv328 = sext i32 %cond327 to i64
  %202 = load i64, i64* %from_byte, align 8
  %add329 = add nsw i64 %202, %conv328
  store i64 %add329, i64* %from_byte, align 8
  br label %do.end.330

do.end.330:                                       ; preds = %cond.end.326
  br label %if.end.331

if.end.331:                                       ; preds = %do.end.330, %if.then.282
  br label %do.end.332

do.end.332:                                       ; preds = %if.end.331
  %203 = load i64, i64* %from.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_FORWARD(i64 %203)
  br label %if.end.333

if.end.333:                                       ; preds = %do.end.332, %land.lhs.true.265, %cond.end.260, %land.lhs.true.172, %do.end.169
  %204 = load i8, i8* %prefix, align 1
  %tobool334 = trunc i8 %204 to i1
  br i1 %tobool334, label %if.then.335, label %if.end.336

if.then.335:                                      ; preds = %if.end.333
  br label %while.cond.24

if.end.336:                                       ; preds = %if.end.333
  %205 = load i32, i32* %code, align 4
  switch i32 %205, label %sw.default.1243 [
    i32 9, label %sw.bb
    i32 10, label %sw.bb
    i32 2, label %sw.bb.398
    i32 3, label %sw.bb.398
    i32 14, label %sw.bb.615
    i32 11, label %sw.bb.616
    i32 8, label %sw.bb.688
    i32 4, label %sw.bb.845
    i32 5, label %sw.bb.850
    i32 7, label %sw.bb.863
    i32 15, label %sw.bb.863
  ]

sw.bb:                                            ; preds = %if.end.336, %if.end.336
  %206 = load i64, i64* %from.addr, align 8
  %207 = load i64, i64* %stop, align 8
  %cmp337 = icmp eq i64 %206, %207
  br i1 %cmp337, label %if.then.339, label %if.end.340

if.then.339:                                      ; preds = %sw.bb
  br label %lose

if.end.340:                                       ; preds = %sw.bb
  br label %do.body.341

do.body.341:                                      ; preds = %if.end.340
  %208 = load i64, i64* %from.addr, align 8
  %inc342 = add nsw i64 %208, 1
  store i64 %inc342, i64* %from.addr, align 8
  %209 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_343 = getelementptr inbounds %struct.buffer, %struct.buffer* %209, i32 0, i32 39
  %210 = load i64, i64* %enable_multibyte_characters_343, align 8
  %call344 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp345 = icmp eq i64 %210, %call344
  br i1 %cmp345, label %if.then.347, label %if.else.349

if.then.347:                                      ; preds = %do.body.341
  %211 = load i64, i64* %from_byte, align 8
  %inc348 = add nsw i64 %211, 1
  store i64 %inc348, i64* %from_byte, align 8
  br label %if.end.396

if.else.349:                                      ; preds = %do.body.341
  br label %do.body.350

do.body.350:                                      ; preds = %if.else.349
  %212 = load i64, i64* %from_byte, align 8
  %213 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text352 = getelementptr inbounds %struct.buffer, %struct.buffer* %213, i32 0, i32 73
  %214 = load %struct.buffer_text*, %struct.buffer_text** %text352, align 8
  %gpt_byte353 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %214, i32 0, i32 3
  %215 = load i64, i64* %gpt_byte353, align 8
  %cmp354 = icmp sge i64 %212, %215
  br i1 %cmp354, label %cond.true.356, label %cond.false.359

cond.true.356:                                    ; preds = %do.body.350
  %216 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text357 = getelementptr inbounds %struct.buffer, %struct.buffer* %216, i32 0, i32 73
  %217 = load %struct.buffer_text*, %struct.buffer_text** %text357, align 8
  %gap_size358 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %217, i32 0, i32 5
  %218 = load i64, i64* %gap_size358, align 8
  br label %cond.end.360

cond.false.359:                                   ; preds = %do.body.350
  br label %cond.end.360

cond.end.360:                                     ; preds = %cond.false.359, %cond.true.356
  %cond361 = phi i64 [ %218, %cond.true.356 ], [ 0, %cond.false.359 ]
  %219 = load i64, i64* %from_byte, align 8
  %add362 = add nsw i64 %cond361, %219
  %220 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text363 = getelementptr inbounds %struct.buffer, %struct.buffer* %220, i32 0, i32 73
  %221 = load %struct.buffer_text*, %struct.buffer_text** %text363, align 8
  %beg364 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %221, i32 0, i32 0
  %222 = load i8*, i8** %beg364, align 8
  %add.ptr365 = getelementptr inbounds i8, i8* %222, i64 %add362
  %add.ptr366 = getelementptr inbounds i8, i8* %add.ptr365, i64 -1
  store i8* %add.ptr366, i8** %chp351, align 8
  %223 = load i8*, i8** %chp351, align 8
  %224 = load i8, i8* %223, align 1
  %conv367 = zext i8 %224 to i32
  %and368 = and i32 %conv367, 128
  %tobool369 = icmp ne i32 %and368, 0
  br i1 %tobool369, label %cond.false.371, label %cond.true.370

cond.true.370:                                    ; preds = %cond.end.360
  br label %cond.end.391

cond.false.371:                                   ; preds = %cond.end.360
  %225 = load i8*, i8** %chp351, align 8
  %226 = load i8, i8* %225, align 1
  %conv372 = zext i8 %226 to i32
  %and373 = and i32 %conv372, 32
  %tobool374 = icmp ne i32 %and373, 0
  br i1 %tobool374, label %cond.false.376, label %cond.true.375

cond.true.375:                                    ; preds = %cond.false.371
  br label %cond.end.389

cond.false.376:                                   ; preds = %cond.false.371
  %227 = load i8*, i8** %chp351, align 8
  %228 = load i8, i8* %227, align 1
  %conv377 = zext i8 %228 to i32
  %and378 = and i32 %conv377, 16
  %tobool379 = icmp ne i32 %and378, 0
  br i1 %tobool379, label %cond.false.381, label %cond.true.380

cond.true.380:                                    ; preds = %cond.false.376
  br label %cond.end.387

cond.false.381:                                   ; preds = %cond.false.376
  %229 = load i8*, i8** %chp351, align 8
  %230 = load i8, i8* %229, align 1
  %conv382 = zext i8 %230 to i32
  %and383 = and i32 %conv382, 8
  %tobool384 = icmp ne i32 %and383, 0
  %lnot385 = xor i1 %tobool384, true
  %cond386 = select i1 %lnot385, i32 4, i32 5
  br label %cond.end.387

cond.end.387:                                     ; preds = %cond.false.381, %cond.true.380
  %cond388 = phi i32 [ 3, %cond.true.380 ], [ %cond386, %cond.false.381 ]
  br label %cond.end.389

cond.end.389:                                     ; preds = %cond.end.387, %cond.true.375
  %cond390 = phi i32 [ 2, %cond.true.375 ], [ %cond388, %cond.end.387 ]
  br label %cond.end.391

cond.end.391:                                     ; preds = %cond.end.389, %cond.true.370
  %cond392 = phi i32 [ 1, %cond.true.370 ], [ %cond390, %cond.end.389 ]
  %conv393 = sext i32 %cond392 to i64
  %231 = load i64, i64* %from_byte, align 8
  %add394 = add nsw i64 %231, %conv393
  store i64 %add394, i64* %from_byte, align 8
  br label %do.end.395

do.end.395:                                       ; preds = %cond.end.391
  br label %if.end.396

if.end.396:                                       ; preds = %do.end.395, %if.then.347
  br label %do.end.397

do.end.397:                                       ; preds = %if.end.396
  br label %sw.bb.398

sw.bb.398:                                        ; preds = %if.end.336, %if.end.336, %do.end.397
  %232 = load i64, i64* %depth.addr, align 8
  %tobool399 = icmp ne i64 %232, 0
  br i1 %tobool399, label %if.then.401, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb.398
  %233 = load i8, i8* %sexpflag.addr, align 1
  %tobool400 = trunc i8 %233 to i1
  br i1 %tobool400, label %if.end.402, label %if.then.401

if.then.401:                                      ; preds = %lor.lhs.false, %sw.bb.398
  br label %sw.epilog.1244

if.end.402:                                       ; preds = %lor.lhs.false
  br label %while.cond.403

while.cond.403:                                   ; preds = %do.end.614, %if.end.402
  %234 = load i64, i64* %from.addr, align 8
  %235 = load i64, i64* %stop, align 8
  %cmp404 = icmp slt i64 %234, %235
  br i1 %cmp404, label %while.body.406, label %while.end

while.body.406:                                   ; preds = %while.cond.403
  %236 = load i64, i64* %from.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_FORWARD(i64 %236)
  %237 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_407 = getelementptr inbounds %struct.buffer, %struct.buffer* %237, i32 0, i32 39
  %238 = load i64, i64* %enable_multibyte_characters_407, align 8
  %call408 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp409 = icmp eq i64 %238, %call408
  br i1 %cmp409, label %cond.false.413, label %cond.true.411

cond.true.411:                                    ; preds = %while.body.406
  %239 = load i64, i64* %from_byte, align 8
  %call412 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %239)
  br label %cond.end.491

cond.false.413:                                   ; preds = %while.body.406
  br i1 true, label %cond.true.414, label %cond.false.434

cond.true.414:                                    ; preds = %cond.false.413
  %240 = load i64, i64* %from_byte, align 8
  %241 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text415 = getelementptr inbounds %struct.buffer, %struct.buffer* %241, i32 0, i32 73
  %242 = load %struct.buffer_text*, %struct.buffer_text** %text415, align 8
  %gpt_byte416 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %242, i32 0, i32 3
  %243 = load i64, i64* %gpt_byte416, align 8
  %cmp417 = icmp sge i64 %240, %243
  br i1 %cmp417, label %cond.true.419, label %cond.false.422

cond.true.419:                                    ; preds = %cond.true.414
  %244 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text420 = getelementptr inbounds %struct.buffer, %struct.buffer* %244, i32 0, i32 73
  %245 = load %struct.buffer_text*, %struct.buffer_text** %text420, align 8
  %gap_size421 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %245, i32 0, i32 5
  %246 = load i64, i64* %gap_size421, align 8
  br label %cond.end.423

cond.false.422:                                   ; preds = %cond.true.414
  br label %cond.end.423

cond.end.423:                                     ; preds = %cond.false.422, %cond.true.419
  %cond424 = phi i64 [ %246, %cond.true.419 ], [ 0, %cond.false.422 ]
  %247 = load i64, i64* %from_byte, align 8
  %add425 = add nsw i64 %cond424, %247
  %248 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text426 = getelementptr inbounds %struct.buffer, %struct.buffer* %248, i32 0, i32 73
  %249 = load %struct.buffer_text*, %struct.buffer_text** %text426, align 8
  %beg427 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %249, i32 0, i32 0
  %250 = load i8*, i8** %beg427, align 8
  %add.ptr428 = getelementptr inbounds i8, i8* %250, i64 %add425
  %add.ptr429 = getelementptr inbounds i8, i8* %add.ptr428, i64 -1
  %251 = load i8, i8* %add.ptr429, align 1
  %conv430 = zext i8 %251 to i32
  %add431 = add i32 %conv430, 0
  %cmp432 = icmp ult i32 %add431, 128
  br i1 %cmp432, label %cond.true.454, label %cond.false.471

cond.false.434:                                   ; preds = %cond.false.413
  %252 = load i64, i64* %from_byte, align 8
  %253 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text435 = getelementptr inbounds %struct.buffer, %struct.buffer* %253, i32 0, i32 73
  %254 = load %struct.buffer_text*, %struct.buffer_text** %text435, align 8
  %gpt_byte436 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %254, i32 0, i32 3
  %255 = load i64, i64* %gpt_byte436, align 8
  %cmp437 = icmp sge i64 %252, %255
  br i1 %cmp437, label %cond.true.439, label %cond.false.442

cond.true.439:                                    ; preds = %cond.false.434
  %256 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text440 = getelementptr inbounds %struct.buffer, %struct.buffer* %256, i32 0, i32 73
  %257 = load %struct.buffer_text*, %struct.buffer_text** %text440, align 8
  %gap_size441 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %257, i32 0, i32 5
  %258 = load i64, i64* %gap_size441, align 8
  br label %cond.end.443

cond.false.442:                                   ; preds = %cond.false.434
  br label %cond.end.443

cond.end.443:                                     ; preds = %cond.false.442, %cond.true.439
  %cond444 = phi i64 [ %258, %cond.true.439 ], [ 0, %cond.false.442 ]
  %259 = load i64, i64* %from_byte, align 8
  %add445 = add nsw i64 %cond444, %259
  %260 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text446 = getelementptr inbounds %struct.buffer, %struct.buffer* %260, i32 0, i32 73
  %261 = load %struct.buffer_text*, %struct.buffer_text** %text446, align 8
  %beg447 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %261, i32 0, i32 0
  %262 = load i8*, i8** %beg447, align 8
  %add.ptr448 = getelementptr inbounds i8, i8* %262, i64 %add445
  %add.ptr449 = getelementptr inbounds i8, i8* %add.ptr448, i64 -1
  %263 = load i8, i8* %add.ptr449, align 1
  %conv450 = zext i8 %263 to i64
  %add451 = add i64 %conv450, 0
  %cmp452 = icmp ult i64 %add451, 128
  br i1 %cmp452, label %cond.true.454, label %cond.false.471

cond.true.454:                                    ; preds = %cond.end.443, %cond.end.423
  %264 = load i64, i64* %from_byte, align 8
  %265 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text455 = getelementptr inbounds %struct.buffer, %struct.buffer* %265, i32 0, i32 73
  %266 = load %struct.buffer_text*, %struct.buffer_text** %text455, align 8
  %gpt_byte456 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %266, i32 0, i32 3
  %267 = load i64, i64* %gpt_byte456, align 8
  %cmp457 = icmp sge i64 %264, %267
  br i1 %cmp457, label %cond.true.459, label %cond.false.462

cond.true.459:                                    ; preds = %cond.true.454
  %268 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text460 = getelementptr inbounds %struct.buffer, %struct.buffer* %268, i32 0, i32 73
  %269 = load %struct.buffer_text*, %struct.buffer_text** %text460, align 8
  %gap_size461 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %269, i32 0, i32 5
  %270 = load i64, i64* %gap_size461, align 8
  br label %cond.end.463

cond.false.462:                                   ; preds = %cond.true.454
  br label %cond.end.463

cond.end.463:                                     ; preds = %cond.false.462, %cond.true.459
  %cond464 = phi i64 [ %270, %cond.true.459 ], [ 0, %cond.false.462 ]
  %271 = load i64, i64* %from_byte, align 8
  %add465 = add nsw i64 %cond464, %271
  %272 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text466 = getelementptr inbounds %struct.buffer, %struct.buffer* %272, i32 0, i32 73
  %273 = load %struct.buffer_text*, %struct.buffer_text** %text466, align 8
  %beg467 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %273, i32 0, i32 0
  %274 = load i8*, i8** %beg467, align 8
  %add.ptr468 = getelementptr inbounds i8, i8* %274, i64 %add465
  %add.ptr469 = getelementptr inbounds i8, i8* %add.ptr468, i64 -1
  %275 = load i8, i8* %add.ptr469, align 1
  %conv470 = zext i8 %275 to i32
  br label %cond.end.489

cond.false.471:                                   ; preds = %cond.end.443, %cond.end.423
  %276 = load i64, i64* %from_byte, align 8
  %277 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text472 = getelementptr inbounds %struct.buffer, %struct.buffer* %277, i32 0, i32 73
  %278 = load %struct.buffer_text*, %struct.buffer_text** %text472, align 8
  %gpt_byte473 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %278, i32 0, i32 3
  %279 = load i64, i64* %gpt_byte473, align 8
  %cmp474 = icmp sge i64 %276, %279
  br i1 %cmp474, label %cond.true.476, label %cond.false.479

cond.true.476:                                    ; preds = %cond.false.471
  %280 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text477 = getelementptr inbounds %struct.buffer, %struct.buffer* %280, i32 0, i32 73
  %281 = load %struct.buffer_text*, %struct.buffer_text** %text477, align 8
  %gap_size478 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %281, i32 0, i32 5
  %282 = load i64, i64* %gap_size478, align 8
  br label %cond.end.480

cond.false.479:                                   ; preds = %cond.false.471
  br label %cond.end.480

cond.end.480:                                     ; preds = %cond.false.479, %cond.true.476
  %cond481 = phi i64 [ %282, %cond.true.476 ], [ 0, %cond.false.479 ]
  %283 = load i64, i64* %from_byte, align 8
  %add482 = add nsw i64 %cond481, %283
  %284 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text483 = getelementptr inbounds %struct.buffer, %struct.buffer* %284, i32 0, i32 73
  %285 = load %struct.buffer_text*, %struct.buffer_text** %text483, align 8
  %beg484 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %285, i32 0, i32 0
  %286 = load i8*, i8** %beg484, align 8
  %add.ptr485 = getelementptr inbounds i8, i8* %286, i64 %add482
  %add.ptr486 = getelementptr inbounds i8, i8* %add.ptr485, i64 -1
  %287 = load i8, i8* %add.ptr486, align 1
  %conv487 = zext i8 %287 to i32
  %add488 = add nsw i32 %conv487, 4194048
  br label %cond.end.489

cond.end.489:                                     ; preds = %cond.end.480, %cond.end.463
  %cond490 = phi i32 [ %conv470, %cond.end.463 ], [ %add488, %cond.end.480 ]
  br label %cond.end.491

cond.end.491:                                     ; preds = %cond.end.489, %cond.true.411
  %cond492 = phi i32 [ %call412, %cond.true.411 ], [ %cond490, %cond.end.489 ]
  store i32 %cond492, i32* %c, align 4
  %288 = load i32, i32* %c, align 4
  %289 = load i8, i8* %multibyte_symbol_p, align 1
  %tobool493 = trunc i8 %289 to i1
  %call494 = call i32 @syntax_multibyte(i32 %288, i1 zeroext %tobool493)
  switch i32 %call494, label %sw.default [
    i32 10, label %sw.bb.495
    i32 9, label %sw.bb.495
    i32 2, label %sw.bb.557
    i32 3, label %sw.bb.557
    i32 6, label %sw.bb.557
  ]

sw.bb.495:                                        ; preds = %cond.end.491, %cond.end.491
  br label %do.body.496

do.body.496:                                      ; preds = %sw.bb.495
  %290 = load i64, i64* %from.addr, align 8
  %inc497 = add nsw i64 %290, 1
  store i64 %inc497, i64* %from.addr, align 8
  %291 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_498 = getelementptr inbounds %struct.buffer, %struct.buffer* %291, i32 0, i32 39
  %292 = load i64, i64* %enable_multibyte_characters_498, align 8
  %call499 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp500 = icmp eq i64 %292, %call499
  br i1 %cmp500, label %if.then.502, label %if.else.504

if.then.502:                                      ; preds = %do.body.496
  %293 = load i64, i64* %from_byte, align 8
  %inc503 = add nsw i64 %293, 1
  store i64 %inc503, i64* %from_byte, align 8
  br label %if.end.551

if.else.504:                                      ; preds = %do.body.496
  br label %do.body.505

do.body.505:                                      ; preds = %if.else.504
  %294 = load i64, i64* %from_byte, align 8
  %295 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text507 = getelementptr inbounds %struct.buffer, %struct.buffer* %295, i32 0, i32 73
  %296 = load %struct.buffer_text*, %struct.buffer_text** %text507, align 8
  %gpt_byte508 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %296, i32 0, i32 3
  %297 = load i64, i64* %gpt_byte508, align 8
  %cmp509 = icmp sge i64 %294, %297
  br i1 %cmp509, label %cond.true.511, label %cond.false.514

cond.true.511:                                    ; preds = %do.body.505
  %298 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text512 = getelementptr inbounds %struct.buffer, %struct.buffer* %298, i32 0, i32 73
  %299 = load %struct.buffer_text*, %struct.buffer_text** %text512, align 8
  %gap_size513 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %299, i32 0, i32 5
  %300 = load i64, i64* %gap_size513, align 8
  br label %cond.end.515

cond.false.514:                                   ; preds = %do.body.505
  br label %cond.end.515

cond.end.515:                                     ; preds = %cond.false.514, %cond.true.511
  %cond516 = phi i64 [ %300, %cond.true.511 ], [ 0, %cond.false.514 ]
  %301 = load i64, i64* %from_byte, align 8
  %add517 = add nsw i64 %cond516, %301
  %302 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text518 = getelementptr inbounds %struct.buffer, %struct.buffer* %302, i32 0, i32 73
  %303 = load %struct.buffer_text*, %struct.buffer_text** %text518, align 8
  %beg519 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %303, i32 0, i32 0
  %304 = load i8*, i8** %beg519, align 8
  %add.ptr520 = getelementptr inbounds i8, i8* %304, i64 %add517
  %add.ptr521 = getelementptr inbounds i8, i8* %add.ptr520, i64 -1
  store i8* %add.ptr521, i8** %chp506, align 8
  %305 = load i8*, i8** %chp506, align 8
  %306 = load i8, i8* %305, align 1
  %conv522 = zext i8 %306 to i32
  %and523 = and i32 %conv522, 128
  %tobool524 = icmp ne i32 %and523, 0
  br i1 %tobool524, label %cond.false.526, label %cond.true.525

cond.true.525:                                    ; preds = %cond.end.515
  br label %cond.end.546

cond.false.526:                                   ; preds = %cond.end.515
  %307 = load i8*, i8** %chp506, align 8
  %308 = load i8, i8* %307, align 1
  %conv527 = zext i8 %308 to i32
  %and528 = and i32 %conv527, 32
  %tobool529 = icmp ne i32 %and528, 0
  br i1 %tobool529, label %cond.false.531, label %cond.true.530

cond.true.530:                                    ; preds = %cond.false.526
  br label %cond.end.544

cond.false.531:                                   ; preds = %cond.false.526
  %309 = load i8*, i8** %chp506, align 8
  %310 = load i8, i8* %309, align 1
  %conv532 = zext i8 %310 to i32
  %and533 = and i32 %conv532, 16
  %tobool534 = icmp ne i32 %and533, 0
  br i1 %tobool534, label %cond.false.536, label %cond.true.535

cond.true.535:                                    ; preds = %cond.false.531
  br label %cond.end.542

cond.false.536:                                   ; preds = %cond.false.531
  %311 = load i8*, i8** %chp506, align 8
  %312 = load i8, i8* %311, align 1
  %conv537 = zext i8 %312 to i32
  %and538 = and i32 %conv537, 8
  %tobool539 = icmp ne i32 %and538, 0
  %lnot540 = xor i1 %tobool539, true
  %cond541 = select i1 %lnot540, i32 4, i32 5
  br label %cond.end.542

cond.end.542:                                     ; preds = %cond.false.536, %cond.true.535
  %cond543 = phi i32 [ 3, %cond.true.535 ], [ %cond541, %cond.false.536 ]
  br label %cond.end.544

cond.end.544:                                     ; preds = %cond.end.542, %cond.true.530
  %cond545 = phi i32 [ 2, %cond.true.530 ], [ %cond543, %cond.end.542 ]
  br label %cond.end.546

cond.end.546:                                     ; preds = %cond.end.544, %cond.true.525
  %cond547 = phi i32 [ 1, %cond.true.525 ], [ %cond545, %cond.end.544 ]
  %conv548 = sext i32 %cond547 to i64
  %313 = load i64, i64* %from_byte, align 8
  %add549 = add nsw i64 %313, %conv548
  store i64 %add549, i64* %from_byte, align 8
  br label %do.end.550

do.end.550:                                       ; preds = %cond.end.546
  br label %if.end.551

if.end.551:                                       ; preds = %do.end.550, %if.then.502
  br label %do.end.552

do.end.552:                                       ; preds = %if.end.551
  %314 = load i64, i64* %from.addr, align 8
  %315 = load i64, i64* %stop, align 8
  %cmp553 = icmp eq i64 %314, %315
  br i1 %cmp553, label %if.then.555, label %if.end.556

if.then.555:                                      ; preds = %do.end.552
  br label %lose

if.end.556:                                       ; preds = %do.end.552
  br label %sw.epilog

sw.bb.557:                                        ; preds = %cond.end.491, %cond.end.491, %cond.end.491
  br label %sw.epilog

sw.default:                                       ; preds = %cond.end.491
  br label %done

sw.epilog:                                        ; preds = %sw.bb.557, %if.end.556
  br label %do.body.558

do.body.558:                                      ; preds = %sw.epilog
  %316 = load i64, i64* %from.addr, align 8
  %inc559 = add nsw i64 %316, 1
  store i64 %inc559, i64* %from.addr, align 8
  %317 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_560 = getelementptr inbounds %struct.buffer, %struct.buffer* %317, i32 0, i32 39
  %318 = load i64, i64* %enable_multibyte_characters_560, align 8
  %call561 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp562 = icmp eq i64 %318, %call561
  br i1 %cmp562, label %if.then.564, label %if.else.566

if.then.564:                                      ; preds = %do.body.558
  %319 = load i64, i64* %from_byte, align 8
  %inc565 = add nsw i64 %319, 1
  store i64 %inc565, i64* %from_byte, align 8
  br label %if.end.613

if.else.566:                                      ; preds = %do.body.558
  br label %do.body.567

do.body.567:                                      ; preds = %if.else.566
  %320 = load i64, i64* %from_byte, align 8
  %321 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text569 = getelementptr inbounds %struct.buffer, %struct.buffer* %321, i32 0, i32 73
  %322 = load %struct.buffer_text*, %struct.buffer_text** %text569, align 8
  %gpt_byte570 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %322, i32 0, i32 3
  %323 = load i64, i64* %gpt_byte570, align 8
  %cmp571 = icmp sge i64 %320, %323
  br i1 %cmp571, label %cond.true.573, label %cond.false.576

cond.true.573:                                    ; preds = %do.body.567
  %324 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text574 = getelementptr inbounds %struct.buffer, %struct.buffer* %324, i32 0, i32 73
  %325 = load %struct.buffer_text*, %struct.buffer_text** %text574, align 8
  %gap_size575 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %325, i32 0, i32 5
  %326 = load i64, i64* %gap_size575, align 8
  br label %cond.end.577

cond.false.576:                                   ; preds = %do.body.567
  br label %cond.end.577

cond.end.577:                                     ; preds = %cond.false.576, %cond.true.573
  %cond578 = phi i64 [ %326, %cond.true.573 ], [ 0, %cond.false.576 ]
  %327 = load i64, i64* %from_byte, align 8
  %add579 = add nsw i64 %cond578, %327
  %328 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text580 = getelementptr inbounds %struct.buffer, %struct.buffer* %328, i32 0, i32 73
  %329 = load %struct.buffer_text*, %struct.buffer_text** %text580, align 8
  %beg581 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %329, i32 0, i32 0
  %330 = load i8*, i8** %beg581, align 8
  %add.ptr582 = getelementptr inbounds i8, i8* %330, i64 %add579
  %add.ptr583 = getelementptr inbounds i8, i8* %add.ptr582, i64 -1
  store i8* %add.ptr583, i8** %chp568, align 8
  %331 = load i8*, i8** %chp568, align 8
  %332 = load i8, i8* %331, align 1
  %conv584 = zext i8 %332 to i32
  %and585 = and i32 %conv584, 128
  %tobool586 = icmp ne i32 %and585, 0
  br i1 %tobool586, label %cond.false.588, label %cond.true.587

cond.true.587:                                    ; preds = %cond.end.577
  br label %cond.end.608

cond.false.588:                                   ; preds = %cond.end.577
  %333 = load i8*, i8** %chp568, align 8
  %334 = load i8, i8* %333, align 1
  %conv589 = zext i8 %334 to i32
  %and590 = and i32 %conv589, 32
  %tobool591 = icmp ne i32 %and590, 0
  br i1 %tobool591, label %cond.false.593, label %cond.true.592

cond.true.592:                                    ; preds = %cond.false.588
  br label %cond.end.606

cond.false.593:                                   ; preds = %cond.false.588
  %335 = load i8*, i8** %chp568, align 8
  %336 = load i8, i8* %335, align 1
  %conv594 = zext i8 %336 to i32
  %and595 = and i32 %conv594, 16
  %tobool596 = icmp ne i32 %and595, 0
  br i1 %tobool596, label %cond.false.598, label %cond.true.597

cond.true.597:                                    ; preds = %cond.false.593
  br label %cond.end.604

cond.false.598:                                   ; preds = %cond.false.593
  %337 = load i8*, i8** %chp568, align 8
  %338 = load i8, i8* %337, align 1
  %conv599 = zext i8 %338 to i32
  %and600 = and i32 %conv599, 8
  %tobool601 = icmp ne i32 %and600, 0
  %lnot602 = xor i1 %tobool601, true
  %cond603 = select i1 %lnot602, i32 4, i32 5
  br label %cond.end.604

cond.end.604:                                     ; preds = %cond.false.598, %cond.true.597
  %cond605 = phi i32 [ 3, %cond.true.597 ], [ %cond603, %cond.false.598 ]
  br label %cond.end.606

cond.end.606:                                     ; preds = %cond.end.604, %cond.true.592
  %cond607 = phi i32 [ 2, %cond.true.592 ], [ %cond605, %cond.end.604 ]
  br label %cond.end.608

cond.end.608:                                     ; preds = %cond.end.606, %cond.true.587
  %cond609 = phi i32 [ 1, %cond.true.587 ], [ %cond607, %cond.end.606 ]
  %conv610 = sext i32 %cond609 to i64
  %339 = load i64, i64* %from_byte, align 8
  %add611 = add nsw i64 %339, %conv610
  store i64 %add611, i64* %from_byte, align 8
  br label %do.end.612

do.end.612:                                       ; preds = %cond.end.608
  br label %if.end.613

if.end.613:                                       ; preds = %do.end.612, %if.then.564
  br label %do.end.614

do.end.614:                                       ; preds = %if.end.613
  br label %while.cond.403

while.end:                                        ; preds = %while.cond.403
  br label %done

sw.bb.615:                                        ; preds = %if.end.336
  store i32 257, i32* %comstyle, align 4
  br label %sw.bb.616

sw.bb.616:                                        ; preds = %if.end.336, %sw.bb.615
  %340 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 479), align 1
  %tobool617 = trunc i8 %340 to i1
  br i1 %tobool617, label %if.end.619, label %if.then.618

if.then.618:                                      ; preds = %sw.bb.616
  br label %sw.epilog.1244

if.end.619:                                       ; preds = %sw.bb.616
  %341 = load i64, i64* %from.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_FORWARD(i64 %341)
  %342 = load i64, i64* %from.addr, align 8
  %343 = load i64, i64* %from_byte, align 8
  %344 = load i64, i64* %stop, align 8
  %345 = load i8, i8* %comnested, align 1
  %tobool620 = trunc i8 %345 to i1
  %conv621 = zext i1 %tobool620 to i64
  %346 = load i32, i32* %comstyle, align 4
  %call622 = call zeroext i1 @forw_comment(i64 %342, i64 %343, i64 %344, i64 %conv621, i32 %346, i32 0, i64* %out_charpos, i64* %out_bytepos, i64* %dummy)
  %frombool623 = zext i1 %call622 to i8
  store i8 %frombool623, i8* %found, align 1
  %347 = load i64, i64* %out_charpos, align 8
  store i64 %347, i64* %from.addr, align 8
  %348 = load i64, i64* %out_bytepos, align 8
  store i64 %348, i64* %from_byte, align 8
  %349 = load i8, i8* %found, align 1
  %tobool624 = trunc i8 %349 to i1
  br i1 %tobool624, label %if.end.630, label %if.then.625

if.then.625:                                      ; preds = %if.end.619
  %350 = load i64, i64* %depth.addr, align 8
  %cmp626 = icmp eq i64 %350, 0
  br i1 %cmp626, label %if.then.628, label %if.end.629

if.then.628:                                      ; preds = %if.then.625
  br label %done

if.end.629:                                       ; preds = %if.then.625
  br label %lose

if.end.630:                                       ; preds = %if.end.619
  br label %do.body.631

do.body.631:                                      ; preds = %if.end.630
  %351 = load i64, i64* %from.addr, align 8
  %inc632 = add nsw i64 %351, 1
  store i64 %inc632, i64* %from.addr, align 8
  %352 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_633 = getelementptr inbounds %struct.buffer, %struct.buffer* %352, i32 0, i32 39
  %353 = load i64, i64* %enable_multibyte_characters_633, align 8
  %call634 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp635 = icmp eq i64 %353, %call634
  br i1 %cmp635, label %if.then.637, label %if.else.639

if.then.637:                                      ; preds = %do.body.631
  %354 = load i64, i64* %from_byte, align 8
  %inc638 = add nsw i64 %354, 1
  store i64 %inc638, i64* %from_byte, align 8
  br label %if.end.686

if.else.639:                                      ; preds = %do.body.631
  br label %do.body.640

do.body.640:                                      ; preds = %if.else.639
  %355 = load i64, i64* %from_byte, align 8
  %356 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text642 = getelementptr inbounds %struct.buffer, %struct.buffer* %356, i32 0, i32 73
  %357 = load %struct.buffer_text*, %struct.buffer_text** %text642, align 8
  %gpt_byte643 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %357, i32 0, i32 3
  %358 = load i64, i64* %gpt_byte643, align 8
  %cmp644 = icmp sge i64 %355, %358
  br i1 %cmp644, label %cond.true.646, label %cond.false.649

cond.true.646:                                    ; preds = %do.body.640
  %359 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text647 = getelementptr inbounds %struct.buffer, %struct.buffer* %359, i32 0, i32 73
  %360 = load %struct.buffer_text*, %struct.buffer_text** %text647, align 8
  %gap_size648 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %360, i32 0, i32 5
  %361 = load i64, i64* %gap_size648, align 8
  br label %cond.end.650

cond.false.649:                                   ; preds = %do.body.640
  br label %cond.end.650

cond.end.650:                                     ; preds = %cond.false.649, %cond.true.646
  %cond651 = phi i64 [ %361, %cond.true.646 ], [ 0, %cond.false.649 ]
  %362 = load i64, i64* %from_byte, align 8
  %add652 = add nsw i64 %cond651, %362
  %363 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text653 = getelementptr inbounds %struct.buffer, %struct.buffer* %363, i32 0, i32 73
  %364 = load %struct.buffer_text*, %struct.buffer_text** %text653, align 8
  %beg654 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %364, i32 0, i32 0
  %365 = load i8*, i8** %beg654, align 8
  %add.ptr655 = getelementptr inbounds i8, i8* %365, i64 %add652
  %add.ptr656 = getelementptr inbounds i8, i8* %add.ptr655, i64 -1
  store i8* %add.ptr656, i8** %chp641, align 8
  %366 = load i8*, i8** %chp641, align 8
  %367 = load i8, i8* %366, align 1
  %conv657 = zext i8 %367 to i32
  %and658 = and i32 %conv657, 128
  %tobool659 = icmp ne i32 %and658, 0
  br i1 %tobool659, label %cond.false.661, label %cond.true.660

cond.true.660:                                    ; preds = %cond.end.650
  br label %cond.end.681

cond.false.661:                                   ; preds = %cond.end.650
  %368 = load i8*, i8** %chp641, align 8
  %369 = load i8, i8* %368, align 1
  %conv662 = zext i8 %369 to i32
  %and663 = and i32 %conv662, 32
  %tobool664 = icmp ne i32 %and663, 0
  br i1 %tobool664, label %cond.false.666, label %cond.true.665

cond.true.665:                                    ; preds = %cond.false.661
  br label %cond.end.679

cond.false.666:                                   ; preds = %cond.false.661
  %370 = load i8*, i8** %chp641, align 8
  %371 = load i8, i8* %370, align 1
  %conv667 = zext i8 %371 to i32
  %and668 = and i32 %conv667, 16
  %tobool669 = icmp ne i32 %and668, 0
  br i1 %tobool669, label %cond.false.671, label %cond.true.670

cond.true.670:                                    ; preds = %cond.false.666
  br label %cond.end.677

cond.false.671:                                   ; preds = %cond.false.666
  %372 = load i8*, i8** %chp641, align 8
  %373 = load i8, i8* %372, align 1
  %conv672 = zext i8 %373 to i32
  %and673 = and i32 %conv672, 8
  %tobool674 = icmp ne i32 %and673, 0
  %lnot675 = xor i1 %tobool674, true
  %cond676 = select i1 %lnot675, i32 4, i32 5
  br label %cond.end.677

cond.end.677:                                     ; preds = %cond.false.671, %cond.true.670
  %cond678 = phi i32 [ 3, %cond.true.670 ], [ %cond676, %cond.false.671 ]
  br label %cond.end.679

cond.end.679:                                     ; preds = %cond.end.677, %cond.true.665
  %cond680 = phi i32 [ 2, %cond.true.665 ], [ %cond678, %cond.end.677 ]
  br label %cond.end.681

cond.end.681:                                     ; preds = %cond.end.679, %cond.true.660
  %cond682 = phi i32 [ 1, %cond.true.660 ], [ %cond680, %cond.end.679 ]
  %conv683 = sext i32 %cond682 to i64
  %374 = load i64, i64* %from_byte, align 8
  %add684 = add nsw i64 %374, %conv683
  store i64 %add684, i64* %from_byte, align 8
  br label %do.end.685

do.end.685:                                       ; preds = %cond.end.681
  br label %if.end.686

if.end.686:                                       ; preds = %do.end.685, %if.then.637
  br label %do.end.687

do.end.687:                                       ; preds = %if.end.686
  %375 = load i64, i64* %from.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_FORWARD(i64 %375)
  br label %sw.epilog.1244

sw.bb.688:                                        ; preds = %if.end.336
  %376 = load i8, i8* %sexpflag.addr, align 1
  %tobool689 = trunc i8 %376 to i1
  br i1 %tobool689, label %if.end.691, label %if.then.690

if.then.690:                                      ; preds = %sw.bb.688
  br label %sw.epilog.1244

if.end.691:                                       ; preds = %sw.bb.688
  %377 = load i64, i64* %from.addr, align 8
  %378 = load i64, i64* %stop, align 8
  %cmp692 = icmp ne i64 %377, %378
  br i1 %cmp692, label %land.lhs.true.694, label %if.end.841

land.lhs.true.694:                                ; preds = %if.end.691
  %379 = load i32, i32* %c, align 4
  %380 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_695 = getelementptr inbounds %struct.buffer, %struct.buffer* %380, i32 0, i32 39
  %381 = load i64, i64* %enable_multibyte_characters_695, align 8
  %call696 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp697 = icmp eq i64 %381, %call696
  br i1 %cmp697, label %cond.false.701, label %cond.true.699

cond.true.699:                                    ; preds = %land.lhs.true.694
  %382 = load i64, i64* %from_byte, align 8
  %call700 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %382)
  br label %cond.end.779

cond.false.701:                                   ; preds = %land.lhs.true.694
  br i1 true, label %cond.true.702, label %cond.false.722

cond.true.702:                                    ; preds = %cond.false.701
  %383 = load i64, i64* %from_byte, align 8
  %384 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text703 = getelementptr inbounds %struct.buffer, %struct.buffer* %384, i32 0, i32 73
  %385 = load %struct.buffer_text*, %struct.buffer_text** %text703, align 8
  %gpt_byte704 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %385, i32 0, i32 3
  %386 = load i64, i64* %gpt_byte704, align 8
  %cmp705 = icmp sge i64 %383, %386
  br i1 %cmp705, label %cond.true.707, label %cond.false.710

cond.true.707:                                    ; preds = %cond.true.702
  %387 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text708 = getelementptr inbounds %struct.buffer, %struct.buffer* %387, i32 0, i32 73
  %388 = load %struct.buffer_text*, %struct.buffer_text** %text708, align 8
  %gap_size709 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %388, i32 0, i32 5
  %389 = load i64, i64* %gap_size709, align 8
  br label %cond.end.711

cond.false.710:                                   ; preds = %cond.true.702
  br label %cond.end.711

cond.end.711:                                     ; preds = %cond.false.710, %cond.true.707
  %cond712 = phi i64 [ %389, %cond.true.707 ], [ 0, %cond.false.710 ]
  %390 = load i64, i64* %from_byte, align 8
  %add713 = add nsw i64 %cond712, %390
  %391 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text714 = getelementptr inbounds %struct.buffer, %struct.buffer* %391, i32 0, i32 73
  %392 = load %struct.buffer_text*, %struct.buffer_text** %text714, align 8
  %beg715 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %392, i32 0, i32 0
  %393 = load i8*, i8** %beg715, align 8
  %add.ptr716 = getelementptr inbounds i8, i8* %393, i64 %add713
  %add.ptr717 = getelementptr inbounds i8, i8* %add.ptr716, i64 -1
  %394 = load i8, i8* %add.ptr717, align 1
  %conv718 = zext i8 %394 to i32
  %add719 = add i32 %conv718, 0
  %cmp720 = icmp ult i32 %add719, 128
  br i1 %cmp720, label %cond.true.742, label %cond.false.759

cond.false.722:                                   ; preds = %cond.false.701
  %395 = load i64, i64* %from_byte, align 8
  %396 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text723 = getelementptr inbounds %struct.buffer, %struct.buffer* %396, i32 0, i32 73
  %397 = load %struct.buffer_text*, %struct.buffer_text** %text723, align 8
  %gpt_byte724 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %397, i32 0, i32 3
  %398 = load i64, i64* %gpt_byte724, align 8
  %cmp725 = icmp sge i64 %395, %398
  br i1 %cmp725, label %cond.true.727, label %cond.false.730

cond.true.727:                                    ; preds = %cond.false.722
  %399 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text728 = getelementptr inbounds %struct.buffer, %struct.buffer* %399, i32 0, i32 73
  %400 = load %struct.buffer_text*, %struct.buffer_text** %text728, align 8
  %gap_size729 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %400, i32 0, i32 5
  %401 = load i64, i64* %gap_size729, align 8
  br label %cond.end.731

cond.false.730:                                   ; preds = %cond.false.722
  br label %cond.end.731

cond.end.731:                                     ; preds = %cond.false.730, %cond.true.727
  %cond732 = phi i64 [ %401, %cond.true.727 ], [ 0, %cond.false.730 ]
  %402 = load i64, i64* %from_byte, align 8
  %add733 = add nsw i64 %cond732, %402
  %403 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text734 = getelementptr inbounds %struct.buffer, %struct.buffer* %403, i32 0, i32 73
  %404 = load %struct.buffer_text*, %struct.buffer_text** %text734, align 8
  %beg735 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %404, i32 0, i32 0
  %405 = load i8*, i8** %beg735, align 8
  %add.ptr736 = getelementptr inbounds i8, i8* %405, i64 %add733
  %add.ptr737 = getelementptr inbounds i8, i8* %add.ptr736, i64 -1
  %406 = load i8, i8* %add.ptr737, align 1
  %conv738 = zext i8 %406 to i64
  %add739 = add i64 %conv738, 0
  %cmp740 = icmp ult i64 %add739, 128
  br i1 %cmp740, label %cond.true.742, label %cond.false.759

cond.true.742:                                    ; preds = %cond.end.731, %cond.end.711
  %407 = load i64, i64* %from_byte, align 8
  %408 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text743 = getelementptr inbounds %struct.buffer, %struct.buffer* %408, i32 0, i32 73
  %409 = load %struct.buffer_text*, %struct.buffer_text** %text743, align 8
  %gpt_byte744 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %409, i32 0, i32 3
  %410 = load i64, i64* %gpt_byte744, align 8
  %cmp745 = icmp sge i64 %407, %410
  br i1 %cmp745, label %cond.true.747, label %cond.false.750

cond.true.747:                                    ; preds = %cond.true.742
  %411 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text748 = getelementptr inbounds %struct.buffer, %struct.buffer* %411, i32 0, i32 73
  %412 = load %struct.buffer_text*, %struct.buffer_text** %text748, align 8
  %gap_size749 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %412, i32 0, i32 5
  %413 = load i64, i64* %gap_size749, align 8
  br label %cond.end.751

cond.false.750:                                   ; preds = %cond.true.742
  br label %cond.end.751

cond.end.751:                                     ; preds = %cond.false.750, %cond.true.747
  %cond752 = phi i64 [ %413, %cond.true.747 ], [ 0, %cond.false.750 ]
  %414 = load i64, i64* %from_byte, align 8
  %add753 = add nsw i64 %cond752, %414
  %415 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text754 = getelementptr inbounds %struct.buffer, %struct.buffer* %415, i32 0, i32 73
  %416 = load %struct.buffer_text*, %struct.buffer_text** %text754, align 8
  %beg755 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %416, i32 0, i32 0
  %417 = load i8*, i8** %beg755, align 8
  %add.ptr756 = getelementptr inbounds i8, i8* %417, i64 %add753
  %add.ptr757 = getelementptr inbounds i8, i8* %add.ptr756, i64 -1
  %418 = load i8, i8* %add.ptr757, align 1
  %conv758 = zext i8 %418 to i32
  br label %cond.end.777

cond.false.759:                                   ; preds = %cond.end.731, %cond.end.711
  %419 = load i64, i64* %from_byte, align 8
  %420 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text760 = getelementptr inbounds %struct.buffer, %struct.buffer* %420, i32 0, i32 73
  %421 = load %struct.buffer_text*, %struct.buffer_text** %text760, align 8
  %gpt_byte761 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %421, i32 0, i32 3
  %422 = load i64, i64* %gpt_byte761, align 8
  %cmp762 = icmp sge i64 %419, %422
  br i1 %cmp762, label %cond.true.764, label %cond.false.767

cond.true.764:                                    ; preds = %cond.false.759
  %423 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text765 = getelementptr inbounds %struct.buffer, %struct.buffer* %423, i32 0, i32 73
  %424 = load %struct.buffer_text*, %struct.buffer_text** %text765, align 8
  %gap_size766 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %424, i32 0, i32 5
  %425 = load i64, i64* %gap_size766, align 8
  br label %cond.end.768

cond.false.767:                                   ; preds = %cond.false.759
  br label %cond.end.768

cond.end.768:                                     ; preds = %cond.false.767, %cond.true.764
  %cond769 = phi i64 [ %425, %cond.true.764 ], [ 0, %cond.false.767 ]
  %426 = load i64, i64* %from_byte, align 8
  %add770 = add nsw i64 %cond769, %426
  %427 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text771 = getelementptr inbounds %struct.buffer, %struct.buffer* %427, i32 0, i32 73
  %428 = load %struct.buffer_text*, %struct.buffer_text** %text771, align 8
  %beg772 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %428, i32 0, i32 0
  %429 = load i8*, i8** %beg772, align 8
  %add.ptr773 = getelementptr inbounds i8, i8* %429, i64 %add770
  %add.ptr774 = getelementptr inbounds i8, i8* %add.ptr773, i64 -1
  %430 = load i8, i8* %add.ptr774, align 1
  %conv775 = zext i8 %430 to i32
  %add776 = add nsw i32 %conv775, 4194048
  br label %cond.end.777

cond.end.777:                                     ; preds = %cond.end.768, %cond.end.751
  %cond778 = phi i32 [ %conv758, %cond.end.751 ], [ %add776, %cond.end.768 ]
  br label %cond.end.779

cond.end.779:                                     ; preds = %cond.end.777, %cond.true.699
  %cond780 = phi i32 [ %call700, %cond.true.699 ], [ %cond778, %cond.end.777 ]
  %cmp781 = icmp eq i32 %379, %cond780
  br i1 %cmp781, label %if.then.783, label %if.end.841

if.then.783:                                      ; preds = %cond.end.779
  br label %do.body.784

do.body.784:                                      ; preds = %if.then.783
  %431 = load i64, i64* %from.addr, align 8
  %inc785 = add nsw i64 %431, 1
  store i64 %inc785, i64* %from.addr, align 8
  %432 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_786 = getelementptr inbounds %struct.buffer, %struct.buffer* %432, i32 0, i32 39
  %433 = load i64, i64* %enable_multibyte_characters_786, align 8
  %call787 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp788 = icmp eq i64 %433, %call787
  br i1 %cmp788, label %if.then.790, label %if.else.792

if.then.790:                                      ; preds = %do.body.784
  %434 = load i64, i64* %from_byte, align 8
  %inc791 = add nsw i64 %434, 1
  store i64 %inc791, i64* %from_byte, align 8
  br label %if.end.839

if.else.792:                                      ; preds = %do.body.784
  br label %do.body.793

do.body.793:                                      ; preds = %if.else.792
  %435 = load i64, i64* %from_byte, align 8
  %436 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text795 = getelementptr inbounds %struct.buffer, %struct.buffer* %436, i32 0, i32 73
  %437 = load %struct.buffer_text*, %struct.buffer_text** %text795, align 8
  %gpt_byte796 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %437, i32 0, i32 3
  %438 = load i64, i64* %gpt_byte796, align 8
  %cmp797 = icmp sge i64 %435, %438
  br i1 %cmp797, label %cond.true.799, label %cond.false.802

cond.true.799:                                    ; preds = %do.body.793
  %439 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text800 = getelementptr inbounds %struct.buffer, %struct.buffer* %439, i32 0, i32 73
  %440 = load %struct.buffer_text*, %struct.buffer_text** %text800, align 8
  %gap_size801 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %440, i32 0, i32 5
  %441 = load i64, i64* %gap_size801, align 8
  br label %cond.end.803

cond.false.802:                                   ; preds = %do.body.793
  br label %cond.end.803

cond.end.803:                                     ; preds = %cond.false.802, %cond.true.799
  %cond804 = phi i64 [ %441, %cond.true.799 ], [ 0, %cond.false.802 ]
  %442 = load i64, i64* %from_byte, align 8
  %add805 = add nsw i64 %cond804, %442
  %443 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text806 = getelementptr inbounds %struct.buffer, %struct.buffer* %443, i32 0, i32 73
  %444 = load %struct.buffer_text*, %struct.buffer_text** %text806, align 8
  %beg807 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %444, i32 0, i32 0
  %445 = load i8*, i8** %beg807, align 8
  %add.ptr808 = getelementptr inbounds i8, i8* %445, i64 %add805
  %add.ptr809 = getelementptr inbounds i8, i8* %add.ptr808, i64 -1
  store i8* %add.ptr809, i8** %chp794, align 8
  %446 = load i8*, i8** %chp794, align 8
  %447 = load i8, i8* %446, align 1
  %conv810 = zext i8 %447 to i32
  %and811 = and i32 %conv810, 128
  %tobool812 = icmp ne i32 %and811, 0
  br i1 %tobool812, label %cond.false.814, label %cond.true.813

cond.true.813:                                    ; preds = %cond.end.803
  br label %cond.end.834

cond.false.814:                                   ; preds = %cond.end.803
  %448 = load i8*, i8** %chp794, align 8
  %449 = load i8, i8* %448, align 1
  %conv815 = zext i8 %449 to i32
  %and816 = and i32 %conv815, 32
  %tobool817 = icmp ne i32 %and816, 0
  br i1 %tobool817, label %cond.false.819, label %cond.true.818

cond.true.818:                                    ; preds = %cond.false.814
  br label %cond.end.832

cond.false.819:                                   ; preds = %cond.false.814
  %450 = load i8*, i8** %chp794, align 8
  %451 = load i8, i8* %450, align 1
  %conv820 = zext i8 %451 to i32
  %and821 = and i32 %conv820, 16
  %tobool822 = icmp ne i32 %and821, 0
  br i1 %tobool822, label %cond.false.824, label %cond.true.823

cond.true.823:                                    ; preds = %cond.false.819
  br label %cond.end.830

cond.false.824:                                   ; preds = %cond.false.819
  %452 = load i8*, i8** %chp794, align 8
  %453 = load i8, i8* %452, align 1
  %conv825 = zext i8 %453 to i32
  %and826 = and i32 %conv825, 8
  %tobool827 = icmp ne i32 %and826, 0
  %lnot828 = xor i1 %tobool827, true
  %cond829 = select i1 %lnot828, i32 4, i32 5
  br label %cond.end.830

cond.end.830:                                     ; preds = %cond.false.824, %cond.true.823
  %cond831 = phi i32 [ 3, %cond.true.823 ], [ %cond829, %cond.false.824 ]
  br label %cond.end.832

cond.end.832:                                     ; preds = %cond.end.830, %cond.true.818
  %cond833 = phi i32 [ 2, %cond.true.818 ], [ %cond831, %cond.end.830 ]
  br label %cond.end.834

cond.end.834:                                     ; preds = %cond.end.832, %cond.true.813
  %cond835 = phi i32 [ 1, %cond.true.813 ], [ %cond833, %cond.end.832 ]
  %conv836 = sext i32 %cond835 to i64
  %454 = load i64, i64* %from_byte, align 8
  %add837 = add nsw i64 %454, %conv836
  store i64 %add837, i64* %from_byte, align 8
  br label %do.end.838

do.end.838:                                       ; preds = %cond.end.834
  br label %if.end.839

if.end.839:                                       ; preds = %do.end.838, %if.then.790
  br label %do.end.840

do.end.840:                                       ; preds = %if.end.839
  br label %if.end.841

if.end.841:                                       ; preds = %do.end.840, %cond.end.779, %if.end.691
  %455 = load i8, i8* %mathexit, align 1
  %tobool842 = trunc i8 %455 to i1
  br i1 %tobool842, label %if.then.843, label %if.end.844

if.then.843:                                      ; preds = %if.end.841
  store i8 0, i8* %mathexit, align 1
  br label %close1

if.end.844:                                       ; preds = %if.end.841
  store i8 1, i8* %mathexit, align 1
  br label %sw.bb.845

sw.bb.845:                                        ; preds = %if.end.336, %if.end.844
  %456 = load i64, i64* %depth.addr, align 8
  %inc846 = add nsw i64 %456, 1
  store i64 %inc846, i64* %depth.addr, align 8
  %tobool847 = icmp ne i64 %inc846, 0
  br i1 %tobool847, label %if.end.849, label %if.then.848

if.then.848:                                      ; preds = %sw.bb.845
  br label %done

if.end.849:                                       ; preds = %sw.bb.845
  br label %sw.epilog.1244

sw.bb.850:                                        ; preds = %if.end.336
  br label %close1

close1:                                           ; preds = %sw.bb.850, %if.then.843
  %457 = load i64, i64* %depth.addr, align 8
  %dec = add nsw i64 %457, -1
  store i64 %dec, i64* %depth.addr, align 8
  %tobool851 = icmp ne i64 %dec, 0
  br i1 %tobool851, label %if.end.853, label %if.then.852

if.then.852:                                      ; preds = %close1
  br label %done

if.end.853:                                       ; preds = %close1
  %458 = load i64, i64* %depth.addr, align 8
  %459 = load i64, i64* %min_depth, align 8
  %cmp854 = icmp slt i64 %458, %459
  br i1 %cmp854, label %if.then.856, label %if.end.862

if.then.856:                                      ; preds = %if.end.853
  %call857 = call i64 @builtin_lisp_symbol(i32 828)
  %call858 = call i64 @build_string(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.61, i32 0, i32 0))
  %460 = load i64, i64* %last_good, align 8
  %shl = shl i64 %460, 2
  %add859 = add i64 %shl, 2
  %461 = load i64, i64* %from.addr, align 8
  %shl860 = shl i64 %461, 2
  %add861 = add i64 %shl860, 2
  call void @xsignal3(i64 %call857, i64 %call858, i64 %add859, i64 %add861) #5
  unreachable

if.end.862:                                       ; preds = %if.end.853
  br label %sw.epilog.1244

sw.bb.863:                                        ; preds = %if.end.336, %if.end.336
  %462 = load i64, i64* %from_byte, align 8
  %call864 = call i64 @dec_bytepos(i64 %462)
  store i64 %call864, i64* %temp_pos, align 8
  %463 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_865 = getelementptr inbounds %struct.buffer, %struct.buffer* %463, i32 0, i32 39
  %464 = load i64, i64* %enable_multibyte_characters_865, align 8
  %call866 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp867 = icmp eq i64 %464, %call866
  br i1 %cmp867, label %cond.false.871, label %cond.true.869

cond.true.869:                                    ; preds = %sw.bb.863
  %465 = load i64, i64* %temp_pos, align 8
  %call870 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %465)
  br label %cond.end.949

cond.false.871:                                   ; preds = %sw.bb.863
  br i1 true, label %cond.true.872, label %cond.false.892

cond.true.872:                                    ; preds = %cond.false.871
  %466 = load i64, i64* %temp_pos, align 8
  %467 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text873 = getelementptr inbounds %struct.buffer, %struct.buffer* %467, i32 0, i32 73
  %468 = load %struct.buffer_text*, %struct.buffer_text** %text873, align 8
  %gpt_byte874 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %468, i32 0, i32 3
  %469 = load i64, i64* %gpt_byte874, align 8
  %cmp875 = icmp sge i64 %466, %469
  br i1 %cmp875, label %cond.true.877, label %cond.false.880

cond.true.877:                                    ; preds = %cond.true.872
  %470 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text878 = getelementptr inbounds %struct.buffer, %struct.buffer* %470, i32 0, i32 73
  %471 = load %struct.buffer_text*, %struct.buffer_text** %text878, align 8
  %gap_size879 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %471, i32 0, i32 5
  %472 = load i64, i64* %gap_size879, align 8
  br label %cond.end.881

cond.false.880:                                   ; preds = %cond.true.872
  br label %cond.end.881

cond.end.881:                                     ; preds = %cond.false.880, %cond.true.877
  %cond882 = phi i64 [ %472, %cond.true.877 ], [ 0, %cond.false.880 ]
  %473 = load i64, i64* %temp_pos, align 8
  %add883 = add nsw i64 %cond882, %473
  %474 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text884 = getelementptr inbounds %struct.buffer, %struct.buffer* %474, i32 0, i32 73
  %475 = load %struct.buffer_text*, %struct.buffer_text** %text884, align 8
  %beg885 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %475, i32 0, i32 0
  %476 = load i8*, i8** %beg885, align 8
  %add.ptr886 = getelementptr inbounds i8, i8* %476, i64 %add883
  %add.ptr887 = getelementptr inbounds i8, i8* %add.ptr886, i64 -1
  %477 = load i8, i8* %add.ptr887, align 1
  %conv888 = zext i8 %477 to i32
  %add889 = add i32 %conv888, 0
  %cmp890 = icmp ult i32 %add889, 128
  br i1 %cmp890, label %cond.true.912, label %cond.false.929

cond.false.892:                                   ; preds = %cond.false.871
  %478 = load i64, i64* %temp_pos, align 8
  %479 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text893 = getelementptr inbounds %struct.buffer, %struct.buffer* %479, i32 0, i32 73
  %480 = load %struct.buffer_text*, %struct.buffer_text** %text893, align 8
  %gpt_byte894 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %480, i32 0, i32 3
  %481 = load i64, i64* %gpt_byte894, align 8
  %cmp895 = icmp sge i64 %478, %481
  br i1 %cmp895, label %cond.true.897, label %cond.false.900

cond.true.897:                                    ; preds = %cond.false.892
  %482 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text898 = getelementptr inbounds %struct.buffer, %struct.buffer* %482, i32 0, i32 73
  %483 = load %struct.buffer_text*, %struct.buffer_text** %text898, align 8
  %gap_size899 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %483, i32 0, i32 5
  %484 = load i64, i64* %gap_size899, align 8
  br label %cond.end.901

cond.false.900:                                   ; preds = %cond.false.892
  br label %cond.end.901

cond.end.901:                                     ; preds = %cond.false.900, %cond.true.897
  %cond902 = phi i64 [ %484, %cond.true.897 ], [ 0, %cond.false.900 ]
  %485 = load i64, i64* %temp_pos, align 8
  %add903 = add nsw i64 %cond902, %485
  %486 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text904 = getelementptr inbounds %struct.buffer, %struct.buffer* %486, i32 0, i32 73
  %487 = load %struct.buffer_text*, %struct.buffer_text** %text904, align 8
  %beg905 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %487, i32 0, i32 0
  %488 = load i8*, i8** %beg905, align 8
  %add.ptr906 = getelementptr inbounds i8, i8* %488, i64 %add903
  %add.ptr907 = getelementptr inbounds i8, i8* %add.ptr906, i64 -1
  %489 = load i8, i8* %add.ptr907, align 1
  %conv908 = zext i8 %489 to i64
  %add909 = add i64 %conv908, 0
  %cmp910 = icmp ult i64 %add909, 128
  br i1 %cmp910, label %cond.true.912, label %cond.false.929

cond.true.912:                                    ; preds = %cond.end.901, %cond.end.881
  %490 = load i64, i64* %temp_pos, align 8
  %491 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text913 = getelementptr inbounds %struct.buffer, %struct.buffer* %491, i32 0, i32 73
  %492 = load %struct.buffer_text*, %struct.buffer_text** %text913, align 8
  %gpt_byte914 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %492, i32 0, i32 3
  %493 = load i64, i64* %gpt_byte914, align 8
  %cmp915 = icmp sge i64 %490, %493
  br i1 %cmp915, label %cond.true.917, label %cond.false.920

cond.true.917:                                    ; preds = %cond.true.912
  %494 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text918 = getelementptr inbounds %struct.buffer, %struct.buffer* %494, i32 0, i32 73
  %495 = load %struct.buffer_text*, %struct.buffer_text** %text918, align 8
  %gap_size919 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %495, i32 0, i32 5
  %496 = load i64, i64* %gap_size919, align 8
  br label %cond.end.921

cond.false.920:                                   ; preds = %cond.true.912
  br label %cond.end.921

cond.end.921:                                     ; preds = %cond.false.920, %cond.true.917
  %cond922 = phi i64 [ %496, %cond.true.917 ], [ 0, %cond.false.920 ]
  %497 = load i64, i64* %temp_pos, align 8
  %add923 = add nsw i64 %cond922, %497
  %498 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text924 = getelementptr inbounds %struct.buffer, %struct.buffer* %498, i32 0, i32 73
  %499 = load %struct.buffer_text*, %struct.buffer_text** %text924, align 8
  %beg925 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %499, i32 0, i32 0
  %500 = load i8*, i8** %beg925, align 8
  %add.ptr926 = getelementptr inbounds i8, i8* %500, i64 %add923
  %add.ptr927 = getelementptr inbounds i8, i8* %add.ptr926, i64 -1
  %501 = load i8, i8* %add.ptr927, align 1
  %conv928 = zext i8 %501 to i32
  br label %cond.end.947

cond.false.929:                                   ; preds = %cond.end.901, %cond.end.881
  %502 = load i64, i64* %temp_pos, align 8
  %503 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text930 = getelementptr inbounds %struct.buffer, %struct.buffer* %503, i32 0, i32 73
  %504 = load %struct.buffer_text*, %struct.buffer_text** %text930, align 8
  %gpt_byte931 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %504, i32 0, i32 3
  %505 = load i64, i64* %gpt_byte931, align 8
  %cmp932 = icmp sge i64 %502, %505
  br i1 %cmp932, label %cond.true.934, label %cond.false.937

cond.true.934:                                    ; preds = %cond.false.929
  %506 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text935 = getelementptr inbounds %struct.buffer, %struct.buffer* %506, i32 0, i32 73
  %507 = load %struct.buffer_text*, %struct.buffer_text** %text935, align 8
  %gap_size936 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %507, i32 0, i32 5
  %508 = load i64, i64* %gap_size936, align 8
  br label %cond.end.938

cond.false.937:                                   ; preds = %cond.false.929
  br label %cond.end.938

cond.end.938:                                     ; preds = %cond.false.937, %cond.true.934
  %cond939 = phi i64 [ %508, %cond.true.934 ], [ 0, %cond.false.937 ]
  %509 = load i64, i64* %temp_pos, align 8
  %add940 = add nsw i64 %cond939, %509
  %510 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text941 = getelementptr inbounds %struct.buffer, %struct.buffer* %510, i32 0, i32 73
  %511 = load %struct.buffer_text*, %struct.buffer_text** %text941, align 8
  %beg942 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %511, i32 0, i32 0
  %512 = load i8*, i8** %beg942, align 8
  %add.ptr943 = getelementptr inbounds i8, i8* %512, i64 %add940
  %add.ptr944 = getelementptr inbounds i8, i8* %add.ptr943, i64 -1
  %513 = load i8, i8* %add.ptr944, align 1
  %conv945 = zext i8 %513 to i32
  %add946 = add nsw i32 %conv945, 4194048
  br label %cond.end.947

cond.end.947:                                     ; preds = %cond.end.938, %cond.end.921
  %cond948 = phi i32 [ %conv928, %cond.end.921 ], [ %add946, %cond.end.938 ]
  br label %cond.end.949

cond.end.949:                                     ; preds = %cond.end.947, %cond.true.869
  %cond950 = phi i32 [ %call870, %cond.true.869 ], [ %cond948, %cond.end.947 ]
  store i32 %cond950, i32* %stringterm, align 4
  br label %while.body.952

while.body.952:                                   ; preds = %cond.end.949, %do.end.1178
  %514 = load i64, i64* %from.addr, align 8
  %515 = load i64, i64* %stop, align 8
  %cmp953 = icmp sge i64 %514, %515
  br i1 %cmp953, label %if.then.955, label %if.end.956

if.then.955:                                      ; preds = %while.body.952
  br label %lose

if.end.956:                                       ; preds = %while.body.952
  %516 = load i64, i64* %from.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_FORWARD(i64 %516)
  %517 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_957 = getelementptr inbounds %struct.buffer, %struct.buffer* %517, i32 0, i32 39
  %518 = load i64, i64* %enable_multibyte_characters_957, align 8
  %call958 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp959 = icmp eq i64 %518, %call958
  br i1 %cmp959, label %cond.false.963, label %cond.true.961

cond.true.961:                                    ; preds = %if.end.956
  %519 = load i64, i64* %from_byte, align 8
  %call962 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %519)
  br label %cond.end.1041

cond.false.963:                                   ; preds = %if.end.956
  br i1 true, label %cond.true.964, label %cond.false.984

cond.true.964:                                    ; preds = %cond.false.963
  %520 = load i64, i64* %from_byte, align 8
  %521 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text965 = getelementptr inbounds %struct.buffer, %struct.buffer* %521, i32 0, i32 73
  %522 = load %struct.buffer_text*, %struct.buffer_text** %text965, align 8
  %gpt_byte966 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %522, i32 0, i32 3
  %523 = load i64, i64* %gpt_byte966, align 8
  %cmp967 = icmp sge i64 %520, %523
  br i1 %cmp967, label %cond.true.969, label %cond.false.972

cond.true.969:                                    ; preds = %cond.true.964
  %524 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text970 = getelementptr inbounds %struct.buffer, %struct.buffer* %524, i32 0, i32 73
  %525 = load %struct.buffer_text*, %struct.buffer_text** %text970, align 8
  %gap_size971 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %525, i32 0, i32 5
  %526 = load i64, i64* %gap_size971, align 8
  br label %cond.end.973

cond.false.972:                                   ; preds = %cond.true.964
  br label %cond.end.973

cond.end.973:                                     ; preds = %cond.false.972, %cond.true.969
  %cond974 = phi i64 [ %526, %cond.true.969 ], [ 0, %cond.false.972 ]
  %527 = load i64, i64* %from_byte, align 8
  %add975 = add nsw i64 %cond974, %527
  %528 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text976 = getelementptr inbounds %struct.buffer, %struct.buffer* %528, i32 0, i32 73
  %529 = load %struct.buffer_text*, %struct.buffer_text** %text976, align 8
  %beg977 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %529, i32 0, i32 0
  %530 = load i8*, i8** %beg977, align 8
  %add.ptr978 = getelementptr inbounds i8, i8* %530, i64 %add975
  %add.ptr979 = getelementptr inbounds i8, i8* %add.ptr978, i64 -1
  %531 = load i8, i8* %add.ptr979, align 1
  %conv980 = zext i8 %531 to i32
  %add981 = add i32 %conv980, 0
  %cmp982 = icmp ult i32 %add981, 128
  br i1 %cmp982, label %cond.true.1004, label %cond.false.1021

cond.false.984:                                   ; preds = %cond.false.963
  %532 = load i64, i64* %from_byte, align 8
  %533 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text985 = getelementptr inbounds %struct.buffer, %struct.buffer* %533, i32 0, i32 73
  %534 = load %struct.buffer_text*, %struct.buffer_text** %text985, align 8
  %gpt_byte986 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %534, i32 0, i32 3
  %535 = load i64, i64* %gpt_byte986, align 8
  %cmp987 = icmp sge i64 %532, %535
  br i1 %cmp987, label %cond.true.989, label %cond.false.992

cond.true.989:                                    ; preds = %cond.false.984
  %536 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text990 = getelementptr inbounds %struct.buffer, %struct.buffer* %536, i32 0, i32 73
  %537 = load %struct.buffer_text*, %struct.buffer_text** %text990, align 8
  %gap_size991 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %537, i32 0, i32 5
  %538 = load i64, i64* %gap_size991, align 8
  br label %cond.end.993

cond.false.992:                                   ; preds = %cond.false.984
  br label %cond.end.993

cond.end.993:                                     ; preds = %cond.false.992, %cond.true.989
  %cond994 = phi i64 [ %538, %cond.true.989 ], [ 0, %cond.false.992 ]
  %539 = load i64, i64* %from_byte, align 8
  %add995 = add nsw i64 %cond994, %539
  %540 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text996 = getelementptr inbounds %struct.buffer, %struct.buffer* %540, i32 0, i32 73
  %541 = load %struct.buffer_text*, %struct.buffer_text** %text996, align 8
  %beg997 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %541, i32 0, i32 0
  %542 = load i8*, i8** %beg997, align 8
  %add.ptr998 = getelementptr inbounds i8, i8* %542, i64 %add995
  %add.ptr999 = getelementptr inbounds i8, i8* %add.ptr998, i64 -1
  %543 = load i8, i8* %add.ptr999, align 1
  %conv1000 = zext i8 %543 to i64
  %add1001 = add i64 %conv1000, 0
  %cmp1002 = icmp ult i64 %add1001, 128
  br i1 %cmp1002, label %cond.true.1004, label %cond.false.1021

cond.true.1004:                                   ; preds = %cond.end.993, %cond.end.973
  %544 = load i64, i64* %from_byte, align 8
  %545 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1005 = getelementptr inbounds %struct.buffer, %struct.buffer* %545, i32 0, i32 73
  %546 = load %struct.buffer_text*, %struct.buffer_text** %text1005, align 8
  %gpt_byte1006 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %546, i32 0, i32 3
  %547 = load i64, i64* %gpt_byte1006, align 8
  %cmp1007 = icmp sge i64 %544, %547
  br i1 %cmp1007, label %cond.true.1009, label %cond.false.1012

cond.true.1009:                                   ; preds = %cond.true.1004
  %548 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1010 = getelementptr inbounds %struct.buffer, %struct.buffer* %548, i32 0, i32 73
  %549 = load %struct.buffer_text*, %struct.buffer_text** %text1010, align 8
  %gap_size1011 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %549, i32 0, i32 5
  %550 = load i64, i64* %gap_size1011, align 8
  br label %cond.end.1013

cond.false.1012:                                  ; preds = %cond.true.1004
  br label %cond.end.1013

cond.end.1013:                                    ; preds = %cond.false.1012, %cond.true.1009
  %cond1014 = phi i64 [ %550, %cond.true.1009 ], [ 0, %cond.false.1012 ]
  %551 = load i64, i64* %from_byte, align 8
  %add1015 = add nsw i64 %cond1014, %551
  %552 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1016 = getelementptr inbounds %struct.buffer, %struct.buffer* %552, i32 0, i32 73
  %553 = load %struct.buffer_text*, %struct.buffer_text** %text1016, align 8
  %beg1017 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %553, i32 0, i32 0
  %554 = load i8*, i8** %beg1017, align 8
  %add.ptr1018 = getelementptr inbounds i8, i8* %554, i64 %add1015
  %add.ptr1019 = getelementptr inbounds i8, i8* %add.ptr1018, i64 -1
  %555 = load i8, i8* %add.ptr1019, align 1
  %conv1020 = zext i8 %555 to i32
  br label %cond.end.1039

cond.false.1021:                                  ; preds = %cond.end.993, %cond.end.973
  %556 = load i64, i64* %from_byte, align 8
  %557 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1022 = getelementptr inbounds %struct.buffer, %struct.buffer* %557, i32 0, i32 73
  %558 = load %struct.buffer_text*, %struct.buffer_text** %text1022, align 8
  %gpt_byte1023 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %558, i32 0, i32 3
  %559 = load i64, i64* %gpt_byte1023, align 8
  %cmp1024 = icmp sge i64 %556, %559
  br i1 %cmp1024, label %cond.true.1026, label %cond.false.1029

cond.true.1026:                                   ; preds = %cond.false.1021
  %560 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1027 = getelementptr inbounds %struct.buffer, %struct.buffer* %560, i32 0, i32 73
  %561 = load %struct.buffer_text*, %struct.buffer_text** %text1027, align 8
  %gap_size1028 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %561, i32 0, i32 5
  %562 = load i64, i64* %gap_size1028, align 8
  br label %cond.end.1030

cond.false.1029:                                  ; preds = %cond.false.1021
  br label %cond.end.1030

cond.end.1030:                                    ; preds = %cond.false.1029, %cond.true.1026
  %cond1031 = phi i64 [ %562, %cond.true.1026 ], [ 0, %cond.false.1029 ]
  %563 = load i64, i64* %from_byte, align 8
  %add1032 = add nsw i64 %cond1031, %563
  %564 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1033 = getelementptr inbounds %struct.buffer, %struct.buffer* %564, i32 0, i32 73
  %565 = load %struct.buffer_text*, %struct.buffer_text** %text1033, align 8
  %beg1034 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %565, i32 0, i32 0
  %566 = load i8*, i8** %beg1034, align 8
  %add.ptr1035 = getelementptr inbounds i8, i8* %566, i64 %add1032
  %add.ptr1036 = getelementptr inbounds i8, i8* %add.ptr1035, i64 -1
  %567 = load i8, i8* %add.ptr1036, align 1
  %conv1037 = zext i8 %567 to i32
  %add1038 = add nsw i32 %conv1037, 4194048
  br label %cond.end.1039

cond.end.1039:                                    ; preds = %cond.end.1030, %cond.end.1013
  %cond1040 = phi i32 [ %conv1020, %cond.end.1013 ], [ %add1038, %cond.end.1030 ]
  br label %cond.end.1041

cond.end.1041:                                    ; preds = %cond.end.1039, %cond.true.961
  %cond1042 = phi i32 [ %call962, %cond.true.961 ], [ %cond1040, %cond.end.1039 ]
  store i32 %cond1042, i32* %c, align 4
  %568 = load i32, i32* %c, align 4
  %569 = load i8, i8* %multibyte_symbol_p, align 1
  %tobool1043 = trunc i8 %569 to i1
  %call1044 = call i32 @syntax_multibyte(i32 %568, i1 zeroext %tobool1043)
  store i32 %call1044, i32* %c_code, align 4
  %570 = load i32, i32* %code, align 4
  %cmp1045 = icmp eq i32 %570, 7
  br i1 %cmp1045, label %cond.true.1047, label %cond.false.1053

cond.true.1047:                                   ; preds = %cond.end.1041
  %571 = load i32, i32* %c, align 4
  %572 = load i32, i32* %stringterm, align 4
  %cmp1048 = icmp eq i32 %571, %572
  br i1 %cmp1048, label %land.lhs.true.1050, label %if.end.1057

land.lhs.true.1050:                               ; preds = %cond.true.1047
  %573 = load i32, i32* %c_code, align 4
  %cmp1051 = icmp eq i32 %573, 7
  br i1 %cmp1051, label %if.then.1056, label %if.end.1057

cond.false.1053:                                  ; preds = %cond.end.1041
  %574 = load i32, i32* %c_code, align 4
  %cmp1054 = icmp eq i32 %574, 15
  br i1 %cmp1054, label %if.then.1056, label %if.end.1057

if.then.1056:                                     ; preds = %cond.false.1053, %land.lhs.true.1050
  br label %while.end.1179

if.end.1057:                                      ; preds = %cond.false.1053, %land.lhs.true.1050, %cond.true.1047
  %575 = load i32, i32* %c_code, align 4
  %cmp1058 = icmp eq i32 %575, 10
  br i1 %cmp1058, label %if.then.1063, label %lor.lhs.false.1060

lor.lhs.false.1060:                               ; preds = %if.end.1057
  %576 = load i32, i32* %c_code, align 4
  %cmp1061 = icmp eq i32 %576, 9
  br i1 %cmp1061, label %if.then.1063, label %if.end.1121

if.then.1063:                                     ; preds = %lor.lhs.false.1060, %if.end.1057
  br label %do.body.1064

do.body.1064:                                     ; preds = %if.then.1063
  %577 = load i64, i64* %from.addr, align 8
  %inc1065 = add nsw i64 %577, 1
  store i64 %inc1065, i64* %from.addr, align 8
  %578 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_1066 = getelementptr inbounds %struct.buffer, %struct.buffer* %578, i32 0, i32 39
  %579 = load i64, i64* %enable_multibyte_characters_1066, align 8
  %call1067 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1068 = icmp eq i64 %579, %call1067
  br i1 %cmp1068, label %if.then.1070, label %if.else.1072

if.then.1070:                                     ; preds = %do.body.1064
  %580 = load i64, i64* %from_byte, align 8
  %inc1071 = add nsw i64 %580, 1
  store i64 %inc1071, i64* %from_byte, align 8
  br label %if.end.1119

if.else.1072:                                     ; preds = %do.body.1064
  br label %do.body.1073

do.body.1073:                                     ; preds = %if.else.1072
  %581 = load i64, i64* %from_byte, align 8
  %582 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1075 = getelementptr inbounds %struct.buffer, %struct.buffer* %582, i32 0, i32 73
  %583 = load %struct.buffer_text*, %struct.buffer_text** %text1075, align 8
  %gpt_byte1076 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %583, i32 0, i32 3
  %584 = load i64, i64* %gpt_byte1076, align 8
  %cmp1077 = icmp sge i64 %581, %584
  br i1 %cmp1077, label %cond.true.1079, label %cond.false.1082

cond.true.1079:                                   ; preds = %do.body.1073
  %585 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1080 = getelementptr inbounds %struct.buffer, %struct.buffer* %585, i32 0, i32 73
  %586 = load %struct.buffer_text*, %struct.buffer_text** %text1080, align 8
  %gap_size1081 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %586, i32 0, i32 5
  %587 = load i64, i64* %gap_size1081, align 8
  br label %cond.end.1083

cond.false.1082:                                  ; preds = %do.body.1073
  br label %cond.end.1083

cond.end.1083:                                    ; preds = %cond.false.1082, %cond.true.1079
  %cond1084 = phi i64 [ %587, %cond.true.1079 ], [ 0, %cond.false.1082 ]
  %588 = load i64, i64* %from_byte, align 8
  %add1085 = add nsw i64 %cond1084, %588
  %589 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1086 = getelementptr inbounds %struct.buffer, %struct.buffer* %589, i32 0, i32 73
  %590 = load %struct.buffer_text*, %struct.buffer_text** %text1086, align 8
  %beg1087 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %590, i32 0, i32 0
  %591 = load i8*, i8** %beg1087, align 8
  %add.ptr1088 = getelementptr inbounds i8, i8* %591, i64 %add1085
  %add.ptr1089 = getelementptr inbounds i8, i8* %add.ptr1088, i64 -1
  store i8* %add.ptr1089, i8** %chp1074, align 8
  %592 = load i8*, i8** %chp1074, align 8
  %593 = load i8, i8* %592, align 1
  %conv1090 = zext i8 %593 to i32
  %and1091 = and i32 %conv1090, 128
  %tobool1092 = icmp ne i32 %and1091, 0
  br i1 %tobool1092, label %cond.false.1094, label %cond.true.1093

cond.true.1093:                                   ; preds = %cond.end.1083
  br label %cond.end.1114

cond.false.1094:                                  ; preds = %cond.end.1083
  %594 = load i8*, i8** %chp1074, align 8
  %595 = load i8, i8* %594, align 1
  %conv1095 = zext i8 %595 to i32
  %and1096 = and i32 %conv1095, 32
  %tobool1097 = icmp ne i32 %and1096, 0
  br i1 %tobool1097, label %cond.false.1099, label %cond.true.1098

cond.true.1098:                                   ; preds = %cond.false.1094
  br label %cond.end.1112

cond.false.1099:                                  ; preds = %cond.false.1094
  %596 = load i8*, i8** %chp1074, align 8
  %597 = load i8, i8* %596, align 1
  %conv1100 = zext i8 %597 to i32
  %and1101 = and i32 %conv1100, 16
  %tobool1102 = icmp ne i32 %and1101, 0
  br i1 %tobool1102, label %cond.false.1104, label %cond.true.1103

cond.true.1103:                                   ; preds = %cond.false.1099
  br label %cond.end.1110

cond.false.1104:                                  ; preds = %cond.false.1099
  %598 = load i8*, i8** %chp1074, align 8
  %599 = load i8, i8* %598, align 1
  %conv1105 = zext i8 %599 to i32
  %and1106 = and i32 %conv1105, 8
  %tobool1107 = icmp ne i32 %and1106, 0
  %lnot1108 = xor i1 %tobool1107, true
  %cond1109 = select i1 %lnot1108, i32 4, i32 5
  br label %cond.end.1110

cond.end.1110:                                    ; preds = %cond.false.1104, %cond.true.1103
  %cond1111 = phi i32 [ 3, %cond.true.1103 ], [ %cond1109, %cond.false.1104 ]
  br label %cond.end.1112

cond.end.1112:                                    ; preds = %cond.end.1110, %cond.true.1098
  %cond1113 = phi i32 [ 2, %cond.true.1098 ], [ %cond1111, %cond.end.1110 ]
  br label %cond.end.1114

cond.end.1114:                                    ; preds = %cond.end.1112, %cond.true.1093
  %cond1115 = phi i32 [ 1, %cond.true.1093 ], [ %cond1113, %cond.end.1112 ]
  %conv1116 = sext i32 %cond1115 to i64
  %600 = load i64, i64* %from_byte, align 8
  %add1117 = add nsw i64 %600, %conv1116
  store i64 %add1117, i64* %from_byte, align 8
  br label %do.end.1118

do.end.1118:                                      ; preds = %cond.end.1114
  br label %if.end.1119

if.end.1119:                                      ; preds = %do.end.1118, %if.then.1070
  br label %do.end.1120

do.end.1120:                                      ; preds = %if.end.1119
  br label %if.end.1121

if.end.1121:                                      ; preds = %do.end.1120, %lor.lhs.false.1060
  br label %do.body.1122

do.body.1122:                                     ; preds = %if.end.1121
  %601 = load i64, i64* %from.addr, align 8
  %inc1123 = add nsw i64 %601, 1
  store i64 %inc1123, i64* %from.addr, align 8
  %602 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_1124 = getelementptr inbounds %struct.buffer, %struct.buffer* %602, i32 0, i32 39
  %603 = load i64, i64* %enable_multibyte_characters_1124, align 8
  %call1125 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1126 = icmp eq i64 %603, %call1125
  br i1 %cmp1126, label %if.then.1128, label %if.else.1130

if.then.1128:                                     ; preds = %do.body.1122
  %604 = load i64, i64* %from_byte, align 8
  %inc1129 = add nsw i64 %604, 1
  store i64 %inc1129, i64* %from_byte, align 8
  br label %if.end.1177

if.else.1130:                                     ; preds = %do.body.1122
  br label %do.body.1131

do.body.1131:                                     ; preds = %if.else.1130
  %605 = load i64, i64* %from_byte, align 8
  %606 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1133 = getelementptr inbounds %struct.buffer, %struct.buffer* %606, i32 0, i32 73
  %607 = load %struct.buffer_text*, %struct.buffer_text** %text1133, align 8
  %gpt_byte1134 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %607, i32 0, i32 3
  %608 = load i64, i64* %gpt_byte1134, align 8
  %cmp1135 = icmp sge i64 %605, %608
  br i1 %cmp1135, label %cond.true.1137, label %cond.false.1140

cond.true.1137:                                   ; preds = %do.body.1131
  %609 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1138 = getelementptr inbounds %struct.buffer, %struct.buffer* %609, i32 0, i32 73
  %610 = load %struct.buffer_text*, %struct.buffer_text** %text1138, align 8
  %gap_size1139 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %610, i32 0, i32 5
  %611 = load i64, i64* %gap_size1139, align 8
  br label %cond.end.1141

cond.false.1140:                                  ; preds = %do.body.1131
  br label %cond.end.1141

cond.end.1141:                                    ; preds = %cond.false.1140, %cond.true.1137
  %cond1142 = phi i64 [ %611, %cond.true.1137 ], [ 0, %cond.false.1140 ]
  %612 = load i64, i64* %from_byte, align 8
  %add1143 = add nsw i64 %cond1142, %612
  %613 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1144 = getelementptr inbounds %struct.buffer, %struct.buffer* %613, i32 0, i32 73
  %614 = load %struct.buffer_text*, %struct.buffer_text** %text1144, align 8
  %beg1145 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %614, i32 0, i32 0
  %615 = load i8*, i8** %beg1145, align 8
  %add.ptr1146 = getelementptr inbounds i8, i8* %615, i64 %add1143
  %add.ptr1147 = getelementptr inbounds i8, i8* %add.ptr1146, i64 -1
  store i8* %add.ptr1147, i8** %chp1132, align 8
  %616 = load i8*, i8** %chp1132, align 8
  %617 = load i8, i8* %616, align 1
  %conv1148 = zext i8 %617 to i32
  %and1149 = and i32 %conv1148, 128
  %tobool1150 = icmp ne i32 %and1149, 0
  br i1 %tobool1150, label %cond.false.1152, label %cond.true.1151

cond.true.1151:                                   ; preds = %cond.end.1141
  br label %cond.end.1172

cond.false.1152:                                  ; preds = %cond.end.1141
  %618 = load i8*, i8** %chp1132, align 8
  %619 = load i8, i8* %618, align 1
  %conv1153 = zext i8 %619 to i32
  %and1154 = and i32 %conv1153, 32
  %tobool1155 = icmp ne i32 %and1154, 0
  br i1 %tobool1155, label %cond.false.1157, label %cond.true.1156

cond.true.1156:                                   ; preds = %cond.false.1152
  br label %cond.end.1170

cond.false.1157:                                  ; preds = %cond.false.1152
  %620 = load i8*, i8** %chp1132, align 8
  %621 = load i8, i8* %620, align 1
  %conv1158 = zext i8 %621 to i32
  %and1159 = and i32 %conv1158, 16
  %tobool1160 = icmp ne i32 %and1159, 0
  br i1 %tobool1160, label %cond.false.1162, label %cond.true.1161

cond.true.1161:                                   ; preds = %cond.false.1157
  br label %cond.end.1168

cond.false.1162:                                  ; preds = %cond.false.1157
  %622 = load i8*, i8** %chp1132, align 8
  %623 = load i8, i8* %622, align 1
  %conv1163 = zext i8 %623 to i32
  %and1164 = and i32 %conv1163, 8
  %tobool1165 = icmp ne i32 %and1164, 0
  %lnot1166 = xor i1 %tobool1165, true
  %cond1167 = select i1 %lnot1166, i32 4, i32 5
  br label %cond.end.1168

cond.end.1168:                                    ; preds = %cond.false.1162, %cond.true.1161
  %cond1169 = phi i32 [ 3, %cond.true.1161 ], [ %cond1167, %cond.false.1162 ]
  br label %cond.end.1170

cond.end.1170:                                    ; preds = %cond.end.1168, %cond.true.1156
  %cond1171 = phi i32 [ 2, %cond.true.1156 ], [ %cond1169, %cond.end.1168 ]
  br label %cond.end.1172

cond.end.1172:                                    ; preds = %cond.end.1170, %cond.true.1151
  %cond1173 = phi i32 [ 1, %cond.true.1151 ], [ %cond1171, %cond.end.1170 ]
  %conv1174 = sext i32 %cond1173 to i64
  %624 = load i64, i64* %from_byte, align 8
  %add1175 = add nsw i64 %624, %conv1174
  store i64 %add1175, i64* %from_byte, align 8
  br label %do.end.1176

do.end.1176:                                      ; preds = %cond.end.1172
  br label %if.end.1177

if.end.1177:                                      ; preds = %do.end.1176, %if.then.1128
  br label %do.end.1178

do.end.1178:                                      ; preds = %if.end.1177
  br label %while.body.952

while.end.1179:                                   ; preds = %if.then.1056
  br label %do.body.1180

do.body.1180:                                     ; preds = %while.end.1179
  %625 = load i64, i64* %from.addr, align 8
  %inc1181 = add nsw i64 %625, 1
  store i64 %inc1181, i64* %from.addr, align 8
  %626 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_1182 = getelementptr inbounds %struct.buffer, %struct.buffer* %626, i32 0, i32 39
  %627 = load i64, i64* %enable_multibyte_characters_1182, align 8
  %call1183 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1184 = icmp eq i64 %627, %call1183
  br i1 %cmp1184, label %if.then.1186, label %if.else.1188

if.then.1186:                                     ; preds = %do.body.1180
  %628 = load i64, i64* %from_byte, align 8
  %inc1187 = add nsw i64 %628, 1
  store i64 %inc1187, i64* %from_byte, align 8
  br label %if.end.1235

if.else.1188:                                     ; preds = %do.body.1180
  br label %do.body.1189

do.body.1189:                                     ; preds = %if.else.1188
  %629 = load i64, i64* %from_byte, align 8
  %630 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1191 = getelementptr inbounds %struct.buffer, %struct.buffer* %630, i32 0, i32 73
  %631 = load %struct.buffer_text*, %struct.buffer_text** %text1191, align 8
  %gpt_byte1192 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %631, i32 0, i32 3
  %632 = load i64, i64* %gpt_byte1192, align 8
  %cmp1193 = icmp sge i64 %629, %632
  br i1 %cmp1193, label %cond.true.1195, label %cond.false.1198

cond.true.1195:                                   ; preds = %do.body.1189
  %633 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1196 = getelementptr inbounds %struct.buffer, %struct.buffer* %633, i32 0, i32 73
  %634 = load %struct.buffer_text*, %struct.buffer_text** %text1196, align 8
  %gap_size1197 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %634, i32 0, i32 5
  %635 = load i64, i64* %gap_size1197, align 8
  br label %cond.end.1199

cond.false.1198:                                  ; preds = %do.body.1189
  br label %cond.end.1199

cond.end.1199:                                    ; preds = %cond.false.1198, %cond.true.1195
  %cond1200 = phi i64 [ %635, %cond.true.1195 ], [ 0, %cond.false.1198 ]
  %636 = load i64, i64* %from_byte, align 8
  %add1201 = add nsw i64 %cond1200, %636
  %637 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1202 = getelementptr inbounds %struct.buffer, %struct.buffer* %637, i32 0, i32 73
  %638 = load %struct.buffer_text*, %struct.buffer_text** %text1202, align 8
  %beg1203 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %638, i32 0, i32 0
  %639 = load i8*, i8** %beg1203, align 8
  %add.ptr1204 = getelementptr inbounds i8, i8* %639, i64 %add1201
  %add.ptr1205 = getelementptr inbounds i8, i8* %add.ptr1204, i64 -1
  store i8* %add.ptr1205, i8** %chp1190, align 8
  %640 = load i8*, i8** %chp1190, align 8
  %641 = load i8, i8* %640, align 1
  %conv1206 = zext i8 %641 to i32
  %and1207 = and i32 %conv1206, 128
  %tobool1208 = icmp ne i32 %and1207, 0
  br i1 %tobool1208, label %cond.false.1210, label %cond.true.1209

cond.true.1209:                                   ; preds = %cond.end.1199
  br label %cond.end.1230

cond.false.1210:                                  ; preds = %cond.end.1199
  %642 = load i8*, i8** %chp1190, align 8
  %643 = load i8, i8* %642, align 1
  %conv1211 = zext i8 %643 to i32
  %and1212 = and i32 %conv1211, 32
  %tobool1213 = icmp ne i32 %and1212, 0
  br i1 %tobool1213, label %cond.false.1215, label %cond.true.1214

cond.true.1214:                                   ; preds = %cond.false.1210
  br label %cond.end.1228

cond.false.1215:                                  ; preds = %cond.false.1210
  %644 = load i8*, i8** %chp1190, align 8
  %645 = load i8, i8* %644, align 1
  %conv1216 = zext i8 %645 to i32
  %and1217 = and i32 %conv1216, 16
  %tobool1218 = icmp ne i32 %and1217, 0
  br i1 %tobool1218, label %cond.false.1220, label %cond.true.1219

cond.true.1219:                                   ; preds = %cond.false.1215
  br label %cond.end.1226

cond.false.1220:                                  ; preds = %cond.false.1215
  %646 = load i8*, i8** %chp1190, align 8
  %647 = load i8, i8* %646, align 1
  %conv1221 = zext i8 %647 to i32
  %and1222 = and i32 %conv1221, 8
  %tobool1223 = icmp ne i32 %and1222, 0
  %lnot1224 = xor i1 %tobool1223, true
  %cond1225 = select i1 %lnot1224, i32 4, i32 5
  br label %cond.end.1226

cond.end.1226:                                    ; preds = %cond.false.1220, %cond.true.1219
  %cond1227 = phi i32 [ 3, %cond.true.1219 ], [ %cond1225, %cond.false.1220 ]
  br label %cond.end.1228

cond.end.1228:                                    ; preds = %cond.end.1226, %cond.true.1214
  %cond1229 = phi i32 [ 2, %cond.true.1214 ], [ %cond1227, %cond.end.1226 ]
  br label %cond.end.1230

cond.end.1230:                                    ; preds = %cond.end.1228, %cond.true.1209
  %cond1231 = phi i32 [ 1, %cond.true.1209 ], [ %cond1229, %cond.end.1228 ]
  %conv1232 = sext i32 %cond1231 to i64
  %648 = load i64, i64* %from_byte, align 8
  %add1233 = add nsw i64 %648, %conv1232
  store i64 %add1233, i64* %from_byte, align 8
  br label %do.end.1234

do.end.1234:                                      ; preds = %cond.end.1230
  br label %if.end.1235

if.end.1235:                                      ; preds = %do.end.1234, %if.then.1186
  br label %do.end.1236

do.end.1236:                                      ; preds = %if.end.1235
  %649 = load i64, i64* %depth.addr, align 8
  %tobool1237 = icmp ne i64 %649, 0
  br i1 %tobool1237, label %if.end.1242, label %land.lhs.true.1238

land.lhs.true.1238:                               ; preds = %do.end.1236
  %650 = load i8, i8* %sexpflag.addr, align 1
  %tobool1239 = trunc i8 %650 to i1
  br i1 %tobool1239, label %if.then.1241, label %if.end.1242

if.then.1241:                                     ; preds = %land.lhs.true.1238
  br label %done

if.end.1242:                                      ; preds = %land.lhs.true.1238, %do.end.1236
  br label %sw.epilog.1244

sw.default.1243:                                  ; preds = %if.end.336
  br label %sw.epilog.1244

sw.epilog.1244:                                   ; preds = %sw.default.1243, %if.end.1242, %if.end.862, %if.end.849, %if.then.690, %do.end.687, %if.then.618, %if.then.401
  br label %while.cond.24

while.end.1245:                                   ; preds = %while.cond.24
  %651 = load i64, i64* %depth.addr, align 8
  %tobool1246 = icmp ne i64 %651, 0
  br i1 %tobool1246, label %if.then.1247, label %if.end.1248

if.then.1247:                                     ; preds = %while.end.1245
  br label %lose

if.end.1248:                                      ; preds = %while.end.1245
  store i8 0, i8* @immediate_quit, align 1
  %call1249 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call1249, i64* %retval
  br label %return

done:                                             ; preds = %if.then.1241, %if.then.852, %if.then.848, %if.then.628, %while.end, %sw.default
  %652 = load i64, i64* %count.addr, align 8
  %dec1250 = add nsw i64 %652, -1
  store i64 %dec1250, i64* %count.addr, align 8
  br label %while.cond

while.end.1251:                                   ; preds = %while.cond
  br label %while.cond.1252

while.cond.1252:                                  ; preds = %done2, %while.end.1251
  %653 = load i64, i64* %count.addr, align 8
  %cmp1253 = icmp slt i64 %653, 0
  br i1 %cmp1253, label %while.body.1255, label %while.end.2524

while.body.1255:                                  ; preds = %while.cond.1252
  br label %while.cond.1256

while.cond.1256:                                  ; preds = %sw.epilog.2517, %if.then.1606, %while.body.1255
  %654 = load i64, i64* %from.addr, align 8
  %655 = load i64, i64* %stop, align 8
  %cmp1257 = icmp sgt i64 %654, %655
  br i1 %cmp1257, label %while.body.1259, label %while.end.2518

while.body.1259:                                  ; preds = %while.cond.1256
  br label %do.body.1261

do.body.1261:                                     ; preds = %while.body.1259
  %656 = load i64, i64* %from.addr, align 8
  %dec1262 = add nsw i64 %656, -1
  store i64 %dec1262, i64* %from.addr, align 8
  %657 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_1263 = getelementptr inbounds %struct.buffer, %struct.buffer* %657, i32 0, i32 39
  %658 = load i64, i64* %enable_multibyte_characters_1263, align 8
  %call1264 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1265 = icmp eq i64 %658, %call1264
  br i1 %cmp1265, label %if.then.1267, label %if.else.1269

if.then.1267:                                     ; preds = %do.body.1261
  %659 = load i64, i64* %from_byte, align 8
  %dec1268 = add nsw i64 %659, -1
  store i64 %dec1268, i64* %from_byte, align 8
  br label %if.end.1301

if.else.1269:                                     ; preds = %do.body.1261
  br label %do.body.1270

do.body.1270:                                     ; preds = %if.else.1269
  %660 = load i64, i64* %from_byte, align 8
  %dec1272 = add nsw i64 %660, -1
  store i64 %dec1272, i64* %from_byte, align 8
  %661 = load i64, i64* %from_byte, align 8
  %662 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1273 = getelementptr inbounds %struct.buffer, %struct.buffer* %662, i32 0, i32 73
  %663 = load %struct.buffer_text*, %struct.buffer_text** %text1273, align 8
  %gpt_byte1274 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %663, i32 0, i32 3
  %664 = load i64, i64* %gpt_byte1274, align 8
  %cmp1275 = icmp slt i64 %661, %664
  br i1 %cmp1275, label %if.then.1277, label %if.else.1282

if.then.1277:                                     ; preds = %do.body.1270
  %665 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1278 = getelementptr inbounds %struct.buffer, %struct.buffer* %665, i32 0, i32 73
  %666 = load %struct.buffer_text*, %struct.buffer_text** %text1278, align 8
  %beg1279 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %666, i32 0, i32 0
  %667 = load i8*, i8** %beg1279, align 8
  %668 = load i64, i64* %from_byte, align 8
  %add.ptr1280 = getelementptr inbounds i8, i8* %667, i64 %668
  %add.ptr1281 = getelementptr inbounds i8, i8* %add.ptr1280, i64 -1
  store i8* %add.ptr1281, i8** %chp1271, align 8
  br label %if.end.1290

if.else.1282:                                     ; preds = %do.body.1270
  %669 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1283 = getelementptr inbounds %struct.buffer, %struct.buffer* %669, i32 0, i32 73
  %670 = load %struct.buffer_text*, %struct.buffer_text** %text1283, align 8
  %beg1284 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %670, i32 0, i32 0
  %671 = load i8*, i8** %beg1284, align 8
  %672 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1285 = getelementptr inbounds %struct.buffer, %struct.buffer* %672, i32 0, i32 73
  %673 = load %struct.buffer_text*, %struct.buffer_text** %text1285, align 8
  %gap_size1286 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %673, i32 0, i32 5
  %674 = load i64, i64* %gap_size1286, align 8
  %add.ptr1287 = getelementptr inbounds i8, i8* %671, i64 %674
  %675 = load i64, i64* %from_byte, align 8
  %add.ptr1288 = getelementptr inbounds i8, i8* %add.ptr1287, i64 %675
  %add.ptr1289 = getelementptr inbounds i8, i8* %add.ptr1288, i64 -1
  store i8* %add.ptr1289, i8** %chp1271, align 8
  br label %if.end.1290

if.end.1290:                                      ; preds = %if.else.1282, %if.then.1277
  br label %while.cond.1291

while.cond.1291:                                  ; preds = %while.body.1297, %if.end.1290
  %676 = load i8*, i8** %chp1271, align 8
  %677 = load i8, i8* %676, align 1
  %conv1292 = zext i8 %677 to i32
  %and1293 = and i32 %conv1292, 192
  %cmp1294 = icmp ne i32 %and1293, 128
  %lnot1296 = xor i1 %cmp1294, true
  br i1 %lnot1296, label %while.body.1297, label %while.end.1299

while.body.1297:                                  ; preds = %while.cond.1291
  %678 = load i8*, i8** %chp1271, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %678, i32 -1
  store i8* %incdec.ptr, i8** %chp1271, align 8
  %679 = load i64, i64* %from_byte, align 8
  %dec1298 = add nsw i64 %679, -1
  store i64 %dec1298, i64* %from_byte, align 8
  br label %while.cond.1291

while.end.1299:                                   ; preds = %while.cond.1291
  br label %do.end.1300

do.end.1300:                                      ; preds = %while.end.1299
  br label %if.end.1301

if.end.1301:                                      ; preds = %do.end.1300, %if.then.1267
  br label %do.end.1302

do.end.1302:                                      ; preds = %if.end.1301
  %680 = load i64, i64* %from.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_BACKWARD(i64 %680)
  %681 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_1303 = getelementptr inbounds %struct.buffer, %struct.buffer* %681, i32 0, i32 39
  %682 = load i64, i64* %enable_multibyte_characters_1303, align 8
  %call1304 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1305 = icmp eq i64 %682, %call1304
  br i1 %cmp1305, label %cond.false.1309, label %cond.true.1307

cond.true.1307:                                   ; preds = %do.end.1302
  %683 = load i64, i64* %from_byte, align 8
  %call1308 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %683)
  br label %cond.end.1387

cond.false.1309:                                  ; preds = %do.end.1302
  br i1 true, label %cond.true.1310, label %cond.false.1330

cond.true.1310:                                   ; preds = %cond.false.1309
  %684 = load i64, i64* %from_byte, align 8
  %685 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1311 = getelementptr inbounds %struct.buffer, %struct.buffer* %685, i32 0, i32 73
  %686 = load %struct.buffer_text*, %struct.buffer_text** %text1311, align 8
  %gpt_byte1312 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %686, i32 0, i32 3
  %687 = load i64, i64* %gpt_byte1312, align 8
  %cmp1313 = icmp sge i64 %684, %687
  br i1 %cmp1313, label %cond.true.1315, label %cond.false.1318

cond.true.1315:                                   ; preds = %cond.true.1310
  %688 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1316 = getelementptr inbounds %struct.buffer, %struct.buffer* %688, i32 0, i32 73
  %689 = load %struct.buffer_text*, %struct.buffer_text** %text1316, align 8
  %gap_size1317 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %689, i32 0, i32 5
  %690 = load i64, i64* %gap_size1317, align 8
  br label %cond.end.1319

cond.false.1318:                                  ; preds = %cond.true.1310
  br label %cond.end.1319

cond.end.1319:                                    ; preds = %cond.false.1318, %cond.true.1315
  %cond1320 = phi i64 [ %690, %cond.true.1315 ], [ 0, %cond.false.1318 ]
  %691 = load i64, i64* %from_byte, align 8
  %add1321 = add nsw i64 %cond1320, %691
  %692 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1322 = getelementptr inbounds %struct.buffer, %struct.buffer* %692, i32 0, i32 73
  %693 = load %struct.buffer_text*, %struct.buffer_text** %text1322, align 8
  %beg1323 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %693, i32 0, i32 0
  %694 = load i8*, i8** %beg1323, align 8
  %add.ptr1324 = getelementptr inbounds i8, i8* %694, i64 %add1321
  %add.ptr1325 = getelementptr inbounds i8, i8* %add.ptr1324, i64 -1
  %695 = load i8, i8* %add.ptr1325, align 1
  %conv1326 = zext i8 %695 to i32
  %add1327 = add i32 %conv1326, 0
  %cmp1328 = icmp ult i32 %add1327, 128
  br i1 %cmp1328, label %cond.true.1350, label %cond.false.1367

cond.false.1330:                                  ; preds = %cond.false.1309
  %696 = load i64, i64* %from_byte, align 8
  %697 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1331 = getelementptr inbounds %struct.buffer, %struct.buffer* %697, i32 0, i32 73
  %698 = load %struct.buffer_text*, %struct.buffer_text** %text1331, align 8
  %gpt_byte1332 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %698, i32 0, i32 3
  %699 = load i64, i64* %gpt_byte1332, align 8
  %cmp1333 = icmp sge i64 %696, %699
  br i1 %cmp1333, label %cond.true.1335, label %cond.false.1338

cond.true.1335:                                   ; preds = %cond.false.1330
  %700 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1336 = getelementptr inbounds %struct.buffer, %struct.buffer* %700, i32 0, i32 73
  %701 = load %struct.buffer_text*, %struct.buffer_text** %text1336, align 8
  %gap_size1337 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %701, i32 0, i32 5
  %702 = load i64, i64* %gap_size1337, align 8
  br label %cond.end.1339

cond.false.1338:                                  ; preds = %cond.false.1330
  br label %cond.end.1339

cond.end.1339:                                    ; preds = %cond.false.1338, %cond.true.1335
  %cond1340 = phi i64 [ %702, %cond.true.1335 ], [ 0, %cond.false.1338 ]
  %703 = load i64, i64* %from_byte, align 8
  %add1341 = add nsw i64 %cond1340, %703
  %704 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1342 = getelementptr inbounds %struct.buffer, %struct.buffer* %704, i32 0, i32 73
  %705 = load %struct.buffer_text*, %struct.buffer_text** %text1342, align 8
  %beg1343 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %705, i32 0, i32 0
  %706 = load i8*, i8** %beg1343, align 8
  %add.ptr1344 = getelementptr inbounds i8, i8* %706, i64 %add1341
  %add.ptr1345 = getelementptr inbounds i8, i8* %add.ptr1344, i64 -1
  %707 = load i8, i8* %add.ptr1345, align 1
  %conv1346 = zext i8 %707 to i64
  %add1347 = add i64 %conv1346, 0
  %cmp1348 = icmp ult i64 %add1347, 128
  br i1 %cmp1348, label %cond.true.1350, label %cond.false.1367

cond.true.1350:                                   ; preds = %cond.end.1339, %cond.end.1319
  %708 = load i64, i64* %from_byte, align 8
  %709 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1351 = getelementptr inbounds %struct.buffer, %struct.buffer* %709, i32 0, i32 73
  %710 = load %struct.buffer_text*, %struct.buffer_text** %text1351, align 8
  %gpt_byte1352 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %710, i32 0, i32 3
  %711 = load i64, i64* %gpt_byte1352, align 8
  %cmp1353 = icmp sge i64 %708, %711
  br i1 %cmp1353, label %cond.true.1355, label %cond.false.1358

cond.true.1355:                                   ; preds = %cond.true.1350
  %712 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1356 = getelementptr inbounds %struct.buffer, %struct.buffer* %712, i32 0, i32 73
  %713 = load %struct.buffer_text*, %struct.buffer_text** %text1356, align 8
  %gap_size1357 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %713, i32 0, i32 5
  %714 = load i64, i64* %gap_size1357, align 8
  br label %cond.end.1359

cond.false.1358:                                  ; preds = %cond.true.1350
  br label %cond.end.1359

cond.end.1359:                                    ; preds = %cond.false.1358, %cond.true.1355
  %cond1360 = phi i64 [ %714, %cond.true.1355 ], [ 0, %cond.false.1358 ]
  %715 = load i64, i64* %from_byte, align 8
  %add1361 = add nsw i64 %cond1360, %715
  %716 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1362 = getelementptr inbounds %struct.buffer, %struct.buffer* %716, i32 0, i32 73
  %717 = load %struct.buffer_text*, %struct.buffer_text** %text1362, align 8
  %beg1363 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %717, i32 0, i32 0
  %718 = load i8*, i8** %beg1363, align 8
  %add.ptr1364 = getelementptr inbounds i8, i8* %718, i64 %add1361
  %add.ptr1365 = getelementptr inbounds i8, i8* %add.ptr1364, i64 -1
  %719 = load i8, i8* %add.ptr1365, align 1
  %conv1366 = zext i8 %719 to i32
  br label %cond.end.1385

cond.false.1367:                                  ; preds = %cond.end.1339, %cond.end.1319
  %720 = load i64, i64* %from_byte, align 8
  %721 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1368 = getelementptr inbounds %struct.buffer, %struct.buffer* %721, i32 0, i32 73
  %722 = load %struct.buffer_text*, %struct.buffer_text** %text1368, align 8
  %gpt_byte1369 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %722, i32 0, i32 3
  %723 = load i64, i64* %gpt_byte1369, align 8
  %cmp1370 = icmp sge i64 %720, %723
  br i1 %cmp1370, label %cond.true.1372, label %cond.false.1375

cond.true.1372:                                   ; preds = %cond.false.1367
  %724 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1373 = getelementptr inbounds %struct.buffer, %struct.buffer* %724, i32 0, i32 73
  %725 = load %struct.buffer_text*, %struct.buffer_text** %text1373, align 8
  %gap_size1374 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %725, i32 0, i32 5
  %726 = load i64, i64* %gap_size1374, align 8
  br label %cond.end.1376

cond.false.1375:                                  ; preds = %cond.false.1367
  br label %cond.end.1376

cond.end.1376:                                    ; preds = %cond.false.1375, %cond.true.1372
  %cond1377 = phi i64 [ %726, %cond.true.1372 ], [ 0, %cond.false.1375 ]
  %727 = load i64, i64* %from_byte, align 8
  %add1378 = add nsw i64 %cond1377, %727
  %728 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1379 = getelementptr inbounds %struct.buffer, %struct.buffer* %728, i32 0, i32 73
  %729 = load %struct.buffer_text*, %struct.buffer_text** %text1379, align 8
  %beg1380 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %729, i32 0, i32 0
  %730 = load i8*, i8** %beg1380, align 8
  %add.ptr1381 = getelementptr inbounds i8, i8* %730, i64 %add1378
  %add.ptr1382 = getelementptr inbounds i8, i8* %add.ptr1381, i64 -1
  %731 = load i8, i8* %add.ptr1382, align 1
  %conv1383 = zext i8 %731 to i32
  %add1384 = add nsw i32 %conv1383, 4194048
  br label %cond.end.1385

cond.end.1385:                                    ; preds = %cond.end.1376, %cond.end.1359
  %cond1386 = phi i32 [ %conv1366, %cond.end.1359 ], [ %add1384, %cond.end.1376 ]
  br label %cond.end.1387

cond.end.1387:                                    ; preds = %cond.end.1385, %cond.true.1307
  %cond1388 = phi i32 [ %call1308, %cond.true.1307 ], [ %cond1386, %cond.end.1385 ]
  store i32 %cond1388, i32* %c, align 4
  %732 = load i32, i32* %c, align 4
  %call1389 = call i32 @syntax_property_with_flags(i32 %732, i1 zeroext true)
  store i32 %call1389, i32* %syntax1260, align 4
  %733 = load i32, i32* %c, align 4
  %734 = load i8, i8* %multibyte_symbol_p, align 1
  %tobool1390 = trunc i8 %734 to i1
  %call1391 = call i32 @syntax_multibyte(i32 %733, i1 zeroext %tobool1390)
  store i32 %call1391, i32* %code, align 4
  %735 = load i64, i64* %depth.addr, align 8
  %736 = load i64, i64* %min_depth, align 8
  %cmp1392 = icmp eq i64 %735, %736
  br i1 %cmp1392, label %if.then.1394, label %if.end.1395

if.then.1394:                                     ; preds = %cond.end.1387
  %737 = load i64, i64* %from.addr, align 8
  store i64 %737, i64* %last_good, align 8
  br label %if.end.1395

if.end.1395:                                      ; preds = %if.then.1394, %cond.end.1387
  store i32 0, i32* %comstyle, align 4
  %738 = load i32, i32* %syntax1260, align 4
  %call1396 = call zeroext i1 @SYNTAX_FLAGS_COMMENT_NESTED(i32 %738)
  %frombool1397 = zext i1 %call1396 to i8
  store i8 %frombool1397, i8* %comnested, align 1
  %739 = load i32, i32* %code, align 4
  %cmp1398 = icmp eq i32 %739, 12
  br i1 %cmp1398, label %if.then.1400, label %if.end.1402

if.then.1400:                                     ; preds = %if.end.1395
  %740 = load i32, i32* %syntax1260, align 4
  %call1401 = call i32 @SYNTAX_FLAGS_COMMENT_STYLE(i32 %740, i32 0)
  store i32 %call1401, i32* %comstyle, align 4
  br label %if.end.1402

if.end.1402:                                      ; preds = %if.then.1400, %if.end.1395
  %741 = load i64, i64* %from.addr, align 8
  %742 = load i64, i64* %stop, align 8
  %cmp1403 = icmp sgt i64 %741, %742
  br i1 %cmp1403, label %land.lhs.true.1405, label %if.end.1554

land.lhs.true.1405:                               ; preds = %if.end.1402
  %743 = load i32, i32* %syntax1260, align 4
  %call1406 = call zeroext i1 @SYNTAX_FLAGS_COMEND_SECOND(i32 %743)
  br i1 %call1406, label %land.lhs.true.1408, label %if.end.1554

land.lhs.true.1408:                               ; preds = %land.lhs.true.1405
  %744 = load i64, i64* %from.addr, align 8
  %745 = load i64, i64* %from_byte, align 8
  %call1409 = call zeroext i1 @prev_char_comend_first(i64 %744, i64 %745)
  br i1 %call1409, label %land.lhs.true.1411, label %if.end.1554

land.lhs.true.1411:                               ; preds = %land.lhs.true.1408
  %746 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 479), align 1
  %tobool1412 = trunc i8 %746 to i1
  br i1 %tobool1412, label %if.then.1414, label %if.end.1554

if.then.1414:                                     ; preds = %land.lhs.true.1411
  br label %do.body.1416

do.body.1416:                                     ; preds = %if.then.1414
  %747 = load i64, i64* %from.addr, align 8
  %dec1417 = add nsw i64 %747, -1
  store i64 %dec1417, i64* %from.addr, align 8
  %748 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_1418 = getelementptr inbounds %struct.buffer, %struct.buffer* %748, i32 0, i32 39
  %749 = load i64, i64* %enable_multibyte_characters_1418, align 8
  %call1419 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1420 = icmp eq i64 %749, %call1419
  br i1 %cmp1420, label %if.then.1422, label %if.else.1424

if.then.1422:                                     ; preds = %do.body.1416
  %750 = load i64, i64* %from_byte, align 8
  %dec1423 = add nsw i64 %750, -1
  store i64 %dec1423, i64* %from_byte, align 8
  br label %if.end.1457

if.else.1424:                                     ; preds = %do.body.1416
  br label %do.body.1425

do.body.1425:                                     ; preds = %if.else.1424
  %751 = load i64, i64* %from_byte, align 8
  %dec1427 = add nsw i64 %751, -1
  store i64 %dec1427, i64* %from_byte, align 8
  %752 = load i64, i64* %from_byte, align 8
  %753 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1428 = getelementptr inbounds %struct.buffer, %struct.buffer* %753, i32 0, i32 73
  %754 = load %struct.buffer_text*, %struct.buffer_text** %text1428, align 8
  %gpt_byte1429 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %754, i32 0, i32 3
  %755 = load i64, i64* %gpt_byte1429, align 8
  %cmp1430 = icmp slt i64 %752, %755
  br i1 %cmp1430, label %if.then.1432, label %if.else.1437

if.then.1432:                                     ; preds = %do.body.1425
  %756 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1433 = getelementptr inbounds %struct.buffer, %struct.buffer* %756, i32 0, i32 73
  %757 = load %struct.buffer_text*, %struct.buffer_text** %text1433, align 8
  %beg1434 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %757, i32 0, i32 0
  %758 = load i8*, i8** %beg1434, align 8
  %759 = load i64, i64* %from_byte, align 8
  %add.ptr1435 = getelementptr inbounds i8, i8* %758, i64 %759
  %add.ptr1436 = getelementptr inbounds i8, i8* %add.ptr1435, i64 -1
  store i8* %add.ptr1436, i8** %chp1426, align 8
  br label %if.end.1445

if.else.1437:                                     ; preds = %do.body.1425
  %760 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1438 = getelementptr inbounds %struct.buffer, %struct.buffer* %760, i32 0, i32 73
  %761 = load %struct.buffer_text*, %struct.buffer_text** %text1438, align 8
  %beg1439 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %761, i32 0, i32 0
  %762 = load i8*, i8** %beg1439, align 8
  %763 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1440 = getelementptr inbounds %struct.buffer, %struct.buffer* %763, i32 0, i32 73
  %764 = load %struct.buffer_text*, %struct.buffer_text** %text1440, align 8
  %gap_size1441 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %764, i32 0, i32 5
  %765 = load i64, i64* %gap_size1441, align 8
  %add.ptr1442 = getelementptr inbounds i8, i8* %762, i64 %765
  %766 = load i64, i64* %from_byte, align 8
  %add.ptr1443 = getelementptr inbounds i8, i8* %add.ptr1442, i64 %766
  %add.ptr1444 = getelementptr inbounds i8, i8* %add.ptr1443, i64 -1
  store i8* %add.ptr1444, i8** %chp1426, align 8
  br label %if.end.1445

if.end.1445:                                      ; preds = %if.else.1437, %if.then.1432
  br label %while.cond.1446

while.cond.1446:                                  ; preds = %while.body.1452, %if.end.1445
  %767 = load i8*, i8** %chp1426, align 8
  %768 = load i8, i8* %767, align 1
  %conv1447 = zext i8 %768 to i32
  %and1448 = and i32 %conv1447, 192
  %cmp1449 = icmp ne i32 %and1448, 128
  %lnot1451 = xor i1 %cmp1449, true
  br i1 %lnot1451, label %while.body.1452, label %while.end.1455

while.body.1452:                                  ; preds = %while.cond.1446
  %769 = load i8*, i8** %chp1426, align 8
  %incdec.ptr1453 = getelementptr inbounds i8, i8* %769, i32 -1
  store i8* %incdec.ptr1453, i8** %chp1426, align 8
  %770 = load i64, i64* %from_byte, align 8
  %dec1454 = add nsw i64 %770, -1
  store i64 %dec1454, i64* %from_byte, align 8
  br label %while.cond.1446

while.end.1455:                                   ; preds = %while.cond.1446
  br label %do.end.1456

do.end.1456:                                      ; preds = %while.end.1455
  br label %if.end.1457

if.end.1457:                                      ; preds = %do.end.1456, %if.then.1422
  br label %do.end.1458

do.end.1458:                                      ; preds = %if.end.1457
  %771 = load i64, i64* %from.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_BACKWARD(i64 %771)
  store i32 12, i32* %code, align 4
  %772 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_1459 = getelementptr inbounds %struct.buffer, %struct.buffer* %772, i32 0, i32 39
  %773 = load i64, i64* %enable_multibyte_characters_1459, align 8
  %call1460 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1461 = icmp eq i64 %773, %call1460
  br i1 %cmp1461, label %cond.false.1465, label %cond.true.1463

cond.true.1463:                                   ; preds = %do.end.1458
  %774 = load i64, i64* %from_byte, align 8
  %call1464 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %774)
  br label %cond.end.1543

cond.false.1465:                                  ; preds = %do.end.1458
  br i1 true, label %cond.true.1466, label %cond.false.1486

cond.true.1466:                                   ; preds = %cond.false.1465
  %775 = load i64, i64* %from_byte, align 8
  %776 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1467 = getelementptr inbounds %struct.buffer, %struct.buffer* %776, i32 0, i32 73
  %777 = load %struct.buffer_text*, %struct.buffer_text** %text1467, align 8
  %gpt_byte1468 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %777, i32 0, i32 3
  %778 = load i64, i64* %gpt_byte1468, align 8
  %cmp1469 = icmp sge i64 %775, %778
  br i1 %cmp1469, label %cond.true.1471, label %cond.false.1474

cond.true.1471:                                   ; preds = %cond.true.1466
  %779 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1472 = getelementptr inbounds %struct.buffer, %struct.buffer* %779, i32 0, i32 73
  %780 = load %struct.buffer_text*, %struct.buffer_text** %text1472, align 8
  %gap_size1473 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %780, i32 0, i32 5
  %781 = load i64, i64* %gap_size1473, align 8
  br label %cond.end.1475

cond.false.1474:                                  ; preds = %cond.true.1466
  br label %cond.end.1475

cond.end.1475:                                    ; preds = %cond.false.1474, %cond.true.1471
  %cond1476 = phi i64 [ %781, %cond.true.1471 ], [ 0, %cond.false.1474 ]
  %782 = load i64, i64* %from_byte, align 8
  %add1477 = add nsw i64 %cond1476, %782
  %783 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1478 = getelementptr inbounds %struct.buffer, %struct.buffer* %783, i32 0, i32 73
  %784 = load %struct.buffer_text*, %struct.buffer_text** %text1478, align 8
  %beg1479 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %784, i32 0, i32 0
  %785 = load i8*, i8** %beg1479, align 8
  %add.ptr1480 = getelementptr inbounds i8, i8* %785, i64 %add1477
  %add.ptr1481 = getelementptr inbounds i8, i8* %add.ptr1480, i64 -1
  %786 = load i8, i8* %add.ptr1481, align 1
  %conv1482 = zext i8 %786 to i32
  %add1483 = add i32 %conv1482, 0
  %cmp1484 = icmp ult i32 %add1483, 128
  br i1 %cmp1484, label %cond.true.1506, label %cond.false.1523

cond.false.1486:                                  ; preds = %cond.false.1465
  %787 = load i64, i64* %from_byte, align 8
  %788 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1487 = getelementptr inbounds %struct.buffer, %struct.buffer* %788, i32 0, i32 73
  %789 = load %struct.buffer_text*, %struct.buffer_text** %text1487, align 8
  %gpt_byte1488 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %789, i32 0, i32 3
  %790 = load i64, i64* %gpt_byte1488, align 8
  %cmp1489 = icmp sge i64 %787, %790
  br i1 %cmp1489, label %cond.true.1491, label %cond.false.1494

cond.true.1491:                                   ; preds = %cond.false.1486
  %791 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1492 = getelementptr inbounds %struct.buffer, %struct.buffer* %791, i32 0, i32 73
  %792 = load %struct.buffer_text*, %struct.buffer_text** %text1492, align 8
  %gap_size1493 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %792, i32 0, i32 5
  %793 = load i64, i64* %gap_size1493, align 8
  br label %cond.end.1495

cond.false.1494:                                  ; preds = %cond.false.1486
  br label %cond.end.1495

cond.end.1495:                                    ; preds = %cond.false.1494, %cond.true.1491
  %cond1496 = phi i64 [ %793, %cond.true.1491 ], [ 0, %cond.false.1494 ]
  %794 = load i64, i64* %from_byte, align 8
  %add1497 = add nsw i64 %cond1496, %794
  %795 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1498 = getelementptr inbounds %struct.buffer, %struct.buffer* %795, i32 0, i32 73
  %796 = load %struct.buffer_text*, %struct.buffer_text** %text1498, align 8
  %beg1499 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %796, i32 0, i32 0
  %797 = load i8*, i8** %beg1499, align 8
  %add.ptr1500 = getelementptr inbounds i8, i8* %797, i64 %add1497
  %add.ptr1501 = getelementptr inbounds i8, i8* %add.ptr1500, i64 -1
  %798 = load i8, i8* %add.ptr1501, align 1
  %conv1502 = zext i8 %798 to i64
  %add1503 = add i64 %conv1502, 0
  %cmp1504 = icmp ult i64 %add1503, 128
  br i1 %cmp1504, label %cond.true.1506, label %cond.false.1523

cond.true.1506:                                   ; preds = %cond.end.1495, %cond.end.1475
  %799 = load i64, i64* %from_byte, align 8
  %800 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1507 = getelementptr inbounds %struct.buffer, %struct.buffer* %800, i32 0, i32 73
  %801 = load %struct.buffer_text*, %struct.buffer_text** %text1507, align 8
  %gpt_byte1508 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %801, i32 0, i32 3
  %802 = load i64, i64* %gpt_byte1508, align 8
  %cmp1509 = icmp sge i64 %799, %802
  br i1 %cmp1509, label %cond.true.1511, label %cond.false.1514

cond.true.1511:                                   ; preds = %cond.true.1506
  %803 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1512 = getelementptr inbounds %struct.buffer, %struct.buffer* %803, i32 0, i32 73
  %804 = load %struct.buffer_text*, %struct.buffer_text** %text1512, align 8
  %gap_size1513 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %804, i32 0, i32 5
  %805 = load i64, i64* %gap_size1513, align 8
  br label %cond.end.1515

cond.false.1514:                                  ; preds = %cond.true.1506
  br label %cond.end.1515

cond.end.1515:                                    ; preds = %cond.false.1514, %cond.true.1511
  %cond1516 = phi i64 [ %805, %cond.true.1511 ], [ 0, %cond.false.1514 ]
  %806 = load i64, i64* %from_byte, align 8
  %add1517 = add nsw i64 %cond1516, %806
  %807 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1518 = getelementptr inbounds %struct.buffer, %struct.buffer* %807, i32 0, i32 73
  %808 = load %struct.buffer_text*, %struct.buffer_text** %text1518, align 8
  %beg1519 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %808, i32 0, i32 0
  %809 = load i8*, i8** %beg1519, align 8
  %add.ptr1520 = getelementptr inbounds i8, i8* %809, i64 %add1517
  %add.ptr1521 = getelementptr inbounds i8, i8* %add.ptr1520, i64 -1
  %810 = load i8, i8* %add.ptr1521, align 1
  %conv1522 = zext i8 %810 to i32
  br label %cond.end.1541

cond.false.1523:                                  ; preds = %cond.end.1495, %cond.end.1475
  %811 = load i64, i64* %from_byte, align 8
  %812 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1524 = getelementptr inbounds %struct.buffer, %struct.buffer* %812, i32 0, i32 73
  %813 = load %struct.buffer_text*, %struct.buffer_text** %text1524, align 8
  %gpt_byte1525 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %813, i32 0, i32 3
  %814 = load i64, i64* %gpt_byte1525, align 8
  %cmp1526 = icmp sge i64 %811, %814
  br i1 %cmp1526, label %cond.true.1528, label %cond.false.1531

cond.true.1528:                                   ; preds = %cond.false.1523
  %815 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1529 = getelementptr inbounds %struct.buffer, %struct.buffer* %815, i32 0, i32 73
  %816 = load %struct.buffer_text*, %struct.buffer_text** %text1529, align 8
  %gap_size1530 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %816, i32 0, i32 5
  %817 = load i64, i64* %gap_size1530, align 8
  br label %cond.end.1532

cond.false.1531:                                  ; preds = %cond.false.1523
  br label %cond.end.1532

cond.end.1532:                                    ; preds = %cond.false.1531, %cond.true.1528
  %cond1533 = phi i64 [ %817, %cond.true.1528 ], [ 0, %cond.false.1531 ]
  %818 = load i64, i64* %from_byte, align 8
  %add1534 = add nsw i64 %cond1533, %818
  %819 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1535 = getelementptr inbounds %struct.buffer, %struct.buffer* %819, i32 0, i32 73
  %820 = load %struct.buffer_text*, %struct.buffer_text** %text1535, align 8
  %beg1536 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %820, i32 0, i32 0
  %821 = load i8*, i8** %beg1536, align 8
  %add.ptr1537 = getelementptr inbounds i8, i8* %821, i64 %add1534
  %add.ptr1538 = getelementptr inbounds i8, i8* %add.ptr1537, i64 -1
  %822 = load i8, i8* %add.ptr1538, align 1
  %conv1539 = zext i8 %822 to i32
  %add1540 = add nsw i32 %conv1539, 4194048
  br label %cond.end.1541

cond.end.1541:                                    ; preds = %cond.end.1532, %cond.end.1515
  %cond1542 = phi i32 [ %conv1522, %cond.end.1515 ], [ %add1540, %cond.end.1532 ]
  br label %cond.end.1543

cond.end.1543:                                    ; preds = %cond.end.1541, %cond.true.1463
  %cond1544 = phi i32 [ %call1464, %cond.true.1463 ], [ %cond1542, %cond.end.1541 ]
  store i32 %cond1544, i32* %c2, align 4
  %823 = load i32, i32* %c2, align 4
  %call1545 = call i32 @syntax_property_with_flags(i32 %823, i1 zeroext true)
  store i32 %call1545, i32* %other_syntax1415, align 4
  %824 = load i32, i32* %other_syntax1415, align 4
  %825 = load i32, i32* %syntax1260, align 4
  %call1546 = call i32 @SYNTAX_FLAGS_COMMENT_STYLE(i32 %824, i32 %825)
  store i32 %call1546, i32* %comstyle, align 4
  %826 = load i32, i32* %other_syntax1415, align 4
  %call1547 = call zeroext i1 @SYNTAX_FLAGS_COMMENT_NESTED(i32 %826)
  %conv1548 = zext i1 %call1547 to i32
  %827 = load i8, i8* %comnested, align 1
  %tobool1549 = trunc i8 %827 to i1
  %conv1550 = zext i1 %tobool1549 to i32
  %or1551 = or i32 %conv1550, %conv1548
  %tobool1552 = icmp ne i32 %or1551, 0
  %frombool1553 = zext i1 %tobool1552 to i8
  store i8 %frombool1553, i8* %comnested, align 1
  br label %if.end.1554

if.end.1554:                                      ; preds = %cond.end.1543, %land.lhs.true.1411, %land.lhs.true.1408, %land.lhs.true.1405, %if.end.1402
  %828 = load i32, i32* %code, align 4
  %cmp1555 = icmp ne i32 %828, 12
  br i1 %cmp1555, label %land.lhs.true.1557, label %if.else.1604

land.lhs.true.1557:                               ; preds = %if.end.1554
  %829 = load i64, i64* %from.addr, align 8
  %830 = load i64, i64* %from_byte, align 8
  %call1558 = call zeroext i1 @char_quoted(i64 %829, i64 %830)
  br i1 %call1558, label %if.then.1560, label %if.else.1604

if.then.1560:                                     ; preds = %land.lhs.true.1557
  br label %do.body.1561

do.body.1561:                                     ; preds = %if.then.1560
  %831 = load i64, i64* %from.addr, align 8
  %dec1562 = add nsw i64 %831, -1
  store i64 %dec1562, i64* %from.addr, align 8
  %832 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_1563 = getelementptr inbounds %struct.buffer, %struct.buffer* %832, i32 0, i32 39
  %833 = load i64, i64* %enable_multibyte_characters_1563, align 8
  %call1564 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1565 = icmp eq i64 %833, %call1564
  br i1 %cmp1565, label %if.then.1567, label %if.else.1569

if.then.1567:                                     ; preds = %do.body.1561
  %834 = load i64, i64* %from_byte, align 8
  %dec1568 = add nsw i64 %834, -1
  store i64 %dec1568, i64* %from_byte, align 8
  br label %if.end.1602

if.else.1569:                                     ; preds = %do.body.1561
  br label %do.body.1570

do.body.1570:                                     ; preds = %if.else.1569
  %835 = load i64, i64* %from_byte, align 8
  %dec1572 = add nsw i64 %835, -1
  store i64 %dec1572, i64* %from_byte, align 8
  %836 = load i64, i64* %from_byte, align 8
  %837 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1573 = getelementptr inbounds %struct.buffer, %struct.buffer* %837, i32 0, i32 73
  %838 = load %struct.buffer_text*, %struct.buffer_text** %text1573, align 8
  %gpt_byte1574 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %838, i32 0, i32 3
  %839 = load i64, i64* %gpt_byte1574, align 8
  %cmp1575 = icmp slt i64 %836, %839
  br i1 %cmp1575, label %if.then.1577, label %if.else.1582

if.then.1577:                                     ; preds = %do.body.1570
  %840 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1578 = getelementptr inbounds %struct.buffer, %struct.buffer* %840, i32 0, i32 73
  %841 = load %struct.buffer_text*, %struct.buffer_text** %text1578, align 8
  %beg1579 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %841, i32 0, i32 0
  %842 = load i8*, i8** %beg1579, align 8
  %843 = load i64, i64* %from_byte, align 8
  %add.ptr1580 = getelementptr inbounds i8, i8* %842, i64 %843
  %add.ptr1581 = getelementptr inbounds i8, i8* %add.ptr1580, i64 -1
  store i8* %add.ptr1581, i8** %chp1571, align 8
  br label %if.end.1590

if.else.1582:                                     ; preds = %do.body.1570
  %844 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1583 = getelementptr inbounds %struct.buffer, %struct.buffer* %844, i32 0, i32 73
  %845 = load %struct.buffer_text*, %struct.buffer_text** %text1583, align 8
  %beg1584 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %845, i32 0, i32 0
  %846 = load i8*, i8** %beg1584, align 8
  %847 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1585 = getelementptr inbounds %struct.buffer, %struct.buffer* %847, i32 0, i32 73
  %848 = load %struct.buffer_text*, %struct.buffer_text** %text1585, align 8
  %gap_size1586 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %848, i32 0, i32 5
  %849 = load i64, i64* %gap_size1586, align 8
  %add.ptr1587 = getelementptr inbounds i8, i8* %846, i64 %849
  %850 = load i64, i64* %from_byte, align 8
  %add.ptr1588 = getelementptr inbounds i8, i8* %add.ptr1587, i64 %850
  %add.ptr1589 = getelementptr inbounds i8, i8* %add.ptr1588, i64 -1
  store i8* %add.ptr1589, i8** %chp1571, align 8
  br label %if.end.1590

if.end.1590:                                      ; preds = %if.else.1582, %if.then.1577
  br label %while.cond.1591

while.cond.1591:                                  ; preds = %while.body.1597, %if.end.1590
  %851 = load i8*, i8** %chp1571, align 8
  %852 = load i8, i8* %851, align 1
  %conv1592 = zext i8 %852 to i32
  %and1593 = and i32 %conv1592, 192
  %cmp1594 = icmp ne i32 %and1593, 128
  %lnot1596 = xor i1 %cmp1594, true
  br i1 %lnot1596, label %while.body.1597, label %while.end.1600

while.body.1597:                                  ; preds = %while.cond.1591
  %853 = load i8*, i8** %chp1571, align 8
  %incdec.ptr1598 = getelementptr inbounds i8, i8* %853, i32 -1
  store i8* %incdec.ptr1598, i8** %chp1571, align 8
  %854 = load i64, i64* %from_byte, align 8
  %dec1599 = add nsw i64 %854, -1
  store i64 %dec1599, i64* %from_byte, align 8
  br label %while.cond.1591

while.end.1600:                                   ; preds = %while.cond.1591
  br label %do.end.1601

do.end.1601:                                      ; preds = %while.end.1600
  br label %if.end.1602

if.end.1602:                                      ; preds = %do.end.1601, %if.then.1567
  br label %do.end.1603

do.end.1603:                                      ; preds = %if.end.1602
  store i32 2, i32* %code, align 4
  br label %if.end.1608

if.else.1604:                                     ; preds = %land.lhs.true.1557, %if.end.1554
  %855 = load i32, i32* %syntax1260, align 4
  %call1605 = call zeroext i1 @SYNTAX_FLAGS_PREFIX(i32 %855)
  br i1 %call1605, label %if.then.1606, label %if.end.1607

if.then.1606:                                     ; preds = %if.else.1604
  br label %while.cond.1256

if.end.1607:                                      ; preds = %if.else.1604
  br label %if.end.1608

if.end.1608:                                      ; preds = %if.end.1607, %do.end.1603
  %856 = load i32, i32* %code, align 4
  switch i32 %856, label %sw.default.2516 [
    i32 2, label %sw.bb.1609
    i32 3, label %sw.bb.1609
    i32 9, label %sw.bb.1609
    i32 10, label %sw.bb.1609
    i32 8, label %sw.bb.1940
    i32 5, label %sw.bb.2090
    i32 4, label %sw.bb.2095
    i32 12, label %sw.bb.2110
    i32 14, label %sw.bb.2120
    i32 15, label %sw.bb.2120
    i32 7, label %sw.bb.2275
  ]

sw.bb.1609:                                       ; preds = %if.end.1608, %if.end.1608, %if.end.1608, %if.end.1608
  %857 = load i64, i64* %depth.addr, align 8
  %tobool1610 = icmp ne i64 %857, 0
  br i1 %tobool1610, label %if.then.1613, label %lor.lhs.false.1611

lor.lhs.false.1611:                               ; preds = %sw.bb.1609
  %858 = load i8, i8* %sexpflag.addr, align 1
  %tobool1612 = trunc i8 %858 to i1
  br i1 %tobool1612, label %if.end.1614, label %if.then.1613

if.then.1613:                                     ; preds = %lor.lhs.false.1611, %sw.bb.1609
  br label %sw.epilog.2517

if.end.1614:                                      ; preds = %lor.lhs.false.1611
  br label %while.cond.1615

while.cond.1615:                                  ; preds = %do.end.1938, %if.end.1614
  %859 = load i64, i64* %from.addr, align 8
  %860 = load i64, i64* %stop, align 8
  %cmp1616 = icmp sgt i64 %859, %860
  br i1 %cmp1616, label %while.body.1618, label %while.end.1939

while.body.1618:                                  ; preds = %while.cond.1615
  %861 = load i64, i64* %from_byte, align 8
  store i64 %861, i64* %temp_pos, align 8
  %862 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_1619 = getelementptr inbounds %struct.buffer, %struct.buffer* %862, i32 0, i32 39
  %863 = load i64, i64* %enable_multibyte_characters_1619, align 8
  %call1620 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1621 = icmp eq i64 %863, %call1620
  br i1 %cmp1621, label %if.else.1656, label %if.then.1623

if.then.1623:                                     ; preds = %while.body.1618
  br label %do.body.1624

do.body.1624:                                     ; preds = %if.then.1623
  %864 = load i64, i64* %temp_pos, align 8
  %dec1626 = add nsw i64 %864, -1
  store i64 %dec1626, i64* %temp_pos, align 8
  %865 = load i64, i64* %temp_pos, align 8
  %866 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1627 = getelementptr inbounds %struct.buffer, %struct.buffer* %866, i32 0, i32 73
  %867 = load %struct.buffer_text*, %struct.buffer_text** %text1627, align 8
  %gpt_byte1628 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %867, i32 0, i32 3
  %868 = load i64, i64* %gpt_byte1628, align 8
  %cmp1629 = icmp slt i64 %865, %868
  br i1 %cmp1629, label %if.then.1631, label %if.else.1636

if.then.1631:                                     ; preds = %do.body.1624
  %869 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1632 = getelementptr inbounds %struct.buffer, %struct.buffer* %869, i32 0, i32 73
  %870 = load %struct.buffer_text*, %struct.buffer_text** %text1632, align 8
  %beg1633 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %870, i32 0, i32 0
  %871 = load i8*, i8** %beg1633, align 8
  %872 = load i64, i64* %temp_pos, align 8
  %add.ptr1634 = getelementptr inbounds i8, i8* %871, i64 %872
  %add.ptr1635 = getelementptr inbounds i8, i8* %add.ptr1634, i64 -1
  store i8* %add.ptr1635, i8** %chp1625, align 8
  br label %if.end.1644

if.else.1636:                                     ; preds = %do.body.1624
  %873 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1637 = getelementptr inbounds %struct.buffer, %struct.buffer* %873, i32 0, i32 73
  %874 = load %struct.buffer_text*, %struct.buffer_text** %text1637, align 8
  %beg1638 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %874, i32 0, i32 0
  %875 = load i8*, i8** %beg1638, align 8
  %876 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1639 = getelementptr inbounds %struct.buffer, %struct.buffer* %876, i32 0, i32 73
  %877 = load %struct.buffer_text*, %struct.buffer_text** %text1639, align 8
  %gap_size1640 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %877, i32 0, i32 5
  %878 = load i64, i64* %gap_size1640, align 8
  %add.ptr1641 = getelementptr inbounds i8, i8* %875, i64 %878
  %879 = load i64, i64* %temp_pos, align 8
  %add.ptr1642 = getelementptr inbounds i8, i8* %add.ptr1641, i64 %879
  %add.ptr1643 = getelementptr inbounds i8, i8* %add.ptr1642, i64 -1
  store i8* %add.ptr1643, i8** %chp1625, align 8
  br label %if.end.1644

if.end.1644:                                      ; preds = %if.else.1636, %if.then.1631
  br label %while.cond.1645

while.cond.1645:                                  ; preds = %while.body.1651, %if.end.1644
  %880 = load i8*, i8** %chp1625, align 8
  %881 = load i8, i8* %880, align 1
  %conv1646 = zext i8 %881 to i32
  %and1647 = and i32 %conv1646, 192
  %cmp1648 = icmp ne i32 %and1647, 128
  %lnot1650 = xor i1 %cmp1648, true
  br i1 %lnot1650, label %while.body.1651, label %while.end.1654

while.body.1651:                                  ; preds = %while.cond.1645
  %882 = load i8*, i8** %chp1625, align 8
  %incdec.ptr1652 = getelementptr inbounds i8, i8* %882, i32 -1
  store i8* %incdec.ptr1652, i8** %chp1625, align 8
  %883 = load i64, i64* %temp_pos, align 8
  %dec1653 = add nsw i64 %883, -1
  store i64 %dec1653, i64* %temp_pos, align 8
  br label %while.cond.1645

while.end.1654:                                   ; preds = %while.cond.1645
  br label %do.end.1655

do.end.1655:                                      ; preds = %while.end.1654
  br label %if.end.1658

if.else.1656:                                     ; preds = %while.body.1618
  %884 = load i64, i64* %temp_pos, align 8
  %dec1657 = add nsw i64 %884, -1
  store i64 %dec1657, i64* %temp_pos, align 8
  br label %if.end.1658

if.end.1658:                                      ; preds = %if.else.1656, %do.end.1655
  %885 = load i64, i64* %from.addr, align 8
  %sub = sub nsw i64 %885, 1
  call void @UPDATE_SYNTAX_TABLE_BACKWARD(i64 %sub)
  %886 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_1659 = getelementptr inbounds %struct.buffer, %struct.buffer* %886, i32 0, i32 39
  %887 = load i64, i64* %enable_multibyte_characters_1659, align 8
  %call1660 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1661 = icmp eq i64 %887, %call1660
  br i1 %cmp1661, label %cond.false.1665, label %cond.true.1663

cond.true.1663:                                   ; preds = %if.end.1658
  %888 = load i64, i64* %temp_pos, align 8
  %call1664 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %888)
  br label %cond.end.1743

cond.false.1665:                                  ; preds = %if.end.1658
  br i1 true, label %cond.true.1666, label %cond.false.1686

cond.true.1666:                                   ; preds = %cond.false.1665
  %889 = load i64, i64* %temp_pos, align 8
  %890 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1667 = getelementptr inbounds %struct.buffer, %struct.buffer* %890, i32 0, i32 73
  %891 = load %struct.buffer_text*, %struct.buffer_text** %text1667, align 8
  %gpt_byte1668 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %891, i32 0, i32 3
  %892 = load i64, i64* %gpt_byte1668, align 8
  %cmp1669 = icmp sge i64 %889, %892
  br i1 %cmp1669, label %cond.true.1671, label %cond.false.1674

cond.true.1671:                                   ; preds = %cond.true.1666
  %893 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1672 = getelementptr inbounds %struct.buffer, %struct.buffer* %893, i32 0, i32 73
  %894 = load %struct.buffer_text*, %struct.buffer_text** %text1672, align 8
  %gap_size1673 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %894, i32 0, i32 5
  %895 = load i64, i64* %gap_size1673, align 8
  br label %cond.end.1675

cond.false.1674:                                  ; preds = %cond.true.1666
  br label %cond.end.1675

cond.end.1675:                                    ; preds = %cond.false.1674, %cond.true.1671
  %cond1676 = phi i64 [ %895, %cond.true.1671 ], [ 0, %cond.false.1674 ]
  %896 = load i64, i64* %temp_pos, align 8
  %add1677 = add nsw i64 %cond1676, %896
  %897 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1678 = getelementptr inbounds %struct.buffer, %struct.buffer* %897, i32 0, i32 73
  %898 = load %struct.buffer_text*, %struct.buffer_text** %text1678, align 8
  %beg1679 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %898, i32 0, i32 0
  %899 = load i8*, i8** %beg1679, align 8
  %add.ptr1680 = getelementptr inbounds i8, i8* %899, i64 %add1677
  %add.ptr1681 = getelementptr inbounds i8, i8* %add.ptr1680, i64 -1
  %900 = load i8, i8* %add.ptr1681, align 1
  %conv1682 = zext i8 %900 to i32
  %add1683 = add i32 %conv1682, 0
  %cmp1684 = icmp ult i32 %add1683, 128
  br i1 %cmp1684, label %cond.true.1706, label %cond.false.1723

cond.false.1686:                                  ; preds = %cond.false.1665
  %901 = load i64, i64* %temp_pos, align 8
  %902 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1687 = getelementptr inbounds %struct.buffer, %struct.buffer* %902, i32 0, i32 73
  %903 = load %struct.buffer_text*, %struct.buffer_text** %text1687, align 8
  %gpt_byte1688 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %903, i32 0, i32 3
  %904 = load i64, i64* %gpt_byte1688, align 8
  %cmp1689 = icmp sge i64 %901, %904
  br i1 %cmp1689, label %cond.true.1691, label %cond.false.1694

cond.true.1691:                                   ; preds = %cond.false.1686
  %905 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1692 = getelementptr inbounds %struct.buffer, %struct.buffer* %905, i32 0, i32 73
  %906 = load %struct.buffer_text*, %struct.buffer_text** %text1692, align 8
  %gap_size1693 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %906, i32 0, i32 5
  %907 = load i64, i64* %gap_size1693, align 8
  br label %cond.end.1695

cond.false.1694:                                  ; preds = %cond.false.1686
  br label %cond.end.1695

cond.end.1695:                                    ; preds = %cond.false.1694, %cond.true.1691
  %cond1696 = phi i64 [ %907, %cond.true.1691 ], [ 0, %cond.false.1694 ]
  %908 = load i64, i64* %temp_pos, align 8
  %add1697 = add nsw i64 %cond1696, %908
  %909 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1698 = getelementptr inbounds %struct.buffer, %struct.buffer* %909, i32 0, i32 73
  %910 = load %struct.buffer_text*, %struct.buffer_text** %text1698, align 8
  %beg1699 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %910, i32 0, i32 0
  %911 = load i8*, i8** %beg1699, align 8
  %add.ptr1700 = getelementptr inbounds i8, i8* %911, i64 %add1697
  %add.ptr1701 = getelementptr inbounds i8, i8* %add.ptr1700, i64 -1
  %912 = load i8, i8* %add.ptr1701, align 1
  %conv1702 = zext i8 %912 to i64
  %add1703 = add i64 %conv1702, 0
  %cmp1704 = icmp ult i64 %add1703, 128
  br i1 %cmp1704, label %cond.true.1706, label %cond.false.1723

cond.true.1706:                                   ; preds = %cond.end.1695, %cond.end.1675
  %913 = load i64, i64* %temp_pos, align 8
  %914 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1707 = getelementptr inbounds %struct.buffer, %struct.buffer* %914, i32 0, i32 73
  %915 = load %struct.buffer_text*, %struct.buffer_text** %text1707, align 8
  %gpt_byte1708 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %915, i32 0, i32 3
  %916 = load i64, i64* %gpt_byte1708, align 8
  %cmp1709 = icmp sge i64 %913, %916
  br i1 %cmp1709, label %cond.true.1711, label %cond.false.1714

cond.true.1711:                                   ; preds = %cond.true.1706
  %917 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1712 = getelementptr inbounds %struct.buffer, %struct.buffer* %917, i32 0, i32 73
  %918 = load %struct.buffer_text*, %struct.buffer_text** %text1712, align 8
  %gap_size1713 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %918, i32 0, i32 5
  %919 = load i64, i64* %gap_size1713, align 8
  br label %cond.end.1715

cond.false.1714:                                  ; preds = %cond.true.1706
  br label %cond.end.1715

cond.end.1715:                                    ; preds = %cond.false.1714, %cond.true.1711
  %cond1716 = phi i64 [ %919, %cond.true.1711 ], [ 0, %cond.false.1714 ]
  %920 = load i64, i64* %temp_pos, align 8
  %add1717 = add nsw i64 %cond1716, %920
  %921 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1718 = getelementptr inbounds %struct.buffer, %struct.buffer* %921, i32 0, i32 73
  %922 = load %struct.buffer_text*, %struct.buffer_text** %text1718, align 8
  %beg1719 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %922, i32 0, i32 0
  %923 = load i8*, i8** %beg1719, align 8
  %add.ptr1720 = getelementptr inbounds i8, i8* %923, i64 %add1717
  %add.ptr1721 = getelementptr inbounds i8, i8* %add.ptr1720, i64 -1
  %924 = load i8, i8* %add.ptr1721, align 1
  %conv1722 = zext i8 %924 to i32
  br label %cond.end.1741

cond.false.1723:                                  ; preds = %cond.end.1695, %cond.end.1675
  %925 = load i64, i64* %temp_pos, align 8
  %926 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1724 = getelementptr inbounds %struct.buffer, %struct.buffer* %926, i32 0, i32 73
  %927 = load %struct.buffer_text*, %struct.buffer_text** %text1724, align 8
  %gpt_byte1725 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %927, i32 0, i32 3
  %928 = load i64, i64* %gpt_byte1725, align 8
  %cmp1726 = icmp sge i64 %925, %928
  br i1 %cmp1726, label %cond.true.1728, label %cond.false.1731

cond.true.1728:                                   ; preds = %cond.false.1723
  %929 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1729 = getelementptr inbounds %struct.buffer, %struct.buffer* %929, i32 0, i32 73
  %930 = load %struct.buffer_text*, %struct.buffer_text** %text1729, align 8
  %gap_size1730 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %930, i32 0, i32 5
  %931 = load i64, i64* %gap_size1730, align 8
  br label %cond.end.1732

cond.false.1731:                                  ; preds = %cond.false.1723
  br label %cond.end.1732

cond.end.1732:                                    ; preds = %cond.false.1731, %cond.true.1728
  %cond1733 = phi i64 [ %931, %cond.true.1728 ], [ 0, %cond.false.1731 ]
  %932 = load i64, i64* %temp_pos, align 8
  %add1734 = add nsw i64 %cond1733, %932
  %933 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1735 = getelementptr inbounds %struct.buffer, %struct.buffer* %933, i32 0, i32 73
  %934 = load %struct.buffer_text*, %struct.buffer_text** %text1735, align 8
  %beg1736 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %934, i32 0, i32 0
  %935 = load i8*, i8** %beg1736, align 8
  %add.ptr1737 = getelementptr inbounds i8, i8* %935, i64 %add1734
  %add.ptr1738 = getelementptr inbounds i8, i8* %add.ptr1737, i64 -1
  %936 = load i8, i8* %add.ptr1738, align 1
  %conv1739 = zext i8 %936 to i32
  %add1740 = add nsw i32 %conv1739, 4194048
  br label %cond.end.1741

cond.end.1741:                                    ; preds = %cond.end.1732, %cond.end.1715
  %cond1742 = phi i32 [ %conv1722, %cond.end.1715 ], [ %add1740, %cond.end.1732 ]
  br label %cond.end.1743

cond.end.1743:                                    ; preds = %cond.end.1741, %cond.true.1663
  %cond1744 = phi i32 [ %call1664, %cond.true.1663 ], [ %cond1742, %cond.end.1741 ]
  store i32 %cond1744, i32* %c1, align 4
  %937 = load i32, i32* %c1, align 4
  %938 = load i8, i8* %multibyte_symbol_p, align 1
  %tobool1745 = trunc i8 %938 to i1
  %call1746 = call i32 @syntax_multibyte(i32 %937, i1 zeroext %tobool1745)
  %cmp1747 = icmp eq i32 %call1746, 12
  br i1 %cmp1747, label %if.then.1749, label %if.end.1750

if.then.1749:                                     ; preds = %cond.end.1743
  br label %done2

if.end.1750:                                      ; preds = %cond.end.1743
  %939 = load i64, i64* %from.addr, align 8
  %sub1751 = sub nsw i64 %939, 1
  %940 = load i64, i64* %temp_pos, align 8
  %call1752 = call zeroext i1 @char_quoted(i64 %sub1751, i64 %940)
  %frombool1753 = zext i1 %call1752 to i8
  store i8 %frombool1753, i8* %quoted, align 1
  %941 = load i8, i8* %quoted, align 1
  %tobool1754 = trunc i8 %941 to i1
  br i1 %tobool1754, label %if.then.1755, label %if.end.1801

if.then.1755:                                     ; preds = %if.end.1750
  br label %do.body.1756

do.body.1756:                                     ; preds = %if.then.1755
  %942 = load i64, i64* %from.addr, align 8
  %dec1757 = add nsw i64 %942, -1
  store i64 %dec1757, i64* %from.addr, align 8
  %943 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_1758 = getelementptr inbounds %struct.buffer, %struct.buffer* %943, i32 0, i32 39
  %944 = load i64, i64* %enable_multibyte_characters_1758, align 8
  %call1759 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1760 = icmp eq i64 %944, %call1759
  br i1 %cmp1760, label %if.then.1762, label %if.else.1764

if.then.1762:                                     ; preds = %do.body.1756
  %945 = load i64, i64* %from_byte, align 8
  %dec1763 = add nsw i64 %945, -1
  store i64 %dec1763, i64* %from_byte, align 8
  br label %if.end.1797

if.else.1764:                                     ; preds = %do.body.1756
  br label %do.body.1765

do.body.1765:                                     ; preds = %if.else.1764
  %946 = load i64, i64* %from_byte, align 8
  %dec1767 = add nsw i64 %946, -1
  store i64 %dec1767, i64* %from_byte, align 8
  %947 = load i64, i64* %from_byte, align 8
  %948 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1768 = getelementptr inbounds %struct.buffer, %struct.buffer* %948, i32 0, i32 73
  %949 = load %struct.buffer_text*, %struct.buffer_text** %text1768, align 8
  %gpt_byte1769 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %949, i32 0, i32 3
  %950 = load i64, i64* %gpt_byte1769, align 8
  %cmp1770 = icmp slt i64 %947, %950
  br i1 %cmp1770, label %if.then.1772, label %if.else.1777

if.then.1772:                                     ; preds = %do.body.1765
  %951 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1773 = getelementptr inbounds %struct.buffer, %struct.buffer* %951, i32 0, i32 73
  %952 = load %struct.buffer_text*, %struct.buffer_text** %text1773, align 8
  %beg1774 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %952, i32 0, i32 0
  %953 = load i8*, i8** %beg1774, align 8
  %954 = load i64, i64* %from_byte, align 8
  %add.ptr1775 = getelementptr inbounds i8, i8* %953, i64 %954
  %add.ptr1776 = getelementptr inbounds i8, i8* %add.ptr1775, i64 -1
  store i8* %add.ptr1776, i8** %chp1766, align 8
  br label %if.end.1785

if.else.1777:                                     ; preds = %do.body.1765
  %955 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1778 = getelementptr inbounds %struct.buffer, %struct.buffer* %955, i32 0, i32 73
  %956 = load %struct.buffer_text*, %struct.buffer_text** %text1778, align 8
  %beg1779 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %956, i32 0, i32 0
  %957 = load i8*, i8** %beg1779, align 8
  %958 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1780 = getelementptr inbounds %struct.buffer, %struct.buffer* %958, i32 0, i32 73
  %959 = load %struct.buffer_text*, %struct.buffer_text** %text1780, align 8
  %gap_size1781 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %959, i32 0, i32 5
  %960 = load i64, i64* %gap_size1781, align 8
  %add.ptr1782 = getelementptr inbounds i8, i8* %957, i64 %960
  %961 = load i64, i64* %from_byte, align 8
  %add.ptr1783 = getelementptr inbounds i8, i8* %add.ptr1782, i64 %961
  %add.ptr1784 = getelementptr inbounds i8, i8* %add.ptr1783, i64 -1
  store i8* %add.ptr1784, i8** %chp1766, align 8
  br label %if.end.1785

if.end.1785:                                      ; preds = %if.else.1777, %if.then.1772
  br label %while.cond.1786

while.cond.1786:                                  ; preds = %while.body.1792, %if.end.1785
  %962 = load i8*, i8** %chp1766, align 8
  %963 = load i8, i8* %962, align 1
  %conv1787 = zext i8 %963 to i32
  %and1788 = and i32 %conv1787, 192
  %cmp1789 = icmp ne i32 %and1788, 128
  %lnot1791 = xor i1 %cmp1789, true
  br i1 %lnot1791, label %while.body.1792, label %while.end.1795

while.body.1792:                                  ; preds = %while.cond.1786
  %964 = load i8*, i8** %chp1766, align 8
  %incdec.ptr1793 = getelementptr inbounds i8, i8* %964, i32 -1
  store i8* %incdec.ptr1793, i8** %chp1766, align 8
  %965 = load i64, i64* %from_byte, align 8
  %dec1794 = add nsw i64 %965, -1
  store i64 %dec1794, i64* %from_byte, align 8
  br label %while.cond.1786

while.end.1795:                                   ; preds = %while.cond.1786
  br label %do.end.1796

do.end.1796:                                      ; preds = %while.end.1795
  br label %if.end.1797

if.end.1797:                                      ; preds = %do.end.1796, %if.then.1762
  br label %do.end.1798

do.end.1798:                                      ; preds = %if.end.1797
  %966 = load i64, i64* %temp_pos, align 8
  %call1799 = call i64 @dec_bytepos(i64 %966)
  store i64 %call1799, i64* %temp_pos, align 8
  %967 = load i64, i64* %from.addr, align 8
  %sub1800 = sub nsw i64 %967, 1
  call void @UPDATE_SYNTAX_TABLE_BACKWARD(i64 %sub1800)
  br label %if.end.1801

if.end.1801:                                      ; preds = %do.end.1798, %if.end.1750
  %968 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_1802 = getelementptr inbounds %struct.buffer, %struct.buffer* %968, i32 0, i32 39
  %969 = load i64, i64* %enable_multibyte_characters_1802, align 8
  %call1803 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1804 = icmp eq i64 %969, %call1803
  br i1 %cmp1804, label %cond.false.1808, label %cond.true.1806

cond.true.1806:                                   ; preds = %if.end.1801
  %970 = load i64, i64* %temp_pos, align 8
  %call1807 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %970)
  br label %cond.end.1886

cond.false.1808:                                  ; preds = %if.end.1801
  br i1 true, label %cond.true.1809, label %cond.false.1829

cond.true.1809:                                   ; preds = %cond.false.1808
  %971 = load i64, i64* %temp_pos, align 8
  %972 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1810 = getelementptr inbounds %struct.buffer, %struct.buffer* %972, i32 0, i32 73
  %973 = load %struct.buffer_text*, %struct.buffer_text** %text1810, align 8
  %gpt_byte1811 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %973, i32 0, i32 3
  %974 = load i64, i64* %gpt_byte1811, align 8
  %cmp1812 = icmp sge i64 %971, %974
  br i1 %cmp1812, label %cond.true.1814, label %cond.false.1817

cond.true.1814:                                   ; preds = %cond.true.1809
  %975 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1815 = getelementptr inbounds %struct.buffer, %struct.buffer* %975, i32 0, i32 73
  %976 = load %struct.buffer_text*, %struct.buffer_text** %text1815, align 8
  %gap_size1816 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %976, i32 0, i32 5
  %977 = load i64, i64* %gap_size1816, align 8
  br label %cond.end.1818

cond.false.1817:                                  ; preds = %cond.true.1809
  br label %cond.end.1818

cond.end.1818:                                    ; preds = %cond.false.1817, %cond.true.1814
  %cond1819 = phi i64 [ %977, %cond.true.1814 ], [ 0, %cond.false.1817 ]
  %978 = load i64, i64* %temp_pos, align 8
  %add1820 = add nsw i64 %cond1819, %978
  %979 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1821 = getelementptr inbounds %struct.buffer, %struct.buffer* %979, i32 0, i32 73
  %980 = load %struct.buffer_text*, %struct.buffer_text** %text1821, align 8
  %beg1822 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %980, i32 0, i32 0
  %981 = load i8*, i8** %beg1822, align 8
  %add.ptr1823 = getelementptr inbounds i8, i8* %981, i64 %add1820
  %add.ptr1824 = getelementptr inbounds i8, i8* %add.ptr1823, i64 -1
  %982 = load i8, i8* %add.ptr1824, align 1
  %conv1825 = zext i8 %982 to i32
  %add1826 = add i32 %conv1825, 0
  %cmp1827 = icmp ult i32 %add1826, 128
  br i1 %cmp1827, label %cond.true.1849, label %cond.false.1866

cond.false.1829:                                  ; preds = %cond.false.1808
  %983 = load i64, i64* %temp_pos, align 8
  %984 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1830 = getelementptr inbounds %struct.buffer, %struct.buffer* %984, i32 0, i32 73
  %985 = load %struct.buffer_text*, %struct.buffer_text** %text1830, align 8
  %gpt_byte1831 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %985, i32 0, i32 3
  %986 = load i64, i64* %gpt_byte1831, align 8
  %cmp1832 = icmp sge i64 %983, %986
  br i1 %cmp1832, label %cond.true.1834, label %cond.false.1837

cond.true.1834:                                   ; preds = %cond.false.1829
  %987 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1835 = getelementptr inbounds %struct.buffer, %struct.buffer* %987, i32 0, i32 73
  %988 = load %struct.buffer_text*, %struct.buffer_text** %text1835, align 8
  %gap_size1836 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %988, i32 0, i32 5
  %989 = load i64, i64* %gap_size1836, align 8
  br label %cond.end.1838

cond.false.1837:                                  ; preds = %cond.false.1829
  br label %cond.end.1838

cond.end.1838:                                    ; preds = %cond.false.1837, %cond.true.1834
  %cond1839 = phi i64 [ %989, %cond.true.1834 ], [ 0, %cond.false.1837 ]
  %990 = load i64, i64* %temp_pos, align 8
  %add1840 = add nsw i64 %cond1839, %990
  %991 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1841 = getelementptr inbounds %struct.buffer, %struct.buffer* %991, i32 0, i32 73
  %992 = load %struct.buffer_text*, %struct.buffer_text** %text1841, align 8
  %beg1842 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %992, i32 0, i32 0
  %993 = load i8*, i8** %beg1842, align 8
  %add.ptr1843 = getelementptr inbounds i8, i8* %993, i64 %add1840
  %add.ptr1844 = getelementptr inbounds i8, i8* %add.ptr1843, i64 -1
  %994 = load i8, i8* %add.ptr1844, align 1
  %conv1845 = zext i8 %994 to i64
  %add1846 = add i64 %conv1845, 0
  %cmp1847 = icmp ult i64 %add1846, 128
  br i1 %cmp1847, label %cond.true.1849, label %cond.false.1866

cond.true.1849:                                   ; preds = %cond.end.1838, %cond.end.1818
  %995 = load i64, i64* %temp_pos, align 8
  %996 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1850 = getelementptr inbounds %struct.buffer, %struct.buffer* %996, i32 0, i32 73
  %997 = load %struct.buffer_text*, %struct.buffer_text** %text1850, align 8
  %gpt_byte1851 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %997, i32 0, i32 3
  %998 = load i64, i64* %gpt_byte1851, align 8
  %cmp1852 = icmp sge i64 %995, %998
  br i1 %cmp1852, label %cond.true.1854, label %cond.false.1857

cond.true.1854:                                   ; preds = %cond.true.1849
  %999 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1855 = getelementptr inbounds %struct.buffer, %struct.buffer* %999, i32 0, i32 73
  %1000 = load %struct.buffer_text*, %struct.buffer_text** %text1855, align 8
  %gap_size1856 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1000, i32 0, i32 5
  %1001 = load i64, i64* %gap_size1856, align 8
  br label %cond.end.1858

cond.false.1857:                                  ; preds = %cond.true.1849
  br label %cond.end.1858

cond.end.1858:                                    ; preds = %cond.false.1857, %cond.true.1854
  %cond1859 = phi i64 [ %1001, %cond.true.1854 ], [ 0, %cond.false.1857 ]
  %1002 = load i64, i64* %temp_pos, align 8
  %add1860 = add nsw i64 %cond1859, %1002
  %1003 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1861 = getelementptr inbounds %struct.buffer, %struct.buffer* %1003, i32 0, i32 73
  %1004 = load %struct.buffer_text*, %struct.buffer_text** %text1861, align 8
  %beg1862 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1004, i32 0, i32 0
  %1005 = load i8*, i8** %beg1862, align 8
  %add.ptr1863 = getelementptr inbounds i8, i8* %1005, i64 %add1860
  %add.ptr1864 = getelementptr inbounds i8, i8* %add.ptr1863, i64 -1
  %1006 = load i8, i8* %add.ptr1864, align 1
  %conv1865 = zext i8 %1006 to i32
  br label %cond.end.1884

cond.false.1866:                                  ; preds = %cond.end.1838, %cond.end.1818
  %1007 = load i64, i64* %temp_pos, align 8
  %1008 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1867 = getelementptr inbounds %struct.buffer, %struct.buffer* %1008, i32 0, i32 73
  %1009 = load %struct.buffer_text*, %struct.buffer_text** %text1867, align 8
  %gpt_byte1868 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1009, i32 0, i32 3
  %1010 = load i64, i64* %gpt_byte1868, align 8
  %cmp1869 = icmp sge i64 %1007, %1010
  br i1 %cmp1869, label %cond.true.1871, label %cond.false.1874

cond.true.1871:                                   ; preds = %cond.false.1866
  %1011 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1872 = getelementptr inbounds %struct.buffer, %struct.buffer* %1011, i32 0, i32 73
  %1012 = load %struct.buffer_text*, %struct.buffer_text** %text1872, align 8
  %gap_size1873 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1012, i32 0, i32 5
  %1013 = load i64, i64* %gap_size1873, align 8
  br label %cond.end.1875

cond.false.1874:                                  ; preds = %cond.false.1866
  br label %cond.end.1875

cond.end.1875:                                    ; preds = %cond.false.1874, %cond.true.1871
  %cond1876 = phi i64 [ %1013, %cond.true.1871 ], [ 0, %cond.false.1874 ]
  %1014 = load i64, i64* %temp_pos, align 8
  %add1877 = add nsw i64 %cond1876, %1014
  %1015 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1878 = getelementptr inbounds %struct.buffer, %struct.buffer* %1015, i32 0, i32 73
  %1016 = load %struct.buffer_text*, %struct.buffer_text** %text1878, align 8
  %beg1879 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1016, i32 0, i32 0
  %1017 = load i8*, i8** %beg1879, align 8
  %add.ptr1880 = getelementptr inbounds i8, i8* %1017, i64 %add1877
  %add.ptr1881 = getelementptr inbounds i8, i8* %add.ptr1880, i64 -1
  %1018 = load i8, i8* %add.ptr1881, align 1
  %conv1882 = zext i8 %1018 to i32
  %add1883 = add nsw i32 %conv1882, 4194048
  br label %cond.end.1884

cond.end.1884:                                    ; preds = %cond.end.1875, %cond.end.1858
  %cond1885 = phi i32 [ %conv1865, %cond.end.1858 ], [ %add1883, %cond.end.1875 ]
  br label %cond.end.1886

cond.end.1886:                                    ; preds = %cond.end.1884, %cond.true.1806
  %cond1887 = phi i32 [ %call1807, %cond.true.1806 ], [ %cond1885, %cond.end.1884 ]
  store i32 %cond1887, i32* %c1, align 4
  %1019 = load i8, i8* %quoted, align 1
  %tobool1888 = trunc i8 %1019 to i1
  br i1 %tobool1888, label %if.end.1895, label %if.then.1889

if.then.1889:                                     ; preds = %cond.end.1886
  %1020 = load i32, i32* %c1, align 4
  %1021 = load i8, i8* %multibyte_symbol_p, align 1
  %tobool1890 = trunc i8 %1021 to i1
  %call1891 = call i32 @syntax_multibyte(i32 %1020, i1 zeroext %tobool1890)
  switch i32 %call1891, label %sw.default.1893 [
    i32 2, label %sw.bb.1892
    i32 3, label %sw.bb.1892
    i32 6, label %sw.bb.1892
  ]

sw.bb.1892:                                       ; preds = %if.then.1889, %if.then.1889, %if.then.1889
  br label %sw.epilog.1894

sw.default.1893:                                  ; preds = %if.then.1889
  br label %done2

sw.epilog.1894:                                   ; preds = %sw.bb.1892
  br label %if.end.1895

if.end.1895:                                      ; preds = %sw.epilog.1894, %cond.end.1886
  br label %do.body.1896

do.body.1896:                                     ; preds = %if.end.1895
  %1022 = load i64, i64* %from.addr, align 8
  %dec1897 = add nsw i64 %1022, -1
  store i64 %dec1897, i64* %from.addr, align 8
  %1023 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_1898 = getelementptr inbounds %struct.buffer, %struct.buffer* %1023, i32 0, i32 39
  %1024 = load i64, i64* %enable_multibyte_characters_1898, align 8
  %call1899 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1900 = icmp eq i64 %1024, %call1899
  br i1 %cmp1900, label %if.then.1902, label %if.else.1904

if.then.1902:                                     ; preds = %do.body.1896
  %1025 = load i64, i64* %from_byte, align 8
  %dec1903 = add nsw i64 %1025, -1
  store i64 %dec1903, i64* %from_byte, align 8
  br label %if.end.1937

if.else.1904:                                     ; preds = %do.body.1896
  br label %do.body.1905

do.body.1905:                                     ; preds = %if.else.1904
  %1026 = load i64, i64* %from_byte, align 8
  %dec1907 = add nsw i64 %1026, -1
  store i64 %dec1907, i64* %from_byte, align 8
  %1027 = load i64, i64* %from_byte, align 8
  %1028 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1908 = getelementptr inbounds %struct.buffer, %struct.buffer* %1028, i32 0, i32 73
  %1029 = load %struct.buffer_text*, %struct.buffer_text** %text1908, align 8
  %gpt_byte1909 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1029, i32 0, i32 3
  %1030 = load i64, i64* %gpt_byte1909, align 8
  %cmp1910 = icmp slt i64 %1027, %1030
  br i1 %cmp1910, label %if.then.1912, label %if.else.1917

if.then.1912:                                     ; preds = %do.body.1905
  %1031 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1913 = getelementptr inbounds %struct.buffer, %struct.buffer* %1031, i32 0, i32 73
  %1032 = load %struct.buffer_text*, %struct.buffer_text** %text1913, align 8
  %beg1914 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1032, i32 0, i32 0
  %1033 = load i8*, i8** %beg1914, align 8
  %1034 = load i64, i64* %from_byte, align 8
  %add.ptr1915 = getelementptr inbounds i8, i8* %1033, i64 %1034
  %add.ptr1916 = getelementptr inbounds i8, i8* %add.ptr1915, i64 -1
  store i8* %add.ptr1916, i8** %chp1906, align 8
  br label %if.end.1925

if.else.1917:                                     ; preds = %do.body.1905
  %1035 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1918 = getelementptr inbounds %struct.buffer, %struct.buffer* %1035, i32 0, i32 73
  %1036 = load %struct.buffer_text*, %struct.buffer_text** %text1918, align 8
  %beg1919 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1036, i32 0, i32 0
  %1037 = load i8*, i8** %beg1919, align 8
  %1038 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1920 = getelementptr inbounds %struct.buffer, %struct.buffer* %1038, i32 0, i32 73
  %1039 = load %struct.buffer_text*, %struct.buffer_text** %text1920, align 8
  %gap_size1921 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1039, i32 0, i32 5
  %1040 = load i64, i64* %gap_size1921, align 8
  %add.ptr1922 = getelementptr inbounds i8, i8* %1037, i64 %1040
  %1041 = load i64, i64* %from_byte, align 8
  %add.ptr1923 = getelementptr inbounds i8, i8* %add.ptr1922, i64 %1041
  %add.ptr1924 = getelementptr inbounds i8, i8* %add.ptr1923, i64 -1
  store i8* %add.ptr1924, i8** %chp1906, align 8
  br label %if.end.1925

if.end.1925:                                      ; preds = %if.else.1917, %if.then.1912
  br label %while.cond.1926

while.cond.1926:                                  ; preds = %while.body.1932, %if.end.1925
  %1042 = load i8*, i8** %chp1906, align 8
  %1043 = load i8, i8* %1042, align 1
  %conv1927 = zext i8 %1043 to i32
  %and1928 = and i32 %conv1927, 192
  %cmp1929 = icmp ne i32 %and1928, 128
  %lnot1931 = xor i1 %cmp1929, true
  br i1 %lnot1931, label %while.body.1932, label %while.end.1935

while.body.1932:                                  ; preds = %while.cond.1926
  %1044 = load i8*, i8** %chp1906, align 8
  %incdec.ptr1933 = getelementptr inbounds i8, i8* %1044, i32 -1
  store i8* %incdec.ptr1933, i8** %chp1906, align 8
  %1045 = load i64, i64* %from_byte, align 8
  %dec1934 = add nsw i64 %1045, -1
  store i64 %dec1934, i64* %from_byte, align 8
  br label %while.cond.1926

while.end.1935:                                   ; preds = %while.cond.1926
  br label %do.end.1936

do.end.1936:                                      ; preds = %while.end.1935
  br label %if.end.1937

if.end.1937:                                      ; preds = %do.end.1936, %if.then.1902
  br label %do.end.1938

do.end.1938:                                      ; preds = %if.end.1937
  br label %while.cond.1615

while.end.1939:                                   ; preds = %while.cond.1615
  br label %done2

sw.bb.1940:                                       ; preds = %if.end.1608
  %1046 = load i8, i8* %sexpflag.addr, align 1
  %tobool1941 = trunc i8 %1046 to i1
  br i1 %tobool1941, label %if.end.1943, label %if.then.1942

if.then.1942:                                     ; preds = %sw.bb.1940
  br label %sw.epilog.2517

if.end.1943:                                      ; preds = %sw.bb.1940
  %1047 = load i64, i64* %from.addr, align 8
  %1048 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv1944 = getelementptr inbounds %struct.buffer, %struct.buffer* %1048, i32 0, i32 77
  %1049 = load i64, i64* %begv1944, align 8
  %cmp1945 = icmp sgt i64 %1047, %1049
  br i1 %cmp1945, label %if.then.1947, label %if.end.2086

if.then.1947:                                     ; preds = %if.end.1943
  %1050 = load i64, i64* %from_byte, align 8
  %call1948 = call i64 @dec_bytepos(i64 %1050)
  store i64 %call1948, i64* %temp_pos, align 8
  %1051 = load i64, i64* %from.addr, align 8
  %sub1949 = sub nsw i64 %1051, 1
  call void @UPDATE_SYNTAX_TABLE_BACKWARD(i64 %sub1949)
  %1052 = load i64, i64* %from.addr, align 8
  %1053 = load i64, i64* %stop, align 8
  %cmp1950 = icmp ne i64 %1052, %1053
  br i1 %cmp1950, label %land.lhs.true.1952, label %if.end.2085

land.lhs.true.1952:                               ; preds = %if.then.1947
  %1054 = load i32, i32* %c, align 4
  %1055 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_1953 = getelementptr inbounds %struct.buffer, %struct.buffer* %1055, i32 0, i32 39
  %1056 = load i64, i64* %enable_multibyte_characters_1953, align 8
  %call1954 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1955 = icmp eq i64 %1056, %call1954
  br i1 %cmp1955, label %cond.false.1959, label %cond.true.1957

cond.true.1957:                                   ; preds = %land.lhs.true.1952
  %1057 = load i64, i64* %temp_pos, align 8
  %call1958 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %1057)
  br label %cond.end.2037

cond.false.1959:                                  ; preds = %land.lhs.true.1952
  br i1 true, label %cond.true.1960, label %cond.false.1980

cond.true.1960:                                   ; preds = %cond.false.1959
  %1058 = load i64, i64* %temp_pos, align 8
  %1059 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1961 = getelementptr inbounds %struct.buffer, %struct.buffer* %1059, i32 0, i32 73
  %1060 = load %struct.buffer_text*, %struct.buffer_text** %text1961, align 8
  %gpt_byte1962 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1060, i32 0, i32 3
  %1061 = load i64, i64* %gpt_byte1962, align 8
  %cmp1963 = icmp sge i64 %1058, %1061
  br i1 %cmp1963, label %cond.true.1965, label %cond.false.1968

cond.true.1965:                                   ; preds = %cond.true.1960
  %1062 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1966 = getelementptr inbounds %struct.buffer, %struct.buffer* %1062, i32 0, i32 73
  %1063 = load %struct.buffer_text*, %struct.buffer_text** %text1966, align 8
  %gap_size1967 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1063, i32 0, i32 5
  %1064 = load i64, i64* %gap_size1967, align 8
  br label %cond.end.1969

cond.false.1968:                                  ; preds = %cond.true.1960
  br label %cond.end.1969

cond.end.1969:                                    ; preds = %cond.false.1968, %cond.true.1965
  %cond1970 = phi i64 [ %1064, %cond.true.1965 ], [ 0, %cond.false.1968 ]
  %1065 = load i64, i64* %temp_pos, align 8
  %add1971 = add nsw i64 %cond1970, %1065
  %1066 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1972 = getelementptr inbounds %struct.buffer, %struct.buffer* %1066, i32 0, i32 73
  %1067 = load %struct.buffer_text*, %struct.buffer_text** %text1972, align 8
  %beg1973 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1067, i32 0, i32 0
  %1068 = load i8*, i8** %beg1973, align 8
  %add.ptr1974 = getelementptr inbounds i8, i8* %1068, i64 %add1971
  %add.ptr1975 = getelementptr inbounds i8, i8* %add.ptr1974, i64 -1
  %1069 = load i8, i8* %add.ptr1975, align 1
  %conv1976 = zext i8 %1069 to i32
  %add1977 = add i32 %conv1976, 0
  %cmp1978 = icmp ult i32 %add1977, 128
  br i1 %cmp1978, label %cond.true.2000, label %cond.false.2017

cond.false.1980:                                  ; preds = %cond.false.1959
  %1070 = load i64, i64* %temp_pos, align 8
  %1071 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1981 = getelementptr inbounds %struct.buffer, %struct.buffer* %1071, i32 0, i32 73
  %1072 = load %struct.buffer_text*, %struct.buffer_text** %text1981, align 8
  %gpt_byte1982 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1072, i32 0, i32 3
  %1073 = load i64, i64* %gpt_byte1982, align 8
  %cmp1983 = icmp sge i64 %1070, %1073
  br i1 %cmp1983, label %cond.true.1985, label %cond.false.1988

cond.true.1985:                                   ; preds = %cond.false.1980
  %1074 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1986 = getelementptr inbounds %struct.buffer, %struct.buffer* %1074, i32 0, i32 73
  %1075 = load %struct.buffer_text*, %struct.buffer_text** %text1986, align 8
  %gap_size1987 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1075, i32 0, i32 5
  %1076 = load i64, i64* %gap_size1987, align 8
  br label %cond.end.1989

cond.false.1988:                                  ; preds = %cond.false.1980
  br label %cond.end.1989

cond.end.1989:                                    ; preds = %cond.false.1988, %cond.true.1985
  %cond1990 = phi i64 [ %1076, %cond.true.1985 ], [ 0, %cond.false.1988 ]
  %1077 = load i64, i64* %temp_pos, align 8
  %add1991 = add nsw i64 %cond1990, %1077
  %1078 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1992 = getelementptr inbounds %struct.buffer, %struct.buffer* %1078, i32 0, i32 73
  %1079 = load %struct.buffer_text*, %struct.buffer_text** %text1992, align 8
  %beg1993 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1079, i32 0, i32 0
  %1080 = load i8*, i8** %beg1993, align 8
  %add.ptr1994 = getelementptr inbounds i8, i8* %1080, i64 %add1991
  %add.ptr1995 = getelementptr inbounds i8, i8* %add.ptr1994, i64 -1
  %1081 = load i8, i8* %add.ptr1995, align 1
  %conv1996 = zext i8 %1081 to i64
  %add1997 = add i64 %conv1996, 0
  %cmp1998 = icmp ult i64 %add1997, 128
  br i1 %cmp1998, label %cond.true.2000, label %cond.false.2017

cond.true.2000:                                   ; preds = %cond.end.1989, %cond.end.1969
  %1082 = load i64, i64* %temp_pos, align 8
  %1083 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2001 = getelementptr inbounds %struct.buffer, %struct.buffer* %1083, i32 0, i32 73
  %1084 = load %struct.buffer_text*, %struct.buffer_text** %text2001, align 8
  %gpt_byte2002 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1084, i32 0, i32 3
  %1085 = load i64, i64* %gpt_byte2002, align 8
  %cmp2003 = icmp sge i64 %1082, %1085
  br i1 %cmp2003, label %cond.true.2005, label %cond.false.2008

cond.true.2005:                                   ; preds = %cond.true.2000
  %1086 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2006 = getelementptr inbounds %struct.buffer, %struct.buffer* %1086, i32 0, i32 73
  %1087 = load %struct.buffer_text*, %struct.buffer_text** %text2006, align 8
  %gap_size2007 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1087, i32 0, i32 5
  %1088 = load i64, i64* %gap_size2007, align 8
  br label %cond.end.2009

cond.false.2008:                                  ; preds = %cond.true.2000
  br label %cond.end.2009

cond.end.2009:                                    ; preds = %cond.false.2008, %cond.true.2005
  %cond2010 = phi i64 [ %1088, %cond.true.2005 ], [ 0, %cond.false.2008 ]
  %1089 = load i64, i64* %temp_pos, align 8
  %add2011 = add nsw i64 %cond2010, %1089
  %1090 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2012 = getelementptr inbounds %struct.buffer, %struct.buffer* %1090, i32 0, i32 73
  %1091 = load %struct.buffer_text*, %struct.buffer_text** %text2012, align 8
  %beg2013 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1091, i32 0, i32 0
  %1092 = load i8*, i8** %beg2013, align 8
  %add.ptr2014 = getelementptr inbounds i8, i8* %1092, i64 %add2011
  %add.ptr2015 = getelementptr inbounds i8, i8* %add.ptr2014, i64 -1
  %1093 = load i8, i8* %add.ptr2015, align 1
  %conv2016 = zext i8 %1093 to i32
  br label %cond.end.2035

cond.false.2017:                                  ; preds = %cond.end.1989, %cond.end.1969
  %1094 = load i64, i64* %temp_pos, align 8
  %1095 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2018 = getelementptr inbounds %struct.buffer, %struct.buffer* %1095, i32 0, i32 73
  %1096 = load %struct.buffer_text*, %struct.buffer_text** %text2018, align 8
  %gpt_byte2019 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1096, i32 0, i32 3
  %1097 = load i64, i64* %gpt_byte2019, align 8
  %cmp2020 = icmp sge i64 %1094, %1097
  br i1 %cmp2020, label %cond.true.2022, label %cond.false.2025

cond.true.2022:                                   ; preds = %cond.false.2017
  %1098 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2023 = getelementptr inbounds %struct.buffer, %struct.buffer* %1098, i32 0, i32 73
  %1099 = load %struct.buffer_text*, %struct.buffer_text** %text2023, align 8
  %gap_size2024 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1099, i32 0, i32 5
  %1100 = load i64, i64* %gap_size2024, align 8
  br label %cond.end.2026

cond.false.2025:                                  ; preds = %cond.false.2017
  br label %cond.end.2026

cond.end.2026:                                    ; preds = %cond.false.2025, %cond.true.2022
  %cond2027 = phi i64 [ %1100, %cond.true.2022 ], [ 0, %cond.false.2025 ]
  %1101 = load i64, i64* %temp_pos, align 8
  %add2028 = add nsw i64 %cond2027, %1101
  %1102 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2029 = getelementptr inbounds %struct.buffer, %struct.buffer* %1102, i32 0, i32 73
  %1103 = load %struct.buffer_text*, %struct.buffer_text** %text2029, align 8
  %beg2030 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1103, i32 0, i32 0
  %1104 = load i8*, i8** %beg2030, align 8
  %add.ptr2031 = getelementptr inbounds i8, i8* %1104, i64 %add2028
  %add.ptr2032 = getelementptr inbounds i8, i8* %add.ptr2031, i64 -1
  %1105 = load i8, i8* %add.ptr2032, align 1
  %conv2033 = zext i8 %1105 to i32
  %add2034 = add nsw i32 %conv2033, 4194048
  br label %cond.end.2035

cond.end.2035:                                    ; preds = %cond.end.2026, %cond.end.2009
  %cond2036 = phi i32 [ %conv2016, %cond.end.2009 ], [ %add2034, %cond.end.2026 ]
  br label %cond.end.2037

cond.end.2037:                                    ; preds = %cond.end.2035, %cond.true.1957
  %cond2038 = phi i32 [ %call1958, %cond.true.1957 ], [ %cond2036, %cond.end.2035 ]
  %cmp2039 = icmp eq i32 %1054, %cond2038
  br i1 %cmp2039, label %if.then.2041, label %if.end.2085

if.then.2041:                                     ; preds = %cond.end.2037
  br label %do.body.2042

do.body.2042:                                     ; preds = %if.then.2041
  %1106 = load i64, i64* %from.addr, align 8
  %dec2043 = add nsw i64 %1106, -1
  store i64 %dec2043, i64* %from.addr, align 8
  %1107 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_2044 = getelementptr inbounds %struct.buffer, %struct.buffer* %1107, i32 0, i32 39
  %1108 = load i64, i64* %enable_multibyte_characters_2044, align 8
  %call2045 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2046 = icmp eq i64 %1108, %call2045
  br i1 %cmp2046, label %if.then.2048, label %if.else.2050

if.then.2048:                                     ; preds = %do.body.2042
  %1109 = load i64, i64* %from_byte, align 8
  %dec2049 = add nsw i64 %1109, -1
  store i64 %dec2049, i64* %from_byte, align 8
  br label %if.end.2083

if.else.2050:                                     ; preds = %do.body.2042
  br label %do.body.2051

do.body.2051:                                     ; preds = %if.else.2050
  %1110 = load i64, i64* %from_byte, align 8
  %dec2053 = add nsw i64 %1110, -1
  store i64 %dec2053, i64* %from_byte, align 8
  %1111 = load i64, i64* %from_byte, align 8
  %1112 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2054 = getelementptr inbounds %struct.buffer, %struct.buffer* %1112, i32 0, i32 73
  %1113 = load %struct.buffer_text*, %struct.buffer_text** %text2054, align 8
  %gpt_byte2055 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1113, i32 0, i32 3
  %1114 = load i64, i64* %gpt_byte2055, align 8
  %cmp2056 = icmp slt i64 %1111, %1114
  br i1 %cmp2056, label %if.then.2058, label %if.else.2063

if.then.2058:                                     ; preds = %do.body.2051
  %1115 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2059 = getelementptr inbounds %struct.buffer, %struct.buffer* %1115, i32 0, i32 73
  %1116 = load %struct.buffer_text*, %struct.buffer_text** %text2059, align 8
  %beg2060 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1116, i32 0, i32 0
  %1117 = load i8*, i8** %beg2060, align 8
  %1118 = load i64, i64* %from_byte, align 8
  %add.ptr2061 = getelementptr inbounds i8, i8* %1117, i64 %1118
  %add.ptr2062 = getelementptr inbounds i8, i8* %add.ptr2061, i64 -1
  store i8* %add.ptr2062, i8** %chp2052, align 8
  br label %if.end.2071

if.else.2063:                                     ; preds = %do.body.2051
  %1119 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2064 = getelementptr inbounds %struct.buffer, %struct.buffer* %1119, i32 0, i32 73
  %1120 = load %struct.buffer_text*, %struct.buffer_text** %text2064, align 8
  %beg2065 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1120, i32 0, i32 0
  %1121 = load i8*, i8** %beg2065, align 8
  %1122 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2066 = getelementptr inbounds %struct.buffer, %struct.buffer* %1122, i32 0, i32 73
  %1123 = load %struct.buffer_text*, %struct.buffer_text** %text2066, align 8
  %gap_size2067 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1123, i32 0, i32 5
  %1124 = load i64, i64* %gap_size2067, align 8
  %add.ptr2068 = getelementptr inbounds i8, i8* %1121, i64 %1124
  %1125 = load i64, i64* %from_byte, align 8
  %add.ptr2069 = getelementptr inbounds i8, i8* %add.ptr2068, i64 %1125
  %add.ptr2070 = getelementptr inbounds i8, i8* %add.ptr2069, i64 -1
  store i8* %add.ptr2070, i8** %chp2052, align 8
  br label %if.end.2071

if.end.2071:                                      ; preds = %if.else.2063, %if.then.2058
  br label %while.cond.2072

while.cond.2072:                                  ; preds = %while.body.2078, %if.end.2071
  %1126 = load i8*, i8** %chp2052, align 8
  %1127 = load i8, i8* %1126, align 1
  %conv2073 = zext i8 %1127 to i32
  %and2074 = and i32 %conv2073, 192
  %cmp2075 = icmp ne i32 %and2074, 128
  %lnot2077 = xor i1 %cmp2075, true
  br i1 %lnot2077, label %while.body.2078, label %while.end.2081

while.body.2078:                                  ; preds = %while.cond.2072
  %1128 = load i8*, i8** %chp2052, align 8
  %incdec.ptr2079 = getelementptr inbounds i8, i8* %1128, i32 -1
  store i8* %incdec.ptr2079, i8** %chp2052, align 8
  %1129 = load i64, i64* %from_byte, align 8
  %dec2080 = add nsw i64 %1129, -1
  store i64 %dec2080, i64* %from_byte, align 8
  br label %while.cond.2072

while.end.2081:                                   ; preds = %while.cond.2072
  br label %do.end.2082

do.end.2082:                                      ; preds = %while.end.2081
  br label %if.end.2083

if.end.2083:                                      ; preds = %do.end.2082, %if.then.2048
  br label %do.end.2084

do.end.2084:                                      ; preds = %if.end.2083
  br label %if.end.2085

if.end.2085:                                      ; preds = %do.end.2084, %cond.end.2037, %if.then.1947
  br label %if.end.2086

if.end.2086:                                      ; preds = %if.end.2085, %if.end.1943
  %1130 = load i8, i8* %mathexit, align 1
  %tobool2087 = trunc i8 %1130 to i1
  br i1 %tobool2087, label %if.then.2088, label %if.end.2089

if.then.2088:                                     ; preds = %if.end.2086
  store i8 0, i8* %mathexit, align 1
  br label %open2

if.end.2089:                                      ; preds = %if.end.2086
  store i8 1, i8* %mathexit, align 1
  br label %sw.bb.2090

sw.bb.2090:                                       ; preds = %if.end.1608, %if.end.2089
  %1131 = load i64, i64* %depth.addr, align 8
  %inc2091 = add nsw i64 %1131, 1
  store i64 %inc2091, i64* %depth.addr, align 8
  %tobool2092 = icmp ne i64 %inc2091, 0
  br i1 %tobool2092, label %if.end.2094, label %if.then.2093

if.then.2093:                                     ; preds = %sw.bb.2090
  br label %done2

if.end.2094:                                      ; preds = %sw.bb.2090
  br label %sw.epilog.2517

sw.bb.2095:                                       ; preds = %if.end.1608
  br label %open2

open2:                                            ; preds = %sw.bb.2095, %if.then.2088
  %1132 = load i64, i64* %depth.addr, align 8
  %dec2096 = add nsw i64 %1132, -1
  store i64 %dec2096, i64* %depth.addr, align 8
  %tobool2097 = icmp ne i64 %dec2096, 0
  br i1 %tobool2097, label %if.end.2099, label %if.then.2098

if.then.2098:                                     ; preds = %open2
  br label %done2

if.end.2099:                                      ; preds = %open2
  %1133 = load i64, i64* %depth.addr, align 8
  %1134 = load i64, i64* %min_depth, align 8
  %cmp2100 = icmp slt i64 %1133, %1134
  br i1 %cmp2100, label %if.then.2102, label %if.end.2109

if.then.2102:                                     ; preds = %if.end.2099
  %call2103 = call i64 @builtin_lisp_symbol(i32 828)
  %call2104 = call i64 @build_string(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.61, i32 0, i32 0))
  %1135 = load i64, i64* %last_good, align 8
  %shl2105 = shl i64 %1135, 2
  %add2106 = add i64 %shl2105, 2
  %1136 = load i64, i64* %from.addr, align 8
  %shl2107 = shl i64 %1136, 2
  %add2108 = add i64 %shl2107, 2
  call void @xsignal3(i64 %call2103, i64 %call2104, i64 %add2106, i64 %add2108) #5
  unreachable

if.end.2109:                                      ; preds = %if.end.2099
  br label %sw.epilog.2517

sw.bb.2110:                                       ; preds = %if.end.1608
  %1137 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 479), align 1
  %tobool2111 = trunc i8 %1137 to i1
  br i1 %tobool2111, label %if.end.2113, label %if.then.2112

if.then.2112:                                     ; preds = %sw.bb.2110
  br label %sw.epilog.2517

if.end.2113:                                      ; preds = %sw.bb.2110
  %1138 = load i64, i64* %from.addr, align 8
  %1139 = load i64, i64* %from_byte, align 8
  %1140 = load i64, i64* %stop, align 8
  %1141 = load i8, i8* %comnested, align 1
  %tobool2114 = trunc i8 %1141 to i1
  %1142 = load i32, i32* %comstyle, align 4
  %call2115 = call zeroext i1 @back_comment(i64 %1138, i64 %1139, i64 %1140, i1 zeroext %tobool2114, i32 %1142, i64* %out_charpos, i64* %out_bytepos)
  %frombool2116 = zext i1 %call2115 to i8
  store i8 %frombool2116, i8* %found, align 1
  %1143 = load i8, i8* %found, align 1
  %tobool2117 = trunc i8 %1143 to i1
  br i1 %tobool2117, label %if.then.2118, label %if.end.2119

if.then.2118:                                     ; preds = %if.end.2113
  %1144 = load i64, i64* %out_charpos, align 8
  store i64 %1144, i64* %from.addr, align 8
  %1145 = load i64, i64* %out_bytepos, align 8
  store i64 %1145, i64* %from_byte, align 8
  br label %if.end.2119

if.end.2119:                                      ; preds = %if.then.2118, %if.end.2113
  br label %sw.epilog.2517

sw.bb.2120:                                       ; preds = %if.end.1608, %if.end.1608
  br label %while.body.2122

while.body.2122:                                  ; preds = %sw.bb.2120, %if.end.2264
  %1146 = load i64, i64* %from.addr, align 8
  %1147 = load i64, i64* %stop, align 8
  %cmp2123 = icmp eq i64 %1146, %1147
  br i1 %cmp2123, label %if.then.2125, label %if.end.2126

if.then.2125:                                     ; preds = %while.body.2122
  br label %lose

if.end.2126:                                      ; preds = %while.body.2122
  br label %do.body.2127

do.body.2127:                                     ; preds = %if.end.2126
  %1148 = load i64, i64* %from.addr, align 8
  %dec2128 = add nsw i64 %1148, -1
  store i64 %dec2128, i64* %from.addr, align 8
  %1149 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_2129 = getelementptr inbounds %struct.buffer, %struct.buffer* %1149, i32 0, i32 39
  %1150 = load i64, i64* %enable_multibyte_characters_2129, align 8
  %call2130 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2131 = icmp eq i64 %1150, %call2130
  br i1 %cmp2131, label %if.then.2133, label %if.else.2135

if.then.2133:                                     ; preds = %do.body.2127
  %1151 = load i64, i64* %from_byte, align 8
  %dec2134 = add nsw i64 %1151, -1
  store i64 %dec2134, i64* %from_byte, align 8
  br label %if.end.2168

if.else.2135:                                     ; preds = %do.body.2127
  br label %do.body.2136

do.body.2136:                                     ; preds = %if.else.2135
  %1152 = load i64, i64* %from_byte, align 8
  %dec2138 = add nsw i64 %1152, -1
  store i64 %dec2138, i64* %from_byte, align 8
  %1153 = load i64, i64* %from_byte, align 8
  %1154 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2139 = getelementptr inbounds %struct.buffer, %struct.buffer* %1154, i32 0, i32 73
  %1155 = load %struct.buffer_text*, %struct.buffer_text** %text2139, align 8
  %gpt_byte2140 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1155, i32 0, i32 3
  %1156 = load i64, i64* %gpt_byte2140, align 8
  %cmp2141 = icmp slt i64 %1153, %1156
  br i1 %cmp2141, label %if.then.2143, label %if.else.2148

if.then.2143:                                     ; preds = %do.body.2136
  %1157 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2144 = getelementptr inbounds %struct.buffer, %struct.buffer* %1157, i32 0, i32 73
  %1158 = load %struct.buffer_text*, %struct.buffer_text** %text2144, align 8
  %beg2145 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1158, i32 0, i32 0
  %1159 = load i8*, i8** %beg2145, align 8
  %1160 = load i64, i64* %from_byte, align 8
  %add.ptr2146 = getelementptr inbounds i8, i8* %1159, i64 %1160
  %add.ptr2147 = getelementptr inbounds i8, i8* %add.ptr2146, i64 -1
  store i8* %add.ptr2147, i8** %chp2137, align 8
  br label %if.end.2156

if.else.2148:                                     ; preds = %do.body.2136
  %1161 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2149 = getelementptr inbounds %struct.buffer, %struct.buffer* %1161, i32 0, i32 73
  %1162 = load %struct.buffer_text*, %struct.buffer_text** %text2149, align 8
  %beg2150 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1162, i32 0, i32 0
  %1163 = load i8*, i8** %beg2150, align 8
  %1164 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2151 = getelementptr inbounds %struct.buffer, %struct.buffer* %1164, i32 0, i32 73
  %1165 = load %struct.buffer_text*, %struct.buffer_text** %text2151, align 8
  %gap_size2152 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1165, i32 0, i32 5
  %1166 = load i64, i64* %gap_size2152, align 8
  %add.ptr2153 = getelementptr inbounds i8, i8* %1163, i64 %1166
  %1167 = load i64, i64* %from_byte, align 8
  %add.ptr2154 = getelementptr inbounds i8, i8* %add.ptr2153, i64 %1167
  %add.ptr2155 = getelementptr inbounds i8, i8* %add.ptr2154, i64 -1
  store i8* %add.ptr2155, i8** %chp2137, align 8
  br label %if.end.2156

if.end.2156:                                      ; preds = %if.else.2148, %if.then.2143
  br label %while.cond.2157

while.cond.2157:                                  ; preds = %while.body.2163, %if.end.2156
  %1168 = load i8*, i8** %chp2137, align 8
  %1169 = load i8, i8* %1168, align 1
  %conv2158 = zext i8 %1169 to i32
  %and2159 = and i32 %conv2158, 192
  %cmp2160 = icmp ne i32 %and2159, 128
  %lnot2162 = xor i1 %cmp2160, true
  br i1 %lnot2162, label %while.body.2163, label %while.end.2166

while.body.2163:                                  ; preds = %while.cond.2157
  %1170 = load i8*, i8** %chp2137, align 8
  %incdec.ptr2164 = getelementptr inbounds i8, i8* %1170, i32 -1
  store i8* %incdec.ptr2164, i8** %chp2137, align 8
  %1171 = load i64, i64* %from_byte, align 8
  %dec2165 = add nsw i64 %1171, -1
  store i64 %dec2165, i64* %from_byte, align 8
  br label %while.cond.2157

while.end.2166:                                   ; preds = %while.cond.2157
  br label %do.end.2167

do.end.2167:                                      ; preds = %while.end.2166
  br label %if.end.2168

if.end.2168:                                      ; preds = %do.end.2167, %if.then.2133
  br label %do.end.2169

do.end.2169:                                      ; preds = %if.end.2168
  %1172 = load i64, i64* %from.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_BACKWARD(i64 %1172)
  %1173 = load i64, i64* %from.addr, align 8
  %1174 = load i64, i64* %from_byte, align 8
  %call2170 = call zeroext i1 @char_quoted(i64 %1173, i64 %1174)
  br i1 %call2170, label %if.end.2264, label %if.then.2171

if.then.2171:                                     ; preds = %do.end.2169
  %1175 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_2172 = getelementptr inbounds %struct.buffer, %struct.buffer* %1175, i32 0, i32 39
  %1176 = load i64, i64* %enable_multibyte_characters_2172, align 8
  %call2173 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2174 = icmp eq i64 %1176, %call2173
  br i1 %cmp2174, label %cond.false.2178, label %cond.true.2176

cond.true.2176:                                   ; preds = %if.then.2171
  %1177 = load i64, i64* %from_byte, align 8
  %call2177 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %1177)
  br label %cond.end.2256

cond.false.2178:                                  ; preds = %if.then.2171
  br i1 true, label %cond.true.2179, label %cond.false.2199

cond.true.2179:                                   ; preds = %cond.false.2178
  %1178 = load i64, i64* %from_byte, align 8
  %1179 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2180 = getelementptr inbounds %struct.buffer, %struct.buffer* %1179, i32 0, i32 73
  %1180 = load %struct.buffer_text*, %struct.buffer_text** %text2180, align 8
  %gpt_byte2181 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1180, i32 0, i32 3
  %1181 = load i64, i64* %gpt_byte2181, align 8
  %cmp2182 = icmp sge i64 %1178, %1181
  br i1 %cmp2182, label %cond.true.2184, label %cond.false.2187

cond.true.2184:                                   ; preds = %cond.true.2179
  %1182 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2185 = getelementptr inbounds %struct.buffer, %struct.buffer* %1182, i32 0, i32 73
  %1183 = load %struct.buffer_text*, %struct.buffer_text** %text2185, align 8
  %gap_size2186 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1183, i32 0, i32 5
  %1184 = load i64, i64* %gap_size2186, align 8
  br label %cond.end.2188

cond.false.2187:                                  ; preds = %cond.true.2179
  br label %cond.end.2188

cond.end.2188:                                    ; preds = %cond.false.2187, %cond.true.2184
  %cond2189 = phi i64 [ %1184, %cond.true.2184 ], [ 0, %cond.false.2187 ]
  %1185 = load i64, i64* %from_byte, align 8
  %add2190 = add nsw i64 %cond2189, %1185
  %1186 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2191 = getelementptr inbounds %struct.buffer, %struct.buffer* %1186, i32 0, i32 73
  %1187 = load %struct.buffer_text*, %struct.buffer_text** %text2191, align 8
  %beg2192 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1187, i32 0, i32 0
  %1188 = load i8*, i8** %beg2192, align 8
  %add.ptr2193 = getelementptr inbounds i8, i8* %1188, i64 %add2190
  %add.ptr2194 = getelementptr inbounds i8, i8* %add.ptr2193, i64 -1
  %1189 = load i8, i8* %add.ptr2194, align 1
  %conv2195 = zext i8 %1189 to i32
  %add2196 = add i32 %conv2195, 0
  %cmp2197 = icmp ult i32 %add2196, 128
  br i1 %cmp2197, label %cond.true.2219, label %cond.false.2236

cond.false.2199:                                  ; preds = %cond.false.2178
  %1190 = load i64, i64* %from_byte, align 8
  %1191 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2200 = getelementptr inbounds %struct.buffer, %struct.buffer* %1191, i32 0, i32 73
  %1192 = load %struct.buffer_text*, %struct.buffer_text** %text2200, align 8
  %gpt_byte2201 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1192, i32 0, i32 3
  %1193 = load i64, i64* %gpt_byte2201, align 8
  %cmp2202 = icmp sge i64 %1190, %1193
  br i1 %cmp2202, label %cond.true.2204, label %cond.false.2207

cond.true.2204:                                   ; preds = %cond.false.2199
  %1194 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2205 = getelementptr inbounds %struct.buffer, %struct.buffer* %1194, i32 0, i32 73
  %1195 = load %struct.buffer_text*, %struct.buffer_text** %text2205, align 8
  %gap_size2206 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1195, i32 0, i32 5
  %1196 = load i64, i64* %gap_size2206, align 8
  br label %cond.end.2208

cond.false.2207:                                  ; preds = %cond.false.2199
  br label %cond.end.2208

cond.end.2208:                                    ; preds = %cond.false.2207, %cond.true.2204
  %cond2209 = phi i64 [ %1196, %cond.true.2204 ], [ 0, %cond.false.2207 ]
  %1197 = load i64, i64* %from_byte, align 8
  %add2210 = add nsw i64 %cond2209, %1197
  %1198 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2211 = getelementptr inbounds %struct.buffer, %struct.buffer* %1198, i32 0, i32 73
  %1199 = load %struct.buffer_text*, %struct.buffer_text** %text2211, align 8
  %beg2212 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1199, i32 0, i32 0
  %1200 = load i8*, i8** %beg2212, align 8
  %add.ptr2213 = getelementptr inbounds i8, i8* %1200, i64 %add2210
  %add.ptr2214 = getelementptr inbounds i8, i8* %add.ptr2213, i64 -1
  %1201 = load i8, i8* %add.ptr2214, align 1
  %conv2215 = zext i8 %1201 to i64
  %add2216 = add i64 %conv2215, 0
  %cmp2217 = icmp ult i64 %add2216, 128
  br i1 %cmp2217, label %cond.true.2219, label %cond.false.2236

cond.true.2219:                                   ; preds = %cond.end.2208, %cond.end.2188
  %1202 = load i64, i64* %from_byte, align 8
  %1203 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2220 = getelementptr inbounds %struct.buffer, %struct.buffer* %1203, i32 0, i32 73
  %1204 = load %struct.buffer_text*, %struct.buffer_text** %text2220, align 8
  %gpt_byte2221 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1204, i32 0, i32 3
  %1205 = load i64, i64* %gpt_byte2221, align 8
  %cmp2222 = icmp sge i64 %1202, %1205
  br i1 %cmp2222, label %cond.true.2224, label %cond.false.2227

cond.true.2224:                                   ; preds = %cond.true.2219
  %1206 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2225 = getelementptr inbounds %struct.buffer, %struct.buffer* %1206, i32 0, i32 73
  %1207 = load %struct.buffer_text*, %struct.buffer_text** %text2225, align 8
  %gap_size2226 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1207, i32 0, i32 5
  %1208 = load i64, i64* %gap_size2226, align 8
  br label %cond.end.2228

cond.false.2227:                                  ; preds = %cond.true.2219
  br label %cond.end.2228

cond.end.2228:                                    ; preds = %cond.false.2227, %cond.true.2224
  %cond2229 = phi i64 [ %1208, %cond.true.2224 ], [ 0, %cond.false.2227 ]
  %1209 = load i64, i64* %from_byte, align 8
  %add2230 = add nsw i64 %cond2229, %1209
  %1210 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2231 = getelementptr inbounds %struct.buffer, %struct.buffer* %1210, i32 0, i32 73
  %1211 = load %struct.buffer_text*, %struct.buffer_text** %text2231, align 8
  %beg2232 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1211, i32 0, i32 0
  %1212 = load i8*, i8** %beg2232, align 8
  %add.ptr2233 = getelementptr inbounds i8, i8* %1212, i64 %add2230
  %add.ptr2234 = getelementptr inbounds i8, i8* %add.ptr2233, i64 -1
  %1213 = load i8, i8* %add.ptr2234, align 1
  %conv2235 = zext i8 %1213 to i32
  br label %cond.end.2254

cond.false.2236:                                  ; preds = %cond.end.2208, %cond.end.2188
  %1214 = load i64, i64* %from_byte, align 8
  %1215 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2237 = getelementptr inbounds %struct.buffer, %struct.buffer* %1215, i32 0, i32 73
  %1216 = load %struct.buffer_text*, %struct.buffer_text** %text2237, align 8
  %gpt_byte2238 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1216, i32 0, i32 3
  %1217 = load i64, i64* %gpt_byte2238, align 8
  %cmp2239 = icmp sge i64 %1214, %1217
  br i1 %cmp2239, label %cond.true.2241, label %cond.false.2244

cond.true.2241:                                   ; preds = %cond.false.2236
  %1218 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2242 = getelementptr inbounds %struct.buffer, %struct.buffer* %1218, i32 0, i32 73
  %1219 = load %struct.buffer_text*, %struct.buffer_text** %text2242, align 8
  %gap_size2243 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1219, i32 0, i32 5
  %1220 = load i64, i64* %gap_size2243, align 8
  br label %cond.end.2245

cond.false.2244:                                  ; preds = %cond.false.2236
  br label %cond.end.2245

cond.end.2245:                                    ; preds = %cond.false.2244, %cond.true.2241
  %cond2246 = phi i64 [ %1220, %cond.true.2241 ], [ 0, %cond.false.2244 ]
  %1221 = load i64, i64* %from_byte, align 8
  %add2247 = add nsw i64 %cond2246, %1221
  %1222 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2248 = getelementptr inbounds %struct.buffer, %struct.buffer* %1222, i32 0, i32 73
  %1223 = load %struct.buffer_text*, %struct.buffer_text** %text2248, align 8
  %beg2249 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1223, i32 0, i32 0
  %1224 = load i8*, i8** %beg2249, align 8
  %add.ptr2250 = getelementptr inbounds i8, i8* %1224, i64 %add2247
  %add.ptr2251 = getelementptr inbounds i8, i8* %add.ptr2250, i64 -1
  %1225 = load i8, i8* %add.ptr2251, align 1
  %conv2252 = zext i8 %1225 to i32
  %add2253 = add nsw i32 %conv2252, 4194048
  br label %cond.end.2254

cond.end.2254:                                    ; preds = %cond.end.2245, %cond.end.2228
  %cond2255 = phi i32 [ %conv2235, %cond.end.2228 ], [ %add2253, %cond.end.2245 ]
  br label %cond.end.2256

cond.end.2256:                                    ; preds = %cond.end.2254, %cond.true.2176
  %cond2257 = phi i32 [ %call2177, %cond.true.2176 ], [ %cond2255, %cond.end.2254 ]
  store i32 %cond2257, i32* %c, align 4
  %1226 = load i32, i32* %c, align 4
  %1227 = load i8, i8* %multibyte_symbol_p, align 1
  %tobool2258 = trunc i8 %1227 to i1
  %call2259 = call i32 @syntax_multibyte(i32 %1226, i1 zeroext %tobool2258)
  %1228 = load i32, i32* %code, align 4
  %cmp2260 = icmp eq i32 %call2259, %1228
  br i1 %cmp2260, label %if.then.2262, label %if.end.2263

if.then.2262:                                     ; preds = %cond.end.2256
  br label %while.end.2265

if.end.2263:                                      ; preds = %cond.end.2256
  br label %if.end.2264

if.end.2264:                                      ; preds = %if.end.2263, %do.end.2169
  br label %while.body.2122

while.end.2265:                                   ; preds = %if.then.2262
  %1229 = load i32, i32* %code, align 4
  %cmp2266 = icmp eq i32 %1229, 15
  br i1 %cmp2266, label %land.lhs.true.2268, label %if.end.2274

land.lhs.true.2268:                               ; preds = %while.end.2265
  %1230 = load i64, i64* %depth.addr, align 8
  %tobool2269 = icmp ne i64 %1230, 0
  br i1 %tobool2269, label %if.end.2274, label %land.lhs.true.2270

land.lhs.true.2270:                               ; preds = %land.lhs.true.2268
  %1231 = load i8, i8* %sexpflag.addr, align 1
  %tobool2271 = trunc i8 %1231 to i1
  br i1 %tobool2271, label %if.then.2273, label %if.end.2274

if.then.2273:                                     ; preds = %land.lhs.true.2270
  br label %done2

if.end.2274:                                      ; preds = %land.lhs.true.2270, %land.lhs.true.2268, %while.end.2265
  br label %sw.epilog.2517

sw.bb.2275:                                       ; preds = %if.end.1608
  %1232 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_2276 = getelementptr inbounds %struct.buffer, %struct.buffer* %1232, i32 0, i32 39
  %1233 = load i64, i64* %enable_multibyte_characters_2276, align 8
  %call2277 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2278 = icmp eq i64 %1233, %call2277
  br i1 %cmp2278, label %cond.false.2282, label %cond.true.2280

cond.true.2280:                                   ; preds = %sw.bb.2275
  %1234 = load i64, i64* %from_byte, align 8
  %call2281 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %1234)
  br label %cond.end.2360

cond.false.2282:                                  ; preds = %sw.bb.2275
  br i1 true, label %cond.true.2283, label %cond.false.2303

cond.true.2283:                                   ; preds = %cond.false.2282
  %1235 = load i64, i64* %from_byte, align 8
  %1236 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2284 = getelementptr inbounds %struct.buffer, %struct.buffer* %1236, i32 0, i32 73
  %1237 = load %struct.buffer_text*, %struct.buffer_text** %text2284, align 8
  %gpt_byte2285 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1237, i32 0, i32 3
  %1238 = load i64, i64* %gpt_byte2285, align 8
  %cmp2286 = icmp sge i64 %1235, %1238
  br i1 %cmp2286, label %cond.true.2288, label %cond.false.2291

cond.true.2288:                                   ; preds = %cond.true.2283
  %1239 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2289 = getelementptr inbounds %struct.buffer, %struct.buffer* %1239, i32 0, i32 73
  %1240 = load %struct.buffer_text*, %struct.buffer_text** %text2289, align 8
  %gap_size2290 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1240, i32 0, i32 5
  %1241 = load i64, i64* %gap_size2290, align 8
  br label %cond.end.2292

cond.false.2291:                                  ; preds = %cond.true.2283
  br label %cond.end.2292

cond.end.2292:                                    ; preds = %cond.false.2291, %cond.true.2288
  %cond2293 = phi i64 [ %1241, %cond.true.2288 ], [ 0, %cond.false.2291 ]
  %1242 = load i64, i64* %from_byte, align 8
  %add2294 = add nsw i64 %cond2293, %1242
  %1243 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2295 = getelementptr inbounds %struct.buffer, %struct.buffer* %1243, i32 0, i32 73
  %1244 = load %struct.buffer_text*, %struct.buffer_text** %text2295, align 8
  %beg2296 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1244, i32 0, i32 0
  %1245 = load i8*, i8** %beg2296, align 8
  %add.ptr2297 = getelementptr inbounds i8, i8* %1245, i64 %add2294
  %add.ptr2298 = getelementptr inbounds i8, i8* %add.ptr2297, i64 -1
  %1246 = load i8, i8* %add.ptr2298, align 1
  %conv2299 = zext i8 %1246 to i32
  %add2300 = add i32 %conv2299, 0
  %cmp2301 = icmp ult i32 %add2300, 128
  br i1 %cmp2301, label %cond.true.2323, label %cond.false.2340

cond.false.2303:                                  ; preds = %cond.false.2282
  %1247 = load i64, i64* %from_byte, align 8
  %1248 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2304 = getelementptr inbounds %struct.buffer, %struct.buffer* %1248, i32 0, i32 73
  %1249 = load %struct.buffer_text*, %struct.buffer_text** %text2304, align 8
  %gpt_byte2305 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1249, i32 0, i32 3
  %1250 = load i64, i64* %gpt_byte2305, align 8
  %cmp2306 = icmp sge i64 %1247, %1250
  br i1 %cmp2306, label %cond.true.2308, label %cond.false.2311

cond.true.2308:                                   ; preds = %cond.false.2303
  %1251 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2309 = getelementptr inbounds %struct.buffer, %struct.buffer* %1251, i32 0, i32 73
  %1252 = load %struct.buffer_text*, %struct.buffer_text** %text2309, align 8
  %gap_size2310 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1252, i32 0, i32 5
  %1253 = load i64, i64* %gap_size2310, align 8
  br label %cond.end.2312

cond.false.2311:                                  ; preds = %cond.false.2303
  br label %cond.end.2312

cond.end.2312:                                    ; preds = %cond.false.2311, %cond.true.2308
  %cond2313 = phi i64 [ %1253, %cond.true.2308 ], [ 0, %cond.false.2311 ]
  %1254 = load i64, i64* %from_byte, align 8
  %add2314 = add nsw i64 %cond2313, %1254
  %1255 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2315 = getelementptr inbounds %struct.buffer, %struct.buffer* %1255, i32 0, i32 73
  %1256 = load %struct.buffer_text*, %struct.buffer_text** %text2315, align 8
  %beg2316 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1256, i32 0, i32 0
  %1257 = load i8*, i8** %beg2316, align 8
  %add.ptr2317 = getelementptr inbounds i8, i8* %1257, i64 %add2314
  %add.ptr2318 = getelementptr inbounds i8, i8* %add.ptr2317, i64 -1
  %1258 = load i8, i8* %add.ptr2318, align 1
  %conv2319 = zext i8 %1258 to i64
  %add2320 = add i64 %conv2319, 0
  %cmp2321 = icmp ult i64 %add2320, 128
  br i1 %cmp2321, label %cond.true.2323, label %cond.false.2340

cond.true.2323:                                   ; preds = %cond.end.2312, %cond.end.2292
  %1259 = load i64, i64* %from_byte, align 8
  %1260 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2324 = getelementptr inbounds %struct.buffer, %struct.buffer* %1260, i32 0, i32 73
  %1261 = load %struct.buffer_text*, %struct.buffer_text** %text2324, align 8
  %gpt_byte2325 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1261, i32 0, i32 3
  %1262 = load i64, i64* %gpt_byte2325, align 8
  %cmp2326 = icmp sge i64 %1259, %1262
  br i1 %cmp2326, label %cond.true.2328, label %cond.false.2331

cond.true.2328:                                   ; preds = %cond.true.2323
  %1263 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2329 = getelementptr inbounds %struct.buffer, %struct.buffer* %1263, i32 0, i32 73
  %1264 = load %struct.buffer_text*, %struct.buffer_text** %text2329, align 8
  %gap_size2330 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1264, i32 0, i32 5
  %1265 = load i64, i64* %gap_size2330, align 8
  br label %cond.end.2332

cond.false.2331:                                  ; preds = %cond.true.2323
  br label %cond.end.2332

cond.end.2332:                                    ; preds = %cond.false.2331, %cond.true.2328
  %cond2333 = phi i64 [ %1265, %cond.true.2328 ], [ 0, %cond.false.2331 ]
  %1266 = load i64, i64* %from_byte, align 8
  %add2334 = add nsw i64 %cond2333, %1266
  %1267 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2335 = getelementptr inbounds %struct.buffer, %struct.buffer* %1267, i32 0, i32 73
  %1268 = load %struct.buffer_text*, %struct.buffer_text** %text2335, align 8
  %beg2336 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1268, i32 0, i32 0
  %1269 = load i8*, i8** %beg2336, align 8
  %add.ptr2337 = getelementptr inbounds i8, i8* %1269, i64 %add2334
  %add.ptr2338 = getelementptr inbounds i8, i8* %add.ptr2337, i64 -1
  %1270 = load i8, i8* %add.ptr2338, align 1
  %conv2339 = zext i8 %1270 to i32
  br label %cond.end.2358

cond.false.2340:                                  ; preds = %cond.end.2312, %cond.end.2292
  %1271 = load i64, i64* %from_byte, align 8
  %1272 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2341 = getelementptr inbounds %struct.buffer, %struct.buffer* %1272, i32 0, i32 73
  %1273 = load %struct.buffer_text*, %struct.buffer_text** %text2341, align 8
  %gpt_byte2342 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1273, i32 0, i32 3
  %1274 = load i64, i64* %gpt_byte2342, align 8
  %cmp2343 = icmp sge i64 %1271, %1274
  br i1 %cmp2343, label %cond.true.2345, label %cond.false.2348

cond.true.2345:                                   ; preds = %cond.false.2340
  %1275 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2346 = getelementptr inbounds %struct.buffer, %struct.buffer* %1275, i32 0, i32 73
  %1276 = load %struct.buffer_text*, %struct.buffer_text** %text2346, align 8
  %gap_size2347 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1276, i32 0, i32 5
  %1277 = load i64, i64* %gap_size2347, align 8
  br label %cond.end.2349

cond.false.2348:                                  ; preds = %cond.false.2340
  br label %cond.end.2349

cond.end.2349:                                    ; preds = %cond.false.2348, %cond.true.2345
  %cond2350 = phi i64 [ %1277, %cond.true.2345 ], [ 0, %cond.false.2348 ]
  %1278 = load i64, i64* %from_byte, align 8
  %add2351 = add nsw i64 %cond2350, %1278
  %1279 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2352 = getelementptr inbounds %struct.buffer, %struct.buffer* %1279, i32 0, i32 73
  %1280 = load %struct.buffer_text*, %struct.buffer_text** %text2352, align 8
  %beg2353 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1280, i32 0, i32 0
  %1281 = load i8*, i8** %beg2353, align 8
  %add.ptr2354 = getelementptr inbounds i8, i8* %1281, i64 %add2351
  %add.ptr2355 = getelementptr inbounds i8, i8* %add.ptr2354, i64 -1
  %1282 = load i8, i8* %add.ptr2355, align 1
  %conv2356 = zext i8 %1282 to i32
  %add2357 = add nsw i32 %conv2356, 4194048
  br label %cond.end.2358

cond.end.2358:                                    ; preds = %cond.end.2349, %cond.end.2332
  %cond2359 = phi i32 [ %conv2339, %cond.end.2332 ], [ %add2357, %cond.end.2349 ]
  br label %cond.end.2360

cond.end.2360:                                    ; preds = %cond.end.2358, %cond.true.2280
  %cond2361 = phi i32 [ %call2281, %cond.true.2280 ], [ %cond2359, %cond.end.2358 ]
  store i32 %cond2361, i32* %stringterm, align 4
  br label %while.body.2363

while.body.2363:                                  ; preds = %cond.end.2360, %if.end.2508
  %1283 = load i64, i64* %from.addr, align 8
  %1284 = load i64, i64* %stop, align 8
  %cmp2364 = icmp eq i64 %1283, %1284
  br i1 %cmp2364, label %if.then.2366, label %if.end.2367

if.then.2366:                                     ; preds = %while.body.2363
  br label %lose

if.end.2367:                                      ; preds = %while.body.2363
  br label %do.body.2368

do.body.2368:                                     ; preds = %if.end.2367
  %1285 = load i64, i64* %from.addr, align 8
  %dec2369 = add nsw i64 %1285, -1
  store i64 %dec2369, i64* %from.addr, align 8
  %1286 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_2370 = getelementptr inbounds %struct.buffer, %struct.buffer* %1286, i32 0, i32 39
  %1287 = load i64, i64* %enable_multibyte_characters_2370, align 8
  %call2371 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2372 = icmp eq i64 %1287, %call2371
  br i1 %cmp2372, label %if.then.2374, label %if.else.2376

if.then.2374:                                     ; preds = %do.body.2368
  %1288 = load i64, i64* %from_byte, align 8
  %dec2375 = add nsw i64 %1288, -1
  store i64 %dec2375, i64* %from_byte, align 8
  br label %if.end.2409

if.else.2376:                                     ; preds = %do.body.2368
  br label %do.body.2377

do.body.2377:                                     ; preds = %if.else.2376
  %1289 = load i64, i64* %from_byte, align 8
  %dec2379 = add nsw i64 %1289, -1
  store i64 %dec2379, i64* %from_byte, align 8
  %1290 = load i64, i64* %from_byte, align 8
  %1291 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2380 = getelementptr inbounds %struct.buffer, %struct.buffer* %1291, i32 0, i32 73
  %1292 = load %struct.buffer_text*, %struct.buffer_text** %text2380, align 8
  %gpt_byte2381 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1292, i32 0, i32 3
  %1293 = load i64, i64* %gpt_byte2381, align 8
  %cmp2382 = icmp slt i64 %1290, %1293
  br i1 %cmp2382, label %if.then.2384, label %if.else.2389

if.then.2384:                                     ; preds = %do.body.2377
  %1294 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2385 = getelementptr inbounds %struct.buffer, %struct.buffer* %1294, i32 0, i32 73
  %1295 = load %struct.buffer_text*, %struct.buffer_text** %text2385, align 8
  %beg2386 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1295, i32 0, i32 0
  %1296 = load i8*, i8** %beg2386, align 8
  %1297 = load i64, i64* %from_byte, align 8
  %add.ptr2387 = getelementptr inbounds i8, i8* %1296, i64 %1297
  %add.ptr2388 = getelementptr inbounds i8, i8* %add.ptr2387, i64 -1
  store i8* %add.ptr2388, i8** %chp2378, align 8
  br label %if.end.2397

if.else.2389:                                     ; preds = %do.body.2377
  %1298 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2390 = getelementptr inbounds %struct.buffer, %struct.buffer* %1298, i32 0, i32 73
  %1299 = load %struct.buffer_text*, %struct.buffer_text** %text2390, align 8
  %beg2391 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1299, i32 0, i32 0
  %1300 = load i8*, i8** %beg2391, align 8
  %1301 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2392 = getelementptr inbounds %struct.buffer, %struct.buffer* %1301, i32 0, i32 73
  %1302 = load %struct.buffer_text*, %struct.buffer_text** %text2392, align 8
  %gap_size2393 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1302, i32 0, i32 5
  %1303 = load i64, i64* %gap_size2393, align 8
  %add.ptr2394 = getelementptr inbounds i8, i8* %1300, i64 %1303
  %1304 = load i64, i64* %from_byte, align 8
  %add.ptr2395 = getelementptr inbounds i8, i8* %add.ptr2394, i64 %1304
  %add.ptr2396 = getelementptr inbounds i8, i8* %add.ptr2395, i64 -1
  store i8* %add.ptr2396, i8** %chp2378, align 8
  br label %if.end.2397

if.end.2397:                                      ; preds = %if.else.2389, %if.then.2384
  br label %while.cond.2398

while.cond.2398:                                  ; preds = %while.body.2404, %if.end.2397
  %1305 = load i8*, i8** %chp2378, align 8
  %1306 = load i8, i8* %1305, align 1
  %conv2399 = zext i8 %1306 to i32
  %and2400 = and i32 %conv2399, 192
  %cmp2401 = icmp ne i32 %and2400, 128
  %lnot2403 = xor i1 %cmp2401, true
  br i1 %lnot2403, label %while.body.2404, label %while.end.2407

while.body.2404:                                  ; preds = %while.cond.2398
  %1307 = load i8*, i8** %chp2378, align 8
  %incdec.ptr2405 = getelementptr inbounds i8, i8* %1307, i32 -1
  store i8* %incdec.ptr2405, i8** %chp2378, align 8
  %1308 = load i64, i64* %from_byte, align 8
  %dec2406 = add nsw i64 %1308, -1
  store i64 %dec2406, i64* %from_byte, align 8
  br label %while.cond.2398

while.end.2407:                                   ; preds = %while.cond.2398
  br label %do.end.2408

do.end.2408:                                      ; preds = %while.end.2407
  br label %if.end.2409

if.end.2409:                                      ; preds = %do.end.2408, %if.then.2374
  br label %do.end.2410

do.end.2410:                                      ; preds = %if.end.2409
  %1309 = load i64, i64* %from.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_BACKWARD(i64 %1309)
  %1310 = load i64, i64* %from.addr, align 8
  %1311 = load i64, i64* %from_byte, align 8
  %call2411 = call zeroext i1 @char_quoted(i64 %1310, i64 %1311)
  br i1 %call2411, label %if.end.2508, label %if.then.2412

if.then.2412:                                     ; preds = %do.end.2410
  %1312 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_2413 = getelementptr inbounds %struct.buffer, %struct.buffer* %1312, i32 0, i32 39
  %1313 = load i64, i64* %enable_multibyte_characters_2413, align 8
  %call2414 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2415 = icmp eq i64 %1313, %call2414
  br i1 %cmp2415, label %cond.false.2419, label %cond.true.2417

cond.true.2417:                                   ; preds = %if.then.2412
  %1314 = load i64, i64* %from_byte, align 8
  %call2418 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %1314)
  br label %cond.end.2497

cond.false.2419:                                  ; preds = %if.then.2412
  br i1 true, label %cond.true.2420, label %cond.false.2440

cond.true.2420:                                   ; preds = %cond.false.2419
  %1315 = load i64, i64* %from_byte, align 8
  %1316 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2421 = getelementptr inbounds %struct.buffer, %struct.buffer* %1316, i32 0, i32 73
  %1317 = load %struct.buffer_text*, %struct.buffer_text** %text2421, align 8
  %gpt_byte2422 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1317, i32 0, i32 3
  %1318 = load i64, i64* %gpt_byte2422, align 8
  %cmp2423 = icmp sge i64 %1315, %1318
  br i1 %cmp2423, label %cond.true.2425, label %cond.false.2428

cond.true.2425:                                   ; preds = %cond.true.2420
  %1319 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2426 = getelementptr inbounds %struct.buffer, %struct.buffer* %1319, i32 0, i32 73
  %1320 = load %struct.buffer_text*, %struct.buffer_text** %text2426, align 8
  %gap_size2427 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1320, i32 0, i32 5
  %1321 = load i64, i64* %gap_size2427, align 8
  br label %cond.end.2429

cond.false.2428:                                  ; preds = %cond.true.2420
  br label %cond.end.2429

cond.end.2429:                                    ; preds = %cond.false.2428, %cond.true.2425
  %cond2430 = phi i64 [ %1321, %cond.true.2425 ], [ 0, %cond.false.2428 ]
  %1322 = load i64, i64* %from_byte, align 8
  %add2431 = add nsw i64 %cond2430, %1322
  %1323 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2432 = getelementptr inbounds %struct.buffer, %struct.buffer* %1323, i32 0, i32 73
  %1324 = load %struct.buffer_text*, %struct.buffer_text** %text2432, align 8
  %beg2433 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1324, i32 0, i32 0
  %1325 = load i8*, i8** %beg2433, align 8
  %add.ptr2434 = getelementptr inbounds i8, i8* %1325, i64 %add2431
  %add.ptr2435 = getelementptr inbounds i8, i8* %add.ptr2434, i64 -1
  %1326 = load i8, i8* %add.ptr2435, align 1
  %conv2436 = zext i8 %1326 to i32
  %add2437 = add i32 %conv2436, 0
  %cmp2438 = icmp ult i32 %add2437, 128
  br i1 %cmp2438, label %cond.true.2460, label %cond.false.2477

cond.false.2440:                                  ; preds = %cond.false.2419
  %1327 = load i64, i64* %from_byte, align 8
  %1328 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2441 = getelementptr inbounds %struct.buffer, %struct.buffer* %1328, i32 0, i32 73
  %1329 = load %struct.buffer_text*, %struct.buffer_text** %text2441, align 8
  %gpt_byte2442 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1329, i32 0, i32 3
  %1330 = load i64, i64* %gpt_byte2442, align 8
  %cmp2443 = icmp sge i64 %1327, %1330
  br i1 %cmp2443, label %cond.true.2445, label %cond.false.2448

cond.true.2445:                                   ; preds = %cond.false.2440
  %1331 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2446 = getelementptr inbounds %struct.buffer, %struct.buffer* %1331, i32 0, i32 73
  %1332 = load %struct.buffer_text*, %struct.buffer_text** %text2446, align 8
  %gap_size2447 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1332, i32 0, i32 5
  %1333 = load i64, i64* %gap_size2447, align 8
  br label %cond.end.2449

cond.false.2448:                                  ; preds = %cond.false.2440
  br label %cond.end.2449

cond.end.2449:                                    ; preds = %cond.false.2448, %cond.true.2445
  %cond2450 = phi i64 [ %1333, %cond.true.2445 ], [ 0, %cond.false.2448 ]
  %1334 = load i64, i64* %from_byte, align 8
  %add2451 = add nsw i64 %cond2450, %1334
  %1335 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2452 = getelementptr inbounds %struct.buffer, %struct.buffer* %1335, i32 0, i32 73
  %1336 = load %struct.buffer_text*, %struct.buffer_text** %text2452, align 8
  %beg2453 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1336, i32 0, i32 0
  %1337 = load i8*, i8** %beg2453, align 8
  %add.ptr2454 = getelementptr inbounds i8, i8* %1337, i64 %add2451
  %add.ptr2455 = getelementptr inbounds i8, i8* %add.ptr2454, i64 -1
  %1338 = load i8, i8* %add.ptr2455, align 1
  %conv2456 = zext i8 %1338 to i64
  %add2457 = add i64 %conv2456, 0
  %cmp2458 = icmp ult i64 %add2457, 128
  br i1 %cmp2458, label %cond.true.2460, label %cond.false.2477

cond.true.2460:                                   ; preds = %cond.end.2449, %cond.end.2429
  %1339 = load i64, i64* %from_byte, align 8
  %1340 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2461 = getelementptr inbounds %struct.buffer, %struct.buffer* %1340, i32 0, i32 73
  %1341 = load %struct.buffer_text*, %struct.buffer_text** %text2461, align 8
  %gpt_byte2462 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1341, i32 0, i32 3
  %1342 = load i64, i64* %gpt_byte2462, align 8
  %cmp2463 = icmp sge i64 %1339, %1342
  br i1 %cmp2463, label %cond.true.2465, label %cond.false.2468

cond.true.2465:                                   ; preds = %cond.true.2460
  %1343 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2466 = getelementptr inbounds %struct.buffer, %struct.buffer* %1343, i32 0, i32 73
  %1344 = load %struct.buffer_text*, %struct.buffer_text** %text2466, align 8
  %gap_size2467 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1344, i32 0, i32 5
  %1345 = load i64, i64* %gap_size2467, align 8
  br label %cond.end.2469

cond.false.2468:                                  ; preds = %cond.true.2460
  br label %cond.end.2469

cond.end.2469:                                    ; preds = %cond.false.2468, %cond.true.2465
  %cond2470 = phi i64 [ %1345, %cond.true.2465 ], [ 0, %cond.false.2468 ]
  %1346 = load i64, i64* %from_byte, align 8
  %add2471 = add nsw i64 %cond2470, %1346
  %1347 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2472 = getelementptr inbounds %struct.buffer, %struct.buffer* %1347, i32 0, i32 73
  %1348 = load %struct.buffer_text*, %struct.buffer_text** %text2472, align 8
  %beg2473 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1348, i32 0, i32 0
  %1349 = load i8*, i8** %beg2473, align 8
  %add.ptr2474 = getelementptr inbounds i8, i8* %1349, i64 %add2471
  %add.ptr2475 = getelementptr inbounds i8, i8* %add.ptr2474, i64 -1
  %1350 = load i8, i8* %add.ptr2475, align 1
  %conv2476 = zext i8 %1350 to i32
  br label %cond.end.2495

cond.false.2477:                                  ; preds = %cond.end.2449, %cond.end.2429
  %1351 = load i64, i64* %from_byte, align 8
  %1352 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2478 = getelementptr inbounds %struct.buffer, %struct.buffer* %1352, i32 0, i32 73
  %1353 = load %struct.buffer_text*, %struct.buffer_text** %text2478, align 8
  %gpt_byte2479 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1353, i32 0, i32 3
  %1354 = load i64, i64* %gpt_byte2479, align 8
  %cmp2480 = icmp sge i64 %1351, %1354
  br i1 %cmp2480, label %cond.true.2482, label %cond.false.2485

cond.true.2482:                                   ; preds = %cond.false.2477
  %1355 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2483 = getelementptr inbounds %struct.buffer, %struct.buffer* %1355, i32 0, i32 73
  %1356 = load %struct.buffer_text*, %struct.buffer_text** %text2483, align 8
  %gap_size2484 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1356, i32 0, i32 5
  %1357 = load i64, i64* %gap_size2484, align 8
  br label %cond.end.2486

cond.false.2485:                                  ; preds = %cond.false.2477
  br label %cond.end.2486

cond.end.2486:                                    ; preds = %cond.false.2485, %cond.true.2482
  %cond2487 = phi i64 [ %1357, %cond.true.2482 ], [ 0, %cond.false.2485 ]
  %1358 = load i64, i64* %from_byte, align 8
  %add2488 = add nsw i64 %cond2487, %1358
  %1359 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2489 = getelementptr inbounds %struct.buffer, %struct.buffer* %1359, i32 0, i32 73
  %1360 = load %struct.buffer_text*, %struct.buffer_text** %text2489, align 8
  %beg2490 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1360, i32 0, i32 0
  %1361 = load i8*, i8** %beg2490, align 8
  %add.ptr2491 = getelementptr inbounds i8, i8* %1361, i64 %add2488
  %add.ptr2492 = getelementptr inbounds i8, i8* %add.ptr2491, i64 -1
  %1362 = load i8, i8* %add.ptr2492, align 1
  %conv2493 = zext i8 %1362 to i32
  %add2494 = add nsw i32 %conv2493, 4194048
  br label %cond.end.2495

cond.end.2495:                                    ; preds = %cond.end.2486, %cond.end.2469
  %cond2496 = phi i32 [ %conv2476, %cond.end.2469 ], [ %add2494, %cond.end.2486 ]
  br label %cond.end.2497

cond.end.2497:                                    ; preds = %cond.end.2495, %cond.true.2417
  %cond2498 = phi i32 [ %call2418, %cond.true.2417 ], [ %cond2496, %cond.end.2495 ]
  store i32 %cond2498, i32* %c, align 4
  %1363 = load i32, i32* %c, align 4
  %1364 = load i32, i32* %stringterm, align 4
  %cmp2499 = icmp eq i32 %1363, %1364
  br i1 %cmp2499, label %land.lhs.true.2501, label %if.end.2507

land.lhs.true.2501:                               ; preds = %cond.end.2497
  %1365 = load i32, i32* %c, align 4
  %1366 = load i8, i8* %multibyte_symbol_p, align 1
  %tobool2502 = trunc i8 %1366 to i1
  %call2503 = call i32 @syntax_multibyte(i32 %1365, i1 zeroext %tobool2502)
  %cmp2504 = icmp eq i32 %call2503, 7
  br i1 %cmp2504, label %if.then.2506, label %if.end.2507

if.then.2506:                                     ; preds = %land.lhs.true.2501
  br label %while.end.2509

if.end.2507:                                      ; preds = %land.lhs.true.2501, %cond.end.2497
  br label %if.end.2508

if.end.2508:                                      ; preds = %if.end.2507, %do.end.2410
  br label %while.body.2363

while.end.2509:                                   ; preds = %if.then.2506
  %1367 = load i64, i64* %depth.addr, align 8
  %tobool2510 = icmp ne i64 %1367, 0
  br i1 %tobool2510, label %if.end.2515, label %land.lhs.true.2511

land.lhs.true.2511:                               ; preds = %while.end.2509
  %1368 = load i8, i8* %sexpflag.addr, align 1
  %tobool2512 = trunc i8 %1368 to i1
  br i1 %tobool2512, label %if.then.2514, label %if.end.2515

if.then.2514:                                     ; preds = %land.lhs.true.2511
  br label %done2

if.end.2515:                                      ; preds = %land.lhs.true.2511, %while.end.2509
  br label %sw.epilog.2517

sw.default.2516:                                  ; preds = %if.end.1608
  br label %sw.epilog.2517

sw.epilog.2517:                                   ; preds = %sw.default.2516, %if.end.2515, %if.end.2274, %if.end.2119, %if.then.2112, %if.end.2109, %if.end.2094, %if.then.1942, %if.then.1613
  br label %while.cond.1256

while.end.2518:                                   ; preds = %while.cond.1256
  %1369 = load i64, i64* %depth.addr, align 8
  %tobool2519 = icmp ne i64 %1369, 0
  br i1 %tobool2519, label %if.then.2520, label %if.end.2521

if.then.2520:                                     ; preds = %while.end.2518
  br label %lose

if.end.2521:                                      ; preds = %while.end.2518
  store i8 0, i8* @immediate_quit, align 1
  %call2522 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call2522, i64* %retval
  br label %return

done2:                                            ; preds = %if.then.2514, %if.then.2273, %if.then.2098, %if.then.2093, %while.end.1939, %sw.default.1893, %if.then.1749
  %1370 = load i64, i64* %count.addr, align 8
  %inc2523 = add nsw i64 %1370, 1
  store i64 %inc2523, i64* %count.addr, align 8
  br label %while.cond.1252

while.end.2524:                                   ; preds = %while.cond.1252
  store i8 0, i8* @immediate_quit, align 1
  %1371 = load i64, i64* %from.addr, align 8
  %call2525 = call i64 @make_natnum(i64 %1371)
  store i64 %call2525, i64* %val, align 8
  %1372 = load i64, i64* %val, align 8
  store i64 %1372, i64* %retval
  br label %return

lose:                                             ; preds = %if.then.2520, %if.then.2366, %if.then.2125, %if.then.1247, %if.then.955, %if.end.629, %if.then.555, %if.then.339
  %call2526 = call i64 @builtin_lisp_symbol(i32 828)
  %call2527 = call i64 @build_string(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.62, i32 0, i32 0))
  %1373 = load i64, i64* %last_good, align 8
  %shl2528 = shl i64 %1373, 2
  %add2529 = add i64 %shl2528, 2
  %1374 = load i64, i64* %from.addr, align 8
  %shl2530 = shl i64 %1374, 2
  %add2531 = add i64 %shl2530, 2
  call void @xsignal3(i64 %call2526, i64 %call2527, i64 %add2529, i64 %add2531) #5
  unreachable

return:                                           ; preds = %while.end.2524, %if.end.2521, %if.end.1248
  %1375 = load i64, i64* %retval
  ret i64 %1375
}

; Function Attrs: nounwind uwtable
define i64 @Fscan_sexps(i64 %from, i64 %count) #0 {
entry:
  %from.addr = alloca i64, align 8
  %count.addr = alloca i64, align 8
  store i64 %from, i64* %from.addr, align 8
  store i64 %count, i64* %count.addr, align 8
  %0 = load i64, i64* %from.addr, align 8
  %and = and i64 %0, 7
  %conv = trunc i64 %and to i32
  %and1 = and i32 %conv, -5
  %cmp = icmp eq i32 %and1, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call i64 @builtin_lisp_symbol(i32 559)
  %1 = load i64, i64* %from.addr, align 8
  %2 = call i64 @wrong_type_argument(i64 %call, i64 %1) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %3, %cond.true
  %4 = load i64, i64* %count.addr, align 8
  %and3 = and i64 %4, 7
  %conv4 = trunc i64 %and3 to i32
  %and5 = and i32 %conv4, -5
  %cmp6 = icmp eq i32 %and5, 2
  br i1 %cmp6, label %cond.true.8, label %cond.false.9

cond.true.8:                                      ; preds = %cond.end
  br label %cond.end.11

cond.false.9:                                     ; preds = %cond.end
  %call10 = call i64 @builtin_lisp_symbol(i32 559)
  %5 = load i64, i64* %count.addr, align 8
  %6 = call i64 @wrong_type_argument(i64 %call10, i64 %5) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end.11

cond.end.11:                                      ; preds = %7, %cond.true.8
  %8 = load i64, i64* %from.addr, align 8
  %shr = ashr i64 %8, 2
  %9 = load i64, i64* %count.addr, align 8
  %shr12 = ashr i64 %9, 2
  %call13 = call i64 @scan_lists(i64 %shr, i64 %shr12, i64 0, i1 zeroext true)
  ret i64 %call13
}

; Function Attrs: nounwind uwtable
define i64 @Fbackward_prefix_chars() #0 {
entry:
  %retval = alloca i64, align 8
  %beg = alloca i64, align 8
  %opoint = alloca i64, align 8
  %opoint_byte = alloca i64, align 8
  %pos = alloca i64, align 8
  %pos_byte = alloca i64, align 8
  %c = alloca i32, align 4
  %chp = alloca i8*, align 8
  %chp134 = alloca i8*, align 8
  %0 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i32 0, i32 77
  %1 = load i64, i64* %begv, align 8
  store i64 %1, i64* %beg, align 8
  %2 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt = getelementptr inbounds %struct.buffer, %struct.buffer* %2, i32 0, i32 75
  %3 = load i64, i64* %pt, align 8
  %add = add nsw i64 %3, 0
  store i64 %add, i64* %opoint, align 8
  %4 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %4, i32 0, i32 76
  %5 = load i64, i64* %pt_byte, align 8
  %add1 = add nsw i64 %5, 0
  store i64 %add1, i64* %opoint_byte, align 8
  %6 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt2 = getelementptr inbounds %struct.buffer, %struct.buffer* %6, i32 0, i32 75
  %7 = load i64, i64* %pt2, align 8
  %add3 = add nsw i64 %7, 0
  store i64 %add3, i64* %pos, align 8
  %8 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte4 = getelementptr inbounds %struct.buffer, %struct.buffer* %8, i32 0, i32 76
  %9 = load i64, i64* %pt_byte4, align 8
  %add5 = add nsw i64 %9, 0
  store i64 %add5, i64* %pos_byte, align 8
  %10 = load i64, i64* %pos, align 8
  %11 = load i64, i64* %beg, align 8
  %cmp = icmp sle i64 %10, %11
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %12 = load i64, i64* %opoint, align 8
  %13 = load i64, i64* %opoint_byte, align 8
  call void @set_point_both(i64 %12, i64 %13)
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %14 = load i64, i64* %pos, align 8
  call void @SETUP_SYNTAX_TABLE(i64 %14, i64 -1)
  br label %do.body

do.body:                                          ; preds = %if.end
  %15 = load i64, i64* %pos, align 8
  %dec = add nsw i64 %15, -1
  store i64 %dec, i64* %pos, align 8
  %16 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %16, i32 0, i32 39
  %17 = load i64, i64* %enable_multibyte_characters_, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp7 = icmp eq i64 %17, %call6
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  %18 = load i64, i64* %pos_byte, align 8
  %dec9 = add nsw i64 %18, -1
  store i64 %dec9, i64* %pos_byte, align 8
  br label %if.end.28

if.else:                                          ; preds = %do.body
  br label %do.body.10

do.body.10:                                       ; preds = %if.else
  %19 = load i64, i64* %pos_byte, align 8
  %dec11 = add nsw i64 %19, -1
  store i64 %dec11, i64* %pos_byte, align 8
  %20 = load i64, i64* %pos_byte, align 8
  %21 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %21, i32 0, i32 73
  %22 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %22, i32 0, i32 3
  %23 = load i64, i64* %gpt_byte, align 8
  %cmp12 = icmp slt i64 %20, %23
  br i1 %cmp12, label %if.then.13, label %if.else.17

if.then.13:                                       ; preds = %do.body.10
  %24 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text14 = getelementptr inbounds %struct.buffer, %struct.buffer* %24, i32 0, i32 73
  %25 = load %struct.buffer_text*, %struct.buffer_text** %text14, align 8
  %beg15 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %25, i32 0, i32 0
  %26 = load i8*, i8** %beg15, align 8
  %27 = load i64, i64* %pos_byte, align 8
  %add.ptr = getelementptr inbounds i8, i8* %26, i64 %27
  %add.ptr16 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  store i8* %add.ptr16, i8** %chp, align 8
  br label %if.end.24

if.else.17:                                       ; preds = %do.body.10
  %28 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text18 = getelementptr inbounds %struct.buffer, %struct.buffer* %28, i32 0, i32 73
  %29 = load %struct.buffer_text*, %struct.buffer_text** %text18, align 8
  %beg19 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %29, i32 0, i32 0
  %30 = load i8*, i8** %beg19, align 8
  %31 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text20 = getelementptr inbounds %struct.buffer, %struct.buffer* %31, i32 0, i32 73
  %32 = load %struct.buffer_text*, %struct.buffer_text** %text20, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %32, i32 0, i32 5
  %33 = load i64, i64* %gap_size, align 8
  %add.ptr21 = getelementptr inbounds i8, i8* %30, i64 %33
  %34 = load i64, i64* %pos_byte, align 8
  %add.ptr22 = getelementptr inbounds i8, i8* %add.ptr21, i64 %34
  %add.ptr23 = getelementptr inbounds i8, i8* %add.ptr22, i64 -1
  store i8* %add.ptr23, i8** %chp, align 8
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.17, %if.then.13
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end.24
  %35 = load i8*, i8** %chp, align 8
  %36 = load i8, i8* %35, align 1
  %conv = zext i8 %36 to i32
  %and = and i32 %conv, 192
  %cmp25 = icmp ne i32 %and, 128
  %lnot = xor i1 %cmp25, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %37 = load i8*, i8** %chp, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %37, i32 -1
  store i8* %incdec.ptr, i8** %chp, align 8
  %38 = load i64, i64* %pos_byte, align 8
  %dec27 = add nsw i64 %38, -1
  store i64 %dec27, i64* %pos_byte, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %do.end

do.end:                                           ; preds = %while.end
  br label %if.end.28

if.end.28:                                        ; preds = %do.end, %if.then.8
  br label %do.end.29

do.end.29:                                        ; preds = %if.end.28
  br label %while.cond.30

while.cond.30:                                    ; preds = %do.end.166, %do.end.29
  %39 = load i64, i64* %pos, align 8
  %40 = load i64, i64* %pos_byte, align 8
  %call31 = call zeroext i1 @char_quoted(i64 %39, i64 %40)
  br i1 %call31, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %while.cond.30
  %41 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_32 = getelementptr inbounds %struct.buffer, %struct.buffer* %41, i32 0, i32 39
  %42 = load i64, i64* %enable_multibyte_characters_32, align 8
  %call33 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp34 = icmp eq i64 %42, %call33
  br i1 %cmp34, label %cond.false, label %cond.true

cond.true:                                        ; preds = %land.rhs
  %43 = load i64, i64* %pos_byte, align 8
  %call36 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %43)
  br label %cond.end.112

cond.false:                                       ; preds = %land.rhs
  br i1 true, label %cond.true.37, label %cond.false.55

cond.true.37:                                     ; preds = %cond.false
  %44 = load i64, i64* %pos_byte, align 8
  %45 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text38 = getelementptr inbounds %struct.buffer, %struct.buffer* %45, i32 0, i32 73
  %46 = load %struct.buffer_text*, %struct.buffer_text** %text38, align 8
  %gpt_byte39 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %46, i32 0, i32 3
  %47 = load i64, i64* %gpt_byte39, align 8
  %cmp40 = icmp sge i64 %44, %47
  br i1 %cmp40, label %cond.true.42, label %cond.false.45

cond.true.42:                                     ; preds = %cond.true.37
  %48 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text43 = getelementptr inbounds %struct.buffer, %struct.buffer* %48, i32 0, i32 73
  %49 = load %struct.buffer_text*, %struct.buffer_text** %text43, align 8
  %gap_size44 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %49, i32 0, i32 5
  %50 = load i64, i64* %gap_size44, align 8
  br label %cond.end

cond.false.45:                                    ; preds = %cond.true.37
  br label %cond.end

cond.end:                                         ; preds = %cond.false.45, %cond.true.42
  %cond = phi i64 [ %50, %cond.true.42 ], [ 0, %cond.false.45 ]
  %51 = load i64, i64* %pos_byte, align 8
  %add46 = add nsw i64 %cond, %51
  %52 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text47 = getelementptr inbounds %struct.buffer, %struct.buffer* %52, i32 0, i32 73
  %53 = load %struct.buffer_text*, %struct.buffer_text** %text47, align 8
  %beg48 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %53, i32 0, i32 0
  %54 = load i8*, i8** %beg48, align 8
  %add.ptr49 = getelementptr inbounds i8, i8* %54, i64 %add46
  %add.ptr50 = getelementptr inbounds i8, i8* %add.ptr49, i64 -1
  %55 = load i8, i8* %add.ptr50, align 1
  %conv51 = zext i8 %55 to i32
  %add52 = add i32 %conv51, 0
  %cmp53 = icmp ult i32 %add52, 128
  br i1 %cmp53, label %cond.true.75, label %cond.false.92

cond.false.55:                                    ; preds = %cond.false
  %56 = load i64, i64* %pos_byte, align 8
  %57 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text56 = getelementptr inbounds %struct.buffer, %struct.buffer* %57, i32 0, i32 73
  %58 = load %struct.buffer_text*, %struct.buffer_text** %text56, align 8
  %gpt_byte57 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %58, i32 0, i32 3
  %59 = load i64, i64* %gpt_byte57, align 8
  %cmp58 = icmp sge i64 %56, %59
  br i1 %cmp58, label %cond.true.60, label %cond.false.63

cond.true.60:                                     ; preds = %cond.false.55
  %60 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text61 = getelementptr inbounds %struct.buffer, %struct.buffer* %60, i32 0, i32 73
  %61 = load %struct.buffer_text*, %struct.buffer_text** %text61, align 8
  %gap_size62 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %61, i32 0, i32 5
  %62 = load i64, i64* %gap_size62, align 8
  br label %cond.end.64

cond.false.63:                                    ; preds = %cond.false.55
  br label %cond.end.64

cond.end.64:                                      ; preds = %cond.false.63, %cond.true.60
  %cond65 = phi i64 [ %62, %cond.true.60 ], [ 0, %cond.false.63 ]
  %63 = load i64, i64* %pos_byte, align 8
  %add66 = add nsw i64 %cond65, %63
  %64 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text67 = getelementptr inbounds %struct.buffer, %struct.buffer* %64, i32 0, i32 73
  %65 = load %struct.buffer_text*, %struct.buffer_text** %text67, align 8
  %beg68 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %65, i32 0, i32 0
  %66 = load i8*, i8** %beg68, align 8
  %add.ptr69 = getelementptr inbounds i8, i8* %66, i64 %add66
  %add.ptr70 = getelementptr inbounds i8, i8* %add.ptr69, i64 -1
  %67 = load i8, i8* %add.ptr70, align 1
  %conv71 = zext i8 %67 to i64
  %add72 = add i64 %conv71, 0
  %cmp73 = icmp ult i64 %add72, 128
  br i1 %cmp73, label %cond.true.75, label %cond.false.92

cond.true.75:                                     ; preds = %cond.end.64, %cond.end
  %68 = load i64, i64* %pos_byte, align 8
  %69 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text76 = getelementptr inbounds %struct.buffer, %struct.buffer* %69, i32 0, i32 73
  %70 = load %struct.buffer_text*, %struct.buffer_text** %text76, align 8
  %gpt_byte77 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %70, i32 0, i32 3
  %71 = load i64, i64* %gpt_byte77, align 8
  %cmp78 = icmp sge i64 %68, %71
  br i1 %cmp78, label %cond.true.80, label %cond.false.83

cond.true.80:                                     ; preds = %cond.true.75
  %72 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text81 = getelementptr inbounds %struct.buffer, %struct.buffer* %72, i32 0, i32 73
  %73 = load %struct.buffer_text*, %struct.buffer_text** %text81, align 8
  %gap_size82 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %73, i32 0, i32 5
  %74 = load i64, i64* %gap_size82, align 8
  br label %cond.end.84

cond.false.83:                                    ; preds = %cond.true.75
  br label %cond.end.84

cond.end.84:                                      ; preds = %cond.false.83, %cond.true.80
  %cond85 = phi i64 [ %74, %cond.true.80 ], [ 0, %cond.false.83 ]
  %75 = load i64, i64* %pos_byte, align 8
  %add86 = add nsw i64 %cond85, %75
  %76 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text87 = getelementptr inbounds %struct.buffer, %struct.buffer* %76, i32 0, i32 73
  %77 = load %struct.buffer_text*, %struct.buffer_text** %text87, align 8
  %beg88 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %77, i32 0, i32 0
  %78 = load i8*, i8** %beg88, align 8
  %add.ptr89 = getelementptr inbounds i8, i8* %78, i64 %add86
  %add.ptr90 = getelementptr inbounds i8, i8* %add.ptr89, i64 -1
  %79 = load i8, i8* %add.ptr90, align 1
  %conv91 = zext i8 %79 to i32
  br label %cond.end.110

cond.false.92:                                    ; preds = %cond.end.64, %cond.end
  %80 = load i64, i64* %pos_byte, align 8
  %81 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text93 = getelementptr inbounds %struct.buffer, %struct.buffer* %81, i32 0, i32 73
  %82 = load %struct.buffer_text*, %struct.buffer_text** %text93, align 8
  %gpt_byte94 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %82, i32 0, i32 3
  %83 = load i64, i64* %gpt_byte94, align 8
  %cmp95 = icmp sge i64 %80, %83
  br i1 %cmp95, label %cond.true.97, label %cond.false.100

cond.true.97:                                     ; preds = %cond.false.92
  %84 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text98 = getelementptr inbounds %struct.buffer, %struct.buffer* %84, i32 0, i32 73
  %85 = load %struct.buffer_text*, %struct.buffer_text** %text98, align 8
  %gap_size99 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %85, i32 0, i32 5
  %86 = load i64, i64* %gap_size99, align 8
  br label %cond.end.101

cond.false.100:                                   ; preds = %cond.false.92
  br label %cond.end.101

cond.end.101:                                     ; preds = %cond.false.100, %cond.true.97
  %cond102 = phi i64 [ %86, %cond.true.97 ], [ 0, %cond.false.100 ]
  %87 = load i64, i64* %pos_byte, align 8
  %add103 = add nsw i64 %cond102, %87
  %88 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text104 = getelementptr inbounds %struct.buffer, %struct.buffer* %88, i32 0, i32 73
  %89 = load %struct.buffer_text*, %struct.buffer_text** %text104, align 8
  %beg105 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %89, i32 0, i32 0
  %90 = load i8*, i8** %beg105, align 8
  %add.ptr106 = getelementptr inbounds i8, i8* %90, i64 %add103
  %add.ptr107 = getelementptr inbounds i8, i8* %add.ptr106, i64 -1
  %91 = load i8, i8* %add.ptr107, align 1
  %conv108 = zext i8 %91 to i32
  %add109 = add nsw i32 %conv108, 4194048
  br label %cond.end.110

cond.end.110:                                     ; preds = %cond.end.101, %cond.end.84
  %cond111 = phi i32 [ %conv91, %cond.end.84 ], [ %add109, %cond.end.101 ]
  br label %cond.end.112

cond.end.112:                                     ; preds = %cond.end.110, %cond.true
  %cond113 = phi i32 [ %call36, %cond.true ], [ %cond111, %cond.end.110 ]
  store i32 %cond113, i32* %c, align 4
  %92 = load i32, i32* %c, align 4
  %call114 = call i32 @syntax_property(i32 %92, i1 zeroext true)
  %cmp115 = icmp eq i32 %call114, 6
  br i1 %cmp115, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %cond.end.112
  %93 = load i32, i32* %c, align 4
  %call117 = call zeroext i1 @syntax_prefix_flag_p(i32 %93)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %cond.end.112
  %94 = phi i1 [ true, %cond.end.112 ], [ %call117, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %while.cond.30
  %95 = phi i1 [ false, %while.cond.30 ], [ %94, %lor.end ]
  br i1 %95, label %while.body.119, label %while.end.167

while.body.119:                                   ; preds = %land.end
  %96 = load i64, i64* %pos, align 8
  store i64 %96, i64* %opoint, align 8
  %97 = load i64, i64* %pos_byte, align 8
  store i64 %97, i64* %opoint_byte, align 8
  %98 = load i64, i64* %pos, align 8
  %99 = load i64, i64* %beg, align 8
  %cmp120 = icmp sle i64 %98, %99
  br i1 %cmp120, label %if.then.122, label %if.end.123

if.then.122:                                      ; preds = %while.body.119
  br label %while.end.167

if.end.123:                                       ; preds = %while.body.119
  br label %do.body.124

do.body.124:                                      ; preds = %if.end.123
  %100 = load i64, i64* %pos, align 8
  %dec125 = add nsw i64 %100, -1
  store i64 %dec125, i64* %pos, align 8
  %101 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_126 = getelementptr inbounds %struct.buffer, %struct.buffer* %101, i32 0, i32 39
  %102 = load i64, i64* %enable_multibyte_characters_126, align 8
  %call127 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp128 = icmp eq i64 %102, %call127
  br i1 %cmp128, label %if.then.130, label %if.else.132

if.then.130:                                      ; preds = %do.body.124
  %103 = load i64, i64* %pos_byte, align 8
  %dec131 = add nsw i64 %103, -1
  store i64 %dec131, i64* %pos_byte, align 8
  br label %if.end.165

if.else.132:                                      ; preds = %do.body.124
  br label %do.body.133

do.body.133:                                      ; preds = %if.else.132
  %104 = load i64, i64* %pos_byte, align 8
  %dec135 = add nsw i64 %104, -1
  store i64 %dec135, i64* %pos_byte, align 8
  %105 = load i64, i64* %pos_byte, align 8
  %106 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text136 = getelementptr inbounds %struct.buffer, %struct.buffer* %106, i32 0, i32 73
  %107 = load %struct.buffer_text*, %struct.buffer_text** %text136, align 8
  %gpt_byte137 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %107, i32 0, i32 3
  %108 = load i64, i64* %gpt_byte137, align 8
  %cmp138 = icmp slt i64 %105, %108
  br i1 %cmp138, label %if.then.140, label %if.else.145

if.then.140:                                      ; preds = %do.body.133
  %109 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text141 = getelementptr inbounds %struct.buffer, %struct.buffer* %109, i32 0, i32 73
  %110 = load %struct.buffer_text*, %struct.buffer_text** %text141, align 8
  %beg142 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %110, i32 0, i32 0
  %111 = load i8*, i8** %beg142, align 8
  %112 = load i64, i64* %pos_byte, align 8
  %add.ptr143 = getelementptr inbounds i8, i8* %111, i64 %112
  %add.ptr144 = getelementptr inbounds i8, i8* %add.ptr143, i64 -1
  store i8* %add.ptr144, i8** %chp134, align 8
  br label %if.end.153

if.else.145:                                      ; preds = %do.body.133
  %113 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text146 = getelementptr inbounds %struct.buffer, %struct.buffer* %113, i32 0, i32 73
  %114 = load %struct.buffer_text*, %struct.buffer_text** %text146, align 8
  %beg147 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %114, i32 0, i32 0
  %115 = load i8*, i8** %beg147, align 8
  %116 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text148 = getelementptr inbounds %struct.buffer, %struct.buffer* %116, i32 0, i32 73
  %117 = load %struct.buffer_text*, %struct.buffer_text** %text148, align 8
  %gap_size149 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %117, i32 0, i32 5
  %118 = load i64, i64* %gap_size149, align 8
  %add.ptr150 = getelementptr inbounds i8, i8* %115, i64 %118
  %119 = load i64, i64* %pos_byte, align 8
  %add.ptr151 = getelementptr inbounds i8, i8* %add.ptr150, i64 %119
  %add.ptr152 = getelementptr inbounds i8, i8* %add.ptr151, i64 -1
  store i8* %add.ptr152, i8** %chp134, align 8
  br label %if.end.153

if.end.153:                                       ; preds = %if.else.145, %if.then.140
  br label %while.cond.154

while.cond.154:                                   ; preds = %while.body.160, %if.end.153
  %120 = load i8*, i8** %chp134, align 8
  %121 = load i8, i8* %120, align 1
  %conv155 = zext i8 %121 to i32
  %and156 = and i32 %conv155, 192
  %cmp157 = icmp ne i32 %and156, 128
  %lnot159 = xor i1 %cmp157, true
  br i1 %lnot159, label %while.body.160, label %while.end.163

while.body.160:                                   ; preds = %while.cond.154
  %122 = load i8*, i8** %chp134, align 8
  %incdec.ptr161 = getelementptr inbounds i8, i8* %122, i32 -1
  store i8* %incdec.ptr161, i8** %chp134, align 8
  %123 = load i64, i64* %pos_byte, align 8
  %dec162 = add nsw i64 %123, -1
  store i64 %dec162, i64* %pos_byte, align 8
  br label %while.cond.154

while.end.163:                                    ; preds = %while.cond.154
  br label %do.end.164

do.end.164:                                       ; preds = %while.end.163
  br label %if.end.165

if.end.165:                                       ; preds = %do.end.164, %if.then.130
  br label %do.end.166

do.end.166:                                       ; preds = %if.end.165
  br label %while.cond.30

while.end.167:                                    ; preds = %if.then.122, %land.end
  %124 = load i64, i64* %opoint, align 8
  %125 = load i64, i64* %opoint_byte, align 8
  call void @set_point_both(i64 %124, i64 %125)
  %call168 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call168, i64* %retval
  br label %return

return:                                           ; preds = %while.end.167, %if.then
  %126 = load i64, i64* %retval
  ret i64 %126
}

; Function Attrs: nounwind uwtable
define i64 @Fparse_partial_sexp(i64 %from, i64 %to, i64 %targetdepth, i64 %stopbefore, i64 %oldstate, i64 %commentstop) #0 {
entry:
  %from.addr = alloca i64, align 8
  %to.addr = alloca i64, align 8
  %targetdepth.addr = alloca i64, align 8
  %stopbefore.addr = alloca i64, align 8
  %oldstate.addr = alloca i64, align 8
  %commentstop.addr = alloca i64, align 8
  %state = alloca %struct.lisp_parse_state, align 8
  %target = alloca i64, align 8
  store i64 %from, i64* %from.addr, align 8
  store i64 %to, i64* %to.addr, align 8
  store i64 %targetdepth, i64* %targetdepth.addr, align 8
  store i64 %stopbefore, i64* %stopbefore.addr, align 8
  store i64 %oldstate, i64* %oldstate.addr, align 8
  store i64 %commentstop, i64* %commentstop.addr, align 8
  %0 = load i64, i64* %targetdepth.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %targetdepth.addr, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %and1 = and i32 %conv, -5
  %cmp2 = icmp eq i32 %and1, 2
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %call4 = call i64 @builtin_lisp_symbol(i32 559)
  %2 = load i64, i64* %targetdepth.addr, align 8
  %3 = call i64 @wrong_type_argument(i64 %call4, i64 %2) #5
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %4, %cond.true
  %5 = load i64, i64* %targetdepth.addr, align 8
  %shr = ashr i64 %5, 2
  store i64 %shr, i64* %target, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  store i64 -9223372036854775808, i64* %target, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end
  call void @validate_region(i64* %from.addr, i64* %to.addr)
  %6 = load i64, i64* %from.addr, align 8
  %shr5 = ashr i64 %6, 2
  %7 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %8 = load i64, i64* %from.addr, align 8
  %shr6 = ashr i64 %8, 2
  %call7 = call i64 @buf_charpos_to_bytepos(%struct.buffer* %7, i64 %shr6)
  %9 = load i64, i64* %to.addr, align 8
  %shr8 = ashr i64 %9, 2
  %10 = load i64, i64* %target, align 8
  %11 = load i64, i64* %stopbefore.addr, align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp10 = icmp eq i64 %11, %call9
  %lnot = xor i1 %cmp10, true
  %12 = load i64, i64* %oldstate.addr, align 8
  %13 = load i64, i64* %commentstop.addr, align 8
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp13 = icmp eq i64 %13, %call12
  br i1 %cmp13, label %cond.true.15, label %cond.false.16

cond.true.15:                                     ; preds = %if.end
  br label %cond.end.20

cond.false.16:                                    ; preds = %if.end
  %14 = load i64, i64* %commentstop.addr, align 8
  %call17 = call i64 @builtin_lisp_symbol(i32 899)
  %cmp18 = icmp eq i64 %14, %call17
  %cond = select i1 %cmp18, i32 -1, i32 1
  br label %cond.end.20

cond.end.20:                                      ; preds = %cond.false.16, %cond.true.15
  %cond21 = phi i32 [ 0, %cond.true.15 ], [ %cond, %cond.false.16 ]
  call void @scan_sexps_forward(%struct.lisp_parse_state* %state, i64 %shr5, i64 %call7, i64 %shr8, i64 %10, i1 zeroext %lnot, i64 %12, i32 %cond21)
  %location = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 8
  %15 = load i64, i64* %location, align 8
  %location_byte = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 9
  %16 = load i64, i64* %location_byte, align 8
  call void @set_point_both(i64 %15, i64 %16)
  %depth = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 0
  %17 = load i64, i64* %depth, align 8
  %shl = shl i64 %17, 2
  %add = add i64 %shl, 2
  %prevlevelstart = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 7
  %18 = load i64, i64* %prevlevelstart, align 8
  %cmp22 = icmp slt i64 %18, 0
  br i1 %cmp22, label %cond.true.24, label %cond.false.26

cond.true.24:                                     ; preds = %cond.end.20
  %call25 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.30

cond.false.26:                                    ; preds = %cond.end.20
  %prevlevelstart27 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 7
  %19 = load i64, i64* %prevlevelstart27, align 8
  %shl28 = shl i64 %19, 2
  %add29 = add i64 %shl28, 2
  br label %cond.end.30

cond.end.30:                                      ; preds = %cond.false.26, %cond.true.24
  %cond31 = phi i64 [ %call25, %cond.true.24 ], [ %add29, %cond.false.26 ]
  %thislevelstart = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 6
  %20 = load i64, i64* %thislevelstart, align 8
  %cmp32 = icmp slt i64 %20, 0
  br i1 %cmp32, label %cond.true.34, label %cond.false.36

cond.true.34:                                     ; preds = %cond.end.30
  %call35 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.40

cond.false.36:                                    ; preds = %cond.end.30
  %thislevelstart37 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 6
  %21 = load i64, i64* %thislevelstart37, align 8
  %shl38 = shl i64 %21, 2
  %add39 = add i64 %shl38, 2
  br label %cond.end.40

cond.end.40:                                      ; preds = %cond.false.36, %cond.true.34
  %cond41 = phi i64 [ %call35, %cond.true.34 ], [ %add39, %cond.false.36 ]
  %instring = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 1
  %22 = load i32, i32* %instring, align 4
  %cmp42 = icmp sge i32 %22, 0
  br i1 %cmp42, label %cond.true.44, label %cond.false.57

cond.true.44:                                     ; preds = %cond.end.40
  %instring45 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 1
  %23 = load i32, i32* %instring45, align 4
  %cmp46 = icmp eq i32 %23, 258
  br i1 %cmp46, label %cond.true.48, label %cond.false.50

cond.true.48:                                     ; preds = %cond.true.44
  %call49 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.55

cond.false.50:                                    ; preds = %cond.true.44
  %instring51 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 1
  %24 = load i32, i32* %instring51, align 4
  %conv52 = sext i32 %24 to i64
  %shl53 = shl i64 %conv52, 2
  %add54 = add i64 %shl53, 2
  br label %cond.end.55

cond.end.55:                                      ; preds = %cond.false.50, %cond.true.48
  %cond56 = phi i64 [ %call49, %cond.true.48 ], [ %add54, %cond.false.50 ]
  br label %cond.end.59

cond.false.57:                                    ; preds = %cond.end.40
  %call58 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.59

cond.end.59:                                      ; preds = %cond.false.57, %cond.end.55
  %cond60 = phi i64 [ %cond56, %cond.end.55 ], [ %call58, %cond.false.57 ]
  %incomment = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 2
  %25 = load i64, i64* %incomment, align 8
  %cmp61 = icmp slt i64 %25, 0
  br i1 %cmp61, label %cond.true.63, label %cond.false.65

cond.true.63:                                     ; preds = %cond.end.59
  %call64 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.77

cond.false.65:                                    ; preds = %cond.end.59
  %incomment66 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 2
  %26 = load i64, i64* %incomment66, align 8
  %cmp67 = icmp eq i64 %26, 0
  br i1 %cmp67, label %cond.true.69, label %cond.false.71

cond.true.69:                                     ; preds = %cond.false.65
  %call70 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.75

cond.false.71:                                    ; preds = %cond.false.65
  %incomment72 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 2
  %27 = load i64, i64* %incomment72, align 8
  %shl73 = shl i64 %27, 2
  %add74 = add i64 %shl73, 2
  br label %cond.end.75

cond.end.75:                                      ; preds = %cond.false.71, %cond.true.69
  %cond76 = phi i64 [ %call70, %cond.true.69 ], [ %add74, %cond.false.71 ]
  br label %cond.end.77

cond.end.77:                                      ; preds = %cond.end.75, %cond.true.63
  %cond78 = phi i64 [ %call64, %cond.true.63 ], [ %cond76, %cond.end.75 ]
  %quoted = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 4
  %28 = load i8, i8* %quoted, align 1
  %tobool = trunc i8 %28 to i1
  br i1 %tobool, label %cond.true.80, label %cond.false.82

cond.true.80:                                     ; preds = %cond.end.77
  %call81 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.84

cond.false.82:                                    ; preds = %cond.end.77
  %call83 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.84

cond.end.84:                                      ; preds = %cond.false.82, %cond.true.80
  %cond85 = phi i64 [ %call81, %cond.true.80 ], [ %call83, %cond.false.82 ]
  %mindepth = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 5
  %29 = load i64, i64* %mindepth, align 8
  %shl86 = shl i64 %29, 2
  %add87 = add i64 %shl86, 2
  %comstyle = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 3
  %30 = load i32, i32* %comstyle, align 4
  %tobool88 = icmp ne i32 %30, 0
  br i1 %tobool88, label %cond.true.89, label %cond.false.102

cond.true.89:                                     ; preds = %cond.end.84
  %comstyle90 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 3
  %31 = load i32, i32* %comstyle90, align 4
  %cmp91 = icmp eq i32 %31, 257
  br i1 %cmp91, label %cond.true.93, label %cond.false.95

cond.true.93:                                     ; preds = %cond.true.89
  %call94 = call i64 @builtin_lisp_symbol(i32 899)
  br label %cond.end.100

cond.false.95:                                    ; preds = %cond.true.89
  %comstyle96 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 3
  %32 = load i32, i32* %comstyle96, align 4
  %conv97 = sext i32 %32 to i64
  %shl98 = shl i64 %conv97, 2
  %add99 = add i64 %shl98, 2
  br label %cond.end.100

cond.end.100:                                     ; preds = %cond.false.95, %cond.true.93
  %cond101 = phi i64 [ %call94, %cond.true.93 ], [ %add99, %cond.false.95 ]
  br label %cond.end.104

cond.false.102:                                   ; preds = %cond.end.84
  %call103 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.104

cond.end.104:                                     ; preds = %cond.false.102, %cond.end.100
  %cond105 = phi i64 [ %cond101, %cond.end.100 ], [ %call103, %cond.false.102 ]
  %incomment106 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 2
  %33 = load i64, i64* %incomment106, align 8
  %tobool107 = icmp ne i64 %33, 0
  br i1 %tobool107, label %cond.true.111, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end.104
  %instring108 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 1
  %34 = load i32, i32* %instring108, align 4
  %cmp109 = icmp sge i32 %34, 0
  br i1 %cmp109, label %cond.true.111, label %cond.false.114

cond.true.111:                                    ; preds = %lor.lhs.false, %cond.end.104
  %comstr_start = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 10
  %35 = load i64, i64* %comstr_start, align 8
  %shl112 = shl i64 %35, 2
  %add113 = add i64 %shl112, 2
  br label %cond.end.116

cond.false.114:                                   ; preds = %lor.lhs.false
  %call115 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.116

cond.end.116:                                     ; preds = %cond.false.114, %cond.true.111
  %cond117 = phi i64 [ %add113, %cond.true.111 ], [ %call115, %cond.false.114 ]
  %levelstarts = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 11
  %36 = load i64, i64* %levelstarts, align 8
  %call118 = call i64 @builtin_lisp_symbol(i32 0)
  %call119 = call i64 @Fcons(i64 %36, i64 %call118)
  %call120 = call i64 @Fcons(i64 %cond117, i64 %call119)
  %call121 = call i64 @Fcons(i64 %cond105, i64 %call120)
  %call122 = call i64 @Fcons(i64 %add87, i64 %call121)
  %call123 = call i64 @Fcons(i64 %cond85, i64 %call122)
  %call124 = call i64 @Fcons(i64 %cond78, i64 %call123)
  %call125 = call i64 @Fcons(i64 %cond60, i64 %call124)
  %call126 = call i64 @Fcons(i64 %cond41, i64 %call125)
  %call127 = call i64 @Fcons(i64 %cond31, i64 %call126)
  %call128 = call i64 @Fcons(i64 %add, i64 %call127)
  ret i64 %call128
}

declare void @validate_region(i64*, i64*) #1

; Function Attrs: nounwind uwtable
define internal void @scan_sexps_forward(%struct.lisp_parse_state* %stateptr, i64 %from, i64 %from_byte, i64 %end, i64 %targetdepth, i1 zeroext %stopbefore, i64 %oldstate, i32 %commentstop) #0 {
entry:
  %stateptr.addr = alloca %struct.lisp_parse_state*, align 8
  %from.addr = alloca i64, align 8
  %from_byte.addr = alloca i64, align 8
  %end.addr = alloca i64, align 8
  %targetdepth.addr = alloca i64, align 8
  %stopbefore.addr = alloca i8, align 1
  %oldstate.addr = alloca i64, align 8
  %commentstop.addr = alloca i32, align 4
  %state = alloca %struct.lisp_parse_state, align 8
  %code = alloca i32, align 4
  %c1 = alloca i32, align 4
  %comnested = alloca i8, align 1
  %levelstart = alloca [100 x %struct.level], align 16
  %curlevel = alloca %struct.level*, align 8
  %endlevel = alloca %struct.level*, align 8
  %depth = alloca i64, align 8
  %mindepth = alloca i64, align 8
  %start_quoted = alloca i8, align 1
  %tem = alloca i64, align 8
  %prev_from = alloca i64, align 8
  %prev_from_byte = alloca i64, align 8
  %prev_from_syntax = alloca i32, align 4
  %boundary_stop = alloca i8, align 1
  %nofence = alloca i8, align 1
  %found = alloca i8, align 1
  %out_bytepos = alloca i64, align 8
  %out_charpos = alloca i64, align 8
  %temp = alloca i32, align 4
  %chp = alloca i8*, align 8
  %temhd = alloca i64, align 8
  %syntax = alloca i32, align 4
  %chp299 = alloca i8*, align 8
  %chp499 = alloca i8*, align 8
  %chp682 = alloca i8*, align 8
  %symchar = alloca i32, align 4
  %chp929 = alloca i8*, align 8
  %chp1084 = alloca i8*, align 8
  %chp1263 = alloca i8*, align 8
  %c = alloca i32, align 4
  %c_code = alloca i32, align 4
  %chp1669 = alloca i8*, align 8
  %chp1825 = alloca i8*, align 8
  %chp1979 = alloca i8*, align 8
  store %struct.lisp_parse_state* %stateptr, %struct.lisp_parse_state** %stateptr.addr, align 8
  store i64 %from, i64* %from.addr, align 8
  store i64 %from_byte, i64* %from_byte.addr, align 8
  store i64 %end, i64* %end.addr, align 8
  store i64 %targetdepth, i64* %targetdepth.addr, align 8
  %frombool = zext i1 %stopbefore to i8
  store i8 %frombool, i8* %stopbefore.addr, align 1
  store i64 %oldstate, i64* %oldstate.addr, align 8
  store i32 %commentstop, i32* %commentstop.addr, align 4
  %arraydecay = getelementptr inbounds [100 x %struct.level], [100 x %struct.level]* %levelstart, i32 0, i32 0
  store %struct.level* %arraydecay, %struct.level** %curlevel, align 8
  %arraydecay1 = getelementptr inbounds [100 x %struct.level], [100 x %struct.level]* %levelstart, i32 0, i32 0
  %add.ptr = getelementptr inbounds %struct.level, %struct.level* %arraydecay1, i64 100
  store %struct.level* %add.ptr, %struct.level** %endlevel, align 8
  store i8 0, i8* %start_quoted, align 1
  %0 = load i32, i32* %commentstop.addr, align 4
  %cmp = icmp eq i32 %0, -1
  %frombool2 = zext i1 %cmp to i8
  store i8 %frombool2, i8* %boundary_stop, align 1
  %1 = load i64, i64* %from.addr, align 8
  store i64 %1, i64* %prev_from, align 8
  %2 = load i64, i64* %from_byte.addr, align 8
  store i64 %2, i64* %prev_from_byte, align 8
  %3 = load i64, i64* %from.addr, align 8
  %4 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %4, i32 0, i32 77
  %5 = load i64, i64* %begv, align 8
  %cmp3 = icmp ne i64 %3, %5
  br i1 %cmp3, label %if.then, label %if.end.26

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %6 = load i64, i64* %prev_from, align 8
  %dec = add nsw i64 %6, -1
  store i64 %dec, i64* %prev_from, align 8
  %7 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %7, i32 0, i32 39
  %8 = load i64, i64* %enable_multibyte_characters_, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp4 = icmp eq i64 %8, %call
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %do.body
  %9 = load i64, i64* %prev_from_byte, align 8
  %dec6 = add nsw i64 %9, -1
  store i64 %dec6, i64* %prev_from_byte, align 8
  br label %if.end.24

if.else:                                          ; preds = %do.body
  br label %do.body.7

do.body.7:                                        ; preds = %if.else
  %10 = load i64, i64* %prev_from_byte, align 8
  %dec8 = add nsw i64 %10, -1
  store i64 %dec8, i64* %prev_from_byte, align 8
  %11 = load i64, i64* %prev_from_byte, align 8
  %12 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %12, i32 0, i32 73
  %13 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %13, i32 0, i32 3
  %14 = load i64, i64* %gpt_byte, align 8
  %cmp9 = icmp slt i64 %11, %14
  br i1 %cmp9, label %if.then.10, label %if.else.14

if.then.10:                                       ; preds = %do.body.7
  %15 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text11 = getelementptr inbounds %struct.buffer, %struct.buffer* %15, i32 0, i32 73
  %16 = load %struct.buffer_text*, %struct.buffer_text** %text11, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %16, i32 0, i32 0
  %17 = load i8*, i8** %beg, align 8
  %18 = load i64, i64* %prev_from_byte, align 8
  %add.ptr12 = getelementptr inbounds i8, i8* %17, i64 %18
  %add.ptr13 = getelementptr inbounds i8, i8* %add.ptr12, i64 -1
  store i8* %add.ptr13, i8** %chp, align 8
  br label %if.end

if.else.14:                                       ; preds = %do.body.7
  %19 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text15 = getelementptr inbounds %struct.buffer, %struct.buffer* %19, i32 0, i32 73
  %20 = load %struct.buffer_text*, %struct.buffer_text** %text15, align 8
  %beg16 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %20, i32 0, i32 0
  %21 = load i8*, i8** %beg16, align 8
  %22 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text17 = getelementptr inbounds %struct.buffer, %struct.buffer* %22, i32 0, i32 73
  %23 = load %struct.buffer_text*, %struct.buffer_text** %text17, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %23, i32 0, i32 5
  %24 = load i64, i64* %gap_size, align 8
  %add.ptr18 = getelementptr inbounds i8, i8* %21, i64 %24
  %25 = load i64, i64* %prev_from_byte, align 8
  %add.ptr19 = getelementptr inbounds i8, i8* %add.ptr18, i64 %25
  %add.ptr20 = getelementptr inbounds i8, i8* %add.ptr19, i64 -1
  store i8* %add.ptr20, i8** %chp, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.14, %if.then.10
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %26 = load i8*, i8** %chp, align 8
  %27 = load i8, i8* %26, align 1
  %conv = zext i8 %27 to i32
  %and = and i32 %conv, 192
  %cmp21 = icmp ne i32 %and, 128
  %lnot = xor i1 %cmp21, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %28 = load i8*, i8** %chp, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %28, i32 -1
  store i8* %incdec.ptr, i8** %chp, align 8
  %29 = load i64, i64* %prev_from_byte, align 8
  %dec23 = add nsw i64 %29, -1
  store i64 %dec23, i64* %prev_from_byte, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %do.end

do.end:                                           ; preds = %while.end
  br label %if.end.24

if.end.24:                                        ; preds = %do.end, %if.then.5
  br label %do.end.25

do.end.25:                                        ; preds = %if.end.24
  br label %if.end.26

if.end.26:                                        ; preds = %do.end.25, %entry
  store i8 1, i8* @immediate_quit, align 1
  br label %do.body.27

do.body.27:                                       ; preds = %if.end.26
  %30 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 241), align 8
  %call28 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp29 = icmp eq i64 %30, %call28
  br i1 %cmp29, label %if.else.35, label %land.lhs.true

land.lhs.true:                                    ; preds = %do.body.27
  %31 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 138), align 8
  %call31 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp32 = icmp eq i64 %31, %call31
  br i1 %cmp32, label %if.then.34, label %if.else.35

if.then.34:                                       ; preds = %land.lhs.true
  call void @process_quit_flag()
  br label %if.end.38

if.else.35:                                       ; preds = %land.lhs.true, %do.body.27
  %32 = load volatile i8, i8* @pending_signals, align 1
  %tobool = trunc i8 %32 to i1
  br i1 %tobool, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %if.else.35
  call void @process_pending_signals()
  br label %if.end.37

if.end.37:                                        ; preds = %if.then.36, %if.else.35
  br label %if.end.38

if.end.38:                                        ; preds = %if.end.37, %if.then.34
  br label %do.end.39

do.end.39:                                        ; preds = %if.end.38
  %33 = load i64, i64* %oldstate.addr, align 8
  %call40 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp41 = icmp eq i64 %33, %call40
  br i1 %cmp41, label %if.then.43, label %if.else.44

if.then.43:                                       ; preds = %do.end.39
  store i64 0, i64* %depth, align 8
  %instring = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 1
  store i32 -1, i32* %instring, align 4
  %incomment = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 2
  store i64 0, i64* %incomment, align 8
  %comstyle = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 3
  store i32 0, i32* %comstyle, align 4
  %comstr_start = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 10
  store i64 -1, i64* %comstr_start, align 8
  br label %if.end.150

if.else.44:                                       ; preds = %do.end.39
  %34 = load i64, i64* %oldstate.addr, align 8
  %call45 = call i64 @Fcar(i64 %34)
  store i64 %call45, i64* %tem, align 8
  %35 = load i64, i64* %tem, align 8
  %call46 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp47 = icmp eq i64 %35, %call46
  br i1 %cmp47, label %if.else.50, label %if.then.49

if.then.49:                                       ; preds = %if.else.44
  %36 = load i64, i64* %tem, align 8
  %shr = ashr i64 %36, 2
  store i64 %shr, i64* %depth, align 8
  br label %if.end.51

if.else.50:                                       ; preds = %if.else.44
  store i64 0, i64* %depth, align 8
  br label %if.end.51

if.end.51:                                        ; preds = %if.else.50, %if.then.49
  %37 = load i64, i64* %oldstate.addr, align 8
  %call52 = call i64 @Fcdr(i64 %37)
  store i64 %call52, i64* %oldstate.addr, align 8
  %38 = load i64, i64* %oldstate.addr, align 8
  %call53 = call i64 @Fcdr(i64 %38)
  store i64 %call53, i64* %oldstate.addr, align 8
  %39 = load i64, i64* %oldstate.addr, align 8
  %call54 = call i64 @Fcdr(i64 %39)
  store i64 %call54, i64* %oldstate.addr, align 8
  %40 = load i64, i64* %oldstate.addr, align 8
  %call55 = call i64 @Fcar(i64 %40)
  store i64 %call55, i64* %tem, align 8
  %41 = load i64, i64* %tem, align 8
  %call56 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp57 = icmp eq i64 %41, %call56
  br i1 %cmp57, label %cond.false.67, label %cond.true

cond.true:                                        ; preds = %if.end.51
  %42 = load i64, i64* %tem, align 8
  %call59 = call zeroext i1 @NATNUMP(i64 %42)
  br i1 %call59, label %land.lhs.true.61, label %cond.false

land.lhs.true.61:                                 ; preds = %cond.true
  %43 = load i64, i64* %tem, align 8
  %shr62 = ashr i64 %43, 2
  %cmp63 = icmp sle i64 %shr62, 4194303
  br i1 %cmp63, label %cond.true.65, label %cond.false

cond.true.65:                                     ; preds = %land.lhs.true.61
  %44 = load i64, i64* %tem, align 8
  %shr66 = ashr i64 %44, 2
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.61, %cond.true
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.65
  %cond = phi i64 [ %shr66, %cond.true.65 ], [ 258, %cond.false ]
  br label %cond.end.68

cond.false.67:                                    ; preds = %if.end.51
  br label %cond.end.68

cond.end.68:                                      ; preds = %cond.false.67, %cond.end
  %cond69 = phi i64 [ %cond, %cond.end ], [ -1, %cond.false.67 ]
  %conv70 = trunc i64 %cond69 to i32
  %instring71 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 1
  store i32 %conv70, i32* %instring71, align 4
  %45 = load i64, i64* %oldstate.addr, align 8
  %call72 = call i64 @Fcdr(i64 %45)
  store i64 %call72, i64* %oldstate.addr, align 8
  %46 = load i64, i64* %oldstate.addr, align 8
  %call73 = call i64 @Fcar(i64 %46)
  store i64 %call73, i64* %tem, align 8
  %47 = load i64, i64* %tem, align 8
  %call74 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp75 = icmp eq i64 %47, %call74
  br i1 %cmp75, label %cond.false.88, label %cond.true.77

cond.true.77:                                     ; preds = %cond.end.68
  %48 = load i64, i64* %tem, align 8
  %and78 = and i64 %48, 7
  %conv79 = trunc i64 %and78 to i32
  %and80 = and i32 %conv79, -5
  %cmp81 = icmp eq i32 %and80, 2
  br i1 %cmp81, label %cond.true.83, label %cond.false.85

cond.true.83:                                     ; preds = %cond.true.77
  %49 = load i64, i64* %tem, align 8
  %shr84 = ashr i64 %49, 2
  br label %cond.end.86

cond.false.85:                                    ; preds = %cond.true.77
  br label %cond.end.86

cond.end.86:                                      ; preds = %cond.false.85, %cond.true.83
  %cond87 = phi i64 [ %shr84, %cond.true.83 ], [ -1, %cond.false.85 ]
  br label %cond.end.89

cond.false.88:                                    ; preds = %cond.end.68
  br label %cond.end.89

cond.end.89:                                      ; preds = %cond.false.88, %cond.end.86
  %cond90 = phi i64 [ %cond87, %cond.end.86 ], [ 0, %cond.false.88 ]
  %incomment91 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 2
  store i64 %cond90, i64* %incomment91, align 8
  %50 = load i64, i64* %oldstate.addr, align 8
  %call92 = call i64 @Fcdr(i64 %50)
  store i64 %call92, i64* %oldstate.addr, align 8
  %51 = load i64, i64* %oldstate.addr, align 8
  %call93 = call i64 @Fcar(i64 %51)
  store i64 %call93, i64* %tem, align 8
  %52 = load i64, i64* %tem, align 8
  %call94 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp95 = icmp eq i64 %52, %call94
  %lnot97 = xor i1 %cmp95, true
  %frombool98 = zext i1 %lnot97 to i8
  store i8 %frombool98, i8* %start_quoted, align 1
  %53 = load i64, i64* %oldstate.addr, align 8
  %call99 = call i64 @Fcdr(i64 %53)
  store i64 %call99, i64* %oldstate.addr, align 8
  %54 = load i64, i64* %oldstate.addr, align 8
  %call100 = call i64 @Fcdr(i64 %54)
  store i64 %call100, i64* %oldstate.addr, align 8
  %55 = load i64, i64* %oldstate.addr, align 8
  %call101 = call i64 @Fcar(i64 %55)
  store i64 %call101, i64* %tem, align 8
  %56 = load i64, i64* %tem, align 8
  %call102 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp103 = icmp eq i64 %56, %call102
  br i1 %cmp103, label %cond.true.105, label %cond.false.106

cond.true.105:                                    ; preds = %cond.end.89
  br label %cond.end.114

cond.false.106:                                   ; preds = %cond.end.89
  %57 = load i64, i64* %tem, align 8
  %call107 = call zeroext i1 @RANGED_INTEGERP(i64 0, i64 %57, i64 257)
  br i1 %call107, label %cond.true.109, label %cond.false.111

cond.true.109:                                    ; preds = %cond.false.106
  %58 = load i64, i64* %tem, align 8
  %shr110 = ashr i64 %58, 2
  br label %cond.end.112

cond.false.111:                                   ; preds = %cond.false.106
  br label %cond.end.112

cond.end.112:                                     ; preds = %cond.false.111, %cond.true.109
  %cond113 = phi i64 [ %shr110, %cond.true.109 ], [ 257, %cond.false.111 ]
  br label %cond.end.114

cond.end.114:                                     ; preds = %cond.end.112, %cond.true.105
  %cond115 = phi i64 [ 0, %cond.true.105 ], [ %cond113, %cond.end.112 ]
  %conv116 = trunc i64 %cond115 to i32
  %comstyle117 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 3
  store i32 %conv116, i32* %comstyle117, align 4
  %59 = load i64, i64* %oldstate.addr, align 8
  %call118 = call i64 @Fcdr(i64 %59)
  store i64 %call118, i64* %oldstate.addr, align 8
  %60 = load i64, i64* %oldstate.addr, align 8
  %call119 = call i64 @Fcar(i64 %60)
  store i64 %call119, i64* %tem, align 8
  %61 = load i64, i64* %tem, align 8
  %call120 = call zeroext i1 @RANGED_INTEGERP(i64 -9223372036854775808, i64 %61, i64 9223372036854775807)
  br i1 %call120, label %cond.true.122, label %cond.false.124

cond.true.122:                                    ; preds = %cond.end.114
  %62 = load i64, i64* %tem, align 8
  %shr123 = ashr i64 %62, 2
  br label %cond.end.125

cond.false.124:                                   ; preds = %cond.end.114
  br label %cond.end.125

cond.end.125:                                     ; preds = %cond.false.124, %cond.true.122
  %cond126 = phi i64 [ %shr123, %cond.true.122 ], [ -1, %cond.false.124 ]
  %comstr_start127 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 10
  store i64 %cond126, i64* %comstr_start127, align 8
  %63 = load i64, i64* %oldstate.addr, align 8
  %call128 = call i64 @Fcdr(i64 %63)
  store i64 %call128, i64* %oldstate.addr, align 8
  %64 = load i64, i64* %oldstate.addr, align 8
  %call129 = call i64 @Fcar(i64 %64)
  store i64 %call129, i64* %tem, align 8
  br label %while.cond.130

while.cond.130:                                   ; preds = %if.end.146, %cond.end.125
  %65 = load i64, i64* %tem, align 8
  %call131 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp132 = icmp eq i64 %65, %call131
  %lnot134 = xor i1 %cmp132, true
  br i1 %lnot134, label %while.body.135, label %while.end.149

while.body.135:                                   ; preds = %while.cond.130
  %66 = load i64, i64* %tem, align 8
  %call136 = call i64 @Fcar(i64 %66)
  store i64 %call136, i64* %temhd, align 8
  %67 = load i64, i64* %temhd, align 8
  %call137 = call zeroext i1 @RANGED_INTEGERP(i64 -9223372036854775808, i64 %67, i64 9223372036854775807)
  br i1 %call137, label %if.then.138, label %if.end.140

if.then.138:                                      ; preds = %while.body.135
  %68 = load i64, i64* %temhd, align 8
  %shr139 = ashr i64 %68, 2
  %69 = load %struct.level*, %struct.level** %curlevel, align 8
  %last = getelementptr inbounds %struct.level, %struct.level* %69, i32 0, i32 0
  store i64 %shr139, i64* %last, align 8
  br label %if.end.140

if.end.140:                                       ; preds = %if.then.138, %while.body.135
  %70 = load %struct.level*, %struct.level** %curlevel, align 8
  %incdec.ptr141 = getelementptr inbounds %struct.level, %struct.level* %70, i32 1
  store %struct.level* %incdec.ptr141, %struct.level** %curlevel, align 8
  %71 = load %struct.level*, %struct.level** %endlevel, align 8
  %cmp142 = icmp eq %struct.level* %incdec.ptr141, %71
  br i1 %cmp142, label %if.then.144, label %if.end.146

if.then.144:                                      ; preds = %if.end.140
  %72 = load %struct.level*, %struct.level** %curlevel, align 8
  %incdec.ptr145 = getelementptr inbounds %struct.level, %struct.level* %72, i32 -1
  store %struct.level* %incdec.ptr145, %struct.level** %curlevel, align 8
  br label %if.end.146

if.end.146:                                       ; preds = %if.then.144, %if.end.140
  %73 = load %struct.level*, %struct.level** %curlevel, align 8
  %prev = getelementptr inbounds %struct.level, %struct.level* %73, i32 0, i32 1
  store i64 -1, i64* %prev, align 8
  %74 = load %struct.level*, %struct.level** %curlevel, align 8
  %last147 = getelementptr inbounds %struct.level, %struct.level* %74, i32 0, i32 0
  store i64 -1, i64* %last147, align 8
  %75 = load i64, i64* %tem, align 8
  %call148 = call i64 @Fcdr(i64 %75)
  store i64 %call148, i64* %tem, align 8
  br label %while.cond.130

while.end.149:                                    ; preds = %while.cond.130
  br label %if.end.150

if.end.150:                                       ; preds = %while.end.149, %if.then.43
  %quoted = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 4
  store i8 0, i8* %quoted, align 1
  %76 = load i64, i64* %depth, align 8
  store i64 %76, i64* %mindepth, align 8
  %77 = load %struct.level*, %struct.level** %curlevel, align 8
  %prev151 = getelementptr inbounds %struct.level, %struct.level* %77, i32 0, i32 1
  store i64 -1, i64* %prev151, align 8
  %78 = load %struct.level*, %struct.level** %curlevel, align 8
  %last152 = getelementptr inbounds %struct.level, %struct.level* %78, i32 0, i32 0
  store i64 -1, i64* %last152, align 8
  %79 = load i64, i64* %prev_from, align 8
  call void @SETUP_SYNTAX_TABLE(i64 %79, i64 1)
  %80 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_153 = getelementptr inbounds %struct.buffer, %struct.buffer* %80, i32 0, i32 39
  %81 = load i64, i64* %enable_multibyte_characters_153, align 8
  %call154 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp155 = icmp eq i64 %81, %call154
  br i1 %cmp155, label %cond.false.159, label %cond.true.157

cond.true.157:                                    ; preds = %if.end.150
  %82 = load i64, i64* %prev_from_byte, align 8
  %call158 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %82)
  br label %cond.end.175

cond.false.159:                                   ; preds = %if.end.150
  %83 = load i64, i64* %prev_from_byte, align 8
  %84 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text160 = getelementptr inbounds %struct.buffer, %struct.buffer* %84, i32 0, i32 73
  %85 = load %struct.buffer_text*, %struct.buffer_text** %text160, align 8
  %gpt_byte161 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %85, i32 0, i32 3
  %86 = load i64, i64* %gpt_byte161, align 8
  %cmp162 = icmp sge i64 %83, %86
  br i1 %cmp162, label %cond.true.164, label %cond.false.167

cond.true.164:                                    ; preds = %cond.false.159
  %87 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text165 = getelementptr inbounds %struct.buffer, %struct.buffer* %87, i32 0, i32 73
  %88 = load %struct.buffer_text*, %struct.buffer_text** %text165, align 8
  %gap_size166 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %88, i32 0, i32 5
  %89 = load i64, i64* %gap_size166, align 8
  br label %cond.end.168

cond.false.167:                                   ; preds = %cond.false.159
  br label %cond.end.168

cond.end.168:                                     ; preds = %cond.false.167, %cond.true.164
  %cond169 = phi i64 [ %89, %cond.true.164 ], [ 0, %cond.false.167 ]
  %90 = load i64, i64* %prev_from_byte, align 8
  %add = add nsw i64 %cond169, %90
  %91 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text170 = getelementptr inbounds %struct.buffer, %struct.buffer* %91, i32 0, i32 73
  %92 = load %struct.buffer_text*, %struct.buffer_text** %text170, align 8
  %beg171 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %92, i32 0, i32 0
  %93 = load i8*, i8** %beg171, align 8
  %add.ptr172 = getelementptr inbounds i8, i8* %93, i64 %add
  %add.ptr173 = getelementptr inbounds i8, i8* %add.ptr172, i64 -1
  %94 = load i8, i8* %add.ptr173, align 1
  %conv174 = zext i8 %94 to i32
  br label %cond.end.175

cond.end.175:                                     ; preds = %cond.end.168, %cond.true.157
  %cond176 = phi i32 [ %call158, %cond.true.157 ], [ %conv174, %cond.end.168 ]
  store i32 %cond176, i32* %temp, align 4
  %95 = load i32, i32* %temp, align 4
  %call177 = call i32 @syntax_property_with_flags(i32 %95, i1 zeroext true)
  store i32 %call177, i32* %prev_from_syntax, align 4
  %96 = load i64, i64* %from.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_FORWARD(i64 %96)
  %incomment178 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 2
  %97 = load i64, i64* %incomment178, align 8
  %tobool179 = icmp ne i64 %97, 0
  br i1 %tobool179, label %if.then.180, label %if.end.181

if.then.180:                                      ; preds = %cond.end.175
  br label %startincomment

if.end.181:                                       ; preds = %cond.end.175
  %instring182 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 1
  %98 = load i32, i32* %instring182, align 4
  %cmp183 = icmp sge i32 %98, 0
  br i1 %cmp183, label %if.then.185, label %if.else.193

if.then.185:                                      ; preds = %if.end.181
  %instring186 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 1
  %99 = load i32, i32* %instring186, align 4
  %cmp187 = icmp ne i32 %99, 258
  %frombool189 = zext i1 %cmp187 to i8
  store i8 %frombool189, i8* %nofence, align 1
  %100 = load i8, i8* %start_quoted, align 1
  %tobool190 = trunc i8 %100 to i1
  br i1 %tobool190, label %if.then.191, label %if.end.192

if.then.191:                                      ; preds = %if.then.185
  br label %startquotedinstring

if.end.192:                                       ; preds = %if.then.185
  br label %startinstring

if.else.193:                                      ; preds = %if.end.181
  %101 = load i8, i8* %start_quoted, align 1
  %tobool194 = trunc i8 %101 to i1
  br i1 %tobool194, label %if.then.195, label %if.end.196

if.then.195:                                      ; preds = %if.else.193
  br label %startquoted

if.end.196:                                       ; preds = %if.else.193
  br label %if.end.197

if.end.197:                                       ; preds = %if.end.196
  br label %while.cond.198

while.cond.198:                                   ; preds = %sw.epilog.2036, %if.then.574, %if.end.197
  %102 = load i64, i64* %from.addr, align 8
  %103 = load i64, i64* %end.addr, align 8
  %cmp199 = icmp slt i64 %102, %103
  br i1 %cmp199, label %while.body.201, label %while.end.2037

while.body.201:                                   ; preds = %while.cond.198
  br label %do.body.202

do.body.202:                                      ; preds = %while.body.201
  %104 = load i64, i64* %from.addr, align 8
  store i64 %104, i64* %prev_from, align 8
  %105 = load i64, i64* %from_byte.addr, align 8
  store i64 %105, i64* %prev_from_byte, align 8
  %106 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_203 = getelementptr inbounds %struct.buffer, %struct.buffer* %106, i32 0, i32 39
  %107 = load i64, i64* %enable_multibyte_characters_203, align 8
  %call204 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp205 = icmp eq i64 %107, %call204
  br i1 %cmp205, label %cond.false.209, label %cond.true.207

cond.true.207:                                    ; preds = %do.body.202
  %108 = load i64, i64* %prev_from_byte, align 8
  %call208 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %108)
  br label %cond.end.287

cond.false.209:                                   ; preds = %do.body.202
  br i1 true, label %cond.true.210, label %cond.false.230

cond.true.210:                                    ; preds = %cond.false.209
  %109 = load i64, i64* %prev_from_byte, align 8
  %110 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text211 = getelementptr inbounds %struct.buffer, %struct.buffer* %110, i32 0, i32 73
  %111 = load %struct.buffer_text*, %struct.buffer_text** %text211, align 8
  %gpt_byte212 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %111, i32 0, i32 3
  %112 = load i64, i64* %gpt_byte212, align 8
  %cmp213 = icmp sge i64 %109, %112
  br i1 %cmp213, label %cond.true.215, label %cond.false.218

cond.true.215:                                    ; preds = %cond.true.210
  %113 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text216 = getelementptr inbounds %struct.buffer, %struct.buffer* %113, i32 0, i32 73
  %114 = load %struct.buffer_text*, %struct.buffer_text** %text216, align 8
  %gap_size217 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %114, i32 0, i32 5
  %115 = load i64, i64* %gap_size217, align 8
  br label %cond.end.219

cond.false.218:                                   ; preds = %cond.true.210
  br label %cond.end.219

cond.end.219:                                     ; preds = %cond.false.218, %cond.true.215
  %cond220 = phi i64 [ %115, %cond.true.215 ], [ 0, %cond.false.218 ]
  %116 = load i64, i64* %prev_from_byte, align 8
  %add221 = add nsw i64 %cond220, %116
  %117 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text222 = getelementptr inbounds %struct.buffer, %struct.buffer* %117, i32 0, i32 73
  %118 = load %struct.buffer_text*, %struct.buffer_text** %text222, align 8
  %beg223 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %118, i32 0, i32 0
  %119 = load i8*, i8** %beg223, align 8
  %add.ptr224 = getelementptr inbounds i8, i8* %119, i64 %add221
  %add.ptr225 = getelementptr inbounds i8, i8* %add.ptr224, i64 -1
  %120 = load i8, i8* %add.ptr225, align 1
  %conv226 = zext i8 %120 to i32
  %add227 = add i32 %conv226, 0
  %cmp228 = icmp ult i32 %add227, 128
  br i1 %cmp228, label %cond.true.250, label %cond.false.267

cond.false.230:                                   ; preds = %cond.false.209
  %121 = load i64, i64* %prev_from_byte, align 8
  %122 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text231 = getelementptr inbounds %struct.buffer, %struct.buffer* %122, i32 0, i32 73
  %123 = load %struct.buffer_text*, %struct.buffer_text** %text231, align 8
  %gpt_byte232 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %123, i32 0, i32 3
  %124 = load i64, i64* %gpt_byte232, align 8
  %cmp233 = icmp sge i64 %121, %124
  br i1 %cmp233, label %cond.true.235, label %cond.false.238

cond.true.235:                                    ; preds = %cond.false.230
  %125 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text236 = getelementptr inbounds %struct.buffer, %struct.buffer* %125, i32 0, i32 73
  %126 = load %struct.buffer_text*, %struct.buffer_text** %text236, align 8
  %gap_size237 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %126, i32 0, i32 5
  %127 = load i64, i64* %gap_size237, align 8
  br label %cond.end.239

cond.false.238:                                   ; preds = %cond.false.230
  br label %cond.end.239

cond.end.239:                                     ; preds = %cond.false.238, %cond.true.235
  %cond240 = phi i64 [ %127, %cond.true.235 ], [ 0, %cond.false.238 ]
  %128 = load i64, i64* %prev_from_byte, align 8
  %add241 = add nsw i64 %cond240, %128
  %129 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text242 = getelementptr inbounds %struct.buffer, %struct.buffer* %129, i32 0, i32 73
  %130 = load %struct.buffer_text*, %struct.buffer_text** %text242, align 8
  %beg243 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %130, i32 0, i32 0
  %131 = load i8*, i8** %beg243, align 8
  %add.ptr244 = getelementptr inbounds i8, i8* %131, i64 %add241
  %add.ptr245 = getelementptr inbounds i8, i8* %add.ptr244, i64 -1
  %132 = load i8, i8* %add.ptr245, align 1
  %conv246 = zext i8 %132 to i64
  %add247 = add i64 %conv246, 0
  %cmp248 = icmp ult i64 %add247, 128
  br i1 %cmp248, label %cond.true.250, label %cond.false.267

cond.true.250:                                    ; preds = %cond.end.239, %cond.end.219
  %133 = load i64, i64* %prev_from_byte, align 8
  %134 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text251 = getelementptr inbounds %struct.buffer, %struct.buffer* %134, i32 0, i32 73
  %135 = load %struct.buffer_text*, %struct.buffer_text** %text251, align 8
  %gpt_byte252 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %135, i32 0, i32 3
  %136 = load i64, i64* %gpt_byte252, align 8
  %cmp253 = icmp sge i64 %133, %136
  br i1 %cmp253, label %cond.true.255, label %cond.false.258

cond.true.255:                                    ; preds = %cond.true.250
  %137 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text256 = getelementptr inbounds %struct.buffer, %struct.buffer* %137, i32 0, i32 73
  %138 = load %struct.buffer_text*, %struct.buffer_text** %text256, align 8
  %gap_size257 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %138, i32 0, i32 5
  %139 = load i64, i64* %gap_size257, align 8
  br label %cond.end.259

cond.false.258:                                   ; preds = %cond.true.250
  br label %cond.end.259

cond.end.259:                                     ; preds = %cond.false.258, %cond.true.255
  %cond260 = phi i64 [ %139, %cond.true.255 ], [ 0, %cond.false.258 ]
  %140 = load i64, i64* %prev_from_byte, align 8
  %add261 = add nsw i64 %cond260, %140
  %141 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text262 = getelementptr inbounds %struct.buffer, %struct.buffer* %141, i32 0, i32 73
  %142 = load %struct.buffer_text*, %struct.buffer_text** %text262, align 8
  %beg263 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %142, i32 0, i32 0
  %143 = load i8*, i8** %beg263, align 8
  %add.ptr264 = getelementptr inbounds i8, i8* %143, i64 %add261
  %add.ptr265 = getelementptr inbounds i8, i8* %add.ptr264, i64 -1
  %144 = load i8, i8* %add.ptr265, align 1
  %conv266 = zext i8 %144 to i32
  br label %cond.end.285

cond.false.267:                                   ; preds = %cond.end.239, %cond.end.219
  %145 = load i64, i64* %prev_from_byte, align 8
  %146 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text268 = getelementptr inbounds %struct.buffer, %struct.buffer* %146, i32 0, i32 73
  %147 = load %struct.buffer_text*, %struct.buffer_text** %text268, align 8
  %gpt_byte269 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %147, i32 0, i32 3
  %148 = load i64, i64* %gpt_byte269, align 8
  %cmp270 = icmp sge i64 %145, %148
  br i1 %cmp270, label %cond.true.272, label %cond.false.275

cond.true.272:                                    ; preds = %cond.false.267
  %149 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text273 = getelementptr inbounds %struct.buffer, %struct.buffer* %149, i32 0, i32 73
  %150 = load %struct.buffer_text*, %struct.buffer_text** %text273, align 8
  %gap_size274 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %150, i32 0, i32 5
  %151 = load i64, i64* %gap_size274, align 8
  br label %cond.end.276

cond.false.275:                                   ; preds = %cond.false.267
  br label %cond.end.276

cond.end.276:                                     ; preds = %cond.false.275, %cond.true.272
  %cond277 = phi i64 [ %151, %cond.true.272 ], [ 0, %cond.false.275 ]
  %152 = load i64, i64* %prev_from_byte, align 8
  %add278 = add nsw i64 %cond277, %152
  %153 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text279 = getelementptr inbounds %struct.buffer, %struct.buffer* %153, i32 0, i32 73
  %154 = load %struct.buffer_text*, %struct.buffer_text** %text279, align 8
  %beg280 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %154, i32 0, i32 0
  %155 = load i8*, i8** %beg280, align 8
  %add.ptr281 = getelementptr inbounds i8, i8* %155, i64 %add278
  %add.ptr282 = getelementptr inbounds i8, i8* %add.ptr281, i64 -1
  %156 = load i8, i8* %add.ptr282, align 1
  %conv283 = zext i8 %156 to i32
  %add284 = add nsw i32 %conv283, 4194048
  br label %cond.end.285

cond.end.285:                                     ; preds = %cond.end.276, %cond.end.259
  %cond286 = phi i32 [ %conv266, %cond.end.259 ], [ %add284, %cond.end.276 ]
  br label %cond.end.287

cond.end.287:                                     ; preds = %cond.end.285, %cond.true.207
  %cond288 = phi i32 [ %call208, %cond.true.207 ], [ %cond286, %cond.end.285 ]
  store i32 %cond288, i32* %temp, align 4
  %157 = load i32, i32* %temp, align 4
  %call289 = call i32 @syntax_property_with_flags(i32 %157, i1 zeroext true)
  store i32 %call289, i32* %prev_from_syntax, align 4
  br label %do.body.290

do.body.290:                                      ; preds = %cond.end.287
  %158 = load i64, i64* %from.addr, align 8
  %inc = add nsw i64 %158, 1
  store i64 %inc, i64* %from.addr, align 8
  %159 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_291 = getelementptr inbounds %struct.buffer, %struct.buffer* %159, i32 0, i32 39
  %160 = load i64, i64* %enable_multibyte_characters_291, align 8
  %call292 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp293 = icmp eq i64 %160, %call292
  br i1 %cmp293, label %if.then.295, label %if.else.297

if.then.295:                                      ; preds = %do.body.290
  %161 = load i64, i64* %from_byte.addr, align 8
  %inc296 = add nsw i64 %161, 1
  store i64 %inc296, i64* %from_byte.addr, align 8
  br label %if.end.344

if.else.297:                                      ; preds = %do.body.290
  br label %do.body.298

do.body.298:                                      ; preds = %if.else.297
  %162 = load i64, i64* %from_byte.addr, align 8
  %163 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text300 = getelementptr inbounds %struct.buffer, %struct.buffer* %163, i32 0, i32 73
  %164 = load %struct.buffer_text*, %struct.buffer_text** %text300, align 8
  %gpt_byte301 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %164, i32 0, i32 3
  %165 = load i64, i64* %gpt_byte301, align 8
  %cmp302 = icmp sge i64 %162, %165
  br i1 %cmp302, label %cond.true.304, label %cond.false.307

cond.true.304:                                    ; preds = %do.body.298
  %166 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text305 = getelementptr inbounds %struct.buffer, %struct.buffer* %166, i32 0, i32 73
  %167 = load %struct.buffer_text*, %struct.buffer_text** %text305, align 8
  %gap_size306 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %167, i32 0, i32 5
  %168 = load i64, i64* %gap_size306, align 8
  br label %cond.end.308

cond.false.307:                                   ; preds = %do.body.298
  br label %cond.end.308

cond.end.308:                                     ; preds = %cond.false.307, %cond.true.304
  %cond309 = phi i64 [ %168, %cond.true.304 ], [ 0, %cond.false.307 ]
  %169 = load i64, i64* %from_byte.addr, align 8
  %add310 = add nsw i64 %cond309, %169
  %170 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text311 = getelementptr inbounds %struct.buffer, %struct.buffer* %170, i32 0, i32 73
  %171 = load %struct.buffer_text*, %struct.buffer_text** %text311, align 8
  %beg312 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %171, i32 0, i32 0
  %172 = load i8*, i8** %beg312, align 8
  %add.ptr313 = getelementptr inbounds i8, i8* %172, i64 %add310
  %add.ptr314 = getelementptr inbounds i8, i8* %add.ptr313, i64 -1
  store i8* %add.ptr314, i8** %chp299, align 8
  %173 = load i8*, i8** %chp299, align 8
  %174 = load i8, i8* %173, align 1
  %conv315 = zext i8 %174 to i32
  %and316 = and i32 %conv315, 128
  %tobool317 = icmp ne i32 %and316, 0
  br i1 %tobool317, label %cond.false.319, label %cond.true.318

cond.true.318:                                    ; preds = %cond.end.308
  br label %cond.end.339

cond.false.319:                                   ; preds = %cond.end.308
  %175 = load i8*, i8** %chp299, align 8
  %176 = load i8, i8* %175, align 1
  %conv320 = zext i8 %176 to i32
  %and321 = and i32 %conv320, 32
  %tobool322 = icmp ne i32 %and321, 0
  br i1 %tobool322, label %cond.false.324, label %cond.true.323

cond.true.323:                                    ; preds = %cond.false.319
  br label %cond.end.337

cond.false.324:                                   ; preds = %cond.false.319
  %177 = load i8*, i8** %chp299, align 8
  %178 = load i8, i8* %177, align 1
  %conv325 = zext i8 %178 to i32
  %and326 = and i32 %conv325, 16
  %tobool327 = icmp ne i32 %and326, 0
  br i1 %tobool327, label %cond.false.329, label %cond.true.328

cond.true.328:                                    ; preds = %cond.false.324
  br label %cond.end.335

cond.false.329:                                   ; preds = %cond.false.324
  %179 = load i8*, i8** %chp299, align 8
  %180 = load i8, i8* %179, align 1
  %conv330 = zext i8 %180 to i32
  %and331 = and i32 %conv330, 8
  %tobool332 = icmp ne i32 %and331, 0
  %lnot333 = xor i1 %tobool332, true
  %cond334 = select i1 %lnot333, i32 4, i32 5
  br label %cond.end.335

cond.end.335:                                     ; preds = %cond.false.329, %cond.true.328
  %cond336 = phi i32 [ 3, %cond.true.328 ], [ %cond334, %cond.false.329 ]
  br label %cond.end.337

cond.end.337:                                     ; preds = %cond.end.335, %cond.true.323
  %cond338 = phi i32 [ 2, %cond.true.323 ], [ %cond336, %cond.end.335 ]
  br label %cond.end.339

cond.end.339:                                     ; preds = %cond.end.337, %cond.true.318
  %cond340 = phi i32 [ 1, %cond.true.318 ], [ %cond338, %cond.end.337 ]
  %conv341 = sext i32 %cond340 to i64
  %181 = load i64, i64* %from_byte.addr, align 8
  %add342 = add nsw i64 %181, %conv341
  store i64 %add342, i64* %from_byte.addr, align 8
  br label %do.end.343

do.end.343:                                       ; preds = %cond.end.339
  br label %if.end.344

if.end.344:                                       ; preds = %do.end.343, %if.then.295
  br label %do.end.345

do.end.345:                                       ; preds = %if.end.344
  %182 = load i64, i64* %from.addr, align 8
  %183 = load i64, i64* %end.addr, align 8
  %cmp346 = icmp slt i64 %182, %183
  br i1 %cmp346, label %if.then.348, label %if.end.349

if.then.348:                                      ; preds = %do.end.345
  %184 = load i64, i64* %from.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_FORWARD(i64 %184)
  br label %if.end.349

if.end.349:                                       ; preds = %if.then.348, %do.end.345
  br label %do.end.350

do.end.350:                                       ; preds = %if.end.349
  %185 = load i32, i32* %prev_from_syntax, align 4
  %and351 = and i32 %185, 255
  store i32 %and351, i32* %code, align 4
  %186 = load i64, i64* %from.addr, align 8
  %187 = load i64, i64* %end.addr, align 8
  %cmp352 = icmp slt i64 %186, %187
  br i1 %cmp352, label %land.lhs.true.354, label %if.else.551

land.lhs.true.354:                                ; preds = %do.end.350
  %188 = load i32, i32* %prev_from_syntax, align 4
  %call355 = call zeroext i1 @SYNTAX_FLAGS_COMSTART_FIRST(i32 %188)
  br i1 %call355, label %land.lhs.true.357, label %if.else.551

land.lhs.true.357:                                ; preds = %land.lhs.true.354
  %189 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_358 = getelementptr inbounds %struct.buffer, %struct.buffer* %189, i32 0, i32 39
  %190 = load i64, i64* %enable_multibyte_characters_358, align 8
  %call359 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp360 = icmp eq i64 %190, %call359
  br i1 %cmp360, label %cond.false.364, label %cond.true.362

cond.true.362:                                    ; preds = %land.lhs.true.357
  %191 = load i64, i64* %from_byte.addr, align 8
  %call363 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %191)
  br label %cond.end.381

cond.false.364:                                   ; preds = %land.lhs.true.357
  %192 = load i64, i64* %from_byte.addr, align 8
  %193 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text365 = getelementptr inbounds %struct.buffer, %struct.buffer* %193, i32 0, i32 73
  %194 = load %struct.buffer_text*, %struct.buffer_text** %text365, align 8
  %gpt_byte366 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %194, i32 0, i32 3
  %195 = load i64, i64* %gpt_byte366, align 8
  %cmp367 = icmp sge i64 %192, %195
  br i1 %cmp367, label %cond.true.369, label %cond.false.372

cond.true.369:                                    ; preds = %cond.false.364
  %196 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text370 = getelementptr inbounds %struct.buffer, %struct.buffer* %196, i32 0, i32 73
  %197 = load %struct.buffer_text*, %struct.buffer_text** %text370, align 8
  %gap_size371 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %197, i32 0, i32 5
  %198 = load i64, i64* %gap_size371, align 8
  br label %cond.end.373

cond.false.372:                                   ; preds = %cond.false.364
  br label %cond.end.373

cond.end.373:                                     ; preds = %cond.false.372, %cond.true.369
  %cond374 = phi i64 [ %198, %cond.true.369 ], [ 0, %cond.false.372 ]
  %199 = load i64, i64* %from_byte.addr, align 8
  %add375 = add nsw i64 %cond374, %199
  %200 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text376 = getelementptr inbounds %struct.buffer, %struct.buffer* %200, i32 0, i32 73
  %201 = load %struct.buffer_text*, %struct.buffer_text** %text376, align 8
  %beg377 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %201, i32 0, i32 0
  %202 = load i8*, i8** %beg377, align 8
  %add.ptr378 = getelementptr inbounds i8, i8* %202, i64 %add375
  %add.ptr379 = getelementptr inbounds i8, i8* %add.ptr378, i64 -1
  %203 = load i8, i8* %add.ptr379, align 1
  %conv380 = zext i8 %203 to i32
  br label %cond.end.381

cond.end.381:                                     ; preds = %cond.end.373, %cond.true.362
  %cond382 = phi i32 [ %call363, %cond.true.362 ], [ %conv380, %cond.end.373 ]
  store i32 %cond382, i32* %c1, align 4
  %204 = load i32, i32* %c1, align 4
  %call383 = call i32 @syntax_property_with_flags(i32 %204, i1 zeroext true)
  store i32 %call383, i32* %syntax, align 4
  %205 = load i32, i32* %syntax, align 4
  %call384 = call zeroext i1 @SYNTAX_FLAGS_COMSTART_SECOND(i32 %205)
  br i1 %call384, label %if.then.386, label %if.else.551

if.then.386:                                      ; preds = %cond.end.381
  %206 = load i32, i32* %syntax, align 4
  %207 = load i32, i32* %prev_from_syntax, align 4
  %call387 = call i32 @SYNTAX_FLAGS_COMMENT_STYLE(i32 %206, i32 %207)
  %comstyle388 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 3
  store i32 %call387, i32* %comstyle388, align 4
  %208 = load i32, i32* %prev_from_syntax, align 4
  %call389 = call zeroext i1 @SYNTAX_FLAGS_COMMENT_NESTED(i32 %208)
  %conv390 = zext i1 %call389 to i32
  %209 = load i32, i32* %syntax, align 4
  %call391 = call zeroext i1 @SYNTAX_FLAGS_COMMENT_NESTED(i32 %209)
  %conv392 = zext i1 %call391 to i32
  %or = or i32 %conv390, %conv392
  %tobool393 = icmp ne i32 %or, 0
  %frombool394 = zext i1 %tobool393 to i8
  store i8 %frombool394, i8* %comnested, align 1
  %210 = load i8, i8* %comnested, align 1
  %tobool395 = trunc i8 %210 to i1
  %cond397 = select i1 %tobool395, i32 1, i32 -1
  %conv398 = sext i32 %cond397 to i64
  %incomment399 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 2
  store i64 %conv398, i64* %incomment399, align 8
  %211 = load i64, i64* %prev_from, align 8
  %comstr_start400 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 10
  store i64 %211, i64* %comstr_start400, align 8
  br label %do.body.401

do.body.401:                                      ; preds = %if.then.386
  %212 = load i64, i64* %from.addr, align 8
  store i64 %212, i64* %prev_from, align 8
  %213 = load i64, i64* %from_byte.addr, align 8
  store i64 %213, i64* %prev_from_byte, align 8
  %214 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_402 = getelementptr inbounds %struct.buffer, %struct.buffer* %214, i32 0, i32 39
  %215 = load i64, i64* %enable_multibyte_characters_402, align 8
  %call403 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp404 = icmp eq i64 %215, %call403
  br i1 %cmp404, label %cond.false.408, label %cond.true.406

cond.true.406:                                    ; preds = %do.body.401
  %216 = load i64, i64* %prev_from_byte, align 8
  %call407 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %216)
  br label %cond.end.486

cond.false.408:                                   ; preds = %do.body.401
  br i1 true, label %cond.true.409, label %cond.false.429

cond.true.409:                                    ; preds = %cond.false.408
  %217 = load i64, i64* %prev_from_byte, align 8
  %218 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text410 = getelementptr inbounds %struct.buffer, %struct.buffer* %218, i32 0, i32 73
  %219 = load %struct.buffer_text*, %struct.buffer_text** %text410, align 8
  %gpt_byte411 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %219, i32 0, i32 3
  %220 = load i64, i64* %gpt_byte411, align 8
  %cmp412 = icmp sge i64 %217, %220
  br i1 %cmp412, label %cond.true.414, label %cond.false.417

cond.true.414:                                    ; preds = %cond.true.409
  %221 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text415 = getelementptr inbounds %struct.buffer, %struct.buffer* %221, i32 0, i32 73
  %222 = load %struct.buffer_text*, %struct.buffer_text** %text415, align 8
  %gap_size416 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %222, i32 0, i32 5
  %223 = load i64, i64* %gap_size416, align 8
  br label %cond.end.418

cond.false.417:                                   ; preds = %cond.true.409
  br label %cond.end.418

cond.end.418:                                     ; preds = %cond.false.417, %cond.true.414
  %cond419 = phi i64 [ %223, %cond.true.414 ], [ 0, %cond.false.417 ]
  %224 = load i64, i64* %prev_from_byte, align 8
  %add420 = add nsw i64 %cond419, %224
  %225 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text421 = getelementptr inbounds %struct.buffer, %struct.buffer* %225, i32 0, i32 73
  %226 = load %struct.buffer_text*, %struct.buffer_text** %text421, align 8
  %beg422 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %226, i32 0, i32 0
  %227 = load i8*, i8** %beg422, align 8
  %add.ptr423 = getelementptr inbounds i8, i8* %227, i64 %add420
  %add.ptr424 = getelementptr inbounds i8, i8* %add.ptr423, i64 -1
  %228 = load i8, i8* %add.ptr424, align 1
  %conv425 = zext i8 %228 to i32
  %add426 = add i32 %conv425, 0
  %cmp427 = icmp ult i32 %add426, 128
  br i1 %cmp427, label %cond.true.449, label %cond.false.466

cond.false.429:                                   ; preds = %cond.false.408
  %229 = load i64, i64* %prev_from_byte, align 8
  %230 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text430 = getelementptr inbounds %struct.buffer, %struct.buffer* %230, i32 0, i32 73
  %231 = load %struct.buffer_text*, %struct.buffer_text** %text430, align 8
  %gpt_byte431 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %231, i32 0, i32 3
  %232 = load i64, i64* %gpt_byte431, align 8
  %cmp432 = icmp sge i64 %229, %232
  br i1 %cmp432, label %cond.true.434, label %cond.false.437

cond.true.434:                                    ; preds = %cond.false.429
  %233 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text435 = getelementptr inbounds %struct.buffer, %struct.buffer* %233, i32 0, i32 73
  %234 = load %struct.buffer_text*, %struct.buffer_text** %text435, align 8
  %gap_size436 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %234, i32 0, i32 5
  %235 = load i64, i64* %gap_size436, align 8
  br label %cond.end.438

cond.false.437:                                   ; preds = %cond.false.429
  br label %cond.end.438

cond.end.438:                                     ; preds = %cond.false.437, %cond.true.434
  %cond439 = phi i64 [ %235, %cond.true.434 ], [ 0, %cond.false.437 ]
  %236 = load i64, i64* %prev_from_byte, align 8
  %add440 = add nsw i64 %cond439, %236
  %237 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text441 = getelementptr inbounds %struct.buffer, %struct.buffer* %237, i32 0, i32 73
  %238 = load %struct.buffer_text*, %struct.buffer_text** %text441, align 8
  %beg442 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %238, i32 0, i32 0
  %239 = load i8*, i8** %beg442, align 8
  %add.ptr443 = getelementptr inbounds i8, i8* %239, i64 %add440
  %add.ptr444 = getelementptr inbounds i8, i8* %add.ptr443, i64 -1
  %240 = load i8, i8* %add.ptr444, align 1
  %conv445 = zext i8 %240 to i64
  %add446 = add i64 %conv445, 0
  %cmp447 = icmp ult i64 %add446, 128
  br i1 %cmp447, label %cond.true.449, label %cond.false.466

cond.true.449:                                    ; preds = %cond.end.438, %cond.end.418
  %241 = load i64, i64* %prev_from_byte, align 8
  %242 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text450 = getelementptr inbounds %struct.buffer, %struct.buffer* %242, i32 0, i32 73
  %243 = load %struct.buffer_text*, %struct.buffer_text** %text450, align 8
  %gpt_byte451 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %243, i32 0, i32 3
  %244 = load i64, i64* %gpt_byte451, align 8
  %cmp452 = icmp sge i64 %241, %244
  br i1 %cmp452, label %cond.true.454, label %cond.false.457

cond.true.454:                                    ; preds = %cond.true.449
  %245 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text455 = getelementptr inbounds %struct.buffer, %struct.buffer* %245, i32 0, i32 73
  %246 = load %struct.buffer_text*, %struct.buffer_text** %text455, align 8
  %gap_size456 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %246, i32 0, i32 5
  %247 = load i64, i64* %gap_size456, align 8
  br label %cond.end.458

cond.false.457:                                   ; preds = %cond.true.449
  br label %cond.end.458

cond.end.458:                                     ; preds = %cond.false.457, %cond.true.454
  %cond459 = phi i64 [ %247, %cond.true.454 ], [ 0, %cond.false.457 ]
  %248 = load i64, i64* %prev_from_byte, align 8
  %add460 = add nsw i64 %cond459, %248
  %249 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text461 = getelementptr inbounds %struct.buffer, %struct.buffer* %249, i32 0, i32 73
  %250 = load %struct.buffer_text*, %struct.buffer_text** %text461, align 8
  %beg462 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %250, i32 0, i32 0
  %251 = load i8*, i8** %beg462, align 8
  %add.ptr463 = getelementptr inbounds i8, i8* %251, i64 %add460
  %add.ptr464 = getelementptr inbounds i8, i8* %add.ptr463, i64 -1
  %252 = load i8, i8* %add.ptr464, align 1
  %conv465 = zext i8 %252 to i32
  br label %cond.end.484

cond.false.466:                                   ; preds = %cond.end.438, %cond.end.418
  %253 = load i64, i64* %prev_from_byte, align 8
  %254 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text467 = getelementptr inbounds %struct.buffer, %struct.buffer* %254, i32 0, i32 73
  %255 = load %struct.buffer_text*, %struct.buffer_text** %text467, align 8
  %gpt_byte468 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %255, i32 0, i32 3
  %256 = load i64, i64* %gpt_byte468, align 8
  %cmp469 = icmp sge i64 %253, %256
  br i1 %cmp469, label %cond.true.471, label %cond.false.474

cond.true.471:                                    ; preds = %cond.false.466
  %257 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text472 = getelementptr inbounds %struct.buffer, %struct.buffer* %257, i32 0, i32 73
  %258 = load %struct.buffer_text*, %struct.buffer_text** %text472, align 8
  %gap_size473 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %258, i32 0, i32 5
  %259 = load i64, i64* %gap_size473, align 8
  br label %cond.end.475

cond.false.474:                                   ; preds = %cond.false.466
  br label %cond.end.475

cond.end.475:                                     ; preds = %cond.false.474, %cond.true.471
  %cond476 = phi i64 [ %259, %cond.true.471 ], [ 0, %cond.false.474 ]
  %260 = load i64, i64* %prev_from_byte, align 8
  %add477 = add nsw i64 %cond476, %260
  %261 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text478 = getelementptr inbounds %struct.buffer, %struct.buffer* %261, i32 0, i32 73
  %262 = load %struct.buffer_text*, %struct.buffer_text** %text478, align 8
  %beg479 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %262, i32 0, i32 0
  %263 = load i8*, i8** %beg479, align 8
  %add.ptr480 = getelementptr inbounds i8, i8* %263, i64 %add477
  %add.ptr481 = getelementptr inbounds i8, i8* %add.ptr480, i64 -1
  %264 = load i8, i8* %add.ptr481, align 1
  %conv482 = zext i8 %264 to i32
  %add483 = add nsw i32 %conv482, 4194048
  br label %cond.end.484

cond.end.484:                                     ; preds = %cond.end.475, %cond.end.458
  %cond485 = phi i32 [ %conv465, %cond.end.458 ], [ %add483, %cond.end.475 ]
  br label %cond.end.486

cond.end.486:                                     ; preds = %cond.end.484, %cond.true.406
  %cond487 = phi i32 [ %call407, %cond.true.406 ], [ %cond485, %cond.end.484 ]
  store i32 %cond487, i32* %temp, align 4
  %265 = load i32, i32* %temp, align 4
  %call488 = call i32 @syntax_property_with_flags(i32 %265, i1 zeroext true)
  store i32 %call488, i32* %prev_from_syntax, align 4
  br label %do.body.489

do.body.489:                                      ; preds = %cond.end.486
  %266 = load i64, i64* %from.addr, align 8
  %inc490 = add nsw i64 %266, 1
  store i64 %inc490, i64* %from.addr, align 8
  %267 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_491 = getelementptr inbounds %struct.buffer, %struct.buffer* %267, i32 0, i32 39
  %268 = load i64, i64* %enable_multibyte_characters_491, align 8
  %call492 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp493 = icmp eq i64 %268, %call492
  br i1 %cmp493, label %if.then.495, label %if.else.497

if.then.495:                                      ; preds = %do.body.489
  %269 = load i64, i64* %from_byte.addr, align 8
  %inc496 = add nsw i64 %269, 1
  store i64 %inc496, i64* %from_byte.addr, align 8
  br label %if.end.544

if.else.497:                                      ; preds = %do.body.489
  br label %do.body.498

do.body.498:                                      ; preds = %if.else.497
  %270 = load i64, i64* %from_byte.addr, align 8
  %271 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text500 = getelementptr inbounds %struct.buffer, %struct.buffer* %271, i32 0, i32 73
  %272 = load %struct.buffer_text*, %struct.buffer_text** %text500, align 8
  %gpt_byte501 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %272, i32 0, i32 3
  %273 = load i64, i64* %gpt_byte501, align 8
  %cmp502 = icmp sge i64 %270, %273
  br i1 %cmp502, label %cond.true.504, label %cond.false.507

cond.true.504:                                    ; preds = %do.body.498
  %274 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text505 = getelementptr inbounds %struct.buffer, %struct.buffer* %274, i32 0, i32 73
  %275 = load %struct.buffer_text*, %struct.buffer_text** %text505, align 8
  %gap_size506 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %275, i32 0, i32 5
  %276 = load i64, i64* %gap_size506, align 8
  br label %cond.end.508

cond.false.507:                                   ; preds = %do.body.498
  br label %cond.end.508

cond.end.508:                                     ; preds = %cond.false.507, %cond.true.504
  %cond509 = phi i64 [ %276, %cond.true.504 ], [ 0, %cond.false.507 ]
  %277 = load i64, i64* %from_byte.addr, align 8
  %add510 = add nsw i64 %cond509, %277
  %278 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text511 = getelementptr inbounds %struct.buffer, %struct.buffer* %278, i32 0, i32 73
  %279 = load %struct.buffer_text*, %struct.buffer_text** %text511, align 8
  %beg512 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %279, i32 0, i32 0
  %280 = load i8*, i8** %beg512, align 8
  %add.ptr513 = getelementptr inbounds i8, i8* %280, i64 %add510
  %add.ptr514 = getelementptr inbounds i8, i8* %add.ptr513, i64 -1
  store i8* %add.ptr514, i8** %chp499, align 8
  %281 = load i8*, i8** %chp499, align 8
  %282 = load i8, i8* %281, align 1
  %conv515 = zext i8 %282 to i32
  %and516 = and i32 %conv515, 128
  %tobool517 = icmp ne i32 %and516, 0
  br i1 %tobool517, label %cond.false.519, label %cond.true.518

cond.true.518:                                    ; preds = %cond.end.508
  br label %cond.end.539

cond.false.519:                                   ; preds = %cond.end.508
  %283 = load i8*, i8** %chp499, align 8
  %284 = load i8, i8* %283, align 1
  %conv520 = zext i8 %284 to i32
  %and521 = and i32 %conv520, 32
  %tobool522 = icmp ne i32 %and521, 0
  br i1 %tobool522, label %cond.false.524, label %cond.true.523

cond.true.523:                                    ; preds = %cond.false.519
  br label %cond.end.537

cond.false.524:                                   ; preds = %cond.false.519
  %285 = load i8*, i8** %chp499, align 8
  %286 = load i8, i8* %285, align 1
  %conv525 = zext i8 %286 to i32
  %and526 = and i32 %conv525, 16
  %tobool527 = icmp ne i32 %and526, 0
  br i1 %tobool527, label %cond.false.529, label %cond.true.528

cond.true.528:                                    ; preds = %cond.false.524
  br label %cond.end.535

cond.false.529:                                   ; preds = %cond.false.524
  %287 = load i8*, i8** %chp499, align 8
  %288 = load i8, i8* %287, align 1
  %conv530 = zext i8 %288 to i32
  %and531 = and i32 %conv530, 8
  %tobool532 = icmp ne i32 %and531, 0
  %lnot533 = xor i1 %tobool532, true
  %cond534 = select i1 %lnot533, i32 4, i32 5
  br label %cond.end.535

cond.end.535:                                     ; preds = %cond.false.529, %cond.true.528
  %cond536 = phi i32 [ 3, %cond.true.528 ], [ %cond534, %cond.false.529 ]
  br label %cond.end.537

cond.end.537:                                     ; preds = %cond.end.535, %cond.true.523
  %cond538 = phi i32 [ 2, %cond.true.523 ], [ %cond536, %cond.end.535 ]
  br label %cond.end.539

cond.end.539:                                     ; preds = %cond.end.537, %cond.true.518
  %cond540 = phi i32 [ 1, %cond.true.518 ], [ %cond538, %cond.end.537 ]
  %conv541 = sext i32 %cond540 to i64
  %289 = load i64, i64* %from_byte.addr, align 8
  %add542 = add nsw i64 %289, %conv541
  store i64 %add542, i64* %from_byte.addr, align 8
  br label %do.end.543

do.end.543:                                       ; preds = %cond.end.539
  br label %if.end.544

if.end.544:                                       ; preds = %do.end.543, %if.then.495
  br label %do.end.545

do.end.545:                                       ; preds = %if.end.544
  %290 = load i64, i64* %from.addr, align 8
  %291 = load i64, i64* %end.addr, align 8
  %cmp546 = icmp slt i64 %290, %291
  br i1 %cmp546, label %if.then.548, label %if.end.549

if.then.548:                                      ; preds = %do.end.545
  %292 = load i64, i64* %from.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_FORWARD(i64 %292)
  br label %if.end.549

if.end.549:                                       ; preds = %if.then.548, %do.end.545
  br label %do.end.550

do.end.550:                                       ; preds = %if.end.549
  store i32 11, i32* %code, align 4
  br label %if.end.572

if.else.551:                                      ; preds = %cond.end.381, %land.lhs.true.354, %do.end.350
  %293 = load i32, i32* %code, align 4
  %cmp552 = icmp eq i32 %293, 14
  br i1 %cmp552, label %if.then.554, label %if.else.558

if.then.554:                                      ; preds = %if.else.551
  %comstyle555 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 3
  store i32 257, i32* %comstyle555, align 4
  %incomment556 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 2
  store i64 -1, i64* %incomment556, align 8
  %294 = load i64, i64* %prev_from, align 8
  %comstr_start557 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 10
  store i64 %294, i64* %comstr_start557, align 8
  store i32 11, i32* %code, align 4
  br label %if.end.571

if.else.558:                                      ; preds = %if.else.551
  %295 = load i32, i32* %code, align 4
  %cmp559 = icmp eq i32 %295, 11
  br i1 %cmp559, label %if.then.561, label %if.end.570

if.then.561:                                      ; preds = %if.else.558
  %296 = load i32, i32* %prev_from_syntax, align 4
  %call562 = call i32 @SYNTAX_FLAGS_COMMENT_STYLE(i32 %296, i32 0)
  %comstyle563 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 3
  store i32 %call562, i32* %comstyle563, align 4
  %297 = load i32, i32* %prev_from_syntax, align 4
  %call564 = call zeroext i1 @SYNTAX_FLAGS_COMMENT_NESTED(i32 %297)
  %cond566 = select i1 %call564, i32 1, i32 -1
  %conv567 = sext i32 %cond566 to i64
  %incomment568 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 2
  store i64 %conv567, i64* %incomment568, align 8
  %298 = load i64, i64* %prev_from, align 8
  %comstr_start569 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 10
  store i64 %298, i64* %comstr_start569, align 8
  br label %if.end.570

if.end.570:                                       ; preds = %if.then.561, %if.else.558
  br label %if.end.571

if.end.571:                                       ; preds = %if.end.570, %if.then.554
  br label %if.end.572

if.end.572:                                       ; preds = %if.end.571, %do.end.550
  %299 = load i32, i32* %prev_from_syntax, align 4
  %call573 = call zeroext i1 @SYNTAX_FLAGS_PREFIX(i32 %299)
  br i1 %call573, label %if.then.574, label %if.end.575

if.then.574:                                      ; preds = %if.end.572
  br label %while.cond.198

if.end.575:                                       ; preds = %if.end.572
  %300 = load i32, i32* %code, align 4
  switch i32 %300, label %sw.default.2035 [
    i32 9, label %sw.bb
    i32 10, label %sw.bb
    i32 2, label %sw.bb.734
    i32 3, label %sw.bb.734
    i32 14, label %sw.bb.1139
    i32 11, label %sw.bb.1139
    i32 4, label %sw.bb.1320
    i32 5, label %sw.bb.1338
    i32 7, label %sw.bb.1356
    i32 15, label %sw.bb.1356
    i32 8, label %sw.bb.2034
  ]

sw.bb:                                            ; preds = %if.end.575, %if.end.575
  %301 = load i8, i8* %stopbefore.addr, align 1
  %tobool576 = trunc i8 %301 to i1
  br i1 %tobool576, label %if.then.577, label %if.end.578

if.then.577:                                      ; preds = %sw.bb
  br label %stop

if.end.578:                                       ; preds = %sw.bb
  %302 = load i64, i64* %prev_from, align 8
  %303 = load %struct.level*, %struct.level** %curlevel, align 8
  %last579 = getelementptr inbounds %struct.level, %struct.level* %303, i32 0, i32 0
  store i64 %302, i64* %last579, align 8
  br label %startquoted

startquoted:                                      ; preds = %if.end.578, %if.then.195
  %304 = load i64, i64* %from.addr, align 8
  %305 = load i64, i64* %end.addr, align 8
  %cmp580 = icmp eq i64 %304, %305
  br i1 %cmp580, label %if.then.582, label %if.end.583

if.then.582:                                      ; preds = %startquoted
  br label %endquoted

if.end.583:                                       ; preds = %startquoted
  br label %do.body.584

do.body.584:                                      ; preds = %if.end.583
  %306 = load i64, i64* %from.addr, align 8
  store i64 %306, i64* %prev_from, align 8
  %307 = load i64, i64* %from_byte.addr, align 8
  store i64 %307, i64* %prev_from_byte, align 8
  %308 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_585 = getelementptr inbounds %struct.buffer, %struct.buffer* %308, i32 0, i32 39
  %309 = load i64, i64* %enable_multibyte_characters_585, align 8
  %call586 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp587 = icmp eq i64 %309, %call586
  br i1 %cmp587, label %cond.false.591, label %cond.true.589

cond.true.589:                                    ; preds = %do.body.584
  %310 = load i64, i64* %prev_from_byte, align 8
  %call590 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %310)
  br label %cond.end.669

cond.false.591:                                   ; preds = %do.body.584
  br i1 true, label %cond.true.592, label %cond.false.612

cond.true.592:                                    ; preds = %cond.false.591
  %311 = load i64, i64* %prev_from_byte, align 8
  %312 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text593 = getelementptr inbounds %struct.buffer, %struct.buffer* %312, i32 0, i32 73
  %313 = load %struct.buffer_text*, %struct.buffer_text** %text593, align 8
  %gpt_byte594 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %313, i32 0, i32 3
  %314 = load i64, i64* %gpt_byte594, align 8
  %cmp595 = icmp sge i64 %311, %314
  br i1 %cmp595, label %cond.true.597, label %cond.false.600

cond.true.597:                                    ; preds = %cond.true.592
  %315 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text598 = getelementptr inbounds %struct.buffer, %struct.buffer* %315, i32 0, i32 73
  %316 = load %struct.buffer_text*, %struct.buffer_text** %text598, align 8
  %gap_size599 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %316, i32 0, i32 5
  %317 = load i64, i64* %gap_size599, align 8
  br label %cond.end.601

cond.false.600:                                   ; preds = %cond.true.592
  br label %cond.end.601

cond.end.601:                                     ; preds = %cond.false.600, %cond.true.597
  %cond602 = phi i64 [ %317, %cond.true.597 ], [ 0, %cond.false.600 ]
  %318 = load i64, i64* %prev_from_byte, align 8
  %add603 = add nsw i64 %cond602, %318
  %319 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text604 = getelementptr inbounds %struct.buffer, %struct.buffer* %319, i32 0, i32 73
  %320 = load %struct.buffer_text*, %struct.buffer_text** %text604, align 8
  %beg605 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %320, i32 0, i32 0
  %321 = load i8*, i8** %beg605, align 8
  %add.ptr606 = getelementptr inbounds i8, i8* %321, i64 %add603
  %add.ptr607 = getelementptr inbounds i8, i8* %add.ptr606, i64 -1
  %322 = load i8, i8* %add.ptr607, align 1
  %conv608 = zext i8 %322 to i32
  %add609 = add i32 %conv608, 0
  %cmp610 = icmp ult i32 %add609, 128
  br i1 %cmp610, label %cond.true.632, label %cond.false.649

cond.false.612:                                   ; preds = %cond.false.591
  %323 = load i64, i64* %prev_from_byte, align 8
  %324 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text613 = getelementptr inbounds %struct.buffer, %struct.buffer* %324, i32 0, i32 73
  %325 = load %struct.buffer_text*, %struct.buffer_text** %text613, align 8
  %gpt_byte614 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %325, i32 0, i32 3
  %326 = load i64, i64* %gpt_byte614, align 8
  %cmp615 = icmp sge i64 %323, %326
  br i1 %cmp615, label %cond.true.617, label %cond.false.620

cond.true.617:                                    ; preds = %cond.false.612
  %327 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text618 = getelementptr inbounds %struct.buffer, %struct.buffer* %327, i32 0, i32 73
  %328 = load %struct.buffer_text*, %struct.buffer_text** %text618, align 8
  %gap_size619 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %328, i32 0, i32 5
  %329 = load i64, i64* %gap_size619, align 8
  br label %cond.end.621

cond.false.620:                                   ; preds = %cond.false.612
  br label %cond.end.621

cond.end.621:                                     ; preds = %cond.false.620, %cond.true.617
  %cond622 = phi i64 [ %329, %cond.true.617 ], [ 0, %cond.false.620 ]
  %330 = load i64, i64* %prev_from_byte, align 8
  %add623 = add nsw i64 %cond622, %330
  %331 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text624 = getelementptr inbounds %struct.buffer, %struct.buffer* %331, i32 0, i32 73
  %332 = load %struct.buffer_text*, %struct.buffer_text** %text624, align 8
  %beg625 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %332, i32 0, i32 0
  %333 = load i8*, i8** %beg625, align 8
  %add.ptr626 = getelementptr inbounds i8, i8* %333, i64 %add623
  %add.ptr627 = getelementptr inbounds i8, i8* %add.ptr626, i64 -1
  %334 = load i8, i8* %add.ptr627, align 1
  %conv628 = zext i8 %334 to i64
  %add629 = add i64 %conv628, 0
  %cmp630 = icmp ult i64 %add629, 128
  br i1 %cmp630, label %cond.true.632, label %cond.false.649

cond.true.632:                                    ; preds = %cond.end.621, %cond.end.601
  %335 = load i64, i64* %prev_from_byte, align 8
  %336 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text633 = getelementptr inbounds %struct.buffer, %struct.buffer* %336, i32 0, i32 73
  %337 = load %struct.buffer_text*, %struct.buffer_text** %text633, align 8
  %gpt_byte634 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %337, i32 0, i32 3
  %338 = load i64, i64* %gpt_byte634, align 8
  %cmp635 = icmp sge i64 %335, %338
  br i1 %cmp635, label %cond.true.637, label %cond.false.640

cond.true.637:                                    ; preds = %cond.true.632
  %339 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text638 = getelementptr inbounds %struct.buffer, %struct.buffer* %339, i32 0, i32 73
  %340 = load %struct.buffer_text*, %struct.buffer_text** %text638, align 8
  %gap_size639 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %340, i32 0, i32 5
  %341 = load i64, i64* %gap_size639, align 8
  br label %cond.end.641

cond.false.640:                                   ; preds = %cond.true.632
  br label %cond.end.641

cond.end.641:                                     ; preds = %cond.false.640, %cond.true.637
  %cond642 = phi i64 [ %341, %cond.true.637 ], [ 0, %cond.false.640 ]
  %342 = load i64, i64* %prev_from_byte, align 8
  %add643 = add nsw i64 %cond642, %342
  %343 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text644 = getelementptr inbounds %struct.buffer, %struct.buffer* %343, i32 0, i32 73
  %344 = load %struct.buffer_text*, %struct.buffer_text** %text644, align 8
  %beg645 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %344, i32 0, i32 0
  %345 = load i8*, i8** %beg645, align 8
  %add.ptr646 = getelementptr inbounds i8, i8* %345, i64 %add643
  %add.ptr647 = getelementptr inbounds i8, i8* %add.ptr646, i64 -1
  %346 = load i8, i8* %add.ptr647, align 1
  %conv648 = zext i8 %346 to i32
  br label %cond.end.667

cond.false.649:                                   ; preds = %cond.end.621, %cond.end.601
  %347 = load i64, i64* %prev_from_byte, align 8
  %348 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text650 = getelementptr inbounds %struct.buffer, %struct.buffer* %348, i32 0, i32 73
  %349 = load %struct.buffer_text*, %struct.buffer_text** %text650, align 8
  %gpt_byte651 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %349, i32 0, i32 3
  %350 = load i64, i64* %gpt_byte651, align 8
  %cmp652 = icmp sge i64 %347, %350
  br i1 %cmp652, label %cond.true.654, label %cond.false.657

cond.true.654:                                    ; preds = %cond.false.649
  %351 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text655 = getelementptr inbounds %struct.buffer, %struct.buffer* %351, i32 0, i32 73
  %352 = load %struct.buffer_text*, %struct.buffer_text** %text655, align 8
  %gap_size656 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %352, i32 0, i32 5
  %353 = load i64, i64* %gap_size656, align 8
  br label %cond.end.658

cond.false.657:                                   ; preds = %cond.false.649
  br label %cond.end.658

cond.end.658:                                     ; preds = %cond.false.657, %cond.true.654
  %cond659 = phi i64 [ %353, %cond.true.654 ], [ 0, %cond.false.657 ]
  %354 = load i64, i64* %prev_from_byte, align 8
  %add660 = add nsw i64 %cond659, %354
  %355 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text661 = getelementptr inbounds %struct.buffer, %struct.buffer* %355, i32 0, i32 73
  %356 = load %struct.buffer_text*, %struct.buffer_text** %text661, align 8
  %beg662 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %356, i32 0, i32 0
  %357 = load i8*, i8** %beg662, align 8
  %add.ptr663 = getelementptr inbounds i8, i8* %357, i64 %add660
  %add.ptr664 = getelementptr inbounds i8, i8* %add.ptr663, i64 -1
  %358 = load i8, i8* %add.ptr664, align 1
  %conv665 = zext i8 %358 to i32
  %add666 = add nsw i32 %conv665, 4194048
  br label %cond.end.667

cond.end.667:                                     ; preds = %cond.end.658, %cond.end.641
  %cond668 = phi i32 [ %conv648, %cond.end.641 ], [ %add666, %cond.end.658 ]
  br label %cond.end.669

cond.end.669:                                     ; preds = %cond.end.667, %cond.true.589
  %cond670 = phi i32 [ %call590, %cond.true.589 ], [ %cond668, %cond.end.667 ]
  store i32 %cond670, i32* %temp, align 4
  %359 = load i32, i32* %temp, align 4
  %call671 = call i32 @syntax_property_with_flags(i32 %359, i1 zeroext true)
  store i32 %call671, i32* %prev_from_syntax, align 4
  br label %do.body.672

do.body.672:                                      ; preds = %cond.end.669
  %360 = load i64, i64* %from.addr, align 8
  %inc673 = add nsw i64 %360, 1
  store i64 %inc673, i64* %from.addr, align 8
  %361 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_674 = getelementptr inbounds %struct.buffer, %struct.buffer* %361, i32 0, i32 39
  %362 = load i64, i64* %enable_multibyte_characters_674, align 8
  %call675 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp676 = icmp eq i64 %362, %call675
  br i1 %cmp676, label %if.then.678, label %if.else.680

if.then.678:                                      ; preds = %do.body.672
  %363 = load i64, i64* %from_byte.addr, align 8
  %inc679 = add nsw i64 %363, 1
  store i64 %inc679, i64* %from_byte.addr, align 8
  br label %if.end.727

if.else.680:                                      ; preds = %do.body.672
  br label %do.body.681

do.body.681:                                      ; preds = %if.else.680
  %364 = load i64, i64* %from_byte.addr, align 8
  %365 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text683 = getelementptr inbounds %struct.buffer, %struct.buffer* %365, i32 0, i32 73
  %366 = load %struct.buffer_text*, %struct.buffer_text** %text683, align 8
  %gpt_byte684 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %366, i32 0, i32 3
  %367 = load i64, i64* %gpt_byte684, align 8
  %cmp685 = icmp sge i64 %364, %367
  br i1 %cmp685, label %cond.true.687, label %cond.false.690

cond.true.687:                                    ; preds = %do.body.681
  %368 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text688 = getelementptr inbounds %struct.buffer, %struct.buffer* %368, i32 0, i32 73
  %369 = load %struct.buffer_text*, %struct.buffer_text** %text688, align 8
  %gap_size689 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %369, i32 0, i32 5
  %370 = load i64, i64* %gap_size689, align 8
  br label %cond.end.691

cond.false.690:                                   ; preds = %do.body.681
  br label %cond.end.691

cond.end.691:                                     ; preds = %cond.false.690, %cond.true.687
  %cond692 = phi i64 [ %370, %cond.true.687 ], [ 0, %cond.false.690 ]
  %371 = load i64, i64* %from_byte.addr, align 8
  %add693 = add nsw i64 %cond692, %371
  %372 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text694 = getelementptr inbounds %struct.buffer, %struct.buffer* %372, i32 0, i32 73
  %373 = load %struct.buffer_text*, %struct.buffer_text** %text694, align 8
  %beg695 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %373, i32 0, i32 0
  %374 = load i8*, i8** %beg695, align 8
  %add.ptr696 = getelementptr inbounds i8, i8* %374, i64 %add693
  %add.ptr697 = getelementptr inbounds i8, i8* %add.ptr696, i64 -1
  store i8* %add.ptr697, i8** %chp682, align 8
  %375 = load i8*, i8** %chp682, align 8
  %376 = load i8, i8* %375, align 1
  %conv698 = zext i8 %376 to i32
  %and699 = and i32 %conv698, 128
  %tobool700 = icmp ne i32 %and699, 0
  br i1 %tobool700, label %cond.false.702, label %cond.true.701

cond.true.701:                                    ; preds = %cond.end.691
  br label %cond.end.722

cond.false.702:                                   ; preds = %cond.end.691
  %377 = load i8*, i8** %chp682, align 8
  %378 = load i8, i8* %377, align 1
  %conv703 = zext i8 %378 to i32
  %and704 = and i32 %conv703, 32
  %tobool705 = icmp ne i32 %and704, 0
  br i1 %tobool705, label %cond.false.707, label %cond.true.706

cond.true.706:                                    ; preds = %cond.false.702
  br label %cond.end.720

cond.false.707:                                   ; preds = %cond.false.702
  %379 = load i8*, i8** %chp682, align 8
  %380 = load i8, i8* %379, align 1
  %conv708 = zext i8 %380 to i32
  %and709 = and i32 %conv708, 16
  %tobool710 = icmp ne i32 %and709, 0
  br i1 %tobool710, label %cond.false.712, label %cond.true.711

cond.true.711:                                    ; preds = %cond.false.707
  br label %cond.end.718

cond.false.712:                                   ; preds = %cond.false.707
  %381 = load i8*, i8** %chp682, align 8
  %382 = load i8, i8* %381, align 1
  %conv713 = zext i8 %382 to i32
  %and714 = and i32 %conv713, 8
  %tobool715 = icmp ne i32 %and714, 0
  %lnot716 = xor i1 %tobool715, true
  %cond717 = select i1 %lnot716, i32 4, i32 5
  br label %cond.end.718

cond.end.718:                                     ; preds = %cond.false.712, %cond.true.711
  %cond719 = phi i32 [ 3, %cond.true.711 ], [ %cond717, %cond.false.712 ]
  br label %cond.end.720

cond.end.720:                                     ; preds = %cond.end.718, %cond.true.706
  %cond721 = phi i32 [ 2, %cond.true.706 ], [ %cond719, %cond.end.718 ]
  br label %cond.end.722

cond.end.722:                                     ; preds = %cond.end.720, %cond.true.701
  %cond723 = phi i32 [ 1, %cond.true.701 ], [ %cond721, %cond.end.720 ]
  %conv724 = sext i32 %cond723 to i64
  %383 = load i64, i64* %from_byte.addr, align 8
  %add725 = add nsw i64 %383, %conv724
  store i64 %add725, i64* %from_byte.addr, align 8
  br label %do.end.726

do.end.726:                                       ; preds = %cond.end.722
  br label %if.end.727

if.end.727:                                       ; preds = %do.end.726, %if.then.678
  br label %do.end.728

do.end.728:                                       ; preds = %if.end.727
  %384 = load i64, i64* %from.addr, align 8
  %385 = load i64, i64* %end.addr, align 8
  %cmp729 = icmp slt i64 %384, %385
  br i1 %cmp729, label %if.then.731, label %if.end.732

if.then.731:                                      ; preds = %do.end.728
  %386 = load i64, i64* %from.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_FORWARD(i64 %386)
  br label %if.end.732

if.end.732:                                       ; preds = %if.then.731, %do.end.728
  br label %do.end.733

do.end.733:                                       ; preds = %if.end.732
  br label %symstarted

sw.bb.734:                                        ; preds = %if.end.575, %if.end.575
  %387 = load i8, i8* %stopbefore.addr, align 1
  %tobool735 = trunc i8 %387 to i1
  br i1 %tobool735, label %if.then.736, label %if.end.737

if.then.736:                                      ; preds = %sw.bb.734
  br label %stop

if.end.737:                                       ; preds = %sw.bb.734
  %388 = load i64, i64* %prev_from, align 8
  %389 = load %struct.level*, %struct.level** %curlevel, align 8
  %last738 = getelementptr inbounds %struct.level, %struct.level* %389, i32 0, i32 0
  store i64 %388, i64* %last738, align 8
  br label %symstarted

symstarted:                                       ; preds = %if.end.737, %do.end.733
  br label %while.cond.739

while.cond.739:                                   ; preds = %do.end.1135, %symstarted
  %390 = load i64, i64* %from.addr, align 8
  %391 = load i64, i64* %end.addr, align 8
  %cmp740 = icmp slt i64 %390, %391
  br i1 %cmp740, label %while.body.742, label %while.end.1136

while.body.742:                                   ; preds = %while.cond.739
  %392 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_743 = getelementptr inbounds %struct.buffer, %struct.buffer* %392, i32 0, i32 39
  %393 = load i64, i64* %enable_multibyte_characters_743, align 8
  %call744 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp745 = icmp eq i64 %393, %call744
  br i1 %cmp745, label %cond.false.749, label %cond.true.747

cond.true.747:                                    ; preds = %while.body.742
  %394 = load i64, i64* %from_byte.addr, align 8
  %call748 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %394)
  br label %cond.end.827

cond.false.749:                                   ; preds = %while.body.742
  br i1 true, label %cond.true.750, label %cond.false.770

cond.true.750:                                    ; preds = %cond.false.749
  %395 = load i64, i64* %from_byte.addr, align 8
  %396 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text751 = getelementptr inbounds %struct.buffer, %struct.buffer* %396, i32 0, i32 73
  %397 = load %struct.buffer_text*, %struct.buffer_text** %text751, align 8
  %gpt_byte752 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %397, i32 0, i32 3
  %398 = load i64, i64* %gpt_byte752, align 8
  %cmp753 = icmp sge i64 %395, %398
  br i1 %cmp753, label %cond.true.755, label %cond.false.758

cond.true.755:                                    ; preds = %cond.true.750
  %399 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text756 = getelementptr inbounds %struct.buffer, %struct.buffer* %399, i32 0, i32 73
  %400 = load %struct.buffer_text*, %struct.buffer_text** %text756, align 8
  %gap_size757 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %400, i32 0, i32 5
  %401 = load i64, i64* %gap_size757, align 8
  br label %cond.end.759

cond.false.758:                                   ; preds = %cond.true.750
  br label %cond.end.759

cond.end.759:                                     ; preds = %cond.false.758, %cond.true.755
  %cond760 = phi i64 [ %401, %cond.true.755 ], [ 0, %cond.false.758 ]
  %402 = load i64, i64* %from_byte.addr, align 8
  %add761 = add nsw i64 %cond760, %402
  %403 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text762 = getelementptr inbounds %struct.buffer, %struct.buffer* %403, i32 0, i32 73
  %404 = load %struct.buffer_text*, %struct.buffer_text** %text762, align 8
  %beg763 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %404, i32 0, i32 0
  %405 = load i8*, i8** %beg763, align 8
  %add.ptr764 = getelementptr inbounds i8, i8* %405, i64 %add761
  %add.ptr765 = getelementptr inbounds i8, i8* %add.ptr764, i64 -1
  %406 = load i8, i8* %add.ptr765, align 1
  %conv766 = zext i8 %406 to i32
  %add767 = add i32 %conv766, 0
  %cmp768 = icmp ult i32 %add767, 128
  br i1 %cmp768, label %cond.true.790, label %cond.false.807

cond.false.770:                                   ; preds = %cond.false.749
  %407 = load i64, i64* %from_byte.addr, align 8
  %408 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text771 = getelementptr inbounds %struct.buffer, %struct.buffer* %408, i32 0, i32 73
  %409 = load %struct.buffer_text*, %struct.buffer_text** %text771, align 8
  %gpt_byte772 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %409, i32 0, i32 3
  %410 = load i64, i64* %gpt_byte772, align 8
  %cmp773 = icmp sge i64 %407, %410
  br i1 %cmp773, label %cond.true.775, label %cond.false.778

cond.true.775:                                    ; preds = %cond.false.770
  %411 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text776 = getelementptr inbounds %struct.buffer, %struct.buffer* %411, i32 0, i32 73
  %412 = load %struct.buffer_text*, %struct.buffer_text** %text776, align 8
  %gap_size777 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %412, i32 0, i32 5
  %413 = load i64, i64* %gap_size777, align 8
  br label %cond.end.779

cond.false.778:                                   ; preds = %cond.false.770
  br label %cond.end.779

cond.end.779:                                     ; preds = %cond.false.778, %cond.true.775
  %cond780 = phi i64 [ %413, %cond.true.775 ], [ 0, %cond.false.778 ]
  %414 = load i64, i64* %from_byte.addr, align 8
  %add781 = add nsw i64 %cond780, %414
  %415 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text782 = getelementptr inbounds %struct.buffer, %struct.buffer* %415, i32 0, i32 73
  %416 = load %struct.buffer_text*, %struct.buffer_text** %text782, align 8
  %beg783 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %416, i32 0, i32 0
  %417 = load i8*, i8** %beg783, align 8
  %add.ptr784 = getelementptr inbounds i8, i8* %417, i64 %add781
  %add.ptr785 = getelementptr inbounds i8, i8* %add.ptr784, i64 -1
  %418 = load i8, i8* %add.ptr785, align 1
  %conv786 = zext i8 %418 to i64
  %add787 = add i64 %conv786, 0
  %cmp788 = icmp ult i64 %add787, 128
  br i1 %cmp788, label %cond.true.790, label %cond.false.807

cond.true.790:                                    ; preds = %cond.end.779, %cond.end.759
  %419 = load i64, i64* %from_byte.addr, align 8
  %420 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text791 = getelementptr inbounds %struct.buffer, %struct.buffer* %420, i32 0, i32 73
  %421 = load %struct.buffer_text*, %struct.buffer_text** %text791, align 8
  %gpt_byte792 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %421, i32 0, i32 3
  %422 = load i64, i64* %gpt_byte792, align 8
  %cmp793 = icmp sge i64 %419, %422
  br i1 %cmp793, label %cond.true.795, label %cond.false.798

cond.true.795:                                    ; preds = %cond.true.790
  %423 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text796 = getelementptr inbounds %struct.buffer, %struct.buffer* %423, i32 0, i32 73
  %424 = load %struct.buffer_text*, %struct.buffer_text** %text796, align 8
  %gap_size797 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %424, i32 0, i32 5
  %425 = load i64, i64* %gap_size797, align 8
  br label %cond.end.799

cond.false.798:                                   ; preds = %cond.true.790
  br label %cond.end.799

cond.end.799:                                     ; preds = %cond.false.798, %cond.true.795
  %cond800 = phi i64 [ %425, %cond.true.795 ], [ 0, %cond.false.798 ]
  %426 = load i64, i64* %from_byte.addr, align 8
  %add801 = add nsw i64 %cond800, %426
  %427 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text802 = getelementptr inbounds %struct.buffer, %struct.buffer* %427, i32 0, i32 73
  %428 = load %struct.buffer_text*, %struct.buffer_text** %text802, align 8
  %beg803 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %428, i32 0, i32 0
  %429 = load i8*, i8** %beg803, align 8
  %add.ptr804 = getelementptr inbounds i8, i8* %429, i64 %add801
  %add.ptr805 = getelementptr inbounds i8, i8* %add.ptr804, i64 -1
  %430 = load i8, i8* %add.ptr805, align 1
  %conv806 = zext i8 %430 to i32
  br label %cond.end.825

cond.false.807:                                   ; preds = %cond.end.779, %cond.end.759
  %431 = load i64, i64* %from_byte.addr, align 8
  %432 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text808 = getelementptr inbounds %struct.buffer, %struct.buffer* %432, i32 0, i32 73
  %433 = load %struct.buffer_text*, %struct.buffer_text** %text808, align 8
  %gpt_byte809 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %433, i32 0, i32 3
  %434 = load i64, i64* %gpt_byte809, align 8
  %cmp810 = icmp sge i64 %431, %434
  br i1 %cmp810, label %cond.true.812, label %cond.false.815

cond.true.812:                                    ; preds = %cond.false.807
  %435 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text813 = getelementptr inbounds %struct.buffer, %struct.buffer* %435, i32 0, i32 73
  %436 = load %struct.buffer_text*, %struct.buffer_text** %text813, align 8
  %gap_size814 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %436, i32 0, i32 5
  %437 = load i64, i64* %gap_size814, align 8
  br label %cond.end.816

cond.false.815:                                   ; preds = %cond.false.807
  br label %cond.end.816

cond.end.816:                                     ; preds = %cond.false.815, %cond.true.812
  %cond817 = phi i64 [ %437, %cond.true.812 ], [ 0, %cond.false.815 ]
  %438 = load i64, i64* %from_byte.addr, align 8
  %add818 = add nsw i64 %cond817, %438
  %439 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text819 = getelementptr inbounds %struct.buffer, %struct.buffer* %439, i32 0, i32 73
  %440 = load %struct.buffer_text*, %struct.buffer_text** %text819, align 8
  %beg820 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %440, i32 0, i32 0
  %441 = load i8*, i8** %beg820, align 8
  %add.ptr821 = getelementptr inbounds i8, i8* %441, i64 %add818
  %add.ptr822 = getelementptr inbounds i8, i8* %add.ptr821, i64 -1
  %442 = load i8, i8* %add.ptr822, align 1
  %conv823 = zext i8 %442 to i32
  %add824 = add nsw i32 %conv823, 4194048
  br label %cond.end.825

cond.end.825:                                     ; preds = %cond.end.816, %cond.end.799
  %cond826 = phi i32 [ %conv806, %cond.end.799 ], [ %add824, %cond.end.816 ]
  br label %cond.end.827

cond.end.827:                                     ; preds = %cond.end.825, %cond.true.747
  %cond828 = phi i32 [ %call748, %cond.true.747 ], [ %cond826, %cond.end.825 ]
  store i32 %cond828, i32* %symchar, align 4
  %443 = load i32, i32* %symchar, align 4
  %call829 = call i32 @syntax_property(i32 %443, i1 zeroext true)
  switch i32 %call829, label %sw.default [
    i32 10, label %sw.bb.830
    i32 9, label %sw.bb.830
    i32 2, label %sw.bb.985
    i32 3, label %sw.bb.985
    i32 6, label %sw.bb.985
  ]

sw.bb.830:                                        ; preds = %cond.end.827, %cond.end.827
  br label %do.body.831

do.body.831:                                      ; preds = %sw.bb.830
  %444 = load i64, i64* %from.addr, align 8
  store i64 %444, i64* %prev_from, align 8
  %445 = load i64, i64* %from_byte.addr, align 8
  store i64 %445, i64* %prev_from_byte, align 8
  %446 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_832 = getelementptr inbounds %struct.buffer, %struct.buffer* %446, i32 0, i32 39
  %447 = load i64, i64* %enable_multibyte_characters_832, align 8
  %call833 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp834 = icmp eq i64 %447, %call833
  br i1 %cmp834, label %cond.false.838, label %cond.true.836

cond.true.836:                                    ; preds = %do.body.831
  %448 = load i64, i64* %prev_from_byte, align 8
  %call837 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %448)
  br label %cond.end.916

cond.false.838:                                   ; preds = %do.body.831
  br i1 true, label %cond.true.839, label %cond.false.859

cond.true.839:                                    ; preds = %cond.false.838
  %449 = load i64, i64* %prev_from_byte, align 8
  %450 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text840 = getelementptr inbounds %struct.buffer, %struct.buffer* %450, i32 0, i32 73
  %451 = load %struct.buffer_text*, %struct.buffer_text** %text840, align 8
  %gpt_byte841 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %451, i32 0, i32 3
  %452 = load i64, i64* %gpt_byte841, align 8
  %cmp842 = icmp sge i64 %449, %452
  br i1 %cmp842, label %cond.true.844, label %cond.false.847

cond.true.844:                                    ; preds = %cond.true.839
  %453 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text845 = getelementptr inbounds %struct.buffer, %struct.buffer* %453, i32 0, i32 73
  %454 = load %struct.buffer_text*, %struct.buffer_text** %text845, align 8
  %gap_size846 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %454, i32 0, i32 5
  %455 = load i64, i64* %gap_size846, align 8
  br label %cond.end.848

cond.false.847:                                   ; preds = %cond.true.839
  br label %cond.end.848

cond.end.848:                                     ; preds = %cond.false.847, %cond.true.844
  %cond849 = phi i64 [ %455, %cond.true.844 ], [ 0, %cond.false.847 ]
  %456 = load i64, i64* %prev_from_byte, align 8
  %add850 = add nsw i64 %cond849, %456
  %457 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text851 = getelementptr inbounds %struct.buffer, %struct.buffer* %457, i32 0, i32 73
  %458 = load %struct.buffer_text*, %struct.buffer_text** %text851, align 8
  %beg852 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %458, i32 0, i32 0
  %459 = load i8*, i8** %beg852, align 8
  %add.ptr853 = getelementptr inbounds i8, i8* %459, i64 %add850
  %add.ptr854 = getelementptr inbounds i8, i8* %add.ptr853, i64 -1
  %460 = load i8, i8* %add.ptr854, align 1
  %conv855 = zext i8 %460 to i32
  %add856 = add i32 %conv855, 0
  %cmp857 = icmp ult i32 %add856, 128
  br i1 %cmp857, label %cond.true.879, label %cond.false.896

cond.false.859:                                   ; preds = %cond.false.838
  %461 = load i64, i64* %prev_from_byte, align 8
  %462 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text860 = getelementptr inbounds %struct.buffer, %struct.buffer* %462, i32 0, i32 73
  %463 = load %struct.buffer_text*, %struct.buffer_text** %text860, align 8
  %gpt_byte861 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %463, i32 0, i32 3
  %464 = load i64, i64* %gpt_byte861, align 8
  %cmp862 = icmp sge i64 %461, %464
  br i1 %cmp862, label %cond.true.864, label %cond.false.867

cond.true.864:                                    ; preds = %cond.false.859
  %465 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text865 = getelementptr inbounds %struct.buffer, %struct.buffer* %465, i32 0, i32 73
  %466 = load %struct.buffer_text*, %struct.buffer_text** %text865, align 8
  %gap_size866 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %466, i32 0, i32 5
  %467 = load i64, i64* %gap_size866, align 8
  br label %cond.end.868

cond.false.867:                                   ; preds = %cond.false.859
  br label %cond.end.868

cond.end.868:                                     ; preds = %cond.false.867, %cond.true.864
  %cond869 = phi i64 [ %467, %cond.true.864 ], [ 0, %cond.false.867 ]
  %468 = load i64, i64* %prev_from_byte, align 8
  %add870 = add nsw i64 %cond869, %468
  %469 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text871 = getelementptr inbounds %struct.buffer, %struct.buffer* %469, i32 0, i32 73
  %470 = load %struct.buffer_text*, %struct.buffer_text** %text871, align 8
  %beg872 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %470, i32 0, i32 0
  %471 = load i8*, i8** %beg872, align 8
  %add.ptr873 = getelementptr inbounds i8, i8* %471, i64 %add870
  %add.ptr874 = getelementptr inbounds i8, i8* %add.ptr873, i64 -1
  %472 = load i8, i8* %add.ptr874, align 1
  %conv875 = zext i8 %472 to i64
  %add876 = add i64 %conv875, 0
  %cmp877 = icmp ult i64 %add876, 128
  br i1 %cmp877, label %cond.true.879, label %cond.false.896

cond.true.879:                                    ; preds = %cond.end.868, %cond.end.848
  %473 = load i64, i64* %prev_from_byte, align 8
  %474 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text880 = getelementptr inbounds %struct.buffer, %struct.buffer* %474, i32 0, i32 73
  %475 = load %struct.buffer_text*, %struct.buffer_text** %text880, align 8
  %gpt_byte881 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %475, i32 0, i32 3
  %476 = load i64, i64* %gpt_byte881, align 8
  %cmp882 = icmp sge i64 %473, %476
  br i1 %cmp882, label %cond.true.884, label %cond.false.887

cond.true.884:                                    ; preds = %cond.true.879
  %477 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text885 = getelementptr inbounds %struct.buffer, %struct.buffer* %477, i32 0, i32 73
  %478 = load %struct.buffer_text*, %struct.buffer_text** %text885, align 8
  %gap_size886 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %478, i32 0, i32 5
  %479 = load i64, i64* %gap_size886, align 8
  br label %cond.end.888

cond.false.887:                                   ; preds = %cond.true.879
  br label %cond.end.888

cond.end.888:                                     ; preds = %cond.false.887, %cond.true.884
  %cond889 = phi i64 [ %479, %cond.true.884 ], [ 0, %cond.false.887 ]
  %480 = load i64, i64* %prev_from_byte, align 8
  %add890 = add nsw i64 %cond889, %480
  %481 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text891 = getelementptr inbounds %struct.buffer, %struct.buffer* %481, i32 0, i32 73
  %482 = load %struct.buffer_text*, %struct.buffer_text** %text891, align 8
  %beg892 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %482, i32 0, i32 0
  %483 = load i8*, i8** %beg892, align 8
  %add.ptr893 = getelementptr inbounds i8, i8* %483, i64 %add890
  %add.ptr894 = getelementptr inbounds i8, i8* %add.ptr893, i64 -1
  %484 = load i8, i8* %add.ptr894, align 1
  %conv895 = zext i8 %484 to i32
  br label %cond.end.914

cond.false.896:                                   ; preds = %cond.end.868, %cond.end.848
  %485 = load i64, i64* %prev_from_byte, align 8
  %486 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text897 = getelementptr inbounds %struct.buffer, %struct.buffer* %486, i32 0, i32 73
  %487 = load %struct.buffer_text*, %struct.buffer_text** %text897, align 8
  %gpt_byte898 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %487, i32 0, i32 3
  %488 = load i64, i64* %gpt_byte898, align 8
  %cmp899 = icmp sge i64 %485, %488
  br i1 %cmp899, label %cond.true.901, label %cond.false.904

cond.true.901:                                    ; preds = %cond.false.896
  %489 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text902 = getelementptr inbounds %struct.buffer, %struct.buffer* %489, i32 0, i32 73
  %490 = load %struct.buffer_text*, %struct.buffer_text** %text902, align 8
  %gap_size903 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %490, i32 0, i32 5
  %491 = load i64, i64* %gap_size903, align 8
  br label %cond.end.905

cond.false.904:                                   ; preds = %cond.false.896
  br label %cond.end.905

cond.end.905:                                     ; preds = %cond.false.904, %cond.true.901
  %cond906 = phi i64 [ %491, %cond.true.901 ], [ 0, %cond.false.904 ]
  %492 = load i64, i64* %prev_from_byte, align 8
  %add907 = add nsw i64 %cond906, %492
  %493 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text908 = getelementptr inbounds %struct.buffer, %struct.buffer* %493, i32 0, i32 73
  %494 = load %struct.buffer_text*, %struct.buffer_text** %text908, align 8
  %beg909 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %494, i32 0, i32 0
  %495 = load i8*, i8** %beg909, align 8
  %add.ptr910 = getelementptr inbounds i8, i8* %495, i64 %add907
  %add.ptr911 = getelementptr inbounds i8, i8* %add.ptr910, i64 -1
  %496 = load i8, i8* %add.ptr911, align 1
  %conv912 = zext i8 %496 to i32
  %add913 = add nsw i32 %conv912, 4194048
  br label %cond.end.914

cond.end.914:                                     ; preds = %cond.end.905, %cond.end.888
  %cond915 = phi i32 [ %conv895, %cond.end.888 ], [ %add913, %cond.end.905 ]
  br label %cond.end.916

cond.end.916:                                     ; preds = %cond.end.914, %cond.true.836
  %cond917 = phi i32 [ %call837, %cond.true.836 ], [ %cond915, %cond.end.914 ]
  store i32 %cond917, i32* %temp, align 4
  %497 = load i32, i32* %temp, align 4
  %call918 = call i32 @syntax_property_with_flags(i32 %497, i1 zeroext true)
  store i32 %call918, i32* %prev_from_syntax, align 4
  br label %do.body.919

do.body.919:                                      ; preds = %cond.end.916
  %498 = load i64, i64* %from.addr, align 8
  %inc920 = add nsw i64 %498, 1
  store i64 %inc920, i64* %from.addr, align 8
  %499 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_921 = getelementptr inbounds %struct.buffer, %struct.buffer* %499, i32 0, i32 39
  %500 = load i64, i64* %enable_multibyte_characters_921, align 8
  %call922 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp923 = icmp eq i64 %500, %call922
  br i1 %cmp923, label %if.then.925, label %if.else.927

if.then.925:                                      ; preds = %do.body.919
  %501 = load i64, i64* %from_byte.addr, align 8
  %inc926 = add nsw i64 %501, 1
  store i64 %inc926, i64* %from_byte.addr, align 8
  br label %if.end.974

if.else.927:                                      ; preds = %do.body.919
  br label %do.body.928

do.body.928:                                      ; preds = %if.else.927
  %502 = load i64, i64* %from_byte.addr, align 8
  %503 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text930 = getelementptr inbounds %struct.buffer, %struct.buffer* %503, i32 0, i32 73
  %504 = load %struct.buffer_text*, %struct.buffer_text** %text930, align 8
  %gpt_byte931 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %504, i32 0, i32 3
  %505 = load i64, i64* %gpt_byte931, align 8
  %cmp932 = icmp sge i64 %502, %505
  br i1 %cmp932, label %cond.true.934, label %cond.false.937

cond.true.934:                                    ; preds = %do.body.928
  %506 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text935 = getelementptr inbounds %struct.buffer, %struct.buffer* %506, i32 0, i32 73
  %507 = load %struct.buffer_text*, %struct.buffer_text** %text935, align 8
  %gap_size936 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %507, i32 0, i32 5
  %508 = load i64, i64* %gap_size936, align 8
  br label %cond.end.938

cond.false.937:                                   ; preds = %do.body.928
  br label %cond.end.938

cond.end.938:                                     ; preds = %cond.false.937, %cond.true.934
  %cond939 = phi i64 [ %508, %cond.true.934 ], [ 0, %cond.false.937 ]
  %509 = load i64, i64* %from_byte.addr, align 8
  %add940 = add nsw i64 %cond939, %509
  %510 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text941 = getelementptr inbounds %struct.buffer, %struct.buffer* %510, i32 0, i32 73
  %511 = load %struct.buffer_text*, %struct.buffer_text** %text941, align 8
  %beg942 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %511, i32 0, i32 0
  %512 = load i8*, i8** %beg942, align 8
  %add.ptr943 = getelementptr inbounds i8, i8* %512, i64 %add940
  %add.ptr944 = getelementptr inbounds i8, i8* %add.ptr943, i64 -1
  store i8* %add.ptr944, i8** %chp929, align 8
  %513 = load i8*, i8** %chp929, align 8
  %514 = load i8, i8* %513, align 1
  %conv945 = zext i8 %514 to i32
  %and946 = and i32 %conv945, 128
  %tobool947 = icmp ne i32 %and946, 0
  br i1 %tobool947, label %cond.false.949, label %cond.true.948

cond.true.948:                                    ; preds = %cond.end.938
  br label %cond.end.969

cond.false.949:                                   ; preds = %cond.end.938
  %515 = load i8*, i8** %chp929, align 8
  %516 = load i8, i8* %515, align 1
  %conv950 = zext i8 %516 to i32
  %and951 = and i32 %conv950, 32
  %tobool952 = icmp ne i32 %and951, 0
  br i1 %tobool952, label %cond.false.954, label %cond.true.953

cond.true.953:                                    ; preds = %cond.false.949
  br label %cond.end.967

cond.false.954:                                   ; preds = %cond.false.949
  %517 = load i8*, i8** %chp929, align 8
  %518 = load i8, i8* %517, align 1
  %conv955 = zext i8 %518 to i32
  %and956 = and i32 %conv955, 16
  %tobool957 = icmp ne i32 %and956, 0
  br i1 %tobool957, label %cond.false.959, label %cond.true.958

cond.true.958:                                    ; preds = %cond.false.954
  br label %cond.end.965

cond.false.959:                                   ; preds = %cond.false.954
  %519 = load i8*, i8** %chp929, align 8
  %520 = load i8, i8* %519, align 1
  %conv960 = zext i8 %520 to i32
  %and961 = and i32 %conv960, 8
  %tobool962 = icmp ne i32 %and961, 0
  %lnot963 = xor i1 %tobool962, true
  %cond964 = select i1 %lnot963, i32 4, i32 5
  br label %cond.end.965

cond.end.965:                                     ; preds = %cond.false.959, %cond.true.958
  %cond966 = phi i32 [ 3, %cond.true.958 ], [ %cond964, %cond.false.959 ]
  br label %cond.end.967

cond.end.967:                                     ; preds = %cond.end.965, %cond.true.953
  %cond968 = phi i32 [ 2, %cond.true.953 ], [ %cond966, %cond.end.965 ]
  br label %cond.end.969

cond.end.969:                                     ; preds = %cond.end.967, %cond.true.948
  %cond970 = phi i32 [ 1, %cond.true.948 ], [ %cond968, %cond.end.967 ]
  %conv971 = sext i32 %cond970 to i64
  %521 = load i64, i64* %from_byte.addr, align 8
  %add972 = add nsw i64 %521, %conv971
  store i64 %add972, i64* %from_byte.addr, align 8
  br label %do.end.973

do.end.973:                                       ; preds = %cond.end.969
  br label %if.end.974

if.end.974:                                       ; preds = %do.end.973, %if.then.925
  br label %do.end.975

do.end.975:                                       ; preds = %if.end.974
  %522 = load i64, i64* %from.addr, align 8
  %523 = load i64, i64* %end.addr, align 8
  %cmp976 = icmp slt i64 %522, %523
  br i1 %cmp976, label %if.then.978, label %if.end.979

if.then.978:                                      ; preds = %do.end.975
  %524 = load i64, i64* %from.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_FORWARD(i64 %524)
  br label %if.end.979

if.end.979:                                       ; preds = %if.then.978, %do.end.975
  br label %do.end.980

do.end.980:                                       ; preds = %if.end.979
  %525 = load i64, i64* %from.addr, align 8
  %526 = load i64, i64* %end.addr, align 8
  %cmp981 = icmp eq i64 %525, %526
  br i1 %cmp981, label %if.then.983, label %if.end.984

if.then.983:                                      ; preds = %do.end.980
  br label %endquoted

if.end.984:                                       ; preds = %do.end.980
  br label %sw.epilog

sw.bb.985:                                        ; preds = %cond.end.827, %cond.end.827, %cond.end.827
  br label %sw.epilog

sw.default:                                       ; preds = %cond.end.827
  br label %symdone

sw.epilog:                                        ; preds = %sw.bb.985, %if.end.984
  br label %do.body.986

do.body.986:                                      ; preds = %sw.epilog
  %527 = load i64, i64* %from.addr, align 8
  store i64 %527, i64* %prev_from, align 8
  %528 = load i64, i64* %from_byte.addr, align 8
  store i64 %528, i64* %prev_from_byte, align 8
  %529 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_987 = getelementptr inbounds %struct.buffer, %struct.buffer* %529, i32 0, i32 39
  %530 = load i64, i64* %enable_multibyte_characters_987, align 8
  %call988 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp989 = icmp eq i64 %530, %call988
  br i1 %cmp989, label %cond.false.993, label %cond.true.991

cond.true.991:                                    ; preds = %do.body.986
  %531 = load i64, i64* %prev_from_byte, align 8
  %call992 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %531)
  br label %cond.end.1071

cond.false.993:                                   ; preds = %do.body.986
  br i1 true, label %cond.true.994, label %cond.false.1014

cond.true.994:                                    ; preds = %cond.false.993
  %532 = load i64, i64* %prev_from_byte, align 8
  %533 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text995 = getelementptr inbounds %struct.buffer, %struct.buffer* %533, i32 0, i32 73
  %534 = load %struct.buffer_text*, %struct.buffer_text** %text995, align 8
  %gpt_byte996 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %534, i32 0, i32 3
  %535 = load i64, i64* %gpt_byte996, align 8
  %cmp997 = icmp sge i64 %532, %535
  br i1 %cmp997, label %cond.true.999, label %cond.false.1002

cond.true.999:                                    ; preds = %cond.true.994
  %536 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1000 = getelementptr inbounds %struct.buffer, %struct.buffer* %536, i32 0, i32 73
  %537 = load %struct.buffer_text*, %struct.buffer_text** %text1000, align 8
  %gap_size1001 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %537, i32 0, i32 5
  %538 = load i64, i64* %gap_size1001, align 8
  br label %cond.end.1003

cond.false.1002:                                  ; preds = %cond.true.994
  br label %cond.end.1003

cond.end.1003:                                    ; preds = %cond.false.1002, %cond.true.999
  %cond1004 = phi i64 [ %538, %cond.true.999 ], [ 0, %cond.false.1002 ]
  %539 = load i64, i64* %prev_from_byte, align 8
  %add1005 = add nsw i64 %cond1004, %539
  %540 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1006 = getelementptr inbounds %struct.buffer, %struct.buffer* %540, i32 0, i32 73
  %541 = load %struct.buffer_text*, %struct.buffer_text** %text1006, align 8
  %beg1007 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %541, i32 0, i32 0
  %542 = load i8*, i8** %beg1007, align 8
  %add.ptr1008 = getelementptr inbounds i8, i8* %542, i64 %add1005
  %add.ptr1009 = getelementptr inbounds i8, i8* %add.ptr1008, i64 -1
  %543 = load i8, i8* %add.ptr1009, align 1
  %conv1010 = zext i8 %543 to i32
  %add1011 = add i32 %conv1010, 0
  %cmp1012 = icmp ult i32 %add1011, 128
  br i1 %cmp1012, label %cond.true.1034, label %cond.false.1051

cond.false.1014:                                  ; preds = %cond.false.993
  %544 = load i64, i64* %prev_from_byte, align 8
  %545 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1015 = getelementptr inbounds %struct.buffer, %struct.buffer* %545, i32 0, i32 73
  %546 = load %struct.buffer_text*, %struct.buffer_text** %text1015, align 8
  %gpt_byte1016 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %546, i32 0, i32 3
  %547 = load i64, i64* %gpt_byte1016, align 8
  %cmp1017 = icmp sge i64 %544, %547
  br i1 %cmp1017, label %cond.true.1019, label %cond.false.1022

cond.true.1019:                                   ; preds = %cond.false.1014
  %548 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1020 = getelementptr inbounds %struct.buffer, %struct.buffer* %548, i32 0, i32 73
  %549 = load %struct.buffer_text*, %struct.buffer_text** %text1020, align 8
  %gap_size1021 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %549, i32 0, i32 5
  %550 = load i64, i64* %gap_size1021, align 8
  br label %cond.end.1023

cond.false.1022:                                  ; preds = %cond.false.1014
  br label %cond.end.1023

cond.end.1023:                                    ; preds = %cond.false.1022, %cond.true.1019
  %cond1024 = phi i64 [ %550, %cond.true.1019 ], [ 0, %cond.false.1022 ]
  %551 = load i64, i64* %prev_from_byte, align 8
  %add1025 = add nsw i64 %cond1024, %551
  %552 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1026 = getelementptr inbounds %struct.buffer, %struct.buffer* %552, i32 0, i32 73
  %553 = load %struct.buffer_text*, %struct.buffer_text** %text1026, align 8
  %beg1027 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %553, i32 0, i32 0
  %554 = load i8*, i8** %beg1027, align 8
  %add.ptr1028 = getelementptr inbounds i8, i8* %554, i64 %add1025
  %add.ptr1029 = getelementptr inbounds i8, i8* %add.ptr1028, i64 -1
  %555 = load i8, i8* %add.ptr1029, align 1
  %conv1030 = zext i8 %555 to i64
  %add1031 = add i64 %conv1030, 0
  %cmp1032 = icmp ult i64 %add1031, 128
  br i1 %cmp1032, label %cond.true.1034, label %cond.false.1051

cond.true.1034:                                   ; preds = %cond.end.1023, %cond.end.1003
  %556 = load i64, i64* %prev_from_byte, align 8
  %557 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1035 = getelementptr inbounds %struct.buffer, %struct.buffer* %557, i32 0, i32 73
  %558 = load %struct.buffer_text*, %struct.buffer_text** %text1035, align 8
  %gpt_byte1036 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %558, i32 0, i32 3
  %559 = load i64, i64* %gpt_byte1036, align 8
  %cmp1037 = icmp sge i64 %556, %559
  br i1 %cmp1037, label %cond.true.1039, label %cond.false.1042

cond.true.1039:                                   ; preds = %cond.true.1034
  %560 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1040 = getelementptr inbounds %struct.buffer, %struct.buffer* %560, i32 0, i32 73
  %561 = load %struct.buffer_text*, %struct.buffer_text** %text1040, align 8
  %gap_size1041 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %561, i32 0, i32 5
  %562 = load i64, i64* %gap_size1041, align 8
  br label %cond.end.1043

cond.false.1042:                                  ; preds = %cond.true.1034
  br label %cond.end.1043

cond.end.1043:                                    ; preds = %cond.false.1042, %cond.true.1039
  %cond1044 = phi i64 [ %562, %cond.true.1039 ], [ 0, %cond.false.1042 ]
  %563 = load i64, i64* %prev_from_byte, align 8
  %add1045 = add nsw i64 %cond1044, %563
  %564 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1046 = getelementptr inbounds %struct.buffer, %struct.buffer* %564, i32 0, i32 73
  %565 = load %struct.buffer_text*, %struct.buffer_text** %text1046, align 8
  %beg1047 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %565, i32 0, i32 0
  %566 = load i8*, i8** %beg1047, align 8
  %add.ptr1048 = getelementptr inbounds i8, i8* %566, i64 %add1045
  %add.ptr1049 = getelementptr inbounds i8, i8* %add.ptr1048, i64 -1
  %567 = load i8, i8* %add.ptr1049, align 1
  %conv1050 = zext i8 %567 to i32
  br label %cond.end.1069

cond.false.1051:                                  ; preds = %cond.end.1023, %cond.end.1003
  %568 = load i64, i64* %prev_from_byte, align 8
  %569 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1052 = getelementptr inbounds %struct.buffer, %struct.buffer* %569, i32 0, i32 73
  %570 = load %struct.buffer_text*, %struct.buffer_text** %text1052, align 8
  %gpt_byte1053 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %570, i32 0, i32 3
  %571 = load i64, i64* %gpt_byte1053, align 8
  %cmp1054 = icmp sge i64 %568, %571
  br i1 %cmp1054, label %cond.true.1056, label %cond.false.1059

cond.true.1056:                                   ; preds = %cond.false.1051
  %572 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1057 = getelementptr inbounds %struct.buffer, %struct.buffer* %572, i32 0, i32 73
  %573 = load %struct.buffer_text*, %struct.buffer_text** %text1057, align 8
  %gap_size1058 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %573, i32 0, i32 5
  %574 = load i64, i64* %gap_size1058, align 8
  br label %cond.end.1060

cond.false.1059:                                  ; preds = %cond.false.1051
  br label %cond.end.1060

cond.end.1060:                                    ; preds = %cond.false.1059, %cond.true.1056
  %cond1061 = phi i64 [ %574, %cond.true.1056 ], [ 0, %cond.false.1059 ]
  %575 = load i64, i64* %prev_from_byte, align 8
  %add1062 = add nsw i64 %cond1061, %575
  %576 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1063 = getelementptr inbounds %struct.buffer, %struct.buffer* %576, i32 0, i32 73
  %577 = load %struct.buffer_text*, %struct.buffer_text** %text1063, align 8
  %beg1064 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %577, i32 0, i32 0
  %578 = load i8*, i8** %beg1064, align 8
  %add.ptr1065 = getelementptr inbounds i8, i8* %578, i64 %add1062
  %add.ptr1066 = getelementptr inbounds i8, i8* %add.ptr1065, i64 -1
  %579 = load i8, i8* %add.ptr1066, align 1
  %conv1067 = zext i8 %579 to i32
  %add1068 = add nsw i32 %conv1067, 4194048
  br label %cond.end.1069

cond.end.1069:                                    ; preds = %cond.end.1060, %cond.end.1043
  %cond1070 = phi i32 [ %conv1050, %cond.end.1043 ], [ %add1068, %cond.end.1060 ]
  br label %cond.end.1071

cond.end.1071:                                    ; preds = %cond.end.1069, %cond.true.991
  %cond1072 = phi i32 [ %call992, %cond.true.991 ], [ %cond1070, %cond.end.1069 ]
  store i32 %cond1072, i32* %temp, align 4
  %580 = load i32, i32* %temp, align 4
  %call1073 = call i32 @syntax_property_with_flags(i32 %580, i1 zeroext true)
  store i32 %call1073, i32* %prev_from_syntax, align 4
  br label %do.body.1074

do.body.1074:                                     ; preds = %cond.end.1071
  %581 = load i64, i64* %from.addr, align 8
  %inc1075 = add nsw i64 %581, 1
  store i64 %inc1075, i64* %from.addr, align 8
  %582 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_1076 = getelementptr inbounds %struct.buffer, %struct.buffer* %582, i32 0, i32 39
  %583 = load i64, i64* %enable_multibyte_characters_1076, align 8
  %call1077 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1078 = icmp eq i64 %583, %call1077
  br i1 %cmp1078, label %if.then.1080, label %if.else.1082

if.then.1080:                                     ; preds = %do.body.1074
  %584 = load i64, i64* %from_byte.addr, align 8
  %inc1081 = add nsw i64 %584, 1
  store i64 %inc1081, i64* %from_byte.addr, align 8
  br label %if.end.1129

if.else.1082:                                     ; preds = %do.body.1074
  br label %do.body.1083

do.body.1083:                                     ; preds = %if.else.1082
  %585 = load i64, i64* %from_byte.addr, align 8
  %586 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1085 = getelementptr inbounds %struct.buffer, %struct.buffer* %586, i32 0, i32 73
  %587 = load %struct.buffer_text*, %struct.buffer_text** %text1085, align 8
  %gpt_byte1086 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %587, i32 0, i32 3
  %588 = load i64, i64* %gpt_byte1086, align 8
  %cmp1087 = icmp sge i64 %585, %588
  br i1 %cmp1087, label %cond.true.1089, label %cond.false.1092

cond.true.1089:                                   ; preds = %do.body.1083
  %589 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1090 = getelementptr inbounds %struct.buffer, %struct.buffer* %589, i32 0, i32 73
  %590 = load %struct.buffer_text*, %struct.buffer_text** %text1090, align 8
  %gap_size1091 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %590, i32 0, i32 5
  %591 = load i64, i64* %gap_size1091, align 8
  br label %cond.end.1093

cond.false.1092:                                  ; preds = %do.body.1083
  br label %cond.end.1093

cond.end.1093:                                    ; preds = %cond.false.1092, %cond.true.1089
  %cond1094 = phi i64 [ %591, %cond.true.1089 ], [ 0, %cond.false.1092 ]
  %592 = load i64, i64* %from_byte.addr, align 8
  %add1095 = add nsw i64 %cond1094, %592
  %593 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1096 = getelementptr inbounds %struct.buffer, %struct.buffer* %593, i32 0, i32 73
  %594 = load %struct.buffer_text*, %struct.buffer_text** %text1096, align 8
  %beg1097 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %594, i32 0, i32 0
  %595 = load i8*, i8** %beg1097, align 8
  %add.ptr1098 = getelementptr inbounds i8, i8* %595, i64 %add1095
  %add.ptr1099 = getelementptr inbounds i8, i8* %add.ptr1098, i64 -1
  store i8* %add.ptr1099, i8** %chp1084, align 8
  %596 = load i8*, i8** %chp1084, align 8
  %597 = load i8, i8* %596, align 1
  %conv1100 = zext i8 %597 to i32
  %and1101 = and i32 %conv1100, 128
  %tobool1102 = icmp ne i32 %and1101, 0
  br i1 %tobool1102, label %cond.false.1104, label %cond.true.1103

cond.true.1103:                                   ; preds = %cond.end.1093
  br label %cond.end.1124

cond.false.1104:                                  ; preds = %cond.end.1093
  %598 = load i8*, i8** %chp1084, align 8
  %599 = load i8, i8* %598, align 1
  %conv1105 = zext i8 %599 to i32
  %and1106 = and i32 %conv1105, 32
  %tobool1107 = icmp ne i32 %and1106, 0
  br i1 %tobool1107, label %cond.false.1109, label %cond.true.1108

cond.true.1108:                                   ; preds = %cond.false.1104
  br label %cond.end.1122

cond.false.1109:                                  ; preds = %cond.false.1104
  %600 = load i8*, i8** %chp1084, align 8
  %601 = load i8, i8* %600, align 1
  %conv1110 = zext i8 %601 to i32
  %and1111 = and i32 %conv1110, 16
  %tobool1112 = icmp ne i32 %and1111, 0
  br i1 %tobool1112, label %cond.false.1114, label %cond.true.1113

cond.true.1113:                                   ; preds = %cond.false.1109
  br label %cond.end.1120

cond.false.1114:                                  ; preds = %cond.false.1109
  %602 = load i8*, i8** %chp1084, align 8
  %603 = load i8, i8* %602, align 1
  %conv1115 = zext i8 %603 to i32
  %and1116 = and i32 %conv1115, 8
  %tobool1117 = icmp ne i32 %and1116, 0
  %lnot1118 = xor i1 %tobool1117, true
  %cond1119 = select i1 %lnot1118, i32 4, i32 5
  br label %cond.end.1120

cond.end.1120:                                    ; preds = %cond.false.1114, %cond.true.1113
  %cond1121 = phi i32 [ 3, %cond.true.1113 ], [ %cond1119, %cond.false.1114 ]
  br label %cond.end.1122

cond.end.1122:                                    ; preds = %cond.end.1120, %cond.true.1108
  %cond1123 = phi i32 [ 2, %cond.true.1108 ], [ %cond1121, %cond.end.1120 ]
  br label %cond.end.1124

cond.end.1124:                                    ; preds = %cond.end.1122, %cond.true.1103
  %cond1125 = phi i32 [ 1, %cond.true.1103 ], [ %cond1123, %cond.end.1122 ]
  %conv1126 = sext i32 %cond1125 to i64
  %604 = load i64, i64* %from_byte.addr, align 8
  %add1127 = add nsw i64 %604, %conv1126
  store i64 %add1127, i64* %from_byte.addr, align 8
  br label %do.end.1128

do.end.1128:                                      ; preds = %cond.end.1124
  br label %if.end.1129

if.end.1129:                                      ; preds = %do.end.1128, %if.then.1080
  br label %do.end.1130

do.end.1130:                                      ; preds = %if.end.1129
  %605 = load i64, i64* %from.addr, align 8
  %606 = load i64, i64* %end.addr, align 8
  %cmp1131 = icmp slt i64 %605, %606
  br i1 %cmp1131, label %if.then.1133, label %if.end.1134

if.then.1133:                                     ; preds = %do.end.1130
  %607 = load i64, i64* %from.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_FORWARD(i64 %607)
  br label %if.end.1134

if.end.1134:                                      ; preds = %if.then.1133, %do.end.1130
  br label %do.end.1135

do.end.1135:                                      ; preds = %if.end.1134
  br label %while.cond.739

while.end.1136:                                   ; preds = %while.cond.739
  br label %symdone

symdone:                                          ; preds = %while.end.1136, %sw.default
  %608 = load %struct.level*, %struct.level** %curlevel, align 8
  %last1137 = getelementptr inbounds %struct.level, %struct.level* %608, i32 0, i32 0
  %609 = load i64, i64* %last1137, align 8
  %610 = load %struct.level*, %struct.level** %curlevel, align 8
  %prev1138 = getelementptr inbounds %struct.level, %struct.level* %610, i32 0, i32 1
  store i64 %609, i64* %prev1138, align 8
  br label %sw.epilog.2036

sw.bb.1139:                                       ; preds = %if.end.575, %if.end.575
  %611 = load i32, i32* %commentstop.addr, align 4
  %tobool1140 = icmp ne i32 %611, 0
  br i1 %tobool1140, label %if.then.1143, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb.1139
  %612 = load i8, i8* %boundary_stop, align 1
  %tobool1141 = trunc i8 %612 to i1
  br i1 %tobool1141, label %if.then.1143, label %if.end.1144

if.then.1143:                                     ; preds = %lor.lhs.false, %sw.bb.1139
  br label %done

if.end.1144:                                      ; preds = %lor.lhs.false
  br label %startincomment

startincomment:                                   ; preds = %if.end.1144, %if.then.180
  %613 = load i64, i64* %from.addr, align 8
  %614 = load i64, i64* %from_byte.addr, align 8
  %615 = load i64, i64* %end.addr, align 8
  %incomment1145 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 2
  %616 = load i64, i64* %incomment1145, align 8
  %comstyle1146 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 3
  %617 = load i32, i32* %comstyle1146, align 4
  %618 = load i64, i64* %from.addr, align 8
  %619 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv1147 = getelementptr inbounds %struct.buffer, %struct.buffer* %619, i32 0, i32 77
  %620 = load i64, i64* %begv1147, align 8
  %cmp1148 = icmp eq i64 %618, %620
  br i1 %cmp1148, label %cond.true.1155, label %lor.lhs.false.1150

lor.lhs.false.1150:                               ; preds = %startincomment
  %621 = load i64, i64* %from.addr, align 8
  %comstr_start1151 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 10
  %622 = load i64, i64* %comstr_start1151, align 8
  %add1152 = add nsw i64 %622, 3
  %cmp1153 = icmp slt i64 %621, %add1152
  br i1 %cmp1153, label %cond.true.1155, label %cond.false.1156

cond.true.1155:                                   ; preds = %lor.lhs.false.1150, %startincomment
  br label %cond.end.1157

cond.false.1156:                                  ; preds = %lor.lhs.false.1150
  %623 = load i32, i32* %prev_from_syntax, align 4
  br label %cond.end.1157

cond.end.1157:                                    ; preds = %cond.false.1156, %cond.true.1155
  %cond1158 = phi i32 [ 0, %cond.true.1155 ], [ %623, %cond.false.1156 ]
  %incomment1159 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 2
  %call1160 = call zeroext i1 @forw_comment(i64 %613, i64 %614, i64 %615, i64 %616, i32 %617, i32 %cond1158, i64* %out_charpos, i64* %out_bytepos, i64* %incomment1159)
  %frombool1161 = zext i1 %call1160 to i8
  store i8 %frombool1161, i8* %found, align 1
  %624 = load i64, i64* %out_charpos, align 8
  store i64 %624, i64* %from.addr, align 8
  %625 = load i64, i64* %out_bytepos, align 8
  store i64 %625, i64* %from_byte.addr, align 8
  %626 = load i8, i8* %found, align 1
  %tobool1162 = trunc i8 %626 to i1
  br i1 %tobool1162, label %if.end.1164, label %if.then.1163

if.then.1163:                                     ; preds = %cond.end.1157
  br label %done

if.end.1164:                                      ; preds = %cond.end.1157
  br label %do.body.1165

do.body.1165:                                     ; preds = %if.end.1164
  %627 = load i64, i64* %from.addr, align 8
  store i64 %627, i64* %prev_from, align 8
  %628 = load i64, i64* %from_byte.addr, align 8
  store i64 %628, i64* %prev_from_byte, align 8
  %629 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_1166 = getelementptr inbounds %struct.buffer, %struct.buffer* %629, i32 0, i32 39
  %630 = load i64, i64* %enable_multibyte_characters_1166, align 8
  %call1167 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1168 = icmp eq i64 %630, %call1167
  br i1 %cmp1168, label %cond.false.1172, label %cond.true.1170

cond.true.1170:                                   ; preds = %do.body.1165
  %631 = load i64, i64* %prev_from_byte, align 8
  %call1171 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %631)
  br label %cond.end.1250

cond.false.1172:                                  ; preds = %do.body.1165
  br i1 true, label %cond.true.1173, label %cond.false.1193

cond.true.1173:                                   ; preds = %cond.false.1172
  %632 = load i64, i64* %prev_from_byte, align 8
  %633 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1174 = getelementptr inbounds %struct.buffer, %struct.buffer* %633, i32 0, i32 73
  %634 = load %struct.buffer_text*, %struct.buffer_text** %text1174, align 8
  %gpt_byte1175 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %634, i32 0, i32 3
  %635 = load i64, i64* %gpt_byte1175, align 8
  %cmp1176 = icmp sge i64 %632, %635
  br i1 %cmp1176, label %cond.true.1178, label %cond.false.1181

cond.true.1178:                                   ; preds = %cond.true.1173
  %636 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1179 = getelementptr inbounds %struct.buffer, %struct.buffer* %636, i32 0, i32 73
  %637 = load %struct.buffer_text*, %struct.buffer_text** %text1179, align 8
  %gap_size1180 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %637, i32 0, i32 5
  %638 = load i64, i64* %gap_size1180, align 8
  br label %cond.end.1182

cond.false.1181:                                  ; preds = %cond.true.1173
  br label %cond.end.1182

cond.end.1182:                                    ; preds = %cond.false.1181, %cond.true.1178
  %cond1183 = phi i64 [ %638, %cond.true.1178 ], [ 0, %cond.false.1181 ]
  %639 = load i64, i64* %prev_from_byte, align 8
  %add1184 = add nsw i64 %cond1183, %639
  %640 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1185 = getelementptr inbounds %struct.buffer, %struct.buffer* %640, i32 0, i32 73
  %641 = load %struct.buffer_text*, %struct.buffer_text** %text1185, align 8
  %beg1186 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %641, i32 0, i32 0
  %642 = load i8*, i8** %beg1186, align 8
  %add.ptr1187 = getelementptr inbounds i8, i8* %642, i64 %add1184
  %add.ptr1188 = getelementptr inbounds i8, i8* %add.ptr1187, i64 -1
  %643 = load i8, i8* %add.ptr1188, align 1
  %conv1189 = zext i8 %643 to i32
  %add1190 = add i32 %conv1189, 0
  %cmp1191 = icmp ult i32 %add1190, 128
  br i1 %cmp1191, label %cond.true.1213, label %cond.false.1230

cond.false.1193:                                  ; preds = %cond.false.1172
  %644 = load i64, i64* %prev_from_byte, align 8
  %645 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1194 = getelementptr inbounds %struct.buffer, %struct.buffer* %645, i32 0, i32 73
  %646 = load %struct.buffer_text*, %struct.buffer_text** %text1194, align 8
  %gpt_byte1195 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %646, i32 0, i32 3
  %647 = load i64, i64* %gpt_byte1195, align 8
  %cmp1196 = icmp sge i64 %644, %647
  br i1 %cmp1196, label %cond.true.1198, label %cond.false.1201

cond.true.1198:                                   ; preds = %cond.false.1193
  %648 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1199 = getelementptr inbounds %struct.buffer, %struct.buffer* %648, i32 0, i32 73
  %649 = load %struct.buffer_text*, %struct.buffer_text** %text1199, align 8
  %gap_size1200 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %649, i32 0, i32 5
  %650 = load i64, i64* %gap_size1200, align 8
  br label %cond.end.1202

cond.false.1201:                                  ; preds = %cond.false.1193
  br label %cond.end.1202

cond.end.1202:                                    ; preds = %cond.false.1201, %cond.true.1198
  %cond1203 = phi i64 [ %650, %cond.true.1198 ], [ 0, %cond.false.1201 ]
  %651 = load i64, i64* %prev_from_byte, align 8
  %add1204 = add nsw i64 %cond1203, %651
  %652 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1205 = getelementptr inbounds %struct.buffer, %struct.buffer* %652, i32 0, i32 73
  %653 = load %struct.buffer_text*, %struct.buffer_text** %text1205, align 8
  %beg1206 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %653, i32 0, i32 0
  %654 = load i8*, i8** %beg1206, align 8
  %add.ptr1207 = getelementptr inbounds i8, i8* %654, i64 %add1204
  %add.ptr1208 = getelementptr inbounds i8, i8* %add.ptr1207, i64 -1
  %655 = load i8, i8* %add.ptr1208, align 1
  %conv1209 = zext i8 %655 to i64
  %add1210 = add i64 %conv1209, 0
  %cmp1211 = icmp ult i64 %add1210, 128
  br i1 %cmp1211, label %cond.true.1213, label %cond.false.1230

cond.true.1213:                                   ; preds = %cond.end.1202, %cond.end.1182
  %656 = load i64, i64* %prev_from_byte, align 8
  %657 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1214 = getelementptr inbounds %struct.buffer, %struct.buffer* %657, i32 0, i32 73
  %658 = load %struct.buffer_text*, %struct.buffer_text** %text1214, align 8
  %gpt_byte1215 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %658, i32 0, i32 3
  %659 = load i64, i64* %gpt_byte1215, align 8
  %cmp1216 = icmp sge i64 %656, %659
  br i1 %cmp1216, label %cond.true.1218, label %cond.false.1221

cond.true.1218:                                   ; preds = %cond.true.1213
  %660 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1219 = getelementptr inbounds %struct.buffer, %struct.buffer* %660, i32 0, i32 73
  %661 = load %struct.buffer_text*, %struct.buffer_text** %text1219, align 8
  %gap_size1220 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %661, i32 0, i32 5
  %662 = load i64, i64* %gap_size1220, align 8
  br label %cond.end.1222

cond.false.1221:                                  ; preds = %cond.true.1213
  br label %cond.end.1222

cond.end.1222:                                    ; preds = %cond.false.1221, %cond.true.1218
  %cond1223 = phi i64 [ %662, %cond.true.1218 ], [ 0, %cond.false.1221 ]
  %663 = load i64, i64* %prev_from_byte, align 8
  %add1224 = add nsw i64 %cond1223, %663
  %664 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1225 = getelementptr inbounds %struct.buffer, %struct.buffer* %664, i32 0, i32 73
  %665 = load %struct.buffer_text*, %struct.buffer_text** %text1225, align 8
  %beg1226 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %665, i32 0, i32 0
  %666 = load i8*, i8** %beg1226, align 8
  %add.ptr1227 = getelementptr inbounds i8, i8* %666, i64 %add1224
  %add.ptr1228 = getelementptr inbounds i8, i8* %add.ptr1227, i64 -1
  %667 = load i8, i8* %add.ptr1228, align 1
  %conv1229 = zext i8 %667 to i32
  br label %cond.end.1248

cond.false.1230:                                  ; preds = %cond.end.1202, %cond.end.1182
  %668 = load i64, i64* %prev_from_byte, align 8
  %669 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1231 = getelementptr inbounds %struct.buffer, %struct.buffer* %669, i32 0, i32 73
  %670 = load %struct.buffer_text*, %struct.buffer_text** %text1231, align 8
  %gpt_byte1232 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %670, i32 0, i32 3
  %671 = load i64, i64* %gpt_byte1232, align 8
  %cmp1233 = icmp sge i64 %668, %671
  br i1 %cmp1233, label %cond.true.1235, label %cond.false.1238

cond.true.1235:                                   ; preds = %cond.false.1230
  %672 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1236 = getelementptr inbounds %struct.buffer, %struct.buffer* %672, i32 0, i32 73
  %673 = load %struct.buffer_text*, %struct.buffer_text** %text1236, align 8
  %gap_size1237 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %673, i32 0, i32 5
  %674 = load i64, i64* %gap_size1237, align 8
  br label %cond.end.1239

cond.false.1238:                                  ; preds = %cond.false.1230
  br label %cond.end.1239

cond.end.1239:                                    ; preds = %cond.false.1238, %cond.true.1235
  %cond1240 = phi i64 [ %674, %cond.true.1235 ], [ 0, %cond.false.1238 ]
  %675 = load i64, i64* %prev_from_byte, align 8
  %add1241 = add nsw i64 %cond1240, %675
  %676 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1242 = getelementptr inbounds %struct.buffer, %struct.buffer* %676, i32 0, i32 73
  %677 = load %struct.buffer_text*, %struct.buffer_text** %text1242, align 8
  %beg1243 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %677, i32 0, i32 0
  %678 = load i8*, i8** %beg1243, align 8
  %add.ptr1244 = getelementptr inbounds i8, i8* %678, i64 %add1241
  %add.ptr1245 = getelementptr inbounds i8, i8* %add.ptr1244, i64 -1
  %679 = load i8, i8* %add.ptr1245, align 1
  %conv1246 = zext i8 %679 to i32
  %add1247 = add nsw i32 %conv1246, 4194048
  br label %cond.end.1248

cond.end.1248:                                    ; preds = %cond.end.1239, %cond.end.1222
  %cond1249 = phi i32 [ %conv1229, %cond.end.1222 ], [ %add1247, %cond.end.1239 ]
  br label %cond.end.1250

cond.end.1250:                                    ; preds = %cond.end.1248, %cond.true.1170
  %cond1251 = phi i32 [ %call1171, %cond.true.1170 ], [ %cond1249, %cond.end.1248 ]
  store i32 %cond1251, i32* %temp, align 4
  %680 = load i32, i32* %temp, align 4
  %call1252 = call i32 @syntax_property_with_flags(i32 %680, i1 zeroext true)
  store i32 %call1252, i32* %prev_from_syntax, align 4
  br label %do.body.1253

do.body.1253:                                     ; preds = %cond.end.1250
  %681 = load i64, i64* %from.addr, align 8
  %inc1254 = add nsw i64 %681, 1
  store i64 %inc1254, i64* %from.addr, align 8
  %682 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_1255 = getelementptr inbounds %struct.buffer, %struct.buffer* %682, i32 0, i32 39
  %683 = load i64, i64* %enable_multibyte_characters_1255, align 8
  %call1256 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1257 = icmp eq i64 %683, %call1256
  br i1 %cmp1257, label %if.then.1259, label %if.else.1261

if.then.1259:                                     ; preds = %do.body.1253
  %684 = load i64, i64* %from_byte.addr, align 8
  %inc1260 = add nsw i64 %684, 1
  store i64 %inc1260, i64* %from_byte.addr, align 8
  br label %if.end.1308

if.else.1261:                                     ; preds = %do.body.1253
  br label %do.body.1262

do.body.1262:                                     ; preds = %if.else.1261
  %685 = load i64, i64* %from_byte.addr, align 8
  %686 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1264 = getelementptr inbounds %struct.buffer, %struct.buffer* %686, i32 0, i32 73
  %687 = load %struct.buffer_text*, %struct.buffer_text** %text1264, align 8
  %gpt_byte1265 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %687, i32 0, i32 3
  %688 = load i64, i64* %gpt_byte1265, align 8
  %cmp1266 = icmp sge i64 %685, %688
  br i1 %cmp1266, label %cond.true.1268, label %cond.false.1271

cond.true.1268:                                   ; preds = %do.body.1262
  %689 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1269 = getelementptr inbounds %struct.buffer, %struct.buffer* %689, i32 0, i32 73
  %690 = load %struct.buffer_text*, %struct.buffer_text** %text1269, align 8
  %gap_size1270 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %690, i32 0, i32 5
  %691 = load i64, i64* %gap_size1270, align 8
  br label %cond.end.1272

cond.false.1271:                                  ; preds = %do.body.1262
  br label %cond.end.1272

cond.end.1272:                                    ; preds = %cond.false.1271, %cond.true.1268
  %cond1273 = phi i64 [ %691, %cond.true.1268 ], [ 0, %cond.false.1271 ]
  %692 = load i64, i64* %from_byte.addr, align 8
  %add1274 = add nsw i64 %cond1273, %692
  %693 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1275 = getelementptr inbounds %struct.buffer, %struct.buffer* %693, i32 0, i32 73
  %694 = load %struct.buffer_text*, %struct.buffer_text** %text1275, align 8
  %beg1276 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %694, i32 0, i32 0
  %695 = load i8*, i8** %beg1276, align 8
  %add.ptr1277 = getelementptr inbounds i8, i8* %695, i64 %add1274
  %add.ptr1278 = getelementptr inbounds i8, i8* %add.ptr1277, i64 -1
  store i8* %add.ptr1278, i8** %chp1263, align 8
  %696 = load i8*, i8** %chp1263, align 8
  %697 = load i8, i8* %696, align 1
  %conv1279 = zext i8 %697 to i32
  %and1280 = and i32 %conv1279, 128
  %tobool1281 = icmp ne i32 %and1280, 0
  br i1 %tobool1281, label %cond.false.1283, label %cond.true.1282

cond.true.1282:                                   ; preds = %cond.end.1272
  br label %cond.end.1303

cond.false.1283:                                  ; preds = %cond.end.1272
  %698 = load i8*, i8** %chp1263, align 8
  %699 = load i8, i8* %698, align 1
  %conv1284 = zext i8 %699 to i32
  %and1285 = and i32 %conv1284, 32
  %tobool1286 = icmp ne i32 %and1285, 0
  br i1 %tobool1286, label %cond.false.1288, label %cond.true.1287

cond.true.1287:                                   ; preds = %cond.false.1283
  br label %cond.end.1301

cond.false.1288:                                  ; preds = %cond.false.1283
  %700 = load i8*, i8** %chp1263, align 8
  %701 = load i8, i8* %700, align 1
  %conv1289 = zext i8 %701 to i32
  %and1290 = and i32 %conv1289, 16
  %tobool1291 = icmp ne i32 %and1290, 0
  br i1 %tobool1291, label %cond.false.1293, label %cond.true.1292

cond.true.1292:                                   ; preds = %cond.false.1288
  br label %cond.end.1299

cond.false.1293:                                  ; preds = %cond.false.1288
  %702 = load i8*, i8** %chp1263, align 8
  %703 = load i8, i8* %702, align 1
  %conv1294 = zext i8 %703 to i32
  %and1295 = and i32 %conv1294, 8
  %tobool1296 = icmp ne i32 %and1295, 0
  %lnot1297 = xor i1 %tobool1296, true
  %cond1298 = select i1 %lnot1297, i32 4, i32 5
  br label %cond.end.1299

cond.end.1299:                                    ; preds = %cond.false.1293, %cond.true.1292
  %cond1300 = phi i32 [ 3, %cond.true.1292 ], [ %cond1298, %cond.false.1293 ]
  br label %cond.end.1301

cond.end.1301:                                    ; preds = %cond.end.1299, %cond.true.1287
  %cond1302 = phi i32 [ 2, %cond.true.1287 ], [ %cond1300, %cond.end.1299 ]
  br label %cond.end.1303

cond.end.1303:                                    ; preds = %cond.end.1301, %cond.true.1282
  %cond1304 = phi i32 [ 1, %cond.true.1282 ], [ %cond1302, %cond.end.1301 ]
  %conv1305 = sext i32 %cond1304 to i64
  %704 = load i64, i64* %from_byte.addr, align 8
  %add1306 = add nsw i64 %704, %conv1305
  store i64 %add1306, i64* %from_byte.addr, align 8
  br label %do.end.1307

do.end.1307:                                      ; preds = %cond.end.1303
  br label %if.end.1308

if.end.1308:                                      ; preds = %do.end.1307, %if.then.1259
  br label %do.end.1309

do.end.1309:                                      ; preds = %if.end.1308
  %705 = load i64, i64* %from.addr, align 8
  %706 = load i64, i64* %end.addr, align 8
  %cmp1310 = icmp slt i64 %705, %706
  br i1 %cmp1310, label %if.then.1312, label %if.end.1313

if.then.1312:                                     ; preds = %do.end.1309
  %707 = load i64, i64* %from.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_FORWARD(i64 %707)
  br label %if.end.1313

if.end.1313:                                      ; preds = %if.then.1312, %do.end.1309
  br label %do.end.1314

do.end.1314:                                      ; preds = %if.end.1313
  %incomment1315 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 2
  store i64 0, i64* %incomment1315, align 8
  %comstyle1316 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 3
  store i32 0, i32* %comstyle1316, align 4
  %708 = load i8, i8* %boundary_stop, align 1
  %tobool1317 = trunc i8 %708 to i1
  br i1 %tobool1317, label %if.then.1318, label %if.end.1319

if.then.1318:                                     ; preds = %do.end.1314
  br label %done

if.end.1319:                                      ; preds = %do.end.1314
  br label %sw.epilog.2036

sw.bb.1320:                                       ; preds = %if.end.575
  %709 = load i8, i8* %stopbefore.addr, align 1
  %tobool1321 = trunc i8 %709 to i1
  br i1 %tobool1321, label %if.then.1322, label %if.end.1323

if.then.1322:                                     ; preds = %sw.bb.1320
  br label %stop

if.end.1323:                                      ; preds = %sw.bb.1320
  %710 = load i64, i64* %depth, align 8
  %inc1324 = add nsw i64 %710, 1
  store i64 %inc1324, i64* %depth, align 8
  %711 = load i64, i64* %prev_from, align 8
  %712 = load %struct.level*, %struct.level** %curlevel, align 8
  %last1325 = getelementptr inbounds %struct.level, %struct.level* %712, i32 0, i32 0
  store i64 %711, i64* %last1325, align 8
  %713 = load %struct.level*, %struct.level** %curlevel, align 8
  %incdec.ptr1326 = getelementptr inbounds %struct.level, %struct.level* %713, i32 1
  store %struct.level* %incdec.ptr1326, %struct.level** %curlevel, align 8
  %714 = load %struct.level*, %struct.level** %endlevel, align 8
  %cmp1327 = icmp eq %struct.level* %incdec.ptr1326, %714
  br i1 %cmp1327, label %if.then.1329, label %if.end.1331

if.then.1329:                                     ; preds = %if.end.1323
  %715 = load %struct.level*, %struct.level** %curlevel, align 8
  %incdec.ptr1330 = getelementptr inbounds %struct.level, %struct.level* %715, i32 -1
  store %struct.level* %incdec.ptr1330, %struct.level** %curlevel, align 8
  br label %if.end.1331

if.end.1331:                                      ; preds = %if.then.1329, %if.end.1323
  %716 = load %struct.level*, %struct.level** %curlevel, align 8
  %prev1332 = getelementptr inbounds %struct.level, %struct.level* %716, i32 0, i32 1
  store i64 -1, i64* %prev1332, align 8
  %717 = load %struct.level*, %struct.level** %curlevel, align 8
  %last1333 = getelementptr inbounds %struct.level, %struct.level* %717, i32 0, i32 0
  store i64 -1, i64* %last1333, align 8
  %718 = load i64, i64* %targetdepth.addr, align 8
  %719 = load i64, i64* %depth, align 8
  %cmp1334 = icmp eq i64 %718, %719
  br i1 %cmp1334, label %if.then.1336, label %if.end.1337

if.then.1336:                                     ; preds = %if.end.1331
  br label %done

if.end.1337:                                      ; preds = %if.end.1331
  br label %sw.epilog.2036

sw.bb.1338:                                       ; preds = %if.end.575
  %720 = load i64, i64* %depth, align 8
  %dec1339 = add nsw i64 %720, -1
  store i64 %dec1339, i64* %depth, align 8
  %721 = load i64, i64* %depth, align 8
  %722 = load i64, i64* %mindepth, align 8
  %cmp1340 = icmp slt i64 %721, %722
  br i1 %cmp1340, label %if.then.1342, label %if.end.1343

if.then.1342:                                     ; preds = %sw.bb.1338
  %723 = load i64, i64* %depth, align 8
  store i64 %723, i64* %mindepth, align 8
  br label %if.end.1343

if.end.1343:                                      ; preds = %if.then.1342, %sw.bb.1338
  %724 = load %struct.level*, %struct.level** %curlevel, align 8
  %arraydecay1344 = getelementptr inbounds [100 x %struct.level], [100 x %struct.level]* %levelstart, i32 0, i32 0
  %cmp1345 = icmp ne %struct.level* %724, %arraydecay1344
  br i1 %cmp1345, label %if.then.1347, label %if.end.1349

if.then.1347:                                     ; preds = %if.end.1343
  %725 = load %struct.level*, %struct.level** %curlevel, align 8
  %incdec.ptr1348 = getelementptr inbounds %struct.level, %struct.level* %725, i32 -1
  store %struct.level* %incdec.ptr1348, %struct.level** %curlevel, align 8
  br label %if.end.1349

if.end.1349:                                      ; preds = %if.then.1347, %if.end.1343
  %726 = load %struct.level*, %struct.level** %curlevel, align 8
  %last1350 = getelementptr inbounds %struct.level, %struct.level* %726, i32 0, i32 0
  %727 = load i64, i64* %last1350, align 8
  %728 = load %struct.level*, %struct.level** %curlevel, align 8
  %prev1351 = getelementptr inbounds %struct.level, %struct.level* %728, i32 0, i32 1
  store i64 %727, i64* %prev1351, align 8
  %729 = load i64, i64* %targetdepth.addr, align 8
  %730 = load i64, i64* %depth, align 8
  %cmp1352 = icmp eq i64 %729, %730
  br i1 %cmp1352, label %if.then.1354, label %if.end.1355

if.then.1354:                                     ; preds = %if.end.1349
  br label %done

if.end.1355:                                      ; preds = %if.end.1349
  br label %sw.epilog.2036

sw.bb.1356:                                       ; preds = %if.end.575, %if.end.575
  %731 = load i64, i64* %from.addr, align 8
  %sub = sub nsw i64 %731, 1
  %comstr_start1357 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 10
  store i64 %sub, i64* %comstr_start1357, align 8
  %732 = load i8, i8* %stopbefore.addr, align 1
  %tobool1358 = trunc i8 %732 to i1
  br i1 %tobool1358, label %if.then.1359, label %if.end.1360

if.then.1359:                                     ; preds = %sw.bb.1356
  br label %stop

if.end.1360:                                      ; preds = %sw.bb.1356
  %733 = load i64, i64* %prev_from, align 8
  %734 = load %struct.level*, %struct.level** %curlevel, align 8
  %last1361 = getelementptr inbounds %struct.level, %struct.level* %734, i32 0, i32 0
  store i64 %733, i64* %last1361, align 8
  %735 = load i32, i32* %code, align 4
  %cmp1362 = icmp eq i32 %735, 7
  br i1 %cmp1362, label %cond.true.1364, label %cond.false.1451

cond.true.1364:                                   ; preds = %if.end.1360
  %736 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_1365 = getelementptr inbounds %struct.buffer, %struct.buffer* %736, i32 0, i32 39
  %737 = load i64, i64* %enable_multibyte_characters_1365, align 8
  %call1366 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1367 = icmp eq i64 %737, %call1366
  br i1 %cmp1367, label %cond.false.1371, label %cond.true.1369

cond.true.1369:                                   ; preds = %cond.true.1364
  %738 = load i64, i64* %prev_from_byte, align 8
  %call1370 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %738)
  br label %cond.end.1449

cond.false.1371:                                  ; preds = %cond.true.1364
  br i1 true, label %cond.true.1372, label %cond.false.1392

cond.true.1372:                                   ; preds = %cond.false.1371
  %739 = load i64, i64* %prev_from_byte, align 8
  %740 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1373 = getelementptr inbounds %struct.buffer, %struct.buffer* %740, i32 0, i32 73
  %741 = load %struct.buffer_text*, %struct.buffer_text** %text1373, align 8
  %gpt_byte1374 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %741, i32 0, i32 3
  %742 = load i64, i64* %gpt_byte1374, align 8
  %cmp1375 = icmp sge i64 %739, %742
  br i1 %cmp1375, label %cond.true.1377, label %cond.false.1380

cond.true.1377:                                   ; preds = %cond.true.1372
  %743 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1378 = getelementptr inbounds %struct.buffer, %struct.buffer* %743, i32 0, i32 73
  %744 = load %struct.buffer_text*, %struct.buffer_text** %text1378, align 8
  %gap_size1379 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %744, i32 0, i32 5
  %745 = load i64, i64* %gap_size1379, align 8
  br label %cond.end.1381

cond.false.1380:                                  ; preds = %cond.true.1372
  br label %cond.end.1381

cond.end.1381:                                    ; preds = %cond.false.1380, %cond.true.1377
  %cond1382 = phi i64 [ %745, %cond.true.1377 ], [ 0, %cond.false.1380 ]
  %746 = load i64, i64* %prev_from_byte, align 8
  %add1383 = add nsw i64 %cond1382, %746
  %747 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1384 = getelementptr inbounds %struct.buffer, %struct.buffer* %747, i32 0, i32 73
  %748 = load %struct.buffer_text*, %struct.buffer_text** %text1384, align 8
  %beg1385 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %748, i32 0, i32 0
  %749 = load i8*, i8** %beg1385, align 8
  %add.ptr1386 = getelementptr inbounds i8, i8* %749, i64 %add1383
  %add.ptr1387 = getelementptr inbounds i8, i8* %add.ptr1386, i64 -1
  %750 = load i8, i8* %add.ptr1387, align 1
  %conv1388 = zext i8 %750 to i32
  %add1389 = add i32 %conv1388, 0
  %cmp1390 = icmp ult i32 %add1389, 128
  br i1 %cmp1390, label %cond.true.1412, label %cond.false.1429

cond.false.1392:                                  ; preds = %cond.false.1371
  %751 = load i64, i64* %prev_from_byte, align 8
  %752 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1393 = getelementptr inbounds %struct.buffer, %struct.buffer* %752, i32 0, i32 73
  %753 = load %struct.buffer_text*, %struct.buffer_text** %text1393, align 8
  %gpt_byte1394 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %753, i32 0, i32 3
  %754 = load i64, i64* %gpt_byte1394, align 8
  %cmp1395 = icmp sge i64 %751, %754
  br i1 %cmp1395, label %cond.true.1397, label %cond.false.1400

cond.true.1397:                                   ; preds = %cond.false.1392
  %755 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1398 = getelementptr inbounds %struct.buffer, %struct.buffer* %755, i32 0, i32 73
  %756 = load %struct.buffer_text*, %struct.buffer_text** %text1398, align 8
  %gap_size1399 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %756, i32 0, i32 5
  %757 = load i64, i64* %gap_size1399, align 8
  br label %cond.end.1401

cond.false.1400:                                  ; preds = %cond.false.1392
  br label %cond.end.1401

cond.end.1401:                                    ; preds = %cond.false.1400, %cond.true.1397
  %cond1402 = phi i64 [ %757, %cond.true.1397 ], [ 0, %cond.false.1400 ]
  %758 = load i64, i64* %prev_from_byte, align 8
  %add1403 = add nsw i64 %cond1402, %758
  %759 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1404 = getelementptr inbounds %struct.buffer, %struct.buffer* %759, i32 0, i32 73
  %760 = load %struct.buffer_text*, %struct.buffer_text** %text1404, align 8
  %beg1405 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %760, i32 0, i32 0
  %761 = load i8*, i8** %beg1405, align 8
  %add.ptr1406 = getelementptr inbounds i8, i8* %761, i64 %add1403
  %add.ptr1407 = getelementptr inbounds i8, i8* %add.ptr1406, i64 -1
  %762 = load i8, i8* %add.ptr1407, align 1
  %conv1408 = zext i8 %762 to i64
  %add1409 = add i64 %conv1408, 0
  %cmp1410 = icmp ult i64 %add1409, 128
  br i1 %cmp1410, label %cond.true.1412, label %cond.false.1429

cond.true.1412:                                   ; preds = %cond.end.1401, %cond.end.1381
  %763 = load i64, i64* %prev_from_byte, align 8
  %764 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1413 = getelementptr inbounds %struct.buffer, %struct.buffer* %764, i32 0, i32 73
  %765 = load %struct.buffer_text*, %struct.buffer_text** %text1413, align 8
  %gpt_byte1414 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %765, i32 0, i32 3
  %766 = load i64, i64* %gpt_byte1414, align 8
  %cmp1415 = icmp sge i64 %763, %766
  br i1 %cmp1415, label %cond.true.1417, label %cond.false.1420

cond.true.1417:                                   ; preds = %cond.true.1412
  %767 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1418 = getelementptr inbounds %struct.buffer, %struct.buffer* %767, i32 0, i32 73
  %768 = load %struct.buffer_text*, %struct.buffer_text** %text1418, align 8
  %gap_size1419 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %768, i32 0, i32 5
  %769 = load i64, i64* %gap_size1419, align 8
  br label %cond.end.1421

cond.false.1420:                                  ; preds = %cond.true.1412
  br label %cond.end.1421

cond.end.1421:                                    ; preds = %cond.false.1420, %cond.true.1417
  %cond1422 = phi i64 [ %769, %cond.true.1417 ], [ 0, %cond.false.1420 ]
  %770 = load i64, i64* %prev_from_byte, align 8
  %add1423 = add nsw i64 %cond1422, %770
  %771 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1424 = getelementptr inbounds %struct.buffer, %struct.buffer* %771, i32 0, i32 73
  %772 = load %struct.buffer_text*, %struct.buffer_text** %text1424, align 8
  %beg1425 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %772, i32 0, i32 0
  %773 = load i8*, i8** %beg1425, align 8
  %add.ptr1426 = getelementptr inbounds i8, i8* %773, i64 %add1423
  %add.ptr1427 = getelementptr inbounds i8, i8* %add.ptr1426, i64 -1
  %774 = load i8, i8* %add.ptr1427, align 1
  %conv1428 = zext i8 %774 to i32
  br label %cond.end.1447

cond.false.1429:                                  ; preds = %cond.end.1401, %cond.end.1381
  %775 = load i64, i64* %prev_from_byte, align 8
  %776 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1430 = getelementptr inbounds %struct.buffer, %struct.buffer* %776, i32 0, i32 73
  %777 = load %struct.buffer_text*, %struct.buffer_text** %text1430, align 8
  %gpt_byte1431 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %777, i32 0, i32 3
  %778 = load i64, i64* %gpt_byte1431, align 8
  %cmp1432 = icmp sge i64 %775, %778
  br i1 %cmp1432, label %cond.true.1434, label %cond.false.1437

cond.true.1434:                                   ; preds = %cond.false.1429
  %779 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1435 = getelementptr inbounds %struct.buffer, %struct.buffer* %779, i32 0, i32 73
  %780 = load %struct.buffer_text*, %struct.buffer_text** %text1435, align 8
  %gap_size1436 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %780, i32 0, i32 5
  %781 = load i64, i64* %gap_size1436, align 8
  br label %cond.end.1438

cond.false.1437:                                  ; preds = %cond.false.1429
  br label %cond.end.1438

cond.end.1438:                                    ; preds = %cond.false.1437, %cond.true.1434
  %cond1439 = phi i64 [ %781, %cond.true.1434 ], [ 0, %cond.false.1437 ]
  %782 = load i64, i64* %prev_from_byte, align 8
  %add1440 = add nsw i64 %cond1439, %782
  %783 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1441 = getelementptr inbounds %struct.buffer, %struct.buffer* %783, i32 0, i32 73
  %784 = load %struct.buffer_text*, %struct.buffer_text** %text1441, align 8
  %beg1442 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %784, i32 0, i32 0
  %785 = load i8*, i8** %beg1442, align 8
  %add.ptr1443 = getelementptr inbounds i8, i8* %785, i64 %add1440
  %add.ptr1444 = getelementptr inbounds i8, i8* %add.ptr1443, i64 -1
  %786 = load i8, i8* %add.ptr1444, align 1
  %conv1445 = zext i8 %786 to i32
  %add1446 = add nsw i32 %conv1445, 4194048
  br label %cond.end.1447

cond.end.1447:                                    ; preds = %cond.end.1438, %cond.end.1421
  %cond1448 = phi i32 [ %conv1428, %cond.end.1421 ], [ %add1446, %cond.end.1438 ]
  br label %cond.end.1449

cond.end.1449:                                    ; preds = %cond.end.1447, %cond.true.1369
  %cond1450 = phi i32 [ %call1370, %cond.true.1369 ], [ %cond1448, %cond.end.1447 ]
  br label %cond.end.1452

cond.false.1451:                                  ; preds = %if.end.1360
  br label %cond.end.1452

cond.end.1452:                                    ; preds = %cond.false.1451, %cond.end.1449
  %cond1453 = phi i32 [ %cond1450, %cond.end.1449 ], [ 258, %cond.false.1451 ]
  %instring1454 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 1
  store i32 %cond1453, i32* %instring1454, align 4
  %787 = load i8, i8* %boundary_stop, align 1
  %tobool1455 = trunc i8 %787 to i1
  br i1 %tobool1455, label %if.then.1456, label %if.end.1457

if.then.1456:                                     ; preds = %cond.end.1452
  br label %done

if.end.1457:                                      ; preds = %cond.end.1452
  br label %startinstring

startinstring:                                    ; preds = %if.end.1457, %if.end.192
  %instring1458 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 1
  %788 = load i32, i32* %instring1458, align 4
  %cmp1459 = icmp ne i32 %788, 258
  %frombool1461 = zext i1 %cmp1459 to i8
  store i8 %frombool1461, i8* %nofence, align 1
  br label %while.body.1463

while.body.1463:                                  ; preds = %startinstring, %do.end.1876
  %789 = load i64, i64* %from.addr, align 8
  %790 = load i64, i64* %end.addr, align 8
  %cmp1464 = icmp sge i64 %789, %790
  br i1 %cmp1464, label %if.then.1466, label %if.end.1467

if.then.1466:                                     ; preds = %while.body.1463
  br label %done

if.end.1467:                                      ; preds = %while.body.1463
  %791 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_1468 = getelementptr inbounds %struct.buffer, %struct.buffer* %791, i32 0, i32 39
  %792 = load i64, i64* %enable_multibyte_characters_1468, align 8
  %call1469 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1470 = icmp eq i64 %792, %call1469
  br i1 %cmp1470, label %cond.false.1474, label %cond.true.1472

cond.true.1472:                                   ; preds = %if.end.1467
  %793 = load i64, i64* %from_byte.addr, align 8
  %call1473 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %793)
  br label %cond.end.1552

cond.false.1474:                                  ; preds = %if.end.1467
  br i1 true, label %cond.true.1475, label %cond.false.1495

cond.true.1475:                                   ; preds = %cond.false.1474
  %794 = load i64, i64* %from_byte.addr, align 8
  %795 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1476 = getelementptr inbounds %struct.buffer, %struct.buffer* %795, i32 0, i32 73
  %796 = load %struct.buffer_text*, %struct.buffer_text** %text1476, align 8
  %gpt_byte1477 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %796, i32 0, i32 3
  %797 = load i64, i64* %gpt_byte1477, align 8
  %cmp1478 = icmp sge i64 %794, %797
  br i1 %cmp1478, label %cond.true.1480, label %cond.false.1483

cond.true.1480:                                   ; preds = %cond.true.1475
  %798 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1481 = getelementptr inbounds %struct.buffer, %struct.buffer* %798, i32 0, i32 73
  %799 = load %struct.buffer_text*, %struct.buffer_text** %text1481, align 8
  %gap_size1482 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %799, i32 0, i32 5
  %800 = load i64, i64* %gap_size1482, align 8
  br label %cond.end.1484

cond.false.1483:                                  ; preds = %cond.true.1475
  br label %cond.end.1484

cond.end.1484:                                    ; preds = %cond.false.1483, %cond.true.1480
  %cond1485 = phi i64 [ %800, %cond.true.1480 ], [ 0, %cond.false.1483 ]
  %801 = load i64, i64* %from_byte.addr, align 8
  %add1486 = add nsw i64 %cond1485, %801
  %802 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1487 = getelementptr inbounds %struct.buffer, %struct.buffer* %802, i32 0, i32 73
  %803 = load %struct.buffer_text*, %struct.buffer_text** %text1487, align 8
  %beg1488 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %803, i32 0, i32 0
  %804 = load i8*, i8** %beg1488, align 8
  %add.ptr1489 = getelementptr inbounds i8, i8* %804, i64 %add1486
  %add.ptr1490 = getelementptr inbounds i8, i8* %add.ptr1489, i64 -1
  %805 = load i8, i8* %add.ptr1490, align 1
  %conv1491 = zext i8 %805 to i32
  %add1492 = add i32 %conv1491, 0
  %cmp1493 = icmp ult i32 %add1492, 128
  br i1 %cmp1493, label %cond.true.1515, label %cond.false.1532

cond.false.1495:                                  ; preds = %cond.false.1474
  %806 = load i64, i64* %from_byte.addr, align 8
  %807 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1496 = getelementptr inbounds %struct.buffer, %struct.buffer* %807, i32 0, i32 73
  %808 = load %struct.buffer_text*, %struct.buffer_text** %text1496, align 8
  %gpt_byte1497 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %808, i32 0, i32 3
  %809 = load i64, i64* %gpt_byte1497, align 8
  %cmp1498 = icmp sge i64 %806, %809
  br i1 %cmp1498, label %cond.true.1500, label %cond.false.1503

cond.true.1500:                                   ; preds = %cond.false.1495
  %810 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1501 = getelementptr inbounds %struct.buffer, %struct.buffer* %810, i32 0, i32 73
  %811 = load %struct.buffer_text*, %struct.buffer_text** %text1501, align 8
  %gap_size1502 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %811, i32 0, i32 5
  %812 = load i64, i64* %gap_size1502, align 8
  br label %cond.end.1504

cond.false.1503:                                  ; preds = %cond.false.1495
  br label %cond.end.1504

cond.end.1504:                                    ; preds = %cond.false.1503, %cond.true.1500
  %cond1505 = phi i64 [ %812, %cond.true.1500 ], [ 0, %cond.false.1503 ]
  %813 = load i64, i64* %from_byte.addr, align 8
  %add1506 = add nsw i64 %cond1505, %813
  %814 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1507 = getelementptr inbounds %struct.buffer, %struct.buffer* %814, i32 0, i32 73
  %815 = load %struct.buffer_text*, %struct.buffer_text** %text1507, align 8
  %beg1508 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %815, i32 0, i32 0
  %816 = load i8*, i8** %beg1508, align 8
  %add.ptr1509 = getelementptr inbounds i8, i8* %816, i64 %add1506
  %add.ptr1510 = getelementptr inbounds i8, i8* %add.ptr1509, i64 -1
  %817 = load i8, i8* %add.ptr1510, align 1
  %conv1511 = zext i8 %817 to i64
  %add1512 = add i64 %conv1511, 0
  %cmp1513 = icmp ult i64 %add1512, 128
  br i1 %cmp1513, label %cond.true.1515, label %cond.false.1532

cond.true.1515:                                   ; preds = %cond.end.1504, %cond.end.1484
  %818 = load i64, i64* %from_byte.addr, align 8
  %819 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1516 = getelementptr inbounds %struct.buffer, %struct.buffer* %819, i32 0, i32 73
  %820 = load %struct.buffer_text*, %struct.buffer_text** %text1516, align 8
  %gpt_byte1517 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %820, i32 0, i32 3
  %821 = load i64, i64* %gpt_byte1517, align 8
  %cmp1518 = icmp sge i64 %818, %821
  br i1 %cmp1518, label %cond.true.1520, label %cond.false.1523

cond.true.1520:                                   ; preds = %cond.true.1515
  %822 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1521 = getelementptr inbounds %struct.buffer, %struct.buffer* %822, i32 0, i32 73
  %823 = load %struct.buffer_text*, %struct.buffer_text** %text1521, align 8
  %gap_size1522 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %823, i32 0, i32 5
  %824 = load i64, i64* %gap_size1522, align 8
  br label %cond.end.1524

cond.false.1523:                                  ; preds = %cond.true.1515
  br label %cond.end.1524

cond.end.1524:                                    ; preds = %cond.false.1523, %cond.true.1520
  %cond1525 = phi i64 [ %824, %cond.true.1520 ], [ 0, %cond.false.1523 ]
  %825 = load i64, i64* %from_byte.addr, align 8
  %add1526 = add nsw i64 %cond1525, %825
  %826 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1527 = getelementptr inbounds %struct.buffer, %struct.buffer* %826, i32 0, i32 73
  %827 = load %struct.buffer_text*, %struct.buffer_text** %text1527, align 8
  %beg1528 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %827, i32 0, i32 0
  %828 = load i8*, i8** %beg1528, align 8
  %add.ptr1529 = getelementptr inbounds i8, i8* %828, i64 %add1526
  %add.ptr1530 = getelementptr inbounds i8, i8* %add.ptr1529, i64 -1
  %829 = load i8, i8* %add.ptr1530, align 1
  %conv1531 = zext i8 %829 to i32
  br label %cond.end.1550

cond.false.1532:                                  ; preds = %cond.end.1504, %cond.end.1484
  %830 = load i64, i64* %from_byte.addr, align 8
  %831 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1533 = getelementptr inbounds %struct.buffer, %struct.buffer* %831, i32 0, i32 73
  %832 = load %struct.buffer_text*, %struct.buffer_text** %text1533, align 8
  %gpt_byte1534 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %832, i32 0, i32 3
  %833 = load i64, i64* %gpt_byte1534, align 8
  %cmp1535 = icmp sge i64 %830, %833
  br i1 %cmp1535, label %cond.true.1537, label %cond.false.1540

cond.true.1537:                                   ; preds = %cond.false.1532
  %834 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1538 = getelementptr inbounds %struct.buffer, %struct.buffer* %834, i32 0, i32 73
  %835 = load %struct.buffer_text*, %struct.buffer_text** %text1538, align 8
  %gap_size1539 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %835, i32 0, i32 5
  %836 = load i64, i64* %gap_size1539, align 8
  br label %cond.end.1541

cond.false.1540:                                  ; preds = %cond.false.1532
  br label %cond.end.1541

cond.end.1541:                                    ; preds = %cond.false.1540, %cond.true.1537
  %cond1542 = phi i64 [ %836, %cond.true.1537 ], [ 0, %cond.false.1540 ]
  %837 = load i64, i64* %from_byte.addr, align 8
  %add1543 = add nsw i64 %cond1542, %837
  %838 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1544 = getelementptr inbounds %struct.buffer, %struct.buffer* %838, i32 0, i32 73
  %839 = load %struct.buffer_text*, %struct.buffer_text** %text1544, align 8
  %beg1545 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %839, i32 0, i32 0
  %840 = load i8*, i8** %beg1545, align 8
  %add.ptr1546 = getelementptr inbounds i8, i8* %840, i64 %add1543
  %add.ptr1547 = getelementptr inbounds i8, i8* %add.ptr1546, i64 -1
  %841 = load i8, i8* %add.ptr1547, align 1
  %conv1548 = zext i8 %841 to i32
  %add1549 = add nsw i32 %conv1548, 4194048
  br label %cond.end.1550

cond.end.1550:                                    ; preds = %cond.end.1541, %cond.end.1524
  %cond1551 = phi i32 [ %conv1531, %cond.end.1524 ], [ %add1549, %cond.end.1541 ]
  br label %cond.end.1552

cond.end.1552:                                    ; preds = %cond.end.1550, %cond.true.1472
  %cond1553 = phi i32 [ %call1473, %cond.true.1472 ], [ %cond1551, %cond.end.1550 ]
  store i32 %cond1553, i32* %c, align 4
  %842 = load i32, i32* %c, align 4
  %call1554 = call i32 @syntax_property(i32 %842, i1 zeroext true)
  store i32 %call1554, i32* %c_code, align 4
  %843 = load i8, i8* %nofence, align 1
  %tobool1555 = trunc i8 %843 to i1
  br i1 %tobool1555, label %land.lhs.true.1557, label %if.end.1565

land.lhs.true.1557:                               ; preds = %cond.end.1552
  %844 = load i32, i32* %c, align 4
  %instring1558 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 1
  %845 = load i32, i32* %instring1558, align 4
  %cmp1559 = icmp eq i32 %844, %845
  br i1 %cmp1559, label %land.lhs.true.1561, label %if.end.1565

land.lhs.true.1561:                               ; preds = %land.lhs.true.1557
  %846 = load i32, i32* %c_code, align 4
  %cmp1562 = icmp eq i32 %846, 7
  br i1 %cmp1562, label %if.then.1564, label %if.end.1565

if.then.1564:                                     ; preds = %land.lhs.true.1561
  br label %while.end.1877

if.end.1565:                                      ; preds = %land.lhs.true.1561, %land.lhs.true.1557, %cond.end.1552
  %847 = load i32, i32* %c_code, align 4
  switch i32 %847, label %sw.default.1725 [
    i32 15, label %sw.bb.1566
    i32 10, label %sw.bb.1570
    i32 9, label %sw.bb.1570
  ]

sw.bb.1566:                                       ; preds = %if.end.1565
  %848 = load i8, i8* %nofence, align 1
  %tobool1567 = trunc i8 %848 to i1
  br i1 %tobool1567, label %if.end.1569, label %if.then.1568

if.then.1568:                                     ; preds = %sw.bb.1566
  br label %string_end

if.end.1569:                                      ; preds = %sw.bb.1566
  br label %sw.epilog.1726

sw.bb.1570:                                       ; preds = %if.end.1565, %if.end.1565
  br label %do.body.1571

do.body.1571:                                     ; preds = %sw.bb.1570
  %849 = load i64, i64* %from.addr, align 8
  store i64 %849, i64* %prev_from, align 8
  %850 = load i64, i64* %from_byte.addr, align 8
  store i64 %850, i64* %prev_from_byte, align 8
  %851 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_1572 = getelementptr inbounds %struct.buffer, %struct.buffer* %851, i32 0, i32 39
  %852 = load i64, i64* %enable_multibyte_characters_1572, align 8
  %call1573 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1574 = icmp eq i64 %852, %call1573
  br i1 %cmp1574, label %cond.false.1578, label %cond.true.1576

cond.true.1576:                                   ; preds = %do.body.1571
  %853 = load i64, i64* %prev_from_byte, align 8
  %call1577 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %853)
  br label %cond.end.1656

cond.false.1578:                                  ; preds = %do.body.1571
  br i1 true, label %cond.true.1579, label %cond.false.1599

cond.true.1579:                                   ; preds = %cond.false.1578
  %854 = load i64, i64* %prev_from_byte, align 8
  %855 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1580 = getelementptr inbounds %struct.buffer, %struct.buffer* %855, i32 0, i32 73
  %856 = load %struct.buffer_text*, %struct.buffer_text** %text1580, align 8
  %gpt_byte1581 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %856, i32 0, i32 3
  %857 = load i64, i64* %gpt_byte1581, align 8
  %cmp1582 = icmp sge i64 %854, %857
  br i1 %cmp1582, label %cond.true.1584, label %cond.false.1587

cond.true.1584:                                   ; preds = %cond.true.1579
  %858 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1585 = getelementptr inbounds %struct.buffer, %struct.buffer* %858, i32 0, i32 73
  %859 = load %struct.buffer_text*, %struct.buffer_text** %text1585, align 8
  %gap_size1586 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %859, i32 0, i32 5
  %860 = load i64, i64* %gap_size1586, align 8
  br label %cond.end.1588

cond.false.1587:                                  ; preds = %cond.true.1579
  br label %cond.end.1588

cond.end.1588:                                    ; preds = %cond.false.1587, %cond.true.1584
  %cond1589 = phi i64 [ %860, %cond.true.1584 ], [ 0, %cond.false.1587 ]
  %861 = load i64, i64* %prev_from_byte, align 8
  %add1590 = add nsw i64 %cond1589, %861
  %862 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1591 = getelementptr inbounds %struct.buffer, %struct.buffer* %862, i32 0, i32 73
  %863 = load %struct.buffer_text*, %struct.buffer_text** %text1591, align 8
  %beg1592 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %863, i32 0, i32 0
  %864 = load i8*, i8** %beg1592, align 8
  %add.ptr1593 = getelementptr inbounds i8, i8* %864, i64 %add1590
  %add.ptr1594 = getelementptr inbounds i8, i8* %add.ptr1593, i64 -1
  %865 = load i8, i8* %add.ptr1594, align 1
  %conv1595 = zext i8 %865 to i32
  %add1596 = add i32 %conv1595, 0
  %cmp1597 = icmp ult i32 %add1596, 128
  br i1 %cmp1597, label %cond.true.1619, label %cond.false.1636

cond.false.1599:                                  ; preds = %cond.false.1578
  %866 = load i64, i64* %prev_from_byte, align 8
  %867 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1600 = getelementptr inbounds %struct.buffer, %struct.buffer* %867, i32 0, i32 73
  %868 = load %struct.buffer_text*, %struct.buffer_text** %text1600, align 8
  %gpt_byte1601 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %868, i32 0, i32 3
  %869 = load i64, i64* %gpt_byte1601, align 8
  %cmp1602 = icmp sge i64 %866, %869
  br i1 %cmp1602, label %cond.true.1604, label %cond.false.1607

cond.true.1604:                                   ; preds = %cond.false.1599
  %870 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1605 = getelementptr inbounds %struct.buffer, %struct.buffer* %870, i32 0, i32 73
  %871 = load %struct.buffer_text*, %struct.buffer_text** %text1605, align 8
  %gap_size1606 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %871, i32 0, i32 5
  %872 = load i64, i64* %gap_size1606, align 8
  br label %cond.end.1608

cond.false.1607:                                  ; preds = %cond.false.1599
  br label %cond.end.1608

cond.end.1608:                                    ; preds = %cond.false.1607, %cond.true.1604
  %cond1609 = phi i64 [ %872, %cond.true.1604 ], [ 0, %cond.false.1607 ]
  %873 = load i64, i64* %prev_from_byte, align 8
  %add1610 = add nsw i64 %cond1609, %873
  %874 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1611 = getelementptr inbounds %struct.buffer, %struct.buffer* %874, i32 0, i32 73
  %875 = load %struct.buffer_text*, %struct.buffer_text** %text1611, align 8
  %beg1612 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %875, i32 0, i32 0
  %876 = load i8*, i8** %beg1612, align 8
  %add.ptr1613 = getelementptr inbounds i8, i8* %876, i64 %add1610
  %add.ptr1614 = getelementptr inbounds i8, i8* %add.ptr1613, i64 -1
  %877 = load i8, i8* %add.ptr1614, align 1
  %conv1615 = zext i8 %877 to i64
  %add1616 = add i64 %conv1615, 0
  %cmp1617 = icmp ult i64 %add1616, 128
  br i1 %cmp1617, label %cond.true.1619, label %cond.false.1636

cond.true.1619:                                   ; preds = %cond.end.1608, %cond.end.1588
  %878 = load i64, i64* %prev_from_byte, align 8
  %879 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1620 = getelementptr inbounds %struct.buffer, %struct.buffer* %879, i32 0, i32 73
  %880 = load %struct.buffer_text*, %struct.buffer_text** %text1620, align 8
  %gpt_byte1621 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %880, i32 0, i32 3
  %881 = load i64, i64* %gpt_byte1621, align 8
  %cmp1622 = icmp sge i64 %878, %881
  br i1 %cmp1622, label %cond.true.1624, label %cond.false.1627

cond.true.1624:                                   ; preds = %cond.true.1619
  %882 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1625 = getelementptr inbounds %struct.buffer, %struct.buffer* %882, i32 0, i32 73
  %883 = load %struct.buffer_text*, %struct.buffer_text** %text1625, align 8
  %gap_size1626 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %883, i32 0, i32 5
  %884 = load i64, i64* %gap_size1626, align 8
  br label %cond.end.1628

cond.false.1627:                                  ; preds = %cond.true.1619
  br label %cond.end.1628

cond.end.1628:                                    ; preds = %cond.false.1627, %cond.true.1624
  %cond1629 = phi i64 [ %884, %cond.true.1624 ], [ 0, %cond.false.1627 ]
  %885 = load i64, i64* %prev_from_byte, align 8
  %add1630 = add nsw i64 %cond1629, %885
  %886 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1631 = getelementptr inbounds %struct.buffer, %struct.buffer* %886, i32 0, i32 73
  %887 = load %struct.buffer_text*, %struct.buffer_text** %text1631, align 8
  %beg1632 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %887, i32 0, i32 0
  %888 = load i8*, i8** %beg1632, align 8
  %add.ptr1633 = getelementptr inbounds i8, i8* %888, i64 %add1630
  %add.ptr1634 = getelementptr inbounds i8, i8* %add.ptr1633, i64 -1
  %889 = load i8, i8* %add.ptr1634, align 1
  %conv1635 = zext i8 %889 to i32
  br label %cond.end.1654

cond.false.1636:                                  ; preds = %cond.end.1608, %cond.end.1588
  %890 = load i64, i64* %prev_from_byte, align 8
  %891 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1637 = getelementptr inbounds %struct.buffer, %struct.buffer* %891, i32 0, i32 73
  %892 = load %struct.buffer_text*, %struct.buffer_text** %text1637, align 8
  %gpt_byte1638 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %892, i32 0, i32 3
  %893 = load i64, i64* %gpt_byte1638, align 8
  %cmp1639 = icmp sge i64 %890, %893
  br i1 %cmp1639, label %cond.true.1641, label %cond.false.1644

cond.true.1641:                                   ; preds = %cond.false.1636
  %894 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1642 = getelementptr inbounds %struct.buffer, %struct.buffer* %894, i32 0, i32 73
  %895 = load %struct.buffer_text*, %struct.buffer_text** %text1642, align 8
  %gap_size1643 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %895, i32 0, i32 5
  %896 = load i64, i64* %gap_size1643, align 8
  br label %cond.end.1645

cond.false.1644:                                  ; preds = %cond.false.1636
  br label %cond.end.1645

cond.end.1645:                                    ; preds = %cond.false.1644, %cond.true.1641
  %cond1646 = phi i64 [ %896, %cond.true.1641 ], [ 0, %cond.false.1644 ]
  %897 = load i64, i64* %prev_from_byte, align 8
  %add1647 = add nsw i64 %cond1646, %897
  %898 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1648 = getelementptr inbounds %struct.buffer, %struct.buffer* %898, i32 0, i32 73
  %899 = load %struct.buffer_text*, %struct.buffer_text** %text1648, align 8
  %beg1649 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %899, i32 0, i32 0
  %900 = load i8*, i8** %beg1649, align 8
  %add.ptr1650 = getelementptr inbounds i8, i8* %900, i64 %add1647
  %add.ptr1651 = getelementptr inbounds i8, i8* %add.ptr1650, i64 -1
  %901 = load i8, i8* %add.ptr1651, align 1
  %conv1652 = zext i8 %901 to i32
  %add1653 = add nsw i32 %conv1652, 4194048
  br label %cond.end.1654

cond.end.1654:                                    ; preds = %cond.end.1645, %cond.end.1628
  %cond1655 = phi i32 [ %conv1635, %cond.end.1628 ], [ %add1653, %cond.end.1645 ]
  br label %cond.end.1656

cond.end.1656:                                    ; preds = %cond.end.1654, %cond.true.1576
  %cond1657 = phi i32 [ %call1577, %cond.true.1576 ], [ %cond1655, %cond.end.1654 ]
  store i32 %cond1657, i32* %temp, align 4
  %902 = load i32, i32* %temp, align 4
  %call1658 = call i32 @syntax_property_with_flags(i32 %902, i1 zeroext true)
  store i32 %call1658, i32* %prev_from_syntax, align 4
  br label %do.body.1659

do.body.1659:                                     ; preds = %cond.end.1656
  %903 = load i64, i64* %from.addr, align 8
  %inc1660 = add nsw i64 %903, 1
  store i64 %inc1660, i64* %from.addr, align 8
  %904 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_1661 = getelementptr inbounds %struct.buffer, %struct.buffer* %904, i32 0, i32 39
  %905 = load i64, i64* %enable_multibyte_characters_1661, align 8
  %call1662 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1663 = icmp eq i64 %905, %call1662
  br i1 %cmp1663, label %if.then.1665, label %if.else.1667

if.then.1665:                                     ; preds = %do.body.1659
  %906 = load i64, i64* %from_byte.addr, align 8
  %inc1666 = add nsw i64 %906, 1
  store i64 %inc1666, i64* %from_byte.addr, align 8
  br label %if.end.1714

if.else.1667:                                     ; preds = %do.body.1659
  br label %do.body.1668

do.body.1668:                                     ; preds = %if.else.1667
  %907 = load i64, i64* %from_byte.addr, align 8
  %908 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1670 = getelementptr inbounds %struct.buffer, %struct.buffer* %908, i32 0, i32 73
  %909 = load %struct.buffer_text*, %struct.buffer_text** %text1670, align 8
  %gpt_byte1671 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %909, i32 0, i32 3
  %910 = load i64, i64* %gpt_byte1671, align 8
  %cmp1672 = icmp sge i64 %907, %910
  br i1 %cmp1672, label %cond.true.1674, label %cond.false.1677

cond.true.1674:                                   ; preds = %do.body.1668
  %911 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1675 = getelementptr inbounds %struct.buffer, %struct.buffer* %911, i32 0, i32 73
  %912 = load %struct.buffer_text*, %struct.buffer_text** %text1675, align 8
  %gap_size1676 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %912, i32 0, i32 5
  %913 = load i64, i64* %gap_size1676, align 8
  br label %cond.end.1678

cond.false.1677:                                  ; preds = %do.body.1668
  br label %cond.end.1678

cond.end.1678:                                    ; preds = %cond.false.1677, %cond.true.1674
  %cond1679 = phi i64 [ %913, %cond.true.1674 ], [ 0, %cond.false.1677 ]
  %914 = load i64, i64* %from_byte.addr, align 8
  %add1680 = add nsw i64 %cond1679, %914
  %915 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1681 = getelementptr inbounds %struct.buffer, %struct.buffer* %915, i32 0, i32 73
  %916 = load %struct.buffer_text*, %struct.buffer_text** %text1681, align 8
  %beg1682 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %916, i32 0, i32 0
  %917 = load i8*, i8** %beg1682, align 8
  %add.ptr1683 = getelementptr inbounds i8, i8* %917, i64 %add1680
  %add.ptr1684 = getelementptr inbounds i8, i8* %add.ptr1683, i64 -1
  store i8* %add.ptr1684, i8** %chp1669, align 8
  %918 = load i8*, i8** %chp1669, align 8
  %919 = load i8, i8* %918, align 1
  %conv1685 = zext i8 %919 to i32
  %and1686 = and i32 %conv1685, 128
  %tobool1687 = icmp ne i32 %and1686, 0
  br i1 %tobool1687, label %cond.false.1689, label %cond.true.1688

cond.true.1688:                                   ; preds = %cond.end.1678
  br label %cond.end.1709

cond.false.1689:                                  ; preds = %cond.end.1678
  %920 = load i8*, i8** %chp1669, align 8
  %921 = load i8, i8* %920, align 1
  %conv1690 = zext i8 %921 to i32
  %and1691 = and i32 %conv1690, 32
  %tobool1692 = icmp ne i32 %and1691, 0
  br i1 %tobool1692, label %cond.false.1694, label %cond.true.1693

cond.true.1693:                                   ; preds = %cond.false.1689
  br label %cond.end.1707

cond.false.1694:                                  ; preds = %cond.false.1689
  %922 = load i8*, i8** %chp1669, align 8
  %923 = load i8, i8* %922, align 1
  %conv1695 = zext i8 %923 to i32
  %and1696 = and i32 %conv1695, 16
  %tobool1697 = icmp ne i32 %and1696, 0
  br i1 %tobool1697, label %cond.false.1699, label %cond.true.1698

cond.true.1698:                                   ; preds = %cond.false.1694
  br label %cond.end.1705

cond.false.1699:                                  ; preds = %cond.false.1694
  %924 = load i8*, i8** %chp1669, align 8
  %925 = load i8, i8* %924, align 1
  %conv1700 = zext i8 %925 to i32
  %and1701 = and i32 %conv1700, 8
  %tobool1702 = icmp ne i32 %and1701, 0
  %lnot1703 = xor i1 %tobool1702, true
  %cond1704 = select i1 %lnot1703, i32 4, i32 5
  br label %cond.end.1705

cond.end.1705:                                    ; preds = %cond.false.1699, %cond.true.1698
  %cond1706 = phi i32 [ 3, %cond.true.1698 ], [ %cond1704, %cond.false.1699 ]
  br label %cond.end.1707

cond.end.1707:                                    ; preds = %cond.end.1705, %cond.true.1693
  %cond1708 = phi i32 [ 2, %cond.true.1693 ], [ %cond1706, %cond.end.1705 ]
  br label %cond.end.1709

cond.end.1709:                                    ; preds = %cond.end.1707, %cond.true.1688
  %cond1710 = phi i32 [ 1, %cond.true.1688 ], [ %cond1708, %cond.end.1707 ]
  %conv1711 = sext i32 %cond1710 to i64
  %926 = load i64, i64* %from_byte.addr, align 8
  %add1712 = add nsw i64 %926, %conv1711
  store i64 %add1712, i64* %from_byte.addr, align 8
  br label %do.end.1713

do.end.1713:                                      ; preds = %cond.end.1709
  br label %if.end.1714

if.end.1714:                                      ; preds = %do.end.1713, %if.then.1665
  br label %do.end.1715

do.end.1715:                                      ; preds = %if.end.1714
  %927 = load i64, i64* %from.addr, align 8
  %928 = load i64, i64* %end.addr, align 8
  %cmp1716 = icmp slt i64 %927, %928
  br i1 %cmp1716, label %if.then.1718, label %if.end.1719

if.then.1718:                                     ; preds = %do.end.1715
  %929 = load i64, i64* %from.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_FORWARD(i64 %929)
  br label %if.end.1719

if.end.1719:                                      ; preds = %if.then.1718, %do.end.1715
  br label %do.end.1720

do.end.1720:                                      ; preds = %if.end.1719
  br label %startquotedinstring

startquotedinstring:                              ; preds = %do.end.1720, %if.then.191
  %930 = load i64, i64* %from.addr, align 8
  %931 = load i64, i64* %end.addr, align 8
  %cmp1721 = icmp sge i64 %930, %931
  br i1 %cmp1721, label %if.then.1723, label %if.end.1724

if.then.1723:                                     ; preds = %startquotedinstring
  br label %endquoted

if.end.1724:                                      ; preds = %startquotedinstring
  br label %sw.epilog.1726

sw.default.1725:                                  ; preds = %if.end.1565
  br label %sw.epilog.1726

sw.epilog.1726:                                   ; preds = %sw.default.1725, %if.end.1724, %if.end.1569
  br label %do.body.1727

do.body.1727:                                     ; preds = %sw.epilog.1726
  %932 = load i64, i64* %from.addr, align 8
  store i64 %932, i64* %prev_from, align 8
  %933 = load i64, i64* %from_byte.addr, align 8
  store i64 %933, i64* %prev_from_byte, align 8
  %934 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_1728 = getelementptr inbounds %struct.buffer, %struct.buffer* %934, i32 0, i32 39
  %935 = load i64, i64* %enable_multibyte_characters_1728, align 8
  %call1729 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1730 = icmp eq i64 %935, %call1729
  br i1 %cmp1730, label %cond.false.1734, label %cond.true.1732

cond.true.1732:                                   ; preds = %do.body.1727
  %936 = load i64, i64* %prev_from_byte, align 8
  %call1733 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %936)
  br label %cond.end.1812

cond.false.1734:                                  ; preds = %do.body.1727
  br i1 true, label %cond.true.1735, label %cond.false.1755

cond.true.1735:                                   ; preds = %cond.false.1734
  %937 = load i64, i64* %prev_from_byte, align 8
  %938 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1736 = getelementptr inbounds %struct.buffer, %struct.buffer* %938, i32 0, i32 73
  %939 = load %struct.buffer_text*, %struct.buffer_text** %text1736, align 8
  %gpt_byte1737 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %939, i32 0, i32 3
  %940 = load i64, i64* %gpt_byte1737, align 8
  %cmp1738 = icmp sge i64 %937, %940
  br i1 %cmp1738, label %cond.true.1740, label %cond.false.1743

cond.true.1740:                                   ; preds = %cond.true.1735
  %941 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1741 = getelementptr inbounds %struct.buffer, %struct.buffer* %941, i32 0, i32 73
  %942 = load %struct.buffer_text*, %struct.buffer_text** %text1741, align 8
  %gap_size1742 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %942, i32 0, i32 5
  %943 = load i64, i64* %gap_size1742, align 8
  br label %cond.end.1744

cond.false.1743:                                  ; preds = %cond.true.1735
  br label %cond.end.1744

cond.end.1744:                                    ; preds = %cond.false.1743, %cond.true.1740
  %cond1745 = phi i64 [ %943, %cond.true.1740 ], [ 0, %cond.false.1743 ]
  %944 = load i64, i64* %prev_from_byte, align 8
  %add1746 = add nsw i64 %cond1745, %944
  %945 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1747 = getelementptr inbounds %struct.buffer, %struct.buffer* %945, i32 0, i32 73
  %946 = load %struct.buffer_text*, %struct.buffer_text** %text1747, align 8
  %beg1748 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %946, i32 0, i32 0
  %947 = load i8*, i8** %beg1748, align 8
  %add.ptr1749 = getelementptr inbounds i8, i8* %947, i64 %add1746
  %add.ptr1750 = getelementptr inbounds i8, i8* %add.ptr1749, i64 -1
  %948 = load i8, i8* %add.ptr1750, align 1
  %conv1751 = zext i8 %948 to i32
  %add1752 = add i32 %conv1751, 0
  %cmp1753 = icmp ult i32 %add1752, 128
  br i1 %cmp1753, label %cond.true.1775, label %cond.false.1792

cond.false.1755:                                  ; preds = %cond.false.1734
  %949 = load i64, i64* %prev_from_byte, align 8
  %950 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1756 = getelementptr inbounds %struct.buffer, %struct.buffer* %950, i32 0, i32 73
  %951 = load %struct.buffer_text*, %struct.buffer_text** %text1756, align 8
  %gpt_byte1757 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %951, i32 0, i32 3
  %952 = load i64, i64* %gpt_byte1757, align 8
  %cmp1758 = icmp sge i64 %949, %952
  br i1 %cmp1758, label %cond.true.1760, label %cond.false.1763

cond.true.1760:                                   ; preds = %cond.false.1755
  %953 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1761 = getelementptr inbounds %struct.buffer, %struct.buffer* %953, i32 0, i32 73
  %954 = load %struct.buffer_text*, %struct.buffer_text** %text1761, align 8
  %gap_size1762 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %954, i32 0, i32 5
  %955 = load i64, i64* %gap_size1762, align 8
  br label %cond.end.1764

cond.false.1763:                                  ; preds = %cond.false.1755
  br label %cond.end.1764

cond.end.1764:                                    ; preds = %cond.false.1763, %cond.true.1760
  %cond1765 = phi i64 [ %955, %cond.true.1760 ], [ 0, %cond.false.1763 ]
  %956 = load i64, i64* %prev_from_byte, align 8
  %add1766 = add nsw i64 %cond1765, %956
  %957 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1767 = getelementptr inbounds %struct.buffer, %struct.buffer* %957, i32 0, i32 73
  %958 = load %struct.buffer_text*, %struct.buffer_text** %text1767, align 8
  %beg1768 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %958, i32 0, i32 0
  %959 = load i8*, i8** %beg1768, align 8
  %add.ptr1769 = getelementptr inbounds i8, i8* %959, i64 %add1766
  %add.ptr1770 = getelementptr inbounds i8, i8* %add.ptr1769, i64 -1
  %960 = load i8, i8* %add.ptr1770, align 1
  %conv1771 = zext i8 %960 to i64
  %add1772 = add i64 %conv1771, 0
  %cmp1773 = icmp ult i64 %add1772, 128
  br i1 %cmp1773, label %cond.true.1775, label %cond.false.1792

cond.true.1775:                                   ; preds = %cond.end.1764, %cond.end.1744
  %961 = load i64, i64* %prev_from_byte, align 8
  %962 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1776 = getelementptr inbounds %struct.buffer, %struct.buffer* %962, i32 0, i32 73
  %963 = load %struct.buffer_text*, %struct.buffer_text** %text1776, align 8
  %gpt_byte1777 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %963, i32 0, i32 3
  %964 = load i64, i64* %gpt_byte1777, align 8
  %cmp1778 = icmp sge i64 %961, %964
  br i1 %cmp1778, label %cond.true.1780, label %cond.false.1783

cond.true.1780:                                   ; preds = %cond.true.1775
  %965 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1781 = getelementptr inbounds %struct.buffer, %struct.buffer* %965, i32 0, i32 73
  %966 = load %struct.buffer_text*, %struct.buffer_text** %text1781, align 8
  %gap_size1782 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %966, i32 0, i32 5
  %967 = load i64, i64* %gap_size1782, align 8
  br label %cond.end.1784

cond.false.1783:                                  ; preds = %cond.true.1775
  br label %cond.end.1784

cond.end.1784:                                    ; preds = %cond.false.1783, %cond.true.1780
  %cond1785 = phi i64 [ %967, %cond.true.1780 ], [ 0, %cond.false.1783 ]
  %968 = load i64, i64* %prev_from_byte, align 8
  %add1786 = add nsw i64 %cond1785, %968
  %969 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1787 = getelementptr inbounds %struct.buffer, %struct.buffer* %969, i32 0, i32 73
  %970 = load %struct.buffer_text*, %struct.buffer_text** %text1787, align 8
  %beg1788 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %970, i32 0, i32 0
  %971 = load i8*, i8** %beg1788, align 8
  %add.ptr1789 = getelementptr inbounds i8, i8* %971, i64 %add1786
  %add.ptr1790 = getelementptr inbounds i8, i8* %add.ptr1789, i64 -1
  %972 = load i8, i8* %add.ptr1790, align 1
  %conv1791 = zext i8 %972 to i32
  br label %cond.end.1810

cond.false.1792:                                  ; preds = %cond.end.1764, %cond.end.1744
  %973 = load i64, i64* %prev_from_byte, align 8
  %974 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1793 = getelementptr inbounds %struct.buffer, %struct.buffer* %974, i32 0, i32 73
  %975 = load %struct.buffer_text*, %struct.buffer_text** %text1793, align 8
  %gpt_byte1794 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %975, i32 0, i32 3
  %976 = load i64, i64* %gpt_byte1794, align 8
  %cmp1795 = icmp sge i64 %973, %976
  br i1 %cmp1795, label %cond.true.1797, label %cond.false.1800

cond.true.1797:                                   ; preds = %cond.false.1792
  %977 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1798 = getelementptr inbounds %struct.buffer, %struct.buffer* %977, i32 0, i32 73
  %978 = load %struct.buffer_text*, %struct.buffer_text** %text1798, align 8
  %gap_size1799 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %978, i32 0, i32 5
  %979 = load i64, i64* %gap_size1799, align 8
  br label %cond.end.1801

cond.false.1800:                                  ; preds = %cond.false.1792
  br label %cond.end.1801

cond.end.1801:                                    ; preds = %cond.false.1800, %cond.true.1797
  %cond1802 = phi i64 [ %979, %cond.true.1797 ], [ 0, %cond.false.1800 ]
  %980 = load i64, i64* %prev_from_byte, align 8
  %add1803 = add nsw i64 %cond1802, %980
  %981 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1804 = getelementptr inbounds %struct.buffer, %struct.buffer* %981, i32 0, i32 73
  %982 = load %struct.buffer_text*, %struct.buffer_text** %text1804, align 8
  %beg1805 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %982, i32 0, i32 0
  %983 = load i8*, i8** %beg1805, align 8
  %add.ptr1806 = getelementptr inbounds i8, i8* %983, i64 %add1803
  %add.ptr1807 = getelementptr inbounds i8, i8* %add.ptr1806, i64 -1
  %984 = load i8, i8* %add.ptr1807, align 1
  %conv1808 = zext i8 %984 to i32
  %add1809 = add nsw i32 %conv1808, 4194048
  br label %cond.end.1810

cond.end.1810:                                    ; preds = %cond.end.1801, %cond.end.1784
  %cond1811 = phi i32 [ %conv1791, %cond.end.1784 ], [ %add1809, %cond.end.1801 ]
  br label %cond.end.1812

cond.end.1812:                                    ; preds = %cond.end.1810, %cond.true.1732
  %cond1813 = phi i32 [ %call1733, %cond.true.1732 ], [ %cond1811, %cond.end.1810 ]
  store i32 %cond1813, i32* %temp, align 4
  %985 = load i32, i32* %temp, align 4
  %call1814 = call i32 @syntax_property_with_flags(i32 %985, i1 zeroext true)
  store i32 %call1814, i32* %prev_from_syntax, align 4
  br label %do.body.1815

do.body.1815:                                     ; preds = %cond.end.1812
  %986 = load i64, i64* %from.addr, align 8
  %inc1816 = add nsw i64 %986, 1
  store i64 %inc1816, i64* %from.addr, align 8
  %987 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_1817 = getelementptr inbounds %struct.buffer, %struct.buffer* %987, i32 0, i32 39
  %988 = load i64, i64* %enable_multibyte_characters_1817, align 8
  %call1818 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1819 = icmp eq i64 %988, %call1818
  br i1 %cmp1819, label %if.then.1821, label %if.else.1823

if.then.1821:                                     ; preds = %do.body.1815
  %989 = load i64, i64* %from_byte.addr, align 8
  %inc1822 = add nsw i64 %989, 1
  store i64 %inc1822, i64* %from_byte.addr, align 8
  br label %if.end.1870

if.else.1823:                                     ; preds = %do.body.1815
  br label %do.body.1824

do.body.1824:                                     ; preds = %if.else.1823
  %990 = load i64, i64* %from_byte.addr, align 8
  %991 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1826 = getelementptr inbounds %struct.buffer, %struct.buffer* %991, i32 0, i32 73
  %992 = load %struct.buffer_text*, %struct.buffer_text** %text1826, align 8
  %gpt_byte1827 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %992, i32 0, i32 3
  %993 = load i64, i64* %gpt_byte1827, align 8
  %cmp1828 = icmp sge i64 %990, %993
  br i1 %cmp1828, label %cond.true.1830, label %cond.false.1833

cond.true.1830:                                   ; preds = %do.body.1824
  %994 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1831 = getelementptr inbounds %struct.buffer, %struct.buffer* %994, i32 0, i32 73
  %995 = load %struct.buffer_text*, %struct.buffer_text** %text1831, align 8
  %gap_size1832 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %995, i32 0, i32 5
  %996 = load i64, i64* %gap_size1832, align 8
  br label %cond.end.1834

cond.false.1833:                                  ; preds = %do.body.1824
  br label %cond.end.1834

cond.end.1834:                                    ; preds = %cond.false.1833, %cond.true.1830
  %cond1835 = phi i64 [ %996, %cond.true.1830 ], [ 0, %cond.false.1833 ]
  %997 = load i64, i64* %from_byte.addr, align 8
  %add1836 = add nsw i64 %cond1835, %997
  %998 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1837 = getelementptr inbounds %struct.buffer, %struct.buffer* %998, i32 0, i32 73
  %999 = load %struct.buffer_text*, %struct.buffer_text** %text1837, align 8
  %beg1838 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %999, i32 0, i32 0
  %1000 = load i8*, i8** %beg1838, align 8
  %add.ptr1839 = getelementptr inbounds i8, i8* %1000, i64 %add1836
  %add.ptr1840 = getelementptr inbounds i8, i8* %add.ptr1839, i64 -1
  store i8* %add.ptr1840, i8** %chp1825, align 8
  %1001 = load i8*, i8** %chp1825, align 8
  %1002 = load i8, i8* %1001, align 1
  %conv1841 = zext i8 %1002 to i32
  %and1842 = and i32 %conv1841, 128
  %tobool1843 = icmp ne i32 %and1842, 0
  br i1 %tobool1843, label %cond.false.1845, label %cond.true.1844

cond.true.1844:                                   ; preds = %cond.end.1834
  br label %cond.end.1865

cond.false.1845:                                  ; preds = %cond.end.1834
  %1003 = load i8*, i8** %chp1825, align 8
  %1004 = load i8, i8* %1003, align 1
  %conv1846 = zext i8 %1004 to i32
  %and1847 = and i32 %conv1846, 32
  %tobool1848 = icmp ne i32 %and1847, 0
  br i1 %tobool1848, label %cond.false.1850, label %cond.true.1849

cond.true.1849:                                   ; preds = %cond.false.1845
  br label %cond.end.1863

cond.false.1850:                                  ; preds = %cond.false.1845
  %1005 = load i8*, i8** %chp1825, align 8
  %1006 = load i8, i8* %1005, align 1
  %conv1851 = zext i8 %1006 to i32
  %and1852 = and i32 %conv1851, 16
  %tobool1853 = icmp ne i32 %and1852, 0
  br i1 %tobool1853, label %cond.false.1855, label %cond.true.1854

cond.true.1854:                                   ; preds = %cond.false.1850
  br label %cond.end.1861

cond.false.1855:                                  ; preds = %cond.false.1850
  %1007 = load i8*, i8** %chp1825, align 8
  %1008 = load i8, i8* %1007, align 1
  %conv1856 = zext i8 %1008 to i32
  %and1857 = and i32 %conv1856, 8
  %tobool1858 = icmp ne i32 %and1857, 0
  %lnot1859 = xor i1 %tobool1858, true
  %cond1860 = select i1 %lnot1859, i32 4, i32 5
  br label %cond.end.1861

cond.end.1861:                                    ; preds = %cond.false.1855, %cond.true.1854
  %cond1862 = phi i32 [ 3, %cond.true.1854 ], [ %cond1860, %cond.false.1855 ]
  br label %cond.end.1863

cond.end.1863:                                    ; preds = %cond.end.1861, %cond.true.1849
  %cond1864 = phi i32 [ 2, %cond.true.1849 ], [ %cond1862, %cond.end.1861 ]
  br label %cond.end.1865

cond.end.1865:                                    ; preds = %cond.end.1863, %cond.true.1844
  %cond1866 = phi i32 [ 1, %cond.true.1844 ], [ %cond1864, %cond.end.1863 ]
  %conv1867 = sext i32 %cond1866 to i64
  %1009 = load i64, i64* %from_byte.addr, align 8
  %add1868 = add nsw i64 %1009, %conv1867
  store i64 %add1868, i64* %from_byte.addr, align 8
  br label %do.end.1869

do.end.1869:                                      ; preds = %cond.end.1865
  br label %if.end.1870

if.end.1870:                                      ; preds = %do.end.1869, %if.then.1821
  br label %do.end.1871

do.end.1871:                                      ; preds = %if.end.1870
  %1010 = load i64, i64* %from.addr, align 8
  %1011 = load i64, i64* %end.addr, align 8
  %cmp1872 = icmp slt i64 %1010, %1011
  br i1 %cmp1872, label %if.then.1874, label %if.end.1875

if.then.1874:                                     ; preds = %do.end.1871
  %1012 = load i64, i64* %from.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_FORWARD(i64 %1012)
  br label %if.end.1875

if.end.1875:                                      ; preds = %if.then.1874, %do.end.1871
  br label %do.end.1876

do.end.1876:                                      ; preds = %if.end.1875
  br label %while.body.1463

while.end.1877:                                   ; preds = %if.then.1564
  br label %string_end

string_end:                                       ; preds = %while.end.1877, %if.then.1568
  %instring1878 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 1
  store i32 -1, i32* %instring1878, align 4
  %1013 = load %struct.level*, %struct.level** %curlevel, align 8
  %last1879 = getelementptr inbounds %struct.level, %struct.level* %1013, i32 0, i32 0
  %1014 = load i64, i64* %last1879, align 8
  %1015 = load %struct.level*, %struct.level** %curlevel, align 8
  %prev1880 = getelementptr inbounds %struct.level, %struct.level* %1015, i32 0, i32 1
  store i64 %1014, i64* %prev1880, align 8
  br label %do.body.1881

do.body.1881:                                     ; preds = %string_end
  %1016 = load i64, i64* %from.addr, align 8
  store i64 %1016, i64* %prev_from, align 8
  %1017 = load i64, i64* %from_byte.addr, align 8
  store i64 %1017, i64* %prev_from_byte, align 8
  %1018 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_1882 = getelementptr inbounds %struct.buffer, %struct.buffer* %1018, i32 0, i32 39
  %1019 = load i64, i64* %enable_multibyte_characters_1882, align 8
  %call1883 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1884 = icmp eq i64 %1019, %call1883
  br i1 %cmp1884, label %cond.false.1888, label %cond.true.1886

cond.true.1886:                                   ; preds = %do.body.1881
  %1020 = load i64, i64* %prev_from_byte, align 8
  %call1887 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %1020)
  br label %cond.end.1966

cond.false.1888:                                  ; preds = %do.body.1881
  br i1 true, label %cond.true.1889, label %cond.false.1909

cond.true.1889:                                   ; preds = %cond.false.1888
  %1021 = load i64, i64* %prev_from_byte, align 8
  %1022 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1890 = getelementptr inbounds %struct.buffer, %struct.buffer* %1022, i32 0, i32 73
  %1023 = load %struct.buffer_text*, %struct.buffer_text** %text1890, align 8
  %gpt_byte1891 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1023, i32 0, i32 3
  %1024 = load i64, i64* %gpt_byte1891, align 8
  %cmp1892 = icmp sge i64 %1021, %1024
  br i1 %cmp1892, label %cond.true.1894, label %cond.false.1897

cond.true.1894:                                   ; preds = %cond.true.1889
  %1025 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1895 = getelementptr inbounds %struct.buffer, %struct.buffer* %1025, i32 0, i32 73
  %1026 = load %struct.buffer_text*, %struct.buffer_text** %text1895, align 8
  %gap_size1896 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1026, i32 0, i32 5
  %1027 = load i64, i64* %gap_size1896, align 8
  br label %cond.end.1898

cond.false.1897:                                  ; preds = %cond.true.1889
  br label %cond.end.1898

cond.end.1898:                                    ; preds = %cond.false.1897, %cond.true.1894
  %cond1899 = phi i64 [ %1027, %cond.true.1894 ], [ 0, %cond.false.1897 ]
  %1028 = load i64, i64* %prev_from_byte, align 8
  %add1900 = add nsw i64 %cond1899, %1028
  %1029 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1901 = getelementptr inbounds %struct.buffer, %struct.buffer* %1029, i32 0, i32 73
  %1030 = load %struct.buffer_text*, %struct.buffer_text** %text1901, align 8
  %beg1902 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1030, i32 0, i32 0
  %1031 = load i8*, i8** %beg1902, align 8
  %add.ptr1903 = getelementptr inbounds i8, i8* %1031, i64 %add1900
  %add.ptr1904 = getelementptr inbounds i8, i8* %add.ptr1903, i64 -1
  %1032 = load i8, i8* %add.ptr1904, align 1
  %conv1905 = zext i8 %1032 to i32
  %add1906 = add i32 %conv1905, 0
  %cmp1907 = icmp ult i32 %add1906, 128
  br i1 %cmp1907, label %cond.true.1929, label %cond.false.1946

cond.false.1909:                                  ; preds = %cond.false.1888
  %1033 = load i64, i64* %prev_from_byte, align 8
  %1034 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1910 = getelementptr inbounds %struct.buffer, %struct.buffer* %1034, i32 0, i32 73
  %1035 = load %struct.buffer_text*, %struct.buffer_text** %text1910, align 8
  %gpt_byte1911 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1035, i32 0, i32 3
  %1036 = load i64, i64* %gpt_byte1911, align 8
  %cmp1912 = icmp sge i64 %1033, %1036
  br i1 %cmp1912, label %cond.true.1914, label %cond.false.1917

cond.true.1914:                                   ; preds = %cond.false.1909
  %1037 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1915 = getelementptr inbounds %struct.buffer, %struct.buffer* %1037, i32 0, i32 73
  %1038 = load %struct.buffer_text*, %struct.buffer_text** %text1915, align 8
  %gap_size1916 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1038, i32 0, i32 5
  %1039 = load i64, i64* %gap_size1916, align 8
  br label %cond.end.1918

cond.false.1917:                                  ; preds = %cond.false.1909
  br label %cond.end.1918

cond.end.1918:                                    ; preds = %cond.false.1917, %cond.true.1914
  %cond1919 = phi i64 [ %1039, %cond.true.1914 ], [ 0, %cond.false.1917 ]
  %1040 = load i64, i64* %prev_from_byte, align 8
  %add1920 = add nsw i64 %cond1919, %1040
  %1041 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1921 = getelementptr inbounds %struct.buffer, %struct.buffer* %1041, i32 0, i32 73
  %1042 = load %struct.buffer_text*, %struct.buffer_text** %text1921, align 8
  %beg1922 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1042, i32 0, i32 0
  %1043 = load i8*, i8** %beg1922, align 8
  %add.ptr1923 = getelementptr inbounds i8, i8* %1043, i64 %add1920
  %add.ptr1924 = getelementptr inbounds i8, i8* %add.ptr1923, i64 -1
  %1044 = load i8, i8* %add.ptr1924, align 1
  %conv1925 = zext i8 %1044 to i64
  %add1926 = add i64 %conv1925, 0
  %cmp1927 = icmp ult i64 %add1926, 128
  br i1 %cmp1927, label %cond.true.1929, label %cond.false.1946

cond.true.1929:                                   ; preds = %cond.end.1918, %cond.end.1898
  %1045 = load i64, i64* %prev_from_byte, align 8
  %1046 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1930 = getelementptr inbounds %struct.buffer, %struct.buffer* %1046, i32 0, i32 73
  %1047 = load %struct.buffer_text*, %struct.buffer_text** %text1930, align 8
  %gpt_byte1931 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1047, i32 0, i32 3
  %1048 = load i64, i64* %gpt_byte1931, align 8
  %cmp1932 = icmp sge i64 %1045, %1048
  br i1 %cmp1932, label %cond.true.1934, label %cond.false.1937

cond.true.1934:                                   ; preds = %cond.true.1929
  %1049 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1935 = getelementptr inbounds %struct.buffer, %struct.buffer* %1049, i32 0, i32 73
  %1050 = load %struct.buffer_text*, %struct.buffer_text** %text1935, align 8
  %gap_size1936 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1050, i32 0, i32 5
  %1051 = load i64, i64* %gap_size1936, align 8
  br label %cond.end.1938

cond.false.1937:                                  ; preds = %cond.true.1929
  br label %cond.end.1938

cond.end.1938:                                    ; preds = %cond.false.1937, %cond.true.1934
  %cond1939 = phi i64 [ %1051, %cond.true.1934 ], [ 0, %cond.false.1937 ]
  %1052 = load i64, i64* %prev_from_byte, align 8
  %add1940 = add nsw i64 %cond1939, %1052
  %1053 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1941 = getelementptr inbounds %struct.buffer, %struct.buffer* %1053, i32 0, i32 73
  %1054 = load %struct.buffer_text*, %struct.buffer_text** %text1941, align 8
  %beg1942 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1054, i32 0, i32 0
  %1055 = load i8*, i8** %beg1942, align 8
  %add.ptr1943 = getelementptr inbounds i8, i8* %1055, i64 %add1940
  %add.ptr1944 = getelementptr inbounds i8, i8* %add.ptr1943, i64 -1
  %1056 = load i8, i8* %add.ptr1944, align 1
  %conv1945 = zext i8 %1056 to i32
  br label %cond.end.1964

cond.false.1946:                                  ; preds = %cond.end.1918, %cond.end.1898
  %1057 = load i64, i64* %prev_from_byte, align 8
  %1058 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1947 = getelementptr inbounds %struct.buffer, %struct.buffer* %1058, i32 0, i32 73
  %1059 = load %struct.buffer_text*, %struct.buffer_text** %text1947, align 8
  %gpt_byte1948 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1059, i32 0, i32 3
  %1060 = load i64, i64* %gpt_byte1948, align 8
  %cmp1949 = icmp sge i64 %1057, %1060
  br i1 %cmp1949, label %cond.true.1951, label %cond.false.1954

cond.true.1951:                                   ; preds = %cond.false.1946
  %1061 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1952 = getelementptr inbounds %struct.buffer, %struct.buffer* %1061, i32 0, i32 73
  %1062 = load %struct.buffer_text*, %struct.buffer_text** %text1952, align 8
  %gap_size1953 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1062, i32 0, i32 5
  %1063 = load i64, i64* %gap_size1953, align 8
  br label %cond.end.1955

cond.false.1954:                                  ; preds = %cond.false.1946
  br label %cond.end.1955

cond.end.1955:                                    ; preds = %cond.false.1954, %cond.true.1951
  %cond1956 = phi i64 [ %1063, %cond.true.1951 ], [ 0, %cond.false.1954 ]
  %1064 = load i64, i64* %prev_from_byte, align 8
  %add1957 = add nsw i64 %cond1956, %1064
  %1065 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1958 = getelementptr inbounds %struct.buffer, %struct.buffer* %1065, i32 0, i32 73
  %1066 = load %struct.buffer_text*, %struct.buffer_text** %text1958, align 8
  %beg1959 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1066, i32 0, i32 0
  %1067 = load i8*, i8** %beg1959, align 8
  %add.ptr1960 = getelementptr inbounds i8, i8* %1067, i64 %add1957
  %add.ptr1961 = getelementptr inbounds i8, i8* %add.ptr1960, i64 -1
  %1068 = load i8, i8* %add.ptr1961, align 1
  %conv1962 = zext i8 %1068 to i32
  %add1963 = add nsw i32 %conv1962, 4194048
  br label %cond.end.1964

cond.end.1964:                                    ; preds = %cond.end.1955, %cond.end.1938
  %cond1965 = phi i32 [ %conv1945, %cond.end.1938 ], [ %add1963, %cond.end.1955 ]
  br label %cond.end.1966

cond.end.1966:                                    ; preds = %cond.end.1964, %cond.true.1886
  %cond1967 = phi i32 [ %call1887, %cond.true.1886 ], [ %cond1965, %cond.end.1964 ]
  store i32 %cond1967, i32* %temp, align 4
  %1069 = load i32, i32* %temp, align 4
  %call1968 = call i32 @syntax_property_with_flags(i32 %1069, i1 zeroext true)
  store i32 %call1968, i32* %prev_from_syntax, align 4
  br label %do.body.1969

do.body.1969:                                     ; preds = %cond.end.1966
  %1070 = load i64, i64* %from.addr, align 8
  %inc1970 = add nsw i64 %1070, 1
  store i64 %inc1970, i64* %from.addr, align 8
  %1071 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_1971 = getelementptr inbounds %struct.buffer, %struct.buffer* %1071, i32 0, i32 39
  %1072 = load i64, i64* %enable_multibyte_characters_1971, align 8
  %call1972 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1973 = icmp eq i64 %1072, %call1972
  br i1 %cmp1973, label %if.then.1975, label %if.else.1977

if.then.1975:                                     ; preds = %do.body.1969
  %1073 = load i64, i64* %from_byte.addr, align 8
  %inc1976 = add nsw i64 %1073, 1
  store i64 %inc1976, i64* %from_byte.addr, align 8
  br label %if.end.2024

if.else.1977:                                     ; preds = %do.body.1969
  br label %do.body.1978

do.body.1978:                                     ; preds = %if.else.1977
  %1074 = load i64, i64* %from_byte.addr, align 8
  %1075 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1980 = getelementptr inbounds %struct.buffer, %struct.buffer* %1075, i32 0, i32 73
  %1076 = load %struct.buffer_text*, %struct.buffer_text** %text1980, align 8
  %gpt_byte1981 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1076, i32 0, i32 3
  %1077 = load i64, i64* %gpt_byte1981, align 8
  %cmp1982 = icmp sge i64 %1074, %1077
  br i1 %cmp1982, label %cond.true.1984, label %cond.false.1987

cond.true.1984:                                   ; preds = %do.body.1978
  %1078 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1985 = getelementptr inbounds %struct.buffer, %struct.buffer* %1078, i32 0, i32 73
  %1079 = load %struct.buffer_text*, %struct.buffer_text** %text1985, align 8
  %gap_size1986 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1079, i32 0, i32 5
  %1080 = load i64, i64* %gap_size1986, align 8
  br label %cond.end.1988

cond.false.1987:                                  ; preds = %do.body.1978
  br label %cond.end.1988

cond.end.1988:                                    ; preds = %cond.false.1987, %cond.true.1984
  %cond1989 = phi i64 [ %1080, %cond.true.1984 ], [ 0, %cond.false.1987 ]
  %1081 = load i64, i64* %from_byte.addr, align 8
  %add1990 = add nsw i64 %cond1989, %1081
  %1082 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1991 = getelementptr inbounds %struct.buffer, %struct.buffer* %1082, i32 0, i32 73
  %1083 = load %struct.buffer_text*, %struct.buffer_text** %text1991, align 8
  %beg1992 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %1083, i32 0, i32 0
  %1084 = load i8*, i8** %beg1992, align 8
  %add.ptr1993 = getelementptr inbounds i8, i8* %1084, i64 %add1990
  %add.ptr1994 = getelementptr inbounds i8, i8* %add.ptr1993, i64 -1
  store i8* %add.ptr1994, i8** %chp1979, align 8
  %1085 = load i8*, i8** %chp1979, align 8
  %1086 = load i8, i8* %1085, align 1
  %conv1995 = zext i8 %1086 to i32
  %and1996 = and i32 %conv1995, 128
  %tobool1997 = icmp ne i32 %and1996, 0
  br i1 %tobool1997, label %cond.false.1999, label %cond.true.1998

cond.true.1998:                                   ; preds = %cond.end.1988
  br label %cond.end.2019

cond.false.1999:                                  ; preds = %cond.end.1988
  %1087 = load i8*, i8** %chp1979, align 8
  %1088 = load i8, i8* %1087, align 1
  %conv2000 = zext i8 %1088 to i32
  %and2001 = and i32 %conv2000, 32
  %tobool2002 = icmp ne i32 %and2001, 0
  br i1 %tobool2002, label %cond.false.2004, label %cond.true.2003

cond.true.2003:                                   ; preds = %cond.false.1999
  br label %cond.end.2017

cond.false.2004:                                  ; preds = %cond.false.1999
  %1089 = load i8*, i8** %chp1979, align 8
  %1090 = load i8, i8* %1089, align 1
  %conv2005 = zext i8 %1090 to i32
  %and2006 = and i32 %conv2005, 16
  %tobool2007 = icmp ne i32 %and2006, 0
  br i1 %tobool2007, label %cond.false.2009, label %cond.true.2008

cond.true.2008:                                   ; preds = %cond.false.2004
  br label %cond.end.2015

cond.false.2009:                                  ; preds = %cond.false.2004
  %1091 = load i8*, i8** %chp1979, align 8
  %1092 = load i8, i8* %1091, align 1
  %conv2010 = zext i8 %1092 to i32
  %and2011 = and i32 %conv2010, 8
  %tobool2012 = icmp ne i32 %and2011, 0
  %lnot2013 = xor i1 %tobool2012, true
  %cond2014 = select i1 %lnot2013, i32 4, i32 5
  br label %cond.end.2015

cond.end.2015:                                    ; preds = %cond.false.2009, %cond.true.2008
  %cond2016 = phi i32 [ 3, %cond.true.2008 ], [ %cond2014, %cond.false.2009 ]
  br label %cond.end.2017

cond.end.2017:                                    ; preds = %cond.end.2015, %cond.true.2003
  %cond2018 = phi i32 [ 2, %cond.true.2003 ], [ %cond2016, %cond.end.2015 ]
  br label %cond.end.2019

cond.end.2019:                                    ; preds = %cond.end.2017, %cond.true.1998
  %cond2020 = phi i32 [ 1, %cond.true.1998 ], [ %cond2018, %cond.end.2017 ]
  %conv2021 = sext i32 %cond2020 to i64
  %1093 = load i64, i64* %from_byte.addr, align 8
  %add2022 = add nsw i64 %1093, %conv2021
  store i64 %add2022, i64* %from_byte.addr, align 8
  br label %do.end.2023

do.end.2023:                                      ; preds = %cond.end.2019
  br label %if.end.2024

if.end.2024:                                      ; preds = %do.end.2023, %if.then.1975
  br label %do.end.2025

do.end.2025:                                      ; preds = %if.end.2024
  %1094 = load i64, i64* %from.addr, align 8
  %1095 = load i64, i64* %end.addr, align 8
  %cmp2026 = icmp slt i64 %1094, %1095
  br i1 %cmp2026, label %if.then.2028, label %if.end.2029

if.then.2028:                                     ; preds = %do.end.2025
  %1096 = load i64, i64* %from.addr, align 8
  call void @UPDATE_SYNTAX_TABLE_FORWARD(i64 %1096)
  br label %if.end.2029

if.end.2029:                                      ; preds = %if.then.2028, %do.end.2025
  br label %do.end.2030

do.end.2030:                                      ; preds = %if.end.2029
  %1097 = load i8, i8* %boundary_stop, align 1
  %tobool2031 = trunc i8 %1097 to i1
  br i1 %tobool2031, label %if.then.2032, label %if.end.2033

if.then.2032:                                     ; preds = %do.end.2030
  br label %done

if.end.2033:                                      ; preds = %do.end.2030
  br label %sw.epilog.2036

sw.bb.2034:                                       ; preds = %if.end.575
  br label %sw.epilog.2036

sw.default.2035:                                  ; preds = %if.end.575
  br label %sw.epilog.2036

sw.epilog.2036:                                   ; preds = %sw.default.2035, %sw.bb.2034, %if.end.2033, %if.end.1355, %if.end.1337, %if.end.1319, %symdone
  br label %while.cond.198

while.end.2037:                                   ; preds = %while.cond.198
  br label %done

stop:                                             ; preds = %if.then.1359, %if.then.1322, %if.then.736, %if.then.577
  %1098 = load i64, i64* %prev_from, align 8
  store i64 %1098, i64* %from.addr, align 8
  %1099 = load i64, i64* %prev_from_byte, align 8
  store i64 %1099, i64* %from_byte.addr, align 8
  br label %done

endquoted:                                        ; preds = %if.then.1723, %if.then.983, %if.then.582
  %quoted2038 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 4
  store i8 1, i8* %quoted2038, align 1
  br label %done

done:                                             ; preds = %endquoted, %stop, %while.end.2037, %if.then.2032, %if.then.1466, %if.then.1456, %if.then.1354, %if.then.1336, %if.then.1318, %if.then.1163, %if.then.1143
  %1100 = load i64, i64* %depth, align 8
  %depth2039 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 0
  store i64 %1100, i64* %depth2039, align 8
  %1101 = load i64, i64* %mindepth, align 8
  %mindepth2040 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 5
  store i64 %1101, i64* %mindepth2040, align 8
  %1102 = load %struct.level*, %struct.level** %curlevel, align 8
  %prev2041 = getelementptr inbounds %struct.level, %struct.level* %1102, i32 0, i32 1
  %1103 = load i64, i64* %prev2041, align 8
  %thislevelstart = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 6
  store i64 %1103, i64* %thislevelstart, align 8
  %1104 = load %struct.level*, %struct.level** %curlevel, align 8
  %arraydecay2042 = getelementptr inbounds [100 x %struct.level], [100 x %struct.level]* %levelstart, i32 0, i32 0
  %cmp2043 = icmp eq %struct.level* %1104, %arraydecay2042
  br i1 %cmp2043, label %cond.true.2045, label %cond.false.2046

cond.true.2045:                                   ; preds = %done
  br label %cond.end.2049

cond.false.2046:                                  ; preds = %done
  %1105 = load %struct.level*, %struct.level** %curlevel, align 8
  %add.ptr2047 = getelementptr inbounds %struct.level, %struct.level* %1105, i64 -1
  %last2048 = getelementptr inbounds %struct.level, %struct.level* %add.ptr2047, i32 0, i32 0
  %1106 = load i64, i64* %last2048, align 8
  br label %cond.end.2049

cond.end.2049:                                    ; preds = %cond.false.2046, %cond.true.2045
  %cond2050 = phi i64 [ -1, %cond.true.2045 ], [ %1106, %cond.false.2046 ]
  %prevlevelstart = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 7
  store i64 %cond2050, i64* %prevlevelstart, align 8
  %1107 = load i64, i64* %from.addr, align 8
  %location = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 8
  store i64 %1107, i64* %location, align 8
  %1108 = load i64, i64* %from_byte.addr, align 8
  %location_byte = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 9
  store i64 %1108, i64* %location_byte, align 8
  %call2051 = call i64 @builtin_lisp_symbol(i32 0)
  %levelstarts = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 11
  store i64 %call2051, i64* %levelstarts, align 8
  br label %while.cond.2052

while.cond.2052:                                  ; preds = %while.body.2056, %cond.end.2049
  %1109 = load %struct.level*, %struct.level** %curlevel, align 8
  %arraydecay2053 = getelementptr inbounds [100 x %struct.level], [100 x %struct.level]* %levelstart, i32 0, i32 0
  %cmp2054 = icmp ugt %struct.level* %1109, %arraydecay2053
  br i1 %cmp2054, label %while.body.2056, label %while.end.2063

while.body.2056:                                  ; preds = %while.cond.2052
  %1110 = load %struct.level*, %struct.level** %curlevel, align 8
  %incdec.ptr2057 = getelementptr inbounds %struct.level, %struct.level* %1110, i32 -1
  store %struct.level* %incdec.ptr2057, %struct.level** %curlevel, align 8
  %last2058 = getelementptr inbounds %struct.level, %struct.level* %incdec.ptr2057, i32 0, i32 0
  %1111 = load i64, i64* %last2058, align 8
  %shl = shl i64 %1111, 2
  %add2059 = add i64 %shl, 2
  %levelstarts2060 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 11
  %1112 = load i64, i64* %levelstarts2060, align 8
  %call2061 = call i64 @Fcons(i64 %add2059, i64 %1112)
  %levelstarts2062 = getelementptr inbounds %struct.lisp_parse_state, %struct.lisp_parse_state* %state, i32 0, i32 11
  store i64 %call2061, i64* %levelstarts2062, align 8
  br label %while.cond.2052

while.end.2063:                                   ; preds = %while.cond.2052
  store i8 0, i8* @immediate_quit, align 1
  %1113 = load %struct.lisp_parse_state*, %struct.lisp_parse_state** %stateptr.addr, align 8
  %1114 = bitcast %struct.lisp_parse_state* %1113 to i8*
  %1115 = bitcast %struct.lisp_parse_state* %state to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1114, i8* %1115, i64 88, i32 8, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define void @init_syntax_once() #0 {
entry:
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  %temp = alloca i64, align 8
  %call = call i64 @make_uninit_vector(i64 16)
  store i64 %call, i64* @Vsyntax_code_object, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 16
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i64, i64* @Vsyntax_code_object, align 8
  %2 = load i32, i32* %i, align 4
  %conv = sext i32 %2 to i64
  %3 = load i32, i32* %i, align 4
  %conv1 = sext i32 %3 to i64
  %shl = shl i64 %conv1, 2
  %add = add i64 %shl, 2
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %call3 = call i64 @Fcons(i64 %add, i64 %call2)
  call void @ASET(i64 %1, i64 %conv, i64 %call3)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call4 = call i64 @builtin_lisp_symbol(i32 899)
  %call5 = call i64 @builtin_lisp_symbol(i32 258)
  %call6 = call i64 @Fput(i64 %call4, i64 %call5, i64 2)
  %5 = load i64, i64* @Vsyntax_code_object, align 8
  %call7 = call i64 @AREF(i64 %5, i64 0)
  store i64 %call7, i64* %temp, align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 899)
  %6 = load i64, i64* %temp, align 8
  %call9 = call i64 @Fmake_char_table(i64 %call8, i64 %6)
  store i64 %call9, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 16), align 8
  %7 = load i64, i64* @Vsyntax_code_object, align 8
  %call10 = call i64 @AREF(i64 %7, i64 1)
  store i64 %call10, i64* %temp, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.11

for.cond.11:                                      ; preds = %for.inc.15, %for.end
  %8 = load i32, i32* %i, align 4
  %cmp12 = icmp sle i32 %8, 31
  br i1 %cmp12, label %for.body.14, label %for.end.17

for.body.14:                                      ; preds = %for.cond.11
  %9 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 16), align 8
  %10 = load i32, i32* %i, align 4
  %11 = load i64, i64* %temp, align 8
  call void @SET_RAW_SYNTAX_ENTRY(i64 %9, i32 %10, i64 %11)
  br label %for.inc.15

for.inc.15:                                       ; preds = %for.body.14
  %12 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %12, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond.11

for.end.17:                                       ; preds = %for.cond.11
  %13 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 16), align 8
  %14 = load i64, i64* %temp, align 8
  call void @SET_RAW_SYNTAX_ENTRY(i64 %13, i32 127, i64 %14)
  %15 = load i64, i64* @Vsyntax_code_object, align 8
  %call18 = call i64 @AREF(i64 %15, i64 0)
  store i64 %call18, i64* %temp, align 8
  %16 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 16), align 8
  %17 = load i64, i64* %temp, align 8
  call void @SET_RAW_SYNTAX_ENTRY(i64 %16, i32 32, i64 %17)
  %18 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 16), align 8
  %19 = load i64, i64* %temp, align 8
  call void @SET_RAW_SYNTAX_ENTRY(i64 %18, i32 9, i64 %19)
  %20 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 16), align 8
  %21 = load i64, i64* %temp, align 8
  call void @SET_RAW_SYNTAX_ENTRY(i64 %20, i32 10, i64 %21)
  %22 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 16), align 8
  %23 = load i64, i64* %temp, align 8
  call void @SET_RAW_SYNTAX_ENTRY(i64 %22, i32 13, i64 %23)
  %24 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 16), align 8
  %25 = load i64, i64* %temp, align 8
  call void @SET_RAW_SYNTAX_ENTRY(i64 %24, i32 12, i64 %25)
  %26 = load i64, i64* @Vsyntax_code_object, align 8
  %call19 = call i64 @AREF(i64 %26, i64 2)
  store i64 %call19, i64* %temp, align 8
  store i32 97, i32* %i, align 4
  br label %for.cond.20

for.cond.20:                                      ; preds = %for.inc.24, %for.end.17
  %27 = load i32, i32* %i, align 4
  %cmp21 = icmp sle i32 %27, 122
  br i1 %cmp21, label %for.body.23, label %for.end.26

for.body.23:                                      ; preds = %for.cond.20
  %28 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 16), align 8
  %29 = load i32, i32* %i, align 4
  %30 = load i64, i64* %temp, align 8
  call void @SET_RAW_SYNTAX_ENTRY(i64 %28, i32 %29, i64 %30)
  br label %for.inc.24

for.inc.24:                                       ; preds = %for.body.23
  %31 = load i32, i32* %i, align 4
  %inc25 = add nsw i32 %31, 1
  store i32 %inc25, i32* %i, align 4
  br label %for.cond.20

for.end.26:                                       ; preds = %for.cond.20
  store i32 65, i32* %i, align 4
  br label %for.cond.27

for.cond.27:                                      ; preds = %for.inc.31, %for.end.26
  %32 = load i32, i32* %i, align 4
  %cmp28 = icmp sle i32 %32, 90
  br i1 %cmp28, label %for.body.30, label %for.end.33

for.body.30:                                      ; preds = %for.cond.27
  %33 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 16), align 8
  %34 = load i32, i32* %i, align 4
  %35 = load i64, i64* %temp, align 8
  call void @SET_RAW_SYNTAX_ENTRY(i64 %33, i32 %34, i64 %35)
  br label %for.inc.31

for.inc.31:                                       ; preds = %for.body.30
  %36 = load i32, i32* %i, align 4
  %inc32 = add nsw i32 %36, 1
  store i32 %inc32, i32* %i, align 4
  br label %for.cond.27

for.end.33:                                       ; preds = %for.cond.27
  store i32 48, i32* %i, align 4
  br label %for.cond.34

for.cond.34:                                      ; preds = %for.inc.38, %for.end.33
  %37 = load i32, i32* %i, align 4
  %cmp35 = icmp sle i32 %37, 57
  br i1 %cmp35, label %for.body.37, label %for.end.40

for.body.37:                                      ; preds = %for.cond.34
  %38 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 16), align 8
  %39 = load i32, i32* %i, align 4
  %40 = load i64, i64* %temp, align 8
  call void @SET_RAW_SYNTAX_ENTRY(i64 %38, i32 %39, i64 %40)
  br label %for.inc.38

for.inc.38:                                       ; preds = %for.body.37
  %41 = load i32, i32* %i, align 4
  %inc39 = add nsw i32 %41, 1
  store i32 %inc39, i32* %i, align 4
  br label %for.cond.34

for.end.40:                                       ; preds = %for.cond.34
  %42 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 16), align 8
  %43 = load i64, i64* %temp, align 8
  call void @SET_RAW_SYNTAX_ENTRY(i64 %42, i32 36, i64 %43)
  %44 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 16), align 8
  %45 = load i64, i64* %temp, align 8
  call void @SET_RAW_SYNTAX_ENTRY(i64 %44, i32 37, i64 %45)
  %46 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 16), align 8
  %call41 = call i64 @Fcons(i64 18, i64 166)
  call void @SET_RAW_SYNTAX_ENTRY(i64 %46, i32 40, i64 %call41)
  %47 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 16), align 8
  %call42 = call i64 @Fcons(i64 22, i64 162)
  call void @SET_RAW_SYNTAX_ENTRY(i64 %47, i32 41, i64 %call42)
  %48 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 16), align 8
  %call43 = call i64 @Fcons(i64 18, i64 374)
  call void @SET_RAW_SYNTAX_ENTRY(i64 %48, i32 91, i64 %call43)
  %49 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 16), align 8
  %call44 = call i64 @Fcons(i64 22, i64 366)
  call void @SET_RAW_SYNTAX_ENTRY(i64 %49, i32 93, i64 %call44)
  %50 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 16), align 8
  %call45 = call i64 @Fcons(i64 18, i64 502)
  call void @SET_RAW_SYNTAX_ENTRY(i64 %50, i32 123, i64 %call45)
  %51 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 16), align 8
  %call46 = call i64 @Fcons(i64 22, i64 494)
  call void @SET_RAW_SYNTAX_ENTRY(i64 %51, i32 125, i64 %call46)
  %52 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 16), align 8
  %call47 = call i64 @builtin_lisp_symbol(i32 0)
  %call48 = call i64 @Fcons(i64 30, i64 %call47)
  call void @SET_RAW_SYNTAX_ENTRY(i64 %52, i32 34, i64 %call48)
  %53 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 16), align 8
  %call49 = call i64 @builtin_lisp_symbol(i32 0)
  %call50 = call i64 @Fcons(i64 38, i64 %call49)
  call void @SET_RAW_SYNTAX_ENTRY(i64 %53, i32 92, i64 %call50)
  %54 = load i64, i64* @Vsyntax_code_object, align 8
  %call51 = call i64 @AREF(i64 %54, i64 3)
  store i64 %call51, i64* %temp, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.52

for.cond.52:                                      ; preds = %for.inc.57, %for.end.40
  %55 = load i32, i32* %i, align 4
  %cmp53 = icmp slt i32 %55, 10
  br i1 %cmp53, label %for.body.55, label %for.end.59

for.body.55:                                      ; preds = %for.cond.52
  %56 = load i32, i32* %i, align 4
  %idxprom = sext i32 %56 to i64
  %arrayidx = getelementptr inbounds [11 x i8], [11 x i8]* @.str.42, i32 0, i64 %idxprom
  %57 = load i8, i8* %arrayidx, align 1
  %conv56 = sext i8 %57 to i32
  store i32 %conv56, i32* %c, align 4
  %58 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 16), align 8
  %59 = load i32, i32* %c, align 4
  %60 = load i64, i64* %temp, align 8
  call void @SET_RAW_SYNTAX_ENTRY(i64 %58, i32 %59, i64 %60)
  br label %for.inc.57

for.inc.57:                                       ; preds = %for.body.55
  %61 = load i32, i32* %i, align 4
  %inc58 = add nsw i32 %61, 1
  store i32 %inc58, i32* %i, align 4
  br label %for.cond.52

for.end.59:                                       ; preds = %for.cond.52
  %62 = load i64, i64* @Vsyntax_code_object, align 8
  %call60 = call i64 @AREF(i64 %62, i64 1)
  store i64 %call60, i64* %temp, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.61

for.cond.61:                                      ; preds = %for.inc.68, %for.end.59
  %63 = load i32, i32* %i, align 4
  %cmp62 = icmp slt i32 %63, 12
  br i1 %cmp62, label %for.body.64, label %for.end.70

for.body.64:                                      ; preds = %for.cond.61
  %64 = load i32, i32* %i, align 4
  %idxprom65 = sext i32 %64 to i64
  %arrayidx66 = getelementptr inbounds [13 x i8], [13 x i8]* @.str.43, i32 0, i64 %idxprom65
  %65 = load i8, i8* %arrayidx66, align 1
  %conv67 = sext i8 %65 to i32
  store i32 %conv67, i32* %c, align 4
  %66 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 16), align 8
  %67 = load i32, i32* %c, align 4
  %68 = load i64, i64* %temp, align 8
  call void @SET_RAW_SYNTAX_ENTRY(i64 %66, i32 %67, i64 %68)
  br label %for.inc.68

for.inc.68:                                       ; preds = %for.body.64
  %69 = load i32, i32* %i, align 4
  %inc69 = add nsw i32 %69, 1
  store i32 %inc69, i32* %i, align 4
  br label %for.cond.61

for.end.70:                                       ; preds = %for.cond.61
  %70 = load i64, i64* @Vsyntax_code_object, align 8
  %call71 = call i64 @AREF(i64 %70, i64 2)
  store i64 %call71, i64* %temp, align 8
  %71 = load i64, i64* getelementptr inbounds (%struct.buffer, %struct.buffer* @buffer_defaults, i32 0, i32 16), align 8
  %72 = load i64, i64* %temp, align 8
  call void @char_table_set_range(i64 %71, i32 128, i32 4194303, i64 %72)
  ret void
}

declare i64 @make_uninit_vector(i64) #1

declare void @ASET(i64, i64, i64) #1

declare i64 @Fput(i64, i64, i64) #1

declare i64 @Fmake_char_table(i64, i64) #1

declare void @char_table_set_range(i64, i32, i32, i64) #1

; Function Attrs: nounwind uwtable
define void @syms_of_syntax() #0 {
entry:
  call void @staticpro(i64* @Vsyntax_code_object)
  call void @staticpro(i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 0))
  call void @staticpro(i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 4))
  call void @staticpro(i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 5))
  call void @staticpro(i64* getelementptr inbounds (%struct.gl_state_s, %struct.gl_state_s* @gl_state, i32 0, i32 6))
  call void @staticpro(i64* @re_match_object)
  %call = call i64 @builtin_lisp_symbol(i32 828)
  %call1 = call i64 @builtin_lisp_symbol(i32 373)
  %call2 = call i64 @builtin_lisp_symbol(i32 828)
  %call3 = call i64 @builtin_lisp_symbol(i32 372)
  %call4 = call i64 (i32, i64, i64, ...) @listn(i32 1, i64 2, i64 %call2, i64 %call3)
  %call5 = call i64 @Fput(i64 %call, i64 %call1, i64 %call4)
  %call6 = call i64 @builtin_lisp_symbol(i32 828)
  %call7 = call i64 @builtin_lisp_symbol(i32 374)
  %call8 = call i64 @build_pure_c_string(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.44, i32 0, i32 0))
  %call9 = call i64 @Fput(i64 %call6, i64 %call7, i64 %call8)
  br label %do.body

do.body:                                          ; preds = %entry
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_syntax.b_fwd, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 479))
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body.10

do.body.10:                                       ; preds = %do.end
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_syntax.b_fwd.46, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 480))
  br label %do.end.11

do.end.11:                                        ; preds = %do.body.10
  br label %do.body.12

do.body.12:                                       ; preds = %do.end.11
  call void @defvar_int(%struct.Lisp_Intfwd* @syms_of_syntax.i_fwd, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.48, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 412))
  br label %do.end.13

do.end.13:                                        ; preds = %do.body.12
  store i64 -1, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 412), align 8
  %call14 = call i64 @intern(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.48, i32 0, i32 0))
  %call15 = call i64 @Fmake_variable_buffer_local(i64 %call14)
  store i8 0, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 499), align 1
  br label %do.body.16

do.body.16:                                       ; preds = %do.end.13
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_syntax.b_fwd.49, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 499))
  br label %do.end.17

do.end.17:                                        ; preds = %do.body.16
  br label %do.body.18

do.body.18:                                       ; preds = %do.end.17
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_syntax.b_fwd.51, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.52, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 474))
  br label %do.end.19

do.end.19:                                        ; preds = %do.body.18
  store i8 0, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 474), align 1
  br label %do.body.20

do.body.20:                                       ; preds = %do.end.19
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_syntax.b_fwd.53, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.54, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 478))
  br label %do.end.21

do.end.21:                                        ; preds = %do.body.20
  store i8 1, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 478), align 1
  br label %do.body.22

do.body.22:                                       ; preds = %do.end.21
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_syntax.o_fwd, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.55, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 96))
  br label %do.end.23

do.end.23:                                        ; preds = %do.body.22
  %call24 = call i64 @builtin_lisp_symbol(i32 0)
  %call25 = call i64 @builtin_lisp_symbol(i32 0)
  %call26 = call i64 @Fmake_char_table(i64 %call24, i64 %call25)
  store i64 %call26, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 96), align 8
  br label %do.body.27

do.body.27:                                       ; preds = %do.end.23
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_syntax.b_fwd.56, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.57, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 420))
  br label %do.end.28

do.end.28:                                        ; preds = %do.body.27
  store i8 0, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 420), align 1
  %call29 = call i64 @builtin_lisp_symbol(i32 287)
  %call30 = call i64 @Fmake_variable_buffer_local(i64 %call29)
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Ssyntax_table_p to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* @Ssyntax_table)
  call void @defsubr(%struct.Lisp_Subr* @Sstandard_syntax_table)
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Scopy_syntax_table to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_syntax_table to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Schar_syntax to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Smatching_paren to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sstring_to_syntax to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Smodify_syntax_entry to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sinternal_describe_syntax_value to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sforward_word to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sskip_chars_forward to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sskip_chars_backward to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sskip_syntax_forward to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sskip_syntax_backward to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sforward_comment to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sscan_lists to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sscan_sexps to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* @Sbackward_prefix_chars)
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sparse_partial_sexp to %struct.Lisp_Subr*))
  ret void
}

declare void @staticpro(i64*) #1

declare i64 @listn(i32, i64, i64, ...) #1

declare i64 @build_pure_c_string(i8*) #1

declare void @defvar_bool(%struct.Lisp_Boolfwd*, i8*, i8*) #1

declare void @defvar_int(%struct.Lisp_Intfwd*, i8*, i64*) #1

declare i64 @Fmake_variable_buffer_local(i64) #1

declare i64 @intern(i8*) #1

declare void @defvar_lisp(%struct.Lisp_Objfwd*, i8*, i64*) #1

declare void @defsubr(%struct.Lisp_Subr*) #1

declare i64 @safe_call1(i64, i64) #1

declare i64 @syntax_property_entry(i32, i1 zeroext) #1

declare i64 @Fset_char_table_range(i64, i64, i64) #1

declare void @CHAR_TABLE_SET(i64, i32, i64) #1

declare i64 @SPECPDL_INDEX() #1

declare i32 @XMISCTYPE(i64) #1

declare i64 @SBYTES(i64) #1

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #3

declare zeroext i8 @SREF(i64, i64) #1

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #3

declare i32 @re_wctype(i8*) #1

declare noalias i8* @xnmalloc(i64, i64) #1

declare void @record_unwind_protect_ptr(void (i8*)*, i8*) #1

declare void @xfree(i8*) #1

; Function Attrs: nounwind readonly
declare i8* @memchr(i8*, i32, i64) #4

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #4

; Function Attrs: nounwind uwtable
define internal zeroext i1 @in_classes(i32 %c, i64 %iso_classes) #0 {
entry:
  %c.addr = alloca i32, align 4
  %iso_classes.addr = alloca i64, align 8
  %fits_class = alloca i8, align 1
  %elt = alloca i64, align 8
  store i32 %c, i32* %c.addr, align 4
  store i64 %iso_classes, i64* %iso_classes.addr, align 8
  store i8 0, i8* %fits_class, align 1
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i64, i64* %iso_classes.addr, align 8
  %and = and i64 %0, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i64, i64* %iso_classes.addr, align 8
  %sub = sub nsw i64 %1, 3
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %3, i32 0, i32 0
  %4 = load i64, i64* %car, align 8
  store i64 %4, i64* %elt, align 8
  %5 = load i64, i64* %iso_classes.addr, align 8
  %sub2 = sub nsw i64 %5, 3
  %6 = inttoptr i64 %sub2 to i8*
  %7 = bitcast i8* %6 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %7, i32 0, i32 1
  %cdr = bitcast %union.anon.0* %u to i64*
  %8 = load i64, i64* %cdr, align 8
  store i64 %8, i64* %iso_classes.addr, align 8
  %9 = load i32, i32* %c.addr, align 4
  %10 = load i64, i64* %elt, align 8
  %shr = ashr i64 %10, 2
  %conv3 = trunc i64 %shr to i32
  %call = call signext i8 @re_iswctype(i32 %9, i32 %conv3)
  %tobool = icmp ne i8 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  store i8 1, i8* %fits_class, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %11 = load i8, i8* %fits_class, align 1
  %tobool4 = trunc i8 %11 to i1
  ret i1 %tobool4
}

declare i64 @unbind_to(i64, i64) #1

declare signext i8 @re_iswctype(i32, i32) #1

declare i64 @string_make_unibyte(i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @SYNTAX_FLAGS_COMMENT_STYLEC2(i32 %flags) #0 {
entry:
  %flags.addr = alloca i32, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %flags.addr, align 4
  %shr = ashr i32 %0, 22
  %and = and i32 %shr, 2
  ret i32 %and
}

declare void @UPDATE_SYNTAX_TABLE(i64) #1

; Function Attrs: nounwind uwtable
define internal zeroext i1 @SYNTAX_COMEND_FIRST(i32 %c) #0 {
entry:
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  %call = call i32 @syntax_property_with_flags(i32 %0, i1 zeroext true)
  %call1 = call zeroext i1 @SYNTAX_FLAGS_COMEND_FIRST(i32 %call)
  ret i1 %call1
}

; Function Attrs: nounwind uwtable
define internal i64 @find_defun_start(i64 %pos, i64 %pos_byte) #0 {
entry:
  %retval = alloca i64, align 8
  %pos.addr = alloca i64, align 8
  %pos_byte.addr = alloca i64, align 8
  %opoint = alloca i64, align 8
  %opoint_byte = alloca i64, align 8
  %c = alloca i32, align 4
  store i64 %pos, i64* %pos.addr, align 8
  store i64 %pos_byte, i64* %pos_byte.addr, align 8
  %0 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i32 0, i32 75
  %1 = load i64, i64* %pt, align 8
  %add = add nsw i64 %1, 0
  store i64 %add, i64* %opoint, align 8
  %2 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %2, i32 0, i32 76
  %3 = load i64, i64* %pt_byte, align 8
  %add1 = add nsw i64 %3, 0
  store i64 %add1, i64* %opoint_byte, align 8
  %4 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %5 = load %struct.buffer*, %struct.buffer** @find_start_buffer, align 8
  %cmp = icmp eq %struct.buffer* %4, %5
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %6 = load i64, i64* %pos.addr, align 8
  %7 = load i64, i64* @find_start_pos, align 8
  %add2 = add nsw i64 %7, 1000
  %cmp3 = icmp sle i64 %6, %add2
  br i1 %cmp3, label %land.lhs.true.4, label %if.end

land.lhs.true.4:                                  ; preds = %land.lhs.true
  %8 = load i64, i64* %pos.addr, align 8
  %9 = load i64, i64* @find_start_value, align 8
  %cmp5 = icmp sge i64 %8, %9
  br i1 %cmp5, label %land.lhs.true.6, label %if.end

land.lhs.true.6:                                  ; preds = %land.lhs.true.4
  %10 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %10, i32 0, i32 77
  %11 = load i64, i64* %begv, align 8
  %12 = load i64, i64* @find_start_begv, align 8
  %cmp7 = icmp eq i64 %11, %12
  br i1 %cmp7, label %land.lhs.true.8, label %if.end

land.lhs.true.8:                                  ; preds = %land.lhs.true.6
  %13 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %13, i32 0, i32 73
  %14 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %modiff = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %14, i32 0, i32 6
  %15 = load i64, i64* %modiff, align 8
  %16 = load i64, i64* @find_start_modiff, align 8
  %cmp9 = icmp eq i64 %15, %16
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.8
  %17 = load i64, i64* @find_start_value, align 8
  store i64 %17, i64* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.8, %land.lhs.true.6, %land.lhs.true.4, %land.lhs.true, %entry
  %18 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 478), align 1
  %tobool = trunc i8 %18 to i1
  br i1 %tobool, label %if.end.12, label %if.then.10

if.then.10:                                       ; preds = %if.end
  %19 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv11 = getelementptr inbounds %struct.buffer, %struct.buffer* %19, i32 0, i32 77
  %20 = load i64, i64* %begv11, align 8
  store i64 %20, i64* @find_start_value, align 8
  %21 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %21, i32 0, i32 78
  %22 = load i64, i64* %begv_byte, align 8
  store i64 %22, i64* @find_start_value_byte, align 8
  br label %found

if.end.12:                                        ; preds = %if.end
  %23 = load i64, i64* %pos.addr, align 8
  %24 = load i64, i64* %pos_byte.addr, align 8
  %25 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv13 = getelementptr inbounds %struct.buffer, %struct.buffer* %25, i32 0, i32 77
  %26 = load i64, i64* %begv13, align 8
  %27 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv_byte14 = getelementptr inbounds %struct.buffer, %struct.buffer* %27, i32 0, i32 78
  %28 = load i64, i64* %begv_byte14, align 8
  %call = call i64 @scan_newline(i64 %23, i64 %24, i64 %26, i64 %28, i64 -1, i1 zeroext true)
  call void @SETUP_BUFFER_SYNTAX_TABLE()
  br label %while.cond

while.cond:                                       ; preds = %if.end.227, %if.end.12
  %29 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt15 = getelementptr inbounds %struct.buffer, %struct.buffer* %29, i32 0, i32 75
  %30 = load i64, i64* %pt15, align 8
  %add16 = add nsw i64 %30, 0
  %31 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv17 = getelementptr inbounds %struct.buffer, %struct.buffer* %31, i32 0, i32 77
  %32 = load i64, i64* %begv17, align 8
  %cmp18 = icmp sgt i64 %add16, %32
  br i1 %cmp18, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %33 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %33, i32 0, i32 39
  %34 = load i64, i64* %enable_multibyte_characters_, align 8
  %call19 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp20 = icmp eq i64 %34, %call19
  br i1 %cmp20, label %cond.false, label %cond.true

cond.true:                                        ; preds = %while.body
  %35 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte21 = getelementptr inbounds %struct.buffer, %struct.buffer* %35, i32 0, i32 76
  %36 = load i64, i64* %pt_byte21, align 8
  %add22 = add nsw i64 %36, 0
  %call23 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %add22)
  br label %cond.end.109

cond.false:                                       ; preds = %while.body
  br i1 true, label %cond.true.24, label %cond.false.40

cond.true.24:                                     ; preds = %cond.false
  %37 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte25 = getelementptr inbounds %struct.buffer, %struct.buffer* %37, i32 0, i32 76
  %38 = load i64, i64* %pt_byte25, align 8
  %add26 = add nsw i64 %38, 0
  %39 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text27 = getelementptr inbounds %struct.buffer, %struct.buffer* %39, i32 0, i32 73
  %40 = load %struct.buffer_text*, %struct.buffer_text** %text27, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %40, i32 0, i32 3
  %41 = load i64, i64* %gpt_byte, align 8
  %cmp28 = icmp sge i64 %add26, %41
  br i1 %cmp28, label %cond.true.29, label %cond.false.31

cond.true.29:                                     ; preds = %cond.true.24
  %42 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text30 = getelementptr inbounds %struct.buffer, %struct.buffer* %42, i32 0, i32 73
  %43 = load %struct.buffer_text*, %struct.buffer_text** %text30, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %43, i32 0, i32 5
  %44 = load i64, i64* %gap_size, align 8
  br label %cond.end

cond.false.31:                                    ; preds = %cond.true.24
  br label %cond.end

cond.end:                                         ; preds = %cond.false.31, %cond.true.29
  %cond = phi i64 [ %44, %cond.true.29 ], [ 0, %cond.false.31 ]
  %45 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte32 = getelementptr inbounds %struct.buffer, %struct.buffer* %45, i32 0, i32 76
  %46 = load i64, i64* %pt_byte32, align 8
  %add33 = add nsw i64 %46, 0
  %add34 = add nsw i64 %cond, %add33
  %47 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text35 = getelementptr inbounds %struct.buffer, %struct.buffer* %47, i32 0, i32 73
  %48 = load %struct.buffer_text*, %struct.buffer_text** %text35, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %48, i32 0, i32 0
  %49 = load i8*, i8** %beg, align 8
  %add.ptr = getelementptr inbounds i8, i8* %49, i64 %add34
  %add.ptr36 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  %50 = load i8, i8* %add.ptr36, align 1
  %conv = zext i8 %50 to i32
  %add37 = add i32 %conv, 0
  %cmp38 = icmp ult i32 %add37, 128
  br i1 %cmp38, label %cond.true.64, label %cond.false.85

cond.false.40:                                    ; preds = %cond.false
  %51 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte41 = getelementptr inbounds %struct.buffer, %struct.buffer* %51, i32 0, i32 76
  %52 = load i64, i64* %pt_byte41, align 8
  %add42 = add nsw i64 %52, 0
  %53 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text43 = getelementptr inbounds %struct.buffer, %struct.buffer* %53, i32 0, i32 73
  %54 = load %struct.buffer_text*, %struct.buffer_text** %text43, align 8
  %gpt_byte44 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %54, i32 0, i32 3
  %55 = load i64, i64* %gpt_byte44, align 8
  %cmp45 = icmp sge i64 %add42, %55
  br i1 %cmp45, label %cond.true.47, label %cond.false.50

cond.true.47:                                     ; preds = %cond.false.40
  %56 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text48 = getelementptr inbounds %struct.buffer, %struct.buffer* %56, i32 0, i32 73
  %57 = load %struct.buffer_text*, %struct.buffer_text** %text48, align 8
  %gap_size49 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %57, i32 0, i32 5
  %58 = load i64, i64* %gap_size49, align 8
  br label %cond.end.51

cond.false.50:                                    ; preds = %cond.false.40
  br label %cond.end.51

cond.end.51:                                      ; preds = %cond.false.50, %cond.true.47
  %cond52 = phi i64 [ %58, %cond.true.47 ], [ 0, %cond.false.50 ]
  %59 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte53 = getelementptr inbounds %struct.buffer, %struct.buffer* %59, i32 0, i32 76
  %60 = load i64, i64* %pt_byte53, align 8
  %add54 = add nsw i64 %60, 0
  %add55 = add nsw i64 %cond52, %add54
  %61 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text56 = getelementptr inbounds %struct.buffer, %struct.buffer* %61, i32 0, i32 73
  %62 = load %struct.buffer_text*, %struct.buffer_text** %text56, align 8
  %beg57 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %62, i32 0, i32 0
  %63 = load i8*, i8** %beg57, align 8
  %add.ptr58 = getelementptr inbounds i8, i8* %63, i64 %add55
  %add.ptr59 = getelementptr inbounds i8, i8* %add.ptr58, i64 -1
  %64 = load i8, i8* %add.ptr59, align 1
  %conv60 = zext i8 %64 to i64
  %add61 = add i64 %conv60, 0
  %cmp62 = icmp ult i64 %add61, 128
  br i1 %cmp62, label %cond.true.64, label %cond.false.85

cond.true.64:                                     ; preds = %cond.end.51, %cond.end
  %65 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte65 = getelementptr inbounds %struct.buffer, %struct.buffer* %65, i32 0, i32 76
  %66 = load i64, i64* %pt_byte65, align 8
  %add66 = add nsw i64 %66, 0
  %67 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text67 = getelementptr inbounds %struct.buffer, %struct.buffer* %67, i32 0, i32 73
  %68 = load %struct.buffer_text*, %struct.buffer_text** %text67, align 8
  %gpt_byte68 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %68, i32 0, i32 3
  %69 = load i64, i64* %gpt_byte68, align 8
  %cmp69 = icmp sge i64 %add66, %69
  br i1 %cmp69, label %cond.true.71, label %cond.false.74

cond.true.71:                                     ; preds = %cond.true.64
  %70 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text72 = getelementptr inbounds %struct.buffer, %struct.buffer* %70, i32 0, i32 73
  %71 = load %struct.buffer_text*, %struct.buffer_text** %text72, align 8
  %gap_size73 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %71, i32 0, i32 5
  %72 = load i64, i64* %gap_size73, align 8
  br label %cond.end.75

cond.false.74:                                    ; preds = %cond.true.64
  br label %cond.end.75

cond.end.75:                                      ; preds = %cond.false.74, %cond.true.71
  %cond76 = phi i64 [ %72, %cond.true.71 ], [ 0, %cond.false.74 ]
  %73 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte77 = getelementptr inbounds %struct.buffer, %struct.buffer* %73, i32 0, i32 76
  %74 = load i64, i64* %pt_byte77, align 8
  %add78 = add nsw i64 %74, 0
  %add79 = add nsw i64 %cond76, %add78
  %75 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text80 = getelementptr inbounds %struct.buffer, %struct.buffer* %75, i32 0, i32 73
  %76 = load %struct.buffer_text*, %struct.buffer_text** %text80, align 8
  %beg81 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %76, i32 0, i32 0
  %77 = load i8*, i8** %beg81, align 8
  %add.ptr82 = getelementptr inbounds i8, i8* %77, i64 %add79
  %add.ptr83 = getelementptr inbounds i8, i8* %add.ptr82, i64 -1
  %78 = load i8, i8* %add.ptr83, align 1
  %conv84 = zext i8 %78 to i32
  br label %cond.end.107

cond.false.85:                                    ; preds = %cond.end.51, %cond.end
  %79 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte86 = getelementptr inbounds %struct.buffer, %struct.buffer* %79, i32 0, i32 76
  %80 = load i64, i64* %pt_byte86, align 8
  %add87 = add nsw i64 %80, 0
  %81 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text88 = getelementptr inbounds %struct.buffer, %struct.buffer* %81, i32 0, i32 73
  %82 = load %struct.buffer_text*, %struct.buffer_text** %text88, align 8
  %gpt_byte89 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %82, i32 0, i32 3
  %83 = load i64, i64* %gpt_byte89, align 8
  %cmp90 = icmp sge i64 %add87, %83
  br i1 %cmp90, label %cond.true.92, label %cond.false.95

cond.true.92:                                     ; preds = %cond.false.85
  %84 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text93 = getelementptr inbounds %struct.buffer, %struct.buffer* %84, i32 0, i32 73
  %85 = load %struct.buffer_text*, %struct.buffer_text** %text93, align 8
  %gap_size94 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %85, i32 0, i32 5
  %86 = load i64, i64* %gap_size94, align 8
  br label %cond.end.96

cond.false.95:                                    ; preds = %cond.false.85
  br label %cond.end.96

cond.end.96:                                      ; preds = %cond.false.95, %cond.true.92
  %cond97 = phi i64 [ %86, %cond.true.92 ], [ 0, %cond.false.95 ]
  %87 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte98 = getelementptr inbounds %struct.buffer, %struct.buffer* %87, i32 0, i32 76
  %88 = load i64, i64* %pt_byte98, align 8
  %add99 = add nsw i64 %88, 0
  %add100 = add nsw i64 %cond97, %add99
  %89 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text101 = getelementptr inbounds %struct.buffer, %struct.buffer* %89, i32 0, i32 73
  %90 = load %struct.buffer_text*, %struct.buffer_text** %text101, align 8
  %beg102 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %90, i32 0, i32 0
  %91 = load i8*, i8** %beg102, align 8
  %add.ptr103 = getelementptr inbounds i8, i8* %91, i64 %add100
  %add.ptr104 = getelementptr inbounds i8, i8* %add.ptr103, i64 -1
  %92 = load i8, i8* %add.ptr104, align 1
  %conv105 = zext i8 %92 to i32
  %add106 = add nsw i32 %conv105, 4194048
  br label %cond.end.107

cond.end.107:                                     ; preds = %cond.end.96, %cond.end.75
  %cond108 = phi i32 [ %conv84, %cond.end.75 ], [ %add106, %cond.end.96 ]
  br label %cond.end.109

cond.end.109:                                     ; preds = %cond.end.107, %cond.true
  %cond110 = phi i32 [ %call23, %cond.true ], [ %cond108, %cond.end.107 ]
  store i32 %cond110, i32* %c, align 4
  %93 = load i32, i32* %c, align 4
  %call111 = call i32 @syntax_property(i32 %93, i1 zeroext true)
  %cmp112 = icmp eq i32 %call111, 4
  br i1 %cmp112, label %if.then.114, label %if.end.227

if.then.114:                                      ; preds = %cond.end.109
  %94 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt115 = getelementptr inbounds %struct.buffer, %struct.buffer* %94, i32 0, i32 75
  %95 = load i64, i64* %pt115, align 8
  %add116 = add nsw i64 %95, 0
  %add117 = add nsw i64 %add116, 1
  call void @SETUP_SYNTAX_TABLE(i64 %add117, i64 -1)
  %96 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_118 = getelementptr inbounds %struct.buffer, %struct.buffer* %96, i32 0, i32 39
  %97 = load i64, i64* %enable_multibyte_characters_118, align 8
  %call119 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp120 = icmp eq i64 %97, %call119
  br i1 %cmp120, label %cond.false.126, label %cond.true.122

cond.true.122:                                    ; preds = %if.then.114
  %98 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte123 = getelementptr inbounds %struct.buffer, %struct.buffer* %98, i32 0, i32 76
  %99 = load i64, i64* %pt_byte123, align 8
  %add124 = add nsw i64 %99, 0
  %call125 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %add124)
  br label %cond.end.220

cond.false.126:                                   ; preds = %if.then.114
  br i1 true, label %cond.true.127, label %cond.false.151

cond.true.127:                                    ; preds = %cond.false.126
  %100 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte128 = getelementptr inbounds %struct.buffer, %struct.buffer* %100, i32 0, i32 76
  %101 = load i64, i64* %pt_byte128, align 8
  %add129 = add nsw i64 %101, 0
  %102 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text130 = getelementptr inbounds %struct.buffer, %struct.buffer* %102, i32 0, i32 73
  %103 = load %struct.buffer_text*, %struct.buffer_text** %text130, align 8
  %gpt_byte131 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %103, i32 0, i32 3
  %104 = load i64, i64* %gpt_byte131, align 8
  %cmp132 = icmp sge i64 %add129, %104
  br i1 %cmp132, label %cond.true.134, label %cond.false.137

cond.true.134:                                    ; preds = %cond.true.127
  %105 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text135 = getelementptr inbounds %struct.buffer, %struct.buffer* %105, i32 0, i32 73
  %106 = load %struct.buffer_text*, %struct.buffer_text** %text135, align 8
  %gap_size136 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %106, i32 0, i32 5
  %107 = load i64, i64* %gap_size136, align 8
  br label %cond.end.138

cond.false.137:                                   ; preds = %cond.true.127
  br label %cond.end.138

cond.end.138:                                     ; preds = %cond.false.137, %cond.true.134
  %cond139 = phi i64 [ %107, %cond.true.134 ], [ 0, %cond.false.137 ]
  %108 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte140 = getelementptr inbounds %struct.buffer, %struct.buffer* %108, i32 0, i32 76
  %109 = load i64, i64* %pt_byte140, align 8
  %add141 = add nsw i64 %109, 0
  %add142 = add nsw i64 %cond139, %add141
  %110 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text143 = getelementptr inbounds %struct.buffer, %struct.buffer* %110, i32 0, i32 73
  %111 = load %struct.buffer_text*, %struct.buffer_text** %text143, align 8
  %beg144 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %111, i32 0, i32 0
  %112 = load i8*, i8** %beg144, align 8
  %add.ptr145 = getelementptr inbounds i8, i8* %112, i64 %add142
  %add.ptr146 = getelementptr inbounds i8, i8* %add.ptr145, i64 -1
  %113 = load i8, i8* %add.ptr146, align 1
  %conv147 = zext i8 %113 to i32
  %add148 = add i32 %conv147, 0
  %cmp149 = icmp ult i32 %add148, 128
  br i1 %cmp149, label %cond.true.175, label %cond.false.196

cond.false.151:                                   ; preds = %cond.false.126
  %114 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte152 = getelementptr inbounds %struct.buffer, %struct.buffer* %114, i32 0, i32 76
  %115 = load i64, i64* %pt_byte152, align 8
  %add153 = add nsw i64 %115, 0
  %116 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text154 = getelementptr inbounds %struct.buffer, %struct.buffer* %116, i32 0, i32 73
  %117 = load %struct.buffer_text*, %struct.buffer_text** %text154, align 8
  %gpt_byte155 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %117, i32 0, i32 3
  %118 = load i64, i64* %gpt_byte155, align 8
  %cmp156 = icmp sge i64 %add153, %118
  br i1 %cmp156, label %cond.true.158, label %cond.false.161

cond.true.158:                                    ; preds = %cond.false.151
  %119 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text159 = getelementptr inbounds %struct.buffer, %struct.buffer* %119, i32 0, i32 73
  %120 = load %struct.buffer_text*, %struct.buffer_text** %text159, align 8
  %gap_size160 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %120, i32 0, i32 5
  %121 = load i64, i64* %gap_size160, align 8
  br label %cond.end.162

cond.false.161:                                   ; preds = %cond.false.151
  br label %cond.end.162

cond.end.162:                                     ; preds = %cond.false.161, %cond.true.158
  %cond163 = phi i64 [ %121, %cond.true.158 ], [ 0, %cond.false.161 ]
  %122 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte164 = getelementptr inbounds %struct.buffer, %struct.buffer* %122, i32 0, i32 76
  %123 = load i64, i64* %pt_byte164, align 8
  %add165 = add nsw i64 %123, 0
  %add166 = add nsw i64 %cond163, %add165
  %124 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text167 = getelementptr inbounds %struct.buffer, %struct.buffer* %124, i32 0, i32 73
  %125 = load %struct.buffer_text*, %struct.buffer_text** %text167, align 8
  %beg168 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %125, i32 0, i32 0
  %126 = load i8*, i8** %beg168, align 8
  %add.ptr169 = getelementptr inbounds i8, i8* %126, i64 %add166
  %add.ptr170 = getelementptr inbounds i8, i8* %add.ptr169, i64 -1
  %127 = load i8, i8* %add.ptr170, align 1
  %conv171 = zext i8 %127 to i64
  %add172 = add i64 %conv171, 0
  %cmp173 = icmp ult i64 %add172, 128
  br i1 %cmp173, label %cond.true.175, label %cond.false.196

cond.true.175:                                    ; preds = %cond.end.162, %cond.end.138
  %128 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte176 = getelementptr inbounds %struct.buffer, %struct.buffer* %128, i32 0, i32 76
  %129 = load i64, i64* %pt_byte176, align 8
  %add177 = add nsw i64 %129, 0
  %130 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text178 = getelementptr inbounds %struct.buffer, %struct.buffer* %130, i32 0, i32 73
  %131 = load %struct.buffer_text*, %struct.buffer_text** %text178, align 8
  %gpt_byte179 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %131, i32 0, i32 3
  %132 = load i64, i64* %gpt_byte179, align 8
  %cmp180 = icmp sge i64 %add177, %132
  br i1 %cmp180, label %cond.true.182, label %cond.false.185

cond.true.182:                                    ; preds = %cond.true.175
  %133 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text183 = getelementptr inbounds %struct.buffer, %struct.buffer* %133, i32 0, i32 73
  %134 = load %struct.buffer_text*, %struct.buffer_text** %text183, align 8
  %gap_size184 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %134, i32 0, i32 5
  %135 = load i64, i64* %gap_size184, align 8
  br label %cond.end.186

cond.false.185:                                   ; preds = %cond.true.175
  br label %cond.end.186

cond.end.186:                                     ; preds = %cond.false.185, %cond.true.182
  %cond187 = phi i64 [ %135, %cond.true.182 ], [ 0, %cond.false.185 ]
  %136 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte188 = getelementptr inbounds %struct.buffer, %struct.buffer* %136, i32 0, i32 76
  %137 = load i64, i64* %pt_byte188, align 8
  %add189 = add nsw i64 %137, 0
  %add190 = add nsw i64 %cond187, %add189
  %138 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text191 = getelementptr inbounds %struct.buffer, %struct.buffer* %138, i32 0, i32 73
  %139 = load %struct.buffer_text*, %struct.buffer_text** %text191, align 8
  %beg192 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %139, i32 0, i32 0
  %140 = load i8*, i8** %beg192, align 8
  %add.ptr193 = getelementptr inbounds i8, i8* %140, i64 %add190
  %add.ptr194 = getelementptr inbounds i8, i8* %add.ptr193, i64 -1
  %141 = load i8, i8* %add.ptr194, align 1
  %conv195 = zext i8 %141 to i32
  br label %cond.end.218

cond.false.196:                                   ; preds = %cond.end.162, %cond.end.138
  %142 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte197 = getelementptr inbounds %struct.buffer, %struct.buffer* %142, i32 0, i32 76
  %143 = load i64, i64* %pt_byte197, align 8
  %add198 = add nsw i64 %143, 0
  %144 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text199 = getelementptr inbounds %struct.buffer, %struct.buffer* %144, i32 0, i32 73
  %145 = load %struct.buffer_text*, %struct.buffer_text** %text199, align 8
  %gpt_byte200 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %145, i32 0, i32 3
  %146 = load i64, i64* %gpt_byte200, align 8
  %cmp201 = icmp sge i64 %add198, %146
  br i1 %cmp201, label %cond.true.203, label %cond.false.206

cond.true.203:                                    ; preds = %cond.false.196
  %147 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text204 = getelementptr inbounds %struct.buffer, %struct.buffer* %147, i32 0, i32 73
  %148 = load %struct.buffer_text*, %struct.buffer_text** %text204, align 8
  %gap_size205 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %148, i32 0, i32 5
  %149 = load i64, i64* %gap_size205, align 8
  br label %cond.end.207

cond.false.206:                                   ; preds = %cond.false.196
  br label %cond.end.207

cond.end.207:                                     ; preds = %cond.false.206, %cond.true.203
  %cond208 = phi i64 [ %149, %cond.true.203 ], [ 0, %cond.false.206 ]
  %150 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte209 = getelementptr inbounds %struct.buffer, %struct.buffer* %150, i32 0, i32 76
  %151 = load i64, i64* %pt_byte209, align 8
  %add210 = add nsw i64 %151, 0
  %add211 = add nsw i64 %cond208, %add210
  %152 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text212 = getelementptr inbounds %struct.buffer, %struct.buffer* %152, i32 0, i32 73
  %153 = load %struct.buffer_text*, %struct.buffer_text** %text212, align 8
  %beg213 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %153, i32 0, i32 0
  %154 = load i8*, i8** %beg213, align 8
  %add.ptr214 = getelementptr inbounds i8, i8* %154, i64 %add211
  %add.ptr215 = getelementptr inbounds i8, i8* %add.ptr214, i64 -1
  %155 = load i8, i8* %add.ptr215, align 1
  %conv216 = zext i8 %155 to i32
  %add217 = add nsw i32 %conv216, 4194048
  br label %cond.end.218

cond.end.218:                                     ; preds = %cond.end.207, %cond.end.186
  %cond219 = phi i32 [ %conv195, %cond.end.186 ], [ %add217, %cond.end.207 ]
  br label %cond.end.220

cond.end.220:                                     ; preds = %cond.end.218, %cond.true.122
  %cond221 = phi i32 [ %call125, %cond.true.122 ], [ %cond219, %cond.end.218 ]
  store i32 %cond221, i32* %c, align 4
  %156 = load i32, i32* %c, align 4
  %call222 = call i32 @syntax_property(i32 %156, i1 zeroext true)
  %cmp223 = icmp eq i32 %call222, 4
  br i1 %cmp223, label %if.then.225, label %if.end.226

if.then.225:                                      ; preds = %cond.end.220
  br label %while.end

if.end.226:                                       ; preds = %cond.end.220
  call void @SETUP_BUFFER_SYNTAX_TABLE()
  br label %if.end.227

if.end.227:                                       ; preds = %if.end.226, %cond.end.109
  %157 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt228 = getelementptr inbounds %struct.buffer, %struct.buffer* %157, i32 0, i32 75
  %158 = load i64, i64* %pt228, align 8
  %add229 = add nsw i64 %158, 0
  %159 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte230 = getelementptr inbounds %struct.buffer, %struct.buffer* %159, i32 0, i32 76
  %160 = load i64, i64* %pt_byte230, align 8
  %add231 = add nsw i64 %160, 0
  %161 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv232 = getelementptr inbounds %struct.buffer, %struct.buffer* %161, i32 0, i32 77
  %162 = load i64, i64* %begv232, align 8
  %163 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv_byte233 = getelementptr inbounds %struct.buffer, %struct.buffer* %163, i32 0, i32 78
  %164 = load i64, i64* %begv_byte233, align 8
  %call234 = call i64 @scan_newline(i64 %add229, i64 %add231, i64 %162, i64 %164, i64 -2, i1 zeroext true)
  br label %while.cond

while.end:                                        ; preds = %if.then.225, %while.cond
  %165 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt235 = getelementptr inbounds %struct.buffer, %struct.buffer* %165, i32 0, i32 75
  %166 = load i64, i64* %pt235, align 8
  %add236 = add nsw i64 %166, 0
  store i64 %add236, i64* @find_start_value, align 8
  %167 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte237 = getelementptr inbounds %struct.buffer, %struct.buffer* %167, i32 0, i32 76
  %168 = load i64, i64* %pt_byte237, align 8
  %add238 = add nsw i64 %168, 0
  store i64 %add238, i64* @find_start_value_byte, align 8
  %169 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %170 = load i64, i64* %opoint, align 8
  %171 = load i64, i64* %opoint_byte, align 8
  call void @temp_set_point_both(%struct.buffer* %169, i64 %170, i64 %171)
  br label %found

found:                                            ; preds = %while.end, %if.then.10
  %172 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  store %struct.buffer* %172, %struct.buffer** @find_start_buffer, align 8
  %173 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text239 = getelementptr inbounds %struct.buffer, %struct.buffer* %173, i32 0, i32 73
  %174 = load %struct.buffer_text*, %struct.buffer_text** %text239, align 8
  %modiff240 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %174, i32 0, i32 6
  %175 = load i64, i64* %modiff240, align 8
  store i64 %175, i64* @find_start_modiff, align 8
  %176 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv241 = getelementptr inbounds %struct.buffer, %struct.buffer* %176, i32 0, i32 77
  %177 = load i64, i64* %begv241, align 8
  store i64 %177, i64* @find_start_begv, align 8
  %178 = load i64, i64* %pos.addr, align 8
  store i64 %178, i64* @find_start_pos, align 8
  %179 = load i64, i64* @find_start_value, align 8
  store i64 %179, i64* %retval
  br label %return

return:                                           ; preds = %found, %if.then
  %180 = load i64, i64* %retval
  ret i64 %180
}

declare i64 @scan_newline(i64, i64, i64, i64, i64, i1 zeroext) #1

declare void @temp_set_point_both(%struct.buffer*, i64, i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @syntax_multibyte(i32 %c, i1 zeroext %multibyte_symbol_p) #0 {
entry:
  %c.addr = alloca i32, align 4
  %multibyte_symbol_p.addr = alloca i8, align 1
  store i32 %c, i32* %c.addr, align 4
  %frombool = zext i1 %multibyte_symbol_p to i8
  store i8 %frombool, i8* %multibyte_symbol_p.addr, align 1
  br i1 true, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %0 = load i32, i32* %c.addr, align 4
  %add = add i32 %0, 0
  %cmp = icmp ult i32 %add, 128
  br i1 %cmp, label %cond.true.4, label %lor.lhs.false

cond.false:                                       ; preds = %entry
  %1 = load i32, i32* %c.addr, align 4
  %conv = sext i32 %1 to i64
  %add1 = add i64 %conv, 0
  %cmp2 = icmp ult i64 %add1, 128
  br i1 %cmp2, label %cond.true.4, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false, %cond.true
  %2 = load i8, i8* %multibyte_symbol_p.addr, align 1
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %cond.false.5, label %cond.true.4

cond.true.4:                                      ; preds = %lor.lhs.false, %cond.false, %cond.true
  %3 = load i32, i32* %c.addr, align 4
  %call = call i32 @syntax_property(i32 %3, i1 zeroext true)
  br label %cond.end

cond.false.5:                                     ; preds = %lor.lhs.false
  br label %cond.end

cond.end:                                         ; preds = %cond.false.5, %cond.true.4
  %cond = phi i32 [ %call, %cond.true.4 ], [ 3, %cond.false.5 ]
  ret i32 %cond
}

; Function Attrs: noreturn
declare void @xsignal3(i64, i64, i64, i64) #2

declare i64 @build_string(i8*) #1

declare i64 @Fcar(i64) #1

declare i64 @Fcdr(i64) #1

declare zeroext i1 @RANGED_INTEGERP(i64, i64, i64) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn }
attributes #6 = { nounwind readonly }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
