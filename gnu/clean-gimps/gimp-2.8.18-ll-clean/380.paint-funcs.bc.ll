; ModuleID = './app/paint-funcs/paint-funcs.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._LayerMode = type { i8, [3 x i8] }
%struct.GimpCompositeOperationEffects = type { i8, i8, i8 }
%struct._TempBuf = type { i32, i32, i32, i32, i32, i8* }
%struct._GimpRGB = type { double, double, double, double }
%struct._PixelRegion = type { i8*, %struct._TileManager*, %struct._Tile*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct._TileManager = type opaque
%struct._Tile = type opaque
%struct._PixelRegionIterator = type { %struct._GSList*, i32, i32, i32, i32, i32 }
%struct._GSList = type { i8*, %struct._GSList* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.initial_regions_struct = type { i32, i32, i32*, i32, i8* }
%struct.GimpCompositeContext = type { i8*, i8*, i8*, i8*, i64, i32, i32, i32, i32, %struct.anon, %struct.anon.0, %struct.anon.1, %struct.anon.2, i32, i32 }
%struct.anon = type { i32, i8 }
%struct.anon.0 = type { i32 }
%struct.anon.1 = type { i32 }
%struct.anon.2 = type { i32, i32, i32 }
%struct.combine_regions_struct = type { i32, i32, i32*, i32, i8*, i32, i32 }

@no_mask = internal constant i8 -1, align 1
@.str = private unnamed_addr constant [42 x i8] c"border_region: negative radius specified.\00", align 1
@layer_modes = internal constant [26 x %struct._LayerMode] [%struct._LayerMode { i8 3, [3 x i8] undef }, %struct._LayerMode { i8 3, [3 x i8] undef }, %struct._LayerMode { i8 3, [3 x i8] undef }, %struct._LayerMode { i8 0, [3 x i8] undef }, %struct._LayerMode { i8 0, [3 x i8] undef }, %struct._LayerMode { i8 0, [3 x i8] undef }, %struct._LayerMode { i8 0, [3 x i8] undef }, %struct._LayerMode { i8 0, [3 x i8] undef }, %struct._LayerMode { i8 0, [3 x i8] undef }, %struct._LayerMode { i8 0, [3 x i8] undef }, %struct._LayerMode { i8 0, [3 x i8] undef }, %struct._LayerMode { i8 0, [3 x i8] undef }, %struct._LayerMode { i8 0, [3 x i8] undef }, %struct._LayerMode { i8 0, [3 x i8] undef }, %struct._LayerMode { i8 0, [3 x i8] undef }, %struct._LayerMode { i8 0, [3 x i8] undef }, %struct._LayerMode { i8 0, [3 x i8] undef }, %struct._LayerMode { i8 0, [3 x i8] undef }, %struct._LayerMode { i8 0, [3 x i8] undef }, %struct._LayerMode { i8 0, [3 x i8] undef }, %struct._LayerMode { i8 0, [3 x i8] undef }, %struct._LayerMode { i8 0, [3 x i8] undef }, %struct._LayerMode { i8 5, [3 x i8] undef }, %struct._LayerMode { i8 5, [3 x i8] undef }, %struct._LayerMode { i8 7, [3 x i8] undef }, %struct._LayerMode { i8 3, [3 x i8] undef }], align 16
@.str.1 = private unnamed_addr constant [17 x i8] c"Gimp-Paint-Funcs\00", align 1
@gimp_composite_operation_effects = external global [0 x %struct.GimpCompositeOperationEffects], align 1
@.str.2 = private unnamed_addr constant [44 x i8] c"combine_sub_region: unhandled combine-type.\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"NO_COMBINATION\00", align 1
@.str.4 = private unnamed_addr constant [24 x i8] c"UNKNOWN COMBINATION: %d\00", align 1
@.str.5 = private unnamed_addr constant [56 x i8] c"replace_pixels only works on commensurate pixel regions\00", align 1

; Function Attrs: nounwind uwtable
define void @color_pixels(i8* %dest, i8* %color, i32 %w, i32 %bytes) #0 {
entry:
  %dest.addr = alloca i8*, align 8
  %color.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %shortc = alloca i16, align 2
  %shortd = alloca i16*, align 8
  %c0 = alloca i8, align 1
  %c1 = alloca i8, align 1
  %c2 = alloca i8, align 1
  %longc = alloca i32, align 4
  %longd = alloca i32*, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %color, i8** %color.addr, align 8
  store i32 %w, i32* %w.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %0 = load i32, i32* %bytes.addr, align 4
  switch i32 %0, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.2
    i32 3, label %sw.bb.3
    i32 4, label %sw.bb.15
  ]

sw.bb:                                            ; preds = %entry
  %1 = load i8*, i8** %dest.addr, align 8
  %2 = load i8*, i8** %color.addr, align 8
  %3 = load i8, i8* %2, align 1
  %conv = zext i8 %3 to i32
  %4 = trunc i32 %conv to i8
  %5 = load i32, i32* %w.addr, align 4
  %conv1 = zext i32 %5 to i64
  call void @llvm.memset.p0i8.i64(i8* %1, i8 %4, i64 %conv1, i32 1, i1 false)
  br label %sw.epilog

sw.bb.2:                                          ; preds = %entry
  %6 = load i8*, i8** %color.addr, align 8
  %7 = bitcast i8* %6 to i16*
  %arrayidx = getelementptr inbounds i16, i16* %7, i64 0
  %8 = load i16, i16* %arrayidx, align 2
  store i16 %8, i16* %shortc, align 2
  %9 = load i8*, i8** %dest.addr, align 8
  %10 = bitcast i8* %9 to i16*
  store i16* %10, i16** %shortd, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %sw.bb.2
  %11 = load i32, i32* %w.addr, align 4
  %dec = add i32 %11, -1
  store i32 %dec, i32* %w.addr, align 4
  %tobool = icmp ne i32 %11, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = load i16, i16* %shortc, align 2
  %13 = load i16*, i16** %shortd, align 8
  store i16 %12, i16* %13, align 2
  %14 = load i16*, i16** %shortd, align 8
  %incdec.ptr = getelementptr inbounds i16, i16* %14, i32 1
  store i16* %incdec.ptr, i16** %shortd, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %sw.epilog

sw.bb.3:                                          ; preds = %entry
  %15 = load i8*, i8** %color.addr, align 8
  %arrayidx4 = getelementptr inbounds i8, i8* %15, i64 0
  %16 = load i8, i8* %arrayidx4, align 1
  store i8 %16, i8* %c0, align 1
  %17 = load i8*, i8** %color.addr, align 8
  %arrayidx5 = getelementptr inbounds i8, i8* %17, i64 1
  %18 = load i8, i8* %arrayidx5, align 1
  store i8 %18, i8* %c1, align 1
  %19 = load i8*, i8** %color.addr, align 8
  %arrayidx6 = getelementptr inbounds i8, i8* %19, i64 2
  %20 = load i8, i8* %arrayidx6, align 1
  store i8 %20, i8* %c2, align 1
  br label %while.cond.7

while.cond.7:                                     ; preds = %while.body.10, %sw.bb.3
  %21 = load i32, i32* %w.addr, align 4
  %dec8 = add i32 %21, -1
  store i32 %dec8, i32* %w.addr, align 4
  %tobool9 = icmp ne i32 %21, 0
  br i1 %tobool9, label %while.body.10, label %while.end.14

while.body.10:                                    ; preds = %while.cond.7
  %22 = load i8, i8* %c0, align 1
  %23 = load i8*, i8** %dest.addr, align 8
  %arrayidx11 = getelementptr inbounds i8, i8* %23, i64 0
  store i8 %22, i8* %arrayidx11, align 1
  %24 = load i8, i8* %c1, align 1
  %25 = load i8*, i8** %dest.addr, align 8
  %arrayidx12 = getelementptr inbounds i8, i8* %25, i64 1
  store i8 %24, i8* %arrayidx12, align 1
  %26 = load i8, i8* %c2, align 1
  %27 = load i8*, i8** %dest.addr, align 8
  %arrayidx13 = getelementptr inbounds i8, i8* %27, i64 2
  store i8 %26, i8* %arrayidx13, align 1
  %28 = load i8*, i8** %dest.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %28, i64 3
  store i8* %add.ptr, i8** %dest.addr, align 8
  br label %while.cond.7

while.end.14:                                     ; preds = %while.cond.7
  br label %sw.epilog

sw.bb.15:                                         ; preds = %entry
  %29 = load i8*, i8** %color.addr, align 8
  %30 = bitcast i8* %29 to i32*
  %arrayidx16 = getelementptr inbounds i32, i32* %30, i64 0
  %31 = load i32, i32* %arrayidx16, align 4
  store i32 %31, i32* %longc, align 4
  %32 = load i8*, i8** %dest.addr, align 8
  %33 = bitcast i8* %32 to i32*
  store i32* %33, i32** %longd, align 8
  br label %while.cond.17

while.cond.17:                                    ; preds = %while.body.20, %sw.bb.15
  %34 = load i32, i32* %w.addr, align 4
  %dec18 = add i32 %34, -1
  store i32 %dec18, i32* %w.addr, align 4
  %tobool19 = icmp ne i32 %34, 0
  br i1 %tobool19, label %while.body.20, label %while.end.22

while.body.20:                                    ; preds = %while.cond.17
  %35 = load i32, i32* %longc, align 4
  %36 = load i32*, i32** %longd, align 8
  store i32 %35, i32* %36, align 4
  %37 = load i32*, i32** %longd, align 8
  %incdec.ptr21 = getelementptr inbounds i32, i32* %37, i32 1
  store i32* %incdec.ptr21, i32** %longd, align 8
  br label %while.cond.17

while.end.22:                                     ; preds = %while.cond.17
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %while.cond.23

while.cond.23:                                    ; preds = %while.body.26, %sw.default
  %38 = load i32, i32* %w.addr, align 4
  %dec24 = add i32 %38, -1
  store i32 %dec24, i32* %w.addr, align 4
  %tobool25 = icmp ne i32 %38, 0
  br i1 %tobool25, label %while.body.26, label %while.end.29

while.body.26:                                    ; preds = %while.cond.23
  %39 = load i8*, i8** %dest.addr, align 8
  %40 = load i8*, i8** %color.addr, align 8
  %41 = load i32, i32* %bytes.addr, align 4
  %conv27 = zext i32 %41 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %39, i8* %40, i64 %conv27, i32 1, i1 false)
  %42 = load i32, i32* %bytes.addr, align 4
  %43 = load i8*, i8** %dest.addr, align 8
  %idx.ext = zext i32 %42 to i64
  %add.ptr28 = getelementptr inbounds i8, i8* %43, i64 %idx.ext
  store i8* %add.ptr28, i8** %dest.addr, align 8
  br label %while.cond.23

while.end.29:                                     ; preds = %while.cond.23
  br label %sw.epilog

sw.epilog:                                        ; preds = %while.end.29, %while.end.22, %while.end.14, %while.end, %sw.bb
  ret void
}

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #1

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind uwtable
define void @color_pixels_mask(i8* %dest, i8* %mask, i8* %color, i32 %w, i32 %bytes) #0 {
entry:
  %dest.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %color.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %c0 = alloca i8, align 1
  %c1 = alloca i8, align 1
  %c2 = alloca i8, align 1
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store i8* %color, i8** %color.addr, align 8
  store i32 %w, i32* %w.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %0 = load i32, i32* %bytes.addr, align 4
  switch i32 %0, label %sw.epilog [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.2
    i32 3, label %sw.bb.5
    i32 4, label %sw.bb.18
  ]

sw.bb:                                            ; preds = %entry
  %1 = load i8*, i8** %dest.addr, align 8
  %2 = load i8*, i8** %color.addr, align 8
  %3 = load i8, i8* %2, align 1
  %conv = zext i8 %3 to i32
  %4 = trunc i32 %conv to i8
  %5 = load i32, i32* %w.addr, align 4
  %conv1 = zext i32 %5 to i64
  call void @llvm.memset.p0i8.i64(i8* %1, i8 %4, i64 %conv1, i32 1, i1 false)
  br label %sw.epilog

sw.bb.2:                                          ; preds = %entry
  %6 = load i8*, i8** %color.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 0
  %7 = load i8, i8* %arrayidx, align 1
  store i8 %7, i8* %c0, align 1
  br label %while.cond

while.cond:                                       ; preds = %while.body, %sw.bb.2
  %8 = load i32, i32* %w.addr, align 4
  %dec = add i32 %8, -1
  store i32 %dec, i32* %w.addr, align 4
  %tobool = icmp ne i32 %8, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load i8, i8* %c0, align 1
  %10 = load i8*, i8** %dest.addr, align 8
  %arrayidx3 = getelementptr inbounds i8, i8* %10, i64 0
  store i8 %9, i8* %arrayidx3, align 1
  %11 = load i8*, i8** %mask.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr, i8** %mask.addr, align 8
  %12 = load i8, i8* %11, align 1
  %13 = load i8*, i8** %dest.addr, align 8
  %arrayidx4 = getelementptr inbounds i8, i8* %13, i64 1
  store i8 %12, i8* %arrayidx4, align 1
  %14 = load i8*, i8** %dest.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %14, i64 2
  store i8* %add.ptr, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %sw.epilog

sw.bb.5:                                          ; preds = %entry
  %15 = load i8*, i8** %color.addr, align 8
  %arrayidx6 = getelementptr inbounds i8, i8* %15, i64 0
  %16 = load i8, i8* %arrayidx6, align 1
  store i8 %16, i8* %c0, align 1
  %17 = load i8*, i8** %color.addr, align 8
  %arrayidx7 = getelementptr inbounds i8, i8* %17, i64 1
  %18 = load i8, i8* %arrayidx7, align 1
  store i8 %18, i8* %c1, align 1
  %19 = load i8*, i8** %color.addr, align 8
  %arrayidx8 = getelementptr inbounds i8, i8* %19, i64 2
  %20 = load i8, i8* %arrayidx8, align 1
  store i8 %20, i8* %c2, align 1
  br label %while.cond.9

while.cond.9:                                     ; preds = %while.body.12, %sw.bb.5
  %21 = load i32, i32* %w.addr, align 4
  %dec10 = add i32 %21, -1
  store i32 %dec10, i32* %w.addr, align 4
  %tobool11 = icmp ne i32 %21, 0
  br i1 %tobool11, label %while.body.12, label %while.end.17

while.body.12:                                    ; preds = %while.cond.9
  %22 = load i8, i8* %c0, align 1
  %23 = load i8*, i8** %dest.addr, align 8
  %arrayidx13 = getelementptr inbounds i8, i8* %23, i64 0
  store i8 %22, i8* %arrayidx13, align 1
  %24 = load i8, i8* %c1, align 1
  %25 = load i8*, i8** %dest.addr, align 8
  %arrayidx14 = getelementptr inbounds i8, i8* %25, i64 1
  store i8 %24, i8* %arrayidx14, align 1
  %26 = load i8, i8* %c2, align 1
  %27 = load i8*, i8** %dest.addr, align 8
  %arrayidx15 = getelementptr inbounds i8, i8* %27, i64 2
  store i8 %26, i8* %arrayidx15, align 1
  %28 = load i8*, i8** %dest.addr, align 8
  %add.ptr16 = getelementptr inbounds i8, i8* %28, i64 3
  store i8* %add.ptr16, i8** %dest.addr, align 8
  br label %while.cond.9

while.end.17:                                     ; preds = %while.cond.9
  br label %sw.epilog

sw.bb.18:                                         ; preds = %entry
  %29 = load i8*, i8** %color.addr, align 8
  %arrayidx19 = getelementptr inbounds i8, i8* %29, i64 0
  %30 = load i8, i8* %arrayidx19, align 1
  store i8 %30, i8* %c0, align 1
  %31 = load i8*, i8** %color.addr, align 8
  %arrayidx20 = getelementptr inbounds i8, i8* %31, i64 1
  %32 = load i8, i8* %arrayidx20, align 1
  store i8 %32, i8* %c1, align 1
  %33 = load i8*, i8** %color.addr, align 8
  %arrayidx21 = getelementptr inbounds i8, i8* %33, i64 2
  %34 = load i8, i8* %arrayidx21, align 1
  store i8 %34, i8* %c2, align 1
  br label %while.cond.22

while.cond.22:                                    ; preds = %while.body.25, %sw.bb.18
  %35 = load i32, i32* %w.addr, align 4
  %dec23 = add i32 %35, -1
  store i32 %dec23, i32* %w.addr, align 4
  %tobool24 = icmp ne i32 %35, 0
  br i1 %tobool24, label %while.body.25, label %while.end.32

while.body.25:                                    ; preds = %while.cond.22
  %36 = load i8, i8* %c0, align 1
  %37 = load i8*, i8** %dest.addr, align 8
  %arrayidx26 = getelementptr inbounds i8, i8* %37, i64 0
  store i8 %36, i8* %arrayidx26, align 1
  %38 = load i8, i8* %c1, align 1
  %39 = load i8*, i8** %dest.addr, align 8
  %arrayidx27 = getelementptr inbounds i8, i8* %39, i64 1
  store i8 %38, i8* %arrayidx27, align 1
  %40 = load i8, i8* %c2, align 1
  %41 = load i8*, i8** %dest.addr, align 8
  %arrayidx28 = getelementptr inbounds i8, i8* %41, i64 2
  store i8 %40, i8* %arrayidx28, align 1
  %42 = load i8*, i8** %mask.addr, align 8
  %incdec.ptr29 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %incdec.ptr29, i8** %mask.addr, align 8
  %43 = load i8, i8* %42, align 1
  %44 = load i8*, i8** %dest.addr, align 8
  %arrayidx30 = getelementptr inbounds i8, i8* %44, i64 3
  store i8 %43, i8* %arrayidx30, align 1
  %45 = load i8*, i8** %dest.addr, align 8
  %add.ptr31 = getelementptr inbounds i8, i8* %45, i64 4
  store i8* %add.ptr31, i8** %dest.addr, align 8
  br label %while.cond.22

while.end.32:                                     ; preds = %while.cond.22
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %while.end.32, %while.end.17, %while.end, %sw.bb
  ret void
}

; Function Attrs: nounwind uwtable
define void @pattern_pixels_mask(i8* %dest, i8* %mask, %struct._TempBuf* %pattern, i32 %w, i32 %bytes, i32 %x, i32 %y) #0 {
entry:
  %dest.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %pattern.addr = alloca %struct._TempBuf*, align 8
  %w.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %alpha = alloca i32, align 4
  %pat = alloca i8*, align 8
  %i = alloca i32, align 4
  %p = alloca i8*, align 8
  %b = alloca i32, align 4
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store %struct._TempBuf* %pattern, %struct._TempBuf** %pattern.addr, align 8
  store i32 %w, i32* %w.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load i32, i32* %bytes.addr, align 4
  %neg = xor i32 %0, -1
  %and = and i32 %neg, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %bytes.addr, align 4
  %sub = sub i32 %1, 1
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load i32, i32* %bytes.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ %2, %cond.false ]
  store i32 %cond, i32* %alpha, align 4
  %3 = load %struct._TempBuf*, %struct._TempBuf** %pattern.addr, align 8
  %call = call i8* @temp_buf_get_data(%struct._TempBuf* %3)
  %4 = load i32, i32* %y.addr, align 4
  %5 = load %struct._TempBuf*, %struct._TempBuf** %pattern.addr, align 8
  %height = getelementptr inbounds %struct._TempBuf, %struct._TempBuf* %5, i32 0, i32 2
  %6 = load i32, i32* %height, align 4
  %rem = srem i32 %4, %6
  %7 = load %struct._TempBuf*, %struct._TempBuf** %pattern.addr, align 8
  %width = getelementptr inbounds %struct._TempBuf, %struct._TempBuf* %7, i32 0, i32 1
  %8 = load i32, i32* %width, align 4
  %mul = mul nsw i32 %rem, %8
  %9 = load %struct._TempBuf*, %struct._TempBuf** %pattern.addr, align 8
  %bytes1 = getelementptr inbounds %struct._TempBuf, %struct._TempBuf* %9, i32 0, i32 0
  %10 = load i32, i32* %bytes1, align 4
  %mul2 = mul nsw i32 %mul, %10
  %idx.ext = sext i32 %mul2 to i64
  %add.ptr = getelementptr inbounds i8, i8* %call, i64 %idx.ext
  store i8* %add.ptr, i8** %pat, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.42, %cond.end
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %w.addr, align 4
  %cmp = icmp ult i32 %11, %12
  br i1 %cmp, label %for.body, label %for.end.44

for.body:                                         ; preds = %for.cond
  %13 = load i8*, i8** %pat, align 8
  %14 = load i32, i32* %i, align 4
  %15 = load i32, i32* %x.addr, align 4
  %add = add i32 %14, %15
  %16 = load %struct._TempBuf*, %struct._TempBuf** %pattern.addr, align 8
  %width3 = getelementptr inbounds %struct._TempBuf, %struct._TempBuf* %16, i32 0, i32 1
  %17 = load i32, i32* %width3, align 4
  %rem4 = urem i32 %add, %17
  %18 = load %struct._TempBuf*, %struct._TempBuf** %pattern.addr, align 8
  %bytes5 = getelementptr inbounds %struct._TempBuf, %struct._TempBuf* %18, i32 0, i32 0
  %19 = load i32, i32* %bytes5, align 4
  %mul6 = mul i32 %rem4, %19
  %idx.ext7 = zext i32 %mul6 to i64
  %add.ptr8 = getelementptr inbounds i8, i8* %13, i64 %idx.ext7
  store i8* %add.ptr8, i8** %p, align 8
  store i32 0, i32* %b, align 4
  br label %for.cond.9

for.cond.9:                                       ; preds = %for.inc, %for.body
  %20 = load i32, i32* %b, align 4
  %21 = load i32, i32* %alpha, align 4
  %cmp10 = icmp ult i32 %20, %21
  br i1 %cmp10, label %for.body.11, label %for.end

for.body.11:                                      ; preds = %for.cond.9
  %22 = load i32, i32* %b, align 4
  %idxprom = zext i32 %22 to i64
  %23 = load i8*, i8** %p, align 8
  %arrayidx = getelementptr inbounds i8, i8* %23, i64 %idxprom
  %24 = load i8, i8* %arrayidx, align 1
  %25 = load i32, i32* %b, align 4
  %idxprom12 = zext i32 %25 to i64
  %26 = load i8*, i8** %dest.addr, align 8
  %arrayidx13 = getelementptr inbounds i8, i8* %26, i64 %idxprom12
  store i8 %24, i8* %arrayidx13, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body.11
  %27 = load i32, i32* %b, align 4
  %inc = add i32 %27, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond.9

for.end:                                          ; preds = %for.cond.9
  %28 = load i32, i32* %bytes.addr, align 4
  %neg14 = xor i32 %28, -1
  %and15 = and i32 %neg14, 1
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %if.then, label %if.end.39

if.then:                                          ; preds = %for.end
  %29 = load i8*, i8** %mask.addr, align 8
  %tobool17 = icmp ne i8* %29, null
  br i1 %tobool17, label %if.then.18, label %if.else

if.then.18:                                       ; preds = %if.then
  %30 = load i8*, i8** %mask.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %30, i32 1
  store i8* %incdec.ptr, i8** %mask.addr, align 8
  %31 = load i8, i8* %30, align 1
  %32 = load i32, i32* %alpha, align 4
  %idxprom19 = zext i32 %32 to i64
  %33 = load i8*, i8** %dest.addr, align 8
  %arrayidx20 = getelementptr inbounds i8, i8* %33, i64 %idxprom19
  store i8 %31, i8* %arrayidx20, align 1
  br label %if.end

if.else:                                          ; preds = %if.then
  %34 = load i32, i32* %alpha, align 4
  %idxprom21 = zext i32 %34 to i64
  %35 = load i8*, i8** %dest.addr, align 8
  %arrayidx22 = getelementptr inbounds i8, i8* %35, i64 %idxprom21
  store i8 -1, i8* %arrayidx22, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.18
  %36 = load %struct._TempBuf*, %struct._TempBuf** %pattern.addr, align 8
  %bytes23 = getelementptr inbounds %struct._TempBuf, %struct._TempBuf* %36, i32 0, i32 0
  %37 = load i32, i32* %bytes23, align 4
  %neg24 = xor i32 %37, -1
  %and25 = and i32 %neg24, 1
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %if.then.27, label %if.end.38

if.then.27:                                       ; preds = %if.end
  %38 = load i32, i32* %alpha, align 4
  %idxprom28 = zext i32 %38 to i64
  %39 = load i8*, i8** %dest.addr, align 8
  %arrayidx29 = getelementptr inbounds i8, i8* %39, i64 %idxprom28
  %40 = load i8, i8* %arrayidx29, align 1
  %conv = zext i8 %40 to i32
  %41 = load i32, i32* %alpha, align 4
  %idxprom30 = zext i32 %41 to i64
  %42 = load i8*, i8** %p, align 8
  %arrayidx31 = getelementptr inbounds i8, i8* %42, i64 %idxprom30
  %43 = load i8, i8* %arrayidx31, align 1
  %conv32 = zext i8 %43 to i32
  %mul33 = mul nsw i32 %conv, %conv32
  %conv34 = sitofp i32 %mul33 to double
  %div = fdiv double %conv34, 2.550000e+02
  %conv35 = fptoui double %div to i8
  %44 = load i32, i32* %alpha, align 4
  %idxprom36 = zext i32 %44 to i64
  %45 = load i8*, i8** %dest.addr, align 8
  %arrayidx37 = getelementptr inbounds i8, i8* %45, i64 %idxprom36
  store i8 %conv35, i8* %arrayidx37, align 1
  br label %if.end.38

if.end.38:                                        ; preds = %if.then.27, %if.end
  br label %if.end.39

if.end.39:                                        ; preds = %if.end.38, %for.end
  %46 = load i32, i32* %bytes.addr, align 4
  %47 = load i8*, i8** %dest.addr, align 8
  %idx.ext40 = zext i32 %46 to i64
  %add.ptr41 = getelementptr inbounds i8, i8* %47, i64 %idx.ext40
  store i8* %add.ptr41, i8** %dest.addr, align 8
  br label %for.inc.42

for.inc.42:                                       ; preds = %if.end.39
  %48 = load i32, i32* %i, align 4
  %inc43 = add i32 %48, 1
  store i32 %inc43, i32* %i, align 4
  br label %for.cond

for.end.44:                                       ; preds = %for.cond
  ret void
}

declare i8* @temp_buf_get_data(%struct._TempBuf*) #2

; Function Attrs: inlinehint nounwind uwtable
define void @blend_pixels(i8* %src1, i8* %src2, i8* %dest, i8 zeroext %blend, i32 %w, i32 %bytes) #3 {
entry:
  %src1.addr = alloca i8*, align 8
  %src2.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %blend.addr = alloca i8, align 1
  %w.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %blend1 = alloca i32, align 4
  %blend2 = alloca i32, align 4
  %c = alloca i32, align 4
  %a1 = alloca i32, align 4
  %a2 = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %blend151 = alloca i8, align 1
  %b59 = alloca i32, align 4
  store i8* %src1, i8** %src1.addr, align 8
  store i8* %src2, i8** %src2.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8 %blend, i8* %blend.addr, align 1
  store i32 %w, i32* %w.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %0 = load i32, i32* %bytes.addr, align 4
  %neg = xor i32 %0, -1
  %and = and i32 %neg, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else.50

if.then:                                          ; preds = %entry
  %1 = load i8, i8* %blend.addr, align 1
  %conv = zext i8 %1 to i32
  %sub = sub nsw i32 255, %conv
  store i32 %sub, i32* %blend1, align 4
  %2 = load i8, i8* %blend.addr, align 1
  %conv1 = zext i8 %2 to i32
  %add = add nsw i32 %conv1, 1
  store i32 %add, i32* %blend2, align 4
  %3 = load i32, i32* %bytes.addr, align 4
  %sub2 = sub i32 %3, 1
  store i32 %sub2, i32* %c, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.then
  %4 = load i32, i32* %w.addr, align 4
  %dec = add i32 %4, -1
  store i32 %dec, i32* %w.addr, align 4
  %tobool3 = icmp ne i32 %4, 0
  br i1 %tobool3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %blend1, align 4
  %6 = load i32, i32* %c, align 4
  %idxprom = zext i32 %6 to i64
  %7 = load i8*, i8** %src1.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %7, i64 %idxprom
  %8 = load i8, i8* %arrayidx, align 1
  %conv4 = zext i8 %8 to i32
  %mul = mul i32 %5, %conv4
  store i32 %mul, i32* %a1, align 4
  %9 = load i32, i32* %blend2, align 4
  %10 = load i32, i32* %c, align 4
  %idxprom5 = zext i32 %10 to i64
  %11 = load i8*, i8** %src2.addr, align 8
  %arrayidx6 = getelementptr inbounds i8, i8* %11, i64 %idxprom5
  %12 = load i8, i8* %arrayidx6, align 1
  %conv7 = zext i8 %12 to i32
  %mul8 = mul i32 %9, %conv7
  store i32 %mul8, i32* %a2, align 4
  %13 = load i32, i32* %a1, align 4
  %14 = load i32, i32* %a2, align 4
  %add9 = add nsw i32 %13, %14
  store i32 %add9, i32* %a, align 4
  %15 = load i32, i32* %a, align 4
  %tobool10 = icmp ne i32 %15, 0
  br i1 %tobool10, label %if.else, label %if.then.11

if.then.11:                                       ; preds = %while.body
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.11
  %16 = load i32, i32* %b, align 4
  %17 = load i32, i32* %bytes.addr, align 4
  %cmp = icmp ult i32 %16, %17
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %18 = load i32, i32* %b, align 4
  %idxprom13 = zext i32 %18 to i64
  %19 = load i8*, i8** %dest.addr, align 8
  %arrayidx14 = getelementptr inbounds i8, i8* %19, i64 %idxprom13
  store i8 0, i8* %arrayidx14, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %20 = load i32, i32* %b, align 4
  %inc = add i32 %20, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.else:                                          ; preds = %while.body
  store i32 0, i32* %b, align 4
  br label %for.cond.15

for.cond.15:                                      ; preds = %for.inc.40, %if.else
  %21 = load i32, i32* %b, align 4
  %22 = load i32, i32* %c, align 4
  %cmp16 = icmp ult i32 %21, %22
  br i1 %cmp16, label %for.body.18, label %for.end.42

for.body.18:                                      ; preds = %for.cond.15
  %23 = load i32, i32* %b, align 4
  %idxprom19 = zext i32 %23 to i64
  %24 = load i8*, i8** %src1.addr, align 8
  %arrayidx20 = getelementptr inbounds i8, i8* %24, i64 %idxprom19
  %25 = load i8, i8* %arrayidx20, align 1
  %conv21 = zext i8 %25 to i32
  %26 = load i32, i32* %b, align 4
  %idxprom22 = zext i32 %26 to i64
  %27 = load i8*, i8** %src1.addr, align 8
  %arrayidx23 = getelementptr inbounds i8, i8* %27, i64 %idxprom22
  %28 = load i8, i8* %arrayidx23, align 1
  %conv24 = zext i8 %28 to i32
  %29 = load i32, i32* %a1, align 4
  %mul25 = mul nsw i32 %conv24, %29
  %30 = load i32, i32* %b, align 4
  %idxprom26 = zext i32 %30 to i64
  %31 = load i8*, i8** %src2.addr, align 8
  %arrayidx27 = getelementptr inbounds i8, i8* %31, i64 %idxprom26
  %32 = load i8, i8* %arrayidx27, align 1
  %conv28 = zext i8 %32 to i32
  %33 = load i32, i32* %a2, align 4
  %mul29 = mul nsw i32 %conv28, %33
  %add30 = add nsw i32 %mul25, %mul29
  %34 = load i32, i32* %a, align 4
  %35 = load i32, i32* %b, align 4
  %idxprom31 = zext i32 %35 to i64
  %36 = load i8*, i8** %src1.addr, align 8
  %arrayidx32 = getelementptr inbounds i8, i8* %36, i64 %idxprom31
  %37 = load i8, i8* %arrayidx32, align 1
  %conv33 = zext i8 %37 to i32
  %mul34 = mul nsw i32 %34, %conv33
  %sub35 = sub nsw i32 %add30, %mul34
  %38 = load i32, i32* %a, align 4
  %div = sdiv i32 %sub35, %38
  %add36 = add nsw i32 %conv21, %div
  %conv37 = trunc i32 %add36 to i8
  %39 = load i32, i32* %b, align 4
  %idxprom38 = zext i32 %39 to i64
  %40 = load i8*, i8** %dest.addr, align 8
  %arrayidx39 = getelementptr inbounds i8, i8* %40, i64 %idxprom38
  store i8 %conv37, i8* %arrayidx39, align 1
  br label %for.inc.40

for.inc.40:                                       ; preds = %for.body.18
  %41 = load i32, i32* %b, align 4
  %inc41 = add i32 %41, 1
  store i32 %inc41, i32* %b, align 4
  br label %for.cond.15

for.end.42:                                       ; preds = %for.cond.15
  %42 = load i32, i32* %a, align 4
  %shr = ashr i32 %42, 8
  %conv43 = trunc i32 %shr to i8
  %43 = load i32, i32* %c, align 4
  %idxprom44 = zext i32 %43 to i64
  %44 = load i8*, i8** %dest.addr, align 8
  %arrayidx45 = getelementptr inbounds i8, i8* %44, i64 %idxprom44
  store i8 %conv43, i8* %arrayidx45, align 1
  br label %if.end

if.end:                                           ; preds = %for.end.42, %for.end
  %45 = load i32, i32* %bytes.addr, align 4
  %46 = load i8*, i8** %src1.addr, align 8
  %idx.ext = zext i32 %45 to i64
  %add.ptr = getelementptr inbounds i8, i8* %46, i64 %idx.ext
  store i8* %add.ptr, i8** %src1.addr, align 8
  %47 = load i32, i32* %bytes.addr, align 4
  %48 = load i8*, i8** %src2.addr, align 8
  %idx.ext46 = zext i32 %47 to i64
  %add.ptr47 = getelementptr inbounds i8, i8* %48, i64 %idx.ext46
  store i8* %add.ptr47, i8** %src2.addr, align 8
  %49 = load i32, i32* %bytes.addr, align 4
  %50 = load i8*, i8** %dest.addr, align 8
  %idx.ext48 = zext i32 %49 to i64
  %add.ptr49 = getelementptr inbounds i8, i8* %50, i64 %idx.ext48
  store i8* %add.ptr49, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.98

if.else.50:                                       ; preds = %entry
  %51 = load i8, i8* %blend.addr, align 1
  %conv52 = zext i8 %51 to i32
  %sub53 = sub nsw i32 255, %conv52
  %conv54 = trunc i32 %sub53 to i8
  store i8 %conv54, i8* %blend151, align 1
  br label %while.cond.55

while.cond.55:                                    ; preds = %for.end.90, %if.else.50
  %52 = load i32, i32* %w.addr, align 4
  %dec56 = add i32 %52, -1
  store i32 %dec56, i32* %w.addr, align 4
  %tobool57 = icmp ne i32 %52, 0
  br i1 %tobool57, label %while.body.58, label %while.end.97

while.body.58:                                    ; preds = %while.cond.55
  store i32 0, i32* %b59, align 4
  br label %for.cond.60

for.cond.60:                                      ; preds = %for.inc.88, %while.body.58
  %53 = load i32, i32* %b59, align 4
  %54 = load i32, i32* %bytes.addr, align 4
  %cmp61 = icmp ult i32 %53, %54
  br i1 %cmp61, label %for.body.63, label %for.end.90

for.body.63:                                      ; preds = %for.cond.60
  %55 = load i32, i32* %b59, align 4
  %idxprom64 = zext i32 %55 to i64
  %56 = load i8*, i8** %src1.addr, align 8
  %arrayidx65 = getelementptr inbounds i8, i8* %56, i64 %idxprom64
  %57 = load i8, i8* %arrayidx65, align 1
  %conv66 = zext i8 %57 to i32
  %58 = load i32, i32* %b59, align 4
  %idxprom67 = zext i32 %58 to i64
  %59 = load i8*, i8** %src1.addr, align 8
  %arrayidx68 = getelementptr inbounds i8, i8* %59, i64 %idxprom67
  %60 = load i8, i8* %arrayidx68, align 1
  %conv69 = zext i8 %60 to i32
  %61 = load i8, i8* %blend151, align 1
  %conv70 = zext i8 %61 to i32
  %mul71 = mul nsw i32 %conv69, %conv70
  %62 = load i32, i32* %b59, align 4
  %idxprom72 = zext i32 %62 to i64
  %63 = load i8*, i8** %src2.addr, align 8
  %arrayidx73 = getelementptr inbounds i8, i8* %63, i64 %idxprom72
  %64 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %64 to i32
  %65 = load i8, i8* %blend.addr, align 1
  %conv75 = zext i8 %65 to i32
  %mul76 = mul nsw i32 %conv74, %conv75
  %add77 = add nsw i32 %mul71, %mul76
  %66 = load i32, i32* %b59, align 4
  %idxprom78 = zext i32 %66 to i64
  %67 = load i8*, i8** %src1.addr, align 8
  %arrayidx79 = getelementptr inbounds i8, i8* %67, i64 %idxprom78
  %68 = load i8, i8* %arrayidx79, align 1
  %conv80 = zext i8 %68 to i32
  %mul81 = mul nsw i32 %conv80, 255
  %sub82 = sub nsw i32 %add77, %mul81
  %div83 = sdiv i32 %sub82, 255
  %add84 = add nsw i32 %conv66, %div83
  %conv85 = trunc i32 %add84 to i8
  %69 = load i32, i32* %b59, align 4
  %idxprom86 = zext i32 %69 to i64
  %70 = load i8*, i8** %dest.addr, align 8
  %arrayidx87 = getelementptr inbounds i8, i8* %70, i64 %idxprom86
  store i8 %conv85, i8* %arrayidx87, align 1
  br label %for.inc.88

for.inc.88:                                       ; preds = %for.body.63
  %71 = load i32, i32* %b59, align 4
  %inc89 = add i32 %71, 1
  store i32 %inc89, i32* %b59, align 4
  br label %for.cond.60

for.end.90:                                       ; preds = %for.cond.60
  %72 = load i32, i32* %bytes.addr, align 4
  %73 = load i8*, i8** %src1.addr, align 8
  %idx.ext91 = zext i32 %72 to i64
  %add.ptr92 = getelementptr inbounds i8, i8* %73, i64 %idx.ext91
  store i8* %add.ptr92, i8** %src1.addr, align 8
  %74 = load i32, i32* %bytes.addr, align 4
  %75 = load i8*, i8** %src2.addr, align 8
  %idx.ext93 = zext i32 %74 to i64
  %add.ptr94 = getelementptr inbounds i8, i8* %75, i64 %idx.ext93
  store i8* %add.ptr94, i8** %src2.addr, align 8
  %76 = load i32, i32* %bytes.addr, align 4
  %77 = load i8*, i8** %dest.addr, align 8
  %idx.ext95 = zext i32 %76 to i64
  %add.ptr96 = getelementptr inbounds i8, i8* %77, i64 %idx.ext95
  store i8* %add.ptr96, i8** %dest.addr, align 8
  br label %while.cond.55

while.end.97:                                     ; preds = %while.cond.55
  br label %if.end.98

if.end.98:                                        ; preds = %while.end.97, %while.end
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define void @shade_pixels(i8* %src, i8* %dest, i8* %col, i8 zeroext %blend, i32 %w, i32 %bytes, i32 %has_alpha) #3 {
entry:
  %src.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %col.addr = alloca i8*, align 8
  %blend.addr = alloca i8, align 1
  %w.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %has_alpha.addr = alloca i32, align 4
  %blend2 = alloca i8, align 1
  %alpha = alloca i32, align 4
  %b = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %col, i8** %col.addr, align 8
  store i8 %blend, i8* %blend.addr, align 1
  store i32 %w, i32* %w.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  store i32 %has_alpha, i32* %has_alpha.addr, align 4
  %0 = load i8, i8* %blend.addr, align 1
  %conv = zext i8 %0 to i32
  %sub = sub nsw i32 255, %conv
  %conv1 = trunc i32 %sub to i8
  store i8 %conv1, i8* %blend2, align 1
  %1 = load i32, i32* %has_alpha.addr, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %bytes.addr, align 4
  %sub2 = sub i32 %2, 1
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %bytes.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub2, %cond.true ], [ %3, %cond.false ]
  store i32 %cond, i32* %alpha, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %4 = load i32, i32* %w.addr, align 4
  %dec = add i32 %4, -1
  store i32 %dec, i32* %w.addr, align 4
  %tobool3 = icmp ne i32 %4, 0
  br i1 %tobool3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %5 = load i32, i32* %b, align 4
  %6 = load i32, i32* %alpha, align 4
  %cmp = icmp ult i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %b, align 4
  %idxprom = zext i32 %7 to i64
  %8 = load i8*, i8** %src.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %8, i64 %idxprom
  %9 = load i8, i8* %arrayidx, align 1
  %conv5 = zext i8 %9 to i32
  %10 = load i8, i8* %blend2, align 1
  %conv6 = zext i8 %10 to i32
  %mul = mul nsw i32 %conv5, %conv6
  %11 = load i32, i32* %b, align 4
  %idxprom7 = zext i32 %11 to i64
  %12 = load i8*, i8** %col.addr, align 8
  %arrayidx8 = getelementptr inbounds i8, i8* %12, i64 %idxprom7
  %13 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %13 to i32
  %14 = load i8, i8* %blend.addr, align 1
  %conv10 = zext i8 %14 to i32
  %mul11 = mul nsw i32 %conv9, %conv10
  %add = add nsw i32 %mul, %mul11
  %div = sdiv i32 %add, 255
  %conv12 = trunc i32 %div to i8
  %15 = load i32, i32* %b, align 4
  %idxprom13 = zext i32 %15 to i64
  %16 = load i8*, i8** %dest.addr, align 8
  %arrayidx14 = getelementptr inbounds i8, i8* %16, i64 %idxprom13
  store i8 %conv12, i8* %arrayidx14, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %b, align 4
  %inc = add i32 %17, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load i32, i32* %has_alpha.addr, align 4
  %tobool15 = icmp ne i32 %18, 0
  br i1 %tobool15, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %19 = load i32, i32* %alpha, align 4
  %idxprom16 = zext i32 %19 to i64
  %20 = load i8*, i8** %src.addr, align 8
  %arrayidx17 = getelementptr inbounds i8, i8* %20, i64 %idxprom16
  %21 = load i8, i8* %arrayidx17, align 1
  %22 = load i32, i32* %alpha, align 4
  %idxprom18 = zext i32 %22 to i64
  %23 = load i8*, i8** %dest.addr, align 8
  %arrayidx19 = getelementptr inbounds i8, i8* %23, i64 %idxprom18
  store i8 %21, i8* %arrayidx19, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  %24 = load i32, i32* %bytes.addr, align 4
  %25 = load i8*, i8** %src.addr, align 8
  %idx.ext = zext i32 %24 to i64
  %add.ptr = getelementptr inbounds i8, i8* %25, i64 %idx.ext
  store i8* %add.ptr, i8** %src.addr, align 8
  %26 = load i32, i32* %bytes.addr, align 4
  %27 = load i8*, i8** %dest.addr, align 8
  %idx.ext20 = zext i32 %26 to i64
  %add.ptr21 = getelementptr inbounds i8, i8* %27, i64 %idx.ext20
  store i8* %add.ptr21, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define void @extract_alpha_pixels(i8* %src, i8* %mask, i8* %dest, i32 %w, i32 %bytes) #3 {
entry:
  %src.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %alpha = alloca i32, align 4
  %m = alloca i8*, align 8
  %tmp = alloca i32, align 4
  %tmp12 = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i32 %w, i32* %w.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %0 = load i32, i32* %bytes.addr, align 4
  %sub = sub i32 %0, 1
  store i32 %sub, i32* %alpha, align 4
  %1 = load i8*, i8** %mask.addr, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %mask.addr, align 8
  store i8* %2, i8** %m, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %3 = load i32, i32* %w.addr, align 4
  %dec = add i32 %3, -1
  store i32 %dec, i32* %w.addr, align 4
  %tobool1 = icmp ne i32 %3, 0
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %alpha, align 4
  %idxprom = zext i32 %4 to i64
  %5 = load i8*, i8** %src.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  %7 = load i8*, i8** %m, align 8
  %8 = load i8, i8* %7, align 1
  %conv2 = zext i8 %8 to i32
  %mul = mul nsw i32 %conv, %conv2
  %add = add nsw i32 %mul, 128
  store i32 %add, i32* %tmp, align 4
  %9 = load i32, i32* %tmp, align 4
  %shr = ashr i32 %9, 8
  %10 = load i32, i32* %tmp, align 4
  %add3 = add nsw i32 %shr, %10
  %shr4 = ashr i32 %add3, 8
  %conv5 = trunc i32 %shr4 to i8
  %11 = load i8*, i8** %dest.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr, i8** %dest.addr, align 8
  store i8 %conv5, i8* %11, align 1
  %12 = load i8*, i8** %m, align 8
  %incdec.ptr6 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr6, i8** %m, align 8
  %13 = load i32, i32* %bytes.addr, align 4
  %14 = load i8*, i8** %src.addr, align 8
  %idx.ext = zext i32 %13 to i64
  %add.ptr = getelementptr inbounds i8, i8* %14, i64 %idx.ext
  store i8* %add.ptr, i8** %src.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.else:                                          ; preds = %entry
  br label %while.cond.7

while.cond.7:                                     ; preds = %while.body.10, %if.else
  %15 = load i32, i32* %w.addr, align 4
  %dec8 = add i32 %15, -1
  store i32 %dec8, i32* %w.addr, align 4
  %tobool9 = icmp ne i32 %15, 0
  br i1 %tobool9, label %while.body.10, label %while.end.25

while.body.10:                                    ; preds = %while.cond.7
  %16 = load i32, i32* %alpha, align 4
  %idxprom13 = zext i32 %16 to i64
  %17 = load i8*, i8** %src.addr, align 8
  %arrayidx14 = getelementptr inbounds i8, i8* %17, i64 %idxprom13
  %18 = load i8, i8* %arrayidx14, align 1
  %conv15 = zext i8 %18 to i32
  %mul16 = mul nsw i32 %conv15, 255
  %add17 = add nsw i32 %mul16, 128
  store i32 %add17, i32* %tmp12, align 4
  %19 = load i32, i32* %tmp12, align 4
  %shr18 = ashr i32 %19, 8
  %20 = load i32, i32* %tmp12, align 4
  %add19 = add nsw i32 %shr18, %20
  %shr20 = ashr i32 %add19, 8
  %conv21 = trunc i32 %shr20 to i8
  %21 = load i8*, i8** %dest.addr, align 8
  %incdec.ptr22 = getelementptr inbounds i8, i8* %21, i32 1
  store i8* %incdec.ptr22, i8** %dest.addr, align 8
  store i8 %conv21, i8* %21, align 1
  %22 = load i32, i32* %bytes.addr, align 4
  %23 = load i8*, i8** %src.addr, align 8
  %idx.ext23 = zext i32 %22 to i64
  %add.ptr24 = getelementptr inbounds i8, i8* %23, i64 %idx.ext23
  store i8* %add.ptr24, i8** %src.addr, align 8
  br label %while.cond.7

while.end.25:                                     ; preds = %while.cond.7
  br label %if.end

if.end:                                           ; preds = %while.end.25, %while.end
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define void @swap_pixels(i8* %src, i8* %dest, i32 %length) #3 {
entry:
  %src.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %length.addr = alloca i32, align 4
  %tmp = alloca i8, align 1
  store i8* %src, i8** %src.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %length.addr, align 4
  %dec = add i32 %0, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %dest.addr, align 8
  %2 = load i8, i8* %1, align 1
  store i8 %2, i8* %tmp, align 1
  %3 = load i8*, i8** %src.addr, align 8
  %4 = load i8, i8* %3, align 1
  %5 = load i8*, i8** %dest.addr, align 8
  store i8 %4, i8* %5, align 1
  %6 = load i8, i8* %tmp, align 1
  %7 = load i8*, i8** %src.addr, align 8
  store i8 %6, i8* %7, align 1
  %8 = load i8*, i8** %src.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr, i8** %src.addr, align 8
  %9 = load i8*, i8** %dest.addr, align 8
  %incdec.ptr1 = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr1, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define void @scale_pixels(i8* %src, i8* %dest, i32 %length, i32 %scale) #3 {
entry:
  %src.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %length.addr = alloca i32, align 4
  %scale.addr = alloca i32, align 4
  %tmp = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store i32 %scale, i32* %scale.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %length.addr, align 4
  %dec = add i32 %0, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %src.addr, align 8
  %2 = load i8, i8* %1, align 1
  %conv = zext i8 %2 to i32
  %3 = load i32, i32* %scale.addr, align 4
  %mul = mul nsw i32 %conv, %3
  %add = add nsw i32 %mul, 128
  store i32 %add, i32* %tmp, align 4
  %4 = load i32, i32* %tmp, align 4
  %shr = ashr i32 %4, 8
  %5 = load i32, i32* %tmp, align 4
  %add1 = add nsw i32 %shr, %5
  %shr2 = ashr i32 %add1, 8
  %conv3 = trunc i32 %shr2 to i8
  %6 = load i8*, i8** %dest.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %dest.addr, align 8
  store i8 %conv3, i8* %6, align 1
  %7 = load i8*, i8** %src.addr, align 8
  %incdec.ptr4 = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr4, i8** %src.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define void @add_alpha_pixels(i8* %src, i8* %dest, i32 %length, i32 %bytes) #3 {
entry:
  %src.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %length.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %alpha = alloca i32, align 4
  %b = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %0 = load i32, i32* %bytes.addr, align 4
  %add = add i32 %0, 1
  store i32 %add, i32* %alpha, align 4
  br label %while.cond

while.cond:                                       ; preds = %for.end, %entry
  %1 = load i32, i32* %length.addr, align 4
  %dec = add i32 %1, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %2 = load i32, i32* %b, align 4
  %3 = load i32, i32* %bytes.addr, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %b, align 4
  %idxprom = zext i32 %4 to i64
  %5 = load i8*, i8** %src.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %7 = load i32, i32* %b, align 4
  %idxprom1 = zext i32 %7 to i64
  %8 = load i8*, i8** %dest.addr, align 8
  %arrayidx2 = getelementptr inbounds i8, i8* %8, i64 %idxprom1
  store i8 %6, i8* %arrayidx2, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %b, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i32, i32* %b, align 4
  %idxprom3 = zext i32 %10 to i64
  %11 = load i8*, i8** %dest.addr, align 8
  %arrayidx4 = getelementptr inbounds i8, i8* %11, i64 %idxprom3
  store i8 -1, i8* %arrayidx4, align 1
  %12 = load i32, i32* %bytes.addr, align 4
  %13 = load i8*, i8** %src.addr, align 8
  %idx.ext = zext i32 %12 to i64
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 %idx.ext
  store i8* %add.ptr, i8** %src.addr, align 8
  %14 = load i32, i32* %alpha, align 4
  %15 = load i8*, i8** %dest.addr, align 8
  %idx.ext5 = zext i32 %14 to i64
  %add.ptr6 = getelementptr inbounds i8, i8* %15, i64 %idx.ext5
  store i8* %add.ptr6, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define void @flatten_pixels(i8* %src, i8* %dest, i8* %bg, i32 %length, i32 %bytes) #3 {
entry:
  %src.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %bg.addr = alloca i8*, align 8
  %length.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %alpha = alloca i32, align 4
  %b = alloca i32, align 4
  %t1 = alloca i32, align 4
  %t2 = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %bg, i8** %bg.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %0 = load i32, i32* %bytes.addr, align 4
  %sub = sub i32 %0, 1
  store i32 %sub, i32* %alpha, align 4
  br label %while.cond

while.cond:                                       ; preds = %for.end, %entry
  %1 = load i32, i32* %length.addr, align 4
  %dec = add i32 %1, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %2 = load i32, i32* %b, align 4
  %3 = load i32, i32* %alpha, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %b, align 4
  %idxprom = zext i32 %4 to i64
  %5 = load i8*, i8** %src.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  %7 = load i32, i32* %alpha, align 4
  %idxprom1 = zext i32 %7 to i64
  %8 = load i8*, i8** %src.addr, align 8
  %arrayidx2 = getelementptr inbounds i8, i8* %8, i64 %idxprom1
  %9 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %9 to i32
  %mul = mul nsw i32 %conv, %conv3
  %add = add nsw i32 %mul, 128
  store i32 %add, i32* %t1, align 4
  %10 = load i32, i32* %t1, align 4
  %shr = ashr i32 %10, 8
  %11 = load i32, i32* %t1, align 4
  %add4 = add nsw i32 %shr, %11
  %shr5 = ashr i32 %add4, 8
  %12 = load i32, i32* %b, align 4
  %idxprom6 = zext i32 %12 to i64
  %13 = load i8*, i8** %bg.addr, align 8
  %arrayidx7 = getelementptr inbounds i8, i8* %13, i64 %idxprom6
  %14 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %14 to i32
  %15 = load i32, i32* %alpha, align 4
  %idxprom9 = zext i32 %15 to i64
  %16 = load i8*, i8** %src.addr, align 8
  %arrayidx10 = getelementptr inbounds i8, i8* %16, i64 %idxprom9
  %17 = load i8, i8* %arrayidx10, align 1
  %conv11 = zext i8 %17 to i32
  %sub12 = sub nsw i32 255, %conv11
  %mul13 = mul nsw i32 %conv8, %sub12
  %add14 = add nsw i32 %mul13, 128
  store i32 %add14, i32* %t2, align 4
  %18 = load i32, i32* %t2, align 4
  %shr15 = ashr i32 %18, 8
  %19 = load i32, i32* %t2, align 4
  %add16 = add nsw i32 %shr15, %19
  %shr17 = ashr i32 %add16, 8
  %add18 = add nsw i32 %shr5, %shr17
  %conv19 = trunc i32 %add18 to i8
  %20 = load i32, i32* %b, align 4
  %idxprom20 = zext i32 %20 to i64
  %21 = load i8*, i8** %dest.addr, align 8
  %arrayidx21 = getelementptr inbounds i8, i8* %21, i64 %idxprom20
  store i8 %conv19, i8* %arrayidx21, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %b, align 4
  %inc = add i32 %22, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %23 = load i32, i32* %bytes.addr, align 4
  %24 = load i8*, i8** %src.addr, align 8
  %idx.ext = zext i32 %23 to i64
  %add.ptr = getelementptr inbounds i8, i8* %24, i64 %idx.ext
  store i8* %add.ptr, i8** %src.addr, align 8
  %25 = load i32, i32* %alpha, align 4
  %26 = load i8*, i8** %dest.addr, align 8
  %idx.ext22 = zext i32 %25 to i64
  %add.ptr23 = getelementptr inbounds i8, i8* %26, i64 %idx.ext22
  store i8* %add.ptr23, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define void @gray_to_rgb_pixels(i8* %src, i8* %dest, i32 %length, i32 %bytes) #3 {
entry:
  %src.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %length.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %has_alpha = alloca i32, align 4
  %dest_bytes = alloca i32, align 4
  %b = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %0 = load i32, i32* %bytes.addr, align 4
  %cmp = icmp eq i32 %0, 2
  %cond = select i1 %cmp, i32 1, i32 0
  store i32 %cond, i32* %has_alpha, align 4
  %1 = load i32, i32* %has_alpha, align 4
  %tobool = icmp ne i32 %1, 0
  %cond1 = select i1 %tobool, i32 4, i32 3
  store i32 %cond1, i32* %dest_bytes, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %2 = load i32, i32* %length.addr, align 4
  %dec = add i32 %2, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool2 = icmp ne i32 %2, 0
  br i1 %tobool2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %3 = load i32, i32* %b, align 4
  %4 = load i32, i32* %bytes.addr, align 4
  %cmp3 = icmp ult i32 %3, %4
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i8*, i8** %src.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 0
  %6 = load i8, i8* %arrayidx, align 1
  %7 = load i32, i32* %b, align 4
  %idxprom = zext i32 %7 to i64
  %8 = load i8*, i8** %dest.addr, align 8
  %arrayidx4 = getelementptr inbounds i8, i8* %8, i64 %idxprom
  store i8 %6, i8* %arrayidx4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %b, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i32, i32* %has_alpha, align 4
  %tobool5 = icmp ne i32 %10, 0
  br i1 %tobool5, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %11 = load i8*, i8** %src.addr, align 8
  %arrayidx6 = getelementptr inbounds i8, i8* %11, i64 1
  %12 = load i8, i8* %arrayidx6, align 1
  %13 = load i8*, i8** %dest.addr, align 8
  %arrayidx7 = getelementptr inbounds i8, i8* %13, i64 3
  store i8 %12, i8* %arrayidx7, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  %14 = load i32, i32* %bytes.addr, align 4
  %15 = load i8*, i8** %src.addr, align 8
  %idx.ext = zext i32 %14 to i64
  %add.ptr = getelementptr inbounds i8, i8* %15, i64 %idx.ext
  store i8* %add.ptr, i8** %src.addr, align 8
  %16 = load i32, i32* %dest_bytes, align 4
  %17 = load i8*, i8** %dest.addr, align 8
  %idx.ext8 = sext i32 %16 to i64
  %add.ptr9 = getelementptr inbounds i8, i8* %17, i64 %idx.ext8
  store i8* %add.ptr9, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define void @apply_mask_to_alpha_channel(i8* %src, i8* %mask, i32 %opacity, i32 %length, i32 %bytes) #3 {
entry:
  %src.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %opacity.addr = alloca i32, align 4
  %length.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %tmp = alloca i64, align 8
  %tmp13 = alloca i64, align 8
  store i8* %src, i8** %src.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %0 = load i32, i32* %bytes.addr, align 4
  %sub = sub i32 %0, 1
  %1 = load i8*, i8** %src.addr, align 8
  %idx.ext = zext i32 %sub to i64
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %idx.ext
  store i8* %add.ptr, i8** %src.addr, align 8
  %2 = load i32, i32* %opacity.addr, align 4
  %cmp = icmp eq i32 %2, 255
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %3 = load i32, i32* %length.addr, align 4
  %dec = add i32 %3, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %src.addr, align 8
  %5 = load i8, i8* %4, align 1
  %conv = zext i8 %5 to i32
  %6 = load i8*, i8** %mask.addr, align 8
  %7 = load i8, i8* %6, align 1
  %conv1 = zext i8 %7 to i32
  %mul = mul nsw i32 %conv, %conv1
  %add = add nsw i32 %mul, 128
  %conv2 = sext i32 %add to i64
  store i64 %conv2, i64* %tmp, align 8
  %8 = load i64, i64* %tmp, align 8
  %shr = ashr i64 %8, 8
  %9 = load i64, i64* %tmp, align 8
  %add3 = add nsw i64 %shr, %9
  %shr4 = ashr i64 %add3, 8
  %conv5 = trunc i64 %shr4 to i8
  %10 = load i8*, i8** %src.addr, align 8
  store i8 %conv5, i8* %10, align 1
  %11 = load i8*, i8** %mask.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr, i8** %mask.addr, align 8
  %12 = load i32, i32* %bytes.addr, align 4
  %13 = load i8*, i8** %src.addr, align 8
  %idx.ext6 = zext i32 %12 to i64
  %add.ptr7 = getelementptr inbounds i8, i8* %13, i64 %idx.ext6
  store i8* %add.ptr7, i8** %src.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.else:                                          ; preds = %entry
  br label %while.cond.8

while.cond.8:                                     ; preds = %while.body.11, %if.else
  %14 = load i32, i32* %length.addr, align 4
  %dec9 = add i32 %14, -1
  store i32 %dec9, i32* %length.addr, align 4
  %tobool10 = icmp ne i32 %14, 0
  br i1 %tobool10, label %while.body.11, label %while.end.27

while.body.11:                                    ; preds = %while.cond.8
  %15 = load i8*, i8** %src.addr, align 8
  %16 = load i8, i8* %15, align 1
  %conv14 = zext i8 %16 to i32
  %17 = load i8*, i8** %mask.addr, align 8
  %18 = load i8, i8* %17, align 1
  %conv15 = zext i8 %18 to i32
  %mul16 = mul nsw i32 %conv14, %conv15
  %19 = load i32, i32* %opacity.addr, align 4
  %mul17 = mul i32 %mul16, %19
  %add18 = add i32 %mul17, 32603
  %conv19 = zext i32 %add18 to i64
  store i64 %conv19, i64* %tmp13, align 8
  %20 = load i64, i64* %tmp13, align 8
  %shr20 = ashr i64 %20, 7
  %21 = load i64, i64* %tmp13, align 8
  %add21 = add nsw i64 %shr20, %21
  %shr22 = ashr i64 %add21, 16
  %conv23 = trunc i64 %shr22 to i8
  %22 = load i8*, i8** %src.addr, align 8
  store i8 %conv23, i8* %22, align 1
  %23 = load i8*, i8** %mask.addr, align 8
  %incdec.ptr24 = getelementptr inbounds i8, i8* %23, i32 1
  store i8* %incdec.ptr24, i8** %mask.addr, align 8
  %24 = load i32, i32* %bytes.addr, align 4
  %25 = load i8*, i8** %src.addr, align 8
  %idx.ext25 = zext i32 %24 to i64
  %add.ptr26 = getelementptr inbounds i8, i8* %25, i64 %idx.ext25
  store i8* %add.ptr26, i8** %src.addr, align 8
  br label %while.cond.8

while.end.27:                                     ; preds = %while.cond.8
  br label %if.end

if.end:                                           ; preds = %while.end.27, %while.end
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define void @combine_mask_and_alpha_channel_stipple(i8* %src, i8* %mask, i32 %opacity, i32 %length, i32 %bytes) #3 {
entry:
  %src.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %opacity.addr = alloca i32, align 4
  %length.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %tmp = alloca i32, align 4
  %mask_val = alloca i32, align 4
  %tmp21 = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %0 = load i32, i32* %bytes.addr, align 4
  %sub = sub i32 %0, 1
  %1 = load i8*, i8** %src.addr, align 8
  %idx.ext = zext i32 %sub to i64
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %idx.ext
  store i8* %add.ptr, i8** %src.addr, align 8
  %2 = load i32, i32* %opacity.addr, align 4
  %cmp = icmp ne i32 %2, 255
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %3 = load i32, i32* %length.addr, align 4
  %dec = add i32 %3, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %mask.addr, align 8
  %5 = load i8, i8* %4, align 1
  %conv = zext i8 %5 to i32
  %6 = load i32, i32* %opacity.addr, align 4
  %mul = mul i32 %conv, %6
  %add = add i32 %mul, 128
  store i32 %add, i32* %tmp, align 4
  %7 = load i32, i32* %tmp, align 4
  %shr = ashr i32 %7, 8
  %8 = load i32, i32* %tmp, align 4
  %add2 = add nsw i32 %shr, %8
  %shr3 = ashr i32 %add2, 8
  store i32 %shr3, i32* %mask_val, align 4
  %9 = load i8*, i8** %src.addr, align 8
  %10 = load i8, i8* %9, align 1
  %conv4 = zext i8 %10 to i32
  %11 = load i8*, i8** %src.addr, align 8
  %12 = load i8, i8* %11, align 1
  %conv5 = zext i8 %12 to i32
  %sub6 = sub nsw i32 255, %conv5
  %13 = load i32, i32* %mask_val, align 4
  %mul7 = mul nsw i32 %sub6, %13
  %add8 = add nsw i32 %mul7, 128
  store i32 %add8, i32* %tmp, align 4
  %14 = load i32, i32* %tmp, align 4
  %shr9 = ashr i32 %14, 8
  %15 = load i32, i32* %tmp, align 4
  %add10 = add nsw i32 %shr9, %15
  %shr11 = ashr i32 %add10, 8
  %add12 = add nsw i32 %conv4, %shr11
  %conv13 = trunc i32 %add12 to i8
  %16 = load i8*, i8** %src.addr, align 8
  store i8 %conv13, i8* %16, align 1
  %17 = load i32, i32* %bytes.addr, align 4
  %18 = load i8*, i8** %src.addr, align 8
  %idx.ext14 = zext i32 %17 to i64
  %add.ptr15 = getelementptr inbounds i8, i8* %18, i64 %idx.ext14
  store i8* %add.ptr15, i8** %src.addr, align 8
  %19 = load i8*, i8** %mask.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %19, i32 1
  store i8* %incdec.ptr, i8** %mask.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.else:                                          ; preds = %entry
  br label %while.cond.16

while.cond.16:                                    ; preds = %while.body.19, %if.else
  %20 = load i32, i32* %length.addr, align 4
  %dec17 = add i32 %20, -1
  store i32 %dec17, i32* %length.addr, align 4
  %tobool18 = icmp ne i32 %20, 0
  br i1 %tobool18, label %while.body.19, label %while.end.36

while.body.19:                                    ; preds = %while.cond.16
  %21 = load i8*, i8** %src.addr, align 8
  %22 = load i8, i8* %21, align 1
  %conv22 = zext i8 %22 to i32
  %23 = load i8*, i8** %src.addr, align 8
  %24 = load i8, i8* %23, align 1
  %conv23 = zext i8 %24 to i32
  %sub24 = sub nsw i32 255, %conv23
  %25 = load i8*, i8** %mask.addr, align 8
  %26 = load i8, i8* %25, align 1
  %conv25 = zext i8 %26 to i32
  %mul26 = mul nsw i32 %sub24, %conv25
  %add27 = add nsw i32 %mul26, 128
  store i32 %add27, i32* %tmp21, align 4
  %27 = load i32, i32* %tmp21, align 4
  %shr28 = ashr i32 %27, 8
  %28 = load i32, i32* %tmp21, align 4
  %add29 = add nsw i32 %shr28, %28
  %shr30 = ashr i32 %add29, 8
  %add31 = add nsw i32 %conv22, %shr30
  %conv32 = trunc i32 %add31 to i8
  %29 = load i8*, i8** %src.addr, align 8
  store i8 %conv32, i8* %29, align 1
  %30 = load i32, i32* %bytes.addr, align 4
  %31 = load i8*, i8** %src.addr, align 8
  %idx.ext33 = zext i32 %30 to i64
  %add.ptr34 = getelementptr inbounds i8, i8* %31, i64 %idx.ext33
  store i8* %add.ptr34, i8** %src.addr, align 8
  %32 = load i8*, i8** %mask.addr, align 8
  %incdec.ptr35 = getelementptr inbounds i8, i8* %32, i32 1
  store i8* %incdec.ptr35, i8** %mask.addr, align 8
  br label %while.cond.16

while.end.36:                                     ; preds = %while.cond.16
  br label %if.end

if.end:                                           ; preds = %while.end.36, %while.end
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define void @combine_mask_and_alpha_channel_stroke(i8* %src, i8* %mask, i32 %opacity, i32 %length, i32 %bytes) #3 {
entry:
  %src.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %opacity.addr = alloca i32, align 4
  %length.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %tmp = alloca i32, align 4
  %mask_val = alloca i32, align 4
  %tmp25 = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %0 = load i32, i32* %bytes.addr, align 4
  %sub = sub i32 %0, 1
  %1 = load i8*, i8** %src.addr, align 8
  %idx.ext = zext i32 %sub to i64
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %idx.ext
  store i8* %add.ptr, i8** %src.addr, align 8
  %2 = load i32, i32* %opacity.addr, align 4
  %cmp = icmp ne i32 %2, 255
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.then
  %3 = load i32, i32* %length.addr, align 4
  %dec = add i32 %3, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %opacity.addr, align 4
  %5 = load i8*, i8** %src.addr, align 8
  %6 = load i8, i8* %5, align 1
  %conv = zext i8 %6 to i32
  %cmp1 = icmp ugt i32 %4, %conv
  br i1 %cmp1, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %while.body
  %7 = load i8*, i8** %mask.addr, align 8
  %8 = load i8, i8* %7, align 1
  %conv5 = zext i8 %8 to i32
  %9 = load i32, i32* %opacity.addr, align 4
  %mul = mul i32 %conv5, %9
  %add = add i32 %mul, 128
  store i32 %add, i32* %tmp, align 4
  %10 = load i32, i32* %tmp, align 4
  %shr = ashr i32 %10, 8
  %11 = load i32, i32* %tmp, align 4
  %add6 = add nsw i32 %shr, %11
  %shr7 = ashr i32 %add6, 8
  store i32 %shr7, i32* %mask_val, align 4
  %12 = load i8*, i8** %src.addr, align 8
  %13 = load i8, i8* %12, align 1
  %conv8 = zext i8 %13 to i32
  %14 = load i32, i32* %opacity.addr, align 4
  %15 = load i8*, i8** %src.addr, align 8
  %16 = load i8, i8* %15, align 1
  %conv9 = zext i8 %16 to i32
  %sub10 = sub i32 %14, %conv9
  %17 = load i32, i32* %mask_val, align 4
  %mul11 = mul i32 %sub10, %17
  %add12 = add i32 %mul11, 128
  store i32 %add12, i32* %tmp, align 4
  %18 = load i32, i32* %tmp, align 4
  %shr13 = ashr i32 %18, 8
  %19 = load i32, i32* %tmp, align 4
  %add14 = add nsw i32 %shr13, %19
  %shr15 = ashr i32 %add14, 8
  %add16 = add nsw i32 %conv8, %shr15
  %conv17 = trunc i32 %add16 to i8
  %20 = load i8*, i8** %src.addr, align 8
  store i8 %conv17, i8* %20, align 1
  br label %if.end

if.end:                                           ; preds = %if.then.3, %while.body
  %21 = load i32, i32* %bytes.addr, align 4
  %22 = load i8*, i8** %src.addr, align 8
  %idx.ext18 = zext i32 %21 to i64
  %add.ptr19 = getelementptr inbounds i8, i8* %22, i64 %idx.ext18
  store i8* %add.ptr19, i8** %src.addr, align 8
  %23 = load i8*, i8** %mask.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %23, i32 1
  store i8* %incdec.ptr, i8** %mask.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.41

if.else:                                          ; preds = %entry
  br label %while.cond.20

while.cond.20:                                    ; preds = %while.body.23, %if.else
  %24 = load i32, i32* %length.addr, align 4
  %dec21 = add i32 %24, -1
  store i32 %dec21, i32* %length.addr, align 4
  %tobool22 = icmp ne i32 %24, 0
  br i1 %tobool22, label %while.body.23, label %while.end.40

while.body.23:                                    ; preds = %while.cond.20
  %25 = load i8*, i8** %src.addr, align 8
  %26 = load i8, i8* %25, align 1
  %conv26 = zext i8 %26 to i32
  %27 = load i8*, i8** %src.addr, align 8
  %28 = load i8, i8* %27, align 1
  %conv27 = zext i8 %28 to i32
  %sub28 = sub nsw i32 255, %conv27
  %29 = load i8*, i8** %mask.addr, align 8
  %30 = load i8, i8* %29, align 1
  %conv29 = zext i8 %30 to i32
  %mul30 = mul nsw i32 %sub28, %conv29
  %add31 = add nsw i32 %mul30, 128
  store i32 %add31, i32* %tmp25, align 4
  %31 = load i32, i32* %tmp25, align 4
  %shr32 = ashr i32 %31, 8
  %32 = load i32, i32* %tmp25, align 4
  %add33 = add nsw i32 %shr32, %32
  %shr34 = ashr i32 %add33, 8
  %add35 = add nsw i32 %conv26, %shr34
  %conv36 = trunc i32 %add35 to i8
  %33 = load i8*, i8** %src.addr, align 8
  store i8 %conv36, i8* %33, align 1
  %34 = load i32, i32* %bytes.addr, align 4
  %35 = load i8*, i8** %src.addr, align 8
  %idx.ext37 = zext i32 %34 to i64
  %add.ptr38 = getelementptr inbounds i8, i8* %35, i64 %idx.ext37
  store i8* %add.ptr38, i8** %src.addr, align 8
  %36 = load i8*, i8** %mask.addr, align 8
  %incdec.ptr39 = getelementptr inbounds i8, i8* %36, i32 1
  store i8* %incdec.ptr39, i8** %mask.addr, align 8
  br label %while.cond.20

while.end.40:                                     ; preds = %while.cond.20
  br label %if.end.41

if.end.41:                                        ; preds = %while.end.40, %while.end
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define void @copy_gray_to_inten_a_pixels(i8* %src, i8* %dest, i32 %length, i32 %bytes) #3 {
entry:
  %src.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %length.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %alpha = alloca i32, align 4
  %b = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %0 = load i32, i32* %bytes.addr, align 4
  %sub = sub i32 %0, 1
  store i32 %sub, i32* %alpha, align 4
  br label %while.cond

while.cond:                                       ; preds = %for.end, %entry
  %1 = load i32, i32* %length.addr, align 4
  %dec = add i32 %1, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %2 = load i32, i32* %b, align 4
  %3 = load i32, i32* %alpha, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %src.addr, align 8
  %5 = load i8, i8* %4, align 1
  %6 = load i32, i32* %b, align 4
  %idxprom = zext i32 %6 to i64
  %7 = load i8*, i8** %dest.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %7, i64 %idxprom
  store i8 %5, i8* %arrayidx, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %b, align 4
  %inc = add i32 %8, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load i32, i32* %b, align 4
  %idxprom1 = zext i32 %9 to i64
  %10 = load i8*, i8** %dest.addr, align 8
  %arrayidx2 = getelementptr inbounds i8, i8* %10, i64 %idxprom1
  store i8 -1, i8* %arrayidx2, align 1
  %11 = load i8*, i8** %src.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr, i8** %src.addr, align 8
  %12 = load i32, i32* %bytes.addr, align 4
  %13 = load i8*, i8** %dest.addr, align 8
  %idx.ext = zext i32 %12 to i64
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 %idx.ext
  store i8* %add.ptr, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define void @initial_channel_pixels(i8* %src, i8* %dest, i32 %length, i32 %bytes) #3 {
entry:
  %src.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %length.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %alpha = alloca i32, align 4
  %b = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %0 = load i32, i32* %bytes.addr, align 4
  %sub = sub i32 %0, 1
  store i32 %sub, i32* %alpha, align 4
  br label %while.cond

while.cond:                                       ; preds = %for.end, %entry
  %1 = load i32, i32* %length.addr, align 4
  %dec = add i32 %1, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %2 = load i32, i32* %b, align 4
  %3 = load i32, i32* %alpha, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %src.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 0
  %5 = load i8, i8* %arrayidx, align 1
  %6 = load i32, i32* %b, align 4
  %idxprom = zext i32 %6 to i64
  %7 = load i8*, i8** %dest.addr, align 8
  %arrayidx1 = getelementptr inbounds i8, i8* %7, i64 %idxprom
  store i8 %5, i8* %arrayidx1, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %b, align 4
  %inc = add i32 %8, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load i32, i32* %alpha, align 4
  %idxprom2 = zext i32 %9 to i64
  %10 = load i8*, i8** %dest.addr, align 8
  %arrayidx3 = getelementptr inbounds i8, i8* %10, i64 %idxprom2
  store i8 -1, i8* %arrayidx3, align 1
  %11 = load i32, i32* %bytes.addr, align 4
  %12 = load i8*, i8** %dest.addr, align 8
  %idx.ext = zext i32 %11 to i64
  %add.ptr = getelementptr inbounds i8, i8* %12, i64 %idx.ext
  store i8* %add.ptr, i8** %dest.addr, align 8
  %13 = load i8*, i8** %src.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %13, i32 1
  store i8* %incdec.ptr, i8** %src.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define void @initial_indexed_pixels(i8* %src, i8* %dest, i8* %cmap, i32 %length) #3 {
entry:
  %src.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %cmap.addr = alloca i8*, align 8
  %length.addr = alloca i32, align 4
  %col_index = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %cmap, i8** %cmap.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %length.addr, align 4
  %dec = add i32 %0, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %src.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %1, i32 1
  store i8* %incdec.ptr, i8** %src.addr, align 8
  %2 = load i8, i8* %1, align 1
  %conv = zext i8 %2 to i32
  %mul = mul nsw i32 %conv, 3
  store i32 %mul, i32* %col_index, align 4
  %3 = load i32, i32* %col_index, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %col_index, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load i8*, i8** %cmap.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %5 = load i8, i8* %arrayidx, align 1
  %6 = load i8*, i8** %dest.addr, align 8
  %incdec.ptr1 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr1, i8** %dest.addr, align 8
  store i8 %5, i8* %6, align 1
  %7 = load i32, i32* %col_index, align 4
  %inc2 = add nsw i32 %7, 1
  store i32 %inc2, i32* %col_index, align 4
  %idxprom3 = sext i32 %7 to i64
  %8 = load i8*, i8** %cmap.addr, align 8
  %arrayidx4 = getelementptr inbounds i8, i8* %8, i64 %idxprom3
  %9 = load i8, i8* %arrayidx4, align 1
  %10 = load i8*, i8** %dest.addr, align 8
  %incdec.ptr5 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr5, i8** %dest.addr, align 8
  store i8 %9, i8* %10, align 1
  %11 = load i32, i32* %col_index, align 4
  %inc6 = add nsw i32 %11, 1
  store i32 %inc6, i32* %col_index, align 4
  %idxprom7 = sext i32 %11 to i64
  %12 = load i8*, i8** %cmap.addr, align 8
  %arrayidx8 = getelementptr inbounds i8, i8* %12, i64 %idxprom7
  %13 = load i8, i8* %arrayidx8, align 1
  %14 = load i8*, i8** %dest.addr, align 8
  %incdec.ptr9 = getelementptr inbounds i8, i8* %14, i32 1
  store i8* %incdec.ptr9, i8** %dest.addr, align 8
  store i8 %13, i8* %14, align 1
  %15 = load i8*, i8** %dest.addr, align 8
  %incdec.ptr10 = getelementptr inbounds i8, i8* %15, i32 1
  store i8* %incdec.ptr10, i8** %dest.addr, align 8
  store i8 -1, i8* %15, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define void @initial_indexed_a_pixels(i8* %src, i8* %dest, i8* %mask, i8* %no_mask, i8* %cmap, i32 %opacity, i32 %length) #3 {
entry:
  %src.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %no_mask.addr = alloca i8*, align 8
  %cmap.addr = alloca i8*, align 8
  %opacity.addr = alloca i32, align 4
  %length.addr = alloca i32, align 4
  %m = alloca i8*, align 8
  %col_index = alloca i32, align 4
  %tmp = alloca i64, align 8
  %new_alpha = alloca i8, align 1
  store i8* %src, i8** %src.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store i8* %no_mask, i8** %no_mask.addr, align 8
  store i8* %cmap, i8** %cmap.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32 %length, i32* %length.addr, align 4
  %0 = load i8*, i8** %mask.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i8*, i8** %mask.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load i8*, i8** %no_mask.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %1, %cond.true ], [ %2, %cond.false ]
  store i8* %cond, i8** %m, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %3 = load i32, i32* %length.addr, align 4
  %dec = add i32 %3, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool1 = icmp ne i32 %3, 0
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %src.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %src.addr, align 8
  %5 = load i8, i8* %4, align 1
  %conv = zext i8 %5 to i32
  %mul = mul nsw i32 %conv, 3
  store i32 %mul, i32* %col_index, align 4
  %6 = load i8*, i8** %src.addr, align 8
  %7 = load i8, i8* %6, align 1
  %conv3 = zext i8 %7 to i32
  %8 = load i8*, i8** %m, align 8
  %9 = load i8, i8* %8, align 1
  %conv4 = zext i8 %9 to i32
  %mul5 = mul nsw i32 %conv3, %conv4
  %10 = load i32, i32* %opacity.addr, align 4
  %mul6 = mul i32 %mul5, %10
  %add = add i32 %mul6, 32603
  %conv7 = zext i32 %add to i64
  store i64 %conv7, i64* %tmp, align 8
  %11 = load i64, i64* %tmp, align 8
  %shr = ashr i64 %11, 7
  %12 = load i64, i64* %tmp, align 8
  %add8 = add nsw i64 %shr, %12
  %shr9 = ashr i64 %add8, 16
  %conv10 = trunc i64 %shr9 to i8
  store i8 %conv10, i8* %new_alpha, align 1
  %13 = load i8*, i8** %src.addr, align 8
  %incdec.ptr11 = getelementptr inbounds i8, i8* %13, i32 1
  store i8* %incdec.ptr11, i8** %src.addr, align 8
  %14 = load i32, i32* %col_index, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %col_index, align 4
  %idxprom = sext i32 %14 to i64
  %15 = load i8*, i8** %cmap.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %15, i64 %idxprom
  %16 = load i8, i8* %arrayidx, align 1
  %17 = load i8*, i8** %dest.addr, align 8
  %incdec.ptr12 = getelementptr inbounds i8, i8* %17, i32 1
  store i8* %incdec.ptr12, i8** %dest.addr, align 8
  store i8 %16, i8* %17, align 1
  %18 = load i32, i32* %col_index, align 4
  %inc13 = add nsw i32 %18, 1
  store i32 %inc13, i32* %col_index, align 4
  %idxprom14 = sext i32 %18 to i64
  %19 = load i8*, i8** %cmap.addr, align 8
  %arrayidx15 = getelementptr inbounds i8, i8* %19, i64 %idxprom14
  %20 = load i8, i8* %arrayidx15, align 1
  %21 = load i8*, i8** %dest.addr, align 8
  %incdec.ptr16 = getelementptr inbounds i8, i8* %21, i32 1
  store i8* %incdec.ptr16, i8** %dest.addr, align 8
  store i8 %20, i8* %21, align 1
  %22 = load i32, i32* %col_index, align 4
  %inc17 = add nsw i32 %22, 1
  store i32 %inc17, i32* %col_index, align 4
  %idxprom18 = sext i32 %22 to i64
  %23 = load i8*, i8** %cmap.addr, align 8
  %arrayidx19 = getelementptr inbounds i8, i8* %23, i64 %idxprom18
  %24 = load i8, i8* %arrayidx19, align 1
  %25 = load i8*, i8** %dest.addr, align 8
  %incdec.ptr20 = getelementptr inbounds i8, i8* %25, i32 1
  store i8* %incdec.ptr20, i8** %dest.addr, align 8
  store i8 %24, i8* %25, align 1
  %26 = load i8, i8* %new_alpha, align 1
  %conv21 = zext i8 %26 to i32
  %cmp = icmp sgt i32 %conv21, 127
  %cond23 = select i1 %cmp, i32 255, i32 0
  %conv24 = trunc i32 %cond23 to i8
  %27 = load i8*, i8** %dest.addr, align 8
  %incdec.ptr25 = getelementptr inbounds i8, i8* %27, i32 1
  store i8* %incdec.ptr25, i8** %dest.addr, align 8
  store i8 %conv24, i8* %27, align 1
  %28 = load i8*, i8** %mask.addr, align 8
  %tobool26 = icmp ne i8* %28, null
  br i1 %tobool26, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %29 = load i8*, i8** %m, align 8
  %incdec.ptr27 = getelementptr inbounds i8, i8* %29, i32 1
  store i8* %incdec.ptr27, i8** %m, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define void @initial_inten_pixels(i8* %src, i8* %dest, i8* %mask, i8* %no_mask, i32 %opacity, i32* %affect, i32 %length, i32 %bytes) #3 {
entry:
  %src.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %no_mask.addr = alloca i8*, align 8
  %opacity.addr = alloca i32, align 4
  %affect.addr = alloca i32*, align 8
  %length.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %srcp = alloca i8*, align 8
  %dest_bytes = alloca i32, align 4
  %destp = alloca i8*, align 8
  %b = alloca i32, align 4
  %l = alloca i32, align 4
  %m = alloca i8*, align 8
  %tmp = alloca i32, align 4
  %tmp92 = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store i8* %no_mask, i8** %no_mask.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32* %affect, i32** %affect.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %0 = load i32, i32* %bytes.addr, align 4
  %add = add i32 %0, 1
  store i32 %add, i32* %dest_bytes, align 4
  %1 = load i8*, i8** %mask.addr, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.then, label %if.else.114

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %mask.addr, align 8
  store i8* %2, i8** %m, align 8
  %3 = load i32, i32* %bytes.addr, align 4
  %cmp = icmp eq i32 %3, 3
  br i1 %cmp, label %land.lhs.true, label %if.end.48

land.lhs.true:                                    ; preds = %if.then
  %4 = load i32*, i32** %affect.addr, align 8
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 0
  %5 = load i32, i32* %arrayidx, align 4
  %tobool1 = icmp ne i32 %5, 0
  br i1 %tobool1, label %land.lhs.true.2, label %if.end.48

land.lhs.true.2:                                  ; preds = %land.lhs.true
  %6 = load i32*, i32** %affect.addr, align 8
  %arrayidx3 = getelementptr inbounds i32, i32* %6, i64 1
  %7 = load i32, i32* %arrayidx3, align 4
  %tobool4 = icmp ne i32 %7, 0
  br i1 %tobool4, label %land.lhs.true.5, label %if.end.48

land.lhs.true.5:                                  ; preds = %land.lhs.true.2
  %8 = load i32*, i32** %affect.addr, align 8
  %arrayidx6 = getelementptr inbounds i32, i32* %8, i64 2
  %9 = load i32, i32* %arrayidx6, align 4
  %tobool7 = icmp ne i32 %9, 0
  br i1 %tobool7, label %if.then.8, label %if.end.48

if.then.8:                                        ; preds = %land.lhs.true.5
  %10 = load i32, i32* %bytes.addr, align 4
  %idxprom = zext i32 %10 to i64
  %11 = load i32*, i32** %affect.addr, align 8
  %arrayidx9 = getelementptr inbounds i32, i32* %11, i64 %idxprom
  %12 = load i32, i32* %arrayidx9, align 4
  %tobool10 = icmp ne i32 %12, 0
  br i1 %tobool10, label %if.end, label %if.then.11

if.then.11:                                       ; preds = %if.then.8
  store i32 0, i32* %opacity.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.11, %if.then.8
  %13 = load i8*, i8** %dest.addr, align 8
  %14 = load i32, i32* %bytes.addr, align 4
  %idx.ext = zext i32 %14 to i64
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 %idx.ext
  store i8* %add.ptr, i8** %destp, align 8
  %15 = load i32, i32* %opacity.addr, align 4
  %cmp12 = icmp ne i32 %15, 0
  br i1 %cmp12, label %if.then.13, label %if.else

if.then.13:                                       ; preds = %if.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.13
  %16 = load i32, i32* %length.addr, align 4
  %dec = add i32 %16, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool14 = icmp ne i32 %16, 0
  br i1 %tobool14, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %17 = load i8*, i8** %src.addr, align 8
  %arrayidx15 = getelementptr inbounds i8, i8* %17, i64 0
  %18 = load i8, i8* %arrayidx15, align 1
  %19 = load i8*, i8** %dest.addr, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %19, i64 0
  store i8 %18, i8* %arrayidx16, align 1
  %20 = load i8*, i8** %src.addr, align 8
  %arrayidx17 = getelementptr inbounds i8, i8* %20, i64 1
  %21 = load i8, i8* %arrayidx17, align 1
  %22 = load i8*, i8** %dest.addr, align 8
  %arrayidx18 = getelementptr inbounds i8, i8* %22, i64 1
  store i8 %21, i8* %arrayidx18, align 1
  %23 = load i8*, i8** %src.addr, align 8
  %arrayidx19 = getelementptr inbounds i8, i8* %23, i64 2
  %24 = load i8, i8* %arrayidx19, align 1
  %25 = load i8*, i8** %dest.addr, align 8
  %arrayidx20 = getelementptr inbounds i8, i8* %25, i64 2
  store i8 %24, i8* %arrayidx20, align 1
  %26 = load i32, i32* %opacity.addr, align 4
  %27 = load i8*, i8** %m, align 8
  %28 = load i8, i8* %27, align 1
  %conv = zext i8 %28 to i32
  %mul = mul i32 %26, %conv
  %add21 = add i32 %mul, 128
  store i32 %add21, i32* %tmp, align 4
  %29 = load i32, i32* %tmp, align 4
  %shr = ashr i32 %29, 8
  %30 = load i32, i32* %tmp, align 4
  %add22 = add nsw i32 %shr, %30
  %shr23 = ashr i32 %add22, 8
  %conv24 = trunc i32 %shr23 to i8
  %31 = load i8*, i8** %dest.addr, align 8
  %arrayidx25 = getelementptr inbounds i8, i8* %31, i64 3
  store i8 %conv24, i8* %arrayidx25, align 1
  %32 = load i32, i32* %bytes.addr, align 4
  %33 = load i8*, i8** %src.addr, align 8
  %idx.ext26 = zext i32 %32 to i64
  %add.ptr27 = getelementptr inbounds i8, i8* %33, i64 %idx.ext26
  store i8* %add.ptr27, i8** %src.addr, align 8
  %34 = load i32, i32* %dest_bytes, align 4
  %35 = load i8*, i8** %dest.addr, align 8
  %idx.ext28 = sext i32 %34 to i64
  %add.ptr29 = getelementptr inbounds i8, i8* %35, i64 %idx.ext28
  store i8* %add.ptr29, i8** %dest.addr, align 8
  %36 = load i8*, i8** %m, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %36, i32 1
  store i8* %incdec.ptr, i8** %m, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.47

if.else:                                          ; preds = %if.end
  br label %while.cond.30

while.cond.30:                                    ; preds = %while.body.33, %if.else
  %37 = load i32, i32* %length.addr, align 4
  %dec31 = add i32 %37, -1
  store i32 %dec31, i32* %length.addr, align 4
  %tobool32 = icmp ne i32 %37, 0
  br i1 %tobool32, label %while.body.33, label %while.end.46

while.body.33:                                    ; preds = %while.cond.30
  %38 = load i8*, i8** %src.addr, align 8
  %arrayidx34 = getelementptr inbounds i8, i8* %38, i64 0
  %39 = load i8, i8* %arrayidx34, align 1
  %40 = load i8*, i8** %dest.addr, align 8
  %arrayidx35 = getelementptr inbounds i8, i8* %40, i64 0
  store i8 %39, i8* %arrayidx35, align 1
  %41 = load i8*, i8** %src.addr, align 8
  %arrayidx36 = getelementptr inbounds i8, i8* %41, i64 1
  %42 = load i8, i8* %arrayidx36, align 1
  %43 = load i8*, i8** %dest.addr, align 8
  %arrayidx37 = getelementptr inbounds i8, i8* %43, i64 1
  store i8 %42, i8* %arrayidx37, align 1
  %44 = load i8*, i8** %src.addr, align 8
  %arrayidx38 = getelementptr inbounds i8, i8* %44, i64 2
  %45 = load i8, i8* %arrayidx38, align 1
  %46 = load i8*, i8** %dest.addr, align 8
  %arrayidx39 = getelementptr inbounds i8, i8* %46, i64 2
  store i8 %45, i8* %arrayidx39, align 1
  %47 = load i32, i32* %opacity.addr, align 4
  %conv40 = trunc i32 %47 to i8
  %48 = load i8*, i8** %dest.addr, align 8
  %arrayidx41 = getelementptr inbounds i8, i8* %48, i64 3
  store i8 %conv40, i8* %arrayidx41, align 1
  %49 = load i32, i32* %bytes.addr, align 4
  %50 = load i8*, i8** %src.addr, align 8
  %idx.ext42 = zext i32 %49 to i64
  %add.ptr43 = getelementptr inbounds i8, i8* %50, i64 %idx.ext42
  store i8* %add.ptr43, i8** %src.addr, align 8
  %51 = load i32, i32* %dest_bytes, align 4
  %52 = load i8*, i8** %dest.addr, align 8
  %idx.ext44 = sext i32 %51 to i64
  %add.ptr45 = getelementptr inbounds i8, i8* %52, i64 %idx.ext44
  store i8* %add.ptr45, i8** %dest.addr, align 8
  br label %while.cond.30

while.end.46:                                     ; preds = %while.cond.30
  br label %if.end.47

if.end.47:                                        ; preds = %while.end.46, %while.end
  br label %if.end.200

if.end.48:                                        ; preds = %land.lhs.true.5, %land.lhs.true.2, %land.lhs.true, %if.then
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.48
  %53 = load i32, i32* %b, align 4
  %54 = load i32, i32* %bytes.addr, align 4
  %cmp49 = icmp ult i32 %53, %54
  br i1 %cmp49, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %55 = load i8*, i8** %dest.addr, align 8
  %56 = load i32, i32* %b, align 4
  %idx.ext51 = sext i32 %56 to i64
  %add.ptr52 = getelementptr inbounds i8, i8* %55, i64 %idx.ext51
  store i8* %add.ptr52, i8** %destp, align 8
  %57 = load i8*, i8** %src.addr, align 8
  %58 = load i32, i32* %b, align 4
  %idx.ext53 = sext i32 %58 to i64
  %add.ptr54 = getelementptr inbounds i8, i8* %57, i64 %idx.ext53
  store i8* %add.ptr54, i8** %srcp, align 8
  %59 = load i32, i32* %length.addr, align 4
  store i32 %59, i32* %l, align 4
  %60 = load i32, i32* %b, align 4
  %idxprom55 = sext i32 %60 to i64
  %61 = load i32*, i32** %affect.addr, align 8
  %arrayidx56 = getelementptr inbounds i32, i32* %61, i64 %idxprom55
  %62 = load i32, i32* %arrayidx56, align 4
  %tobool57 = icmp ne i32 %62, 0
  br i1 %tobool57, label %if.then.58, label %if.else.68

if.then.58:                                       ; preds = %for.body
  br label %while.cond.59

while.cond.59:                                    ; preds = %while.body.62, %if.then.58
  %63 = load i32, i32* %l, align 4
  %dec60 = add nsw i32 %63, -1
  store i32 %dec60, i32* %l, align 4
  %tobool61 = icmp ne i32 %63, 0
  br i1 %tobool61, label %while.body.62, label %while.end.67

while.body.62:                                    ; preds = %while.cond.59
  %64 = load i8*, i8** %srcp, align 8
  %65 = load i8, i8* %64, align 1
  %66 = load i8*, i8** %destp, align 8
  store i8 %65, i8* %66, align 1
  %67 = load i32, i32* %bytes.addr, align 4
  %68 = load i8*, i8** %srcp, align 8
  %idx.ext63 = zext i32 %67 to i64
  %add.ptr64 = getelementptr inbounds i8, i8* %68, i64 %idx.ext63
  store i8* %add.ptr64, i8** %srcp, align 8
  %69 = load i32, i32* %dest_bytes, align 4
  %70 = load i8*, i8** %destp, align 8
  %idx.ext65 = sext i32 %69 to i64
  %add.ptr66 = getelementptr inbounds i8, i8* %70, i64 %idx.ext65
  store i8* %add.ptr66, i8** %destp, align 8
  br label %while.cond.59

while.end.67:                                     ; preds = %while.cond.59
  br label %if.end.76

if.else.68:                                       ; preds = %for.body
  br label %while.cond.69

while.cond.69:                                    ; preds = %while.body.72, %if.else.68
  %71 = load i32, i32* %l, align 4
  %dec70 = add nsw i32 %71, -1
  store i32 %dec70, i32* %l, align 4
  %tobool71 = icmp ne i32 %71, 0
  br i1 %tobool71, label %while.body.72, label %while.end.75

while.body.72:                                    ; preds = %while.cond.69
  %72 = load i8*, i8** %destp, align 8
  store i8 0, i8* %72, align 1
  %73 = load i32, i32* %dest_bytes, align 4
  %74 = load i8*, i8** %destp, align 8
  %idx.ext73 = sext i32 %73 to i64
  %add.ptr74 = getelementptr inbounds i8, i8* %74, i64 %idx.ext73
  store i8* %add.ptr74, i8** %destp, align 8
  br label %while.cond.69

while.end.75:                                     ; preds = %while.cond.69
  br label %if.end.76

if.end.76:                                        ; preds = %while.end.75, %while.end.67
  br label %for.inc

for.inc:                                          ; preds = %if.end.76
  %75 = load i32, i32* %b, align 4
  %inc = add nsw i32 %75, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %76 = load i32, i32* %bytes.addr, align 4
  %idxprom77 = zext i32 %76 to i64
  %77 = load i32*, i32** %affect.addr, align 8
  %arrayidx78 = getelementptr inbounds i32, i32* %77, i64 %idxprom77
  %78 = load i32, i32* %arrayidx78, align 4
  %tobool79 = icmp ne i32 %78, 0
  br i1 %tobool79, label %if.end.81, label %if.then.80

if.then.80:                                       ; preds = %for.end
  store i32 0, i32* %opacity.addr, align 4
  br label %if.end.81

if.end.81:                                        ; preds = %if.then.80, %for.end
  %79 = load i8*, i8** %dest.addr, align 8
  %80 = load i32, i32* %bytes.addr, align 4
  %idx.ext82 = zext i32 %80 to i64
  %add.ptr83 = getelementptr inbounds i8, i8* %79, i64 %idx.ext82
  store i8* %add.ptr83, i8** %destp, align 8
  %81 = load i32, i32* %opacity.addr, align 4
  %cmp84 = icmp ne i32 %81, 0
  br i1 %cmp84, label %if.then.86, label %if.else.104

if.then.86:                                       ; preds = %if.end.81
  br label %while.cond.87

while.cond.87:                                    ; preds = %while.body.90, %if.then.86
  %82 = load i32, i32* %length.addr, align 4
  %dec88 = add i32 %82, -1
  store i32 %dec88, i32* %length.addr, align 4
  %tobool89 = icmp ne i32 %82, 0
  br i1 %tobool89, label %while.body.90, label %while.end.103

while.body.90:                                    ; preds = %while.cond.87
  %83 = load i32, i32* %opacity.addr, align 4
  %84 = load i8*, i8** %m, align 8
  %85 = load i8, i8* %84, align 1
  %conv93 = zext i8 %85 to i32
  %mul94 = mul i32 %83, %conv93
  %add95 = add i32 %mul94, 128
  store i32 %add95, i32* %tmp92, align 4
  %86 = load i32, i32* %tmp92, align 4
  %shr96 = ashr i32 %86, 8
  %87 = load i32, i32* %tmp92, align 4
  %add97 = add nsw i32 %shr96, %87
  %shr98 = ashr i32 %add97, 8
  %conv99 = trunc i32 %shr98 to i8
  %88 = load i8*, i8** %destp, align 8
  store i8 %conv99, i8* %88, align 1
  %89 = load i32, i32* %dest_bytes, align 4
  %90 = load i8*, i8** %destp, align 8
  %idx.ext100 = sext i32 %89 to i64
  %add.ptr101 = getelementptr inbounds i8, i8* %90, i64 %idx.ext100
  store i8* %add.ptr101, i8** %destp, align 8
  %91 = load i8*, i8** %m, align 8
  %incdec.ptr102 = getelementptr inbounds i8, i8* %91, i32 1
  store i8* %incdec.ptr102, i8** %m, align 8
  br label %while.cond.87

while.end.103:                                    ; preds = %while.cond.87
  br label %if.end.113

if.else.104:                                      ; preds = %if.end.81
  br label %while.cond.105

while.cond.105:                                   ; preds = %while.body.108, %if.else.104
  %92 = load i32, i32* %length.addr, align 4
  %dec106 = add i32 %92, -1
  store i32 %dec106, i32* %length.addr, align 4
  %tobool107 = icmp ne i32 %92, 0
  br i1 %tobool107, label %while.body.108, label %while.end.112

while.body.108:                                   ; preds = %while.cond.105
  %93 = load i32, i32* %opacity.addr, align 4
  %conv109 = trunc i32 %93 to i8
  %94 = load i8*, i8** %destp, align 8
  store i8 %conv109, i8* %94, align 1
  %95 = load i32, i32* %dest_bytes, align 4
  %96 = load i8*, i8** %destp, align 8
  %idx.ext110 = sext i32 %95 to i64
  %add.ptr111 = getelementptr inbounds i8, i8* %96, i64 %idx.ext110
  store i8* %add.ptr111, i8** %destp, align 8
  br label %while.cond.105

while.end.112:                                    ; preds = %while.cond.105
  br label %if.end.113

if.end.113:                                       ; preds = %while.end.112, %while.end.103
  br label %if.end.200

if.else.114:                                      ; preds = %entry
  %97 = load i32, i32* %bytes.addr, align 4
  %cmp115 = icmp eq i32 %97, 3
  br i1 %cmp115, label %land.lhs.true.117, label %if.end.151

land.lhs.true.117:                                ; preds = %if.else.114
  %98 = load i32*, i32** %affect.addr, align 8
  %arrayidx118 = getelementptr inbounds i32, i32* %98, i64 0
  %99 = load i32, i32* %arrayidx118, align 4
  %tobool119 = icmp ne i32 %99, 0
  br i1 %tobool119, label %land.lhs.true.120, label %if.end.151

land.lhs.true.120:                                ; preds = %land.lhs.true.117
  %100 = load i32*, i32** %affect.addr, align 8
  %arrayidx121 = getelementptr inbounds i32, i32* %100, i64 1
  %101 = load i32, i32* %arrayidx121, align 4
  %tobool122 = icmp ne i32 %101, 0
  br i1 %tobool122, label %land.lhs.true.123, label %if.end.151

land.lhs.true.123:                                ; preds = %land.lhs.true.120
  %102 = load i32*, i32** %affect.addr, align 8
  %arrayidx124 = getelementptr inbounds i32, i32* %102, i64 2
  %103 = load i32, i32* %arrayidx124, align 4
  %tobool125 = icmp ne i32 %103, 0
  br i1 %tobool125, label %if.then.126, label %if.end.151

if.then.126:                                      ; preds = %land.lhs.true.123
  %104 = load i32, i32* %bytes.addr, align 4
  %idxprom127 = zext i32 %104 to i64
  %105 = load i32*, i32** %affect.addr, align 8
  %arrayidx128 = getelementptr inbounds i32, i32* %105, i64 %idxprom127
  %106 = load i32, i32* %arrayidx128, align 4
  %tobool129 = icmp ne i32 %106, 0
  br i1 %tobool129, label %if.end.131, label %if.then.130

if.then.130:                                      ; preds = %if.then.126
  store i32 0, i32* %opacity.addr, align 4
  br label %if.end.131

if.end.131:                                       ; preds = %if.then.130, %if.then.126
  %107 = load i8*, i8** %dest.addr, align 8
  %108 = load i32, i32* %bytes.addr, align 4
  %idx.ext132 = zext i32 %108 to i64
  %add.ptr133 = getelementptr inbounds i8, i8* %107, i64 %idx.ext132
  store i8* %add.ptr133, i8** %destp, align 8
  br label %while.cond.134

while.cond.134:                                   ; preds = %while.body.137, %if.end.131
  %109 = load i32, i32* %length.addr, align 4
  %dec135 = add i32 %109, -1
  store i32 %dec135, i32* %length.addr, align 4
  %tobool136 = icmp ne i32 %109, 0
  br i1 %tobool136, label %while.body.137, label %while.end.150

while.body.137:                                   ; preds = %while.cond.134
  %110 = load i8*, i8** %src.addr, align 8
  %arrayidx138 = getelementptr inbounds i8, i8* %110, i64 0
  %111 = load i8, i8* %arrayidx138, align 1
  %112 = load i8*, i8** %dest.addr, align 8
  %arrayidx139 = getelementptr inbounds i8, i8* %112, i64 0
  store i8 %111, i8* %arrayidx139, align 1
  %113 = load i8*, i8** %src.addr, align 8
  %arrayidx140 = getelementptr inbounds i8, i8* %113, i64 1
  %114 = load i8, i8* %arrayidx140, align 1
  %115 = load i8*, i8** %dest.addr, align 8
  %arrayidx141 = getelementptr inbounds i8, i8* %115, i64 1
  store i8 %114, i8* %arrayidx141, align 1
  %116 = load i8*, i8** %src.addr, align 8
  %arrayidx142 = getelementptr inbounds i8, i8* %116, i64 2
  %117 = load i8, i8* %arrayidx142, align 1
  %118 = load i8*, i8** %dest.addr, align 8
  %arrayidx143 = getelementptr inbounds i8, i8* %118, i64 2
  store i8 %117, i8* %arrayidx143, align 1
  %119 = load i32, i32* %opacity.addr, align 4
  %conv144 = trunc i32 %119 to i8
  %120 = load i8*, i8** %dest.addr, align 8
  %arrayidx145 = getelementptr inbounds i8, i8* %120, i64 3
  store i8 %conv144, i8* %arrayidx145, align 1
  %121 = load i32, i32* %bytes.addr, align 4
  %122 = load i8*, i8** %src.addr, align 8
  %idx.ext146 = zext i32 %121 to i64
  %add.ptr147 = getelementptr inbounds i8, i8* %122, i64 %idx.ext146
  store i8* %add.ptr147, i8** %src.addr, align 8
  %123 = load i32, i32* %dest_bytes, align 4
  %124 = load i8*, i8** %dest.addr, align 8
  %idx.ext148 = sext i32 %123 to i64
  %add.ptr149 = getelementptr inbounds i8, i8* %124, i64 %idx.ext148
  store i8* %add.ptr149, i8** %dest.addr, align 8
  br label %while.cond.134

while.end.150:                                    ; preds = %while.cond.134
  br label %if.end.200

if.end.151:                                       ; preds = %land.lhs.true.123, %land.lhs.true.120, %land.lhs.true.117, %if.else.114
  store i32 0, i32* %b, align 4
  br label %for.cond.152

for.cond.152:                                     ; preds = %for.inc.182, %if.end.151
  %125 = load i32, i32* %b, align 4
  %126 = load i32, i32* %bytes.addr, align 4
  %cmp153 = icmp ult i32 %125, %126
  br i1 %cmp153, label %for.body.155, label %for.end.184

for.body.155:                                     ; preds = %for.cond.152
  %127 = load i8*, i8** %dest.addr, align 8
  %128 = load i32, i32* %b, align 4
  %idx.ext156 = sext i32 %128 to i64
  %add.ptr157 = getelementptr inbounds i8, i8* %127, i64 %idx.ext156
  store i8* %add.ptr157, i8** %destp, align 8
  %129 = load i8*, i8** %src.addr, align 8
  %130 = load i32, i32* %b, align 4
  %idx.ext158 = sext i32 %130 to i64
  %add.ptr159 = getelementptr inbounds i8, i8* %129, i64 %idx.ext158
  store i8* %add.ptr159, i8** %srcp, align 8
  %131 = load i32, i32* %length.addr, align 4
  store i32 %131, i32* %l, align 4
  %132 = load i32, i32* %b, align 4
  %idxprom160 = sext i32 %132 to i64
  %133 = load i32*, i32** %affect.addr, align 8
  %arrayidx161 = getelementptr inbounds i32, i32* %133, i64 %idxprom160
  %134 = load i32, i32* %arrayidx161, align 4
  %tobool162 = icmp ne i32 %134, 0
  br i1 %tobool162, label %if.then.163, label %if.else.173

if.then.163:                                      ; preds = %for.body.155
  br label %while.cond.164

while.cond.164:                                   ; preds = %while.body.167, %if.then.163
  %135 = load i32, i32* %l, align 4
  %dec165 = add nsw i32 %135, -1
  store i32 %dec165, i32* %l, align 4
  %tobool166 = icmp ne i32 %135, 0
  br i1 %tobool166, label %while.body.167, label %while.end.172

while.body.167:                                   ; preds = %while.cond.164
  %136 = load i8*, i8** %srcp, align 8
  %137 = load i8, i8* %136, align 1
  %138 = load i8*, i8** %destp, align 8
  store i8 %137, i8* %138, align 1
  %139 = load i32, i32* %bytes.addr, align 4
  %140 = load i8*, i8** %srcp, align 8
  %idx.ext168 = zext i32 %139 to i64
  %add.ptr169 = getelementptr inbounds i8, i8* %140, i64 %idx.ext168
  store i8* %add.ptr169, i8** %srcp, align 8
  %141 = load i32, i32* %dest_bytes, align 4
  %142 = load i8*, i8** %destp, align 8
  %idx.ext170 = sext i32 %141 to i64
  %add.ptr171 = getelementptr inbounds i8, i8* %142, i64 %idx.ext170
  store i8* %add.ptr171, i8** %destp, align 8
  br label %while.cond.164

while.end.172:                                    ; preds = %while.cond.164
  br label %if.end.181

if.else.173:                                      ; preds = %for.body.155
  br label %while.cond.174

while.cond.174:                                   ; preds = %while.body.177, %if.else.173
  %143 = load i32, i32* %l, align 4
  %dec175 = add nsw i32 %143, -1
  store i32 %dec175, i32* %l, align 4
  %tobool176 = icmp ne i32 %143, 0
  br i1 %tobool176, label %while.body.177, label %while.end.180

while.body.177:                                   ; preds = %while.cond.174
  %144 = load i8*, i8** %destp, align 8
  store i8 0, i8* %144, align 1
  %145 = load i32, i32* %dest_bytes, align 4
  %146 = load i8*, i8** %destp, align 8
  %idx.ext178 = sext i32 %145 to i64
  %add.ptr179 = getelementptr inbounds i8, i8* %146, i64 %idx.ext178
  store i8* %add.ptr179, i8** %destp, align 8
  br label %while.cond.174

while.end.180:                                    ; preds = %while.cond.174
  br label %if.end.181

if.end.181:                                       ; preds = %while.end.180, %while.end.172
  br label %for.inc.182

for.inc.182:                                      ; preds = %if.end.181
  %147 = load i32, i32* %b, align 4
  %inc183 = add nsw i32 %147, 1
  store i32 %inc183, i32* %b, align 4
  br label %for.cond.152

for.end.184:                                      ; preds = %for.cond.152
  %148 = load i32, i32* %bytes.addr, align 4
  %idxprom185 = zext i32 %148 to i64
  %149 = load i32*, i32** %affect.addr, align 8
  %arrayidx186 = getelementptr inbounds i32, i32* %149, i64 %idxprom185
  %150 = load i32, i32* %arrayidx186, align 4
  %tobool187 = icmp ne i32 %150, 0
  br i1 %tobool187, label %if.end.189, label %if.then.188

if.then.188:                                      ; preds = %for.end.184
  store i32 0, i32* %opacity.addr, align 4
  br label %if.end.189

if.end.189:                                       ; preds = %if.then.188, %for.end.184
  %151 = load i8*, i8** %dest.addr, align 8
  %152 = load i32, i32* %bytes.addr, align 4
  %idx.ext190 = zext i32 %152 to i64
  %add.ptr191 = getelementptr inbounds i8, i8* %151, i64 %idx.ext190
  store i8* %add.ptr191, i8** %destp, align 8
  br label %while.cond.192

while.cond.192:                                   ; preds = %while.body.195, %if.end.189
  %153 = load i32, i32* %length.addr, align 4
  %dec193 = add i32 %153, -1
  store i32 %dec193, i32* %length.addr, align 4
  %tobool194 = icmp ne i32 %153, 0
  br i1 %tobool194, label %while.body.195, label %while.end.199

while.body.195:                                   ; preds = %while.cond.192
  %154 = load i32, i32* %opacity.addr, align 4
  %conv196 = trunc i32 %154 to i8
  %155 = load i8*, i8** %destp, align 8
  store i8 %conv196, i8* %155, align 1
  %156 = load i32, i32* %dest_bytes, align 4
  %157 = load i8*, i8** %destp, align 8
  %idx.ext197 = sext i32 %156 to i64
  %add.ptr198 = getelementptr inbounds i8, i8* %157, i64 %idx.ext197
  store i8* %add.ptr198, i8** %destp, align 8
  br label %while.cond.192

while.end.199:                                    ; preds = %while.cond.192
  br label %if.end.200

if.end.200:                                       ; preds = %if.end.47, %while.end.150, %while.end.199, %if.end.113
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define void @initial_inten_a_pixels(i8* %src, i8* %dest, i8* %mask, i32 %opacity, i32* %affect, i32 %length, i32 %bytes) #3 {
entry:
  %src.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %opacity.addr = alloca i32, align 4
  %affect.addr = alloca i32*, align 8
  %length.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %alpha = alloca i32, align 4
  %m = alloca i8*, align 8
  %b = alloca i32, align 4
  %tmp = alloca i64, align 8
  %b29 = alloca i32, align 4
  %tmp31 = alloca i64, align 8
  store i8* %src, i8** %src.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32* %affect, i32** %affect.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %0 = load i32, i32* %bytes.addr, align 4
  %sub = sub i32 %0, 1
  store i32 %sub, i32* %alpha, align 4
  %1 = load i8*, i8** %mask.addr, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %mask.addr, align 8
  store i8* %2, i8** %m, align 8
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %if.then
  %3 = load i32, i32* %length.addr, align 4
  %dec = add i32 %3, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool1 = icmp ne i32 %3, 0
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %4 = load i32, i32* %b, align 4
  %5 = load i32, i32* %alpha, align 4
  %cmp = icmp ult i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %b, align 4
  %idxprom = zext i32 %6 to i64
  %7 = load i8*, i8** %src.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %7, i64 %idxprom
  %8 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %8 to i32
  %9 = load i32, i32* %b, align 4
  %idxprom2 = zext i32 %9 to i64
  %10 = load i32*, i32** %affect.addr, align 8
  %arrayidx3 = getelementptr inbounds i32, i32* %10, i64 %idxprom2
  %11 = load i32, i32* %arrayidx3, align 4
  %mul = mul nsw i32 %conv, %11
  %conv4 = trunc i32 %mul to i8
  %12 = load i32, i32* %b, align 4
  %idxprom5 = zext i32 %12 to i64
  %13 = load i8*, i8** %dest.addr, align 8
  %arrayidx6 = getelementptr inbounds i8, i8* %13, i64 %idxprom5
  store i8 %conv4, i8* %arrayidx6, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %b, align 4
  %inc = add i32 %14, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load i32, i32* %alpha, align 4
  %idxprom7 = zext i32 %15 to i64
  %16 = load i32*, i32** %affect.addr, align 8
  %arrayidx8 = getelementptr inbounds i32, i32* %16, i64 %idxprom7
  %17 = load i32, i32* %arrayidx8, align 4
  %tobool9 = icmp ne i32 %17, 0
  br i1 %tobool9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.end
  %18 = load i32, i32* %opacity.addr, align 4
  %19 = load i32, i32* %alpha, align 4
  %idxprom10 = zext i32 %19 to i64
  %20 = load i8*, i8** %src.addr, align 8
  %arrayidx11 = getelementptr inbounds i8, i8* %20, i64 %idxprom10
  %21 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %21 to i32
  %mul13 = mul i32 %18, %conv12
  %22 = load i8*, i8** %m, align 8
  %23 = load i8, i8* %22, align 1
  %conv14 = zext i8 %23 to i32
  %mul15 = mul i32 %mul13, %conv14
  %add = add i32 %mul15, 32603
  %conv16 = zext i32 %add to i64
  store i64 %conv16, i64* %tmp, align 8
  %24 = load i64, i64* %tmp, align 8
  %shr = ashr i64 %24, 7
  %25 = load i64, i64* %tmp, align 8
  %add17 = add nsw i64 %shr, %25
  %shr18 = ashr i64 %add17, 16
  br label %cond.end

cond.false:                                       ; preds = %for.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %shr18, %cond.true ], [ 0, %cond.false ]
  %conv19 = trunc i64 %cond to i8
  %26 = load i32, i32* %alpha, align 4
  %idxprom20 = zext i32 %26 to i64
  %27 = load i8*, i8** %dest.addr, align 8
  %arrayidx21 = getelementptr inbounds i8, i8* %27, i64 %idxprom20
  store i8 %conv19, i8* %arrayidx21, align 1
  %28 = load i8*, i8** %m, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %28, i32 1
  store i8* %incdec.ptr, i8** %m, align 8
  %29 = load i32, i32* %bytes.addr, align 4
  %30 = load i8*, i8** %dest.addr, align 8
  %idx.ext = zext i32 %29 to i64
  %add.ptr = getelementptr inbounds i8, i8* %30, i64 %idx.ext
  store i8* %add.ptr, i8** %dest.addr, align 8
  %31 = load i32, i32* %bytes.addr, align 4
  %32 = load i8*, i8** %src.addr, align 8
  %idx.ext22 = zext i32 %31 to i64
  %add.ptr23 = getelementptr inbounds i8, i8* %32, i64 %idx.ext22
  store i8* %add.ptr23, i8** %src.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.else:                                          ; preds = %entry
  br label %while.cond.24

while.cond.24:                                    ; preds = %cond.end.62, %if.else
  %33 = load i32, i32* %length.addr, align 4
  %dec25 = add i32 %33, -1
  store i32 %dec25, i32* %length.addr, align 4
  %tobool26 = icmp ne i32 %33, 0
  br i1 %tobool26, label %while.body.27, label %while.end.71

while.body.27:                                    ; preds = %while.cond.24
  store i32 0, i32* %b29, align 4
  br label %for.cond.32

for.cond.32:                                      ; preds = %for.inc.45, %while.body.27
  %34 = load i32, i32* %b29, align 4
  %35 = load i32, i32* %alpha, align 4
  %cmp33 = icmp ult i32 %34, %35
  br i1 %cmp33, label %for.body.35, label %for.end.47

for.body.35:                                      ; preds = %for.cond.32
  %36 = load i32, i32* %b29, align 4
  %idxprom36 = zext i32 %36 to i64
  %37 = load i8*, i8** %src.addr, align 8
  %arrayidx37 = getelementptr inbounds i8, i8* %37, i64 %idxprom36
  %38 = load i8, i8* %arrayidx37, align 1
  %conv38 = zext i8 %38 to i32
  %39 = load i32, i32* %b29, align 4
  %idxprom39 = zext i32 %39 to i64
  %40 = load i32*, i32** %affect.addr, align 8
  %arrayidx40 = getelementptr inbounds i32, i32* %40, i64 %idxprom39
  %41 = load i32, i32* %arrayidx40, align 4
  %mul41 = mul nsw i32 %conv38, %41
  %conv42 = trunc i32 %mul41 to i8
  %42 = load i32, i32* %b29, align 4
  %idxprom43 = zext i32 %42 to i64
  %43 = load i8*, i8** %dest.addr, align 8
  %arrayidx44 = getelementptr inbounds i8, i8* %43, i64 %idxprom43
  store i8 %conv42, i8* %arrayidx44, align 1
  br label %for.inc.45

for.inc.45:                                       ; preds = %for.body.35
  %44 = load i32, i32* %b29, align 4
  %inc46 = add i32 %44, 1
  store i32 %inc46, i32* %b29, align 4
  br label %for.cond.32

for.end.47:                                       ; preds = %for.cond.32
  %45 = load i32, i32* %alpha, align 4
  %idxprom48 = zext i32 %45 to i64
  %46 = load i32*, i32** %affect.addr, align 8
  %arrayidx49 = getelementptr inbounds i32, i32* %46, i64 %idxprom48
  %47 = load i32, i32* %arrayidx49, align 4
  %tobool50 = icmp ne i32 %47, 0
  br i1 %tobool50, label %cond.true.51, label %cond.false.61

cond.true.51:                                     ; preds = %for.end.47
  %48 = load i32, i32* %opacity.addr, align 4
  %49 = load i32, i32* %alpha, align 4
  %idxprom52 = zext i32 %49 to i64
  %50 = load i8*, i8** %src.addr, align 8
  %arrayidx53 = getelementptr inbounds i8, i8* %50, i64 %idxprom52
  %51 = load i8, i8* %arrayidx53, align 1
  %conv54 = zext i8 %51 to i32
  %mul55 = mul i32 %48, %conv54
  %add56 = add i32 %mul55, 128
  %conv57 = zext i32 %add56 to i64
  store i64 %conv57, i64* %tmp31, align 8
  %52 = load i64, i64* %tmp31, align 8
  %shr58 = ashr i64 %52, 8
  %53 = load i64, i64* %tmp31, align 8
  %add59 = add nsw i64 %shr58, %53
  %shr60 = ashr i64 %add59, 8
  br label %cond.end.62

cond.false.61:                                    ; preds = %for.end.47
  br label %cond.end.62

cond.end.62:                                      ; preds = %cond.false.61, %cond.true.51
  %cond63 = phi i64 [ %shr60, %cond.true.51 ], [ 0, %cond.false.61 ]
  %conv64 = trunc i64 %cond63 to i8
  %54 = load i32, i32* %alpha, align 4
  %idxprom65 = zext i32 %54 to i64
  %55 = load i8*, i8** %dest.addr, align 8
  %arrayidx66 = getelementptr inbounds i8, i8* %55, i64 %idxprom65
  store i8 %conv64, i8* %arrayidx66, align 1
  %56 = load i32, i32* %bytes.addr, align 4
  %57 = load i8*, i8** %dest.addr, align 8
  %idx.ext67 = zext i32 %56 to i64
  %add.ptr68 = getelementptr inbounds i8, i8* %57, i64 %idx.ext67
  store i8* %add.ptr68, i8** %dest.addr, align 8
  %58 = load i32, i32* %bytes.addr, align 4
  %59 = load i8*, i8** %src.addr, align 8
  %idx.ext69 = zext i32 %58 to i64
  %add.ptr70 = getelementptr inbounds i8, i8* %59, i64 %idx.ext69
  store i8* %add.ptr70, i8** %src.addr, align 8
  br label %while.cond.24

while.end.71:                                     ; preds = %while.cond.24
  br label %if.end

if.end:                                           ; preds = %while.end.71, %while.end
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define void @copy_component_pixels(i8* %src, i8* %dest, i32 %length, i32 %bytes, i32 %pixel) #3 {
entry:
  %src.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %length.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %pixel.addr = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  store i32 %pixel, i32* %pixel.addr, align 4
  %0 = load i32, i32* %pixel.addr, align 4
  %1 = load i8*, i8** %src.addr, align 8
  %idx.ext = zext i32 %0 to i64
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %idx.ext
  store i8* %add.ptr, i8** %src.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i32, i32* %length.addr, align 4
  %dec = add i32 %2, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %src.addr, align 8
  %4 = load i8, i8* %3, align 1
  %5 = load i8*, i8** %dest.addr, align 8
  store i8 %4, i8* %5, align 1
  %6 = load i32, i32* %bytes.addr, align 4
  %7 = load i8*, i8** %src.addr, align 8
  %idx.ext1 = zext i32 %6 to i64
  %add.ptr2 = getelementptr inbounds i8, i8* %7, i64 %idx.ext1
  store i8* %add.ptr2, i8** %src.addr, align 8
  %8 = load i8*, i8** %dest.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define void @copy_color_pixels(i8* %src, i8* %dest, i32 %length, i32 %bytes) #3 {
entry:
  %src.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %length.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %alpha = alloca i32, align 4
  %b = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %0 = load i32, i32* %bytes.addr, align 4
  %sub = sub i32 %0, 1
  store i32 %sub, i32* %alpha, align 4
  br label %while.cond

while.cond:                                       ; preds = %for.end, %entry
  %1 = load i32, i32* %length.addr, align 4
  %dec = add i32 %1, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %2 = load i32, i32* %b, align 4
  %3 = load i32, i32* %alpha, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %b, align 4
  %idxprom = zext i32 %4 to i64
  %5 = load i8*, i8** %src.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %7 = load i32, i32* %b, align 4
  %idxprom1 = zext i32 %7 to i64
  %8 = load i8*, i8** %dest.addr, align 8
  %arrayidx2 = getelementptr inbounds i8, i8* %8, i64 %idxprom1
  store i8 %6, i8* %arrayidx2, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %b, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i32, i32* %bytes.addr, align 4
  %11 = load i8*, i8** %src.addr, align 8
  %idx.ext = zext i32 %10 to i64
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 %idx.ext
  store i8* %add.ptr, i8** %src.addr, align 8
  %12 = load i32, i32* %bytes.addr, align 4
  %sub3 = sub i32 %12, 1
  %13 = load i8*, i8** %dest.addr, align 8
  %idx.ext4 = zext i32 %sub3 to i64
  %add.ptr5 = getelementptr inbounds i8, i8* %13, i64 %idx.ext4
  store i8* %add.ptr5, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @paint_funcs_setup() #0 {
entry:
  ret void
}

; Function Attrs: nounwind uwtable
define void @paint_funcs_free() #0 {
entry:
  ret void
}

; Function Attrs: nounwind uwtable
define void @combine_indexed_and_indexed_pixels(i8* %src1, i8* %src2, i8* %dest, i8* %mask, i32 %opacity, i32* %affect, i32 %length, i32 %bytes) #0 {
entry:
  %src1.addr = alloca i8*, align 8
  %src2.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %opacity.addr = alloca i32, align 4
  %affect.addr = alloca i32*, align 8
  %length.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %m = alloca i8*, align 8
  %tmp = alloca i64, align 8
  %new_alpha = alloca i8, align 1
  %b = alloca i32, align 4
  %b31 = alloca i32, align 4
  store i8* %src1, i8** %src1.addr, align 8
  store i8* %src2, i8** %src2.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32* %affect, i32** %affect.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %0 = load i8*, i8** %mask.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %mask.addr, align 8
  store i8* %1, i8** %m, align 8
  br label %while.cond

while.cond:                                       ; preds = %for.end, %if.then
  %2 = load i32, i32* %length.addr, align 4
  %dec = add i32 %2, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool1 = icmp ne i32 %2, 0
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %m, align 8
  %4 = load i8, i8* %3, align 1
  %conv = zext i8 %4 to i32
  %5 = load i32, i32* %opacity.addr, align 4
  %mul = mul i32 %conv, %5
  %add = add i32 %mul, 128
  %conv3 = zext i32 %add to i64
  store i64 %conv3, i64* %tmp, align 8
  %6 = load i64, i64* %tmp, align 8
  %shr = lshr i64 %6, 8
  %7 = load i64, i64* %tmp, align 8
  %add4 = add i64 %shr, %7
  %shr5 = lshr i64 %add4, 8
  %conv6 = trunc i64 %shr5 to i8
  store i8 %conv6, i8* %new_alpha, align 1
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %8 = load i32, i32* %b, align 4
  %9 = load i32, i32* %bytes.addr, align 4
  %cmp = icmp ult i32 %8, %9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i32, i32* %b, align 4
  %idxprom = zext i32 %10 to i64
  %11 = load i32*, i32** %affect.addr, align 8
  %arrayidx = getelementptr inbounds i32, i32* %11, i64 %idxprom
  %12 = load i32, i32* %arrayidx, align 4
  %tobool9 = icmp ne i32 %12, 0
  br i1 %tobool9, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %for.body
  %13 = load i8, i8* %new_alpha, align 1
  %conv10 = zext i8 %13 to i32
  %cmp11 = icmp sgt i32 %conv10, 127
  br i1 %cmp11, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %14 = load i32, i32* %b, align 4
  %idxprom13 = zext i32 %14 to i64
  %15 = load i8*, i8** %src2.addr, align 8
  %arrayidx14 = getelementptr inbounds i8, i8* %15, i64 %idxprom13
  %16 = load i8, i8* %arrayidx14, align 1
  %conv15 = zext i8 %16 to i32
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %for.body
  %17 = load i32, i32* %b, align 4
  %idxprom16 = zext i32 %17 to i64
  %18 = load i8*, i8** %src1.addr, align 8
  %arrayidx17 = getelementptr inbounds i8, i8* %18, i64 %idxprom16
  %19 = load i8, i8* %arrayidx17, align 1
  %conv18 = zext i8 %19 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv15, %cond.true ], [ %conv18, %cond.false ]
  %conv19 = trunc i32 %cond to i8
  %20 = load i32, i32* %b, align 4
  %idxprom20 = zext i32 %20 to i64
  %21 = load i8*, i8** %dest.addr, align 8
  %arrayidx21 = getelementptr inbounds i8, i8* %21, i64 %idxprom20
  store i8 %conv19, i8* %arrayidx21, align 1
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %22 = load i32, i32* %b, align 4
  %inc = add i32 %22, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %23 = load i8*, i8** %m, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %23, i32 1
  store i8* %incdec.ptr, i8** %m, align 8
  %24 = load i32, i32* %bytes.addr, align 4
  %25 = load i8*, i8** %src1.addr, align 8
  %idx.ext = zext i32 %24 to i64
  %add.ptr = getelementptr inbounds i8, i8* %25, i64 %idx.ext
  store i8* %add.ptr, i8** %src1.addr, align 8
  %26 = load i32, i32* %bytes.addr, align 4
  %27 = load i8*, i8** %src2.addr, align 8
  %idx.ext22 = zext i32 %26 to i64
  %add.ptr23 = getelementptr inbounds i8, i8* %27, i64 %idx.ext22
  store i8* %add.ptr23, i8** %src2.addr, align 8
  %28 = load i32, i32* %bytes.addr, align 4
  %29 = load i8*, i8** %dest.addr, align 8
  %idx.ext24 = zext i32 %28 to i64
  %add.ptr25 = getelementptr inbounds i8, i8* %29, i64 %idx.ext24
  store i8* %add.ptr25, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.else:                                          ; preds = %entry
  br label %while.cond.26

while.cond.26:                                    ; preds = %for.end.57, %if.else
  %30 = load i32, i32* %length.addr, align 4
  %dec27 = add i32 %30, -1
  store i32 %dec27, i32* %length.addr, align 4
  %tobool28 = icmp ne i32 %30, 0
  br i1 %tobool28, label %while.body.29, label %while.end.64

while.body.29:                                    ; preds = %while.cond.26
  store i32 0, i32* %b31, align 4
  br label %for.cond.32

for.cond.32:                                      ; preds = %for.inc.55, %while.body.29
  %31 = load i32, i32* %b31, align 4
  %32 = load i32, i32* %bytes.addr, align 4
  %cmp33 = icmp ult i32 %31, %32
  br i1 %cmp33, label %for.body.35, label %for.end.57

for.body.35:                                      ; preds = %for.cond.32
  %33 = load i32, i32* %b31, align 4
  %idxprom36 = zext i32 %33 to i64
  %34 = load i32*, i32** %affect.addr, align 8
  %arrayidx37 = getelementptr inbounds i32, i32* %34, i64 %idxprom36
  %35 = load i32, i32* %arrayidx37, align 4
  %tobool38 = icmp ne i32 %35, 0
  br i1 %tobool38, label %land.lhs.true.39, label %cond.false.46

land.lhs.true.39:                                 ; preds = %for.body.35
  %36 = load i32, i32* %opacity.addr, align 4
  %cmp40 = icmp ugt i32 %36, 127
  br i1 %cmp40, label %cond.true.42, label %cond.false.46

cond.true.42:                                     ; preds = %land.lhs.true.39
  %37 = load i32, i32* %b31, align 4
  %idxprom43 = zext i32 %37 to i64
  %38 = load i8*, i8** %src2.addr, align 8
  %arrayidx44 = getelementptr inbounds i8, i8* %38, i64 %idxprom43
  %39 = load i8, i8* %arrayidx44, align 1
  %conv45 = zext i8 %39 to i32
  br label %cond.end.50

cond.false.46:                                    ; preds = %land.lhs.true.39, %for.body.35
  %40 = load i32, i32* %b31, align 4
  %idxprom47 = zext i32 %40 to i64
  %41 = load i8*, i8** %src1.addr, align 8
  %arrayidx48 = getelementptr inbounds i8, i8* %41, i64 %idxprom47
  %42 = load i8, i8* %arrayidx48, align 1
  %conv49 = zext i8 %42 to i32
  br label %cond.end.50

cond.end.50:                                      ; preds = %cond.false.46, %cond.true.42
  %cond51 = phi i32 [ %conv45, %cond.true.42 ], [ %conv49, %cond.false.46 ]
  %conv52 = trunc i32 %cond51 to i8
  %43 = load i32, i32* %b31, align 4
  %idxprom53 = zext i32 %43 to i64
  %44 = load i8*, i8** %dest.addr, align 8
  %arrayidx54 = getelementptr inbounds i8, i8* %44, i64 %idxprom53
  store i8 %conv52, i8* %arrayidx54, align 1
  br label %for.inc.55

for.inc.55:                                       ; preds = %cond.end.50
  %45 = load i32, i32* %b31, align 4
  %inc56 = add i32 %45, 1
  store i32 %inc56, i32* %b31, align 4
  br label %for.cond.32

for.end.57:                                       ; preds = %for.cond.32
  %46 = load i32, i32* %bytes.addr, align 4
  %47 = load i8*, i8** %src1.addr, align 8
  %idx.ext58 = zext i32 %46 to i64
  %add.ptr59 = getelementptr inbounds i8, i8* %47, i64 %idx.ext58
  store i8* %add.ptr59, i8** %src1.addr, align 8
  %48 = load i32, i32* %bytes.addr, align 4
  %49 = load i8*, i8** %src2.addr, align 8
  %idx.ext60 = zext i32 %48 to i64
  %add.ptr61 = getelementptr inbounds i8, i8* %49, i64 %idx.ext60
  store i8* %add.ptr61, i8** %src2.addr, align 8
  %50 = load i32, i32* %bytes.addr, align 4
  %51 = load i8*, i8** %dest.addr, align 8
  %idx.ext62 = zext i32 %50 to i64
  %add.ptr63 = getelementptr inbounds i8, i8* %51, i64 %idx.ext62
  store i8* %add.ptr63, i8** %dest.addr, align 8
  br label %while.cond.26

while.end.64:                                     ; preds = %while.cond.26
  br label %if.end

if.end:                                           ; preds = %while.end.64, %while.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @combine_indexed_and_indexed_a_pixels(i8* %src1, i8* %src2, i8* %dest, i8* %mask, i32 %opacity, i32* %affect, i32 %length, i32 %bytes) #0 {
entry:
  %src1.addr = alloca i8*, align 8
  %src2.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %opacity.addr = alloca i32, align 4
  %affect.addr = alloca i32*, align 8
  %length.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %alpha = alloca i32, align 4
  %src2_bytes = alloca i32, align 4
  %m = alloca i8*, align 8
  %tmp = alloca i64, align 8
  %new_alpha = alloca i8, align 1
  %b = alloca i32, align 4
  %tmp33 = alloca i64, align 8
  %new_alpha35 = alloca i8, align 1
  %b46 = alloca i32, align 4
  store i8* %src1, i8** %src1.addr, align 8
  store i8* %src2, i8** %src2.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32* %affect, i32** %affect.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  store i32 1, i32* %alpha, align 4
  store i32 2, i32* %src2_bytes, align 4
  %0 = load i8*, i8** %mask.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %mask.addr, align 8
  store i8* %1, i8** %m, align 8
  br label %while.cond

while.cond:                                       ; preds = %for.end, %if.then
  %2 = load i32, i32* %length.addr, align 4
  %dec = add i32 %2, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool1 = icmp ne i32 %2, 0
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %src2.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 1
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %5 = load i8*, i8** %m, align 8
  %6 = load i8, i8* %5, align 1
  %conv3 = zext i8 %6 to i32
  %mul = mul nsw i32 %conv, %conv3
  %7 = load i32, i32* %opacity.addr, align 4
  %mul4 = mul i32 %mul, %7
  %add = add i32 %mul4, 32603
  %conv5 = zext i32 %add to i64
  store i64 %conv5, i64* %tmp, align 8
  %8 = load i64, i64* %tmp, align 8
  %shr = lshr i64 %8, 7
  %9 = load i64, i64* %tmp, align 8
  %add6 = add i64 %shr, %9
  %shr7 = lshr i64 %add6, 16
  %conv8 = trunc i64 %shr7 to i8
  store i8 %conv8, i8* %new_alpha, align 1
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %10 = load i32, i32* %b, align 4
  %11 = load i32, i32* %bytes.addr, align 4
  %cmp = icmp ult i32 %10, %11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %b, align 4
  %idxprom = zext i32 %12 to i64
  %13 = load i32*, i32** %affect.addr, align 8
  %arrayidx11 = getelementptr inbounds i32, i32* %13, i64 %idxprom
  %14 = load i32, i32* %arrayidx11, align 4
  %tobool12 = icmp ne i32 %14, 0
  br i1 %tobool12, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %for.body
  %15 = load i8, i8* %new_alpha, align 1
  %conv13 = zext i8 %15 to i32
  %cmp14 = icmp sgt i32 %conv13, 127
  br i1 %cmp14, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %16 = load i32, i32* %b, align 4
  %idxprom16 = zext i32 %16 to i64
  %17 = load i8*, i8** %src2.addr, align 8
  %arrayidx17 = getelementptr inbounds i8, i8* %17, i64 %idxprom16
  %18 = load i8, i8* %arrayidx17, align 1
  %conv18 = zext i8 %18 to i32
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %for.body
  %19 = load i32, i32* %b, align 4
  %idxprom19 = zext i32 %19 to i64
  %20 = load i8*, i8** %src1.addr, align 8
  %arrayidx20 = getelementptr inbounds i8, i8* %20, i64 %idxprom19
  %21 = load i8, i8* %arrayidx20, align 1
  %conv21 = zext i8 %21 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv18, %cond.true ], [ %conv21, %cond.false ]
  %conv22 = trunc i32 %cond to i8
  %22 = load i32, i32* %b, align 4
  %idxprom23 = zext i32 %22 to i64
  %23 = load i8*, i8** %dest.addr, align 8
  %arrayidx24 = getelementptr inbounds i8, i8* %23, i64 %idxprom23
  store i8 %conv22, i8* %arrayidx24, align 1
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %24 = load i32, i32* %b, align 4
  %inc = add i32 %24, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %25 = load i8*, i8** %m, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %25, i32 1
  store i8* %incdec.ptr, i8** %m, align 8
  %26 = load i32, i32* %bytes.addr, align 4
  %27 = load i8*, i8** %src1.addr, align 8
  %idx.ext = zext i32 %26 to i64
  %add.ptr = getelementptr inbounds i8, i8* %27, i64 %idx.ext
  store i8* %add.ptr, i8** %src1.addr, align 8
  %28 = load i8*, i8** %src2.addr, align 8
  %add.ptr25 = getelementptr inbounds i8, i8* %28, i64 2
  store i8* %add.ptr25, i8** %src2.addr, align 8
  %29 = load i32, i32* %bytes.addr, align 4
  %30 = load i8*, i8** %dest.addr, align 8
  %idx.ext26 = zext i32 %29 to i64
  %add.ptr27 = getelementptr inbounds i8, i8* %30, i64 %idx.ext26
  store i8* %add.ptr27, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.else:                                          ; preds = %entry
  br label %while.cond.28

while.cond.28:                                    ; preds = %for.end.73, %if.else
  %31 = load i32, i32* %length.addr, align 4
  %dec29 = add i32 %31, -1
  store i32 %dec29, i32* %length.addr, align 4
  %tobool30 = icmp ne i32 %31, 0
  br i1 %tobool30, label %while.body.31, label %while.end.79

while.body.31:                                    ; preds = %while.cond.28
  %32 = load i8*, i8** %src2.addr, align 8
  %arrayidx36 = getelementptr inbounds i8, i8* %32, i64 1
  %33 = load i8, i8* %arrayidx36, align 1
  %conv37 = zext i8 %33 to i32
  %34 = load i32, i32* %opacity.addr, align 4
  %mul38 = mul i32 %conv37, %34
  %add39 = add i32 %mul38, 128
  %conv40 = zext i32 %add39 to i64
  store i64 %conv40, i64* %tmp33, align 8
  %35 = load i64, i64* %tmp33, align 8
  %shr41 = lshr i64 %35, 8
  %36 = load i64, i64* %tmp33, align 8
  %add42 = add i64 %shr41, %36
  %shr43 = lshr i64 %add42, 8
  %conv44 = trunc i64 %shr43 to i8
  store i8 %conv44, i8* %new_alpha35, align 1
  store i32 0, i32* %b46, align 4
  br label %for.cond.47

for.cond.47:                                      ; preds = %for.inc.71, %while.body.31
  %37 = load i32, i32* %b46, align 4
  %38 = load i32, i32* %bytes.addr, align 4
  %cmp48 = icmp ult i32 %37, %38
  br i1 %cmp48, label %for.body.50, label %for.end.73

for.body.50:                                      ; preds = %for.cond.47
  %39 = load i32, i32* %b46, align 4
  %idxprom51 = zext i32 %39 to i64
  %40 = load i32*, i32** %affect.addr, align 8
  %arrayidx52 = getelementptr inbounds i32, i32* %40, i64 %idxprom51
  %41 = load i32, i32* %arrayidx52, align 4
  %tobool53 = icmp ne i32 %41, 0
  br i1 %tobool53, label %land.lhs.true.54, label %cond.false.62

land.lhs.true.54:                                 ; preds = %for.body.50
  %42 = load i8, i8* %new_alpha35, align 1
  %conv55 = zext i8 %42 to i32
  %cmp56 = icmp sgt i32 %conv55, 127
  br i1 %cmp56, label %cond.true.58, label %cond.false.62

cond.true.58:                                     ; preds = %land.lhs.true.54
  %43 = load i32, i32* %b46, align 4
  %idxprom59 = zext i32 %43 to i64
  %44 = load i8*, i8** %src2.addr, align 8
  %arrayidx60 = getelementptr inbounds i8, i8* %44, i64 %idxprom59
  %45 = load i8, i8* %arrayidx60, align 1
  %conv61 = zext i8 %45 to i32
  br label %cond.end.66

cond.false.62:                                    ; preds = %land.lhs.true.54, %for.body.50
  %46 = load i32, i32* %b46, align 4
  %idxprom63 = zext i32 %46 to i64
  %47 = load i8*, i8** %src1.addr, align 8
  %arrayidx64 = getelementptr inbounds i8, i8* %47, i64 %idxprom63
  %48 = load i8, i8* %arrayidx64, align 1
  %conv65 = zext i8 %48 to i32
  br label %cond.end.66

cond.end.66:                                      ; preds = %cond.false.62, %cond.true.58
  %cond67 = phi i32 [ %conv61, %cond.true.58 ], [ %conv65, %cond.false.62 ]
  %conv68 = trunc i32 %cond67 to i8
  %49 = load i32, i32* %b46, align 4
  %idxprom69 = zext i32 %49 to i64
  %50 = load i8*, i8** %dest.addr, align 8
  %arrayidx70 = getelementptr inbounds i8, i8* %50, i64 %idxprom69
  store i8 %conv68, i8* %arrayidx70, align 1
  br label %for.inc.71

for.inc.71:                                       ; preds = %cond.end.66
  %51 = load i32, i32* %b46, align 4
  %inc72 = add i32 %51, 1
  store i32 %inc72, i32* %b46, align 4
  br label %for.cond.47

for.end.73:                                       ; preds = %for.cond.47
  %52 = load i32, i32* %bytes.addr, align 4
  %53 = load i8*, i8** %src1.addr, align 8
  %idx.ext74 = zext i32 %52 to i64
  %add.ptr75 = getelementptr inbounds i8, i8* %53, i64 %idx.ext74
  store i8* %add.ptr75, i8** %src1.addr, align 8
  %54 = load i8*, i8** %src2.addr, align 8
  %add.ptr76 = getelementptr inbounds i8, i8* %54, i64 2
  store i8* %add.ptr76, i8** %src2.addr, align 8
  %55 = load i32, i32* %bytes.addr, align 4
  %56 = load i8*, i8** %dest.addr, align 8
  %idx.ext77 = zext i32 %55 to i64
  %add.ptr78 = getelementptr inbounds i8, i8* %56, i64 %idx.ext77
  store i8* %add.ptr78, i8** %dest.addr, align 8
  br label %while.cond.28

while.end.79:                                     ; preds = %while.cond.28
  br label %if.end

if.end:                                           ; preds = %while.end.79, %while.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @combine_indexed_a_and_indexed_a_pixels(i8* %src1, i8* %src2, i8* %dest, i8* %mask, i32 %opacity, i32* %affect, i32 %length, i32 %bytes) #0 {
entry:
  %src1.addr = alloca i8*, align 8
  %src2.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %opacity.addr = alloca i32, align 4
  %affect.addr = alloca i32*, align 8
  %length.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %alpha = alloca i32, align 4
  %m = alloca i8*, align 8
  %tmp = alloca i64, align 8
  %new_alpha = alloca i8, align 1
  %b = alloca i32, align 4
  %tmp48 = alloca i64, align 8
  %new_alpha50 = alloca i8, align 1
  %b61 = alloca i32, align 4
  store i8* %src1, i8** %src1.addr, align 8
  store i8* %src2, i8** %src2.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32* %affect, i32** %affect.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  store i32 1, i32* %alpha, align 4
  %0 = load i8*, i8** %mask.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %mask.addr, align 8
  store i8* %1, i8** %m, align 8
  br label %while.cond

while.cond:                                       ; preds = %cond.end.35, %if.then
  %2 = load i32, i32* %length.addr, align 4
  %dec = add i32 %2, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool1 = icmp ne i32 %2, 0
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %src2.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 1
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %5 = load i8*, i8** %m, align 8
  %6 = load i8, i8* %5, align 1
  %conv3 = zext i8 %6 to i32
  %mul = mul nsw i32 %conv, %conv3
  %7 = load i32, i32* %opacity.addr, align 4
  %mul4 = mul i32 %mul, %7
  %add = add i32 %mul4, 32603
  %conv5 = zext i32 %add to i64
  store i64 %conv5, i64* %tmp, align 8
  %8 = load i64, i64* %tmp, align 8
  %shr = lshr i64 %8, 7
  %9 = load i64, i64* %tmp, align 8
  %add6 = add i64 %shr, %9
  %shr7 = lshr i64 %add6, 16
  %conv8 = trunc i64 %shr7 to i8
  store i8 %conv8, i8* %new_alpha, align 1
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %10 = load i32, i32* %b, align 4
  %cmp = icmp ult i32 %10, 1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i32, i32* %b, align 4
  %idxprom = zext i32 %11 to i64
  %12 = load i32*, i32** %affect.addr, align 8
  %arrayidx11 = getelementptr inbounds i32, i32* %12, i64 %idxprom
  %13 = load i32, i32* %arrayidx11, align 4
  %tobool12 = icmp ne i32 %13, 0
  br i1 %tobool12, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %for.body
  %14 = load i8, i8* %new_alpha, align 1
  %conv13 = zext i8 %14 to i32
  %cmp14 = icmp sgt i32 %conv13, 127
  br i1 %cmp14, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %15 = load i32, i32* %b, align 4
  %idxprom16 = zext i32 %15 to i64
  %16 = load i8*, i8** %src2.addr, align 8
  %arrayidx17 = getelementptr inbounds i8, i8* %16, i64 %idxprom16
  %17 = load i8, i8* %arrayidx17, align 1
  %conv18 = zext i8 %17 to i32
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %for.body
  %18 = load i32, i32* %b, align 4
  %idxprom19 = zext i32 %18 to i64
  %19 = load i8*, i8** %src1.addr, align 8
  %arrayidx20 = getelementptr inbounds i8, i8* %19, i64 %idxprom19
  %20 = load i8, i8* %arrayidx20, align 1
  %conv21 = zext i8 %20 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv18, %cond.true ], [ %conv21, %cond.false ]
  %conv22 = trunc i32 %cond to i8
  %21 = load i32, i32* %b, align 4
  %idxprom23 = zext i32 %21 to i64
  %22 = load i8*, i8** %dest.addr, align 8
  %arrayidx24 = getelementptr inbounds i8, i8* %22, i64 %idxprom23
  store i8 %conv22, i8* %arrayidx24, align 1
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %23 = load i32, i32* %b, align 4
  %inc = add i32 %23, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load i32*, i32** %affect.addr, align 8
  %arrayidx25 = getelementptr inbounds i32, i32* %24, i64 1
  %25 = load i32, i32* %arrayidx25, align 4
  %tobool26 = icmp ne i32 %25, 0
  br i1 %tobool26, label %land.lhs.true.27, label %cond.false.32

land.lhs.true.27:                                 ; preds = %for.end
  %26 = load i8, i8* %new_alpha, align 1
  %conv28 = zext i8 %26 to i32
  %cmp29 = icmp sgt i32 %conv28, 127
  br i1 %cmp29, label %cond.true.31, label %cond.false.32

cond.true.31:                                     ; preds = %land.lhs.true.27
  br label %cond.end.35

cond.false.32:                                    ; preds = %land.lhs.true.27, %for.end
  %27 = load i8*, i8** %src1.addr, align 8
  %arrayidx33 = getelementptr inbounds i8, i8* %27, i64 1
  %28 = load i8, i8* %arrayidx33, align 1
  %conv34 = zext i8 %28 to i32
  br label %cond.end.35

cond.end.35:                                      ; preds = %cond.false.32, %cond.true.31
  %cond36 = phi i32 [ 255, %cond.true.31 ], [ %conv34, %cond.false.32 ]
  %conv37 = trunc i32 %cond36 to i8
  %29 = load i8*, i8** %dest.addr, align 8
  %arrayidx38 = getelementptr inbounds i8, i8* %29, i64 1
  store i8 %conv37, i8* %arrayidx38, align 1
  %30 = load i8*, i8** %m, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %30, i32 1
  store i8* %incdec.ptr, i8** %m, align 8
  %31 = load i32, i32* %bytes.addr, align 4
  %32 = load i8*, i8** %src1.addr, align 8
  %idx.ext = zext i32 %31 to i64
  %add.ptr = getelementptr inbounds i8, i8* %32, i64 %idx.ext
  store i8* %add.ptr, i8** %src1.addr, align 8
  %33 = load i32, i32* %bytes.addr, align 4
  %34 = load i8*, i8** %src2.addr, align 8
  %idx.ext39 = zext i32 %33 to i64
  %add.ptr40 = getelementptr inbounds i8, i8* %34, i64 %idx.ext39
  store i8* %add.ptr40, i8** %src2.addr, align 8
  %35 = load i32, i32* %bytes.addr, align 4
  %36 = load i8*, i8** %dest.addr, align 8
  %idx.ext41 = zext i32 %35 to i64
  %add.ptr42 = getelementptr inbounds i8, i8* %36, i64 %idx.ext41
  store i8* %add.ptr42, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.else:                                          ; preds = %entry
  br label %while.cond.43

while.cond.43:                                    ; preds = %cond.end.99, %if.else
  %37 = load i32, i32* %length.addr, align 4
  %dec44 = add i32 %37, -1
  store i32 %dec44, i32* %length.addr, align 4
  %tobool45 = icmp ne i32 %37, 0
  br i1 %tobool45, label %while.body.46, label %while.end.109

while.body.46:                                    ; preds = %while.cond.43
  %38 = load i8*, i8** %src2.addr, align 8
  %arrayidx51 = getelementptr inbounds i8, i8* %38, i64 1
  %39 = load i8, i8* %arrayidx51, align 1
  %conv52 = zext i8 %39 to i32
  %40 = load i32, i32* %opacity.addr, align 4
  %mul53 = mul i32 %conv52, %40
  %add54 = add i32 %mul53, 128
  %conv55 = zext i32 %add54 to i64
  store i64 %conv55, i64* %tmp48, align 8
  %41 = load i64, i64* %tmp48, align 8
  %shr56 = lshr i64 %41, 8
  %42 = load i64, i64* %tmp48, align 8
  %add57 = add i64 %shr56, %42
  %shr58 = lshr i64 %add57, 8
  %conv59 = trunc i64 %shr58 to i8
  store i8 %conv59, i8* %new_alpha50, align 1
  store i32 0, i32* %b61, align 4
  br label %for.cond.62

for.cond.62:                                      ; preds = %for.inc.86, %while.body.46
  %43 = load i32, i32* %b61, align 4
  %cmp63 = icmp ult i32 %43, 1
  br i1 %cmp63, label %for.body.65, label %for.end.88

for.body.65:                                      ; preds = %for.cond.62
  %44 = load i32, i32* %b61, align 4
  %idxprom66 = zext i32 %44 to i64
  %45 = load i32*, i32** %affect.addr, align 8
  %arrayidx67 = getelementptr inbounds i32, i32* %45, i64 %idxprom66
  %46 = load i32, i32* %arrayidx67, align 4
  %tobool68 = icmp ne i32 %46, 0
  br i1 %tobool68, label %land.lhs.true.69, label %cond.false.77

land.lhs.true.69:                                 ; preds = %for.body.65
  %47 = load i8, i8* %new_alpha50, align 1
  %conv70 = zext i8 %47 to i32
  %cmp71 = icmp sgt i32 %conv70, 127
  br i1 %cmp71, label %cond.true.73, label %cond.false.77

cond.true.73:                                     ; preds = %land.lhs.true.69
  %48 = load i32, i32* %b61, align 4
  %idxprom74 = zext i32 %48 to i64
  %49 = load i8*, i8** %src2.addr, align 8
  %arrayidx75 = getelementptr inbounds i8, i8* %49, i64 %idxprom74
  %50 = load i8, i8* %arrayidx75, align 1
  %conv76 = zext i8 %50 to i32
  br label %cond.end.81

cond.false.77:                                    ; preds = %land.lhs.true.69, %for.body.65
  %51 = load i32, i32* %b61, align 4
  %idxprom78 = zext i32 %51 to i64
  %52 = load i8*, i8** %src1.addr, align 8
  %arrayidx79 = getelementptr inbounds i8, i8* %52, i64 %idxprom78
  %53 = load i8, i8* %arrayidx79, align 1
  %conv80 = zext i8 %53 to i32
  br label %cond.end.81

cond.end.81:                                      ; preds = %cond.false.77, %cond.true.73
  %cond82 = phi i32 [ %conv76, %cond.true.73 ], [ %conv80, %cond.false.77 ]
  %conv83 = trunc i32 %cond82 to i8
  %54 = load i32, i32* %b61, align 4
  %idxprom84 = zext i32 %54 to i64
  %55 = load i8*, i8** %dest.addr, align 8
  %arrayidx85 = getelementptr inbounds i8, i8* %55, i64 %idxprom84
  store i8 %conv83, i8* %arrayidx85, align 1
  br label %for.inc.86

for.inc.86:                                       ; preds = %cond.end.81
  %56 = load i32, i32* %b61, align 4
  %inc87 = add i32 %56, 1
  store i32 %inc87, i32* %b61, align 4
  br label %for.cond.62

for.end.88:                                       ; preds = %for.cond.62
  %57 = load i32*, i32** %affect.addr, align 8
  %arrayidx89 = getelementptr inbounds i32, i32* %57, i64 1
  %58 = load i32, i32* %arrayidx89, align 4
  %tobool90 = icmp ne i32 %58, 0
  br i1 %tobool90, label %land.lhs.true.91, label %cond.false.96

land.lhs.true.91:                                 ; preds = %for.end.88
  %59 = load i8, i8* %new_alpha50, align 1
  %conv92 = zext i8 %59 to i32
  %cmp93 = icmp sgt i32 %conv92, 127
  br i1 %cmp93, label %cond.true.95, label %cond.false.96

cond.true.95:                                     ; preds = %land.lhs.true.91
  br label %cond.end.99

cond.false.96:                                    ; preds = %land.lhs.true.91, %for.end.88
  %60 = load i8*, i8** %src1.addr, align 8
  %arrayidx97 = getelementptr inbounds i8, i8* %60, i64 1
  %61 = load i8, i8* %arrayidx97, align 1
  %conv98 = zext i8 %61 to i32
  br label %cond.end.99

cond.end.99:                                      ; preds = %cond.false.96, %cond.true.95
  %cond100 = phi i32 [ 255, %cond.true.95 ], [ %conv98, %cond.false.96 ]
  %conv101 = trunc i32 %cond100 to i8
  %62 = load i8*, i8** %dest.addr, align 8
  %arrayidx102 = getelementptr inbounds i8, i8* %62, i64 1
  store i8 %conv101, i8* %arrayidx102, align 1
  %63 = load i32, i32* %bytes.addr, align 4
  %64 = load i8*, i8** %src1.addr, align 8
  %idx.ext103 = zext i32 %63 to i64
  %add.ptr104 = getelementptr inbounds i8, i8* %64, i64 %idx.ext103
  store i8* %add.ptr104, i8** %src1.addr, align 8
  %65 = load i32, i32* %bytes.addr, align 4
  %66 = load i8*, i8** %src2.addr, align 8
  %idx.ext105 = zext i32 %65 to i64
  %add.ptr106 = getelementptr inbounds i8, i8* %66, i64 %idx.ext105
  store i8* %add.ptr106, i8** %src2.addr, align 8
  %67 = load i32, i32* %bytes.addr, align 4
  %68 = load i8*, i8** %dest.addr, align 8
  %idx.ext107 = zext i32 %67 to i64
  %add.ptr108 = getelementptr inbounds i8, i8* %68, i64 %idx.ext107
  store i8* %add.ptr108, i8** %dest.addr, align 8
  br label %while.cond.43

while.end.109:                                    ; preds = %while.cond.43
  br label %if.end

if.end:                                           ; preds = %while.end.109, %while.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @combine_inten_a_and_indexed_pixels(i8* %src1, i8* %src2, i8* %dest, i8* %mask, i8* %cmap, i32 %opacity, i32 %length, i32 %bytes) #0 {
entry:
  %src1.addr = alloca i8*, align 8
  %src2.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %cmap.addr = alloca i8*, align 8
  %opacity.addr = alloca i32, align 4
  %length.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %src2_bytes = alloca i32, align 4
  %m = alloca i8*, align 8
  %tmp = alloca i64, align 8
  %index = alloca i32, align 4
  %new_alpha = alloca i8, align 1
  %b = alloca i32, align 4
  %tmp46 = alloca i64, align 8
  %index48 = alloca i32, align 4
  %new_alpha53 = alloca i8, align 1
  %b62 = alloca i32, align 4
  store i8* %src1, i8** %src1.addr, align 8
  store i8* %src2, i8** %src2.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store i8* %cmap, i8** %cmap.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  store i32 1, i32* %src2_bytes, align 4
  %0 = load i8*, i8** %mask.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %mask.addr, align 8
  store i8* %1, i8** %m, align 8
  br label %while.cond

while.cond:                                       ; preds = %cond.end.33, %if.then
  %2 = load i32, i32* %length.addr, align 4
  %dec = add i32 %2, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool1 = icmp ne i32 %2, 0
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %src2.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 0
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %mul = mul nsw i32 %conv, 3
  store i32 %mul, i32* %index, align 4
  %5 = load i8*, i8** %m, align 8
  %6 = load i8, i8* %5, align 1
  %conv4 = zext i8 %6 to i32
  %mul5 = mul nsw i32 255, %conv4
  %7 = load i32, i32* %opacity.addr, align 4
  %mul6 = mul i32 %mul5, %7
  %add = add i32 %mul6, 32603
  %conv7 = zext i32 %add to i64
  store i64 %conv7, i64* %tmp, align 8
  %8 = load i64, i64* %tmp, align 8
  %shr = lshr i64 %8, 7
  %9 = load i64, i64* %tmp, align 8
  %add8 = add i64 %shr, %9
  %shr9 = lshr i64 %add8, 16
  %conv10 = trunc i64 %shr9 to i8
  store i8 %conv10, i8* %new_alpha, align 1
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %10 = load i32, i32* %b, align 4
  %11 = load i32, i32* %bytes.addr, align 4
  %sub = sub i32 %11, 1
  %cmp = icmp ult i32 %10, %sub
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i8, i8* %new_alpha, align 1
  %conv13 = zext i8 %12 to i32
  %cmp14 = icmp sgt i32 %conv13, 127
  br i1 %cmp14, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %13 = load i32, i32* %index, align 4
  %14 = load i32, i32* %b, align 4
  %add16 = add i32 %13, %14
  %idxprom = zext i32 %add16 to i64
  %15 = load i8*, i8** %cmap.addr, align 8
  %arrayidx17 = getelementptr inbounds i8, i8* %15, i64 %idxprom
  %16 = load i8, i8* %arrayidx17, align 1
  %conv18 = zext i8 %16 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %17 = load i32, i32* %b, align 4
  %idxprom19 = zext i32 %17 to i64
  %18 = load i8*, i8** %src1.addr, align 8
  %arrayidx20 = getelementptr inbounds i8, i8* %18, i64 %idxprom19
  %19 = load i8, i8* %arrayidx20, align 1
  %conv21 = zext i8 %19 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv18, %cond.true ], [ %conv21, %cond.false ]
  %conv22 = trunc i32 %cond to i8
  %20 = load i32, i32* %b, align 4
  %idxprom23 = zext i32 %20 to i64
  %21 = load i8*, i8** %dest.addr, align 8
  %arrayidx24 = getelementptr inbounds i8, i8* %21, i64 %idxprom23
  store i8 %conv22, i8* %arrayidx24, align 1
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %22 = load i32, i32* %b, align 4
  %inc = add i32 %22, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %23 = load i8, i8* %new_alpha, align 1
  %conv25 = zext i8 %23 to i32
  %cmp26 = icmp sgt i32 %conv25, 127
  br i1 %cmp26, label %cond.true.28, label %cond.false.29

cond.true.28:                                     ; preds = %for.end
  br label %cond.end.33

cond.false.29:                                    ; preds = %for.end
  %24 = load i32, i32* %b, align 4
  %idxprom30 = zext i32 %24 to i64
  %25 = load i8*, i8** %src1.addr, align 8
  %arrayidx31 = getelementptr inbounds i8, i8* %25, i64 %idxprom30
  %26 = load i8, i8* %arrayidx31, align 1
  %conv32 = zext i8 %26 to i32
  br label %cond.end.33

cond.end.33:                                      ; preds = %cond.false.29, %cond.true.28
  %cond34 = phi i32 [ 255, %cond.true.28 ], [ %conv32, %cond.false.29 ]
  %conv35 = trunc i32 %cond34 to i8
  %27 = load i32, i32* %b, align 4
  %idxprom36 = zext i32 %27 to i64
  %28 = load i8*, i8** %dest.addr, align 8
  %arrayidx37 = getelementptr inbounds i8, i8* %28, i64 %idxprom36
  store i8 %conv35, i8* %arrayidx37, align 1
  %29 = load i8*, i8** %m, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %29, i32 1
  store i8* %incdec.ptr, i8** %m, align 8
  %30 = load i32, i32* %bytes.addr, align 4
  %31 = load i8*, i8** %src1.addr, align 8
  %idx.ext = zext i32 %30 to i64
  %add.ptr = getelementptr inbounds i8, i8* %31, i64 %idx.ext
  store i8* %add.ptr, i8** %src1.addr, align 8
  %32 = load i8*, i8** %src2.addr, align 8
  %add.ptr38 = getelementptr inbounds i8, i8* %32, i64 1
  store i8* %add.ptr38, i8** %src2.addr, align 8
  %33 = load i32, i32* %bytes.addr, align 4
  %34 = load i8*, i8** %dest.addr, align 8
  %idx.ext39 = zext i32 %33 to i64
  %add.ptr40 = getelementptr inbounds i8, i8* %34, i64 %idx.ext39
  store i8* %add.ptr40, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.else:                                          ; preds = %entry
  br label %while.cond.41

while.cond.41:                                    ; preds = %cond.end.96, %if.else
  %35 = load i32, i32* %length.addr, align 4
  %dec42 = add i32 %35, -1
  store i32 %dec42, i32* %length.addr, align 4
  %tobool43 = icmp ne i32 %35, 0
  br i1 %tobool43, label %while.body.44, label %while.end.106

while.body.44:                                    ; preds = %while.cond.41
  %36 = load i8*, i8** %src2.addr, align 8
  %arrayidx49 = getelementptr inbounds i8, i8* %36, i64 0
  %37 = load i8, i8* %arrayidx49, align 1
  %conv50 = zext i8 %37 to i32
  %mul51 = mul nsw i32 %conv50, 3
  store i32 %mul51, i32* %index48, align 4
  %38 = load i32, i32* %opacity.addr, align 4
  %mul54 = mul i32 255, %38
  %add55 = add i32 %mul54, 128
  %conv56 = zext i32 %add55 to i64
  store i64 %conv56, i64* %tmp46, align 8
  %39 = load i64, i64* %tmp46, align 8
  %shr57 = lshr i64 %39, 8
  %40 = load i64, i64* %tmp46, align 8
  %add58 = add i64 %shr57, %40
  %shr59 = lshr i64 %add58, 8
  %conv60 = trunc i64 %shr59 to i8
  store i8 %conv60, i8* %new_alpha53, align 1
  store i32 0, i32* %b62, align 4
  br label %for.cond.63

for.cond.63:                                      ; preds = %for.inc.85, %while.body.44
  %41 = load i32, i32* %b62, align 4
  %42 = load i32, i32* %bytes.addr, align 4
  %sub64 = sub i32 %42, 1
  %cmp65 = icmp ult i32 %41, %sub64
  br i1 %cmp65, label %for.body.67, label %for.end.87

for.body.67:                                      ; preds = %for.cond.63
  %43 = load i8, i8* %new_alpha53, align 1
  %conv68 = zext i8 %43 to i32
  %cmp69 = icmp sgt i32 %conv68, 127
  br i1 %cmp69, label %cond.true.71, label %cond.false.76

cond.true.71:                                     ; preds = %for.body.67
  %44 = load i32, i32* %index48, align 4
  %45 = load i32, i32* %b62, align 4
  %add72 = add i32 %44, %45
  %idxprom73 = zext i32 %add72 to i64
  %46 = load i8*, i8** %cmap.addr, align 8
  %arrayidx74 = getelementptr inbounds i8, i8* %46, i64 %idxprom73
  %47 = load i8, i8* %arrayidx74, align 1
  %conv75 = zext i8 %47 to i32
  br label %cond.end.80

cond.false.76:                                    ; preds = %for.body.67
  %48 = load i32, i32* %b62, align 4
  %idxprom77 = zext i32 %48 to i64
  %49 = load i8*, i8** %src1.addr, align 8
  %arrayidx78 = getelementptr inbounds i8, i8* %49, i64 %idxprom77
  %50 = load i8, i8* %arrayidx78, align 1
  %conv79 = zext i8 %50 to i32
  br label %cond.end.80

cond.end.80:                                      ; preds = %cond.false.76, %cond.true.71
  %cond81 = phi i32 [ %conv75, %cond.true.71 ], [ %conv79, %cond.false.76 ]
  %conv82 = trunc i32 %cond81 to i8
  %51 = load i32, i32* %b62, align 4
  %idxprom83 = zext i32 %51 to i64
  %52 = load i8*, i8** %dest.addr, align 8
  %arrayidx84 = getelementptr inbounds i8, i8* %52, i64 %idxprom83
  store i8 %conv82, i8* %arrayidx84, align 1
  br label %for.inc.85

for.inc.85:                                       ; preds = %cond.end.80
  %53 = load i32, i32* %b62, align 4
  %inc86 = add i32 %53, 1
  store i32 %inc86, i32* %b62, align 4
  br label %for.cond.63

for.end.87:                                       ; preds = %for.cond.63
  %54 = load i8, i8* %new_alpha53, align 1
  %conv88 = zext i8 %54 to i32
  %cmp89 = icmp sgt i32 %conv88, 127
  br i1 %cmp89, label %cond.true.91, label %cond.false.92

cond.true.91:                                     ; preds = %for.end.87
  br label %cond.end.96

cond.false.92:                                    ; preds = %for.end.87
  %55 = load i32, i32* %b62, align 4
  %idxprom93 = zext i32 %55 to i64
  %56 = load i8*, i8** %src1.addr, align 8
  %arrayidx94 = getelementptr inbounds i8, i8* %56, i64 %idxprom93
  %57 = load i8, i8* %arrayidx94, align 1
  %conv95 = zext i8 %57 to i32
  br label %cond.end.96

cond.end.96:                                      ; preds = %cond.false.92, %cond.true.91
  %cond97 = phi i32 [ 255, %cond.true.91 ], [ %conv95, %cond.false.92 ]
  %conv98 = trunc i32 %cond97 to i8
  %58 = load i32, i32* %b62, align 4
  %idxprom99 = zext i32 %58 to i64
  %59 = load i8*, i8** %dest.addr, align 8
  %arrayidx100 = getelementptr inbounds i8, i8* %59, i64 %idxprom99
  store i8 %conv98, i8* %arrayidx100, align 1
  %60 = load i32, i32* %bytes.addr, align 4
  %61 = load i8*, i8** %src1.addr, align 8
  %idx.ext101 = zext i32 %60 to i64
  %add.ptr102 = getelementptr inbounds i8, i8* %61, i64 %idx.ext101
  store i8* %add.ptr102, i8** %src1.addr, align 8
  %62 = load i8*, i8** %src2.addr, align 8
  %add.ptr103 = getelementptr inbounds i8, i8* %62, i64 1
  store i8* %add.ptr103, i8** %src2.addr, align 8
  %63 = load i32, i32* %bytes.addr, align 4
  %64 = load i8*, i8** %dest.addr, align 8
  %idx.ext104 = zext i32 %63 to i64
  %add.ptr105 = getelementptr inbounds i8, i8* %64, i64 %idx.ext104
  store i8* %add.ptr105, i8** %dest.addr, align 8
  br label %while.cond.41

while.end.106:                                    ; preds = %while.cond.41
  br label %if.end

if.end:                                           ; preds = %while.end.106, %while.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @combine_inten_a_and_indexed_a_pixels(i8* %src1, i8* %src2, i8* %dest, i8* %mask, i8* %cmap, i32 %opacity, i32 %length, i32 %bytes) #0 {
entry:
  %src1.addr = alloca i8*, align 8
  %src2.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %cmap.addr = alloca i8*, align 8
  %opacity.addr = alloca i32, align 4
  %length.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %alpha = alloca i32, align 4
  %src2_bytes = alloca i32, align 4
  %m = alloca i8*, align 8
  %tmp = alloca i64, align 8
  %index = alloca i32, align 4
  %new_alpha = alloca i8, align 1
  %b = alloca i32, align 4
  %tmp48 = alloca i64, align 8
  %index50 = alloca i32, align 4
  %new_alpha55 = alloca i8, align 1
  %b66 = alloca i32, align 4
  store i8* %src1, i8** %src1.addr, align 8
  store i8* %src2, i8** %src2.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store i8* %cmap, i8** %cmap.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  store i32 1, i32* %alpha, align 4
  store i32 2, i32* %src2_bytes, align 4
  %0 = load i8*, i8** %mask.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %mask.addr, align 8
  store i8* %1, i8** %m, align 8
  br label %while.cond

while.cond:                                       ; preds = %cond.end.35, %if.then
  %2 = load i32, i32* %length.addr, align 4
  %dec = add i32 %2, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool1 = icmp ne i32 %2, 0
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %src2.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 0
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %mul = mul nsw i32 %conv, 3
  store i32 %mul, i32* %index, align 4
  %5 = load i8*, i8** %src2.addr, align 8
  %arrayidx4 = getelementptr inbounds i8, i8* %5, i64 1
  %6 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %6 to i32
  %7 = load i8*, i8** %m, align 8
  %8 = load i8, i8* %7, align 1
  %conv6 = zext i8 %8 to i32
  %mul7 = mul nsw i32 %conv5, %conv6
  %9 = load i32, i32* %opacity.addr, align 4
  %mul8 = mul i32 %mul7, %9
  %add = add i32 %mul8, 32603
  %conv9 = zext i32 %add to i64
  store i64 %conv9, i64* %tmp, align 8
  %10 = load i64, i64* %tmp, align 8
  %shr = lshr i64 %10, 7
  %11 = load i64, i64* %tmp, align 8
  %add10 = add i64 %shr, %11
  %shr11 = lshr i64 %add10, 16
  %conv12 = trunc i64 %shr11 to i8
  store i8 %conv12, i8* %new_alpha, align 1
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %12 = load i32, i32* %b, align 4
  %13 = load i32, i32* %bytes.addr, align 4
  %sub = sub i32 %13, 1
  %cmp = icmp ult i32 %12, %sub
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load i8, i8* %new_alpha, align 1
  %conv15 = zext i8 %14 to i32
  %cmp16 = icmp sgt i32 %conv15, 127
  br i1 %cmp16, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %15 = load i32, i32* %index, align 4
  %16 = load i32, i32* %b, align 4
  %add18 = add i32 %15, %16
  %idxprom = zext i32 %add18 to i64
  %17 = load i8*, i8** %cmap.addr, align 8
  %arrayidx19 = getelementptr inbounds i8, i8* %17, i64 %idxprom
  %18 = load i8, i8* %arrayidx19, align 1
  %conv20 = zext i8 %18 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %19 = load i32, i32* %b, align 4
  %idxprom21 = zext i32 %19 to i64
  %20 = load i8*, i8** %src1.addr, align 8
  %arrayidx22 = getelementptr inbounds i8, i8* %20, i64 %idxprom21
  %21 = load i8, i8* %arrayidx22, align 1
  %conv23 = zext i8 %21 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv20, %cond.true ], [ %conv23, %cond.false ]
  %conv24 = trunc i32 %cond to i8
  %22 = load i32, i32* %b, align 4
  %idxprom25 = zext i32 %22 to i64
  %23 = load i8*, i8** %dest.addr, align 8
  %arrayidx26 = getelementptr inbounds i8, i8* %23, i64 %idxprom25
  store i8 %conv24, i8* %arrayidx26, align 1
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %24 = load i32, i32* %b, align 4
  %inc = add i32 %24, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %25 = load i8, i8* %new_alpha, align 1
  %conv27 = zext i8 %25 to i32
  %cmp28 = icmp sgt i32 %conv27, 127
  br i1 %cmp28, label %cond.true.30, label %cond.false.31

cond.true.30:                                     ; preds = %for.end
  br label %cond.end.35

cond.false.31:                                    ; preds = %for.end
  %26 = load i32, i32* %b, align 4
  %idxprom32 = zext i32 %26 to i64
  %27 = load i8*, i8** %src1.addr, align 8
  %arrayidx33 = getelementptr inbounds i8, i8* %27, i64 %idxprom32
  %28 = load i8, i8* %arrayidx33, align 1
  %conv34 = zext i8 %28 to i32
  br label %cond.end.35

cond.end.35:                                      ; preds = %cond.false.31, %cond.true.30
  %cond36 = phi i32 [ 255, %cond.true.30 ], [ %conv34, %cond.false.31 ]
  %conv37 = trunc i32 %cond36 to i8
  %29 = load i32, i32* %b, align 4
  %idxprom38 = zext i32 %29 to i64
  %30 = load i8*, i8** %dest.addr, align 8
  %arrayidx39 = getelementptr inbounds i8, i8* %30, i64 %idxprom38
  store i8 %conv37, i8* %arrayidx39, align 1
  %31 = load i8*, i8** %m, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %31, i32 1
  store i8* %incdec.ptr, i8** %m, align 8
  %32 = load i32, i32* %bytes.addr, align 4
  %33 = load i8*, i8** %src1.addr, align 8
  %idx.ext = zext i32 %32 to i64
  %add.ptr = getelementptr inbounds i8, i8* %33, i64 %idx.ext
  store i8* %add.ptr, i8** %src1.addr, align 8
  %34 = load i8*, i8** %src2.addr, align 8
  %add.ptr40 = getelementptr inbounds i8, i8* %34, i64 2
  store i8* %add.ptr40, i8** %src2.addr, align 8
  %35 = load i32, i32* %bytes.addr, align 4
  %36 = load i8*, i8** %dest.addr, align 8
  %idx.ext41 = zext i32 %35 to i64
  %add.ptr42 = getelementptr inbounds i8, i8* %36, i64 %idx.ext41
  store i8* %add.ptr42, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.else:                                          ; preds = %entry
  br label %while.cond.43

while.cond.43:                                    ; preds = %cond.end.100, %if.else
  %37 = load i32, i32* %length.addr, align 4
  %dec44 = add i32 %37, -1
  store i32 %dec44, i32* %length.addr, align 4
  %tobool45 = icmp ne i32 %37, 0
  br i1 %tobool45, label %while.body.46, label %while.end.110

while.body.46:                                    ; preds = %while.cond.43
  %38 = load i8*, i8** %src2.addr, align 8
  %arrayidx51 = getelementptr inbounds i8, i8* %38, i64 0
  %39 = load i8, i8* %arrayidx51, align 1
  %conv52 = zext i8 %39 to i32
  %mul53 = mul nsw i32 %conv52, 3
  store i32 %mul53, i32* %index50, align 4
  %40 = load i8*, i8** %src2.addr, align 8
  %arrayidx56 = getelementptr inbounds i8, i8* %40, i64 1
  %41 = load i8, i8* %arrayidx56, align 1
  %conv57 = zext i8 %41 to i32
  %42 = load i32, i32* %opacity.addr, align 4
  %mul58 = mul i32 %conv57, %42
  %add59 = add i32 %mul58, 128
  %conv60 = zext i32 %add59 to i64
  store i64 %conv60, i64* %tmp48, align 8
  %43 = load i64, i64* %tmp48, align 8
  %shr61 = lshr i64 %43, 8
  %44 = load i64, i64* %tmp48, align 8
  %add62 = add i64 %shr61, %44
  %shr63 = lshr i64 %add62, 8
  %conv64 = trunc i64 %shr63 to i8
  store i8 %conv64, i8* %new_alpha55, align 1
  store i32 0, i32* %b66, align 4
  br label %for.cond.67

for.cond.67:                                      ; preds = %for.inc.89, %while.body.46
  %45 = load i32, i32* %b66, align 4
  %46 = load i32, i32* %bytes.addr, align 4
  %sub68 = sub i32 %46, 1
  %cmp69 = icmp ult i32 %45, %sub68
  br i1 %cmp69, label %for.body.71, label %for.end.91

for.body.71:                                      ; preds = %for.cond.67
  %47 = load i8, i8* %new_alpha55, align 1
  %conv72 = zext i8 %47 to i32
  %cmp73 = icmp sgt i32 %conv72, 127
  br i1 %cmp73, label %cond.true.75, label %cond.false.80

cond.true.75:                                     ; preds = %for.body.71
  %48 = load i32, i32* %index50, align 4
  %49 = load i32, i32* %b66, align 4
  %add76 = add i32 %48, %49
  %idxprom77 = zext i32 %add76 to i64
  %50 = load i8*, i8** %cmap.addr, align 8
  %arrayidx78 = getelementptr inbounds i8, i8* %50, i64 %idxprom77
  %51 = load i8, i8* %arrayidx78, align 1
  %conv79 = zext i8 %51 to i32
  br label %cond.end.84

cond.false.80:                                    ; preds = %for.body.71
  %52 = load i32, i32* %b66, align 4
  %idxprom81 = zext i32 %52 to i64
  %53 = load i8*, i8** %src1.addr, align 8
  %arrayidx82 = getelementptr inbounds i8, i8* %53, i64 %idxprom81
  %54 = load i8, i8* %arrayidx82, align 1
  %conv83 = zext i8 %54 to i32
  br label %cond.end.84

cond.end.84:                                      ; preds = %cond.false.80, %cond.true.75
  %cond85 = phi i32 [ %conv79, %cond.true.75 ], [ %conv83, %cond.false.80 ]
  %conv86 = trunc i32 %cond85 to i8
  %55 = load i32, i32* %b66, align 4
  %idxprom87 = zext i32 %55 to i64
  %56 = load i8*, i8** %dest.addr, align 8
  %arrayidx88 = getelementptr inbounds i8, i8* %56, i64 %idxprom87
  store i8 %conv86, i8* %arrayidx88, align 1
  br label %for.inc.89

for.inc.89:                                       ; preds = %cond.end.84
  %57 = load i32, i32* %b66, align 4
  %inc90 = add i32 %57, 1
  store i32 %inc90, i32* %b66, align 4
  br label %for.cond.67

for.end.91:                                       ; preds = %for.cond.67
  %58 = load i8, i8* %new_alpha55, align 1
  %conv92 = zext i8 %58 to i32
  %cmp93 = icmp sgt i32 %conv92, 127
  br i1 %cmp93, label %cond.true.95, label %cond.false.96

cond.true.95:                                     ; preds = %for.end.91
  br label %cond.end.100

cond.false.96:                                    ; preds = %for.end.91
  %59 = load i32, i32* %b66, align 4
  %idxprom97 = zext i32 %59 to i64
  %60 = load i8*, i8** %src1.addr, align 8
  %arrayidx98 = getelementptr inbounds i8, i8* %60, i64 %idxprom97
  %61 = load i8, i8* %arrayidx98, align 1
  %conv99 = zext i8 %61 to i32
  br label %cond.end.100

cond.end.100:                                     ; preds = %cond.false.96, %cond.true.95
  %cond101 = phi i32 [ 255, %cond.true.95 ], [ %conv99, %cond.false.96 ]
  %conv102 = trunc i32 %cond101 to i8
  %62 = load i32, i32* %b66, align 4
  %idxprom103 = zext i32 %62 to i64
  %63 = load i8*, i8** %dest.addr, align 8
  %arrayidx104 = getelementptr inbounds i8, i8* %63, i64 %idxprom103
  store i8 %conv102, i8* %arrayidx104, align 1
  %64 = load i32, i32* %bytes.addr, align 4
  %65 = load i8*, i8** %src1.addr, align 8
  %idx.ext105 = zext i32 %64 to i64
  %add.ptr106 = getelementptr inbounds i8, i8* %65, i64 %idx.ext105
  store i8* %add.ptr106, i8** %src1.addr, align 8
  %66 = load i8*, i8** %src2.addr, align 8
  %add.ptr107 = getelementptr inbounds i8, i8* %66, i64 2
  store i8* %add.ptr107, i8** %src2.addr, align 8
  %67 = load i32, i32* %bytes.addr, align 4
  %68 = load i8*, i8** %dest.addr, align 8
  %idx.ext108 = zext i32 %67 to i64
  %add.ptr109 = getelementptr inbounds i8, i8* %68, i64 %idx.ext108
  store i8* %add.ptr109, i8** %dest.addr, align 8
  br label %while.cond.43

while.end.110:                                    ; preds = %while.cond.43
  br label %if.end

if.end:                                           ; preds = %while.end.110, %while.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @combine_inten_and_inten_pixels(i8* %src1, i8* %src2, i8* %dest, i8* %mask, i32 %opacity, i32* %affect, i32 %length, i32 %bytes) #0 {
entry:
  %src1.addr = alloca i8*, align 8
  %src2.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %opacity.addr = alloca i32, align 4
  %affect.addr = alloca i32*, align 8
  %length.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %m = alloca i8*, align 8
  %tmp = alloca i64, align 8
  %new_alpha = alloca i8, align 1
  %b = alloca i32, align 4
  %tmp42 = alloca i64, align 8
  %b44 = alloca i32, align 4
  store i8* %src1, i8** %src1.addr, align 8
  store i8* %src2, i8** %src2.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32* %affect, i32** %affect.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %0 = load i8*, i8** %mask.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %mask.addr, align 8
  store i8* %1, i8** %m, align 8
  br label %while.cond

while.cond:                                       ; preds = %for.end, %if.then
  %2 = load i32, i32* %length.addr, align 4
  %dec = add i32 %2, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool1 = icmp ne i32 %2, 0
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %m, align 8
  %4 = load i8, i8* %3, align 1
  %conv = zext i8 %4 to i32
  %5 = load i32, i32* %opacity.addr, align 4
  %mul = mul i32 %conv, %5
  %add = add i32 %mul, 128
  %conv3 = zext i32 %add to i64
  store i64 %conv3, i64* %tmp, align 8
  %6 = load i64, i64* %tmp, align 8
  %shr = lshr i64 %6, 8
  %7 = load i64, i64* %tmp, align 8
  %add4 = add i64 %shr, %7
  %shr5 = lshr i64 %add4, 8
  %conv6 = trunc i64 %shr5 to i8
  store i8 %conv6, i8* %new_alpha, align 1
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %8 = load i32, i32* %b, align 4
  %9 = load i32, i32* %bytes.addr, align 4
  %cmp = icmp ult i32 %8, %9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i32, i32* %b, align 4
  %idxprom = zext i32 %10 to i64
  %11 = load i32*, i32** %affect.addr, align 8
  %arrayidx = getelementptr inbounds i32, i32* %11, i64 %idxprom
  %12 = load i32, i32* %arrayidx, align 4
  %tobool9 = icmp ne i32 %12, 0
  br i1 %tobool9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %13 = load i32, i32* %b, align 4
  %idxprom10 = zext i32 %13 to i64
  %14 = load i8*, i8** %src2.addr, align 8
  %arrayidx11 = getelementptr inbounds i8, i8* %14, i64 %idxprom10
  %15 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %15 to i32
  %16 = load i32, i32* %b, align 4
  %idxprom13 = zext i32 %16 to i64
  %17 = load i8*, i8** %src1.addr, align 8
  %arrayidx14 = getelementptr inbounds i8, i8* %17, i64 %idxprom13
  %18 = load i8, i8* %arrayidx14, align 1
  %conv15 = zext i8 %18 to i32
  %sub = sub nsw i32 %conv12, %conv15
  %19 = load i8, i8* %new_alpha, align 1
  %conv16 = zext i8 %19 to i32
  %mul17 = mul nsw i32 %sub, %conv16
  %add18 = add nsw i32 %mul17, 128
  %conv19 = sext i32 %add18 to i64
  store i64 %conv19, i64* %tmp, align 8
  %20 = load i64, i64* %tmp, align 8
  %shr20 = lshr i64 %20, 8
  %21 = load i64, i64* %tmp, align 8
  %add21 = add i64 %shr20, %21
  %shr22 = lshr i64 %add21, 8
  %22 = load i32, i32* %b, align 4
  %idxprom23 = zext i32 %22 to i64
  %23 = load i8*, i8** %src1.addr, align 8
  %arrayidx24 = getelementptr inbounds i8, i8* %23, i64 %idxprom23
  %24 = load i8, i8* %arrayidx24, align 1
  %conv25 = zext i8 %24 to i64
  %add26 = add i64 %shr22, %conv25
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %25 = load i32, i32* %b, align 4
  %idxprom27 = zext i32 %25 to i64
  %26 = load i8*, i8** %src1.addr, align 8
  %arrayidx28 = getelementptr inbounds i8, i8* %26, i64 %idxprom27
  %27 = load i8, i8* %arrayidx28, align 1
  %conv29 = zext i8 %27 to i64
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %add26, %cond.true ], [ %conv29, %cond.false ]
  %conv30 = trunc i64 %cond to i8
  %28 = load i32, i32* %b, align 4
  %idxprom31 = zext i32 %28 to i64
  %29 = load i8*, i8** %dest.addr, align 8
  %arrayidx32 = getelementptr inbounds i8, i8* %29, i64 %idxprom31
  store i8 %conv30, i8* %arrayidx32, align 1
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %30 = load i32, i32* %b, align 4
  %inc = add i32 %30, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %31 = load i8*, i8** %m, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %31, i32 1
  store i8* %incdec.ptr, i8** %m, align 8
  %32 = load i32, i32* %bytes.addr, align 4
  %33 = load i8*, i8** %src1.addr, align 8
  %idx.ext = zext i32 %32 to i64
  %add.ptr = getelementptr inbounds i8, i8* %33, i64 %idx.ext
  store i8* %add.ptr, i8** %src1.addr, align 8
  %34 = load i32, i32* %bytes.addr, align 4
  %35 = load i8*, i8** %src2.addr, align 8
  %idx.ext33 = zext i32 %34 to i64
  %add.ptr34 = getelementptr inbounds i8, i8* %35, i64 %idx.ext33
  store i8* %add.ptr34, i8** %src2.addr, align 8
  %36 = load i32, i32* %bytes.addr, align 4
  %37 = load i8*, i8** %dest.addr, align 8
  %idx.ext35 = zext i32 %36 to i64
  %add.ptr36 = getelementptr inbounds i8, i8* %37, i64 %idx.ext35
  store i8* %add.ptr36, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.else:                                          ; preds = %entry
  br label %while.cond.37

while.cond.37:                                    ; preds = %for.end.81, %if.else
  %38 = load i32, i32* %length.addr, align 4
  %dec38 = add i32 %38, -1
  store i32 %dec38, i32* %length.addr, align 4
  %tobool39 = icmp ne i32 %38, 0
  br i1 %tobool39, label %while.body.40, label %while.end.88

while.body.40:                                    ; preds = %while.cond.37
  store i32 0, i32* %b44, align 4
  br label %for.cond.45

for.cond.45:                                      ; preds = %for.inc.79, %while.body.40
  %39 = load i32, i32* %b44, align 4
  %40 = load i32, i32* %bytes.addr, align 4
  %cmp46 = icmp ult i32 %39, %40
  br i1 %cmp46, label %for.body.48, label %for.end.81

for.body.48:                                      ; preds = %for.cond.45
  %41 = load i32, i32* %b44, align 4
  %idxprom49 = zext i32 %41 to i64
  %42 = load i32*, i32** %affect.addr, align 8
  %arrayidx50 = getelementptr inbounds i32, i32* %42, i64 %idxprom49
  %43 = load i32, i32* %arrayidx50, align 4
  %tobool51 = icmp ne i32 %43, 0
  br i1 %tobool51, label %cond.true.52, label %cond.false.70

cond.true.52:                                     ; preds = %for.body.48
  %44 = load i32, i32* %b44, align 4
  %idxprom53 = zext i32 %44 to i64
  %45 = load i8*, i8** %src2.addr, align 8
  %arrayidx54 = getelementptr inbounds i8, i8* %45, i64 %idxprom53
  %46 = load i8, i8* %arrayidx54, align 1
  %conv55 = zext i8 %46 to i32
  %47 = load i32, i32* %b44, align 4
  %idxprom56 = zext i32 %47 to i64
  %48 = load i8*, i8** %src1.addr, align 8
  %arrayidx57 = getelementptr inbounds i8, i8* %48, i64 %idxprom56
  %49 = load i8, i8* %arrayidx57, align 1
  %conv58 = zext i8 %49 to i32
  %sub59 = sub nsw i32 %conv55, %conv58
  %50 = load i32, i32* %opacity.addr, align 4
  %mul60 = mul i32 %sub59, %50
  %add61 = add i32 %mul60, 128
  %conv62 = zext i32 %add61 to i64
  store i64 %conv62, i64* %tmp42, align 8
  %51 = load i64, i64* %tmp42, align 8
  %shr63 = lshr i64 %51, 8
  %52 = load i64, i64* %tmp42, align 8
  %add64 = add i64 %shr63, %52
  %shr65 = lshr i64 %add64, 8
  %53 = load i32, i32* %b44, align 4
  %idxprom66 = zext i32 %53 to i64
  %54 = load i8*, i8** %src1.addr, align 8
  %arrayidx67 = getelementptr inbounds i8, i8* %54, i64 %idxprom66
  %55 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %55 to i64
  %add69 = add i64 %shr65, %conv68
  br label %cond.end.74

cond.false.70:                                    ; preds = %for.body.48
  %56 = load i32, i32* %b44, align 4
  %idxprom71 = zext i32 %56 to i64
  %57 = load i8*, i8** %src1.addr, align 8
  %arrayidx72 = getelementptr inbounds i8, i8* %57, i64 %idxprom71
  %58 = load i8, i8* %arrayidx72, align 1
  %conv73 = zext i8 %58 to i64
  br label %cond.end.74

cond.end.74:                                      ; preds = %cond.false.70, %cond.true.52
  %cond75 = phi i64 [ %add69, %cond.true.52 ], [ %conv73, %cond.false.70 ]
  %conv76 = trunc i64 %cond75 to i8
  %59 = load i32, i32* %b44, align 4
  %idxprom77 = zext i32 %59 to i64
  %60 = load i8*, i8** %dest.addr, align 8
  %arrayidx78 = getelementptr inbounds i8, i8* %60, i64 %idxprom77
  store i8 %conv76, i8* %arrayidx78, align 1
  br label %for.inc.79

for.inc.79:                                       ; preds = %cond.end.74
  %61 = load i32, i32* %b44, align 4
  %inc80 = add i32 %61, 1
  store i32 %inc80, i32* %b44, align 4
  br label %for.cond.45

for.end.81:                                       ; preds = %for.cond.45
  %62 = load i32, i32* %bytes.addr, align 4
  %63 = load i8*, i8** %src1.addr, align 8
  %idx.ext82 = zext i32 %62 to i64
  %add.ptr83 = getelementptr inbounds i8, i8* %63, i64 %idx.ext82
  store i8* %add.ptr83, i8** %src1.addr, align 8
  %64 = load i32, i32* %bytes.addr, align 4
  %65 = load i8*, i8** %src2.addr, align 8
  %idx.ext84 = zext i32 %64 to i64
  %add.ptr85 = getelementptr inbounds i8, i8* %65, i64 %idx.ext84
  store i8* %add.ptr85, i8** %src2.addr, align 8
  %66 = load i32, i32* %bytes.addr, align 4
  %67 = load i8*, i8** %dest.addr, align 8
  %idx.ext86 = zext i32 %66 to i64
  %add.ptr87 = getelementptr inbounds i8, i8* %67, i64 %idx.ext86
  store i8* %add.ptr87, i8** %dest.addr, align 8
  br label %while.cond.37

while.end.88:                                     ; preds = %while.cond.37
  br label %if.end

if.end:                                           ; preds = %while.end.88, %while.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @combine_inten_and_inten_a_pixels(i8* %src1, i8* %src2, i8* %dest, i8* %mask, i32 %opacity, i32* %affect, i32 %length, i32 %bytes) #0 {
entry:
  %src1.addr = alloca i8*, align 8
  %src2.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %opacity.addr = alloca i32, align 4
  %affect.addr = alloca i32*, align 8
  %length.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %alpha = alloca i32, align 4
  %src2_bytes = alloca i32, align 4
  %m = alloca i8*, align 8
  %t1 = alloca i64, align 8
  %new_alpha = alloca i8, align 1
  %b = alloca i32, align 4
  %t155 = alloca i64, align 8
  %new_alpha56 = alloca i8, align 1
  %t1130 = alloca i64, align 8
  %new_alpha131 = alloca i8, align 1
  %b142 = alloca i32, align 4
  store i8* %src1, i8** %src1.addr, align 8
  store i8* %src2, i8** %src2.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32* %affect, i32** %affect.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %0 = load i32, i32* %bytes.addr, align 4
  store i32 %0, i32* %alpha, align 4
  %1 = load i32, i32* %bytes.addr, align 4
  %add = add i32 %1, 1
  store i32 %add, i32* %src2_bytes, align 4
  %2 = load i8*, i8** %mask.addr, align 8
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %mask.addr, align 8
  store i8* %3, i8** %m, align 8
  br label %while.cond

while.cond:                                       ; preds = %for.end, %if.then
  %4 = load i32, i32* %length.addr, align 4
  %dec = add i32 %4, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool1 = icmp ne i32 %4, 0
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %alpha, align 4
  %idxprom = sext i32 %5 to i64
  %6 = load i8*, i8** %src2.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 %idxprom
  %7 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %7 to i32
  %8 = load i8*, i8** %m, align 8
  %9 = load i8, i8* %8, align 1
  %conv2 = zext i8 %9 to i32
  %mul = mul nsw i32 %conv, %conv2
  %10 = load i32, i32* %opacity.addr, align 4
  %mul3 = mul i32 %mul, %10
  %add4 = add i32 %mul3, 32603
  %conv5 = zext i32 %add4 to i64
  store i64 %conv5, i64* %t1, align 8
  %11 = load i64, i64* %t1, align 8
  %shr = ashr i64 %11, 7
  %12 = load i64, i64* %t1, align 8
  %add6 = add nsw i64 %shr, %12
  %shr7 = ashr i64 %add6, 16
  %conv8 = trunc i64 %shr7 to i8
  store i8 %conv8, i8* %new_alpha, align 1
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %13 = load i32, i32* %b, align 4
  %14 = load i32, i32* %bytes.addr, align 4
  %cmp = icmp ult i32 %13, %14
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %15 = load i32, i32* %b, align 4
  %idxprom10 = zext i32 %15 to i64
  %16 = load i32*, i32** %affect.addr, align 8
  %arrayidx11 = getelementptr inbounds i32, i32* %16, i64 %idxprom10
  %17 = load i32, i32* %arrayidx11, align 4
  %tobool12 = icmp ne i32 %17, 0
  br i1 %tobool12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %18 = load i32, i32* %b, align 4
  %idxprom13 = zext i32 %18 to i64
  %19 = load i8*, i8** %src2.addr, align 8
  %arrayidx14 = getelementptr inbounds i8, i8* %19, i64 %idxprom13
  %20 = load i8, i8* %arrayidx14, align 1
  %conv15 = zext i8 %20 to i32
  %21 = load i32, i32* %b, align 4
  %idxprom16 = zext i32 %21 to i64
  %22 = load i8*, i8** %src1.addr, align 8
  %arrayidx17 = getelementptr inbounds i8, i8* %22, i64 %idxprom16
  %23 = load i8, i8* %arrayidx17, align 1
  %conv18 = zext i8 %23 to i32
  %sub = sub nsw i32 %conv15, %conv18
  %24 = load i8, i8* %new_alpha, align 1
  %conv19 = zext i8 %24 to i32
  %mul20 = mul nsw i32 %sub, %conv19
  %add21 = add nsw i32 %mul20, 128
  %conv22 = sext i32 %add21 to i64
  store i64 %conv22, i64* %t1, align 8
  %25 = load i64, i64* %t1, align 8
  %shr23 = ashr i64 %25, 8
  %26 = load i64, i64* %t1, align 8
  %add24 = add nsw i64 %shr23, %26
  %shr25 = ashr i64 %add24, 8
  %27 = load i32, i32* %b, align 4
  %idxprom26 = zext i32 %27 to i64
  %28 = load i8*, i8** %src1.addr, align 8
  %arrayidx27 = getelementptr inbounds i8, i8* %28, i64 %idxprom26
  %29 = load i8, i8* %arrayidx27, align 1
  %conv28 = zext i8 %29 to i64
  %add29 = add nsw i64 %shr25, %conv28
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %30 = load i32, i32* %b, align 4
  %idxprom30 = zext i32 %30 to i64
  %31 = load i8*, i8** %src1.addr, align 8
  %arrayidx31 = getelementptr inbounds i8, i8* %31, i64 %idxprom30
  %32 = load i8, i8* %arrayidx31, align 1
  %conv32 = zext i8 %32 to i64
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %add29, %cond.true ], [ %conv32, %cond.false ]
  %conv33 = trunc i64 %cond to i8
  %33 = load i32, i32* %b, align 4
  %idxprom34 = zext i32 %33 to i64
  %34 = load i8*, i8** %dest.addr, align 8
  %arrayidx35 = getelementptr inbounds i8, i8* %34, i64 %idxprom34
  store i8 %conv33, i8* %arrayidx35, align 1
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %35 = load i32, i32* %b, align 4
  %inc = add i32 %35, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %36 = load i8*, i8** %m, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %36, i32 1
  store i8* %incdec.ptr, i8** %m, align 8
  %37 = load i32, i32* %bytes.addr, align 4
  %38 = load i8*, i8** %src1.addr, align 8
  %idx.ext = zext i32 %37 to i64
  %add.ptr = getelementptr inbounds i8, i8* %38, i64 %idx.ext
  store i8* %add.ptr, i8** %src1.addr, align 8
  %39 = load i32, i32* %src2_bytes, align 4
  %40 = load i8*, i8** %src2.addr, align 8
  %idx.ext36 = sext i32 %39 to i64
  %add.ptr37 = getelementptr inbounds i8, i8* %40, i64 %idx.ext36
  store i8* %add.ptr37, i8** %src2.addr, align 8
  %41 = load i32, i32* %bytes.addr, align 4
  %42 = load i8*, i8** %dest.addr, align 8
  %idx.ext38 = zext i32 %41 to i64
  %add.ptr39 = getelementptr inbounds i8, i8* %42, i64 %idx.ext38
  store i8* %add.ptr39, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.188

if.else:                                          ; preds = %entry
  %43 = load i32, i32* %bytes.addr, align 4
  %cmp40 = icmp eq i32 %43, 3
  br i1 %cmp40, label %land.lhs.true, label %if.else.125

land.lhs.true:                                    ; preds = %if.else
  %44 = load i32*, i32** %affect.addr, align 8
  %arrayidx42 = getelementptr inbounds i32, i32* %44, i64 0
  %45 = load i32, i32* %arrayidx42, align 4
  %tobool43 = icmp ne i32 %45, 0
  br i1 %tobool43, label %land.lhs.true.44, label %if.else.125

land.lhs.true.44:                                 ; preds = %land.lhs.true
  %46 = load i32*, i32** %affect.addr, align 8
  %arrayidx45 = getelementptr inbounds i32, i32* %46, i64 1
  %47 = load i32, i32* %arrayidx45, align 4
  %tobool46 = icmp ne i32 %47, 0
  br i1 %tobool46, label %land.lhs.true.47, label %if.else.125

land.lhs.true.47:                                 ; preds = %land.lhs.true.44
  %48 = load i32*, i32** %affect.addr, align 8
  %arrayidx48 = getelementptr inbounds i32, i32* %48, i64 2
  %49 = load i32, i32* %arrayidx48, align 4
  %tobool49 = icmp ne i32 %49, 0
  br i1 %tobool49, label %if.then.50, label %if.else.125

if.then.50:                                       ; preds = %land.lhs.true.47
  br label %while.cond.51

while.cond.51:                                    ; preds = %while.body.54, %if.then.50
  %50 = load i32, i32* %length.addr, align 4
  %dec52 = add i32 %50, -1
  store i32 %dec52, i32* %length.addr, align 4
  %tobool53 = icmp ne i32 %50, 0
  br i1 %tobool53, label %while.body.54, label %while.end.124

while.body.54:                                    ; preds = %while.cond.51
  %51 = load i32, i32* %alpha, align 4
  %idxprom57 = sext i32 %51 to i64
  %52 = load i8*, i8** %src2.addr, align 8
  %arrayidx58 = getelementptr inbounds i8, i8* %52, i64 %idxprom57
  %53 = load i8, i8* %arrayidx58, align 1
  %conv59 = zext i8 %53 to i32
  %54 = load i32, i32* %opacity.addr, align 4
  %mul60 = mul i32 %conv59, %54
  %add61 = add i32 %mul60, 128
  %conv62 = zext i32 %add61 to i64
  store i64 %conv62, i64* %t155, align 8
  %55 = load i64, i64* %t155, align 8
  %shr63 = ashr i64 %55, 8
  %56 = load i64, i64* %t155, align 8
  %add64 = add nsw i64 %shr63, %56
  %shr65 = ashr i64 %add64, 8
  %conv66 = trunc i64 %shr65 to i8
  store i8 %conv66, i8* %new_alpha56, align 1
  %57 = load i8*, i8** %src2.addr, align 8
  %arrayidx67 = getelementptr inbounds i8, i8* %57, i64 0
  %58 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %58 to i32
  %59 = load i8*, i8** %src1.addr, align 8
  %arrayidx69 = getelementptr inbounds i8, i8* %59, i64 0
  %60 = load i8, i8* %arrayidx69, align 1
  %conv70 = zext i8 %60 to i32
  %sub71 = sub nsw i32 %conv68, %conv70
  %61 = load i8, i8* %new_alpha56, align 1
  %conv72 = zext i8 %61 to i32
  %mul73 = mul nsw i32 %sub71, %conv72
  %add74 = add nsw i32 %mul73, 128
  %conv75 = sext i32 %add74 to i64
  store i64 %conv75, i64* %t155, align 8
  %62 = load i64, i64* %t155, align 8
  %shr76 = ashr i64 %62, 8
  %63 = load i64, i64* %t155, align 8
  %add77 = add nsw i64 %shr76, %63
  %shr78 = ashr i64 %add77, 8
  %64 = load i8*, i8** %src1.addr, align 8
  %arrayidx79 = getelementptr inbounds i8, i8* %64, i64 0
  %65 = load i8, i8* %arrayidx79, align 1
  %conv80 = zext i8 %65 to i64
  %add81 = add nsw i64 %shr78, %conv80
  %conv82 = trunc i64 %add81 to i8
  %66 = load i8*, i8** %dest.addr, align 8
  %arrayidx83 = getelementptr inbounds i8, i8* %66, i64 0
  store i8 %conv82, i8* %arrayidx83, align 1
  %67 = load i8*, i8** %src2.addr, align 8
  %arrayidx84 = getelementptr inbounds i8, i8* %67, i64 1
  %68 = load i8, i8* %arrayidx84, align 1
  %conv85 = zext i8 %68 to i32
  %69 = load i8*, i8** %src1.addr, align 8
  %arrayidx86 = getelementptr inbounds i8, i8* %69, i64 1
  %70 = load i8, i8* %arrayidx86, align 1
  %conv87 = zext i8 %70 to i32
  %sub88 = sub nsw i32 %conv85, %conv87
  %71 = load i8, i8* %new_alpha56, align 1
  %conv89 = zext i8 %71 to i32
  %mul90 = mul nsw i32 %sub88, %conv89
  %add91 = add nsw i32 %mul90, 128
  %conv92 = sext i32 %add91 to i64
  store i64 %conv92, i64* %t155, align 8
  %72 = load i64, i64* %t155, align 8
  %shr93 = ashr i64 %72, 8
  %73 = load i64, i64* %t155, align 8
  %add94 = add nsw i64 %shr93, %73
  %shr95 = ashr i64 %add94, 8
  %74 = load i8*, i8** %src1.addr, align 8
  %arrayidx96 = getelementptr inbounds i8, i8* %74, i64 1
  %75 = load i8, i8* %arrayidx96, align 1
  %conv97 = zext i8 %75 to i64
  %add98 = add nsw i64 %shr95, %conv97
  %conv99 = trunc i64 %add98 to i8
  %76 = load i8*, i8** %dest.addr, align 8
  %arrayidx100 = getelementptr inbounds i8, i8* %76, i64 1
  store i8 %conv99, i8* %arrayidx100, align 1
  %77 = load i8*, i8** %src2.addr, align 8
  %arrayidx101 = getelementptr inbounds i8, i8* %77, i64 2
  %78 = load i8, i8* %arrayidx101, align 1
  %conv102 = zext i8 %78 to i32
  %79 = load i8*, i8** %src1.addr, align 8
  %arrayidx103 = getelementptr inbounds i8, i8* %79, i64 2
  %80 = load i8, i8* %arrayidx103, align 1
  %conv104 = zext i8 %80 to i32
  %sub105 = sub nsw i32 %conv102, %conv104
  %81 = load i8, i8* %new_alpha56, align 1
  %conv106 = zext i8 %81 to i32
  %mul107 = mul nsw i32 %sub105, %conv106
  %add108 = add nsw i32 %mul107, 128
  %conv109 = sext i32 %add108 to i64
  store i64 %conv109, i64* %t155, align 8
  %82 = load i64, i64* %t155, align 8
  %shr110 = ashr i64 %82, 8
  %83 = load i64, i64* %t155, align 8
  %add111 = add nsw i64 %shr110, %83
  %shr112 = ashr i64 %add111, 8
  %84 = load i8*, i8** %src1.addr, align 8
  %arrayidx113 = getelementptr inbounds i8, i8* %84, i64 2
  %85 = load i8, i8* %arrayidx113, align 1
  %conv114 = zext i8 %85 to i64
  %add115 = add nsw i64 %shr112, %conv114
  %conv116 = trunc i64 %add115 to i8
  %86 = load i8*, i8** %dest.addr, align 8
  %arrayidx117 = getelementptr inbounds i8, i8* %86, i64 2
  store i8 %conv116, i8* %arrayidx117, align 1
  %87 = load i32, i32* %bytes.addr, align 4
  %88 = load i8*, i8** %src1.addr, align 8
  %idx.ext118 = zext i32 %87 to i64
  %add.ptr119 = getelementptr inbounds i8, i8* %88, i64 %idx.ext118
  store i8* %add.ptr119, i8** %src1.addr, align 8
  %89 = load i32, i32* %src2_bytes, align 4
  %90 = load i8*, i8** %src2.addr, align 8
  %idx.ext120 = sext i32 %89 to i64
  %add.ptr121 = getelementptr inbounds i8, i8* %90, i64 %idx.ext120
  store i8* %add.ptr121, i8** %src2.addr, align 8
  %91 = load i32, i32* %bytes.addr, align 4
  %92 = load i8*, i8** %dest.addr, align 8
  %idx.ext122 = zext i32 %91 to i64
  %add.ptr123 = getelementptr inbounds i8, i8* %92, i64 %idx.ext122
  store i8* %add.ptr123, i8** %dest.addr, align 8
  br label %while.cond.51

while.end.124:                                    ; preds = %while.cond.51
  br label %if.end

if.else.125:                                      ; preds = %land.lhs.true.47, %land.lhs.true.44, %land.lhs.true, %if.else
  br label %while.cond.126

while.cond.126:                                   ; preds = %for.end.180, %if.else.125
  %93 = load i32, i32* %length.addr, align 4
  %dec127 = add i32 %93, -1
  store i32 %dec127, i32* %length.addr, align 4
  %tobool128 = icmp ne i32 %93, 0
  br i1 %tobool128, label %while.body.129, label %while.end.187

while.body.129:                                   ; preds = %while.cond.126
  %94 = load i32, i32* %alpha, align 4
  %idxprom132 = sext i32 %94 to i64
  %95 = load i8*, i8** %src2.addr, align 8
  %arrayidx133 = getelementptr inbounds i8, i8* %95, i64 %idxprom132
  %96 = load i8, i8* %arrayidx133, align 1
  %conv134 = zext i8 %96 to i32
  %97 = load i32, i32* %opacity.addr, align 4
  %mul135 = mul i32 %conv134, %97
  %add136 = add i32 %mul135, 128
  %conv137 = zext i32 %add136 to i64
  store i64 %conv137, i64* %t1130, align 8
  %98 = load i64, i64* %t1130, align 8
  %shr138 = ashr i64 %98, 8
  %99 = load i64, i64* %t1130, align 8
  %add139 = add nsw i64 %shr138, %99
  %shr140 = ashr i64 %add139, 8
  %conv141 = trunc i64 %shr140 to i8
  store i8 %conv141, i8* %new_alpha131, align 1
  store i32 0, i32* %b142, align 4
  br label %for.cond.143

for.cond.143:                                     ; preds = %for.inc.178, %while.body.129
  %100 = load i32, i32* %b142, align 4
  %101 = load i32, i32* %bytes.addr, align 4
  %cmp144 = icmp ult i32 %100, %101
  br i1 %cmp144, label %for.body.146, label %for.end.180

for.body.146:                                     ; preds = %for.cond.143
  %102 = load i32, i32* %b142, align 4
  %idxprom147 = zext i32 %102 to i64
  %103 = load i32*, i32** %affect.addr, align 8
  %arrayidx148 = getelementptr inbounds i32, i32* %103, i64 %idxprom147
  %104 = load i32, i32* %arrayidx148, align 4
  %tobool149 = icmp ne i32 %104, 0
  br i1 %tobool149, label %cond.true.150, label %cond.false.169

cond.true.150:                                    ; preds = %for.body.146
  %105 = load i32, i32* %b142, align 4
  %idxprom151 = zext i32 %105 to i64
  %106 = load i8*, i8** %src2.addr, align 8
  %arrayidx152 = getelementptr inbounds i8, i8* %106, i64 %idxprom151
  %107 = load i8, i8* %arrayidx152, align 1
  %conv153 = zext i8 %107 to i32
  %108 = load i32, i32* %b142, align 4
  %idxprom154 = zext i32 %108 to i64
  %109 = load i8*, i8** %src1.addr, align 8
  %arrayidx155 = getelementptr inbounds i8, i8* %109, i64 %idxprom154
  %110 = load i8, i8* %arrayidx155, align 1
  %conv156 = zext i8 %110 to i32
  %sub157 = sub nsw i32 %conv153, %conv156
  %111 = load i8, i8* %new_alpha131, align 1
  %conv158 = zext i8 %111 to i32
  %mul159 = mul nsw i32 %sub157, %conv158
  %add160 = add nsw i32 %mul159, 128
  %conv161 = sext i32 %add160 to i64
  store i64 %conv161, i64* %t1130, align 8
  %112 = load i64, i64* %t1130, align 8
  %shr162 = ashr i64 %112, 8
  %113 = load i64, i64* %t1130, align 8
  %add163 = add nsw i64 %shr162, %113
  %shr164 = ashr i64 %add163, 8
  %114 = load i32, i32* %b142, align 4
  %idxprom165 = zext i32 %114 to i64
  %115 = load i8*, i8** %src1.addr, align 8
  %arrayidx166 = getelementptr inbounds i8, i8* %115, i64 %idxprom165
  %116 = load i8, i8* %arrayidx166, align 1
  %conv167 = zext i8 %116 to i64
  %add168 = add nsw i64 %shr164, %conv167
  br label %cond.end.173

cond.false.169:                                   ; preds = %for.body.146
  %117 = load i32, i32* %b142, align 4
  %idxprom170 = zext i32 %117 to i64
  %118 = load i8*, i8** %src1.addr, align 8
  %arrayidx171 = getelementptr inbounds i8, i8* %118, i64 %idxprom170
  %119 = load i8, i8* %arrayidx171, align 1
  %conv172 = zext i8 %119 to i64
  br label %cond.end.173

cond.end.173:                                     ; preds = %cond.false.169, %cond.true.150
  %cond174 = phi i64 [ %add168, %cond.true.150 ], [ %conv172, %cond.false.169 ]
  %conv175 = trunc i64 %cond174 to i8
  %120 = load i32, i32* %b142, align 4
  %idxprom176 = zext i32 %120 to i64
  %121 = load i8*, i8** %dest.addr, align 8
  %arrayidx177 = getelementptr inbounds i8, i8* %121, i64 %idxprom176
  store i8 %conv175, i8* %arrayidx177, align 1
  br label %for.inc.178

for.inc.178:                                      ; preds = %cond.end.173
  %122 = load i32, i32* %b142, align 4
  %inc179 = add i32 %122, 1
  store i32 %inc179, i32* %b142, align 4
  br label %for.cond.143

for.end.180:                                      ; preds = %for.cond.143
  %123 = load i32, i32* %bytes.addr, align 4
  %124 = load i8*, i8** %src1.addr, align 8
  %idx.ext181 = zext i32 %123 to i64
  %add.ptr182 = getelementptr inbounds i8, i8* %124, i64 %idx.ext181
  store i8* %add.ptr182, i8** %src1.addr, align 8
  %125 = load i32, i32* %src2_bytes, align 4
  %126 = load i8*, i8** %src2.addr, align 8
  %idx.ext183 = sext i32 %125 to i64
  %add.ptr184 = getelementptr inbounds i8, i8* %126, i64 %idx.ext183
  store i8* %add.ptr184, i8** %src2.addr, align 8
  %127 = load i32, i32* %bytes.addr, align 4
  %128 = load i8*, i8** %dest.addr, align 8
  %idx.ext185 = zext i32 %127 to i64
  %add.ptr186 = getelementptr inbounds i8, i8* %128, i64 %idx.ext185
  store i8* %add.ptr186, i8** %dest.addr, align 8
  br label %while.cond.126

while.end.187:                                    ; preds = %while.cond.126
  br label %if.end

if.end:                                           ; preds = %while.end.187, %while.end.124
  br label %if.end.188

if.end.188:                                       ; preds = %if.end, %while.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @combine_inten_a_and_inten_pixels(i8* %src1, i8* %src2, i8* %dest, i8* %mask, i32 %opacity, i32* %affect, i32 %mode_affect, i32 %length, i32 %bytes) #0 {
entry:
  %src1.addr = alloca i8*, align 8
  %src2.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %opacity.addr = alloca i32, align 4
  %affect.addr = alloca i32*, align 8
  %mode_affect.addr = alloca i32, align 4
  %length.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %src2_bytes = alloca i32, align 4
  %alpha = alloca i32, align 4
  %b = alloca i32, align 4
  %ratio = alloca float, align 4
  %compl_ratio = alloca float, align 4
  %m = alloca i8*, align 8
  %tmp = alloca i64, align 8
  %src2_alpha = alloca i8, align 1
  %new_alpha = alloca i8, align 1
  %tmp135 = alloca i64, align 8
  %src2_alpha137 = alloca i8, align 1
  %new_alpha147 = alloca i8, align 1
  %tmp299 = alloca i64, align 8
  %src2_alpha301 = alloca i8, align 1
  %new_alpha304 = alloca i8, align 1
  store i8* %src1, i8** %src1.addr, align 8
  store i8* %src2, i8** %src2.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32* %affect, i32** %affect.addr, align 8
  store i32 %mode_affect, i32* %mode_affect.addr, align 4
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %0 = load i32, i32* %bytes.addr, align 4
  %sub = sub i32 %0, 1
  store i32 %sub, i32* %src2_bytes, align 4
  %1 = load i32, i32* %bytes.addr, align 4
  %sub1 = sub i32 %1, 1
  store i32 %sub1, i32* %alpha, align 4
  %2 = load i8*, i8** %mask.addr, align 8
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %if.then, label %if.else.293

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %mask.addr, align 8
  store i8* %3, i8** %m, align 8
  %4 = load i32, i32* %opacity.addr, align 4
  %cmp = icmp eq i32 %4, 255
  br i1 %cmp, label %if.then.2, label %if.else.129

if.then.2:                                        ; preds = %if.then
  br label %while.cond

while.cond:                                       ; preds = %if.end.124, %if.then.2
  %5 = load i32, i32* %length.addr, align 4
  %dec = add i32 %5, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool3 = icmp ne i32 %5, 0
  br i1 %tobool3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i8*, i8** %m, align 8
  %7 = load i8, i8* %6, align 1
  store i8 %7, i8* %src2_alpha, align 1
  %8 = load i32, i32* %alpha, align 4
  %idxprom = sext i32 %8 to i64
  %9 = load i8*, i8** %src1.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %9, i64 %idxprom
  %10 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %10 to i64
  %11 = load i32, i32* %alpha, align 4
  %idxprom6 = sext i32 %11 to i64
  %12 = load i8*, i8** %src1.addr, align 8
  %arrayidx7 = getelementptr inbounds i8, i8* %12, i64 %idxprom6
  %13 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %13 to i32
  %sub9 = sub nsw i32 255, %conv8
  %14 = load i8, i8* %src2_alpha, align 1
  %conv10 = zext i8 %14 to i32
  %mul = mul nsw i32 %sub9, %conv10
  %add = add nsw i32 %mul, 128
  %conv11 = sext i32 %add to i64
  store i64 %conv11, i64* %tmp, align 8
  %15 = load i64, i64* %tmp, align 8
  %shr = lshr i64 %15, 8
  %16 = load i64, i64* %tmp, align 8
  %add12 = add i64 %shr, %16
  %shr13 = lshr i64 %add12, 8
  %add14 = add i64 %conv, %shr13
  %conv15 = trunc i64 %add14 to i8
  store i8 %conv15, i8* %new_alpha, align 1
  %17 = load i8, i8* %src2_alpha, align 1
  %conv16 = zext i8 %17 to i32
  %cmp17 = icmp ne i32 %conv16, 0
  br i1 %cmp17, label %land.lhs.true, label %if.end.81

land.lhs.true:                                    ; preds = %while.body
  %18 = load i8, i8* %new_alpha, align 1
  %conv19 = zext i8 %18 to i32
  %cmp20 = icmp ne i32 %conv19, 0
  br i1 %cmp20, label %if.then.22, label %if.end.81

if.then.22:                                       ; preds = %land.lhs.true
  %19 = load i32, i32* %alpha, align 4
  store i32 %19, i32* %b, align 4
  %20 = load i8, i8* %src2_alpha, align 1
  %conv23 = zext i8 %20 to i32
  %21 = load i8, i8* %new_alpha, align 1
  %conv24 = zext i8 %21 to i32
  %cmp25 = icmp eq i32 %conv23, %conv24
  br i1 %cmp25, label %if.then.27, label %if.else

if.then.27:                                       ; preds = %if.then.22
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then.27
  %22 = load i32, i32* %b, align 4
  %dec28 = add nsw i32 %22, -1
  store i32 %dec28, i32* %b, align 4
  %23 = load i32, i32* %b, align 4
  %idxprom29 = sext i32 %23 to i64
  %24 = load i32*, i32** %affect.addr, align 8
  %arrayidx30 = getelementptr inbounds i32, i32* %24, i64 %idxprom29
  %25 = load i32, i32* %arrayidx30, align 4
  %tobool31 = icmp ne i32 %25, 0
  br i1 %tobool31, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  %26 = load i32, i32* %b, align 4
  %idxprom32 = sext i32 %26 to i64
  %27 = load i8*, i8** %src2.addr, align 8
  %arrayidx33 = getelementptr inbounds i8, i8* %27, i64 %idxprom32
  %28 = load i8, i8* %arrayidx33, align 1
  %conv34 = zext i8 %28 to i32
  br label %cond.end

cond.false:                                       ; preds = %do.body
  %29 = load i32, i32* %b, align 4
  %idxprom35 = sext i32 %29 to i64
  %30 = load i8*, i8** %src1.addr, align 8
  %arrayidx36 = getelementptr inbounds i8, i8* %30, i64 %idxprom35
  %31 = load i8, i8* %arrayidx36, align 1
  %conv37 = zext i8 %31 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv34, %cond.true ], [ %conv37, %cond.false ]
  %conv38 = trunc i32 %cond to i8
  %32 = load i32, i32* %b, align 4
  %idxprom39 = sext i32 %32 to i64
  %33 = load i8*, i8** %dest.addr, align 8
  %arrayidx40 = getelementptr inbounds i8, i8* %33, i64 %idxprom39
  store i8 %conv38, i8* %arrayidx40, align 1
  br label %do.cond

do.cond:                                          ; preds = %cond.end
  %34 = load i32, i32* %b, align 4
  %tobool41 = icmp ne i32 %34, 0
  br i1 %tobool41, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end

if.else:                                          ; preds = %if.then.22
  %35 = load i8, i8* %src2_alpha, align 1
  %conv42 = uitofp i8 %35 to float
  %36 = load i8, i8* %new_alpha, align 1
  %conv43 = zext i8 %36 to i32
  %conv44 = sitofp i32 %conv43 to float
  %div = fdiv float %conv42, %conv44
  store float %div, float* %ratio, align 4
  %37 = load float, float* %ratio, align 4
  %conv45 = fpext float %37 to double
  %sub46 = fsub double 1.000000e+00, %conv45
  %conv47 = fptrunc double %sub46 to float
  store float %conv47, float* %compl_ratio, align 4
  br label %do.body.48

do.body.48:                                       ; preds = %do.cond.78, %if.else
  %38 = load i32, i32* %b, align 4
  %dec49 = add nsw i32 %38, -1
  store i32 %dec49, i32* %b, align 4
  %39 = load i32, i32* %b, align 4
  %idxprom50 = sext i32 %39 to i64
  %40 = load i32*, i32** %affect.addr, align 8
  %arrayidx51 = getelementptr inbounds i32, i32* %40, i64 %idxprom50
  %41 = load i32, i32* %arrayidx51, align 4
  %tobool52 = icmp ne i32 %41, 0
  br i1 %tobool52, label %cond.true.53, label %cond.false.69

cond.true.53:                                     ; preds = %do.body.48
  %42 = load i32, i32* %b, align 4
  %idxprom54 = sext i32 %42 to i64
  %43 = load i8*, i8** %src2.addr, align 8
  %arrayidx55 = getelementptr inbounds i8, i8* %43, i64 %idxprom54
  %44 = load i8, i8* %arrayidx55, align 1
  %conv56 = zext i8 %44 to i32
  %conv57 = sitofp i32 %conv56 to float
  %45 = load float, float* %ratio, align 4
  %mul58 = fmul float %conv57, %45
  %46 = load i32, i32* %b, align 4
  %idxprom59 = sext i32 %46 to i64
  %47 = load i8*, i8** %src1.addr, align 8
  %arrayidx60 = getelementptr inbounds i8, i8* %47, i64 %idxprom59
  %48 = load i8, i8* %arrayidx60, align 1
  %conv61 = zext i8 %48 to i32
  %conv62 = sitofp i32 %conv61 to float
  %49 = load float, float* %compl_ratio, align 4
  %mul63 = fmul float %conv62, %49
  %add64 = fadd float %mul58, %mul63
  %conv65 = fpext float %add64 to double
  %add66 = fadd double %conv65, 1.000000e-04
  %conv67 = fptoui double %add66 to i8
  %conv68 = zext i8 %conv67 to i32
  br label %cond.end.73

cond.false.69:                                    ; preds = %do.body.48
  %50 = load i32, i32* %b, align 4
  %idxprom70 = sext i32 %50 to i64
  %51 = load i8*, i8** %src1.addr, align 8
  %arrayidx71 = getelementptr inbounds i8, i8* %51, i64 %idxprom70
  %52 = load i8, i8* %arrayidx71, align 1
  %conv72 = zext i8 %52 to i32
  br label %cond.end.73

cond.end.73:                                      ; preds = %cond.false.69, %cond.true.53
  %cond74 = phi i32 [ %conv68, %cond.true.53 ], [ %conv72, %cond.false.69 ]
  %conv75 = trunc i32 %cond74 to i8
  %53 = load i32, i32* %b, align 4
  %idxprom76 = sext i32 %53 to i64
  %54 = load i8*, i8** %dest.addr, align 8
  %arrayidx77 = getelementptr inbounds i8, i8* %54, i64 %idxprom76
  store i8 %conv75, i8* %arrayidx77, align 1
  br label %do.cond.78

do.cond.78:                                       ; preds = %cond.end.73
  %55 = load i32, i32* %b, align 4
  %tobool79 = icmp ne i32 %55, 0
  br i1 %tobool79, label %do.body.48, label %do.end.80

do.end.80:                                        ; preds = %do.cond.78
  br label %if.end

if.end:                                           ; preds = %do.end.80, %do.end
  br label %if.end.81

if.end.81:                                        ; preds = %if.end, %land.lhs.true, %while.body
  %56 = load i32, i32* %mode_affect.addr, align 4
  %tobool82 = icmp ne i32 %56, 0
  br i1 %tobool82, label %if.then.83, label %if.else.98

if.then.83:                                       ; preds = %if.end.81
  %57 = load i32, i32* %alpha, align 4
  %idxprom84 = sext i32 %57 to i64
  %58 = load i32*, i32** %affect.addr, align 8
  %arrayidx85 = getelementptr inbounds i32, i32* %58, i64 %idxprom84
  %59 = load i32, i32* %arrayidx85, align 4
  %tobool86 = icmp ne i32 %59, 0
  br i1 %tobool86, label %cond.true.87, label %cond.false.89

cond.true.87:                                     ; preds = %if.then.83
  %60 = load i8, i8* %new_alpha, align 1
  %conv88 = zext i8 %60 to i32
  br label %cond.end.93

cond.false.89:                                    ; preds = %if.then.83
  %61 = load i32, i32* %alpha, align 4
  %idxprom90 = sext i32 %61 to i64
  %62 = load i8*, i8** %src1.addr, align 8
  %arrayidx91 = getelementptr inbounds i8, i8* %62, i64 %idxprom90
  %63 = load i8, i8* %arrayidx91, align 1
  %conv92 = zext i8 %63 to i32
  br label %cond.end.93

cond.end.93:                                      ; preds = %cond.false.89, %cond.true.87
  %cond94 = phi i32 [ %conv88, %cond.true.87 ], [ %conv92, %cond.false.89 ]
  %conv95 = trunc i32 %cond94 to i8
  %64 = load i32, i32* %alpha, align 4
  %idxprom96 = sext i32 %64 to i64
  %65 = load i8*, i8** %dest.addr, align 8
  %arrayidx97 = getelementptr inbounds i8, i8* %65, i64 %idxprom96
  store i8 %conv95, i8* %arrayidx97, align 1
  br label %if.end.124

if.else.98:                                       ; preds = %if.end.81
  %66 = load i32, i32* %alpha, align 4
  %idxprom99 = sext i32 %66 to i64
  %67 = load i8*, i8** %src1.addr, align 8
  %arrayidx100 = getelementptr inbounds i8, i8* %67, i64 %idxprom99
  %68 = load i8, i8* %arrayidx100, align 1
  %conv101 = zext i8 %68 to i32
  %tobool102 = icmp ne i32 %conv101, 0
  br i1 %tobool102, label %cond.true.103, label %cond.false.107

cond.true.103:                                    ; preds = %if.else.98
  %69 = load i32, i32* %alpha, align 4
  %idxprom104 = sext i32 %69 to i64
  %70 = load i8*, i8** %src1.addr, align 8
  %arrayidx105 = getelementptr inbounds i8, i8* %70, i64 %idxprom104
  %71 = load i8, i8* %arrayidx105, align 1
  %conv106 = zext i8 %71 to i32
  br label %cond.end.119

cond.false.107:                                   ; preds = %if.else.98
  %72 = load i32, i32* %alpha, align 4
  %idxprom108 = sext i32 %72 to i64
  %73 = load i32*, i32** %affect.addr, align 8
  %arrayidx109 = getelementptr inbounds i32, i32* %73, i64 %idxprom108
  %74 = load i32, i32* %arrayidx109, align 4
  %tobool110 = icmp ne i32 %74, 0
  br i1 %tobool110, label %cond.true.111, label %cond.false.113

cond.true.111:                                    ; preds = %cond.false.107
  %75 = load i8, i8* %new_alpha, align 1
  %conv112 = zext i8 %75 to i32
  br label %cond.end.117

cond.false.113:                                   ; preds = %cond.false.107
  %76 = load i32, i32* %alpha, align 4
  %idxprom114 = sext i32 %76 to i64
  %77 = load i8*, i8** %src1.addr, align 8
  %arrayidx115 = getelementptr inbounds i8, i8* %77, i64 %idxprom114
  %78 = load i8, i8* %arrayidx115, align 1
  %conv116 = zext i8 %78 to i32
  br label %cond.end.117

cond.end.117:                                     ; preds = %cond.false.113, %cond.true.111
  %cond118 = phi i32 [ %conv112, %cond.true.111 ], [ %conv116, %cond.false.113 ]
  br label %cond.end.119

cond.end.119:                                     ; preds = %cond.end.117, %cond.true.103
  %cond120 = phi i32 [ %conv106, %cond.true.103 ], [ %cond118, %cond.end.117 ]
  %conv121 = trunc i32 %cond120 to i8
  %79 = load i32, i32* %alpha, align 4
  %idxprom122 = sext i32 %79 to i64
  %80 = load i8*, i8** %dest.addr, align 8
  %arrayidx123 = getelementptr inbounds i8, i8* %80, i64 %idxprom122
  store i8 %conv121, i8* %arrayidx123, align 1
  br label %if.end.124

if.end.124:                                       ; preds = %cond.end.119, %cond.end.93
  %81 = load i8*, i8** %m, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %81, i32 1
  store i8* %incdec.ptr, i8** %m, align 8
  %82 = load i32, i32* %bytes.addr, align 4
  %83 = load i8*, i8** %src1.addr, align 8
  %idx.ext = zext i32 %82 to i64
  %add.ptr = getelementptr inbounds i8, i8* %83, i64 %idx.ext
  store i8* %add.ptr, i8** %src1.addr, align 8
  %84 = load i32, i32* %src2_bytes, align 4
  %85 = load i8*, i8** %src2.addr, align 8
  %idx.ext125 = sext i32 %84 to i64
  %add.ptr126 = getelementptr inbounds i8, i8* %85, i64 %idx.ext125
  store i8* %add.ptr126, i8** %src2.addr, align 8
  %86 = load i32, i32* %bytes.addr, align 4
  %87 = load i8*, i8** %dest.addr, align 8
  %idx.ext127 = zext i32 %86 to i64
  %add.ptr128 = getelementptr inbounds i8, i8* %87, i64 %idx.ext127
  store i8* %add.ptr128, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.292

if.else.129:                                      ; preds = %if.then
  br label %while.cond.130

while.cond.130:                                   ; preds = %if.end.283, %if.else.129
  %88 = load i32, i32* %length.addr, align 4
  %dec131 = add i32 %88, -1
  store i32 %dec131, i32* %length.addr, align 4
  %tobool132 = icmp ne i32 %88, 0
  br i1 %tobool132, label %while.body.133, label %while.end.291

while.body.133:                                   ; preds = %while.cond.130
  %89 = load i8*, i8** %m, align 8
  %90 = load i8, i8* %89, align 1
  %conv138 = zext i8 %90 to i32
  %91 = load i32, i32* %opacity.addr, align 4
  %mul139 = mul i32 %conv138, %91
  %add140 = add i32 %mul139, 128
  %conv141 = zext i32 %add140 to i64
  store i64 %conv141, i64* %tmp135, align 8
  %92 = load i64, i64* %tmp135, align 8
  %shr142 = lshr i64 %92, 8
  %93 = load i64, i64* %tmp135, align 8
  %add143 = add i64 %shr142, %93
  %shr144 = lshr i64 %add143, 8
  %conv145 = trunc i64 %shr144 to i8
  store i8 %conv145, i8* %src2_alpha137, align 1
  %94 = load i32, i32* %alpha, align 4
  %idxprom148 = sext i32 %94 to i64
  %95 = load i8*, i8** %src1.addr, align 8
  %arrayidx149 = getelementptr inbounds i8, i8* %95, i64 %idxprom148
  %96 = load i8, i8* %arrayidx149, align 1
  %conv150 = zext i8 %96 to i64
  %97 = load i32, i32* %alpha, align 4
  %idxprom151 = sext i32 %97 to i64
  %98 = load i8*, i8** %src1.addr, align 8
  %arrayidx152 = getelementptr inbounds i8, i8* %98, i64 %idxprom151
  %99 = load i8, i8* %arrayidx152, align 1
  %conv153 = zext i8 %99 to i32
  %sub154 = sub nsw i32 255, %conv153
  %100 = load i8, i8* %src2_alpha137, align 1
  %conv155 = zext i8 %100 to i32
  %mul156 = mul nsw i32 %sub154, %conv155
  %add157 = add nsw i32 %mul156, 128
  %conv158 = sext i32 %add157 to i64
  store i64 %conv158, i64* %tmp135, align 8
  %101 = load i64, i64* %tmp135, align 8
  %shr159 = lshr i64 %101, 8
  %102 = load i64, i64* %tmp135, align 8
  %add160 = add i64 %shr159, %102
  %shr161 = lshr i64 %add160, 8
  %add162 = add i64 %conv150, %shr161
  %conv163 = trunc i64 %add162 to i8
  store i8 %conv163, i8* %new_alpha147, align 1
  %103 = load i8, i8* %src2_alpha137, align 1
  %conv164 = zext i8 %103 to i32
  %cmp165 = icmp ne i32 %conv164, 0
  br i1 %cmp165, label %land.lhs.true.167, label %if.end.240

land.lhs.true.167:                                ; preds = %while.body.133
  %104 = load i8, i8* %new_alpha147, align 1
  %conv168 = zext i8 %104 to i32
  %cmp169 = icmp ne i32 %conv168, 0
  br i1 %cmp169, label %if.then.171, label %if.end.240

if.then.171:                                      ; preds = %land.lhs.true.167
  %105 = load i32, i32* %alpha, align 4
  store i32 %105, i32* %b, align 4
  %106 = load i8, i8* %src2_alpha137, align 1
  %conv172 = zext i8 %106 to i32
  %107 = load i8, i8* %new_alpha147, align 1
  %conv173 = zext i8 %107 to i32
  %cmp174 = icmp eq i32 %conv172, %conv173
  br i1 %cmp174, label %if.then.176, label %if.else.198

if.then.176:                                      ; preds = %if.then.171
  br label %do.body.177

do.body.177:                                      ; preds = %do.cond.195, %if.then.176
  %108 = load i32, i32* %b, align 4
  %dec178 = add nsw i32 %108, -1
  store i32 %dec178, i32* %b, align 4
  %109 = load i32, i32* %b, align 4
  %idxprom179 = sext i32 %109 to i64
  %110 = load i32*, i32** %affect.addr, align 8
  %arrayidx180 = getelementptr inbounds i32, i32* %110, i64 %idxprom179
  %111 = load i32, i32* %arrayidx180, align 4
  %tobool181 = icmp ne i32 %111, 0
  br i1 %tobool181, label %cond.true.182, label %cond.false.186

cond.true.182:                                    ; preds = %do.body.177
  %112 = load i32, i32* %b, align 4
  %idxprom183 = sext i32 %112 to i64
  %113 = load i8*, i8** %src2.addr, align 8
  %arrayidx184 = getelementptr inbounds i8, i8* %113, i64 %idxprom183
  %114 = load i8, i8* %arrayidx184, align 1
  %conv185 = zext i8 %114 to i32
  br label %cond.end.190

cond.false.186:                                   ; preds = %do.body.177
  %115 = load i32, i32* %b, align 4
  %idxprom187 = sext i32 %115 to i64
  %116 = load i8*, i8** %src1.addr, align 8
  %arrayidx188 = getelementptr inbounds i8, i8* %116, i64 %idxprom187
  %117 = load i8, i8* %arrayidx188, align 1
  %conv189 = zext i8 %117 to i32
  br label %cond.end.190

cond.end.190:                                     ; preds = %cond.false.186, %cond.true.182
  %cond191 = phi i32 [ %conv185, %cond.true.182 ], [ %conv189, %cond.false.186 ]
  %conv192 = trunc i32 %cond191 to i8
  %118 = load i32, i32* %b, align 4
  %idxprom193 = sext i32 %118 to i64
  %119 = load i8*, i8** %dest.addr, align 8
  %arrayidx194 = getelementptr inbounds i8, i8* %119, i64 %idxprom193
  store i8 %conv192, i8* %arrayidx194, align 1
  br label %do.cond.195

do.cond.195:                                      ; preds = %cond.end.190
  %120 = load i32, i32* %b, align 4
  %tobool196 = icmp ne i32 %120, 0
  br i1 %tobool196, label %do.body.177, label %do.end.197

do.end.197:                                       ; preds = %do.cond.195
  br label %if.end.239

if.else.198:                                      ; preds = %if.then.171
  %121 = load i8, i8* %src2_alpha137, align 1
  %conv199 = uitofp i8 %121 to float
  %122 = load i8, i8* %new_alpha147, align 1
  %conv200 = zext i8 %122 to i32
  %conv201 = sitofp i32 %conv200 to float
  %div202 = fdiv float %conv199, %conv201
  store float %div202, float* %ratio, align 4
  %123 = load float, float* %ratio, align 4
  %conv203 = fpext float %123 to double
  %sub204 = fsub double 1.000000e+00, %conv203
  %conv205 = fptrunc double %sub204 to float
  store float %conv205, float* %compl_ratio, align 4
  br label %do.body.206

do.body.206:                                      ; preds = %do.cond.236, %if.else.198
  %124 = load i32, i32* %b, align 4
  %dec207 = add nsw i32 %124, -1
  store i32 %dec207, i32* %b, align 4
  %125 = load i32, i32* %b, align 4
  %idxprom208 = sext i32 %125 to i64
  %126 = load i32*, i32** %affect.addr, align 8
  %arrayidx209 = getelementptr inbounds i32, i32* %126, i64 %idxprom208
  %127 = load i32, i32* %arrayidx209, align 4
  %tobool210 = icmp ne i32 %127, 0
  br i1 %tobool210, label %cond.true.211, label %cond.false.227

cond.true.211:                                    ; preds = %do.body.206
  %128 = load i32, i32* %b, align 4
  %idxprom212 = sext i32 %128 to i64
  %129 = load i8*, i8** %src2.addr, align 8
  %arrayidx213 = getelementptr inbounds i8, i8* %129, i64 %idxprom212
  %130 = load i8, i8* %arrayidx213, align 1
  %conv214 = zext i8 %130 to i32
  %conv215 = sitofp i32 %conv214 to float
  %131 = load float, float* %ratio, align 4
  %mul216 = fmul float %conv215, %131
  %132 = load i32, i32* %b, align 4
  %idxprom217 = sext i32 %132 to i64
  %133 = load i8*, i8** %src1.addr, align 8
  %arrayidx218 = getelementptr inbounds i8, i8* %133, i64 %idxprom217
  %134 = load i8, i8* %arrayidx218, align 1
  %conv219 = zext i8 %134 to i32
  %conv220 = sitofp i32 %conv219 to float
  %135 = load float, float* %compl_ratio, align 4
  %mul221 = fmul float %conv220, %135
  %add222 = fadd float %mul216, %mul221
  %conv223 = fpext float %add222 to double
  %add224 = fadd double %conv223, 1.000000e-04
  %conv225 = fptoui double %add224 to i8
  %conv226 = zext i8 %conv225 to i32
  br label %cond.end.231

cond.false.227:                                   ; preds = %do.body.206
  %136 = load i32, i32* %b, align 4
  %idxprom228 = sext i32 %136 to i64
  %137 = load i8*, i8** %src1.addr, align 8
  %arrayidx229 = getelementptr inbounds i8, i8* %137, i64 %idxprom228
  %138 = load i8, i8* %arrayidx229, align 1
  %conv230 = zext i8 %138 to i32
  br label %cond.end.231

cond.end.231:                                     ; preds = %cond.false.227, %cond.true.211
  %cond232 = phi i32 [ %conv226, %cond.true.211 ], [ %conv230, %cond.false.227 ]
  %conv233 = trunc i32 %cond232 to i8
  %139 = load i32, i32* %b, align 4
  %idxprom234 = sext i32 %139 to i64
  %140 = load i8*, i8** %dest.addr, align 8
  %arrayidx235 = getelementptr inbounds i8, i8* %140, i64 %idxprom234
  store i8 %conv233, i8* %arrayidx235, align 1
  br label %do.cond.236

do.cond.236:                                      ; preds = %cond.end.231
  %141 = load i32, i32* %b, align 4
  %tobool237 = icmp ne i32 %141, 0
  br i1 %tobool237, label %do.body.206, label %do.end.238

do.end.238:                                       ; preds = %do.cond.236
  br label %if.end.239

if.end.239:                                       ; preds = %do.end.238, %do.end.197
  br label %if.end.240

if.end.240:                                       ; preds = %if.end.239, %land.lhs.true.167, %while.body.133
  %142 = load i32, i32* %mode_affect.addr, align 4
  %tobool241 = icmp ne i32 %142, 0
  br i1 %tobool241, label %if.then.242, label %if.else.257

if.then.242:                                      ; preds = %if.end.240
  %143 = load i32, i32* %alpha, align 4
  %idxprom243 = sext i32 %143 to i64
  %144 = load i32*, i32** %affect.addr, align 8
  %arrayidx244 = getelementptr inbounds i32, i32* %144, i64 %idxprom243
  %145 = load i32, i32* %arrayidx244, align 4
  %tobool245 = icmp ne i32 %145, 0
  br i1 %tobool245, label %cond.true.246, label %cond.false.248

cond.true.246:                                    ; preds = %if.then.242
  %146 = load i8, i8* %new_alpha147, align 1
  %conv247 = zext i8 %146 to i32
  br label %cond.end.252

cond.false.248:                                   ; preds = %if.then.242
  %147 = load i32, i32* %alpha, align 4
  %idxprom249 = sext i32 %147 to i64
  %148 = load i8*, i8** %src1.addr, align 8
  %arrayidx250 = getelementptr inbounds i8, i8* %148, i64 %idxprom249
  %149 = load i8, i8* %arrayidx250, align 1
  %conv251 = zext i8 %149 to i32
  br label %cond.end.252

cond.end.252:                                     ; preds = %cond.false.248, %cond.true.246
  %cond253 = phi i32 [ %conv247, %cond.true.246 ], [ %conv251, %cond.false.248 ]
  %conv254 = trunc i32 %cond253 to i8
  %150 = load i32, i32* %alpha, align 4
  %idxprom255 = sext i32 %150 to i64
  %151 = load i8*, i8** %dest.addr, align 8
  %arrayidx256 = getelementptr inbounds i8, i8* %151, i64 %idxprom255
  store i8 %conv254, i8* %arrayidx256, align 1
  br label %if.end.283

if.else.257:                                      ; preds = %if.end.240
  %152 = load i32, i32* %alpha, align 4
  %idxprom258 = sext i32 %152 to i64
  %153 = load i8*, i8** %src1.addr, align 8
  %arrayidx259 = getelementptr inbounds i8, i8* %153, i64 %idxprom258
  %154 = load i8, i8* %arrayidx259, align 1
  %conv260 = zext i8 %154 to i32
  %tobool261 = icmp ne i32 %conv260, 0
  br i1 %tobool261, label %cond.true.262, label %cond.false.266

cond.true.262:                                    ; preds = %if.else.257
  %155 = load i32, i32* %alpha, align 4
  %idxprom263 = sext i32 %155 to i64
  %156 = load i8*, i8** %src1.addr, align 8
  %arrayidx264 = getelementptr inbounds i8, i8* %156, i64 %idxprom263
  %157 = load i8, i8* %arrayidx264, align 1
  %conv265 = zext i8 %157 to i32
  br label %cond.end.278

cond.false.266:                                   ; preds = %if.else.257
  %158 = load i32, i32* %alpha, align 4
  %idxprom267 = sext i32 %158 to i64
  %159 = load i32*, i32** %affect.addr, align 8
  %arrayidx268 = getelementptr inbounds i32, i32* %159, i64 %idxprom267
  %160 = load i32, i32* %arrayidx268, align 4
  %tobool269 = icmp ne i32 %160, 0
  br i1 %tobool269, label %cond.true.270, label %cond.false.272

cond.true.270:                                    ; preds = %cond.false.266
  %161 = load i8, i8* %new_alpha147, align 1
  %conv271 = zext i8 %161 to i32
  br label %cond.end.276

cond.false.272:                                   ; preds = %cond.false.266
  %162 = load i32, i32* %alpha, align 4
  %idxprom273 = sext i32 %162 to i64
  %163 = load i8*, i8** %src1.addr, align 8
  %arrayidx274 = getelementptr inbounds i8, i8* %163, i64 %idxprom273
  %164 = load i8, i8* %arrayidx274, align 1
  %conv275 = zext i8 %164 to i32
  br label %cond.end.276

cond.end.276:                                     ; preds = %cond.false.272, %cond.true.270
  %cond277 = phi i32 [ %conv271, %cond.true.270 ], [ %conv275, %cond.false.272 ]
  br label %cond.end.278

cond.end.278:                                     ; preds = %cond.end.276, %cond.true.262
  %cond279 = phi i32 [ %conv265, %cond.true.262 ], [ %cond277, %cond.end.276 ]
  %conv280 = trunc i32 %cond279 to i8
  %165 = load i32, i32* %alpha, align 4
  %idxprom281 = sext i32 %165 to i64
  %166 = load i8*, i8** %dest.addr, align 8
  %arrayidx282 = getelementptr inbounds i8, i8* %166, i64 %idxprom281
  store i8 %conv280, i8* %arrayidx282, align 1
  br label %if.end.283

if.end.283:                                       ; preds = %cond.end.278, %cond.end.252
  %167 = load i8*, i8** %m, align 8
  %incdec.ptr284 = getelementptr inbounds i8, i8* %167, i32 1
  store i8* %incdec.ptr284, i8** %m, align 8
  %168 = load i32, i32* %bytes.addr, align 4
  %169 = load i8*, i8** %src1.addr, align 8
  %idx.ext285 = zext i32 %168 to i64
  %add.ptr286 = getelementptr inbounds i8, i8* %169, i64 %idx.ext285
  store i8* %add.ptr286, i8** %src1.addr, align 8
  %170 = load i32, i32* %src2_bytes, align 4
  %171 = load i8*, i8** %src2.addr, align 8
  %idx.ext287 = sext i32 %170 to i64
  %add.ptr288 = getelementptr inbounds i8, i8* %171, i64 %idx.ext287
  store i8* %add.ptr288, i8** %src2.addr, align 8
  %172 = load i32, i32* %bytes.addr, align 4
  %173 = load i8*, i8** %dest.addr, align 8
  %idx.ext289 = zext i32 %172 to i64
  %add.ptr290 = getelementptr inbounds i8, i8* %173, i64 %idx.ext289
  store i8* %add.ptr290, i8** %dest.addr, align 8
  br label %while.cond.130

while.end.291:                                    ; preds = %while.cond.130
  br label %if.end.292

if.end.292:                                       ; preds = %while.end.291, %while.end
  br label %if.end.448

if.else.293:                                      ; preds = %entry
  br label %while.cond.294

while.cond.294:                                   ; preds = %if.end.440, %if.else.293
  %174 = load i32, i32* %length.addr, align 4
  %dec295 = add i32 %174, -1
  store i32 %dec295, i32* %length.addr, align 4
  %tobool296 = icmp ne i32 %174, 0
  br i1 %tobool296, label %while.body.297, label %while.end.447

while.body.297:                                   ; preds = %while.cond.294
  %175 = load i32, i32* %opacity.addr, align 4
  %conv302 = trunc i32 %175 to i8
  store i8 %conv302, i8* %src2_alpha301, align 1
  %176 = load i32, i32* %alpha, align 4
  %idxprom305 = sext i32 %176 to i64
  %177 = load i8*, i8** %src1.addr, align 8
  %arrayidx306 = getelementptr inbounds i8, i8* %177, i64 %idxprom305
  %178 = load i8, i8* %arrayidx306, align 1
  %conv307 = zext i8 %178 to i64
  %179 = load i32, i32* %alpha, align 4
  %idxprom308 = sext i32 %179 to i64
  %180 = load i8*, i8** %src1.addr, align 8
  %arrayidx309 = getelementptr inbounds i8, i8* %180, i64 %idxprom308
  %181 = load i8, i8* %arrayidx309, align 1
  %conv310 = zext i8 %181 to i32
  %sub311 = sub nsw i32 255, %conv310
  %182 = load i8, i8* %src2_alpha301, align 1
  %conv312 = zext i8 %182 to i32
  %mul313 = mul nsw i32 %sub311, %conv312
  %add314 = add nsw i32 %mul313, 128
  %conv315 = sext i32 %add314 to i64
  store i64 %conv315, i64* %tmp299, align 8
  %183 = load i64, i64* %tmp299, align 8
  %shr316 = lshr i64 %183, 8
  %184 = load i64, i64* %tmp299, align 8
  %add317 = add i64 %shr316, %184
  %shr318 = lshr i64 %add317, 8
  %add319 = add i64 %conv307, %shr318
  %conv320 = trunc i64 %add319 to i8
  store i8 %conv320, i8* %new_alpha304, align 1
  %185 = load i8, i8* %src2_alpha301, align 1
  %conv321 = zext i8 %185 to i32
  %cmp322 = icmp ne i32 %conv321, 0
  br i1 %cmp322, label %land.lhs.true.324, label %if.end.397

land.lhs.true.324:                                ; preds = %while.body.297
  %186 = load i8, i8* %new_alpha304, align 1
  %conv325 = zext i8 %186 to i32
  %cmp326 = icmp ne i32 %conv325, 0
  br i1 %cmp326, label %if.then.328, label %if.end.397

if.then.328:                                      ; preds = %land.lhs.true.324
  %187 = load i32, i32* %alpha, align 4
  store i32 %187, i32* %b, align 4
  %188 = load i8, i8* %src2_alpha301, align 1
  %conv329 = zext i8 %188 to i32
  %189 = load i8, i8* %new_alpha304, align 1
  %conv330 = zext i8 %189 to i32
  %cmp331 = icmp eq i32 %conv329, %conv330
  br i1 %cmp331, label %if.then.333, label %if.else.355

if.then.333:                                      ; preds = %if.then.328
  br label %do.body.334

do.body.334:                                      ; preds = %do.cond.352, %if.then.333
  %190 = load i32, i32* %b, align 4
  %dec335 = add nsw i32 %190, -1
  store i32 %dec335, i32* %b, align 4
  %191 = load i32, i32* %b, align 4
  %idxprom336 = sext i32 %191 to i64
  %192 = load i32*, i32** %affect.addr, align 8
  %arrayidx337 = getelementptr inbounds i32, i32* %192, i64 %idxprom336
  %193 = load i32, i32* %arrayidx337, align 4
  %tobool338 = icmp ne i32 %193, 0
  br i1 %tobool338, label %cond.true.339, label %cond.false.343

cond.true.339:                                    ; preds = %do.body.334
  %194 = load i32, i32* %b, align 4
  %idxprom340 = sext i32 %194 to i64
  %195 = load i8*, i8** %src2.addr, align 8
  %arrayidx341 = getelementptr inbounds i8, i8* %195, i64 %idxprom340
  %196 = load i8, i8* %arrayidx341, align 1
  %conv342 = zext i8 %196 to i32
  br label %cond.end.347

cond.false.343:                                   ; preds = %do.body.334
  %197 = load i32, i32* %b, align 4
  %idxprom344 = sext i32 %197 to i64
  %198 = load i8*, i8** %src1.addr, align 8
  %arrayidx345 = getelementptr inbounds i8, i8* %198, i64 %idxprom344
  %199 = load i8, i8* %arrayidx345, align 1
  %conv346 = zext i8 %199 to i32
  br label %cond.end.347

cond.end.347:                                     ; preds = %cond.false.343, %cond.true.339
  %cond348 = phi i32 [ %conv342, %cond.true.339 ], [ %conv346, %cond.false.343 ]
  %conv349 = trunc i32 %cond348 to i8
  %200 = load i32, i32* %b, align 4
  %idxprom350 = sext i32 %200 to i64
  %201 = load i8*, i8** %dest.addr, align 8
  %arrayidx351 = getelementptr inbounds i8, i8* %201, i64 %idxprom350
  store i8 %conv349, i8* %arrayidx351, align 1
  br label %do.cond.352

do.cond.352:                                      ; preds = %cond.end.347
  %202 = load i32, i32* %b, align 4
  %tobool353 = icmp ne i32 %202, 0
  br i1 %tobool353, label %do.body.334, label %do.end.354

do.end.354:                                       ; preds = %do.cond.352
  br label %if.end.396

if.else.355:                                      ; preds = %if.then.328
  %203 = load i8, i8* %src2_alpha301, align 1
  %conv356 = uitofp i8 %203 to float
  %204 = load i8, i8* %new_alpha304, align 1
  %conv357 = zext i8 %204 to i32
  %conv358 = sitofp i32 %conv357 to float
  %div359 = fdiv float %conv356, %conv358
  store float %div359, float* %ratio, align 4
  %205 = load float, float* %ratio, align 4
  %conv360 = fpext float %205 to double
  %sub361 = fsub double 1.000000e+00, %conv360
  %conv362 = fptrunc double %sub361 to float
  store float %conv362, float* %compl_ratio, align 4
  br label %do.body.363

do.body.363:                                      ; preds = %do.cond.393, %if.else.355
  %206 = load i32, i32* %b, align 4
  %dec364 = add nsw i32 %206, -1
  store i32 %dec364, i32* %b, align 4
  %207 = load i32, i32* %b, align 4
  %idxprom365 = sext i32 %207 to i64
  %208 = load i32*, i32** %affect.addr, align 8
  %arrayidx366 = getelementptr inbounds i32, i32* %208, i64 %idxprom365
  %209 = load i32, i32* %arrayidx366, align 4
  %tobool367 = icmp ne i32 %209, 0
  br i1 %tobool367, label %cond.true.368, label %cond.false.384

cond.true.368:                                    ; preds = %do.body.363
  %210 = load i32, i32* %b, align 4
  %idxprom369 = sext i32 %210 to i64
  %211 = load i8*, i8** %src2.addr, align 8
  %arrayidx370 = getelementptr inbounds i8, i8* %211, i64 %idxprom369
  %212 = load i8, i8* %arrayidx370, align 1
  %conv371 = zext i8 %212 to i32
  %conv372 = sitofp i32 %conv371 to float
  %213 = load float, float* %ratio, align 4
  %mul373 = fmul float %conv372, %213
  %214 = load i32, i32* %b, align 4
  %idxprom374 = sext i32 %214 to i64
  %215 = load i8*, i8** %src1.addr, align 8
  %arrayidx375 = getelementptr inbounds i8, i8* %215, i64 %idxprom374
  %216 = load i8, i8* %arrayidx375, align 1
  %conv376 = zext i8 %216 to i32
  %conv377 = sitofp i32 %conv376 to float
  %217 = load float, float* %compl_ratio, align 4
  %mul378 = fmul float %conv377, %217
  %add379 = fadd float %mul373, %mul378
  %conv380 = fpext float %add379 to double
  %add381 = fadd double %conv380, 1.000000e-04
  %conv382 = fptoui double %add381 to i8
  %conv383 = zext i8 %conv382 to i32
  br label %cond.end.388

cond.false.384:                                   ; preds = %do.body.363
  %218 = load i32, i32* %b, align 4
  %idxprom385 = sext i32 %218 to i64
  %219 = load i8*, i8** %src1.addr, align 8
  %arrayidx386 = getelementptr inbounds i8, i8* %219, i64 %idxprom385
  %220 = load i8, i8* %arrayidx386, align 1
  %conv387 = zext i8 %220 to i32
  br label %cond.end.388

cond.end.388:                                     ; preds = %cond.false.384, %cond.true.368
  %cond389 = phi i32 [ %conv383, %cond.true.368 ], [ %conv387, %cond.false.384 ]
  %conv390 = trunc i32 %cond389 to i8
  %221 = load i32, i32* %b, align 4
  %idxprom391 = sext i32 %221 to i64
  %222 = load i8*, i8** %dest.addr, align 8
  %arrayidx392 = getelementptr inbounds i8, i8* %222, i64 %idxprom391
  store i8 %conv390, i8* %arrayidx392, align 1
  br label %do.cond.393

do.cond.393:                                      ; preds = %cond.end.388
  %223 = load i32, i32* %b, align 4
  %tobool394 = icmp ne i32 %223, 0
  br i1 %tobool394, label %do.body.363, label %do.end.395

do.end.395:                                       ; preds = %do.cond.393
  br label %if.end.396

if.end.396:                                       ; preds = %do.end.395, %do.end.354
  br label %if.end.397

if.end.397:                                       ; preds = %if.end.396, %land.lhs.true.324, %while.body.297
  %224 = load i32, i32* %mode_affect.addr, align 4
  %tobool398 = icmp ne i32 %224, 0
  br i1 %tobool398, label %if.then.399, label %if.else.414

if.then.399:                                      ; preds = %if.end.397
  %225 = load i32, i32* %alpha, align 4
  %idxprom400 = sext i32 %225 to i64
  %226 = load i32*, i32** %affect.addr, align 8
  %arrayidx401 = getelementptr inbounds i32, i32* %226, i64 %idxprom400
  %227 = load i32, i32* %arrayidx401, align 4
  %tobool402 = icmp ne i32 %227, 0
  br i1 %tobool402, label %cond.true.403, label %cond.false.405

cond.true.403:                                    ; preds = %if.then.399
  %228 = load i8, i8* %new_alpha304, align 1
  %conv404 = zext i8 %228 to i32
  br label %cond.end.409

cond.false.405:                                   ; preds = %if.then.399
  %229 = load i32, i32* %alpha, align 4
  %idxprom406 = sext i32 %229 to i64
  %230 = load i8*, i8** %src1.addr, align 8
  %arrayidx407 = getelementptr inbounds i8, i8* %230, i64 %idxprom406
  %231 = load i8, i8* %arrayidx407, align 1
  %conv408 = zext i8 %231 to i32
  br label %cond.end.409

cond.end.409:                                     ; preds = %cond.false.405, %cond.true.403
  %cond410 = phi i32 [ %conv404, %cond.true.403 ], [ %conv408, %cond.false.405 ]
  %conv411 = trunc i32 %cond410 to i8
  %232 = load i32, i32* %alpha, align 4
  %idxprom412 = sext i32 %232 to i64
  %233 = load i8*, i8** %dest.addr, align 8
  %arrayidx413 = getelementptr inbounds i8, i8* %233, i64 %idxprom412
  store i8 %conv411, i8* %arrayidx413, align 1
  br label %if.end.440

if.else.414:                                      ; preds = %if.end.397
  %234 = load i32, i32* %alpha, align 4
  %idxprom415 = sext i32 %234 to i64
  %235 = load i8*, i8** %src1.addr, align 8
  %arrayidx416 = getelementptr inbounds i8, i8* %235, i64 %idxprom415
  %236 = load i8, i8* %arrayidx416, align 1
  %conv417 = zext i8 %236 to i32
  %tobool418 = icmp ne i32 %conv417, 0
  br i1 %tobool418, label %cond.true.419, label %cond.false.423

cond.true.419:                                    ; preds = %if.else.414
  %237 = load i32, i32* %alpha, align 4
  %idxprom420 = sext i32 %237 to i64
  %238 = load i8*, i8** %src1.addr, align 8
  %arrayidx421 = getelementptr inbounds i8, i8* %238, i64 %idxprom420
  %239 = load i8, i8* %arrayidx421, align 1
  %conv422 = zext i8 %239 to i32
  br label %cond.end.435

cond.false.423:                                   ; preds = %if.else.414
  %240 = load i32, i32* %alpha, align 4
  %idxprom424 = sext i32 %240 to i64
  %241 = load i32*, i32** %affect.addr, align 8
  %arrayidx425 = getelementptr inbounds i32, i32* %241, i64 %idxprom424
  %242 = load i32, i32* %arrayidx425, align 4
  %tobool426 = icmp ne i32 %242, 0
  br i1 %tobool426, label %cond.true.427, label %cond.false.429

cond.true.427:                                    ; preds = %cond.false.423
  %243 = load i8, i8* %new_alpha304, align 1
  %conv428 = zext i8 %243 to i32
  br label %cond.end.433

cond.false.429:                                   ; preds = %cond.false.423
  %244 = load i32, i32* %alpha, align 4
  %idxprom430 = sext i32 %244 to i64
  %245 = load i8*, i8** %src1.addr, align 8
  %arrayidx431 = getelementptr inbounds i8, i8* %245, i64 %idxprom430
  %246 = load i8, i8* %arrayidx431, align 1
  %conv432 = zext i8 %246 to i32
  br label %cond.end.433

cond.end.433:                                     ; preds = %cond.false.429, %cond.true.427
  %cond434 = phi i32 [ %conv428, %cond.true.427 ], [ %conv432, %cond.false.429 ]
  br label %cond.end.435

cond.end.435:                                     ; preds = %cond.end.433, %cond.true.419
  %cond436 = phi i32 [ %conv422, %cond.true.419 ], [ %cond434, %cond.end.433 ]
  %conv437 = trunc i32 %cond436 to i8
  %247 = load i32, i32* %alpha, align 4
  %idxprom438 = sext i32 %247 to i64
  %248 = load i8*, i8** %dest.addr, align 8
  %arrayidx439 = getelementptr inbounds i8, i8* %248, i64 %idxprom438
  store i8 %conv437, i8* %arrayidx439, align 1
  br label %if.end.440

if.end.440:                                       ; preds = %cond.end.435, %cond.end.409
  %249 = load i32, i32* %bytes.addr, align 4
  %250 = load i8*, i8** %src1.addr, align 8
  %idx.ext441 = zext i32 %249 to i64
  %add.ptr442 = getelementptr inbounds i8, i8* %250, i64 %idx.ext441
  store i8* %add.ptr442, i8** %src1.addr, align 8
  %251 = load i32, i32* %src2_bytes, align 4
  %252 = load i8*, i8** %src2.addr, align 8
  %idx.ext443 = sext i32 %251 to i64
  %add.ptr444 = getelementptr inbounds i8, i8* %252, i64 %idx.ext443
  store i8* %add.ptr444, i8** %src2.addr, align 8
  %253 = load i32, i32* %bytes.addr, align 4
  %254 = load i8*, i8** %dest.addr, align 8
  %idx.ext445 = zext i32 %253 to i64
  %add.ptr446 = getelementptr inbounds i8, i8* %254, i64 %idx.ext445
  store i8* %add.ptr446, i8** %dest.addr, align 8
  br label %while.cond.294

while.end.447:                                    ; preds = %while.cond.294
  br label %if.end.448

if.end.448:                                       ; preds = %while.end.447, %if.end.292
  ret void
}

; Function Attrs: nounwind uwtable
define void @combine_inten_a_and_inten_a_pixels(i8* %src1, i8* %src2, i8* %dest, i8* %mask, i32 %opacity, i32* %affect, i32 %mode_affect, i32 %length, i32 %bytes) #0 {
entry:
  %src1.addr = alloca i8*, align 8
  %src2.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %opacity.addr = alloca i32, align 4
  %affect.addr = alloca i32*, align 8
  %mode_affect.addr = alloca i32, align 4
  %length.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %alpha = alloca i32, align 4
  %b = alloca i32, align 4
  %ratio = alloca float, align 4
  %compl_ratio = alloca float, align 4
  %m = alloca i8*, align 8
  %mask_ip = alloca i32*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %tmp = alloca i64, align 8
  %src2_alpha = alloca i8, align 1
  %new_alpha = alloca i8, align 1
  %tmp170 = alloca i64, align 8
  %src2_alpha172 = alloca i8, align 1
  %new_alpha185 = alloca i8, align 1
  %tmp352 = alloca i64, align 8
  %src2_alpha354 = alloca i8, align 1
  %new_alpha367 = alloca i8, align 1
  %mask_ip514 = alloca i32*, align 8
  %i516 = alloca i32, align 4
  %j518 = alloca i32, align 4
  %tmp539 = alloca i64, align 8
  %src2_alpha541 = alloca i8, align 1
  %new_alpha555 = alloca i8, align 1
  %tmp718 = alloca i64, align 8
  %src2_alpha720 = alloca i8, align 1
  %new_alpha734 = alloca i8, align 1
  %tmp901 = alloca i64, align 8
  %src2_alpha903 = alloca i8, align 1
  %new_alpha917 = alloca i8, align 1
  %tmp1072 = alloca i64, align 8
  %src2_alpha1074 = alloca i8, align 1
  %new_alpha1078 = alloca i8, align 1
  %tmp1228 = alloca i64, align 8
  %src2_alpha1230 = alloca i8, align 1
  %new_alpha1242 = alloca i8, align 1
  store i8* %src1, i8** %src1.addr, align 8
  store i8* %src2, i8** %src2.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32* %affect, i32** %affect.addr, align 8
  store i32 %mode_affect, i32* %mode_affect.addr, align 4
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %0 = load i32, i32* %bytes.addr, align 4
  %sub = sub i32 %0, 1
  store i32 %sub, i32* %alpha, align 4
  %1 = load i8*, i8** %mask.addr, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.then, label %if.else.1063

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %mask.addr, align 8
  store i8* %2, i8** %m, align 8
  %3 = load i32, i32* %opacity.addr, align 4
  %cmp = icmp eq i32 %3, 255
  br i1 %cmp, label %if.then.1, label %if.else.512

if.then.1:                                        ; preds = %if.then
  %4 = load i32, i32* %length.addr, align 4
  %conv = zext i32 %4 to i64
  %cmp2 = icmp uge i64 %conv, 4
  br i1 %cmp2, label %if.then.4, label %if.end.346

if.then.4:                                        ; preds = %if.then.1
  %5 = load i8*, i8** %m, align 8
  %6 = ptrtoint i8* %5 to i64
  %conv5 = trunc i64 %6 to i32
  %conv6 = sext i32 %conv5 to i64
  %and = and i64 %conv6, 3
  %conv7 = trunc i64 %and to i32
  store i32 %conv7, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %cmp8 = icmp ne i32 %7, 0
  br i1 %cmp8, label %if.then.10, label %if.end.153

if.then.10:                                       ; preds = %if.then.4
  %8 = load i32, i32* %i, align 4
  %conv11 = sext i32 %8 to i64
  %sub12 = sub i64 4, %conv11
  %conv13 = trunc i64 %sub12 to i32
  store i32 %conv13, i32* %i, align 4
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %length.addr, align 4
  %sub14 = sub i32 %10, %9
  store i32 %sub14, i32* %length.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end.148, %if.then.10
  %11 = load i32, i32* %i, align 4
  %dec = add nsw i32 %11, -1
  store i32 %dec, i32* %i, align 4
  %tobool15 = icmp ne i32 %11, 0
  br i1 %tobool15, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = load i32, i32* %alpha, align 4
  %idxprom = zext i32 %12 to i64
  %13 = load i8*, i8** %src2.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %13, i64 %idxprom
  %14 = load i8, i8* %arrayidx, align 1
  %conv17 = zext i8 %14 to i32
  %15 = load i8*, i8** %m, align 8
  %16 = load i8, i8* %15, align 1
  %conv18 = zext i8 %16 to i32
  %mul = mul nsw i32 %conv17, %conv18
  %add = add nsw i32 %mul, 128
  %conv19 = sext i32 %add to i64
  store i64 %conv19, i64* %tmp, align 8
  %17 = load i64, i64* %tmp, align 8
  %shr = lshr i64 %17, 8
  %18 = load i64, i64* %tmp, align 8
  %add20 = add i64 %shr, %18
  %shr21 = lshr i64 %add20, 8
  %conv22 = trunc i64 %shr21 to i8
  store i8 %conv22, i8* %src2_alpha, align 1
  %19 = load i32, i32* %alpha, align 4
  %idxprom24 = zext i32 %19 to i64
  %20 = load i8*, i8** %src1.addr, align 8
  %arrayidx25 = getelementptr inbounds i8, i8* %20, i64 %idxprom24
  %21 = load i8, i8* %arrayidx25, align 1
  %conv26 = zext i8 %21 to i64
  %22 = load i32, i32* %alpha, align 4
  %idxprom27 = zext i32 %22 to i64
  %23 = load i8*, i8** %src1.addr, align 8
  %arrayidx28 = getelementptr inbounds i8, i8* %23, i64 %idxprom27
  %24 = load i8, i8* %arrayidx28, align 1
  %conv29 = zext i8 %24 to i32
  %sub30 = sub nsw i32 255, %conv29
  %25 = load i8, i8* %src2_alpha, align 1
  %conv31 = zext i8 %25 to i32
  %mul32 = mul nsw i32 %sub30, %conv31
  %add33 = add nsw i32 %mul32, 128
  %conv34 = sext i32 %add33 to i64
  store i64 %conv34, i64* %tmp, align 8
  %26 = load i64, i64* %tmp, align 8
  %shr35 = lshr i64 %26, 8
  %27 = load i64, i64* %tmp, align 8
  %add36 = add i64 %shr35, %27
  %shr37 = lshr i64 %add36, 8
  %add38 = add i64 %conv26, %shr37
  %conv39 = trunc i64 %add38 to i8
  store i8 %conv39, i8* %new_alpha, align 1
  %28 = load i8, i8* %src2_alpha, align 1
  %conv40 = zext i8 %28 to i32
  %cmp41 = icmp ne i32 %conv40, 0
  br i1 %cmp41, label %land.lhs.true, label %if.end.105

land.lhs.true:                                    ; preds = %while.body
  %29 = load i8, i8* %new_alpha, align 1
  %conv43 = zext i8 %29 to i32
  %cmp44 = icmp ne i32 %conv43, 0
  br i1 %cmp44, label %if.then.46, label %if.end.105

if.then.46:                                       ; preds = %land.lhs.true
  %30 = load i32, i32* %alpha, align 4
  store i32 %30, i32* %b, align 4
  %31 = load i8, i8* %src2_alpha, align 1
  %conv47 = zext i8 %31 to i32
  %32 = load i8, i8* %new_alpha, align 1
  %conv48 = zext i8 %32 to i32
  %cmp49 = icmp eq i32 %conv47, %conv48
  br i1 %cmp49, label %if.then.51, label %if.else

if.then.51:                                       ; preds = %if.then.46
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then.51
  %33 = load i32, i32* %b, align 4
  %dec52 = add i32 %33, -1
  store i32 %dec52, i32* %b, align 4
  %34 = load i32, i32* %b, align 4
  %idxprom53 = zext i32 %34 to i64
  %35 = load i32*, i32** %affect.addr, align 8
  %arrayidx54 = getelementptr inbounds i32, i32* %35, i64 %idxprom53
  %36 = load i32, i32* %arrayidx54, align 4
  %tobool55 = icmp ne i32 %36, 0
  br i1 %tobool55, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  %37 = load i32, i32* %b, align 4
  %idxprom56 = zext i32 %37 to i64
  %38 = load i8*, i8** %src2.addr, align 8
  %arrayidx57 = getelementptr inbounds i8, i8* %38, i64 %idxprom56
  %39 = load i8, i8* %arrayidx57, align 1
  %conv58 = zext i8 %39 to i32
  br label %cond.end

cond.false:                                       ; preds = %do.body
  %40 = load i32, i32* %b, align 4
  %idxprom59 = zext i32 %40 to i64
  %41 = load i8*, i8** %src1.addr, align 8
  %arrayidx60 = getelementptr inbounds i8, i8* %41, i64 %idxprom59
  %42 = load i8, i8* %arrayidx60, align 1
  %conv61 = zext i8 %42 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv58, %cond.true ], [ %conv61, %cond.false ]
  %conv62 = trunc i32 %cond to i8
  %43 = load i32, i32* %b, align 4
  %idxprom63 = zext i32 %43 to i64
  %44 = load i8*, i8** %dest.addr, align 8
  %arrayidx64 = getelementptr inbounds i8, i8* %44, i64 %idxprom63
  store i8 %conv62, i8* %arrayidx64, align 1
  br label %do.cond

do.cond:                                          ; preds = %cond.end
  %45 = load i32, i32* %b, align 4
  %tobool65 = icmp ne i32 %45, 0
  br i1 %tobool65, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end

if.else:                                          ; preds = %if.then.46
  %46 = load i8, i8* %src2_alpha, align 1
  %conv66 = uitofp i8 %46 to float
  %47 = load i8, i8* %new_alpha, align 1
  %conv67 = zext i8 %47 to i32
  %conv68 = sitofp i32 %conv67 to float
  %div = fdiv float %conv66, %conv68
  store float %div, float* %ratio, align 4
  %48 = load float, float* %ratio, align 4
  %conv69 = fpext float %48 to double
  %sub70 = fsub double 1.000000e+00, %conv69
  %conv71 = fptrunc double %sub70 to float
  store float %conv71, float* %compl_ratio, align 4
  br label %do.body.72

do.body.72:                                       ; preds = %do.cond.102, %if.else
  %49 = load i32, i32* %b, align 4
  %dec73 = add i32 %49, -1
  store i32 %dec73, i32* %b, align 4
  %50 = load i32, i32* %b, align 4
  %idxprom74 = zext i32 %50 to i64
  %51 = load i32*, i32** %affect.addr, align 8
  %arrayidx75 = getelementptr inbounds i32, i32* %51, i64 %idxprom74
  %52 = load i32, i32* %arrayidx75, align 4
  %tobool76 = icmp ne i32 %52, 0
  br i1 %tobool76, label %cond.true.77, label %cond.false.93

cond.true.77:                                     ; preds = %do.body.72
  %53 = load i32, i32* %b, align 4
  %idxprom78 = zext i32 %53 to i64
  %54 = load i8*, i8** %src2.addr, align 8
  %arrayidx79 = getelementptr inbounds i8, i8* %54, i64 %idxprom78
  %55 = load i8, i8* %arrayidx79, align 1
  %conv80 = zext i8 %55 to i32
  %conv81 = sitofp i32 %conv80 to float
  %56 = load float, float* %ratio, align 4
  %mul82 = fmul float %conv81, %56
  %57 = load i32, i32* %b, align 4
  %idxprom83 = zext i32 %57 to i64
  %58 = load i8*, i8** %src1.addr, align 8
  %arrayidx84 = getelementptr inbounds i8, i8* %58, i64 %idxprom83
  %59 = load i8, i8* %arrayidx84, align 1
  %conv85 = zext i8 %59 to i32
  %conv86 = sitofp i32 %conv85 to float
  %60 = load float, float* %compl_ratio, align 4
  %mul87 = fmul float %conv86, %60
  %add88 = fadd float %mul82, %mul87
  %conv89 = fpext float %add88 to double
  %add90 = fadd double %conv89, 1.000000e-04
  %conv91 = fptoui double %add90 to i8
  %conv92 = zext i8 %conv91 to i32
  br label %cond.end.97

cond.false.93:                                    ; preds = %do.body.72
  %61 = load i32, i32* %b, align 4
  %idxprom94 = zext i32 %61 to i64
  %62 = load i8*, i8** %src1.addr, align 8
  %arrayidx95 = getelementptr inbounds i8, i8* %62, i64 %idxprom94
  %63 = load i8, i8* %arrayidx95, align 1
  %conv96 = zext i8 %63 to i32
  br label %cond.end.97

cond.end.97:                                      ; preds = %cond.false.93, %cond.true.77
  %cond98 = phi i32 [ %conv92, %cond.true.77 ], [ %conv96, %cond.false.93 ]
  %conv99 = trunc i32 %cond98 to i8
  %64 = load i32, i32* %b, align 4
  %idxprom100 = zext i32 %64 to i64
  %65 = load i8*, i8** %dest.addr, align 8
  %arrayidx101 = getelementptr inbounds i8, i8* %65, i64 %idxprom100
  store i8 %conv99, i8* %arrayidx101, align 1
  br label %do.cond.102

do.cond.102:                                      ; preds = %cond.end.97
  %66 = load i32, i32* %b, align 4
  %tobool103 = icmp ne i32 %66, 0
  br i1 %tobool103, label %do.body.72, label %do.end.104

do.end.104:                                       ; preds = %do.cond.102
  br label %if.end

if.end:                                           ; preds = %do.end.104, %do.end
  br label %if.end.105

if.end.105:                                       ; preds = %if.end, %land.lhs.true, %while.body
  %67 = load i32, i32* %mode_affect.addr, align 4
  %tobool106 = icmp ne i32 %67, 0
  br i1 %tobool106, label %if.then.107, label %if.else.122

if.then.107:                                      ; preds = %if.end.105
  %68 = load i32, i32* %alpha, align 4
  %idxprom108 = zext i32 %68 to i64
  %69 = load i32*, i32** %affect.addr, align 8
  %arrayidx109 = getelementptr inbounds i32, i32* %69, i64 %idxprom108
  %70 = load i32, i32* %arrayidx109, align 4
  %tobool110 = icmp ne i32 %70, 0
  br i1 %tobool110, label %cond.true.111, label %cond.false.113

cond.true.111:                                    ; preds = %if.then.107
  %71 = load i8, i8* %new_alpha, align 1
  %conv112 = zext i8 %71 to i32
  br label %cond.end.117

cond.false.113:                                   ; preds = %if.then.107
  %72 = load i32, i32* %alpha, align 4
  %idxprom114 = zext i32 %72 to i64
  %73 = load i8*, i8** %src1.addr, align 8
  %arrayidx115 = getelementptr inbounds i8, i8* %73, i64 %idxprom114
  %74 = load i8, i8* %arrayidx115, align 1
  %conv116 = zext i8 %74 to i32
  br label %cond.end.117

cond.end.117:                                     ; preds = %cond.false.113, %cond.true.111
  %cond118 = phi i32 [ %conv112, %cond.true.111 ], [ %conv116, %cond.false.113 ]
  %conv119 = trunc i32 %cond118 to i8
  %75 = load i32, i32* %alpha, align 4
  %idxprom120 = zext i32 %75 to i64
  %76 = load i8*, i8** %dest.addr, align 8
  %arrayidx121 = getelementptr inbounds i8, i8* %76, i64 %idxprom120
  store i8 %conv119, i8* %arrayidx121, align 1
  br label %if.end.148

if.else.122:                                      ; preds = %if.end.105
  %77 = load i32, i32* %alpha, align 4
  %idxprom123 = zext i32 %77 to i64
  %78 = load i8*, i8** %src1.addr, align 8
  %arrayidx124 = getelementptr inbounds i8, i8* %78, i64 %idxprom123
  %79 = load i8, i8* %arrayidx124, align 1
  %conv125 = zext i8 %79 to i32
  %tobool126 = icmp ne i32 %conv125, 0
  br i1 %tobool126, label %cond.true.127, label %cond.false.131

cond.true.127:                                    ; preds = %if.else.122
  %80 = load i32, i32* %alpha, align 4
  %idxprom128 = zext i32 %80 to i64
  %81 = load i8*, i8** %src1.addr, align 8
  %arrayidx129 = getelementptr inbounds i8, i8* %81, i64 %idxprom128
  %82 = load i8, i8* %arrayidx129, align 1
  %conv130 = zext i8 %82 to i32
  br label %cond.end.143

cond.false.131:                                   ; preds = %if.else.122
  %83 = load i32, i32* %alpha, align 4
  %idxprom132 = zext i32 %83 to i64
  %84 = load i32*, i32** %affect.addr, align 8
  %arrayidx133 = getelementptr inbounds i32, i32* %84, i64 %idxprom132
  %85 = load i32, i32* %arrayidx133, align 4
  %tobool134 = icmp ne i32 %85, 0
  br i1 %tobool134, label %cond.true.135, label %cond.false.137

cond.true.135:                                    ; preds = %cond.false.131
  %86 = load i8, i8* %new_alpha, align 1
  %conv136 = zext i8 %86 to i32
  br label %cond.end.141

cond.false.137:                                   ; preds = %cond.false.131
  %87 = load i32, i32* %alpha, align 4
  %idxprom138 = zext i32 %87 to i64
  %88 = load i8*, i8** %src1.addr, align 8
  %arrayidx139 = getelementptr inbounds i8, i8* %88, i64 %idxprom138
  %89 = load i8, i8* %arrayidx139, align 1
  %conv140 = zext i8 %89 to i32
  br label %cond.end.141

cond.end.141:                                     ; preds = %cond.false.137, %cond.true.135
  %cond142 = phi i32 [ %conv136, %cond.true.135 ], [ %conv140, %cond.false.137 ]
  br label %cond.end.143

cond.end.143:                                     ; preds = %cond.end.141, %cond.true.127
  %cond144 = phi i32 [ %conv130, %cond.true.127 ], [ %cond142, %cond.end.141 ]
  %conv145 = trunc i32 %cond144 to i8
  %90 = load i32, i32* %alpha, align 4
  %idxprom146 = zext i32 %90 to i64
  %91 = load i8*, i8** %dest.addr, align 8
  %arrayidx147 = getelementptr inbounds i8, i8* %91, i64 %idxprom146
  store i8 %conv145, i8* %arrayidx147, align 1
  br label %if.end.148

if.end.148:                                       ; preds = %cond.end.143, %cond.end.117
  %92 = load i8*, i8** %m, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %92, i32 1
  store i8* %incdec.ptr, i8** %m, align 8
  %93 = load i32, i32* %bytes.addr, align 4
  %94 = load i8*, i8** %src1.addr, align 8
  %idx.ext = zext i32 %93 to i64
  %add.ptr = getelementptr inbounds i8, i8* %94, i64 %idx.ext
  store i8* %add.ptr, i8** %src1.addr, align 8
  %95 = load i32, i32* %bytes.addr, align 4
  %96 = load i8*, i8** %src2.addr, align 8
  %idx.ext149 = zext i32 %95 to i64
  %add.ptr150 = getelementptr inbounds i8, i8* %96, i64 %idx.ext149
  store i8* %add.ptr150, i8** %src2.addr, align 8
  %97 = load i32, i32* %bytes.addr, align 4
  %98 = load i8*, i8** %dest.addr, align 8
  %idx.ext151 = zext i32 %97 to i64
  %add.ptr152 = getelementptr inbounds i8, i8* %98, i64 %idx.ext151
  store i8* %add.ptr152, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.153

if.end.153:                                       ; preds = %while.end, %if.then.4
  %99 = load i8*, i8** %m, align 8
  %100 = bitcast i8* %99 to i32*
  store i32* %100, i32** %mask_ip, align 8
  %101 = load i32, i32* %length.addr, align 4
  %conv154 = zext i32 %101 to i64
  %div155 = udiv i64 %conv154, 4
  %conv156 = trunc i64 %div155 to i32
  store i32 %conv156, i32* %i, align 4
  %102 = load i32, i32* %length.addr, align 4
  %conv157 = zext i32 %102 to i64
  %rem = urem i64 %conv157, 4
  %conv158 = trunc i64 %rem to i32
  store i32 %conv158, i32* %length.addr, align 4
  br label %while.cond.159

while.cond.159:                                   ; preds = %if.end.343, %if.end.153
  %103 = load i32, i32* %i, align 4
  %dec160 = add nsw i32 %103, -1
  store i32 %dec160, i32* %i, align 4
  %tobool161 = icmp ne i32 %103, 0
  br i1 %tobool161, label %while.body.162, label %while.end.345

while.body.162:                                   ; preds = %while.cond.159
  %104 = load i32*, i32** %mask_ip, align 8
  %105 = load i32, i32* %104, align 4
  %tobool163 = icmp ne i32 %105, 0
  br i1 %tobool163, label %if.then.164, label %if.else.330

if.then.164:                                      ; preds = %while.body.162
  %106 = load i32*, i32** %mask_ip, align 8
  %107 = bitcast i32* %106 to i8*
  store i8* %107, i8** %m, align 8
  store i32 4, i32* %j, align 4
  br label %while.cond.165

while.cond.165:                                   ; preds = %if.end.321, %if.then.164
  %108 = load i32, i32* %j, align 4
  %dec166 = add nsw i32 %108, -1
  store i32 %dec166, i32* %j, align 4
  %tobool167 = icmp ne i32 %108, 0
  br i1 %tobool167, label %while.body.168, label %while.end.329

while.body.168:                                   ; preds = %while.cond.165
  %109 = load i32, i32* %alpha, align 4
  %idxprom173 = zext i32 %109 to i64
  %110 = load i8*, i8** %src2.addr, align 8
  %arrayidx174 = getelementptr inbounds i8, i8* %110, i64 %idxprom173
  %111 = load i8, i8* %arrayidx174, align 1
  %conv175 = zext i8 %111 to i32
  %112 = load i8*, i8** %m, align 8
  %113 = load i8, i8* %112, align 1
  %conv176 = zext i8 %113 to i32
  %mul177 = mul nsw i32 %conv175, %conv176
  %add178 = add nsw i32 %mul177, 128
  %conv179 = sext i32 %add178 to i64
  store i64 %conv179, i64* %tmp170, align 8
  %114 = load i64, i64* %tmp170, align 8
  %shr180 = lshr i64 %114, 8
  %115 = load i64, i64* %tmp170, align 8
  %add181 = add i64 %shr180, %115
  %shr182 = lshr i64 %add181, 8
  %conv183 = trunc i64 %shr182 to i8
  store i8 %conv183, i8* %src2_alpha172, align 1
  %116 = load i32, i32* %alpha, align 4
  %idxprom186 = zext i32 %116 to i64
  %117 = load i8*, i8** %src1.addr, align 8
  %arrayidx187 = getelementptr inbounds i8, i8* %117, i64 %idxprom186
  %118 = load i8, i8* %arrayidx187, align 1
  %conv188 = zext i8 %118 to i64
  %119 = load i32, i32* %alpha, align 4
  %idxprom189 = zext i32 %119 to i64
  %120 = load i8*, i8** %src1.addr, align 8
  %arrayidx190 = getelementptr inbounds i8, i8* %120, i64 %idxprom189
  %121 = load i8, i8* %arrayidx190, align 1
  %conv191 = zext i8 %121 to i32
  %sub192 = sub nsw i32 255, %conv191
  %122 = load i8, i8* %src2_alpha172, align 1
  %conv193 = zext i8 %122 to i32
  %mul194 = mul nsw i32 %sub192, %conv193
  %add195 = add nsw i32 %mul194, 128
  %conv196 = sext i32 %add195 to i64
  store i64 %conv196, i64* %tmp170, align 8
  %123 = load i64, i64* %tmp170, align 8
  %shr197 = lshr i64 %123, 8
  %124 = load i64, i64* %tmp170, align 8
  %add198 = add i64 %shr197, %124
  %shr199 = lshr i64 %add198, 8
  %add200 = add i64 %conv188, %shr199
  %conv201 = trunc i64 %add200 to i8
  store i8 %conv201, i8* %new_alpha185, align 1
  %125 = load i8, i8* %src2_alpha172, align 1
  %conv202 = zext i8 %125 to i32
  %cmp203 = icmp ne i32 %conv202, 0
  br i1 %cmp203, label %land.lhs.true.205, label %if.end.278

land.lhs.true.205:                                ; preds = %while.body.168
  %126 = load i8, i8* %new_alpha185, align 1
  %conv206 = zext i8 %126 to i32
  %cmp207 = icmp ne i32 %conv206, 0
  br i1 %cmp207, label %if.then.209, label %if.end.278

if.then.209:                                      ; preds = %land.lhs.true.205
  %127 = load i32, i32* %alpha, align 4
  store i32 %127, i32* %b, align 4
  %128 = load i8, i8* %src2_alpha172, align 1
  %conv210 = zext i8 %128 to i32
  %129 = load i8, i8* %new_alpha185, align 1
  %conv211 = zext i8 %129 to i32
  %cmp212 = icmp eq i32 %conv210, %conv211
  br i1 %cmp212, label %if.then.214, label %if.else.236

if.then.214:                                      ; preds = %if.then.209
  br label %do.body.215

do.body.215:                                      ; preds = %do.cond.233, %if.then.214
  %130 = load i32, i32* %b, align 4
  %dec216 = add i32 %130, -1
  store i32 %dec216, i32* %b, align 4
  %131 = load i32, i32* %b, align 4
  %idxprom217 = zext i32 %131 to i64
  %132 = load i32*, i32** %affect.addr, align 8
  %arrayidx218 = getelementptr inbounds i32, i32* %132, i64 %idxprom217
  %133 = load i32, i32* %arrayidx218, align 4
  %tobool219 = icmp ne i32 %133, 0
  br i1 %tobool219, label %cond.true.220, label %cond.false.224

cond.true.220:                                    ; preds = %do.body.215
  %134 = load i32, i32* %b, align 4
  %idxprom221 = zext i32 %134 to i64
  %135 = load i8*, i8** %src2.addr, align 8
  %arrayidx222 = getelementptr inbounds i8, i8* %135, i64 %idxprom221
  %136 = load i8, i8* %arrayidx222, align 1
  %conv223 = zext i8 %136 to i32
  br label %cond.end.228

cond.false.224:                                   ; preds = %do.body.215
  %137 = load i32, i32* %b, align 4
  %idxprom225 = zext i32 %137 to i64
  %138 = load i8*, i8** %src1.addr, align 8
  %arrayidx226 = getelementptr inbounds i8, i8* %138, i64 %idxprom225
  %139 = load i8, i8* %arrayidx226, align 1
  %conv227 = zext i8 %139 to i32
  br label %cond.end.228

cond.end.228:                                     ; preds = %cond.false.224, %cond.true.220
  %cond229 = phi i32 [ %conv223, %cond.true.220 ], [ %conv227, %cond.false.224 ]
  %conv230 = trunc i32 %cond229 to i8
  %140 = load i32, i32* %b, align 4
  %idxprom231 = zext i32 %140 to i64
  %141 = load i8*, i8** %dest.addr, align 8
  %arrayidx232 = getelementptr inbounds i8, i8* %141, i64 %idxprom231
  store i8 %conv230, i8* %arrayidx232, align 1
  br label %do.cond.233

do.cond.233:                                      ; preds = %cond.end.228
  %142 = load i32, i32* %b, align 4
  %tobool234 = icmp ne i32 %142, 0
  br i1 %tobool234, label %do.body.215, label %do.end.235

do.end.235:                                       ; preds = %do.cond.233
  br label %if.end.277

if.else.236:                                      ; preds = %if.then.209
  %143 = load i8, i8* %src2_alpha172, align 1
  %conv237 = uitofp i8 %143 to float
  %144 = load i8, i8* %new_alpha185, align 1
  %conv238 = zext i8 %144 to i32
  %conv239 = sitofp i32 %conv238 to float
  %div240 = fdiv float %conv237, %conv239
  store float %div240, float* %ratio, align 4
  %145 = load float, float* %ratio, align 4
  %conv241 = fpext float %145 to double
  %sub242 = fsub double 1.000000e+00, %conv241
  %conv243 = fptrunc double %sub242 to float
  store float %conv243, float* %compl_ratio, align 4
  br label %do.body.244

do.body.244:                                      ; preds = %do.cond.274, %if.else.236
  %146 = load i32, i32* %b, align 4
  %dec245 = add i32 %146, -1
  store i32 %dec245, i32* %b, align 4
  %147 = load i32, i32* %b, align 4
  %idxprom246 = zext i32 %147 to i64
  %148 = load i32*, i32** %affect.addr, align 8
  %arrayidx247 = getelementptr inbounds i32, i32* %148, i64 %idxprom246
  %149 = load i32, i32* %arrayidx247, align 4
  %tobool248 = icmp ne i32 %149, 0
  br i1 %tobool248, label %cond.true.249, label %cond.false.265

cond.true.249:                                    ; preds = %do.body.244
  %150 = load i32, i32* %b, align 4
  %idxprom250 = zext i32 %150 to i64
  %151 = load i8*, i8** %src2.addr, align 8
  %arrayidx251 = getelementptr inbounds i8, i8* %151, i64 %idxprom250
  %152 = load i8, i8* %arrayidx251, align 1
  %conv252 = zext i8 %152 to i32
  %conv253 = sitofp i32 %conv252 to float
  %153 = load float, float* %ratio, align 4
  %mul254 = fmul float %conv253, %153
  %154 = load i32, i32* %b, align 4
  %idxprom255 = zext i32 %154 to i64
  %155 = load i8*, i8** %src1.addr, align 8
  %arrayidx256 = getelementptr inbounds i8, i8* %155, i64 %idxprom255
  %156 = load i8, i8* %arrayidx256, align 1
  %conv257 = zext i8 %156 to i32
  %conv258 = sitofp i32 %conv257 to float
  %157 = load float, float* %compl_ratio, align 4
  %mul259 = fmul float %conv258, %157
  %add260 = fadd float %mul254, %mul259
  %conv261 = fpext float %add260 to double
  %add262 = fadd double %conv261, 1.000000e-04
  %conv263 = fptoui double %add262 to i8
  %conv264 = zext i8 %conv263 to i32
  br label %cond.end.269

cond.false.265:                                   ; preds = %do.body.244
  %158 = load i32, i32* %b, align 4
  %idxprom266 = zext i32 %158 to i64
  %159 = load i8*, i8** %src1.addr, align 8
  %arrayidx267 = getelementptr inbounds i8, i8* %159, i64 %idxprom266
  %160 = load i8, i8* %arrayidx267, align 1
  %conv268 = zext i8 %160 to i32
  br label %cond.end.269

cond.end.269:                                     ; preds = %cond.false.265, %cond.true.249
  %cond270 = phi i32 [ %conv264, %cond.true.249 ], [ %conv268, %cond.false.265 ]
  %conv271 = trunc i32 %cond270 to i8
  %161 = load i32, i32* %b, align 4
  %idxprom272 = zext i32 %161 to i64
  %162 = load i8*, i8** %dest.addr, align 8
  %arrayidx273 = getelementptr inbounds i8, i8* %162, i64 %idxprom272
  store i8 %conv271, i8* %arrayidx273, align 1
  br label %do.cond.274

do.cond.274:                                      ; preds = %cond.end.269
  %163 = load i32, i32* %b, align 4
  %tobool275 = icmp ne i32 %163, 0
  br i1 %tobool275, label %do.body.244, label %do.end.276

do.end.276:                                       ; preds = %do.cond.274
  br label %if.end.277

if.end.277:                                       ; preds = %do.end.276, %do.end.235
  br label %if.end.278

if.end.278:                                       ; preds = %if.end.277, %land.lhs.true.205, %while.body.168
  %164 = load i32, i32* %mode_affect.addr, align 4
  %tobool279 = icmp ne i32 %164, 0
  br i1 %tobool279, label %if.then.280, label %if.else.295

if.then.280:                                      ; preds = %if.end.278
  %165 = load i32, i32* %alpha, align 4
  %idxprom281 = zext i32 %165 to i64
  %166 = load i32*, i32** %affect.addr, align 8
  %arrayidx282 = getelementptr inbounds i32, i32* %166, i64 %idxprom281
  %167 = load i32, i32* %arrayidx282, align 4
  %tobool283 = icmp ne i32 %167, 0
  br i1 %tobool283, label %cond.true.284, label %cond.false.286

cond.true.284:                                    ; preds = %if.then.280
  %168 = load i8, i8* %new_alpha185, align 1
  %conv285 = zext i8 %168 to i32
  br label %cond.end.290

cond.false.286:                                   ; preds = %if.then.280
  %169 = load i32, i32* %alpha, align 4
  %idxprom287 = zext i32 %169 to i64
  %170 = load i8*, i8** %src1.addr, align 8
  %arrayidx288 = getelementptr inbounds i8, i8* %170, i64 %idxprom287
  %171 = load i8, i8* %arrayidx288, align 1
  %conv289 = zext i8 %171 to i32
  br label %cond.end.290

cond.end.290:                                     ; preds = %cond.false.286, %cond.true.284
  %cond291 = phi i32 [ %conv285, %cond.true.284 ], [ %conv289, %cond.false.286 ]
  %conv292 = trunc i32 %cond291 to i8
  %172 = load i32, i32* %alpha, align 4
  %idxprom293 = zext i32 %172 to i64
  %173 = load i8*, i8** %dest.addr, align 8
  %arrayidx294 = getelementptr inbounds i8, i8* %173, i64 %idxprom293
  store i8 %conv292, i8* %arrayidx294, align 1
  br label %if.end.321

if.else.295:                                      ; preds = %if.end.278
  %174 = load i32, i32* %alpha, align 4
  %idxprom296 = zext i32 %174 to i64
  %175 = load i8*, i8** %src1.addr, align 8
  %arrayidx297 = getelementptr inbounds i8, i8* %175, i64 %idxprom296
  %176 = load i8, i8* %arrayidx297, align 1
  %conv298 = zext i8 %176 to i32
  %tobool299 = icmp ne i32 %conv298, 0
  br i1 %tobool299, label %cond.true.300, label %cond.false.304

cond.true.300:                                    ; preds = %if.else.295
  %177 = load i32, i32* %alpha, align 4
  %idxprom301 = zext i32 %177 to i64
  %178 = load i8*, i8** %src1.addr, align 8
  %arrayidx302 = getelementptr inbounds i8, i8* %178, i64 %idxprom301
  %179 = load i8, i8* %arrayidx302, align 1
  %conv303 = zext i8 %179 to i32
  br label %cond.end.316

cond.false.304:                                   ; preds = %if.else.295
  %180 = load i32, i32* %alpha, align 4
  %idxprom305 = zext i32 %180 to i64
  %181 = load i32*, i32** %affect.addr, align 8
  %arrayidx306 = getelementptr inbounds i32, i32* %181, i64 %idxprom305
  %182 = load i32, i32* %arrayidx306, align 4
  %tobool307 = icmp ne i32 %182, 0
  br i1 %tobool307, label %cond.true.308, label %cond.false.310

cond.true.308:                                    ; preds = %cond.false.304
  %183 = load i8, i8* %new_alpha185, align 1
  %conv309 = zext i8 %183 to i32
  br label %cond.end.314

cond.false.310:                                   ; preds = %cond.false.304
  %184 = load i32, i32* %alpha, align 4
  %idxprom311 = zext i32 %184 to i64
  %185 = load i8*, i8** %src1.addr, align 8
  %arrayidx312 = getelementptr inbounds i8, i8* %185, i64 %idxprom311
  %186 = load i8, i8* %arrayidx312, align 1
  %conv313 = zext i8 %186 to i32
  br label %cond.end.314

cond.end.314:                                     ; preds = %cond.false.310, %cond.true.308
  %cond315 = phi i32 [ %conv309, %cond.true.308 ], [ %conv313, %cond.false.310 ]
  br label %cond.end.316

cond.end.316:                                     ; preds = %cond.end.314, %cond.true.300
  %cond317 = phi i32 [ %conv303, %cond.true.300 ], [ %cond315, %cond.end.314 ]
  %conv318 = trunc i32 %cond317 to i8
  %187 = load i32, i32* %alpha, align 4
  %idxprom319 = zext i32 %187 to i64
  %188 = load i8*, i8** %dest.addr, align 8
  %arrayidx320 = getelementptr inbounds i8, i8* %188, i64 %idxprom319
  store i8 %conv318, i8* %arrayidx320, align 1
  br label %if.end.321

if.end.321:                                       ; preds = %cond.end.316, %cond.end.290
  %189 = load i8*, i8** %m, align 8
  %incdec.ptr322 = getelementptr inbounds i8, i8* %189, i32 1
  store i8* %incdec.ptr322, i8** %m, align 8
  %190 = load i32, i32* %bytes.addr, align 4
  %191 = load i8*, i8** %src1.addr, align 8
  %idx.ext323 = zext i32 %190 to i64
  %add.ptr324 = getelementptr inbounds i8, i8* %191, i64 %idx.ext323
  store i8* %add.ptr324, i8** %src1.addr, align 8
  %192 = load i32, i32* %bytes.addr, align 4
  %193 = load i8*, i8** %src2.addr, align 8
  %idx.ext325 = zext i32 %192 to i64
  %add.ptr326 = getelementptr inbounds i8, i8* %193, i64 %idx.ext325
  store i8* %add.ptr326, i8** %src2.addr, align 8
  %194 = load i32, i32* %bytes.addr, align 4
  %195 = load i8*, i8** %dest.addr, align 8
  %idx.ext327 = zext i32 %194 to i64
  %add.ptr328 = getelementptr inbounds i8, i8* %195, i64 %idx.ext327
  store i8* %add.ptr328, i8** %dest.addr, align 8
  br label %while.cond.165

while.end.329:                                    ; preds = %while.cond.165
  br label %if.end.343

if.else.330:                                      ; preds = %while.body.162
  %196 = load i32, i32* %bytes.addr, align 4
  %conv331 = zext i32 %196 to i64
  %mul332 = mul i64 %conv331, 4
  %conv333 = trunc i64 %mul332 to i32
  store i32 %conv333, i32* %j, align 4
  %197 = load i32, i32* %j, align 4
  %198 = load i8*, i8** %src2.addr, align 8
  %idx.ext334 = sext i32 %197 to i64
  %add.ptr335 = getelementptr inbounds i8, i8* %198, i64 %idx.ext334
  store i8* %add.ptr335, i8** %src2.addr, align 8
  br label %while.cond.336

while.cond.336:                                   ; preds = %while.body.339, %if.else.330
  %199 = load i32, i32* %j, align 4
  %dec337 = add nsw i32 %199, -1
  store i32 %dec337, i32* %j, align 4
  %tobool338 = icmp ne i32 %199, 0
  br i1 %tobool338, label %while.body.339, label %while.end.342

while.body.339:                                   ; preds = %while.cond.336
  %200 = load i8*, i8** %src1.addr, align 8
  %incdec.ptr340 = getelementptr inbounds i8, i8* %200, i32 1
  store i8* %incdec.ptr340, i8** %src1.addr, align 8
  %201 = load i8, i8* %200, align 1
  %202 = load i8*, i8** %dest.addr, align 8
  %incdec.ptr341 = getelementptr inbounds i8, i8* %202, i32 1
  store i8* %incdec.ptr341, i8** %dest.addr, align 8
  store i8 %201, i8* %202, align 1
  br label %while.cond.336

while.end.342:                                    ; preds = %while.cond.336
  br label %if.end.343

if.end.343:                                       ; preds = %while.end.342, %while.end.329
  %203 = load i32*, i32** %mask_ip, align 8
  %incdec.ptr344 = getelementptr inbounds i32, i32* %203, i32 1
  store i32* %incdec.ptr344, i32** %mask_ip, align 8
  br label %while.cond.159

while.end.345:                                    ; preds = %while.cond.159
  %204 = load i32*, i32** %mask_ip, align 8
  %205 = bitcast i32* %204 to i8*
  store i8* %205, i8** %m, align 8
  br label %if.end.346

if.end.346:                                       ; preds = %while.end.345, %if.then.1
  br label %while.cond.347

while.cond.347:                                   ; preds = %if.end.503, %if.end.346
  %206 = load i32, i32* %length.addr, align 4
  %dec348 = add i32 %206, -1
  store i32 %dec348, i32* %length.addr, align 4
  %tobool349 = icmp ne i32 %206, 0
  br i1 %tobool349, label %while.body.350, label %while.end.511

while.body.350:                                   ; preds = %while.cond.347
  %207 = load i32, i32* %alpha, align 4
  %idxprom355 = zext i32 %207 to i64
  %208 = load i8*, i8** %src2.addr, align 8
  %arrayidx356 = getelementptr inbounds i8, i8* %208, i64 %idxprom355
  %209 = load i8, i8* %arrayidx356, align 1
  %conv357 = zext i8 %209 to i32
  %210 = load i8*, i8** %m, align 8
  %211 = load i8, i8* %210, align 1
  %conv358 = zext i8 %211 to i32
  %mul359 = mul nsw i32 %conv357, %conv358
  %add360 = add nsw i32 %mul359, 128
  %conv361 = sext i32 %add360 to i64
  store i64 %conv361, i64* %tmp352, align 8
  %212 = load i64, i64* %tmp352, align 8
  %shr362 = lshr i64 %212, 8
  %213 = load i64, i64* %tmp352, align 8
  %add363 = add i64 %shr362, %213
  %shr364 = lshr i64 %add363, 8
  %conv365 = trunc i64 %shr364 to i8
  store i8 %conv365, i8* %src2_alpha354, align 1
  %214 = load i32, i32* %alpha, align 4
  %idxprom368 = zext i32 %214 to i64
  %215 = load i8*, i8** %src1.addr, align 8
  %arrayidx369 = getelementptr inbounds i8, i8* %215, i64 %idxprom368
  %216 = load i8, i8* %arrayidx369, align 1
  %conv370 = zext i8 %216 to i64
  %217 = load i32, i32* %alpha, align 4
  %idxprom371 = zext i32 %217 to i64
  %218 = load i8*, i8** %src1.addr, align 8
  %arrayidx372 = getelementptr inbounds i8, i8* %218, i64 %idxprom371
  %219 = load i8, i8* %arrayidx372, align 1
  %conv373 = zext i8 %219 to i32
  %sub374 = sub nsw i32 255, %conv373
  %220 = load i8, i8* %src2_alpha354, align 1
  %conv375 = zext i8 %220 to i32
  %mul376 = mul nsw i32 %sub374, %conv375
  %add377 = add nsw i32 %mul376, 128
  %conv378 = sext i32 %add377 to i64
  store i64 %conv378, i64* %tmp352, align 8
  %221 = load i64, i64* %tmp352, align 8
  %shr379 = lshr i64 %221, 8
  %222 = load i64, i64* %tmp352, align 8
  %add380 = add i64 %shr379, %222
  %shr381 = lshr i64 %add380, 8
  %add382 = add i64 %conv370, %shr381
  %conv383 = trunc i64 %add382 to i8
  store i8 %conv383, i8* %new_alpha367, align 1
  %223 = load i8, i8* %src2_alpha354, align 1
  %conv384 = zext i8 %223 to i32
  %cmp385 = icmp ne i32 %conv384, 0
  br i1 %cmp385, label %land.lhs.true.387, label %if.end.460

land.lhs.true.387:                                ; preds = %while.body.350
  %224 = load i8, i8* %new_alpha367, align 1
  %conv388 = zext i8 %224 to i32
  %cmp389 = icmp ne i32 %conv388, 0
  br i1 %cmp389, label %if.then.391, label %if.end.460

if.then.391:                                      ; preds = %land.lhs.true.387
  %225 = load i32, i32* %alpha, align 4
  store i32 %225, i32* %b, align 4
  %226 = load i8, i8* %src2_alpha354, align 1
  %conv392 = zext i8 %226 to i32
  %227 = load i8, i8* %new_alpha367, align 1
  %conv393 = zext i8 %227 to i32
  %cmp394 = icmp eq i32 %conv392, %conv393
  br i1 %cmp394, label %if.then.396, label %if.else.418

if.then.396:                                      ; preds = %if.then.391
  br label %do.body.397

do.body.397:                                      ; preds = %do.cond.415, %if.then.396
  %228 = load i32, i32* %b, align 4
  %dec398 = add i32 %228, -1
  store i32 %dec398, i32* %b, align 4
  %229 = load i32, i32* %b, align 4
  %idxprom399 = zext i32 %229 to i64
  %230 = load i32*, i32** %affect.addr, align 8
  %arrayidx400 = getelementptr inbounds i32, i32* %230, i64 %idxprom399
  %231 = load i32, i32* %arrayidx400, align 4
  %tobool401 = icmp ne i32 %231, 0
  br i1 %tobool401, label %cond.true.402, label %cond.false.406

cond.true.402:                                    ; preds = %do.body.397
  %232 = load i32, i32* %b, align 4
  %idxprom403 = zext i32 %232 to i64
  %233 = load i8*, i8** %src2.addr, align 8
  %arrayidx404 = getelementptr inbounds i8, i8* %233, i64 %idxprom403
  %234 = load i8, i8* %arrayidx404, align 1
  %conv405 = zext i8 %234 to i32
  br label %cond.end.410

cond.false.406:                                   ; preds = %do.body.397
  %235 = load i32, i32* %b, align 4
  %idxprom407 = zext i32 %235 to i64
  %236 = load i8*, i8** %src1.addr, align 8
  %arrayidx408 = getelementptr inbounds i8, i8* %236, i64 %idxprom407
  %237 = load i8, i8* %arrayidx408, align 1
  %conv409 = zext i8 %237 to i32
  br label %cond.end.410

cond.end.410:                                     ; preds = %cond.false.406, %cond.true.402
  %cond411 = phi i32 [ %conv405, %cond.true.402 ], [ %conv409, %cond.false.406 ]
  %conv412 = trunc i32 %cond411 to i8
  %238 = load i32, i32* %b, align 4
  %idxprom413 = zext i32 %238 to i64
  %239 = load i8*, i8** %dest.addr, align 8
  %arrayidx414 = getelementptr inbounds i8, i8* %239, i64 %idxprom413
  store i8 %conv412, i8* %arrayidx414, align 1
  br label %do.cond.415

do.cond.415:                                      ; preds = %cond.end.410
  %240 = load i32, i32* %b, align 4
  %tobool416 = icmp ne i32 %240, 0
  br i1 %tobool416, label %do.body.397, label %do.end.417

do.end.417:                                       ; preds = %do.cond.415
  br label %if.end.459

if.else.418:                                      ; preds = %if.then.391
  %241 = load i8, i8* %src2_alpha354, align 1
  %conv419 = uitofp i8 %241 to float
  %242 = load i8, i8* %new_alpha367, align 1
  %conv420 = zext i8 %242 to i32
  %conv421 = sitofp i32 %conv420 to float
  %div422 = fdiv float %conv419, %conv421
  store float %div422, float* %ratio, align 4
  %243 = load float, float* %ratio, align 4
  %conv423 = fpext float %243 to double
  %sub424 = fsub double 1.000000e+00, %conv423
  %conv425 = fptrunc double %sub424 to float
  store float %conv425, float* %compl_ratio, align 4
  br label %do.body.426

do.body.426:                                      ; preds = %do.cond.456, %if.else.418
  %244 = load i32, i32* %b, align 4
  %dec427 = add i32 %244, -1
  store i32 %dec427, i32* %b, align 4
  %245 = load i32, i32* %b, align 4
  %idxprom428 = zext i32 %245 to i64
  %246 = load i32*, i32** %affect.addr, align 8
  %arrayidx429 = getelementptr inbounds i32, i32* %246, i64 %idxprom428
  %247 = load i32, i32* %arrayidx429, align 4
  %tobool430 = icmp ne i32 %247, 0
  br i1 %tobool430, label %cond.true.431, label %cond.false.447

cond.true.431:                                    ; preds = %do.body.426
  %248 = load i32, i32* %b, align 4
  %idxprom432 = zext i32 %248 to i64
  %249 = load i8*, i8** %src2.addr, align 8
  %arrayidx433 = getelementptr inbounds i8, i8* %249, i64 %idxprom432
  %250 = load i8, i8* %arrayidx433, align 1
  %conv434 = zext i8 %250 to i32
  %conv435 = sitofp i32 %conv434 to float
  %251 = load float, float* %ratio, align 4
  %mul436 = fmul float %conv435, %251
  %252 = load i32, i32* %b, align 4
  %idxprom437 = zext i32 %252 to i64
  %253 = load i8*, i8** %src1.addr, align 8
  %arrayidx438 = getelementptr inbounds i8, i8* %253, i64 %idxprom437
  %254 = load i8, i8* %arrayidx438, align 1
  %conv439 = zext i8 %254 to i32
  %conv440 = sitofp i32 %conv439 to float
  %255 = load float, float* %compl_ratio, align 4
  %mul441 = fmul float %conv440, %255
  %add442 = fadd float %mul436, %mul441
  %conv443 = fpext float %add442 to double
  %add444 = fadd double %conv443, 1.000000e-04
  %conv445 = fptoui double %add444 to i8
  %conv446 = zext i8 %conv445 to i32
  br label %cond.end.451

cond.false.447:                                   ; preds = %do.body.426
  %256 = load i32, i32* %b, align 4
  %idxprom448 = zext i32 %256 to i64
  %257 = load i8*, i8** %src1.addr, align 8
  %arrayidx449 = getelementptr inbounds i8, i8* %257, i64 %idxprom448
  %258 = load i8, i8* %arrayidx449, align 1
  %conv450 = zext i8 %258 to i32
  br label %cond.end.451

cond.end.451:                                     ; preds = %cond.false.447, %cond.true.431
  %cond452 = phi i32 [ %conv446, %cond.true.431 ], [ %conv450, %cond.false.447 ]
  %conv453 = trunc i32 %cond452 to i8
  %259 = load i32, i32* %b, align 4
  %idxprom454 = zext i32 %259 to i64
  %260 = load i8*, i8** %dest.addr, align 8
  %arrayidx455 = getelementptr inbounds i8, i8* %260, i64 %idxprom454
  store i8 %conv453, i8* %arrayidx455, align 1
  br label %do.cond.456

do.cond.456:                                      ; preds = %cond.end.451
  %261 = load i32, i32* %b, align 4
  %tobool457 = icmp ne i32 %261, 0
  br i1 %tobool457, label %do.body.426, label %do.end.458

do.end.458:                                       ; preds = %do.cond.456
  br label %if.end.459

if.end.459:                                       ; preds = %do.end.458, %do.end.417
  br label %if.end.460

if.end.460:                                       ; preds = %if.end.459, %land.lhs.true.387, %while.body.350
  %262 = load i32, i32* %mode_affect.addr, align 4
  %tobool461 = icmp ne i32 %262, 0
  br i1 %tobool461, label %if.then.462, label %if.else.477

if.then.462:                                      ; preds = %if.end.460
  %263 = load i32, i32* %alpha, align 4
  %idxprom463 = zext i32 %263 to i64
  %264 = load i32*, i32** %affect.addr, align 8
  %arrayidx464 = getelementptr inbounds i32, i32* %264, i64 %idxprom463
  %265 = load i32, i32* %arrayidx464, align 4
  %tobool465 = icmp ne i32 %265, 0
  br i1 %tobool465, label %cond.true.466, label %cond.false.468

cond.true.466:                                    ; preds = %if.then.462
  %266 = load i8, i8* %new_alpha367, align 1
  %conv467 = zext i8 %266 to i32
  br label %cond.end.472

cond.false.468:                                   ; preds = %if.then.462
  %267 = load i32, i32* %alpha, align 4
  %idxprom469 = zext i32 %267 to i64
  %268 = load i8*, i8** %src1.addr, align 8
  %arrayidx470 = getelementptr inbounds i8, i8* %268, i64 %idxprom469
  %269 = load i8, i8* %arrayidx470, align 1
  %conv471 = zext i8 %269 to i32
  br label %cond.end.472

cond.end.472:                                     ; preds = %cond.false.468, %cond.true.466
  %cond473 = phi i32 [ %conv467, %cond.true.466 ], [ %conv471, %cond.false.468 ]
  %conv474 = trunc i32 %cond473 to i8
  %270 = load i32, i32* %alpha, align 4
  %idxprom475 = zext i32 %270 to i64
  %271 = load i8*, i8** %dest.addr, align 8
  %arrayidx476 = getelementptr inbounds i8, i8* %271, i64 %idxprom475
  store i8 %conv474, i8* %arrayidx476, align 1
  br label %if.end.503

if.else.477:                                      ; preds = %if.end.460
  %272 = load i32, i32* %alpha, align 4
  %idxprom478 = zext i32 %272 to i64
  %273 = load i8*, i8** %src1.addr, align 8
  %arrayidx479 = getelementptr inbounds i8, i8* %273, i64 %idxprom478
  %274 = load i8, i8* %arrayidx479, align 1
  %conv480 = zext i8 %274 to i32
  %tobool481 = icmp ne i32 %conv480, 0
  br i1 %tobool481, label %cond.true.482, label %cond.false.486

cond.true.482:                                    ; preds = %if.else.477
  %275 = load i32, i32* %alpha, align 4
  %idxprom483 = zext i32 %275 to i64
  %276 = load i8*, i8** %src1.addr, align 8
  %arrayidx484 = getelementptr inbounds i8, i8* %276, i64 %idxprom483
  %277 = load i8, i8* %arrayidx484, align 1
  %conv485 = zext i8 %277 to i32
  br label %cond.end.498

cond.false.486:                                   ; preds = %if.else.477
  %278 = load i32, i32* %alpha, align 4
  %idxprom487 = zext i32 %278 to i64
  %279 = load i32*, i32** %affect.addr, align 8
  %arrayidx488 = getelementptr inbounds i32, i32* %279, i64 %idxprom487
  %280 = load i32, i32* %arrayidx488, align 4
  %tobool489 = icmp ne i32 %280, 0
  br i1 %tobool489, label %cond.true.490, label %cond.false.492

cond.true.490:                                    ; preds = %cond.false.486
  %281 = load i8, i8* %new_alpha367, align 1
  %conv491 = zext i8 %281 to i32
  br label %cond.end.496

cond.false.492:                                   ; preds = %cond.false.486
  %282 = load i32, i32* %alpha, align 4
  %idxprom493 = zext i32 %282 to i64
  %283 = load i8*, i8** %src1.addr, align 8
  %arrayidx494 = getelementptr inbounds i8, i8* %283, i64 %idxprom493
  %284 = load i8, i8* %arrayidx494, align 1
  %conv495 = zext i8 %284 to i32
  br label %cond.end.496

cond.end.496:                                     ; preds = %cond.false.492, %cond.true.490
  %cond497 = phi i32 [ %conv491, %cond.true.490 ], [ %conv495, %cond.false.492 ]
  br label %cond.end.498

cond.end.498:                                     ; preds = %cond.end.496, %cond.true.482
  %cond499 = phi i32 [ %conv485, %cond.true.482 ], [ %cond497, %cond.end.496 ]
  %conv500 = trunc i32 %cond499 to i8
  %285 = load i32, i32* %alpha, align 4
  %idxprom501 = zext i32 %285 to i64
  %286 = load i8*, i8** %dest.addr, align 8
  %arrayidx502 = getelementptr inbounds i8, i8* %286, i64 %idxprom501
  store i8 %conv500, i8* %arrayidx502, align 1
  br label %if.end.503

if.end.503:                                       ; preds = %cond.end.498, %cond.end.472
  %287 = load i8*, i8** %m, align 8
  %incdec.ptr504 = getelementptr inbounds i8, i8* %287, i32 1
  store i8* %incdec.ptr504, i8** %m, align 8
  %288 = load i32, i32* %bytes.addr, align 4
  %289 = load i8*, i8** %src1.addr, align 8
  %idx.ext505 = zext i32 %288 to i64
  %add.ptr506 = getelementptr inbounds i8, i8* %289, i64 %idx.ext505
  store i8* %add.ptr506, i8** %src1.addr, align 8
  %290 = load i32, i32* %bytes.addr, align 4
  %291 = load i8*, i8** %src2.addr, align 8
  %idx.ext507 = zext i32 %290 to i64
  %add.ptr508 = getelementptr inbounds i8, i8* %291, i64 %idx.ext507
  store i8* %add.ptr508, i8** %src2.addr, align 8
  %292 = load i32, i32* %bytes.addr, align 4
  %293 = load i8*, i8** %dest.addr, align 8
  %idx.ext509 = zext i32 %292 to i64
  %add.ptr510 = getelementptr inbounds i8, i8* %293, i64 %idx.ext509
  store i8* %add.ptr510, i8** %dest.addr, align 8
  br label %while.cond.347

while.end.511:                                    ; preds = %while.cond.347
  br label %if.end.1062

if.else.512:                                      ; preds = %if.then
  %294 = load i32, i32* %length.addr, align 4
  %conv519 = zext i32 %294 to i64
  %cmp520 = icmp uge i64 %conv519, 4
  br i1 %cmp520, label %if.then.522, label %if.end.895

if.then.522:                                      ; preds = %if.else.512
  %295 = load i8*, i8** %m, align 8
  %296 = ptrtoint i8* %295 to i64
  %conv523 = trunc i64 %296 to i32
  %conv524 = sext i32 %conv523 to i64
  %and525 = and i64 %conv524, 3
  %conv526 = trunc i64 %and525 to i32
  store i32 %conv526, i32* %i516, align 4
  %297 = load i32, i32* %i516, align 4
  %cmp527 = icmp ne i32 %297, 0
  br i1 %cmp527, label %if.then.529, label %if.end.700

if.then.529:                                      ; preds = %if.then.522
  %298 = load i32, i32* %i516, align 4
  %conv530 = sext i32 %298 to i64
  %sub531 = sub i64 4, %conv530
  %conv532 = trunc i64 %sub531 to i32
  store i32 %conv532, i32* %i516, align 4
  %299 = load i32, i32* %i516, align 4
  %300 = load i32, i32* %length.addr, align 4
  %sub533 = sub i32 %300, %299
  store i32 %sub533, i32* %length.addr, align 4
  br label %while.cond.534

while.cond.534:                                   ; preds = %if.end.691, %if.then.529
  %301 = load i32, i32* %i516, align 4
  %dec535 = add nsw i32 %301, -1
  store i32 %dec535, i32* %i516, align 4
  %tobool536 = icmp ne i32 %301, 0
  br i1 %tobool536, label %while.body.537, label %while.end.699

while.body.537:                                   ; preds = %while.cond.534
  %302 = load i32, i32* %alpha, align 4
  %idxprom542 = zext i32 %302 to i64
  %303 = load i8*, i8** %src2.addr, align 8
  %arrayidx543 = getelementptr inbounds i8, i8* %303, i64 %idxprom542
  %304 = load i8, i8* %arrayidx543, align 1
  %conv544 = zext i8 %304 to i32
  %305 = load i8*, i8** %m, align 8
  %306 = load i8, i8* %305, align 1
  %conv545 = zext i8 %306 to i32
  %mul546 = mul nsw i32 %conv544, %conv545
  %307 = load i32, i32* %opacity.addr, align 4
  %mul547 = mul i32 %mul546, %307
  %add548 = add i32 %mul547, 32603
  %conv549 = zext i32 %add548 to i64
  store i64 %conv549, i64* %tmp539, align 8
  %308 = load i64, i64* %tmp539, align 8
  %shr550 = lshr i64 %308, 7
  %309 = load i64, i64* %tmp539, align 8
  %add551 = add i64 %shr550, %309
  %shr552 = lshr i64 %add551, 16
  %conv553 = trunc i64 %shr552 to i8
  store i8 %conv553, i8* %src2_alpha541, align 1
  %310 = load i32, i32* %alpha, align 4
  %idxprom556 = zext i32 %310 to i64
  %311 = load i8*, i8** %src1.addr, align 8
  %arrayidx557 = getelementptr inbounds i8, i8* %311, i64 %idxprom556
  %312 = load i8, i8* %arrayidx557, align 1
  %conv558 = zext i8 %312 to i64
  %313 = load i32, i32* %alpha, align 4
  %idxprom559 = zext i32 %313 to i64
  %314 = load i8*, i8** %src1.addr, align 8
  %arrayidx560 = getelementptr inbounds i8, i8* %314, i64 %idxprom559
  %315 = load i8, i8* %arrayidx560, align 1
  %conv561 = zext i8 %315 to i32
  %sub562 = sub nsw i32 255, %conv561
  %316 = load i8, i8* %src2_alpha541, align 1
  %conv563 = zext i8 %316 to i32
  %mul564 = mul nsw i32 %sub562, %conv563
  %add565 = add nsw i32 %mul564, 128
  %conv566 = sext i32 %add565 to i64
  store i64 %conv566, i64* %tmp539, align 8
  %317 = load i64, i64* %tmp539, align 8
  %shr567 = lshr i64 %317, 8
  %318 = load i64, i64* %tmp539, align 8
  %add568 = add i64 %shr567, %318
  %shr569 = lshr i64 %add568, 8
  %add570 = add i64 %conv558, %shr569
  %conv571 = trunc i64 %add570 to i8
  store i8 %conv571, i8* %new_alpha555, align 1
  %319 = load i8, i8* %src2_alpha541, align 1
  %conv572 = zext i8 %319 to i32
  %cmp573 = icmp ne i32 %conv572, 0
  br i1 %cmp573, label %land.lhs.true.575, label %if.end.648

land.lhs.true.575:                                ; preds = %while.body.537
  %320 = load i8, i8* %new_alpha555, align 1
  %conv576 = zext i8 %320 to i32
  %cmp577 = icmp ne i32 %conv576, 0
  br i1 %cmp577, label %if.then.579, label %if.end.648

if.then.579:                                      ; preds = %land.lhs.true.575
  %321 = load i32, i32* %alpha, align 4
  store i32 %321, i32* %b, align 4
  %322 = load i8, i8* %src2_alpha541, align 1
  %conv580 = zext i8 %322 to i32
  %323 = load i8, i8* %new_alpha555, align 1
  %conv581 = zext i8 %323 to i32
  %cmp582 = icmp eq i32 %conv580, %conv581
  br i1 %cmp582, label %if.then.584, label %if.else.606

if.then.584:                                      ; preds = %if.then.579
  br label %do.body.585

do.body.585:                                      ; preds = %do.cond.603, %if.then.584
  %324 = load i32, i32* %b, align 4
  %dec586 = add i32 %324, -1
  store i32 %dec586, i32* %b, align 4
  %325 = load i32, i32* %b, align 4
  %idxprom587 = zext i32 %325 to i64
  %326 = load i32*, i32** %affect.addr, align 8
  %arrayidx588 = getelementptr inbounds i32, i32* %326, i64 %idxprom587
  %327 = load i32, i32* %arrayidx588, align 4
  %tobool589 = icmp ne i32 %327, 0
  br i1 %tobool589, label %cond.true.590, label %cond.false.594

cond.true.590:                                    ; preds = %do.body.585
  %328 = load i32, i32* %b, align 4
  %idxprom591 = zext i32 %328 to i64
  %329 = load i8*, i8** %src2.addr, align 8
  %arrayidx592 = getelementptr inbounds i8, i8* %329, i64 %idxprom591
  %330 = load i8, i8* %arrayidx592, align 1
  %conv593 = zext i8 %330 to i32
  br label %cond.end.598

cond.false.594:                                   ; preds = %do.body.585
  %331 = load i32, i32* %b, align 4
  %idxprom595 = zext i32 %331 to i64
  %332 = load i8*, i8** %src1.addr, align 8
  %arrayidx596 = getelementptr inbounds i8, i8* %332, i64 %idxprom595
  %333 = load i8, i8* %arrayidx596, align 1
  %conv597 = zext i8 %333 to i32
  br label %cond.end.598

cond.end.598:                                     ; preds = %cond.false.594, %cond.true.590
  %cond599 = phi i32 [ %conv593, %cond.true.590 ], [ %conv597, %cond.false.594 ]
  %conv600 = trunc i32 %cond599 to i8
  %334 = load i32, i32* %b, align 4
  %idxprom601 = zext i32 %334 to i64
  %335 = load i8*, i8** %dest.addr, align 8
  %arrayidx602 = getelementptr inbounds i8, i8* %335, i64 %idxprom601
  store i8 %conv600, i8* %arrayidx602, align 1
  br label %do.cond.603

do.cond.603:                                      ; preds = %cond.end.598
  %336 = load i32, i32* %b, align 4
  %tobool604 = icmp ne i32 %336, 0
  br i1 %tobool604, label %do.body.585, label %do.end.605

do.end.605:                                       ; preds = %do.cond.603
  br label %if.end.647

if.else.606:                                      ; preds = %if.then.579
  %337 = load i8, i8* %src2_alpha541, align 1
  %conv607 = uitofp i8 %337 to float
  %338 = load i8, i8* %new_alpha555, align 1
  %conv608 = zext i8 %338 to i32
  %conv609 = sitofp i32 %conv608 to float
  %div610 = fdiv float %conv607, %conv609
  store float %div610, float* %ratio, align 4
  %339 = load float, float* %ratio, align 4
  %conv611 = fpext float %339 to double
  %sub612 = fsub double 1.000000e+00, %conv611
  %conv613 = fptrunc double %sub612 to float
  store float %conv613, float* %compl_ratio, align 4
  br label %do.body.614

do.body.614:                                      ; preds = %do.cond.644, %if.else.606
  %340 = load i32, i32* %b, align 4
  %dec615 = add i32 %340, -1
  store i32 %dec615, i32* %b, align 4
  %341 = load i32, i32* %b, align 4
  %idxprom616 = zext i32 %341 to i64
  %342 = load i32*, i32** %affect.addr, align 8
  %arrayidx617 = getelementptr inbounds i32, i32* %342, i64 %idxprom616
  %343 = load i32, i32* %arrayidx617, align 4
  %tobool618 = icmp ne i32 %343, 0
  br i1 %tobool618, label %cond.true.619, label %cond.false.635

cond.true.619:                                    ; preds = %do.body.614
  %344 = load i32, i32* %b, align 4
  %idxprom620 = zext i32 %344 to i64
  %345 = load i8*, i8** %src2.addr, align 8
  %arrayidx621 = getelementptr inbounds i8, i8* %345, i64 %idxprom620
  %346 = load i8, i8* %arrayidx621, align 1
  %conv622 = zext i8 %346 to i32
  %conv623 = sitofp i32 %conv622 to float
  %347 = load float, float* %ratio, align 4
  %mul624 = fmul float %conv623, %347
  %348 = load i32, i32* %b, align 4
  %idxprom625 = zext i32 %348 to i64
  %349 = load i8*, i8** %src1.addr, align 8
  %arrayidx626 = getelementptr inbounds i8, i8* %349, i64 %idxprom625
  %350 = load i8, i8* %arrayidx626, align 1
  %conv627 = zext i8 %350 to i32
  %conv628 = sitofp i32 %conv627 to float
  %351 = load float, float* %compl_ratio, align 4
  %mul629 = fmul float %conv628, %351
  %add630 = fadd float %mul624, %mul629
  %conv631 = fpext float %add630 to double
  %add632 = fadd double %conv631, 1.000000e-04
  %conv633 = fptoui double %add632 to i8
  %conv634 = zext i8 %conv633 to i32
  br label %cond.end.639

cond.false.635:                                   ; preds = %do.body.614
  %352 = load i32, i32* %b, align 4
  %idxprom636 = zext i32 %352 to i64
  %353 = load i8*, i8** %src1.addr, align 8
  %arrayidx637 = getelementptr inbounds i8, i8* %353, i64 %idxprom636
  %354 = load i8, i8* %arrayidx637, align 1
  %conv638 = zext i8 %354 to i32
  br label %cond.end.639

cond.end.639:                                     ; preds = %cond.false.635, %cond.true.619
  %cond640 = phi i32 [ %conv634, %cond.true.619 ], [ %conv638, %cond.false.635 ]
  %conv641 = trunc i32 %cond640 to i8
  %355 = load i32, i32* %b, align 4
  %idxprom642 = zext i32 %355 to i64
  %356 = load i8*, i8** %dest.addr, align 8
  %arrayidx643 = getelementptr inbounds i8, i8* %356, i64 %idxprom642
  store i8 %conv641, i8* %arrayidx643, align 1
  br label %do.cond.644

do.cond.644:                                      ; preds = %cond.end.639
  %357 = load i32, i32* %b, align 4
  %tobool645 = icmp ne i32 %357, 0
  br i1 %tobool645, label %do.body.614, label %do.end.646

do.end.646:                                       ; preds = %do.cond.644
  br label %if.end.647

if.end.647:                                       ; preds = %do.end.646, %do.end.605
  br label %if.end.648

if.end.648:                                       ; preds = %if.end.647, %land.lhs.true.575, %while.body.537
  %358 = load i32, i32* %mode_affect.addr, align 4
  %tobool649 = icmp ne i32 %358, 0
  br i1 %tobool649, label %if.then.650, label %if.else.665

if.then.650:                                      ; preds = %if.end.648
  %359 = load i32, i32* %alpha, align 4
  %idxprom651 = zext i32 %359 to i64
  %360 = load i32*, i32** %affect.addr, align 8
  %arrayidx652 = getelementptr inbounds i32, i32* %360, i64 %idxprom651
  %361 = load i32, i32* %arrayidx652, align 4
  %tobool653 = icmp ne i32 %361, 0
  br i1 %tobool653, label %cond.true.654, label %cond.false.656

cond.true.654:                                    ; preds = %if.then.650
  %362 = load i8, i8* %new_alpha555, align 1
  %conv655 = zext i8 %362 to i32
  br label %cond.end.660

cond.false.656:                                   ; preds = %if.then.650
  %363 = load i32, i32* %alpha, align 4
  %idxprom657 = zext i32 %363 to i64
  %364 = load i8*, i8** %src1.addr, align 8
  %arrayidx658 = getelementptr inbounds i8, i8* %364, i64 %idxprom657
  %365 = load i8, i8* %arrayidx658, align 1
  %conv659 = zext i8 %365 to i32
  br label %cond.end.660

cond.end.660:                                     ; preds = %cond.false.656, %cond.true.654
  %cond661 = phi i32 [ %conv655, %cond.true.654 ], [ %conv659, %cond.false.656 ]
  %conv662 = trunc i32 %cond661 to i8
  %366 = load i32, i32* %alpha, align 4
  %idxprom663 = zext i32 %366 to i64
  %367 = load i8*, i8** %dest.addr, align 8
  %arrayidx664 = getelementptr inbounds i8, i8* %367, i64 %idxprom663
  store i8 %conv662, i8* %arrayidx664, align 1
  br label %if.end.691

if.else.665:                                      ; preds = %if.end.648
  %368 = load i32, i32* %alpha, align 4
  %idxprom666 = zext i32 %368 to i64
  %369 = load i8*, i8** %src1.addr, align 8
  %arrayidx667 = getelementptr inbounds i8, i8* %369, i64 %idxprom666
  %370 = load i8, i8* %arrayidx667, align 1
  %conv668 = zext i8 %370 to i32
  %tobool669 = icmp ne i32 %conv668, 0
  br i1 %tobool669, label %cond.true.670, label %cond.false.674

cond.true.670:                                    ; preds = %if.else.665
  %371 = load i32, i32* %alpha, align 4
  %idxprom671 = zext i32 %371 to i64
  %372 = load i8*, i8** %src1.addr, align 8
  %arrayidx672 = getelementptr inbounds i8, i8* %372, i64 %idxprom671
  %373 = load i8, i8* %arrayidx672, align 1
  %conv673 = zext i8 %373 to i32
  br label %cond.end.686

cond.false.674:                                   ; preds = %if.else.665
  %374 = load i32, i32* %alpha, align 4
  %idxprom675 = zext i32 %374 to i64
  %375 = load i32*, i32** %affect.addr, align 8
  %arrayidx676 = getelementptr inbounds i32, i32* %375, i64 %idxprom675
  %376 = load i32, i32* %arrayidx676, align 4
  %tobool677 = icmp ne i32 %376, 0
  br i1 %tobool677, label %cond.true.678, label %cond.false.680

cond.true.678:                                    ; preds = %cond.false.674
  %377 = load i8, i8* %new_alpha555, align 1
  %conv679 = zext i8 %377 to i32
  br label %cond.end.684

cond.false.680:                                   ; preds = %cond.false.674
  %378 = load i32, i32* %alpha, align 4
  %idxprom681 = zext i32 %378 to i64
  %379 = load i8*, i8** %src1.addr, align 8
  %arrayidx682 = getelementptr inbounds i8, i8* %379, i64 %idxprom681
  %380 = load i8, i8* %arrayidx682, align 1
  %conv683 = zext i8 %380 to i32
  br label %cond.end.684

cond.end.684:                                     ; preds = %cond.false.680, %cond.true.678
  %cond685 = phi i32 [ %conv679, %cond.true.678 ], [ %conv683, %cond.false.680 ]
  br label %cond.end.686

cond.end.686:                                     ; preds = %cond.end.684, %cond.true.670
  %cond687 = phi i32 [ %conv673, %cond.true.670 ], [ %cond685, %cond.end.684 ]
  %conv688 = trunc i32 %cond687 to i8
  %381 = load i32, i32* %alpha, align 4
  %idxprom689 = zext i32 %381 to i64
  %382 = load i8*, i8** %dest.addr, align 8
  %arrayidx690 = getelementptr inbounds i8, i8* %382, i64 %idxprom689
  store i8 %conv688, i8* %arrayidx690, align 1
  br label %if.end.691

if.end.691:                                       ; preds = %cond.end.686, %cond.end.660
  %383 = load i8*, i8** %m, align 8
  %incdec.ptr692 = getelementptr inbounds i8, i8* %383, i32 1
  store i8* %incdec.ptr692, i8** %m, align 8
  %384 = load i32, i32* %bytes.addr, align 4
  %385 = load i8*, i8** %src1.addr, align 8
  %idx.ext693 = zext i32 %384 to i64
  %add.ptr694 = getelementptr inbounds i8, i8* %385, i64 %idx.ext693
  store i8* %add.ptr694, i8** %src1.addr, align 8
  %386 = load i32, i32* %bytes.addr, align 4
  %387 = load i8*, i8** %src2.addr, align 8
  %idx.ext695 = zext i32 %386 to i64
  %add.ptr696 = getelementptr inbounds i8, i8* %387, i64 %idx.ext695
  store i8* %add.ptr696, i8** %src2.addr, align 8
  %388 = load i32, i32* %bytes.addr, align 4
  %389 = load i8*, i8** %dest.addr, align 8
  %idx.ext697 = zext i32 %388 to i64
  %add.ptr698 = getelementptr inbounds i8, i8* %389, i64 %idx.ext697
  store i8* %add.ptr698, i8** %dest.addr, align 8
  br label %while.cond.534

while.end.699:                                    ; preds = %while.cond.534
  br label %if.end.700

if.end.700:                                       ; preds = %while.end.699, %if.then.522
  %390 = load i8*, i8** %m, align 8
  %391 = bitcast i8* %390 to i32*
  store i32* %391, i32** %mask_ip514, align 8
  %392 = load i32, i32* %length.addr, align 4
  %conv701 = zext i32 %392 to i64
  %div702 = udiv i64 %conv701, 4
  %conv703 = trunc i64 %div702 to i32
  store i32 %conv703, i32* %i516, align 4
  %393 = load i32, i32* %length.addr, align 4
  %conv704 = zext i32 %393 to i64
  %rem705 = urem i64 %conv704, 4
  %conv706 = trunc i64 %rem705 to i32
  store i32 %conv706, i32* %length.addr, align 4
  br label %while.cond.707

while.cond.707:                                   ; preds = %if.end.892, %if.end.700
  %394 = load i32, i32* %i516, align 4
  %dec708 = add nsw i32 %394, -1
  store i32 %dec708, i32* %i516, align 4
  %tobool709 = icmp ne i32 %394, 0
  br i1 %tobool709, label %while.body.710, label %while.end.894

while.body.710:                                   ; preds = %while.cond.707
  %395 = load i32*, i32** %mask_ip514, align 8
  %396 = load i32, i32* %395, align 4
  %tobool711 = icmp ne i32 %396, 0
  br i1 %tobool711, label %if.then.712, label %if.else.879

if.then.712:                                      ; preds = %while.body.710
  %397 = load i32*, i32** %mask_ip514, align 8
  %398 = bitcast i32* %397 to i8*
  store i8* %398, i8** %m, align 8
  store i32 4, i32* %j518, align 4
  br label %while.cond.713

while.cond.713:                                   ; preds = %if.end.870, %if.then.712
  %399 = load i32, i32* %j518, align 4
  %dec714 = add nsw i32 %399, -1
  store i32 %dec714, i32* %j518, align 4
  %tobool715 = icmp ne i32 %399, 0
  br i1 %tobool715, label %while.body.716, label %while.end.878

while.body.716:                                   ; preds = %while.cond.713
  %400 = load i32, i32* %alpha, align 4
  %idxprom721 = zext i32 %400 to i64
  %401 = load i8*, i8** %src2.addr, align 8
  %arrayidx722 = getelementptr inbounds i8, i8* %401, i64 %idxprom721
  %402 = load i8, i8* %arrayidx722, align 1
  %conv723 = zext i8 %402 to i32
  %403 = load i8*, i8** %m, align 8
  %404 = load i8, i8* %403, align 1
  %conv724 = zext i8 %404 to i32
  %mul725 = mul nsw i32 %conv723, %conv724
  %405 = load i32, i32* %opacity.addr, align 4
  %mul726 = mul i32 %mul725, %405
  %add727 = add i32 %mul726, 32603
  %conv728 = zext i32 %add727 to i64
  store i64 %conv728, i64* %tmp718, align 8
  %406 = load i64, i64* %tmp718, align 8
  %shr729 = lshr i64 %406, 7
  %407 = load i64, i64* %tmp718, align 8
  %add730 = add i64 %shr729, %407
  %shr731 = lshr i64 %add730, 16
  %conv732 = trunc i64 %shr731 to i8
  store i8 %conv732, i8* %src2_alpha720, align 1
  %408 = load i32, i32* %alpha, align 4
  %idxprom735 = zext i32 %408 to i64
  %409 = load i8*, i8** %src1.addr, align 8
  %arrayidx736 = getelementptr inbounds i8, i8* %409, i64 %idxprom735
  %410 = load i8, i8* %arrayidx736, align 1
  %conv737 = zext i8 %410 to i64
  %411 = load i32, i32* %alpha, align 4
  %idxprom738 = zext i32 %411 to i64
  %412 = load i8*, i8** %src1.addr, align 8
  %arrayidx739 = getelementptr inbounds i8, i8* %412, i64 %idxprom738
  %413 = load i8, i8* %arrayidx739, align 1
  %conv740 = zext i8 %413 to i32
  %sub741 = sub nsw i32 255, %conv740
  %414 = load i8, i8* %src2_alpha720, align 1
  %conv742 = zext i8 %414 to i32
  %mul743 = mul nsw i32 %sub741, %conv742
  %add744 = add nsw i32 %mul743, 128
  %conv745 = sext i32 %add744 to i64
  store i64 %conv745, i64* %tmp718, align 8
  %415 = load i64, i64* %tmp718, align 8
  %shr746 = lshr i64 %415, 8
  %416 = load i64, i64* %tmp718, align 8
  %add747 = add i64 %shr746, %416
  %shr748 = lshr i64 %add747, 8
  %add749 = add i64 %conv737, %shr748
  %conv750 = trunc i64 %add749 to i8
  store i8 %conv750, i8* %new_alpha734, align 1
  %417 = load i8, i8* %src2_alpha720, align 1
  %conv751 = zext i8 %417 to i32
  %cmp752 = icmp ne i32 %conv751, 0
  br i1 %cmp752, label %land.lhs.true.754, label %if.end.827

land.lhs.true.754:                                ; preds = %while.body.716
  %418 = load i8, i8* %new_alpha734, align 1
  %conv755 = zext i8 %418 to i32
  %cmp756 = icmp ne i32 %conv755, 0
  br i1 %cmp756, label %if.then.758, label %if.end.827

if.then.758:                                      ; preds = %land.lhs.true.754
  %419 = load i32, i32* %alpha, align 4
  store i32 %419, i32* %b, align 4
  %420 = load i8, i8* %src2_alpha720, align 1
  %conv759 = zext i8 %420 to i32
  %421 = load i8, i8* %new_alpha734, align 1
  %conv760 = zext i8 %421 to i32
  %cmp761 = icmp eq i32 %conv759, %conv760
  br i1 %cmp761, label %if.then.763, label %if.else.785

if.then.763:                                      ; preds = %if.then.758
  br label %do.body.764

do.body.764:                                      ; preds = %do.cond.782, %if.then.763
  %422 = load i32, i32* %b, align 4
  %dec765 = add i32 %422, -1
  store i32 %dec765, i32* %b, align 4
  %423 = load i32, i32* %b, align 4
  %idxprom766 = zext i32 %423 to i64
  %424 = load i32*, i32** %affect.addr, align 8
  %arrayidx767 = getelementptr inbounds i32, i32* %424, i64 %idxprom766
  %425 = load i32, i32* %arrayidx767, align 4
  %tobool768 = icmp ne i32 %425, 0
  br i1 %tobool768, label %cond.true.769, label %cond.false.773

cond.true.769:                                    ; preds = %do.body.764
  %426 = load i32, i32* %b, align 4
  %idxprom770 = zext i32 %426 to i64
  %427 = load i8*, i8** %src2.addr, align 8
  %arrayidx771 = getelementptr inbounds i8, i8* %427, i64 %idxprom770
  %428 = load i8, i8* %arrayidx771, align 1
  %conv772 = zext i8 %428 to i32
  br label %cond.end.777

cond.false.773:                                   ; preds = %do.body.764
  %429 = load i32, i32* %b, align 4
  %idxprom774 = zext i32 %429 to i64
  %430 = load i8*, i8** %src1.addr, align 8
  %arrayidx775 = getelementptr inbounds i8, i8* %430, i64 %idxprom774
  %431 = load i8, i8* %arrayidx775, align 1
  %conv776 = zext i8 %431 to i32
  br label %cond.end.777

cond.end.777:                                     ; preds = %cond.false.773, %cond.true.769
  %cond778 = phi i32 [ %conv772, %cond.true.769 ], [ %conv776, %cond.false.773 ]
  %conv779 = trunc i32 %cond778 to i8
  %432 = load i32, i32* %b, align 4
  %idxprom780 = zext i32 %432 to i64
  %433 = load i8*, i8** %dest.addr, align 8
  %arrayidx781 = getelementptr inbounds i8, i8* %433, i64 %idxprom780
  store i8 %conv779, i8* %arrayidx781, align 1
  br label %do.cond.782

do.cond.782:                                      ; preds = %cond.end.777
  %434 = load i32, i32* %b, align 4
  %tobool783 = icmp ne i32 %434, 0
  br i1 %tobool783, label %do.body.764, label %do.end.784

do.end.784:                                       ; preds = %do.cond.782
  br label %if.end.826

if.else.785:                                      ; preds = %if.then.758
  %435 = load i8, i8* %src2_alpha720, align 1
  %conv786 = uitofp i8 %435 to float
  %436 = load i8, i8* %new_alpha734, align 1
  %conv787 = zext i8 %436 to i32
  %conv788 = sitofp i32 %conv787 to float
  %div789 = fdiv float %conv786, %conv788
  store float %div789, float* %ratio, align 4
  %437 = load float, float* %ratio, align 4
  %conv790 = fpext float %437 to double
  %sub791 = fsub double 1.000000e+00, %conv790
  %conv792 = fptrunc double %sub791 to float
  store float %conv792, float* %compl_ratio, align 4
  br label %do.body.793

do.body.793:                                      ; preds = %do.cond.823, %if.else.785
  %438 = load i32, i32* %b, align 4
  %dec794 = add i32 %438, -1
  store i32 %dec794, i32* %b, align 4
  %439 = load i32, i32* %b, align 4
  %idxprom795 = zext i32 %439 to i64
  %440 = load i32*, i32** %affect.addr, align 8
  %arrayidx796 = getelementptr inbounds i32, i32* %440, i64 %idxprom795
  %441 = load i32, i32* %arrayidx796, align 4
  %tobool797 = icmp ne i32 %441, 0
  br i1 %tobool797, label %cond.true.798, label %cond.false.814

cond.true.798:                                    ; preds = %do.body.793
  %442 = load i32, i32* %b, align 4
  %idxprom799 = zext i32 %442 to i64
  %443 = load i8*, i8** %src2.addr, align 8
  %arrayidx800 = getelementptr inbounds i8, i8* %443, i64 %idxprom799
  %444 = load i8, i8* %arrayidx800, align 1
  %conv801 = zext i8 %444 to i32
  %conv802 = sitofp i32 %conv801 to float
  %445 = load float, float* %ratio, align 4
  %mul803 = fmul float %conv802, %445
  %446 = load i32, i32* %b, align 4
  %idxprom804 = zext i32 %446 to i64
  %447 = load i8*, i8** %src1.addr, align 8
  %arrayidx805 = getelementptr inbounds i8, i8* %447, i64 %idxprom804
  %448 = load i8, i8* %arrayidx805, align 1
  %conv806 = zext i8 %448 to i32
  %conv807 = sitofp i32 %conv806 to float
  %449 = load float, float* %compl_ratio, align 4
  %mul808 = fmul float %conv807, %449
  %add809 = fadd float %mul803, %mul808
  %conv810 = fpext float %add809 to double
  %add811 = fadd double %conv810, 1.000000e-04
  %conv812 = fptoui double %add811 to i8
  %conv813 = zext i8 %conv812 to i32
  br label %cond.end.818

cond.false.814:                                   ; preds = %do.body.793
  %450 = load i32, i32* %b, align 4
  %idxprom815 = zext i32 %450 to i64
  %451 = load i8*, i8** %src1.addr, align 8
  %arrayidx816 = getelementptr inbounds i8, i8* %451, i64 %idxprom815
  %452 = load i8, i8* %arrayidx816, align 1
  %conv817 = zext i8 %452 to i32
  br label %cond.end.818

cond.end.818:                                     ; preds = %cond.false.814, %cond.true.798
  %cond819 = phi i32 [ %conv813, %cond.true.798 ], [ %conv817, %cond.false.814 ]
  %conv820 = trunc i32 %cond819 to i8
  %453 = load i32, i32* %b, align 4
  %idxprom821 = zext i32 %453 to i64
  %454 = load i8*, i8** %dest.addr, align 8
  %arrayidx822 = getelementptr inbounds i8, i8* %454, i64 %idxprom821
  store i8 %conv820, i8* %arrayidx822, align 1
  br label %do.cond.823

do.cond.823:                                      ; preds = %cond.end.818
  %455 = load i32, i32* %b, align 4
  %tobool824 = icmp ne i32 %455, 0
  br i1 %tobool824, label %do.body.793, label %do.end.825

do.end.825:                                       ; preds = %do.cond.823
  br label %if.end.826

if.end.826:                                       ; preds = %do.end.825, %do.end.784
  br label %if.end.827

if.end.827:                                       ; preds = %if.end.826, %land.lhs.true.754, %while.body.716
  %456 = load i32, i32* %mode_affect.addr, align 4
  %tobool828 = icmp ne i32 %456, 0
  br i1 %tobool828, label %if.then.829, label %if.else.844

if.then.829:                                      ; preds = %if.end.827
  %457 = load i32, i32* %alpha, align 4
  %idxprom830 = zext i32 %457 to i64
  %458 = load i32*, i32** %affect.addr, align 8
  %arrayidx831 = getelementptr inbounds i32, i32* %458, i64 %idxprom830
  %459 = load i32, i32* %arrayidx831, align 4
  %tobool832 = icmp ne i32 %459, 0
  br i1 %tobool832, label %cond.true.833, label %cond.false.835

cond.true.833:                                    ; preds = %if.then.829
  %460 = load i8, i8* %new_alpha734, align 1
  %conv834 = zext i8 %460 to i32
  br label %cond.end.839

cond.false.835:                                   ; preds = %if.then.829
  %461 = load i32, i32* %alpha, align 4
  %idxprom836 = zext i32 %461 to i64
  %462 = load i8*, i8** %src1.addr, align 8
  %arrayidx837 = getelementptr inbounds i8, i8* %462, i64 %idxprom836
  %463 = load i8, i8* %arrayidx837, align 1
  %conv838 = zext i8 %463 to i32
  br label %cond.end.839

cond.end.839:                                     ; preds = %cond.false.835, %cond.true.833
  %cond840 = phi i32 [ %conv834, %cond.true.833 ], [ %conv838, %cond.false.835 ]
  %conv841 = trunc i32 %cond840 to i8
  %464 = load i32, i32* %alpha, align 4
  %idxprom842 = zext i32 %464 to i64
  %465 = load i8*, i8** %dest.addr, align 8
  %arrayidx843 = getelementptr inbounds i8, i8* %465, i64 %idxprom842
  store i8 %conv841, i8* %arrayidx843, align 1
  br label %if.end.870

if.else.844:                                      ; preds = %if.end.827
  %466 = load i32, i32* %alpha, align 4
  %idxprom845 = zext i32 %466 to i64
  %467 = load i8*, i8** %src1.addr, align 8
  %arrayidx846 = getelementptr inbounds i8, i8* %467, i64 %idxprom845
  %468 = load i8, i8* %arrayidx846, align 1
  %conv847 = zext i8 %468 to i32
  %tobool848 = icmp ne i32 %conv847, 0
  br i1 %tobool848, label %cond.true.849, label %cond.false.853

cond.true.849:                                    ; preds = %if.else.844
  %469 = load i32, i32* %alpha, align 4
  %idxprom850 = zext i32 %469 to i64
  %470 = load i8*, i8** %src1.addr, align 8
  %arrayidx851 = getelementptr inbounds i8, i8* %470, i64 %idxprom850
  %471 = load i8, i8* %arrayidx851, align 1
  %conv852 = zext i8 %471 to i32
  br label %cond.end.865

cond.false.853:                                   ; preds = %if.else.844
  %472 = load i32, i32* %alpha, align 4
  %idxprom854 = zext i32 %472 to i64
  %473 = load i32*, i32** %affect.addr, align 8
  %arrayidx855 = getelementptr inbounds i32, i32* %473, i64 %idxprom854
  %474 = load i32, i32* %arrayidx855, align 4
  %tobool856 = icmp ne i32 %474, 0
  br i1 %tobool856, label %cond.true.857, label %cond.false.859

cond.true.857:                                    ; preds = %cond.false.853
  %475 = load i8, i8* %new_alpha734, align 1
  %conv858 = zext i8 %475 to i32
  br label %cond.end.863

cond.false.859:                                   ; preds = %cond.false.853
  %476 = load i32, i32* %alpha, align 4
  %idxprom860 = zext i32 %476 to i64
  %477 = load i8*, i8** %src1.addr, align 8
  %arrayidx861 = getelementptr inbounds i8, i8* %477, i64 %idxprom860
  %478 = load i8, i8* %arrayidx861, align 1
  %conv862 = zext i8 %478 to i32
  br label %cond.end.863

cond.end.863:                                     ; preds = %cond.false.859, %cond.true.857
  %cond864 = phi i32 [ %conv858, %cond.true.857 ], [ %conv862, %cond.false.859 ]
  br label %cond.end.865

cond.end.865:                                     ; preds = %cond.end.863, %cond.true.849
  %cond866 = phi i32 [ %conv852, %cond.true.849 ], [ %cond864, %cond.end.863 ]
  %conv867 = trunc i32 %cond866 to i8
  %479 = load i32, i32* %alpha, align 4
  %idxprom868 = zext i32 %479 to i64
  %480 = load i8*, i8** %dest.addr, align 8
  %arrayidx869 = getelementptr inbounds i8, i8* %480, i64 %idxprom868
  store i8 %conv867, i8* %arrayidx869, align 1
  br label %if.end.870

if.end.870:                                       ; preds = %cond.end.865, %cond.end.839
  %481 = load i8*, i8** %m, align 8
  %incdec.ptr871 = getelementptr inbounds i8, i8* %481, i32 1
  store i8* %incdec.ptr871, i8** %m, align 8
  %482 = load i32, i32* %bytes.addr, align 4
  %483 = load i8*, i8** %src1.addr, align 8
  %idx.ext872 = zext i32 %482 to i64
  %add.ptr873 = getelementptr inbounds i8, i8* %483, i64 %idx.ext872
  store i8* %add.ptr873, i8** %src1.addr, align 8
  %484 = load i32, i32* %bytes.addr, align 4
  %485 = load i8*, i8** %src2.addr, align 8
  %idx.ext874 = zext i32 %484 to i64
  %add.ptr875 = getelementptr inbounds i8, i8* %485, i64 %idx.ext874
  store i8* %add.ptr875, i8** %src2.addr, align 8
  %486 = load i32, i32* %bytes.addr, align 4
  %487 = load i8*, i8** %dest.addr, align 8
  %idx.ext876 = zext i32 %486 to i64
  %add.ptr877 = getelementptr inbounds i8, i8* %487, i64 %idx.ext876
  store i8* %add.ptr877, i8** %dest.addr, align 8
  br label %while.cond.713

while.end.878:                                    ; preds = %while.cond.713
  br label %if.end.892

if.else.879:                                      ; preds = %while.body.710
  %488 = load i32, i32* %bytes.addr, align 4
  %conv880 = zext i32 %488 to i64
  %mul881 = mul i64 %conv880, 4
  %conv882 = trunc i64 %mul881 to i32
  store i32 %conv882, i32* %j518, align 4
  %489 = load i32, i32* %j518, align 4
  %490 = load i8*, i8** %src2.addr, align 8
  %idx.ext883 = sext i32 %489 to i64
  %add.ptr884 = getelementptr inbounds i8, i8* %490, i64 %idx.ext883
  store i8* %add.ptr884, i8** %src2.addr, align 8
  br label %while.cond.885

while.cond.885:                                   ; preds = %while.body.888, %if.else.879
  %491 = load i32, i32* %j518, align 4
  %dec886 = add nsw i32 %491, -1
  store i32 %dec886, i32* %j518, align 4
  %tobool887 = icmp ne i32 %491, 0
  br i1 %tobool887, label %while.body.888, label %while.end.891

while.body.888:                                   ; preds = %while.cond.885
  %492 = load i8*, i8** %src1.addr, align 8
  %incdec.ptr889 = getelementptr inbounds i8, i8* %492, i32 1
  store i8* %incdec.ptr889, i8** %src1.addr, align 8
  %493 = load i8, i8* %492, align 1
  %494 = load i8*, i8** %dest.addr, align 8
  %incdec.ptr890 = getelementptr inbounds i8, i8* %494, i32 1
  store i8* %incdec.ptr890, i8** %dest.addr, align 8
  store i8 %493, i8* %494, align 1
  br label %while.cond.885

while.end.891:                                    ; preds = %while.cond.885
  br label %if.end.892

if.end.892:                                       ; preds = %while.end.891, %while.end.878
  %495 = load i32*, i32** %mask_ip514, align 8
  %incdec.ptr893 = getelementptr inbounds i32, i32* %495, i32 1
  store i32* %incdec.ptr893, i32** %mask_ip514, align 8
  br label %while.cond.707

while.end.894:                                    ; preds = %while.cond.707
  %496 = load i32*, i32** %mask_ip514, align 8
  %497 = bitcast i32* %496 to i8*
  store i8* %497, i8** %m, align 8
  br label %if.end.895

if.end.895:                                       ; preds = %while.end.894, %if.else.512
  br label %while.cond.896

while.cond.896:                                   ; preds = %if.end.1053, %if.end.895
  %498 = load i32, i32* %length.addr, align 4
  %dec897 = add i32 %498, -1
  store i32 %dec897, i32* %length.addr, align 4
  %tobool898 = icmp ne i32 %498, 0
  br i1 %tobool898, label %while.body.899, label %while.end.1061

while.body.899:                                   ; preds = %while.cond.896
  %499 = load i32, i32* %alpha, align 4
  %idxprom904 = zext i32 %499 to i64
  %500 = load i8*, i8** %src2.addr, align 8
  %arrayidx905 = getelementptr inbounds i8, i8* %500, i64 %idxprom904
  %501 = load i8, i8* %arrayidx905, align 1
  %conv906 = zext i8 %501 to i32
  %502 = load i8*, i8** %m, align 8
  %503 = load i8, i8* %502, align 1
  %conv907 = zext i8 %503 to i32
  %mul908 = mul nsw i32 %conv906, %conv907
  %504 = load i32, i32* %opacity.addr, align 4
  %mul909 = mul i32 %mul908, %504
  %add910 = add i32 %mul909, 32603
  %conv911 = zext i32 %add910 to i64
  store i64 %conv911, i64* %tmp901, align 8
  %505 = load i64, i64* %tmp901, align 8
  %shr912 = lshr i64 %505, 7
  %506 = load i64, i64* %tmp901, align 8
  %add913 = add i64 %shr912, %506
  %shr914 = lshr i64 %add913, 16
  %conv915 = trunc i64 %shr914 to i8
  store i8 %conv915, i8* %src2_alpha903, align 1
  %507 = load i32, i32* %alpha, align 4
  %idxprom918 = zext i32 %507 to i64
  %508 = load i8*, i8** %src1.addr, align 8
  %arrayidx919 = getelementptr inbounds i8, i8* %508, i64 %idxprom918
  %509 = load i8, i8* %arrayidx919, align 1
  %conv920 = zext i8 %509 to i64
  %510 = load i32, i32* %alpha, align 4
  %idxprom921 = zext i32 %510 to i64
  %511 = load i8*, i8** %src1.addr, align 8
  %arrayidx922 = getelementptr inbounds i8, i8* %511, i64 %idxprom921
  %512 = load i8, i8* %arrayidx922, align 1
  %conv923 = zext i8 %512 to i32
  %sub924 = sub nsw i32 255, %conv923
  %513 = load i8, i8* %src2_alpha903, align 1
  %conv925 = zext i8 %513 to i32
  %mul926 = mul nsw i32 %sub924, %conv925
  %add927 = add nsw i32 %mul926, 128
  %conv928 = sext i32 %add927 to i64
  store i64 %conv928, i64* %tmp901, align 8
  %514 = load i64, i64* %tmp901, align 8
  %shr929 = lshr i64 %514, 8
  %515 = load i64, i64* %tmp901, align 8
  %add930 = add i64 %shr929, %515
  %shr931 = lshr i64 %add930, 8
  %add932 = add i64 %conv920, %shr931
  %conv933 = trunc i64 %add932 to i8
  store i8 %conv933, i8* %new_alpha917, align 1
  %516 = load i8, i8* %src2_alpha903, align 1
  %conv934 = zext i8 %516 to i32
  %cmp935 = icmp ne i32 %conv934, 0
  br i1 %cmp935, label %land.lhs.true.937, label %if.end.1010

land.lhs.true.937:                                ; preds = %while.body.899
  %517 = load i8, i8* %new_alpha917, align 1
  %conv938 = zext i8 %517 to i32
  %cmp939 = icmp ne i32 %conv938, 0
  br i1 %cmp939, label %if.then.941, label %if.end.1010

if.then.941:                                      ; preds = %land.lhs.true.937
  %518 = load i32, i32* %alpha, align 4
  store i32 %518, i32* %b, align 4
  %519 = load i8, i8* %src2_alpha903, align 1
  %conv942 = zext i8 %519 to i32
  %520 = load i8, i8* %new_alpha917, align 1
  %conv943 = zext i8 %520 to i32
  %cmp944 = icmp eq i32 %conv942, %conv943
  br i1 %cmp944, label %if.then.946, label %if.else.968

if.then.946:                                      ; preds = %if.then.941
  br label %do.body.947

do.body.947:                                      ; preds = %do.cond.965, %if.then.946
  %521 = load i32, i32* %b, align 4
  %dec948 = add i32 %521, -1
  store i32 %dec948, i32* %b, align 4
  %522 = load i32, i32* %b, align 4
  %idxprom949 = zext i32 %522 to i64
  %523 = load i32*, i32** %affect.addr, align 8
  %arrayidx950 = getelementptr inbounds i32, i32* %523, i64 %idxprom949
  %524 = load i32, i32* %arrayidx950, align 4
  %tobool951 = icmp ne i32 %524, 0
  br i1 %tobool951, label %cond.true.952, label %cond.false.956

cond.true.952:                                    ; preds = %do.body.947
  %525 = load i32, i32* %b, align 4
  %idxprom953 = zext i32 %525 to i64
  %526 = load i8*, i8** %src2.addr, align 8
  %arrayidx954 = getelementptr inbounds i8, i8* %526, i64 %idxprom953
  %527 = load i8, i8* %arrayidx954, align 1
  %conv955 = zext i8 %527 to i32
  br label %cond.end.960

cond.false.956:                                   ; preds = %do.body.947
  %528 = load i32, i32* %b, align 4
  %idxprom957 = zext i32 %528 to i64
  %529 = load i8*, i8** %src1.addr, align 8
  %arrayidx958 = getelementptr inbounds i8, i8* %529, i64 %idxprom957
  %530 = load i8, i8* %arrayidx958, align 1
  %conv959 = zext i8 %530 to i32
  br label %cond.end.960

cond.end.960:                                     ; preds = %cond.false.956, %cond.true.952
  %cond961 = phi i32 [ %conv955, %cond.true.952 ], [ %conv959, %cond.false.956 ]
  %conv962 = trunc i32 %cond961 to i8
  %531 = load i32, i32* %b, align 4
  %idxprom963 = zext i32 %531 to i64
  %532 = load i8*, i8** %dest.addr, align 8
  %arrayidx964 = getelementptr inbounds i8, i8* %532, i64 %idxprom963
  store i8 %conv962, i8* %arrayidx964, align 1
  br label %do.cond.965

do.cond.965:                                      ; preds = %cond.end.960
  %533 = load i32, i32* %b, align 4
  %tobool966 = icmp ne i32 %533, 0
  br i1 %tobool966, label %do.body.947, label %do.end.967

do.end.967:                                       ; preds = %do.cond.965
  br label %if.end.1009

if.else.968:                                      ; preds = %if.then.941
  %534 = load i8, i8* %src2_alpha903, align 1
  %conv969 = uitofp i8 %534 to float
  %535 = load i8, i8* %new_alpha917, align 1
  %conv970 = zext i8 %535 to i32
  %conv971 = sitofp i32 %conv970 to float
  %div972 = fdiv float %conv969, %conv971
  store float %div972, float* %ratio, align 4
  %536 = load float, float* %ratio, align 4
  %conv973 = fpext float %536 to double
  %sub974 = fsub double 1.000000e+00, %conv973
  %conv975 = fptrunc double %sub974 to float
  store float %conv975, float* %compl_ratio, align 4
  br label %do.body.976

do.body.976:                                      ; preds = %do.cond.1006, %if.else.968
  %537 = load i32, i32* %b, align 4
  %dec977 = add i32 %537, -1
  store i32 %dec977, i32* %b, align 4
  %538 = load i32, i32* %b, align 4
  %idxprom978 = zext i32 %538 to i64
  %539 = load i32*, i32** %affect.addr, align 8
  %arrayidx979 = getelementptr inbounds i32, i32* %539, i64 %idxprom978
  %540 = load i32, i32* %arrayidx979, align 4
  %tobool980 = icmp ne i32 %540, 0
  br i1 %tobool980, label %cond.true.981, label %cond.false.997

cond.true.981:                                    ; preds = %do.body.976
  %541 = load i32, i32* %b, align 4
  %idxprom982 = zext i32 %541 to i64
  %542 = load i8*, i8** %src2.addr, align 8
  %arrayidx983 = getelementptr inbounds i8, i8* %542, i64 %idxprom982
  %543 = load i8, i8* %arrayidx983, align 1
  %conv984 = zext i8 %543 to i32
  %conv985 = sitofp i32 %conv984 to float
  %544 = load float, float* %ratio, align 4
  %mul986 = fmul float %conv985, %544
  %545 = load i32, i32* %b, align 4
  %idxprom987 = zext i32 %545 to i64
  %546 = load i8*, i8** %src1.addr, align 8
  %arrayidx988 = getelementptr inbounds i8, i8* %546, i64 %idxprom987
  %547 = load i8, i8* %arrayidx988, align 1
  %conv989 = zext i8 %547 to i32
  %conv990 = sitofp i32 %conv989 to float
  %548 = load float, float* %compl_ratio, align 4
  %mul991 = fmul float %conv990, %548
  %add992 = fadd float %mul986, %mul991
  %conv993 = fpext float %add992 to double
  %add994 = fadd double %conv993, 1.000000e-04
  %conv995 = fptoui double %add994 to i8
  %conv996 = zext i8 %conv995 to i32
  br label %cond.end.1001

cond.false.997:                                   ; preds = %do.body.976
  %549 = load i32, i32* %b, align 4
  %idxprom998 = zext i32 %549 to i64
  %550 = load i8*, i8** %src1.addr, align 8
  %arrayidx999 = getelementptr inbounds i8, i8* %550, i64 %idxprom998
  %551 = load i8, i8* %arrayidx999, align 1
  %conv1000 = zext i8 %551 to i32
  br label %cond.end.1001

cond.end.1001:                                    ; preds = %cond.false.997, %cond.true.981
  %cond1002 = phi i32 [ %conv996, %cond.true.981 ], [ %conv1000, %cond.false.997 ]
  %conv1003 = trunc i32 %cond1002 to i8
  %552 = load i32, i32* %b, align 4
  %idxprom1004 = zext i32 %552 to i64
  %553 = load i8*, i8** %dest.addr, align 8
  %arrayidx1005 = getelementptr inbounds i8, i8* %553, i64 %idxprom1004
  store i8 %conv1003, i8* %arrayidx1005, align 1
  br label %do.cond.1006

do.cond.1006:                                     ; preds = %cond.end.1001
  %554 = load i32, i32* %b, align 4
  %tobool1007 = icmp ne i32 %554, 0
  br i1 %tobool1007, label %do.body.976, label %do.end.1008

do.end.1008:                                      ; preds = %do.cond.1006
  br label %if.end.1009

if.end.1009:                                      ; preds = %do.end.1008, %do.end.967
  br label %if.end.1010

if.end.1010:                                      ; preds = %if.end.1009, %land.lhs.true.937, %while.body.899
  %555 = load i32, i32* %mode_affect.addr, align 4
  %tobool1011 = icmp ne i32 %555, 0
  br i1 %tobool1011, label %if.then.1012, label %if.else.1027

if.then.1012:                                     ; preds = %if.end.1010
  %556 = load i32, i32* %alpha, align 4
  %idxprom1013 = zext i32 %556 to i64
  %557 = load i32*, i32** %affect.addr, align 8
  %arrayidx1014 = getelementptr inbounds i32, i32* %557, i64 %idxprom1013
  %558 = load i32, i32* %arrayidx1014, align 4
  %tobool1015 = icmp ne i32 %558, 0
  br i1 %tobool1015, label %cond.true.1016, label %cond.false.1018

cond.true.1016:                                   ; preds = %if.then.1012
  %559 = load i8, i8* %new_alpha917, align 1
  %conv1017 = zext i8 %559 to i32
  br label %cond.end.1022

cond.false.1018:                                  ; preds = %if.then.1012
  %560 = load i32, i32* %alpha, align 4
  %idxprom1019 = zext i32 %560 to i64
  %561 = load i8*, i8** %src1.addr, align 8
  %arrayidx1020 = getelementptr inbounds i8, i8* %561, i64 %idxprom1019
  %562 = load i8, i8* %arrayidx1020, align 1
  %conv1021 = zext i8 %562 to i32
  br label %cond.end.1022

cond.end.1022:                                    ; preds = %cond.false.1018, %cond.true.1016
  %cond1023 = phi i32 [ %conv1017, %cond.true.1016 ], [ %conv1021, %cond.false.1018 ]
  %conv1024 = trunc i32 %cond1023 to i8
  %563 = load i32, i32* %alpha, align 4
  %idxprom1025 = zext i32 %563 to i64
  %564 = load i8*, i8** %dest.addr, align 8
  %arrayidx1026 = getelementptr inbounds i8, i8* %564, i64 %idxprom1025
  store i8 %conv1024, i8* %arrayidx1026, align 1
  br label %if.end.1053

if.else.1027:                                     ; preds = %if.end.1010
  %565 = load i32, i32* %alpha, align 4
  %idxprom1028 = zext i32 %565 to i64
  %566 = load i8*, i8** %src1.addr, align 8
  %arrayidx1029 = getelementptr inbounds i8, i8* %566, i64 %idxprom1028
  %567 = load i8, i8* %arrayidx1029, align 1
  %conv1030 = zext i8 %567 to i32
  %tobool1031 = icmp ne i32 %conv1030, 0
  br i1 %tobool1031, label %cond.true.1032, label %cond.false.1036

cond.true.1032:                                   ; preds = %if.else.1027
  %568 = load i32, i32* %alpha, align 4
  %idxprom1033 = zext i32 %568 to i64
  %569 = load i8*, i8** %src1.addr, align 8
  %arrayidx1034 = getelementptr inbounds i8, i8* %569, i64 %idxprom1033
  %570 = load i8, i8* %arrayidx1034, align 1
  %conv1035 = zext i8 %570 to i32
  br label %cond.end.1048

cond.false.1036:                                  ; preds = %if.else.1027
  %571 = load i32, i32* %alpha, align 4
  %idxprom1037 = zext i32 %571 to i64
  %572 = load i32*, i32** %affect.addr, align 8
  %arrayidx1038 = getelementptr inbounds i32, i32* %572, i64 %idxprom1037
  %573 = load i32, i32* %arrayidx1038, align 4
  %tobool1039 = icmp ne i32 %573, 0
  br i1 %tobool1039, label %cond.true.1040, label %cond.false.1042

cond.true.1040:                                   ; preds = %cond.false.1036
  %574 = load i8, i8* %new_alpha917, align 1
  %conv1041 = zext i8 %574 to i32
  br label %cond.end.1046

cond.false.1042:                                  ; preds = %cond.false.1036
  %575 = load i32, i32* %alpha, align 4
  %idxprom1043 = zext i32 %575 to i64
  %576 = load i8*, i8** %src1.addr, align 8
  %arrayidx1044 = getelementptr inbounds i8, i8* %576, i64 %idxprom1043
  %577 = load i8, i8* %arrayidx1044, align 1
  %conv1045 = zext i8 %577 to i32
  br label %cond.end.1046

cond.end.1046:                                    ; preds = %cond.false.1042, %cond.true.1040
  %cond1047 = phi i32 [ %conv1041, %cond.true.1040 ], [ %conv1045, %cond.false.1042 ]
  br label %cond.end.1048

cond.end.1048:                                    ; preds = %cond.end.1046, %cond.true.1032
  %cond1049 = phi i32 [ %conv1035, %cond.true.1032 ], [ %cond1047, %cond.end.1046 ]
  %conv1050 = trunc i32 %cond1049 to i8
  %578 = load i32, i32* %alpha, align 4
  %idxprom1051 = zext i32 %578 to i64
  %579 = load i8*, i8** %dest.addr, align 8
  %arrayidx1052 = getelementptr inbounds i8, i8* %579, i64 %idxprom1051
  store i8 %conv1050, i8* %arrayidx1052, align 1
  br label %if.end.1053

if.end.1053:                                      ; preds = %cond.end.1048, %cond.end.1022
  %580 = load i8*, i8** %m, align 8
  %incdec.ptr1054 = getelementptr inbounds i8, i8* %580, i32 1
  store i8* %incdec.ptr1054, i8** %m, align 8
  %581 = load i32, i32* %bytes.addr, align 4
  %582 = load i8*, i8** %src1.addr, align 8
  %idx.ext1055 = zext i32 %581 to i64
  %add.ptr1056 = getelementptr inbounds i8, i8* %582, i64 %idx.ext1055
  store i8* %add.ptr1056, i8** %src1.addr, align 8
  %583 = load i32, i32* %bytes.addr, align 4
  %584 = load i8*, i8** %src2.addr, align 8
  %idx.ext1057 = zext i32 %583 to i64
  %add.ptr1058 = getelementptr inbounds i8, i8* %584, i64 %idx.ext1057
  store i8* %add.ptr1058, i8** %src2.addr, align 8
  %585 = load i32, i32* %bytes.addr, align 4
  %586 = load i8*, i8** %dest.addr, align 8
  %idx.ext1059 = zext i32 %585 to i64
  %add.ptr1060 = getelementptr inbounds i8, i8* %586, i64 %idx.ext1059
  store i8* %add.ptr1060, i8** %dest.addr, align 8
  br label %while.cond.896

while.end.1061:                                   ; preds = %while.cond.896
  br label %if.end.1062

if.end.1062:                                      ; preds = %while.end.1061, %while.end.511
  br label %if.end.1387

if.else.1063:                                     ; preds = %entry
  %587 = load i32, i32* %opacity.addr, align 4
  %cmp1064 = icmp eq i32 %587, 255
  br i1 %cmp1064, label %if.then.1066, label %if.else.1222

if.then.1066:                                     ; preds = %if.else.1063
  br label %while.cond.1067

while.cond.1067:                                  ; preds = %if.end.1214, %if.then.1066
  %588 = load i32, i32* %length.addr, align 4
  %dec1068 = add i32 %588, -1
  store i32 %dec1068, i32* %length.addr, align 4
  %tobool1069 = icmp ne i32 %588, 0
  br i1 %tobool1069, label %while.body.1070, label %while.end.1221

while.body.1070:                                  ; preds = %while.cond.1067
  %589 = load i32, i32* %alpha, align 4
  %idxprom1075 = zext i32 %589 to i64
  %590 = load i8*, i8** %src2.addr, align 8
  %arrayidx1076 = getelementptr inbounds i8, i8* %590, i64 %idxprom1075
  %591 = load i8, i8* %arrayidx1076, align 1
  store i8 %591, i8* %src2_alpha1074, align 1
  %592 = load i32, i32* %alpha, align 4
  %idxprom1079 = zext i32 %592 to i64
  %593 = load i8*, i8** %src1.addr, align 8
  %arrayidx1080 = getelementptr inbounds i8, i8* %593, i64 %idxprom1079
  %594 = load i8, i8* %arrayidx1080, align 1
  %conv1081 = zext i8 %594 to i64
  %595 = load i32, i32* %alpha, align 4
  %idxprom1082 = zext i32 %595 to i64
  %596 = load i8*, i8** %src1.addr, align 8
  %arrayidx1083 = getelementptr inbounds i8, i8* %596, i64 %idxprom1082
  %597 = load i8, i8* %arrayidx1083, align 1
  %conv1084 = zext i8 %597 to i32
  %sub1085 = sub nsw i32 255, %conv1084
  %598 = load i8, i8* %src2_alpha1074, align 1
  %conv1086 = zext i8 %598 to i32
  %mul1087 = mul nsw i32 %sub1085, %conv1086
  %add1088 = add nsw i32 %mul1087, 128
  %conv1089 = sext i32 %add1088 to i64
  store i64 %conv1089, i64* %tmp1072, align 8
  %599 = load i64, i64* %tmp1072, align 8
  %shr1090 = lshr i64 %599, 8
  %600 = load i64, i64* %tmp1072, align 8
  %add1091 = add i64 %shr1090, %600
  %shr1092 = lshr i64 %add1091, 8
  %add1093 = add i64 %conv1081, %shr1092
  %conv1094 = trunc i64 %add1093 to i8
  store i8 %conv1094, i8* %new_alpha1078, align 1
  %601 = load i8, i8* %src2_alpha1074, align 1
  %conv1095 = zext i8 %601 to i32
  %cmp1096 = icmp ne i32 %conv1095, 0
  br i1 %cmp1096, label %land.lhs.true.1098, label %if.end.1171

land.lhs.true.1098:                               ; preds = %while.body.1070
  %602 = load i8, i8* %new_alpha1078, align 1
  %conv1099 = zext i8 %602 to i32
  %cmp1100 = icmp ne i32 %conv1099, 0
  br i1 %cmp1100, label %if.then.1102, label %if.end.1171

if.then.1102:                                     ; preds = %land.lhs.true.1098
  %603 = load i32, i32* %alpha, align 4
  store i32 %603, i32* %b, align 4
  %604 = load i8, i8* %src2_alpha1074, align 1
  %conv1103 = zext i8 %604 to i32
  %605 = load i8, i8* %new_alpha1078, align 1
  %conv1104 = zext i8 %605 to i32
  %cmp1105 = icmp eq i32 %conv1103, %conv1104
  br i1 %cmp1105, label %if.then.1107, label %if.else.1129

if.then.1107:                                     ; preds = %if.then.1102
  br label %do.body.1108

do.body.1108:                                     ; preds = %do.cond.1126, %if.then.1107
  %606 = load i32, i32* %b, align 4
  %dec1109 = add i32 %606, -1
  store i32 %dec1109, i32* %b, align 4
  %607 = load i32, i32* %b, align 4
  %idxprom1110 = zext i32 %607 to i64
  %608 = load i32*, i32** %affect.addr, align 8
  %arrayidx1111 = getelementptr inbounds i32, i32* %608, i64 %idxprom1110
  %609 = load i32, i32* %arrayidx1111, align 4
  %tobool1112 = icmp ne i32 %609, 0
  br i1 %tobool1112, label %cond.true.1113, label %cond.false.1117

cond.true.1113:                                   ; preds = %do.body.1108
  %610 = load i32, i32* %b, align 4
  %idxprom1114 = zext i32 %610 to i64
  %611 = load i8*, i8** %src2.addr, align 8
  %arrayidx1115 = getelementptr inbounds i8, i8* %611, i64 %idxprom1114
  %612 = load i8, i8* %arrayidx1115, align 1
  %conv1116 = zext i8 %612 to i32
  br label %cond.end.1121

cond.false.1117:                                  ; preds = %do.body.1108
  %613 = load i32, i32* %b, align 4
  %idxprom1118 = zext i32 %613 to i64
  %614 = load i8*, i8** %src1.addr, align 8
  %arrayidx1119 = getelementptr inbounds i8, i8* %614, i64 %idxprom1118
  %615 = load i8, i8* %arrayidx1119, align 1
  %conv1120 = zext i8 %615 to i32
  br label %cond.end.1121

cond.end.1121:                                    ; preds = %cond.false.1117, %cond.true.1113
  %cond1122 = phi i32 [ %conv1116, %cond.true.1113 ], [ %conv1120, %cond.false.1117 ]
  %conv1123 = trunc i32 %cond1122 to i8
  %616 = load i32, i32* %b, align 4
  %idxprom1124 = zext i32 %616 to i64
  %617 = load i8*, i8** %dest.addr, align 8
  %arrayidx1125 = getelementptr inbounds i8, i8* %617, i64 %idxprom1124
  store i8 %conv1123, i8* %arrayidx1125, align 1
  br label %do.cond.1126

do.cond.1126:                                     ; preds = %cond.end.1121
  %618 = load i32, i32* %b, align 4
  %tobool1127 = icmp ne i32 %618, 0
  br i1 %tobool1127, label %do.body.1108, label %do.end.1128

do.end.1128:                                      ; preds = %do.cond.1126
  br label %if.end.1170

if.else.1129:                                     ; preds = %if.then.1102
  %619 = load i8, i8* %src2_alpha1074, align 1
  %conv1130 = uitofp i8 %619 to float
  %620 = load i8, i8* %new_alpha1078, align 1
  %conv1131 = zext i8 %620 to i32
  %conv1132 = sitofp i32 %conv1131 to float
  %div1133 = fdiv float %conv1130, %conv1132
  store float %div1133, float* %ratio, align 4
  %621 = load float, float* %ratio, align 4
  %conv1134 = fpext float %621 to double
  %sub1135 = fsub double 1.000000e+00, %conv1134
  %conv1136 = fptrunc double %sub1135 to float
  store float %conv1136, float* %compl_ratio, align 4
  br label %do.body.1137

do.body.1137:                                     ; preds = %do.cond.1167, %if.else.1129
  %622 = load i32, i32* %b, align 4
  %dec1138 = add i32 %622, -1
  store i32 %dec1138, i32* %b, align 4
  %623 = load i32, i32* %b, align 4
  %idxprom1139 = zext i32 %623 to i64
  %624 = load i32*, i32** %affect.addr, align 8
  %arrayidx1140 = getelementptr inbounds i32, i32* %624, i64 %idxprom1139
  %625 = load i32, i32* %arrayidx1140, align 4
  %tobool1141 = icmp ne i32 %625, 0
  br i1 %tobool1141, label %cond.true.1142, label %cond.false.1158

cond.true.1142:                                   ; preds = %do.body.1137
  %626 = load i32, i32* %b, align 4
  %idxprom1143 = zext i32 %626 to i64
  %627 = load i8*, i8** %src2.addr, align 8
  %arrayidx1144 = getelementptr inbounds i8, i8* %627, i64 %idxprom1143
  %628 = load i8, i8* %arrayidx1144, align 1
  %conv1145 = zext i8 %628 to i32
  %conv1146 = sitofp i32 %conv1145 to float
  %629 = load float, float* %ratio, align 4
  %mul1147 = fmul float %conv1146, %629
  %630 = load i32, i32* %b, align 4
  %idxprom1148 = zext i32 %630 to i64
  %631 = load i8*, i8** %src1.addr, align 8
  %arrayidx1149 = getelementptr inbounds i8, i8* %631, i64 %idxprom1148
  %632 = load i8, i8* %arrayidx1149, align 1
  %conv1150 = zext i8 %632 to i32
  %conv1151 = sitofp i32 %conv1150 to float
  %633 = load float, float* %compl_ratio, align 4
  %mul1152 = fmul float %conv1151, %633
  %add1153 = fadd float %mul1147, %mul1152
  %conv1154 = fpext float %add1153 to double
  %add1155 = fadd double %conv1154, 1.000000e-04
  %conv1156 = fptoui double %add1155 to i8
  %conv1157 = zext i8 %conv1156 to i32
  br label %cond.end.1162

cond.false.1158:                                  ; preds = %do.body.1137
  %634 = load i32, i32* %b, align 4
  %idxprom1159 = zext i32 %634 to i64
  %635 = load i8*, i8** %src1.addr, align 8
  %arrayidx1160 = getelementptr inbounds i8, i8* %635, i64 %idxprom1159
  %636 = load i8, i8* %arrayidx1160, align 1
  %conv1161 = zext i8 %636 to i32
  br label %cond.end.1162

cond.end.1162:                                    ; preds = %cond.false.1158, %cond.true.1142
  %cond1163 = phi i32 [ %conv1157, %cond.true.1142 ], [ %conv1161, %cond.false.1158 ]
  %conv1164 = trunc i32 %cond1163 to i8
  %637 = load i32, i32* %b, align 4
  %idxprom1165 = zext i32 %637 to i64
  %638 = load i8*, i8** %dest.addr, align 8
  %arrayidx1166 = getelementptr inbounds i8, i8* %638, i64 %idxprom1165
  store i8 %conv1164, i8* %arrayidx1166, align 1
  br label %do.cond.1167

do.cond.1167:                                     ; preds = %cond.end.1162
  %639 = load i32, i32* %b, align 4
  %tobool1168 = icmp ne i32 %639, 0
  br i1 %tobool1168, label %do.body.1137, label %do.end.1169

do.end.1169:                                      ; preds = %do.cond.1167
  br label %if.end.1170

if.end.1170:                                      ; preds = %do.end.1169, %do.end.1128
  br label %if.end.1171

if.end.1171:                                      ; preds = %if.end.1170, %land.lhs.true.1098, %while.body.1070
  %640 = load i32, i32* %mode_affect.addr, align 4
  %tobool1172 = icmp ne i32 %640, 0
  br i1 %tobool1172, label %if.then.1173, label %if.else.1188

if.then.1173:                                     ; preds = %if.end.1171
  %641 = load i32, i32* %alpha, align 4
  %idxprom1174 = zext i32 %641 to i64
  %642 = load i32*, i32** %affect.addr, align 8
  %arrayidx1175 = getelementptr inbounds i32, i32* %642, i64 %idxprom1174
  %643 = load i32, i32* %arrayidx1175, align 4
  %tobool1176 = icmp ne i32 %643, 0
  br i1 %tobool1176, label %cond.true.1177, label %cond.false.1179

cond.true.1177:                                   ; preds = %if.then.1173
  %644 = load i8, i8* %new_alpha1078, align 1
  %conv1178 = zext i8 %644 to i32
  br label %cond.end.1183

cond.false.1179:                                  ; preds = %if.then.1173
  %645 = load i32, i32* %alpha, align 4
  %idxprom1180 = zext i32 %645 to i64
  %646 = load i8*, i8** %src1.addr, align 8
  %arrayidx1181 = getelementptr inbounds i8, i8* %646, i64 %idxprom1180
  %647 = load i8, i8* %arrayidx1181, align 1
  %conv1182 = zext i8 %647 to i32
  br label %cond.end.1183

cond.end.1183:                                    ; preds = %cond.false.1179, %cond.true.1177
  %cond1184 = phi i32 [ %conv1178, %cond.true.1177 ], [ %conv1182, %cond.false.1179 ]
  %conv1185 = trunc i32 %cond1184 to i8
  %648 = load i32, i32* %alpha, align 4
  %idxprom1186 = zext i32 %648 to i64
  %649 = load i8*, i8** %dest.addr, align 8
  %arrayidx1187 = getelementptr inbounds i8, i8* %649, i64 %idxprom1186
  store i8 %conv1185, i8* %arrayidx1187, align 1
  br label %if.end.1214

if.else.1188:                                     ; preds = %if.end.1171
  %650 = load i32, i32* %alpha, align 4
  %idxprom1189 = zext i32 %650 to i64
  %651 = load i8*, i8** %src1.addr, align 8
  %arrayidx1190 = getelementptr inbounds i8, i8* %651, i64 %idxprom1189
  %652 = load i8, i8* %arrayidx1190, align 1
  %conv1191 = zext i8 %652 to i32
  %tobool1192 = icmp ne i32 %conv1191, 0
  br i1 %tobool1192, label %cond.true.1193, label %cond.false.1197

cond.true.1193:                                   ; preds = %if.else.1188
  %653 = load i32, i32* %alpha, align 4
  %idxprom1194 = zext i32 %653 to i64
  %654 = load i8*, i8** %src1.addr, align 8
  %arrayidx1195 = getelementptr inbounds i8, i8* %654, i64 %idxprom1194
  %655 = load i8, i8* %arrayidx1195, align 1
  %conv1196 = zext i8 %655 to i32
  br label %cond.end.1209

cond.false.1197:                                  ; preds = %if.else.1188
  %656 = load i32, i32* %alpha, align 4
  %idxprom1198 = zext i32 %656 to i64
  %657 = load i32*, i32** %affect.addr, align 8
  %arrayidx1199 = getelementptr inbounds i32, i32* %657, i64 %idxprom1198
  %658 = load i32, i32* %arrayidx1199, align 4
  %tobool1200 = icmp ne i32 %658, 0
  br i1 %tobool1200, label %cond.true.1201, label %cond.false.1203

cond.true.1201:                                   ; preds = %cond.false.1197
  %659 = load i8, i8* %new_alpha1078, align 1
  %conv1202 = zext i8 %659 to i32
  br label %cond.end.1207

cond.false.1203:                                  ; preds = %cond.false.1197
  %660 = load i32, i32* %alpha, align 4
  %idxprom1204 = zext i32 %660 to i64
  %661 = load i8*, i8** %src1.addr, align 8
  %arrayidx1205 = getelementptr inbounds i8, i8* %661, i64 %idxprom1204
  %662 = load i8, i8* %arrayidx1205, align 1
  %conv1206 = zext i8 %662 to i32
  br label %cond.end.1207

cond.end.1207:                                    ; preds = %cond.false.1203, %cond.true.1201
  %cond1208 = phi i32 [ %conv1202, %cond.true.1201 ], [ %conv1206, %cond.false.1203 ]
  br label %cond.end.1209

cond.end.1209:                                    ; preds = %cond.end.1207, %cond.true.1193
  %cond1210 = phi i32 [ %conv1196, %cond.true.1193 ], [ %cond1208, %cond.end.1207 ]
  %conv1211 = trunc i32 %cond1210 to i8
  %663 = load i32, i32* %alpha, align 4
  %idxprom1212 = zext i32 %663 to i64
  %664 = load i8*, i8** %dest.addr, align 8
  %arrayidx1213 = getelementptr inbounds i8, i8* %664, i64 %idxprom1212
  store i8 %conv1211, i8* %arrayidx1213, align 1
  br label %if.end.1214

if.end.1214:                                      ; preds = %cond.end.1209, %cond.end.1183
  %665 = load i32, i32* %bytes.addr, align 4
  %666 = load i8*, i8** %src1.addr, align 8
  %idx.ext1215 = zext i32 %665 to i64
  %add.ptr1216 = getelementptr inbounds i8, i8* %666, i64 %idx.ext1215
  store i8* %add.ptr1216, i8** %src1.addr, align 8
  %667 = load i32, i32* %bytes.addr, align 4
  %668 = load i8*, i8** %src2.addr, align 8
  %idx.ext1217 = zext i32 %667 to i64
  %add.ptr1218 = getelementptr inbounds i8, i8* %668, i64 %idx.ext1217
  store i8* %add.ptr1218, i8** %src2.addr, align 8
  %669 = load i32, i32* %bytes.addr, align 4
  %670 = load i8*, i8** %dest.addr, align 8
  %idx.ext1219 = zext i32 %669 to i64
  %add.ptr1220 = getelementptr inbounds i8, i8* %670, i64 %idx.ext1219
  store i8* %add.ptr1220, i8** %dest.addr, align 8
  br label %while.cond.1067

while.end.1221:                                   ; preds = %while.cond.1067
  br label %if.end.1386

if.else.1222:                                     ; preds = %if.else.1063
  br label %while.cond.1223

while.cond.1223:                                  ; preds = %if.end.1378, %if.else.1222
  %671 = load i32, i32* %length.addr, align 4
  %dec1224 = add i32 %671, -1
  store i32 %dec1224, i32* %length.addr, align 4
  %tobool1225 = icmp ne i32 %671, 0
  br i1 %tobool1225, label %while.body.1226, label %while.end.1385

while.body.1226:                                  ; preds = %while.cond.1223
  %672 = load i32, i32* %alpha, align 4
  %idxprom1231 = zext i32 %672 to i64
  %673 = load i8*, i8** %src2.addr, align 8
  %arrayidx1232 = getelementptr inbounds i8, i8* %673, i64 %idxprom1231
  %674 = load i8, i8* %arrayidx1232, align 1
  %conv1233 = zext i8 %674 to i32
  %675 = load i32, i32* %opacity.addr, align 4
  %mul1234 = mul i32 %conv1233, %675
  %add1235 = add i32 %mul1234, 128
  %conv1236 = zext i32 %add1235 to i64
  store i64 %conv1236, i64* %tmp1228, align 8
  %676 = load i64, i64* %tmp1228, align 8
  %shr1237 = lshr i64 %676, 8
  %677 = load i64, i64* %tmp1228, align 8
  %add1238 = add i64 %shr1237, %677
  %shr1239 = lshr i64 %add1238, 8
  %conv1240 = trunc i64 %shr1239 to i8
  store i8 %conv1240, i8* %src2_alpha1230, align 1
  %678 = load i32, i32* %alpha, align 4
  %idxprom1243 = zext i32 %678 to i64
  %679 = load i8*, i8** %src1.addr, align 8
  %arrayidx1244 = getelementptr inbounds i8, i8* %679, i64 %idxprom1243
  %680 = load i8, i8* %arrayidx1244, align 1
  %conv1245 = zext i8 %680 to i64
  %681 = load i32, i32* %alpha, align 4
  %idxprom1246 = zext i32 %681 to i64
  %682 = load i8*, i8** %src1.addr, align 8
  %arrayidx1247 = getelementptr inbounds i8, i8* %682, i64 %idxprom1246
  %683 = load i8, i8* %arrayidx1247, align 1
  %conv1248 = zext i8 %683 to i32
  %sub1249 = sub nsw i32 255, %conv1248
  %684 = load i8, i8* %src2_alpha1230, align 1
  %conv1250 = zext i8 %684 to i32
  %mul1251 = mul nsw i32 %sub1249, %conv1250
  %add1252 = add nsw i32 %mul1251, 128
  %conv1253 = sext i32 %add1252 to i64
  store i64 %conv1253, i64* %tmp1228, align 8
  %685 = load i64, i64* %tmp1228, align 8
  %shr1254 = lshr i64 %685, 8
  %686 = load i64, i64* %tmp1228, align 8
  %add1255 = add i64 %shr1254, %686
  %shr1256 = lshr i64 %add1255, 8
  %add1257 = add i64 %conv1245, %shr1256
  %conv1258 = trunc i64 %add1257 to i8
  store i8 %conv1258, i8* %new_alpha1242, align 1
  %687 = load i8, i8* %src2_alpha1230, align 1
  %conv1259 = zext i8 %687 to i32
  %cmp1260 = icmp ne i32 %conv1259, 0
  br i1 %cmp1260, label %land.lhs.true.1262, label %if.end.1335

land.lhs.true.1262:                               ; preds = %while.body.1226
  %688 = load i8, i8* %new_alpha1242, align 1
  %conv1263 = zext i8 %688 to i32
  %cmp1264 = icmp ne i32 %conv1263, 0
  br i1 %cmp1264, label %if.then.1266, label %if.end.1335

if.then.1266:                                     ; preds = %land.lhs.true.1262
  %689 = load i32, i32* %alpha, align 4
  store i32 %689, i32* %b, align 4
  %690 = load i8, i8* %src2_alpha1230, align 1
  %conv1267 = zext i8 %690 to i32
  %691 = load i8, i8* %new_alpha1242, align 1
  %conv1268 = zext i8 %691 to i32
  %cmp1269 = icmp eq i32 %conv1267, %conv1268
  br i1 %cmp1269, label %if.then.1271, label %if.else.1293

if.then.1271:                                     ; preds = %if.then.1266
  br label %do.body.1272

do.body.1272:                                     ; preds = %do.cond.1290, %if.then.1271
  %692 = load i32, i32* %b, align 4
  %dec1273 = add i32 %692, -1
  store i32 %dec1273, i32* %b, align 4
  %693 = load i32, i32* %b, align 4
  %idxprom1274 = zext i32 %693 to i64
  %694 = load i32*, i32** %affect.addr, align 8
  %arrayidx1275 = getelementptr inbounds i32, i32* %694, i64 %idxprom1274
  %695 = load i32, i32* %arrayidx1275, align 4
  %tobool1276 = icmp ne i32 %695, 0
  br i1 %tobool1276, label %cond.true.1277, label %cond.false.1281

cond.true.1277:                                   ; preds = %do.body.1272
  %696 = load i32, i32* %b, align 4
  %idxprom1278 = zext i32 %696 to i64
  %697 = load i8*, i8** %src2.addr, align 8
  %arrayidx1279 = getelementptr inbounds i8, i8* %697, i64 %idxprom1278
  %698 = load i8, i8* %arrayidx1279, align 1
  %conv1280 = zext i8 %698 to i32
  br label %cond.end.1285

cond.false.1281:                                  ; preds = %do.body.1272
  %699 = load i32, i32* %b, align 4
  %idxprom1282 = zext i32 %699 to i64
  %700 = load i8*, i8** %src1.addr, align 8
  %arrayidx1283 = getelementptr inbounds i8, i8* %700, i64 %idxprom1282
  %701 = load i8, i8* %arrayidx1283, align 1
  %conv1284 = zext i8 %701 to i32
  br label %cond.end.1285

cond.end.1285:                                    ; preds = %cond.false.1281, %cond.true.1277
  %cond1286 = phi i32 [ %conv1280, %cond.true.1277 ], [ %conv1284, %cond.false.1281 ]
  %conv1287 = trunc i32 %cond1286 to i8
  %702 = load i32, i32* %b, align 4
  %idxprom1288 = zext i32 %702 to i64
  %703 = load i8*, i8** %dest.addr, align 8
  %arrayidx1289 = getelementptr inbounds i8, i8* %703, i64 %idxprom1288
  store i8 %conv1287, i8* %arrayidx1289, align 1
  br label %do.cond.1290

do.cond.1290:                                     ; preds = %cond.end.1285
  %704 = load i32, i32* %b, align 4
  %tobool1291 = icmp ne i32 %704, 0
  br i1 %tobool1291, label %do.body.1272, label %do.end.1292

do.end.1292:                                      ; preds = %do.cond.1290
  br label %if.end.1334

if.else.1293:                                     ; preds = %if.then.1266
  %705 = load i8, i8* %src2_alpha1230, align 1
  %conv1294 = uitofp i8 %705 to float
  %706 = load i8, i8* %new_alpha1242, align 1
  %conv1295 = zext i8 %706 to i32
  %conv1296 = sitofp i32 %conv1295 to float
  %div1297 = fdiv float %conv1294, %conv1296
  store float %div1297, float* %ratio, align 4
  %707 = load float, float* %ratio, align 4
  %conv1298 = fpext float %707 to double
  %sub1299 = fsub double 1.000000e+00, %conv1298
  %conv1300 = fptrunc double %sub1299 to float
  store float %conv1300, float* %compl_ratio, align 4
  br label %do.body.1301

do.body.1301:                                     ; preds = %do.cond.1331, %if.else.1293
  %708 = load i32, i32* %b, align 4
  %dec1302 = add i32 %708, -1
  store i32 %dec1302, i32* %b, align 4
  %709 = load i32, i32* %b, align 4
  %idxprom1303 = zext i32 %709 to i64
  %710 = load i32*, i32** %affect.addr, align 8
  %arrayidx1304 = getelementptr inbounds i32, i32* %710, i64 %idxprom1303
  %711 = load i32, i32* %arrayidx1304, align 4
  %tobool1305 = icmp ne i32 %711, 0
  br i1 %tobool1305, label %cond.true.1306, label %cond.false.1322

cond.true.1306:                                   ; preds = %do.body.1301
  %712 = load i32, i32* %b, align 4
  %idxprom1307 = zext i32 %712 to i64
  %713 = load i8*, i8** %src2.addr, align 8
  %arrayidx1308 = getelementptr inbounds i8, i8* %713, i64 %idxprom1307
  %714 = load i8, i8* %arrayidx1308, align 1
  %conv1309 = zext i8 %714 to i32
  %conv1310 = sitofp i32 %conv1309 to float
  %715 = load float, float* %ratio, align 4
  %mul1311 = fmul float %conv1310, %715
  %716 = load i32, i32* %b, align 4
  %idxprom1312 = zext i32 %716 to i64
  %717 = load i8*, i8** %src1.addr, align 8
  %arrayidx1313 = getelementptr inbounds i8, i8* %717, i64 %idxprom1312
  %718 = load i8, i8* %arrayidx1313, align 1
  %conv1314 = zext i8 %718 to i32
  %conv1315 = sitofp i32 %conv1314 to float
  %719 = load float, float* %compl_ratio, align 4
  %mul1316 = fmul float %conv1315, %719
  %add1317 = fadd float %mul1311, %mul1316
  %conv1318 = fpext float %add1317 to double
  %add1319 = fadd double %conv1318, 1.000000e-04
  %conv1320 = fptoui double %add1319 to i8
  %conv1321 = zext i8 %conv1320 to i32
  br label %cond.end.1326

cond.false.1322:                                  ; preds = %do.body.1301
  %720 = load i32, i32* %b, align 4
  %idxprom1323 = zext i32 %720 to i64
  %721 = load i8*, i8** %src1.addr, align 8
  %arrayidx1324 = getelementptr inbounds i8, i8* %721, i64 %idxprom1323
  %722 = load i8, i8* %arrayidx1324, align 1
  %conv1325 = zext i8 %722 to i32
  br label %cond.end.1326

cond.end.1326:                                    ; preds = %cond.false.1322, %cond.true.1306
  %cond1327 = phi i32 [ %conv1321, %cond.true.1306 ], [ %conv1325, %cond.false.1322 ]
  %conv1328 = trunc i32 %cond1327 to i8
  %723 = load i32, i32* %b, align 4
  %idxprom1329 = zext i32 %723 to i64
  %724 = load i8*, i8** %dest.addr, align 8
  %arrayidx1330 = getelementptr inbounds i8, i8* %724, i64 %idxprom1329
  store i8 %conv1328, i8* %arrayidx1330, align 1
  br label %do.cond.1331

do.cond.1331:                                     ; preds = %cond.end.1326
  %725 = load i32, i32* %b, align 4
  %tobool1332 = icmp ne i32 %725, 0
  br i1 %tobool1332, label %do.body.1301, label %do.end.1333

do.end.1333:                                      ; preds = %do.cond.1331
  br label %if.end.1334

if.end.1334:                                      ; preds = %do.end.1333, %do.end.1292
  br label %if.end.1335

if.end.1335:                                      ; preds = %if.end.1334, %land.lhs.true.1262, %while.body.1226
  %726 = load i32, i32* %mode_affect.addr, align 4
  %tobool1336 = icmp ne i32 %726, 0
  br i1 %tobool1336, label %if.then.1337, label %if.else.1352

if.then.1337:                                     ; preds = %if.end.1335
  %727 = load i32, i32* %alpha, align 4
  %idxprom1338 = zext i32 %727 to i64
  %728 = load i32*, i32** %affect.addr, align 8
  %arrayidx1339 = getelementptr inbounds i32, i32* %728, i64 %idxprom1338
  %729 = load i32, i32* %arrayidx1339, align 4
  %tobool1340 = icmp ne i32 %729, 0
  br i1 %tobool1340, label %cond.true.1341, label %cond.false.1343

cond.true.1341:                                   ; preds = %if.then.1337
  %730 = load i8, i8* %new_alpha1242, align 1
  %conv1342 = zext i8 %730 to i32
  br label %cond.end.1347

cond.false.1343:                                  ; preds = %if.then.1337
  %731 = load i32, i32* %alpha, align 4
  %idxprom1344 = zext i32 %731 to i64
  %732 = load i8*, i8** %src1.addr, align 8
  %arrayidx1345 = getelementptr inbounds i8, i8* %732, i64 %idxprom1344
  %733 = load i8, i8* %arrayidx1345, align 1
  %conv1346 = zext i8 %733 to i32
  br label %cond.end.1347

cond.end.1347:                                    ; preds = %cond.false.1343, %cond.true.1341
  %cond1348 = phi i32 [ %conv1342, %cond.true.1341 ], [ %conv1346, %cond.false.1343 ]
  %conv1349 = trunc i32 %cond1348 to i8
  %734 = load i32, i32* %alpha, align 4
  %idxprom1350 = zext i32 %734 to i64
  %735 = load i8*, i8** %dest.addr, align 8
  %arrayidx1351 = getelementptr inbounds i8, i8* %735, i64 %idxprom1350
  store i8 %conv1349, i8* %arrayidx1351, align 1
  br label %if.end.1378

if.else.1352:                                     ; preds = %if.end.1335
  %736 = load i32, i32* %alpha, align 4
  %idxprom1353 = zext i32 %736 to i64
  %737 = load i8*, i8** %src1.addr, align 8
  %arrayidx1354 = getelementptr inbounds i8, i8* %737, i64 %idxprom1353
  %738 = load i8, i8* %arrayidx1354, align 1
  %conv1355 = zext i8 %738 to i32
  %tobool1356 = icmp ne i32 %conv1355, 0
  br i1 %tobool1356, label %cond.true.1357, label %cond.false.1361

cond.true.1357:                                   ; preds = %if.else.1352
  %739 = load i32, i32* %alpha, align 4
  %idxprom1358 = zext i32 %739 to i64
  %740 = load i8*, i8** %src1.addr, align 8
  %arrayidx1359 = getelementptr inbounds i8, i8* %740, i64 %idxprom1358
  %741 = load i8, i8* %arrayidx1359, align 1
  %conv1360 = zext i8 %741 to i32
  br label %cond.end.1373

cond.false.1361:                                  ; preds = %if.else.1352
  %742 = load i32, i32* %alpha, align 4
  %idxprom1362 = zext i32 %742 to i64
  %743 = load i32*, i32** %affect.addr, align 8
  %arrayidx1363 = getelementptr inbounds i32, i32* %743, i64 %idxprom1362
  %744 = load i32, i32* %arrayidx1363, align 4
  %tobool1364 = icmp ne i32 %744, 0
  br i1 %tobool1364, label %cond.true.1365, label %cond.false.1367

cond.true.1365:                                   ; preds = %cond.false.1361
  %745 = load i8, i8* %new_alpha1242, align 1
  %conv1366 = zext i8 %745 to i32
  br label %cond.end.1371

cond.false.1367:                                  ; preds = %cond.false.1361
  %746 = load i32, i32* %alpha, align 4
  %idxprom1368 = zext i32 %746 to i64
  %747 = load i8*, i8** %src1.addr, align 8
  %arrayidx1369 = getelementptr inbounds i8, i8* %747, i64 %idxprom1368
  %748 = load i8, i8* %arrayidx1369, align 1
  %conv1370 = zext i8 %748 to i32
  br label %cond.end.1371

cond.end.1371:                                    ; preds = %cond.false.1367, %cond.true.1365
  %cond1372 = phi i32 [ %conv1366, %cond.true.1365 ], [ %conv1370, %cond.false.1367 ]
  br label %cond.end.1373

cond.end.1373:                                    ; preds = %cond.end.1371, %cond.true.1357
  %cond1374 = phi i32 [ %conv1360, %cond.true.1357 ], [ %cond1372, %cond.end.1371 ]
  %conv1375 = trunc i32 %cond1374 to i8
  %749 = load i32, i32* %alpha, align 4
  %idxprom1376 = zext i32 %749 to i64
  %750 = load i8*, i8** %dest.addr, align 8
  %arrayidx1377 = getelementptr inbounds i8, i8* %750, i64 %idxprom1376
  store i8 %conv1375, i8* %arrayidx1377, align 1
  br label %if.end.1378

if.end.1378:                                      ; preds = %cond.end.1373, %cond.end.1347
  %751 = load i32, i32* %bytes.addr, align 4
  %752 = load i8*, i8** %src1.addr, align 8
  %idx.ext1379 = zext i32 %751 to i64
  %add.ptr1380 = getelementptr inbounds i8, i8* %752, i64 %idx.ext1379
  store i8* %add.ptr1380, i8** %src1.addr, align 8
  %753 = load i32, i32* %bytes.addr, align 4
  %754 = load i8*, i8** %src2.addr, align 8
  %idx.ext1381 = zext i32 %753 to i64
  %add.ptr1382 = getelementptr inbounds i8, i8* %754, i64 %idx.ext1381
  store i8* %add.ptr1382, i8** %src2.addr, align 8
  %755 = load i32, i32* %bytes.addr, align 4
  %756 = load i8*, i8** %dest.addr, align 8
  %idx.ext1383 = zext i32 %755 to i64
  %add.ptr1384 = getelementptr inbounds i8, i8* %756, i64 %idx.ext1383
  store i8* %add.ptr1384, i8** %dest.addr, align 8
  br label %while.cond.1223

while.end.1385:                                   ; preds = %while.cond.1223
  br label %if.end.1386

if.end.1386:                                      ; preds = %while.end.1385, %while.end.1221
  br label %if.end.1387

if.end.1387:                                      ; preds = %if.end.1386, %if.end.1062
  ret void
}

; Function Attrs: nounwind uwtable
define void @combine_inten_a_and_channel_mask_pixels(i8* %src, i8* %channel, i8* %dest, i8* %col, i32 %opacity, i32 %length, i32 %bytes) #0 {
entry:
  %src.addr = alloca i8*, align 8
  %channel.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %col.addr = alloca i8*, align 8
  %opacity.addr = alloca i32, align 4
  %length.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %alpha = alloca i32, align 4
  %t = alloca i64, align 8
  %channel_alpha = alloca i8, align 1
  %s = alloca i64, align 8
  %new_alpha = alloca i8, align 1
  %compl_alpha = alloca i8, align 1
  %b = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  store i8* %channel, i8** %channel.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %col, i8** %col.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %0 = load i32, i32* %bytes.addr, align 4
  %sub = sub i32 %0, 1
  store i32 %sub, i32* %alpha, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end.60, %entry
  %1 = load i32, i32* %length.addr, align 4
  %dec = add i32 %1, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %channel.addr, align 8
  %3 = load i8, i8* %2, align 1
  %conv = zext i8 %3 to i32
  %sub1 = sub nsw i32 255, %conv
  %4 = load i32, i32* %opacity.addr, align 4
  %mul = mul i32 %sub1, %4
  %add = add i32 %mul, 128
  %conv2 = zext i32 %add to i64
  store i64 %conv2, i64* %t, align 8
  %5 = load i64, i64* %t, align 8
  %shr = lshr i64 %5, 8
  %6 = load i64, i64* %t, align 8
  %add3 = add i64 %shr, %6
  %shr4 = lshr i64 %add3, 8
  %conv5 = trunc i64 %shr4 to i8
  store i8 %conv5, i8* %channel_alpha, align 1
  %7 = load i8, i8* %channel_alpha, align 1
  %tobool6 = icmp ne i8 %7, 0
  br i1 %tobool6, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %8 = load i32, i32* %alpha, align 4
  %idxprom = sext i32 %8 to i64
  %9 = load i8*, i8** %src.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %9, i64 %idxprom
  %10 = load i8, i8* %arrayidx, align 1
  %conv7 = zext i8 %10 to i64
  %11 = load i32, i32* %alpha, align 4
  %idxprom8 = sext i32 %11 to i64
  %12 = load i8*, i8** %src.addr, align 8
  %arrayidx9 = getelementptr inbounds i8, i8* %12, i64 %idxprom8
  %13 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %13 to i32
  %sub11 = sub nsw i32 255, %conv10
  %14 = load i8, i8* %channel_alpha, align 1
  %conv12 = zext i8 %14 to i32
  %mul13 = mul nsw i32 %sub11, %conv12
  %add14 = add nsw i32 %mul13, 128
  %conv15 = sext i32 %add14 to i64
  store i64 %conv15, i64* %t, align 8
  %15 = load i64, i64* %t, align 8
  %shr16 = lshr i64 %15, 8
  %16 = load i64, i64* %t, align 8
  %add17 = add i64 %shr16, %16
  %shr18 = lshr i64 %add17, 8
  %add19 = add i64 %conv7, %shr18
  %conv20 = trunc i64 %add19 to i8
  store i8 %conv20, i8* %new_alpha, align 1
  %17 = load i8, i8* %new_alpha, align 1
  %conv21 = zext i8 %17 to i32
  %cmp = icmp ne i32 %conv21, 255
  br i1 %cmp, label %if.then.23, label %if.end

if.then.23:                                       ; preds = %if.then
  %18 = load i8, i8* %channel_alpha, align 1
  %conv24 = zext i8 %18 to i32
  %mul25 = mul nsw i32 %conv24, 255
  %19 = load i8, i8* %new_alpha, align 1
  %conv26 = zext i8 %19 to i32
  %div = sdiv i32 %mul25, %conv26
  %conv27 = trunc i32 %div to i8
  store i8 %conv27, i8* %channel_alpha, align 1
  br label %if.end

if.end:                                           ; preds = %if.then.23, %if.then
  %20 = load i8, i8* %channel_alpha, align 1
  %conv28 = zext i8 %20 to i32
  %sub29 = sub nsw i32 255, %conv28
  %conv30 = trunc i32 %sub29 to i8
  store i8 %conv30, i8* %compl_alpha, align 1
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %21 = load i32, i32* %b, align 4
  %22 = load i32, i32* %alpha, align 4
  %cmp31 = icmp ult i32 %21, %22
  br i1 %cmp31, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %23 = load i32, i32* %b, align 4
  %idxprom33 = zext i32 %23 to i64
  %24 = load i8*, i8** %col.addr, align 8
  %arrayidx34 = getelementptr inbounds i8, i8* %24, i64 %idxprom33
  %25 = load i8, i8* %arrayidx34, align 1
  %conv35 = zext i8 %25 to i32
  %26 = load i8, i8* %channel_alpha, align 1
  %conv36 = zext i8 %26 to i32
  %mul37 = mul nsw i32 %conv35, %conv36
  %add38 = add nsw i32 %mul37, 128
  %conv39 = sext i32 %add38 to i64
  store i64 %conv39, i64* %t, align 8
  %27 = load i64, i64* %t, align 8
  %shr40 = lshr i64 %27, 8
  %28 = load i64, i64* %t, align 8
  %add41 = add i64 %shr40, %28
  %shr42 = lshr i64 %add41, 8
  %29 = load i32, i32* %b, align 4
  %idxprom43 = zext i32 %29 to i64
  %30 = load i8*, i8** %src.addr, align 8
  %arrayidx44 = getelementptr inbounds i8, i8* %30, i64 %idxprom43
  %31 = load i8, i8* %arrayidx44, align 1
  %conv45 = zext i8 %31 to i32
  %32 = load i8, i8* %compl_alpha, align 1
  %conv46 = zext i8 %32 to i32
  %mul47 = mul nsw i32 %conv45, %conv46
  %add48 = add nsw i32 %mul47, 128
  %conv49 = sext i32 %add48 to i64
  store i64 %conv49, i64* %s, align 8
  %33 = load i64, i64* %s, align 8
  %shr50 = lshr i64 %33, 8
  %34 = load i64, i64* %s, align 8
  %add51 = add i64 %shr50, %34
  %shr52 = lshr i64 %add51, 8
  %add53 = add i64 %shr42, %shr52
  %conv54 = trunc i64 %add53 to i8
  %35 = load i32, i32* %b, align 4
  %idxprom55 = zext i32 %35 to i64
  %36 = load i8*, i8** %dest.addr, align 8
  %arrayidx56 = getelementptr inbounds i8, i8* %36, i64 %idxprom55
  store i8 %conv54, i8* %arrayidx56, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %37 = load i32, i32* %b, align 4
  %inc = add i32 %37, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %38 = load i8, i8* %new_alpha, align 1
  %39 = load i32, i32* %b, align 4
  %idxprom57 = zext i32 %39 to i64
  %40 = load i8*, i8** %dest.addr, align 8
  %arrayidx58 = getelementptr inbounds i8, i8* %40, i64 %idxprom57
  store i8 %38, i8* %arrayidx58, align 1
  br label %if.end.60

if.else:                                          ; preds = %while.body
  %41 = load i8*, i8** %dest.addr, align 8
  %42 = load i8*, i8** %src.addr, align 8
  %43 = load i32, i32* %bytes.addr, align 4
  %conv59 = zext i32 %43 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %41, i8* %42, i64 %conv59, i32 1, i1 false)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else, %for.end
  %44 = load i32, i32* %bytes.addr, align 4
  %45 = load i8*, i8** %src.addr, align 8
  %idx.ext = zext i32 %44 to i64
  %add.ptr = getelementptr inbounds i8, i8* %45, i64 %idx.ext
  store i8* %add.ptr, i8** %src.addr, align 8
  %46 = load i32, i32* %bytes.addr, align 4
  %47 = load i8*, i8** %dest.addr, align 8
  %idx.ext61 = zext i32 %46 to i64
  %add.ptr62 = getelementptr inbounds i8, i8* %47, i64 %idx.ext61
  store i8* %add.ptr62, i8** %dest.addr, align 8
  %48 = load i8*, i8** %channel.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %48, i32 1
  store i8* %incdec.ptr, i8** %channel.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @combine_inten_a_and_channel_selection_pixels(i8* %src, i8* %channel, i8* %dest, i8* %col, i32 %opacity, i32 %length, i32 %bytes) #0 {
entry:
  %src.addr = alloca i8*, align 8
  %channel.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %col.addr = alloca i8*, align 8
  %opacity.addr = alloca i32, align 4
  %length.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %alpha = alloca i32, align 4
  %t = alloca i64, align 8
  %channel_alpha = alloca i8, align 1
  %s = alloca i64, align 8
  %new_alpha = alloca i8, align 1
  %compl_alpha = alloca i8, align 1
  %b = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  store i8* %channel, i8** %channel.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %col, i8** %col.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %0 = load i32, i32* %bytes.addr, align 4
  %sub = sub i32 %0, 1
  store i32 %sub, i32* %alpha, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end.59, %entry
  %1 = load i32, i32* %length.addr, align 4
  %dec = add i32 %1, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %channel.addr, align 8
  %3 = load i8, i8* %2, align 1
  %conv = zext i8 %3 to i32
  %4 = load i32, i32* %opacity.addr, align 4
  %mul = mul i32 %conv, %4
  %add = add i32 %mul, 128
  %conv1 = zext i32 %add to i64
  store i64 %conv1, i64* %t, align 8
  %5 = load i64, i64* %t, align 8
  %shr = lshr i64 %5, 8
  %6 = load i64, i64* %t, align 8
  %add2 = add i64 %shr, %6
  %shr3 = lshr i64 %add2, 8
  %conv4 = trunc i64 %shr3 to i8
  store i8 %conv4, i8* %channel_alpha, align 1
  %7 = load i8, i8* %channel_alpha, align 1
  %tobool5 = icmp ne i8 %7, 0
  br i1 %tobool5, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %8 = load i32, i32* %alpha, align 4
  %idxprom = sext i32 %8 to i64
  %9 = load i8*, i8** %src.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %9, i64 %idxprom
  %10 = load i8, i8* %arrayidx, align 1
  %conv6 = zext i8 %10 to i64
  %11 = load i32, i32* %alpha, align 4
  %idxprom7 = sext i32 %11 to i64
  %12 = load i8*, i8** %src.addr, align 8
  %arrayidx8 = getelementptr inbounds i8, i8* %12, i64 %idxprom7
  %13 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %13 to i32
  %sub10 = sub nsw i32 255, %conv9
  %14 = load i8, i8* %channel_alpha, align 1
  %conv11 = zext i8 %14 to i32
  %mul12 = mul nsw i32 %sub10, %conv11
  %add13 = add nsw i32 %mul12, 128
  %conv14 = sext i32 %add13 to i64
  store i64 %conv14, i64* %t, align 8
  %15 = load i64, i64* %t, align 8
  %shr15 = lshr i64 %15, 8
  %16 = load i64, i64* %t, align 8
  %add16 = add i64 %shr15, %16
  %shr17 = lshr i64 %add16, 8
  %add18 = add i64 %conv6, %shr17
  %conv19 = trunc i64 %add18 to i8
  store i8 %conv19, i8* %new_alpha, align 1
  %17 = load i8, i8* %new_alpha, align 1
  %conv20 = zext i8 %17 to i32
  %cmp = icmp ne i32 %conv20, 255
  br i1 %cmp, label %if.then.22, label %if.end

if.then.22:                                       ; preds = %if.then
  %18 = load i8, i8* %channel_alpha, align 1
  %conv23 = zext i8 %18 to i32
  %mul24 = mul nsw i32 %conv23, 255
  %19 = load i8, i8* %new_alpha, align 1
  %conv25 = zext i8 %19 to i32
  %div = sdiv i32 %mul24, %conv25
  %conv26 = trunc i32 %div to i8
  store i8 %conv26, i8* %channel_alpha, align 1
  br label %if.end

if.end:                                           ; preds = %if.then.22, %if.then
  %20 = load i8, i8* %channel_alpha, align 1
  %conv27 = zext i8 %20 to i32
  %sub28 = sub nsw i32 255, %conv27
  %conv29 = trunc i32 %sub28 to i8
  store i8 %conv29, i8* %compl_alpha, align 1
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %21 = load i32, i32* %b, align 4
  %22 = load i32, i32* %alpha, align 4
  %cmp30 = icmp ult i32 %21, %22
  br i1 %cmp30, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %23 = load i32, i32* %b, align 4
  %idxprom32 = zext i32 %23 to i64
  %24 = load i8*, i8** %col.addr, align 8
  %arrayidx33 = getelementptr inbounds i8, i8* %24, i64 %idxprom32
  %25 = load i8, i8* %arrayidx33, align 1
  %conv34 = zext i8 %25 to i32
  %26 = load i8, i8* %channel_alpha, align 1
  %conv35 = zext i8 %26 to i32
  %mul36 = mul nsw i32 %conv34, %conv35
  %add37 = add nsw i32 %mul36, 128
  %conv38 = sext i32 %add37 to i64
  store i64 %conv38, i64* %t, align 8
  %27 = load i64, i64* %t, align 8
  %shr39 = lshr i64 %27, 8
  %28 = load i64, i64* %t, align 8
  %add40 = add i64 %shr39, %28
  %shr41 = lshr i64 %add40, 8
  %29 = load i32, i32* %b, align 4
  %idxprom42 = zext i32 %29 to i64
  %30 = load i8*, i8** %src.addr, align 8
  %arrayidx43 = getelementptr inbounds i8, i8* %30, i64 %idxprom42
  %31 = load i8, i8* %arrayidx43, align 1
  %conv44 = zext i8 %31 to i32
  %32 = load i8, i8* %compl_alpha, align 1
  %conv45 = zext i8 %32 to i32
  %mul46 = mul nsw i32 %conv44, %conv45
  %add47 = add nsw i32 %mul46, 128
  %conv48 = sext i32 %add47 to i64
  store i64 %conv48, i64* %s, align 8
  %33 = load i64, i64* %s, align 8
  %shr49 = lshr i64 %33, 8
  %34 = load i64, i64* %s, align 8
  %add50 = add i64 %shr49, %34
  %shr51 = lshr i64 %add50, 8
  %add52 = add i64 %shr41, %shr51
  %conv53 = trunc i64 %add52 to i8
  %35 = load i32, i32* %b, align 4
  %idxprom54 = zext i32 %35 to i64
  %36 = load i8*, i8** %dest.addr, align 8
  %arrayidx55 = getelementptr inbounds i8, i8* %36, i64 %idxprom54
  store i8 %conv53, i8* %arrayidx55, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %37 = load i32, i32* %b, align 4
  %inc = add i32 %37, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %38 = load i8, i8* %new_alpha, align 1
  %39 = load i32, i32* %b, align 4
  %idxprom56 = zext i32 %39 to i64
  %40 = load i8*, i8** %dest.addr, align 8
  %arrayidx57 = getelementptr inbounds i8, i8* %40, i64 %idxprom56
  store i8 %38, i8* %arrayidx57, align 1
  br label %if.end.59

if.else:                                          ; preds = %while.body
  %41 = load i8*, i8** %dest.addr, align 8
  %42 = load i8*, i8** %src.addr, align 8
  %43 = load i32, i32* %bytes.addr, align 4
  %conv58 = zext i32 %43 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %41, i8* %42, i64 %conv58, i32 1, i1 false)
  br label %if.end.59

if.end.59:                                        ; preds = %if.else, %for.end
  %44 = load i32, i32* %bytes.addr, align 4
  %45 = load i8*, i8** %src.addr, align 8
  %idx.ext = zext i32 %44 to i64
  %add.ptr = getelementptr inbounds i8, i8* %45, i64 %idx.ext
  store i8* %add.ptr, i8** %src.addr, align 8
  %46 = load i32, i32* %bytes.addr, align 4
  %47 = load i8*, i8** %dest.addr, align 8
  %idx.ext60 = zext i32 %46 to i64
  %add.ptr61 = getelementptr inbounds i8, i8* %47, i64 %idx.ext60
  store i8* %add.ptr61, i8** %dest.addr, align 8
  %48 = load i8*, i8** %channel.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %48, i32 1
  store i8* %incdec.ptr, i8** %channel.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @paint_funcs_color_erase_helper(%struct._GimpRGB* %src, %struct._GimpRGB* %color) #0 {
entry:
  %src.addr = alloca %struct._GimpRGB*, align 8
  %color.addr = alloca %struct._GimpRGB*, align 8
  %alpha = alloca %struct._GimpRGB, align 8
  store %struct._GimpRGB* %src, %struct._GimpRGB** %src.addr, align 8
  store %struct._GimpRGB* %color, %struct._GimpRGB** %color.addr, align 8
  %0 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %a = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %0, i32 0, i32 3
  %1 = load double, double* %a, align 8
  %a1 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %alpha, i32 0, i32 3
  store double %1, double* %a1, align 8
  %2 = load %struct._GimpRGB*, %struct._GimpRGB** %color.addr, align 8
  %r = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %2, i32 0, i32 0
  %3 = load double, double* %r, align 8
  %cmp = fcmp olt double %3, 1.000000e-04
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %r2 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %4, i32 0, i32 0
  %5 = load double, double* %r2, align 8
  %r3 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %alpha, i32 0, i32 0
  store double %5, double* %r3, align 8
  br label %if.end.27

if.else:                                          ; preds = %entry
  %6 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %r4 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %6, i32 0, i32 0
  %7 = load double, double* %r4, align 8
  %8 = load %struct._GimpRGB*, %struct._GimpRGB** %color.addr, align 8
  %r5 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %8, i32 0, i32 0
  %9 = load double, double* %r5, align 8
  %cmp6 = fcmp ogt double %7, %9
  br i1 %cmp6, label %if.then.7, label %if.else.13

if.then.7:                                        ; preds = %if.else
  %10 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %r8 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %10, i32 0, i32 0
  %11 = load double, double* %r8, align 8
  %12 = load %struct._GimpRGB*, %struct._GimpRGB** %color.addr, align 8
  %r9 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %12, i32 0, i32 0
  %13 = load double, double* %r9, align 8
  %sub = fsub double %11, %13
  %14 = load %struct._GimpRGB*, %struct._GimpRGB** %color.addr, align 8
  %r10 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %14, i32 0, i32 0
  %15 = load double, double* %r10, align 8
  %sub11 = fsub double 1.000000e+00, %15
  %div = fdiv double %sub, %sub11
  %r12 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %alpha, i32 0, i32 0
  store double %div, double* %r12, align 8
  br label %if.end.26

if.else.13:                                       ; preds = %if.else
  %16 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %r14 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %16, i32 0, i32 0
  %17 = load double, double* %r14, align 8
  %18 = load %struct._GimpRGB*, %struct._GimpRGB** %color.addr, align 8
  %r15 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %18, i32 0, i32 0
  %19 = load double, double* %r15, align 8
  %cmp16 = fcmp olt double %17, %19
  br i1 %cmp16, label %if.then.17, label %if.else.24

if.then.17:                                       ; preds = %if.else.13
  %20 = load %struct._GimpRGB*, %struct._GimpRGB** %color.addr, align 8
  %r18 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %20, i32 0, i32 0
  %21 = load double, double* %r18, align 8
  %22 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %r19 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %22, i32 0, i32 0
  %23 = load double, double* %r19, align 8
  %sub20 = fsub double %21, %23
  %24 = load %struct._GimpRGB*, %struct._GimpRGB** %color.addr, align 8
  %r21 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %24, i32 0, i32 0
  %25 = load double, double* %r21, align 8
  %div22 = fdiv double %sub20, %25
  %r23 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %alpha, i32 0, i32 0
  store double %div22, double* %r23, align 8
  br label %if.end

if.else.24:                                       ; preds = %if.else.13
  %r25 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %alpha, i32 0, i32 0
  store double 0.000000e+00, double* %r25, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.24, %if.then.17
  br label %if.end.26

if.end.26:                                        ; preds = %if.end, %if.then.7
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.26, %if.then
  %26 = load %struct._GimpRGB*, %struct._GimpRGB** %color.addr, align 8
  %g = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %26, i32 0, i32 1
  %27 = load double, double* %g, align 8
  %cmp28 = fcmp olt double %27, 1.000000e-04
  br i1 %cmp28, label %if.then.29, label %if.else.32

if.then.29:                                       ; preds = %if.end.27
  %28 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %g30 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %28, i32 0, i32 1
  %29 = load double, double* %g30, align 8
  %g31 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %alpha, i32 0, i32 1
  store double %29, double* %g31, align 8
  br label %if.end.59

if.else.32:                                       ; preds = %if.end.27
  %30 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %g33 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %30, i32 0, i32 1
  %31 = load double, double* %g33, align 8
  %32 = load %struct._GimpRGB*, %struct._GimpRGB** %color.addr, align 8
  %g34 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %32, i32 0, i32 1
  %33 = load double, double* %g34, align 8
  %cmp35 = fcmp ogt double %31, %33
  br i1 %cmp35, label %if.then.36, label %if.else.44

if.then.36:                                       ; preds = %if.else.32
  %34 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %g37 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %34, i32 0, i32 1
  %35 = load double, double* %g37, align 8
  %36 = load %struct._GimpRGB*, %struct._GimpRGB** %color.addr, align 8
  %g38 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %36, i32 0, i32 1
  %37 = load double, double* %g38, align 8
  %sub39 = fsub double %35, %37
  %38 = load %struct._GimpRGB*, %struct._GimpRGB** %color.addr, align 8
  %g40 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %38, i32 0, i32 1
  %39 = load double, double* %g40, align 8
  %sub41 = fsub double 1.000000e+00, %39
  %div42 = fdiv double %sub39, %sub41
  %g43 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %alpha, i32 0, i32 1
  store double %div42, double* %g43, align 8
  br label %if.end.58

if.else.44:                                       ; preds = %if.else.32
  %40 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %g45 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %40, i32 0, i32 1
  %41 = load double, double* %g45, align 8
  %42 = load %struct._GimpRGB*, %struct._GimpRGB** %color.addr, align 8
  %g46 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %42, i32 0, i32 1
  %43 = load double, double* %g46, align 8
  %cmp47 = fcmp olt double %41, %43
  br i1 %cmp47, label %if.then.48, label %if.else.55

if.then.48:                                       ; preds = %if.else.44
  %44 = load %struct._GimpRGB*, %struct._GimpRGB** %color.addr, align 8
  %g49 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %44, i32 0, i32 1
  %45 = load double, double* %g49, align 8
  %46 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %g50 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %46, i32 0, i32 1
  %47 = load double, double* %g50, align 8
  %sub51 = fsub double %45, %47
  %48 = load %struct._GimpRGB*, %struct._GimpRGB** %color.addr, align 8
  %g52 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %48, i32 0, i32 1
  %49 = load double, double* %g52, align 8
  %div53 = fdiv double %sub51, %49
  %g54 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %alpha, i32 0, i32 1
  store double %div53, double* %g54, align 8
  br label %if.end.57

if.else.55:                                       ; preds = %if.else.44
  %g56 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %alpha, i32 0, i32 1
  store double 0.000000e+00, double* %g56, align 8
  br label %if.end.57

if.end.57:                                        ; preds = %if.else.55, %if.then.48
  br label %if.end.58

if.end.58:                                        ; preds = %if.end.57, %if.then.36
  br label %if.end.59

if.end.59:                                        ; preds = %if.end.58, %if.then.29
  %50 = load %struct._GimpRGB*, %struct._GimpRGB** %color.addr, align 8
  %b = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %50, i32 0, i32 2
  %51 = load double, double* %b, align 8
  %cmp60 = fcmp olt double %51, 1.000000e-04
  br i1 %cmp60, label %if.then.61, label %if.else.64

if.then.61:                                       ; preds = %if.end.59
  %52 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %b62 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %52, i32 0, i32 2
  %53 = load double, double* %b62, align 8
  %b63 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %alpha, i32 0, i32 2
  store double %53, double* %b63, align 8
  br label %if.end.91

if.else.64:                                       ; preds = %if.end.59
  %54 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %b65 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %54, i32 0, i32 2
  %55 = load double, double* %b65, align 8
  %56 = load %struct._GimpRGB*, %struct._GimpRGB** %color.addr, align 8
  %b66 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %56, i32 0, i32 2
  %57 = load double, double* %b66, align 8
  %cmp67 = fcmp ogt double %55, %57
  br i1 %cmp67, label %if.then.68, label %if.else.76

if.then.68:                                       ; preds = %if.else.64
  %58 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %b69 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %58, i32 0, i32 2
  %59 = load double, double* %b69, align 8
  %60 = load %struct._GimpRGB*, %struct._GimpRGB** %color.addr, align 8
  %b70 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %60, i32 0, i32 2
  %61 = load double, double* %b70, align 8
  %sub71 = fsub double %59, %61
  %62 = load %struct._GimpRGB*, %struct._GimpRGB** %color.addr, align 8
  %b72 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %62, i32 0, i32 2
  %63 = load double, double* %b72, align 8
  %sub73 = fsub double 1.000000e+00, %63
  %div74 = fdiv double %sub71, %sub73
  %b75 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %alpha, i32 0, i32 2
  store double %div74, double* %b75, align 8
  br label %if.end.90

if.else.76:                                       ; preds = %if.else.64
  %64 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %b77 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %64, i32 0, i32 2
  %65 = load double, double* %b77, align 8
  %66 = load %struct._GimpRGB*, %struct._GimpRGB** %color.addr, align 8
  %b78 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %66, i32 0, i32 2
  %67 = load double, double* %b78, align 8
  %cmp79 = fcmp olt double %65, %67
  br i1 %cmp79, label %if.then.80, label %if.else.87

if.then.80:                                       ; preds = %if.else.76
  %68 = load %struct._GimpRGB*, %struct._GimpRGB** %color.addr, align 8
  %b81 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %68, i32 0, i32 2
  %69 = load double, double* %b81, align 8
  %70 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %b82 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %70, i32 0, i32 2
  %71 = load double, double* %b82, align 8
  %sub83 = fsub double %69, %71
  %72 = load %struct._GimpRGB*, %struct._GimpRGB** %color.addr, align 8
  %b84 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %72, i32 0, i32 2
  %73 = load double, double* %b84, align 8
  %div85 = fdiv double %sub83, %73
  %b86 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %alpha, i32 0, i32 2
  store double %div85, double* %b86, align 8
  br label %if.end.89

if.else.87:                                       ; preds = %if.else.76
  %b88 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %alpha, i32 0, i32 2
  store double 0.000000e+00, double* %b88, align 8
  br label %if.end.89

if.end.89:                                        ; preds = %if.else.87, %if.then.80
  br label %if.end.90

if.end.90:                                        ; preds = %if.end.89, %if.then.68
  br label %if.end.91

if.end.91:                                        ; preds = %if.end.90, %if.then.61
  %r92 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %alpha, i32 0, i32 0
  %74 = load double, double* %r92, align 8
  %g93 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %alpha, i32 0, i32 1
  %75 = load double, double* %g93, align 8
  %cmp94 = fcmp ogt double %74, %75
  br i1 %cmp94, label %if.then.95, label %if.else.106

if.then.95:                                       ; preds = %if.end.91
  %r96 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %alpha, i32 0, i32 0
  %76 = load double, double* %r96, align 8
  %b97 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %alpha, i32 0, i32 2
  %77 = load double, double* %b97, align 8
  %cmp98 = fcmp ogt double %76, %77
  br i1 %cmp98, label %if.then.99, label %if.else.102

if.then.99:                                       ; preds = %if.then.95
  %r100 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %alpha, i32 0, i32 0
  %78 = load double, double* %r100, align 8
  %79 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %a101 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %79, i32 0, i32 3
  store double %78, double* %a101, align 8
  br label %if.end.105

if.else.102:                                      ; preds = %if.then.95
  %b103 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %alpha, i32 0, i32 2
  %80 = load double, double* %b103, align 8
  %81 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %a104 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %81, i32 0, i32 3
  store double %80, double* %a104, align 8
  br label %if.end.105

if.end.105:                                       ; preds = %if.else.102, %if.then.99
  br label %if.end.117

if.else.106:                                      ; preds = %if.end.91
  %g107 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %alpha, i32 0, i32 1
  %82 = load double, double* %g107, align 8
  %b108 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %alpha, i32 0, i32 2
  %83 = load double, double* %b108, align 8
  %cmp109 = fcmp ogt double %82, %83
  br i1 %cmp109, label %if.then.110, label %if.else.113

if.then.110:                                      ; preds = %if.else.106
  %g111 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %alpha, i32 0, i32 1
  %84 = load double, double* %g111, align 8
  %85 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %a112 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %85, i32 0, i32 3
  store double %84, double* %a112, align 8
  br label %if.end.116

if.else.113:                                      ; preds = %if.else.106
  %b114 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %alpha, i32 0, i32 2
  %86 = load double, double* %b114, align 8
  %87 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %a115 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %87, i32 0, i32 3
  store double %86, double* %a115, align 8
  br label %if.end.116

if.end.116:                                       ; preds = %if.else.113, %if.then.110
  br label %if.end.117

if.end.117:                                       ; preds = %if.end.116, %if.end.105
  %88 = load %struct._GimpRGB*, %struct._GimpRGB** %color.addr, align 8
  %a118 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %88, i32 0, i32 3
  %89 = load double, double* %a118, align 8
  %sub119 = fsub double 1.000000e+00, %89
  %90 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %a120 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %90, i32 0, i32 3
  %91 = load double, double* %a120, align 8
  %92 = load %struct._GimpRGB*, %struct._GimpRGB** %color.addr, align 8
  %a121 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %92, i32 0, i32 3
  %93 = load double, double* %a121, align 8
  %mul = fmul double %91, %93
  %add = fadd double %sub119, %mul
  %94 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %a122 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %94, i32 0, i32 3
  store double %add, double* %a122, align 8
  %95 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %a123 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %95, i32 0, i32 3
  %96 = load double, double* %a123, align 8
  %cmp124 = fcmp olt double %96, 1.000000e-04
  br i1 %cmp124, label %if.then.125, label %if.end.126

if.then.125:                                      ; preds = %if.end.117
  br label %return

if.end.126:                                       ; preds = %if.end.117
  %97 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %r127 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %97, i32 0, i32 0
  %98 = load double, double* %r127, align 8
  %99 = load %struct._GimpRGB*, %struct._GimpRGB** %color.addr, align 8
  %r128 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %99, i32 0, i32 0
  %100 = load double, double* %r128, align 8
  %sub129 = fsub double %98, %100
  %101 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %a130 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %101, i32 0, i32 3
  %102 = load double, double* %a130, align 8
  %div131 = fdiv double %sub129, %102
  %103 = load %struct._GimpRGB*, %struct._GimpRGB** %color.addr, align 8
  %r132 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %103, i32 0, i32 0
  %104 = load double, double* %r132, align 8
  %add133 = fadd double %div131, %104
  %105 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %r134 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %105, i32 0, i32 0
  store double %add133, double* %r134, align 8
  %106 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %g135 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %106, i32 0, i32 1
  %107 = load double, double* %g135, align 8
  %108 = load %struct._GimpRGB*, %struct._GimpRGB** %color.addr, align 8
  %g136 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %108, i32 0, i32 1
  %109 = load double, double* %g136, align 8
  %sub137 = fsub double %107, %109
  %110 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %a138 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %110, i32 0, i32 3
  %111 = load double, double* %a138, align 8
  %div139 = fdiv double %sub137, %111
  %112 = load %struct._GimpRGB*, %struct._GimpRGB** %color.addr, align 8
  %g140 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %112, i32 0, i32 1
  %113 = load double, double* %g140, align 8
  %add141 = fadd double %div139, %113
  %114 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %g142 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %114, i32 0, i32 1
  store double %add141, double* %g142, align 8
  %115 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %b143 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %115, i32 0, i32 2
  %116 = load double, double* %b143, align 8
  %117 = load %struct._GimpRGB*, %struct._GimpRGB** %color.addr, align 8
  %b144 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %117, i32 0, i32 2
  %118 = load double, double* %b144, align 8
  %sub145 = fsub double %116, %118
  %119 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %a146 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %119, i32 0, i32 3
  %120 = load double, double* %a146, align 8
  %div147 = fdiv double %sub145, %120
  %121 = load %struct._GimpRGB*, %struct._GimpRGB** %color.addr, align 8
  %b148 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %121, i32 0, i32 2
  %122 = load double, double* %b148, align 8
  %add149 = fadd double %div147, %122
  %123 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %b150 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %123, i32 0, i32 2
  store double %add149, double* %b150, align 8
  %a151 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %alpha, i32 0, i32 3
  %124 = load double, double* %a151, align 8
  %125 = load %struct._GimpRGB*, %struct._GimpRGB** %src.addr, align 8
  %a152 = getelementptr inbounds %struct._GimpRGB, %struct._GimpRGB* %125, i32 0, i32 3
  %126 = load double, double* %a152, align 8
  %mul153 = fmul double %126, %124
  store double %mul153, double* %a152, align 8
  br label %return

return:                                           ; preds = %if.end.126, %if.then.125
  ret void
}

; Function Attrs: nounwind uwtable
define void @extract_from_inten_pixels(i8* %src, i8* %dest, i8* %mask, i8* %bg, i32 %cut, i32 %length, i32 %src_bytes, i32 %dest_bytes) #0 {
entry:
  %src.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %bg.addr = alloca i8*, align 8
  %cut.addr = alloca i32, align 4
  %length.addr = alloca i32, align 4
  %src_bytes.addr = alloca i32, align 4
  %dest_bytes.addr = alloca i32, align 4
  %alpha = alloca i32, align 4
  %m = alloca i8*, align 8
  %b = alloca i32, align 4
  %tmp = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store i8* %bg, i8** %bg.addr, align 8
  store i32 %cut, i32* %cut.addr, align 4
  store i32 %length, i32* %length.addr, align 4
  store i32 %src_bytes, i32* %src_bytes.addr, align 4
  store i32 %dest_bytes, i32* %dest_bytes.addr, align 4
  %0 = load i32, i32* %src_bytes.addr, align 4
  %neg = xor i32 %0, -1
  %and = and i32 %neg, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %src_bytes.addr, align 4
  %sub = sub i32 %1, 1
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load i32, i32* %src_bytes.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ %2, %cond.false ]
  store i32 %cond, i32* %alpha, align 4
  %3 = load i8*, i8** %mask.addr, align 8
  %tobool1 = icmp ne i8* %3, null
  br i1 %tobool1, label %cond.true.2, label %cond.false.3

cond.true.2:                                      ; preds = %cond.end
  %4 = load i8*, i8** %mask.addr, align 8
  br label %cond.end.4

cond.false.3:                                     ; preds = %cond.end
  br label %cond.end.4

cond.end.4:                                       ; preds = %cond.false.3, %cond.true.2
  %cond5 = phi i8* [ %4, %cond.true.2 ], [ @no_mask, %cond.false.3 ]
  store i8* %cond5, i8** %m, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.75, %cond.end.4
  %5 = load i32, i32* %length.addr, align 4
  %dec = add i32 %5, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool6 = icmp ne i32 %5, 0
  br i1 %tobool6, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %6 = load i32, i32* %b, align 4
  %7 = load i32, i32* %alpha, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i32, i32* %b, align 4
  %idxprom = sext i32 %8 to i64
  %9 = load i8*, i8** %src.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %9, i64 %idxprom
  %10 = load i8, i8* %arrayidx, align 1
  %11 = load i32, i32* %b, align 4
  %idxprom7 = sext i32 %11 to i64
  %12 = load i8*, i8** %dest.addr, align 8
  %arrayidx8 = getelementptr inbounds i8, i8* %12, i64 %idxprom7
  store i8 %10, i8* %arrayidx8, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %13 = load i32, i32* %b, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %14 = load i32, i32* %src_bytes.addr, align 4
  %neg9 = xor i32 %14, -1
  %and10 = and i32 %neg9, 1
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %if.then, label %if.else

if.then:                                          ; preds = %for.end
  %15 = load i8*, i8** %m, align 8
  %16 = load i8, i8* %15, align 1
  %conv = zext i8 %16 to i32
  %17 = load i32, i32* %alpha, align 4
  %idxprom12 = sext i32 %17 to i64
  %18 = load i8*, i8** %src.addr, align 8
  %arrayidx13 = getelementptr inbounds i8, i8* %18, i64 %idxprom12
  %19 = load i8, i8* %arrayidx13, align 1
  %conv14 = zext i8 %19 to i32
  %mul = mul nsw i32 %conv, %conv14
  %add = add nsw i32 %mul, 128
  store i32 %add, i32* %tmp, align 4
  %20 = load i32, i32* %tmp, align 4
  %shr = ashr i32 %20, 8
  %21 = load i32, i32* %tmp, align 4
  %add15 = add nsw i32 %shr, %21
  %shr16 = ashr i32 %add15, 8
  %conv17 = trunc i32 %shr16 to i8
  %22 = load i32, i32* %alpha, align 4
  %idxprom18 = sext i32 %22 to i64
  %23 = load i8*, i8** %dest.addr, align 8
  %arrayidx19 = getelementptr inbounds i8, i8* %23, i64 %idxprom18
  store i8 %conv17, i8* %arrayidx19, align 1
  %24 = load i32, i32* %cut.addr, align 4
  %tobool20 = icmp ne i32 %24, 0
  br i1 %tobool20, label %if.then.21, label %if.end

if.then.21:                                       ; preds = %if.then
  %25 = load i8*, i8** %m, align 8
  %26 = load i8, i8* %25, align 1
  %conv22 = zext i8 %26 to i32
  %sub23 = sub nsw i32 255, %conv22
  %27 = load i32, i32* %alpha, align 4
  %idxprom24 = sext i32 %27 to i64
  %28 = load i8*, i8** %src.addr, align 8
  %arrayidx25 = getelementptr inbounds i8, i8* %28, i64 %idxprom24
  %29 = load i8, i8* %arrayidx25, align 1
  %conv26 = zext i8 %29 to i32
  %mul27 = mul nsw i32 %sub23, %conv26
  %add28 = add nsw i32 %mul27, 128
  store i32 %add28, i32* %tmp, align 4
  %30 = load i32, i32* %tmp, align 4
  %shr29 = ashr i32 %30, 8
  %31 = load i32, i32* %tmp, align 4
  %add30 = add nsw i32 %shr29, %31
  %shr31 = ashr i32 %add30, 8
  %conv32 = trunc i32 %shr31 to i8
  %32 = load i32, i32* %alpha, align 4
  %idxprom33 = sext i32 %32 to i64
  %33 = load i8*, i8** %src.addr, align 8
  %arrayidx34 = getelementptr inbounds i8, i8* %33, i64 %idxprom33
  store i8 %conv32, i8* %arrayidx34, align 1
  br label %if.end

if.end:                                           ; preds = %if.then.21, %if.then
  br label %if.end.72

if.else:                                          ; preds = %for.end
  %34 = load i32, i32* %dest_bytes.addr, align 4
  %neg35 = xor i32 %34, -1
  %and36 = and i32 %neg35, 1
  %tobool37 = icmp ne i32 %and36, 0
  br i1 %tobool37, label %if.then.38, label %if.end.41

if.then.38:                                       ; preds = %if.else
  %35 = load i8*, i8** %m, align 8
  %36 = load i8, i8* %35, align 1
  %37 = load i32, i32* %alpha, align 4
  %idxprom39 = sext i32 %37 to i64
  %38 = load i8*, i8** %dest.addr, align 8
  %arrayidx40 = getelementptr inbounds i8, i8* %38, i64 %idxprom39
  store i8 %36, i8* %arrayidx40, align 1
  br label %if.end.41

if.end.41:                                        ; preds = %if.then.38, %if.else
  %39 = load i32, i32* %cut.addr, align 4
  %tobool42 = icmp ne i32 %39, 0
  br i1 %tobool42, label %if.then.43, label %if.end.71

if.then.43:                                       ; preds = %if.end.41
  store i32 0, i32* %b, align 4
  br label %for.cond.44

for.cond.44:                                      ; preds = %for.inc.68, %if.then.43
  %40 = load i32, i32* %b, align 4
  %41 = load i32, i32* %src_bytes.addr, align 4
  %cmp45 = icmp ult i32 %40, %41
  br i1 %cmp45, label %for.body.47, label %for.end.70

for.body.47:                                      ; preds = %for.cond.44
  %42 = load i32, i32* %b, align 4
  %idxprom48 = sext i32 %42 to i64
  %43 = load i8*, i8** %bg.addr, align 8
  %arrayidx49 = getelementptr inbounds i8, i8* %43, i64 %idxprom48
  %44 = load i8, i8* %arrayidx49, align 1
  %conv50 = zext i8 %44 to i32
  %45 = load i32, i32* %b, align 4
  %idxprom51 = sext i32 %45 to i64
  %46 = load i8*, i8** %src.addr, align 8
  %arrayidx52 = getelementptr inbounds i8, i8* %46, i64 %idxprom51
  %47 = load i8, i8* %arrayidx52, align 1
  %conv53 = zext i8 %47 to i32
  %sub54 = sub nsw i32 %conv50, %conv53
  %48 = load i8*, i8** %m, align 8
  %49 = load i8, i8* %48, align 1
  %conv55 = zext i8 %49 to i32
  %mul56 = mul nsw i32 %sub54, %conv55
  %add57 = add nsw i32 %mul56, 128
  store i32 %add57, i32* %tmp, align 4
  %50 = load i32, i32* %tmp, align 4
  %shr58 = ashr i32 %50, 8
  %51 = load i32, i32* %tmp, align 4
  %add59 = add nsw i32 %shr58, %51
  %shr60 = ashr i32 %add59, 8
  %52 = load i32, i32* %b, align 4
  %idxprom61 = sext i32 %52 to i64
  %53 = load i8*, i8** %src.addr, align 8
  %arrayidx62 = getelementptr inbounds i8, i8* %53, i64 %idxprom61
  %54 = load i8, i8* %arrayidx62, align 1
  %conv63 = zext i8 %54 to i32
  %add64 = add nsw i32 %shr60, %conv63
  %conv65 = trunc i32 %add64 to i8
  %55 = load i32, i32* %b, align 4
  %idxprom66 = sext i32 %55 to i64
  %56 = load i8*, i8** %src.addr, align 8
  %arrayidx67 = getelementptr inbounds i8, i8* %56, i64 %idxprom66
  store i8 %conv65, i8* %arrayidx67, align 1
  br label %for.inc.68

for.inc.68:                                       ; preds = %for.body.47
  %57 = load i32, i32* %b, align 4
  %inc69 = add nsw i32 %57, 1
  store i32 %inc69, i32* %b, align 4
  br label %for.cond.44

for.end.70:                                       ; preds = %for.cond.44
  br label %if.end.71

if.end.71:                                        ; preds = %for.end.70, %if.end.41
  br label %if.end.72

if.end.72:                                        ; preds = %if.end.71, %if.end
  %58 = load i8*, i8** %mask.addr, align 8
  %tobool73 = icmp ne i8* %58, null
  br i1 %tobool73, label %if.then.74, label %if.end.75

if.then.74:                                       ; preds = %if.end.72
  %59 = load i8*, i8** %m, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %59, i32 1
  store i8* %incdec.ptr, i8** %m, align 8
  br label %if.end.75

if.end.75:                                        ; preds = %if.then.74, %if.end.72
  %60 = load i32, i32* %src_bytes.addr, align 4
  %61 = load i8*, i8** %src.addr, align 8
  %idx.ext = zext i32 %60 to i64
  %add.ptr = getelementptr inbounds i8, i8* %61, i64 %idx.ext
  store i8* %add.ptr, i8** %src.addr, align 8
  %62 = load i32, i32* %dest_bytes.addr, align 4
  %63 = load i8*, i8** %dest.addr, align 8
  %idx.ext76 = zext i32 %62 to i64
  %add.ptr77 = getelementptr inbounds i8, i8* %63, i64 %idx.ext76
  store i8* %add.ptr77, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @extract_from_indexed_pixels(i8* %src, i8* %dest, i8* %mask, i8* %cmap, i8* %bg, i32 %cut, i32 %length, i32 %src_bytes, i32 %dest_bytes) #0 {
entry:
  %src.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %cmap.addr = alloca i8*, align 8
  %bg.addr = alloca i8*, align 8
  %cut.addr = alloca i32, align 4
  %length.addr = alloca i32, align 4
  %src_bytes.addr = alloca i32, align 4
  %dest_bytes.addr = alloca i32, align 4
  %m = alloca i8*, align 8
  %b = alloca i32, align 4
  %t = alloca i32, align 4
  %index = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store i8* %cmap, i8** %cmap.addr, align 8
  store i8* %bg, i8** %bg.addr, align 8
  store i32 %cut, i32* %cut.addr, align 4
  store i32 %length, i32* %length.addr, align 4
  store i32 %src_bytes, i32* %src_bytes.addr, align 4
  store i32 %dest_bytes, i32* %dest_bytes.addr, align 4
  %0 = load i8*, i8** %mask.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i8*, i8** %mask.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %1, %cond.true ], [ @no_mask, %cond.false ]
  store i8* %cond, i8** %m, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.53, %cond.end
  %2 = load i32, i32* %length.addr, align 4
  %dec = add i32 %2, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool1 = icmp ne i32 %2, 0
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %src.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 0
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %mul = mul nsw i32 %conv, 3
  store i32 %mul, i32* %index, align 4
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %5 = load i32, i32* %b, align 4
  %cmp = icmp slt i32 %5, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %index, align 4
  %7 = load i32, i32* %b, align 4
  %add = add nsw i32 %6, %7
  %idxprom = sext i32 %add to i64
  %8 = load i8*, i8** %cmap.addr, align 8
  %arrayidx3 = getelementptr inbounds i8, i8* %8, i64 %idxprom
  %9 = load i8, i8* %arrayidx3, align 1
  %10 = load i32, i32* %b, align 4
  %idxprom4 = sext i32 %10 to i64
  %11 = load i8*, i8** %dest.addr, align 8
  %arrayidx5 = getelementptr inbounds i8, i8* %11, i64 %idxprom4
  store i8 %9, i8* %arrayidx5, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %b, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load i32, i32* %src_bytes.addr, align 4
  %neg = xor i32 %13, -1
  %and = and i32 %neg, 1
  %tobool6 = icmp ne i32 %and, 0
  br i1 %tobool6, label %if.then, label %if.else

if.then:                                          ; preds = %for.end
  %14 = load i8*, i8** %m, align 8
  %15 = load i8, i8* %14, align 1
  %conv7 = zext i8 %15 to i32
  %16 = load i8*, i8** %src.addr, align 8
  %arrayidx8 = getelementptr inbounds i8, i8* %16, i64 1
  %17 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %17 to i32
  %mul10 = mul nsw i32 %conv7, %conv9
  %add11 = add nsw i32 %mul10, 128
  store i32 %add11, i32* %t, align 4
  %18 = load i32, i32* %t, align 4
  %shr = ashr i32 %18, 8
  %19 = load i32, i32* %t, align 4
  %add12 = add nsw i32 %shr, %19
  %shr13 = ashr i32 %add12, 8
  %conv14 = trunc i32 %shr13 to i8
  %20 = load i8*, i8** %dest.addr, align 8
  %arrayidx15 = getelementptr inbounds i8, i8* %20, i64 3
  store i8 %conv14, i8* %arrayidx15, align 1
  %21 = load i32, i32* %cut.addr, align 4
  %tobool16 = icmp ne i32 %21, 0
  br i1 %tobool16, label %if.then.17, label %if.end

if.then.17:                                       ; preds = %if.then
  %22 = load i8*, i8** %m, align 8
  %23 = load i8, i8* %22, align 1
  %conv18 = zext i8 %23 to i32
  %sub = sub nsw i32 255, %conv18
  %24 = load i8*, i8** %src.addr, align 8
  %arrayidx19 = getelementptr inbounds i8, i8* %24, i64 1
  %25 = load i8, i8* %arrayidx19, align 1
  %conv20 = zext i8 %25 to i32
  %mul21 = mul nsw i32 %sub, %conv20
  %add22 = add nsw i32 %mul21, 128
  store i32 %add22, i32* %t, align 4
  %26 = load i32, i32* %t, align 4
  %shr23 = ashr i32 %26, 8
  %27 = load i32, i32* %t, align 4
  %add24 = add nsw i32 %shr23, %27
  %shr25 = ashr i32 %add24, 8
  %conv26 = trunc i32 %shr25 to i8
  %28 = load i8*, i8** %src.addr, align 8
  %arrayidx27 = getelementptr inbounds i8, i8* %28, i64 1
  store i8 %conv26, i8* %arrayidx27, align 1
  br label %if.end

if.end:                                           ; preds = %if.then.17, %if.then
  br label %if.end.50

if.else:                                          ; preds = %for.end
  %29 = load i32, i32* %dest_bytes.addr, align 4
  %neg28 = xor i32 %29, -1
  %and29 = and i32 %neg28, 1
  %tobool30 = icmp ne i32 %and29, 0
  br i1 %tobool30, label %if.then.31, label %if.end.33

if.then.31:                                       ; preds = %if.else
  %30 = load i8*, i8** %m, align 8
  %31 = load i8, i8* %30, align 1
  %32 = load i8*, i8** %dest.addr, align 8
  %arrayidx32 = getelementptr inbounds i8, i8* %32, i64 3
  store i8 %31, i8* %arrayidx32, align 1
  br label %if.end.33

if.end.33:                                        ; preds = %if.then.31, %if.else
  %33 = load i32, i32* %cut.addr, align 4
  %tobool34 = icmp ne i32 %33, 0
  br i1 %tobool34, label %if.then.35, label %if.end.49

if.then.35:                                       ; preds = %if.end.33
  %34 = load i8*, i8** %m, align 8
  %35 = load i8, i8* %34, align 1
  %conv36 = zext i8 %35 to i32
  %cmp37 = icmp sgt i32 %conv36, 127
  br i1 %cmp37, label %cond.true.39, label %cond.false.42

cond.true.39:                                     ; preds = %if.then.35
  %36 = load i8*, i8** %bg.addr, align 8
  %arrayidx40 = getelementptr inbounds i8, i8* %36, i64 0
  %37 = load i8, i8* %arrayidx40, align 1
  %conv41 = zext i8 %37 to i32
  br label %cond.end.45

cond.false.42:                                    ; preds = %if.then.35
  %38 = load i8*, i8** %src.addr, align 8
  %arrayidx43 = getelementptr inbounds i8, i8* %38, i64 0
  %39 = load i8, i8* %arrayidx43, align 1
  %conv44 = zext i8 %39 to i32
  br label %cond.end.45

cond.end.45:                                      ; preds = %cond.false.42, %cond.true.39
  %cond46 = phi i32 [ %conv41, %cond.true.39 ], [ %conv44, %cond.false.42 ]
  %conv47 = trunc i32 %cond46 to i8
  %40 = load i8*, i8** %src.addr, align 8
  %arrayidx48 = getelementptr inbounds i8, i8* %40, i64 0
  store i8 %conv47, i8* %arrayidx48, align 1
  br label %if.end.49

if.end.49:                                        ; preds = %cond.end.45, %if.end.33
  br label %if.end.50

if.end.50:                                        ; preds = %if.end.49, %if.end
  %41 = load i8*, i8** %mask.addr, align 8
  %tobool51 = icmp ne i8* %41, null
  br i1 %tobool51, label %if.then.52, label %if.end.53

if.then.52:                                       ; preds = %if.end.50
  %42 = load i8*, i8** %m, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %incdec.ptr, i8** %m, align 8
  br label %if.end.53

if.end.53:                                        ; preds = %if.then.52, %if.end.50
  %43 = load i32, i32* %src_bytes.addr, align 4
  %44 = load i8*, i8** %src.addr, align 8
  %idx.ext = zext i32 %43 to i64
  %add.ptr = getelementptr inbounds i8, i8* %44, i64 %idx.ext
  store i8* %add.ptr, i8** %src.addr, align 8
  %45 = load i32, i32* %dest_bytes.addr, align 4
  %46 = load i8*, i8** %dest.addr, align 8
  %idx.ext54 = zext i32 %45 to i64
  %add.ptr55 = getelementptr inbounds i8, i8* %46, i64 %idx.ext54
  store i8* %add.ptr55, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @clear_region(%struct._PixelRegion* %dest) #0 {
entry:
  %dest.addr = alloca %struct._PixelRegion*, align 8
  %pr = alloca i8*, align 8
  %d = alloca i8*, align 8
  %h7 = alloca i32, align 4
  store %struct._PixelRegion* %dest, %struct._PixelRegion** %dest.addr, align 8
  %0 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %call = call %struct._PixelRegionIterator* (i32, ...) @pixel_regions_register(i32 1, %struct._PixelRegion* %0)
  %1 = bitcast %struct._PixelRegionIterator* %call to i8*
  store i8* %1, i8** %pr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i8*, i8** %pr, align 8
  %cmp = icmp ne i8* %2, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %3, i32 0, i32 8
  %4 = load i32, i32* %w, align 4
  %5 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %bytes = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %5, i32 0, i32 10
  %6 = load i32, i32* %bytes, align 4
  %mul = mul nsw i32 %4, %6
  %7 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %rowstride = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %7, i32 0, i32 5
  %8 = load i32, i32* %rowstride, align 4
  %cmp1 = icmp eq i32 %mul, %8
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %9 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %data = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %9, i32 0, i32 0
  %10 = load i8*, i8** %data, align 8
  %11 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %w2 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %11, i32 0, i32 8
  %12 = load i32, i32* %w2, align 4
  %13 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %h = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %13, i32 0, i32 9
  %14 = load i32, i32* %h, align 4
  %mul3 = mul nsw i32 %12, %14
  %15 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %bytes4 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %15, i32 0, i32 10
  %16 = load i32, i32* %bytes4, align 4
  %mul5 = mul nsw i32 %mul3, %16
  %conv = sext i32 %mul5 to i64
  call void @llvm.memset.p0i8.i64(i8* %10, i8 0, i64 %conv, i32 1, i1 false)
  br label %if.end

if.else:                                          ; preds = %for.body
  %17 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %data6 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %17, i32 0, i32 0
  %18 = load i8*, i8** %data6, align 8
  store i8* %18, i8** %d, align 8
  %19 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %h8 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %19, i32 0, i32 9
  %20 = load i32, i32* %h8, align 4
  store i32 %20, i32* %h7, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else
  %21 = load i32, i32* %h7, align 4
  %dec = add nsw i32 %21, -1
  store i32 %dec, i32* %h7, align 4
  %tobool = icmp ne i32 %21, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %22 = load i8*, i8** %d, align 8
  %23 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %w9 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %23, i32 0, i32 8
  %24 = load i32, i32* %w9, align 4
  %25 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %bytes10 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %25, i32 0, i32 10
  %26 = load i32, i32* %bytes10, align 4
  %mul11 = mul nsw i32 %24, %26
  %conv12 = sext i32 %mul11 to i64
  call void @llvm.memset.p0i8.i64(i8* %22, i8 0, i64 %conv12, i32 1, i1 false)
  %27 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %rowstride13 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %27, i32 0, i32 5
  %28 = load i32, i32* %rowstride13, align 4
  %29 = load i8*, i8** %d, align 8
  %idx.ext = sext i32 %28 to i64
  %add.ptr = getelementptr inbounds i8, i8* %29, i64 %idx.ext
  store i8* %add.ptr, i8** %d, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %30 = load i8*, i8** %pr, align 8
  %31 = bitcast i8* %30 to %struct._PixelRegionIterator*
  %call14 = call %struct._PixelRegionIterator* @pixel_regions_process(%struct._PixelRegionIterator* %31)
  %32 = bitcast %struct._PixelRegionIterator* %call14 to i8*
  store i8* %32, i8** %pr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare %struct._PixelRegionIterator* @pixel_regions_register(i32, ...) #2

declare %struct._PixelRegionIterator* @pixel_regions_process(%struct._PixelRegionIterator*) #2

; Function Attrs: nounwind uwtable
define void @color_region(%struct._PixelRegion* %dest, i8* %col) #0 {
entry:
  %dest.addr = alloca %struct._PixelRegion*, align 8
  %col.addr = alloca i8*, align 8
  %pr = alloca i8*, align 8
  %s = alloca i8*, align 8
  %h = alloca i32, align 4
  store %struct._PixelRegion* %dest, %struct._PixelRegion** %dest.addr, align 8
  store i8* %col, i8** %col.addr, align 8
  %0 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %call = call %struct._PixelRegionIterator* (i32, ...) @pixel_regions_register(i32 1, %struct._PixelRegion* %0)
  %1 = bitcast %struct._PixelRegionIterator* %call to i8*
  store i8* %1, i8** %pr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i8*, i8** %pr, align 8
  %cmp = icmp ne i8* %2, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %data = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %3, i32 0, i32 0
  %4 = load i8*, i8** %data, align 8
  store i8* %4, i8** %s, align 8
  %5 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %h1 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %5, i32 0, i32 9
  %6 = load i32, i32* %h1, align 4
  store i32 %6, i32* %h, align 4
  %7 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %7, i32 0, i32 8
  %8 = load i32, i32* %w, align 4
  %9 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %bytes = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %9, i32 0, i32 10
  %10 = load i32, i32* %bytes, align 4
  %mul = mul nsw i32 %8, %10
  %11 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %rowstride = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %11, i32 0, i32 5
  %12 = load i32, i32* %rowstride, align 4
  %cmp2 = icmp eq i32 %mul, %12
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %13 = load i8*, i8** %s, align 8
  %14 = load i8*, i8** %col.addr, align 8
  %15 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %w3 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %15, i32 0, i32 8
  %16 = load i32, i32* %w3, align 4
  %17 = load i32, i32* %h, align 4
  %mul4 = mul nsw i32 %16, %17
  %18 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %bytes5 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %18, i32 0, i32 10
  %19 = load i32, i32* %bytes5, align 4
  call void @color_pixels(i8* %13, i8* %14, i32 %mul4, i32 %19)
  br label %if.end

if.else:                                          ; preds = %for.body
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else
  %20 = load i32, i32* %h, align 4
  %dec = add nsw i32 %20, -1
  store i32 %dec, i32* %h, align 4
  %tobool = icmp ne i32 %20, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %21 = load i8*, i8** %s, align 8
  %22 = load i8*, i8** %col.addr, align 8
  %23 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %w6 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %23, i32 0, i32 8
  %24 = load i32, i32* %w6, align 4
  %25 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %bytes7 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %25, i32 0, i32 10
  %26 = load i32, i32* %bytes7, align 4
  call void @color_pixels(i8* %21, i8* %22, i32 %24, i32 %26)
  %27 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %rowstride8 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %27, i32 0, i32 5
  %28 = load i32, i32* %rowstride8, align 4
  %29 = load i8*, i8** %s, align 8
  %idx.ext = sext i32 %28 to i64
  %add.ptr = getelementptr inbounds i8, i8* %29, i64 %idx.ext
  store i8* %add.ptr, i8** %s, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %30 = load i8*, i8** %pr, align 8
  %31 = bitcast i8* %30 to %struct._PixelRegionIterator*
  %call9 = call %struct._PixelRegionIterator* @pixel_regions_process(%struct._PixelRegionIterator* %31)
  %32 = bitcast %struct._PixelRegionIterator* %call9 to i8*
  store i8* %32, i8** %pr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @color_region_mask(%struct._PixelRegion* %dest, %struct._PixelRegion* %mask, i8* %col) #0 {
entry:
  %dest.addr = alloca %struct._PixelRegion*, align 8
  %mask.addr = alloca %struct._PixelRegion*, align 8
  %col.addr = alloca i8*, align 8
  %pr = alloca i8*, align 8
  %d = alloca i8*, align 8
  %m = alloca i8*, align 8
  %h = alloca i32, align 4
  store %struct._PixelRegion* %dest, %struct._PixelRegion** %dest.addr, align 8
  store %struct._PixelRegion* %mask, %struct._PixelRegion** %mask.addr, align 8
  store i8* %col, i8** %col.addr, align 8
  %0 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %1 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %call = call %struct._PixelRegionIterator* (i32, ...) @pixel_regions_register(i32 2, %struct._PixelRegion* %0, %struct._PixelRegion* %1)
  %2 = bitcast %struct._PixelRegionIterator* %call to i8*
  store i8* %2, i8** %pr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i8*, i8** %pr, align 8
  %cmp = icmp ne i8* %3, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %data = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %4, i32 0, i32 0
  %5 = load i8*, i8** %data, align 8
  store i8* %5, i8** %d, align 8
  %6 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %data1 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %6, i32 0, i32 0
  %7 = load i8*, i8** %data1, align 8
  store i8* %7, i8** %m, align 8
  %8 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %h2 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %8, i32 0, i32 9
  %9 = load i32, i32* %h2, align 4
  store i32 %9, i32* %h, align 4
  %10 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %10, i32 0, i32 8
  %11 = load i32, i32* %w, align 4
  %12 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %bytes = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %12, i32 0, i32 10
  %13 = load i32, i32* %bytes, align 4
  %mul = mul nsw i32 %11, %13
  %14 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %rowstride = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %14, i32 0, i32 5
  %15 = load i32, i32* %rowstride, align 4
  %cmp3 = icmp eq i32 %mul, %15
  br i1 %cmp3, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body
  %16 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %w4 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %16, i32 0, i32 8
  %17 = load i32, i32* %w4, align 4
  %18 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %bytes5 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %18, i32 0, i32 10
  %19 = load i32, i32* %bytes5, align 4
  %mul6 = mul nsw i32 %17, %19
  %20 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %rowstride7 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %20, i32 0, i32 5
  %21 = load i32, i32* %rowstride7, align 4
  %cmp8 = icmp eq i32 %mul6, %21
  br i1 %cmp8, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %22 = load i8*, i8** %d, align 8
  %23 = load i8*, i8** %m, align 8
  %24 = load i8*, i8** %col.addr, align 8
  %25 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %w9 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %25, i32 0, i32 8
  %26 = load i32, i32* %w9, align 4
  %27 = load i32, i32* %h, align 4
  %mul10 = mul nsw i32 %26, %27
  %28 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %bytes11 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %28, i32 0, i32 10
  %29 = load i32, i32* %bytes11, align 4
  call void @color_pixels_mask(i8* %22, i8* %23, i8* %24, i32 %mul10, i32 %29)
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %for.body
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else
  %30 = load i32, i32* %h, align 4
  %dec = add nsw i32 %30, -1
  store i32 %dec, i32* %h, align 4
  %tobool = icmp ne i32 %30, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %31 = load i8*, i8** %d, align 8
  %32 = load i8*, i8** %m, align 8
  %33 = load i8*, i8** %col.addr, align 8
  %34 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %w12 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %34, i32 0, i32 8
  %35 = load i32, i32* %w12, align 4
  %36 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %bytes13 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %36, i32 0, i32 10
  %37 = load i32, i32* %bytes13, align 4
  call void @color_pixels_mask(i8* %31, i8* %32, i8* %33, i32 %35, i32 %37)
  %38 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %rowstride14 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %38, i32 0, i32 5
  %39 = load i32, i32* %rowstride14, align 4
  %40 = load i8*, i8** %d, align 8
  %idx.ext = sext i32 %39 to i64
  %add.ptr = getelementptr inbounds i8, i8* %40, i64 %idx.ext
  store i8* %add.ptr, i8** %d, align 8
  %41 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %rowstride15 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %41, i32 0, i32 5
  %42 = load i32, i32* %rowstride15, align 4
  %43 = load i8*, i8** %m, align 8
  %idx.ext16 = sext i32 %42 to i64
  %add.ptr17 = getelementptr inbounds i8, i8* %43, i64 %idx.ext16
  store i8* %add.ptr17, i8** %m, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %44 = load i8*, i8** %pr, align 8
  %45 = bitcast i8* %44 to %struct._PixelRegionIterator*
  %call18 = call %struct._PixelRegionIterator* @pixel_regions_process(%struct._PixelRegionIterator* %45)
  %46 = bitcast %struct._PixelRegionIterator* %call18 to i8*
  store i8* %46, i8** %pr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @pattern_region(%struct._PixelRegion* %dest, %struct._PixelRegion* %mask, %struct._TempBuf* %pattern, i32 %off_x, i32 %off_y) #0 {
entry:
  %dest.addr = alloca %struct._PixelRegion*, align 8
  %mask.addr = alloca %struct._PixelRegion*, align 8
  %pattern.addr = alloca %struct._TempBuf*, align 8
  %off_x.addr = alloca i32, align 4
  %off_y.addr = alloca i32, align 4
  %pr = alloca i8*, align 8
  %d = alloca i8*, align 8
  %m = alloca i8*, align 8
  %y = alloca i32, align 4
  store %struct._PixelRegion* %dest, %struct._PixelRegion** %dest.addr, align 8
  store %struct._PixelRegion* %mask, %struct._PixelRegion** %mask.addr, align 8
  store %struct._TempBuf* %pattern, %struct._TempBuf** %pattern.addr, align 8
  store i32 %off_x, i32* %off_x.addr, align 4
  store i32 %off_y, i32* %off_y.addr, align 4
  %0 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %1 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %call = call %struct._PixelRegionIterator* (i32, ...) @pixel_regions_register(i32 2, %struct._PixelRegion* %0, %struct._PixelRegion* %1)
  %2 = bitcast %struct._PixelRegionIterator* %call to i8*
  store i8* %2, i8** %pr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.12, %entry
  %3 = load i8*, i8** %pr, align 8
  %cmp = icmp ne i8* %3, null
  br i1 %cmp, label %for.body, label %for.end.14

for.body:                                         ; preds = %for.cond
  %4 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %data = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %4, i32 0, i32 0
  %5 = load i8*, i8** %data, align 8
  store i8* %5, i8** %d, align 8
  %6 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %tobool = icmp ne %struct._PixelRegion* %6, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %7 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %data1 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %7, i32 0, i32 0
  %8 = load i8*, i8** %data1, align 8
  br label %cond.end

cond.false:                                       ; preds = %for.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %8, %cond.true ], [ null, %cond.false ]
  store i8* %cond, i8** %m, align 8
  store i32 0, i32* %y, align 4
  br label %for.cond.2

for.cond.2:                                       ; preds = %for.inc, %cond.end
  %9 = load i32, i32* %y, align 4
  %10 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %h = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %10, i32 0, i32 9
  %11 = load i32, i32* %h, align 4
  %cmp3 = icmp slt i32 %9, %11
  br i1 %cmp3, label %for.body.4, label %for.end

for.body.4:                                       ; preds = %for.cond.2
  %12 = load i8*, i8** %d, align 8
  %13 = load i8*, i8** %m, align 8
  %14 = load %struct._TempBuf*, %struct._TempBuf** %pattern.addr, align 8
  %15 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %15, i32 0, i32 8
  %16 = load i32, i32* %w, align 4
  %17 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %bytes = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %17, i32 0, i32 10
  %18 = load i32, i32* %bytes, align 4
  %19 = load i32, i32* %off_x.addr, align 4
  %20 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %x = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %20, i32 0, i32 6
  %21 = load i32, i32* %x, align 4
  %add = add nsw i32 %19, %21
  %22 = load i32, i32* %off_y.addr, align 4
  %23 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %y5 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %23, i32 0, i32 7
  %24 = load i32, i32* %y5, align 4
  %add6 = add nsw i32 %22, %24
  %25 = load i32, i32* %y, align 4
  %add7 = add nsw i32 %add6, %25
  call void @pattern_pixels_mask(i8* %12, i8* %13, %struct._TempBuf* %14, i32 %16, i32 %18, i32 %add, i32 %add7)
  %26 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %rowstride = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %26, i32 0, i32 5
  %27 = load i32, i32* %rowstride, align 4
  %28 = load i8*, i8** %d, align 8
  %idx.ext = sext i32 %27 to i64
  %add.ptr = getelementptr inbounds i8, i8* %28, i64 %idx.ext
  store i8* %add.ptr, i8** %d, align 8
  %29 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %tobool8 = icmp ne %struct._PixelRegion* %29, null
  br i1 %tobool8, label %if.then, label %if.end

if.then:                                          ; preds = %for.body.4
  %30 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %rowstride9 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %30, i32 0, i32 5
  %31 = load i32, i32* %rowstride9, align 4
  %32 = load i8*, i8** %m, align 8
  %idx.ext10 = sext i32 %31 to i64
  %add.ptr11 = getelementptr inbounds i8, i8* %32, i64 %idx.ext10
  store i8* %add.ptr11, i8** %m, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body.4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %33 = load i32, i32* %y, align 4
  %inc = add nsw i32 %33, 1
  store i32 %inc, i32* %y, align 4
  br label %for.cond.2

for.end:                                          ; preds = %for.cond.2
  br label %for.inc.12

for.inc.12:                                       ; preds = %for.end
  %34 = load i8*, i8** %pr, align 8
  %35 = bitcast i8* %34 to %struct._PixelRegionIterator*
  %call13 = call %struct._PixelRegionIterator* @pixel_regions_process(%struct._PixelRegionIterator* %35)
  %36 = bitcast %struct._PixelRegionIterator* %call13 to i8*
  store i8* %36, i8** %pr, align 8
  br label %for.cond

for.end.14:                                       ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @blend_region(%struct._PixelRegion* %src1, %struct._PixelRegion* %src2, %struct._PixelRegion* %dest, i8 zeroext %blend) #0 {
entry:
  %src1.addr = alloca %struct._PixelRegion*, align 8
  %src2.addr = alloca %struct._PixelRegion*, align 8
  %dest.addr = alloca %struct._PixelRegion*, align 8
  %blend.addr = alloca i8, align 1
  %pr = alloca i8*, align 8
  %s1 = alloca i8*, align 8
  %s2 = alloca i8*, align 8
  %d = alloca i8*, align 8
  %h = alloca i32, align 4
  store %struct._PixelRegion* %src1, %struct._PixelRegion** %src1.addr, align 8
  store %struct._PixelRegion* %src2, %struct._PixelRegion** %src2.addr, align 8
  store %struct._PixelRegion* %dest, %struct._PixelRegion** %dest.addr, align 8
  store i8 %blend, i8* %blend.addr, align 1
  %0 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %1 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %2 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %call = call %struct._PixelRegionIterator* (i32, ...) @pixel_regions_register(i32 3, %struct._PixelRegion* %0, %struct._PixelRegion* %1, %struct._PixelRegion* %2)
  %3 = bitcast %struct._PixelRegionIterator* %call to i8*
  store i8* %3, i8** %pr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i8*, i8** %pr, align 8
  %cmp = icmp ne i8* %4, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %data = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %5, i32 0, i32 0
  %6 = load i8*, i8** %data, align 8
  store i8* %6, i8** %s1, align 8
  %7 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %data1 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %7, i32 0, i32 0
  %8 = load i8*, i8** %data1, align 8
  store i8* %8, i8** %s2, align 8
  %9 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %data2 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %9, i32 0, i32 0
  %10 = load i8*, i8** %data2, align 8
  store i8* %10, i8** %d, align 8
  %11 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %h3 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %11, i32 0, i32 9
  %12 = load i32, i32* %h3, align 4
  store i32 %12, i32* %h, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body
  %13 = load i32, i32* %h, align 4
  %dec = add nsw i32 %13, -1
  store i32 %dec, i32* %h, align 4
  %tobool = icmp ne i32 %13, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %14 = load i8*, i8** %s1, align 8
  %15 = load i8*, i8** %s2, align 8
  %16 = load i8*, i8** %d, align 8
  %17 = load i8, i8* %blend.addr, align 1
  %18 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %18, i32 0, i32 8
  %19 = load i32, i32* %w, align 4
  %20 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %bytes = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %20, i32 0, i32 10
  %21 = load i32, i32* %bytes, align 4
  call void @blend_pixels(i8* %14, i8* %15, i8* %16, i8 zeroext %17, i32 %19, i32 %21)
  %22 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %rowstride = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %22, i32 0, i32 5
  %23 = load i32, i32* %rowstride, align 4
  %24 = load i8*, i8** %s1, align 8
  %idx.ext = sext i32 %23 to i64
  %add.ptr = getelementptr inbounds i8, i8* %24, i64 %idx.ext
  store i8* %add.ptr, i8** %s1, align 8
  %25 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %rowstride4 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %25, i32 0, i32 5
  %26 = load i32, i32* %rowstride4, align 4
  %27 = load i8*, i8** %s2, align 8
  %idx.ext5 = sext i32 %26 to i64
  %add.ptr6 = getelementptr inbounds i8, i8* %27, i64 %idx.ext5
  store i8* %add.ptr6, i8** %s2, align 8
  %28 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %rowstride7 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %28, i32 0, i32 5
  %29 = load i32, i32* %rowstride7, align 4
  %30 = load i8*, i8** %d, align 8
  %idx.ext8 = sext i32 %29 to i64
  %add.ptr9 = getelementptr inbounds i8, i8* %30, i64 %idx.ext8
  store i8* %add.ptr9, i8** %d, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %31 = load i8*, i8** %pr, align 8
  %32 = bitcast i8* %31 to %struct._PixelRegionIterator*
  %call10 = call %struct._PixelRegionIterator* @pixel_regions_process(%struct._PixelRegionIterator* %32)
  %33 = bitcast %struct._PixelRegionIterator* %call10 to i8*
  store i8* %33, i8** %pr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @shade_region(%struct._PixelRegion* %src, %struct._PixelRegion* %dest, i8* %color, i8 zeroext %blend) #0 {
entry:
  %src.addr = alloca %struct._PixelRegion*, align 8
  %dest.addr = alloca %struct._PixelRegion*, align 8
  %color.addr = alloca i8*, align 8
  %blend.addr = alloca i8, align 1
  %s = alloca i8*, align 8
  %d = alloca i8*, align 8
  %h = alloca i32, align 4
  store %struct._PixelRegion* %src, %struct._PixelRegion** %src.addr, align 8
  store %struct._PixelRegion* %dest, %struct._PixelRegion** %dest.addr, align 8
  store i8* %color, i8** %color.addr, align 8
  store i8 %blend, i8* %blend.addr, align 1
  %0 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %data = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %0, i32 0, i32 0
  %1 = load i8*, i8** %data, align 8
  store i8* %1, i8** %s, align 8
  %2 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %data1 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %2, i32 0, i32 0
  %3 = load i8*, i8** %data1, align 8
  store i8* %3, i8** %d, align 8
  %4 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %h2 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %4, i32 0, i32 9
  %5 = load i32, i32* %h2, align 4
  store i32 %5, i32* %h, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %6 = load i32, i32* %h, align 4
  %dec = add nsw i32 %6, -1
  store i32 %dec, i32* %h, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load i8*, i8** %s, align 8
  %8 = load i8*, i8** %d, align 8
  %9 = load i8*, i8** %color.addr, align 8
  %10 = load i8, i8* %blend.addr, align 1
  %11 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %11, i32 0, i32 8
  %12 = load i32, i32* %w, align 4
  %13 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %bytes = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %13, i32 0, i32 10
  %14 = load i32, i32* %bytes, align 4
  call void @blend_pixels(i8* %7, i8* %8, i8* %9, i8 zeroext %10, i32 %12, i32 %14)
  %15 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %rowstride = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %15, i32 0, i32 5
  %16 = load i32, i32* %rowstride, align 4
  %17 = load i8*, i8** %s, align 8
  %idx.ext = sext i32 %16 to i64
  %add.ptr = getelementptr inbounds i8, i8* %17, i64 %idx.ext
  store i8* %add.ptr, i8** %s, align 8
  %18 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %rowstride3 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %18, i32 0, i32 5
  %19 = load i32, i32* %rowstride3, align 4
  %20 = load i8*, i8** %d, align 8
  %idx.ext4 = sext i32 %19 to i64
  %add.ptr5 = getelementptr inbounds i8, i8* %20, i64 %idx.ext4
  store i8* %add.ptr5, i8** %d, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @copy_region(%struct._PixelRegion* %src, %struct._PixelRegion* %dest) #0 {
entry:
  %src.addr = alloca %struct._PixelRegion*, align 8
  %dest.addr = alloca %struct._PixelRegion*, align 8
  %pr = alloca i8*, align 8
  %s = alloca i8*, align 8
  %d = alloca i8*, align 8
  %h40 = alloca i32, align 4
  %pixels = alloca i32, align 4
  store %struct._PixelRegion* %src, %struct._PixelRegion** %src.addr, align 8
  store %struct._PixelRegion* %dest, %struct._PixelRegion** %dest.addr, align 8
  %0 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %1 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %call = call %struct._PixelRegionIterator* (i32, ...) @pixel_regions_register(i32 2, %struct._PixelRegion* %0, %struct._PixelRegion* %1)
  %2 = bitcast %struct._PixelRegionIterator* %call to i8*
  store i8* %2, i8** %pr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i8*, i8** %pr, align 8
  %cmp = icmp ne i8* %3, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %tiles = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %4, i32 0, i32 1
  %5 = load %struct._TileManager*, %struct._TileManager** %tiles, align 8
  %tobool = icmp ne %struct._TileManager* %5, null
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body
  %6 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %tiles1 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %6, i32 0, i32 1
  %7 = load %struct._TileManager*, %struct._TileManager** %tiles1, align 8
  %tobool2 = icmp ne %struct._TileManager* %7, null
  br i1 %tobool2, label %land.lhs.true.3, label %if.else

land.lhs.true.3:                                  ; preds = %land.lhs.true
  %8 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %curtile = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %8, i32 0, i32 2
  %9 = load %struct._Tile*, %struct._Tile** %curtile, align 8
  %tobool4 = icmp ne %struct._Tile* %9, null
  br i1 %tobool4, label %land.lhs.true.5, label %if.else

land.lhs.true.5:                                  ; preds = %land.lhs.true.3
  %10 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %curtile6 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %10, i32 0, i32 2
  %11 = load %struct._Tile*, %struct._Tile** %curtile6, align 8
  %tobool7 = icmp ne %struct._Tile* %11, null
  br i1 %tobool7, label %land.lhs.true.8, label %if.else

land.lhs.true.8:                                  ; preds = %land.lhs.true.5
  %12 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %offx = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %12, i32 0, i32 3
  %13 = load i32, i32* %offx, align 4
  %cmp9 = icmp eq i32 %13, 0
  br i1 %cmp9, label %land.lhs.true.10, label %if.else

land.lhs.true.10:                                 ; preds = %land.lhs.true.8
  %14 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %offx11 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %14, i32 0, i32 3
  %15 = load i32, i32* %offx11, align 4
  %cmp12 = icmp eq i32 %15, 0
  br i1 %cmp12, label %land.lhs.true.13, label %if.else

land.lhs.true.13:                                 ; preds = %land.lhs.true.10
  %16 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %offy = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %16, i32 0, i32 4
  %17 = load i32, i32* %offy, align 4
  %cmp14 = icmp eq i32 %17, 0
  br i1 %cmp14, label %land.lhs.true.15, label %if.else

land.lhs.true.15:                                 ; preds = %land.lhs.true.13
  %18 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %offy16 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %18, i32 0, i32 4
  %19 = load i32, i32* %offy16, align 4
  %cmp17 = icmp eq i32 %19, 0
  br i1 %cmp17, label %land.lhs.true.18, label %if.else

land.lhs.true.18:                                 ; preds = %land.lhs.true.15
  %20 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %20, i32 0, i32 8
  %21 = load i32, i32* %w, align 4
  %22 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %curtile19 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %22, i32 0, i32 2
  %23 = load %struct._Tile*, %struct._Tile** %curtile19, align 8
  %call20 = call i32 @tile_ewidth(%struct._Tile* %23)
  %cmp21 = icmp eq i32 %21, %call20
  br i1 %cmp21, label %land.lhs.true.22, label %if.else

land.lhs.true.22:                                 ; preds = %land.lhs.true.18
  %24 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %w23 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %24, i32 0, i32 8
  %25 = load i32, i32* %w23, align 4
  %26 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %curtile24 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %26, i32 0, i32 2
  %27 = load %struct._Tile*, %struct._Tile** %curtile24, align 8
  %call25 = call i32 @tile_ewidth(%struct._Tile* %27)
  %cmp26 = icmp eq i32 %25, %call25
  br i1 %cmp26, label %land.lhs.true.27, label %if.else

land.lhs.true.27:                                 ; preds = %land.lhs.true.22
  %28 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %h = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %28, i32 0, i32 9
  %29 = load i32, i32* %h, align 4
  %30 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %curtile28 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %30, i32 0, i32 2
  %31 = load %struct._Tile*, %struct._Tile** %curtile28, align 8
  %call29 = call i32 @tile_eheight(%struct._Tile* %31)
  %cmp30 = icmp eq i32 %29, %call29
  br i1 %cmp30, label %land.lhs.true.31, label %if.else

land.lhs.true.31:                                 ; preds = %land.lhs.true.27
  %32 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %h32 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %32, i32 0, i32 9
  %33 = load i32, i32* %h32, align 4
  %34 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %curtile33 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %34, i32 0, i32 2
  %35 = load %struct._Tile*, %struct._Tile** %curtile33, align 8
  %call34 = call i32 @tile_eheight(%struct._Tile* %35)
  %cmp35 = icmp eq i32 %33, %call34
  br i1 %cmp35, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true.31
  %36 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %tiles36 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %36, i32 0, i32 1
  %37 = load %struct._TileManager*, %struct._TileManager** %tiles36, align 8
  %38 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %curtile37 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %38, i32 0, i32 2
  %39 = load %struct._Tile*, %struct._Tile** %curtile37, align 8
  %40 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %curtile38 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %40, i32 0, i32 2
  %41 = load %struct._Tile*, %struct._Tile** %curtile38, align 8
  call void @tile_manager_map_over_tile(%struct._TileManager* %37, %struct._Tile* %39, %struct._Tile* %41)
  br label %if.end

if.else:                                          ; preds = %land.lhs.true.31, %land.lhs.true.27, %land.lhs.true.22, %land.lhs.true.18, %land.lhs.true.15, %land.lhs.true.13, %land.lhs.true.10, %land.lhs.true.8, %land.lhs.true.5, %land.lhs.true.3, %land.lhs.true, %for.body
  %42 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %data = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %42, i32 0, i32 0
  %43 = load i8*, i8** %data, align 8
  store i8* %43, i8** %s, align 8
  %44 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %data39 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %44, i32 0, i32 0
  %45 = load i8*, i8** %data39, align 8
  store i8* %45, i8** %d, align 8
  %46 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %h41 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %46, i32 0, i32 9
  %47 = load i32, i32* %h41, align 4
  store i32 %47, i32* %h40, align 4
  %48 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w42 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %48, i32 0, i32 8
  %49 = load i32, i32* %w42, align 4
  %50 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %bytes = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %50, i32 0, i32 10
  %51 = load i32, i32* %bytes, align 4
  %mul = mul nsw i32 %49, %51
  store i32 %mul, i32* %pixels, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else
  %52 = load i32, i32* %h40, align 4
  %dec = add nsw i32 %52, -1
  store i32 %dec, i32* %h40, align 4
  %tobool43 = icmp ne i32 %52, 0
  br i1 %tobool43, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %53 = load i8*, i8** %d, align 8
  %54 = load i8*, i8** %s, align 8
  %55 = load i32, i32* %pixels, align 4
  %conv = sext i32 %55 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %53, i8* %54, i64 %conv, i32 1, i1 false)
  %56 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %rowstride = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %56, i32 0, i32 5
  %57 = load i32, i32* %rowstride, align 4
  %58 = load i8*, i8** %s, align 8
  %idx.ext = sext i32 %57 to i64
  %add.ptr = getelementptr inbounds i8, i8* %58, i64 %idx.ext
  store i8* %add.ptr, i8** %s, align 8
  %59 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %rowstride44 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %59, i32 0, i32 5
  %60 = load i32, i32* %rowstride44, align 4
  %61 = load i8*, i8** %d, align 8
  %idx.ext45 = sext i32 %60 to i64
  %add.ptr46 = getelementptr inbounds i8, i8* %61, i64 %idx.ext45
  store i8* %add.ptr46, i8** %d, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %62 = load i8*, i8** %pr, align 8
  %63 = bitcast i8* %62 to %struct._PixelRegionIterator*
  %call47 = call %struct._PixelRegionIterator* @pixel_regions_process(%struct._PixelRegionIterator* %63)
  %64 = bitcast %struct._PixelRegionIterator* %call47 to i8*
  store i8* %64, i8** %pr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @tile_ewidth(%struct._Tile*) #2

declare i32 @tile_eheight(%struct._Tile*) #2

declare void @tile_manager_map_over_tile(%struct._TileManager*, %struct._Tile*, %struct._Tile*) #2

; Function Attrs: nounwind uwtable
define void @copy_region_nocow(%struct._PixelRegion* %src, %struct._PixelRegion* %dest) #0 {
entry:
  %src.addr = alloca %struct._PixelRegion*, align 8
  %dest.addr = alloca %struct._PixelRegion*, align 8
  %pr = alloca i8*, align 8
  %s = alloca i8*, align 8
  %d = alloca i8*, align 8
  %pixels = alloca i32, align 4
  %h = alloca i32, align 4
  store %struct._PixelRegion* %src, %struct._PixelRegion** %src.addr, align 8
  store %struct._PixelRegion* %dest, %struct._PixelRegion** %dest.addr, align 8
  %0 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %1 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %call = call %struct._PixelRegionIterator* (i32, ...) @pixel_regions_register(i32 2, %struct._PixelRegion* %0, %struct._PixelRegion* %1)
  %2 = bitcast %struct._PixelRegionIterator* %call to i8*
  store i8* %2, i8** %pr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i8*, i8** %pr, align 8
  %cmp = icmp ne i8* %3, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %data = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %4, i32 0, i32 0
  %5 = load i8*, i8** %data, align 8
  store i8* %5, i8** %s, align 8
  %6 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %data1 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %6, i32 0, i32 0
  %7 = load i8*, i8** %data1, align 8
  store i8* %7, i8** %d, align 8
  %8 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %8, i32 0, i32 8
  %9 = load i32, i32* %w, align 4
  %10 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %bytes = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %10, i32 0, i32 10
  %11 = load i32, i32* %bytes, align 4
  %mul = mul nsw i32 %9, %11
  store i32 %mul, i32* %pixels, align 4
  %12 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %h2 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %12, i32 0, i32 9
  %13 = load i32, i32* %h2, align 4
  store i32 %13, i32* %h, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body
  %14 = load i32, i32* %h, align 4
  %dec = add nsw i32 %14, -1
  store i32 %dec, i32* %h, align 4
  %tobool = icmp ne i32 %14, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %15 = load i8*, i8** %d, align 8
  %16 = load i8*, i8** %s, align 8
  %17 = load i32, i32* %pixels, align 4
  %conv = sext i32 %17 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* %16, i64 %conv, i32 1, i1 false)
  %18 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %rowstride = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %18, i32 0, i32 5
  %19 = load i32, i32* %rowstride, align 4
  %20 = load i8*, i8** %s, align 8
  %idx.ext = sext i32 %19 to i64
  %add.ptr = getelementptr inbounds i8, i8* %20, i64 %idx.ext
  store i8* %add.ptr, i8** %s, align 8
  %21 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %rowstride3 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %21, i32 0, i32 5
  %22 = load i32, i32* %rowstride3, align 4
  %23 = load i8*, i8** %d, align 8
  %idx.ext4 = sext i32 %22 to i64
  %add.ptr5 = getelementptr inbounds i8, i8* %23, i64 %idx.ext4
  store i8* %add.ptr5, i8** %d, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %24 = load i8*, i8** %pr, align 8
  %25 = bitcast i8* %24 to %struct._PixelRegionIterator*
  %call6 = call %struct._PixelRegionIterator* @pixel_regions_process(%struct._PixelRegionIterator* %25)
  %26 = bitcast %struct._PixelRegionIterator* %call6 to i8*
  store i8* %26, i8** %pr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @add_alpha_region(%struct._PixelRegion* %src, %struct._PixelRegion* %dest) #0 {
entry:
  %src.addr = alloca %struct._PixelRegion*, align 8
  %dest.addr = alloca %struct._PixelRegion*, align 8
  %pr = alloca i8*, align 8
  %s = alloca i8*, align 8
  %d = alloca i8*, align 8
  %h = alloca i32, align 4
  store %struct._PixelRegion* %src, %struct._PixelRegion** %src.addr, align 8
  store %struct._PixelRegion* %dest, %struct._PixelRegion** %dest.addr, align 8
  %0 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %1 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %call = call %struct._PixelRegionIterator* (i32, ...) @pixel_regions_register(i32 2, %struct._PixelRegion* %0, %struct._PixelRegion* %1)
  %2 = bitcast %struct._PixelRegionIterator* %call to i8*
  store i8* %2, i8** %pr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i8*, i8** %pr, align 8
  %cmp = icmp ne i8* %3, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %data = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %4, i32 0, i32 0
  %5 = load i8*, i8** %data, align 8
  store i8* %5, i8** %s, align 8
  %6 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %data1 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %6, i32 0, i32 0
  %7 = load i8*, i8** %data1, align 8
  store i8* %7, i8** %d, align 8
  %8 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %h2 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %8, i32 0, i32 9
  %9 = load i32, i32* %h2, align 4
  store i32 %9, i32* %h, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body
  %10 = load i32, i32* %h, align 4
  %dec = add nsw i32 %10, -1
  store i32 %dec, i32* %h, align 4
  %tobool = icmp ne i32 %10, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %11 = load i8*, i8** %s, align 8
  %12 = load i8*, i8** %d, align 8
  %13 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %13, i32 0, i32 8
  %14 = load i32, i32* %w, align 4
  %15 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %bytes = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %15, i32 0, i32 10
  %16 = load i32, i32* %bytes, align 4
  call void @add_alpha_pixels(i8* %11, i8* %12, i32 %14, i32 %16)
  %17 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %rowstride = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %17, i32 0, i32 5
  %18 = load i32, i32* %rowstride, align 4
  %19 = load i8*, i8** %s, align 8
  %idx.ext = sext i32 %18 to i64
  %add.ptr = getelementptr inbounds i8, i8* %19, i64 %idx.ext
  store i8* %add.ptr, i8** %s, align 8
  %20 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %rowstride3 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %20, i32 0, i32 5
  %21 = load i32, i32* %rowstride3, align 4
  %22 = load i8*, i8** %d, align 8
  %idx.ext4 = sext i32 %21 to i64
  %add.ptr5 = getelementptr inbounds i8, i8* %22, i64 %idx.ext4
  store i8* %add.ptr5, i8** %d, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %23 = load i8*, i8** %pr, align 8
  %24 = bitcast i8* %23 to %struct._PixelRegionIterator*
  %call6 = call %struct._PixelRegionIterator* @pixel_regions_process(%struct._PixelRegionIterator* %24)
  %25 = bitcast %struct._PixelRegionIterator* %call6 to i8*
  store i8* %25, i8** %pr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @flatten_region(%struct._PixelRegion* %src, %struct._PixelRegion* %dest, i8* %bg) #0 {
entry:
  %src.addr = alloca %struct._PixelRegion*, align 8
  %dest.addr = alloca %struct._PixelRegion*, align 8
  %bg.addr = alloca i8*, align 8
  %pr = alloca i8*, align 8
  %s = alloca i8*, align 8
  %d = alloca i8*, align 8
  %h = alloca i32, align 4
  store %struct._PixelRegion* %src, %struct._PixelRegion** %src.addr, align 8
  store %struct._PixelRegion* %dest, %struct._PixelRegion** %dest.addr, align 8
  store i8* %bg, i8** %bg.addr, align 8
  %0 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %1 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %call = call %struct._PixelRegionIterator* (i32, ...) @pixel_regions_register(i32 2, %struct._PixelRegion* %0, %struct._PixelRegion* %1)
  %2 = bitcast %struct._PixelRegionIterator* %call to i8*
  store i8* %2, i8** %pr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i8*, i8** %pr, align 8
  %cmp = icmp ne i8* %3, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %data = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %4, i32 0, i32 0
  %5 = load i8*, i8** %data, align 8
  store i8* %5, i8** %s, align 8
  %6 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %data1 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %6, i32 0, i32 0
  %7 = load i8*, i8** %data1, align 8
  store i8* %7, i8** %d, align 8
  %8 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %h2 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %8, i32 0, i32 9
  %9 = load i32, i32* %h2, align 4
  store i32 %9, i32* %h, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body
  %10 = load i32, i32* %h, align 4
  %dec = add nsw i32 %10, -1
  store i32 %dec, i32* %h, align 4
  %tobool = icmp ne i32 %10, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %11 = load i8*, i8** %s, align 8
  %12 = load i8*, i8** %d, align 8
  %13 = load i8*, i8** %bg.addr, align 8
  %14 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %14, i32 0, i32 8
  %15 = load i32, i32* %w, align 4
  %16 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %bytes = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %16, i32 0, i32 10
  %17 = load i32, i32* %bytes, align 4
  call void @flatten_pixels(i8* %11, i8* %12, i8* %13, i32 %15, i32 %17)
  %18 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %rowstride = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %18, i32 0, i32 5
  %19 = load i32, i32* %rowstride, align 4
  %20 = load i8*, i8** %s, align 8
  %idx.ext = sext i32 %19 to i64
  %add.ptr = getelementptr inbounds i8, i8* %20, i64 %idx.ext
  store i8* %add.ptr, i8** %s, align 8
  %21 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %rowstride3 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %21, i32 0, i32 5
  %22 = load i32, i32* %rowstride3, align 4
  %23 = load i8*, i8** %d, align 8
  %idx.ext4 = sext i32 %22 to i64
  %add.ptr5 = getelementptr inbounds i8, i8* %23, i64 %idx.ext4
  store i8* %add.ptr5, i8** %d, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %24 = load i8*, i8** %pr, align 8
  %25 = bitcast i8* %24 to %struct._PixelRegionIterator*
  %call6 = call %struct._PixelRegionIterator* @pixel_regions_process(%struct._PixelRegionIterator* %25)
  %26 = bitcast %struct._PixelRegionIterator* %call6 to i8*
  store i8* %26, i8** %pr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @extract_alpha_region(%struct._PixelRegion* %src, %struct._PixelRegion* %mask, %struct._PixelRegion* %dest) #0 {
entry:
  %src.addr = alloca %struct._PixelRegion*, align 8
  %mask.addr = alloca %struct._PixelRegion*, align 8
  %dest.addr = alloca %struct._PixelRegion*, align 8
  %pr = alloca i8*, align 8
  %m = alloca i8*, align 8
  %s = alloca i8*, align 8
  %d = alloca i8*, align 8
  %h = alloca i32, align 4
  store %struct._PixelRegion* %src, %struct._PixelRegion** %src.addr, align 8
  store %struct._PixelRegion* %mask, %struct._PixelRegion** %mask.addr, align 8
  store %struct._PixelRegion* %dest, %struct._PixelRegion** %dest.addr, align 8
  %0 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %1 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %2 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %call = call %struct._PixelRegionIterator* (i32, ...) @pixel_regions_register(i32 3, %struct._PixelRegion* %0, %struct._PixelRegion* %1, %struct._PixelRegion* %2)
  %3 = bitcast %struct._PixelRegionIterator* %call to i8*
  store i8* %3, i8** %pr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i8*, i8** %pr, align 8
  %cmp = icmp ne i8* %4, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %tobool = icmp ne %struct._PixelRegion* %5, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %6 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %data = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %6, i32 0, i32 0
  %7 = load i8*, i8** %data, align 8
  br label %cond.end

cond.false:                                       ; preds = %for.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %7, %cond.true ], [ null, %cond.false ]
  store i8* %cond, i8** %m, align 8
  %8 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %data1 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %8, i32 0, i32 0
  %9 = load i8*, i8** %data1, align 8
  store i8* %9, i8** %s, align 8
  %10 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %data2 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %10, i32 0, i32 0
  %11 = load i8*, i8** %data2, align 8
  store i8* %11, i8** %d, align 8
  %12 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %h3 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %12, i32 0, i32 9
  %13 = load i32, i32* %h3, align 4
  store i32 %13, i32* %h, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %14 = load i32, i32* %h, align 4
  %dec = add nsw i32 %14, -1
  store i32 %dec, i32* %h, align 4
  %tobool4 = icmp ne i32 %14, 0
  br i1 %tobool4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %15 = load i8*, i8** %s, align 8
  %16 = load i8*, i8** %m, align 8
  %17 = load i8*, i8** %d, align 8
  %18 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %18, i32 0, i32 8
  %19 = load i32, i32* %w, align 4
  %20 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %bytes = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %20, i32 0, i32 10
  %21 = load i32, i32* %bytes, align 4
  call void @extract_alpha_pixels(i8* %15, i8* %16, i8* %17, i32 %19, i32 %21)
  %22 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %rowstride = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %22, i32 0, i32 5
  %23 = load i32, i32* %rowstride, align 4
  %24 = load i8*, i8** %s, align 8
  %idx.ext = sext i32 %23 to i64
  %add.ptr = getelementptr inbounds i8, i8* %24, i64 %idx.ext
  store i8* %add.ptr, i8** %s, align 8
  %25 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %rowstride5 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %25, i32 0, i32 5
  %26 = load i32, i32* %rowstride5, align 4
  %27 = load i8*, i8** %d, align 8
  %idx.ext6 = sext i32 %26 to i64
  %add.ptr7 = getelementptr inbounds i8, i8* %27, i64 %idx.ext6
  store i8* %add.ptr7, i8** %d, align 8
  %28 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %tobool8 = icmp ne %struct._PixelRegion* %28, null
  br i1 %tobool8, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %29 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %rowstride9 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %29, i32 0, i32 5
  %30 = load i32, i32* %rowstride9, align 4
  %31 = load i8*, i8** %m, align 8
  %idx.ext10 = sext i32 %30 to i64
  %add.ptr11 = getelementptr inbounds i8, i8* %31, i64 %idx.ext10
  store i8* %add.ptr11, i8** %m, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %32 = load i8*, i8** %pr, align 8
  %33 = bitcast i8* %32 to %struct._PixelRegionIterator*
  %call12 = call %struct._PixelRegionIterator* @pixel_regions_process(%struct._PixelRegionIterator* %33)
  %34 = bitcast %struct._PixelRegionIterator* %call12 to i8*
  store i8* %34, i8** %pr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @extract_from_region(%struct._PixelRegion* %src, %struct._PixelRegion* %dest, %struct._PixelRegion* %mask, i8* %cmap, i8* %bg, i32 %type, i32 %cut) #0 {
entry:
  %src.addr = alloca %struct._PixelRegion*, align 8
  %dest.addr = alloca %struct._PixelRegion*, align 8
  %mask.addr = alloca %struct._PixelRegion*, align 8
  %cmap.addr = alloca i8*, align 8
  %bg.addr = alloca i8*, align 8
  %type.addr = alloca i32, align 4
  %cut.addr = alloca i32, align 4
  %pr = alloca i8*, align 8
  %m = alloca i8*, align 8
  %s = alloca i8*, align 8
  %d = alloca i8*, align 8
  %h = alloca i32, align 4
  store %struct._PixelRegion* %src, %struct._PixelRegion** %src.addr, align 8
  store %struct._PixelRegion* %dest, %struct._PixelRegion** %dest.addr, align 8
  store %struct._PixelRegion* %mask, %struct._PixelRegion** %mask.addr, align 8
  store i8* %cmap, i8** %cmap.addr, align 8
  store i8* %bg, i8** %bg.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  store i32 %cut, i32* %cut.addr, align 4
  %0 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %1 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %2 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %call = call %struct._PixelRegionIterator* (i32, ...) @pixel_regions_register(i32 3, %struct._PixelRegion* %0, %struct._PixelRegion* %1, %struct._PixelRegion* %2)
  %3 = bitcast %struct._PixelRegionIterator* %call to i8*
  store i8* %3, i8** %pr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i8*, i8** %pr, align 8
  %cmp = icmp ne i8* %4, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %tobool = icmp ne %struct._PixelRegion* %5, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %6 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %data = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %6, i32 0, i32 0
  %7 = load i8*, i8** %data, align 8
  br label %cond.end

cond.false:                                       ; preds = %for.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %7, %cond.true ], [ null, %cond.false ]
  store i8* %cond, i8** %m, align 8
  %8 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %data1 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %8, i32 0, i32 0
  %9 = load i8*, i8** %data1, align 8
  store i8* %9, i8** %s, align 8
  %10 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %data2 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %10, i32 0, i32 0
  %11 = load i8*, i8** %data2, align 8
  store i8* %11, i8** %d, align 8
  %12 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %h3 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %12, i32 0, i32 9
  %13 = load i32, i32* %h3, align 4
  store i32 %13, i32* %h, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %14 = load i32, i32* %h, align 4
  %dec = add nsw i32 %14, -1
  store i32 %dec, i32* %h, align 4
  %tobool4 = icmp ne i32 %14, 0
  br i1 %tobool4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %15 = load i32, i32* %type.addr, align 4
  switch i32 %15, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 2, label %sw.bb.6
  ]

sw.bb:                                            ; preds = %while.body, %while.body
  %16 = load i8*, i8** %s, align 8
  %17 = load i8*, i8** %d, align 8
  %18 = load i8*, i8** %m, align 8
  %19 = load i8*, i8** %bg.addr, align 8
  %20 = load i32, i32* %cut.addr, align 4
  %21 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %21, i32 0, i32 8
  %22 = load i32, i32* %w, align 4
  %23 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %bytes = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %23, i32 0, i32 10
  %24 = load i32, i32* %bytes, align 4
  %25 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %bytes5 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %25, i32 0, i32 10
  %26 = load i32, i32* %bytes5, align 4
  call void @extract_from_inten_pixels(i8* %16, i8* %17, i8* %18, i8* %19, i32 %20, i32 %22, i32 %24, i32 %26)
  br label %sw.epilog

sw.bb.6:                                          ; preds = %while.body
  %27 = load i8*, i8** %s, align 8
  %28 = load i8*, i8** %d, align 8
  %29 = load i8*, i8** %m, align 8
  %30 = load i8*, i8** %cmap.addr, align 8
  %31 = load i8*, i8** %bg.addr, align 8
  %32 = load i32, i32* %cut.addr, align 4
  %33 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w7 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %33, i32 0, i32 8
  %34 = load i32, i32* %w7, align 4
  %35 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %bytes8 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %35, i32 0, i32 10
  %36 = load i32, i32* %bytes8, align 4
  %37 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %bytes9 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %37, i32 0, i32 10
  %38 = load i32, i32* %bytes9, align 4
  call void @extract_from_indexed_pixels(i8* %27, i8* %28, i8* %29, i8* %30, i8* %31, i32 %32, i32 %34, i32 %36, i32 %38)
  br label %sw.epilog

sw.epilog:                                        ; preds = %while.body, %sw.bb.6, %sw.bb
  %39 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %rowstride = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %39, i32 0, i32 5
  %40 = load i32, i32* %rowstride, align 4
  %41 = load i8*, i8** %s, align 8
  %idx.ext = sext i32 %40 to i64
  %add.ptr = getelementptr inbounds i8, i8* %41, i64 %idx.ext
  store i8* %add.ptr, i8** %s, align 8
  %42 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %rowstride10 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %42, i32 0, i32 5
  %43 = load i32, i32* %rowstride10, align 4
  %44 = load i8*, i8** %d, align 8
  %idx.ext11 = sext i32 %43 to i64
  %add.ptr12 = getelementptr inbounds i8, i8* %44, i64 %idx.ext11
  store i8* %add.ptr12, i8** %d, align 8
  %45 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %tobool13 = icmp ne %struct._PixelRegion* %45, null
  br i1 %tobool13, label %if.then, label %if.end

if.then:                                          ; preds = %sw.epilog
  %46 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %rowstride14 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %46, i32 0, i32 5
  %47 = load i32, i32* %rowstride14, align 4
  %48 = load i8*, i8** %m, align 8
  %idx.ext15 = sext i32 %47 to i64
  %add.ptr16 = getelementptr inbounds i8, i8* %48, i64 %idx.ext15
  store i8* %add.ptr16, i8** %m, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %49 = load i8*, i8** %pr, align 8
  %50 = bitcast i8* %49 to %struct._PixelRegionIterator*
  %call17 = call %struct._PixelRegionIterator* @pixel_regions_process(%struct._PixelRegionIterator* %50)
  %51 = bitcast %struct._PixelRegionIterator* %call17 to i8*
  store i8* %51, i8** %pr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @convolve_region(%struct._PixelRegion* %srcR, %struct._PixelRegion* %destR, float* %matrix, i32 %size, double %divisor, i32 %mode, i32 %alpha_weighting) #0 {
entry:
  %srcR.addr = alloca %struct._PixelRegion*, align 8
  %destR.addr = alloca %struct._PixelRegion*, align 8
  %matrix.addr = alloca float*, align 8
  %size.addr = alloca i32, align 4
  %divisor.addr = alloca double, align 8
  %mode.addr = alloca i32, align 4
  %alpha_weighting.addr = alloca i32, align 4
  %src = alloca i8*, align 8
  %dest = alloca i8*, align 8
  %bytes = alloca i32, align 4
  %a_byte = alloca i32, align 4
  %rowstride = alloca i32, align 4
  %margin = alloca i32, align 4
  %x1 = alloca i32, align 4
  %y1 = alloca i32, align 4
  %x2 = alloca i32, align 4
  %y2 = alloca i32, align 4
  %x9 = alloca i32, align 4
  %y10 = alloca i32, align 4
  %offset = alloca i32, align 4
  %d = alloca i8*, align 8
  %m = alloca float*, align 8
  %total = alloca [4 x double], align 16
  %weighted_divisor = alloca double, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %b = alloca i32, align 4
  %xx = alloca i32, align 4
  %yy = alloca i32, align 4
  %s = alloca i8*, align 8
  %a = alloca i8, align 1
  %mult_alpha = alloca double, align 8
  %m149 = alloca float*, align 8
  %total150 = alloca [4 x double], align 16
  %i151 = alloca i32, align 4
  %j152 = alloca i32, align 4
  %b153 = alloca i32, align 4
  %xx166 = alloca i32, align 4
  %yy179 = alloca i32, align 4
  %s192 = alloca i8*, align 8
  store %struct._PixelRegion* %srcR, %struct._PixelRegion** %srcR.addr, align 8
  store %struct._PixelRegion* %destR, %struct._PixelRegion** %destR.addr, align 8
  store float* %matrix, float** %matrix.addr, align 8
  store i32 %size, i32* %size.addr, align 4
  store double %divisor, double* %divisor.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  store i32 %alpha_weighting, i32* %alpha_weighting.addr, align 4
  %0 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %data = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %0, i32 0, i32 0
  %1 = load i8*, i8** %data, align 8
  store i8* %1, i8** %src, align 8
  %2 = load %struct._PixelRegion*, %struct._PixelRegion** %destR.addr, align 8
  %data1 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %2, i32 0, i32 0
  %3 = load i8*, i8** %data1, align 8
  store i8* %3, i8** %dest, align 8
  %4 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %bytes2 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %4, i32 0, i32 10
  %5 = load i32, i32* %bytes2, align 4
  store i32 %5, i32* %bytes, align 4
  %6 = load i32, i32* %bytes, align 4
  %sub = sub nsw i32 %6, 1
  store i32 %sub, i32* %a_byte, align 4
  %7 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %rowstride3 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %7, i32 0, i32 5
  %8 = load i32, i32* %rowstride3, align 4
  store i32 %8, i32* %rowstride, align 4
  %9 = load i32, i32* %size.addr, align 4
  %div = sdiv i32 %9, 2
  store i32 %div, i32* %margin, align 4
  %10 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %x = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %10, i32 0, i32 6
  %11 = load i32, i32* %x, align 4
  store i32 %11, i32* %x1, align 4
  %12 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %y = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %12, i32 0, i32 7
  %13 = load i32, i32* %y, align 4
  store i32 %13, i32* %y1, align 4
  %14 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %x4 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %14, i32 0, i32 6
  %15 = load i32, i32* %x4, align 4
  %16 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %16, i32 0, i32 8
  %17 = load i32, i32* %w, align 4
  %add = add nsw i32 %15, %17
  %sub5 = sub nsw i32 %add, 1
  store i32 %sub5, i32* %x2, align 4
  %18 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %y6 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %18, i32 0, i32 7
  %19 = load i32, i32* %y6, align 4
  %20 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %h = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %20, i32 0, i32 9
  %21 = load i32, i32* %h, align 4
  %add7 = add nsw i32 %19, %21
  %sub8 = sub nsw i32 %add7, 1
  store i32 %sub8, i32* %y2, align 4
  %22 = load i32, i32* %mode.addr, align 4
  %cmp = icmp eq i32 %22, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 128, i32* %offset, align 4
  store i32 0, i32* %mode.addr, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 0, i32* %offset, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 0, i32* %y10, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.281, %if.end
  %23 = load i32, i32* %y10, align 4
  %24 = load %struct._PixelRegion*, %struct._PixelRegion** %destR.addr, align 8
  %h11 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %24, i32 0, i32 9
  %25 = load i32, i32* %h11, align 4
  %cmp12 = icmp slt i32 %23, %25
  br i1 %cmp12, label %for.body, label %for.end.283

for.body:                                         ; preds = %for.cond
  %26 = load i8*, i8** %dest, align 8
  store i8* %26, i8** %d, align 8
  %27 = load i32, i32* %alpha_weighting.addr, align 4
  %tobool = icmp ne i32 %27, 0
  br i1 %tobool, label %if.then.13, label %if.else.143

if.then.13:                                       ; preds = %for.body
  store i32 0, i32* %x9, align 4
  br label %for.cond.14

for.cond.14:                                      ; preds = %for.inc.140, %if.then.13
  %28 = load i32, i32* %x9, align 4
  %29 = load %struct._PixelRegion*, %struct._PixelRegion** %destR.addr, align 8
  %w15 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %29, i32 0, i32 8
  %30 = load i32, i32* %w15, align 4
  %cmp16 = icmp slt i32 %28, %30
  br i1 %cmp16, label %for.body.17, label %for.end.142

for.body.17:                                      ; preds = %for.cond.14
  %31 = load float*, float** %matrix.addr, align 8
  store float* %31, float** %m, align 8
  %32 = bitcast [4 x double]* %total to i8*
  call void @llvm.memset.p0i8.i64(i8* %32, i8 0, i64 32, i32 16, i1 false)
  store double 0.000000e+00, double* %weighted_divisor, align 8
  %33 = load i32, i32* %y10, align 4
  %34 = load i32, i32* %margin, align 4
  %sub18 = sub nsw i32 %33, %34
  store i32 %sub18, i32* %j, align 4
  br label %for.cond.19

for.cond.19:                                      ; preds = %for.inc.72, %for.body.17
  %35 = load i32, i32* %j, align 4
  %36 = load i32, i32* %y10, align 4
  %37 = load i32, i32* %margin, align 4
  %add20 = add nsw i32 %36, %37
  %cmp21 = icmp sle i32 %35, %add20
  br i1 %cmp21, label %for.body.22, label %for.end.74

for.body.22:                                      ; preds = %for.cond.19
  %38 = load i32, i32* %x9, align 4
  %39 = load i32, i32* %margin, align 4
  %sub23 = sub nsw i32 %38, %39
  store i32 %sub23, i32* %i, align 4
  br label %for.cond.24

for.cond.24:                                      ; preds = %for.inc.69, %for.body.22
  %40 = load i32, i32* %i, align 4
  %41 = load i32, i32* %x9, align 4
  %42 = load i32, i32* %margin, align 4
  %add25 = add nsw i32 %41, %42
  %cmp26 = icmp sle i32 %40, %add25
  br i1 %cmp26, label %for.body.27, label %for.end.71

for.body.27:                                      ; preds = %for.cond.24
  %43 = load i32, i32* %i, align 4
  %44 = load i32, i32* %x2, align 4
  %cmp28 = icmp sgt i32 %43, %44
  br i1 %cmp28, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body.27
  %45 = load i32, i32* %x2, align 4
  br label %cond.end.32

cond.false:                                       ; preds = %for.body.27
  %46 = load i32, i32* %i, align 4
  %47 = load i32, i32* %x1, align 4
  %cmp29 = icmp slt i32 %46, %47
  br i1 %cmp29, label %cond.true.30, label %cond.false.31

cond.true.30:                                     ; preds = %cond.false
  %48 = load i32, i32* %x1, align 4
  br label %cond.end

cond.false.31:                                    ; preds = %cond.false
  %49 = load i32, i32* %i, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false.31, %cond.true.30
  %cond = phi i32 [ %48, %cond.true.30 ], [ %49, %cond.false.31 ]
  br label %cond.end.32

cond.end.32:                                      ; preds = %cond.end, %cond.true
  %cond33 = phi i32 [ %45, %cond.true ], [ %cond, %cond.end ]
  store i32 %cond33, i32* %xx, align 4
  %50 = load i32, i32* %j, align 4
  %51 = load i32, i32* %y2, align 4
  %cmp34 = icmp sgt i32 %50, %51
  br i1 %cmp34, label %cond.true.35, label %cond.false.36

cond.true.35:                                     ; preds = %cond.end.32
  %52 = load i32, i32* %y2, align 4
  br label %cond.end.42

cond.false.36:                                    ; preds = %cond.end.32
  %53 = load i32, i32* %j, align 4
  %54 = load i32, i32* %y1, align 4
  %cmp37 = icmp slt i32 %53, %54
  br i1 %cmp37, label %cond.true.38, label %cond.false.39

cond.true.38:                                     ; preds = %cond.false.36
  %55 = load i32, i32* %y1, align 4
  br label %cond.end.40

cond.false.39:                                    ; preds = %cond.false.36
  %56 = load i32, i32* %j, align 4
  br label %cond.end.40

cond.end.40:                                      ; preds = %cond.false.39, %cond.true.38
  %cond41 = phi i32 [ %55, %cond.true.38 ], [ %56, %cond.false.39 ]
  br label %cond.end.42

cond.end.42:                                      ; preds = %cond.end.40, %cond.true.35
  %cond43 = phi i32 [ %52, %cond.true.35 ], [ %cond41, %cond.end.40 ]
  store i32 %cond43, i32* %yy, align 4
  %57 = load i8*, i8** %src, align 8
  %58 = load i32, i32* %yy, align 4
  %59 = load i32, i32* %rowstride, align 4
  %mul = mul nsw i32 %58, %59
  %idx.ext = sext i32 %mul to i64
  %add.ptr = getelementptr inbounds i8, i8* %57, i64 %idx.ext
  %60 = load i32, i32* %xx, align 4
  %61 = load i32, i32* %bytes, align 4
  %mul44 = mul nsw i32 %60, %61
  %idx.ext45 = sext i32 %mul44 to i64
  %add.ptr46 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.ext45
  store i8* %add.ptr46, i8** %s, align 8
  %62 = load i32, i32* %a_byte, align 4
  %idxprom = sext i32 %62 to i64
  %63 = load i8*, i8** %s, align 8
  %arrayidx = getelementptr inbounds i8, i8* %63, i64 %idxprom
  %64 = load i8, i8* %arrayidx, align 1
  store i8 %64, i8* %a, align 1
  %65 = load i8, i8* %a, align 1
  %tobool47 = icmp ne i8 %65, 0
  br i1 %tobool47, label %if.then.48, label %if.end.68

if.then.48:                                       ; preds = %cond.end.42
  %66 = load float*, float** %m, align 8
  %67 = load float, float* %66, align 4
  %68 = load i8, i8* %a, align 1
  %conv = zext i8 %68 to i32
  %conv49 = sitofp i32 %conv to float
  %mul50 = fmul float %67, %conv49
  %conv51 = fpext float %mul50 to double
  store double %conv51, double* %mult_alpha, align 8
  %69 = load double, double* %mult_alpha, align 8
  %70 = load double, double* %weighted_divisor, align 8
  %add52 = fadd double %70, %69
  store double %add52, double* %weighted_divisor, align 8
  store i32 0, i32* %b, align 4
  br label %for.cond.53

for.cond.53:                                      ; preds = %for.inc, %if.then.48
  %71 = load i32, i32* %b, align 4
  %72 = load i32, i32* %a_byte, align 4
  %cmp54 = icmp slt i32 %71, %72
  br i1 %cmp54, label %for.body.56, label %for.end

for.body.56:                                      ; preds = %for.cond.53
  %73 = load double, double* %mult_alpha, align 8
  %74 = load i32, i32* %b, align 4
  %idxprom57 = sext i32 %74 to i64
  %75 = load i8*, i8** %s, align 8
  %arrayidx58 = getelementptr inbounds i8, i8* %75, i64 %idxprom57
  %76 = load i8, i8* %arrayidx58, align 1
  %conv59 = zext i8 %76 to i32
  %conv60 = sitofp i32 %conv59 to double
  %mul61 = fmul double %73, %conv60
  %77 = load i32, i32* %b, align 4
  %idxprom62 = sext i32 %77 to i64
  %arrayidx63 = getelementptr inbounds [4 x double], [4 x double]* %total, i32 0, i64 %idxprom62
  %78 = load double, double* %arrayidx63, align 8
  %add64 = fadd double %78, %mul61
  store double %add64, double* %arrayidx63, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body.56
  %79 = load i32, i32* %b, align 4
  %inc = add nsw i32 %79, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond.53

for.end:                                          ; preds = %for.cond.53
  %80 = load double, double* %mult_alpha, align 8
  %81 = load i32, i32* %a_byte, align 4
  %idxprom65 = sext i32 %81 to i64
  %arrayidx66 = getelementptr inbounds [4 x double], [4 x double]* %total, i32 0, i64 %idxprom65
  %82 = load double, double* %arrayidx66, align 8
  %add67 = fadd double %82, %80
  store double %add67, double* %arrayidx66, align 8
  br label %if.end.68

if.end.68:                                        ; preds = %for.end, %cond.end.42
  br label %for.inc.69

for.inc.69:                                       ; preds = %if.end.68
  %83 = load i32, i32* %i, align 4
  %inc70 = add nsw i32 %83, 1
  store i32 %inc70, i32* %i, align 4
  %84 = load float*, float** %m, align 8
  %incdec.ptr = getelementptr inbounds float, float* %84, i32 1
  store float* %incdec.ptr, float** %m, align 8
  br label %for.cond.24

for.end.71:                                       ; preds = %for.cond.24
  br label %for.inc.72

for.inc.72:                                       ; preds = %for.end.71
  %85 = load i32, i32* %j, align 4
  %inc73 = add nsw i32 %85, 1
  store i32 %inc73, i32* %j, align 4
  br label %for.cond.19

for.end.74:                                       ; preds = %for.cond.19
  %86 = load double, double* %weighted_divisor, align 8
  %cmp75 = fcmp oeq double %86, 0.000000e+00
  br i1 %cmp75, label %if.then.77, label %if.end.78

if.then.77:                                       ; preds = %for.end.74
  %87 = load double, double* %divisor.addr, align 8
  store double %87, double* %weighted_divisor, align 8
  br label %if.end.78

if.end.78:                                        ; preds = %if.then.77, %for.end.74
  store i32 0, i32* %b, align 4
  br label %for.cond.79

for.cond.79:                                      ; preds = %for.inc.86, %if.end.78
  %88 = load i32, i32* %b, align 4
  %89 = load i32, i32* %a_byte, align 4
  %cmp80 = icmp slt i32 %88, %89
  br i1 %cmp80, label %for.body.82, label %for.end.88

for.body.82:                                      ; preds = %for.cond.79
  %90 = load double, double* %weighted_divisor, align 8
  %91 = load i32, i32* %b, align 4
  %idxprom83 = sext i32 %91 to i64
  %arrayidx84 = getelementptr inbounds [4 x double], [4 x double]* %total, i32 0, i64 %idxprom83
  %92 = load double, double* %arrayidx84, align 8
  %div85 = fdiv double %92, %90
  store double %div85, double* %arrayidx84, align 8
  br label %for.inc.86

for.inc.86:                                       ; preds = %for.body.82
  %93 = load i32, i32* %b, align 4
  %inc87 = add nsw i32 %93, 1
  store i32 %inc87, i32* %b, align 4
  br label %for.cond.79

for.end.88:                                       ; preds = %for.cond.79
  %94 = load double, double* %divisor.addr, align 8
  %95 = load i32, i32* %a_byte, align 4
  %idxprom89 = sext i32 %95 to i64
  %arrayidx90 = getelementptr inbounds [4 x double], [4 x double]* %total, i32 0, i64 %idxprom89
  %96 = load double, double* %arrayidx90, align 8
  %div91 = fdiv double %96, %94
  store double %div91, double* %arrayidx90, align 8
  store i32 0, i32* %b, align 4
  br label %for.cond.92

for.cond.92:                                      ; preds = %for.inc.137, %for.end.88
  %97 = load i32, i32* %b, align 4
  %98 = load i32, i32* %bytes, align 4
  %cmp93 = icmp slt i32 %97, %98
  br i1 %cmp93, label %for.body.95, label %for.end.139

for.body.95:                                      ; preds = %for.cond.92
  %99 = load i32, i32* %offset, align 4
  %conv96 = sitofp i32 %99 to double
  %100 = load i32, i32* %b, align 4
  %idxprom97 = sext i32 %100 to i64
  %arrayidx98 = getelementptr inbounds [4 x double], [4 x double]* %total, i32 0, i64 %idxprom97
  %101 = load double, double* %arrayidx98, align 8
  %add99 = fadd double %101, %conv96
  store double %add99, double* %arrayidx98, align 8
  %102 = load i32, i32* %mode.addr, align 4
  %cmp100 = icmp ne i32 %102, 0
  br i1 %cmp100, label %land.lhs.true, label %if.end.112

land.lhs.true:                                    ; preds = %for.body.95
  %103 = load i32, i32* %b, align 4
  %idxprom102 = sext i32 %103 to i64
  %arrayidx103 = getelementptr inbounds [4 x double], [4 x double]* %total, i32 0, i64 %idxprom102
  %104 = load double, double* %arrayidx103, align 8
  %cmp104 = fcmp olt double %104, 0.000000e+00
  br i1 %cmp104, label %if.then.106, label %if.end.112

if.then.106:                                      ; preds = %land.lhs.true
  %105 = load i32, i32* %b, align 4
  %idxprom107 = sext i32 %105 to i64
  %arrayidx108 = getelementptr inbounds [4 x double], [4 x double]* %total, i32 0, i64 %idxprom107
  %106 = load double, double* %arrayidx108, align 8
  %sub109 = fsub double -0.000000e+00, %106
  %107 = load i32, i32* %b, align 4
  %idxprom110 = sext i32 %107 to i64
  %arrayidx111 = getelementptr inbounds [4 x double], [4 x double]* %total, i32 0, i64 %idxprom110
  store double %sub109, double* %arrayidx111, align 8
  br label %if.end.112

if.end.112:                                       ; preds = %if.then.106, %land.lhs.true, %for.body.95
  %108 = load i32, i32* %b, align 4
  %idxprom113 = sext i32 %108 to i64
  %arrayidx114 = getelementptr inbounds [4 x double], [4 x double]* %total, i32 0, i64 %idxprom113
  %109 = load double, double* %arrayidx114, align 8
  %cmp115 = fcmp olt double %109, 0.000000e+00
  br i1 %cmp115, label %if.then.117, label %if.else.119

if.then.117:                                      ; preds = %if.end.112
  %110 = load i8*, i8** %d, align 8
  %incdec.ptr118 = getelementptr inbounds i8, i8* %110, i32 1
  store i8* %incdec.ptr118, i8** %d, align 8
  store i8 0, i8* %110, align 1
  br label %if.end.136

if.else.119:                                      ; preds = %if.end.112
  %111 = load i32, i32* %b, align 4
  %idxprom120 = sext i32 %111 to i64
  %arrayidx121 = getelementptr inbounds [4 x double], [4 x double]* %total, i32 0, i64 %idxprom120
  %112 = load double, double* %arrayidx121, align 8
  %cmp122 = fcmp ogt double %112, 2.550000e+02
  br i1 %cmp122, label %cond.true.124, label %cond.false.125

cond.true.124:                                    ; preds = %if.else.119
  br label %cond.end.132

cond.false.125:                                   ; preds = %if.else.119
  %113 = load i32, i32* %b, align 4
  %idxprom126 = sext i32 %113 to i64
  %arrayidx127 = getelementptr inbounds [4 x double], [4 x double]* %total, i32 0, i64 %idxprom126
  %114 = load double, double* %arrayidx127, align 8
  %add128 = fadd double %114, 5.000000e-01
  %conv129 = fptosi double %add128 to i32
  %conv130 = trunc i32 %conv129 to i8
  %conv131 = zext i8 %conv130 to i32
  br label %cond.end.132

cond.end.132:                                     ; preds = %cond.false.125, %cond.true.124
  %cond133 = phi i32 [ 255, %cond.true.124 ], [ %conv131, %cond.false.125 ]
  %conv134 = trunc i32 %cond133 to i8
  %115 = load i8*, i8** %d, align 8
  %incdec.ptr135 = getelementptr inbounds i8, i8* %115, i32 1
  store i8* %incdec.ptr135, i8** %d, align 8
  store i8 %conv134, i8* %115, align 1
  br label %if.end.136

if.end.136:                                       ; preds = %cond.end.132, %if.then.117
  br label %for.inc.137

for.inc.137:                                      ; preds = %if.end.136
  %116 = load i32, i32* %b, align 4
  %inc138 = add nsw i32 %116, 1
  store i32 %inc138, i32* %b, align 4
  br label %for.cond.92

for.end.139:                                      ; preds = %for.cond.92
  br label %for.inc.140

for.inc.140:                                      ; preds = %for.end.139
  %117 = load i32, i32* %x9, align 4
  %inc141 = add nsw i32 %117, 1
  store i32 %inc141, i32* %x9, align 4
  br label %for.cond.14

for.end.142:                                      ; preds = %for.cond.14
  br label %if.end.277

if.else.143:                                      ; preds = %for.body
  store i32 0, i32* %x9, align 4
  br label %for.cond.144

for.cond.144:                                     ; preds = %for.inc.274, %if.else.143
  %118 = load i32, i32* %x9, align 4
  %119 = load %struct._PixelRegion*, %struct._PixelRegion** %destR.addr, align 8
  %w145 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %119, i32 0, i32 8
  %120 = load i32, i32* %w145, align 4
  %cmp146 = icmp slt i32 %118, %120
  br i1 %cmp146, label %for.body.148, label %for.end.276

for.body.148:                                     ; preds = %for.cond.144
  %121 = load float*, float** %matrix.addr, align 8
  store float* %121, float** %m149, align 8
  %122 = bitcast [4 x double]* %total150 to i8*
  call void @llvm.memset.p0i8.i64(i8* %122, i8 0, i64 32, i32 16, i1 false)
  %123 = load i32, i32* %y10, align 4
  %124 = load i32, i32* %margin, align 4
  %sub154 = sub nsw i32 %123, %124
  store i32 %sub154, i32* %j152, align 4
  br label %for.cond.155

for.cond.155:                                     ; preds = %for.inc.219, %for.body.148
  %125 = load i32, i32* %j152, align 4
  %126 = load i32, i32* %y10, align 4
  %127 = load i32, i32* %margin, align 4
  %add156 = add nsw i32 %126, %127
  %cmp157 = icmp sle i32 %125, %add156
  br i1 %cmp157, label %for.body.159, label %for.end.221

for.body.159:                                     ; preds = %for.cond.155
  %128 = load i32, i32* %x9, align 4
  %129 = load i32, i32* %margin, align 4
  %sub160 = sub nsw i32 %128, %129
  store i32 %sub160, i32* %i151, align 4
  br label %for.cond.161

for.cond.161:                                     ; preds = %for.inc.215, %for.body.159
  %130 = load i32, i32* %i151, align 4
  %131 = load i32, i32* %x9, align 4
  %132 = load i32, i32* %margin, align 4
  %add162 = add nsw i32 %131, %132
  %cmp163 = icmp sle i32 %130, %add162
  br i1 %cmp163, label %for.body.165, label %for.end.218

for.body.165:                                     ; preds = %for.cond.161
  %133 = load i32, i32* %i151, align 4
  %134 = load i32, i32* %x2, align 4
  %cmp167 = icmp sgt i32 %133, %134
  br i1 %cmp167, label %cond.true.169, label %cond.false.170

cond.true.169:                                    ; preds = %for.body.165
  %135 = load i32, i32* %x2, align 4
  br label %cond.end.177

cond.false.170:                                   ; preds = %for.body.165
  %136 = load i32, i32* %i151, align 4
  %137 = load i32, i32* %x1, align 4
  %cmp171 = icmp slt i32 %136, %137
  br i1 %cmp171, label %cond.true.173, label %cond.false.174

cond.true.173:                                    ; preds = %cond.false.170
  %138 = load i32, i32* %x1, align 4
  br label %cond.end.175

cond.false.174:                                   ; preds = %cond.false.170
  %139 = load i32, i32* %i151, align 4
  br label %cond.end.175

cond.end.175:                                     ; preds = %cond.false.174, %cond.true.173
  %cond176 = phi i32 [ %138, %cond.true.173 ], [ %139, %cond.false.174 ]
  br label %cond.end.177

cond.end.177:                                     ; preds = %cond.end.175, %cond.true.169
  %cond178 = phi i32 [ %135, %cond.true.169 ], [ %cond176, %cond.end.175 ]
  store i32 %cond178, i32* %xx166, align 4
  %140 = load i32, i32* %j152, align 4
  %141 = load i32, i32* %y2, align 4
  %cmp180 = icmp sgt i32 %140, %141
  br i1 %cmp180, label %cond.true.182, label %cond.false.183

cond.true.182:                                    ; preds = %cond.end.177
  %142 = load i32, i32* %y2, align 4
  br label %cond.end.190

cond.false.183:                                   ; preds = %cond.end.177
  %143 = load i32, i32* %j152, align 4
  %144 = load i32, i32* %y1, align 4
  %cmp184 = icmp slt i32 %143, %144
  br i1 %cmp184, label %cond.true.186, label %cond.false.187

cond.true.186:                                    ; preds = %cond.false.183
  %145 = load i32, i32* %y1, align 4
  br label %cond.end.188

cond.false.187:                                   ; preds = %cond.false.183
  %146 = load i32, i32* %j152, align 4
  br label %cond.end.188

cond.end.188:                                     ; preds = %cond.false.187, %cond.true.186
  %cond189 = phi i32 [ %145, %cond.true.186 ], [ %146, %cond.false.187 ]
  br label %cond.end.190

cond.end.190:                                     ; preds = %cond.end.188, %cond.true.182
  %cond191 = phi i32 [ %142, %cond.true.182 ], [ %cond189, %cond.end.188 ]
  store i32 %cond191, i32* %yy179, align 4
  %147 = load i8*, i8** %src, align 8
  %148 = load i32, i32* %yy179, align 4
  %149 = load i32, i32* %rowstride, align 4
  %mul193 = mul nsw i32 %148, %149
  %idx.ext194 = sext i32 %mul193 to i64
  %add.ptr195 = getelementptr inbounds i8, i8* %147, i64 %idx.ext194
  %150 = load i32, i32* %xx166, align 4
  %151 = load i32, i32* %bytes, align 4
  %mul196 = mul nsw i32 %150, %151
  %idx.ext197 = sext i32 %mul196 to i64
  %add.ptr198 = getelementptr inbounds i8, i8* %add.ptr195, i64 %idx.ext197
  store i8* %add.ptr198, i8** %s192, align 8
  store i32 0, i32* %b153, align 4
  br label %for.cond.199

for.cond.199:                                     ; preds = %for.inc.212, %cond.end.190
  %152 = load i32, i32* %b153, align 4
  %153 = load i32, i32* %bytes, align 4
  %cmp200 = icmp slt i32 %152, %153
  br i1 %cmp200, label %for.body.202, label %for.end.214

for.body.202:                                     ; preds = %for.cond.199
  %154 = load float*, float** %m149, align 8
  %155 = load float, float* %154, align 4
  %156 = load i32, i32* %b153, align 4
  %idxprom203 = sext i32 %156 to i64
  %157 = load i8*, i8** %s192, align 8
  %arrayidx204 = getelementptr inbounds i8, i8* %157, i64 %idxprom203
  %158 = load i8, i8* %arrayidx204, align 1
  %conv205 = zext i8 %158 to i32
  %conv206 = sitofp i32 %conv205 to float
  %mul207 = fmul float %155, %conv206
  %conv208 = fpext float %mul207 to double
  %159 = load i32, i32* %b153, align 4
  %idxprom209 = sext i32 %159 to i64
  %arrayidx210 = getelementptr inbounds [4 x double], [4 x double]* %total150, i32 0, i64 %idxprom209
  %160 = load double, double* %arrayidx210, align 8
  %add211 = fadd double %160, %conv208
  store double %add211, double* %arrayidx210, align 8
  br label %for.inc.212

for.inc.212:                                      ; preds = %for.body.202
  %161 = load i32, i32* %b153, align 4
  %inc213 = add nsw i32 %161, 1
  store i32 %inc213, i32* %b153, align 4
  br label %for.cond.199

for.end.214:                                      ; preds = %for.cond.199
  br label %for.inc.215

for.inc.215:                                      ; preds = %for.end.214
  %162 = load i32, i32* %i151, align 4
  %inc216 = add nsw i32 %162, 1
  store i32 %inc216, i32* %i151, align 4
  %163 = load float*, float** %m149, align 8
  %incdec.ptr217 = getelementptr inbounds float, float* %163, i32 1
  store float* %incdec.ptr217, float** %m149, align 8
  br label %for.cond.161

for.end.218:                                      ; preds = %for.cond.161
  br label %for.inc.219

for.inc.219:                                      ; preds = %for.end.218
  %164 = load i32, i32* %j152, align 4
  %inc220 = add nsw i32 %164, 1
  store i32 %inc220, i32* %j152, align 4
  br label %for.cond.155

for.end.221:                                      ; preds = %for.cond.155
  store i32 0, i32* %b153, align 4
  br label %for.cond.222

for.cond.222:                                     ; preds = %for.inc.271, %for.end.221
  %165 = load i32, i32* %b153, align 4
  %166 = load i32, i32* %bytes, align 4
  %cmp223 = icmp slt i32 %165, %166
  br i1 %cmp223, label %for.body.225, label %for.end.273

for.body.225:                                     ; preds = %for.cond.222
  %167 = load i32, i32* %b153, align 4
  %idxprom226 = sext i32 %167 to i64
  %arrayidx227 = getelementptr inbounds [4 x double], [4 x double]* %total150, i32 0, i64 %idxprom226
  %168 = load double, double* %arrayidx227, align 8
  %169 = load double, double* %divisor.addr, align 8
  %div228 = fdiv double %168, %169
  %170 = load i32, i32* %offset, align 4
  %conv229 = sitofp i32 %170 to double
  %add230 = fadd double %div228, %conv229
  %171 = load i32, i32* %b153, align 4
  %idxprom231 = sext i32 %171 to i64
  %arrayidx232 = getelementptr inbounds [4 x double], [4 x double]* %total150, i32 0, i64 %idxprom231
  store double %add230, double* %arrayidx232, align 8
  %172 = load i32, i32* %mode.addr, align 4
  %cmp233 = icmp ne i32 %172, 0
  br i1 %cmp233, label %land.lhs.true.235, label %if.end.246

land.lhs.true.235:                                ; preds = %for.body.225
  %173 = load i32, i32* %b153, align 4
  %idxprom236 = sext i32 %173 to i64
  %arrayidx237 = getelementptr inbounds [4 x double], [4 x double]* %total150, i32 0, i64 %idxprom236
  %174 = load double, double* %arrayidx237, align 8
  %cmp238 = fcmp olt double %174, 0.000000e+00
  br i1 %cmp238, label %if.then.240, label %if.end.246

if.then.240:                                      ; preds = %land.lhs.true.235
  %175 = load i32, i32* %b153, align 4
  %idxprom241 = sext i32 %175 to i64
  %arrayidx242 = getelementptr inbounds [4 x double], [4 x double]* %total150, i32 0, i64 %idxprom241
  %176 = load double, double* %arrayidx242, align 8
  %sub243 = fsub double -0.000000e+00, %176
  %177 = load i32, i32* %b153, align 4
  %idxprom244 = sext i32 %177 to i64
  %arrayidx245 = getelementptr inbounds [4 x double], [4 x double]* %total150, i32 0, i64 %idxprom244
  store double %sub243, double* %arrayidx245, align 8
  br label %if.end.246

if.end.246:                                       ; preds = %if.then.240, %land.lhs.true.235, %for.body.225
  %178 = load i32, i32* %b153, align 4
  %idxprom247 = sext i32 %178 to i64
  %arrayidx248 = getelementptr inbounds [4 x double], [4 x double]* %total150, i32 0, i64 %idxprom247
  %179 = load double, double* %arrayidx248, align 8
  %cmp249 = fcmp olt double %179, 0.000000e+00
  br i1 %cmp249, label %if.then.251, label %if.else.253

if.then.251:                                      ; preds = %if.end.246
  %180 = load i8*, i8** %d, align 8
  %incdec.ptr252 = getelementptr inbounds i8, i8* %180, i32 1
  store i8* %incdec.ptr252, i8** %d, align 8
  store i8 0, i8* %180, align 1
  br label %if.end.270

if.else.253:                                      ; preds = %if.end.246
  %181 = load i32, i32* %b153, align 4
  %idxprom254 = sext i32 %181 to i64
  %arrayidx255 = getelementptr inbounds [4 x double], [4 x double]* %total150, i32 0, i64 %idxprom254
  %182 = load double, double* %arrayidx255, align 8
  %cmp256 = fcmp ogt double %182, 2.550000e+02
  br i1 %cmp256, label %cond.true.258, label %cond.false.259

cond.true.258:                                    ; preds = %if.else.253
  br label %cond.end.266

cond.false.259:                                   ; preds = %if.else.253
  %183 = load i32, i32* %b153, align 4
  %idxprom260 = sext i32 %183 to i64
  %arrayidx261 = getelementptr inbounds [4 x double], [4 x double]* %total150, i32 0, i64 %idxprom260
  %184 = load double, double* %arrayidx261, align 8
  %add262 = fadd double %184, 5.000000e-01
  %conv263 = fptosi double %add262 to i32
  %conv264 = trunc i32 %conv263 to i8
  %conv265 = zext i8 %conv264 to i32
  br label %cond.end.266

cond.end.266:                                     ; preds = %cond.false.259, %cond.true.258
  %cond267 = phi i32 [ 255, %cond.true.258 ], [ %conv265, %cond.false.259 ]
  %conv268 = trunc i32 %cond267 to i8
  %185 = load i8*, i8** %d, align 8
  %incdec.ptr269 = getelementptr inbounds i8, i8* %185, i32 1
  store i8* %incdec.ptr269, i8** %d, align 8
  store i8 %conv268, i8* %185, align 1
  br label %if.end.270

if.end.270:                                       ; preds = %cond.end.266, %if.then.251
  br label %for.inc.271

for.inc.271:                                      ; preds = %if.end.270
  %186 = load i32, i32* %b153, align 4
  %inc272 = add nsw i32 %186, 1
  store i32 %inc272, i32* %b153, align 4
  br label %for.cond.222

for.end.273:                                      ; preds = %for.cond.222
  br label %for.inc.274

for.inc.274:                                      ; preds = %for.end.273
  %187 = load i32, i32* %x9, align 4
  %inc275 = add nsw i32 %187, 1
  store i32 %inc275, i32* %x9, align 4
  br label %for.cond.144

for.end.276:                                      ; preds = %for.cond.144
  br label %if.end.277

if.end.277:                                       ; preds = %for.end.276, %for.end.142
  %188 = load %struct._PixelRegion*, %struct._PixelRegion** %destR.addr, align 8
  %rowstride278 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %188, i32 0, i32 5
  %189 = load i32, i32* %rowstride278, align 4
  %190 = load i8*, i8** %dest, align 8
  %idx.ext279 = sext i32 %189 to i64
  %add.ptr280 = getelementptr inbounds i8, i8* %190, i64 %idx.ext279
  store i8* %add.ptr280, i8** %dest, align 8
  br label %for.inc.281

for.inc.281:                                      ; preds = %if.end.277
  %191 = load i32, i32* %y10, align 4
  %inc282 = add nsw i32 %191, 1
  store i32 %inc282, i32* %y10, align 4
  br label %for.cond

for.end.283:                                      ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @multiply_alpha_region(%struct._PixelRegion* %srcR) #0 {
entry:
  %srcR.addr = alloca %struct._PixelRegion*, align 8
  %src = alloca i8*, align 8
  %s = alloca i8*, align 8
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  %b = alloca i32, align 4
  %bytes = alloca i32, align 4
  %alpha_val = alloca double, align 8
  store %struct._PixelRegion* %srcR, %struct._PixelRegion** %srcR.addr, align 8
  %0 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %0, i32 0, i32 8
  %1 = load i32, i32* %w, align 4
  store i32 %1, i32* %width, align 4
  %2 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %h = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %2, i32 0, i32 9
  %3 = load i32, i32* %h, align 4
  store i32 %3, i32* %height, align 4
  %4 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %bytes1 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %4, i32 0, i32 10
  %5 = load i32, i32* %bytes1, align 4
  store i32 %5, i32* %bytes, align 4
  %6 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %data = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %6, i32 0, i32 0
  %7 = load i8*, i8** %data, align 8
  store i8* %7, i8** %src, align 8
  store i32 0, i32* %y, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.24, %entry
  %8 = load i32, i32* %y, align 4
  %9 = load i32, i32* %height, align 4
  %cmp = icmp slt i32 %8, %9
  br i1 %cmp, label %for.body, label %for.end.26

for.body:                                         ; preds = %for.cond
  %10 = load i8*, i8** %src, align 8
  store i8* %10, i8** %s, align 8
  store i32 0, i32* %x, align 4
  br label %for.cond.2

for.cond.2:                                       ; preds = %for.inc.19, %for.body
  %11 = load i32, i32* %x, align 4
  %12 = load i32, i32* %width, align 4
  %cmp3 = icmp slt i32 %11, %12
  br i1 %cmp3, label %for.body.4, label %for.end.21

for.body.4:                                       ; preds = %for.cond.2
  %13 = load i32, i32* %bytes, align 4
  %sub = sub nsw i32 %13, 1
  %idxprom = sext i32 %sub to i64
  %14 = load i8*, i8** %s, align 8
  %arrayidx = getelementptr inbounds i8, i8* %14, i64 %idxprom
  %15 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %15 to i32
  %conv5 = sitofp i32 %conv to double
  %mul = fmul double %conv5, 0x3F70101010101010
  store double %mul, double* %alpha_val, align 8
  store i32 0, i32* %b, align 4
  br label %for.cond.6

for.cond.6:                                       ; preds = %for.inc, %for.body.4
  %16 = load i32, i32* %b, align 4
  %17 = load i32, i32* %bytes, align 4
  %sub7 = sub nsw i32 %17, 1
  %cmp8 = icmp slt i32 %16, %sub7
  br i1 %cmp8, label %for.body.10, label %for.end

for.body.10:                                      ; preds = %for.cond.6
  %18 = load i32, i32* %b, align 4
  %idxprom11 = sext i32 %18 to i64
  %19 = load i8*, i8** %s, align 8
  %arrayidx12 = getelementptr inbounds i8, i8* %19, i64 %idxprom11
  %20 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %20 to i32
  %conv14 = sitofp i32 %conv13 to double
  %21 = load double, double* %alpha_val, align 8
  %mul15 = fmul double %conv14, %21
  %add = fadd double 5.000000e-01, %mul15
  %conv16 = fptoui double %add to i8
  %22 = load i32, i32* %b, align 4
  %idxprom17 = sext i32 %22 to i64
  %23 = load i8*, i8** %s, align 8
  %arrayidx18 = getelementptr inbounds i8, i8* %23, i64 %idxprom17
  store i8 %conv16, i8* %arrayidx18, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body.10
  %24 = load i32, i32* %b, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond.6

for.end:                                          ; preds = %for.cond.6
  %25 = load i32, i32* %bytes, align 4
  %26 = load i8*, i8** %s, align 8
  %idx.ext = sext i32 %25 to i64
  %add.ptr = getelementptr inbounds i8, i8* %26, i64 %idx.ext
  store i8* %add.ptr, i8** %s, align 8
  br label %for.inc.19

for.inc.19:                                       ; preds = %for.end
  %27 = load i32, i32* %x, align 4
  %inc20 = add nsw i32 %27, 1
  store i32 %inc20, i32* %x, align 4
  br label %for.cond.2

for.end.21:                                       ; preds = %for.cond.2
  %28 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %rowstride = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %28, i32 0, i32 5
  %29 = load i32, i32* %rowstride, align 4
  %30 = load i8*, i8** %src, align 8
  %idx.ext22 = sext i32 %29 to i64
  %add.ptr23 = getelementptr inbounds i8, i8* %30, i64 %idx.ext22
  store i8* %add.ptr23, i8** %src, align 8
  br label %for.inc.24

for.inc.24:                                       ; preds = %for.end.21
  %31 = load i32, i32* %y, align 4
  %inc25 = add nsw i32 %31, 1
  store i32 %inc25, i32* %y, align 4
  br label %for.cond

for.end.26:                                       ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @separate_alpha_region(%struct._PixelRegion* %srcR) #0 {
entry:
  %srcR.addr = alloca %struct._PixelRegion*, align 8
  %src = alloca i8*, align 8
  %s = alloca i8*, align 8
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  %b = alloca i32, align 4
  %bytes = alloca i32, align 4
  %alpha_recip = alloca double, align 8
  %new_val = alloca i32, align 4
  store %struct._PixelRegion* %srcR, %struct._PixelRegion** %srcR.addr, align 8
  %0 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %0, i32 0, i32 8
  %1 = load i32, i32* %w, align 4
  store i32 %1, i32* %width, align 4
  %2 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %h = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %2, i32 0, i32 9
  %3 = load i32, i32* %h, align 4
  store i32 %3, i32* %height, align 4
  %4 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %bytes1 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %4, i32 0, i32 10
  %5 = load i32, i32* %bytes1, align 4
  store i32 %5, i32* %bytes, align 4
  %6 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %data = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %6, i32 0, i32 0
  %7 = load i8*, i8** %data, align 8
  store i8* %7, i8** %src, align 8
  store i32 0, i32* %y, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.38, %entry
  %8 = load i32, i32* %y, align 4
  %9 = load i32, i32* %height, align 4
  %cmp = icmp slt i32 %8, %9
  br i1 %cmp, label %for.body, label %for.end.40

for.body:                                         ; preds = %for.cond
  %10 = load i8*, i8** %src, align 8
  store i8* %10, i8** %s, align 8
  store i32 0, i32* %x, align 4
  br label %for.cond.2

for.cond.2:                                       ; preds = %for.inc.33, %for.body
  %11 = load i32, i32* %x, align 4
  %12 = load i32, i32* %width, align 4
  %cmp3 = icmp slt i32 %11, %12
  br i1 %cmp3, label %for.body.4, label %for.end.35

for.body.4:                                       ; preds = %for.cond.2
  %13 = load i32, i32* %bytes, align 4
  %sub = sub nsw i32 %13, 1
  %idxprom = sext i32 %sub to i64
  %14 = load i8*, i8** %s, align 8
  %arrayidx = getelementptr inbounds i8, i8* %14, i64 %idxprom
  %15 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %15 to i32
  %cmp5 = icmp ne i32 %conv, 0
  br i1 %cmp5, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body.4
  %16 = load i32, i32* %bytes, align 4
  %sub7 = sub nsw i32 %16, 1
  %idxprom8 = sext i32 %sub7 to i64
  %17 = load i8*, i8** %s, align 8
  %arrayidx9 = getelementptr inbounds i8, i8* %17, i64 %idxprom8
  %18 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %18 to i32
  %cmp11 = icmp ne i32 %conv10, 255
  br i1 %cmp11, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %19 = load i32, i32* %bytes, align 4
  %sub13 = sub nsw i32 %19, 1
  %idxprom14 = sext i32 %sub13 to i64
  %20 = load i8*, i8** %s, align 8
  %arrayidx15 = getelementptr inbounds i8, i8* %20, i64 %idxprom14
  %21 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %21 to i32
  %conv17 = sitofp i32 %conv16 to double
  %div = fdiv double 2.550000e+02, %conv17
  store double %div, double* %alpha_recip, align 8
  store i32 0, i32* %b, align 4
  br label %for.cond.18

for.cond.18:                                      ; preds = %for.inc, %if.then
  %22 = load i32, i32* %b, align 4
  %23 = load i32, i32* %bytes, align 4
  %sub19 = sub nsw i32 %23, 1
  %cmp20 = icmp slt i32 %22, %sub19
  br i1 %cmp20, label %for.body.22, label %for.end

for.body.22:                                      ; preds = %for.cond.18
  %24 = load i32, i32* %b, align 4
  %idxprom23 = sext i32 %24 to i64
  %25 = load i8*, i8** %s, align 8
  %arrayidx24 = getelementptr inbounds i8, i8* %25, i64 %idxprom23
  %26 = load i8, i8* %arrayidx24, align 1
  %conv25 = zext i8 %26 to i32
  %conv26 = sitofp i32 %conv25 to double
  %27 = load double, double* %alpha_recip, align 8
  %mul = fmul double %conv26, %27
  %add = fadd double 5.000000e-01, %mul
  %conv27 = fptosi double %add to i32
  store i32 %conv27, i32* %new_val, align 4
  %28 = load i32, i32* %new_val, align 4
  %cmp28 = icmp slt i32 %28, 255
  br i1 %cmp28, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body.22
  %29 = load i32, i32* %new_val, align 4
  br label %cond.end

cond.false:                                       ; preds = %for.body.22
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %29, %cond.true ], [ 255, %cond.false ]
  store i32 %cond, i32* %new_val, align 4
  %30 = load i32, i32* %new_val, align 4
  %conv30 = trunc i32 %30 to i8
  %31 = load i32, i32* %b, align 4
  %idxprom31 = sext i32 %31 to i64
  %32 = load i8*, i8** %s, align 8
  %arrayidx32 = getelementptr inbounds i8, i8* %32, i64 %idxprom31
  store i8 %conv30, i8* %arrayidx32, align 1
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %33 = load i32, i32* %b, align 4
  %inc = add nsw i32 %33, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond.18

for.end:                                          ; preds = %for.cond.18
  br label %if.end

if.end:                                           ; preds = %for.end, %land.lhs.true, %for.body.4
  %34 = load i32, i32* %bytes, align 4
  %35 = load i8*, i8** %s, align 8
  %idx.ext = sext i32 %34 to i64
  %add.ptr = getelementptr inbounds i8, i8* %35, i64 %idx.ext
  store i8* %add.ptr, i8** %s, align 8
  br label %for.inc.33

for.inc.33:                                       ; preds = %if.end
  %36 = load i32, i32* %x, align 4
  %inc34 = add nsw i32 %36, 1
  store i32 %inc34, i32* %x, align 4
  br label %for.cond.2

for.end.35:                                       ; preds = %for.cond.2
  %37 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %rowstride = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %37, i32 0, i32 5
  %38 = load i32, i32* %rowstride, align 4
  %39 = load i8*, i8** %src, align 8
  %idx.ext36 = sext i32 %38 to i64
  %add.ptr37 = getelementptr inbounds i8, i8* %39, i64 %idx.ext36
  store i8* %add.ptr37, i8** %src, align 8
  br label %for.inc.38

for.inc.38:                                       ; preds = %for.end.35
  %40 = load i32, i32* %y, align 4
  %inc39 = add nsw i32 %40, 1
  store i32 %inc39, i32* %y, align 4
  br label %for.cond

for.end.40:                                       ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @gaussian_blur_region(%struct._PixelRegion* %srcR, double %radius_x, double %radius_y) #0 {
entry:
  %srcR.addr = alloca %struct._PixelRegion*, align 8
  %radius_x.addr = alloca double, align 8
  %radius_y.addr = alloca double, align 8
  %width = alloca i64, align 8
  %height = alloca i64, align 8
  %bytes = alloca i32, align 4
  %src = alloca i8*, align 8
  %sp = alloca i8*, align 8
  %dest = alloca i8*, align 8
  %dp = alloca i8*, align 8
  %data = alloca i8*, align 8
  %buf = alloca i32*, align 8
  %b = alloca i32*, align 8
  %pixels = alloca i32, align 4
  %total = alloca i32, align 4
  %i = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %start = alloca i32, align 4
  %end = alloca i32, align 4
  %curve = alloca i32*, align 8
  %sum = alloca i32*, align 8
  %val = alloca i32, align 4
  %length = alloca i32, align 4
  %alpha = alloca i32, align 4
  %initial_p = alloca i32, align 4
  %initial_m = alloca i32, align 4
  store %struct._PixelRegion* %srcR, %struct._PixelRegion** %srcR.addr, align 8
  store double %radius_x, double* %radius_x.addr, align 8
  store double %radius_y, double* %radius_y.addr, align 8
  %0 = load double, double* %radius_x.addr, align 8
  %cmp = fcmp oeq double %0, 0.000000e+00
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load double, double* %radius_y.addr, align 8
  %cmp1 = fcmp oeq double %1, 0.000000e+00
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %2 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %2, i32 0, i32 8
  %3 = load i32, i32* %w, align 4
  %4 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %h = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %4, i32 0, i32 9
  %5 = load i32, i32* %h, align 4
  %cmp2 = icmp sgt i32 %3, %5
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %6 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %w3 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %6, i32 0, i32 8
  %7 = load i32, i32* %w3, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %8 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %h4 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %8, i32 0, i32 9
  %9 = load i32, i32* %h4, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %7, %cond.true ], [ %9, %cond.false ]
  %10 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %bytes5 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %10, i32 0, i32 10
  %11 = load i32, i32* %bytes5, align 4
  %mul = mul nsw i32 %cond, %11
  store i32 %mul, i32* %length, align 4
  %12 = load i32, i32* %length, align 4
  %mul6 = mul nsw i32 %12, 2
  %conv = sext i32 %mul6 to i64
  %call = call noalias i8* @g_malloc_n(i64 %conv, i64 1)
  store i8* %call, i8** %data, align 8
  %13 = load i8*, i8** %data, align 8
  store i8* %13, i8** %src, align 8
  %14 = load i8*, i8** %data, align 8
  %15 = load i32, i32* %length, align 4
  %idx.ext = sext i32 %15 to i64
  %add.ptr = getelementptr inbounds i8, i8* %14, i64 %idx.ext
  store i8* %add.ptr, i8** %dest, align 8
  %16 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %w7 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %16, i32 0, i32 8
  %17 = load i32, i32* %w7, align 4
  %conv8 = sext i32 %17 to i64
  store i64 %conv8, i64* %width, align 8
  %18 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %h9 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %18, i32 0, i32 9
  %19 = load i32, i32* %h9, align 4
  %conv10 = sext i32 %19 to i64
  store i64 %conv10, i64* %height, align 8
  %20 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %bytes11 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %20, i32 0, i32 10
  %21 = load i32, i32* %bytes11, align 4
  store i32 %21, i32* %bytes, align 4
  %22 = load i32, i32* %bytes, align 4
  %sub = sub i32 %22, 1
  store i32 %sub, i32* %alpha, align 4
  %23 = load i64, i64* %width, align 8
  %24 = load i64, i64* %height, align 8
  %cmp12 = icmp sgt i64 %23, %24
  br i1 %cmp12, label %cond.true.14, label %cond.false.15

cond.true.14:                                     ; preds = %cond.end
  %25 = load i64, i64* %width, align 8
  br label %cond.end.16

cond.false.15:                                    ; preds = %cond.end
  %26 = load i64, i64* %height, align 8
  br label %cond.end.16

cond.end.16:                                      ; preds = %cond.false.15, %cond.true.14
  %cond17 = phi i64 [ %25, %cond.true.14 ], [ %26, %cond.false.15 ]
  %mul18 = mul nsw i64 %cond17, 2
  %call19 = call noalias i8* @g_malloc_n(i64 %mul18, i64 4)
  %27 = bitcast i8* %call19 to i32*
  store i32* %27, i32** %buf, align 8
  %28 = load double, double* %radius_y.addr, align 8
  %cmp20 = fcmp une double %28, 0.000000e+00
  br i1 %cmp20, label %if.then.22, label %if.end.160

if.then.22:                                       ; preds = %cond.end.16
  %29 = load double, double* %radius_y.addr, align 8
  %30 = load double, double* %radius_y.addr, align 8
  %mul23 = fmul double %29, %30
  %sub24 = fsub double -0.000000e+00, %mul23
  %div = fdiv double %sub24, 0xC0262A40FDA12B08
  %call25 = call i32* @make_curve(double %div, i32* %length)
  store i32* %call25, i32** %curve, align 8
  %31 = load i32, i32* %length, align 4
  %mul26 = mul nsw i32 2, %31
  %add = add nsw i32 %mul26, 1
  %conv27 = sext i32 %add to i64
  %call28 = call noalias i8* @g_malloc_n(i64 %conv27, i64 4)
  %32 = bitcast i8* %call28 to i32*
  store i32* %32, i32** %sum, align 8
  %33 = load i32*, i32** %sum, align 8
  %arrayidx = getelementptr inbounds i32, i32* %33, i64 0
  store i32 0, i32* %arrayidx, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.22
  %34 = load i32, i32* %i, align 4
  %35 = load i32, i32* %length, align 4
  %mul29 = mul nsw i32 %35, 2
  %cmp30 = icmp sle i32 %34, %mul29
  br i1 %cmp30, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %length, align 4
  %sub32 = sub nsw i32 %36, %37
  %sub33 = sub nsw i32 %sub32, 1
  %idxprom = sext i32 %sub33 to i64
  %38 = load i32*, i32** %curve, align 8
  %arrayidx34 = getelementptr inbounds i32, i32* %38, i64 %idxprom
  %39 = load i32, i32* %arrayidx34, align 4
  %40 = load i32, i32* %i, align 4
  %sub35 = sub nsw i32 %40, 1
  %idxprom36 = sext i32 %sub35 to i64
  %41 = load i32*, i32** %sum, align 8
  %arrayidx37 = getelementptr inbounds i32, i32* %41, i64 %idxprom36
  %42 = load i32, i32* %arrayidx37, align 4
  %add38 = add nsw i32 %39, %42
  %43 = load i32, i32* %i, align 4
  %idxprom39 = sext i32 %43 to i64
  %44 = load i32*, i32** %sum, align 8
  %arrayidx40 = getelementptr inbounds i32, i32* %44, i64 %idxprom39
  store i32 %add38, i32* %arrayidx40, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %45 = load i32, i32* %i, align 4
  %inc = add nsw i32 %45, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %46 = load i32, i32* %length, align 4
  %47 = load i32*, i32** %sum, align 8
  %idx.ext41 = sext i32 %46 to i64
  %add.ptr42 = getelementptr inbounds i32, i32* %47, i64 %idx.ext41
  store i32* %add.ptr42, i32** %sum, align 8
  %48 = load i32, i32* %length, align 4
  %idxprom43 = sext i32 %48 to i64
  %49 = load i32*, i32** %sum, align 8
  %arrayidx44 = getelementptr inbounds i32, i32* %49, i64 %idxprom43
  %50 = load i32, i32* %arrayidx44, align 4
  %51 = load i32, i32* %length, align 4
  %sub45 = sub nsw i32 0, %51
  %idxprom46 = sext i32 %sub45 to i64
  %52 = load i32*, i32** %sum, align 8
  %arrayidx47 = getelementptr inbounds i32, i32* %52, i64 %idxprom46
  %53 = load i32, i32* %arrayidx47, align 4
  %sub48 = sub nsw i32 %50, %53
  store i32 %sub48, i32* %total, align 4
  store i32 0, i32* %col, align 4
  br label %for.cond.49

for.cond.49:                                      ; preds = %for.inc.152, %for.end
  %54 = load i32, i32* %col, align 4
  %conv50 = sext i32 %54 to i64
  %55 = load i64, i64* %width, align 8
  %cmp51 = icmp slt i64 %conv50, %55
  br i1 %cmp51, label %for.body.53, label %for.end.154

for.body.53:                                      ; preds = %for.cond.49
  %56 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %57 = load i32, i32* %col, align 4
  %58 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %x = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %58, i32 0, i32 6
  %59 = load i32, i32* %x, align 4
  %add54 = add nsw i32 %57, %59
  %60 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %y = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %60, i32 0, i32 7
  %61 = load i32, i32* %y, align 4
  %62 = load i64, i64* %height, align 8
  %conv55 = trunc i64 %62 to i32
  %63 = load i8*, i8** %src, align 8
  call void @pixel_region_get_col(%struct._PixelRegion* %56, i32 %add54, i32 %61, i32 %conv55, i8* %63, i32 1)
  %64 = load i8*, i8** %src, align 8
  %65 = load i32, i32* %alpha, align 4
  %idx.ext56 = sext i32 %65 to i64
  %add.ptr57 = getelementptr inbounds i8, i8* %64, i64 %idx.ext56
  store i8* %add.ptr57, i8** %sp, align 8
  %66 = load i8*, i8** %sp, align 8
  %arrayidx58 = getelementptr inbounds i8, i8* %66, i64 0
  %67 = load i8, i8* %arrayidx58, align 1
  %conv59 = zext i8 %67 to i32
  store i32 %conv59, i32* %initial_p, align 4
  %68 = load i64, i64* %height, align 8
  %sub60 = sub nsw i64 %68, 1
  %69 = load i32, i32* %bytes, align 4
  %conv61 = zext i32 %69 to i64
  %mul62 = mul nsw i64 %sub60, %conv61
  %70 = load i8*, i8** %sp, align 8
  %arrayidx63 = getelementptr inbounds i8, i8* %70, i64 %mul62
  %71 = load i8, i8* %arrayidx63, align 1
  %conv64 = zext i8 %71 to i32
  store i32 %conv64, i32* %initial_m, align 4
  %72 = load i8*, i8** %sp, align 8
  %73 = load i32*, i32** %buf, align 8
  %74 = load i64, i64* %height, align 8
  %conv65 = trunc i64 %74 to i32
  %75 = load i32, i32* %bytes, align 4
  call void @run_length_encode(i8* %72, i32* %73, i32 %conv65, i32 %75)
  store i32 0, i32* %row, align 4
  br label %for.cond.66

for.cond.66:                                      ; preds = %for.inc.145, %for.body.53
  %76 = load i32, i32* %row, align 4
  %conv67 = sext i32 %76 to i64
  %77 = load i64, i64* %height, align 8
  %cmp68 = icmp slt i64 %conv67, %77
  br i1 %cmp68, label %for.body.70, label %for.end.147

for.body.70:                                      ; preds = %for.cond.66
  %78 = load i32, i32* %row, align 4
  %79 = load i32, i32* %length, align 4
  %cmp71 = icmp slt i32 %78, %79
  br i1 %cmp71, label %cond.true.73, label %cond.false.75

cond.true.73:                                     ; preds = %for.body.70
  %80 = load i32, i32* %row, align 4
  %sub74 = sub nsw i32 0, %80
  br label %cond.end.77

cond.false.75:                                    ; preds = %for.body.70
  %81 = load i32, i32* %length, align 4
  %sub76 = sub nsw i32 0, %81
  br label %cond.end.77

cond.end.77:                                      ; preds = %cond.false.75, %cond.true.73
  %cond78 = phi i32 [ %sub74, %cond.true.73 ], [ %sub76, %cond.false.75 ]
  store i32 %cond78, i32* %start, align 4
  %82 = load i64, i64* %height, align 8
  %83 = load i32, i32* %row, align 4
  %84 = load i32, i32* %length, align 4
  %add79 = add nsw i32 %83, %84
  %conv80 = sext i32 %add79 to i64
  %cmp81 = icmp sle i64 %82, %conv80
  br i1 %cmp81, label %cond.true.83, label %cond.false.87

cond.true.83:                                     ; preds = %cond.end.77
  %85 = load i64, i64* %height, align 8
  %86 = load i32, i32* %row, align 4
  %conv84 = sext i32 %86 to i64
  %sub85 = sub nsw i64 %85, %conv84
  %sub86 = sub nsw i64 %sub85, 1
  br label %cond.end.89

cond.false.87:                                    ; preds = %cond.end.77
  %87 = load i32, i32* %length, align 4
  %conv88 = sext i32 %87 to i64
  br label %cond.end.89

cond.end.89:                                      ; preds = %cond.false.87, %cond.true.83
  %cond90 = phi i64 [ %sub86, %cond.true.83 ], [ %conv88, %cond.false.87 ]
  %conv91 = trunc i64 %cond90 to i32
  store i32 %conv91, i32* %end, align 4
  %88 = load i32, i32* %total, align 4
  %div92 = sdiv i32 %88, 2
  store i32 %div92, i32* %val, align 4
  %89 = load i32, i32* %start, align 4
  store i32 %89, i32* %i, align 4
  %90 = load i32*, i32** %buf, align 8
  %91 = load i32, i32* %row, align 4
  %92 = load i32, i32* %i, align 4
  %add93 = add nsw i32 %91, %92
  %mul94 = mul nsw i32 %add93, 2
  %idx.ext95 = sext i32 %mul94 to i64
  %add.ptr96 = getelementptr inbounds i32, i32* %90, i64 %idx.ext95
  store i32* %add.ptr96, i32** %b, align 8
  %93 = load i32, i32* %start, align 4
  %94 = load i32, i32* %length, align 4
  %sub97 = sub nsw i32 0, %94
  %cmp98 = icmp ne i32 %93, %sub97
  br i1 %cmp98, label %if.then.100, label %if.end.109

if.then.100:                                      ; preds = %cond.end.89
  %95 = load i32, i32* %initial_p, align 4
  %96 = load i32, i32* %start, align 4
  %idxprom101 = sext i32 %96 to i64
  %97 = load i32*, i32** %sum, align 8
  %arrayidx102 = getelementptr inbounds i32, i32* %97, i64 %idxprom101
  %98 = load i32, i32* %arrayidx102, align 4
  %99 = load i32, i32* %length, align 4
  %sub103 = sub nsw i32 0, %99
  %idxprom104 = sext i32 %sub103 to i64
  %100 = load i32*, i32** %sum, align 8
  %arrayidx105 = getelementptr inbounds i32, i32* %100, i64 %idxprom104
  %101 = load i32, i32* %arrayidx105, align 4
  %sub106 = sub nsw i32 %98, %101
  %mul107 = mul nsw i32 %95, %sub106
  %102 = load i32, i32* %val, align 4
  %add108 = add nsw i32 %102, %mul107
  store i32 %add108, i32* %val, align 4
  br label %if.end.109

if.end.109:                                       ; preds = %if.then.100, %cond.end.89
  br label %while.cond

while.cond:                                       ; preds = %if.end.117, %if.end.109
  %103 = load i32, i32* %i, align 4
  %104 = load i32, i32* %end, align 4
  %cmp110 = icmp slt i32 %103, %104
  br i1 %cmp110, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %105 = load i32*, i32** %b, align 8
  %arrayidx112 = getelementptr inbounds i32, i32* %105, i64 0
  %106 = load i32, i32* %arrayidx112, align 4
  store i32 %106, i32* %pixels, align 4
  %107 = load i32, i32* %pixels, align 4
  %108 = load i32, i32* %i, align 4
  %add113 = add nsw i32 %108, %107
  store i32 %add113, i32* %i, align 4
  %109 = load i32, i32* %i, align 4
  %110 = load i32, i32* %end, align 4
  %cmp114 = icmp sgt i32 %109, %110
  br i1 %cmp114, label %if.then.116, label %if.end.117

if.then.116:                                      ; preds = %while.body
  %111 = load i32, i32* %end, align 4
  store i32 %111, i32* %i, align 4
  br label %if.end.117

if.end.117:                                       ; preds = %if.then.116, %while.body
  %112 = load i32*, i32** %b, align 8
  %arrayidx118 = getelementptr inbounds i32, i32* %112, i64 1
  %113 = load i32, i32* %arrayidx118, align 4
  %114 = load i32, i32* %i, align 4
  %idxprom119 = sext i32 %114 to i64
  %115 = load i32*, i32** %sum, align 8
  %arrayidx120 = getelementptr inbounds i32, i32* %115, i64 %idxprom119
  %116 = load i32, i32* %arrayidx120, align 4
  %117 = load i32, i32* %start, align 4
  %idxprom121 = sext i32 %117 to i64
  %118 = load i32*, i32** %sum, align 8
  %arrayidx122 = getelementptr inbounds i32, i32* %118, i64 %idxprom121
  %119 = load i32, i32* %arrayidx122, align 4
  %sub123 = sub nsw i32 %116, %119
  %mul124 = mul i32 %113, %sub123
  %120 = load i32, i32* %val, align 4
  %add125 = add i32 %120, %mul124
  store i32 %add125, i32* %val, align 4
  %121 = load i32, i32* %pixels, align 4
  %mul126 = mul nsw i32 %121, 2
  %122 = load i32*, i32** %b, align 8
  %idx.ext127 = sext i32 %mul126 to i64
  %add.ptr128 = getelementptr inbounds i32, i32* %122, i64 %idx.ext127
  store i32* %add.ptr128, i32** %b, align 8
  %123 = load i32, i32* %i, align 4
  store i32 %123, i32* %start, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %124 = load i32, i32* %end, align 4
  %125 = load i32, i32* %length, align 4
  %cmp129 = icmp ne i32 %124, %125
  br i1 %cmp129, label %if.then.131, label %if.end.139

if.then.131:                                      ; preds = %while.end
  %126 = load i32, i32* %initial_m, align 4
  %127 = load i32, i32* %length, align 4
  %idxprom132 = sext i32 %127 to i64
  %128 = load i32*, i32** %sum, align 8
  %arrayidx133 = getelementptr inbounds i32, i32* %128, i64 %idxprom132
  %129 = load i32, i32* %arrayidx133, align 4
  %130 = load i32, i32* %end, align 4
  %idxprom134 = sext i32 %130 to i64
  %131 = load i32*, i32** %sum, align 8
  %arrayidx135 = getelementptr inbounds i32, i32* %131, i64 %idxprom134
  %132 = load i32, i32* %arrayidx135, align 4
  %sub136 = sub nsw i32 %129, %132
  %mul137 = mul nsw i32 %126, %sub136
  %133 = load i32, i32* %val, align 4
  %add138 = add nsw i32 %133, %mul137
  store i32 %add138, i32* %val, align 4
  br label %if.end.139

if.end.139:                                       ; preds = %if.then.131, %while.end
  %134 = load i32, i32* %val, align 4
  %135 = load i32, i32* %total, align 4
  %div140 = sdiv i32 %134, %135
  %conv141 = trunc i32 %div140 to i8
  %136 = load i32, i32* %row, align 4
  %137 = load i32, i32* %bytes, align 4
  %mul142 = mul i32 %136, %137
  %idxprom143 = zext i32 %mul142 to i64
  %138 = load i8*, i8** %sp, align 8
  %arrayidx144 = getelementptr inbounds i8, i8* %138, i64 %idxprom143
  store i8 %conv141, i8* %arrayidx144, align 1
  br label %for.inc.145

for.inc.145:                                      ; preds = %if.end.139
  %139 = load i32, i32* %row, align 4
  %inc146 = add nsw i32 %139, 1
  store i32 %inc146, i32* %row, align 4
  br label %for.cond.66

for.end.147:                                      ; preds = %for.cond.66
  %140 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %141 = load i32, i32* %col, align 4
  %142 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %x148 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %142, i32 0, i32 6
  %143 = load i32, i32* %x148, align 4
  %add149 = add nsw i32 %141, %143
  %144 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %y150 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %144, i32 0, i32 7
  %145 = load i32, i32* %y150, align 4
  %146 = load i64, i64* %height, align 8
  %conv151 = trunc i64 %146 to i32
  %147 = load i8*, i8** %src, align 8
  call void @pixel_region_set_col(%struct._PixelRegion* %140, i32 %add149, i32 %145, i32 %conv151, i8* %147)
  br label %for.inc.152

for.inc.152:                                      ; preds = %for.end.147
  %148 = load i32, i32* %col, align 4
  %inc153 = add nsw i32 %148, 1
  store i32 %inc153, i32* %col, align 4
  br label %for.cond.49

for.end.154:                                      ; preds = %for.cond.49
  %149 = load i32*, i32** %sum, align 8
  %150 = load i32, i32* %length, align 4
  %idx.ext155 = sext i32 %150 to i64
  %idx.neg = sub i64 0, %idx.ext155
  %add.ptr156 = getelementptr inbounds i32, i32* %149, i64 %idx.neg
  %151 = bitcast i32* %add.ptr156 to i8*
  call void @g_free(i8* %151)
  %152 = load i32*, i32** %curve, align 8
  %153 = load i32, i32* %length, align 4
  %idx.ext157 = sext i32 %153 to i64
  %idx.neg158 = sub i64 0, %idx.ext157
  %add.ptr159 = getelementptr inbounds i32, i32* %152, i64 %idx.neg158
  %154 = bitcast i32* %add.ptr159 to i8*
  call void @g_free(i8* %154)
  br label %if.end.160

if.end.160:                                       ; preds = %for.end.154, %cond.end.16
  %155 = load double, double* %radius_x.addr, align 8
  %cmp161 = fcmp une double %155, 0.000000e+00
  br i1 %cmp161, label %if.then.163, label %if.end.318

if.then.163:                                      ; preds = %if.end.160
  %156 = load double, double* %radius_x.addr, align 8
  %157 = load double, double* %radius_x.addr, align 8
  %mul164 = fmul double %156, %157
  %sub165 = fsub double -0.000000e+00, %mul164
  %div166 = fdiv double %sub165, 0xC0262A40FDA12B08
  %call167 = call i32* @make_curve(double %div166, i32* %length)
  store i32* %call167, i32** %curve, align 8
  %158 = load i32, i32* %length, align 4
  %mul168 = mul nsw i32 2, %158
  %add169 = add nsw i32 %mul168, 1
  %conv170 = sext i32 %add169 to i64
  %call171 = call noalias i8* @g_malloc_n(i64 %conv170, i64 4)
  %159 = bitcast i8* %call171 to i32*
  store i32* %159, i32** %sum, align 8
  %160 = load i32*, i32** %sum, align 8
  %arrayidx172 = getelementptr inbounds i32, i32* %160, i64 0
  store i32 0, i32* %arrayidx172, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond.173

for.cond.173:                                     ; preds = %for.inc.188, %if.then.163
  %161 = load i32, i32* %i, align 4
  %162 = load i32, i32* %length, align 4
  %mul174 = mul nsw i32 %162, 2
  %cmp175 = icmp sle i32 %161, %mul174
  br i1 %cmp175, label %for.body.177, label %for.end.190

for.body.177:                                     ; preds = %for.cond.173
  %163 = load i32, i32* %i, align 4
  %164 = load i32, i32* %length, align 4
  %sub178 = sub nsw i32 %163, %164
  %sub179 = sub nsw i32 %sub178, 1
  %idxprom180 = sext i32 %sub179 to i64
  %165 = load i32*, i32** %curve, align 8
  %arrayidx181 = getelementptr inbounds i32, i32* %165, i64 %idxprom180
  %166 = load i32, i32* %arrayidx181, align 4
  %167 = load i32, i32* %i, align 4
  %sub182 = sub nsw i32 %167, 1
  %idxprom183 = sext i32 %sub182 to i64
  %168 = load i32*, i32** %sum, align 8
  %arrayidx184 = getelementptr inbounds i32, i32* %168, i64 %idxprom183
  %169 = load i32, i32* %arrayidx184, align 4
  %add185 = add nsw i32 %166, %169
  %170 = load i32, i32* %i, align 4
  %idxprom186 = sext i32 %170 to i64
  %171 = load i32*, i32** %sum, align 8
  %arrayidx187 = getelementptr inbounds i32, i32* %171, i64 %idxprom186
  store i32 %add185, i32* %arrayidx187, align 4
  br label %for.inc.188

for.inc.188:                                      ; preds = %for.body.177
  %172 = load i32, i32* %i, align 4
  %inc189 = add nsw i32 %172, 1
  store i32 %inc189, i32* %i, align 4
  br label %for.cond.173

for.end.190:                                      ; preds = %for.cond.173
  %173 = load i32, i32* %length, align 4
  %174 = load i32*, i32** %sum, align 8
  %idx.ext191 = sext i32 %173 to i64
  %add.ptr192 = getelementptr inbounds i32, i32* %174, i64 %idx.ext191
  store i32* %add.ptr192, i32** %sum, align 8
  %175 = load i32, i32* %length, align 4
  %idxprom193 = sext i32 %175 to i64
  %176 = load i32*, i32** %sum, align 8
  %arrayidx194 = getelementptr inbounds i32, i32* %176, i64 %idxprom193
  %177 = load i32, i32* %arrayidx194, align 4
  %178 = load i32, i32* %length, align 4
  %sub195 = sub nsw i32 0, %178
  %idxprom196 = sext i32 %sub195 to i64
  %179 = load i32*, i32** %sum, align 8
  %arrayidx197 = getelementptr inbounds i32, i32* %179, i64 %idxprom196
  %180 = load i32, i32* %arrayidx197, align 4
  %sub198 = sub nsw i32 %177, %180
  store i32 %sub198, i32* %total, align 4
  store i32 0, i32* %row, align 4
  br label %for.cond.199

for.cond.199:                                     ; preds = %for.inc.309, %for.end.190
  %181 = load i32, i32* %row, align 4
  %conv200 = sext i32 %181 to i64
  %182 = load i64, i64* %height, align 8
  %cmp201 = icmp slt i64 %conv200, %182
  br i1 %cmp201, label %for.body.203, label %for.end.311

for.body.203:                                     ; preds = %for.cond.199
  %183 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %184 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %x204 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %184, i32 0, i32 6
  %185 = load i32, i32* %x204, align 4
  %186 = load i32, i32* %row, align 4
  %187 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %y205 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %187, i32 0, i32 7
  %188 = load i32, i32* %y205, align 4
  %add206 = add nsw i32 %186, %188
  %189 = load i64, i64* %width, align 8
  %conv207 = trunc i64 %189 to i32
  %190 = load i8*, i8** %src, align 8
  call void @pixel_region_get_row(%struct._PixelRegion* %183, i32 %185, i32 %add206, i32 %conv207, i8* %190, i32 1)
  %191 = load i8*, i8** %src, align 8
  %192 = load i32, i32* %alpha, align 4
  %idx.ext208 = sext i32 %192 to i64
  %add.ptr209 = getelementptr inbounds i8, i8* %191, i64 %idx.ext208
  store i8* %add.ptr209, i8** %sp, align 8
  %193 = load i8*, i8** %dest, align 8
  %194 = load i32, i32* %alpha, align 4
  %idx.ext210 = sext i32 %194 to i64
  %add.ptr211 = getelementptr inbounds i8, i8* %193, i64 %idx.ext210
  store i8* %add.ptr211, i8** %dp, align 8
  %195 = load i8*, i8** %sp, align 8
  %arrayidx212 = getelementptr inbounds i8, i8* %195, i64 0
  %196 = load i8, i8* %arrayidx212, align 1
  %conv213 = zext i8 %196 to i32
  store i32 %conv213, i32* %initial_p, align 4
  %197 = load i64, i64* %width, align 8
  %sub214 = sub nsw i64 %197, 1
  %198 = load i32, i32* %bytes, align 4
  %conv215 = zext i32 %198 to i64
  %mul216 = mul nsw i64 %sub214, %conv215
  %199 = load i8*, i8** %sp, align 8
  %arrayidx217 = getelementptr inbounds i8, i8* %199, i64 %mul216
  %200 = load i8, i8* %arrayidx217, align 1
  %conv218 = zext i8 %200 to i32
  store i32 %conv218, i32* %initial_m, align 4
  %201 = load i8*, i8** %sp, align 8
  %202 = load i32*, i32** %buf, align 8
  %203 = load i64, i64* %width, align 8
  %conv219 = trunc i64 %203 to i32
  %204 = load i32, i32* %bytes, align 4
  call void @run_length_encode(i8* %201, i32* %202, i32 %conv219, i32 %204)
  store i32 0, i32* %col, align 4
  br label %for.cond.220

for.cond.220:                                     ; preds = %for.inc.302, %for.body.203
  %205 = load i32, i32* %col, align 4
  %conv221 = sext i32 %205 to i64
  %206 = load i64, i64* %width, align 8
  %cmp222 = icmp slt i64 %conv221, %206
  br i1 %cmp222, label %for.body.224, label %for.end.304

for.body.224:                                     ; preds = %for.cond.220
  %207 = load i32, i32* %col, align 4
  %208 = load i32, i32* %length, align 4
  %cmp225 = icmp slt i32 %207, %208
  br i1 %cmp225, label %cond.true.227, label %cond.false.229

cond.true.227:                                    ; preds = %for.body.224
  %209 = load i32, i32* %col, align 4
  %sub228 = sub nsw i32 0, %209
  br label %cond.end.231

cond.false.229:                                   ; preds = %for.body.224
  %210 = load i32, i32* %length, align 4
  %sub230 = sub nsw i32 0, %210
  br label %cond.end.231

cond.end.231:                                     ; preds = %cond.false.229, %cond.true.227
  %cond232 = phi i32 [ %sub228, %cond.true.227 ], [ %sub230, %cond.false.229 ]
  store i32 %cond232, i32* %start, align 4
  %211 = load i64, i64* %width, align 8
  %212 = load i32, i32* %col, align 4
  %213 = load i32, i32* %length, align 4
  %add233 = add nsw i32 %212, %213
  %conv234 = sext i32 %add233 to i64
  %cmp235 = icmp sle i64 %211, %conv234
  br i1 %cmp235, label %cond.true.237, label %cond.false.241

cond.true.237:                                    ; preds = %cond.end.231
  %214 = load i64, i64* %width, align 8
  %215 = load i32, i32* %col, align 4
  %conv238 = sext i32 %215 to i64
  %sub239 = sub nsw i64 %214, %conv238
  %sub240 = sub nsw i64 %sub239, 1
  br label %cond.end.243

cond.false.241:                                   ; preds = %cond.end.231
  %216 = load i32, i32* %length, align 4
  %conv242 = sext i32 %216 to i64
  br label %cond.end.243

cond.end.243:                                     ; preds = %cond.false.241, %cond.true.237
  %cond244 = phi i64 [ %sub240, %cond.true.237 ], [ %conv242, %cond.false.241 ]
  %conv245 = trunc i64 %cond244 to i32
  store i32 %conv245, i32* %end, align 4
  %217 = load i32, i32* %total, align 4
  %div246 = sdiv i32 %217, 2
  store i32 %div246, i32* %val, align 4
  %218 = load i32, i32* %start, align 4
  store i32 %218, i32* %i, align 4
  %219 = load i32*, i32** %buf, align 8
  %220 = load i32, i32* %col, align 4
  %221 = load i32, i32* %i, align 4
  %add247 = add nsw i32 %220, %221
  %mul248 = mul nsw i32 %add247, 2
  %idx.ext249 = sext i32 %mul248 to i64
  %add.ptr250 = getelementptr inbounds i32, i32* %219, i64 %idx.ext249
  store i32* %add.ptr250, i32** %b, align 8
  %222 = load i32, i32* %start, align 4
  %223 = load i32, i32* %length, align 4
  %sub251 = sub nsw i32 0, %223
  %cmp252 = icmp ne i32 %222, %sub251
  br i1 %cmp252, label %if.then.254, label %if.end.263

if.then.254:                                      ; preds = %cond.end.243
  %224 = load i32, i32* %initial_p, align 4
  %225 = load i32, i32* %start, align 4
  %idxprom255 = sext i32 %225 to i64
  %226 = load i32*, i32** %sum, align 8
  %arrayidx256 = getelementptr inbounds i32, i32* %226, i64 %idxprom255
  %227 = load i32, i32* %arrayidx256, align 4
  %228 = load i32, i32* %length, align 4
  %sub257 = sub nsw i32 0, %228
  %idxprom258 = sext i32 %sub257 to i64
  %229 = load i32*, i32** %sum, align 8
  %arrayidx259 = getelementptr inbounds i32, i32* %229, i64 %idxprom258
  %230 = load i32, i32* %arrayidx259, align 4
  %sub260 = sub nsw i32 %227, %230
  %mul261 = mul nsw i32 %224, %sub260
  %231 = load i32, i32* %val, align 4
  %add262 = add nsw i32 %231, %mul261
  store i32 %add262, i32* %val, align 4
  br label %if.end.263

if.end.263:                                       ; preds = %if.then.254, %cond.end.243
  br label %while.cond.264

while.cond.264:                                   ; preds = %if.end.273, %if.end.263
  %232 = load i32, i32* %i, align 4
  %233 = load i32, i32* %end, align 4
  %cmp265 = icmp slt i32 %232, %233
  br i1 %cmp265, label %while.body.267, label %while.end.285

while.body.267:                                   ; preds = %while.cond.264
  %234 = load i32*, i32** %b, align 8
  %arrayidx268 = getelementptr inbounds i32, i32* %234, i64 0
  %235 = load i32, i32* %arrayidx268, align 4
  store i32 %235, i32* %pixels, align 4
  %236 = load i32, i32* %pixels, align 4
  %237 = load i32, i32* %i, align 4
  %add269 = add nsw i32 %237, %236
  store i32 %add269, i32* %i, align 4
  %238 = load i32, i32* %i, align 4
  %239 = load i32, i32* %end, align 4
  %cmp270 = icmp sgt i32 %238, %239
  br i1 %cmp270, label %if.then.272, label %if.end.273

if.then.272:                                      ; preds = %while.body.267
  %240 = load i32, i32* %end, align 4
  store i32 %240, i32* %i, align 4
  br label %if.end.273

if.end.273:                                       ; preds = %if.then.272, %while.body.267
  %241 = load i32*, i32** %b, align 8
  %arrayidx274 = getelementptr inbounds i32, i32* %241, i64 1
  %242 = load i32, i32* %arrayidx274, align 4
  %243 = load i32, i32* %i, align 4
  %idxprom275 = sext i32 %243 to i64
  %244 = load i32*, i32** %sum, align 8
  %arrayidx276 = getelementptr inbounds i32, i32* %244, i64 %idxprom275
  %245 = load i32, i32* %arrayidx276, align 4
  %246 = load i32, i32* %start, align 4
  %idxprom277 = sext i32 %246 to i64
  %247 = load i32*, i32** %sum, align 8
  %arrayidx278 = getelementptr inbounds i32, i32* %247, i64 %idxprom277
  %248 = load i32, i32* %arrayidx278, align 4
  %sub279 = sub nsw i32 %245, %248
  %mul280 = mul i32 %242, %sub279
  %249 = load i32, i32* %val, align 4
  %add281 = add i32 %249, %mul280
  store i32 %add281, i32* %val, align 4
  %250 = load i32, i32* %pixels, align 4
  %mul282 = mul nsw i32 %250, 2
  %251 = load i32*, i32** %b, align 8
  %idx.ext283 = sext i32 %mul282 to i64
  %add.ptr284 = getelementptr inbounds i32, i32* %251, i64 %idx.ext283
  store i32* %add.ptr284, i32** %b, align 8
  %252 = load i32, i32* %i, align 4
  store i32 %252, i32* %start, align 4
  br label %while.cond.264

while.end.285:                                    ; preds = %while.cond.264
  %253 = load i32, i32* %end, align 4
  %254 = load i32, i32* %length, align 4
  %cmp286 = icmp ne i32 %253, %254
  br i1 %cmp286, label %if.then.288, label %if.end.296

if.then.288:                                      ; preds = %while.end.285
  %255 = load i32, i32* %initial_m, align 4
  %256 = load i32, i32* %length, align 4
  %idxprom289 = sext i32 %256 to i64
  %257 = load i32*, i32** %sum, align 8
  %arrayidx290 = getelementptr inbounds i32, i32* %257, i64 %idxprom289
  %258 = load i32, i32* %arrayidx290, align 4
  %259 = load i32, i32* %end, align 4
  %idxprom291 = sext i32 %259 to i64
  %260 = load i32*, i32** %sum, align 8
  %arrayidx292 = getelementptr inbounds i32, i32* %260, i64 %idxprom291
  %261 = load i32, i32* %arrayidx292, align 4
  %sub293 = sub nsw i32 %258, %261
  %mul294 = mul nsw i32 %255, %sub293
  %262 = load i32, i32* %val, align 4
  %add295 = add nsw i32 %262, %mul294
  store i32 %add295, i32* %val, align 4
  br label %if.end.296

if.end.296:                                       ; preds = %if.then.288, %while.end.285
  %263 = load i32, i32* %val, align 4
  %264 = load i32, i32* %total, align 4
  %div297 = sdiv i32 %263, %264
  store i32 %div297, i32* %val, align 4
  %265 = load i32, i32* %val, align 4
  %conv298 = trunc i32 %265 to i8
  %266 = load i32, i32* %col, align 4
  %267 = load i32, i32* %bytes, align 4
  %mul299 = mul i32 %266, %267
  %idxprom300 = zext i32 %mul299 to i64
  %268 = load i8*, i8** %dp, align 8
  %arrayidx301 = getelementptr inbounds i8, i8* %268, i64 %idxprom300
  store i8 %conv298, i8* %arrayidx301, align 1
  br label %for.inc.302

for.inc.302:                                      ; preds = %if.end.296
  %269 = load i32, i32* %col, align 4
  %inc303 = add nsw i32 %269, 1
  store i32 %inc303, i32* %col, align 4
  br label %for.cond.220

for.end.304:                                      ; preds = %for.cond.220
  %270 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %271 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %x305 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %271, i32 0, i32 6
  %272 = load i32, i32* %x305, align 4
  %273 = load i32, i32* %row, align 4
  %274 = load %struct._PixelRegion*, %struct._PixelRegion** %srcR.addr, align 8
  %y306 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %274, i32 0, i32 7
  %275 = load i32, i32* %y306, align 4
  %add307 = add nsw i32 %273, %275
  %276 = load i64, i64* %width, align 8
  %conv308 = trunc i64 %276 to i32
  %277 = load i8*, i8** %dest, align 8
  call void @pixel_region_set_row(%struct._PixelRegion* %270, i32 %272, i32 %add307, i32 %conv308, i8* %277)
  br label %for.inc.309

for.inc.309:                                      ; preds = %for.end.304
  %278 = load i32, i32* %row, align 4
  %inc310 = add nsw i32 %278, 1
  store i32 %inc310, i32* %row, align 4
  br label %for.cond.199

for.end.311:                                      ; preds = %for.cond.199
  %279 = load i32*, i32** %sum, align 8
  %280 = load i32, i32* %length, align 4
  %idx.ext312 = sext i32 %280 to i64
  %idx.neg313 = sub i64 0, %idx.ext312
  %add.ptr314 = getelementptr inbounds i32, i32* %279, i64 %idx.neg313
  %281 = bitcast i32* %add.ptr314 to i8*
  call void @g_free(i8* %281)
  %282 = load i32*, i32** %curve, align 8
  %283 = load i32, i32* %length, align 4
  %idx.ext315 = sext i32 %283 to i64
  %idx.neg316 = sub i64 0, %idx.ext315
  %add.ptr317 = getelementptr inbounds i32, i32* %282, i64 %idx.neg316
  %284 = bitcast i32* %add.ptr317 to i8*
  call void @g_free(i8* %284)
  br label %if.end.318

if.end.318:                                       ; preds = %for.end.311, %if.end.160
  %285 = load i8*, i8** %data, align 8
  call void @g_free(i8* %285)
  %286 = load i32*, i32** %buf, align 8
  %287 = bitcast i32* %286 to i8*
  call void @g_free(i8* %287)
  br label %return

return:                                           ; preds = %if.end.318, %if.then
  ret void
}

declare noalias i8* @g_malloc_n(i64, i64) #2

; Function Attrs: nounwind uwtable
define internal i32* @make_curve(double %sigma_square, i32* %length) #0 {
entry:
  %sigma_square.addr = alloca double, align 8
  %length.addr = alloca i32*, align 8
  %sigma2 = alloca double, align 8
  %l = alloca double, align 8
  %curve = alloca i32*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %temp = alloca i32, align 4
  store double %sigma_square, double* %sigma_square.addr, align 8
  store i32* %length, i32** %length.addr, align 8
  %0 = load double, double* %sigma_square.addr, align 8
  %mul = fmul double 2.000000e+00, %0
  store double %mul, double* %sigma2, align 8
  %1 = load double, double* %sigma2, align 8
  %sub = fsub double -0.000000e+00, %1
  %mul1 = fmul double %sub, 0xC0162A40FDA12B08
  %call = call double @sqrt(double %mul1) #1
  store double %call, double* %l, align 8
  %2 = load double, double* %l, align 8
  %call2 = call double @ceil(double %2) #6
  %mul3 = fmul double %call2, 2.000000e+00
  %conv = fptosi double %mul3 to i32
  store i32 %conv, i32* %n, align 4
  %3 = load i32, i32* %n, align 4
  %rem = srem i32 %3, 2
  %cmp = icmp eq i32 %rem, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %n, align 4
  %add = add nsw i32 %4, 1
  store i32 %add, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32, i32* %n, align 4
  %conv5 = sext i32 %5 to i64
  %call6 = call noalias i8* @g_malloc_n(i64 %conv5, i64 4)
  %6 = bitcast i8* %call6 to i32*
  store i32* %6, i32** %curve, align 8
  %7 = load i32, i32* %n, align 4
  %div = sdiv i32 %7, 2
  %8 = load i32*, i32** %length.addr, align 8
  store i32 %div, i32* %8, align 4
  %9 = load i32*, i32** %length.addr, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %curve, align 8
  %idx.ext = sext i32 %10 to i64
  %add.ptr = getelementptr inbounds i32, i32* %11, i64 %idx.ext
  store i32* %add.ptr, i32** %curve, align 8
  %12 = load i32*, i32** %curve, align 8
  %arrayidx = getelementptr inbounds i32, i32* %12, i64 0
  store i32 255, i32* %arrayidx, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %13 = load i32, i32* %i, align 4
  %14 = load i32*, i32** %length.addr, align 8
  %15 = load i32, i32* %14, align 4
  %cmp7 = icmp sle i32 %13, %15
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %i, align 4
  %mul9 = mul nsw i32 %16, %17
  %sub10 = sub nsw i32 0, %mul9
  %conv11 = sitofp i32 %sub10 to double
  %18 = load double, double* %sigma2, align 8
  %div12 = fdiv double %conv11, %18
  %call13 = call double @exp(double %div12) #1
  %mul14 = fmul double %call13, 2.550000e+02
  %conv15 = fptosi double %mul14 to i32
  store i32 %conv15, i32* %temp, align 4
  %19 = load i32, i32* %temp, align 4
  %20 = load i32, i32* %i, align 4
  %sub16 = sub nsw i32 0, %20
  %idxprom = sext i32 %sub16 to i64
  %21 = load i32*, i32** %curve, align 8
  %arrayidx17 = getelementptr inbounds i32, i32* %21, i64 %idxprom
  store i32 %19, i32* %arrayidx17, align 4
  %22 = load i32, i32* %temp, align 4
  %23 = load i32, i32* %i, align 4
  %idxprom18 = sext i32 %23 to i64
  %24 = load i32*, i32** %curve, align 8
  %arrayidx19 = getelementptr inbounds i32, i32* %24, i64 %idxprom18
  store i32 %22, i32* %arrayidx19, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %25 = load i32, i32* %i, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %26 = load i32*, i32** %curve, align 8
  ret i32* %26
}

declare void @pixel_region_get_col(%struct._PixelRegion*, i32, i32, i32, i8*, i32) #2

; Function Attrs: inlinehint nounwind uwtable
define internal void @run_length_encode(i8* %src, i32* %dest, i32 %w, i32 %bytes) #3 {
entry:
  %src.addr = alloca i8*, align 8
  %dest.addr = alloca i32*, align 8
  %w.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %start = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %last = alloca i8, align 1
  store i8* %src, i8** %src.addr, align 8
  store i32* %dest, i32** %dest.addr, align 8
  store i32 %w, i32* %w.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %0 = load i8*, i8** %src.addr, align 8
  %1 = load i8, i8* %0, align 1
  store i8 %1, i8* %last, align 1
  %2 = load i32, i32* %bytes.addr, align 4
  %3 = load i8*, i8** %src.addr, align 8
  %idx.ext = zext i32 %2 to i64
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %idx.ext
  store i8* %add.ptr, i8** %src.addr, align 8
  store i32 0, i32* %start, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.12, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %w.addr, align 4
  %cmp = icmp ult i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end.14

for.body:                                         ; preds = %for.cond
  %6 = load i8*, i8** %src.addr, align 8
  %7 = load i8, i8* %6, align 1
  %conv = zext i8 %7 to i32
  %8 = load i8, i8* %last, align 1
  %conv1 = zext i8 %8 to i32
  %cmp2 = icmp ne i32 %conv, %conv1
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %9 = load i32, i32* %start, align 4
  store i32 %9, i32* %j, align 4
  br label %for.cond.4

for.cond.4:                                       ; preds = %for.inc, %if.then
  %10 = load i32, i32* %j, align 4
  %11 = load i32, i32* %i, align 4
  %cmp5 = icmp ult i32 %10, %11
  br i1 %cmp5, label %for.body.7, label %for.end

for.body.7:                                       ; preds = %for.cond.4
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %j, align 4
  %sub = sub i32 %12, %13
  %14 = load i32*, i32** %dest.addr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %14, i32 1
  store i32* %incdec.ptr, i32** %dest.addr, align 8
  store i32 %sub, i32* %14, align 4
  %15 = load i8, i8* %last, align 1
  %conv8 = zext i8 %15 to i32
  %16 = load i32*, i32** %dest.addr, align 8
  %incdec.ptr9 = getelementptr inbounds i32, i32* %16, i32 1
  store i32* %incdec.ptr9, i32** %dest.addr, align 8
  store i32 %conv8, i32* %16, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body.7
  %17 = load i32, i32* %j, align 4
  %inc = add i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.4

for.end:                                          ; preds = %for.cond.4
  %18 = load i32, i32* %i, align 4
  store i32 %18, i32* %start, align 4
  %19 = load i8*, i8** %src.addr, align 8
  %20 = load i8, i8* %19, align 1
  store i8 %20, i8* %last, align 1
  br label %if.end

if.end:                                           ; preds = %for.end, %for.body
  %21 = load i32, i32* %bytes.addr, align 4
  %22 = load i8*, i8** %src.addr, align 8
  %idx.ext10 = zext i32 %21 to i64
  %add.ptr11 = getelementptr inbounds i8, i8* %22, i64 %idx.ext10
  store i8* %add.ptr11, i8** %src.addr, align 8
  br label %for.inc.12

for.inc.12:                                       ; preds = %if.end
  %23 = load i32, i32* %i, align 4
  %inc13 = add i32 %23, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end.14:                                       ; preds = %for.cond
  %24 = load i32, i32* %start, align 4
  store i32 %24, i32* %j, align 4
  br label %for.cond.15

for.cond.15:                                      ; preds = %for.inc.23, %for.end.14
  %25 = load i32, i32* %j, align 4
  %26 = load i32, i32* %i, align 4
  %cmp16 = icmp ult i32 %25, %26
  br i1 %cmp16, label %for.body.18, label %for.end.25

for.body.18:                                      ; preds = %for.cond.15
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %j, align 4
  %sub19 = sub i32 %27, %28
  %29 = load i32*, i32** %dest.addr, align 8
  %incdec.ptr20 = getelementptr inbounds i32, i32* %29, i32 1
  store i32* %incdec.ptr20, i32** %dest.addr, align 8
  store i32 %sub19, i32* %29, align 4
  %30 = load i8, i8* %last, align 1
  %conv21 = zext i8 %30 to i32
  %31 = load i32*, i32** %dest.addr, align 8
  %incdec.ptr22 = getelementptr inbounds i32, i32* %31, i32 1
  store i32* %incdec.ptr22, i32** %dest.addr, align 8
  store i32 %conv21, i32* %31, align 4
  br label %for.inc.23

for.inc.23:                                       ; preds = %for.body.18
  %32 = load i32, i32* %j, align 4
  %inc24 = add i32 %32, 1
  store i32 %inc24, i32* %j, align 4
  br label %for.cond.15

for.end.25:                                       ; preds = %for.cond.15
  ret void
}

declare void @pixel_region_set_col(%struct._PixelRegion*, i32, i32, i32, i8*) #2

declare void @g_free(i8*) #2

declare void @pixel_region_get_row(%struct._PixelRegion*, i32, i32, i32, i8*, i32) #2

declare void @pixel_region_set_row(%struct._PixelRegion*, i32, i32, i32, i8*) #2

; Function Attrs: nounwind uwtable
define float @shapeburst_region(%struct._PixelRegion* %srcPR, %struct._PixelRegion* %distPR, void (i32, i32, i32, i8*)* %progress_callback, i8* %progress_data) #0 {
entry:
  %srcPR.addr = alloca %struct._PixelRegion*, align 8
  %distPR.addr = alloca %struct._PixelRegion*, align 8
  %progress_callback.addr = alloca void (i32, i32, i32, i8*)*, align 8
  %progress_data.addr = alloca i8*, align 8
  %tile = alloca %struct._Tile*, align 8
  %tile_data = alloca i8*, align 8
  %max_iterations = alloca float, align 4
  %distp_cur = alloca float*, align 8
  %distp_prev = alloca float*, align 8
  %memory = alloca float*, align 8
  %tmp = alloca float*, align 8
  %min_prev = alloca float, align 4
  %float_tmp = alloca float, align 4
  %min = alloca i32, align 4
  %min_left = alloca i32, align 4
  %length = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %fraction = alloca i32, align 4
  %prev_frac = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %end = alloca i32, align 4
  %boundary = alloca i32, align 4
  %inc = alloca i32, align 4
  %src = alloca i32, align 4
  %max_progress = alloca i32, align 4
  %progress = alloca i32, align 4
  %width = alloca i32, align 4
  store %struct._PixelRegion* %srcPR, %struct._PixelRegion** %srcPR.addr, align 8
  store %struct._PixelRegion* %distPR, %struct._PixelRegion** %distPR.addr, align 8
  store void (i32, i32, i32, i8*)* %progress_callback, void (i32, i32, i32, i8*)** %progress_callback.addr, align 8
  store i8* %progress_data, i8** %progress_data.addr, align 8
  store float 0.000000e+00, float* %max_iterations, align 4
  store i32 0, i32* %src, align 4
  %0 = load %struct._PixelRegion*, %struct._PixelRegion** %srcPR.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %0, i32 0, i32 8
  %1 = load i32, i32* %w, align 4
  %2 = load %struct._PixelRegion*, %struct._PixelRegion** %srcPR.addr, align 8
  %h = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %2, i32 0, i32 9
  %3 = load i32, i32* %h, align 4
  %mul = mul nsw i32 %1, %3
  store i32 %mul, i32* %max_progress, align 4
  store i32 0, i32* %progress, align 4
  %4 = load %struct._PixelRegion*, %struct._PixelRegion** %distPR.addr, align 8
  %w19 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %4, i32 0, i32 8
  %5 = load i32, i32* %w19, align 4
  %add = add nsw i32 %5, 1
  store i32 %add, i32* %length, align 4
  %6 = load i32, i32* %length, align 4
  %mul20 = mul nsw i32 %6, 2
  %conv = sext i32 %mul20 to i64
  %call = call noalias i8* @g_malloc_n(i64 %conv, i64 4)
  %7 = bitcast i8* %call to float*
  store float* %7, float** %memory, align 8
  %8 = load float*, float** %memory, align 8
  store float* %8, float** %distp_prev, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %length, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i32, i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %12 = load float*, float** %distp_prev, align 8
  %arrayidx = getelementptr inbounds float, float* %12, i64 %idxprom
  store float 0.000000e+00, float* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %13 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %13, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %14 = load float*, float** %distp_prev, align 8
  %add.ptr = getelementptr inbounds float, float* %14, i64 1
  store float* %add.ptr, float** %distp_prev, align 8
  %15 = load float*, float** %distp_prev, align 8
  %16 = load i32, i32* %length, align 4
  %idx.ext = sext i32 %16 to i64
  %add.ptr23 = getelementptr inbounds float, float* %15, i64 %idx.ext
  store float* %add.ptr23, float** %distp_cur, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.24

for.cond.24:                                      ; preds = %for.inc.179, %for.end
  %17 = load i32, i32* %i, align 4
  %18 = load %struct._PixelRegion*, %struct._PixelRegion** %srcPR.addr, align 8
  %h25 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %18, i32 0, i32 9
  %19 = load i32, i32* %h25, align 4
  %cmp26 = icmp slt i32 %17, %19
  br i1 %cmp26, label %for.body.28, label %for.end.181

for.body.28:                                      ; preds = %for.cond.24
  %20 = load float*, float** %distp_cur, align 8
  %add.ptr29 = getelementptr inbounds float, float* %20, i64 -1
  %21 = bitcast float* %add.ptr29 to i8*
  %22 = load i32, i32* %length, align 4
  %sub = sub nsw i32 %22, 1
  %conv30 = sext i32 %sub to i64
  %mul31 = mul i64 4, %conv30
  call void @llvm.memset.p0i8.i64(i8* %21, i8 0, i64 %mul31, i32 4, i1 false)
  store i32 0, i32* %j, align 4
  br label %for.cond.32

for.cond.32:                                      ; preds = %for.inc.167, %for.body.28
  %23 = load i32, i32* %j, align 4
  %24 = load %struct._PixelRegion*, %struct._PixelRegion** %srcPR.addr, align 8
  %w33 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %24, i32 0, i32 8
  %25 = load i32, i32* %w33, align 4
  %cmp34 = icmp slt i32 %23, %25
  br i1 %cmp34, label %for.body.36, label %for.end.169

for.body.36:                                      ; preds = %for.cond.32
  %26 = load i32, i32* %j, align 4
  %sub37 = sub nsw i32 %26, 1
  %idxprom38 = sext i32 %sub37 to i64
  %27 = load float*, float** %distp_cur, align 8
  %arrayidx39 = getelementptr inbounds float, float* %27, i64 %idxprom38
  %28 = load float, float* %arrayidx39, align 4
  %29 = load i32, i32* %j, align 4
  %idxprom40 = sext i32 %29 to i64
  %30 = load float*, float** %distp_prev, align 8
  %arrayidx41 = getelementptr inbounds float, float* %30, i64 %idxprom40
  %31 = load float, float* %arrayidx41, align 4
  %cmp42 = fcmp olt float %28, %31
  br i1 %cmp42, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body.36
  %32 = load i32, i32* %j, align 4
  %sub44 = sub nsw i32 %32, 1
  %idxprom45 = sext i32 %sub44 to i64
  %33 = load float*, float** %distp_cur, align 8
  %arrayidx46 = getelementptr inbounds float, float* %33, i64 %idxprom45
  %34 = load float, float* %arrayidx46, align 4
  br label %cond.end

cond.false:                                       ; preds = %for.body.36
  %35 = load i32, i32* %j, align 4
  %idxprom47 = sext i32 %35 to i64
  %36 = load float*, float** %distp_prev, align 8
  %arrayidx48 = getelementptr inbounds float, float* %36, i64 %idxprom47
  %37 = load float, float* %arrayidx48, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %34, %cond.true ], [ %37, %cond.false ]
  store float %cond, float* %min_prev, align 4
  %38 = load %struct._PixelRegion*, %struct._PixelRegion** %srcPR.addr, align 8
  %w49 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %38, i32 0, i32 8
  %39 = load i32, i32* %w49, align 4
  %40 = load i32, i32* %j, align 4
  %sub50 = sub nsw i32 %39, %40
  %sub51 = sub nsw i32 %sub50, 1
  %41 = load %struct._PixelRegion*, %struct._PixelRegion** %srcPR.addr, align 8
  %h52 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %41, i32 0, i32 9
  %42 = load i32, i32* %h52, align 4
  %43 = load i32, i32* %i, align 4
  %sub53 = sub nsw i32 %42, %43
  %sub54 = sub nsw i32 %sub53, 1
  %cmp55 = icmp slt i32 %sub51, %sub54
  br i1 %cmp55, label %cond.true.57, label %cond.false.61

cond.true.57:                                     ; preds = %cond.end
  %44 = load %struct._PixelRegion*, %struct._PixelRegion** %srcPR.addr, align 8
  %w58 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %44, i32 0, i32 8
  %45 = load i32, i32* %w58, align 4
  %46 = load i32, i32* %j, align 4
  %sub59 = sub nsw i32 %45, %46
  %sub60 = sub nsw i32 %sub59, 1
  br label %cond.end.65

cond.false.61:                                    ; preds = %cond.end
  %47 = load %struct._PixelRegion*, %struct._PixelRegion** %srcPR.addr, align 8
  %h62 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %47, i32 0, i32 9
  %48 = load i32, i32* %h62, align 4
  %49 = load i32, i32* %i, align 4
  %sub63 = sub nsw i32 %48, %49
  %sub64 = sub nsw i32 %sub63, 1
  br label %cond.end.65

cond.end.65:                                      ; preds = %cond.false.61, %cond.true.57
  %cond66 = phi i32 [ %sub60, %cond.true.57 ], [ %sub64, %cond.false.61 ]
  store i32 %cond66, i32* %min_left, align 4
  %50 = load i32, i32* %min_left, align 4
  %conv67 = sitofp i32 %50 to float
  %51 = load float, float* %min_prev, align 4
  %cmp68 = fcmp olt float %conv67, %51
  br i1 %cmp68, label %cond.true.70, label %cond.false.72

cond.true.70:                                     ; preds = %cond.end.65
  %52 = load i32, i32* %min_left, align 4
  %conv71 = sitofp i32 %52 to float
  br label %cond.end.73

cond.false.72:                                    ; preds = %cond.end.65
  %53 = load float, float* %min_prev, align 4
  br label %cond.end.73

cond.end.73:                                      ; preds = %cond.false.72, %cond.true.70
  %cond74 = phi float [ %conv71, %cond.true.70 ], [ %53, %cond.false.72 ]
  %conv75 = fptosi float %cond74 to i32
  store i32 %conv75, i32* %min, align 4
  store i32 255, i32* %fraction, align 4
  %54 = load i32, i32* %min, align 4
  %tobool = icmp ne i32 %54, 0
  br i1 %tobool, label %cond.true.76, label %cond.false.78

cond.true.76:                                     ; preds = %cond.end.73
  %55 = load i32, i32* %min, align 4
  %sub77 = sub nsw i32 %55, 1
  br label %cond.end.79

cond.false.78:                                    ; preds = %cond.end.73
  br label %cond.end.79

cond.end.79:                                      ; preds = %cond.false.78, %cond.true.76
  %cond80 = phi i32 [ %sub77, %cond.true.76 ], [ 0, %cond.false.78 ]
  store i32 %cond80, i32* %k, align 4
  br label %for.cond.81

for.cond.81:                                      ; preds = %for.inc.131, %cond.end.79
  %56 = load i32, i32* %k, align 4
  %57 = load i32, i32* %min, align 4
  %cmp82 = icmp sle i32 %56, %57
  br i1 %cmp82, label %for.body.84, label %for.end.133

for.body.84:                                      ; preds = %for.cond.81
  %58 = load i32, i32* %j, align 4
  store i32 %58, i32* %x, align 4
  %59 = load i32, i32* %i, align 4
  %60 = load i32, i32* %k, align 4
  %add85 = add nsw i32 %59, %60
  store i32 %add85, i32* %y, align 4
  %61 = load i32, i32* %y, align 4
  %62 = load i32, i32* %k, align 4
  %sub86 = sub nsw i32 %61, %62
  store i32 %sub86, i32* %end, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.end, %for.body.84
  %63 = load i32, i32* %y, align 4
  %64 = load i32, i32* %end, align 4
  %cmp87 = icmp sge i32 %63, %64
  br i1 %cmp87, label %while.body, label %while.end.130

while.body:                                       ; preds = %while.cond
  %65 = load %struct._PixelRegion*, %struct._PixelRegion** %srcPR.addr, align 8
  %tiles = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %65, i32 0, i32 1
  %66 = load %struct._TileManager*, %struct._TileManager** %tiles, align 8
  %67 = load i32, i32* %x, align 4
  %68 = load i32, i32* %y, align 4
  %call90 = call %struct._Tile* @tile_manager_get_tile(%struct._TileManager* %66, i32 %67, i32 %68, i32 1, i32 0)
  store %struct._Tile* %call90, %struct._Tile** %tile, align 8
  %69 = load %struct._Tile*, %struct._Tile** %tile, align 8
  %70 = load i32, i32* %x, align 4
  %71 = load i32, i32* %y, align 4
  %call91 = call i8* @tile_data_pointer(%struct._Tile* %69, i32 %70, i32 %71)
  store i8* %call91, i8** %tile_data, align 8
  %72 = load %struct._Tile*, %struct._Tile** %tile, align 8
  %call92 = call i32 @tile_ewidth(%struct._Tile* %72)
  store i32 %call92, i32* %width, align 4
  %73 = load i32, i32* %y, align 4
  %rem = srem i32 %73, 64
  %74 = load i32, i32* %width, align 4
  %75 = load i32, i32* %x, align 4
  %rem93 = srem i32 %75, 64
  %sub94 = sub nsw i32 %74, %rem93
  %sub95 = sub nsw i32 %sub94, 1
  %cmp96 = icmp slt i32 %rem, %sub95
  br i1 %cmp96, label %cond.true.98, label %cond.false.100

cond.true.98:                                     ; preds = %while.body
  %76 = load i32, i32* %y, align 4
  %rem99 = srem i32 %76, 64
  br label %cond.end.104

cond.false.100:                                   ; preds = %while.body
  %77 = load i32, i32* %width, align 4
  %78 = load i32, i32* %x, align 4
  %rem101 = srem i32 %78, 64
  %sub102 = sub nsw i32 %77, %rem101
  %sub103 = sub nsw i32 %sub102, 1
  br label %cond.end.104

cond.end.104:                                     ; preds = %cond.false.100, %cond.true.98
  %cond105 = phi i32 [ %rem99, %cond.true.98 ], [ %sub103, %cond.false.100 ]
  store i32 %cond105, i32* %boundary, align 4
  %79 = load i32, i32* %boundary, align 4
  %80 = load i32, i32* %y, align 4
  %81 = load i32, i32* %end, align 4
  %sub106 = sub nsw i32 %80, %81
  %cmp107 = icmp slt i32 %79, %sub106
  br i1 %cmp107, label %cond.true.109, label %cond.false.110

cond.true.109:                                    ; preds = %cond.end.104
  %82 = load i32, i32* %boundary, align 4
  br label %cond.end.112

cond.false.110:                                   ; preds = %cond.end.104
  %83 = load i32, i32* %y, align 4
  %84 = load i32, i32* %end, align 4
  %sub111 = sub nsw i32 %83, %84
  br label %cond.end.112

cond.end.112:                                     ; preds = %cond.false.110, %cond.true.109
  %cond113 = phi i32 [ %82, %cond.true.109 ], [ %sub111, %cond.false.110 ]
  %add114 = add nsw i32 %cond113, 1
  store i32 %add114, i32* %boundary, align 4
  %85 = load i32, i32* %width, align 4
  %sub115 = sub nsw i32 1, %85
  store i32 %sub115, i32* %inc, align 4
  br label %while.cond.116

while.cond.116:                                   ; preds = %if.end.125, %cond.end.112
  %86 = load i32, i32* %boundary, align 4
  %dec = add nsw i32 %86, -1
  store i32 %dec, i32* %boundary, align 4
  %tobool117 = icmp ne i32 %86, 0
  br i1 %tobool117, label %while.body.118, label %while.end

while.body.118:                                   ; preds = %while.cond.116
  %87 = load i8*, i8** %tile_data, align 8
  %88 = load i8, i8* %87, align 1
  %conv119 = zext i8 %88 to i32
  store i32 %conv119, i32* %src, align 4
  %89 = load i32, i32* %src, align 4
  %cmp120 = icmp eq i32 %89, 0
  br i1 %cmp120, label %if.then, label %if.end

if.then:                                          ; preds = %while.body.118
  %90 = load i32, i32* %k, align 4
  store i32 %90, i32* %min, align 4
  store i32 -1, i32* %y, align 4
  br label %while.end

if.end:                                           ; preds = %while.body.118
  %91 = load i32, i32* %src, align 4
  %92 = load i32, i32* %fraction, align 4
  %cmp122 = icmp slt i32 %91, %92
  br i1 %cmp122, label %if.then.124, label %if.end.125

if.then.124:                                      ; preds = %if.end
  %93 = load i32, i32* %src, align 4
  store i32 %93, i32* %fraction, align 4
  br label %if.end.125

if.end.125:                                       ; preds = %if.then.124, %if.end
  %94 = load i32, i32* %x, align 4
  %inc126 = add nsw i32 %94, 1
  store i32 %inc126, i32* %x, align 4
  %95 = load i32, i32* %y, align 4
  %dec127 = add nsw i32 %95, -1
  store i32 %dec127, i32* %y, align 4
  %96 = load i32, i32* %inc, align 4
  %97 = load i8*, i8** %tile_data, align 8
  %idx.ext128 = sext i32 %96 to i64
  %add.ptr129 = getelementptr inbounds i8, i8* %97, i64 %idx.ext128
  store i8* %add.ptr129, i8** %tile_data, align 8
  br label %while.cond.116

while.end:                                        ; preds = %if.then, %while.cond.116
  %98 = load %struct._Tile*, %struct._Tile** %tile, align 8
  call void @tile_release(%struct._Tile* %98, i32 0)
  br label %while.cond

while.end.130:                                    ; preds = %while.cond
  br label %for.inc.131

for.inc.131:                                      ; preds = %while.end.130
  %99 = load i32, i32* %k, align 4
  %inc132 = add nsw i32 %99, 1
  store i32 %inc132, i32* %k, align 4
  br label %for.cond.81

for.end.133:                                      ; preds = %for.cond.81
  %100 = load i32, i32* %src, align 4
  %cmp134 = icmp ne i32 %100, 0
  br i1 %cmp134, label %if.then.136, label %if.end.156

if.then.136:                                      ; preds = %for.end.133
  %101 = load i32, i32* %min_left, align 4
  %102 = load i32, i32* %min, align 4
  %cmp137 = icmp ne i32 %101, %102
  br i1 %cmp137, label %if.then.139, label %if.end.154

if.then.139:                                      ; preds = %if.then.136
  %103 = load float, float* %min_prev, align 4
  %104 = load i32, i32* %min, align 4
  %conv140 = sitofp i32 %104 to float
  %sub141 = fsub float %103, %conv140
  %mul142 = fmul float 2.550000e+02, %sub141
  %conv143 = fptosi float %mul142 to i32
  store i32 %conv143, i32* %prev_frac, align 4
  %105 = load i32, i32* %prev_frac, align 4
  %cmp144 = icmp eq i32 %105, 255
  br i1 %cmp144, label %if.then.146, label %if.end.147

if.then.146:                                      ; preds = %if.then.139
  store i32 0, i32* %prev_frac, align 4
  br label %if.end.147

if.end.147:                                       ; preds = %if.then.146, %if.then.139
  %106 = load i32, i32* %fraction, align 4
  %107 = load i32, i32* %prev_frac, align 4
  %cmp148 = icmp slt i32 %106, %107
  br i1 %cmp148, label %cond.true.150, label %cond.false.151

cond.true.150:                                    ; preds = %if.end.147
  %108 = load i32, i32* %fraction, align 4
  br label %cond.end.152

cond.false.151:                                   ; preds = %if.end.147
  %109 = load i32, i32* %prev_frac, align 4
  br label %cond.end.152

cond.end.152:                                     ; preds = %cond.false.151, %cond.true.150
  %cond153 = phi i32 [ %108, %cond.true.150 ], [ %109, %cond.false.151 ]
  store i32 %cond153, i32* %fraction, align 4
  br label %if.end.154

if.end.154:                                       ; preds = %cond.end.152, %if.then.136
  %110 = load i32, i32* %min, align 4
  %inc155 = add nsw i32 %110, 1
  store i32 %inc155, i32* %min, align 4
  br label %if.end.156

if.end.156:                                       ; preds = %if.end.154, %for.end.133
  %111 = load i32, i32* %min, align 4
  %conv157 = sitofp i32 %111 to double
  %112 = load i32, i32* %fraction, align 4
  %conv158 = sitofp i32 %112 to double
  %div = fdiv double %conv158, 2.560000e+02
  %add159 = fadd double %conv157, %div
  %conv160 = fptrunc double %add159 to float
  %113 = load i32, i32* %j, align 4
  %idxprom161 = sext i32 %113 to i64
  %114 = load float*, float** %distp_cur, align 8
  %arrayidx162 = getelementptr inbounds float, float* %114, i64 %idxprom161
  store float %conv160, float* %arrayidx162, align 4
  store float %conv160, float* %float_tmp, align 4
  %115 = load float, float* %float_tmp, align 4
  %116 = load float, float* %max_iterations, align 4
  %cmp163 = fcmp ogt float %115, %116
  br i1 %cmp163, label %if.then.165, label %if.end.166

if.then.165:                                      ; preds = %if.end.156
  %117 = load float, float* %float_tmp, align 4
  store float %117, float* %max_iterations, align 4
  br label %if.end.166

if.end.166:                                       ; preds = %if.then.165, %if.end.156
  br label %for.inc.167

for.inc.167:                                      ; preds = %if.end.166
  %118 = load i32, i32* %j, align 4
  %inc168 = add nsw i32 %118, 1
  store i32 %inc168, i32* %j, align 4
  br label %for.cond.32

for.end.169:                                      ; preds = %for.cond.32
  %119 = load %struct._PixelRegion*, %struct._PixelRegion** %distPR.addr, align 8
  %120 = load %struct._PixelRegion*, %struct._PixelRegion** %distPR.addr, align 8
  %x170 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %120, i32 0, i32 6
  %121 = load i32, i32* %x170, align 4
  %122 = load %struct._PixelRegion*, %struct._PixelRegion** %distPR.addr, align 8
  %y171 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %122, i32 0, i32 7
  %123 = load i32, i32* %y171, align 4
  %124 = load i32, i32* %i, align 4
  %add172 = add nsw i32 %123, %124
  %125 = load %struct._PixelRegion*, %struct._PixelRegion** %distPR.addr, align 8
  %w173 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %125, i32 0, i32 8
  %126 = load i32, i32* %w173, align 4
  %127 = load float*, float** %distp_cur, align 8
  %128 = bitcast float* %127 to i8*
  call void @pixel_region_set_row(%struct._PixelRegion* %119, i32 %121, i32 %add172, i32 %126, i8* %128)
  %129 = load float*, float** %distp_prev, align 8
  store float* %129, float** %tmp, align 8
  %130 = load float*, float** %distp_cur, align 8
  store float* %130, float** %distp_prev, align 8
  %131 = load float*, float** %tmp, align 8
  store float* %131, float** %distp_cur, align 8
  %132 = load void (i32, i32, i32, i8*)*, void (i32, i32, i32, i8*)** %progress_callback.addr, align 8
  %tobool174 = icmp ne void (i32, i32, i32, i8*)* %132, null
  br i1 %tobool174, label %if.then.175, label %if.end.178

if.then.175:                                      ; preds = %for.end.169
  %133 = load %struct._PixelRegion*, %struct._PixelRegion** %srcPR.addr, align 8
  %h176 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %133, i32 0, i32 9
  %134 = load i32, i32* %h176, align 4
  %135 = load i32, i32* %progress, align 4
  %add177 = add nsw i32 %135, %134
  store i32 %add177, i32* %progress, align 4
  %136 = load void (i32, i32, i32, i8*)*, void (i32, i32, i32, i8*)** %progress_callback.addr, align 8
  %137 = load i32, i32* %max_progress, align 4
  %138 = load i32, i32* %progress, align 4
  %139 = load i8*, i8** %progress_data.addr, align 8
  call void %136(i32 0, i32 %137, i32 %138, i8* %139)
  br label %if.end.178

if.end.178:                                       ; preds = %if.then.175, %for.end.169
  br label %for.inc.179

for.inc.179:                                      ; preds = %if.end.178
  %140 = load i32, i32* %i, align 4
  %inc180 = add nsw i32 %140, 1
  store i32 %inc180, i32* %i, align 4
  br label %for.cond.24

for.end.181:                                      ; preds = %for.cond.24
  %141 = load float*, float** %memory, align 8
  %142 = bitcast float* %141 to i8*
  call void @g_free(i8* %142)
  %143 = load float, float* %max_iterations, align 4
  ret float %143
}

declare %struct._Tile* @tile_manager_get_tile(%struct._TileManager*, i32, i32, i32, i32) #2

declare i8* @tile_data_pointer(%struct._Tile*, i32, i32) #2

declare void @tile_release(%struct._Tile*, i32) #2

; Function Attrs: nounwind uwtable
define void @fatten_region(%struct._PixelRegion* %region, i16 signext %xradius, i16 signext %yradius) #0 {
entry:
  %region.addr = alloca %struct._PixelRegion*, align 8
  %xradius.addr = alloca i16, align 2
  %yradius.addr = alloca i16, align 2
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %buf = alloca i8**, align 8
  %out = alloca i8*, align 8
  %max = alloca i8**, align 8
  %circ = alloca i16*, align 8
  %last_max = alloca i16, align 2
  %last_index = alloca i16, align 2
  %buffer = alloca i8*, align 8
  store %struct._PixelRegion* %region, %struct._PixelRegion** %region.addr, align 8
  store i16 %xradius, i16* %xradius.addr, align 2
  store i16 %yradius, i16* %yradius.addr, align 2
  %0 = load i16, i16* %xradius.addr, align 2
  %conv = sext i16 %0 to i32
  %cmp = icmp sle i32 %conv, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i16, i16* %yradius.addr, align 2
  %conv2 = sext i16 %1 to i32
  %cmp3 = icmp sle i32 %conv2, 0
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %2, i32 0, i32 8
  %3 = load i32, i32* %w, align 4
  %4 = load i16, i16* %xradius.addr, align 2
  %conv5 = sext i16 %4 to i32
  %mul = mul nsw i32 2, %conv5
  %add = add nsw i32 %3, %mul
  %conv6 = sext i32 %add to i64
  %call = call noalias i8* @g_malloc_n(i64 %conv6, i64 8)
  %5 = bitcast i8* %call to i8**
  store i8** %5, i8*** %max, align 8
  %6 = load i16, i16* %yradius.addr, align 2
  %conv7 = sext i16 %6 to i32
  %add8 = add nsw i32 %conv7, 1
  %conv9 = sext i32 %add8 to i64
  %call10 = call noalias i8* @g_malloc_n(i64 %conv9, i64 8)
  %7 = bitcast i8* %call10 to i8**
  store i8** %7, i8*** %buf, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i32, i32* %i, align 4
  %9 = load i16, i16* %yradius.addr, align 2
  %conv11 = sext i16 %9 to i32
  %add12 = add nsw i32 %conv11, 1
  %cmp13 = icmp slt i32 %8, %add12
  br i1 %cmp13, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w15 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %10, i32 0, i32 8
  %11 = load i32, i32* %w15, align 4
  %conv16 = sext i32 %11 to i64
  %call17 = call noalias i8* @g_malloc_n(i64 %conv16, i64 1)
  %12 = load i32, i32* %i, align 4
  %idxprom = sext i32 %12 to i64
  %13 = load i8**, i8*** %buf, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %13, i64 %idxprom
  store i8* %call17, i8** %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w18 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %15, i32 0, i32 8
  %16 = load i32, i32* %w18, align 4
  %17 = load i16, i16* %xradius.addr, align 2
  %conv19 = sext i16 %17 to i32
  %mul20 = mul nsw i32 2, %conv19
  %add21 = add nsw i32 %16, %mul20
  %18 = load i16, i16* %yradius.addr, align 2
  %conv22 = sext i16 %18 to i32
  %add23 = add nsw i32 %conv22, 1
  %mul24 = mul nsw i32 %add21, %add23
  %conv25 = sext i32 %mul24 to i64
  %call26 = call noalias i8* @g_malloc_n(i64 %conv25, i64 1)
  store i8* %call26, i8** %buffer, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.27

for.cond.27:                                      ; preds = %for.inc.82, %for.end
  %19 = load i32, i32* %i, align 4
  %20 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w28 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %20, i32 0, i32 8
  %21 = load i32, i32* %w28, align 4
  %22 = load i16, i16* %xradius.addr, align 2
  %conv29 = sext i16 %22 to i32
  %mul30 = mul nsw i32 2, %conv29
  %add31 = add nsw i32 %21, %mul30
  %cmp32 = icmp slt i32 %19, %add31
  br i1 %cmp32, label %for.body.34, label %for.end.84

for.body.34:                                      ; preds = %for.cond.27
  %23 = load i32, i32* %i, align 4
  %24 = load i16, i16* %xradius.addr, align 2
  %conv35 = sext i16 %24 to i32
  %cmp36 = icmp slt i32 %23, %conv35
  br i1 %cmp36, label %if.then.38, label %if.else

if.then.38:                                       ; preds = %for.body.34
  %25 = load i8*, i8** %buffer, align 8
  %26 = load i32, i32* %i, align 4
  %idxprom39 = sext i32 %26 to i64
  %27 = load i8**, i8*** %max, align 8
  %arrayidx40 = getelementptr inbounds i8*, i8** %27, i64 %idxprom39
  store i8* %25, i8** %arrayidx40, align 8
  br label %if.end.68

if.else:                                          ; preds = %for.body.34
  %28 = load i32, i32* %i, align 4
  %29 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w41 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %29, i32 0, i32 8
  %30 = load i32, i32* %w41, align 4
  %31 = load i16, i16* %xradius.addr, align 2
  %conv42 = sext i16 %31 to i32
  %add43 = add nsw i32 %30, %conv42
  %cmp44 = icmp slt i32 %28, %add43
  br i1 %cmp44, label %if.then.46, label %if.else.55

if.then.46:                                       ; preds = %if.else
  %32 = load i16, i16* %yradius.addr, align 2
  %conv47 = sext i16 %32 to i32
  %add48 = add nsw i32 %conv47, 1
  %33 = load i32, i32* %i, align 4
  %34 = load i16, i16* %xradius.addr, align 2
  %conv49 = sext i16 %34 to i32
  %sub = sub nsw i32 %33, %conv49
  %mul50 = mul nsw i32 %add48, %sub
  %idxprom51 = sext i32 %mul50 to i64
  %35 = load i8*, i8** %buffer, align 8
  %arrayidx52 = getelementptr inbounds i8, i8* %35, i64 %idxprom51
  %36 = load i32, i32* %i, align 4
  %idxprom53 = sext i32 %36 to i64
  %37 = load i8**, i8*** %max, align 8
  %arrayidx54 = getelementptr inbounds i8*, i8** %37, i64 %idxprom53
  store i8* %arrayidx52, i8** %arrayidx54, align 8
  br label %if.end.67

if.else.55:                                       ; preds = %if.else
  %38 = load i16, i16* %yradius.addr, align 2
  %conv56 = sext i16 %38 to i32
  %add57 = add nsw i32 %conv56, 1
  %39 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w58 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %39, i32 0, i32 8
  %40 = load i32, i32* %w58, align 4
  %41 = load i16, i16* %xradius.addr, align 2
  %conv59 = sext i16 %41 to i32
  %add60 = add nsw i32 %40, %conv59
  %sub61 = sub nsw i32 %add60, 1
  %mul62 = mul nsw i32 %add57, %sub61
  %idxprom63 = sext i32 %mul62 to i64
  %42 = load i8*, i8** %buffer, align 8
  %arrayidx64 = getelementptr inbounds i8, i8* %42, i64 %idxprom63
  %43 = load i32, i32* %i, align 4
  %idxprom65 = sext i32 %43 to i64
  %44 = load i8**, i8*** %max, align 8
  %arrayidx66 = getelementptr inbounds i8*, i8** %44, i64 %idxprom65
  store i8* %arrayidx64, i8** %arrayidx66, align 8
  br label %if.end.67

if.end.67:                                        ; preds = %if.else.55, %if.then.46
  br label %if.end.68

if.end.68:                                        ; preds = %if.end.67, %if.then.38
  store i32 0, i32* %j, align 4
  br label %for.cond.69

for.cond.69:                                      ; preds = %for.inc.79, %if.end.68
  %45 = load i32, i32* %j, align 4
  %46 = load i16, i16* %xradius.addr, align 2
  %conv70 = sext i16 %46 to i32
  %add71 = add nsw i32 %conv70, 1
  %cmp72 = icmp slt i32 %45, %add71
  br i1 %cmp72, label %for.body.74, label %for.end.81

for.body.74:                                      ; preds = %for.cond.69
  %47 = load i32, i32* %j, align 4
  %idxprom75 = sext i32 %47 to i64
  %48 = load i32, i32* %i, align 4
  %idxprom76 = sext i32 %48 to i64
  %49 = load i8**, i8*** %max, align 8
  %arrayidx77 = getelementptr inbounds i8*, i8** %49, i64 %idxprom76
  %50 = load i8*, i8** %arrayidx77, align 8
  %arrayidx78 = getelementptr inbounds i8, i8* %50, i64 %idxprom75
  store i8 0, i8* %arrayidx78, align 1
  br label %for.inc.79

for.inc.79:                                       ; preds = %for.body.74
  %51 = load i32, i32* %j, align 4
  %inc80 = add nsw i32 %51, 1
  store i32 %inc80, i32* %j, align 4
  br label %for.cond.69

for.end.81:                                       ; preds = %for.cond.69
  br label %for.inc.82

for.inc.82:                                       ; preds = %for.end.81
  %52 = load i32, i32* %i, align 4
  %inc83 = add nsw i32 %52, 1
  store i32 %inc83, i32* %i, align 4
  br label %for.cond.27

for.end.84:                                       ; preds = %for.cond.27
  %53 = load i16, i16* %xradius.addr, align 2
  %conv85 = sext i16 %53 to i32
  %54 = load i8**, i8*** %max, align 8
  %idx.ext = sext i32 %conv85 to i64
  %add.ptr = getelementptr inbounds i8*, i8** %54, i64 %idx.ext
  store i8** %add.ptr, i8*** %max, align 8
  %55 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w86 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %55, i32 0, i32 8
  %56 = load i32, i32* %w86, align 4
  %conv87 = sext i32 %56 to i64
  %call88 = call noalias i8* @g_malloc_n(i64 %conv87, i64 1)
  store i8* %call88, i8** %out, align 8
  %57 = load i16, i16* %xradius.addr, align 2
  %conv89 = sext i16 %57 to i32
  %mul90 = mul nsw i32 2, %conv89
  %add91 = add nsw i32 %mul90, 1
  %conv92 = sext i32 %add91 to i64
  %call93 = call noalias i8* @g_malloc_n(i64 %conv92, i64 2)
  %58 = bitcast i8* %call93 to i16*
  store i16* %58, i16** %circ, align 8
  %59 = load i16*, i16** %circ, align 8
  %60 = load i16, i16* %xradius.addr, align 2
  %61 = load i16, i16* %yradius.addr, align 2
  call void @compute_border(i16* %59, i16 zeroext %60, i16 zeroext %61)
  %62 = load i16, i16* %xradius.addr, align 2
  %conv94 = sext i16 %62 to i32
  %63 = load i16*, i16** %circ, align 8
  %idx.ext95 = sext i32 %conv94 to i64
  %add.ptr96 = getelementptr inbounds i16, i16* %63, i64 %idx.ext95
  store i16* %add.ptr96, i16** %circ, align 8
  %64 = load i8**, i8*** %buf, align 8
  %arrayidx97 = getelementptr inbounds i8*, i8** %64, i64 0
  %65 = load i8*, i8** %arrayidx97, align 8
  %66 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w98 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %66, i32 0, i32 8
  %67 = load i32, i32* %w98, align 4
  %conv99 = sext i32 %67 to i64
  call void @llvm.memset.p0i8.i64(i8* %65, i8 0, i64 %conv99, i32 1, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond.100

for.cond.100:                                     ; preds = %for.inc.114, %for.end.84
  %68 = load i32, i32* %i, align 4
  %69 = load i16, i16* %yradius.addr, align 2
  %conv101 = sext i16 %69 to i32
  %cmp102 = icmp slt i32 %68, %conv101
  br i1 %cmp102, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond.100
  %70 = load i32, i32* %i, align 4
  %71 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %h = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %71, i32 0, i32 9
  %72 = load i32, i32* %h, align 4
  %cmp104 = icmp slt i32 %70, %72
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond.100
  %73 = phi i1 [ false, %for.cond.100 ], [ %cmp104, %land.rhs ]
  br i1 %73, label %for.body.106, label %for.end.116

for.body.106:                                     ; preds = %land.end
  %74 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %75 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %x107 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %75, i32 0, i32 6
  %76 = load i32, i32* %x107, align 4
  %77 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %y108 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %77, i32 0, i32 7
  %78 = load i32, i32* %y108, align 4
  %79 = load i32, i32* %i, align 4
  %add109 = add nsw i32 %78, %79
  %80 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w110 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %80, i32 0, i32 8
  %81 = load i32, i32* %w110, align 4
  %82 = load i32, i32* %i, align 4
  %add111 = add nsw i32 %82, 1
  %idxprom112 = sext i32 %add111 to i64
  %83 = load i8**, i8*** %buf, align 8
  %arrayidx113 = getelementptr inbounds i8*, i8** %83, i64 %idxprom112
  %84 = load i8*, i8** %arrayidx113, align 8
  call void @pixel_region_get_row(%struct._PixelRegion* %74, i32 %76, i32 %add109, i32 %81, i8* %84, i32 1)
  br label %for.inc.114

for.inc.114:                                      ; preds = %for.body.106
  %85 = load i32, i32* %i, align 4
  %inc115 = add nsw i32 %85, 1
  store i32 %inc115, i32* %i, align 4
  br label %for.cond.100

for.end.116:                                      ; preds = %land.end
  store i32 0, i32* %x, align 4
  br label %for.cond.117

for.cond.117:                                     ; preds = %for.inc.169, %for.end.116
  %86 = load i32, i32* %x, align 4
  %87 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w118 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %87, i32 0, i32 8
  %88 = load i32, i32* %w118, align 4
  %cmp119 = icmp slt i32 %86, %88
  br i1 %cmp119, label %for.body.121, label %for.end.171

for.body.121:                                     ; preds = %for.cond.117
  %89 = load i32, i32* %x, align 4
  %idxprom122 = sext i32 %89 to i64
  %90 = load i8**, i8*** %max, align 8
  %arrayidx123 = getelementptr inbounds i8*, i8** %90, i64 %idxprom122
  %91 = load i8*, i8** %arrayidx123, align 8
  %arrayidx124 = getelementptr inbounds i8, i8* %91, i64 0
  store i8 0, i8* %arrayidx124, align 1
  %92 = load i32, i32* %x, align 4
  %idxprom125 = sext i32 %92 to i64
  %93 = load i8**, i8*** %buf, align 8
  %arrayidx126 = getelementptr inbounds i8*, i8** %93, i64 1
  %94 = load i8*, i8** %arrayidx126, align 8
  %arrayidx127 = getelementptr inbounds i8, i8* %94, i64 %idxprom125
  %95 = load i8, i8* %arrayidx127, align 1
  %96 = load i32, i32* %x, align 4
  %idxprom128 = sext i32 %96 to i64
  %97 = load i8**, i8*** %max, align 8
  %arrayidx129 = getelementptr inbounds i8*, i8** %97, i64 %idxprom128
  %98 = load i8*, i8** %arrayidx129, align 8
  %arrayidx130 = getelementptr inbounds i8, i8* %98, i64 1
  store i8 %95, i8* %arrayidx130, align 1
  store i32 2, i32* %j, align 4
  br label %for.cond.131

for.cond.131:                                     ; preds = %for.inc.166, %for.body.121
  %99 = load i32, i32* %j, align 4
  %100 = load i16, i16* %yradius.addr, align 2
  %conv132 = sext i16 %100 to i32
  %add133 = add nsw i32 %conv132, 1
  %cmp134 = icmp slt i32 %99, %add133
  br i1 %cmp134, label %for.body.136, label %for.end.168

for.body.136:                                     ; preds = %for.cond.131
  %101 = load i32, i32* %x, align 4
  %idxprom137 = sext i32 %101 to i64
  %102 = load i32, i32* %j, align 4
  %idxprom138 = sext i32 %102 to i64
  %103 = load i8**, i8*** %buf, align 8
  %arrayidx139 = getelementptr inbounds i8*, i8** %103, i64 %idxprom138
  %104 = load i8*, i8** %arrayidx139, align 8
  %arrayidx140 = getelementptr inbounds i8, i8* %104, i64 %idxprom137
  %105 = load i8, i8* %arrayidx140, align 1
  %conv141 = zext i8 %105 to i32
  %106 = load i32, i32* %j, align 4
  %sub142 = sub nsw i32 %106, 1
  %idxprom143 = sext i32 %sub142 to i64
  %107 = load i32, i32* %x, align 4
  %idxprom144 = sext i32 %107 to i64
  %108 = load i8**, i8*** %max, align 8
  %arrayidx145 = getelementptr inbounds i8*, i8** %108, i64 %idxprom144
  %109 = load i8*, i8** %arrayidx145, align 8
  %arrayidx146 = getelementptr inbounds i8, i8* %109, i64 %idxprom143
  %110 = load i8, i8* %arrayidx146, align 1
  %conv147 = zext i8 %110 to i32
  %cmp148 = icmp sgt i32 %conv141, %conv147
  br i1 %cmp148, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body.136
  %111 = load i32, i32* %x, align 4
  %idxprom150 = sext i32 %111 to i64
  %112 = load i32, i32* %j, align 4
  %idxprom151 = sext i32 %112 to i64
  %113 = load i8**, i8*** %buf, align 8
  %arrayidx152 = getelementptr inbounds i8*, i8** %113, i64 %idxprom151
  %114 = load i8*, i8** %arrayidx152, align 8
  %arrayidx153 = getelementptr inbounds i8, i8* %114, i64 %idxprom150
  %115 = load i8, i8* %arrayidx153, align 1
  %conv154 = zext i8 %115 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.body.136
  %116 = load i32, i32* %j, align 4
  %sub155 = sub nsw i32 %116, 1
  %idxprom156 = sext i32 %sub155 to i64
  %117 = load i32, i32* %x, align 4
  %idxprom157 = sext i32 %117 to i64
  %118 = load i8**, i8*** %max, align 8
  %arrayidx158 = getelementptr inbounds i8*, i8** %118, i64 %idxprom157
  %119 = load i8*, i8** %arrayidx158, align 8
  %arrayidx159 = getelementptr inbounds i8, i8* %119, i64 %idxprom156
  %120 = load i8, i8* %arrayidx159, align 1
  %conv160 = zext i8 %120 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv154, %cond.true ], [ %conv160, %cond.false ]
  %conv161 = trunc i32 %cond to i8
  %121 = load i32, i32* %j, align 4
  %idxprom162 = sext i32 %121 to i64
  %122 = load i32, i32* %x, align 4
  %idxprom163 = sext i32 %122 to i64
  %123 = load i8**, i8*** %max, align 8
  %arrayidx164 = getelementptr inbounds i8*, i8** %123, i64 %idxprom163
  %124 = load i8*, i8** %arrayidx164, align 8
  %arrayidx165 = getelementptr inbounds i8, i8* %124, i64 %idxprom162
  store i8 %conv161, i8* %arrayidx165, align 1
  br label %for.inc.166

for.inc.166:                                      ; preds = %cond.end
  %125 = load i32, i32* %j, align 4
  %inc167 = add nsw i32 %125, 1
  store i32 %inc167, i32* %j, align 4
  br label %for.cond.131

for.end.168:                                      ; preds = %for.cond.131
  br label %for.inc.169

for.inc.169:                                      ; preds = %for.end.168
  %126 = load i32, i32* %x, align 4
  %inc170 = add nsw i32 %126, 1
  store i32 %inc170, i32* %x, align 4
  br label %for.cond.117

for.end.171:                                      ; preds = %for.cond.117
  store i32 0, i32* %y, align 4
  br label %for.cond.172

for.cond.172:                                     ; preds = %for.inc.411, %for.end.171
  %127 = load i32, i32* %y, align 4
  %128 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %h173 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %128, i32 0, i32 9
  %129 = load i32, i32* %h173, align 4
  %cmp174 = icmp slt i32 %127, %129
  br i1 %cmp174, label %for.body.176, label %for.end.413

for.body.176:                                     ; preds = %for.cond.172
  %130 = load i8**, i8*** %buf, align 8
  %131 = load i16, i16* %yradius.addr, align 2
  %conv177 = sext i16 %131 to i32
  %add178 = add nsw i32 %conv177, 1
  call void @rotate_pointers(i8** %130, i32 %add178)
  %132 = load i32, i32* %y, align 4
  %133 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %h179 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %133, i32 0, i32 9
  %134 = load i32, i32* %h179, align 4
  %135 = load i16, i16* %yradius.addr, align 2
  %conv180 = sext i16 %135 to i32
  %sub181 = sub nsw i32 %134, %conv180
  %cmp182 = icmp slt i32 %132, %sub181
  br i1 %cmp182, label %if.then.184, label %if.else.193

if.then.184:                                      ; preds = %for.body.176
  %136 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %137 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %x185 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %137, i32 0, i32 6
  %138 = load i32, i32* %x185, align 4
  %139 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %y186 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %139, i32 0, i32 7
  %140 = load i32, i32* %y186, align 4
  %141 = load i32, i32* %y, align 4
  %add187 = add nsw i32 %140, %141
  %142 = load i16, i16* %yradius.addr, align 2
  %conv188 = sext i16 %142 to i32
  %add189 = add nsw i32 %add187, %conv188
  %143 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w190 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %143, i32 0, i32 8
  %144 = load i32, i32* %w190, align 4
  %145 = load i16, i16* %yradius.addr, align 2
  %idxprom191 = sext i16 %145 to i64
  %146 = load i8**, i8*** %buf, align 8
  %arrayidx192 = getelementptr inbounds i8*, i8** %146, i64 %idxprom191
  %147 = load i8*, i8** %arrayidx192, align 8
  call void @pixel_region_get_row(%struct._PixelRegion* %136, i32 %138, i32 %add189, i32 %144, i8* %147, i32 1)
  br label %if.end.198

if.else.193:                                      ; preds = %for.body.176
  %148 = load i16, i16* %yradius.addr, align 2
  %idxprom194 = sext i16 %148 to i64
  %149 = load i8**, i8*** %buf, align 8
  %arrayidx195 = getelementptr inbounds i8*, i8** %149, i64 %idxprom194
  %150 = load i8*, i8** %arrayidx195, align 8
  %151 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w196 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %151, i32 0, i32 8
  %152 = load i32, i32* %w196, align 4
  %conv197 = sext i32 %152 to i64
  call void @llvm.memset.p0i8.i64(i8* %150, i8 0, i64 %conv197, i32 1, i1 false)
  br label %if.end.198

if.end.198:                                       ; preds = %if.else.193, %if.then.184
  store i32 0, i32* %x, align 4
  br label %for.cond.199

for.cond.199:                                     ; preds = %for.inc.298, %if.end.198
  %153 = load i32, i32* %x, align 4
  %154 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w200 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %154, i32 0, i32 8
  %155 = load i32, i32* %w200, align 4
  %cmp201 = icmp slt i32 %153, %155
  br i1 %cmp201, label %for.body.203, label %for.end.300

for.body.203:                                     ; preds = %for.cond.199
  %156 = load i16, i16* %yradius.addr, align 2
  %conv204 = sext i16 %156 to i32
  store i32 %conv204, i32* %i, align 4
  br label %for.cond.205

for.cond.205:                                     ; preds = %for.inc.290, %for.body.203
  %157 = load i32, i32* %i, align 4
  %cmp206 = icmp sgt i32 %157, 0
  br i1 %cmp206, label %for.body.208, label %for.end.291

for.body.208:                                     ; preds = %for.cond.205
  %158 = load i32, i32* %i, align 4
  %sub209 = sub nsw i32 %158, 1
  %idxprom210 = sext i32 %sub209 to i64
  %159 = load i32, i32* %x, align 4
  %idxprom211 = sext i32 %159 to i64
  %160 = load i8**, i8*** %max, align 8
  %arrayidx212 = getelementptr inbounds i8*, i8** %160, i64 %idxprom211
  %161 = load i8*, i8** %arrayidx212, align 8
  %arrayidx213 = getelementptr inbounds i8, i8* %161, i64 %idxprom210
  %162 = load i8, i8* %arrayidx213, align 1
  %conv214 = zext i8 %162 to i32
  %163 = load i32, i32* %x, align 4
  %idxprom215 = sext i32 %163 to i64
  %164 = load i32, i32* %i, align 4
  %sub216 = sub nsw i32 %164, 1
  %idxprom217 = sext i32 %sub216 to i64
  %165 = load i8**, i8*** %buf, align 8
  %arrayidx218 = getelementptr inbounds i8*, i8** %165, i64 %idxprom217
  %166 = load i8*, i8** %arrayidx218, align 8
  %arrayidx219 = getelementptr inbounds i8, i8* %166, i64 %idxprom215
  %167 = load i8, i8* %arrayidx219, align 1
  %conv220 = zext i8 %167 to i32
  %cmp221 = icmp sgt i32 %conv214, %conv220
  br i1 %cmp221, label %cond.true.223, label %cond.false.230

cond.true.223:                                    ; preds = %for.body.208
  %168 = load i32, i32* %i, align 4
  %sub224 = sub nsw i32 %168, 1
  %idxprom225 = sext i32 %sub224 to i64
  %169 = load i32, i32* %x, align 4
  %idxprom226 = sext i32 %169 to i64
  %170 = load i8**, i8*** %max, align 8
  %arrayidx227 = getelementptr inbounds i8*, i8** %170, i64 %idxprom226
  %171 = load i8*, i8** %arrayidx227, align 8
  %arrayidx228 = getelementptr inbounds i8, i8* %171, i64 %idxprom225
  %172 = load i8, i8* %arrayidx228, align 1
  %conv229 = zext i8 %172 to i32
  br label %cond.end.237

cond.false.230:                                   ; preds = %for.body.208
  %173 = load i32, i32* %x, align 4
  %idxprom231 = sext i32 %173 to i64
  %174 = load i32, i32* %i, align 4
  %sub232 = sub nsw i32 %174, 1
  %idxprom233 = sext i32 %sub232 to i64
  %175 = load i8**, i8*** %buf, align 8
  %arrayidx234 = getelementptr inbounds i8*, i8** %175, i64 %idxprom233
  %176 = load i8*, i8** %arrayidx234, align 8
  %arrayidx235 = getelementptr inbounds i8, i8* %176, i64 %idxprom231
  %177 = load i8, i8* %arrayidx235, align 1
  %conv236 = zext i8 %177 to i32
  br label %cond.end.237

cond.end.237:                                     ; preds = %cond.false.230, %cond.true.223
  %cond238 = phi i32 [ %conv229, %cond.true.223 ], [ %conv236, %cond.false.230 ]
  %178 = load i32, i32* %x, align 4
  %idxprom239 = sext i32 %178 to i64
  %179 = load i32, i32* %i, align 4
  %idxprom240 = sext i32 %179 to i64
  %180 = load i8**, i8*** %buf, align 8
  %arrayidx241 = getelementptr inbounds i8*, i8** %180, i64 %idxprom240
  %181 = load i8*, i8** %arrayidx241, align 8
  %arrayidx242 = getelementptr inbounds i8, i8* %181, i64 %idxprom239
  %182 = load i8, i8* %arrayidx242, align 1
  %conv243 = zext i8 %182 to i32
  %cmp244 = icmp sgt i32 %cond238, %conv243
  br i1 %cmp244, label %cond.true.246, label %cond.false.277

cond.true.246:                                    ; preds = %cond.end.237
  %183 = load i32, i32* %i, align 4
  %sub247 = sub nsw i32 %183, 1
  %idxprom248 = sext i32 %sub247 to i64
  %184 = load i32, i32* %x, align 4
  %idxprom249 = sext i32 %184 to i64
  %185 = load i8**, i8*** %max, align 8
  %arrayidx250 = getelementptr inbounds i8*, i8** %185, i64 %idxprom249
  %186 = load i8*, i8** %arrayidx250, align 8
  %arrayidx251 = getelementptr inbounds i8, i8* %186, i64 %idxprom248
  %187 = load i8, i8* %arrayidx251, align 1
  %conv252 = zext i8 %187 to i32
  %188 = load i32, i32* %x, align 4
  %idxprom253 = sext i32 %188 to i64
  %189 = load i32, i32* %i, align 4
  %sub254 = sub nsw i32 %189, 1
  %idxprom255 = sext i32 %sub254 to i64
  %190 = load i8**, i8*** %buf, align 8
  %arrayidx256 = getelementptr inbounds i8*, i8** %190, i64 %idxprom255
  %191 = load i8*, i8** %arrayidx256, align 8
  %arrayidx257 = getelementptr inbounds i8, i8* %191, i64 %idxprom253
  %192 = load i8, i8* %arrayidx257, align 1
  %conv258 = zext i8 %192 to i32
  %cmp259 = icmp sgt i32 %conv252, %conv258
  br i1 %cmp259, label %cond.true.261, label %cond.false.268

cond.true.261:                                    ; preds = %cond.true.246
  %193 = load i32, i32* %i, align 4
  %sub262 = sub nsw i32 %193, 1
  %idxprom263 = sext i32 %sub262 to i64
  %194 = load i32, i32* %x, align 4
  %idxprom264 = sext i32 %194 to i64
  %195 = load i8**, i8*** %max, align 8
  %arrayidx265 = getelementptr inbounds i8*, i8** %195, i64 %idxprom264
  %196 = load i8*, i8** %arrayidx265, align 8
  %arrayidx266 = getelementptr inbounds i8, i8* %196, i64 %idxprom263
  %197 = load i8, i8* %arrayidx266, align 1
  %conv267 = zext i8 %197 to i32
  br label %cond.end.275

cond.false.268:                                   ; preds = %cond.true.246
  %198 = load i32, i32* %x, align 4
  %idxprom269 = sext i32 %198 to i64
  %199 = load i32, i32* %i, align 4
  %sub270 = sub nsw i32 %199, 1
  %idxprom271 = sext i32 %sub270 to i64
  %200 = load i8**, i8*** %buf, align 8
  %arrayidx272 = getelementptr inbounds i8*, i8** %200, i64 %idxprom271
  %201 = load i8*, i8** %arrayidx272, align 8
  %arrayidx273 = getelementptr inbounds i8, i8* %201, i64 %idxprom269
  %202 = load i8, i8* %arrayidx273, align 1
  %conv274 = zext i8 %202 to i32
  br label %cond.end.275

cond.end.275:                                     ; preds = %cond.false.268, %cond.true.261
  %cond276 = phi i32 [ %conv267, %cond.true.261 ], [ %conv274, %cond.false.268 ]
  br label %cond.end.283

cond.false.277:                                   ; preds = %cond.end.237
  %203 = load i32, i32* %x, align 4
  %idxprom278 = sext i32 %203 to i64
  %204 = load i32, i32* %i, align 4
  %idxprom279 = sext i32 %204 to i64
  %205 = load i8**, i8*** %buf, align 8
  %arrayidx280 = getelementptr inbounds i8*, i8** %205, i64 %idxprom279
  %206 = load i8*, i8** %arrayidx280, align 8
  %arrayidx281 = getelementptr inbounds i8, i8* %206, i64 %idxprom278
  %207 = load i8, i8* %arrayidx281, align 1
  %conv282 = zext i8 %207 to i32
  br label %cond.end.283

cond.end.283:                                     ; preds = %cond.false.277, %cond.end.275
  %cond284 = phi i32 [ %cond276, %cond.end.275 ], [ %conv282, %cond.false.277 ]
  %conv285 = trunc i32 %cond284 to i8
  %208 = load i32, i32* %i, align 4
  %idxprom286 = sext i32 %208 to i64
  %209 = load i32, i32* %x, align 4
  %idxprom287 = sext i32 %209 to i64
  %210 = load i8**, i8*** %max, align 8
  %arrayidx288 = getelementptr inbounds i8*, i8** %210, i64 %idxprom287
  %211 = load i8*, i8** %arrayidx288, align 8
  %arrayidx289 = getelementptr inbounds i8, i8* %211, i64 %idxprom286
  store i8 %conv285, i8* %arrayidx289, align 1
  br label %for.inc.290

for.inc.290:                                      ; preds = %cond.end.283
  %212 = load i32, i32* %i, align 4
  %dec = add nsw i32 %212, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond.205

for.end.291:                                      ; preds = %for.cond.205
  %213 = load i32, i32* %x, align 4
  %idxprom292 = sext i32 %213 to i64
  %214 = load i8**, i8*** %buf, align 8
  %arrayidx293 = getelementptr inbounds i8*, i8** %214, i64 0
  %215 = load i8*, i8** %arrayidx293, align 8
  %arrayidx294 = getelementptr inbounds i8, i8* %215, i64 %idxprom292
  %216 = load i8, i8* %arrayidx294, align 1
  %217 = load i32, i32* %x, align 4
  %idxprom295 = sext i32 %217 to i64
  %218 = load i8**, i8*** %max, align 8
  %arrayidx296 = getelementptr inbounds i8*, i8** %218, i64 %idxprom295
  %219 = load i8*, i8** %arrayidx296, align 8
  %arrayidx297 = getelementptr inbounds i8, i8* %219, i64 0
  store i8 %216, i8* %arrayidx297, align 1
  br label %for.inc.298

for.inc.298:                                      ; preds = %for.end.291
  %220 = load i32, i32* %x, align 4
  %inc299 = add nsw i32 %220, 1
  store i32 %inc299, i32* %x, align 4
  br label %for.cond.199

for.end.300:                                      ; preds = %for.cond.199
  %221 = load i16*, i16** %circ, align 8
  %arrayidx301 = getelementptr inbounds i16, i16* %221, i64 -1
  %222 = load i16, i16* %arrayidx301, align 2
  %idxprom302 = sext i16 %222 to i64
  %223 = load i8**, i8*** %max, align 8
  %arrayidx303 = getelementptr inbounds i8*, i8** %223, i64 0
  %224 = load i8*, i8** %arrayidx303, align 8
  %arrayidx304 = getelementptr inbounds i8, i8* %224, i64 %idxprom302
  %225 = load i8, i8* %arrayidx304, align 1
  %conv305 = zext i8 %225 to i16
  store i16 %conv305, i16* %last_max, align 2
  store i16 1, i16* %last_index, align 2
  store i32 0, i32* %x, align 4
  br label %for.cond.306

for.cond.306:                                     ; preds = %for.inc.404, %for.end.300
  %226 = load i32, i32* %x, align 4
  %227 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w307 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %227, i32 0, i32 8
  %228 = load i32, i32* %w307, align 4
  %cmp308 = icmp slt i32 %226, %228
  br i1 %cmp308, label %for.body.310, label %for.end.406

for.body.310:                                     ; preds = %for.cond.306
  %229 = load i16, i16* %last_index, align 2
  %dec311 = add i16 %229, -1
  store i16 %dec311, i16* %last_index, align 2
  %230 = load i16, i16* %last_index, align 2
  %conv312 = sext i16 %230 to i32
  %cmp313 = icmp sge i32 %conv312, 0
  br i1 %cmp313, label %if.then.315, label %if.else.357

if.then.315:                                      ; preds = %for.body.310
  %231 = load i16, i16* %last_max, align 2
  %conv316 = sext i16 %231 to i32
  %cmp317 = icmp eq i32 %conv316, 255
  br i1 %cmp317, label %if.then.319, label %if.else.322

if.then.319:                                      ; preds = %if.then.315
  %232 = load i32, i32* %x, align 4
  %idxprom320 = sext i32 %232 to i64
  %233 = load i8*, i8** %out, align 8
  %arrayidx321 = getelementptr inbounds i8, i8* %233, i64 %idxprom320
  store i8 -1, i8* %arrayidx321, align 1
  br label %if.end.356

if.else.322:                                      ; preds = %if.then.315
  store i16 0, i16* %last_max, align 2
  %234 = load i16, i16* %xradius.addr, align 2
  %conv323 = sext i16 %234 to i32
  store i32 %conv323, i32* %i, align 4
  br label %for.cond.324

for.cond.324:                                     ; preds = %for.inc.350, %if.else.322
  %235 = load i32, i32* %i, align 4
  %cmp325 = icmp sge i32 %235, 0
  br i1 %cmp325, label %for.body.327, label %for.end.352

for.body.327:                                     ; preds = %for.cond.324
  %236 = load i16, i16* %last_max, align 2
  %conv328 = sext i16 %236 to i32
  %237 = load i32, i32* %i, align 4
  %idxprom329 = sext i32 %237 to i64
  %238 = load i16*, i16** %circ, align 8
  %arrayidx330 = getelementptr inbounds i16, i16* %238, i64 %idxprom329
  %239 = load i16, i16* %arrayidx330, align 2
  %idxprom331 = sext i16 %239 to i64
  %240 = load i32, i32* %x, align 4
  %241 = load i32, i32* %i, align 4
  %add332 = add nsw i32 %240, %241
  %idxprom333 = sext i32 %add332 to i64
  %242 = load i8**, i8*** %max, align 8
  %arrayidx334 = getelementptr inbounds i8*, i8** %242, i64 %idxprom333
  %243 = load i8*, i8** %arrayidx334, align 8
  %arrayidx335 = getelementptr inbounds i8, i8* %243, i64 %idxprom331
  %244 = load i8, i8* %arrayidx335, align 1
  %conv336 = zext i8 %244 to i32
  %cmp337 = icmp slt i32 %conv328, %conv336
  br i1 %cmp337, label %if.then.339, label %if.end.349

if.then.339:                                      ; preds = %for.body.327
  %245 = load i32, i32* %i, align 4
  %idxprom340 = sext i32 %245 to i64
  %246 = load i16*, i16** %circ, align 8
  %arrayidx341 = getelementptr inbounds i16, i16* %246, i64 %idxprom340
  %247 = load i16, i16* %arrayidx341, align 2
  %idxprom342 = sext i16 %247 to i64
  %248 = load i32, i32* %x, align 4
  %249 = load i32, i32* %i, align 4
  %add343 = add nsw i32 %248, %249
  %idxprom344 = sext i32 %add343 to i64
  %250 = load i8**, i8*** %max, align 8
  %arrayidx345 = getelementptr inbounds i8*, i8** %250, i64 %idxprom344
  %251 = load i8*, i8** %arrayidx345, align 8
  %arrayidx346 = getelementptr inbounds i8, i8* %251, i64 %idxprom342
  %252 = load i8, i8* %arrayidx346, align 1
  %conv347 = zext i8 %252 to i16
  store i16 %conv347, i16* %last_max, align 2
  %253 = load i32, i32* %i, align 4
  %conv348 = trunc i32 %253 to i16
  store i16 %conv348, i16* %last_index, align 2
  br label %if.end.349

if.end.349:                                       ; preds = %if.then.339, %for.body.327
  br label %for.inc.350

for.inc.350:                                      ; preds = %if.end.349
  %254 = load i32, i32* %i, align 4
  %dec351 = add nsw i32 %254, -1
  store i32 %dec351, i32* %i, align 4
  br label %for.cond.324

for.end.352:                                      ; preds = %for.cond.324
  %255 = load i16, i16* %last_max, align 2
  %conv353 = trunc i16 %255 to i8
  %256 = load i32, i32* %x, align 4
  %idxprom354 = sext i32 %256 to i64
  %257 = load i8*, i8** %out, align 8
  %arrayidx355 = getelementptr inbounds i8, i8* %257, i64 %idxprom354
  store i8 %conv353, i8* %arrayidx355, align 1
  br label %if.end.356

if.end.356:                                       ; preds = %for.end.352, %if.then.319
  br label %if.end.403

if.else.357:                                      ; preds = %for.body.310
  %258 = load i16, i16* %xradius.addr, align 2
  store i16 %258, i16* %last_index, align 2
  %259 = load i16, i16* %xradius.addr, align 2
  %idxprom358 = sext i16 %259 to i64
  %260 = load i16*, i16** %circ, align 8
  %arrayidx359 = getelementptr inbounds i16, i16* %260, i64 %idxprom358
  %261 = load i16, i16* %arrayidx359, align 2
  %idxprom360 = sext i16 %261 to i64
  %262 = load i32, i32* %x, align 4
  %263 = load i16, i16* %xradius.addr, align 2
  %conv361 = sext i16 %263 to i32
  %add362 = add nsw i32 %262, %conv361
  %idxprom363 = sext i32 %add362 to i64
  %264 = load i8**, i8*** %max, align 8
  %arrayidx364 = getelementptr inbounds i8*, i8** %264, i64 %idxprom363
  %265 = load i8*, i8** %arrayidx364, align 8
  %arrayidx365 = getelementptr inbounds i8, i8* %265, i64 %idxprom360
  %266 = load i8, i8* %arrayidx365, align 1
  %conv366 = zext i8 %266 to i16
  store i16 %conv366, i16* %last_max, align 2
  %267 = load i16, i16* %xradius.addr, align 2
  %conv367 = sext i16 %267 to i32
  %sub368 = sub nsw i32 %conv367, 1
  store i32 %sub368, i32* %i, align 4
  br label %for.cond.369

for.cond.369:                                     ; preds = %for.inc.397, %if.else.357
  %268 = load i32, i32* %i, align 4
  %269 = load i16, i16* %xradius.addr, align 2
  %conv370 = sext i16 %269 to i32
  %sub371 = sub nsw i32 0, %conv370
  %cmp372 = icmp sge i32 %268, %sub371
  br i1 %cmp372, label %for.body.374, label %for.end.399

for.body.374:                                     ; preds = %for.cond.369
  %270 = load i16, i16* %last_max, align 2
  %conv375 = sext i16 %270 to i32
  %271 = load i32, i32* %i, align 4
  %idxprom376 = sext i32 %271 to i64
  %272 = load i16*, i16** %circ, align 8
  %arrayidx377 = getelementptr inbounds i16, i16* %272, i64 %idxprom376
  %273 = load i16, i16* %arrayidx377, align 2
  %idxprom378 = sext i16 %273 to i64
  %274 = load i32, i32* %x, align 4
  %275 = load i32, i32* %i, align 4
  %add379 = add nsw i32 %274, %275
  %idxprom380 = sext i32 %add379 to i64
  %276 = load i8**, i8*** %max, align 8
  %arrayidx381 = getelementptr inbounds i8*, i8** %276, i64 %idxprom380
  %277 = load i8*, i8** %arrayidx381, align 8
  %arrayidx382 = getelementptr inbounds i8, i8* %277, i64 %idxprom378
  %278 = load i8, i8* %arrayidx382, align 1
  %conv383 = zext i8 %278 to i32
  %cmp384 = icmp slt i32 %conv375, %conv383
  br i1 %cmp384, label %if.then.386, label %if.end.396

if.then.386:                                      ; preds = %for.body.374
  %279 = load i32, i32* %i, align 4
  %idxprom387 = sext i32 %279 to i64
  %280 = load i16*, i16** %circ, align 8
  %arrayidx388 = getelementptr inbounds i16, i16* %280, i64 %idxprom387
  %281 = load i16, i16* %arrayidx388, align 2
  %idxprom389 = sext i16 %281 to i64
  %282 = load i32, i32* %x, align 4
  %283 = load i32, i32* %i, align 4
  %add390 = add nsw i32 %282, %283
  %idxprom391 = sext i32 %add390 to i64
  %284 = load i8**, i8*** %max, align 8
  %arrayidx392 = getelementptr inbounds i8*, i8** %284, i64 %idxprom391
  %285 = load i8*, i8** %arrayidx392, align 8
  %arrayidx393 = getelementptr inbounds i8, i8* %285, i64 %idxprom389
  %286 = load i8, i8* %arrayidx393, align 1
  %conv394 = zext i8 %286 to i16
  store i16 %conv394, i16* %last_max, align 2
  %287 = load i32, i32* %i, align 4
  %conv395 = trunc i32 %287 to i16
  store i16 %conv395, i16* %last_index, align 2
  br label %if.end.396

if.end.396:                                       ; preds = %if.then.386, %for.body.374
  br label %for.inc.397

for.inc.397:                                      ; preds = %if.end.396
  %288 = load i32, i32* %i, align 4
  %dec398 = add nsw i32 %288, -1
  store i32 %dec398, i32* %i, align 4
  br label %for.cond.369

for.end.399:                                      ; preds = %for.cond.369
  %289 = load i16, i16* %last_max, align 2
  %conv400 = trunc i16 %289 to i8
  %290 = load i32, i32* %x, align 4
  %idxprom401 = sext i32 %290 to i64
  %291 = load i8*, i8** %out, align 8
  %arrayidx402 = getelementptr inbounds i8, i8* %291, i64 %idxprom401
  store i8 %conv400, i8* %arrayidx402, align 1
  br label %if.end.403

if.end.403:                                       ; preds = %for.end.399, %if.end.356
  br label %for.inc.404

for.inc.404:                                      ; preds = %if.end.403
  %292 = load i32, i32* %x, align 4
  %inc405 = add nsw i32 %292, 1
  store i32 %inc405, i32* %x, align 4
  br label %for.cond.306

for.end.406:                                      ; preds = %for.cond.306
  %293 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %294 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %x407 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %294, i32 0, i32 6
  %295 = load i32, i32* %x407, align 4
  %296 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %y408 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %296, i32 0, i32 7
  %297 = load i32, i32* %y408, align 4
  %298 = load i32, i32* %y, align 4
  %add409 = add nsw i32 %297, %298
  %299 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w410 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %299, i32 0, i32 8
  %300 = load i32, i32* %w410, align 4
  %301 = load i8*, i8** %out, align 8
  call void @pixel_region_set_row(%struct._PixelRegion* %293, i32 %295, i32 %add409, i32 %300, i8* %301)
  br label %for.inc.411

for.inc.411:                                      ; preds = %for.end.406
  %302 = load i32, i32* %y, align 4
  %inc412 = add nsw i32 %302, 1
  store i32 %inc412, i32* %y, align 4
  br label %for.cond.172

for.end.413:                                      ; preds = %for.cond.172
  %303 = load i16, i16* %xradius.addr, align 2
  %conv414 = sext i16 %303 to i32
  %304 = load i16*, i16** %circ, align 8
  %idx.ext415 = sext i32 %conv414 to i64
  %idx.neg = sub i64 0, %idx.ext415
  %add.ptr416 = getelementptr inbounds i16, i16* %304, i64 %idx.neg
  store i16* %add.ptr416, i16** %circ, align 8
  %305 = load i16, i16* %xradius.addr, align 2
  %conv417 = sext i16 %305 to i32
  %306 = load i8**, i8*** %max, align 8
  %idx.ext418 = sext i32 %conv417 to i64
  %idx.neg419 = sub i64 0, %idx.ext418
  %add.ptr420 = getelementptr inbounds i8*, i8** %306, i64 %idx.neg419
  store i8** %add.ptr420, i8*** %max, align 8
  %307 = load i16*, i16** %circ, align 8
  %308 = bitcast i16* %307 to i8*
  call void @g_free(i8* %308)
  %309 = load i8*, i8** %buffer, align 8
  call void @g_free(i8* %309)
  %310 = load i8**, i8*** %max, align 8
  %311 = bitcast i8** %310 to i8*
  call void @g_free(i8* %311)
  store i32 0, i32* %i, align 4
  br label %for.cond.421

for.cond.421:                                     ; preds = %for.inc.429, %for.end.413
  %312 = load i32, i32* %i, align 4
  %313 = load i16, i16* %yradius.addr, align 2
  %conv422 = sext i16 %313 to i32
  %add423 = add nsw i32 %conv422, 1
  %cmp424 = icmp slt i32 %312, %add423
  br i1 %cmp424, label %for.body.426, label %for.end.431

for.body.426:                                     ; preds = %for.cond.421
  %314 = load i32, i32* %i, align 4
  %idxprom427 = sext i32 %314 to i64
  %315 = load i8**, i8*** %buf, align 8
  %arrayidx428 = getelementptr inbounds i8*, i8** %315, i64 %idxprom427
  %316 = load i8*, i8** %arrayidx428, align 8
  call void @g_free(i8* %316)
  br label %for.inc.429

for.inc.429:                                      ; preds = %for.body.426
  %317 = load i32, i32* %i, align 4
  %inc430 = add nsw i32 %317, 1
  store i32 %inc430, i32* %i, align 4
  br label %for.cond.421

for.end.431:                                      ; preds = %for.cond.421
  %318 = load i8**, i8*** %buf, align 8
  %319 = bitcast i8** %318 to i8*
  call void @g_free(i8* %319)
  %320 = load i8*, i8** %out, align 8
  call void @g_free(i8* %320)
  br label %return

return:                                           ; preds = %for.end.431, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @compute_border(i16* %circ, i16 zeroext %xradius, i16 zeroext %yradius) #0 {
entry:
  %circ.addr = alloca i16*, align 8
  %xradius.addr = alloca i16, align 2
  %yradius.addr = alloca i16, align 2
  %i = alloca i32, align 4
  %diameter = alloca i32, align 4
  %tmp = alloca double, align 8
  store i16* %circ, i16** %circ.addr, align 8
  store i16 %xradius, i16* %xradius.addr, align 2
  store i16 %yradius, i16* %yradius.addr, align 2
  %0 = load i16, i16* %xradius.addr, align 2
  %conv = zext i16 %0 to i32
  %mul = mul nsw i32 %conv, 2
  %add = add nsw i32 %mul, 1
  store i32 %add, i32* %diameter, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %diameter, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %4 = load i16, i16* %xradius.addr, align 2
  %conv2 = zext i16 %4 to i32
  %cmp3 = icmp sgt i32 %3, %conv2
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %6 = load i16, i16* %xradius.addr, align 2
  %conv5 = zext i16 %6 to i32
  %sub = sub nsw i32 %5, %conv5
  %conv6 = sitofp i32 %sub to double
  %sub7 = fsub double %conv6, 5.000000e-01
  store double %sub7, double* %tmp, align 8
  br label %if.end.17

if.else:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %8 = load i16, i16* %xradius.addr, align 2
  %conv8 = zext i16 %8 to i32
  %cmp9 = icmp slt i32 %7, %conv8
  br i1 %cmp9, label %if.then.11, label %if.else.16

if.then.11:                                       ; preds = %if.else
  %9 = load i16, i16* %xradius.addr, align 2
  %conv12 = zext i16 %9 to i32
  %10 = load i32, i32* %i, align 4
  %sub13 = sub nsw i32 %conv12, %10
  %conv14 = sitofp i32 %sub13 to double
  %sub15 = fsub double %conv14, 5.000000e-01
  store double %sub15, double* %tmp, align 8
  br label %if.end

if.else.16:                                       ; preds = %if.else
  store double 0.000000e+00, double* %tmp, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.16, %if.then.11
  br label %if.end.17

if.end.17:                                        ; preds = %if.end, %if.then
  %11 = load i16, i16* %yradius.addr, align 2
  %conv18 = zext i16 %11 to i32
  %conv19 = sitofp i32 %conv18 to double
  %12 = load i16, i16* %xradius.addr, align 2
  %conv20 = uitofp i16 %12 to double
  %div = fdiv double %conv19, %conv20
  %13 = load i16, i16* %xradius.addr, align 2
  %conv21 = zext i16 %13 to i32
  %14 = load i16, i16* %xradius.addr, align 2
  %conv22 = zext i16 %14 to i32
  %mul23 = mul nsw i32 %conv21, %conv22
  %conv24 = sitofp i32 %mul23 to double
  %15 = load double, double* %tmp, align 8
  %16 = load double, double* %tmp, align 8
  %mul25 = fmul double %15, %16
  %sub26 = fsub double %conv24, %mul25
  %call = call double @sqrt(double %sub26) #1
  %mul27 = fmul double %div, %call
  %call28 = call double @rint(double %mul27) #6
  %conv29 = fptosi double %call28 to i16
  %17 = load i32, i32* %i, align 4
  %idxprom = sext i32 %17 to i64
  %18 = load i16*, i16** %circ.addr, align 8
  %arrayidx = getelementptr inbounds i16, i16* %18, i64 %idxprom
  store i16 %conv29, i16* %arrayidx, align 2
  br label %for.inc

for.inc:                                          ; preds = %if.end.17
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rotate_pointers(i8** %p, i32 %n) #3 {
entry:
  %p.addr = alloca i8**, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca i8*, align 8
  store i8** %p, i8*** %p.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8**, i8*** %p.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 0
  %1 = load i8*, i8** %arrayidx, align 8
  store i8* %1, i8** %tmp, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub i32 %3, 1
  %cmp = icmp ult i32 %2, %sub
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %add = add i32 %4, 1
  %idxprom = zext i32 %add to i64
  %5 = load i8**, i8*** %p.addr, align 8
  %arrayidx1 = getelementptr inbounds i8*, i8** %5, i64 %idxprom
  %6 = load i8*, i8** %arrayidx1, align 8
  %7 = load i32, i32* %i, align 4
  %idxprom2 = zext i32 %7 to i64
  %8 = load i8**, i8*** %p.addr, align 8
  %arrayidx3 = getelementptr inbounds i8*, i8** %8, i64 %idxprom2
  store i8* %6, i8** %arrayidx3, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i8*, i8** %tmp, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom4 = zext i32 %11 to i64
  %12 = load i8**, i8*** %p.addr, align 8
  %arrayidx5 = getelementptr inbounds i8*, i8** %12, i64 %idxprom4
  store i8* %10, i8** %arrayidx5, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @thin_region(%struct._PixelRegion* %region, i16 signext %xradius, i16 signext %yradius, i32 %edge_lock) #0 {
entry:
  %region.addr = alloca %struct._PixelRegion*, align 8
  %xradius.addr = alloca i16, align 2
  %yradius.addr = alloca i16, align 2
  %edge_lock.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %buf = alloca i8**, align 8
  %out = alloca i8*, align 8
  %max = alloca i8**, align 8
  %circ = alloca i16*, align 8
  %last_max = alloca i16, align 2
  %last_index = alloca i16, align 2
  %buffer = alloca i8*, align 8
  %buffer_size = alloca i32, align 4
  store %struct._PixelRegion* %region, %struct._PixelRegion** %region.addr, align 8
  store i16 %xradius, i16* %xradius.addr, align 2
  store i16 %yradius, i16* %yradius.addr, align 2
  store i32 %edge_lock, i32* %edge_lock.addr, align 4
  %0 = load i16, i16* %xradius.addr, align 2
  %conv = sext i16 %0 to i32
  %cmp = icmp sle i32 %conv, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i16, i16* %yradius.addr, align 2
  %conv2 = sext i16 %1 to i32
  %cmp3 = icmp sle i32 %conv2, 0
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %2, i32 0, i32 8
  %3 = load i32, i32* %w, align 4
  %4 = load i16, i16* %xradius.addr, align 2
  %conv5 = sext i16 %4 to i32
  %mul = mul nsw i32 2, %conv5
  %add = add nsw i32 %3, %mul
  %conv6 = sext i32 %add to i64
  %call = call noalias i8* @g_malloc_n(i64 %conv6, i64 8)
  %5 = bitcast i8* %call to i8**
  store i8** %5, i8*** %max, align 8
  %6 = load i16, i16* %yradius.addr, align 2
  %conv7 = sext i16 %6 to i32
  %add8 = add nsw i32 %conv7, 1
  %conv9 = sext i32 %add8 to i64
  %call10 = call noalias i8* @g_malloc_n(i64 %conv9, i64 8)
  %7 = bitcast i8* %call10 to i8**
  store i8** %7, i8*** %buf, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i32, i32* %i, align 4
  %9 = load i16, i16* %yradius.addr, align 2
  %conv11 = sext i16 %9 to i32
  %add12 = add nsw i32 %conv11, 1
  %cmp13 = icmp slt i32 %8, %add12
  br i1 %cmp13, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w15 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %10, i32 0, i32 8
  %11 = load i32, i32* %w15, align 4
  %conv16 = sext i32 %11 to i64
  %call17 = call noalias i8* @g_malloc_n(i64 %conv16, i64 1)
  %12 = load i32, i32* %i, align 4
  %idxprom = sext i32 %12 to i64
  %13 = load i8**, i8*** %buf, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %13, i64 %idxprom
  store i8* %call17, i8** %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w18 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %15, i32 0, i32 8
  %16 = load i32, i32* %w18, align 4
  %17 = load i16, i16* %xradius.addr, align 2
  %conv19 = sext i16 %17 to i32
  %mul20 = mul nsw i32 2, %conv19
  %add21 = add nsw i32 %16, %mul20
  %add22 = add nsw i32 %add21, 1
  %18 = load i16, i16* %yradius.addr, align 2
  %conv23 = sext i16 %18 to i32
  %add24 = add nsw i32 %conv23, 1
  %mul25 = mul nsw i32 %add22, %add24
  store i32 %mul25, i32* %buffer_size, align 4
  %19 = load i32, i32* %buffer_size, align 4
  %conv26 = sext i32 %19 to i64
  %call27 = call noalias i8* @g_malloc_n(i64 %conv26, i64 1)
  store i8* %call27, i8** %buffer, align 8
  %20 = load i32, i32* %edge_lock.addr, align 4
  %tobool = icmp ne i32 %20, 0
  br i1 %tobool, label %if.then.28, label %if.else

if.then.28:                                       ; preds = %for.end
  %21 = load i8*, i8** %buffer, align 8
  %22 = load i32, i32* %buffer_size, align 4
  %conv29 = sext i32 %22 to i64
  call void @llvm.memset.p0i8.i64(i8* %21, i8 -1, i64 %conv29, i32 1, i1 false)
  br label %if.end.31

if.else:                                          ; preds = %for.end
  %23 = load i8*, i8** %buffer, align 8
  %24 = load i32, i32* %buffer_size, align 4
  %conv30 = sext i32 %24 to i64
  call void @llvm.memset.p0i8.i64(i8* %23, i8 0, i64 %conv30, i32 1, i1 false)
  br label %if.end.31

if.end.31:                                        ; preds = %if.else, %if.then.28
  store i32 0, i32* %i, align 4
  br label %for.cond.32

for.cond.32:                                      ; preds = %for.inc.103, %if.end.31
  %25 = load i32, i32* %i, align 4
  %26 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w33 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %26, i32 0, i32 8
  %27 = load i32, i32* %w33, align 4
  %28 = load i16, i16* %xradius.addr, align 2
  %conv34 = sext i16 %28 to i32
  %mul35 = mul nsw i32 2, %conv34
  %add36 = add nsw i32 %27, %mul35
  %cmp37 = icmp slt i32 %25, %add36
  br i1 %cmp37, label %for.body.39, label %for.end.105

for.body.39:                                      ; preds = %for.cond.32
  %29 = load i32, i32* %i, align 4
  %30 = load i16, i16* %xradius.addr, align 2
  %conv40 = sext i16 %30 to i32
  %cmp41 = icmp slt i32 %29, %conv40
  br i1 %cmp41, label %if.then.43, label %if.else.60

if.then.43:                                       ; preds = %for.body.39
  %31 = load i32, i32* %edge_lock.addr, align 4
  %tobool44 = icmp ne i32 %31, 0
  br i1 %tobool44, label %if.then.45, label %if.else.48

if.then.45:                                       ; preds = %if.then.43
  %32 = load i8*, i8** %buffer, align 8
  %33 = load i32, i32* %i, align 4
  %idxprom46 = sext i32 %33 to i64
  %34 = load i8**, i8*** %max, align 8
  %arrayidx47 = getelementptr inbounds i8*, i8** %34, i64 %idxprom46
  store i8* %32, i8** %arrayidx47, align 8
  br label %if.end.59

if.else.48:                                       ; preds = %if.then.43
  %35 = load i16, i16* %yradius.addr, align 2
  %conv49 = sext i16 %35 to i32
  %add50 = add nsw i32 %conv49, 1
  %36 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w51 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %36, i32 0, i32 8
  %37 = load i32, i32* %w51, align 4
  %38 = load i16, i16* %xradius.addr, align 2
  %conv52 = sext i16 %38 to i32
  %add53 = add nsw i32 %37, %conv52
  %mul54 = mul nsw i32 %add50, %add53
  %idxprom55 = sext i32 %mul54 to i64
  %39 = load i8*, i8** %buffer, align 8
  %arrayidx56 = getelementptr inbounds i8, i8* %39, i64 %idxprom55
  %40 = load i32, i32* %i, align 4
  %idxprom57 = sext i32 %40 to i64
  %41 = load i8**, i8*** %max, align 8
  %arrayidx58 = getelementptr inbounds i8*, i8** %41, i64 %idxprom57
  store i8* %arrayidx56, i8** %arrayidx58, align 8
  br label %if.end.59

if.end.59:                                        ; preds = %if.else.48, %if.then.45
  br label %if.end.102

if.else.60:                                       ; preds = %for.body.39
  %42 = load i32, i32* %i, align 4
  %43 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w61 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %43, i32 0, i32 8
  %44 = load i32, i32* %w61, align 4
  %45 = load i16, i16* %xradius.addr, align 2
  %conv62 = sext i16 %45 to i32
  %add63 = add nsw i32 %44, %conv62
  %cmp64 = icmp slt i32 %42, %add63
  br i1 %cmp64, label %if.then.66, label %if.else.75

if.then.66:                                       ; preds = %if.else.60
  %46 = load i16, i16* %yradius.addr, align 2
  %conv67 = sext i16 %46 to i32
  %add68 = add nsw i32 %conv67, 1
  %47 = load i32, i32* %i, align 4
  %48 = load i16, i16* %xradius.addr, align 2
  %conv69 = sext i16 %48 to i32
  %sub = sub nsw i32 %47, %conv69
  %mul70 = mul nsw i32 %add68, %sub
  %idxprom71 = sext i32 %mul70 to i64
  %49 = load i8*, i8** %buffer, align 8
  %arrayidx72 = getelementptr inbounds i8, i8* %49, i64 %idxprom71
  %50 = load i32, i32* %i, align 4
  %idxprom73 = sext i32 %50 to i64
  %51 = load i8**, i8*** %max, align 8
  %arrayidx74 = getelementptr inbounds i8*, i8** %51, i64 %idxprom73
  store i8* %arrayidx72, i8** %arrayidx74, align 8
  br label %if.end.101

if.else.75:                                       ; preds = %if.else.60
  %52 = load i32, i32* %edge_lock.addr, align 4
  %tobool76 = icmp ne i32 %52, 0
  br i1 %tobool76, label %if.then.77, label %if.else.89

if.then.77:                                       ; preds = %if.else.75
  %53 = load i16, i16* %yradius.addr, align 2
  %conv78 = sext i16 %53 to i32
  %add79 = add nsw i32 %conv78, 1
  %54 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w80 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %54, i32 0, i32 8
  %55 = load i32, i32* %w80, align 4
  %56 = load i16, i16* %xradius.addr, align 2
  %conv81 = sext i16 %56 to i32
  %add82 = add nsw i32 %55, %conv81
  %sub83 = sub nsw i32 %add82, 1
  %mul84 = mul nsw i32 %add79, %sub83
  %idxprom85 = sext i32 %mul84 to i64
  %57 = load i8*, i8** %buffer, align 8
  %arrayidx86 = getelementptr inbounds i8, i8* %57, i64 %idxprom85
  %58 = load i32, i32* %i, align 4
  %idxprom87 = sext i32 %58 to i64
  %59 = load i8**, i8*** %max, align 8
  %arrayidx88 = getelementptr inbounds i8*, i8** %59, i64 %idxprom87
  store i8* %arrayidx86, i8** %arrayidx88, align 8
  br label %if.end.100

if.else.89:                                       ; preds = %if.else.75
  %60 = load i16, i16* %yradius.addr, align 2
  %conv90 = sext i16 %60 to i32
  %add91 = add nsw i32 %conv90, 1
  %61 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w92 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %61, i32 0, i32 8
  %62 = load i32, i32* %w92, align 4
  %63 = load i16, i16* %xradius.addr, align 2
  %conv93 = sext i16 %63 to i32
  %add94 = add nsw i32 %62, %conv93
  %mul95 = mul nsw i32 %add91, %add94
  %idxprom96 = sext i32 %mul95 to i64
  %64 = load i8*, i8** %buffer, align 8
  %arrayidx97 = getelementptr inbounds i8, i8* %64, i64 %idxprom96
  %65 = load i32, i32* %i, align 4
  %idxprom98 = sext i32 %65 to i64
  %66 = load i8**, i8*** %max, align 8
  %arrayidx99 = getelementptr inbounds i8*, i8** %66, i64 %idxprom98
  store i8* %arrayidx97, i8** %arrayidx99, align 8
  br label %if.end.100

if.end.100:                                       ; preds = %if.else.89, %if.then.77
  br label %if.end.101

if.end.101:                                       ; preds = %if.end.100, %if.then.66
  br label %if.end.102

if.end.102:                                       ; preds = %if.end.101, %if.end.59
  br label %for.inc.103

for.inc.103:                                      ; preds = %if.end.102
  %67 = load i32, i32* %i, align 4
  %inc104 = add nsw i32 %67, 1
  store i32 %inc104, i32* %i, align 4
  br label %for.cond.32

for.end.105:                                      ; preds = %for.cond.32
  %68 = load i32, i32* %edge_lock.addr, align 4
  %tobool106 = icmp ne i32 %68, 0
  br i1 %tobool106, label %if.end.120, label %if.then.107

if.then.107:                                      ; preds = %for.end.105
  store i32 0, i32* %j, align 4
  br label %for.cond.108

for.cond.108:                                     ; preds = %for.inc.117, %if.then.107
  %69 = load i32, i32* %j, align 4
  %70 = load i16, i16* %xradius.addr, align 2
  %conv109 = sext i16 %70 to i32
  %add110 = add nsw i32 %conv109, 1
  %cmp111 = icmp slt i32 %69, %add110
  br i1 %cmp111, label %for.body.113, label %for.end.119

for.body.113:                                     ; preds = %for.cond.108
  %71 = load i32, i32* %j, align 4
  %idxprom114 = sext i32 %71 to i64
  %72 = load i8**, i8*** %max, align 8
  %arrayidx115 = getelementptr inbounds i8*, i8** %72, i64 0
  %73 = load i8*, i8** %arrayidx115, align 8
  %arrayidx116 = getelementptr inbounds i8, i8* %73, i64 %idxprom114
  store i8 0, i8* %arrayidx116, align 1
  br label %for.inc.117

for.inc.117:                                      ; preds = %for.body.113
  %74 = load i32, i32* %j, align 4
  %inc118 = add nsw i32 %74, 1
  store i32 %inc118, i32* %j, align 4
  br label %for.cond.108

for.end.119:                                      ; preds = %for.cond.108
  br label %if.end.120

if.end.120:                                       ; preds = %for.end.119, %for.end.105
  %75 = load i16, i16* %xradius.addr, align 2
  %conv121 = sext i16 %75 to i32
  %76 = load i8**, i8*** %max, align 8
  %idx.ext = sext i32 %conv121 to i64
  %add.ptr = getelementptr inbounds i8*, i8** %76, i64 %idx.ext
  store i8** %add.ptr, i8*** %max, align 8
  %77 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w122 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %77, i32 0, i32 8
  %78 = load i32, i32* %w122, align 4
  %conv123 = sext i32 %78 to i64
  %call124 = call noalias i8* @g_malloc_n(i64 %conv123, i64 1)
  store i8* %call124, i8** %out, align 8
  %79 = load i16, i16* %xradius.addr, align 2
  %conv125 = sext i16 %79 to i32
  %mul126 = mul nsw i32 2, %conv125
  %add127 = add nsw i32 %mul126, 1
  %conv128 = sext i32 %add127 to i64
  %call129 = call noalias i8* @g_malloc_n(i64 %conv128, i64 2)
  %80 = bitcast i8* %call129 to i16*
  store i16* %80, i16** %circ, align 8
  %81 = load i16*, i16** %circ, align 8
  %82 = load i16, i16* %xradius.addr, align 2
  %83 = load i16, i16* %yradius.addr, align 2
  call void @compute_border(i16* %81, i16 zeroext %82, i16 zeroext %83)
  %84 = load i16, i16* %xradius.addr, align 2
  %conv130 = sext i16 %84 to i32
  %85 = load i16*, i16** %circ, align 8
  %idx.ext131 = sext i32 %conv130 to i64
  %add.ptr132 = getelementptr inbounds i16, i16* %85, i64 %idx.ext131
  store i16* %add.ptr132, i16** %circ, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.133

for.cond.133:                                     ; preds = %for.inc.147, %if.end.120
  %86 = load i32, i32* %i, align 4
  %87 = load i16, i16* %yradius.addr, align 2
  %conv134 = sext i16 %87 to i32
  %cmp135 = icmp slt i32 %86, %conv134
  br i1 %cmp135, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond.133
  %88 = load i32, i32* %i, align 4
  %89 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %h = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %89, i32 0, i32 9
  %90 = load i32, i32* %h, align 4
  %cmp137 = icmp slt i32 %88, %90
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond.133
  %91 = phi i1 [ false, %for.cond.133 ], [ %cmp137, %land.rhs ]
  br i1 %91, label %for.body.139, label %for.end.149

for.body.139:                                     ; preds = %land.end
  %92 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %93 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %x140 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %93, i32 0, i32 6
  %94 = load i32, i32* %x140, align 4
  %95 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %y141 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %95, i32 0, i32 7
  %96 = load i32, i32* %y141, align 4
  %97 = load i32, i32* %i, align 4
  %add142 = add nsw i32 %96, %97
  %98 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w143 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %98, i32 0, i32 8
  %99 = load i32, i32* %w143, align 4
  %100 = load i32, i32* %i, align 4
  %add144 = add nsw i32 %100, 1
  %idxprom145 = sext i32 %add144 to i64
  %101 = load i8**, i8*** %buf, align 8
  %arrayidx146 = getelementptr inbounds i8*, i8** %101, i64 %idxprom145
  %102 = load i8*, i8** %arrayidx146, align 8
  call void @pixel_region_get_row(%struct._PixelRegion* %92, i32 %94, i32 %add142, i32 %99, i8* %102, i32 1)
  br label %for.inc.147

for.inc.147:                                      ; preds = %for.body.139
  %103 = load i32, i32* %i, align 4
  %inc148 = add nsw i32 %103, 1
  store i32 %inc148, i32* %i, align 4
  br label %for.cond.133

for.end.149:                                      ; preds = %land.end
  %104 = load i32, i32* %edge_lock.addr, align 4
  %tobool150 = icmp ne i32 %104, 0
  br i1 %tobool150, label %if.then.151, label %if.else.156

if.then.151:                                      ; preds = %for.end.149
  %105 = load i8**, i8*** %buf, align 8
  %arrayidx152 = getelementptr inbounds i8*, i8** %105, i64 0
  %106 = load i8*, i8** %arrayidx152, align 8
  %107 = load i8**, i8*** %buf, align 8
  %arrayidx153 = getelementptr inbounds i8*, i8** %107, i64 1
  %108 = load i8*, i8** %arrayidx153, align 8
  %109 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w154 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %109, i32 0, i32 8
  %110 = load i32, i32* %w154, align 4
  %conv155 = sext i32 %110 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %106, i8* %108, i64 %conv155, i32 1, i1 false)
  br label %if.end.160

if.else.156:                                      ; preds = %for.end.149
  %111 = load i8**, i8*** %buf, align 8
  %arrayidx157 = getelementptr inbounds i8*, i8** %111, i64 0
  %112 = load i8*, i8** %arrayidx157, align 8
  %113 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w158 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %113, i32 0, i32 8
  %114 = load i32, i32* %w158, align 4
  %conv159 = sext i32 %114 to i64
  call void @llvm.memset.p0i8.i64(i8* %112, i8 0, i64 %conv159, i32 1, i1 false)
  br label %if.end.160

if.end.160:                                       ; preds = %if.else.156, %if.then.151
  store i32 0, i32* %x, align 4
  br label %for.cond.161

for.cond.161:                                     ; preds = %for.inc.210, %if.end.160
  %115 = load i32, i32* %x, align 4
  %116 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w162 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %116, i32 0, i32 8
  %117 = load i32, i32* %w162, align 4
  %cmp163 = icmp slt i32 %115, %117
  br i1 %cmp163, label %for.body.165, label %for.end.212

for.body.165:                                     ; preds = %for.cond.161
  %118 = load i32, i32* %x, align 4
  %idxprom166 = sext i32 %118 to i64
  %119 = load i8**, i8*** %buf, align 8
  %arrayidx167 = getelementptr inbounds i8*, i8** %119, i64 0
  %120 = load i8*, i8** %arrayidx167, align 8
  %arrayidx168 = getelementptr inbounds i8, i8* %120, i64 %idxprom166
  %121 = load i8, i8* %arrayidx168, align 1
  %122 = load i32, i32* %x, align 4
  %idxprom169 = sext i32 %122 to i64
  %123 = load i8**, i8*** %max, align 8
  %arrayidx170 = getelementptr inbounds i8*, i8** %123, i64 %idxprom169
  %124 = load i8*, i8** %arrayidx170, align 8
  %arrayidx171 = getelementptr inbounds i8, i8* %124, i64 0
  store i8 %121, i8* %arrayidx171, align 1
  store i32 1, i32* %j, align 4
  br label %for.cond.172

for.cond.172:                                     ; preds = %for.inc.207, %for.body.165
  %125 = load i32, i32* %j, align 4
  %126 = load i16, i16* %yradius.addr, align 2
  %conv173 = sext i16 %126 to i32
  %add174 = add nsw i32 %conv173, 1
  %cmp175 = icmp slt i32 %125, %add174
  br i1 %cmp175, label %for.body.177, label %for.end.209

for.body.177:                                     ; preds = %for.cond.172
  %127 = load i32, i32* %x, align 4
  %idxprom178 = sext i32 %127 to i64
  %128 = load i32, i32* %j, align 4
  %idxprom179 = sext i32 %128 to i64
  %129 = load i8**, i8*** %buf, align 8
  %arrayidx180 = getelementptr inbounds i8*, i8** %129, i64 %idxprom179
  %130 = load i8*, i8** %arrayidx180, align 8
  %arrayidx181 = getelementptr inbounds i8, i8* %130, i64 %idxprom178
  %131 = load i8, i8* %arrayidx181, align 1
  %conv182 = zext i8 %131 to i32
  %132 = load i32, i32* %j, align 4
  %sub183 = sub nsw i32 %132, 1
  %idxprom184 = sext i32 %sub183 to i64
  %133 = load i32, i32* %x, align 4
  %idxprom185 = sext i32 %133 to i64
  %134 = load i8**, i8*** %max, align 8
  %arrayidx186 = getelementptr inbounds i8*, i8** %134, i64 %idxprom185
  %135 = load i8*, i8** %arrayidx186, align 8
  %arrayidx187 = getelementptr inbounds i8, i8* %135, i64 %idxprom184
  %136 = load i8, i8* %arrayidx187, align 1
  %conv188 = zext i8 %136 to i32
  %cmp189 = icmp slt i32 %conv182, %conv188
  br i1 %cmp189, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body.177
  %137 = load i32, i32* %x, align 4
  %idxprom191 = sext i32 %137 to i64
  %138 = load i32, i32* %j, align 4
  %idxprom192 = sext i32 %138 to i64
  %139 = load i8**, i8*** %buf, align 8
  %arrayidx193 = getelementptr inbounds i8*, i8** %139, i64 %idxprom192
  %140 = load i8*, i8** %arrayidx193, align 8
  %arrayidx194 = getelementptr inbounds i8, i8* %140, i64 %idxprom191
  %141 = load i8, i8* %arrayidx194, align 1
  %conv195 = zext i8 %141 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.body.177
  %142 = load i32, i32* %j, align 4
  %sub196 = sub nsw i32 %142, 1
  %idxprom197 = sext i32 %sub196 to i64
  %143 = load i32, i32* %x, align 4
  %idxprom198 = sext i32 %143 to i64
  %144 = load i8**, i8*** %max, align 8
  %arrayidx199 = getelementptr inbounds i8*, i8** %144, i64 %idxprom198
  %145 = load i8*, i8** %arrayidx199, align 8
  %arrayidx200 = getelementptr inbounds i8, i8* %145, i64 %idxprom197
  %146 = load i8, i8* %arrayidx200, align 1
  %conv201 = zext i8 %146 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv195, %cond.true ], [ %conv201, %cond.false ]
  %conv202 = trunc i32 %cond to i8
  %147 = load i32, i32* %j, align 4
  %idxprom203 = sext i32 %147 to i64
  %148 = load i32, i32* %x, align 4
  %idxprom204 = sext i32 %148 to i64
  %149 = load i8**, i8*** %max, align 8
  %arrayidx205 = getelementptr inbounds i8*, i8** %149, i64 %idxprom204
  %150 = load i8*, i8** %arrayidx205, align 8
  %arrayidx206 = getelementptr inbounds i8, i8* %150, i64 %idxprom203
  store i8 %conv202, i8* %arrayidx206, align 1
  br label %for.inc.207

for.inc.207:                                      ; preds = %cond.end
  %151 = load i32, i32* %j, align 4
  %inc208 = add nsw i32 %151, 1
  store i32 %inc208, i32* %j, align 4
  br label %for.cond.172

for.end.209:                                      ; preds = %for.cond.172
  br label %for.inc.210

for.inc.210:                                      ; preds = %for.end.209
  %152 = load i32, i32* %x, align 4
  %inc211 = add nsw i32 %152, 1
  store i32 %inc211, i32* %x, align 4
  br label %for.cond.161

for.end.212:                                      ; preds = %for.cond.161
  store i32 0, i32* %y, align 4
  br label %for.cond.213

for.cond.213:                                     ; preds = %for.inc.464, %for.end.212
  %153 = load i32, i32* %y, align 4
  %154 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %h214 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %154, i32 0, i32 9
  %155 = load i32, i32* %h214, align 4
  %cmp215 = icmp slt i32 %153, %155
  br i1 %cmp215, label %for.body.217, label %for.end.466

for.body.217:                                     ; preds = %for.cond.213
  %156 = load i8**, i8*** %buf, align 8
  %157 = load i16, i16* %yradius.addr, align 2
  %conv218 = sext i16 %157 to i32
  %add219 = add nsw i32 %conv218, 1
  call void @rotate_pointers(i8** %156, i32 %add219)
  %158 = load i32, i32* %y, align 4
  %159 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %h220 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %159, i32 0, i32 9
  %160 = load i32, i32* %h220, align 4
  %161 = load i16, i16* %yradius.addr, align 2
  %conv221 = sext i16 %161 to i32
  %sub222 = sub nsw i32 %160, %conv221
  %cmp223 = icmp slt i32 %158, %sub222
  br i1 %cmp223, label %if.then.225, label %if.else.234

if.then.225:                                      ; preds = %for.body.217
  %162 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %163 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %x226 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %163, i32 0, i32 6
  %164 = load i32, i32* %x226, align 4
  %165 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %y227 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %165, i32 0, i32 7
  %166 = load i32, i32* %y227, align 4
  %167 = load i32, i32* %y, align 4
  %add228 = add nsw i32 %166, %167
  %168 = load i16, i16* %yradius.addr, align 2
  %conv229 = sext i16 %168 to i32
  %add230 = add nsw i32 %add228, %conv229
  %169 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w231 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %169, i32 0, i32 8
  %170 = load i32, i32* %w231, align 4
  %171 = load i16, i16* %yradius.addr, align 2
  %idxprom232 = sext i16 %171 to i64
  %172 = load i8**, i8*** %buf, align 8
  %arrayidx233 = getelementptr inbounds i8*, i8** %172, i64 %idxprom232
  %173 = load i8*, i8** %arrayidx233, align 8
  call void @pixel_region_get_row(%struct._PixelRegion* %162, i32 %164, i32 %add230, i32 %170, i8* %173, i32 1)
  br label %if.end.251

if.else.234:                                      ; preds = %for.body.217
  %174 = load i32, i32* %edge_lock.addr, align 4
  %tobool235 = icmp ne i32 %174, 0
  br i1 %tobool235, label %if.then.236, label %if.else.245

if.then.236:                                      ; preds = %if.else.234
  %175 = load i16, i16* %yradius.addr, align 2
  %idxprom237 = sext i16 %175 to i64
  %176 = load i8**, i8*** %buf, align 8
  %arrayidx238 = getelementptr inbounds i8*, i8** %176, i64 %idxprom237
  %177 = load i8*, i8** %arrayidx238, align 8
  %178 = load i16, i16* %yradius.addr, align 2
  %conv239 = sext i16 %178 to i32
  %sub240 = sub nsw i32 %conv239, 1
  %idxprom241 = sext i32 %sub240 to i64
  %179 = load i8**, i8*** %buf, align 8
  %arrayidx242 = getelementptr inbounds i8*, i8** %179, i64 %idxprom241
  %180 = load i8*, i8** %arrayidx242, align 8
  %181 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w243 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %181, i32 0, i32 8
  %182 = load i32, i32* %w243, align 4
  %conv244 = sext i32 %182 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %177, i8* %180, i64 %conv244, i32 1, i1 false)
  br label %if.end.250

if.else.245:                                      ; preds = %if.else.234
  %183 = load i16, i16* %yradius.addr, align 2
  %idxprom246 = sext i16 %183 to i64
  %184 = load i8**, i8*** %buf, align 8
  %arrayidx247 = getelementptr inbounds i8*, i8** %184, i64 %idxprom246
  %185 = load i8*, i8** %arrayidx247, align 8
  %186 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w248 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %186, i32 0, i32 8
  %187 = load i32, i32* %w248, align 4
  %conv249 = sext i32 %187 to i64
  call void @llvm.memset.p0i8.i64(i8* %185, i8 0, i64 %conv249, i32 1, i1 false)
  br label %if.end.250

if.end.250:                                       ; preds = %if.else.245, %if.then.236
  br label %if.end.251

if.end.251:                                       ; preds = %if.end.250, %if.then.225
  store i32 0, i32* %x, align 4
  br label %for.cond.252

for.cond.252:                                     ; preds = %for.inc.351, %if.end.251
  %188 = load i32, i32* %x, align 4
  %189 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w253 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %189, i32 0, i32 8
  %190 = load i32, i32* %w253, align 4
  %cmp254 = icmp slt i32 %188, %190
  br i1 %cmp254, label %for.body.256, label %for.end.353

for.body.256:                                     ; preds = %for.cond.252
  %191 = load i16, i16* %yradius.addr, align 2
  %conv257 = sext i16 %191 to i32
  store i32 %conv257, i32* %i, align 4
  br label %for.cond.258

for.cond.258:                                     ; preds = %for.inc.343, %for.body.256
  %192 = load i32, i32* %i, align 4
  %cmp259 = icmp sgt i32 %192, 0
  br i1 %cmp259, label %for.body.261, label %for.end.344

for.body.261:                                     ; preds = %for.cond.258
  %193 = load i32, i32* %i, align 4
  %sub262 = sub nsw i32 %193, 1
  %idxprom263 = sext i32 %sub262 to i64
  %194 = load i32, i32* %x, align 4
  %idxprom264 = sext i32 %194 to i64
  %195 = load i8**, i8*** %max, align 8
  %arrayidx265 = getelementptr inbounds i8*, i8** %195, i64 %idxprom264
  %196 = load i8*, i8** %arrayidx265, align 8
  %arrayidx266 = getelementptr inbounds i8, i8* %196, i64 %idxprom263
  %197 = load i8, i8* %arrayidx266, align 1
  %conv267 = zext i8 %197 to i32
  %198 = load i32, i32* %x, align 4
  %idxprom268 = sext i32 %198 to i64
  %199 = load i32, i32* %i, align 4
  %sub269 = sub nsw i32 %199, 1
  %idxprom270 = sext i32 %sub269 to i64
  %200 = load i8**, i8*** %buf, align 8
  %arrayidx271 = getelementptr inbounds i8*, i8** %200, i64 %idxprom270
  %201 = load i8*, i8** %arrayidx271, align 8
  %arrayidx272 = getelementptr inbounds i8, i8* %201, i64 %idxprom268
  %202 = load i8, i8* %arrayidx272, align 1
  %conv273 = zext i8 %202 to i32
  %cmp274 = icmp slt i32 %conv267, %conv273
  br i1 %cmp274, label %cond.true.276, label %cond.false.283

cond.true.276:                                    ; preds = %for.body.261
  %203 = load i32, i32* %i, align 4
  %sub277 = sub nsw i32 %203, 1
  %idxprom278 = sext i32 %sub277 to i64
  %204 = load i32, i32* %x, align 4
  %idxprom279 = sext i32 %204 to i64
  %205 = load i8**, i8*** %max, align 8
  %arrayidx280 = getelementptr inbounds i8*, i8** %205, i64 %idxprom279
  %206 = load i8*, i8** %arrayidx280, align 8
  %arrayidx281 = getelementptr inbounds i8, i8* %206, i64 %idxprom278
  %207 = load i8, i8* %arrayidx281, align 1
  %conv282 = zext i8 %207 to i32
  br label %cond.end.290

cond.false.283:                                   ; preds = %for.body.261
  %208 = load i32, i32* %x, align 4
  %idxprom284 = sext i32 %208 to i64
  %209 = load i32, i32* %i, align 4
  %sub285 = sub nsw i32 %209, 1
  %idxprom286 = sext i32 %sub285 to i64
  %210 = load i8**, i8*** %buf, align 8
  %arrayidx287 = getelementptr inbounds i8*, i8** %210, i64 %idxprom286
  %211 = load i8*, i8** %arrayidx287, align 8
  %arrayidx288 = getelementptr inbounds i8, i8* %211, i64 %idxprom284
  %212 = load i8, i8* %arrayidx288, align 1
  %conv289 = zext i8 %212 to i32
  br label %cond.end.290

cond.end.290:                                     ; preds = %cond.false.283, %cond.true.276
  %cond291 = phi i32 [ %conv282, %cond.true.276 ], [ %conv289, %cond.false.283 ]
  %213 = load i32, i32* %x, align 4
  %idxprom292 = sext i32 %213 to i64
  %214 = load i32, i32* %i, align 4
  %idxprom293 = sext i32 %214 to i64
  %215 = load i8**, i8*** %buf, align 8
  %arrayidx294 = getelementptr inbounds i8*, i8** %215, i64 %idxprom293
  %216 = load i8*, i8** %arrayidx294, align 8
  %arrayidx295 = getelementptr inbounds i8, i8* %216, i64 %idxprom292
  %217 = load i8, i8* %arrayidx295, align 1
  %conv296 = zext i8 %217 to i32
  %cmp297 = icmp slt i32 %cond291, %conv296
  br i1 %cmp297, label %cond.true.299, label %cond.false.330

cond.true.299:                                    ; preds = %cond.end.290
  %218 = load i32, i32* %i, align 4
  %sub300 = sub nsw i32 %218, 1
  %idxprom301 = sext i32 %sub300 to i64
  %219 = load i32, i32* %x, align 4
  %idxprom302 = sext i32 %219 to i64
  %220 = load i8**, i8*** %max, align 8
  %arrayidx303 = getelementptr inbounds i8*, i8** %220, i64 %idxprom302
  %221 = load i8*, i8** %arrayidx303, align 8
  %arrayidx304 = getelementptr inbounds i8, i8* %221, i64 %idxprom301
  %222 = load i8, i8* %arrayidx304, align 1
  %conv305 = zext i8 %222 to i32
  %223 = load i32, i32* %x, align 4
  %idxprom306 = sext i32 %223 to i64
  %224 = load i32, i32* %i, align 4
  %sub307 = sub nsw i32 %224, 1
  %idxprom308 = sext i32 %sub307 to i64
  %225 = load i8**, i8*** %buf, align 8
  %arrayidx309 = getelementptr inbounds i8*, i8** %225, i64 %idxprom308
  %226 = load i8*, i8** %arrayidx309, align 8
  %arrayidx310 = getelementptr inbounds i8, i8* %226, i64 %idxprom306
  %227 = load i8, i8* %arrayidx310, align 1
  %conv311 = zext i8 %227 to i32
  %cmp312 = icmp slt i32 %conv305, %conv311
  br i1 %cmp312, label %cond.true.314, label %cond.false.321

cond.true.314:                                    ; preds = %cond.true.299
  %228 = load i32, i32* %i, align 4
  %sub315 = sub nsw i32 %228, 1
  %idxprom316 = sext i32 %sub315 to i64
  %229 = load i32, i32* %x, align 4
  %idxprom317 = sext i32 %229 to i64
  %230 = load i8**, i8*** %max, align 8
  %arrayidx318 = getelementptr inbounds i8*, i8** %230, i64 %idxprom317
  %231 = load i8*, i8** %arrayidx318, align 8
  %arrayidx319 = getelementptr inbounds i8, i8* %231, i64 %idxprom316
  %232 = load i8, i8* %arrayidx319, align 1
  %conv320 = zext i8 %232 to i32
  br label %cond.end.328

cond.false.321:                                   ; preds = %cond.true.299
  %233 = load i32, i32* %x, align 4
  %idxprom322 = sext i32 %233 to i64
  %234 = load i32, i32* %i, align 4
  %sub323 = sub nsw i32 %234, 1
  %idxprom324 = sext i32 %sub323 to i64
  %235 = load i8**, i8*** %buf, align 8
  %arrayidx325 = getelementptr inbounds i8*, i8** %235, i64 %idxprom324
  %236 = load i8*, i8** %arrayidx325, align 8
  %arrayidx326 = getelementptr inbounds i8, i8* %236, i64 %idxprom322
  %237 = load i8, i8* %arrayidx326, align 1
  %conv327 = zext i8 %237 to i32
  br label %cond.end.328

cond.end.328:                                     ; preds = %cond.false.321, %cond.true.314
  %cond329 = phi i32 [ %conv320, %cond.true.314 ], [ %conv327, %cond.false.321 ]
  br label %cond.end.336

cond.false.330:                                   ; preds = %cond.end.290
  %238 = load i32, i32* %x, align 4
  %idxprom331 = sext i32 %238 to i64
  %239 = load i32, i32* %i, align 4
  %idxprom332 = sext i32 %239 to i64
  %240 = load i8**, i8*** %buf, align 8
  %arrayidx333 = getelementptr inbounds i8*, i8** %240, i64 %idxprom332
  %241 = load i8*, i8** %arrayidx333, align 8
  %arrayidx334 = getelementptr inbounds i8, i8* %241, i64 %idxprom331
  %242 = load i8, i8* %arrayidx334, align 1
  %conv335 = zext i8 %242 to i32
  br label %cond.end.336

cond.end.336:                                     ; preds = %cond.false.330, %cond.end.328
  %cond337 = phi i32 [ %cond329, %cond.end.328 ], [ %conv335, %cond.false.330 ]
  %conv338 = trunc i32 %cond337 to i8
  %243 = load i32, i32* %i, align 4
  %idxprom339 = sext i32 %243 to i64
  %244 = load i32, i32* %x, align 4
  %idxprom340 = sext i32 %244 to i64
  %245 = load i8**, i8*** %max, align 8
  %arrayidx341 = getelementptr inbounds i8*, i8** %245, i64 %idxprom340
  %246 = load i8*, i8** %arrayidx341, align 8
  %arrayidx342 = getelementptr inbounds i8, i8* %246, i64 %idxprom339
  store i8 %conv338, i8* %arrayidx342, align 1
  br label %for.inc.343

for.inc.343:                                      ; preds = %cond.end.336
  %247 = load i32, i32* %i, align 4
  %dec = add nsw i32 %247, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond.258

for.end.344:                                      ; preds = %for.cond.258
  %248 = load i32, i32* %x, align 4
  %idxprom345 = sext i32 %248 to i64
  %249 = load i8**, i8*** %buf, align 8
  %arrayidx346 = getelementptr inbounds i8*, i8** %249, i64 0
  %250 = load i8*, i8** %arrayidx346, align 8
  %arrayidx347 = getelementptr inbounds i8, i8* %250, i64 %idxprom345
  %251 = load i8, i8* %arrayidx347, align 1
  %252 = load i32, i32* %x, align 4
  %idxprom348 = sext i32 %252 to i64
  %253 = load i8**, i8*** %max, align 8
  %arrayidx349 = getelementptr inbounds i8*, i8** %253, i64 %idxprom348
  %254 = load i8*, i8** %arrayidx349, align 8
  %arrayidx350 = getelementptr inbounds i8, i8* %254, i64 0
  store i8 %251, i8* %arrayidx350, align 1
  br label %for.inc.351

for.inc.351:                                      ; preds = %for.end.344
  %255 = load i32, i32* %x, align 4
  %inc352 = add nsw i32 %255, 1
  store i32 %inc352, i32* %x, align 4
  br label %for.cond.252

for.end.353:                                      ; preds = %for.cond.252
  %256 = load i16*, i16** %circ, align 8
  %arrayidx354 = getelementptr inbounds i16, i16* %256, i64 -1
  %257 = load i16, i16* %arrayidx354, align 2
  %idxprom355 = sext i16 %257 to i64
  %258 = load i8**, i8*** %max, align 8
  %arrayidx356 = getelementptr inbounds i8*, i8** %258, i64 0
  %259 = load i8*, i8** %arrayidx356, align 8
  %arrayidx357 = getelementptr inbounds i8, i8* %259, i64 %idxprom355
  %260 = load i8, i8* %arrayidx357, align 1
  %conv358 = zext i8 %260 to i16
  store i16 %conv358, i16* %last_max, align 2
  store i16 0, i16* %last_index, align 2
  store i32 0, i32* %x, align 4
  br label %for.cond.359

for.cond.359:                                     ; preds = %for.inc.457, %for.end.353
  %261 = load i32, i32* %x, align 4
  %262 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w360 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %262, i32 0, i32 8
  %263 = load i32, i32* %w360, align 4
  %cmp361 = icmp slt i32 %261, %263
  br i1 %cmp361, label %for.body.363, label %for.end.459

for.body.363:                                     ; preds = %for.cond.359
  %264 = load i16, i16* %last_index, align 2
  %dec364 = add i16 %264, -1
  store i16 %dec364, i16* %last_index, align 2
  %265 = load i16, i16* %last_index, align 2
  %conv365 = sext i16 %265 to i32
  %cmp366 = icmp sge i32 %conv365, 0
  br i1 %cmp366, label %if.then.368, label %if.else.410

if.then.368:                                      ; preds = %for.body.363
  %266 = load i16, i16* %last_max, align 2
  %conv369 = sext i16 %266 to i32
  %cmp370 = icmp eq i32 %conv369, 0
  br i1 %cmp370, label %if.then.372, label %if.else.375

if.then.372:                                      ; preds = %if.then.368
  %267 = load i32, i32* %x, align 4
  %idxprom373 = sext i32 %267 to i64
  %268 = load i8*, i8** %out, align 8
  %arrayidx374 = getelementptr inbounds i8, i8* %268, i64 %idxprom373
  store i8 0, i8* %arrayidx374, align 1
  br label %if.end.409

if.else.375:                                      ; preds = %if.then.368
  store i16 255, i16* %last_max, align 2
  %269 = load i16, i16* %xradius.addr, align 2
  %conv376 = sext i16 %269 to i32
  store i32 %conv376, i32* %i, align 4
  br label %for.cond.377

for.cond.377:                                     ; preds = %for.inc.403, %if.else.375
  %270 = load i32, i32* %i, align 4
  %cmp378 = icmp sge i32 %270, 0
  br i1 %cmp378, label %for.body.380, label %for.end.405

for.body.380:                                     ; preds = %for.cond.377
  %271 = load i16, i16* %last_max, align 2
  %conv381 = sext i16 %271 to i32
  %272 = load i32, i32* %i, align 4
  %idxprom382 = sext i32 %272 to i64
  %273 = load i16*, i16** %circ, align 8
  %arrayidx383 = getelementptr inbounds i16, i16* %273, i64 %idxprom382
  %274 = load i16, i16* %arrayidx383, align 2
  %idxprom384 = sext i16 %274 to i64
  %275 = load i32, i32* %x, align 4
  %276 = load i32, i32* %i, align 4
  %add385 = add nsw i32 %275, %276
  %idxprom386 = sext i32 %add385 to i64
  %277 = load i8**, i8*** %max, align 8
  %arrayidx387 = getelementptr inbounds i8*, i8** %277, i64 %idxprom386
  %278 = load i8*, i8** %arrayidx387, align 8
  %arrayidx388 = getelementptr inbounds i8, i8* %278, i64 %idxprom384
  %279 = load i8, i8* %arrayidx388, align 1
  %conv389 = zext i8 %279 to i32
  %cmp390 = icmp sgt i32 %conv381, %conv389
  br i1 %cmp390, label %if.then.392, label %if.end.402

if.then.392:                                      ; preds = %for.body.380
  %280 = load i32, i32* %i, align 4
  %idxprom393 = sext i32 %280 to i64
  %281 = load i16*, i16** %circ, align 8
  %arrayidx394 = getelementptr inbounds i16, i16* %281, i64 %idxprom393
  %282 = load i16, i16* %arrayidx394, align 2
  %idxprom395 = sext i16 %282 to i64
  %283 = load i32, i32* %x, align 4
  %284 = load i32, i32* %i, align 4
  %add396 = add nsw i32 %283, %284
  %idxprom397 = sext i32 %add396 to i64
  %285 = load i8**, i8*** %max, align 8
  %arrayidx398 = getelementptr inbounds i8*, i8** %285, i64 %idxprom397
  %286 = load i8*, i8** %arrayidx398, align 8
  %arrayidx399 = getelementptr inbounds i8, i8* %286, i64 %idxprom395
  %287 = load i8, i8* %arrayidx399, align 1
  %conv400 = zext i8 %287 to i16
  store i16 %conv400, i16* %last_max, align 2
  %288 = load i32, i32* %i, align 4
  %conv401 = trunc i32 %288 to i16
  store i16 %conv401, i16* %last_index, align 2
  br label %if.end.402

if.end.402:                                       ; preds = %if.then.392, %for.body.380
  br label %for.inc.403

for.inc.403:                                      ; preds = %if.end.402
  %289 = load i32, i32* %i, align 4
  %dec404 = add nsw i32 %289, -1
  store i32 %dec404, i32* %i, align 4
  br label %for.cond.377

for.end.405:                                      ; preds = %for.cond.377
  %290 = load i16, i16* %last_max, align 2
  %conv406 = trunc i16 %290 to i8
  %291 = load i32, i32* %x, align 4
  %idxprom407 = sext i32 %291 to i64
  %292 = load i8*, i8** %out, align 8
  %arrayidx408 = getelementptr inbounds i8, i8* %292, i64 %idxprom407
  store i8 %conv406, i8* %arrayidx408, align 1
  br label %if.end.409

if.end.409:                                       ; preds = %for.end.405, %if.then.372
  br label %if.end.456

if.else.410:                                      ; preds = %for.body.363
  %293 = load i16, i16* %xradius.addr, align 2
  store i16 %293, i16* %last_index, align 2
  %294 = load i16, i16* %xradius.addr, align 2
  %idxprom411 = sext i16 %294 to i64
  %295 = load i16*, i16** %circ, align 8
  %arrayidx412 = getelementptr inbounds i16, i16* %295, i64 %idxprom411
  %296 = load i16, i16* %arrayidx412, align 2
  %idxprom413 = sext i16 %296 to i64
  %297 = load i32, i32* %x, align 4
  %298 = load i16, i16* %xradius.addr, align 2
  %conv414 = sext i16 %298 to i32
  %add415 = add nsw i32 %297, %conv414
  %idxprom416 = sext i32 %add415 to i64
  %299 = load i8**, i8*** %max, align 8
  %arrayidx417 = getelementptr inbounds i8*, i8** %299, i64 %idxprom416
  %300 = load i8*, i8** %arrayidx417, align 8
  %arrayidx418 = getelementptr inbounds i8, i8* %300, i64 %idxprom413
  %301 = load i8, i8* %arrayidx418, align 1
  %conv419 = zext i8 %301 to i16
  store i16 %conv419, i16* %last_max, align 2
  %302 = load i16, i16* %xradius.addr, align 2
  %conv420 = sext i16 %302 to i32
  %sub421 = sub nsw i32 %conv420, 1
  store i32 %sub421, i32* %i, align 4
  br label %for.cond.422

for.cond.422:                                     ; preds = %for.inc.450, %if.else.410
  %303 = load i32, i32* %i, align 4
  %304 = load i16, i16* %xradius.addr, align 2
  %conv423 = sext i16 %304 to i32
  %sub424 = sub nsw i32 0, %conv423
  %cmp425 = icmp sge i32 %303, %sub424
  br i1 %cmp425, label %for.body.427, label %for.end.452

for.body.427:                                     ; preds = %for.cond.422
  %305 = load i16, i16* %last_max, align 2
  %conv428 = sext i16 %305 to i32
  %306 = load i32, i32* %i, align 4
  %idxprom429 = sext i32 %306 to i64
  %307 = load i16*, i16** %circ, align 8
  %arrayidx430 = getelementptr inbounds i16, i16* %307, i64 %idxprom429
  %308 = load i16, i16* %arrayidx430, align 2
  %idxprom431 = sext i16 %308 to i64
  %309 = load i32, i32* %x, align 4
  %310 = load i32, i32* %i, align 4
  %add432 = add nsw i32 %309, %310
  %idxprom433 = sext i32 %add432 to i64
  %311 = load i8**, i8*** %max, align 8
  %arrayidx434 = getelementptr inbounds i8*, i8** %311, i64 %idxprom433
  %312 = load i8*, i8** %arrayidx434, align 8
  %arrayidx435 = getelementptr inbounds i8, i8* %312, i64 %idxprom431
  %313 = load i8, i8* %arrayidx435, align 1
  %conv436 = zext i8 %313 to i32
  %cmp437 = icmp sgt i32 %conv428, %conv436
  br i1 %cmp437, label %if.then.439, label %if.end.449

if.then.439:                                      ; preds = %for.body.427
  %314 = load i32, i32* %i, align 4
  %idxprom440 = sext i32 %314 to i64
  %315 = load i16*, i16** %circ, align 8
  %arrayidx441 = getelementptr inbounds i16, i16* %315, i64 %idxprom440
  %316 = load i16, i16* %arrayidx441, align 2
  %idxprom442 = sext i16 %316 to i64
  %317 = load i32, i32* %x, align 4
  %318 = load i32, i32* %i, align 4
  %add443 = add nsw i32 %317, %318
  %idxprom444 = sext i32 %add443 to i64
  %319 = load i8**, i8*** %max, align 8
  %arrayidx445 = getelementptr inbounds i8*, i8** %319, i64 %idxprom444
  %320 = load i8*, i8** %arrayidx445, align 8
  %arrayidx446 = getelementptr inbounds i8, i8* %320, i64 %idxprom442
  %321 = load i8, i8* %arrayidx446, align 1
  %conv447 = zext i8 %321 to i16
  store i16 %conv447, i16* %last_max, align 2
  %322 = load i32, i32* %i, align 4
  %conv448 = trunc i32 %322 to i16
  store i16 %conv448, i16* %last_index, align 2
  br label %if.end.449

if.end.449:                                       ; preds = %if.then.439, %for.body.427
  br label %for.inc.450

for.inc.450:                                      ; preds = %if.end.449
  %323 = load i32, i32* %i, align 4
  %dec451 = add nsw i32 %323, -1
  store i32 %dec451, i32* %i, align 4
  br label %for.cond.422

for.end.452:                                      ; preds = %for.cond.422
  %324 = load i16, i16* %last_max, align 2
  %conv453 = trunc i16 %324 to i8
  %325 = load i32, i32* %x, align 4
  %idxprom454 = sext i32 %325 to i64
  %326 = load i8*, i8** %out, align 8
  %arrayidx455 = getelementptr inbounds i8, i8* %326, i64 %idxprom454
  store i8 %conv453, i8* %arrayidx455, align 1
  br label %if.end.456

if.end.456:                                       ; preds = %for.end.452, %if.end.409
  br label %for.inc.457

for.inc.457:                                      ; preds = %if.end.456
  %327 = load i32, i32* %x, align 4
  %inc458 = add nsw i32 %327, 1
  store i32 %inc458, i32* %x, align 4
  br label %for.cond.359

for.end.459:                                      ; preds = %for.cond.359
  %328 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %329 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %x460 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %329, i32 0, i32 6
  %330 = load i32, i32* %x460, align 4
  %331 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %y461 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %331, i32 0, i32 7
  %332 = load i32, i32* %y461, align 4
  %333 = load i32, i32* %y, align 4
  %add462 = add nsw i32 %332, %333
  %334 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w463 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %334, i32 0, i32 8
  %335 = load i32, i32* %w463, align 4
  %336 = load i8*, i8** %out, align 8
  call void @pixel_region_set_row(%struct._PixelRegion* %328, i32 %330, i32 %add462, i32 %335, i8* %336)
  br label %for.inc.464

for.inc.464:                                      ; preds = %for.end.459
  %337 = load i32, i32* %y, align 4
  %inc465 = add nsw i32 %337, 1
  store i32 %inc465, i32* %y, align 4
  br label %for.cond.213

for.end.466:                                      ; preds = %for.cond.213
  %338 = load i16, i16* %xradius.addr, align 2
  %conv467 = sext i16 %338 to i32
  %339 = load i16*, i16** %circ, align 8
  %idx.ext468 = sext i32 %conv467 to i64
  %idx.neg = sub i64 0, %idx.ext468
  %add.ptr469 = getelementptr inbounds i16, i16* %339, i64 %idx.neg
  store i16* %add.ptr469, i16** %circ, align 8
  %340 = load i16, i16* %xradius.addr, align 2
  %conv470 = sext i16 %340 to i32
  %341 = load i8**, i8*** %max, align 8
  %idx.ext471 = sext i32 %conv470 to i64
  %idx.neg472 = sub i64 0, %idx.ext471
  %add.ptr473 = getelementptr inbounds i8*, i8** %341, i64 %idx.neg472
  store i8** %add.ptr473, i8*** %max, align 8
  %342 = load i16*, i16** %circ, align 8
  %343 = bitcast i16* %342 to i8*
  call void @g_free(i8* %343)
  %344 = load i8*, i8** %buffer, align 8
  call void @g_free(i8* %344)
  %345 = load i8**, i8*** %max, align 8
  %346 = bitcast i8** %345 to i8*
  call void @g_free(i8* %346)
  store i32 0, i32* %i, align 4
  br label %for.cond.474

for.cond.474:                                     ; preds = %for.inc.482, %for.end.466
  %347 = load i32, i32* %i, align 4
  %348 = load i16, i16* %yradius.addr, align 2
  %conv475 = sext i16 %348 to i32
  %add476 = add nsw i32 %conv475, 1
  %cmp477 = icmp slt i32 %347, %add476
  br i1 %cmp477, label %for.body.479, label %for.end.484

for.body.479:                                     ; preds = %for.cond.474
  %349 = load i32, i32* %i, align 4
  %idxprom480 = sext i32 %349 to i64
  %350 = load i8**, i8*** %buf, align 8
  %arrayidx481 = getelementptr inbounds i8*, i8** %350, i64 %idxprom480
  %351 = load i8*, i8** %arrayidx481, align 8
  call void @g_free(i8* %351)
  br label %for.inc.482

for.inc.482:                                      ; preds = %for.body.479
  %352 = load i32, i32* %i, align 4
  %inc483 = add nsw i32 %352, 1
  store i32 %inc483, i32* %i, align 4
  br label %for.cond.474

for.end.484:                                      ; preds = %for.cond.474
  %353 = load i8**, i8*** %buf, align 8
  %354 = bitcast i8** %353 to i8*
  call void @g_free(i8* %354)
  %355 = load i8*, i8** %out, align 8
  call void @g_free(i8* %355)
  br label %return

return:                                           ; preds = %for.end.484, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define void @smooth_region(%struct._PixelRegion* %region) #0 {
entry:
  %region.addr = alloca %struct._PixelRegion*, align 8
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %width = alloca i32, align 4
  %i = alloca i32, align 4
  %buf = alloca [3 x i8*], align 16
  %out = alloca i8*, align 8
  %value = alloca i32, align 4
  store %struct._PixelRegion* %region, %struct._PixelRegion** %region.addr, align 8
  %0 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %0, i32 0, i32 8
  %1 = load i32, i32* %w, align 4
  store i32 %1, i32* %width, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %width, align 4
  %add = add nsw i32 %3, 2
  %conv = sext i32 %add to i64
  %call = call noalias i8* @g_malloc_n(i64 %conv, i64 1)
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 %idxprom
  store i8* %call, i8** %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load i32, i32* %width, align 4
  %conv1 = sext i32 %6 to i64
  %call2 = call noalias i8* @g_malloc_n(i64 %conv1, i64 1)
  store i8* %call2, i8** %out, align 8
  %7 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %8 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %x3 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %8, i32 0, i32 6
  %9 = load i32, i32* %x3, align 4
  %10 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %y4 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %10, i32 0, i32 7
  %11 = load i32, i32* %y4, align 4
  %12 = load i32, i32* %width, align 4
  %arrayidx5 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 0
  %13 = load i8*, i8** %arrayidx5, align 8
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 1
  call void @pixel_region_get_row(%struct._PixelRegion* %7, i32 %9, i32 %11, i32 %12, i8* %add.ptr, i32 1)
  %arrayidx6 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 0
  %14 = load i8*, i8** %arrayidx6, align 8
  %arrayidx7 = getelementptr inbounds i8, i8* %14, i64 1
  %15 = load i8, i8* %arrayidx7, align 1
  %arrayidx8 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 0
  %16 = load i8*, i8** %arrayidx8, align 8
  %arrayidx9 = getelementptr inbounds i8, i8* %16, i64 0
  store i8 %15, i8* %arrayidx9, align 1
  %17 = load i32, i32* %width, align 4
  %idxprom10 = sext i32 %17 to i64
  %arrayidx11 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 0
  %18 = load i8*, i8** %arrayidx11, align 8
  %arrayidx12 = getelementptr inbounds i8, i8* %18, i64 %idxprom10
  %19 = load i8, i8* %arrayidx12, align 1
  %20 = load i32, i32* %width, align 4
  %add13 = add nsw i32 %20, 1
  %idxprom14 = sext i32 %add13 to i64
  %arrayidx15 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 0
  %21 = load i8*, i8** %arrayidx15, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %21, i64 %idxprom14
  store i8 %19, i8* %arrayidx16, align 1
  %arrayidx17 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 1
  %22 = load i8*, i8** %arrayidx17, align 8
  %arrayidx18 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 0
  %23 = load i8*, i8** %arrayidx18, align 8
  %24 = load i32, i32* %width, align 4
  %add19 = add nsw i32 %24, 2
  %conv20 = sext i32 %add19 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %22, i8* %23, i64 %conv20, i32 1, i1 false)
  store i32 0, i32* %y, align 4
  br label %for.cond.21

for.cond.21:                                      ; preds = %for.inc.113, %for.end
  %25 = load i32, i32* %y, align 4
  %26 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %h = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %26, i32 0, i32 9
  %27 = load i32, i32* %h, align 4
  %cmp22 = icmp slt i32 %25, %27
  br i1 %cmp22, label %for.body.24, label %for.end.115

for.body.24:                                      ; preds = %for.cond.21
  %28 = load i32, i32* %y, align 4
  %add25 = add nsw i32 %28, 1
  %29 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %h26 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %29, i32 0, i32 9
  %30 = load i32, i32* %h26, align 4
  %cmp27 = icmp slt i32 %add25, %30
  br i1 %cmp27, label %if.then, label %if.else

if.then:                                          ; preds = %for.body.24
  %31 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %32 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %x29 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %32, i32 0, i32 6
  %33 = load i32, i32* %x29, align 4
  %34 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %y30 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %34, i32 0, i32 7
  %35 = load i32, i32* %y30, align 4
  %36 = load i32, i32* %y, align 4
  %add31 = add nsw i32 %35, %36
  %add32 = add nsw i32 %add31, 1
  %37 = load i32, i32* %width, align 4
  %arrayidx33 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 2
  %38 = load i8*, i8** %arrayidx33, align 8
  %add.ptr34 = getelementptr inbounds i8, i8* %38, i64 1
  call void @pixel_region_get_row(%struct._PixelRegion* %31, i32 %33, i32 %add32, i32 %37, i8* %add.ptr34, i32 1)
  %arrayidx35 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 2
  %39 = load i8*, i8** %arrayidx35, align 8
  %arrayidx36 = getelementptr inbounds i8, i8* %39, i64 1
  %40 = load i8, i8* %arrayidx36, align 1
  %arrayidx37 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 2
  %41 = load i8*, i8** %arrayidx37, align 8
  %arrayidx38 = getelementptr inbounds i8, i8* %41, i64 0
  store i8 %40, i8* %arrayidx38, align 1
  %42 = load i32, i32* %width, align 4
  %idxprom39 = sext i32 %42 to i64
  %arrayidx40 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 2
  %43 = load i8*, i8** %arrayidx40, align 8
  %arrayidx41 = getelementptr inbounds i8, i8* %43, i64 %idxprom39
  %44 = load i8, i8* %arrayidx41, align 1
  %45 = load i32, i32* %width, align 4
  %add42 = add nsw i32 %45, 1
  %idxprom43 = sext i32 %add42 to i64
  %arrayidx44 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 2
  %46 = load i8*, i8** %arrayidx44, align 8
  %arrayidx45 = getelementptr inbounds i8, i8* %46, i64 %idxprom43
  store i8 %44, i8* %arrayidx45, align 1
  br label %if.end

if.else:                                          ; preds = %for.body.24
  %arrayidx46 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 2
  %47 = load i8*, i8** %arrayidx46, align 8
  %arrayidx47 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 1
  %48 = load i8*, i8** %arrayidx47, align 8
  %49 = load i32, i32* %width, align 4
  %add48 = add nsw i32 %49, 2
  %conv49 = sext i32 %add48 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %47, i8* %48, i64 %conv49, i32 1, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 0, i32* %x, align 4
  br label %for.cond.50

for.cond.50:                                      ; preds = %for.inc.107, %if.end
  %50 = load i32, i32* %x, align 4
  %51 = load i32, i32* %width, align 4
  %cmp51 = icmp slt i32 %50, %51
  br i1 %cmp51, label %for.body.53, label %for.end.109

for.body.53:                                      ; preds = %for.cond.50
  %52 = load i32, i32* %x, align 4
  %idxprom54 = sext i32 %52 to i64
  %arrayidx55 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 0
  %53 = load i8*, i8** %arrayidx55, align 8
  %arrayidx56 = getelementptr inbounds i8, i8* %53, i64 %idxprom54
  %54 = load i8, i8* %arrayidx56, align 1
  %conv57 = zext i8 %54 to i32
  %55 = load i32, i32* %x, align 4
  %add58 = add nsw i32 %55, 1
  %idxprom59 = sext i32 %add58 to i64
  %arrayidx60 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 0
  %56 = load i8*, i8** %arrayidx60, align 8
  %arrayidx61 = getelementptr inbounds i8, i8* %56, i64 %idxprom59
  %57 = load i8, i8* %arrayidx61, align 1
  %conv62 = zext i8 %57 to i32
  %add63 = add nsw i32 %conv57, %conv62
  %58 = load i32, i32* %x, align 4
  %add64 = add nsw i32 %58, 2
  %idxprom65 = sext i32 %add64 to i64
  %arrayidx66 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 0
  %59 = load i8*, i8** %arrayidx66, align 8
  %arrayidx67 = getelementptr inbounds i8, i8* %59, i64 %idxprom65
  %60 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %60 to i32
  %add69 = add nsw i32 %add63, %conv68
  %61 = load i32, i32* %x, align 4
  %idxprom70 = sext i32 %61 to i64
  %arrayidx71 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 1
  %62 = load i8*, i8** %arrayidx71, align 8
  %arrayidx72 = getelementptr inbounds i8, i8* %62, i64 %idxprom70
  %63 = load i8, i8* %arrayidx72, align 1
  %conv73 = zext i8 %63 to i32
  %add74 = add nsw i32 %add69, %conv73
  %64 = load i32, i32* %x, align 4
  %add75 = add nsw i32 %64, 1
  %idxprom76 = sext i32 %add75 to i64
  %arrayidx77 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 2
  %65 = load i8*, i8** %arrayidx77, align 8
  %arrayidx78 = getelementptr inbounds i8, i8* %65, i64 %idxprom76
  %66 = load i8, i8* %arrayidx78, align 1
  %conv79 = zext i8 %66 to i32
  %add80 = add nsw i32 %add74, %conv79
  %67 = load i32, i32* %x, align 4
  %add81 = add nsw i32 %67, 2
  %idxprom82 = sext i32 %add81 to i64
  %arrayidx83 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 1
  %68 = load i8*, i8** %arrayidx83, align 8
  %arrayidx84 = getelementptr inbounds i8, i8* %68, i64 %idxprom82
  %69 = load i8, i8* %arrayidx84, align 1
  %conv85 = zext i8 %69 to i32
  %add86 = add nsw i32 %add80, %conv85
  %70 = load i32, i32* %x, align 4
  %idxprom87 = sext i32 %70 to i64
  %arrayidx88 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 2
  %71 = load i8*, i8** %arrayidx88, align 8
  %arrayidx89 = getelementptr inbounds i8, i8* %71, i64 %idxprom87
  %72 = load i8, i8* %arrayidx89, align 1
  %conv90 = zext i8 %72 to i32
  %add91 = add nsw i32 %add86, %conv90
  %73 = load i32, i32* %x, align 4
  %add92 = add nsw i32 %73, 1
  %idxprom93 = sext i32 %add92 to i64
  %arrayidx94 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 1
  %74 = load i8*, i8** %arrayidx94, align 8
  %arrayidx95 = getelementptr inbounds i8, i8* %74, i64 %idxprom93
  %75 = load i8, i8* %arrayidx95, align 1
  %conv96 = zext i8 %75 to i32
  %add97 = add nsw i32 %add91, %conv96
  %76 = load i32, i32* %x, align 4
  %add98 = add nsw i32 %76, 2
  %idxprom99 = sext i32 %add98 to i64
  %arrayidx100 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 2
  %77 = load i8*, i8** %arrayidx100, align 8
  %arrayidx101 = getelementptr inbounds i8, i8* %77, i64 %idxprom99
  %78 = load i8, i8* %arrayidx101, align 1
  %conv102 = zext i8 %78 to i32
  %add103 = add nsw i32 %add97, %conv102
  store i32 %add103, i32* %value, align 4
  %79 = load i32, i32* %value, align 4
  %div = sdiv i32 %79, 9
  %conv104 = trunc i32 %div to i8
  %80 = load i32, i32* %x, align 4
  %idxprom105 = sext i32 %80 to i64
  %81 = load i8*, i8** %out, align 8
  %arrayidx106 = getelementptr inbounds i8, i8* %81, i64 %idxprom105
  store i8 %conv104, i8* %arrayidx106, align 1
  br label %for.inc.107

for.inc.107:                                      ; preds = %for.body.53
  %82 = load i32, i32* %x, align 4
  %inc108 = add nsw i32 %82, 1
  store i32 %inc108, i32* %x, align 4
  br label %for.cond.50

for.end.109:                                      ; preds = %for.cond.50
  %83 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %84 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %x110 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %84, i32 0, i32 6
  %85 = load i32, i32* %x110, align 4
  %86 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %y111 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %86, i32 0, i32 7
  %87 = load i32, i32* %y111, align 4
  %88 = load i32, i32* %y, align 4
  %add112 = add nsw i32 %87, %88
  %89 = load i32, i32* %width, align 4
  %90 = load i8*, i8** %out, align 8
  call void @pixel_region_set_row(%struct._PixelRegion* %83, i32 %85, i32 %add112, i32 %89, i8* %90)
  %arraydecay = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i32 0
  call void @rotate_pointers(i8** %arraydecay, i32 3)
  br label %for.inc.113

for.inc.113:                                      ; preds = %for.end.109
  %91 = load i32, i32* %y, align 4
  %inc114 = add nsw i32 %91, 1
  store i32 %inc114, i32* %y, align 4
  br label %for.cond.21

for.end.115:                                      ; preds = %for.cond.21
  store i32 0, i32* %i, align 4
  br label %for.cond.116

for.cond.116:                                     ; preds = %for.inc.122, %for.end.115
  %92 = load i32, i32* %i, align 4
  %cmp117 = icmp slt i32 %92, 3
  br i1 %cmp117, label %for.body.119, label %for.end.124

for.body.119:                                     ; preds = %for.cond.116
  %93 = load i32, i32* %i, align 4
  %idxprom120 = sext i32 %93 to i64
  %arrayidx121 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 %idxprom120
  %94 = load i8*, i8** %arrayidx121, align 8
  call void @g_free(i8* %94)
  br label %for.inc.122

for.inc.122:                                      ; preds = %for.body.119
  %95 = load i32, i32* %i, align 4
  %inc123 = add nsw i32 %95, 1
  store i32 %inc123, i32* %i, align 4
  br label %for.cond.116

for.end.124:                                      ; preds = %for.cond.116
  %96 = load i8*, i8** %out, align 8
  call void @g_free(i8* %96)
  ret void
}

; Function Attrs: nounwind uwtable
define void @erode_region(%struct._PixelRegion* %region) #0 {
entry:
  %region.addr = alloca %struct._PixelRegion*, align 8
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %width = alloca i32, align 4
  %i = alloca i32, align 4
  %buf = alloca [3 x i8*], align 16
  %out = alloca i8*, align 8
  %min = alloca i32, align 4
  store %struct._PixelRegion* %region, %struct._PixelRegion** %region.addr, align 8
  %0 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %0, i32 0, i32 8
  %1 = load i32, i32* %w, align 4
  store i32 %1, i32* %width, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %width, align 4
  %add = add nsw i32 %3, 2
  %conv = sext i32 %add to i64
  %call = call noalias i8* @g_malloc_n(i64 %conv, i64 1)
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 %idxprom
  store i8* %call, i8** %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load i32, i32* %width, align 4
  %conv1 = sext i32 %6 to i64
  %call2 = call noalias i8* @g_malloc_n(i64 %conv1, i64 1)
  store i8* %call2, i8** %out, align 8
  %7 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %8 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %x3 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %8, i32 0, i32 6
  %9 = load i32, i32* %x3, align 4
  %10 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %y4 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %10, i32 0, i32 7
  %11 = load i32, i32* %y4, align 4
  %12 = load i32, i32* %width, align 4
  %arrayidx5 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 0
  %13 = load i8*, i8** %arrayidx5, align 8
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 1
  call void @pixel_region_get_row(%struct._PixelRegion* %7, i32 %9, i32 %11, i32 %12, i8* %add.ptr, i32 1)
  %arrayidx6 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 0
  %14 = load i8*, i8** %arrayidx6, align 8
  %arrayidx7 = getelementptr inbounds i8, i8* %14, i64 1
  %15 = load i8, i8* %arrayidx7, align 1
  %arrayidx8 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 0
  %16 = load i8*, i8** %arrayidx8, align 8
  %arrayidx9 = getelementptr inbounds i8, i8* %16, i64 0
  store i8 %15, i8* %arrayidx9, align 1
  %17 = load i32, i32* %width, align 4
  %idxprom10 = sext i32 %17 to i64
  %arrayidx11 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 0
  %18 = load i8*, i8** %arrayidx11, align 8
  %arrayidx12 = getelementptr inbounds i8, i8* %18, i64 %idxprom10
  %19 = load i8, i8* %arrayidx12, align 1
  %20 = load i32, i32* %width, align 4
  %add13 = add nsw i32 %20, 1
  %idxprom14 = sext i32 %add13 to i64
  %arrayidx15 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 0
  %21 = load i8*, i8** %arrayidx15, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %21, i64 %idxprom14
  store i8 %19, i8* %arrayidx16, align 1
  %arrayidx17 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 1
  %22 = load i8*, i8** %arrayidx17, align 8
  %arrayidx18 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 0
  %23 = load i8*, i8** %arrayidx18, align 8
  %24 = load i32, i32* %width, align 4
  %add19 = add nsw i32 %24, 2
  %conv20 = sext i32 %add19 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %22, i8* %23, i64 %conv20, i32 1, i1 false)
  store i32 0, i32* %y, align 4
  br label %for.cond.21

for.cond.21:                                      ; preds = %for.inc.131, %for.end
  %25 = load i32, i32* %y, align 4
  %26 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %h = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %26, i32 0, i32 9
  %27 = load i32, i32* %h, align 4
  %cmp22 = icmp slt i32 %25, %27
  br i1 %cmp22, label %for.body.24, label %for.end.133

for.body.24:                                      ; preds = %for.cond.21
  %28 = load i32, i32* %y, align 4
  %add25 = add nsw i32 %28, 1
  %29 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %h26 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %29, i32 0, i32 9
  %30 = load i32, i32* %h26, align 4
  %cmp27 = icmp slt i32 %add25, %30
  br i1 %cmp27, label %if.then, label %if.else

if.then:                                          ; preds = %for.body.24
  %31 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %32 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %x29 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %32, i32 0, i32 6
  %33 = load i32, i32* %x29, align 4
  %34 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %y30 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %34, i32 0, i32 7
  %35 = load i32, i32* %y30, align 4
  %36 = load i32, i32* %y, align 4
  %add31 = add nsw i32 %35, %36
  %add32 = add nsw i32 %add31, 1
  %37 = load i32, i32* %width, align 4
  %arrayidx33 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 2
  %38 = load i8*, i8** %arrayidx33, align 8
  %add.ptr34 = getelementptr inbounds i8, i8* %38, i64 1
  call void @pixel_region_get_row(%struct._PixelRegion* %31, i32 %33, i32 %add32, i32 %37, i8* %add.ptr34, i32 1)
  %arrayidx35 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 2
  %39 = load i8*, i8** %arrayidx35, align 8
  %arrayidx36 = getelementptr inbounds i8, i8* %39, i64 1
  %40 = load i8, i8* %arrayidx36, align 1
  %arrayidx37 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 2
  %41 = load i8*, i8** %arrayidx37, align 8
  %arrayidx38 = getelementptr inbounds i8, i8* %41, i64 0
  store i8 %40, i8* %arrayidx38, align 1
  %42 = load i32, i32* %width, align 4
  %idxprom39 = sext i32 %42 to i64
  %arrayidx40 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 2
  %43 = load i8*, i8** %arrayidx40, align 8
  %arrayidx41 = getelementptr inbounds i8, i8* %43, i64 %idxprom39
  %44 = load i8, i8* %arrayidx41, align 1
  %45 = load i32, i32* %width, align 4
  %add42 = add nsw i32 %45, 1
  %idxprom43 = sext i32 %add42 to i64
  %arrayidx44 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 2
  %46 = load i8*, i8** %arrayidx44, align 8
  %arrayidx45 = getelementptr inbounds i8, i8* %46, i64 %idxprom43
  store i8 %44, i8* %arrayidx45, align 1
  br label %if.end

if.else:                                          ; preds = %for.body.24
  %arrayidx46 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 2
  %47 = load i8*, i8** %arrayidx46, align 8
  %arrayidx47 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 1
  %48 = load i8*, i8** %arrayidx47, align 8
  %49 = load i32, i32* %width, align 4
  %add48 = add nsw i32 %49, 2
  %conv49 = sext i32 %add48 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %47, i8* %48, i64 %conv49, i32 1, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 0, i32* %x, align 4
  br label %for.cond.50

for.cond.50:                                      ; preds = %for.inc.125, %if.end
  %50 = load i32, i32* %x, align 4
  %51 = load i32, i32* %width, align 4
  %cmp51 = icmp slt i32 %50, %51
  br i1 %cmp51, label %for.body.53, label %for.end.127

for.body.53:                                      ; preds = %for.cond.50
  store i32 255, i32* %min, align 4
  %52 = load i32, i32* %x, align 4
  %add54 = add nsw i32 %52, 1
  %idxprom55 = sext i32 %add54 to i64
  %arrayidx56 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 0
  %53 = load i8*, i8** %arrayidx56, align 8
  %arrayidx57 = getelementptr inbounds i8, i8* %53, i64 %idxprom55
  %54 = load i8, i8* %arrayidx57, align 1
  %conv58 = zext i8 %54 to i32
  %55 = load i32, i32* %min, align 4
  %cmp59 = icmp slt i32 %conv58, %55
  br i1 %cmp59, label %if.then.61, label %if.end.67

if.then.61:                                       ; preds = %for.body.53
  %56 = load i32, i32* %x, align 4
  %add62 = add nsw i32 %56, 1
  %idxprom63 = sext i32 %add62 to i64
  %arrayidx64 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 0
  %57 = load i8*, i8** %arrayidx64, align 8
  %arrayidx65 = getelementptr inbounds i8, i8* %57, i64 %idxprom63
  %58 = load i8, i8* %arrayidx65, align 1
  %conv66 = zext i8 %58 to i32
  store i32 %conv66, i32* %min, align 4
  br label %if.end.67

if.end.67:                                        ; preds = %if.then.61, %for.body.53
  %59 = load i32, i32* %x, align 4
  %idxprom68 = sext i32 %59 to i64
  %arrayidx69 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 1
  %60 = load i8*, i8** %arrayidx69, align 8
  %arrayidx70 = getelementptr inbounds i8, i8* %60, i64 %idxprom68
  %61 = load i8, i8* %arrayidx70, align 1
  %conv71 = zext i8 %61 to i32
  %62 = load i32, i32* %min, align 4
  %cmp72 = icmp slt i32 %conv71, %62
  br i1 %cmp72, label %if.then.74, label %if.end.79

if.then.74:                                       ; preds = %if.end.67
  %63 = load i32, i32* %x, align 4
  %idxprom75 = sext i32 %63 to i64
  %arrayidx76 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 1
  %64 = load i8*, i8** %arrayidx76, align 8
  %arrayidx77 = getelementptr inbounds i8, i8* %64, i64 %idxprom75
  %65 = load i8, i8* %arrayidx77, align 1
  %conv78 = zext i8 %65 to i32
  store i32 %conv78, i32* %min, align 4
  br label %if.end.79

if.end.79:                                        ; preds = %if.then.74, %if.end.67
  %66 = load i32, i32* %x, align 4
  %add80 = add nsw i32 %66, 1
  %idxprom81 = sext i32 %add80 to i64
  %arrayidx82 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 1
  %67 = load i8*, i8** %arrayidx82, align 8
  %arrayidx83 = getelementptr inbounds i8, i8* %67, i64 %idxprom81
  %68 = load i8, i8* %arrayidx83, align 1
  %conv84 = zext i8 %68 to i32
  %69 = load i32, i32* %min, align 4
  %cmp85 = icmp slt i32 %conv84, %69
  br i1 %cmp85, label %if.then.87, label %if.end.93

if.then.87:                                       ; preds = %if.end.79
  %70 = load i32, i32* %x, align 4
  %add88 = add nsw i32 %70, 1
  %idxprom89 = sext i32 %add88 to i64
  %arrayidx90 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 1
  %71 = load i8*, i8** %arrayidx90, align 8
  %arrayidx91 = getelementptr inbounds i8, i8* %71, i64 %idxprom89
  %72 = load i8, i8* %arrayidx91, align 1
  %conv92 = zext i8 %72 to i32
  store i32 %conv92, i32* %min, align 4
  br label %if.end.93

if.end.93:                                        ; preds = %if.then.87, %if.end.79
  %73 = load i32, i32* %x, align 4
  %add94 = add nsw i32 %73, 2
  %idxprom95 = sext i32 %add94 to i64
  %arrayidx96 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 1
  %74 = load i8*, i8** %arrayidx96, align 8
  %arrayidx97 = getelementptr inbounds i8, i8* %74, i64 %idxprom95
  %75 = load i8, i8* %arrayidx97, align 1
  %conv98 = zext i8 %75 to i32
  %76 = load i32, i32* %min, align 4
  %cmp99 = icmp slt i32 %conv98, %76
  br i1 %cmp99, label %if.then.101, label %if.end.107

if.then.101:                                      ; preds = %if.end.93
  %77 = load i32, i32* %x, align 4
  %add102 = add nsw i32 %77, 2
  %idxprom103 = sext i32 %add102 to i64
  %arrayidx104 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 1
  %78 = load i8*, i8** %arrayidx104, align 8
  %arrayidx105 = getelementptr inbounds i8, i8* %78, i64 %idxprom103
  %79 = load i8, i8* %arrayidx105, align 1
  %conv106 = zext i8 %79 to i32
  store i32 %conv106, i32* %min, align 4
  br label %if.end.107

if.end.107:                                       ; preds = %if.then.101, %if.end.93
  %80 = load i32, i32* %x, align 4
  %add108 = add nsw i32 %80, 1
  %idxprom109 = sext i32 %add108 to i64
  %arrayidx110 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 2
  %81 = load i8*, i8** %arrayidx110, align 8
  %arrayidx111 = getelementptr inbounds i8, i8* %81, i64 %idxprom109
  %82 = load i8, i8* %arrayidx111, align 1
  %conv112 = zext i8 %82 to i32
  %83 = load i32, i32* %min, align 4
  %cmp113 = icmp slt i32 %conv112, %83
  br i1 %cmp113, label %if.then.115, label %if.end.121

if.then.115:                                      ; preds = %if.end.107
  %84 = load i32, i32* %x, align 4
  %add116 = add nsw i32 %84, 1
  %idxprom117 = sext i32 %add116 to i64
  %arrayidx118 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 2
  %85 = load i8*, i8** %arrayidx118, align 8
  %arrayidx119 = getelementptr inbounds i8, i8* %85, i64 %idxprom117
  %86 = load i8, i8* %arrayidx119, align 1
  %conv120 = zext i8 %86 to i32
  store i32 %conv120, i32* %min, align 4
  br label %if.end.121

if.end.121:                                       ; preds = %if.then.115, %if.end.107
  %87 = load i32, i32* %min, align 4
  %conv122 = trunc i32 %87 to i8
  %88 = load i32, i32* %x, align 4
  %idxprom123 = sext i32 %88 to i64
  %89 = load i8*, i8** %out, align 8
  %arrayidx124 = getelementptr inbounds i8, i8* %89, i64 %idxprom123
  store i8 %conv122, i8* %arrayidx124, align 1
  br label %for.inc.125

for.inc.125:                                      ; preds = %if.end.121
  %90 = load i32, i32* %x, align 4
  %inc126 = add nsw i32 %90, 1
  store i32 %inc126, i32* %x, align 4
  br label %for.cond.50

for.end.127:                                      ; preds = %for.cond.50
  %91 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %92 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %x128 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %92, i32 0, i32 6
  %93 = load i32, i32* %x128, align 4
  %94 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %y129 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %94, i32 0, i32 7
  %95 = load i32, i32* %y129, align 4
  %96 = load i32, i32* %y, align 4
  %add130 = add nsw i32 %95, %96
  %97 = load i32, i32* %width, align 4
  %98 = load i8*, i8** %out, align 8
  call void @pixel_region_set_row(%struct._PixelRegion* %91, i32 %93, i32 %add130, i32 %97, i8* %98)
  %arraydecay = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i32 0
  call void @rotate_pointers(i8** %arraydecay, i32 3)
  br label %for.inc.131

for.inc.131:                                      ; preds = %for.end.127
  %99 = load i32, i32* %y, align 4
  %inc132 = add nsw i32 %99, 1
  store i32 %inc132, i32* %y, align 4
  br label %for.cond.21

for.end.133:                                      ; preds = %for.cond.21
  store i32 0, i32* %i, align 4
  br label %for.cond.134

for.cond.134:                                     ; preds = %for.inc.140, %for.end.133
  %100 = load i32, i32* %i, align 4
  %cmp135 = icmp slt i32 %100, 3
  br i1 %cmp135, label %for.body.137, label %for.end.142

for.body.137:                                     ; preds = %for.cond.134
  %101 = load i32, i32* %i, align 4
  %idxprom138 = sext i32 %101 to i64
  %arrayidx139 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 %idxprom138
  %102 = load i8*, i8** %arrayidx139, align 8
  call void @g_free(i8* %102)
  br label %for.inc.140

for.inc.140:                                      ; preds = %for.body.137
  %103 = load i32, i32* %i, align 4
  %inc141 = add nsw i32 %103, 1
  store i32 %inc141, i32* %i, align 4
  br label %for.cond.134

for.end.142:                                      ; preds = %for.cond.134
  %104 = load i8*, i8** %out, align 8
  call void @g_free(i8* %104)
  ret void
}

; Function Attrs: nounwind uwtable
define void @dilate_region(%struct._PixelRegion* %region) #0 {
entry:
  %region.addr = alloca %struct._PixelRegion*, align 8
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %width = alloca i32, align 4
  %i = alloca i32, align 4
  %buf = alloca [3 x i8*], align 16
  %out = alloca i8*, align 8
  %max = alloca i32, align 4
  store %struct._PixelRegion* %region, %struct._PixelRegion** %region.addr, align 8
  %0 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %0, i32 0, i32 8
  %1 = load i32, i32* %w, align 4
  store i32 %1, i32* %width, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %width, align 4
  %add = add nsw i32 %3, 2
  %conv = sext i32 %add to i64
  %call = call noalias i8* @g_malloc_n(i64 %conv, i64 1)
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 %idxprom
  store i8* %call, i8** %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load i32, i32* %width, align 4
  %conv1 = sext i32 %6 to i64
  %call2 = call noalias i8* @g_malloc_n(i64 %conv1, i64 1)
  store i8* %call2, i8** %out, align 8
  %7 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %8 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %x3 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %8, i32 0, i32 6
  %9 = load i32, i32* %x3, align 4
  %10 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %y4 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %10, i32 0, i32 7
  %11 = load i32, i32* %y4, align 4
  %12 = load i32, i32* %width, align 4
  %arrayidx5 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 0
  %13 = load i8*, i8** %arrayidx5, align 8
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 1
  call void @pixel_region_get_row(%struct._PixelRegion* %7, i32 %9, i32 %11, i32 %12, i8* %add.ptr, i32 1)
  %arrayidx6 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 0
  %14 = load i8*, i8** %arrayidx6, align 8
  %arrayidx7 = getelementptr inbounds i8, i8* %14, i64 1
  %15 = load i8, i8* %arrayidx7, align 1
  %arrayidx8 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 0
  %16 = load i8*, i8** %arrayidx8, align 8
  %arrayidx9 = getelementptr inbounds i8, i8* %16, i64 0
  store i8 %15, i8* %arrayidx9, align 1
  %17 = load i32, i32* %width, align 4
  %idxprom10 = sext i32 %17 to i64
  %arrayidx11 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 0
  %18 = load i8*, i8** %arrayidx11, align 8
  %arrayidx12 = getelementptr inbounds i8, i8* %18, i64 %idxprom10
  %19 = load i8, i8* %arrayidx12, align 1
  %20 = load i32, i32* %width, align 4
  %add13 = add nsw i32 %20, 1
  %idxprom14 = sext i32 %add13 to i64
  %arrayidx15 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 0
  %21 = load i8*, i8** %arrayidx15, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %21, i64 %idxprom14
  store i8 %19, i8* %arrayidx16, align 1
  %arrayidx17 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 1
  %22 = load i8*, i8** %arrayidx17, align 8
  %arrayidx18 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 0
  %23 = load i8*, i8** %arrayidx18, align 8
  %24 = load i32, i32* %width, align 4
  %add19 = add nsw i32 %24, 2
  %conv20 = sext i32 %add19 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %22, i8* %23, i64 %conv20, i32 1, i1 false)
  store i32 0, i32* %y, align 4
  br label %for.cond.21

for.cond.21:                                      ; preds = %for.inc.131, %for.end
  %25 = load i32, i32* %y, align 4
  %26 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %h = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %26, i32 0, i32 9
  %27 = load i32, i32* %h, align 4
  %cmp22 = icmp slt i32 %25, %27
  br i1 %cmp22, label %for.body.24, label %for.end.133

for.body.24:                                      ; preds = %for.cond.21
  %28 = load i32, i32* %y, align 4
  %add25 = add nsw i32 %28, 1
  %29 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %h26 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %29, i32 0, i32 9
  %30 = load i32, i32* %h26, align 4
  %cmp27 = icmp slt i32 %add25, %30
  br i1 %cmp27, label %if.then, label %if.else

if.then:                                          ; preds = %for.body.24
  %31 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %32 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %x29 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %32, i32 0, i32 6
  %33 = load i32, i32* %x29, align 4
  %34 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %y30 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %34, i32 0, i32 7
  %35 = load i32, i32* %y30, align 4
  %36 = load i32, i32* %y, align 4
  %add31 = add nsw i32 %35, %36
  %add32 = add nsw i32 %add31, 1
  %37 = load i32, i32* %width, align 4
  %arrayidx33 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 2
  %38 = load i8*, i8** %arrayidx33, align 8
  %add.ptr34 = getelementptr inbounds i8, i8* %38, i64 1
  call void @pixel_region_get_row(%struct._PixelRegion* %31, i32 %33, i32 %add32, i32 %37, i8* %add.ptr34, i32 1)
  %arrayidx35 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 2
  %39 = load i8*, i8** %arrayidx35, align 8
  %arrayidx36 = getelementptr inbounds i8, i8* %39, i64 1
  %40 = load i8, i8* %arrayidx36, align 1
  %arrayidx37 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 2
  %41 = load i8*, i8** %arrayidx37, align 8
  %arrayidx38 = getelementptr inbounds i8, i8* %41, i64 0
  store i8 %40, i8* %arrayidx38, align 1
  %42 = load i32, i32* %width, align 4
  %idxprom39 = sext i32 %42 to i64
  %arrayidx40 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 2
  %43 = load i8*, i8** %arrayidx40, align 8
  %arrayidx41 = getelementptr inbounds i8, i8* %43, i64 %idxprom39
  %44 = load i8, i8* %arrayidx41, align 1
  %45 = load i32, i32* %width, align 4
  %add42 = add nsw i32 %45, 1
  %idxprom43 = sext i32 %add42 to i64
  %arrayidx44 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 2
  %46 = load i8*, i8** %arrayidx44, align 8
  %arrayidx45 = getelementptr inbounds i8, i8* %46, i64 %idxprom43
  store i8 %44, i8* %arrayidx45, align 1
  br label %if.end

if.else:                                          ; preds = %for.body.24
  %arrayidx46 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 2
  %47 = load i8*, i8** %arrayidx46, align 8
  %arrayidx47 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 1
  %48 = load i8*, i8** %arrayidx47, align 8
  %49 = load i32, i32* %width, align 4
  %add48 = add nsw i32 %49, 2
  %conv49 = sext i32 %add48 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %47, i8* %48, i64 %conv49, i32 1, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 0, i32* %x, align 4
  br label %for.cond.50

for.cond.50:                                      ; preds = %for.inc.125, %if.end
  %50 = load i32, i32* %x, align 4
  %51 = load i32, i32* %width, align 4
  %cmp51 = icmp slt i32 %50, %51
  br i1 %cmp51, label %for.body.53, label %for.end.127

for.body.53:                                      ; preds = %for.cond.50
  store i32 0, i32* %max, align 4
  %52 = load i32, i32* %x, align 4
  %add54 = add nsw i32 %52, 1
  %idxprom55 = sext i32 %add54 to i64
  %arrayidx56 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 0
  %53 = load i8*, i8** %arrayidx56, align 8
  %arrayidx57 = getelementptr inbounds i8, i8* %53, i64 %idxprom55
  %54 = load i8, i8* %arrayidx57, align 1
  %conv58 = zext i8 %54 to i32
  %55 = load i32, i32* %max, align 4
  %cmp59 = icmp sgt i32 %conv58, %55
  br i1 %cmp59, label %if.then.61, label %if.end.67

if.then.61:                                       ; preds = %for.body.53
  %56 = load i32, i32* %x, align 4
  %add62 = add nsw i32 %56, 1
  %idxprom63 = sext i32 %add62 to i64
  %arrayidx64 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 0
  %57 = load i8*, i8** %arrayidx64, align 8
  %arrayidx65 = getelementptr inbounds i8, i8* %57, i64 %idxprom63
  %58 = load i8, i8* %arrayidx65, align 1
  %conv66 = zext i8 %58 to i32
  store i32 %conv66, i32* %max, align 4
  br label %if.end.67

if.end.67:                                        ; preds = %if.then.61, %for.body.53
  %59 = load i32, i32* %x, align 4
  %idxprom68 = sext i32 %59 to i64
  %arrayidx69 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 1
  %60 = load i8*, i8** %arrayidx69, align 8
  %arrayidx70 = getelementptr inbounds i8, i8* %60, i64 %idxprom68
  %61 = load i8, i8* %arrayidx70, align 1
  %conv71 = zext i8 %61 to i32
  %62 = load i32, i32* %max, align 4
  %cmp72 = icmp sgt i32 %conv71, %62
  br i1 %cmp72, label %if.then.74, label %if.end.79

if.then.74:                                       ; preds = %if.end.67
  %63 = load i32, i32* %x, align 4
  %idxprom75 = sext i32 %63 to i64
  %arrayidx76 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 1
  %64 = load i8*, i8** %arrayidx76, align 8
  %arrayidx77 = getelementptr inbounds i8, i8* %64, i64 %idxprom75
  %65 = load i8, i8* %arrayidx77, align 1
  %conv78 = zext i8 %65 to i32
  store i32 %conv78, i32* %max, align 4
  br label %if.end.79

if.end.79:                                        ; preds = %if.then.74, %if.end.67
  %66 = load i32, i32* %x, align 4
  %add80 = add nsw i32 %66, 1
  %idxprom81 = sext i32 %add80 to i64
  %arrayidx82 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 1
  %67 = load i8*, i8** %arrayidx82, align 8
  %arrayidx83 = getelementptr inbounds i8, i8* %67, i64 %idxprom81
  %68 = load i8, i8* %arrayidx83, align 1
  %conv84 = zext i8 %68 to i32
  %69 = load i32, i32* %max, align 4
  %cmp85 = icmp sgt i32 %conv84, %69
  br i1 %cmp85, label %if.then.87, label %if.end.93

if.then.87:                                       ; preds = %if.end.79
  %70 = load i32, i32* %x, align 4
  %add88 = add nsw i32 %70, 1
  %idxprom89 = sext i32 %add88 to i64
  %arrayidx90 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 1
  %71 = load i8*, i8** %arrayidx90, align 8
  %arrayidx91 = getelementptr inbounds i8, i8* %71, i64 %idxprom89
  %72 = load i8, i8* %arrayidx91, align 1
  %conv92 = zext i8 %72 to i32
  store i32 %conv92, i32* %max, align 4
  br label %if.end.93

if.end.93:                                        ; preds = %if.then.87, %if.end.79
  %73 = load i32, i32* %x, align 4
  %add94 = add nsw i32 %73, 2
  %idxprom95 = sext i32 %add94 to i64
  %arrayidx96 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 1
  %74 = load i8*, i8** %arrayidx96, align 8
  %arrayidx97 = getelementptr inbounds i8, i8* %74, i64 %idxprom95
  %75 = load i8, i8* %arrayidx97, align 1
  %conv98 = zext i8 %75 to i32
  %76 = load i32, i32* %max, align 4
  %cmp99 = icmp sgt i32 %conv98, %76
  br i1 %cmp99, label %if.then.101, label %if.end.107

if.then.101:                                      ; preds = %if.end.93
  %77 = load i32, i32* %x, align 4
  %add102 = add nsw i32 %77, 2
  %idxprom103 = sext i32 %add102 to i64
  %arrayidx104 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 1
  %78 = load i8*, i8** %arrayidx104, align 8
  %arrayidx105 = getelementptr inbounds i8, i8* %78, i64 %idxprom103
  %79 = load i8, i8* %arrayidx105, align 1
  %conv106 = zext i8 %79 to i32
  store i32 %conv106, i32* %max, align 4
  br label %if.end.107

if.end.107:                                       ; preds = %if.then.101, %if.end.93
  %80 = load i32, i32* %x, align 4
  %add108 = add nsw i32 %80, 1
  %idxprom109 = sext i32 %add108 to i64
  %arrayidx110 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 2
  %81 = load i8*, i8** %arrayidx110, align 8
  %arrayidx111 = getelementptr inbounds i8, i8* %81, i64 %idxprom109
  %82 = load i8, i8* %arrayidx111, align 1
  %conv112 = zext i8 %82 to i32
  %83 = load i32, i32* %max, align 4
  %cmp113 = icmp sgt i32 %conv112, %83
  br i1 %cmp113, label %if.then.115, label %if.end.121

if.then.115:                                      ; preds = %if.end.107
  %84 = load i32, i32* %x, align 4
  %add116 = add nsw i32 %84, 1
  %idxprom117 = sext i32 %add116 to i64
  %arrayidx118 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 2
  %85 = load i8*, i8** %arrayidx118, align 8
  %arrayidx119 = getelementptr inbounds i8, i8* %85, i64 %idxprom117
  %86 = load i8, i8* %arrayidx119, align 1
  %conv120 = zext i8 %86 to i32
  store i32 %conv120, i32* %max, align 4
  br label %if.end.121

if.end.121:                                       ; preds = %if.then.115, %if.end.107
  %87 = load i32, i32* %max, align 4
  %conv122 = trunc i32 %87 to i8
  %88 = load i32, i32* %x, align 4
  %idxprom123 = sext i32 %88 to i64
  %89 = load i8*, i8** %out, align 8
  %arrayidx124 = getelementptr inbounds i8, i8* %89, i64 %idxprom123
  store i8 %conv122, i8* %arrayidx124, align 1
  br label %for.inc.125

for.inc.125:                                      ; preds = %if.end.121
  %90 = load i32, i32* %x, align 4
  %inc126 = add nsw i32 %90, 1
  store i32 %inc126, i32* %x, align 4
  br label %for.cond.50

for.end.127:                                      ; preds = %for.cond.50
  %91 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %92 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %x128 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %92, i32 0, i32 6
  %93 = load i32, i32* %x128, align 4
  %94 = load %struct._PixelRegion*, %struct._PixelRegion** %region.addr, align 8
  %y129 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %94, i32 0, i32 7
  %95 = load i32, i32* %y129, align 4
  %96 = load i32, i32* %y, align 4
  %add130 = add nsw i32 %95, %96
  %97 = load i32, i32* %width, align 4
  %98 = load i8*, i8** %out, align 8
  call void @pixel_region_set_row(%struct._PixelRegion* %91, i32 %93, i32 %add130, i32 %97, i8* %98)
  %arraydecay = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i32 0
  call void @rotate_pointers(i8** %arraydecay, i32 3)
  br label %for.inc.131

for.inc.131:                                      ; preds = %for.end.127
  %99 = load i32, i32* %y, align 4
  %inc132 = add nsw i32 %99, 1
  store i32 %inc132, i32* %y, align 4
  br label %for.cond.21

for.end.133:                                      ; preds = %for.cond.21
  store i32 0, i32* %i, align 4
  br label %for.cond.134

for.cond.134:                                     ; preds = %for.inc.140, %for.end.133
  %100 = load i32, i32* %i, align 4
  %cmp135 = icmp slt i32 %100, 3
  br i1 %cmp135, label %for.body.137, label %for.end.142

for.body.137:                                     ; preds = %for.cond.134
  %101 = load i32, i32* %i, align 4
  %idxprom138 = sext i32 %101 to i64
  %arrayidx139 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 %idxprom138
  %102 = load i8*, i8** %arrayidx139, align 8
  call void @g_free(i8* %102)
  br label %for.inc.140

for.inc.140:                                      ; preds = %for.body.137
  %103 = load i32, i32* %i, align 4
  %inc141 = add nsw i32 %103, 1
  store i32 %inc141, i32* %i, align 4
  br label %for.cond.134

for.end.142:                                      ; preds = %for.cond.134
  %104 = load i8*, i8** %out, align 8
  call void @g_free(i8* %104)
  ret void
}

; Function Attrs: nounwind uwtable
define void @border_region(%struct._PixelRegion* %src, i16 signext %xradius, i16 signext %yradius, i32 %feather, i32 %edge_lock) #0 {
entry:
  %src.addr = alloca %struct._PixelRegion*, align 8
  %xradius.addr = alloca i16, align 2
  %yradius.addr = alloca i16, align 2
  %feather.addr = alloca i32, align 4
  %edge_lock.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %buf = alloca [3 x i8*], align 16
  %out = alloca i8*, align 8
  %transition = alloca i8**, align 8
  %max = alloca i16*, align 8
  %density = alloca i8**, align 8
  %last_index = alloca i16, align 2
  %color = alloca [5 x i8], align 1
  %transition21 = alloca i8*, align 8
  %source = alloca [3 x i8*], align 16
  %tmpx = alloca double, align 8
  %tmpy = alloca double, align 8
  %dist = alloca double, align 8
  %a = alloca i8, align 1
  %last_max = alloca i8, align 1
  store %struct._PixelRegion* %src, %struct._PixelRegion** %src.addr, align 8
  store i16 %xradius, i16* %xradius.addr, align 2
  store i16 %yradius, i16* %yradius.addr, align 2
  store i32 %feather, i32* %feather.addr, align 4
  store i32 %edge_lock, i32* %edge_lock.addr, align 4
  %0 = load i16, i16* %xradius.addr, align 2
  %conv = sext i16 %0 to i32
  %cmp = icmp slt i32 %conv, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i16, i16* %yradius.addr, align 2
  %conv2 = sext i16 %1 to i32
  %cmp3 = icmp slt i32 %conv2, 0
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void (i8*, ...) @g_warning(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i32 0, i32 0))
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i16, i16* %xradius.addr, align 2
  %conv5 = sext i16 %2 to i32
  %cmp6 = icmp eq i32 %conv5, 0
  br i1 %cmp6, label %if.then.12, label %lor.lhs.false.8

lor.lhs.false.8:                                  ; preds = %if.end
  %3 = load i16, i16* %yradius.addr, align 2
  %conv9 = sext i16 %3 to i32
  %cmp10 = icmp eq i32 %conv9, 0
  br i1 %cmp10, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %lor.lhs.false.8, %if.end
  %4 = bitcast [5 x i8]* %color to i8*
  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 5, i32 1, i1 false)
  %5 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %arraydecay = getelementptr inbounds [5 x i8], [5 x i8]* %color, i32 0, i32 0
  call void @color_region(%struct._PixelRegion* %5, i8* %arraydecay)
  br label %return

if.end.13:                                        ; preds = %lor.lhs.false.8
  %6 = load i16, i16* %xradius.addr, align 2
  %conv14 = sext i16 %6 to i32
  %cmp15 = icmp eq i32 %conv14, 1
  br i1 %cmp15, label %land.lhs.true, label %if.end.95

land.lhs.true:                                    ; preds = %if.end.13
  %7 = load i16, i16* %yradius.addr, align 2
  %conv17 = sext i16 %7 to i32
  %cmp18 = icmp eq i32 %conv17, 1
  br i1 %cmp18, label %if.then.20, label %if.end.95

if.then.20:                                       ; preds = %land.lhs.true
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.20
  %8 = load i32, i32* %i, align 4
  %cmp22 = icmp slt i32 %8, 3
  br i1 %cmp22, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %9, i32 0, i32 8
  %10 = load i32, i32* %w, align 4
  %conv24 = sext i32 %10 to i64
  %call = call noalias i8* @g_malloc_n(i64 %conv24, i64 1)
  %11 = load i32, i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds [3 x i8*], [3 x i8*]* %source, i32 0, i64 %idxprom
  store i8* %call, i8** %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w25 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %13, i32 0, i32 8
  %14 = load i32, i32* %w25, align 4
  %conv26 = sext i32 %14 to i64
  %call27 = call noalias i8* @g_malloc_n(i64 %conv26, i64 1)
  store i8* %call27, i8** %transition21, align 8
  %arrayidx28 = getelementptr inbounds [3 x i8*], [3 x i8*]* %source, i32 0, i64 0
  %15 = load i8*, i8** %arrayidx28, align 8
  %16 = load i32, i32* %edge_lock.addr, align 4
  %tobool = icmp ne i32 %16, 0
  %cond = select i1 %tobool, i32 255, i32 0
  %17 = trunc i32 %cond to i8
  %18 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w29 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %18, i32 0, i32 8
  %19 = load i32, i32* %w29, align 4
  %conv30 = sext i32 %19 to i64
  call void @llvm.memset.p0i8.i64(i8* %15, i8 %17, i64 %conv30, i32 1, i1 false)
  %20 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %21 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %x31 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %21, i32 0, i32 6
  %22 = load i32, i32* %x31, align 4
  %23 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %y32 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %23, i32 0, i32 7
  %24 = load i32, i32* %y32, align 4
  %add = add nsw i32 %24, 0
  %25 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w33 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %25, i32 0, i32 8
  %26 = load i32, i32* %w33, align 4
  %arrayidx34 = getelementptr inbounds [3 x i8*], [3 x i8*]* %source, i32 0, i64 1
  %27 = load i8*, i8** %arrayidx34, align 8
  call void @pixel_region_get_row(%struct._PixelRegion* %20, i32 %22, i32 %add, i32 %26, i8* %27, i32 1)
  %28 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %h = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %28, i32 0, i32 9
  %29 = load i32, i32* %h, align 4
  %cmp35 = icmp sgt i32 %29, 1
  br i1 %cmp35, label %if.then.37, label %if.else

if.then.37:                                       ; preds = %for.end
  %30 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %31 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %x38 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %31, i32 0, i32 6
  %32 = load i32, i32* %x38, align 4
  %33 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %y39 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %33, i32 0, i32 7
  %34 = load i32, i32* %y39, align 4
  %add40 = add nsw i32 %34, 1
  %35 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w41 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %35, i32 0, i32 8
  %36 = load i32, i32* %w41, align 4
  %arrayidx42 = getelementptr inbounds [3 x i8*], [3 x i8*]* %source, i32 0, i64 2
  %37 = load i8*, i8** %arrayidx42, align 8
  call void @pixel_region_get_row(%struct._PixelRegion* %30, i32 %32, i32 %add40, i32 %36, i8* %37, i32 1)
  br label %if.end.47

if.else:                                          ; preds = %for.end
  %arrayidx43 = getelementptr inbounds [3 x i8*], [3 x i8*]* %source, i32 0, i64 2
  %38 = load i8*, i8** %arrayidx43, align 8
  %arrayidx44 = getelementptr inbounds [3 x i8*], [3 x i8*]* %source, i32 0, i64 1
  %39 = load i8*, i8** %arrayidx44, align 8
  %40 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w45 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %40, i32 0, i32 8
  %41 = load i32, i32* %w45, align 4
  %conv46 = sext i32 %41 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %38, i8* %39, i64 %conv46, i32 1, i1 false)
  br label %if.end.47

if.end.47:                                        ; preds = %if.else, %if.then.37
  %42 = load i8*, i8** %transition21, align 8
  %arraydecay48 = getelementptr inbounds [3 x i8*], [3 x i8*]* %source, i32 0, i32 0
  %43 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w49 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %43, i32 0, i32 8
  %44 = load i32, i32* %w49, align 4
  %45 = load i32, i32* %edge_lock.addr, align 4
  call void @compute_transition(i8* %42, i8** %arraydecay48, i32 %44, i32 %45)
  %46 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %47 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %x50 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %47, i32 0, i32 6
  %48 = load i32, i32* %x50, align 4
  %49 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %y51 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %49, i32 0, i32 7
  %50 = load i32, i32* %y51, align 4
  %51 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w52 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %51, i32 0, i32 8
  %52 = load i32, i32* %w52, align 4
  %53 = load i8*, i8** %transition21, align 8
  call void @pixel_region_set_row(%struct._PixelRegion* %46, i32 %48, i32 %50, i32 %52, i8* %53)
  store i32 1, i32* %y, align 4
  br label %for.cond.53

for.cond.53:                                      ; preds = %for.inc.83, %if.end.47
  %54 = load i32, i32* %y, align 4
  %55 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %h54 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %55, i32 0, i32 9
  %56 = load i32, i32* %h54, align 4
  %cmp55 = icmp slt i32 %54, %56
  br i1 %cmp55, label %for.body.57, label %for.end.85

for.body.57:                                      ; preds = %for.cond.53
  %arraydecay58 = getelementptr inbounds [3 x i8*], [3 x i8*]* %source, i32 0, i32 0
  call void @rotate_pointers(i8** %arraydecay58, i32 3)
  %57 = load i32, i32* %y, align 4
  %add59 = add nsw i32 %57, 1
  %58 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %h60 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %58, i32 0, i32 9
  %59 = load i32, i32* %h60, align 4
  %cmp61 = icmp slt i32 %add59, %59
  br i1 %cmp61, label %if.then.63, label %if.else.70

if.then.63:                                       ; preds = %for.body.57
  %60 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %61 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %x64 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %61, i32 0, i32 6
  %62 = load i32, i32* %x64, align 4
  %63 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %y65 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %63, i32 0, i32 7
  %64 = load i32, i32* %y65, align 4
  %65 = load i32, i32* %y, align 4
  %add66 = add nsw i32 %64, %65
  %add67 = add nsw i32 %add66, 1
  %66 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w68 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %66, i32 0, i32 8
  %67 = load i32, i32* %w68, align 4
  %arrayidx69 = getelementptr inbounds [3 x i8*], [3 x i8*]* %source, i32 0, i64 2
  %68 = load i8*, i8** %arrayidx69, align 8
  call void @pixel_region_get_row(%struct._PixelRegion* %60, i32 %62, i32 %add67, i32 %67, i8* %68, i32 1)
  br label %if.end.76

if.else.70:                                       ; preds = %for.body.57
  %arrayidx71 = getelementptr inbounds [3 x i8*], [3 x i8*]* %source, i32 0, i64 2
  %69 = load i8*, i8** %arrayidx71, align 8
  %70 = load i32, i32* %edge_lock.addr, align 4
  %tobool72 = icmp ne i32 %70, 0
  %cond73 = select i1 %tobool72, i32 255, i32 0
  %71 = trunc i32 %cond73 to i8
  %72 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w74 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %72, i32 0, i32 8
  %73 = load i32, i32* %w74, align 4
  %conv75 = sext i32 %73 to i64
  call void @llvm.memset.p0i8.i64(i8* %69, i8 %71, i64 %conv75, i32 1, i1 false)
  br label %if.end.76

if.end.76:                                        ; preds = %if.else.70, %if.then.63
  %74 = load i8*, i8** %transition21, align 8
  %arraydecay77 = getelementptr inbounds [3 x i8*], [3 x i8*]* %source, i32 0, i32 0
  %75 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w78 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %75, i32 0, i32 8
  %76 = load i32, i32* %w78, align 4
  %77 = load i32, i32* %edge_lock.addr, align 4
  call void @compute_transition(i8* %74, i8** %arraydecay77, i32 %76, i32 %77)
  %78 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %79 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %x79 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %79, i32 0, i32 6
  %80 = load i32, i32* %x79, align 4
  %81 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %y80 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %81, i32 0, i32 7
  %82 = load i32, i32* %y80, align 4
  %83 = load i32, i32* %y, align 4
  %add81 = add nsw i32 %82, %83
  %84 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w82 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %84, i32 0, i32 8
  %85 = load i32, i32* %w82, align 4
  %86 = load i8*, i8** %transition21, align 8
  call void @pixel_region_set_row(%struct._PixelRegion* %78, i32 %80, i32 %add81, i32 %85, i8* %86)
  br label %for.inc.83

for.inc.83:                                       ; preds = %if.end.76
  %87 = load i32, i32* %y, align 4
  %inc84 = add nsw i32 %87, 1
  store i32 %inc84, i32* %y, align 4
  br label %for.cond.53

for.end.85:                                       ; preds = %for.cond.53
  store i32 0, i32* %i, align 4
  br label %for.cond.86

for.cond.86:                                      ; preds = %for.inc.92, %for.end.85
  %88 = load i32, i32* %i, align 4
  %cmp87 = icmp slt i32 %88, 3
  br i1 %cmp87, label %for.body.89, label %for.end.94

for.body.89:                                      ; preds = %for.cond.86
  %89 = load i32, i32* %i, align 4
  %idxprom90 = sext i32 %89 to i64
  %arrayidx91 = getelementptr inbounds [3 x i8*], [3 x i8*]* %source, i32 0, i64 %idxprom90
  %90 = load i8*, i8** %arrayidx91, align 8
  call void @g_free(i8* %90)
  br label %for.inc.92

for.inc.92:                                       ; preds = %for.body.89
  %91 = load i32, i32* %i, align 4
  %inc93 = add nsw i32 %91, 1
  store i32 %inc93, i32* %i, align 4
  br label %for.cond.86

for.end.94:                                       ; preds = %for.cond.86
  %92 = load i8*, i8** %transition21, align 8
  call void @g_free(i8* %92)
  br label %return

if.end.95:                                        ; preds = %land.lhs.true, %if.end.13
  %93 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w96 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %93, i32 0, i32 8
  %94 = load i32, i32* %w96, align 4
  %95 = load i16, i16* %xradius.addr, align 2
  %conv97 = sext i16 %95 to i32
  %mul = mul nsw i32 2, %conv97
  %add98 = add nsw i32 %94, %mul
  %conv99 = sext i32 %add98 to i64
  %call100 = call noalias i8* @g_malloc_n(i64 %conv99, i64 2)
  %96 = bitcast i8* %call100 to i16*
  store i16* %96, i16** %max, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.101

for.cond.101:                                     ; preds = %for.inc.114, %if.end.95
  %97 = load i32, i32* %i, align 4
  %98 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w102 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %98, i32 0, i32 8
  %99 = load i32, i32* %w102, align 4
  %100 = load i16, i16* %xradius.addr, align 2
  %conv103 = sext i16 %100 to i32
  %mul104 = mul nsw i32 2, %conv103
  %add105 = add nsw i32 %99, %mul104
  %cmp106 = icmp slt i32 %97, %add105
  br i1 %cmp106, label %for.body.108, label %for.end.116

for.body.108:                                     ; preds = %for.cond.101
  %101 = load i16, i16* %yradius.addr, align 2
  %conv109 = sext i16 %101 to i32
  %add110 = add nsw i32 %conv109, 2
  %conv111 = trunc i32 %add110 to i16
  %102 = load i32, i32* %i, align 4
  %idxprom112 = sext i32 %102 to i64
  %103 = load i16*, i16** %max, align 8
  %arrayidx113 = getelementptr inbounds i16, i16* %103, i64 %idxprom112
  store i16 %conv111, i16* %arrayidx113, align 2
  br label %for.inc.114

for.inc.114:                                      ; preds = %for.body.108
  %104 = load i32, i32* %i, align 4
  %inc115 = add nsw i32 %104, 1
  store i32 %inc115, i32* %i, align 4
  br label %for.cond.101

for.end.116:                                      ; preds = %for.cond.101
  %105 = load i16, i16* %xradius.addr, align 2
  %conv117 = sext i16 %105 to i32
  %106 = load i16*, i16** %max, align 8
  %idx.ext = sext i32 %conv117 to i64
  %add.ptr = getelementptr inbounds i16, i16* %106, i64 %idx.ext
  store i16* %add.ptr, i16** %max, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.118

for.cond.118:                                     ; preds = %for.inc.127, %for.end.116
  %107 = load i32, i32* %i, align 4
  %cmp119 = icmp slt i32 %107, 3
  br i1 %cmp119, label %for.body.121, label %for.end.129

for.body.121:                                     ; preds = %for.cond.118
  %108 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w122 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %108, i32 0, i32 8
  %109 = load i32, i32* %w122, align 4
  %conv123 = sext i32 %109 to i64
  %call124 = call noalias i8* @g_malloc_n(i64 %conv123, i64 1)
  %110 = load i32, i32* %i, align 4
  %idxprom125 = sext i32 %110 to i64
  %arrayidx126 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 %idxprom125
  store i8* %call124, i8** %arrayidx126, align 8
  br label %for.inc.127

for.inc.127:                                      ; preds = %for.body.121
  %111 = load i32, i32* %i, align 4
  %inc128 = add nsw i32 %111, 1
  store i32 %inc128, i32* %i, align 4
  br label %for.cond.118

for.end.129:                                      ; preds = %for.cond.118
  %112 = load i16, i16* %yradius.addr, align 2
  %conv130 = sext i16 %112 to i32
  %add131 = add nsw i32 %conv130, 1
  %conv132 = sext i32 %add131 to i64
  %call133 = call noalias i8* @g_malloc_n(i64 %conv132, i64 8)
  %113 = bitcast i8* %call133 to i8**
  store i8** %113, i8*** %transition, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.134

for.cond.134:                                     ; preds = %for.inc.160, %for.end.129
  %114 = load i32, i32* %i, align 4
  %115 = load i16, i16* %yradius.addr, align 2
  %conv135 = sext i16 %115 to i32
  %add136 = add nsw i32 %conv135, 1
  %cmp137 = icmp slt i32 %114, %add136
  br i1 %cmp137, label %for.body.139, label %for.end.162

for.body.139:                                     ; preds = %for.cond.134
  %116 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w140 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %116, i32 0, i32 8
  %117 = load i32, i32* %w140, align 4
  %118 = load i16, i16* %xradius.addr, align 2
  %conv141 = sext i16 %118 to i32
  %mul142 = mul nsw i32 2, %conv141
  %add143 = add nsw i32 %117, %mul142
  %conv144 = sext i32 %add143 to i64
  %call145 = call noalias i8* @g_malloc_n(i64 %conv144, i64 1)
  %119 = load i32, i32* %i, align 4
  %idxprom146 = sext i32 %119 to i64
  %120 = load i8**, i8*** %transition, align 8
  %arrayidx147 = getelementptr inbounds i8*, i8** %120, i64 %idxprom146
  store i8* %call145, i8** %arrayidx147, align 8
  %121 = load i32, i32* %i, align 4
  %idxprom148 = sext i32 %121 to i64
  %122 = load i8**, i8*** %transition, align 8
  %arrayidx149 = getelementptr inbounds i8*, i8** %122, i64 %idxprom148
  %123 = load i8*, i8** %arrayidx149, align 8
  %124 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w150 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %124, i32 0, i32 8
  %125 = load i32, i32* %w150, align 4
  %126 = load i16, i16* %xradius.addr, align 2
  %conv151 = sext i16 %126 to i32
  %mul152 = mul nsw i32 2, %conv151
  %add153 = add nsw i32 %125, %mul152
  %conv154 = sext i32 %add153 to i64
  call void @llvm.memset.p0i8.i64(i8* %123, i8 0, i64 %conv154, i32 1, i1 false)
  %127 = load i16, i16* %xradius.addr, align 2
  %conv155 = sext i16 %127 to i32
  %128 = load i32, i32* %i, align 4
  %idxprom156 = sext i32 %128 to i64
  %129 = load i8**, i8*** %transition, align 8
  %arrayidx157 = getelementptr inbounds i8*, i8** %129, i64 %idxprom156
  %130 = load i8*, i8** %arrayidx157, align 8
  %idx.ext158 = sext i32 %conv155 to i64
  %add.ptr159 = getelementptr inbounds i8, i8* %130, i64 %idx.ext158
  store i8* %add.ptr159, i8** %arrayidx157, align 8
  br label %for.inc.160

for.inc.160:                                      ; preds = %for.body.139
  %131 = load i32, i32* %i, align 4
  %inc161 = add nsw i32 %131, 1
  store i32 %inc161, i32* %i, align 4
  br label %for.cond.134

for.end.162:                                      ; preds = %for.cond.134
  %132 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w163 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %132, i32 0, i32 8
  %133 = load i32, i32* %w163, align 4
  %conv164 = sext i32 %133 to i64
  %call165 = call noalias i8* @g_malloc_n(i64 %conv164, i64 1)
  store i8* %call165, i8** %out, align 8
  %134 = load i16, i16* %xradius.addr, align 2
  %conv166 = sext i16 %134 to i32
  %mul167 = mul nsw i32 2, %conv166
  %add168 = add nsw i32 %mul167, 1
  %conv169 = sext i32 %add168 to i64
  %call170 = call noalias i8* @g_malloc_n(i64 %conv169, i64 8)
  %135 = bitcast i8* %call170 to i8**
  store i8** %135, i8*** %density, align 8
  %136 = load i16, i16* %xradius.addr, align 2
  %conv171 = sext i16 %136 to i32
  %137 = load i8**, i8*** %density, align 8
  %idx.ext172 = sext i32 %conv171 to i64
  %add.ptr173 = getelementptr inbounds i8*, i8** %137, i64 %idx.ext172
  store i8** %add.ptr173, i8*** %density, align 8
  store i32 0, i32* %x, align 4
  br label %for.cond.174

for.cond.174:                                     ; preds = %for.inc.196, %for.end.162
  %138 = load i32, i32* %x, align 4
  %139 = load i16, i16* %xradius.addr, align 2
  %conv175 = sext i16 %139 to i32
  %add176 = add nsw i32 %conv175, 1
  %cmp177 = icmp slt i32 %138, %add176
  br i1 %cmp177, label %for.body.179, label %for.end.198

for.body.179:                                     ; preds = %for.cond.174
  %140 = load i16, i16* %yradius.addr, align 2
  %conv180 = sext i16 %140 to i32
  %mul181 = mul nsw i32 2, %conv180
  %add182 = add nsw i32 %mul181, 1
  %conv183 = sext i32 %add182 to i64
  %call184 = call noalias i8* @g_malloc_n(i64 %conv183, i64 1)
  %141 = load i32, i32* %x, align 4
  %idxprom185 = sext i32 %141 to i64
  %142 = load i8**, i8*** %density, align 8
  %arrayidx186 = getelementptr inbounds i8*, i8** %142, i64 %idxprom185
  store i8* %call184, i8** %arrayidx186, align 8
  %143 = load i16, i16* %yradius.addr, align 2
  %conv187 = sext i16 %143 to i32
  %144 = load i32, i32* %x, align 4
  %idxprom188 = sext i32 %144 to i64
  %145 = load i8**, i8*** %density, align 8
  %arrayidx189 = getelementptr inbounds i8*, i8** %145, i64 %idxprom188
  %146 = load i8*, i8** %arrayidx189, align 8
  %idx.ext190 = sext i32 %conv187 to i64
  %add.ptr191 = getelementptr inbounds i8, i8* %146, i64 %idx.ext190
  store i8* %add.ptr191, i8** %arrayidx189, align 8
  %147 = load i32, i32* %x, align 4
  %idxprom192 = sext i32 %147 to i64
  %148 = load i8**, i8*** %density, align 8
  %arrayidx193 = getelementptr inbounds i8*, i8** %148, i64 %idxprom192
  %149 = load i8*, i8** %arrayidx193, align 8
  %150 = load i32, i32* %x, align 4
  %sub = sub nsw i32 0, %150
  %idxprom194 = sext i32 %sub to i64
  %151 = load i8**, i8*** %density, align 8
  %arrayidx195 = getelementptr inbounds i8*, i8** %151, i64 %idxprom194
  store i8* %149, i8** %arrayidx195, align 8
  br label %for.inc.196

for.inc.196:                                      ; preds = %for.body.179
  %152 = load i32, i32* %x, align 4
  %inc197 = add nsw i32 %152, 1
  store i32 %inc197, i32* %x, align 4
  br label %for.cond.174

for.end.198:                                      ; preds = %for.cond.174
  store i32 0, i32* %x, align 4
  br label %for.cond.199

for.cond.199:                                     ; preds = %for.inc.287, %for.end.198
  %153 = load i32, i32* %x, align 4
  %154 = load i16, i16* %xradius.addr, align 2
  %conv200 = sext i16 %154 to i32
  %add201 = add nsw i32 %conv200, 1
  %cmp202 = icmp slt i32 %153, %add201
  br i1 %cmp202, label %for.body.204, label %for.end.289

for.body.204:                                     ; preds = %for.cond.199
  %155 = load i32, i32* %x, align 4
  %cmp205 = icmp sgt i32 %155, 0
  br i1 %cmp205, label %if.then.207, label %if.else.210

if.then.207:                                      ; preds = %for.body.204
  %156 = load i32, i32* %x, align 4
  %conv208 = sitofp i32 %156 to double
  %sub209 = fsub double %conv208, 5.000000e-01
  store double %sub209, double* %tmpx, align 8
  br label %if.end.218

if.else.210:                                      ; preds = %for.body.204
  %157 = load i32, i32* %x, align 4
  %cmp211 = icmp slt i32 %157, 0
  br i1 %cmp211, label %if.then.213, label %if.else.216

if.then.213:                                      ; preds = %if.else.210
  %158 = load i32, i32* %x, align 4
  %conv214 = sitofp i32 %158 to double
  %add215 = fadd double %conv214, 5.000000e-01
  store double %add215, double* %tmpx, align 8
  br label %if.end.217

if.else.216:                                      ; preds = %if.else.210
  store double 0.000000e+00, double* %tmpx, align 8
  br label %if.end.217

if.end.217:                                       ; preds = %if.else.216, %if.then.213
  br label %if.end.218

if.end.218:                                       ; preds = %if.end.217, %if.then.207
  store i32 0, i32* %y, align 4
  br label %for.cond.219

for.cond.219:                                     ; preds = %for.inc.284, %if.end.218
  %159 = load i32, i32* %y, align 4
  %160 = load i16, i16* %yradius.addr, align 2
  %conv220 = sext i16 %160 to i32
  %add221 = add nsw i32 %conv220, 1
  %cmp222 = icmp slt i32 %159, %add221
  br i1 %cmp222, label %for.body.224, label %for.end.286

for.body.224:                                     ; preds = %for.cond.219
  %161 = load i32, i32* %y, align 4
  %cmp225 = icmp sgt i32 %161, 0
  br i1 %cmp225, label %if.then.227, label %if.else.230

if.then.227:                                      ; preds = %for.body.224
  %162 = load i32, i32* %y, align 4
  %conv228 = sitofp i32 %162 to double
  %sub229 = fsub double %conv228, 5.000000e-01
  store double %sub229, double* %tmpy, align 8
  br label %if.end.238

if.else.230:                                      ; preds = %for.body.224
  %163 = load i32, i32* %y, align 4
  %cmp231 = icmp slt i32 %163, 0
  br i1 %cmp231, label %if.then.233, label %if.else.236

if.then.233:                                      ; preds = %if.else.230
  %164 = load i32, i32* %y, align 4
  %conv234 = sitofp i32 %164 to double
  %add235 = fadd double %conv234, 5.000000e-01
  store double %add235, double* %tmpy, align 8
  br label %if.end.237

if.else.236:                                      ; preds = %if.else.230
  store double 0.000000e+00, double* %tmpy, align 8
  br label %if.end.237

if.end.237:                                       ; preds = %if.else.236, %if.then.233
  br label %if.end.238

if.end.238:                                       ; preds = %if.end.237, %if.then.227
  %165 = load double, double* %tmpy, align 8
  %166 = load double, double* %tmpy, align 8
  %mul239 = fmul double %165, %166
  %167 = load i16, i16* %yradius.addr, align 2
  %conv240 = sext i16 %167 to i32
  %168 = load i16, i16* %yradius.addr, align 2
  %conv241 = sext i16 %168 to i32
  %mul242 = mul nsw i32 %conv240, %conv241
  %conv243 = sitofp i32 %mul242 to double
  %div = fdiv double %mul239, %conv243
  %169 = load double, double* %tmpx, align 8
  %170 = load double, double* %tmpx, align 8
  %mul244 = fmul double %169, %170
  %171 = load i16, i16* %xradius.addr, align 2
  %conv245 = sext i16 %171 to i32
  %172 = load i16, i16* %xradius.addr, align 2
  %conv246 = sext i16 %172 to i32
  %mul247 = mul nsw i32 %conv245, %conv246
  %conv248 = sitofp i32 %mul247 to double
  %div249 = fdiv double %mul244, %conv248
  %add250 = fadd double %div, %div249
  store double %add250, double* %dist, align 8
  %173 = load double, double* %dist, align 8
  %cmp251 = fcmp olt double %173, 1.000000e+00
  br i1 %cmp251, label %if.then.253, label %if.else.262

if.then.253:                                      ; preds = %if.end.238
  %174 = load i32, i32* %feather.addr, align 4
  %tobool254 = icmp ne i32 %174, 0
  br i1 %tobool254, label %if.then.255, label %if.else.260

if.then.255:                                      ; preds = %if.then.253
  %175 = load double, double* %dist, align 8
  %call256 = call double @sqrt(double %175) #1
  %sub257 = fsub double 1.000000e+00, %call256
  %mul258 = fmul double 2.550000e+02, %sub257
  %conv259 = fptoui double %mul258 to i8
  store i8 %conv259, i8* %a, align 1
  br label %if.end.261

if.else.260:                                      ; preds = %if.then.253
  store i8 -1, i8* %a, align 1
  br label %if.end.261

if.end.261:                                       ; preds = %if.else.260, %if.then.255
  br label %if.end.263

if.else.262:                                      ; preds = %if.end.238
  store i8 0, i8* %a, align 1
  br label %if.end.263

if.end.263:                                       ; preds = %if.else.262, %if.end.261
  %176 = load i8, i8* %a, align 1
  %177 = load i32, i32* %y, align 4
  %idxprom264 = sext i32 %177 to i64
  %178 = load i32, i32* %x, align 4
  %idxprom265 = sext i32 %178 to i64
  %179 = load i8**, i8*** %density, align 8
  %arrayidx266 = getelementptr inbounds i8*, i8** %179, i64 %idxprom265
  %180 = load i8*, i8** %arrayidx266, align 8
  %arrayidx267 = getelementptr inbounds i8, i8* %180, i64 %idxprom264
  store i8 %176, i8* %arrayidx267, align 1
  %181 = load i8, i8* %a, align 1
  %182 = load i32, i32* %y, align 4
  %sub268 = sub nsw i32 0, %182
  %idxprom269 = sext i32 %sub268 to i64
  %183 = load i32, i32* %x, align 4
  %idxprom270 = sext i32 %183 to i64
  %184 = load i8**, i8*** %density, align 8
  %arrayidx271 = getelementptr inbounds i8*, i8** %184, i64 %idxprom270
  %185 = load i8*, i8** %arrayidx271, align 8
  %arrayidx272 = getelementptr inbounds i8, i8* %185, i64 %idxprom269
  store i8 %181, i8* %arrayidx272, align 1
  %186 = load i8, i8* %a, align 1
  %187 = load i32, i32* %y, align 4
  %idxprom273 = sext i32 %187 to i64
  %188 = load i32, i32* %x, align 4
  %sub274 = sub nsw i32 0, %188
  %idxprom275 = sext i32 %sub274 to i64
  %189 = load i8**, i8*** %density, align 8
  %arrayidx276 = getelementptr inbounds i8*, i8** %189, i64 %idxprom275
  %190 = load i8*, i8** %arrayidx276, align 8
  %arrayidx277 = getelementptr inbounds i8, i8* %190, i64 %idxprom273
  store i8 %186, i8* %arrayidx277, align 1
  %191 = load i8, i8* %a, align 1
  %192 = load i32, i32* %y, align 4
  %sub278 = sub nsw i32 0, %192
  %idxprom279 = sext i32 %sub278 to i64
  %193 = load i32, i32* %x, align 4
  %sub280 = sub nsw i32 0, %193
  %idxprom281 = sext i32 %sub280 to i64
  %194 = load i8**, i8*** %density, align 8
  %arrayidx282 = getelementptr inbounds i8*, i8** %194, i64 %idxprom281
  %195 = load i8*, i8** %arrayidx282, align 8
  %arrayidx283 = getelementptr inbounds i8, i8* %195, i64 %idxprom279
  store i8 %191, i8* %arrayidx283, align 1
  br label %for.inc.284

for.inc.284:                                      ; preds = %if.end.263
  %196 = load i32, i32* %y, align 4
  %inc285 = add nsw i32 %196, 1
  store i32 %inc285, i32* %y, align 4
  br label %for.cond.219

for.end.286:                                      ; preds = %for.cond.219
  br label %for.inc.287

for.inc.287:                                      ; preds = %for.end.286
  %197 = load i32, i32* %x, align 4
  %inc288 = add nsw i32 %197, 1
  store i32 %inc288, i32* %x, align 4
  br label %for.cond.199

for.end.289:                                      ; preds = %for.cond.199
  %arrayidx290 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 0
  %198 = load i8*, i8** %arrayidx290, align 8
  %199 = load i32, i32* %edge_lock.addr, align 4
  %tobool291 = icmp ne i32 %199, 0
  %cond292 = select i1 %tobool291, i32 255, i32 0
  %200 = trunc i32 %cond292 to i8
  %201 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w293 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %201, i32 0, i32 8
  %202 = load i32, i32* %w293, align 4
  %conv294 = sext i32 %202 to i64
  call void @llvm.memset.p0i8.i64(i8* %198, i8 %200, i64 %conv294, i32 1, i1 false)
  %203 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %204 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %x295 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %204, i32 0, i32 6
  %205 = load i32, i32* %x295, align 4
  %206 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %y296 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %206, i32 0, i32 7
  %207 = load i32, i32* %y296, align 4
  %add297 = add nsw i32 %207, 0
  %208 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w298 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %208, i32 0, i32 8
  %209 = load i32, i32* %w298, align 4
  %arrayidx299 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 1
  %210 = load i8*, i8** %arrayidx299, align 8
  call void @pixel_region_get_row(%struct._PixelRegion* %203, i32 %205, i32 %add297, i32 %209, i8* %210, i32 1)
  %211 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %h300 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %211, i32 0, i32 9
  %212 = load i32, i32* %h300, align 4
  %cmp301 = icmp sgt i32 %212, 1
  br i1 %cmp301, label %if.then.303, label %if.else.309

if.then.303:                                      ; preds = %for.end.289
  %213 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %214 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %x304 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %214, i32 0, i32 6
  %215 = load i32, i32* %x304, align 4
  %216 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %y305 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %216, i32 0, i32 7
  %217 = load i32, i32* %y305, align 4
  %add306 = add nsw i32 %217, 1
  %218 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w307 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %218, i32 0, i32 8
  %219 = load i32, i32* %w307, align 4
  %arrayidx308 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 2
  %220 = load i8*, i8** %arrayidx308, align 8
  call void @pixel_region_get_row(%struct._PixelRegion* %213, i32 %215, i32 %add306, i32 %219, i8* %220, i32 1)
  br label %if.end.314

if.else.309:                                      ; preds = %for.end.289
  %arrayidx310 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 2
  %221 = load i8*, i8** %arrayidx310, align 8
  %arrayidx311 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 1
  %222 = load i8*, i8** %arrayidx311, align 8
  %223 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w312 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %223, i32 0, i32 8
  %224 = load i32, i32* %w312, align 4
  %conv313 = sext i32 %224 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %221, i8* %222, i64 %conv313, i32 1, i1 false)
  br label %if.end.314

if.end.314:                                       ; preds = %if.else.309, %if.then.303
  %225 = load i8**, i8*** %transition, align 8
  %arrayidx315 = getelementptr inbounds i8*, i8** %225, i64 1
  %226 = load i8*, i8** %arrayidx315, align 8
  %arraydecay316 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i32 0
  %227 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w317 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %227, i32 0, i32 8
  %228 = load i32, i32* %w317, align 4
  %229 = load i32, i32* %edge_lock.addr, align 4
  call void @compute_transition(i8* %226, i8** %arraydecay316, i32 %228, i32 %229)
  store i32 1, i32* %y, align 4
  br label %for.cond.318

for.cond.318:                                     ; preds = %for.inc.339, %if.end.314
  %230 = load i32, i32* %y, align 4
  %231 = load i16, i16* %yradius.addr, align 2
  %conv319 = sext i16 %231 to i32
  %cmp320 = icmp slt i32 %230, %conv319
  br i1 %cmp320, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond.318
  %232 = load i32, i32* %y, align 4
  %add322 = add nsw i32 %232, 1
  %233 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %h323 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %233, i32 0, i32 9
  %234 = load i32, i32* %h323, align 4
  %cmp324 = icmp slt i32 %add322, %234
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond.318
  %235 = phi i1 [ false, %for.cond.318 ], [ %cmp324, %land.rhs ]
  br i1 %235, label %for.body.326, label %for.end.341

for.body.326:                                     ; preds = %land.end
  %arraydecay327 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i32 0
  call void @rotate_pointers(i8** %arraydecay327, i32 3)
  %236 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %237 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %x328 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %237, i32 0, i32 6
  %238 = load i32, i32* %x328, align 4
  %239 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %y329 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %239, i32 0, i32 7
  %240 = load i32, i32* %y329, align 4
  %241 = load i32, i32* %y, align 4
  %add330 = add nsw i32 %240, %241
  %add331 = add nsw i32 %add330, 1
  %242 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w332 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %242, i32 0, i32 8
  %243 = load i32, i32* %w332, align 4
  %arrayidx333 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 2
  %244 = load i8*, i8** %arrayidx333, align 8
  call void @pixel_region_get_row(%struct._PixelRegion* %236, i32 %238, i32 %add331, i32 %243, i8* %244, i32 1)
  %245 = load i32, i32* %y, align 4
  %add334 = add nsw i32 %245, 1
  %idxprom335 = sext i32 %add334 to i64
  %246 = load i8**, i8*** %transition, align 8
  %arrayidx336 = getelementptr inbounds i8*, i8** %246, i64 %idxprom335
  %247 = load i8*, i8** %arrayidx336, align 8
  %arraydecay337 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i32 0
  %248 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w338 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %248, i32 0, i32 8
  %249 = load i32, i32* %w338, align 4
  %250 = load i32, i32* %edge_lock.addr, align 4
  call void @compute_transition(i8* %247, i8** %arraydecay337, i32 %249, i32 %250)
  br label %for.inc.339

for.inc.339:                                      ; preds = %for.body.326
  %251 = load i32, i32* %y, align 4
  %inc340 = add nsw i32 %251, 1
  store i32 %inc340, i32* %y, align 4
  br label %for.cond.318

for.end.341:                                      ; preds = %land.end
  store i32 0, i32* %x, align 4
  br label %for.cond.342

for.cond.342:                                     ; preds = %for.inc.372, %for.end.341
  %252 = load i32, i32* %x, align 4
  %253 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w343 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %253, i32 0, i32 8
  %254 = load i32, i32* %w343, align 4
  %cmp344 = icmp slt i32 %252, %254
  br i1 %cmp344, label %for.body.346, label %for.end.374

for.body.346:                                     ; preds = %for.cond.342
  %255 = load i16, i16* %yradius.addr, align 2
  %conv347 = sext i16 %255 to i32
  %add348 = add nsw i32 %conv347, 7
  %sub349 = sub nsw i32 0, %add348
  %conv350 = trunc i32 %sub349 to i16
  %256 = load i32, i32* %x, align 4
  %idxprom351 = sext i32 %256 to i64
  %257 = load i16*, i16** %max, align 8
  %arrayidx352 = getelementptr inbounds i16, i16* %257, i64 %idxprom351
  store i16 %conv350, i16* %arrayidx352, align 2
  store i32 1, i32* %j, align 4
  br label %for.cond.353

for.cond.353:                                     ; preds = %for.inc.369, %for.body.346
  %258 = load i32, i32* %j, align 4
  %259 = load i16, i16* %yradius.addr, align 2
  %conv354 = sext i16 %259 to i32
  %add355 = add nsw i32 %conv354, 1
  %cmp356 = icmp slt i32 %258, %add355
  br i1 %cmp356, label %for.body.358, label %for.end.371

for.body.358:                                     ; preds = %for.cond.353
  %260 = load i32, i32* %x, align 4
  %idxprom359 = sext i32 %260 to i64
  %261 = load i32, i32* %j, align 4
  %idxprom360 = sext i32 %261 to i64
  %262 = load i8**, i8*** %transition, align 8
  %arrayidx361 = getelementptr inbounds i8*, i8** %262, i64 %idxprom360
  %263 = load i8*, i8** %arrayidx361, align 8
  %arrayidx362 = getelementptr inbounds i8, i8* %263, i64 %idxprom359
  %264 = load i8, i8* %arrayidx362, align 1
  %tobool363 = icmp ne i8 %264, 0
  br i1 %tobool363, label %if.then.364, label %if.end.368

if.then.364:                                      ; preds = %for.body.358
  %265 = load i32, i32* %j, align 4
  %conv365 = trunc i32 %265 to i16
  %266 = load i32, i32* %x, align 4
  %idxprom366 = sext i32 %266 to i64
  %267 = load i16*, i16** %max, align 8
  %arrayidx367 = getelementptr inbounds i16, i16* %267, i64 %idxprom366
  store i16 %conv365, i16* %arrayidx367, align 2
  br label %for.end.371

if.end.368:                                       ; preds = %for.body.358
  br label %for.inc.369

for.inc.369:                                      ; preds = %if.end.368
  %268 = load i32, i32* %j, align 4
  %inc370 = add nsw i32 %268, 1
  store i32 %inc370, i32* %j, align 4
  br label %for.cond.353

for.end.371:                                      ; preds = %if.then.364, %for.cond.353
  br label %for.inc.372

for.inc.372:                                      ; preds = %for.end.371
  %269 = load i32, i32* %x, align 4
  %inc373 = add nsw i32 %269, 1
  store i32 %inc373, i32* %x, align 4
  br label %for.cond.342

for.end.374:                                      ; preds = %for.cond.342
  store i32 0, i32* %y, align 4
  br label %for.cond.375

for.cond.375:                                     ; preds = %for.inc.681, %for.end.374
  %270 = load i32, i32* %y, align 4
  %271 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %h376 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %271, i32 0, i32 9
  %272 = load i32, i32* %h376, align 4
  %cmp377 = icmp slt i32 %270, %272
  br i1 %cmp377, label %for.body.379, label %for.end.683

for.body.379:                                     ; preds = %for.cond.375
  %arraydecay380 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i32 0
  call void @rotate_pointers(i8** %arraydecay380, i32 3)
  %273 = load i8**, i8*** %transition, align 8
  %274 = load i16, i16* %yradius.addr, align 2
  %conv381 = sext i16 %274 to i32
  %add382 = add nsw i32 %conv381, 1
  call void @rotate_pointers(i8** %273, i32 %add382)
  %275 = load i32, i32* %y, align 4
  %276 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %h383 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %276, i32 0, i32 9
  %277 = load i32, i32* %h383, align 4
  %278 = load i16, i16* %yradius.addr, align 2
  %conv384 = sext i16 %278 to i32
  %add385 = add nsw i32 %conv384, 1
  %sub386 = sub nsw i32 %277, %add385
  %cmp387 = icmp slt i32 %275, %sub386
  br i1 %cmp387, label %if.then.389, label %if.else.402

if.then.389:                                      ; preds = %for.body.379
  %279 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %280 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %x390 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %280, i32 0, i32 6
  %281 = load i32, i32* %x390, align 4
  %282 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %y391 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %282, i32 0, i32 7
  %283 = load i32, i32* %y391, align 4
  %284 = load i32, i32* %y, align 4
  %add392 = add nsw i32 %283, %284
  %285 = load i16, i16* %yradius.addr, align 2
  %conv393 = sext i16 %285 to i32
  %add394 = add nsw i32 %add392, %conv393
  %add395 = add nsw i32 %add394, 1
  %286 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w396 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %286, i32 0, i32 8
  %287 = load i32, i32* %w396, align 4
  %arrayidx397 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 2
  %288 = load i8*, i8** %arrayidx397, align 8
  call void @pixel_region_get_row(%struct._PixelRegion* %279, i32 %281, i32 %add395, i32 %287, i8* %288, i32 1)
  %289 = load i16, i16* %yradius.addr, align 2
  %idxprom398 = sext i16 %289 to i64
  %290 = load i8**, i8*** %transition, align 8
  %arrayidx399 = getelementptr inbounds i8*, i8** %290, i64 %idxprom398
  %291 = load i8*, i8** %arrayidx399, align 8
  %arraydecay400 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i32 0
  %292 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w401 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %292, i32 0, i32 8
  %293 = load i32, i32* %w401, align 4
  %294 = load i32, i32* %edge_lock.addr, align 4
  call void @compute_transition(i8* %291, i8** %arraydecay400, i32 %293, i32 %294)
  br label %if.end.422

if.else.402:                                      ; preds = %for.body.379
  %295 = load i32, i32* %edge_lock.addr, align 4
  %tobool403 = icmp ne i32 %295, 0
  br i1 %tobool403, label %if.then.404, label %if.else.413

if.then.404:                                      ; preds = %if.else.402
  %296 = load i16, i16* %yradius.addr, align 2
  %idxprom405 = sext i16 %296 to i64
  %297 = load i8**, i8*** %transition, align 8
  %arrayidx406 = getelementptr inbounds i8*, i8** %297, i64 %idxprom405
  %298 = load i8*, i8** %arrayidx406, align 8
  %299 = load i16, i16* %yradius.addr, align 2
  %conv407 = sext i16 %299 to i32
  %sub408 = sub nsw i32 %conv407, 1
  %idxprom409 = sext i32 %sub408 to i64
  %300 = load i8**, i8*** %transition, align 8
  %arrayidx410 = getelementptr inbounds i8*, i8** %300, i64 %idxprom409
  %301 = load i8*, i8** %arrayidx410, align 8
  %302 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w411 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %302, i32 0, i32 8
  %303 = load i32, i32* %w411, align 4
  %conv412 = sext i32 %303 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %298, i8* %301, i64 %conv412, i32 1, i1 false)
  br label %if.end.421

if.else.413:                                      ; preds = %if.else.402
  %arrayidx414 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 2
  %304 = load i8*, i8** %arrayidx414, align 8
  %305 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w415 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %305, i32 0, i32 8
  %306 = load i32, i32* %w415, align 4
  %conv416 = sext i32 %306 to i64
  call void @llvm.memset.p0i8.i64(i8* %304, i8 0, i64 %conv416, i32 1, i1 false)
  %307 = load i16, i16* %yradius.addr, align 2
  %idxprom417 = sext i16 %307 to i64
  %308 = load i8**, i8*** %transition, align 8
  %arrayidx418 = getelementptr inbounds i8*, i8** %308, i64 %idxprom417
  %309 = load i8*, i8** %arrayidx418, align 8
  %arraydecay419 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i32 0
  %310 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w420 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %310, i32 0, i32 8
  %311 = load i32, i32* %w420, align 4
  %312 = load i32, i32* %edge_lock.addr, align 4
  call void @compute_transition(i8* %309, i8** %arraydecay419, i32 %311, i32 %312)
  br label %if.end.421

if.end.421:                                       ; preds = %if.else.413, %if.then.404
  br label %if.end.422

if.end.422:                                       ; preds = %if.end.421, %if.then.389
  store i32 0, i32* %x, align 4
  br label %for.cond.423

for.cond.423:                                     ; preds = %for.inc.520, %if.end.422
  %313 = load i32, i32* %x, align 4
  %314 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w424 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %314, i32 0, i32 8
  %315 = load i32, i32* %w424, align 4
  %cmp425 = icmp slt i32 %313, %315
  br i1 %cmp425, label %for.body.427, label %for.end.522

for.body.427:                                     ; preds = %for.cond.423
  %316 = load i32, i32* %x, align 4
  %idxprom428 = sext i32 %316 to i64
  %317 = load i16*, i16** %max, align 8
  %arrayidx429 = getelementptr inbounds i16, i16* %317, i64 %idxprom428
  %318 = load i16, i16* %arrayidx429, align 2
  %conv430 = sext i16 %318 to i32
  %cmp431 = icmp slt i32 %conv430, 1
  br i1 %cmp431, label %if.then.433, label %if.else.499

if.then.433:                                      ; preds = %for.body.427
  %319 = load i32, i32* %x, align 4
  %idxprom434 = sext i32 %319 to i64
  %320 = load i16*, i16** %max, align 8
  %arrayidx435 = getelementptr inbounds i16, i16* %320, i64 %idxprom434
  %321 = load i16, i16* %arrayidx435, align 2
  %conv436 = sext i16 %321 to i32
  %322 = load i16, i16* %yradius.addr, align 2
  %conv437 = sext i16 %322 to i32
  %sub438 = sub nsw i32 0, %conv437
  %cmp439 = icmp sle i32 %conv436, %sub438
  br i1 %cmp439, label %if.then.441, label %if.else.454

if.then.441:                                      ; preds = %if.then.433
  %323 = load i32, i32* %x, align 4
  %idxprom442 = sext i32 %323 to i64
  %324 = load i16, i16* %yradius.addr, align 2
  %idxprom443 = sext i16 %324 to i64
  %325 = load i8**, i8*** %transition, align 8
  %arrayidx444 = getelementptr inbounds i8*, i8** %325, i64 %idxprom443
  %326 = load i8*, i8** %arrayidx444, align 8
  %arrayidx445 = getelementptr inbounds i8, i8* %326, i64 %idxprom442
  %327 = load i8, i8* %arrayidx445, align 1
  %tobool446 = icmp ne i8 %327, 0
  br i1 %tobool446, label %if.then.447, label %if.else.450

if.then.447:                                      ; preds = %if.then.441
  %328 = load i16, i16* %yradius.addr, align 2
  %329 = load i32, i32* %x, align 4
  %idxprom448 = sext i32 %329 to i64
  %330 = load i16*, i16** %max, align 8
  %arrayidx449 = getelementptr inbounds i16, i16* %330, i64 %idxprom448
  store i16 %328, i16* %arrayidx449, align 2
  br label %if.end.453

if.else.450:                                      ; preds = %if.then.441
  %331 = load i32, i32* %x, align 4
  %idxprom451 = sext i32 %331 to i64
  %332 = load i16*, i16** %max, align 8
  %arrayidx452 = getelementptr inbounds i16, i16* %332, i64 %idxprom451
  %333 = load i16, i16* %arrayidx452, align 2
  %dec = add i16 %333, -1
  store i16 %dec, i16* %arrayidx452, align 2
  br label %if.end.453

if.end.453:                                       ; preds = %if.else.450, %if.then.447
  br label %if.end.498

if.else.454:                                      ; preds = %if.then.433
  %334 = load i32, i32* %x, align 4
  %idxprom455 = sext i32 %334 to i64
  %335 = load i32, i32* %x, align 4
  %idxprom456 = sext i32 %335 to i64
  %336 = load i16*, i16** %max, align 8
  %arrayidx457 = getelementptr inbounds i16, i16* %336, i64 %idxprom456
  %337 = load i16, i16* %arrayidx457, align 2
  %conv458 = sext i16 %337 to i32
  %sub459 = sub nsw i32 0, %conv458
  %idxprom460 = sext i32 %sub459 to i64
  %338 = load i8**, i8*** %transition, align 8
  %arrayidx461 = getelementptr inbounds i8*, i8** %338, i64 %idxprom460
  %339 = load i8*, i8** %arrayidx461, align 8
  %arrayidx462 = getelementptr inbounds i8, i8* %339, i64 %idxprom455
  %340 = load i8, i8* %arrayidx462, align 1
  %tobool463 = icmp ne i8 %340, 0
  br i1 %tobool463, label %if.then.464, label %if.else.472

if.then.464:                                      ; preds = %if.else.454
  %341 = load i32, i32* %x, align 4
  %idxprom465 = sext i32 %341 to i64
  %342 = load i16*, i16** %max, align 8
  %arrayidx466 = getelementptr inbounds i16, i16* %342, i64 %idxprom465
  %343 = load i16, i16* %arrayidx466, align 2
  %conv467 = sext i16 %343 to i32
  %sub468 = sub nsw i32 0, %conv467
  %conv469 = trunc i32 %sub468 to i16
  %344 = load i32, i32* %x, align 4
  %idxprom470 = sext i32 %344 to i64
  %345 = load i16*, i16** %max, align 8
  %arrayidx471 = getelementptr inbounds i16, i16* %345, i64 %idxprom470
  store i16 %conv469, i16* %arrayidx471, align 2
  br label %if.end.497

if.else.472:                                      ; preds = %if.else.454
  %346 = load i32, i32* %x, align 4
  %idxprom473 = sext i32 %346 to i64
  %347 = load i32, i32* %x, align 4
  %idxprom474 = sext i32 %347 to i64
  %348 = load i16*, i16** %max, align 8
  %arrayidx475 = getelementptr inbounds i16, i16* %348, i64 %idxprom474
  %349 = load i16, i16* %arrayidx475, align 2
  %conv476 = sext i16 %349 to i32
  %sub477 = sub nsw i32 0, %conv476
  %add478 = add nsw i32 %sub477, 1
  %idxprom479 = sext i32 %add478 to i64
  %350 = load i8**, i8*** %transition, align 8
  %arrayidx480 = getelementptr inbounds i8*, i8** %350, i64 %idxprom479
  %351 = load i8*, i8** %arrayidx480, align 8
  %arrayidx481 = getelementptr inbounds i8, i8* %351, i64 %idxprom473
  %352 = load i8, i8* %arrayidx481, align 1
  %tobool482 = icmp ne i8 %352, 0
  br i1 %tobool482, label %if.then.483, label %if.else.492

if.then.483:                                      ; preds = %if.else.472
  %353 = load i32, i32* %x, align 4
  %idxprom484 = sext i32 %353 to i64
  %354 = load i16*, i16** %max, align 8
  %arrayidx485 = getelementptr inbounds i16, i16* %354, i64 %idxprom484
  %355 = load i16, i16* %arrayidx485, align 2
  %conv486 = sext i16 %355 to i32
  %sub487 = sub nsw i32 0, %conv486
  %add488 = add nsw i32 %sub487, 1
  %conv489 = trunc i32 %add488 to i16
  %356 = load i32, i32* %x, align 4
  %idxprom490 = sext i32 %356 to i64
  %357 = load i16*, i16** %max, align 8
  %arrayidx491 = getelementptr inbounds i16, i16* %357, i64 %idxprom490
  store i16 %conv489, i16* %arrayidx491, align 2
  br label %if.end.496

if.else.492:                                      ; preds = %if.else.472
  %358 = load i32, i32* %x, align 4
  %idxprom493 = sext i32 %358 to i64
  %359 = load i16*, i16** %max, align 8
  %arrayidx494 = getelementptr inbounds i16, i16* %359, i64 %idxprom493
  %360 = load i16, i16* %arrayidx494, align 2
  %dec495 = add i16 %360, -1
  store i16 %dec495, i16* %arrayidx494, align 2
  br label %if.end.496

if.end.496:                                       ; preds = %if.else.492, %if.then.483
  br label %if.end.497

if.end.497:                                       ; preds = %if.end.496, %if.then.464
  br label %if.end.498

if.end.498:                                       ; preds = %if.end.497, %if.end.453
  br label %if.end.503

if.else.499:                                      ; preds = %for.body.427
  %361 = load i32, i32* %x, align 4
  %idxprom500 = sext i32 %361 to i64
  %362 = load i16*, i16** %max, align 8
  %arrayidx501 = getelementptr inbounds i16, i16* %362, i64 %idxprom500
  %363 = load i16, i16* %arrayidx501, align 2
  %dec502 = add i16 %363, -1
  store i16 %dec502, i16* %arrayidx501, align 2
  br label %if.end.503

if.end.503:                                       ; preds = %if.else.499, %if.end.498
  %364 = load i32, i32* %x, align 4
  %idxprom504 = sext i32 %364 to i64
  %365 = load i16*, i16** %max, align 8
  %arrayidx505 = getelementptr inbounds i16, i16* %365, i64 %idxprom504
  %366 = load i16, i16* %arrayidx505, align 2
  %conv506 = sext i16 %366 to i32
  %367 = load i16, i16* %yradius.addr, align 2
  %conv507 = sext i16 %367 to i32
  %sub508 = sub nsw i32 0, %conv507
  %sub509 = sub nsw i32 %sub508, 1
  %cmp510 = icmp slt i32 %conv506, %sub509
  br i1 %cmp510, label %if.then.512, label %if.end.519

if.then.512:                                      ; preds = %if.end.503
  %368 = load i16, i16* %yradius.addr, align 2
  %conv513 = sext i16 %368 to i32
  %sub514 = sub nsw i32 0, %conv513
  %sub515 = sub nsw i32 %sub514, 1
  %conv516 = trunc i32 %sub515 to i16
  %369 = load i32, i32* %x, align 4
  %idxprom517 = sext i32 %369 to i64
  %370 = load i16*, i16** %max, align 8
  %arrayidx518 = getelementptr inbounds i16, i16* %370, i64 %idxprom517
  store i16 %conv516, i16* %arrayidx518, align 2
  br label %if.end.519

if.end.519:                                       ; preds = %if.then.512, %if.end.503
  br label %for.inc.520

for.inc.520:                                      ; preds = %if.end.519
  %371 = load i32, i32* %x, align 4
  %inc521 = add nsw i32 %371, 1
  store i32 %inc521, i32* %x, align 4
  br label %for.cond.423

for.end.522:                                      ; preds = %for.cond.423
  store i16 1, i16* %last_index, align 2
  store i32 0, i32* %x, align 4
  br label %for.cond.523

for.cond.523:                                     ; preds = %for.inc.674, %for.end.522
  %372 = load i32, i32* %x, align 4
  %373 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w524 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %373, i32 0, i32 8
  %374 = load i32, i32* %w524, align 4
  %cmp525 = icmp slt i32 %372, %374
  br i1 %cmp525, label %for.body.527, label %for.end.676

for.body.527:                                     ; preds = %for.cond.523
  %375 = load i16, i16* %last_index, align 2
  %dec528 = add i16 %375, -1
  store i16 %dec528, i16* %last_index, align 2
  %376 = load i16, i16* %last_index, align 2
  %conv529 = sext i16 %376 to i32
  %cmp530 = icmp sge i32 %conv529, 0
  br i1 %cmp530, label %if.then.532, label %if.else.581

if.then.532:                                      ; preds = %for.body.527
  store i8 0, i8* %last_max, align 1
  %377 = load i16, i16* %xradius.addr, align 2
  %conv533 = sext i16 %377 to i32
  store i32 %conv533, i32* %i, align 4
  br label %for.cond.534

for.cond.534:                                     ; preds = %for.inc.576, %if.then.532
  %378 = load i32, i32* %i, align 4
  %cmp535 = icmp sge i32 %378, 0
  br i1 %cmp535, label %for.body.537, label %for.end.578

for.body.537:                                     ; preds = %for.cond.534
  %379 = load i32, i32* %x, align 4
  %380 = load i32, i32* %i, align 4
  %add538 = add nsw i32 %379, %380
  %idxprom539 = sext i32 %add538 to i64
  %381 = load i16*, i16** %max, align 8
  %arrayidx540 = getelementptr inbounds i16, i16* %381, i64 %idxprom539
  %382 = load i16, i16* %arrayidx540, align 2
  %conv541 = sext i16 %382 to i32
  %383 = load i16, i16* %yradius.addr, align 2
  %conv542 = sext i16 %383 to i32
  %cmp543 = icmp sle i32 %conv541, %conv542
  br i1 %cmp543, label %land.lhs.true.545, label %if.end.575

land.lhs.true.545:                                ; preds = %for.body.537
  %384 = load i32, i32* %x, align 4
  %385 = load i32, i32* %i, align 4
  %add546 = add nsw i32 %384, %385
  %idxprom547 = sext i32 %add546 to i64
  %386 = load i16*, i16** %max, align 8
  %arrayidx548 = getelementptr inbounds i16, i16* %386, i64 %idxprom547
  %387 = load i16, i16* %arrayidx548, align 2
  %conv549 = sext i16 %387 to i32
  %388 = load i16, i16* %yradius.addr, align 2
  %conv550 = sext i16 %388 to i32
  %sub551 = sub nsw i32 0, %conv550
  %cmp552 = icmp sge i32 %conv549, %sub551
  br i1 %cmp552, label %land.lhs.true.554, label %if.end.575

land.lhs.true.554:                                ; preds = %land.lhs.true.545
  %389 = load i32, i32* %x, align 4
  %390 = load i32, i32* %i, align 4
  %add555 = add nsw i32 %389, %390
  %idxprom556 = sext i32 %add555 to i64
  %391 = load i16*, i16** %max, align 8
  %arrayidx557 = getelementptr inbounds i16, i16* %391, i64 %idxprom556
  %392 = load i16, i16* %arrayidx557, align 2
  %idxprom558 = sext i16 %392 to i64
  %393 = load i32, i32* %i, align 4
  %idxprom559 = sext i32 %393 to i64
  %394 = load i8**, i8*** %density, align 8
  %arrayidx560 = getelementptr inbounds i8*, i8** %394, i64 %idxprom559
  %395 = load i8*, i8** %arrayidx560, align 8
  %arrayidx561 = getelementptr inbounds i8, i8* %395, i64 %idxprom558
  %396 = load i8, i8* %arrayidx561, align 1
  %conv562 = zext i8 %396 to i32
  %397 = load i8, i8* %last_max, align 1
  %conv563 = zext i8 %397 to i32
  %cmp564 = icmp sgt i32 %conv562, %conv563
  br i1 %cmp564, label %if.then.566, label %if.end.575

if.then.566:                                      ; preds = %land.lhs.true.554
  %398 = load i32, i32* %x, align 4
  %399 = load i32, i32* %i, align 4
  %add567 = add nsw i32 %398, %399
  %idxprom568 = sext i32 %add567 to i64
  %400 = load i16*, i16** %max, align 8
  %arrayidx569 = getelementptr inbounds i16, i16* %400, i64 %idxprom568
  %401 = load i16, i16* %arrayidx569, align 2
  %idxprom570 = sext i16 %401 to i64
  %402 = load i32, i32* %i, align 4
  %idxprom571 = sext i32 %402 to i64
  %403 = load i8**, i8*** %density, align 8
  %arrayidx572 = getelementptr inbounds i8*, i8** %403, i64 %idxprom571
  %404 = load i8*, i8** %arrayidx572, align 8
  %arrayidx573 = getelementptr inbounds i8, i8* %404, i64 %idxprom570
  %405 = load i8, i8* %arrayidx573, align 1
  store i8 %405, i8* %last_max, align 1
  %406 = load i32, i32* %i, align 4
  %conv574 = trunc i32 %406 to i16
  store i16 %conv574, i16* %last_index, align 2
  br label %if.end.575

if.end.575:                                       ; preds = %if.then.566, %land.lhs.true.554, %land.lhs.true.545, %for.body.537
  br label %for.inc.576

for.inc.576:                                      ; preds = %if.end.575
  %407 = load i32, i32* %i, align 4
  %dec577 = add nsw i32 %407, -1
  store i32 %dec577, i32* %i, align 4
  br label %for.cond.534

for.end.578:                                      ; preds = %for.cond.534
  %408 = load i8, i8* %last_max, align 1
  %409 = load i32, i32* %x, align 4
  %idxprom579 = sext i32 %409 to i64
  %410 = load i8*, i8** %out, align 8
  %arrayidx580 = getelementptr inbounds i8, i8* %410, i64 %idxprom579
  store i8 %408, i8* %arrayidx580, align 1
  br label %if.end.632

if.else.581:                                      ; preds = %for.body.527
  store i8 0, i8* %last_max, align 1
  %411 = load i16, i16* %xradius.addr, align 2
  %conv582 = sext i16 %411 to i32
  store i32 %conv582, i32* %i, align 4
  br label %for.cond.583

for.cond.583:                                     ; preds = %for.inc.627, %if.else.581
  %412 = load i32, i32* %i, align 4
  %413 = load i16, i16* %xradius.addr, align 2
  %conv584 = sext i16 %413 to i32
  %sub585 = sub nsw i32 0, %conv584
  %cmp586 = icmp sge i32 %412, %sub585
  br i1 %cmp586, label %for.body.588, label %for.end.629

for.body.588:                                     ; preds = %for.cond.583
  %414 = load i32, i32* %x, align 4
  %415 = load i32, i32* %i, align 4
  %add589 = add nsw i32 %414, %415
  %idxprom590 = sext i32 %add589 to i64
  %416 = load i16*, i16** %max, align 8
  %arrayidx591 = getelementptr inbounds i16, i16* %416, i64 %idxprom590
  %417 = load i16, i16* %arrayidx591, align 2
  %conv592 = sext i16 %417 to i32
  %418 = load i16, i16* %yradius.addr, align 2
  %conv593 = sext i16 %418 to i32
  %cmp594 = icmp sle i32 %conv592, %conv593
  br i1 %cmp594, label %land.lhs.true.596, label %if.end.626

land.lhs.true.596:                                ; preds = %for.body.588
  %419 = load i32, i32* %x, align 4
  %420 = load i32, i32* %i, align 4
  %add597 = add nsw i32 %419, %420
  %idxprom598 = sext i32 %add597 to i64
  %421 = load i16*, i16** %max, align 8
  %arrayidx599 = getelementptr inbounds i16, i16* %421, i64 %idxprom598
  %422 = load i16, i16* %arrayidx599, align 2
  %conv600 = sext i16 %422 to i32
  %423 = load i16, i16* %yradius.addr, align 2
  %conv601 = sext i16 %423 to i32
  %sub602 = sub nsw i32 0, %conv601
  %cmp603 = icmp sge i32 %conv600, %sub602
  br i1 %cmp603, label %land.lhs.true.605, label %if.end.626

land.lhs.true.605:                                ; preds = %land.lhs.true.596
  %424 = load i32, i32* %x, align 4
  %425 = load i32, i32* %i, align 4
  %add606 = add nsw i32 %424, %425
  %idxprom607 = sext i32 %add606 to i64
  %426 = load i16*, i16** %max, align 8
  %arrayidx608 = getelementptr inbounds i16, i16* %426, i64 %idxprom607
  %427 = load i16, i16* %arrayidx608, align 2
  %idxprom609 = sext i16 %427 to i64
  %428 = load i32, i32* %i, align 4
  %idxprom610 = sext i32 %428 to i64
  %429 = load i8**, i8*** %density, align 8
  %arrayidx611 = getelementptr inbounds i8*, i8** %429, i64 %idxprom610
  %430 = load i8*, i8** %arrayidx611, align 8
  %arrayidx612 = getelementptr inbounds i8, i8* %430, i64 %idxprom609
  %431 = load i8, i8* %arrayidx612, align 1
  %conv613 = zext i8 %431 to i32
  %432 = load i8, i8* %last_max, align 1
  %conv614 = zext i8 %432 to i32
  %cmp615 = icmp sgt i32 %conv613, %conv614
  br i1 %cmp615, label %if.then.617, label %if.end.626

if.then.617:                                      ; preds = %land.lhs.true.605
  %433 = load i32, i32* %x, align 4
  %434 = load i32, i32* %i, align 4
  %add618 = add nsw i32 %433, %434
  %idxprom619 = sext i32 %add618 to i64
  %435 = load i16*, i16** %max, align 8
  %arrayidx620 = getelementptr inbounds i16, i16* %435, i64 %idxprom619
  %436 = load i16, i16* %arrayidx620, align 2
  %idxprom621 = sext i16 %436 to i64
  %437 = load i32, i32* %i, align 4
  %idxprom622 = sext i32 %437 to i64
  %438 = load i8**, i8*** %density, align 8
  %arrayidx623 = getelementptr inbounds i8*, i8** %438, i64 %idxprom622
  %439 = load i8*, i8** %arrayidx623, align 8
  %arrayidx624 = getelementptr inbounds i8, i8* %439, i64 %idxprom621
  %440 = load i8, i8* %arrayidx624, align 1
  store i8 %440, i8* %last_max, align 1
  %441 = load i32, i32* %i, align 4
  %conv625 = trunc i32 %441 to i16
  store i16 %conv625, i16* %last_index, align 2
  br label %if.end.626

if.end.626:                                       ; preds = %if.then.617, %land.lhs.true.605, %land.lhs.true.596, %for.body.588
  br label %for.inc.627

for.inc.627:                                      ; preds = %if.end.626
  %442 = load i32, i32* %i, align 4
  %dec628 = add nsw i32 %442, -1
  store i32 %dec628, i32* %i, align 4
  br label %for.cond.583

for.end.629:                                      ; preds = %for.cond.583
  %443 = load i8, i8* %last_max, align 1
  %444 = load i32, i32* %x, align 4
  %idxprom630 = sext i32 %444 to i64
  %445 = load i8*, i8** %out, align 8
  %arrayidx631 = getelementptr inbounds i8, i8* %445, i64 %idxprom630
  store i8 %443, i8* %arrayidx631, align 1
  br label %if.end.632

if.end.632:                                       ; preds = %for.end.629, %for.end.578
  %446 = load i8, i8* %last_max, align 1
  %conv633 = zext i8 %446 to i32
  %cmp634 = icmp eq i32 %conv633, 0
  br i1 %cmp634, label %if.then.636, label %if.end.673

if.then.636:                                      ; preds = %if.end.632
  %447 = load i32, i32* %x, align 4
  %add637 = add nsw i32 %447, 1
  store i32 %add637, i32* %i, align 4
  br label %for.cond.638

for.cond.638:                                     ; preds = %for.inc.652, %if.then.636
  %448 = load i32, i32* %i, align 4
  %449 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w639 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %449, i32 0, i32 8
  %450 = load i32, i32* %w639, align 4
  %cmp640 = icmp slt i32 %448, %450
  br i1 %cmp640, label %for.body.642, label %for.end.654

for.body.642:                                     ; preds = %for.cond.638
  %451 = load i32, i32* %i, align 4
  %idxprom643 = sext i32 %451 to i64
  %452 = load i16*, i16** %max, align 8
  %arrayidx644 = getelementptr inbounds i16, i16* %452, i64 %idxprom643
  %453 = load i16, i16* %arrayidx644, align 2
  %conv645 = sext i16 %453 to i32
  %454 = load i16, i16* %yradius.addr, align 2
  %conv646 = sext i16 %454 to i32
  %sub647 = sub nsw i32 0, %conv646
  %cmp648 = icmp sge i32 %conv645, %sub647
  br i1 %cmp648, label %if.then.650, label %if.end.651

if.then.650:                                      ; preds = %for.body.642
  br label %for.end.654

if.end.651:                                       ; preds = %for.body.642
  br label %for.inc.652

for.inc.652:                                      ; preds = %if.end.651
  %455 = load i32, i32* %i, align 4
  %inc653 = add nsw i32 %455, 1
  store i32 %inc653, i32* %i, align 4
  br label %for.cond.638

for.end.654:                                      ; preds = %if.then.650, %for.cond.638
  %456 = load i32, i32* %i, align 4
  %457 = load i32, i32* %x, align 4
  %sub655 = sub nsw i32 %456, %457
  %458 = load i16, i16* %xradius.addr, align 2
  %conv656 = sext i16 %458 to i32
  %cmp657 = icmp sgt i32 %sub655, %conv656
  br i1 %cmp657, label %if.then.659, label %if.end.672

if.then.659:                                      ; preds = %for.end.654
  br label %for.cond.660

for.cond.660:                                     ; preds = %for.inc.668, %if.then.659
  %459 = load i32, i32* %x, align 4
  %460 = load i32, i32* %i, align 4
  %461 = load i16, i16* %xradius.addr, align 2
  %conv661 = sext i16 %461 to i32
  %sub662 = sub nsw i32 %460, %conv661
  %cmp663 = icmp slt i32 %459, %sub662
  br i1 %cmp663, label %for.body.665, label %for.end.670

for.body.665:                                     ; preds = %for.cond.660
  %462 = load i32, i32* %x, align 4
  %idxprom666 = sext i32 %462 to i64
  %463 = load i8*, i8** %out, align 8
  %arrayidx667 = getelementptr inbounds i8, i8* %463, i64 %idxprom666
  store i8 0, i8* %arrayidx667, align 1
  br label %for.inc.668

for.inc.668:                                      ; preds = %for.body.665
  %464 = load i32, i32* %x, align 4
  %inc669 = add nsw i32 %464, 1
  store i32 %inc669, i32* %x, align 4
  br label %for.cond.660

for.end.670:                                      ; preds = %for.cond.660
  %465 = load i32, i32* %x, align 4
  %dec671 = add nsw i32 %465, -1
  store i32 %dec671, i32* %x, align 4
  br label %if.end.672

if.end.672:                                       ; preds = %for.end.670, %for.end.654
  %466 = load i16, i16* %xradius.addr, align 2
  store i16 %466, i16* %last_index, align 2
  br label %if.end.673

if.end.673:                                       ; preds = %if.end.672, %if.end.632
  br label %for.inc.674

for.inc.674:                                      ; preds = %if.end.673
  %467 = load i32, i32* %x, align 4
  %inc675 = add nsw i32 %467, 1
  store i32 %inc675, i32* %x, align 4
  br label %for.cond.523

for.end.676:                                      ; preds = %for.cond.523
  %468 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %469 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %x677 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %469, i32 0, i32 6
  %470 = load i32, i32* %x677, align 4
  %471 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %y678 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %471, i32 0, i32 7
  %472 = load i32, i32* %y678, align 4
  %473 = load i32, i32* %y, align 4
  %add679 = add nsw i32 %472, %473
  %474 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w680 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %474, i32 0, i32 8
  %475 = load i32, i32* %w680, align 4
  %476 = load i8*, i8** %out, align 8
  call void @pixel_region_set_row(%struct._PixelRegion* %468, i32 %470, i32 %add679, i32 %475, i8* %476)
  br label %for.inc.681

for.inc.681:                                      ; preds = %for.end.676
  %477 = load i32, i32* %y, align 4
  %inc682 = add nsw i32 %477, 1
  store i32 %inc682, i32* %y, align 4
  br label %for.cond.375

for.end.683:                                      ; preds = %for.cond.375
  %478 = load i8*, i8** %out, align 8
  call void @g_free(i8* %478)
  store i32 0, i32* %i, align 4
  br label %for.cond.684

for.cond.684:                                     ; preds = %for.inc.690, %for.end.683
  %479 = load i32, i32* %i, align 4
  %cmp685 = icmp slt i32 %479, 3
  br i1 %cmp685, label %for.body.687, label %for.end.692

for.body.687:                                     ; preds = %for.cond.684
  %480 = load i32, i32* %i, align 4
  %idxprom688 = sext i32 %480 to i64
  %arrayidx689 = getelementptr inbounds [3 x i8*], [3 x i8*]* %buf, i32 0, i64 %idxprom688
  %481 = load i8*, i8** %arrayidx689, align 8
  call void @g_free(i8* %481)
  br label %for.inc.690

for.inc.690:                                      ; preds = %for.body.687
  %482 = load i32, i32* %i, align 4
  %inc691 = add nsw i32 %482, 1
  store i32 %inc691, i32* %i, align 4
  br label %for.cond.684

for.end.692:                                      ; preds = %for.cond.684
  %483 = load i16, i16* %xradius.addr, align 2
  %conv693 = sext i16 %483 to i32
  %484 = load i16*, i16** %max, align 8
  %idx.ext694 = sext i32 %conv693 to i64
  %idx.neg = sub i64 0, %idx.ext694
  %add.ptr695 = getelementptr inbounds i16, i16* %484, i64 %idx.neg
  store i16* %add.ptr695, i16** %max, align 8
  %485 = load i16*, i16** %max, align 8
  %486 = bitcast i16* %485 to i8*
  call void @g_free(i8* %486)
  store i32 0, i32* %i, align 4
  br label %for.cond.696

for.cond.696:                                     ; preds = %for.inc.710, %for.end.692
  %487 = load i32, i32* %i, align 4
  %488 = load i16, i16* %yradius.addr, align 2
  %conv697 = sext i16 %488 to i32
  %add698 = add nsw i32 %conv697, 1
  %cmp699 = icmp slt i32 %487, %add698
  br i1 %cmp699, label %for.body.701, label %for.end.712

for.body.701:                                     ; preds = %for.cond.696
  %489 = load i16, i16* %xradius.addr, align 2
  %conv702 = sext i16 %489 to i32
  %490 = load i32, i32* %i, align 4
  %idxprom703 = sext i32 %490 to i64
  %491 = load i8**, i8*** %transition, align 8
  %arrayidx704 = getelementptr inbounds i8*, i8** %491, i64 %idxprom703
  %492 = load i8*, i8** %arrayidx704, align 8
  %idx.ext705 = sext i32 %conv702 to i64
  %idx.neg706 = sub i64 0, %idx.ext705
  %add.ptr707 = getelementptr inbounds i8, i8* %492, i64 %idx.neg706
  store i8* %add.ptr707, i8** %arrayidx704, align 8
  %493 = load i32, i32* %i, align 4
  %idxprom708 = sext i32 %493 to i64
  %494 = load i8**, i8*** %transition, align 8
  %arrayidx709 = getelementptr inbounds i8*, i8** %494, i64 %idxprom708
  %495 = load i8*, i8** %arrayidx709, align 8
  call void @g_free(i8* %495)
  br label %for.inc.710

for.inc.710:                                      ; preds = %for.body.701
  %496 = load i32, i32* %i, align 4
  %inc711 = add nsw i32 %496, 1
  store i32 %inc711, i32* %i, align 4
  br label %for.cond.696

for.end.712:                                      ; preds = %for.cond.696
  %497 = load i8**, i8*** %transition, align 8
  %498 = bitcast i8** %497 to i8*
  call void @g_free(i8* %498)
  store i32 0, i32* %i, align 4
  br label %for.cond.713

for.cond.713:                                     ; preds = %for.inc.727, %for.end.712
  %499 = load i32, i32* %i, align 4
  %500 = load i16, i16* %xradius.addr, align 2
  %conv714 = sext i16 %500 to i32
  %add715 = add nsw i32 %conv714, 1
  %cmp716 = icmp slt i32 %499, %add715
  br i1 %cmp716, label %for.body.718, label %for.end.729

for.body.718:                                     ; preds = %for.cond.713
  %501 = load i16, i16* %yradius.addr, align 2
  %conv719 = sext i16 %501 to i32
  %502 = load i32, i32* %i, align 4
  %idxprom720 = sext i32 %502 to i64
  %503 = load i8**, i8*** %density, align 8
  %arrayidx721 = getelementptr inbounds i8*, i8** %503, i64 %idxprom720
  %504 = load i8*, i8** %arrayidx721, align 8
  %idx.ext722 = sext i32 %conv719 to i64
  %idx.neg723 = sub i64 0, %idx.ext722
  %add.ptr724 = getelementptr inbounds i8, i8* %504, i64 %idx.neg723
  store i8* %add.ptr724, i8** %arrayidx721, align 8
  %505 = load i32, i32* %i, align 4
  %idxprom725 = sext i32 %505 to i64
  %506 = load i8**, i8*** %density, align 8
  %arrayidx726 = getelementptr inbounds i8*, i8** %506, i64 %idxprom725
  %507 = load i8*, i8** %arrayidx726, align 8
  call void @g_free(i8* %507)
  br label %for.inc.727

for.inc.727:                                      ; preds = %for.body.718
  %508 = load i32, i32* %i, align 4
  %inc728 = add nsw i32 %508, 1
  store i32 %inc728, i32* %i, align 4
  br label %for.cond.713

for.end.729:                                      ; preds = %for.cond.713
  %509 = load i16, i16* %xradius.addr, align 2
  %conv730 = sext i16 %509 to i32
  %510 = load i8**, i8*** %density, align 8
  %idx.ext731 = sext i32 %conv730 to i64
  %idx.neg732 = sub i64 0, %idx.ext731
  %add.ptr733 = getelementptr inbounds i8*, i8** %510, i64 %idx.neg732
  store i8** %add.ptr733, i8*** %density, align 8
  %511 = load i8**, i8*** %density, align 8
  %512 = bitcast i8** %511 to i8*
  call void @g_free(i8* %512)
  br label %return

return:                                           ; preds = %for.end.729, %for.end.94, %if.then.12, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @g_warning(i8* %format, ...) #0 {
entry:
  %format.addr = alloca i8*, align 8
  %args = alloca [1 x %struct.__va_list_tag], align 16
  store i8* %format, i8** %format.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i32 0, i32 0
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %0 = load i8*, i8** %format.addr, align 8
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i32 0, i32 0
  call void @g_logv(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0), i32 16, i8* %0, %struct.__va_list_tag* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i32 0, i32 0
  %arraydecay34 = bitcast %struct.__va_list_tag* %arraydecay3 to i8*
  call void @llvm.va_end(i8* %arraydecay34)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @compute_transition(i8* %transition, i8** %buf, i32 %width, i32 %edge_lock) #0 {
entry:
  %transition.addr = alloca i8*, align 8
  %buf.addr = alloca i8**, align 8
  %width.addr = alloca i32, align 4
  %edge_lock.addr = alloca i32, align 4
  %x = alloca i32, align 4
  store i8* %transition, i8** %transition.addr, align 8
  store i8** %buf, i8*** %buf.addr, align 8
  store i32 %width, i32* %width.addr, align 4
  store i32 %edge_lock, i32* %edge_lock.addr, align 4
  store i32 0, i32* %x, align 4
  %0 = load i32, i32* %width.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end.17

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %buf.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %1, i64 1
  %2 = load i8*, i8** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds i8, i8* %2, i64 0
  %3 = load i8, i8* %arrayidx1, align 1
  %conv = zext i8 %3 to i32
  %cmp2 = icmp sgt i32 %conv, 127
  br i1 %cmp2, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then
  %4 = load i8**, i8*** %buf.addr, align 8
  %arrayidx4 = getelementptr inbounds i8*, i8** %4, i64 0
  %5 = load i8*, i8** %arrayidx4, align 8
  %arrayidx5 = getelementptr inbounds i8, i8* %5, i64 0
  %6 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %6 to i32
  %cmp7 = icmp slt i32 %conv6, 128
  br i1 %cmp7, label %if.then.14, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %7 = load i8**, i8*** %buf.addr, align 8
  %arrayidx9 = getelementptr inbounds i8*, i8** %7, i64 2
  %8 = load i8*, i8** %arrayidx9, align 8
  %arrayidx10 = getelementptr inbounds i8, i8* %8, i64 0
  %9 = load i8, i8* %arrayidx10, align 1
  %conv11 = zext i8 %9 to i32
  %cmp12 = icmp slt i32 %conv11, 128
  br i1 %cmp12, label %if.then.14, label %if.else

if.then.14:                                       ; preds = %lor.lhs.false, %land.lhs.true
  %10 = load i8*, i8** %transition.addr, align 8
  %arrayidx15 = getelementptr inbounds i8, i8* %10, i64 0
  store i8 -1, i8* %arrayidx15, align 1
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false, %if.then
  %11 = load i8*, i8** %transition.addr, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %11, i64 0
  store i8 0, i8* %arrayidx16, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.14
  br label %if.end.239

if.end.17:                                        ; preds = %entry
  %12 = load i8**, i8*** %buf.addr, align 8
  %arrayidx18 = getelementptr inbounds i8*, i8** %12, i64 1
  %13 = load i8*, i8** %arrayidx18, align 8
  %arrayidx19 = getelementptr inbounds i8, i8* %13, i64 0
  %14 = load i8, i8* %arrayidx19, align 1
  %conv20 = zext i8 %14 to i32
  %cmp21 = icmp sgt i32 %conv20, 127
  br i1 %cmp21, label %land.lhs.true.23, label %if.else.67

land.lhs.true.23:                                 ; preds = %if.end.17
  %15 = load i32, i32* %edge_lock.addr, align 4
  %tobool = icmp ne i32 %15, 0
  br i1 %tobool, label %if.then.24, label %if.else.67

if.then.24:                                       ; preds = %land.lhs.true.23
  %16 = load i32, i32* %x, align 4
  %idxprom = sext i32 %16 to i64
  %17 = load i8**, i8*** %buf.addr, align 8
  %arrayidx25 = getelementptr inbounds i8*, i8** %17, i64 0
  %18 = load i8*, i8** %arrayidx25, align 8
  %arrayidx26 = getelementptr inbounds i8, i8* %18, i64 %idxprom
  %19 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %19 to i32
  %cmp28 = icmp slt i32 %conv27, 128
  br i1 %cmp28, label %if.then.60, label %lor.lhs.false.30

lor.lhs.false.30:                                 ; preds = %if.then.24
  %20 = load i32, i32* %x, align 4
  %add = add nsw i32 %20, 1
  %idxprom31 = sext i32 %add to i64
  %21 = load i8**, i8*** %buf.addr, align 8
  %arrayidx32 = getelementptr inbounds i8*, i8** %21, i64 0
  %22 = load i8*, i8** %arrayidx32, align 8
  %arrayidx33 = getelementptr inbounds i8, i8* %22, i64 %idxprom31
  %23 = load i8, i8* %arrayidx33, align 1
  %conv34 = zext i8 %23 to i32
  %cmp35 = icmp slt i32 %conv34, 128
  br i1 %cmp35, label %if.then.60, label %lor.lhs.false.37

lor.lhs.false.37:                                 ; preds = %lor.lhs.false.30
  %24 = load i32, i32* %x, align 4
  %add38 = add nsw i32 %24, 1
  %idxprom39 = sext i32 %add38 to i64
  %25 = load i8**, i8*** %buf.addr, align 8
  %arrayidx40 = getelementptr inbounds i8*, i8** %25, i64 1
  %26 = load i8*, i8** %arrayidx40, align 8
  %arrayidx41 = getelementptr inbounds i8, i8* %26, i64 %idxprom39
  %27 = load i8, i8* %arrayidx41, align 1
  %conv42 = zext i8 %27 to i32
  %cmp43 = icmp slt i32 %conv42, 128
  br i1 %cmp43, label %if.then.60, label %lor.lhs.false.45

lor.lhs.false.45:                                 ; preds = %lor.lhs.false.37
  %28 = load i32, i32* %x, align 4
  %idxprom46 = sext i32 %28 to i64
  %29 = load i8**, i8*** %buf.addr, align 8
  %arrayidx47 = getelementptr inbounds i8*, i8** %29, i64 2
  %30 = load i8*, i8** %arrayidx47, align 8
  %arrayidx48 = getelementptr inbounds i8, i8* %30, i64 %idxprom46
  %31 = load i8, i8* %arrayidx48, align 1
  %conv49 = zext i8 %31 to i32
  %cmp50 = icmp slt i32 %conv49, 128
  br i1 %cmp50, label %if.then.60, label %lor.lhs.false.52

lor.lhs.false.52:                                 ; preds = %lor.lhs.false.45
  %32 = load i32, i32* %x, align 4
  %add53 = add nsw i32 %32, 1
  %idxprom54 = sext i32 %add53 to i64
  %33 = load i8**, i8*** %buf.addr, align 8
  %arrayidx55 = getelementptr inbounds i8*, i8** %33, i64 2
  %34 = load i8*, i8** %arrayidx55, align 8
  %arrayidx56 = getelementptr inbounds i8, i8* %34, i64 %idxprom54
  %35 = load i8, i8* %arrayidx56, align 1
  %conv57 = zext i8 %35 to i32
  %cmp58 = icmp slt i32 %conv57, 128
  br i1 %cmp58, label %if.then.60, label %if.else.63

if.then.60:                                       ; preds = %lor.lhs.false.52, %lor.lhs.false.45, %lor.lhs.false.37, %lor.lhs.false.30, %if.then.24
  %36 = load i32, i32* %x, align 4
  %idxprom61 = sext i32 %36 to i64
  %37 = load i8*, i8** %transition.addr, align 8
  %arrayidx62 = getelementptr inbounds i8, i8* %37, i64 %idxprom61
  store i8 -1, i8* %arrayidx62, align 1
  br label %if.end.66

if.else.63:                                       ; preds = %lor.lhs.false.52
  %38 = load i32, i32* %x, align 4
  %idxprom64 = sext i32 %38 to i64
  %39 = load i8*, i8** %transition.addr, align 8
  %arrayidx65 = getelementptr inbounds i8, i8* %39, i64 %idxprom64
  store i8 0, i8* %arrayidx65, align 1
  br label %if.end.66

if.end.66:                                        ; preds = %if.else.63, %if.then.60
  br label %if.end.82

if.else.67:                                       ; preds = %land.lhs.true.23, %if.end.17
  %40 = load i8**, i8*** %buf.addr, align 8
  %arrayidx68 = getelementptr inbounds i8*, i8** %40, i64 1
  %41 = load i8*, i8** %arrayidx68, align 8
  %arrayidx69 = getelementptr inbounds i8, i8* %41, i64 0
  %42 = load i8, i8* %arrayidx69, align 1
  %conv70 = zext i8 %42 to i32
  %cmp71 = icmp sgt i32 %conv70, 127
  br i1 %cmp71, label %land.lhs.true.73, label %if.else.78

land.lhs.true.73:                                 ; preds = %if.else.67
  %43 = load i32, i32* %edge_lock.addr, align 4
  %tobool74 = icmp ne i32 %43, 0
  br i1 %tobool74, label %if.else.78, label %if.then.75

if.then.75:                                       ; preds = %land.lhs.true.73
  %44 = load i32, i32* %x, align 4
  %idxprom76 = sext i32 %44 to i64
  %45 = load i8*, i8** %transition.addr, align 8
  %arrayidx77 = getelementptr inbounds i8, i8* %45, i64 %idxprom76
  store i8 -1, i8* %arrayidx77, align 1
  br label %if.end.81

if.else.78:                                       ; preds = %land.lhs.true.73, %if.else.67
  %46 = load i32, i32* %x, align 4
  %idxprom79 = sext i32 %46 to i64
  %47 = load i8*, i8** %transition.addr, align 8
  %arrayidx80 = getelementptr inbounds i8, i8* %47, i64 %idxprom79
  store i8 0, i8* %arrayidx80, align 1
  br label %if.end.81

if.end.81:                                        ; preds = %if.else.78, %if.then.75
  br label %if.end.82

if.end.82:                                        ; preds = %if.end.81, %if.end.66
  store i32 1, i32* %x, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.82
  %48 = load i32, i32* %x, align 4
  %49 = load i32, i32* %width.addr, align 4
  %sub = sub nsw i32 %49, 1
  %cmp83 = icmp slt i32 %48, %sub
  br i1 %cmp83, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %50 = load i32, i32* %x, align 4
  %idxprom85 = sext i32 %50 to i64
  %51 = load i8**, i8*** %buf.addr, align 8
  %arrayidx86 = getelementptr inbounds i8*, i8** %51, i64 1
  %52 = load i8*, i8** %arrayidx86, align 8
  %arrayidx87 = getelementptr inbounds i8, i8* %52, i64 %idxprom85
  %53 = load i8, i8* %arrayidx87, align 1
  %conv88 = zext i8 %53 to i32
  %cmp89 = icmp sge i32 %conv88, 128
  br i1 %cmp89, label %if.then.91, label %if.else.160

if.then.91:                                       ; preds = %for.body
  %54 = load i32, i32* %x, align 4
  %sub92 = sub nsw i32 %54, 1
  %idxprom93 = sext i32 %sub92 to i64
  %55 = load i8**, i8*** %buf.addr, align 8
  %arrayidx94 = getelementptr inbounds i8*, i8** %55, i64 0
  %56 = load i8*, i8** %arrayidx94, align 8
  %arrayidx95 = getelementptr inbounds i8, i8* %56, i64 %idxprom93
  %57 = load i8, i8* %arrayidx95, align 1
  %conv96 = zext i8 %57 to i32
  %cmp97 = icmp slt i32 %conv96, 128
  br i1 %cmp97, label %if.then.153, label %lor.lhs.false.99

lor.lhs.false.99:                                 ; preds = %if.then.91
  %58 = load i32, i32* %x, align 4
  %idxprom100 = sext i32 %58 to i64
  %59 = load i8**, i8*** %buf.addr, align 8
  %arrayidx101 = getelementptr inbounds i8*, i8** %59, i64 0
  %60 = load i8*, i8** %arrayidx101, align 8
  %arrayidx102 = getelementptr inbounds i8, i8* %60, i64 %idxprom100
  %61 = load i8, i8* %arrayidx102, align 1
  %conv103 = zext i8 %61 to i32
  %cmp104 = icmp slt i32 %conv103, 128
  br i1 %cmp104, label %if.then.153, label %lor.lhs.false.106

lor.lhs.false.106:                                ; preds = %lor.lhs.false.99
  %62 = load i32, i32* %x, align 4
  %add107 = add nsw i32 %62, 1
  %idxprom108 = sext i32 %add107 to i64
  %63 = load i8**, i8*** %buf.addr, align 8
  %arrayidx109 = getelementptr inbounds i8*, i8** %63, i64 0
  %64 = load i8*, i8** %arrayidx109, align 8
  %arrayidx110 = getelementptr inbounds i8, i8* %64, i64 %idxprom108
  %65 = load i8, i8* %arrayidx110, align 1
  %conv111 = zext i8 %65 to i32
  %cmp112 = icmp slt i32 %conv111, 128
  br i1 %cmp112, label %if.then.153, label %lor.lhs.false.114

lor.lhs.false.114:                                ; preds = %lor.lhs.false.106
  %66 = load i32, i32* %x, align 4
  %sub115 = sub nsw i32 %66, 1
  %idxprom116 = sext i32 %sub115 to i64
  %67 = load i8**, i8*** %buf.addr, align 8
  %arrayidx117 = getelementptr inbounds i8*, i8** %67, i64 1
  %68 = load i8*, i8** %arrayidx117, align 8
  %arrayidx118 = getelementptr inbounds i8, i8* %68, i64 %idxprom116
  %69 = load i8, i8* %arrayidx118, align 1
  %conv119 = zext i8 %69 to i32
  %cmp120 = icmp slt i32 %conv119, 128
  br i1 %cmp120, label %if.then.153, label %lor.lhs.false.122

lor.lhs.false.122:                                ; preds = %lor.lhs.false.114
  %70 = load i32, i32* %x, align 4
  %add123 = add nsw i32 %70, 1
  %idxprom124 = sext i32 %add123 to i64
  %71 = load i8**, i8*** %buf.addr, align 8
  %arrayidx125 = getelementptr inbounds i8*, i8** %71, i64 1
  %72 = load i8*, i8** %arrayidx125, align 8
  %arrayidx126 = getelementptr inbounds i8, i8* %72, i64 %idxprom124
  %73 = load i8, i8* %arrayidx126, align 1
  %conv127 = zext i8 %73 to i32
  %cmp128 = icmp slt i32 %conv127, 128
  br i1 %cmp128, label %if.then.153, label %lor.lhs.false.130

lor.lhs.false.130:                                ; preds = %lor.lhs.false.122
  %74 = load i32, i32* %x, align 4
  %sub131 = sub nsw i32 %74, 1
  %idxprom132 = sext i32 %sub131 to i64
  %75 = load i8**, i8*** %buf.addr, align 8
  %arrayidx133 = getelementptr inbounds i8*, i8** %75, i64 2
  %76 = load i8*, i8** %arrayidx133, align 8
  %arrayidx134 = getelementptr inbounds i8, i8* %76, i64 %idxprom132
  %77 = load i8, i8* %arrayidx134, align 1
  %conv135 = zext i8 %77 to i32
  %cmp136 = icmp slt i32 %conv135, 128
  br i1 %cmp136, label %if.then.153, label %lor.lhs.false.138

lor.lhs.false.138:                                ; preds = %lor.lhs.false.130
  %78 = load i32, i32* %x, align 4
  %idxprom139 = sext i32 %78 to i64
  %79 = load i8**, i8*** %buf.addr, align 8
  %arrayidx140 = getelementptr inbounds i8*, i8** %79, i64 2
  %80 = load i8*, i8** %arrayidx140, align 8
  %arrayidx141 = getelementptr inbounds i8, i8* %80, i64 %idxprom139
  %81 = load i8, i8* %arrayidx141, align 1
  %conv142 = zext i8 %81 to i32
  %cmp143 = icmp slt i32 %conv142, 128
  br i1 %cmp143, label %if.then.153, label %lor.lhs.false.145

lor.lhs.false.145:                                ; preds = %lor.lhs.false.138
  %82 = load i32, i32* %x, align 4
  %add146 = add nsw i32 %82, 1
  %idxprom147 = sext i32 %add146 to i64
  %83 = load i8**, i8*** %buf.addr, align 8
  %arrayidx148 = getelementptr inbounds i8*, i8** %83, i64 2
  %84 = load i8*, i8** %arrayidx148, align 8
  %arrayidx149 = getelementptr inbounds i8, i8* %84, i64 %idxprom147
  %85 = load i8, i8* %arrayidx149, align 1
  %conv150 = zext i8 %85 to i32
  %cmp151 = icmp slt i32 %conv150, 128
  br i1 %cmp151, label %if.then.153, label %if.else.156

if.then.153:                                      ; preds = %lor.lhs.false.145, %lor.lhs.false.138, %lor.lhs.false.130, %lor.lhs.false.122, %lor.lhs.false.114, %lor.lhs.false.106, %lor.lhs.false.99, %if.then.91
  %86 = load i32, i32* %x, align 4
  %idxprom154 = sext i32 %86 to i64
  %87 = load i8*, i8** %transition.addr, align 8
  %arrayidx155 = getelementptr inbounds i8, i8* %87, i64 %idxprom154
  store i8 -1, i8* %arrayidx155, align 1
  br label %if.end.159

if.else.156:                                      ; preds = %lor.lhs.false.145
  %88 = load i32, i32* %x, align 4
  %idxprom157 = sext i32 %88 to i64
  %89 = load i8*, i8** %transition.addr, align 8
  %arrayidx158 = getelementptr inbounds i8, i8* %89, i64 %idxprom157
  store i8 0, i8* %arrayidx158, align 1
  br label %if.end.159

if.end.159:                                       ; preds = %if.else.156, %if.then.153
  br label %if.end.163

if.else.160:                                      ; preds = %for.body
  %90 = load i32, i32* %x, align 4
  %idxprom161 = sext i32 %90 to i64
  %91 = load i8*, i8** %transition.addr, align 8
  %arrayidx162 = getelementptr inbounds i8, i8* %91, i64 %idxprom161
  store i8 0, i8* %arrayidx162, align 1
  br label %if.end.163

if.end.163:                                       ; preds = %if.else.160, %if.end.159
  br label %for.inc

for.inc:                                          ; preds = %if.end.163
  %92 = load i32, i32* %x, align 4
  %inc = add nsw i32 %92, 1
  store i32 %inc, i32* %x, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %93 = load i32, i32* %width.addr, align 4
  %sub164 = sub nsw i32 %93, 1
  %idxprom165 = sext i32 %sub164 to i64
  %94 = load i8**, i8*** %buf.addr, align 8
  %arrayidx166 = getelementptr inbounds i8*, i8** %94, i64 1
  %95 = load i8*, i8** %arrayidx166, align 8
  %arrayidx167 = getelementptr inbounds i8, i8* %95, i64 %idxprom165
  %96 = load i8, i8* %arrayidx167, align 1
  %conv168 = zext i8 %96 to i32
  %cmp169 = icmp sge i32 %conv168, 128
  br i1 %cmp169, label %land.lhs.true.171, label %if.else.220

land.lhs.true.171:                                ; preds = %for.end
  %97 = load i32, i32* %edge_lock.addr, align 4
  %tobool172 = icmp ne i32 %97, 0
  br i1 %tobool172, label %if.then.173, label %if.else.220

if.then.173:                                      ; preds = %land.lhs.true.171
  %98 = load i32, i32* %x, align 4
  %sub174 = sub nsw i32 %98, 1
  %idxprom175 = sext i32 %sub174 to i64
  %99 = load i8**, i8*** %buf.addr, align 8
  %arrayidx176 = getelementptr inbounds i8*, i8** %99, i64 0
  %100 = load i8*, i8** %arrayidx176, align 8
  %arrayidx177 = getelementptr inbounds i8, i8* %100, i64 %idxprom175
  %101 = load i8, i8* %arrayidx177, align 1
  %conv178 = zext i8 %101 to i32
  %cmp179 = icmp slt i32 %conv178, 128
  br i1 %cmp179, label %if.then.211, label %lor.lhs.false.181

lor.lhs.false.181:                                ; preds = %if.then.173
  %102 = load i32, i32* %x, align 4
  %idxprom182 = sext i32 %102 to i64
  %103 = load i8**, i8*** %buf.addr, align 8
  %arrayidx183 = getelementptr inbounds i8*, i8** %103, i64 0
  %104 = load i8*, i8** %arrayidx183, align 8
  %arrayidx184 = getelementptr inbounds i8, i8* %104, i64 %idxprom182
  %105 = load i8, i8* %arrayidx184, align 1
  %conv185 = zext i8 %105 to i32
  %cmp186 = icmp slt i32 %conv185, 128
  br i1 %cmp186, label %if.then.211, label %lor.lhs.false.188

lor.lhs.false.188:                                ; preds = %lor.lhs.false.181
  %106 = load i32, i32* %x, align 4
  %sub189 = sub nsw i32 %106, 1
  %idxprom190 = sext i32 %sub189 to i64
  %107 = load i8**, i8*** %buf.addr, align 8
  %arrayidx191 = getelementptr inbounds i8*, i8** %107, i64 1
  %108 = load i8*, i8** %arrayidx191, align 8
  %arrayidx192 = getelementptr inbounds i8, i8* %108, i64 %idxprom190
  %109 = load i8, i8* %arrayidx192, align 1
  %conv193 = zext i8 %109 to i32
  %cmp194 = icmp slt i32 %conv193, 128
  br i1 %cmp194, label %if.then.211, label %lor.lhs.false.196

lor.lhs.false.196:                                ; preds = %lor.lhs.false.188
  %110 = load i32, i32* %x, align 4
  %sub197 = sub nsw i32 %110, 1
  %idxprom198 = sext i32 %sub197 to i64
  %111 = load i8**, i8*** %buf.addr, align 8
  %arrayidx199 = getelementptr inbounds i8*, i8** %111, i64 2
  %112 = load i8*, i8** %arrayidx199, align 8
  %arrayidx200 = getelementptr inbounds i8, i8* %112, i64 %idxprom198
  %113 = load i8, i8* %arrayidx200, align 1
  %conv201 = zext i8 %113 to i32
  %cmp202 = icmp slt i32 %conv201, 128
  br i1 %cmp202, label %if.then.211, label %lor.lhs.false.204

lor.lhs.false.204:                                ; preds = %lor.lhs.false.196
  %114 = load i32, i32* %x, align 4
  %idxprom205 = sext i32 %114 to i64
  %115 = load i8**, i8*** %buf.addr, align 8
  %arrayidx206 = getelementptr inbounds i8*, i8** %115, i64 2
  %116 = load i8*, i8** %arrayidx206, align 8
  %arrayidx207 = getelementptr inbounds i8, i8* %116, i64 %idxprom205
  %117 = load i8, i8* %arrayidx207, align 1
  %conv208 = zext i8 %117 to i32
  %cmp209 = icmp slt i32 %conv208, 128
  br i1 %cmp209, label %if.then.211, label %if.else.215

if.then.211:                                      ; preds = %lor.lhs.false.204, %lor.lhs.false.196, %lor.lhs.false.188, %lor.lhs.false.181, %if.then.173
  %118 = load i32, i32* %width.addr, align 4
  %sub212 = sub nsw i32 %118, 1
  %idxprom213 = sext i32 %sub212 to i64
  %119 = load i8*, i8** %transition.addr, align 8
  %arrayidx214 = getelementptr inbounds i8, i8* %119, i64 %idxprom213
  store i8 -1, i8* %arrayidx214, align 1
  br label %if.end.219

if.else.215:                                      ; preds = %lor.lhs.false.204
  %120 = load i32, i32* %width.addr, align 4
  %sub216 = sub nsw i32 %120, 1
  %idxprom217 = sext i32 %sub216 to i64
  %121 = load i8*, i8** %transition.addr, align 8
  %arrayidx218 = getelementptr inbounds i8, i8* %121, i64 %idxprom217
  store i8 0, i8* %arrayidx218, align 1
  br label %if.end.219

if.end.219:                                       ; preds = %if.else.215, %if.then.211
  br label %if.end.239

if.else.220:                                      ; preds = %land.lhs.true.171, %for.end
  %122 = load i32, i32* %width.addr, align 4
  %sub221 = sub nsw i32 %122, 1
  %idxprom222 = sext i32 %sub221 to i64
  %123 = load i8**, i8*** %buf.addr, align 8
  %arrayidx223 = getelementptr inbounds i8*, i8** %123, i64 1
  %124 = load i8*, i8** %arrayidx223, align 8
  %arrayidx224 = getelementptr inbounds i8, i8* %124, i64 %idxprom222
  %125 = load i8, i8* %arrayidx224, align 1
  %conv225 = zext i8 %125 to i32
  %cmp226 = icmp sge i32 %conv225, 128
  br i1 %cmp226, label %land.lhs.true.228, label %if.else.234

land.lhs.true.228:                                ; preds = %if.else.220
  %126 = load i32, i32* %edge_lock.addr, align 4
  %tobool229 = icmp ne i32 %126, 0
  br i1 %tobool229, label %if.else.234, label %if.then.230

if.then.230:                                      ; preds = %land.lhs.true.228
  %127 = load i32, i32* %width.addr, align 4
  %sub231 = sub nsw i32 %127, 1
  %idxprom232 = sext i32 %sub231 to i64
  %128 = load i8*, i8** %transition.addr, align 8
  %arrayidx233 = getelementptr inbounds i8, i8* %128, i64 %idxprom232
  store i8 -1, i8* %arrayidx233, align 1
  br label %if.end.238

if.else.234:                                      ; preds = %land.lhs.true.228, %if.else.220
  %129 = load i32, i32* %width.addr, align 4
  %sub235 = sub nsw i32 %129, 1
  %idxprom236 = sext i32 %sub235 to i64
  %130 = load i8*, i8** %transition.addr, align 8
  %arrayidx237 = getelementptr inbounds i8, i8* %130, i64 %idxprom236
  store i8 0, i8* %arrayidx237, align 1
  br label %if.end.238

if.end.238:                                       ; preds = %if.else.234, %if.then.230
  br label %if.end.239

if.end.239:                                       ; preds = %if.end, %if.end.238, %if.end.219
  ret void
}

; Function Attrs: nounwind
declare double @sqrt(double) #4

; Function Attrs: nounwind uwtable
define void @swap_region(%struct._PixelRegion* %src, %struct._PixelRegion* %dest) #0 {
entry:
  %src.addr = alloca %struct._PixelRegion*, align 8
  %dest.addr = alloca %struct._PixelRegion*, align 8
  %pr = alloca i8*, align 8
  %s = alloca i8*, align 8
  %d = alloca i8*, align 8
  %pixels = alloca i32, align 4
  %h = alloca i32, align 4
  store %struct._PixelRegion* %src, %struct._PixelRegion** %src.addr, align 8
  store %struct._PixelRegion* %dest, %struct._PixelRegion** %dest.addr, align 8
  %0 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %1 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %call = call %struct._PixelRegionIterator* (i32, ...) @pixel_regions_register(i32 2, %struct._PixelRegion* %0, %struct._PixelRegion* %1)
  %2 = bitcast %struct._PixelRegionIterator* %call to i8*
  store i8* %2, i8** %pr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i8*, i8** %pr, align 8
  %cmp = icmp ne i8* %3, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %data = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %4, i32 0, i32 0
  %5 = load i8*, i8** %data, align 8
  store i8* %5, i8** %s, align 8
  %6 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %data1 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %6, i32 0, i32 0
  %7 = load i8*, i8** %data1, align 8
  store i8* %7, i8** %d, align 8
  %8 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %8, i32 0, i32 8
  %9 = load i32, i32* %w, align 4
  %10 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %bytes = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %10, i32 0, i32 10
  %11 = load i32, i32* %bytes, align 4
  %mul = mul nsw i32 %9, %11
  store i32 %mul, i32* %pixels, align 4
  %12 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %h2 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %12, i32 0, i32 9
  %13 = load i32, i32* %h2, align 4
  store i32 %13, i32* %h, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body
  %14 = load i32, i32* %h, align 4
  %dec = add nsw i32 %14, -1
  store i32 %dec, i32* %h, align 4
  %tobool = icmp ne i32 %14, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %15 = load i8*, i8** %s, align 8
  %16 = load i8*, i8** %d, align 8
  %17 = load i32, i32* %pixels, align 4
  call void @swap_pixels(i8* %15, i8* %16, i32 %17)
  %18 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %rowstride = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %18, i32 0, i32 5
  %19 = load i32, i32* %rowstride, align 4
  %20 = load i8*, i8** %s, align 8
  %idx.ext = sext i32 %19 to i64
  %add.ptr = getelementptr inbounds i8, i8* %20, i64 %idx.ext
  store i8* %add.ptr, i8** %s, align 8
  %21 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %rowstride3 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %21, i32 0, i32 5
  %22 = load i32, i32* %rowstride3, align 4
  %23 = load i8*, i8** %d, align 8
  %idx.ext4 = sext i32 %22 to i64
  %add.ptr5 = getelementptr inbounds i8, i8* %23, i64 %idx.ext4
  store i8* %add.ptr5, i8** %d, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %24 = load i8*, i8** %pr, align 8
  %25 = bitcast i8* %24 to %struct._PixelRegionIterator*
  %call6 = call %struct._PixelRegionIterator* @pixel_regions_process(%struct._PixelRegionIterator* %25)
  %26 = bitcast %struct._PixelRegionIterator* %call6 to i8*
  store i8* %26, i8** %pr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @apply_mask_to_region(%struct._PixelRegion* %src, %struct._PixelRegion* %mask, i32 %opacity) #0 {
entry:
  %src.addr = alloca %struct._PixelRegion*, align 8
  %mask.addr = alloca %struct._PixelRegion*, align 8
  %opacity.addr = alloca i32, align 4
  store %struct._PixelRegion* %src, %struct._PixelRegion** %src.addr, align 8
  store %struct._PixelRegion* %mask, %struct._PixelRegion** %mask.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  %0 = bitcast i32* %opacity.addr to i8*
  %1 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %2 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  call void (void ()*, i8*, i32, ...) @pixel_regions_process_parallel(void ()* bitcast (void (i32*, %struct._PixelRegion*, %struct._PixelRegion*)* @apply_mask_to_sub_region to void ()*), i8* %0, i32 2, %struct._PixelRegion* %1, %struct._PixelRegion* %2)
  ret void
}

declare void @pixel_regions_process_parallel(void ()*, i8*, i32, ...) #2

; Function Attrs: nounwind uwtable
define internal void @apply_mask_to_sub_region(i32* %opacityp, %struct._PixelRegion* %src, %struct._PixelRegion* %mask) #0 {
entry:
  %opacityp.addr = alloca i32*, align 8
  %src.addr = alloca %struct._PixelRegion*, align 8
  %mask.addr = alloca %struct._PixelRegion*, align 8
  %s = alloca i8*, align 8
  %m = alloca i8*, align 8
  %h = alloca i32, align 4
  %opacity = alloca i32, align 4
  store i32* %opacityp, i32** %opacityp.addr, align 8
  store %struct._PixelRegion* %src, %struct._PixelRegion** %src.addr, align 8
  store %struct._PixelRegion* %mask, %struct._PixelRegion** %mask.addr, align 8
  %0 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %data = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %0, i32 0, i32 0
  %1 = load i8*, i8** %data, align 8
  store i8* %1, i8** %s, align 8
  %2 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %data1 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %2, i32 0, i32 0
  %3 = load i8*, i8** %data1, align 8
  store i8* %3, i8** %m, align 8
  %4 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %h2 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %4, i32 0, i32 9
  %5 = load i32, i32* %h2, align 4
  store i32 %5, i32* %h, align 4
  %6 = load i32*, i32** %opacityp.addr, align 8
  %7 = load i32, i32* %6, align 4
  store i32 %7, i32* %opacity, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %8 = load i32, i32* %h, align 4
  %dec = add nsw i32 %8, -1
  store i32 %dec, i32* %h, align 4
  %tobool = icmp ne i32 %8, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load i8*, i8** %s, align 8
  %10 = load i8*, i8** %m, align 8
  %11 = load i32, i32* %opacity, align 4
  %12 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %12, i32 0, i32 8
  %13 = load i32, i32* %w, align 4
  %14 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %bytes = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %14, i32 0, i32 10
  %15 = load i32, i32* %bytes, align 4
  call void @apply_mask_to_alpha_channel(i8* %9, i8* %10, i32 %11, i32 %13, i32 %15)
  %16 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %rowstride = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %16, i32 0, i32 5
  %17 = load i32, i32* %rowstride, align 4
  %18 = load i8*, i8** %s, align 8
  %idx.ext = sext i32 %17 to i64
  %add.ptr = getelementptr inbounds i8, i8* %18, i64 %idx.ext
  store i8* %add.ptr, i8** %s, align 8
  %19 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %rowstride3 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %19, i32 0, i32 5
  %20 = load i32, i32* %rowstride3, align 4
  %21 = load i8*, i8** %m, align 8
  %idx.ext4 = sext i32 %20 to i64
  %add.ptr5 = getelementptr inbounds i8, i8* %21, i64 %idx.ext4
  store i8* %add.ptr5, i8** %m, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @combine_mask_and_region(%struct._PixelRegion* %src, %struct._PixelRegion* %mask, i32 %opacity, i32 %stipple) #0 {
entry:
  %src.addr = alloca %struct._PixelRegion*, align 8
  %mask.addr = alloca %struct._PixelRegion*, align 8
  %opacity.addr = alloca i32, align 4
  %stipple.addr = alloca i32, align 4
  store %struct._PixelRegion* %src, %struct._PixelRegion** %src.addr, align 8
  store %struct._PixelRegion* %mask, %struct._PixelRegion** %mask.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32 %stipple, i32* %stipple.addr, align 4
  %0 = load i32, i32* %stipple.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = bitcast i32* %opacity.addr to i8*
  %2 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %3 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  call void (void ()*, i8*, i32, ...) @pixel_regions_process_parallel(void ()* bitcast (void (i32*, %struct._PixelRegion*, %struct._PixelRegion*)* @combine_mask_and_sub_region_stipple to void ()*), i8* %1, i32 2, %struct._PixelRegion* %2, %struct._PixelRegion* %3)
  br label %if.end

if.else:                                          ; preds = %entry
  %4 = bitcast i32* %opacity.addr to i8*
  %5 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %6 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  call void (void ()*, i8*, i32, ...) @pixel_regions_process_parallel(void ()* bitcast (void (i32*, %struct._PixelRegion*, %struct._PixelRegion*)* @combine_mask_and_sub_region_stroke to void ()*), i8* %4, i32 2, %struct._PixelRegion* %5, %struct._PixelRegion* %6)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @combine_mask_and_sub_region_stipple(i32* %opacityp, %struct._PixelRegion* %src, %struct._PixelRegion* %mask) #0 {
entry:
  %opacityp.addr = alloca i32*, align 8
  %src.addr = alloca %struct._PixelRegion*, align 8
  %mask.addr = alloca %struct._PixelRegion*, align 8
  %s = alloca i8*, align 8
  %m = alloca i8*, align 8
  %h = alloca i32, align 4
  %opacity = alloca i32, align 4
  store i32* %opacityp, i32** %opacityp.addr, align 8
  store %struct._PixelRegion* %src, %struct._PixelRegion** %src.addr, align 8
  store %struct._PixelRegion* %mask, %struct._PixelRegion** %mask.addr, align 8
  %0 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %data = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %0, i32 0, i32 0
  %1 = load i8*, i8** %data, align 8
  store i8* %1, i8** %s, align 8
  %2 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %data1 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %2, i32 0, i32 0
  %3 = load i8*, i8** %data1, align 8
  store i8* %3, i8** %m, align 8
  %4 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %h2 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %4, i32 0, i32 9
  %5 = load i32, i32* %h2, align 4
  store i32 %5, i32* %h, align 4
  %6 = load i32*, i32** %opacityp.addr, align 8
  %7 = load i32, i32* %6, align 4
  store i32 %7, i32* %opacity, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %8 = load i32, i32* %h, align 4
  %dec = add nsw i32 %8, -1
  store i32 %dec, i32* %h, align 4
  %tobool = icmp ne i32 %8, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load i8*, i8** %s, align 8
  %10 = load i8*, i8** %m, align 8
  %11 = load i32, i32* %opacity, align 4
  %12 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %12, i32 0, i32 8
  %13 = load i32, i32* %w, align 4
  %14 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %bytes = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %14, i32 0, i32 10
  %15 = load i32, i32* %bytes, align 4
  call void @combine_mask_and_alpha_channel_stipple(i8* %9, i8* %10, i32 %11, i32 %13, i32 %15)
  %16 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %rowstride = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %16, i32 0, i32 5
  %17 = load i32, i32* %rowstride, align 4
  %18 = load i8*, i8** %s, align 8
  %idx.ext = sext i32 %17 to i64
  %add.ptr = getelementptr inbounds i8, i8* %18, i64 %idx.ext
  store i8* %add.ptr, i8** %s, align 8
  %19 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %rowstride3 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %19, i32 0, i32 5
  %20 = load i32, i32* %rowstride3, align 4
  %21 = load i8*, i8** %m, align 8
  %idx.ext4 = sext i32 %20 to i64
  %add.ptr5 = getelementptr inbounds i8, i8* %21, i64 %idx.ext4
  store i8* %add.ptr5, i8** %m, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @combine_mask_and_sub_region_stroke(i32* %opacityp, %struct._PixelRegion* %src, %struct._PixelRegion* %mask) #0 {
entry:
  %opacityp.addr = alloca i32*, align 8
  %src.addr = alloca %struct._PixelRegion*, align 8
  %mask.addr = alloca %struct._PixelRegion*, align 8
  %s = alloca i8*, align 8
  %m = alloca i8*, align 8
  %h = alloca i32, align 4
  %opacity = alloca i32, align 4
  store i32* %opacityp, i32** %opacityp.addr, align 8
  store %struct._PixelRegion* %src, %struct._PixelRegion** %src.addr, align 8
  store %struct._PixelRegion* %mask, %struct._PixelRegion** %mask.addr, align 8
  %0 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %data = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %0, i32 0, i32 0
  %1 = load i8*, i8** %data, align 8
  store i8* %1, i8** %s, align 8
  %2 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %data1 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %2, i32 0, i32 0
  %3 = load i8*, i8** %data1, align 8
  store i8* %3, i8** %m, align 8
  %4 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %h2 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %4, i32 0, i32 9
  %5 = load i32, i32* %h2, align 4
  store i32 %5, i32* %h, align 4
  %6 = load i32*, i32** %opacityp.addr, align 8
  %7 = load i32, i32* %6, align 4
  store i32 %7, i32* %opacity, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %8 = load i32, i32* %h, align 4
  %dec = add nsw i32 %8, -1
  store i32 %dec, i32* %h, align 4
  %tobool = icmp ne i32 %8, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load i8*, i8** %s, align 8
  %10 = load i8*, i8** %m, align 8
  %11 = load i32, i32* %opacity, align 4
  %12 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %12, i32 0, i32 8
  %13 = load i32, i32* %w, align 4
  %14 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %bytes = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %14, i32 0, i32 10
  %15 = load i32, i32* %bytes, align 4
  call void @combine_mask_and_alpha_channel_stroke(i8* %9, i8* %10, i32 %11, i32 %13, i32 %15)
  %16 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %rowstride = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %16, i32 0, i32 5
  %17 = load i32, i32* %rowstride, align 4
  %18 = load i8*, i8** %s, align 8
  %idx.ext = sext i32 %17 to i64
  %add.ptr = getelementptr inbounds i8, i8* %18, i64 %idx.ext
  store i8* %add.ptr, i8** %s, align 8
  %19 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %rowstride3 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %19, i32 0, i32 5
  %20 = load i32, i32* %rowstride3, align 4
  %21 = load i8*, i8** %m, align 8
  %idx.ext4 = sext i32 %20 to i64
  %add.ptr5 = getelementptr inbounds i8, i8* %21, i64 %idx.ext4
  store i8* %add.ptr5, i8** %m, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @copy_gray_to_region(%struct._PixelRegion* %src, %struct._PixelRegion* %dest) #0 {
entry:
  %src.addr = alloca %struct._PixelRegion*, align 8
  %dest.addr = alloca %struct._PixelRegion*, align 8
  %pr = alloca i8*, align 8
  %s = alloca i8*, align 8
  %d = alloca i8*, align 8
  %h = alloca i32, align 4
  store %struct._PixelRegion* %src, %struct._PixelRegion** %src.addr, align 8
  store %struct._PixelRegion* %dest, %struct._PixelRegion** %dest.addr, align 8
  %0 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %1 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %call = call %struct._PixelRegionIterator* (i32, ...) @pixel_regions_register(i32 2, %struct._PixelRegion* %0, %struct._PixelRegion* %1)
  %2 = bitcast %struct._PixelRegionIterator* %call to i8*
  store i8* %2, i8** %pr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i8*, i8** %pr, align 8
  %cmp = icmp ne i8* %3, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %data = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %4, i32 0, i32 0
  %5 = load i8*, i8** %data, align 8
  store i8* %5, i8** %s, align 8
  %6 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %data1 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %6, i32 0, i32 0
  %7 = load i8*, i8** %data1, align 8
  store i8* %7, i8** %d, align 8
  %8 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %h2 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %8, i32 0, i32 9
  %9 = load i32, i32* %h2, align 4
  store i32 %9, i32* %h, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body
  %10 = load i32, i32* %h, align 4
  %dec = add nsw i32 %10, -1
  store i32 %dec, i32* %h, align 4
  %tobool = icmp ne i32 %10, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %11 = load i8*, i8** %s, align 8
  %12 = load i8*, i8** %d, align 8
  %13 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %13, i32 0, i32 8
  %14 = load i32, i32* %w, align 4
  %15 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %bytes = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %15, i32 0, i32 10
  %16 = load i32, i32* %bytes, align 4
  call void @copy_gray_to_inten_a_pixels(i8* %11, i8* %12, i32 %14, i32 %16)
  %17 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %rowstride = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %17, i32 0, i32 5
  %18 = load i32, i32* %rowstride, align 4
  %19 = load i8*, i8** %s, align 8
  %idx.ext = sext i32 %18 to i64
  %add.ptr = getelementptr inbounds i8, i8* %19, i64 %idx.ext
  store i8* %add.ptr, i8** %s, align 8
  %20 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %rowstride3 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %20, i32 0, i32 5
  %21 = load i32, i32* %rowstride3, align 4
  %22 = load i8*, i8** %d, align 8
  %idx.ext4 = sext i32 %21 to i64
  %add.ptr5 = getelementptr inbounds i8, i8* %22, i64 %idx.ext4
  store i8* %add.ptr5, i8** %d, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %23 = load i8*, i8** %pr, align 8
  %24 = bitcast i8* %23 to %struct._PixelRegionIterator*
  %call6 = call %struct._PixelRegionIterator* @pixel_regions_process(%struct._PixelRegionIterator* %24)
  %25 = bitcast %struct._PixelRegionIterator* %call6 to i8*
  store i8* %25, i8** %pr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @copy_component(%struct._PixelRegion* %src, %struct._PixelRegion* %dest, i32 %pixel) #0 {
entry:
  %src.addr = alloca %struct._PixelRegion*, align 8
  %dest.addr = alloca %struct._PixelRegion*, align 8
  %pixel.addr = alloca i32, align 4
  %pr = alloca i8*, align 8
  %s = alloca i8*, align 8
  %d = alloca i8*, align 8
  %h = alloca i32, align 4
  store %struct._PixelRegion* %src, %struct._PixelRegion** %src.addr, align 8
  store %struct._PixelRegion* %dest, %struct._PixelRegion** %dest.addr, align 8
  store i32 %pixel, i32* %pixel.addr, align 4
  %0 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %1 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %call = call %struct._PixelRegionIterator* (i32, ...) @pixel_regions_register(i32 2, %struct._PixelRegion* %0, %struct._PixelRegion* %1)
  %2 = bitcast %struct._PixelRegionIterator* %call to i8*
  store i8* %2, i8** %pr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i8*, i8** %pr, align 8
  %cmp = icmp ne i8* %3, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %data = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %4, i32 0, i32 0
  %5 = load i8*, i8** %data, align 8
  store i8* %5, i8** %s, align 8
  %6 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %data1 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %6, i32 0, i32 0
  %7 = load i8*, i8** %data1, align 8
  store i8* %7, i8** %d, align 8
  %8 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %h2 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %8, i32 0, i32 9
  %9 = load i32, i32* %h2, align 4
  store i32 %9, i32* %h, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body
  %10 = load i32, i32* %h, align 4
  %dec = add nsw i32 %10, -1
  store i32 %dec, i32* %h, align 4
  %tobool = icmp ne i32 %10, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %11 = load i8*, i8** %s, align 8
  %12 = load i8*, i8** %d, align 8
  %13 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %13, i32 0, i32 8
  %14 = load i32, i32* %w, align 4
  %15 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %bytes = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %15, i32 0, i32 10
  %16 = load i32, i32* %bytes, align 4
  %17 = load i32, i32* %pixel.addr, align 4
  call void @copy_component_pixels(i8* %11, i8* %12, i32 %14, i32 %16, i32 %17)
  %18 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %rowstride = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %18, i32 0, i32 5
  %19 = load i32, i32* %rowstride, align 4
  %20 = load i8*, i8** %s, align 8
  %idx.ext = sext i32 %19 to i64
  %add.ptr = getelementptr inbounds i8, i8* %20, i64 %idx.ext
  store i8* %add.ptr, i8** %s, align 8
  %21 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %rowstride3 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %21, i32 0, i32 5
  %22 = load i32, i32* %rowstride3, align 4
  %23 = load i8*, i8** %d, align 8
  %idx.ext4 = sext i32 %22 to i64
  %add.ptr5 = getelementptr inbounds i8, i8* %23, i64 %idx.ext4
  store i8* %add.ptr5, i8** %d, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %24 = load i8*, i8** %pr, align 8
  %25 = bitcast i8* %24 to %struct._PixelRegionIterator*
  %call6 = call %struct._PixelRegionIterator* @pixel_regions_process(%struct._PixelRegionIterator* %25)
  %26 = bitcast %struct._PixelRegionIterator* %call6 to i8*
  store i8* %26, i8** %pr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @copy_color(%struct._PixelRegion* %src, %struct._PixelRegion* %dest) #0 {
entry:
  %src.addr = alloca %struct._PixelRegion*, align 8
  %dest.addr = alloca %struct._PixelRegion*, align 8
  %pr = alloca i8*, align 8
  %s = alloca i8*, align 8
  %d = alloca i8*, align 8
  %h = alloca i32, align 4
  store %struct._PixelRegion* %src, %struct._PixelRegion** %src.addr, align 8
  store %struct._PixelRegion* %dest, %struct._PixelRegion** %dest.addr, align 8
  %0 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %1 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %call = call %struct._PixelRegionIterator* (i32, ...) @pixel_regions_register(i32 2, %struct._PixelRegion* %0, %struct._PixelRegion* %1)
  %2 = bitcast %struct._PixelRegionIterator* %call to i8*
  store i8* %2, i8** %pr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i8*, i8** %pr, align 8
  %cmp = icmp ne i8* %3, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %data = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %4, i32 0, i32 0
  %5 = load i8*, i8** %data, align 8
  store i8* %5, i8** %s, align 8
  %6 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %data1 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %6, i32 0, i32 0
  %7 = load i8*, i8** %data1, align 8
  store i8* %7, i8** %d, align 8
  %8 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %h2 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %8, i32 0, i32 9
  %9 = load i32, i32* %h2, align 4
  store i32 %9, i32* %h, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body
  %10 = load i32, i32* %h, align 4
  %dec = add nsw i32 %10, -1
  store i32 %dec, i32* %h, align 4
  %tobool = icmp ne i32 %10, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %11 = load i8*, i8** %s, align 8
  %12 = load i8*, i8** %d, align 8
  %13 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %13, i32 0, i32 8
  %14 = load i32, i32* %w, align 4
  %15 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %bytes = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %15, i32 0, i32 10
  %16 = load i32, i32* %bytes, align 4
  call void @copy_color_pixels(i8* %11, i8* %12, i32 %14, i32 %16)
  %17 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %rowstride = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %17, i32 0, i32 5
  %18 = load i32, i32* %rowstride, align 4
  %19 = load i8*, i8** %s, align 8
  %idx.ext = sext i32 %18 to i64
  %add.ptr = getelementptr inbounds i8, i8* %19, i64 %idx.ext
  store i8* %add.ptr, i8** %s, align 8
  %20 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %rowstride3 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %20, i32 0, i32 5
  %21 = load i32, i32* %rowstride3, align 4
  %22 = load i8*, i8** %d, align 8
  %idx.ext4 = sext i32 %21 to i64
  %add.ptr5 = getelementptr inbounds i8, i8* %22, i64 %idx.ext4
  store i8* %add.ptr5, i8** %d, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %23 = load i8*, i8** %pr, align 8
  %24 = bitcast i8* %23 to %struct._PixelRegionIterator*
  %call6 = call %struct._PixelRegionIterator* @pixel_regions_process(%struct._PixelRegionIterator* %24)
  %25 = bitcast %struct._PixelRegionIterator* %call6 to i8*
  store i8* %25, i8** %pr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @initial_region(%struct._PixelRegion* %src, %struct._PixelRegion* %dest, %struct._PixelRegion* %mask, i8* %data, i32 %opacity, i32 %mode, i32* %affect, i32 %type) #0 {
entry:
  %src.addr = alloca %struct._PixelRegion*, align 8
  %dest.addr = alloca %struct._PixelRegion*, align 8
  %mask.addr = alloca %struct._PixelRegion*, align 8
  %data.addr = alloca i8*, align 8
  %opacity.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %affect.addr = alloca i32*, align 8
  %type.addr = alloca i32, align 4
  %st = alloca %struct.initial_regions_struct, align 8
  store %struct._PixelRegion* %src, %struct._PixelRegion** %src.addr, align 8
  store %struct._PixelRegion* %dest, %struct._PixelRegion** %dest.addr, align 8
  store %struct._PixelRegion* %mask, %struct._PixelRegion** %mask.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32 %mode, i32* %mode.addr, align 4
  store i32* %affect, i32** %affect.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %0 = load i32, i32* %opacity.addr, align 4
  %opacity1 = getelementptr inbounds %struct.initial_regions_struct, %struct.initial_regions_struct* %st, i32 0, i32 0
  store i32 %0, i32* %opacity1, align 4
  %1 = load i32, i32* %mode.addr, align 4
  %mode2 = getelementptr inbounds %struct.initial_regions_struct, %struct.initial_regions_struct* %st, i32 0, i32 1
  store i32 %1, i32* %mode2, align 4
  %2 = load i32*, i32** %affect.addr, align 8
  %affect3 = getelementptr inbounds %struct.initial_regions_struct, %struct.initial_regions_struct* %st, i32 0, i32 2
  store i32* %2, i32** %affect3, align 8
  %3 = load i32, i32* %type.addr, align 4
  %type4 = getelementptr inbounds %struct.initial_regions_struct, %struct.initial_regions_struct* %st, i32 0, i32 3
  store i32 %3, i32* %type4, align 4
  %4 = load i8*, i8** %data.addr, align 8
  %data5 = getelementptr inbounds %struct.initial_regions_struct, %struct.initial_regions_struct* %st, i32 0, i32 4
  store i8* %4, i8** %data5, align 8
  %5 = bitcast %struct.initial_regions_struct* %st to i8*
  %6 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %7 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %8 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  call void (void ()*, i8*, i32, ...) @pixel_regions_process_parallel(void ()* bitcast (void (%struct.initial_regions_struct*, %struct._PixelRegion*, %struct._PixelRegion*, %struct._PixelRegion*)* @initial_sub_region to void ()*), i8* %5, i32 3, %struct._PixelRegion* %6, %struct._PixelRegion* %7, %struct._PixelRegion* %8)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @initial_sub_region(%struct.initial_regions_struct* %st, %struct._PixelRegion* %src, %struct._PixelRegion* %dest, %struct._PixelRegion* %mask) #0 {
entry:
  %st.addr = alloca %struct.initial_regions_struct*, align 8
  %src.addr = alloca %struct._PixelRegion*, align 8
  %dest.addr = alloca %struct._PixelRegion*, align 8
  %mask.addr = alloca %struct._PixelRegion*, align 8
  %h = alloca i32, align 4
  %s = alloca i8*, align 8
  %d = alloca i8*, align 8
  %m = alloca i8*, align 8
  %buf = alloca i8*, align 8
  %data = alloca i8*, align 8
  %opacity = alloca i32, align 4
  %mode = alloca i32, align 4
  %affect = alloca i32*, align 8
  %type = alloca i32, align 4
  %ctx = alloca %struct.GimpCompositeContext, align 8
  %ctx78 = alloca %struct.GimpCompositeContext, align 8
  store %struct.initial_regions_struct* %st, %struct.initial_regions_struct** %st.addr, align 8
  store %struct._PixelRegion* %src, %struct._PixelRegion** %src.addr, align 8
  store %struct._PixelRegion* %dest, %struct._PixelRegion** %dest.addr, align 8
  store %struct._PixelRegion* %mask, %struct._PixelRegion** %mask.addr, align 8
  %0 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %0, i32 0, i32 8
  %1 = load i32, i32* %w, align 4
  %2 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %bytes = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %2, i32 0, i32 10
  %3 = load i32, i32* %bytes, align 4
  %add = add nsw i32 %3, 1
  %mul = mul nsw i32 %1, %add
  %4 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %w1 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %4, i32 0, i32 8
  %5 = load i32, i32* %w1, align 4
  %6 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %bytes2 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %6, i32 0, i32 10
  %7 = load i32, i32* %bytes2, align 4
  %mul3 = mul nsw i32 %5, %7
  %cmp = icmp sgt i32 %mul, %mul3
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %8 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w4 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %8, i32 0, i32 8
  %9 = load i32, i32* %w4, align 4
  %10 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %bytes5 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %10, i32 0, i32 10
  %11 = load i32, i32* %bytes5, align 4
  %add6 = add nsw i32 %11, 1
  %mul7 = mul nsw i32 %9, %add6
  br label %cond.end

cond.false:                                       ; preds = %entry
  %12 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %w8 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %12, i32 0, i32 8
  %13 = load i32, i32* %w8, align 4
  %14 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %bytes9 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %14, i32 0, i32 10
  %15 = load i32, i32* %bytes9, align 4
  %mul10 = mul nsw i32 %13, %15
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul7, %cond.true ], [ %mul10, %cond.false ]
  %conv = sext i32 %cond to i64
  %16 = alloca i8, i64 %conv
  store i8* %16, i8** %buf, align 8
  %17 = load %struct.initial_regions_struct*, %struct.initial_regions_struct** %st.addr, align 8
  %data11 = getelementptr inbounds %struct.initial_regions_struct, %struct.initial_regions_struct* %17, i32 0, i32 4
  %18 = load i8*, i8** %data11, align 8
  store i8* %18, i8** %data, align 8
  %19 = load %struct.initial_regions_struct*, %struct.initial_regions_struct** %st.addr, align 8
  %opacity12 = getelementptr inbounds %struct.initial_regions_struct, %struct.initial_regions_struct* %19, i32 0, i32 0
  %20 = load i32, i32* %opacity12, align 4
  store i32 %20, i32* %opacity, align 4
  %21 = load %struct.initial_regions_struct*, %struct.initial_regions_struct** %st.addr, align 8
  %mode13 = getelementptr inbounds %struct.initial_regions_struct, %struct.initial_regions_struct* %21, i32 0, i32 1
  %22 = load i32, i32* %mode13, align 4
  store i32 %22, i32* %mode, align 4
  %23 = load %struct.initial_regions_struct*, %struct.initial_regions_struct** %st.addr, align 8
  %affect14 = getelementptr inbounds %struct.initial_regions_struct, %struct.initial_regions_struct* %23, i32 0, i32 2
  %24 = load i32*, i32** %affect14, align 8
  store i32* %24, i32** %affect, align 8
  %25 = load %struct.initial_regions_struct*, %struct.initial_regions_struct** %st.addr, align 8
  %type15 = getelementptr inbounds %struct.initial_regions_struct, %struct.initial_regions_struct* %25, i32 0, i32 3
  %26 = load i32, i32* %type15, align 4
  store i32 %26, i32* %type, align 4
  %27 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %data16 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %27, i32 0, i32 0
  %28 = load i8*, i8** %data16, align 8
  store i8* %28, i8** %s, align 8
  %29 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %data17 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %29, i32 0, i32 0
  %30 = load i8*, i8** %data17, align 8
  store i8* %30, i8** %d, align 8
  %31 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %tobool = icmp ne %struct._PixelRegion* %31, null
  br i1 %tobool, label %cond.true.18, label %cond.false.20

cond.true.18:                                     ; preds = %cond.end
  %32 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %data19 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %32, i32 0, i32 0
  %33 = load i8*, i8** %data19, align 8
  br label %cond.end.21

cond.false.20:                                    ; preds = %cond.end
  br label %cond.end.21

cond.end.21:                                      ; preds = %cond.false.20, %cond.true.18
  %cond22 = phi i8* [ %33, %cond.true.18 ], [ null, %cond.false.20 ]
  store i8* %cond22, i8** %m, align 8
  store i32 0, i32* %h, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end.21
  %34 = load i32, i32* %h, align 4
  %35 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %h23 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %35, i32 0, i32 9
  %36 = load i32, i32* %h23, align 4
  %cmp24 = icmp slt i32 %34, %36
  br i1 %cmp24, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %37 = load i32, i32* %type, align 4
  switch i32 %37, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 2, label %sw.bb.28
    i32 3, label %sw.bb.30
    i32 4, label %sw.bb.32
    i32 5, label %sw.bb.74
  ]

sw.bb:                                            ; preds = %for.body, %for.body
  %38 = load i8*, i8** %s, align 8
  %39 = load i8*, i8** %d, align 8
  %40 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w26 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %40, i32 0, i32 8
  %41 = load i32, i32* %w26, align 4
  %42 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %bytes27 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %42, i32 0, i32 10
  %43 = load i32, i32* %bytes27, align 4
  call void @initial_channel_pixels(i8* %38, i8* %39, i32 %41, i32 %43)
  br label %sw.epilog

sw.bb.28:                                         ; preds = %for.body
  %44 = load i8*, i8** %s, align 8
  %45 = load i8*, i8** %d, align 8
  %46 = load i8*, i8** %data, align 8
  %47 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w29 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %47, i32 0, i32 8
  %48 = load i32, i32* %w29, align 4
  call void @initial_indexed_pixels(i8* %44, i8* %45, i8* %46, i32 %48)
  br label %sw.epilog

sw.bb.30:                                         ; preds = %for.body
  %49 = load i8*, i8** %s, align 8
  %50 = load i8*, i8** %d, align 8
  %51 = load i8*, i8** %m, align 8
  %52 = load i8*, i8** %data, align 8
  %53 = load i32, i32* %opacity, align 4
  %54 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w31 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %54, i32 0, i32 8
  %55 = load i32, i32* %w31, align 4
  call void @initial_indexed_a_pixels(i8* %49, i8* %50, i8* %51, i8* @no_mask, i8* %52, i32 %53, i32 %55)
  br label %sw.epilog

sw.bb.32:                                         ; preds = %for.body
  %56 = load i32, i32* %mode, align 4
  %cmp33 = icmp eq i32 %56, 1
  br i1 %cmp33, label %if.then, label %if.else

if.then:                                          ; preds = %sw.bb.32
  %A = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 0
  store i8* null, i8** %A, align 8
  %pixelformat_A = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 5
  store i32 3, i32* %pixelformat_A, align 4
  %57 = load i8*, i8** %s, align 8
  %B = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 1
  store i8* %57, i8** %B, align 8
  %58 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %bytes35 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %58, i32 0, i32 10
  %59 = load i32, i32* %bytes35, align 4
  %cmp36 = icmp eq i32 %59, 1
  br i1 %cmp36, label %cond.true.38, label %cond.false.39

cond.true.38:                                     ; preds = %if.then
  br label %cond.end.58

cond.false.39:                                    ; preds = %if.then
  %60 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %bytes40 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %60, i32 0, i32 10
  %61 = load i32, i32* %bytes40, align 4
  %cmp41 = icmp eq i32 %61, 2
  br i1 %cmp41, label %cond.true.43, label %cond.false.44

cond.true.43:                                     ; preds = %cond.false.39
  br label %cond.end.56

cond.false.44:                                    ; preds = %cond.false.39
  %62 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %bytes45 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %62, i32 0, i32 10
  %63 = load i32, i32* %bytes45, align 4
  %cmp46 = icmp eq i32 %63, 3
  br i1 %cmp46, label %cond.true.48, label %cond.false.49

cond.true.48:                                     ; preds = %cond.false.44
  br label %cond.end.54

cond.false.49:                                    ; preds = %cond.false.44
  %64 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %bytes50 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %64, i32 0, i32 10
  %65 = load i32, i32* %bytes50, align 4
  %cmp51 = icmp eq i32 %65, 4
  %cond53 = select i1 %cmp51, i32 3, i32 4
  br label %cond.end.54

cond.end.54:                                      ; preds = %cond.false.49, %cond.true.48
  %cond55 = phi i32 [ 2, %cond.true.48 ], [ %cond53, %cond.false.49 ]
  br label %cond.end.56

cond.end.56:                                      ; preds = %cond.end.54, %cond.true.43
  %cond57 = phi i32 [ 1, %cond.true.43 ], [ %cond55, %cond.end.54 ]
  br label %cond.end.58

cond.end.58:                                      ; preds = %cond.end.56, %cond.true.38
  %cond59 = phi i32 [ 0, %cond.true.38 ], [ %cond57, %cond.end.56 ]
  %pixelformat_B = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 6
  store i32 %cond59, i32* %pixelformat_B, align 4
  %66 = load i8*, i8** %buf, align 8
  %D = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 2
  store i8* %66, i8** %D, align 8
  %pixelformat_B60 = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 6
  %67 = load i32, i32* %pixelformat_B60, align 4
  %pixelformat_D = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 7
  store i32 %67, i32* %pixelformat_D, align 4
  %68 = load i8*, i8** %m, align 8
  %M = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 3
  store i8* %68, i8** %M, align 8
  %69 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w61 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %69, i32 0, i32 8
  %70 = load i32, i32* %w61, align 4
  %conv62 = sext i32 %70 to i64
  %n_pixels = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 4
  store i64 %conv62, i64* %n_pixels, align 8
  %op = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 14
  store i32 1, i32* %op, align 4
  %71 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %x = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %71, i32 0, i32 6
  %72 = load i32, i32* %x, align 4
  %dissolve = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 12
  %x63 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %dissolve, i32 0, i32 0
  store i32 %72, i32* %x63, align 4
  %73 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %y = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %73, i32 0, i32 7
  %74 = load i32, i32* %y, align 4
  %75 = load i32, i32* %h, align 4
  %add64 = add nsw i32 %74, %75
  %dissolve65 = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 12
  %y66 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %dissolve65, i32 0, i32 1
  store i32 %add64, i32* %y66, align 4
  %76 = load i32, i32* %opacity, align 4
  %dissolve67 = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 12
  %opacity68 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %dissolve67, i32 0, i32 2
  store i32 %76, i32* %opacity68, align 4
  call void @gimp_composite_dispatch(%struct.GimpCompositeContext* %ctx)
  %77 = load i8*, i8** %buf, align 8
  %78 = load i8*, i8** %d, align 8
  %79 = load i32*, i32** %affect, align 8
  %80 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w69 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %80, i32 0, i32 8
  %81 = load i32, i32* %w69, align 4
  %82 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %bytes70 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %82, i32 0, i32 10
  %83 = load i32, i32* %bytes70, align 4
  %add71 = add nsw i32 %83, 1
  call void @initial_inten_a_pixels(i8* %77, i8* %78, i8* null, i32 255, i32* %79, i32 %81, i32 %add71)
  br label %if.end

if.else:                                          ; preds = %sw.bb.32
  %84 = load i8*, i8** %s, align 8
  %85 = load i8*, i8** %d, align 8
  %86 = load i8*, i8** %m, align 8
  %87 = load i32, i32* %opacity, align 4
  %88 = load i32*, i32** %affect, align 8
  %89 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w72 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %89, i32 0, i32 8
  %90 = load i32, i32* %w72, align 4
  %91 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %bytes73 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %91, i32 0, i32 10
  %92 = load i32, i32* %bytes73, align 4
  call void @initial_inten_pixels(i8* %84, i8* %85, i8* %86, i8* @no_mask, i32 %87, i32* %88, i32 %90, i32 %92)
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end.58
  br label %sw.epilog

sw.bb.74:                                         ; preds = %for.body
  %93 = load i32, i32* %mode, align 4
  %cmp75 = icmp eq i32 %93, 1
  br i1 %cmp75, label %if.then.77, label %if.else.127

if.then.77:                                       ; preds = %sw.bb.74
  %A79 = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx78, i32 0, i32 0
  store i8* null, i8** %A79, align 8
  %pixelformat_A80 = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx78, i32 0, i32 5
  store i32 3, i32* %pixelformat_A80, align 4
  %94 = load i8*, i8** %s, align 8
  %B81 = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx78, i32 0, i32 1
  store i8* %94, i8** %B81, align 8
  %95 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %bytes82 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %95, i32 0, i32 10
  %96 = load i32, i32* %bytes82, align 4
  %cmp83 = icmp eq i32 %96, 1
  br i1 %cmp83, label %cond.true.85, label %cond.false.86

cond.true.85:                                     ; preds = %if.then.77
  br label %cond.end.105

cond.false.86:                                    ; preds = %if.then.77
  %97 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %bytes87 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %97, i32 0, i32 10
  %98 = load i32, i32* %bytes87, align 4
  %cmp88 = icmp eq i32 %98, 2
  br i1 %cmp88, label %cond.true.90, label %cond.false.91

cond.true.90:                                     ; preds = %cond.false.86
  br label %cond.end.103

cond.false.91:                                    ; preds = %cond.false.86
  %99 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %bytes92 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %99, i32 0, i32 10
  %100 = load i32, i32* %bytes92, align 4
  %cmp93 = icmp eq i32 %100, 3
  br i1 %cmp93, label %cond.true.95, label %cond.false.96

cond.true.95:                                     ; preds = %cond.false.91
  br label %cond.end.101

cond.false.96:                                    ; preds = %cond.false.91
  %101 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %bytes97 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %101, i32 0, i32 10
  %102 = load i32, i32* %bytes97, align 4
  %cmp98 = icmp eq i32 %102, 4
  %cond100 = select i1 %cmp98, i32 3, i32 4
  br label %cond.end.101

cond.end.101:                                     ; preds = %cond.false.96, %cond.true.95
  %cond102 = phi i32 [ 2, %cond.true.95 ], [ %cond100, %cond.false.96 ]
  br label %cond.end.103

cond.end.103:                                     ; preds = %cond.end.101, %cond.true.90
  %cond104 = phi i32 [ 1, %cond.true.90 ], [ %cond102, %cond.end.101 ]
  br label %cond.end.105

cond.end.105:                                     ; preds = %cond.end.103, %cond.true.85
  %cond106 = phi i32 [ 0, %cond.true.85 ], [ %cond104, %cond.end.103 ]
  %pixelformat_B107 = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx78, i32 0, i32 6
  store i32 %cond106, i32* %pixelformat_B107, align 4
  %103 = load i8*, i8** %buf, align 8
  %D108 = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx78, i32 0, i32 2
  store i8* %103, i8** %D108, align 8
  %pixelformat_B109 = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx78, i32 0, i32 6
  %104 = load i32, i32* %pixelformat_B109, align 4
  %pixelformat_D110 = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx78, i32 0, i32 7
  store i32 %104, i32* %pixelformat_D110, align 4
  %105 = load i8*, i8** %m, align 8
  %M111 = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx78, i32 0, i32 3
  store i8* %105, i8** %M111, align 8
  %106 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w112 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %106, i32 0, i32 8
  %107 = load i32, i32* %w112, align 4
  %conv113 = sext i32 %107 to i64
  %n_pixels114 = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx78, i32 0, i32 4
  store i64 %conv113, i64* %n_pixels114, align 8
  %op115 = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx78, i32 0, i32 14
  store i32 1, i32* %op115, align 4
  %108 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %x116 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %108, i32 0, i32 6
  %109 = load i32, i32* %x116, align 4
  %dissolve117 = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx78, i32 0, i32 12
  %x118 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %dissolve117, i32 0, i32 0
  store i32 %109, i32* %x118, align 4
  %110 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %y119 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %110, i32 0, i32 7
  %111 = load i32, i32* %y119, align 4
  %112 = load i32, i32* %h, align 4
  %add120 = add nsw i32 %111, %112
  %dissolve121 = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx78, i32 0, i32 12
  %y122 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %dissolve121, i32 0, i32 1
  store i32 %add120, i32* %y122, align 4
  %113 = load i32, i32* %opacity, align 4
  %dissolve123 = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx78, i32 0, i32 12
  %opacity124 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %dissolve123, i32 0, i32 2
  store i32 %113, i32* %opacity124, align 4
  call void @gimp_composite_dispatch(%struct.GimpCompositeContext* %ctx78)
  %114 = load i8*, i8** %buf, align 8
  %115 = load i8*, i8** %d, align 8
  %116 = load i32*, i32** %affect, align 8
  %117 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w125 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %117, i32 0, i32 8
  %118 = load i32, i32* %w125, align 4
  %119 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %bytes126 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %119, i32 0, i32 10
  %120 = load i32, i32* %bytes126, align 4
  call void @initial_inten_a_pixels(i8* %114, i8* %115, i8* null, i32 255, i32* %116, i32 %118, i32 %120)
  br label %if.end.130

if.else.127:                                      ; preds = %sw.bb.74
  %121 = load i8*, i8** %s, align 8
  %122 = load i8*, i8** %d, align 8
  %123 = load i8*, i8** %m, align 8
  %124 = load i32, i32* %opacity, align 4
  %125 = load i32*, i32** %affect, align 8
  %126 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %w128 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %126, i32 0, i32 8
  %127 = load i32, i32* %w128, align 4
  %128 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %bytes129 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %128, i32 0, i32 10
  %129 = load i32, i32* %bytes129, align 4
  call void @initial_inten_a_pixels(i8* %121, i8* %122, i8* %123, i32 %124, i32* %125, i32 %127, i32 %129)
  br label %if.end.130

if.end.130:                                       ; preds = %if.else.127, %cond.end.105
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %if.end.130, %if.end, %sw.bb.30, %sw.bb.28, %sw.bb
  %130 = load %struct._PixelRegion*, %struct._PixelRegion** %src.addr, align 8
  %rowstride = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %130, i32 0, i32 5
  %131 = load i32, i32* %rowstride, align 4
  %132 = load i8*, i8** %s, align 8
  %idx.ext = sext i32 %131 to i64
  %add.ptr = getelementptr inbounds i8, i8* %132, i64 %idx.ext
  store i8* %add.ptr, i8** %s, align 8
  %133 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %rowstride131 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %133, i32 0, i32 5
  %134 = load i32, i32* %rowstride131, align 4
  %135 = load i8*, i8** %d, align 8
  %idx.ext132 = sext i32 %134 to i64
  %add.ptr133 = getelementptr inbounds i8, i8* %135, i64 %idx.ext132
  store i8* %add.ptr133, i8** %d, align 8
  %136 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %tobool134 = icmp ne %struct._PixelRegion* %136, null
  br i1 %tobool134, label %if.then.135, label %if.end.139

if.then.135:                                      ; preds = %sw.epilog
  %137 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %rowstride136 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %137, i32 0, i32 5
  %138 = load i32, i32* %rowstride136, align 4
  %139 = load i8*, i8** %m, align 8
  %idx.ext137 = sext i32 %138 to i64
  %add.ptr138 = getelementptr inbounds i8, i8* %139, i64 %idx.ext137
  store i8* %add.ptr138, i8** %m, align 8
  br label %if.end.139

if.end.139:                                       ; preds = %if.then.135, %sw.epilog
  br label %for.inc

for.inc:                                          ; preds = %if.end.139
  %140 = load i32, i32* %h, align 4
  %inc = add nsw i32 %140, 1
  store i32 %inc, i32* %h, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @combine_regions(%struct._PixelRegion* %src1, %struct._PixelRegion* %src2, %struct._PixelRegion* %dest, %struct._PixelRegion* %mask, i8* %data, i32 %opacity, i32 %mode, i32* %affect, i32 %type) #0 {
entry:
  %src1.addr = alloca %struct._PixelRegion*, align 8
  %src2.addr = alloca %struct._PixelRegion*, align 8
  %dest.addr = alloca %struct._PixelRegion*, align 8
  %mask.addr = alloca %struct._PixelRegion*, align 8
  %data.addr = alloca i8*, align 8
  %opacity.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %affect.addr = alloca i32*, align 8
  %type.addr = alloca i32, align 4
  %has_alpha1 = alloca i32, align 4
  %i = alloca i32, align 4
  %st = alloca %struct.combine_regions_struct, align 8
  store %struct._PixelRegion* %src1, %struct._PixelRegion** %src1.addr, align 8
  store %struct._PixelRegion* %src2, %struct._PixelRegion** %src2.addr, align 8
  store %struct._PixelRegion* %dest, %struct._PixelRegion** %dest.addr, align 8
  store %struct._PixelRegion* %mask, %struct._PixelRegion** %mask.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32 %mode, i32* %mode.addr, align 4
  store i32* %affect, i32** %affect.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %0 = load i32, i32* %type.addr, align 4
  switch i32 %0, label %sw.default [
    i32 8, label %sw.bb
    i32 1, label %sw.bb
    i32 10, label %sw.bb.1
    i32 4, label %sw.bb.1
    i32 9, label %sw.bb.2
    i32 2, label %sw.bb.2
    i32 11, label %sw.bb.3
    i32 3, label %sw.bb.3
  ]

sw.bb:                                            ; preds = %entry, %entry
  store i32 0, i32* %has_alpha1, align 4
  br label %sw.epilog

sw.bb.1:                                          ; preds = %entry, %entry
  store i32 1, i32* %has_alpha1, align 4
  br label %sw.epilog

sw.bb.2:                                          ; preds = %entry, %entry
  store i32 0, i32* %has_alpha1, align 4
  br label %sw.epilog

sw.bb.3:                                          ; preds = %entry, %entry
  store i32 1, i32* %has_alpha1, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  store i32 0, i32* %has_alpha1, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.3, %sw.bb.2, %sw.bb.1, %sw.bb
  %1 = load i32, i32* %opacity.addr, align 4
  %opacity4 = getelementptr inbounds %struct.combine_regions_struct, %struct.combine_regions_struct* %st, i32 0, i32 0
  store i32 %1, i32* %opacity4, align 4
  %2 = load i32, i32* %mode.addr, align 4
  %mode5 = getelementptr inbounds %struct.combine_regions_struct, %struct.combine_regions_struct* %st, i32 0, i32 1
  store i32 %2, i32* %mode5, align 4
  %3 = load i32*, i32** %affect.addr, align 8
  %affect6 = getelementptr inbounds %struct.combine_regions_struct, %struct.combine_regions_struct* %st, i32 0, i32 2
  store i32* %3, i32** %affect6, align 8
  %4 = load i32, i32* %type.addr, align 4
  %type7 = getelementptr inbounds %struct.combine_regions_struct, %struct.combine_regions_struct* %st, i32 0, i32 3
  store i32 %4, i32* %type7, align 4
  %5 = load i8*, i8** %data.addr, align 8
  %data8 = getelementptr inbounds %struct.combine_regions_struct, %struct.combine_regions_struct* %st, i32 0, i32 4
  store i8* %5, i8** %data8, align 8
  %6 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %tobool = icmp ne %struct._PixelRegion* %6, null
  br i1 %tobool, label %land.end.23, label %land.lhs.true

land.lhs.true:                                    ; preds = %sw.epilog
  %7 = load i32, i32* %opacity.addr, align 4
  %cmp = icmp eq i32 %7, 255
  br i1 %cmp, label %land.lhs.true.9, label %land.end.23

land.lhs.true.9:                                  ; preds = %land.lhs.true
  %8 = load i32, i32* %mode.addr, align 4
  %idxprom = zext i32 %8 to i64
  %arrayidx = getelementptr inbounds [26 x %struct._LayerMode], [26 x %struct._LayerMode]* @layer_modes, i32 0, i64 %idxprom
  %9 = bitcast %struct._LayerMode* %arrayidx to i8*
  %bf.load = load i8, i8* %9, align 4
  %bf.lshr = lshr i8 %bf.load, 2
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool10 = icmp ne i32 %bf.cast, 0
  br i1 %tobool10, label %land.end.23, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true.9
  %10 = load i32, i32* %mode.addr, align 4
  %idxprom11 = zext i32 %10 to i64
  %arrayidx12 = getelementptr inbounds [26 x %struct._LayerMode], [26 x %struct._LayerMode]* @layer_modes, i32 0, i64 %idxprom11
  %11 = bitcast %struct._LayerMode* %arrayidx12 to i8*
  %bf.load13 = load i8, i8* %11, align 4
  %bf.clear14 = and i8 %bf.load13, 1
  %bf.cast15 = zext i8 %bf.clear14 to i32
  %tobool16 = icmp ne i32 %bf.cast15, 0
  br i1 %tobool16, label %land.lhs.true.17, label %land.end

land.lhs.true.17:                                 ; preds = %land.rhs
  %12 = load i32, i32* %has_alpha1, align 4
  %tobool18 = icmp ne i32 %12, 0
  br i1 %tobool18, label %land.rhs.19, label %land.end

land.rhs.19:                                      ; preds = %land.lhs.true.17
  %13 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %bytes = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %13, i32 0, i32 10
  %14 = load i32, i32* %bytes, align 4
  %sub = sub nsw i32 %14, 1
  %idxprom20 = sext i32 %sub to i64
  %15 = load i32*, i32** %affect.addr, align 8
  %arrayidx21 = getelementptr inbounds i32, i32* %15, i64 %idxprom20
  %16 = load i32, i32* %arrayidx21, align 4
  %tobool22 = icmp ne i32 %16, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs.19, %land.lhs.true.17, %land.rhs
  %17 = phi i1 [ false, %land.lhs.true.17 ], [ false, %land.rhs ], [ %tobool22, %land.rhs.19 ]
  br label %land.end.23

land.end.23:                                      ; preds = %land.end, %land.lhs.true.9, %land.lhs.true, %sw.epilog
  %18 = phi i1 [ false, %land.lhs.true.9 ], [ false, %land.lhs.true ], [ false, %sw.epilog ], [ %17, %land.end ]
  %land.ext = zext i1 %18 to i32
  %opacity_quickskip_possible = getelementptr inbounds %struct.combine_regions_struct, %struct.combine_regions_struct* %st, i32 0, i32 5
  store i32 %land.ext, i32* %opacity_quickskip_possible, align 4
  %opacity_quickskip_possible24 = getelementptr inbounds %struct.combine_regions_struct, %struct.combine_regions_struct* %st, i32 0, i32 5
  %19 = load i32, i32* %opacity_quickskip_possible24, align 4
  %tobool25 = icmp ne i32 %19, 0
  br i1 %tobool25, label %if.then, label %if.end.34

if.then:                                          ; preds = %land.end.23
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %20 = load i32, i32* %i, align 4
  %21 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %bytes26 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %21, i32 0, i32 10
  %22 = load i32, i32* %bytes26, align 4
  %sub27 = sub nsw i32 %22, 1
  %cmp28 = icmp ult i32 %20, %sub27
  br i1 %cmp28, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %23 = load i32, i32* %i, align 4
  %idxprom29 = zext i32 %23 to i64
  %24 = load i32*, i32** %affect.addr, align 8
  %arrayidx30 = getelementptr inbounds i32, i32* %24, i64 %idxprom29
  %25 = load i32, i32* %arrayidx30, align 4
  %tobool31 = icmp ne i32 %25, 0
  br i1 %tobool31, label %if.end, label %if.then.32

if.then.32:                                       ; preds = %for.body
  %opacity_quickskip_possible33 = getelementptr inbounds %struct.combine_regions_struct, %struct.combine_regions_struct* %st, i32 0, i32 5
  store i32 0, i32* %opacity_quickskip_possible33, align 4
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %26 = load i32, i32* %i, align 4
  %inc = add i32 %26, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then.32, %for.cond
  br label %if.end.34

if.end.34:                                        ; preds = %for.end, %land.end.23
  %27 = load i32, i32* %mode.addr, align 4
  %idxprom35 = zext i32 %27 to i64
  %arrayidx36 = getelementptr inbounds [26 x %struct._LayerMode], [26 x %struct._LayerMode]* @layer_modes, i32 0, i64 %idxprom35
  %28 = bitcast %struct._LayerMode* %arrayidx36 to i8*
  %bf.load37 = load i8, i8* %28, align 4
  %bf.lshr38 = lshr i8 %bf.load37, 1
  %bf.clear39 = and i8 %bf.lshr38, 1
  %bf.cast40 = zext i8 %bf.clear39 to i32
  %tobool41 = icmp ne i32 %bf.cast40, 0
  br i1 %tobool41, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %if.end.34
  %29 = load i32, i32* %opacity.addr, align 4
  %cmp42 = icmp eq i32 %29, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end.34
  %30 = phi i1 [ true, %if.end.34 ], [ %cmp42, %lor.rhs ]
  %lor.ext = zext i1 %30 to i32
  %transparency_quickskip_possible = getelementptr inbounds %struct.combine_regions_struct, %struct.combine_regions_struct* %st, i32 0, i32 6
  store i32 %lor.ext, i32* %transparency_quickskip_possible, align 4
  %31 = bitcast %struct.combine_regions_struct* %st to i8*
  %32 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %33 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %34 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %35 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  call void (void ()*, i8*, i32, ...) @pixel_regions_process_parallel(void ()* bitcast (void (%struct.combine_regions_struct*, %struct._PixelRegion*, %struct._PixelRegion*, %struct._PixelRegion*, %struct._PixelRegion*)* @combine_sub_region to void ()*), i8* %31, i32 4, %struct._PixelRegion* %32, %struct._PixelRegion* %33, %struct._PixelRegion* %34, %struct._PixelRegion* %35)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @combine_sub_region(%struct.combine_regions_struct* %st, %struct._PixelRegion* %src1, %struct._PixelRegion* %src2, %struct._PixelRegion* %dest, %struct._PixelRegion* %mask) #0 {
entry:
  %st.addr = alloca %struct.combine_regions_struct*, align 8
  %src1.addr = alloca %struct._PixelRegion*, align 8
  %src2.addr = alloca %struct._PixelRegion*, align 8
  %dest.addr = alloca %struct._PixelRegion*, align 8
  %mask.addr = alloca %struct._PixelRegion*, align 8
  %data = alloca i8*, align 8
  %opacity = alloca i32, align 4
  %layer_mode_opacity = alloca i32, align 4
  %layer_mode_mask = alloca i8*, align 8
  %mode = alloca i32, align 4
  %affect = alloca i32*, align 8
  %h = alloca i32, align 4
  %combine = alloca i32, align 4
  %type = alloca i32, align 4
  %mode_affect = alloca i32, align 4
  %s = alloca i8*, align 8
  %s1 = alloca i8*, align 8
  %s2 = alloca i8*, align 8
  %d = alloca i8*, align 8
  %m = alloca i8*, align 8
  %buf = alloca i8*, align 8
  %opacity_quickskip_possible = alloca i32, align 4
  %transparency_quickskip_possible = alloca i32, align 4
  %hint = alloca i8, align 1
  %ctx = alloca %struct.GimpCompositeContext, align 8
  store %struct.combine_regions_struct* %st, %struct.combine_regions_struct** %st.addr, align 8
  store %struct._PixelRegion* %src1, %struct._PixelRegion** %src1.addr, align 8
  store %struct._PixelRegion* %src2, %struct._PixelRegion** %src2.addr, align 8
  store %struct._PixelRegion* %dest, %struct._PixelRegion** %dest.addr, align 8
  store %struct._PixelRegion* %mask, %struct._PixelRegion** %mask.addr, align 8
  store i32 0, i32* %combine, align 4
  store i32 0, i32* %mode_affect, align 4
  %0 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %0, i32 0, i32 8
  %1 = load i32, i32* %w, align 4
  %2 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %bytes = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %2, i32 0, i32 10
  %3 = load i32, i32* %bytes, align 4
  %mul = mul nsw i32 %1, %3
  %4 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %w1 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %4, i32 0, i32 8
  %5 = load i32, i32* %w1, align 4
  %6 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %bytes2 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %6, i32 0, i32 10
  %7 = load i32, i32* %bytes2, align 4
  %add = add nsw i32 %7, 1
  %mul3 = mul nsw i32 %5, %add
  %cmp = icmp sgt i32 %mul, %mul3
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %8 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %w4 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %8, i32 0, i32 8
  %9 = load i32, i32* %w4, align 4
  %10 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %bytes5 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %10, i32 0, i32 10
  %11 = load i32, i32* %bytes5, align 4
  %mul6 = mul nsw i32 %9, %11
  br label %cond.end

cond.false:                                       ; preds = %entry
  %12 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %w7 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %12, i32 0, i32 8
  %13 = load i32, i32* %w7, align 4
  %14 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %bytes8 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %14, i32 0, i32 10
  %15 = load i32, i32* %bytes8, align 4
  %add9 = add nsw i32 %15, 1
  %mul10 = mul nsw i32 %13, %add9
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul6, %cond.true ], [ %mul10, %cond.false ]
  %16 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %w11 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %16, i32 0, i32 8
  %17 = load i32, i32* %w11, align 4
  %18 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %bytes12 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %18, i32 0, i32 10
  %19 = load i32, i32* %bytes12, align 4
  %mul13 = mul nsw i32 %17, %19
  %cmp14 = icmp sgt i32 %cond, %mul13
  br i1 %cmp14, label %cond.true.15, label %cond.false.35

cond.true.15:                                     ; preds = %cond.end
  %20 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %w16 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %20, i32 0, i32 8
  %21 = load i32, i32* %w16, align 4
  %22 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %bytes17 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %22, i32 0, i32 10
  %23 = load i32, i32* %bytes17, align 4
  %mul18 = mul nsw i32 %21, %23
  %24 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %w19 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %24, i32 0, i32 8
  %25 = load i32, i32* %w19, align 4
  %26 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %bytes20 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %26, i32 0, i32 10
  %27 = load i32, i32* %bytes20, align 4
  %add21 = add nsw i32 %27, 1
  %mul22 = mul nsw i32 %25, %add21
  %cmp23 = icmp sgt i32 %mul18, %mul22
  br i1 %cmp23, label %cond.true.24, label %cond.false.28

cond.true.24:                                     ; preds = %cond.true.15
  %28 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %w25 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %28, i32 0, i32 8
  %29 = load i32, i32* %w25, align 4
  %30 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %bytes26 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %30, i32 0, i32 10
  %31 = load i32, i32* %bytes26, align 4
  %mul27 = mul nsw i32 %29, %31
  br label %cond.end.33

cond.false.28:                                    ; preds = %cond.true.15
  %32 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %w29 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %32, i32 0, i32 8
  %33 = load i32, i32* %w29, align 4
  %34 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %bytes30 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %34, i32 0, i32 10
  %35 = load i32, i32* %bytes30, align 4
  %add31 = add nsw i32 %35, 1
  %mul32 = mul nsw i32 %33, %add31
  br label %cond.end.33

cond.end.33:                                      ; preds = %cond.false.28, %cond.true.24
  %cond34 = phi i32 [ %mul27, %cond.true.24 ], [ %mul32, %cond.false.28 ]
  br label %cond.end.39

cond.false.35:                                    ; preds = %cond.end
  %36 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %w36 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %36, i32 0, i32 8
  %37 = load i32, i32* %w36, align 4
  %38 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %bytes37 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %38, i32 0, i32 10
  %39 = load i32, i32* %bytes37, align 4
  %mul38 = mul nsw i32 %37, %39
  br label %cond.end.39

cond.end.39:                                      ; preds = %cond.false.35, %cond.end.33
  %cond40 = phi i32 [ %cond34, %cond.end.33 ], [ %mul38, %cond.false.35 ]
  %conv = sext i32 %cond40 to i64
  %40 = alloca i8, i64 %conv
  store i8* %40, i8** %buf, align 8
  %41 = load %struct.combine_regions_struct*, %struct.combine_regions_struct** %st.addr, align 8
  %opacity41 = getelementptr inbounds %struct.combine_regions_struct, %struct.combine_regions_struct* %41, i32 0, i32 0
  %42 = load i32, i32* %opacity41, align 4
  store i32 %42, i32* %opacity, align 4
  %43 = load %struct.combine_regions_struct*, %struct.combine_regions_struct** %st.addr, align 8
  %mode42 = getelementptr inbounds %struct.combine_regions_struct, %struct.combine_regions_struct* %43, i32 0, i32 1
  %44 = load i32, i32* %mode42, align 4
  store i32 %44, i32* %mode, align 4
  %45 = load %struct.combine_regions_struct*, %struct.combine_regions_struct** %st.addr, align 8
  %affect43 = getelementptr inbounds %struct.combine_regions_struct, %struct.combine_regions_struct* %45, i32 0, i32 2
  %46 = load i32*, i32** %affect43, align 8
  store i32* %46, i32** %affect, align 8
  %47 = load %struct.combine_regions_struct*, %struct.combine_regions_struct** %st.addr, align 8
  %type44 = getelementptr inbounds %struct.combine_regions_struct, %struct.combine_regions_struct* %47, i32 0, i32 3
  %48 = load i32, i32* %type44, align 4
  store i32 %48, i32* %type, align 4
  %49 = load %struct.combine_regions_struct*, %struct.combine_regions_struct** %st.addr, align 8
  %data45 = getelementptr inbounds %struct.combine_regions_struct, %struct.combine_regions_struct* %49, i32 0, i32 4
  %50 = load i8*, i8** %data45, align 8
  store i8* %50, i8** %data, align 8
  %51 = load %struct.combine_regions_struct*, %struct.combine_regions_struct** %st.addr, align 8
  %opacity_quickskip_possible46 = getelementptr inbounds %struct.combine_regions_struct, %struct.combine_regions_struct* %51, i32 0, i32 5
  %52 = load i32, i32* %opacity_quickskip_possible46, align 4
  %tobool = icmp ne i32 %52, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.end.39
  %53 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %tiles = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %53, i32 0, i32 1
  %54 = load %struct._TileManager*, %struct._TileManager** %tiles, align 8
  %tobool47 = icmp ne %struct._TileManager* %54, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.end.39
  %55 = phi i1 [ false, %cond.end.39 ], [ %tobool47, %land.rhs ]
  %land.ext = zext i1 %55 to i32
  store i32 %land.ext, i32* %opacity_quickskip_possible, align 4
  %56 = load %struct.combine_regions_struct*, %struct.combine_regions_struct** %st.addr, align 8
  %transparency_quickskip_possible48 = getelementptr inbounds %struct.combine_regions_struct, %struct.combine_regions_struct* %56, i32 0, i32 6
  %57 = load i32, i32* %transparency_quickskip_possible48, align 4
  %tobool49 = icmp ne i32 %57, 0
  br i1 %tobool49, label %land.rhs.50, label %land.end.53

land.rhs.50:                                      ; preds = %land.end
  %58 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %tiles51 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %58, i32 0, i32 1
  %59 = load %struct._TileManager*, %struct._TileManager** %tiles51, align 8
  %tobool52 = icmp ne %struct._TileManager* %59, null
  br label %land.end.53

land.end.53:                                      ; preds = %land.rhs.50, %land.end
  %60 = phi i1 [ false, %land.end ], [ %tobool52, %land.rhs.50 ]
  %land.ext54 = zext i1 %60 to i32
  store i32 %land.ext54, i32* %transparency_quickskip_possible, align 4
  %61 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %data55 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %61, i32 0, i32 0
  %62 = load i8*, i8** %data55, align 8
  store i8* %62, i8** %s1, align 8
  %63 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %data56 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %63, i32 0, i32 0
  %64 = load i8*, i8** %data56, align 8
  store i8* %64, i8** %s2, align 8
  %65 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %data57 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %65, i32 0, i32 0
  %66 = load i8*, i8** %data57, align 8
  store i8* %66, i8** %d, align 8
  %67 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %tobool58 = icmp ne %struct._PixelRegion* %67, null
  br i1 %tobool58, label %cond.true.59, label %cond.false.61

cond.true.59:                                     ; preds = %land.end.53
  %68 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %data60 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %68, i32 0, i32 0
  %69 = load i8*, i8** %data60, align 8
  br label %cond.end.62

cond.false.61:                                    ; preds = %land.end.53
  br label %cond.end.62

cond.end.62:                                      ; preds = %cond.false.61, %cond.true.59
  %cond63 = phi i8* [ %69, %cond.true.59 ], [ null, %cond.false.61 ]
  store i8* %cond63, i8** %m, align 8
  %70 = load i32, i32* %transparency_quickskip_possible, align 4
  %tobool64 = icmp ne i32 %70, 0
  br i1 %tobool64, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end.62
  %71 = load i32, i32* %opacity_quickskip_possible, align 4
  %tobool65 = icmp ne i32 %71, 0
  br i1 %tobool65, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %cond.end.62
  %72 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %curtile = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %72, i32 0, i32 2
  %73 = load %struct._Tile*, %struct._Tile** %curtile, align 8
  %74 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %offy = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %74, i32 0, i32 4
  %75 = load i32, i32* %offy, align 4
  %76 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %h66 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %76, i32 0, i32 9
  %77 = load i32, i32* %h66, align 4
  call void @tile_update_rowhints(%struct._Tile* %73, i32 %75, i32 %77)
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %78 = load i32, i32* %opacity, align 4
  store i32 %78, i32* %layer_mode_opacity, align 4
  %79 = load i8*, i8** %m, align 8
  store i8* %79, i8** %layer_mode_mask, align 8
  %80 = load i32, i32* %mode, align 4
  %cmp67 = icmp eq i32 %80, 1
  br i1 %cmp67, label %if.then.69, label %if.end.70

if.then.69:                                       ; preds = %if.end
  store i32 255, i32* %opacity, align 4
  store i8* null, i8** %m, align 8
  br label %if.end.70

if.end.70:                                        ; preds = %if.then.69, %if.end
  store i32 0, i32* %h, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.70
  %81 = load i32, i32* %h, align 4
  %82 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %h71 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %82, i32 0, i32 9
  %83 = load i32, i32* %h71, align 4
  %cmp72 = icmp ult i32 %81, %83
  br i1 %cmp72, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  store i8 5, i8* %hint, align 1
  %84 = load i32, i32* %transparency_quickskip_possible, align 4
  %tobool74 = icmp ne i32 %84, 0
  br i1 %tobool74, label %if.then.75, label %if.else

if.then.75:                                       ; preds = %for.body
  %85 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %curtile76 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %85, i32 0, i32 2
  %86 = load %struct._Tile*, %struct._Tile** %curtile76, align 8
  %87 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %offy77 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %87, i32 0, i32 4
  %88 = load i32, i32* %offy77, align 4
  %89 = load i32, i32* %h, align 4
  %add78 = add i32 %88, %89
  %call = call zeroext i8 @tile_get_rowhint(%struct._Tile* %86, i32 %add78)
  store i8 %call, i8* %hint, align 1
  %90 = load i8, i8* %hint, align 1
  %conv79 = zext i8 %90 to i32
  %cmp80 = icmp eq i32 %conv79, 2
  br i1 %cmp80, label %if.then.82, label %if.end.83

if.then.82:                                       ; preds = %if.then.75
  br label %next_row

if.end.83:                                        ; preds = %if.then.75
  br label %if.end.91

if.else:                                          ; preds = %for.body
  %91 = load i32, i32* %opacity_quickskip_possible, align 4
  %tobool84 = icmp ne i32 %91, 0
  br i1 %tobool84, label %if.then.85, label %if.end.90

if.then.85:                                       ; preds = %if.else
  %92 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %curtile86 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %92, i32 0, i32 2
  %93 = load %struct._Tile*, %struct._Tile** %curtile86, align 8
  %94 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %offy87 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %94, i32 0, i32 4
  %95 = load i32, i32* %offy87, align 4
  %96 = load i32, i32* %h, align 4
  %add88 = add i32 %95, %96
  %call89 = call zeroext i8 @tile_get_rowhint(%struct._Tile* %93, i32 %add88)
  store i8 %call89, i8* %hint, align 1
  br label %if.end.90

if.end.90:                                        ; preds = %if.then.85, %if.else
  br label %if.end.91

if.end.91:                                        ; preds = %if.end.90, %if.end.83
  %97 = load i8*, i8** %buf, align 8
  store i8* %97, i8** %s, align 8
  %98 = load i32, i32* %type, align 4
  switch i32 %98, label %sw.default [
    i32 4, label %sw.bb
    i32 5, label %sw.bb
    i32 6, label %sw.bb
    i32 7, label %sw.bb
    i32 1, label %sw.bb.92
    i32 2, label %sw.bb.92
    i32 3, label %sw.bb.92
    i32 9, label %sw.bb.94
    i32 10, label %sw.bb.94
    i32 8, label %sw.bb.94
    i32 11, label %sw.bb.94
  ]

sw.bb:                                            ; preds = %if.end.91, %if.end.91, %if.end.91, %if.end.91
  %99 = load i32, i32* %type, align 4
  store i32 %99, i32* %combine, align 4
  br label %sw.epilog

sw.bb.92:                                         ; preds = %if.end.91, %if.end.91, %if.end.91
  %100 = load i8*, i8** %s1, align 8
  %101 = load i8*, i8** %s2, align 8
  %102 = load i32, i32* %mode, align 4
  %103 = load i32, i32* %type, align 4
  %call93 = call i32 @apply_indexed_layer_mode(i8* %100, i8* %101, i8** %s, i32 %102, i32 %103)
  store i32 %call93, i32* %combine, align 4
  br label %sw.epilog

sw.bb.94:                                         ; preds = %if.end.91, %if.end.91, %if.end.91, %if.end.91
  %104 = load i8*, i8** %s1, align 8
  %A = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 0
  store i8* %104, i8** %A, align 8
  %105 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %bytes95 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %105, i32 0, i32 10
  %106 = load i32, i32* %bytes95, align 4
  %cmp96 = icmp eq i32 %106, 1
  br i1 %cmp96, label %cond.true.98, label %cond.false.99

cond.true.98:                                     ; preds = %sw.bb.94
  br label %cond.end.118

cond.false.99:                                    ; preds = %sw.bb.94
  %107 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %bytes100 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %107, i32 0, i32 10
  %108 = load i32, i32* %bytes100, align 4
  %cmp101 = icmp eq i32 %108, 2
  br i1 %cmp101, label %cond.true.103, label %cond.false.104

cond.true.103:                                    ; preds = %cond.false.99
  br label %cond.end.116

cond.false.104:                                   ; preds = %cond.false.99
  %109 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %bytes105 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %109, i32 0, i32 10
  %110 = load i32, i32* %bytes105, align 4
  %cmp106 = icmp eq i32 %110, 3
  br i1 %cmp106, label %cond.true.108, label %cond.false.109

cond.true.108:                                    ; preds = %cond.false.104
  br label %cond.end.114

cond.false.109:                                   ; preds = %cond.false.104
  %111 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %bytes110 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %111, i32 0, i32 10
  %112 = load i32, i32* %bytes110, align 4
  %cmp111 = icmp eq i32 %112, 4
  %cond113 = select i1 %cmp111, i32 3, i32 4
  br label %cond.end.114

cond.end.114:                                     ; preds = %cond.false.109, %cond.true.108
  %cond115 = phi i32 [ 2, %cond.true.108 ], [ %cond113, %cond.false.109 ]
  br label %cond.end.116

cond.end.116:                                     ; preds = %cond.end.114, %cond.true.103
  %cond117 = phi i32 [ 1, %cond.true.103 ], [ %cond115, %cond.end.114 ]
  br label %cond.end.118

cond.end.118:                                     ; preds = %cond.end.116, %cond.true.98
  %cond119 = phi i32 [ 0, %cond.true.98 ], [ %cond117, %cond.end.116 ]
  %pixelformat_A = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 5
  store i32 %cond119, i32* %pixelformat_A, align 4
  %113 = load i8*, i8** %s2, align 8
  %B = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 1
  store i8* %113, i8** %B, align 8
  %114 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %bytes120 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %114, i32 0, i32 10
  %115 = load i32, i32* %bytes120, align 4
  %cmp121 = icmp eq i32 %115, 1
  br i1 %cmp121, label %cond.true.123, label %cond.false.124

cond.true.123:                                    ; preds = %cond.end.118
  br label %cond.end.143

cond.false.124:                                   ; preds = %cond.end.118
  %116 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %bytes125 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %116, i32 0, i32 10
  %117 = load i32, i32* %bytes125, align 4
  %cmp126 = icmp eq i32 %117, 2
  br i1 %cmp126, label %cond.true.128, label %cond.false.129

cond.true.128:                                    ; preds = %cond.false.124
  br label %cond.end.141

cond.false.129:                                   ; preds = %cond.false.124
  %118 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %bytes130 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %118, i32 0, i32 10
  %119 = load i32, i32* %bytes130, align 4
  %cmp131 = icmp eq i32 %119, 3
  br i1 %cmp131, label %cond.true.133, label %cond.false.134

cond.true.133:                                    ; preds = %cond.false.129
  br label %cond.end.139

cond.false.134:                                   ; preds = %cond.false.129
  %120 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %bytes135 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %120, i32 0, i32 10
  %121 = load i32, i32* %bytes135, align 4
  %cmp136 = icmp eq i32 %121, 4
  %cond138 = select i1 %cmp136, i32 3, i32 4
  br label %cond.end.139

cond.end.139:                                     ; preds = %cond.false.134, %cond.true.133
  %cond140 = phi i32 [ 2, %cond.true.133 ], [ %cond138, %cond.false.134 ]
  br label %cond.end.141

cond.end.141:                                     ; preds = %cond.end.139, %cond.true.128
  %cond142 = phi i32 [ 1, %cond.true.128 ], [ %cond140, %cond.end.139 ]
  br label %cond.end.143

cond.end.143:                                     ; preds = %cond.end.141, %cond.true.123
  %cond144 = phi i32 [ 0, %cond.true.123 ], [ %cond142, %cond.end.141 ]
  %pixelformat_B = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 6
  store i32 %cond144, i32* %pixelformat_B, align 4
  %122 = load i8*, i8** %s, align 8
  %D = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 2
  store i8* %122, i8** %D, align 8
  %pixelformat_A145 = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 5
  %123 = load i32, i32* %pixelformat_A145, align 4
  %pixelformat_D = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 7
  store i32 %123, i32* %pixelformat_D, align 4
  %124 = load i8*, i8** %layer_mode_mask, align 8
  %M = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 3
  store i8* %124, i8** %M, align 8
  %pixelformat_M = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 8
  store i32 4, i32* %pixelformat_M, align 4
  %125 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %w146 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %125, i32 0, i32 8
  %126 = load i32, i32* %w146, align 4
  %conv147 = sext i32 %126 to i64
  %n_pixels = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 4
  store i64 %conv147, i64* %n_pixels, align 8
  %127 = load i32, i32* %combine, align 4
  %combine148 = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 13
  store i32 %127, i32* %combine148, align 4
  %128 = load i32, i32* %mode, align 4
  %op = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 14
  store i32 %128, i32* %op, align 4
  %129 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %x = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %129, i32 0, i32 6
  %130 = load i32, i32* %x, align 4
  %dissolve = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 12
  %x149 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %dissolve, i32 0, i32 0
  store i32 %130, i32* %x149, align 4
  %131 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %y = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %131, i32 0, i32 7
  %132 = load i32, i32* %y, align 4
  %133 = load i32, i32* %h, align 4
  %add150 = add i32 %132, %133
  %dissolve151 = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 12
  %y152 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %dissolve151, i32 0, i32 1
  store i32 %add150, i32* %y152, align 4
  %134 = load i32, i32* %layer_mode_opacity, align 4
  %dissolve153 = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 12
  %opacity154 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %dissolve153, i32 0, i32 2
  store i32 %134, i32* %opacity154, align 4
  %135 = load i32, i32* %mode, align 4
  %idxprom = zext i32 %135 to i64
  %arrayidx = getelementptr inbounds [0 x %struct.GimpCompositeOperationEffects], [0 x %struct.GimpCompositeOperationEffects]* @gimp_composite_operation_effects, i32 0, i64 %idxprom
  %affect_opacity = getelementptr inbounds %struct.GimpCompositeOperationEffects, %struct.GimpCompositeOperationEffects* %arrayidx, i32 0, i32 0
  %136 = load i8, i8* %affect_opacity, align 1
  %conv155 = zext i8 %136 to i32
  store i32 %conv155, i32* %mode_affect, align 4
  call void @gimp_composite_dispatch(%struct.GimpCompositeContext* %ctx)
  %D156 = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 2
  %137 = load i8*, i8** %D156, align 8
  store i8* %137, i8** %s, align 8
  %combine157 = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 13
  %138 = load i32, i32* %combine157, align 4
  %cmp158 = icmp eq i32 %138, 0
  br i1 %cmp158, label %cond.true.160, label %cond.false.161

cond.true.160:                                    ; preds = %cond.end.143
  %139 = load i32, i32* %type, align 4
  br label %cond.end.163

cond.false.161:                                   ; preds = %cond.end.143
  %combine162 = getelementptr inbounds %struct.GimpCompositeContext, %struct.GimpCompositeContext* %ctx, i32 0, i32 13
  %140 = load i32, i32* %combine162, align 4
  br label %cond.end.163

cond.end.163:                                     ; preds = %cond.false.161, %cond.true.160
  %cond164 = phi i32 [ %139, %cond.true.160 ], [ %140, %cond.false.161 ]
  store i32 %cond164, i32* %combine, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.91
  call void (i8*, ...) @g_warning(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i32 0, i32 0))
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %cond.end.163, %sw.bb.92, %sw.bb
  %141 = load i32, i32* %combine, align 4
  switch i32 %141, label %sw.default.253 [
    i32 1, label %sw.bb.165
    i32 2, label %sw.bb.168
    i32 3, label %sw.bb.171
    i32 4, label %sw.bb.174
    i32 5, label %sw.bb.177
    i32 6, label %sw.bb.180
    i32 7, label %sw.bb.183
    i32 8, label %sw.bb.186
    i32 9, label %sw.bb.200
    i32 10, label %sw.bb.203
    i32 11, label %sw.bb.206
    i32 12, label %sw.bb.221
    i32 13, label %sw.bb.225
    i32 14, label %sw.bb.229
    i32 15, label %sw.bb.233
    i32 16, label %sw.bb.237
    i32 17, label %sw.bb.240
    i32 18, label %sw.bb.243
    i32 19, label %sw.bb.246
    i32 20, label %sw.bb.249
    i32 0, label %sw.bb.252
  ]

sw.bb.165:                                        ; preds = %sw.epilog
  %142 = load i8*, i8** %s1, align 8
  %143 = load i8*, i8** %s2, align 8
  %144 = load i8*, i8** %d, align 8
  %145 = load i8*, i8** %m, align 8
  %146 = load i32, i32* %opacity, align 4
  %147 = load i32*, i32** %affect, align 8
  %148 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %w166 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %148, i32 0, i32 8
  %149 = load i32, i32* %w166, align 4
  %150 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %bytes167 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %150, i32 0, i32 10
  %151 = load i32, i32* %bytes167, align 4
  call void @combine_indexed_and_indexed_pixels(i8* %142, i8* %143, i8* %144, i8* %145, i32 %146, i32* %147, i32 %149, i32 %151)
  br label %sw.epilog.254

sw.bb.168:                                        ; preds = %sw.epilog
  %152 = load i8*, i8** %s1, align 8
  %153 = load i8*, i8** %s2, align 8
  %154 = load i8*, i8** %d, align 8
  %155 = load i8*, i8** %m, align 8
  %156 = load i32, i32* %opacity, align 4
  %157 = load i32*, i32** %affect, align 8
  %158 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %w169 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %158, i32 0, i32 8
  %159 = load i32, i32* %w169, align 4
  %160 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %bytes170 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %160, i32 0, i32 10
  %161 = load i32, i32* %bytes170, align 4
  call void @combine_indexed_and_indexed_a_pixels(i8* %152, i8* %153, i8* %154, i8* %155, i32 %156, i32* %157, i32 %159, i32 %161)
  br label %sw.epilog.254

sw.bb.171:                                        ; preds = %sw.epilog
  %162 = load i8*, i8** %s1, align 8
  %163 = load i8*, i8** %s2, align 8
  %164 = load i8*, i8** %d, align 8
  %165 = load i8*, i8** %m, align 8
  %166 = load i32, i32* %opacity, align 4
  %167 = load i32*, i32** %affect, align 8
  %168 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %w172 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %168, i32 0, i32 8
  %169 = load i32, i32* %w172, align 4
  %170 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %bytes173 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %170, i32 0, i32 10
  %171 = load i32, i32* %bytes173, align 4
  call void @combine_indexed_a_and_indexed_a_pixels(i8* %162, i8* %163, i8* %164, i8* %165, i32 %166, i32* %167, i32 %169, i32 %171)
  br label %sw.epilog.254

sw.bb.174:                                        ; preds = %sw.epilog
  %172 = load i8*, i8** %s1, align 8
  %173 = load i8*, i8** %s2, align 8
  %174 = load i8*, i8** %d, align 8
  %175 = load i8*, i8** %m, align 8
  %176 = load i8*, i8** %data, align 8
  %177 = load i32, i32* %opacity, align 4
  %178 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %w175 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %178, i32 0, i32 8
  %179 = load i32, i32* %w175, align 4
  %180 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %bytes176 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %180, i32 0, i32 10
  %181 = load i32, i32* %bytes176, align 4
  call void @combine_inten_a_and_indexed_pixels(i8* %172, i8* %173, i8* %174, i8* %175, i8* %176, i32 %177, i32 %179, i32 %181)
  br label %sw.epilog.254

sw.bb.177:                                        ; preds = %sw.epilog
  %182 = load i8*, i8** %s1, align 8
  %183 = load i8*, i8** %s2, align 8
  %184 = load i8*, i8** %d, align 8
  %185 = load i8*, i8** %m, align 8
  %186 = load i8*, i8** %data, align 8
  %187 = load i32, i32* %opacity, align 4
  %188 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %w178 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %188, i32 0, i32 8
  %189 = load i32, i32* %w178, align 4
  %190 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %bytes179 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %190, i32 0, i32 10
  %191 = load i32, i32* %bytes179, align 4
  call void @combine_inten_a_and_indexed_a_pixels(i8* %182, i8* %183, i8* %184, i8* %185, i8* %186, i32 %187, i32 %189, i32 %191)
  br label %sw.epilog.254

sw.bb.180:                                        ; preds = %sw.epilog
  %192 = load i8*, i8** %s1, align 8
  %193 = load i8*, i8** %s2, align 8
  %194 = load i8*, i8** %d, align 8
  %195 = load i8*, i8** %data, align 8
  %196 = load i32, i32* %opacity, align 4
  %197 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %w181 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %197, i32 0, i32 8
  %198 = load i32, i32* %w181, align 4
  %199 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %bytes182 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %199, i32 0, i32 10
  %200 = load i32, i32* %bytes182, align 4
  call void @combine_inten_a_and_channel_mask_pixels(i8* %192, i8* %193, i8* %194, i8* %195, i32 %196, i32 %198, i32 %200)
  br label %sw.epilog.254

sw.bb.183:                                        ; preds = %sw.epilog
  %201 = load i8*, i8** %s1, align 8
  %202 = load i8*, i8** %s2, align 8
  %203 = load i8*, i8** %d, align 8
  %204 = load i8*, i8** %data, align 8
  %205 = load i32, i32* %opacity, align 4
  %206 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %w184 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %206, i32 0, i32 8
  %207 = load i32, i32* %w184, align 4
  %208 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %bytes185 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %208, i32 0, i32 10
  %209 = load i32, i32* %bytes185, align 4
  call void @combine_inten_a_and_channel_selection_pixels(i8* %201, i8* %202, i8* %203, i8* %204, i32 %205, i32 %207, i32 %209)
  br label %sw.epilog.254

sw.bb.186:                                        ; preds = %sw.epilog
  %210 = load i8, i8* %hint, align 1
  %conv187 = zext i8 %210 to i32
  %cmp188 = icmp eq i32 %conv187, 1
  br i1 %cmp188, label %land.lhs.true, label %if.else.196

land.lhs.true:                                    ; preds = %sw.bb.186
  %211 = load i32, i32* %opacity_quickskip_possible, align 4
  %tobool190 = icmp ne i32 %211, 0
  br i1 %tobool190, label %if.then.191, label %if.else.196

if.then.191:                                      ; preds = %land.lhs.true
  %212 = load i8*, i8** %d, align 8
  %213 = load i8*, i8** %s, align 8
  %214 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %w192 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %214, i32 0, i32 8
  %215 = load i32, i32* %w192, align 4
  %216 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %bytes193 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %216, i32 0, i32 10
  %217 = load i32, i32* %bytes193, align 4
  %mul194 = mul nsw i32 %215, %217
  %conv195 = sext i32 %mul194 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %212, i8* %213, i64 %conv195, i32 1, i1 false)
  br label %if.end.199

if.else.196:                                      ; preds = %land.lhs.true, %sw.bb.186
  %218 = load i8*, i8** %s1, align 8
  %219 = load i8*, i8** %s, align 8
  %220 = load i8*, i8** %d, align 8
  %221 = load i8*, i8** %m, align 8
  %222 = load i32, i32* %opacity, align 4
  %223 = load i32*, i32** %affect, align 8
  %224 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %w197 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %224, i32 0, i32 8
  %225 = load i32, i32* %w197, align 4
  %226 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %bytes198 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %226, i32 0, i32 10
  %227 = load i32, i32* %bytes198, align 4
  call void @combine_inten_and_inten_pixels(i8* %218, i8* %219, i8* %220, i8* %221, i32 %222, i32* %223, i32 %225, i32 %227)
  br label %if.end.199

if.end.199:                                       ; preds = %if.else.196, %if.then.191
  br label %sw.epilog.254

sw.bb.200:                                        ; preds = %sw.epilog
  %228 = load i8*, i8** %s1, align 8
  %229 = load i8*, i8** %s, align 8
  %230 = load i8*, i8** %d, align 8
  %231 = load i8*, i8** %m, align 8
  %232 = load i32, i32* %opacity, align 4
  %233 = load i32*, i32** %affect, align 8
  %234 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %w201 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %234, i32 0, i32 8
  %235 = load i32, i32* %w201, align 4
  %236 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %bytes202 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %236, i32 0, i32 10
  %237 = load i32, i32* %bytes202, align 4
  call void @combine_inten_and_inten_a_pixels(i8* %228, i8* %229, i8* %230, i8* %231, i32 %232, i32* %233, i32 %235, i32 %237)
  br label %sw.epilog.254

sw.bb.203:                                        ; preds = %sw.epilog
  %238 = load i8*, i8** %s1, align 8
  %239 = load i8*, i8** %s, align 8
  %240 = load i8*, i8** %d, align 8
  %241 = load i8*, i8** %m, align 8
  %242 = load i32, i32* %opacity, align 4
  %243 = load i32*, i32** %affect, align 8
  %244 = load i32, i32* %mode_affect, align 4
  %245 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %w204 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %245, i32 0, i32 8
  %246 = load i32, i32* %w204, align 4
  %247 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %bytes205 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %247, i32 0, i32 10
  %248 = load i32, i32* %bytes205, align 4
  call void @combine_inten_a_and_inten_pixels(i8* %238, i8* %239, i8* %240, i8* %241, i32 %242, i32* %243, i32 %244, i32 %246, i32 %248)
  br label %sw.epilog.254

sw.bb.206:                                        ; preds = %sw.epilog
  %249 = load i8, i8* %hint, align 1
  %conv207 = zext i8 %249 to i32
  %cmp208 = icmp eq i32 %conv207, 1
  br i1 %cmp208, label %land.lhs.true.210, label %if.else.217

land.lhs.true.210:                                ; preds = %sw.bb.206
  %250 = load i32, i32* %opacity_quickskip_possible, align 4
  %tobool211 = icmp ne i32 %250, 0
  br i1 %tobool211, label %if.then.212, label %if.else.217

if.then.212:                                      ; preds = %land.lhs.true.210
  %251 = load i8*, i8** %d, align 8
  %252 = load i8*, i8** %s, align 8
  %253 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %w213 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %253, i32 0, i32 8
  %254 = load i32, i32* %w213, align 4
  %255 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %bytes214 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %255, i32 0, i32 10
  %256 = load i32, i32* %bytes214, align 4
  %mul215 = mul nsw i32 %254, %256
  %conv216 = sext i32 %mul215 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %251, i8* %252, i64 %conv216, i32 1, i1 false)
  br label %if.end.220

if.else.217:                                      ; preds = %land.lhs.true.210, %sw.bb.206
  %257 = load i8*, i8** %s1, align 8
  %258 = load i8*, i8** %s, align 8
  %259 = load i8*, i8** %d, align 8
  %260 = load i8*, i8** %m, align 8
  %261 = load i32, i32* %opacity, align 4
  %262 = load i32*, i32** %affect, align 8
  %263 = load i32, i32* %mode_affect, align 4
  %264 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %w218 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %264, i32 0, i32 8
  %265 = load i32, i32* %w218, align 4
  %266 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %bytes219 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %266, i32 0, i32 10
  %267 = load i32, i32* %bytes219, align 4
  call void @combine_inten_a_and_inten_a_pixels(i8* %257, i8* %258, i8* %259, i8* %260, i32 %261, i32* %262, i32 %263, i32 %265, i32 %267)
  br label %if.end.220

if.end.220:                                       ; preds = %if.else.217, %if.then.212
  br label %sw.epilog.254

sw.bb.221:                                        ; preds = %sw.epilog
  %268 = load i8*, i8** %s1, align 8
  %269 = load i8*, i8** %s, align 8
  %270 = load i8*, i8** %d, align 8
  %271 = load i8*, i8** %m, align 8
  %272 = load i32, i32* %opacity, align 4
  %273 = load i32*, i32** %affect, align 8
  %274 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %w222 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %274, i32 0, i32 8
  %275 = load i32, i32* %w222, align 4
  %276 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %bytes223 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %276, i32 0, i32 10
  %277 = load i32, i32* %bytes223, align 4
  %278 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %bytes224 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %278, i32 0, i32 10
  %279 = load i32, i32* %bytes224, align 4
  call void @behind_inten_pixels(i8* %268, i8* %269, i8* %270, i8* %271, i32 %272, i32* %273, i32 %275, i32 %277, i32 %279)
  br label %sw.epilog.254

sw.bb.225:                                        ; preds = %sw.epilog
  %280 = load i8*, i8** %s1, align 8
  %281 = load i8*, i8** %s, align 8
  %282 = load i8*, i8** %d, align 8
  %283 = load i8*, i8** %m, align 8
  %284 = load i32, i32* %opacity, align 4
  %285 = load i32*, i32** %affect, align 8
  %286 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %w226 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %286, i32 0, i32 8
  %287 = load i32, i32* %w226, align 4
  %288 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %bytes227 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %288, i32 0, i32 10
  %289 = load i32, i32* %bytes227, align 4
  %290 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %bytes228 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %290, i32 0, i32 10
  %291 = load i32, i32* %bytes228, align 4
  call void @behind_indexed_pixels(i8* %280, i8* %281, i8* %282, i8* %283, i32 %284, i32* %285, i32 %287, i32 %289, i32 %291)
  br label %sw.epilog.254

sw.bb.229:                                        ; preds = %sw.epilog
  %292 = load i8*, i8** %s1, align 8
  %293 = load i8*, i8** %s, align 8
  %294 = load i8*, i8** %d, align 8
  %295 = load i8*, i8** %m, align 8
  %296 = load i32, i32* %opacity, align 4
  %297 = load i32*, i32** %affect, align 8
  %298 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %w230 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %298, i32 0, i32 8
  %299 = load i32, i32* %w230, align 4
  %300 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %bytes231 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %300, i32 0, i32 10
  %301 = load i32, i32* %bytes231, align 4
  %302 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %bytes232 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %302, i32 0, i32 10
  %303 = load i32, i32* %bytes232, align 4
  call void @replace_inten_pixels(i8* %292, i8* %293, i8* %294, i8* %295, i32 %296, i32* %297, i32 %299, i32 %301, i32 %303)
  br label %sw.epilog.254

sw.bb.233:                                        ; preds = %sw.epilog
  %304 = load i8*, i8** %s1, align 8
  %305 = load i8*, i8** %s, align 8
  %306 = load i8*, i8** %d, align 8
  %307 = load i8*, i8** %m, align 8
  %308 = load i32, i32* %opacity, align 4
  %309 = load i32*, i32** %affect, align 8
  %310 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %w234 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %310, i32 0, i32 8
  %311 = load i32, i32* %w234, align 4
  %312 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %bytes235 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %312, i32 0, i32 10
  %313 = load i32, i32* %bytes235, align 4
  %314 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %bytes236 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %314, i32 0, i32 10
  %315 = load i32, i32* %bytes236, align 4
  call void @replace_indexed_pixels(i8* %304, i8* %305, i8* %306, i8* %307, i32 %308, i32* %309, i32 %311, i32 %313, i32 %315)
  br label %sw.epilog.254

sw.bb.237:                                        ; preds = %sw.epilog
  %316 = load i8*, i8** %s1, align 8
  %317 = load i8*, i8** %s, align 8
  %318 = load i8*, i8** %d, align 8
  %319 = load i8*, i8** %m, align 8
  %320 = load i32, i32* %opacity, align 4
  %321 = load i32*, i32** %affect, align 8
  %322 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %w238 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %322, i32 0, i32 8
  %323 = load i32, i32* %w238, align 4
  %324 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %bytes239 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %324, i32 0, i32 10
  %325 = load i32, i32* %bytes239, align 4
  call void @erase_inten_pixels(i8* %316, i8* %317, i8* %318, i8* %319, i32 %320, i32* %321, i32 %323, i32 %325)
  br label %sw.epilog.254

sw.bb.240:                                        ; preds = %sw.epilog
  %326 = load i8*, i8** %s1, align 8
  %327 = load i8*, i8** %s, align 8
  %328 = load i8*, i8** %d, align 8
  %329 = load i8*, i8** %m, align 8
  %330 = load i32, i32* %opacity, align 4
  %331 = load i32*, i32** %affect, align 8
  %332 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %w241 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %332, i32 0, i32 8
  %333 = load i32, i32* %w241, align 4
  %334 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %bytes242 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %334, i32 0, i32 10
  %335 = load i32, i32* %bytes242, align 4
  call void @erase_indexed_pixels(i8* %326, i8* %327, i8* %328, i8* %329, i32 %330, i32* %331, i32 %333, i32 %335)
  br label %sw.epilog.254

sw.bb.243:                                        ; preds = %sw.epilog
  %336 = load i8*, i8** %s1, align 8
  %337 = load i8*, i8** %s, align 8
  %338 = load i8*, i8** %d, align 8
  %339 = load i8*, i8** %m, align 8
  %340 = load i32, i32* %opacity, align 4
  %341 = load i32*, i32** %affect, align 8
  %342 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %w244 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %342, i32 0, i32 8
  %343 = load i32, i32* %w244, align 4
  %344 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %bytes245 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %344, i32 0, i32 10
  %345 = load i32, i32* %bytes245, align 4
  call void @anti_erase_inten_pixels(i8* %336, i8* %337, i8* %338, i8* %339, i32 %340, i32* %341, i32 %343, i32 %345)
  br label %sw.epilog.254

sw.bb.246:                                        ; preds = %sw.epilog
  %346 = load i8*, i8** %s1, align 8
  %347 = load i8*, i8** %s, align 8
  %348 = load i8*, i8** %d, align 8
  %349 = load i8*, i8** %m, align 8
  %350 = load i32, i32* %opacity, align 4
  %351 = load i32*, i32** %affect, align 8
  %352 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %w247 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %352, i32 0, i32 8
  %353 = load i32, i32* %w247, align 4
  %354 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %bytes248 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %354, i32 0, i32 10
  %355 = load i32, i32* %bytes248, align 4
  call void @anti_erase_indexed_pixels(i8* %346, i8* %347, i8* %348, i8* %349, i32 %350, i32* %351, i32 %353, i32 %355)
  br label %sw.epilog.254

sw.bb.249:                                        ; preds = %sw.epilog
  %356 = load i8*, i8** %s1, align 8
  %357 = load i8*, i8** %s, align 8
  %358 = load i8*, i8** %d, align 8
  %359 = load i8*, i8** %m, align 8
  %360 = load i32, i32* %opacity, align 4
  %361 = load i32*, i32** %affect, align 8
  %362 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %w250 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %362, i32 0, i32 8
  %363 = load i32, i32* %w250, align 4
  %364 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %bytes251 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %364, i32 0, i32 10
  %365 = load i32, i32* %bytes251, align 4
  call void @color_erase_inten_pixels(i8* %356, i8* %357, i8* %358, i8* %359, i32 %360, i32* %361, i32 %363, i32 %365)
  br label %sw.epilog.254

sw.bb.252:                                        ; preds = %sw.epilog
  call void (i8*, ...) @g_warning(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0))
  br label %sw.epilog.254

sw.default.253:                                   ; preds = %sw.epilog
  %366 = load i32, i32* %combine, align 4
  call void (i8*, ...) @g_warning(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.4, i32 0, i32 0), i32 %366)
  br label %sw.epilog.254

sw.epilog.254:                                    ; preds = %sw.default.253, %sw.bb.252, %sw.bb.249, %sw.bb.246, %sw.bb.243, %sw.bb.240, %sw.bb.237, %sw.bb.233, %sw.bb.229, %sw.bb.225, %sw.bb.221, %if.end.220, %sw.bb.203, %sw.bb.200, %if.end.199, %sw.bb.183, %sw.bb.180, %sw.bb.177, %sw.bb.174, %sw.bb.171, %sw.bb.168, %sw.bb.165
  br label %next_row

next_row:                                         ; preds = %sw.epilog.254, %if.then.82
  %367 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %rowstride = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %367, i32 0, i32 5
  %368 = load i32, i32* %rowstride, align 4
  %369 = load i8*, i8** %s1, align 8
  %idx.ext = sext i32 %368 to i64
  %add.ptr = getelementptr inbounds i8, i8* %369, i64 %idx.ext
  store i8* %add.ptr, i8** %s1, align 8
  %370 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %rowstride255 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %370, i32 0, i32 5
  %371 = load i32, i32* %rowstride255, align 4
  %372 = load i8*, i8** %s2, align 8
  %idx.ext256 = sext i32 %371 to i64
  %add.ptr257 = getelementptr inbounds i8, i8* %372, i64 %idx.ext256
  store i8* %add.ptr257, i8** %s2, align 8
  %373 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %rowstride258 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %373, i32 0, i32 5
  %374 = load i32, i32* %rowstride258, align 4
  %375 = load i8*, i8** %d, align 8
  %idx.ext259 = sext i32 %374 to i64
  %add.ptr260 = getelementptr inbounds i8, i8* %375, i64 %idx.ext259
  store i8* %add.ptr260, i8** %d, align 8
  %376 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %tobool261 = icmp ne %struct._PixelRegion* %376, null
  br i1 %tobool261, label %if.then.262, label %if.end.272

if.then.262:                                      ; preds = %next_row
  %377 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %rowstride263 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %377, i32 0, i32 5
  %378 = load i32, i32* %rowstride263, align 4
  %379 = load i8*, i8** %layer_mode_mask, align 8
  %idx.ext264 = sext i32 %378 to i64
  %add.ptr265 = getelementptr inbounds i8, i8* %379, i64 %idx.ext264
  store i8* %add.ptr265, i8** %layer_mode_mask, align 8
  %380 = load i8*, i8** %m, align 8
  %tobool266 = icmp ne i8* %380, null
  br i1 %tobool266, label %if.then.267, label %if.end.271

if.then.267:                                      ; preds = %if.then.262
  %381 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %rowstride268 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %381, i32 0, i32 5
  %382 = load i32, i32* %rowstride268, align 4
  %383 = load i8*, i8** %m, align 8
  %idx.ext269 = sext i32 %382 to i64
  %add.ptr270 = getelementptr inbounds i8, i8* %383, i64 %idx.ext269
  store i8* %add.ptr270, i8** %m, align 8
  br label %if.end.271

if.end.271:                                       ; preds = %if.then.267, %if.then.262
  br label %if.end.272

if.end.272:                                       ; preds = %if.end.271, %next_row
  br label %for.inc

for.inc:                                          ; preds = %if.end.272
  %384 = load i32, i32* %h, align 4
  %inc = add i32 %384, 1
  store i32 %inc, i32* %h, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @combine_regions_replace(%struct._PixelRegion* %src1, %struct._PixelRegion* %src2, %struct._PixelRegion* %dest, %struct._PixelRegion* %mask, i8* %data, i32 %opacity, i32* %affect, i32 %type) #0 {
entry:
  %src1.addr = alloca %struct._PixelRegion*, align 8
  %src2.addr = alloca %struct._PixelRegion*, align 8
  %dest.addr = alloca %struct._PixelRegion*, align 8
  %mask.addr = alloca %struct._PixelRegion*, align 8
  %data.addr = alloca i8*, align 8
  %opacity.addr = alloca i32, align 4
  %affect.addr = alloca i32*, align 8
  %type.addr = alloca i32, align 4
  %pr = alloca i8*, align 8
  %s1 = alloca i8*, align 8
  %s2 = alloca i8*, align 8
  %d = alloca i8*, align 8
  %m = alloca i8*, align 8
  %h = alloca i32, align 4
  store %struct._PixelRegion* %src1, %struct._PixelRegion** %src1.addr, align 8
  store %struct._PixelRegion* %src2, %struct._PixelRegion** %src2.addr, align 8
  store %struct._PixelRegion* %dest, %struct._PixelRegion** %dest.addr, align 8
  store %struct._PixelRegion* %mask, %struct._PixelRegion** %mask.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32* %affect, i32** %affect.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %0 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %1 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %2 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %3 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %call = call %struct._PixelRegionIterator* (i32, ...) @pixel_regions_register(i32 4, %struct._PixelRegion* %0, %struct._PixelRegion* %1, %struct._PixelRegion* %2, %struct._PixelRegion* %3)
  %4 = bitcast %struct._PixelRegionIterator* %call to i8*
  store i8* %4, i8** %pr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.19, %entry
  %5 = load i8*, i8** %pr, align 8
  %cmp = icmp ne i8* %5, null
  br i1 %cmp, label %for.body, label %for.end.21

for.body:                                         ; preds = %for.cond
  %6 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %data1 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %6, i32 0, i32 0
  %7 = load i8*, i8** %data1, align 8
  store i8* %7, i8** %s1, align 8
  %8 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %data2 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %8, i32 0, i32 0
  %9 = load i8*, i8** %data2, align 8
  store i8* %9, i8** %s2, align 8
  %10 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %data3 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %10, i32 0, i32 0
  %11 = load i8*, i8** %data3, align 8
  store i8* %11, i8** %d, align 8
  %12 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %data4 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %12, i32 0, i32 0
  %13 = load i8*, i8** %data4, align 8
  store i8* %13, i8** %m, align 8
  store i32 0, i32* %h, align 4
  br label %for.cond.5

for.cond.5:                                       ; preds = %for.inc, %for.body
  %14 = load i32, i32* %h, align 4
  %15 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %h6 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %15, i32 0, i32 9
  %16 = load i32, i32* %h6, align 4
  %cmp7 = icmp ult i32 %14, %16
  br i1 %cmp7, label %for.body.8, label %for.end

for.body.8:                                       ; preds = %for.cond.5
  %17 = load i8*, i8** %s1, align 8
  %18 = load i8*, i8** %s2, align 8
  %19 = load i8*, i8** %d, align 8
  %20 = load i8*, i8** %m, align 8
  %21 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %x = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %21, i32 0, i32 6
  %22 = load i32, i32* %x, align 4
  %23 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %y = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %23, i32 0, i32 7
  %24 = load i32, i32* %y, align 4
  %25 = load i32, i32* %h, align 4
  %add = add i32 %24, %25
  %26 = load i32, i32* %opacity.addr, align 4
  %27 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %w = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %27, i32 0, i32 8
  %28 = load i32, i32* %w, align 4
  %29 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %bytes = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %29, i32 0, i32 10
  %30 = load i32, i32* %bytes, align 4
  %31 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %bytes9 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %31, i32 0, i32 10
  %32 = load i32, i32* %bytes9, align 4
  %33 = load i32*, i32** %affect.addr, align 8
  call void @apply_layer_mode_replace(i8* %17, i8* %18, i8* %19, i8* %20, i32 %22, i32 %add, i32 %26, i32 %28, i32 %30, i32 %32, i32* %33)
  %34 = load %struct._PixelRegion*, %struct._PixelRegion** %src1.addr, align 8
  %rowstride = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %34, i32 0, i32 5
  %35 = load i32, i32* %rowstride, align 4
  %36 = load i8*, i8** %s1, align 8
  %idx.ext = sext i32 %35 to i64
  %add.ptr = getelementptr inbounds i8, i8* %36, i64 %idx.ext
  store i8* %add.ptr, i8** %s1, align 8
  %37 = load %struct._PixelRegion*, %struct._PixelRegion** %src2.addr, align 8
  %rowstride10 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %37, i32 0, i32 5
  %38 = load i32, i32* %rowstride10, align 4
  %39 = load i8*, i8** %s2, align 8
  %idx.ext11 = sext i32 %38 to i64
  %add.ptr12 = getelementptr inbounds i8, i8* %39, i64 %idx.ext11
  store i8* %add.ptr12, i8** %s2, align 8
  %40 = load %struct._PixelRegion*, %struct._PixelRegion** %dest.addr, align 8
  %rowstride13 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %40, i32 0, i32 5
  %41 = load i32, i32* %rowstride13, align 4
  %42 = load i8*, i8** %d, align 8
  %idx.ext14 = sext i32 %41 to i64
  %add.ptr15 = getelementptr inbounds i8, i8* %42, i64 %idx.ext14
  store i8* %add.ptr15, i8** %d, align 8
  %43 = load %struct._PixelRegion*, %struct._PixelRegion** %mask.addr, align 8
  %rowstride16 = getelementptr inbounds %struct._PixelRegion, %struct._PixelRegion* %43, i32 0, i32 5
  %44 = load i32, i32* %rowstride16, align 4
  %45 = load i8*, i8** %m, align 8
  %idx.ext17 = sext i32 %44 to i64
  %add.ptr18 = getelementptr inbounds i8, i8* %45, i64 %idx.ext17
  store i8* %add.ptr18, i8** %m, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body.8
  %46 = load i32, i32* %h, align 4
  %inc = add i32 %46, 1
  store i32 %inc, i32* %h, align 4
  br label %for.cond.5

for.end:                                          ; preds = %for.cond.5
  br label %for.inc.19

for.inc.19:                                       ; preds = %for.end
  %47 = load i8*, i8** %pr, align 8
  %48 = bitcast i8* %47 to %struct._PixelRegionIterator*
  %call20 = call %struct._PixelRegionIterator* @pixel_regions_process(%struct._PixelRegionIterator* %48)
  %49 = bitcast %struct._PixelRegionIterator* %call20 to i8*
  store i8* %49, i8** %pr, align 8
  br label %for.cond

for.end.21:                                       ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @apply_layer_mode_replace(i8* %src1, i8* %src2, i8* %dest, i8* %mask, i32 %x, i32 %y, i32 %opacity, i32 %length, i32 %bytes1, i32 %bytes2, i32* %affect) #0 {
entry:
  %src1.addr = alloca i8*, align 8
  %src2.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %opacity.addr = alloca i32, align 4
  %length.addr = alloca i32, align 4
  %bytes1.addr = alloca i32, align 4
  %bytes2.addr = alloca i32, align 4
  %affect.addr = alloca i32*, align 8
  store i8* %src1, i8** %src1.addr, align 8
  store i8* %src2, i8** %src2.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes1, i32* %bytes1.addr, align 4
  store i32 %bytes2, i32* %bytes2.addr, align 4
  store i32* %affect, i32** %affect.addr, align 8
  %0 = load i8*, i8** %src1.addr, align 8
  %1 = load i8*, i8** %src2.addr, align 8
  %2 = load i8*, i8** %dest.addr, align 8
  %3 = load i8*, i8** %mask.addr, align 8
  %4 = load i32, i32* %length.addr, align 4
  %5 = load i32, i32* %opacity.addr, align 4
  %6 = load i32*, i32** %affect.addr, align 8
  %7 = load i32, i32* %bytes1.addr, align 4
  %8 = load i32, i32* %bytes2.addr, align 4
  call void @replace_pixels(i8* %0, i8* %1, i8* %2, i8* %3, i32 %4, i32 %5, i32* %6, i32 %7, i32 %8)
  ret void
}

; Function Attrs: nounwind readnone
declare double @ceil(double) #5

; Function Attrs: nounwind
declare double @exp(double) #4

; Function Attrs: nounwind readnone
declare double @rint(double) #5

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #1

declare void @g_logv(i8*, i32, i8*, %struct.__va_list_tag*) #2

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #1

declare void @gimp_composite_dispatch(%struct.GimpCompositeContext*) #2

declare void @tile_update_rowhints(%struct._Tile*, i32, i32) #2

declare zeroext i8 @tile_get_rowhint(%struct._Tile*, i32) #2

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @apply_indexed_layer_mode(i8* %src1, i8* %src2, i8** %dest, i32 %mode, i32 %cmode) #3 {
entry:
  %src1.addr = alloca i8*, align 8
  %src2.addr = alloca i8*, align 8
  %dest.addr = alloca i8**, align 8
  %mode.addr = alloca i32, align 4
  %cmode.addr = alloca i32, align 4
  store i8* %src1, i8** %src1.addr, align 8
  store i8* %src2, i8** %src2.addr, align 8
  store i8** %dest, i8*** %dest.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  store i32 %cmode, i32* %cmode.addr, align 4
  %0 = load i32, i32* %mode.addr, align 4
  switch i32 %0, label %sw.default [
    i32 24, label %sw.bb
    i32 2, label %sw.bb.1
    i32 23, label %sw.bb.2
  ]

sw.bb:                                            ; preds = %entry
  %1 = load i8*, i8** %src2.addr, align 8
  %2 = load i8**, i8*** %dest.addr, align 8
  store i8* %1, i8** %2, align 8
  store i32 15, i32* %cmode.addr, align 4
  br label %sw.epilog

sw.bb.1:                                          ; preds = %entry
  %3 = load i8*, i8** %src2.addr, align 8
  %4 = load i8**, i8*** %dest.addr, align 8
  store i8* %3, i8** %4, align 8
  %5 = load i32, i32* %cmode.addr, align 4
  %cmp = icmp eq i32 %5, 3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %sw.bb.1
  store i32 13, i32* %cmode.addr, align 4
  br label %if.end

if.else:                                          ; preds = %sw.bb.1
  store i32 0, i32* %cmode.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %sw.epilog

sw.bb.2:                                          ; preds = %entry
  %6 = load i8*, i8** %src2.addr, align 8
  %7 = load i8**, i8*** %dest.addr, align 8
  store i8* %6, i8** %7, align 8
  %8 = load i32, i32* %cmode.addr, align 4
  %cmp3 = icmp eq i32 %8, 3
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb.2
  br label %cond.end

cond.false:                                       ; preds = %sw.bb.2
  %9 = load i32, i32* %cmode.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 17, %cond.true ], [ %9, %cond.false ]
  store i32 %cond, i32* %cmode.addr, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %cond.end, %if.end, %sw.bb
  %10 = load i32, i32* %cmode.addr, align 4
  ret i32 %10
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @behind_inten_pixels(i8* %src1, i8* %src2, i8* %dest, i8* %mask, i32 %opacity, i32* %affect, i32 %length, i32 %bytes1, i32 %bytes2) #3 {
entry:
  %src1.addr = alloca i8*, align 8
  %src2.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %opacity.addr = alloca i32, align 4
  %affect.addr = alloca i32*, align 8
  %length.addr = alloca i32, align 4
  %bytes1.addr = alloca i32, align 4
  %bytes2.addr = alloca i32, align 4
  %alpha = alloca i32, align 4
  %m = alloca i8*, align 8
  %b = alloca i32, align 4
  %ratio = alloca float, align 4
  %compl_ratio = alloca float, align 4
  %tmp = alloca i64, align 8
  %src1_alpha = alloca i8, align 1
  %src2_alpha = alloca i8, align 1
  %new_alpha = alloca i8, align 1
  store i8* %src1, i8** %src1.addr, align 8
  store i8* %src2, i8** %src2.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32* %affect, i32** %affect.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes1, i32* %bytes1.addr, align 4
  store i32 %bytes2, i32* %bytes2.addr, align 4
  %0 = load i32, i32* %bytes1.addr, align 4
  %sub = sub i32 %0, 1
  store i32 %sub, i32* %alpha, align 4
  %1 = load i8*, i8** %mask.addr, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i8*, i8** %mask.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %2, %cond.true ], [ @no_mask, %cond.false ]
  store i8* %cond, i8** %m, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.77, %cond.end
  %3 = load i32, i32* %length.addr, align 4
  %dec = add i32 %3, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool1 = icmp ne i32 %3, 0
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %alpha, align 4
  %idxprom = zext i32 %4 to i64
  %5 = load i8*, i8** %src1.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  store i8 %6, i8* %src1_alpha, align 1
  %7 = load i32, i32* %alpha, align 4
  %idxprom4 = zext i32 %7 to i64
  %8 = load i8*, i8** %src2.addr, align 8
  %arrayidx5 = getelementptr inbounds i8, i8* %8, i64 %idxprom4
  %9 = load i8, i8* %arrayidx5, align 1
  %conv = zext i8 %9 to i32
  %10 = load i8*, i8** %m, align 8
  %11 = load i8, i8* %10, align 1
  %conv6 = zext i8 %11 to i32
  %mul = mul nsw i32 %conv, %conv6
  %12 = load i32, i32* %opacity.addr, align 4
  %mul7 = mul i32 %mul, %12
  %add = add i32 %mul7, 32603
  %conv8 = zext i32 %add to i64
  store i64 %conv8, i64* %tmp, align 8
  %13 = load i64, i64* %tmp, align 8
  %shr = ashr i64 %13, 7
  %14 = load i64, i64* %tmp, align 8
  %add9 = add nsw i64 %shr, %14
  %shr10 = ashr i64 %add9, 16
  %conv11 = trunc i64 %shr10 to i8
  store i8 %conv11, i8* %src2_alpha, align 1
  %15 = load i8, i8* %src2_alpha, align 1
  %conv13 = zext i8 %15 to i64
  %16 = load i8, i8* %src2_alpha, align 1
  %conv14 = zext i8 %16 to i32
  %sub15 = sub nsw i32 255, %conv14
  %17 = load i8, i8* %src1_alpha, align 1
  %conv16 = zext i8 %17 to i32
  %mul17 = mul nsw i32 %sub15, %conv16
  %add18 = add nsw i32 %mul17, 128
  %conv19 = sext i32 %add18 to i64
  store i64 %conv19, i64* %tmp, align 8
  %18 = load i64, i64* %tmp, align 8
  %shr20 = ashr i64 %18, 8
  %19 = load i64, i64* %tmp, align 8
  %add21 = add nsw i64 %shr20, %19
  %shr22 = ashr i64 %add21, 8
  %add23 = add nsw i64 %conv13, %shr22
  %conv24 = trunc i64 %add23 to i8
  store i8 %conv24, i8* %new_alpha, align 1
  %20 = load i8, i8* %new_alpha, align 1
  %tobool25 = icmp ne i8 %20, 0
  br i1 %tobool25, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %21 = load i8, i8* %src1_alpha, align 1
  %conv26 = uitofp i8 %21 to float
  %22 = load i8, i8* %new_alpha, align 1
  %conv27 = zext i8 %22 to i32
  %conv28 = sitofp i32 %conv27 to float
  %div = fdiv float %conv26, %conv28
  store float %div, float* %ratio, align 4
  br label %if.end

if.else:                                          ; preds = %while.body
  store float 0.000000e+00, float* %ratio, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %23 = load float, float* %ratio, align 4
  %conv29 = fpext float %23 to double
  %sub30 = fsub double 1.000000e+00, %conv29
  %conv31 = fptrunc double %sub30 to float
  store float %conv31, float* %compl_ratio, align 4
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %24 = load i32, i32* %b, align 4
  %25 = load i32, i32* %alpha, align 4
  %cmp = icmp ult i32 %24, %25
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %26 = load i32, i32* %b, align 4
  %idxprom33 = zext i32 %26 to i64
  %27 = load i32*, i32** %affect.addr, align 8
  %arrayidx34 = getelementptr inbounds i32, i32* %27, i64 %idxprom33
  %28 = load i32, i32* %arrayidx34, align 4
  %tobool35 = icmp ne i32 %28, 0
  br i1 %tobool35, label %cond.true.36, label %cond.false.52

cond.true.36:                                     ; preds = %for.body
  %29 = load i32, i32* %b, align 4
  %idxprom37 = zext i32 %29 to i64
  %30 = load i8*, i8** %src1.addr, align 8
  %arrayidx38 = getelementptr inbounds i8, i8* %30, i64 %idxprom37
  %31 = load i8, i8* %arrayidx38, align 1
  %conv39 = zext i8 %31 to i32
  %conv40 = sitofp i32 %conv39 to float
  %32 = load float, float* %ratio, align 4
  %mul41 = fmul float %conv40, %32
  %33 = load i32, i32* %b, align 4
  %idxprom42 = zext i32 %33 to i64
  %34 = load i8*, i8** %src2.addr, align 8
  %arrayidx43 = getelementptr inbounds i8, i8* %34, i64 %idxprom42
  %35 = load i8, i8* %arrayidx43, align 1
  %conv44 = zext i8 %35 to i32
  %conv45 = sitofp i32 %conv44 to float
  %36 = load float, float* %compl_ratio, align 4
  %mul46 = fmul float %conv45, %36
  %add47 = fadd float %mul41, %mul46
  %conv48 = fpext float %add47 to double
  %add49 = fadd double %conv48, 1.000000e-04
  %conv50 = fptoui double %add49 to i8
  %conv51 = zext i8 %conv50 to i32
  br label %cond.end.56

cond.false.52:                                    ; preds = %for.body
  %37 = load i32, i32* %b, align 4
  %idxprom53 = zext i32 %37 to i64
  %38 = load i8*, i8** %src1.addr, align 8
  %arrayidx54 = getelementptr inbounds i8, i8* %38, i64 %idxprom53
  %39 = load i8, i8* %arrayidx54, align 1
  %conv55 = zext i8 %39 to i32
  br label %cond.end.56

cond.end.56:                                      ; preds = %cond.false.52, %cond.true.36
  %cond57 = phi i32 [ %conv51, %cond.true.36 ], [ %conv55, %cond.false.52 ]
  %conv58 = trunc i32 %cond57 to i8
  %40 = load i32, i32* %b, align 4
  %idxprom59 = zext i32 %40 to i64
  %41 = load i8*, i8** %dest.addr, align 8
  %arrayidx60 = getelementptr inbounds i8, i8* %41, i64 %idxprom59
  store i8 %conv58, i8* %arrayidx60, align 1
  br label %for.inc

for.inc:                                          ; preds = %cond.end.56
  %42 = load i32, i32* %b, align 4
  %inc = add i32 %42, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %43 = load i32, i32* %alpha, align 4
  %idxprom61 = zext i32 %43 to i64
  %44 = load i32*, i32** %affect.addr, align 8
  %arrayidx62 = getelementptr inbounds i32, i32* %44, i64 %idxprom61
  %45 = load i32, i32* %arrayidx62, align 4
  %tobool63 = icmp ne i32 %45, 0
  br i1 %tobool63, label %cond.true.64, label %cond.false.66

cond.true.64:                                     ; preds = %for.end
  %46 = load i8, i8* %new_alpha, align 1
  %conv65 = zext i8 %46 to i32
  br label %cond.end.70

cond.false.66:                                    ; preds = %for.end
  %47 = load i32, i32* %alpha, align 4
  %idxprom67 = zext i32 %47 to i64
  %48 = load i8*, i8** %src1.addr, align 8
  %arrayidx68 = getelementptr inbounds i8, i8* %48, i64 %idxprom67
  %49 = load i8, i8* %arrayidx68, align 1
  %conv69 = zext i8 %49 to i32
  br label %cond.end.70

cond.end.70:                                      ; preds = %cond.false.66, %cond.true.64
  %cond71 = phi i32 [ %conv65, %cond.true.64 ], [ %conv69, %cond.false.66 ]
  %conv72 = trunc i32 %cond71 to i8
  %50 = load i32, i32* %alpha, align 4
  %idxprom73 = zext i32 %50 to i64
  %51 = load i8*, i8** %dest.addr, align 8
  %arrayidx74 = getelementptr inbounds i8, i8* %51, i64 %idxprom73
  store i8 %conv72, i8* %arrayidx74, align 1
  %52 = load i8*, i8** %mask.addr, align 8
  %tobool75 = icmp ne i8* %52, null
  br i1 %tobool75, label %if.then.76, label %if.end.77

if.then.76:                                       ; preds = %cond.end.70
  %53 = load i8*, i8** %m, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %53, i32 1
  store i8* %incdec.ptr, i8** %m, align 8
  br label %if.end.77

if.end.77:                                        ; preds = %if.then.76, %cond.end.70
  %54 = load i32, i32* %bytes1.addr, align 4
  %55 = load i8*, i8** %src1.addr, align 8
  %idx.ext = zext i32 %54 to i64
  %add.ptr = getelementptr inbounds i8, i8* %55, i64 %idx.ext
  store i8* %add.ptr, i8** %src1.addr, align 8
  %56 = load i32, i32* %bytes2.addr, align 4
  %57 = load i8*, i8** %src2.addr, align 8
  %idx.ext78 = zext i32 %56 to i64
  %add.ptr79 = getelementptr inbounds i8, i8* %57, i64 %idx.ext78
  store i8* %add.ptr79, i8** %src2.addr, align 8
  %58 = load i32, i32* %bytes1.addr, align 4
  %59 = load i8*, i8** %dest.addr, align 8
  %idx.ext80 = zext i32 %58 to i64
  %add.ptr81 = getelementptr inbounds i8, i8* %59, i64 %idx.ext80
  store i8* %add.ptr81, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @behind_indexed_pixels(i8* %src1, i8* %src2, i8* %dest, i8* %mask, i32 %opacity, i32* %affect, i32 %length, i32 %bytes1, i32 %bytes2) #3 {
entry:
  %src1.addr = alloca i8*, align 8
  %src2.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %opacity.addr = alloca i32, align 4
  %affect.addr = alloca i32*, align 8
  %length.addr = alloca i32, align 4
  %bytes1.addr = alloca i32, align 4
  %bytes2.addr = alloca i32, align 4
  %alpha = alloca i32, align 4
  %m = alloca i8*, align 8
  %b = alloca i32, align 4
  %tmp = alloca i64, align 8
  %src1_alpha = alloca i8, align 1
  %src2_alpha = alloca i8, align 1
  %new_alpha = alloca i8, align 1
  store i8* %src1, i8** %src1.addr, align 8
  store i8* %src2, i8** %src2.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32* %affect, i32** %affect.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes1, i32* %bytes1.addr, align 4
  store i32 %bytes2, i32* %bytes2.addr, align 4
  %0 = load i32, i32* %bytes1.addr, align 4
  %sub = sub i32 %0, 1
  store i32 %sub, i32* %alpha, align 4
  %1 = load i8*, i8** %mask.addr, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i8*, i8** %mask.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %2, %cond.true ], [ @no_mask, %cond.false ]
  store i8* %cond, i8** %m, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %3 = load i32, i32* %length.addr, align 4
  %dec = add i32 %3, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool1 = icmp ne i32 %3, 0
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %alpha, align 4
  %idxprom = zext i32 %4 to i64
  %5 = load i8*, i8** %src1.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  store i8 %6, i8* %src1_alpha, align 1
  %7 = load i32, i32* %alpha, align 4
  %idxprom4 = zext i32 %7 to i64
  %8 = load i8*, i8** %src2.addr, align 8
  %arrayidx5 = getelementptr inbounds i8, i8* %8, i64 %idxprom4
  %9 = load i8, i8* %arrayidx5, align 1
  %conv = zext i8 %9 to i32
  %10 = load i8*, i8** %m, align 8
  %11 = load i8, i8* %10, align 1
  %conv6 = zext i8 %11 to i32
  %mul = mul nsw i32 %conv, %conv6
  %12 = load i32, i32* %opacity.addr, align 4
  %mul7 = mul i32 %mul, %12
  %add = add i32 %mul7, 32603
  %conv8 = zext i32 %add to i64
  store i64 %conv8, i64* %tmp, align 8
  %13 = load i64, i64* %tmp, align 8
  %shr = ashr i64 %13, 7
  %14 = load i64, i64* %tmp, align 8
  %add9 = add nsw i64 %shr, %14
  %shr10 = ashr i64 %add9, 16
  %conv11 = trunc i64 %shr10 to i8
  store i8 %conv11, i8* %src2_alpha, align 1
  %15 = load i8, i8* %src2_alpha, align 1
  %conv13 = zext i8 %15 to i32
  %cmp = icmp sgt i32 %conv13, 127
  %cond15 = select i1 %cmp, i32 255, i32 0
  %conv16 = trunc i32 %cond15 to i8
  store i8 %conv16, i8* %new_alpha, align 1
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %16 = load i32, i32* %b, align 4
  %17 = load i32, i32* %bytes1.addr, align 4
  %cmp17 = icmp ult i32 %16, %17
  br i1 %cmp17, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %18 = load i32, i32* %b, align 4
  %idxprom19 = zext i32 %18 to i64
  %19 = load i32*, i32** %affect.addr, align 8
  %arrayidx20 = getelementptr inbounds i32, i32* %19, i64 %idxprom19
  %20 = load i32, i32* %arrayidx20, align 4
  %tobool21 = icmp ne i32 %20, 0
  br i1 %tobool21, label %land.lhs.true, label %cond.false.33

land.lhs.true:                                    ; preds = %for.body
  %21 = load i8, i8* %new_alpha, align 1
  %conv22 = zext i8 %21 to i32
  %cmp23 = icmp eq i32 %conv22, 255
  br i1 %cmp23, label %land.lhs.true.25, label %cond.false.33

land.lhs.true.25:                                 ; preds = %land.lhs.true
  %22 = load i8, i8* %src1_alpha, align 1
  %conv26 = zext i8 %22 to i32
  %cmp27 = icmp sgt i32 %conv26, 127
  br i1 %cmp27, label %cond.true.29, label %cond.false.33

cond.true.29:                                     ; preds = %land.lhs.true.25
  %23 = load i32, i32* %b, align 4
  %idxprom30 = zext i32 %23 to i64
  %24 = load i8*, i8** %src2.addr, align 8
  %arrayidx31 = getelementptr inbounds i8, i8* %24, i64 %idxprom30
  %25 = load i8, i8* %arrayidx31, align 1
  %conv32 = zext i8 %25 to i32
  br label %cond.end.37

cond.false.33:                                    ; preds = %land.lhs.true.25, %land.lhs.true, %for.body
  %26 = load i32, i32* %b, align 4
  %idxprom34 = zext i32 %26 to i64
  %27 = load i8*, i8** %src1.addr, align 8
  %arrayidx35 = getelementptr inbounds i8, i8* %27, i64 %idxprom34
  %28 = load i8, i8* %arrayidx35, align 1
  %conv36 = zext i8 %28 to i32
  br label %cond.end.37

cond.end.37:                                      ; preds = %cond.false.33, %cond.true.29
  %cond38 = phi i32 [ %conv32, %cond.true.29 ], [ %conv36, %cond.false.33 ]
  %conv39 = trunc i32 %cond38 to i8
  %29 = load i32, i32* %b, align 4
  %idxprom40 = zext i32 %29 to i64
  %30 = load i8*, i8** %dest.addr, align 8
  %arrayidx41 = getelementptr inbounds i8, i8* %30, i64 %idxprom40
  store i8 %conv39, i8* %arrayidx41, align 1
  br label %for.inc

for.inc:                                          ; preds = %cond.end.37
  %31 = load i32, i32* %b, align 4
  %inc = add i32 %31, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %32 = load i8*, i8** %mask.addr, align 8
  %tobool42 = icmp ne i8* %32, null
  br i1 %tobool42, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %33 = load i8*, i8** %m, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %33, i32 1
  store i8* %incdec.ptr, i8** %m, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  %34 = load i32, i32* %bytes1.addr, align 4
  %35 = load i8*, i8** %src1.addr, align 8
  %idx.ext = zext i32 %34 to i64
  %add.ptr = getelementptr inbounds i8, i8* %35, i64 %idx.ext
  store i8* %add.ptr, i8** %src1.addr, align 8
  %36 = load i32, i32* %bytes2.addr, align 4
  %37 = load i8*, i8** %src2.addr, align 8
  %idx.ext43 = zext i32 %36 to i64
  %add.ptr44 = getelementptr inbounds i8, i8* %37, i64 %idx.ext43
  store i8* %add.ptr44, i8** %src2.addr, align 8
  %38 = load i32, i32* %bytes1.addr, align 4
  %39 = load i8*, i8** %dest.addr, align 8
  %idx.ext45 = zext i32 %38 to i64
  %add.ptr46 = getelementptr inbounds i8, i8* %39, i64 %idx.ext45
  store i8* %add.ptr46, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @replace_inten_pixels(i8* %src1, i8* %src2, i8* %dest, i8* %mask, i32 %opacity, i32* %affect, i32 %length, i32 %bytes1, i32 %bytes2) #3 {
entry:
  %src1.addr = alloca i8*, align 8
  %src2.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %opacity.addr = alloca i32, align 4
  %affect.addr = alloca i32*, align 8
  %length.addr = alloca i32, align 4
  %bytes1.addr = alloca i32, align 4
  %bytes2.addr = alloca i32, align 4
  %has_alpha1 = alloca i32, align 4
  %has_alpha2 = alloca i32, align 4
  %alpha = alloca i32, align 4
  %alpha2 = alloca i32, align 4
  %m = alloca i8*, align 8
  %b = alloca i32, align 4
  %tmp = alloca i32, align 4
  %src1_alpha = alloca i8, align 1
  %src2_alpha = alloca i8, align 1
  %new_alpha = alloca i8, align 1
  %ratio = alloca i32, align 4
  %t = alloca i32, align 4
  %t92 = alloca i32, align 4
  store i8* %src1, i8** %src1.addr, align 8
  store i8* %src2, i8** %src2.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32* %affect, i32** %affect.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes1, i32* %bytes1.addr, align 4
  store i32 %bytes2, i32* %bytes2.addr, align 4
  %0 = load i32, i32* %bytes1.addr, align 4
  %neg = xor i32 %0, -1
  %and = and i32 %neg, 1
  store i32 %and, i32* %has_alpha1, align 4
  %1 = load i32, i32* %bytes2.addr, align 4
  %neg1 = xor i32 %1, -1
  %and2 = and i32 %neg1, 1
  store i32 %and2, i32* %has_alpha2, align 4
  %2 = load i32, i32* %bytes1.addr, align 4
  %3 = load i32, i32* %has_alpha1, align 4
  %sub = sub i32 %2, %3
  store i32 %sub, i32* %alpha, align 4
  %4 = load i32, i32* %bytes2.addr, align 4
  %5 = load i32, i32* %has_alpha2, align 4
  %sub3 = sub i32 %4, %5
  store i32 %sub3, i32* %alpha2, align 4
  %6 = load i8*, i8** %mask.addr, align 8
  %tobool = icmp ne i8* %6, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %7 = load i8*, i8** %mask.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %7, %cond.true ], [ @no_mask, %cond.false ]
  store i8* %cond, i8** %m, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.146, %cond.end
  %8 = load i32, i32* %length.addr, align 4
  %dec = add i32 %8, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool4 = icmp ne i32 %8, 0
  br i1 %tobool4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load i32, i32* %has_alpha1, align 4
  %tobool6 = icmp ne i32 %9, 0
  br i1 %tobool6, label %cond.true.7, label %cond.false.8

cond.true.7:                                      ; preds = %while.body
  %10 = load i32, i32* %alpha, align 4
  %idxprom = zext i32 %10 to i64
  %11 = load i8*, i8** %src1.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %11, i64 %idxprom
  %12 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %12 to i32
  br label %cond.end.9

cond.false.8:                                     ; preds = %while.body
  br label %cond.end.9

cond.end.9:                                       ; preds = %cond.false.8, %cond.true.7
  %cond10 = phi i32 [ %conv, %cond.true.7 ], [ 255, %cond.false.8 ]
  %conv11 = trunc i32 %cond10 to i8
  store i8 %conv11, i8* %src1_alpha, align 1
  %13 = load i32, i32* %has_alpha2, align 4
  %tobool13 = icmp ne i32 %13, 0
  br i1 %tobool13, label %cond.true.14, label %cond.false.18

cond.true.14:                                     ; preds = %cond.end.9
  %14 = load i32, i32* %alpha2, align 4
  %idxprom15 = zext i32 %14 to i64
  %15 = load i8*, i8** %src2.addr, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %15, i64 %idxprom15
  %16 = load i8, i8* %arrayidx16, align 1
  %conv17 = zext i8 %16 to i32
  br label %cond.end.19

cond.false.18:                                    ; preds = %cond.end.9
  br label %cond.end.19

cond.end.19:                                      ; preds = %cond.false.18, %cond.true.14
  %cond20 = phi i32 [ %conv17, %cond.true.14 ], [ 255, %cond.false.18 ]
  %conv21 = trunc i32 %cond20 to i8
  store i8 %conv21, i8* %src2_alpha, align 1
  %17 = load i8, i8* %src2_alpha, align 1
  %conv23 = zext i8 %17 to i32
  %18 = load i8, i8* %src1_alpha, align 1
  %conv24 = zext i8 %18 to i32
  %sub25 = sub nsw i32 %conv23, %conv24
  %19 = load i8*, i8** %m, align 8
  %20 = load i8, i8* %19, align 1
  %conv26 = zext i8 %20 to i32
  %21 = load i32, i32* %opacity.addr, align 4
  %mul = mul i32 %conv26, %21
  %add = add i32 %mul, 128
  store i32 %add, i32* %tmp, align 4
  %22 = load i32, i32* %tmp, align 4
  %shr = ashr i32 %22, 8
  %23 = load i32, i32* %tmp, align 4
  %add27 = add nsw i32 %shr, %23
  %shr28 = ashr i32 %add27, 8
  %mul29 = mul nsw i32 %sub25, %shr28
  %add30 = add nsw i32 %mul29, 128
  store i32 %add30, i32* %tmp, align 4
  %24 = load i32, i32* %tmp, align 4
  %shr31 = ashr i32 %24, 8
  %25 = load i32, i32* %tmp, align 4
  %add32 = add nsw i32 %shr31, %25
  %shr33 = ashr i32 %add32, 8
  %26 = load i8, i8* %src1_alpha, align 1
  %conv34 = zext i8 %26 to i32
  %add35 = add nsw i32 %shr33, %conv34
  %conv36 = trunc i32 %add35 to i8
  store i8 %conv36, i8* %new_alpha, align 1
  %27 = load i8, i8* %new_alpha, align 1
  %tobool37 = icmp ne i8 %27, 0
  br i1 %tobool37, label %if.then, label %if.else.114

if.then:                                          ; preds = %cond.end.19
  %28 = load i8*, i8** %m, align 8
  %29 = load i8, i8* %28, align 1
  %conv39 = zext i8 %29 to i32
  %30 = load i32, i32* %opacity.addr, align 4
  %mul40 = mul i32 %conv39, %30
  store i32 %mul40, i32* %ratio, align 4
  %31 = load i32, i32* %ratio, align 4
  %div = udiv i32 %31, 255
  %32 = load i8, i8* %src2_alpha, align 1
  %conv41 = zext i8 %32 to i32
  %mul42 = mul i32 %div, %conv41
  store i32 %mul42, i32* %ratio, align 4
  %33 = load i32, i32* %ratio, align 4
  %34 = load i8, i8* %new_alpha, align 1
  %conv43 = zext i8 %34 to i32
  %div44 = udiv i32 %33, %conv43
  %35 = load i32, i32* %ratio, align 4
  %36 = load i8, i8* %new_alpha, align 1
  %conv45 = zext i8 %36 to i32
  %rem = urem i32 %35, %conv45
  %37 = load i8, i8* %new_alpha, align 1
  %conv46 = zext i8 %37 to i32
  %div47 = sdiv i32 %conv46, 2
  %cmp = icmp ugt i32 %rem, %div47
  %conv48 = zext i1 %cmp to i32
  %add49 = add i32 %div44, %conv48
  store i32 %add49, i32* %ratio, align 4
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %38 = load i32, i32* %b, align 4
  %39 = load i32, i32* %alpha, align 4
  %cmp50 = icmp ult i32 %38, %39
  br i1 %cmp50, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %40 = load i32, i32* %b, align 4
  %idxprom52 = zext i32 %40 to i64
  %41 = load i32*, i32** %affect.addr, align 8
  %arrayidx53 = getelementptr inbounds i32, i32* %41, i64 %idxprom52
  %42 = load i32, i32* %arrayidx53, align 4
  %tobool54 = icmp ne i32 %42, 0
  br i1 %tobool54, label %if.else, label %if.then.55

if.then.55:                                       ; preds = %for.body
  %43 = load i32, i32* %b, align 4
  %idxprom56 = zext i32 %43 to i64
  %44 = load i8*, i8** %src1.addr, align 8
  %arrayidx57 = getelementptr inbounds i8, i8* %44, i64 %idxprom56
  %45 = load i8, i8* %arrayidx57, align 1
  %46 = load i32, i32* %b, align 4
  %idxprom58 = zext i32 %46 to i64
  %47 = load i8*, i8** %dest.addr, align 8
  %arrayidx59 = getelementptr inbounds i8, i8* %47, i64 %idxprom58
  store i8 %45, i8* %arrayidx59, align 1
  br label %if.end.113

if.else:                                          ; preds = %for.body
  %48 = load i32, i32* %b, align 4
  %idxprom60 = zext i32 %48 to i64
  %49 = load i8*, i8** %src2.addr, align 8
  %arrayidx61 = getelementptr inbounds i8, i8* %49, i64 %idxprom60
  %50 = load i8, i8* %arrayidx61, align 1
  %conv62 = zext i8 %50 to i32
  %51 = load i32, i32* %b, align 4
  %idxprom63 = zext i32 %51 to i64
  %52 = load i8*, i8** %src1.addr, align 8
  %arrayidx64 = getelementptr inbounds i8, i8* %52, i64 %idxprom63
  %53 = load i8, i8* %arrayidx64, align 1
  %conv65 = zext i8 %53 to i32
  %cmp66 = icmp sgt i32 %conv62, %conv65
  br i1 %cmp66, label %if.then.68, label %if.else.90

if.then.68:                                       ; preds = %if.else
  %54 = load i32, i32* %b, align 4
  %idxprom70 = zext i32 %54 to i64
  %55 = load i8*, i8** %src2.addr, align 8
  %arrayidx71 = getelementptr inbounds i8, i8* %55, i64 %idxprom70
  %56 = load i8, i8* %arrayidx71, align 1
  %conv72 = zext i8 %56 to i32
  %57 = load i32, i32* %b, align 4
  %idxprom73 = zext i32 %57 to i64
  %58 = load i8*, i8** %src1.addr, align 8
  %arrayidx74 = getelementptr inbounds i8, i8* %58, i64 %idxprom73
  %59 = load i8, i8* %arrayidx74, align 1
  %conv75 = zext i8 %59 to i32
  %sub76 = sub nsw i32 %conv72, %conv75
  %60 = load i32, i32* %ratio, align 4
  %mul77 = mul i32 %sub76, %60
  store i32 %mul77, i32* %t, align 4
  %61 = load i32, i32* %b, align 4
  %idxprom78 = zext i32 %61 to i64
  %62 = load i8*, i8** %src1.addr, align 8
  %arrayidx79 = getelementptr inbounds i8, i8* %62, i64 %idxprom78
  %63 = load i8, i8* %arrayidx79, align 1
  %conv80 = zext i8 %63 to i32
  %64 = load i32, i32* %t, align 4
  %div81 = udiv i32 %64, 255
  %65 = load i32, i32* %t, align 4
  %rem82 = urem i32 %65, 255
  %cmp83 = icmp ugt i32 %rem82, 127
  %conv84 = zext i1 %cmp83 to i32
  %add85 = add i32 %div81, %conv84
  %add86 = add i32 %conv80, %add85
  %conv87 = trunc i32 %add86 to i8
  %66 = load i32, i32* %b, align 4
  %idxprom88 = zext i32 %66 to i64
  %67 = load i8*, i8** %dest.addr, align 8
  %arrayidx89 = getelementptr inbounds i8, i8* %67, i64 %idxprom88
  store i8 %conv87, i8* %arrayidx89, align 1
  br label %if.end

if.else.90:                                       ; preds = %if.else
  %68 = load i32, i32* %b, align 4
  %idxprom93 = zext i32 %68 to i64
  %69 = load i8*, i8** %src1.addr, align 8
  %arrayidx94 = getelementptr inbounds i8, i8* %69, i64 %idxprom93
  %70 = load i8, i8* %arrayidx94, align 1
  %conv95 = zext i8 %70 to i32
  %71 = load i32, i32* %b, align 4
  %idxprom96 = zext i32 %71 to i64
  %72 = load i8*, i8** %src2.addr, align 8
  %arrayidx97 = getelementptr inbounds i8, i8* %72, i64 %idxprom96
  %73 = load i8, i8* %arrayidx97, align 1
  %conv98 = zext i8 %73 to i32
  %sub99 = sub nsw i32 %conv95, %conv98
  %74 = load i32, i32* %ratio, align 4
  %mul100 = mul i32 %sub99, %74
  store i32 %mul100, i32* %t92, align 4
  %75 = load i32, i32* %b, align 4
  %idxprom101 = zext i32 %75 to i64
  %76 = load i8*, i8** %src1.addr, align 8
  %arrayidx102 = getelementptr inbounds i8, i8* %76, i64 %idxprom101
  %77 = load i8, i8* %arrayidx102, align 1
  %conv103 = zext i8 %77 to i32
  %78 = load i32, i32* %t92, align 4
  %div104 = udiv i32 %78, 255
  %79 = load i32, i32* %t92, align 4
  %rem105 = urem i32 %79, 255
  %cmp106 = icmp ugt i32 %rem105, 127
  %conv107 = zext i1 %cmp106 to i32
  %add108 = add i32 %div104, %conv107
  %sub109 = sub i32 %conv103, %add108
  %conv110 = trunc i32 %sub109 to i8
  %80 = load i32, i32* %b, align 4
  %idxprom111 = zext i32 %80 to i64
  %81 = load i8*, i8** %dest.addr, align 8
  %arrayidx112 = getelementptr inbounds i8, i8* %81, i64 %idxprom111
  store i8 %conv110, i8* %arrayidx112, align 1
  br label %if.end

if.end:                                           ; preds = %if.else.90, %if.then.68
  br label %if.end.113

if.end.113:                                       ; preds = %if.end, %if.then.55
  br label %for.inc

for.inc:                                          ; preds = %if.end.113
  %82 = load i32, i32* %b, align 4
  %inc = add i32 %82, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.126

if.else.114:                                      ; preds = %cond.end.19
  store i32 0, i32* %b, align 4
  br label %for.cond.115

for.cond.115:                                     ; preds = %for.inc.123, %if.else.114
  %83 = load i32, i32* %b, align 4
  %84 = load i32, i32* %alpha, align 4
  %cmp116 = icmp ult i32 %83, %84
  br i1 %cmp116, label %for.body.118, label %for.end.125

for.body.118:                                     ; preds = %for.cond.115
  %85 = load i32, i32* %b, align 4
  %idxprom119 = zext i32 %85 to i64
  %86 = load i8*, i8** %src1.addr, align 8
  %arrayidx120 = getelementptr inbounds i8, i8* %86, i64 %idxprom119
  %87 = load i8, i8* %arrayidx120, align 1
  %88 = load i32, i32* %b, align 4
  %idxprom121 = zext i32 %88 to i64
  %89 = load i8*, i8** %dest.addr, align 8
  %arrayidx122 = getelementptr inbounds i8, i8* %89, i64 %idxprom121
  store i8 %87, i8* %arrayidx122, align 1
  br label %for.inc.123

for.inc.123:                                      ; preds = %for.body.118
  %90 = load i32, i32* %b, align 4
  %inc124 = add i32 %90, 1
  store i32 %inc124, i32* %b, align 4
  br label %for.cond.115

for.end.125:                                      ; preds = %for.cond.115
  br label %if.end.126

if.end.126:                                       ; preds = %for.end.125, %for.end
  %91 = load i32, i32* %has_alpha1, align 4
  %tobool127 = icmp ne i32 %91, 0
  br i1 %tobool127, label %if.then.128, label %if.end.143

if.then.128:                                      ; preds = %if.end.126
  %92 = load i32, i32* %alpha, align 4
  %idxprom129 = zext i32 %92 to i64
  %93 = load i32*, i32** %affect.addr, align 8
  %arrayidx130 = getelementptr inbounds i32, i32* %93, i64 %idxprom129
  %94 = load i32, i32* %arrayidx130, align 4
  %tobool131 = icmp ne i32 %94, 0
  br i1 %tobool131, label %cond.true.132, label %cond.false.134

cond.true.132:                                    ; preds = %if.then.128
  %95 = load i8, i8* %new_alpha, align 1
  %conv133 = zext i8 %95 to i32
  br label %cond.end.138

cond.false.134:                                   ; preds = %if.then.128
  %96 = load i32, i32* %alpha, align 4
  %idxprom135 = zext i32 %96 to i64
  %97 = load i8*, i8** %src1.addr, align 8
  %arrayidx136 = getelementptr inbounds i8, i8* %97, i64 %idxprom135
  %98 = load i8, i8* %arrayidx136, align 1
  %conv137 = zext i8 %98 to i32
  br label %cond.end.138

cond.end.138:                                     ; preds = %cond.false.134, %cond.true.132
  %cond139 = phi i32 [ %conv133, %cond.true.132 ], [ %conv137, %cond.false.134 ]
  %conv140 = trunc i32 %cond139 to i8
  %99 = load i32, i32* %alpha, align 4
  %idxprom141 = zext i32 %99 to i64
  %100 = load i8*, i8** %dest.addr, align 8
  %arrayidx142 = getelementptr inbounds i8, i8* %100, i64 %idxprom141
  store i8 %conv140, i8* %arrayidx142, align 1
  br label %if.end.143

if.end.143:                                       ; preds = %cond.end.138, %if.end.126
  %101 = load i8*, i8** %mask.addr, align 8
  %tobool144 = icmp ne i8* %101, null
  br i1 %tobool144, label %if.then.145, label %if.end.146

if.then.145:                                      ; preds = %if.end.143
  %102 = load i8*, i8** %m, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %102, i32 1
  store i8* %incdec.ptr, i8** %m, align 8
  br label %if.end.146

if.end.146:                                       ; preds = %if.then.145, %if.end.143
  %103 = load i32, i32* %bytes1.addr, align 4
  %104 = load i8*, i8** %src1.addr, align 8
  %idx.ext = zext i32 %103 to i64
  %add.ptr = getelementptr inbounds i8, i8* %104, i64 %idx.ext
  store i8* %add.ptr, i8** %src1.addr, align 8
  %105 = load i32, i32* %bytes2.addr, align 4
  %106 = load i8*, i8** %src2.addr, align 8
  %idx.ext147 = zext i32 %105 to i64
  %add.ptr148 = getelementptr inbounds i8, i8* %106, i64 %idx.ext147
  store i8* %add.ptr148, i8** %src2.addr, align 8
  %107 = load i32, i32* %bytes1.addr, align 4
  %108 = load i8*, i8** %dest.addr, align 8
  %idx.ext149 = zext i32 %107 to i64
  %add.ptr150 = getelementptr inbounds i8, i8* %108, i64 %idx.ext149
  store i8* %add.ptr150, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @replace_indexed_pixels(i8* %src1, i8* %src2, i8* %dest, i8* %mask, i32 %opacity, i32* %affect, i32 %length, i32 %bytes1, i32 %bytes2) #3 {
entry:
  %src1.addr = alloca i8*, align 8
  %src2.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %opacity.addr = alloca i32, align 4
  %affect.addr = alloca i32*, align 8
  %length.addr = alloca i32, align 4
  %bytes1.addr = alloca i32, align 4
  %bytes2.addr = alloca i32, align 4
  %has_alpha1 = alloca i32, align 4
  %has_alpha2 = alloca i32, align 4
  %bytes = alloca i32, align 4
  %m = alloca i8*, align 8
  %b = alloca i32, align 4
  %tmp = alloca i32, align 4
  %mask_alpha = alloca i8, align 1
  store i8* %src1, i8** %src1.addr, align 8
  store i8* %src2, i8** %src2.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32* %affect, i32** %affect.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes1, i32* %bytes1.addr, align 4
  store i32 %bytes2, i32* %bytes2.addr, align 4
  %0 = load i32, i32* %bytes1.addr, align 4
  %neg = xor i32 %0, -1
  %and = and i32 %neg, 1
  store i32 %and, i32* %has_alpha1, align 4
  %1 = load i32, i32* %bytes2.addr, align 4
  %neg1 = xor i32 %1, -1
  %and2 = and i32 %neg1, 1
  store i32 %and2, i32* %has_alpha2, align 4
  %2 = load i32, i32* %bytes1.addr, align 4
  %3 = load i32, i32* %bytes2.addr, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load i32, i32* %bytes1.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load i32, i32* %bytes2.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %4, %cond.true ], [ %5, %cond.false ]
  store i32 %cond, i32* %bytes, align 4
  %6 = load i8*, i8** %mask.addr, align 8
  %tobool = icmp ne i8* %6, null
  br i1 %tobool, label %cond.true.3, label %cond.false.4

cond.true.3:                                      ; preds = %cond.end
  %7 = load i8*, i8** %mask.addr, align 8
  br label %cond.end.5

cond.false.4:                                     ; preds = %cond.end
  br label %cond.end.5

cond.end.5:                                       ; preds = %cond.false.4, %cond.true.3
  %cond6 = phi i8* [ %7, %cond.true.3 ], [ @no_mask, %cond.false.4 ]
  store i8* %cond6, i8** %m, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.39, %cond.end.5
  %8 = load i32, i32* %length.addr, align 4
  %dec = add i32 %8, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool7 = icmp ne i32 %8, 0
  br i1 %tobool7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load i8*, i8** %m, align 8
  %10 = load i8, i8* %9, align 1
  %conv = zext i8 %10 to i32
  %11 = load i32, i32* %opacity.addr, align 4
  %mul = mul i32 %conv, %11
  %add = add i32 %mul, 128
  store i32 %add, i32* %tmp, align 4
  %12 = load i32, i32* %tmp, align 4
  %shr = ashr i32 %12, 8
  %13 = load i32, i32* %tmp, align 4
  %add9 = add nsw i32 %shr, %13
  %shr10 = ashr i32 %add9, 8
  %conv11 = trunc i32 %shr10 to i8
  store i8 %conv11, i8* %mask_alpha, align 1
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %14 = load i32, i32* %b, align 4
  %15 = load i32, i32* %bytes, align 4
  %cmp12 = icmp ult i32 %14, %15
  br i1 %cmp12, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i32, i32* %b, align 4
  %idxprom = zext i32 %16 to i64
  %17 = load i32*, i32** %affect.addr, align 8
  %arrayidx = getelementptr inbounds i32, i32* %17, i64 %idxprom
  %18 = load i32, i32* %arrayidx, align 4
  %tobool14 = icmp ne i32 %18, 0
  br i1 %tobool14, label %land.lhs.true, label %cond.false.21

land.lhs.true:                                    ; preds = %for.body
  %19 = load i8, i8* %mask_alpha, align 1
  %conv15 = zext i8 %19 to i32
  %tobool16 = icmp ne i32 %conv15, 0
  br i1 %tobool16, label %cond.true.17, label %cond.false.21

cond.true.17:                                     ; preds = %land.lhs.true
  %20 = load i32, i32* %b, align 4
  %idxprom18 = zext i32 %20 to i64
  %21 = load i8*, i8** %src2.addr, align 8
  %arrayidx19 = getelementptr inbounds i8, i8* %21, i64 %idxprom18
  %22 = load i8, i8* %arrayidx19, align 1
  %conv20 = zext i8 %22 to i32
  br label %cond.end.25

cond.false.21:                                    ; preds = %land.lhs.true, %for.body
  %23 = load i32, i32* %b, align 4
  %idxprom22 = zext i32 %23 to i64
  %24 = load i8*, i8** %src1.addr, align 8
  %arrayidx23 = getelementptr inbounds i8, i8* %24, i64 %idxprom22
  %25 = load i8, i8* %arrayidx23, align 1
  %conv24 = zext i8 %25 to i32
  br label %cond.end.25

cond.end.25:                                      ; preds = %cond.false.21, %cond.true.17
  %cond26 = phi i32 [ %conv20, %cond.true.17 ], [ %conv24, %cond.false.21 ]
  %conv27 = trunc i32 %cond26 to i8
  %26 = load i32, i32* %b, align 4
  %idxprom28 = zext i32 %26 to i64
  %27 = load i8*, i8** %dest.addr, align 8
  %arrayidx29 = getelementptr inbounds i8, i8* %27, i64 %idxprom28
  store i8 %conv27, i8* %arrayidx29, align 1
  br label %for.inc

for.inc:                                          ; preds = %cond.end.25
  %28 = load i32, i32* %b, align 4
  %inc = add i32 %28, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %29 = load i32, i32* %has_alpha1, align 4
  %tobool30 = icmp ne i32 %29, 0
  br i1 %tobool30, label %land.lhs.true.31, label %if.end

land.lhs.true.31:                                 ; preds = %for.end
  %30 = load i32, i32* %has_alpha2, align 4
  %tobool32 = icmp ne i32 %30, 0
  br i1 %tobool32, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true.31
  %31 = load i32, i32* %b, align 4
  %idxprom33 = zext i32 %31 to i64
  %32 = load i8*, i8** %src1.addr, align 8
  %arrayidx34 = getelementptr inbounds i8, i8* %32, i64 %idxprom33
  %33 = load i8, i8* %arrayidx34, align 1
  %34 = load i32, i32* %b, align 4
  %idxprom35 = zext i32 %34 to i64
  %35 = load i8*, i8** %dest.addr, align 8
  %arrayidx36 = getelementptr inbounds i8, i8* %35, i64 %idxprom35
  store i8 %33, i8* %arrayidx36, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.31, %for.end
  %36 = load i8*, i8** %mask.addr, align 8
  %tobool37 = icmp ne i8* %36, null
  br i1 %tobool37, label %if.then.38, label %if.end.39

if.then.38:                                       ; preds = %if.end
  %37 = load i8*, i8** %m, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %37, i32 1
  store i8* %incdec.ptr, i8** %m, align 8
  br label %if.end.39

if.end.39:                                        ; preds = %if.then.38, %if.end
  %38 = load i32, i32* %bytes1.addr, align 4
  %39 = load i8*, i8** %src1.addr, align 8
  %idx.ext = zext i32 %38 to i64
  %add.ptr = getelementptr inbounds i8, i8* %39, i64 %idx.ext
  store i8* %add.ptr, i8** %src1.addr, align 8
  %40 = load i32, i32* %bytes2.addr, align 4
  %41 = load i8*, i8** %src2.addr, align 8
  %idx.ext40 = zext i32 %40 to i64
  %add.ptr41 = getelementptr inbounds i8, i8* %41, i64 %idx.ext40
  store i8* %add.ptr41, i8** %src2.addr, align 8
  %42 = load i32, i32* %bytes1.addr, align 4
  %43 = load i8*, i8** %dest.addr, align 8
  %idx.ext42 = zext i32 %42 to i64
  %add.ptr43 = getelementptr inbounds i8, i8* %43, i64 %idx.ext42
  store i8* %add.ptr43, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @erase_inten_pixels(i8* %src1, i8* %src2, i8* %dest, i8* %mask, i32 %opacity, i32* %affect, i32 %length, i32 %bytes) #3 {
entry:
  %src1.addr = alloca i8*, align 8
  %src2.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %opacity.addr = alloca i32, align 4
  %affect.addr = alloca i32*, align 8
  %length.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %alpha = alloca i32, align 4
  %b = alloca i32, align 4
  %src2_alpha = alloca i8, align 1
  %tmp = alloca i64, align 8
  %m = alloca i8*, align 8
  %m35 = alloca i8*, align 8
  store i8* %src1, i8** %src1.addr, align 8
  store i8* %src2, i8** %src2.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32* %affect, i32** %affect.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %0 = load i32, i32* %bytes.addr, align 4
  %sub = sub i32 %0, 1
  store i32 %sub, i32* %alpha, align 4
  %1 = load i8*, i8** %mask.addr, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %mask.addr, align 8
  store i8* %2, i8** %m, align 8
  br label %while.cond

while.cond:                                       ; preds = %for.end, %if.then
  %3 = load i32, i32* %length.addr, align 4
  %dec = add i32 %3, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool2 = icmp ne i32 %3, 0
  br i1 %tobool2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %4 = load i32, i32* %b, align 4
  %5 = load i32, i32* %alpha, align 4
  %cmp = icmp ult i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %b, align 4
  %idxprom = zext i32 %6 to i64
  %7 = load i8*, i8** %src1.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %7, i64 %idxprom
  %8 = load i8, i8* %arrayidx, align 1
  %9 = load i32, i32* %b, align 4
  %idxprom3 = zext i32 %9 to i64
  %10 = load i8*, i8** %dest.addr, align 8
  %arrayidx4 = getelementptr inbounds i8, i8* %10, i64 %idxprom3
  store i8 %8, i8* %arrayidx4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %b, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %alpha, align 4
  %idxprom5 = zext i32 %12 to i64
  %13 = load i8*, i8** %src2.addr, align 8
  %arrayidx6 = getelementptr inbounds i8, i8* %13, i64 %idxprom5
  %14 = load i8, i8* %arrayidx6, align 1
  %conv = zext i8 %14 to i32
  %15 = load i8*, i8** %m, align 8
  %16 = load i8, i8* %15, align 1
  %conv7 = zext i8 %16 to i32
  %mul = mul nsw i32 %conv, %conv7
  %17 = load i32, i32* %opacity.addr, align 4
  %mul8 = mul i32 %mul, %17
  %add = add i32 %mul8, 32603
  %conv9 = zext i32 %add to i64
  store i64 %conv9, i64* %tmp, align 8
  %18 = load i64, i64* %tmp, align 8
  %shr = ashr i64 %18, 7
  %19 = load i64, i64* %tmp, align 8
  %add10 = add nsw i64 %shr, %19
  %shr11 = ashr i64 %add10, 16
  %conv12 = trunc i64 %shr11 to i8
  store i8 %conv12, i8* %src2_alpha, align 1
  %20 = load i32, i32* %alpha, align 4
  %idxprom13 = zext i32 %20 to i64
  %21 = load i8*, i8** %src1.addr, align 8
  %arrayidx14 = getelementptr inbounds i8, i8* %21, i64 %idxprom13
  %22 = load i8, i8* %arrayidx14, align 1
  %conv15 = zext i8 %22 to i64
  %23 = load i32, i32* %alpha, align 4
  %idxprom16 = zext i32 %23 to i64
  %24 = load i8*, i8** %src1.addr, align 8
  %arrayidx17 = getelementptr inbounds i8, i8* %24, i64 %idxprom16
  %25 = load i8, i8* %arrayidx17, align 1
  %conv18 = zext i8 %25 to i32
  %26 = load i8, i8* %src2_alpha, align 1
  %conv19 = zext i8 %26 to i32
  %mul20 = mul nsw i32 %conv18, %conv19
  %add21 = add nsw i32 %mul20, 128
  %conv22 = sext i32 %add21 to i64
  store i64 %conv22, i64* %tmp, align 8
  %27 = load i64, i64* %tmp, align 8
  %shr23 = ashr i64 %27, 8
  %28 = load i64, i64* %tmp, align 8
  %add24 = add nsw i64 %shr23, %28
  %shr25 = ashr i64 %add24, 8
  %sub26 = sub nsw i64 %conv15, %shr25
  %conv27 = trunc i64 %sub26 to i8
  %29 = load i32, i32* %alpha, align 4
  %idxprom28 = zext i32 %29 to i64
  %30 = load i8*, i8** %dest.addr, align 8
  %arrayidx29 = getelementptr inbounds i8, i8* %30, i64 %idxprom28
  store i8 %conv27, i8* %arrayidx29, align 1
  %31 = load i8*, i8** %m, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %31, i32 1
  store i8* %incdec.ptr, i8** %m, align 8
  %32 = load i32, i32* %bytes.addr, align 4
  %33 = load i8*, i8** %src1.addr, align 8
  %idx.ext = zext i32 %32 to i64
  %add.ptr = getelementptr inbounds i8, i8* %33, i64 %idx.ext
  store i8* %add.ptr, i8** %src1.addr, align 8
  %34 = load i32, i32* %bytes.addr, align 4
  %35 = load i8*, i8** %src2.addr, align 8
  %idx.ext30 = zext i32 %34 to i64
  %add.ptr31 = getelementptr inbounds i8, i8* %35, i64 %idx.ext30
  store i8* %add.ptr31, i8** %src2.addr, align 8
  %36 = load i32, i32* %bytes.addr, align 4
  %37 = load i8*, i8** %dest.addr, align 8
  %idx.ext32 = zext i32 %36 to i64
  %add.ptr33 = getelementptr inbounds i8, i8* %37, i64 %idx.ext32
  store i8* %add.ptr33, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.else:                                          ; preds = %entry
  store i8* @no_mask, i8** %m35, align 8
  br label %while.cond.36

while.cond.36:                                    ; preds = %for.end.50, %if.else
  %38 = load i32, i32* %length.addr, align 4
  %dec37 = add i32 %38, -1
  store i32 %dec37, i32* %length.addr, align 4
  %tobool38 = icmp ne i32 %38, 0
  br i1 %tobool38, label %while.body.39, label %while.end.86

while.body.39:                                    ; preds = %while.cond.36
  store i32 0, i32* %b, align 4
  br label %for.cond.40

for.cond.40:                                      ; preds = %for.inc.48, %while.body.39
  %39 = load i32, i32* %b, align 4
  %40 = load i32, i32* %alpha, align 4
  %cmp41 = icmp ult i32 %39, %40
  br i1 %cmp41, label %for.body.43, label %for.end.50

for.body.43:                                      ; preds = %for.cond.40
  %41 = load i32, i32* %b, align 4
  %idxprom44 = zext i32 %41 to i64
  %42 = load i8*, i8** %src1.addr, align 8
  %arrayidx45 = getelementptr inbounds i8, i8* %42, i64 %idxprom44
  %43 = load i8, i8* %arrayidx45, align 1
  %44 = load i32, i32* %b, align 4
  %idxprom46 = zext i32 %44 to i64
  %45 = load i8*, i8** %dest.addr, align 8
  %arrayidx47 = getelementptr inbounds i8, i8* %45, i64 %idxprom46
  store i8 %43, i8* %arrayidx47, align 1
  br label %for.inc.48

for.inc.48:                                       ; preds = %for.body.43
  %46 = load i32, i32* %b, align 4
  %inc49 = add i32 %46, 1
  store i32 %inc49, i32* %b, align 4
  br label %for.cond.40

for.end.50:                                       ; preds = %for.cond.40
  %47 = load i32, i32* %alpha, align 4
  %idxprom51 = zext i32 %47 to i64
  %48 = load i8*, i8** %src2.addr, align 8
  %arrayidx52 = getelementptr inbounds i8, i8* %48, i64 %idxprom51
  %49 = load i8, i8* %arrayidx52, align 1
  %conv53 = zext i8 %49 to i32
  %50 = load i8*, i8** %m35, align 8
  %51 = load i8, i8* %50, align 1
  %conv54 = zext i8 %51 to i32
  %mul55 = mul nsw i32 %conv53, %conv54
  %52 = load i32, i32* %opacity.addr, align 4
  %mul56 = mul i32 %mul55, %52
  %add57 = add i32 %mul56, 32603
  %conv58 = zext i32 %add57 to i64
  store i64 %conv58, i64* %tmp, align 8
  %53 = load i64, i64* %tmp, align 8
  %shr59 = ashr i64 %53, 7
  %54 = load i64, i64* %tmp, align 8
  %add60 = add nsw i64 %shr59, %54
  %shr61 = ashr i64 %add60, 16
  %conv62 = trunc i64 %shr61 to i8
  store i8 %conv62, i8* %src2_alpha, align 1
  %55 = load i32, i32* %alpha, align 4
  %idxprom63 = zext i32 %55 to i64
  %56 = load i8*, i8** %src1.addr, align 8
  %arrayidx64 = getelementptr inbounds i8, i8* %56, i64 %idxprom63
  %57 = load i8, i8* %arrayidx64, align 1
  %conv65 = zext i8 %57 to i64
  %58 = load i32, i32* %alpha, align 4
  %idxprom66 = zext i32 %58 to i64
  %59 = load i8*, i8** %src1.addr, align 8
  %arrayidx67 = getelementptr inbounds i8, i8* %59, i64 %idxprom66
  %60 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %60 to i32
  %61 = load i8, i8* %src2_alpha, align 1
  %conv69 = zext i8 %61 to i32
  %mul70 = mul nsw i32 %conv68, %conv69
  %add71 = add nsw i32 %mul70, 128
  %conv72 = sext i32 %add71 to i64
  store i64 %conv72, i64* %tmp, align 8
  %62 = load i64, i64* %tmp, align 8
  %shr73 = ashr i64 %62, 8
  %63 = load i64, i64* %tmp, align 8
  %add74 = add nsw i64 %shr73, %63
  %shr75 = ashr i64 %add74, 8
  %sub76 = sub nsw i64 %conv65, %shr75
  %conv77 = trunc i64 %sub76 to i8
  %64 = load i32, i32* %alpha, align 4
  %idxprom78 = zext i32 %64 to i64
  %65 = load i8*, i8** %dest.addr, align 8
  %arrayidx79 = getelementptr inbounds i8, i8* %65, i64 %idxprom78
  store i8 %conv77, i8* %arrayidx79, align 1
  %66 = load i32, i32* %bytes.addr, align 4
  %67 = load i8*, i8** %src1.addr, align 8
  %idx.ext80 = zext i32 %66 to i64
  %add.ptr81 = getelementptr inbounds i8, i8* %67, i64 %idx.ext80
  store i8* %add.ptr81, i8** %src1.addr, align 8
  %68 = load i32, i32* %bytes.addr, align 4
  %69 = load i8*, i8** %src2.addr, align 8
  %idx.ext82 = zext i32 %68 to i64
  %add.ptr83 = getelementptr inbounds i8, i8* %69, i64 %idx.ext82
  store i8* %add.ptr83, i8** %src2.addr, align 8
  %70 = load i32, i32* %bytes.addr, align 4
  %71 = load i8*, i8** %dest.addr, align 8
  %idx.ext84 = zext i32 %70 to i64
  %add.ptr85 = getelementptr inbounds i8, i8* %71, i64 %idx.ext84
  store i8* %add.ptr85, i8** %dest.addr, align 8
  br label %while.cond.36

while.end.86:                                     ; preds = %while.cond.36
  br label %if.end

if.end:                                           ; preds = %while.end.86, %while.end
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @erase_indexed_pixels(i8* %src1, i8* %src2, i8* %dest, i8* %mask, i32 %opacity, i32* %affect, i32 %length, i32 %bytes) #3 {
entry:
  %src1.addr = alloca i8*, align 8
  %src2.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %opacity.addr = alloca i32, align 4
  %affect.addr = alloca i32*, align 8
  %length.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %alpha = alloca i32, align 4
  %m = alloca i8*, align 8
  %src2_alpha = alloca i8, align 1
  %b = alloca i32, align 4
  %tmp = alloca i64, align 8
  store i8* %src1, i8** %src1.addr, align 8
  store i8* %src2, i8** %src2.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32* %affect, i32** %affect.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %0 = load i32, i32* %bytes.addr, align 4
  %sub = sub i32 %0, 1
  store i32 %sub, i32* %alpha, align 4
  %1 = load i8*, i8** %mask.addr, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i8*, i8** %mask.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %2, %cond.true ], [ @no_mask, %cond.false ]
  store i8* %cond, i8** %m, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %3 = load i32, i32* %length.addr, align 4
  %dec = add i32 %3, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool1 = icmp ne i32 %3, 0
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %4 = load i32, i32* %b, align 4
  %5 = load i32, i32* %alpha, align 4
  %cmp = icmp ult i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %b, align 4
  %idxprom = zext i32 %6 to i64
  %7 = load i8*, i8** %src1.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %7, i64 %idxprom
  %8 = load i8, i8* %arrayidx, align 1
  %9 = load i32, i32* %b, align 4
  %idxprom2 = zext i32 %9 to i64
  %10 = load i8*, i8** %dest.addr, align 8
  %arrayidx3 = getelementptr inbounds i8, i8* %10, i64 %idxprom2
  store i8 %8, i8* %arrayidx3, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %b, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %alpha, align 4
  %idxprom4 = zext i32 %12 to i64
  %13 = load i8*, i8** %src2.addr, align 8
  %arrayidx5 = getelementptr inbounds i8, i8* %13, i64 %idxprom4
  %14 = load i8, i8* %arrayidx5, align 1
  %conv = zext i8 %14 to i32
  %15 = load i8*, i8** %m, align 8
  %16 = load i8, i8* %15, align 1
  %conv6 = zext i8 %16 to i32
  %mul = mul nsw i32 %conv, %conv6
  %17 = load i32, i32* %opacity.addr, align 4
  %mul7 = mul i32 %mul, %17
  %add = add i32 %mul7, 32603
  %conv8 = zext i32 %add to i64
  store i64 %conv8, i64* %tmp, align 8
  %18 = load i64, i64* %tmp, align 8
  %shr = ashr i64 %18, 7
  %19 = load i64, i64* %tmp, align 8
  %add9 = add nsw i64 %shr, %19
  %shr10 = ashr i64 %add9, 16
  %conv11 = trunc i64 %shr10 to i8
  store i8 %conv11, i8* %src2_alpha, align 1
  %20 = load i8, i8* %src2_alpha, align 1
  %conv12 = zext i8 %20 to i32
  %cmp13 = icmp sgt i32 %conv12, 127
  br i1 %cmp13, label %cond.true.15, label %cond.false.16

cond.true.15:                                     ; preds = %for.end
  br label %cond.end.20

cond.false.16:                                    ; preds = %for.end
  %21 = load i32, i32* %alpha, align 4
  %idxprom17 = zext i32 %21 to i64
  %22 = load i8*, i8** %src1.addr, align 8
  %arrayidx18 = getelementptr inbounds i8, i8* %22, i64 %idxprom17
  %23 = load i8, i8* %arrayidx18, align 1
  %conv19 = zext i8 %23 to i32
  br label %cond.end.20

cond.end.20:                                      ; preds = %cond.false.16, %cond.true.15
  %cond21 = phi i32 [ 0, %cond.true.15 ], [ %conv19, %cond.false.16 ]
  %conv22 = trunc i32 %cond21 to i8
  %24 = load i32, i32* %alpha, align 4
  %idxprom23 = zext i32 %24 to i64
  %25 = load i8*, i8** %dest.addr, align 8
  %arrayidx24 = getelementptr inbounds i8, i8* %25, i64 %idxprom23
  store i8 %conv22, i8* %arrayidx24, align 1
  %26 = load i8*, i8** %mask.addr, align 8
  %tobool25 = icmp ne i8* %26, null
  br i1 %tobool25, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.20
  %27 = load i8*, i8** %m, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %27, i32 1
  store i8* %incdec.ptr, i8** %m, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end.20
  %28 = load i32, i32* %bytes.addr, align 4
  %29 = load i8*, i8** %src1.addr, align 8
  %idx.ext = zext i32 %28 to i64
  %add.ptr = getelementptr inbounds i8, i8* %29, i64 %idx.ext
  store i8* %add.ptr, i8** %src1.addr, align 8
  %30 = load i32, i32* %bytes.addr, align 4
  %31 = load i8*, i8** %src2.addr, align 8
  %idx.ext26 = zext i32 %30 to i64
  %add.ptr27 = getelementptr inbounds i8, i8* %31, i64 %idx.ext26
  store i8* %add.ptr27, i8** %src2.addr, align 8
  %32 = load i32, i32* %bytes.addr, align 4
  %33 = load i8*, i8** %dest.addr, align 8
  %idx.ext28 = zext i32 %32 to i64
  %add.ptr29 = getelementptr inbounds i8, i8* %33, i64 %idx.ext28
  store i8* %add.ptr29, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @anti_erase_inten_pixels(i8* %src1, i8* %src2, i8* %dest, i8* %mask, i32 %opacity, i32* %affect, i32 %length, i32 %bytes) #3 {
entry:
  %src1.addr = alloca i8*, align 8
  %src2.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %opacity.addr = alloca i32, align 4
  %affect.addr = alloca i32*, align 8
  %length.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %alpha = alloca i32, align 4
  %m = alloca i8*, align 8
  %b = alloca i32, align 4
  %src2_alpha = alloca i8, align 1
  %tmp = alloca i64, align 8
  store i8* %src1, i8** %src1.addr, align 8
  store i8* %src2, i8** %src2.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32* %affect, i32** %affect.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %0 = load i32, i32* %bytes.addr, align 4
  %sub = sub i32 %0, 1
  store i32 %sub, i32* %alpha, align 4
  %1 = load i8*, i8** %mask.addr, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i8*, i8** %mask.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %2, %cond.true ], [ @no_mask, %cond.false ]
  store i8* %cond, i8** %m, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %3 = load i32, i32* %length.addr, align 4
  %dec = add i32 %3, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool1 = icmp ne i32 %3, 0
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %4 = load i32, i32* %b, align 4
  %5 = load i32, i32* %alpha, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %b, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load i8*, i8** %src1.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %7, i64 %idxprom
  %8 = load i8, i8* %arrayidx, align 1
  %9 = load i32, i32* %b, align 4
  %idxprom2 = sext i32 %9 to i64
  %10 = load i8*, i8** %dest.addr, align 8
  %arrayidx3 = getelementptr inbounds i8, i8* %10, i64 %idxprom2
  store i8 %8, i8* %arrayidx3, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %b, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %alpha, align 4
  %idxprom4 = sext i32 %12 to i64
  %13 = load i8*, i8** %src2.addr, align 8
  %arrayidx5 = getelementptr inbounds i8, i8* %13, i64 %idxprom4
  %14 = load i8, i8* %arrayidx5, align 1
  %conv = zext i8 %14 to i32
  %15 = load i8*, i8** %m, align 8
  %16 = load i8, i8* %15, align 1
  %conv6 = zext i8 %16 to i32
  %mul = mul nsw i32 %conv, %conv6
  %17 = load i32, i32* %opacity.addr, align 4
  %mul7 = mul i32 %mul, %17
  %add = add i32 %mul7, 32603
  %conv8 = zext i32 %add to i64
  store i64 %conv8, i64* %tmp, align 8
  %18 = load i64, i64* %tmp, align 8
  %shr = ashr i64 %18, 7
  %19 = load i64, i64* %tmp, align 8
  %add9 = add nsw i64 %shr, %19
  %shr10 = ashr i64 %add9, 16
  %conv11 = trunc i64 %shr10 to i8
  store i8 %conv11, i8* %src2_alpha, align 1
  %20 = load i32, i32* %alpha, align 4
  %idxprom12 = sext i32 %20 to i64
  %21 = load i8*, i8** %src1.addr, align 8
  %arrayidx13 = getelementptr inbounds i8, i8* %21, i64 %idxprom12
  %22 = load i8, i8* %arrayidx13, align 1
  %conv14 = zext i8 %22 to i64
  %23 = load i32, i32* %alpha, align 4
  %idxprom15 = sext i32 %23 to i64
  %24 = load i8*, i8** %src1.addr, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %24, i64 %idxprom15
  %25 = load i8, i8* %arrayidx16, align 1
  %conv17 = zext i8 %25 to i32
  %sub18 = sub nsw i32 255, %conv17
  %26 = load i8, i8* %src2_alpha, align 1
  %conv19 = zext i8 %26 to i32
  %mul20 = mul nsw i32 %sub18, %conv19
  %add21 = add nsw i32 %mul20, 128
  %conv22 = sext i32 %add21 to i64
  store i64 %conv22, i64* %tmp, align 8
  %27 = load i64, i64* %tmp, align 8
  %shr23 = ashr i64 %27, 8
  %28 = load i64, i64* %tmp, align 8
  %add24 = add nsw i64 %shr23, %28
  %shr25 = ashr i64 %add24, 8
  %add26 = add nsw i64 %conv14, %shr25
  %conv27 = trunc i64 %add26 to i8
  %29 = load i32, i32* %alpha, align 4
  %idxprom28 = sext i32 %29 to i64
  %30 = load i8*, i8** %dest.addr, align 8
  %arrayidx29 = getelementptr inbounds i8, i8* %30, i64 %idxprom28
  store i8 %conv27, i8* %arrayidx29, align 1
  %31 = load i8*, i8** %mask.addr, align 8
  %tobool30 = icmp ne i8* %31, null
  br i1 %tobool30, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %32 = load i8*, i8** %m, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %32, i32 1
  store i8* %incdec.ptr, i8** %m, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  %33 = load i32, i32* %bytes.addr, align 4
  %34 = load i8*, i8** %src1.addr, align 8
  %idx.ext = zext i32 %33 to i64
  %add.ptr = getelementptr inbounds i8, i8* %34, i64 %idx.ext
  store i8* %add.ptr, i8** %src1.addr, align 8
  %35 = load i32, i32* %bytes.addr, align 4
  %36 = load i8*, i8** %src2.addr, align 8
  %idx.ext31 = zext i32 %35 to i64
  %add.ptr32 = getelementptr inbounds i8, i8* %36, i64 %idx.ext31
  store i8* %add.ptr32, i8** %src2.addr, align 8
  %37 = load i32, i32* %bytes.addr, align 4
  %38 = load i8*, i8** %dest.addr, align 8
  %idx.ext33 = zext i32 %37 to i64
  %add.ptr34 = getelementptr inbounds i8, i8* %38, i64 %idx.ext33
  store i8* %add.ptr34, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @anti_erase_indexed_pixels(i8* %src1, i8* %src2, i8* %dest, i8* %mask, i32 %opacity, i32* %affect, i32 %length, i32 %bytes) #3 {
entry:
  %src1.addr = alloca i8*, align 8
  %src2.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %opacity.addr = alloca i32, align 4
  %affect.addr = alloca i32*, align 8
  %length.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %alpha = alloca i32, align 4
  %m = alloca i8*, align 8
  %b = alloca i32, align 4
  %src2_alpha = alloca i8, align 1
  %tmp = alloca i64, align 8
  store i8* %src1, i8** %src1.addr, align 8
  store i8* %src2, i8** %src2.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32* %affect, i32** %affect.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %0 = load i32, i32* %bytes.addr, align 4
  %sub = sub i32 %0, 1
  store i32 %sub, i32* %alpha, align 4
  %1 = load i8*, i8** %mask.addr, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i8*, i8** %mask.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %2, %cond.true ], [ @no_mask, %cond.false ]
  store i8* %cond, i8** %m, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %3 = load i32, i32* %length.addr, align 4
  %dec = add i32 %3, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool1 = icmp ne i32 %3, 0
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %4 = load i32, i32* %b, align 4
  %5 = load i32, i32* %alpha, align 4
  %cmp = icmp ult i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %b, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load i8*, i8** %src1.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %7, i64 %idxprom
  %8 = load i8, i8* %arrayidx, align 1
  %9 = load i32, i32* %b, align 4
  %idxprom2 = sext i32 %9 to i64
  %10 = load i8*, i8** %dest.addr, align 8
  %arrayidx3 = getelementptr inbounds i8, i8* %10, i64 %idxprom2
  store i8 %8, i8* %arrayidx3, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %b, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %alpha, align 4
  %idxprom4 = zext i32 %12 to i64
  %13 = load i8*, i8** %src2.addr, align 8
  %arrayidx5 = getelementptr inbounds i8, i8* %13, i64 %idxprom4
  %14 = load i8, i8* %arrayidx5, align 1
  %conv = zext i8 %14 to i32
  %15 = load i8*, i8** %m, align 8
  %16 = load i8, i8* %15, align 1
  %conv6 = zext i8 %16 to i32
  %mul = mul nsw i32 %conv, %conv6
  %17 = load i32, i32* %opacity.addr, align 4
  %mul7 = mul i32 %mul, %17
  %add = add i32 %mul7, 32603
  %conv8 = zext i32 %add to i64
  store i64 %conv8, i64* %tmp, align 8
  %18 = load i64, i64* %tmp, align 8
  %shr = ashr i64 %18, 7
  %19 = load i64, i64* %tmp, align 8
  %add9 = add nsw i64 %shr, %19
  %shr10 = ashr i64 %add9, 16
  %conv11 = trunc i64 %shr10 to i8
  store i8 %conv11, i8* %src2_alpha, align 1
  %20 = load i8, i8* %src2_alpha, align 1
  %conv12 = zext i8 %20 to i32
  %cmp13 = icmp sgt i32 %conv12, 127
  br i1 %cmp13, label %cond.true.15, label %cond.false.16

cond.true.15:                                     ; preds = %for.end
  br label %cond.end.20

cond.false.16:                                    ; preds = %for.end
  %21 = load i32, i32* %alpha, align 4
  %idxprom17 = zext i32 %21 to i64
  %22 = load i8*, i8** %src1.addr, align 8
  %arrayidx18 = getelementptr inbounds i8, i8* %22, i64 %idxprom17
  %23 = load i8, i8* %arrayidx18, align 1
  %conv19 = zext i8 %23 to i32
  br label %cond.end.20

cond.end.20:                                      ; preds = %cond.false.16, %cond.true.15
  %cond21 = phi i32 [ 255, %cond.true.15 ], [ %conv19, %cond.false.16 ]
  %conv22 = trunc i32 %cond21 to i8
  %24 = load i32, i32* %alpha, align 4
  %idxprom23 = zext i32 %24 to i64
  %25 = load i8*, i8** %dest.addr, align 8
  %arrayidx24 = getelementptr inbounds i8, i8* %25, i64 %idxprom23
  store i8 %conv22, i8* %arrayidx24, align 1
  %26 = load i8*, i8** %mask.addr, align 8
  %tobool25 = icmp ne i8* %26, null
  br i1 %tobool25, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.20
  %27 = load i8*, i8** %m, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %27, i32 1
  store i8* %incdec.ptr, i8** %m, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end.20
  %28 = load i32, i32* %bytes.addr, align 4
  %29 = load i8*, i8** %src1.addr, align 8
  %idx.ext = zext i32 %28 to i64
  %add.ptr = getelementptr inbounds i8, i8* %29, i64 %idx.ext
  store i8* %add.ptr, i8** %src1.addr, align 8
  %30 = load i32, i32* %bytes.addr, align 4
  %31 = load i8*, i8** %src2.addr, align 8
  %idx.ext26 = zext i32 %30 to i64
  %add.ptr27 = getelementptr inbounds i8, i8* %31, i64 %idx.ext26
  store i8* %add.ptr27, i8** %src2.addr, align 8
  %32 = load i32, i32* %bytes.addr, align 4
  %33 = load i8*, i8** %dest.addr, align 8
  %idx.ext28 = zext i32 %32 to i64
  %add.ptr29 = getelementptr inbounds i8, i8* %33, i64 %idx.ext28
  store i8* %add.ptr29, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @color_erase_inten_pixels(i8* %src1, i8* %src2, i8* %dest, i8* %mask, i32 %opacity, i32* %affect, i32 %length, i32 %bytes) #3 {
entry:
  %src1.addr = alloca i8*, align 8
  %src2.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %opacity.addr = alloca i32, align 4
  %affect.addr = alloca i32*, align 8
  %length.addr = alloca i32, align 4
  %bytes.addr = alloca i32, align 4
  %m = alloca i8*, align 8
  %src2_alpha = alloca i8, align 1
  %tmp = alloca i64, align 8
  %bgcolor = alloca %struct._GimpRGB, align 8
  %color = alloca %struct._GimpRGB, align 8
  store i8* %src1, i8** %src1.addr, align 8
  store i8* %src2, i8** %src2.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32* %affect, i32** %affect.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %0 = load i8*, i8** %mask.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i8*, i8** %mask.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %1, %cond.true ], [ @no_mask, %cond.false ]
  store i8* %cond, i8** %m, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %2 = load i32, i32* %length.addr, align 4
  %dec = add i32 %2, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool3 = icmp ne i32 %2, 0
  br i1 %tobool3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %bytes.addr, align 4
  switch i32 %3, label %sw.epilog [
    i32 2, label %sw.bb
    i32 4, label %sw.bb.17
  ]

sw.bb:                                            ; preds = %while.body
  %4 = load i8*, i8** %src2.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 1
  %5 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %5 to i32
  %6 = load i8*, i8** %m, align 8
  %7 = load i8, i8* %6, align 1
  %conv4 = zext i8 %7 to i32
  %mul = mul nsw i32 %conv, %conv4
  %8 = load i32, i32* %opacity.addr, align 4
  %mul5 = mul i32 %mul, %8
  %add = add i32 %mul5, 32603
  %conv6 = zext i32 %add to i64
  store i64 %conv6, i64* %tmp, align 8
  %9 = load i64, i64* %tmp, align 8
  %shr = ashr i64 %9, 7
  %10 = load i64, i64* %tmp, align 8
  %add7 = add nsw i64 %shr, %10
  %shr8 = ashr i64 %add7, 16
  %conv9 = trunc i64 %shr8 to i8
  store i8 %conv9, i8* %src2_alpha, align 1
  %11 = load i8*, i8** %src1.addr, align 8
  %arrayidx10 = getelementptr inbounds i8, i8* %11, i64 0
  %12 = load i8, i8* %arrayidx10, align 1
  %13 = load i8*, i8** %src1.addr, align 8
  %arrayidx11 = getelementptr inbounds i8, i8* %13, i64 0
  %14 = load i8, i8* %arrayidx11, align 1
  %15 = load i8*, i8** %src1.addr, align 8
  %arrayidx12 = getelementptr inbounds i8, i8* %15, i64 0
  %16 = load i8, i8* %arrayidx12, align 1
  %17 = load i8*, i8** %src1.addr, align 8
  %arrayidx13 = getelementptr inbounds i8, i8* %17, i64 1
  %18 = load i8, i8* %arrayidx13, align 1
  call void @gimp_rgba_set_uchar(%struct._GimpRGB* %color, i8 zeroext %12, i8 zeroext %14, i8 zeroext %16, i8 zeroext %18)
  %19 = load i8*, i8** %src2.addr, align 8
  %arrayidx14 = getelementptr inbounds i8, i8* %19, i64 0
  %20 = load i8, i8* %arrayidx14, align 1
  %21 = load i8*, i8** %src2.addr, align 8
  %arrayidx15 = getelementptr inbounds i8, i8* %21, i64 0
  %22 = load i8, i8* %arrayidx15, align 1
  %23 = load i8*, i8** %src2.addr, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %23, i64 0
  %24 = load i8, i8* %arrayidx16, align 1
  %25 = load i8, i8* %src2_alpha, align 1
  call void @gimp_rgba_set_uchar(%struct._GimpRGB* %bgcolor, i8 zeroext %20, i8 zeroext %22, i8 zeroext %24, i8 zeroext %25)
  call void @paint_funcs_color_erase_helper(%struct._GimpRGB* %color, %struct._GimpRGB* %bgcolor)
  %26 = load i8*, i8** %dest.addr, align 8
  %27 = load i8*, i8** %dest.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %27, i64 1
  call void @gimp_rgba_get_uchar(%struct._GimpRGB* %color, i8* %26, i8* null, i8* null, i8* %add.ptr)
  br label %sw.epilog

sw.bb.17:                                         ; preds = %while.body
  %28 = load i8*, i8** %src2.addr, align 8
  %arrayidx18 = getelementptr inbounds i8, i8* %28, i64 3
  %29 = load i8, i8* %arrayidx18, align 1
  %conv19 = zext i8 %29 to i32
  %30 = load i8*, i8** %m, align 8
  %31 = load i8, i8* %30, align 1
  %conv20 = zext i8 %31 to i32
  %mul21 = mul nsw i32 %conv19, %conv20
  %32 = load i32, i32* %opacity.addr, align 4
  %mul22 = mul i32 %mul21, %32
  %add23 = add i32 %mul22, 32603
  %conv24 = zext i32 %add23 to i64
  store i64 %conv24, i64* %tmp, align 8
  %33 = load i64, i64* %tmp, align 8
  %shr25 = ashr i64 %33, 7
  %34 = load i64, i64* %tmp, align 8
  %add26 = add nsw i64 %shr25, %34
  %shr27 = ashr i64 %add26, 16
  %conv28 = trunc i64 %shr27 to i8
  store i8 %conv28, i8* %src2_alpha, align 1
  %35 = load i8*, i8** %src1.addr, align 8
  %arrayidx29 = getelementptr inbounds i8, i8* %35, i64 0
  %36 = load i8, i8* %arrayidx29, align 1
  %37 = load i8*, i8** %src1.addr, align 8
  %arrayidx30 = getelementptr inbounds i8, i8* %37, i64 1
  %38 = load i8, i8* %arrayidx30, align 1
  %39 = load i8*, i8** %src1.addr, align 8
  %arrayidx31 = getelementptr inbounds i8, i8* %39, i64 2
  %40 = load i8, i8* %arrayidx31, align 1
  %41 = load i8*, i8** %src1.addr, align 8
  %arrayidx32 = getelementptr inbounds i8, i8* %41, i64 3
  %42 = load i8, i8* %arrayidx32, align 1
  call void @gimp_rgba_set_uchar(%struct._GimpRGB* %color, i8 zeroext %36, i8 zeroext %38, i8 zeroext %40, i8 zeroext %42)
  %43 = load i8*, i8** %src2.addr, align 8
  %arrayidx33 = getelementptr inbounds i8, i8* %43, i64 0
  %44 = load i8, i8* %arrayidx33, align 1
  %45 = load i8*, i8** %src2.addr, align 8
  %arrayidx34 = getelementptr inbounds i8, i8* %45, i64 1
  %46 = load i8, i8* %arrayidx34, align 1
  %47 = load i8*, i8** %src2.addr, align 8
  %arrayidx35 = getelementptr inbounds i8, i8* %47, i64 2
  %48 = load i8, i8* %arrayidx35, align 1
  %49 = load i8, i8* %src2_alpha, align 1
  call void @gimp_rgba_set_uchar(%struct._GimpRGB* %bgcolor, i8 zeroext %44, i8 zeroext %46, i8 zeroext %48, i8 zeroext %49)
  call void @paint_funcs_color_erase_helper(%struct._GimpRGB* %color, %struct._GimpRGB* %bgcolor)
  %50 = load i8*, i8** %dest.addr, align 8
  %51 = load i8*, i8** %dest.addr, align 8
  %add.ptr36 = getelementptr inbounds i8, i8* %51, i64 1
  %52 = load i8*, i8** %dest.addr, align 8
  %add.ptr37 = getelementptr inbounds i8, i8* %52, i64 2
  %53 = load i8*, i8** %dest.addr, align 8
  %add.ptr38 = getelementptr inbounds i8, i8* %53, i64 3
  call void @gimp_rgba_get_uchar(%struct._GimpRGB* %color, i8* %50, i8* %add.ptr36, i8* %add.ptr37, i8* %add.ptr38)
  br label %sw.epilog

sw.epilog:                                        ; preds = %while.body, %sw.bb.17, %sw.bb
  %54 = load i8*, i8** %mask.addr, align 8
  %tobool39 = icmp ne i8* %54, null
  br i1 %tobool39, label %if.then, label %if.end

if.then:                                          ; preds = %sw.epilog
  %55 = load i8*, i8** %m, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %55, i32 1
  store i8* %incdec.ptr, i8** %m, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %56 = load i32, i32* %bytes.addr, align 4
  %57 = load i8*, i8** %src1.addr, align 8
  %idx.ext = zext i32 %56 to i64
  %add.ptr40 = getelementptr inbounds i8, i8* %57, i64 %idx.ext
  store i8* %add.ptr40, i8** %src1.addr, align 8
  %58 = load i32, i32* %bytes.addr, align 4
  %59 = load i8*, i8** %src2.addr, align 8
  %idx.ext41 = zext i32 %58 to i64
  %add.ptr42 = getelementptr inbounds i8, i8* %59, i64 %idx.ext41
  store i8* %add.ptr42, i8** %src2.addr, align 8
  %60 = load i32, i32* %bytes.addr, align 4
  %61 = load i8*, i8** %dest.addr, align 8
  %idx.ext43 = zext i32 %60 to i64
  %add.ptr44 = getelementptr inbounds i8, i8* %61, i64 %idx.ext43
  store i8* %add.ptr44, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

declare void @gimp_rgba_set_uchar(%struct._GimpRGB*, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext) #2

declare void @gimp_rgba_get_uchar(%struct._GimpRGB*, i8*, i8*, i8*, i8*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal void @replace_pixels(i8* %src1, i8* %src2, i8* %dest, i8* %mask, i32 %length, i32 %opacity, i32* %affect, i32 %bytes1, i32 %bytes2) #3 {
entry:
  %src1.addr = alloca i8*, align 8
  %src2.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %mask.addr = alloca i8*, align 8
  %length.addr = alloca i32, align 4
  %opacity.addr = alloca i32, align 4
  %affect.addr = alloca i32*, align 8
  %bytes1.addr = alloca i32, align 4
  %bytes2.addr = alloca i32, align 4
  %alpha = alloca i32, align 4
  %norm_opacity = alloca double, align 8
  %b = alloca i32, align 4
  %mask_val = alloca double, align 8
  %s1_a = alloca i32, align 4
  %s2_a = alloca i32, align 4
  %a_val = alloca double, align 8
  %new_val = alloca i32, align 4
  %a_recip = alloca double, align 8
  %new_val107 = alloca i32, align 4
  store i8* %src1, i8** %src1.addr, align 8
  store i8* %src2, i8** %src2.addr, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %mask, i8** %mask.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store i32 %opacity, i32* %opacity.addr, align 4
  store i32* %affect, i32** %affect.addr, align 8
  store i32 %bytes1, i32* %bytes1.addr, align 4
  store i32 %bytes2, i32* %bytes2.addr, align 4
  %0 = load i32, i32* %bytes1.addr, align 4
  %sub = sub nsw i32 %0, 1
  store i32 %sub, i32* %alpha, align 4
  %1 = load i32, i32* %opacity.addr, align 4
  %conv = sitofp i32 %1 to double
  %mul = fmul double %conv, 0x3EF0000000000000
  store double %mul, double* %norm_opacity, align 8
  %2 = load i32, i32* %bytes1.addr, align 4
  %3 = load i32, i32* %bytes2.addr, align 4
  %cmp = icmp ne i32 %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void (i8*, ...) @g_warning(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.5, i32 0, i32 0))
  br label %while.end

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %cond.end.158, %if.end
  %4 = load i32, i32* %length.addr, align 4
  %dec = add nsw i32 %4, -1
  store i32 %dec, i32* %length.addr, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %mask.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 0
  %6 = load i8, i8* %arrayidx, align 1
  %conv2 = zext i8 %6 to i32
  %conv3 = sitofp i32 %conv2 to double
  %7 = load double, double* %norm_opacity, align 8
  %mul4 = fmul double %conv3, %7
  store double %mul4, double* %mask_val, align 8
  %8 = load i32, i32* %alpha, align 4
  %idxprom = sext i32 %8 to i64
  %9 = load i8*, i8** %src1.addr, align 8
  %arrayidx5 = getelementptr inbounds i8, i8* %9, i64 %idxprom
  %10 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %10 to i32
  store i32 %conv6, i32* %s1_a, align 4
  %11 = load i32, i32* %alpha, align 4
  %idxprom7 = sext i32 %11 to i64
  %12 = load i8*, i8** %src2.addr, align 8
  %arrayidx8 = getelementptr inbounds i8, i8* %12, i64 %idxprom7
  %13 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %13 to i32
  store i32 %conv9, i32* %s2_a, align 4
  %14 = load i32, i32* %s1_a, align 4
  %conv10 = sitofp i32 %14 to double
  %15 = load double, double* %mask_val, align 8
  %16 = load i32, i32* %s2_a, align 4
  %17 = load i32, i32* %s1_a, align 4
  %sub11 = sub nsw i32 %16, %17
  %conv12 = sitofp i32 %sub11 to double
  %mul13 = fmul double %15, %conv12
  %add = fadd double %conv10, %mul13
  store double %add, double* %a_val, align 8
  %18 = load double, double* %a_val, align 8
  %cmp14 = fcmp oeq double %18, 0.000000e+00
  br i1 %cmp14, label %if.then.16, label %if.else.102

if.then.16:                                       ; preds = %while.body
  %19 = load i32, i32* %s1_a, align 4
  %20 = load i32, i32* %s2_a, align 4
  %add17 = add nsw i32 %19, %20
  %conv18 = sitofp i32 %add17 to double
  %cmp19 = fcmp oeq double %conv18, 0.000000e+00
  br i1 %cmp19, label %if.then.21, label %if.else

if.then.21:                                       ; preds = %if.then.16
  store i32 0, i32* %b, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.21
  %21 = load i32, i32* %b, align 4
  %22 = load i32, i32* %alpha, align 4
  %cmp22 = icmp ult i32 %21, %22
  br i1 %cmp22, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %23 = load i32, i32* %b, align 4
  %idxprom24 = zext i32 %23 to i64
  %24 = load i8*, i8** %src1.addr, align 8
  %arrayidx25 = getelementptr inbounds i8, i8* %24, i64 %idxprom24
  %25 = load i8, i8* %arrayidx25, align 1
  %conv26 = uitofp i8 %25 to double
  %add27 = fadd double 5.000000e-01, %conv26
  %26 = load double, double* %mask_val, align 8
  %27 = load i32, i32* %b, align 4
  %idxprom28 = zext i32 %27 to i64
  %28 = load i8*, i8** %src2.addr, align 8
  %arrayidx29 = getelementptr inbounds i8, i8* %28, i64 %idxprom28
  %29 = load i8, i8* %arrayidx29, align 1
  %conv30 = uitofp i8 %29 to double
  %30 = load i32, i32* %b, align 4
  %idxprom31 = zext i32 %30 to i64
  %31 = load i8*, i8** %src1.addr, align 8
  %arrayidx32 = getelementptr inbounds i8, i8* %31, i64 %idxprom31
  %32 = load i8, i8* %arrayidx32, align 1
  %conv33 = uitofp i8 %32 to double
  %sub34 = fsub double %conv30, %conv33
  %mul35 = fmul double %26, %sub34
  %add36 = fadd double %add27, %mul35
  %conv37 = fptosi double %add36 to i32
  store i32 %conv37, i32* %new_val, align 4
  %33 = load i32, i32* %b, align 4
  %idxprom38 = zext i32 %33 to i64
  %34 = load i32*, i32** %affect.addr, align 8
  %arrayidx39 = getelementptr inbounds i32, i32* %34, i64 %idxprom38
  %35 = load i32, i32* %arrayidx39, align 4
  %tobool40 = icmp ne i32 %35, 0
  br i1 %tobool40, label %cond.true, label %cond.false.44

cond.true:                                        ; preds = %for.body
  %36 = load i32, i32* %new_val, align 4
  %cmp41 = icmp slt i32 %36, 255
  br i1 %cmp41, label %cond.true.43, label %cond.false

cond.true.43:                                     ; preds = %cond.true
  %37 = load i32, i32* %new_val, align 4
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.43
  %cond = phi i32 [ %37, %cond.true.43 ], [ 255, %cond.false ]
  br label %cond.end.48

cond.false.44:                                    ; preds = %for.body
  %38 = load i32, i32* %b, align 4
  %idxprom45 = zext i32 %38 to i64
  %39 = load i8*, i8** %src1.addr, align 8
  %arrayidx46 = getelementptr inbounds i8, i8* %39, i64 %idxprom45
  %40 = load i8, i8* %arrayidx46, align 1
  %conv47 = zext i8 %40 to i32
  br label %cond.end.48

cond.end.48:                                      ; preds = %cond.false.44, %cond.end
  %cond49 = phi i32 [ %cond, %cond.end ], [ %conv47, %cond.false.44 ]
  %conv50 = trunc i32 %cond49 to i8
  %41 = load i32, i32* %b, align 4
  %idxprom51 = zext i32 %41 to i64
  %42 = load i8*, i8** %dest.addr, align 8
  %arrayidx52 = getelementptr inbounds i8, i8* %42, i64 %idxprom51
  store i8 %conv50, i8* %arrayidx52, align 1
  br label %for.inc

for.inc:                                          ; preds = %cond.end.48
  %43 = load i32, i32* %b, align 4
  %inc = add i32 %43, 1
  store i32 %inc, i32* %b, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.101

if.else:                                          ; preds = %if.then.16
  %44 = load i32, i32* %s1_a, align 4
  %conv53 = sitofp i32 %44 to double
  %45 = load double, double* %mask_val, align 8
  %add54 = fadd double %conv53, %45
  %cmp55 = fcmp oeq double %add54, 0.000000e+00
  br i1 %cmp55, label %if.then.57, label %if.else.69

if.then.57:                                       ; preds = %if.else
  store i32 0, i32* %b, align 4
  br label %for.cond.58

for.cond.58:                                      ; preds = %for.inc.66, %if.then.57
  %46 = load i32, i32* %b, align 4
  %47 = load i32, i32* %alpha, align 4
  %cmp59 = icmp ult i32 %46, %47
  br i1 %cmp59, label %for.body.61, label %for.end.68

for.body.61:                                      ; preds = %for.cond.58
  %48 = load i32, i32* %b, align 4
  %idxprom62 = zext i32 %48 to i64
  %49 = load i8*, i8** %src1.addr, align 8
  %arrayidx63 = getelementptr inbounds i8, i8* %49, i64 %idxprom62
  %50 = load i8, i8* %arrayidx63, align 1
  %51 = load i32, i32* %b, align 4
  %idxprom64 = zext i32 %51 to i64
  %52 = load i8*, i8** %dest.addr, align 8
  %arrayidx65 = getelementptr inbounds i8, i8* %52, i64 %idxprom64
  store i8 %50, i8* %arrayidx65, align 1
  br label %for.inc.66

for.inc.66:                                       ; preds = %for.body.61
  %53 = load i32, i32* %b, align 4
  %inc67 = add i32 %53, 1
  store i32 %inc67, i32* %b, align 4
  br label %for.cond.58

for.end.68:                                       ; preds = %for.cond.58
  br label %if.end.100

if.else.69:                                       ; preds = %if.else
  %54 = load double, double* %mask_val, align 8
  %sub70 = fsub double 1.000000e+00, %54
  %55 = load i32, i32* %s2_a, align 4
  %conv71 = sitofp i32 %55 to double
  %add72 = fadd double %sub70, %conv71
  %cmp73 = fcmp oeq double %add72, 0.000000e+00
  br i1 %cmp73, label %if.then.75, label %if.end.99

if.then.75:                                       ; preds = %if.else.69
  store i32 0, i32* %b, align 4
  br label %for.cond.76

for.cond.76:                                      ; preds = %for.inc.96, %if.then.75
  %56 = load i32, i32* %b, align 4
  %57 = load i32, i32* %alpha, align 4
  %cmp77 = icmp ult i32 %56, %57
  br i1 %cmp77, label %for.body.79, label %for.end.98

for.body.79:                                      ; preds = %for.cond.76
  %58 = load i32, i32* %b, align 4
  %idxprom80 = zext i32 %58 to i64
  %59 = load i32*, i32** %affect.addr, align 8
  %arrayidx81 = getelementptr inbounds i32, i32* %59, i64 %idxprom80
  %60 = load i32, i32* %arrayidx81, align 4
  %tobool82 = icmp ne i32 %60, 0
  br i1 %tobool82, label %cond.true.83, label %cond.false.87

cond.true.83:                                     ; preds = %for.body.79
  %61 = load i32, i32* %b, align 4
  %idxprom84 = zext i32 %61 to i64
  %62 = load i8*, i8** %src2.addr, align 8
  %arrayidx85 = getelementptr inbounds i8, i8* %62, i64 %idxprom84
  %63 = load i8, i8* %arrayidx85, align 1
  %conv86 = zext i8 %63 to i32
  br label %cond.end.91

cond.false.87:                                    ; preds = %for.body.79
  %64 = load i32, i32* %b, align 4
  %idxprom88 = zext i32 %64 to i64
  %65 = load i8*, i8** %src1.addr, align 8
  %arrayidx89 = getelementptr inbounds i8, i8* %65, i64 %idxprom88
  %66 = load i8, i8* %arrayidx89, align 1
  %conv90 = zext i8 %66 to i32
  br label %cond.end.91

cond.end.91:                                      ; preds = %cond.false.87, %cond.true.83
  %cond92 = phi i32 [ %conv86, %cond.true.83 ], [ %conv90, %cond.false.87 ]
  %conv93 = trunc i32 %cond92 to i8
  %67 = load i32, i32* %b, align 4
  %idxprom94 = zext i32 %67 to i64
  %68 = load i8*, i8** %dest.addr, align 8
  %arrayidx95 = getelementptr inbounds i8, i8* %68, i64 %idxprom94
  store i8 %conv93, i8* %arrayidx95, align 1
  br label %for.inc.96

for.inc.96:                                       ; preds = %cond.end.91
  %69 = load i32, i32* %b, align 4
  %inc97 = add i32 %69, 1
  store i32 %inc97, i32* %b, align 4
  br label %for.cond.76

for.end.98:                                       ; preds = %for.cond.76
  br label %if.end.99

if.end.99:                                        ; preds = %for.end.98, %if.else.69
  br label %if.end.100

if.end.100:                                       ; preds = %if.end.99, %for.end.68
  br label %if.end.101

if.end.101:                                       ; preds = %if.end.100, %for.end
  br label %if.end.150

if.else.102:                                      ; preds = %while.body
  %70 = load double, double* %a_val, align 8
  %div = fdiv double 1.000000e+00, %70
  store double %div, double* %a_recip, align 8
  store i32 0, i32* %b, align 4
  br label %for.cond.103

for.cond.103:                                     ; preds = %for.inc.147, %if.else.102
  %71 = load i32, i32* %b, align 4
  %72 = load i32, i32* %alpha, align 4
  %cmp104 = icmp ult i32 %71, %72
  br i1 %cmp104, label %for.body.106, label %for.end.149

for.body.106:                                     ; preds = %for.cond.103
  %73 = load double, double* %a_recip, align 8
  %74 = load i32, i32* %b, align 4
  %idxprom108 = zext i32 %74 to i64
  %75 = load i8*, i8** %src1.addr, align 8
  %arrayidx109 = getelementptr inbounds i8, i8* %75, i64 %idxprom108
  %76 = load i8, i8* %arrayidx109, align 1
  %conv110 = zext i8 %76 to i32
  %77 = load i32, i32* %s1_a, align 4
  %mul111 = mul nsw i32 %conv110, %77
  %conv112 = sitofp i32 %mul111 to double
  %78 = load double, double* %mask_val, align 8
  %79 = load i32, i32* %b, align 4
  %idxprom113 = zext i32 %79 to i64
  %80 = load i8*, i8** %src2.addr, align 8
  %arrayidx114 = getelementptr inbounds i8, i8* %80, i64 %idxprom113
  %81 = load i8, i8* %arrayidx114, align 1
  %conv115 = zext i8 %81 to i32
  %82 = load i32, i32* %s2_a, align 4
  %mul116 = mul nsw i32 %conv115, %82
  %83 = load i32, i32* %b, align 4
  %idxprom117 = zext i32 %83 to i64
  %84 = load i8*, i8** %src1.addr, align 8
  %arrayidx118 = getelementptr inbounds i8, i8* %84, i64 %idxprom117
  %85 = load i8, i8* %arrayidx118, align 1
  %conv119 = zext i8 %85 to i32
  %86 = load i32, i32* %s1_a, align 4
  %mul120 = mul nsw i32 %conv119, %86
  %sub121 = sub nsw i32 %mul116, %mul120
  %conv122 = sitofp i32 %sub121 to double
  %mul123 = fmul double %78, %conv122
  %add124 = fadd double %conv112, %mul123
  %mul125 = fmul double %73, %add124
  %add126 = fadd double 5.000000e-01, %mul125
  %conv127 = fptosi double %add126 to i32
  store i32 %conv127, i32* %new_val107, align 4
  %87 = load i32, i32* %b, align 4
  %idxprom128 = zext i32 %87 to i64
  %88 = load i32*, i32** %affect.addr, align 8
  %arrayidx129 = getelementptr inbounds i32, i32* %88, i64 %idxprom128
  %89 = load i32, i32* %arrayidx129, align 4
  %tobool130 = icmp ne i32 %89, 0
  br i1 %tobool130, label %cond.true.131, label %cond.false.138

cond.true.131:                                    ; preds = %for.body.106
  %90 = load i32, i32* %new_val107, align 4
  %cmp132 = icmp slt i32 %90, 255
  br i1 %cmp132, label %cond.true.134, label %cond.false.135

cond.true.134:                                    ; preds = %cond.true.131
  %91 = load i32, i32* %new_val107, align 4
  br label %cond.end.136

cond.false.135:                                   ; preds = %cond.true.131
  br label %cond.end.136

cond.end.136:                                     ; preds = %cond.false.135, %cond.true.134
  %cond137 = phi i32 [ %91, %cond.true.134 ], [ 255, %cond.false.135 ]
  br label %cond.end.142

cond.false.138:                                   ; preds = %for.body.106
  %92 = load i32, i32* %b, align 4
  %idxprom139 = zext i32 %92 to i64
  %93 = load i8*, i8** %src1.addr, align 8
  %arrayidx140 = getelementptr inbounds i8, i8* %93, i64 %idxprom139
  %94 = load i8, i8* %arrayidx140, align 1
  %conv141 = zext i8 %94 to i32
  br label %cond.end.142

cond.end.142:                                     ; preds = %cond.false.138, %cond.end.136
  %cond143 = phi i32 [ %cond137, %cond.end.136 ], [ %conv141, %cond.false.138 ]
  %conv144 = trunc i32 %cond143 to i8
  %95 = load i32, i32* %b, align 4
  %idxprom145 = zext i32 %95 to i64
  %96 = load i8*, i8** %dest.addr, align 8
  %arrayidx146 = getelementptr inbounds i8, i8* %96, i64 %idxprom145
  store i8 %conv144, i8* %arrayidx146, align 1
  br label %for.inc.147

for.inc.147:                                      ; preds = %cond.end.142
  %97 = load i32, i32* %b, align 4
  %inc148 = add i32 %97, 1
  store i32 %inc148, i32* %b, align 4
  br label %for.cond.103

for.end.149:                                      ; preds = %for.cond.103
  br label %if.end.150

if.end.150:                                       ; preds = %for.end.149, %if.end.101
  %98 = load i32, i32* %alpha, align 4
  %idxprom151 = sext i32 %98 to i64
  %99 = load i32*, i32** %affect.addr, align 8
  %arrayidx152 = getelementptr inbounds i32, i32* %99, i64 %idxprom151
  %100 = load i32, i32* %arrayidx152, align 4
  %tobool153 = icmp ne i32 %100, 0
  br i1 %tobool153, label %cond.true.154, label %cond.false.156

cond.true.154:                                    ; preds = %if.end.150
  %101 = load double, double* %a_val, align 8
  %add155 = fadd double %101, 5.000000e-01
  br label %cond.end.158

cond.false.156:                                   ; preds = %if.end.150
  %102 = load i32, i32* %s1_a, align 4
  %conv157 = sitofp i32 %102 to double
  br label %cond.end.158

cond.end.158:                                     ; preds = %cond.false.156, %cond.true.154
  %cond159 = phi double [ %add155, %cond.true.154 ], [ %conv157, %cond.false.156 ]
  %conv160 = fptoui double %cond159 to i8
  %103 = load i32, i32* %alpha, align 4
  %idxprom161 = sext i32 %103 to i64
  %104 = load i8*, i8** %dest.addr, align 8
  %arrayidx162 = getelementptr inbounds i8, i8* %104, i64 %idxprom161
  store i8 %conv160, i8* %arrayidx162, align 1
  %105 = load i32, i32* %bytes1.addr, align 4
  %106 = load i8*, i8** %src1.addr, align 8
  %idx.ext = sext i32 %105 to i64
  %add.ptr = getelementptr inbounds i8, i8* %106, i64 %idx.ext
  store i8* %add.ptr, i8** %src1.addr, align 8
  %107 = load i32, i32* %bytes2.addr, align 4
  %108 = load i8*, i8** %src2.addr, align 8
  %idx.ext163 = sext i32 %107 to i64
  %add.ptr164 = getelementptr inbounds i8, i8* %108, i64 %idx.ext163
  store i8* %add.ptr164, i8** %src2.addr, align 8
  %109 = load i32, i32* %bytes2.addr, align 4
  %110 = load i8*, i8** %dest.addr, align 8
  %idx.ext165 = sext i32 %109 to i64
  %add.ptr166 = getelementptr inbounds i8, i8* %110, i64 %idx.ext165
  store i8* %add.ptr166, i8** %dest.addr, align 8
  %111 = load i8*, i8** %mask.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %111, i32 1
  store i8* %incdec.ptr, i8** %mask.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  ret void
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
