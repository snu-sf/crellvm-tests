; ModuleID = './app/core/gimpviewable.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._GInterfaceInfo = type { void (i8*, i8*)*, void (i8*, i8*)*, i8* }
%struct._GTypeInstance = type { %struct._GTypeClass* }
%struct._GTypeClass = type { i64 }
%struct._GimpViewableClass = type { %struct._GimpObjectClass, i8*, i8*, void (%struct._GimpViewable*)*, void (%struct._GimpViewable*)*, i32 (%struct._GimpViewable*, i32*, i32*)*, void (%struct._GimpViewable*, i32, i32, i32, i32*, i32*)*, i32 (%struct._GimpViewable*, i32, i32, i32, i32*, i32*)*, %struct._TempBuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)*, %struct._TempBuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)*, %struct._GdkPixbuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)*, %struct._GdkPixbuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)*, i8* (%struct._GimpViewable*, i8**)*, %struct._GimpContainer* (%struct._GimpViewable*)*, void (%struct._GimpViewable*, i32)*, i32 (%struct._GimpViewable*)* }
%struct._GimpObjectClass = type { %struct._GObjectClass, void (%struct._GimpObject*)*, void (%struct._GimpObject*)*, i64 (%struct._GimpObject*, i64*)* }
%struct._GObjectClass = type { %struct._GTypeClass, %struct._GSList*, %struct._GObject* (i64, i32, %struct._GObjectConstructParam*)*, void (%struct._GObject*, i32, %struct._GValue*, %struct._GParamSpec*)*, void (%struct._GObject*, i32, %struct._GValue*, %struct._GParamSpec*)*, void (%struct._GObject*)*, void (%struct._GObject*)*, void (%struct._GObject*, i32, %struct._GParamSpec**)*, void (%struct._GObject*, %struct._GParamSpec*)*, void (%struct._GObject*)*, i64, [6 x i8*] }
%struct._GSList = type { i8*, %struct._GSList* }
%struct._GObject = type { %struct._GTypeInstance, i32, %struct._GData* }
%struct._GData = type opaque
%struct._GObjectConstructParam = type { %struct._GParamSpec*, %struct._GValue* }
%struct._GParamSpec = type { %struct._GTypeInstance, i8*, i32, i64, i64, i8*, i8*, %struct._GData*, i32, i32 }
%struct._GValue = type { i64, [2 x %union.anon] }
%union.anon = type { i64 }
%struct._GimpObject = type { %struct._GObject, %struct._GimpObjectPrivate* }
%struct._GimpObjectPrivate = type opaque
%struct._GimpViewable = type { %struct._GimpObject }
%struct._TempBuf = type { i32, i32, i32, i32, i32, i8* }
%struct._GimpContext = type { %struct._GimpViewable, %struct._Gimp*, %struct._GimpContext*, i32, i32, %struct._GimpImage*, i8*, %struct._GimpToolInfo*, i8*, %struct._GimpPaintInfo*, i8*, %struct._GimpRGB, %struct._GimpRGB, double, i32, %struct._GimpBrush*, i8*, %struct._GimpDynamics*, i8*, %struct._GimpPattern*, i8*, %struct._GimpGradient*, i8*, %struct._GimpPalette*, i8*, %struct._GimpToolPreset*, i8*, %struct._GimpFont*, i8*, %struct._GimpBuffer*, i8*, %struct._GimpImagefile*, i8*, %struct._GimpTemplate*, i8* }
%struct._Gimp = type opaque
%struct._GimpImage = type opaque
%struct._GimpToolInfo = type opaque
%struct._GimpPaintInfo = type opaque
%struct._GimpRGB = type { double, double, double, double }
%struct._GimpBrush = type opaque
%struct._GimpDynamics = type opaque
%struct._GimpPattern = type opaque
%struct._GimpGradient = type opaque
%struct._GimpPalette = type opaque
%struct._GimpToolPreset = type opaque
%struct._GimpFont = type opaque
%struct._GimpBuffer = type opaque
%struct._GimpImagefile = type opaque
%struct._GimpTemplate = type opaque
%struct._GdkPixbuf = type opaque
%struct._GimpContainer = type opaque
%struct._GimpConfigInterface = type { %struct._GTypeInterface, i32 (%struct._GimpConfig*, %struct._GimpConfigWriter*, i8*)*, i32 (%struct._GimpConfig*, %struct._GScanner*, i32, i8*)*, i32 (%struct._GimpConfig*, i32, %struct._GValue*, %struct._GParamSpec*, %struct._GimpConfigWriter*)*, i32 (%struct._GimpConfig*, i32, %struct._GValue*, %struct._GParamSpec*, %struct._GScanner*, i32*)*, %struct._GimpConfig* (%struct._GimpConfig*)*, i32 (%struct._GimpConfig*, %struct._GimpConfig*)*, void (%struct._GimpConfig*)*, i32 (%struct._GimpConfig*, %struct._GimpConfig*, i32)* }
%struct._GTypeInterface = type { i64, i64 }
%struct._GimpConfig = type opaque
%struct._GimpConfigWriter = type opaque
%struct._GScanner = type { i8*, i32, i32, i8*, %struct._GData*, %struct._GScannerConfig*, i32, %union._GTokenValue, i32, i32, i32, %union._GTokenValue, i32, i32, %struct._GHashTable*, i32, i8*, i8*, i8*, i32, void (%struct._GScanner*, i8*, i32)* }
%struct._GScannerConfig = type { i8*, i8*, i8*, i8*, i24, i32 }
%union._GTokenValue = type { i8* }
%struct._GHashTable = type opaque
%struct._GimpViewablePrivate = type { i8*, i32, %struct._GimpViewable*, %struct._TempBuf*, %struct._GdkPixbuf* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct._GError = type { i32, i32, i8* }
%struct._GSignalInvocationHint = type { i32, i32, i32 }
%struct._GClosure = type { i32, {}*, i8*, %struct._GClosureNotifyData* }
%struct._GClosureNotifyData = type { i8*, void (i8*, %struct._GClosure*)* }

@gimp_viewable_get_type.g_define_type_id__volatile = internal global i64 0, align 8
@.str = private unnamed_addr constant [13 x i8] c"GimpViewable\00", align 1
@gimp_viewable_get_type.g_implement_interface_info = internal constant %struct._GInterfaceInfo { void (i8*, i8*)* bitcast (void (%struct._GimpConfigInterface*)* @gimp_viewable_config_iface_init to void (i8*, i8*)*), void (i8*, i8*)* null, i8* null }, align 8
@.str.1 = private unnamed_addr constant [10 x i8] c"Gimp-Core\00", align 1
@__func__.gimp_viewable_invalidate_preview = private unnamed_addr constant [33 x i8] c"gimp_viewable_invalidate_preview\00", align 1
@.str.2 = private unnamed_addr constant [28 x i8] c"GIMP_IS_VIEWABLE (viewable)\00", align 1
@viewable_signals = internal global [2 x i32] zeroinitializer, align 4
@__func__.gimp_viewable_size_changed = private unnamed_addr constant [27 x i8] c"gimp_viewable_size_changed\00", align 1
@__func__.gimp_viewable_get_size = private unnamed_addr constant [23 x i8] c"gimp_viewable_get_size\00", align 1
@__func__.gimp_viewable_get_preview_size = private unnamed_addr constant [31 x i8] c"gimp_viewable_get_preview_size\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"size > 0\00", align 1
@__func__.gimp_viewable_get_popup_size = private unnamed_addr constant [29 x i8] c"gimp_viewable_get_popup_size\00", align 1
@__func__.gimp_viewable_get_preview = private unnamed_addr constant [26 x i8] c"gimp_viewable_get_preview\00", align 1
@.str.4 = private unnamed_addr constant [45 x i8] c"context == NULL || GIMP_IS_CONTEXT (context)\00", align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"width > 0\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"height > 0\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"%s: context is NULL\00", align 1
@__func__.gimp_viewable_get_new_preview = private unnamed_addr constant [30 x i8] c"gimp_viewable_get_new_preview\00", align 1
@__func__.gimp_viewable_get_dummy_preview = private unnamed_addr constant [32 x i8] c"gimp_viewable_get_dummy_preview\00", align 1
@.str.8 = private unnamed_addr constant [21 x i8] c"bpp == 3 || bpp == 4\00", align 1
@__func__.gimp_viewable_get_pixbuf = private unnamed_addr constant [25 x i8] c"gimp_viewable_get_pixbuf\00", align 1
@__func__.gimp_viewable_get_new_pixbuf = private unnamed_addr constant [29 x i8] c"gimp_viewable_get_new_pixbuf\00", align 1
@__func__.gimp_viewable_get_dummy_pixbuf = private unnamed_addr constant [31 x i8] c"gimp_viewable_get_dummy_pixbuf\00", align 1
@stock_question_64 = internal constant [16409 x i8] c"Gdkki\A3\F6]\84\B8\FFj\8F\C1\FFv\99\C9\FF\80\A2\CF\FF\82\A4\D1\FF{\9E\CC\FFp\95\C5\FFf\8C\BD\FFQzo\A6\F9k\90\C1\FF\86\A7\D2\FF\91\AF\D6\FF\91\AF\D6\FF\92\B0\D7\FF\92\B0\D7\FF\92\B0\D7\FF\92\B0\D7\FF\92\B0\D7\FF\92\B0\D7\FF\92\B0\D7\FF\91\AF\D6\FF\8E\AD\D5\FF{a\22L\89\EE?i\A2\F5x\9C\C9\FF\90\AE\D5\FF\90\AF\D5\FF\91\AF\D6\FF\92\B0\D7\FF\92\B0\D7\FF\92\B1\D7\FF\92\B1\D7\FF\8F\AE\D6\FF\8D\AD\D6\FF\91\B0\D7\FF\92\B1\D7\FF\92\B1\D7\FF\92\B1\D7\FF\92\B0\D7\FF\91\AF\D6\FF\91\AF\D6\FF\8A\AA\D3\FF^\86\BA\FF'Q\8E\F1%N\8C\BA J\8A\18\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00@@\80\04\22N\8A\9D-X\92\F1o\94\C3\FF\8E\AC\D4\FF\90\AE\D5\FF\90\AF\D5\FF\91\AF\D6\FF\8B\AB\D4\FF{\A0\CF\FFl\95\C9\FFe\90\C8\FF`\8C\C6\FF_\8C\C6\FF_\8C\C6\FF_\8C\C6\FFc\8F\C8\FFh\92\C9\FFu\9B\CD\FF\85\A7\D3\FF\91\AF\D7\FF\92\B0\D7\FF\91\AF\D6\FF\90\AF\D5\FF\85\A6\D0\FFNw\AF\FB$M\8A\EA\1EK\873\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\1EK\87\11$O\8A\C99d\9E\F4\82\A3\CE\FF\8F\AD\D4\FF\90\AE\D5\FF\90\AF\D5\FF\85\A6\D2\FFi\92\C8\FF]\8A\C4\FF^\8B\C5\FF^\8B\C5\FF_\8C\C6\FF`\8D\C7\FF`\8D\C7\FF`\8D\C7\FF`\8D\C7\FF`\8D\C7\FF_\8C\C6\FF_\8C\C6\FF^\8B\C5\FFa\8D\C5\FFw\9D\CD\FF\90\AE\D6\FF\91\AF\D6\FF\90\AF\D5\FF\8E\AD\D4\FFa\88\BC\FF$N\8B\F1\22J\87Y\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00'N\89\0D\22M\8A\DEIr\AA\F9\87\A7\D0\FF\8E\AD\D3\FF\90\AE\D5\FF\89\A9\D3\FFl\95\C8\FF\5C\89\C3\FF]\8A\C4\FF^\8B\C5\FF_\8C\C6\FF_\8C\C6\FF`\8D\C7\FFa\8E\C8\FFa\8E\C8\FFa\8E\C8\FFa\8E\C8\FFa\8E\C8\FFa\8E\C8\FF`\8D\C7\FF_\8C\C6\FF^\8B\C5\FF]\8A\C4\FFa\8D\C5\FF|\A0\CE\FF\90\AF\D5\FF\90\AE\D5\FF\8F\AD\D4\FFp\94\C5\FF(S\8E\F2!M\87d\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\00\80\80\02#N\8A\BEFo\A7\F8\8B\AA\D2\FF\8E\AD\D3\FF\8F\AD\D4\FF\7F\A2\CF\FF]\89\C2\FF[\88\C2\FF]\8A\C4\FF^\8B\C5\FF_\8C\C6\FF`\8D\C7\FFa\8E\C8\FFa\8E\C8\FFb\8F\C9\FFb\8F\C9\FFc\90\CA\FFb\8F\C9\FFb\8F\C9\FFb\8F\C9\FFa\8E\C8\FF`\8D\C7\FF_\8C\C6\FF^\8B\C5\FF]\8A\C4\FF\5C\89\C3\FFl\94\C8\FF\8E\AD\D4\FF\90\AE\D5\FF\8E\AD\D3\FFs\97\C6\FF%O\8B\F2\1EI\86;\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00#L\8A\904_\9A\F3\86\A6\CF\FF\8E\AC\D3\FF\8E\AD\D3\FFu\9B\CA\FF[\87\C1\FF[\88\C2\FF\5C\89\C3\FF]\8A\C4\FF^\8B\C5\FF_\8C\C6\FF`\8D\C7\FFa\8E\C8\FFb\8F\C9\FFc\90\CA\FFd\91\CB\FFd\91\CB\FFd\91\CB\FFc\90\CA\FFc\90\CA\FFb\8F\C9\FFa\8E\C8\FF`\8D\C7\FF_\8C\C6\FF^\8B\C5\FF]\8A\C4\FF[\88\C2\FFc\8E\C4\FF\89\A9\D2\FF\8F\AD\D4\FF\8E\AD\D3\FFd\8B\BC\FF$M\8A\ED\22M\88\1E\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00 J\87H)S\8F\F1|\9E\CA\FF\8D\AB\D2\FF\8E\AC\D3\FFw\9B\CA\FFY\86\C0\FFZ\87\C1\FF[\88\C2\FF\5C\89\C3\FF^\8B\C5\FF_\8C\C6\FF`\8D\C7\FFa\8E\C8\FFb\8F\C9\FFc\90\CA\FFd\91\CB\FFe\92\CC\FFe\92\CC\FFe\92\CC\FFd\91\CB\FFd\91\CB\FFc\90\CA\FFb\8F\C9\FFa\8E\C8\FF_\8C\C6\FF^\8B\C5\FF]\8A\C4\FF\5C\89\C3\FFZ\87\C1\FFa\8C\C3\FF\8B\AA\D3\FF\8E\AD\D3\FF\8D\AB\D2\FFS{\B1\FD#M\8A\D4\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\00\80\80\02#N\8A\DFa\88\B9\FF\8C\AB\D1\FF\8D\AB\D2\FF\7F\A1\CD\FFY\85\BF\FFY\86\C0\FFZ\87\C1\FF[\88\C2\FF]\8A\C4\FF^\8B\C5\FF_\8C\C6\FF`\8D\C7\FFb\8F\C9\FFc\90\CA\FFv\9D\D0\FF\90\B0\D8\FF\A0\BB\DE\FF\AE\C5\E2\FF\A8\C1\E0\FF\97\B5\DB\FF\85\A8\D5\FFe\92\CB\FFb\8F\C9\FFa\8E\C8\FF`\8D\C7\FF_\8C\C6\FF]\8A\C4\FF\5C\89\C3\FF[\88\C2\FFZ\87\C1\FFg\90\C5\FF\8E\AC\D3\FF\8E\AC\D3\FF\87\A7\D0\FF/X\93\F1!H\87U\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00#J\87`3\5C\98\F1\87\A6\CF\FF\8C\AB\D1\FF\89\A8\D0\FF[\87\C0\FFX\85\BF\FFY\86\C0\FFZ\87\C1\FF\5C\89\C3\FF]\8A\C4\FF^\8B\C5\FF_\8C\C6\FFr\99\CC\FF\B7\C9\E0\FF\DE\E5\ED\FF\F4\F4\F4\FF\F5\F5\F5\FF\F7\F7\F7\FF\F8\F8\F8\FF\F9\F9\F9\FF\F9\F9\F9\FF\F8\F8\F8\FF\E6\EB\F2\FF\A3\BC\DC\FFf\92\CA\FF`\8D\C7\FF_\8C\C6\FF]\8A\C4\FF\5C\89\C3\FF[\88\C2\FFZ\87\C1\FFX\85\BF\FFs\98\C9\FF\8E\AC\D3\FF\8D\AB\D2\FFf\8B\BD\FF#N\8A\E5@@\80\04\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00$I\92\07#L\89\EAi\8E\BE\FF\8C\AA\D1\FF\8C\AB\D1\FFn\94\C6\FFW\84\BE\FFX\85\BF\FFY\86\C0\FFZ\87\C1\FF\5C\89\C3\FF]\8A\C4\FF^\8B\C5\FF_\8C\C6\FF\89\A9\D3\FF\F0\F0\F0\FF\F2\F2\F2\FF\F4\F4\F4\FF\F6\F6\F6\FF\F8\F8\F8\FF\FA\FA\FA\FF\FA\FA\FA\FF\FA\FA\FA\FF\F9\F9\F9\FF\F8\F8\F8\FF\F6\F6\F6\FF\C8\D5\E7\FFa\8E\C7\FF_\8C\C6\FF^\8B\C5\FF\5C\89\C3\FF[\88\C2\FFZ\87\C1\FFX\85\BF\FFZ\86\BF\FF\88\A8\D1\FF\8D\AB\D2\FF\88\A7\CF\FF7a\9A\F3!I\89l\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\1FL\87Q1[\97\F0\88\A7\CF\FF\8C\AA\D1\FF\85\A5\CE\FFV\83\BD\FFV\83\BD\FFX\85\BF\FFY\86\C0\FFZ\87\C1\FF\5C\89\C3\FF]\8A\C4\FF^\8B\C5\FF_\8C\C6\FF\89\A9\D3\FF\F1\F1\F1\FF\F3\F3\F3\FF\F5\F5\F5\FF\F7\F7\F7\FF\F9\F9\F9\FF\FB\FB\FB\FF\FC\FC\FC\FF\FC\FC\FC\FF\FA\FA\FA\FF\F8\F8\F8\FF\F6\F6\F6\FF\F4\F4\F4\FF\A6\BE\DC\FF_\8C\C6\FF]\8A\C4\FF\5C\89\C3\FF[\88\C2\FFZ\87\C1\FFX\85\BF\FFW\84\BE\FFm\94\C6\FF\8D\AB\D2\FF\8C\AA\D1\FFi\8D\BD\FF#N\8A\DF\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00$M\8B\ACSz\AF\FF\8A\A8\CF\FF\8C\AA\D1\FFk\92\C4\FFU\82\BC\FFV\83\BD\FFX\85\BF\FFY\86\C0\FFZ\87\C1\FF[\88\C2\FF]\8A\C4\FF^\8B\C5\FF_\8C\C6\FF\88\A9\D2\FF\F1\F1\F1\FF\F3\F3\F3\FF\DE\E5\EE\FF\BB\CE\E5\FF\A1\BC\DE\FF\9F\BB\DE\FF\C8\D8\EC\FF\FC\FC\FD\FF\FB\FB\FB\FF\F9\F9\F9\FF\F7\F7\F7\FF\F5\F5\F5\FF\D3\DC\E9\FF^\8B\C5\FF]\8A\C4\FF\5C\89\C3\FF[\88\C2\FFY\86\C0\FFX\85\BF\FFW\84\BE\FFW\83\BD\FF\86\A6\CF\FF\8C\AA\D1\FF\81\A2\CC\FF%O\8B\F2 H\87 \FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\00U\AA\03\22L\89\F2q\95\C4\FF\8A\A8\CF\FF\8A\A9\D0\FFY\84\BD\FFU\82\BC\FFV\83\BD\FFW\84\BE\FFY\86\C0\FFZ\87\C1\FF[\88\C2\FF\5C\89\C3\FF]\8A\C4\FF_\8C\C6\FF\88\A9\D2\FF\D3\DC\E8\FF\8F\AE\D6\FFd\90\CA\FFd\91\CB\FFd\91\CB\FFd\91\CB\FFd\91\CB\FF\CB\D9\ED\FF\FB\FB\FB\FF\F9\F9\F9\FF\F7\F7\F7\FF\F5\F5\F5\FF\ED\EE\F0\FF`\8C\C6\FF]\8A\C4\FF\5C\89\C3\FFZ\87\C1\FFY\86\C0\FFX\85\BF\FFW\84\BE\FFU\82\BC\FFt\99\C8\FF\8C\AA\D1\FF\8B\A9\D0\FF>g\A0\F7\22J\8Aq\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00!K\86=+T\90\EF\86\A5\CD\FF\8A\A8\CF\FF}\9F\CB\FFS\80\BA\FFU\82\BC\FFV\83\BD\FFW\84\BE\FFX\85\BF\FFY\86\C0\FF[\88\C2\FF\5C\89\C3\FF]\8A\C4\FF^\8B\C5\FFb\8E\C7\FF`\8D\C7\FFa\8E\C8\FFb\8F\C9\FFb\8F\C9\FFc\90\CA\FFc\90\CA\FFc\90\CA\FF\A7\C0\E0\FF\FB\FB\FB\FF\F9\F9\F9\FF\F7\F7\F7\FF\F5\F5\F5\FF\E7\EA\EF\FF]\8A\C4\FF\5C\89\C3\FF[\88\C2\FFZ\87\C1\FFY\86\C0\FFX\85\BF\FFV\83\BD\FFU\82\BC\FFb\8B\C1\FF\8C\AA\D1\FF\8A\A8\CF\FF_\85\B7\FF$N\8B\CE\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00 I\88i>h\A0\F8\89\A7\CE\FF\8A\A8\CF\FFm\93\C4\FFS\80\BA\FFT\81\BB\FFU\82\BC\FFW\84\BE\FFX\85\BF\FFY\86\C0\FFZ\87\C1\FF[\88\C2\FF\5C\89\C3\FF]\8A\C4\FF^\8B\C5\FF_\8C\C6\FF`\8D\C7\FFa\8E\C8\FFa\8E\C8\FFb\8F\C9\FFb\8F\C9\FFf\92\CA\FF\DD\E6\F1\FF\FA\FA\FA\FF\F8\F8\F8\FF\F6\F6\F6\FF\F4\F4\F4\FF\C6\D4\E5\FF]\8A\C4\FF\5C\89\C3\FF[\88\C2\FFY\86\C0\FFX\85\BF\FFW\84\BE\FFV\83\BD\FFU\82\BC\FFU\81\BB\FF\89\A8\CF\FF\8A\A8\CF\FFt\97\C5\FF\22M\88\F3\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00 L\89\86Ks\A9\FF\89\A7\CE\FF\8A\A8\CF\FFe\8D\C0\FFS\80\BA\FFT\81\BB\FFU\82\BC\FFV\83\BD\FFW\84\BE\FFX\85\BF\FFY\86\C0\FFZ\87\C1\FF[\88\C2\FF\5C\89\C3\FF]\8A\C4\FF^\8B\C5\FF_\8C\C6\FF`\8D\C7\FF`\8D\C7\FFa\8E\C8\FFc\8F\C9\FF\C5\D4\E9\FF\FA\FA\FA\FF\F9\F9\F9\FF\F7\F7\F7\FF\F6\F6\F6\FF\F4\F4\F4\FF\94\B0\D5\FF\5C\89\C3\FF[\88\C2\FFZ\87\C1\FFY\86\C0\FFX\85\BF\FFW\84\BE\FFU\82\BC\FFT\81\BB\FFS\80\BA\FF\83\A3\CD\FF\8A\A8\CF\FF|\9E\C9\FF\22K\88\F7@@\80\04\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00#M\8A\A8U|\B0\FF\89\A7\CE\FF\8A\A8\CF\FF_\89\BE\FFR\7F\B9\FFS\80\BA\FFT\81\BB\FFU\82\BC\FFW\84\BE\FFX\85\BF\FFY\86\C0\FFZ\87\C1\FF[\88\C2\FF\5C\89\C3\FF\5C\89\C3\FF]\8A\C4\FF^\8B\C5\FF_\8C\C6\FF_\8C\C6\FFc\8F\C7\FF\CC\D9\EA\FF\F9\F9\F9\FF\F8\F8\F8\FF\F8\F8\F8\FF\F6\F6\F6\FF\F5\F5\F5\FF\B3\C6\DF\FF\5C\89\C3\FF[\88\C2\FFZ\87\C1\FFY\86\C0\FFX\85\BF\FFW\84\BE\FFV\83\BD\FFU\82\BC\FFT\81\BB\FFS\80\BA\FF|\9E\CA\FF\8A\A8\CF\FF\81\A1\CB\FF%P\8B\F0\1CL\84\1B\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00$N\8B\C5`\84\B7\FF\88\A6\CD\FF\89\A7\CE\FFX\83\BA\FFR\7F\B9\FFS\80\BA\FFT\81\BB\FFU\82\BC\FFV\83\BD\FFW\84\BE\FFX\85\BF\FFY\86\C0\FFZ\87\C1\FF[\88\C2\FF[\88\C2\FF\5C\89\C3\FF]\8A\C4\FF]\8A\C4\FF_\8C\C5\FF\C3\D2\E6\FF\F7\F7\F7\FF\F7\F7\F7\FF\F7\F7\F7\FF\F6\F6\F6\FF\F5\F5\F5\FF\C6\D4\E5\FF^\8A\C4\FF[\88\C2\FFZ\87\C1\FFY\86\C0\FFX\85\BF\FFW\84\BE\FFV\83\BD\FFU\82\BC\FFT\81\BB\FFS\80\BA\FFR\7F\B9\FFv\99\C7\FF\8A\A8\CF\FF\87\A6\CD\FF*U\91\ED\22J\894\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00$N\8B\C5^\84\B6\FF\88\A6\CD\FF\89\A7\CE\FFX\83\BA\FFQ~\B8\FFR\7F\B9\FFS\80\BA\FFT\81\BB\FFU\82\BC\FFV\83\BD\FFW\84\BE\FFX\85\BF\FFY\86\C0\FFZ\87\C1\FFZ\87\C1\FF[\88\C2\FF\5C\89\C3\FF\5C\89\C3\FF\B0\C4\DE\FF\F4\F4\F4\FF\F5\F5\F5\FF\F6\F6\F6\FF\F6\F6\F6\FF\F5\F5\F5\FF\BD\CD\E2\FF]\8A\C3\FF[\88\C2\FFZ\87\C1\FFY\86\C0\FFX\85\BF\FFX\85\BF\FFW\84\BE\FFV\83\BD\FFU\82\BC\FFT\81\BB\FFS\80\BA\FFQ~\B8\FFu\99\C6\FF\89\A7\CE\FF\86\A5\CD\FF)T\90\ED\22J\894\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00#M\8A\A8U|\AF\FF\88\A6\CD\FF\88\A6\CD\FF]\87\BC\FFP}\B7\FFQ~\B8\FFR\7F\B9\FFS\80\BA\FFT\81\BB\FFU\82\BC\FFV\83\BD\FFW\84\BE\FFX\85\BF\FFY\86\C0\FFY\86\C0\FFZ\87\C1\FF[\88\C2\FF_\8B\C3\FF\EE\EF\F1\FF\F3\F3\F3\FF\F4\F4\F4\FF\F4\F4\F4\FF\F4\F4\F4\FF\C8\D5\E5\FF]\8A\C3\FFZ\87\C1\FFZ\87\C1\FFY\86\C0\FFX\85\BF\FFX\85\BF\FFW\84\BE\FFV\83\BD\FFU\82\BC\FFT\81\BB\FFS\80\BA\FFR\7F\B9\FFQ~\B8\FF{\9D\C9\FF\89\A7\CE\FF\80\A0\CA\FF%P\8C\F0\1CL\84\1B\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00 L\89\86Iq\A7\FF\87\A5\CC\FF\88\A6\CD\FFd\8B\BF\FFP}\B7\FFQ~\B8\FFR\7F\B9\FFS\80\BA\FFT\81\BB\FFT\81\BB\FFU\82\BC\FFV\83\BD\FFW\84\BE\FFX\85\BF\FFX\85\BF\FFY\86\C0\FFY\86\C0\FF|\9F\CC\FF\F1\F1\F1\FF\F2\F2\F2\FF\F3\F3\F3\FF\F3\F3\F3\FF\F3\F3\F3\FFz\9E\CB\FFZ\87\C1\FFY\86\C0\FFY\86\C0\FFX\85\BF\FFW\84\BE\FFW\84\BE\FFV\83\BD\FFU\82\BC\FFT\81\BB\FFS\80\BA\FFR\7F\B9\FFQ~\B8\FFP}\B7\FF\81\A1\CB\FF\88\A6\CD\FFz\9B\C7\FF\22K\88\F7@@\80\04\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00 I\88i>f\9F\F8\87\A5\CC\FF\88\A6\CD\FFj\90\C1\FFO|\B6\FFP}\B7\FFQ~\B8\FFR\7F\B9\FFS\80\BA\FFT\81\BB\FFT\81\BB\FFU\82\BC\FFV\83\BD\FFW\84\BE\FFW\84\BE\FFX\85\BF\FFX\85\BF\FFv\9A\C9\FF\B8\C9\DE\FF\B8\C9\DF\FF\B8\C9\DF\FF\B8\C9\DF\FF\B8\C9\DF\FFa\8C\C3\FFX\85\BF\FFX\85\BF\FFW\84\BE\FFW\84\BE\FFV\83\BD\FFV\83\BD\FFU\82\BC\FFT\81\BB\FFS\80\BA\FFR\7F\B9\FFQ~\B8\FFP}\B7\FFP}\B6\FF\86\A5\CD\FF\88\A6\CD\FFq\94\C2\FF\22L\88\F3\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00!K\86=*T\90\EF\82\A1\CA\FF\87\A5\CC\FFy\9B\C7\FFN{\B5\FFO|\B6\FFP}\B7\FFQ~\B8\FFR\7F\B9\FFS\80\BA\FFS\80\BA\FFT\81\BB\FFU\82\BC\FFU\82\BC\FFV\83\BD\FFW\84\BE\FFW\84\BE\FFW\84\BE\FFX\85\BF\FFX\85\BF\FFX\85\BF\FFX\85\BF\FFX\85\BF\FFW\84\BE\FFW\84\BE\FFW\84\BE\FFV\83\BD\FFV\83\BD\FFU\82\BC\FFT\81\BB\FFT\81\BB\FFS\80\BA\FFR\7F\B9\FFQ~\B8\FFP}\B7\FFP}\B7\FF]\86\BC\FF\88\A6\CD\FF\88\A6\CD\FF]\82\B5\FF$N\8B\CE\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00 @@\08\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\00U\AA\03\22L\88\F2m\91\BF\FF\86\A4\CB\FF\86\A5\CC\FFQ}\B6\FFN{\B5\FFO|\B6\FFP}\B7\FFQ~\B8\FFR\7F\B9\FFR\7F\B9\FFS\80\BA\FFT\81\BB\FFT\81\BB\FFU\82\BC\FFU\82\BC\FFV\83\BD\FFo\94\C5\FF\A7\BC\D7\FF\A7\BC\D7\FF\A8\BD\D8\FF\A8\BD\D8\FF\A8\BD\D8\FF]\88\BF\FFV\83\BD\FFV\83\BD\FFU\82\BC\FFU\82\BC\FFT\81\BB\FFS\80\BA\FFS\80\BA\FFR\7F\B9\FFQ~\B8\FFP}\B7\FFP}\B7\FFO|\B6\FFn\93\C2\FF\88\A6\CD\FF\87\A5\CC\FF<e\9F\F7\22J\8Aq\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00/68m/46\93\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\22M\8B\ACPw\AC\FF\86\A4\CB\FF\86\A4\CB\FFb\8A\BD\FFMz\B4\FFN{\B5\FFO|\B6\FFP}\B7\FFQ~\B8\FFQ~\B8\FFR\7F\B9\FFS\80\BA\FFS\80\BA\FFT\81\BB\FFT\81\BB\FFU\82\BC\FF\84\A3\CB\FF\EC\EC\EC\FF\ED\ED\ED\FF\ED\ED\ED\FF\ED\ED\ED\FF\ED\ED\ED\FFc\8C\C1\FFU\82\BC\FFT\81\BB\FFT\81\BB\FFS\80\BA\FFS\80\BA\FFR\7F\B9\FFR\7F\B9\FFQ~\B8\FFP}\B7\FFO|\B6\FFO|\B6\FFO|\B5\FF\80\A0\C9\FF\87\A5\CC\FF|\9D\C7\FF#O\8B\F2 H\87 \FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00088 .46\F5.46\FA\00\00\00\02\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\1FL\87Q/Z\95\F0\83\A2\CA\FF\86\A4\CB\FF\7F\9F\C8\FFMz\B4\FFMz\B4\FFN{\B5\FFO|\B6\FFP}\B7\FFP}\B7\FFQ~\B8\FFR\7F\B9\FFR\7F\B9\FFS\80\BA\FFS\80\BA\FFS\80\BA\FF\83\A2\CA\FF\EA\EA\EA\FF\EB\EB\EB\FF\EC\EC\EC\FF\EC\EC\EC\FF\EC\EC\EC\FFb\8B\C0\FFR}\B6\FFS\80\BA\FFS\80\BA\FFR\7F\B9\FFR\7F\B9\FFQ~\B8\FFQ~\B8\FFP}\B7\FFO|\B6\FFN{\B5\FFN{\B5\FFc\8B\BD\FF\87\A5\CC\FF\86\A4\CB\FFc\87\B8\FF\22N\8A\DF\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00.46\97562\F9046\F9333\0F\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00$I\92\07#L\89\EAc\88\B9\FF\86\A4\CB\FF\86\A4\CB\FFd\8B\BD\FFLy\B3\FFMz\B4\FFN{\B5\FFO|\B6\FFO|\B6\FFP}\B7\FFP}\B7\FFQ~\B8\FFQ~\B8\FFR\7F\B9\FFR\7F\B9\FF\81\A0\C8\FF\E9\E9\E9\FF\EA\EA\EA\FF\EA\EA\EA\FF\EA\EA\EA\FF\EA\EA\EA\FFa\8A\BF\FFB^\80\FFOz\AF\FFR\7F\B9\FFQ~\B8\FFQ~\B8\FFP}\B7\FFP}\B7\FFO|\B6\FFN{\B5\FFMz\B4\FFO|\B5\FF\81\A0\C9\FF\86\A4\CB\FF\82\A1\C9\FF3]\97\F3!I\89l\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00036K056\F6OKB\FF157\F5,55\1D\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\22K\87b0Z\95\F1\80\9F\C8\FF\86\A4\CB\FF\81\A1\C9\FFO{\B4\FFLy\B3\FFMz\B4\FFMz\B4\FFN{\B5\FFO|\B6\FFO|\B6\FFP}\B7\FFP}\B7\FFQ~\B8\FFQ~\B8\FF\80\9F\C7\FF\E8\E8\E8\FF\E8\E8\E8\FF\E9\E9\E9\FF\E9\E9\E9\FF\E9\E9\E9\FF_\88\BD\FF?Vr\FF<Oe\FFP}\B7\FFP}\B7\FFP}\B7\FFO|\B6\FFN{\B5\FFN{\B5\FFMz\B4\FFLy\B3\FFh\8E\BF\FF\86\A4\CB\FF\86\A4\CB\FF`\85\B6\FF\22M\89\E6@@\80\04\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\000550.46\F4LKC\FFVRH\FF267\F1.44,\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\00\80\80\02\22L\8A\E0Z\81\B3\FF\85\A3\CA\FF\86\A4\CB\FFu\98\C4\FFLy\B2\FFLy\B3\FFLy\B3\FFMz\B4\FFN{\B5\FFN{\B5\FFO|\B6\FFO|\B6\FFO|\B6\FFP}\B7\FFi\8E\BF\FF\A0\B5\D0\FF\A1\B6\D1\FF\A1\B6\D1\FF\A1\B6\D1\FF\A1\B6\D1\FFW\82\B9\FF>Tl\FF.46\FFDd\8C\FFO|\B6\FFN{\B5\FFN{\B5\FFMz\B4\FFMz\B4\FFLy\B3\FF[\84\B9\FF\86\A4\CB\FF\86\A4\CB\FF\7F\9E\C7\FF,V\91\F1 H\88X\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00.66!056\ECKJB\FETOD\FFUQF\FF367\F0,55:\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\1FH\86J(P\8F\F1t\97\C2\FF\85\A3\CA\FF\85\A3\CA\FFk\90\BF\FFKx\B2\FFKx\B2\FFLy\B3\FFLy\B3\FFMz\B4\FFMz\B4\FFN{\B5\FFN{\B5\FFN{\B5\FFO|\B6\FFO|\B6\FFO|\B6\FFO|\B6\FFO|\B6\FFO|\B6\FFO|\B6\FF<Ph\FFGIC\FF29<\FFGm\9B\FFMz\B4\FFMz\B4\FFLy\B3\FFLy\B3\FFS~\B6\FF\81\A1\C9\FF\86\A4\CB\FF\84\A3\CA\FFNt\AA\FD#L\89\D6\00\00\FF\01\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00/68h/56\F4JJD\FBZUJ\FFFA4\FFUQF\FF597\EF-44I\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\22L\8A\902\5C\96\F3|\9D\C6\FF\84\A2\C9\FF\85\A3\CA\FFj\8F\BF\FFKx\B1\FFKx\B2\FFKx\B2\FFLy\B3\FFLy\B3\FFMz\B4\FFMz\B4\FFMz\B4\FFMz\B4\FFN{\B5\FFN{\B5\FFN{\B5\FFN{\B5\FFN{\B5\FFN{\B5\FF;Oc\FF_^T\FFkh^\FF4;?\FF@^\80\FFLy\B3\FFKx\B2\FFT~\B5\FF~\9E\C7\FF\85\A3\CA\FF\85\A3\CA\FF\5C\82\B4\FF\22L\89\ED\22M\88\1E\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00333\05-36Z066\D88<<\F3ZWM\FF\5CWJ\FFKF8\FFGA4\FFVQE\FF798\F1.47X\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\00\80\80\02\22M\89\BE?h\A0\F8\81\A0\C7\FF\84\A2\C9\FF\84\A2\C9\FFs\96\C2\FFNz\B3\FFJw\B1\FFKx\B2\FFKx\B2\FFKx\B2\FFLy\B3\FFLy\B3\FFLy\B3\FFLy\B3\FFLy\B3\FFLy\B3\FFLy\B3\FFLy\B3\FFLy\B3\FF:L_\FFcaW\FF\7Fxh\FFyug\FFBGG\FF8FT\FFW|\AA\FF\82\A1\C9\FF\85\A3\CA\FF\84\A2\C9\FFk\8D\B9\FF>^\88\F5p|\87\90\88\8B\84O\84\8E\84\1B\FF\FF\FF\00000\10.48N057\94057\ED<A=\F1XUK\FFgaS\FFYSE\FFNH9\FFKF8\FFHC6\FFWRF\FF;=9\F4.36d\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00'N\89\0D!M\89\DECl\A3\F9}\9D\C6\FF\84\A2\C9\FF\84\A2\C9\FF|\9D\C6\FF\5C\85\B8\FFIv\B0\FFJw\B1\FFJw\B1\FFJw\B1\FFKx\B2\FFKx\B2\FFKx\B2\FFKx\B2\FFKx\B2\FFKx\B2\FFKx\B2\FFKx\B2\FF9J[\FFheZ\FFvo\5C\FFum[\FF\86\7Fn\FF_^U\FF6=?\FFAIQ\FFXi|\FFds\83\FF\86\8A\87\FF\98\99\97\FA\B6\B6\B4\FE\C5\C5\C5\FFKKK\FF/0/\F8/45\F8ADA\F0TTK\FDfbU\FFlfX\FF`[K\FFVPA\FFRL=\FFOJ;\FFMG9\FFJE7\FFVRF\FF8;:\F1/55V\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\1EK\87\11\22M\8A\C95^\99\F4u\96\C1\FF\84\A2\C9\FF\84\A2\C9\FF\84\A2\C9\FFw\98\C3\FFW\81\B6\FFIv\B0\FFIv\B0\FFIv\B0\FFJw\B1\FFJw\B1\FFJw\B1\FFJw\B1\FFJw\B1\FFJw\B1\FFJw\B1\FF8HX\FFmi^\FF\80}p\FF\87\88\7F\FF}~{\FFHGC\FFuob\FFsoa\FFppi\FF\90\91\8C\FF\D3\D3\D0\FF\DF\DF\DD\FF\FD\FD\FD\FF\FF\FF\FF\FF\DC\DD\DD\FF\11\13\14\FF<<7\FFtm]\FFlfU\FFd^M\FF\5CUD\FFYSB\FFVP@\FFSM>\FFQK<\FFNH:\FFKF8\FFXSG\FF6:9\EF.26B\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\00\00\00\08\0D\0D\1B\13 H\83\A6)T\8E\F3c\88\B7\FF\81\A0\C7\FF\84\A2\C9\FF\84\A2\C9\FF\84\A2\C9\FF}\9D\C6\FFj\8F\BE\FFY\81\B6\FF?b\90\FF!5N\FF!5P\FF,Gj\FFEo\A6\FFLx\B1\FFR}\B3\FF=KV\FF\83\83{\FF\9C\9C\98\FF\95\95\93\FF\FF\FF\FF\FF\96\97\97\FF\11\11\11\FF\82{k\FF\8A\8C\87\FF\CC\CC\C8\FF\E3\E3\E0\FF\87\87\86\FF\E2\E2\E2\FF\FF\FF\FF\FF\B4\B7\B7\FF(-.\FF\08\08\08\FFnj]\FFb\5CI\FF`YG\FF]VE\FFZTC\FFXQA\FFUO?\FFRL=\FFOI;\FFLG8\FFYUH\FF388\F1-39-\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\00\00\00\01\00\00\00\09\00\00\00\12\00\00\00\1B\00\00\00#\1B:k|!K\86\F16a\98\F8k\8D\BC\FF\83\A1\C8\FF\83\A1\C8\FF\83\A1\C8\FF\84\A2\C9\FF9GW\FF\0F\11\13\FF378\FF79;\FF%')\FF\09\0A\0C\FFJ[q\FF\83\A1\C8\FF[gq\FF\8F\91\8C\FF\EB\EB\E9\FF[[[\FF\8B\8C\8D\FFPTU\FF\06\06\06\FF~}v\FF\9D\9F\98\FF\D7\D7\D1\FF\E0\E0\DC\FF\A3\A3\A1\FF\1E\1F\1F\FF^ce\FF068\FF!&'\FF\1E\1E\1E\FF\82\82x\FFd]J\FFaZH\FF^XF\FF[UD\FFXRB\FFVP?\FFSM=\FFPJ;\FFNH:\FFZVI\FF056\F5333\19\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\00\00\00\06\00\00\00\0F\00\00\00\17\00\00\00 \00\00\00(\00\00\001\08\0B\17C\1A<o\A5!K\87\F6<f\9C\FB^\83\B4\FFw\98\C2\FF]r\8E\FF\0F\11\13\FF\8E\92\92\FF\DE\DF\DF\FF\AC\AF\B0\FF^df\FFQUU\FF\17\1A\1C\FF5BR\FFgnt\FF\AD\AE\AA\FF\EE\EE\EC\FF\C0\C0\BF\FF\0F\0F\0F\FF\08\08\08\FFVVV\FF\8B\8C\86\FF\AD\AE\A7\FF\D2\D2\CC\FF\D9\D9\D5\FF\DE\DE\DA\FF\1E\1E\1E\FF\16\17\18\FF\18\1A\1B\FF\0B\0B\0B\FF}~z\FF\88\8A\83\FFe^K\FFb[I\FF_XF\FF\5CUD\FFYSB\FFVP@\FFSM>\FFPK<\FFPJ;\FFYTG\FF.46\FD333\05\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\00\00\00\05\00\00\00\0E\00\00\00\17\00\00\00\1F\00\00\00(\00\00\001\00\00\009\00\00\00B\08\14$[\1A9h\AA!I\82\E8\22L\88\F8\14#6\FD:>?\FF\E8\E9\E9\FF\FF\FF\FF\FF\FF\FF\FF\FFfnp\FFCJL\FFKPR\FF\13\16\17\FF?BB\FF\A3\A4\9F\FF\EE\EE\EC\FF\EE\EE\EC\FF\E8\E8\E6\FF\D2\D2\D0\FF\D3\D3\D1\FF\8B\8C\85\FF\A4\A5\9F\FF\CB\CB\C5\FF\D2\D2\CC\FF\D7\D7\D2\FF\D7\D7\D2\FF\93\93\90\FFhhe\FF\B9\B9\B5\FF\BA\BB\B5\FF\87\87\7F\FFe^K\FFb[I\FF_XG\FF\5CVD\FFYSB\FFVP@\FFTN>\FFQK<\FFRL?\FFTPD\FF/46\F4\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\00\00\00\07\00\00\00\10\00\00\00\18\00\00\00 \00\00\00(\00\00\001\00\00\008\00\00\00@\00\00\00G\00\00\00O\0A\13$i\04\07\0C\EFOST\FF\F7\F7\F7\FF\FF\FF\FF\FF\FF\FF\FF\FF\83\8A\8C\FF<DG\FF5;=\FF9=?\FF\11\11\10\FF\8B\8C\87\FF\D5\D6\D3\FF\EE\EE\EC\FF\EE\EE\EC\FF\EA\EA\E8\FF\9A\9B\96\FF\87\84v\FF\91\91\8B\FF\C4\C4\BC\FF\C9\C9\C3\FF\CE\CE\C7\FF\D0\D0\CA\FF\D0\D0\CA\FF\CE\CE\C8\FF\CB\CB\C4\FF\A4\A5\9F\FF}{o\FFe^K\FFb[I\FF_XG\FF\5CVD\FFYSB\FFVP@\FFSM>\FFQK<\FFUOA\FFJH@\FF066\C1\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\00\00\00\02\00\00\00\0A\00\00\00\14\00\00\00\1B\00\00\00\22\00\00\00)\00\00\00/\00\00\006\00\00\00<\00\00\00B\01\02\02\CF=@A\FF\B3\B6\B7\FF\FF\FF\FF\FF\E7\E8\E9\FFPY\5C\FF<DG\FF-46\FF-23\FF\19\1A\1A\FFBA:\FF\8B\8C\86\FF\A0\A1\9B\FF\AA\AA\A6\FF\8F\90\8A\FF\88\86z\FF\7Fv^\FF\89\88\7F\FF\A4\A5\9F\FF\C0\C0\B8\FF\C4\C4\BC\FF\C6\C6\BF\FF\C6\C6\BF\FF\C5\C5\BD\FF\B7\B7\B0\FF\89\8B\84\FFjeS\FFd]J\FFa[H\FF_XF\FF\5CUD\FFYSB\FFVP@\FFSM>\FFPJ;\FFWSE\FF??;\F6.35t\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\00\00\00\01\00\00\00\04\00\00\00\0B\00\00\00\14\00\00\00\1B\00\00\00 \00\00\00%\00\00\00*\00\00\00\9A#&&\FCNSV\FF]cf\FFFOQ\FF@HK\FF6>@\FF*02\FF\1E\22$\FF#&&\FF\06\06\05\FFtmX\FF{wf\FF}zk\FF{ua\FFyqZ\FFzqZ\FF{u`\FF\89\8A\82\FF\99\9A\93\FF\B1\B1\A9\FF\BB\BB\B2\FF\B5\B5\AE\FF\A4\A5\9D\FF\89\8A\85\FFtoa\FFf_L\FFc\5CJ\FF`ZH\FF^WE\FF[TC\FFXRA\FFUO?\FFRL=\FFPJ;\FFZUH\FF267\F1.382\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\00\00\00\01\00\00\00\03\00\00\00\06\00\00\00\0A\00\00\003\02\03\03\F6FJK\FF5<>\FF3;=\FF3:<\FF-35\FF#(*\FF\17\1A\1C\FF\1D !\FF\07\06\06\FFe_L\FFqjT\FFskU\FFtlV\FFumW\FFvnW\FFumW\FFunY\FF\81\7Fr\FF\88\89\82\FF\88\8A\85\FF\88\89\83\FF\83\81x\FFmgV\FFg`L\FFd]J\FFb[H\FF_XG\FF\5CVD\FFZSB\FFWQ@\FFTN>\FFQK<\FFRM>\FFTOD\FF/46\F4\00\00\00\02\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\02\02\02\A6\18\1B\1C\FA9>?\FF(-.\FF%+,\FF!&'\FF\19\1D\1E\FF\14\17\18\FF\18\1B\1C\FF\07\07\06\FF^XE\FFngR\FFphS\FFqiT\FFqjT\FFrjT\FFrjT\FFqiT\FFphS\FFogR\FFnfR\FFkdP\FFibN\FFg`L\FFeibN\FFkcO\FFldP\FFmeQ\FFmfQ\FFnfQ\FFnfQ\FFmfQ\FFleP\FFkdO\FFjbN\FFhaM\FFf_L\FFd]J\FFb[I\FFTM>\FF\14\13\0F\FF?;/\FFYRB\FFVP@\FFTN>\FFQK<\FFQK<\FFVQD\FF/67\F7\18\1C ?\00\00\00\13\00\00\00\06\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\00\00\00\1E\01\01\01\E8\0C\0E\0E\F8\1A\1D\1D\FF\18\1B\1C\FF\14\17\18\FF\14\17\18\FF\0A\0B\0A\FF)'\1F\FFf_L\FFg`M\FFhaM\FFibN\FFjbN\FFjbN\FFjbN\FFibN\FFhaN\FFg`M\FFf_L\FFdmgW\FFc\5CJ\FFc\5CJ\FFd]J\FFe^K\FFf^K\FFf_L\FFf_K\FFe^K\FFb{ !!\A1178\F7]\5CP\FFrl\5C\FFjcS\FFb[I\FFaZH\FFb[H\FFb[I\FFb[H\FFa[H\FF_XG\FF`f.45\ED=@=\F7]ZO\FFoiZ\FFhcR\FFaZI\FF^WF\FF^WE\FF]WE\FF]VE\FF\5CVD\FF[UD\FFZTC\FFYSB\FFXQA\FFVP@\FFTN>\FFSM=\FFQK<\FFPJ;\FFTNA\FFTOC\FF367\F9 $%\B8\00\00\00a\00\00\00S\00\00\00E\00\00\007\00\00\00)\00\00\00\1B\00\00\00\0B\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\FF\FF\FF\00\00\00\00\04\00\00\00\12\00\00\00 \00\00\00.\00\00\00;\03\03\03L\1C !\91-33\E6399\F8PPH\FEicT\FFg`R\FFaZK\FF]WF\FFZTC\FFXRB\FFXQA\FFWP@\FFUO?\FFTN>\FFSM=\FFQK<\FFPK=\FFSM>\FFWQD\FFIG>\FF055\FA#((\C6\00\00\00jd_Q\FFc]O\FF_ZK\FF[UF\FFYSE\FFYSD\FFWRD\FFXSF\FFWRD\FFKH@\FF8:7\FA,23\F1\14\16\17\9A\00\00\00la\0A\0C\0C|!%&\BC)//\E0.34\F6.45\FD488\F8>?<\FAHGA\FFJHA\FFFE>\FF@A<\FE8:7\F9/46\FC+01\E9\1E\22\22\B4\02\02\02s\00\00\00ed\00\00\00k\04\06\06w\11\13\15\93\1B\1D\1F\AD$((\C8&+-\D4!'(\C6\1F#$\B7\19\1C\1E\A4\09\09\09x\00\00\00g\00\00\00`align 4
@.str.9 = private unnamed_addr constant [13 x i8] c"icon != NULL\00", align 1
@__func__.gimp_viewable_get_description = private unnamed_addr constant [30 x i8] c"gimp_viewable_get_description\00", align 1
@__func__.gimp_viewable_get_stock_id = private unnamed_addr constant [27 x i8] c"gimp_viewable_get_stock_id\00", align 1
@__func__.gimp_viewable_set_stock_id = private unnamed_addr constant [27 x i8] c"gimp_viewable_set_stock_id\00", align 1
@.str.10 = private unnamed_addr constant [9 x i8] c"stock-id\00", align 1
@__func__.gimp_viewable_preview_freeze = private unnamed_addr constant [29 x i8] c"gimp_viewable_preview_freeze\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"frozen\00", align 1
@__func__.gimp_viewable_preview_thaw = private unnamed_addr constant [27 x i8] c"gimp_viewable_preview_thaw\00", align 1
@.str.12 = private unnamed_addr constant [26 x i8] c"private->freeze_count > 0\00", align 1
@__func__.gimp_viewable_preview_is_frozen = private unnamed_addr constant [32 x i8] c"gimp_viewable_preview_is_frozen\00", align 1
@__func__.gimp_viewable_get_parent = private unnamed_addr constant [25 x i8] c"gimp_viewable_get_parent\00", align 1
@__func__.gimp_viewable_set_parent = private unnamed_addr constant [25 x i8] c"gimp_viewable_set_parent\00", align 1
@.str.13 = private unnamed_addr constant [44 x i8] c"parent == NULL || GIMP_IS_VIEWABLE (parent)\00", align 1
@__func__.gimp_viewable_get_children = private unnamed_addr constant [27 x i8] c"gimp_viewable_get_children\00", align 1
@__func__.gimp_viewable_get_expanded = private unnamed_addr constant [27 x i8] c"gimp_viewable_get_expanded\00", align 1
@__func__.gimp_viewable_set_expanded = private unnamed_addr constant [27 x i8] c"gimp_viewable_set_expanded\00", align 1
@__func__.gimp_viewable_is_ancestor = private unnamed_addr constant [26 x i8] c"gimp_viewable_is_ancestor\00", align 1
@.str.14 = private unnamed_addr constant [28 x i8] c"GIMP_IS_VIEWABLE (ancestor)\00", align 1
@.str.15 = private unnamed_addr constant [30 x i8] c"GIMP_IS_VIEWABLE (descendant)\00", align 1
@gimp_viewable_parent_class = internal global i8* null, align 8
@GimpViewable_private_offset = internal global i32 0, align 4
@.str.16 = private unnamed_addr constant [19 x i8] c"invalidate-preview\00", align 1
@.str.17 = private unnamed_addr constant [13 x i8] c"size-changed\00", align 1
@.str.18 = private unnamed_addr constant [14 x i8] c"gimp-question\00", align 1
@.str.19 = private unnamed_addr constant [13 x i8] c"name-changed\00", align 1
@.str.20 = private unnamed_addr constant [54 x i8] c"%s:%u: invalid %s id %u for \22%s\22 of type '%s' in '%s'\00", align 1
@.str.21 = private unnamed_addr constant [15 x i8] c"gimpviewable.c\00", align 1
@.str.22 = private unnamed_addr constant [9 x i8] c"property\00", align 1

; Function Attrs: nounwind readnone uwtable
define i64 @gimp_viewable_get_type() #0 {
entry:
  %tmp = alloca i32, align 4
  %tmp1 = alloca i8*, align 8
  %g_define_type_id = alloca i64, align 8
  fence seq_cst
  %0 = load volatile i64, i64* @gimp_viewable_get_type.g_define_type_id__volatile, align 8
  %1 = inttoptr i64 %0 to i8*
  store i8* %1, i8** %tmp1
  %2 = load i8*, i8** %tmp1
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %entry
  %call = call i32 @g_once_init_enter(i8* bitcast (i64* @gimp_viewable_get_type.g_define_type_id__volatile to i8*))
  %tobool2 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ]
  %land.ext = zext i1 %3 to i32
  store i32 %land.ext, i32* %tmp
  %4 = load i32, i32* %tmp
  %tobool3 = icmp ne i32 %4, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %land.end
  %call5 = call i64 @gimp_object_get_type() #7
  %call6 = call i8* @g_intern_static_string(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0))
  %call7 = call i64 @g_type_register_static_simple(i64 %call5, i8* %call6, i32 280, void (i8*, i8*)* bitcast (void (i8*)* @gimp_viewable_class_intern_init to void (i8*, i8*)*), i32 32, void (%struct._GTypeInstance*, i8*)* bitcast (void (%struct._GimpViewable*)* @gimp_viewable_init to void (%struct._GTypeInstance*, i8*)*), i32 0)
  store i64 %call7, i64* %g_define_type_id, align 8
  %5 = load i64, i64* %g_define_type_id, align 8
  %call8 = call i64 @gimp_config_interface_get_type() #7
  call void @g_type_add_interface_static(i64 %5, i64 %call8, %struct._GInterfaceInfo* @gimp_viewable_get_type.g_implement_interface_info)
  %6 = load i64, i64* %g_define_type_id, align 8
  call void @g_once_init_leave(i8* bitcast (i64* @gimp_viewable_get_type.g_define_type_id__volatile to i8*), i64 %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.end
  %7 = load volatile i64, i64* @gimp_viewable_get_type.g_define_type_id__volatile, align 8
  ret i64 %7
}

declare i32 @g_once_init_enter(i8*) #1

declare i64 @g_type_register_static_simple(i64, i8*, i32, void (i8*, i8*)*, i32, void (%struct._GTypeInstance*, i8*)*, i32) #1

; Function Attrs: nounwind readnone
declare i64 @gimp_object_get_type() #2

declare i8* @g_intern_static_string(i8*) #1

; Function Attrs: nounwind uwtable
define internal void @gimp_viewable_class_intern_init(i8* %klass) #3 {
entry:
  %klass.addr = alloca i8*, align 8
  store i8* %klass, i8** %klass.addr, align 8
  %0 = load i8*, i8** %klass.addr, align 8
  %call = call i8* @g_type_class_peek_parent(i8* %0)
  store i8* %call, i8** @gimp_viewable_parent_class, align 8
  %1 = load i32, i32* @GimpViewable_private_offset, align 4
  %cmp = icmp ne i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %klass.addr, align 8
  call void @g_type_class_adjust_private_offset(i8* %2, i32* @GimpViewable_private_offset)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i8*, i8** %klass.addr, align 8
  %4 = bitcast i8* %3 to %struct._GimpViewableClass*
  call void @gimp_viewable_class_init(%struct._GimpViewableClass* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @gimp_viewable_init(%struct._GimpViewable* %viewable) #3 {
entry:
  %viewable.addr = alloca %struct._GimpViewable*, align 8
  store %struct._GimpViewable* %viewable, %struct._GimpViewable** %viewable.addr, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @gimp_viewable_config_iface_init(%struct._GimpConfigInterface* %iface) #3 {
entry:
  %iface.addr = alloca %struct._GimpConfigInterface*, align 8
  store %struct._GimpConfigInterface* %iface, %struct._GimpConfigInterface** %iface.addr, align 8
  %0 = load %struct._GimpConfigInterface*, %struct._GimpConfigInterface** %iface.addr, align 8
  %serialize_property = getelementptr inbounds %struct._GimpConfigInterface, %struct._GimpConfigInterface* %0, i32 0, i32 3
  store i32 (%struct._GimpConfig*, i32, %struct._GValue*, %struct._GParamSpec*, %struct._GimpConfigWriter*)* @gimp_viewable_serialize_property, i32 (%struct._GimpConfig*, i32, %struct._GValue*, %struct._GParamSpec*, %struct._GimpConfigWriter*)** %serialize_property, align 8
  ret void
}

declare void @g_type_add_interface_static(i64, i64, %struct._GInterfaceInfo*) #1

; Function Attrs: nounwind readnone
declare i64 @gimp_config_interface_get_type() #2

declare void @g_once_init_leave(i8*, i64) #1

; Function Attrs: nounwind uwtable
define void @gimp_viewable_invalidate_preview(%struct._GimpViewable* %viewable) #3 {
entry:
  %viewable.addr = alloca %struct._GimpViewable*, align 8
  %private = alloca %struct._GimpViewablePrivate*, align 8
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct._GimpViewable* %viewable, %struct._GimpViewable** %viewable.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %1 = bitcast %struct._GimpViewable* %0 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %1, %struct._GTypeInstance** %__inst, align 8
  %call = call i64 @gimp_viewable_get_type() #7
  store i64 %call, i64* %__t, align 8
  %2 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool = icmp ne %struct._GTypeInstance* %2, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %do.body
  store i32 0, i32* %__r, align 4
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %3 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %3, i32 0, i32 0
  %4 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool1 = icmp ne %struct._GTypeClass* %4, null
  br i1 %tobool1, label %land.lhs.true, label %if.else.4

land.lhs.true:                                    ; preds = %if.else
  %5 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class2 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %5, i32 0, i32 0
  %6 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class2, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %6, i32 0, i32 0
  %7 = load i64, i64* %g_type, align 8
  %8 = load i64, i64* %__t, align 8
  %cmp = icmp eq i64 %7, %8
  br i1 %cmp, label %if.then.3, label %if.else.4

if.then.3:                                        ; preds = %land.lhs.true
  store i32 1, i32* %__r, align 4
  br label %if.end

if.else.4:                                        ; preds = %land.lhs.true, %if.else
  %9 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %10 = load i64, i64* %__t, align 8
  %call5 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %9, i64 %10) #8
  store i32 %call5, i32* %__r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.4, %if.then.3
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %if.then
  %11 = load i32, i32* %__r, align 4
  store i32 %11, i32* %tmp
  %12 = load i32, i32* %tmp
  %tobool7 = icmp ne i32 %12, 0
  br i1 %tobool7, label %if.then.8, label %if.else.9

if.then.8:                                        ; preds = %if.end.6
  br label %if.end.10

if.else.9:                                        ; preds = %if.end.6
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @__func__.gimp_viewable_invalidate_preview, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end.15

if.end.10:                                        ; preds = %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.10
  %13 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %14 = bitcast %struct._GimpViewable* %13 to %struct._GTypeInstance*
  %call11 = call i64 @gimp_viewable_get_type() #7
  %call12 = call i8* @g_type_instance_get_private(%struct._GTypeInstance* %14, i64 %call11)
  %15 = bitcast i8* %call12 to %struct._GimpViewablePrivate*
  store %struct._GimpViewablePrivate* %15, %struct._GimpViewablePrivate** %private, align 8
  %16 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %freeze_count = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %16, i32 0, i32 1
  %17 = load i32, i32* %freeze_count, align 4
  %cmp13 = icmp eq i32 %17, 0
  br i1 %cmp13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %do.end
  %18 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %19 = bitcast %struct._GimpViewable* %18 to i8*
  %20 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @viewable_signals, i32 0, i64 0), align 4
  call void (i8*, i32, i32, ...) @g_signal_emit(i8* %19, i32 %20, i32 0)
  br label %if.end.15

if.end.15:                                        ; preds = %if.else.9, %if.then.14, %do.end
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @g_type_check_instance_is_a(%struct._GTypeInstance*, i64) #4

declare void @g_return_if_fail_warning(i8*, i8*, i8*) #1

declare i8* @g_type_instance_get_private(%struct._GTypeInstance*, i64) #1

declare void @g_signal_emit(i8*, i32, i32, ...) #1

; Function Attrs: nounwind uwtable
define void @gimp_viewable_size_changed(%struct._GimpViewable* %viewable) #3 {
entry:
  %viewable.addr = alloca %struct._GimpViewable*, align 8
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct._GimpViewable* %viewable, %struct._GimpViewable** %viewable.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %1 = bitcast %struct._GimpViewable* %0 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %1, %struct._GTypeInstance** %__inst, align 8
  %call = call i64 @gimp_viewable_get_type() #7
  store i64 %call, i64* %__t, align 8
  %2 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool = icmp ne %struct._GTypeInstance* %2, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %do.body
  store i32 0, i32* %__r, align 4
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %3 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %3, i32 0, i32 0
  %4 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool1 = icmp ne %struct._GTypeClass* %4, null
  br i1 %tobool1, label %land.lhs.true, label %if.else.4

land.lhs.true:                                    ; preds = %if.else
  %5 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class2 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %5, i32 0, i32 0
  %6 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class2, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %6, i32 0, i32 0
  %7 = load i64, i64* %g_type, align 8
  %8 = load i64, i64* %__t, align 8
  %cmp = icmp eq i64 %7, %8
  br i1 %cmp, label %if.then.3, label %if.else.4

if.then.3:                                        ; preds = %land.lhs.true
  store i32 1, i32* %__r, align 4
  br label %if.end

if.else.4:                                        ; preds = %land.lhs.true, %if.else
  %9 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %10 = load i64, i64* %__t, align 8
  %call5 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %9, i64 %10) #8
  store i32 %call5, i32* %__r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.4, %if.then.3
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %if.then
  %11 = load i32, i32* %__r, align 4
  store i32 %11, i32* %tmp
  %12 = load i32, i32* %tmp
  %tobool7 = icmp ne i32 %12, 0
  br i1 %tobool7, label %if.then.8, label %if.else.9

if.then.8:                                        ; preds = %if.end.6
  br label %if.end.10

if.else.9:                                        ; preds = %if.end.6
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__func__.gimp_viewable_size_changed, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0))
  br label %return

if.end.10:                                        ; preds = %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.10
  %13 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %14 = bitcast %struct._GimpViewable* %13 to i8*
  %15 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @viewable_signals, i32 0, i64 1), align 4
  call void (i8*, i32, i32, ...) @g_signal_emit(i8* %14, i32 %15, i32 0)
  br label %return

return:                                           ; preds = %do.end, %if.else.9
  ret void
}

; Function Attrs: nounwind uwtable
define void @gimp_viewable_calc_preview_size(i32 %aspect_width, i32 %aspect_height, i32 %width, i32 %height, i32 %dot_for_dot, double %xresolution, double %yresolution, i32* %return_width, i32* %return_height, i32* %scaling_up) #3 {
entry:
  %aspect_width.addr = alloca i32, align 4
  %aspect_height.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %dot_for_dot.addr = alloca i32, align 4
  %xresolution.addr = alloca double, align 8
  %yresolution.addr = alloca double, align 8
  %return_width.addr = alloca i32*, align 8
  %return_height.addr = alloca i32*, align 8
  %scaling_up.addr = alloca i32*, align 8
  %xratio = alloca double, align 8
  %yratio = alloca double, align 8
  store i32 %aspect_width, i32* %aspect_width.addr, align 4
  store i32 %aspect_height, i32* %aspect_height.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  store i32 %dot_for_dot, i32* %dot_for_dot.addr, align 4
  store double %xresolution, double* %xresolution.addr, align 8
  store double %yresolution, double* %yresolution.addr, align 8
  store i32* %return_width, i32** %return_width.addr, align 8
  store i32* %return_height, i32** %return_height.addr, align 8
  store i32* %scaling_up, i32** %scaling_up.addr, align 8
  %0 = load i32, i32* %aspect_width.addr, align 4
  %1 = load i32, i32* %aspect_height.addr, align 4
  %cmp = icmp sgt i32 %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %width.addr, align 4
  %conv = sitofp i32 %2 to double
  %3 = load i32, i32* %aspect_width.addr, align 4
  %conv1 = sitofp i32 %3 to double
  %div = fdiv double %conv, %conv1
  store double %div, double* %yratio, align 8
  store double %div, double* %xratio, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %4 = load i32, i32* %height.addr, align 4
  %conv2 = sitofp i32 %4 to double
  %5 = load i32, i32* %aspect_height.addr, align 4
  %conv3 = sitofp i32 %5 to double
  %div4 = fdiv double %conv2, %conv3
  store double %div4, double* %yratio, align 8
  store double %div4, double* %xratio, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load i32, i32* %dot_for_dot.addr, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %if.end.9, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %7 = load double, double* %xresolution.addr, align 8
  %8 = load double, double* %yresolution.addr, align 8
  %cmp5 = fcmp une double %7, %8
  br i1 %cmp5, label %if.then.7, label %if.end.9

if.then.7:                                        ; preds = %land.lhs.true
  %9 = load double, double* %xresolution.addr, align 8
  %10 = load double, double* %yresolution.addr, align 8
  %div8 = fdiv double %9, %10
  %11 = load double, double* %yratio, align 8
  %mul = fmul double %11, %div8
  store double %mul, double* %yratio, align 8
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.7, %land.lhs.true, %if.end
  %12 = load double, double* %xratio, align 8
  %13 = load i32, i32* %aspect_width.addr, align 4
  %conv10 = sitofp i32 %13 to double
  %mul11 = fmul double %12, %conv10
  %call = call double @rint(double %mul11) #7
  %conv12 = fptosi double %call to i32
  store i32 %conv12, i32* %width.addr, align 4
  %14 = load double, double* %yratio, align 8
  %15 = load i32, i32* %aspect_height.addr, align 4
  %conv13 = sitofp i32 %15 to double
  %mul14 = fmul double %14, %conv13
  %call15 = call double @rint(double %mul14) #7
  %conv16 = fptosi double %call15 to i32
  store i32 %conv16, i32* %height.addr, align 4
  %16 = load i32, i32* %width.addr, align 4
  %cmp17 = icmp slt i32 %16, 1
  br i1 %cmp17, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.end.9
  store i32 1, i32* %width.addr, align 4
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.19, %if.end.9
  %17 = load i32, i32* %height.addr, align 4
  %cmp21 = icmp slt i32 %17, 1
  br i1 %cmp21, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %if.end.20
  store i32 1, i32* %height.addr, align 4
  br label %if.end.24

if.end.24:                                        ; preds = %if.then.23, %if.end.20
  %18 = load i32*, i32** %return_width.addr, align 8
  %tobool25 = icmp ne i32* %18, null
  br i1 %tobool25, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %if.end.24
  %19 = load i32, i32* %width.addr, align 4
  %20 = load i32*, i32** %return_width.addr, align 8
  store i32 %19, i32* %20, align 4
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.26, %if.end.24
  %21 = load i32*, i32** %return_height.addr, align 8
  %tobool28 = icmp ne i32* %21, null
  br i1 %tobool28, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %if.end.27
  %22 = load i32, i32* %height.addr, align 4
  %23 = load i32*, i32** %return_height.addr, align 8
  store i32 %22, i32* %23, align 4
  br label %if.end.30

if.end.30:                                        ; preds = %if.then.29, %if.end.27
  %24 = load i32*, i32** %scaling_up.addr, align 8
  %tobool31 = icmp ne i32* %24, null
  br i1 %tobool31, label %if.then.32, label %if.end.37

if.then.32:                                       ; preds = %if.end.30
  %25 = load double, double* %xratio, align 8
  %cmp33 = fcmp ogt double %25, 1.000000e+00
  br i1 %cmp33, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then.32
  %26 = load double, double* %yratio, align 8
  %cmp35 = fcmp ogt double %26, 1.000000e+00
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then.32
  %27 = phi i1 [ true, %if.then.32 ], [ %cmp35, %lor.rhs ]
  %lor.ext = zext i1 %27 to i32
  %28 = load i32*, i32** %scaling_up.addr, align 8
  store i32 %lor.ext, i32* %28, align 4
  br label %if.end.37

if.end.37:                                        ; preds = %lor.end, %if.end.30
  ret void
}

; Function Attrs: nounwind readnone
declare double @rint(double) #2

; Function Attrs: nounwind uwtable
define i32 @gimp_viewable_get_size(%struct._GimpViewable* %viewable, i32* %width, i32* %height) #3 {
entry:
  %retval = alloca i32, align 4
  %viewable.addr = alloca %struct._GimpViewable*, align 8
  %width.addr = alloca i32*, align 8
  %height.addr = alloca i32*, align 8
  %viewable_class = alloca %struct._GimpViewableClass*, align 8
  %retval1 = alloca i32, align 4
  %w = alloca i32, align 4
  %h = alloca i32, align 4
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct._GimpViewable* %viewable, %struct._GimpViewable** %viewable.addr, align 8
  store i32* %width, i32** %width.addr, align 8
  store i32* %height, i32** %height.addr, align 8
  store i32 0, i32* %retval1, align 4
  store i32 0, i32* %w, align 4
  store i32 0, i32* %h, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %1 = bitcast %struct._GimpViewable* %0 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %1, %struct._GTypeInstance** %__inst, align 8
  %call = call i64 @gimp_viewable_get_type() #7
  store i64 %call, i64* %__t, align 8
  %2 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool = icmp ne %struct._GTypeInstance* %2, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %do.body
  store i32 0, i32* %__r, align 4
  br label %if.end.7

if.else:                                          ; preds = %do.body
  %3 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %3, i32 0, i32 0
  %4 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool2 = icmp ne %struct._GTypeClass* %4, null
  br i1 %tobool2, label %land.lhs.true, label %if.else.5

land.lhs.true:                                    ; preds = %if.else
  %5 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class3 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %5, i32 0, i32 0
  %6 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class3, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %6, i32 0, i32 0
  %7 = load i64, i64* %g_type, align 8
  %8 = load i64, i64* %__t, align 8
  %cmp = icmp eq i64 %7, %8
  br i1 %cmp, label %if.then.4, label %if.else.5

if.then.4:                                        ; preds = %land.lhs.true
  store i32 1, i32* %__r, align 4
  br label %if.end

if.else.5:                                        ; preds = %land.lhs.true, %if.else
  %9 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %10 = load i64, i64* %__t, align 8
  %call6 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %9, i64 %10) #8
  store i32 %call6, i32* %__r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.5, %if.then.4
  br label %if.end.7

if.end.7:                                         ; preds = %if.end, %if.then
  %11 = load i32, i32* %__r, align 4
  store i32 %11, i32* %tmp
  %12 = load i32, i32* %tmp
  %tobool8 = icmp ne i32 %12, 0
  br i1 %tobool8, label %if.then.9, label %if.else.10

if.then.9:                                        ; preds = %if.end.7
  br label %if.end.11

if.else.10:                                       ; preds = %if.end.7
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__func__.gimp_viewable_get_size, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0))
  store i32 0, i32* %retval
  br label %return

if.end.11:                                        ; preds = %if.then.9
  br label %do.end

do.end:                                           ; preds = %if.end.11
  %13 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %14 = bitcast %struct._GimpViewable* %13 to %struct._GTypeInstance*
  %g_class12 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %14, i32 0, i32 0
  %15 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class12, align 8
  %16 = bitcast %struct._GTypeClass* %15 to %struct._GimpViewableClass*
  store %struct._GimpViewableClass* %16, %struct._GimpViewableClass** %viewable_class, align 8
  %17 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %viewable_class, align 8
  %get_size = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %17, i32 0, i32 5
  %18 = load i32 (%struct._GimpViewable*, i32*, i32*)*, i32 (%struct._GimpViewable*, i32*, i32*)** %get_size, align 8
  %tobool13 = icmp ne i32 (%struct._GimpViewable*, i32*, i32*)* %18, null
  br i1 %tobool13, label %if.then.14, label %if.end.17

if.then.14:                                       ; preds = %do.end
  %19 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %viewable_class, align 8
  %get_size15 = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %19, i32 0, i32 5
  %20 = load i32 (%struct._GimpViewable*, i32*, i32*)*, i32 (%struct._GimpViewable*, i32*, i32*)** %get_size15, align 8
  %21 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %call16 = call i32 %20(%struct._GimpViewable* %21, i32* %w, i32* %h)
  store i32 %call16, i32* %retval1, align 4
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.14, %do.end
  %22 = load i32*, i32** %width.addr, align 8
  %tobool18 = icmp ne i32* %22, null
  br i1 %tobool18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.end.17
  %23 = load i32, i32* %w, align 4
  %24 = load i32*, i32** %width.addr, align 8
  store i32 %23, i32* %24, align 4
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.19, %if.end.17
  %25 = load i32*, i32** %height.addr, align 8
  %tobool21 = icmp ne i32* %25, null
  br i1 %tobool21, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %if.end.20
  %26 = load i32, i32* %h, align 4
  %27 = load i32*, i32** %height.addr, align 8
  store i32 %26, i32* %27, align 4
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.22, %if.end.20
  %28 = load i32, i32* %retval1, align 4
  store i32 %28, i32* %retval
  br label %return

return:                                           ; preds = %if.end.23, %if.else.10
  %29 = load i32, i32* %retval
  ret i32 %29
}

; Function Attrs: nounwind uwtable
define void @gimp_viewable_get_preview_size(%struct._GimpViewable* %viewable, i32 %size, i32 %popup, i32 %dot_for_dot, i32* %width, i32* %height) #3 {
entry:
  %viewable.addr = alloca %struct._GimpViewable*, align 8
  %size.addr = alloca i32, align 4
  %popup.addr = alloca i32, align 4
  %dot_for_dot.addr = alloca i32, align 4
  %width.addr = alloca i32*, align 8
  %height.addr = alloca i32*, align 8
  %w = alloca i32, align 4
  %h = alloca i32, align 4
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct._GimpViewable* %viewable, %struct._GimpViewable** %viewable.addr, align 8
  store i32 %size, i32* %size.addr, align 4
  store i32 %popup, i32* %popup.addr, align 4
  store i32 %dot_for_dot, i32* %dot_for_dot.addr, align 4
  store i32* %width, i32** %width.addr, align 8
  store i32* %height, i32** %height.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %1 = bitcast %struct._GimpViewable* %0 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %1, %struct._GTypeInstance** %__inst, align 8
  %call = call i64 @gimp_viewable_get_type() #7
  store i64 %call, i64* %__t, align 8
  %2 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool = icmp ne %struct._GTypeInstance* %2, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %do.body
  store i32 0, i32* %__r, align 4
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %3 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %3, i32 0, i32 0
  %4 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool1 = icmp ne %struct._GTypeClass* %4, null
  br i1 %tobool1, label %land.lhs.true, label %if.else.4

land.lhs.true:                                    ; preds = %if.else
  %5 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class2 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %5, i32 0, i32 0
  %6 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class2, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %6, i32 0, i32 0
  %7 = load i64, i64* %g_type, align 8
  %8 = load i64, i64* %__t, align 8
  %cmp = icmp eq i64 %7, %8
  br i1 %cmp, label %if.then.3, label %if.else.4

if.then.3:                                        ; preds = %land.lhs.true
  store i32 1, i32* %__r, align 4
  br label %if.end

if.else.4:                                        ; preds = %land.lhs.true, %if.else
  %9 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %10 = load i64, i64* %__t, align 8
  %call5 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %9, i64 %10) #8
  store i32 %call5, i32* %__r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.4, %if.then.3
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %if.then
  %11 = load i32, i32* %__r, align 4
  store i32 %11, i32* %tmp
  %12 = load i32, i32* %tmp
  %tobool7 = icmp ne i32 %12, 0
  br i1 %tobool7, label %if.then.8, label %if.else.9

if.then.8:                                        ; preds = %if.end.6
  br label %if.end.10

if.else.9:                                        ; preds = %if.end.6
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__func__.gimp_viewable_get_preview_size, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end.29

if.end.10:                                        ; preds = %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.10
  br label %do.body.11

do.body.11:                                       ; preds = %do.end
  %13 = load i32, i32* %size.addr, align 4
  %cmp12 = icmp sgt i32 %13, 0
  br i1 %cmp12, label %if.then.13, label %if.else.14

if.then.13:                                       ; preds = %do.body.11
  br label %if.end.15

if.else.14:                                       ; preds = %do.body.11
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__func__.gimp_viewable_get_preview_size, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0))
  br label %if.end.29

if.end.15:                                        ; preds = %if.then.13
  br label %do.end.16

do.end.16:                                        ; preds = %if.end.15
  %14 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %15 = bitcast %struct._GimpViewable* %14 to %struct._GTypeInstance*
  %g_class17 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %15, i32 0, i32 0
  %16 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class17, align 8
  %17 = bitcast %struct._GTypeClass* %16 to %struct._GimpViewableClass*
  %get_preview_size = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %17, i32 0, i32 6
  %18 = load void (%struct._GimpViewable*, i32, i32, i32, i32*, i32*)*, void (%struct._GimpViewable*, i32, i32, i32, i32*, i32*)** %get_preview_size, align 8
  %19 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %20 = load i32, i32* %size.addr, align 4
  %21 = load i32, i32* %popup.addr, align 4
  %22 = load i32, i32* %dot_for_dot.addr, align 4
  call void %18(%struct._GimpViewable* %19, i32 %20, i32 %21, i32 %22, i32* %w, i32* %h)
  %23 = load i32, i32* %w, align 4
  %cmp18 = icmp slt i32 %23, 2048
  br i1 %cmp18, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end.16
  %24 = load i32, i32* %w, align 4
  br label %cond.end

cond.false:                                       ; preds = %do.end.16
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %24, %cond.true ], [ 2048, %cond.false ]
  store i32 %cond, i32* %w, align 4
  %25 = load i32, i32* %h, align 4
  %cmp19 = icmp slt i32 %25, 2048
  br i1 %cmp19, label %cond.true.20, label %cond.false.21

cond.true.20:                                     ; preds = %cond.end
  %26 = load i32, i32* %h, align 4
  br label %cond.end.22

cond.false.21:                                    ; preds = %cond.end
  br label %cond.end.22

cond.end.22:                                      ; preds = %cond.false.21, %cond.true.20
  %cond23 = phi i32 [ %26, %cond.true.20 ], [ 2048, %cond.false.21 ]
  store i32 %cond23, i32* %h, align 4
  %27 = load i32*, i32** %width.addr, align 8
  %tobool24 = icmp ne i32* %27, null
  br i1 %tobool24, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %cond.end.22
  %28 = load i32, i32* %w, align 4
  %29 = load i32*, i32** %width.addr, align 8
  store i32 %28, i32* %29, align 4
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.25, %cond.end.22
  %30 = load i32*, i32** %height.addr, align 8
  %tobool27 = icmp ne i32* %30, null
  br i1 %tobool27, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %if.end.26
  %31 = load i32, i32* %h, align 4
  %32 = load i32*, i32** %height.addr, align 8
  store i32 %31, i32* %32, align 4
  br label %if.end.29

if.end.29:                                        ; preds = %if.else.9, %if.else.14, %if.then.28, %if.end.26
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @gimp_viewable_get_popup_size(%struct._GimpViewable* %viewable, i32 %width, i32 %height, i32 %dot_for_dot, i32* %popup_width, i32* %popup_height) #3 {
entry:
  %retval = alloca i32, align 4
  %viewable.addr = alloca %struct._GimpViewable*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %dot_for_dot.addr = alloca i32, align 4
  %popup_width.addr = alloca i32*, align 8
  %popup_height.addr = alloca i32*, align 8
  %w = alloca i32, align 4
  %h = alloca i32, align 4
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  %factor = alloca double, align 8
  store %struct._GimpViewable* %viewable, %struct._GimpViewable** %viewable.addr, align 8
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  store i32 %dot_for_dot, i32* %dot_for_dot.addr, align 4
  store i32* %popup_width, i32** %popup_width.addr, align 8
  store i32* %popup_height, i32** %popup_height.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %1 = bitcast %struct._GimpViewable* %0 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %1, %struct._GTypeInstance** %__inst, align 8
  %call = call i64 @gimp_viewable_get_type() #7
  store i64 %call, i64* %__t, align 8
  %2 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool = icmp ne %struct._GTypeInstance* %2, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %do.body
  store i32 0, i32* %__r, align 4
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %3 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %3, i32 0, i32 0
  %4 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool1 = icmp ne %struct._GTypeClass* %4, null
  br i1 %tobool1, label %land.lhs.true, label %if.else.4

land.lhs.true:                                    ; preds = %if.else
  %5 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class2 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %5, i32 0, i32 0
  %6 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class2, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %6, i32 0, i32 0
  %7 = load i64, i64* %g_type, align 8
  %8 = load i64, i64* %__t, align 8
  %cmp = icmp eq i64 %7, %8
  br i1 %cmp, label %if.then.3, label %if.else.4

if.then.3:                                        ; preds = %land.lhs.true
  store i32 1, i32* %__r, align 4
  br label %if.end

if.else.4:                                        ; preds = %land.lhs.true, %if.else
  %9 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %10 = load i64, i64* %__t, align 8
  %call5 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %9, i64 %10) #8
  store i32 %call5, i32* %__r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.4, %if.then.3
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %if.then
  %11 = load i32, i32* %__r, align 4
  store i32 %11, i32* %tmp
  %12 = load i32, i32* %tmp
  %tobool7 = icmp ne i32 %12, 0
  br i1 %tobool7, label %if.then.8, label %if.else.9

if.then.8:                                        ; preds = %if.end.6
  br label %if.end.10

if.else.9:                                        ; preds = %if.end.6
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @__func__.gimp_viewable_get_popup_size, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0))
  store i32 0, i32* %retval
  br label %return

if.end.10:                                        ; preds = %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.10
  %13 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %14 = bitcast %struct._GimpViewable* %13 to %struct._GTypeInstance*
  %g_class11 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %14, i32 0, i32 0
  %15 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class11, align 8
  %16 = bitcast %struct._GTypeClass* %15 to %struct._GimpViewableClass*
  %get_popup_size = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %16, i32 0, i32 7
  %17 = load i32 (%struct._GimpViewable*, i32, i32, i32, i32*, i32*)*, i32 (%struct._GimpViewable*, i32, i32, i32, i32*, i32*)** %get_popup_size, align 8
  %18 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %19 = load i32, i32* %width.addr, align 4
  %20 = load i32, i32* %height.addr, align 4
  %21 = load i32, i32* %dot_for_dot.addr, align 4
  %call12 = call i32 %17(%struct._GimpViewable* %18, i32 %19, i32 %20, i32 %21, i32* %w, i32* %h)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then.14, label %if.end.53

if.then.14:                                       ; preds = %do.end
  %22 = load i32, i32* %w, align 4
  %cmp15 = icmp slt i32 %22, 1
  br i1 %cmp15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.then.14
  store i32 1, i32* %w, align 4
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.16, %if.then.14
  %23 = load i32, i32* %h, align 4
  %cmp18 = icmp slt i32 %23, 1
  br i1 %cmp18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.end.17
  store i32 1, i32* %h, align 4
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.19, %if.end.17
  %24 = load i32, i32* %w, align 4
  %cmp21 = icmp sgt i32 %24, 512
  br i1 %cmp21, label %if.then.23, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.20
  %25 = load i32, i32* %h, align 4
  %cmp22 = icmp sgt i32 %25, 512
  br i1 %cmp22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %lor.lhs.false, %if.end.20
  %26 = load i32, i32* %w, align 4
  %27 = load i32, i32* %h, align 4
  %28 = load i32, i32* %dot_for_dot.addr, align 4
  call void @gimp_viewable_calc_preview_size(i32 %26, i32 %27, i32 512, i32 512, i32 %28, double 1.000000e+00, double 1.000000e+00, i32* %w, i32* %h, i32* null)
  br label %if.end.24

if.end.24:                                        ; preds = %if.then.23, %lor.lhs.false
  %29 = load i32, i32* %w, align 4
  %30 = load i32, i32* %h, align 4
  %mul = mul nsw i32 %29, %30
  %cmp25 = icmp sgt i32 %mul, 65536
  br i1 %cmp25, label %if.then.26, label %if.end.38

if.then.26:                                       ; preds = %if.end.24
  %31 = load i32, i32* %w, align 4
  %32 = load i32, i32* %h, align 4
  %mul28 = mul nsw i32 %31, %32
  %conv = sitofp i32 %mul28 to double
  %div = fdiv double %conv, 6.553600e+04
  %call29 = call double @sqrt(double %div) #6
  store double %call29, double* %factor, align 8
  %33 = load i32, i32* %w, align 4
  %conv30 = sitofp i32 %33 to double
  %34 = load double, double* %factor, align 8
  %div31 = fdiv double %conv30, %34
  %call32 = call double @rint(double %div31) #7
  %conv33 = fptosi double %call32 to i32
  store i32 %conv33, i32* %w, align 4
  %35 = load i32, i32* %h, align 4
  %conv34 = sitofp i32 %35 to double
  %36 = load double, double* %factor, align 8
  %div35 = fdiv double %conv34, %36
  %call36 = call double @rint(double %div35) #7
  %conv37 = fptosi double %call36 to i32
  store i32 %conv37, i32* %h, align 4
  br label %if.end.38

if.end.38:                                        ; preds = %if.then.26, %if.end.24
  %37 = load i32, i32* %w, align 4
  %cmp39 = icmp slt i32 %37, 1
  br i1 %cmp39, label %if.then.41, label %if.end.42

if.then.41:                                       ; preds = %if.end.38
  store i32 1, i32* %w, align 4
  br label %if.end.42

if.end.42:                                        ; preds = %if.then.41, %if.end.38
  %38 = load i32, i32* %h, align 4
  %cmp43 = icmp slt i32 %38, 1
  br i1 %cmp43, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %if.end.42
  store i32 1, i32* %h, align 4
  br label %if.end.46

if.end.46:                                        ; preds = %if.then.45, %if.end.42
  %39 = load i32*, i32** %popup_width.addr, align 8
  %tobool47 = icmp ne i32* %39, null
  br i1 %tobool47, label %if.then.48, label %if.end.49

if.then.48:                                       ; preds = %if.end.46
  %40 = load i32, i32* %w, align 4
  %41 = load i32*, i32** %popup_width.addr, align 8
  store i32 %40, i32* %41, align 4
  br label %if.end.49

if.end.49:                                        ; preds = %if.then.48, %if.end.46
  %42 = load i32*, i32** %popup_height.addr, align 8
  %tobool50 = icmp ne i32* %42, null
  br i1 %tobool50, label %if.then.51, label %if.end.52

if.then.51:                                       ; preds = %if.end.49
  %43 = load i32, i32* %h, align 4
  %44 = load i32*, i32** %popup_height.addr, align 8
  store i32 %43, i32* %44, align 4
  br label %if.end.52

if.end.52:                                        ; preds = %if.then.51, %if.end.49
  store i32 1, i32* %retval
  br label %return

if.end.53:                                        ; preds = %do.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.53, %if.end.52, %if.else.9
  %45 = load i32, i32* %retval
  ret i32 %45
}

; Function Attrs: nounwind
declare double @sqrt(double) #5

; Function Attrs: nounwind uwtable
define %struct._TempBuf* @gimp_viewable_get_preview(%struct._GimpViewable* %viewable, %struct._GimpContext* %context, i32 %width, i32 %height) #3 {
entry:
  %retval = alloca %struct._TempBuf*, align 8
  %viewable.addr = alloca %struct._GimpViewable*, align 8
  %context.addr = alloca %struct._GimpContext*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %private = alloca %struct._GimpViewablePrivate*, align 8
  %viewable_class = alloca %struct._GimpViewableClass*, align 8
  %temp_buf = alloca %struct._TempBuf*, align 8
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  %__inst14 = alloca %struct._GTypeInstance*, align 8
  %__t16 = alloca i64, align 8
  %__r19 = alloca i32, align 4
  %tmp34 = alloca i32, align 4
  store %struct._GimpViewable* %viewable, %struct._GimpViewable** %viewable.addr, align 8
  store %struct._GimpContext* %context, %struct._GimpContext** %context.addr, align 8
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  store %struct._TempBuf* null, %struct._TempBuf** %temp_buf, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %1 = bitcast %struct._GimpViewable* %0 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %1, %struct._GTypeInstance** %__inst, align 8
  %call = call i64 @gimp_viewable_get_type() #7
  store i64 %call, i64* %__t, align 8
  %2 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool = icmp ne %struct._GTypeInstance* %2, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %do.body
  store i32 0, i32* %__r, align 4
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %3 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %3, i32 0, i32 0
  %4 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool1 = icmp ne %struct._GTypeClass* %4, null
  br i1 %tobool1, label %land.lhs.true, label %if.else.4

land.lhs.true:                                    ; preds = %if.else
  %5 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class2 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %5, i32 0, i32 0
  %6 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class2, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %6, i32 0, i32 0
  %7 = load i64, i64* %g_type, align 8
  %8 = load i64, i64* %__t, align 8
  %cmp = icmp eq i64 %7, %8
  br i1 %cmp, label %if.then.3, label %if.else.4

if.then.3:                                        ; preds = %land.lhs.true
  store i32 1, i32* %__r, align 4
  br label %if.end

if.else.4:                                        ; preds = %land.lhs.true, %if.else
  %9 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %10 = load i64, i64* %__t, align 8
  %call5 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %9, i64 %10) #8
  store i32 %call5, i32* %__r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.4, %if.then.3
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %if.then
  %11 = load i32, i32* %__r, align 4
  store i32 %11, i32* %tmp
  %12 = load i32, i32* %tmp
  %tobool7 = icmp ne i32 %12, 0
  br i1 %tobool7, label %if.then.8, label %if.else.9

if.then.8:                                        ; preds = %if.end.6
  br label %if.end.10

if.else.9:                                        ; preds = %if.end.6
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__func__.gimp_viewable_get_preview, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0))
  store %struct._TempBuf* null, %struct._TempBuf** %retval
  br label %return

if.end.10:                                        ; preds = %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.10
  br label %do.body.11

do.body.11:                                       ; preds = %do.end
  %13 = load %struct._GimpContext*, %struct._GimpContext** %context.addr, align 8
  %cmp12 = icmp eq %struct._GimpContext* %13, null
  br i1 %cmp12, label %if.then.36, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.body.11
  %14 = load %struct._GimpContext*, %struct._GimpContext** %context.addr, align 8
  %15 = bitcast %struct._GimpContext* %14 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %15, %struct._GTypeInstance** %__inst14, align 8
  %call17 = call i64 @gimp_context_get_type() #7
  store i64 %call17, i64* %__t16, align 8
  %16 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst14, align 8
  %tobool20 = icmp ne %struct._GTypeInstance* %16, null
  br i1 %tobool20, label %if.else.22, label %if.then.21

if.then.21:                                       ; preds = %lor.lhs.false
  store i32 0, i32* %__r19, align 4
  br label %if.end.33

if.else.22:                                       ; preds = %lor.lhs.false
  %17 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst14, align 8
  %g_class23 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %17, i32 0, i32 0
  %18 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class23, align 8
  %tobool24 = icmp ne %struct._GTypeClass* %18, null
  br i1 %tobool24, label %land.lhs.true.25, label %if.else.30

land.lhs.true.25:                                 ; preds = %if.else.22
  %19 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst14, align 8
  %g_class26 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %19, i32 0, i32 0
  %20 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class26, align 8
  %g_type27 = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %20, i32 0, i32 0
  %21 = load i64, i64* %g_type27, align 8
  %22 = load i64, i64* %__t16, align 8
  %cmp28 = icmp eq i64 %21, %22
  br i1 %cmp28, label %if.then.29, label %if.else.30

if.then.29:                                       ; preds = %land.lhs.true.25
  store i32 1, i32* %__r19, align 4
  br label %if.end.32

if.else.30:                                       ; preds = %land.lhs.true.25, %if.else.22
  %23 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst14, align 8
  %24 = load i64, i64* %__t16, align 8
  %call31 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %23, i64 %24) #8
  store i32 %call31, i32* %__r19, align 4
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.30, %if.then.29
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.32, %if.then.21
  %25 = load i32, i32* %__r19, align 4
  store i32 %25, i32* %tmp34
  %26 = load i32, i32* %tmp34
  %tobool35 = icmp ne i32 %26, 0
  br i1 %tobool35, label %if.then.36, label %if.else.37

if.then.36:                                       ; preds = %if.end.33, %do.body.11
  br label %if.end.38

if.else.37:                                       ; preds = %if.end.33
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__func__.gimp_viewable_get_preview, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.4, i32 0, i32 0))
  store %struct._TempBuf* null, %struct._TempBuf** %retval
  br label %return

if.end.38:                                        ; preds = %if.then.36
  br label %do.end.39

do.end.39:                                        ; preds = %if.end.38
  br label %do.body.40

do.body.40:                                       ; preds = %do.end.39
  %27 = load i32, i32* %width.addr, align 4
  %cmp41 = icmp sgt i32 %27, 0
  br i1 %cmp41, label %if.then.42, label %if.else.43

if.then.42:                                       ; preds = %do.body.40
  br label %if.end.44

if.else.43:                                       ; preds = %do.body.40
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__func__.gimp_viewable_get_preview, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i32 0, i32 0))
  store %struct._TempBuf* null, %struct._TempBuf** %retval
  br label %return

if.end.44:                                        ; preds = %if.then.42
  br label %do.end.45

do.end.45:                                        ; preds = %if.end.44
  br label %do.body.46

do.body.46:                                       ; preds = %do.end.45
  %28 = load i32, i32* %height.addr, align 4
  %cmp47 = icmp sgt i32 %28, 0
  br i1 %cmp47, label %if.then.48, label %if.else.49

if.then.48:                                       ; preds = %do.body.46
  br label %if.end.50

if.else.49:                                       ; preds = %do.body.46
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__func__.gimp_viewable_get_preview, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i32 0, i32 0))
  store %struct._TempBuf* null, %struct._TempBuf** %retval
  br label %return

if.end.50:                                        ; preds = %if.then.48
  br label %do.end.51

do.end.51:                                        ; preds = %if.end.50
  %29 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %30 = bitcast %struct._GimpViewable* %29 to %struct._GTypeInstance*
  %call52 = call i64 @gimp_viewable_get_type() #7
  %call53 = call i8* @g_type_instance_get_private(%struct._GTypeInstance* %30, i64 %call52)
  %31 = bitcast i8* %call53 to %struct._GimpViewablePrivate*
  store %struct._GimpViewablePrivate* %31, %struct._GimpViewablePrivate** %private, align 8
  %32 = load %struct._GimpContext*, %struct._GimpContext** %context.addr, align 8
  %cmp54 = icmp eq %struct._GimpContext* %32, null
  br i1 %cmp54, label %if.then.55, label %if.end.56

if.then.55:                                       ; preds = %do.end.51
  call void (i8*, ...) @g_warning(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__func__.gimp_viewable_get_preview, i32 0, i32 0))
  br label %if.end.56

if.end.56:                                        ; preds = %if.then.55, %do.end.51
  %33 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %34 = bitcast %struct._GimpViewable* %33 to %struct._GTypeInstance*
  %g_class57 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %34, i32 0, i32 0
  %35 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class57, align 8
  %36 = bitcast %struct._GTypeClass* %35 to %struct._GimpViewableClass*
  store %struct._GimpViewableClass* %36, %struct._GimpViewableClass** %viewable_class, align 8
  %37 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %viewable_class, align 8
  %get_preview = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %37, i32 0, i32 8
  %38 = load %struct._TempBuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)*, %struct._TempBuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)** %get_preview, align 8
  %tobool58 = icmp ne %struct._TempBuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)* %38, null
  br i1 %tobool58, label %if.then.59, label %if.end.62

if.then.59:                                       ; preds = %if.end.56
  %39 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %viewable_class, align 8
  %get_preview60 = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %39, i32 0, i32 8
  %40 = load %struct._TempBuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)*, %struct._TempBuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)** %get_preview60, align 8
  %41 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %42 = load %struct._GimpContext*, %struct._GimpContext** %context.addr, align 8
  %43 = load i32, i32* %width.addr, align 4
  %44 = load i32, i32* %height.addr, align 4
  %call61 = call %struct._TempBuf* %40(%struct._GimpViewable* %41, %struct._GimpContext* %42, i32 %43, i32 %44)
  store %struct._TempBuf* %call61, %struct._TempBuf** %temp_buf, align 8
  br label %if.end.62

if.end.62:                                        ; preds = %if.then.59, %if.end.56
  %45 = load %struct._TempBuf*, %struct._TempBuf** %temp_buf, align 8
  %tobool63 = icmp ne %struct._TempBuf* %45, null
  br i1 %tobool63, label %if.then.64, label %if.end.65

if.then.64:                                       ; preds = %if.end.62
  %46 = load %struct._TempBuf*, %struct._TempBuf** %temp_buf, align 8
  store %struct._TempBuf* %46, %struct._TempBuf** %retval
  br label %return

if.end.65:                                        ; preds = %if.end.62
  %47 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_temp_buf = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %47, i32 0, i32 3
  %48 = load %struct._TempBuf*, %struct._TempBuf** %preview_temp_buf, align 8
  %tobool66 = icmp ne %struct._TempBuf* %48, null
  br i1 %tobool66, label %if.then.67, label %if.end.80

if.then.67:                                       ; preds = %if.end.65
  %49 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_temp_buf68 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %49, i32 0, i32 3
  %50 = load %struct._TempBuf*, %struct._TempBuf** %preview_temp_buf68, align 8
  %width69 = getelementptr inbounds %struct._TempBuf, %struct._TempBuf* %50, i32 0, i32 1
  %51 = load i32, i32* %width69, align 4
  %52 = load i32, i32* %width.addr, align 4
  %cmp70 = icmp eq i32 %51, %52
  br i1 %cmp70, label %land.lhs.true.71, label %if.end.77

land.lhs.true.71:                                 ; preds = %if.then.67
  %53 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_temp_buf72 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %53, i32 0, i32 3
  %54 = load %struct._TempBuf*, %struct._TempBuf** %preview_temp_buf72, align 8
  %height73 = getelementptr inbounds %struct._TempBuf, %struct._TempBuf* %54, i32 0, i32 2
  %55 = load i32, i32* %height73, align 4
  %56 = load i32, i32* %height.addr, align 4
  %cmp74 = icmp eq i32 %55, %56
  br i1 %cmp74, label %if.then.75, label %if.end.77

if.then.75:                                       ; preds = %land.lhs.true.71
  %57 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_temp_buf76 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %57, i32 0, i32 3
  %58 = load %struct._TempBuf*, %struct._TempBuf** %preview_temp_buf76, align 8
  store %struct._TempBuf* %58, %struct._TempBuf** %retval
  br label %return

if.end.77:                                        ; preds = %land.lhs.true.71, %if.then.67
  %59 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_temp_buf78 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %59, i32 0, i32 3
  %60 = load %struct._TempBuf*, %struct._TempBuf** %preview_temp_buf78, align 8
  call void @temp_buf_free(%struct._TempBuf* %60)
  %61 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_temp_buf79 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %61, i32 0, i32 3
  store %struct._TempBuf* null, %struct._TempBuf** %preview_temp_buf79, align 8
  br label %if.end.80

if.end.80:                                        ; preds = %if.end.77, %if.end.65
  %62 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %viewable_class, align 8
  %get_new_preview = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %62, i32 0, i32 9
  %63 = load %struct._TempBuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)*, %struct._TempBuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)** %get_new_preview, align 8
  %tobool81 = icmp ne %struct._TempBuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)* %63, null
  br i1 %tobool81, label %if.then.82, label %if.end.85

if.then.82:                                       ; preds = %if.end.80
  %64 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %viewable_class, align 8
  %get_new_preview83 = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %64, i32 0, i32 9
  %65 = load %struct._TempBuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)*, %struct._TempBuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)** %get_new_preview83, align 8
  %66 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %67 = load %struct._GimpContext*, %struct._GimpContext** %context.addr, align 8
  %68 = load i32, i32* %width.addr, align 4
  %69 = load i32, i32* %height.addr, align 4
  %call84 = call %struct._TempBuf* %65(%struct._GimpViewable* %66, %struct._GimpContext* %67, i32 %68, i32 %69)
  store %struct._TempBuf* %call84, %struct._TempBuf** %temp_buf, align 8
  br label %if.end.85

if.end.85:                                        ; preds = %if.then.82, %if.end.80
  %70 = load %struct._TempBuf*, %struct._TempBuf** %temp_buf, align 8
  %71 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_temp_buf86 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %71, i32 0, i32 3
  store %struct._TempBuf* %70, %struct._TempBuf** %preview_temp_buf86, align 8
  %72 = load %struct._TempBuf*, %struct._TempBuf** %temp_buf, align 8
  store %struct._TempBuf* %72, %struct._TempBuf** %retval
  br label %return

return:                                           ; preds = %if.end.85, %if.then.75, %if.then.64, %if.else.49, %if.else.43, %if.else.37, %if.else.9
  %73 = load %struct._TempBuf*, %struct._TempBuf** %retval
  ret %struct._TempBuf* %73
}

; Function Attrs: nounwind readnone
declare i64 @gimp_context_get_type() #2

; Function Attrs: nounwind uwtable
define internal void @g_warning(i8* %format, ...) #3 {
entry:
  %format.addr = alloca i8*, align 8
  %args = alloca [1 x %struct.__va_list_tag], align 16
  store i8* %format, i8** %format.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i32 0, i32 0
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %0 = load i8*, i8** %format.addr, align 8
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i32 0, i32 0
  call void @g_logv(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i32 16, i8* %0, %struct.__va_list_tag* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i32 0, i32 0
  %arraydecay34 = bitcast %struct.__va_list_tag* %arraydecay3 to i8*
  call void @llvm.va_end(i8* %arraydecay34)
  ret void
}

declare void @temp_buf_free(%struct._TempBuf*) #1

; Function Attrs: nounwind uwtable
define %struct._TempBuf* @gimp_viewable_get_new_preview(%struct._GimpViewable* %viewable, %struct._GimpContext* %context, i32 %width, i32 %height) #3 {
entry:
  %retval = alloca %struct._TempBuf*, align 8
  %viewable.addr = alloca %struct._GimpViewable*, align 8
  %context.addr = alloca %struct._GimpContext*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %viewable_class = alloca %struct._GimpViewableClass*, align 8
  %temp_buf = alloca %struct._TempBuf*, align 8
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  %__inst14 = alloca %struct._GTypeInstance*, align 8
  %__t16 = alloca i64, align 8
  %__r19 = alloca i32, align 4
  %tmp34 = alloca i32, align 4
  store %struct._GimpViewable* %viewable, %struct._GimpViewable** %viewable.addr, align 8
  store %struct._GimpContext* %context, %struct._GimpContext** %context.addr, align 8
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  store %struct._TempBuf* null, %struct._TempBuf** %temp_buf, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %1 = bitcast %struct._GimpViewable* %0 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %1, %struct._GTypeInstance** %__inst, align 8
  %call = call i64 @gimp_viewable_get_type() #7
  store i64 %call, i64* %__t, align 8
  %2 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool = icmp ne %struct._GTypeInstance* %2, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %do.body
  store i32 0, i32* %__r, align 4
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %3 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %3, i32 0, i32 0
  %4 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool1 = icmp ne %struct._GTypeClass* %4, null
  br i1 %tobool1, label %land.lhs.true, label %if.else.4

land.lhs.true:                                    ; preds = %if.else
  %5 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class2 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %5, i32 0, i32 0
  %6 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class2, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %6, i32 0, i32 0
  %7 = load i64, i64* %g_type, align 8
  %8 = load i64, i64* %__t, align 8
  %cmp = icmp eq i64 %7, %8
  br i1 %cmp, label %if.then.3, label %if.else.4

if.then.3:                                        ; preds = %land.lhs.true
  store i32 1, i32* %__r, align 4
  br label %if.end

if.else.4:                                        ; preds = %land.lhs.true, %if.else
  %9 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %10 = load i64, i64* %__t, align 8
  %call5 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %9, i64 %10) #8
  store i32 %call5, i32* %__r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.4, %if.then.3
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %if.then
  %11 = load i32, i32* %__r, align 4
  store i32 %11, i32* %tmp
  %12 = load i32, i32* %tmp
  %tobool7 = icmp ne i32 %12, 0
  br i1 %tobool7, label %if.then.8, label %if.else.9

if.then.8:                                        ; preds = %if.end.6
  br label %if.end.10

if.else.9:                                        ; preds = %if.end.6
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @__func__.gimp_viewable_get_new_preview, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0))
  store %struct._TempBuf* null, %struct._TempBuf** %retval
  br label %return

if.end.10:                                        ; preds = %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.10
  br label %do.body.11

do.body.11:                                       ; preds = %do.end
  %13 = load %struct._GimpContext*, %struct._GimpContext** %context.addr, align 8
  %cmp12 = icmp eq %struct._GimpContext* %13, null
  br i1 %cmp12, label %if.then.36, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.body.11
  %14 = load %struct._GimpContext*, %struct._GimpContext** %context.addr, align 8
  %15 = bitcast %struct._GimpContext* %14 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %15, %struct._GTypeInstance** %__inst14, align 8
  %call17 = call i64 @gimp_context_get_type() #7
  store i64 %call17, i64* %__t16, align 8
  %16 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst14, align 8
  %tobool20 = icmp ne %struct._GTypeInstance* %16, null
  br i1 %tobool20, label %if.else.22, label %if.then.21

if.then.21:                                       ; preds = %lor.lhs.false
  store i32 0, i32* %__r19, align 4
  br label %if.end.33

if.else.22:                                       ; preds = %lor.lhs.false
  %17 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst14, align 8
  %g_class23 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %17, i32 0, i32 0
  %18 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class23, align 8
  %tobool24 = icmp ne %struct._GTypeClass* %18, null
  br i1 %tobool24, label %land.lhs.true.25, label %if.else.30

land.lhs.true.25:                                 ; preds = %if.else.22
  %19 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst14, align 8
  %g_class26 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %19, i32 0, i32 0
  %20 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class26, align 8
  %g_type27 = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %20, i32 0, i32 0
  %21 = load i64, i64* %g_type27, align 8
  %22 = load i64, i64* %__t16, align 8
  %cmp28 = icmp eq i64 %21, %22
  br i1 %cmp28, label %if.then.29, label %if.else.30

if.then.29:                                       ; preds = %land.lhs.true.25
  store i32 1, i32* %__r19, align 4
  br label %if.end.32

if.else.30:                                       ; preds = %land.lhs.true.25, %if.else.22
  %23 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst14, align 8
  %24 = load i64, i64* %__t16, align 8
  %call31 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %23, i64 %24) #8
  store i32 %call31, i32* %__r19, align 4
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.30, %if.then.29
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.32, %if.then.21
  %25 = load i32, i32* %__r19, align 4
  store i32 %25, i32* %tmp34
  %26 = load i32, i32* %tmp34
  %tobool35 = icmp ne i32 %26, 0
  br i1 %tobool35, label %if.then.36, label %if.else.37

if.then.36:                                       ; preds = %if.end.33, %do.body.11
  br label %if.end.38

if.else.37:                                       ; preds = %if.end.33
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @__func__.gimp_viewable_get_new_preview, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.4, i32 0, i32 0))
  store %struct._TempBuf* null, %struct._TempBuf** %retval
  br label %return

if.end.38:                                        ; preds = %if.then.36
  br label %do.end.39

do.end.39:                                        ; preds = %if.end.38
  br label %do.body.40

do.body.40:                                       ; preds = %do.end.39
  %27 = load i32, i32* %width.addr, align 4
  %cmp41 = icmp sgt i32 %27, 0
  br i1 %cmp41, label %if.then.42, label %if.else.43

if.then.42:                                       ; preds = %do.body.40
  br label %if.end.44

if.else.43:                                       ; preds = %do.body.40
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @__func__.gimp_viewable_get_new_preview, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i32 0, i32 0))
  store %struct._TempBuf* null, %struct._TempBuf** %retval
  br label %return

if.end.44:                                        ; preds = %if.then.42
  br label %do.end.45

do.end.45:                                        ; preds = %if.end.44
  br label %do.body.46

do.body.46:                                       ; preds = %do.end.45
  %28 = load i32, i32* %height.addr, align 4
  %cmp47 = icmp sgt i32 %28, 0
  br i1 %cmp47, label %if.then.48, label %if.else.49

if.then.48:                                       ; preds = %do.body.46
  br label %if.end.50

if.else.49:                                       ; preds = %do.body.46
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @__func__.gimp_viewable_get_new_preview, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i32 0, i32 0))
  store %struct._TempBuf* null, %struct._TempBuf** %retval
  br label %return

if.end.50:                                        ; preds = %if.then.48
  br label %do.end.51

do.end.51:                                        ; preds = %if.end.50
  %29 = load %struct._GimpContext*, %struct._GimpContext** %context.addr, align 8
  %cmp52 = icmp eq %struct._GimpContext* %29, null
  br i1 %cmp52, label %if.then.53, label %if.end.54

if.then.53:                                       ; preds = %do.end.51
  call void (i8*, ...) @g_warning(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @__func__.gimp_viewable_get_new_preview, i32 0, i32 0))
  br label %if.end.54

if.end.54:                                        ; preds = %if.then.53, %do.end.51
  %30 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %31 = bitcast %struct._GimpViewable* %30 to %struct._GTypeInstance*
  %g_class55 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %31, i32 0, i32 0
  %32 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class55, align 8
  %33 = bitcast %struct._GTypeClass* %32 to %struct._GimpViewableClass*
  store %struct._GimpViewableClass* %33, %struct._GimpViewableClass** %viewable_class, align 8
  %34 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %viewable_class, align 8
  %get_new_preview = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %34, i32 0, i32 9
  %35 = load %struct._TempBuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)*, %struct._TempBuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)** %get_new_preview, align 8
  %tobool56 = icmp ne %struct._TempBuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)* %35, null
  br i1 %tobool56, label %if.then.57, label %if.end.60

if.then.57:                                       ; preds = %if.end.54
  %36 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %viewable_class, align 8
  %get_new_preview58 = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %36, i32 0, i32 9
  %37 = load %struct._TempBuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)*, %struct._TempBuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)** %get_new_preview58, align 8
  %38 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %39 = load %struct._GimpContext*, %struct._GimpContext** %context.addr, align 8
  %40 = load i32, i32* %width.addr, align 4
  %41 = load i32, i32* %height.addr, align 4
  %call59 = call %struct._TempBuf* %37(%struct._GimpViewable* %38, %struct._GimpContext* %39, i32 %40, i32 %41)
  store %struct._TempBuf* %call59, %struct._TempBuf** %temp_buf, align 8
  br label %if.end.60

if.end.60:                                        ; preds = %if.then.57, %if.end.54
  %42 = load %struct._TempBuf*, %struct._TempBuf** %temp_buf, align 8
  %tobool61 = icmp ne %struct._TempBuf* %42, null
  br i1 %tobool61, label %if.then.62, label %if.end.63

if.then.62:                                       ; preds = %if.end.60
  %43 = load %struct._TempBuf*, %struct._TempBuf** %temp_buf, align 8
  store %struct._TempBuf* %43, %struct._TempBuf** %retval
  br label %return

if.end.63:                                        ; preds = %if.end.60
  %44 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %viewable_class, align 8
  %get_preview = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %44, i32 0, i32 8
  %45 = load %struct._TempBuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)*, %struct._TempBuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)** %get_preview, align 8
  %tobool64 = icmp ne %struct._TempBuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)* %45, null
  br i1 %tobool64, label %if.then.65, label %if.end.68

if.then.65:                                       ; preds = %if.end.63
  %46 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %viewable_class, align 8
  %get_preview66 = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %46, i32 0, i32 8
  %47 = load %struct._TempBuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)*, %struct._TempBuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)** %get_preview66, align 8
  %48 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %49 = load %struct._GimpContext*, %struct._GimpContext** %context.addr, align 8
  %50 = load i32, i32* %width.addr, align 4
  %51 = load i32, i32* %height.addr, align 4
  %call67 = call %struct._TempBuf* %47(%struct._GimpViewable* %48, %struct._GimpContext* %49, i32 %50, i32 %51)
  store %struct._TempBuf* %call67, %struct._TempBuf** %temp_buf, align 8
  br label %if.end.68

if.end.68:                                        ; preds = %if.then.65, %if.end.63
  %52 = load %struct._TempBuf*, %struct._TempBuf** %temp_buf, align 8
  %tobool69 = icmp ne %struct._TempBuf* %52, null
  br i1 %tobool69, label %if.then.70, label %if.end.72

if.then.70:                                       ; preds = %if.end.68
  %53 = load %struct._TempBuf*, %struct._TempBuf** %temp_buf, align 8
  %call71 = call %struct._TempBuf* @temp_buf_copy(%struct._TempBuf* %53, %struct._TempBuf* null)
  store %struct._TempBuf* %call71, %struct._TempBuf** %retval
  br label %return

if.end.72:                                        ; preds = %if.end.68
  store %struct._TempBuf* null, %struct._TempBuf** %retval
  br label %return

return:                                           ; preds = %if.end.72, %if.then.70, %if.then.62, %if.else.49, %if.else.43, %if.else.37, %if.else.9
  %54 = load %struct._TempBuf*, %struct._TempBuf** %retval
  ret %struct._TempBuf* %54
}

declare %struct._TempBuf* @temp_buf_copy(%struct._TempBuf*, %struct._TempBuf*) #1

; Function Attrs: nounwind uwtable
define %struct._TempBuf* @gimp_viewable_get_dummy_preview(%struct._GimpViewable* %viewable, i32 %width, i32 %height, i32 %bpp) #3 {
entry:
  %retval = alloca %struct._TempBuf*, align 8
  %viewable.addr = alloca %struct._GimpViewable*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %bpp.addr = alloca i32, align 4
  %pixbuf = alloca %struct._GdkPixbuf*, align 8
  %buf = alloca %struct._TempBuf*, align 8
  %src = alloca i8*, align 8
  %dest = alloca i8*, align 8
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct._GimpViewable* %viewable, %struct._GimpViewable** %viewable.addr, align 8
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  store i32 %bpp, i32* %bpp.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %1 = bitcast %struct._GimpViewable* %0 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %1, %struct._GTypeInstance** %__inst, align 8
  %call = call i64 @gimp_viewable_get_type() #7
  store i64 %call, i64* %__t, align 8
  %2 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool = icmp ne %struct._GTypeInstance* %2, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %do.body
  store i32 0, i32* %__r, align 4
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %3 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %3, i32 0, i32 0
  %4 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool1 = icmp ne %struct._GTypeClass* %4, null
  br i1 %tobool1, label %land.lhs.true, label %if.else.4

land.lhs.true:                                    ; preds = %if.else
  %5 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class2 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %5, i32 0, i32 0
  %6 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class2, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %6, i32 0, i32 0
  %7 = load i64, i64* %g_type, align 8
  %8 = load i64, i64* %__t, align 8
  %cmp = icmp eq i64 %7, %8
  br i1 %cmp, label %if.then.3, label %if.else.4

if.then.3:                                        ; preds = %land.lhs.true
  store i32 1, i32* %__r, align 4
  br label %if.end

if.else.4:                                        ; preds = %land.lhs.true, %if.else
  %9 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %10 = load i64, i64* %__t, align 8
  %call5 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %9, i64 %10) #8
  store i32 %call5, i32* %__r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.4, %if.then.3
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %if.then
  %11 = load i32, i32* %__r, align 4
  store i32 %11, i32* %tmp
  %12 = load i32, i32* %tmp
  %tobool7 = icmp ne i32 %12, 0
  br i1 %tobool7, label %if.then.8, label %if.else.9

if.then.8:                                        ; preds = %if.end.6
  br label %if.end.10

if.else.9:                                        ; preds = %if.end.6
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @__func__.gimp_viewable_get_dummy_preview, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0))
  store %struct._TempBuf* null, %struct._TempBuf** %retval
  br label %return

if.end.10:                                        ; preds = %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.10
  br label %do.body.11

do.body.11:                                       ; preds = %do.end
  %13 = load i32, i32* %width.addr, align 4
  %cmp12 = icmp sgt i32 %13, 0
  br i1 %cmp12, label %if.then.13, label %if.else.14

if.then.13:                                       ; preds = %do.body.11
  br label %if.end.15

if.else.14:                                       ; preds = %do.body.11
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @__func__.gimp_viewable_get_dummy_preview, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i32 0, i32 0))
  store %struct._TempBuf* null, %struct._TempBuf** %retval
  br label %return

if.end.15:                                        ; preds = %if.then.13
  br label %do.end.16

do.end.16:                                        ; preds = %if.end.15
  br label %do.body.17

do.body.17:                                       ; preds = %do.end.16
  %14 = load i32, i32* %height.addr, align 4
  %cmp18 = icmp sgt i32 %14, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.17
  br label %if.end.21

if.else.20:                                       ; preds = %do.body.17
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @__func__.gimp_viewable_get_dummy_preview, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i32 0, i32 0))
  store %struct._TempBuf* null, %struct._TempBuf** %retval
  br label %return

if.end.21:                                        ; preds = %if.then.19
  br label %do.end.22

do.end.22:                                        ; preds = %if.end.21
  br label %do.body.23

do.body.23:                                       ; preds = %do.end.22
  %15 = load i32, i32* %bpp.addr, align 4
  %cmp24 = icmp eq i32 %15, 3
  br i1 %cmp24, label %if.then.26, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.body.23
  %16 = load i32, i32* %bpp.addr, align 4
  %cmp25 = icmp eq i32 %16, 4
  br i1 %cmp25, label %if.then.26, label %if.else.27

if.then.26:                                       ; preds = %lor.lhs.false, %do.body.23
  br label %if.end.28

if.else.27:                                       ; preds = %lor.lhs.false
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @__func__.gimp_viewable_get_dummy_preview, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.8, i32 0, i32 0))
  store %struct._TempBuf* null, %struct._TempBuf** %retval
  br label %return

if.end.28:                                        ; preds = %if.then.26
  br label %do.end.29

do.end.29:                                        ; preds = %if.end.28
  %17 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %18 = load i32, i32* %width.addr, align 4
  %19 = load i32, i32* %height.addr, align 4
  %20 = load i32, i32* %bpp.addr, align 4
  %call30 = call %struct._GdkPixbuf* @gimp_viewable_get_dummy_pixbuf(%struct._GimpViewable* %17, i32 %18, i32 %19, i32 %20)
  store %struct._GdkPixbuf* %call30, %struct._GdkPixbuf** %pixbuf, align 8
  %21 = load i32, i32* %width.addr, align 4
  %22 = load i32, i32* %height.addr, align 4
  %23 = load i32, i32* %bpp.addr, align 4
  %call31 = call %struct._TempBuf* @temp_buf_new(i32 %21, i32 %22, i32 %23, i32 0, i32 0, i8* null)
  store %struct._TempBuf* %call31, %struct._TempBuf** %buf, align 8
  %24 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %pixbuf, align 8
  %call32 = call i8* @gdk_pixbuf_get_pixels(%struct._GdkPixbuf* %24)
  store i8* %call32, i8** %src, align 8
  %25 = load %struct._TempBuf*, %struct._TempBuf** %buf, align 8
  %call33 = call i8* @temp_buf_get_data(%struct._TempBuf* %25)
  store i8* %call33, i8** %dest, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %do.end.29
  %26 = load i32, i32* %height.addr, align 4
  %dec = add nsw i32 %26, -1
  store i32 %dec, i32* %height.addr, align 4
  %tobool34 = icmp ne i32 %26, 0
  br i1 %tobool34, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %27 = load i8*, i8** %dest, align 8
  %28 = load i8*, i8** %src, align 8
  %29 = load i32, i32* %width.addr, align 4
  %30 = load i32, i32* %bpp.addr, align 4
  %mul = mul nsw i32 %29, %30
  %conv = sext i32 %mul to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 %conv, i32 1, i1 false)
  %31 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %pixbuf, align 8
  %call35 = call i32 @gdk_pixbuf_get_rowstride(%struct._GdkPixbuf* %31)
  %32 = load i8*, i8** %src, align 8
  %idx.ext = sext i32 %call35 to i64
  %add.ptr = getelementptr inbounds i8, i8* %32, i64 %idx.ext
  store i8* %add.ptr, i8** %src, align 8
  %33 = load i32, i32* %width.addr, align 4
  %34 = load i32, i32* %bpp.addr, align 4
  %mul36 = mul nsw i32 %33, %34
  %35 = load i8*, i8** %dest, align 8
  %idx.ext37 = sext i32 %mul36 to i64
  %add.ptr38 = getelementptr inbounds i8, i8* %35, i64 %idx.ext37
  store i8* %add.ptr38, i8** %dest, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %36 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %pixbuf, align 8
  %37 = bitcast %struct._GdkPixbuf* %36 to i8*
  call void @g_object_unref(i8* %37)
  %38 = load %struct._TempBuf*, %struct._TempBuf** %buf, align 8
  store %struct._TempBuf* %38, %struct._TempBuf** %retval
  br label %return

return:                                           ; preds = %while.end, %if.else.27, %if.else.20, %if.else.14, %if.else.9
  %39 = load %struct._TempBuf*, %struct._TempBuf** %retval
  ret %struct._TempBuf* %39
}

; Function Attrs: nounwind uwtable
define %struct._GdkPixbuf* @gimp_viewable_get_dummy_pixbuf(%struct._GimpViewable* %viewable, i32 %width, i32 %height, i32 %bpp) #3 {
entry:
  %retval = alloca %struct._GdkPixbuf*, align 8
  %viewable.addr = alloca %struct._GimpViewable*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %bpp.addr = alloca i32, align 4
  %icon = alloca %struct._GdkPixbuf*, align 8
  %pixbuf = alloca %struct._GdkPixbuf*, align 8
  %ratio = alloca double, align 8
  %w = alloca i32, align 4
  %h = alloca i32, align 4
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct._GimpViewable* %viewable, %struct._GimpViewable** %viewable.addr, align 8
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  store i32 %bpp, i32* %bpp.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %1 = bitcast %struct._GimpViewable* %0 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %1, %struct._GTypeInstance** %__inst, align 8
  %call = call i64 @gimp_viewable_get_type() #7
  store i64 %call, i64* %__t, align 8
  %2 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool = icmp ne %struct._GTypeInstance* %2, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %do.body
  store i32 0, i32* %__r, align 4
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %3 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %3, i32 0, i32 0
  %4 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool1 = icmp ne %struct._GTypeClass* %4, null
  br i1 %tobool1, label %land.lhs.true, label %if.else.4

land.lhs.true:                                    ; preds = %if.else
  %5 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class2 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %5, i32 0, i32 0
  %6 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class2, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %6, i32 0, i32 0
  %7 = load i64, i64* %g_type, align 8
  %8 = load i64, i64* %__t, align 8
  %cmp = icmp eq i64 %7, %8
  br i1 %cmp, label %if.then.3, label %if.else.4

if.then.3:                                        ; preds = %land.lhs.true
  store i32 1, i32* %__r, align 4
  br label %if.end

if.else.4:                                        ; preds = %land.lhs.true, %if.else
  %9 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %10 = load i64, i64* %__t, align 8
  %call5 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %9, i64 %10) #8
  store i32 %call5, i32* %__r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.4, %if.then.3
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %if.then
  %11 = load i32, i32* %__r, align 4
  store i32 %11, i32* %tmp
  %12 = load i32, i32* %tmp
  %tobool7 = icmp ne i32 %12, 0
  br i1 %tobool7, label %if.then.8, label %if.else.9

if.then.8:                                        ; preds = %if.end.6
  br label %if.end.10

if.else.9:                                        ; preds = %if.end.6
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__func__.gimp_viewable_get_dummy_pixbuf, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0))
  store %struct._GdkPixbuf* null, %struct._GdkPixbuf** %retval
  br label %return

if.end.10:                                        ; preds = %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.10
  br label %do.body.11

do.body.11:                                       ; preds = %do.end
  %13 = load i32, i32* %width.addr, align 4
  %cmp12 = icmp sgt i32 %13, 0
  br i1 %cmp12, label %if.then.13, label %if.else.14

if.then.13:                                       ; preds = %do.body.11
  br label %if.end.15

if.else.14:                                       ; preds = %do.body.11
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__func__.gimp_viewable_get_dummy_pixbuf, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i32 0, i32 0))
  store %struct._GdkPixbuf* null, %struct._GdkPixbuf** %retval
  br label %return

if.end.15:                                        ; preds = %if.then.13
  br label %do.end.16

do.end.16:                                        ; preds = %if.end.15
  br label %do.body.17

do.body.17:                                       ; preds = %do.end.16
  %14 = load i32, i32* %height.addr, align 4
  %cmp18 = icmp sgt i32 %14, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.17
  br label %if.end.21

if.else.20:                                       ; preds = %do.body.17
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__func__.gimp_viewable_get_dummy_pixbuf, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i32 0, i32 0))
  store %struct._GdkPixbuf* null, %struct._GdkPixbuf** %retval
  br label %return

if.end.21:                                        ; preds = %if.then.19
  br label %do.end.22

do.end.22:                                        ; preds = %if.end.21
  br label %do.body.23

do.body.23:                                       ; preds = %do.end.22
  %15 = load i32, i32* %bpp.addr, align 4
  %cmp24 = icmp eq i32 %15, 3
  br i1 %cmp24, label %if.then.26, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.body.23
  %16 = load i32, i32* %bpp.addr, align 4
  %cmp25 = icmp eq i32 %16, 4
  br i1 %cmp25, label %if.then.26, label %if.else.27

if.then.26:                                       ; preds = %lor.lhs.false, %do.body.23
  br label %if.end.28

if.else.27:                                       ; preds = %lor.lhs.false
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__func__.gimp_viewable_get_dummy_pixbuf, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.8, i32 0, i32 0))
  store %struct._GdkPixbuf* null, %struct._GdkPixbuf** %retval
  br label %return

if.end.28:                                        ; preds = %if.then.26
  br label %do.end.29

do.end.29:                                        ; preds = %if.end.28
  %call30 = call %struct._GdkPixbuf* @gdk_pixbuf_new_from_inline(i32 -1, i8* getelementptr inbounds ([16409 x i8], [16409 x i8]* @stock_question_64, i32 0, i32 0), i32 0, %struct._GError** null)
  store %struct._GdkPixbuf* %call30, %struct._GdkPixbuf** %icon, align 8
  br label %do.body.31

do.body.31:                                       ; preds = %do.end.29
  %17 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %icon, align 8
  %cmp32 = icmp ne %struct._GdkPixbuf* %17, null
  br i1 %cmp32, label %if.then.33, label %if.else.34

if.then.33:                                       ; preds = %do.body.31
  br label %if.end.35

if.else.34:                                       ; preds = %do.body.31
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__func__.gimp_viewable_get_dummy_pixbuf, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i32 0, i32 0))
  store %struct._GdkPixbuf* null, %struct._GdkPixbuf** %retval
  br label %return

if.end.35:                                        ; preds = %if.then.33
  br label %do.end.36

do.end.36:                                        ; preds = %if.end.35
  %18 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %icon, align 8
  %call37 = call i32 @gdk_pixbuf_get_width(%struct._GdkPixbuf* %18)
  store i32 %call37, i32* %w, align 4
  %19 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %icon, align 8
  %call38 = call i32 @gdk_pixbuf_get_height(%struct._GdkPixbuf* %19)
  store i32 %call38, i32* %h, align 4
  %20 = load i32, i32* %width.addr, align 4
  %21 = load i32, i32* %height.addr, align 4
  %cmp39 = icmp slt i32 %20, %21
  br i1 %cmp39, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end.36
  %22 = load i32, i32* %width.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %do.end.36
  %23 = load i32, i32* %height.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %22, %cond.true ], [ %23, %cond.false ]
  %conv = sitofp i32 %cond to double
  %24 = load i32, i32* %w, align 4
  %25 = load i32, i32* %h, align 4
  %cmp40 = icmp sgt i32 %24, %25
  br i1 %cmp40, label %cond.true.42, label %cond.false.43

cond.true.42:                                     ; preds = %cond.end
  %26 = load i32, i32* %w, align 4
  br label %cond.end.44

cond.false.43:                                    ; preds = %cond.end
  %27 = load i32, i32* %h, align 4
  br label %cond.end.44

cond.end.44:                                      ; preds = %cond.false.43, %cond.true.42
  %cond45 = phi i32 [ %26, %cond.true.42 ], [ %27, %cond.false.43 ]
  %conv46 = sitofp i32 %cond45 to double
  %div = fdiv double %conv, %conv46
  store double %div, double* %ratio, align 8
  %28 = load double, double* %ratio, align 8
  %cmp47 = fcmp olt double %28, 1.000000e+00
  br i1 %cmp47, label %cond.true.49, label %cond.false.50

cond.true.49:                                     ; preds = %cond.end.44
  %29 = load double, double* %ratio, align 8
  br label %cond.end.51

cond.false.50:                                    ; preds = %cond.end.44
  br label %cond.end.51

cond.end.51:                                      ; preds = %cond.false.50, %cond.true.49
  %cond52 = phi double [ %29, %cond.true.49 ], [ 1.000000e+00, %cond.false.50 ]
  store double %cond52, double* %ratio, align 8
  %30 = load double, double* %ratio, align 8
  %31 = load i32, i32* %w, align 4
  %conv53 = sitofp i32 %31 to double
  %mul = fmul double %30, %conv53
  %call54 = call double @rint(double %mul) #7
  %conv55 = fptosi double %call54 to i32
  store i32 %conv55, i32* %w, align 4
  %32 = load double, double* %ratio, align 8
  %33 = load i32, i32* %h, align 4
  %conv56 = sitofp i32 %33 to double
  %mul57 = fmul double %32, %conv56
  %call58 = call double @rint(double %mul57) #7
  %conv59 = fptosi double %call58 to i32
  store i32 %conv59, i32* %h, align 4
  %34 = load i32, i32* %bpp.addr, align 4
  %cmp60 = icmp eq i32 %34, 4
  %conv61 = zext i1 %cmp60 to i32
  %35 = load i32, i32* %width.addr, align 4
  %36 = load i32, i32* %height.addr, align 4
  %call62 = call %struct._GdkPixbuf* @gdk_pixbuf_new(i32 0, i32 %conv61, i32 8, i32 %35, i32 %36)
  store %struct._GdkPixbuf* %call62, %struct._GdkPixbuf** %pixbuf, align 8
  %37 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %pixbuf, align 8
  call void @gdk_pixbuf_fill(%struct._GdkPixbuf* %37, i32 -1)
  %38 = load i32, i32* %w, align 4
  %tobool63 = icmp ne i32 %38, 0
  br i1 %tobool63, label %land.lhs.true.64, label %if.end.76

land.lhs.true.64:                                 ; preds = %cond.end.51
  %39 = load i32, i32* %h, align 4
  %tobool65 = icmp ne i32 %39, 0
  br i1 %tobool65, label %if.then.66, label %if.end.76

if.then.66:                                       ; preds = %land.lhs.true.64
  %40 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %icon, align 8
  %41 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %pixbuf, align 8
  %42 = load i32, i32* %width.addr, align 4
  %43 = load i32, i32* %w, align 4
  %sub = sub nsw i32 %42, %43
  %div67 = sdiv i32 %sub, 2
  %44 = load i32, i32* %height.addr, align 4
  %45 = load i32, i32* %h, align 4
  %sub68 = sub nsw i32 %44, %45
  %div69 = sdiv i32 %sub68, 2
  %46 = load i32, i32* %w, align 4
  %47 = load i32, i32* %h, align 4
  %48 = load i32, i32* %width.addr, align 4
  %49 = load i32, i32* %w, align 4
  %sub70 = sub nsw i32 %48, %49
  %div71 = sdiv i32 %sub70, 2
  %conv72 = sitofp i32 %div71 to double
  %50 = load i32, i32* %height.addr, align 4
  %51 = load i32, i32* %h, align 4
  %sub73 = sub nsw i32 %50, %51
  %div74 = sdiv i32 %sub73, 2
  %conv75 = sitofp i32 %div74 to double
  %52 = load double, double* %ratio, align 8
  %53 = load double, double* %ratio, align 8
  call void @gdk_pixbuf_composite(%struct._GdkPixbuf* %40, %struct._GdkPixbuf* %41, i32 %div67, i32 %div69, i32 %46, i32 %47, double %conv72, double %conv75, double %52, double %53, i32 2, i32 255)
  br label %if.end.76

if.end.76:                                        ; preds = %if.then.66, %land.lhs.true.64, %cond.end.51
  %54 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %icon, align 8
  %55 = bitcast %struct._GdkPixbuf* %54 to i8*
  call void @g_object_unref(i8* %55)
  %56 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %pixbuf, align 8
  store %struct._GdkPixbuf* %56, %struct._GdkPixbuf** %retval
  br label %return

return:                                           ; preds = %if.end.76, %if.else.34, %if.else.27, %if.else.20, %if.else.14, %if.else.9
  %57 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %retval
  ret %struct._GdkPixbuf* %57
}

declare %struct._TempBuf* @temp_buf_new(i32, i32, i32, i32, i32, i8*) #1

declare i8* @gdk_pixbuf_get_pixels(%struct._GdkPixbuf*) #1

declare i8* @temp_buf_get_data(%struct._TempBuf*) #1

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #6

declare i32 @gdk_pixbuf_get_rowstride(%struct._GdkPixbuf*) #1

declare void @g_object_unref(i8*) #1

; Function Attrs: nounwind uwtable
define %struct._GdkPixbuf* @gimp_viewable_get_pixbuf(%struct._GimpViewable* %viewable, %struct._GimpContext* %context, i32 %width, i32 %height) #3 {
entry:
  %retval = alloca %struct._GdkPixbuf*, align 8
  %viewable.addr = alloca %struct._GimpViewable*, align 8
  %context.addr = alloca %struct._GimpContext*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %private = alloca %struct._GimpViewablePrivate*, align 8
  %viewable_class = alloca %struct._GimpViewableClass*, align 8
  %pixbuf = alloca %struct._GdkPixbuf*, align 8
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  %__inst14 = alloca %struct._GTypeInstance*, align 8
  %__t16 = alloca i64, align 8
  %__r19 = alloca i32, align 4
  %tmp34 = alloca i32, align 4
  store %struct._GimpViewable* %viewable, %struct._GimpViewable** %viewable.addr, align 8
  store %struct._GimpContext* %context, %struct._GimpContext** %context.addr, align 8
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  store %struct._GdkPixbuf* null, %struct._GdkPixbuf** %pixbuf, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %1 = bitcast %struct._GimpViewable* %0 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %1, %struct._GTypeInstance** %__inst, align 8
  %call = call i64 @gimp_viewable_get_type() #7
  store i64 %call, i64* %__t, align 8
  %2 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool = icmp ne %struct._GTypeInstance* %2, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %do.body
  store i32 0, i32* %__r, align 4
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %3 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %3, i32 0, i32 0
  %4 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool1 = icmp ne %struct._GTypeClass* %4, null
  br i1 %tobool1, label %land.lhs.true, label %if.else.4

land.lhs.true:                                    ; preds = %if.else
  %5 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class2 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %5, i32 0, i32 0
  %6 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class2, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %6, i32 0, i32 0
  %7 = load i64, i64* %g_type, align 8
  %8 = load i64, i64* %__t, align 8
  %cmp = icmp eq i64 %7, %8
  br i1 %cmp, label %if.then.3, label %if.else.4

if.then.3:                                        ; preds = %land.lhs.true
  store i32 1, i32* %__r, align 4
  br label %if.end

if.else.4:                                        ; preds = %land.lhs.true, %if.else
  %9 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %10 = load i64, i64* %__t, align 8
  %call5 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %9, i64 %10) #8
  store i32 %call5, i32* %__r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.4, %if.then.3
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %if.then
  %11 = load i32, i32* %__r, align 4
  store i32 %11, i32* %tmp
  %12 = load i32, i32* %tmp
  %tobool7 = icmp ne i32 %12, 0
  br i1 %tobool7, label %if.then.8, label %if.else.9

if.then.8:                                        ; preds = %if.end.6
  br label %if.end.10

if.else.9:                                        ; preds = %if.end.6
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__func__.gimp_viewable_get_pixbuf, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0))
  store %struct._GdkPixbuf* null, %struct._GdkPixbuf** %retval
  br label %return

if.end.10:                                        ; preds = %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.10
  br label %do.body.11

do.body.11:                                       ; preds = %do.end
  %13 = load %struct._GimpContext*, %struct._GimpContext** %context.addr, align 8
  %cmp12 = icmp eq %struct._GimpContext* %13, null
  br i1 %cmp12, label %if.then.36, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.body.11
  %14 = load %struct._GimpContext*, %struct._GimpContext** %context.addr, align 8
  %15 = bitcast %struct._GimpContext* %14 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %15, %struct._GTypeInstance** %__inst14, align 8
  %call17 = call i64 @gimp_context_get_type() #7
  store i64 %call17, i64* %__t16, align 8
  %16 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst14, align 8
  %tobool20 = icmp ne %struct._GTypeInstance* %16, null
  br i1 %tobool20, label %if.else.22, label %if.then.21

if.then.21:                                       ; preds = %lor.lhs.false
  store i32 0, i32* %__r19, align 4
  br label %if.end.33

if.else.22:                                       ; preds = %lor.lhs.false
  %17 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst14, align 8
  %g_class23 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %17, i32 0, i32 0
  %18 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class23, align 8
  %tobool24 = icmp ne %struct._GTypeClass* %18, null
  br i1 %tobool24, label %land.lhs.true.25, label %if.else.30

land.lhs.true.25:                                 ; preds = %if.else.22
  %19 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst14, align 8
  %g_class26 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %19, i32 0, i32 0
  %20 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class26, align 8
  %g_type27 = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %20, i32 0, i32 0
  %21 = load i64, i64* %g_type27, align 8
  %22 = load i64, i64* %__t16, align 8
  %cmp28 = icmp eq i64 %21, %22
  br i1 %cmp28, label %if.then.29, label %if.else.30

if.then.29:                                       ; preds = %land.lhs.true.25
  store i32 1, i32* %__r19, align 4
  br label %if.end.32

if.else.30:                                       ; preds = %land.lhs.true.25, %if.else.22
  %23 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst14, align 8
  %24 = load i64, i64* %__t16, align 8
  %call31 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %23, i64 %24) #8
  store i32 %call31, i32* %__r19, align 4
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.30, %if.then.29
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.32, %if.then.21
  %25 = load i32, i32* %__r19, align 4
  store i32 %25, i32* %tmp34
  %26 = load i32, i32* %tmp34
  %tobool35 = icmp ne i32 %26, 0
  br i1 %tobool35, label %if.then.36, label %if.else.37

if.then.36:                                       ; preds = %if.end.33, %do.body.11
  br label %if.end.38

if.else.37:                                       ; preds = %if.end.33
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__func__.gimp_viewable_get_pixbuf, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.4, i32 0, i32 0))
  store %struct._GdkPixbuf* null, %struct._GdkPixbuf** %retval
  br label %return

if.end.38:                                        ; preds = %if.then.36
  br label %do.end.39

do.end.39:                                        ; preds = %if.end.38
  br label %do.body.40

do.body.40:                                       ; preds = %do.end.39
  %27 = load i32, i32* %width.addr, align 4
  %cmp41 = icmp sgt i32 %27, 0
  br i1 %cmp41, label %if.then.42, label %if.else.43

if.then.42:                                       ; preds = %do.body.40
  br label %if.end.44

if.else.43:                                       ; preds = %do.body.40
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__func__.gimp_viewable_get_pixbuf, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i32 0, i32 0))
  store %struct._GdkPixbuf* null, %struct._GdkPixbuf** %retval
  br label %return

if.end.44:                                        ; preds = %if.then.42
  br label %do.end.45

do.end.45:                                        ; preds = %if.end.44
  br label %do.body.46

do.body.46:                                       ; preds = %do.end.45
  %28 = load i32, i32* %height.addr, align 4
  %cmp47 = icmp sgt i32 %28, 0
  br i1 %cmp47, label %if.then.48, label %if.else.49

if.then.48:                                       ; preds = %do.body.46
  br label %if.end.50

if.else.49:                                       ; preds = %do.body.46
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__func__.gimp_viewable_get_pixbuf, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i32 0, i32 0))
  store %struct._GdkPixbuf* null, %struct._GdkPixbuf** %retval
  br label %return

if.end.50:                                        ; preds = %if.then.48
  br label %do.end.51

do.end.51:                                        ; preds = %if.end.50
  %29 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %30 = bitcast %struct._GimpViewable* %29 to %struct._GTypeInstance*
  %call52 = call i64 @gimp_viewable_get_type() #7
  %call53 = call i8* @g_type_instance_get_private(%struct._GTypeInstance* %30, i64 %call52)
  %31 = bitcast i8* %call53 to %struct._GimpViewablePrivate*
  store %struct._GimpViewablePrivate* %31, %struct._GimpViewablePrivate** %private, align 8
  %32 = load %struct._GimpContext*, %struct._GimpContext** %context.addr, align 8
  %cmp54 = icmp eq %struct._GimpContext* %32, null
  br i1 %cmp54, label %if.then.55, label %if.end.56

if.then.55:                                       ; preds = %do.end.51
  call void (i8*, ...) @g_warning(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__func__.gimp_viewable_get_pixbuf, i32 0, i32 0))
  br label %if.end.56

if.end.56:                                        ; preds = %if.then.55, %do.end.51
  %33 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %34 = bitcast %struct._GimpViewable* %33 to %struct._GTypeInstance*
  %g_class57 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %34, i32 0, i32 0
  %35 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class57, align 8
  %36 = bitcast %struct._GTypeClass* %35 to %struct._GimpViewableClass*
  store %struct._GimpViewableClass* %36, %struct._GimpViewableClass** %viewable_class, align 8
  %37 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %viewable_class, align 8
  %get_pixbuf = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %37, i32 0, i32 10
  %38 = load %struct._GdkPixbuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)*, %struct._GdkPixbuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)** %get_pixbuf, align 8
  %tobool58 = icmp ne %struct._GdkPixbuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)* %38, null
  br i1 %tobool58, label %if.then.59, label %if.end.62

if.then.59:                                       ; preds = %if.end.56
  %39 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %viewable_class, align 8
  %get_pixbuf60 = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %39, i32 0, i32 10
  %40 = load %struct._GdkPixbuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)*, %struct._GdkPixbuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)** %get_pixbuf60, align 8
  %41 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %42 = load %struct._GimpContext*, %struct._GimpContext** %context.addr, align 8
  %43 = load i32, i32* %width.addr, align 4
  %44 = load i32, i32* %height.addr, align 4
  %call61 = call %struct._GdkPixbuf* %40(%struct._GimpViewable* %41, %struct._GimpContext* %42, i32 %43, i32 %44)
  store %struct._GdkPixbuf* %call61, %struct._GdkPixbuf** %pixbuf, align 8
  br label %if.end.62

if.end.62:                                        ; preds = %if.then.59, %if.end.56
  %45 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %pixbuf, align 8
  %tobool63 = icmp ne %struct._GdkPixbuf* %45, null
  br i1 %tobool63, label %if.then.64, label %if.end.65

if.then.64:                                       ; preds = %if.end.62
  %46 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %pixbuf, align 8
  store %struct._GdkPixbuf* %46, %struct._GdkPixbuf** %retval
  br label %return

if.end.65:                                        ; preds = %if.end.62
  %47 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_pixbuf = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %47, i32 0, i32 4
  %48 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %preview_pixbuf, align 8
  %tobool66 = icmp ne %struct._GdkPixbuf* %48, null
  br i1 %tobool66, label %if.then.67, label %if.end.80

if.then.67:                                       ; preds = %if.end.65
  %49 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_pixbuf68 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %49, i32 0, i32 4
  %50 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %preview_pixbuf68, align 8
  %call69 = call i32 @gdk_pixbuf_get_width(%struct._GdkPixbuf* %50)
  %51 = load i32, i32* %width.addr, align 4
  %cmp70 = icmp eq i32 %call69, %51
  br i1 %cmp70, label %land.lhs.true.71, label %if.end.77

land.lhs.true.71:                                 ; preds = %if.then.67
  %52 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_pixbuf72 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %52, i32 0, i32 4
  %53 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %preview_pixbuf72, align 8
  %call73 = call i32 @gdk_pixbuf_get_height(%struct._GdkPixbuf* %53)
  %54 = load i32, i32* %height.addr, align 4
  %cmp74 = icmp eq i32 %call73, %54
  br i1 %cmp74, label %if.then.75, label %if.end.77

if.then.75:                                       ; preds = %land.lhs.true.71
  %55 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_pixbuf76 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %55, i32 0, i32 4
  %56 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %preview_pixbuf76, align 8
  store %struct._GdkPixbuf* %56, %struct._GdkPixbuf** %retval
  br label %return

if.end.77:                                        ; preds = %land.lhs.true.71, %if.then.67
  %57 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_pixbuf78 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %57, i32 0, i32 4
  %58 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %preview_pixbuf78, align 8
  %59 = bitcast %struct._GdkPixbuf* %58 to i8*
  call void @g_object_unref(i8* %59)
  %60 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_pixbuf79 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %60, i32 0, i32 4
  store %struct._GdkPixbuf* null, %struct._GdkPixbuf** %preview_pixbuf79, align 8
  br label %if.end.80

if.end.80:                                        ; preds = %if.end.77, %if.end.65
  %61 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %viewable_class, align 8
  %get_new_pixbuf = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %61, i32 0, i32 11
  %62 = load %struct._GdkPixbuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)*, %struct._GdkPixbuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)** %get_new_pixbuf, align 8
  %tobool81 = icmp ne %struct._GdkPixbuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)* %62, null
  br i1 %tobool81, label %if.then.82, label %if.end.85

if.then.82:                                       ; preds = %if.end.80
  %63 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %viewable_class, align 8
  %get_new_pixbuf83 = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %63, i32 0, i32 11
  %64 = load %struct._GdkPixbuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)*, %struct._GdkPixbuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)** %get_new_pixbuf83, align 8
  %65 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %66 = load %struct._GimpContext*, %struct._GimpContext** %context.addr, align 8
  %67 = load i32, i32* %width.addr, align 4
  %68 = load i32, i32* %height.addr, align 4
  %call84 = call %struct._GdkPixbuf* %64(%struct._GimpViewable* %65, %struct._GimpContext* %66, i32 %67, i32 %68)
  store %struct._GdkPixbuf* %call84, %struct._GdkPixbuf** %pixbuf, align 8
  br label %if.end.85

if.end.85:                                        ; preds = %if.then.82, %if.end.80
  %69 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %pixbuf, align 8
  %70 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_pixbuf86 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %70, i32 0, i32 4
  store %struct._GdkPixbuf* %69, %struct._GdkPixbuf** %preview_pixbuf86, align 8
  %71 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %pixbuf, align 8
  store %struct._GdkPixbuf* %71, %struct._GdkPixbuf** %retval
  br label %return

return:                                           ; preds = %if.end.85, %if.then.75, %if.then.64, %if.else.49, %if.else.43, %if.else.37, %if.else.9
  %72 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %retval
  ret %struct._GdkPixbuf* %72
}

declare i32 @gdk_pixbuf_get_width(%struct._GdkPixbuf*) #1

declare i32 @gdk_pixbuf_get_height(%struct._GdkPixbuf*) #1

; Function Attrs: nounwind uwtable
define %struct._GdkPixbuf* @gimp_viewable_get_new_pixbuf(%struct._GimpViewable* %viewable, %struct._GimpContext* %context, i32 %width, i32 %height) #3 {
entry:
  %retval = alloca %struct._GdkPixbuf*, align 8
  %viewable.addr = alloca %struct._GimpViewable*, align 8
  %context.addr = alloca %struct._GimpContext*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %viewable_class = alloca %struct._GimpViewableClass*, align 8
  %pixbuf = alloca %struct._GdkPixbuf*, align 8
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  %__inst14 = alloca %struct._GTypeInstance*, align 8
  %__t16 = alloca i64, align 8
  %__r19 = alloca i32, align 4
  %tmp34 = alloca i32, align 4
  store %struct._GimpViewable* %viewable, %struct._GimpViewable** %viewable.addr, align 8
  store %struct._GimpContext* %context, %struct._GimpContext** %context.addr, align 8
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  store %struct._GdkPixbuf* null, %struct._GdkPixbuf** %pixbuf, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %1 = bitcast %struct._GimpViewable* %0 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %1, %struct._GTypeInstance** %__inst, align 8
  %call = call i64 @gimp_viewable_get_type() #7
  store i64 %call, i64* %__t, align 8
  %2 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool = icmp ne %struct._GTypeInstance* %2, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %do.body
  store i32 0, i32* %__r, align 4
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %3 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %3, i32 0, i32 0
  %4 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool1 = icmp ne %struct._GTypeClass* %4, null
  br i1 %tobool1, label %land.lhs.true, label %if.else.4

land.lhs.true:                                    ; preds = %if.else
  %5 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class2 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %5, i32 0, i32 0
  %6 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class2, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %6, i32 0, i32 0
  %7 = load i64, i64* %g_type, align 8
  %8 = load i64, i64* %__t, align 8
  %cmp = icmp eq i64 %7, %8
  br i1 %cmp, label %if.then.3, label %if.else.4

if.then.3:                                        ; preds = %land.lhs.true
  store i32 1, i32* %__r, align 4
  br label %if.end

if.else.4:                                        ; preds = %land.lhs.true, %if.else
  %9 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %10 = load i64, i64* %__t, align 8
  %call5 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %9, i64 %10) #8
  store i32 %call5, i32* %__r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.4, %if.then.3
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %if.then
  %11 = load i32, i32* %__r, align 4
  store i32 %11, i32* %tmp
  %12 = load i32, i32* %tmp
  %tobool7 = icmp ne i32 %12, 0
  br i1 %tobool7, label %if.then.8, label %if.else.9

if.then.8:                                        ; preds = %if.end.6
  br label %if.end.10

if.else.9:                                        ; preds = %if.end.6
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @__func__.gimp_viewable_get_new_pixbuf, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0))
  store %struct._GdkPixbuf* null, %struct._GdkPixbuf** %retval
  br label %return

if.end.10:                                        ; preds = %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.10
  br label %do.body.11

do.body.11:                                       ; preds = %do.end
  %13 = load %struct._GimpContext*, %struct._GimpContext** %context.addr, align 8
  %cmp12 = icmp eq %struct._GimpContext* %13, null
  br i1 %cmp12, label %if.then.36, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.body.11
  %14 = load %struct._GimpContext*, %struct._GimpContext** %context.addr, align 8
  %15 = bitcast %struct._GimpContext* %14 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %15, %struct._GTypeInstance** %__inst14, align 8
  %call17 = call i64 @gimp_context_get_type() #7
  store i64 %call17, i64* %__t16, align 8
  %16 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst14, align 8
  %tobool20 = icmp ne %struct._GTypeInstance* %16, null
  br i1 %tobool20, label %if.else.22, label %if.then.21

if.then.21:                                       ; preds = %lor.lhs.false
  store i32 0, i32* %__r19, align 4
  br label %if.end.33

if.else.22:                                       ; preds = %lor.lhs.false
  %17 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst14, align 8
  %g_class23 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %17, i32 0, i32 0
  %18 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class23, align 8
  %tobool24 = icmp ne %struct._GTypeClass* %18, null
  br i1 %tobool24, label %land.lhs.true.25, label %if.else.30

land.lhs.true.25:                                 ; preds = %if.else.22
  %19 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst14, align 8
  %g_class26 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %19, i32 0, i32 0
  %20 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class26, align 8
  %g_type27 = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %20, i32 0, i32 0
  %21 = load i64, i64* %g_type27, align 8
  %22 = load i64, i64* %__t16, align 8
  %cmp28 = icmp eq i64 %21, %22
  br i1 %cmp28, label %if.then.29, label %if.else.30

if.then.29:                                       ; preds = %land.lhs.true.25
  store i32 1, i32* %__r19, align 4
  br label %if.end.32

if.else.30:                                       ; preds = %land.lhs.true.25, %if.else.22
  %23 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst14, align 8
  %24 = load i64, i64* %__t16, align 8
  %call31 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %23, i64 %24) #8
  store i32 %call31, i32* %__r19, align 4
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.30, %if.then.29
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.32, %if.then.21
  %25 = load i32, i32* %__r19, align 4
  store i32 %25, i32* %tmp34
  %26 = load i32, i32* %tmp34
  %tobool35 = icmp ne i32 %26, 0
  br i1 %tobool35, label %if.then.36, label %if.else.37

if.then.36:                                       ; preds = %if.end.33, %do.body.11
  br label %if.end.38

if.else.37:                                       ; preds = %if.end.33
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @__func__.gimp_viewable_get_new_pixbuf, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.4, i32 0, i32 0))
  store %struct._GdkPixbuf* null, %struct._GdkPixbuf** %retval
  br label %return

if.end.38:                                        ; preds = %if.then.36
  br label %do.end.39

do.end.39:                                        ; preds = %if.end.38
  br label %do.body.40

do.body.40:                                       ; preds = %do.end.39
  %27 = load i32, i32* %width.addr, align 4
  %cmp41 = icmp sgt i32 %27, 0
  br i1 %cmp41, label %if.then.42, label %if.else.43

if.then.42:                                       ; preds = %do.body.40
  br label %if.end.44

if.else.43:                                       ; preds = %do.body.40
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @__func__.gimp_viewable_get_new_pixbuf, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i32 0, i32 0))
  store %struct._GdkPixbuf* null, %struct._GdkPixbuf** %retval
  br label %return

if.end.44:                                        ; preds = %if.then.42
  br label %do.end.45

do.end.45:                                        ; preds = %if.end.44
  br label %do.body.46

do.body.46:                                       ; preds = %do.end.45
  %28 = load i32, i32* %height.addr, align 4
  %cmp47 = icmp sgt i32 %28, 0
  br i1 %cmp47, label %if.then.48, label %if.else.49

if.then.48:                                       ; preds = %do.body.46
  br label %if.end.50

if.else.49:                                       ; preds = %do.body.46
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @__func__.gimp_viewable_get_new_pixbuf, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i32 0, i32 0))
  store %struct._GdkPixbuf* null, %struct._GdkPixbuf** %retval
  br label %return

if.end.50:                                        ; preds = %if.then.48
  br label %do.end.51

do.end.51:                                        ; preds = %if.end.50
  %29 = load %struct._GimpContext*, %struct._GimpContext** %context.addr, align 8
  %cmp52 = icmp eq %struct._GimpContext* %29, null
  br i1 %cmp52, label %if.then.53, label %if.end.54

if.then.53:                                       ; preds = %do.end.51
  call void (i8*, ...) @g_warning(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @__func__.gimp_viewable_get_new_pixbuf, i32 0, i32 0))
  br label %if.end.54

if.end.54:                                        ; preds = %if.then.53, %do.end.51
  %30 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %31 = bitcast %struct._GimpViewable* %30 to %struct._GTypeInstance*
  %g_class55 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %31, i32 0, i32 0
  %32 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class55, align 8
  %33 = bitcast %struct._GTypeClass* %32 to %struct._GimpViewableClass*
  store %struct._GimpViewableClass* %33, %struct._GimpViewableClass** %viewable_class, align 8
  %34 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %viewable_class, align 8
  %get_new_pixbuf = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %34, i32 0, i32 11
  %35 = load %struct._GdkPixbuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)*, %struct._GdkPixbuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)** %get_new_pixbuf, align 8
  %tobool56 = icmp ne %struct._GdkPixbuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)* %35, null
  br i1 %tobool56, label %if.then.57, label %if.end.60

if.then.57:                                       ; preds = %if.end.54
  %36 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %viewable_class, align 8
  %get_new_pixbuf58 = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %36, i32 0, i32 11
  %37 = load %struct._GdkPixbuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)*, %struct._GdkPixbuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)** %get_new_pixbuf58, align 8
  %38 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %39 = load %struct._GimpContext*, %struct._GimpContext** %context.addr, align 8
  %40 = load i32, i32* %width.addr, align 4
  %41 = load i32, i32* %height.addr, align 4
  %call59 = call %struct._GdkPixbuf* %37(%struct._GimpViewable* %38, %struct._GimpContext* %39, i32 %40, i32 %41)
  store %struct._GdkPixbuf* %call59, %struct._GdkPixbuf** %pixbuf, align 8
  br label %if.end.60

if.end.60:                                        ; preds = %if.then.57, %if.end.54
  %42 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %pixbuf, align 8
  %tobool61 = icmp ne %struct._GdkPixbuf* %42, null
  br i1 %tobool61, label %if.then.62, label %if.end.63

if.then.62:                                       ; preds = %if.end.60
  %43 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %pixbuf, align 8
  store %struct._GdkPixbuf* %43, %struct._GdkPixbuf** %retval
  br label %return

if.end.63:                                        ; preds = %if.end.60
  %44 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %viewable_class, align 8
  %get_pixbuf = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %44, i32 0, i32 10
  %45 = load %struct._GdkPixbuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)*, %struct._GdkPixbuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)** %get_pixbuf, align 8
  %tobool64 = icmp ne %struct._GdkPixbuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)* %45, null
  br i1 %tobool64, label %if.then.65, label %if.end.68

if.then.65:                                       ; preds = %if.end.63
  %46 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %viewable_class, align 8
  %get_pixbuf66 = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %46, i32 0, i32 10
  %47 = load %struct._GdkPixbuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)*, %struct._GdkPixbuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)** %get_pixbuf66, align 8
  %48 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %49 = load %struct._GimpContext*, %struct._GimpContext** %context.addr, align 8
  %50 = load i32, i32* %width.addr, align 4
  %51 = load i32, i32* %height.addr, align 4
  %call67 = call %struct._GdkPixbuf* %47(%struct._GimpViewable* %48, %struct._GimpContext* %49, i32 %50, i32 %51)
  store %struct._GdkPixbuf* %call67, %struct._GdkPixbuf** %pixbuf, align 8
  br label %if.end.68

if.end.68:                                        ; preds = %if.then.65, %if.end.63
  %52 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %pixbuf, align 8
  %tobool69 = icmp ne %struct._GdkPixbuf* %52, null
  br i1 %tobool69, label %if.then.70, label %if.end.72

if.then.70:                                       ; preds = %if.end.68
  %53 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %pixbuf, align 8
  %call71 = call %struct._GdkPixbuf* @gdk_pixbuf_copy(%struct._GdkPixbuf* %53)
  store %struct._GdkPixbuf* %call71, %struct._GdkPixbuf** %retval
  br label %return

if.end.72:                                        ; preds = %if.end.68
  store %struct._GdkPixbuf* null, %struct._GdkPixbuf** %retval
  br label %return

return:                                           ; preds = %if.end.72, %if.then.70, %if.then.62, %if.else.49, %if.else.43, %if.else.37, %if.else.9
  %54 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %retval
  ret %struct._GdkPixbuf* %54
}

declare %struct._GdkPixbuf* @gdk_pixbuf_copy(%struct._GdkPixbuf*) #1

declare %struct._GdkPixbuf* @gdk_pixbuf_new_from_inline(i32, i8*, i32, %struct._GError**) #1

declare %struct._GdkPixbuf* @gdk_pixbuf_new(i32, i32, i32, i32, i32) #1

declare void @gdk_pixbuf_fill(%struct._GdkPixbuf*, i32) #1

declare void @gdk_pixbuf_composite(%struct._GdkPixbuf*, %struct._GdkPixbuf*, i32, i32, i32, i32, double, double, double, double, i32, i32) #1

; Function Attrs: nounwind uwtable
define i8* @gimp_viewable_get_description(%struct._GimpViewable* %viewable, i8** %tooltip) #3 {
entry:
  %retval = alloca i8*, align 8
  %viewable.addr = alloca %struct._GimpViewable*, align 8
  %tooltip.addr = alloca i8**, align 8
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct._GimpViewable* %viewable, %struct._GimpViewable** %viewable.addr, align 8
  store i8** %tooltip, i8*** %tooltip.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %1 = bitcast %struct._GimpViewable* %0 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %1, %struct._GTypeInstance** %__inst, align 8
  %call = call i64 @gimp_viewable_get_type() #7
  store i64 %call, i64* %__t, align 8
  %2 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool = icmp ne %struct._GTypeInstance* %2, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %do.body
  store i32 0, i32* %__r, align 4
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %3 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %3, i32 0, i32 0
  %4 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool1 = icmp ne %struct._GTypeClass* %4, null
  br i1 %tobool1, label %land.lhs.true, label %if.else.4

land.lhs.true:                                    ; preds = %if.else
  %5 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class2 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %5, i32 0, i32 0
  %6 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class2, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %6, i32 0, i32 0
  %7 = load i64, i64* %g_type, align 8
  %8 = load i64, i64* %__t, align 8
  %cmp = icmp eq i64 %7, %8
  br i1 %cmp, label %if.then.3, label %if.else.4

if.then.3:                                        ; preds = %land.lhs.true
  store i32 1, i32* %__r, align 4
  br label %if.end

if.else.4:                                        ; preds = %land.lhs.true, %if.else
  %9 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %10 = load i64, i64* %__t, align 8
  %call5 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %9, i64 %10) #8
  store i32 %call5, i32* %__r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.4, %if.then.3
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %if.then
  %11 = load i32, i32* %__r, align 4
  store i32 %11, i32* %tmp
  %12 = load i32, i32* %tmp
  %tobool7 = icmp ne i32 %12, 0
  br i1 %tobool7, label %if.then.8, label %if.else.9

if.then.8:                                        ; preds = %if.end.6
  br label %if.end.10

if.else.9:                                        ; preds = %if.end.6
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @__func__.gimp_viewable_get_description, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0))
  store i8* null, i8** %retval
  br label %return

if.end.10:                                        ; preds = %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.10
  %13 = load i8**, i8*** %tooltip.addr, align 8
  %tobool11 = icmp ne i8** %13, null
  br i1 %tobool11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %do.end
  %14 = load i8**, i8*** %tooltip.addr, align 8
  store i8* null, i8** %14, align 8
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.12, %do.end
  %15 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %16 = bitcast %struct._GimpViewable* %15 to %struct._GTypeInstance*
  %g_class14 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %16, i32 0, i32 0
  %17 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class14, align 8
  %18 = bitcast %struct._GTypeClass* %17 to %struct._GimpViewableClass*
  %get_description = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %18, i32 0, i32 12
  %19 = load i8* (%struct._GimpViewable*, i8**)*, i8* (%struct._GimpViewable*, i8**)** %get_description, align 8
  %20 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %21 = load i8**, i8*** %tooltip.addr, align 8
  %call15 = call i8* %19(%struct._GimpViewable* %20, i8** %21)
  store i8* %call15, i8** %retval
  br label %return

return:                                           ; preds = %if.end.13, %if.else.9
  %22 = load i8*, i8** %retval
  ret i8* %22
}

; Function Attrs: nounwind uwtable
define i8* @gimp_viewable_get_stock_id(%struct._GimpViewable* %viewable) #3 {
entry:
  %retval = alloca i8*, align 8
  %viewable.addr = alloca %struct._GimpViewable*, align 8
  %private = alloca %struct._GimpViewablePrivate*, align 8
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct._GimpViewable* %viewable, %struct._GimpViewable** %viewable.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %1 = bitcast %struct._GimpViewable* %0 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %1, %struct._GTypeInstance** %__inst, align 8
  %call = call i64 @gimp_viewable_get_type() #7
  store i64 %call, i64* %__t, align 8
  %2 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool = icmp ne %struct._GTypeInstance* %2, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %do.body
  store i32 0, i32* %__r, align 4
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %3 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %3, i32 0, i32 0
  %4 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool1 = icmp ne %struct._GTypeClass* %4, null
  br i1 %tobool1, label %land.lhs.true, label %if.else.4

land.lhs.true:                                    ; preds = %if.else
  %5 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class2 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %5, i32 0, i32 0
  %6 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class2, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %6, i32 0, i32 0
  %7 = load i64, i64* %g_type, align 8
  %8 = load i64, i64* %__t, align 8
  %cmp = icmp eq i64 %7, %8
  br i1 %cmp, label %if.then.3, label %if.else.4

if.then.3:                                        ; preds = %land.lhs.true
  store i32 1, i32* %__r, align 4
  br label %if.end

if.else.4:                                        ; preds = %land.lhs.true, %if.else
  %9 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %10 = load i64, i64* %__t, align 8
  %call5 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %9, i64 %10) #8
  store i32 %call5, i32* %__r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.4, %if.then.3
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %if.then
  %11 = load i32, i32* %__r, align 4
  store i32 %11, i32* %tmp
  %12 = load i32, i32* %tmp
  %tobool7 = icmp ne i32 %12, 0
  br i1 %tobool7, label %if.then.8, label %if.else.9

if.then.8:                                        ; preds = %if.end.6
  br label %if.end.10

if.else.9:                                        ; preds = %if.end.6
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__func__.gimp_viewable_get_stock_id, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0))
  store i8* null, i8** %retval
  br label %return

if.end.10:                                        ; preds = %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.10
  %13 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %14 = bitcast %struct._GimpViewable* %13 to %struct._GTypeInstance*
  %call11 = call i64 @gimp_viewable_get_type() #7
  %call12 = call i8* @g_type_instance_get_private(%struct._GTypeInstance* %14, i64 %call11)
  %15 = bitcast i8* %call12 to %struct._GimpViewablePrivate*
  store %struct._GimpViewablePrivate* %15, %struct._GimpViewablePrivate** %private, align 8
  %16 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %stock_id = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %16, i32 0, i32 0
  %17 = load i8*, i8** %stock_id, align 8
  %tobool13 = icmp ne i8* %17, null
  br i1 %tobool13, label %if.then.14, label %if.end.16

if.then.14:                                       ; preds = %do.end
  %18 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %stock_id15 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %18, i32 0, i32 0
  %19 = load i8*, i8** %stock_id15, align 8
  store i8* %19, i8** %retval
  br label %return

if.end.16:                                        ; preds = %do.end
  %20 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %21 = bitcast %struct._GimpViewable* %20 to %struct._GTypeInstance*
  %g_class17 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %21, i32 0, i32 0
  %22 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class17, align 8
  %23 = bitcast %struct._GTypeClass* %22 to %struct._GimpViewableClass*
  %default_stock_id = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %23, i32 0, i32 1
  %24 = load i8*, i8** %default_stock_id, align 8
  store i8* %24, i8** %retval
  br label %return

return:                                           ; preds = %if.end.16, %if.then.14, %if.else.9
  %25 = load i8*, i8** %retval
  ret i8* %25
}

; Function Attrs: nounwind uwtable
define void @gimp_viewable_set_stock_id(%struct._GimpViewable* %viewable, i8* %stock_id) #3 {
entry:
  %viewable.addr = alloca %struct._GimpViewable*, align 8
  %stock_id.addr = alloca i8*, align 8
  %private = alloca %struct._GimpViewablePrivate*, align 8
  %viewable_class = alloca %struct._GimpViewableClass*, align 8
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct._GimpViewable* %viewable, %struct._GimpViewable** %viewable.addr, align 8
  store i8* %stock_id, i8** %stock_id.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %1 = bitcast %struct._GimpViewable* %0 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %1, %struct._GTypeInstance** %__inst, align 8
  %call = call i64 @gimp_viewable_get_type() #7
  store i64 %call, i64* %__t, align 8
  %2 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool = icmp ne %struct._GTypeInstance* %2, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %do.body
  store i32 0, i32* %__r, align 4
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %3 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %3, i32 0, i32 0
  %4 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool1 = icmp ne %struct._GTypeClass* %4, null
  br i1 %tobool1, label %land.lhs.true, label %if.else.4

land.lhs.true:                                    ; preds = %if.else
  %5 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class2 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %5, i32 0, i32 0
  %6 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class2, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %6, i32 0, i32 0
  %7 = load i64, i64* %g_type, align 8
  %8 = load i64, i64* %__t, align 8
  %cmp = icmp eq i64 %7, %8
  br i1 %cmp, label %if.then.3, label %if.else.4

if.then.3:                                        ; preds = %land.lhs.true
  store i32 1, i32* %__r, align 4
  br label %if.end

if.else.4:                                        ; preds = %land.lhs.true, %if.else
  %9 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %10 = load i64, i64* %__t, align 8
  %call5 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %9, i64 %10) #8
  store i32 %call5, i32* %__r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.4, %if.then.3
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %if.then
  %11 = load i32, i32* %__r, align 4
  store i32 %11, i32* %tmp
  %12 = load i32, i32* %tmp
  %tobool7 = icmp ne i32 %12, 0
  br i1 %tobool7, label %if.then.8, label %if.else.9

if.then.8:                                        ; preds = %if.end.6
  br label %if.end.10

if.else.9:                                        ; preds = %if.end.6
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__func__.gimp_viewable_set_stock_id, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0))
  br label %return

if.end.10:                                        ; preds = %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.10
  %13 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %14 = bitcast %struct._GimpViewable* %13 to %struct._GTypeInstance*
  %call11 = call i64 @gimp_viewable_get_type() #7
  %call12 = call i8* @g_type_instance_get_private(%struct._GTypeInstance* %14, i64 %call11)
  %15 = bitcast i8* %call12 to %struct._GimpViewablePrivate*
  store %struct._GimpViewablePrivate* %15, %struct._GimpViewablePrivate** %private, align 8
  %16 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %stock_id13 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %16, i32 0, i32 0
  %17 = load i8*, i8** %stock_id13, align 8
  call void @g_free(i8* %17)
  %18 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %stock_id14 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %18, i32 0, i32 0
  store i8* null, i8** %stock_id14, align 8
  %19 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %20 = bitcast %struct._GimpViewable* %19 to %struct._GTypeInstance*
  %g_class15 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %20, i32 0, i32 0
  %21 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class15, align 8
  %22 = bitcast %struct._GTypeClass* %21 to %struct._GimpViewableClass*
  store %struct._GimpViewableClass* %22, %struct._GimpViewableClass** %viewable_class, align 8
  %23 = load i8*, i8** %stock_id.addr, align 8
  %tobool16 = icmp ne i8* %23, null
  br i1 %tobool16, label %if.then.17, label %if.end.26

if.then.17:                                       ; preds = %do.end
  %24 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %viewable_class, align 8
  %default_stock_id = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %24, i32 0, i32 1
  %25 = load i8*, i8** %default_stock_id, align 8
  %cmp18 = icmp eq i8* %25, null
  br i1 %cmp18, label %if.then.22, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.17
  %26 = load i8*, i8** %stock_id.addr, align 8
  %27 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %viewable_class, align 8
  %default_stock_id19 = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %27, i32 0, i32 1
  %28 = load i8*, i8** %default_stock_id19, align 8
  %call20 = call i32 @strcmp(i8* %26, i8* %28) #8
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.25

if.then.22:                                       ; preds = %lor.lhs.false, %if.then.17
  %29 = load i8*, i8** %stock_id.addr, align 8
  %call23 = call noalias i8* @g_strdup(i8* %29)
  %30 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %stock_id24 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %30, i32 0, i32 0
  store i8* %call23, i8** %stock_id24, align 8
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.22, %lor.lhs.false
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %do.end
  %31 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %32 = bitcast %struct._GimpViewable* %31 to %struct._GTypeInstance*
  %call27 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %32, i64 80)
  %33 = bitcast %struct._GTypeInstance* %call27 to %struct._GObject*
  call void @g_object_notify(%struct._GObject* %33, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i32 0, i32 0))
  br label %return

return:                                           ; preds = %if.end.26, %if.else.9
  ret void
}

declare void @g_free(i8*) #1

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #4

declare noalias i8* @g_strdup(i8*) #1

declare void @g_object_notify(%struct._GObject*, i8*) #1

declare %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance*, i64) #1

; Function Attrs: nounwind uwtable
define void @gimp_viewable_preview_freeze(%struct._GimpViewable* %viewable) #3 {
entry:
  %viewable.addr = alloca %struct._GimpViewable*, align 8
  %private = alloca %struct._GimpViewablePrivate*, align 8
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct._GimpViewable* %viewable, %struct._GimpViewable** %viewable.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %1 = bitcast %struct._GimpViewable* %0 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %1, %struct._GTypeInstance** %__inst, align 8
  %call = call i64 @gimp_viewable_get_type() #7
  store i64 %call, i64* %__t, align 8
  %2 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool = icmp ne %struct._GTypeInstance* %2, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %do.body
  store i32 0, i32* %__r, align 4
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %3 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %3, i32 0, i32 0
  %4 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool1 = icmp ne %struct._GTypeClass* %4, null
  br i1 %tobool1, label %land.lhs.true, label %if.else.4

land.lhs.true:                                    ; preds = %if.else
  %5 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class2 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %5, i32 0, i32 0
  %6 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class2, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %6, i32 0, i32 0
  %7 = load i64, i64* %g_type, align 8
  %8 = load i64, i64* %__t, align 8
  %cmp = icmp eq i64 %7, %8
  br i1 %cmp, label %if.then.3, label %if.else.4

if.then.3:                                        ; preds = %land.lhs.true
  store i32 1, i32* %__r, align 4
  br label %if.end

if.else.4:                                        ; preds = %land.lhs.true, %if.else
  %9 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %10 = load i64, i64* %__t, align 8
  %call5 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %9, i64 %10) #8
  store i32 %call5, i32* %__r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.4, %if.then.3
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %if.then
  %11 = load i32, i32* %__r, align 4
  store i32 %11, i32* %tmp
  %12 = load i32, i32* %tmp
  %tobool7 = icmp ne i32 %12, 0
  br i1 %tobool7, label %if.then.8, label %if.else.9

if.then.8:                                        ; preds = %if.end.6
  br label %if.end.10

if.else.9:                                        ; preds = %if.end.6
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @__func__.gimp_viewable_preview_freeze, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end.17

if.end.10:                                        ; preds = %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.10
  %13 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %14 = bitcast %struct._GimpViewable* %13 to %struct._GTypeInstance*
  %call11 = call i64 @gimp_viewable_get_type() #7
  %call12 = call i8* @g_type_instance_get_private(%struct._GTypeInstance* %14, i64 %call11)
  %15 = bitcast i8* %call12 to %struct._GimpViewablePrivate*
  store %struct._GimpViewablePrivate* %15, %struct._GimpViewablePrivate** %private, align 8
  %16 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %freeze_count = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %16, i32 0, i32 1
  %17 = load i32, i32* %freeze_count, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %freeze_count, align 4
  %18 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %freeze_count13 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %18, i32 0, i32 1
  %19 = load i32, i32* %freeze_count13, align 4
  %cmp14 = icmp eq i32 %19, 1
  br i1 %cmp14, label %if.then.15, label %if.end.17

if.then.15:                                       ; preds = %do.end
  %20 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %21 = bitcast %struct._GimpViewable* %20 to %struct._GTypeInstance*
  %call16 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %21, i64 80)
  %22 = bitcast %struct._GTypeInstance* %call16 to %struct._GObject*
  call void @g_object_notify(%struct._GObject* %22, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0))
  br label %if.end.17

if.end.17:                                        ; preds = %if.else.9, %if.then.15, %do.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @gimp_viewable_preview_thaw(%struct._GimpViewable* %viewable) #3 {
entry:
  %viewable.addr = alloca %struct._GimpViewable*, align 8
  %private = alloca %struct._GimpViewablePrivate*, align 8
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct._GimpViewable* %viewable, %struct._GimpViewable** %viewable.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %1 = bitcast %struct._GimpViewable* %0 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %1, %struct._GTypeInstance** %__inst, align 8
  %call = call i64 @gimp_viewable_get_type() #7
  store i64 %call, i64* %__t, align 8
  %2 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool = icmp ne %struct._GTypeInstance* %2, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %do.body
  store i32 0, i32* %__r, align 4
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %3 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %3, i32 0, i32 0
  %4 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool1 = icmp ne %struct._GTypeClass* %4, null
  br i1 %tobool1, label %land.lhs.true, label %if.else.4

land.lhs.true:                                    ; preds = %if.else
  %5 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class2 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %5, i32 0, i32 0
  %6 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class2, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %6, i32 0, i32 0
  %7 = load i64, i64* %g_type, align 8
  %8 = load i64, i64* %__t, align 8
  %cmp = icmp eq i64 %7, %8
  br i1 %cmp, label %if.then.3, label %if.else.4

if.then.3:                                        ; preds = %land.lhs.true
  store i32 1, i32* %__r, align 4
  br label %if.end

if.else.4:                                        ; preds = %land.lhs.true, %if.else
  %9 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %10 = load i64, i64* %__t, align 8
  %call5 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %9, i64 %10) #8
  store i32 %call5, i32* %__r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.4, %if.then.3
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %if.then
  %11 = load i32, i32* %__r, align 4
  store i32 %11, i32* %tmp
  %12 = load i32, i32* %tmp
  %tobool7 = icmp ne i32 %12, 0
  br i1 %tobool7, label %if.then.8, label %if.else.9

if.then.8:                                        ; preds = %if.end.6
  br label %if.end.10

if.else.9:                                        ; preds = %if.end.6
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__func__.gimp_viewable_preview_thaw, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end.24

if.end.10:                                        ; preds = %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.10
  %13 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %14 = bitcast %struct._GimpViewable* %13 to %struct._GTypeInstance*
  %call11 = call i64 @gimp_viewable_get_type() #7
  %call12 = call i8* @g_type_instance_get_private(%struct._GTypeInstance* %14, i64 %call11)
  %15 = bitcast i8* %call12 to %struct._GimpViewablePrivate*
  store %struct._GimpViewablePrivate* %15, %struct._GimpViewablePrivate** %private, align 8
  br label %do.body.13

do.body.13:                                       ; preds = %do.end
  %16 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %freeze_count = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %16, i32 0, i32 1
  %17 = load i32, i32* %freeze_count, align 4
  %cmp14 = icmp sgt i32 %17, 0
  br i1 %cmp14, label %if.then.15, label %if.else.16

if.then.15:                                       ; preds = %do.body.13
  br label %if.end.17

if.else.16:                                       ; preds = %do.body.13
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__func__.gimp_viewable_preview_thaw, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.12, i32 0, i32 0))
  br label %if.end.24

if.end.17:                                        ; preds = %if.then.15
  br label %do.end.18

do.end.18:                                        ; preds = %if.end.17
  %18 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %freeze_count19 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %18, i32 0, i32 1
  %19 = load i32, i32* %freeze_count19, align 4
  %dec = add nsw i32 %19, -1
  store i32 %dec, i32* %freeze_count19, align 4
  %20 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %freeze_count20 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %20, i32 0, i32 1
  %21 = load i32, i32* %freeze_count20, align 4
  %cmp21 = icmp eq i32 %21, 0
  br i1 %cmp21, label %if.then.22, label %if.end.24

if.then.22:                                       ; preds = %do.end.18
  %22 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  call void @gimp_viewable_invalidate_preview(%struct._GimpViewable* %22)
  %23 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %24 = bitcast %struct._GimpViewable* %23 to %struct._GTypeInstance*
  %call23 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %24, i64 80)
  %25 = bitcast %struct._GTypeInstance* %call23 to %struct._GObject*
  call void @g_object_notify(%struct._GObject* %25, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0))
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.9, %if.else.16, %if.then.22, %do.end.18
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @gimp_viewable_preview_is_frozen(%struct._GimpViewable* %viewable) #3 {
entry:
  %retval = alloca i32, align 4
  %viewable.addr = alloca %struct._GimpViewable*, align 8
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct._GimpViewable* %viewable, %struct._GimpViewable** %viewable.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %1 = bitcast %struct._GimpViewable* %0 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %1, %struct._GTypeInstance** %__inst, align 8
  %call = call i64 @gimp_viewable_get_type() #7
  store i64 %call, i64* %__t, align 8
  %2 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool = icmp ne %struct._GTypeInstance* %2, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %do.body
  store i32 0, i32* %__r, align 4
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %3 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %3, i32 0, i32 0
  %4 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool1 = icmp ne %struct._GTypeClass* %4, null
  br i1 %tobool1, label %land.lhs.true, label %if.else.4

land.lhs.true:                                    ; preds = %if.else
  %5 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class2 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %5, i32 0, i32 0
  %6 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class2, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %6, i32 0, i32 0
  %7 = load i64, i64* %g_type, align 8
  %8 = load i64, i64* %__t, align 8
  %cmp = icmp eq i64 %7, %8
  br i1 %cmp, label %if.then.3, label %if.else.4

if.then.3:                                        ; preds = %land.lhs.true
  store i32 1, i32* %__r, align 4
  br label %if.end

if.else.4:                                        ; preds = %land.lhs.true, %if.else
  %9 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %10 = load i64, i64* %__t, align 8
  %call5 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %9, i64 %10) #8
  store i32 %call5, i32* %__r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.4, %if.then.3
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %if.then
  %11 = load i32, i32* %__r, align 4
  store i32 %11, i32* %tmp
  %12 = load i32, i32* %tmp
  %tobool7 = icmp ne i32 %12, 0
  br i1 %tobool7, label %if.then.8, label %if.else.9

if.then.8:                                        ; preds = %if.end.6
  br label %if.end.10

if.else.9:                                        ; preds = %if.end.6
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @__func__.gimp_viewable_preview_is_frozen, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0))
  store i32 0, i32* %retval
  br label %return

if.end.10:                                        ; preds = %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.10
  %13 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %14 = bitcast %struct._GimpViewable* %13 to %struct._GTypeInstance*
  %call11 = call i64 @gimp_viewable_get_type() #7
  %call12 = call i8* @g_type_instance_get_private(%struct._GTypeInstance* %14, i64 %call11)
  %15 = bitcast i8* %call12 to %struct._GimpViewablePrivate*
  %freeze_count = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %15, i32 0, i32 1
  %16 = load i32, i32* %freeze_count, align 4
  %cmp13 = icmp ne i32 %16, 0
  %conv = zext i1 %cmp13 to i32
  store i32 %conv, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.else.9
  %17 = load i32, i32* %retval
  ret i32 %17
}

; Function Attrs: nounwind uwtable
define %struct._GimpViewable* @gimp_viewable_get_parent(%struct._GimpViewable* %viewable) #3 {
entry:
  %retval = alloca %struct._GimpViewable*, align 8
  %viewable.addr = alloca %struct._GimpViewable*, align 8
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct._GimpViewable* %viewable, %struct._GimpViewable** %viewable.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %1 = bitcast %struct._GimpViewable* %0 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %1, %struct._GTypeInstance** %__inst, align 8
  %call = call i64 @gimp_viewable_get_type() #7
  store i64 %call, i64* %__t, align 8
  %2 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool = icmp ne %struct._GTypeInstance* %2, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %do.body
  store i32 0, i32* %__r, align 4
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %3 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %3, i32 0, i32 0
  %4 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool1 = icmp ne %struct._GTypeClass* %4, null
  br i1 %tobool1, label %land.lhs.true, label %if.else.4

land.lhs.true:                                    ; preds = %if.else
  %5 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class2 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %5, i32 0, i32 0
  %6 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class2, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %6, i32 0, i32 0
  %7 = load i64, i64* %g_type, align 8
  %8 = load i64, i64* %__t, align 8
  %cmp = icmp eq i64 %7, %8
  br i1 %cmp, label %if.then.3, label %if.else.4

if.then.3:                                        ; preds = %land.lhs.true
  store i32 1, i32* %__r, align 4
  br label %if.end

if.else.4:                                        ; preds = %land.lhs.true, %if.else
  %9 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %10 = load i64, i64* %__t, align 8
  %call5 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %9, i64 %10) #8
  store i32 %call5, i32* %__r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.4, %if.then.3
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %if.then
  %11 = load i32, i32* %__r, align 4
  store i32 %11, i32* %tmp
  %12 = load i32, i32* %tmp
  %tobool7 = icmp ne i32 %12, 0
  br i1 %tobool7, label %if.then.8, label %if.else.9

if.then.8:                                        ; preds = %if.end.6
  br label %if.end.10

if.else.9:                                        ; preds = %if.end.6
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__func__.gimp_viewable_get_parent, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0))
  store %struct._GimpViewable* null, %struct._GimpViewable** %retval
  br label %return

if.end.10:                                        ; preds = %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.10
  %13 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %14 = bitcast %struct._GimpViewable* %13 to %struct._GTypeInstance*
  %call11 = call i64 @gimp_viewable_get_type() #7
  %call12 = call i8* @g_type_instance_get_private(%struct._GTypeInstance* %14, i64 %call11)
  %15 = bitcast i8* %call12 to %struct._GimpViewablePrivate*
  %parent = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %15, i32 0, i32 2
  %16 = load %struct._GimpViewable*, %struct._GimpViewable** %parent, align 8
  store %struct._GimpViewable* %16, %struct._GimpViewable** %retval
  br label %return

return:                                           ; preds = %do.end, %if.else.9
  %17 = load %struct._GimpViewable*, %struct._GimpViewable** %retval
  ret %struct._GimpViewable* %17
}

; Function Attrs: nounwind uwtable
define void @gimp_viewable_set_parent(%struct._GimpViewable* %viewable, %struct._GimpViewable* %parent) #3 {
entry:
  %viewable.addr = alloca %struct._GimpViewable*, align 8
  %parent.addr = alloca %struct._GimpViewable*, align 8
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  %__inst14 = alloca %struct._GTypeInstance*, align 8
  %__t16 = alloca i64, align 8
  %__r19 = alloca i32, align 4
  %tmp34 = alloca i32, align 4
  store %struct._GimpViewable* %viewable, %struct._GimpViewable** %viewable.addr, align 8
  store %struct._GimpViewable* %parent, %struct._GimpViewable** %parent.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %1 = bitcast %struct._GimpViewable* %0 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %1, %struct._GTypeInstance** %__inst, align 8
  %call = call i64 @gimp_viewable_get_type() #7
  store i64 %call, i64* %__t, align 8
  %2 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool = icmp ne %struct._GTypeInstance* %2, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %do.body
  store i32 0, i32* %__r, align 4
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %3 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %3, i32 0, i32 0
  %4 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool1 = icmp ne %struct._GTypeClass* %4, null
  br i1 %tobool1, label %land.lhs.true, label %if.else.4

land.lhs.true:                                    ; preds = %if.else
  %5 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class2 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %5, i32 0, i32 0
  %6 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class2, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %6, i32 0, i32 0
  %7 = load i64, i64* %g_type, align 8
  %8 = load i64, i64* %__t, align 8
  %cmp = icmp eq i64 %7, %8
  br i1 %cmp, label %if.then.3, label %if.else.4

if.then.3:                                        ; preds = %land.lhs.true
  store i32 1, i32* %__r, align 4
  br label %if.end

if.else.4:                                        ; preds = %land.lhs.true, %if.else
  %9 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %10 = load i64, i64* %__t, align 8
  %call5 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %9, i64 %10) #8
  store i32 %call5, i32* %__r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.4, %if.then.3
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %if.then
  %11 = load i32, i32* %__r, align 4
  store i32 %11, i32* %tmp
  %12 = load i32, i32* %tmp
  %tobool7 = icmp ne i32 %12, 0
  br i1 %tobool7, label %if.then.8, label %if.else.9

if.then.8:                                        ; preds = %if.end.6
  br label %if.end.10

if.else.9:                                        ; preds = %if.end.6
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__func__.gimp_viewable_set_parent, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0))
  br label %return

if.end.10:                                        ; preds = %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.10
  br label %do.body.11

do.body.11:                                       ; preds = %do.end
  %13 = load %struct._GimpViewable*, %struct._GimpViewable** %parent.addr, align 8
  %cmp12 = icmp eq %struct._GimpViewable* %13, null
  br i1 %cmp12, label %if.then.36, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.body.11
  %14 = load %struct._GimpViewable*, %struct._GimpViewable** %parent.addr, align 8
  %15 = bitcast %struct._GimpViewable* %14 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %15, %struct._GTypeInstance** %__inst14, align 8
  %call17 = call i64 @gimp_viewable_get_type() #7
  store i64 %call17, i64* %__t16, align 8
  %16 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst14, align 8
  %tobool20 = icmp ne %struct._GTypeInstance* %16, null
  br i1 %tobool20, label %if.else.22, label %if.then.21

if.then.21:                                       ; preds = %lor.lhs.false
  store i32 0, i32* %__r19, align 4
  br label %if.end.33

if.else.22:                                       ; preds = %lor.lhs.false
  %17 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst14, align 8
  %g_class23 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %17, i32 0, i32 0
  %18 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class23, align 8
  %tobool24 = icmp ne %struct._GTypeClass* %18, null
  br i1 %tobool24, label %land.lhs.true.25, label %if.else.30

land.lhs.true.25:                                 ; preds = %if.else.22
  %19 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst14, align 8
  %g_class26 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %19, i32 0, i32 0
  %20 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class26, align 8
  %g_type27 = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %20, i32 0, i32 0
  %21 = load i64, i64* %g_type27, align 8
  %22 = load i64, i64* %__t16, align 8
  %cmp28 = icmp eq i64 %21, %22
  br i1 %cmp28, label %if.then.29, label %if.else.30

if.then.29:                                       ; preds = %land.lhs.true.25
  store i32 1, i32* %__r19, align 4
  br label %if.end.32

if.else.30:                                       ; preds = %land.lhs.true.25, %if.else.22
  %23 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst14, align 8
  %24 = load i64, i64* %__t16, align 8
  %call31 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %23, i64 %24) #8
  store i32 %call31, i32* %__r19, align 4
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.30, %if.then.29
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.32, %if.then.21
  %25 = load i32, i32* %__r19, align 4
  store i32 %25, i32* %tmp34
  %26 = load i32, i32* %tmp34
  %tobool35 = icmp ne i32 %26, 0
  br i1 %tobool35, label %if.then.36, label %if.else.37

if.then.36:                                       ; preds = %if.end.33, %do.body.11
  br label %if.end.38

if.else.37:                                       ; preds = %if.end.33
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__func__.gimp_viewable_set_parent, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.13, i32 0, i32 0))
  br label %return

if.end.38:                                        ; preds = %if.then.36
  br label %do.end.39

do.end.39:                                        ; preds = %if.end.38
  %27 = load %struct._GimpViewable*, %struct._GimpViewable** %parent.addr, align 8
  %28 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %29 = bitcast %struct._GimpViewable* %28 to %struct._GTypeInstance*
  %call40 = call i64 @gimp_viewable_get_type() #7
  %call41 = call i8* @g_type_instance_get_private(%struct._GTypeInstance* %29, i64 %call40)
  %30 = bitcast i8* %call41 to %struct._GimpViewablePrivate*
  %parent42 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %30, i32 0, i32 2
  store %struct._GimpViewable* %27, %struct._GimpViewable** %parent42, align 8
  br label %return

return:                                           ; preds = %do.end.39, %if.else.37, %if.else.9
  ret void
}

; Function Attrs: nounwind uwtable
define %struct._GimpContainer* @gimp_viewable_get_children(%struct._GimpViewable* %viewable) #3 {
entry:
  %retval = alloca %struct._GimpContainer*, align 8
  %viewable.addr = alloca %struct._GimpViewable*, align 8
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct._GimpViewable* %viewable, %struct._GimpViewable** %viewable.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %1 = bitcast %struct._GimpViewable* %0 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %1, %struct._GTypeInstance** %__inst, align 8
  %call = call i64 @gimp_viewable_get_type() #7
  store i64 %call, i64* %__t, align 8
  %2 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool = icmp ne %struct._GTypeInstance* %2, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %do.body
  store i32 0, i32* %__r, align 4
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %3 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %3, i32 0, i32 0
  %4 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool1 = icmp ne %struct._GTypeClass* %4, null
  br i1 %tobool1, label %land.lhs.true, label %if.else.4

land.lhs.true:                                    ; preds = %if.else
  %5 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class2 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %5, i32 0, i32 0
  %6 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class2, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %6, i32 0, i32 0
  %7 = load i64, i64* %g_type, align 8
  %8 = load i64, i64* %__t, align 8
  %cmp = icmp eq i64 %7, %8
  br i1 %cmp, label %if.then.3, label %if.else.4

if.then.3:                                        ; preds = %land.lhs.true
  store i32 1, i32* %__r, align 4
  br label %if.end

if.else.4:                                        ; preds = %land.lhs.true, %if.else
  %9 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %10 = load i64, i64* %__t, align 8
  %call5 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %9, i64 %10) #8
  store i32 %call5, i32* %__r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.4, %if.then.3
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %if.then
  %11 = load i32, i32* %__r, align 4
  store i32 %11, i32* %tmp
  %12 = load i32, i32* %tmp
  %tobool7 = icmp ne i32 %12, 0
  br i1 %tobool7, label %if.then.8, label %if.else.9

if.then.8:                                        ; preds = %if.end.6
  br label %if.end.10

if.else.9:                                        ; preds = %if.end.6
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__func__.gimp_viewable_get_children, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0))
  store %struct._GimpContainer* null, %struct._GimpContainer** %retval
  br label %return

if.end.10:                                        ; preds = %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.10
  %13 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %14 = bitcast %struct._GimpViewable* %13 to %struct._GTypeInstance*
  %g_class11 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %14, i32 0, i32 0
  %15 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class11, align 8
  %16 = bitcast %struct._GTypeClass* %15 to %struct._GimpViewableClass*
  %get_children = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %16, i32 0, i32 13
  %17 = load %struct._GimpContainer* (%struct._GimpViewable*)*, %struct._GimpContainer* (%struct._GimpViewable*)** %get_children, align 8
  %18 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %call12 = call %struct._GimpContainer* %17(%struct._GimpViewable* %18)
  store %struct._GimpContainer* %call12, %struct._GimpContainer** %retval
  br label %return

return:                                           ; preds = %do.end, %if.else.9
  %19 = load %struct._GimpContainer*, %struct._GimpContainer** %retval
  ret %struct._GimpContainer* %19
}

; Function Attrs: nounwind uwtable
define i32 @gimp_viewable_get_expanded(%struct._GimpViewable* %viewable) #3 {
entry:
  %retval = alloca i32, align 4
  %viewable.addr = alloca %struct._GimpViewable*, align 8
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct._GimpViewable* %viewable, %struct._GimpViewable** %viewable.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %1 = bitcast %struct._GimpViewable* %0 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %1, %struct._GTypeInstance** %__inst, align 8
  %call = call i64 @gimp_viewable_get_type() #7
  store i64 %call, i64* %__t, align 8
  %2 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool = icmp ne %struct._GTypeInstance* %2, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %do.body
  store i32 0, i32* %__r, align 4
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %3 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %3, i32 0, i32 0
  %4 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool1 = icmp ne %struct._GTypeClass* %4, null
  br i1 %tobool1, label %land.lhs.true, label %if.else.4

land.lhs.true:                                    ; preds = %if.else
  %5 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class2 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %5, i32 0, i32 0
  %6 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class2, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %6, i32 0, i32 0
  %7 = load i64, i64* %g_type, align 8
  %8 = load i64, i64* %__t, align 8
  %cmp = icmp eq i64 %7, %8
  br i1 %cmp, label %if.then.3, label %if.else.4

if.then.3:                                        ; preds = %land.lhs.true
  store i32 1, i32* %__r, align 4
  br label %if.end

if.else.4:                                        ; preds = %land.lhs.true, %if.else
  %9 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %10 = load i64, i64* %__t, align 8
  %call5 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %9, i64 %10) #8
  store i32 %call5, i32* %__r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.4, %if.then.3
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %if.then
  %11 = load i32, i32* %__r, align 4
  store i32 %11, i32* %tmp
  %12 = load i32, i32* %tmp
  %tobool7 = icmp ne i32 %12, 0
  br i1 %tobool7, label %if.then.8, label %if.else.9

if.then.8:                                        ; preds = %if.end.6
  br label %if.end.10

if.else.9:                                        ; preds = %if.end.6
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__func__.gimp_viewable_get_expanded, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0))
  store i32 0, i32* %retval
  br label %return

if.end.10:                                        ; preds = %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.10
  %13 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %14 = bitcast %struct._GimpViewable* %13 to %struct._GTypeInstance*
  %g_class11 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %14, i32 0, i32 0
  %15 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class11, align 8
  %16 = bitcast %struct._GTypeClass* %15 to %struct._GimpViewableClass*
  %get_expanded = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %16, i32 0, i32 15
  %17 = load i32 (%struct._GimpViewable*)*, i32 (%struct._GimpViewable*)** %get_expanded, align 8
  %tobool12 = icmp ne i32 (%struct._GimpViewable*)* %17, null
  br i1 %tobool12, label %if.then.13, label %if.end.17

if.then.13:                                       ; preds = %do.end
  %18 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %19 = bitcast %struct._GimpViewable* %18 to %struct._GTypeInstance*
  %g_class14 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %19, i32 0, i32 0
  %20 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class14, align 8
  %21 = bitcast %struct._GTypeClass* %20 to %struct._GimpViewableClass*
  %get_expanded15 = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %21, i32 0, i32 15
  %22 = load i32 (%struct._GimpViewable*)*, i32 (%struct._GimpViewable*)** %get_expanded15, align 8
  %23 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %call16 = call i32 %22(%struct._GimpViewable* %23)
  store i32 %call16, i32* %retval
  br label %return

if.end.17:                                        ; preds = %do.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.17, %if.then.13, %if.else.9
  %24 = load i32, i32* %retval
  ret i32 %24
}

; Function Attrs: nounwind uwtable
define void @gimp_viewable_set_expanded(%struct._GimpViewable* %viewable, i32 %expanded) #3 {
entry:
  %viewable.addr = alloca %struct._GimpViewable*, align 8
  %expanded.addr = alloca i32, align 4
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct._GimpViewable* %viewable, %struct._GimpViewable** %viewable.addr, align 8
  store i32 %expanded, i32* %expanded.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %1 = bitcast %struct._GimpViewable* %0 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %1, %struct._GTypeInstance** %__inst, align 8
  %call = call i64 @gimp_viewable_get_type() #7
  store i64 %call, i64* %__t, align 8
  %2 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool = icmp ne %struct._GTypeInstance* %2, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %do.body
  store i32 0, i32* %__r, align 4
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %3 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %3, i32 0, i32 0
  %4 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool1 = icmp ne %struct._GTypeClass* %4, null
  br i1 %tobool1, label %land.lhs.true, label %if.else.4

land.lhs.true:                                    ; preds = %if.else
  %5 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class2 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %5, i32 0, i32 0
  %6 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class2, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %6, i32 0, i32 0
  %7 = load i64, i64* %g_type, align 8
  %8 = load i64, i64* %__t, align 8
  %cmp = icmp eq i64 %7, %8
  br i1 %cmp, label %if.then.3, label %if.else.4

if.then.3:                                        ; preds = %land.lhs.true
  store i32 1, i32* %__r, align 4
  br label %if.end

if.else.4:                                        ; preds = %land.lhs.true, %if.else
  %9 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %10 = load i64, i64* %__t, align 8
  %call5 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %9, i64 %10) #8
  store i32 %call5, i32* %__r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.4, %if.then.3
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %if.then
  %11 = load i32, i32* %__r, align 4
  store i32 %11, i32* %tmp
  %12 = load i32, i32* %tmp
  %tobool7 = icmp ne i32 %12, 0
  br i1 %tobool7, label %if.then.8, label %if.else.9

if.then.8:                                        ; preds = %if.end.6
  br label %if.end.10

if.else.9:                                        ; preds = %if.end.6
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__func__.gimp_viewable_set_expanded, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end.16

if.end.10:                                        ; preds = %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.10
  %13 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %14 = bitcast %struct._GimpViewable* %13 to %struct._GTypeInstance*
  %g_class11 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %14, i32 0, i32 0
  %15 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class11, align 8
  %16 = bitcast %struct._GTypeClass* %15 to %struct._GimpViewableClass*
  %set_expanded = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %16, i32 0, i32 14
  %17 = load void (%struct._GimpViewable*, i32)*, void (%struct._GimpViewable*, i32)** %set_expanded, align 8
  %tobool12 = icmp ne void (%struct._GimpViewable*, i32)* %17, null
  br i1 %tobool12, label %if.then.13, label %if.end.16

if.then.13:                                       ; preds = %do.end
  %18 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %19 = bitcast %struct._GimpViewable* %18 to %struct._GTypeInstance*
  %g_class14 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %19, i32 0, i32 0
  %20 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class14, align 8
  %21 = bitcast %struct._GTypeClass* %20 to %struct._GimpViewableClass*
  %set_expanded15 = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %21, i32 0, i32 14
  %22 = load void (%struct._GimpViewable*, i32)*, void (%struct._GimpViewable*, i32)** %set_expanded15, align 8
  %23 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %24 = load i32, i32* %expanded.addr, align 4
  call void %22(%struct._GimpViewable* %23, i32 %24)
  br label %if.end.16

if.end.16:                                        ; preds = %if.else.9, %if.then.13, %do.end
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @gimp_viewable_is_ancestor(%struct._GimpViewable* %ancestor, %struct._GimpViewable* %descendant) #3 {
entry:
  %retval = alloca i32, align 4
  %ancestor.addr = alloca %struct._GimpViewable*, align 8
  %descendant.addr = alloca %struct._GimpViewable*, align 8
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  %__inst13 = alloca %struct._GTypeInstance*, align 8
  %__t15 = alloca i64, align 8
  %__r18 = alloca i32, align 4
  %tmp33 = alloca i32, align 4
  %parent = alloca %struct._GimpViewable*, align 8
  store %struct._GimpViewable* %ancestor, %struct._GimpViewable** %ancestor.addr, align 8
  store %struct._GimpViewable* %descendant, %struct._GimpViewable** %descendant.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct._GimpViewable*, %struct._GimpViewable** %ancestor.addr, align 8
  %1 = bitcast %struct._GimpViewable* %0 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %1, %struct._GTypeInstance** %__inst, align 8
  %call = call i64 @gimp_viewable_get_type() #7
  store i64 %call, i64* %__t, align 8
  %2 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool = icmp ne %struct._GTypeInstance* %2, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %do.body
  store i32 0, i32* %__r, align 4
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %3 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %3, i32 0, i32 0
  %4 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool1 = icmp ne %struct._GTypeClass* %4, null
  br i1 %tobool1, label %land.lhs.true, label %if.else.4

land.lhs.true:                                    ; preds = %if.else
  %5 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class2 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %5, i32 0, i32 0
  %6 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class2, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %6, i32 0, i32 0
  %7 = load i64, i64* %g_type, align 8
  %8 = load i64, i64* %__t, align 8
  %cmp = icmp eq i64 %7, %8
  br i1 %cmp, label %if.then.3, label %if.else.4

if.then.3:                                        ; preds = %land.lhs.true
  store i32 1, i32* %__r, align 4
  br label %if.end

if.else.4:                                        ; preds = %land.lhs.true, %if.else
  %9 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %10 = load i64, i64* %__t, align 8
  %call5 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %9, i64 %10) #8
  store i32 %call5, i32* %__r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.4, %if.then.3
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %if.then
  %11 = load i32, i32* %__r, align 4
  store i32 %11, i32* %tmp
  %12 = load i32, i32* %tmp
  %tobool7 = icmp ne i32 %12, 0
  br i1 %tobool7, label %if.then.8, label %if.else.9

if.then.8:                                        ; preds = %if.end.6
  br label %if.end.10

if.else.9:                                        ; preds = %if.end.6
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__func__.gimp_viewable_is_ancestor, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.14, i32 0, i32 0))
  store i32 0, i32* %retval
  br label %return

if.end.10:                                        ; preds = %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.10
  br label %do.body.11

do.body.11:                                       ; preds = %do.end
  %13 = load %struct._GimpViewable*, %struct._GimpViewable** %descendant.addr, align 8
  %14 = bitcast %struct._GimpViewable* %13 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %14, %struct._GTypeInstance** %__inst13, align 8
  %call16 = call i64 @gimp_viewable_get_type() #7
  store i64 %call16, i64* %__t15, align 8
  %15 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst13, align 8
  %tobool19 = icmp ne %struct._GTypeInstance* %15, null
  br i1 %tobool19, label %if.else.21, label %if.then.20

if.then.20:                                       ; preds = %do.body.11
  store i32 0, i32* %__r18, align 4
  br label %if.end.32

if.else.21:                                       ; preds = %do.body.11
  %16 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst13, align 8
  %g_class22 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %16, i32 0, i32 0
  %17 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class22, align 8
  %tobool23 = icmp ne %struct._GTypeClass* %17, null
  br i1 %tobool23, label %land.lhs.true.24, label %if.else.29

land.lhs.true.24:                                 ; preds = %if.else.21
  %18 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst13, align 8
  %g_class25 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %18, i32 0, i32 0
  %19 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class25, align 8
  %g_type26 = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %19, i32 0, i32 0
  %20 = load i64, i64* %g_type26, align 8
  %21 = load i64, i64* %__t15, align 8
  %cmp27 = icmp eq i64 %20, %21
  br i1 %cmp27, label %if.then.28, label %if.else.29

if.then.28:                                       ; preds = %land.lhs.true.24
  store i32 1, i32* %__r18, align 4
  br label %if.end.31

if.else.29:                                       ; preds = %land.lhs.true.24, %if.else.21
  %22 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst13, align 8
  %23 = load i64, i64* %__t15, align 8
  %call30 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %22, i64 %23) #8
  store i32 %call30, i32* %__r18, align 4
  br label %if.end.31

if.end.31:                                        ; preds = %if.else.29, %if.then.28
  br label %if.end.32

if.end.32:                                        ; preds = %if.end.31, %if.then.20
  %24 = load i32, i32* %__r18, align 4
  store i32 %24, i32* %tmp33
  %25 = load i32, i32* %tmp33
  %tobool34 = icmp ne i32 %25, 0
  br i1 %tobool34, label %if.then.35, label %if.else.36

if.then.35:                                       ; preds = %if.end.32
  br label %if.end.37

if.else.36:                                       ; preds = %if.end.32
  call void @g_return_if_fail_warning(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__func__.gimp_viewable_is_ancestor, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.15, i32 0, i32 0))
  store i32 0, i32* %retval
  br label %return

if.end.37:                                        ; preds = %if.then.35
  br label %do.end.38

do.end.38:                                        ; preds = %if.end.37
  br label %while.cond

while.cond:                                       ; preds = %if.end.44, %do.end.38
  %26 = load %struct._GimpViewable*, %struct._GimpViewable** %descendant.addr, align 8
  %tobool39 = icmp ne %struct._GimpViewable* %26, null
  br i1 %tobool39, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %27 = load %struct._GimpViewable*, %struct._GimpViewable** %descendant.addr, align 8
  %call41 = call %struct._GimpViewable* @gimp_viewable_get_parent(%struct._GimpViewable* %27)
  store %struct._GimpViewable* %call41, %struct._GimpViewable** %parent, align 8
  %28 = load %struct._GimpViewable*, %struct._GimpViewable** %parent, align 8
  %29 = load %struct._GimpViewable*, %struct._GimpViewable** %ancestor.addr, align 8
  %cmp42 = icmp eq %struct._GimpViewable* %28, %29
  br i1 %cmp42, label %if.then.43, label %if.end.44

if.then.43:                                       ; preds = %while.body
  store i32 1, i32* %retval
  br label %return

if.end.44:                                        ; preds = %while.body
  %30 = load %struct._GimpViewable*, %struct._GimpViewable** %parent, align 8
  store %struct._GimpViewable* %30, %struct._GimpViewable** %descendant.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %if.then.43, %if.else.36, %if.else.9
  %31 = load i32, i32* %retval
  ret i32 %31
}

declare i8* @g_type_class_peek_parent(i8*) #1

declare void @g_type_class_adjust_private_offset(i8*, i32*) #1

; Function Attrs: nounwind uwtable
define internal void @gimp_viewable_class_init(%struct._GimpViewableClass* %klass) #3 {
entry:
  %klass.addr = alloca %struct._GimpViewableClass*, align 8
  %object_class = alloca %struct._GObjectClass*, align 8
  %gimp_object_class = alloca %struct._GimpObjectClass*, align 8
  store %struct._GimpViewableClass* %klass, %struct._GimpViewableClass** %klass.addr, align 8
  %0 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %klass.addr, align 8
  %1 = bitcast %struct._GimpViewableClass* %0 to %struct._GTypeClass*
  %call = call %struct._GTypeClass* @g_type_check_class_cast(%struct._GTypeClass* %1, i64 80)
  %2 = bitcast %struct._GTypeClass* %call to %struct._GObjectClass*
  store %struct._GObjectClass* %2, %struct._GObjectClass** %object_class, align 8
  %3 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %klass.addr, align 8
  %4 = bitcast %struct._GimpViewableClass* %3 to %struct._GTypeClass*
  %call1 = call i64 @gimp_object_get_type() #7
  %call2 = call %struct._GTypeClass* @g_type_check_class_cast(%struct._GTypeClass* %4, i64 %call1)
  %5 = bitcast %struct._GTypeClass* %call2 to %struct._GimpObjectClass*
  store %struct._GimpObjectClass* %5, %struct._GimpObjectClass** %gimp_object_class, align 8
  %6 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %klass.addr, align 8
  %7 = bitcast %struct._GimpViewableClass* %6 to %struct._GTypeClass*
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %7, i32 0, i32 0
  %8 = load i64, i64* %g_type, align 8
  %call3 = call i32 (i8*, i64, i32, i32, i32 (%struct._GSignalInvocationHint*, %struct._GValue*, %struct._GValue*, i8*)*, i8*, void (%struct._GClosure*, %struct._GValue*, i32, %struct._GValue*, i8*, i8*)*, i64, i32, ...) @g_signal_new(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16, i32 0, i32 0), i64 %8, i32 1, i32 176, i32 (%struct._GSignalInvocationHint*, %struct._GValue*, %struct._GValue*, i8*)* null, i8* null, void (%struct._GClosure*, %struct._GValue*, i32, %struct._GValue*, i8*, i8*)* @g_cclosure_marshal_VOID__VOID, i64 4, i32 0)
  store i32 %call3, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @viewable_signals, i32 0, i64 0), align 4
  %9 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %klass.addr, align 8
  %10 = bitcast %struct._GimpViewableClass* %9 to %struct._GTypeClass*
  %g_type4 = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %10, i32 0, i32 0
  %11 = load i64, i64* %g_type4, align 8
  %call5 = call i32 (i8*, i64, i32, i32, i32 (%struct._GSignalInvocationHint*, %struct._GValue*, %struct._GValue*, i8*)*, i8*, void (%struct._GClosure*, %struct._GValue*, i32, %struct._GValue*, i8*, i8*)*, i64, i32, ...) @g_signal_new(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.17, i32 0, i32 0), i64 %11, i32 1, i32 184, i32 (%struct._GSignalInvocationHint*, %struct._GValue*, %struct._GValue*, i8*)* null, i8* null, void (%struct._GClosure*, %struct._GValue*, i32, %struct._GValue*, i8*, i8*)* @g_cclosure_marshal_VOID__VOID, i64 4, i32 0)
  store i32 %call5, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @viewable_signals, i32 0, i64 1), align 4
  %12 = load %struct._GObjectClass*, %struct._GObjectClass** %object_class, align 8
  %finalize = getelementptr inbounds %struct._GObjectClass, %struct._GObjectClass* %12, i32 0, i32 6
  store void (%struct._GObject*)* @gimp_viewable_finalize, void (%struct._GObject*)** %finalize, align 8
  %13 = load %struct._GObjectClass*, %struct._GObjectClass** %object_class, align 8
  %get_property = getelementptr inbounds %struct._GObjectClass, %struct._GObjectClass* %13, i32 0, i32 4
  store void (%struct._GObject*, i32, %struct._GValue*, %struct._GParamSpec*)* @gimp_viewable_get_property, void (%struct._GObject*, i32, %struct._GValue*, %struct._GParamSpec*)** %get_property, align 8
  %14 = load %struct._GObjectClass*, %struct._GObjectClass** %object_class, align 8
  %set_property = getelementptr inbounds %struct._GObjectClass, %struct._GObjectClass* %14, i32 0, i32 3
  store void (%struct._GObject*, i32, %struct._GValue*, %struct._GParamSpec*)* @gimp_viewable_set_property, void (%struct._GObject*, i32, %struct._GValue*, %struct._GParamSpec*)** %set_property, align 8
  %15 = load %struct._GimpObjectClass*, %struct._GimpObjectClass** %gimp_object_class, align 8
  %get_memsize = getelementptr inbounds %struct._GimpObjectClass, %struct._GimpObjectClass* %15, i32 0, i32 3
  store i64 (%struct._GimpObject*, i64*)* @gimp_viewable_get_memsize, i64 (%struct._GimpObject*, i64*)** %get_memsize, align 8
  %16 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %klass.addr, align 8
  %default_stock_id = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %16, i32 0, i32 1
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i32 0, i32 0), i8** %default_stock_id, align 8
  %17 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %klass.addr, align 8
  %name_changed_signal = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %17, i32 0, i32 2
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.19, i32 0, i32 0), i8** %name_changed_signal, align 8
  %18 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %klass.addr, align 8
  %invalidate_preview = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %18, i32 0, i32 3
  store void (%struct._GimpViewable*)* @gimp_viewable_real_invalidate_preview, void (%struct._GimpViewable*)** %invalidate_preview, align 8
  %19 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %klass.addr, align 8
  %size_changed = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %19, i32 0, i32 4
  store void (%struct._GimpViewable*)* null, void (%struct._GimpViewable*)** %size_changed, align 8
  %20 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %klass.addr, align 8
  %get_size = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %20, i32 0, i32 5
  store i32 (%struct._GimpViewable*, i32*, i32*)* null, i32 (%struct._GimpViewable*, i32*, i32*)** %get_size, align 8
  %21 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %klass.addr, align 8
  %get_preview_size = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %21, i32 0, i32 6
  store void (%struct._GimpViewable*, i32, i32, i32, i32*, i32*)* @gimp_viewable_real_get_preview_size, void (%struct._GimpViewable*, i32, i32, i32, i32*, i32*)** %get_preview_size, align 8
  %22 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %klass.addr, align 8
  %get_popup_size = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %22, i32 0, i32 7
  store i32 (%struct._GimpViewable*, i32, i32, i32, i32*, i32*)* @gimp_viewable_real_get_popup_size, i32 (%struct._GimpViewable*, i32, i32, i32, i32*, i32*)** %get_popup_size, align 8
  %23 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %klass.addr, align 8
  %get_preview = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %23, i32 0, i32 8
  store %struct._TempBuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)* null, %struct._TempBuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)** %get_preview, align 8
  %24 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %klass.addr, align 8
  %get_new_preview = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %24, i32 0, i32 9
  store %struct._TempBuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)* null, %struct._TempBuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)** %get_new_preview, align 8
  %25 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %klass.addr, align 8
  %get_pixbuf = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %25, i32 0, i32 10
  store %struct._GdkPixbuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)* null, %struct._GdkPixbuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)** %get_pixbuf, align 8
  %26 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %klass.addr, align 8
  %get_new_pixbuf = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %26, i32 0, i32 11
  store %struct._GdkPixbuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)* @gimp_viewable_real_get_new_pixbuf, %struct._GdkPixbuf* (%struct._GimpViewable*, %struct._GimpContext*, i32, i32)** %get_new_pixbuf, align 8
  %27 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %klass.addr, align 8
  %get_description = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %27, i32 0, i32 12
  store i8* (%struct._GimpViewable*, i8**)* @gimp_viewable_real_get_description, i8* (%struct._GimpViewable*, i8**)** %get_description, align 8
  %28 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %klass.addr, align 8
  %get_children = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %28, i32 0, i32 13
  store %struct._GimpContainer* (%struct._GimpViewable*)* @gimp_viewable_real_get_children, %struct._GimpContainer* (%struct._GimpViewable*)** %get_children, align 8
  %29 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %klass.addr, align 8
  %set_expanded = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %29, i32 0, i32 14
  store void (%struct._GimpViewable*, i32)* null, void (%struct._GimpViewable*, i32)** %set_expanded, align 8
  %30 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %klass.addr, align 8
  %get_expanded = getelementptr inbounds %struct._GimpViewableClass, %struct._GimpViewableClass* %30, i32 0, i32 15
  store i32 (%struct._GimpViewable*)* null, i32 (%struct._GimpViewable*)** %get_expanded, align 8
  %31 = load %struct._GObjectClass*, %struct._GObjectClass** %object_class, align 8
  %call6 = call %struct._GParamSpec* @g_param_spec_string(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i32 0, i32 0), i8* null, i8* null, i8* null, i32 487)
  call void @g_object_class_install_property(%struct._GObjectClass* %31, i32 1, %struct._GParamSpec* %call6)
  %32 = load %struct._GObjectClass*, %struct._GObjectClass** %object_class, align 8
  %call7 = call %struct._GParamSpec* @g_param_spec_boolean(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0), i8* null, i8* null, i32 0, i32 225)
  call void @g_object_class_install_property(%struct._GObjectClass* %32, i32 2, %struct._GParamSpec* %call7)
  %33 = load %struct._GimpViewableClass*, %struct._GimpViewableClass** %klass.addr, align 8
  %34 = bitcast %struct._GimpViewableClass* %33 to i8*
  call void @g_type_class_add_private(i8* %34, i64 40)
  ret void
}

declare %struct._GTypeClass* @g_type_check_class_cast(%struct._GTypeClass*, i64) #1

declare i32 @g_signal_new(i8*, i64, i32, i32, i32 (%struct._GSignalInvocationHint*, %struct._GValue*, %struct._GValue*, i8*)*, i8*, void (%struct._GClosure*, %struct._GValue*, i32, %struct._GValue*, i8*, i8*)*, i64, i32, ...) #1

declare void @g_cclosure_marshal_VOID__VOID(%struct._GClosure*, %struct._GValue*, i32, %struct._GValue*, i8*, i8*) #1

; Function Attrs: nounwind uwtable
define internal void @gimp_viewable_finalize(%struct._GObject* %object) #3 {
entry:
  %object.addr = alloca %struct._GObject*, align 8
  %private = alloca %struct._GimpViewablePrivate*, align 8
  store %struct._GObject* %object, %struct._GObject** %object.addr, align 8
  %0 = load %struct._GObject*, %struct._GObject** %object.addr, align 8
  %1 = bitcast %struct._GObject* %0 to %struct._GTypeInstance*
  %call = call i64 @gimp_viewable_get_type() #7
  %call1 = call i8* @g_type_instance_get_private(%struct._GTypeInstance* %1, i64 %call)
  %2 = bitcast i8* %call1 to %struct._GimpViewablePrivate*
  store %struct._GimpViewablePrivate* %2, %struct._GimpViewablePrivate** %private, align 8
  %3 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %stock_id = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %3, i32 0, i32 0
  %4 = load i8*, i8** %stock_id, align 8
  %tobool = icmp ne i8* %4, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %stock_id2 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %5, i32 0, i32 0
  %6 = load i8*, i8** %stock_id2, align 8
  call void @g_free(i8* %6)
  %7 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %stock_id3 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %7, i32 0, i32 0
  store i8* null, i8** %stock_id3, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_temp_buf = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %8, i32 0, i32 3
  %9 = load %struct._TempBuf*, %struct._TempBuf** %preview_temp_buf, align 8
  %tobool4 = icmp ne %struct._TempBuf* %9, null
  br i1 %tobool4, label %if.then.5, label %if.end.8

if.then.5:                                        ; preds = %if.end
  %10 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_temp_buf6 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %10, i32 0, i32 3
  %11 = load %struct._TempBuf*, %struct._TempBuf** %preview_temp_buf6, align 8
  call void @temp_buf_free(%struct._TempBuf* %11)
  %12 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_temp_buf7 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %12, i32 0, i32 3
  store %struct._TempBuf* null, %struct._TempBuf** %preview_temp_buf7, align 8
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.5, %if.end
  %13 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_pixbuf = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %13, i32 0, i32 4
  %14 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %preview_pixbuf, align 8
  %tobool9 = icmp ne %struct._GdkPixbuf* %14, null
  br i1 %tobool9, label %if.then.10, label %if.end.13

if.then.10:                                       ; preds = %if.end.8
  %15 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_pixbuf11 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %15, i32 0, i32 4
  %16 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %preview_pixbuf11, align 8
  %17 = bitcast %struct._GdkPixbuf* %16 to i8*
  call void @g_object_unref(i8* %17)
  %18 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_pixbuf12 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %18, i32 0, i32 4
  store %struct._GdkPixbuf* null, %struct._GdkPixbuf** %preview_pixbuf12, align 8
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.10, %if.end.8
  %19 = load i8*, i8** @gimp_viewable_parent_class, align 8
  %20 = bitcast i8* %19 to %struct._GTypeClass*
  %call14 = call %struct._GTypeClass* @g_type_check_class_cast(%struct._GTypeClass* %20, i64 80)
  %21 = bitcast %struct._GTypeClass* %call14 to %struct._GObjectClass*
  %finalize = getelementptr inbounds %struct._GObjectClass, %struct._GObjectClass* %21, i32 0, i32 6
  %22 = load void (%struct._GObject*)*, void (%struct._GObject*)** %finalize, align 8
  %23 = load %struct._GObject*, %struct._GObject** %object.addr, align 8
  call void %22(%struct._GObject* %23)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @gimp_viewable_get_property(%struct._GObject* %object, i32 %property_id, %struct._GValue* %value, %struct._GParamSpec* %pspec) #3 {
entry:
  %object.addr = alloca %struct._GObject*, align 8
  %property_id.addr = alloca i32, align 4
  %value.addr = alloca %struct._GValue*, align 8
  %pspec.addr = alloca %struct._GParamSpec*, align 8
  %viewable = alloca %struct._GimpViewable*, align 8
  %_glib__object = alloca %struct._GObject*, align 8
  %_glib__pspec = alloca %struct._GParamSpec*, align 8
  %_glib__property_id = alloca i32, align 4
  store %struct._GObject* %object, %struct._GObject** %object.addr, align 8
  store i32 %property_id, i32* %property_id.addr, align 4
  store %struct._GValue* %value, %struct._GValue** %value.addr, align 8
  store %struct._GParamSpec* %pspec, %struct._GParamSpec** %pspec.addr, align 8
  %0 = load %struct._GObject*, %struct._GObject** %object.addr, align 8
  %1 = bitcast %struct._GObject* %0 to %struct._GTypeInstance*
  %call = call i64 @gimp_viewable_get_type() #7
  %call1 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %1, i64 %call)
  %2 = bitcast %struct._GTypeInstance* %call1 to %struct._GimpViewable*
  store %struct._GimpViewable* %2, %struct._GimpViewable** %viewable, align 8
  %3 = load i32, i32* %property_id.addr, align 4
  switch i32 %3, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.3
  ]

sw.bb:                                            ; preds = %entry
  %4 = load %struct._GValue*, %struct._GValue** %value.addr, align 8
  %5 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable, align 8
  %call2 = call i8* @gimp_viewable_get_stock_id(%struct._GimpViewable* %5)
  call void @g_value_set_string(%struct._GValue* %4, i8* %call2)
  br label %sw.epilog

sw.bb.3:                                          ; preds = %entry
  %6 = load %struct._GValue*, %struct._GValue** %value.addr, align 8
  %7 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable, align 8
  %call4 = call i32 @gimp_viewable_preview_is_frozen(%struct._GimpViewable* %7)
  call void @g_value_set_boolean(%struct._GValue* %6, i32 %call4)
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %sw.default
  %8 = load %struct._GObject*, %struct._GObject** %object.addr, align 8
  store %struct._GObject* %8, %struct._GObject** %_glib__object, align 8
  %9 = load %struct._GParamSpec*, %struct._GParamSpec** %pspec.addr, align 8
  store %struct._GParamSpec* %9, %struct._GParamSpec** %_glib__pspec, align 8
  %10 = load i32, i32* %property_id.addr, align 4
  store i32 %10, i32* %_glib__property_id, align 4
  %11 = load i32, i32* %_glib__property_id, align 4
  %12 = load %struct._GParamSpec*, %struct._GParamSpec** %_glib__pspec, align 8
  %name = getelementptr inbounds %struct._GParamSpec, %struct._GParamSpec* %12, i32 0, i32 1
  %13 = load i8*, i8** %name, align 8
  %14 = load %struct._GParamSpec*, %struct._GParamSpec** %_glib__pspec, align 8
  %15 = bitcast %struct._GParamSpec* %14 to %struct._GTypeInstance*
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %15, i32 0, i32 0
  %16 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %16, i32 0, i32 0
  %17 = load i64, i64* %g_type, align 8
  %call5 = call i8* @g_type_name(i64 %17)
  %18 = load %struct._GObject*, %struct._GObject** %_glib__object, align 8
  %19 = bitcast %struct._GObject* %18 to %struct._GTypeInstance*
  %g_class6 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %19, i32 0, i32 0
  %20 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class6, align 8
  %g_type7 = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %20, i32 0, i32 0
  %21 = load i64, i64* %g_type7, align 8
  %call8 = call i8* @g_type_name(i64 %21)
  call void (i8*, ...) @g_warning(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0), i32 265, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.22, i32 0, i32 0), i32 %11, i8* %13, i8* %call5, i8* %call8)
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %sw.epilog

sw.epilog:                                        ; preds = %do.end, %sw.bb.3, %sw.bb
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @gimp_viewable_set_property(%struct._GObject* %object, i32 %property_id, %struct._GValue* %value, %struct._GParamSpec* %pspec) #3 {
entry:
  %object.addr = alloca %struct._GObject*, align 8
  %property_id.addr = alloca i32, align 4
  %value.addr = alloca %struct._GValue*, align 8
  %pspec.addr = alloca %struct._GParamSpec*, align 8
  %viewable = alloca %struct._GimpViewable*, align 8
  %_glib__object = alloca %struct._GObject*, align 8
  %_glib__pspec = alloca %struct._GParamSpec*, align 8
  %_glib__property_id = alloca i32, align 4
  store %struct._GObject* %object, %struct._GObject** %object.addr, align 8
  store i32 %property_id, i32* %property_id.addr, align 4
  store %struct._GValue* %value, %struct._GValue** %value.addr, align 8
  store %struct._GParamSpec* %pspec, %struct._GParamSpec** %pspec.addr, align 8
  %0 = load %struct._GObject*, %struct._GObject** %object.addr, align 8
  %1 = bitcast %struct._GObject* %0 to %struct._GTypeInstance*
  %call = call i64 @gimp_viewable_get_type() #7
  %call1 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %1, i64 %call)
  %2 = bitcast %struct._GTypeInstance* %call1 to %struct._GimpViewable*
  store %struct._GimpViewable* %2, %struct._GimpViewable** %viewable, align 8
  %3 = load i32, i32* %property_id.addr, align 4
  switch i32 %3, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.3
  ]

sw.bb:                                            ; preds = %entry
  %4 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable, align 8
  %5 = load %struct._GValue*, %struct._GValue** %value.addr, align 8
  %call2 = call i8* @g_value_get_string(%struct._GValue* %5)
  call void @gimp_viewable_set_stock_id(%struct._GimpViewable* %4, i8* %call2)
  br label %sw.epilog

sw.bb.3:                                          ; preds = %entry
  br label %sw.default

sw.default:                                       ; preds = %entry, %sw.bb.3
  br label %do.body

do.body:                                          ; preds = %sw.default
  %6 = load %struct._GObject*, %struct._GObject** %object.addr, align 8
  store %struct._GObject* %6, %struct._GObject** %_glib__object, align 8
  %7 = load %struct._GParamSpec*, %struct._GParamSpec** %pspec.addr, align 8
  store %struct._GParamSpec* %7, %struct._GParamSpec** %_glib__pspec, align 8
  %8 = load i32, i32* %property_id.addr, align 4
  store i32 %8, i32* %_glib__property_id, align 4
  %9 = load i32, i32* %_glib__property_id, align 4
  %10 = load %struct._GParamSpec*, %struct._GParamSpec** %_glib__pspec, align 8
  %name = getelementptr inbounds %struct._GParamSpec, %struct._GParamSpec* %10, i32 0, i32 1
  %11 = load i8*, i8** %name, align 8
  %12 = load %struct._GParamSpec*, %struct._GParamSpec** %_glib__pspec, align 8
  %13 = bitcast %struct._GParamSpec* %12 to %struct._GTypeInstance*
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %13, i32 0, i32 0
  %14 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %14, i32 0, i32 0
  %15 = load i64, i64* %g_type, align 8
  %call4 = call i8* @g_type_name(i64 %15)
  %16 = load %struct._GObject*, %struct._GObject** %_glib__object, align 8
  %17 = bitcast %struct._GObject* %16 to %struct._GTypeInstance*
  %g_class5 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %17, i32 0, i32 0
  %18 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class5, align 8
  %g_type6 = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %18, i32 0, i32 0
  %19 = load i64, i64* %g_type6, align 8
  %call7 = call i8* @g_type_name(i64 %19)
  call void (i8*, ...) @g_warning(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0), i32 242, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.22, i32 0, i32 0), i32 %9, i8* %11, i8* %call4, i8* %call7)
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %sw.epilog

sw.epilog:                                        ; preds = %do.end, %sw.bb
  ret void
}

; Function Attrs: nounwind uwtable
define internal i64 @gimp_viewable_get_memsize(%struct._GimpObject* %object, i64* %gui_size) #3 {
entry:
  %object.addr = alloca %struct._GimpObject*, align 8
  %gui_size.addr = alloca i64*, align 8
  %private = alloca %struct._GimpViewablePrivate*, align 8
  store %struct._GimpObject* %object, %struct._GimpObject** %object.addr, align 8
  store i64* %gui_size, i64** %gui_size.addr, align 8
  %0 = load %struct._GimpObject*, %struct._GimpObject** %object.addr, align 8
  %1 = bitcast %struct._GimpObject* %0 to %struct._GTypeInstance*
  %call = call i64 @gimp_viewable_get_type() #7
  %call1 = call i8* @g_type_instance_get_private(%struct._GTypeInstance* %1, i64 %call)
  %2 = bitcast i8* %call1 to %struct._GimpViewablePrivate*
  store %struct._GimpViewablePrivate* %2, %struct._GimpViewablePrivate** %private, align 8
  %3 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_temp_buf = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %3, i32 0, i32 3
  %4 = load %struct._TempBuf*, %struct._TempBuf** %preview_temp_buf, align 8
  %call2 = call i64 @temp_buf_get_memsize(%struct._TempBuf* %4)
  %5 = load i64*, i64** %gui_size.addr, align 8
  %6 = load i64, i64* %5, align 8
  %add = add i64 %6, %call2
  store i64 %add, i64* %5, align 8
  %7 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_pixbuf = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %7, i32 0, i32 4
  %8 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %preview_pixbuf, align 8
  %tobool = icmp ne %struct._GdkPixbuf* %8, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %9 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_pixbuf3 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %9, i32 0, i32 4
  %10 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %preview_pixbuf3, align 8
  %11 = bitcast %struct._GdkPixbuf* %10 to %struct._GTypeInstance*
  %call4 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %11, i64 80)
  %12 = bitcast %struct._GTypeInstance* %call4 to %struct._GObject*
  %call5 = call i64 @gimp_g_object_get_memsize(%struct._GObject* %12)
  %13 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_pixbuf6 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %13, i32 0, i32 4
  %14 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %preview_pixbuf6, align 8
  %call7 = call i32 @gdk_pixbuf_get_height(%struct._GdkPixbuf* %14)
  %conv = sext i32 %call7 to i64
  %15 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_pixbuf8 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %15, i32 0, i32 4
  %16 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %preview_pixbuf8, align 8
  %call9 = call i32 @gdk_pixbuf_get_rowstride(%struct._GdkPixbuf* %16)
  %conv10 = sext i32 %call9 to i64
  %mul = mul i64 %conv, %conv10
  %add11 = add i64 %call5, %mul
  %17 = load i64*, i64** %gui_size.addr, align 8
  %18 = load i64, i64* %17, align 8
  %add12 = add i64 %18, %add11
  store i64 %add12, i64* %17, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %19 = load i8*, i8** @gimp_viewable_parent_class, align 8
  %20 = bitcast i8* %19 to %struct._GTypeClass*
  %call13 = call i64 @gimp_object_get_type() #7
  %call14 = call %struct._GTypeClass* @g_type_check_class_cast(%struct._GTypeClass* %20, i64 %call13)
  %21 = bitcast %struct._GTypeClass* %call14 to %struct._GimpObjectClass*
  %get_memsize = getelementptr inbounds %struct._GimpObjectClass, %struct._GimpObjectClass* %21, i32 0, i32 3
  %22 = load i64 (%struct._GimpObject*, i64*)*, i64 (%struct._GimpObject*, i64*)** %get_memsize, align 8
  %23 = load %struct._GimpObject*, %struct._GimpObject** %object.addr, align 8
  %24 = load i64*, i64** %gui_size.addr, align 8
  %call15 = call i64 %22(%struct._GimpObject* %23, i64* %24)
  ret i64 %call15
}

; Function Attrs: nounwind uwtable
define internal void @gimp_viewable_real_invalidate_preview(%struct._GimpViewable* %viewable) #3 {
entry:
  %viewable.addr = alloca %struct._GimpViewable*, align 8
  %private = alloca %struct._GimpViewablePrivate*, align 8
  store %struct._GimpViewable* %viewable, %struct._GimpViewable** %viewable.addr, align 8
  %0 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %1 = bitcast %struct._GimpViewable* %0 to %struct._GTypeInstance*
  %call = call i64 @gimp_viewable_get_type() #7
  %call1 = call i8* @g_type_instance_get_private(%struct._GTypeInstance* %1, i64 %call)
  %2 = bitcast i8* %call1 to %struct._GimpViewablePrivate*
  store %struct._GimpViewablePrivate* %2, %struct._GimpViewablePrivate** %private, align 8
  %3 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_temp_buf = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %3, i32 0, i32 3
  %4 = load %struct._TempBuf*, %struct._TempBuf** %preview_temp_buf, align 8
  %tobool = icmp ne %struct._TempBuf* %4, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_temp_buf2 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %5, i32 0, i32 3
  %6 = load %struct._TempBuf*, %struct._TempBuf** %preview_temp_buf2, align 8
  call void @temp_buf_free(%struct._TempBuf* %6)
  %7 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_temp_buf3 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %7, i32 0, i32 3
  store %struct._TempBuf* null, %struct._TempBuf** %preview_temp_buf3, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_pixbuf = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %8, i32 0, i32 4
  %9 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %preview_pixbuf, align 8
  %tobool4 = icmp ne %struct._GdkPixbuf* %9, null
  br i1 %tobool4, label %if.then.5, label %if.end.8

if.then.5:                                        ; preds = %if.end
  %10 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_pixbuf6 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %10, i32 0, i32 4
  %11 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %preview_pixbuf6, align 8
  %12 = bitcast %struct._GdkPixbuf* %11 to i8*
  call void @g_object_unref(i8* %12)
  %13 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %preview_pixbuf7 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %13, i32 0, i32 4
  store %struct._GdkPixbuf* null, %struct._GdkPixbuf** %preview_pixbuf7, align 8
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.5, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @gimp_viewable_real_get_preview_size(%struct._GimpViewable* %viewable, i32 %size, i32 %popup, i32 %dot_for_dot, i32* %width, i32* %height) #3 {
entry:
  %viewable.addr = alloca %struct._GimpViewable*, align 8
  %size.addr = alloca i32, align 4
  %popup.addr = alloca i32, align 4
  %dot_for_dot.addr = alloca i32, align 4
  %width.addr = alloca i32*, align 8
  %height.addr = alloca i32*, align 8
  store %struct._GimpViewable* %viewable, %struct._GimpViewable** %viewable.addr, align 8
  store i32 %size, i32* %size.addr, align 4
  store i32 %popup, i32* %popup.addr, align 4
  store i32 %dot_for_dot, i32* %dot_for_dot.addr, align 4
  store i32* %width, i32** %width.addr, align 8
  store i32* %height, i32** %height.addr, align 8
  %0 = load i32, i32* %size.addr, align 4
  %1 = load i32*, i32** %width.addr, align 8
  store i32 %0, i32* %1, align 4
  %2 = load i32, i32* %size.addr, align 4
  %3 = load i32*, i32** %height.addr, align 8
  store i32 %2, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @gimp_viewable_real_get_popup_size(%struct._GimpViewable* %viewable, i32 %width, i32 %height, i32 %dot_for_dot, i32* %popup_width, i32* %popup_height) #3 {
entry:
  %retval = alloca i32, align 4
  %viewable.addr = alloca %struct._GimpViewable*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %dot_for_dot.addr = alloca i32, align 4
  %popup_width.addr = alloca i32*, align 8
  %popup_height.addr = alloca i32*, align 8
  %w = alloca i32, align 4
  %h = alloca i32, align 4
  store %struct._GimpViewable* %viewable, %struct._GimpViewable** %viewable.addr, align 8
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  store i32 %dot_for_dot, i32* %dot_for_dot.addr, align 4
  store i32* %popup_width, i32** %popup_width.addr, align 8
  store i32* %popup_height, i32** %popup_height.addr, align 8
  %0 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %call = call i32 @gimp_viewable_get_size(%struct._GimpViewable* %0, i32* %w, i32* %h)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.3

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %w, align 4
  %2 = load i32, i32* %width.addr, align 4
  %cmp = icmp sgt i32 %1, %2
  br i1 %cmp, label %if.then.2, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %3 = load i32, i32* %h, align 4
  %4 = load i32, i32* %height.addr, align 4
  %cmp1 = icmp sgt i32 %3, %4
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %lor.lhs.false, %if.then
  %5 = load i32, i32* %w, align 4
  %6 = load i32*, i32** %popup_width.addr, align 8
  store i32 %5, i32* %6, align 4
  %7 = load i32, i32* %h, align 4
  %8 = load i32*, i32** %popup_height.addr, align 8
  store i32 %7, i32* %8, align 4
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  br label %if.end.3

if.end.3:                                         ; preds = %if.end, %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.3, %if.then.2
  %9 = load i32, i32* %retval
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define internal %struct._GdkPixbuf* @gimp_viewable_real_get_new_pixbuf(%struct._GimpViewable* %viewable, %struct._GimpContext* %context, i32 %width, i32 %height) #3 {
entry:
  %viewable.addr = alloca %struct._GimpViewable*, align 8
  %context.addr = alloca %struct._GimpContext*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %temp_buf = alloca %struct._TempBuf*, align 8
  %pixbuf = alloca %struct._GdkPixbuf*, align 8
  %color_buf = alloca %struct._TempBuf*, align 8
  %width1 = alloca i32, align 4
  %height2 = alloca i32, align 4
  %bytes = alloca i32, align 4
  %color_bytes = alloca i32, align 4
  store %struct._GimpViewable* %viewable, %struct._GimpViewable** %viewable.addr, align 8
  store %struct._GimpContext* %context, %struct._GimpContext** %context.addr, align 8
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  store %struct._GdkPixbuf* null, %struct._GdkPixbuf** %pixbuf, align 8
  %0 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %1 = load %struct._GimpContext*, %struct._GimpContext** %context.addr, align 8
  %2 = load i32, i32* %width.addr, align 4
  %3 = load i32, i32* %height.addr, align 4
  %call = call %struct._TempBuf* @gimp_viewable_get_preview(%struct._GimpViewable* %0, %struct._GimpContext* %1, i32 %2, i32 %3)
  store %struct._TempBuf* %call, %struct._TempBuf** %temp_buf, align 8
  %4 = load %struct._TempBuf*, %struct._TempBuf** %temp_buf, align 8
  %tobool = icmp ne %struct._TempBuf* %4, null
  br i1 %tobool, label %if.then, label %if.end.20

if.then:                                          ; preds = %entry
  store %struct._TempBuf* null, %struct._TempBuf** %color_buf, align 8
  %5 = load %struct._TempBuf*, %struct._TempBuf** %temp_buf, align 8
  %bytes3 = getelementptr inbounds %struct._TempBuf, %struct._TempBuf* %5, i32 0, i32 0
  %6 = load i32, i32* %bytes3, align 4
  store i32 %6, i32* %bytes, align 4
  %7 = load %struct._TempBuf*, %struct._TempBuf** %temp_buf, align 8
  %width4 = getelementptr inbounds %struct._TempBuf, %struct._TempBuf* %7, i32 0, i32 1
  %8 = load i32, i32* %width4, align 4
  store i32 %8, i32* %width1, align 4
  %9 = load %struct._TempBuf*, %struct._TempBuf** %temp_buf, align 8
  %height5 = getelementptr inbounds %struct._TempBuf, %struct._TempBuf* %9, i32 0, i32 2
  %10 = load i32, i32* %height5, align 4
  store i32 %10, i32* %height2, align 4
  %11 = load i32, i32* %bytes, align 4
  %cmp = icmp eq i32 %11, 1
  br i1 %cmp, label %if.then.7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %12 = load i32, i32* %bytes, align 4
  %cmp6 = icmp eq i32 %12, 2
  br i1 %cmp6, label %if.then.7, label %if.end

if.then.7:                                        ; preds = %lor.lhs.false, %if.then
  %13 = load i32, i32* %bytes, align 4
  %cmp8 = icmp eq i32 %13, 2
  %cond = select i1 %cmp8, i32 4, i32 3
  store i32 %cond, i32* %color_bytes, align 4
  %14 = load i32, i32* %width1, align 4
  %15 = load i32, i32* %height2, align 4
  %16 = load i32, i32* %color_bytes, align 4
  %call9 = call %struct._TempBuf* @temp_buf_new(i32 %14, i32 %15, i32 %16, i32 0, i32 0, i8* null)
  store %struct._TempBuf* %call9, %struct._TempBuf** %color_buf, align 8
  %17 = load %struct._TempBuf*, %struct._TempBuf** %temp_buf, align 8
  %18 = load %struct._TempBuf*, %struct._TempBuf** %color_buf, align 8
  %call10 = call %struct._TempBuf* @temp_buf_copy(%struct._TempBuf* %17, %struct._TempBuf* %18)
  %19 = load %struct._TempBuf*, %struct._TempBuf** %color_buf, align 8
  store %struct._TempBuf* %19, %struct._TempBuf** %temp_buf, align 8
  %20 = load i32, i32* %color_bytes, align 4
  store i32 %20, i32* %bytes, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.7, %lor.lhs.false
  %21 = load %struct._TempBuf*, %struct._TempBuf** %temp_buf, align 8
  %call11 = call i8* @temp_buf_get_data(%struct._TempBuf* %21)
  %22 = load i32, i32* %width1, align 4
  %23 = load i32, i32* %height2, align 4
  %mul = mul nsw i32 %22, %23
  %24 = load i32, i32* %bytes, align 4
  %mul12 = mul nsw i32 %mul, %24
  %call13 = call noalias i8* @g_memdup(i8* %call11, i32 %mul12)
  %25 = load i32, i32* %bytes, align 4
  %cmp14 = icmp eq i32 %25, 4
  %conv = zext i1 %cmp14 to i32
  %26 = load i32, i32* %width1, align 4
  %27 = load i32, i32* %height2, align 4
  %28 = load i32, i32* %width1, align 4
  %29 = load i32, i32* %bytes, align 4
  %mul15 = mul nsw i32 %28, %29
  %call16 = call %struct._GdkPixbuf* @gdk_pixbuf_new_from_data(i8* %call13, i32 0, i32 %conv, i32 8, i32 %26, i32 %27, i32 %mul15, void (i8*, i8*)* bitcast (void (i8*)* @g_free to void (i8*, i8*)*), i8* null)
  store %struct._GdkPixbuf* %call16, %struct._GdkPixbuf** %pixbuf, align 8
  %30 = load %struct._TempBuf*, %struct._TempBuf** %color_buf, align 8
  %tobool17 = icmp ne %struct._TempBuf* %30, null
  br i1 %tobool17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %if.end
  %31 = load %struct._TempBuf*, %struct._TempBuf** %color_buf, align 8
  call void @temp_buf_free(%struct._TempBuf* %31)
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.18, %if.end
  br label %if.end.20

if.end.20:                                        ; preds = %if.end.19, %entry
  %32 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %pixbuf, align 8
  ret %struct._GdkPixbuf* %32
}

; Function Attrs: nounwind uwtable
define internal i8* @gimp_viewable_real_get_description(%struct._GimpViewable* %viewable, i8** %tooltip) #3 {
entry:
  %viewable.addr = alloca %struct._GimpViewable*, align 8
  %tooltip.addr = alloca i8**, align 8
  store %struct._GimpViewable* %viewable, %struct._GimpViewable** %viewable.addr, align 8
  store i8** %tooltip, i8*** %tooltip.addr, align 8
  %0 = load %struct._GimpViewable*, %struct._GimpViewable** %viewable.addr, align 8
  %1 = bitcast %struct._GimpViewable* %0 to i8*
  %call = call i8* @gimp_object_get_name(i8* %1)
  %call1 = call noalias i8* @g_strdup(i8* %call)
  ret i8* %call1
}

; Function Attrs: nounwind uwtable
define internal %struct._GimpContainer* @gimp_viewable_real_get_children(%struct._GimpViewable* %viewable) #3 {
entry:
  %viewable.addr = alloca %struct._GimpViewable*, align 8
  store %struct._GimpViewable* %viewable, %struct._GimpViewable** %viewable.addr, align 8
  ret %struct._GimpContainer* null
}

declare void @g_object_class_install_property(%struct._GObjectClass*, i32, %struct._GParamSpec*) #1

declare %struct._GParamSpec* @g_param_spec_string(i8*, i8*, i8*, i8*, i32) #1

declare %struct._GParamSpec* @g_param_spec_boolean(i8*, i8*, i8*, i32, i32) #1

declare void @g_type_class_add_private(i8*, i64) #1

declare void @g_value_set_string(%struct._GValue*, i8*) #1

declare void @g_value_set_boolean(%struct._GValue*, i32) #1

declare i8* @g_type_name(i64) #1

declare i8* @g_value_get_string(%struct._GValue*) #1

declare i64 @temp_buf_get_memsize(%struct._TempBuf*) #1

declare i64 @gimp_g_object_get_memsize(%struct._GObject*) #1

declare %struct._GdkPixbuf* @gdk_pixbuf_new_from_data(i8*, i32, i32, i32, i32, i32, i32, void (i8*, i8*)*, i8*) #1

declare noalias i8* @g_memdup(i8*, i32) #1

declare i8* @gimp_object_get_name(i8*) #1

; Function Attrs: nounwind uwtable
define internal i32 @gimp_viewable_serialize_property(%struct._GimpConfig* %config, i32 %property_id, %struct._GValue* %value, %struct._GParamSpec* %pspec, %struct._GimpConfigWriter* %writer) #3 {
entry:
  %retval = alloca i32, align 4
  %config.addr = alloca %struct._GimpConfig*, align 8
  %property_id.addr = alloca i32, align 4
  %value.addr = alloca %struct._GValue*, align 8
  %pspec.addr = alloca %struct._GParamSpec*, align 8
  %writer.addr = alloca %struct._GimpConfigWriter*, align 8
  %private = alloca %struct._GimpViewablePrivate*, align 8
  store %struct._GimpConfig* %config, %struct._GimpConfig** %config.addr, align 8
  store i32 %property_id, i32* %property_id.addr, align 4
  store %struct._GValue* %value, %struct._GValue** %value.addr, align 8
  store %struct._GParamSpec* %pspec, %struct._GParamSpec** %pspec.addr, align 8
  store %struct._GimpConfigWriter* %writer, %struct._GimpConfigWriter** %writer.addr, align 8
  %0 = load %struct._GimpConfig*, %struct._GimpConfig** %config.addr, align 8
  %1 = bitcast %struct._GimpConfig* %0 to %struct._GTypeInstance*
  %call = call i64 @gimp_viewable_get_type() #7
  %call1 = call i8* @g_type_instance_get_private(%struct._GTypeInstance* %1, i64 %call)
  %2 = bitcast i8* %call1 to %struct._GimpViewablePrivate*
  store %struct._GimpViewablePrivate* %2, %struct._GimpViewablePrivate** %private, align 8
  %3 = load i32, i32* %property_id.addr, align 4
  switch i32 %3, label %sw.default [
    i32 1, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry
  %4 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %stock_id = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %4, i32 0, i32 0
  %5 = load i8*, i8** %stock_id, align 8
  %tobool = icmp ne i8* %5, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  %6 = load %struct._GimpConfigWriter*, %struct._GimpConfigWriter** %writer.addr, align 8
  %7 = load %struct._GParamSpec*, %struct._GParamSpec** %pspec.addr, align 8
  %name = getelementptr inbounds %struct._GParamSpec, %struct._GParamSpec* %7, i32 0, i32 1
  %8 = load i8*, i8** %name, align 8
  call void @gimp_config_writer_open(%struct._GimpConfigWriter* %6, i8* %8)
  %9 = load %struct._GimpConfigWriter*, %struct._GimpConfigWriter** %writer.addr, align 8
  %10 = load %struct._GimpViewablePrivate*, %struct._GimpViewablePrivate** %private, align 8
  %stock_id2 = getelementptr inbounds %struct._GimpViewablePrivate, %struct._GimpViewablePrivate* %10, i32 0, i32 0
  %11 = load i8*, i8** %stock_id2, align 8
  call void @gimp_config_writer_string(%struct._GimpConfigWriter* %9, i8* %11)
  %12 = load %struct._GimpConfigWriter*, %struct._GimpConfigWriter** %writer.addr, align 8
  call void @gimp_config_writer_close(%struct._GimpConfigWriter* %12)
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.bb
  store i32 1, i32* %retval
  br label %return

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %sw.epilog, %if.end
  %13 = load i32, i32* %retval
  ret i32 %13
}

declare void @gimp_config_writer_open(%struct._GimpConfigWriter*, i8*) #1

declare void @gimp_config_writer_string(%struct._GimpConfigWriter*, i8*) #1

declare void @gimp_config_writer_close(%struct._GimpConfigWriter*) #1

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #6

declare void @g_logv(i8*, i32, i8*, %struct.__va_list_tag*) #1

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #6

attributes #0 = { nounwind readnone uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind readnone }
attributes #8 = { nounwind readonly }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
