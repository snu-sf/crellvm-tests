; ModuleID = './plug-ins/common/apply-canvas.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._GimpPlugInInfo = type { void ()*, void ()*, void ()*, void (i8*, i32, %struct._GimpParam*, i32*, %struct._GimpParam**)* }
%struct._GimpParam = type { i32, %union._GimpParamData }
%union._GimpParamData = type { %struct._GimpRGB }
%struct._GimpRGB = type { double, double, double, double }
%struct._GimpParamDef = type { i32, i8*, i8* }
%struct.StrucValues = type { i32, i32 }
%struct._GimpDrawable = type { i32, i32, i32, i32, i32, i32, %struct._GimpTile*, %struct._GimpTile* }
%struct._GimpTile = type { i32, i32, i32, i32, i16, i8, i8*, %struct._GimpDrawable* }
%struct._GimpPreview = type { %struct._GtkBox, i32, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GdkCursor*, %struct._GdkCursor*, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct._GtkBox = type { %struct._GtkContainer, %struct._GList*, i16, i8 }
%struct._GtkContainer = type { %struct._GtkWidget, %struct._GtkWidget*, i24 }
%struct._GtkWidget = type { %struct._GtkObject, i16, i8, i8, i8*, %struct._GtkStyle*, %struct._GtkRequisition, %struct._GdkRectangle, %struct._GdkDrawable*, %struct._GtkWidget* }
%struct._GtkObject = type { %struct._GObject, i32 }
%struct._GObject = type { %struct._GTypeInstance, i32, %struct._GData* }
%struct._GTypeInstance = type { %struct._GTypeClass* }
%struct._GTypeClass = type { i64 }
%struct._GData = type opaque
%struct._GtkStyle = type { %struct._GObject, [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], %struct._GdkColor, %struct._GdkColor, %struct._PangoFontDescription*, i32, i32, [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], %struct._GdkGC*, %struct._GdkGC*, [5 x %struct._GdkDrawable*], i32, i32, %struct._GdkColormap*, %struct._GdkFont*, %struct._PangoFontDescription*, %struct._GtkRcStyle*, %struct._GSList*, %struct._GArray*, %struct._GSList* }
%struct._GdkColor = type { i32, i16, i16, i16 }
%struct._GdkGC = type { %struct._GObject, i32, i32, i32, i32, %struct._GdkColormap* }
%struct._GdkColormap = type { %struct._GObject, i32, %struct._GdkColor*, %struct._GdkVisual*, i8* }
%struct._GdkVisual = type { %struct._GObject, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct._GdkFont = type opaque
%struct._PangoFontDescription = type opaque
%struct._GtkRcStyle = type { %struct._GObject, i8*, [5 x i8*], %struct._PangoFontDescription*, [5 x i32], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], i32, i32, %struct._GArray*, %struct._GSList*, %struct._GSList*, i8 }
%struct._GArray = type { i8*, i32 }
%struct._GSList = type { i8*, %struct._GSList* }
%struct._GtkRequisition = type { i32, i32 }
%struct._GdkRectangle = type { i32, i32, i32, i32 }
%struct._GdkDrawable = type { %struct._GObject }
%struct._GList = type { i8*, %struct._GList*, %struct._GList* }
%struct._GdkCursor = type { i32, i32 }
%struct._GtkDialog = type { %struct._GtkWindow, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget* }
%struct._GtkWindow = type <{ %struct._GtkBin, i8*, i8*, i8*, i8*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWindow*, %struct._GtkWindowGeometryInfo*, %struct._GdkDrawable*, %struct._GtkWindowGroup*, i16, i32, [2 x i8], i32, i32, i32, i32, i32, i32, %struct._GdkScreen* }>
%struct._GtkBin = type { %struct._GtkContainer, %struct._GtkWidget* }
%struct._GtkWindowGeometryInfo = type opaque
%struct._GtkWindowGroup = type { %struct._GObject, %struct._GSList* }
%struct._GdkScreen = type { %struct._GObject, i8, [32 x %struct._GdkGC*], [32 x %struct._GdkGC*], [32 x %struct._GdkGC*], %struct._cairo_font_options*, double }
%struct._cairo_font_options = type opaque
%struct._GClosure = type { i32, void (%struct._GClosure*, %struct._GValue*, i32, %struct._GValue*, i8*, i8*)*, i8*, %struct._GClosureNotifyData* }
%struct._GValue = type { i64, [2 x %union.anon] }
%union.anon = type { i64 }
%struct._GClosureNotifyData = type { i8*, {}* }
%struct._GtkTable = type { %struct._GtkContainer, %struct._GList*, %struct._GtkTableRowCol*, %struct._GtkTableRowCol*, i16, i16, i16, i16, i8 }
%struct._GtkTableRowCol = type { i16, i16, i16, i8 }
%struct._GimpDialog = type { %struct._GtkDialog }
%struct._GimpPixelRgn = type { i8*, %struct._GimpDrawable*, i32, i32, i32, i32, i32, i32, i8, i32 }
%struct._GtkAdjustment = type { %struct._GtkObject, double, double, double, double, double, double }

@PLUG_IN_INFO = constant %struct._GimpPlugInInfo { void ()* null, void ()* null, void ()* @query, void (i8*, i32, %struct._GimpParam*, i32*, %struct._GimpParam**)* @run }, align 8
@query.args = internal constant [5 x %struct._GimpParamDef] [%struct._GimpParamDef { i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.1, i32 0, i32 0) }, %struct._GimpParamDef { i32 13, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0) }, %struct._GimpParamDef { i32 16, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i32 0, i32 0) }, %struct._GimpParamDef { i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i32 0, i32 0) }, %struct._GimpParamDef { i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i32 0, i32 0) }], align 16
@.str = private unnamed_addr constant [9 x i8] c"run-mode\00", align 1
@.str.1 = private unnamed_addr constant [61 x i8] c"The run mode { RUN-INTERACTIVE (0), RUN-NONINTERACTIVE (1) }\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"image\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"Input image (unused)\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"drawable\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"Input drawable\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"direction\00", align 1
@.str.7 = private unnamed_addr constant [24 x i8] c"Light direction (0 - 3)\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c"depth\00", align 1
@.str.9 = private unnamed_addr constant [23 x i8] c"Texture depth (1 - 50)\00", align 1
@.str.10 = private unnamed_addr constant [21 x i8] c"plug-in-apply-canvas\00", align 1
@.str.11 = private unnamed_addr constant [34 x i8] c"Add a canvas texture to the image\00", align 1
@.str.12 = private unnamed_addr constant [60 x i8] c"This function applies a canvas texture map to the drawable.\00", align 1
@.str.13 = private unnamed_addr constant [21 x i8] c"Karl-Johan Andersson\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"1997\00", align 1
@.str.15 = private unnamed_addr constant [17 x i8] c"_Apply Canvas...\00", align 1
@.str.16 = private unnamed_addr constant [12 x i8] c"RGB*, GRAY*\00", align 1
@.str.17 = private unnamed_addr constant [25 x i8] c"<Image>/Filters/Artistic\00", align 1
@run.values = internal global [1 x %struct._GimpParam] zeroinitializer, align 16
@.str.18 = private unnamed_addr constant [20 x i8] c"gimp20-std-plug-ins\00", align 1
@.str.19 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@svals = internal global %struct.StrucValues { i32 0, i32 4 }, align 4
@.str.20 = private unnamed_addr constant [16 x i8] c"Applying canvas\00", align 1
@.str.21 = private unnamed_addr constant [13 x i8] c"apply-canvas\00", align 1
@.str.22 = private unnamed_addr constant [13 x i8] c"Apply Canvas\00", align 1
@.str.23 = private unnamed_addr constant [18 x i8] c"gimp-apply-canvas\00", align 1
@.str.24 = private unnamed_addr constant [11 x i8] c"gtk-cancel\00", align 1
@.str.25 = private unnamed_addr constant [7 x i8] c"gtk-ok\00", align 1
@.str.26 = private unnamed_addr constant [12 x i8] c"invalidated\00", align 1
@.str.27 = private unnamed_addr constant [10 x i8] c"Direction\00", align 1
@.str.28 = private unnamed_addr constant [11 x i8] c"_Top-right\00", align 1
@.str.29 = private unnamed_addr constant [10 x i8] c"Top-_left\00", align 1
@.str.30 = private unnamed_addr constant [13 x i8] c"_Bottom-left\00", align 1
@.str.31 = private unnamed_addr constant [14 x i8] c"Bottom-_right\00", align 1
@.str.32 = private unnamed_addr constant [8 x i8] c"toggled\00", align 1
@.str.33 = private unnamed_addr constant [8 x i8] c"_Depth:\00", align 1
@.str.34 = private unnamed_addr constant [14 x i8] c"value-changed\00", align 1
@sdata = internal constant [16384 x i8] calign 16

; Function Attrs: nounwind uwtable
define internal void @query() #0 {
entry:
  call void @gimp_install_procedure(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.16, i32 0, i32 0), i32 1, i32 5, i32 0, %struct._GimpParamDef* getelementptr inbounds ([5 x %struct._GimpParamDef], [5 x %struct._GimpParamDef]* @query.args, i32 0, i32 0), %struct._GimpParamDef* null)
  %call = call i32 @gimp_plugin_menu_register(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.17, i32 0, i32 0))
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @run(i8* %name, i32 %nparams, %struct._GimpParam* %param, i32* %nreturn_vals, %struct._GimpParam** %return_vals) #0 {
entry:
  %name.addr = alloca i8*, align 8
  %nparams.addr = alloca i32, align 4
  %param.addr = alloca %struct._GimpParam*, align 8
  %nreturn_vals.addr = alloca i32*, align 8
  %return_vals.addr = alloca %struct._GimpParam**, align 8
  %drawable = alloca %struct._GimpDrawable*, align 8
  %run_mode = alloca i32, align 4
  %status = alloca i32, align 4
  store i8* %name, i8** %name.addr, align 8
  store i32 %nparams, i32* %nparams.addr, align 4
  store %struct._GimpParam* %param, %struct._GimpParam** %param.addr, align 8
  store i32* %nreturn_vals, i32** %nreturn_vals.addr, align 8
  store %struct._GimpParam** %return_vals, %struct._GimpParam*** %return_vals.addr, align 8
  store i32 3, i32* %status, align 4
  %0 = load %struct._GimpParam*, %struct._GimpParam** %param.addr, align 8
  %arrayidx = getelementptr inbounds %struct._GimpParam, %struct._GimpParam* %0, i64 0
  %data = getelementptr inbounds %struct._GimpParam, %struct._GimpParam* %arrayidx, i32 0, i32 1
  %d_int32 = bitcast %union._GimpParamData* %data to i32*
  %1 = load i32, i32* %d_int32, align 4
  store i32 %1, i32* %run_mode, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i8* @gimp_locale_directory() #5
  %call1 = call i8* @bindtextdomain(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.18, i32 0, i32 0), i8* %call) #4
  %call2 = call i8* @bind_textdomain_codeset(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i32 0, i32 0)) #4
  %call3 = call i8* @textdomain(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.18, i32 0, i32 0)) #4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32*, i32** %nreturn_vals.addr, align 8
  store i32 1, i32* %2, align 4
  %3 = load %struct._GimpParam**, %struct._GimpParam*** %return_vals.addr, align 8
  store %struct._GimpParam* getelementptr inbounds ([1 x %struct._GimpParam], [1 x %struct._GimpParam]* @run.values, i32 0, i32 0), %struct._GimpParam** %3, align 8
  store i32 21, i32* getelementptr inbounds ([1 x %struct._GimpParam], [1 x %struct._GimpParam]* @run.values, i32 0, i64 0, i32 0), align 4
  %4 = load i32, i32* %status, align 4
  store i32 %4, i32* bitcast (%union._GimpParamData* getelementptr inbounds ([1 x %struct._GimpParam], [1 x %struct._GimpParam]* @run.values, i32 0, i64 0, i32 1) to i32*), align 4
  %5 = load %struct._GimpParam*, %struct._GimpParam** %param.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct._GimpParam, %struct._GimpParam* %5, i64 2
  %data5 = getelementptr inbounds %struct._GimpParam, %struct._GimpParam* %arrayidx4, i32 0, i32 1
  %d_drawable = bitcast %union._GimpParamData* %data5 to i32*
  %6 = load i32, i32* %d_drawable, align 4
  %call6 = call %struct._GimpDrawable* @gimp_drawable_get(i32 %6)
  store %struct._GimpDrawable* %call6, %struct._GimpDrawable** %drawable, align 8
  %7 = load i32, i32* %run_mode, align 4
  switch i32 %7, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.9
    i32 2, label %sw.bb.27
  ]

sw.bb:                                            ; preds = %do.end
  %call7 = call i32 @gimp_procedural_db_get_data(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.10, i32 0, i32 0), i8* bitcast (%struct.StrucValues* @svals to i8*))
  %8 = load %struct._GimpDrawable*, %struct._GimpDrawable** %drawable, align 8
  %call8 = call i32 @struc_dialog(%struct._GimpDrawable* %8)
  %tobool = icmp ne i32 %call8, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %sw.bb
  %9 = load %struct._GimpDrawable*, %struct._GimpDrawable** %drawable, align 8
  call void @gimp_drawable_detach(%struct._GimpDrawable* %9)
  br label %return

if.end:                                           ; preds = %sw.bb
  br label %sw.epilog

sw.bb.9:                                          ; preds = %do.end
  %10 = load i32, i32* %nparams.addr, align 4
  %cmp = icmp ne i32 %10, 5
  br i1 %cmp, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %sw.bb.9
  store i32 1, i32* %status, align 4
  br label %if.end.26

if.else:                                          ; preds = %sw.bb.9
  %11 = load %struct._GimpParam*, %struct._GimpParam** %param.addr, align 8
  %arrayidx11 = getelementptr inbounds %struct._GimpParam, %struct._GimpParam* %11, i64 3
  %data12 = getelementptr inbounds %struct._GimpParam, %struct._GimpParam* %arrayidx11, i32 0, i32 1
  %d_int3213 = bitcast %union._GimpParamData* %data12 to i32*
  %12 = load i32, i32* %d_int3213, align 4
  store i32 %12, i32* getelementptr inbounds (%struct.StrucValues, %struct.StrucValues* @svals, i32 0, i32 0), align 4
  %13 = load %struct._GimpParam*, %struct._GimpParam** %param.addr, align 8
  %arrayidx14 = getelementptr inbounds %struct._GimpParam, %struct._GimpParam* %13, i64 4
  %data15 = getelementptr inbounds %struct._GimpParam, %struct._GimpParam* %arrayidx14, i32 0, i32 1
  %d_int3216 = bitcast %union._GimpParamData* %data15 to i32*
  %14 = load i32, i32* %d_int3216, align 4
  store i32 %14, i32* getelementptr inbounds (%struct.StrucValues, %struct.StrucValues* @svals, i32 0, i32 1), align 4
  %15 = load i32, i32* getelementptr inbounds (%struct.StrucValues, %struct.StrucValues* @svals, i32 0, i32 0), align 4
  %cmp17 = icmp slt i32 %15, 0
  br i1 %cmp17, label %if.then.19, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %16 = load i32, i32* getelementptr inbounds (%struct.StrucValues, %struct.StrucValues* @svals, i32 0, i32 0), align 4
  %cmp18 = icmp sgt i32 %16, 4
  br i1 %cmp18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %lor.lhs.false, %if.else
  store i32 1, i32* %status, align 4
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.19, %lor.lhs.false
  %17 = load i32, i32* getelementptr inbounds (%struct.StrucValues, %struct.StrucValues* @svals, i32 0, i32 1), align 4
  %cmp21 = icmp slt i32 %17, 1
  br i1 %cmp21, label %if.then.24, label %lor.lhs.false.22

lor.lhs.false.22:                                 ; preds = %if.end.20
  %18 = load i32, i32* getelementptr inbounds (%struct.StrucValues, %struct.StrucValues* @svals, i32 0, i32 1), align 4
  %cmp23 = icmp sgt i32 %18, 50
  br i1 %cmp23, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %lor.lhs.false.22, %if.end.20
  store i32 1, i32* %status, align 4
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.24, %lor.lhs.false.22
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %if.then.10
  br label %sw.epilog

sw.bb.27:                                         ; preds = %do.end
  %call28 = call i32 @gimp_procedural_db_get_data(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.10, i32 0, i32 0), i8* bitcast (%struct.StrucValues* @svals to i8*))
  br label %sw.epilog

sw.default:                                       ; preds = %do.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.27, %if.end.26, %if.end
  %19 = load i32, i32* %status, align 4
  %cmp29 = icmp eq i32 %19, 3
  br i1 %cmp29, label %if.then.30, label %if.end.53

if.then.30:                                       ; preds = %sw.epilog
  %20 = load %struct._GimpDrawable*, %struct._GimpDrawable** %drawable, align 8
  %drawable_id = getelementptr inbounds %struct._GimpDrawable, %struct._GimpDrawable* %20, i32 0, i32 0
  %21 = load i32, i32* %drawable_id, align 4
  %call31 = call i32 @gimp_drawable_is_rgb(i32 %21)
  %tobool32 = icmp ne i32 %call31, 0
  br i1 %tobool32, label %if.then.37, label %lor.lhs.false.33

lor.lhs.false.33:                                 ; preds = %if.then.30
  %22 = load %struct._GimpDrawable*, %struct._GimpDrawable** %drawable, align 8
  %drawable_id34 = getelementptr inbounds %struct._GimpDrawable, %struct._GimpDrawable* %22, i32 0, i32 0
  %23 = load i32, i32* %drawable_id34, align 4
  %call35 = call i32 @gimp_drawable_is_gray(i32 %23)
  %tobool36 = icmp ne i32 %call35, 0
  br i1 %tobool36, label %if.then.37, label %if.else.51

if.then.37:                                       ; preds = %lor.lhs.false.33, %if.then.30
  %call38 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i32 0, i32 0)) #4
  %call39 = call i32 @gimp_progress_init(i8* %call38)
  %24 = load %struct._GimpDrawable*, %struct._GimpDrawable** %drawable, align 8
  %width = getelementptr inbounds %struct._GimpDrawable, %struct._GimpDrawable* %24, i32 0, i32 1
  %25 = load i32, i32* %width, align 4
  %call40 = call i32 @gimp_tile_width() #5
  %div = udiv i32 %25, %call40
  %add = add i32 %div, 1
  %mul = mul i32 2, %add
  %conv = zext i32 %mul to i64
  call void @gimp_tile_cache_ntiles(i64 %conv)
  %26 = load %struct._GimpDrawable*, %struct._GimpDrawable** %drawable, align 8
  call void @strucpi(%struct._GimpDrawable* %26, %struct._GimpPreview* null)
  %27 = load i32, i32* %run_mode, align 4
  %cmp41 = icmp ne i32 %27, 1
  br i1 %cmp41, label %if.then.43, label %if.end.45

if.then.43:                                       ; preds = %if.then.37
  %call44 = call i32 @gimp_displays_flush()
  br label %if.end.45

if.end.45:                                        ; preds = %if.then.43, %if.then.37
  %28 = load i32, i32* %run_mode, align 4
  %cmp46 = icmp eq i32 %28, 0
  br i1 %cmp46, label %if.then.48, label %if.end.50

if.then.48:                                       ; preds = %if.end.45
  %call49 = call i32 @gimp_procedural_db_set_data(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.10, i32 0, i32 0), i8* bitcast (%struct.StrucValues* @svals to i8*), i32 8)
  br label %if.end.50

if.end.50:                                        ; preds = %if.then.48, %if.end.45
  br label %if.end.52

if.else.51:                                       ; preds = %lor.lhs.false.33
  store i32 0, i32* %status, align 4
  br label %if.end.52

if.end.52:                                        ; preds = %if.else.51, %if.end.50
  br label %if.end.53

if.end.53:                                        ; preds = %if.end.52, %sw.epilog
  %29 = load i32, i32* %status, align 4
  store i32 %29, i32* bitcast (%union._GimpParamData* getelementptr inbounds ([1 x %struct._GimpParam], [1 x %struct._GimpParam]* @run.values, i32 0, i64 0, i32 1) to i32*), align 4
  %30 = load %struct._GimpDrawable*, %struct._GimpDrawable** %drawable, align 8
  call void @gimp_drawable_detach(%struct._GimpDrawable* %30)
  br label %return

return:                                           ; preds = %if.end.53, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  store i32 0, i32* %retval
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 8
  %0 = load i32, i32* %argc.addr, align 4
  %1 = load i8**, i8*** %argv.addr, align 8
  %call = call i32 @gimp_main(%struct._GimpPlugInInfo* @PLUG_IN_INFO, i32 %0, i8** %1)
  ret i32 %call
}

declare i32 @gimp_main(%struct._GimpPlugInInfo*, i32, i8**) #1

declare void @gimp_install_procedure(i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, %struct._GimpParamDef*, %struct._GimpParamDef*) #1

declare i32 @gimp_plugin_menu_register(i8*, i8*) #1

; Function Attrs: nounwind
declare i8* @bindtextdomain(i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i8* @gimp_locale_directory() #3

; Function Attrs: nounwind
declare i8* @bind_textdomain_codeset(i8*, i8*) #2

; Function Attrs: nounwind
declare i8* @textdomain(i8*) #2

declare %struct._GimpDrawable* @gimp_drawable_get(i32) #1

declare i32 @gimp_procedural_db_get_data(i8*, i8*) #1

; Function Attrs: nounwind uwtable
define internal i32 @struc_dialog(%struct._GimpDrawable* %drawable) #0 {
entry:
  %drawable.addr = alloca %struct._GimpDrawable*, align 8
  %dialog = alloca %struct._GtkWidget*, align 8
  %main_vbox = alloca %struct._GtkWidget*, align 8
  %preview = alloca %struct._GtkWidget*, align 8
  %frame = alloca %struct._GtkWidget*, align 8
  %table = alloca %struct._GtkWidget*, align 8
  %radio1 = alloca %struct._GtkWidget*, align 8
  %radio2 = alloca %struct._GtkWidget*, align 8
  %radio3 = alloca %struct._GtkWidget*, align 8
  %radio4 = alloca %struct._GtkWidget*, align 8
  %adj = alloca %struct._GtkObject*, align 8
  %run = alloca i32, align 4
  store %struct._GimpDrawable* %drawable, %struct._GimpDrawable** %drawable.addr, align 8
  call void @gimp_ui_init(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.21, i32 0, i32 0), i32 0)
  %call = call i8* @gettext(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.22, i32 0, i32 0)) #4
  %call1 = call %struct._GtkWidget* (i8*, i8*, %struct._GtkWidget*, i32, void (i8*, i8*)*, i8*, ...) @gimp_dialog_new(i8* %call, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.23, i32 0, i32 0), %struct._GtkWidget* null, i32 0, void (i8*, i8*)* @gimp_standard_help_func, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.24, i32 0, i32 0), i32 -6, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.25, i32 0, i32 0), i32 -5, i8* null)
  store %struct._GtkWidget* %call1, %struct._GtkWidget** %dialog, align 8
  %0 = load %struct._GtkWidget*, %struct._GtkWidget** %dialog, align 8
  %1 = bitcast %struct._GtkWidget* %0 to %struct._GTypeInstance*
  %call2 = call i64 @gtk_dialog_get_type() #5
  %call3 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %1, i64 %call2)
  %2 = bitcast %struct._GTypeInstance* %call3 to %struct._GtkDialog*
  call void (%struct._GtkDialog*, i32, ...) @gtk_dialog_set_alternative_button_order(%struct._GtkDialog* %2, i32 -5, i32 -6, i32 -1)
  %3 = load %struct._GtkWidget*, %struct._GtkWidget** %dialog, align 8
  %4 = bitcast %struct._GtkWidget* %3 to %struct._GTypeInstance*
  %call4 = call i64 @gtk_window_get_type() #5
  %call5 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %4, i64 %call4)
  %5 = bitcast %struct._GTypeInstance* %call5 to %struct._GtkWindow*
  call void @gimp_window_set_transient(%struct._GtkWindow* %5)
  %call6 = call %struct._GtkWidget* @gtk_box_new(i32 1, i32 12)
  store %struct._GtkWidget* %call6, %struct._GtkWidget** %main_vbox, align 8
  %6 = load %struct._GtkWidget*, %struct._GtkWidget** %main_vbox, align 8
  %7 = bitcast %struct._GtkWidget* %6 to %struct._GTypeInstance*
  %call7 = call i64 @gtk_container_get_type() #5
  %call8 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %7, i64 %call7)
  %8 = bitcast %struct._GTypeInstance* %call8 to %struct._GtkContainer*
  call void @gtk_container_set_border_width(%struct._GtkContainer* %8, i32 12)
  %9 = load %struct._GtkWidget*, %struct._GtkWidget** %dialog, align 8
  %10 = bitcast %struct._GtkWidget* %9 to %struct._GTypeInstance*
  %call9 = call i64 @gtk_dialog_get_type() #5
  %call10 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %10, i64 %call9)
  %11 = bitcast %struct._GTypeInstance* %call10 to %struct._GtkDialog*
  %call11 = call %struct._GtkWidget* @gtk_dialog_get_content_area(%struct._GtkDialog* %11)
  %12 = bitcast %struct._GtkWidget* %call11 to %struct._GTypeInstance*
  %call12 = call i64 @gtk_box_get_type() #5
  %call13 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %12, i64 %call12)
  %13 = bitcast %struct._GTypeInstance* %call13 to %struct._GtkBox*
  %14 = load %struct._GtkWidget*, %struct._GtkWidget** %main_vbox, align 8
  call void @gtk_box_pack_start(%struct._GtkBox* %13, %struct._GtkWidget* %14, i32 1, i32 1, i32 0)
  %15 = load %struct._GtkWidget*, %struct._GtkWidget** %main_vbox, align 8
  call void @gtk_widget_show(%struct._GtkWidget* %15)
  %16 = load %struct._GimpDrawable*, %struct._GimpDrawable** %drawable.addr, align 8
  %call14 = call %struct._GtkWidget* @gimp_drawable_preview_new(%struct._GimpDrawable* %16, i32* null)
  store %struct._GtkWidget* %call14, %struct._GtkWidget** %preview, align 8
  %17 = load %struct._GtkWidget*, %struct._GtkWidget** %main_vbox, align 8
  %18 = bitcast %struct._GtkWidget* %17 to %struct._GTypeInstance*
  %call15 = call i64 @gtk_box_get_type() #5
  %call16 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %18, i64 %call15)
  %19 = bitcast %struct._GTypeInstance* %call16 to %struct._GtkBox*
  %20 = load %struct._GtkWidget*, %struct._GtkWidget** %preview, align 8
  call void @gtk_box_pack_start(%struct._GtkBox* %19, %struct._GtkWidget* %20, i32 1, i32 1, i32 0)
  %21 = load %struct._GtkWidget*, %struct._GtkWidget** %preview, align 8
  call void @gtk_widget_show(%struct._GtkWidget* %21)
  %22 = load %struct._GtkWidget*, %struct._GtkWidget** %preview, align 8
  %23 = bitcast %struct._GtkWidget* %22 to i8*
  %24 = load %struct._GimpDrawable*, %struct._GimpDrawable** %drawable.addr, align 8
  %25 = bitcast %struct._GimpDrawable* %24 to i8*
  %call17 = call i64 @g_signal_connect_data(i8* %23, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.26, i32 0, i32 0), void ()* bitcast (void (%struct._GimpDrawable*, %struct._GimpPreview*)* @strucpi to void ()*), i8* %25, void (i8*, %struct._GClosure*)* null, i32 2)
  %call18 = call i8* @gettext(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.27, i32 0, i32 0)) #4
  %26 = load i32, i32* getelementptr inbounds (%struct.StrucValues, %struct.StrucValues* @svals, i32 0, i32 0), align 4
  %call19 = call i8* @gettext(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.28, i32 0, i32 0)) #4
  %call20 = call i8* @gettext(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.29, i32 0, i32 0)) #4
  %call21 = call i8* @gettext(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.30, i32 0, i32 0)) #4
  %call22 = call i8* @gettext(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.31, i32 0, i32 0)) #4
  %call23 = call %struct._GtkWidget* (i32, i8*, void ()*, i8*, i32, ...) @gimp_int_radio_group_new(i32 1, i8* %call18, void ()* bitcast (void (%struct._GtkWidget*, i8*)* @gimp_radio_button_update to void ()*), i8* bitcast (%struct.StrucValues* @svals to i8*), i32 %26, i8* %call19, i32 0, %struct._GtkWidget** %radio1, i8* %call20, i32 1, %struct._GtkWidget** %radio2, i8* %call21, i32 2, %struct._GtkWidget** %radio3, i8* %call22, i32 3, %struct._GtkWidget** %radio4, i8* null)
  store %struct._GtkWidget* %call23, %struct._GtkWidget** %frame, align 8
  %27 = load %struct._GtkWidget*, %struct._GtkWidget** %main_vbox, align 8
  %28 = bitcast %struct._GtkWidget* %27 to %struct._GTypeInstance*
  %call24 = call i64 @gtk_box_get_type() #5
  %call25 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %28, i64 %call24)
  %29 = bitcast %struct._GTypeInstance* %call25 to %struct._GtkBox*
  %30 = load %struct._GtkWidget*, %struct._GtkWidget** %frame, align 8
  call void @gtk_box_pack_start(%struct._GtkBox* %29, %struct._GtkWidget* %30, i32 0, i32 0, i32 0)
  %31 = load %struct._GtkWidget*, %struct._GtkWidget** %frame, align 8
  call void @gtk_widget_show(%struct._GtkWidget* %31)
  %32 = load %struct._GtkWidget*, %struct._GtkWidget** %radio1, align 8
  %33 = bitcast %struct._GtkWidget* %32 to i8*
  %34 = load %struct._GtkWidget*, %struct._GtkWidget** %preview, align 8
  %35 = bitcast %struct._GtkWidget* %34 to i8*
  %call26 = call i64 @g_signal_connect_data(i8* %33, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.32, i32 0, i32 0), void ()* bitcast (void (%struct._GimpPreview*)* @gimp_preview_invalidate to void ()*), i8* %35, void (i8*, %struct._GClosure*)* null, i32 2)
  %36 = load %struct._GtkWidget*, %struct._GtkWidget** %radio2, align 8
  %37 = bitcast %struct._GtkWidget* %36 to i8*
  %38 = load %struct._GtkWidget*, %struct._GtkWidget** %preview, align 8
  %39 = bitcast %struct._GtkWidget* %38 to i8*
  %call27 = call i64 @g_signal_connect_data(i8* %37, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.32, i32 0, i32 0), void ()* bitcast (void (%struct._GimpPreview*)* @gimp_preview_invalidate to void ()*), i8* %39, void (i8*, %struct._GClosure*)* null, i32 2)
  %40 = load %struct._GtkWidget*, %struct._GtkWidget** %radio3, align 8
  %41 = bitcast %struct._GtkWidget* %40 to i8*
  %42 = load %struct._GtkWidget*, %struct._GtkWidget** %preview, align 8
  %43 = bitcast %struct._GtkWidget* %42 to i8*
  %call28 = call i64 @g_signal_connect_data(i8* %41, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.32, i32 0, i32 0), void ()* bitcast (void (%struct._GimpPreview*)* @gimp_preview_invalidate to void ()*), i8* %43, void (i8*, %struct._GClosure*)* null, i32 2)
  %44 = load %struct._GtkWidget*, %struct._GtkWidget** %radio4, align 8
  %45 = bitcast %struct._GtkWidget* %44 to i8*
  %46 = load %struct._GtkWidget*, %struct._GtkWidget** %preview, align 8
  %47 = bitcast %struct._GtkWidget* %46 to i8*
  %call29 = call i64 @g_signal_connect_data(i8* %45, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.32, i32 0, i32 0), void ()* bitcast (void (%struct._GimpPreview*)* @gimp_preview_invalidate to void ()*), i8* %47, void (i8*, %struct._GClosure*)* null, i32 2)
  %call30 = call %struct._GtkWidget* @gtk_table_new(i32 1, i32 3, i32 0)
  store %struct._GtkWidget* %call30, %struct._GtkWidget** %table, align 8
  %48 = load %struct._GtkWidget*, %struct._GtkWidget** %table, align 8
  %49 = bitcast %struct._GtkWidget* %48 to %struct._GTypeInstance*
  %call31 = call i64 @gtk_table_get_type() #5
  %call32 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %49, i64 %call31)
  %50 = bitcast %struct._GTypeInstance* %call32 to %struct._GtkTable*
  call void @gtk_table_set_col_spacings(%struct._GtkTable* %50, i32 6)
  %51 = load %struct._GtkWidget*, %struct._GtkWidget** %main_vbox, align 8
  %52 = bitcast %struct._GtkWidget* %51 to %struct._GTypeInstance*
  %call33 = call i64 @gtk_box_get_type() #5
  %call34 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %52, i64 %call33)
  %53 = bitcast %struct._GTypeInstance* %call34 to %struct._GtkBox*
  %54 = load %struct._GtkWidget*, %struct._GtkWidget** %table, align 8
  call void @gtk_box_pack_start(%struct._GtkBox* %53, %struct._GtkWidget* %54, i32 0, i32 0, i32 0)
  %55 = load %struct._GtkWidget*, %struct._GtkWidget** %table, align 8
  call void @gtk_widget_show(%struct._GtkWidget* %55)
  %56 = load %struct._GtkWidget*, %struct._GtkWidget** %table, align 8
  %57 = bitcast %struct._GtkWidget* %56 to %struct._GTypeInstance*
  %call35 = call i64 @gtk_table_get_type() #5
  %call36 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %57, i64 %call35)
  %58 = bitcast %struct._GTypeInstance* %call36 to %struct._GtkTable*
  %call37 = call i8* @gettext(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.33, i32 0, i32 0)) #4
  %59 = load i32, i32* getelementptr inbounds (%struct.StrucValues, %struct.StrucValues* @svals, i32 0, i32 1), align 4
  %conv = sitofp i32 %59 to double
  %call38 = call %struct._GtkObject* @gimp_scale_entry_new(%struct._GtkTable* %58, i32 0, i32 0, i8* %call37, i32 100, i32 0, double %conv, double 1.000000e+00, double 5.000000e+01, double 1.000000e+00, double 5.000000e+00, i32 0, i32 1, double 0.000000e+00, double 0.000000e+00, i8* null, i8* null)
  store %struct._GtkObject* %call38, %struct._GtkObject** %adj, align 8
  %60 = load %struct._GtkObject*, %struct._GtkObject** %adj, align 8
  %61 = bitcast %struct._GtkObject* %60 to i8*
  %call39 = call i64 @g_signal_connect_data(i8* %61, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.34, i32 0, i32 0), void ()* bitcast (void (%struct._GtkAdjustment*, i8*)* @gimp_int_adjustment_update to void ()*), i8* bitcast (i32* getelementptr inbounds (%struct.StrucValues, %struct.StrucValues* @svals, i32 0, i32 1) to i8*), void (i8*, %struct._GClosure*)* null, i32 0)
  %62 = load %struct._GtkObject*, %struct._GtkObject** %adj, align 8
  %63 = bitcast %struct._GtkObject* %62 to i8*
  %64 = load %struct._GtkWidget*, %struct._GtkWidget** %preview, align 8
  %65 = bitcast %struct._GtkWidget* %64 to i8*
  %call40 = call i64 @g_signal_connect_data(i8* %63, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.34, i32 0, i32 0), void ()* bitcast (void (%struct._GimpPreview*)* @gimp_preview_invalidate to void ()*), i8* %65, void (i8*, %struct._GClosure*)* null, i32 2)
  %66 = load %struct._GtkWidget*, %struct._GtkWidget** %dialog, align 8
  call void @gtk_widget_show(%struct._GtkWidget* %66)
  %67 = load %struct._GtkWidget*, %struct._GtkWidget** %dialog, align 8
  %68 = bitcast %struct._GtkWidget* %67 to %struct._GTypeInstance*
  %call41 = call i64 @gimp_dialog_get_type() #5
  %call42 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %68, i64 %call41)
  %69 = bitcast %struct._GTypeInstance* %call42 to %struct._GimpDialog*
  %call43 = call i32 @gimp_dialog_run(%struct._GimpDialog* %69)
  %cmp = icmp eq i32 %call43, -5
  %conv44 = zext i1 %cmp to i32
  store i32 %conv44, i32* %run, align 4
  %70 = load %struct._GtkWidget*, %struct._GtkWidget** %dialog, align 8
  call void @gtk_widget_destroy(%struct._GtkWidget* %70)
  %71 = load i32, i32* %run, align 4
  ret i32 %71
}

declare void @gimp_drawable_detach(%struct._GimpDrawable*) #1

declare i32 @gimp_drawable_is_rgb(i32) #1

declare i32 @gimp_drawable_is_gray(i32) #1

declare i32 @gimp_progress_init(i8*) #1

; Function Attrs: nounwind
declare i8* @gettext(i8*) #2

declare void @gimp_tile_cache_ntiles(i64) #1

; Function Attrs: nounwind readnone
declare i32 @gimp_tile_width() #3

; Function Attrs: nounwind uwtable
define internal void @strucpi(%struct._GimpDrawable* %drawable, %struct._GimpPreview* %preview) #0 {
entry:
  %drawable.addr = alloca %struct._GimpDrawable*, align 8
  %preview.addr = alloca %struct._GimpPreview*, align 8
  %srcPR = alloca %struct._GimpPixelRgn, align 8
  %destPR = alloca %struct._GimpPixelRgn, align 8
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  %bytes = alloca i32, align 4
  %dest = alloca i8*, align 8
  %d = alloca i8*, align 8
  %cur_row = alloca i8*, align 8
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %rrow = alloca i32, align 4
  %rcol = alloca i32, align 4
  %x1 = alloca i32, align 4
  %y1 = alloca i32, align 4
  %y2 = alloca i32, align 4
  %varde = alloca i32, align 4
  %xm = alloca i32, align 4
  %ym = alloca i32, align 4
  %offs = alloca i32, align 4
  %mult = alloca float, align 4
  %preview_buffer = alloca i8*, align 8
  store %struct._GimpDrawable* %drawable, %struct._GimpDrawable** %drawable.addr, align 8
  store %struct._GimpPreview* %preview, %struct._GimpPreview** %preview.addr, align 8
  store i8* null, i8** %preview_buffer, align 8
  %0 = load %struct._GimpPreview*, %struct._GimpPreview** %preview.addr, align 8
  %tobool = icmp ne %struct._GimpPreview* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct._GimpPreview*, %struct._GimpPreview** %preview.addr, align 8
  call void @gimp_preview_get_position(%struct._GimpPreview* %1, i32* %x1, i32* %y1)
  %2 = load %struct._GimpPreview*, %struct._GimpPreview** %preview.addr, align 8
  call void @gimp_preview_get_size(%struct._GimpPreview* %2, i32* %width, i32* %height)
  %3 = load i32, i32* %y1, align 4
  %4 = load i32, i32* %height, align 4
  %add = add nsw i32 %3, %4
  store i32 %add, i32* %y2, align 4
  br label %if.end.4

if.else:                                          ; preds = %entry
  %5 = load %struct._GimpDrawable*, %struct._GimpDrawable** %drawable.addr, align 8
  %drawable_id = getelementptr inbounds %struct._GimpDrawable, %struct._GimpDrawable* %5, i32 0, i32 0
  %6 = load i32, i32* %drawable_id, align 4
  %call = call i32 @gimp_drawable_mask_intersect(i32 %6, i32* %x1, i32* %y1, i32* %width, i32* %height)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end, label %if.then.2

if.then.2:                                        ; preds = %if.else
  br label %return

if.end:                                           ; preds = %if.else
  %7 = load i32, i32* %y1, align 4
  %8 = load i32, i32* %height, align 4
  %add3 = add nsw i32 %7, %8
  store i32 %add3, i32* %y2, align 4
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %if.then
  %9 = load %struct._GimpDrawable*, %struct._GimpDrawable** %drawable.addr, align 8
  %bpp = getelementptr inbounds %struct._GimpDrawable, %struct._GimpDrawable* %9, i32 0, i32 3
  %10 = load i32, i32* %bpp, align 4
  store i32 %10, i32* %bytes, align 4
  %11 = load i32, i32* %width, align 4
  %12 = load i32, i32* %bytes, align 4
  %mul = mul nsw i32 %11, %12
  %conv = sext i32 %mul to i64
  %call5 = call noalias i8* @g_malloc_n(i64 %conv, i64 1)
  store i8* %call5, i8** %cur_row, align 8
  %13 = load i32, i32* %width, align 4
  %14 = load i32, i32* %bytes, align 4
  %mul6 = mul nsw i32 %13, %14
  %conv7 = sext i32 %mul6 to i64
  %call8 = call noalias i8* @g_malloc_n(i64 %conv7, i64 1)
  store i8* %call8, i8** %dest, align 8
  %15 = load %struct._GimpDrawable*, %struct._GimpDrawable** %drawable.addr, align 8
  %16 = load i32, i32* %x1, align 4
  %17 = load i32, i32* %y1, align 4
  %18 = load i32, i32* %width, align 4
  %19 = load i32, i32* %height, align 4
  call void @gimp_pixel_rgn_init(%struct._GimpPixelRgn* %srcPR, %struct._GimpDrawable* %15, i32 %16, i32 %17, i32 %18, i32 %19, i32 0, i32 0)
  %20 = load %struct._GimpPreview*, %struct._GimpPreview** %preview.addr, align 8
  %tobool9 = icmp ne %struct._GimpPreview* %20, null
  br i1 %tobool9, label %if.then.10, label %if.else.15

if.then.10:                                       ; preds = %if.end.4
  %21 = load i32, i32* %width, align 4
  %22 = load i32, i32* %height, align 4
  %mul11 = mul nsw i32 %21, %22
  %23 = load i32, i32* %bytes, align 4
  %mul12 = mul nsw i32 %mul11, %23
  %conv13 = sext i32 %mul12 to i64
  %call14 = call noalias i8* @g_malloc_n(i64 %conv13, i64 1)
  store i8* %call14, i8** %preview_buffer, align 8
  br label %if.end.16

if.else.15:                                       ; preds = %if.end.4
  %24 = load %struct._GimpDrawable*, %struct._GimpDrawable** %drawable.addr, align 8
  %25 = load i32, i32* %x1, align 4
  %26 = load i32, i32* %y1, align 4
  %27 = load i32, i32* %width, align 4
  %28 = load i32, i32* %height, align 4
  call void @gimp_pixel_rgn_init(%struct._GimpPixelRgn* %destPR, %struct._GimpDrawable* %24, i32 %25, i32 %26, i32 %27, i32 %28, i32 1, i32 1)
  br label %if.end.16

if.end.16:                                        ; preds = %if.else.15, %if.then.10
  %29 = load i32, i32* getelementptr inbounds (%struct.StrucValues, %struct.StrucValues* @svals, i32 0, i32 1), align 4
  %conv17 = sitofp i32 %29 to float
  %conv18 = fpext float %conv17 to double
  %mul19 = fmul double %conv18, 2.500000e-01
  %conv20 = fptrunc double %mul19 to float
  store float %conv20, float* %mult, align 4
  %30 = load i32, i32* getelementptr inbounds (%struct.StrucValues, %struct.StrucValues* @svals, i32 0, i32 0), align 4
  switch i32 %30, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.21
    i32 2, label %sw.bb.22
    i32 3, label %sw.bb.23
  ]

sw.bb:                                            ; preds = %if.end.16
  store i32 1, i32* %xm, align 4
  store i32 128, i32* %ym, align 4
  store i32 0, i32* %offs, align 4
  br label %sw.epilog

sw.bb.21:                                         ; preds = %if.end.16
  store i32 -1, i32* %xm, align 4
  store i32 128, i32* %ym, align 4
  store i32 127, i32* %offs, align 4
  br label %sw.epilog

sw.bb.22:                                         ; preds = %if.end.16
  store i32 128, i32* %xm, align 4
  store i32 1, i32* %ym, align 4
  store i32 0, i32* %offs, align 4
  br label %sw.epilog

sw.bb.23:                                         ; preds = %if.end.16
  store i32 128, i32* %xm, align 4
  store i32 -1, i32* %ym, align 4
  store i32 127, i32* %offs, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.16
  store i32 1, i32* %xm, align 4
  store i32 128, i32* %ym, align 4
  store i32 0, i32* %offs, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.23, %sw.bb.22, %sw.bb.21, %sw.bb
  store i32 0, i32* %rrow, align 4
  %31 = load i32, i32* %y1, align 4
  store i32 %31, i32* %row, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.199, %sw.epilog
  %32 = load i32, i32* %row, align 4
  %33 = load i32, i32* %y2, align 4
  %cmp = icmp slt i32 %32, %33
  br i1 %cmp, label %for.body, label %for.end.201

for.body:                                         ; preds = %for.cond
  %34 = load i8*, i8** %cur_row, align 8
  %35 = load i32, i32* %x1, align 4
  %36 = load i32, i32* %row, align 4
  %37 = load i32, i32* %width, align 4
  call void @gimp_pixel_rgn_get_row(%struct._GimpPixelRgn* %srcPR, i8* %34, i32 %35, i32 %36, i32 %37)
  %38 = load i8*, i8** %dest, align 8
  store i8* %38, i8** %d, align 8
  store i32 0, i32* %rcol, align 4
  %39 = load i32, i32* %bytes, align 4
  switch i32 %39, label %sw.epilog.178 [
    i32 1, label %sw.bb.25
    i32 2, label %sw.bb.25
    i32 3, label %sw.bb.66
    i32 4, label %sw.bb.66
  ]

sw.bb.25:                                         ; preds = %for.body, %for.body
  store i32 0, i32* %col, align 4
  br label %for.cond.26

for.cond.26:                                      ; preds = %for.inc, %sw.bb.25
  %40 = load i32, i32* %col, align 4
  %41 = load i32, i32* %width, align 4
  %42 = load i32, i32* %bytes, align 4
  %mul27 = mul nsw i32 %41, %42
  %cmp28 = icmp slt i32 %40, %mul27
  br i1 %cmp28, label %for.body.30, label %for.end

for.body.30:                                      ; preds = %for.cond.26
  %43 = load i32, i32* %col, align 4
  %idxprom = sext i32 %43 to i64
  %44 = load i8*, i8** %cur_row, align 8
  %arrayidx = getelementptr inbounds i8, i8* %44, i64 %idxprom
  %45 = load i8, i8* %arrayidx, align 1
  %conv31 = zext i8 %45 to i32
  %conv32 = sitofp i32 %conv31 to float
  %46 = load float, float* %mult, align 4
  %47 = load i32, i32* %rcol, align 4
  %48 = load i32, i32* %xm, align 4
  %mul33 = mul nsw i32 %47, %48
  %49 = load i32, i32* %rrow, align 4
  %50 = load i32, i32* %ym, align 4
  %mul34 = mul nsw i32 %49, %50
  %add35 = add nsw i32 %mul33, %mul34
  %51 = load i32, i32* %offs, align 4
  %add36 = add nsw i32 %add35, %51
  %idxprom37 = sext i32 %add36 to i64
  %arrayidx38 = getelementptr inbounds [16384 x i8], [16384 x i8]* @sdata, i32 0, i64 %idxprom37
  %52 = load i8, i8* %arrayidx38, align 1
  %conv39 = sext i8 %52 to i32
  %conv40 = sitofp i32 %conv39 to float
  %mul41 = fmul float %46, %conv40
  %add42 = fadd float %conv32, %mul41
  %conv43 = fptosi float %add42 to i32
  store i32 %conv43, i32* %varde, align 4
  %53 = load i32, i32* %varde, align 4
  %cmp44 = icmp sgt i32 %53, 255
  br i1 %cmp44, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body.30
  br label %cond.end.50

cond.false:                                       ; preds = %for.body.30
  %54 = load i32, i32* %varde, align 4
  %cmp46 = icmp slt i32 %54, 0
  br i1 %cmp46, label %cond.true.48, label %cond.false.49

cond.true.48:                                     ; preds = %cond.false
  br label %cond.end

cond.false.49:                                    ; preds = %cond.false
  %55 = load i32, i32* %varde, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false.49, %cond.true.48
  %cond = phi i32 [ 0, %cond.true.48 ], [ %55, %cond.false.49 ]
  br label %cond.end.50

cond.end.50:                                      ; preds = %cond.end, %cond.true
  %cond51 = phi i32 [ 255, %cond.true ], [ %cond, %cond.end ]
  %conv52 = trunc i32 %cond51 to i8
  %56 = load i8*, i8** %d, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %56, i32 1
  store i8* %incdec.ptr, i8** %d, align 8
  store i8 %conv52, i8* %56, align 1
  %57 = load i32, i32* %bytes, align 4
  %cmp53 = icmp eq i32 %57, 2
  br i1 %cmp53, label %if.then.55, label %if.end.60

if.then.55:                                       ; preds = %cond.end.50
  %58 = load i32, i32* %col, align 4
  %add56 = add nsw i32 %58, 1
  %idxprom57 = sext i32 %add56 to i64
  %59 = load i8*, i8** %cur_row, align 8
  %arrayidx58 = getelementptr inbounds i8, i8* %59, i64 %idxprom57
  %60 = load i8, i8* %arrayidx58, align 1
  %61 = load i8*, i8** %d, align 8
  %incdec.ptr59 = getelementptr inbounds i8, i8* %61, i32 1
  store i8* %incdec.ptr59, i8** %d, align 8
  store i8 %60, i8* %61, align 1
  br label %if.end.60

if.end.60:                                        ; preds = %if.then.55, %cond.end.50
  %62 = load i32, i32* %rcol, align 4
  %inc = add nsw i32 %62, 1
  store i32 %inc, i32* %rcol, align 4
  %63 = load i32, i32* %rcol, align 4
  %cmp61 = icmp eq i32 %63, 128
  br i1 %cmp61, label %if.then.63, label %if.end.64

if.then.63:                                       ; preds = %if.end.60
  store i32 0, i32* %rcol, align 4
  br label %if.end.64

if.end.64:                                        ; preds = %if.then.63, %if.end.60
  br label %for.inc

for.inc:                                          ; preds = %if.end.64
  %64 = load i32, i32* %bytes, align 4
  %65 = load i32, i32* %col, align 4
  %add65 = add nsw i32 %65, %64
  store i32 %add65, i32* %col, align 4
  br label %for.cond.26

for.end:                                          ; preds = %for.cond.26
  br label %sw.epilog.178

sw.bb.66:                                         ; preds = %for.body, %for.body
  store i32 0, i32* %col, align 4
  br label %for.cond.67

for.cond.67:                                      ; preds = %for.inc.175, %sw.bb.66
  %66 = load i32, i32* %col, align 4
  %67 = load i32, i32* %width, align 4
  %68 = load i32, i32* %bytes, align 4
  %mul68 = mul nsw i32 %67, %68
  %cmp69 = icmp slt i32 %66, %mul68
  br i1 %cmp69, label %for.body.71, label %for.end.177

for.body.71:                                      ; preds = %for.cond.67
  %69 = load i32, i32* %col, align 4
  %add72 = add nsw i32 %69, 0
  %idxprom73 = sext i32 %add72 to i64
  %70 = load i8*, i8** %cur_row, align 8
  %arrayidx74 = getelementptr inbounds i8, i8* %70, i64 %idxprom73
  %71 = load i8, i8* %arrayidx74, align 1
  %conv75 = zext i8 %71 to i32
  %conv76 = sitofp i32 %conv75 to float
  %72 = load float, float* %mult, align 4
  %73 = load i32, i32* %rcol, align 4
  %74 = load i32, i32* %xm, align 4
  %mul77 = mul nsw i32 %73, %74
  %75 = load i32, i32* %rrow, align 4
  %76 = load i32, i32* %ym, align 4
  %mul78 = mul nsw i32 %75, %76
  %add79 = add nsw i32 %mul77, %mul78
  %77 = load i32, i32* %offs, align 4
  %add80 = add nsw i32 %add79, %77
  %idxprom81 = sext i32 %add80 to i64
  %arrayidx82 = getelementptr inbounds [16384 x i8], [16384 x i8]* @sdata, i32 0, i64 %idxprom81
  %78 = load i8, i8* %arrayidx82, align 1
  %conv83 = sext i8 %78 to i32
  %conv84 = sitofp i32 %conv83 to float
  %mul85 = fmul float %72, %conv84
  %add86 = fadd float %conv76, %mul85
  %conv87 = fptosi float %add86 to i32
  store i32 %conv87, i32* %varde, align 4
  %79 = load i32, i32* %varde, align 4
  %cmp88 = icmp sgt i32 %79, 255
  br i1 %cmp88, label %cond.true.90, label %cond.false.91

cond.true.90:                                     ; preds = %for.body.71
  br label %cond.end.98

cond.false.91:                                    ; preds = %for.body.71
  %80 = load i32, i32* %varde, align 4
  %cmp92 = icmp slt i32 %80, 0
  br i1 %cmp92, label %cond.true.94, label %cond.false.95

cond.true.94:                                     ; preds = %cond.false.91
  br label %cond.end.96

cond.false.95:                                    ; preds = %cond.false.91
  %81 = load i32, i32* %varde, align 4
  br label %cond.end.96

cond.end.96:                                      ; preds = %cond.false.95, %cond.true.94
  %cond97 = phi i32 [ 0, %cond.true.94 ], [ %81, %cond.false.95 ]
  br label %cond.end.98

cond.end.98:                                      ; preds = %cond.end.96, %cond.true.90
  %cond99 = phi i32 [ 255, %cond.true.90 ], [ %cond97, %cond.end.96 ]
  %conv100 = trunc i32 %cond99 to i8
  %82 = load i8*, i8** %d, align 8
  %incdec.ptr101 = getelementptr inbounds i8, i8* %82, i32 1
  store i8* %incdec.ptr101, i8** %d, align 8
  store i8 %conv100, i8* %82, align 1
  %83 = load i32, i32* %col, align 4
  %add102 = add nsw i32 %83, 1
  %idxprom103 = sext i32 %add102 to i64
  %84 = load i8*, i8** %cur_row, align 8
  %arrayidx104 = getelementptr inbounds i8, i8* %84, i64 %idxprom103
  %85 = load i8, i8* %arrayidx104, align 1
  %conv105 = zext i8 %85 to i32
  %conv106 = sitofp i32 %conv105 to float
  %86 = load float, float* %mult, align 4
  %87 = load i32, i32* %rcol, align 4
  %88 = load i32, i32* %xm, align 4
  %mul107 = mul nsw i32 %87, %88
  %89 = load i32, i32* %rrow, align 4
  %90 = load i32, i32* %ym, align 4
  %mul108 = mul nsw i32 %89, %90
  %add109 = add nsw i32 %mul107, %mul108
  %91 = load i32, i32* %offs, align 4
  %add110 = add nsw i32 %add109, %91
  %idxprom111 = sext i32 %add110 to i64
  %arrayidx112 = getelementptr inbounds [16384 x i8], [16384 x i8]* @sdata, i32 0, i64 %idxprom111
  %92 = load i8, i8* %arrayidx112, align 1
  %conv113 = sext i8 %92 to i32
  %conv114 = sitofp i32 %conv113 to float
  %mul115 = fmul float %86, %conv114
  %add116 = fadd float %conv106, %mul115
  %conv117 = fptosi float %add116 to i32
  store i32 %conv117, i32* %varde, align 4
  %93 = load i32, i32* %varde, align 4
  %cmp118 = icmp sgt i32 %93, 255
  br i1 %cmp118, label %cond.true.120, label %cond.false.121

cond.true.120:                                    ; preds = %cond.end.98
  br label %cond.end.128

cond.false.121:                                   ; preds = %cond.end.98
  %94 = load i32, i32* %varde, align 4
  %cmp122 = icmp slt i32 %94, 0
  br i1 %cmp122, label %cond.true.124, label %cond.false.125

cond.true.124:                                    ; preds = %cond.false.121
  br label %cond.end.126

cond.false.125:                                   ; preds = %cond.false.121
  %95 = load i32, i32* %varde, align 4
  br label %cond.end.126

cond.end.126:                                     ; preds = %cond.false.125, %cond.true.124
  %cond127 = phi i32 [ 0, %cond.true.124 ], [ %95, %cond.false.125 ]
  br label %cond.end.128

cond.end.128:                                     ; preds = %cond.end.126, %cond.true.120
  %cond129 = phi i32 [ 255, %cond.true.120 ], [ %cond127, %cond.end.126 ]
  %conv130 = trunc i32 %cond129 to i8
  %96 = load i8*, i8** %d, align 8
  %incdec.ptr131 = getelementptr inbounds i8, i8* %96, i32 1
  store i8* %incdec.ptr131, i8** %d, align 8
  store i8 %conv130, i8* %96, align 1
  %97 = load i32, i32* %col, align 4
  %add132 = add nsw i32 %97, 2
  %idxprom133 = sext i32 %add132 to i64
  %98 = load i8*, i8** %cur_row, align 8
  %arrayidx134 = getelementptr inbounds i8, i8* %98, i64 %idxprom133
  %99 = load i8, i8* %arrayidx134, align 1
  %conv135 = zext i8 %99 to i32
  %conv136 = sitofp i32 %conv135 to float
  %100 = load float, float* %mult, align 4
  %101 = load i32, i32* %rcol, align 4
  %102 = load i32, i32* %xm, align 4
  %mul137 = mul nsw i32 %101, %102
  %103 = load i32, i32* %rrow, align 4
  %104 = load i32, i32* %ym, align 4
  %mul138 = mul nsw i32 %103, %104
  %add139 = add nsw i32 %mul137, %mul138
  %105 = load i32, i32* %offs, align 4
  %add140 = add nsw i32 %add139, %105
  %idxprom141 = sext i32 %add140 to i64
  %arrayidx142 = getelementptr inbounds [16384 x i8], [16384 x i8]* @sdata, i32 0, i64 %idxprom141
  %106 = load i8, i8* %arrayidx142, align 1
  %conv143 = sext i8 %106 to i32
  %conv144 = sitofp i32 %conv143 to float
  %mul145 = fmul float %100, %conv144
  %add146 = fadd float %conv136, %mul145
  %conv147 = fptosi float %add146 to i32
  store i32 %conv147, i32* %varde, align 4
  %107 = load i32, i32* %varde, align 4
  %cmp148 = icmp sgt i32 %107, 255
  br i1 %cmp148, label %cond.true.150, label %cond.false.151

cond.true.150:                                    ; preds = %cond.end.128
  br label %cond.end.158

cond.false.151:                                   ; preds = %cond.end.128
  %108 = load i32, i32* %varde, align 4
  %cmp152 = icmp slt i32 %108, 0
  br i1 %cmp152, label %cond.true.154, label %cond.false.155

cond.true.154:                                    ; preds = %cond.false.151
  br label %cond.end.156

cond.false.155:                                   ; preds = %cond.false.151
  %109 = load i32, i32* %varde, align 4
  br label %cond.end.156

cond.end.156:                                     ; preds = %cond.false.155, %cond.true.154
  %cond157 = phi i32 [ 0, %cond.true.154 ], [ %109, %cond.false.155 ]
  br label %cond.end.158

cond.end.158:                                     ; preds = %cond.end.156, %cond.true.150
  %cond159 = phi i32 [ 255, %cond.true.150 ], [ %cond157, %cond.end.156 ]
  %conv160 = trunc i32 %cond159 to i8
  %110 = load i8*, i8** %d, align 8
  %incdec.ptr161 = getelementptr inbounds i8, i8* %110, i32 1
  store i8* %incdec.ptr161, i8** %d, align 8
  store i8 %conv160, i8* %110, align 1
  %111 = load i32, i32* %bytes, align 4
  %cmp162 = icmp eq i32 %111, 4
  br i1 %cmp162, label %if.then.164, label %if.end.169

if.then.164:                                      ; preds = %cond.end.158
  %112 = load i32, i32* %col, align 4
  %add165 = add nsw i32 %112, 3
  %idxprom166 = sext i32 %add165 to i64
  %113 = load i8*, i8** %cur_row, align 8
  %arrayidx167 = getelementptr inbounds i8, i8* %113, i64 %idxprom166
  %114 = load i8, i8* %arrayidx167, align 1
  %115 = load i8*, i8** %d, align 8
  %incdec.ptr168 = getelementptr inbounds i8, i8* %115, i32 1
  store i8* %incdec.ptr168, i8** %d, align 8
  store i8 %114, i8* %115, align 1
  br label %if.end.169

if.end.169:                                       ; preds = %if.then.164, %cond.end.158
  %116 = load i32, i32* %rcol, align 4
  %inc170 = add nsw i32 %116, 1
  store i32 %inc170, i32* %rcol, align 4
  %117 = load i32, i32* %rcol, align 4
  %cmp171 = icmp eq i32 %117, 128
  br i1 %cmp171, label %if.then.173, label %if.end.174

if.then.173:                                      ; preds = %if.end.169
  store i32 0, i32* %rcol, align 4
  br label %if.end.174

if.end.174:                                       ; preds = %if.then.173, %if.end.169
  br label %for.inc.175

for.inc.175:                                      ; preds = %if.end.174
  %118 = load i32, i32* %bytes, align 4
  %119 = load i32, i32* %col, align 4
  %add176 = add nsw i32 %119, %118
  store i32 %add176, i32* %col, align 4
  br label %for.cond.67

for.end.177:                                      ; preds = %for.cond.67
  br label %sw.epilog.178

sw.epilog.178:                                    ; preds = %for.body, %for.end.177, %for.end
  %120 = load %struct._GimpPreview*, %struct._GimpPreview** %preview.addr, align 8
  %tobool179 = icmp ne %struct._GimpPreview* %120, null
  br i1 %tobool179, label %if.then.180, label %if.else.185

if.then.180:                                      ; preds = %sw.epilog.178
  %121 = load i8*, i8** %preview_buffer, align 8
  %122 = load i32, i32* %row, align 4
  %123 = load i32, i32* %y1, align 4
  %sub = sub nsw i32 %122, %123
  %124 = load i32, i32* %width, align 4
  %mul181 = mul nsw i32 %sub, %124
  %125 = load i32, i32* %bytes, align 4
  %mul182 = mul nsw i32 %mul181, %125
  %idx.ext = sext i32 %mul182 to i64
  %add.ptr = getelementptr inbounds i8, i8* %121, i64 %idx.ext
  %126 = load i8*, i8** %dest, align 8
  %127 = load i32, i32* %width, align 4
  %128 = load i32, i32* %bytes, align 4
  %mul183 = mul nsw i32 %127, %128
  %conv184 = sext i32 %mul183 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr, i8* %126, i64 %conv184, i32 1, i1 false)
  br label %if.end.193

if.else.185:                                      ; preds = %sw.epilog.178
  %129 = load i8*, i8** %dest, align 8
  %130 = load i32, i32* %x1, align 4
  %131 = load i32, i32* %row, align 4
  %132 = load i32, i32* %width, align 4
  call void @gimp_pixel_rgn_set_row(%struct._GimpPixelRgn* %destPR, i8* %129, i32 %130, i32 %131, i32 %132)
  %133 = load i32, i32* %row, align 4
  %rem = srem i32 %133, 5
  %cmp186 = icmp eq i32 %rem, 0
  br i1 %cmp186, label %if.then.188, label %if.end.192

if.then.188:                                      ; preds = %if.else.185
  %134 = load i32, i32* %row, align 4
  %conv189 = sitofp i32 %134 to double
  %135 = load i32, i32* %height, align 4
  %conv190 = sitofp i32 %135 to double
  %div = fdiv double %conv189, %conv190
  %call191 = call i32 @gimp_progress_update(double %div)
  br label %if.end.192

if.end.192:                                       ; preds = %if.then.188, %if.else.185
  br label %if.end.193

if.end.193:                                       ; preds = %if.end.192, %if.then.180
  %136 = load i32, i32* %rrow, align 4
  %inc194 = add nsw i32 %136, 1
  store i32 %inc194, i32* %rrow, align 4
  %137 = load i32, i32* %rrow, align 4
  %cmp195 = icmp eq i32 %137, 128
  br i1 %cmp195, label %if.then.197, label %if.end.198

if.then.197:                                      ; preds = %if.end.193
  store i32 0, i32* %rrow, align 4
  br label %if.end.198

if.end.198:                                       ; preds = %if.then.197, %if.end.193
  br label %for.inc.199

for.inc.199:                                      ; preds = %if.end.198
  %138 = load i32, i32* %row, align 4
  %inc200 = add nsw i32 %138, 1
  store i32 %inc200, i32* %row, align 4
  br label %for.cond

for.end.201:                                      ; preds = %for.cond
  %139 = load %struct._GimpPreview*, %struct._GimpPreview** %preview.addr, align 8
  %tobool202 = icmp ne %struct._GimpPreview* %139, null
  br i1 %tobool202, label %if.then.203, label %if.else.205

if.then.203:                                      ; preds = %for.end.201
  %140 = load %struct._GimpPreview*, %struct._GimpPreview** %preview.addr, align 8
  %141 = load i8*, i8** %preview_buffer, align 8
  %142 = load i32, i32* %width, align 4
  %143 = load i32, i32* %bytes, align 4
  %mul204 = mul nsw i32 %142, %143
  call void @gimp_preview_draw_buffer(%struct._GimpPreview* %140, i8* %141, i32 %mul204)
  %144 = load i8*, i8** %preview_buffer, align 8
  call void @g_free(i8* %144)
  br label %if.end.211

if.else.205:                                      ; preds = %for.end.201
  %call206 = call i32 @gimp_progress_update(double 1.000000e+00)
  %145 = load %struct._GimpDrawable*, %struct._GimpDrawable** %drawable.addr, align 8
  call void @gimp_drawable_flush(%struct._GimpDrawable* %145)
  %146 = load %struct._GimpDrawable*, %struct._GimpDrawable** %drawable.addr, align 8
  %drawable_id207 = getelementptr inbounds %struct._GimpDrawable, %struct._GimpDrawable* %146, i32 0, i32 0
  %147 = load i32, i32* %drawable_id207, align 4
  %call208 = call i32 @gimp_drawable_merge_shadow(i32 %147, i32 1)
  %148 = load %struct._GimpDrawable*, %struct._GimpDrawable** %drawable.addr, align 8
  %drawable_id209 = getelementptr inbounds %struct._GimpDrawable, %struct._GimpDrawable* %148, i32 0, i32 0
  %149 = load i32, i32* %drawable_id209, align 4
  %150 = load i32, i32* %x1, align 4
  %151 = load i32, i32* %y1, align 4
  %152 = load i32, i32* %width, align 4
  %153 = load i32, i32* %height, align 4
  %call210 = call i32 @gimp_drawable_update(i32 %149, i32 %150, i32 %151, i32 %152, i32 %153)
  br label %if.end.211

if.end.211:                                       ; preds = %if.else.205, %if.then.203
  %154 = load i8*, i8** %cur_row, align 8
  call void @g_free(i8* %154)
  %155 = load i8*, i8** %dest, align 8
  call void @g_free(i8* %155)
  br label %return

return:                                           ; preds = %if.end.211, %if.then.2
  ret void
}

declare i32 @gimp_displays_flush() #1

declare i32 @gimp_procedural_db_set_data(i8*, i8*, i32) #1

declare void @gimp_ui_init(i8*, i32) #1

declare %struct._GtkWidget* @gimp_dialog_new(i8*, i8*, %struct._GtkWidget*, i32, void (i8*, i8*)*, i8*, ...) #1

declare void @gimp_standard_help_func(i8*, i8*) #1

declare void @gtk_dialog_set_alternative_button_order(%struct._GtkDialog*, i32, ...) #1

declare %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @gtk_dialog_get_type() #3

declare void @gimp_window_set_transient(%struct._GtkWindow*) #1

; Function Attrs: nounwind readnone
declare i64 @gtk_window_get_type() #3

declare %struct._GtkWidget* @gtk_box_new(i32, i32) #1

declare void @gtk_container_set_border_width(%struct._GtkContainer*, i32) #1

; Function Attrs: nounwind readnone
declare i64 @gtk_container_get_type() #3

declare void @gtk_box_pack_start(%struct._GtkBox*, %struct._GtkWidget*, i32, i32, i32) #1

declare %struct._GtkWidget* @gtk_dialog_get_content_area(%struct._GtkDialog*) #1

; Function Attrs: nounwind readnone
declare i64 @gtk_box_get_type() #3

declare void @gtk_widget_show(%struct._GtkWidget*) #1

declare %struct._GtkWidget* @gimp_drawable_preview_new(%struct._GimpDrawable*, i32*) #1

declare i64 @g_signal_connect_data(i8*, i8*, void ()*, i8*, void (i8*, %struct._GClosure*)*, i32) #1

declare %struct._GtkWidget* @gimp_int_radio_group_new(i32, i8*, void ()*, i8*, i32, ...) #1

declare void @gimp_radio_button_update(%struct._GtkWidget*, i8*) #1

declare void @gimp_preview_invalidate(%struct._GimpPreview*) #1

declare %struct._GtkWidget* @gtk_table_new(i32, i32, i32) #1

declare void @gtk_table_set_col_spacings(%struct._GtkTable*, i32) #1

; Function Attrs: nounwind readnone
declare i64 @gtk_table_get_type() #3

declare %struct._GtkObject* @gimp_scale_entry_new(%struct._GtkTable*, i32, i32, i8*, i32, i32, double, double, double, double, double, i32, i32, double, double, i8*, i8*) #1

declare void @gimp_int_adjustment_update(%struct._GtkAdjustment*, i8*) #1

declare i32 @gimp_dialog_run(%struct._GimpDialog*) #1

; Function Attrs: nounwind readnone
declare i64 @gimp_dialog_get_type() #3

declare void @gtk_widget_destroy(%struct._GtkWidget*) #1

declare void @gimp_preview_get_position(%struct._GimpPreview*, i32*, i32*) #1

declare void @gimp_preview_get_size(%struct._GimpPreview*, i32*, i32*) #1

declare i32 @gimp_drawable_mask_intersect(i32, i32*, i32*, i32*, i32*) #1

declare noalias i8* @g_malloc_n(i64, i64) #1

declare void @gimp_pixel_rgn_init(%struct._GimpPixelRgn*, %struct._GimpDrawable*, i32, i32, i32, i32, i32, i32) #1

declare void @gimp_pixel_rgn_get_row(%struct._GimpPixelRgn*, i8*, i32, i32, i32) #1

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #4

declare void @gimp_pixel_rgn_set_row(%struct._GimpPixelRgn*, i8*, i32, i32, i32) #1

declare i32 @gimp_progress_update(double) #1

declare void @gimp_preview_draw_buffer(%struct._GimpPreview*, i8*, i32) #1

declare void @g_free(i8*) #1

declare void @gimp_drawable_flush(%struct._GimpDrawable*) #1

declare i32 @gimp_drawable_merge_shadow(i32, i32) #1

declare i32 @gimp_drawable_update(i32, i32, i32, i32, i32) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readnone }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
