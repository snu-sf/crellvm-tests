; ModuleID = './gdevopvp.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.OPVP_Paper = type { i8*, i8*, float, float }
%struct.struct_shared_procs_s = type opaque
%struct.gs_memory_s = type { %struct.gs_memory_s*, %struct.gs_memory_procs_s, %struct.gs_lib_ctx_s*, %struct.gs_memory_s*, %struct.gs_memory_s* }
%struct.gs_memory_procs_s = type { i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i8*, i32, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)*, %struct.gs_memory_s* (%struct.gs_memory_s*)*, void (%struct.gs_memory_s*, %struct.gs_memory_status_s*)*, void (%struct.gs_memory_s*, i32, i8*)*, void (%struct.gs_memory_s*)*, i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, i32, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, i32, %struct.gs_memory_struct_type_s*, i8*)*, i32 (%struct.gs_memory_s*, i8*)*, %struct.gs_memory_struct_type_s* (%struct.gs_memory_s*, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i8*, i32, i32, i8*)*, void (%struct.gs_memory_s*, i8*, i32, i8*)*, i32 (%struct.gs_memory_s*, %struct.gs_gc_root_s*, %struct.gs_ptr_procs_s*, i8**, i8*)*, void (%struct.gs_memory_s*, %struct.gs_gc_root_s*, i8*)*, void (%struct.gs_memory_s*, i32)* }
%struct.gs_memory_status_s = type { i64, i64, i32 }
%struct.gs_gc_root_s = type { %struct.gs_gc_root_s*, %struct.gs_ptr_procs_s*, i8**, i32 }
%struct.gs_ptr_procs_s = type { void (%struct.enum_ptr_s*, %struct.gc_state_s*)*, i32 (%struct.enum_ptr_s*, %struct.gc_state_s*)*, i8* (i8*, %struct.gc_state_s*)* }
%struct.enum_ptr_s = type { i8*, i32 }
%struct.gc_state_s = type opaque
%struct.gs_lib_ctx_s = type { %struct.gs_memory_s*, %struct._IO_FILE*, %struct._IO_FILE*, %struct._IO_FILE*, %struct._IO_FILE*, i32, i32, i32, i8*, i8*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)*, i32 (i8*)*, i64, i8*, %struct.name_table_s*, i32, %struct.gx_io_device_s**, i32, i32, [2 x i64], %struct.gs_font_dir_s*, i32, i8*, i32, i8*, %struct.gs_fapi_server_s** }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.name_table_s = type opaque
%struct.gx_io_device_s = type { i8*, i8*, %struct.gx_io_device_procs_s, i8* }
%struct.gx_io_device_procs_s = type { i32 (%struct.gx_io_device_s*, %struct.gs_memory_s*)*, i32 (%struct.gx_io_device_s*, i8*, %struct.stream_s**, %struct.gs_memory_s*)*, i32 (%struct.gx_io_device_s*, i8*, i32, i8*, %struct.stream_s**, %struct.gs_memory_s*)*, i32 (%struct.gx_io_device_s*, i8*, i8*, %struct._IO_FILE**, i8*, i32)*, i32 (%struct.gx_io_device_s*, %struct._IO_FILE*)*, i32 (%struct.gx_io_device_s*, i8*)*, i32 (%struct.gx_io_device_s*, i8*, i8*)*, i32 (%struct.gx_io_device_s*, i8*, %struct.stat*)*, %struct.file_enum_s* (%struct.gx_io_device_s*, i8*, i32, %struct.gs_memory_s*)*, i32 (%struct.file_enum_s*, i8*, i32)*, void (%struct.file_enum_s*)*, i32 (%struct.gx_io_device_s*, %struct.gs_param_list_s*)*, i32 (%struct.gx_io_device_s*, %struct.gs_param_list_s*)* }
%struct.stream_s = type { %struct.stream_template_s*, %struct.gs_memory_s*, i32 (%struct.stream_state_s*, i8*)*, i32, [80 x i8], %union.stream_cursor_s, i8*, i32, i32, i16, i8, i8, %struct.gs_string_s, i64, %struct.stream_procs, %struct.stream_s*, i32, i32, %struct.stream_state_s*, i16, i16, %struct.stream_s*, %struct.stream_s*, i32, i32, i32 (%struct.stream_s*)*, %struct._IO_FILE*, %struct.gs_const_string_s, i32, i64, i64 }
%struct.stream_template_s = type { %struct.gs_memory_struct_type_s*, i32 (%struct.stream_state_s*)*, i32 (%struct.stream_state_s*, %struct.stream_cursor_read_s*, %struct.stream_cursor_write_s*, i32)*, i32, i32, void (%struct.stream_state_s*)*, void (%struct.stream_state_s*)*, i32 (%struct.stream_state_s*)* }
%struct.stream_cursor_read_s = type { i8*, i8*, i8* }
%struct.stream_cursor_write_s = type { i8*, i8*, i8* }
%union.stream_cursor_s = type { %struct.stream_cursor_read_s }
%struct.gs_string_s = type { i8*, i32 }
%struct.stream_procs = type { i32 (%struct.stream_s*, i64*)*, i32 (%struct.stream_s*, i64)*, void (%struct.stream_s*)*, i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)*, i32 (%struct.stream_state_s*, %struct.stream_cursor_read_s*, %struct.stream_cursor_write_s*, i32)*, i32 (%struct.stream_s*, i32)* }
%struct.stream_state_s = type { %struct.stream_template_s*, %struct.gs_memory_s*, i32 (%struct.stream_state_s*, i8*)*, i32, [80 x i8] }
%struct.gs_const_string_s = type { i8*, i32 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.file_enum_s = type opaque
%struct.gs_param_list_s = type { %struct.gs_param_list_procs_s*, %struct.gs_memory_s*, i32 }
%struct.gs_param_list_procs_s = type { i32 (%struct.gs_param_list_s*, i8*, %struct.gs_param_typed_value_s*)*, i32 (%struct.gs_param_list_s*, i8*, %struct.gs_param_collection_s*, i32)*, i32 (%struct.gs_param_list_s*, i8*, %struct.gs_param_collection_s*)*, i32 (%struct.gs_param_list_s*, %union.gs_param_enumerator_s*, %struct.gs_param_string_s*)*, i32 (%struct.gs_param_list_s*, i8*)*, i32 (%struct.gs_param_list_s*, i8*)*, i32 (%struct.gs_param_list_s*, i8*)*, i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*)* }
%struct.gs_param_typed_value_s = type { %union.gs_param_value_s, i32 }
%union.gs_param_value_s = type { %struct.gs_param_string_s }
%struct.gs_param_string_s = type { i8*, i32, i32 }
%struct.gs_param_collection_s = type { %struct.gs_param_list_s*, i32 }
%union.gs_param_enumerator_s = type { i64 }
%struct.gs_font_dir_s = type opaque
%struct.gs_fapi_server_s = type opaque
%struct.gs_memory_struct_type_s = type { i32, i8*, %struct.struct_shared_procs_s*, {}*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }
%struct.gx_device_opvp_s = type { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s, %struct.gs_memory_s*, %struct.gx_device_vector_procs_s*, [4096 x i8], %struct._IO_FILE*, %struct.stream_s*, i8*, i32, i32, %struct.gs_imager_state_s, float*, i32, i32, i32, %struct.gx_hl_saved_color_s, %struct.gx_hl_saved_color_s, i64, i64, i32, i32, %struct.gs_point_s, i32, %struct.gx_device_bbox_s*, i64, i64 }
%struct.gx_device_s = type { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s }
%struct.rc_header_s = type { i64, %struct.gs_memory_s*, void (%struct.gs_memory_s*, i8*, i8*)* }
%struct.gx_device_color_info_s = type { i32, i32, i32, i16, i8, i32, i32, i32, i32, %struct.gx_device_anti_alias_info_s, i32, [64 x i8], [64 x i8], [64 x i64], i8*, i32, i64, i32 }
%struct.gx_device_anti_alias_info_s = type { i32, i32 }
%struct.gx_device_cached_colors_s = type { i64, i64 }
%struct.gx_stroked_gradient_recognizer_s = type { i32, [4 x %struct.gs_fixed_point_s], [4 x %struct.gs_fixed_point_s] }
%struct.gs_fixed_point_s = type { i32, i32 }
%struct.gdev_space_params_s = type { i64, i64, %struct.gx_band_params_s, i32, i32 }
%struct.gx_band_params_s = type { i32, i32, i64 }
%struct.cmm_dev_profile_s = type { [4 x %struct.cmm_profile_s*], %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.cmm_profile_s*, [4 x %struct.gsicc_rendering_param_s], i32, i32, i32, i32, i32, i32, %struct.gsicc_namelist_s*, i32, %struct.gs_memory_s*, %struct.rc_header_s }
%struct.cmm_profile_s = type { i8, i8, i32, i32, i32, i32, %struct.gs_range_icc_s, i64, i32, [15 x i32], i32, i32, i32, %struct.gsicc_rendering_param_s, i8*, %struct.gx_device_s*, %struct.gsicc_namelist_s*, i8*, %struct.rc_header_s, i32, i8*, %struct.gs_memory_s*, %struct.gx_monitor_s* }
%struct.gs_range_icc_s = type { [15 x %struct.gs_range_s] }
%struct.gs_range_s = type { float, float }
%struct.gsicc_rendering_param_s = type { i32, i32, i32, i32, i32, i32 }
%struct.gx_monitor_s = type { %struct.gs_memory_s*, %union.gp_monitor }
%union.gp_monitor = type { i8* }
%struct.gsicc_namelist_s = type { i32, %struct.gsicc_colorname_s*, i8*, %struct.gs_devicen_color_map_s*, i32 }
%struct.gsicc_colorname_s = type { i8*, i32, %struct.gsicc_colorname_s* }
%struct.gs_devicen_color_map_s = type { i32, i32, i32, i32, i64, [64 x i32] }
%struct.gx_page_device_procs_s = type { i32 (%struct.gx_device_s*, %struct.gs_state_s*)*, i32 (%struct.gx_device_s*, %struct.gs_state_s*)*, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* }
%struct.gs_state_s = type { i32, %struct.gs_memory_s*, i8*, %struct.gx_line_params_s, i32, %struct.gs_matrix_fixed_s, i32, %struct.gs_point_s, %struct.gs_point_s, i32, i32, i16, i32, %struct.gs_transparency_source_s, %struct.gs_transparency_source_s, %struct.gs_xstate_trans_flags, i64, i32, i32, i32, %struct.gx_device_s*, i32, i32, i32, i32, i32, i32, float, %struct.gs_fixed_point_s, i32, i32, i32, float, i32, i32, %struct.gsicc_manager_s*, %struct.gsicc_link_cache_s*, %struct.gsicc_profile_cache_s*, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)*, %struct.gs_halftone_s*, [2 x %struct.gs_int_point_s], %struct.gx_device_halftone_s*, %struct.gs_cie_render_s*, i32, %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s*, %struct.gx_transfer_s, [64 x %struct.gx_transfer_map_s*], %struct.gx_cie_joint_caches_s*, %struct.gx_color_map_procs_s*, %struct.gs_devicen_color_map_s, %struct.gx_pattern_cache_s*, %struct.gs_color_space_s*, %struct.gs_color_space_s*, %struct.gx_cie_joint_caches_s*, %struct.gs_devicen_color_map_s, %struct.gs_state_s*, %struct.gs_matrix_s, i32, %struct.gs_matrix_s, i32, %struct.gx_path_s*, %struct.gx_clip_path_s*, %struct.gx_clip_stack_s*, %struct.gx_clip_path_s*, i64, i64, %struct.gx_clip_path_s*, i32, [2 x %struct.anon], %struct.gs_font_s*, %struct.gs_font_s*, %struct.gs_matrix_fixed_s, i32, i32, i32, %struct.gs_state_s*, i32, %struct.gx_device_s*, %struct.gs_device_filter_stack_s*, %struct.gs_state_client_procs_s }
%struct.gx_line_params_s = type { float, i32, i32, i32, i32, i32, float, float, float, i32, %struct.gs_matrix_s, %struct.gx_dash_params_s }
%struct.gx_dash_params_s = type { float*, i32, float, i32, float, i32, i32, float }
%struct.gs_transparency_source_s = type { float }
%struct.gs_xstate_trans_flags = type { i32, i32 }
%struct.gsicc_manager_s = type { %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.gsicc_devicen_s*, %struct.gsicc_smask_s*, i32, %struct.cmm_srcgtag_profile_s*, %struct.gs_memory_s*, %struct.rc_header_s }
%struct.gsicc_devicen_s = type { %struct.gsicc_devicen_entry_s*, %struct.gsicc_devicen_entry_s*, i32 }
%struct.gsicc_devicen_entry_s = type { %struct.cmm_profile_s*, %struct.gsicc_devicen_entry_s* }
%struct.gsicc_smask_s = type { %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.cmm_profile_s*, %struct.gs_memory_s*, i32 }
%struct.cmm_srcgtag_profile_s = type { [3 x %struct.cmm_profile_s*], [3 x %struct.gsicc_rendering_param_s], [3 x %struct.cmm_profile_s*], [3 x %struct.gsicc_rendering_param_s], %struct.cmm_profile_s*, %struct.gs_memory_s*, i32, i8*, %struct.rc_header_s }
%struct.gsicc_link_cache_s = type { %struct.gsicc_link_s*, i32, %struct.rc_header_s, %struct.gs_memory_s*, %struct.gx_monitor_s*, %struct.gx_semaphore_s*, i32 }
%struct.gsicc_link_s = type { i8*, %struct.gscms_procs_s, %struct.gsicc_hashlink_s, %struct.gsicc_link_cache_s*, i32, %struct.gsicc_link_s*, %struct.gx_semaphore_s*, i32, i32, i32, i32, i32, i32, %struct.gscms_procs_s, i32, i32, i32 }
%struct.gsicc_hashlink_s = type { i64, i64, i64, i64 }
%struct.gscms_procs_s = type { void (%struct.gx_device_s*, %struct.gsicc_link_s*, %struct.gsicc_bufferdesc_s*, %struct.gsicc_bufferdesc_s*, i8*, i8*)*, void (%struct.gx_device_s*, %struct.gsicc_link_s*, i8*, i8*, i32)*, void (%struct.gsicc_link_s*)*, i32 (i8*, i32)* }
%struct.gsicc_bufferdesc_s = type { i8, i8, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.gx_semaphore_s = type { %struct.gs_memory_s*, %union.gp_semaphore }
%union.gp_semaphore = type { i8* }
%struct.gsicc_profile_cache_s = type { %struct.gsicc_profile_entry_s*, i32, %struct.rc_header_s, %struct.gs_memory_s* }
%struct.gsicc_profile_entry_s = type { %struct.gs_color_space_s*, %struct.gsicc_profile_entry_s*, i64 }
%struct.gs_halftone_s = type opaque
%struct.gs_int_point_s = type { i32, i32 }
%struct.gx_device_halftone_s = type opaque
%struct.gs_cie_render_s = type opaque
%struct.gx_transfer_map_s = type { %struct.rc_header_s, float (double, %struct.gx_transfer_map_s*)*, %struct.gs_mapping_closure_s, i64, [256 x i16] }
%struct.gs_mapping_closure_s = type { float (double, %struct.gx_transfer_map_s*, i8*)*, i8* }
%struct.gx_transfer_s = type { i32, %struct.gx_transfer_map_s*, i32, %struct.gx_transfer_map_s*, i32, %struct.gx_transfer_map_s*, i32, %struct.gx_transfer_map_s* }
%struct.gx_color_map_procs_s = type { void (i16, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, void (i16, i16, i16, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, void (i16, i16, i16, i16, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32, %struct.gs_color_space_s*)*, void (i16, i16, i16, i16, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, void (i16, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, void (i16*, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, i32 (%struct.gs_imager_state_s*, %struct.gx_device_s*)* }
%struct.gx_device_color_s = type { %struct.gx_device_color_type_s*, %union._c, %struct.gs_int_point_s, i32, %struct.gs_client_color_s, %struct._mask }
%struct.gx_device_color_type_s = type { %struct.gs_memory_struct_type_s*, void (%struct.gx_device_color_s*, %struct.gx_device_color_saved_s*)*, %struct.gx_device_halftone_s* (%struct.gx_device_color_s*)*, i32 (%struct.gx_device_color_s*, %struct.gs_int_point_s*)*, i32 (%struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, i32 (%struct.gx_device_color_s*, i32, i32, i32, i32, %struct.gx_device_s*, i32, %struct.gx_rop_source_s*)*, i32 (%struct.gx_device_color_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_s*, i32, i32)*, i32 (%struct.gx_device_color_s*, %struct.gx_device_color_s*)*, i32 (%struct.gx_device_color_s*, %struct.gx_device_color_saved_s*, %struct.gx_device_s*, i64, i8*, i32*)*, i32 (%struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_device_s*, i64, i8*, i32, %struct.gs_memory_s*)*, i32 (%struct.gx_device_color_s*, %struct.gx_device_s*, i64*)* }
%struct.gx_device_color_saved_s = type { %struct.gx_device_color_type_s*, %union._svc, %struct.gs_int_point_s }
%union._svc = type { %struct._svbin, [304 x i8] }
%struct._svbin = type { [2 x i64], i32, i32 }
%struct.gx_rop_source_s = type { i8*, i32, i32, i64, [2 x i64], i32, i32 }
%union._c = type { %struct._col }
%struct._col = type { %struct.gx_device_halftone_s*, i16, [64 x i8], [64 x i32], i16, i64 }
%struct.gs_client_color_s = type { %struct.gs_pattern_instance_s*, %struct.gs_paint_color_s }
%struct.gs_pattern_instance_s = type { %struct.rc_header_s, %struct.gs_pattern_type_s*, %struct.gs_state_s*, i64 }
%struct.gs_pattern_type_s = type opaque
%struct.gs_paint_color_s = type { [64 x float] }
%struct._mask = type { %struct.mp_, i64, %struct.gx_color_tile_s* }
%struct.mp_ = type { i32, i32 }
%struct.gx_color_tile_s = type opaque
%struct.gx_pattern_cache_s = type opaque
%struct.gs_color_space_s = type { %struct.gs_color_space_type_s*, %struct.rc_header_s, i64, %struct.gs_color_space_s*, %struct.gs_color_space_s*, %struct.client_color_space_data_s*, %struct.cmm_profile_s*, %union.anon }
%struct.gs_color_space_type_s = type { i32, i32, i32, %struct.gs_memory_struct_type_s*, i32 (%struct.gs_color_space_s*)*, void (%struct.gs_client_color_s*, %struct.gs_color_space_s*)*, void (%struct.gs_client_color_s*, %struct.gs_color_space_s*)*, %struct.gs_color_space_s* (%struct.gs_color_space_s*, %struct.gs_imager_state_s*)*, i32 (%struct.gs_client_color_s*, %struct.gs_color_space_s*, i16*, %struct.gs_imager_state_s*, %struct.gx_device_s*)*, i32 (i16*, %struct.gs_color_space_s*, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, i32 (%struct.gs_client_color_s*, %struct.gs_color_space_s*, %struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, i32 (%struct.gs_color_space_s*, %struct.gs_state_s*)*, i32 (%struct.gs_color_space_s*, %struct.gs_state_s*)*, void (%struct.gs_color_space_s*)*, void (%struct.gs_client_color_s*, %struct.gs_color_space_s*, i32)*, i32 (%struct.gs_color_space_s*, %struct.stream_s*)*, i32 (%struct.gs_color_space_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, %struct.gs_client_color_s*, %struct.gs_client_color_s*, %struct.gs_client_color_s*, %struct.gs_client_color_s*, float, %struct.gsicc_link_s*)*, i32 (%struct.gs_color_space_s*)* }
%struct.client_color_space_data_s = type { void (%struct.gs_color_space_s*, i32)* }
%union.anon = type { %struct.gs_device_n_params_s }
%struct.gs_device_n_params_s = type { i64*, i32, %struct.gs_device_n_map_s*, %struct.gs_device_n_attributes_s*, i32, i32 (%struct.gs_memory_s*, i64, i8**, i32*)* }
%struct.gs_device_n_map_s = type opaque
%struct.gs_device_n_attributes_s = type opaque
%struct.gx_cie_joint_caches_s = type opaque
%struct.gs_matrix_s = type { float, float, float, float, float, float }
%struct.gx_path_s = type { %struct.gx_path_segments_s, %struct.gs_memory_s*, i32, %struct.gx_path_segments_s*, %struct.segment_s*, %struct.gs_fixed_rect_s, %struct.segment_s*, i8, i8, i8, i8, i8, i32, i32, %struct.gs_fixed_point_s, %struct.gx_path_procs_s* }
%struct.gx_path_segments_s = type { %struct.rc_header_s, %struct.psc_ }
%struct.psc_ = type { %struct.subpath_s*, %struct.subpath_s* }
%struct.subpath_s = type { %struct.segment_s*, %struct.segment_s*, i16, i16, %struct.gs_fixed_point_s, %struct.segment_s*, i32, %struct.line_close_segment, i8 }
%struct.line_close_segment = type { %struct.segment_s*, %struct.segment_s*, i16, i16, %struct.gs_fixed_point_s, %struct.subpath_s* }
%struct.gs_fixed_rect_s = type { %struct.gs_fixed_point_s, %struct.gs_fixed_point_s }
%struct.segment_s = type { %struct.segment_s*, %struct.segment_s*, i16, i16, %struct.gs_fixed_point_s }
%struct.gx_path_procs_s = type { i32 (%struct.gx_path_s*, i32, i32)*, i32 (%struct.gx_path_s*, i32, i32, i32)*, i32 (%struct.gx_path_s*, i32, i32, i32)*, i32 (%struct.gx_path_s*, i32, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_path_s*, i32)*, i8 (%struct.gx_path_s*, i8)* }
%struct.gx_clip_stack_s = type opaque
%struct.gx_clip_path_s = type { %struct.gx_path_s, %struct.gx_clip_rect_list_s, i32, %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s, %struct.gx_clip_rect_list_s*, i32, %struct.gx_cpath_path_list_s*, i64 }
%struct.gx_clip_rect_list_s = type { %struct.rc_header_s, %struct.gx_clip_list_s }
%struct.gx_clip_list_s = type { %struct.gx_clip_rect_s, %struct.gx_clip_rect_s*, %struct.gx_clip_rect_s*, %struct.gx_clip_rect_s*, i32, i32, i32 }
%struct.gx_clip_rect_s = type { %struct.gx_clip_rect_s*, %struct.gx_clip_rect_s*, i32, i32, i32, i32, i8 }
%struct.gx_cpath_path_list_s = type { %struct.gx_path_s, %struct.rc_header_s, i32, %struct.gx_cpath_path_list_s* }
%struct.anon = type { %struct.gs_color_space_s*, %struct.gs_client_color_s*, %struct.gx_device_color_s* }
%struct.gs_font_s = type opaque
%struct.gs_matrix_fixed_s = type { float, float, float, float, float, float, i32, i32, i32 }
%struct.gs_device_filter_stack_s = type { %struct.gs_device_filter_stack_s*, %struct.gs_device_filter_s*, %struct.gx_device_s*, %struct.rc_header_s }
%struct.gs_device_filter_s = type opaque
%struct.gs_state_client_procs_s = type { i8* (%struct.gs_memory_s*)*, i32 (i8*, i8*)*, void (i8*, %struct.gs_memory_s*)*, i32 (i8*, i8*, i32)* }
%struct.gx_device_procs_s = type { i32 (%struct.gx_device_s*)*, void (%struct.gx_device_s*, %struct.gs_matrix_s*)*, i32 (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*, i32, i32)*, i32 (%struct.gx_device_s*)*, i64 (%struct.gx_device_s*, i16*)*, i32 (%struct.gx_device_s*, i64, i16*)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)*, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)*, i32 (%struct.gx_device_s*, i32, i8*, i8**)*, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)*, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)*, i64 (%struct.gx_device_s*, i16*)*, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)*, %struct.gx_device_s* (%struct.gx_device_s*)*, i64 (%struct.gx_device_s*, i16, i16, i16, i16)*, %struct.gx_device_s* (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)*, i32 (%struct.gx_device_s*, i32, i32*)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)*, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)*, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)*, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)*, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)*, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)*, i32 (%struct.gx_device_s*, i64, i16*)*, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)*, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)*, i32 (%struct.gx_device_s*, %struct.gx_device_s*)*, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)*, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)*, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*, i8*, i32, i32)*, i64 (%struct.gx_device_s*, i16*)*, i32 (%struct.gx_device_s*, i64, i16*)*, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)*, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)*, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)*, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)*, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)*, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)*, i32 (%struct.gx_device_s*, %struct.gs_state_s*)*, %struct.gs_devn_params_s* (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, i32, i8*, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)*, void (%struct.gx_device_s*, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)*, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* }
%struct.gx_tile_bitmap_s = type { i8*, i32, %struct.gs_int_point_s, i64, i16, i16 }
%struct.gx_xfont_procs_s = type { %struct.gx_xfont_s* (%struct.gx_device_s*, i8*, i32, i32, %struct.gs_uid_s*, %struct.gs_matrix_s*, %struct.gs_memory_s*)*, i64 (%struct.gx_xfont_s*, i64, i32, i64, %struct.gs_const_string_s*)*, i32 (%struct.gx_xfont_s*, i64, i32, %struct.gs_point_s*, %struct.gs_int_rect_s*)*, i32 (%struct.gx_xfont_s*, i64, %struct.gx_device_s*, i32, i32, i64, i32)*, i32 (%struct.gx_xfont_s*, %struct.gs_memory_s*)* }
%struct.gx_xfont_s = type { %struct.gx_xfont_common_s }
%struct.gx_xfont_common_s = type { %struct.gx_xfont_procs_s* }
%struct.gs_uid_s = type { i64, i64* }
%struct.gs_int_rect_s = type { %struct.gs_int_point_s, %struct.gs_int_point_s }
%struct.gx_fill_params_s = type opaque
%struct.gx_stroke_params_s = type opaque
%struct.gs_fixed_edge_s = type { %struct.gs_fixed_point_s, %struct.gs_fixed_point_s }
%struct.gs_image1_s = type { %struct.gx_image_type_s*, %struct.gs_matrix_s, i32, i32, i32, [130 x float], i32, i32, i32, %struct.gs_color_space_s*, i32, i32, i32, i32 }
%struct.gx_image_type_s = type { %struct.gs_memory_struct_type_s*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)*, i32 (%struct.gs_imager_state_s*, %struct.gs_image_common_s*, %struct.gs_int_point_s*)*, i32 (%struct.gs_image_common_s*, %struct.stream_s*, %struct.gs_color_space_s**)*, i32 (%struct.gs_image_common_s*, %struct.stream_s*, %struct.gs_color_space_s*)*, void (%struct.gs_image_common_s*, %struct.gs_memory_s*)*, i32 }
%struct.gs_image_common_s = type { %struct.gx_image_type_s*, %struct.gs_matrix_s }
%struct.gx_image_enum_common_s = type { %struct.gx_image_type_s*, %struct.gx_image_enum_procs_s*, %struct.gx_device_s*, %struct.gs_memory_s*, i64, i32, i32, [65 x i32], [65 x i32] }
%struct.gx_image_enum_procs_s = type { i32 (%struct.gx_image_enum_common_s*, %struct.gx_image_plane_s*, i32, i32*)*, i32 (%struct.gx_image_enum_common_s*, i32)*, i32 (%struct.gx_image_enum_common_s*)*, i32 (%struct.gx_image_enum_common_s*, i8*)* }
%struct.gx_image_plane_s = type { i8*, i32, i32 }
%struct.gx_strip_bitmap_s = type { i8*, i32, %struct.gs_int_point_s, i64, i16, i16, i16, i16, i32 }
%struct.gs_get_bits_params_s = type opaque
%struct.gs_composite_s = type { %struct.gs_composite_type_s*, i64, i32, %struct.gs_composite_s*, %struct.gs_composite_s* }
%struct.gs_composite_type_s = type { i8, %struct.gs_composite_type_procs_s }
%struct.gs_composite_type_procs_s = type { i32 (%struct.gs_composite_s*, %struct.gx_device_s**, %struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)*, i32 (%struct.gs_composite_s*, %struct.gs_composite_s*)*, i32 (%struct.gs_composite_s*, i8*, i32*, %struct.gx_device_clist_writer_s*)*, i32 (%struct.gs_composite_s**, i8*, i32, %struct.gs_memory_s*)*, i32 (%struct.gs_composite_s*, i32, i32, %struct.gs_imager_state_s*)*, i32 (%struct.gs_composite_s*, %struct.gs_composite_s**, %struct.gx_device_s*)*, i32 (%struct.gs_composite_s*, i8, i8)*, i32 (%struct.gs_composite_s*, %struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_imager_state_s*, %struct.gs_memory_s*)*, i32 (%struct.gs_composite_s*, %struct.gx_device_s*, %struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)*, i32 (%struct.gs_composite_s*, i32*, i32*, i32, i32)* }
%struct.gx_device_clist_writer_s = type { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s, %struct.gx_device_s*, %struct.gx_device_buf_procs_s, %struct.gs_memory_s*, i8*, i32, %struct.gx_band_params_s, i32, i32, %struct.gx_bits_cache_chunk_s, %struct.gx_bits_cache_s, i32, i32, %struct.tile_hash*, i32, i32, %struct.gx_band_page_info_s, i32, i64, %struct.clist_icctable_s*, %struct.gsicc_link_cache_s*, i32, %struct.gsicc_link_cache_s**, i32, %struct.gx_clist_state_s*, i8*, i8*, i8*, %struct.cmd_list_s*, %struct.cmd_list_s, i32, i32, i32, i32, %struct.gx_strip_bitmap_s, i32, i32, i32, %struct.gs_imager_state_s, i32, i32, i32, i32, [11 x float], %struct.gx_clip_path_s*, i64, %struct.clist_color_space_s, [4 x i64], i64, i64, i64, i64, i32, i32, i32, i32, i32 (%struct.gx_device_s*, i32)*, i32, %struct.gs_pattern1_instance_s*, i32, i32, i32, i32, i32, i32, %struct.clist_writer_cropping_buffer_s*, i64, i32, i32, i32, i32, %struct.gx_device_color_info_s }
%struct.gx_device_buf_procs_s = type { i32 (%struct.gx_device_s**, %struct.gx_device_s*, i32, %struct.gx_render_plane_s*, %struct.gs_memory_s*, %struct.gx_colors_usage_s*)*, i32 (%struct.gx_device_buf_space_s*, %struct.gx_device_s*, %struct.gx_render_plane_s*, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i8**, i32, i32, i32)*, void (%struct.gx_device_s*)* }
%struct.gx_render_plane_s = type { i32, i32, i32 }
%struct.gx_colors_usage_s = type { i64, i32, %struct.gs_int_rect_s }
%struct.gx_device_buf_space_s = type { i64, i64, i32 }
%struct.gx_bits_cache_chunk_s = type { %struct.gx_bits_cache_chunk_s*, i8*, i32, i32 }
%struct.gx_bits_cache_s = type { %struct.gx_bits_cache_chunk_s*, i32, i32, i32 }
%struct.tile_hash = type { i64 }
%struct.gx_band_page_info_s = type { [4096 x i8], i8*, [4096 x i8], i8*, %struct.clist_io_procs_s*, i32, i64, i64, %struct.gx_band_params_s }
%struct.clist_io_procs_s = type { i32 (i8*, i8*, i8**, %struct.gs_memory_s*, %struct.gs_memory_s*, i32)*, i32 (i8*, i8*, i32)*, i32 (i8*)*, i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)*, i32 (i8*, i32)*, i32 (i8*)*, i64 (i8*)*, void (i8*, i32, i8*)*, i32 (i8*, i64, i32, i8*)* }
%struct.clist_icctable_s = type { i32, %struct.gs_memory_s*, %struct.clist_icctable_entry_s*, %struct.clist_icctable_entry_s* }
%struct.clist_icctable_entry_s = type { %struct.clist_icc_serial_entry_s, %struct.clist_icctable_entry_s*, %struct.cmm_profile_s*, i32 }
%struct.clist_icc_serial_entry_s = type { i64, i64, i32 }
%struct.gx_clist_state_s = type opaque
%struct.cmd_list_s = type { %struct.cmd_prefix_s*, %struct.cmd_prefix_s* }
%struct.cmd_prefix_s = type { %struct.cmd_prefix_s*, i32, i64 }
%struct.clist_color_space_s = type { i8, i64, %struct.clist_icc_color_s, %struct.gs_color_space_s* }
%struct.clist_icc_color_s = type { i64, i8, i32, i32, i32 }
%struct.gs_pattern1_instance_s = type { %struct.rc_header_s, %struct.gs_pattern_type_s*, %struct.gs_state_s*, i64, %struct.gs_pattern1_template_s, %struct.gs_matrix_s, %struct.gs_rect_s, i32, i32, i32, i32, i32, %struct.gs_int_point_s, i64 }
%struct.gs_pattern1_template_s = type { %struct.gs_pattern_type_s*, i32, %struct.gs_uid_s, i8*, i32, i32, i32, %struct.gs_rect_s, float, float, i32 (%struct.gs_client_color_s*, %struct.gs_state_s*)* }
%struct.gs_rect_s = type { %struct.gs_point_s, %struct.gs_point_s }
%struct.clist_writer_cropping_buffer_s = type { i32, i32, i32, i32, %struct.clist_writer_cropping_buffer_s* }
%struct.gs_text_params_s = type { i32, %union.sd_, i32, %struct.gs_point_s, %struct.gs_point_s, %union.s_, float*, float*, i32 }
%union.sd_ = type { i8* }
%union.s_ = type { i64 }
%struct.gs_text_enum_s = type { %struct.gs_text_params_s, %struct.gx_device_s*, %struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_procs_s*, %struct.rc_header_s, i8*, %struct.gs_font_s*, i64, i32, %struct.gs_log2_scale_point_s, %struct.cached_fm_pair_s*, i32, i32, %struct.gx_font_stack_s, i32, i32, i32, %struct.gs_point_s, i64, i32, %struct.gs_log2_scale_point_s, %struct.gs_point_s, %struct.gs_text_returned_s }
%struct.gs_text_enum_procs_s = type { i32 (%struct.gs_text_enum_s*, %struct.gs_text_enum_s*)*, i32 (%struct.gs_text_enum_s*)*, i32 (%struct.gs_text_enum_s*)*, i32 (%struct.gs_text_enum_s*, %struct.gs_point_s*)*, i32 (%struct.gs_text_enum_s*, double*, i32)*, i32 (%struct.gs_text_enum_s*)*, void (%struct.gs_text_enum_s*, i8*)* }
%struct.cached_fm_pair_s = type opaque
%struct.gx_font_stack_s = type { i32, [6 x %struct.gx_font_stack_item_s] }
%struct.gx_font_stack_item_s = type { %struct.gs_font_s*, i32 }
%struct.gs_log2_scale_point_s = type { i32, i32 }
%struct.gs_text_returned_s = type { i64, i64, %struct.gs_point_s }
%struct.gs_transparency_group_params_s = type { %struct.gs_color_space_s*, i32, i32, i32, i32, i32, i32, i32, i64, %struct.cmm_profile_s* }
%struct.gx_transparency_mask_params_s = type { i32, i32, i32, i32, [64 x float], float, i32, i32, i32, i32, [256 x i8], i64, %struct.cmm_profile_s* }
%struct.gx_cm_color_map_procs_s = type { void (%struct.gx_device_s*, i16, i16*)*, void (%struct.gx_device_s*, %struct.gs_imager_state_s*, i16, i16, i16, i16*)*, void (%struct.gx_device_s*, i16, i16, i16, i16, i16*)* }
%struct.gs_fill_attributes_s = type { %struct.gs_fixed_rect_s*, i32, %struct.gx_device_halftone_s*, i32, i32, i32, %struct.patch_fill_state_s* }
%struct.patch_fill_state_s = type opaque
%struct.gs_devn_params_s = type opaque
%struct.gx_process_page_options_s = type { i32 (i8*, %struct.gx_device_s*, %struct.gs_memory_s*, i32, i32, i8**)*, void (i8*, %struct.gx_device_s*, %struct.gs_memory_s*, i8*)*, i32 (i8*, %struct.gx_device_s*, %struct.gx_device_s*, %struct.gs_int_rect_s*, i8*)*, i32 (i8*, %struct.gx_device_s*, i8*)*, i8*, i32 }
%struct.gx_device_vector_procs_s = type { i32 (%struct.gx_device_vector_s*)*, i32 (%struct.gx_device_vector_s*, double)*, i32 (%struct.gx_device_vector_s*, i32)*, i32 (%struct.gx_device_vector_s*, i32)*, i32 (%struct.gx_device_vector_s*, double)*, i32 (%struct.gx_device_vector_s*, float*, i32, double)*, i32 (%struct.gx_device_vector_s*, double)*, i32 (%struct.gx_device_vector_s*, i32, i32)*, i32 (%struct.gx_device_vector_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)*, i32 (%struct.gx_device_vector_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)*, i32 (%struct.gx_device_vector_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)*, i32 (%struct.gx_device_vector_s*, %struct.gx_path_s*, i32, %struct.gs_matrix_s*)*, i32 (%struct.gx_device_vector_s*, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_vector_s*, i32)*, i32 (%struct.gx_device_vector_s*, double, double, double, double, i32)*, i32 (%struct.gx_device_vector_s*, double, double, double, double, i32)*, i32 (%struct.gx_device_vector_s*, double, double, double, double, double, double, double, double, i32)*, i32 (%struct.gx_device_vector_s*, double, double, double, double, i32)*, i32 (%struct.gx_device_vector_s*, i32)* }
%struct.gx_device_vector_s = type { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s, %struct.gs_memory_s*, %struct.gx_device_vector_procs_s*, [4096 x i8], %struct._IO_FILE*, %struct.stream_s*, i8*, i32, i32, %struct.gs_imager_state_s, float*, i32, i32, i32, %struct.gx_hl_saved_color_s, %struct.gx_hl_saved_color_s, i64, i64, i32, i32, %struct.gs_point_s, i32, %struct.gx_device_bbox_s*, i64, i64 }
%struct.gs_imager_state_s = type { i32, %struct.gs_memory_s*, i8*, %struct.gx_line_params_s, i32, %struct.gs_matrix_fixed_s, i32, %struct.gs_point_s, %struct.gs_point_s, i32, i32, i16, i32, %struct.gs_transparency_source_s, %struct.gs_transparency_source_s, %struct.gs_xstate_trans_flags, i64, i32, i32, i32, %struct.gx_device_s*, i32, i32, i32, i32, i32, i32, float, %struct.gs_fixed_point_s, i32, i32, i32, float, i32, i32, %struct.gsicc_manager_s*, %struct.gsicc_link_cache_s*, %struct.gsicc_profile_cache_s*, %struct.gx_color_map_procs_s* (%struct.gs_imager_state_s*, %struct.gx_device_s*)*, %struct.gs_halftone_s*, [2 x %struct.gs_int_point_s], %struct.gx_device_halftone_s*, %struct.gs_cie_render_s*, i32, %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s*, %struct.gx_transfer_s, [64 x %struct.gx_transfer_map_s*], %struct.gx_cie_joint_caches_s*, %struct.gx_color_map_procs_s*, %struct.gs_devicen_color_map_s, %struct.gx_pattern_cache_s*, %struct.gs_color_space_s*, %struct.gs_color_space_s*, %struct.gx_cie_joint_caches_s*, %struct.gs_devicen_color_map_s }
%struct.gx_hl_saved_color_s = type { i64, i64, i32, %struct.gs_client_color_s, %struct.gx_device_color_saved_s }
%struct.gs_point_s = type { double, double }
%struct.gx_device_bbox_s = type { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s, %struct.gx_device_s*, i32, i32, %struct.gx_device_bbox_procs_s, i8*, i32, %struct.gs_fixed_rect_s, i64, i64, i64 }
%struct.gx_device_bbox_procs_s = type { i32 (i8*)*, void (i8*, %struct.gs_fixed_rect_s*)*, void (i8*, i32, i32, i32, i32)*, i32 (i8*, %struct.gs_fixed_rect_s*)* }
%struct.gdev_prn_start_render_params_s = type opaque
%struct.gx_page_queue_s = type opaque
%struct.gx_device_printer_s = type { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s, [11240 x i8], %struct.gx_printer_device_procs_s, [4096 x i8], i32, i32, i32, i32, i32, i32, %struct._IO_FILE*, i64, i8*, %struct.gs_memory_s*, %struct.gs_memory_s*, i32 (%struct.gx_device_s*, i32)*, %struct.gx_page_queue_s*, i32, %struct.gx_device_printer_s*, i32, i32, %struct.bg_print_s, i32, %struct.gx_saved_pages_list_s*, %struct.gx_device_procs_s, %struct.gx_device_procs_s }
%struct.gx_printer_device_procs_s = type { {}*, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)*, %struct.gx_device_buf_procs_s, void (%struct.gx_device_printer_s*, %struct.gdev_space_params_s*)*, i32 (%struct.gdev_prn_start_render_params_s*)*, i32 (%struct.gx_device_printer_s*)*, i32 (%struct.gx_device_printer_s*)*, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)* }
%struct.bg_print_s = type { %struct.gx_semaphore_s*, %struct.gx_device_s*, i8*, i32, i32 }
%struct.gx_saved_pages_list_s = type { i32, i32, i32, i32, %struct.gx_saved_pages_list_element_s*, %struct.gx_saved_pages_list_element_s*, %struct.gs_memory_s* }
%struct.gx_saved_pages_list_element_s = type { i32, %struct.gx_saved_pages_list_element_s*, %struct.gx_saved_pages_list_element_s*, %struct.gx_saved_page_s* }
%struct.gx_saved_page_s = type { [32 x i8], %struct.gx_device_color_info_s, [4096 x i8], [4096 x i8], %struct.clist_io_procs_s*, i32, i64, %struct.gx_band_params_s, %struct.gs_memory_s*, i32, i8* }
%struct._opvp_api_procs = type { i32 (i32, i8*, i32*, %struct._opvp_api_procs**)*, i32 (i32)*, i32 (i32, i8*)*, i32 (i32)*, i32 (i32)*, i32 (i32, i8*)*, i32 (i32)*, i32 (i32, i8*)*, i32 (i32)*, i32 (i32, i32, i32*, i8*)*, i32 (i32, i32, i32*, i8*)*, i32 (i32)*, i32 (i32, %struct._opvp_ctm*)*, i32 (i32, %struct._opvp_ctm*)*, i32 (i32)*, i32 (i32)*, i32 (i32)*, i32 (i32, i32*, i32*)*, i32 (i32, i32)*, i32 (i32, i32*)*, i32 (i32, i32)*, i32 (i32, i32*)*, i32 (i32, float)*, i32 (i32, float*)*, i32 (i32, i32)*, i32 (i32, i32*)*, i32 (i32, i32, i32*)*, i32 (i32, i32*, i32*)*, i32 (i32, i32)*, i32 (i32, i32*)*, i32 (i32, i32)*, i32 (i32, i32*)*, i32 (i32, i32)*, i32 (i32, i32*)*, i32 (i32, i32)*, i32 (i32, i32*)*, i32 (i32, i32)*, i32 (i32, i32*)*, i32 (i32, i32)*, i32 (i32, i32*)*, i32 (i32, %struct._opvp_brush*)*, i32 (i32, %struct._opvp_brush*)*, i32 (i32, %struct._opvp_brush*)*, i32 (i32)*, i32 (i32)*, i32 (i32)*, i32 (i32)*, i32 (i32)*, i32 (i32, i32)*, i32 (i32)*, i32 (i32, i32, i32)*, i32 (i32, i32, i32, %struct._opvp_point*)*, i32 (i32, i32, i32*, %struct._opvp_point*)*, i32 (i32, i32, %struct._opvp_rectangle*)*, i32 (i32, i32, %struct._opvp_roundrectangle*)*, i32 (i32, i32, %struct._opvp_point*)*, i32 (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (i32, i32, i32, i32, i32, i32, i32, i8*)*, i32 (i32, i32, i32, i32, i32, i32, i32)*, i32 (i32, i32, i8*)*, i32 (i32)*, i32 (i32, i32)*, i32 (i32, i32, i32*)*, i32 (i32)*, i32 (i32, i32)*, i32 (i32, i32, i8*)*, i32 (i32, i32)*, i32 (i32)*, i32 (i32)*, i32 (i32, i32, i8*)*, i32 (i32)* }
%struct._opvp_ctm = type { float, float, float, float, float, float }
%struct._opvp_brush = type { i32, [4 x i32], i32, i32, %struct._opvp_brushdata* }
%struct._opvp_brushdata = type { i32, i32, i32, i32, [0 x i8] }
%struct._opvp_point = type { i32, i32 }
%struct._opvp_rectangle = type { %struct._opvp_point, %struct._opvp_point }
%struct._opvp_roundrectangle = type { %struct._opvp_point, %struct._opvp_point, i32, i32 }
%struct._OPVP_api_procs = type { {}*, i32 (i32)*, i32 (i32, i8*)*, i32 (i32)*, i32 (i32, i8*)*, i32 (i32)*, i32 (i32, i8*)*, i32 (i32)*, i32 (i32, i32, i32, i8*)*, i32 (i32, i32, i32, i8*)*, i32 (i32)*, i32 (i32, %struct._OPVP_CTM*)*, i32 (i32, %struct._OPVP_CTM*)*, i32 (i32)*, i32 (i32)*, i32 (i32)*, i32 (i32, i32*, i32*)*, i32 (i32, i32)*, i32 (i32, i32*)*, i32 (i32, i32*, i32*)*, i32 (i32, i32)*, i32 (i32, i32*)*, i32 (i32, i32)*, i32 (i32, i32*)*, i32 (i32, float)*, i32 (i32, float*)*, i32 (i32, i32)*, i32 (i32, i32*)*, i32 (i32, i32*, i32)*, i32 (i32, i32*, i32*)*, i32 (i32, i32)*, i32 (i32, i32*)*, i32 (i32, i32)*, i32 (i32, i32*)*, i32 (i32, i32)*, i32 (i32, i32*)*, i32 (i32, i32)*, i32 (i32, i32*)*, i32 (i32, i32)*, i32 (i32, i32*)*, i32 (i32, i32)*, i32 (i32, i32*)*, i32 (i32, %struct._OPVP_Brush*)*, i32 (i32, %struct._OPVP_Brush*)*, i32 (i32, %struct._OPVP_Brush*)*, i32 (i32)*, i32 (i32)*, i32 (i32)*, i32 (i32)*, i32 (i32)*, i32 (i32, i32)*, i32 (i32)*, i32 (i32, i32, i32)*, i32 (i32, i32, i32, %struct._OPVP_Point*)*, i32 (i32, i32, i32*, %struct._OPVP_Point*)*, i32 (i32, i32, %struct._OPVP_Rectangle*)*, i32 (i32, i32, %struct._OPVP_RoundRectangle*)*, i32 (i32, i32, %struct._OPVP_Point*)*, i32 (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (i32, i32, i32, i32, i8*)*, i32 (i32, i32, i32, i32, i32, %struct._OPVP_Rectangle*, i32, i8*)*, i32 (i32, i32, i32, i32, i32, %struct._OPVP_Rectangle*)*, i32 (i32, i32, i8*)*, i32 (i32)*, i32 (i32, i32)*, i32 (i32, i32, i32*)*, i32 (i32)*, i32 (i32, i32)*, i32 (i32, i32, i8*)*, i32 (i32, i32)*, i32 (i32)*, i32 (i32)*, i32 (i32, i32, i8*)*, i32 (i32)* }
%struct._OPVP_CTM = type { float, float, float, float, float, float }
%struct._OPVP_Brush = type { i32, [4 x i32], i32, i32, %struct._OPVP_BrushData* }
%struct._OPVP_BrushData = type { i32, i32, i32, i32, [1 x i8] }
%struct._OPVP_Point = type { i32, i32 }
%struct._OPVP_Rectangle = type { %struct._OPVP_Point, %struct._OPVP_Point }
%struct._OPVP_RoundRectangle = type { %struct._OPVP_Point, %struct._OPVP_Point, i32, i32 }
%struct.gx_device_oprp_s = type { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s, [11240 x i8], %struct.gx_printer_device_procs_s, [4096 x i8], i32, i32, i32, i32, i32, i32, %struct._IO_FILE*, i64, i8*, %struct.gs_memory_s*, %struct.gs_memory_s*, i32 (%struct.gx_device_s*, i32)*, %struct.gx_page_queue_s*, i32, %struct.gx_device_printer_s*, i32, i32, %struct.bg_print_s, i32, %struct.gx_saved_pages_list_s*, %struct.gx_device_procs_s, %struct.gx_device_procs_s }
%struct.gdev_vector_image_enum_s = type { %struct.gx_image_type_s*, %struct.gx_image_enum_procs_s*, %struct.gx_device_s*, %struct.gs_memory_s*, i64, i32, i32, [65 x i32], [65 x i32], %struct.gx_image_enum_common_s*, %struct.gx_image_enum_common_s*, i32, i32, i32, i32, i32 }
%struct.gs_indexed_params_s = type { i32, i32, %union.anon.0, i32 }
%union.anon.0 = type { %struct.gs_const_string_s }
%struct.gs_path_enum_s = type { %struct.gs_memory_s*, %struct.gs_matrix_s, %struct.segment_s*, %struct.gx_path_s*, %struct.gx_path_s*, i32, i32 }
%struct._fPoint = type { double, double }
%struct.bbox_image_enum_s = type { %struct.gx_image_type_s*, %struct.gx_image_enum_procs_s*, %struct.gx_device_s*, %struct.gs_memory_s*, i64, i32, i32, [65 x i32], [65 x i32], %struct.gs_matrix_s, %struct.gx_clip_path_s*, %struct.gx_image_enum_common_s*, i32, i32, i32, i32, i32 }
%struct.gx_image_enum_s = type { %struct.gx_image_type_s*, %struct.gx_image_enum_procs_s*, %struct.gx_device_s*, %struct.gs_memory_s*, i64, i32, i32, [65 x i32], [65 x i32], i32, i32, i8, i8, i8, i8, i32, %struct.mc_, i8, i8, i8, i8, %struct.gs_matrix_s, %struct.r_, %struct.anon.2, i32, i32, %struct.gs_fixed_point_s, %struct.gs_fixed_point_s, i8* (i8*, i32*, i8*, i32, i32, %struct.sample_map_s*, i32, i32)*, i32 (%struct.gx_image_enum_s*, i8*, i32, i32, i32, %struct.gx_device_s*)*, %struct.gs_imager_state_s*, %struct.gs_color_space_s*, i8*, i32, i8*, i32, i32, i32, i8, i8, i8, i8, %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s, i32, i32, i32, i32, %struct.gx_device_clip_s*, %struct.gx_device_rop_texture_s*, %struct.stream_image_scale_state_s*, i32, %struct.gs_int_point_s, %struct.gs_fixed_point_s, %struct.gs_fixed_point_s, %struct.dd_, i32, i32, %struct.gs_int_point_s, i32, i32, i32, i32, i32, [65 x %struct.sample_map_s], %struct.gx_image_clue_s*, %struct.gx_device_color_s, %struct.gx_device_color_s, %struct.gx_device_color_s*, %struct.gx_device_color_s*, %struct.gsicc_link_s*, %struct.gx_image_color_cache_s*, i8*, i32, i32, i32, i8*, i32, i32, %struct.ht_landscape_info_s, %struct.gx_image_icc_setup_s, i32 }
%struct.mc_ = type { [130 x i32], i32, i32, i32 }
%struct.r_ = type { i32, i32, i32, i32 }
%struct.anon.2 = type { i32, i32, i32, i32 }
%struct.sample_map_s = type { %union.sample_lookup_s, [16 x float], float, i32, i32 }
%union.sample_lookup_s = type { [16 x i32], [192 x i8] }
%struct.gx_device_clip_s = type { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s, %struct.gx_device_s*, %struct.gx_clip_list_s, %struct.gx_clip_rect_s*, %struct.gs_int_point_s, %struct.gs_fixed_rect_s, i32 }
%struct.gx_device_rop_texture_s = type opaque
%struct.stream_image_scale_state_s = type { %struct.stream_template_s*, %struct.gs_memory_s*, i32 (%struct.stream_state_s*, i8*)*, i32, [80 x i8], %struct.stream_image_scale_params_s }
%struct.stream_image_scale_params_s = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.dd_ = type { %struct.gx_dda_fixed_point_s, %struct.gx_dda_fixed_point_s, %struct.gx_dda_fixed_point_s }
%struct.gx_dda_fixed_point_s = type { %struct.gx_dda_fixed_s, %struct.gx_dda_fixed_s }
%struct.gx_dda_fixed_s = type { %struct._a, %struct._e }
%struct._a = type { i32, i32 }
%struct._e = type { i32, i32, i32 }
%struct.gx_image_clue_s = type { %struct.gx_device_color_s, i32 }
%struct.gx_image_color_cache_s = type { i32*, i8* }
%struct.ht_landscape_info_s = type { i32, [64 x i32], i32, i32, i32, i32, i32, i32, i32 }
%struct.gx_image_icc_setup_s = type { i32, i32, i32, i32 }

@.str = private unnamed_addr constant [4 x i8] c"iso\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"a10\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"c10\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"b10\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"jis\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"a9\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"c9\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"b9\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"a8\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"c8\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"b8\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"a7\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"na\00", align 1
@.str.13 = private unnamed_addr constant [10 x i8] c"index-3x5\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"c7\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"c7c6\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"b7\00", align 1
@.str.17 = private unnamed_addr constant [4 x i8] c"jpn\00", align 1
@.str.18 = private unnamed_addr constant [6 x i8] c"chou4\00", align 1
@.str.19 = private unnamed_addr constant [9 x i8] c"personal\00", align 1
@.str.20 = private unnamed_addr constant [4 x i8] c"prc\00", align 1
@.str.21 = private unnamed_addr constant [4 x i8] c"32k\00", align 1
@.str.22 = private unnamed_addr constant [8 x i8] c"monarch\00", align 1
@.str.23 = private unnamed_addr constant [9 x i8] c"number-9\00", align 1
@.str.24 = private unnamed_addr constant [7 x i8] c"hagaki\00", align 1
@.str.25 = private unnamed_addr constant [3 x i8] c"om\00", align 1
@.str.26 = private unnamed_addr constant [12 x i8] c"small-photo\00", align 1
@.str.27 = private unnamed_addr constant [8 x i8] c"italian\00", align 1
@.str.28 = private unnamed_addr constant [10 x i8] c"index-4x6\00", align 1
@.str.29 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.30 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@.str.31 = private unnamed_addr constant [10 x i8] c"number-10\00", align 1
@.str.32 = private unnamed_addr constant [3 x i8] c"a6\00", align 1
@.str.33 = private unnamed_addr constant [5 x i8] c"you4\00", align 1
@.str.34 = private unnamed_addr constant [2 x i8] c"4\00", align 1
@.str.35 = private unnamed_addr constant [3 x i8] c"dl\00", align 1
@.str.36 = private unnamed_addr constant [2 x i8] c"5\00", align 1
@.str.37 = private unnamed_addr constant [6 x i8] c"chou2\00", align 1
@.str.38 = private unnamed_addr constant [3 x i8] c"a2\00", align 1
@.str.39 = private unnamed_addr constant [3 x i8] c"c6\00", align 1
@.str.40 = private unnamed_addr constant [5 x i8] c"c6c5\00", align 1
@.str.41 = private unnamed_addr constant [8 x i8] c"postfix\00", align 1
@.str.42 = private unnamed_addr constant [10 x i8] c"number-11\00", align 1
@.str.43 = private unnamed_addr constant [6 x i8] c"chou3\00", align 1
@.str.44 = private unnamed_addr constant [2 x i8] c"8\00", align 1
@.str.45 = private unnamed_addr constant [2 x i8] c"6\00", align 1
@.str.46 = private unnamed_addr constant [10 x i8] c"number-12\00", align 1
@.str.47 = private unnamed_addr constant [3 x i8] c"b6\00", align 1
@.str.48 = private unnamed_addr constant [2 x i8] c"3\00", align 1
@.str.49 = private unnamed_addr constant [5 x i8] c"b6c4\00", align 1
@.str.50 = private unnamed_addr constant [4 x i8] c"5x7\00", align 1
@.str.51 = private unnamed_addr constant [10 x i8] c"index-5x8\00", align 1
@.str.52 = private unnamed_addr constant [10 x i8] c"number-14\00", align 1
@.str.53 = private unnamed_addr constant [8 x i8] c"invoice\00", align 1
@.str.54 = private unnamed_addr constant [4 x i8] c"16k\00", align 1
@.str.55 = private unnamed_addr constant [7 x i8] c"oufuku\00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"a5\00", align 1
@.str.57 = private unnamed_addr constant [14 x i8] c"index-4x6-ext\00", align 1
@.str.58 = private unnamed_addr constant [4 x i8] c"6x9\00", align 1
@.str.59 = private unnamed_addr constant [2 x i8] c"7\00", align 1
@.str.60 = private unnamed_addr constant [3 x i8] c"c5\00", align 1
@.str.61 = private unnamed_addr constant [9 x i8] c"a5-extra\00", align 1
@.str.62 = private unnamed_addr constant [3 x i8] c"b5\00", align 1
@.str.63 = private unnamed_addr constant [4 x i8] c"7x9\00", align 1
@.str.64 = private unnamed_addr constant [10 x i8] c"executive\00", align 1
@.str.65 = private unnamed_addr constant [4 x i8] c"roc\00", align 1
@.str.66 = private unnamed_addr constant [13 x i8] c"juuro-ku-kai\00", align 1
@.str.67 = private unnamed_addr constant [12 x i8] c"large-photo\00", align 1
@.str.68 = private unnamed_addr constant [9 x i8] c"b5-extra\00", align 1
@.str.69 = private unnamed_addr constant [12 x i8] c"govt-letter\00", align 1
@.str.70 = private unnamed_addr constant [11 x i8] c"govt-legal\00", align 1
@.str.71 = private unnamed_addr constant [3 x i8] c"a4\00", align 1
@.str.72 = private unnamed_addr constant [6 x i8] c"folio\00", align 1
@.str.73 = private unnamed_addr constant [9 x i8] c"folio-sp\00", align 1
@.str.74 = private unnamed_addr constant [7 x i8] c"quarto\00", align 1
@.str.75 = private unnamed_addr constant [7 x i8] c"letter\00", align 1
@.str.76 = private unnamed_addr constant [12 x i8] c"fanfold-eur\00", align 1
@.str.77 = private unnamed_addr constant [12 x i8] c"letter-plus\00", align 1
@.str.78 = private unnamed_addr constant [9 x i8] c"foolscap\00", align 1
@.str.79 = private unnamed_addr constant [6 x i8] c"legal\00", align 1
@.str.80 = private unnamed_addr constant [5 x i8] c"exec\00", align 1
@.str.81 = private unnamed_addr constant [7 x i8] c"invite\00", align 1
@.str.82 = private unnamed_addr constant [7 x i8] c"a4-tab\00", align 1
@.str.83 = private unnamed_addr constant [8 x i8] c"super-a\00", align 1
@.str.84 = private unnamed_addr constant [5 x i8] c"9x11\00", align 1
@.str.85 = private unnamed_addr constant [7 x i8] c"arch-a\00", align 1
@.str.86 = private unnamed_addr constant [3 x i8] c"c4\00", align 1
@.str.87 = private unnamed_addr constant [9 x i8] c"a4-extra\00", align 1
@.str.88 = private unnamed_addr constant [5 x i8] c"kahu\00", align 1
@.str.89 = private unnamed_addr constant [6 x i8] c"kaku2\00", align 1
@.str.90 = private unnamed_addr constant [13 x i8] c"letter-extra\00", align 1
@.str.91 = private unnamed_addr constant [12 x i8] c"legal-extra\00", align 1
@.str.92 = private unnamed_addr constant [3 x i8] c"b4\00", align 1
@.str.93 = private unnamed_addr constant [6 x i8] c"10x11\00", align 1
@.str.94 = private unnamed_addr constant [6 x i8] c"10x13\00", align 1
@.str.95 = private unnamed_addr constant [6 x i8] c"10x14\00", align 1
@.str.96 = private unnamed_addr constant [6 x i8] c"10x15\00", align 1
@.str.97 = private unnamed_addr constant [7 x i8] c"pa-kai\00", align 1
@.str.98 = private unnamed_addr constant [3 x i8] c"8k\00", align 1
@.str.99 = private unnamed_addr constant [11 x i8] c"dai-pa-kai\00", align 1
@.str.100 = private unnamed_addr constant [6 x i8] c"11x12\00", align 1
@.str.101 = private unnamed_addr constant [4 x i8] c"edp\00", align 1
@.str.102 = private unnamed_addr constant [11 x i8] c"fanfold-us\00", align 1
@.str.103 = private unnamed_addr constant [6 x i8] c"11x15\00", align 1
@.str.104 = private unnamed_addr constant [7 x i8] c"ledger\00", align 1
@.str.105 = private unnamed_addr constant [3 x i8] c"a3\00", align 1
@.str.106 = private unnamed_addr constant [5 x i8] c"a4x3\00", align 1
@.str.107 = private unnamed_addr constant [5 x i8] c"a4x4\00", align 1
@.str.108 = private unnamed_addr constant [5 x i8] c"a4x5\00", align 1
@.str.109 = private unnamed_addr constant [5 x i8] c"a4x6\00", align 1
@.str.110 = private unnamed_addr constant [5 x i8] c"a4x7\00", align 1
@.str.111 = private unnamed_addr constant [5 x i8] c"a4x8\00", align 1
@.str.112 = private unnamed_addr constant [5 x i8] c"a4x9\00", align 1
@.str.113 = private unnamed_addr constant [8 x i8] c"eur-edp\00", align 1
@.str.114 = private unnamed_addr constant [7 x i8] c"arch-b\00", align 1
@.str.115 = private unnamed_addr constant [6 x i8] c"12x19\00", align 1
@.str.116 = private unnamed_addr constant [7 x i8] c"b-plus\00", align 1
@.str.117 = private unnamed_addr constant [9 x i8] c"a3-extra\00", align 1
@.str.118 = private unnamed_addr constant [3 x i8] c"c3\00", align 1
@.str.119 = private unnamed_addr constant [3 x i8] c"10\00", align 1
@.str.120 = private unnamed_addr constant [8 x i8] c"super-b\00", align 1
@.str.121 = private unnamed_addr constant [3 x i8] c"b3\00", align 1
@.str.122 = private unnamed_addr constant [5 x i8] c"a3x3\00", align 1
@.str.123 = private unnamed_addr constant [5 x i8] c"a3x4\00", align 1
@.str.124 = private unnamed_addr constant [5 x i8] c"a3x5\00", align 1
@.str.125 = private unnamed_addr constant [5 x i8] c"a3x6\00", align 1
@.str.126 = private unnamed_addr constant [5 x i8] c"a3x7\00", align 1
@.str.127 = private unnamed_addr constant [4 x i8] c"ra2\00", align 1
@.str.128 = private unnamed_addr constant [2 x i8] c"c\00", align 1
@.str.129 = private unnamed_addr constant [5 x i8] c"sra2\00", align 1
@.str.130 = private unnamed_addr constant [7 x i8] c"arch-c\00", align 1
@.str.131 = private unnamed_addr constant [3 x i8] c"c2\00", align 1
@.str.132 = private unnamed_addr constant [3 x i8] c"b2\00", align 1
@.str.133 = private unnamed_addr constant [2 x i8] c"d\00", align 1
@.str.134 = private unnamed_addr constant [3 x i8] c"a1\00", align 1
@.str.135 = private unnamed_addr constant [5 x i8] c"a2x3\00", align 1
@.str.136 = private unnamed_addr constant [5 x i8] c"a2x4\00", align 1
@.str.137 = private unnamed_addr constant [5 x i8] c"a2x5\00", align 1
@.str.138 = private unnamed_addr constant [7 x i8] c"arch-d\00", align 1
@.str.139 = private unnamed_addr constant [4 x i8] c"ra1\00", align 1
@.str.140 = private unnamed_addr constant [5 x i8] c"sra1\00", align 1
@.str.141 = private unnamed_addr constant [3 x i8] c"c1\00", align 1
@.str.142 = private unnamed_addr constant [3 x i8] c"b1\00", align 1
@.str.143 = private unnamed_addr constant [5 x i8] c"asme\00", align 1
@.str.144 = private unnamed_addr constant [2 x i8] c"f\00", align 1
@.str.145 = private unnamed_addr constant [12 x i8] c"wide-format\00", align 1
@.str.146 = private unnamed_addr constant [3 x i8] c"a0\00", align 1
@.str.147 = private unnamed_addr constant [5 x i8] c"a1x3\00", align 1
@.str.148 = private unnamed_addr constant [5 x i8] c"a1x4\00", align 1
@.str.149 = private unnamed_addr constant [4 x i8] c"ra0\00", align 1
@.str.150 = private unnamed_addr constant [2 x i8] c"e\00", align 1
@.str.151 = private unnamed_addr constant [5 x i8] c"sra0\00", align 1
@.str.152 = private unnamed_addr constant [7 x i8] c"arch-e\00", align 1
@.str.153 = private unnamed_addr constant [3 x i8] c"c0\00", align 1
@.str.154 = private unnamed_addr constant [3 x i8] c"b0\00", align 1
@.str.155 = private unnamed_addr constant [4 x i8] c"2a0\00", align 1
@.str.156 = private unnamed_addr constant [5 x i8] c"a0x3\00", align 1
@.str.157 = private unnamed_addr constant [4 x i8] c"4a0\00", align 1
@paperTable = global [166 x %struct.OPVP_Paper] [%struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), float 0x40526CD9C0000000, float 0x405A3870E0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), float 0x4053D7AF60000000, float 0x405C58B160000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), float 0x4055F7EFE0000000, float 0x405F2E5CC0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), float 0x4056AD5AC0000000, float 0x405FE3C780000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), float 0x405A3870E0000000, float 0x40626CD9C0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0), float 0x405C58B160000000, float 0x40643264C0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), float 0x405F2E5CC0000000, float 0x4065F7EFE0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), float 0x405FE3C780000000, float 0x4066AD5AC0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i32 0, i32 0), float 0x40626CD9C0000000, float 0x406A3870E0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0), float 0x40643264C0000000, float 0x406CB366C0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0), float 0x4065F7EFE0000000, float 0x406F2E5CC0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0), float 0x4066AD5AC0000000, float 0x40701F3E80000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0), float 0x406A3870E0000000, float 0x40729A3460000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i32 0, i32 0), float 2.160000e+02, float 3.600000e+02 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), float 0x406CB366C0000000, float 0x40743264C0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0), float 0x406CB366C0000000, float 0x407CB366C0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0), float 0x406F2E5CC0000000, float 0x4076254AA0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.18, i32 0, i32 0), float 0x406FE3C780000000, float 0x408228D1A0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0), float 0x40701F3E80000000, float 0x4076AD5AC0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.19, i32 0, i32 0), float 2.610000e+02, float 4.680000e+02 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.21, i32 0, i32 0), float 0x40712F5EC0000000, float 0x407AC08100000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.22, i32 0, i32 0), float 2.790000e+02, float 5.400000e+02 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.23, i32 0, i32 0), float 2.790000e+02, float 6.390000e+02 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i32 0, i32 0), float 0x4071B76EE0000000, float 0x407A3870E0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.26, i32 0, i32 0), float 0x4071B76EE0000000, float 0x407A932640000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.27, i32 0, i32 0), float 0x4071B76EE0000000, float 0x40845FBF80000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.28, i32 0, i32 0), float 2.880000e+02, float 4.320000e+02 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.29, i32 0, i32 0), float 0x4072122440000000, float 0x407D3B76E0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30, i32 0, i32 0), float 0x4072122440000000, float 0x407F2E5CC0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.31, i32 0, i32 0), float 2.970000e+02, float 6.840000e+02 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32, i32 0, i32 0), float 0x40729A3460000000, float 0x407A3870E0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33, i32 0, i32 0), float 0x40729A3460000000, float 0x4084D12240000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0), float 0x40737CFA00000000, float 0x40826CD9C0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0), float 0x40737CFA00000000, float 0x40837CFA00000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i32 0, i32 0), float 0x40737CFA00000000, float 0x40837CFA00000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.37, i32 0, i32 0), float 0x4073AEDDC0000000, float 0x4079DDBB80000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.38, i32 0, i32 0), float 3.150000e+02, float 4.140000e+02 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.39, i32 0, i32 0), float 0x40743264C0000000, float 0x407CB366C0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.40, i32 0, i32 0), float 0x40743264C0000000, float 0x4084491220000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.41, i32 0, i32 0), float 0x40743264C0000000, float 0x4084491220000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.42, i32 0, i32 0), float 3.240000e+02, float 7.470000e+02 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.43, i32 0, i32 0), float 0x4075428500000000, float 0x4084D12240000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.44, i32 0, i32 0), float 0x4075428500000000, float 0x408B5F3E80000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i32 0, i32 0), float 0x4075428500000000, float 0x408C58B160000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.46, i32 0, i32 0), float 3.420000e+02, float 7.920000e+02 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.47, i32 0, i32 0), float 0x4076254AA0000000, float 0x407F2E5CC0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.48, i32 0, i32 0), float 0x4076254AA0000000, float 0x407F2E5CC0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.49, i32 0, i32 0), float 0x4076254AA0000000, float 0x408CB366C0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.50, i32 0, i32 0), float 3.600000e+02, float 5.040000e+02 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.51, i32 0, i32 0), float 3.600000e+02, float 5.760000e+02 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.52, i32 0, i32 0), float 3.600000e+02, float 8.280000e+02 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.47, i32 0, i32 0), float 0x4076AD5AC0000000, float 0x40801F3E80000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.53, i32 0, i32 0), float 3.960000e+02, float 6.120000e+02 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i32 0, i32 0), float 0x4079DDBB80000000, float 0x40830B9720000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.55, i32 0, i32 0), float 0x407A3870E0000000, float 0x4081B76EE0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0), float 0x407A3870E0000000, float 0x40829A3460000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.57, i32 0, i32 0), float 4.320000e+02, float 5.760000e+02 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.58, i32 0, i32 0), float 4.320000e+02, float 6.480000e+02 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.59, i32 0, i32 0), float 0x407C58B160000000, float 0x40845FBF80000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.60, i32 0, i32 0), float 0x407CB366C0000000, float 0x4084491220000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.60, i32 0, i32 0), float 4.680000e+02, float 6.840000e+02 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.61, i32 0, i32 0), float 0x407ED3A740000000, float 0x4084D12240000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.62, i32 0, i32 0), float 0x407F2E5CC0000000, float 0x4086254AA0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.63, i32 0, i32 0), float 5.040000e+02, float 6.480000e+02 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.62, i32 0, i32 0), float 0x40801F3E80000000, float 0x4086C40820000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.64, i32 0, i32 0), float 5.220000e+02, float 7.560000e+02 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i32 0, i32 0), float 5.580000e+02, float 7.740000e+02 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.66, i32 0, i32 0), float 0x40818A1420000000, float 0x40885C3880000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.67, i32 0, i32 0), float 0x4081B76EE0000000, float 0x408A932640000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.68, i32 0, i32 0), float 0x4081CE1C40000000, float 0x408872E5C0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.69, i32 0, i32 0), float 5.760000e+02, float 7.200000e+02 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.70, i32 0, i32 0), float 5.760000e+02, float 9.360000e+02 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.71, i32 0, i32 0), float 0x40829A3460000000, float 0x408A4F1E40000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.72, i32 0, i32 0), float 0x40829A3460000000, float 0x408D3B76E0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.73, i32 0, i32 0), float 0x40830B9720000000, float 0x408BE74EA0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.74, i32 0, i32 0), float 6.120000e+02, float 0x40885E1480000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.75, i32 0, i32 0), float 6.120000e+02, float 7.920000e+02 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.76, i32 0, i32 0), float 6.120000e+02, float 8.640000e+02 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.77, i32 0, i32 0), float 6.120000e+02, float 0x408C8D70A0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.78, i32 0, i32 0), float 6.120000e+02, float 9.360000e+02 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.79, i32 0, i32 0), float 6.120000e+02, float 1.008000e+03 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.80, i32 0, i32 0), float 0x4083224480000000, float 0x408D3B76E0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.81, i32 0, i32 0), float 0x40837CFA00000000, float 0x40837CFA00000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.82, i32 0, i32 0), float 0x4083EE5CC0000000, float 0x408A4F1E40000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.83, i32 0, i32 0), float 0x40841D70A0000000, float 1.008000e+03 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.84, i32 0, i32 0), float 6.480000e+02, float 7.920000e+02 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.85, i32 0, i32 0), float 6.480000e+02, float 8.640000e+02 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.86, i32 0, i32 0), float 0x4084491220000000, float 0x408CB366C0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.87, i32 0, i32 0), float 0x4084DC7900000000, float 0x408C8CD9C0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.88, i32 0, i32 0), float 0x4085428500000000, float 0x408C8850A0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.89, i32 0, i32 0), float 0x4085428500000000, float 0x408D68D1A0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.90, i32 0, i32 0), float 6.840000e+02, float 8.640000e+02 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.91, i32 0, i32 0), float 6.840000e+02, float 1.080000e+03 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.92, i32 0, i32 0), float 0x4086254AA0000000, float 0x408F450A20000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.93, i32 0, i32 0), float 7.200000e+02, float 7.920000e+02 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.94, i32 0, i32 0), float 7.200000e+02, float 9.360000e+02 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.95, i32 0, i32 0), float 7.200000e+02, float 1.008000e+03 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.96, i32 0, i32 0), float 7.200000e+02, float 1.080000e+03 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.92, i32 0, i32 0), float 0x4086C40820000000, float 0x40901F3E80000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.97, i32 0, i32 0), float 0x4087A6CDA0000000, float 0x40913AB560000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.98, i32 0, i32 0), float 7.740000e+02, float 1.116000e+03 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.99, i32 0, i32 0), float 0x40885C3880000000, float 0x40917EBD80000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.100, i32 0, i32 0), float 7.920000e+02, float 8.640000e+02 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.101, i32 0, i32 0), float 7.920000e+02, float 1.008000e+03 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.102, i32 0, i32 0), float 7.920000e+02, float 1.071000e+03 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.103, i32 0, i32 0), float 7.920000e+02, float 1.080000e+03 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.104, i32 0, i32 0), float 7.920000e+02, float 1.224000e+03 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.105, i32 0, i32 0), float 0x408A4F1E40000000, float 0x40929A3460000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.106, i32 0, i32 0), float 0x408A4F1E40000000, float 0x409BE74EA0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.107, i32 0, i32 0), float 0x408A4F1E40000000, float 0x40A29FDFC0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.108, i32 0, i32 0), float 0x408A4F1E40000000, float 0x40A7466CE0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.109, i32 0, i32 0), float 0x408A4F1E40000000, float 0x40ABECFA00000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.110, i32 0, i32 0), float 0x408A4F1E40000000, float 0x40B049C380000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.111, i32 0, i32 0), float 0x408A4F1E40000000, float 0x40B29FDFC0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.112, i32 0, i32 0), float 0x408A4F1E40000000, float 0x40B4F32640000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.113, i32 0, i32 0), float 8.640000e+02, float 1.008000e+03 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.114, i32 0, i32 0), float 8.640000e+02, float 1.296000e+03 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.115, i32 0, i32 0), float 8.640000e+02, float 1.368000e+03 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.116, i32 0, i32 0), float 8.640000e+02, float 0x409590F5C0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.117, i32 0, i32 0), float 0x408C860C20000000, float 0x4093B5AB60000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.118, i32 0, i32 0), float 0x408CB366C0000000, float 0x4094491220000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), float 0x408CB366C0000000, float 0x4094491220000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.120, i32 0, i32 0), float 9.360000e+02, float 1.368000e+03 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.121, i32 0, i32 0), float 0x408F450A20000000, float 0x4096254AA0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.121, i32 0, i32 0), float 0x40901F3E80000000, float 0x4096CF5EC0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.38, i32 0, i32 0), float 0x40929A3460000000, float 0x409A4F1E40000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.122, i32 0, i32 0), float 0x40929A3460000000, float 0x40A3BB56A0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.123, i32 0, i32 0), float 0x40929A3460000000, float 0x40AA54C9A0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.124, i32 0, i32 0), float 0x40929A3460000000, float 0x40B07448A0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.125, i32 0, i32 0), float 0x40929A3460000000, float 0x40B3BE2C60000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.126, i32 0, i32 0), float 0x40929A3460000000, float 0x40B7081020000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.127, i32 0, i32 0), float 0x40930B9720000000, float 0x409B048920000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.128, i32 0, i32 0), float 1.224000e+03, float 1.584000e+03 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.129, i32 0, i32 0), float 0x4093EE5CC0000000, float 0x409C58B160000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.130, i32 0, i32 0), float 1.296000e+03, float 1.728000e+03 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.131, i32 0, i32 0), float 0x4094491220000000, float 0x409CB366C0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.132, i32 0, i32 0), float 0x4096254AA0000000, float 0x409F5060C0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.132, i32 0, i32 0), float 0x4096CF5EC0000000, float 0x40A01F3E80000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.133, i32 0, i32 0), float 1.584000e+03, float 2.448000e+03 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.134, i32 0, i32 0), float 0x409A4F1E40000000, float 0x40A29FDFC0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.135, i32 0, i32 0), float 0x409A4F1E40000000, float 0x40ABECFA00000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.136, i32 0, i32 0), float 0x409A4F1E40000000, float 0x40B29FDFC0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.137, i32 0, i32 0), float 0x409A4F1E40000000, float 0x40B7466CE0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.138, i32 0, i32 0), float 1.728000e+03, float 2.592000e+03 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.139, i32 0, i32 0), float 0x409B048920000000, float 0x40A30B9720000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.140, i32 0, i32 0), float 0x409C58B160000000, float 0x40A3EE5CC0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.141, i32 0, i32 0), float 0x409CB366C0000000, float 0x40A44EBD80000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.142, i32 0, i32 0), float 0x409F5060C0000000, float 0x40A6254AA0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.143, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.144, i32 0, i32 0), float 2.016000e+03, float 2.880000e+03 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.142, i32 0, i32 0), float 0x40A01F3E80000000, float 0x40A6CF5EC0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.145, i32 0, i32 0), float 2.160000e+03, float 3.024000e+03 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.146, i32 0, i32 0), float 0x40A29FDFC0000000, float 0x40AA54C9A0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.147, i32 0, i32 0), float 0x40A29FDFC0000000, float 0x40B3BE2C60000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.148, i32 0, i32 0), float 0x40A29FDFC0000000, float 0x40BA54C9A0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.149, i32 0, i32 0), float 0x40A30B9720000000, float 0x40AB048920000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.150, i32 0, i32 0), float 2.448000e+03, float 3.168000e+03 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.151, i32 0, i32 0), float 0x40A3EE5CC0000000, float 0x40AC58B160000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.152, i32 0, i32 0), float 2.592000e+03, float 3.456000e+03 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.153, i32 0, i32 0), float 0x40A44EBD80000000, float 0x40ACB91220000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.154, i32 0, i32 0), float 0x40A6254AA0000000, float 0x40AF5060C0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.154, i32 0, i32 0), float 0x40A6CF5EC0000000, float 0x40B01F3E80000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.144, i32 0, i32 0), float 3.168000e+03, float 4.896000e+03 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.155, i32 0, i32 0), float 0x40AA54C9A0000000, float 0x40B29FDFC0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.156, i32 0, i32 0), float 0x40AA54C9A0000000, float 0x40BBEFCFA0000000 }, %struct.OPVP_Paper { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.157, i32 0, i32 0), float 0x40B29FDFC0000000, float 0x40BA54C9A0000000 }, %struct.OPVP_Paper zeroinitializer], align 16
@.str.158 = private unnamed_addr constant [15 x i8] c"gx_device_opvp\00", align 1
@st_device_opvp = constant { i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* } { i32 8848, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.158, i32 0, i32 0), %struct.struct_shared_procs_s* null, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)* null, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)* @device_opvp_enum_ptrs, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)* @device_opvp_reloc_ptrs, void (%struct.gs_memory_s*, i8*)* @gx_device_finalize, i8* null }, align 8
@.str.159 = private unnamed_addr constant [5 x i8] c"opvp\00", align 1
@.str.160 = private unnamed_addr constant [10 x i8] c"DeviceRGB\00", align 1
@gs_opvp_device = constant %struct.gx_device_opvp_s { i32 8848, %struct.gx_device_procs_s* null, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.159, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* bitcast ({ i32, i8*, %struct.struct_shared_procs_s*, void (%struct.gs_memory_s*, i8*, i32, %struct.gs_memory_struct_type_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (%struct.gs_memory_s*, i8*)*, i8* }* @st_device_opvp to %struct.gs_memory_struct_type_s*), i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 3, i32 3, i32 1, i16 24, i8 -1, i32 255, i32 255, i32 256, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.160, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 2479, i32 3508, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x4082980020000000, float 0x408A4FFF60000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 3.000000e+02, float 3.000000e+02], [2 x float] [float 3.000000e+02, float 3.000000e+02], [2 x float] zeroinitializer, [4 x float] zeroinitializer, i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @opvp_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @opvp_get_initial_matrix, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @opvp_output_page, i32 (%struct.gx_device_s*)* @opvp_close, i64 (%struct.gx_device_s*, i16*)* @opvp_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @opvp_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @opvp_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* @opvp_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* @opvp_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @opvp_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @opvp_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @opvp_fill_path, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* @opvp_stroke_path, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* @opvp_fill_mask, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_trapezoid, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_parallelogram, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* @gdev_vector_fill_triangle, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* @opvp_begin_image, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* null, void (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, %struct.gs_memory_s* null, %struct.gx_device_vector_procs_s* null, [4096 x i8] zeroinitializer, %struct._IO_FILE* null, %struct.stream_s* null, i8* null, i32 0, i32 0, %struct.gs_imager_state_s zeroinitializer, float* null, i32 0, i32 0, i32 0, %struct.gx_hl_saved_color_s zeroinitializer, %struct.gx_hl_saved_color_s zeroinitializer, i64 0, i64 0, i32 0, i32 0, %struct.gs_point_s zeroinitializer, i32 0, %struct.gx_device_bbox_s* null, i64 0, i64 0 }, align 8
@prn_oprp_procs = internal global %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @oprp_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* null, i32 (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i32, i32)* @opvp_output_page, i32 (%struct.gx_device_s*)* @opvp_close, i64 (%struct.gx_device_s*, i16*)* @opvp_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @opvp_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i64)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* null, i32 (%struct.gx_device_s*, i32, i8*, i8**)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @oprp_get_params, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* @oprp_put_params, i64 (%struct.gx_device_s*, i16*)* null, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)* null, %struct.gx_device_s* (%struct.gx_device_s*)* null, i64 (%struct.gx_device_s*, i16, i16, i16, i16)* null, %struct.gx_device_s* (%struct.gx_device_s*)* @gx_page_device_get_page_device, i32 (%struct.gx_device_s*, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i64, i32)* null, i32 (%struct.gx_device_s*, i32, i32*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_tile_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i8**, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_image_enum_common_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i64, i64, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32)* null, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_matrix_s*, %struct.gs_image_common_s*, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**)* null, i32 (%struct.gx_device_s*, %struct.gs_int_rect_s*, %struct.gs_get_bits_params_s*, %struct.gs_int_rect_s**)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s**, %struct.gs_composite_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_text_params_s*, %struct.gs_font_s*, %struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gs_text_enum_s**)* null, i32 (%struct.gx_device_s*, %struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_transparency_group_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gx_transparency_mask_params_s*, %struct.gs_rect_s*, %struct.gs_imager_state_s*, %struct.gs_memory_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i64 (%struct.gx_device_s*, i16*)* null, i32 (%struct.gx_device_s*, i64, i16*)* null, i32 (%struct.gx_device_s*, i64, %struct.gs_pattern1_instance_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fixed_rect_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_color_space_s*, i8*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, i32, i32, i32, i32*, i32*, i32*, i32)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_fill_attributes_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, %struct.gs_fixed_point_s*, i32*, i32*, i32*)* null, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* null, %struct.gs_devn_params_s* (%struct.gx_device_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, i32, i8*, i32)* @gdev_prn_dev_spec_op, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.cmm_dev_profile_s**)* @gx_default_get_profile, void (%struct.gx_device_s*, i32)* @gx_default_set_graphics_type_tag, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i64*, %struct.gx_strip_bitmap_s*, i64*, i32, i32, i32, i32, i32, i32, i32, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gx_device_color_s*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)* null, i32 (%struct.gx_device_s*, %struct.gx_process_page_options_s*)* null }, align 8
@.str.161 = private unnamed_addr constant [5 x i8] c"oprp\00", align 1
@st_device_printer = external constant %struct.gs_memory_struct_type_s, align 8
@gs_oprp_device = constant { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, void (%struct.gx_device_s*)*, %struct.rc_header_s, i32, i32, i32, %struct.gx_device_color_info_s, %struct.gx_device_cached_colors_s, i32, i32, i32, i32, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i64, i64, i32, i32, i32, i32, i32, i64, i64, %struct.gx_stroked_gradient_recognizer_s, i32, i32, %struct.gdev_space_params_s, %struct.cmm_dev_profile_s*, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s, [11240 x i8], { i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*)*, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)*, %struct.gx_device_buf_procs_s, void (%struct.gx_device_printer_s*, %struct.gdev_space_params_s*)*, i32 (%struct.gdev_prn_start_render_params_s*)*, i32 (%struct.gx_device_printer_s*)*, i32 (%struct.gx_device_printer_s*)*, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)* }, [4096 x i8], i32, i32, i32, i32, i32, i32, %struct._IO_FILE*, i64, i8*, %struct.gs_memory_s*, %struct.gs_memory_s*, i32 (%struct.gx_device_s*, i32)*, %struct.gx_page_queue_s*, i32, %struct.gx_device_printer_s*, i32, i32, %struct.bg_print_s, i32, %struct.gx_saved_pages_list_s*, %struct.gx_device_procs_s, %struct.gx_device_procs_s } { i32 18472, %struct.gx_device_procs_s* @prn_oprp_procs, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.161, i32 0, i32 0), %struct.gs_memory_s* null, %struct.gs_memory_struct_type_s* @st_device_printer, i32 0, void (%struct.gx_device_s*)* null, %struct.rc_header_s zeroinitializer, i32 0, i32 0, i32 0, %struct.gx_device_color_info_s { i32 3, i32 3, i32 1, i16 24, i8 -1, i32 0, i32 255, i32 1, i32 256, %struct.gx_device_anti_alias_info_s { i32 1, i32 1 }, i32 -1, [64 x i8] zeroinitializer, [64 x i8] zeroinitializer, [64 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.160, i32 0, i32 0), i32 -1, i64 0, i32 0 }, %struct.gx_device_cached_colors_s { i64 -1, i64 -1 }, i32 2479, i32 3508, i32 0, i32 0, i32 0, i32 0, [2 x float] [float 0x408297AE20000000, float 0x408A4F5C20000000], [4 x float] zeroinitializer, i32 0, [2 x float] [float 3.000000e+02, float 3.000000e+02], [2 x float] [float 3.000000e+02, float 3.000000e+02], [2 x float] zeroinitializer, [4 x float] zeroinitializer, i64 0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, %struct.gx_stroked_gradient_recognizer_s zeroinitializer, i32 0, i32 0, %struct.gdev_space_params_s { i64 10000000, i64 4000000, %struct.gx_band_params_s zeroinitializer, i32 0, i32 0 }, %struct.cmm_dev_profile_s* null, i32 0, %struct.gx_page_device_procs_s { i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_install, i32 (%struct.gx_device_s*, %struct.gs_state_s*)* @gx_default_begin_page, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* @gx_default_end_page }, %struct.gx_device_procs_s zeroinitializer, [11240 x i8] zeroinitializer, { i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*)*, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)*, %struct.gx_device_buf_procs_s, void (%struct.gx_device_printer_s*, %struct.gdev_space_params_s*)*, i32 (%struct.gdev_prn_start_render_params_s*)*, i32 (%struct.gx_device_printer_s*)*, i32 (%struct.gx_device_printer_s*)*, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)* } { i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*)* @oprp_print_page, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)* @gx_default_print_page_copies, %struct.gx_device_buf_procs_s { i32 (%struct.gx_device_s**, %struct.gx_device_s*, i32, %struct.gx_render_plane_s*, %struct.gs_memory_s*, %struct.gx_colors_usage_s*)* @gx_default_create_buf_device, i32 (%struct.gx_device_buf_space_s*, %struct.gx_device_s*, %struct.gx_render_plane_s*, i32, i32)* @gx_default_size_buf_device, i32 (%struct.gx_device_s*, i8*, i32, i8**, i32, i32, i32)* @gx_default_setup_buf_device, void (%struct.gx_device_s*)* @gx_default_destroy_buf_device }, void (%struct.gx_device_printer_s*, %struct.gdev_space_params_s*)* @gx_default_get_space_params, i32 (%struct.gdev_prn_start_render_params_s*)* @gx_default_start_render_thread, i32 (%struct.gx_device_printer_s*)* @gx_default_open_render_device, i32 (%struct.gx_device_printer_s*)* @gx_default_close_render_device, i32 (%struct.gx_device_printer_s*, %struct._IO_FILE*, i32)* @gx_default_buffer_page }, [4096 x i8] zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, %struct._IO_FILE* null, i64 0, i8* null, %struct.gs_memory_s* null, %struct.gs_memory_s* null, i32 (%struct.gx_device_s*, i32)* null, %struct.gx_page_queue_s* null, i32 0, %struct.gx_device_printer_s* null, i32 0, i32 0, %struct.bg_print_s zeroinitializer, i32 0, %struct.gx_saved_pages_list_s* null, %struct.gx_device_procs_s zeroinitializer, %struct.gx_device_procs_s zeroinitializer }, align 8
@st_device_vector = external constant %struct.gs_memory_struct_type_s, align 8
@vector = internal global i32 1, align 4
@inkjet = internal global i32 0, align 4
@.str.162 = private unnamed_addr constant [7 x i8] c"Driver\00", align 1
@vectorDriver = internal global i8* null, align 8
@.str.163 = private unnamed_addr constant [6 x i8] c"Model\00", align 1
@printerModel = internal global i8* null, align 8
@.str.164 = private unnamed_addr constant [8 x i8] c"JobInfo\00", align 1
@jobInfo = internal global i8* null, align 8
@.str.165 = private unnamed_addr constant [8 x i8] c"DocInfo\00", align 1
@docInfo = internal global i8* null, align 8
@FastImageMode = internal global i32 0, align 4
@fastImage = internal global i8* null, align 8
@.str.166 = private unnamed_addr constant [6 x i8] c"NoCTM\00", align 1
@.str.167 = private unnamed_addr constant [12 x i8] c"NoRotateCTM\00", align 1
@.str.168 = private unnamed_addr constant [14 x i8] c"RightAngleCTM\00", align 1
@.str.169 = private unnamed_addr constant [16 x i8] c"ReverseAngleCTM\00", align 1
@.str.170 = private unnamed_addr constant [4 x i8] c"All\00", align 1
@.str.171 = private unnamed_addr constant [10 x i8] c"FastImage\00", align 1
@.str.172 = private unnamed_addr constant [11 x i8] c"MarginLeft\00", align 1
@.str.173 = private unnamed_addr constant [3 x i8] c"%f\00", align 1
@margins = internal global [4 x float] zeroinitializer, align 16
@.str.174 = private unnamed_addr constant [10 x i8] c"MarginTop\00", align 1
@.str.175 = private unnamed_addr constant [12 x i8] c"MarginRight\00", align 1
@.str.176 = private unnamed_addr constant [13 x i8] c"MarginBottom\00", align 1
@.str.177 = private unnamed_addr constant [5 x i8] c"Zoom\00", align 1
@zoom = internal global [2 x float] [float 1.000000e+00, float 1.000000e+00], align 4
@.str.178 = private unnamed_addr constant [9 x i8] c"NoRotate\00", align 1
@.str.179 = private unnamed_addr constant [6 x i8] c"Right\00", align 1
@.str.180 = private unnamed_addr constant [8 x i8] c"Reverse\00", align 1
@.str.181 = private unnamed_addr constant [5 x i8] c"Auto\00", align 1
@zoomAuto = internal global i32 0, align 4
@shift = internal global [2 x float] zeroinitializer, align 4
@zooming = internal global i32 0, align 4
@outputFD = internal global i32 -1, align 4
@apiEntry = internal global %struct._opvp_api_procs* null, align 8
@printerContext = internal global i32 -1, align 4
@nApiEntry = internal global i32 0, align 4
@opvp_vector_procs = internal global %struct.gx_device_vector_procs_s { i32 (%struct.gx_device_vector_s*)* @opvp_beginpage, i32 (%struct.gx_device_vector_s*, double)* @opvp_setlinewidth, i32 (%struct.gx_device_vector_s*, i32)* @opvp_setlinecap, i32 (%struct.gx_device_vector_s*, i32)* @opvp_setlinejoin, i32 (%struct.gx_device_vector_s*, double)* @opvp_setmiterlimit, i32 (%struct.gx_device_vector_s*, float*, i32, double)* @opvp_setdash, i32 (%struct.gx_device_vector_s*, double)* @opvp_setflat, i32 (%struct.gx_device_vector_s*, i32, i32)* @opvp_setlogop, i32 (%struct.gx_device_vector_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* @opvp_can_handle_hl_color, i32 (%struct.gx_device_vector_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* @opvp_setfillcolor, i32 (%struct.gx_device_vector_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*)* @opvp_setstrokecolor, i32 (%struct.gx_device_vector_s*, %struct.gx_path_s*, i32, %struct.gs_matrix_s*)* @opvp_vector_dopath, i32 (%struct.gx_device_vector_s*, i32, i32, i32, i32, i32)* @opvp_vector_dorect, i32 (%struct.gx_device_vector_s*, i32)* @opvp_beginpath, i32 (%struct.gx_device_vector_s*, double, double, double, double, i32)* @opvp_moveto, i32 (%struct.gx_device_vector_s*, double, double, double, double, i32)* @opvp_lineto, i32 (%struct.gx_device_vector_s*, double, double, double, double, double, double, double, double, i32)* @opvp_curveto, i32 (%struct.gx_device_vector_s*, double, double, double, double, i32)* @opvp_closepath, i32 (%struct.gx_device_vector_s*, i32)* @opvp_endpath }, align 8
@cspace_available = internal global [8 x i8] c"\00\00\00\00\00\00\01\00", align 1
@.str.182 = private unnamed_addr constant [2 x i8] c";\00", align 1
@.str.183 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.184 = private unnamed_addr constant [10 x i8] c"/dev/null\00", align 1
@colorSpace = internal global i32 6, align 4
@handle = internal global i8* null, align 8
@.str.185 = private unnamed_addr constant [16 x i8] c"opvpOpenPrinter\00", align 1
@OpenPrinter = internal global i32 (i32, i8*, i32*, %struct._opvp_api_procs**)* null, align 8
@.str.186 = private unnamed_addr constant [12 x i8] c"opvpErrorNo\00", align 1
@ErrorNo = internal global i32* null, align 8
@.str.187 = private unnamed_addr constant [12 x i8] c"OpenPrinter\00", align 1
@OpenPrinter_0_2 = internal global i32 (i32, i8*, i32*, %struct._OPVP_api_procs**)* null, align 8
@.str.188 = private unnamed_addr constant [8 x i8] c"errorno\00", align 1
@opvp_gen_dynamic_lib_name.buff = internal global [5 x i8*] zeroinitializer, align 16
@.str.189 = private unnamed_addr constant [4 x i8] c".so\00", align 1
@.str.190 = private unnamed_addr constant [5 x i8] c".dll\00", align 1
@.str.191 = private unnamed_addr constant [4 x i8] c"lib\00", align 1
@OpenPrinterWrapper.tEntry = internal global %struct._opvp_api_procs zeroinitializer, align 8
@apiEntry_0_2 = internal global %struct._OPVP_api_procs* null, align 8
@GetLastError = internal global i32 ()* @GetLastError_1_0, align 8
@cspace_0_2_to_1_0 = internal global [7 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 6, i32 7], align 16
@cspace_1_0_to_0_2 = internal global [8 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 0, i32 5, i32 6], align 16
@colorDepth_0_2 = internal global [8 x i32] [i32 1, i32 8, i32 24, i32 32, i32 24, i32 32, i32 24, i32 64], align 16
@iformat_1_0_to_0_2 = internal global [5 x i32] [i32 0, i32 0, i32 1, i32 2, i32 3], align 16
@beginPage = internal global i32 0, align 4
@opvp_startpage.page_info = internal global i8* null, align 8
@opvp_gen_page_info.buff = internal global i8* null, align 8
@.str.192 = private unnamed_addr constant [84 x i8] c"MediaCopy=%d;DeviceResolution=deviceResolution_%s;MediaPageRotation=%s;MediaSize=%s\00", align 1
@.str.193 = private unnamed_addr constant [10 x i8] c"landscape\00", align 1
@.str.194 = private unnamed_addr constant [9 x i8] c"portrait\00", align 1
@opvp_get_sizestring.buff = internal global i8* null, align 8
@.str.195 = private unnamed_addr constant [5 x i8] c"%.3f\00", align 1
@.str.196 = private unnamed_addr constant [6 x i8] c"%sx%s\00", align 1
@opvp_get_mediasize.buff = internal global i8* null, align 8
@.str.197 = private unnamed_addr constant [3 x i8] c"oe\00", align 1
@.str.198 = private unnamed_addr constant [3 x i8] c"in\00", align 1
@.str.199 = private unnamed_addr constant [3 x i8] c"mm\00", align 1
@.str.200 = private unnamed_addr constant [7 x i8] c"custom\00", align 1
@.str.201 = private unnamed_addr constant [11 x i8] c"%s_%s_%s%s\00", align 1
@opvp_setfillcolor.brush = internal global %struct._opvp_brush zeroinitializer, align 8
@gx_dc_type_data_pure = external constant %struct.gx_device_color_type_s, align 8
@vectorFillColor = internal global %struct._opvp_brush* null, align 8
@.str.202 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.203 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@opvp_fill_rectangle.data = private unnamed_addr constant [8 x i8] c"\C0\00\00\00\C0\00\00\00", align 1
@opvp_begin_image.mag = private unnamed_addr constant [2 x float] [float 1.000000e+00, float 1.000000e+00], align 4
@color_index = internal global i32 0, align 4
@st_vector_image_enum = external constant %struct.gs_memory_struct_type_s, align 8
@.str.204 = private unnamed_addr constant [17 x i8] c"opvp_begin_image\00", align 1
@imageDecode = internal global [130 x float] zeroinitializer, align 16
@opvp_image_enum_procs = internal constant %struct.gx_image_enum_procs_s { i32 (%struct.gx_image_enum_common_s*, %struct.gx_image_plane_s*, i32, i32*)* @opvp_image_plane_data, i32 (%struct.gx_image_enum_common_s*, i32)* @opvp_image_end_image, i32 (%struct.gx_image_enum_common_s*)* null, i32 (%struct.gx_image_enum_common_s*, i8*)* null }, align 8
@base_color_index = internal global i32 0, align 4
@palette = internal global [768 x i8] zeroinitializer, align 16
@reverse_image = internal global i32 0, align 4
@change_paint_mode = internal global i32 0, align 4
@savedColorSpace = internal global i32 0, align 4
@change_cspace = internal global i32 0, align 4
@begin_image = internal global i32 0, align 4

; Function Attrs: nounwind uwtable
define internal %struct.gs_ptr_procs_s* @device_opvp_enum_ptrs(%struct.gs_memory_s* %mem, i8* %vptr, i32 %size, i32 %index, %struct.enum_ptr_s* %pep, %struct.gs_memory_struct_type_s* %pstype, %struct.gc_state_s* %gcst) #0 {
entry:
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %vptr.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  %index.addr = alloca i32, align 4
  %pep.addr = alloca %struct.enum_ptr_s*, align 8
  %pstype.addr = alloca %struct.gs_memory_struct_type_s*, align 8
  %gcst.addr = alloca %struct.gc_state_s*, align 8
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  store i8* %vptr, i8** %vptr.addr, align 8, !tbaa !1
  store i32 %size, i32* %size.addr, align 4, !tbaa !5
  store i32 %index, i32* %index.addr, align 4, !tbaa !5
  store %struct.enum_ptr_s* %pep, %struct.enum_ptr_s** %pep.addr, align 8, !tbaa !1
  store %struct.gs_memory_struct_type_s* %pstype, %struct.gs_memory_struct_type_s** %pstype.addr, align 8, !tbaa !1
  store %struct.gc_state_s* %gcst, %struct.gc_state_s** %gcst.addr, align 8, !tbaa !1
  %0 = load %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, %struct.gs_ptr_procs_s* (%struct.gs_memory_s*, i8*, i32, i32, %struct.enum_ptr_s*, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)** getelementptr inbounds (%struct.gs_memory_struct_type_s, %struct.gs_memory_struct_type_s* @st_device_vector, i32 0, i32 4), align 8, !tbaa !7
  %1 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %2 = load i8*, i8** %vptr.addr, align 8, !tbaa !1
  %3 = load i32, i32* %size.addr, align 4, !tbaa !5
  %4 = load i32, i32* %index.addr, align 4, !tbaa !5
  %sub = sub nsw i32 %4, 0
  %5 = load %struct.enum_ptr_s*, %struct.enum_ptr_s** %pep.addr, align 8, !tbaa !1
  %6 = load %struct.gc_state_s*, %struct.gc_state_s** %gcst.addr, align 8, !tbaa !1
  %call = call %struct.gs_ptr_procs_s* %0(%struct.gs_memory_s* %1, i8* %2, i32 %3, i32 %sub, %struct.enum_ptr_s* %5, %struct.gs_memory_struct_type_s* @st_device_vector, %struct.gc_state_s* %6) #7
  ret %struct.gs_ptr_procs_s* %call
}

; Function Attrs: nounwind uwtable
define internal void @device_opvp_reloc_ptrs(i8* %vptr, i32 %size, %struct.gs_memory_struct_type_s* %pstype, %struct.gc_state_s* %gcst) #0 {
entry:
  %vptr.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  %pstype.addr = alloca %struct.gs_memory_struct_type_s*, align 8
  %gcst.addr = alloca %struct.gc_state_s*, align 8
  store i8* %vptr, i8** %vptr.addr, align 8, !tbaa !1
  store i32 %size, i32* %size.addr, align 4, !tbaa !5
  store %struct.gs_memory_struct_type_s* %pstype, %struct.gs_memory_struct_type_s** %pstype.addr, align 8, !tbaa !1
  store %struct.gc_state_s* %gcst, %struct.gc_state_s** %gcst.addr, align 8, !tbaa !1
  %0 = load void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)*, void (i8*, i32, %struct.gs_memory_struct_type_s*, %struct.gc_state_s*)** getelementptr inbounds (%struct.gs_memory_struct_type_s, %struct.gs_memory_struct_type_s* @st_device_vector, i32 0, i32 5), align 8, !tbaa !9
  %1 = load i8*, i8** %vptr.addr, align 8, !tbaa !1
  %2 = load i32, i32* %size.addr, align 4, !tbaa !5
  %3 = load %struct.gc_state_s*, %struct.gc_state_s** %gcst.addr, align 8, !tbaa !1
  call void %0(i8* %1, i32 %2, %struct.gs_memory_struct_type_s* @st_device_vector, %struct.gc_state_s* %3) #7
  ret void
}

declare void @gx_device_finalize(%struct.gs_memory_s*, i8*) #1

declare i32 @gx_default_install(%struct.gx_device_s*, %struct.gs_state_s*) #1

declare i32 @gx_default_begin_page(%struct.gx_device_s*, %struct.gs_state_s*) #1

declare i32 @gx_default_end_page(%struct.gx_device_s*, i32, %struct.gs_state_s*) #1

; Function Attrs: nounwind uwtable
define internal i32 @opvp_open(%struct.gx_device_s* %dev) #0 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pdev = alloca %struct.gx_device_opvp_s*, align 8
  %rdev = alloca %struct.gx_device_oprp_s*, align 8
  %ecode = alloca i32, align 4
  %code = alloca i32, align 4
  %r = alloca i32, align 4
  %dc = alloca i32, align 4
  %api_entry = alloca %struct._opvp_api_procs*, align 8
  %job_info = alloca i8*, align 8
  %doc_info = alloca i8*, align 8
  %tmp_info = alloca i8*, align 8
  %margin_width = alloca float, align 4
  %margin_height = alloca float, align 4
  %adj_margins = alloca [4 x float], align 16
  %apiVersion = alloca [2 x i32], align 4
  %cleanup.dest.slot = alloca i32
  %n = alloca i32, align 4
  %nn = alloca i32, align 4
  %p = alloca i32*, align 8
  %i = alloca i32, align 4
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.gx_device_opvp_s*
  store %struct.gx_device_opvp_s* %2, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct.gx_device_oprp_s** %rdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %5 = bitcast %struct.gx_device_s* %4 to %struct.gx_device_oprp_s*
  store %struct.gx_device_oprp_s* %5, %struct.gx_device_oprp_s** %rdev, align 8, !tbaa !1
  %6 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %7 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #2
  %8 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #2
  store i32 -1, i32* %r, align 4, !tbaa !5
  %9 = bitcast i32* %dc to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #2
  %10 = bitcast %struct._opvp_api_procs** %api_entry to i8*
  call void @llvm.lifetime.start(i64 8, i8* %10) #2
  %11 = bitcast i8** %job_info to i8*
  call void @llvm.lifetime.start(i64 8, i8* %11) #2
  store i8* null, i8** %job_info, align 8, !tbaa !1
  %12 = bitcast i8** %doc_info to i8*
  call void @llvm.lifetime.start(i64 8, i8* %12) #2
  store i8* null, i8** %doc_info, align 8, !tbaa !1
  %13 = bitcast i8** %tmp_info to i8*
  call void @llvm.lifetime.start(i64 8, i8* %13) #2
  store i8* null, i8** %tmp_info, align 8, !tbaa !1
  %14 = bitcast float* %margin_width to i8*
  call void @llvm.lifetime.start(i64 4, i8* %14) #2
  store float 0.000000e+00, float* %margin_width, align 4, !tbaa !10
  %15 = bitcast float* %margin_height to i8*
  call void @llvm.lifetime.start(i64 4, i8* %15) #2
  store float 0.000000e+00, float* %margin_height, align 4, !tbaa !10
  %16 = bitcast [4 x float]* %adj_margins to i8*
  call void @llvm.lifetime.start(i64 16, i8* %16) #2
  %17 = bitcast [2 x i32]* %apiVersion to i8*
  call void @llvm.lifetime.start(i64 8, i8* %17) #2
  %18 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call = call i32 @prepare_open(%struct.gx_device_s* %18) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %19 = load i32, i32* %code, align 4, !tbaa !5
  %tobool = icmp ne i32 %19, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %20 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %20, i32* %ecode, align 4, !tbaa !5
  %21 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %21, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %22 = load i32, i32* @zoomAuto, align 4, !tbaa !5
  %tobool1 = icmp ne i32 %22, 0
  br i1 %tobool1, label %if.then.2, label %if.end.17

if.then.2:                                        ; preds = %if.end
  %23 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @margins, i32 0, i64 0), align 4, !tbaa !10
  %24 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @margins, i32 0, i64 2), align 4, !tbaa !10
  %add = fadd float %23, %24
  %25 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %HWResolution = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %25, i32 0, i32 22
  %arrayidx = getelementptr inbounds [2 x float], [2 x float]* %HWResolution, i32 0, i64 0
  %26 = load float, float* %arrayidx, align 4, !tbaa !10
  %mul = fmul float %add, %26
  store float %mul, float* %margin_width, align 4, !tbaa !10
  %27 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @margins, i32 0, i64 1), align 4, !tbaa !10
  %28 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @margins, i32 0, i64 3), align 4, !tbaa !10
  %add3 = fadd float %27, %28
  %29 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %HWResolution4 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %29, i32 0, i32 22
  %arrayidx5 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution4, i32 0, i64 1
  %30 = load float, float* %arrayidx5, align 4, !tbaa !10
  %mul6 = fmul float %add3, %30
  store float %mul6, float* %margin_height, align 4, !tbaa !10
  %31 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %width = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %31, i32 0, i32 13
  %32 = load i32, i32* %width, align 4, !tbaa !12
  %conv = sitofp i32 %32 to float
  %33 = load float, float* %margin_width, align 4, !tbaa !10
  %sub = fsub float %conv, %33
  %34 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %width7 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %34, i32 0, i32 13
  %35 = load i32, i32* %width7, align 4, !tbaa !12
  %conv8 = sitofp i32 %35 to float
  %div = fdiv float %sub, %conv8
  store float %div, float* getelementptr inbounds ([2 x float], [2 x float]* @zoom, i32 0, i64 0), align 4, !tbaa !10
  %36 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %height = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %36, i32 0, i32 14
  %37 = load i32, i32* %height, align 4, !tbaa !25
  %conv9 = sitofp i32 %37 to float
  %38 = load float, float* %margin_height, align 4, !tbaa !10
  %sub10 = fsub float %conv9, %38
  %39 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %height11 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %39, i32 0, i32 14
  %40 = load i32, i32* %height11, align 4, !tbaa !25
  %conv12 = sitofp i32 %40 to float
  %div13 = fdiv float %sub10, %conv12
  store float %div13, float* getelementptr inbounds ([2 x float], [2 x float]* @zoom, i32 0, i64 1), align 4, !tbaa !10
  %41 = load float, float* getelementptr inbounds ([2 x float], [2 x float]* @zoom, i32 0, i64 0), align 4, !tbaa !10
  %42 = load float, float* getelementptr inbounds ([2 x float], [2 x float]* @zoom, i32 0, i64 1), align 4, !tbaa !10
  %cmp = fcmp olt float %41, %42
  br i1 %cmp, label %if.then.15, label %if.else

if.then.15:                                       ; preds = %if.then.2
  %43 = load float, float* getelementptr inbounds ([2 x float], [2 x float]* @zoom, i32 0, i64 0), align 4, !tbaa !10
  store float %43, float* getelementptr inbounds ([2 x float], [2 x float]* @zoom, i32 0, i64 1), align 4, !tbaa !10
  br label %if.end.16

if.else:                                          ; preds = %if.then.2
  %44 = load float, float* getelementptr inbounds ([2 x float], [2 x float]* @zoom, i32 0, i64 1), align 4, !tbaa !10
  store float %44, float* getelementptr inbounds ([2 x float], [2 x float]* @zoom, i32 0, i64 0), align 4, !tbaa !10
  br label %if.end.16

if.end.16:                                        ; preds = %if.else, %if.then.15
  br label %if.end.17

if.end.17:                                        ; preds = %if.end.16, %if.end
  %45 = load i32, i32* @inkjet, align 4, !tbaa !5
  %tobool18 = icmp ne i32 %45, 0
  br i1 %tobool18, label %if.then.19, label %if.else.50

if.then.19:                                       ; preds = %if.end.17
  %46 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @margins, i32 0, i64 0), align 4, !tbaa !10
  %cmp20 = fcmp une float %46, 0.000000e+00
  br i1 %cmp20, label %if.then.27, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.19
  %47 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @margins, i32 0, i64 1), align 4, !tbaa !10
  %cmp22 = fcmp une float %47, 0.000000e+00
  br i1 %cmp22, label %if.then.27, label %lor.lhs.false.24

lor.lhs.false.24:                                 ; preds = %lor.lhs.false
  %48 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @margins, i32 0, i64 3), align 4, !tbaa !10
  %cmp25 = fcmp une float %48, 0.000000e+00
  br i1 %cmp25, label %if.then.27, label %if.end.35

if.then.27:                                       ; preds = %lor.lhs.false.24, %lor.lhs.false, %if.then.19
  %49 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @margins, i32 0, i64 0), align 4, !tbaa !10
  %50 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %HWResolution28 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %50, i32 0, i32 22
  %arrayidx29 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution28, i32 0, i64 0
  %51 = load float, float* %arrayidx29, align 4, !tbaa !10
  %mul30 = fmul float %49, %51
  store float %mul30, float* getelementptr inbounds ([2 x float], [2 x float]* @shift, i32 0, i64 0), align 4, !tbaa !10
  %52 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @margins, i32 0, i64 1), align 4, !tbaa !10
  %53 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @margins, i32 0, i64 3), align 4, !tbaa !10
  %add31 = fadd float %52, %53
  %54 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %HWResolution32 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %54, i32 0, i32 22
  %arrayidx33 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution32, i32 0, i64 1
  %55 = load float, float* %arrayidx33, align 4, !tbaa !10
  %mul34 = fmul float %add31, %55
  store float %mul34, float* getelementptr inbounds ([2 x float], [2 x float]* @shift, i32 0, i64 1), align 4, !tbaa !10
  store i32 1, i32* @zooming, align 4, !tbaa !5
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.27, %lor.lhs.false.24
  %56 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @margins, i32 0, i64 2), align 4, !tbaa !10
  %57 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %HWResolution36 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %57, i32 0, i32 22
  %arrayidx37 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution36, i32 0, i64 0
  %58 = load float, float* %arrayidx37, align 4, !tbaa !10
  %mul38 = fmul float %56, %58
  %59 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %width39 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %59, i32 0, i32 13
  %60 = load i32, i32* %width39, align 4, !tbaa !12
  %conv40 = sitofp i32 %60 to float
  %sub41 = fsub float %conv40, %mul38
  %conv42 = fptosi float %sub41 to i32
  store i32 %conv42, i32* %width39, align 4, !tbaa !12
  %61 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @margins, i32 0, i64 1), align 4, !tbaa !10
  %62 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %HWResolution43 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %62, i32 0, i32 22
  %arrayidx44 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution43, i32 0, i64 1
  %63 = load float, float* %arrayidx44, align 4, !tbaa !10
  %mul45 = fmul float %61, %63
  %64 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %height46 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %64, i32 0, i32 14
  %65 = load i32, i32* %height46, align 4, !tbaa !25
  %conv47 = sitofp i32 %65 to float
  %sub48 = fsub float %conv47, %mul45
  %conv49 = fptosi float %sub48 to i32
  store i32 %conv49, i32* %height46, align 4, !tbaa !25
  br label %if.end.103

if.else.50:                                       ; preds = %if.end.17
  %66 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @margins, i32 0, i64 0), align 4, !tbaa !10
  %cmp51 = fcmp une float %66, 0.000000e+00
  br i1 %cmp51, label %if.then.56, label %lor.lhs.false.53

lor.lhs.false.53:                                 ; preds = %if.else.50
  %67 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @margins, i32 0, i64 1), align 4, !tbaa !10
  %cmp54 = fcmp une float %67, 0.000000e+00
  br i1 %cmp54, label %if.then.56, label %if.end.63

if.then.56:                                       ; preds = %lor.lhs.false.53, %if.else.50
  %68 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @margins, i32 0, i64 0), align 4, !tbaa !10
  %69 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %HWResolution57 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %69, i32 0, i32 22
  %arrayidx58 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution57, i32 0, i64 0
  %70 = load float, float* %arrayidx58, align 4, !tbaa !10
  %mul59 = fmul float %68, %70
  store float %mul59, float* getelementptr inbounds ([2 x float], [2 x float]* @shift, i32 0, i64 0), align 4, !tbaa !10
  %71 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @margins, i32 0, i64 3), align 4, !tbaa !10
  %72 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %HWResolution60 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %72, i32 0, i32 22
  %arrayidx61 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution60, i32 0, i64 1
  %73 = load float, float* %arrayidx61, align 4, !tbaa !10
  %mul62 = fmul float %71, %73
  store float %mul62, float* getelementptr inbounds ([2 x float], [2 x float]* @shift, i32 0, i64 1), align 4, !tbaa !10
  store i32 1, i32* @zooming, align 4, !tbaa !5
  br label %if.end.63

if.end.63:                                        ; preds = %if.then.56, %lor.lhs.false.53
  %arrayidx64 = getelementptr inbounds [4 x float], [4 x float]* %adj_margins, i32 0, i64 0
  store float 0.000000e+00, float* %arrayidx64, align 4, !tbaa !10
  %arrayidx65 = getelementptr inbounds [4 x float], [4 x float]* %adj_margins, i32 0, i64 3
  store float 0.000000e+00, float* %arrayidx65, align 4, !tbaa !10
  %74 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %height66 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %74, i32 0, i32 14
  %75 = load i32, i32* %height66, align 4, !tbaa !25
  %conv67 = sitofp i32 %75 to float
  %76 = load float, float* getelementptr inbounds ([2 x float], [2 x float]* @zoom, i32 0, i64 1), align 4, !tbaa !10
  %mul68 = fmul float %conv67, %76
  %77 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %HWResolution69 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %77, i32 0, i32 22
  %arrayidx70 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution69, i32 0, i64 1
  %78 = load float, float* %arrayidx70, align 4, !tbaa !10
  %div71 = fdiv float %mul68, %78
  %79 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %MediaSize = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %79, i32 0, i32 19
  %arrayidx72 = getelementptr inbounds [2 x float], [2 x float]* %MediaSize, i32 0, i64 1
  %80 = load float, float* %arrayidx72, align 4, !tbaa !10
  %div73 = fdiv float %80, 7.200000e+01
  %81 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @margins, i32 0, i64 1), align 4, !tbaa !10
  %82 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @margins, i32 0, i64 3), align 4, !tbaa !10
  %add74 = fadd float %81, %82
  %sub75 = fsub float %div73, %add74
  %sub76 = fsub float %div71, %sub75
  %arrayidx77 = getelementptr inbounds [4 x float], [4 x float]* %adj_margins, i32 0, i64 1
  store float %sub76, float* %arrayidx77, align 4, !tbaa !10
  %arrayidx78 = getelementptr inbounds [4 x float], [4 x float]* %adj_margins, i32 0, i64 1
  %83 = load float, float* %arrayidx78, align 4, !tbaa !10
  %cmp79 = fcmp olt float %83, 0.000000e+00
  br i1 %cmp79, label %if.then.81, label %if.end.83

if.then.81:                                       ; preds = %if.end.63
  %arrayidx82 = getelementptr inbounds [4 x float], [4 x float]* %adj_margins, i32 0, i64 0
  store float 0.000000e+00, float* %arrayidx82, align 4, !tbaa !10
  br label %if.end.83

if.end.83:                                        ; preds = %if.then.81, %if.end.63
  %84 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %width84 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %84, i32 0, i32 13
  %85 = load i32, i32* %width84, align 4, !tbaa !12
  %conv85 = sitofp i32 %85 to float
  %86 = load float, float* getelementptr inbounds ([2 x float], [2 x float]* @zoom, i32 0, i64 0), align 4, !tbaa !10
  %mul86 = fmul float %conv85, %86
  %87 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %HWResolution87 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %87, i32 0, i32 22
  %arrayidx88 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution87, i32 0, i64 0
  %88 = load float, float* %arrayidx88, align 4, !tbaa !10
  %div89 = fdiv float %mul86, %88
  %89 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %MediaSize90 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %89, i32 0, i32 19
  %arrayidx91 = getelementptr inbounds [2 x float], [2 x float]* %MediaSize90, i32 0, i64 0
  %90 = load float, float* %arrayidx91, align 4, !tbaa !10
  %div92 = fdiv float %90, 7.200000e+01
  %91 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @margins, i32 0, i64 0), align 4, !tbaa !10
  %92 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @margins, i32 0, i64 2), align 4, !tbaa !10
  %add93 = fadd float %91, %92
  %sub94 = fsub float %div92, %add93
  %sub95 = fsub float %div89, %sub94
  %arrayidx96 = getelementptr inbounds [4 x float], [4 x float]* %adj_margins, i32 0, i64 2
  store float %sub95, float* %arrayidx96, align 4, !tbaa !10
  %arrayidx97 = getelementptr inbounds [4 x float], [4 x float]* %adj_margins, i32 0, i64 2
  %93 = load float, float* %arrayidx97, align 4, !tbaa !10
  %cmp98 = fcmp olt float %93, 0.000000e+00
  br i1 %cmp98, label %if.then.100, label %if.end.102

if.then.100:                                      ; preds = %if.end.83
  %arrayidx101 = getelementptr inbounds [4 x float], [4 x float]* %adj_margins, i32 0, i64 2
  store float 0.000000e+00, float* %arrayidx101, align 4, !tbaa !10
  br label %if.end.102

if.end.102:                                       ; preds = %if.then.100, %if.end.83
  %94 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %arraydecay = getelementptr inbounds [4 x float], [4 x float]* %adj_margins, i32 0, i32 0
  call void @gx_device_set_margins(%struct.gx_device_s* %94, float* %arraydecay, i32 1) #7
  br label %if.end.103

if.end.103:                                       ; preds = %if.end.102, %if.end.35
  %95 = load float, float* getelementptr inbounds ([2 x float], [2 x float]* @zoom, i32 0, i64 0), align 4, !tbaa !10
  %cmp104 = fcmp une float %95, 1.000000e+00
  br i1 %cmp104, label %if.then.109, label %lor.lhs.false.106

lor.lhs.false.106:                                ; preds = %if.end.103
  %96 = load float, float* getelementptr inbounds ([2 x float], [2 x float]* @zoom, i32 0, i64 1), align 4, !tbaa !10
  %cmp107 = fcmp une float %96, 1.000000e+00
  br i1 %cmp107, label %if.then.109, label %if.end.110

if.then.109:                                      ; preds = %lor.lhs.false.106, %if.end.103
  store i32 1, i32* @zooming, align 4, !tbaa !5
  br label %if.end.110

if.end.110:                                       ; preds = %if.then.109, %lor.lhs.false.106
  %97 = load i32, i32* @inkjet, align 4, !tbaa !5
  %tobool111 = icmp ne i32 %97, 0
  br i1 %tobool111, label %if.else.138, label %if.then.112

if.then.112:                                      ; preds = %if.end.110
  %98 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %98, i32 0, i32 3
  %99 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory, align 8, !tbaa !26
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %99, i32 0, i32 1
  %stable = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 3
  %100 = load %struct.gs_memory_s* (%struct.gs_memory_s*)*, %struct.gs_memory_s* (%struct.gs_memory_s*)** %stable, align 8, !tbaa !45
  %101 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %memory113 = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %101, i32 0, i32 3
  %102 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory113, align 8, !tbaa !26
  %call114 = call %struct.gs_memory_s* %100(%struct.gs_memory_s* %102) #7
  %103 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %v_memory = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %103, i32 0, i32 43
  store %struct.gs_memory_s* %call114, %struct.gs_memory_s** %v_memory, align 8, !tbaa !48
  %104 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %105 = bitcast %struct.gx_device_s* %104 to %struct.gx_device_vector_s*
  %call115 = call i32 @gdev_vector_open_file_options(%struct.gx_device_vector_s* %105, i32 512, i32 10) #7
  store i32 %call115, i32* %code, align 4, !tbaa !5
  %106 = load i32, i32* %code, align 4, !tbaa !5
  %cmp116 = icmp slt i32 %106, 0
  br i1 %cmp116, label %if.then.118, label %if.end.119

if.then.118:                                      ; preds = %if.then.112
  %107 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %107, i32* %ecode, align 4, !tbaa !5
  %108 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %108, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.119:                                       ; preds = %if.then.112
  %109 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %bbox_device = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %109, i32 0, i32 64
  %110 = load %struct.gx_device_bbox_s*, %struct.gx_device_bbox_s** %bbox_device, align 8, !tbaa !49
  %cmp120 = icmp ne %struct.gx_device_bbox_s* %110, null
  br i1 %cmp120, label %if.then.122, label %if.end.136

if.then.122:                                      ; preds = %if.end.119
  %111 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %bbox_device123 = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %111, i32 0, i32 64
  %112 = load %struct.gx_device_bbox_s*, %struct.gx_device_bbox_s** %bbox_device123, align 8, !tbaa !49
  %memory124 = getelementptr inbounds %struct.gx_device_bbox_s, %struct.gx_device_bbox_s* %112, i32 0, i32 3
  %113 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory124, align 8, !tbaa !50
  %cmp125 = icmp eq %struct.gs_memory_s* %113, null
  br i1 %cmp125, label %if.then.127, label %if.end.135

if.then.127:                                      ; preds = %if.then.122
  %114 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %memory128 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %114, i32 0, i32 3
  %115 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory128, align 8, !tbaa !54
  %procs129 = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %115, i32 0, i32 1
  %stable130 = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs129, i32 0, i32 3
  %116 = load %struct.gs_memory_s* (%struct.gs_memory_s*)*, %struct.gs_memory_s* (%struct.gs_memory_s*)** %stable130, align 8, !tbaa !45
  %117 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %memory131 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %117, i32 0, i32 3
  %118 = load %struct.gs_memory_s*, %struct.gs_memory_s** %memory131, align 8, !tbaa !54
  %call132 = call %struct.gs_memory_s* %116(%struct.gs_memory_s* %118) #7
  %119 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %bbox_device133 = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %119, i32 0, i32 64
  %120 = load %struct.gx_device_bbox_s*, %struct.gx_device_bbox_s** %bbox_device133, align 8, !tbaa !49
  %memory134 = getelementptr inbounds %struct.gx_device_bbox_s, %struct.gx_device_bbox_s* %120, i32 0, i32 3
  store %struct.gs_memory_s* %call132, %struct.gs_memory_s** %memory134, align 8, !tbaa !50
  br label %if.end.135

if.end.135:                                       ; preds = %if.then.127, %if.then.122
  br label %if.end.136

if.end.136:                                       ; preds = %if.end.135, %if.end.119
  %121 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %file = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %121, i32 0, i32 46
  %122 = load %struct._IO_FILE*, %struct._IO_FILE** %file, align 8, !tbaa !55
  %call137 = call i32 @fileno(%struct._IO_FILE* %122) #8
  store i32 %call137, i32* @outputFD, align 4, !tbaa !5
  br label %if.end.151

if.else.138:                                      ; preds = %if.end.110
  %123 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call139 = call i32 @gdev_prn_open(%struct.gx_device_s* %123) #7
  store i32 %call139, i32* %code, align 4, !tbaa !5
  %124 = load i32, i32* %code, align 4, !tbaa !5
  %cmp140 = icmp slt i32 %124, 0
  br i1 %cmp140, label %if.then.142, label %if.end.143

if.then.142:                                      ; preds = %if.else.138
  %125 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %125, i32* %ecode, align 4, !tbaa !5
  %126 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %126, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.143:                                       ; preds = %if.else.138
  %127 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call144 = call i32 @gdev_prn_open_printer_seekable(%struct.gx_device_s* %127, i32 1, i32 0) #7
  store i32 %call144, i32* %code, align 4, !tbaa !5
  %128 = load i32, i32* %code, align 4, !tbaa !5
  %cmp145 = icmp slt i32 %128, 0
  br i1 %cmp145, label %if.then.147, label %if.end.148

if.then.147:                                      ; preds = %if.end.143
  %129 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %129, i32* %ecode, align 4, !tbaa !5
  %130 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %130, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.148:                                       ; preds = %if.end.143
  %131 = load %struct.gx_device_oprp_s*, %struct.gx_device_oprp_s** %rdev, align 8, !tbaa !1
  %file149 = getelementptr inbounds %struct.gx_device_oprp_s, %struct.gx_device_oprp_s* %131, i32 0, i32 52
  %132 = load %struct._IO_FILE*, %struct._IO_FILE** %file149, align 8, !tbaa !56
  %call150 = call i32 @fileno(%struct._IO_FILE* %132) #8
  store i32 %call150, i32* @outputFD, align 4, !tbaa !5
  br label %if.end.151

if.end.151:                                       ; preds = %if.end.148, %if.end.136
  %call152 = call i32 @opvp_load_vector_driver() #7
  store i32 %call152, i32* %code, align 4, !tbaa !5
  %tobool153 = icmp ne i32 %call152, 0
  br i1 %tobool153, label %if.then.154, label %if.end.155

if.then.154:                                      ; preds = %if.end.151
  %133 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %133, i32* %ecode, align 4, !tbaa !5
  %134 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %134, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.155:                                       ; preds = %if.end.151
  %arrayidx156 = getelementptr inbounds [2 x i32], [2 x i32]* %apiVersion, i32 0, i64 0
  store i32 1, i32* %arrayidx156, align 4, !tbaa !5
  %arrayidx157 = getelementptr inbounds [2 x i32], [2 x i32]* %apiVersion, i32 0, i64 1
  store i32 0, i32* %arrayidx157, align 4, !tbaa !5
  %135 = load i32, i32* @outputFD, align 4, !tbaa !5
  %136 = load i8*, i8** @printerModel, align 8, !tbaa !1
  %arraydecay158 = getelementptr inbounds [2 x i32], [2 x i32]* %apiVersion, i32 0, i32 0
  %call159 = call i32 @OpenPrinterWrapper(i32 %135, i8* %136, i32* %arraydecay158, %struct._opvp_api_procs** %api_entry) #7
  store i32 %call159, i32* %dc, align 4, !tbaa !5
  %137 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %tobool160 = icmp ne %struct._opvp_api_procs* %137, null
  br i1 %tobool160, label %if.else.166, label %if.then.161

if.then.161:                                      ; preds = %if.end.155
  %call162 = call noalias i8* @calloc(i64 568, i64 1) #8
  %138 = bitcast i8* %call162 to %struct._opvp_api_procs*
  store %struct._opvp_api_procs* %138, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %tobool163 = icmp ne %struct._opvp_api_procs* %138, null
  br i1 %tobool163, label %if.end.165, label %if.then.164

if.then.164:                                      ; preds = %if.then.161
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.165

if.end.165:                                       ; preds = %if.then.164, %if.then.161
  br label %if.end.168

if.else.166:                                      ; preds = %if.end.155
  %139 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %140 = bitcast %struct._opvp_api_procs* %139 to i8*
  %call167 = call i8* @memset(i8* %140, i32 0, i64 568) #8
  br label %if.end.168

if.end.168:                                       ; preds = %if.else.166, %if.end.165
  %141 = load i32, i32* %dc, align 4, !tbaa !5
  %cmp169 = icmp eq i32 %141, -1
  br i1 %cmp169, label %if.then.171, label %if.end.182

if.then.171:                                      ; preds = %if.end.168
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  %142 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %tobool172 = icmp ne %struct._opvp_api_procs* %142, null
  br i1 %tobool172, label %if.then.173, label %if.end.174

if.then.173:                                      ; preds = %if.then.171
  %143 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %144 = bitcast %struct._opvp_api_procs* %143 to i8*
  call void @free(i8* %144) #8
  br label %if.end.174

if.end.174:                                       ; preds = %if.then.173, %if.then.171
  store %struct._opvp_api_procs* null, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %call175 = call i32 @opvp_unload_vector_driver() #7
  %145 = load i32, i32* @inkjet, align 4, !tbaa !5
  %tobool176 = icmp ne i32 %145, 0
  br i1 %tobool176, label %if.then.177, label %if.else.179

if.then.177:                                      ; preds = %if.end.174
  %146 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call178 = call i32 @gdev_prn_close(%struct.gx_device_s* %146) #7
  br label %if.end.181

if.else.179:                                      ; preds = %if.end.174
  %147 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %148 = bitcast %struct.gx_device_opvp_s* %147 to %struct.gx_device_vector_s*
  %call180 = call i32 @gdev_vector_close_file(%struct.gx_device_vector_s* %148) #7
  br label %if.end.181

if.end.181:                                       ; preds = %if.else.179, %if.then.177
  %149 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %149, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.182:                                       ; preds = %if.end.168
  %150 = load i32, i32* %dc, align 4, !tbaa !5
  store i32 %150, i32* @printerContext, align 4, !tbaa !5
  store i32 71, i32* @nApiEntry, align 4, !tbaa !5
  %151 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %152 = bitcast %struct._opvp_api_procs* %151 to i8*
  %153 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** %api_entry, align 8, !tbaa !1
  %154 = bitcast %struct._opvp_api_procs* %153 to i8*
  %155 = load i32, i32* @nApiEntry, align 4, !tbaa !5
  %conv183 = sext i32 %155 to i64
  %mul184 = mul i64 %conv183, 8
  %call185 = call i8* @memcpy(i8* %152, i8* %154, i64 %mul184) #8
  %156 = load i32, i32* %ecode, align 4, !tbaa !5
  %tobool186 = icmp ne i32 %156, 0
  br i1 %tobool186, label %if.end.192, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end.182
  %157 = load i32, i32* @inkjet, align 4, !tbaa !5
  %tobool187 = icmp ne i32 %157, 0
  br i1 %tobool187, label %if.end.192, label %if.then.188

if.then.188:                                      ; preds = %land.lhs.true
  %158 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %vec_procs = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %158, i32 0, i32 44
  store %struct.gx_device_vector_procs_s* @opvp_vector_procs, %struct.gx_device_vector_procs_s** %vec_procs, align 8, !tbaa !61
  %159 = load i32, i32* @vector, align 4, !tbaa !5
  %tobool189 = icmp ne i32 %159, 0
  br i1 %tobool189, label %if.then.190, label %if.end.191

if.then.190:                                      ; preds = %if.then.188
  %160 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %161 = bitcast %struct.gx_device_opvp_s* %160 to %struct.gx_device_vector_s*
  call void @gdev_vector_init(%struct.gx_device_vector_s* %161) #7
  br label %if.end.191

if.end.191:                                       ; preds = %if.then.190, %if.then.188
  br label %if.end.192

if.end.192:                                       ; preds = %if.end.191, %land.lhs.true, %if.end.182
  %162 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpQueryColorSpace = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %162, i32 0, i32 17
  %163 = load i32 (i32, i32*, i32*)*, i32 (i32, i32*, i32*)** %opvpQueryColorSpace, align 8, !tbaa !62
  %tobool193 = icmp ne i32 (i32, i32*, i32*)* %163, null
  br i1 %tobool193, label %if.then.194, label %if.end.228

if.then.194:                                      ; preds = %if.end.192
  %164 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start(i64 4, i8* %164) #2
  store i32 8, i32* %n, align 4, !tbaa !5
  %165 = bitcast i32* %nn to i8*
  call void @llvm.lifetime.start(i64 4, i8* %165) #2
  %166 = load i32, i32* %n, align 4, !tbaa !5
  store i32 %166, i32* %nn, align 4, !tbaa !5
  %167 = bitcast i32** %p to i8*
  call void @llvm.lifetime.start(i64 8, i8* %167) #2
  %168 = load i32, i32* %n, align 4, !tbaa !5
  %conv195 = sext i32 %168 to i64
  %mul196 = mul i64 %conv195, 4
  %call197 = call noalias i8* @malloc(i64 %mul196) #8
  %169 = bitcast i8* %call197 to i32*
  store i32* %169, i32** %p, align 8, !tbaa !1
  %170 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpQueryColorSpace198 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %170, i32 0, i32 17
  %171 = load i32 (i32, i32*, i32*)*, i32 (i32, i32*, i32*)** %opvpQueryColorSpace198, align 8, !tbaa !62
  %172 = load i32, i32* @printerContext, align 4, !tbaa !5
  %173 = load i32*, i32** %p, align 8, !tbaa !1
  %call199 = call i32 %171(i32 %172, i32* %nn, i32* %173) #7
  store i32 %call199, i32* %r, align 4, !tbaa !5
  %cmp200 = icmp eq i32 %call199, -6
  br i1 %cmp200, label %land.lhs.true.202, label %if.end.211

land.lhs.true.202:                                ; preds = %if.then.194
  %174 = load i32, i32* %nn, align 4, !tbaa !5
  %175 = load i32, i32* %n, align 4, !tbaa !5
  %cmp203 = icmp sgt i32 %174, %175
  br i1 %cmp203, label %if.then.205, label %if.end.211

if.then.205:                                      ; preds = %land.lhs.true.202
  %176 = load i32*, i32** %p, align 8, !tbaa !1
  %177 = bitcast i32* %176 to i8*
  %178 = load i32, i32* %nn, align 4, !tbaa !5
  %conv206 = sext i32 %178 to i64
  %mul207 = mul i64 %conv206, 4
  %call208 = call i8* @realloc(i8* %177, i64 %mul207) #8
  %179 = bitcast i8* %call208 to i32*
  store i32* %179, i32** %p, align 8, !tbaa !1
  %180 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpQueryColorSpace209 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %180, i32 0, i32 17
  %181 = load i32 (i32, i32*, i32*)*, i32 (i32, i32*, i32*)** %opvpQueryColorSpace209, align 8, !tbaa !62
  %182 = load i32, i32* @printerContext, align 4, !tbaa !5
  %183 = load i32*, i32** %p, align 8, !tbaa !1
  %call210 = call i32 %181(i32 %182, i32* %nn, i32* %183) #7
  store i32 %call210, i32* %r, align 4, !tbaa !5
  br label %if.end.211

if.end.211:                                       ; preds = %if.then.205, %land.lhs.true.202, %if.then.194
  %184 = load i32, i32* %r, align 4, !tbaa !5
  %cmp212 = icmp eq i32 %184, 0
  br i1 %cmp212, label %if.then.214, label %if.end.227

if.then.214:                                      ; preds = %if.end.211
  %185 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %185) #2
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.214
  %186 = load i32, i32* %i, align 4, !tbaa !5
  %187 = load i32, i32* %nn, align 4, !tbaa !5
  %cmp215 = icmp slt i32 %186, %187
  br i1 %cmp215, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %188 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom = sext i32 %188 to i64
  %189 = load i32*, i32** %p, align 8, !tbaa !1
  %arrayidx217 = getelementptr inbounds i32, i32* %189, i64 %idxprom
  %190 = load i32, i32* %arrayidx217, align 4, !tbaa !64
  %conv218 = zext i32 %190 to i64
  %cmp219 = icmp ult i64 %conv218, 8
  br i1 %cmp219, label %if.then.221, label %if.end.226

if.then.221:                                      ; preds = %for.body
  %191 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom222 = sext i32 %191 to i64
  %192 = load i32*, i32** %p, align 8, !tbaa !1
  %arrayidx223 = getelementptr inbounds i32, i32* %192, i64 %idxprom222
  %193 = load i32, i32* %arrayidx223, align 4, !tbaa !64
  %idxprom224 = zext i32 %193 to i64
  %arrayidx225 = getelementptr inbounds [8 x i8], [8 x i8]* @cspace_available, i32 0, i64 %idxprom224
  store i8 1, i8* %arrayidx225, align 1, !tbaa !64
  br label %if.end.226

if.end.226:                                       ; preds = %if.then.221, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.226
  %194 = load i32, i32* %i, align 4, !tbaa !5
  %inc = add nsw i32 %194, 1
  store i32 %inc, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %195 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %195) #2
  br label %if.end.227

if.end.227:                                       ; preds = %for.end, %if.end.211
  %196 = load i32*, i32** %p, align 8, !tbaa !1
  %197 = bitcast i32* %196 to i8*
  call void @free(i8* %197) #8
  %198 = bitcast i32** %p to i8*
  call void @llvm.lifetime.end(i64 8, i8* %198) #2
  %199 = bitcast i32* %nn to i8*
  call void @llvm.lifetime.end(i64 4, i8* %199) #2
  %200 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end(i64 4, i8* %200) #2
  br label %if.end.228

if.end.228:                                       ; preds = %if.end.227, %if.end.192
  %201 = load i32, i32* %ecode, align 4, !tbaa !5
  %tobool229 = icmp ne i32 %201, 0
  br i1 %tobool229, label %if.end.271, label %if.then.230

if.then.230:                                      ; preds = %if.end.228
  %202 = load i8*, i8** @jobInfo, align 8, !tbaa !1
  %tobool231 = icmp ne i8* %202, null
  br i1 %tobool231, label %if.then.232, label %if.end.239

if.then.232:                                      ; preds = %if.then.230
  %203 = load i8*, i8** @jobInfo, align 8, !tbaa !1
  %call233 = call i64 @strlen(i8* %203) #9
  %cmp234 = icmp ugt i64 %call233, 0
  br i1 %cmp234, label %if.then.236, label %if.end.238

if.then.236:                                      ; preds = %if.then.232
  %204 = load i8*, i8** @jobInfo, align 8, !tbaa !1
  %call237 = call i8* @opvp_alloc_string(i8** %job_info, i8* %204) #7
  store i8* %call237, i8** %job_info, align 8, !tbaa !1
  br label %if.end.238

if.end.238:                                       ; preds = %if.then.236, %if.then.232
  br label %if.end.239

if.end.239:                                       ; preds = %if.end.238, %if.then.230
  %205 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call240 = call i8* @opvp_gen_job_info(%struct.gx_device_s* %205) #7
  %call241 = call i8* @opvp_alloc_string(i8** %tmp_info, i8* %call240) #7
  store i8* %call241, i8** %tmp_info, align 8, !tbaa !1
  %206 = load i8*, i8** %tmp_info, align 8, !tbaa !1
  %tobool242 = icmp ne i8* %206, null
  br i1 %tobool242, label %if.then.243, label %if.end.260

if.then.243:                                      ; preds = %if.end.239
  %207 = load i8*, i8** %tmp_info, align 8, !tbaa !1
  %call244 = call i64 @strlen(i8* %207) #9
  %cmp245 = icmp ugt i64 %call244, 0
  br i1 %cmp245, label %if.then.247, label %if.end.259

if.then.247:                                      ; preds = %if.then.243
  %208 = load i8*, i8** %job_info, align 8, !tbaa !1
  %tobool248 = icmp ne i8* %208, null
  br i1 %tobool248, label %if.then.249, label %if.end.256

if.then.249:                                      ; preds = %if.then.247
  %209 = load i8*, i8** %job_info, align 8, !tbaa !1
  %call250 = call i64 @strlen(i8* %209) #9
  %cmp251 = icmp ugt i64 %call250, 0
  br i1 %cmp251, label %if.then.253, label %if.end.255

if.then.253:                                      ; preds = %if.then.249
  %call254 = call i8* @opvp_cat_string(i8** %job_info, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.182, i32 0, i32 0)) #7
  br label %if.end.255

if.end.255:                                       ; preds = %if.then.253, %if.then.249
  br label %if.end.256

if.end.256:                                       ; preds = %if.end.255, %if.then.247
  %call257 = call i8* @opvp_cat_string(i8** %job_info, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.183, i32 0, i32 0)) #7
  store i8* %call257, i8** %job_info, align 8, !tbaa !1
  %210 = load i8*, i8** %tmp_info, align 8, !tbaa !1
  %call258 = call i8* @opvp_cat_string(i8** %job_info, i8* %210) #7
  store i8* %call258, i8** %job_info, align 8, !tbaa !1
  br label %if.end.259

if.end.259:                                       ; preds = %if.end.256, %if.then.243
  br label %if.end.260

if.end.260:                                       ; preds = %if.end.259, %if.end.239
  %211 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpStartJob = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %211, i32 0, i32 2
  %212 = load i32 (i32, i8*)*, i32 (i32, i8*)** %opvpStartJob, align 8, !tbaa !65
  %tobool261 = icmp ne i32 (i32, i8*)* %212, null
  br i1 %tobool261, label %if.then.262, label %if.end.266

if.then.262:                                      ; preds = %if.end.260
  %213 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpStartJob263 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %213, i32 0, i32 2
  %214 = load i32 (i32, i8*)*, i32 (i32, i8*)** %opvpStartJob263, align 8, !tbaa !65
  %215 = load i32, i32* @printerContext, align 4, !tbaa !5
  %216 = load i8*, i8** %job_info, align 8, !tbaa !1
  %call264 = call i8* @opvp_to_utf8(i8* %216) #7
  %call265 = call i32 %214(i32 %215, i8* %call264) #7
  store i32 %call265, i32* %r, align 4, !tbaa !5
  br label %if.end.266

if.end.266:                                       ; preds = %if.then.262, %if.end.260
  %217 = load i32, i32* %r, align 4, !tbaa !5
  %cmp267 = icmp ne i32 %217, 0
  br i1 %cmp267, label %if.then.269, label %if.end.270

if.then.269:                                      ; preds = %if.end.266
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.270

if.end.270:                                       ; preds = %if.then.269, %if.end.266
  br label %if.end.271

if.end.271:                                       ; preds = %if.end.270, %if.end.228
  %218 = load i32, i32* %ecode, align 4, !tbaa !5
  %tobool272 = icmp ne i32 %218, 0
  br i1 %tobool272, label %if.end.314, label %if.then.273

if.then.273:                                      ; preds = %if.end.271
  %219 = load i8*, i8** @docInfo, align 8, !tbaa !1
  %tobool274 = icmp ne i8* %219, null
  br i1 %tobool274, label %if.then.275, label %if.end.282

if.then.275:                                      ; preds = %if.then.273
  %220 = load i8*, i8** @docInfo, align 8, !tbaa !1
  %call276 = call i64 @strlen(i8* %220) #9
  %cmp277 = icmp ugt i64 %call276, 0
  br i1 %cmp277, label %if.then.279, label %if.end.281

if.then.279:                                      ; preds = %if.then.275
  %221 = load i8*, i8** @docInfo, align 8, !tbaa !1
  %call280 = call i8* @opvp_alloc_string(i8** %doc_info, i8* %221) #7
  store i8* %call280, i8** %doc_info, align 8, !tbaa !1
  br label %if.end.281

if.end.281:                                       ; preds = %if.then.279, %if.then.275
  br label %if.end.282

if.end.282:                                       ; preds = %if.end.281, %if.then.273
  %222 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call283 = call i8* @opvp_gen_doc_info(%struct.gx_device_s* %222) #7
  %call284 = call i8* @opvp_alloc_string(i8** %tmp_info, i8* %call283) #7
  store i8* %call284, i8** %tmp_info, align 8, !tbaa !1
  %223 = load i8*, i8** %tmp_info, align 8, !tbaa !1
  %tobool285 = icmp ne i8* %223, null
  br i1 %tobool285, label %if.then.286, label %if.end.303

if.then.286:                                      ; preds = %if.end.282
  %224 = load i8*, i8** %tmp_info, align 8, !tbaa !1
  %call287 = call i64 @strlen(i8* %224) #9
  %cmp288 = icmp ugt i64 %call287, 0
  br i1 %cmp288, label %if.then.290, label %if.end.302

if.then.290:                                      ; preds = %if.then.286
  %225 = load i8*, i8** %doc_info, align 8, !tbaa !1
  %tobool291 = icmp ne i8* %225, null
  br i1 %tobool291, label %if.then.292, label %if.end.299

if.then.292:                                      ; preds = %if.then.290
  %226 = load i8*, i8** %doc_info, align 8, !tbaa !1
  %call293 = call i64 @strlen(i8* %226) #9
  %cmp294 = icmp ugt i64 %call293, 0
  br i1 %cmp294, label %if.then.296, label %if.end.298

if.then.296:                                      ; preds = %if.then.292
  %call297 = call i8* @opvp_cat_string(i8** %doc_info, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.182, i32 0, i32 0)) #7
  br label %if.end.298

if.end.298:                                       ; preds = %if.then.296, %if.then.292
  br label %if.end.299

if.end.299:                                       ; preds = %if.end.298, %if.then.290
  %call300 = call i8* @opvp_cat_string(i8** %doc_info, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.183, i32 0, i32 0)) #7
  store i8* %call300, i8** %doc_info, align 8, !tbaa !1
  %227 = load i8*, i8** %tmp_info, align 8, !tbaa !1
  %call301 = call i8* @opvp_cat_string(i8** %doc_info, i8* %227) #7
  store i8* %call301, i8** %doc_info, align 8, !tbaa !1
  br label %if.end.302

if.end.302:                                       ; preds = %if.end.299, %if.then.286
  br label %if.end.303

if.end.303:                                       ; preds = %if.end.302, %if.end.282
  %228 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpStartDoc = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %228, i32 0, i32 5
  %229 = load i32 (i32, i8*)*, i32 (i32, i8*)** %opvpStartDoc, align 8, !tbaa !66
  %tobool304 = icmp ne i32 (i32, i8*)* %229, null
  br i1 %tobool304, label %if.then.305, label %if.end.309

if.then.305:                                      ; preds = %if.end.303
  %230 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpStartDoc306 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %230, i32 0, i32 5
  %231 = load i32 (i32, i8*)*, i32 (i32, i8*)** %opvpStartDoc306, align 8, !tbaa !66
  %232 = load i32, i32* @printerContext, align 4, !tbaa !5
  %233 = load i8*, i8** %doc_info, align 8, !tbaa !1
  %call307 = call i8* @opvp_to_utf8(i8* %233) #7
  %call308 = call i32 %231(i32 %232, i8* %call307) #7
  store i32 %call308, i32* %r, align 4, !tbaa !5
  br label %if.end.309

if.end.309:                                       ; preds = %if.then.305, %if.end.303
  %234 = load i32, i32* %r, align 4, !tbaa !5
  %cmp310 = icmp ne i32 %234, 0
  br i1 %cmp310, label %if.then.312, label %if.end.313

if.then.312:                                      ; preds = %if.end.309
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.313

if.end.313:                                       ; preds = %if.then.312, %if.end.309
  br label %if.end.314

if.end.314:                                       ; preds = %if.end.313, %if.end.271
  %235 = load i8*, i8** %tmp_info, align 8, !tbaa !1
  %tobool315 = icmp ne i8* %235, null
  br i1 %tobool315, label %if.then.316, label %if.end.318

if.then.316:                                      ; preds = %if.end.314
  %call317 = call i8* @opvp_alloc_string(i8** %tmp_info, i8* null) #7
  br label %if.end.318

if.end.318:                                       ; preds = %if.then.316, %if.end.314
  %236 = load i8*, i8** %doc_info, align 8, !tbaa !1
  %tobool319 = icmp ne i8* %236, null
  br i1 %tobool319, label %if.then.320, label %if.end.322

if.then.320:                                      ; preds = %if.end.318
  %call321 = call i8* @opvp_alloc_string(i8** %doc_info, i8* null) #7
  br label %if.end.322

if.end.322:                                       ; preds = %if.then.320, %if.end.318
  %237 = load i8*, i8** %job_info, align 8, !tbaa !1
  %tobool323 = icmp ne i8* %237, null
  br i1 %tobool323, label %if.then.324, label %if.end.326

if.then.324:                                      ; preds = %if.end.322
  %call325 = call i8* @opvp_alloc_string(i8** %job_info, i8* null) #7
  br label %if.end.326

if.end.326:                                       ; preds = %if.then.324, %if.end.322
  %238 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %238, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.326, %if.end.181, %if.then.154, %if.then.147, %if.then.142, %if.then.118, %if.then
  %239 = bitcast [2 x i32]* %apiVersion to i8*
  call void @llvm.lifetime.end(i64 8, i8* %239) #2
  %240 = bitcast [4 x float]* %adj_margins to i8*
  call void @llvm.lifetime.end(i64 16, i8* %240) #2
  %241 = bitcast float* %margin_height to i8*
  call void @llvm.lifetime.end(i64 4, i8* %241) #2
  %242 = bitcast float* %margin_width to i8*
  call void @llvm.lifetime.end(i64 4, i8* %242) #2
  %243 = bitcast i8** %tmp_info to i8*
  call void @llvm.lifetime.end(i64 8, i8* %243) #2
  %244 = bitcast i8** %doc_info to i8*
  call void @llvm.lifetime.end(i64 8, i8* %244) #2
  %245 = bitcast i8** %job_info to i8*
  call void @llvm.lifetime.end(i64 8, i8* %245) #2
  %246 = bitcast %struct._opvp_api_procs** %api_entry to i8*
  call void @llvm.lifetime.end(i64 8, i8* %246) #2
  %247 = bitcast i32* %dc to i8*
  call void @llvm.lifetime.end(i64 4, i8* %247) #2
  %248 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %248) #2
  %249 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %249) #2
  %250 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %250) #2
  %251 = bitcast %struct.gx_device_oprp_s** %rdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %251) #2
  %252 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %252) #2
  %253 = load i32, i32* %retval
  ret i32 %253
}

; Function Attrs: nounwind uwtable
define internal void @opvp_get_initial_matrix(%struct.gx_device_s* %dev, %struct.gs_matrix_s* %pmat) #0 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pmat.addr = alloca %struct.gs_matrix_s*, align 8
  %pdev = alloca %struct.gx_device_opvp_s*, align 8
  %omat = alloca %struct._opvp_ctm, align 4
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_matrix_s* %pmat, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.gx_device_opvp_s*
  store %struct.gx_device_opvp_s* %2, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %3 = bitcast %struct._opvp_ctm* %omat to i8*
  call void @llvm.lifetime.start(i64 24, i8* %3) #2
  %4 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %5 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  call void @gx_default_get_initial_matrix(%struct.gx_device_s* %4, %struct.gs_matrix_s* %5) #7
  %6 = load i32, i32* @zooming, align 4, !tbaa !5
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load float, float* getelementptr inbounds ([2 x float], [2 x float]* @zoom, i32 0, i64 0), align 4, !tbaa !10
  %8 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %xx = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %8, i32 0, i32 0
  %9 = load float, float* %xx, align 4, !tbaa !67
  %mul = fmul float %9, %7
  store float %mul, float* %xx, align 4, !tbaa !67
  %10 = load float, float* getelementptr inbounds ([2 x float], [2 x float]* @zoom, i32 0, i64 1), align 4, !tbaa !10
  %11 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %xy = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %11, i32 0, i32 1
  %12 = load float, float* %xy, align 4, !tbaa !68
  %mul1 = fmul float %12, %10
  store float %mul1, float* %xy, align 4, !tbaa !68
  %13 = load float, float* getelementptr inbounds ([2 x float], [2 x float]* @zoom, i32 0, i64 0), align 4, !tbaa !10
  %14 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %yx = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %14, i32 0, i32 2
  %15 = load float, float* %yx, align 4, !tbaa !69
  %mul2 = fmul float %15, %13
  store float %mul2, float* %yx, align 4, !tbaa !69
  %16 = load float, float* getelementptr inbounds ([2 x float], [2 x float]* @zoom, i32 0, i64 1), align 4, !tbaa !10
  %17 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %yy = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %17, i32 0, i32 3
  %18 = load float, float* %yy, align 4, !tbaa !70
  %mul3 = fmul float %18, %16
  store float %mul3, float* %yy, align 4, !tbaa !70
  %19 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %tx = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %19, i32 0, i32 4
  %20 = load float, float* %tx, align 4, !tbaa !71
  %21 = load float, float* getelementptr inbounds ([2 x float], [2 x float]* @zoom, i32 0, i64 0), align 4, !tbaa !10
  %mul4 = fmul float %20, %21
  %22 = load float, float* getelementptr inbounds ([2 x float], [2 x float]* @shift, i32 0, i64 0), align 4, !tbaa !10
  %add = fadd float %mul4, %22
  %23 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %tx5 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %23, i32 0, i32 4
  store float %add, float* %tx5, align 4, !tbaa !71
  %24 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %ty = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %24, i32 0, i32 5
  %25 = load float, float* %ty, align 4, !tbaa !72
  %26 = load float, float* getelementptr inbounds ([2 x float], [2 x float]* @zoom, i32 0, i64 1), align 4, !tbaa !10
  %mul6 = fmul float %25, %26
  %27 = load float, float* getelementptr inbounds ([2 x float], [2 x float]* @shift, i32 0, i64 1), align 4, !tbaa !10
  %add7 = fadd float %mul6, %27
  %28 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %ty8 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %28, i32 0, i32 5
  store float %add7, float* %ty8, align 4, !tbaa !72
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %29 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %is_open = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %29, i32 0, i32 9
  %30 = load i32, i32* %is_open, align 4, !tbaa !73
  %tobool9 = icmp ne i32 %30, 0
  br i1 %tobool9, label %if.then.10, label %if.end.20

if.then.10:                                       ; preds = %if.end
  %31 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpResetCTM = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %31, i32 0, i32 11
  %32 = load i32 (i32)*, i32 (i32)** %opvpResetCTM, align 8, !tbaa !74
  %tobool11 = icmp ne i32 (i32)* %32, null
  br i1 %tobool11, label %if.then.12, label %if.else

if.then.12:                                       ; preds = %if.then.10
  %33 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpResetCTM13 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %33, i32 0, i32 11
  %34 = load i32 (i32)*, i32 (i32)** %opvpResetCTM13, align 8, !tbaa !74
  %35 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call = call i32 %34(i32 %35) #7
  br label %if.end.19

if.else:                                          ; preds = %if.then.10
  %a = getelementptr inbounds %struct._opvp_ctm, %struct._opvp_ctm* %omat, i32 0, i32 0
  store float 1.000000e+00, float* %a, align 4, !tbaa !75
  %b = getelementptr inbounds %struct._opvp_ctm, %struct._opvp_ctm* %omat, i32 0, i32 1
  store float 0.000000e+00, float* %b, align 4, !tbaa !77
  %c = getelementptr inbounds %struct._opvp_ctm, %struct._opvp_ctm* %omat, i32 0, i32 2
  store float 0.000000e+00, float* %c, align 4, !tbaa !78
  %d = getelementptr inbounds %struct._opvp_ctm, %struct._opvp_ctm* %omat, i32 0, i32 3
  store float 1.000000e+00, float* %d, align 4, !tbaa !79
  %e = getelementptr inbounds %struct._opvp_ctm, %struct._opvp_ctm* %omat, i32 0, i32 4
  store float 0.000000e+00, float* %e, align 4, !tbaa !80
  %f = getelementptr inbounds %struct._opvp_ctm, %struct._opvp_ctm* %omat, i32 0, i32 5
  store float 0.000000e+00, float* %f, align 4, !tbaa !81
  %36 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetCTM = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %36, i32 0, i32 12
  %37 = load i32 (i32, %struct._opvp_ctm*)*, i32 (i32, %struct._opvp_ctm*)** %opvpSetCTM, align 8, !tbaa !82
  %tobool14 = icmp ne i32 (i32, %struct._opvp_ctm*)* %37, null
  br i1 %tobool14, label %if.then.15, label %if.end.18

if.then.15:                                       ; preds = %if.else
  %38 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetCTM16 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %38, i32 0, i32 12
  %39 = load i32 (i32, %struct._opvp_ctm*)*, i32 (i32, %struct._opvp_ctm*)** %opvpSetCTM16, align 8, !tbaa !82
  %40 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call17 = call i32 %39(i32 %40, %struct._opvp_ctm* %omat) #7
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.15, %if.else
  br label %if.end.19

if.end.19:                                        ; preds = %if.end.18, %if.then.12
  br label %if.end.20

if.end.20:                                        ; preds = %if.end.19, %if.end
  %41 = bitcast %struct._opvp_ctm* %omat to i8*
  call void @llvm.lifetime.end(i64 24, i8* %41) #2
  %42 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %42) #2
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @opvp_output_page(%struct.gx_device_s* %dev, i32 %num_copies, i32 %flush) #0 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %num_copies.addr = alloca i32, align 4
  %flush.addr = alloca i32, align 4
  %pdev = alloca %struct.gx_device_opvp_s*, align 8
  %ecode = alloca i32, align 4
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i32 %num_copies, i32* %num_copies.addr, align 4, !tbaa !5
  store i32 %flush, i32* %flush.addr, align 4, !tbaa !5
  %0 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.gx_device_opvp_s*
  store %struct.gx_device_opvp_s* %2, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %4 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  store i32 -1, i32* %code, align 4, !tbaa !5
  %5 = load i32, i32* @inkjet, align 4, !tbaa !5
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %7 = load i32, i32* %num_copies.addr, align 4, !tbaa !5
  %8 = load i32, i32* %flush.addr, align 4, !tbaa !5
  %call = call i32 @gdev_prn_output_page(%struct.gx_device_s* %6, i32 %7, i32 %8) #7
  store i32 %call, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %9 = load i32, i32* @beginPage, align 4, !tbaa !5
  %tobool1 = icmp ne i32 %9, 0
  br i1 %tobool1, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %10 = load i32, i32* @inkjet, align 4, !tbaa !5
  %tobool2 = icmp ne i32 %10, 0
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %if.end
  br i1 false, label %if.then.5, label %if.end.6

cond.false:                                       ; preds = %lor.lhs.false
  %11 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %vec_procs = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %11, i32 0, i32 44
  %12 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs, align 8, !tbaa !61
  %beginpage = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %12, i32 0, i32 0
  %13 = load i32 (%struct.gx_device_vector_s*)*, i32 (%struct.gx_device_vector_s*)** %beginpage, align 8, !tbaa !83
  %14 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %15 = bitcast %struct.gx_device_opvp_s* %14 to %struct.gx_device_vector_s*
  %call3 = call i32 %13(%struct.gx_device_vector_s* %15) #7
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %cond.false, %cond.true
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.6:                                         ; preds = %cond.false, %cond.true
  %call7 = call i32 @opvp_endpage() #7
  store i32 %call7, i32* %code, align 4, !tbaa !5
  %16 = load i32, i32* %code, align 4, !tbaa !5
  %tobool8 = icmp ne i32 %16, 0
  br i1 %tobool8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.end.6
  %17 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %17, i32* %ecode, align 4, !tbaa !5
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.9, %if.end.6
  %18 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %in_page = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %18, i32 0, i32 63
  store i32 0, i32* %in_page, align 4, !tbaa !85
  store i32 0, i32* @beginPage, align 4, !tbaa !5
  %19 = load i32, i32* @vector, align 4, !tbaa !5
  %tobool11 = icmp ne i32 %19, 0
  br i1 %tobool11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.end.10
  %20 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %21 = bitcast %struct.gx_device_opvp_s* %20 to %struct.gx_device_vector_s*
  call void @gdev_vector_reset(%struct.gx_device_vector_s* %21) #7
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.12, %if.end.10
  %22 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %23 = load i32, i32* %num_copies.addr, align 4, !tbaa !5
  %24 = load i32, i32* %flush.addr, align 4, !tbaa !5
  %call14 = call i32 @gx_finish_output_page(%struct.gx_device_s* %22, i32 %23, i32 %24) #7
  store i32 %call14, i32* %code, align 4, !tbaa !5
  %25 = load i32, i32* %code, align 4, !tbaa !5
  %tobool15 = icmp ne i32 %25, 0
  br i1 %tobool15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.end.13
  %26 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %26, i32* %ecode, align 4, !tbaa !5
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.16, %if.end.13
  %27 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %27, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.17, %if.then.5, %if.then
  %28 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %28) #2
  %29 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %29) #2
  %30 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %30) #2
  %31 = load i32, i32* %retval
  ret i32 %31
}

; Function Attrs: nounwind uwtable
define internal i32 @opvp_close(%struct.gx_device_s* %dev) #0 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pdev = alloca %struct.gx_device_opvp_s*, align 8
  %ecode = alloca i32, align 4
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.gx_device_opvp_s*
  store %struct.gx_device_opvp_s* %2, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %4 = load i32, i32* @printerContext, align 4, !tbaa !5
  %cmp = icmp ne i32 %4, -1
  br i1 %cmp, label %if.then, label %if.end.13

if.then:                                          ; preds = %entry
  %5 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpEndDoc = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %5, i32 0, i32 6
  %6 = load i32 (i32)*, i32 (i32)** %opvpEndDoc, align 8, !tbaa !86
  %tobool = icmp ne i32 (i32)* %6, null
  br i1 %tobool, label %if.then.1, label %if.end

if.then.1:                                        ; preds = %if.then
  %7 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpEndDoc2 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %7, i32 0, i32 6
  %8 = load i32 (i32)*, i32 (i32)** %opvpEndDoc2, align 8, !tbaa !86
  %9 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call = call i32 %8(i32 %9) #7
  br label %if.end

if.end:                                           ; preds = %if.then.1, %if.then
  %10 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpEndJob = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %10, i32 0, i32 3
  %11 = load i32 (i32)*, i32 (i32)** %opvpEndJob, align 8, !tbaa !87
  %tobool3 = icmp ne i32 (i32)* %11, null
  br i1 %tobool3, label %if.then.4, label %if.end.7

if.then.4:                                        ; preds = %if.end
  %12 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpEndJob5 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %12, i32 0, i32 3
  %13 = load i32 (i32)*, i32 (i32)** %opvpEndJob5, align 8, !tbaa !87
  %14 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call6 = call i32 %13(i32 %14) #7
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.4, %if.end
  %15 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpClosePrinter = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %15, i32 0, i32 1
  %16 = load i32 (i32)*, i32 (i32)** %opvpClosePrinter, align 8, !tbaa !88
  %tobool8 = icmp ne i32 (i32)* %16, null
  br i1 %tobool8, label %if.then.9, label %if.end.12

if.then.9:                                        ; preds = %if.end.7
  %17 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpClosePrinter10 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %17, i32 0, i32 1
  %18 = load i32 (i32)*, i32 (i32)** %opvpClosePrinter10, align 8, !tbaa !88
  %19 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call11 = call i32 %18(i32 %19) #7
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.9, %if.end.7
  store i32 -1, i32* @printerContext, align 4, !tbaa !5
  br label %if.end.13

if.end.13:                                        ; preds = %if.end.12, %entry
  %20 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %tobool14 = icmp ne %struct._opvp_api_procs* %20, null
  br i1 %tobool14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.13
  %21 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %22 = bitcast %struct._opvp_api_procs* %21 to i8*
  call void @free(i8* %22) #8
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.15, %if.end.13
  store %struct._opvp_api_procs* null, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %call17 = call i32 @opvp_unload_vector_driver() #7
  %23 = load i32, i32* @inkjet, align 4, !tbaa !5
  %tobool18 = icmp ne i32 %23, 0
  br i1 %tobool18, label %if.then.19, label %if.else

if.then.19:                                       ; preds = %if.end.16
  %24 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call20 = call i32 @gdev_prn_close(%struct.gx_device_s* %24) #7
  br label %if.end.22

if.else:                                          ; preds = %if.end.16
  %25 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %26 = bitcast %struct.gx_device_opvp_s* %25 to %struct.gx_device_vector_s*
  %call21 = call i32 @gdev_vector_close_file(%struct.gx_device_vector_s* %26) #7
  br label %if.end.22

if.end.22:                                        ; preds = %if.else, %if.then.19
  store i32 -1, i32* @outputFD, align 4, !tbaa !5
  %27 = load i32, i32* %ecode, align 4, !tbaa !5
  %28 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %28) #2
  %29 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %29) #2
  ret i32 %27
}

; Function Attrs: nounwind uwtable
define internal i64 @opvp_map_rgb_color(%struct.gx_device_s* %dev, i16* %prgb) #0 {
entry:
  %retval = alloca i64, align 8
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %prgb.addr = alloca i16*, align 8
  %cs = alloca i32, align 4
  %c = alloca i32, align 4
  %m = alloca i32, align 4
  %y = alloca i32, align 4
  %k = alloca i32, align 4
  %r = alloca i16, align 2
  %g = alloca i16, align 2
  %b = alloca i16, align 2
  %cleanup.dest.slot = alloca i32
  %rgb = alloca [3 x i16], align 2
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i16* %prgb, i16** %prgb.addr, align 8, !tbaa !1
  %0 = bitcast i32* %cs to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = bitcast i32* %c to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #2
  %2 = bitcast i32* %m to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #2
  %3 = bitcast i32* %y to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  %4 = bitcast i32* %k to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  %5 = bitcast i16* %r to i8*
  call void @llvm.lifetime.start(i64 2, i8* %5) #2
  %6 = bitcast i16* %g to i8*
  call void @llvm.lifetime.start(i64 2, i8* %6) #2
  %7 = bitcast i16* %b to i8*
  call void @llvm.lifetime.start(i64 2, i8* %7) #2
  %8 = load i16*, i16** %prgb.addr, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds i16, i16* %8, i64 0
  %9 = load i16, i16* %arrayidx, align 2, !tbaa !89
  store i16 %9, i16* %r, align 2, !tbaa !89
  %10 = load i16*, i16** %prgb.addr, align 8, !tbaa !1
  %arrayidx1 = getelementptr inbounds i16, i16* %10, i64 1
  %11 = load i16, i16* %arrayidx1, align 2, !tbaa !89
  store i16 %11, i16* %g, align 2, !tbaa !89
  %12 = load i16*, i16** %prgb.addr, align 8, !tbaa !1
  %arrayidx2 = getelementptr inbounds i16, i16* %12, i64 2
  %13 = load i16, i16* %arrayidx2, align 2, !tbaa !89
  store i16 %13, i16* %b, align 2, !tbaa !89
  store i32 6, i32* %cs, align 4, !tbaa !64
  %14 = load i32, i32* @colorSpace, align 4, !tbaa !64
  store i32 %14, i32* %cs, align 4, !tbaa !64
  %15 = load i32, i32* %cs, align 4, !tbaa !64
  switch i32 %15, label %sw.default [
    i32 7, label %sw.bb
    i32 3, label %sw.bb.7
    i32 2, label %sw.bb.7
    i32 1, label %sw.bb.50
    i32 0, label %sw.bb.54
    i32 6, label %sw.bb.56
    i32 5, label %sw.bb.56
  ]

sw.bb:                                            ; preds = %entry
  %16 = load i16, i16* %b, align 2, !tbaa !89
  %conv = zext i16 %16 to i64
  %17 = load i16, i16* %g, align 2, !tbaa !89
  %conv3 = zext i16 %17 to i64
  %shl = shl i64 %conv3, 16
  %add = add nsw i64 %conv, %shl
  %18 = load i16, i16* %b, align 2, !tbaa !89
  %conv4 = zext i16 %18 to i64
  %shl5 = shl i64 %conv4, 32
  %add6 = add nsw i64 %add, %shl5
  store i64 %add6, i64* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.bb.7:                                          ; preds = %entry, %entry
  %19 = load i16, i16* %r, align 2, !tbaa !89
  %conv8 = zext i16 %19 to i32
  %neg = xor i32 %conv8, -1
  %mul = mul i32 %neg, 65281
  %add9 = add i32 %mul, 8388608
  %shr = lshr i32 %add9, 24
  %conv10 = trunc i32 %shr to i16
  %conv11 = zext i16 %conv10 to i32
  store i32 %conv11, i32* %c, align 4, !tbaa !5
  %20 = load i16, i16* %g, align 2, !tbaa !89
  %conv12 = zext i16 %20 to i32
  %neg13 = xor i32 %conv12, -1
  %mul14 = mul i32 %neg13, 65281
  %add15 = add i32 %mul14, 8388608
  %shr16 = lshr i32 %add15, 24
  %conv17 = trunc i32 %shr16 to i16
  %conv18 = zext i16 %conv17 to i32
  store i32 %conv18, i32* %m, align 4, !tbaa !5
  %21 = load i16, i16* %b, align 2, !tbaa !89
  %conv19 = zext i16 %21 to i32
  %neg20 = xor i32 %conv19, -1
  %mul21 = mul i32 %neg20, 65281
  %add22 = add i32 %mul21, 8388608
  %shr23 = lshr i32 %add22, 24
  %conv24 = trunc i32 %shr23 to i16
  %conv25 = zext i16 %conv24 to i32
  store i32 %conv25, i32* %y, align 4, !tbaa !5
  %22 = load i32, i32* %cs, align 4, !tbaa !64
  %cmp = icmp eq i32 %22, 3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %sw.bb.7
  %23 = load i32, i32* %c, align 4, !tbaa !5
  %24 = load i32, i32* %m, align 4, !tbaa !5
  %cmp27 = icmp ult i32 %23, %24
  br i1 %cmp27, label %cond.true, label %cond.false.32

cond.true:                                        ; preds = %if.then
  %25 = load i32, i32* %c, align 4, !tbaa !5
  %26 = load i32, i32* %y, align 4, !tbaa !5
  %cmp29 = icmp ult i32 %25, %26
  br i1 %cmp29, label %cond.true.31, label %cond.false

cond.true.31:                                     ; preds = %cond.true
  %27 = load i32, i32* %c, align 4, !tbaa !5
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %28 = load i32, i32* %y, align 4, !tbaa !5
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.31
  %cond = phi i32 [ %27, %cond.true.31 ], [ %28, %cond.false ]
  br label %cond.end.39

cond.false.32:                                    ; preds = %if.then
  %29 = load i32, i32* %m, align 4, !tbaa !5
  %30 = load i32, i32* %y, align 4, !tbaa !5
  %cmp33 = icmp ult i32 %29, %30
  br i1 %cmp33, label %cond.true.35, label %cond.false.36

cond.true.35:                                     ; preds = %cond.false.32
  %31 = load i32, i32* %m, align 4, !tbaa !5
  br label %cond.end.37

cond.false.36:                                    ; preds = %cond.false.32
  %32 = load i32, i32* %y, align 4, !tbaa !5
  br label %cond.end.37

cond.end.37:                                      ; preds = %cond.false.36, %cond.true.35
  %cond38 = phi i32 [ %31, %cond.true.35 ], [ %32, %cond.false.36 ]
  br label %cond.end.39

cond.end.39:                                      ; preds = %cond.end.37, %cond.end
  %cond40 = phi i32 [ %cond, %cond.end ], [ %cond38, %cond.end.37 ]
  store i32 %cond40, i32* %k, align 4, !tbaa !5
  %33 = load i32, i32* %k, align 4, !tbaa !5
  %34 = load i32, i32* %c, align 4, !tbaa !5
  %sub = sub i32 %34, %33
  store i32 %sub, i32* %c, align 4, !tbaa !5
  %35 = load i32, i32* %k, align 4, !tbaa !5
  %36 = load i32, i32* %m, align 4, !tbaa !5
  %sub41 = sub i32 %36, %35
  store i32 %sub41, i32* %m, align 4, !tbaa !5
  %37 = load i32, i32* %k, align 4, !tbaa !5
  %38 = load i32, i32* %y, align 4, !tbaa !5
  %sub42 = sub i32 %38, %37
  store i32 %sub42, i32* %y, align 4, !tbaa !5
  br label %if.end

if.else:                                          ; preds = %sw.bb.7
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end.39
  %39 = load i32, i32* %k, align 4, !tbaa !5
  %40 = load i32, i32* %y, align 4, !tbaa !5
  %shl43 = shl i32 %40, 8
  %add44 = add i32 %39, %shl43
  %41 = load i32, i32* %m, align 4, !tbaa !5
  %shl45 = shl i32 %41, 16
  %add46 = add i32 %add44, %shl45
  %42 = load i32, i32* %c, align 4, !tbaa !5
  %shl47 = shl i32 %42, 24
  %add48 = add i32 %add46, %shl47
  %conv49 = zext i32 %add48 to i64
  store i64 %conv49, i64* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.bb.50:                                         ; preds = %entry
  %43 = bitcast [3 x i16]* %rgb to i8*
  call void @llvm.lifetime.start(i64 6, i8* %43) #2
  %44 = load i16, i16* %r, align 2, !tbaa !89
  %arrayidx51 = getelementptr inbounds [3 x i16], [3 x i16]* %rgb, i32 0, i64 2
  store i16 %44, i16* %arrayidx51, align 2, !tbaa !89
  %arrayidx52 = getelementptr inbounds [3 x i16], [3 x i16]* %rgb, i32 0, i64 1
  store i16 %44, i16* %arrayidx52, align 2, !tbaa !89
  %arrayidx53 = getelementptr inbounds [3 x i16], [3 x i16]* %rgb, i32 0, i64 0
  store i16 %44, i16* %arrayidx53, align 2, !tbaa !89
  %45 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %arraydecay = getelementptr inbounds [3 x i16], [3 x i16]* %rgb, i32 0, i32 0
  %call = call i64 @gx_default_gray_map_rgb_color(%struct.gx_device_s* %45, i16* %arraydecay) #7
  store i64 %call, i64* %retval
  store i32 1, i32* %cleanup.dest.slot
  %46 = bitcast [3 x i16]* %rgb to i8*
  call void @llvm.lifetime.end(i64 6, i8* %46) #2
  br label %cleanup

sw.bb.54:                                         ; preds = %entry
  %47 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %48 = load i16*, i16** %prgb.addr, align 8, !tbaa !1
  %call55 = call i64 @gx_default_b_w_map_rgb_color(%struct.gx_device_s* %47, i16* %48) #7
  store i64 %call55, i64* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.bb.56:                                         ; preds = %entry, %entry
  br label %sw.default

sw.default:                                       ; preds = %entry, %sw.bb.56
  %49 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %50 = load i16*, i16** %prgb.addr, align 8, !tbaa !1
  %call57 = call i64 @gx_default_rgb_map_rgb_color(%struct.gx_device_s* %49, i16* %50) #7
  store i64 %call57, i64* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %sw.default, %sw.bb.54, %sw.bb.50, %if.end, %sw.bb
  %51 = bitcast i16* %b to i8*
  call void @llvm.lifetime.end(i64 2, i8* %51) #2
  %52 = bitcast i16* %g to i8*
  call void @llvm.lifetime.end(i64 2, i8* %52) #2
  %53 = bitcast i16* %r to i8*
  call void @llvm.lifetime.end(i64 2, i8* %53) #2
  %54 = bitcast i32* %k to i8*
  call void @llvm.lifetime.end(i64 4, i8* %54) #2
  %55 = bitcast i32* %y to i8*
  call void @llvm.lifetime.end(i64 4, i8* %55) #2
  %56 = bitcast i32* %m to i8*
  call void @llvm.lifetime.end(i64 4, i8* %56) #2
  %57 = bitcast i32* %c to i8*
  call void @llvm.lifetime.end(i64 4, i8* %57) #2
  %58 = bitcast i32* %cs to i8*
  call void @llvm.lifetime.end(i64 4, i8* %58) #2
  %59 = load i64, i64* %retval
  ret i64 %59
}

; Function Attrs: nounwind uwtable
define internal i32 @opvp_map_color_rgb(%struct.gx_device_s* %dev, i64 %color, i16* %prgb) #0 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %color.addr = alloca i64, align 8
  %prgb.addr = alloca i16*, align 8
  %cs = alloca i32, align 4
  %c = alloca i32, align 4
  %m = alloca i32, align 4
  %y = alloca i32, align 4
  %k = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i64 %color, i64* %color.addr, align 8, !tbaa !90
  store i16* %prgb, i16** %prgb.addr, align 8, !tbaa !1
  %0 = bitcast i32* %cs to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  store i32 6, i32* %cs, align 4, !tbaa !64
  %1 = bitcast i32* %c to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #2
  %2 = bitcast i32* %m to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #2
  %3 = bitcast i32* %y to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  %4 = bitcast i32* %k to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  %5 = load i32, i32* @colorSpace, align 4, !tbaa !64
  store i32 %5, i32* %cs, align 4, !tbaa !64
  %6 = load i32, i32* %cs, align 4, !tbaa !64
  switch i32 %6, label %sw.default [
    i32 7, label %sw.bb
    i32 3, label %sw.bb.8
    i32 2, label %sw.bb.8
    i32 1, label %sw.bb.79
    i32 0, label %sw.bb.80
    i32 6, label %sw.bb.82
    i32 5, label %sw.bb.82
  ]

sw.bb:                                            ; preds = %entry
  %7 = load i64, i64* %color.addr, align 8, !tbaa !90
  %shr = ashr i64 %7, 32
  %and = and i64 %shr, 65535
  %conv = trunc i64 %and to i16
  %8 = load i16*, i16** %prgb.addr, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds i16, i16* %8, i64 0
  store i16 %conv, i16* %arrayidx, align 2, !tbaa !89
  %9 = load i64, i64* %color.addr, align 8, !tbaa !90
  %shr1 = ashr i64 %9, 16
  %and2 = and i64 %shr1, 65535
  %conv3 = trunc i64 %and2 to i16
  %10 = load i16*, i16** %prgb.addr, align 8, !tbaa !1
  %arrayidx4 = getelementptr inbounds i16, i16* %10, i64 1
  store i16 %conv3, i16* %arrayidx4, align 2, !tbaa !89
  %11 = load i64, i64* %color.addr, align 8, !tbaa !90
  %and5 = and i64 %11, 65535
  %conv6 = trunc i64 %and5 to i16
  %12 = load i16*, i16** %prgb.addr, align 8, !tbaa !1
  %arrayidx7 = getelementptr inbounds i16, i16* %12, i64 2
  store i16 %conv6, i16* %arrayidx7, align 2, !tbaa !89
  br label %sw.epilog

sw.bb.8:                                          ; preds = %entry, %entry
  %13 = load i64, i64* %color.addr, align 8, !tbaa !90
  %shr9 = lshr i64 %13, 24
  %and10 = and i64 %shr9, 255
  %shl = shl i64 %and10, 8
  %14 = load i64, i64* %color.addr, align 8, !tbaa !90
  %shr11 = lshr i64 %14, 24
  %and12 = and i64 %shr11, 255
  %shr13 = lshr i64 %and12, 0
  %add = add i64 %shl, %shr13
  %conv14 = trunc i64 %add to i32
  store i32 %conv14, i32* %c, align 4, !tbaa !5
  %15 = load i64, i64* %color.addr, align 8, !tbaa !90
  %shr15 = lshr i64 %15, 16
  %and16 = and i64 %shr15, 255
  %shl17 = shl i64 %and16, 8
  %16 = load i64, i64* %color.addr, align 8, !tbaa !90
  %shr18 = lshr i64 %16, 16
  %and19 = and i64 %shr18, 255
  %shr20 = lshr i64 %and19, 0
  %add21 = add i64 %shl17, %shr20
  %conv22 = trunc i64 %add21 to i32
  store i32 %conv22, i32* %m, align 4, !tbaa !5
  %17 = load i64, i64* %color.addr, align 8, !tbaa !90
  %shr23 = lshr i64 %17, 8
  %and24 = and i64 %shr23, 255
  %shl25 = shl i64 %and24, 8
  %18 = load i64, i64* %color.addr, align 8, !tbaa !90
  %shr26 = lshr i64 %18, 8
  %and27 = and i64 %shr26, 255
  %shr28 = lshr i64 %and27, 0
  %add29 = add i64 %shl25, %shr28
  %conv30 = trunc i64 %add29 to i32
  store i32 %conv30, i32* %y, align 4, !tbaa !5
  %19 = load i32, i32* %cs, align 4, !tbaa !64
  %cmp = icmp eq i32 %19, 3
  br i1 %cmp, label %if.then, label %if.end.52

if.then:                                          ; preds = %sw.bb.8
  %20 = load i64, i64* %color.addr, align 8, !tbaa !90
  %and32 = and i64 %20, 255
  %shl33 = shl i64 %and32, 8
  %21 = load i64, i64* %color.addr, align 8, !tbaa !90
  %and34 = and i64 %21, 255
  %shr35 = lshr i64 %and34, 0
  %add36 = add i64 %shl33, %shr35
  %conv37 = trunc i64 %add36 to i32
  store i32 %conv37, i32* %k, align 4, !tbaa !5
  %22 = load i32, i32* %k, align 4, !tbaa !5
  %23 = load i32, i32* %c, align 4, !tbaa !5
  %add38 = add i32 %23, %22
  store i32 %add38, i32* %c, align 4, !tbaa !5
  %24 = load i32, i32* %c, align 4, !tbaa !5
  %cmp39 = icmp ugt i32 %24, 255
  br i1 %cmp39, label %if.then.41, label %if.end

if.then.41:                                       ; preds = %if.then
  store i32 255, i32* %c, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.then.41, %if.then
  %25 = load i32, i32* %k, align 4, !tbaa !5
  %26 = load i32, i32* %m, align 4, !tbaa !5
  %add42 = add i32 %26, %25
  store i32 %add42, i32* %m, align 4, !tbaa !5
  %27 = load i32, i32* %m, align 4, !tbaa !5
  %cmp43 = icmp ugt i32 %27, 255
  br i1 %cmp43, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %if.end
  store i32 255, i32* %m, align 4, !tbaa !5
  br label %if.end.46

if.end.46:                                        ; preds = %if.then.45, %if.end
  %28 = load i32, i32* %k, align 4, !tbaa !5
  %29 = load i32, i32* %y, align 4, !tbaa !5
  %add47 = add i32 %29, %28
  store i32 %add47, i32* %y, align 4, !tbaa !5
  %30 = load i32, i32* %y, align 4, !tbaa !5
  %cmp48 = icmp ugt i32 %30, 255
  br i1 %cmp48, label %if.then.50, label %if.end.51

if.then.50:                                       ; preds = %if.end.46
  store i32 255, i32* %y, align 4, !tbaa !5
  br label %if.end.51

if.end.51:                                        ; preds = %if.then.50, %if.end.46
  br label %if.end.52

if.end.52:                                        ; preds = %if.end.51, %sw.bb.8
  %31 = load i32, i32* %c, align 4, !tbaa !5
  %neg = xor i32 %31, -1
  %and53 = and i32 %neg, 255
  %shl54 = shl i32 %and53, 8
  %32 = load i32, i32* %c, align 4, !tbaa !5
  %neg55 = xor i32 %32, -1
  %and56 = and i32 %neg55, 255
  %shr57 = lshr i32 %and56, 0
  %add58 = add i32 %shl54, %shr57
  %conv59 = trunc i32 %add58 to i16
  %33 = load i16*, i16** %prgb.addr, align 8, !tbaa !1
  %arrayidx60 = getelementptr inbounds i16, i16* %33, i64 0
  store i16 %conv59, i16* %arrayidx60, align 2, !tbaa !89
  %34 = load i32, i32* %m, align 4, !tbaa !5
  %neg61 = xor i32 %34, -1
  %and62 = and i32 %neg61, 255
  %shl63 = shl i32 %and62, 8
  %35 = load i32, i32* %m, align 4, !tbaa !5
  %neg64 = xor i32 %35, -1
  %and65 = and i32 %neg64, 255
  %shr66 = lshr i32 %and65, 0
  %add67 = add i32 %shl63, %shr66
  %conv68 = trunc i32 %add67 to i16
  %36 = load i16*, i16** %prgb.addr, align 8, !tbaa !1
  %arrayidx69 = getelementptr inbounds i16, i16* %36, i64 1
  store i16 %conv68, i16* %arrayidx69, align 2, !tbaa !89
  %37 = load i32, i32* %y, align 4, !tbaa !5
  %neg70 = xor i32 %37, -1
  %and71 = and i32 %neg70, 255
  %shl72 = shl i32 %and71, 8
  %38 = load i32, i32* %y, align 4, !tbaa !5
  %neg73 = xor i32 %38, -1
  %and74 = and i32 %neg73, 255
  %shr75 = lshr i32 %and74, 0
  %add76 = add i32 %shl72, %shr75
  %conv77 = trunc i32 %add76 to i16
  %39 = load i16*, i16** %prgb.addr, align 8, !tbaa !1
  %arrayidx78 = getelementptr inbounds i16, i16* %39, i64 2
  store i16 %conv77, i16* %arrayidx78, align 2, !tbaa !89
  br label %sw.epilog

sw.bb.79:                                         ; preds = %entry
  %40 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %41 = load i64, i64* %color.addr, align 8, !tbaa !90
  %42 = load i16*, i16** %prgb.addr, align 8, !tbaa !1
  %call = call i32 @gx_default_gray_map_color_rgb(%struct.gx_device_s* %40, i64 %41, i16* %42) #7
  store i32 %call, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.bb.80:                                         ; preds = %entry
  %43 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %44 = load i64, i64* %color.addr, align 8, !tbaa !90
  %45 = load i16*, i16** %prgb.addr, align 8, !tbaa !1
  %call81 = call i32 @gx_default_b_w_map_color_rgb(%struct.gx_device_s* %43, i64 %44, i16* %45) #7
  store i32 %call81, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.bb.82:                                         ; preds = %entry, %entry
  br label %sw.default

sw.default:                                       ; preds = %entry, %sw.bb.82
  %46 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %47 = load i64, i64* %color.addr, align 8, !tbaa !90
  %48 = load i16*, i16** %prgb.addr, align 8, !tbaa !1
  %call83 = call i32 @gx_default_rgb_map_color_rgb(%struct.gx_device_s* %46, i64 %47, i16* %48) #7
  store i32 %call83, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.epilog:                                        ; preds = %if.end.52, %sw.bb
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %sw.epilog, %sw.default, %sw.bb.80, %sw.bb.79
  %49 = bitcast i32* %k to i8*
  call void @llvm.lifetime.end(i64 4, i8* %49) #2
  %50 = bitcast i32* %y to i8*
  call void @llvm.lifetime.end(i64 4, i8* %50) #2
  %51 = bitcast i32* %m to i8*
  call void @llvm.lifetime.end(i64 4, i8* %51) #2
  %52 = bitcast i32* %c to i8*
  call void @llvm.lifetime.end(i64 4, i8* %52) #2
  %53 = bitcast i32* %cs to i8*
  call void @llvm.lifetime.end(i64 4, i8* %53) #2
  %54 = load i32, i32* %retval
  ret i32 %54
}

; Function Attrs: nounwind uwtable
define internal i32 @opvp_fill_rectangle(%struct.gx_device_s* %dev, i32 %x, i32 %y, i32 %w, i32 %h, i64 %color) #0 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %color.addr = alloca i64, align 8
  %pdev = alloca %struct.gx_device_opvp_s*, align 8
  %data = alloca [8 x i8], align 1
  %code = alloca i32, align 4
  %ecode = alloca i32, align 4
  %brush = alloca %struct._opvp_brush, align 8
  %point = alloca %struct._opvp_point, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i32 %x, i32* %x.addr, align 4, !tbaa !5
  store i32 %y, i32* %y.addr, align 4, !tbaa !5
  store i32 %w, i32* %w.addr, align 4, !tbaa !5
  store i32 %h, i32* %h.addr, align 4, !tbaa !5
  store i64 %color, i64* %color.addr, align 8, !tbaa !90
  %0 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.gx_device_opvp_s*
  store %struct.gx_device_opvp_s* %2, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %3 = bitcast [8 x i8]* %data to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = bitcast [8 x i8]* %data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @opvp_fill_rectangle.data, i32 0, i32 0), i64 8, i32 1, i1 false)
  %5 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #2
  store i32 -1, i32* %code, align 4, !tbaa !5
  %6 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %7 = bitcast %struct._opvp_brush* %brush to i8*
  call void @llvm.lifetime.start(i64 40, i8* %7) #2
  %8 = bitcast %struct._opvp_point* %point to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #2
  %9 = load i32, i32* @vector, align 4, !tbaa !5
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %10 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %11 = load i32, i32* %x.addr, align 4, !tbaa !5
  %12 = load i32, i32* %y.addr, align 4, !tbaa !5
  %13 = load i32, i32* %w.addr, align 4, !tbaa !5
  %14 = load i32, i32* %h.addr, align 4, !tbaa !5
  %15 = load i64, i64* %color.addr, align 8, !tbaa !90
  %call = call i32 @gdev_vector_fill_rectangle(%struct.gx_device_s* %10, i32 %11, i32 %12, i32 %13, i32 %14, i64 %15) #7
  store i32 %call, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %16 = load i32, i32* @beginPage, align 4, !tbaa !5
  %tobool1 = icmp ne i32 %16, 0
  br i1 %tobool1, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %17 = load i32, i32* @inkjet, align 4, !tbaa !5
  %tobool2 = icmp ne i32 %17, 0
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %if.end
  br i1 false, label %if.then.5, label %if.end.6

cond.false:                                       ; preds = %lor.lhs.false
  %18 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %vec_procs = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %18, i32 0, i32 44
  %19 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs, align 8, !tbaa !61
  %beginpage = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %19, i32 0, i32 0
  %20 = load i32 (%struct.gx_device_vector_s*)*, i32 (%struct.gx_device_vector_s*)** %beginpage, align 8, !tbaa !83
  %21 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %22 = bitcast %struct.gx_device_opvp_s* %21 to %struct.gx_device_vector_s*
  %call3 = call i32 %20(%struct.gx_device_vector_s* %22) #7
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %cond.false, %cond.true
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.6:                                         ; preds = %cond.false, %cond.true
  %23 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %24 = load i64, i64* %color.addr, align 8, !tbaa !90
  %call7 = call i32 @opvp_set_brush_color(%struct.gx_device_opvp_s* %23, i64 %24, %struct._opvp_brush* %brush) #7
  %25 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetFillColor = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %25, i32 0, i32 41
  %26 = load i32 (i32, %struct._opvp_brush*)*, i32 (i32, %struct._opvp_brush*)** %opvpSetFillColor, align 8, !tbaa !91
  %tobool8 = icmp ne i32 (i32, %struct._opvp_brush*)* %26, null
  br i1 %tobool8, label %if.then.9, label %if.end.12

if.then.9:                                        ; preds = %if.end.6
  %27 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetFillColor10 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %27, i32 0, i32 41
  %28 = load i32 (i32, %struct._opvp_brush*)*, i32 (i32, %struct._opvp_brush*)** %opvpSetFillColor10, align 8, !tbaa !91
  %29 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call11 = call i32 %28(i32 %29, %struct._opvp_brush* %brush) #7
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.9, %if.end.6
  %30 = load i32, i32* %x.addr, align 4, !tbaa !5
  %shl = shl i32 %30, 8
  %x13 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %point, i32 0, i32 0
  store i32 %shl, i32* %x13, align 4, !tbaa !92
  %31 = load i32, i32* %y.addr, align 4, !tbaa !5
  %shl14 = shl i32 %31, 8
  %y15 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %point, i32 0, i32 1
  store i32 %shl14, i32* %y15, align 4, !tbaa !94
  %32 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetCurrentPoint = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %32, i32 0, i32 50
  %33 = load i32 (i32, i32, i32)*, i32 (i32, i32, i32)** %opvpSetCurrentPoint, align 8, !tbaa !95
  %tobool16 = icmp ne i32 (i32, i32, i32)* %33, null
  br i1 %tobool16, label %if.then.17, label %if.end.22

if.then.17:                                       ; preds = %if.end.12
  %34 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetCurrentPoint18 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %34, i32 0, i32 50
  %35 = load i32 (i32, i32, i32)*, i32 (i32, i32, i32)** %opvpSetCurrentPoint18, align 8, !tbaa !95
  %36 = load i32, i32* @printerContext, align 4, !tbaa !5
  %x19 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %point, i32 0, i32 0
  %37 = load i32, i32* %x19, align 4, !tbaa !92
  %y20 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %point, i32 0, i32 1
  %38 = load i32, i32* %y20, align 4, !tbaa !94
  %call21 = call i32 %35(i32 %36, i32 %37, i32 %38) #7
  br label %if.end.22

if.end.22:                                        ; preds = %if.then.17, %if.end.12
  %39 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %40 = load i32, i32* %w.addr, align 4, !tbaa !5
  %41 = load i32, i32* %h.addr, align 4, !tbaa !5
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %data, i32 0, i32 0
  %call23 = call i32 @opvp_draw_image(%struct.gx_device_opvp_s* %39, i32 1, i32 2, i32 2, i32 %40, i32 %41, i32 4, i32 0, i8* %arraydecay) #7
  store i32 %call23, i32* %code, align 4, !tbaa !5
  %42 = load i32, i32* %code, align 4, !tbaa !5
  %tobool24 = icmp ne i32 %42, 0
  br i1 %tobool24, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %if.end.22
  %43 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %43, i32* %ecode, align 4, !tbaa !5
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.25, %if.end.22
  %44 = load %struct._opvp_brush*, %struct._opvp_brush** @vectorFillColor, align 8, !tbaa !1
  %tobool27 = icmp ne %struct._opvp_brush* %44, null
  br i1 %tobool27, label %if.then.28, label %if.end.35

if.then.28:                                       ; preds = %if.end.26
  %45 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetFillColor29 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %45, i32 0, i32 41
  %46 = load i32 (i32, %struct._opvp_brush*)*, i32 (i32, %struct._opvp_brush*)** %opvpSetFillColor29, align 8, !tbaa !91
  %tobool30 = icmp ne i32 (i32, %struct._opvp_brush*)* %46, null
  br i1 %tobool30, label %if.then.31, label %if.end.34

if.then.31:                                       ; preds = %if.then.28
  %47 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetFillColor32 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %47, i32 0, i32 41
  %48 = load i32 (i32, %struct._opvp_brush*)*, i32 (i32, %struct._opvp_brush*)** %opvpSetFillColor32, align 8, !tbaa !91
  %49 = load i32, i32* @printerContext, align 4, !tbaa !5
  %50 = load %struct._opvp_brush*, %struct._opvp_brush** @vectorFillColor, align 8, !tbaa !1
  %call33 = call i32 %48(i32 %49, %struct._opvp_brush* %50) #7
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.31, %if.then.28
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34, %if.end.26
  %51 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %51, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.35, %if.then.5, %if.then
  %52 = bitcast %struct._opvp_point* %point to i8*
  call void @llvm.lifetime.end(i64 8, i8* %52) #2
  %53 = bitcast %struct._opvp_brush* %brush to i8*
  call void @llvm.lifetime.end(i64 40, i8* %53) #2
  %54 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %54) #2
  %55 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %55) #2
  %56 = bitcast [8 x i8]* %data to i8*
  call void @llvm.lifetime.end(i64 8, i8* %56) #2
  %57 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %57) #2
  %58 = load i32, i32* %retval
  ret i32 %58
}

; Function Attrs: nounwind uwtable
define internal i32 @opvp_copy_mono(%struct.gx_device_s* %dev, i8* %data, i32 %data_x, i32 %raster, i64 %id, i32 %x, i32 %y, i32 %w, i32 %h, i64 %zero, i64 %one) #0 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %data.addr = alloca i8*, align 8
  %data_x.addr = alloca i32, align 4
  %raster.addr = alloca i32, align 4
  %id.addr = alloca i64, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %zero.addr = alloca i64, align 8
  %one.addr = alloca i64, align 8
  %pdev = alloca %struct.gx_device_opvp_s*, align 8
  %code = alloca i32, align 4
  %ecode = alloca i32, align 4
  %brush = alloca %struct._opvp_brush, align 8
  %point = alloca %struct._opvp_point, align 4
  %buff = alloca i8*, align 8
  %mybuf = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %d = alloca i8*, align 8
  %s = alloca i8*, align 8
  %byte_offset = alloca i32, align 4
  %byte_length = alloca i32, align 4
  %bit_shift = alloca i32, align 4
  %adj_raster = alloca i32, align 4
  %bit_mask = alloca i8, align 1
  %reverse = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %tc = alloca i64, align 8
  %n = alloca i32, align 4
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i8* %data, i8** %data.addr, align 8, !tbaa !1
  store i32 %data_x, i32* %data_x.addr, align 4, !tbaa !5
  store i32 %raster, i32* %raster.addr, align 4, !tbaa !5
  store i64 %id, i64* %id.addr, align 8, !tbaa !90
  store i32 %x, i32* %x.addr, align 4, !tbaa !5
  store i32 %y, i32* %y.addr, align 4, !tbaa !5
  store i32 %w, i32* %w.addr, align 4, !tbaa !5
  store i32 %h, i32* %h.addr, align 4, !tbaa !5
  store i64 %zero, i64* %zero.addr, align 8, !tbaa !90
  store i64 %one, i64* %one.addr, align 8, !tbaa !90
  %0 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.gx_device_opvp_s*
  store %struct.gx_device_opvp_s* %2, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  store i32 -1, i32* %code, align 4, !tbaa !5
  %4 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %5 = bitcast %struct._opvp_brush* %brush to i8*
  call void @llvm.lifetime.start(i64 40, i8* %5) #2
  %6 = bitcast %struct._opvp_point* %point to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = bitcast i8** %buff to i8*
  call void @llvm.lifetime.start(i64 8, i8* %7) #2
  %8 = load i8*, i8** %data.addr, align 8, !tbaa !1
  store i8* %8, i8** %buff, align 8, !tbaa !1
  %9 = bitcast i8** %mybuf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %9) #2
  store i8* null, i8** %mybuf, align 8, !tbaa !1
  %10 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #2
  %11 = bitcast i32* %j to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #2
  %12 = bitcast i8** %d to i8*
  call void @llvm.lifetime.start(i64 8, i8* %12) #2
  %13 = bitcast i8** %s to i8*
  call void @llvm.lifetime.start(i64 8, i8* %13) #2
  %14 = bitcast i32* %byte_offset to i8*
  call void @llvm.lifetime.start(i64 4, i8* %14) #2
  store i32 0, i32* %byte_offset, align 4, !tbaa !5
  %15 = bitcast i32* %byte_length to i8*
  call void @llvm.lifetime.start(i64 4, i8* %15) #2
  %16 = load i32, i32* %raster.addr, align 4, !tbaa !5
  store i32 %16, i32* %byte_length, align 4, !tbaa !5
  %17 = bitcast i32* %bit_shift to i8*
  call void @llvm.lifetime.start(i64 4, i8* %17) #2
  store i32 0, i32* %bit_shift, align 4, !tbaa !5
  %18 = bitcast i32* %adj_raster to i8*
  call void @llvm.lifetime.start(i64 4, i8* %18) #2
  %19 = load i32, i32* %raster.addr, align 4, !tbaa !5
  store i32 %19, i32* %adj_raster, align 4, !tbaa !5
  call void @llvm.lifetime.start(i64 1, i8* %bit_mask) #2
  store i8 -1, i8* %bit_mask, align 1, !tbaa !64
  %20 = bitcast i32* %reverse to i8*
  call void @llvm.lifetime.start(i64 4, i8* %20) #2
  store i32 0, i32* %reverse, align 4, !tbaa !5
  %21 = load i32, i32* @beginPage, align 4, !tbaa !5
  %tobool = icmp ne i32 %21, 0
  br i1 %tobool, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %22 = load i32, i32* @inkjet, align 4, !tbaa !5
  %tobool1 = icmp ne i32 %22, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  br i1 false, label %if.then, label %if.end

cond.false:                                       ; preds = %lor.lhs.false
  %23 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %vec_procs = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %23, i32 0, i32 44
  %24 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs, align 8, !tbaa !61
  %beginpage = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %24, i32 0, i32 0
  %25 = load i32 (%struct.gx_device_vector_s*)*, i32 (%struct.gx_device_vector_s*)** %beginpage, align 8, !tbaa !83
  %26 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %27 = bitcast %struct.gx_device_opvp_s* %26 to %struct.gx_device_vector_s*
  %call = call i32 %25(%struct.gx_device_vector_s* %27) #7
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.168

if.end:                                           ; preds = %cond.false, %cond.true
  %28 = load i32, i32* %data_x.addr, align 4, !tbaa !5
  %tobool3 = icmp ne i32 %28, 0
  br i1 %tobool3, label %if.then.4, label %if.end.71

if.then.4:                                        ; preds = %if.end
  %29 = load i32, i32* %data_x.addr, align 4, !tbaa !5
  %shr = ashr i32 %29, 3
  store i32 %shr, i32* %byte_offset, align 4, !tbaa !5
  %30 = load i32, i32* %data_x.addr, align 4, !tbaa !5
  %and = and i32 %30, 7
  store i32 %and, i32* %bit_shift, align 4, !tbaa !5
  %31 = load i32, i32* %bit_shift, align 4, !tbaa !5
  %tobool5 = icmp ne i32 %31, 0
  br i1 %tobool5, label %if.then.6, label %if.end.8

if.then.6:                                        ; preds = %if.then.4
  %32 = load i32, i32* %bit_shift, align 4, !tbaa !5
  %sub = sub nsw i32 8, %32
  %33 = load i8, i8* %bit_mask, align 1, !tbaa !64
  %conv = zext i8 %33 to i32
  %shl = shl i32 %conv, %sub
  %conv7 = trunc i32 %shl to i8
  store i8 %conv7, i8* %bit_mask, align 1, !tbaa !64
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.6, %if.then.4
  %34 = load i32, i32* %w.addr, align 4, !tbaa !5
  %add = add nsw i32 %34, 7
  %shr9 = ashr i32 %add, 3
  store i32 %shr9, i32* %byte_length, align 4, !tbaa !5
  %35 = load i32, i32* %byte_length, align 4, !tbaa !5
  %add10 = add nsw i32 %35, 3
  %shr11 = ashr i32 %add10, 2
  %shl12 = shl i32 %shr11, 2
  store i32 %shl12, i32* %adj_raster, align 4, !tbaa !5
  %36 = load i32, i32* %adj_raster, align 4, !tbaa !5
  %conv13 = sext i32 %36 to i64
  %37 = load i32, i32* %h.addr, align 4, !tbaa !5
  %conv14 = sext i32 %37 to i64
  %call15 = call noalias i8* @calloc(i64 %conv13, i64 %conv14) #8
  store i8* %call15, i8** %mybuf, align 8, !tbaa !1
  store i8* %call15, i8** %buff, align 8, !tbaa !1
  %38 = load i8*, i8** %mybuf, align 8, !tbaa !1
  %tobool16 = icmp ne i8* %38, null
  br i1 %tobool16, label %if.end.18, label %if.then.17

if.then.17:                                       ; preds = %if.end.8
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.168

if.end.18:                                        ; preds = %if.end.8
  %39 = load i32, i32* %byte_offset, align 4, !tbaa !5
  %idxprom = sext i32 %39 to i64
  %40 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds i8, i8* %40, i64 %idxprom
  store i8* %arrayidx, i8** %s, align 8, !tbaa !1
  %41 = load i8*, i8** %mybuf, align 8, !tbaa !1
  store i8* %41, i8** %d, align 8, !tbaa !1
  %42 = load i32, i32* %bit_shift, align 4, !tbaa !5
  %tobool19 = icmp ne i32 %42, 0
  br i1 %tobool19, label %if.then.20, label %if.else

if.then.20:                                       ; preds = %if.end.18
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc.43, %if.then.20
  %43 = load i32, i32* %i, align 4, !tbaa !5
  %44 = load i32, i32* %h.addr, align 4, !tbaa !5
  %cmp = icmp slt i32 %43, %44
  br i1 %cmp, label %for.body, label %for.end.47

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond.22

for.cond.22:                                      ; preds = %for.inc, %for.body
  %45 = load i32, i32* %j, align 4, !tbaa !5
  %46 = load i32, i32* %byte_length, align 4, !tbaa !5
  %cmp23 = icmp slt i32 %45, %46
  br i1 %cmp23, label %for.body.25, label %for.end

for.body.25:                                      ; preds = %for.cond.22
  %47 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom26 = sext i32 %47 to i64
  %48 = load i8*, i8** %s, align 8, !tbaa !1
  %arrayidx27 = getelementptr inbounds i8, i8* %48, i64 %idxprom26
  %49 = load i8, i8* %arrayidx27, align 1, !tbaa !64
  %conv28 = zext i8 %49 to i32
  %50 = load i8, i8* %bit_mask, align 1, !tbaa !64
  %conv29 = zext i8 %50 to i32
  %neg = xor i32 %conv29, -1
  %and30 = and i32 %conv28, %neg
  %51 = load i32, i32* %bit_shift, align 4, !tbaa !5
  %shl31 = shl i32 %and30, %51
  %52 = load i32, i32* %j, align 4, !tbaa !5
  %add32 = add nsw i32 %52, 1
  %idxprom33 = sext i32 %add32 to i64
  %53 = load i8*, i8** %s, align 8, !tbaa !1
  %arrayidx34 = getelementptr inbounds i8, i8* %53, i64 %idxprom33
  %54 = load i8, i8* %arrayidx34, align 1, !tbaa !64
  %conv35 = zext i8 %54 to i32
  %55 = load i8, i8* %bit_mask, align 1, !tbaa !64
  %conv36 = zext i8 %55 to i32
  %and37 = and i32 %conv35, %conv36
  %56 = load i32, i32* %bit_shift, align 4, !tbaa !5
  %sub38 = sub nsw i32 8, %56
  %shr39 = ashr i32 %and37, %sub38
  %or = or i32 %shl31, %shr39
  %conv40 = trunc i32 %or to i8
  %57 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom41 = sext i32 %57 to i64
  %58 = load i8*, i8** %d, align 8, !tbaa !1
  %arrayidx42 = getelementptr inbounds i8, i8* %58, i64 %idxprom41
  store i8 %conv40, i8* %arrayidx42, align 1, !tbaa !64
  br label %for.inc

for.inc:                                          ; preds = %for.body.25
  %59 = load i32, i32* %j, align 4, !tbaa !5
  %inc = add nsw i32 %59, 1
  store i32 %inc, i32* %j, align 4, !tbaa !5
  br label %for.cond.22

for.end:                                          ; preds = %for.cond.22
  br label %for.inc.43

for.inc.43:                                       ; preds = %for.end
  %60 = load i32, i32* %i, align 4, !tbaa !5
  %inc44 = add nsw i32 %60, 1
  store i32 %inc44, i32* %i, align 4, !tbaa !5
  %61 = load i32, i32* %adj_raster, align 4, !tbaa !5
  %62 = load i8*, i8** %d, align 8, !tbaa !1
  %idx.ext = sext i32 %61 to i64
  %add.ptr = getelementptr inbounds i8, i8* %62, i64 %idx.ext
  store i8* %add.ptr, i8** %d, align 8, !tbaa !1
  %63 = load i32, i32* %raster.addr, align 4, !tbaa !5
  %64 = load i8*, i8** %s, align 8, !tbaa !1
  %idx.ext45 = sext i32 %63 to i64
  %add.ptr46 = getelementptr inbounds i8, i8* %64, i64 %idx.ext45
  store i8* %add.ptr46, i8** %s, align 8, !tbaa !1
  br label %for.cond

for.end.47:                                       ; preds = %for.cond
  br label %if.end.70

if.else:                                          ; preds = %if.end.18
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.48

for.cond.48:                                      ; preds = %for.inc.63, %if.else
  %65 = load i32, i32* %i, align 4, !tbaa !5
  %66 = load i32, i32* %h.addr, align 4, !tbaa !5
  %cmp49 = icmp slt i32 %65, %66
  br i1 %cmp49, label %for.body.51, label %for.end.69

for.body.51:                                      ; preds = %for.cond.48
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond.52

for.cond.52:                                      ; preds = %for.inc.60, %for.body.51
  %67 = load i32, i32* %j, align 4, !tbaa !5
  %68 = load i32, i32* %byte_length, align 4, !tbaa !5
  %cmp53 = icmp slt i32 %67, %68
  br i1 %cmp53, label %for.body.55, label %for.end.62

for.body.55:                                      ; preds = %for.cond.52
  %69 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom56 = sext i32 %69 to i64
  %70 = load i8*, i8** %s, align 8, !tbaa !1
  %arrayidx57 = getelementptr inbounds i8, i8* %70, i64 %idxprom56
  %71 = load i8, i8* %arrayidx57, align 1, !tbaa !64
  %72 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom58 = sext i32 %72 to i64
  %73 = load i8*, i8** %d, align 8, !tbaa !1
  %arrayidx59 = getelementptr inbounds i8, i8* %73, i64 %idxprom58
  store i8 %71, i8* %arrayidx59, align 1, !tbaa !64
  br label %for.inc.60

for.inc.60:                                       ; preds = %for.body.55
  %74 = load i32, i32* %j, align 4, !tbaa !5
  %inc61 = add nsw i32 %74, 1
  store i32 %inc61, i32* %j, align 4, !tbaa !5
  br label %for.cond.52

for.end.62:                                       ; preds = %for.cond.52
  br label %for.inc.63

for.inc.63:                                       ; preds = %for.end.62
  %75 = load i32, i32* %i, align 4, !tbaa !5
  %inc64 = add nsw i32 %75, 1
  store i32 %inc64, i32* %i, align 4, !tbaa !5
  %76 = load i32, i32* %adj_raster, align 4, !tbaa !5
  %77 = load i8*, i8** %d, align 8, !tbaa !1
  %idx.ext65 = sext i32 %76 to i64
  %add.ptr66 = getelementptr inbounds i8, i8* %77, i64 %idx.ext65
  store i8* %add.ptr66, i8** %d, align 8, !tbaa !1
  %78 = load i32, i32* %raster.addr, align 4, !tbaa !5
  %79 = load i8*, i8** %s, align 8, !tbaa !1
  %idx.ext67 = sext i32 %78 to i64
  %add.ptr68 = getelementptr inbounds i8, i8* %79, i64 %idx.ext67
  store i8* %add.ptr68, i8** %s, align 8, !tbaa !1
  br label %for.cond.48

for.end.69:                                       ; preds = %for.cond.48
  br label %if.end.70

if.end.70:                                        ; preds = %for.end.69, %for.end.47
  store i32 0, i32* %byte_offset, align 4, !tbaa !5
  br label %if.end.71

if.end.71:                                        ; preds = %if.end.70, %if.end
  %80 = load i64, i64* %one.addr, align 8, !tbaa !90
  %cmp72 = icmp eq i64 %80, -1
  br i1 %cmp72, label %if.then.74, label %if.end.76

if.then.74:                                       ; preds = %if.end.71
  %81 = bitcast i64* %tc to i8*
  call void @llvm.lifetime.start(i64 8, i8* %81) #2
  %82 = load i32, i32* %reverse, align 4, !tbaa !5
  %tobool75 = icmp ne i32 %82, 0
  %lnot = xor i1 %tobool75, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %reverse, align 4, !tbaa !5
  %83 = load i64, i64* %zero.addr, align 8, !tbaa !90
  store i64 %83, i64* %tc, align 8, !tbaa !90
  %84 = load i64, i64* %one.addr, align 8, !tbaa !90
  store i64 %84, i64* %zero.addr, align 8, !tbaa !90
  %85 = load i64, i64* %tc, align 8, !tbaa !90
  store i64 %85, i64* %one.addr, align 8, !tbaa !90
  %86 = bitcast i64* %tc to i8*
  call void @llvm.lifetime.end(i64 8, i8* %86) #2
  br label %if.end.76

if.end.76:                                        ; preds = %if.then.74, %if.end.71
  %87 = load i64, i64* %zero.addr, align 8, !tbaa !90
  %cmp77 = icmp ne i64 %87, -1
  br i1 %cmp77, label %if.then.79, label %if.end.91

if.then.79:                                       ; preds = %if.end.76
  %88 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetPaintMode = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %88, i32 0, i32 38
  %89 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetPaintMode, align 8, !tbaa !96
  %tobool80 = icmp ne i32 (i32, i32)* %89, null
  br i1 %tobool80, label %if.then.81, label %if.end.84

if.then.81:                                       ; preds = %if.then.79
  %90 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetPaintMode82 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %90, i32 0, i32 38
  %91 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetPaintMode82, align 8, !tbaa !96
  %92 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call83 = call i32 %91(i32 %92, i32 0) #7
  br label %if.end.84

if.end.84:                                        ; preds = %if.then.81, %if.then.79
  %93 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %94 = load i64, i64* %zero.addr, align 8, !tbaa !90
  %call85 = call i32 @opvp_set_brush_color(%struct.gx_device_opvp_s* %93, i64 %94, %struct._opvp_brush* %brush) #7
  %95 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetBgColor = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %95, i32 0, i32 42
  %96 = load i32 (i32, %struct._opvp_brush*)*, i32 (i32, %struct._opvp_brush*)** %opvpSetBgColor, align 8, !tbaa !97
  %tobool86 = icmp ne i32 (i32, %struct._opvp_brush*)* %96, null
  br i1 %tobool86, label %if.then.87, label %if.end.90

if.then.87:                                       ; preds = %if.end.84
  %97 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetBgColor88 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %97, i32 0, i32 42
  %98 = load i32 (i32, %struct._opvp_brush*)*, i32 (i32, %struct._opvp_brush*)** %opvpSetBgColor88, align 8, !tbaa !97
  %99 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call89 = call i32 %98(i32 %99, %struct._opvp_brush* %brush) #7
  br label %if.end.90

if.end.90:                                        ; preds = %if.then.87, %if.end.84
  br label %if.end.91

if.end.91:                                        ; preds = %if.end.90, %if.end.76
  %100 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %101 = load i64, i64* %one.addr, align 8, !tbaa !90
  %call92 = call i32 @opvp_set_brush_color(%struct.gx_device_opvp_s* %100, i64 %101, %struct._opvp_brush* %brush) #7
  %102 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetFillColor = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %102, i32 0, i32 41
  %103 = load i32 (i32, %struct._opvp_brush*)*, i32 (i32, %struct._opvp_brush*)** %opvpSetFillColor, align 8, !tbaa !91
  %tobool93 = icmp ne i32 (i32, %struct._opvp_brush*)* %103, null
  br i1 %tobool93, label %if.then.94, label %if.end.97

if.then.94:                                       ; preds = %if.end.91
  %104 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetFillColor95 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %104, i32 0, i32 41
  %105 = load i32 (i32, %struct._opvp_brush*)*, i32 (i32, %struct._opvp_brush*)** %opvpSetFillColor95, align 8, !tbaa !91
  %106 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call96 = call i32 %105(i32 %106, %struct._opvp_brush* %brush) #7
  br label %if.end.97

if.end.97:                                        ; preds = %if.then.94, %if.end.91
  %107 = load i32, i32* %reverse, align 4, !tbaa !5
  %tobool98 = icmp ne i32 %107, 0
  br i1 %tobool98, label %if.then.99, label %if.end.124

if.then.99:                                       ; preds = %if.end.97
  %108 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start(i64 4, i8* %108) #2
  %109 = load i32, i32* %adj_raster, align 4, !tbaa !5
  %110 = load i32, i32* %h.addr, align 4, !tbaa !5
  %mul = mul nsw i32 %109, %110
  store i32 %mul, i32* %n, align 4, !tbaa !5
  %111 = load i8*, i8** %buff, align 8, !tbaa !1
  %112 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %cmp100 = icmp eq i8* %111, %112
  br i1 %cmp100, label %if.then.102, label %if.end.109

if.then.102:                                      ; preds = %if.then.99
  %113 = load i32, i32* %n, align 4, !tbaa !5
  %conv103 = sext i32 %113 to i64
  %call104 = call noalias i8* @malloc(i64 %conv103) #8
  store i8* %call104, i8** %mybuf, align 8, !tbaa !1
  %cmp105 = icmp eq i8* %call104, null
  br i1 %cmp105, label %if.then.107, label %if.end.108

if.then.107:                                      ; preds = %if.then.102
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.108:                                       ; preds = %if.then.102
  br label %if.end.109

if.end.109:                                       ; preds = %if.end.108, %if.then.99
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.110

for.cond.110:                                     ; preds = %for.inc.121, %if.end.109
  %114 = load i32, i32* %i, align 4, !tbaa !5
  %115 = load i32, i32* %n, align 4, !tbaa !5
  %cmp111 = icmp slt i32 %114, %115
  br i1 %cmp111, label %for.body.113, label %for.end.123

for.body.113:                                     ; preds = %for.cond.110
  %116 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom114 = sext i32 %116 to i64
  %117 = load i8*, i8** %buff, align 8, !tbaa !1
  %arrayidx115 = getelementptr inbounds i8, i8* %117, i64 %idxprom114
  %118 = load i8, i8* %arrayidx115, align 1, !tbaa !64
  %conv116 = zext i8 %118 to i32
  %neg117 = xor i32 %conv116, -1
  %conv118 = trunc i32 %neg117 to i8
  %119 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom119 = sext i32 %119 to i64
  %120 = load i8*, i8** %mybuf, align 8, !tbaa !1
  %arrayidx120 = getelementptr inbounds i8, i8* %120, i64 %idxprom119
  store i8 %conv118, i8* %arrayidx120, align 1, !tbaa !64
  br label %for.inc.121

for.inc.121:                                      ; preds = %for.body.113
  %121 = load i32, i32* %i, align 4, !tbaa !5
  %inc122 = add nsw i32 %121, 1
  store i32 %inc122, i32* %i, align 4, !tbaa !5
  br label %for.cond.110

for.end.123:                                      ; preds = %for.cond.110
  %122 = load i8*, i8** %mybuf, align 8, !tbaa !1
  store i8* %122, i8** %buff, align 8, !tbaa !1
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %for.end.123, %if.then.107
  %123 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end(i64 4, i8* %123) #2
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.168 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.124

if.end.124:                                       ; preds = %cleanup.cont, %if.end.97
  %124 = load i32, i32* %x.addr, align 4, !tbaa !5
  %shl125 = shl i32 %124, 8
  %x126 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %point, i32 0, i32 0
  store i32 %shl125, i32* %x126, align 4, !tbaa !92
  %125 = load i32, i32* %y.addr, align 4, !tbaa !5
  %shl127 = shl i32 %125, 8
  %y128 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %point, i32 0, i32 1
  store i32 %shl127, i32* %y128, align 4, !tbaa !94
  %126 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetCurrentPoint = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %126, i32 0, i32 50
  %127 = load i32 (i32, i32, i32)*, i32 (i32, i32, i32)** %opvpSetCurrentPoint, align 8, !tbaa !95
  %tobool129 = icmp ne i32 (i32, i32, i32)* %127, null
  br i1 %tobool129, label %if.then.130, label %if.end.135

if.then.130:                                      ; preds = %if.end.124
  %128 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetCurrentPoint131 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %128, i32 0, i32 50
  %129 = load i32 (i32, i32, i32)*, i32 (i32, i32, i32)** %opvpSetCurrentPoint131, align 8, !tbaa !95
  %130 = load i32, i32* @printerContext, align 4, !tbaa !5
  %x132 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %point, i32 0, i32 0
  %131 = load i32, i32* %x132, align 4, !tbaa !92
  %y133 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %point, i32 0, i32 1
  %132 = load i32, i32* %y133, align 4, !tbaa !94
  %call134 = call i32 %129(i32 %130, i32 %131, i32 %132) #7
  br label %if.end.135

if.end.135:                                       ; preds = %if.then.130, %if.end.124
  %133 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %134 = load i32, i32* %w.addr, align 4, !tbaa !5
  %135 = load i32, i32* %h.addr, align 4, !tbaa !5
  %136 = load i32, i32* %w.addr, align 4, !tbaa !5
  %137 = load i32, i32* %h.addr, align 4, !tbaa !5
  %138 = load i32, i32* %adj_raster, align 4, !tbaa !5
  %139 = load i32, i32* %byte_offset, align 4, !tbaa !5
  %idxprom136 = sext i32 %139 to i64
  %140 = load i8*, i8** %buff, align 8, !tbaa !1
  %arrayidx137 = getelementptr inbounds i8, i8* %140, i64 %idxprom136
  %call138 = call i32 @opvp_draw_image(%struct.gx_device_opvp_s* %133, i32 1, i32 %134, i32 %135, i32 %136, i32 %137, i32 %138, i32 1, i8* %arrayidx137) #7
  store i32 %call138, i32* %code, align 4, !tbaa !5
  %141 = load i32, i32* %code, align 4, !tbaa !5
  %tobool139 = icmp ne i32 %141, 0
  br i1 %tobool139, label %if.then.140, label %if.end.141

if.then.140:                                      ; preds = %if.end.135
  %142 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %142, i32* %ecode, align 4, !tbaa !5
  br label %if.end.141

if.end.141:                                       ; preds = %if.then.140, %if.end.135
  %143 = load i64, i64* %zero.addr, align 8, !tbaa !90
  %cmp142 = icmp ne i64 %143, -1
  br i1 %cmp142, label %if.then.144, label %if.end.151

if.then.144:                                      ; preds = %if.end.141
  %144 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetPaintMode145 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %144, i32 0, i32 38
  %145 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetPaintMode145, align 8, !tbaa !96
  %tobool146 = icmp ne i32 (i32, i32)* %145, null
  br i1 %tobool146, label %if.then.147, label %if.end.150

if.then.147:                                      ; preds = %if.then.144
  %146 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetPaintMode148 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %146, i32 0, i32 38
  %147 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetPaintMode148, align 8, !tbaa !96
  %148 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call149 = call i32 %147(i32 %148, i32 1) #7
  br label %if.end.150

if.end.150:                                       ; preds = %if.then.147, %if.then.144
  br label %if.end.151

if.end.151:                                       ; preds = %if.end.150, %if.end.141
  %149 = load %struct._opvp_brush*, %struct._opvp_brush** @vectorFillColor, align 8, !tbaa !1
  %tobool152 = icmp ne %struct._opvp_brush* %149, null
  br i1 %tobool152, label %if.then.153, label %if.end.160

if.then.153:                                      ; preds = %if.end.151
  %150 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetFillColor154 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %150, i32 0, i32 41
  %151 = load i32 (i32, %struct._opvp_brush*)*, i32 (i32, %struct._opvp_brush*)** %opvpSetFillColor154, align 8, !tbaa !91
  %tobool155 = icmp ne i32 (i32, %struct._opvp_brush*)* %151, null
  br i1 %tobool155, label %if.then.156, label %if.end.159

if.then.156:                                      ; preds = %if.then.153
  %152 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetFillColor157 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %152, i32 0, i32 41
  %153 = load i32 (i32, %struct._opvp_brush*)*, i32 (i32, %struct._opvp_brush*)** %opvpSetFillColor157, align 8, !tbaa !91
  %154 = load i32, i32* @printerContext, align 4, !tbaa !5
  %155 = load %struct._opvp_brush*, %struct._opvp_brush** @vectorFillColor, align 8, !tbaa !1
  %call158 = call i32 %153(i32 %154, %struct._opvp_brush* %155) #7
  br label %if.end.159

if.end.159:                                       ; preds = %if.then.156, %if.then.153
  br label %if.end.160

if.end.160:                                       ; preds = %if.end.159, %if.end.151
  %156 = load i8*, i8** %buff, align 8, !tbaa !1
  %157 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %cmp161 = icmp ne i8* %156, %157
  br i1 %cmp161, label %if.then.163, label %if.end.167

if.then.163:                                      ; preds = %if.end.160
  %158 = load i8*, i8** %mybuf, align 8, !tbaa !1
  %tobool164 = icmp ne i8* %158, null
  br i1 %tobool164, label %if.then.165, label %if.end.166

if.then.165:                                      ; preds = %if.then.163
  %159 = load i8*, i8** %mybuf, align 8, !tbaa !1
  call void @free(i8* %159) #8
  br label %if.end.166

if.end.166:                                       ; preds = %if.then.165, %if.then.163
  br label %if.end.167

if.end.167:                                       ; preds = %if.end.166, %if.end.160
  %160 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %160, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.168

cleanup.168:                                      ; preds = %if.end.167, %cleanup, %if.then.17, %if.then
  %161 = bitcast i32* %reverse to i8*
  call void @llvm.lifetime.end(i64 4, i8* %161) #2
  call void @llvm.lifetime.end(i64 1, i8* %bit_mask) #2
  %162 = bitcast i32* %adj_raster to i8*
  call void @llvm.lifetime.end(i64 4, i8* %162) #2
  %163 = bitcast i32* %bit_shift to i8*
  call void @llvm.lifetime.end(i64 4, i8* %163) #2
  %164 = bitcast i32* %byte_length to i8*
  call void @llvm.lifetime.end(i64 4, i8* %164) #2
  %165 = bitcast i32* %byte_offset to i8*
  call void @llvm.lifetime.end(i64 4, i8* %165) #2
  %166 = bitcast i8** %s to i8*
  call void @llvm.lifetime.end(i64 8, i8* %166) #2
  %167 = bitcast i8** %d to i8*
  call void @llvm.lifetime.end(i64 8, i8* %167) #2
  %168 = bitcast i32* %j to i8*
  call void @llvm.lifetime.end(i64 4, i8* %168) #2
  %169 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %169) #2
  %170 = bitcast i8** %mybuf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %170) #2
  %171 = bitcast i8** %buff to i8*
  call void @llvm.lifetime.end(i64 8, i8* %171) #2
  %172 = bitcast %struct._opvp_point* %point to i8*
  call void @llvm.lifetime.end(i64 8, i8* %172) #2
  %173 = bitcast %struct._opvp_brush* %brush to i8*
  call void @llvm.lifetime.end(i64 40, i8* %173) #2
  %174 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %174) #2
  %175 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %175) #2
  %176 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %176) #2
  %177 = load i32, i32* %retval
  ret i32 %177
}

; Function Attrs: nounwind uwtable
define internal i32 @opvp_copy_color(%struct.gx_device_s* %dev, i8* %data, i32 %data_x, i32 %raster, i64 %id, i32 %x, i32 %y, i32 %w, i32 %h) #0 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %data.addr = alloca i8*, align 8
  %data_x.addr = alloca i32, align 4
  %raster.addr = alloca i32, align 4
  %id.addr = alloca i64, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %pdev = alloca %struct.gx_device_opvp_s*, align 8
  %code = alloca i32, align 4
  %ecode = alloca i32, align 4
  %point = alloca %struct._opvp_point, align 4
  %buff = alloca i8*, align 8
  %mybuf = alloca i8*, align 8
  %i = alloca i32, align 4
  %d = alloca i8*, align 8
  %s = alloca i8*, align 8
  %byte_length = alloca i32, align 4
  %depth = alloca i32, align 4
  %pixel = alloca i32, align 4
  %adj_raster = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i8* %data, i8** %data.addr, align 8, !tbaa !1
  store i32 %data_x, i32* %data_x.addr, align 4, !tbaa !5
  store i32 %raster, i32* %raster.addr, align 4, !tbaa !5
  store i64 %id, i64* %id.addr, align 8, !tbaa !90
  store i32 %x, i32* %x.addr, align 4, !tbaa !5
  store i32 %y, i32* %y.addr, align 4, !tbaa !5
  store i32 %w, i32* %w.addr, align 4, !tbaa !5
  store i32 %h, i32* %h.addr, align 4, !tbaa !5
  %0 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.gx_device_opvp_s*
  store %struct.gx_device_opvp_s* %2, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  store i32 -1, i32* %code, align 4, !tbaa !5
  %4 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %5 = bitcast %struct._opvp_point* %point to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #2
  %6 = bitcast i8** %buff to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = load i8*, i8** %data.addr, align 8, !tbaa !1
  store i8* %7, i8** %buff, align 8, !tbaa !1
  %8 = bitcast i8** %mybuf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #2
  store i8* null, i8** %mybuf, align 8, !tbaa !1
  %9 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #2
  %10 = bitcast i8** %d to i8*
  call void @llvm.lifetime.start(i64 8, i8* %10) #2
  %11 = bitcast i8** %s to i8*
  call void @llvm.lifetime.start(i64 8, i8* %11) #2
  %12 = bitcast i32* %byte_length to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #2
  %13 = load i32, i32* %raster.addr, align 4, !tbaa !5
  store i32 %13, i32* %byte_length, align 4, !tbaa !5
  %14 = bitcast i32* %depth to i8*
  call void @llvm.lifetime.start(i64 4, i8* %14) #2
  %15 = bitcast i32* %pixel to i8*
  call void @llvm.lifetime.start(i64 4, i8* %15) #2
  %16 = bitcast i32* %adj_raster to i8*
  call void @llvm.lifetime.start(i64 4, i8* %16) #2
  %17 = load i32, i32* %raster.addr, align 4, !tbaa !5
  store i32 %17, i32* %adj_raster, align 4, !tbaa !5
  %18 = load i32, i32* @beginPage, align 4, !tbaa !5
  %tobool = icmp ne i32 %18, 0
  br i1 %tobool, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %19 = load i32, i32* @inkjet, align 4, !tbaa !5
  %tobool1 = icmp ne i32 %19, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  br i1 false, label %if.then, label %if.end

cond.false:                                       ; preds = %lor.lhs.false
  %20 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %vec_procs = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %20, i32 0, i32 44
  %21 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs, align 8, !tbaa !61
  %beginpage = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %21, i32 0, i32 0
  %22 = load i32 (%struct.gx_device_vector_s*)*, i32 (%struct.gx_device_vector_s*)** %beginpage, align 8, !tbaa !83
  %23 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %24 = bitcast %struct.gx_device_opvp_s* %23 to %struct.gx_device_vector_s*
  %call = call i32 %22(%struct.gx_device_vector_s* %24) #7
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %cond.false, %cond.true
  %25 = load i32, i32* %data_x.addr, align 4, !tbaa !5
  %tobool3 = icmp ne i32 %25, 0
  br i1 %tobool3, label %if.then.4, label %if.end.20

if.then.4:                                        ; preds = %if.end
  %26 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %26, i32 0, i32 11
  %depth5 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 3
  %27 = load i16, i16* %depth5, align 2, !tbaa !98
  %conv = zext i16 %27 to i32
  store i32 %conv, i32* %depth, align 4, !tbaa !5
  %28 = load i32, i32* %depth, align 4, !tbaa !5
  %add = add nsw i32 %28, 7
  %shr = ashr i32 %add, 3
  store i32 %shr, i32* %pixel, align 4, !tbaa !5
  %29 = load i32, i32* %pixel, align 4, !tbaa !5
  %30 = load i32, i32* %w.addr, align 4, !tbaa !5
  %mul = mul nsw i32 %29, %30
  store i32 %mul, i32* %byte_length, align 4, !tbaa !5
  %31 = load i32, i32* %byte_length, align 4, !tbaa !5
  %add6 = add nsw i32 %31, 3
  %shr7 = ashr i32 %add6, 2
  %shl = shl i32 %shr7, 2
  store i32 %shl, i32* %adj_raster, align 4, !tbaa !5
  %32 = load i32, i32* %adj_raster, align 4, !tbaa !5
  %33 = load i32, i32* %h.addr, align 4, !tbaa !5
  %mul8 = mul nsw i32 %32, %33
  %conv9 = sext i32 %mul8 to i64
  %call10 = call noalias i8* @malloc(i64 %conv9) #8
  store i8* %call10, i8** %mybuf, align 8, !tbaa !1
  store i8* %call10, i8** %buff, align 8, !tbaa !1
  %34 = load i8*, i8** %mybuf, align 8, !tbaa !1
  %tobool11 = icmp ne i8* %34, null
  br i1 %tobool11, label %if.end.13, label %if.then.12

if.then.12:                                       ; preds = %if.then.4
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.13:                                        ; preds = %if.then.4
  %35 = load i32, i32* %data_x.addr, align 4, !tbaa !5
  %36 = load i32, i32* %pixel, align 4, !tbaa !5
  %mul14 = mul nsw i32 %35, %36
  %idxprom = sext i32 %mul14 to i64
  %37 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds i8, i8* %37, i64 %idxprom
  store i8* %arrayidx, i8** %s, align 8, !tbaa !1
  %38 = load i8*, i8** %mybuf, align 8, !tbaa !1
  store i8* %38, i8** %d, align 8, !tbaa !1
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.13
  %39 = load i32, i32* %i, align 4, !tbaa !5
  %40 = load i32, i32* %h.addr, align 4, !tbaa !5
  %cmp = icmp slt i32 %39, %40
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %41 = load i8*, i8** %d, align 8, !tbaa !1
  %42 = load i8*, i8** %s, align 8, !tbaa !1
  %43 = load i32, i32* %byte_length, align 4, !tbaa !5
  %conv16 = sext i32 %43 to i64
  %call17 = call i8* @memcpy(i8* %41, i8* %42, i64 %conv16) #8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %44 = load i32, i32* %i, align 4, !tbaa !5
  %inc = add nsw i32 %44, 1
  store i32 %inc, i32* %i, align 4, !tbaa !5
  %45 = load i32, i32* %adj_raster, align 4, !tbaa !5
  %46 = load i8*, i8** %d, align 8, !tbaa !1
  %idx.ext = sext i32 %45 to i64
  %add.ptr = getelementptr inbounds i8, i8* %46, i64 %idx.ext
  store i8* %add.ptr, i8** %d, align 8, !tbaa !1
  %47 = load i32, i32* %raster.addr, align 4, !tbaa !5
  %48 = load i8*, i8** %s, align 8, !tbaa !1
  %idx.ext18 = sext i32 %47 to i64
  %add.ptr19 = getelementptr inbounds i8, i8* %48, i64 %idx.ext18
  store i8* %add.ptr19, i8** %s, align 8, !tbaa !1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %data_x.addr, align 4, !tbaa !5
  br label %if.end.20

if.end.20:                                        ; preds = %for.end, %if.end
  %49 = load i32, i32* %x.addr, align 4, !tbaa !5
  %shl21 = shl i32 %49, 8
  %x22 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %point, i32 0, i32 0
  store i32 %shl21, i32* %x22, align 4, !tbaa !92
  %50 = load i32, i32* %y.addr, align 4, !tbaa !5
  %shl23 = shl i32 %50, 8
  %y24 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %point, i32 0, i32 1
  store i32 %shl23, i32* %y24, align 4, !tbaa !94
  %51 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetCurrentPoint = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %51, i32 0, i32 50
  %52 = load i32 (i32, i32, i32)*, i32 (i32, i32, i32)** %opvpSetCurrentPoint, align 8, !tbaa !95
  %tobool25 = icmp ne i32 (i32, i32, i32)* %52, null
  br i1 %tobool25, label %if.then.26, label %if.end.31

if.then.26:                                       ; preds = %if.end.20
  %53 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetCurrentPoint27 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %53, i32 0, i32 50
  %54 = load i32 (i32, i32, i32)*, i32 (i32, i32, i32)** %opvpSetCurrentPoint27, align 8, !tbaa !95
  %55 = load i32, i32* @printerContext, align 4, !tbaa !5
  %x28 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %point, i32 0, i32 0
  %56 = load i32, i32* %x28, align 4, !tbaa !92
  %y29 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %point, i32 0, i32 1
  %57 = load i32, i32* %y29, align 4, !tbaa !94
  %call30 = call i32 %54(i32 %55, i32 %56, i32 %57) #7
  br label %if.end.31

if.end.31:                                        ; preds = %if.then.26, %if.end.20
  %58 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %59 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %color_info32 = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %59, i32 0, i32 11
  %depth33 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info32, i32 0, i32 3
  %60 = load i16, i16* %depth33, align 2, !tbaa !98
  %conv34 = zext i16 %60 to i32
  %61 = load i32, i32* %w.addr, align 4, !tbaa !5
  %62 = load i32, i32* %h.addr, align 4, !tbaa !5
  %63 = load i32, i32* %w.addr, align 4, !tbaa !5
  %64 = load i32, i32* %h.addr, align 4, !tbaa !5
  %65 = load i32, i32* %adj_raster, align 4, !tbaa !5
  %66 = load i32, i32* %data_x.addr, align 4, !tbaa !5
  %idxprom35 = sext i32 %66 to i64
  %67 = load i8*, i8** %buff, align 8, !tbaa !1
  %arrayidx36 = getelementptr inbounds i8, i8* %67, i64 %idxprom35
  %call37 = call i32 @opvp_draw_image(%struct.gx_device_opvp_s* %58, i32 %conv34, i32 %61, i32 %62, i32 %63, i32 %64, i32 %65, i32 0, i8* %arrayidx36) #7
  store i32 %call37, i32* %code, align 4, !tbaa !5
  %68 = load i32, i32* %code, align 4, !tbaa !5
  %tobool38 = icmp ne i32 %68, 0
  br i1 %tobool38, label %if.then.39, label %if.end.40

if.then.39:                                       ; preds = %if.end.31
  %69 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %69, i32* %ecode, align 4, !tbaa !5
  br label %if.end.40

if.end.40:                                        ; preds = %if.then.39, %if.end.31
  %70 = load i8*, i8** %buff, align 8, !tbaa !1
  %71 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %cmp41 = icmp ne i8* %70, %71
  br i1 %cmp41, label %if.then.43, label %if.end.47

if.then.43:                                       ; preds = %if.end.40
  %72 = load i8*, i8** %mybuf, align 8, !tbaa !1
  %tobool44 = icmp ne i8* %72, null
  br i1 %tobool44, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %if.then.43
  %73 = load i8*, i8** %mybuf, align 8, !tbaa !1
  call void @free(i8* %73) #8
  br label %if.end.46

if.end.46:                                        ; preds = %if.then.45, %if.then.43
  br label %if.end.47

if.end.47:                                        ; preds = %if.end.46, %if.end.40
  %74 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %74, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.47, %if.then.12, %if.then
  %75 = bitcast i32* %adj_raster to i8*
  call void @llvm.lifetime.end(i64 4, i8* %75) #2
  %76 = bitcast i32* %pixel to i8*
  call void @llvm.lifetime.end(i64 4, i8* %76) #2
  %77 = bitcast i32* %depth to i8*
  call void @llvm.lifetime.end(i64 4, i8* %77) #2
  %78 = bitcast i32* %byte_length to i8*
  call void @llvm.lifetime.end(i64 4, i8* %78) #2
  %79 = bitcast i8** %s to i8*
  call void @llvm.lifetime.end(i64 8, i8* %79) #2
  %80 = bitcast i8** %d to i8*
  call void @llvm.lifetime.end(i64 8, i8* %80) #2
  %81 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %81) #2
  %82 = bitcast i8** %mybuf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %82) #2
  %83 = bitcast i8** %buff to i8*
  call void @llvm.lifetime.end(i64 8, i8* %83) #2
  %84 = bitcast %struct._opvp_point* %point to i8*
  call void @llvm.lifetime.end(i64 8, i8* %84) #2
  %85 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %85) #2
  %86 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %86) #2
  %87 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %87) #2
  %88 = load i32, i32* %retval
  ret i32 %88
}

; Function Attrs: nounwind uwtable
define internal i32 @opvp_get_params(%struct.gx_device_s* %dev, %struct.gs_param_list_s* %plist) #0 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %plist.addr = alloca %struct.gs_param_list_s*, align 8
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_param_list_s* %plist, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %0 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %call = call i32 @gdev_vector_get_params(%struct.gx_device_s* %1, %struct.gs_param_list_s* %2) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %3 = load i32, i32* %code, align 4, !tbaa !5
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %4, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %5 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %call1 = call i32 @_get_params(%struct.gs_param_list_s* %5) #7
  store i32 %call1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %6 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %6) #2
  %7 = load i32, i32* %retval
  ret i32 %7
}

; Function Attrs: nounwind uwtable
define internal i32 @opvp_put_params(%struct.gx_device_s* %dev, %struct.gs_param_list_s* %plist) #0 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %plist.addr = alloca %struct.gs_param_list_s*, align 8
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_param_list_s* %plist, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %0 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %call = call i32 @_put_params(%struct.gs_param_list_s* %1) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %2 = load i32, i32* %code, align 4, !tbaa !5
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %3, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %4 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %5 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %call1 = call i32 @gdev_vector_put_params(%struct.gx_device_s* %4, %struct.gs_param_list_s* %5) #7
  store i32 %call1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %6 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %6) #2
  %7 = load i32, i32* %retval
  ret i32 %7
}

declare %struct.gx_device_s* @gx_page_device_get_page_device(%struct.gx_device_s*) #1

; Function Attrs: nounwind uwtable
define internal i32 @opvp_fill_path(%struct.gx_device_s* %dev, %struct.gs_imager_state_s* %pis, %struct.gx_path_s* %ppath, %struct.gx_fill_params_s* %params, %struct.gx_device_color_s* %pdevc, %struct.gx_clip_path_s* %pxpath) #0 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %ppath.addr = alloca %struct.gx_path_s*, align 8
  %params.addr = alloca %struct.gx_fill_params_s*, align 8
  %pdevc.addr = alloca %struct.gx_device_color_s*, align 8
  %pxpath.addr = alloca %struct.gx_clip_path_s*, align 8
  %draw_image = alloca i32, align 4
  %inner = alloca %struct.gs_fixed_rect_s, align 4
  %outer = alloca %struct.gs_fixed_rect_s, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_path_s* %ppath, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  store %struct.gx_fill_params_s* %params, %struct.gx_fill_params_s** %params.addr, align 8, !tbaa !1
  store %struct.gx_device_color_s* %pdevc, %struct.gx_device_color_s** %pdevc.addr, align 8, !tbaa !1
  store %struct.gx_clip_path_s* %pxpath, %struct.gx_clip_path_s** %pxpath.addr, align 8, !tbaa !1
  %0 = bitcast i32* %draw_image to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  store i32 0, i32* %draw_image, align 4, !tbaa !5
  %1 = bitcast %struct.gs_fixed_rect_s* %inner to i8*
  call void @llvm.lifetime.start(i64 16, i8* %1) #2
  %2 = bitcast %struct.gs_fixed_rect_s* %outer to i8*
  call void @llvm.lifetime.start(i64 16, i8* %2) #2
  %3 = load %struct.gx_path_s*, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  %call = call i32 @checkPath(%struct.gx_path_s* %3) #7
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pxpath.addr, align 8, !tbaa !1
  %call1 = call i32 @checkCPath(%struct.gx_clip_path_s* %4) #7
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %5 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %6 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %7 = load %struct.gx_path_s*, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  %8 = load %struct.gx_fill_params_s*, %struct.gx_fill_params_s** %params.addr, align 8, !tbaa !1
  %9 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdevc.addr, align 8, !tbaa !1
  %10 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pxpath.addr, align 8, !tbaa !1
  %call3 = call i32 @gx_default_fill_path(%struct.gx_device_s* %5, %struct.gs_imager_state_s* %6, %struct.gx_path_s* %7, %struct.gx_fill_params_s* %8, %struct.gx_device_color_s* %9, %struct.gx_clip_path_s* %10) #7
  store i32 %call3, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %11 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetClipPath = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %11, i32 0, i32 48
  %12 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetClipPath, align 8, !tbaa !99
  %tobool4 = icmp ne i32 (i32, i32)* %12, null
  br i1 %tobool4, label %if.end.28, label %if.then.5

if.then.5:                                        ; preds = %if.end
  %13 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pxpath.addr, align 8, !tbaa !1
  %call6 = call i32 @gx_cpath_inner_box(%struct.gx_clip_path_s* %13, %struct.gs_fixed_rect_s* %inner) #7
  %14 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pxpath.addr, align 8, !tbaa !1
  %call7 = call i32 @gx_cpath_outer_box(%struct.gx_clip_path_s* %14, %struct.gs_fixed_rect_s* %outer) #7
  %p = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %inner, i32 0, i32 0
  %x = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %p, i32 0, i32 0
  %15 = load i32, i32* %x, align 4, !tbaa !100
  %p8 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %outer, i32 0, i32 0
  %x9 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %p8, i32 0, i32 0
  %16 = load i32, i32* %x9, align 4, !tbaa !100
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %if.then.26, label %lor.lhs.false.10

lor.lhs.false.10:                                 ; preds = %if.then.5
  %p11 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %inner, i32 0, i32 0
  %y = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %p11, i32 0, i32 1
  %17 = load i32, i32* %y, align 4, !tbaa !101
  %p12 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %outer, i32 0, i32 0
  %y13 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %p12, i32 0, i32 1
  %18 = load i32, i32* %y13, align 4, !tbaa !101
  %cmp14 = icmp ne i32 %17, %18
  br i1 %cmp14, label %if.then.26, label %lor.lhs.false.15

lor.lhs.false.15:                                 ; preds = %lor.lhs.false.10
  %q = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %inner, i32 0, i32 1
  %x16 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %q, i32 0, i32 0
  %19 = load i32, i32* %x16, align 4, !tbaa !102
  %q17 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %outer, i32 0, i32 1
  %x18 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %q17, i32 0, i32 0
  %20 = load i32, i32* %x18, align 4, !tbaa !102
  %cmp19 = icmp ne i32 %19, %20
  br i1 %cmp19, label %if.then.26, label %lor.lhs.false.20

lor.lhs.false.20:                                 ; preds = %lor.lhs.false.15
  %q21 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %inner, i32 0, i32 1
  %y22 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %q21, i32 0, i32 1
  %21 = load i32, i32* %y22, align 4, !tbaa !103
  %q23 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %outer, i32 0, i32 1
  %y24 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %q23, i32 0, i32 1
  %22 = load i32, i32* %y24, align 4, !tbaa !103
  %cmp25 = icmp ne i32 %21, %22
  br i1 %cmp25, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %lor.lhs.false.20, %lor.lhs.false.15, %lor.lhs.false.10, %if.then.5
  store i32 1, i32* %draw_image, align 4, !tbaa !5
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.26, %lor.lhs.false.20
  br label %if.end.28

if.end.28:                                        ; preds = %if.end.27, %if.end
  %23 = load i32, i32* @vector, align 4, !tbaa !5
  %tobool29 = icmp ne i32 %23, 0
  br i1 %tobool29, label %lor.lhs.false.30, label %if.then.32

lor.lhs.false.30:                                 ; preds = %if.end.28
  %24 = load i32, i32* %draw_image, align 4, !tbaa !5
  %tobool31 = icmp ne i32 %24, 0
  br i1 %tobool31, label %if.then.32, label %if.end.34

if.then.32:                                       ; preds = %lor.lhs.false.30, %if.end.28
  %25 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %26 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %27 = load %struct.gx_path_s*, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  %28 = load %struct.gx_fill_params_s*, %struct.gx_fill_params_s** %params.addr, align 8, !tbaa !1
  %29 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdevc.addr, align 8, !tbaa !1
  %30 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pxpath.addr, align 8, !tbaa !1
  %call33 = call i32 @gx_default_fill_path(%struct.gx_device_s* %25, %struct.gs_imager_state_s* %26, %struct.gx_path_s* %27, %struct.gx_fill_params_s* %28, %struct.gx_device_color_s* %29, %struct.gx_clip_path_s* %30) #7
  store i32 %call33, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.34:                                        ; preds = %lor.lhs.false.30
  %31 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %32 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %33 = load %struct.gx_path_s*, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  %34 = load %struct.gx_fill_params_s*, %struct.gx_fill_params_s** %params.addr, align 8, !tbaa !1
  %35 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdevc.addr, align 8, !tbaa !1
  %36 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pxpath.addr, align 8, !tbaa !1
  %call35 = call i32 @gdev_vector_fill_path(%struct.gx_device_s* %31, %struct.gs_imager_state_s* %32, %struct.gx_path_s* %33, %struct.gx_fill_params_s* %34, %struct.gx_device_color_s* %35, %struct.gx_clip_path_s* %36) #7
  store i32 %call35, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.34, %if.then.32, %if.then
  %37 = bitcast %struct.gs_fixed_rect_s* %outer to i8*
  call void @llvm.lifetime.end(i64 16, i8* %37) #2
  %38 = bitcast %struct.gs_fixed_rect_s* %inner to i8*
  call void @llvm.lifetime.end(i64 16, i8* %38) #2
  %39 = bitcast i32* %draw_image to i8*
  call void @llvm.lifetime.end(i64 4, i8* %39) #2
  %40 = load i32, i32* %retval
  ret i32 %40
}

; Function Attrs: nounwind uwtable
define internal i32 @opvp_stroke_path(%struct.gx_device_s* %dev, %struct.gs_imager_state_s* %pis, %struct.gx_path_s* %ppath, %struct.gx_stroke_params_s* %params, %struct.gx_device_color_s* %pdcolor, %struct.gx_clip_path_s* %pxpath) #0 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %ppath.addr = alloca %struct.gx_path_s*, align 8
  %params.addr = alloca %struct.gx_stroke_params_s*, align 8
  %pdcolor.addr = alloca %struct.gx_device_color_s*, align 8
  %pxpath.addr = alloca %struct.gx_clip_path_s*, align 8
  %draw_image = alloca i32, align 4
  %inner = alloca %struct.gs_fixed_rect_s, align 4
  %outer = alloca %struct.gs_fixed_rect_s, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_path_s* %ppath, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  store %struct.gx_stroke_params_s* %params, %struct.gx_stroke_params_s** %params.addr, align 8, !tbaa !1
  store %struct.gx_device_color_s* %pdcolor, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  store %struct.gx_clip_path_s* %pxpath, %struct.gx_clip_path_s** %pxpath.addr, align 8, !tbaa !1
  %0 = bitcast i32* %draw_image to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  store i32 0, i32* %draw_image, align 4, !tbaa !5
  %1 = bitcast %struct.gs_fixed_rect_s* %inner to i8*
  call void @llvm.lifetime.start(i64 16, i8* %1) #2
  %2 = bitcast %struct.gs_fixed_rect_s* %outer to i8*
  call void @llvm.lifetime.start(i64 16, i8* %2) #2
  %3 = load %struct.gx_path_s*, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  %call = call i32 @checkPath(%struct.gx_path_s* %3) #7
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pxpath.addr, align 8, !tbaa !1
  %call1 = call i32 @checkCPath(%struct.gx_clip_path_s* %4) #7
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %5 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %6 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %7 = load %struct.gx_path_s*, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  %8 = load %struct.gx_stroke_params_s*, %struct.gx_stroke_params_s** %params.addr, align 8, !tbaa !1
  %9 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %10 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pxpath.addr, align 8, !tbaa !1
  %call3 = call i32 @gx_default_stroke_path(%struct.gx_device_s* %5, %struct.gs_imager_state_s* %6, %struct.gx_path_s* %7, %struct.gx_stroke_params_s* %8, %struct.gx_device_color_s* %9, %struct.gx_clip_path_s* %10) #7
  store i32 %call3, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %11 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetClipPath = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %11, i32 0, i32 48
  %12 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetClipPath, align 8, !tbaa !99
  %tobool4 = icmp ne i32 (i32, i32)* %12, null
  br i1 %tobool4, label %if.end.28, label %if.then.5

if.then.5:                                        ; preds = %if.end
  %13 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pxpath.addr, align 8, !tbaa !1
  %call6 = call i32 @gx_cpath_inner_box(%struct.gx_clip_path_s* %13, %struct.gs_fixed_rect_s* %inner) #7
  %14 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pxpath.addr, align 8, !tbaa !1
  %call7 = call i32 @gx_cpath_outer_box(%struct.gx_clip_path_s* %14, %struct.gs_fixed_rect_s* %outer) #7
  %p = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %inner, i32 0, i32 0
  %x = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %p, i32 0, i32 0
  %15 = load i32, i32* %x, align 4, !tbaa !100
  %p8 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %outer, i32 0, i32 0
  %x9 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %p8, i32 0, i32 0
  %16 = load i32, i32* %x9, align 4, !tbaa !100
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %if.then.26, label %lor.lhs.false.10

lor.lhs.false.10:                                 ; preds = %if.then.5
  %p11 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %inner, i32 0, i32 0
  %y = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %p11, i32 0, i32 1
  %17 = load i32, i32* %y, align 4, !tbaa !101
  %p12 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %outer, i32 0, i32 0
  %y13 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %p12, i32 0, i32 1
  %18 = load i32, i32* %y13, align 4, !tbaa !101
  %cmp14 = icmp ne i32 %17, %18
  br i1 %cmp14, label %if.then.26, label %lor.lhs.false.15

lor.lhs.false.15:                                 ; preds = %lor.lhs.false.10
  %q = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %inner, i32 0, i32 1
  %x16 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %q, i32 0, i32 0
  %19 = load i32, i32* %x16, align 4, !tbaa !102
  %q17 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %outer, i32 0, i32 1
  %x18 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %q17, i32 0, i32 0
  %20 = load i32, i32* %x18, align 4, !tbaa !102
  %cmp19 = icmp ne i32 %19, %20
  br i1 %cmp19, label %if.then.26, label %lor.lhs.false.20

lor.lhs.false.20:                                 ; preds = %lor.lhs.false.15
  %q21 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %inner, i32 0, i32 1
  %y22 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %q21, i32 0, i32 1
  %21 = load i32, i32* %y22, align 4, !tbaa !103
  %q23 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %outer, i32 0, i32 1
  %y24 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %q23, i32 0, i32 1
  %22 = load i32, i32* %y24, align 4, !tbaa !103
  %cmp25 = icmp ne i32 %21, %22
  br i1 %cmp25, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %lor.lhs.false.20, %lor.lhs.false.15, %lor.lhs.false.10, %if.then.5
  store i32 1, i32* %draw_image, align 4, !tbaa !5
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.26, %lor.lhs.false.20
  br label %if.end.28

if.end.28:                                        ; preds = %if.end.27, %if.end
  %23 = load i32, i32* @vector, align 4, !tbaa !5
  %tobool29 = icmp ne i32 %23, 0
  br i1 %tobool29, label %lor.lhs.false.30, label %if.then.32

lor.lhs.false.30:                                 ; preds = %if.end.28
  %24 = load i32, i32* %draw_image, align 4, !tbaa !5
  %tobool31 = icmp ne i32 %24, 0
  br i1 %tobool31, label %if.then.32, label %if.end.34

if.then.32:                                       ; preds = %lor.lhs.false.30, %if.end.28
  %25 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %26 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %27 = load %struct.gx_path_s*, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  %28 = load %struct.gx_stroke_params_s*, %struct.gx_stroke_params_s** %params.addr, align 8, !tbaa !1
  %29 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %30 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pxpath.addr, align 8, !tbaa !1
  %call33 = call i32 @gx_default_stroke_path(%struct.gx_device_s* %25, %struct.gs_imager_state_s* %26, %struct.gx_path_s* %27, %struct.gx_stroke_params_s* %28, %struct.gx_device_color_s* %29, %struct.gx_clip_path_s* %30) #7
  store i32 %call33, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.34:                                        ; preds = %lor.lhs.false.30
  %31 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %32 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %33 = load %struct.gx_path_s*, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  %34 = load %struct.gx_stroke_params_s*, %struct.gx_stroke_params_s** %params.addr, align 8, !tbaa !1
  %35 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %36 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pxpath.addr, align 8, !tbaa !1
  %call35 = call i32 @gdev_vector_stroke_path(%struct.gx_device_s* %31, %struct.gs_imager_state_s* %32, %struct.gx_path_s* %33, %struct.gx_stroke_params_s* %34, %struct.gx_device_color_s* %35, %struct.gx_clip_path_s* %36) #7
  store i32 %call35, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.34, %if.then.32, %if.then
  %37 = bitcast %struct.gs_fixed_rect_s* %outer to i8*
  call void @llvm.lifetime.end(i64 16, i8* %37) #2
  %38 = bitcast %struct.gs_fixed_rect_s* %inner to i8*
  call void @llvm.lifetime.end(i64 16, i8* %38) #2
  %39 = bitcast i32* %draw_image to i8*
  call void @llvm.lifetime.end(i64 4, i8* %39) #2
  %40 = load i32, i32* %retval
  ret i32 %40
}

; Function Attrs: nounwind uwtable
define internal i32 @opvp_fill_mask(%struct.gx_device_s* %dev, i8* %data, i32 %data_x, i32 %raster, i64 %id, i32 %x, i32 %y, i32 %w, i32 %h, %struct.gx_device_color_s* %pdcolor, i32 %depth, i32 %lop, %struct.gx_clip_path_s* %pcpath) #0 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %data.addr = alloca i8*, align 8
  %data_x.addr = alloca i32, align 4
  %raster.addr = alloca i32, align 4
  %id.addr = alloca i64, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %pdcolor.addr = alloca %struct.gx_device_color_s*, align 8
  %depth.addr = alloca i32, align 4
  %lop.addr = alloca i32, align 4
  %pcpath.addr = alloca %struct.gx_clip_path_s*, align 8
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i8* %data, i8** %data.addr, align 8, !tbaa !1
  store i32 %data_x, i32* %data_x.addr, align 4, !tbaa !5
  store i32 %raster, i32* %raster.addr, align 4, !tbaa !5
  store i64 %id, i64* %id.addr, align 8, !tbaa !90
  store i32 %x, i32* %x.addr, align 4, !tbaa !5
  store i32 %y, i32* %y.addr, align 4, !tbaa !5
  store i32 %w, i32* %w.addr, align 4, !tbaa !5
  store i32 %h, i32* %h.addr, align 4, !tbaa !5
  store %struct.gx_device_color_s* %pdcolor, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  store i32 %depth, i32* %depth.addr, align 4, !tbaa !5
  store i32 %lop, i32* %lop.addr, align 4, !tbaa !5
  store %struct.gx_clip_path_s* %pcpath, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %0 = load i32, i32* @vector, align 4, !tbaa !5
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.gx_device_vector_s*
  %3 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %call = call i32 @gdev_vector_update_fill_color(%struct.gx_device_vector_s* %2, %struct.gs_imager_state_s* null, %struct.gx_device_color_s* %3) #7
  %4 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %5 = bitcast %struct.gx_device_s* %4 to %struct.gx_device_vector_s*
  %6 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %call1 = call i32 @gdev_vector_update_clip_path(%struct.gx_device_vector_s* %5, %struct.gx_clip_path_s* %6) #7
  %7 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %8 = bitcast %struct.gx_device_s* %7 to %struct.gx_device_vector_s*
  %9 = load i32, i32* %lop.addr, align 4, !tbaa !5
  %call2 = call i32 @gdev_vector_update_log_op(%struct.gx_device_vector_s* %8, i32 %9) #7
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %10 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %11 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %12 = load i32, i32* %data_x.addr, align 4, !tbaa !5
  %13 = load i32, i32* %raster.addr, align 4, !tbaa !5
  %14 = load i64, i64* %id.addr, align 8, !tbaa !90
  %15 = load i32, i32* %x.addr, align 4, !tbaa !5
  %16 = load i32, i32* %y.addr, align 4, !tbaa !5
  %17 = load i32, i32* %w.addr, align 4, !tbaa !5
  %18 = load i32, i32* %h.addr, align 4, !tbaa !5
  %19 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %20 = load i32, i32* %depth.addr, align 4, !tbaa !5
  %21 = load i32, i32* %lop.addr, align 4, !tbaa !5
  %22 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %call3 = call i32 @gx_default_fill_mask(%struct.gx_device_s* %10, i8* %11, i32 %12, i32 %13, i64 %14, i32 %15, i32 %16, i32 %17, i32 %18, %struct.gx_device_color_s* %19, i32 %20, i32 %21, %struct.gx_clip_path_s* %22) #7
  ret i32 %call3
}

declare i32 @gdev_vector_fill_trapezoid(%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32) #1

declare i32 @gdev_vector_fill_parallelogram(%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32) #1

declare i32 @gdev_vector_fill_triangle(%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32) #1

; Function Attrs: nounwind uwtable
define internal i32 @opvp_begin_image(%struct.gx_device_s* %dev, %struct.gs_imager_state_s* %pis, %struct.gs_image1_s* %pim, i32 %format, %struct.gs_int_rect_s* %prect, %struct.gx_device_color_s* %pdcolor, %struct.gx_clip_path_s* %pcpath, %struct.gs_memory_s* %mem, %struct.gx_image_enum_common_s** %pinfo) #0 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %pim.addr = alloca %struct.gs_image1_s*, align 8
  %format.addr = alloca i32, align 4
  %prect.addr = alloca %struct.gs_int_rect_s*, align 8
  %pdcolor.addr = alloca %struct.gx_device_color_s*, align 8
  %pcpath.addr = alloca %struct.gx_clip_path_s*, align 8
  %mem.addr = alloca %struct.gs_memory_s*, align 8
  %pinfo.addr = alloca %struct.gx_image_enum_common_s**, align 8
  %vdev = alloca %struct.gx_device_vector_s*, align 8
  %vinfo = alloca %struct.gdev_vector_image_enum_s*, align 8
  %mtx = alloca %struct.gs_matrix_s, align 4
  %ctm = alloca %struct._opvp_ctm, align 4
  %draw_image = alloca i32, align 4
  %supported_angle = alloca i32, align 4
  %code = alloca i32, align 4
  %r = alloca i32, align 4
  %ecode = alloca i32, align 4
  %bits_per_pixel = alloca i32, align 4
  %can_reverse = alloca i32, align 4
  %p = alloca i32, align 4
  %mag = alloca [2 x float], align 4
  %pcs = alloca %struct.gs_color_space_s*, align 8
  %cleanup.dest.slot = alloca i32
  %count = alloca i32, align 4
  %p26 = alloca i8*, align 8
  %rgb = alloca [3 x i16], align 2
  %ncspace = alloca i32, align 4
  %dw = alloca i32, align 4
  %dh = alloca i32, align 4
  %adj_raster = alloca i32, align 4
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gs_image1_s* %pim, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  store i32 %format, i32* %format.addr, align 4, !tbaa !64
  store %struct.gs_int_rect_s* %prect, %struct.gs_int_rect_s** %prect.addr, align 8, !tbaa !1
  store %struct.gx_device_color_s* %pdcolor, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  store %struct.gx_clip_path_s* %pcpath, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  store %struct.gs_memory_s* %mem, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  store %struct.gx_image_enum_common_s** %pinfo, %struct.gx_image_enum_common_s*** %pinfo.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_vector_s** %vdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_s* %1 to %struct.gx_device_vector_s*
  store %struct.gx_device_vector_s* %2, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %3 = bitcast %struct.gdev_vector_image_enum_s** %vinfo to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = bitcast %struct.gs_matrix_s* %mtx to i8*
  call void @llvm.lifetime.start(i64 24, i8* %4) #2
  %5 = bitcast %struct._opvp_ctm* %ctm to i8*
  call void @llvm.lifetime.start(i64 24, i8* %5) #2
  %6 = bitcast i32* %draw_image to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #2
  store i32 0, i32* %draw_image, align 4, !tbaa !5
  %7 = bitcast i32* %supported_angle to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #2
  store i32 0, i32* %supported_angle, align 4, !tbaa !5
  %8 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #2
  store i32 -1, i32* %code, align 4, !tbaa !5
  %9 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #2
  store i32 -1, i32* %r, align 4, !tbaa !5
  %10 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %11 = bitcast i32* %bits_per_pixel to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #2
  store i32 24, i32* %bits_per_pixel, align 4, !tbaa !5
  %12 = bitcast i32* %can_reverse to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #2
  store i32 0, i32* %can_reverse, align 4, !tbaa !5
  %13 = bitcast i32* %p to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #2
  %14 = bitcast [2 x float]* %mag to i8*
  call void @llvm.lifetime.start(i64 8, i8* %14) #2
  %15 = bitcast [2 x float]* %mag to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* bitcast ([2 x float]* @opvp_begin_image.mag to i8*), i64 8, i32 4, i1 false)
  %16 = bitcast %struct.gs_color_space_s** %pcs to i8*
  call void @llvm.lifetime.start(i64 8, i8* %16) #2
  %17 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %ColorSpace = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %17, i32 0, i32 9
  %18 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %ColorSpace, align 8, !tbaa !104
  store %struct.gs_color_space_s* %18, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %19 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %call = call i32 @checkCPath(%struct.gx_clip_path_s* %19) #7
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %20 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %21 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %22 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %23 = load i32, i32* %format.addr, align 4, !tbaa !64
  %24 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %prect.addr, align 8, !tbaa !1
  %25 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %26 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %27 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %28 = load %struct.gx_image_enum_common_s**, %struct.gx_image_enum_common_s*** %pinfo.addr, align 8, !tbaa !1
  %call1 = call i32 @gx_default_begin_image(%struct.gx_device_s* %20, %struct.gs_imager_state_s* %21, %struct.gs_image1_s* %22, i32 %23, %struct.gs_int_rect_s* %24, %struct.gx_device_color_s* %25, %struct.gx_clip_path_s* %26, %struct.gs_memory_s* %27, %struct.gx_image_enum_common_s** %28) #7
  store i32 %call1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.582

if.end:                                           ; preds = %entry
  store i32 0, i32* @color_index, align 4, !tbaa !64
  %29 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gs_memory_s, %struct.gs_memory_s* %29, i32 0, i32 1
  %alloc_struct = getelementptr inbounds %struct.gs_memory_procs_s, %struct.gs_memory_procs_s* %procs, i32 0, i32 8
  %30 = load i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)** %alloc_struct, align 8, !tbaa !106
  %31 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %call2 = call i8* %30(%struct.gs_memory_s* %31, %struct.gs_memory_struct_type_s* @st_vector_image_enum, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.204, i32 0, i32 0)) #7
  %32 = bitcast i8* %call2 to %struct.gdev_vector_image_enum_s*
  store %struct.gdev_vector_image_enum_s* %32, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %33 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %tobool3 = icmp ne %struct.gdev_vector_image_enum_s* %33, null
  br i1 %tobool3, label %if.then.4, label %if.end.406

if.then.4:                                        ; preds = %if.end
  %34 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %Decode = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %34, i32 0, i32 5
  %arraydecay = getelementptr inbounds [130 x float], [130 x float]* %Decode, i32 0, i32 0
  %35 = bitcast float* %arraydecay to i8*
  %call5 = call i8* @memcpy(i8* bitcast ([130 x float]* @imageDecode to i8*), i8* %35, i64 520) #8
  %36 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %37 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %memory = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %37, i32 0, i32 3
  store %struct.gs_memory_s* %36, %struct.gs_memory_s** %memory, align 8, !tbaa !107
  %38 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %39 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %40 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %41 = load i32, i32* %format.addr, align 4, !tbaa !64
  %42 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %prect.addr, align 8, !tbaa !1
  %43 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %44 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %45 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %46 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %call6 = call i32 @gdev_vector_begin_image(%struct.gx_device_vector_s* %38, %struct.gs_imager_state_s* %39, %struct.gs_image1_s* %40, i32 %41, %struct.gs_int_rect_s* %42, %struct.gx_device_color_s* %43, %struct.gx_clip_path_s* %44, %struct.gs_memory_s* %45, %struct.gx_image_enum_procs_s* @opvp_image_enum_procs, %struct.gdev_vector_image_enum_s* %46) #7
  store i32 %call6, i32* %code, align 4, !tbaa !5
  %47 = load i32, i32* %code, align 4, !tbaa !5
  %tobool7 = icmp ne i32 %47, 0
  br i1 %tobool7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.then.4
  %48 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %48, i32* %ecode, align 4, !tbaa !5
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.8, %if.then.4
  %49 = load i32, i32* %ecode, align 4, !tbaa !5
  %tobool10 = icmp ne i32 %49, 0
  br i1 %tobool10, label %if.end.371, label %if.then.11

if.then.11:                                       ; preds = %if.end.9
  store i32 0, i32* %bits_per_pixel, align 4, !tbaa !5
  store i32 0, i32* %p, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.11
  %50 = load i32, i32* %p, align 4, !tbaa !5
  %51 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %num_planes = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %51, i32 0, i32 6
  %52 = load i32, i32* %num_planes, align 4, !tbaa !109
  %cmp = icmp slt i32 %50, %52
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %53 = load i32, i32* %p, align 4, !tbaa !5
  %idxprom = sext i32 %53 to i64
  %54 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %plane_depths = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %54, i32 0, i32 7
  %arrayidx = getelementptr inbounds [65 x i32], [65 x i32]* %plane_depths, i32 0, i64 %idxprom
  %55 = load i32, i32* %arrayidx, align 4, !tbaa !5
  %56 = load i32, i32* %bits_per_pixel, align 4, !tbaa !5
  %add = add nsw i32 %56, %55
  store i32 %add, i32* %bits_per_pixel, align 4, !tbaa !5
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %57 = load i32, i32* %p, align 4, !tbaa !5
  %inc = add nsw i32 %57, 1
  store i32 %inc, i32* %p, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %58 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %ImageMask = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %58, i32 0, i32 10
  %59 = load i32, i32* %ImageMask, align 4, !tbaa !110
  %tobool12 = icmp ne i32 %59, 0
  br i1 %tobool12, label %if.end.200, label %if.then.13

if.then.13:                                       ; preds = %for.end
  %60 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %call14 = call i32 @gs_color_space_get_index(%struct.gs_color_space_s* %60) #7
  store i32 %call14, i32* @color_index, align 4, !tbaa !64
  %61 = load i32, i32* @color_index, align 4, !tbaa !64
  %cmp15 = icmp eq i32 %61, 10
  br i1 %cmp15, label %if.then.16, label %if.end.199

if.then.16:                                       ; preds = %if.then.13
  %62 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %call17 = call %struct.gs_color_space_s* @gs_cspace_base_space(%struct.gs_color_space_s* %62) #7
  %type = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %call17, i32 0, i32 0
  %63 = load %struct.gs_color_space_type_s*, %struct.gs_color_space_type_s** %type, align 8, !tbaa !111
  %index = getelementptr inbounds %struct.gs_color_space_type_s, %struct.gs_color_space_type_s* %63, i32 0, i32 0
  %64 = load i32, i32* %index, align 4, !tbaa !113
  store i32 %64, i32* @base_color_index, align 4, !tbaa !64
  %65 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %params = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %65, i32 0, i32 7
  %indexed = bitcast %union.anon* %params to %struct.gs_indexed_params_s*
  %hival = getelementptr inbounds %struct.gs_indexed_params_s, %struct.gs_indexed_params_s* %indexed, i32 0, i32 0
  %66 = load i32, i32* %hival, align 4, !tbaa !115
  %add18 = add nsw i32 %66, 1
  %cmp19 = icmp sgt i32 %add18, 256
  br i1 %cmp19, label %if.then.22, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.16
  %67 = load i32, i32* %bits_per_pixel, align 4, !tbaa !5
  %cmp20 = icmp ne i32 %67, 8
  br i1 %cmp20, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false
  %68 = load i32, i32* %bits_per_pixel, align 4, !tbaa !5
  %cmp21 = icmp ne i32 %68, 1
  br i1 %cmp21, label %if.then.22, label %if.else

if.then.22:                                       ; preds = %land.lhs.true, %if.then.16
  %69 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %70 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %71 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %72 = load i32, i32* %format.addr, align 4, !tbaa !64
  %73 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %prect.addr, align 8, !tbaa !1
  %74 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %75 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %76 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %77 = load %struct.gx_image_enum_common_s**, %struct.gx_image_enum_common_s*** %pinfo.addr, align 8, !tbaa !1
  %call23 = call i32 @gx_default_begin_image(%struct.gx_device_s* %69, %struct.gs_imager_state_s* %70, %struct.gs_image1_s* %71, i32 %72, %struct.gs_int_rect_s* %73, %struct.gx_device_color_s* %74, %struct.gx_clip_path_s* %75, %struct.gs_memory_s* %76, %struct.gx_image_enum_common_s** %77) #7
  store i32 %call23, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.582

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %78 = load i32, i32* @base_color_index, align 4, !tbaa !64
  %cmp24 = icmp eq i32 %78, 2
  br i1 %cmp24, label %if.then.25, label %if.else.156

if.then.25:                                       ; preds = %if.else
  %79 = bitcast i32* %count to i8*
  call void @llvm.lifetime.start(i64 4, i8* %79) #2
  %80 = bitcast i8** %p26 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %80) #2
  %81 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %params27 = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %81, i32 0, i32 7
  %indexed28 = bitcast %union.anon* %params27 to %struct.gs_indexed_params_s*
  %lookup = getelementptr inbounds %struct.gs_indexed_params_s, %struct.gs_indexed_params_s* %indexed28, i32 0, i32 2
  %table = bitcast %union.anon.0* %lookup to %struct.gs_const_string_s*
  %data = getelementptr inbounds %struct.gs_const_string_s, %struct.gs_const_string_s* %table, i32 0, i32 0
  %82 = load i8*, i8** %data, align 8, !tbaa !117
  store i8* %82, i8** %p26, align 8, !tbaa !1
  %83 = bitcast [3 x i16]* %rgb to i8*
  call void @llvm.lifetime.start(i64 6, i8* %83) #2
  store i32 0, i32* %count, align 4, !tbaa !5
  br label %for.cond.29

for.cond.29:                                      ; preds = %for.inc.153, %if.then.25
  %84 = load i32, i32* %count, align 4, !tbaa !5
  %85 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %params30 = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %85, i32 0, i32 7
  %indexed31 = bitcast %union.anon* %params30 to %struct.gs_indexed_params_s*
  %hival32 = getelementptr inbounds %struct.gs_indexed_params_s, %struct.gs_indexed_params_s* %indexed31, i32 0, i32 0
  %86 = load i32, i32* %hival32, align 4, !tbaa !115
  %add33 = add nsw i32 %86, 1
  %cmp34 = icmp slt i32 %84, %add33
  br i1 %cmp34, label %for.body.35, label %for.end.155

for.body.35:                                      ; preds = %for.cond.29
  %arraydecay36 = getelementptr inbounds [3 x i16], [3 x i16]* %rgb, i32 0, i32 0
  %87 = bitcast i16* %arraydecay36 to i8*
  %call37 = call i8* @memset(i8* %87, i32 0, i64 6) #8
  %88 = load i8*, i8** %p26, align 8, !tbaa !1
  %add.ptr = getelementptr inbounds i8, i8* %88, i64 0
  %89 = load i32, i32* %count, align 4, !tbaa !5
  %mul = mul nsw i32 %89, 4
  %idx.ext = sext i32 %mul to i64
  %add.ptr38 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.ext
  %90 = load i8, i8* %add.ptr38, align 1, !tbaa !64
  %conv = zext i8 %90 to i16
  %conv39 = sext i16 %conv to i32
  %shl = shl i32 %conv39, 7
  %91 = load i8*, i8** %p26, align 8, !tbaa !1
  %add.ptr40 = getelementptr inbounds i8, i8* %91, i64 0
  %92 = load i32, i32* %count, align 4, !tbaa !5
  %mul41 = mul nsw i32 %92, 4
  %idx.ext42 = sext i32 %mul41 to i64
  %add.ptr43 = getelementptr inbounds i8, i8* %add.ptr40, i64 %idx.ext42
  %93 = load i8, i8* %add.ptr43, align 1, !tbaa !64
  %conv44 = zext i8 %93 to i32
  %shr = ashr i32 %conv44, 1
  %add45 = add nsw i32 %shl, %shr
  %94 = load i8*, i8** %p26, align 8, !tbaa !1
  %add.ptr46 = getelementptr inbounds i8, i8* %94, i64 0
  %95 = load i32, i32* %count, align 4, !tbaa !5
  %mul47 = mul nsw i32 %95, 4
  %idx.ext48 = sext i32 %mul47 to i64
  %add.ptr49 = getelementptr inbounds i8, i8* %add.ptr46, i64 %idx.ext48
  %96 = load i8, i8* %add.ptr49, align 1, !tbaa !64
  %conv50 = zext i8 %96 to i32
  %shr51 = ashr i32 %conv50, 5
  %sub = sub nsw i32 %add45, %shr51
  %conv52 = trunc i32 %sub to i16
  %97 = load i8*, i8** %p26, align 8, !tbaa !1
  %add.ptr53 = getelementptr inbounds i8, i8* %97, i64 1
  %98 = load i32, i32* %count, align 4, !tbaa !5
  %mul54 = mul nsw i32 %98, 4
  %idx.ext55 = sext i32 %mul54 to i64
  %add.ptr56 = getelementptr inbounds i8, i8* %add.ptr53, i64 %idx.ext55
  %99 = load i8, i8* %add.ptr56, align 1, !tbaa !64
  %conv57 = zext i8 %99 to i16
  %conv58 = sext i16 %conv57 to i32
  %shl59 = shl i32 %conv58, 7
  %100 = load i8*, i8** %p26, align 8, !tbaa !1
  %add.ptr60 = getelementptr inbounds i8, i8* %100, i64 1
  %101 = load i32, i32* %count, align 4, !tbaa !5
  %mul61 = mul nsw i32 %101, 4
  %idx.ext62 = sext i32 %mul61 to i64
  %add.ptr63 = getelementptr inbounds i8, i8* %add.ptr60, i64 %idx.ext62
  %102 = load i8, i8* %add.ptr63, align 1, !tbaa !64
  %conv64 = zext i8 %102 to i32
  %shr65 = ashr i32 %conv64, 1
  %add66 = add nsw i32 %shl59, %shr65
  %103 = load i8*, i8** %p26, align 8, !tbaa !1
  %add.ptr67 = getelementptr inbounds i8, i8* %103, i64 1
  %104 = load i32, i32* %count, align 4, !tbaa !5
  %mul68 = mul nsw i32 %104, 4
  %idx.ext69 = sext i32 %mul68 to i64
  %add.ptr70 = getelementptr inbounds i8, i8* %add.ptr67, i64 %idx.ext69
  %105 = load i8, i8* %add.ptr70, align 1, !tbaa !64
  %conv71 = zext i8 %105 to i32
  %shr72 = ashr i32 %conv71, 5
  %sub73 = sub nsw i32 %add66, %shr72
  %conv74 = trunc i32 %sub73 to i16
  %106 = load i8*, i8** %p26, align 8, !tbaa !1
  %add.ptr75 = getelementptr inbounds i8, i8* %106, i64 2
  %107 = load i32, i32* %count, align 4, !tbaa !5
  %mul76 = mul nsw i32 %107, 4
  %idx.ext77 = sext i32 %mul76 to i64
  %add.ptr78 = getelementptr inbounds i8, i8* %add.ptr75, i64 %idx.ext77
  %108 = load i8, i8* %add.ptr78, align 1, !tbaa !64
  %conv79 = zext i8 %108 to i16
  %conv80 = sext i16 %conv79 to i32
  %shl81 = shl i32 %conv80, 7
  %109 = load i8*, i8** %p26, align 8, !tbaa !1
  %add.ptr82 = getelementptr inbounds i8, i8* %109, i64 2
  %110 = load i32, i32* %count, align 4, !tbaa !5
  %mul83 = mul nsw i32 %110, 4
  %idx.ext84 = sext i32 %mul83 to i64
  %add.ptr85 = getelementptr inbounds i8, i8* %add.ptr82, i64 %idx.ext84
  %111 = load i8, i8* %add.ptr85, align 1, !tbaa !64
  %conv86 = zext i8 %111 to i32
  %shr87 = ashr i32 %conv86, 1
  %add88 = add nsw i32 %shl81, %shr87
  %112 = load i8*, i8** %p26, align 8, !tbaa !1
  %add.ptr89 = getelementptr inbounds i8, i8* %112, i64 2
  %113 = load i32, i32* %count, align 4, !tbaa !5
  %mul90 = mul nsw i32 %113, 4
  %idx.ext91 = sext i32 %mul90 to i64
  %add.ptr92 = getelementptr inbounds i8, i8* %add.ptr89, i64 %idx.ext91
  %114 = load i8, i8* %add.ptr92, align 1, !tbaa !64
  %conv93 = zext i8 %114 to i32
  %shr94 = ashr i32 %conv93, 5
  %sub95 = sub nsw i32 %add88, %shr94
  %conv96 = trunc i32 %sub95 to i16
  %115 = load i8*, i8** %p26, align 8, !tbaa !1
  %add.ptr97 = getelementptr inbounds i8, i8* %115, i64 3
  %116 = load i32, i32* %count, align 4, !tbaa !5
  %mul98 = mul nsw i32 %116, 4
  %idx.ext99 = sext i32 %mul98 to i64
  %add.ptr100 = getelementptr inbounds i8, i8* %add.ptr97, i64 %idx.ext99
  %117 = load i8, i8* %add.ptr100, align 1, !tbaa !64
  %conv101 = zext i8 %117 to i16
  %conv102 = sext i16 %conv101 to i32
  %shl103 = shl i32 %conv102, 7
  %118 = load i8*, i8** %p26, align 8, !tbaa !1
  %add.ptr104 = getelementptr inbounds i8, i8* %118, i64 3
  %119 = load i32, i32* %count, align 4, !tbaa !5
  %mul105 = mul nsw i32 %119, 4
  %idx.ext106 = sext i32 %mul105 to i64
  %add.ptr107 = getelementptr inbounds i8, i8* %add.ptr104, i64 %idx.ext106
  %120 = load i8, i8* %add.ptr107, align 1, !tbaa !64
  %conv108 = zext i8 %120 to i32
  %shr109 = ashr i32 %conv108, 1
  %add110 = add nsw i32 %shl103, %shr109
  %121 = load i8*, i8** %p26, align 8, !tbaa !1
  %add.ptr111 = getelementptr inbounds i8, i8* %121, i64 3
  %122 = load i32, i32* %count, align 4, !tbaa !5
  %mul112 = mul nsw i32 %122, 4
  %idx.ext113 = sext i32 %mul112 to i64
  %add.ptr114 = getelementptr inbounds i8, i8* %add.ptr111, i64 %idx.ext113
  %123 = load i8, i8* %add.ptr114, align 1, !tbaa !64
  %conv115 = zext i8 %123 to i32
  %shr116 = ashr i32 %conv115, 5
  %sub117 = sub nsw i32 %add110, %shr116
  %conv118 = trunc i32 %sub117 to i16
  %124 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %arraydecay119 = getelementptr inbounds [3 x i16], [3 x i16]* %rgb, i32 0, i32 0
  %125 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  call void @color_cmyk_to_rgb(i16 signext %conv52, i16 signext %conv74, i16 signext %conv96, i16 signext %conv118, %struct.gs_imager_state_s* %124, i16* %arraydecay119, %struct.gs_memory_s* %125) #7
  %arrayidx120 = getelementptr inbounds [3 x i16], [3 x i16]* %rgb, i32 0, i64 0
  %126 = load i16, i16* %arrayidx120, align 2, !tbaa !89
  %conv121 = sext i16 %126 to i32
  %shr122 = ashr i32 %conv121, 12
  %arrayidx123 = getelementptr inbounds [3 x i16], [3 x i16]* %rgb, i32 0, i64 0
  %127 = load i16, i16* %arrayidx123, align 2, !tbaa !89
  %conv124 = sext i16 %127 to i32
  %add125 = add nsw i32 %shr122, %conv124
  %shr126 = ashr i32 %add125, 7
  %conv127 = trunc i32 %shr126 to i8
  %128 = load i32, i32* %count, align 4, !tbaa !5
  %mul128 = mul nsw i32 %128, 3
  %idx.ext129 = sext i32 %mul128 to i64
  %add.ptr130 = getelementptr inbounds i8, i8* getelementptr inbounds ([768 x i8], [768 x i8]* @palette, i32 0, i32 0), i64 %idx.ext129
  store i8 %conv127, i8* %add.ptr130, align 1, !tbaa !64
  %arrayidx131 = getelementptr inbounds [3 x i16], [3 x i16]* %rgb, i32 0, i64 1
  %129 = load i16, i16* %arrayidx131, align 2, !tbaa !89
  %conv132 = sext i16 %129 to i32
  %shr133 = ashr i32 %conv132, 12
  %arrayidx134 = getelementptr inbounds [3 x i16], [3 x i16]* %rgb, i32 0, i64 1
  %130 = load i16, i16* %arrayidx134, align 2, !tbaa !89
  %conv135 = sext i16 %130 to i32
  %add136 = add nsw i32 %shr133, %conv135
  %shr137 = ashr i32 %add136, 7
  %conv138 = trunc i32 %shr137 to i8
  %131 = load i32, i32* %count, align 4, !tbaa !5
  %mul139 = mul nsw i32 %131, 3
  %idx.ext140 = sext i32 %mul139 to i64
  %add.ptr141 = getelementptr inbounds i8, i8* getelementptr inbounds ([768 x i8], [768 x i8]* @palette, i32 0, i64 1), i64 %idx.ext140
  store i8 %conv138, i8* %add.ptr141, align 1, !tbaa !64
  %arrayidx142 = getelementptr inbounds [3 x i16], [3 x i16]* %rgb, i32 0, i64 2
  %132 = load i16, i16* %arrayidx142, align 2, !tbaa !89
  %conv143 = sext i16 %132 to i32
  %shr144 = ashr i32 %conv143, 12
  %arrayidx145 = getelementptr inbounds [3 x i16], [3 x i16]* %rgb, i32 0, i64 2
  %133 = load i16, i16* %arrayidx145, align 2, !tbaa !89
  %conv146 = sext i16 %133 to i32
  %add147 = add nsw i32 %shr144, %conv146
  %shr148 = ashr i32 %add147, 7
  %conv149 = trunc i32 %shr148 to i8
  %134 = load i32, i32* %count, align 4, !tbaa !5
  %mul150 = mul nsw i32 %134, 3
  %idx.ext151 = sext i32 %mul150 to i64
  %add.ptr152 = getelementptr inbounds i8, i8* getelementptr inbounds ([768 x i8], [768 x i8]* @palette, i32 0, i64 2), i64 %idx.ext151
  store i8 %conv149, i8* %add.ptr152, align 1, !tbaa !64
  br label %for.inc.153

for.inc.153:                                      ; preds = %for.body.35
  %135 = load i32, i32* %count, align 4, !tbaa !5
  %inc154 = add nsw i32 %135, 1
  store i32 %inc154, i32* %count, align 4, !tbaa !5
  br label %for.cond.29

for.end.155:                                      ; preds = %for.cond.29
  store i32 24, i32* %bits_per_pixel, align 4, !tbaa !5
  %136 = bitcast [3 x i16]* %rgb to i8*
  call void @llvm.lifetime.end(i64 6, i8* %136) #2
  %137 = bitcast i8** %p26 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %137) #2
  %138 = bitcast i32* %count to i8*
  call void @llvm.lifetime.end(i64 4, i8* %138) #2
  br label %if.end.197

if.else.156:                                      ; preds = %if.else
  %139 = load i32, i32* @base_color_index, align 4, !tbaa !64
  %cmp157 = icmp eq i32 %139, 1
  br i1 %cmp157, label %if.then.162, label %lor.lhs.false.159

lor.lhs.false.159:                                ; preds = %if.else.156
  %140 = load i32, i32* @base_color_index, align 4, !tbaa !64
  %cmp160 = icmp eq i32 %140, 7
  br i1 %cmp160, label %if.then.162, label %if.else.174

if.then.162:                                      ; preds = %lor.lhs.false.159, %if.else.156
  %141 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %params163 = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %141, i32 0, i32 7
  %indexed164 = bitcast %union.anon* %params163 to %struct.gs_indexed_params_s*
  %lookup165 = getelementptr inbounds %struct.gs_indexed_params_s, %struct.gs_indexed_params_s* %indexed164, i32 0, i32 2
  %table166 = bitcast %union.anon.0* %lookup165 to %struct.gs_const_string_s*
  %data167 = getelementptr inbounds %struct.gs_const_string_s, %struct.gs_const_string_s* %table166, i32 0, i32 0
  %142 = load i8*, i8** %data167, align 8, !tbaa !117
  %143 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %params168 = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %143, i32 0, i32 7
  %indexed169 = bitcast %union.anon* %params168 to %struct.gs_indexed_params_s*
  %lookup170 = getelementptr inbounds %struct.gs_indexed_params_s, %struct.gs_indexed_params_s* %indexed169, i32 0, i32 2
  %table171 = bitcast %union.anon.0* %lookup170 to %struct.gs_const_string_s*
  %size = getelementptr inbounds %struct.gs_const_string_s, %struct.gs_const_string_s* %table171, i32 0, i32 1
  %144 = load i32, i32* %size, align 4, !tbaa !119
  %conv172 = zext i32 %144 to i64
  %call173 = call i8* @memcpy(i8* getelementptr inbounds ([768 x i8], [768 x i8]* @palette, i32 0, i32 0), i8* %142, i64 %conv172) #8
  store i32 24, i32* %bits_per_pixel, align 4, !tbaa !5
  br label %if.end.196

if.else.174:                                      ; preds = %lor.lhs.false.159
  %145 = load i32, i32* @base_color_index, align 4, !tbaa !64
  %cmp175 = icmp eq i32 %145, 0
  br i1 %cmp175, label %if.then.180, label %lor.lhs.false.177

lor.lhs.false.177:                                ; preds = %if.else.174
  %146 = load i32, i32* @base_color_index, align 4, !tbaa !64
  %cmp178 = icmp eq i32 %146, 8
  br i1 %cmp178, label %if.then.180, label %if.else.193

if.then.180:                                      ; preds = %lor.lhs.false.177, %if.else.174
  %147 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %params181 = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %147, i32 0, i32 7
  %indexed182 = bitcast %union.anon* %params181 to %struct.gs_indexed_params_s*
  %lookup183 = getelementptr inbounds %struct.gs_indexed_params_s, %struct.gs_indexed_params_s* %indexed182, i32 0, i32 2
  %table184 = bitcast %union.anon.0* %lookup183 to %struct.gs_const_string_s*
  %data185 = getelementptr inbounds %struct.gs_const_string_s, %struct.gs_const_string_s* %table184, i32 0, i32 0
  %148 = load i8*, i8** %data185, align 8, !tbaa !117
  %149 = load %struct.gs_color_space_s*, %struct.gs_color_space_s** %pcs, align 8, !tbaa !1
  %params186 = getelementptr inbounds %struct.gs_color_space_s, %struct.gs_color_space_s* %149, i32 0, i32 7
  %indexed187 = bitcast %union.anon* %params186 to %struct.gs_indexed_params_s*
  %lookup188 = getelementptr inbounds %struct.gs_indexed_params_s, %struct.gs_indexed_params_s* %indexed187, i32 0, i32 2
  %table189 = bitcast %union.anon.0* %lookup188 to %struct.gs_const_string_s*
  %size190 = getelementptr inbounds %struct.gs_const_string_s, %struct.gs_const_string_s* %table189, i32 0, i32 1
  %150 = load i32, i32* %size190, align 4, !tbaa !119
  %conv191 = zext i32 %150 to i64
  %call192 = call i8* @memcpy(i8* getelementptr inbounds ([768 x i8], [768 x i8]* @palette, i32 0, i32 0), i8* %148, i64 %conv191) #8
  store i32 8, i32* %bits_per_pixel, align 4, !tbaa !5
  br label %if.end.195

if.else.193:                                      ; preds = %lor.lhs.false.177
  %151 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %152 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %153 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %154 = load i32, i32* %format.addr, align 4, !tbaa !64
  %155 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %prect.addr, align 8, !tbaa !1
  %156 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %157 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %158 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %159 = load %struct.gx_image_enum_common_s**, %struct.gx_image_enum_common_s*** %pinfo.addr, align 8, !tbaa !1
  %call194 = call i32 @gx_default_begin_image(%struct.gx_device_s* %151, %struct.gs_imager_state_s* %152, %struct.gs_image1_s* %153, i32 %154, %struct.gs_int_rect_s* %155, %struct.gx_device_color_s* %156, %struct.gx_clip_path_s* %157, %struct.gs_memory_s* %158, %struct.gx_image_enum_common_s** %159) #7
  store i32 %call194, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.582

if.end.195:                                       ; preds = %if.then.180
  br label %if.end.196

if.end.196:                                       ; preds = %if.end.195, %if.then.162
  br label %if.end.197

if.end.197:                                       ; preds = %if.end.196, %for.end.155
  br label %if.end.198

if.end.198:                                       ; preds = %if.end.197
  br label %if.end.199

if.end.199:                                       ; preds = %if.end.198, %if.then.13
  br label %if.end.200

if.end.200:                                       ; preds = %if.end.199, %for.end
  %160 = load i32, i32* %bits_per_pixel, align 4, !tbaa !5
  %rem = srem i32 %160, 8
  %cmp201 = icmp eq i32 %rem, 0
  br i1 %cmp201, label %if.then.203, label %if.end.204

if.then.203:                                      ; preds = %if.end.200
  store i32 1, i32* %can_reverse, align 4, !tbaa !5
  br label %if.end.204

if.end.204:                                       ; preds = %if.then.203, %if.end.200
  store i32 0, i32* @reverse_image, align 4, !tbaa !5
  %161 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %ImageMatrix = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %161, i32 0, i32 1
  %call205 = call i32 @gs_matrix_invert(%struct.gs_matrix_s* %ImageMatrix, %struct.gs_matrix_s* %mtx) #7
  %162 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %ctm206 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %162, i32 0, i32 5
  %163 = bitcast %struct.gs_matrix_fixed_s* %ctm206 to %struct.gs_matrix_s*
  %call207 = call i32 @gs_matrix_multiply(%struct.gs_matrix_s* %mtx, %struct.gs_matrix_s* %163, %struct.gs_matrix_s* %mtx) #7
  %164 = load i32, i32* @FastImageMode, align 4, !tbaa !64
  switch i32 %164, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.244
    i32 3, label %sw.bb.275
    i32 4, label %sw.bb.351
    i32 5, label %sw.bb.369
    i32 0, label %sw.bb.370
  ]

sw.bb:                                            ; preds = %if.end.204
  %xy = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 1
  %165 = load float, float* %xy, align 4, !tbaa !68
  %cmp208 = fcmp oeq float %165, 0.000000e+00
  br i1 %cmp208, label %land.lhs.true.210, label %if.end.243

land.lhs.true.210:                                ; preds = %sw.bb
  %yx = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 2
  %166 = load float, float* %yx, align 4, !tbaa !69
  %cmp211 = fcmp oeq float %166, 0.000000e+00
  br i1 %cmp211, label %land.lhs.true.213, label %if.end.243

land.lhs.true.213:                                ; preds = %land.lhs.true.210
  %yy = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 3
  %167 = load float, float* %yy, align 4, !tbaa !70
  %cmp214 = fcmp oge float %167, 0.000000e+00
  br i1 %cmp214, label %if.then.216, label %if.end.243

if.then.216:                                      ; preds = %land.lhs.true.213
  %xx = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 0
  %168 = load float, float* %xx, align 4, !tbaa !67
  %cmp217 = fcmp oge float %168, 0.000000e+00
  br i1 %cmp217, label %if.then.219, label %if.else.226

if.then.219:                                      ; preds = %if.then.216
  %xx220 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 0
  %169 = load float, float* %xx220, align 4, !tbaa !67
  %arrayidx221 = getelementptr inbounds [2 x float], [2 x float]* %mag, i32 0, i64 0
  store float %169, float* %arrayidx221, align 4, !tbaa !10
  %yy222 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 3
  %170 = load float, float* %yy222, align 4, !tbaa !70
  %arrayidx223 = getelementptr inbounds [2 x float], [2 x float]* %mag, i32 0, i64 1
  store float %170, float* %arrayidx223, align 4, !tbaa !10
  %xx224 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 0
  store float 1.000000e+00, float* %xx224, align 4, !tbaa !67
  %yy225 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 3
  store float 1.000000e+00, float* %yy225, align 4, !tbaa !70
  store i32 1, i32* %supported_angle, align 4, !tbaa !5
  br label %if.end.242

if.else.226:                                      ; preds = %if.then.216
  %171 = load i32, i32* %can_reverse, align 4, !tbaa !5
  %tobool227 = icmp ne i32 %171, 0
  br i1 %tobool227, label %if.then.228, label %if.end.241

if.then.228:                                      ; preds = %if.else.226
  %xx229 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 0
  %172 = load float, float* %xx229, align 4, !tbaa !67
  %mul230 = fmul float %172, -1.000000e+00
  store float %mul230, float* %xx229, align 4, !tbaa !67
  %xx231 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 0
  %173 = load float, float* %xx231, align 4, !tbaa !67
  %arrayidx232 = getelementptr inbounds [2 x float], [2 x float]* %mag, i32 0, i64 0
  store float %173, float* %arrayidx232, align 4, !tbaa !10
  %yy233 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 3
  %174 = load float, float* %yy233, align 4, !tbaa !70
  %arrayidx234 = getelementptr inbounds [2 x float], [2 x float]* %mag, i32 0, i64 1
  store float %174, float* %arrayidx234, align 4, !tbaa !10
  %xx235 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 0
  store float 1.000000e+00, float* %xx235, align 4, !tbaa !67
  %yy236 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 3
  store float 1.000000e+00, float* %yy236, align 4, !tbaa !70
  %175 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %width = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %175, i32 0, i32 11
  %176 = load i32, i32* %width, align 4, !tbaa !120
  %conv237 = sitofp i32 %176 to float
  %arrayidx238 = getelementptr inbounds [2 x float], [2 x float]* %mag, i32 0, i64 0
  %177 = load float, float* %arrayidx238, align 4, !tbaa !10
  %mul239 = fmul float %conv237, %177
  %tx = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 4
  %178 = load float, float* %tx, align 4, !tbaa !71
  %sub240 = fsub float %178, %mul239
  store float %sub240, float* %tx, align 4, !tbaa !71
  store i32 1, i32* %supported_angle, align 4, !tbaa !5
  store i32 1, i32* @reverse_image, align 4, !tbaa !5
  br label %if.end.241

if.end.241:                                       ; preds = %if.then.228, %if.else.226
  br label %if.end.242

if.end.242:                                       ; preds = %if.end.241, %if.then.219
  br label %if.end.243

if.end.243:                                       ; preds = %if.end.242, %land.lhs.true.213, %land.lhs.true.210, %sw.bb
  br label %sw.epilog

sw.bb.244:                                        ; preds = %if.end.204
  %xy245 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 1
  %179 = load float, float* %xy245, align 4, !tbaa !68
  %cmp246 = fcmp oeq float %179, 0.000000e+00
  br i1 %cmp246, label %land.lhs.true.248, label %if.end.274

land.lhs.true.248:                                ; preds = %sw.bb.244
  %yx249 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 2
  %180 = load float, float* %yx249, align 4, !tbaa !69
  %cmp250 = fcmp oeq float %180, 0.000000e+00
  br i1 %cmp250, label %land.lhs.true.252, label %if.end.274

land.lhs.true.252:                                ; preds = %land.lhs.true.248
  %yy253 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 3
  %181 = load float, float* %yy253, align 4, !tbaa !70
  %cmp254 = fcmp oge float %181, 0.000000e+00
  br i1 %cmp254, label %if.then.256, label %if.end.274

if.then.256:                                      ; preds = %land.lhs.true.252
  %xx257 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 0
  %182 = load float, float* %xx257, align 4, !tbaa !67
  %cmp258 = fcmp oge float %182, 0.000000e+00
  br i1 %cmp258, label %if.then.260, label %if.else.261

if.then.260:                                      ; preds = %if.then.256
  store i32 1, i32* %supported_angle, align 4, !tbaa !5
  br label %if.end.273

if.else.261:                                      ; preds = %if.then.256
  %183 = load i32, i32* %can_reverse, align 4, !tbaa !5
  %tobool262 = icmp ne i32 %183, 0
  br i1 %tobool262, label %if.then.263, label %if.end.272

if.then.263:                                      ; preds = %if.else.261
  %xx264 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 0
  %184 = load float, float* %xx264, align 4, !tbaa !67
  %mul265 = fmul float %184, -1.000000e+00
  store float %mul265, float* %xx264, align 4, !tbaa !67
  %185 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %width266 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %185, i32 0, i32 11
  %186 = load i32, i32* %width266, align 4, !tbaa !120
  %conv267 = sitofp i32 %186 to float
  %xx268 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 0
  %187 = load float, float* %xx268, align 4, !tbaa !67
  %mul269 = fmul float %conv267, %187
  %tx270 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 4
  %188 = load float, float* %tx270, align 4, !tbaa !71
  %sub271 = fsub float %188, %mul269
  store float %sub271, float* %tx270, align 4, !tbaa !71
  store i32 1, i32* %supported_angle, align 4, !tbaa !5
  store i32 1, i32* @reverse_image, align 4, !tbaa !5
  br label %if.end.272

if.end.272:                                       ; preds = %if.then.263, %if.else.261
  br label %if.end.273

if.end.273:                                       ; preds = %if.end.272, %if.then.260
  br label %if.end.274

if.end.274:                                       ; preds = %if.end.273, %land.lhs.true.252, %land.lhs.true.248, %sw.bb.244
  br label %sw.epilog

sw.bb.275:                                        ; preds = %if.end.204
  %xy276 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 1
  %189 = load float, float* %xy276, align 4, !tbaa !68
  %cmp277 = fcmp oeq float %189, 0.000000e+00
  br i1 %cmp277, label %land.lhs.true.279, label %if.else.313

land.lhs.true.279:                                ; preds = %sw.bb.275
  %yx280 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 2
  %190 = load float, float* %yx280, align 4, !tbaa !69
  %cmp281 = fcmp oeq float %190, 0.000000e+00
  br i1 %cmp281, label %if.then.283, label %if.else.313

if.then.283:                                      ; preds = %land.lhs.true.279
  %xx284 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 0
  %191 = load float, float* %xx284, align 4, !tbaa !67
  %cmp285 = fcmp oge float %191, 0.000000e+00
  br i1 %cmp285, label %land.lhs.true.287, label %lor.lhs.false.291

land.lhs.true.287:                                ; preds = %if.then.283
  %yy288 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 3
  %192 = load float, float* %yy288, align 4, !tbaa !70
  %cmp289 = fcmp oge float %192, 0.000000e+00
  br i1 %cmp289, label %if.then.299, label %lor.lhs.false.291

lor.lhs.false.291:                                ; preds = %land.lhs.true.287, %if.then.283
  %xx292 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 0
  %193 = load float, float* %xx292, align 4, !tbaa !67
  %cmp293 = fcmp ole float %193, 0.000000e+00
  br i1 %cmp293, label %land.lhs.true.295, label %if.else.300

land.lhs.true.295:                                ; preds = %lor.lhs.false.291
  %yy296 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 3
  %194 = load float, float* %yy296, align 4, !tbaa !70
  %cmp297 = fcmp ole float %194, 0.000000e+00
  br i1 %cmp297, label %if.then.299, label %if.else.300

if.then.299:                                      ; preds = %land.lhs.true.295, %land.lhs.true.287
  store i32 1, i32* %supported_angle, align 4, !tbaa !5
  br label %if.end.312

if.else.300:                                      ; preds = %land.lhs.true.295, %lor.lhs.false.291
  %195 = load i32, i32* %can_reverse, align 4, !tbaa !5
  %tobool301 = icmp ne i32 %195, 0
  br i1 %tobool301, label %if.then.302, label %if.end.311

if.then.302:                                      ; preds = %if.else.300
  %xx303 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 0
  %196 = load float, float* %xx303, align 4, !tbaa !67
  %mul304 = fmul float %196, -1.000000e+00
  store float %mul304, float* %xx303, align 4, !tbaa !67
  %197 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %width305 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %197, i32 0, i32 11
  %198 = load i32, i32* %width305, align 4, !tbaa !120
  %conv306 = sitofp i32 %198 to float
  %xx307 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 0
  %199 = load float, float* %xx307, align 4, !tbaa !67
  %mul308 = fmul float %conv306, %199
  %tx309 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 4
  %200 = load float, float* %tx309, align 4, !tbaa !71
  %sub310 = fsub float %200, %mul308
  store float %sub310, float* %tx309, align 4, !tbaa !71
  store i32 1, i32* %supported_angle, align 4, !tbaa !5
  store i32 1, i32* @reverse_image, align 4, !tbaa !5
  br label %if.end.311

if.end.311:                                       ; preds = %if.then.302, %if.else.300
  br label %if.end.312

if.end.312:                                       ; preds = %if.end.311, %if.then.299
  br label %if.end.350

if.else.313:                                      ; preds = %land.lhs.true.279, %sw.bb.275
  %xx314 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 0
  %201 = load float, float* %xx314, align 4, !tbaa !67
  %cmp315 = fcmp oeq float %201, 0.000000e+00
  br i1 %cmp315, label %land.lhs.true.317, label %if.end.349

land.lhs.true.317:                                ; preds = %if.else.313
  %yy318 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 3
  %202 = load float, float* %yy318, align 4, !tbaa !70
  %cmp319 = fcmp oeq float %202, 0.000000e+00
  br i1 %cmp319, label %if.then.321, label %if.end.349

if.then.321:                                      ; preds = %land.lhs.true.317
  %xy322 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 1
  %203 = load float, float* %xy322, align 4, !tbaa !68
  %cmp323 = fcmp oge float %203, 0.000000e+00
  br i1 %cmp323, label %land.lhs.true.325, label %lor.lhs.false.329

land.lhs.true.325:                                ; preds = %if.then.321
  %yx326 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 2
  %204 = load float, float* %yx326, align 4, !tbaa !69
  %cmp327 = fcmp ole float %204, 0.000000e+00
  br i1 %cmp327, label %if.then.337, label %lor.lhs.false.329

lor.lhs.false.329:                                ; preds = %land.lhs.true.325, %if.then.321
  %xy330 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 1
  %205 = load float, float* %xy330, align 4, !tbaa !68
  %cmp331 = fcmp ole float %205, 0.000000e+00
  br i1 %cmp331, label %land.lhs.true.333, label %if.else.338

land.lhs.true.333:                                ; preds = %lor.lhs.false.329
  %yx334 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 2
  %206 = load float, float* %yx334, align 4, !tbaa !69
  %cmp335 = fcmp oge float %206, 0.000000e+00
  br i1 %cmp335, label %if.then.337, label %if.else.338

if.then.337:                                      ; preds = %land.lhs.true.333, %land.lhs.true.325
  store i32 1, i32* %supported_angle, align 4, !tbaa !5
  br label %if.end.348

if.else.338:                                      ; preds = %land.lhs.true.333, %lor.lhs.false.329
  %207 = load i32, i32* %can_reverse, align 4, !tbaa !5
  %tobool339 = icmp ne i32 %207, 0
  br i1 %tobool339, label %if.then.340, label %if.end.347

if.then.340:                                      ; preds = %if.else.338
  %xy341 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 1
  %208 = load float, float* %xy341, align 4, !tbaa !68
  %mul342 = fmul float %208, -1.000000e+00
  store float %mul342, float* %xy341, align 4, !tbaa !68
  %209 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %height = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %209, i32 0, i32 12
  %210 = load i32, i32* %height, align 4, !tbaa !121
  %conv343 = sitofp i32 %210 to float
  %xy344 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 1
  %211 = load float, float* %xy344, align 4, !tbaa !68
  %mul345 = fmul float %conv343, %211
  %ty = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 5
  %212 = load float, float* %ty, align 4, !tbaa !72
  %sub346 = fsub float %212, %mul345
  store float %sub346, float* %ty, align 4, !tbaa !72
  store i32 1, i32* %supported_angle, align 4, !tbaa !5
  store i32 1, i32* @reverse_image, align 4, !tbaa !5
  br label %if.end.347

if.end.347:                                       ; preds = %if.then.340, %if.else.338
  br label %if.end.348

if.end.348:                                       ; preds = %if.end.347, %if.then.337
  br label %if.end.349

if.end.349:                                       ; preds = %if.end.348, %land.lhs.true.317, %if.else.313
  br label %if.end.350

if.end.350:                                       ; preds = %if.end.349, %if.end.312
  br label %sw.epilog

sw.bb.351:                                        ; preds = %if.end.204
  %xy352 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 1
  %213 = load float, float* %xy352, align 4, !tbaa !68
  %cmp353 = fcmp oeq float %213, 0.000000e+00
  br i1 %cmp353, label %land.lhs.true.355, label %lor.lhs.false.359

land.lhs.true.355:                                ; preds = %sw.bb.351
  %yx356 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 2
  %214 = load float, float* %yx356, align 4, !tbaa !69
  %cmp357 = fcmp oeq float %214, 0.000000e+00
  br i1 %cmp357, label %if.then.367, label %lor.lhs.false.359

lor.lhs.false.359:                                ; preds = %land.lhs.true.355, %sw.bb.351
  %xx360 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 0
  %215 = load float, float* %xx360, align 4, !tbaa !67
  %cmp361 = fcmp oeq float %215, 0.000000e+00
  br i1 %cmp361, label %land.lhs.true.363, label %if.end.368

land.lhs.true.363:                                ; preds = %lor.lhs.false.359
  %yy364 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 3
  %216 = load float, float* %yy364, align 4, !tbaa !70
  %cmp365 = fcmp oeq float %216, 0.000000e+00
  br i1 %cmp365, label %if.then.367, label %if.end.368

if.then.367:                                      ; preds = %land.lhs.true.363, %land.lhs.true.355
  store i32 1, i32* %supported_angle, align 4, !tbaa !5
  br label %if.end.368

if.end.368:                                       ; preds = %if.then.367, %land.lhs.true.363, %lor.lhs.false.359
  br label %sw.epilog

sw.bb.369:                                        ; preds = %if.end.204
  store i32 1, i32* %supported_angle, align 4, !tbaa !5
  br label %sw.epilog

sw.bb.370:                                        ; preds = %if.end.204
  br label %sw.default

sw.default:                                       ; preds = %if.end.204, %sw.bb.370
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.369, %if.end.368, %if.end.350, %if.end.274, %if.end.243
  br label %if.end.371

if.end.371:                                       ; preds = %sw.epilog, %if.end.9
  %217 = load i32, i32* %ecode, align 4, !tbaa !5
  %tobool372 = icmp ne i32 %217, 0
  br i1 %tobool372, label %if.end.405, label %land.lhs.true.373

land.lhs.true.373:                                ; preds = %if.end.371
  %218 = load i32, i32* %supported_angle, align 4, !tbaa !5
  %tobool374 = icmp ne i32 %218, 0
  br i1 %tobool374, label %if.then.375, label %if.end.405

if.then.375:                                      ; preds = %land.lhs.true.373
  %219 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %prect.addr, align 8, !tbaa !1
  %tobool376 = icmp ne %struct.gs_int_rect_s* %219, null
  br i1 %tobool376, label %if.end.404, label %land.lhs.true.377

land.lhs.true.377:                                ; preds = %if.then.375
  %220 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %num_planes378 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %220, i32 0, i32 6
  %221 = load i32, i32* %num_planes378, align 4, !tbaa !109
  %cmp379 = icmp eq i32 %221, 1
  br i1 %cmp379, label %if.then.400, label %lor.lhs.false.381

lor.lhs.false.381:                                ; preds = %land.lhs.true.377
  %222 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %num_planes382 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %222, i32 0, i32 6
  %223 = load i32, i32* %num_planes382, align 4, !tbaa !109
  %cmp383 = icmp eq i32 %223, 3
  br i1 %cmp383, label %land.lhs.true.385, label %if.end.404

land.lhs.true.385:                                ; preds = %lor.lhs.false.381
  %224 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %plane_depths386 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %224, i32 0, i32 7
  %arrayidx387 = getelementptr inbounds [65 x i32], [65 x i32]* %plane_depths386, i32 0, i64 0
  %225 = load i32, i32* %arrayidx387, align 4, !tbaa !5
  %cmp388 = icmp eq i32 %225, 8
  br i1 %cmp388, label %land.lhs.true.390, label %if.end.404

land.lhs.true.390:                                ; preds = %land.lhs.true.385
  %226 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %plane_depths391 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %226, i32 0, i32 7
  %arrayidx392 = getelementptr inbounds [65 x i32], [65 x i32]* %plane_depths391, i32 0, i64 1
  %227 = load i32, i32* %arrayidx392, align 4, !tbaa !5
  %cmp393 = icmp eq i32 %227, 8
  br i1 %cmp393, label %land.lhs.true.395, label %if.end.404

land.lhs.true.395:                                ; preds = %land.lhs.true.390
  %228 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %plane_depths396 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %228, i32 0, i32 7
  %arrayidx397 = getelementptr inbounds [65 x i32], [65 x i32]* %plane_depths396, i32 0, i64 2
  %229 = load i32, i32* %arrayidx397, align 4, !tbaa !5
  %cmp398 = icmp eq i32 %229, 8
  br i1 %cmp398, label %if.then.400, label %if.end.404

if.then.400:                                      ; preds = %land.lhs.true.395, %land.lhs.true.377
  %230 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpStartDrawImage = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %230, i32 0, i32 58
  %231 = load i32 (i32, i32, i32, i32, i32, i32, i32)*, i32 (i32, i32, i32, i32, i32, i32, i32)** %opvpStartDrawImage, align 8, !tbaa !122
  %tobool401 = icmp ne i32 (i32, i32, i32, i32, i32, i32, i32)* %231, null
  br i1 %tobool401, label %if.then.402, label %if.end.403

if.then.402:                                      ; preds = %if.then.400
  store i32 1, i32* %draw_image, align 4, !tbaa !5
  br label %if.end.403

if.end.403:                                       ; preds = %if.then.402, %if.then.400
  br label %if.end.404

if.end.404:                                       ; preds = %if.end.403, %land.lhs.true.395, %land.lhs.true.390, %land.lhs.true.385, %lor.lhs.false.381, %if.then.375
  br label %if.end.405

if.end.405:                                       ; preds = %if.end.404, %land.lhs.true.373, %if.end.371
  br label %if.end.406

if.end.406:                                       ; preds = %if.end.405, %if.end
  %232 = load i32, i32* %draw_image, align 4, !tbaa !5
  %tobool407 = icmp ne i32 %232, 0
  br i1 %tobool407, label %if.then.408, label %if.end.580

if.then.408:                                      ; preds = %if.end.406
  %233 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %234 = bitcast %struct.gdev_vector_image_enum_s* %233 to %struct.gx_image_enum_common_s*
  %235 = load %struct.gx_image_enum_common_s**, %struct.gx_image_enum_common_s*** %pinfo.addr, align 8, !tbaa !1
  store %struct.gx_image_enum_common_s* %234, %struct.gx_image_enum_common_s** %235, align 8, !tbaa !1
  %236 = load i32, i32* %ecode, align 4, !tbaa !5
  %tobool409 = icmp ne i32 %236, 0
  br i1 %tobool409, label %if.end.454, label %if.then.410

if.then.410:                                      ; preds = %if.then.408
  %237 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %ImageMask411 = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %237, i32 0, i32 10
  %238 = load i32, i32* %ImageMask411, align 4, !tbaa !110
  %tobool412 = icmp ne i32 %238, 0
  br i1 %tobool412, label %if.end.453, label %if.then.413

if.then.413:                                      ; preds = %if.then.410
  %239 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetPaintMode = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %239, i32 0, i32 38
  %240 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetPaintMode, align 8, !tbaa !96
  %tobool414 = icmp ne i32 (i32, i32)* %240, null
  br i1 %tobool414, label %if.then.415, label %if.end.418

if.then.415:                                      ; preds = %if.then.413
  %241 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetPaintMode416 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %241, i32 0, i32 38
  %242 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetPaintMode416, align 8, !tbaa !96
  %243 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call417 = call i32 %242(i32 %243, i32 0) #7
  store i32 1, i32* @change_paint_mode, align 4, !tbaa !5
  br label %if.end.418

if.end.418:                                       ; preds = %if.then.415, %if.then.413
  %244 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetColorSpace = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %244, i32 0, i32 18
  %245 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetColorSpace, align 8, !tbaa !123
  %cmp419 = icmp ne i32 (i32, i32)* %245, null
  br i1 %cmp419, label %if.then.421, label %if.end.452

if.then.421:                                      ; preds = %if.end.418
  %246 = bitcast i32* %ncspace to i8*
  call void @llvm.lifetime.start(i64 4, i8* %246) #2
  %247 = load i32, i32* @colorSpace, align 4, !tbaa !64
  store i32 %247, i32* @savedColorSpace, align 4, !tbaa !64
  %248 = load i32, i32* %bits_per_pixel, align 4, !tbaa !5
  switch i32 %248, label %sw.default.440 [
    i32 1, label %sw.bb.422
    i32 8, label %sw.bb.428
    i32 24, label %sw.bb.434
  ]

sw.bb.422:                                        ; preds = %if.then.421
  store i32 1, i32* %ncspace, align 4, !tbaa !64
  store i32 8, i32* %bits_per_pixel, align 4, !tbaa !5
  %249 = load i32, i32* %ncspace, align 4, !tbaa !64
  %idxprom423 = zext i32 %249 to i64
  %arrayidx424 = getelementptr inbounds [8 x i8], [8 x i8]* @cspace_available, i32 0, i64 %idxprom423
  %250 = load i8, i8* %arrayidx424, align 1, !tbaa !64
  %tobool425 = icmp ne i8 %250, 0
  br i1 %tobool425, label %if.end.427, label %if.then.426

if.then.426:                                      ; preds = %sw.bb.422
  store i32 6, i32* %ncspace, align 4, !tbaa !64
  store i32 24, i32* %bits_per_pixel, align 4, !tbaa !5
  br label %if.end.427

if.end.427:                                       ; preds = %if.then.426, %sw.bb.422
  br label %sw.epilog.441

sw.bb.428:                                        ; preds = %if.then.421
  store i32 1, i32* %ncspace, align 4, !tbaa !64
  %251 = load i32, i32* %ncspace, align 4, !tbaa !64
  %idxprom429 = zext i32 %251 to i64
  %arrayidx430 = getelementptr inbounds [8 x i8], [8 x i8]* @cspace_available, i32 0, i64 %idxprom429
  %252 = load i8, i8* %arrayidx430, align 1, !tbaa !64
  %tobool431 = icmp ne i8 %252, 0
  br i1 %tobool431, label %if.end.433, label %if.then.432

if.then.432:                                      ; preds = %sw.bb.428
  store i32 6, i32* %ncspace, align 4, !tbaa !64
  store i32 24, i32* %bits_per_pixel, align 4, !tbaa !5
  br label %if.end.433

if.end.433:                                       ; preds = %if.then.432, %sw.bb.428
  br label %sw.epilog.441

sw.bb.434:                                        ; preds = %if.then.421
  store i32 4, i32* %ncspace, align 4, !tbaa !64
  %253 = load i32, i32* %ncspace, align 4, !tbaa !64
  %idxprom435 = zext i32 %253 to i64
  %arrayidx436 = getelementptr inbounds [8 x i8], [8 x i8]* @cspace_available, i32 0, i64 %idxprom435
  %254 = load i8, i8* %arrayidx436, align 1, !tbaa !64
  %tobool437 = icmp ne i8 %254, 0
  br i1 %tobool437, label %if.end.439, label %if.then.438

if.then.438:                                      ; preds = %sw.bb.434
  store i32 6, i32* %ncspace, align 4, !tbaa !64
  br label %if.end.439

if.end.439:                                       ; preds = %if.then.438, %sw.bb.434
  br label %sw.epilog.441

sw.default.440:                                   ; preds = %if.then.421
  store i32 -1, i32* %r, align 4, !tbaa !5
  store i32 10, i32* %cleanup.dest.slot
  br label %cleanup

sw.epilog.441:                                    ; preds = %if.end.439, %if.end.433, %if.end.427
  %255 = load i32, i32* %ncspace, align 4, !tbaa !64
  %256 = load i32, i32* @colorSpace, align 4, !tbaa !64
  %cmp442 = icmp ne i32 %255, %256
  br i1 %cmp442, label %if.then.444, label %if.end.451

if.then.444:                                      ; preds = %sw.epilog.441
  %257 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetColorSpace445 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %257, i32 0, i32 18
  %258 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetColorSpace445, align 8, !tbaa !123
  %259 = load i32, i32* @printerContext, align 4, !tbaa !5
  %260 = load i32, i32* %ncspace, align 4, !tbaa !64
  %call446 = call i32 %258(i32 %259, i32 %260) #7
  %cmp447 = icmp ne i32 %call446, 0
  br i1 %cmp447, label %if.then.449, label %if.end.450

if.then.449:                                      ; preds = %if.then.444
  store i32 -1, i32* %r, align 4, !tbaa !5
  store i32 10, i32* %cleanup.dest.slot
  br label %cleanup

if.end.450:                                       ; preds = %if.then.444
  %261 = load i32, i32* %ncspace, align 4, !tbaa !64
  store i32 %261, i32* @colorSpace, align 4, !tbaa !64
  store i32 1, i32* @change_cspace, align 4, !tbaa !5
  br label %if.end.451

if.end.451:                                       ; preds = %if.end.450, %sw.epilog.441
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.then.449, %sw.default.440, %if.end.451
  %262 = bitcast i32* %ncspace to i8*
  call void @llvm.lifetime.end(i64 4, i8* %262) #2
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.582 [
    i32 0, label %cleanup.cont
    i32 10, label %fallthrough
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.452

if.end.452:                                       ; preds = %cleanup.cont, %if.end.418
  br label %if.end.453

if.end.453:                                       ; preds = %if.end.452, %if.then.410
  br label %if.end.454

if.end.454:                                       ; preds = %if.end.453, %if.then.408
  %263 = load i32, i32* %ecode, align 4, !tbaa !5
  %tobool455 = icmp ne i32 %263, 0
  br i1 %tobool455, label %if.end.487, label %if.then.456

if.then.456:                                      ; preds = %if.end.454
  %264 = load i32, i32* %supported_angle, align 4, !tbaa !5
  %tobool457 = icmp ne i32 %264, 0
  br i1 %tobool457, label %if.then.458, label %if.end.464

if.then.458:                                      ; preds = %if.then.456
  %265 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %tx459 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 4
  %266 = load float, float* %tx459, align 4, !tbaa !71
  %conv460 = fpext float %266 to double
  %ty461 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 5
  %267 = load float, float* %ty461, align 4, !tbaa !72
  %conv462 = fpext float %267 to double
  %call463 = call i32 @opvp_moveto(%struct.gx_device_vector_s* %265, double 0.000000e+00, double 0.000000e+00, double %conv460, double %conv462, i32 0) #7
  br label %if.end.464

if.end.464:                                       ; preds = %if.then.458, %if.then.456
  %268 = load i32, i32* %supported_angle, align 4, !tbaa !5
  %tobool465 = icmp ne i32 %268, 0
  br i1 %tobool465, label %land.lhs.true.466, label %if.end.486

land.lhs.true.466:                                ; preds = %if.end.464
  %269 = load i32, i32* @FastImageMode, align 4, !tbaa !64
  %cmp467 = icmp ne i32 %269, 1
  br i1 %cmp467, label %if.then.469, label %if.end.486

if.then.469:                                      ; preds = %land.lhs.true.466
  %xx470 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 0
  %270 = load float, float* %xx470, align 4, !tbaa !67
  %a = getelementptr inbounds %struct._opvp_ctm, %struct._opvp_ctm* %ctm, i32 0, i32 0
  store float %270, float* %a, align 4, !tbaa !75
  %xy471 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 1
  %271 = load float, float* %xy471, align 4, !tbaa !68
  %b = getelementptr inbounds %struct._opvp_ctm, %struct._opvp_ctm* %ctm, i32 0, i32 1
  store float %271, float* %b, align 4, !tbaa !77
  %yx472 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 2
  %272 = load float, float* %yx472, align 4, !tbaa !69
  %c = getelementptr inbounds %struct._opvp_ctm, %struct._opvp_ctm* %ctm, i32 0, i32 2
  store float %272, float* %c, align 4, !tbaa !78
  %yy473 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 3
  %273 = load float, float* %yy473, align 4, !tbaa !70
  %d = getelementptr inbounds %struct._opvp_ctm, %struct._opvp_ctm* %ctm, i32 0, i32 3
  store float %273, float* %d, align 4, !tbaa !79
  %tx474 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 4
  %274 = load float, float* %tx474, align 4, !tbaa !71
  %e = getelementptr inbounds %struct._opvp_ctm, %struct._opvp_ctm* %ctm, i32 0, i32 4
  store float %274, float* %e, align 4, !tbaa !80
  %ty475 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %mtx, i32 0, i32 5
  %275 = load float, float* %ty475, align 4, !tbaa !72
  %f = getelementptr inbounds %struct._opvp_ctm, %struct._opvp_ctm* %ctm, i32 0, i32 5
  store float %275, float* %f, align 4, !tbaa !81
  %276 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetCTM = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %276, i32 0, i32 12
  %277 = load i32 (i32, %struct._opvp_ctm*)*, i32 (i32, %struct._opvp_ctm*)** %opvpSetCTM, align 8, !tbaa !82
  %tobool476 = icmp ne i32 (i32, %struct._opvp_ctm*)* %277, null
  br i1 %tobool476, label %if.then.477, label %if.else.480

if.then.477:                                      ; preds = %if.then.469
  %278 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetCTM478 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %278, i32 0, i32 12
  %279 = load i32 (i32, %struct._opvp_ctm*)*, i32 (i32, %struct._opvp_ctm*)** %opvpSetCTM478, align 8, !tbaa !82
  %280 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call479 = call i32 %279(i32 %280, %struct._opvp_ctm* %ctm) #7
  store i32 %call479, i32* %r, align 4, !tbaa !5
  br label %if.end.481

if.else.480:                                      ; preds = %if.then.469
  store i32 -1, i32* %r, align 4, !tbaa !5
  br label %if.end.481

if.end.481:                                       ; preds = %if.else.480, %if.then.477
  %281 = load i32, i32* %r, align 4, !tbaa !5
  %cmp482 = icmp ne i32 %281, 0
  br i1 %cmp482, label %if.then.484, label %if.end.485

if.then.484:                                      ; preds = %if.end.481
  %282 = load i32, i32* %r, align 4, !tbaa !5
  store i32 %282, i32* %ecode, align 4, !tbaa !5
  br label %if.end.485

if.end.485:                                       ; preds = %if.then.484, %if.end.481
  br label %if.end.486

if.end.486:                                       ; preds = %if.end.485, %land.lhs.true.466, %if.end.464
  br label %if.end.487

if.end.487:                                       ; preds = %if.end.486, %if.end.454
  %283 = load i32, i32* %ecode, align 4, !tbaa !5
  %tobool488 = icmp ne i32 %283, 0
  br i1 %tobool488, label %if.end.576, label %if.then.489

if.then.489:                                      ; preds = %if.end.487
  %284 = bitcast i32* %dw to i8*
  call void @llvm.lifetime.start(i64 4, i8* %284) #2
  %285 = bitcast i32* %dh to i8*
  call void @llvm.lifetime.start(i64 4, i8* %285) #2
  %arrayidx490 = getelementptr inbounds [2 x float], [2 x float]* %mag, i32 0, i64 0
  %286 = load float, float* %arrayidx490, align 4, !tbaa !10
  %cmp491 = fcmp une float %286, 1.000000e+00
  br i1 %cmp491, label %if.then.493, label %if.else.502

if.then.493:                                      ; preds = %if.then.489
  %287 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %width494 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %287, i32 0, i32 11
  %288 = load i32, i32* %width494, align 4, !tbaa !120
  %conv495 = sitofp i32 %288 to float
  %arrayidx496 = getelementptr inbounds [2 x float], [2 x float]* %mag, i32 0, i64 0
  %289 = load float, float* %arrayidx496, align 4, !tbaa !10
  %mul497 = fmul float %conv495, %289
  %conv498 = fpext float %mul497 to double
  %add499 = fadd double %conv498, 5.000000e-01
  %call500 = call double @floor(double %add499) #10
  %conv501 = fptosi double %call500 to i32
  store i32 %conv501, i32* %dw, align 4, !tbaa !5
  br label %if.end.504

if.else.502:                                      ; preds = %if.then.489
  %290 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %width503 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %290, i32 0, i32 11
  %291 = load i32, i32* %width503, align 4, !tbaa !120
  store i32 %291, i32* %dw, align 4, !tbaa !5
  br label %if.end.504

if.end.504:                                       ; preds = %if.else.502, %if.then.493
  %arrayidx505 = getelementptr inbounds [2 x float], [2 x float]* %mag, i32 0, i64 1
  %292 = load float, float* %arrayidx505, align 4, !tbaa !10
  %cmp506 = fcmp une float %292, 1.000000e+00
  br i1 %cmp506, label %if.then.508, label %if.else.517

if.then.508:                                      ; preds = %if.end.504
  %293 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %height509 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %293, i32 0, i32 12
  %294 = load i32, i32* %height509, align 4, !tbaa !121
  %conv510 = sitofp i32 %294 to float
  %arrayidx511 = getelementptr inbounds [2 x float], [2 x float]* %mag, i32 0, i64 1
  %295 = load float, float* %arrayidx511, align 4, !tbaa !10
  %mul512 = fmul float %conv510, %295
  %conv513 = fpext float %mul512 to double
  %add514 = fadd double %conv513, 5.000000e-01
  %call515 = call double @floor(double %add514) #10
  %conv516 = fptosi double %call515 to i32
  store i32 %conv516, i32* %dh, align 4, !tbaa !5
  br label %if.end.519

if.else.517:                                      ; preds = %if.end.504
  %296 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %height518 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %296, i32 0, i32 12
  %297 = load i32, i32* %height518, align 4, !tbaa !121
  store i32 %297, i32* %dh, align 4, !tbaa !5
  br label %if.end.519

if.end.519:                                       ; preds = %if.else.517, %if.then.508
  %298 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpStartDrawImage520 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %298, i32 0, i32 58
  %299 = load i32 (i32, i32, i32, i32, i32, i32, i32)*, i32 (i32, i32, i32, i32, i32, i32, i32)** %opvpStartDrawImage520, align 8, !tbaa !122
  %tobool521 = icmp ne i32 (i32, i32, i32, i32, i32, i32, i32)* %299, null
  br i1 %tobool521, label %if.then.522, label %if.end.543

if.then.522:                                      ; preds = %if.end.519
  %300 = bitcast i32* %adj_raster to i8*
  call void @llvm.lifetime.start(i64 4, i8* %300) #2
  %301 = load i32, i32* %bits_per_pixel, align 4, !tbaa !5
  %302 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %width523 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %302, i32 0, i32 11
  %303 = load i32, i32* %width523, align 4, !tbaa !120
  %mul524 = mul nsw i32 %301, %303
  store i32 %mul524, i32* %adj_raster, align 4, !tbaa !5
  %304 = load i32, i32* %adj_raster, align 4, !tbaa !5
  %add525 = add nsw i32 %304, 31
  %shr526 = ashr i32 %add525, 5
  %shl527 = shl i32 %shr526, 2
  store i32 %shl527, i32* %adj_raster, align 4, !tbaa !5
  %305 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpStartDrawImage528 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %305, i32 0, i32 58
  %306 = load i32 (i32, i32, i32, i32, i32, i32, i32)*, i32 (i32, i32, i32, i32, i32, i32, i32)** %opvpStartDrawImage528, align 8, !tbaa !122
  %307 = load i32, i32* @printerContext, align 4, !tbaa !5
  %308 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %width529 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %308, i32 0, i32 11
  %309 = load i32, i32* %width529, align 4, !tbaa !120
  %310 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %height530 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %310, i32 0, i32 12
  %311 = load i32, i32* %height530, align 4, !tbaa !121
  %312 = load i32, i32* %adj_raster, align 4, !tbaa !5
  %313 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %ImageMask531 = getelementptr inbounds %struct.gs_image1_s, %struct.gs_image1_s* %313, i32 0, i32 10
  %314 = load i32, i32* %ImageMask531, align 4, !tbaa !110
  %tobool532 = icmp ne i32 %314, 0
  %cond = select i1 %tobool532, i32 1, i32 0
  %315 = load i32, i32* %dw, align 4, !tbaa !5
  %316 = load i32, i32* %dh, align 4, !tbaa !5
  %call533 = call i32 %306(i32 %307, i32 %309, i32 %311, i32 %312, i32 %cond, i32 %315, i32 %316) #7
  store i32 %call533, i32* %r, align 4, !tbaa !5
  %317 = load i32, i32* %r, align 4, !tbaa !5
  %cmp534 = icmp ne i32 %317, 0
  br i1 %cmp534, label %if.then.536, label %if.end.542

if.then.536:                                      ; preds = %if.then.522
  %318 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpEndDrawImage = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %318, i32 0, i32 60
  %319 = load i32 (i32)*, i32 (i32)** %opvpEndDrawImage, align 8, !tbaa !124
  %tobool537 = icmp ne i32 (i32)* %319, null
  br i1 %tobool537, label %if.then.538, label %if.end.541

if.then.538:                                      ; preds = %if.then.536
  %320 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpEndDrawImage539 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %320, i32 0, i32 60
  %321 = load i32 (i32)*, i32 (i32)** %opvpEndDrawImage539, align 8, !tbaa !124
  %322 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call540 = call i32 %321(i32 %322) #7
  br label %if.end.541

if.end.541:                                       ; preds = %if.then.538, %if.then.536
  br label %if.end.542

if.end.542:                                       ; preds = %if.end.541, %if.then.522
  %323 = bitcast i32* %adj_raster to i8*
  call void @llvm.lifetime.end(i64 4, i8* %323) #2
  br label %if.end.543

if.end.543:                                       ; preds = %if.end.542, %if.end.519
  br label %fallthrough

fallthrough:                                      ; preds = %if.end.543, %cleanup
  %324 = load i32, i32* %r, align 4, !tbaa !5
  %cmp544 = icmp ne i32 %324, 0
  br i1 %cmp544, label %if.then.546, label %if.end.571

if.then.546:                                      ; preds = %fallthrough
  %325 = load i32, i32* @change_paint_mode, align 4, !tbaa !5
  %tobool547 = icmp ne i32 %325, 0
  br i1 %tobool547, label %if.then.548, label %if.end.555

if.then.548:                                      ; preds = %if.then.546
  %326 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetPaintMode549 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %326, i32 0, i32 38
  %327 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetPaintMode549, align 8, !tbaa !96
  %tobool550 = icmp ne i32 (i32, i32)* %327, null
  br i1 %tobool550, label %if.then.551, label %if.end.554

if.then.551:                                      ; preds = %if.then.548
  %328 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetPaintMode552 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %328, i32 0, i32 38
  %329 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetPaintMode552, align 8, !tbaa !96
  %330 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call553 = call i32 %329(i32 %330, i32 1) #7
  br label %if.end.554

if.end.554:                                       ; preds = %if.then.551, %if.then.548
  store i32 0, i32* @change_paint_mode, align 4, !tbaa !5
  br label %if.end.555

if.end.555:                                       ; preds = %if.end.554, %if.then.546
  %331 = load i32, i32* @change_cspace, align 4, !tbaa !5
  %tobool556 = icmp ne i32 %331, 0
  br i1 %tobool556, label %if.then.557, label %if.end.564

if.then.557:                                      ; preds = %if.end.555
  %332 = load i32, i32* @savedColorSpace, align 4, !tbaa !64
  store i32 %332, i32* @colorSpace, align 4, !tbaa !64
  %333 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetColorSpace558 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %333, i32 0, i32 18
  %334 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetColorSpace558, align 8, !tbaa !123
  %tobool559 = icmp ne i32 (i32, i32)* %334, null
  br i1 %tobool559, label %if.then.560, label %if.end.563

if.then.560:                                      ; preds = %if.then.557
  %335 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetColorSpace561 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %335, i32 0, i32 18
  %336 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetColorSpace561, align 8, !tbaa !123
  %337 = load i32, i32* @printerContext, align 4, !tbaa !5
  %338 = load i32, i32* @colorSpace, align 4, !tbaa !64
  %call562 = call i32 %336(i32 %337, i32 %338) #7
  br label %if.end.563

if.end.563:                                       ; preds = %if.then.560, %if.then.557
  store i32 0, i32* @change_cspace, align 4, !tbaa !5
  br label %if.end.564

if.end.564:                                       ; preds = %if.end.563, %if.end.555
  %339 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpResetCTM = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %339, i32 0, i32 11
  %340 = load i32 (i32)*, i32 (i32)** %opvpResetCTM, align 8, !tbaa !74
  %tobool565 = icmp ne i32 (i32)* %340, null
  br i1 %tobool565, label %if.then.566, label %if.end.569

if.then.566:                                      ; preds = %if.end.564
  %341 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpResetCTM567 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %341, i32 0, i32 11
  %342 = load i32 (i32)*, i32 (i32)** %opvpResetCTM567, align 8, !tbaa !74
  %343 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call568 = call i32 %342(i32 %343) #7
  br label %if.end.569

if.end.569:                                       ; preds = %if.then.566, %if.end.564
  %344 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %345 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %346 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %347 = load i32, i32* %format.addr, align 4, !tbaa !64
  %348 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %prect.addr, align 8, !tbaa !1
  %349 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %350 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %351 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %352 = load %struct.gx_image_enum_common_s**, %struct.gx_image_enum_common_s*** %pinfo.addr, align 8, !tbaa !1
  %call570 = call i32 @gx_default_begin_image(%struct.gx_device_s* %344, %struct.gs_imager_state_s* %345, %struct.gs_image1_s* %346, i32 %347, %struct.gs_int_rect_s* %348, %struct.gx_device_color_s* %349, %struct.gx_clip_path_s* %350, %struct.gs_memory_s* %351, %struct.gx_image_enum_common_s** %352) #7
  store i32 %call570, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.572

if.end.571:                                       ; preds = %fallthrough
  store i32 0, i32* %cleanup.dest.slot
  br label %cleanup.572

cleanup.572:                                      ; preds = %if.end.571, %if.end.569
  %353 = bitcast i32* %dh to i8*
  call void @llvm.lifetime.end(i64 4, i8* %353) #2
  %354 = bitcast i32* %dw to i8*
  call void @llvm.lifetime.end(i64 4, i8* %354) #2
  %cleanup.dest.574 = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest.574, label %cleanup.582 [
    i32 0, label %cleanup.cont.575
  ]

cleanup.cont.575:                                 ; preds = %cleanup.572
  br label %if.end.576

if.end.576:                                       ; preds = %cleanup.cont.575, %if.end.487
  %355 = load i32, i32* %ecode, align 4, !tbaa !5
  %tobool577 = icmp ne i32 %355, 0
  br i1 %tobool577, label %if.end.579, label %if.then.578

if.then.578:                                      ; preds = %if.end.576
  store i32 1, i32* @begin_image, align 4, !tbaa !5
  br label %if.end.579

if.end.579:                                       ; preds = %if.then.578, %if.end.576
  %356 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %356, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.582

if.end.580:                                       ; preds = %if.end.406
  %357 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %358 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  %359 = load %struct.gs_image1_s*, %struct.gs_image1_s** %pim.addr, align 8, !tbaa !1
  %360 = load i32, i32* %format.addr, align 4, !tbaa !64
  %361 = load %struct.gs_int_rect_s*, %struct.gs_int_rect_s** %prect.addr, align 8, !tbaa !1
  %362 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdcolor.addr, align 8, !tbaa !1
  %363 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %364 = load %struct.gs_memory_s*, %struct.gs_memory_s** %mem.addr, align 8, !tbaa !1
  %365 = load %struct.gx_image_enum_common_s**, %struct.gx_image_enum_common_s*** %pinfo.addr, align 8, !tbaa !1
  %call581 = call i32 @gx_default_begin_image(%struct.gx_device_s* %357, %struct.gs_imager_state_s* %358, %struct.gs_image1_s* %359, i32 %360, %struct.gs_int_rect_s* %361, %struct.gx_device_color_s* %362, %struct.gx_clip_path_s* %363, %struct.gs_memory_s* %364, %struct.gx_image_enum_common_s** %365) #7
  store i32 %call581, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.582

cleanup.582:                                      ; preds = %if.end.580, %if.end.579, %cleanup.572, %cleanup, %if.else.193, %if.then.22, %if.then
  %366 = bitcast %struct.gs_color_space_s** %pcs to i8*
  call void @llvm.lifetime.end(i64 8, i8* %366) #2
  %367 = bitcast [2 x float]* %mag to i8*
  call void @llvm.lifetime.end(i64 8, i8* %367) #2
  %368 = bitcast i32* %p to i8*
  call void @llvm.lifetime.end(i64 4, i8* %368) #2
  %369 = bitcast i32* %can_reverse to i8*
  call void @llvm.lifetime.end(i64 4, i8* %369) #2
  %370 = bitcast i32* %bits_per_pixel to i8*
  call void @llvm.lifetime.end(i64 4, i8* %370) #2
  %371 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %371) #2
  %372 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %372) #2
  %373 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %373) #2
  %374 = bitcast i32* %supported_angle to i8*
  call void @llvm.lifetime.end(i64 4, i8* %374) #2
  %375 = bitcast i32* %draw_image to i8*
  call void @llvm.lifetime.end(i64 4, i8* %375) #2
  %376 = bitcast %struct._opvp_ctm* %ctm to i8*
  call void @llvm.lifetime.end(i64 24, i8* %376) #2
  %377 = bitcast %struct.gs_matrix_s* %mtx to i8*
  call void @llvm.lifetime.end(i64 24, i8* %377) #2
  %378 = bitcast %struct.gdev_vector_image_enum_s** %vinfo to i8*
  call void @llvm.lifetime.end(i64 8, i8* %378) #2
  %379 = bitcast %struct.gx_device_vector_s** %vdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %379) #2
  %380 = load i32, i32* %retval
  ret i32 %380
}

; Function Attrs: nounwind uwtable
define internal i32 @oprp_print_page(%struct.gx_device_printer_s* %pdev, %struct._IO_FILE* %prn_stream) #0 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.gx_device_printer_s*, align 8
  %prn_stream.addr = alloca %struct._IO_FILE*, align 8
  %ecode = alloca i32, align 4
  %code = alloca i32, align 4
  %r = alloca i32, align 4
  %raster_size = alloca i32, align 4
  %buff_size = alloca i32, align 4
  %buff = alloca i8*, align 8
  %line = alloca i32, align 4
  %scan_lines = alloca i32, align 4
  %data = alloca i8*, align 8
  %rasterWidth = alloca i32, align 4
  %start_page = alloca i32, align 4
  %start_raster = alloca i32, align 4
  %i = alloca i32, align 4
  %check = alloca i8, align 1
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_printer_s* %pdev, %struct.gx_device_printer_s** %pdev.addr, align 8, !tbaa !1
  store %struct._IO_FILE* %prn_stream, %struct._IO_FILE** %prn_stream.addr, align 8, !tbaa !1
  %0 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %1 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #2
  store i32 -1, i32* %code, align 4, !tbaa !5
  %2 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #2
  store i32 -1, i32* %r, align 4, !tbaa !5
  %3 = bitcast i32* %raster_size to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  %4 = bitcast i32* %buff_size to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  %5 = bitcast i8** %buff to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #2
  store i8* null, i8** %buff, align 8, !tbaa !1
  %6 = bitcast i32* %line to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #2
  %7 = bitcast i32* %scan_lines to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #2
  %8 = bitcast i8** %data to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #2
  %9 = bitcast i32* %rasterWidth to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #2
  %10 = bitcast i32* %start_page to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #2
  store i32 0, i32* %start_page, align 4, !tbaa !5
  %11 = bitcast i32* %start_raster to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #2
  store i32 0, i32* %start_raster, align 4, !tbaa !5
  %12 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #2
  call void @llvm.lifetime.start(i64 1, i8* %check) #2
  %13 = load %struct.gx_device_printer_s*, %struct.gx_device_printer_s** %pdev.addr, align 8, !tbaa !1
  %14 = bitcast %struct.gx_device_printer_s* %13 to %struct.gx_device_s*
  %call = call i32 @gx_device_raster(%struct.gx_device_s* %14, i32 0) #7
  store i32 %call, i32* %raster_size, align 4, !tbaa !5
  %15 = load i32, i32* %raster_size, align 4, !tbaa !5
  %add = add nsw i32 %15, 3
  %shr = ashr i32 %add, 2
  %shl = shl i32 %shr, 2
  store i32 %shl, i32* %buff_size, align 4, !tbaa !5
  %16 = load %struct.gx_device_printer_s*, %struct.gx_device_printer_s** %pdev.addr, align 8, !tbaa !1
  %17 = bitcast %struct.gx_device_printer_s* %16 to %struct.gx_device_s*
  %call1 = call i32 @gdev_prn_print_scan_lines(%struct.gx_device_s* %17) #7
  store i32 %call1, i32* %scan_lines, align 4, !tbaa !5
  %18 = load %struct.gx_device_printer_s*, %struct.gx_device_printer_s** %pdev.addr, align 8, !tbaa !1
  %width = getelementptr inbounds %struct.gx_device_printer_s, %struct.gx_device_printer_s* %18, i32 0, i32 13
  %19 = load i32, i32* %width, align 4, !tbaa !125
  store i32 %19, i32* %rasterWidth, align 4, !tbaa !5
  %20 = load i32, i32* %buff_size, align 4, !tbaa !5
  %conv = sext i32 %20 to i64
  %call2 = call noalias i8* @calloc(i64 1, i64 %conv) #8
  store i8* %call2, i8** %buff, align 8, !tbaa !1
  %21 = load i8*, i8** %buff, align 8, !tbaa !1
  %tobool = icmp ne i8* %21, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %22 = load i32, i32* %ecode, align 4, !tbaa !5
  %tobool3 = icmp ne i32 %22, 0
  br i1 %tobool3, label %if.end.9, label %if.then.4

if.then.4:                                        ; preds = %if.end
  %23 = load %struct.gx_device_printer_s*, %struct.gx_device_printer_s** %pdev.addr, align 8, !tbaa !1
  %24 = bitcast %struct.gx_device_printer_s* %23 to %struct.gx_device_s*
  %call5 = call i32 @opvp_startpage(%struct.gx_device_s* %24) #7
  store i32 %call5, i32* %code, align 4, !tbaa !5
  %25 = load i32, i32* %code, align 4, !tbaa !5
  %tobool6 = icmp ne i32 %25, 0
  br i1 %tobool6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %if.then.4
  %26 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %26, i32* %ecode, align 4, !tbaa !5
  br label %if.end.8

if.else:                                          ; preds = %if.then.4
  store i32 1, i32* %start_page, align 4, !tbaa !5
  br label %if.end.8

if.end.8:                                         ; preds = %if.else, %if.then.7
  br label %if.end.9

if.end.9:                                         ; preds = %if.end.8, %if.end
  %27 = load i32, i32* %ecode, align 4, !tbaa !5
  %tobool10 = icmp ne i32 %27, 0
  br i1 %tobool10, label %if.end.13, label %if.then.11

if.then.11:                                       ; preds = %if.end.9
  %28 = load %struct.gx_device_printer_s*, %struct.gx_device_printer_s** %pdev.addr, align 8, !tbaa !1
  %29 = bitcast %struct.gx_device_printer_s* %28 to %struct.gx_device_vector_s*
  %call12 = call i32 @opvp_moveto(%struct.gx_device_vector_s* %29, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, i32 0) #7
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.11, %if.end.9
  %30 = load i32, i32* %ecode, align 4, !tbaa !5
  %tobool14 = icmp ne i32 %30, 0
  br i1 %tobool14, label %if.end.25, label %if.then.15

if.then.15:                                       ; preds = %if.end.13
  %31 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpStartRaster = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %31, i32 0, i32 64
  %32 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpStartRaster, align 8, !tbaa !127
  %tobool16 = icmp ne i32 (i32, i32)* %32, null
  br i1 %tobool16, label %if.then.17, label %if.end.20

if.then.17:                                       ; preds = %if.then.15
  %33 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpStartRaster18 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %33, i32 0, i32 64
  %34 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpStartRaster18, align 8, !tbaa !127
  %35 = load i32, i32* @printerContext, align 4, !tbaa !5
  %36 = load i32, i32* %rasterWidth, align 4, !tbaa !5
  %call19 = call i32 %34(i32 %35, i32 %36) #7
  store i32 %call19, i32* %r, align 4, !tbaa !5
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.17, %if.then.15
  %37 = load i32, i32* %r, align 4, !tbaa !5
  %cmp = icmp ne i32 %37, 0
  br i1 %cmp, label %if.then.22, label %if.else.23

if.then.22:                                       ; preds = %if.end.20
  %38 = load i32, i32* %r, align 4, !tbaa !5
  store i32 %38, i32* %ecode, align 4, !tbaa !5
  br label %if.end.24

if.else.23:                                       ; preds = %if.end.20
  store i32 1, i32* %start_raster, align 4, !tbaa !5
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.23, %if.then.22
  br label %if.end.25

if.end.25:                                        ; preds = %if.end.24, %if.end.13
  store i32 0, i32* %line, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc.104, %if.end.25
  %39 = load i32, i32* %line, align 4, !tbaa !5
  %40 = load i32, i32* %scan_lines, align 4, !tbaa !5
  %cmp26 = icmp slt i32 %39, %40
  br i1 %cmp26, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %41 = load i32, i32* %ecode, align 4, !tbaa !5
  %tobool28 = icmp ne i32 %41, 0
  %lnot = xor i1 %tobool28, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %42 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %42, label %for.body, label %for.end.106

for.body:                                         ; preds = %land.end
  %43 = load i32, i32* %ecode, align 4, !tbaa !5
  %tobool29 = icmp ne i32 %43, 0
  br i1 %tobool29, label %if.end.35, label %if.then.30

if.then.30:                                       ; preds = %for.body
  %44 = load %struct.gx_device_printer_s*, %struct.gx_device_printer_s** %pdev.addr, align 8, !tbaa !1
  %45 = load i32, i32* %line, align 4, !tbaa !5
  %46 = load i8*, i8** %buff, align 8, !tbaa !1
  %call31 = call i32 @gdev_prn_get_bits(%struct.gx_device_printer_s* %44, i32 %45, i8* %46, i8** %data) #7
  store i32 %call31, i32* %code, align 4, !tbaa !5
  %47 = load i32, i32* %code, align 4, !tbaa !5
  %tobool32 = icmp ne i32 %47, 0
  br i1 %tobool32, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %if.then.30
  %48 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %48, i32* %ecode, align 4, !tbaa !5
  br label %for.end.106

if.end.34:                                        ; preds = %if.then.30
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34, %for.body
  %49 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSkipRaster = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %49, i32 0, i32 66
  %50 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSkipRaster, align 8, !tbaa !128
  %tobool36 = icmp ne i32 (i32, i32)* %50, null
  br i1 %tobool36, label %if.then.37, label %if.end.91

if.then.37:                                       ; preds = %if.end.35
  %51 = load %struct.gx_device_printer_s*, %struct.gx_device_printer_s** %pdev.addr, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.gx_device_printer_s, %struct.gx_device_printer_s* %51, i32 0, i32 11
  %depth = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 3
  %52 = load i16, i16* %depth, align 2, !tbaa !129
  %conv38 = zext i16 %52 to i32
  %cmp39 = icmp sgt i32 %conv38, 8
  br i1 %cmp39, label %if.then.41, label %if.else.65

if.then.41:                                       ; preds = %if.then.37
  store i8 -1, i8* %check, align 1, !tbaa !64
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.42

for.cond.42:                                      ; preds = %for.inc, %if.then.41
  %53 = load i32, i32* %i, align 4, !tbaa !5
  %54 = load i32, i32* %raster_size, align 4, !tbaa !5
  %cmp43 = icmp slt i32 %53, %54
  br i1 %cmp43, label %for.body.45, label %for.end

for.body.45:                                      ; preds = %for.cond.42
  %55 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom = sext i32 %55 to i64
  %56 = load i8*, i8** %data, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds i8, i8* %56, i64 %idxprom
  %57 = load i8, i8* %arrayidx, align 1, !tbaa !64
  %conv46 = zext i8 %57 to i32
  %58 = load i8, i8* %check, align 1, !tbaa !64
  %conv47 = zext i8 %58 to i32
  %and = and i32 %conv47, %conv46
  %conv48 = trunc i32 %and to i8
  store i8 %conv48, i8* %check, align 1, !tbaa !64
  %59 = load i8, i8* %check, align 1, !tbaa !64
  %conv49 = zext i8 %59 to i32
  %cmp50 = icmp ne i32 %conv49, 255
  br i1 %cmp50, label %if.then.52, label %if.end.53

if.then.52:                                       ; preds = %for.body.45
  br label %for.end

if.end.53:                                        ; preds = %for.body.45
  br label %for.inc

for.inc:                                          ; preds = %if.end.53
  %60 = load i32, i32* %i, align 4, !tbaa !5
  %inc = add nsw i32 %60, 1
  store i32 %inc, i32* %i, align 4, !tbaa !5
  br label %for.cond.42

for.end:                                          ; preds = %if.then.52, %for.cond.42
  %61 = load i8, i8* %check, align 1, !tbaa !64
  %conv54 = zext i8 %61 to i32
  %cmp55 = icmp eq i32 %conv54, 255
  br i1 %cmp55, label %if.then.57, label %if.end.64

if.then.57:                                       ; preds = %for.end
  %62 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSkipRaster58 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %62, i32 0, i32 66
  %63 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSkipRaster58, align 8, !tbaa !128
  %64 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call59 = call i32 %63(i32 %64, i32 1) #7
  store i32 %call59, i32* %r, align 4, !tbaa !5
  %65 = load i32, i32* %r, align 4, !tbaa !5
  %cmp60 = icmp eq i32 %65, 0
  br i1 %cmp60, label %if.then.62, label %if.end.63

if.then.62:                                       ; preds = %if.then.57
  br label %for.inc.104

if.end.63:                                        ; preds = %if.then.57
  br label %if.end.64

if.end.64:                                        ; preds = %if.end.63, %for.end
  br label %if.end.90

if.else.65:                                       ; preds = %if.then.37
  store i8 0, i8* %check, align 1, !tbaa !64
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.66

for.cond.66:                                      ; preds = %for.inc.78, %if.else.65
  %66 = load i32, i32* %i, align 4, !tbaa !5
  %67 = load i32, i32* %raster_size, align 4, !tbaa !5
  %cmp67 = icmp slt i32 %66, %67
  br i1 %cmp67, label %for.body.69, label %for.end.80

for.body.69:                                      ; preds = %for.cond.66
  %68 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom70 = sext i32 %68 to i64
  %69 = load i8*, i8** %data, align 8, !tbaa !1
  %arrayidx71 = getelementptr inbounds i8, i8* %69, i64 %idxprom70
  %70 = load i8, i8* %arrayidx71, align 1, !tbaa !64
  %conv72 = zext i8 %70 to i32
  %71 = load i8, i8* %check, align 1, !tbaa !64
  %conv73 = zext i8 %71 to i32
  %or = or i32 %conv73, %conv72
  %conv74 = trunc i32 %or to i8
  store i8 %conv74, i8* %check, align 1, !tbaa !64
  %72 = load i8, i8* %check, align 1, !tbaa !64
  %tobool75 = icmp ne i8 %72, 0
  br i1 %tobool75, label %if.then.76, label %if.end.77

if.then.76:                                       ; preds = %for.body.69
  br label %for.end.80

if.end.77:                                        ; preds = %for.body.69
  br label %for.inc.78

for.inc.78:                                       ; preds = %if.end.77
  %73 = load i32, i32* %i, align 4, !tbaa !5
  %inc79 = add nsw i32 %73, 1
  store i32 %inc79, i32* %i, align 4, !tbaa !5
  br label %for.cond.66

for.end.80:                                       ; preds = %if.then.76, %for.cond.66
  %74 = load i8, i8* %check, align 1, !tbaa !64
  %tobool81 = icmp ne i8 %74, 0
  br i1 %tobool81, label %if.then.82, label %if.end.89

if.then.82:                                       ; preds = %for.end.80
  %75 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSkipRaster83 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %75, i32 0, i32 66
  %76 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSkipRaster83, align 8, !tbaa !128
  %77 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call84 = call i32 %76(i32 %77, i32 1) #7
  store i32 %call84, i32* %r, align 4, !tbaa !5
  %78 = load i32, i32* %r, align 4, !tbaa !5
  %cmp85 = icmp eq i32 %78, 0
  br i1 %cmp85, label %if.then.87, label %if.end.88

if.then.87:                                       ; preds = %if.then.82
  br label %for.inc.104

if.end.88:                                        ; preds = %if.then.82
  br label %if.end.89

if.end.89:                                        ; preds = %if.end.88, %for.end.80
  br label %if.end.90

if.end.90:                                        ; preds = %if.end.89, %if.end.64
  br label %if.end.91

if.end.91:                                        ; preds = %if.end.90, %if.end.35
  %79 = load i32, i32* %ecode, align 4, !tbaa !5
  %tobool92 = icmp ne i32 %79, 0
  br i1 %tobool92, label %if.end.103, label %if.then.93

if.then.93:                                       ; preds = %if.end.91
  %80 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpTransferRasterData = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %80, i32 0, i32 65
  %81 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** %opvpTransferRasterData, align 8, !tbaa !130
  %tobool94 = icmp ne i32 (i32, i32, i8*)* %81, null
  br i1 %tobool94, label %if.then.95, label %if.end.98

if.then.95:                                       ; preds = %if.then.93
  %82 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpTransferRasterData96 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %82, i32 0, i32 65
  %83 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** %opvpTransferRasterData96, align 8, !tbaa !130
  %84 = load i32, i32* @printerContext, align 4, !tbaa !5
  %85 = load i32, i32* %raster_size, align 4, !tbaa !5
  %86 = load i8*, i8** %data, align 8, !tbaa !1
  %call97 = call i32 %83(i32 %84, i32 %85, i8* %86) #7
  store i32 %call97, i32* %r, align 4, !tbaa !5
  br label %if.end.98

if.end.98:                                        ; preds = %if.then.95, %if.then.93
  %87 = load i32, i32* %r, align 4, !tbaa !5
  %cmp99 = icmp ne i32 %87, 0
  br i1 %cmp99, label %if.then.101, label %if.end.102

if.then.101:                                      ; preds = %if.end.98
  %88 = load i32, i32* %r, align 4, !tbaa !5
  store i32 %88, i32* %ecode, align 4, !tbaa !5
  br label %if.end.102

if.end.102:                                       ; preds = %if.then.101, %if.end.98
  br label %if.end.103

if.end.103:                                       ; preds = %if.end.102, %if.end.91
  br label %for.inc.104

for.inc.104:                                      ; preds = %if.end.103, %if.then.87, %if.then.62
  %89 = load i32, i32* %line, align 4, !tbaa !5
  %inc105 = add nsw i32 %89, 1
  store i32 %inc105, i32* %line, align 4, !tbaa !5
  br label %for.cond

for.end.106:                                      ; preds = %if.then.33, %land.end
  %90 = load i32, i32* %start_raster, align 4, !tbaa !5
  %tobool107 = icmp ne i32 %90, 0
  br i1 %tobool107, label %if.then.108, label %if.end.118

if.then.108:                                      ; preds = %for.end.106
  %91 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpEndRaster = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %91, i32 0, i32 67
  %92 = load i32 (i32)*, i32 (i32)** %opvpEndRaster, align 8, !tbaa !131
  %tobool109 = icmp ne i32 (i32)* %92, null
  br i1 %tobool109, label %if.then.110, label %if.end.113

if.then.110:                                      ; preds = %if.then.108
  %93 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpEndRaster111 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %93, i32 0, i32 67
  %94 = load i32 (i32)*, i32 (i32)** %opvpEndRaster111, align 8, !tbaa !131
  %95 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call112 = call i32 %94(i32 %95) #7
  store i32 %call112, i32* %r, align 4, !tbaa !5
  br label %if.end.113

if.end.113:                                       ; preds = %if.then.110, %if.then.108
  %96 = load i32, i32* %r, align 4, !tbaa !5
  %cmp114 = icmp ne i32 %96, 0
  br i1 %cmp114, label %if.then.116, label %if.end.117

if.then.116:                                      ; preds = %if.end.113
  %97 = load i32, i32* %r, align 4, !tbaa !5
  store i32 %97, i32* %ecode, align 4, !tbaa !5
  br label %if.end.117

if.end.117:                                       ; preds = %if.then.116, %if.end.113
  store i32 0, i32* %start_raster, align 4, !tbaa !5
  br label %if.end.118

if.end.118:                                       ; preds = %if.end.117, %for.end.106
  %98 = load i32, i32* %start_page, align 4, !tbaa !5
  %tobool119 = icmp ne i32 %98, 0
  br i1 %tobool119, label %if.then.120, label %if.end.125

if.then.120:                                      ; preds = %if.end.118
  %call121 = call i32 @opvp_endpage() #7
  store i32 %call121, i32* %code, align 4, !tbaa !5
  %99 = load i32, i32* %code, align 4, !tbaa !5
  %tobool122 = icmp ne i32 %99, 0
  br i1 %tobool122, label %if.then.123, label %if.end.124

if.then.123:                                      ; preds = %if.then.120
  %100 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %100, i32* %ecode, align 4, !tbaa !5
  br label %if.end.124

if.end.124:                                       ; preds = %if.then.123, %if.then.120
  store i32 0, i32* %start_page, align 4, !tbaa !5
  br label %if.end.125

if.end.125:                                       ; preds = %if.end.124, %if.end.118
  %101 = load i8*, i8** %buff, align 8, !tbaa !1
  %tobool126 = icmp ne i8* %101, null
  br i1 %tobool126, label %if.then.127, label %if.end.128

if.then.127:                                      ; preds = %if.end.125
  %102 = load i8*, i8** %buff, align 8, !tbaa !1
  call void @free(i8* %102) #8
  store i8* null, i8** %buff, align 8, !tbaa !1
  br label %if.end.128

if.end.128:                                       ; preds = %if.then.127, %if.end.125
  %103 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %103, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.128, %if.then
  call void @llvm.lifetime.end(i64 1, i8* %check) #2
  %104 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %104) #2
  %105 = bitcast i32* %start_raster to i8*
  call void @llvm.lifetime.end(i64 4, i8* %105) #2
  %106 = bitcast i32* %start_page to i8*
  call void @llvm.lifetime.end(i64 4, i8* %106) #2
  %107 = bitcast i32* %rasterWidth to i8*
  call void @llvm.lifetime.end(i64 4, i8* %107) #2
  %108 = bitcast i8** %data to i8*
  call void @llvm.lifetime.end(i64 8, i8* %108) #2
  %109 = bitcast i32* %scan_lines to i8*
  call void @llvm.lifetime.end(i64 4, i8* %109) #2
  %110 = bitcast i32* %line to i8*
  call void @llvm.lifetime.end(i64 4, i8* %110) #2
  %111 = bitcast i8** %buff to i8*
  call void @llvm.lifetime.end(i64 8, i8* %111) #2
  %112 = bitcast i32* %buff_size to i8*
  call void @llvm.lifetime.end(i64 4, i8* %112) #2
  %113 = bitcast i32* %raster_size to i8*
  call void @llvm.lifetime.end(i64 4, i8* %113) #2
  %114 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %114) #2
  %115 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %115) #2
  %116 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %116) #2
  %117 = load i32, i32* %retval
  ret i32 %117
}

declare i32 @gx_default_print_page_copies(%struct.gx_device_printer_s*, %struct._IO_FILE*, i32) #1

declare i32 @gx_default_create_buf_device(%struct.gx_device_s**, %struct.gx_device_s*, i32, %struct.gx_render_plane_s*, %struct.gs_memory_s*, %struct.gx_colors_usage_s*) #1

declare i32 @gx_default_size_buf_device(%struct.gx_device_buf_space_s*, %struct.gx_device_s*, %struct.gx_render_plane_s*, i32, i32) #1

declare i32 @gx_default_setup_buf_device(%struct.gx_device_s*, i8*, i32, i8**, i32, i32, i32) #1

declare void @gx_default_destroy_buf_device(%struct.gx_device_s*) #1

declare void @gx_default_get_space_params(%struct.gx_device_printer_s*, %struct.gdev_space_params_s*) #1

declare i32 @gx_default_start_render_thread(%struct.gdev_prn_start_render_params_s*) #1

declare i32 @gx_default_open_render_device(%struct.gx_device_printer_s*) #1

declare i32 @gx_default_close_render_device(%struct.gx_device_printer_s*) #1

declare i32 @gx_default_buffer_page(%struct.gx_device_printer_s*, %struct._IO_FILE*, i32) #1

; Function Attrs: nounwind uwtable
define internal i32 @oprp_open(%struct.gx_device_s* %dev) #0 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store i32 0, i32* @vector, align 4, !tbaa !5
  store i32 1, i32* @inkjet, align 4, !tbaa !5
  %0 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %0, i32 0, i32 42
  %get_initial_matrix = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 1
  store void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @opvp_get_initial_matrix, void (%struct.gx_device_s*, %struct.gs_matrix_s*)** %get_initial_matrix, align 8, !tbaa !132
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call = call i32 @opvp_open(%struct.gx_device_s* %1) #7
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define internal i32 @oprp_get_params(%struct.gx_device_s* %dev, %struct.gs_param_list_s* %plist) #0 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %plist.addr = alloca %struct.gs_param_list_s*, align 8
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_param_list_s* %plist, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %0 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %2 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %call = call i32 @gdev_prn_get_params(%struct.gx_device_s* %1, %struct.gs_param_list_s* %2) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %3 = load i32, i32* %code, align 4, !tbaa !5
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %4, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %5 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %call1 = call i32 @_get_params(%struct.gs_param_list_s* %5) #7
  store i32 %call1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %6 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %6) #2
  %7 = load i32, i32* %retval
  ret i32 %7
}

; Function Attrs: nounwind uwtable
define internal i32 @oprp_put_params(%struct.gx_device_s* %dev, %struct.gs_param_list_s* %plist) #0 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %plist.addr = alloca %struct.gs_param_list_s*, align 8
  %code = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  store %struct.gs_param_list_s* %plist, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %0 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %call = call i32 @_put_params(%struct.gs_param_list_s* %1) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %2 = load i32, i32* %code, align 4, !tbaa !5
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %3, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %4 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %5 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %call1 = call i32 @gdev_prn_put_params(%struct.gx_device_s* %4, %struct.gs_param_list_s* %5) #7
  store i32 %call1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %6 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %6) #2
  %7 = load i32, i32* %retval
  ret i32 %7
}

declare i32 @gdev_prn_dev_spec_op(%struct.gx_device_s*, i32, i8*, i32) #1

declare i32 @gx_default_get_profile(%struct.gx_device_s*, %struct.cmm_dev_profile_s**) #1

declare void @gx_default_set_graphics_type_tag(%struct.gx_device_s*, i32) #1

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #2

declare i32 @gdev_prn_get_params(%struct.gx_device_s*, %struct.gs_param_list_s*) #1

; Function Attrs: nounwind uwtable
define internal i32 @_get_params(%struct.gs_param_list_s* %plist) #0 {
entry:
  %plist.addr = alloca %struct.gs_param_list_s*, align 8
  %code = alloca i32, align 4
  %ecode = alloca i32, align 4
  %pname = alloca i8*, align 8
  %vdps = alloca %struct.gs_param_string_s, align 8
  %pmps = alloca %struct.gs_param_string_s, align 8
  %jips = alloca %struct.gs_param_string_s, align 8
  %dips = alloca %struct.gs_param_string_s, align 8
  %fips = alloca %struct.gs_param_string_s, align 8
  %mlps = alloca %struct.gs_param_string_s, align 8
  %mtps = alloca %struct.gs_param_string_s, align 8
  %mrps = alloca %struct.gs_param_string_s, align 8
  %mbps = alloca %struct.gs_param_string_s, align 8
  %zmps = alloca %struct.gs_param_string_s, align 8
  %buff = alloca [1024 x i8], align 16
  store %struct.gs_param_list_s* %plist, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %0 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %2 = bitcast i8** %pname to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #2
  %3 = bitcast %struct.gs_param_string_s* %vdps to i8*
  call void @llvm.lifetime.start(i64 16, i8* %3) #2
  %4 = bitcast %struct.gs_param_string_s* %pmps to i8*
  call void @llvm.lifetime.start(i64 16, i8* %4) #2
  %5 = bitcast %struct.gs_param_string_s* %jips to i8*
  call void @llvm.lifetime.start(i64 16, i8* %5) #2
  %6 = bitcast %struct.gs_param_string_s* %dips to i8*
  call void @llvm.lifetime.start(i64 16, i8* %6) #2
  %7 = bitcast %struct.gs_param_string_s* %fips to i8*
  call void @llvm.lifetime.start(i64 16, i8* %7) #2
  %8 = bitcast %struct.gs_param_string_s* %mlps to i8*
  call void @llvm.lifetime.start(i64 16, i8* %8) #2
  %9 = bitcast %struct.gs_param_string_s* %mtps to i8*
  call void @llvm.lifetime.start(i64 16, i8* %9) #2
  %10 = bitcast %struct.gs_param_string_s* %mrps to i8*
  call void @llvm.lifetime.start(i64 16, i8* %10) #2
  %11 = bitcast %struct.gs_param_string_s* %mbps to i8*
  call void @llvm.lifetime.start(i64 16, i8* %11) #2
  %12 = bitcast %struct.gs_param_string_s* %zmps to i8*
  call void @llvm.lifetime.start(i64 16, i8* %12) #2
  %13 = bitcast [1024 x i8]* %buff to i8*
  call void @llvm.lifetime.start(i64 1024, i8* %13) #2
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.162, i32 0, i32 0), i8** %pname, align 8, !tbaa !1
  %14 = load i8*, i8** @vectorDriver, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %vdps, i32 0, i32 0
  store i8* %14, i8** %data, align 8, !tbaa !133
  %15 = load i8*, i8** @vectorDriver, align 8, !tbaa !1
  %tobool = icmp ne i8* %15, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %16 = load i8*, i8** @vectorDriver, align 8, !tbaa !1
  %call = call i64 @strlen(i8* %16) #9
  %add = add i64 %call, 1
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %add, %cond.true ], [ 0, %cond.false ]
  %conv = trunc i64 %cond to i32
  %size = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %vdps, i32 0, i32 1
  store i32 %conv, i32* %size, align 4, !tbaa !135
  %persistent = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %vdps, i32 0, i32 2
  store i32 0, i32* %persistent, align 4, !tbaa !136
  %17 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %18 = load i8*, i8** %pname, align 8, !tbaa !1
  %call1 = call i32 @param_write_string(%struct.gs_param_list_s* %17, i8* %18, %struct.gs_param_string_s* %vdps) #7
  store i32 %call1, i32* %code, align 4, !tbaa !5
  %19 = load i32, i32* %code, align 4, !tbaa !5
  %tobool2 = icmp ne i32 %19, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %20 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %20, i32* %ecode, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.163, i32 0, i32 0), i8** %pname, align 8, !tbaa !1
  %21 = load i8*, i8** @printerModel, align 8, !tbaa !1
  %data3 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmps, i32 0, i32 0
  store i8* %21, i8** %data3, align 8, !tbaa !133
  %22 = load i8*, i8** @printerModel, align 8, !tbaa !1
  %tobool4 = icmp ne i8* %22, null
  br i1 %tobool4, label %cond.true.5, label %cond.false.8

cond.true.5:                                      ; preds = %if.end
  %23 = load i8*, i8** @printerModel, align 8, !tbaa !1
  %call6 = call i64 @strlen(i8* %23) #9
  %add7 = add i64 %call6, 1
  br label %cond.end.9

cond.false.8:                                     ; preds = %if.end
  br label %cond.end.9

cond.end.9:                                       ; preds = %cond.false.8, %cond.true.5
  %cond10 = phi i64 [ %add7, %cond.true.5 ], [ 0, %cond.false.8 ]
  %conv11 = trunc i64 %cond10 to i32
  %size12 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmps, i32 0, i32 1
  store i32 %conv11, i32* %size12, align 4, !tbaa !135
  %persistent13 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmps, i32 0, i32 2
  store i32 0, i32* %persistent13, align 4, !tbaa !136
  %24 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %25 = load i8*, i8** %pname, align 8, !tbaa !1
  %call14 = call i32 @param_write_string(%struct.gs_param_list_s* %24, i8* %25, %struct.gs_param_string_s* %pmps) #7
  store i32 %call14, i32* %code, align 4, !tbaa !5
  %26 = load i32, i32* %code, align 4, !tbaa !5
  %tobool15 = icmp ne i32 %26, 0
  br i1 %tobool15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %cond.end.9
  %27 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %27, i32* %ecode, align 4, !tbaa !5
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.16, %cond.end.9
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.164, i32 0, i32 0), i8** %pname, align 8, !tbaa !1
  %28 = load i8*, i8** @jobInfo, align 8, !tbaa !1
  %data18 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %jips, i32 0, i32 0
  store i8* %28, i8** %data18, align 8, !tbaa !133
  %29 = load i8*, i8** @jobInfo, align 8, !tbaa !1
  %tobool19 = icmp ne i8* %29, null
  br i1 %tobool19, label %cond.true.20, label %cond.false.23

cond.true.20:                                     ; preds = %if.end.17
  %30 = load i8*, i8** @jobInfo, align 8, !tbaa !1
  %call21 = call i64 @strlen(i8* %30) #9
  %add22 = add i64 %call21, 1
  br label %cond.end.24

cond.false.23:                                    ; preds = %if.end.17
  br label %cond.end.24

cond.end.24:                                      ; preds = %cond.false.23, %cond.true.20
  %cond25 = phi i64 [ %add22, %cond.true.20 ], [ 0, %cond.false.23 ]
  %conv26 = trunc i64 %cond25 to i32
  %size27 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %jips, i32 0, i32 1
  store i32 %conv26, i32* %size27, align 4, !tbaa !135
  %persistent28 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %jips, i32 0, i32 2
  store i32 0, i32* %persistent28, align 4, !tbaa !136
  %31 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %32 = load i8*, i8** %pname, align 8, !tbaa !1
  %call29 = call i32 @param_write_string(%struct.gs_param_list_s* %31, i8* %32, %struct.gs_param_string_s* %jips) #7
  store i32 %call29, i32* %code, align 4, !tbaa !5
  %33 = load i32, i32* %code, align 4, !tbaa !5
  %tobool30 = icmp ne i32 %33, 0
  br i1 %tobool30, label %if.then.31, label %if.end.32

if.then.31:                                       ; preds = %cond.end.24
  %34 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %34, i32* %ecode, align 4, !tbaa !5
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.31, %cond.end.24
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.165, i32 0, i32 0), i8** %pname, align 8, !tbaa !1
  %35 = load i8*, i8** @docInfo, align 8, !tbaa !1
  %data33 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %dips, i32 0, i32 0
  store i8* %35, i8** %data33, align 8, !tbaa !133
  %36 = load i8*, i8** @docInfo, align 8, !tbaa !1
  %tobool34 = icmp ne i8* %36, null
  br i1 %tobool34, label %cond.true.35, label %cond.false.38

cond.true.35:                                     ; preds = %if.end.32
  %37 = load i8*, i8** @docInfo, align 8, !tbaa !1
  %call36 = call i64 @strlen(i8* %37) #9
  %add37 = add i64 %call36, 1
  br label %cond.end.39

cond.false.38:                                    ; preds = %if.end.32
  br label %cond.end.39

cond.end.39:                                      ; preds = %cond.false.38, %cond.true.35
  %cond40 = phi i64 [ %add37, %cond.true.35 ], [ 0, %cond.false.38 ]
  %conv41 = trunc i64 %cond40 to i32
  %size42 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %dips, i32 0, i32 1
  store i32 %conv41, i32* %size42, align 4, !tbaa !135
  %persistent43 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %dips, i32 0, i32 2
  store i32 0, i32* %persistent43, align 4, !tbaa !136
  %38 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %39 = load i8*, i8** %pname, align 8, !tbaa !1
  %call44 = call i32 @param_write_string(%struct.gs_param_list_s* %38, i8* %39, %struct.gs_param_string_s* %dips) #7
  store i32 %call44, i32* %code, align 4, !tbaa !5
  %40 = load i32, i32* %code, align 4, !tbaa !5
  %tobool45 = icmp ne i32 %40, 0
  br i1 %tobool45, label %if.then.46, label %if.end.47

if.then.46:                                       ; preds = %cond.end.39
  %41 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %41, i32* %ecode, align 4, !tbaa !5
  br label %if.end.47

if.end.47:                                        ; preds = %if.then.46, %cond.end.39
  %42 = load i32, i32* @FastImageMode, align 4, !tbaa !64
  switch i32 %42, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.49
    i32 3, label %sw.bb.51
    i32 4, label %sw.bb.53
    i32 5, label %sw.bb.55
    i32 0, label %sw.bb.57
  ]

sw.bb:                                            ; preds = %if.end.47
  %call48 = call i8* @opvp_alloc_string(i8** @fastImage, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.166, i32 0, i32 0)) #7
  br label %sw.epilog

sw.bb.49:                                         ; preds = %if.end.47
  %call50 = call i8* @opvp_alloc_string(i8** @fastImage, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.167, i32 0, i32 0)) #7
  br label %sw.epilog

sw.bb.51:                                         ; preds = %if.end.47
  %call52 = call i8* @opvp_alloc_string(i8** @fastImage, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.168, i32 0, i32 0)) #7
  br label %sw.epilog

sw.bb.53:                                         ; preds = %if.end.47
  %call54 = call i8* @opvp_alloc_string(i8** @fastImage, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.169, i32 0, i32 0)) #7
  br label %sw.epilog

sw.bb.55:                                         ; preds = %if.end.47
  %call56 = call i8* @opvp_alloc_string(i8** @fastImage, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.170, i32 0, i32 0)) #7
  br label %sw.epilog

sw.bb.57:                                         ; preds = %if.end.47
  br label %sw.default

sw.default:                                       ; preds = %if.end.47, %sw.bb.57
  %call58 = call i8* @opvp_alloc_string(i8** @fastImage, i8* null) #7
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.55, %sw.bb.53, %sw.bb.51, %sw.bb.49, %sw.bb
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.171, i32 0, i32 0), i8** %pname, align 8, !tbaa !1
  %43 = load i8*, i8** @fastImage, align 8, !tbaa !1
  %data59 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %fips, i32 0, i32 0
  store i8* %43, i8** %data59, align 8, !tbaa !133
  %44 = load i8*, i8** @fastImage, align 8, !tbaa !1
  %tobool60 = icmp ne i8* %44, null
  br i1 %tobool60, label %cond.true.61, label %cond.false.64

cond.true.61:                                     ; preds = %sw.epilog
  %45 = load i8*, i8** @fastImage, align 8, !tbaa !1
  %call62 = call i64 @strlen(i8* %45) #9
  %add63 = add i64 %call62, 1
  br label %cond.end.65

cond.false.64:                                    ; preds = %sw.epilog
  br label %cond.end.65

cond.end.65:                                      ; preds = %cond.false.64, %cond.true.61
  %cond66 = phi i64 [ %add63, %cond.true.61 ], [ 0, %cond.false.64 ]
  %conv67 = trunc i64 %cond66 to i32
  %size68 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %fips, i32 0, i32 1
  store i32 %conv67, i32* %size68, align 4, !tbaa !135
  %persistent69 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %fips, i32 0, i32 2
  store i32 0, i32* %persistent69, align 4, !tbaa !136
  %46 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %47 = load i8*, i8** %pname, align 8, !tbaa !1
  %call70 = call i32 @param_write_string(%struct.gs_param_list_s* %46, i8* %47, %struct.gs_param_string_s* %fips) #7
  store i32 %call70, i32* %code, align 4, !tbaa !5
  %48 = load i32, i32* %code, align 4, !tbaa !5
  %tobool71 = icmp ne i32 %48, 0
  br i1 %tobool71, label %if.then.72, label %if.end.73

if.then.72:                                       ; preds = %cond.end.65
  %49 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %49, i32* %ecode, align 4, !tbaa !5
  br label %if.end.73

if.end.73:                                        ; preds = %if.then.72, %cond.end.65
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %buff, i32 0, i32 0
  %call74 = call i8* @memset(i8* %arraydecay, i32 0, i64 1024) #8
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.172, i32 0, i32 0), i8** %pname, align 8, !tbaa !1
  %arraydecay75 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buff, i32 0, i32 0
  %50 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @margins, i32 0, i64 0), align 4, !tbaa !10
  %conv76 = fpext float %50 to double
  %call77 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %arraydecay75, i64 1023, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.173, i32 0, i32 0), double %conv76) #8
  %arraydecay78 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buff, i32 0, i32 0
  %data79 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %mlps, i32 0, i32 0
  store i8* %arraydecay78, i8** %data79, align 8, !tbaa !133
  %arraydecay80 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buff, i32 0, i32 0
  %call81 = call i64 @strlen(i8* %arraydecay80) #9
  %add82 = add i64 %call81, 1
  %conv83 = trunc i64 %add82 to i32
  %size84 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %mlps, i32 0, i32 1
  store i32 %conv83, i32* %size84, align 4, !tbaa !135
  %persistent85 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %mlps, i32 0, i32 2
  store i32 0, i32* %persistent85, align 4, !tbaa !136
  %51 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %52 = load i8*, i8** %pname, align 8, !tbaa !1
  %call86 = call i32 @param_write_string(%struct.gs_param_list_s* %51, i8* %52, %struct.gs_param_string_s* %mlps) #7
  store i32 %call86, i32* %code, align 4, !tbaa !5
  %53 = load i32, i32* %code, align 4, !tbaa !5
  %tobool87 = icmp ne i32 %53, 0
  br i1 %tobool87, label %if.then.88, label %if.end.89

if.then.88:                                       ; preds = %if.end.73
  %54 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %54, i32* %ecode, align 4, !tbaa !5
  br label %if.end.89

if.end.89:                                        ; preds = %if.then.88, %if.end.73
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.174, i32 0, i32 0), i8** %pname, align 8, !tbaa !1
  %arraydecay90 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buff, i32 0, i32 0
  %55 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @margins, i32 0, i64 3), align 4, !tbaa !10
  %conv91 = fpext float %55 to double
  %call92 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %arraydecay90, i64 1023, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.173, i32 0, i32 0), double %conv91) #8
  %arraydecay93 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buff, i32 0, i32 0
  %data94 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %mtps, i32 0, i32 0
  store i8* %arraydecay93, i8** %data94, align 8, !tbaa !133
  %arraydecay95 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buff, i32 0, i32 0
  %call96 = call i64 @strlen(i8* %arraydecay95) #9
  %add97 = add i64 %call96, 1
  %conv98 = trunc i64 %add97 to i32
  %size99 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %mtps, i32 0, i32 1
  store i32 %conv98, i32* %size99, align 4, !tbaa !135
  %persistent100 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %mtps, i32 0, i32 2
  store i32 0, i32* %persistent100, align 4, !tbaa !136
  %56 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %57 = load i8*, i8** %pname, align 8, !tbaa !1
  %call101 = call i32 @param_write_string(%struct.gs_param_list_s* %56, i8* %57, %struct.gs_param_string_s* %mtps) #7
  store i32 %call101, i32* %code, align 4, !tbaa !5
  %58 = load i32, i32* %code, align 4, !tbaa !5
  %tobool102 = icmp ne i32 %58, 0
  br i1 %tobool102, label %if.then.103, label %if.end.104

if.then.103:                                      ; preds = %if.end.89
  %59 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %59, i32* %ecode, align 4, !tbaa !5
  br label %if.end.104

if.end.104:                                       ; preds = %if.then.103, %if.end.89
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.175, i32 0, i32 0), i8** %pname, align 8, !tbaa !1
  %arraydecay105 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buff, i32 0, i32 0
  %60 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @margins, i32 0, i64 2), align 4, !tbaa !10
  %conv106 = fpext float %60 to double
  %call107 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %arraydecay105, i64 1023, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.173, i32 0, i32 0), double %conv106) #8
  %arraydecay108 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buff, i32 0, i32 0
  %data109 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %mrps, i32 0, i32 0
  store i8* %arraydecay108, i8** %data109, align 8, !tbaa !133
  %arraydecay110 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buff, i32 0, i32 0
  %call111 = call i64 @strlen(i8* %arraydecay110) #9
  %add112 = add i64 %call111, 1
  %conv113 = trunc i64 %add112 to i32
  %size114 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %mrps, i32 0, i32 1
  store i32 %conv113, i32* %size114, align 4, !tbaa !135
  %persistent115 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %mrps, i32 0, i32 2
  store i32 0, i32* %persistent115, align 4, !tbaa !136
  %61 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %62 = load i8*, i8** %pname, align 8, !tbaa !1
  %call116 = call i32 @param_write_string(%struct.gs_param_list_s* %61, i8* %62, %struct.gs_param_string_s* %mrps) #7
  store i32 %call116, i32* %code, align 4, !tbaa !5
  %63 = load i32, i32* %code, align 4, !tbaa !5
  %tobool117 = icmp ne i32 %63, 0
  br i1 %tobool117, label %if.then.118, label %if.end.119

if.then.118:                                      ; preds = %if.end.104
  %64 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %64, i32* %ecode, align 4, !tbaa !5
  br label %if.end.119

if.end.119:                                       ; preds = %if.then.118, %if.end.104
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.176, i32 0, i32 0), i8** %pname, align 8, !tbaa !1
  %arraydecay120 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buff, i32 0, i32 0
  %65 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @margins, i32 0, i64 1), align 4, !tbaa !10
  %conv121 = fpext float %65 to double
  %call122 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %arraydecay120, i64 1023, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.173, i32 0, i32 0), double %conv121) #8
  %arraydecay123 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buff, i32 0, i32 0
  %data124 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %mbps, i32 0, i32 0
  store i8* %arraydecay123, i8** %data124, align 8, !tbaa !133
  %arraydecay125 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buff, i32 0, i32 0
  %call126 = call i64 @strlen(i8* %arraydecay125) #9
  %add127 = add i64 %call126, 1
  %conv128 = trunc i64 %add127 to i32
  %size129 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %mbps, i32 0, i32 1
  store i32 %conv128, i32* %size129, align 4, !tbaa !135
  %persistent130 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %mbps, i32 0, i32 2
  store i32 0, i32* %persistent130, align 4, !tbaa !136
  %66 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %67 = load i8*, i8** %pname, align 8, !tbaa !1
  %call131 = call i32 @param_write_string(%struct.gs_param_list_s* %66, i8* %67, %struct.gs_param_string_s* %mbps) #7
  store i32 %call131, i32* %code, align 4, !tbaa !5
  %68 = load i32, i32* %code, align 4, !tbaa !5
  %tobool132 = icmp ne i32 %68, 0
  br i1 %tobool132, label %if.then.133, label %if.end.134

if.then.133:                                      ; preds = %if.end.119
  %69 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %69, i32* %ecode, align 4, !tbaa !5
  br label %if.end.134

if.end.134:                                       ; preds = %if.then.133, %if.end.119
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.177, i32 0, i32 0), i8** %pname, align 8, !tbaa !1
  %arraydecay135 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buff, i32 0, i32 0
  %70 = load float, float* getelementptr inbounds ([2 x float], [2 x float]* @zoom, i32 0, i64 0), align 4, !tbaa !10
  %conv136 = fpext float %70 to double
  %call137 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %arraydecay135, i64 1023, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.173, i32 0, i32 0), double %conv136) #8
  %arraydecay138 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buff, i32 0, i32 0
  %data139 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %zmps, i32 0, i32 0
  store i8* %arraydecay138, i8** %data139, align 8, !tbaa !133
  %arraydecay140 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buff, i32 0, i32 0
  %call141 = call i64 @strlen(i8* %arraydecay140) #9
  %add142 = add i64 %call141, 1
  %conv143 = trunc i64 %add142 to i32
  %size144 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %zmps, i32 0, i32 1
  store i32 %conv143, i32* %size144, align 4, !tbaa !135
  %persistent145 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %zmps, i32 0, i32 2
  store i32 0, i32* %persistent145, align 4, !tbaa !136
  %71 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %72 = load i8*, i8** %pname, align 8, !tbaa !1
  %call146 = call i32 @param_write_string(%struct.gs_param_list_s* %71, i8* %72, %struct.gs_param_string_s* %zmps) #7
  store i32 %call146, i32* %code, align 4, !tbaa !5
  %73 = load i32, i32* %code, align 4, !tbaa !5
  %tobool147 = icmp ne i32 %73, 0
  br i1 %tobool147, label %if.then.148, label %if.end.149

if.then.148:                                      ; preds = %if.end.134
  %74 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %74, i32* %ecode, align 4, !tbaa !5
  br label %if.end.149

if.end.149:                                       ; preds = %if.then.148, %if.end.134
  %75 = load i32, i32* %ecode, align 4, !tbaa !5
  %76 = bitcast [1024 x i8]* %buff to i8*
  call void @llvm.lifetime.end(i64 1024, i8* %76) #2
  %77 = bitcast %struct.gs_param_string_s* %zmps to i8*
  call void @llvm.lifetime.end(i64 16, i8* %77) #2
  %78 = bitcast %struct.gs_param_string_s* %mbps to i8*
  call void @llvm.lifetime.end(i64 16, i8* %78) #2
  %79 = bitcast %struct.gs_param_string_s* %mrps to i8*
  call void @llvm.lifetime.end(i64 16, i8* %79) #2
  %80 = bitcast %struct.gs_param_string_s* %mtps to i8*
  call void @llvm.lifetime.end(i64 16, i8* %80) #2
  %81 = bitcast %struct.gs_param_string_s* %mlps to i8*
  call void @llvm.lifetime.end(i64 16, i8* %81) #2
  %82 = bitcast %struct.gs_param_string_s* %fips to i8*
  call void @llvm.lifetime.end(i64 16, i8* %82) #2
  %83 = bitcast %struct.gs_param_string_s* %dips to i8*
  call void @llvm.lifetime.end(i64 16, i8* %83) #2
  %84 = bitcast %struct.gs_param_string_s* %jips to i8*
  call void @llvm.lifetime.end(i64 16, i8* %84) #2
  %85 = bitcast %struct.gs_param_string_s* %pmps to i8*
  call void @llvm.lifetime.end(i64 16, i8* %85) #2
  %86 = bitcast %struct.gs_param_string_s* %vdps to i8*
  call void @llvm.lifetime.end(i64 16, i8* %86) #2
  %87 = bitcast i8** %pname to i8*
  call void @llvm.lifetime.end(i64 8, i8* %87) #2
  %88 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %88) #2
  %89 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %89) #2
  ret i32 %75
}

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #2

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #3

declare i32 @param_write_string(%struct.gs_param_list_s*, i8*, %struct.gs_param_string_s*) #1

; Function Attrs: nounwind uwtable
define internal i8* @opvp_alloc_string(i8** %destin, i8* %source) #0 {
entry:
  %retval = alloca i8*, align 8
  %destin.addr = alloca i8**, align 8
  %source.addr = alloca i8*, align 8
  store i8** %destin, i8*** %destin.addr, align 8, !tbaa !1
  store i8* %source, i8** %source.addr, align 8, !tbaa !1
  %0 = load i8**, i8*** %destin.addr, align 8, !tbaa !1
  %tobool = icmp ne i8** %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8**, i8*** %destin.addr, align 8, !tbaa !1
  %2 = load i8*, i8** %1, align 8, !tbaa !1
  %tobool1 = icmp ne i8* %2, null
  br i1 %tobool1, label %if.then.2, label %if.else.7

if.then.2:                                        ; preds = %if.end
  %3 = load i8*, i8** %source.addr, align 8, !tbaa !1
  %tobool3 = icmp ne i8* %3, null
  br i1 %tobool3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.then.2
  %4 = load i8**, i8*** %destin.addr, align 8, !tbaa !1
  %5 = load i8*, i8** %4, align 8, !tbaa !1
  %6 = load i8*, i8** %source.addr, align 8, !tbaa !1
  %call = call i64 @strlen(i8* %6) #9
  %add = add i64 %call, 1
  %call5 = call i8* @realloc(i8* %5, i64 %add) #8
  %7 = load i8**, i8*** %destin.addr, align 8, !tbaa !1
  store i8* %call5, i8** %7, align 8, !tbaa !1
  br label %if.end.6

if.else:                                          ; preds = %if.then.2
  %8 = load i8**, i8*** %destin.addr, align 8, !tbaa !1
  %9 = load i8*, i8** %8, align 8, !tbaa !1
  call void @free(i8* %9) #8
  %10 = load i8**, i8*** %destin.addr, align 8, !tbaa !1
  store i8* null, i8** %10, align 8, !tbaa !1
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.4
  br label %if.end.14

if.else.7:                                        ; preds = %if.end
  %11 = load i8*, i8** %source.addr, align 8, !tbaa !1
  %tobool8 = icmp ne i8* %11, null
  br i1 %tobool8, label %if.then.9, label %if.end.13

if.then.9:                                        ; preds = %if.else.7
  %12 = load i8*, i8** %source.addr, align 8, !tbaa !1
  %call10 = call i64 @strlen(i8* %12) #9
  %add11 = add i64 %call10, 1
  %call12 = call noalias i8* @malloc(i64 %add11) #8
  %13 = load i8**, i8*** %destin.addr, align 8, !tbaa !1
  store i8* %call12, i8** %13, align 8, !tbaa !1
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.9, %if.else.7
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.13, %if.end.6
  %14 = load i8**, i8*** %destin.addr, align 8, !tbaa !1
  %15 = load i8*, i8** %14, align 8, !tbaa !1
  %tobool15 = icmp ne i8* %15, null
  br i1 %tobool15, label %land.lhs.true, label %if.end.21

land.lhs.true:                                    ; preds = %if.end.14
  %16 = load i8*, i8** %source.addr, align 8, !tbaa !1
  %tobool16 = icmp ne i8* %16, null
  br i1 %tobool16, label %if.then.17, label %if.end.21

if.then.17:                                       ; preds = %land.lhs.true
  %17 = load i8**, i8*** %destin.addr, align 8, !tbaa !1
  %18 = load i8*, i8** %17, align 8, !tbaa !1
  %19 = load i8*, i8** %source.addr, align 8, !tbaa !1
  %cmp = icmp ne i8* %18, %19
  br i1 %cmp, label %if.then.18, label %if.end.20

if.then.18:                                       ; preds = %if.then.17
  %20 = load i8**, i8*** %destin.addr, align 8, !tbaa !1
  %21 = load i8*, i8** %20, align 8, !tbaa !1
  %22 = load i8*, i8** %source.addr, align 8, !tbaa !1
  %call19 = call i8* @strcpy(i8* %21, i8* %22) #8
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.18, %if.then.17
  br label %if.end.21

if.end.21:                                        ; preds = %if.end.20, %land.lhs.true, %if.end.14
  %23 = load i8**, i8*** %destin.addr, align 8, !tbaa !1
  %24 = load i8*, i8** %23, align 8, !tbaa !1
  store i8* %24, i8** %retval
  br label %return

return:                                           ; preds = %if.end.21, %if.then
  %25 = load i8*, i8** %retval
  ret i8* %25
}

; Function Attrs: nounwind
declare i8* @memset(i8*, i32, i64) #4

; Function Attrs: nounwind
declare i32 @snprintf(i8*, i64, i8*, ...) #4

; Function Attrs: nounwind
declare i8* @realloc(i8*, i64) #4

; Function Attrs: nounwind
declare void @free(i8*) #4

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #4

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8*) #4

; Function Attrs: nounwind uwtable
define internal i32 @_put_params(%struct.gs_param_list_s* %plist) #0 {
entry:
  %plist.addr = alloca %struct.gs_param_list_s*, align 8
  %code = alloca i32, align 4
  %ecode = alloca i32, align 4
  %pname = alloca i8*, align 8
  %buff = alloca i8*, align 8
  %vdps = alloca %struct.gs_param_string_s, align 8
  %pmps = alloca %struct.gs_param_string_s, align 8
  %jips = alloca %struct.gs_param_string_s, align 8
  %dips = alloca %struct.gs_param_string_s, align 8
  %fips = alloca %struct.gs_param_string_s, align 8
  %mlps = alloca %struct.gs_param_string_s, align 8
  %mtps = alloca %struct.gs_param_string_s, align 8
  %mrps = alloca %struct.gs_param_string_s, align 8
  %mbps = alloca %struct.gs_param_string_s, align 8
  %zmps = alloca %struct.gs_param_string_s, align 8
  store %struct.gs_param_list_s* %plist, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %0 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %2 = bitcast i8** %pname to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #2
  %3 = bitcast i8** %buff to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  store i8* null, i8** %buff, align 8, !tbaa !1
  %4 = bitcast %struct.gs_param_string_s* %vdps to i8*
  call void @llvm.lifetime.start(i64 16, i8* %4) #2
  %5 = bitcast %struct.gs_param_string_s* %pmps to i8*
  call void @llvm.lifetime.start(i64 16, i8* %5) #2
  %6 = bitcast %struct.gs_param_string_s* %jips to i8*
  call void @llvm.lifetime.start(i64 16, i8* %6) #2
  %7 = bitcast %struct.gs_param_string_s* %dips to i8*
  call void @llvm.lifetime.start(i64 16, i8* %7) #2
  %8 = bitcast %struct.gs_param_string_s* %fips to i8*
  call void @llvm.lifetime.start(i64 16, i8* %8) #2
  %9 = bitcast %struct.gs_param_string_s* %mlps to i8*
  call void @llvm.lifetime.start(i64 16, i8* %9) #2
  %10 = bitcast %struct.gs_param_string_s* %mtps to i8*
  call void @llvm.lifetime.start(i64 16, i8* %10) #2
  %11 = bitcast %struct.gs_param_string_s* %mrps to i8*
  call void @llvm.lifetime.start(i64 16, i8* %11) #2
  %12 = bitcast %struct.gs_param_string_s* %mbps to i8*
  call void @llvm.lifetime.start(i64 16, i8* %12) #2
  %13 = bitcast %struct.gs_param_string_s* %zmps to i8*
  call void @llvm.lifetime.start(i64 16, i8* %13) #2
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.162, i32 0, i32 0), i8** %pname, align 8, !tbaa !1
  %14 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %15 = load i8*, i8** %pname, align 8, !tbaa !1
  %call = call i32 @param_read_string(%struct.gs_param_list_s* %14, i8* %15, %struct.gs_param_string_s* %vdps) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %16 = load i32, i32* %code, align 4, !tbaa !5
  switch i32 %16, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.epilog
  ]

sw.bb:                                            ; preds = %entry
  %17 = load i8*, i8** %buff, align 8, !tbaa !1
  %size = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %vdps, i32 0, i32 1
  %18 = load i32, i32* %size, align 4, !tbaa !135
  %add = add i32 %18, 1
  %conv = zext i32 %add to i64
  %call1 = call i8* @realloc(i8* %17, i64 %conv) #8
  store i8* %call1, i8** %buff, align 8, !tbaa !1
  %19 = load i8*, i8** %buff, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %vdps, i32 0, i32 0
  %20 = load i8*, i8** %data, align 8, !tbaa !133
  %size2 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %vdps, i32 0, i32 1
  %21 = load i32, i32* %size2, align 4, !tbaa !135
  %conv3 = zext i32 %21 to i64
  %call4 = call i8* @memcpy(i8* %19, i8* %20, i64 %conv3) #8
  %size5 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %vdps, i32 0, i32 1
  %22 = load i32, i32* %size5, align 4, !tbaa !135
  %idxprom = zext i32 %22 to i64
  %23 = load i8*, i8** %buff, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds i8, i8* %23, i64 %idxprom
  store i8 0, i8* %arrayidx, align 1, !tbaa !64
  %24 = load i8*, i8** %buff, align 8, !tbaa !1
  %call6 = call i8* @opvp_alloc_string(i8** @vectorDriver, i8* %24) #7
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %25 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %25, i32* %ecode, align 4, !tbaa !5
  %26 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gs_param_list_s, %struct.gs_param_list_s* %26, i32 0, i32 0
  %27 = load %struct.gs_param_list_procs_s*, %struct.gs_param_list_procs_s** %procs, align 8, !tbaa !137
  %signal_error = getelementptr inbounds %struct.gs_param_list_procs_s, %struct.gs_param_list_procs_s* %27, i32 0, i32 7
  %28 = load i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*, i8*, i32)** %signal_error, align 8, !tbaa !139
  %29 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %30 = load i8*, i8** %pname, align 8, !tbaa !1
  %31 = load i32, i32* %ecode, align 4, !tbaa !5
  %call7 = call i32 %28(%struct.gs_param_list_s* %29, i8* %30, i32 %31) #7
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %entry, %sw.bb
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.163, i32 0, i32 0), i8** %pname, align 8, !tbaa !1
  %32 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %33 = load i8*, i8** %pname, align 8, !tbaa !1
  %call8 = call i32 @param_read_string(%struct.gs_param_list_s* %32, i8* %33, %struct.gs_param_string_s* %pmps) #7
  store i32 %call8, i32* %code, align 4, !tbaa !5
  %34 = load i32, i32* %code, align 4, !tbaa !5
  switch i32 %34, label %sw.default.22 [
    i32 0, label %sw.bb.9
    i32 1, label %sw.epilog.26
  ]

sw.bb.9:                                          ; preds = %sw.epilog
  %35 = load i8*, i8** %buff, align 8, !tbaa !1
  %size10 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmps, i32 0, i32 1
  %36 = load i32, i32* %size10, align 4, !tbaa !135
  %add11 = add i32 %36, 1
  %conv12 = zext i32 %add11 to i64
  %call13 = call i8* @realloc(i8* %35, i64 %conv12) #8
  store i8* %call13, i8** %buff, align 8, !tbaa !1
  %37 = load i8*, i8** %buff, align 8, !tbaa !1
  %data14 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmps, i32 0, i32 0
  %38 = load i8*, i8** %data14, align 8, !tbaa !133
  %size15 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmps, i32 0, i32 1
  %39 = load i32, i32* %size15, align 4, !tbaa !135
  %conv16 = zext i32 %39 to i64
  %call17 = call i8* @memcpy(i8* %37, i8* %38, i64 %conv16) #8
  %size18 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %pmps, i32 0, i32 1
  %40 = load i32, i32* %size18, align 4, !tbaa !135
  %idxprom19 = zext i32 %40 to i64
  %41 = load i8*, i8** %buff, align 8, !tbaa !1
  %arrayidx20 = getelementptr inbounds i8, i8* %41, i64 %idxprom19
  store i8 0, i8* %arrayidx20, align 1, !tbaa !64
  %42 = load i8*, i8** %buff, align 8, !tbaa !1
  %call21 = call i8* @opvp_alloc_string(i8** @printerModel, i8* %42) #7
  br label %sw.epilog.26

sw.default.22:                                    ; preds = %sw.epilog
  %43 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %43, i32* %ecode, align 4, !tbaa !5
  %44 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %procs23 = getelementptr inbounds %struct.gs_param_list_s, %struct.gs_param_list_s* %44, i32 0, i32 0
  %45 = load %struct.gs_param_list_procs_s*, %struct.gs_param_list_procs_s** %procs23, align 8, !tbaa !137
  %signal_error24 = getelementptr inbounds %struct.gs_param_list_procs_s, %struct.gs_param_list_procs_s* %45, i32 0, i32 7
  %46 = load i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*, i8*, i32)** %signal_error24, align 8, !tbaa !139
  %47 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %48 = load i8*, i8** %pname, align 8, !tbaa !1
  %49 = load i32, i32* %ecode, align 4, !tbaa !5
  %call25 = call i32 %46(%struct.gs_param_list_s* %47, i8* %48, i32 %49) #7
  br label %sw.epilog.26

sw.epilog.26:                                     ; preds = %sw.default.22, %sw.epilog, %sw.bb.9
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.164, i32 0, i32 0), i8** %pname, align 8, !tbaa !1
  %50 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %51 = load i8*, i8** %pname, align 8, !tbaa !1
  %call27 = call i32 @param_read_string(%struct.gs_param_list_s* %50, i8* %51, %struct.gs_param_string_s* %jips) #7
  store i32 %call27, i32* %code, align 4, !tbaa !5
  %52 = load i32, i32* %code, align 4, !tbaa !5
  switch i32 %52, label %sw.default.41 [
    i32 0, label %sw.bb.28
    i32 1, label %sw.epilog.45
  ]

sw.bb.28:                                         ; preds = %sw.epilog.26
  %53 = load i8*, i8** %buff, align 8, !tbaa !1
  %size29 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %jips, i32 0, i32 1
  %54 = load i32, i32* %size29, align 4, !tbaa !135
  %add30 = add i32 %54, 1
  %conv31 = zext i32 %add30 to i64
  %call32 = call i8* @realloc(i8* %53, i64 %conv31) #8
  store i8* %call32, i8** %buff, align 8, !tbaa !1
  %55 = load i8*, i8** %buff, align 8, !tbaa !1
  %data33 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %jips, i32 0, i32 0
  %56 = load i8*, i8** %data33, align 8, !tbaa !133
  %size34 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %jips, i32 0, i32 1
  %57 = load i32, i32* %size34, align 4, !tbaa !135
  %conv35 = zext i32 %57 to i64
  %call36 = call i8* @memcpy(i8* %55, i8* %56, i64 %conv35) #8
  %size37 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %jips, i32 0, i32 1
  %58 = load i32, i32* %size37, align 4, !tbaa !135
  %idxprom38 = zext i32 %58 to i64
  %59 = load i8*, i8** %buff, align 8, !tbaa !1
  %arrayidx39 = getelementptr inbounds i8, i8* %59, i64 %idxprom38
  store i8 0, i8* %arrayidx39, align 1, !tbaa !64
  %60 = load i8*, i8** %buff, align 8, !tbaa !1
  %call40 = call i8* @opvp_alloc_string(i8** @jobInfo, i8* %60) #7
  br label %sw.epilog.45

sw.default.41:                                    ; preds = %sw.epilog.26
  %61 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %61, i32* %ecode, align 4, !tbaa !5
  %62 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %procs42 = getelementptr inbounds %struct.gs_param_list_s, %struct.gs_param_list_s* %62, i32 0, i32 0
  %63 = load %struct.gs_param_list_procs_s*, %struct.gs_param_list_procs_s** %procs42, align 8, !tbaa !137
  %signal_error43 = getelementptr inbounds %struct.gs_param_list_procs_s, %struct.gs_param_list_procs_s* %63, i32 0, i32 7
  %64 = load i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*, i8*, i32)** %signal_error43, align 8, !tbaa !139
  %65 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %66 = load i8*, i8** %pname, align 8, !tbaa !1
  %67 = load i32, i32* %ecode, align 4, !tbaa !5
  %call44 = call i32 %64(%struct.gs_param_list_s* %65, i8* %66, i32 %67) #7
  br label %sw.epilog.45

sw.epilog.45:                                     ; preds = %sw.default.41, %sw.epilog.26, %sw.bb.28
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.165, i32 0, i32 0), i8** %pname, align 8, !tbaa !1
  %68 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %69 = load i8*, i8** %pname, align 8, !tbaa !1
  %call46 = call i32 @param_read_string(%struct.gs_param_list_s* %68, i8* %69, %struct.gs_param_string_s* %dips) #7
  store i32 %call46, i32* %code, align 4, !tbaa !5
  %70 = load i32, i32* %code, align 4, !tbaa !5
  switch i32 %70, label %sw.default.60 [
    i32 0, label %sw.bb.47
    i32 1, label %sw.epilog.64
  ]

sw.bb.47:                                         ; preds = %sw.epilog.45
  %71 = load i8*, i8** %buff, align 8, !tbaa !1
  %size48 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %dips, i32 0, i32 1
  %72 = load i32, i32* %size48, align 4, !tbaa !135
  %add49 = add i32 %72, 1
  %conv50 = zext i32 %add49 to i64
  %call51 = call i8* @realloc(i8* %71, i64 %conv50) #8
  store i8* %call51, i8** %buff, align 8, !tbaa !1
  %73 = load i8*, i8** %buff, align 8, !tbaa !1
  %data52 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %dips, i32 0, i32 0
  %74 = load i8*, i8** %data52, align 8, !tbaa !133
  %size53 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %dips, i32 0, i32 1
  %75 = load i32, i32* %size53, align 4, !tbaa !135
  %conv54 = zext i32 %75 to i64
  %call55 = call i8* @memcpy(i8* %73, i8* %74, i64 %conv54) #8
  %size56 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %dips, i32 0, i32 1
  %76 = load i32, i32* %size56, align 4, !tbaa !135
  %idxprom57 = zext i32 %76 to i64
  %77 = load i8*, i8** %buff, align 8, !tbaa !1
  %arrayidx58 = getelementptr inbounds i8, i8* %77, i64 %idxprom57
  store i8 0, i8* %arrayidx58, align 1, !tbaa !64
  %78 = load i8*, i8** %buff, align 8, !tbaa !1
  %call59 = call i8* @opvp_alloc_string(i8** @docInfo, i8* %78) #7
  br label %sw.epilog.64

sw.default.60:                                    ; preds = %sw.epilog.45
  %79 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %79, i32* %ecode, align 4, !tbaa !5
  %80 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %procs61 = getelementptr inbounds %struct.gs_param_list_s, %struct.gs_param_list_s* %80, i32 0, i32 0
  %81 = load %struct.gs_param_list_procs_s*, %struct.gs_param_list_procs_s** %procs61, align 8, !tbaa !137
  %signal_error62 = getelementptr inbounds %struct.gs_param_list_procs_s, %struct.gs_param_list_procs_s* %81, i32 0, i32 7
  %82 = load i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*, i8*, i32)** %signal_error62, align 8, !tbaa !139
  %83 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %84 = load i8*, i8** %pname, align 8, !tbaa !1
  %85 = load i32, i32* %ecode, align 4, !tbaa !5
  %call63 = call i32 %82(%struct.gs_param_list_s* %83, i8* %84, i32 %85) #7
  br label %sw.epilog.64

sw.epilog.64:                                     ; preds = %sw.default.60, %sw.epilog.45, %sw.bb.47
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.171, i32 0, i32 0), i8** %pname, align 8, !tbaa !1
  %86 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %87 = load i8*, i8** %pname, align 8, !tbaa !1
  %call65 = call i32 @param_read_string(%struct.gs_param_list_s* %86, i8* %87, %struct.gs_param_string_s* %fips) #7
  store i32 %call65, i32* %code, align 4, !tbaa !5
  %88 = load i32, i32* %code, align 4, !tbaa !5
  switch i32 %88, label %sw.default.105 [
    i32 0, label %sw.bb.66
    i32 1, label %sw.epilog.109
  ]

sw.bb.66:                                         ; preds = %sw.epilog.64
  %89 = load i8*, i8** %buff, align 8, !tbaa !1
  %size67 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %fips, i32 0, i32 1
  %90 = load i32, i32* %size67, align 4, !tbaa !135
  %add68 = add i32 %90, 1
  %conv69 = zext i32 %add68 to i64
  %call70 = call i8* @realloc(i8* %89, i64 %conv69) #8
  store i8* %call70, i8** %buff, align 8, !tbaa !1
  %91 = load i8*, i8** %buff, align 8, !tbaa !1
  %data71 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %fips, i32 0, i32 0
  %92 = load i8*, i8** %data71, align 8, !tbaa !133
  %size72 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %fips, i32 0, i32 1
  %93 = load i32, i32* %size72, align 4, !tbaa !135
  %conv73 = zext i32 %93 to i64
  %call74 = call i8* @memcpy(i8* %91, i8* %92, i64 %conv73) #8
  %size75 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %fips, i32 0, i32 1
  %94 = load i32, i32* %size75, align 4, !tbaa !135
  %idxprom76 = zext i32 %94 to i64
  %95 = load i8*, i8** %buff, align 8, !tbaa !1
  %arrayidx77 = getelementptr inbounds i8, i8* %95, i64 %idxprom76
  store i8 0, i8* %arrayidx77, align 1, !tbaa !64
  %96 = load i8*, i8** %buff, align 8, !tbaa !1
  %call78 = call i8* @opvp_alloc_string(i8** @fastImage, i8* %96) #7
  %97 = load i8*, i8** @fastImage, align 8, !tbaa !1
  %call79 = call i32 @strcasecmp(i8* %97, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.166, i32 0, i32 0)) #9
  %cmp = icmp eq i32 %call79, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %sw.bb.66
  store i32 1, i32* @FastImageMode, align 4, !tbaa !64
  br label %if.end.104

if.else:                                          ; preds = %sw.bb.66
  %98 = load i8*, i8** @fastImage, align 8, !tbaa !1
  %call81 = call i32 @strncasecmp(i8* %98, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.178, i32 0, i32 0), i64 8) #9
  %cmp82 = icmp eq i32 %call81, 0
  br i1 %cmp82, label %if.then.84, label %if.else.85

if.then.84:                                       ; preds = %if.else
  store i32 2, i32* @FastImageMode, align 4, !tbaa !64
  br label %if.end.103

if.else.85:                                       ; preds = %if.else
  %99 = load i8*, i8** @fastImage, align 8, !tbaa !1
  %call86 = call i32 @strncasecmp(i8* %99, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.179, i32 0, i32 0), i64 5) #9
  %cmp87 = icmp eq i32 %call86, 0
  br i1 %cmp87, label %if.then.89, label %if.else.90

if.then.89:                                       ; preds = %if.else.85
  store i32 3, i32* @FastImageMode, align 4, !tbaa !64
  br label %if.end.102

if.else.90:                                       ; preds = %if.else.85
  %100 = load i8*, i8** @fastImage, align 8, !tbaa !1
  %call91 = call i32 @strncasecmp(i8* %100, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.180, i32 0, i32 0), i64 7) #9
  %cmp92 = icmp eq i32 %call91, 0
  br i1 %cmp92, label %if.then.94, label %if.else.95

if.then.94:                                       ; preds = %if.else.90
  store i32 4, i32* @FastImageMode, align 4, !tbaa !64
  br label %if.end.101

if.else.95:                                       ; preds = %if.else.90
  %101 = load i8*, i8** @fastImage, align 8, !tbaa !1
  %call96 = call i32 @strncasecmp(i8* %101, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.170, i32 0, i32 0), i64 3) #9
  %cmp97 = icmp eq i32 %call96, 0
  br i1 %cmp97, label %if.then.99, label %if.else.100

if.then.99:                                       ; preds = %if.else.95
  store i32 5, i32* @FastImageMode, align 4, !tbaa !64
  br label %if.end

if.else.100:                                      ; preds = %if.else.95
  store i32 0, i32* @FastImageMode, align 4, !tbaa !64
  br label %if.end

if.end:                                           ; preds = %if.else.100, %if.then.99
  br label %if.end.101

if.end.101:                                       ; preds = %if.end, %if.then.94
  br label %if.end.102

if.end.102:                                       ; preds = %if.end.101, %if.then.89
  br label %if.end.103

if.end.103:                                       ; preds = %if.end.102, %if.then.84
  br label %if.end.104

if.end.104:                                       ; preds = %if.end.103, %if.then
  br label %sw.epilog.109

sw.default.105:                                   ; preds = %sw.epilog.64
  %102 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %102, i32* %ecode, align 4, !tbaa !5
  %103 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %procs106 = getelementptr inbounds %struct.gs_param_list_s, %struct.gs_param_list_s* %103, i32 0, i32 0
  %104 = load %struct.gs_param_list_procs_s*, %struct.gs_param_list_procs_s** %procs106, align 8, !tbaa !137
  %signal_error107 = getelementptr inbounds %struct.gs_param_list_procs_s, %struct.gs_param_list_procs_s* %104, i32 0, i32 7
  %105 = load i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*, i8*, i32)** %signal_error107, align 8, !tbaa !139
  %106 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %107 = load i8*, i8** %pname, align 8, !tbaa !1
  %108 = load i32, i32* %ecode, align 4, !tbaa !5
  %call108 = call i32 %105(%struct.gs_param_list_s* %106, i8* %107, i32 %108) #7
  br label %sw.epilog.109

sw.epilog.109:                                    ; preds = %sw.default.105, %sw.epilog.64, %if.end.104
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.172, i32 0, i32 0), i8** %pname, align 8, !tbaa !1
  %109 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %110 = load i8*, i8** %pname, align 8, !tbaa !1
  %call110 = call i32 @param_read_string(%struct.gs_param_list_s* %109, i8* %110, %struct.gs_param_string_s* %mlps) #7
  store i32 %call110, i32* %code, align 4, !tbaa !5
  %111 = load i32, i32* %code, align 4, !tbaa !5
  switch i32 %111, label %sw.default.125 [
    i32 0, label %sw.bb.111
    i32 1, label %sw.epilog.129
  ]

sw.bb.111:                                        ; preds = %sw.epilog.109
  %112 = load i8*, i8** %buff, align 8, !tbaa !1
  %size112 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %mlps, i32 0, i32 1
  %113 = load i32, i32* %size112, align 4, !tbaa !135
  %add113 = add i32 %113, 1
  %conv114 = zext i32 %add113 to i64
  %call115 = call i8* @realloc(i8* %112, i64 %conv114) #8
  store i8* %call115, i8** %buff, align 8, !tbaa !1
  %114 = load i8*, i8** %buff, align 8, !tbaa !1
  %data116 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %mlps, i32 0, i32 0
  %115 = load i8*, i8** %data116, align 8, !tbaa !133
  %size117 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %mlps, i32 0, i32 1
  %116 = load i32, i32* %size117, align 4, !tbaa !135
  %conv118 = zext i32 %116 to i64
  %call119 = call i8* @memcpy(i8* %114, i8* %115, i64 %conv118) #8
  %size120 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %mlps, i32 0, i32 1
  %117 = load i32, i32* %size120, align 4, !tbaa !135
  %idxprom121 = zext i32 %117 to i64
  %118 = load i8*, i8** %buff, align 8, !tbaa !1
  %arrayidx122 = getelementptr inbounds i8, i8* %118, i64 %idxprom121
  store i8 0, i8* %arrayidx122, align 1, !tbaa !64
  %119 = load i8*, i8** %buff, align 8, !tbaa !1
  %call123 = call double @atof(i8* %119) #9
  %conv124 = fptrunc double %call123 to float
  store float %conv124, float* getelementptr inbounds ([4 x float], [4 x float]* @margins, i32 0, i64 0), align 4, !tbaa !10
  br label %sw.epilog.129

sw.default.125:                                   ; preds = %sw.epilog.109
  %120 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %120, i32* %ecode, align 4, !tbaa !5
  %121 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %procs126 = getelementptr inbounds %struct.gs_param_list_s, %struct.gs_param_list_s* %121, i32 0, i32 0
  %122 = load %struct.gs_param_list_procs_s*, %struct.gs_param_list_procs_s** %procs126, align 8, !tbaa !137
  %signal_error127 = getelementptr inbounds %struct.gs_param_list_procs_s, %struct.gs_param_list_procs_s* %122, i32 0, i32 7
  %123 = load i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*, i8*, i32)** %signal_error127, align 8, !tbaa !139
  %124 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %125 = load i8*, i8** %pname, align 8, !tbaa !1
  %126 = load i32, i32* %ecode, align 4, !tbaa !5
  %call128 = call i32 %123(%struct.gs_param_list_s* %124, i8* %125, i32 %126) #7
  br label %sw.epilog.129

sw.epilog.129:                                    ; preds = %sw.default.125, %sw.epilog.109, %sw.bb.111
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.174, i32 0, i32 0), i8** %pname, align 8, !tbaa !1
  %127 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %128 = load i8*, i8** %pname, align 8, !tbaa !1
  %call130 = call i32 @param_read_string(%struct.gs_param_list_s* %127, i8* %128, %struct.gs_param_string_s* %mtps) #7
  store i32 %call130, i32* %code, align 4, !tbaa !5
  %129 = load i32, i32* %code, align 4, !tbaa !5
  switch i32 %129, label %sw.default.145 [
    i32 0, label %sw.bb.131
    i32 1, label %sw.epilog.149
  ]

sw.bb.131:                                        ; preds = %sw.epilog.129
  %130 = load i8*, i8** %buff, align 8, !tbaa !1
  %size132 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %mtps, i32 0, i32 1
  %131 = load i32, i32* %size132, align 4, !tbaa !135
  %add133 = add i32 %131, 1
  %conv134 = zext i32 %add133 to i64
  %call135 = call i8* @realloc(i8* %130, i64 %conv134) #8
  store i8* %call135, i8** %buff, align 8, !tbaa !1
  %132 = load i8*, i8** %buff, align 8, !tbaa !1
  %data136 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %mtps, i32 0, i32 0
  %133 = load i8*, i8** %data136, align 8, !tbaa !133
  %size137 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %mtps, i32 0, i32 1
  %134 = load i32, i32* %size137, align 4, !tbaa !135
  %conv138 = zext i32 %134 to i64
  %call139 = call i8* @memcpy(i8* %132, i8* %133, i64 %conv138) #8
  %size140 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %mtps, i32 0, i32 1
  %135 = load i32, i32* %size140, align 4, !tbaa !135
  %idxprom141 = zext i32 %135 to i64
  %136 = load i8*, i8** %buff, align 8, !tbaa !1
  %arrayidx142 = getelementptr inbounds i8, i8* %136, i64 %idxprom141
  store i8 0, i8* %arrayidx142, align 1, !tbaa !64
  %137 = load i8*, i8** %buff, align 8, !tbaa !1
  %call143 = call double @atof(i8* %137) #9
  %conv144 = fptrunc double %call143 to float
  store float %conv144, float* getelementptr inbounds ([4 x float], [4 x float]* @margins, i32 0, i64 3), align 4, !tbaa !10
  br label %sw.epilog.149

sw.default.145:                                   ; preds = %sw.epilog.129
  %138 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %138, i32* %ecode, align 4, !tbaa !5
  %139 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %procs146 = getelementptr inbounds %struct.gs_param_list_s, %struct.gs_param_list_s* %139, i32 0, i32 0
  %140 = load %struct.gs_param_list_procs_s*, %struct.gs_param_list_procs_s** %procs146, align 8, !tbaa !137
  %signal_error147 = getelementptr inbounds %struct.gs_param_list_procs_s, %struct.gs_param_list_procs_s* %140, i32 0, i32 7
  %141 = load i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*, i8*, i32)** %signal_error147, align 8, !tbaa !139
  %142 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %143 = load i8*, i8** %pname, align 8, !tbaa !1
  %144 = load i32, i32* %ecode, align 4, !tbaa !5
  %call148 = call i32 %141(%struct.gs_param_list_s* %142, i8* %143, i32 %144) #7
  br label %sw.epilog.149

sw.epilog.149:                                    ; preds = %sw.default.145, %sw.epilog.129, %sw.bb.131
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.175, i32 0, i32 0), i8** %pname, align 8, !tbaa !1
  %145 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %146 = load i8*, i8** %pname, align 8, !tbaa !1
  %call150 = call i32 @param_read_string(%struct.gs_param_list_s* %145, i8* %146, %struct.gs_param_string_s* %mrps) #7
  store i32 %call150, i32* %code, align 4, !tbaa !5
  %147 = load i32, i32* %code, align 4, !tbaa !5
  switch i32 %147, label %sw.default.165 [
    i32 0, label %sw.bb.151
    i32 1, label %sw.epilog.169
  ]

sw.bb.151:                                        ; preds = %sw.epilog.149
  %148 = load i8*, i8** %buff, align 8, !tbaa !1
  %size152 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %mrps, i32 0, i32 1
  %149 = load i32, i32* %size152, align 4, !tbaa !135
  %add153 = add i32 %149, 1
  %conv154 = zext i32 %add153 to i64
  %call155 = call i8* @realloc(i8* %148, i64 %conv154) #8
  store i8* %call155, i8** %buff, align 8, !tbaa !1
  %150 = load i8*, i8** %buff, align 8, !tbaa !1
  %data156 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %mrps, i32 0, i32 0
  %151 = load i8*, i8** %data156, align 8, !tbaa !133
  %size157 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %mrps, i32 0, i32 1
  %152 = load i32, i32* %size157, align 4, !tbaa !135
  %conv158 = zext i32 %152 to i64
  %call159 = call i8* @memcpy(i8* %150, i8* %151, i64 %conv158) #8
  %size160 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %mrps, i32 0, i32 1
  %153 = load i32, i32* %size160, align 4, !tbaa !135
  %idxprom161 = zext i32 %153 to i64
  %154 = load i8*, i8** %buff, align 8, !tbaa !1
  %arrayidx162 = getelementptr inbounds i8, i8* %154, i64 %idxprom161
  store i8 0, i8* %arrayidx162, align 1, !tbaa !64
  %155 = load i8*, i8** %buff, align 8, !tbaa !1
  %call163 = call double @atof(i8* %155) #9
  %conv164 = fptrunc double %call163 to float
  store float %conv164, float* getelementptr inbounds ([4 x float], [4 x float]* @margins, i32 0, i64 2), align 4, !tbaa !10
  br label %sw.epilog.169

sw.default.165:                                   ; preds = %sw.epilog.149
  %156 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %156, i32* %ecode, align 4, !tbaa !5
  %157 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %procs166 = getelementptr inbounds %struct.gs_param_list_s, %struct.gs_param_list_s* %157, i32 0, i32 0
  %158 = load %struct.gs_param_list_procs_s*, %struct.gs_param_list_procs_s** %procs166, align 8, !tbaa !137
  %signal_error167 = getelementptr inbounds %struct.gs_param_list_procs_s, %struct.gs_param_list_procs_s* %158, i32 0, i32 7
  %159 = load i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*, i8*, i32)** %signal_error167, align 8, !tbaa !139
  %160 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %161 = load i8*, i8** %pname, align 8, !tbaa !1
  %162 = load i32, i32* %ecode, align 4, !tbaa !5
  %call168 = call i32 %159(%struct.gs_param_list_s* %160, i8* %161, i32 %162) #7
  br label %sw.epilog.169

sw.epilog.169:                                    ; preds = %sw.default.165, %sw.epilog.149, %sw.bb.151
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.176, i32 0, i32 0), i8** %pname, align 8, !tbaa !1
  %163 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %164 = load i8*, i8** %pname, align 8, !tbaa !1
  %call170 = call i32 @param_read_string(%struct.gs_param_list_s* %163, i8* %164, %struct.gs_param_string_s* %mbps) #7
  store i32 %call170, i32* %code, align 4, !tbaa !5
  %165 = load i32, i32* %code, align 4, !tbaa !5
  switch i32 %165, label %sw.default.185 [
    i32 0, label %sw.bb.171
    i32 1, label %sw.epilog.189
  ]

sw.bb.171:                                        ; preds = %sw.epilog.169
  %166 = load i8*, i8** %buff, align 8, !tbaa !1
  %size172 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %mbps, i32 0, i32 1
  %167 = load i32, i32* %size172, align 4, !tbaa !135
  %add173 = add i32 %167, 1
  %conv174 = zext i32 %add173 to i64
  %call175 = call i8* @realloc(i8* %166, i64 %conv174) #8
  store i8* %call175, i8** %buff, align 8, !tbaa !1
  %168 = load i8*, i8** %buff, align 8, !tbaa !1
  %data176 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %mbps, i32 0, i32 0
  %169 = load i8*, i8** %data176, align 8, !tbaa !133
  %size177 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %mbps, i32 0, i32 1
  %170 = load i32, i32* %size177, align 4, !tbaa !135
  %conv178 = zext i32 %170 to i64
  %call179 = call i8* @memcpy(i8* %168, i8* %169, i64 %conv178) #8
  %size180 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %mbps, i32 0, i32 1
  %171 = load i32, i32* %size180, align 4, !tbaa !135
  %idxprom181 = zext i32 %171 to i64
  %172 = load i8*, i8** %buff, align 8, !tbaa !1
  %arrayidx182 = getelementptr inbounds i8, i8* %172, i64 %idxprom181
  store i8 0, i8* %arrayidx182, align 1, !tbaa !64
  %173 = load i8*, i8** %buff, align 8, !tbaa !1
  %call183 = call double @atof(i8* %173) #9
  %conv184 = fptrunc double %call183 to float
  store float %conv184, float* getelementptr inbounds ([4 x float], [4 x float]* @margins, i32 0, i64 1), align 4, !tbaa !10
  br label %sw.epilog.189

sw.default.185:                                   ; preds = %sw.epilog.169
  %174 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %174, i32* %ecode, align 4, !tbaa !5
  %175 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %procs186 = getelementptr inbounds %struct.gs_param_list_s, %struct.gs_param_list_s* %175, i32 0, i32 0
  %176 = load %struct.gs_param_list_procs_s*, %struct.gs_param_list_procs_s** %procs186, align 8, !tbaa !137
  %signal_error187 = getelementptr inbounds %struct.gs_param_list_procs_s, %struct.gs_param_list_procs_s* %176, i32 0, i32 7
  %177 = load i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*, i8*, i32)** %signal_error187, align 8, !tbaa !139
  %178 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %179 = load i8*, i8** %pname, align 8, !tbaa !1
  %180 = load i32, i32* %ecode, align 4, !tbaa !5
  %call188 = call i32 %177(%struct.gs_param_list_s* %178, i8* %179, i32 %180) #7
  br label %sw.epilog.189

sw.epilog.189:                                    ; preds = %sw.default.185, %sw.epilog.169, %sw.bb.171
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.177, i32 0, i32 0), i8** %pname, align 8, !tbaa !1
  %181 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %182 = load i8*, i8** %pname, align 8, !tbaa !1
  %call190 = call i32 @param_read_string(%struct.gs_param_list_s* %181, i8* %182, %struct.gs_param_string_s* %zmps) #7
  store i32 %call190, i32* %code, align 4, !tbaa !5
  %183 = load i32, i32* %code, align 4, !tbaa !5
  switch i32 %183, label %sw.default.214 [
    i32 0, label %sw.bb.191
    i32 1, label %sw.epilog.218
  ]

sw.bb.191:                                        ; preds = %sw.epilog.189
  %184 = load i8*, i8** %buff, align 8, !tbaa !1
  %size192 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %zmps, i32 0, i32 1
  %185 = load i32, i32* %size192, align 4, !tbaa !135
  %add193 = add i32 %185, 1
  %conv194 = zext i32 %add193 to i64
  %call195 = call i8* @realloc(i8* %184, i64 %conv194) #8
  store i8* %call195, i8** %buff, align 8, !tbaa !1
  %186 = load i8*, i8** %buff, align 8, !tbaa !1
  %data196 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %zmps, i32 0, i32 0
  %187 = load i8*, i8** %data196, align 8, !tbaa !133
  %size197 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %zmps, i32 0, i32 1
  %188 = load i32, i32* %size197, align 4, !tbaa !135
  %conv198 = zext i32 %188 to i64
  %call199 = call i8* @memcpy(i8* %186, i8* %187, i64 %conv198) #8
  %size200 = getelementptr inbounds %struct.gs_param_string_s, %struct.gs_param_string_s* %zmps, i32 0, i32 1
  %189 = load i32, i32* %size200, align 4, !tbaa !135
  %idxprom201 = zext i32 %189 to i64
  %190 = load i8*, i8** %buff, align 8, !tbaa !1
  %arrayidx202 = getelementptr inbounds i8, i8* %190, i64 %idxprom201
  store i8 0, i8* %arrayidx202, align 1, !tbaa !64
  %191 = load i8*, i8** %buff, align 8, !tbaa !1
  %call203 = call i32 @strncasecmp(i8* %191, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.181, i32 0, i32 0), i64 4) #9
  %tobool = icmp ne i32 %call203, 0
  br i1 %tobool, label %if.then.204, label %if.else.212

if.then.204:                                      ; preds = %sw.bb.191
  %192 = load i8*, i8** %buff, align 8, !tbaa !1
  %call205 = call double @atof(i8* %192) #9
  %conv206 = fptrunc double %call205 to float
  store float %conv206, float* getelementptr inbounds ([2 x float], [2 x float]* @zoom, i32 0, i64 0), align 4, !tbaa !10
  %193 = load float, float* getelementptr inbounds ([2 x float], [2 x float]* @zoom, i32 0, i64 0), align 4, !tbaa !10
  %cmp207 = fcmp ogt float %193, 0.000000e+00
  br i1 %cmp207, label %if.then.209, label %if.else.210

if.then.209:                                      ; preds = %if.then.204
  %194 = load float, float* getelementptr inbounds ([2 x float], [2 x float]* @zoom, i32 0, i64 0), align 4, !tbaa !10
  store float %194, float* getelementptr inbounds ([2 x float], [2 x float]* @zoom, i32 0, i64 1), align 4, !tbaa !10
  br label %if.end.211

if.else.210:                                      ; preds = %if.then.204
  store float 1.000000e+00, float* getelementptr inbounds ([2 x float], [2 x float]* @zoom, i32 0, i64 1), align 4, !tbaa !10
  store float 1.000000e+00, float* getelementptr inbounds ([2 x float], [2 x float]* @zoom, i32 0, i64 0), align 4, !tbaa !10
  br label %if.end.211

if.end.211:                                       ; preds = %if.else.210, %if.then.209
  br label %if.end.213

if.else.212:                                      ; preds = %sw.bb.191
  store float 1.000000e+00, float* getelementptr inbounds ([2 x float], [2 x float]* @zoom, i32 0, i64 1), align 4, !tbaa !10
  store float 1.000000e+00, float* getelementptr inbounds ([2 x float], [2 x float]* @zoom, i32 0, i64 0), align 4, !tbaa !10
  store i32 1, i32* @zoomAuto, align 4, !tbaa !5
  br label %if.end.213

if.end.213:                                       ; preds = %if.else.212, %if.end.211
  br label %sw.epilog.218

sw.default.214:                                   ; preds = %sw.epilog.189
  %195 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %195, i32* %ecode, align 4, !tbaa !5
  %196 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %procs215 = getelementptr inbounds %struct.gs_param_list_s, %struct.gs_param_list_s* %196, i32 0, i32 0
  %197 = load %struct.gs_param_list_procs_s*, %struct.gs_param_list_procs_s** %procs215, align 8, !tbaa !137
  %signal_error216 = getelementptr inbounds %struct.gs_param_list_procs_s, %struct.gs_param_list_procs_s* %197, i32 0, i32 7
  %198 = load i32 (%struct.gs_param_list_s*, i8*, i32)*, i32 (%struct.gs_param_list_s*, i8*, i32)** %signal_error216, align 8, !tbaa !139
  %199 = load %struct.gs_param_list_s*, %struct.gs_param_list_s** %plist.addr, align 8, !tbaa !1
  %200 = load i8*, i8** %pname, align 8, !tbaa !1
  %201 = load i32, i32* %ecode, align 4, !tbaa !5
  %call217 = call i32 %198(%struct.gs_param_list_s* %199, i8* %200, i32 %201) #7
  br label %sw.epilog.218

sw.epilog.218:                                    ; preds = %sw.default.214, %sw.epilog.189, %if.end.213
  %202 = load i8*, i8** %buff, align 8, !tbaa !1
  %tobool219 = icmp ne i8* %202, null
  br i1 %tobool219, label %if.then.220, label %if.end.221

if.then.220:                                      ; preds = %sw.epilog.218
  %203 = load i8*, i8** %buff, align 8, !tbaa !1
  call void @free(i8* %203) #8
  br label %if.end.221

if.end.221:                                       ; preds = %if.then.220, %sw.epilog.218
  %204 = load i32, i32* %ecode, align 4, !tbaa !5
  %205 = bitcast %struct.gs_param_string_s* %zmps to i8*
  call void @llvm.lifetime.end(i64 16, i8* %205) #2
  %206 = bitcast %struct.gs_param_string_s* %mbps to i8*
  call void @llvm.lifetime.end(i64 16, i8* %206) #2
  %207 = bitcast %struct.gs_param_string_s* %mrps to i8*
  call void @llvm.lifetime.end(i64 16, i8* %207) #2
  %208 = bitcast %struct.gs_param_string_s* %mtps to i8*
  call void @llvm.lifetime.end(i64 16, i8* %208) #2
  %209 = bitcast %struct.gs_param_string_s* %mlps to i8*
  call void @llvm.lifetime.end(i64 16, i8* %209) #2
  %210 = bitcast %struct.gs_param_string_s* %fips to i8*
  call void @llvm.lifetime.end(i64 16, i8* %210) #2
  %211 = bitcast %struct.gs_param_string_s* %dips to i8*
  call void @llvm.lifetime.end(i64 16, i8* %211) #2
  %212 = bitcast %struct.gs_param_string_s* %jips to i8*
  call void @llvm.lifetime.end(i64 16, i8* %212) #2
  %213 = bitcast %struct.gs_param_string_s* %pmps to i8*
  call void @llvm.lifetime.end(i64 16, i8* %213) #2
  %214 = bitcast %struct.gs_param_string_s* %vdps to i8*
  call void @llvm.lifetime.end(i64 16, i8* %214) #2
  %215 = bitcast i8** %buff to i8*
  call void @llvm.lifetime.end(i64 8, i8* %215) #2
  %216 = bitcast i8** %pname to i8*
  call void @llvm.lifetime.end(i64 8, i8* %216) #2
  %217 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %217) #2
  %218 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %218) #2
  ret i32 %204
}

declare i32 @gdev_prn_put_params(%struct.gx_device_s*, %struct.gs_param_list_s*) #1

declare i32 @param_read_string(%struct.gs_param_list_s*, i8*, %struct.gs_param_string_s*) #1

; Function Attrs: nounwind
declare i8* @memcpy(i8*, i8*, i64) #4

; Function Attrs: nounwind readonly
declare i32 @strcasecmp(i8*, i8*) #3

; Function Attrs: nounwind readonly
declare i32 @strncasecmp(i8*, i8*, i64) #3

; Function Attrs: inlinehint nounwind readonly uwtable
define available_externally double @atof(i8* nonnull %__nptr) #5 {
entry:
  %__nptr.addr = alloca i8*, align 8
  store i8* %__nptr, i8** %__nptr.addr, align 8, !tbaa !1
  %0 = load i8*, i8** %__nptr.addr, align 8, !tbaa !1
  %call = call double @strtod(i8* %0, i8** null) #8
  ret double %call
}

; Function Attrs: nounwind
declare double @strtod(i8*, i8**) #4

; Function Attrs: nounwind uwtable
define internal i32 @prepare_open(%struct.gx_device_s* %dev) #0 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %ecode = alloca i32, align 4
  %code = alloca i32, align 4
  %r = alloca i32, align 4
  %api_entry = alloca %struct._opvp_api_procs*, align 8
  %dumFD = alloca i32, align 4
  %dumContext = alloca i32, align 4
  %cspace = alloca i32, align 4
  %dc = alloca i32, align 4
  %apiVersion = alloca [2 x i32], align 4
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %0 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %1 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #2
  %2 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #2
  store i32 -1, i32* %r, align 4, !tbaa !5
  %3 = bitcast %struct._opvp_api_procs** %api_entry to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = bitcast i32* %dumFD to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  store i32 -1, i32* %dumFD, align 4, !tbaa !5
  %5 = bitcast i32* %dumContext to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #2
  store i32 -1, i32* %dumContext, align 4, !tbaa !5
  %6 = bitcast i32* %cspace to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #2
  store i32 6, i32* %cspace, align 4, !tbaa !64
  %call = call i32 (i8*, i32, ...) @open(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.184, i32 0, i32 0), i32 2) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %7 = load i32, i32* %code, align 4, !tbaa !5
  %cmp = icmp slt i32 %7, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %8 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %8, i32* %ecode, align 4, !tbaa !5
  br label %if.end

if.else:                                          ; preds = %entry
  %9 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %9, i32* %dumFD, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = load i32, i32* %ecode, align 4, !tbaa !5
  %tobool = icmp ne i32 %10, 0
  br i1 %tobool, label %if.end.6, label %if.then.1

if.then.1:                                        ; preds = %if.end
  %call2 = call i32 @opvp_load_vector_driver() #7
  store i32 %call2, i32* %code, align 4, !tbaa !5
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  %11 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %11, i32* %ecode, align 4, !tbaa !5
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.4, %if.then.1
  br label %if.end.6

if.end.6:                                         ; preds = %if.end.5, %if.end
  %12 = load i32, i32* %ecode, align 4, !tbaa !5
  %tobool7 = icmp ne i32 %12, 0
  br i1 %tobool7, label %if.end.18, label %if.then.8

if.then.8:                                        ; preds = %if.end.6
  %13 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %tobool9 = icmp ne %struct._opvp_api_procs* %13, null
  br i1 %tobool9, label %if.else.15, label %if.then.10

if.then.10:                                       ; preds = %if.then.8
  %call11 = call noalias i8* @calloc(i64 568, i64 1) #8
  %14 = bitcast i8* %call11 to %struct._opvp_api_procs*
  store %struct._opvp_api_procs* %14, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %tobool12 = icmp ne %struct._opvp_api_procs* %14, null
  br i1 %tobool12, label %if.end.14, label %if.then.13

if.then.13:                                       ; preds = %if.then.10
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.13, %if.then.10
  br label %if.end.17

if.else.15:                                       ; preds = %if.then.8
  %15 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %16 = bitcast %struct._opvp_api_procs* %15 to i8*
  %call16 = call i8* @memset(i8* %16, i32 0, i64 568) #8
  br label %if.end.17

if.end.17:                                        ; preds = %if.else.15, %if.end.14
  br label %if.end.18

if.end.18:                                        ; preds = %if.end.17, %if.end.6
  %17 = load i32, i32* %ecode, align 4, !tbaa !5
  %tobool19 = icmp ne i32 %17, 0
  br i1 %tobool19, label %if.end.27, label %if.then.20

if.then.20:                                       ; preds = %if.end.18
  %18 = bitcast i32* %dc to i8*
  call void @llvm.lifetime.start(i64 4, i8* %18) #2
  %19 = bitcast [2 x i32]* %apiVersion to i8*
  call void @llvm.lifetime.start(i64 8, i8* %19) #2
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %apiVersion, i32 0, i64 0
  store i32 1, i32* %arrayidx, align 4, !tbaa !5
  %arrayidx21 = getelementptr inbounds [2 x i32], [2 x i32]* %apiVersion, i32 0, i64 1
  store i32 0, i32* %arrayidx21, align 4, !tbaa !5
  %20 = load i32, i32* %dumFD, align 4, !tbaa !5
  %21 = load i8*, i8** @printerModel, align 8, !tbaa !1
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %apiVersion, i32 0, i32 0
  %call22 = call i32 @OpenPrinterWrapper(i32 %20, i8* %21, i32* %arraydecay, %struct._opvp_api_procs** %api_entry) #7
  store i32 %call22, i32* %dc, align 4, !tbaa !5
  %22 = load i32, i32* %dc, align 4, !tbaa !5
  %cmp23 = icmp eq i32 %22, -1
  br i1 %cmp23, label %if.then.24, label %if.else.25

if.then.24:                                       ; preds = %if.then.20
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.26

if.else.25:                                       ; preds = %if.then.20
  %23 = load i32, i32* %dc, align 4, !tbaa !5
  store i32 %23, i32* %dumContext, align 4, !tbaa !5
  br label %if.end.26

if.end.26:                                        ; preds = %if.else.25, %if.then.24
  %24 = bitcast [2 x i32]* %apiVersion to i8*
  call void @llvm.lifetime.end(i64 8, i8* %24) #2
  %25 = bitcast i32* %dc to i8*
  call void @llvm.lifetime.end(i64 4, i8* %25) #2
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.26, %if.end.18
  %26 = load i32, i32* %ecode, align 4, !tbaa !5
  %tobool28 = icmp ne i32 %26, 0
  br i1 %tobool28, label %if.else.31, label %if.then.29

if.then.29:                                       ; preds = %if.end.27
  store i32 71, i32* @nApiEntry, align 4, !tbaa !5
  %27 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %28 = bitcast %struct._opvp_api_procs* %27 to i8*
  %29 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** %api_entry, align 8, !tbaa !1
  %30 = bitcast %struct._opvp_api_procs* %29 to i8*
  %31 = load i32, i32* @nApiEntry, align 4, !tbaa !5
  %conv = sext i32 %31 to i64
  %mul = mul i64 %conv, 8
  %call30 = call i8* @memcpy(i8* %28, i8* %30, i64 %mul) #8
  br label %if.end.35

if.else.31:                                       ; preds = %if.end.27
  %32 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %tobool32 = icmp ne %struct._opvp_api_procs* %32, null
  br i1 %tobool32, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %if.else.31
  %33 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %34 = bitcast %struct._opvp_api_procs* %33 to i8*
  call void @free(i8* %34) #8
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.33, %if.else.31
  store %struct._opvp_api_procs* null, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34, %if.then.29
  %35 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %tobool36 = icmp ne %struct._opvp_api_procs* %35, null
  br i1 %tobool36, label %if.then.37, label %if.end.98

if.then.37:                                       ; preds = %if.end.35
  %36 = load i32, i32* @inkjet, align 4, !tbaa !5
  %tobool38 = icmp ne i32 %36, 0
  br i1 %tobool38, label %if.end.52, label %if.then.39

if.then.39:                                       ; preds = %if.then.37
  %37 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpNewPath = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %37, i32 0, i32 43
  %38 = load i32 (i32)*, i32 (i32)** %opvpNewPath, align 8, !tbaa !141
  %tobool40 = icmp ne i32 (i32)* %38, null
  br i1 %tobool40, label %lor.lhs.false, label %if.then.50

lor.lhs.false:                                    ; preds = %if.then.39
  %39 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpEndPath = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %39, i32 0, i32 44
  %40 = load i32 (i32)*, i32 (i32)** %opvpEndPath, align 8, !tbaa !142
  %tobool41 = icmp ne i32 (i32)* %40, null
  br i1 %tobool41, label %lor.lhs.false.42, label %if.then.50

lor.lhs.false.42:                                 ; preds = %lor.lhs.false
  %41 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpStrokePath = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %41, i32 0, i32 45
  %42 = load i32 (i32)*, i32 (i32)** %opvpStrokePath, align 8, !tbaa !143
  %tobool43 = icmp ne i32 (i32)* %42, null
  br i1 %tobool43, label %lor.lhs.false.44, label %if.then.50

lor.lhs.false.44:                                 ; preds = %lor.lhs.false.42
  %43 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetCurrentPoint = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %43, i32 0, i32 50
  %44 = load i32 (i32, i32, i32)*, i32 (i32, i32, i32)** %opvpSetCurrentPoint, align 8, !tbaa !95
  %tobool45 = icmp ne i32 (i32, i32, i32)* %44, null
  br i1 %tobool45, label %lor.lhs.false.46, label %if.then.50

lor.lhs.false.46:                                 ; preds = %lor.lhs.false.44
  %45 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpLinePath = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %45, i32 0, i32 51
  %46 = load i32 (i32, i32, i32, %struct._opvp_point*)*, i32 (i32, i32, i32, %struct._opvp_point*)** %opvpLinePath, align 8, !tbaa !144
  %tobool47 = icmp ne i32 (i32, i32, i32, %struct._opvp_point*)* %46, null
  br i1 %tobool47, label %lor.lhs.false.48, label %if.then.50

lor.lhs.false.48:                                 ; preds = %lor.lhs.false.46
  %47 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpBezierPath = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %47, i32 0, i32 55
  %48 = load i32 (i32, i32, %struct._opvp_point*)*, i32 (i32, i32, %struct._opvp_point*)** %opvpBezierPath, align 8, !tbaa !145
  %tobool49 = icmp ne i32 (i32, i32, %struct._opvp_point*)* %48, null
  br i1 %tobool49, label %if.end.51, label %if.then.50

if.then.50:                                       ; preds = %lor.lhs.false.48, %lor.lhs.false.46, %lor.lhs.false.44, %lor.lhs.false.42, %lor.lhs.false, %if.then.39
  store i32 0, i32* @vector, align 4, !tbaa !5
  br label %if.end.51

if.end.51:                                        ; preds = %if.then.50, %lor.lhs.false.48
  br label %if.end.52

if.end.52:                                        ; preds = %if.end.51, %if.then.37
  %49 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpGetColorSpace = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %49, i32 0, i32 19
  %50 = load i32 (i32, i32*)*, i32 (i32, i32*)** %opvpGetColorSpace, align 8, !tbaa !146
  %tobool53 = icmp ne i32 (i32, i32*)* %50, null
  br i1 %tobool53, label %if.then.54, label %if.end.57

if.then.54:                                       ; preds = %if.end.52
  %51 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpGetColorSpace55 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %51, i32 0, i32 19
  %52 = load i32 (i32, i32*)*, i32 (i32, i32*)** %opvpGetColorSpace55, align 8, !tbaa !146
  %53 = load i32, i32* %dumContext, align 4, !tbaa !5
  %call56 = call i32 %52(i32 %53, i32* %cspace) #7
  store i32 %call56, i32* %r, align 4, !tbaa !5
  br label %if.end.57

if.end.57:                                        ; preds = %if.then.54, %if.end.52
  %54 = load i32, i32* %cspace, align 4, !tbaa !64
  %cmp58 = icmp eq i32 %54, 0
  br i1 %cmp58, label %if.then.60, label %if.else.66

if.then.60:                                       ; preds = %if.end.57
  %55 = load i32, i32* %cspace, align 4, !tbaa !64
  store i32 %55, i32* @colorSpace, align 4, !tbaa !64
  %56 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %56, i32 0, i32 11
  %num_components = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info, i32 0, i32 1
  store i32 1, i32* %num_components, align 4, !tbaa !147
  %57 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info61 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %57, i32 0, i32 11
  %depth = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info61, i32 0, i32 3
  store i16 1, i16* %depth, align 2, !tbaa !148
  %58 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info62 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %58, i32 0, i32 11
  %max_gray = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info62, i32 0, i32 5
  store i32 0, i32* %max_gray, align 4, !tbaa !149
  %59 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info63 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %59, i32 0, i32 11
  %max_color = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info63, i32 0, i32 6
  store i32 0, i32* %max_color, align 4, !tbaa !150
  %60 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info64 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %60, i32 0, i32 11
  %dither_grays = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info64, i32 0, i32 7
  store i32 1, i32* %dither_grays, align 4, !tbaa !151
  %61 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info65 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %61, i32 0, i32 11
  %dither_colors = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info65, i32 0, i32 8
  store i32 1, i32* %dither_colors, align 4, !tbaa !152
  br label %if.end.96

if.else.66:                                       ; preds = %if.end.57
  %62 = load i32, i32* %cspace, align 4, !tbaa !64
  %cmp67 = icmp eq i32 %62, 1
  br i1 %cmp67, label %if.then.69, label %if.else.82

if.then.69:                                       ; preds = %if.else.66
  %63 = load i32, i32* %cspace, align 4, !tbaa !64
  store i32 %63, i32* @colorSpace, align 4, !tbaa !64
  %64 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info70 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %64, i32 0, i32 11
  %num_components71 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info70, i32 0, i32 1
  store i32 1, i32* %num_components71, align 4, !tbaa !147
  %65 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info72 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %65, i32 0, i32 11
  %depth73 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info72, i32 0, i32 3
  store i16 8, i16* %depth73, align 2, !tbaa !148
  %66 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info74 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %66, i32 0, i32 11
  %max_gray75 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info74, i32 0, i32 5
  store i32 255, i32* %max_gray75, align 4, !tbaa !149
  %67 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info76 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %67, i32 0, i32 11
  %max_color77 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info76, i32 0, i32 6
  store i32 255, i32* %max_color77, align 4, !tbaa !150
  %68 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info78 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %68, i32 0, i32 11
  %dither_grays79 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info78, i32 0, i32 7
  store i32 256, i32* %dither_grays79, align 4, !tbaa !151
  %69 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info80 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %69, i32 0, i32 11
  %dither_colors81 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info80, i32 0, i32 8
  store i32 256, i32* %dither_colors81, align 4, !tbaa !152
  br label %if.end.95

if.else.82:                                       ; preds = %if.else.66
  store i32 6, i32* @colorSpace, align 4, !tbaa !64
  %70 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info83 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %70, i32 0, i32 11
  %num_components84 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info83, i32 0, i32 1
  store i32 3, i32* %num_components84, align 4, !tbaa !147
  %71 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info85 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %71, i32 0, i32 11
  %depth86 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info85, i32 0, i32 3
  store i16 24, i16* %depth86, align 2, !tbaa !148
  %72 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info87 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %72, i32 0, i32 11
  %max_gray88 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info87, i32 0, i32 5
  store i32 255, i32* %max_gray88, align 4, !tbaa !149
  %73 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info89 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %73, i32 0, i32 11
  %max_color90 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info89, i32 0, i32 6
  store i32 255, i32* %max_color90, align 4, !tbaa !150
  %74 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info91 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %74, i32 0, i32 11
  %dither_grays92 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info91, i32 0, i32 7
  store i32 256, i32* %dither_grays92, align 4, !tbaa !151
  %75 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %color_info93 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %75, i32 0, i32 11
  %dither_colors94 = getelementptr inbounds %struct.gx_device_color_info_s, %struct.gx_device_color_info_s* %color_info93, i32 0, i32 8
  store i32 256, i32* %dither_colors94, align 4, !tbaa !152
  br label %if.end.95

if.end.95:                                        ; preds = %if.else.82, %if.then.69
  br label %if.end.96

if.end.96:                                        ; preds = %if.end.95, %if.then.60
  %76 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %76, i32 0, i32 42
  %get_color_mapping_procs = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs, i32 0, i32 49
  store %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)* null, %struct.gx_cm_color_map_procs_s* (%struct.gx_device_s*)** %get_color_mapping_procs, align 8, !tbaa !153
  %77 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %procs97 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %77, i32 0, i32 42
  %get_color_comp_index = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %procs97, i32 0, i32 50
  store i32 (%struct.gx_device_s*, i8*, i32, i32)* null, i32 (%struct.gx_device_s*, i8*, i32, i32)** %get_color_comp_index, align 8, !tbaa !154
  %78 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  call void @gx_device_fill_in_procs(%struct.gx_device_s* %78) #7
  br label %if.end.98

if.end.98:                                        ; preds = %if.end.96, %if.end.35
  %79 = load i32, i32* %dumContext, align 4, !tbaa !5
  %cmp99 = icmp ne i32 %79, -1
  br i1 %cmp99, label %if.then.101, label %if.end.107

if.then.101:                                      ; preds = %if.end.98
  %80 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpClosePrinter = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %80, i32 0, i32 1
  %81 = load i32 (i32)*, i32 (i32)** %opvpClosePrinter, align 8, !tbaa !88
  %tobool102 = icmp ne i32 (i32)* %81, null
  br i1 %tobool102, label %if.then.103, label %if.end.106

if.then.103:                                      ; preds = %if.then.101
  %82 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpClosePrinter104 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %82, i32 0, i32 1
  %83 = load i32 (i32)*, i32 (i32)** %opvpClosePrinter104, align 8, !tbaa !88
  %84 = load i32, i32* %dumContext, align 4, !tbaa !5
  %call105 = call i32 %83(i32 %84) #7
  br label %if.end.106

if.end.106:                                       ; preds = %if.then.103, %if.then.101
  store i32 -1, i32* %dumContext, align 4, !tbaa !5
  br label %if.end.107

if.end.107:                                       ; preds = %if.end.106, %if.end.98
  %85 = load i32, i32* %dumFD, align 4, !tbaa !5
  %cmp108 = icmp ne i32 %85, -1
  br i1 %cmp108, label %if.then.110, label %if.end.112

if.then.110:                                      ; preds = %if.end.107
  %86 = load i32, i32* %dumFD, align 4, !tbaa !5
  %call111 = call i32 @close(i32 %86) #7
  store i32 -1, i32* %dumFD, align 4, !tbaa !5
  br label %if.end.112

if.end.112:                                       ; preds = %if.then.110, %if.end.107
  %call113 = call i32 @opvp_unload_vector_driver() #7
  %87 = load i32, i32* %ecode, align 4, !tbaa !5
  %88 = bitcast i32* %cspace to i8*
  call void @llvm.lifetime.end(i64 4, i8* %88) #2
  %89 = bitcast i32* %dumContext to i8*
  call void @llvm.lifetime.end(i64 4, i8* %89) #2
  %90 = bitcast i32* %dumFD to i8*
  call void @llvm.lifetime.end(i64 4, i8* %90) #2
  %91 = bitcast %struct._opvp_api_procs** %api_entry to i8*
  call void @llvm.lifetime.end(i64 8, i8* %91) #2
  %92 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %92) #2
  %93 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %93) #2
  %94 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %94) #2
  ret i32 %87
}

declare void @gx_device_set_margins(%struct.gx_device_s*, float*, i32) #1

declare i32 @gdev_vector_open_file_options(%struct.gx_device_vector_s*, i32, i32) #1

; Function Attrs: nounwind
declare i32 @fileno(%struct._IO_FILE*) #4

declare i32 @gdev_prn_open(%struct.gx_device_s*) #1

declare i32 @gdev_prn_open_printer_seekable(%struct.gx_device_s*, i32, i32) #1

; Function Attrs: nounwind uwtable
define internal i32 @opvp_load_vector_driver() #0 {
entry:
  %retval = alloca i32, align 4
  %list = alloca i8**, align 8
  %i = alloca i32, align 4
  %h = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  %0 = bitcast i8*** %list to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  store i8** null, i8*** %list, align 8, !tbaa !1
  %1 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #2
  %2 = bitcast i8** %h to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #2
  %3 = load i8*, i8** @handle, align 8, !tbaa !1
  %tobool = icmp ne i8* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 @opvp_unload_vector_driver() #7
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i8*, i8** @vectorDriver, align 8, !tbaa !1
  %tobool1 = icmp ne i8* %4, null
  br i1 %tobool1, label %if.then.2, label %if.end.4

if.then.2:                                        ; preds = %if.end
  %call3 = call i8** @opvp_gen_dynamic_lib_name() #7
  store i8** %call3, i8*** %list, align 8, !tbaa !1
  br label %if.end.4

if.end.4:                                         ; preds = %if.then.2, %if.end
  %5 = load i8**, i8*** %list, align 8, !tbaa !1
  %tobool5 = icmp ne i8** %5, null
  br i1 %tobool5, label %if.then.6, label %if.end.27

if.then.6:                                        ; preds = %if.end.4
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %while.cond

while.cond:                                       ; preds = %if.end.26, %if.then.6
  %6 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom = sext i32 %6 to i64
  %7 = load i8**, i8*** %list, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds i8*, i8** %7, i64 %idxprom
  %8 = load i8*, i8** %arrayidx, align 8, !tbaa !1
  %tobool7 = icmp ne i8* %8, null
  br i1 %tobool7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom8 = sext i32 %9 to i64
  %10 = load i8**, i8*** %list, align 8, !tbaa !1
  %arrayidx9 = getelementptr inbounds i8*, i8** %10, i64 %idxprom8
  %11 = load i8*, i8** %arrayidx9, align 8, !tbaa !1
  %call10 = call i8* @dlopen(i8* %11, i32 2) #8
  store i8* %call10, i8** %h, align 8, !tbaa !1
  %tobool11 = icmp ne i8* %call10, null
  br i1 %tobool11, label %if.then.12, label %if.end.26

if.then.12:                                       ; preds = %while.body
  %12 = load i8*, i8** %h, align 8, !tbaa !1
  %call13 = call i8* @dlsym(i8* %12, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.185, i32 0, i32 0)) #8
  %13 = bitcast i8* %call13 to i32 (i32, i8*, i32*, %struct._opvp_api_procs**)*
  store i32 (i32, i8*, i32*, %struct._opvp_api_procs**)* %13, i32 (i32, i8*, i32*, %struct._opvp_api_procs**)** @OpenPrinter, align 8, !tbaa !1
  %14 = load i8*, i8** %h, align 8, !tbaa !1
  %call14 = call i8* @dlsym(i8* %14, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.186, i32 0, i32 0)) #8
  %15 = bitcast i8* %call14 to i32*
  store i32* %15, i32** @ErrorNo, align 8, !tbaa !1
  %16 = load i32 (i32, i8*, i32*, %struct._opvp_api_procs**)*, i32 (i32, i8*, i32*, %struct._opvp_api_procs**)** @OpenPrinter, align 8, !tbaa !1
  %tobool15 = icmp ne i32 (i32, i8*, i32*, %struct._opvp_api_procs**)* %16, null
  br i1 %tobool15, label %land.lhs.true, label %if.end.18

land.lhs.true:                                    ; preds = %if.then.12
  %17 = load i32*, i32** @ErrorNo, align 8, !tbaa !1
  %tobool16 = icmp ne i32* %17, null
  br i1 %tobool16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %land.lhs.true
  %18 = load i8*, i8** %h, align 8, !tbaa !1
  store i8* %18, i8** @handle, align 8, !tbaa !1
  br label %while.end

if.end.18:                                        ; preds = %land.lhs.true, %if.then.12
  store i32 (i32, i8*, i32*, %struct._opvp_api_procs**)* null, i32 (i32, i8*, i32*, %struct._opvp_api_procs**)** @OpenPrinter, align 8, !tbaa !1
  store i32* null, i32** @ErrorNo, align 8, !tbaa !1
  %19 = load i8*, i8** %h, align 8, !tbaa !1
  %call19 = call i8* @dlsym(i8* %19, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.187, i32 0, i32 0)) #8
  %20 = bitcast i8* %call19 to i32 (i32, i8*, i32*, %struct._OPVP_api_procs**)*
  store i32 (i32, i8*, i32*, %struct._OPVP_api_procs**)* %20, i32 (i32, i8*, i32*, %struct._OPVP_api_procs**)** @OpenPrinter_0_2, align 8, !tbaa !1
  %21 = load i8*, i8** %h, align 8, !tbaa !1
  %call20 = call i8* @dlsym(i8* %21, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.188, i32 0, i32 0)) #8
  %22 = bitcast i8* %call20 to i32*
  store i32* %22, i32** @ErrorNo, align 8, !tbaa !1
  %23 = load i32 (i32, i8*, i32*, %struct._OPVP_api_procs**)*, i32 (i32, i8*, i32*, %struct._OPVP_api_procs**)** @OpenPrinter_0_2, align 8, !tbaa !1
  %tobool21 = icmp ne i32 (i32, i8*, i32*, %struct._OPVP_api_procs**)* %23, null
  br i1 %tobool21, label %land.lhs.true.22, label %if.end.25

land.lhs.true.22:                                 ; preds = %if.end.18
  %24 = load i32*, i32** @ErrorNo, align 8, !tbaa !1
  %tobool23 = icmp ne i32* %24, null
  br i1 %tobool23, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %land.lhs.true.22
  %25 = load i8*, i8** %h, align 8, !tbaa !1
  store i8* %25, i8** @handle, align 8, !tbaa !1
  br label %while.end

if.end.25:                                        ; preds = %land.lhs.true.22, %if.end.18
  store i32 (i32, i8*, i32*, %struct._OPVP_api_procs**)* null, i32 (i32, i8*, i32*, %struct._OPVP_api_procs**)** @OpenPrinter_0_2, align 8, !tbaa !1
  store i32* null, i32** @ErrorNo, align 8, !tbaa !1
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %while.body
  %26 = load i32, i32* %i, align 4, !tbaa !5
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %i, align 4, !tbaa !5
  br label %while.cond

while.end:                                        ; preds = %if.then.24, %if.then.17, %while.cond
  br label %if.end.27

if.end.27:                                        ; preds = %while.end, %if.end.4
  %27 = load i8*, i8** @handle, align 8, !tbaa !1
  %tobool28 = icmp ne i8* %27, null
  br i1 %tobool28, label %if.then.29, label %if.else

if.then.29:                                       ; preds = %if.end.27
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.else:                                          ; preds = %if.end.27
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then.29
  %28 = bitcast i8** %h to i8*
  call void @llvm.lifetime.end(i64 8, i8* %28) #2
  %29 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %29) #2
  %30 = bitcast i8*** %list to i8*
  call void @llvm.lifetime.end(i64 8, i8* %30) #2
  %31 = load i32, i32* %retval
  ret i32 %31
}

; Function Attrs: nounwind uwtable
define internal i32 @OpenPrinterWrapper(i32 %outputFD, i8* %printerModel, i32* %apiVersion, %struct._opvp_api_procs** %apiProcs) #0 {
entry:
  %outputFD.addr = alloca i32, align 4
  %printerModel.addr = alloca i8*, align 8
  %apiVersion.addr = alloca i32*, align 8
  %apiProcs.addr = alloca %struct._opvp_api_procs**, align 8
  %dc = alloca i32, align 4
  %nApiEntry = alloca i32, align 4
  store i32 %outputFD, i32* %outputFD.addr, align 4, !tbaa !5
  store i8* %printerModel, i8** %printerModel.addr, align 8, !tbaa !1
  store i32* %apiVersion, i32** %apiVersion.addr, align 8, !tbaa !1
  store %struct._opvp_api_procs** %apiProcs, %struct._opvp_api_procs*** %apiProcs.addr, align 8, !tbaa !1
  %0 = bitcast i32* %dc to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  store i32 -1, i32* %dc, align 4, !tbaa !5
  %1 = load i32 (i32, i8*, i32*, %struct._opvp_api_procs**)*, i32 (i32, i8*, i32*, %struct._opvp_api_procs**)** @OpenPrinter, align 8, !tbaa !1
  %cmp = icmp ne i32 (i32, i8*, i32*, %struct._opvp_api_procs**)* %1, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32 (i32, i8*, i32*, %struct._opvp_api_procs**)*, i32 (i32, i8*, i32*, %struct._opvp_api_procs**)** @OpenPrinter, align 8, !tbaa !1
  %3 = load i32, i32* %outputFD.addr, align 4, !tbaa !5
  %4 = load i8*, i8** %printerModel.addr, align 8, !tbaa !1
  %5 = load i32*, i32** %apiVersion.addr, align 8, !tbaa !1
  %6 = load %struct._opvp_api_procs**, %struct._opvp_api_procs*** %apiProcs.addr, align 8, !tbaa !1
  %call = call i32 %2(i32 %3, i8* %4, i32* %5, %struct._opvp_api_procs** %6) #7
  store i32 %call, i32* %dc, align 4, !tbaa !5
  br label %if.end.64

if.else:                                          ; preds = %entry
  %7 = load i32 (i32, i8*, i32*, %struct._OPVP_api_procs**)*, i32 (i32, i8*, i32*, %struct._OPVP_api_procs**)** @OpenPrinter_0_2, align 8, !tbaa !1
  %cmp1 = icmp ne i32 (i32, i8*, i32*, %struct._OPVP_api_procs**)* %7, null
  br i1 %cmp1, label %if.then.2, label %if.end.63

if.then.2:                                        ; preds = %if.else
  %8 = bitcast i32* %nApiEntry to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #2
  %9 = load i32 (i32, i8*, i32*, %struct._OPVP_api_procs**)*, i32 (i32, i8*, i32*, %struct._OPVP_api_procs**)** @OpenPrinter_0_2, align 8, !tbaa !1
  %10 = load i32, i32* %outputFD.addr, align 4, !tbaa !5
  %11 = load i8*, i8** %printerModel.addr, align 8, !tbaa !1
  %call3 = call i32 %9(i32 %10, i8* %11, i32* %nApiEntry, %struct._OPVP_api_procs** @apiEntry_0_2) #7
  store i32 %call3, i32* %dc, align 4, !tbaa !5
  %12 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %ClosePrinter = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %12, i32 0, i32 1
  %13 = load i32 (i32)*, i32 (i32)** %ClosePrinter, align 8, !tbaa !155
  store i32 (i32)* %13, i32 (i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 1), align 8, !tbaa !88
  %14 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %StartJob = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %14, i32 0, i32 2
  %15 = load i32 (i32, i8*)*, i32 (i32, i8*)** %StartJob, align 8, !tbaa !157
  store i32 (i32, i8*)* %15, i32 (i32, i8*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 2), align 8, !tbaa !65
  %16 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %EndJob = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %16, i32 0, i32 3
  %17 = load i32 (i32)*, i32 (i32)** %EndJob, align 8, !tbaa !158
  store i32 (i32)* %17, i32 (i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 3), align 8, !tbaa !87
  store i32 (i32)* null, i32 (i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 4), align 8, !tbaa !159
  %18 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %StartDoc = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %18, i32 0, i32 4
  %19 = load i32 (i32, i8*)*, i32 (i32, i8*)** %StartDoc, align 8, !tbaa !160
  store i32 (i32, i8*)* %19, i32 (i32, i8*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 5), align 8, !tbaa !66
  %20 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %EndDoc = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %20, i32 0, i32 5
  %21 = load i32 (i32)*, i32 (i32)** %EndDoc, align 8, !tbaa !161
  store i32 (i32)* %21, i32 (i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 6), align 8, !tbaa !86
  %22 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %StartPage = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %22, i32 0, i32 6
  %23 = load i32 (i32, i8*)*, i32 (i32, i8*)** %StartPage, align 8, !tbaa !162
  %cmp4 = icmp ne i32 (i32, i8*)* %23, null
  br i1 %cmp4, label %if.then.5, label %if.else.6

if.then.5:                                        ; preds = %if.then.2
  store i32 (i32, i8*)* @StartPageWrapper, i32 (i32, i8*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 7), align 8, !tbaa !163
  br label %if.end

if.else.6:                                        ; preds = %if.then.2
  store i32 (i32, i8*)* null, i32 (i32, i8*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 7), align 8, !tbaa !163
  br label %if.end

if.end:                                           ; preds = %if.else.6, %if.then.5
  %24 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %EndPage = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %24, i32 0, i32 7
  %25 = load i32 (i32)*, i32 (i32)** %EndPage, align 8, !tbaa !164
  store i32 (i32)* %25, i32 (i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 8), align 8, !tbaa !165
  %26 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %QueryDeviceCapability = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %26, i32 0, i32 8
  %27 = load i32 (i32, i32, i32, i8*)*, i32 (i32, i32, i32, i8*)** %QueryDeviceCapability, align 8, !tbaa !166
  %cmp7 = icmp ne i32 (i32, i32, i32, i8*)* %27, null
  br i1 %cmp7, label %if.then.8, label %if.else.9

if.then.8:                                        ; preds = %if.end
  store i32 (i32, i32, i32*, i8*)* @QueryDeviceCapabilityWrapper, i32 (i32, i32, i32*, i8*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 9), align 8, !tbaa !167
  br label %if.end.10

if.else.9:                                        ; preds = %if.end
  store i32 (i32, i32, i32*, i8*)* null, i32 (i32, i32, i32*, i8*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 9), align 8, !tbaa !167
  br label %if.end.10

if.end.10:                                        ; preds = %if.else.9, %if.then.8
  %28 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %QueryDeviceInfo = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %28, i32 0, i32 9
  %29 = load i32 (i32, i32, i32, i8*)*, i32 (i32, i32, i32, i8*)** %QueryDeviceInfo, align 8, !tbaa !168
  %cmp11 = icmp ne i32 (i32, i32, i32, i8*)* %29, null
  br i1 %cmp11, label %if.then.12, label %if.else.13

if.then.12:                                       ; preds = %if.end.10
  store i32 (i32, i32, i32*, i8*)* @QueryDeviceInfoWrapper, i32 (i32, i32, i32*, i8*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 10), align 8, !tbaa !169
  br label %if.end.14

if.else.13:                                       ; preds = %if.end.10
  store i32 (i32, i32, i32*, i8*)* null, i32 (i32, i32, i32*, i8*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 10), align 8, !tbaa !169
  br label %if.end.14

if.end.14:                                        ; preds = %if.else.13, %if.then.12
  %30 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %ResetCTM = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %30, i32 0, i32 10
  %31 = load i32 (i32)*, i32 (i32)** %ResetCTM, align 8, !tbaa !170
  store i32 (i32)* %31, i32 (i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 11), align 8, !tbaa !74
  %32 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetCTM = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %32, i32 0, i32 11
  %33 = load i32 (i32, %struct._OPVP_CTM*)*, i32 (i32, %struct._OPVP_CTM*)** %SetCTM, align 8, !tbaa !171
  %34 = bitcast i32 (i32, %struct._OPVP_CTM*)* %33 to i32 (i32, %struct._opvp_ctm*)*
  store i32 (i32, %struct._opvp_ctm*)* %34, i32 (i32, %struct._opvp_ctm*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 12), align 8, !tbaa !82
  %35 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %GetCTM = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %35, i32 0, i32 12
  %36 = load i32 (i32, %struct._OPVP_CTM*)*, i32 (i32, %struct._OPVP_CTM*)** %GetCTM, align 8, !tbaa !172
  %37 = bitcast i32 (i32, %struct._OPVP_CTM*)* %36 to i32 (i32, %struct._opvp_ctm*)*
  store i32 (i32, %struct._opvp_ctm*)* %37, i32 (i32, %struct._opvp_ctm*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 13), align 8, !tbaa !173
  %38 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %InitGS = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %38, i32 0, i32 13
  %39 = load i32 (i32)*, i32 (i32)** %InitGS, align 8, !tbaa !174
  %cmp15 = icmp ne i32 (i32)* %39, null
  br i1 %cmp15, label %if.then.16, label %if.else.17

if.then.16:                                       ; preds = %if.end.14
  store i32 (i32)* @InitGSWrapper, i32 (i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 14), align 8, !tbaa !175
  br label %if.end.18

if.else.17:                                       ; preds = %if.end.14
  store i32 (i32)* null, i32 (i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 14), align 8, !tbaa !175
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.17, %if.then.16
  %40 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SaveGS = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %40, i32 0, i32 14
  %41 = load i32 (i32)*, i32 (i32)** %SaveGS, align 8, !tbaa !176
  store i32 (i32)* %41, i32 (i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 15), align 8, !tbaa !177
  %42 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %RestoreGS = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %42, i32 0, i32 15
  %43 = load i32 (i32)*, i32 (i32)** %RestoreGS, align 8, !tbaa !178
  store i32 (i32)* %43, i32 (i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 16), align 8, !tbaa !179
  %44 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %QueryColorSpace = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %44, i32 0, i32 16
  %45 = load i32 (i32, i32*, i32*)*, i32 (i32, i32*, i32*)** %QueryColorSpace, align 8, !tbaa !180
  %cmp19 = icmp ne i32 (i32, i32*, i32*)* %45, null
  br i1 %cmp19, label %if.then.20, label %if.else.21

if.then.20:                                       ; preds = %if.end.18
  store i32 (i32, i32*, i32*)* @QueryColorSpaceWrapper, i32 (i32, i32*, i32*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 17), align 8, !tbaa !62
  br label %if.end.22

if.else.21:                                       ; preds = %if.end.18
  store i32 (i32, i32*, i32*)* null, i32 (i32, i32*, i32*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 17), align 8, !tbaa !62
  br label %if.end.22

if.end.22:                                        ; preds = %if.else.21, %if.then.20
  %46 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetColorSpace = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %46, i32 0, i32 17
  %47 = load i32 (i32, i32)*, i32 (i32, i32)** %SetColorSpace, align 8, !tbaa !181
  %cmp23 = icmp ne i32 (i32, i32)* %47, null
  br i1 %cmp23, label %if.then.24, label %if.else.25

if.then.24:                                       ; preds = %if.end.22
  store i32 (i32, i32)* @SetColorSpaceWrapper, i32 (i32, i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 18), align 8, !tbaa !123
  br label %if.end.26

if.else.25:                                       ; preds = %if.end.22
  store i32 (i32, i32)* null, i32 (i32, i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 18), align 8, !tbaa !123
  br label %if.end.26

if.end.26:                                        ; preds = %if.else.25, %if.then.24
  %48 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %GetColorSpace = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %48, i32 0, i32 18
  %49 = load i32 (i32, i32*)*, i32 (i32, i32*)** %GetColorSpace, align 8, !tbaa !182
  %cmp27 = icmp ne i32 (i32, i32*)* %49, null
  br i1 %cmp27, label %if.then.28, label %if.else.29

if.then.28:                                       ; preds = %if.end.26
  store i32 (i32, i32*)* @GetColorSpaceWrapper, i32 (i32, i32*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 19), align 8, !tbaa !146
  br label %if.end.30

if.else.29:                                       ; preds = %if.end.26
  store i32 (i32, i32*)* null, i32 (i32, i32*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 19), align 8, !tbaa !146
  br label %if.end.30

if.end.30:                                        ; preds = %if.else.29, %if.then.28
  %50 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetFillMode = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %50, i32 0, i32 22
  %51 = load i32 (i32, i32)*, i32 (i32, i32)** %SetFillMode, align 8, !tbaa !183
  store i32 (i32, i32)* %51, i32 (i32, i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 20), align 8, !tbaa !184
  %52 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %GetFillMode = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %52, i32 0, i32 23
  %53 = load i32 (i32, i32*)*, i32 (i32, i32*)** %GetFillMode, align 8, !tbaa !185
  store i32 (i32, i32*)* %53, i32 (i32, i32*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 21), align 8, !tbaa !186
  %54 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetAlphaConstant = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %54, i32 0, i32 24
  %55 = load i32 (i32, float)*, i32 (i32, float)** %SetAlphaConstant, align 8, !tbaa !187
  store i32 (i32, float)* %55, i32 (i32, float)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 22), align 8, !tbaa !188
  %56 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %GetAlphaConstant = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %56, i32 0, i32 25
  %57 = load i32 (i32, float*)*, i32 (i32, float*)** %GetAlphaConstant, align 8, !tbaa !189
  store i32 (i32, float*)* %57, i32 (i32, float*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 23), align 8, !tbaa !190
  %58 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetLineWidth = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %58, i32 0, i32 26
  %59 = load i32 (i32, i32)*, i32 (i32, i32)** %SetLineWidth, align 8, !tbaa !191
  store i32 (i32, i32)* %59, i32 (i32, i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 24), align 8, !tbaa !192
  %60 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %GetLineWidth = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %60, i32 0, i32 27
  %61 = load i32 (i32, i32*)*, i32 (i32, i32*)** %GetLineWidth, align 8, !tbaa !193
  store i32 (i32, i32*)* %61, i32 (i32, i32*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 25), align 8, !tbaa !194
  %62 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetLineDash = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %62, i32 0, i32 28
  %63 = load i32 (i32, i32*, i32)*, i32 (i32, i32*, i32)** %SetLineDash, align 8, !tbaa !195
  %cmp31 = icmp ne i32 (i32, i32*, i32)* %63, null
  br i1 %cmp31, label %if.then.32, label %if.else.33

if.then.32:                                       ; preds = %if.end.30
  store i32 (i32, i32, i32*)* @SetLineDashWrapper, i32 (i32, i32, i32*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 26), align 8, !tbaa !196
  br label %if.end.34

if.else.33:                                       ; preds = %if.end.30
  store i32 (i32, i32, i32*)* null, i32 (i32, i32, i32*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 26), align 8, !tbaa !196
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.33, %if.then.32
  %64 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %GetLineDash = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %64, i32 0, i32 29
  %65 = load i32 (i32, i32*, i32*)*, i32 (i32, i32*, i32*)** %GetLineDash, align 8, !tbaa !197
  %cmp35 = icmp ne i32 (i32, i32*, i32*)* %65, null
  br i1 %cmp35, label %if.then.36, label %if.else.37

if.then.36:                                       ; preds = %if.end.34
  store i32 (i32, i32*, i32*)* @GetLineDashWrapper, i32 (i32, i32*, i32*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 27), align 8, !tbaa !198
  br label %if.end.38

if.else.37:                                       ; preds = %if.end.34
  store i32 (i32, i32*, i32*)* null, i32 (i32, i32*, i32*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 27), align 8, !tbaa !198
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.37, %if.then.36
  %66 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetLineDashOffset = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %66, i32 0, i32 30
  %67 = load i32 (i32, i32)*, i32 (i32, i32)** %SetLineDashOffset, align 8, !tbaa !199
  store i32 (i32, i32)* %67, i32 (i32, i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 28), align 8, !tbaa !200
  %68 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %GetLineDashOffset = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %68, i32 0, i32 31
  %69 = load i32 (i32, i32*)*, i32 (i32, i32*)** %GetLineDashOffset, align 8, !tbaa !201
  store i32 (i32, i32*)* %69, i32 (i32, i32*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 29), align 8, !tbaa !202
  %70 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetLineStyle = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %70, i32 0, i32 32
  %71 = load i32 (i32, i32)*, i32 (i32, i32)** %SetLineStyle, align 8, !tbaa !203
  store i32 (i32, i32)* %71, i32 (i32, i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 30), align 8, !tbaa !204
  %72 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %GetLineStyle = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %72, i32 0, i32 33
  %73 = load i32 (i32, i32*)*, i32 (i32, i32*)** %GetLineStyle, align 8, !tbaa !205
  store i32 (i32, i32*)* %73, i32 (i32, i32*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 31), align 8, !tbaa !206
  %74 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetLineCap = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %74, i32 0, i32 34
  %75 = load i32 (i32, i32)*, i32 (i32, i32)** %SetLineCap, align 8, !tbaa !207
  store i32 (i32, i32)* %75, i32 (i32, i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 32), align 8, !tbaa !208
  %76 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %GetLineCap = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %76, i32 0, i32 35
  %77 = load i32 (i32, i32*)*, i32 (i32, i32*)** %GetLineCap, align 8, !tbaa !209
  store i32 (i32, i32*)* %77, i32 (i32, i32*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 33), align 8, !tbaa !210
  %78 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetLineJoin = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %78, i32 0, i32 36
  %79 = load i32 (i32, i32)*, i32 (i32, i32)** %SetLineJoin, align 8, !tbaa !211
  store i32 (i32, i32)* %79, i32 (i32, i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 34), align 8, !tbaa !212
  %80 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %GetLineJoin = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %80, i32 0, i32 37
  %81 = load i32 (i32, i32*)*, i32 (i32, i32*)** %GetLineJoin, align 8, !tbaa !213
  store i32 (i32, i32*)* %81, i32 (i32, i32*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 35), align 8, !tbaa !214
  %82 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetMiterLimit = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %82, i32 0, i32 38
  %83 = load i32 (i32, i32)*, i32 (i32, i32)** %SetMiterLimit, align 8, !tbaa !215
  store i32 (i32, i32)* %83, i32 (i32, i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 36), align 8, !tbaa !216
  %84 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %GetMiterLimit = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %84, i32 0, i32 39
  %85 = load i32 (i32, i32*)*, i32 (i32, i32*)** %GetMiterLimit, align 8, !tbaa !217
  store i32 (i32, i32*)* %85, i32 (i32, i32*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 37), align 8, !tbaa !218
  %86 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetPaintMode = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %86, i32 0, i32 40
  %87 = load i32 (i32, i32)*, i32 (i32, i32)** %SetPaintMode, align 8, !tbaa !219
  store i32 (i32, i32)* %87, i32 (i32, i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 38), align 8, !tbaa !96
  %88 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %GetPaintMode = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %88, i32 0, i32 41
  %89 = load i32 (i32, i32*)*, i32 (i32, i32*)** %GetPaintMode, align 8, !tbaa !220
  store i32 (i32, i32*)* %89, i32 (i32, i32*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 39), align 8, !tbaa !221
  %90 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetStrokeColor = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %90, i32 0, i32 42
  %91 = load i32 (i32, %struct._OPVP_Brush*)*, i32 (i32, %struct._OPVP_Brush*)** %SetStrokeColor, align 8, !tbaa !222
  %cmp39 = icmp ne i32 (i32, %struct._OPVP_Brush*)* %91, null
  br i1 %cmp39, label %if.then.40, label %if.else.41

if.then.40:                                       ; preds = %if.end.38
  store i32 (i32, %struct._opvp_brush*)* @SetStrokeColorWrapper, i32 (i32, %struct._opvp_brush*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 40), align 8, !tbaa !223
  br label %if.end.42

if.else.41:                                       ; preds = %if.end.38
  store i32 (i32, %struct._opvp_brush*)* null, i32 (i32, %struct._opvp_brush*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 40), align 8, !tbaa !223
  br label %if.end.42

if.end.42:                                        ; preds = %if.else.41, %if.then.40
  %92 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetFillColor = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %92, i32 0, i32 43
  %93 = load i32 (i32, %struct._OPVP_Brush*)*, i32 (i32, %struct._OPVP_Brush*)** %SetFillColor, align 8, !tbaa !224
  %cmp43 = icmp ne i32 (i32, %struct._OPVP_Brush*)* %93, null
  br i1 %cmp43, label %if.then.44, label %if.else.45

if.then.44:                                       ; preds = %if.end.42
  store i32 (i32, %struct._opvp_brush*)* @SetFillColorWrapper, i32 (i32, %struct._opvp_brush*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 41), align 8, !tbaa !91
  br label %if.end.46

if.else.45:                                       ; preds = %if.end.42
  store i32 (i32, %struct._opvp_brush*)* null, i32 (i32, %struct._opvp_brush*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 41), align 8, !tbaa !91
  br label %if.end.46

if.end.46:                                        ; preds = %if.else.45, %if.then.44
  %94 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetBgColor = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %94, i32 0, i32 44
  %95 = load i32 (i32, %struct._OPVP_Brush*)*, i32 (i32, %struct._OPVP_Brush*)** %SetBgColor, align 8, !tbaa !225
  %cmp47 = icmp ne i32 (i32, %struct._OPVP_Brush*)* %95, null
  br i1 %cmp47, label %if.then.48, label %if.else.49

if.then.48:                                       ; preds = %if.end.46
  store i32 (i32, %struct._opvp_brush*)* @SetBgColorWrapper, i32 (i32, %struct._opvp_brush*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 42), align 8, !tbaa !97
  br label %if.end.50

if.else.49:                                       ; preds = %if.end.46
  store i32 (i32, %struct._opvp_brush*)* null, i32 (i32, %struct._opvp_brush*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 42), align 8, !tbaa !97
  br label %if.end.50

if.end.50:                                        ; preds = %if.else.49, %if.then.48
  %96 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %NewPath = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %96, i32 0, i32 45
  %97 = load i32 (i32)*, i32 (i32)** %NewPath, align 8, !tbaa !226
  store i32 (i32)* %97, i32 (i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 43), align 8, !tbaa !141
  %98 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %EndPath = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %98, i32 0, i32 46
  %99 = load i32 (i32)*, i32 (i32)** %EndPath, align 8, !tbaa !227
  store i32 (i32)* %99, i32 (i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 44), align 8, !tbaa !142
  %100 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %StrokePath = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %100, i32 0, i32 47
  %101 = load i32 (i32)*, i32 (i32)** %StrokePath, align 8, !tbaa !228
  store i32 (i32)* %101, i32 (i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 45), align 8, !tbaa !143
  %102 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %FillPath = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %102, i32 0, i32 48
  %103 = load i32 (i32)*, i32 (i32)** %FillPath, align 8, !tbaa !229
  store i32 (i32)* %103, i32 (i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 46), align 8, !tbaa !230
  %104 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %StrokeFillPath = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %104, i32 0, i32 49
  %105 = load i32 (i32)*, i32 (i32)** %StrokeFillPath, align 8, !tbaa !231
  store i32 (i32)* %105, i32 (i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 47), align 8, !tbaa !232
  %106 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetClipPath = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %106, i32 0, i32 50
  %107 = load i32 (i32, i32)*, i32 (i32, i32)** %SetClipPath, align 8, !tbaa !233
  store i32 (i32, i32)* %107, i32 (i32, i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 48), align 8, !tbaa !99
  %108 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %ResetClipPath = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %108, i32 0, i32 51
  %109 = load i32 (i32)*, i32 (i32)** %ResetClipPath, align 8, !tbaa !234
  store i32 (i32)* %109, i32 (i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 49), align 8, !tbaa !235
  %110 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetCurrentPoint = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %110, i32 0, i32 52
  %111 = load i32 (i32, i32, i32)*, i32 (i32, i32, i32)** %SetCurrentPoint, align 8, !tbaa !236
  store i32 (i32, i32, i32)* %111, i32 (i32, i32, i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 50), align 8, !tbaa !95
  %112 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %LinePath = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %112, i32 0, i32 53
  %113 = load i32 (i32, i32, i32, %struct._OPVP_Point*)*, i32 (i32, i32, i32, %struct._OPVP_Point*)** %LinePath, align 8, !tbaa !237
  %114 = bitcast i32 (i32, i32, i32, %struct._OPVP_Point*)* %113 to i32 (i32, i32, i32, %struct._opvp_point*)*
  store i32 (i32, i32, i32, %struct._opvp_point*)* %114, i32 (i32, i32, i32, %struct._opvp_point*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 51), align 8, !tbaa !144
  %115 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %PolygonPath = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %115, i32 0, i32 54
  %116 = load i32 (i32, i32, i32*, %struct._OPVP_Point*)*, i32 (i32, i32, i32*, %struct._OPVP_Point*)** %PolygonPath, align 8, !tbaa !238
  %117 = bitcast i32 (i32, i32, i32*, %struct._OPVP_Point*)* %116 to i32 (i32, i32, i32*, %struct._opvp_point*)*
  store i32 (i32, i32, i32*, %struct._opvp_point*)* %117, i32 (i32, i32, i32*, %struct._opvp_point*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 52), align 8, !tbaa !239
  %118 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %RectanglePath = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %118, i32 0, i32 55
  %119 = load i32 (i32, i32, %struct._OPVP_Rectangle*)*, i32 (i32, i32, %struct._OPVP_Rectangle*)** %RectanglePath, align 8, !tbaa !240
  %120 = bitcast i32 (i32, i32, %struct._OPVP_Rectangle*)* %119 to i32 (i32, i32, %struct._opvp_rectangle*)*
  store i32 (i32, i32, %struct._opvp_rectangle*)* %120, i32 (i32, i32, %struct._opvp_rectangle*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 53), align 8, !tbaa !241
  %121 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %RoundRectanglePath = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %121, i32 0, i32 56
  %122 = load i32 (i32, i32, %struct._OPVP_RoundRectangle*)*, i32 (i32, i32, %struct._OPVP_RoundRectangle*)** %RoundRectanglePath, align 8, !tbaa !242
  %123 = bitcast i32 (i32, i32, %struct._OPVP_RoundRectangle*)* %122 to i32 (i32, i32, %struct._opvp_roundrectangle*)*
  store i32 (i32, i32, %struct._opvp_roundrectangle*)* %123, i32 (i32, i32, %struct._opvp_roundrectangle*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 54), align 8, !tbaa !243
  %124 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %BezierPath = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %124, i32 0, i32 57
  %125 = load i32 (i32, i32, %struct._OPVP_Point*)*, i32 (i32, i32, %struct._OPVP_Point*)** %BezierPath, align 8, !tbaa !244
  %126 = bitcast i32 (i32, i32, %struct._OPVP_Point*)* %125 to i32 (i32, i32, %struct._opvp_point*)*
  store i32 (i32, i32, %struct._opvp_point*)* %126, i32 (i32, i32, %struct._opvp_point*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 55), align 8, !tbaa !145
  %127 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %ArcPath = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %127, i32 0, i32 58
  %128 = load i32 (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)** %ArcPath, align 8, !tbaa !245
  store i32 (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)* %128, i32 (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 56), align 8, !tbaa !246
  %129 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %DrawImage = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %129, i32 0, i32 60
  %130 = load i32 (i32, i32, i32, i32, i32, %struct._OPVP_Rectangle*, i32, i8*)*, i32 (i32, i32, i32, i32, i32, %struct._OPVP_Rectangle*, i32, i8*)** %DrawImage, align 8, !tbaa !247
  %cmp51 = icmp ne i32 (i32, i32, i32, i32, i32, %struct._OPVP_Rectangle*, i32, i8*)* %130, null
  br i1 %cmp51, label %if.then.52, label %if.else.53

if.then.52:                                       ; preds = %if.end.50
  store i32 (i32, i32, i32, i32, i32, i32, i32, i8*)* @DrawImageWrapper, i32 (i32, i32, i32, i32, i32, i32, i32, i8*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 57), align 8, !tbaa !248
  br label %if.end.54

if.else.53:                                       ; preds = %if.end.50
  store i32 (i32, i32, i32, i32, i32, i32, i32, i8*)* null, i32 (i32, i32, i32, i32, i32, i32, i32, i8*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 57), align 8, !tbaa !248
  br label %if.end.54

if.end.54:                                        ; preds = %if.else.53, %if.then.52
  %131 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %StartDrawImage = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %131, i32 0, i32 61
  %132 = load i32 (i32, i32, i32, i32, i32, %struct._OPVP_Rectangle*)*, i32 (i32, i32, i32, i32, i32, %struct._OPVP_Rectangle*)** %StartDrawImage, align 8, !tbaa !249
  %cmp55 = icmp ne i32 (i32, i32, i32, i32, i32, %struct._OPVP_Rectangle*)* %132, null
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %if.end.54
  store i32 (i32, i32, i32, i32, i32, i32, i32)* @StartDrawImageWrapper, i32 (i32, i32, i32, i32, i32, i32, i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 58), align 8, !tbaa !122
  br label %if.end.58

if.else.57:                                       ; preds = %if.end.54
  store i32 (i32, i32, i32, i32, i32, i32, i32)* null, i32 (i32, i32, i32, i32, i32, i32, i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 58), align 8, !tbaa !122
  br label %if.end.58

if.end.58:                                        ; preds = %if.else.57, %if.then.56
  %133 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %TransferDrawImage = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %133, i32 0, i32 62
  %134 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** %TransferDrawImage, align 8, !tbaa !250
  store i32 (i32, i32, i8*)* %134, i32 (i32, i32, i8*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 59), align 8, !tbaa !251
  %135 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %EndDrawImage = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %135, i32 0, i32 63
  %136 = load i32 (i32)*, i32 (i32)** %EndDrawImage, align 8, !tbaa !252
  %cmp59 = icmp ne i32 (i32)* %136, null
  br i1 %cmp59, label %if.then.60, label %if.else.61

if.then.60:                                       ; preds = %if.end.58
  store i32 (i32)* @EndDrawImageWrapper, i32 (i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 60), align 8, !tbaa !124
  br label %if.end.62

if.else.61:                                       ; preds = %if.end.58
  store i32 (i32)* null, i32 (i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 60), align 8, !tbaa !124
  br label %if.end.62

if.end.62:                                        ; preds = %if.else.61, %if.then.60
  %137 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %StartScanline = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %137, i32 0, i32 64
  %138 = load i32 (i32, i32)*, i32 (i32, i32)** %StartScanline, align 8, !tbaa !253
  store i32 (i32, i32)* %138, i32 (i32, i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 61), align 8, !tbaa !254
  %139 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %Scanline = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %139, i32 0, i32 65
  %140 = load i32 (i32, i32, i32*)*, i32 (i32, i32, i32*)** %Scanline, align 8, !tbaa !255
  store i32 (i32, i32, i32*)* %140, i32 (i32, i32, i32*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 62), align 8, !tbaa !256
  %141 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %EndScanline = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %141, i32 0, i32 66
  %142 = load i32 (i32)*, i32 (i32)** %EndScanline, align 8, !tbaa !257
  store i32 (i32)* %142, i32 (i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 63), align 8, !tbaa !258
  %143 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %StartRaster = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %143, i32 0, i32 67
  %144 = load i32 (i32, i32)*, i32 (i32, i32)** %StartRaster, align 8, !tbaa !259
  store i32 (i32, i32)* %144, i32 (i32, i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 64), align 8, !tbaa !127
  %145 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %TransferRasterData = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %145, i32 0, i32 68
  %146 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** %TransferRasterData, align 8, !tbaa !260
  store i32 (i32, i32, i8*)* %146, i32 (i32, i32, i8*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 65), align 8, !tbaa !130
  %147 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SkipRaster = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %147, i32 0, i32 69
  %148 = load i32 (i32, i32)*, i32 (i32, i32)** %SkipRaster, align 8, !tbaa !261
  store i32 (i32, i32)* %148, i32 (i32, i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 66), align 8, !tbaa !128
  %149 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %EndRaster = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %149, i32 0, i32 70
  %150 = load i32 (i32)*, i32 (i32)** %EndRaster, align 8, !tbaa !262
  store i32 (i32)* %150, i32 (i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 67), align 8, !tbaa !131
  %151 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %StartStream = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %151, i32 0, i32 71
  %152 = load i32 (i32)*, i32 (i32)** %StartStream, align 8, !tbaa !263
  store i32 (i32)* %152, i32 (i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 68), align 8, !tbaa !264
  %153 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %TransferStreamData = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %153, i32 0, i32 72
  %154 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** %TransferStreamData, align 8, !tbaa !265
  store i32 (i32, i32, i8*)* %154, i32 (i32, i32, i8*)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 69), align 8, !tbaa !266
  %155 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %EndStream = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %155, i32 0, i32 73
  %156 = load i32 (i32)*, i32 (i32)** %EndStream, align 8, !tbaa !267
  store i32 (i32)* %156, i32 (i32)** getelementptr inbounds (%struct._opvp_api_procs, %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, i32 0, i32 70), align 8, !tbaa !268
  %157 = load %struct._opvp_api_procs**, %struct._opvp_api_procs*** %apiProcs.addr, align 8, !tbaa !1
  store %struct._opvp_api_procs* @OpenPrinterWrapper.tEntry, %struct._opvp_api_procs** %157, align 8, !tbaa !1
  store i32 ()* @GetLastError_0_2, i32 ()** @GetLastError, align 8, !tbaa !1
  %158 = bitcast i32* %nApiEntry to i8*
  call void @llvm.lifetime.end(i64 4, i8* %158) #2
  br label %if.end.63

if.end.63:                                        ; preds = %if.end.62, %if.else
  br label %if.end.64

if.end.64:                                        ; preds = %if.end.63, %if.then
  %159 = load i32, i32* %dc, align 4, !tbaa !5
  %160 = bitcast i32* %dc to i8*
  call void @llvm.lifetime.end(i64 4, i8* %160) #2
  ret i32 %159
}

; Function Attrs: nounwind
declare noalias i8* @calloc(i64, i64) #4

; Function Attrs: nounwind uwtable
define internal i32 @opvp_unload_vector_driver() #0 {
entry:
  %0 = load i8*, i8** @handle, align 8, !tbaa !1
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** @handle, align 8, !tbaa !1
  %call = call i32 @dlclose(i8* %1) #8
  store i8* null, i8** @handle, align 8, !tbaa !1
  store i32 (i32, i8*, i32*, %struct._opvp_api_procs**)* null, i32 (i32, i8*, i32*, %struct._opvp_api_procs**)** @OpenPrinter, align 8, !tbaa !1
  store i32* null, i32** @ErrorNo, align 8, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

declare i32 @gdev_prn_close(%struct.gx_device_s*) #1

declare i32 @gdev_vector_close_file(%struct.gx_device_vector_s*) #1

declare void @gdev_vector_init(%struct.gx_device_vector_s*) #1

; Function Attrs: nounwind uwtable
define internal i8* @opvp_gen_job_info(%struct.gx_device_s* %dev) #0 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %0 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call = call i8* @opvp_gen_doc_info(%struct.gx_device_s* %0) #7
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define internal i8* @opvp_cat_string(i8** %destin, i8* %string) #0 {
entry:
  %retval = alloca i8*, align 8
  %destin.addr = alloca i8**, align 8
  %string.addr = alloca i8*, align 8
  store i8** %destin, i8*** %destin.addr, align 8, !tbaa !1
  store i8* %string, i8** %string.addr, align 8, !tbaa !1
  %0 = load i8**, i8*** %destin.addr, align 8, !tbaa !1
  %tobool = icmp ne i8** %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8**, i8*** %destin.addr, align 8, !tbaa !1
  %2 = load i8*, i8** %1, align 8, !tbaa !1
  %tobool1 = icmp ne i8* %2, null
  br i1 %tobool1, label %if.end.3, label %if.then.2

if.then.2:                                        ; preds = %if.end
  %3 = load i8**, i8*** %destin.addr, align 8, !tbaa !1
  %4 = load i8*, i8** %string.addr, align 8, !tbaa !1
  %call = call i8* @opvp_alloc_string(i8** %3, i8* %4) #7
  store i8* %call, i8** %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %5 = load i8*, i8** %string.addr, align 8, !tbaa !1
  %tobool4 = icmp ne i8* %5, null
  br i1 %tobool4, label %if.then.5, label %if.end.11

if.then.5:                                        ; preds = %if.end.3
  %6 = load i8**, i8*** %destin.addr, align 8, !tbaa !1
  %7 = load i8*, i8** %6, align 8, !tbaa !1
  %8 = load i8**, i8*** %destin.addr, align 8, !tbaa !1
  %9 = load i8*, i8** %8, align 8, !tbaa !1
  %call6 = call i64 @strlen(i8* %9) #9
  %10 = load i8*, i8** %string.addr, align 8, !tbaa !1
  %call7 = call i64 @strlen(i8* %10) #9
  %add = add i64 %call6, %call7
  %add8 = add i64 %add, 1
  %call9 = call i8* @realloc(i8* %7, i64 %add8) #8
  %11 = load i8**, i8*** %destin.addr, align 8, !tbaa !1
  store i8* %call9, i8** %11, align 8, !tbaa !1
  %12 = load i8**, i8*** %destin.addr, align 8, !tbaa !1
  %13 = load i8*, i8** %12, align 8, !tbaa !1
  %14 = load i8*, i8** %string.addr, align 8, !tbaa !1
  %call10 = call i8* @strcat(i8* %13, i8* %14) #8
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.5, %if.end.3
  %15 = load i8**, i8*** %destin.addr, align 8, !tbaa !1
  %16 = load i8*, i8** %15, align 8, !tbaa !1
  store i8* %16, i8** %retval
  br label %return

return:                                           ; preds = %if.end.11, %if.then.2, %if.then
  %17 = load i8*, i8** %retval
  ret i8* %17
}

; Function Attrs: nounwind uwtable
define internal i8* @opvp_to_utf8(i8* %string) #0 {
entry:
  %string.addr = alloca i8*, align 8
  %locale = alloca i8*, align 8
  %cd = alloca i8*, align 8
  %buff = alloca i8*, align 8
  %ib = alloca i64, align 8
  %ob = alloca i64, align 8
  %complete = alloca i32, align 4
  %ibuff = alloca i8*, align 8
  %obuff = alloca i8*, align 8
  %ostring = alloca i8*, align 8
  %__s1_len = alloca i64, align 8
  %__s2_len = alloca i64, align 8
  %tmp = alloca i32, align 4
  %__s1 = alloca i8*, align 8
  %__result = alloca i32, align 4
  %tmp44 = alloca i32, align 4
  store i8* %string, i8** %string.addr, align 8, !tbaa !1
  %0 = bitcast i8** %locale to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = bitcast i8** %cd to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #2
  %2 = bitcast i8** %buff to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #2
  store i8* null, i8** %buff, align 8, !tbaa !1
  %3 = bitcast i64* %ib to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = bitcast i64* %ob to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #2
  %5 = bitcast i32* %complete to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #2
  store i32 0, i32* %complete, align 4, !tbaa !5
  %6 = bitcast i8** %ibuff to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = bitcast i8** %obuff to i8*
  call void @llvm.lifetime.start(i64 8, i8* %7) #2
  %8 = bitcast i8** %ostring to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #2
  store i8* null, i8** %ostring, align 8, !tbaa !1
  %9 = load i8*, i8** %string.addr, align 8, !tbaa !1
  %tobool = icmp ne i8* %9, null
  br i1 %tobool, label %if.then, label %if.end.64

if.then:                                          ; preds = %entry
  %10 = load i8*, i8** %string.addr, align 8, !tbaa !1
  %call = call i64 @strlen(i8* %10) #9
  store i64 %call, i64* %ib, align 8, !tbaa !90
  %11 = load i64, i64* %ib, align 8, !tbaa !90
  %cmp = icmp ugt i64 %11, 0
  br i1 %cmp, label %if.then.1, label %if.end.63

if.then.1:                                        ; preds = %if.then
  %12 = load i64, i64* %ib, align 8, !tbaa !90
  %mul = mul i64 %12, 4
  store i64 %mul, i64* %ob, align 8, !tbaa !90
  %13 = load i64, i64* %ob, align 8, !tbaa !90
  %add = add i64 %13, 1
  %call2 = call noalias i8* @malloc(i64 %add) #8
  store i8* %call2, i8** %buff, align 8, !tbaa !1
  %call3 = call i8* @setlocale(i32 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.183, i32 0, i32 0)) #8
  %call4 = call i8* @nl_langinfo(i32 14) #8
  store i8* %call4, i8** %locale, align 8, !tbaa !1
  %14 = load i8*, i8** %locale, align 8, !tbaa !1
  %tobool5 = icmp ne i8* %14, null
  br i1 %tobool5, label %if.then.6, label %if.end.62

if.then.6:                                        ; preds = %if.then.1
  %15 = bitcast i64* %__s1_len to i8*
  call void @llvm.lifetime.start(i64 8, i8* %15) #2
  %16 = bitcast i64* %__s2_len to i8*
  call void @llvm.lifetime.start(i64 8, i8* %16) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.202, i32 0, i64 1) to i64), i64 ptrtoint ([2 x i8]* @.str.202 to i64)), i64 1), label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.then.6
  %call7 = call i64 @strlen(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.202, i32 0, i32 0)) #9
  store i64 %call7, i64* %__s2_len, align 8, !tbaa !90
  %17 = load i64, i64* %__s2_len, align 8, !tbaa !90
  %cmp8 = icmp ult i64 %17, 4
  br i1 %cmp8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %18 = bitcast i8** %__s1 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %18) #2
  %19 = load i8*, i8** %locale, align 8, !tbaa !1
  store i8* %19, i8** %__s1, align 8, !tbaa !1
  %20 = bitcast i32* %__result to i8*
  call void @llvm.lifetime.start(i64 4, i8* %20) #2
  %21 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds i8, i8* %21, i64 0
  %22 = load i8, i8* %arrayidx, align 1, !tbaa !64
  %conv = zext i8 %22 to i32
  %23 = load i8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.202, i32 0, i32 0), align 1, !tbaa !64
  %conv11 = zext i8 %23 to i32
  %sub = sub nsw i32 %conv, %conv11
  store i32 %sub, i32* %__result, align 4, !tbaa !5
  %24 = load i64, i64* %__s2_len, align 8, !tbaa !90
  %cmp12 = icmp ugt i64 %24, 0
  br i1 %cmp12, label %land.lhs.true.14, label %if.end.43

land.lhs.true.14:                                 ; preds = %cond.true
  %25 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp15 = icmp eq i32 %25, 0
  br i1 %cmp15, label %if.then.17, label %if.end.43

if.then.17:                                       ; preds = %land.lhs.true.14
  %26 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx18 = getelementptr inbounds i8, i8* %26, i64 1
  %27 = load i8, i8* %arrayidx18, align 1, !tbaa !64
  %conv19 = zext i8 %27 to i32
  %28 = load i8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.202, i32 0, i64 1), align 1, !tbaa !64
  %conv20 = zext i8 %28 to i32
  %sub21 = sub nsw i32 %conv19, %conv20
  store i32 %sub21, i32* %__result, align 4, !tbaa !5
  %29 = load i64, i64* %__s2_len, align 8, !tbaa !90
  %cmp22 = icmp ugt i64 %29, 1
  br i1 %cmp22, label %land.lhs.true.24, label %if.end.42

land.lhs.true.24:                                 ; preds = %if.then.17
  %30 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp25 = icmp eq i32 %30, 0
  br i1 %cmp25, label %if.then.27, label %if.end.42

if.then.27:                                       ; preds = %land.lhs.true.24
  %31 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx28 = getelementptr inbounds i8, i8* %31, i64 2
  %32 = load i8, i8* %arrayidx28, align 1, !tbaa !64
  %conv29 = zext i8 %32 to i32
  %33 = load i8, i8* getelementptr inbounds (i8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.202, i32 0, i32 0), i64 2), align 1, !tbaa !64
  %conv30 = zext i8 %33 to i32
  %sub31 = sub nsw i32 %conv29, %conv30
  store i32 %sub31, i32* %__result, align 4, !tbaa !5
  %34 = load i64, i64* %__s2_len, align 8, !tbaa !90
  %cmp32 = icmp ugt i64 %34, 2
  br i1 %cmp32, label %land.lhs.true.34, label %if.end

land.lhs.true.34:                                 ; preds = %if.then.27
  %35 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp35 = icmp eq i32 %35, 0
  br i1 %cmp35, label %if.then.37, label %if.end

if.then.37:                                       ; preds = %land.lhs.true.34
  %36 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx38 = getelementptr inbounds i8, i8* %36, i64 3
  %37 = load i8, i8* %arrayidx38, align 1, !tbaa !64
  %conv39 = zext i8 %37 to i32
  %38 = load i8, i8* getelementptr inbounds (i8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.202, i32 0, i32 0), i64 3), align 1, !tbaa !64
  %conv40 = zext i8 %38 to i32
  %sub41 = sub nsw i32 %conv39, %conv40
  store i32 %sub41, i32* %__result, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.then.37, %land.lhs.true.34, %if.then.27
  br label %if.end.42

if.end.42:                                        ; preds = %if.end, %land.lhs.true.24, %if.then.17
  br label %if.end.43

if.end.43:                                        ; preds = %if.end.42, %land.lhs.true.14, %cond.true
  %39 = load i32, i32* %__result, align 4, !tbaa !5
  store i32 %39, i32* %tmp44, !tbaa !5
  %40 = bitcast i32* %__result to i8*
  call void @llvm.lifetime.end(i64 4, i8* %40) #2
  %41 = bitcast i8** %__s1 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %41) #2
  %42 = load i32, i32* %tmp44, !tbaa !5
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.then.6
  %43 = load i8*, i8** %locale, align 8, !tbaa !1
  %call45 = call i32 @strcmp(i8* %43, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.202, i32 0, i32 0)) #8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %if.end.43
  %cond = phi i32 [ %42, %if.end.43 ], [ %call45, %cond.false ]
  store i32 %cond, i32* %tmp, !tbaa !5
  %44 = bitcast i64* %__s2_len to i8*
  call void @llvm.lifetime.end(i64 8, i8* %44) #2
  %45 = bitcast i64* %__s1_len to i8*
  call void @llvm.lifetime.end(i64 8, i8* %45) #2
  %46 = load i32, i32* %tmp, !tbaa !5
  %tobool46 = icmp ne i32 %46, 0
  br i1 %tobool46, label %land.lhs.true.47, label %if.end.61

land.lhs.true.47:                                 ; preds = %cond.end
  %47 = load i8*, i8** %buff, align 8, !tbaa !1
  %tobool48 = icmp ne i8* %47, null
  br i1 %tobool48, label %if.then.49, label %if.end.61

if.then.49:                                       ; preds = %land.lhs.true.47
  %48 = load i8*, i8** %locale, align 8, !tbaa !1
  %call50 = call i8* @iconv_open(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.203, i32 0, i32 0), i8* %48) #7
  store i8* %call50, i8** %cd, align 8, !tbaa !1
  %cmp51 = icmp ne i8* %call50, inttoptr (i64 -1 to i8*)
  br i1 %cmp51, label %if.then.53, label %if.end.60

if.then.53:                                       ; preds = %if.then.49
  %49 = load i8*, i8** %string.addr, align 8, !tbaa !1
  store i8* %49, i8** %ibuff, align 8, !tbaa !1
  %50 = load i8*, i8** %buff, align 8, !tbaa !1
  store i8* %50, i8** %obuff, align 8, !tbaa !1
  %51 = load i8*, i8** %cd, align 8, !tbaa !1
  %call54 = call i64 @iconv(i8* %51, i8** %ibuff, i64* %ib, i8** %obuff, i64* %ob) #7
  %cmp55 = icmp ne i64 %call54, -1
  br i1 %cmp55, label %if.then.57, label %if.end.58

if.then.57:                                       ; preds = %if.then.53
  %52 = load i8*, i8** %obuff, align 8, !tbaa !1
  store i8 0, i8* %52, align 1, !tbaa !64
  store i32 1, i32* %complete, align 4, !tbaa !5
  br label %if.end.58

if.end.58:                                        ; preds = %if.then.57, %if.then.53
  %53 = load i8*, i8** %cd, align 8, !tbaa !1
  %call59 = call i32 @iconv_close(i8* %53) #7
  br label %if.end.60

if.end.60:                                        ; preds = %if.end.58, %if.then.49
  br label %if.end.61

if.end.61:                                        ; preds = %if.end.60, %land.lhs.true.47, %cond.end
  br label %if.end.62

if.end.62:                                        ; preds = %if.end.61, %if.then.1
  br label %if.end.63

if.end.63:                                        ; preds = %if.end.62, %if.then
  br label %if.end.64

if.end.64:                                        ; preds = %if.end.63, %entry
  %54 = load i32, i32* %complete, align 4, !tbaa !5
  %tobool65 = icmp ne i32 %54, 0
  br i1 %tobool65, label %if.then.66, label %if.else

if.then.66:                                       ; preds = %if.end.64
  %55 = load i8*, i8** %buff, align 8, !tbaa !1
  %call67 = call i8* @opvp_alloc_string(i8** %ostring, i8* %55) #7
  store i8* %call67, i8** %ostring, align 8, !tbaa !1
  br label %if.end.68

if.else:                                          ; preds = %if.end.64
  %56 = load i8*, i8** %string.addr, align 8, !tbaa !1
  store i8* %56, i8** %ostring, align 8, !tbaa !1
  br label %if.end.68

if.end.68:                                        ; preds = %if.else, %if.then.66
  %57 = load i8*, i8** %buff, align 8, !tbaa !1
  %tobool69 = icmp ne i8* %57, null
  br i1 %tobool69, label %if.then.70, label %if.end.71

if.then.70:                                       ; preds = %if.end.68
  %58 = load i8*, i8** %buff, align 8, !tbaa !1
  call void @free(i8* %58) #8
  br label %if.end.71

if.end.71:                                        ; preds = %if.then.70, %if.end.68
  %59 = load i8*, i8** %ostring, align 8, !tbaa !1
  %60 = bitcast i8** %ostring to i8*
  call void @llvm.lifetime.end(i64 8, i8* %60) #2
  %61 = bitcast i8** %obuff to i8*
  call void @llvm.lifetime.end(i64 8, i8* %61) #2
  %62 = bitcast i8** %ibuff to i8*
  call void @llvm.lifetime.end(i64 8, i8* %62) #2
  %63 = bitcast i32* %complete to i8*
  call void @llvm.lifetime.end(i64 4, i8* %63) #2
  %64 = bitcast i64* %ob to i8*
  call void @llvm.lifetime.end(i64 8, i8* %64) #2
  %65 = bitcast i64* %ib to i8*
  call void @llvm.lifetime.end(i64 8, i8* %65) #2
  %66 = bitcast i8** %buff to i8*
  call void @llvm.lifetime.end(i64 8, i8* %66) #2
  %67 = bitcast i8** %cd to i8*
  call void @llvm.lifetime.end(i64 8, i8* %67) #2
  %68 = bitcast i8** %locale to i8*
  call void @llvm.lifetime.end(i64 8, i8* %68) #2
  ret i8* %59
}

; Function Attrs: nounwind uwtable
define internal i8* @opvp_gen_doc_info(%struct.gx_device_s* %dev) #0 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %0 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call = call i8* @opvp_gen_page_info(%struct.gx_device_s* %0) #7
  ret i8* %call
}

declare i32 @open(i8*, i32, ...) #1

declare void @gx_device_fill_in_procs(%struct.gx_device_s*) #1

declare i32 @close(i32) #1

; Function Attrs: nounwind uwtable
define internal i8** @opvp_gen_dynamic_lib_name() #0 {
entry:
  %retval = alloca i8**, align 8
  %tbuff = alloca [1024 x i8], align 16
  %cleanup.dest.slot = alloca i32
  %0 = bitcast [1024 x i8]* %tbuff to i8*
  call void @llvm.lifetime.start(i64 1024, i8* %0) #2
  %1 = load i8*, i8** @vectorDriver, align 8, !tbaa !1
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8** null, i8*** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %tbuff, i32 0, i32 0
  %call = call i8* @memset(i8* %arraydecay, i32 0, i64 1024) #8
  %arraydecay1 = getelementptr inbounds [1024 x i8], [1024 x i8]* %tbuff, i32 0, i32 0
  %2 = load i8*, i8** @vectorDriver, align 8, !tbaa !1
  %call2 = call i8* @strncpy(i8* %arraydecay1, i8* %2, i64 1023) #8
  %arraydecay3 = getelementptr inbounds [1024 x i8], [1024 x i8]* %tbuff, i32 0, i32 0
  %call4 = call i8* @opvp_alloc_string(i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @opvp_gen_dynamic_lib_name.buff, i32 0, i64 0), i8* %arraydecay3) #7
  %arraydecay5 = getelementptr inbounds [1024 x i8], [1024 x i8]* %tbuff, i32 0, i32 0
  %call6 = call i8* @memset(i8* %arraydecay5, i32 0, i64 1024) #8
  %arraydecay7 = getelementptr inbounds [1024 x i8], [1024 x i8]* %tbuff, i32 0, i32 0
  %3 = load i8*, i8** @vectorDriver, align 8, !tbaa !1
  %call8 = call i8* @strncpy(i8* %arraydecay7, i8* %3, i64 1020) #8
  %arraydecay9 = getelementptr inbounds [1024 x i8], [1024 x i8]* %tbuff, i32 0, i32 0
  %call10 = call i8* @strcat(i8* %arraydecay9, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.189, i32 0, i32 0)) #8
  %arraydecay11 = getelementptr inbounds [1024 x i8], [1024 x i8]* %tbuff, i32 0, i32 0
  %call12 = call i8* @opvp_alloc_string(i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @opvp_gen_dynamic_lib_name.buff, i32 0, i64 1), i8* %arraydecay11) #7
  %arraydecay13 = getelementptr inbounds [1024 x i8], [1024 x i8]* %tbuff, i32 0, i32 0
  %call14 = call i8* @memset(i8* %arraydecay13, i32 0, i64 1024) #8
  %arraydecay15 = getelementptr inbounds [1024 x i8], [1024 x i8]* %tbuff, i32 0, i32 0
  %4 = load i8*, i8** @vectorDriver, align 8, !tbaa !1
  %call16 = call i8* @strncpy(i8* %arraydecay15, i8* %4, i64 1019) #8
  %arraydecay17 = getelementptr inbounds [1024 x i8], [1024 x i8]* %tbuff, i32 0, i32 0
  %call18 = call i8* @strcat(i8* %arraydecay17, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.190, i32 0, i32 0)) #8
  %arraydecay19 = getelementptr inbounds [1024 x i8], [1024 x i8]* %tbuff, i32 0, i32 0
  %call20 = call i8* @opvp_alloc_string(i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @opvp_gen_dynamic_lib_name.buff, i32 0, i64 2), i8* %arraydecay19) #7
  %arraydecay21 = getelementptr inbounds [1024 x i8], [1024 x i8]* %tbuff, i32 0, i32 0
  %call22 = call i8* @memset(i8* %arraydecay21, i32 0, i64 1024) #8
  %arraydecay23 = getelementptr inbounds [1024 x i8], [1024 x i8]* %tbuff, i32 0, i32 0
  %call24 = call i8* @strcpy(i8* %arraydecay23, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.191, i32 0, i32 0)) #8
  %arraydecay25 = getelementptr inbounds [1024 x i8], [1024 x i8]* %tbuff, i32 0, i32 0
  %5 = load i8*, i8** @vectorDriver, align 8, !tbaa !1
  %call26 = call i8* @strncat(i8* %arraydecay25, i8* %5, i64 1017) #8
  %arraydecay27 = getelementptr inbounds [1024 x i8], [1024 x i8]* %tbuff, i32 0, i32 0
  %call28 = call i8* @strcat(i8* %arraydecay27, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.189, i32 0, i32 0)) #8
  %arraydecay29 = getelementptr inbounds [1024 x i8], [1024 x i8]* %tbuff, i32 0, i32 0
  %call30 = call i8* @opvp_alloc_string(i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @opvp_gen_dynamic_lib_name.buff, i32 0, i64 3), i8* %arraydecay29) #7
  store i8* null, i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @opvp_gen_dynamic_lib_name.buff, i32 0, i64 4), align 8, !tbaa !1
  store i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @opvp_gen_dynamic_lib_name.buff, i32 0, i32 0), i8*** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %6 = bitcast [1024 x i8]* %tbuff to i8*
  call void @llvm.lifetime.end(i64 1024, i8* %6) #2
  %7 = load i8**, i8*** %retval
  ret i8** %7
}

; Function Attrs: nounwind
declare i8* @dlopen(i8*, i32) #4

; Function Attrs: nounwind
declare i8* @dlsym(i8*, i8*) #4

; Function Attrs: nounwind
declare i8* @strncpy(i8*, i8*, i64) #4

; Function Attrs: nounwind
declare i8* @strcat(i8*, i8*) #4

; Function Attrs: nounwind
declare i8* @strncat(i8*, i8*, i64) #4

; Function Attrs: nounwind uwtable
define internal i32 @StartPageWrapper(i32 %printerContext, i8* %pageInfo) #0 {
entry:
  %retval = alloca i32, align 4
  %printerContext.addr = alloca i32, align 4
  %pageInfo.addr = alloca i8*, align 8
  %r = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store i32 %printerContext, i32* %printerContext.addr, align 4, !tbaa !5
  store i8* %pageInfo, i8** %pageInfo.addr, align 8, !tbaa !1
  %0 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %StartPage = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %1, i32 0, i32 6
  %2 = load i32 (i32, i8*)*, i32 (i32, i8*)** %StartPage, align 8, !tbaa !162
  %3 = load i32, i32* %printerContext.addr, align 4, !tbaa !5
  %4 = load i8*, i8** %pageInfo.addr, align 8, !tbaa !1
  %call = call i32 %2(i32 %3, i8* %4) #7
  store i32 %call, i32* %r, align 4, !tbaa !5
  %cmp = icmp ne i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %r, align 4, !tbaa !5
  store i32 %5, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %6 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetROP = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %6, i32 0, i32 20
  %7 = load i32 (i32, i32)*, i32 (i32, i32)** %SetROP, align 8, !tbaa !269
  %cmp1 = icmp ne i32 (i32, i32)* %7, null
  br i1 %cmp1, label %if.then.2, label %if.end.5

if.then.2:                                        ; preds = %if.end
  %8 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetROP3 = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %8, i32 0, i32 20
  %9 = load i32 (i32, i32)*, i32 (i32, i32)** %SetROP3, align 8, !tbaa !269
  %10 = load i32, i32* %printerContext.addr, align 4, !tbaa !5
  %call4 = call i32 %9(i32 %10, i32 240) #7
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.2, %if.end
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.5, %if.then
  %11 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %11) #2
  %12 = load i32, i32* %retval
  ret i32 %12
}

; Function Attrs: nounwind uwtable
define internal i32 @QueryDeviceCapabilityWrapper(i32 %printerContext, i32 %queryflag, i32* %buflen, i8* %infoBuf) #0 {
entry:
  %printerContext.addr = alloca i32, align 4
  %queryflag.addr = alloca i32, align 4
  %buflen.addr = alloca i32*, align 8
  %infoBuf.addr = alloca i8*, align 8
  store i32 %printerContext, i32* %printerContext.addr, align 4, !tbaa !5
  store i32 %queryflag, i32* %queryflag.addr, align 4, !tbaa !64
  store i32* %buflen, i32** %buflen.addr, align 8, !tbaa !1
  store i8* %infoBuf, i8** %infoBuf.addr, align 8, !tbaa !1
  %0 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %QueryDeviceCapability = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %0, i32 0, i32 8
  %1 = load i32 (i32, i32, i32, i8*)*, i32 (i32, i32, i32, i8*)** %QueryDeviceCapability, align 8, !tbaa !166
  %2 = load i32, i32* %printerContext.addr, align 4, !tbaa !5
  %3 = load i32, i32* %queryflag.addr, align 4, !tbaa !64
  %4 = load i32*, i32** %buflen.addr, align 8, !tbaa !1
  %5 = load i32, i32* %4, align 4, !tbaa !5
  %6 = load i8*, i8** %infoBuf.addr, align 8, !tbaa !1
  %call = call i32 %1(i32 %2, i32 %3, i32 %5, i8* %6) #7
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define internal i32 @QueryDeviceInfoWrapper(i32 %printerContext, i32 %queryflag, i32* %buflen, i8* %infoBuf) #0 {
entry:
  %retval = alloca i32, align 4
  %printerContext.addr = alloca i32, align 4
  %queryflag.addr = alloca i32, align 4
  %buflen.addr = alloca i32*, align 8
  %infoBuf.addr = alloca i8*, align 8
  store i32 %printerContext, i32* %printerContext.addr, align 4, !tbaa !5
  store i32 %queryflag, i32* %queryflag.addr, align 4, !tbaa !64
  store i32* %buflen, i32** %buflen.addr, align 8, !tbaa !1
  store i8* %infoBuf, i8** %infoBuf.addr, align 8, !tbaa !1
  %0 = load i32, i32* %queryflag.addr, align 4, !tbaa !64
  %and = and i32 %0, 256
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** @ErrorNo, align 8, !tbaa !1
  store i32 -4, i32* %1, align 4, !tbaa !5
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %queryflag.addr, align 4, !tbaa !64
  %and1 = and i32 %2, 65536
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %if.then.3, label %if.end.5

if.then.3:                                        ; preds = %if.end
  %3 = load i32, i32* %queryflag.addr, align 4, !tbaa !64
  %and4 = and i32 %3, -65537
  store i32 %and4, i32* %queryflag.addr, align 4, !tbaa !64
  %4 = load i32, i32* %queryflag.addr, align 4, !tbaa !64
  %or = or i32 %4, 131072
  store i32 %or, i32* %queryflag.addr, align 4, !tbaa !64
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.3, %if.end
  %5 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %QueryDeviceInfo = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %5, i32 0, i32 9
  %6 = load i32 (i32, i32, i32, i8*)*, i32 (i32, i32, i32, i8*)** %QueryDeviceInfo, align 8, !tbaa !168
  %7 = load i32, i32* %printerContext.addr, align 4, !tbaa !5
  %8 = load i32, i32* %queryflag.addr, align 4, !tbaa !64
  %9 = load i32*, i32** %buflen.addr, align 8, !tbaa !1
  %10 = load i32, i32* %9, align 4, !tbaa !5
  %11 = load i8*, i8** %infoBuf.addr, align 8, !tbaa !1
  %call = call i32 %6(i32 %7, i32 %8, i32 %10, i8* %11) #7
  store i32 %call, i32* %retval
  br label %return

return:                                           ; preds = %if.end.5, %if.then
  %12 = load i32, i32* %retval
  ret i32 %12
}

; Function Attrs: nounwind uwtable
define internal i32 @InitGSWrapper(i32 %printerContext) #0 {
entry:
  %retval = alloca i32, align 4
  %printerContext.addr = alloca i32, align 4
  %r = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store i32 %printerContext, i32* %printerContext.addr, align 4, !tbaa !5
  %0 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %InitGS = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %1, i32 0, i32 13
  %2 = load i32 (i32)*, i32 (i32)** %InitGS, align 8, !tbaa !174
  %3 = load i32, i32* %printerContext.addr, align 4, !tbaa !5
  %call = call i32 %2(i32 %3) #7
  store i32 %call, i32* %r, align 4, !tbaa !5
  %cmp = icmp ne i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %r, align 4, !tbaa !5
  store i32 %4, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %5 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetROP = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %5, i32 0, i32 20
  %6 = load i32 (i32, i32)*, i32 (i32, i32)** %SetROP, align 8, !tbaa !269
  %cmp1 = icmp ne i32 (i32, i32)* %6, null
  br i1 %cmp1, label %if.then.2, label %if.end.5

if.then.2:                                        ; preds = %if.end
  %7 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetROP3 = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %7, i32 0, i32 20
  %8 = load i32 (i32, i32)*, i32 (i32, i32)** %SetROP3, align 8, !tbaa !269
  %9 = load i32, i32* %printerContext.addr, align 4, !tbaa !5
  %call4 = call i32 %8(i32 %9, i32 240) #7
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.2, %if.end
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.5, %if.then
  %10 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %10) #2
  %11 = load i32, i32* %retval
  ret i32 %11
}

; Function Attrs: nounwind uwtable
define internal i32 @QueryColorSpaceWrapper(i32 %printerContext, i32* %pnum, i32* %pcspace) #0 {
entry:
  %retval = alloca i32, align 4
  %printerContext.addr = alloca i32, align 4
  %pnum.addr = alloca i32*, align 8
  %pcspace.addr = alloca i32*, align 8
  %r = alloca i32, align 4
  %i = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store i32 %printerContext, i32* %printerContext.addr, align 4, !tbaa !5
  store i32* %pnum, i32** %pnum.addr, align 8, !tbaa !1
  store i32* %pcspace, i32** %pcspace.addr, align 8, !tbaa !1
  %0 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #2
  %2 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %QueryColorSpace = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %2, i32 0, i32 16
  %3 = load i32 (i32, i32*, i32*)*, i32 (i32, i32*, i32*)** %QueryColorSpace, align 8, !tbaa !180
  %4 = load i32, i32* %printerContext.addr, align 4, !tbaa !5
  %5 = load i32*, i32** %pcspace.addr, align 8, !tbaa !1
  %6 = load i32*, i32** %pnum.addr, align 8, !tbaa !1
  %call = call i32 %3(i32 %4, i32* %5, i32* %6) #7
  store i32 %call, i32* %r, align 4, !tbaa !5
  %cmp = icmp ne i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load i32, i32* %r, align 4, !tbaa !5
  store i32 %7, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i32, i32* %i, align 4, !tbaa !5
  %9 = load i32*, i32** %pnum.addr, align 8, !tbaa !1
  %10 = load i32, i32* %9, align 4, !tbaa !5
  %cmp1 = icmp slt i32 %8, %10
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom = sext i32 %11 to i64
  %12 = load i32*, i32** %pcspace.addr, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds i32, i32* %12, i64 %idxprom
  %13 = load i32, i32* %arrayidx, align 4, !tbaa !64
  %conv = zext i32 %13 to i64
  %cmp2 = icmp uge i64 %conv, 7
  br i1 %cmp2, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %for.body
  %14 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom5 = sext i32 %14 to i64
  %15 = load i32*, i32** %pcspace.addr, align 8, !tbaa !1
  %arrayidx6 = getelementptr inbounds i32, i32* %15, i64 %idxprom5
  store i32 4, i32* %arrayidx6, align 4, !tbaa !64
  br label %if.end.13

if.else:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom7 = sext i32 %16 to i64
  %17 = load i32*, i32** %pcspace.addr, align 8, !tbaa !1
  %arrayidx8 = getelementptr inbounds i32, i32* %17, i64 %idxprom7
  %18 = load i32, i32* %arrayidx8, align 4, !tbaa !64
  %idxprom9 = zext i32 %18 to i64
  %arrayidx10 = getelementptr inbounds [7 x i32], [7 x i32]* @cspace_0_2_to_1_0, i32 0, i64 %idxprom9
  %19 = load i32, i32* %arrayidx10, align 4, !tbaa !64
  %20 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom11 = sext i32 %20 to i64
  %21 = load i32*, i32** %pcspace.addr, align 8, !tbaa !1
  %arrayidx12 = getelementptr inbounds i32, i32* %21, i64 %idxprom11
  store i32 %19, i32* %arrayidx12, align 4, !tbaa !64
  br label %if.end.13

if.end.13:                                        ; preds = %if.else, %if.then.4
  br label %for.inc

for.inc:                                          ; preds = %if.end.13
  %22 = load i32, i32* %i, align 4, !tbaa !5
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then
  %23 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %23) #2
  %24 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %24) #2
  %25 = load i32, i32* %retval
  ret i32 %25
}

; Function Attrs: nounwind uwtable
define internal i32 @SetColorSpaceWrapper(i32 %printerContext, i32 %cspace) #0 {
entry:
  %retval = alloca i32, align 4
  %printerContext.addr = alloca i32, align 4
  %cspace.addr = alloca i32, align 4
  store i32 %printerContext, i32* %printerContext.addr, align 4, !tbaa !5
  store i32 %cspace, i32* %cspace.addr, align 4, !tbaa !64
  %0 = load i32, i32* %cspace.addr, align 4, !tbaa !64
  %cmp = icmp eq i32 %0, 5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** @ErrorNo, align 8, !tbaa !1
  store i32 -104, i32* %1, align 4, !tbaa !5
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %cspace.addr, align 4, !tbaa !64
  %conv = zext i32 %2 to i64
  %cmp1 = icmp uge i64 %conv, 8
  br i1 %cmp1, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  %3 = load i32*, i32** @ErrorNo, align 8, !tbaa !1
  store i32 -106, i32* %3, align 4, !tbaa !5
  store i32 -1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %4 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetColorSpace = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %4, i32 0, i32 17
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %SetColorSpace, align 8, !tbaa !181
  %6 = load i32, i32* %printerContext.addr, align 4, !tbaa !5
  %7 = load i32, i32* %cspace.addr, align 4, !tbaa !64
  %idxprom = zext i32 %7 to i64
  %arrayidx = getelementptr inbounds [8 x i32], [8 x i32]* @cspace_1_0_to_0_2, i32 0, i64 %idxprom
  %8 = load i32, i32* %arrayidx, align 4, !tbaa !64
  %call = call i32 %5(i32 %6, i32 %8) #7
  store i32 %call, i32* %retval
  br label %return

return:                                           ; preds = %if.end.4, %if.then.3, %if.then
  %9 = load i32, i32* %retval
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define internal i32 @GetColorSpaceWrapper(i32 %printerContext, i32* %pcspace) #0 {
entry:
  %retval = alloca i32, align 4
  %printerContext.addr = alloca i32, align 4
  %pcspace.addr = alloca i32*, align 8
  %r = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store i32 %printerContext, i32* %printerContext.addr, align 4, !tbaa !5
  store i32* %pcspace, i32** %pcspace.addr, align 8, !tbaa !1
  %0 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %GetColorSpace = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %1, i32 0, i32 18
  %2 = load i32 (i32, i32*)*, i32 (i32, i32*)** %GetColorSpace, align 8, !tbaa !182
  %3 = load i32, i32* %printerContext.addr, align 4, !tbaa !5
  %4 = load i32*, i32** %pcspace.addr, align 8, !tbaa !1
  %call = call i32 %2(i32 %3, i32* %4) #7
  store i32 %call, i32* %r, align 4, !tbaa !5
  %cmp = icmp ne i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %r, align 4, !tbaa !5
  store i32 %5, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %6 = load i32*, i32** %pcspace.addr, align 8, !tbaa !1
  %7 = load i32, i32* %6, align 4, !tbaa !64
  %conv = zext i32 %7 to i64
  %cmp1 = icmp uge i64 %conv, 7
  br i1 %cmp1, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.end
  %8 = load i32*, i32** %pcspace.addr, align 8, !tbaa !1
  store i32 4, i32* %8, align 4, !tbaa !64
  br label %if.end.4

if.else:                                          ; preds = %if.end
  %9 = load i32*, i32** %pcspace.addr, align 8, !tbaa !1
  %10 = load i32, i32* %9, align 4, !tbaa !64
  %idxprom = zext i32 %10 to i64
  %arrayidx = getelementptr inbounds [7 x i32], [7 x i32]* @cspace_0_2_to_1_0, i32 0, i64 %idxprom
  %11 = load i32, i32* %arrayidx, align 4, !tbaa !64
  %12 = load i32*, i32** %pcspace.addr, align 8, !tbaa !1
  store i32 %11, i32* %12, align 4, !tbaa !64
  br label %if.end.4

if.end.4:                                         ; preds = %if.else, %if.then.3
  %13 = load i32, i32* %r, align 4, !tbaa !5
  store i32 %13, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.4, %if.then
  %14 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %14) #2
  %15 = load i32, i32* %retval
  ret i32 %15
}

; Function Attrs: nounwind uwtable
define internal i32 @SetLineDashWrapper(i32 %printerContext, i32 %num, i32* %pdash) #0 {
entry:
  %printerContext.addr = alloca i32, align 4
  %num.addr = alloca i32, align 4
  %pdash.addr = alloca i32*, align 8
  store i32 %printerContext, i32* %printerContext.addr, align 4, !tbaa !5
  store i32 %num, i32* %num.addr, align 4, !tbaa !5
  store i32* %pdash, i32** %pdash.addr, align 8, !tbaa !1
  %0 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetLineDash = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %0, i32 0, i32 28
  %1 = load i32 (i32, i32*, i32)*, i32 (i32, i32*, i32)** %SetLineDash, align 8, !tbaa !195
  %2 = load i32, i32* %printerContext.addr, align 4, !tbaa !5
  %3 = load i32*, i32** %pdash.addr, align 8, !tbaa !1
  %4 = load i32, i32* %num.addr, align 4, !tbaa !5
  %call = call i32 %1(i32 %2, i32* %3, i32 %4) #7
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define internal i32 @GetLineDashWrapper(i32 %printerContext, i32* %pnum, i32* %pdash) #0 {
entry:
  %printerContext.addr = alloca i32, align 4
  %pnum.addr = alloca i32*, align 8
  %pdash.addr = alloca i32*, align 8
  store i32 %printerContext, i32* %printerContext.addr, align 4, !tbaa !5
  store i32* %pnum, i32** %pnum.addr, align 8, !tbaa !1
  store i32* %pdash, i32** %pdash.addr, align 8, !tbaa !1
  %0 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %GetLineDash = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %0, i32 0, i32 29
  %1 = load i32 (i32, i32*, i32*)*, i32 (i32, i32*, i32*)** %GetLineDash, align 8, !tbaa !197
  %2 = load i32, i32* %printerContext.addr, align 4, !tbaa !5
  %3 = load i32*, i32** %pdash.addr, align 8, !tbaa !1
  %4 = load i32*, i32** %pnum.addr, align 8, !tbaa !1
  %call = call i32 %1(i32 %2, i32* %3, i32* %4) #7
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define internal i32 @SetStrokeColorWrapper(i32 %printerContext, %struct._opvp_brush* %brush) #0 {
entry:
  %retval = alloca i32, align 4
  %printerContext.addr = alloca i32, align 4
  %brush.addr = alloca %struct._opvp_brush*, align 8
  %brush_0_2 = alloca %struct._OPVP_Brush, align 8
  %cleanup.dest.slot = alloca i32
  store i32 %printerContext, i32* %printerContext.addr, align 4, !tbaa !5
  store %struct._opvp_brush* %brush, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %0 = bitcast %struct._OPVP_Brush* %brush_0_2 to i8*
  call void @llvm.lifetime.start(i64 40, i8* %0) #2
  %1 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %cmp = icmp eq %struct._opvp_brush* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32*, i32** @ErrorNo, align 8, !tbaa !1
  store i32 -106, i32* %2, align 4, !tbaa !5
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %3 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %colorSpace = getelementptr inbounds %struct._opvp_brush, %struct._opvp_brush* %3, i32 0, i32 0
  %4 = load i32, i32* %colorSpace, align 4, !tbaa !270
  %cmp1 = icmp eq i32 %4, 5
  br i1 %cmp1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  store i32 -4, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.3:                                         ; preds = %if.end
  %5 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %colorSpace4 = getelementptr inbounds %struct._opvp_brush, %struct._opvp_brush* %5, i32 0, i32 0
  %6 = load i32, i32* %colorSpace4, align 4, !tbaa !270
  %conv = zext i32 %6 to i64
  %cmp5 = icmp uge i64 %conv, 8
  br i1 %cmp5, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end.3
  %7 = load i32*, i32** @ErrorNo, align 8, !tbaa !1
  store i32 -106, i32* %7, align 4, !tbaa !5
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.8:                                         ; preds = %if.end.3
  %8 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %colorSpace9 = getelementptr inbounds %struct._opvp_brush, %struct._opvp_brush* %8, i32 0, i32 0
  %9 = load i32, i32* %colorSpace9, align 4, !tbaa !270
  %idxprom = zext i32 %9 to i64
  %arrayidx = getelementptr inbounds [8 x i32], [8 x i32]* @cspace_1_0_to_0_2, i32 0, i64 %idxprom
  %10 = load i32, i32* %arrayidx, align 4, !tbaa !64
  %colorSpace10 = getelementptr inbounds %struct._OPVP_Brush, %struct._OPVP_Brush* %brush_0_2, i32 0, i32 0
  store i32 %10, i32* %colorSpace10, align 4, !tbaa !272
  %11 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %xorg = getelementptr inbounds %struct._opvp_brush, %struct._opvp_brush* %11, i32 0, i32 2
  %12 = load i32, i32* %xorg, align 4, !tbaa !274
  %xorg11 = getelementptr inbounds %struct._OPVP_Brush, %struct._OPVP_Brush* %brush_0_2, i32 0, i32 2
  store i32 %12, i32* %xorg11, align 4, !tbaa !275
  %13 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %yorg = getelementptr inbounds %struct._opvp_brush, %struct._opvp_brush* %13, i32 0, i32 3
  %14 = load i32, i32* %yorg, align 4, !tbaa !276
  %yorg12 = getelementptr inbounds %struct._OPVP_Brush, %struct._OPVP_Brush* %brush_0_2, i32 0, i32 3
  store i32 %14, i32* %yorg12, align 4, !tbaa !277
  %15 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %pbrush = getelementptr inbounds %struct._opvp_brush, %struct._opvp_brush* %15, i32 0, i32 4
  %16 = load %struct._opvp_brushdata*, %struct._opvp_brushdata** %pbrush, align 8, !tbaa !278
  %17 = bitcast %struct._opvp_brushdata* %16 to %struct._OPVP_BrushData*
  %pbrush13 = getelementptr inbounds %struct._OPVP_Brush, %struct._OPVP_Brush* %brush_0_2, i32 0, i32 4
  store %struct._OPVP_BrushData* %17, %struct._OPVP_BrushData** %pbrush13, align 8, !tbaa !279
  %color = getelementptr inbounds %struct._OPVP_Brush, %struct._OPVP_Brush* %brush_0_2, i32 0, i32 1
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %color, i32 0, i32 0
  %18 = bitcast i32* %arraydecay to i8*
  %19 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %color14 = getelementptr inbounds %struct._opvp_brush, %struct._opvp_brush* %19, i32 0, i32 1
  %arraydecay15 = getelementptr inbounds [4 x i32], [4 x i32]* %color14, i32 0, i32 0
  %20 = bitcast i32* %arraydecay15 to i8*
  %call = call i8* @memcpy(i8* %18, i8* %20, i64 16) #8
  %21 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetStrokeColor = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %21, i32 0, i32 42
  %22 = load i32 (i32, %struct._OPVP_Brush*)*, i32 (i32, %struct._OPVP_Brush*)** %SetStrokeColor, align 8, !tbaa !222
  %23 = load i32, i32* %printerContext.addr, align 4, !tbaa !5
  %call16 = call i32 %22(i32 %23, %struct._OPVP_Brush* %brush_0_2) #7
  store i32 %call16, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.8, %if.then.7, %if.then.2, %if.then
  %24 = bitcast %struct._OPVP_Brush* %brush_0_2 to i8*
  call void @llvm.lifetime.end(i64 40, i8* %24) #2
  %25 = load i32, i32* %retval
  ret i32 %25
}

; Function Attrs: nounwind uwtable
define internal i32 @SetFillColorWrapper(i32 %printerContext, %struct._opvp_brush* %brush) #0 {
entry:
  %retval = alloca i32, align 4
  %printerContext.addr = alloca i32, align 4
  %brush.addr = alloca %struct._opvp_brush*, align 8
  %brush_0_2 = alloca %struct._OPVP_Brush, align 8
  %cleanup.dest.slot = alloca i32
  store i32 %printerContext, i32* %printerContext.addr, align 4, !tbaa !5
  store %struct._opvp_brush* %brush, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %0 = bitcast %struct._OPVP_Brush* %brush_0_2 to i8*
  call void @llvm.lifetime.start(i64 40, i8* %0) #2
  %1 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %cmp = icmp eq %struct._opvp_brush* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32*, i32** @ErrorNo, align 8, !tbaa !1
  store i32 -106, i32* %2, align 4, !tbaa !5
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %3 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %colorSpace = getelementptr inbounds %struct._opvp_brush, %struct._opvp_brush* %3, i32 0, i32 0
  %4 = load i32, i32* %colorSpace, align 4, !tbaa !270
  %cmp1 = icmp eq i32 %4, 5
  br i1 %cmp1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  store i32 -4, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.3:                                         ; preds = %if.end
  %5 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %colorSpace4 = getelementptr inbounds %struct._opvp_brush, %struct._opvp_brush* %5, i32 0, i32 0
  %6 = load i32, i32* %colorSpace4, align 4, !tbaa !270
  %conv = zext i32 %6 to i64
  %cmp5 = icmp uge i64 %conv, 8
  br i1 %cmp5, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end.3
  %7 = load i32*, i32** @ErrorNo, align 8, !tbaa !1
  store i32 -106, i32* %7, align 4, !tbaa !5
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.8:                                         ; preds = %if.end.3
  %8 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %colorSpace9 = getelementptr inbounds %struct._opvp_brush, %struct._opvp_brush* %8, i32 0, i32 0
  %9 = load i32, i32* %colorSpace9, align 4, !tbaa !270
  %idxprom = zext i32 %9 to i64
  %arrayidx = getelementptr inbounds [8 x i32], [8 x i32]* @cspace_1_0_to_0_2, i32 0, i64 %idxprom
  %10 = load i32, i32* %arrayidx, align 4, !tbaa !64
  %colorSpace10 = getelementptr inbounds %struct._OPVP_Brush, %struct._OPVP_Brush* %brush_0_2, i32 0, i32 0
  store i32 %10, i32* %colorSpace10, align 4, !tbaa !272
  %11 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %xorg = getelementptr inbounds %struct._opvp_brush, %struct._opvp_brush* %11, i32 0, i32 2
  %12 = load i32, i32* %xorg, align 4, !tbaa !274
  %xorg11 = getelementptr inbounds %struct._OPVP_Brush, %struct._OPVP_Brush* %brush_0_2, i32 0, i32 2
  store i32 %12, i32* %xorg11, align 4, !tbaa !275
  %13 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %yorg = getelementptr inbounds %struct._opvp_brush, %struct._opvp_brush* %13, i32 0, i32 3
  %14 = load i32, i32* %yorg, align 4, !tbaa !276
  %yorg12 = getelementptr inbounds %struct._OPVP_Brush, %struct._OPVP_Brush* %brush_0_2, i32 0, i32 3
  store i32 %14, i32* %yorg12, align 4, !tbaa !277
  %15 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %pbrush = getelementptr inbounds %struct._opvp_brush, %struct._opvp_brush* %15, i32 0, i32 4
  %16 = load %struct._opvp_brushdata*, %struct._opvp_brushdata** %pbrush, align 8, !tbaa !278
  %17 = bitcast %struct._opvp_brushdata* %16 to %struct._OPVP_BrushData*
  %pbrush13 = getelementptr inbounds %struct._OPVP_Brush, %struct._OPVP_Brush* %brush_0_2, i32 0, i32 4
  store %struct._OPVP_BrushData* %17, %struct._OPVP_BrushData** %pbrush13, align 8, !tbaa !279
  %color = getelementptr inbounds %struct._OPVP_Brush, %struct._OPVP_Brush* %brush_0_2, i32 0, i32 1
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %color, i32 0, i32 0
  %18 = bitcast i32* %arraydecay to i8*
  %19 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %color14 = getelementptr inbounds %struct._opvp_brush, %struct._opvp_brush* %19, i32 0, i32 1
  %arraydecay15 = getelementptr inbounds [4 x i32], [4 x i32]* %color14, i32 0, i32 0
  %20 = bitcast i32* %arraydecay15 to i8*
  %call = call i8* @memcpy(i8* %18, i8* %20, i64 16) #8
  %21 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetFillColor = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %21, i32 0, i32 43
  %22 = load i32 (i32, %struct._OPVP_Brush*)*, i32 (i32, %struct._OPVP_Brush*)** %SetFillColor, align 8, !tbaa !224
  %23 = load i32, i32* %printerContext.addr, align 4, !tbaa !5
  %call16 = call i32 %22(i32 %23, %struct._OPVP_Brush* %brush_0_2) #7
  store i32 %call16, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.8, %if.then.7, %if.then.2, %if.then
  %24 = bitcast %struct._OPVP_Brush* %brush_0_2 to i8*
  call void @llvm.lifetime.end(i64 40, i8* %24) #2
  %25 = load i32, i32* %retval
  ret i32 %25
}

; Function Attrs: nounwind uwtable
define internal i32 @SetBgColorWrapper(i32 %printerContext, %struct._opvp_brush* %brush) #0 {
entry:
  %retval = alloca i32, align 4
  %printerContext.addr = alloca i32, align 4
  %brush.addr = alloca %struct._opvp_brush*, align 8
  %brush_0_2 = alloca %struct._OPVP_Brush, align 8
  %cleanup.dest.slot = alloca i32
  store i32 %printerContext, i32* %printerContext.addr, align 4, !tbaa !5
  store %struct._opvp_brush* %brush, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %0 = bitcast %struct._OPVP_Brush* %brush_0_2 to i8*
  call void @llvm.lifetime.start(i64 40, i8* %0) #2
  %1 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %cmp = icmp eq %struct._opvp_brush* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32*, i32** @ErrorNo, align 8, !tbaa !1
  store i32 -106, i32* %2, align 4, !tbaa !5
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %3 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %colorSpace = getelementptr inbounds %struct._opvp_brush, %struct._opvp_brush* %3, i32 0, i32 0
  %4 = load i32, i32* %colorSpace, align 4, !tbaa !270
  %cmp1 = icmp eq i32 %4, 5
  br i1 %cmp1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  %5 = load i32*, i32** @ErrorNo, align 8, !tbaa !1
  store i32 -104, i32* %5, align 4, !tbaa !5
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.3:                                         ; preds = %if.end
  %6 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %colorSpace4 = getelementptr inbounds %struct._opvp_brush, %struct._opvp_brush* %6, i32 0, i32 0
  %7 = load i32, i32* %colorSpace4, align 4, !tbaa !270
  %conv = zext i32 %7 to i64
  %cmp5 = icmp uge i64 %conv, 8
  br i1 %cmp5, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end.3
  %8 = load i32*, i32** @ErrorNo, align 8, !tbaa !1
  store i32 -106, i32* %8, align 4, !tbaa !5
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.8:                                         ; preds = %if.end.3
  %9 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %colorSpace9 = getelementptr inbounds %struct._opvp_brush, %struct._opvp_brush* %9, i32 0, i32 0
  %10 = load i32, i32* %colorSpace9, align 4, !tbaa !270
  %idxprom = zext i32 %10 to i64
  %arrayidx = getelementptr inbounds [8 x i32], [8 x i32]* @cspace_1_0_to_0_2, i32 0, i64 %idxprom
  %11 = load i32, i32* %arrayidx, align 4, !tbaa !64
  %colorSpace10 = getelementptr inbounds %struct._OPVP_Brush, %struct._OPVP_Brush* %brush_0_2, i32 0, i32 0
  store i32 %11, i32* %colorSpace10, align 4, !tbaa !272
  %12 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %xorg = getelementptr inbounds %struct._opvp_brush, %struct._opvp_brush* %12, i32 0, i32 2
  %13 = load i32, i32* %xorg, align 4, !tbaa !274
  %xorg11 = getelementptr inbounds %struct._OPVP_Brush, %struct._OPVP_Brush* %brush_0_2, i32 0, i32 2
  store i32 %13, i32* %xorg11, align 4, !tbaa !275
  %14 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %yorg = getelementptr inbounds %struct._opvp_brush, %struct._opvp_brush* %14, i32 0, i32 3
  %15 = load i32, i32* %yorg, align 4, !tbaa !276
  %yorg12 = getelementptr inbounds %struct._OPVP_Brush, %struct._OPVP_Brush* %brush_0_2, i32 0, i32 3
  store i32 %15, i32* %yorg12, align 4, !tbaa !277
  %16 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %pbrush = getelementptr inbounds %struct._opvp_brush, %struct._opvp_brush* %16, i32 0, i32 4
  %17 = load %struct._opvp_brushdata*, %struct._opvp_brushdata** %pbrush, align 8, !tbaa !278
  %18 = bitcast %struct._opvp_brushdata* %17 to %struct._OPVP_BrushData*
  %pbrush13 = getelementptr inbounds %struct._OPVP_Brush, %struct._OPVP_Brush* %brush_0_2, i32 0, i32 4
  store %struct._OPVP_BrushData* %18, %struct._OPVP_BrushData** %pbrush13, align 8, !tbaa !279
  %color = getelementptr inbounds %struct._OPVP_Brush, %struct._OPVP_Brush* %brush_0_2, i32 0, i32 1
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %color, i32 0, i32 0
  %19 = bitcast i32* %arraydecay to i8*
  %20 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %color14 = getelementptr inbounds %struct._opvp_brush, %struct._opvp_brush* %20, i32 0, i32 1
  %arraydecay15 = getelementptr inbounds [4 x i32], [4 x i32]* %color14, i32 0, i32 0
  %21 = bitcast i32* %arraydecay15 to i8*
  %call = call i8* @memcpy(i8* %19, i8* %21, i64 16) #8
  %22 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetBgColor = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %22, i32 0, i32 44
  %23 = load i32 (i32, %struct._OPVP_Brush*)*, i32 (i32, %struct._OPVP_Brush*)** %SetBgColor, align 8, !tbaa !225
  %24 = load i32, i32* %printerContext.addr, align 4, !tbaa !5
  %call16 = call i32 %23(i32 %24, %struct._OPVP_Brush* %brush_0_2) #7
  store i32 %call16, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.8, %if.then.7, %if.then.2, %if.then
  %25 = bitcast %struct._OPVP_Brush* %brush_0_2 to i8*
  call void @llvm.lifetime.end(i64 40, i8* %25) #2
  %26 = load i32, i32* %retval
  ret i32 %26
}

; Function Attrs: nounwind uwtable
define internal i32 @DrawImageWrapper(i32 %printerContext, i32 %sourceWidth, i32 %sourceHeight, i32 %sourcePitch, i32 %imageFormat, i32 %destinationWidth, i32 %destinationHeight, i8* %imagedata) #0 {
entry:
  %retval = alloca i32, align 4
  %printerContext.addr = alloca i32, align 4
  %sourceWidth.addr = alloca i32, align 4
  %sourceHeight.addr = alloca i32, align 4
  %sourcePitch.addr = alloca i32, align 4
  %imageFormat.addr = alloca i32, align 4
  %destinationWidth.addr = alloca i32, align 4
  %destinationHeight.addr = alloca i32, align 4
  %imagedata.addr = alloca i8*, align 8
  %r = alloca i32, align 4
  %rect = alloca %struct._OPVP_Rectangle, align 8
  %iformat_0_2 = alloca i32, align 4
  %paintmode_0_2 = alloca i32, align 4
  %depth = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store i32 %printerContext, i32* %printerContext.addr, align 4, !tbaa !5
  store i32 %sourceWidth, i32* %sourceWidth.addr, align 4, !tbaa !5
  store i32 %sourceHeight, i32* %sourceHeight.addr, align 4, !tbaa !5
  store i32 %sourcePitch, i32* %sourcePitch.addr, align 4, !tbaa !5
  store i32 %imageFormat, i32* %imageFormat.addr, align 4, !tbaa !64
  store i32 %destinationWidth, i32* %destinationWidth.addr, align 4, !tbaa !5
  store i32 %destinationHeight, i32* %destinationHeight.addr, align 4, !tbaa !5
  store i8* %imagedata, i8** %imagedata.addr, align 8, !tbaa !1
  %0 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = bitcast %struct._OPVP_Rectangle* %rect to i8*
  call void @llvm.lifetime.start(i64 16, i8* %1) #2
  %2 = bitcast i32* %iformat_0_2 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #2
  %3 = bitcast i32* %paintmode_0_2 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  store i32 1, i32* %paintmode_0_2, align 4, !tbaa !64
  %4 = bitcast i32* %depth to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  %5 = load i32, i32* %imageFormat.addr, align 4, !tbaa !64
  %cmp = icmp eq i32 %5, 1
  br i1 %cmp, label %if.then, label %if.else.18

if.then:                                          ; preds = %entry
  %6 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %GetPaintMode = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %6, i32 0, i32 41
  %7 = load i32 (i32, i32*)*, i32 (i32, i32*)** %GetPaintMode, align 8, !tbaa !220
  %cmp1 = icmp ne i32 (i32, i32*)* %7, null
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  %8 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %GetPaintMode3 = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %8, i32 0, i32 41
  %9 = load i32 (i32, i32*)*, i32 (i32, i32*)** %GetPaintMode3, align 8, !tbaa !220
  %10 = load i32, i32* %printerContext.addr, align 4, !tbaa !5
  %call = call i32 %9(i32 %10, i32* %paintmode_0_2) #7
  br label %if.end

if.end:                                           ; preds = %if.then.2, %if.then
  %11 = load i32, i32* %paintmode_0_2, align 4, !tbaa !64
  %cmp4 = icmp ne i32 %11, 1
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %if.end
  %12 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetROP = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %12, i32 0, i32 20
  %13 = load i32 (i32, i32)*, i32 (i32, i32)** %SetROP, align 8, !tbaa !269
  %cmp6 = icmp ne i32 (i32, i32)* %13, null
  br i1 %cmp6, label %if.then.7, label %if.end.10

if.then.7:                                        ; preds = %if.then.5
  %14 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetROP8 = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %14, i32 0, i32 20
  %15 = load i32 (i32, i32)*, i32 (i32, i32)** %SetROP8, align 8, !tbaa !269
  %16 = load i32, i32* %printerContext.addr, align 4, !tbaa !5
  %call9 = call i32 %15(i32 %16, i32 204) #7
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.7, %if.then.5
  br label %if.end.17

if.else:                                          ; preds = %if.end
  %17 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetROP11 = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %17, i32 0, i32 20
  %18 = load i32 (i32, i32)*, i32 (i32, i32)** %SetROP11, align 8, !tbaa !269
  %cmp12 = icmp ne i32 (i32, i32)* %18, null
  br i1 %cmp12, label %if.then.13, label %if.end.16

if.then.13:                                       ; preds = %if.else
  %19 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetROP14 = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %19, i32 0, i32 20
  %20 = load i32 (i32, i32)*, i32 (i32, i32)** %SetROP14, align 8, !tbaa !269
  %21 = load i32, i32* %printerContext.addr, align 4, !tbaa !5
  %call15 = call i32 %20(i32 %21, i32 184) #7
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.13, %if.else
  br label %if.end.17

if.end.17:                                        ; preds = %if.end.16, %if.end.10
  store i32 1, i32* %depth, align 4, !tbaa !5
  br label %if.end.25

if.else.18:                                       ; preds = %entry
  %22 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetROP19 = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %22, i32 0, i32 20
  %23 = load i32 (i32, i32)*, i32 (i32, i32)** %SetROP19, align 8, !tbaa !269
  %cmp20 = icmp ne i32 (i32, i32)* %23, null
  br i1 %cmp20, label %if.then.21, label %if.end.24

if.then.21:                                       ; preds = %if.else.18
  %24 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetROP22 = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %24, i32 0, i32 20
  %25 = load i32 (i32, i32)*, i32 (i32, i32)** %SetROP22, align 8, !tbaa !269
  %26 = load i32, i32* %printerContext.addr, align 4, !tbaa !5
  %call23 = call i32 %25(i32 %26, i32 204) #7
  br label %if.end.24

if.end.24:                                        ; preds = %if.then.21, %if.else.18
  %27 = load i32, i32* @colorSpace, align 4, !tbaa !64
  %idxprom = zext i32 %27 to i64
  %arrayidx = getelementptr inbounds [8 x i32], [8 x i32]* @colorDepth_0_2, i32 0, i64 %idxprom
  %28 = load i32, i32* %arrayidx, align 4, !tbaa !5
  store i32 %28, i32* %depth, align 4, !tbaa !5
  br label %if.end.25

if.end.25:                                        ; preds = %if.end.24, %if.end.17
  %p0 = getelementptr inbounds %struct._OPVP_Rectangle, %struct._OPVP_Rectangle* %rect, i32 0, i32 0
  %x = getelementptr inbounds %struct._OPVP_Point, %struct._OPVP_Point* %p0, i32 0, i32 0
  store i32 0, i32* %x, align 4, !tbaa !280
  %p026 = getelementptr inbounds %struct._OPVP_Rectangle, %struct._OPVP_Rectangle* %rect, i32 0, i32 0
  %y = getelementptr inbounds %struct._OPVP_Point, %struct._OPVP_Point* %p026, i32 0, i32 1
  store i32 0, i32* %y, align 4, !tbaa !283
  %29 = load i32, i32* %destinationWidth.addr, align 4, !tbaa !5
  %shl = shl i32 %29, 8
  %p1 = getelementptr inbounds %struct._OPVP_Rectangle, %struct._OPVP_Rectangle* %rect, i32 0, i32 1
  %x27 = getelementptr inbounds %struct._OPVP_Point, %struct._OPVP_Point* %p1, i32 0, i32 0
  store i32 %shl, i32* %x27, align 4, !tbaa !284
  %30 = load i32, i32* %destinationHeight.addr, align 4, !tbaa !5
  %shl28 = shl i32 %30, 8
  %p129 = getelementptr inbounds %struct._OPVP_Rectangle, %struct._OPVP_Rectangle* %rect, i32 0, i32 1
  %y30 = getelementptr inbounds %struct._OPVP_Point, %struct._OPVP_Point* %p129, i32 0, i32 1
  store i32 %shl28, i32* %y30, align 4, !tbaa !285
  %31 = load i32, i32* %imageFormat.addr, align 4, !tbaa !64
  %conv = zext i32 %31 to i64
  %cmp31 = icmp uge i64 %conv, 5
  br i1 %cmp31, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %if.end.25
  %32 = load i32*, i32** @ErrorNo, align 8, !tbaa !1
  store i32 -106, i32* %32, align 4, !tbaa !5
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.34:                                        ; preds = %if.end.25
  %33 = load i32, i32* %imageFormat.addr, align 4, !tbaa !64
  %idxprom35 = zext i32 %33 to i64
  %arrayidx36 = getelementptr inbounds [5 x i32], [5 x i32]* @iformat_1_0_to_0_2, i32 0, i64 %idxprom35
  %34 = load i32, i32* %arrayidx36, align 4, !tbaa !64
  store i32 %34, i32* %iformat_0_2, align 4, !tbaa !64
  %35 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %DrawImage = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %35, i32 0, i32 60
  %36 = load i32 (i32, i32, i32, i32, i32, %struct._OPVP_Rectangle*, i32, i8*)*, i32 (i32, i32, i32, i32, i32, %struct._OPVP_Rectangle*, i32, i8*)** %DrawImage, align 8, !tbaa !247
  %37 = load i32, i32* %printerContext.addr, align 4, !tbaa !5
  %38 = load i32, i32* %sourceWidth.addr, align 4, !tbaa !5
  %39 = load i32, i32* %sourceHeight.addr, align 4, !tbaa !5
  %40 = load i32, i32* %depth, align 4, !tbaa !5
  %41 = load i32, i32* %iformat_0_2, align 4, !tbaa !64
  %42 = load i32, i32* %sourcePitch.addr, align 4, !tbaa !5
  %43 = load i32, i32* %sourceHeight.addr, align 4, !tbaa !5
  %mul = mul nsw i32 %42, %43
  %44 = load i8*, i8** %imagedata.addr, align 8, !tbaa !1
  %call37 = call i32 %36(i32 %37, i32 %38, i32 %39, i32 %40, i32 %41, %struct._OPVP_Rectangle* byval align 8 %rect, i32 %mul, i8* %44) #7
  store i32 %call37, i32* %r, align 4, !tbaa !5
  %45 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetROP38 = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %45, i32 0, i32 20
  %46 = load i32 (i32, i32)*, i32 (i32, i32)** %SetROP38, align 8, !tbaa !269
  %cmp39 = icmp ne i32 (i32, i32)* %46, null
  br i1 %cmp39, label %if.then.41, label %if.end.44

if.then.41:                                       ; preds = %if.end.34
  %47 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetROP42 = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %47, i32 0, i32 20
  %48 = load i32 (i32, i32)*, i32 (i32, i32)** %SetROP42, align 8, !tbaa !269
  %49 = load i32, i32* %printerContext.addr, align 4, !tbaa !5
  %call43 = call i32 %48(i32 %49, i32 240) #7
  br label %if.end.44

if.end.44:                                        ; preds = %if.then.41, %if.end.34
  %50 = load i32, i32* %r, align 4, !tbaa !5
  store i32 %50, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.44, %if.then.33
  %51 = bitcast i32* %depth to i8*
  call void @llvm.lifetime.end(i64 4, i8* %51) #2
  %52 = bitcast i32* %paintmode_0_2 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %52) #2
  %53 = bitcast i32* %iformat_0_2 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %53) #2
  %54 = bitcast %struct._OPVP_Rectangle* %rect to i8*
  call void @llvm.lifetime.end(i64 16, i8* %54) #2
  %55 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %55) #2
  %56 = load i32, i32* %retval
  ret i32 %56
}

; Function Attrs: nounwind uwtable
define internal i32 @StartDrawImageWrapper(i32 %printerContext, i32 %sourceWidth, i32 %sourceHeight, i32 %sourcePitch, i32 %imageFormat, i32 %destinationWidth, i32 %destinationHeight) #0 {
entry:
  %retval = alloca i32, align 4
  %printerContext.addr = alloca i32, align 4
  %sourceWidth.addr = alloca i32, align 4
  %sourceHeight.addr = alloca i32, align 4
  %sourcePitch.addr = alloca i32, align 4
  %imageFormat.addr = alloca i32, align 4
  %destinationWidth.addr = alloca i32, align 4
  %destinationHeight.addr = alloca i32, align 4
  %r = alloca i32, align 4
  %rect = alloca %struct._OPVP_Rectangle, align 8
  %iformat_0_2 = alloca i32, align 4
  %paintmode_0_2 = alloca i32, align 4
  %depth = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store i32 %printerContext, i32* %printerContext.addr, align 4, !tbaa !5
  store i32 %sourceWidth, i32* %sourceWidth.addr, align 4, !tbaa !5
  store i32 %sourceHeight, i32* %sourceHeight.addr, align 4, !tbaa !5
  store i32 %sourcePitch, i32* %sourcePitch.addr, align 4, !tbaa !5
  store i32 %imageFormat, i32* %imageFormat.addr, align 4, !tbaa !64
  store i32 %destinationWidth, i32* %destinationWidth.addr, align 4, !tbaa !5
  store i32 %destinationHeight, i32* %destinationHeight.addr, align 4, !tbaa !5
  %0 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = bitcast %struct._OPVP_Rectangle* %rect to i8*
  call void @llvm.lifetime.start(i64 16, i8* %1) #2
  %2 = bitcast i32* %iformat_0_2 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #2
  %3 = bitcast i32* %paintmode_0_2 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  store i32 1, i32* %paintmode_0_2, align 4, !tbaa !64
  %4 = bitcast i32* %depth to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  %5 = load i32, i32* %imageFormat.addr, align 4, !tbaa !64
  %cmp = icmp eq i32 %5, 1
  br i1 %cmp, label %if.then, label %if.else.18

if.then:                                          ; preds = %entry
  %6 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %GetPaintMode = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %6, i32 0, i32 41
  %7 = load i32 (i32, i32*)*, i32 (i32, i32*)** %GetPaintMode, align 8, !tbaa !220
  %cmp1 = icmp ne i32 (i32, i32*)* %7, null
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  %8 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %GetPaintMode3 = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %8, i32 0, i32 41
  %9 = load i32 (i32, i32*)*, i32 (i32, i32*)** %GetPaintMode3, align 8, !tbaa !220
  %10 = load i32, i32* %printerContext.addr, align 4, !tbaa !5
  %call = call i32 %9(i32 %10, i32* %paintmode_0_2) #7
  br label %if.end

if.end:                                           ; preds = %if.then.2, %if.then
  %11 = load i32, i32* %paintmode_0_2, align 4, !tbaa !64
  %cmp4 = icmp ne i32 %11, 1
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %if.end
  %12 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetROP = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %12, i32 0, i32 20
  %13 = load i32 (i32, i32)*, i32 (i32, i32)** %SetROP, align 8, !tbaa !269
  %cmp6 = icmp ne i32 (i32, i32)* %13, null
  br i1 %cmp6, label %if.then.7, label %if.end.10

if.then.7:                                        ; preds = %if.then.5
  %14 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetROP8 = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %14, i32 0, i32 20
  %15 = load i32 (i32, i32)*, i32 (i32, i32)** %SetROP8, align 8, !tbaa !269
  %16 = load i32, i32* %printerContext.addr, align 4, !tbaa !5
  %call9 = call i32 %15(i32 %16, i32 204) #7
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.7, %if.then.5
  br label %if.end.17

if.else:                                          ; preds = %if.end
  %17 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetROP11 = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %17, i32 0, i32 20
  %18 = load i32 (i32, i32)*, i32 (i32, i32)** %SetROP11, align 8, !tbaa !269
  %cmp12 = icmp ne i32 (i32, i32)* %18, null
  br i1 %cmp12, label %if.then.13, label %if.end.16

if.then.13:                                       ; preds = %if.else
  %19 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetROP14 = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %19, i32 0, i32 20
  %20 = load i32 (i32, i32)*, i32 (i32, i32)** %SetROP14, align 8, !tbaa !269
  %21 = load i32, i32* %printerContext.addr, align 4, !tbaa !5
  %call15 = call i32 %20(i32 %21, i32 184) #7
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.13, %if.else
  br label %if.end.17

if.end.17:                                        ; preds = %if.end.16, %if.end.10
  store i32 1, i32* %depth, align 4, !tbaa !5
  br label %if.end.25

if.else.18:                                       ; preds = %entry
  %22 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetROP19 = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %22, i32 0, i32 20
  %23 = load i32 (i32, i32)*, i32 (i32, i32)** %SetROP19, align 8, !tbaa !269
  %cmp20 = icmp ne i32 (i32, i32)* %23, null
  br i1 %cmp20, label %if.then.21, label %if.end.24

if.then.21:                                       ; preds = %if.else.18
  %24 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetROP22 = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %24, i32 0, i32 20
  %25 = load i32 (i32, i32)*, i32 (i32, i32)** %SetROP22, align 8, !tbaa !269
  %26 = load i32, i32* %printerContext.addr, align 4, !tbaa !5
  %call23 = call i32 %25(i32 %26, i32 204) #7
  br label %if.end.24

if.end.24:                                        ; preds = %if.then.21, %if.else.18
  %27 = load i32, i32* @colorSpace, align 4, !tbaa !64
  %idxprom = zext i32 %27 to i64
  %arrayidx = getelementptr inbounds [8 x i32], [8 x i32]* @colorDepth_0_2, i32 0, i64 %idxprom
  %28 = load i32, i32* %arrayidx, align 4, !tbaa !5
  store i32 %28, i32* %depth, align 4, !tbaa !5
  br label %if.end.25

if.end.25:                                        ; preds = %if.end.24, %if.end.17
  %p0 = getelementptr inbounds %struct._OPVP_Rectangle, %struct._OPVP_Rectangle* %rect, i32 0, i32 0
  %x = getelementptr inbounds %struct._OPVP_Point, %struct._OPVP_Point* %p0, i32 0, i32 0
  store i32 0, i32* %x, align 4, !tbaa !280
  %p026 = getelementptr inbounds %struct._OPVP_Rectangle, %struct._OPVP_Rectangle* %rect, i32 0, i32 0
  %y = getelementptr inbounds %struct._OPVP_Point, %struct._OPVP_Point* %p026, i32 0, i32 1
  store i32 0, i32* %y, align 4, !tbaa !283
  %29 = load i32, i32* %destinationWidth.addr, align 4, !tbaa !5
  %shl = shl i32 %29, 8
  %p1 = getelementptr inbounds %struct._OPVP_Rectangle, %struct._OPVP_Rectangle* %rect, i32 0, i32 1
  %x27 = getelementptr inbounds %struct._OPVP_Point, %struct._OPVP_Point* %p1, i32 0, i32 0
  store i32 %shl, i32* %x27, align 4, !tbaa !284
  %30 = load i32, i32* %destinationHeight.addr, align 4, !tbaa !5
  %shl28 = shl i32 %30, 8
  %p129 = getelementptr inbounds %struct._OPVP_Rectangle, %struct._OPVP_Rectangle* %rect, i32 0, i32 1
  %y30 = getelementptr inbounds %struct._OPVP_Point, %struct._OPVP_Point* %p129, i32 0, i32 1
  store i32 %shl28, i32* %y30, align 4, !tbaa !285
  %31 = load i32, i32* %imageFormat.addr, align 4, !tbaa !64
  %conv = zext i32 %31 to i64
  %cmp31 = icmp uge i64 %conv, 5
  br i1 %cmp31, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %if.end.25
  %32 = load i32*, i32** @ErrorNo, align 8, !tbaa !1
  store i32 -106, i32* %32, align 4, !tbaa !5
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.34:                                        ; preds = %if.end.25
  %33 = load i32, i32* %imageFormat.addr, align 4, !tbaa !64
  %idxprom35 = zext i32 %33 to i64
  %arrayidx36 = getelementptr inbounds [5 x i32], [5 x i32]* @iformat_1_0_to_0_2, i32 0, i64 %idxprom35
  %34 = load i32, i32* %arrayidx36, align 4, !tbaa !64
  store i32 %34, i32* %iformat_0_2, align 4, !tbaa !64
  %35 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %StartDrawImage = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %35, i32 0, i32 61
  %36 = load i32 (i32, i32, i32, i32, i32, %struct._OPVP_Rectangle*)*, i32 (i32, i32, i32, i32, i32, %struct._OPVP_Rectangle*)** %StartDrawImage, align 8, !tbaa !249
  %37 = load i32, i32* %printerContext.addr, align 4, !tbaa !5
  %38 = load i32, i32* %sourceWidth.addr, align 4, !tbaa !5
  %39 = load i32, i32* %sourceHeight.addr, align 4, !tbaa !5
  %40 = load i32, i32* %depth, align 4, !tbaa !5
  %41 = load i32, i32* %iformat_0_2, align 4, !tbaa !64
  %call37 = call i32 %36(i32 %37, i32 %38, i32 %39, i32 %40, i32 %41, %struct._OPVP_Rectangle* byval align 8 %rect) #7
  store i32 %call37, i32* %r, align 4, !tbaa !5
  %42 = load i32, i32* %r, align 4, !tbaa !5
  store i32 %42, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.34, %if.then.33
  %43 = bitcast i32* %depth to i8*
  call void @llvm.lifetime.end(i64 4, i8* %43) #2
  %44 = bitcast i32* %paintmode_0_2 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %44) #2
  %45 = bitcast i32* %iformat_0_2 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %45) #2
  %46 = bitcast %struct._OPVP_Rectangle* %rect to i8*
  call void @llvm.lifetime.end(i64 16, i8* %46) #2
  %47 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %47) #2
  %48 = load i32, i32* %retval
  ret i32 %48
}

; Function Attrs: nounwind uwtable
define internal i32 @EndDrawImageWrapper(i32 %printerContext) #0 {
entry:
  %printerContext.addr = alloca i32, align 4
  %r = alloca i32, align 4
  store i32 %printerContext, i32* %printerContext.addr, align 4, !tbaa !5
  %0 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %EndDrawImage = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %1, i32 0, i32 63
  %2 = load i32 (i32)*, i32 (i32)** %EndDrawImage, align 8, !tbaa !252
  %3 = load i32, i32* %printerContext.addr, align 4, !tbaa !5
  %call = call i32 %2(i32 %3) #7
  store i32 %call, i32* %r, align 4, !tbaa !5
  %4 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetROP = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %4, i32 0, i32 20
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %SetROP, align 8, !tbaa !269
  %cmp = icmp ne i32 (i32, i32)* %5, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct._OPVP_api_procs*, %struct._OPVP_api_procs** @apiEntry_0_2, align 8, !tbaa !1
  %SetROP1 = getelementptr inbounds %struct._OPVP_api_procs, %struct._OPVP_api_procs* %6, i32 0, i32 20
  %7 = load i32 (i32, i32)*, i32 (i32, i32)** %SetROP1, align 8, !tbaa !269
  %8 = load i32, i32* %printerContext.addr, align 4, !tbaa !5
  %call2 = call i32 %7(i32 %8, i32 240) #7
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %9 = load i32, i32* %r, align 4, !tbaa !5
  %10 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %10) #2
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define internal i32 @GetLastError_0_2() #0 {
entry:
  %retval = alloca i32, align 4
  %0 = load i32*, i32** @ErrorNo, align 8, !tbaa !1
  %1 = load i32, i32* %0, align 4, !tbaa !5
  switch i32 %1, label %sw.default [
    i32 -101, label %sw.bb
    i32 -102, label %sw.bb.1
    i32 -103, label %sw.bb.2
    i32 -104, label %sw.bb.3
    i32 -105, label %sw.bb.4
    i32 -106, label %sw.bb.5
  ]

sw.bb:                                            ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %entry
  store i32 -2, i32* %retval
  br label %return

sw.bb.2:                                          ; preds = %entry
  store i32 -3, i32* %retval
  br label %return

sw.bb.3:                                          ; preds = %entry
  store i32 -4, i32* %retval
  br label %return

sw.bb.4:                                          ; preds = %entry
  store i32 -5, i32* %retval
  br label %return

sw.bb.5:                                          ; preds = %entry
  store i32 -6, i32* %retval
  br label %return

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %sw.epilog, %sw.bb.5, %sw.bb.4, %sw.bb.3, %sw.bb.2, %sw.bb.1, %sw.bb
  %2 = load i32, i32* %retval
  ret i32 %2
}

; Function Attrs: nounwind uwtable
define internal i32 @GetLastError_1_0() #0 {
entry:
  %0 = load i32*, i32** @ErrorNo, align 8, !tbaa !1
  %1 = load i32, i32* %0, align 4, !tbaa !5
  ret i32 %1
}

; Function Attrs: nounwind
declare i32 @dlclose(i8*) #4

; Function Attrs: nounwind uwtable
define internal i32 @opvp_beginpage(%struct.gx_device_vector_s* %vdev) #0 {
entry:
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %pdev = alloca %struct.gx_device_opvp_s*, align 8
  %code = alloca i32, align 4
  %ecode = alloca i32, align 4
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_vector_s* %1 to %struct.gx_device_opvp_s*
  store %struct.gx_device_opvp_s* %2, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  store i32 -1, i32* %code, align 4, !tbaa !5
  %4 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %5 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %6 = bitcast %struct.gx_device_opvp_s* %5 to %struct.gx_device_s*
  %call = call i32 @opvp_startpage(%struct.gx_device_s* %6) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %7 = load i32, i32* %code, align 4, !tbaa !5
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %8 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %8, i32* %ecode, align 4, !tbaa !5
  br label %if.end

if.else:                                          ; preds = %entry
  %9 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %in_page = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %9, i32 0, i32 63
  store i32 1, i32* %in_page, align 4, !tbaa !85
  store i32 1, i32* @beginPage, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = load i32, i32* %ecode, align 4, !tbaa !5
  %11 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %11) #2
  %12 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %12) #2
  %13 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %13) #2
  ret i32 %10
}

; Function Attrs: nounwind uwtable
define internal i32 @opvp_setlinewidth(%struct.gx_device_vector_s* %vdev, double %width) #0 {
entry:
  %retval = alloca i32, align 4
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %width.addr = alloca double, align 8
  %pdev = alloca %struct.gx_device_opvp_s*, align 8
  %r = alloca i32, align 4
  %ecode = alloca i32, align 4
  %w = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store double %width, double* %width.addr, align 8, !tbaa !286
  %0 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_vector_s* %1 to %struct.gx_device_opvp_s*
  store %struct.gx_device_opvp_s* %2, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  store i32 -1, i32* %r, align 4, !tbaa !5
  %4 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %5 = bitcast i32* %w to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #2
  %6 = load i32, i32* @beginPage, align 4, !tbaa !5
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %7 = load i32, i32* @inkjet, align 4, !tbaa !5
  %tobool1 = icmp ne i32 %7, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  br i1 false, label %if.then, label %if.end

cond.false:                                       ; preds = %lor.lhs.false
  %8 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %vec_procs = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %8, i32 0, i32 44
  %9 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs, align 8, !tbaa !61
  %beginpage = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %9, i32 0, i32 0
  %10 = load i32 (%struct.gx_device_vector_s*)*, i32 (%struct.gx_device_vector_s*)** %beginpage, align 8, !tbaa !83
  %11 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %12 = bitcast %struct.gx_device_opvp_s* %11 to %struct.gx_device_vector_s*
  %call = call i32 %10(%struct.gx_device_vector_s* %12) #7
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %cond.false, %cond.true
  %13 = load double, double* %width.addr, align 8, !tbaa !286
  %call3 = call double @floor(double %13) #10
  %conv = fptosi double %call3 to i32
  %shl = shl i32 %conv, 8
  %14 = load double, double* %width.addr, align 8, !tbaa !286
  %15 = load double, double* %width.addr, align 8, !tbaa !286
  %call4 = call double @floor(double %15) #10
  %sub = fsub double %14, %call4
  %mul = fmul double %sub, 2.560000e+02
  %conv5 = fptosi double %mul to i32
  %and = and i32 %conv5, 255
  %or = or i32 %shl, %and
  store i32 %or, i32* %w, align 4, !tbaa !5
  %16 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetLineWidth = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %16, i32 0, i32 24
  %17 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetLineWidth, align 8, !tbaa !192
  %tobool6 = icmp ne i32 (i32, i32)* %17, null
  br i1 %tobool6, label %if.then.7, label %if.end.10

if.then.7:                                        ; preds = %if.end
  %18 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetLineWidth8 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %18, i32 0, i32 24
  %19 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetLineWidth8, align 8, !tbaa !192
  %20 = load i32, i32* @printerContext, align 4, !tbaa !5
  %21 = load i32, i32* %w, align 4, !tbaa !5
  %call9 = call i32 %19(i32 %20, i32 %21) #7
  store i32 %call9, i32* %r, align 4, !tbaa !5
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.7, %if.end
  %22 = load i32, i32* %r, align 4, !tbaa !5
  %cmp = icmp ne i32 %22, 0
  br i1 %cmp, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.end.10
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.12, %if.end.10
  %23 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %23, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.13, %if.then
  %24 = bitcast i32* %w to i8*
  call void @llvm.lifetime.end(i64 4, i8* %24) #2
  %25 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %25) #2
  %26 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %26) #2
  %27 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %27) #2
  %28 = load i32, i32* %retval
  ret i32 %28
}

; Function Attrs: nounwind uwtable
define internal i32 @opvp_setlinecap(%struct.gx_device_vector_s* %vdev, i32 %cap) #0 {
entry:
  %retval = alloca i32, align 4
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %cap.addr = alloca i32, align 4
  %pdev = alloca %struct.gx_device_opvp_s*, align 8
  %r = alloca i32, align 4
  %ecode = alloca i32, align 4
  %linecap = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store i32 %cap, i32* %cap.addr, align 4, !tbaa !64
  %0 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_vector_s* %1 to %struct.gx_device_opvp_s*
  store %struct.gx_device_opvp_s* %2, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  store i32 -1, i32* %r, align 4, !tbaa !5
  %4 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %5 = bitcast i32* %linecap to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #2
  %6 = load i32, i32* @beginPage, align 4, !tbaa !5
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %7 = load i32, i32* @inkjet, align 4, !tbaa !5
  %tobool1 = icmp ne i32 %7, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  br i1 false, label %if.then, label %if.end

cond.false:                                       ; preds = %lor.lhs.false
  %8 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %vec_procs = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %8, i32 0, i32 44
  %9 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs, align 8, !tbaa !61
  %beginpage = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %9, i32 0, i32 0
  %10 = load i32 (%struct.gx_device_vector_s*)*, i32 (%struct.gx_device_vector_s*)** %beginpage, align 8, !tbaa !83
  %11 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %12 = bitcast %struct.gx_device_opvp_s* %11 to %struct.gx_device_vector_s*
  %call = call i32 %10(%struct.gx_device_vector_s* %12) #7
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %cond.false, %cond.true
  %13 = load i32, i32* %cap.addr, align 4, !tbaa !64
  switch i32 %13, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.3
    i32 2, label %sw.bb.4
    i32 3, label %sw.bb.5
  ]

sw.bb:                                            ; preds = %if.end
  store i32 0, i32* %linecap, align 4, !tbaa !64
  br label %sw.epilog

sw.bb.3:                                          ; preds = %if.end
  store i32 1, i32* %linecap, align 4, !tbaa !64
  br label %sw.epilog

sw.bb.4:                                          ; preds = %if.end
  store i32 2, i32* %linecap, align 4, !tbaa !64
  br label %sw.epilog

sw.bb.5:                                          ; preds = %if.end
  br label %sw.default

sw.default:                                       ; preds = %if.end, %sw.bb.5
  store i32 0, i32* %linecap, align 4, !tbaa !64
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.4, %sw.bb.3, %sw.bb
  %14 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetLineCap = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %14, i32 0, i32 32
  %15 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetLineCap, align 8, !tbaa !208
  %tobool6 = icmp ne i32 (i32, i32)* %15, null
  br i1 %tobool6, label %if.then.7, label %if.end.10

if.then.7:                                        ; preds = %sw.epilog
  %16 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetLineCap8 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %16, i32 0, i32 32
  %17 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetLineCap8, align 8, !tbaa !208
  %18 = load i32, i32* @printerContext, align 4, !tbaa !5
  %19 = load i32, i32* %linecap, align 4, !tbaa !64
  %call9 = call i32 %17(i32 %18, i32 %19) #7
  store i32 %call9, i32* %r, align 4, !tbaa !5
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.7, %sw.epilog
  %20 = load i32, i32* %r, align 4, !tbaa !5
  %cmp = icmp ne i32 %20, 0
  br i1 %cmp, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.end.10
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.11, %if.end.10
  %21 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %21, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.12, %if.then
  %22 = bitcast i32* %linecap to i8*
  call void @llvm.lifetime.end(i64 4, i8* %22) #2
  %23 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %23) #2
  %24 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %24) #2
  %25 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %25) #2
  %26 = load i32, i32* %retval
  ret i32 %26
}

; Function Attrs: nounwind uwtable
define internal i32 @opvp_setlinejoin(%struct.gx_device_vector_s* %vdev, i32 %join) #0 {
entry:
  %retval = alloca i32, align 4
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %join.addr = alloca i32, align 4
  %pdev = alloca %struct.gx_device_opvp_s*, align 8
  %r = alloca i32, align 4
  %ecode = alloca i32, align 4
  %linejoin = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store i32 %join, i32* %join.addr, align 4, !tbaa !64
  %0 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_vector_s* %1 to %struct.gx_device_opvp_s*
  store %struct.gx_device_opvp_s* %2, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  store i32 -1, i32* %r, align 4, !tbaa !5
  %4 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %5 = bitcast i32* %linejoin to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #2
  %6 = load i32, i32* @beginPage, align 4, !tbaa !5
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %7 = load i32, i32* @inkjet, align 4, !tbaa !5
  %tobool1 = icmp ne i32 %7, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  br i1 false, label %if.then, label %if.end

cond.false:                                       ; preds = %lor.lhs.false
  %8 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %vec_procs = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %8, i32 0, i32 44
  %9 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs, align 8, !tbaa !61
  %beginpage = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %9, i32 0, i32 0
  %10 = load i32 (%struct.gx_device_vector_s*)*, i32 (%struct.gx_device_vector_s*)** %beginpage, align 8, !tbaa !83
  %11 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %12 = bitcast %struct.gx_device_opvp_s* %11 to %struct.gx_device_vector_s*
  %call = call i32 %10(%struct.gx_device_vector_s* %12) #7
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %cond.false, %cond.true
  %13 = load i32, i32* %join.addr, align 4, !tbaa !64
  switch i32 %13, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.3
    i32 2, label %sw.bb.4
    i32 3, label %sw.bb.5
    i32 4, label %sw.bb.5
  ]

sw.bb:                                            ; preds = %if.end
  store i32 0, i32* %linejoin, align 4, !tbaa !64
  br label %sw.epilog

sw.bb.3:                                          ; preds = %if.end
  store i32 1, i32* %linejoin, align 4, !tbaa !64
  br label %sw.epilog

sw.bb.4:                                          ; preds = %if.end
  store i32 2, i32* %linejoin, align 4, !tbaa !64
  br label %sw.epilog

sw.bb.5:                                          ; preds = %if.end, %if.end
  br label %sw.default

sw.default:                                       ; preds = %if.end, %sw.bb.5
  store i32 0, i32* %linejoin, align 4, !tbaa !64
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.4, %sw.bb.3, %sw.bb
  %14 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetLineJoin = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %14, i32 0, i32 34
  %15 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetLineJoin, align 8, !tbaa !212
  %tobool6 = icmp ne i32 (i32, i32)* %15, null
  br i1 %tobool6, label %if.then.7, label %if.end.10

if.then.7:                                        ; preds = %sw.epilog
  %16 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetLineJoin8 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %16, i32 0, i32 34
  %17 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetLineJoin8, align 8, !tbaa !212
  %18 = load i32, i32* @printerContext, align 4, !tbaa !5
  %19 = load i32, i32* %linejoin, align 4, !tbaa !64
  %call9 = call i32 %17(i32 %18, i32 %19) #7
  store i32 %call9, i32* %r, align 4, !tbaa !5
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.7, %sw.epilog
  %20 = load i32, i32* %r, align 4, !tbaa !5
  %cmp = icmp ne i32 %20, 0
  br i1 %cmp, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.end.10
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.11, %if.end.10
  %21 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %21, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.12, %if.then
  %22 = bitcast i32* %linejoin to i8*
  call void @llvm.lifetime.end(i64 4, i8* %22) #2
  %23 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %23) #2
  %24 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %24) #2
  %25 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %25) #2
  %26 = load i32, i32* %retval
  ret i32 %26
}

; Function Attrs: nounwind uwtable
define internal i32 @opvp_setmiterlimit(%struct.gx_device_vector_s* %vdev, double %limit) #0 {
entry:
  %retval = alloca i32, align 4
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %limit.addr = alloca double, align 8
  %pdev = alloca %struct.gx_device_opvp_s*, align 8
  %r = alloca i32, align 4
  %ecode = alloca i32, align 4
  %l = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store double %limit, double* %limit.addr, align 8, !tbaa !286
  %0 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_vector_s* %1 to %struct.gx_device_opvp_s*
  store %struct.gx_device_opvp_s* %2, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  store i32 -1, i32* %r, align 4, !tbaa !5
  %4 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %5 = bitcast i32* %l to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #2
  %6 = load i32, i32* @beginPage, align 4, !tbaa !5
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %7 = load i32, i32* @inkjet, align 4, !tbaa !5
  %tobool1 = icmp ne i32 %7, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  br i1 false, label %if.then, label %if.end

cond.false:                                       ; preds = %lor.lhs.false
  %8 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %vec_procs = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %8, i32 0, i32 44
  %9 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs, align 8, !tbaa !61
  %beginpage = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %9, i32 0, i32 0
  %10 = load i32 (%struct.gx_device_vector_s*)*, i32 (%struct.gx_device_vector_s*)** %beginpage, align 8, !tbaa !83
  %11 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %12 = bitcast %struct.gx_device_opvp_s* %11 to %struct.gx_device_vector_s*
  %call = call i32 %10(%struct.gx_device_vector_s* %12) #7
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %cond.false, %cond.true
  %13 = load double, double* %limit.addr, align 8, !tbaa !286
  %call3 = call double @floor(double %13) #10
  %conv = fptosi double %call3 to i32
  %shl = shl i32 %conv, 8
  %14 = load double, double* %limit.addr, align 8, !tbaa !286
  %15 = load double, double* %limit.addr, align 8, !tbaa !286
  %call4 = call double @floor(double %15) #10
  %sub = fsub double %14, %call4
  %mul = fmul double %sub, 2.560000e+02
  %conv5 = fptosi double %mul to i32
  %and = and i32 %conv5, 255
  %or = or i32 %shl, %and
  store i32 %or, i32* %l, align 4, !tbaa !5
  %16 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetMiterLimit = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %16, i32 0, i32 36
  %17 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetMiterLimit, align 8, !tbaa !216
  %tobool6 = icmp ne i32 (i32, i32)* %17, null
  br i1 %tobool6, label %if.then.7, label %if.end.10

if.then.7:                                        ; preds = %if.end
  %18 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetMiterLimit8 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %18, i32 0, i32 36
  %19 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetMiterLimit8, align 8, !tbaa !216
  %20 = load i32, i32* @printerContext, align 4, !tbaa !5
  %21 = load i32, i32* %l, align 4, !tbaa !5
  %call9 = call i32 %19(i32 %20, i32 %21) #7
  store i32 %call9, i32* %r, align 4, !tbaa !5
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.7, %if.end
  %22 = load i32, i32* %r, align 4, !tbaa !5
  %cmp = icmp ne i32 %22, 0
  br i1 %cmp, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.end.10
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.12, %if.end.10
  %23 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %23, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.13, %if.then
  %24 = bitcast i32* %l to i8*
  call void @llvm.lifetime.end(i64 4, i8* %24) #2
  %25 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %25) #2
  %26 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %26) #2
  %27 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %27) #2
  %28 = load i32, i32* %retval
  ret i32 %28
}

; Function Attrs: nounwind uwtable
define internal i32 @opvp_setdash(%struct.gx_device_vector_s* %vdev, float* %pattern, i32 %count, double %offset) #0 {
entry:
  %retval = alloca i32, align 4
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %pattern.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %offset.addr = alloca double, align 8
  %pdev = alloca %struct.gx_device_opvp_s*, align 8
  %r = alloca i32, align 4
  %ecode = alloca i32, align 4
  %p = alloca i32*, align 8
  %o = alloca i32, align 4
  %i = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store float* %pattern, float** %pattern.addr, align 8, !tbaa !1
  store i32 %count, i32* %count.addr, align 4, !tbaa !5
  store double %offset, double* %offset.addr, align 8, !tbaa !286
  %0 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_vector_s* %1 to %struct.gx_device_opvp_s*
  store %struct.gx_device_opvp_s* %2, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  store i32 -1, i32* %r, align 4, !tbaa !5
  %4 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %5 = bitcast i32** %p to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #2
  store i32* null, i32** %p, align 8, !tbaa !1
  %6 = bitcast i32* %o to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #2
  %7 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #2
  %8 = load i32, i32* @beginPage, align 4, !tbaa !5
  %tobool = icmp ne i32 %8, 0
  br i1 %tobool, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %9 = load i32, i32* @inkjet, align 4, !tbaa !5
  %tobool1 = icmp ne i32 %9, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  br i1 false, label %if.then, label %if.end

cond.false:                                       ; preds = %lor.lhs.false
  %10 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %vec_procs = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %10, i32 0, i32 44
  %11 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs, align 8, !tbaa !61
  %beginpage = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %11, i32 0, i32 0
  %12 = load i32 (%struct.gx_device_vector_s*)*, i32 (%struct.gx_device_vector_s*)** %beginpage, align 8, !tbaa !83
  %13 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %14 = bitcast %struct.gx_device_opvp_s* %13 to %struct.gx_device_vector_s*
  %call = call i32 %12(%struct.gx_device_vector_s* %14) #7
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %cond.false, %cond.true
  %15 = load i32, i32* %count.addr, align 4, !tbaa !5
  %tobool3 = icmp ne i32 %15, 0
  br i1 %tobool3, label %if.then.4, label %if.end.23

if.then.4:                                        ; preds = %if.end
  %16 = load i32, i32* %count.addr, align 4, !tbaa !5
  %conv = zext i32 %16 to i64
  %call5 = call noalias i8* @calloc(i64 4, i64 %conv) #8
  %17 = bitcast i8* %call5 to i32*
  store i32* %17, i32** %p, align 8, !tbaa !1
  %18 = load i32*, i32** %p, align 8, !tbaa !1
  %tobool6 = icmp ne i32* %18, null
  br i1 %tobool6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %if.then.4
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.7
  %19 = load i32, i32* %i, align 4, !tbaa !5
  %20 = load i32, i32* %count.addr, align 4, !tbaa !5
  %cmp = icmp ult i32 %19, %20
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %21 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom = sext i32 %21 to i64
  %22 = load float*, float** %pattern.addr, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds float, float* %22, i64 %idxprom
  %23 = load float, float* %arrayidx, align 4, !tbaa !10
  %conv9 = fpext float %23 to double
  %call10 = call double @floor(double %conv9) #10
  %conv11 = fptosi double %call10 to i32
  %shl = shl i32 %conv11, 8
  %24 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom12 = sext i32 %24 to i64
  %25 = load float*, float** %pattern.addr, align 8, !tbaa !1
  %arrayidx13 = getelementptr inbounds float, float* %25, i64 %idxprom12
  %26 = load float, float* %arrayidx13, align 4, !tbaa !10
  %conv14 = fpext float %26 to double
  %27 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom15 = sext i32 %27 to i64
  %28 = load float*, float** %pattern.addr, align 8, !tbaa !1
  %arrayidx16 = getelementptr inbounds float, float* %28, i64 %idxprom15
  %29 = load float, float* %arrayidx16, align 4, !tbaa !10
  %conv17 = fpext float %29 to double
  %call18 = call double @floor(double %conv17) #10
  %sub = fsub double %conv14, %call18
  %mul = fmul double %sub, 2.560000e+02
  %conv19 = fptosi double %mul to i32
  %and = and i32 %conv19, 255
  %or = or i32 %shl, %and
  %30 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom20 = sext i32 %30 to i64
  %31 = load i32*, i32** %p, align 8, !tbaa !1
  %arrayidx21 = getelementptr inbounds i32, i32* %31, i64 %idxprom20
  store i32 %or, i32* %arrayidx21, align 4, !tbaa !5
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %32 = load i32, i32* %i, align 4, !tbaa !5
  %inc = add nsw i32 %32, 1
  store i32 %inc, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.22

if.else:                                          ; preds = %if.then.4
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.22

if.end.22:                                        ; preds = %if.else, %for.end
  br label %if.end.23

if.end.23:                                        ; preds = %if.end.22, %if.end
  %33 = load i32, i32* %ecode, align 4, !tbaa !5
  %tobool24 = icmp ne i32 %33, 0
  br i1 %tobool24, label %if.end.35, label %if.then.25

if.then.25:                                       ; preds = %if.end.23
  %34 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetLineDash = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %34, i32 0, i32 26
  %35 = load i32 (i32, i32, i32*)*, i32 (i32, i32, i32*)** %opvpSetLineDash, align 8, !tbaa !196
  %tobool26 = icmp ne i32 (i32, i32, i32*)* %35, null
  br i1 %tobool26, label %if.then.27, label %if.end.30

if.then.27:                                       ; preds = %if.then.25
  %36 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetLineDash28 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %36, i32 0, i32 26
  %37 = load i32 (i32, i32, i32*)*, i32 (i32, i32, i32*)** %opvpSetLineDash28, align 8, !tbaa !196
  %38 = load i32, i32* @printerContext, align 4, !tbaa !5
  %39 = load i32, i32* %count.addr, align 4, !tbaa !5
  %40 = load i32*, i32** %p, align 8, !tbaa !1
  %call29 = call i32 %37(i32 %38, i32 %39, i32* %40) #7
  store i32 %call29, i32* %r, align 4, !tbaa !5
  br label %if.end.30

if.end.30:                                        ; preds = %if.then.27, %if.then.25
  %41 = load i32, i32* %r, align 4, !tbaa !5
  %cmp31 = icmp ne i32 %41, 0
  br i1 %cmp31, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %if.end.30
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.33, %if.end.30
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34, %if.end.23
  %42 = load i32, i32* %ecode, align 4, !tbaa !5
  %tobool36 = icmp ne i32 %42, 0
  br i1 %tobool36, label %if.end.56, label %if.then.37

if.then.37:                                       ; preds = %if.end.35
  %43 = load double, double* %offset.addr, align 8, !tbaa !286
  %call38 = call double @floor(double %43) #10
  %conv39 = fptosi double %call38 to i32
  %shl40 = shl i32 %conv39, 8
  %44 = load double, double* %offset.addr, align 8, !tbaa !286
  %45 = load double, double* %offset.addr, align 8, !tbaa !286
  %call41 = call double @floor(double %45) #10
  %sub42 = fsub double %44, %call41
  %mul43 = fmul double %sub42, 2.560000e+02
  %conv44 = fptosi double %mul43 to i32
  %and45 = and i32 %conv44, 255
  %or46 = or i32 %shl40, %and45
  store i32 %or46, i32* %o, align 4, !tbaa !5
  %46 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetLineDashOffset = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %46, i32 0, i32 28
  %47 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetLineDashOffset, align 8, !tbaa !200
  %tobool47 = icmp ne i32 (i32, i32)* %47, null
  br i1 %tobool47, label %if.then.48, label %if.end.51

if.then.48:                                       ; preds = %if.then.37
  %48 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetLineDashOffset49 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %48, i32 0, i32 28
  %49 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetLineDashOffset49, align 8, !tbaa !200
  %50 = load i32, i32* @printerContext, align 4, !tbaa !5
  %51 = load i32, i32* %o, align 4, !tbaa !5
  %call50 = call i32 %49(i32 %50, i32 %51) #7
  store i32 %call50, i32* %r, align 4, !tbaa !5
  br label %if.end.51

if.end.51:                                        ; preds = %if.then.48, %if.then.37
  %52 = load i32, i32* %r, align 4, !tbaa !5
  %cmp52 = icmp ne i32 %52, 0
  br i1 %cmp52, label %if.then.54, label %if.end.55

if.then.54:                                       ; preds = %if.end.51
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.55

if.end.55:                                        ; preds = %if.then.54, %if.end.51
  br label %if.end.56

if.end.56:                                        ; preds = %if.end.55, %if.end.35
  %53 = load i32, i32* %ecode, align 4, !tbaa !5
  %tobool57 = icmp ne i32 %53, 0
  br i1 %tobool57, label %if.end.69, label %if.then.58

if.then.58:                                       ; preds = %if.end.56
  %54 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetLineStyle = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %54, i32 0, i32 30
  %55 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetLineStyle, align 8, !tbaa !204
  %tobool59 = icmp ne i32 (i32, i32)* %55, null
  br i1 %tobool59, label %if.then.60, label %if.end.64

if.then.60:                                       ; preds = %if.then.58
  %56 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetLineStyle61 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %56, i32 0, i32 30
  %57 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetLineStyle61, align 8, !tbaa !204
  %58 = load i32, i32* @printerContext, align 4, !tbaa !5
  %59 = load i32, i32* %count.addr, align 4, !tbaa !5
  %tobool62 = icmp ne i32 %59, 0
  %cond = select i1 %tobool62, i32 1, i32 0
  %call63 = call i32 %57(i32 %58, i32 %cond) #7
  store i32 %call63, i32* %r, align 4, !tbaa !5
  br label %if.end.64

if.end.64:                                        ; preds = %if.then.60, %if.then.58
  %60 = load i32, i32* %r, align 4, !tbaa !5
  %cmp65 = icmp ne i32 %60, 0
  br i1 %cmp65, label %if.then.67, label %if.end.68

if.then.67:                                       ; preds = %if.end.64
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.68

if.end.68:                                        ; preds = %if.then.67, %if.end.64
  br label %if.end.69

if.end.69:                                        ; preds = %if.end.68, %if.end.56
  %61 = load i32*, i32** %p, align 8, !tbaa !1
  %tobool70 = icmp ne i32* %61, null
  br i1 %tobool70, label %if.then.71, label %if.end.72

if.then.71:                                       ; preds = %if.end.69
  %62 = load i32*, i32** %p, align 8, !tbaa !1
  %63 = bitcast i32* %62 to i8*
  call void @free(i8* %63) #8
  br label %if.end.72

if.end.72:                                        ; preds = %if.then.71, %if.end.69
  %64 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %64, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.72, %if.then
  %65 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %65) #2
  %66 = bitcast i32* %o to i8*
  call void @llvm.lifetime.end(i64 4, i8* %66) #2
  %67 = bitcast i32** %p to i8*
  call void @llvm.lifetime.end(i64 8, i8* %67) #2
  %68 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %68) #2
  %69 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %69) #2
  %70 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %70) #2
  %71 = load i32, i32* %retval
  ret i32 %71
}

; Function Attrs: nounwind uwtable
define internal i32 @opvp_setflat(%struct.gx_device_vector_s* %vdev, double %flatness) #0 {
entry:
  %retval = alloca i32, align 4
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %flatness.addr = alloca double, align 8
  %pdev = alloca %struct.gx_device_opvp_s*, align 8
  %ecode = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store double %flatness, double* %flatness.addr, align 8, !tbaa !286
  %0 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_vector_s* %1 to %struct.gx_device_opvp_s*
  store %struct.gx_device_opvp_s* %2, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %4 = load i32, i32* @beginPage, align 4, !tbaa !5
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load i32, i32* @inkjet, align 4, !tbaa !5
  %tobool1 = icmp ne i32 %5, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  br i1 false, label %if.then, label %if.end

cond.false:                                       ; preds = %lor.lhs.false
  %6 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %vec_procs = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %6, i32 0, i32 44
  %7 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs, align 8, !tbaa !61
  %beginpage = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %7, i32 0, i32 0
  %8 = load i32 (%struct.gx_device_vector_s*)*, i32 (%struct.gx_device_vector_s*)** %beginpage, align 8, !tbaa !83
  %9 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %10 = bitcast %struct.gx_device_opvp_s* %9 to %struct.gx_device_vector_s*
  %call = call i32 %8(%struct.gx_device_vector_s* %10) #7
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %cond.false, %cond.true
  %11 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %11, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %12 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %12) #2
  %13 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %13) #2
  %14 = load i32, i32* %retval
  ret i32 %14
}

; Function Attrs: nounwind uwtable
define internal i32 @opvp_setlogop(%struct.gx_device_vector_s* %vdev, i32 %lop, i32 %diff) #0 {
entry:
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %lop.addr = alloca i32, align 4
  %diff.addr = alloca i32, align 4
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store i32 %lop, i32* %lop.addr, align 4, !tbaa !5
  store i32 %diff, i32* %diff.addr, align 4, !tbaa !5
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @opvp_can_handle_hl_color(%struct.gx_device_vector_s* %vdev, %struct.gs_imager_state_s* %pis1, %struct.gx_device_color_s* %pdc) #0 {
entry:
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %pis1.addr = alloca %struct.gs_imager_state_s*, align 8
  %pdc.addr = alloca %struct.gx_device_color_s*, align 8
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis1, %struct.gs_imager_state_s** %pis1.addr, align 8, !tbaa !1
  store %struct.gx_device_color_s* %pdc, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @opvp_setfillcolor(%struct.gx_device_vector_s* %vdev, %struct.gs_imager_state_s* %pis, %struct.gx_device_color_s* %pdc) #0 {
entry:
  %retval = alloca i32, align 4
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %pdc.addr = alloca %struct.gx_device_color_s*, align 8
  %pdev = alloca %struct.gx_device_opvp_s*, align 8
  %r = alloca i32, align 4
  %ecode = alloca i32, align 4
  %color = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_color_s* %pdc, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_vector_s* %1 to %struct.gx_device_opvp_s*
  store %struct.gx_device_opvp_s* %2, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  store i32 -1, i32* %r, align 4, !tbaa !5
  %4 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %5 = bitcast i64* %color to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #2
  %6 = load i32, i32* @beginPage, align 4, !tbaa !5
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %7 = load i32, i32* @inkjet, align 4, !tbaa !5
  %tobool1 = icmp ne i32 %7, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  br i1 false, label %if.then, label %if.end

cond.false:                                       ; preds = %lor.lhs.false
  %8 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %vec_procs = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %8, i32 0, i32 44
  %9 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs, align 8, !tbaa !61
  %beginpage = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %9, i32 0, i32 0
  %10 = load i32 (%struct.gx_device_vector_s*)*, i32 (%struct.gx_device_vector_s*)** %beginpage, align 8, !tbaa !83
  %11 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %12 = bitcast %struct.gx_device_opvp_s* %11 to %struct.gx_device_vector_s*
  %call = call i32 %10(%struct.gx_device_vector_s* %12) #7
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %cond.false, %cond.true
  %13 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %type = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %13, i32 0, i32 0
  %14 = load %struct.gx_device_color_type_s*, %struct.gx_device_color_type_s** %type, align 8, !tbaa !287
  %cmp = icmp eq %struct.gx_device_color_type_s* %14, @gx_dc_type_data_pure
  br i1 %cmp, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store i32 -15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.4:                                         ; preds = %if.end
  %15 = load %struct._opvp_brush*, %struct._opvp_brush** @vectorFillColor, align 8, !tbaa !1
  %tobool5 = icmp ne %struct._opvp_brush* %15, null
  br i1 %tobool5, label %if.end.7, label %if.then.6

if.then.6:                                        ; preds = %if.end.4
  store %struct._opvp_brush* @opvp_setfillcolor.brush, %struct._opvp_brush** @vectorFillColor, align 8, !tbaa !1
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.6, %if.end.4
  %16 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %colors = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %16, i32 0, i32 1
  %pure = bitcast %union._c* %colors to i64*
  %17 = load i64, i64* %pure, align 8, !tbaa !90
  store i64 %17, i64* %color, align 8, !tbaa !90
  %18 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %19 = load i64, i64* %color, align 8, !tbaa !90
  %20 = load %struct._opvp_brush*, %struct._opvp_brush** @vectorFillColor, align 8, !tbaa !1
  %call8 = call i32 @opvp_set_brush_color(%struct.gx_device_opvp_s* %18, i64 %19, %struct._opvp_brush* %20) #7
  %21 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetFillColor = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %21, i32 0, i32 41
  %22 = load i32 (i32, %struct._opvp_brush*)*, i32 (i32, %struct._opvp_brush*)** %opvpSetFillColor, align 8, !tbaa !91
  %tobool9 = icmp ne i32 (i32, %struct._opvp_brush*)* %22, null
  br i1 %tobool9, label %if.then.10, label %if.end.13

if.then.10:                                       ; preds = %if.end.7
  %23 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetFillColor11 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %23, i32 0, i32 41
  %24 = load i32 (i32, %struct._opvp_brush*)*, i32 (i32, %struct._opvp_brush*)** %opvpSetFillColor11, align 8, !tbaa !91
  %25 = load i32, i32* @printerContext, align 4, !tbaa !5
  %26 = load %struct._opvp_brush*, %struct._opvp_brush** @vectorFillColor, align 8, !tbaa !1
  %call12 = call i32 %24(i32 %25, %struct._opvp_brush* %26) #7
  store i32 %call12, i32* %r, align 4, !tbaa !5
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.10, %if.end.7
  %27 = load i32, i32* %r, align 4, !tbaa !5
  %cmp14 = icmp ne i32 %27, 0
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.13
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.15, %if.end.13
  %28 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %28, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.16, %if.then.3, %if.then
  %29 = bitcast i64* %color to i8*
  call void @llvm.lifetime.end(i64 8, i8* %29) #2
  %30 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %30) #2
  %31 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %31) #2
  %32 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %32) #2
  %33 = load i32, i32* %retval
  ret i32 %33
}

; Function Attrs: nounwind uwtable
define internal i32 @opvp_setstrokecolor(%struct.gx_device_vector_s* %vdev, %struct.gs_imager_state_s* %pis, %struct.gx_device_color_s* %pdc) #0 {
entry:
  %retval = alloca i32, align 4
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %pis.addr = alloca %struct.gs_imager_state_s*, align 8
  %pdc.addr = alloca %struct.gx_device_color_s*, align 8
  %pdev = alloca %struct.gx_device_opvp_s*, align 8
  %r = alloca i32, align 4
  %ecode = alloca i32, align 4
  %color = alloca i64, align 8
  %brush = alloca %struct._opvp_brush, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store %struct.gs_imager_state_s* %pis, %struct.gs_imager_state_s** %pis.addr, align 8, !tbaa !1
  store %struct.gx_device_color_s* %pdc, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_vector_s* %1 to %struct.gx_device_opvp_s*
  store %struct.gx_device_opvp_s* %2, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  store i32 -1, i32* %r, align 4, !tbaa !5
  %4 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %5 = bitcast i64* %color to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #2
  %6 = bitcast %struct._opvp_brush* %brush to i8*
  call void @llvm.lifetime.start(i64 40, i8* %6) #2
  %7 = load i32, i32* @beginPage, align 4, !tbaa !5
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %8 = load i32, i32* @inkjet, align 4, !tbaa !5
  %tobool1 = icmp ne i32 %8, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  br i1 false, label %if.then, label %if.end

cond.false:                                       ; preds = %lor.lhs.false
  %9 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %vec_procs = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %9, i32 0, i32 44
  %10 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs, align 8, !tbaa !61
  %beginpage = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %10, i32 0, i32 0
  %11 = load i32 (%struct.gx_device_vector_s*)*, i32 (%struct.gx_device_vector_s*)** %beginpage, align 8, !tbaa !83
  %12 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %13 = bitcast %struct.gx_device_opvp_s* %12 to %struct.gx_device_vector_s*
  %call = call i32 %11(%struct.gx_device_vector_s* %13) #7
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %cond.false, %cond.true
  %14 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %type = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %14, i32 0, i32 0
  %15 = load %struct.gx_device_color_type_s*, %struct.gx_device_color_type_s** %type, align 8, !tbaa !287
  %cmp = icmp eq %struct.gx_device_color_type_s* %15, @gx_dc_type_data_pure
  br i1 %cmp, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store i32 -15, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.4:                                         ; preds = %if.end
  %16 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %pdc.addr, align 8, !tbaa !1
  %colors = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %16, i32 0, i32 1
  %pure = bitcast %union._c* %colors to i64*
  %17 = load i64, i64* %pure, align 8, !tbaa !90
  store i64 %17, i64* %color, align 8, !tbaa !90
  %18 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %19 = load i64, i64* %color, align 8, !tbaa !90
  %call5 = call i32 @opvp_set_brush_color(%struct.gx_device_opvp_s* %18, i64 %19, %struct._opvp_brush* %brush) #7
  %20 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetStrokeColor = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %20, i32 0, i32 40
  %21 = load i32 (i32, %struct._opvp_brush*)*, i32 (i32, %struct._opvp_brush*)** %opvpSetStrokeColor, align 8, !tbaa !223
  %tobool6 = icmp ne i32 (i32, %struct._opvp_brush*)* %21, null
  br i1 %tobool6, label %if.then.7, label %if.end.10

if.then.7:                                        ; preds = %if.end.4
  %22 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetStrokeColor8 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %22, i32 0, i32 40
  %23 = load i32 (i32, %struct._opvp_brush*)*, i32 (i32, %struct._opvp_brush*)** %opvpSetStrokeColor8, align 8, !tbaa !223
  %24 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call9 = call i32 %23(i32 %24, %struct._opvp_brush* %brush) #7
  store i32 %call9, i32* %r, align 4, !tbaa !5
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.7, %if.end.4
  %25 = load i32, i32* %r, align 4, !tbaa !5
  %cmp11 = icmp ne i32 %25, 0
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.end.10
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.12, %if.end.10
  %26 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %26, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.13, %if.then.3, %if.then
  %27 = bitcast %struct._opvp_brush* %brush to i8*
  call void @llvm.lifetime.end(i64 40, i8* %27) #2
  %28 = bitcast i64* %color to i8*
  call void @llvm.lifetime.end(i64 8, i8* %28) #2
  %29 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %29) #2
  %30 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %30) #2
  %31 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %31) #2
  %32 = load i32, i32* %retval
  ret i32 %32
}

; Function Attrs: nounwind uwtable
define internal i32 @opvp_vector_dopath(%struct.gx_device_vector_s* %vdev, %struct.gx_path_s* %ppath, i32 %type, %struct.gs_matrix_s* %pmat) #0 {
entry:
  %retval = alloca i32, align 4
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %ppath.addr = alloca %struct.gx_path_s*, align 8
  %type.addr = alloca i32, align 4
  %pmat.addr = alloca %struct.gs_matrix_s*, align 8
  %pdev = alloca %struct.gx_device_opvp_s*, align 8
  %r = alloca i32, align 4
  %code = alloca i32, align 4
  %ecode = alloca i32, align 4
  %rect = alloca %struct.gs_fixed_rect_s, align 4
  %path = alloca %struct.gs_path_enum_s, align 8
  %scale = alloca %struct.gs_point_s, align 8
  %op = alloca i32, align 4
  %i = alloca i32, align 4
  %pop = alloca i32, align 4
  %npoints = alloca i32, align 4
  %cp_num = alloca i32*, align 8
  %points = alloca %struct._fPoint*, align 8
  %opvp_p = alloca %struct._opvp_point*, align 8
  %current = alloca %struct._fPoint, align 8
  %check_p = alloca %struct._fPoint, align 8
  %start = alloca %struct._fPoint, align 8
  %vs = alloca [6 x i32], align 16
  %begin = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store %struct.gx_path_s* %ppath, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  store i32 %type, i32* %type.addr, align 4, !tbaa !64
  store %struct.gs_matrix_s* %pmat, %struct.gs_matrix_s** %pmat.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_vector_s* %1 to %struct.gx_device_opvp_s*
  store %struct.gx_device_opvp_s* %2, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  store i32 -1, i32* %r, align 4, !tbaa !5
  %4 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  store i32 -1, i32* %code, align 4, !tbaa !5
  %5 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %6 = bitcast %struct.gs_fixed_rect_s* %rect to i8*
  call void @llvm.lifetime.start(i64 16, i8* %6) #2
  %7 = bitcast %struct.gs_path_enum_s* %path to i8*
  call void @llvm.lifetime.start(i64 64, i8* %7) #2
  %8 = bitcast %struct.gs_point_s* %scale to i8*
  call void @llvm.lifetime.start(i64 16, i8* %8) #2
  %9 = bitcast i32* %op to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #2
  %10 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #2
  %11 = bitcast i32* %pop to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #2
  store i32 0, i32* %pop, align 4, !tbaa !5
  %12 = bitcast i32* %npoints to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #2
  store i32 0, i32* %npoints, align 4, !tbaa !5
  %13 = bitcast i32** %cp_num to i8*
  call void @llvm.lifetime.start(i64 8, i8* %13) #2
  store i32* null, i32** %cp_num, align 8, !tbaa !1
  %14 = bitcast %struct._fPoint** %points to i8*
  call void @llvm.lifetime.start(i64 8, i8* %14) #2
  store %struct._fPoint* null, %struct._fPoint** %points, align 8, !tbaa !1
  %15 = bitcast %struct._opvp_point** %opvp_p to i8*
  call void @llvm.lifetime.start(i64 8, i8* %15) #2
  store %struct._opvp_point* null, %struct._opvp_point** %opvp_p, align 8, !tbaa !1
  %16 = bitcast %struct._fPoint* %current to i8*
  call void @llvm.lifetime.start(i64 16, i8* %16) #2
  %17 = bitcast %struct._fPoint* %check_p to i8*
  call void @llvm.lifetime.start(i64 16, i8* %17) #2
  %18 = bitcast %struct._fPoint* %start to i8*
  call void @llvm.lifetime.start(i64 16, i8* %18) #2
  %19 = bitcast [6 x i32]* %vs to i8*
  call void @llvm.lifetime.start(i64 24, i8* %19) #2
  %20 = bitcast i32* %begin to i8*
  call void @llvm.lifetime.start(i64 4, i8* %20) #2
  store i32 1, i32* %begin, align 4, !tbaa !5
  %y = getelementptr inbounds %struct._fPoint, %struct._fPoint* %start, i32 0, i32 1
  store double 0.000000e+00, double* %y, align 8, !tbaa !291
  %x = getelementptr inbounds %struct._fPoint, %struct._fPoint* %start, i32 0, i32 0
  store double 0.000000e+00, double* %x, align 8, !tbaa !293
  %y1 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %current, i32 0, i32 1
  store double 0.000000e+00, double* %y1, align 8, !tbaa !291
  %x2 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %current, i32 0, i32 0
  store double 0.000000e+00, double* %x2, align 8, !tbaa !293
  %21 = load i32, i32* @beginPage, align 4, !tbaa !5
  %tobool = icmp ne i32 %21, 0
  br i1 %tobool, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %22 = load i32, i32* @inkjet, align 4, !tbaa !5
  %tobool3 = icmp ne i32 %22, 0
  br i1 %tobool3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  br i1 false, label %if.then, label %if.end

cond.false:                                       ; preds = %lor.lhs.false
  %23 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %vec_procs = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %23, i32 0, i32 44
  %24 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs, align 8, !tbaa !61
  %beginpage = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %24, i32 0, i32 0
  %25 = load i32 (%struct.gx_device_vector_s*)*, i32 (%struct.gx_device_vector_s*)** %beginpage, align 8, !tbaa !83
  %26 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %27 = bitcast %struct.gx_device_opvp_s* %26 to %struct.gx_device_vector_s*
  %call = call i32 %25(%struct.gx_device_vector_s* %27) #7
  %tobool4 = icmp ne i32 %call, 0
  br i1 %tobool4, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %cond.false, %cond.true
  %28 = load %struct.gx_path_s*, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  %call5 = call i32 @gx_path_is_rectangular(%struct.gx_path_s* %28, %struct.gs_fixed_rect_s* %rect) #7
  %cmp = icmp ne i32 %call5, 0
  br i1 %cmp, label %if.then.6, label %if.end.15

if.then.6:                                        ; preds = %if.end
  %29 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %vec_procs7 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %29, i32 0, i32 44
  %30 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs7, align 8, !tbaa !294
  %dorect = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %30, i32 0, i32 12
  %31 = load i32 (%struct.gx_device_vector_s*, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_vector_s*, i32, i32, i32, i32, i32)** %dorect, align 8, !tbaa !296
  %32 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %p = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %rect, i32 0, i32 0
  %x8 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %p, i32 0, i32 0
  %33 = load i32, i32* %x8, align 4, !tbaa !100
  %p9 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %rect, i32 0, i32 0
  %y10 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %p9, i32 0, i32 1
  %34 = load i32, i32* %y10, align 4, !tbaa !101
  %q = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %rect, i32 0, i32 1
  %x11 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %q, i32 0, i32 0
  %35 = load i32, i32* %x11, align 4, !tbaa !102
  %q12 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %rect, i32 0, i32 1
  %y13 = getelementptr inbounds %struct.gs_fixed_point_s, %struct.gs_fixed_point_s* %q12, i32 0, i32 1
  %36 = load i32, i32* %y13, align 4, !tbaa !103
  %37 = load i32, i32* %type.addr, align 4, !tbaa !64
  %call14 = call i32 %31(%struct.gx_device_vector_s* %32, i32 %33, i32 %34, i32 %35, i32 %36, i32 %37) #7
  store i32 %call14, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.15:                                        ; preds = %if.end
  %38 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %vec_procs16 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %38, i32 0, i32 44
  %39 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs16, align 8, !tbaa !294
  %beginpath = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %39, i32 0, i32 13
  %40 = load i32 (%struct.gx_device_vector_s*, i32)*, i32 (%struct.gx_device_vector_s*, i32)** %beginpath, align 8, !tbaa !297
  %41 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %42 = load i32, i32* %type.addr, align 4, !tbaa !64
  %call17 = call i32 %40(%struct.gx_device_vector_s* %41, i32 %42) #7
  store i32 %call17, i32* %code, align 4, !tbaa !5
  %43 = load i32, i32* %code, align 4, !tbaa !5
  %tobool18 = icmp ne i32 %43, 0
  br i1 %tobool18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.end.15
  %44 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %44, i32* %ecode, align 4, !tbaa !5
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.19, %if.end.15
  %45 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %scale21 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %45, i32 0, i32 62
  %46 = bitcast %struct.gs_point_s* %scale to i8*
  %47 = bitcast %struct.gs_point_s* %scale21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %46, i8* %47, i64 16, i32 8, i1 false), !tbaa.struct !298
  %48 = load %struct.gx_path_s*, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  %call22 = call i32 @gx_path_enum_init(%struct.gs_path_enum_s* %path, %struct.gx_path_s* %48) #7
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.270, %if.end.20
  %49 = load i32, i32* %ecode, align 4, !tbaa !5
  %tobool23 = icmp ne i32 %49, 0
  %lnot = xor i1 %tobool23, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %arraydecay = getelementptr inbounds [6 x i32], [6 x i32]* %vs, i32 0, i32 0
  %50 = bitcast i32* %arraydecay to %struct.gs_fixed_point_s*
  %call24 = call i32 @gx_path_enum_next(%struct.gs_path_enum_s* %path, %struct.gs_fixed_point_s* %50) #7
  store i32 %call24, i32* %op, align 4, !tbaa !5
  %51 = load i32, i32* %begin, align 4, !tbaa !5
  %tobool25 = icmp ne i32 %51, 0
  br i1 %tobool25, label %if.then.26, label %if.else

if.then.26:                                       ; preds = %while.body
  %arrayidx = getelementptr inbounds [6 x i32], [6 x i32]* %vs, i32 0, i64 0
  %52 = load i32, i32* %arrayidx, align 4, !tbaa !5
  %conv = sitofp i32 %52 to double
  %mul = fmul double %conv, 3.906250e-03
  %x27 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 0
  %53 = load double, double* %x27, align 8, !tbaa !299
  %div = fdiv double %mul, %53
  %x28 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %start, i32 0, i32 0
  store double %div, double* %x28, align 8, !tbaa !293
  %arrayidx29 = getelementptr inbounds [6 x i32], [6 x i32]* %vs, i32 0, i64 1
  %54 = load i32, i32* %arrayidx29, align 4, !tbaa !5
  %conv30 = sitofp i32 %54 to double
  %mul31 = fmul double %conv30, 3.906250e-03
  %y32 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 1
  %55 = load double, double* %y32, align 8, !tbaa !300
  %div33 = fdiv double %mul31, %55
  %y34 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %start, i32 0, i32 1
  store double %div33, double* %y34, align 8, !tbaa !291
  store i32 0, i32* %begin, align 4, !tbaa !5
  store i32 1, i32* %npoints, align 4, !tbaa !5
  %56 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %57 = bitcast %struct._fPoint* %56 to i8*
  %call35 = call i8* @realloc(i8* %57, i64 16) #8
  %58 = bitcast i8* %call35 to %struct._fPoint*
  store %struct._fPoint* %58, %struct._fPoint** %points, align 8, !tbaa !1
  %59 = bitcast %struct._fPoint* %current to i8*
  %60 = bitcast %struct._fPoint* %start to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %59, i8* %60, i64 16, i32 8, i1 false), !tbaa.struct !298
  %61 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %arrayidx36 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %61, i64 0
  %62 = bitcast %struct._fPoint* %arrayidx36 to i8*
  %63 = bitcast %struct._fPoint* %start to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %62, i8* %63, i64 16, i32 8, i1 false), !tbaa.struct !298
  br label %if.end.135

if.else:                                          ; preds = %while.body
  %64 = load i32, i32* %op, align 4, !tbaa !5
  %65 = load i32, i32* %pop, align 4, !tbaa !5
  %cmp37 = icmp ne i32 %64, %65
  br i1 %cmp37, label %if.then.39, label %if.end.134

if.then.39:                                       ; preds = %if.else
  %66 = load %struct._opvp_point*, %struct._opvp_point** %opvp_p, align 8, !tbaa !1
  %67 = bitcast %struct._opvp_point* %66 to i8*
  %68 = load i32, i32* %npoints, align 4, !tbaa !5
  %conv40 = sext i32 %68 to i64
  %mul41 = mul i64 8, %conv40
  %call42 = call i8* @realloc(i8* %67, i64 %mul41) #8
  %69 = bitcast i8* %call42 to %struct._opvp_point*
  store %struct._opvp_point* %69, %struct._opvp_point** %opvp_p, align 8, !tbaa !1
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.39
  %70 = load i32, i32* %i, align 4, !tbaa !5
  %71 = load i32, i32* %npoints, align 4, !tbaa !5
  %cmp43 = icmp slt i32 %70, %71
  br i1 %cmp43, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %72 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom = sext i32 %72 to i64
  %73 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %arrayidx45 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %73, i64 %idxprom
  %x46 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %arrayidx45, i32 0, i32 0
  %74 = load double, double* %x46, align 8, !tbaa !293
  %call47 = call double @floor(double %74) #10
  %conv48 = fptosi double %call47 to i32
  %shl = shl i32 %conv48, 8
  %75 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom49 = sext i32 %75 to i64
  %76 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %arrayidx50 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %76, i64 %idxprom49
  %x51 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %arrayidx50, i32 0, i32 0
  %77 = load double, double* %x51, align 8, !tbaa !293
  %78 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom52 = sext i32 %78 to i64
  %79 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %arrayidx53 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %79, i64 %idxprom52
  %x54 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %arrayidx53, i32 0, i32 0
  %80 = load double, double* %x54, align 8, !tbaa !293
  %call55 = call double @floor(double %80) #10
  %sub = fsub double %77, %call55
  %mul56 = fmul double %sub, 2.560000e+02
  %conv57 = fptosi double %mul56 to i32
  %and = and i32 %conv57, 255
  %or = or i32 %shl, %and
  %81 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom58 = sext i32 %81 to i64
  %82 = load %struct._opvp_point*, %struct._opvp_point** %opvp_p, align 8, !tbaa !1
  %arrayidx59 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %82, i64 %idxprom58
  %x60 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %arrayidx59, i32 0, i32 0
  store i32 %or, i32* %x60, align 4, !tbaa !92
  %83 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom61 = sext i32 %83 to i64
  %84 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %arrayidx62 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %84, i64 %idxprom61
  %y63 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %arrayidx62, i32 0, i32 1
  %85 = load double, double* %y63, align 8, !tbaa !291
  %call64 = call double @floor(double %85) #10
  %conv65 = fptosi double %call64 to i32
  %shl66 = shl i32 %conv65, 8
  %86 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom67 = sext i32 %86 to i64
  %87 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %arrayidx68 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %87, i64 %idxprom67
  %y69 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %arrayidx68, i32 0, i32 1
  %88 = load double, double* %y69, align 8, !tbaa !291
  %89 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom70 = sext i32 %89 to i64
  %90 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %arrayidx71 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %90, i64 %idxprom70
  %y72 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %arrayidx71, i32 0, i32 1
  %91 = load double, double* %y72, align 8, !tbaa !291
  %call73 = call double @floor(double %91) #10
  %sub74 = fsub double %88, %call73
  %mul75 = fmul double %sub74, 2.560000e+02
  %conv76 = fptosi double %mul75 to i32
  %and77 = and i32 %conv76, 255
  %or78 = or i32 %shl66, %and77
  %92 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom79 = sext i32 %92 to i64
  %93 = load %struct._opvp_point*, %struct._opvp_point** %opvp_p, align 8, !tbaa !1
  %arrayidx80 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %93, i64 %idxprom79
  %y81 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %arrayidx80, i32 0, i32 1
  store i32 %or78, i32* %y81, align 4, !tbaa !94
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %94 = load i32, i32* %i, align 4, !tbaa !5
  %inc = add nsw i32 %94, 1
  store i32 %inc, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %95 = load i32, i32* %pop, align 4, !tbaa !5
  switch i32 %95, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.99
    i32 3, label %sw.bb.111
    i32 4, label %sw.epilog
  ]

sw.bb:                                            ; preds = %for.end
  %96 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetCurrentPoint = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %96, i32 0, i32 50
  %97 = load i32 (i32, i32, i32)*, i32 (i32, i32, i32)** %opvpSetCurrentPoint, align 8, !tbaa !95
  %tobool82 = icmp ne i32 (i32, i32, i32)* %97, null
  br i1 %tobool82, label %if.then.83, label %if.end.94

if.then.83:                                       ; preds = %sw.bb
  %98 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetCurrentPoint84 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %98, i32 0, i32 50
  %99 = load i32 (i32, i32, i32)*, i32 (i32, i32, i32)** %opvpSetCurrentPoint84, align 8, !tbaa !95
  %100 = load i32, i32* @printerContext, align 4, !tbaa !5
  %101 = load i32, i32* %npoints, align 4, !tbaa !5
  %sub85 = sub nsw i32 %101, 1
  %idxprom86 = sext i32 %sub85 to i64
  %102 = load %struct._opvp_point*, %struct._opvp_point** %opvp_p, align 8, !tbaa !1
  %arrayidx87 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %102, i64 %idxprom86
  %x88 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %arrayidx87, i32 0, i32 0
  %103 = load i32, i32* %x88, align 4, !tbaa !92
  %104 = load i32, i32* %npoints, align 4, !tbaa !5
  %sub89 = sub nsw i32 %104, 1
  %idxprom90 = sext i32 %sub89 to i64
  %105 = load %struct._opvp_point*, %struct._opvp_point** %opvp_p, align 8, !tbaa !1
  %arrayidx91 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %105, i64 %idxprom90
  %y92 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %arrayidx91, i32 0, i32 1
  %106 = load i32, i32* %y92, align 4, !tbaa !94
  %call93 = call i32 %99(i32 %100, i32 %103, i32 %106) #7
  store i32 %call93, i32* %r, align 4, !tbaa !5
  br label %if.end.94

if.end.94:                                        ; preds = %if.then.83, %sw.bb
  %107 = load i32, i32* %r, align 4, !tbaa !5
  %cmp95 = icmp ne i32 %107, 0
  br i1 %cmp95, label %if.then.97, label %if.end.98

if.then.97:                                       ; preds = %if.end.94
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.98

if.end.98:                                        ; preds = %if.then.97, %if.end.94
  br label %sw.epilog

sw.bb.99:                                         ; preds = %for.end
  %108 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpLinePath = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %108, i32 0, i32 51
  %109 = load i32 (i32, i32, i32, %struct._opvp_point*)*, i32 (i32, i32, i32, %struct._opvp_point*)** %opvpLinePath, align 8, !tbaa !144
  %tobool100 = icmp ne i32 (i32, i32, i32, %struct._opvp_point*)* %109, null
  br i1 %tobool100, label %if.then.101, label %if.end.106

if.then.101:                                      ; preds = %sw.bb.99
  %110 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpLinePath102 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %110, i32 0, i32 51
  %111 = load i32 (i32, i32, i32, %struct._opvp_point*)*, i32 (i32, i32, i32, %struct._opvp_point*)** %opvpLinePath102, align 8, !tbaa !144
  %112 = load i32, i32* @printerContext, align 4, !tbaa !5
  %113 = load i32, i32* %npoints, align 4, !tbaa !5
  %sub103 = sub nsw i32 %113, 1
  %114 = load %struct._opvp_point*, %struct._opvp_point** %opvp_p, align 8, !tbaa !1
  %arrayidx104 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %114, i64 1
  %call105 = call i32 %111(i32 %112, i32 1, i32 %sub103, %struct._opvp_point* %arrayidx104) #7
  store i32 %call105, i32* %r, align 4, !tbaa !5
  br label %if.end.106

if.end.106:                                       ; preds = %if.then.101, %sw.bb.99
  %115 = load i32, i32* %r, align 4, !tbaa !5
  %cmp107 = icmp ne i32 %115, 0
  br i1 %cmp107, label %if.then.109, label %if.end.110

if.then.109:                                      ; preds = %if.end.106
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.110

if.end.110:                                       ; preds = %if.then.109, %if.end.106
  br label %sw.epilog

sw.bb.111:                                        ; preds = %for.end
  %116 = load i32*, i32** %cp_num, align 8, !tbaa !1
  %tobool112 = icmp ne i32* %116, null
  br i1 %tobool112, label %if.end.115, label %if.then.113

if.then.113:                                      ; preds = %sw.bb.111
  %call114 = call noalias i8* @calloc(i64 4, i64 2) #8
  %117 = bitcast i8* %call114 to i32*
  store i32* %117, i32** %cp_num, align 8, !tbaa !1
  br label %if.end.115

if.end.115:                                       ; preds = %if.then.113, %sw.bb.111
  %118 = load i32, i32* %npoints, align 4, !tbaa !5
  %119 = load i32*, i32** %cp_num, align 8, !tbaa !1
  %arrayidx116 = getelementptr inbounds i32, i32* %119, i64 0
  store i32 %118, i32* %arrayidx116, align 4, !tbaa !5
  %120 = load i32*, i32** %cp_num, align 8, !tbaa !1
  %arrayidx117 = getelementptr inbounds i32, i32* %120, i64 1
  store i32 0, i32* %arrayidx117, align 4, !tbaa !5
  %121 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpBezierPath = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %121, i32 0, i32 55
  %122 = load i32 (i32, i32, %struct._opvp_point*)*, i32 (i32, i32, %struct._opvp_point*)** %opvpBezierPath, align 8, !tbaa !145
  %tobool118 = icmp ne i32 (i32, i32, %struct._opvp_point*)* %122, null
  br i1 %tobool118, label %if.then.119, label %if.end.124

if.then.119:                                      ; preds = %if.end.115
  %123 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpBezierPath120 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %123, i32 0, i32 55
  %124 = load i32 (i32, i32, %struct._opvp_point*)*, i32 (i32, i32, %struct._opvp_point*)** %opvpBezierPath120, align 8, !tbaa !145
  %125 = load i32, i32* @printerContext, align 4, !tbaa !5
  %126 = load i32, i32* %npoints, align 4, !tbaa !5
  %sub121 = sub nsw i32 %126, 1
  %127 = load %struct._opvp_point*, %struct._opvp_point** %opvp_p, align 8, !tbaa !1
  %arrayidx122 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %127, i64 1
  %call123 = call i32 %124(i32 %125, i32 %sub121, %struct._opvp_point* %arrayidx122) #7
  store i32 %call123, i32* %r, align 4, !tbaa !5
  br label %if.end.124

if.end.124:                                       ; preds = %if.then.119, %if.end.115
  %128 = load i32, i32* %r, align 4, !tbaa !5
  %cmp125 = icmp ne i32 %128, 0
  br i1 %cmp125, label %if.then.127, label %if.end.128

if.then.127:                                      ; preds = %if.end.124
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.128

if.end.128:                                       ; preds = %if.then.127, %if.end.124
  br label %sw.epilog

sw.default:                                       ; preds = %for.end
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.epilog:                                        ; preds = %for.end, %if.end.128, %if.end.110, %if.end.98
  store i32 1, i32* %npoints, align 4, !tbaa !5
  %129 = load i32*, i32** %cp_num, align 8, !tbaa !1
  %tobool129 = icmp ne i32* %129, null
  br i1 %tobool129, label %if.then.130, label %if.end.131

if.then.130:                                      ; preds = %sw.epilog
  %130 = load i32*, i32** %cp_num, align 8, !tbaa !1
  %131 = bitcast i32* %130 to i8*
  call void @free(i8* %131) #8
  store i32* null, i32** %cp_num, align 8, !tbaa !1
  br label %if.end.131

if.end.131:                                       ; preds = %if.then.130, %sw.epilog
  %132 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %133 = bitcast %struct._fPoint* %132 to i8*
  %call132 = call i8* @realloc(i8* %133, i64 16) #8
  %134 = bitcast i8* %call132 to %struct._fPoint*
  store %struct._fPoint* %134, %struct._fPoint** %points, align 8, !tbaa !1
  %135 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %arrayidx133 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %135, i64 0
  %136 = bitcast %struct._fPoint* %arrayidx133 to i8*
  %137 = bitcast %struct._fPoint* %current to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %136, i8* %137, i64 16, i32 8, i1 false), !tbaa.struct !298
  br label %if.end.134

if.end.134:                                       ; preds = %if.end.131, %if.else
  br label %if.end.135

if.end.135:                                       ; preds = %if.end.134, %if.then.26
  %138 = load i32, i32* %op, align 4, !tbaa !5
  %tobool136 = icmp ne i32 %138, 0
  br i1 %tobool136, label %if.end.138, label %if.then.137

if.then.137:                                      ; preds = %if.end.135
  br label %while.end

if.end.138:                                       ; preds = %if.end.135
  %139 = load i32, i32* %op, align 4, !tbaa !5
  switch i32 %139, label %sw.default.269 [
    i32 1, label %sw.bb.139
    i32 2, label %sw.bb.161
    i32 3, label %sw.bb.184
    i32 4, label %sw.bb.256
  ]

sw.bb.139:                                        ; preds = %if.end.138
  %140 = load i32, i32* %npoints, align 4, !tbaa !5
  store i32 %140, i32* %i, align 4, !tbaa !5
  %141 = load i32, i32* %npoints, align 4, !tbaa !5
  %add = add nsw i32 %141, 1
  store i32 %add, i32* %npoints, align 4, !tbaa !5
  %142 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %143 = bitcast %struct._fPoint* %142 to i8*
  %144 = load i32, i32* %npoints, align 4, !tbaa !5
  %conv140 = sext i32 %144 to i64
  %mul141 = mul i64 16, %conv140
  %call142 = call i8* @realloc(i8* %143, i64 %mul141) #8
  %145 = bitcast i8* %call142 to %struct._fPoint*
  store %struct._fPoint* %145, %struct._fPoint** %points, align 8, !tbaa !1
  %arrayidx143 = getelementptr inbounds [6 x i32], [6 x i32]* %vs, i32 0, i64 0
  %146 = load i32, i32* %arrayidx143, align 4, !tbaa !5
  %conv144 = sitofp i32 %146 to double
  %mul145 = fmul double %conv144, 3.906250e-03
  %x146 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 0
  %147 = load double, double* %x146, align 8, !tbaa !299
  %div147 = fdiv double %mul145, %147
  %148 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom148 = sext i32 %148 to i64
  %149 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %arrayidx149 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %149, i64 %idxprom148
  %x150 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %arrayidx149, i32 0, i32 0
  store double %div147, double* %x150, align 8, !tbaa !293
  %arrayidx151 = getelementptr inbounds [6 x i32], [6 x i32]* %vs, i32 0, i64 1
  %150 = load i32, i32* %arrayidx151, align 4, !tbaa !5
  %conv152 = sitofp i32 %150 to double
  %mul153 = fmul double %conv152, 3.906250e-03
  %y154 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 1
  %151 = load double, double* %y154, align 8, !tbaa !300
  %div155 = fdiv double %mul153, %151
  %152 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom156 = sext i32 %152 to i64
  %153 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %arrayidx157 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %153, i64 %idxprom156
  %y158 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %arrayidx157, i32 0, i32 1
  store double %div155, double* %y158, align 8, !tbaa !291
  %154 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom159 = sext i32 %154 to i64
  %155 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %arrayidx160 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %155, i64 %idxprom159
  %156 = bitcast %struct._fPoint* %current to i8*
  %157 = bitcast %struct._fPoint* %arrayidx160 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %156, i8* %157, i64 16, i32 8, i1 false), !tbaa.struct !298
  %158 = bitcast %struct._fPoint* %start to i8*
  %159 = bitcast %struct._fPoint* %current to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %158, i8* %159, i64 16, i32 8, i1 false), !tbaa.struct !298
  br label %sw.epilog.270

sw.bb.161:                                        ; preds = %if.end.138
  %160 = load i32, i32* %npoints, align 4, !tbaa !5
  store i32 %160, i32* %i, align 4, !tbaa !5
  %161 = load i32, i32* %npoints, align 4, !tbaa !5
  %add162 = add nsw i32 %161, 1
  store i32 %add162, i32* %npoints, align 4, !tbaa !5
  %162 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %163 = bitcast %struct._fPoint* %162 to i8*
  %164 = load i32, i32* %npoints, align 4, !tbaa !5
  %conv163 = sext i32 %164 to i64
  %mul164 = mul i64 16, %conv163
  %call165 = call i8* @realloc(i8* %163, i64 %mul164) #8
  %165 = bitcast i8* %call165 to %struct._fPoint*
  store %struct._fPoint* %165, %struct._fPoint** %points, align 8, !tbaa !1
  %arrayidx166 = getelementptr inbounds [6 x i32], [6 x i32]* %vs, i32 0, i64 0
  %166 = load i32, i32* %arrayidx166, align 4, !tbaa !5
  %conv167 = sitofp i32 %166 to double
  %mul168 = fmul double %conv167, 3.906250e-03
  %x169 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 0
  %167 = load double, double* %x169, align 8, !tbaa !299
  %div170 = fdiv double %mul168, %167
  %168 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom171 = sext i32 %168 to i64
  %169 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %arrayidx172 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %169, i64 %idxprom171
  %x173 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %arrayidx172, i32 0, i32 0
  store double %div170, double* %x173, align 8, !tbaa !293
  %arrayidx174 = getelementptr inbounds [6 x i32], [6 x i32]* %vs, i32 0, i64 1
  %170 = load i32, i32* %arrayidx174, align 4, !tbaa !5
  %conv175 = sitofp i32 %170 to double
  %mul176 = fmul double %conv175, 3.906250e-03
  %y177 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 1
  %171 = load double, double* %y177, align 8, !tbaa !300
  %div178 = fdiv double %mul176, %171
  %172 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom179 = sext i32 %172 to i64
  %173 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %arrayidx180 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %173, i64 %idxprom179
  %y181 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %arrayidx180, i32 0, i32 1
  store double %div178, double* %y181, align 8, !tbaa !291
  %174 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom182 = sext i32 %174 to i64
  %175 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %arrayidx183 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %175, i64 %idxprom182
  %176 = bitcast %struct._fPoint* %current to i8*
  %177 = bitcast %struct._fPoint* %arrayidx183 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %176, i8* %177, i64 16, i32 8, i1 false), !tbaa.struct !298
  br label %sw.epilog.270

sw.bb.184:                                        ; preds = %if.end.138
  %arrayidx185 = getelementptr inbounds [6 x i32], [6 x i32]* %vs, i32 0, i64 0
  %178 = load i32, i32* %arrayidx185, align 4, !tbaa !5
  %conv186 = sitofp i32 %178 to double
  %mul187 = fmul double %conv186, 3.906250e-03
  %x188 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 0
  %179 = load double, double* %x188, align 8, !tbaa !299
  %div189 = fdiv double %mul187, %179
  %x190 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %check_p, i32 0, i32 0
  store double %div189, double* %x190, align 8, !tbaa !293
  %arrayidx191 = getelementptr inbounds [6 x i32], [6 x i32]* %vs, i32 0, i64 1
  %180 = load i32, i32* %arrayidx191, align 4, !tbaa !5
  %conv192 = sitofp i32 %180 to double
  %mul193 = fmul double %conv192, 3.906250e-03
  %y194 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 1
  %181 = load double, double* %y194, align 8, !tbaa !300
  %div195 = fdiv double %mul193, %181
  %y196 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %check_p, i32 0, i32 1
  store double %div195, double* %y196, align 8, !tbaa !291
  %182 = load i32, i32* %npoints, align 4, !tbaa !5
  store i32 %182, i32* %i, align 4, !tbaa !5
  %183 = load i32, i32* %npoints, align 4, !tbaa !5
  %add197 = add nsw i32 %183, 3
  store i32 %add197, i32* %npoints, align 4, !tbaa !5
  %184 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %185 = bitcast %struct._fPoint* %184 to i8*
  %186 = load i32, i32* %npoints, align 4, !tbaa !5
  %conv198 = sext i32 %186 to i64
  %mul199 = mul i64 16, %conv198
  %call200 = call i8* @realloc(i8* %185, i64 %mul199) #8
  %187 = bitcast i8* %call200 to %struct._fPoint*
  store %struct._fPoint* %187, %struct._fPoint** %points, align 8, !tbaa !1
  %arrayidx201 = getelementptr inbounds [6 x i32], [6 x i32]* %vs, i32 0, i64 0
  %188 = load i32, i32* %arrayidx201, align 4, !tbaa !5
  %conv202 = sitofp i32 %188 to double
  %mul203 = fmul double %conv202, 3.906250e-03
  %x204 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 0
  %189 = load double, double* %x204, align 8, !tbaa !299
  %div205 = fdiv double %mul203, %189
  %190 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom206 = sext i32 %190 to i64
  %191 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %arrayidx207 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %191, i64 %idxprom206
  %x208 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %arrayidx207, i32 0, i32 0
  store double %div205, double* %x208, align 8, !tbaa !293
  %arrayidx209 = getelementptr inbounds [6 x i32], [6 x i32]* %vs, i32 0, i64 1
  %192 = load i32, i32* %arrayidx209, align 4, !tbaa !5
  %conv210 = sitofp i32 %192 to double
  %mul211 = fmul double %conv210, 3.906250e-03
  %y212 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 1
  %193 = load double, double* %y212, align 8, !tbaa !300
  %div213 = fdiv double %mul211, %193
  %194 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom214 = sext i32 %194 to i64
  %195 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %arrayidx215 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %195, i64 %idxprom214
  %y216 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %arrayidx215, i32 0, i32 1
  store double %div213, double* %y216, align 8, !tbaa !291
  %arrayidx217 = getelementptr inbounds [6 x i32], [6 x i32]* %vs, i32 0, i64 2
  %196 = load i32, i32* %arrayidx217, align 4, !tbaa !5
  %conv218 = sitofp i32 %196 to double
  %mul219 = fmul double %conv218, 3.906250e-03
  %x220 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 0
  %197 = load double, double* %x220, align 8, !tbaa !299
  %div221 = fdiv double %mul219, %197
  %198 = load i32, i32* %i, align 4, !tbaa !5
  %add222 = add nsw i32 %198, 1
  %idxprom223 = sext i32 %add222 to i64
  %199 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %arrayidx224 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %199, i64 %idxprom223
  %x225 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %arrayidx224, i32 0, i32 0
  store double %div221, double* %x225, align 8, !tbaa !293
  %arrayidx226 = getelementptr inbounds [6 x i32], [6 x i32]* %vs, i32 0, i64 3
  %200 = load i32, i32* %arrayidx226, align 4, !tbaa !5
  %conv227 = sitofp i32 %200 to double
  %mul228 = fmul double %conv227, 3.906250e-03
  %y229 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 1
  %201 = load double, double* %y229, align 8, !tbaa !300
  %div230 = fdiv double %mul228, %201
  %202 = load i32, i32* %i, align 4, !tbaa !5
  %add231 = add nsw i32 %202, 1
  %idxprom232 = sext i32 %add231 to i64
  %203 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %arrayidx233 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %203, i64 %idxprom232
  %y234 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %arrayidx233, i32 0, i32 1
  store double %div230, double* %y234, align 8, !tbaa !291
  %arrayidx235 = getelementptr inbounds [6 x i32], [6 x i32]* %vs, i32 0, i64 4
  %204 = load i32, i32* %arrayidx235, align 4, !tbaa !5
  %conv236 = sitofp i32 %204 to double
  %mul237 = fmul double %conv236, 3.906250e-03
  %x238 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 0
  %205 = load double, double* %x238, align 8, !tbaa !299
  %div239 = fdiv double %mul237, %205
  %206 = load i32, i32* %i, align 4, !tbaa !5
  %add240 = add nsw i32 %206, 2
  %idxprom241 = sext i32 %add240 to i64
  %207 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %arrayidx242 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %207, i64 %idxprom241
  %x243 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %arrayidx242, i32 0, i32 0
  store double %div239, double* %x243, align 8, !tbaa !293
  %arrayidx244 = getelementptr inbounds [6 x i32], [6 x i32]* %vs, i32 0, i64 5
  %208 = load i32, i32* %arrayidx244, align 4, !tbaa !5
  %conv245 = sitofp i32 %208 to double
  %mul246 = fmul double %conv245, 3.906250e-03
  %y247 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 1
  %209 = load double, double* %y247, align 8, !tbaa !300
  %div248 = fdiv double %mul246, %209
  %210 = load i32, i32* %i, align 4, !tbaa !5
  %add249 = add nsw i32 %210, 2
  %idxprom250 = sext i32 %add249 to i64
  %211 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %arrayidx251 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %211, i64 %idxprom250
  %y252 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %arrayidx251, i32 0, i32 1
  store double %div248, double* %y252, align 8, !tbaa !291
  %212 = load i32, i32* %i, align 4, !tbaa !5
  %add253 = add nsw i32 %212, 2
  %idxprom254 = sext i32 %add253 to i64
  %213 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %arrayidx255 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %213, i64 %idxprom254
  %214 = bitcast %struct._fPoint* %current to i8*
  %215 = bitcast %struct._fPoint* %arrayidx255 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %214, i8* %215, i64 16, i32 8, i1 false), !tbaa.struct !298
  br label %sw.epilog.270

sw.bb.256:                                        ; preds = %if.end.138
  %216 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %vec_procs257 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %216, i32 0, i32 44
  %217 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs257, align 8, !tbaa !294
  %closepath = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %217, i32 0, i32 17
  %218 = load i32 (%struct.gx_device_vector_s*, double, double, double, double, i32)*, i32 (%struct.gx_device_vector_s*, double, double, double, double, i32)** %closepath, align 8, !tbaa !301
  %219 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %220 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %arrayidx258 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %220, i64 0
  %x259 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %arrayidx258, i32 0, i32 0
  %221 = load double, double* %x259, align 8, !tbaa !293
  %222 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %arrayidx260 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %222, i64 0
  %y261 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %arrayidx260, i32 0, i32 1
  %223 = load double, double* %y261, align 8, !tbaa !291
  %x262 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %start, i32 0, i32 0
  %224 = load double, double* %x262, align 8, !tbaa !293
  %y263 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %start, i32 0, i32 1
  %225 = load double, double* %y263, align 8, !tbaa !291
  %226 = load i32, i32* %type.addr, align 4, !tbaa !64
  %call264 = call i32 %218(%struct.gx_device_vector_s* %219, double %221, double %223, double %224, double %225, i32 %226) #7
  store i32 %call264, i32* %code, align 4, !tbaa !5
  %227 = load i32, i32* %code, align 4, !tbaa !5
  %tobool265 = icmp ne i32 %227, 0
  br i1 %tobool265, label %if.then.266, label %if.end.267

if.then.266:                                      ; preds = %sw.bb.256
  %228 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %228, i32* %ecode, align 4, !tbaa !5
  br label %if.end.267

if.end.267:                                       ; preds = %if.then.266, %sw.bb.256
  %229 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %arrayidx268 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %229, i64 0
  %230 = bitcast %struct._fPoint* %arrayidx268 to i8*
  %231 = bitcast %struct._fPoint* %start to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %230, i8* %231, i64 16, i32 8, i1 false), !tbaa.struct !298
  %232 = bitcast %struct._fPoint* %current to i8*
  %233 = bitcast %struct._fPoint* %start to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %232, i8* %233, i64 16, i32 8, i1 false), !tbaa.struct !298
  br label %sw.epilog.270

sw.default.269:                                   ; preds = %if.end.138
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

sw.epilog.270:                                    ; preds = %if.end.267, %sw.bb.184, %sw.bb.161, %sw.bb.139
  %234 = load i32, i32* %op, align 4, !tbaa !5
  store i32 %234, i32* %pop, align 4, !tbaa !5
  br label %while.cond

while.end:                                        ; preds = %if.then.137, %while.cond
  %235 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %vec_procs271 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %235, i32 0, i32 44
  %236 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs271, align 8, !tbaa !294
  %endpath = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %236, i32 0, i32 18
  %237 = load i32 (%struct.gx_device_vector_s*, i32)*, i32 (%struct.gx_device_vector_s*, i32)** %endpath, align 8, !tbaa !302
  %238 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %239 = load i32, i32* %type.addr, align 4, !tbaa !64
  %call272 = call i32 %237(%struct.gx_device_vector_s* %238, i32 %239) #7
  store i32 %call272, i32* %code, align 4, !tbaa !5
  %240 = load i32, i32* %code, align 4, !tbaa !5
  %tobool273 = icmp ne i32 %240, 0
  br i1 %tobool273, label %if.then.274, label %if.end.275

if.then.274:                                      ; preds = %while.end
  %241 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %241, i32* %ecode, align 4, !tbaa !5
  br label %if.end.275

if.end.275:                                       ; preds = %if.then.274, %while.end
  %242 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %tobool276 = icmp ne %struct._fPoint* %242, null
  br i1 %tobool276, label %if.then.277, label %if.end.278

if.then.277:                                      ; preds = %if.end.275
  %243 = load %struct._fPoint*, %struct._fPoint** %points, align 8, !tbaa !1
  %244 = bitcast %struct._fPoint* %243 to i8*
  call void @free(i8* %244) #8
  br label %if.end.278

if.end.278:                                       ; preds = %if.then.277, %if.end.275
  %245 = load %struct._opvp_point*, %struct._opvp_point** %opvp_p, align 8, !tbaa !1
  %tobool279 = icmp ne %struct._opvp_point* %245, null
  br i1 %tobool279, label %if.then.280, label %if.end.281

if.then.280:                                      ; preds = %if.end.278
  %246 = load %struct._opvp_point*, %struct._opvp_point** %opvp_p, align 8, !tbaa !1
  %247 = bitcast %struct._opvp_point* %246 to i8*
  call void @free(i8* %247) #8
  br label %if.end.281

if.end.281:                                       ; preds = %if.then.280, %if.end.278
  %248 = load i32*, i32** %cp_num, align 8, !tbaa !1
  %tobool282 = icmp ne i32* %248, null
  br i1 %tobool282, label %if.then.283, label %if.end.284

if.then.283:                                      ; preds = %if.end.281
  %249 = load i32*, i32** %cp_num, align 8, !tbaa !1
  %250 = bitcast i32* %249 to i8*
  call void @free(i8* %250) #8
  br label %if.end.284

if.end.284:                                       ; preds = %if.then.283, %if.end.281
  %251 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %251, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.284, %sw.default.269, %sw.default, %if.then.6, %if.then
  %252 = bitcast i32* %begin to i8*
  call void @llvm.lifetime.end(i64 4, i8* %252) #2
  %253 = bitcast [6 x i32]* %vs to i8*
  call void @llvm.lifetime.end(i64 24, i8* %253) #2
  %254 = bitcast %struct._fPoint* %start to i8*
  call void @llvm.lifetime.end(i64 16, i8* %254) #2
  %255 = bitcast %struct._fPoint* %check_p to i8*
  call void @llvm.lifetime.end(i64 16, i8* %255) #2
  %256 = bitcast %struct._fPoint* %current to i8*
  call void @llvm.lifetime.end(i64 16, i8* %256) #2
  %257 = bitcast %struct._opvp_point** %opvp_p to i8*
  call void @llvm.lifetime.end(i64 8, i8* %257) #2
  %258 = bitcast %struct._fPoint** %points to i8*
  call void @llvm.lifetime.end(i64 8, i8* %258) #2
  %259 = bitcast i32** %cp_num to i8*
  call void @llvm.lifetime.end(i64 8, i8* %259) #2
  %260 = bitcast i32* %npoints to i8*
  call void @llvm.lifetime.end(i64 4, i8* %260) #2
  %261 = bitcast i32* %pop to i8*
  call void @llvm.lifetime.end(i64 4, i8* %261) #2
  %262 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %262) #2
  %263 = bitcast i32* %op to i8*
  call void @llvm.lifetime.end(i64 4, i8* %263) #2
  %264 = bitcast %struct.gs_point_s* %scale to i8*
  call void @llvm.lifetime.end(i64 16, i8* %264) #2
  %265 = bitcast %struct.gs_path_enum_s* %path to i8*
  call void @llvm.lifetime.end(i64 64, i8* %265) #2
  %266 = bitcast %struct.gs_fixed_rect_s* %rect to i8*
  call void @llvm.lifetime.end(i64 16, i8* %266) #2
  %267 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %267) #2
  %268 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %268) #2
  %269 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %269) #2
  %270 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %270) #2
  %271 = load i32, i32* %retval
  ret i32 %271
}

; Function Attrs: nounwind uwtable
define internal i32 @opvp_vector_dorect(%struct.gx_device_vector_s* %vdev, i32 %x0, i32 %y0, i32 %x1, i32 %y1, i32 %type) #0 {
entry:
  %retval = alloca i32, align 4
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %x0.addr = alloca i32, align 4
  %y0.addr = alloca i32, align 4
  %x1.addr = alloca i32, align 4
  %y1.addr = alloca i32, align 4
  %type.addr = alloca i32, align 4
  %pdev = alloca %struct.gx_device_opvp_s*, align 8
  %r = alloca i32, align 4
  %code = alloca i32, align 4
  %ecode = alloca i32, align 4
  %scale = alloca %struct.gs_point_s, align 8
  %rectangles = alloca [1 x %struct._opvp_rectangle], align 16
  %p = alloca %struct._fPoint, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store i32 %x0, i32* %x0.addr, align 4, !tbaa !5
  store i32 %y0, i32* %y0.addr, align 4, !tbaa !5
  store i32 %x1, i32* %x1.addr, align 4, !tbaa !5
  store i32 %y1, i32* %y1.addr, align 4, !tbaa !5
  store i32 %type, i32* %type.addr, align 4, !tbaa !64
  %0 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_vector_s* %1 to %struct.gx_device_opvp_s*
  store %struct.gx_device_opvp_s* %2, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  store i32 -1, i32* %r, align 4, !tbaa !5
  %4 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  store i32 -1, i32* %code, align 4, !tbaa !5
  %5 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %6 = bitcast %struct.gs_point_s* %scale to i8*
  call void @llvm.lifetime.start(i64 16, i8* %6) #2
  %7 = bitcast [1 x %struct._opvp_rectangle]* %rectangles to i8*
  call void @llvm.lifetime.start(i64 16, i8* %7) #2
  %8 = bitcast %struct._fPoint* %p to i8*
  call void @llvm.lifetime.start(i64 16, i8* %8) #2
  %9 = load i32, i32* @beginPage, align 4, !tbaa !5
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %10 = load i32, i32* @inkjet, align 4, !tbaa !5
  %tobool1 = icmp ne i32 %10, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  br i1 false, label %if.then, label %if.end

cond.false:                                       ; preds = %lor.lhs.false
  %11 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %vec_procs = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %11, i32 0, i32 44
  %12 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs, align 8, !tbaa !61
  %beginpage = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %12, i32 0, i32 0
  %13 = load i32 (%struct.gx_device_vector_s*)*, i32 (%struct.gx_device_vector_s*)** %beginpage, align 8, !tbaa !83
  %14 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %15 = bitcast %struct.gx_device_opvp_s* %14 to %struct.gx_device_vector_s*
  %call = call i32 %13(%struct.gx_device_vector_s* %15) #7
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %cond.false, %cond.true
  %16 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %vec_procs3 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %16, i32 0, i32 44
  %17 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs3, align 8, !tbaa !294
  %beginpath = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %17, i32 0, i32 13
  %18 = load i32 (%struct.gx_device_vector_s*, i32)*, i32 (%struct.gx_device_vector_s*, i32)** %beginpath, align 8, !tbaa !297
  %19 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %20 = load i32, i32* %type.addr, align 4, !tbaa !64
  %call4 = call i32 %18(%struct.gx_device_vector_s* %19, i32 %20) #7
  store i32 %call4, i32* %code, align 4, !tbaa !5
  %21 = load i32, i32* %code, align 4, !tbaa !5
  %tobool5 = icmp ne i32 %21, 0
  br i1 %tobool5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end
  %22 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %22, i32* %ecode, align 4, !tbaa !5
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.6, %if.end
  %23 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %scale8 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %23, i32 0, i32 62
  %24 = bitcast %struct.gs_point_s* %scale to i8*
  %25 = bitcast %struct.gs_point_s* %scale8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %24, i8* %25, i64 16, i32 8, i1 false), !tbaa.struct !298
  %26 = load i32, i32* %ecode, align 4, !tbaa !5
  %tobool9 = icmp ne i32 %26, 0
  br i1 %tobool9, label %if.end.87, label %if.then.10

if.then.10:                                       ; preds = %if.end.7
  %27 = load i32, i32* %x0.addr, align 4, !tbaa !5
  %conv = sitofp i32 %27 to double
  %mul = fmul double %conv, 3.906250e-03
  %x = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 0
  %28 = load double, double* %x, align 8, !tbaa !299
  %div = fdiv double %mul, %28
  %x11 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %p, i32 0, i32 0
  store double %div, double* %x11, align 8, !tbaa !293
  %29 = load i32, i32* %y0.addr, align 4, !tbaa !5
  %conv12 = sitofp i32 %29 to double
  %mul13 = fmul double %conv12, 3.906250e-03
  %y = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 1
  %30 = load double, double* %y, align 8, !tbaa !300
  %div14 = fdiv double %mul13, %30
  %y15 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %p, i32 0, i32 1
  store double %div14, double* %y15, align 8, !tbaa !291
  %x16 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %p, i32 0, i32 0
  %31 = load double, double* %x16, align 8, !tbaa !293
  %call17 = call double @floor(double %31) #10
  %conv18 = fptosi double %call17 to i32
  %shl = shl i32 %conv18, 8
  %x19 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %p, i32 0, i32 0
  %32 = load double, double* %x19, align 8, !tbaa !293
  %x20 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %p, i32 0, i32 0
  %33 = load double, double* %x20, align 8, !tbaa !293
  %call21 = call double @floor(double %33) #10
  %sub = fsub double %32, %call21
  %mul22 = fmul double %sub, 2.560000e+02
  %conv23 = fptosi double %mul22 to i32
  %and = and i32 %conv23, 255
  %or = or i32 %shl, %and
  %arrayidx = getelementptr inbounds [1 x %struct._opvp_rectangle], [1 x %struct._opvp_rectangle]* %rectangles, i32 0, i64 0
  %p0 = getelementptr inbounds %struct._opvp_rectangle, %struct._opvp_rectangle* %arrayidx, i32 0, i32 0
  %x24 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %p0, i32 0, i32 0
  store i32 %or, i32* %x24, align 4, !tbaa !303
  %y25 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %p, i32 0, i32 1
  %34 = load double, double* %y25, align 8, !tbaa !291
  %call26 = call double @floor(double %34) #10
  %conv27 = fptosi double %call26 to i32
  %shl28 = shl i32 %conv27, 8
  %y29 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %p, i32 0, i32 1
  %35 = load double, double* %y29, align 8, !tbaa !291
  %y30 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %p, i32 0, i32 1
  %36 = load double, double* %y30, align 8, !tbaa !291
  %call31 = call double @floor(double %36) #10
  %sub32 = fsub double %35, %call31
  %mul33 = fmul double %sub32, 2.560000e+02
  %conv34 = fptosi double %mul33 to i32
  %and35 = and i32 %conv34, 255
  %or36 = or i32 %shl28, %and35
  %arrayidx37 = getelementptr inbounds [1 x %struct._opvp_rectangle], [1 x %struct._opvp_rectangle]* %rectangles, i32 0, i64 0
  %p038 = getelementptr inbounds %struct._opvp_rectangle, %struct._opvp_rectangle* %arrayidx37, i32 0, i32 0
  %y39 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %p038, i32 0, i32 1
  store i32 %or36, i32* %y39, align 4, !tbaa !305
  %37 = load i32, i32* %x1.addr, align 4, !tbaa !5
  %conv40 = sitofp i32 %37 to double
  %mul41 = fmul double %conv40, 3.906250e-03
  %x42 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 0
  %38 = load double, double* %x42, align 8, !tbaa !299
  %div43 = fdiv double %mul41, %38
  %x44 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %p, i32 0, i32 0
  store double %div43, double* %x44, align 8, !tbaa !293
  %39 = load i32, i32* %y1.addr, align 4, !tbaa !5
  %conv45 = sitofp i32 %39 to double
  %mul46 = fmul double %conv45, 3.906250e-03
  %y47 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %scale, i32 0, i32 1
  %40 = load double, double* %y47, align 8, !tbaa !300
  %div48 = fdiv double %mul46, %40
  %y49 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %p, i32 0, i32 1
  store double %div48, double* %y49, align 8, !tbaa !291
  %x50 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %p, i32 0, i32 0
  %41 = load double, double* %x50, align 8, !tbaa !293
  %call51 = call double @floor(double %41) #10
  %conv52 = fptosi double %call51 to i32
  %shl53 = shl i32 %conv52, 8
  %x54 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %p, i32 0, i32 0
  %42 = load double, double* %x54, align 8, !tbaa !293
  %x55 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %p, i32 0, i32 0
  %43 = load double, double* %x55, align 8, !tbaa !293
  %call56 = call double @floor(double %43) #10
  %sub57 = fsub double %42, %call56
  %mul58 = fmul double %sub57, 2.560000e+02
  %conv59 = fptosi double %mul58 to i32
  %and60 = and i32 %conv59, 255
  %or61 = or i32 %shl53, %and60
  %arrayidx62 = getelementptr inbounds [1 x %struct._opvp_rectangle], [1 x %struct._opvp_rectangle]* %rectangles, i32 0, i64 0
  %p1 = getelementptr inbounds %struct._opvp_rectangle, %struct._opvp_rectangle* %arrayidx62, i32 0, i32 1
  %x63 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %p1, i32 0, i32 0
  store i32 %or61, i32* %x63, align 4, !tbaa !306
  %y64 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %p, i32 0, i32 1
  %44 = load double, double* %y64, align 8, !tbaa !291
  %call65 = call double @floor(double %44) #10
  %conv66 = fptosi double %call65 to i32
  %shl67 = shl i32 %conv66, 8
  %y68 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %p, i32 0, i32 1
  %45 = load double, double* %y68, align 8, !tbaa !291
  %y69 = getelementptr inbounds %struct._fPoint, %struct._fPoint* %p, i32 0, i32 1
  %46 = load double, double* %y69, align 8, !tbaa !291
  %call70 = call double @floor(double %46) #10
  %sub71 = fsub double %45, %call70
  %mul72 = fmul double %sub71, 2.560000e+02
  %conv73 = fptosi double %mul72 to i32
  %and74 = and i32 %conv73, 255
  %or75 = or i32 %shl67, %and74
  %arrayidx76 = getelementptr inbounds [1 x %struct._opvp_rectangle], [1 x %struct._opvp_rectangle]* %rectangles, i32 0, i64 0
  %p177 = getelementptr inbounds %struct._opvp_rectangle, %struct._opvp_rectangle* %arrayidx76, i32 0, i32 1
  %y78 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %p177, i32 0, i32 1
  store i32 %or75, i32* %y78, align 4, !tbaa !307
  %47 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpRectanglePath = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %47, i32 0, i32 53
  %48 = load i32 (i32, i32, %struct._opvp_rectangle*)*, i32 (i32, i32, %struct._opvp_rectangle*)** %opvpRectanglePath, align 8, !tbaa !241
  %tobool79 = icmp ne i32 (i32, i32, %struct._opvp_rectangle*)* %48, null
  br i1 %tobool79, label %if.then.80, label %if.end.83

if.then.80:                                       ; preds = %if.then.10
  %49 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpRectanglePath81 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %49, i32 0, i32 53
  %50 = load i32 (i32, i32, %struct._opvp_rectangle*)*, i32 (i32, i32, %struct._opvp_rectangle*)** %opvpRectanglePath81, align 8, !tbaa !241
  %51 = load i32, i32* @printerContext, align 4, !tbaa !5
  %arraydecay = getelementptr inbounds [1 x %struct._opvp_rectangle], [1 x %struct._opvp_rectangle]* %rectangles, i32 0, i32 0
  %call82 = call i32 %50(i32 %51, i32 1, %struct._opvp_rectangle* %arraydecay) #7
  store i32 %call82, i32* %r, align 4, !tbaa !5
  br label %if.end.83

if.end.83:                                        ; preds = %if.then.80, %if.then.10
  %52 = load i32, i32* %r, align 4, !tbaa !5
  %cmp = icmp ne i32 %52, 0
  br i1 %cmp, label %if.then.85, label %if.end.86

if.then.85:                                       ; preds = %if.end.83
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.86

if.end.86:                                        ; preds = %if.then.85, %if.end.83
  br label %if.end.87

if.end.87:                                        ; preds = %if.end.86, %if.end.7
  %53 = load i32, i32* %ecode, align 4, !tbaa !5
  %tobool88 = icmp ne i32 %53, 0
  br i1 %tobool88, label %if.end.95, label %if.then.89

if.then.89:                                       ; preds = %if.end.87
  %54 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %vec_procs90 = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %54, i32 0, i32 44
  %55 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs90, align 8, !tbaa !294
  %endpath = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %55, i32 0, i32 18
  %56 = load i32 (%struct.gx_device_vector_s*, i32)*, i32 (%struct.gx_device_vector_s*, i32)** %endpath, align 8, !tbaa !302
  %57 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %58 = load i32, i32* %type.addr, align 4, !tbaa !64
  %call91 = call i32 %56(%struct.gx_device_vector_s* %57, i32 %58) #7
  store i32 %call91, i32* %code, align 4, !tbaa !5
  %59 = load i32, i32* %code, align 4, !tbaa !5
  %tobool92 = icmp ne i32 %59, 0
  br i1 %tobool92, label %if.then.93, label %if.end.94

if.then.93:                                       ; preds = %if.then.89
  %60 = load i32, i32* %code, align 4, !tbaa !5
  store i32 %60, i32* %ecode, align 4, !tbaa !5
  br label %if.end.94

if.end.94:                                        ; preds = %if.then.93, %if.then.89
  br label %if.end.95

if.end.95:                                        ; preds = %if.end.94, %if.end.87
  %61 = load i32, i32* %ecode, align 4, !tbaa !5
  %tobool96 = icmp ne i32 %61, 0
  br i1 %tobool96, label %if.then.97, label %if.end.99

if.then.97:                                       ; preds = %if.end.95
  %62 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %63 = load i32, i32* %x0.addr, align 4, !tbaa !5
  %64 = load i32, i32* %y0.addr, align 4, !tbaa !5
  %65 = load i32, i32* %x1.addr, align 4, !tbaa !5
  %66 = load i32, i32* %y1.addr, align 4, !tbaa !5
  %67 = load i32, i32* %type.addr, align 4, !tbaa !64
  %call98 = call i32 @gdev_vector_dorect(%struct.gx_device_vector_s* %62, i32 %63, i32 %64, i32 %65, i32 %66, i32 %67) #7
  store i32 %call98, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.99:                                        ; preds = %if.end.95
  %68 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %68, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.99, %if.then.97, %if.then
  %69 = bitcast %struct._fPoint* %p to i8*
  call void @llvm.lifetime.end(i64 16, i8* %69) #2
  %70 = bitcast [1 x %struct._opvp_rectangle]* %rectangles to i8*
  call void @llvm.lifetime.end(i64 16, i8* %70) #2
  %71 = bitcast %struct.gs_point_s* %scale to i8*
  call void @llvm.lifetime.end(i64 16, i8* %71) #2
  %72 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %72) #2
  %73 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %73) #2
  %74 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %74) #2
  %75 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %75) #2
  %76 = load i32, i32* %retval
  ret i32 %76
}

; Function Attrs: nounwind uwtable
define internal i32 @opvp_beginpath(%struct.gx_device_vector_s* %vdev, i32 %type) #0 {
entry:
  %retval = alloca i32, align 4
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %type.addr = alloca i32, align 4
  %pdev = alloca %struct.gx_device_opvp_s*, align 8
  %r = alloca i32, align 4
  %ecode = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store i32 %type, i32* %type.addr, align 4, !tbaa !64
  %0 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_vector_s* %1 to %struct.gx_device_opvp_s*
  store %struct.gx_device_opvp_s* %2, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  store i32 -1, i32* %r, align 4, !tbaa !5
  %4 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %5 = load i32, i32* @beginPage, align 4, !tbaa !5
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %6 = load i32, i32* @inkjet, align 4, !tbaa !5
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  br i1 false, label %if.then, label %if.end

cond.false:                                       ; preds = %lor.lhs.false
  %7 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %vec_procs = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %7, i32 0, i32 44
  %8 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs, align 8, !tbaa !61
  %beginpage = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %8, i32 0, i32 0
  %9 = load i32 (%struct.gx_device_vector_s*)*, i32 (%struct.gx_device_vector_s*)** %beginpage, align 8, !tbaa !83
  %10 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %11 = bitcast %struct.gx_device_opvp_s* %10 to %struct.gx_device_vector_s*
  %call = call i32 %9(%struct.gx_device_vector_s* %11) #7
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %cond.false, %cond.true
  %12 = load i32, i32* %type.addr, align 4, !tbaa !64
  %and = and i32 %12, 4
  %tobool3 = icmp ne i32 %and, 0
  br i1 %tobool3, label %if.then.4, label %if.end.10

if.then.4:                                        ; preds = %if.end
  %13 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpResetClipPath = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %13, i32 0, i32 49
  %14 = load i32 (i32)*, i32 (i32)** %opvpResetClipPath, align 8, !tbaa !235
  %tobool5 = icmp ne i32 (i32)* %14, null
  br i1 %tobool5, label %if.then.6, label %if.end.9

if.then.6:                                        ; preds = %if.then.4
  %15 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpResetClipPath7 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %15, i32 0, i32 49
  %16 = load i32 (i32)*, i32 (i32)** %opvpResetClipPath7, align 8, !tbaa !235
  %17 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call8 = call i32 %16(i32 %17) #7
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.6, %if.then.4
  br label %if.end.10

if.end.10:                                        ; preds = %if.end.9, %if.end
  %18 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpNewPath = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %18, i32 0, i32 43
  %19 = load i32 (i32)*, i32 (i32)** %opvpNewPath, align 8, !tbaa !141
  %tobool11 = icmp ne i32 (i32)* %19, null
  br i1 %tobool11, label %if.then.12, label %if.end.15

if.then.12:                                       ; preds = %if.end.10
  %20 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpNewPath13 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %20, i32 0, i32 43
  %21 = load i32 (i32)*, i32 (i32)** %opvpNewPath13, align 8, !tbaa !141
  %22 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call14 = call i32 %21(i32 %22) #7
  store i32 %call14, i32* %r, align 4, !tbaa !5
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.12, %if.end.10
  %23 = load i32, i32* %r, align 4, !tbaa !5
  %cmp = icmp ne i32 %23, 0
  br i1 %cmp, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.end.15
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.16, %if.end.15
  %24 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %24, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.17, %if.then
  %25 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %25) #2
  %26 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %26) #2
  %27 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %27) #2
  %28 = load i32, i32* %retval
  ret i32 %28
}

; Function Attrs: nounwind uwtable
define internal i32 @opvp_moveto(%struct.gx_device_vector_s* %vdev, double %x0, double %y0, double %x1, double %y1, i32 %type) #0 {
entry:
  %retval = alloca i32, align 4
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %x0.addr = alloca double, align 8
  %y0.addr = alloca double, align 8
  %x1.addr = alloca double, align 8
  %y1.addr = alloca double, align 8
  %type.addr = alloca i32, align 4
  %pdev = alloca %struct.gx_device_opvp_s*, align 8
  %r = alloca i32, align 4
  %ecode = alloca i32, align 4
  %p = alloca %struct._opvp_point, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store double %x0, double* %x0.addr, align 8, !tbaa !286
  store double %y0, double* %y0.addr, align 8, !tbaa !286
  store double %x1, double* %x1.addr, align 8, !tbaa !286
  store double %y1, double* %y1.addr, align 8, !tbaa !286
  store i32 %type, i32* %type.addr, align 4, !tbaa !64
  %0 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_vector_s* %1 to %struct.gx_device_opvp_s*
  store %struct.gx_device_opvp_s* %2, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  store i32 -1, i32* %r, align 4, !tbaa !5
  %4 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %5 = bitcast %struct._opvp_point* %p to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #2
  %6 = load i32, i32* @beginPage, align 4, !tbaa !5
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %7 = load i32, i32* @inkjet, align 4, !tbaa !5
  %tobool1 = icmp ne i32 %7, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  br i1 false, label %if.then, label %if.end

cond.false:                                       ; preds = %lor.lhs.false
  %8 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %vec_procs = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %8, i32 0, i32 44
  %9 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs, align 8, !tbaa !61
  %beginpage = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %9, i32 0, i32 0
  %10 = load i32 (%struct.gx_device_vector_s*)*, i32 (%struct.gx_device_vector_s*)** %beginpage, align 8, !tbaa !83
  %11 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %12 = bitcast %struct.gx_device_opvp_s* %11 to %struct.gx_device_vector_s*
  %call = call i32 %10(%struct.gx_device_vector_s* %12) #7
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %cond.false, %cond.true
  %13 = load double, double* %x1.addr, align 8, !tbaa !286
  %call3 = call double @floor(double %13) #10
  %conv = fptosi double %call3 to i32
  %shl = shl i32 %conv, 8
  %14 = load double, double* %x1.addr, align 8, !tbaa !286
  %15 = load double, double* %x1.addr, align 8, !tbaa !286
  %call4 = call double @floor(double %15) #10
  %sub = fsub double %14, %call4
  %mul = fmul double %sub, 2.560000e+02
  %conv5 = fptosi double %mul to i32
  %and = and i32 %conv5, 255
  %or = or i32 %shl, %and
  %x = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %p, i32 0, i32 0
  store i32 %or, i32* %x, align 4, !tbaa !92
  %16 = load double, double* %y1.addr, align 8, !tbaa !286
  %call6 = call double @floor(double %16) #10
  %conv7 = fptosi double %call6 to i32
  %shl8 = shl i32 %conv7, 8
  %17 = load double, double* %y1.addr, align 8, !tbaa !286
  %18 = load double, double* %y1.addr, align 8, !tbaa !286
  %call9 = call double @floor(double %18) #10
  %sub10 = fsub double %17, %call9
  %mul11 = fmul double %sub10, 2.560000e+02
  %conv12 = fptosi double %mul11 to i32
  %and13 = and i32 %conv12, 255
  %or14 = or i32 %shl8, %and13
  %y = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %p, i32 0, i32 1
  store i32 %or14, i32* %y, align 4, !tbaa !94
  %19 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetCurrentPoint = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %19, i32 0, i32 50
  %20 = load i32 (i32, i32, i32)*, i32 (i32, i32, i32)** %opvpSetCurrentPoint, align 8, !tbaa !95
  %tobool15 = icmp ne i32 (i32, i32, i32)* %20, null
  br i1 %tobool15, label %if.then.16, label %if.end.21

if.then.16:                                       ; preds = %if.end
  %21 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetCurrentPoint17 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %21, i32 0, i32 50
  %22 = load i32 (i32, i32, i32)*, i32 (i32, i32, i32)** %opvpSetCurrentPoint17, align 8, !tbaa !95
  %23 = load i32, i32* @printerContext, align 4, !tbaa !5
  %x18 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %p, i32 0, i32 0
  %24 = load i32, i32* %x18, align 4, !tbaa !92
  %y19 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %p, i32 0, i32 1
  %25 = load i32, i32* %y19, align 4, !tbaa !94
  %call20 = call i32 %22(i32 %23, i32 %24, i32 %25) #7
  store i32 %call20, i32* %r, align 4, !tbaa !5
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.16, %if.end
  %26 = load i32, i32* %r, align 4, !tbaa !5
  %cmp = icmp ne i32 %26, 0
  br i1 %cmp, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %if.end.21
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.24

if.end.24:                                        ; preds = %if.then.23, %if.end.21
  %27 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %27, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.24, %if.then
  %28 = bitcast %struct._opvp_point* %p to i8*
  call void @llvm.lifetime.end(i64 8, i8* %28) #2
  %29 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %29) #2
  %30 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %30) #2
  %31 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %31) #2
  %32 = load i32, i32* %retval
  ret i32 %32
}

; Function Attrs: nounwind uwtable
define internal i32 @opvp_lineto(%struct.gx_device_vector_s* %vdev, double %x0, double %y0, double %x1, double %y1, i32 %type) #0 {
entry:
  %retval = alloca i32, align 4
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %x0.addr = alloca double, align 8
  %y0.addr = alloca double, align 8
  %x1.addr = alloca double, align 8
  %y1.addr = alloca double, align 8
  %type.addr = alloca i32, align 4
  %pdev = alloca %struct.gx_device_opvp_s*, align 8
  %r = alloca i32, align 4
  %ecode = alloca i32, align 4
  %points = alloca [1 x %struct._opvp_point], align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store double %x0, double* %x0.addr, align 8, !tbaa !286
  store double %y0, double* %y0.addr, align 8, !tbaa !286
  store double %x1, double* %x1.addr, align 8, !tbaa !286
  store double %y1, double* %y1.addr, align 8, !tbaa !286
  store i32 %type, i32* %type.addr, align 4, !tbaa !64
  %0 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_vector_s* %1 to %struct.gx_device_opvp_s*
  store %struct.gx_device_opvp_s* %2, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  store i32 -1, i32* %r, align 4, !tbaa !5
  %4 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %5 = bitcast [1 x %struct._opvp_point]* %points to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #2
  %6 = load i32, i32* @beginPage, align 4, !tbaa !5
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %7 = load i32, i32* @inkjet, align 4, !tbaa !5
  %tobool1 = icmp ne i32 %7, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  br i1 false, label %if.then, label %if.end

cond.false:                                       ; preds = %lor.lhs.false
  %8 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %vec_procs = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %8, i32 0, i32 44
  %9 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs, align 8, !tbaa !61
  %beginpage = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %9, i32 0, i32 0
  %10 = load i32 (%struct.gx_device_vector_s*)*, i32 (%struct.gx_device_vector_s*)** %beginpage, align 8, !tbaa !83
  %11 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %12 = bitcast %struct.gx_device_opvp_s* %11 to %struct.gx_device_vector_s*
  %call = call i32 %10(%struct.gx_device_vector_s* %12) #7
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %cond.false, %cond.true
  %13 = load double, double* %x1.addr, align 8, !tbaa !286
  %call3 = call double @floor(double %13) #10
  %conv = fptosi double %call3 to i32
  %shl = shl i32 %conv, 8
  %14 = load double, double* %x1.addr, align 8, !tbaa !286
  %15 = load double, double* %x1.addr, align 8, !tbaa !286
  %call4 = call double @floor(double %15) #10
  %sub = fsub double %14, %call4
  %mul = fmul double %sub, 2.560000e+02
  %conv5 = fptosi double %mul to i32
  %and = and i32 %conv5, 255
  %or = or i32 %shl, %and
  %arrayidx = getelementptr inbounds [1 x %struct._opvp_point], [1 x %struct._opvp_point]* %points, i32 0, i64 0
  %x = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %arrayidx, i32 0, i32 0
  store i32 %or, i32* %x, align 4, !tbaa !92
  %16 = load double, double* %y1.addr, align 8, !tbaa !286
  %call6 = call double @floor(double %16) #10
  %conv7 = fptosi double %call6 to i32
  %shl8 = shl i32 %conv7, 8
  %17 = load double, double* %y1.addr, align 8, !tbaa !286
  %18 = load double, double* %y1.addr, align 8, !tbaa !286
  %call9 = call double @floor(double %18) #10
  %sub10 = fsub double %17, %call9
  %mul11 = fmul double %sub10, 2.560000e+02
  %conv12 = fptosi double %mul11 to i32
  %and13 = and i32 %conv12, 255
  %or14 = or i32 %shl8, %and13
  %arrayidx15 = getelementptr inbounds [1 x %struct._opvp_point], [1 x %struct._opvp_point]* %points, i32 0, i64 0
  %y = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %arrayidx15, i32 0, i32 1
  store i32 %or14, i32* %y, align 4, !tbaa !94
  %19 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpLinePath = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %19, i32 0, i32 51
  %20 = load i32 (i32, i32, i32, %struct._opvp_point*)*, i32 (i32, i32, i32, %struct._opvp_point*)** %opvpLinePath, align 8, !tbaa !144
  %tobool16 = icmp ne i32 (i32, i32, i32, %struct._opvp_point*)* %20, null
  br i1 %tobool16, label %if.then.17, label %if.end.20

if.then.17:                                       ; preds = %if.end
  %21 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpLinePath18 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %21, i32 0, i32 51
  %22 = load i32 (i32, i32, i32, %struct._opvp_point*)*, i32 (i32, i32, i32, %struct._opvp_point*)** %opvpLinePath18, align 8, !tbaa !144
  %23 = load i32, i32* @printerContext, align 4, !tbaa !5
  %arraydecay = getelementptr inbounds [1 x %struct._opvp_point], [1 x %struct._opvp_point]* %points, i32 0, i32 0
  %call19 = call i32 %22(i32 %23, i32 1, i32 1, %struct._opvp_point* %arraydecay) #7
  store i32 %call19, i32* %r, align 4, !tbaa !5
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.17, %if.end
  %24 = load i32, i32* %r, align 4, !tbaa !5
  %cmp = icmp ne i32 %24, 0
  br i1 %cmp, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %if.end.20
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.22, %if.end.20
  %25 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %25, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.23, %if.then
  %26 = bitcast [1 x %struct._opvp_point]* %points to i8*
  call void @llvm.lifetime.end(i64 8, i8* %26) #2
  %27 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %27) #2
  %28 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %28) #2
  %29 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %29) #2
  %30 = load i32, i32* %retval
  ret i32 %30
}

; Function Attrs: nounwind uwtable
define internal i32 @opvp_curveto(%struct.gx_device_vector_s* %vdev, double %x0, double %y0, double %x1, double %y1, double %x2, double %y2, double %x3, double %y3, i32 %type) #0 {
entry:
  %retval = alloca i32, align 4
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %x0.addr = alloca double, align 8
  %y0.addr = alloca double, align 8
  %x1.addr = alloca double, align 8
  %y1.addr = alloca double, align 8
  %x2.addr = alloca double, align 8
  %y2.addr = alloca double, align 8
  %x3.addr = alloca double, align 8
  %y3.addr = alloca double, align 8
  %type.addr = alloca i32, align 4
  %pdev = alloca %struct.gx_device_opvp_s*, align 8
  %r = alloca i32, align 4
  %ecode = alloca i32, align 4
  %npoints = alloca [2 x i32], align 4
  %points = alloca [4 x %struct._opvp_point], align 16
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store double %x0, double* %x0.addr, align 8, !tbaa !286
  store double %y0, double* %y0.addr, align 8, !tbaa !286
  store double %x1, double* %x1.addr, align 8, !tbaa !286
  store double %y1, double* %y1.addr, align 8, !tbaa !286
  store double %x2, double* %x2.addr, align 8, !tbaa !286
  store double %y2, double* %y2.addr, align 8, !tbaa !286
  store double %x3, double* %x3.addr, align 8, !tbaa !286
  store double %y3, double* %y3.addr, align 8, !tbaa !286
  store i32 %type, i32* %type.addr, align 4, !tbaa !64
  %0 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_vector_s* %1 to %struct.gx_device_opvp_s*
  store %struct.gx_device_opvp_s* %2, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  store i32 -1, i32* %r, align 4, !tbaa !5
  %4 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %5 = bitcast [2 x i32]* %npoints to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #2
  %6 = bitcast [4 x %struct._opvp_point]* %points to i8*
  call void @llvm.lifetime.start(i64 32, i8* %6) #2
  %7 = load i32, i32* @beginPage, align 4, !tbaa !5
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %8 = load i32, i32* @inkjet, align 4, !tbaa !5
  %tobool1 = icmp ne i32 %8, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  br i1 false, label %if.then, label %if.end

cond.false:                                       ; preds = %lor.lhs.false
  %9 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %vec_procs = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %9, i32 0, i32 44
  %10 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs, align 8, !tbaa !61
  %beginpage = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %10, i32 0, i32 0
  %11 = load i32 (%struct.gx_device_vector_s*)*, i32 (%struct.gx_device_vector_s*)** %beginpage, align 8, !tbaa !83
  %12 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %13 = bitcast %struct.gx_device_opvp_s* %12 to %struct.gx_device_vector_s*
  %call = call i32 %11(%struct.gx_device_vector_s* %13) #7
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %cond.false, %cond.true
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %npoints, i32 0, i64 0
  store i32 4, i32* %arrayidx, align 4, !tbaa !5
  %arrayidx3 = getelementptr inbounds [2 x i32], [2 x i32]* %npoints, i32 0, i64 1
  store i32 0, i32* %arrayidx3, align 4, !tbaa !5
  %14 = load double, double* %x0.addr, align 8, !tbaa !286
  %call4 = call double @floor(double %14) #10
  %conv = fptosi double %call4 to i32
  %shl = shl i32 %conv, 8
  %15 = load double, double* %x0.addr, align 8, !tbaa !286
  %16 = load double, double* %x0.addr, align 8, !tbaa !286
  %call5 = call double @floor(double %16) #10
  %sub = fsub double %15, %call5
  %mul = fmul double %sub, 2.560000e+02
  %conv6 = fptosi double %mul to i32
  %and = and i32 %conv6, 255
  %or = or i32 %shl, %and
  %arrayidx7 = getelementptr inbounds [4 x %struct._opvp_point], [4 x %struct._opvp_point]* %points, i32 0, i64 0
  %x = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %arrayidx7, i32 0, i32 0
  store i32 %or, i32* %x, align 4, !tbaa !92
  %17 = load double, double* %y0.addr, align 8, !tbaa !286
  %call8 = call double @floor(double %17) #10
  %conv9 = fptosi double %call8 to i32
  %shl10 = shl i32 %conv9, 8
  %18 = load double, double* %y0.addr, align 8, !tbaa !286
  %19 = load double, double* %y0.addr, align 8, !tbaa !286
  %call11 = call double @floor(double %19) #10
  %sub12 = fsub double %18, %call11
  %mul13 = fmul double %sub12, 2.560000e+02
  %conv14 = fptosi double %mul13 to i32
  %and15 = and i32 %conv14, 255
  %or16 = or i32 %shl10, %and15
  %arrayidx17 = getelementptr inbounds [4 x %struct._opvp_point], [4 x %struct._opvp_point]* %points, i32 0, i64 0
  %y = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %arrayidx17, i32 0, i32 1
  store i32 %or16, i32* %y, align 4, !tbaa !94
  %20 = load double, double* %x1.addr, align 8, !tbaa !286
  %call18 = call double @floor(double %20) #10
  %conv19 = fptosi double %call18 to i32
  %shl20 = shl i32 %conv19, 8
  %21 = load double, double* %x1.addr, align 8, !tbaa !286
  %22 = load double, double* %x1.addr, align 8, !tbaa !286
  %call21 = call double @floor(double %22) #10
  %sub22 = fsub double %21, %call21
  %mul23 = fmul double %sub22, 2.560000e+02
  %conv24 = fptosi double %mul23 to i32
  %and25 = and i32 %conv24, 255
  %or26 = or i32 %shl20, %and25
  %arrayidx27 = getelementptr inbounds [4 x %struct._opvp_point], [4 x %struct._opvp_point]* %points, i32 0, i64 1
  %x28 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %arrayidx27, i32 0, i32 0
  store i32 %or26, i32* %x28, align 4, !tbaa !92
  %23 = load double, double* %y1.addr, align 8, !tbaa !286
  %call29 = call double @floor(double %23) #10
  %conv30 = fptosi double %call29 to i32
  %shl31 = shl i32 %conv30, 8
  %24 = load double, double* %y1.addr, align 8, !tbaa !286
  %25 = load double, double* %y1.addr, align 8, !tbaa !286
  %call32 = call double @floor(double %25) #10
  %sub33 = fsub double %24, %call32
  %mul34 = fmul double %sub33, 2.560000e+02
  %conv35 = fptosi double %mul34 to i32
  %and36 = and i32 %conv35, 255
  %or37 = or i32 %shl31, %and36
  %arrayidx38 = getelementptr inbounds [4 x %struct._opvp_point], [4 x %struct._opvp_point]* %points, i32 0, i64 1
  %y39 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %arrayidx38, i32 0, i32 1
  store i32 %or37, i32* %y39, align 4, !tbaa !94
  %26 = load double, double* %x2.addr, align 8, !tbaa !286
  %call40 = call double @floor(double %26) #10
  %conv41 = fptosi double %call40 to i32
  %shl42 = shl i32 %conv41, 8
  %27 = load double, double* %x2.addr, align 8, !tbaa !286
  %28 = load double, double* %x2.addr, align 8, !tbaa !286
  %call43 = call double @floor(double %28) #10
  %sub44 = fsub double %27, %call43
  %mul45 = fmul double %sub44, 2.560000e+02
  %conv46 = fptosi double %mul45 to i32
  %and47 = and i32 %conv46, 255
  %or48 = or i32 %shl42, %and47
  %arrayidx49 = getelementptr inbounds [4 x %struct._opvp_point], [4 x %struct._opvp_point]* %points, i32 0, i64 2
  %x50 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %arrayidx49, i32 0, i32 0
  store i32 %or48, i32* %x50, align 4, !tbaa !92
  %29 = load double, double* %y2.addr, align 8, !tbaa !286
  %call51 = call double @floor(double %29) #10
  %conv52 = fptosi double %call51 to i32
  %shl53 = shl i32 %conv52, 8
  %30 = load double, double* %y2.addr, align 8, !tbaa !286
  %31 = load double, double* %y2.addr, align 8, !tbaa !286
  %call54 = call double @floor(double %31) #10
  %sub55 = fsub double %30, %call54
  %mul56 = fmul double %sub55, 2.560000e+02
  %conv57 = fptosi double %mul56 to i32
  %and58 = and i32 %conv57, 255
  %or59 = or i32 %shl53, %and58
  %arrayidx60 = getelementptr inbounds [4 x %struct._opvp_point], [4 x %struct._opvp_point]* %points, i32 0, i64 2
  %y61 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %arrayidx60, i32 0, i32 1
  store i32 %or59, i32* %y61, align 4, !tbaa !94
  %32 = load double, double* %x3.addr, align 8, !tbaa !286
  %call62 = call double @floor(double %32) #10
  %conv63 = fptosi double %call62 to i32
  %shl64 = shl i32 %conv63, 8
  %33 = load double, double* %x3.addr, align 8, !tbaa !286
  %34 = load double, double* %x3.addr, align 8, !tbaa !286
  %call65 = call double @floor(double %34) #10
  %sub66 = fsub double %33, %call65
  %mul67 = fmul double %sub66, 2.560000e+02
  %conv68 = fptosi double %mul67 to i32
  %and69 = and i32 %conv68, 255
  %or70 = or i32 %shl64, %and69
  %arrayidx71 = getelementptr inbounds [4 x %struct._opvp_point], [4 x %struct._opvp_point]* %points, i32 0, i64 3
  %x72 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %arrayidx71, i32 0, i32 0
  store i32 %or70, i32* %x72, align 4, !tbaa !92
  %35 = load double, double* %y3.addr, align 8, !tbaa !286
  %call73 = call double @floor(double %35) #10
  %conv74 = fptosi double %call73 to i32
  %shl75 = shl i32 %conv74, 8
  %36 = load double, double* %y3.addr, align 8, !tbaa !286
  %37 = load double, double* %y3.addr, align 8, !tbaa !286
  %call76 = call double @floor(double %37) #10
  %sub77 = fsub double %36, %call76
  %mul78 = fmul double %sub77, 2.560000e+02
  %conv79 = fptosi double %mul78 to i32
  %and80 = and i32 %conv79, 255
  %or81 = or i32 %shl75, %and80
  %arrayidx82 = getelementptr inbounds [4 x %struct._opvp_point], [4 x %struct._opvp_point]* %points, i32 0, i64 3
  %y83 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %arrayidx82, i32 0, i32 1
  store i32 %or81, i32* %y83, align 4, !tbaa !94
  %38 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpBezierPath = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %38, i32 0, i32 55
  %39 = load i32 (i32, i32, %struct._opvp_point*)*, i32 (i32, i32, %struct._opvp_point*)** %opvpBezierPath, align 8, !tbaa !145
  %tobool84 = icmp ne i32 (i32, i32, %struct._opvp_point*)* %39, null
  br i1 %tobool84, label %if.then.85, label %if.end.89

if.then.85:                                       ; preds = %if.end
  %40 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpBezierPath86 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %40, i32 0, i32 55
  %41 = load i32 (i32, i32, %struct._opvp_point*)*, i32 (i32, i32, %struct._opvp_point*)** %opvpBezierPath86, align 8, !tbaa !145
  %42 = load i32, i32* @printerContext, align 4, !tbaa !5
  %arrayidx87 = getelementptr inbounds [4 x %struct._opvp_point], [4 x %struct._opvp_point]* %points, i32 0, i64 1
  %call88 = call i32 %41(i32 %42, i32 3, %struct._opvp_point* %arrayidx87) #7
  store i32 %call88, i32* %r, align 4, !tbaa !5
  br label %if.end.89

if.end.89:                                        ; preds = %if.then.85, %if.end
  %43 = load i32, i32* %r, align 4, !tbaa !5
  %cmp = icmp ne i32 %43, 0
  br i1 %cmp, label %if.then.91, label %if.end.92

if.then.91:                                       ; preds = %if.end.89
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.92

if.end.92:                                        ; preds = %if.then.91, %if.end.89
  %44 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %44, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.92, %if.then
  %45 = bitcast [4 x %struct._opvp_point]* %points to i8*
  call void @llvm.lifetime.end(i64 32, i8* %45) #2
  %46 = bitcast [2 x i32]* %npoints to i8*
  call void @llvm.lifetime.end(i64 8, i8* %46) #2
  %47 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %47) #2
  %48 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %48) #2
  %49 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %49) #2
  %50 = load i32, i32* %retval
  ret i32 %50
}

; Function Attrs: nounwind uwtable
define internal i32 @opvp_closepath(%struct.gx_device_vector_s* %vdev, double %x, double %y, double %x_start, double %y_start, i32 %type) #0 {
entry:
  %retval = alloca i32, align 4
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %x.addr = alloca double, align 8
  %y.addr = alloca double, align 8
  %x_start.addr = alloca double, align 8
  %y_start.addr = alloca double, align 8
  %type.addr = alloca i32, align 4
  %pdev = alloca %struct.gx_device_opvp_s*, align 8
  %r = alloca i32, align 4
  %ecode = alloca i32, align 4
  %points = alloca [1 x %struct._opvp_point], align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store double %x, double* %x.addr, align 8, !tbaa !286
  store double %y, double* %y.addr, align 8, !tbaa !286
  store double %x_start, double* %x_start.addr, align 8, !tbaa !286
  store double %y_start, double* %y_start.addr, align 8, !tbaa !286
  store i32 %type, i32* %type.addr, align 4, !tbaa !64
  %0 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_vector_s* %1 to %struct.gx_device_opvp_s*
  store %struct.gx_device_opvp_s* %2, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  store i32 -1, i32* %r, align 4, !tbaa !5
  %4 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %5 = bitcast [1 x %struct._opvp_point]* %points to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #2
  %6 = load i32, i32* @beginPage, align 4, !tbaa !5
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %7 = load i32, i32* @inkjet, align 4, !tbaa !5
  %tobool1 = icmp ne i32 %7, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  br i1 false, label %if.then, label %if.end

cond.false:                                       ; preds = %lor.lhs.false
  %8 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %vec_procs = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %8, i32 0, i32 44
  %9 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs, align 8, !tbaa !61
  %beginpage = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %9, i32 0, i32 0
  %10 = load i32 (%struct.gx_device_vector_s*)*, i32 (%struct.gx_device_vector_s*)** %beginpage, align 8, !tbaa !83
  %11 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %12 = bitcast %struct.gx_device_opvp_s* %11 to %struct.gx_device_vector_s*
  %call = call i32 %10(%struct.gx_device_vector_s* %12) #7
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %cond.false, %cond.true
  %13 = load double, double* %x_start.addr, align 8, !tbaa !286
  %call3 = call double @floor(double %13) #10
  %conv = fptosi double %call3 to i32
  %shl = shl i32 %conv, 8
  %14 = load double, double* %x_start.addr, align 8, !tbaa !286
  %15 = load double, double* %x_start.addr, align 8, !tbaa !286
  %call4 = call double @floor(double %15) #10
  %sub = fsub double %14, %call4
  %mul = fmul double %sub, 2.560000e+02
  %conv5 = fptosi double %mul to i32
  %and = and i32 %conv5, 255
  %or = or i32 %shl, %and
  %arrayidx = getelementptr inbounds [1 x %struct._opvp_point], [1 x %struct._opvp_point]* %points, i32 0, i64 0
  %x6 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %arrayidx, i32 0, i32 0
  store i32 %or, i32* %x6, align 4, !tbaa !92
  %16 = load double, double* %y_start.addr, align 8, !tbaa !286
  %call7 = call double @floor(double %16) #10
  %conv8 = fptosi double %call7 to i32
  %shl9 = shl i32 %conv8, 8
  %17 = load double, double* %y_start.addr, align 8, !tbaa !286
  %18 = load double, double* %y_start.addr, align 8, !tbaa !286
  %call10 = call double @floor(double %18) #10
  %sub11 = fsub double %17, %call10
  %mul12 = fmul double %sub11, 2.560000e+02
  %conv13 = fptosi double %mul12 to i32
  %and14 = and i32 %conv13, 255
  %or15 = or i32 %shl9, %and14
  %arrayidx16 = getelementptr inbounds [1 x %struct._opvp_point], [1 x %struct._opvp_point]* %points, i32 0, i64 0
  %y17 = getelementptr inbounds %struct._opvp_point, %struct._opvp_point* %arrayidx16, i32 0, i32 1
  store i32 %or15, i32* %y17, align 4, !tbaa !94
  %19 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpLinePath = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %19, i32 0, i32 51
  %20 = load i32 (i32, i32, i32, %struct._opvp_point*)*, i32 (i32, i32, i32, %struct._opvp_point*)** %opvpLinePath, align 8, !tbaa !144
  %tobool18 = icmp ne i32 (i32, i32, i32, %struct._opvp_point*)* %20, null
  br i1 %tobool18, label %if.then.19, label %if.end.22

if.then.19:                                       ; preds = %if.end
  %21 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpLinePath20 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %21, i32 0, i32 51
  %22 = load i32 (i32, i32, i32, %struct._opvp_point*)*, i32 (i32, i32, i32, %struct._opvp_point*)** %opvpLinePath20, align 8, !tbaa !144
  %23 = load i32, i32* @printerContext, align 4, !tbaa !5
  %arraydecay = getelementptr inbounds [1 x %struct._opvp_point], [1 x %struct._opvp_point]* %points, i32 0, i32 0
  %call21 = call i32 %22(i32 %23, i32 0, i32 1, %struct._opvp_point* %arraydecay) #7
  store i32 %call21, i32* %r, align 4, !tbaa !5
  br label %if.end.22

if.end.22:                                        ; preds = %if.then.19, %if.end
  %24 = load i32, i32* %r, align 4, !tbaa !5
  %cmp = icmp ne i32 %24, 0
  br i1 %cmp, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %if.end.22
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.24, %if.end.22
  %25 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %25, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.25, %if.then
  %26 = bitcast [1 x %struct._opvp_point]* %points to i8*
  call void @llvm.lifetime.end(i64 8, i8* %26) #2
  %27 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %27) #2
  %28 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %28) #2
  %29 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %29) #2
  %30 = load i32, i32* %retval
  ret i32 %30
}

; Function Attrs: nounwind uwtable
define internal i32 @opvp_endpath(%struct.gx_device_vector_s* %vdev, i32 %type) #0 {
entry:
  %retval = alloca i32, align 4
  %vdev.addr = alloca %struct.gx_device_vector_s*, align 8
  %type.addr = alloca i32, align 4
  %pdev = alloca %struct.gx_device_opvp_s*, align 8
  %r = alloca i32, align 4
  %ecode = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_vector_s* %vdev, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  store i32 %type, i32* %type.addr, align 4, !tbaa !64
  %0 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev.addr, align 8, !tbaa !1
  %2 = bitcast %struct.gx_device_vector_s* %1 to %struct.gx_device_opvp_s*
  store %struct.gx_device_opvp_s* %2, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %3 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  store i32 -1, i32* %r, align 4, !tbaa !5
  %4 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %5 = load i32, i32* @beginPage, align 4, !tbaa !5
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %6 = load i32, i32* @inkjet, align 4, !tbaa !5
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  br i1 false, label %if.then, label %if.end

cond.false:                                       ; preds = %lor.lhs.false
  %7 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %vec_procs = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %7, i32 0, i32 44
  %8 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs, align 8, !tbaa !61
  %beginpage = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %8, i32 0, i32 0
  %9 = load i32 (%struct.gx_device_vector_s*)*, i32 (%struct.gx_device_vector_s*)** %beginpage, align 8, !tbaa !83
  %10 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev, align 8, !tbaa !1
  %11 = bitcast %struct.gx_device_opvp_s* %10 to %struct.gx_device_vector_s*
  %call = call i32 %9(%struct.gx_device_vector_s* %11) #7
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %cond.false, %cond.true
  %12 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpEndPath = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %12, i32 0, i32 44
  %13 = load i32 (i32)*, i32 (i32)** %opvpEndPath, align 8, !tbaa !142
  %tobool3 = icmp ne i32 (i32)* %13, null
  br i1 %tobool3, label %if.then.4, label %if.end.7

if.then.4:                                        ; preds = %if.end
  %14 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpEndPath5 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %14, i32 0, i32 44
  %15 = load i32 (i32)*, i32 (i32)** %opvpEndPath5, align 8, !tbaa !142
  %16 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call6 = call i32 %15(i32 %16) #7
  store i32 %call6, i32* %r, align 4, !tbaa !5
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.4, %if.end
  %17 = load i32, i32* %r, align 4, !tbaa !5
  %cmp = icmp ne i32 %17, 0
  br i1 %cmp, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end.7
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.8, %if.end.7
  %18 = load i32, i32* %type.addr, align 4, !tbaa !64
  %and = and i32 %18, 1
  %tobool10 = icmp ne i32 %and, 0
  br i1 %tobool10, label %if.then.11, label %if.else.54

if.then.11:                                       ; preds = %if.end.9
  %19 = load i32, i32* %type.addr, align 4, !tbaa !64
  %and12 = and i32 %19, 8
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %if.then.14, label %if.else

if.then.14:                                       ; preds = %if.then.11
  %20 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetFillMode = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %20, i32 0, i32 20
  %21 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetFillMode, align 8, !tbaa !184
  %tobool15 = icmp ne i32 (i32, i32)* %21, null
  br i1 %tobool15, label %if.then.16, label %if.end.19

if.then.16:                                       ; preds = %if.then.14
  %22 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetFillMode17 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %22, i32 0, i32 20
  %23 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetFillMode17, align 8, !tbaa !184
  %24 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call18 = call i32 %23(i32 %24, i32 0) #7
  store i32 %call18, i32* %r, align 4, !tbaa !5
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.16, %if.then.14
  %25 = load i32, i32* %r, align 4, !tbaa !5
  %cmp20 = icmp ne i32 %25, 0
  br i1 %cmp20, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %if.end.19
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.22

if.end.22:                                        ; preds = %if.then.21, %if.end.19
  br label %if.end.32

if.else:                                          ; preds = %if.then.11
  %26 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetFillMode23 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %26, i32 0, i32 20
  %27 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetFillMode23, align 8, !tbaa !184
  %tobool24 = icmp ne i32 (i32, i32)* %27, null
  br i1 %tobool24, label %if.then.25, label %if.end.28

if.then.25:                                       ; preds = %if.else
  %28 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetFillMode26 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %28, i32 0, i32 20
  %29 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetFillMode26, align 8, !tbaa !184
  %30 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call27 = call i32 %29(i32 %30, i32 1) #7
  store i32 %call27, i32* %r, align 4, !tbaa !5
  br label %if.end.28

if.end.28:                                        ; preds = %if.then.25, %if.else
  %31 = load i32, i32* %r, align 4, !tbaa !5
  %cmp29 = icmp ne i32 %31, 0
  br i1 %cmp29, label %if.then.30, label %if.end.31

if.then.30:                                       ; preds = %if.end.28
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.31

if.end.31:                                        ; preds = %if.then.30, %if.end.28
  br label %if.end.32

if.end.32:                                        ; preds = %if.end.31, %if.end.22
  %32 = load i32, i32* %type.addr, align 4, !tbaa !64
  %and33 = and i32 %32, 2
  %tobool34 = icmp ne i32 %and33, 0
  br i1 %tobool34, label %if.then.35, label %if.else.44

if.then.35:                                       ; preds = %if.end.32
  %33 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpStrokeFillPath = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %33, i32 0, i32 47
  %34 = load i32 (i32)*, i32 (i32)** %opvpStrokeFillPath, align 8, !tbaa !232
  %tobool36 = icmp ne i32 (i32)* %34, null
  br i1 %tobool36, label %if.then.37, label %if.end.40

if.then.37:                                       ; preds = %if.then.35
  %35 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpStrokeFillPath38 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %35, i32 0, i32 47
  %36 = load i32 (i32)*, i32 (i32)** %opvpStrokeFillPath38, align 8, !tbaa !232
  %37 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call39 = call i32 %36(i32 %37) #7
  store i32 %call39, i32* %r, align 4, !tbaa !5
  br label %if.end.40

if.end.40:                                        ; preds = %if.then.37, %if.then.35
  %38 = load i32, i32* %r, align 4, !tbaa !5
  %cmp41 = icmp ne i32 %38, 0
  br i1 %cmp41, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %if.end.40
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.43

if.end.43:                                        ; preds = %if.then.42, %if.end.40
  br label %if.end.53

if.else.44:                                       ; preds = %if.end.32
  %39 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpFillPath = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %39, i32 0, i32 46
  %40 = load i32 (i32)*, i32 (i32)** %opvpFillPath, align 8, !tbaa !230
  %tobool45 = icmp ne i32 (i32)* %40, null
  br i1 %tobool45, label %if.then.46, label %if.end.49

if.then.46:                                       ; preds = %if.else.44
  %41 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpFillPath47 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %41, i32 0, i32 46
  %42 = load i32 (i32)*, i32 (i32)** %opvpFillPath47, align 8, !tbaa !230
  %43 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call48 = call i32 %42(i32 %43) #7
  store i32 %call48, i32* %r, align 4, !tbaa !5
  br label %if.end.49

if.end.49:                                        ; preds = %if.then.46, %if.else.44
  %44 = load i32, i32* %r, align 4, !tbaa !5
  %cmp50 = icmp ne i32 %44, 0
  br i1 %cmp50, label %if.then.51, label %if.end.52

if.then.51:                                       ; preds = %if.end.49
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.52

if.end.52:                                        ; preds = %if.then.51, %if.end.49
  br label %if.end.53

if.end.53:                                        ; preds = %if.end.52, %if.end.43
  br label %if.end.82

if.else.54:                                       ; preds = %if.end.9
  %45 = load i32, i32* %type.addr, align 4, !tbaa !64
  %and55 = and i32 %45, 4
  %tobool56 = icmp ne i32 %and55, 0
  br i1 %tobool56, label %if.then.57, label %if.else.68

if.then.57:                                       ; preds = %if.else.54
  %46 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetClipPath = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %46, i32 0, i32 48
  %47 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetClipPath, align 8, !tbaa !99
  %tobool58 = icmp ne i32 (i32, i32)* %47, null
  br i1 %tobool58, label %if.then.59, label %if.end.64

if.then.59:                                       ; preds = %if.then.57
  %48 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetClipPath60 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %48, i32 0, i32 48
  %49 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetClipPath60, align 8, !tbaa !99
  %50 = load i32, i32* @printerContext, align 4, !tbaa !5
  %51 = load i32, i32* %type.addr, align 4, !tbaa !64
  %and61 = and i32 %51, 8
  %tobool62 = icmp ne i32 %and61, 0
  %cond = select i1 %tobool62, i32 0, i32 1
  %call63 = call i32 %49(i32 %50, i32 %cond) #7
  store i32 %call63, i32* %r, align 4, !tbaa !5
  br label %if.end.64

if.end.64:                                        ; preds = %if.then.59, %if.then.57
  %52 = load i32, i32* %r, align 4, !tbaa !5
  %cmp65 = icmp ne i32 %52, 0
  br i1 %cmp65, label %if.then.66, label %if.end.67

if.then.66:                                       ; preds = %if.end.64
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.67

if.end.67:                                        ; preds = %if.then.66, %if.end.64
  br label %if.end.81

if.else.68:                                       ; preds = %if.else.54
  %53 = load i32, i32* %type.addr, align 4, !tbaa !64
  %and69 = and i32 %53, 2
  %tobool70 = icmp ne i32 %and69, 0
  br i1 %tobool70, label %if.then.71, label %if.end.80

if.then.71:                                       ; preds = %if.else.68
  %54 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpStrokePath = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %54, i32 0, i32 45
  %55 = load i32 (i32)*, i32 (i32)** %opvpStrokePath, align 8, !tbaa !143
  %tobool72 = icmp ne i32 (i32)* %55, null
  br i1 %tobool72, label %if.then.73, label %if.end.76

if.then.73:                                       ; preds = %if.then.71
  %56 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpStrokePath74 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %56, i32 0, i32 45
  %57 = load i32 (i32)*, i32 (i32)** %opvpStrokePath74, align 8, !tbaa !143
  %58 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call75 = call i32 %57(i32 %58) #7
  store i32 %call75, i32* %r, align 4, !tbaa !5
  br label %if.end.76

if.end.76:                                        ; preds = %if.then.73, %if.then.71
  %59 = load i32, i32* %r, align 4, !tbaa !5
  %cmp77 = icmp ne i32 %59, 0
  br i1 %cmp77, label %if.then.78, label %if.end.79

if.then.78:                                       ; preds = %if.end.76
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.79

if.end.79:                                        ; preds = %if.then.78, %if.end.76
  br label %if.end.80

if.end.80:                                        ; preds = %if.end.79, %if.else.68
  br label %if.end.81

if.end.81:                                        ; preds = %if.end.80, %if.end.67
  br label %if.end.82

if.end.82:                                        ; preds = %if.end.81, %if.end.53
  %60 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %60, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.82, %if.then
  %61 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %61) #2
  %62 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %62) #2
  %63 = bitcast %struct.gx_device_opvp_s** %pdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %63) #2
  %64 = load i32, i32* %retval
  ret i32 %64
}

; Function Attrs: nounwind uwtable
define internal i32 @opvp_startpage(%struct.gx_device_s* %dev) #0 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %ecode = alloca i32, align 4
  %r = alloca i32, align 4
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %0 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %1 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #2
  store i32 -1, i32* %r, align 4, !tbaa !5
  %call = call i8* @opvp_alloc_string(i8** @opvp_startpage.page_info, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.183, i32 0, i32 0)) #7
  store i8* %call, i8** @opvp_startpage.page_info, align 8, !tbaa !1
  %2 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call1 = call i8* @opvp_gen_page_info(%struct.gx_device_s* %2) #7
  %call2 = call i8* @opvp_cat_string(i8** @opvp_startpage.page_info, i8* %call1) #7
  store i8* %call2, i8** @opvp_startpage.page_info, align 8, !tbaa !1
  %3 = load i32, i32* @printerContext, align 4, !tbaa !5
  %cmp = icmp ne i32 %3, -1
  br i1 %cmp, label %if.then, label %if.end.11

if.then:                                          ; preds = %entry
  %4 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpStartPage = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %4, i32 0, i32 7
  %5 = load i32 (i32, i8*)*, i32 (i32, i8*)** %opvpStartPage, align 8, !tbaa !163
  %tobool = icmp ne i32 (i32, i8*)* %5, null
  br i1 %tobool, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %6 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpStartPage4 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %6, i32 0, i32 7
  %7 = load i32 (i32, i8*)*, i32 (i32, i8*)** %opvpStartPage4, align 8, !tbaa !163
  %8 = load i32, i32* @printerContext, align 4, !tbaa !5
  %9 = load i8*, i8** @opvp_startpage.page_info, align 8, !tbaa !1
  %call5 = call i8* @opvp_to_utf8(i8* %9) #7
  %call6 = call i32 %7(i32 %8, i8* %call5) #7
  store i32 %call6, i32* %r, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.then.3, %if.then
  %10 = load i32, i32* %r, align 4, !tbaa !5
  %cmp7 = icmp ne i32 %10, 0
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %if.end
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.10

if.else:                                          ; preds = %if.end
  %call9 = call i32 @InitGS() #7
  store i32 %call9, i32* %ecode, align 4, !tbaa !5
  br label %if.end.10

if.end.10:                                        ; preds = %if.else, %if.then.8
  br label %if.end.11

if.end.11:                                        ; preds = %if.end.10, %entry
  %11 = load i32, i32* %ecode, align 4, !tbaa !5
  %12 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %12) #2
  %13 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %13) #2
  ret i32 %11
}

; Function Attrs: nounwind uwtable
define internal i8* @opvp_gen_page_info(%struct.gx_device_s* %dev) #0 {
entry:
  %dev.addr = alloca %struct.gx_device_s*, align 8
  %num_copies = alloca i32, align 4
  %landscape = alloca i32, align 4
  %tbuff = alloca [1024 x i8], align 16
  store %struct.gx_device_s* %dev, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %0 = bitcast i32* %num_copies to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  store i32 1, i32* %num_copies, align 4, !tbaa !5
  %1 = bitcast i32* %landscape to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #2
  %2 = bitcast [1024 x i8]* %tbuff to i8*
  call void @llvm.lifetime.start(i64 1024, i8* %2) #2
  %3 = load i32, i32* @inkjet, align 4, !tbaa !5
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %if.end.5, label %if.then

if.then:                                          ; preds = %entry
  %4 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %IgnoreNumCopies = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %4, i32 0, i32 30
  %5 = load i32, i32* %IgnoreNumCopies, align 4, !tbaa !308
  %tobool1 = icmp ne i32 %5, 0
  br i1 %tobool1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.then
  store i32 1, i32* %num_copies, align 4, !tbaa !5
  br label %if.end.4

if.else:                                          ; preds = %if.then
  %6 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %NumCopies_set = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %6, i32 0, i32 29
  %7 = load i32, i32* %NumCopies_set, align 4, !tbaa !309
  %cmp = icmp sgt i32 %7, 0
  br i1 %cmp, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.else
  %8 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %NumCopies = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %8, i32 0, i32 28
  %9 = load i32, i32* %NumCopies, align 4, !tbaa !310
  store i32 %9, i32* %num_copies, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.then.3, %if.else
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %if.then.2
  br label %if.end.5

if.end.5:                                         ; preds = %if.end.4, %entry
  %10 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %MediaSize = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %10, i32 0, i32 19
  %arrayidx = getelementptr inbounds [2 x float], [2 x float]* %MediaSize, i32 0, i64 0
  %11 = load float, float* %arrayidx, align 4, !tbaa !10
  %12 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %MediaSize6 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %12, i32 0, i32 19
  %arrayidx7 = getelementptr inbounds [2 x float], [2 x float]* %MediaSize6, i32 0, i64 1
  %13 = load float, float* %arrayidx7, align 4, !tbaa !10
  %cmp8 = fcmp olt float %11, %13
  %cond = select i1 %cmp8, i32 0, i32 1
  store i32 %cond, i32* %landscape, align 4, !tbaa !5
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %tbuff, i32 0, i32 0
  %call = call i8* @memset(i8* %arraydecay, i32 0, i64 1024) #8
  %arraydecay9 = getelementptr inbounds [1024 x i8], [1024 x i8]* %tbuff, i32 0, i32 0
  %14 = load i32, i32* %num_copies, align 4, !tbaa !5
  %15 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %HWResolution = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %15, i32 0, i32 22
  %arrayidx10 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution, i32 0, i64 0
  %16 = load float, float* %arrayidx10, align 4, !tbaa !10
  %17 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %HWResolution11 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %17, i32 0, i32 22
  %arrayidx12 = getelementptr inbounds [2 x float], [2 x float]* %HWResolution11, i32 0, i64 1
  %18 = load float, float* %arrayidx12, align 4, !tbaa !10
  %call13 = call i8* @opvp_get_sizestring(float %16, float %18) #7
  %19 = load i32, i32* %landscape, align 4, !tbaa !5
  %tobool14 = icmp ne i32 %19, 0
  %cond15 = select i1 %tobool14, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.193, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.194, i32 0, i32 0)
  %20 = load %struct.gx_device_s*, %struct.gx_device_s** %dev.addr, align 8, !tbaa !1
  %call16 = call i8* @opvp_get_mediasize(%struct.gx_device_s* %20) #7
  %call17 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %arraydecay9, i64 1023, i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str.192, i32 0, i32 0), i32 %14, i8* %call13, i8* %cond15, i8* %call16) #8
  %arraydecay18 = getelementptr inbounds [1024 x i8], [1024 x i8]* %tbuff, i32 0, i32 0
  %call19 = call i8* @opvp_alloc_string(i8** @opvp_gen_page_info.buff, i8* %arraydecay18) #7
  %21 = load i8*, i8** @opvp_gen_page_info.buff, align 8, !tbaa !1
  %22 = bitcast [1024 x i8]* %tbuff to i8*
  call void @llvm.lifetime.end(i64 1024, i8* %22) #2
  %23 = bitcast i32* %landscape to i8*
  call void @llvm.lifetime.end(i64 4, i8* %23) #2
  %24 = bitcast i32* %num_copies to i8*
  call void @llvm.lifetime.end(i64 4, i8* %24) #2
  ret i8* %21
}

; Function Attrs: nounwind uwtable
define internal i32 @InitGS() #0 {
entry:
  %retval = alloca i32, align 4
  %0 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpInitGS = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %0, i32 0, i32 14
  %1 = load i32 (i32)*, i32 (i32)** %opvpInitGS, align 8, !tbaa !175
  %cmp = icmp ne i32 (i32)* %1, null
  br i1 %cmp, label %if.then, label %if.end.4

if.then:                                          ; preds = %entry
  %2 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpInitGS1 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %2, i32 0, i32 14
  %3 = load i32 (i32)*, i32 (i32)** %opvpInitGS1, align 8, !tbaa !175
  %4 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call = call i32 %3(i32 %4) #7
  %cmp2 = icmp ne i32 %call, 0
  br i1 %cmp2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %entry
  %5 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetColorSpace = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %5, i32 0, i32 18
  %6 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetColorSpace, align 8, !tbaa !123
  %cmp5 = icmp ne i32 (i32, i32)* %6, null
  br i1 %cmp5, label %if.then.6, label %if.end.12

if.then.6:                                        ; preds = %if.end.4
  %7 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetColorSpace7 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %7, i32 0, i32 18
  %8 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetColorSpace7, align 8, !tbaa !123
  %9 = load i32, i32* @printerContext, align 4, !tbaa !5
  %10 = load i32, i32* @colorSpace, align 4, !tbaa !64
  %call8 = call i32 %8(i32 %9, i32 %10) #7
  %cmp9 = icmp ne i32 %call8, 0
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %if.then.6
  store i32 -1, i32* %retval
  br label %return

if.end.11:                                        ; preds = %if.then.6
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.4
  %11 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetPaintMode = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %11, i32 0, i32 38
  %12 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetPaintMode, align 8, !tbaa !96
  %cmp13 = icmp ne i32 (i32, i32)* %12, null
  br i1 %cmp13, label %if.then.14, label %if.end.20

if.then.14:                                       ; preds = %if.end.12
  %13 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetPaintMode15 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %13, i32 0, i32 38
  %14 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetPaintMode15, align 8, !tbaa !96
  %15 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call16 = call i32 %14(i32 %15, i32 1) #7
  %cmp17 = icmp ne i32 %call16, 0
  br i1 %cmp17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %if.then.14
  store i32 -1, i32* %retval
  br label %return

if.end.19:                                        ; preds = %if.then.14
  br label %if.end.20

if.end.20:                                        ; preds = %if.end.19, %if.end.12
  %16 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetAlphaConstant = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %16, i32 0, i32 22
  %17 = load i32 (i32, float)*, i32 (i32, float)** %opvpSetAlphaConstant, align 8, !tbaa !188
  %cmp21 = icmp ne i32 (i32, float)* %17, null
  br i1 %cmp21, label %if.then.22, label %if.end.28

if.then.22:                                       ; preds = %if.end.20
  %18 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetAlphaConstant23 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %18, i32 0, i32 22
  %19 = load i32 (i32, float)*, i32 (i32, float)** %opvpSetAlphaConstant23, align 8, !tbaa !188
  %20 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call24 = call i32 %19(i32 %20, float 1.000000e+00) #7
  %cmp25 = icmp ne i32 %call24, 0
  br i1 %cmp25, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %if.then.22
  store i32 -1, i32* %retval
  br label %return

if.end.27:                                        ; preds = %if.then.22
  br label %if.end.28

if.end.28:                                        ; preds = %if.end.27, %if.end.20
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.28, %if.then.26, %if.then.18, %if.then.10, %if.then.3
  %21 = load i32, i32* %retval
  ret i32 %21
}

; Function Attrs: nounwind uwtable
define internal i8* @opvp_get_sizestring(float %width, float %height) #0 {
entry:
  %width.addr = alloca float, align 4
  %height.addr = alloca float, align 4
  %nbuff = alloca [1024 x i8], align 16
  %nbuff1 = alloca [512 x i8], align 16
  %nbuff2 = alloca [512 x i8], align 16
  store float %width, float* %width.addr, align 4, !tbaa !10
  store float %height, float* %height.addr, align 4, !tbaa !10
  %0 = bitcast [1024 x i8]* %nbuff to i8*
  call void @llvm.lifetime.start(i64 1024, i8* %0) #2
  %1 = bitcast [512 x i8]* %nbuff1 to i8*
  call void @llvm.lifetime.start(i64 512, i8* %1) #2
  %2 = bitcast [512 x i8]* %nbuff2 to i8*
  call void @llvm.lifetime.start(i64 512, i8* %2) #2
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %nbuff, i32 0, i32 0
  %call = call i8* @memset(i8* %arraydecay, i32 0, i64 1024) #8
  %arraydecay1 = getelementptr inbounds [512 x i8], [512 x i8]* %nbuff1, i32 0, i32 0
  %call2 = call i8* @memset(i8* %arraydecay1, i32 0, i64 512) #8
  %arraydecay3 = getelementptr inbounds [512 x i8], [512 x i8]* %nbuff2, i32 0, i32 0
  %call4 = call i8* @memset(i8* %arraydecay3, i32 0, i64 512) #8
  %arraydecay5 = getelementptr inbounds [512 x i8], [512 x i8]* %nbuff1, i32 0, i32 0
  %3 = load float, float* %width.addr, align 4, !tbaa !10
  %conv = fpext float %3 to double
  %call6 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %arraydecay5, i64 511, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.195, i32 0, i32 0), double %conv) #8
  %arraydecay7 = getelementptr inbounds [512 x i8], [512 x i8]* %nbuff2, i32 0, i32 0
  %4 = load float, float* %height.addr, align 4, !tbaa !10
  %conv8 = fpext float %4 to double
  %call9 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %arraydecay7, i64 511, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.195, i32 0, i32 0), double %conv8) #8
  %arraydecay10 = getelementptr inbounds [1024 x i8], [1024 x i8]* %nbuff, i32 0, i32 0
  %arraydecay11 = getelementptr inbounds [512 x i8], [512 x i8]* %nbuff1, i32 0, i32 0
  %call12 = call i8* @opvp_adjust_num_string(i8* %arraydecay11) #7
  %arraydecay13 = getelementptr inbounds [512 x i8], [512 x i8]* %nbuff2, i32 0, i32 0
  %call14 = call i8* @opvp_adjust_num_string(i8* %arraydecay13) #7
  %call15 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %arraydecay10, i64 1023, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.196, i32 0, i32 0), i8* %call12, i8* %call14) #8
  %arraydecay16 = getelementptr inbounds [1024 x i8], [1024 x i8]* %nbuff, i32 0, i32 0
  %call17 = call i8* @opvp_alloc_string(i8** @opvp_get_sizestring.buff, i8* %arraydecay16) #7
  %5 = bitcast [512 x i8]* %nbuff2 to i8*
  call void @llvm.lifetime.end(i64 512, i8* %5) #2
  %6 = bitcast [512 x i8]* %nbuff1 to i8*
  call void @llvm.lifetime.end(i64 512, i8* %6) #2
  %7 = bitcast [1024 x i8]* %nbuff to i8*
  call void @llvm.lifetime.end(i64 1024, i8* %7) #2
  ret i8* %call17
}

; Function Attrs: nounwind uwtable
define internal i8* @opvp_get_mediasize(%struct.gx_device_s* %pdev) #0 {
entry:
  %pdev.addr = alloca %struct.gx_device_s*, align 8
  %i = alloca i32, align 4
  %wbuff = alloca [1024 x i8], align 16
  %region = alloca i8*, align 8
  %name = alloca i8*, align 8
  %width = alloca float, align 4
  %height = alloca float, align 4
  %unit = alloca i8*, align 8
  %landscape = alloca i32, align 4
  %__s1_len = alloca i64, align 8
  %__s2_len = alloca i64, align 8
  %tmp = alloca i32, align 4
  %__s1 = alloca i8*, align 8
  %__result = alloca i32, align 4
  %tmp52 = alloca i32, align 4
  %__s1_len57 = alloca i64, align 8
  %__s2_len59 = alloca i64, align 8
  %tmp60 = alloca i32, align 4
  %__s167 = alloca i8*, align 8
  %__result69 = alloca i32, align 4
  %tmp107 = alloca i32, align 4
  %__s1_len116 = alloca i64, align 8
  %__s2_len118 = alloca i64, align 8
  %tmp119 = alloca i32, align 4
  %__s1126 = alloca i8*, align 8
  %__result128 = alloca i32, align 4
  %tmp166 = alloca i32, align 4
  %__s1_len175 = alloca i64, align 8
  %__s2_len177 = alloca i64, align 8
  %tmp178 = alloca i32, align 4
  %__s1185 = alloca i8*, align 8
  %__result187 = alloca i32, align 4
  %tmp225 = alloca i32, align 4
  store %struct.gx_device_s* %pdev, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = bitcast [1024 x i8]* %wbuff to i8*
  call void @llvm.lifetime.start(i64 1024, i8* %1) #2
  %2 = bitcast i8** %region to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #2
  %3 = bitcast i8** %name to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = bitcast float* %width to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  %5 = bitcast float* %height to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #2
  %6 = bitcast i8** %unit to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = bitcast i32* %landscape to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #2
  %8 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %call = call i32 @opvp_get_papertable_index(%struct.gx_device_s* %8) #7
  store i32 %call, i32* %i, align 4, !tbaa !5
  %9 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom = sext i32 %9 to i64
  %arrayidx = getelementptr inbounds [166 x %struct.OPVP_Paper], [166 x %struct.OPVP_Paper]* @paperTable, i32 0, i64 %idxprom
  %name1 = getelementptr inbounds %struct.OPVP_Paper, %struct.OPVP_Paper* %arrayidx, i32 0, i32 1
  %10 = load i8*, i8** %name1, align 8, !tbaa !311
  %tobool = icmp ne i8* %10, null
  br i1 %tobool, label %if.then, label %if.else.239

if.then:                                          ; preds = %entry
  %11 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom2 = sext i32 %11 to i64
  %arrayidx3 = getelementptr inbounds [166 x %struct.OPVP_Paper], [166 x %struct.OPVP_Paper]* @paperTable, i32 0, i64 %idxprom2
  %region4 = getelementptr inbounds %struct.OPVP_Paper, %struct.OPVP_Paper* %arrayidx3, i32 0, i32 0
  %12 = load i8*, i8** %region4, align 8, !tbaa !313
  store i8* %12, i8** %region, align 8, !tbaa !1
  %13 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom5 = sext i32 %13 to i64
  %arrayidx6 = getelementptr inbounds [166 x %struct.OPVP_Paper], [166 x %struct.OPVP_Paper]* @paperTable, i32 0, i64 %idxprom5
  %name7 = getelementptr inbounds %struct.OPVP_Paper, %struct.OPVP_Paper* %arrayidx6, i32 0, i32 1
  %14 = load i8*, i8** %name7, align 8, !tbaa !311
  store i8* %14, i8** %name, align 8, !tbaa !1
  %15 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom8 = sext i32 %15 to i64
  %arrayidx9 = getelementptr inbounds [166 x %struct.OPVP_Paper], [166 x %struct.OPVP_Paper]* @paperTable, i32 0, i64 %idxprom8
  %width10 = getelementptr inbounds %struct.OPVP_Paper, %struct.OPVP_Paper* %arrayidx9, i32 0, i32 2
  %16 = load float, float* %width10, align 4, !tbaa !314
  %div = fdiv float %16, 7.200000e+01
  store float %div, float* %width, align 4, !tbaa !10
  %17 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom11 = sext i32 %17 to i64
  %arrayidx12 = getelementptr inbounds [166 x %struct.OPVP_Paper], [166 x %struct.OPVP_Paper]* @paperTable, i32 0, i64 %idxprom11
  %height13 = getelementptr inbounds %struct.OPVP_Paper, %struct.OPVP_Paper* %arrayidx12, i32 0, i32 3
  %18 = load float, float* %height13, align 4, !tbaa !315
  %div14 = fdiv float %18, 7.200000e+01
  store float %div14, float* %height, align 4, !tbaa !10
  %19 = bitcast i64* %__s1_len to i8*
  call void @llvm.lifetime.start(i64 8, i8* %19) #2
  %20 = bitcast i64* %__s2_len to i8*
  call void @llvm.lifetime.start(i64 8, i8* %20) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i64 1) to i64), i64 ptrtoint ([3 x i8]* @.str.12 to i64)), i64 1), label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.then
  %call15 = call i64 @strlen(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0)) #9
  store i64 %call15, i64* %__s2_len, align 8, !tbaa !90
  %21 = load i64, i64* %__s2_len, align 8, !tbaa !90
  %cmp = icmp ult i64 %21, 4
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %22 = bitcast i8** %__s1 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %22) #2
  %23 = load i8*, i8** %region, align 8, !tbaa !1
  store i8* %23, i8** %__s1, align 8, !tbaa !1
  %24 = bitcast i32* %__result to i8*
  call void @llvm.lifetime.start(i64 4, i8* %24) #2
  %25 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx18 = getelementptr inbounds i8, i8* %25, i64 0
  %26 = load i8, i8* %arrayidx18, align 1, !tbaa !64
  %conv = zext i8 %26 to i32
  %27 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), align 1, !tbaa !64
  %conv19 = zext i8 %27 to i32
  %sub = sub nsw i32 %conv, %conv19
  store i32 %sub, i32* %__result, align 4, !tbaa !5
  %28 = load i64, i64* %__s2_len, align 8, !tbaa !90
  %cmp20 = icmp ugt i64 %28, 0
  br i1 %cmp20, label %land.lhs.true.22, label %if.end.51

land.lhs.true.22:                                 ; preds = %cond.true
  %29 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp23 = icmp eq i32 %29, 0
  br i1 %cmp23, label %if.then.25, label %if.end.51

if.then.25:                                       ; preds = %land.lhs.true.22
  %30 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx26 = getelementptr inbounds i8, i8* %30, i64 1
  %31 = load i8, i8* %arrayidx26, align 1, !tbaa !64
  %conv27 = zext i8 %31 to i32
  %32 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i64 1), align 1, !tbaa !64
  %conv28 = zext i8 %32 to i32
  %sub29 = sub nsw i32 %conv27, %conv28
  store i32 %sub29, i32* %__result, align 4, !tbaa !5
  %33 = load i64, i64* %__s2_len, align 8, !tbaa !90
  %cmp30 = icmp ugt i64 %33, 1
  br i1 %cmp30, label %land.lhs.true.32, label %if.end.50

land.lhs.true.32:                                 ; preds = %if.then.25
  %34 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp33 = icmp eq i32 %34, 0
  br i1 %cmp33, label %if.then.35, label %if.end.50

if.then.35:                                       ; preds = %land.lhs.true.32
  %35 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx36 = getelementptr inbounds i8, i8* %35, i64 2
  %36 = load i8, i8* %arrayidx36, align 1, !tbaa !64
  %conv37 = zext i8 %36 to i32
  %37 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i64 2), align 1, !tbaa !64
  %conv38 = zext i8 %37 to i32
  %sub39 = sub nsw i32 %conv37, %conv38
  store i32 %sub39, i32* %__result, align 4, !tbaa !5
  %38 = load i64, i64* %__s2_len, align 8, !tbaa !90
  %cmp40 = icmp ugt i64 %38, 2
  br i1 %cmp40, label %land.lhs.true.42, label %if.end

land.lhs.true.42:                                 ; preds = %if.then.35
  %39 = load i32, i32* %__result, align 4, !tbaa !5
  %cmp43 = icmp eq i32 %39, 0
  br i1 %cmp43, label %if.then.45, label %if.end

if.then.45:                                       ; preds = %land.lhs.true.42
  %40 = load i8*, i8** %__s1, align 8, !tbaa !1
  %arrayidx46 = getelementptr inbounds i8, i8* %40, i64 3
  %41 = load i8, i8* %arrayidx46, align 1, !tbaa !64
  %conv47 = zext i8 %41 to i32
  %42 = load i8, i8* getelementptr inbounds (i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i64 3), align 1, !tbaa !64
  %conv48 = zext i8 %42 to i32
  %sub49 = sub nsw i32 %conv47, %conv48
  store i32 %sub49, i32* %__result, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.then.45, %land.lhs.true.42, %if.then.35
  br label %if.end.50

if.end.50:                                        ; preds = %if.end, %land.lhs.true.32, %if.then.25
  br label %if.end.51

if.end.51:                                        ; preds = %if.end.50, %land.lhs.true.22, %cond.true
  %43 = load i32, i32* %__result, align 4, !tbaa !5
  store i32 %43, i32* %tmp52, !tbaa !5
  %44 = bitcast i32* %__result to i8*
  call void @llvm.lifetime.end(i64 4, i8* %44) #2
  %45 = bitcast i8** %__s1 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %45) #2
  %46 = load i32, i32* %tmp52, !tbaa !5
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.then
  %47 = load i8*, i8** %region, align 8, !tbaa !1
  %call53 = call i32 @strcmp(i8* %47, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0)) #8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %if.end.51
  %cond = phi i32 [ %46, %if.end.51 ], [ %call53, %cond.false ]
  store i32 %cond, i32* %tmp, !tbaa !5
  %48 = bitcast i64* %__s2_len to i8*
  call void @llvm.lifetime.end(i64 8, i8* %48) #2
  %49 = bitcast i64* %__s1_len to i8*
  call void @llvm.lifetime.end(i64 8, i8* %49) #2
  %50 = load i32, i32* %tmp, !tbaa !5
  %cmp54 = icmp eq i32 %50, 0
  br i1 %cmp54, label %if.then.232, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %51 = bitcast i64* %__s1_len57 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %51) #2
  %52 = bitcast i64* %__s2_len59 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %52) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.143, i32 0, i64 1) to i64), i64 ptrtoint ([5 x i8]* @.str.143 to i64)), i64 1), label %land.lhs.true.61, label %cond.false.108

land.lhs.true.61:                                 ; preds = %lor.lhs.false
  %call62 = call i64 @strlen(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.143, i32 0, i32 0)) #9
  store i64 %call62, i64* %__s2_len59, align 8, !tbaa !90
  %53 = load i64, i64* %__s2_len59, align 8, !tbaa !90
  %cmp63 = icmp ult i64 %53, 4
  br i1 %cmp63, label %cond.true.65, label %cond.false.108

cond.true.65:                                     ; preds = %land.lhs.true.61
  %54 = bitcast i8** %__s167 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %54) #2
  %55 = load i8*, i8** %region, align 8, !tbaa !1
  store i8* %55, i8** %__s167, align 8, !tbaa !1
  %56 = bitcast i32* %__result69 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %56) #2
  %57 = load i8*, i8** %__s167, align 8, !tbaa !1
  %arrayidx70 = getelementptr inbounds i8, i8* %57, i64 0
  %58 = load i8, i8* %arrayidx70, align 1, !tbaa !64
  %conv71 = zext i8 %58 to i32
  %59 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.143, i32 0, i32 0), align 1, !tbaa !64
  %conv72 = zext i8 %59 to i32
  %sub73 = sub nsw i32 %conv71, %conv72
  store i32 %sub73, i32* %__result69, align 4, !tbaa !5
  %60 = load i64, i64* %__s2_len59, align 8, !tbaa !90
  %cmp74 = icmp ugt i64 %60, 0
  br i1 %cmp74, label %land.lhs.true.76, label %if.end.106

land.lhs.true.76:                                 ; preds = %cond.true.65
  %61 = load i32, i32* %__result69, align 4, !tbaa !5
  %cmp77 = icmp eq i32 %61, 0
  br i1 %cmp77, label %if.then.79, label %if.end.106

if.then.79:                                       ; preds = %land.lhs.true.76
  %62 = load i8*, i8** %__s167, align 8, !tbaa !1
  %arrayidx80 = getelementptr inbounds i8, i8* %62, i64 1
  %63 = load i8, i8* %arrayidx80, align 1, !tbaa !64
  %conv81 = zext i8 %63 to i32
  %64 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.143, i32 0, i64 1), align 1, !tbaa !64
  %conv82 = zext i8 %64 to i32
  %sub83 = sub nsw i32 %conv81, %conv82
  store i32 %sub83, i32* %__result69, align 4, !tbaa !5
  %65 = load i64, i64* %__s2_len59, align 8, !tbaa !90
  %cmp84 = icmp ugt i64 %65, 1
  br i1 %cmp84, label %land.lhs.true.86, label %if.end.105

land.lhs.true.86:                                 ; preds = %if.then.79
  %66 = load i32, i32* %__result69, align 4, !tbaa !5
  %cmp87 = icmp eq i32 %66, 0
  br i1 %cmp87, label %if.then.89, label %if.end.105

if.then.89:                                       ; preds = %land.lhs.true.86
  %67 = load i8*, i8** %__s167, align 8, !tbaa !1
  %arrayidx90 = getelementptr inbounds i8, i8* %67, i64 2
  %68 = load i8, i8* %arrayidx90, align 1, !tbaa !64
  %conv91 = zext i8 %68 to i32
  %69 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.143, i32 0, i64 2), align 1, !tbaa !64
  %conv92 = zext i8 %69 to i32
  %sub93 = sub nsw i32 %conv91, %conv92
  store i32 %sub93, i32* %__result69, align 4, !tbaa !5
  %70 = load i64, i64* %__s2_len59, align 8, !tbaa !90
  %cmp94 = icmp ugt i64 %70, 2
  br i1 %cmp94, label %land.lhs.true.96, label %if.end.104

land.lhs.true.96:                                 ; preds = %if.then.89
  %71 = load i32, i32* %__result69, align 4, !tbaa !5
  %cmp97 = icmp eq i32 %71, 0
  br i1 %cmp97, label %if.then.99, label %if.end.104

if.then.99:                                       ; preds = %land.lhs.true.96
  %72 = load i8*, i8** %__s167, align 8, !tbaa !1
  %arrayidx100 = getelementptr inbounds i8, i8* %72, i64 3
  %73 = load i8, i8* %arrayidx100, align 1, !tbaa !64
  %conv101 = zext i8 %73 to i32
  %74 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.143, i32 0, i64 3), align 1, !tbaa !64
  %conv102 = zext i8 %74 to i32
  %sub103 = sub nsw i32 %conv101, %conv102
  store i32 %sub103, i32* %__result69, align 4, !tbaa !5
  br label %if.end.104

if.end.104:                                       ; preds = %if.then.99, %land.lhs.true.96, %if.then.89
  br label %if.end.105

if.end.105:                                       ; preds = %if.end.104, %land.lhs.true.86, %if.then.79
  br label %if.end.106

if.end.106:                                       ; preds = %if.end.105, %land.lhs.true.76, %cond.true.65
  %75 = load i32, i32* %__result69, align 4, !tbaa !5
  store i32 %75, i32* %tmp107, !tbaa !5
  %76 = bitcast i32* %__result69 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %76) #2
  %77 = bitcast i8** %__s167 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %77) #2
  %78 = load i32, i32* %tmp107, !tbaa !5
  br label %cond.end.110

cond.false.108:                                   ; preds = %land.lhs.true.61, %lor.lhs.false
  %79 = load i8*, i8** %region, align 8, !tbaa !1
  %call109 = call i32 @strcmp(i8* %79, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.143, i32 0, i32 0)) #8
  br label %cond.end.110

cond.end.110:                                     ; preds = %cond.false.108, %if.end.106
  %cond111 = phi i32 [ %78, %if.end.106 ], [ %call109, %cond.false.108 ]
  store i32 %cond111, i32* %tmp60, !tbaa !5
  %80 = bitcast i64* %__s2_len59 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %80) #2
  %81 = bitcast i64* %__s1_len57 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %81) #2
  %82 = load i32, i32* %tmp60, !tbaa !5
  %cmp112 = icmp eq i32 %82, 0
  br i1 %cmp112, label %if.then.232, label %lor.lhs.false.114

lor.lhs.false.114:                                ; preds = %cond.end.110
  %83 = bitcast i64* %__s1_len116 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %83) #2
  %84 = bitcast i64* %__s2_len118 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %84) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.65, i32 0, i64 1) to i64), i64 ptrtoint ([4 x i8]* @.str.65 to i64)), i64 1), label %land.lhs.true.120, label %cond.false.167

land.lhs.true.120:                                ; preds = %lor.lhs.false.114
  %call121 = call i64 @strlen(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.65, i32 0, i32 0)) #9
  store i64 %call121, i64* %__s2_len118, align 8, !tbaa !90
  %85 = load i64, i64* %__s2_len118, align 8, !tbaa !90
  %cmp122 = icmp ult i64 %85, 4
  br i1 %cmp122, label %cond.true.124, label %cond.false.167

cond.true.124:                                    ; preds = %land.lhs.true.120
  %86 = bitcast i8** %__s1126 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %86) #2
  %87 = load i8*, i8** %region, align 8, !tbaa !1
  store i8* %87, i8** %__s1126, align 8, !tbaa !1
  %88 = bitcast i32* %__result128 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %88) #2
  %89 = load i8*, i8** %__s1126, align 8, !tbaa !1
  %arrayidx129 = getelementptr inbounds i8, i8* %89, i64 0
  %90 = load i8, i8* %arrayidx129, align 1, !tbaa !64
  %conv130 = zext i8 %90 to i32
  %91 = load i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.65, i32 0, i32 0), align 1, !tbaa !64
  %conv131 = zext i8 %91 to i32
  %sub132 = sub nsw i32 %conv130, %conv131
  store i32 %sub132, i32* %__result128, align 4, !tbaa !5
  %92 = load i64, i64* %__s2_len118, align 8, !tbaa !90
  %cmp133 = icmp ugt i64 %92, 0
  br i1 %cmp133, label %land.lhs.true.135, label %if.end.165

land.lhs.true.135:                                ; preds = %cond.true.124
  %93 = load i32, i32* %__result128, align 4, !tbaa !5
  %cmp136 = icmp eq i32 %93, 0
  br i1 %cmp136, label %if.then.138, label %if.end.165

if.then.138:                                      ; preds = %land.lhs.true.135
  %94 = load i8*, i8** %__s1126, align 8, !tbaa !1
  %arrayidx139 = getelementptr inbounds i8, i8* %94, i64 1
  %95 = load i8, i8* %arrayidx139, align 1, !tbaa !64
  %conv140 = zext i8 %95 to i32
  %96 = load i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.65, i32 0, i64 1), align 1, !tbaa !64
  %conv141 = zext i8 %96 to i32
  %sub142 = sub nsw i32 %conv140, %conv141
  store i32 %sub142, i32* %__result128, align 4, !tbaa !5
  %97 = load i64, i64* %__s2_len118, align 8, !tbaa !90
  %cmp143 = icmp ugt i64 %97, 1
  br i1 %cmp143, label %land.lhs.true.145, label %if.end.164

land.lhs.true.145:                                ; preds = %if.then.138
  %98 = load i32, i32* %__result128, align 4, !tbaa !5
  %cmp146 = icmp eq i32 %98, 0
  br i1 %cmp146, label %if.then.148, label %if.end.164

if.then.148:                                      ; preds = %land.lhs.true.145
  %99 = load i8*, i8** %__s1126, align 8, !tbaa !1
  %arrayidx149 = getelementptr inbounds i8, i8* %99, i64 2
  %100 = load i8, i8* %arrayidx149, align 1, !tbaa !64
  %conv150 = zext i8 %100 to i32
  %101 = load i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.65, i32 0, i64 2), align 1, !tbaa !64
  %conv151 = zext i8 %101 to i32
  %sub152 = sub nsw i32 %conv150, %conv151
  store i32 %sub152, i32* %__result128, align 4, !tbaa !5
  %102 = load i64, i64* %__s2_len118, align 8, !tbaa !90
  %cmp153 = icmp ugt i64 %102, 2
  br i1 %cmp153, label %land.lhs.true.155, label %if.end.163

land.lhs.true.155:                                ; preds = %if.then.148
  %103 = load i32, i32* %__result128, align 4, !tbaa !5
  %cmp156 = icmp eq i32 %103, 0
  br i1 %cmp156, label %if.then.158, label %if.end.163

if.then.158:                                      ; preds = %land.lhs.true.155
  %104 = load i8*, i8** %__s1126, align 8, !tbaa !1
  %arrayidx159 = getelementptr inbounds i8, i8* %104, i64 3
  %105 = load i8, i8* %arrayidx159, align 1, !tbaa !64
  %conv160 = zext i8 %105 to i32
  %106 = load i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.65, i32 0, i64 3), align 1, !tbaa !64
  %conv161 = zext i8 %106 to i32
  %sub162 = sub nsw i32 %conv160, %conv161
  store i32 %sub162, i32* %__result128, align 4, !tbaa !5
  br label %if.end.163

if.end.163:                                       ; preds = %if.then.158, %land.lhs.true.155, %if.then.148
  br label %if.end.164

if.end.164:                                       ; preds = %if.end.163, %land.lhs.true.145, %if.then.138
  br label %if.end.165

if.end.165:                                       ; preds = %if.end.164, %land.lhs.true.135, %cond.true.124
  %107 = load i32, i32* %__result128, align 4, !tbaa !5
  store i32 %107, i32* %tmp166, !tbaa !5
  %108 = bitcast i32* %__result128 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %108) #2
  %109 = bitcast i8** %__s1126 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %109) #2
  %110 = load i32, i32* %tmp166, !tbaa !5
  br label %cond.end.169

cond.false.167:                                   ; preds = %land.lhs.true.120, %lor.lhs.false.114
  %111 = load i8*, i8** %region, align 8, !tbaa !1
  %call168 = call i32 @strcmp(i8* %111, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.65, i32 0, i32 0)) #8
  br label %cond.end.169

cond.end.169:                                     ; preds = %cond.false.167, %if.end.165
  %cond170 = phi i32 [ %110, %if.end.165 ], [ %call168, %cond.false.167 ]
  store i32 %cond170, i32* %tmp119, !tbaa !5
  %112 = bitcast i64* %__s2_len118 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %112) #2
  %113 = bitcast i64* %__s1_len116 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %113) #2
  %114 = load i32, i32* %tmp119, !tbaa !5
  %cmp171 = icmp eq i32 %114, 0
  br i1 %cmp171, label %if.then.232, label %lor.lhs.false.173

lor.lhs.false.173:                                ; preds = %cond.end.169
  %115 = bitcast i64* %__s1_len175 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %115) #2
  %116 = bitcast i64* %__s2_len177 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %116) #2
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.197, i32 0, i64 1) to i64), i64 ptrtoint ([3 x i8]* @.str.197 to i64)), i64 1), label %land.lhs.true.179, label %cond.false.226

land.lhs.true.179:                                ; preds = %lor.lhs.false.173
  %call180 = call i64 @strlen(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.197, i32 0, i32 0)) #9
  store i64 %call180, i64* %__s2_len177, align 8, !tbaa !90
  %117 = load i64, i64* %__s2_len177, align 8, !tbaa !90
  %cmp181 = icmp ult i64 %117, 4
  br i1 %cmp181, label %cond.true.183, label %cond.false.226

cond.true.183:                                    ; preds = %land.lhs.true.179
  %118 = bitcast i8** %__s1185 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %118) #2
  %119 = load i8*, i8** %region, align 8, !tbaa !1
  store i8* %119, i8** %__s1185, align 8, !tbaa !1
  %120 = bitcast i32* %__result187 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %120) #2
  %121 = load i8*, i8** %__s1185, align 8, !tbaa !1
  %arrayidx188 = getelementptr inbounds i8, i8* %121, i64 0
  %122 = load i8, i8* %arrayidx188, align 1, !tbaa !64
  %conv189 = zext i8 %122 to i32
  %123 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.197, i32 0, i32 0), align 1, !tbaa !64
  %conv190 = zext i8 %123 to i32
  %sub191 = sub nsw i32 %conv189, %conv190
  store i32 %sub191, i32* %__result187, align 4, !tbaa !5
  %124 = load i64, i64* %__s2_len177, align 8, !tbaa !90
  %cmp192 = icmp ugt i64 %124, 0
  br i1 %cmp192, label %land.lhs.true.194, label %if.end.224

land.lhs.true.194:                                ; preds = %cond.true.183
  %125 = load i32, i32* %__result187, align 4, !tbaa !5
  %cmp195 = icmp eq i32 %125, 0
  br i1 %cmp195, label %if.then.197, label %if.end.224

if.then.197:                                      ; preds = %land.lhs.true.194
  %126 = load i8*, i8** %__s1185, align 8, !tbaa !1
  %arrayidx198 = getelementptr inbounds i8, i8* %126, i64 1
  %127 = load i8, i8* %arrayidx198, align 1, !tbaa !64
  %conv199 = zext i8 %127 to i32
  %128 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.197, i32 0, i64 1), align 1, !tbaa !64
  %conv200 = zext i8 %128 to i32
  %sub201 = sub nsw i32 %conv199, %conv200
  store i32 %sub201, i32* %__result187, align 4, !tbaa !5
  %129 = load i64, i64* %__s2_len177, align 8, !tbaa !90
  %cmp202 = icmp ugt i64 %129, 1
  br i1 %cmp202, label %land.lhs.true.204, label %if.end.223

land.lhs.true.204:                                ; preds = %if.then.197
  %130 = load i32, i32* %__result187, align 4, !tbaa !5
  %cmp205 = icmp eq i32 %130, 0
  br i1 %cmp205, label %if.then.207, label %if.end.223

if.then.207:                                      ; preds = %land.lhs.true.204
  %131 = load i8*, i8** %__s1185, align 8, !tbaa !1
  %arrayidx208 = getelementptr inbounds i8, i8* %131, i64 2
  %132 = load i8, i8* %arrayidx208, align 1, !tbaa !64
  %conv209 = zext i8 %132 to i32
  %133 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.197, i32 0, i64 2), align 1, !tbaa !64
  %conv210 = zext i8 %133 to i32
  %sub211 = sub nsw i32 %conv209, %conv210
  store i32 %sub211, i32* %__result187, align 4, !tbaa !5
  %134 = load i64, i64* %__s2_len177, align 8, !tbaa !90
  %cmp212 = icmp ugt i64 %134, 2
  br i1 %cmp212, label %land.lhs.true.214, label %if.end.222

land.lhs.true.214:                                ; preds = %if.then.207
  %135 = load i32, i32* %__result187, align 4, !tbaa !5
  %cmp215 = icmp eq i32 %135, 0
  br i1 %cmp215, label %if.then.217, label %if.end.222

if.then.217:                                      ; preds = %land.lhs.true.214
  %136 = load i8*, i8** %__s1185, align 8, !tbaa !1
  %arrayidx218 = getelementptr inbounds i8, i8* %136, i64 3
  %137 = load i8, i8* %arrayidx218, align 1, !tbaa !64
  %conv219 = zext i8 %137 to i32
  %138 = load i8, i8* getelementptr inbounds (i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.197, i32 0, i32 0), i64 3), align 1, !tbaa !64
  %conv220 = zext i8 %138 to i32
  %sub221 = sub nsw i32 %conv219, %conv220
  store i32 %sub221, i32* %__result187, align 4, !tbaa !5
  br label %if.end.222

if.end.222:                                       ; preds = %if.then.217, %land.lhs.true.214, %if.then.207
  br label %if.end.223

if.end.223:                                       ; preds = %if.end.222, %land.lhs.true.204, %if.then.197
  br label %if.end.224

if.end.224:                                       ; preds = %if.end.223, %land.lhs.true.194, %cond.true.183
  %139 = load i32, i32* %__result187, align 4, !tbaa !5
  store i32 %139, i32* %tmp225, !tbaa !5
  %140 = bitcast i32* %__result187 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %140) #2
  %141 = bitcast i8** %__s1185 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %141) #2
  %142 = load i32, i32* %tmp225, !tbaa !5
  br label %cond.end.228

cond.false.226:                                   ; preds = %land.lhs.true.179, %lor.lhs.false.173
  %143 = load i8*, i8** %region, align 8, !tbaa !1
  %call227 = call i32 @strcmp(i8* %143, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.197, i32 0, i32 0)) #8
  br label %cond.end.228

cond.end.228:                                     ; preds = %cond.false.226, %if.end.224
  %cond229 = phi i32 [ %142, %if.end.224 ], [ %call227, %cond.false.226 ]
  store i32 %cond229, i32* %tmp178, !tbaa !5
  %144 = bitcast i64* %__s2_len177 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %144) #2
  %145 = bitcast i64* %__s1_len175 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %145) #2
  %146 = load i32, i32* %tmp178, !tbaa !5
  %cmp230 = icmp eq i32 %146, 0
  br i1 %cmp230, label %if.then.232, label %if.else

if.then.232:                                      ; preds = %cond.end.228, %cond.end.169, %cond.end.110, %cond.end
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.198, i32 0, i32 0), i8** %unit, align 8, !tbaa !1
  br label %if.end.238

if.else:                                          ; preds = %cond.end.228
  %147 = load float, float* %width, align 4, !tbaa !10
  %conv233 = fpext float %147 to double
  %mul = fmul double %conv233, 2.540000e+01
  %conv234 = fptrunc double %mul to float
  store float %conv234, float* %width, align 4, !tbaa !10
  %148 = load float, float* %height, align 4, !tbaa !10
  %conv235 = fpext float %148 to double
  %mul236 = fmul double %conv235, 2.540000e+01
  %conv237 = fptrunc double %mul236 to float
  store float %conv237, float* %height, align 4, !tbaa !10
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.199, i32 0, i32 0), i8** %unit, align 8, !tbaa !1
  br label %if.end.238

if.end.238:                                       ; preds = %if.else, %if.then.232
  br label %if.end.266

if.else.239:                                      ; preds = %entry
  %149 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %MediaSize = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %149, i32 0, i32 19
  %arrayidx240 = getelementptr inbounds [2 x float], [2 x float]* %MediaSize, i32 0, i64 0
  %150 = load float, float* %arrayidx240, align 4, !tbaa !10
  %151 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %MediaSize241 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %151, i32 0, i32 19
  %arrayidx242 = getelementptr inbounds [2 x float], [2 x float]* %MediaSize241, i32 0, i64 1
  %152 = load float, float* %arrayidx242, align 4, !tbaa !10
  %cmp243 = fcmp olt float %150, %152
  %cond245 = select i1 %cmp243, i32 0, i32 1
  store i32 %cond245, i32* %landscape, align 4, !tbaa !5
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.200, i32 0, i32 0), i8** %region, align 8, !tbaa !1
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.159, i32 0, i32 0), i8** %name, align 8, !tbaa !1
  %153 = load i32, i32* %landscape, align 4, !tbaa !5
  %tobool246 = icmp ne i32 %153, 0
  br i1 %tobool246, label %cond.true.247, label %cond.false.250

cond.true.247:                                    ; preds = %if.else.239
  %154 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %MediaSize248 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %154, i32 0, i32 19
  %arrayidx249 = getelementptr inbounds [2 x float], [2 x float]* %MediaSize248, i32 0, i64 1
  %155 = load float, float* %arrayidx249, align 4, !tbaa !10
  br label %cond.end.253

cond.false.250:                                   ; preds = %if.else.239
  %156 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %MediaSize251 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %156, i32 0, i32 19
  %arrayidx252 = getelementptr inbounds [2 x float], [2 x float]* %MediaSize251, i32 0, i64 0
  %157 = load float, float* %arrayidx252, align 4, !tbaa !10
  br label %cond.end.253

cond.end.253:                                     ; preds = %cond.false.250, %cond.true.247
  %cond254 = phi float [ %155, %cond.true.247 ], [ %157, %cond.false.250 ]
  %div255 = fdiv float %cond254, 7.200000e+01
  store float %div255, float* %width, align 4, !tbaa !10
  %158 = load i32, i32* %landscape, align 4, !tbaa !5
  %tobool256 = icmp ne i32 %158, 0
  br i1 %tobool256, label %cond.true.257, label %cond.false.260

cond.true.257:                                    ; preds = %cond.end.253
  %159 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %MediaSize258 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %159, i32 0, i32 19
  %arrayidx259 = getelementptr inbounds [2 x float], [2 x float]* %MediaSize258, i32 0, i64 0
  %160 = load float, float* %arrayidx259, align 4, !tbaa !10
  br label %cond.end.263

cond.false.260:                                   ; preds = %cond.end.253
  %161 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %MediaSize261 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %161, i32 0, i32 19
  %arrayidx262 = getelementptr inbounds [2 x float], [2 x float]* %MediaSize261, i32 0, i64 1
  %162 = load float, float* %arrayidx262, align 4, !tbaa !10
  br label %cond.end.263

cond.end.263:                                     ; preds = %cond.false.260, %cond.true.257
  %cond264 = phi float [ %160, %cond.true.257 ], [ %162, %cond.false.260 ]
  %div265 = fdiv float %cond264, 7.200000e+01
  store float %div265, float* %height, align 4, !tbaa !10
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.198, i32 0, i32 0), i8** %unit, align 8, !tbaa !1
  br label %if.end.266

if.end.266:                                       ; preds = %cond.end.263, %if.end.238
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %wbuff, i32 0, i32 0
  %call267 = call i8* @memset(i8* %arraydecay, i32 0, i64 1024) #8
  %arraydecay268 = getelementptr inbounds [1024 x i8], [1024 x i8]* %wbuff, i32 0, i32 0
  %163 = load i8*, i8** %region, align 8, !tbaa !1
  %164 = load i8*, i8** %name, align 8, !tbaa !1
  %165 = load float, float* %width, align 4, !tbaa !10
  %166 = load float, float* %height, align 4, !tbaa !10
  %call269 = call i8* @opvp_get_sizestring(float %165, float %166) #7
  %167 = load i8*, i8** %unit, align 8, !tbaa !1
  %call270 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %arraydecay268, i64 1023, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.201, i32 0, i32 0), i8* %163, i8* %164, i8* %call269, i8* %167) #8
  %arraydecay271 = getelementptr inbounds [1024 x i8], [1024 x i8]* %wbuff, i32 0, i32 0
  %call272 = call i8* @opvp_alloc_string(i8** @opvp_get_mediasize.buff, i8* %arraydecay271) #7
  store i8* %call272, i8** @opvp_get_mediasize.buff, align 8, !tbaa !1
  %168 = load i8*, i8** @opvp_get_mediasize.buff, align 8, !tbaa !1
  %169 = bitcast i32* %landscape to i8*
  call void @llvm.lifetime.end(i64 4, i8* %169) #2
  %170 = bitcast i8** %unit to i8*
  call void @llvm.lifetime.end(i64 8, i8* %170) #2
  %171 = bitcast float* %height to i8*
  call void @llvm.lifetime.end(i64 4, i8* %171) #2
  %172 = bitcast float* %width to i8*
  call void @llvm.lifetime.end(i64 4, i8* %172) #2
  %173 = bitcast i8** %name to i8*
  call void @llvm.lifetime.end(i64 8, i8* %173) #2
  %174 = bitcast i8** %region to i8*
  call void @llvm.lifetime.end(i64 8, i8* %174) #2
  %175 = bitcast [1024 x i8]* %wbuff to i8*
  call void @llvm.lifetime.end(i64 1024, i8* %175) #2
  %176 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %176) #2
  ret i8* %168
}

; Function Attrs: nounwind uwtable
define internal i8* @opvp_adjust_num_string(i8* %num_string) #0 {
entry:
  %retval = alloca i8*, align 8
  %num_string.addr = alloca i8*, align 8
  %pp = alloca i8*, align 8
  %lp = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  store i8* %num_string, i8** %num_string.addr, align 8, !tbaa !1
  %0 = bitcast i8** %pp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = bitcast i8** %lp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #2
  %2 = load i8*, i8** %num_string.addr, align 8, !tbaa !1
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %num_string.addr, align 8, !tbaa !1
  %call = call i8* @strrchr(i8* %3, i32 46) #9
  store i8* %call, i8** %pp, align 8, !tbaa !1
  %tobool1 = icmp ne i8* %call, null
  br i1 %tobool1, label %if.then.2, label %if.end.12

if.then.2:                                        ; preds = %if.end
  %4 = load i8*, i8** %num_string.addr, align 8, !tbaa !1
  %call3 = call i64 @strlen(i8* %4) #9
  %sub = sub i64 %call3, 1
  %5 = load i8*, i8** %num_string.addr, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 %sub
  store i8* %arrayidx, i8** %lp, align 8, !tbaa !1
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.2
  %6 = load i8*, i8** %lp, align 8, !tbaa !1
  %7 = load i8*, i8** %pp, align 8, !tbaa !1
  %cmp = icmp ugt i8* %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i8*, i8** %lp, align 8, !tbaa !1
  %9 = load i8, i8* %8, align 1, !tbaa !64
  %conv = sext i8 %9 to i32
  %cmp4 = icmp eq i32 %conv, 48
  br i1 %cmp4, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %for.body
  %10 = load i8*, i8** %lp, align 8, !tbaa !1
  store i8 0, i8* %10, align 1, !tbaa !64
  br label %if.end.7

if.else:                                          ; preds = %for.body
  br label %for.end

if.end.7:                                         ; preds = %if.then.6
  br label %for.inc

for.inc:                                          ; preds = %if.end.7
  %11 = load i8*, i8** %lp, align 8, !tbaa !1
  %incdec.ptr = getelementptr inbounds i8, i8* %11, i32 -1
  store i8* %incdec.ptr, i8** %lp, align 8, !tbaa !1
  br label %for.cond

for.end:                                          ; preds = %if.else, %for.cond
  %12 = load i8*, i8** %lp, align 8, !tbaa !1
  %13 = load i8*, i8** %pp, align 8, !tbaa !1
  %cmp8 = icmp eq i8* %12, %13
  br i1 %cmp8, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %for.end
  %14 = load i8*, i8** %lp, align 8, !tbaa !1
  store i8 0, i8* %14, align 1, !tbaa !64
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.10, %for.end
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end
  %15 = load i8*, i8** %num_string.addr, align 8, !tbaa !1
  store i8* %15, i8** %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.12, %if.then
  %16 = bitcast i8** %lp to i8*
  call void @llvm.lifetime.end(i64 8, i8* %16) #2
  %17 = bitcast i8** %pp to i8*
  call void @llvm.lifetime.end(i64 8, i8* %17) #2
  %18 = load i8*, i8** %retval
  ret i8* %18
}

; Function Attrs: nounwind readonly
declare i8* @strrchr(i8*, i32) #3

; Function Attrs: nounwind uwtable
define internal i32 @opvp_get_papertable_index(%struct.gx_device_s* %pdev) #0 {
entry:
  %pdev.addr = alloca %struct.gx_device_s*, align 8
  %i = alloca i32, align 4
  %width = alloca float, align 4
  %height = alloca float, align 4
  %landscape = alloca i32, align 4
  %paper_w = alloca float, align 4
  %paper_h = alloca float, align 4
  %prev = alloca float, align 4
  %paper = alloca i32, align 4
  %candidate = alloca i32, align 4
  %smaller = alloca i32, align 4
  %larger = alloca i32, align 4
  %s_candi = alloca i32, align 4
  %l_candi = alloca i32, align 4
  %h_delta = alloca float, align 4
  %sw_delta = alloca float, align 4
  %sh_delta = alloca float, align 4
  %lw_delta = alloca float, align 4
  %lh_delta = alloca float, align 4
  %match = alloca i32, align 4
  %f = alloca float, align 4
  store %struct.gx_device_s* %pdev, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = bitcast float* %width to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #2
  %2 = bitcast float* %height to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #2
  %3 = bitcast i32* %landscape to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  %4 = bitcast float* %paper_w to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  %5 = bitcast float* %paper_h to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #2
  %6 = bitcast float* %prev to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #2
  store float -1.000000e+00, float* %prev, align 4, !tbaa !10
  %7 = bitcast i32* %paper to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #2
  store i32 -1, i32* %paper, align 4, !tbaa !5
  %8 = bitcast i32* %candidate to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #2
  store i32 -1, i32* %candidate, align 4, !tbaa !5
  %9 = bitcast i32* %smaller to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #2
  store i32 -1, i32* %smaller, align 4, !tbaa !5
  %10 = bitcast i32* %larger to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #2
  store i32 -1, i32* %larger, align 4, !tbaa !5
  %11 = bitcast i32* %s_candi to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #2
  store i32 -1, i32* %s_candi, align 4, !tbaa !5
  %12 = bitcast i32* %l_candi to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #2
  store i32 -1, i32* %l_candi, align 4, !tbaa !5
  %13 = bitcast float* %h_delta to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #2
  store float 3.000000e+00, float* %h_delta, align 4, !tbaa !10
  %14 = bitcast float* %sw_delta to i8*
  call void @llvm.lifetime.start(i64 4, i8* %14) #2
  store float 3.000000e+00, float* %sw_delta, align 4, !tbaa !10
  %15 = bitcast float* %sh_delta to i8*
  call void @llvm.lifetime.start(i64 4, i8* %15) #2
  store float 3.000000e+00, float* %sh_delta, align 4, !tbaa !10
  %16 = bitcast float* %lw_delta to i8*
  call void @llvm.lifetime.start(i64 4, i8* %16) #2
  store float 3.000000e+00, float* %lw_delta, align 4, !tbaa !10
  %17 = bitcast float* %lh_delta to i8*
  call void @llvm.lifetime.start(i64 4, i8* %17) #2
  store float 3.000000e+00, float* %lh_delta, align 4, !tbaa !10
  %18 = bitcast i32* %match to i8*
  call void @llvm.lifetime.start(i64 4, i8* %18) #2
  store i32 0, i32* %match, align 4, !tbaa !5
  %19 = bitcast float* %f to i8*
  call void @llvm.lifetime.start(i64 4, i8* %19) #2
  %20 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %MediaSize = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %20, i32 0, i32 19
  %arrayidx = getelementptr inbounds [2 x float], [2 x float]* %MediaSize, i32 0, i64 0
  %21 = load float, float* %arrayidx, align 4, !tbaa !10
  %22 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %MediaSize1 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %22, i32 0, i32 19
  %arrayidx2 = getelementptr inbounds [2 x float], [2 x float]* %MediaSize1, i32 0, i64 1
  %23 = load float, float* %arrayidx2, align 4, !tbaa !10
  %cmp = fcmp olt float %21, %23
  %cond = select i1 %cmp, i32 0, i32 1
  store i32 %cond, i32* %landscape, align 4, !tbaa !5
  %24 = load i32, i32* %landscape, align 4, !tbaa !5
  %tobool = icmp ne i32 %24, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %25 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %MediaSize3 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %25, i32 0, i32 19
  %arrayidx4 = getelementptr inbounds [2 x float], [2 x float]* %MediaSize3, i32 0, i64 1
  %26 = load float, float* %arrayidx4, align 4, !tbaa !10
  br label %cond.end

cond.false:                                       ; preds = %entry
  %27 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %MediaSize5 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %27, i32 0, i32 19
  %arrayidx6 = getelementptr inbounds [2 x float], [2 x float]* %MediaSize5, i32 0, i64 0
  %28 = load float, float* %arrayidx6, align 4, !tbaa !10
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond7 = phi float [ %26, %cond.true ], [ %28, %cond.false ]
  store float %cond7, float* %width, align 4, !tbaa !10
  %29 = load i32, i32* %landscape, align 4, !tbaa !5
  %tobool8 = icmp ne i32 %29, 0
  br i1 %tobool8, label %cond.true.9, label %cond.false.12

cond.true.9:                                      ; preds = %cond.end
  %30 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %MediaSize10 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %30, i32 0, i32 19
  %arrayidx11 = getelementptr inbounds [2 x float], [2 x float]* %MediaSize10, i32 0, i64 0
  %31 = load float, float* %arrayidx11, align 4, !tbaa !10
  br label %cond.end.15

cond.false.12:                                    ; preds = %cond.end
  %32 = load %struct.gx_device_s*, %struct.gx_device_s** %pdev.addr, align 8, !tbaa !1
  %MediaSize13 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %32, i32 0, i32 19
  %arrayidx14 = getelementptr inbounds [2 x float], [2 x float]* %MediaSize13, i32 0, i64 1
  %33 = load float, float* %arrayidx14, align 4, !tbaa !10
  br label %cond.end.15

cond.end.15:                                      ; preds = %cond.false.12, %cond.true.9
  %cond16 = phi float [ %31, %cond.true.9 ], [ %33, %cond.false.12 ]
  store float %cond16, float* %height, align 4, !tbaa !10
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end.15
  %34 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom = sext i32 %34 to i64
  %arrayidx17 = getelementptr inbounds [166 x %struct.OPVP_Paper], [166 x %struct.OPVP_Paper]* @paperTable, i32 0, i64 %idxprom
  %name = getelementptr inbounds %struct.OPVP_Paper, %struct.OPVP_Paper* %arrayidx17, i32 0, i32 1
  %35 = load i8*, i8** %name, align 8, !tbaa !311
  %cmp18 = icmp ne i8* %35, null
  br i1 %cmp18, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %36 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom19 = sext i32 %36 to i64
  %arrayidx20 = getelementptr inbounds [166 x %struct.OPVP_Paper], [166 x %struct.OPVP_Paper]* @paperTable, i32 0, i64 %idxprom19
  %width21 = getelementptr inbounds %struct.OPVP_Paper, %struct.OPVP_Paper* %arrayidx20, i32 0, i32 2
  %37 = load float, float* %width21, align 4, !tbaa !314
  store float %37, float* %paper_w, align 4, !tbaa !10
  %38 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom22 = sext i32 %38 to i64
  %arrayidx23 = getelementptr inbounds [166 x %struct.OPVP_Paper], [166 x %struct.OPVP_Paper]* @paperTable, i32 0, i64 %idxprom22
  %height24 = getelementptr inbounds %struct.OPVP_Paper, %struct.OPVP_Paper* %arrayidx23, i32 0, i32 3
  %39 = load float, float* %height24, align 4, !tbaa !315
  store float %39, float* %paper_h, align 4, !tbaa !10
  %40 = load float, float* %width, align 4, !tbaa !10
  %41 = load float, float* %paper_w, align 4, !tbaa !10
  %cmp25 = fcmp oeq float %40, %41
  br i1 %cmp25, label %if.then, label %if.else.36

if.then:                                          ; preds = %for.body
  %42 = load float, float* %height, align 4, !tbaa !10
  %43 = load float, float* %paper_h, align 4, !tbaa !10
  %cmp26 = fcmp oeq float %42, %43
  br i1 %cmp26, label %if.then.27, label %if.else

if.then.27:                                       ; preds = %if.then
  %44 = load i32, i32* %i, align 4, !tbaa !5
  store i32 %44, i32* %paper, align 4, !tbaa !5
  store i32 1, i32* %match, align 4, !tbaa !5
  br label %for.end

if.else:                                          ; preds = %if.then
  %45 = load float, float* %height, align 4, !tbaa !10
  %46 = load float, float* %paper_h, align 4, !tbaa !10
  %sub = fsub float %45, %46
  %call = call float @opvp_fabsf(float %sub) #7
  store float %call, float* %f, align 4, !tbaa !10
  %conv = fpext float %call to double
  %cmp28 = fcmp olt double %conv, 3.000000e+00
  br i1 %cmp28, label %if.then.30, label %if.end.34

if.then.30:                                       ; preds = %if.else
  %47 = load float, float* %f, align 4, !tbaa !10
  %48 = load float, float* %h_delta, align 4, !tbaa !10
  %cmp31 = fcmp olt float %47, %48
  br i1 %cmp31, label %if.then.33, label %if.end

if.then.33:                                       ; preds = %if.then.30
  %49 = load float, float* %f, align 4, !tbaa !10
  store float %49, float* %h_delta, align 4, !tbaa !10
  %50 = load i32, i32* %i, align 4, !tbaa !5
  store i32 %50, i32* %candidate, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.then.33, %if.then.30
  br label %if.end.34

if.end.34:                                        ; preds = %if.end, %if.else
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34
  br label %if.end.73

if.else.36:                                       ; preds = %for.body
  %51 = load i32, i32* %candidate, align 4, !tbaa !5
  %cmp37 = icmp ne i32 %51, -1
  br i1 %cmp37, label %if.then.39, label %if.else.40

if.then.39:                                       ; preds = %if.else.36
  %52 = load i32, i32* %candidate, align 4, !tbaa !5
  store i32 %52, i32* %paper, align 4, !tbaa !5
  store i32 1, i32* %match, align 4, !tbaa !5
  br label %for.end

if.else.40:                                       ; preds = %if.else.36
  %53 = load float, float* %prev, align 4, !tbaa !10
  %54 = load float, float* %paper_w, align 4, !tbaa !10
  %cmp41 = fcmp une float %53, %54
  br i1 %cmp41, label %if.then.43, label %if.end.71

if.then.43:                                       ; preds = %if.else.40
  %55 = load float, float* %paper_w, align 4, !tbaa !10
  store float %55, float* %prev, align 4, !tbaa !10
  %56 = load float, float* %paper_w, align 4, !tbaa !10
  %57 = load float, float* %width, align 4, !tbaa !10
  %cmp44 = fcmp olt float %56, %57
  br i1 %cmp44, label %if.then.46, label %if.else.58

if.then.46:                                       ; preds = %if.then.43
  %58 = load float, float* %width, align 4, !tbaa !10
  %59 = load float, float* %paper_w, align 4, !tbaa !10
  %sub47 = fsub float %58, %59
  %call48 = call float @opvp_fabsf(float %sub47) #7
  store float %call48, float* %f, align 4, !tbaa !10
  %conv49 = fpext float %call48 to double
  %cmp50 = fcmp olt double %conv49, 3.000000e+00
  br i1 %cmp50, label %if.then.52, label %if.end.57

if.then.52:                                       ; preds = %if.then.46
  %60 = load float, float* %f, align 4, !tbaa !10
  %61 = load float, float* %sw_delta, align 4, !tbaa !10
  %cmp53 = fcmp olt float %60, %61
  br i1 %cmp53, label %if.then.55, label %if.end.56

if.then.55:                                       ; preds = %if.then.52
  %62 = load float, float* %f, align 4, !tbaa !10
  store float %62, float* %sw_delta, align 4, !tbaa !10
  %63 = load i32, i32* %i, align 4, !tbaa !5
  store i32 %63, i32* %smaller, align 4, !tbaa !5
  br label %if.end.56

if.end.56:                                        ; preds = %if.then.55, %if.then.52
  br label %if.end.57

if.end.57:                                        ; preds = %if.end.56, %if.then.46
  br label %if.end.70

if.else.58:                                       ; preds = %if.then.43
  %64 = load float, float* %width, align 4, !tbaa !10
  %65 = load float, float* %paper_w, align 4, !tbaa !10
  %sub59 = fsub float %64, %65
  %call60 = call float @opvp_fabsf(float %sub59) #7
  store float %call60, float* %f, align 4, !tbaa !10
  %conv61 = fpext float %call60 to double
  %cmp62 = fcmp olt double %conv61, 3.000000e+00
  br i1 %cmp62, label %if.then.64, label %if.end.69

if.then.64:                                       ; preds = %if.else.58
  %66 = load float, float* %f, align 4, !tbaa !10
  %67 = load float, float* %lw_delta, align 4, !tbaa !10
  %cmp65 = fcmp olt float %66, %67
  br i1 %cmp65, label %if.then.67, label %if.end.68

if.then.67:                                       ; preds = %if.then.64
  %68 = load float, float* %f, align 4, !tbaa !10
  store float %68, float* %lw_delta, align 4, !tbaa !10
  %69 = load i32, i32* %i, align 4, !tbaa !5
  store i32 %69, i32* %larger, align 4, !tbaa !5
  br label %if.end.68

if.end.68:                                        ; preds = %if.then.67, %if.then.64
  br label %if.end.69

if.end.69:                                        ; preds = %if.end.68, %if.else.58
  br label %if.end.70

if.end.70:                                        ; preds = %if.end.69, %if.end.57
  br label %if.end.71

if.end.71:                                        ; preds = %if.end.70, %if.else.40
  br label %if.end.72

if.end.72:                                        ; preds = %if.end.71
  br label %if.end.73

if.end.73:                                        ; preds = %if.end.72, %if.end.35
  br label %for.inc

for.inc:                                          ; preds = %if.end.73
  %70 = load i32, i32* %i, align 4, !tbaa !5
  %inc = add nsw i32 %70, 1
  store i32 %inc, i32* %i, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %if.then.39, %if.then.27, %for.cond
  %71 = load i32, i32* %match, align 4, !tbaa !5
  %tobool74 = icmp ne i32 %71, 0
  br i1 %tobool74, label %if.end.168, label %if.then.75

if.then.75:                                       ; preds = %for.end
  %72 = load i32, i32* %i, align 4, !tbaa !5
  store i32 %72, i32* %paper, align 4, !tbaa !5
  %73 = load i32, i32* %smaller, align 4, !tbaa !5
  %cmp76 = icmp ne i32 %73, -1
  br i1 %cmp76, label %if.then.78, label %if.end.111

if.then.78:                                       ; preds = %if.then.75
  %74 = load i32, i32* %smaller, align 4, !tbaa !5
  %idxprom79 = sext i32 %74 to i64
  %arrayidx80 = getelementptr inbounds [166 x %struct.OPVP_Paper], [166 x %struct.OPVP_Paper]* @paperTable, i32 0, i64 %idxprom79
  %width81 = getelementptr inbounds %struct.OPVP_Paper, %struct.OPVP_Paper* %arrayidx80, i32 0, i32 2
  %75 = load float, float* %width81, align 4, !tbaa !314
  store float %75, float* %paper_w, align 4, !tbaa !10
  %76 = load i32, i32* %smaller, align 4, !tbaa !5
  store i32 %76, i32* %i, align 4, !tbaa !5
  br label %for.cond.82

for.cond.82:                                      ; preds = %for.inc.108, %if.then.78
  %77 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom83 = sext i32 %77 to i64
  %arrayidx84 = getelementptr inbounds [166 x %struct.OPVP_Paper], [166 x %struct.OPVP_Paper]* @paperTable, i32 0, i64 %idxprom83
  %width85 = getelementptr inbounds %struct.OPVP_Paper, %struct.OPVP_Paper* %arrayidx84, i32 0, i32 2
  %78 = load float, float* %width85, align 4, !tbaa !314
  %79 = load float, float* %paper_w, align 4, !tbaa !10
  %cmp86 = fcmp oeq float %78, %79
  br i1 %cmp86, label %for.body.88, label %for.end.110

for.body.88:                                      ; preds = %for.cond.82
  %80 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom89 = sext i32 %80 to i64
  %arrayidx90 = getelementptr inbounds [166 x %struct.OPVP_Paper], [166 x %struct.OPVP_Paper]* @paperTable, i32 0, i64 %idxprom89
  %height91 = getelementptr inbounds %struct.OPVP_Paper, %struct.OPVP_Paper* %arrayidx90, i32 0, i32 3
  %81 = load float, float* %height91, align 4, !tbaa !315
  store float %81, float* %paper_h, align 4, !tbaa !10
  %82 = load float, float* %height, align 4, !tbaa !10
  %83 = load float, float* %paper_h, align 4, !tbaa !10
  %cmp92 = fcmp oeq float %82, %83
  br i1 %cmp92, label %if.then.94, label %if.else.95

if.then.94:                                       ; preds = %for.body.88
  store float 0.000000e+00, float* %sh_delta, align 4, !tbaa !10
  %84 = load i32, i32* %i, align 4, !tbaa !5
  store i32 %84, i32* %s_candi, align 4, !tbaa !5
  br label %for.end.110

if.else.95:                                       ; preds = %for.body.88
  %85 = load float, float* %height, align 4, !tbaa !10
  %86 = load float, float* %paper_h, align 4, !tbaa !10
  %sub96 = fsub float %85, %86
  %call97 = call float @opvp_fabsf(float %sub96) #7
  store float %call97, float* %f, align 4, !tbaa !10
  %conv98 = fpext float %call97 to double
  %cmp99 = fcmp olt double %conv98, 3.000000e+00
  br i1 %cmp99, label %if.then.101, label %if.end.106

if.then.101:                                      ; preds = %if.else.95
  %87 = load float, float* %f, align 4, !tbaa !10
  %88 = load float, float* %sh_delta, align 4, !tbaa !10
  %cmp102 = fcmp olt float %87, %88
  br i1 %cmp102, label %if.then.104, label %if.end.105

if.then.104:                                      ; preds = %if.then.101
  %89 = load float, float* %f, align 4, !tbaa !10
  store float %89, float* %sh_delta, align 4, !tbaa !10
  %90 = load i32, i32* %i, align 4, !tbaa !5
  store i32 %90, i32* %s_candi, align 4, !tbaa !5
  br label %if.end.105

if.end.105:                                       ; preds = %if.then.104, %if.then.101
  br label %if.end.106

if.end.106:                                       ; preds = %if.end.105, %if.else.95
  br label %if.end.107

if.end.107:                                       ; preds = %if.end.106
  br label %for.inc.108

for.inc.108:                                      ; preds = %if.end.107
  %91 = load i32, i32* %i, align 4, !tbaa !5
  %inc109 = add nsw i32 %91, 1
  store i32 %inc109, i32* %i, align 4, !tbaa !5
  br label %for.cond.82

for.end.110:                                      ; preds = %if.then.94, %for.cond.82
  br label %if.end.111

if.end.111:                                       ; preds = %for.end.110, %if.then.75
  %92 = load i32, i32* %larger, align 4, !tbaa !5
  %cmp112 = icmp ne i32 %92, -1
  br i1 %cmp112, label %if.then.114, label %if.end.147

if.then.114:                                      ; preds = %if.end.111
  %93 = load i32, i32* %larger, align 4, !tbaa !5
  %idxprom115 = sext i32 %93 to i64
  %arrayidx116 = getelementptr inbounds [166 x %struct.OPVP_Paper], [166 x %struct.OPVP_Paper]* @paperTable, i32 0, i64 %idxprom115
  %width117 = getelementptr inbounds %struct.OPVP_Paper, %struct.OPVP_Paper* %arrayidx116, i32 0, i32 2
  %94 = load float, float* %width117, align 4, !tbaa !314
  store float %94, float* %paper_w, align 4, !tbaa !10
  %95 = load i32, i32* %larger, align 4, !tbaa !5
  store i32 %95, i32* %i, align 4, !tbaa !5
  br label %for.cond.118

for.cond.118:                                     ; preds = %for.inc.144, %if.then.114
  %96 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom119 = sext i32 %96 to i64
  %arrayidx120 = getelementptr inbounds [166 x %struct.OPVP_Paper], [166 x %struct.OPVP_Paper]* @paperTable, i32 0, i64 %idxprom119
  %width121 = getelementptr inbounds %struct.OPVP_Paper, %struct.OPVP_Paper* %arrayidx120, i32 0, i32 2
  %97 = load float, float* %width121, align 4, !tbaa !314
  %98 = load float, float* %paper_w, align 4, !tbaa !10
  %cmp122 = fcmp oeq float %97, %98
  br i1 %cmp122, label %for.body.124, label %for.end.146

for.body.124:                                     ; preds = %for.cond.118
  %99 = load i32, i32* %i, align 4, !tbaa !5
  %idxprom125 = sext i32 %99 to i64
  %arrayidx126 = getelementptr inbounds [166 x %struct.OPVP_Paper], [166 x %struct.OPVP_Paper]* @paperTable, i32 0, i64 %idxprom125
  %height127 = getelementptr inbounds %struct.OPVP_Paper, %struct.OPVP_Paper* %arrayidx126, i32 0, i32 3
  %100 = load float, float* %height127, align 4, !tbaa !315
  store float %100, float* %paper_h, align 4, !tbaa !10
  %101 = load float, float* %height, align 4, !tbaa !10
  %102 = load float, float* %paper_h, align 4, !tbaa !10
  %cmp128 = fcmp oeq float %101, %102
  br i1 %cmp128, label %if.then.130, label %if.else.131

if.then.130:                                      ; preds = %for.body.124
  store float 0.000000e+00, float* %lh_delta, align 4, !tbaa !10
  %103 = load i32, i32* %i, align 4, !tbaa !5
  store i32 %103, i32* %l_candi, align 4, !tbaa !5
  br label %for.end.146

if.else.131:                                      ; preds = %for.body.124
  %104 = load float, float* %height, align 4, !tbaa !10
  %105 = load float, float* %paper_h, align 4, !tbaa !10
  %sub132 = fsub float %104, %105
  %call133 = call float @opvp_fabsf(float %sub132) #7
  store float %call133, float* %f, align 4, !tbaa !10
  %conv134 = fpext float %call133 to double
  %cmp135 = fcmp olt double %conv134, 3.000000e+00
  br i1 %cmp135, label %if.then.137, label %if.end.142

if.then.137:                                      ; preds = %if.else.131
  %106 = load float, float* %f, align 4, !tbaa !10
  %107 = load float, float* %lh_delta, align 4, !tbaa !10
  %cmp138 = fcmp olt float %106, %107
  br i1 %cmp138, label %if.then.140, label %if.end.141

if.then.140:                                      ; preds = %if.then.137
  %108 = load float, float* %f, align 4, !tbaa !10
  store float %108, float* %lh_delta, align 4, !tbaa !10
  %109 = load i32, i32* %i, align 4, !tbaa !5
  store i32 %109, i32* %l_candi, align 4, !tbaa !5
  br label %if.end.141

if.end.141:                                       ; preds = %if.then.140, %if.then.137
  br label %if.end.142

if.end.142:                                       ; preds = %if.end.141, %if.else.131
  br label %if.end.143

if.end.143:                                       ; preds = %if.end.142
  br label %for.inc.144

for.inc.144:                                      ; preds = %if.end.143
  %110 = load i32, i32* %i, align 4, !tbaa !5
  %inc145 = add nsw i32 %110, 1
  store i32 %inc145, i32* %i, align 4, !tbaa !5
  br label %for.cond.118

for.end.146:                                      ; preds = %if.then.130, %for.cond.118
  br label %if.end.147

if.end.147:                                       ; preds = %for.end.146, %if.end.111
  %111 = load i32, i32* %s_candi, align 4, !tbaa !5
  %cmp148 = icmp ne i32 %111, -1
  br i1 %cmp148, label %if.then.150, label %if.else.162

if.then.150:                                      ; preds = %if.end.147
  %112 = load i32, i32* %l_candi, align 4, !tbaa !5
  %cmp151 = icmp ne i32 %112, -1
  br i1 %cmp151, label %if.then.153, label %if.else.160

if.then.153:                                      ; preds = %if.then.150
  %113 = load float, float* %sw_delta, align 4, !tbaa !10
  %114 = load float, float* %sh_delta, align 4, !tbaa !10
  %add = fadd float %113, %114
  %115 = load float, float* %lw_delta, align 4, !tbaa !10
  %116 = load float, float* %lh_delta, align 4, !tbaa !10
  %add154 = fadd float %115, %116
  %cmp155 = fcmp olt float %add, %add154
  br i1 %cmp155, label %if.then.157, label %if.else.158

if.then.157:                                      ; preds = %if.then.153
  %117 = load i32, i32* %s_candi, align 4, !tbaa !5
  store i32 %117, i32* %paper, align 4, !tbaa !5
  br label %if.end.159

if.else.158:                                      ; preds = %if.then.153
  %118 = load i32, i32* %l_candi, align 4, !tbaa !5
  store i32 %118, i32* %paper, align 4, !tbaa !5
  br label %if.end.159

if.end.159:                                       ; preds = %if.else.158, %if.then.157
  br label %if.end.161

if.else.160:                                      ; preds = %if.then.150
  %119 = load i32, i32* %s_candi, align 4, !tbaa !5
  store i32 %119, i32* %paper, align 4, !tbaa !5
  br label %if.end.161

if.end.161:                                       ; preds = %if.else.160, %if.end.159
  br label %if.end.167

if.else.162:                                      ; preds = %if.end.147
  %120 = load i32, i32* %l_candi, align 4, !tbaa !5
  %cmp163 = icmp ne i32 %120, -1
  br i1 %cmp163, label %if.then.165, label %if.end.166

if.then.165:                                      ; preds = %if.else.162
  %121 = load i32, i32* %l_candi, align 4, !tbaa !5
  store i32 %121, i32* %paper, align 4, !tbaa !5
  br label %if.end.166

if.end.166:                                       ; preds = %if.then.165, %if.else.162
  br label %if.end.167

if.end.167:                                       ; preds = %if.end.166, %if.end.161
  br label %if.end.168

if.end.168:                                       ; preds = %if.end.167, %for.end
  %122 = load i32, i32* %paper, align 4, !tbaa !5
  %123 = bitcast float* %f to i8*
  call void @llvm.lifetime.end(i64 4, i8* %123) #2
  %124 = bitcast i32* %match to i8*
  call void @llvm.lifetime.end(i64 4, i8* %124) #2
  %125 = bitcast float* %lh_delta to i8*
  call void @llvm.lifetime.end(i64 4, i8* %125) #2
  %126 = bitcast float* %lw_delta to i8*
  call void @llvm.lifetime.end(i64 4, i8* %126) #2
  %127 = bitcast float* %sh_delta to i8*
  call void @llvm.lifetime.end(i64 4, i8* %127) #2
  %128 = bitcast float* %sw_delta to i8*
  call void @llvm.lifetime.end(i64 4, i8* %128) #2
  %129 = bitcast float* %h_delta to i8*
  call void @llvm.lifetime.end(i64 4, i8* %129) #2
  %130 = bitcast i32* %l_candi to i8*
  call void @llvm.lifetime.end(i64 4, i8* %130) #2
  %131 = bitcast i32* %s_candi to i8*
  call void @llvm.lifetime.end(i64 4, i8* %131) #2
  %132 = bitcast i32* %larger to i8*
  call void @llvm.lifetime.end(i64 4, i8* %132) #2
  %133 = bitcast i32* %smaller to i8*
  call void @llvm.lifetime.end(i64 4, i8* %133) #2
  %134 = bitcast i32* %candidate to i8*
  call void @llvm.lifetime.end(i64 4, i8* %134) #2
  %135 = bitcast i32* %paper to i8*
  call void @llvm.lifetime.end(i64 4, i8* %135) #2
  %136 = bitcast float* %prev to i8*
  call void @llvm.lifetime.end(i64 4, i8* %136) #2
  %137 = bitcast float* %paper_h to i8*
  call void @llvm.lifetime.end(i64 4, i8* %137) #2
  %138 = bitcast float* %paper_w to i8*
  call void @llvm.lifetime.end(i64 4, i8* %138) #2
  %139 = bitcast i32* %landscape to i8*
  call void @llvm.lifetime.end(i64 4, i8* %139) #2
  %140 = bitcast float* %height to i8*
  call void @llvm.lifetime.end(i64 4, i8* %140) #2
  %141 = bitcast float* %width to i8*
  call void @llvm.lifetime.end(i64 4, i8* %141) #2
  %142 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %142) #2
  ret i32 %122
}

; Function Attrs: nounwind
declare i32 @strcmp(i8*, i8*) #4

; Function Attrs: nounwind uwtable
define internal float @opvp_fabsf(float %f) #0 {
entry:
  %f.addr = alloca float, align 4
  store float %f, float* %f.addr, align 4, !tbaa !10
  %0 = load float, float* %f.addr, align 4, !tbaa !10
  %conv = fpext float %0 to double
  %call = call double @fabs(double %conv) #10
  %conv1 = fptrunc double %call to float
  ret float %conv1
}

; Function Attrs: nounwind readnone
declare double @fabs(double) #6

; Function Attrs: nounwind readnone
declare double @floor(double) #6

; Function Attrs: nounwind uwtable
define internal i32 @opvp_set_brush_color(%struct.gx_device_opvp_s* %pdev, i64 %color, %struct._opvp_brush* %brush) #0 {
entry:
  %pdev.addr = alloca %struct.gx_device_opvp_s*, align 8
  %color.addr = alloca i64, align 8
  %brush.addr = alloca %struct._opvp_brush*, align 8
  %code = alloca i32, align 4
  %ecode = alloca i32, align 4
  %rgb = alloca [3 x i16], align 2
  store %struct.gx_device_opvp_s* %pdev, %struct.gx_device_opvp_s** %pdev.addr, align 8, !tbaa !1
  store i64 %color, i64* %color.addr, align 8, !tbaa !90
  store %struct._opvp_brush* %brush, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %0 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  %1 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %2 = bitcast [3 x i16]* %rgb to i8*
  call void @llvm.lifetime.start(i64 6, i8* %2) #2
  %3 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev.addr, align 8, !tbaa !1
  %4 = bitcast %struct.gx_device_opvp_s* %3 to %struct.gx_device_s*
  %5 = load i64, i64* %color.addr, align 8, !tbaa !90
  %arraydecay = getelementptr inbounds [3 x i16], [3 x i16]* %rgb, i32 0, i32 0
  %call = call i32 @opvp_map_color_rgb(%struct.gx_device_s* %4, i64 %5, i16* %arraydecay) #7
  store i32 %call, i32* %code, align 4, !tbaa !5
  %6 = load i32, i32* %code, align 4, !tbaa !5
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load i32, i32* @colorSpace, align 4, !tbaa !64
  %8 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %colorSpace = getelementptr inbounds %struct._opvp_brush, %struct._opvp_brush* %8, i32 0, i32 0
  store i32 %7, i32* %colorSpace, align 4, !tbaa !270
  %9 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %pbrush = getelementptr inbounds %struct._opvp_brush, %struct._opvp_brush* %9, i32 0, i32 4
  store %struct._opvp_brushdata* null, %struct._opvp_brushdata** %pbrush, align 8, !tbaa !278
  %10 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %yorg = getelementptr inbounds %struct._opvp_brush, %struct._opvp_brush* %10, i32 0, i32 3
  store i32 0, i32* %yorg, align 4, !tbaa !276
  %11 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %xorg = getelementptr inbounds %struct._opvp_brush, %struct._opvp_brush* %11, i32 0, i32 2
  store i32 0, i32* %xorg, align 4, !tbaa !274
  %12 = load i64, i64* %color.addr, align 8, !tbaa !90
  %cmp = icmp eq i64 %12, -1
  %cond = select i1 %cmp, i32 -1, i32 0
  %13 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %color1 = getelementptr inbounds %struct._opvp_brush, %struct._opvp_brush* %13, i32 0, i32 1
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %color1, i32 0, i64 3
  store i32 %cond, i32* %arrayidx, align 4, !tbaa !5
  %arrayidx2 = getelementptr inbounds [3 x i16], [3 x i16]* %rgb, i32 0, i64 0
  %14 = load i16, i16* %arrayidx2, align 2, !tbaa !89
  %conv = zext i16 %14 to i32
  %15 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %color3 = getelementptr inbounds %struct._opvp_brush, %struct._opvp_brush* %15, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [4 x i32], [4 x i32]* %color3, i32 0, i64 2
  store i32 %conv, i32* %arrayidx4, align 4, !tbaa !5
  %arrayidx5 = getelementptr inbounds [3 x i16], [3 x i16]* %rgb, i32 0, i64 1
  %16 = load i16, i16* %arrayidx5, align 2, !tbaa !89
  %conv6 = zext i16 %16 to i32
  %17 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %color7 = getelementptr inbounds %struct._opvp_brush, %struct._opvp_brush* %17, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [4 x i32], [4 x i32]* %color7, i32 0, i64 1
  store i32 %conv6, i32* %arrayidx8, align 4, !tbaa !5
  %arrayidx9 = getelementptr inbounds [3 x i16], [3 x i16]* %rgb, i32 0, i64 2
  %18 = load i16, i16* %arrayidx9, align 2, !tbaa !89
  %conv10 = zext i16 %18 to i32
  %19 = load %struct._opvp_brush*, %struct._opvp_brush** %brush.addr, align 8, !tbaa !1
  %color11 = getelementptr inbounds %struct._opvp_brush, %struct._opvp_brush* %19, i32 0, i32 1
  %arrayidx12 = getelementptr inbounds [4 x i32], [4 x i32]* %color11, i32 0, i64 0
  store i32 %conv10, i32* %arrayidx12, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %20 = load i32, i32* %ecode, align 4, !tbaa !5
  %21 = bitcast [3 x i16]* %rgb to i8*
  call void @llvm.lifetime.end(i64 6, i8* %21) #2
  %22 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %22) #2
  %23 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %23) #2
  ret i32 %20
}

declare i32 @gx_path_is_rectangular(%struct.gx_path_s*, %struct.gs_fixed_rect_s*) #1

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #2

declare i32 @gx_path_enum_init(%struct.gs_path_enum_s*, %struct.gx_path_s*) #1

declare i32 @gx_path_enum_next(%struct.gs_path_enum_s*, %struct.gs_fixed_point_s*) #1

declare i32 @gdev_vector_dorect(%struct.gx_device_vector_s*, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind
declare i8* @setlocale(i32, i8*) #4

; Function Attrs: nounwind
declare i8* @nl_langinfo(i32) #4

declare i8* @iconv_open(i8*, i8*) #1

declare i64 @iconv(i8*, i8**, i64*, i8**, i64*) #1

declare i32 @iconv_close(i8*) #1

declare void @gx_default_get_initial_matrix(%struct.gx_device_s*, %struct.gs_matrix_s*) #1

declare i32 @gdev_prn_output_page(%struct.gx_device_s*, i32, i32) #1

; Function Attrs: nounwind uwtable
define internal i32 @opvp_endpage() #0 {
entry:
  %ecode = alloca i32, align 4
  %r = alloca i32, align 4
  %0 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %1 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #2
  store i32 -1, i32* %r, align 4, !tbaa !5
  %2 = load i32, i32* @printerContext, align 4, !tbaa !5
  %cmp = icmp ne i32 %2, -1
  br i1 %cmp, label %if.then, label %if.end.6

if.then:                                          ; preds = %entry
  %3 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpEndPage = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %3, i32 0, i32 8
  %4 = load i32 (i32)*, i32 (i32)** %opvpEndPage, align 8, !tbaa !165
  %tobool = icmp ne i32 (i32)* %4, null
  br i1 %tobool, label %if.then.1, label %if.end

if.then.1:                                        ; preds = %if.then
  %5 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpEndPage2 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %5, i32 0, i32 8
  %6 = load i32 (i32)*, i32 (i32)** %opvpEndPage2, align 8, !tbaa !165
  %7 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call = call i32 %6(i32 %7) #7
  store i32 %call, i32* %r, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.then.1, %if.then
  %8 = load i32, i32* %r, align 4, !tbaa !5
  %cmp3 = icmp ne i32 %8, 0
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.4, %if.end
  br label %if.end.6

if.end.6:                                         ; preds = %if.end.5, %entry
  %9 = load i32, i32* %ecode, align 4, !tbaa !5
  %10 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %10) #2
  %11 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %11) #2
  ret i32 %9
}

declare void @gdev_vector_reset(%struct.gx_device_vector_s*) #1

declare i32 @gx_finish_output_page(%struct.gx_device_s*, i32, i32) #1

declare i32 @gx_device_raster(%struct.gx_device_s*, i32) #1

declare i32 @gdev_prn_print_scan_lines(%struct.gx_device_s*) #1

declare i32 @gdev_prn_get_bits(%struct.gx_device_printer_s*, i32, i8*, i8**) #1

declare i64 @gx_default_gray_map_rgb_color(%struct.gx_device_s*, i16*) #1

declare i64 @gx_default_b_w_map_rgb_color(%struct.gx_device_s*, i16*) #1

declare i64 @gx_default_rgb_map_rgb_color(%struct.gx_device_s*, i16*) #1

declare i32 @gx_default_gray_map_color_rgb(%struct.gx_device_s*, i64, i16*) #1

declare i32 @gx_default_b_w_map_color_rgb(%struct.gx_device_s*, i64, i16*) #1

declare i32 @gx_default_rgb_map_color_rgb(%struct.gx_device_s*, i64, i16*) #1

declare i32 @gdev_vector_fill_rectangle(%struct.gx_device_s*, i32, i32, i32, i32, i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @opvp_draw_image(%struct.gx_device_opvp_s* %pdev, i32 %depth, i32 %sw, i32 %sh, i32 %dw, i32 %dh, i32 %raster, i32 %mask, i8* %data) #0 {
entry:
  %retval = alloca i32, align 4
  %pdev.addr = alloca %struct.gx_device_opvp_s*, align 8
  %depth.addr = alloca i32, align 4
  %sw.addr = alloca i32, align 4
  %sh.addr = alloca i32, align 4
  %dw.addr = alloca i32, align 4
  %dh.addr = alloca i32, align 4
  %raster.addr = alloca i32, align 4
  %mask.addr = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %r = alloca i32, align 4
  %ecode = alloca i32, align 4
  %count = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_device_opvp_s* %pdev, %struct.gx_device_opvp_s** %pdev.addr, align 8, !tbaa !1
  store i32 %depth, i32* %depth.addr, align 4, !tbaa !5
  store i32 %sw, i32* %sw.addr, align 4, !tbaa !5
  store i32 %sh, i32* %sh.addr, align 4, !tbaa !5
  store i32 %dw, i32* %dw.addr, align 4, !tbaa !5
  store i32 %dh, i32* %dh.addr, align 4, !tbaa !5
  store i32 %raster, i32* %raster.addr, align 4, !tbaa !5
  store i32 %mask, i32* %mask.addr, align 4, !tbaa !5
  store i8* %data, i8** %data.addr, align 8, !tbaa !1
  %0 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  store i32 -1, i32* %r, align 4, !tbaa !5
  %1 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %2 = bitcast i32* %count to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #2
  %3 = load i32, i32* @beginPage, align 4, !tbaa !5
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load i32, i32* @inkjet, align 4, !tbaa !5
  %tobool1 = icmp ne i32 %4, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  br i1 false, label %if.then, label %if.end

cond.false:                                       ; preds = %lor.lhs.false
  %5 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev.addr, align 8, !tbaa !1
  %vec_procs = getelementptr inbounds %struct.gx_device_opvp_s, %struct.gx_device_opvp_s* %5, i32 0, i32 44
  %6 = load %struct.gx_device_vector_procs_s*, %struct.gx_device_vector_procs_s** %vec_procs, align 8, !tbaa !61
  %beginpage = getelementptr inbounds %struct.gx_device_vector_procs_s, %struct.gx_device_vector_procs_s* %6, i32 0, i32 0
  %7 = load i32 (%struct.gx_device_vector_s*)*, i32 (%struct.gx_device_vector_s*)** %beginpage, align 8, !tbaa !83
  %8 = load %struct.gx_device_opvp_s*, %struct.gx_device_opvp_s** %pdev.addr, align 8, !tbaa !1
  %9 = bitcast %struct.gx_device_opvp_s* %8 to %struct.gx_device_vector_s*
  %call = call i32 %7(%struct.gx_device_vector_s* %9) #7
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  store i32 -1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %cond.false, %cond.true
  %10 = load i32, i32* %raster.addr, align 4, !tbaa !5
  %11 = load i32, i32* %sh.addr, align 4, !tbaa !5
  %mul = mul nsw i32 %10, %11
  store i32 %mul, i32* %count, align 4, !tbaa !5
  %12 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpDrawImage = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %12, i32 0, i32 57
  %13 = load i32 (i32, i32, i32, i32, i32, i32, i32, i8*)*, i32 (i32, i32, i32, i32, i32, i32, i32, i8*)** %opvpDrawImage, align 8, !tbaa !248
  %tobool3 = icmp ne i32 (i32, i32, i32, i32, i32, i32, i32, i8*)* %13, null
  br i1 %tobool3, label %if.then.4, label %if.end.8

if.then.4:                                        ; preds = %if.end
  %14 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpDrawImage5 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %14, i32 0, i32 57
  %15 = load i32 (i32, i32, i32, i32, i32, i32, i32, i8*)*, i32 (i32, i32, i32, i32, i32, i32, i32, i8*)** %opvpDrawImage5, align 8, !tbaa !248
  %16 = load i32, i32* @printerContext, align 4, !tbaa !5
  %17 = load i32, i32* %sw.addr, align 4, !tbaa !5
  %18 = load i32, i32* %sh.addr, align 4, !tbaa !5
  %19 = load i32, i32* %raster.addr, align 4, !tbaa !5
  %20 = load i32, i32* %mask.addr, align 4, !tbaa !5
  %tobool6 = icmp ne i32 %20, 0
  %cond = select i1 %tobool6, i32 1, i32 0
  %21 = load i32, i32* %dw.addr, align 4, !tbaa !5
  %22 = load i32, i32* %dh.addr, align 4, !tbaa !5
  %23 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %call7 = call i32 %15(i32 %16, i32 %17, i32 %18, i32 %19, i32 %cond, i32 %21, i32 %22, i8* %23) #7
  store i32 %call7, i32* %r, align 4, !tbaa !5
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.4, %if.end
  %24 = load i32, i32* %r, align 4, !tbaa !5
  %cmp = icmp ne i32 %24, 0
  br i1 %cmp, label %if.then.9, label %if.end.33

if.then.9:                                        ; preds = %if.end.8
  %25 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpStartDrawImage = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %25, i32 0, i32 58
  %26 = load i32 (i32, i32, i32, i32, i32, i32, i32)*, i32 (i32, i32, i32, i32, i32, i32, i32)** %opvpStartDrawImage, align 8, !tbaa !122
  %tobool10 = icmp ne i32 (i32, i32, i32, i32, i32, i32, i32)* %26, null
  br i1 %tobool10, label %if.then.11, label %if.end.16

if.then.11:                                       ; preds = %if.then.9
  %27 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpStartDrawImage12 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %27, i32 0, i32 58
  %28 = load i32 (i32, i32, i32, i32, i32, i32, i32)*, i32 (i32, i32, i32, i32, i32, i32, i32)** %opvpStartDrawImage12, align 8, !tbaa !122
  %29 = load i32, i32* @printerContext, align 4, !tbaa !5
  %30 = load i32, i32* %sw.addr, align 4, !tbaa !5
  %31 = load i32, i32* %sh.addr, align 4, !tbaa !5
  %32 = load i32, i32* %raster.addr, align 4, !tbaa !5
  %33 = load i32, i32* %mask.addr, align 4, !tbaa !5
  %tobool13 = icmp ne i32 %33, 0
  %cond14 = select i1 %tobool13, i32 1, i32 0
  %34 = load i32, i32* %dw.addr, align 4, !tbaa !5
  %35 = load i32, i32* %dh.addr, align 4, !tbaa !5
  %call15 = call i32 %28(i32 %29, i32 %30, i32 %31, i32 %32, i32 %cond14, i32 %34, i32 %35) #7
  store i32 %call15, i32* %r, align 4, !tbaa !5
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.11, %if.then.9
  %36 = load i32, i32* %r, align 4, !tbaa !5
  %cmp17 = icmp eq i32 %36, 0
  br i1 %cmp17, label %if.then.18, label %if.else

if.then.18:                                       ; preds = %if.end.16
  %37 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpTransferDrawImage = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %37, i32 0, i32 59
  %38 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** %opvpTransferDrawImage, align 8, !tbaa !251
  %tobool19 = icmp ne i32 (i32, i32, i8*)* %38, null
  br i1 %tobool19, label %if.then.20, label %if.end.23

if.then.20:                                       ; preds = %if.then.18
  %39 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpTransferDrawImage21 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %39, i32 0, i32 59
  %40 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** %opvpTransferDrawImage21, align 8, !tbaa !251
  %41 = load i32, i32* @printerContext, align 4, !tbaa !5
  %42 = load i32, i32* %count, align 4, !tbaa !5
  %43 = load i8*, i8** %data.addr, align 8, !tbaa !1
  %call22 = call i32 %40(i32 %41, i32 %42, i8* %43) #7
  store i32 %call22, i32* %r, align 4, !tbaa !5
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.20, %if.then.18
  %44 = load i32, i32* %r, align 4, !tbaa !5
  %cmp24 = icmp ne i32 %44, 0
  br i1 %cmp24, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %if.end.23
  store i32 -1, i32* %ecode, align 4, !tbaa !5
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.25, %if.end.23
  %45 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpEndDrawImage = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %45, i32 0, i32 60
  %46 = load i32 (i32)*, i32 (i32)** %opvpEndDrawImage, align 8, !tbaa !124
  %tobool27 = icmp ne i32 (i32)* %46, null
  br i1 %tobool27, label %if.then.28, label %if.end.31

if.then.28:                                       ; preds = %if.end.26
  %47 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpEndDrawImage29 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %47, i32 0, i32 60
  %48 = load i32 (i32)*, i32 (i32)** %opvpEndDrawImage29, align 8, !tbaa !124
  %49 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call30 = call i32 %48(i32 %49) #7
  br label %if.end.31

if.end.31:                                        ; preds = %if.then.28, %if.end.26
  br label %if.end.32

if.else:                                          ; preds = %if.end.16
  store i32 0, i32* %ecode, align 4, !tbaa !5
  br label %if.end.32

if.end.32:                                        ; preds = %if.else, %if.end.31
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.32, %if.end.8
  %50 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %50, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.33, %if.then
  %51 = bitcast i32* %count to i8*
  call void @llvm.lifetime.end(i64 4, i8* %51) #2
  %52 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %52) #2
  %53 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %53) #2
  %54 = load i32, i32* %retval
  ret i32 %54
}

declare i32 @gdev_vector_get_params(%struct.gx_device_s*, %struct.gs_param_list_s*) #1

declare i32 @gdev_vector_put_params(%struct.gx_device_s*, %struct.gs_param_list_s*) #1

; Function Attrs: nounwind uwtable
define internal i32 @checkPath(%struct.gx_path_s* %ppath) #0 {
entry:
  %retval = alloca i32, align 4
  %ppath.addr = alloca %struct.gx_path_s*, align 8
  %npoints = alloca i32, align 4
  %vs = alloca [6 x i32], align 16
  %op = alloca i32, align 4
  %path = alloca %struct.gs_path_enum_s, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.gx_path_s* %ppath, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  %0 = bitcast i32* %npoints to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #2
  store i32 0, i32* %npoints, align 4, !tbaa !5
  %1 = bitcast [6 x i32]* %vs to i8*
  call void @llvm.lifetime.start(i64 24, i8* %1) #2
  %2 = bitcast i32* %op to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #2
  %3 = bitcast %struct.gs_path_enum_s* %path to i8*
  call void @llvm.lifetime.start(i64 64, i8* %3) #2
  %4 = load %struct.gx_path_s*, %struct.gx_path_s** %ppath.addr, align 8, !tbaa !1
  %call = call i32 @gx_path_enum_init(%struct.gs_path_enum_s* %path, %struct.gx_path_s* %4) #7
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %arraydecay = getelementptr inbounds [6 x i32], [6 x i32]* %vs, i32 0, i32 0
  %5 = bitcast i32* %arraydecay to %struct.gs_fixed_point_s*
  %call1 = call i32 @gx_path_enum_next(%struct.gs_path_enum_s* %path, %struct.gs_fixed_point_s* %5) #7
  store i32 %call1, i32* %op, align 4, !tbaa !5
  %cmp = icmp ne i32 %call1, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32, i32* %op, align 4, !tbaa !5
  switch i32 %6, label %sw.default [
    i32 2, label %sw.bb
    i32 1, label %sw.bb
    i32 3, label %sw.bb.2
    i32 4, label %sw.epilog
  ]

sw.bb:                                            ; preds = %while.body, %while.body
  %7 = load i32, i32* %npoints, align 4, !tbaa !5
  %add = add i32 %7, 1
  store i32 %add, i32* %npoints, align 4, !tbaa !5
  br label %sw.epilog

sw.bb.2:                                          ; preds = %while.body
  %8 = load i32, i32* %npoints, align 4, !tbaa !5
  %add3 = add i32 %8, 3
  store i32 %add3, i32* %npoints, align 4, !tbaa !5
  br label %sw.epilog

sw.default:                                       ; preds = %while.body
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %while.body, %sw.bb.2, %sw.bb
  %9 = load i32, i32* %npoints, align 4, !tbaa !5
  %cmp4 = icmp ugt i32 %9, 1000
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %sw.epilog
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %sw.epilog
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then
  %10 = bitcast %struct.gs_path_enum_s* %path to i8*
  call void @llvm.lifetime.end(i64 64, i8* %10) #2
  %11 = bitcast i32* %op to i8*
  call void @llvm.lifetime.end(i64 4, i8* %11) #2
  %12 = bitcast [6 x i32]* %vs to i8*
  call void @llvm.lifetime.end(i64 24, i8* %12) #2
  %13 = bitcast i32* %npoints to i8*
  call void @llvm.lifetime.end(i64 4, i8* %13) #2
  %14 = load i32, i32* %retval
  ret i32 %14
}

; Function Attrs: nounwind uwtable
define internal i32 @checkCPath(%struct.gx_clip_path_s* %pcpath) #0 {
entry:
  %retval = alloca i32, align 4
  %pcpath.addr = alloca %struct.gx_clip_path_s*, align 8
  %list = alloca %struct.gx_clip_list_s*, align 8
  %prect = alloca %struct.gx_clip_rect_s*, align 8
  %npoints = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.gx_clip_path_s* %pcpath, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gx_clip_list_s** %list to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = bitcast %struct.gx_clip_rect_s** %prect to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #2
  %2 = bitcast i32* %npoints to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #2
  %3 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %cmp = icmp eq %struct.gx_clip_path_s* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  %4 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %path_valid = getelementptr inbounds %struct.gx_clip_path_s, %struct.gx_clip_path_s* %4, i32 0, i32 6
  %5 = load i32, i32* %path_valid, align 4, !tbaa !316
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %if.then.1, label %if.end.2

if.then.1:                                        ; preds = %if.end
  %6 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %path = getelementptr inbounds %struct.gx_clip_path_s, %struct.gx_clip_path_s* %6, i32 0, i32 0
  %call = call i32 @checkPath(%struct.gx_path_s* %path) #7
  store i32 %call, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.2:                                         ; preds = %if.end
  %7 = load %struct.gx_clip_path_s*, %struct.gx_clip_path_s** %pcpath.addr, align 8, !tbaa !1
  %call3 = call %struct.gx_clip_list_s* @gx_cpath_list(%struct.gx_clip_path_s* %7) #7
  store %struct.gx_clip_list_s* %call3, %struct.gx_clip_list_s** %list, align 8, !tbaa !1
  %8 = load %struct.gx_clip_list_s*, %struct.gx_clip_list_s** %list, align 8, !tbaa !1
  %head = getelementptr inbounds %struct.gx_clip_list_s, %struct.gx_clip_list_s* %8, i32 0, i32 1
  %9 = load %struct.gx_clip_rect_s*, %struct.gx_clip_rect_s** %head, align 8, !tbaa !324
  store %struct.gx_clip_rect_s* %9, %struct.gx_clip_rect_s** %prect, align 8, !tbaa !1
  %10 = load %struct.gx_clip_rect_s*, %struct.gx_clip_rect_s** %prect, align 8, !tbaa !1
  %cmp4 = icmp eq %struct.gx_clip_rect_s* %10, null
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.end.2
  %11 = load %struct.gx_clip_list_s*, %struct.gx_clip_list_s** %list, align 8, !tbaa !1
  %single = getelementptr inbounds %struct.gx_clip_list_s, %struct.gx_clip_list_s* %11, i32 0, i32 0
  store %struct.gx_clip_rect_s* %single, %struct.gx_clip_rect_s** %prect, align 8, !tbaa !1
  br label %if.end.6

if.end.6:                                         ; preds = %if.then.5, %if.end.2
  store i32 0, i32* %npoints, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.6
  %12 = load %struct.gx_clip_rect_s*, %struct.gx_clip_rect_s** %prect, align 8, !tbaa !1
  %cmp7 = icmp ne %struct.gx_clip_rect_s* %12, null
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load i32, i32* %npoints, align 4, !tbaa !5
  %add = add nsw i32 %13, 4
  store i32 %add, i32* %npoints, align 4, !tbaa !5
  %14 = load i32, i32* %npoints, align 4, !tbaa !5
  %cmp8 = icmp sgt i32 %14, 1000
  br i1 %cmp8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %for.body
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end.10:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.10
  %15 = load %struct.gx_clip_rect_s*, %struct.gx_clip_rect_s** %prect, align 8, !tbaa !1
  %next = getelementptr inbounds %struct.gx_clip_rect_s, %struct.gx_clip_rect_s* %15, i32 0, i32 0
  %16 = load %struct.gx_clip_rect_s*, %struct.gx_clip_rect_s** %next, align 8, !tbaa !325
  store %struct.gx_clip_rect_s* %16, %struct.gx_clip_rect_s** %prect, align 8, !tbaa !1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then.9, %if.then.1, %if.then
  %17 = bitcast i32* %npoints to i8*
  call void @llvm.lifetime.end(i64 4, i8* %17) #2
  %18 = bitcast %struct.gx_clip_rect_s** %prect to i8*
  call void @llvm.lifetime.end(i64 8, i8* %18) #2
  %19 = bitcast %struct.gx_clip_list_s** %list to i8*
  call void @llvm.lifetime.end(i64 8, i8* %19) #2
  %20 = load i32, i32* %retval
  ret i32 %20
}

declare i32 @gx_default_fill_path(%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*) #1

declare i32 @gx_cpath_inner_box(%struct.gx_clip_path_s*, %struct.gs_fixed_rect_s*) #1

declare i32 @gx_cpath_outer_box(%struct.gx_clip_path_s*, %struct.gs_fixed_rect_s*) #1

declare i32 @gdev_vector_fill_path(%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*) #1

declare %struct.gx_clip_list_s* @gx_cpath_list(%struct.gx_clip_path_s*) #1

declare i32 @gx_default_stroke_path(%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*) #1

declare i32 @gdev_vector_stroke_path(%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*) #1

declare i32 @gdev_vector_update_fill_color(%struct.gx_device_vector_s*, %struct.gs_imager_state_s*, %struct.gx_device_color_s*) #1

declare i32 @gdev_vector_update_clip_path(%struct.gx_device_vector_s*, %struct.gx_clip_path_s*) #1

declare i32 @gdev_vector_update_log_op(%struct.gx_device_vector_s*, i32) #1

declare i32 @gx_default_fill_mask(%struct.gx_device_s*, i8*, i32, i32, i64, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*) #1

declare i32 @gx_default_begin_image(%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_common_s**) #1

declare i32 @gdev_vector_begin_image(%struct.gx_device_vector_s*, %struct.gs_imager_state_s*, %struct.gs_image1_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, %struct.gx_image_enum_procs_s*, %struct.gdev_vector_image_enum_s*) #1

declare i32 @gs_color_space_get_index(%struct.gs_color_space_s*) #1

declare %struct.gs_color_space_s* @gs_cspace_base_space(%struct.gs_color_space_s*) #1

declare void @color_cmyk_to_rgb(i16 signext, i16 signext, i16 signext, i16 signext, %struct.gs_imager_state_s*, i16*, %struct.gs_memory_s*) #1

declare i32 @gs_matrix_invert(%struct.gs_matrix_s*, %struct.gs_matrix_s*) #1

declare i32 @gs_matrix_multiply(%struct.gs_matrix_s*, %struct.gs_matrix_s*, %struct.gs_matrix_s*) #1

; Function Attrs: nounwind uwtable
define internal i32 @opvp_image_plane_data(%struct.gx_image_enum_common_s* %info, %struct.gx_image_plane_s* %planes, i32 %height, i32* %rows_used) #0 {
entry:
  %retval = alloca i32, align 4
  %info.addr = alloca %struct.gx_image_enum_common_s*, align 8
  %planes.addr = alloca %struct.gx_image_plane_s*, align 8
  %height.addr = alloca i32, align 4
  %rows_used.addr = alloca i32*, align 8
  %vinfo = alloca %struct.gdev_vector_image_enum_s*, align 8
  %tmp_buf = alloca i8*, align 8
  %buf = alloca i8*, align 8
  %bits_per_pixel = alloca i32, align 4
  %data_bytes = alloca i32, align 4
  %dst_bytes = alloca i32, align 4
  %raster_length = alloca i32, align 4
  %dst_length = alloca i32, align 4
  %p = alloca i32, align 4
  %x = alloca i32, align 4
  %d = alloca i32, align 4
  %h = alloca i32, align 4
  %ecode = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %src_ptr = alloca i8*, align 8
  %dst_ptr = alloca i8*, align 8
  %ppalette = alloca i8*, align 8
  %ptr = alloca i8*, align 8
  %pbe = alloca %struct.bbox_image_enum_s*, align 8
  %tinfo = alloca %struct.gx_image_enum_s*, align 8
  %pis = alloca %struct.gs_imager_state_s*, align 8
  %cleanup.dest.slot = alloca i32
  %bytes_per_pixel = alloca i32, align 4
  %reverse = alloca i32, align 4
  %o = alloca i32, align 4
  %o341 = alloca i32, align 4
  %o460 = alloca i32, align 4
  %d537 = alloca i8, align 1
  %o595 = alloca i32, align 4
  %d606 = alloca i8, align 1
  %o668 = alloca i32, align 4
  %d679 = alloca i8, align 1
  store %struct.gx_image_enum_common_s* %info, %struct.gx_image_enum_common_s** %info.addr, align 8, !tbaa !1
  store %struct.gx_image_plane_s* %planes, %struct.gx_image_plane_s** %planes.addr, align 8, !tbaa !1
  store i32 %height, i32* %height.addr, align 4, !tbaa !5
  store i32* %rows_used, i32** %rows_used.addr, align 8, !tbaa !1
  %0 = bitcast %struct.gdev_vector_image_enum_s** %vinfo to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = bitcast i8** %tmp_buf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #2
  store i8* null, i8** %tmp_buf, align 8, !tbaa !1
  %2 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #2
  store i8* null, i8** %buf, align 8, !tbaa !1
  %3 = bitcast i32* %bits_per_pixel to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #2
  %4 = bitcast i32* %data_bytes to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #2
  %5 = bitcast i32* %dst_bytes to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #2
  %6 = bitcast i32* %raster_length to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #2
  %7 = bitcast i32* %dst_length to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #2
  %8 = bitcast i32* %p to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #2
  %9 = bitcast i32* %x to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #2
  %10 = bitcast i32* %d to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #2
  %11 = bitcast i32* %h to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #2
  %12 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #2
  store i32 0, i32* %ecode, align 4, !tbaa !5
  %13 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #2
  %14 = bitcast i32* %j to i8*
  call void @llvm.lifetime.start(i64 4, i8* %14) #2
  %15 = bitcast i8** %src_ptr to i8*
  call void @llvm.lifetime.start(i64 8, i8* %15) #2
  %16 = bitcast i8** %dst_ptr to i8*
  call void @llvm.lifetime.start(i64 8, i8* %16) #2
  %17 = bitcast i8** %ppalette to i8*
  call void @llvm.lifetime.start(i64 8, i8* %17) #2
  %18 = bitcast i8** %ptr to i8*
  call void @llvm.lifetime.start(i64 8, i8* %18) #2
  %19 = bitcast %struct.bbox_image_enum_s** %pbe to i8*
  call void @llvm.lifetime.start(i64 8, i8* %19) #2
  %20 = bitcast %struct.gx_image_enum_s** %tinfo to i8*
  call void @llvm.lifetime.start(i64 8, i8* %20) #2
  %21 = bitcast %struct.gs_imager_state_s** %pis to i8*
  call void @llvm.lifetime.start(i64 8, i8* %21) #2
  %22 = load %struct.gx_image_enum_common_s*, %struct.gx_image_enum_common_s** %info.addr, align 8, !tbaa !1
  %23 = bitcast %struct.gx_image_enum_common_s* %22 to %struct.gdev_vector_image_enum_s*
  store %struct.gdev_vector_image_enum_s* %23, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %24 = load i32, i32* @begin_image, align 4, !tbaa !5
  %tobool = icmp ne i32 %24, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

if.end:                                           ; preds = %entry
  store i32 0, i32* %bits_per_pixel, align 4, !tbaa !5
  store i32 0, i32* %p, align 4, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %25 = load i32, i32* %p, align 4, !tbaa !5
  %26 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %num_planes = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %26, i32 0, i32 6
  %27 = load i32, i32* %num_planes, align 4, !tbaa !109
  %cmp = icmp slt i32 %25, %27
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %28 = load i32, i32* %p, align 4, !tbaa !5
  %idxprom = sext i32 %28 to i64
  %29 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %plane_depths = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %29, i32 0, i32 7
  %arrayidx = getelementptr inbounds [65 x i32], [65 x i32]* %plane_depths, i32 0, i64 %idxprom
  %30 = load i32, i32* %arrayidx, align 4, !tbaa !5
  %31 = load i32, i32* %bits_per_pixel, align 4, !tbaa !5
  %add = add nsw i32 %31, %30
  store i32 %add, i32* %bits_per_pixel, align 4, !tbaa !5
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %32 = load i32, i32* %p, align 4, !tbaa !5
  %inc = add nsw i32 %32, 1
  store i32 %inc, i32* %p, align 4, !tbaa !5
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %33 = load i32, i32* %bits_per_pixel, align 4, !tbaa !5
  %34 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %width = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %34, i32 0, i32 11
  %35 = load i32, i32* %width, align 4, !tbaa !120
  %mul = mul nsw i32 %33, %35
  %add1 = add nsw i32 %mul, 7
  %shr = ashr i32 %add1, 3
  store i32 %shr, i32* %data_bytes, align 4, !tbaa !5
  %36 = load i32, i32* %data_bytes, align 4, !tbaa !5
  %add2 = add nsw i32 %36, 3
  %shr3 = ashr i32 %add2, 2
  %shl = shl i32 %shr3, 2
  store i32 %shl, i32* %raster_length, align 4, !tbaa !5
  %37 = load i32, i32* %raster_length, align 4, !tbaa !5
  %conv = sext i32 %37 to i64
  %38 = load i32, i32* %height.addr, align 4, !tbaa !5
  %conv4 = sext i32 %38 to i64
  %call = call noalias i8* @calloc(i64 %conv, i64 %conv4) #8
  store i8* %call, i8** %buf, align 8, !tbaa !1
  %39 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %default_info = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %39, i32 0, i32 9
  %40 = load %struct.gx_image_enum_common_s*, %struct.gx_image_enum_common_s** %default_info, align 8, !tbaa !326
  %tobool5 = icmp ne %struct.gx_image_enum_common_s* %40, null
  br i1 %tobool5, label %if.then.6, label %if.end.9

if.then.6:                                        ; preds = %for.end
  %41 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %default_info7 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %41, i32 0, i32 9
  %42 = load %struct.gx_image_enum_common_s*, %struct.gx_image_enum_common_s** %default_info7, align 8, !tbaa !326
  %43 = load %struct.gx_image_plane_s*, %struct.gx_image_plane_s** %planes.addr, align 8, !tbaa !1
  %44 = load i32, i32* %height.addr, align 4, !tbaa !5
  %call8 = call i32 @gx_image_plane_data(%struct.gx_image_enum_common_s* %42, %struct.gx_image_plane_s* %43, i32 %44) #7
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.6, %for.end
  %45 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %bbox_info = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %45, i32 0, i32 10
  %46 = load %struct.gx_image_enum_common_s*, %struct.gx_image_enum_common_s** %bbox_info, align 8, !tbaa !327
  %tobool10 = icmp ne %struct.gx_image_enum_common_s* %46, null
  br i1 %tobool10, label %if.then.11, label %if.end.14

if.then.11:                                       ; preds = %if.end.9
  %47 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %bbox_info12 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %47, i32 0, i32 10
  %48 = load %struct.gx_image_enum_common_s*, %struct.gx_image_enum_common_s** %bbox_info12, align 8, !tbaa !327
  %49 = load %struct.gx_image_plane_s*, %struct.gx_image_plane_s** %planes.addr, align 8, !tbaa !1
  %50 = load i32, i32* %height.addr, align 4, !tbaa !5
  %call13 = call i32 @gx_image_plane_data(%struct.gx_image_enum_common_s* %48, %struct.gx_image_plane_s* %49, i32 %50) #7
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.11, %if.end.9
  %51 = load i8*, i8** %buf, align 8, !tbaa !1
  %tobool15 = icmp ne i8* %51, null
  br i1 %tobool15, label %if.then.16, label %if.end.1491

if.then.16:                                       ; preds = %if.end.14
  %52 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %bbox_info17 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %52, i32 0, i32 10
  %53 = load %struct.gx_image_enum_common_s*, %struct.gx_image_enum_common_s** %bbox_info17, align 8, !tbaa !327
  %54 = bitcast %struct.gx_image_enum_common_s* %53 to %struct.bbox_image_enum_s*
  store %struct.bbox_image_enum_s* %54, %struct.bbox_image_enum_s** %pbe, align 8, !tbaa !1
  %55 = load %struct.bbox_image_enum_s*, %struct.bbox_image_enum_s** %pbe, align 8, !tbaa !1
  %target_info = getelementptr inbounds %struct.bbox_image_enum_s, %struct.bbox_image_enum_s* %55, i32 0, i32 11
  %56 = load %struct.gx_image_enum_common_s*, %struct.gx_image_enum_common_s** %target_info, align 8, !tbaa !328
  %57 = bitcast %struct.gx_image_enum_common_s* %56 to %struct.gx_image_enum_s*
  store %struct.gx_image_enum_s* %57, %struct.gx_image_enum_s** %tinfo, align 8, !tbaa !1
  %58 = load %struct.gx_image_enum_s*, %struct.gx_image_enum_s** %tinfo, align 8, !tbaa !1
  %pis18 = getelementptr inbounds %struct.gx_image_enum_s, %struct.gx_image_enum_s* %58, i32 0, i32 30
  %59 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis18, align 8, !tbaa !330
  store %struct.gs_imager_state_s* %59, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %60 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %num_planes19 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %60, i32 0, i32 6
  %61 = load i32, i32* %num_planes19, align 4, !tbaa !109
  %cmp20 = icmp eq i32 %61, 1
  br i1 %cmp20, label %if.then.22, label %if.else.59

if.then.22:                                       ; preds = %if.then.16
  store i32 0, i32* %h, align 4, !tbaa !5
  br label %for.cond.23

for.cond.23:                                      ; preds = %for.inc.56, %if.then.22
  %62 = load i32, i32* %h, align 4, !tbaa !5
  %63 = load i32, i32* %height.addr, align 4, !tbaa !5
  %cmp24 = icmp slt i32 %62, %63
  br i1 %cmp24, label %for.body.26, label %for.end.58

for.body.26:                                      ; preds = %for.cond.23
  %64 = load i32, i32* %raster_length, align 4, !tbaa !5
  %65 = load i32, i32* %h, align 4, !tbaa !5
  %mul27 = mul nsw i32 %64, %65
  store i32 %mul27, i32* %d, align 4, !tbaa !5
  %66 = load i32, i32* @reverse_image, align 4, !tbaa !5
  %tobool28 = icmp ne i32 %66, 0
  br i1 %tobool28, label %if.then.29, label %if.else

if.then.29:                                       ; preds = %for.body.26
  %67 = bitcast i32* %bytes_per_pixel to i8*
  call void @llvm.lifetime.start(i64 4, i8* %67) #2
  %68 = load i32, i32* %bits_per_pixel, align 4, !tbaa !5
  %div = sdiv i32 %68, 8
  store i32 %div, i32* %bytes_per_pixel, align 4, !tbaa !5
  %69 = load i32, i32* %data_bytes, align 4, !tbaa !5
  %70 = load i32, i32* %h, align 4, !tbaa !5
  %add30 = add nsw i32 %70, 1
  %mul31 = mul nsw i32 %69, %add30
  %71 = load i32, i32* %bytes_per_pixel, align 4, !tbaa !5
  %sub = sub nsw i32 %mul31, %71
  store i32 %sub, i32* %x, align 4, !tbaa !5
  br label %for.cond.32

for.cond.32:                                      ; preds = %for.inc.42, %if.then.29
  %72 = load i32, i32* %x, align 4, !tbaa !5
  %73 = load i32, i32* %data_bytes, align 4, !tbaa !5
  %74 = load i32, i32* %h, align 4, !tbaa !5
  %mul33 = mul nsw i32 %73, %74
  %cmp34 = icmp sge i32 %72, %mul33
  br i1 %cmp34, label %for.body.36, label %for.end.45

for.body.36:                                      ; preds = %for.cond.32
  %75 = load i8*, i8** %buf, align 8, !tbaa !1
  %76 = load i32, i32* %d, align 4, !tbaa !5
  %idx.ext = sext i32 %76 to i64
  %add.ptr = getelementptr inbounds i8, i8* %75, i64 %idx.ext
  %77 = load %struct.gx_image_plane_s*, %struct.gx_image_plane_s** %planes.addr, align 8, !tbaa !1
  %arrayidx37 = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %77, i64 0
  %data = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %arrayidx37, i32 0, i32 0
  %78 = load i8*, i8** %data, align 8, !tbaa !342
  %79 = load i32, i32* %x, align 4, !tbaa !5
  %idx.ext38 = sext i32 %79 to i64
  %add.ptr39 = getelementptr inbounds i8, i8* %78, i64 %idx.ext38
  %80 = load i32, i32* %bytes_per_pixel, align 4, !tbaa !5
  %conv40 = sext i32 %80 to i64
  %call41 = call i8* @memcpy(i8* %add.ptr, i8* %add.ptr39, i64 %conv40) #8
  br label %for.inc.42

for.inc.42:                                       ; preds = %for.body.36
  %81 = load i32, i32* %bytes_per_pixel, align 4, !tbaa !5
  %82 = load i32, i32* %x, align 4, !tbaa !5
  %sub43 = sub nsw i32 %82, %81
  store i32 %sub43, i32* %x, align 4, !tbaa !5
  %83 = load i32, i32* %bytes_per_pixel, align 4, !tbaa !5
  %84 = load i32, i32* %d, align 4, !tbaa !5
  %add44 = add nsw i32 %84, %83
  store i32 %add44, i32* %d, align 4, !tbaa !5
  br label %for.cond.32

for.end.45:                                       ; preds = %for.cond.32
  %85 = bitcast i32* %bytes_per_pixel to i8*
  call void @llvm.lifetime.end(i64 4, i8* %85) #2
  br label %if.end.55

if.else:                                          ; preds = %for.body.26
  %86 = load i8*, i8** %buf, align 8, !tbaa !1
  %87 = load i32, i32* %d, align 4, !tbaa !5
  %idx.ext46 = sext i32 %87 to i64
  %add.ptr47 = getelementptr inbounds i8, i8* %86, i64 %idx.ext46
  %88 = load %struct.gx_image_plane_s*, %struct.gx_image_plane_s** %planes.addr, align 8, !tbaa !1
  %arrayidx48 = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %88, i64 0
  %data49 = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %arrayidx48, i32 0, i32 0
  %89 = load i8*, i8** %data49, align 8, !tbaa !342
  %90 = load i32, i32* %data_bytes, align 4, !tbaa !5
  %91 = load i32, i32* %h, align 4, !tbaa !5
  %mul50 = mul nsw i32 %90, %91
  %idx.ext51 = sext i32 %mul50 to i64
  %add.ptr52 = getelementptr inbounds i8, i8* %89, i64 %idx.ext51
  %92 = load i32, i32* %data_bytes, align 4, !tbaa !5
  %conv53 = sext i32 %92 to i64
  %call54 = call i8* @memcpy(i8* %add.ptr47, i8* %add.ptr52, i64 %conv53) #8
  br label %if.end.55

if.end.55:                                        ; preds = %if.else, %for.end.45
  br label %for.inc.56

for.inc.56:                                       ; preds = %if.end.55
  %93 = load i32, i32* %h, align 4, !tbaa !5
  %inc57 = add nsw i32 %93, 1
  store i32 %inc57, i32* %h, align 4, !tbaa !5
  br label %for.cond.23

for.end.58:                                       ; preds = %for.cond.23
  br label %if.end.128

if.else.59:                                       ; preds = %if.then.16
  store i32 0, i32* %h, align 4, !tbaa !5
  br label %for.cond.60

for.cond.60:                                      ; preds = %for.inc.125, %if.else.59
  %94 = load i32, i32* %h, align 4, !tbaa !5
  %95 = load i32, i32* %height.addr, align 4, !tbaa !5
  %cmp61 = icmp slt i32 %94, %95
  br i1 %cmp61, label %for.body.63, label %for.end.127

for.body.63:                                      ; preds = %for.cond.60
  %96 = load i32, i32* %raster_length, align 4, !tbaa !5
  %97 = load i32, i32* %h, align 4, !tbaa !5
  %mul64 = mul nsw i32 %96, %97
  store i32 %mul64, i32* %d, align 4, !tbaa !5
  %98 = load i32, i32* @reverse_image, align 4, !tbaa !5
  %tobool65 = icmp ne i32 %98, 0
  br i1 %tobool65, label %if.then.66, label %if.else.95

if.then.66:                                       ; preds = %for.body.63
  %99 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %width67 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %99, i32 0, i32 11
  %100 = load i32, i32* %width67, align 4, !tbaa !120
  %101 = load i32, i32* %h, align 4, !tbaa !5
  %add68 = add nsw i32 %101, 1
  %mul69 = mul nsw i32 %100, %add68
  %sub70 = sub nsw i32 %mul69, 1
  store i32 %sub70, i32* %x, align 4, !tbaa !5
  br label %for.cond.71

for.cond.71:                                      ; preds = %for.inc.93, %if.then.66
  %102 = load i32, i32* %x, align 4, !tbaa !5
  %103 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %width72 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %103, i32 0, i32 11
  %104 = load i32, i32* %width72, align 4, !tbaa !120
  %105 = load i32, i32* %h, align 4, !tbaa !5
  %mul73 = mul nsw i32 %104, %105
  %cmp74 = icmp sge i32 %102, %mul73
  br i1 %cmp74, label %for.body.76, label %for.end.94

for.body.76:                                      ; preds = %for.cond.71
  store i32 0, i32* %p, align 4, !tbaa !5
  br label %for.cond.77

for.cond.77:                                      ; preds = %for.inc.89, %for.body.76
  %106 = load i32, i32* %p, align 4, !tbaa !5
  %107 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %num_planes78 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %107, i32 0, i32 6
  %108 = load i32, i32* %num_planes78, align 4, !tbaa !109
  %cmp79 = icmp slt i32 %106, %108
  br i1 %cmp79, label %for.body.81, label %for.end.92

for.body.81:                                      ; preds = %for.cond.77
  %109 = load i32, i32* %x, align 4, !tbaa !5
  %idxprom82 = sext i32 %109 to i64
  %110 = load i32, i32* %p, align 4, !tbaa !5
  %idxprom83 = sext i32 %110 to i64
  %111 = load %struct.gx_image_plane_s*, %struct.gx_image_plane_s** %planes.addr, align 8, !tbaa !1
  %arrayidx84 = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %111, i64 %idxprom83
  %data85 = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %arrayidx84, i32 0, i32 0
  %112 = load i8*, i8** %data85, align 8, !tbaa !342
  %arrayidx86 = getelementptr inbounds i8, i8* %112, i64 %idxprom82
  %113 = load i8, i8* %arrayidx86, align 1, !tbaa !64
  %114 = load i32, i32* %d, align 4, !tbaa !5
  %idxprom87 = sext i32 %114 to i64
  %115 = load i8*, i8** %buf, align 8, !tbaa !1
  %arrayidx88 = getelementptr inbounds i8, i8* %115, i64 %idxprom87
  store i8 %113, i8* %arrayidx88, align 1, !tbaa !64
  br label %for.inc.89

for.inc.89:                                       ; preds = %for.body.81
  %116 = load i32, i32* %p, align 4, !tbaa !5
  %inc90 = add nsw i32 %116, 1
  store i32 %inc90, i32* %p, align 4, !tbaa !5
  %117 = load i32, i32* %d, align 4, !tbaa !5
  %inc91 = add nsw i32 %117, 1
  store i32 %inc91, i32* %d, align 4, !tbaa !5
  br label %for.cond.77

for.end.92:                                       ; preds = %for.cond.77
  br label %for.inc.93

for.inc.93:                                       ; preds = %for.end.92
  %118 = load i32, i32* %x, align 4, !tbaa !5
  %dec = add nsw i32 %118, -1
  store i32 %dec, i32* %x, align 4, !tbaa !5
  br label %for.cond.71

for.end.94:                                       ; preds = %for.cond.71
  br label %if.end.124

if.else.95:                                       ; preds = %for.body.63
  %119 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %width96 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %119, i32 0, i32 11
  %120 = load i32, i32* %width96, align 4, !tbaa !120
  %121 = load i32, i32* %h, align 4, !tbaa !5
  %mul97 = mul nsw i32 %120, %121
  store i32 %mul97, i32* %x, align 4, !tbaa !5
  br label %for.cond.98

for.cond.98:                                      ; preds = %for.inc.121, %if.else.95
  %122 = load i32, i32* %x, align 4, !tbaa !5
  %123 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %width99 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %123, i32 0, i32 11
  %124 = load i32, i32* %width99, align 4, !tbaa !120
  %125 = load i32, i32* %h, align 4, !tbaa !5
  %add100 = add nsw i32 %125, 1
  %mul101 = mul nsw i32 %124, %add100
  %cmp102 = icmp slt i32 %122, %mul101
  br i1 %cmp102, label %for.body.104, label %for.end.123

for.body.104:                                     ; preds = %for.cond.98
  store i32 0, i32* %p, align 4, !tbaa !5
  br label %for.cond.105

for.cond.105:                                     ; preds = %for.inc.117, %for.body.104
  %126 = load i32, i32* %p, align 4, !tbaa !5
  %127 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %num_planes106 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %127, i32 0, i32 6
  %128 = load i32, i32* %num_planes106, align 4, !tbaa !109
  %cmp107 = icmp slt i32 %126, %128
  br i1 %cmp107, label %for.body.109, label %for.end.120

for.body.109:                                     ; preds = %for.cond.105
  %129 = load i32, i32* %x, align 4, !tbaa !5
  %idxprom110 = sext i32 %129 to i64
  %130 = load i32, i32* %p, align 4, !tbaa !5
  %idxprom111 = sext i32 %130 to i64
  %131 = load %struct.gx_image_plane_s*, %struct.gx_image_plane_s** %planes.addr, align 8, !tbaa !1
  %arrayidx112 = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %131, i64 %idxprom111
  %data113 = getelementptr inbounds %struct.gx_image_plane_s, %struct.gx_image_plane_s* %arrayidx112, i32 0, i32 0
  %132 = load i8*, i8** %data113, align 8, !tbaa !342
  %arrayidx114 = getelementptr inbounds i8, i8* %132, i64 %idxprom110
  %133 = load i8, i8* %arrayidx114, align 1, !tbaa !64
  %134 = load i32, i32* %d, align 4, !tbaa !5
  %idxprom115 = sext i32 %134 to i64
  %135 = load i8*, i8** %buf, align 8, !tbaa !1
  %arrayidx116 = getelementptr inbounds i8, i8* %135, i64 %idxprom115
  store i8 %133, i8* %arrayidx116, align 1, !tbaa !64
  br label %for.inc.117

for.inc.117:                                      ; preds = %for.body.109
  %136 = load i32, i32* %p, align 4, !tbaa !5
  %inc118 = add nsw i32 %136, 1
  store i32 %inc118, i32* %p, align 4, !tbaa !5
  %137 = load i32, i32* %d, align 4, !tbaa !5
  %inc119 = add nsw i32 %137, 1
  store i32 %inc119, i32* %d, align 4, !tbaa !5
  br label %for.cond.105

for.end.120:                                      ; preds = %for.cond.105
  br label %for.inc.121

for.inc.121:                                      ; preds = %for.end.120
  %138 = load i32, i32* %x, align 4, !tbaa !5
  %inc122 = add nsw i32 %138, 1
  store i32 %inc122, i32* %x, align 4, !tbaa !5
  br label %for.cond.98

for.end.123:                                      ; preds = %for.cond.98
  br label %if.end.124

if.end.124:                                       ; preds = %for.end.123, %for.end.94
  br label %for.inc.125

for.inc.125:                                      ; preds = %if.end.124
  %139 = load i32, i32* %h, align 4, !tbaa !5
  %inc126 = add nsw i32 %139, 1
  store i32 %inc126, i32* %h, align 4, !tbaa !5
  br label %for.cond.60

for.end.127:                                      ; preds = %for.cond.60
  br label %if.end.128

if.end.128:                                       ; preds = %for.end.127, %for.end.58
  %140 = load %struct.gx_image_enum_s*, %struct.gx_image_enum_s** %tinfo, align 8, !tbaa !1
  %masked = getelementptr inbounds %struct.gx_image_enum_s, %struct.gx_image_enum_s* %140, i32 0, i32 19
  %141 = load i8, i8* %masked, align 1, !tbaa !344
  %tobool129 = icmp ne i8 %141, 0
  br i1 %tobool129, label %if.then.130, label %if.else.159

if.then.130:                                      ; preds = %if.end.128
  %142 = bitcast i32* %reverse to i8*
  call void @llvm.lifetime.start(i64 4, i8* %142) #2
  store i32 0, i32* %reverse, align 4, !tbaa !5
  %143 = load float, float* getelementptr inbounds ([130 x float], [130 x float]* @imageDecode, i32 0, i64 0), align 4, !tbaa !10
  %cmp131 = fcmp oeq float %143, 0.000000e+00
  br i1 %cmp131, label %if.then.133, label %if.end.134

if.then.133:                                      ; preds = %if.then.130
  store i32 1, i32* %reverse, align 4, !tbaa !5
  br label %if.end.134

if.end.134:                                       ; preds = %if.then.133, %if.then.130
  %144 = load i32, i32* %reverse, align 4, !tbaa !5
  %tobool135 = icmp ne i32 %144, 0
  br i1 %tobool135, label %if.then.136, label %if.end.158

if.then.136:                                      ; preds = %if.end.134
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.137

for.cond.137:                                     ; preds = %for.inc.155, %if.then.136
  %145 = load i32, i32* %i, align 4, !tbaa !5
  %146 = load i32, i32* %height.addr, align 4, !tbaa !5
  %cmp138 = icmp slt i32 %145, %146
  br i1 %cmp138, label %for.body.140, label %for.end.157

for.body.140:                                     ; preds = %for.cond.137
  %147 = load i8*, i8** %buf, align 8, !tbaa !1
  %148 = load i32, i32* %raster_length, align 4, !tbaa !5
  %149 = load i32, i32* %i, align 4, !tbaa !5
  %mul141 = mul nsw i32 %148, %149
  %idx.ext142 = sext i32 %mul141 to i64
  %add.ptr143 = getelementptr inbounds i8, i8* %147, i64 %idx.ext142
  store i8* %add.ptr143, i8** %src_ptr, align 8, !tbaa !1
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond.144

for.cond.144:                                     ; preds = %for.inc.152, %for.body.140
  %150 = load i32, i32* %j, align 4, !tbaa !5
  %151 = load i32, i32* %data_bytes, align 4, !tbaa !5
  %cmp145 = icmp slt i32 %150, %151
  br i1 %cmp145, label %for.body.147, label %for.end.154

for.body.147:                                     ; preds = %for.cond.144
  %152 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom148 = sext i32 %152 to i64
  %153 = load i8*, i8** %src_ptr, align 8, !tbaa !1
  %arrayidx149 = getelementptr inbounds i8, i8* %153, i64 %idxprom148
  %154 = load i8, i8* %arrayidx149, align 1, !tbaa !64
  %conv150 = zext i8 %154 to i32
  %xor = xor i32 %conv150, 255
  %conv151 = trunc i32 %xor to i8
  store i8 %conv151, i8* %arrayidx149, align 1, !tbaa !64
  br label %for.inc.152

for.inc.152:                                      ; preds = %for.body.147
  %155 = load i32, i32* %j, align 4, !tbaa !5
  %inc153 = add nsw i32 %155, 1
  store i32 %inc153, i32* %j, align 4, !tbaa !5
  br label %for.cond.144

for.end.154:                                      ; preds = %for.cond.144
  br label %for.inc.155

for.inc.155:                                      ; preds = %for.end.154
  %156 = load i32, i32* %i, align 4, !tbaa !5
  %inc156 = add nsw i32 %156, 1
  store i32 %inc156, i32* %i, align 4, !tbaa !5
  br label %for.cond.137

for.end.157:                                      ; preds = %for.cond.137
  br label %if.end.158

if.end.158:                                       ; preds = %for.end.157, %if.end.134
  %157 = bitcast i32* %reverse to i8*
  call void @llvm.lifetime.end(i64 4, i8* %157) #2
  br label %if.end.704

if.else.159:                                      ; preds = %if.end.128
  %158 = load i32, i32* @color_index, align 4, !tbaa !64
  %cmp160 = icmp eq i32 %158, 10
  br i1 %cmp160, label %if.then.162, label %if.end.498

if.then.162:                                      ; preds = %if.else.159
  %159 = load i32, i32* @base_color_index, align 4, !tbaa !64
  %cmp163 = icmp eq i32 %159, 0
  br i1 %cmp163, label %if.then.167, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.162
  %160 = load i32, i32* @base_color_index, align 4, !tbaa !64
  %cmp165 = icmp eq i32 %160, 8
  br i1 %cmp165, label %if.then.167, label %if.else.379

if.then.167:                                      ; preds = %lor.lhs.false, %if.then.162
  %161 = load i32, i32* @colorSpace, align 4, !tbaa !64
  %cmp168 = icmp eq i32 %161, 1
  br i1 %cmp168, label %if.then.170, label %if.else.260

if.then.170:                                      ; preds = %if.then.167
  %162 = load i32, i32* %bits_per_pixel, align 4, !tbaa !5
  %cmp171 = icmp eq i32 %162, 8
  br i1 %cmp171, label %if.then.173, label %if.else.212

if.then.173:                                      ; preds = %if.then.170
  %163 = load i32, i32* %data_bytes, align 4, !tbaa !5
  store i32 %163, i32* %dst_bytes, align 4, !tbaa !5
  %164 = load i32, i32* %dst_bytes, align 4, !tbaa !5
  %add174 = add nsw i32 %164, 3
  %shr175 = ashr i32 %add174, 2
  %shl176 = shl i32 %shr175, 2
  store i32 %shl176, i32* %dst_length, align 4, !tbaa !5
  %165 = load i32, i32* %dst_length, align 4, !tbaa !5
  %conv177 = sext i32 %165 to i64
  %166 = load i32, i32* %height.addr, align 4, !tbaa !5
  %conv178 = sext i32 %166 to i64
  %call179 = call noalias i8* @calloc(i64 %conv177, i64 %conv178) #8
  store i8* %call179, i8** %tmp_buf, align 8, !tbaa !1
  %167 = load i8*, i8** %tmp_buf, align 8, !tbaa !1
  %tobool180 = icmp ne i8* %167, null
  br i1 %tobool180, label %if.then.181, label %if.end.211

if.then.181:                                      ; preds = %if.then.173
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.182

for.cond.182:                                     ; preds = %for.inc.207, %if.then.181
  %168 = load i32, i32* %i, align 4, !tbaa !5
  %169 = load i32, i32* %height.addr, align 4, !tbaa !5
  %cmp183 = icmp slt i32 %168, %169
  br i1 %cmp183, label %for.body.185, label %for.end.209

for.body.185:                                     ; preds = %for.cond.182
  %170 = load i8*, i8** %buf, align 8, !tbaa !1
  %171 = load i32, i32* %raster_length, align 4, !tbaa !5
  %172 = load i32, i32* %i, align 4, !tbaa !5
  %mul186 = mul nsw i32 %171, %172
  %idx.ext187 = sext i32 %mul186 to i64
  %add.ptr188 = getelementptr inbounds i8, i8* %170, i64 %idx.ext187
  store i8* %add.ptr188, i8** %src_ptr, align 8, !tbaa !1
  %173 = load i8*, i8** %tmp_buf, align 8, !tbaa !1
  %174 = load i32, i32* %dst_length, align 4, !tbaa !5
  %175 = load i32, i32* %i, align 4, !tbaa !5
  %mul189 = mul nsw i32 %174, %175
  %idx.ext190 = sext i32 %mul189 to i64
  %add.ptr191 = getelementptr inbounds i8, i8* %173, i64 %idx.ext190
  store i8* %add.ptr191, i8** %dst_ptr, align 8, !tbaa !1
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond.192

for.cond.192:                                     ; preds = %for.inc.204, %for.body.185
  %176 = load i32, i32* %j, align 4, !tbaa !5
  %177 = load i32, i32* %data_bytes, align 4, !tbaa !5
  %cmp193 = icmp slt i32 %176, %177
  br i1 %cmp193, label %for.body.195, label %for.end.206

for.body.195:                                     ; preds = %for.cond.192
  %178 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom196 = sext i32 %178 to i64
  %179 = load i8*, i8** %src_ptr, align 8, !tbaa !1
  %arrayidx197 = getelementptr inbounds i8, i8* %179, i64 %idxprom196
  %180 = load i8, i8* %arrayidx197, align 1, !tbaa !64
  %conv198 = zext i8 %180 to i32
  %idx.ext199 = sext i32 %conv198 to i64
  %add.ptr200 = getelementptr inbounds i8, i8* getelementptr inbounds ([768 x i8], [768 x i8]* @palette, i32 0, i32 0), i64 %idx.ext199
  store i8* %add.ptr200, i8** %ppalette, align 8, !tbaa !1
  %181 = load i8*, i8** %ppalette, align 8, !tbaa !1
  %arrayidx201 = getelementptr inbounds i8, i8* %181, i64 0
  %182 = load i8, i8* %arrayidx201, align 1, !tbaa !64
  %183 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom202 = sext i32 %183 to i64
  %184 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx203 = getelementptr inbounds i8, i8* %184, i64 %idxprom202
  store i8 %182, i8* %arrayidx203, align 1, !tbaa !64
  br label %for.inc.204

for.inc.204:                                      ; preds = %for.body.195
  %185 = load i32, i32* %j, align 4, !tbaa !5
  %inc205 = add nsw i32 %185, 1
  store i32 %inc205, i32* %j, align 4, !tbaa !5
  br label %for.cond.192

for.end.206:                                      ; preds = %for.cond.192
  br label %for.inc.207

for.inc.207:                                      ; preds = %for.end.206
  %186 = load i32, i32* %i, align 4, !tbaa !5
  %inc208 = add nsw i32 %186, 1
  store i32 %inc208, i32* %i, align 4, !tbaa !5
  br label %for.cond.182

for.end.209:                                      ; preds = %for.cond.182
  %187 = load i8*, i8** %buf, align 8, !tbaa !1
  call void @free(i8* %187) #8
  %188 = load i8*, i8** %tmp_buf, align 8, !tbaa !1
  store i8* %188, i8** %buf, align 8, !tbaa !1
  %189 = load i32, i32* %dst_bytes, align 4, !tbaa !5
  store i32 %189, i32* %data_bytes, align 4, !tbaa !5
  %190 = load i32, i32* %dst_length, align 4, !tbaa !5
  store i32 %190, i32* %raster_length, align 4, !tbaa !5
  %191 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %bits_per_pixel210 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %191, i32 0, i32 13
  store i32 8, i32* %bits_per_pixel210, align 4, !tbaa !345
  br label %if.end.211

if.end.211:                                       ; preds = %for.end.209, %if.then.173
  br label %if.end.259

if.else.212:                                      ; preds = %if.then.170
  %192 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %width213 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %192, i32 0, i32 11
  %193 = load i32, i32* %width213, align 4, !tbaa !120
  store i32 %193, i32* %dst_bytes, align 4, !tbaa !5
  %194 = load i32, i32* %dst_bytes, align 4, !tbaa !5
  %add214 = add nsw i32 %194, 3
  %shr215 = ashr i32 %add214, 2
  %shl216 = shl i32 %shr215, 2
  store i32 %shl216, i32* %dst_length, align 4, !tbaa !5
  %195 = load i32, i32* %dst_length, align 4, !tbaa !5
  %conv217 = sext i32 %195 to i64
  %196 = load i32, i32* %height.addr, align 4, !tbaa !5
  %conv218 = sext i32 %196 to i64
  %call219 = call noalias i8* @calloc(i64 %conv217, i64 %conv218) #8
  store i8* %call219, i8** %tmp_buf, align 8, !tbaa !1
  %197 = load i8*, i8** %tmp_buf, align 8, !tbaa !1
  %tobool220 = icmp ne i8* %197, null
  br i1 %tobool220, label %if.then.221, label %if.end.258

if.then.221:                                      ; preds = %if.else.212
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.222

for.cond.222:                                     ; preds = %for.inc.254, %if.then.221
  %198 = load i32, i32* %i, align 4, !tbaa !5
  %199 = load i32, i32* %height.addr, align 4, !tbaa !5
  %cmp223 = icmp slt i32 %198, %199
  br i1 %cmp223, label %for.body.225, label %for.end.256

for.body.225:                                     ; preds = %for.cond.222
  %200 = load i8*, i8** %buf, align 8, !tbaa !1
  %201 = load i32, i32* %raster_length, align 4, !tbaa !5
  %202 = load i32, i32* %i, align 4, !tbaa !5
  %mul226 = mul nsw i32 %201, %202
  %idx.ext227 = sext i32 %mul226 to i64
  %add.ptr228 = getelementptr inbounds i8, i8* %200, i64 %idx.ext227
  store i8* %add.ptr228, i8** %src_ptr, align 8, !tbaa !1
  %203 = load i8*, i8** %tmp_buf, align 8, !tbaa !1
  %204 = load i32, i32* %dst_length, align 4, !tbaa !5
  %205 = load i32, i32* %i, align 4, !tbaa !5
  %mul229 = mul nsw i32 %204, %205
  %idx.ext230 = sext i32 %mul229 to i64
  %add.ptr231 = getelementptr inbounds i8, i8* %203, i64 %idx.ext230
  store i8* %add.ptr231, i8** %dst_ptr, align 8, !tbaa !1
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond.232

for.cond.232:                                     ; preds = %for.inc.251, %for.body.225
  %206 = load i32, i32* %j, align 4, !tbaa !5
  %207 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %width233 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %207, i32 0, i32 11
  %208 = load i32, i32* %width233, align 4, !tbaa !120
  %cmp234 = icmp slt i32 %206, %208
  br i1 %cmp234, label %for.body.236, label %for.end.253

for.body.236:                                     ; preds = %for.cond.232
  %209 = bitcast i32* %o to i8*
  call void @llvm.lifetime.start(i64 4, i8* %209) #2
  %210 = load i32, i32* %j, align 4, !tbaa !5
  %div237 = sdiv i32 %210, 8
  %idxprom238 = sext i32 %div237 to i64
  %211 = load i8*, i8** %src_ptr, align 8, !tbaa !1
  %arrayidx239 = getelementptr inbounds i8, i8* %211, i64 %idxprom238
  %212 = load i8, i8* %arrayidx239, align 1, !tbaa !64
  %conv240 = zext i8 %212 to i32
  %213 = load i32, i32* %j, align 4, !tbaa !5
  %and = and i32 %213, 7
  %sub241 = sub nsw i32 7, %and
  %shl242 = shl i32 1, %sub241
  %and243 = and i32 %conv240, %shl242
  %cmp244 = icmp ne i32 %and243, 0
  %conv245 = zext i1 %cmp244 to i32
  store i32 %conv245, i32* %o, align 4, !tbaa !5
  %214 = load i32, i32* %o, align 4, !tbaa !5
  %idx.ext246 = sext i32 %214 to i64
  %add.ptr247 = getelementptr inbounds i8, i8* getelementptr inbounds ([768 x i8], [768 x i8]* @palette, i32 0, i32 0), i64 %idx.ext246
  store i8* %add.ptr247, i8** %ppalette, align 8, !tbaa !1
  %215 = load i8*, i8** %ppalette, align 8, !tbaa !1
  %arrayidx248 = getelementptr inbounds i8, i8* %215, i64 0
  %216 = load i8, i8* %arrayidx248, align 1, !tbaa !64
  %217 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom249 = sext i32 %217 to i64
  %218 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx250 = getelementptr inbounds i8, i8* %218, i64 %idxprom249
  store i8 %216, i8* %arrayidx250, align 1, !tbaa !64
  %219 = bitcast i32* %o to i8*
  call void @llvm.lifetime.end(i64 4, i8* %219) #2
  br label %for.inc.251

for.inc.251:                                      ; preds = %for.body.236
  %220 = load i32, i32* %j, align 4, !tbaa !5
  %inc252 = add nsw i32 %220, 1
  store i32 %inc252, i32* %j, align 4, !tbaa !5
  br label %for.cond.232

for.end.253:                                      ; preds = %for.cond.232
  br label %for.inc.254

for.inc.254:                                      ; preds = %for.end.253
  %221 = load i32, i32* %i, align 4, !tbaa !5
  %inc255 = add nsw i32 %221, 1
  store i32 %inc255, i32* %i, align 4, !tbaa !5
  br label %for.cond.222

for.end.256:                                      ; preds = %for.cond.222
  %222 = load i8*, i8** %buf, align 8, !tbaa !1
  call void @free(i8* %222) #8
  %223 = load i8*, i8** %tmp_buf, align 8, !tbaa !1
  store i8* %223, i8** %buf, align 8, !tbaa !1
  %224 = load i32, i32* %dst_bytes, align 4, !tbaa !5
  store i32 %224, i32* %data_bytes, align 4, !tbaa !5
  %225 = load i32, i32* %dst_length, align 4, !tbaa !5
  store i32 %225, i32* %raster_length, align 4, !tbaa !5
  %226 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %bits_per_pixel257 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %226, i32 0, i32 13
  store i32 8, i32* %bits_per_pixel257, align 4, !tbaa !345
  br label %if.end.258

if.end.258:                                       ; preds = %for.end.256, %if.else.212
  br label %if.end.259

if.end.259:                                       ; preds = %if.end.258, %if.end.211
  br label %if.end.378

if.else.260:                                      ; preds = %if.then.167
  %227 = load i32, i32* %bits_per_pixel, align 4, !tbaa !5
  %cmp261 = icmp eq i32 %227, 8
  br i1 %cmp261, label %if.then.263, label %if.else.315

if.then.263:                                      ; preds = %if.else.260
  %228 = load i32, i32* %data_bytes, align 4, !tbaa !5
  %mul264 = mul nsw i32 %228, 3
  store i32 %mul264, i32* %dst_bytes, align 4, !tbaa !5
  %229 = load i32, i32* %dst_bytes, align 4, !tbaa !5
  %add265 = add nsw i32 %229, 3
  %shr266 = ashr i32 %add265, 2
  %shl267 = shl i32 %shr266, 2
  store i32 %shl267, i32* %dst_length, align 4, !tbaa !5
  %230 = load i32, i32* %dst_length, align 4, !tbaa !5
  %conv268 = sext i32 %230 to i64
  %231 = load i32, i32* %height.addr, align 4, !tbaa !5
  %conv269 = sext i32 %231 to i64
  %call270 = call noalias i8* @calloc(i64 %conv268, i64 %conv269) #8
  store i8* %call270, i8** %tmp_buf, align 8, !tbaa !1
  %232 = load i8*, i8** %tmp_buf, align 8, !tbaa !1
  %tobool271 = icmp ne i8* %232, null
  br i1 %tobool271, label %if.then.272, label %if.end.314

if.then.272:                                      ; preds = %if.then.263
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.273

for.cond.273:                                     ; preds = %for.inc.310, %if.then.272
  %233 = load i32, i32* %i, align 4, !tbaa !5
  %234 = load i32, i32* %height.addr, align 4, !tbaa !5
  %cmp274 = icmp slt i32 %233, %234
  br i1 %cmp274, label %for.body.276, label %for.end.312

for.body.276:                                     ; preds = %for.cond.273
  %235 = load i8*, i8** %buf, align 8, !tbaa !1
  %236 = load i32, i32* %raster_length, align 4, !tbaa !5
  %237 = load i32, i32* %i, align 4, !tbaa !5
  %mul277 = mul nsw i32 %236, %237
  %idx.ext278 = sext i32 %mul277 to i64
  %add.ptr279 = getelementptr inbounds i8, i8* %235, i64 %idx.ext278
  store i8* %add.ptr279, i8** %src_ptr, align 8, !tbaa !1
  %238 = load i8*, i8** %tmp_buf, align 8, !tbaa !1
  %239 = load i32, i32* %dst_length, align 4, !tbaa !5
  %240 = load i32, i32* %i, align 4, !tbaa !5
  %mul280 = mul nsw i32 %239, %240
  %idx.ext281 = sext i32 %mul280 to i64
  %add.ptr282 = getelementptr inbounds i8, i8* %238, i64 %idx.ext281
  store i8* %add.ptr282, i8** %dst_ptr, align 8, !tbaa !1
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond.283

for.cond.283:                                     ; preds = %for.inc.307, %for.body.276
  %241 = load i32, i32* %j, align 4, !tbaa !5
  %242 = load i32, i32* %data_bytes, align 4, !tbaa !5
  %cmp284 = icmp slt i32 %241, %242
  br i1 %cmp284, label %for.body.286, label %for.end.309

for.body.286:                                     ; preds = %for.cond.283
  %243 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom287 = sext i32 %243 to i64
  %244 = load i8*, i8** %src_ptr, align 8, !tbaa !1
  %arrayidx288 = getelementptr inbounds i8, i8* %244, i64 %idxprom287
  %245 = load i8, i8* %arrayidx288, align 1, !tbaa !64
  %conv289 = zext i8 %245 to i32
  %mul290 = mul nsw i32 %conv289, 3
  %idx.ext291 = sext i32 %mul290 to i64
  %add.ptr292 = getelementptr inbounds i8, i8* getelementptr inbounds ([768 x i8], [768 x i8]* @palette, i32 0, i32 0), i64 %idx.ext291
  store i8* %add.ptr292, i8** %ppalette, align 8, !tbaa !1
  %246 = load i8*, i8** %ppalette, align 8, !tbaa !1
  %arrayidx293 = getelementptr inbounds i8, i8* %246, i64 0
  %247 = load i8, i8* %arrayidx293, align 1, !tbaa !64
  %248 = load i32, i32* %j, align 4, !tbaa !5
  %mul294 = mul nsw i32 %248, 3
  %idxprom295 = sext i32 %mul294 to i64
  %249 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx296 = getelementptr inbounds i8, i8* %249, i64 %idxprom295
  store i8 %247, i8* %arrayidx296, align 1, !tbaa !64
  %250 = load i8*, i8** %ppalette, align 8, !tbaa !1
  %arrayidx297 = getelementptr inbounds i8, i8* %250, i64 0
  %251 = load i8, i8* %arrayidx297, align 1, !tbaa !64
  %252 = load i32, i32* %j, align 4, !tbaa !5
  %mul298 = mul nsw i32 %252, 3
  %add299 = add nsw i32 %mul298, 1
  %idxprom300 = sext i32 %add299 to i64
  %253 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx301 = getelementptr inbounds i8, i8* %253, i64 %idxprom300
  store i8 %251, i8* %arrayidx301, align 1, !tbaa !64
  %254 = load i8*, i8** %ppalette, align 8, !tbaa !1
  %arrayidx302 = getelementptr inbounds i8, i8* %254, i64 0
  %255 = load i8, i8* %arrayidx302, align 1, !tbaa !64
  %256 = load i32, i32* %j, align 4, !tbaa !5
  %mul303 = mul nsw i32 %256, 3
  %add304 = add nsw i32 %mul303, 2
  %idxprom305 = sext i32 %add304 to i64
  %257 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx306 = getelementptr inbounds i8, i8* %257, i64 %idxprom305
  store i8 %255, i8* %arrayidx306, align 1, !tbaa !64
  br label %for.inc.307

for.inc.307:                                      ; preds = %for.body.286
  %258 = load i32, i32* %j, align 4, !tbaa !5
  %inc308 = add nsw i32 %258, 1
  store i32 %inc308, i32* %j, align 4, !tbaa !5
  br label %for.cond.283

for.end.309:                                      ; preds = %for.cond.283
  br label %for.inc.310

for.inc.310:                                      ; preds = %for.end.309
  %259 = load i32, i32* %i, align 4, !tbaa !5
  %inc311 = add nsw i32 %259, 1
  store i32 %inc311, i32* %i, align 4, !tbaa !5
  br label %for.cond.273

for.end.312:                                      ; preds = %for.cond.273
  %260 = load i8*, i8** %buf, align 8, !tbaa !1
  call void @free(i8* %260) #8
  %261 = load i8*, i8** %tmp_buf, align 8, !tbaa !1
  store i8* %261, i8** %buf, align 8, !tbaa !1
  %262 = load i32, i32* %dst_bytes, align 4, !tbaa !5
  store i32 %262, i32* %data_bytes, align 4, !tbaa !5
  %263 = load i32, i32* %dst_length, align 4, !tbaa !5
  store i32 %263, i32* %raster_length, align 4, !tbaa !5
  %264 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %bits_per_pixel313 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %264, i32 0, i32 13
  store i32 24, i32* %bits_per_pixel313, align 4, !tbaa !345
  br label %if.end.314

if.end.314:                                       ; preds = %for.end.312, %if.then.263
  br label %if.end.377

if.else.315:                                      ; preds = %if.else.260
  %265 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %width316 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %265, i32 0, i32 11
  %266 = load i32, i32* %width316, align 4, !tbaa !120
  %mul317 = mul nsw i32 %266, 3
  store i32 %mul317, i32* %dst_bytes, align 4, !tbaa !5
  %267 = load i32, i32* %dst_bytes, align 4, !tbaa !5
  %add318 = add nsw i32 %267, 3
  %shr319 = ashr i32 %add318, 2
  %shl320 = shl i32 %shr319, 2
  store i32 %shl320, i32* %dst_length, align 4, !tbaa !5
  %268 = load i32, i32* %dst_length, align 4, !tbaa !5
  %conv321 = sext i32 %268 to i64
  %269 = load i32, i32* %height.addr, align 4, !tbaa !5
  %conv322 = sext i32 %269 to i64
  %call323 = call noalias i8* @calloc(i64 %conv321, i64 %conv322) #8
  store i8* %call323, i8** %tmp_buf, align 8, !tbaa !1
  %270 = load i8*, i8** %tmp_buf, align 8, !tbaa !1
  %tobool324 = icmp ne i8* %270, null
  br i1 %tobool324, label %if.then.325, label %if.end.376

if.then.325:                                      ; preds = %if.else.315
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.326

for.cond.326:                                     ; preds = %for.inc.372, %if.then.325
  %271 = load i32, i32* %i, align 4, !tbaa !5
  %272 = load i32, i32* %height.addr, align 4, !tbaa !5
  %cmp327 = icmp slt i32 %271, %272
  br i1 %cmp327, label %for.body.329, label %for.end.374

for.body.329:                                     ; preds = %for.cond.326
  %273 = load i8*, i8** %buf, align 8, !tbaa !1
  %274 = load i32, i32* %raster_length, align 4, !tbaa !5
  %275 = load i32, i32* %i, align 4, !tbaa !5
  %mul330 = mul nsw i32 %274, %275
  %idx.ext331 = sext i32 %mul330 to i64
  %add.ptr332 = getelementptr inbounds i8, i8* %273, i64 %idx.ext331
  store i8* %add.ptr332, i8** %src_ptr, align 8, !tbaa !1
  %276 = load i8*, i8** %tmp_buf, align 8, !tbaa !1
  %277 = load i32, i32* %dst_length, align 4, !tbaa !5
  %278 = load i32, i32* %i, align 4, !tbaa !5
  %mul333 = mul nsw i32 %277, %278
  %idx.ext334 = sext i32 %mul333 to i64
  %add.ptr335 = getelementptr inbounds i8, i8* %276, i64 %idx.ext334
  store i8* %add.ptr335, i8** %dst_ptr, align 8, !tbaa !1
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond.336

for.cond.336:                                     ; preds = %for.inc.369, %for.body.329
  %279 = load i32, i32* %j, align 4, !tbaa !5
  %280 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %width337 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %280, i32 0, i32 11
  %281 = load i32, i32* %width337, align 4, !tbaa !120
  %cmp338 = icmp slt i32 %279, %281
  br i1 %cmp338, label %for.body.340, label %for.end.371

for.body.340:                                     ; preds = %for.cond.336
  %282 = bitcast i32* %o341 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %282) #2
  %283 = load i32, i32* %j, align 4, !tbaa !5
  %div342 = sdiv i32 %283, 8
  %idxprom343 = sext i32 %div342 to i64
  %284 = load i8*, i8** %src_ptr, align 8, !tbaa !1
  %arrayidx344 = getelementptr inbounds i8, i8* %284, i64 %idxprom343
  %285 = load i8, i8* %arrayidx344, align 1, !tbaa !64
  %conv345 = zext i8 %285 to i32
  %286 = load i32, i32* %j, align 4, !tbaa !5
  %and346 = and i32 %286, 7
  %sub347 = sub nsw i32 7, %and346
  %shl348 = shl i32 1, %sub347
  %and349 = and i32 %conv345, %shl348
  %cmp350 = icmp ne i32 %and349, 0
  %conv351 = zext i1 %cmp350 to i32
  store i32 %conv351, i32* %o341, align 4, !tbaa !5
  %287 = load i32, i32* %o341, align 4, !tbaa !5
  %mul352 = mul nsw i32 %287, 3
  %idx.ext353 = sext i32 %mul352 to i64
  %add.ptr354 = getelementptr inbounds i8, i8* getelementptr inbounds ([768 x i8], [768 x i8]* @palette, i32 0, i32 0), i64 %idx.ext353
  store i8* %add.ptr354, i8** %ppalette, align 8, !tbaa !1
  %288 = load i8*, i8** %ppalette, align 8, !tbaa !1
  %arrayidx355 = getelementptr inbounds i8, i8* %288, i64 0
  %289 = load i8, i8* %arrayidx355, align 1, !tbaa !64
  %290 = load i32, i32* %j, align 4, !tbaa !5
  %mul356 = mul nsw i32 %290, 3
  %idxprom357 = sext i32 %mul356 to i64
  %291 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx358 = getelementptr inbounds i8, i8* %291, i64 %idxprom357
  store i8 %289, i8* %arrayidx358, align 1, !tbaa !64
  %292 = load i8*, i8** %ppalette, align 8, !tbaa !1
  %arrayidx359 = getelementptr inbounds i8, i8* %292, i64 0
  %293 = load i8, i8* %arrayidx359, align 1, !tbaa !64
  %294 = load i32, i32* %j, align 4, !tbaa !5
  %mul360 = mul nsw i32 %294, 3
  %add361 = add nsw i32 %mul360, 1
  %idxprom362 = sext i32 %add361 to i64
  %295 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx363 = getelementptr inbounds i8, i8* %295, i64 %idxprom362
  store i8 %293, i8* %arrayidx363, align 1, !tbaa !64
  %296 = load i8*, i8** %ppalette, align 8, !tbaa !1
  %arrayidx364 = getelementptr inbounds i8, i8* %296, i64 0
  %297 = load i8, i8* %arrayidx364, align 1, !tbaa !64
  %298 = load i32, i32* %j, align 4, !tbaa !5
  %mul365 = mul nsw i32 %298, 3
  %add366 = add nsw i32 %mul365, 2
  %idxprom367 = sext i32 %add366 to i64
  %299 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx368 = getelementptr inbounds i8, i8* %299, i64 %idxprom367
  store i8 %297, i8* %arrayidx368, align 1, !tbaa !64
  %300 = bitcast i32* %o341 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %300) #2
  br label %for.inc.369

for.inc.369:                                      ; preds = %for.body.340
  %301 = load i32, i32* %j, align 4, !tbaa !5
  %inc370 = add nsw i32 %301, 1
  store i32 %inc370, i32* %j, align 4, !tbaa !5
  br label %for.cond.336

for.end.371:                                      ; preds = %for.cond.336
  br label %for.inc.372

for.inc.372:                                      ; preds = %for.end.371
  %302 = load i32, i32* %i, align 4, !tbaa !5
  %inc373 = add nsw i32 %302, 1
  store i32 %inc373, i32* %i, align 4, !tbaa !5
  br label %for.cond.326

for.end.374:                                      ; preds = %for.cond.326
  %303 = load i8*, i8** %buf, align 8, !tbaa !1
  call void @free(i8* %303) #8
  %304 = load i8*, i8** %tmp_buf, align 8, !tbaa !1
  store i8* %304, i8** %buf, align 8, !tbaa !1
  %305 = load i32, i32* %dst_bytes, align 4, !tbaa !5
  store i32 %305, i32* %data_bytes, align 4, !tbaa !5
  %306 = load i32, i32* %dst_length, align 4, !tbaa !5
  store i32 %306, i32* %raster_length, align 4, !tbaa !5
  %307 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %bits_per_pixel375 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %307, i32 0, i32 13
  store i32 24, i32* %bits_per_pixel375, align 4, !tbaa !345
  br label %if.end.376

if.end.376:                                       ; preds = %for.end.374, %if.else.315
  br label %if.end.377

if.end.377:                                       ; preds = %if.end.376, %if.end.314
  br label %if.end.378

if.end.378:                                       ; preds = %if.end.377, %if.end.259
  br label %if.end.497

if.else.379:                                      ; preds = %lor.lhs.false
  %308 = load i32, i32* %bits_per_pixel, align 4, !tbaa !5
  %cmp380 = icmp eq i32 %308, 8
  br i1 %cmp380, label %if.then.382, label %if.else.434

if.then.382:                                      ; preds = %if.else.379
  %309 = load i32, i32* %data_bytes, align 4, !tbaa !5
  %mul383 = mul nsw i32 %309, 3
  store i32 %mul383, i32* %dst_bytes, align 4, !tbaa !5
  %310 = load i32, i32* %dst_bytes, align 4, !tbaa !5
  %add384 = add nsw i32 %310, 3
  %shr385 = ashr i32 %add384, 2
  %shl386 = shl i32 %shr385, 2
  store i32 %shl386, i32* %dst_length, align 4, !tbaa !5
  %311 = load i32, i32* %dst_length, align 4, !tbaa !5
  %conv387 = sext i32 %311 to i64
  %312 = load i32, i32* %height.addr, align 4, !tbaa !5
  %conv388 = sext i32 %312 to i64
  %call389 = call noalias i8* @calloc(i64 %conv387, i64 %conv388) #8
  store i8* %call389, i8** %tmp_buf, align 8, !tbaa !1
  %313 = load i8*, i8** %tmp_buf, align 8, !tbaa !1
  %tobool390 = icmp ne i8* %313, null
  br i1 %tobool390, label %if.then.391, label %if.end.433

if.then.391:                                      ; preds = %if.then.382
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.392

for.cond.392:                                     ; preds = %for.inc.429, %if.then.391
  %314 = load i32, i32* %i, align 4, !tbaa !5
  %315 = load i32, i32* %height.addr, align 4, !tbaa !5
  %cmp393 = icmp slt i32 %314, %315
  br i1 %cmp393, label %for.body.395, label %for.end.431

for.body.395:                                     ; preds = %for.cond.392
  %316 = load i8*, i8** %buf, align 8, !tbaa !1
  %317 = load i32, i32* %raster_length, align 4, !tbaa !5
  %318 = load i32, i32* %i, align 4, !tbaa !5
  %mul396 = mul nsw i32 %317, %318
  %idx.ext397 = sext i32 %mul396 to i64
  %add.ptr398 = getelementptr inbounds i8, i8* %316, i64 %idx.ext397
  store i8* %add.ptr398, i8** %src_ptr, align 8, !tbaa !1
  %319 = load i8*, i8** %tmp_buf, align 8, !tbaa !1
  %320 = load i32, i32* %dst_length, align 4, !tbaa !5
  %321 = load i32, i32* %i, align 4, !tbaa !5
  %mul399 = mul nsw i32 %320, %321
  %idx.ext400 = sext i32 %mul399 to i64
  %add.ptr401 = getelementptr inbounds i8, i8* %319, i64 %idx.ext400
  store i8* %add.ptr401, i8** %dst_ptr, align 8, !tbaa !1
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond.402

for.cond.402:                                     ; preds = %for.inc.426, %for.body.395
  %322 = load i32, i32* %j, align 4, !tbaa !5
  %323 = load i32, i32* %data_bytes, align 4, !tbaa !5
  %cmp403 = icmp slt i32 %322, %323
  br i1 %cmp403, label %for.body.405, label %for.end.428

for.body.405:                                     ; preds = %for.cond.402
  %324 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom406 = sext i32 %324 to i64
  %325 = load i8*, i8** %src_ptr, align 8, !tbaa !1
  %arrayidx407 = getelementptr inbounds i8, i8* %325, i64 %idxprom406
  %326 = load i8, i8* %arrayidx407, align 1, !tbaa !64
  %conv408 = zext i8 %326 to i32
  %mul409 = mul nsw i32 %conv408, 3
  %idx.ext410 = sext i32 %mul409 to i64
  %add.ptr411 = getelementptr inbounds i8, i8* getelementptr inbounds ([768 x i8], [768 x i8]* @palette, i32 0, i32 0), i64 %idx.ext410
  store i8* %add.ptr411, i8** %ppalette, align 8, !tbaa !1
  %327 = load i8*, i8** %ppalette, align 8, !tbaa !1
  %arrayidx412 = getelementptr inbounds i8, i8* %327, i64 0
  %328 = load i8, i8* %arrayidx412, align 1, !tbaa !64
  %329 = load i32, i32* %j, align 4, !tbaa !5
  %mul413 = mul nsw i32 %329, 3
  %idxprom414 = sext i32 %mul413 to i64
  %330 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx415 = getelementptr inbounds i8, i8* %330, i64 %idxprom414
  store i8 %328, i8* %arrayidx415, align 1, !tbaa !64
  %331 = load i8*, i8** %ppalette, align 8, !tbaa !1
  %arrayidx416 = getelementptr inbounds i8, i8* %331, i64 1
  %332 = load i8, i8* %arrayidx416, align 1, !tbaa !64
  %333 = load i32, i32* %j, align 4, !tbaa !5
  %mul417 = mul nsw i32 %333, 3
  %add418 = add nsw i32 %mul417, 1
  %idxprom419 = sext i32 %add418 to i64
  %334 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx420 = getelementptr inbounds i8, i8* %334, i64 %idxprom419
  store i8 %332, i8* %arrayidx420, align 1, !tbaa !64
  %335 = load i8*, i8** %ppalette, align 8, !tbaa !1
  %arrayidx421 = getelementptr inbounds i8, i8* %335, i64 2
  %336 = load i8, i8* %arrayidx421, align 1, !tbaa !64
  %337 = load i32, i32* %j, align 4, !tbaa !5
  %mul422 = mul nsw i32 %337, 3
  %add423 = add nsw i32 %mul422, 2
  %idxprom424 = sext i32 %add423 to i64
  %338 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx425 = getelementptr inbounds i8, i8* %338, i64 %idxprom424
  store i8 %336, i8* %arrayidx425, align 1, !tbaa !64
  br label %for.inc.426

for.inc.426:                                      ; preds = %for.body.405
  %339 = load i32, i32* %j, align 4, !tbaa !5
  %inc427 = add nsw i32 %339, 1
  store i32 %inc427, i32* %j, align 4, !tbaa !5
  br label %for.cond.402

for.end.428:                                      ; preds = %for.cond.402
  br label %for.inc.429

for.inc.429:                                      ; preds = %for.end.428
  %340 = load i32, i32* %i, align 4, !tbaa !5
  %inc430 = add nsw i32 %340, 1
  store i32 %inc430, i32* %i, align 4, !tbaa !5
  br label %for.cond.392

for.end.431:                                      ; preds = %for.cond.392
  %341 = load i8*, i8** %buf, align 8, !tbaa !1
  call void @free(i8* %341) #8
  %342 = load i8*, i8** %tmp_buf, align 8, !tbaa !1
  store i8* %342, i8** %buf, align 8, !tbaa !1
  %343 = load i32, i32* %dst_bytes, align 4, !tbaa !5
  store i32 %343, i32* %data_bytes, align 4, !tbaa !5
  %344 = load i32, i32* %dst_length, align 4, !tbaa !5
  store i32 %344, i32* %raster_length, align 4, !tbaa !5
  %345 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %bits_per_pixel432 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %345, i32 0, i32 13
  store i32 24, i32* %bits_per_pixel432, align 4, !tbaa !345
  br label %if.end.433

if.end.433:                                       ; preds = %for.end.431, %if.then.382
  br label %if.end.496

if.else.434:                                      ; preds = %if.else.379
  %346 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %width435 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %346, i32 0, i32 11
  %347 = load i32, i32* %width435, align 4, !tbaa !120
  %mul436 = mul nsw i32 %347, 3
  store i32 %mul436, i32* %dst_bytes, align 4, !tbaa !5
  %348 = load i32, i32* %dst_bytes, align 4, !tbaa !5
  %add437 = add nsw i32 %348, 3
  %shr438 = ashr i32 %add437, 2
  %shl439 = shl i32 %shr438, 2
  store i32 %shl439, i32* %dst_length, align 4, !tbaa !5
  %349 = load i32, i32* %dst_length, align 4, !tbaa !5
  %conv440 = sext i32 %349 to i64
  %350 = load i32, i32* %height.addr, align 4, !tbaa !5
  %conv441 = sext i32 %350 to i64
  %call442 = call noalias i8* @calloc(i64 %conv440, i64 %conv441) #8
  store i8* %call442, i8** %tmp_buf, align 8, !tbaa !1
  %351 = load i8*, i8** %tmp_buf, align 8, !tbaa !1
  %tobool443 = icmp ne i8* %351, null
  br i1 %tobool443, label %if.then.444, label %if.end.495

if.then.444:                                      ; preds = %if.else.434
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.445

for.cond.445:                                     ; preds = %for.inc.491, %if.then.444
  %352 = load i32, i32* %i, align 4, !tbaa !5
  %353 = load i32, i32* %height.addr, align 4, !tbaa !5
  %cmp446 = icmp slt i32 %352, %353
  br i1 %cmp446, label %for.body.448, label %for.end.493

for.body.448:                                     ; preds = %for.cond.445
  %354 = load i8*, i8** %buf, align 8, !tbaa !1
  %355 = load i32, i32* %raster_length, align 4, !tbaa !5
  %356 = load i32, i32* %i, align 4, !tbaa !5
  %mul449 = mul nsw i32 %355, %356
  %idx.ext450 = sext i32 %mul449 to i64
  %add.ptr451 = getelementptr inbounds i8, i8* %354, i64 %idx.ext450
  store i8* %add.ptr451, i8** %src_ptr, align 8, !tbaa !1
  %357 = load i8*, i8** %tmp_buf, align 8, !tbaa !1
  %358 = load i32, i32* %dst_length, align 4, !tbaa !5
  %359 = load i32, i32* %i, align 4, !tbaa !5
  %mul452 = mul nsw i32 %358, %359
  %idx.ext453 = sext i32 %mul452 to i64
  %add.ptr454 = getelementptr inbounds i8, i8* %357, i64 %idx.ext453
  store i8* %add.ptr454, i8** %dst_ptr, align 8, !tbaa !1
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond.455

for.cond.455:                                     ; preds = %for.inc.488, %for.body.448
  %360 = load i32, i32* %j, align 4, !tbaa !5
  %361 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %width456 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %361, i32 0, i32 11
  %362 = load i32, i32* %width456, align 4, !tbaa !120
  %cmp457 = icmp slt i32 %360, %362
  br i1 %cmp457, label %for.body.459, label %for.end.490

for.body.459:                                     ; preds = %for.cond.455
  %363 = bitcast i32* %o460 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %363) #2
  %364 = load i32, i32* %j, align 4, !tbaa !5
  %div461 = sdiv i32 %364, 8
  %idxprom462 = sext i32 %div461 to i64
  %365 = load i8*, i8** %src_ptr, align 8, !tbaa !1
  %arrayidx463 = getelementptr inbounds i8, i8* %365, i64 %idxprom462
  %366 = load i8, i8* %arrayidx463, align 1, !tbaa !64
  %conv464 = zext i8 %366 to i32
  %367 = load i32, i32* %j, align 4, !tbaa !5
  %and465 = and i32 %367, 7
  %sub466 = sub nsw i32 7, %and465
  %shl467 = shl i32 1, %sub466
  %and468 = and i32 %conv464, %shl467
  %cmp469 = icmp ne i32 %and468, 0
  %conv470 = zext i1 %cmp469 to i32
  store i32 %conv470, i32* %o460, align 4, !tbaa !5
  %368 = load i32, i32* %o460, align 4, !tbaa !5
  %mul471 = mul nsw i32 %368, 3
  %idx.ext472 = sext i32 %mul471 to i64
  %add.ptr473 = getelementptr inbounds i8, i8* getelementptr inbounds ([768 x i8], [768 x i8]* @palette, i32 0, i32 0), i64 %idx.ext472
  store i8* %add.ptr473, i8** %ppalette, align 8, !tbaa !1
  %369 = load i8*, i8** %ppalette, align 8, !tbaa !1
  %arrayidx474 = getelementptr inbounds i8, i8* %369, i64 0
  %370 = load i8, i8* %arrayidx474, align 1, !tbaa !64
  %371 = load i32, i32* %j, align 4, !tbaa !5
  %mul475 = mul nsw i32 %371, 3
  %idxprom476 = sext i32 %mul475 to i64
  %372 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx477 = getelementptr inbounds i8, i8* %372, i64 %idxprom476
  store i8 %370, i8* %arrayidx477, align 1, !tbaa !64
  %373 = load i8*, i8** %ppalette, align 8, !tbaa !1
  %arrayidx478 = getelementptr inbounds i8, i8* %373, i64 1
  %374 = load i8, i8* %arrayidx478, align 1, !tbaa !64
  %375 = load i32, i32* %j, align 4, !tbaa !5
  %mul479 = mul nsw i32 %375, 3
  %add480 = add nsw i32 %mul479, 1
  %idxprom481 = sext i32 %add480 to i64
  %376 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx482 = getelementptr inbounds i8, i8* %376, i64 %idxprom481
  store i8 %374, i8* %arrayidx482, align 1, !tbaa !64
  %377 = load i8*, i8** %ppalette, align 8, !tbaa !1
  %arrayidx483 = getelementptr inbounds i8, i8* %377, i64 2
  %378 = load i8, i8* %arrayidx483, align 1, !tbaa !64
  %379 = load i32, i32* %j, align 4, !tbaa !5
  %mul484 = mul nsw i32 %379, 3
  %add485 = add nsw i32 %mul484, 2
  %idxprom486 = sext i32 %add485 to i64
  %380 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx487 = getelementptr inbounds i8, i8* %380, i64 %idxprom486
  store i8 %378, i8* %arrayidx487, align 1, !tbaa !64
  %381 = bitcast i32* %o460 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %381) #2
  br label %for.inc.488

for.inc.488:                                      ; preds = %for.body.459
  %382 = load i32, i32* %j, align 4, !tbaa !5
  %inc489 = add nsw i32 %382, 1
  store i32 %inc489, i32* %j, align 4, !tbaa !5
  br label %for.cond.455

for.end.490:                                      ; preds = %for.cond.455
  br label %for.inc.491

for.inc.491:                                      ; preds = %for.end.490
  %383 = load i32, i32* %i, align 4, !tbaa !5
  %inc492 = add nsw i32 %383, 1
  store i32 %inc492, i32* %i, align 4, !tbaa !5
  br label %for.cond.445

for.end.493:                                      ; preds = %for.cond.445
  %384 = load i8*, i8** %buf, align 8, !tbaa !1
  call void @free(i8* %384) #8
  %385 = load i8*, i8** %tmp_buf, align 8, !tbaa !1
  store i8* %385, i8** %buf, align 8, !tbaa !1
  %386 = load i32, i32* %dst_bytes, align 4, !tbaa !5
  store i32 %386, i32* %data_bytes, align 4, !tbaa !5
  %387 = load i32, i32* %dst_length, align 4, !tbaa !5
  store i32 %387, i32* %raster_length, align 4, !tbaa !5
  %388 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %bits_per_pixel494 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %388, i32 0, i32 13
  store i32 24, i32* %bits_per_pixel494, align 4, !tbaa !345
  br label %if.end.495

if.end.495:                                       ; preds = %for.end.493, %if.else.434
  br label %if.end.496

if.end.496:                                       ; preds = %if.end.495, %if.end.433
  br label %if.end.497

if.end.497:                                       ; preds = %if.end.496, %if.end.378
  br label %if.end.498

if.end.498:                                       ; preds = %if.end.497, %if.else.159
  %389 = load i32, i32* @color_index, align 4, !tbaa !64
  %cmp499 = icmp eq i32 %389, 0
  br i1 %cmp499, label %if.then.504, label %lor.lhs.false.501

lor.lhs.false.501:                                ; preds = %if.end.498
  %390 = load i32, i32* @color_index, align 4, !tbaa !64
  %cmp502 = icmp eq i32 %390, 8
  br i1 %cmp502, label %if.then.504, label %if.end.703

if.then.504:                                      ; preds = %lor.lhs.false.501, %if.end.498
  %391 = load i32, i32* @colorSpace, align 4, !tbaa !64
  %cmp505 = icmp eq i32 %391, 6
  br i1 %cmp505, label %if.then.510, label %lor.lhs.false.507

lor.lhs.false.507:                                ; preds = %if.then.504
  %392 = load i32, i32* @colorSpace, align 4, !tbaa !64
  %cmp508 = icmp eq i32 %392, 4
  br i1 %cmp508, label %if.then.510, label %if.else.637

if.then.510:                                      ; preds = %lor.lhs.false.507, %if.then.504
  %393 = load i32, i32* %bits_per_pixel, align 4, !tbaa !5
  %cmp511 = icmp eq i32 %393, 8
  br i1 %cmp511, label %if.then.513, label %if.else.569

if.then.513:                                      ; preds = %if.then.510
  %394 = load i32, i32* %data_bytes, align 4, !tbaa !5
  %mul514 = mul nsw i32 %394, 3
  store i32 %mul514, i32* %dst_bytes, align 4, !tbaa !5
  %395 = load i32, i32* %dst_bytes, align 4, !tbaa !5
  %add515 = add nsw i32 %395, 3
  %shr516 = ashr i32 %add515, 2
  %shl517 = shl i32 %shr516, 2
  store i32 %shl517, i32* %dst_length, align 4, !tbaa !5
  %396 = load i32, i32* %dst_length, align 4, !tbaa !5
  %conv518 = sext i32 %396 to i64
  %397 = load i32, i32* %height.addr, align 4, !tbaa !5
  %conv519 = sext i32 %397 to i64
  %call520 = call noalias i8* @calloc(i64 %conv518, i64 %conv519) #8
  store i8* %call520, i8** %tmp_buf, align 8, !tbaa !1
  %398 = load i8*, i8** %tmp_buf, align 8, !tbaa !1
  %tobool521 = icmp ne i8* %398, null
  br i1 %tobool521, label %if.then.522, label %if.end.568

if.then.522:                                      ; preds = %if.then.513
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.523

for.cond.523:                                     ; preds = %for.inc.564, %if.then.522
  %399 = load i32, i32* %i, align 4, !tbaa !5
  %400 = load i32, i32* %height.addr, align 4, !tbaa !5
  %cmp524 = icmp slt i32 %399, %400
  br i1 %cmp524, label %for.body.526, label %for.end.566

for.body.526:                                     ; preds = %for.cond.523
  %401 = load i8*, i8** %buf, align 8, !tbaa !1
  %402 = load i32, i32* %raster_length, align 4, !tbaa !5
  %403 = load i32, i32* %i, align 4, !tbaa !5
  %mul527 = mul nsw i32 %402, %403
  %idx.ext528 = sext i32 %mul527 to i64
  %add.ptr529 = getelementptr inbounds i8, i8* %401, i64 %idx.ext528
  store i8* %add.ptr529, i8** %src_ptr, align 8, !tbaa !1
  %404 = load i8*, i8** %tmp_buf, align 8, !tbaa !1
  %405 = load i32, i32* %dst_length, align 4, !tbaa !5
  %406 = load i32, i32* %i, align 4, !tbaa !5
  %mul530 = mul nsw i32 %405, %406
  %idx.ext531 = sext i32 %mul530 to i64
  %add.ptr532 = getelementptr inbounds i8, i8* %404, i64 %idx.ext531
  store i8* %add.ptr532, i8** %dst_ptr, align 8, !tbaa !1
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond.533

for.cond.533:                                     ; preds = %for.inc.561, %for.body.526
  %407 = load i32, i32* %j, align 4, !tbaa !5
  %408 = load i32, i32* %data_bytes, align 4, !tbaa !5
  %cmp534 = icmp slt i32 %407, %408
  br i1 %cmp534, label %for.body.536, label %for.end.563

for.body.536:                                     ; preds = %for.cond.533
  call void @llvm.lifetime.start(i64 1, i8* %d537) #2
  %409 = load float, float* getelementptr inbounds ([130 x float], [130 x float]* @imageDecode, i32 0, i64 0), align 4, !tbaa !10
  %mul538 = fmul float %409, 2.550000e+02
  %410 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom539 = sext i32 %410 to i64
  %411 = load i8*, i8** %src_ptr, align 8, !tbaa !1
  %arrayidx540 = getelementptr inbounds i8, i8* %411, i64 %idxprom539
  %412 = load i8, i8* %arrayidx540, align 1, !tbaa !64
  %conv541 = zext i8 %412 to i32
  %conv542 = sitofp i32 %conv541 to float
  %413 = load float, float* getelementptr inbounds ([130 x float], [130 x float]* @imageDecode, i32 0, i64 1), align 4, !tbaa !10
  %414 = load float, float* getelementptr inbounds ([130 x float], [130 x float]* @imageDecode, i32 0, i64 0), align 4, !tbaa !10
  %sub543 = fsub float %413, %414
  %mul544 = fmul float %conv542, %sub543
  %add545 = fadd float %mul538, %mul544
  %conv546 = fpext float %add545 to double
  %add547 = fadd double %conv546, 5.000000e-01
  %call548 = call double @floor(double %add547) #10
  %conv549 = fptoui double %call548 to i8
  store i8 %conv549, i8* %d537, align 1, !tbaa !64
  %415 = load i8, i8* %d537, align 1, !tbaa !64
  %416 = load i32, i32* %j, align 4, !tbaa !5
  %mul550 = mul nsw i32 %416, 3
  %idxprom551 = sext i32 %mul550 to i64
  %417 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx552 = getelementptr inbounds i8, i8* %417, i64 %idxprom551
  store i8 %415, i8* %arrayidx552, align 1, !tbaa !64
  %418 = load i8, i8* %d537, align 1, !tbaa !64
  %419 = load i32, i32* %j, align 4, !tbaa !5
  %mul553 = mul nsw i32 %419, 3
  %add554 = add nsw i32 %mul553, 1
  %idxprom555 = sext i32 %add554 to i64
  %420 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx556 = getelementptr inbounds i8, i8* %420, i64 %idxprom555
  store i8 %418, i8* %arrayidx556, align 1, !tbaa !64
  %421 = load i8, i8* %d537, align 1, !tbaa !64
  %422 = load i32, i32* %j, align 4, !tbaa !5
  %mul557 = mul nsw i32 %422, 3
  %add558 = add nsw i32 %mul557, 2
  %idxprom559 = sext i32 %add558 to i64
  %423 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx560 = getelementptr inbounds i8, i8* %423, i64 %idxprom559
  store i8 %421, i8* %arrayidx560, align 1, !tbaa !64
  call void @llvm.lifetime.end(i64 1, i8* %d537) #2
  br label %for.inc.561

for.inc.561:                                      ; preds = %for.body.536
  %424 = load i32, i32* %j, align 4, !tbaa !5
  %inc562 = add nsw i32 %424, 1
  store i32 %inc562, i32* %j, align 4, !tbaa !5
  br label %for.cond.533

for.end.563:                                      ; preds = %for.cond.533
  br label %for.inc.564

for.inc.564:                                      ; preds = %for.end.563
  %425 = load i32, i32* %i, align 4, !tbaa !5
  %inc565 = add nsw i32 %425, 1
  store i32 %inc565, i32* %i, align 4, !tbaa !5
  br label %for.cond.523

for.end.566:                                      ; preds = %for.cond.523
  %426 = load i8*, i8** %buf, align 8, !tbaa !1
  call void @free(i8* %426) #8
  %427 = load i8*, i8** %tmp_buf, align 8, !tbaa !1
  store i8* %427, i8** %buf, align 8, !tbaa !1
  %428 = load i32, i32* %dst_bytes, align 4, !tbaa !5
  store i32 %428, i32* %data_bytes, align 4, !tbaa !5
  %429 = load i32, i32* %dst_length, align 4, !tbaa !5
  store i32 %429, i32* %raster_length, align 4, !tbaa !5
  %430 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %bits_per_pixel567 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %430, i32 0, i32 13
  store i32 24, i32* %bits_per_pixel567, align 4, !tbaa !345
  br label %if.end.568

if.end.568:                                       ; preds = %for.end.566, %if.then.513
  br label %if.end.636

if.else.569:                                      ; preds = %if.then.510
  %431 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %width570 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %431, i32 0, i32 11
  %432 = load i32, i32* %width570, align 4, !tbaa !120
  %mul571 = mul nsw i32 %432, 3
  store i32 %mul571, i32* %dst_bytes, align 4, !tbaa !5
  %433 = load i32, i32* %dst_bytes, align 4, !tbaa !5
  %add572 = add nsw i32 %433, 3
  %shr573 = ashr i32 %add572, 2
  %shl574 = shl i32 %shr573, 2
  store i32 %shl574, i32* %dst_length, align 4, !tbaa !5
  %434 = load i32, i32* %dst_length, align 4, !tbaa !5
  %conv575 = sext i32 %434 to i64
  %435 = load i32, i32* %height.addr, align 4, !tbaa !5
  %conv576 = sext i32 %435 to i64
  %call577 = call noalias i8* @calloc(i64 %conv575, i64 %conv576) #8
  store i8* %call577, i8** %tmp_buf, align 8, !tbaa !1
  %436 = load i8*, i8** %tmp_buf, align 8, !tbaa !1
  %tobool578 = icmp ne i8* %436, null
  br i1 %tobool578, label %if.then.579, label %if.end.635

if.then.579:                                      ; preds = %if.else.569
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.580

for.cond.580:                                     ; preds = %for.inc.631, %if.then.579
  %437 = load i32, i32* %i, align 4, !tbaa !5
  %438 = load i32, i32* %height.addr, align 4, !tbaa !5
  %cmp581 = icmp slt i32 %437, %438
  br i1 %cmp581, label %for.body.583, label %for.end.633

for.body.583:                                     ; preds = %for.cond.580
  %439 = load i8*, i8** %buf, align 8, !tbaa !1
  %440 = load i32, i32* %raster_length, align 4, !tbaa !5
  %441 = load i32, i32* %i, align 4, !tbaa !5
  %mul584 = mul nsw i32 %440, %441
  %idx.ext585 = sext i32 %mul584 to i64
  %add.ptr586 = getelementptr inbounds i8, i8* %439, i64 %idx.ext585
  store i8* %add.ptr586, i8** %src_ptr, align 8, !tbaa !1
  %442 = load i8*, i8** %tmp_buf, align 8, !tbaa !1
  %443 = load i32, i32* %dst_length, align 4, !tbaa !5
  %444 = load i32, i32* %i, align 4, !tbaa !5
  %mul587 = mul nsw i32 %443, %444
  %idx.ext588 = sext i32 %mul587 to i64
  %add.ptr589 = getelementptr inbounds i8, i8* %442, i64 %idx.ext588
  store i8* %add.ptr589, i8** %dst_ptr, align 8, !tbaa !1
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond.590

for.cond.590:                                     ; preds = %for.inc.628, %for.body.583
  %445 = load i32, i32* %j, align 4, !tbaa !5
  %446 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %width591 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %446, i32 0, i32 11
  %447 = load i32, i32* %width591, align 4, !tbaa !120
  %cmp592 = icmp slt i32 %445, %447
  br i1 %cmp592, label %for.body.594, label %for.end.630

for.body.594:                                     ; preds = %for.cond.590
  %448 = bitcast i32* %o595 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %448) #2
  %449 = load i32, i32* %j, align 4, !tbaa !5
  %div596 = sdiv i32 %449, 8
  %idxprom597 = sext i32 %div596 to i64
  %450 = load i8*, i8** %src_ptr, align 8, !tbaa !1
  %arrayidx598 = getelementptr inbounds i8, i8* %450, i64 %idxprom597
  %451 = load i8, i8* %arrayidx598, align 1, !tbaa !64
  %conv599 = zext i8 %451 to i32
  %452 = load i32, i32* %j, align 4, !tbaa !5
  %and600 = and i32 %452, 7
  %sub601 = sub nsw i32 7, %and600
  %shl602 = shl i32 1, %sub601
  %and603 = and i32 %conv599, %shl602
  %cmp604 = icmp ne i32 %and603, 0
  %conv605 = zext i1 %cmp604 to i32
  store i32 %conv605, i32* %o595, align 4, !tbaa !5
  call void @llvm.lifetime.start(i64 1, i8* %d606) #2
  %453 = load float, float* getelementptr inbounds ([130 x float], [130 x float]* @imageDecode, i32 0, i64 0), align 4, !tbaa !10
  %mul607 = fmul float %453, 2.550000e+02
  %454 = load i32, i32* %o595, align 4, !tbaa !5
  %conv608 = sitofp i32 %454 to float
  %455 = load float, float* getelementptr inbounds ([130 x float], [130 x float]* @imageDecode, i32 0, i64 1), align 4, !tbaa !10
  %456 = load float, float* getelementptr inbounds ([130 x float], [130 x float]* @imageDecode, i32 0, i64 0), align 4, !tbaa !10
  %sub609 = fsub float %455, %456
  %mul610 = fmul float %conv608, %sub609
  %mul611 = fmul float %mul610, 2.550000e+02
  %add612 = fadd float %mul607, %mul611
  %conv613 = fpext float %add612 to double
  %add614 = fadd double %conv613, 5.000000e-01
  %call615 = call double @floor(double %add614) #10
  %conv616 = fptoui double %call615 to i8
  store i8 %conv616, i8* %d606, align 1, !tbaa !64
  %457 = load i8, i8* %d606, align 1, !tbaa !64
  %458 = load i32, i32* %j, align 4, !tbaa !5
  %mul617 = mul nsw i32 %458, 3
  %idxprom618 = sext i32 %mul617 to i64
  %459 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx619 = getelementptr inbounds i8, i8* %459, i64 %idxprom618
  store i8 %457, i8* %arrayidx619, align 1, !tbaa !64
  %460 = load i8, i8* %d606, align 1, !tbaa !64
  %461 = load i32, i32* %j, align 4, !tbaa !5
  %mul620 = mul nsw i32 %461, 3
  %add621 = add nsw i32 %mul620, 1
  %idxprom622 = sext i32 %add621 to i64
  %462 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx623 = getelementptr inbounds i8, i8* %462, i64 %idxprom622
  store i8 %460, i8* %arrayidx623, align 1, !tbaa !64
  %463 = load i8, i8* %d606, align 1, !tbaa !64
  %464 = load i32, i32* %j, align 4, !tbaa !5
  %mul624 = mul nsw i32 %464, 3
  %add625 = add nsw i32 %mul624, 2
  %idxprom626 = sext i32 %add625 to i64
  %465 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx627 = getelementptr inbounds i8, i8* %465, i64 %idxprom626
  store i8 %463, i8* %arrayidx627, align 1, !tbaa !64
  call void @llvm.lifetime.end(i64 1, i8* %d606) #2
  %466 = bitcast i32* %o595 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %466) #2
  br label %for.inc.628

for.inc.628:                                      ; preds = %for.body.594
  %467 = load i32, i32* %j, align 4, !tbaa !5
  %inc629 = add nsw i32 %467, 1
  store i32 %inc629, i32* %j, align 4, !tbaa !5
  br label %for.cond.590

for.end.630:                                      ; preds = %for.cond.590
  br label %for.inc.631

for.inc.631:                                      ; preds = %for.end.630
  %468 = load i32, i32* %i, align 4, !tbaa !5
  %inc632 = add nsw i32 %468, 1
  store i32 %inc632, i32* %i, align 4, !tbaa !5
  br label %for.cond.580

for.end.633:                                      ; preds = %for.cond.580
  %469 = load i8*, i8** %buf, align 8, !tbaa !1
  call void @free(i8* %469) #8
  %470 = load i8*, i8** %tmp_buf, align 8, !tbaa !1
  store i8* %470, i8** %buf, align 8, !tbaa !1
  %471 = load i32, i32* %dst_bytes, align 4, !tbaa !5
  store i32 %471, i32* %data_bytes, align 4, !tbaa !5
  %472 = load i32, i32* %dst_length, align 4, !tbaa !5
  store i32 %472, i32* %raster_length, align 4, !tbaa !5
  %473 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %bits_per_pixel634 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %473, i32 0, i32 13
  store i32 24, i32* %bits_per_pixel634, align 4, !tbaa !345
  br label %if.end.635

if.end.635:                                       ; preds = %for.end.633, %if.else.569
  br label %if.end.636

if.end.636:                                       ; preds = %if.end.635, %if.end.568
  br label %if.end.702

if.else.637:                                      ; preds = %lor.lhs.false.507
  %474 = load i32, i32* @colorSpace, align 4, !tbaa !64
  %cmp638 = icmp eq i32 %474, 1
  br i1 %cmp638, label %if.then.640, label %if.end.701

if.then.640:                                      ; preds = %if.else.637
  %475 = load i32, i32* %bits_per_pixel, align 4, !tbaa !5
  %cmp641 = icmp eq i32 %475, 1
  br i1 %cmp641, label %if.then.643, label %if.end.700

if.then.643:                                      ; preds = %if.then.640
  %476 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %width644 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %476, i32 0, i32 11
  %477 = load i32, i32* %width644, align 4, !tbaa !120
  store i32 %477, i32* %dst_bytes, align 4, !tbaa !5
  %478 = load i32, i32* %dst_bytes, align 4, !tbaa !5
  %add645 = add nsw i32 %478, 3
  %shr646 = ashr i32 %add645, 2
  %shl647 = shl i32 %shr646, 2
  store i32 %shl647, i32* %dst_length, align 4, !tbaa !5
  %479 = load i32, i32* %dst_length, align 4, !tbaa !5
  %conv648 = sext i32 %479 to i64
  %480 = load i32, i32* %height.addr, align 4, !tbaa !5
  %conv649 = sext i32 %480 to i64
  %call650 = call noalias i8* @calloc(i64 %conv648, i64 %conv649) #8
  store i8* %call650, i8** %tmp_buf, align 8, !tbaa !1
  %481 = load i8*, i8** %tmp_buf, align 8, !tbaa !1
  %tobool651 = icmp ne i8* %481, null
  br i1 %tobool651, label %if.then.652, label %if.end.699

if.then.652:                                      ; preds = %if.then.643
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.653

for.cond.653:                                     ; preds = %for.inc.695, %if.then.652
  %482 = load i32, i32* %i, align 4, !tbaa !5
  %483 = load i32, i32* %height.addr, align 4, !tbaa !5
  %cmp654 = icmp slt i32 %482, %483
  br i1 %cmp654, label %for.body.656, label %for.end.697

for.body.656:                                     ; preds = %for.cond.653
  %484 = load i8*, i8** %buf, align 8, !tbaa !1
  %485 = load i32, i32* %raster_length, align 4, !tbaa !5
  %486 = load i32, i32* %i, align 4, !tbaa !5
  %mul657 = mul nsw i32 %485, %486
  %idx.ext658 = sext i32 %mul657 to i64
  %add.ptr659 = getelementptr inbounds i8, i8* %484, i64 %idx.ext658
  store i8* %add.ptr659, i8** %src_ptr, align 8, !tbaa !1
  %487 = load i8*, i8** %tmp_buf, align 8, !tbaa !1
  %488 = load i32, i32* %dst_length, align 4, !tbaa !5
  %489 = load i32, i32* %i, align 4, !tbaa !5
  %mul660 = mul nsw i32 %488, %489
  %idx.ext661 = sext i32 %mul660 to i64
  %add.ptr662 = getelementptr inbounds i8, i8* %487, i64 %idx.ext661
  store i8* %add.ptr662, i8** %dst_ptr, align 8, !tbaa !1
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond.663

for.cond.663:                                     ; preds = %for.inc.692, %for.body.656
  %490 = load i32, i32* %j, align 4, !tbaa !5
  %491 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %width664 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %491, i32 0, i32 11
  %492 = load i32, i32* %width664, align 4, !tbaa !120
  %cmp665 = icmp slt i32 %490, %492
  br i1 %cmp665, label %for.body.667, label %for.end.694

for.body.667:                                     ; preds = %for.cond.663
  %493 = bitcast i32* %o668 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %493) #2
  %494 = load i32, i32* %j, align 4, !tbaa !5
  %div669 = sdiv i32 %494, 8
  %idxprom670 = sext i32 %div669 to i64
  %495 = load i8*, i8** %src_ptr, align 8, !tbaa !1
  %arrayidx671 = getelementptr inbounds i8, i8* %495, i64 %idxprom670
  %496 = load i8, i8* %arrayidx671, align 1, !tbaa !64
  %conv672 = zext i8 %496 to i32
  %497 = load i32, i32* %j, align 4, !tbaa !5
  %and673 = and i32 %497, 7
  %sub674 = sub nsw i32 7, %and673
  %shl675 = shl i32 1, %sub674
  %and676 = and i32 %conv672, %shl675
  %cmp677 = icmp ne i32 %and676, 0
  %conv678 = zext i1 %cmp677 to i32
  store i32 %conv678, i32* %o668, align 4, !tbaa !5
  call void @llvm.lifetime.start(i64 1, i8* %d679) #2
  %498 = load float, float* getelementptr inbounds ([130 x float], [130 x float]* @imageDecode, i32 0, i64 0), align 4, !tbaa !10
  %mul680 = fmul float %498, 2.550000e+02
  %499 = load i32, i32* %o668, align 4, !tbaa !5
  %conv681 = sitofp i32 %499 to float
  %500 = load float, float* getelementptr inbounds ([130 x float], [130 x float]* @imageDecode, i32 0, i64 1), align 4, !tbaa !10
  %501 = load float, float* getelementptr inbounds ([130 x float], [130 x float]* @imageDecode, i32 0, i64 0), align 4, !tbaa !10
  %sub682 = fsub float %500, %501
  %mul683 = fmul float %conv681, %sub682
  %mul684 = fmul float %mul683, 2.550000e+02
  %add685 = fadd float %mul680, %mul684
  %conv686 = fpext float %add685 to double
  %add687 = fadd double %conv686, 5.000000e-01
  %call688 = call double @floor(double %add687) #10
  %conv689 = fptoui double %call688 to i8
  store i8 %conv689, i8* %d679, align 1, !tbaa !64
  %502 = load i8, i8* %d679, align 1, !tbaa !64
  %503 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom690 = sext i32 %503 to i64
  %504 = load i8*, i8** %dst_ptr, align 8, !tbaa !1
  %arrayidx691 = getelementptr inbounds i8, i8* %504, i64 %idxprom690
  store i8 %502, i8* %arrayidx691, align 1, !tbaa !64
  call void @llvm.lifetime.end(i64 1, i8* %d679) #2
  %505 = bitcast i32* %o668 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %505) #2
  br label %for.inc.692

for.inc.692:                                      ; preds = %for.body.667
  %506 = load i32, i32* %j, align 4, !tbaa !5
  %inc693 = add nsw i32 %506, 1
  store i32 %inc693, i32* %j, align 4, !tbaa !5
  br label %for.cond.663

for.end.694:                                      ; preds = %for.cond.663
  br label %for.inc.695

for.inc.695:                                      ; preds = %for.end.694
  %507 = load i32, i32* %i, align 4, !tbaa !5
  %inc696 = add nsw i32 %507, 1
  store i32 %inc696, i32* %i, align 4, !tbaa !5
  br label %for.cond.653

for.end.697:                                      ; preds = %for.cond.653
  %508 = load i8*, i8** %buf, align 8, !tbaa !1
  call void @free(i8* %508) #8
  %509 = load i8*, i8** %tmp_buf, align 8, !tbaa !1
  store i8* %509, i8** %buf, align 8, !tbaa !1
  %510 = load i32, i32* %dst_bytes, align 4, !tbaa !5
  store i32 %510, i32* %data_bytes, align 4, !tbaa !5
  %511 = load i32, i32* %dst_length, align 4, !tbaa !5
  store i32 %511, i32* %raster_length, align 4, !tbaa !5
  %512 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %bits_per_pixel698 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %512, i32 0, i32 13
  store i32 8, i32* %bits_per_pixel698, align 4, !tbaa !345
  br label %if.end.699

if.end.699:                                       ; preds = %for.end.697, %if.then.643
  br label %if.end.700

if.end.700:                                       ; preds = %if.end.699, %if.then.640
  br label %if.end.701

if.end.701:                                       ; preds = %if.end.700, %if.else.637
  br label %if.end.702

if.end.702:                                       ; preds = %if.end.701, %if.end.636
  br label %if.end.703

if.end.703:                                       ; preds = %if.end.702, %lor.lhs.false.501
  br label %if.end.704

if.end.704:                                       ; preds = %if.end.703, %if.end.158
  %513 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %bits_per_pixel705 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %513, i32 0, i32 13
  %514 = load i32, i32* %bits_per_pixel705, align 4, !tbaa !345
  %cmp706 = icmp eq i32 %514, 24
  br i1 %cmp706, label %if.then.708, label %if.else.1294

if.then.708:                                      ; preds = %if.end.704
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.709

for.cond.709:                                     ; preds = %for.inc.1291, %if.then.708
  %515 = load i32, i32* %i, align 4, !tbaa !5
  %516 = load i32, i32* %height.addr, align 4, !tbaa !5
  %cmp710 = icmp slt i32 %515, %516
  br i1 %cmp710, label %for.body.712, label %for.end.1293

for.body.712:                                     ; preds = %for.cond.709
  %517 = load i8*, i8** %buf, align 8, !tbaa !1
  %518 = load i32, i32* %raster_length, align 4, !tbaa !5
  %519 = load i32, i32* %i, align 4, !tbaa !5
  %mul713 = mul nsw i32 %518, %519
  %idx.ext714 = sext i32 %mul713 to i64
  %add.ptr715 = getelementptr inbounds i8, i8* %517, i64 %idx.ext714
  store i8* %add.ptr715, i8** %ptr, align 8, !tbaa !1
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond.716

for.cond.716:                                     ; preds = %for.inc.1288, %for.body.712
  %520 = load i32, i32* %j, align 4, !tbaa !5
  %521 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %width717 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %521, i32 0, i32 11
  %522 = load i32, i32* %width717, align 4, !tbaa !120
  %cmp718 = icmp slt i32 %520, %522
  br i1 %cmp718, label %for.body.720, label %for.end.1290

for.body.720:                                     ; preds = %for.cond.716
  %523 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %523, i32 0, i32 47
  %arrayidx721 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer, i32 0, i64 0
  %524 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx721, align 8, !tbaa !1
  %proc = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %524, i32 0, i32 1
  %525 = load float (double, %struct.gx_transfer_map_s*)*, float (double, %struct.gx_transfer_map_s*)** %proc, align 8, !tbaa !346
  %cmp722 = icmp eq float (double, %struct.gx_transfer_map_s*)* %525, @gs_identity_transfer
  br i1 %cmp722, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body.720
  %526 = load i32, i32* %j, align 4, !tbaa !5
  %mul724 = mul nsw i32 %526, 3
  %idxprom725 = sext i32 %mul724 to i64
  %527 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx726 = getelementptr inbounds i8, i8* %527, i64 %idxprom725
  %528 = load i8, i8* %arrayidx726, align 1, !tbaa !64
  %conv727 = zext i8 %528 to i32
  %shr728 = ashr i32 %conv727, 1
  %529 = load i32, i32* %j, align 4, !tbaa !5
  %mul729 = mul nsw i32 %529, 3
  %idxprom730 = sext i32 %mul729 to i64
  %530 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx731 = getelementptr inbounds i8, i8* %530, i64 %idxprom730
  %531 = load i8, i8* %arrayidx731, align 1, !tbaa !64
  %conv732 = zext i8 %531 to i32
  %shr733 = ashr i32 %conv732, 13
  %sub734 = sub nsw i32 %shr728, %shr733
  %conv735 = trunc i32 %sub734 to i16
  %conv736 = sext i16 %conv735 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.body.720
  %532 = load i32, i32* %j, align 4, !tbaa !5
  %mul737 = mul nsw i32 %532, 3
  %idxprom738 = sext i32 %mul737 to i64
  %533 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx739 = getelementptr inbounds i8, i8* %533, i64 %idxprom738
  %534 = load i8, i8* %arrayidx739, align 1, !tbaa !64
  %conv740 = zext i8 %534 to i32
  %shr741 = ashr i32 %conv740, 1
  %535 = load i32, i32* %j, align 4, !tbaa !5
  %mul742 = mul nsw i32 %535, 3
  %idxprom743 = sext i32 %mul742 to i64
  %536 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx744 = getelementptr inbounds i8, i8* %536, i64 %idxprom743
  %537 = load i8, i8* %arrayidx744, align 1, !tbaa !64
  %conv745 = zext i8 %537 to i32
  %shr746 = ashr i32 %conv745, 13
  %sub747 = sub nsw i32 %shr741, %shr746
  %conv748 = trunc i32 %sub747 to i16
  %538 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer749 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %538, i32 0, i32 47
  %arrayidx750 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer749, i32 0, i64 0
  %539 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx750, align 8, !tbaa !1
  %values = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %539, i32 0, i32 4
  %arrayidx751 = getelementptr inbounds [256 x i16], [256 x i16]* %values, i32 0, i64 0
  %call752 = call signext i16 @gx_color_frac_map(i16 signext %conv748, i16* %arrayidx751) #7
  %conv753 = sext i16 %call752 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv736, %cond.true ], [ %conv753, %cond.false ]
  %shl754 = shl i32 %cond, 1
  %540 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer755 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %540, i32 0, i32 47
  %arrayidx756 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer755, i32 0, i64 0
  %541 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx756, align 8, !tbaa !1
  %proc757 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %541, i32 0, i32 1
  %542 = load float (double, %struct.gx_transfer_map_s*)*, float (double, %struct.gx_transfer_map_s*)** %proc757, align 8, !tbaa !346
  %cmp758 = icmp eq float (double, %struct.gx_transfer_map_s*)* %542, @gs_identity_transfer
  br i1 %cmp758, label %cond.true.760, label %cond.false.774

cond.true.760:                                    ; preds = %cond.end
  %543 = load i32, i32* %j, align 4, !tbaa !5
  %mul761 = mul nsw i32 %543, 3
  %idxprom762 = sext i32 %mul761 to i64
  %544 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx763 = getelementptr inbounds i8, i8* %544, i64 %idxprom762
  %545 = load i8, i8* %arrayidx763, align 1, !tbaa !64
  %conv764 = zext i8 %545 to i32
  %shr765 = ashr i32 %conv764, 1
  %546 = load i32, i32* %j, align 4, !tbaa !5
  %mul766 = mul nsw i32 %546, 3
  %idxprom767 = sext i32 %mul766 to i64
  %547 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx768 = getelementptr inbounds i8, i8* %547, i64 %idxprom767
  %548 = load i8, i8* %arrayidx768, align 1, !tbaa !64
  %conv769 = zext i8 %548 to i32
  %shr770 = ashr i32 %conv769, 13
  %sub771 = sub nsw i32 %shr765, %shr770
  %conv772 = trunc i32 %sub771 to i16
  %conv773 = sext i16 %conv772 to i32
  br label %cond.end.793

cond.false.774:                                   ; preds = %cond.end
  %549 = load i32, i32* %j, align 4, !tbaa !5
  %mul775 = mul nsw i32 %549, 3
  %idxprom776 = sext i32 %mul775 to i64
  %550 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx777 = getelementptr inbounds i8, i8* %550, i64 %idxprom776
  %551 = load i8, i8* %arrayidx777, align 1, !tbaa !64
  %conv778 = zext i8 %551 to i32
  %shr779 = ashr i32 %conv778, 1
  %552 = load i32, i32* %j, align 4, !tbaa !5
  %mul780 = mul nsw i32 %552, 3
  %idxprom781 = sext i32 %mul780 to i64
  %553 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx782 = getelementptr inbounds i8, i8* %553, i64 %idxprom781
  %554 = load i8, i8* %arrayidx782, align 1, !tbaa !64
  %conv783 = zext i8 %554 to i32
  %shr784 = ashr i32 %conv783, 13
  %sub785 = sub nsw i32 %shr779, %shr784
  %conv786 = trunc i32 %sub785 to i16
  %555 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer787 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %555, i32 0, i32 47
  %arrayidx788 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer787, i32 0, i64 0
  %556 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx788, align 8, !tbaa !1
  %values789 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %556, i32 0, i32 4
  %arrayidx790 = getelementptr inbounds [256 x i16], [256 x i16]* %values789, i32 0, i64 0
  %call791 = call signext i16 @gx_color_frac_map(i16 signext %conv786, i16* %arrayidx790) #7
  %conv792 = sext i16 %call791 to i32
  br label %cond.end.793

cond.end.793:                                     ; preds = %cond.false.774, %cond.true.760
  %cond794 = phi i32 [ %conv773, %cond.true.760 ], [ %conv792, %cond.false.774 ]
  %shr795 = ashr i32 %cond794, 11
  %add796 = add nsw i32 %shl754, %shr795
  %conv797 = trunc i32 %add796 to i16
  %conv798 = zext i16 %conv797 to i32
  %cmp799 = icmp slt i32 255, %conv798
  br i1 %cmp799, label %cond.true.801, label %cond.false.802

cond.true.801:                                    ; preds = %cond.end.793
  br label %cond.end.888

cond.false.802:                                   ; preds = %cond.end.793
  %557 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer803 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %557, i32 0, i32 47
  %arrayidx804 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer803, i32 0, i64 0
  %558 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx804, align 8, !tbaa !1
  %proc805 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %558, i32 0, i32 1
  %559 = load float (double, %struct.gx_transfer_map_s*)*, float (double, %struct.gx_transfer_map_s*)** %proc805, align 8, !tbaa !346
  %cmp806 = icmp eq float (double, %struct.gx_transfer_map_s*)* %559, @gs_identity_transfer
  br i1 %cmp806, label %cond.true.808, label %cond.false.822

cond.true.808:                                    ; preds = %cond.false.802
  %560 = load i32, i32* %j, align 4, !tbaa !5
  %mul809 = mul nsw i32 %560, 3
  %idxprom810 = sext i32 %mul809 to i64
  %561 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx811 = getelementptr inbounds i8, i8* %561, i64 %idxprom810
  %562 = load i8, i8* %arrayidx811, align 1, !tbaa !64
  %conv812 = zext i8 %562 to i32
  %shr813 = ashr i32 %conv812, 1
  %563 = load i32, i32* %j, align 4, !tbaa !5
  %mul814 = mul nsw i32 %563, 3
  %idxprom815 = sext i32 %mul814 to i64
  %564 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx816 = getelementptr inbounds i8, i8* %564, i64 %idxprom815
  %565 = load i8, i8* %arrayidx816, align 1, !tbaa !64
  %conv817 = zext i8 %565 to i32
  %shr818 = ashr i32 %conv817, 13
  %sub819 = sub nsw i32 %shr813, %shr818
  %conv820 = trunc i32 %sub819 to i16
  %conv821 = sext i16 %conv820 to i32
  br label %cond.end.841

cond.false.822:                                   ; preds = %cond.false.802
  %566 = load i32, i32* %j, align 4, !tbaa !5
  %mul823 = mul nsw i32 %566, 3
  %idxprom824 = sext i32 %mul823 to i64
  %567 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx825 = getelementptr inbounds i8, i8* %567, i64 %idxprom824
  %568 = load i8, i8* %arrayidx825, align 1, !tbaa !64
  %conv826 = zext i8 %568 to i32
  %shr827 = ashr i32 %conv826, 1
  %569 = load i32, i32* %j, align 4, !tbaa !5
  %mul828 = mul nsw i32 %569, 3
  %idxprom829 = sext i32 %mul828 to i64
  %570 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx830 = getelementptr inbounds i8, i8* %570, i64 %idxprom829
  %571 = load i8, i8* %arrayidx830, align 1, !tbaa !64
  %conv831 = zext i8 %571 to i32
  %shr832 = ashr i32 %conv831, 13
  %sub833 = sub nsw i32 %shr827, %shr832
  %conv834 = trunc i32 %sub833 to i16
  %572 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer835 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %572, i32 0, i32 47
  %arrayidx836 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer835, i32 0, i64 0
  %573 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx836, align 8, !tbaa !1
  %values837 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %573, i32 0, i32 4
  %arrayidx838 = getelementptr inbounds [256 x i16], [256 x i16]* %values837, i32 0, i64 0
  %call839 = call signext i16 @gx_color_frac_map(i16 signext %conv834, i16* %arrayidx838) #7
  %conv840 = sext i16 %call839 to i32
  br label %cond.end.841

cond.end.841:                                     ; preds = %cond.false.822, %cond.true.808
  %cond842 = phi i32 [ %conv821, %cond.true.808 ], [ %conv840, %cond.false.822 ]
  %shl843 = shl i32 %cond842, 1
  %574 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer844 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %574, i32 0, i32 47
  %arrayidx845 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer844, i32 0, i64 0
  %575 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx845, align 8, !tbaa !1
  %proc846 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %575, i32 0, i32 1
  %576 = load float (double, %struct.gx_transfer_map_s*)*, float (double, %struct.gx_transfer_map_s*)** %proc846, align 8, !tbaa !346
  %cmp847 = icmp eq float (double, %struct.gx_transfer_map_s*)* %576, @gs_identity_transfer
  br i1 %cmp847, label %cond.true.849, label %cond.false.863

cond.true.849:                                    ; preds = %cond.end.841
  %577 = load i32, i32* %j, align 4, !tbaa !5
  %mul850 = mul nsw i32 %577, 3
  %idxprom851 = sext i32 %mul850 to i64
  %578 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx852 = getelementptr inbounds i8, i8* %578, i64 %idxprom851
  %579 = load i8, i8* %arrayidx852, align 1, !tbaa !64
  %conv853 = zext i8 %579 to i32
  %shr854 = ashr i32 %conv853, 1
  %580 = load i32, i32* %j, align 4, !tbaa !5
  %mul855 = mul nsw i32 %580, 3
  %idxprom856 = sext i32 %mul855 to i64
  %581 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx857 = getelementptr inbounds i8, i8* %581, i64 %idxprom856
  %582 = load i8, i8* %arrayidx857, align 1, !tbaa !64
  %conv858 = zext i8 %582 to i32
  %shr859 = ashr i32 %conv858, 13
  %sub860 = sub nsw i32 %shr854, %shr859
  %conv861 = trunc i32 %sub860 to i16
  %conv862 = sext i16 %conv861 to i32
  br label %cond.end.882

cond.false.863:                                   ; preds = %cond.end.841
  %583 = load i32, i32* %j, align 4, !tbaa !5
  %mul864 = mul nsw i32 %583, 3
  %idxprom865 = sext i32 %mul864 to i64
  %584 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx866 = getelementptr inbounds i8, i8* %584, i64 %idxprom865
  %585 = load i8, i8* %arrayidx866, align 1, !tbaa !64
  %conv867 = zext i8 %585 to i32
  %shr868 = ashr i32 %conv867, 1
  %586 = load i32, i32* %j, align 4, !tbaa !5
  %mul869 = mul nsw i32 %586, 3
  %idxprom870 = sext i32 %mul869 to i64
  %587 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx871 = getelementptr inbounds i8, i8* %587, i64 %idxprom870
  %588 = load i8, i8* %arrayidx871, align 1, !tbaa !64
  %conv872 = zext i8 %588 to i32
  %shr873 = ashr i32 %conv872, 13
  %sub874 = sub nsw i32 %shr868, %shr873
  %conv875 = trunc i32 %sub874 to i16
  %589 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer876 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %589, i32 0, i32 47
  %arrayidx877 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer876, i32 0, i64 0
  %590 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx877, align 8, !tbaa !1
  %values878 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %590, i32 0, i32 4
  %arrayidx879 = getelementptr inbounds [256 x i16], [256 x i16]* %values878, i32 0, i64 0
  %call880 = call signext i16 @gx_color_frac_map(i16 signext %conv875, i16* %arrayidx879) #7
  %conv881 = sext i16 %call880 to i32
  br label %cond.end.882

cond.end.882:                                     ; preds = %cond.false.863, %cond.true.849
  %cond883 = phi i32 [ %conv862, %cond.true.849 ], [ %conv881, %cond.false.863 ]
  %shr884 = ashr i32 %cond883, 11
  %add885 = add nsw i32 %shl843, %shr884
  %conv886 = trunc i32 %add885 to i16
  %conv887 = zext i16 %conv886 to i32
  br label %cond.end.888

cond.end.888:                                     ; preds = %cond.end.882, %cond.true.801
  %cond889 = phi i32 [ 255, %cond.true.801 ], [ %conv887, %cond.end.882 ]
  %conv890 = trunc i32 %cond889 to i8
  %591 = load i32, i32* %j, align 4, !tbaa !5
  %mul891 = mul nsw i32 %591, 3
  %idxprom892 = sext i32 %mul891 to i64
  %592 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx893 = getelementptr inbounds i8, i8* %592, i64 %idxprom892
  store i8 %conv890, i8* %arrayidx893, align 1, !tbaa !64
  %593 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer894 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %593, i32 0, i32 47
  %arrayidx895 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer894, i32 0, i64 1
  %594 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx895, align 8, !tbaa !1
  %proc896 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %594, i32 0, i32 1
  %595 = load float (double, %struct.gx_transfer_map_s*)*, float (double, %struct.gx_transfer_map_s*)** %proc896, align 8, !tbaa !346
  %cmp897 = icmp eq float (double, %struct.gx_transfer_map_s*)* %595, @gs_identity_transfer
  br i1 %cmp897, label %cond.true.899, label %cond.false.915

cond.true.899:                                    ; preds = %cond.end.888
  %596 = load i32, i32* %j, align 4, !tbaa !5
  %mul900 = mul nsw i32 %596, 3
  %add901 = add nsw i32 %mul900, 1
  %idxprom902 = sext i32 %add901 to i64
  %597 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx903 = getelementptr inbounds i8, i8* %597, i64 %idxprom902
  %598 = load i8, i8* %arrayidx903, align 1, !tbaa !64
  %conv904 = zext i8 %598 to i32
  %shr905 = ashr i32 %conv904, 1
  %599 = load i32, i32* %j, align 4, !tbaa !5
  %mul906 = mul nsw i32 %599, 3
  %add907 = add nsw i32 %mul906, 1
  %idxprom908 = sext i32 %add907 to i64
  %600 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx909 = getelementptr inbounds i8, i8* %600, i64 %idxprom908
  %601 = load i8, i8* %arrayidx909, align 1, !tbaa !64
  %conv910 = zext i8 %601 to i32
  %shr911 = ashr i32 %conv910, 13
  %sub912 = sub nsw i32 %shr905, %shr911
  %conv913 = trunc i32 %sub912 to i16
  %conv914 = sext i16 %conv913 to i32
  br label %cond.end.936

cond.false.915:                                   ; preds = %cond.end.888
  %602 = load i32, i32* %j, align 4, !tbaa !5
  %mul916 = mul nsw i32 %602, 3
  %add917 = add nsw i32 %mul916, 1
  %idxprom918 = sext i32 %add917 to i64
  %603 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx919 = getelementptr inbounds i8, i8* %603, i64 %idxprom918
  %604 = load i8, i8* %arrayidx919, align 1, !tbaa !64
  %conv920 = zext i8 %604 to i32
  %shr921 = ashr i32 %conv920, 1
  %605 = load i32, i32* %j, align 4, !tbaa !5
  %mul922 = mul nsw i32 %605, 3
  %add923 = add nsw i32 %mul922, 1
  %idxprom924 = sext i32 %add923 to i64
  %606 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx925 = getelementptr inbounds i8, i8* %606, i64 %idxprom924
  %607 = load i8, i8* %arrayidx925, align 1, !tbaa !64
  %conv926 = zext i8 %607 to i32
  %shr927 = ashr i32 %conv926, 13
  %sub928 = sub nsw i32 %shr921, %shr927
  %conv929 = trunc i32 %sub928 to i16
  %608 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer930 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %608, i32 0, i32 47
  %arrayidx931 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer930, i32 0, i64 1
  %609 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx931, align 8, !tbaa !1
  %values932 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %609, i32 0, i32 4
  %arrayidx933 = getelementptr inbounds [256 x i16], [256 x i16]* %values932, i32 0, i64 0
  %call934 = call signext i16 @gx_color_frac_map(i16 signext %conv929, i16* %arrayidx933) #7
  %conv935 = sext i16 %call934 to i32
  br label %cond.end.936

cond.end.936:                                     ; preds = %cond.false.915, %cond.true.899
  %cond937 = phi i32 [ %conv914, %cond.true.899 ], [ %conv935, %cond.false.915 ]
  %shl938 = shl i32 %cond937, 1
  %610 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer939 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %610, i32 0, i32 47
  %arrayidx940 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer939, i32 0, i64 1
  %611 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx940, align 8, !tbaa !1
  %proc941 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %611, i32 0, i32 1
  %612 = load float (double, %struct.gx_transfer_map_s*)*, float (double, %struct.gx_transfer_map_s*)** %proc941, align 8, !tbaa !346
  %cmp942 = icmp eq float (double, %struct.gx_transfer_map_s*)* %612, @gs_identity_transfer
  br i1 %cmp942, label %cond.true.944, label %cond.false.960

cond.true.944:                                    ; preds = %cond.end.936
  %613 = load i32, i32* %j, align 4, !tbaa !5
  %mul945 = mul nsw i32 %613, 3
  %add946 = add nsw i32 %mul945, 1
  %idxprom947 = sext i32 %add946 to i64
  %614 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx948 = getelementptr inbounds i8, i8* %614, i64 %idxprom947
  %615 = load i8, i8* %arrayidx948, align 1, !tbaa !64
  %conv949 = zext i8 %615 to i32
  %shr950 = ashr i32 %conv949, 1
  %616 = load i32, i32* %j, align 4, !tbaa !5
  %mul951 = mul nsw i32 %616, 3
  %add952 = add nsw i32 %mul951, 1
  %idxprom953 = sext i32 %add952 to i64
  %617 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx954 = getelementptr inbounds i8, i8* %617, i64 %idxprom953
  %618 = load i8, i8* %arrayidx954, align 1, !tbaa !64
  %conv955 = zext i8 %618 to i32
  %shr956 = ashr i32 %conv955, 13
  %sub957 = sub nsw i32 %shr950, %shr956
  %conv958 = trunc i32 %sub957 to i16
  %conv959 = sext i16 %conv958 to i32
  br label %cond.end.981

cond.false.960:                                   ; preds = %cond.end.936
  %619 = load i32, i32* %j, align 4, !tbaa !5
  %mul961 = mul nsw i32 %619, 3
  %add962 = add nsw i32 %mul961, 1
  %idxprom963 = sext i32 %add962 to i64
  %620 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx964 = getelementptr inbounds i8, i8* %620, i64 %idxprom963
  %621 = load i8, i8* %arrayidx964, align 1, !tbaa !64
  %conv965 = zext i8 %621 to i32
  %shr966 = ashr i32 %conv965, 1
  %622 = load i32, i32* %j, align 4, !tbaa !5
  %mul967 = mul nsw i32 %622, 3
  %add968 = add nsw i32 %mul967, 1
  %idxprom969 = sext i32 %add968 to i64
  %623 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx970 = getelementptr inbounds i8, i8* %623, i64 %idxprom969
  %624 = load i8, i8* %arrayidx970, align 1, !tbaa !64
  %conv971 = zext i8 %624 to i32
  %shr972 = ashr i32 %conv971, 13
  %sub973 = sub nsw i32 %shr966, %shr972
  %conv974 = trunc i32 %sub973 to i16
  %625 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer975 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %625, i32 0, i32 47
  %arrayidx976 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer975, i32 0, i64 1
  %626 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx976, align 8, !tbaa !1
  %values977 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %626, i32 0, i32 4
  %arrayidx978 = getelementptr inbounds [256 x i16], [256 x i16]* %values977, i32 0, i64 0
  %call979 = call signext i16 @gx_color_frac_map(i16 signext %conv974, i16* %arrayidx978) #7
  %conv980 = sext i16 %call979 to i32
  br label %cond.end.981

cond.end.981:                                     ; preds = %cond.false.960, %cond.true.944
  %cond982 = phi i32 [ %conv959, %cond.true.944 ], [ %conv980, %cond.false.960 ]
  %shr983 = ashr i32 %cond982, 11
  %add984 = add nsw i32 %shl938, %shr983
  %conv985 = trunc i32 %add984 to i16
  %conv986 = zext i16 %conv985 to i32
  %cmp987 = icmp slt i32 255, %conv986
  br i1 %cmp987, label %cond.true.989, label %cond.false.990

cond.true.989:                                    ; preds = %cond.end.981
  br label %cond.end.1084

cond.false.990:                                   ; preds = %cond.end.981
  %627 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer991 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %627, i32 0, i32 47
  %arrayidx992 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer991, i32 0, i64 1
  %628 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx992, align 8, !tbaa !1
  %proc993 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %628, i32 0, i32 1
  %629 = load float (double, %struct.gx_transfer_map_s*)*, float (double, %struct.gx_transfer_map_s*)** %proc993, align 8, !tbaa !346
  %cmp994 = icmp eq float (double, %struct.gx_transfer_map_s*)* %629, @gs_identity_transfer
  br i1 %cmp994, label %cond.true.996, label %cond.false.1012

cond.true.996:                                    ; preds = %cond.false.990
  %630 = load i32, i32* %j, align 4, !tbaa !5
  %mul997 = mul nsw i32 %630, 3
  %add998 = add nsw i32 %mul997, 1
  %idxprom999 = sext i32 %add998 to i64
  %631 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1000 = getelementptr inbounds i8, i8* %631, i64 %idxprom999
  %632 = load i8, i8* %arrayidx1000, align 1, !tbaa !64
  %conv1001 = zext i8 %632 to i32
  %shr1002 = ashr i32 %conv1001, 1
  %633 = load i32, i32* %j, align 4, !tbaa !5
  %mul1003 = mul nsw i32 %633, 3
  %add1004 = add nsw i32 %mul1003, 1
  %idxprom1005 = sext i32 %add1004 to i64
  %634 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1006 = getelementptr inbounds i8, i8* %634, i64 %idxprom1005
  %635 = load i8, i8* %arrayidx1006, align 1, !tbaa !64
  %conv1007 = zext i8 %635 to i32
  %shr1008 = ashr i32 %conv1007, 13
  %sub1009 = sub nsw i32 %shr1002, %shr1008
  %conv1010 = trunc i32 %sub1009 to i16
  %conv1011 = sext i16 %conv1010 to i32
  br label %cond.end.1033

cond.false.1012:                                  ; preds = %cond.false.990
  %636 = load i32, i32* %j, align 4, !tbaa !5
  %mul1013 = mul nsw i32 %636, 3
  %add1014 = add nsw i32 %mul1013, 1
  %idxprom1015 = sext i32 %add1014 to i64
  %637 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1016 = getelementptr inbounds i8, i8* %637, i64 %idxprom1015
  %638 = load i8, i8* %arrayidx1016, align 1, !tbaa !64
  %conv1017 = zext i8 %638 to i32
  %shr1018 = ashr i32 %conv1017, 1
  %639 = load i32, i32* %j, align 4, !tbaa !5
  %mul1019 = mul nsw i32 %639, 3
  %add1020 = add nsw i32 %mul1019, 1
  %idxprom1021 = sext i32 %add1020 to i64
  %640 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1022 = getelementptr inbounds i8, i8* %640, i64 %idxprom1021
  %641 = load i8, i8* %arrayidx1022, align 1, !tbaa !64
  %conv1023 = zext i8 %641 to i32
  %shr1024 = ashr i32 %conv1023, 13
  %sub1025 = sub nsw i32 %shr1018, %shr1024
  %conv1026 = trunc i32 %sub1025 to i16
  %642 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer1027 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %642, i32 0, i32 47
  %arrayidx1028 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer1027, i32 0, i64 1
  %643 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx1028, align 8, !tbaa !1
  %values1029 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %643, i32 0, i32 4
  %arrayidx1030 = getelementptr inbounds [256 x i16], [256 x i16]* %values1029, i32 0, i64 0
  %call1031 = call signext i16 @gx_color_frac_map(i16 signext %conv1026, i16* %arrayidx1030) #7
  %conv1032 = sext i16 %call1031 to i32
  br label %cond.end.1033

cond.end.1033:                                    ; preds = %cond.false.1012, %cond.true.996
  %cond1034 = phi i32 [ %conv1011, %cond.true.996 ], [ %conv1032, %cond.false.1012 ]
  %shl1035 = shl i32 %cond1034, 1
  %644 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer1036 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %644, i32 0, i32 47
  %arrayidx1037 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer1036, i32 0, i64 1
  %645 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx1037, align 8, !tbaa !1
  %proc1038 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %645, i32 0, i32 1
  %646 = load float (double, %struct.gx_transfer_map_s*)*, float (double, %struct.gx_transfer_map_s*)** %proc1038, align 8, !tbaa !346
  %cmp1039 = icmp eq float (double, %struct.gx_transfer_map_s*)* %646, @gs_identity_transfer
  br i1 %cmp1039, label %cond.true.1041, label %cond.false.1057

cond.true.1041:                                   ; preds = %cond.end.1033
  %647 = load i32, i32* %j, align 4, !tbaa !5
  %mul1042 = mul nsw i32 %647, 3
  %add1043 = add nsw i32 %mul1042, 1
  %idxprom1044 = sext i32 %add1043 to i64
  %648 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1045 = getelementptr inbounds i8, i8* %648, i64 %idxprom1044
  %649 = load i8, i8* %arrayidx1045, align 1, !tbaa !64
  %conv1046 = zext i8 %649 to i32
  %shr1047 = ashr i32 %conv1046, 1
  %650 = load i32, i32* %j, align 4, !tbaa !5
  %mul1048 = mul nsw i32 %650, 3
  %add1049 = add nsw i32 %mul1048, 1
  %idxprom1050 = sext i32 %add1049 to i64
  %651 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1051 = getelementptr inbounds i8, i8* %651, i64 %idxprom1050
  %652 = load i8, i8* %arrayidx1051, align 1, !tbaa !64
  %conv1052 = zext i8 %652 to i32
  %shr1053 = ashr i32 %conv1052, 13
  %sub1054 = sub nsw i32 %shr1047, %shr1053
  %conv1055 = trunc i32 %sub1054 to i16
  %conv1056 = sext i16 %conv1055 to i32
  br label %cond.end.1078

cond.false.1057:                                  ; preds = %cond.end.1033
  %653 = load i32, i32* %j, align 4, !tbaa !5
  %mul1058 = mul nsw i32 %653, 3
  %add1059 = add nsw i32 %mul1058, 1
  %idxprom1060 = sext i32 %add1059 to i64
  %654 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1061 = getelementptr inbounds i8, i8* %654, i64 %idxprom1060
  %655 = load i8, i8* %arrayidx1061, align 1, !tbaa !64
  %conv1062 = zext i8 %655 to i32
  %shr1063 = ashr i32 %conv1062, 1
  %656 = load i32, i32* %j, align 4, !tbaa !5
  %mul1064 = mul nsw i32 %656, 3
  %add1065 = add nsw i32 %mul1064, 1
  %idxprom1066 = sext i32 %add1065 to i64
  %657 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1067 = getelementptr inbounds i8, i8* %657, i64 %idxprom1066
  %658 = load i8, i8* %arrayidx1067, align 1, !tbaa !64
  %conv1068 = zext i8 %658 to i32
  %shr1069 = ashr i32 %conv1068, 13
  %sub1070 = sub nsw i32 %shr1063, %shr1069
  %conv1071 = trunc i32 %sub1070 to i16
  %659 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer1072 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %659, i32 0, i32 47
  %arrayidx1073 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer1072, i32 0, i64 1
  %660 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx1073, align 8, !tbaa !1
  %values1074 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %660, i32 0, i32 4
  %arrayidx1075 = getelementptr inbounds [256 x i16], [256 x i16]* %values1074, i32 0, i64 0
  %call1076 = call signext i16 @gx_color_frac_map(i16 signext %conv1071, i16* %arrayidx1075) #7
  %conv1077 = sext i16 %call1076 to i32
  br label %cond.end.1078

cond.end.1078:                                    ; preds = %cond.false.1057, %cond.true.1041
  %cond1079 = phi i32 [ %conv1056, %cond.true.1041 ], [ %conv1077, %cond.false.1057 ]
  %shr1080 = ashr i32 %cond1079, 11
  %add1081 = add nsw i32 %shl1035, %shr1080
  %conv1082 = trunc i32 %add1081 to i16
  %conv1083 = zext i16 %conv1082 to i32
  br label %cond.end.1084

cond.end.1084:                                    ; preds = %cond.end.1078, %cond.true.989
  %cond1085 = phi i32 [ 255, %cond.true.989 ], [ %conv1083, %cond.end.1078 ]
  %conv1086 = trunc i32 %cond1085 to i8
  %661 = load i32, i32* %j, align 4, !tbaa !5
  %mul1087 = mul nsw i32 %661, 3
  %add1088 = add nsw i32 %mul1087, 1
  %idxprom1089 = sext i32 %add1088 to i64
  %662 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1090 = getelementptr inbounds i8, i8* %662, i64 %idxprom1089
  store i8 %conv1086, i8* %arrayidx1090, align 1, !tbaa !64
  %663 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer1091 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %663, i32 0, i32 47
  %arrayidx1092 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer1091, i32 0, i64 2
  %664 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx1092, align 8, !tbaa !1
  %proc1093 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %664, i32 0, i32 1
  %665 = load float (double, %struct.gx_transfer_map_s*)*, float (double, %struct.gx_transfer_map_s*)** %proc1093, align 8, !tbaa !346
  %cmp1094 = icmp eq float (double, %struct.gx_transfer_map_s*)* %665, @gs_identity_transfer
  br i1 %cmp1094, label %cond.true.1096, label %cond.false.1112

cond.true.1096:                                   ; preds = %cond.end.1084
  %666 = load i32, i32* %j, align 4, !tbaa !5
  %mul1097 = mul nsw i32 %666, 3
  %add1098 = add nsw i32 %mul1097, 2
  %idxprom1099 = sext i32 %add1098 to i64
  %667 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1100 = getelementptr inbounds i8, i8* %667, i64 %idxprom1099
  %668 = load i8, i8* %arrayidx1100, align 1, !tbaa !64
  %conv1101 = zext i8 %668 to i32
  %shr1102 = ashr i32 %conv1101, 1
  %669 = load i32, i32* %j, align 4, !tbaa !5
  %mul1103 = mul nsw i32 %669, 3
  %add1104 = add nsw i32 %mul1103, 2
  %idxprom1105 = sext i32 %add1104 to i64
  %670 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1106 = getelementptr inbounds i8, i8* %670, i64 %idxprom1105
  %671 = load i8, i8* %arrayidx1106, align 1, !tbaa !64
  %conv1107 = zext i8 %671 to i32
  %shr1108 = ashr i32 %conv1107, 13
  %sub1109 = sub nsw i32 %shr1102, %shr1108
  %conv1110 = trunc i32 %sub1109 to i16
  %conv1111 = sext i16 %conv1110 to i32
  br label %cond.end.1133

cond.false.1112:                                  ; preds = %cond.end.1084
  %672 = load i32, i32* %j, align 4, !tbaa !5
  %mul1113 = mul nsw i32 %672, 3
  %add1114 = add nsw i32 %mul1113, 2
  %idxprom1115 = sext i32 %add1114 to i64
  %673 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1116 = getelementptr inbounds i8, i8* %673, i64 %idxprom1115
  %674 = load i8, i8* %arrayidx1116, align 1, !tbaa !64
  %conv1117 = zext i8 %674 to i32
  %shr1118 = ashr i32 %conv1117, 1
  %675 = load i32, i32* %j, align 4, !tbaa !5
  %mul1119 = mul nsw i32 %675, 3
  %add1120 = add nsw i32 %mul1119, 2
  %idxprom1121 = sext i32 %add1120 to i64
  %676 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1122 = getelementptr inbounds i8, i8* %676, i64 %idxprom1121
  %677 = load i8, i8* %arrayidx1122, align 1, !tbaa !64
  %conv1123 = zext i8 %677 to i32
  %shr1124 = ashr i32 %conv1123, 13
  %sub1125 = sub nsw i32 %shr1118, %shr1124
  %conv1126 = trunc i32 %sub1125 to i16
  %678 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer1127 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %678, i32 0, i32 47
  %arrayidx1128 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer1127, i32 0, i64 2
  %679 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx1128, align 8, !tbaa !1
  %values1129 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %679, i32 0, i32 4
  %arrayidx1130 = getelementptr inbounds [256 x i16], [256 x i16]* %values1129, i32 0, i64 0
  %call1131 = call signext i16 @gx_color_frac_map(i16 signext %conv1126, i16* %arrayidx1130) #7
  %conv1132 = sext i16 %call1131 to i32
  br label %cond.end.1133

cond.end.1133:                                    ; preds = %cond.false.1112, %cond.true.1096
  %cond1134 = phi i32 [ %conv1111, %cond.true.1096 ], [ %conv1132, %cond.false.1112 ]
  %shl1135 = shl i32 %cond1134, 1
  %680 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer1136 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %680, i32 0, i32 47
  %arrayidx1137 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer1136, i32 0, i64 2
  %681 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx1137, align 8, !tbaa !1
  %proc1138 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %681, i32 0, i32 1
  %682 = load float (double, %struct.gx_transfer_map_s*)*, float (double, %struct.gx_transfer_map_s*)** %proc1138, align 8, !tbaa !346
  %cmp1139 = icmp eq float (double, %struct.gx_transfer_map_s*)* %682, @gs_identity_transfer
  br i1 %cmp1139, label %cond.true.1141, label %cond.false.1157

cond.true.1141:                                   ; preds = %cond.end.1133
  %683 = load i32, i32* %j, align 4, !tbaa !5
  %mul1142 = mul nsw i32 %683, 3
  %add1143 = add nsw i32 %mul1142, 2
  %idxprom1144 = sext i32 %add1143 to i64
  %684 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1145 = getelementptr inbounds i8, i8* %684, i64 %idxprom1144
  %685 = load i8, i8* %arrayidx1145, align 1, !tbaa !64
  %conv1146 = zext i8 %685 to i32
  %shr1147 = ashr i32 %conv1146, 1
  %686 = load i32, i32* %j, align 4, !tbaa !5
  %mul1148 = mul nsw i32 %686, 3
  %add1149 = add nsw i32 %mul1148, 2
  %idxprom1150 = sext i32 %add1149 to i64
  %687 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1151 = getelementptr inbounds i8, i8* %687, i64 %idxprom1150
  %688 = load i8, i8* %arrayidx1151, align 1, !tbaa !64
  %conv1152 = zext i8 %688 to i32
  %shr1153 = ashr i32 %conv1152, 13
  %sub1154 = sub nsw i32 %shr1147, %shr1153
  %conv1155 = trunc i32 %sub1154 to i16
  %conv1156 = sext i16 %conv1155 to i32
  br label %cond.end.1178

cond.false.1157:                                  ; preds = %cond.end.1133
  %689 = load i32, i32* %j, align 4, !tbaa !5
  %mul1158 = mul nsw i32 %689, 3
  %add1159 = add nsw i32 %mul1158, 2
  %idxprom1160 = sext i32 %add1159 to i64
  %690 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1161 = getelementptr inbounds i8, i8* %690, i64 %idxprom1160
  %691 = load i8, i8* %arrayidx1161, align 1, !tbaa !64
  %conv1162 = zext i8 %691 to i32
  %shr1163 = ashr i32 %conv1162, 1
  %692 = load i32, i32* %j, align 4, !tbaa !5
  %mul1164 = mul nsw i32 %692, 3
  %add1165 = add nsw i32 %mul1164, 2
  %idxprom1166 = sext i32 %add1165 to i64
  %693 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1167 = getelementptr inbounds i8, i8* %693, i64 %idxprom1166
  %694 = load i8, i8* %arrayidx1167, align 1, !tbaa !64
  %conv1168 = zext i8 %694 to i32
  %shr1169 = ashr i32 %conv1168, 13
  %sub1170 = sub nsw i32 %shr1163, %shr1169
  %conv1171 = trunc i32 %sub1170 to i16
  %695 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer1172 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %695, i32 0, i32 47
  %arrayidx1173 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer1172, i32 0, i64 2
  %696 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx1173, align 8, !tbaa !1
  %values1174 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %696, i32 0, i32 4
  %arrayidx1175 = getelementptr inbounds [256 x i16], [256 x i16]* %values1174, i32 0, i64 0
  %call1176 = call signext i16 @gx_color_frac_map(i16 signext %conv1171, i16* %arrayidx1175) #7
  %conv1177 = sext i16 %call1176 to i32
  br label %cond.end.1178

cond.end.1178:                                    ; preds = %cond.false.1157, %cond.true.1141
  %cond1179 = phi i32 [ %conv1156, %cond.true.1141 ], [ %conv1177, %cond.false.1157 ]
  %shr1180 = ashr i32 %cond1179, 11
  %add1181 = add nsw i32 %shl1135, %shr1180
  %conv1182 = trunc i32 %add1181 to i16
  %conv1183 = zext i16 %conv1182 to i32
  %cmp1184 = icmp slt i32 255, %conv1183
  br i1 %cmp1184, label %cond.true.1186, label %cond.false.1187

cond.true.1186:                                   ; preds = %cond.end.1178
  br label %cond.end.1281

cond.false.1187:                                  ; preds = %cond.end.1178
  %697 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer1188 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %697, i32 0, i32 47
  %arrayidx1189 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer1188, i32 0, i64 2
  %698 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx1189, align 8, !tbaa !1
  %proc1190 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %698, i32 0, i32 1
  %699 = load float (double, %struct.gx_transfer_map_s*)*, float (double, %struct.gx_transfer_map_s*)** %proc1190, align 8, !tbaa !346
  %cmp1191 = icmp eq float (double, %struct.gx_transfer_map_s*)* %699, @gs_identity_transfer
  br i1 %cmp1191, label %cond.true.1193, label %cond.false.1209

cond.true.1193:                                   ; preds = %cond.false.1187
  %700 = load i32, i32* %j, align 4, !tbaa !5
  %mul1194 = mul nsw i32 %700, 3
  %add1195 = add nsw i32 %mul1194, 2
  %idxprom1196 = sext i32 %add1195 to i64
  %701 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1197 = getelementptr inbounds i8, i8* %701, i64 %idxprom1196
  %702 = load i8, i8* %arrayidx1197, align 1, !tbaa !64
  %conv1198 = zext i8 %702 to i32
  %shr1199 = ashr i32 %conv1198, 1
  %703 = load i32, i32* %j, align 4, !tbaa !5
  %mul1200 = mul nsw i32 %703, 3
  %add1201 = add nsw i32 %mul1200, 2
  %idxprom1202 = sext i32 %add1201 to i64
  %704 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1203 = getelementptr inbounds i8, i8* %704, i64 %idxprom1202
  %705 = load i8, i8* %arrayidx1203, align 1, !tbaa !64
  %conv1204 = zext i8 %705 to i32
  %shr1205 = ashr i32 %conv1204, 13
  %sub1206 = sub nsw i32 %shr1199, %shr1205
  %conv1207 = trunc i32 %sub1206 to i16
  %conv1208 = sext i16 %conv1207 to i32
  br label %cond.end.1230

cond.false.1209:                                  ; preds = %cond.false.1187
  %706 = load i32, i32* %j, align 4, !tbaa !5
  %mul1210 = mul nsw i32 %706, 3
  %add1211 = add nsw i32 %mul1210, 2
  %idxprom1212 = sext i32 %add1211 to i64
  %707 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1213 = getelementptr inbounds i8, i8* %707, i64 %idxprom1212
  %708 = load i8, i8* %arrayidx1213, align 1, !tbaa !64
  %conv1214 = zext i8 %708 to i32
  %shr1215 = ashr i32 %conv1214, 1
  %709 = load i32, i32* %j, align 4, !tbaa !5
  %mul1216 = mul nsw i32 %709, 3
  %add1217 = add nsw i32 %mul1216, 2
  %idxprom1218 = sext i32 %add1217 to i64
  %710 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1219 = getelementptr inbounds i8, i8* %710, i64 %idxprom1218
  %711 = load i8, i8* %arrayidx1219, align 1, !tbaa !64
  %conv1220 = zext i8 %711 to i32
  %shr1221 = ashr i32 %conv1220, 13
  %sub1222 = sub nsw i32 %shr1215, %shr1221
  %conv1223 = trunc i32 %sub1222 to i16
  %712 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer1224 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %712, i32 0, i32 47
  %arrayidx1225 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer1224, i32 0, i64 2
  %713 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx1225, align 8, !tbaa !1
  %values1226 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %713, i32 0, i32 4
  %arrayidx1227 = getelementptr inbounds [256 x i16], [256 x i16]* %values1226, i32 0, i64 0
  %call1228 = call signext i16 @gx_color_frac_map(i16 signext %conv1223, i16* %arrayidx1227) #7
  %conv1229 = sext i16 %call1228 to i32
  br label %cond.end.1230

cond.end.1230:                                    ; preds = %cond.false.1209, %cond.true.1193
  %cond1231 = phi i32 [ %conv1208, %cond.true.1193 ], [ %conv1229, %cond.false.1209 ]
  %shl1232 = shl i32 %cond1231, 1
  %714 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer1233 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %714, i32 0, i32 47
  %arrayidx1234 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer1233, i32 0, i64 2
  %715 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx1234, align 8, !tbaa !1
  %proc1235 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %715, i32 0, i32 1
  %716 = load float (double, %struct.gx_transfer_map_s*)*, float (double, %struct.gx_transfer_map_s*)** %proc1235, align 8, !tbaa !346
  %cmp1236 = icmp eq float (double, %struct.gx_transfer_map_s*)* %716, @gs_identity_transfer
  br i1 %cmp1236, label %cond.true.1238, label %cond.false.1254

cond.true.1238:                                   ; preds = %cond.end.1230
  %717 = load i32, i32* %j, align 4, !tbaa !5
  %mul1239 = mul nsw i32 %717, 3
  %add1240 = add nsw i32 %mul1239, 2
  %idxprom1241 = sext i32 %add1240 to i64
  %718 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1242 = getelementptr inbounds i8, i8* %718, i64 %idxprom1241
  %719 = load i8, i8* %arrayidx1242, align 1, !tbaa !64
  %conv1243 = zext i8 %719 to i32
  %shr1244 = ashr i32 %conv1243, 1
  %720 = load i32, i32* %j, align 4, !tbaa !5
  %mul1245 = mul nsw i32 %720, 3
  %add1246 = add nsw i32 %mul1245, 2
  %idxprom1247 = sext i32 %add1246 to i64
  %721 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1248 = getelementptr inbounds i8, i8* %721, i64 %idxprom1247
  %722 = load i8, i8* %arrayidx1248, align 1, !tbaa !64
  %conv1249 = zext i8 %722 to i32
  %shr1250 = ashr i32 %conv1249, 13
  %sub1251 = sub nsw i32 %shr1244, %shr1250
  %conv1252 = trunc i32 %sub1251 to i16
  %conv1253 = sext i16 %conv1252 to i32
  br label %cond.end.1275

cond.false.1254:                                  ; preds = %cond.end.1230
  %723 = load i32, i32* %j, align 4, !tbaa !5
  %mul1255 = mul nsw i32 %723, 3
  %add1256 = add nsw i32 %mul1255, 2
  %idxprom1257 = sext i32 %add1256 to i64
  %724 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1258 = getelementptr inbounds i8, i8* %724, i64 %idxprom1257
  %725 = load i8, i8* %arrayidx1258, align 1, !tbaa !64
  %conv1259 = zext i8 %725 to i32
  %shr1260 = ashr i32 %conv1259, 1
  %726 = load i32, i32* %j, align 4, !tbaa !5
  %mul1261 = mul nsw i32 %726, 3
  %add1262 = add nsw i32 %mul1261, 2
  %idxprom1263 = sext i32 %add1262 to i64
  %727 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1264 = getelementptr inbounds i8, i8* %727, i64 %idxprom1263
  %728 = load i8, i8* %arrayidx1264, align 1, !tbaa !64
  %conv1265 = zext i8 %728 to i32
  %shr1266 = ashr i32 %conv1265, 13
  %sub1267 = sub nsw i32 %shr1260, %shr1266
  %conv1268 = trunc i32 %sub1267 to i16
  %729 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer1269 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %729, i32 0, i32 47
  %arrayidx1270 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer1269, i32 0, i64 2
  %730 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx1270, align 8, !tbaa !1
  %values1271 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %730, i32 0, i32 4
  %arrayidx1272 = getelementptr inbounds [256 x i16], [256 x i16]* %values1271, i32 0, i64 0
  %call1273 = call signext i16 @gx_color_frac_map(i16 signext %conv1268, i16* %arrayidx1272) #7
  %conv1274 = sext i16 %call1273 to i32
  br label %cond.end.1275

cond.end.1275:                                    ; preds = %cond.false.1254, %cond.true.1238
  %cond1276 = phi i32 [ %conv1253, %cond.true.1238 ], [ %conv1274, %cond.false.1254 ]
  %shr1277 = ashr i32 %cond1276, 11
  %add1278 = add nsw i32 %shl1232, %shr1277
  %conv1279 = trunc i32 %add1278 to i16
  %conv1280 = zext i16 %conv1279 to i32
  br label %cond.end.1281

cond.end.1281:                                    ; preds = %cond.end.1275, %cond.true.1186
  %cond1282 = phi i32 [ 255, %cond.true.1186 ], [ %conv1280, %cond.end.1275 ]
  %conv1283 = trunc i32 %cond1282 to i8
  %731 = load i32, i32* %j, align 4, !tbaa !5
  %mul1284 = mul nsw i32 %731, 3
  %add1285 = add nsw i32 %mul1284, 2
  %idxprom1286 = sext i32 %add1285 to i64
  %732 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1287 = getelementptr inbounds i8, i8* %732, i64 %idxprom1286
  store i8 %conv1283, i8* %arrayidx1287, align 1, !tbaa !64
  br label %for.inc.1288

for.inc.1288:                                     ; preds = %cond.end.1281
  %733 = load i32, i32* %j, align 4, !tbaa !5
  %inc1289 = add nsw i32 %733, 1
  store i32 %inc1289, i32* %j, align 4, !tbaa !5
  br label %for.cond.716

for.end.1290:                                     ; preds = %for.cond.716
  br label %for.inc.1291

for.inc.1291:                                     ; preds = %for.end.1290
  %734 = load i32, i32* %i, align 4, !tbaa !5
  %inc1292 = add nsw i32 %734, 1
  store i32 %inc1292, i32* %i, align 4, !tbaa !5
  br label %for.cond.709

for.end.1293:                                     ; preds = %for.cond.709
  br label %if.end.1481

if.else.1294:                                     ; preds = %if.end.704
  %735 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %bits_per_pixel1295 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %735, i32 0, i32 13
  %736 = load i32, i32* %bits_per_pixel1295, align 4, !tbaa !345
  %cmp1296 = icmp eq i32 %736, 8
  br i1 %cmp1296, label %if.then.1298, label %if.end.1480

if.then.1298:                                     ; preds = %if.else.1294
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %for.cond.1299

for.cond.1299:                                    ; preds = %for.inc.1477, %if.then.1298
  %737 = load i32, i32* %i, align 4, !tbaa !5
  %738 = load i32, i32* %height.addr, align 4, !tbaa !5
  %cmp1300 = icmp slt i32 %737, %738
  br i1 %cmp1300, label %for.body.1302, label %for.end.1479

for.body.1302:                                    ; preds = %for.cond.1299
  %739 = load i8*, i8** %buf, align 8, !tbaa !1
  %740 = load i32, i32* %raster_length, align 4, !tbaa !5
  %741 = load i32, i32* %i, align 4, !tbaa !5
  %mul1303 = mul nsw i32 %740, %741
  %idx.ext1304 = sext i32 %mul1303 to i64
  %add.ptr1305 = getelementptr inbounds i8, i8* %739, i64 %idx.ext1304
  store i8* %add.ptr1305, i8** %ptr, align 8, !tbaa !1
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %for.cond.1306

for.cond.1306:                                    ; preds = %for.inc.1474, %for.body.1302
  %742 = load i32, i32* %j, align 4, !tbaa !5
  %743 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %width1307 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %743, i32 0, i32 11
  %744 = load i32, i32* %width1307, align 4, !tbaa !120
  %cmp1308 = icmp slt i32 %742, %744
  br i1 %cmp1308, label %for.body.1310, label %for.end.1476

for.body.1310:                                    ; preds = %for.cond.1306
  %745 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer1311 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %745, i32 0, i32 47
  %arrayidx1312 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer1311, i32 0, i64 3
  %746 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx1312, align 8, !tbaa !1
  %proc1313 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %746, i32 0, i32 1
  %747 = load float (double, %struct.gx_transfer_map_s*)*, float (double, %struct.gx_transfer_map_s*)** %proc1313, align 8, !tbaa !346
  %cmp1314 = icmp eq float (double, %struct.gx_transfer_map_s*)* %747, @gs_identity_transfer
  br i1 %cmp1314, label %cond.true.1316, label %cond.false.1328

cond.true.1316:                                   ; preds = %for.body.1310
  %748 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom1317 = sext i32 %748 to i64
  %749 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1318 = getelementptr inbounds i8, i8* %749, i64 %idxprom1317
  %750 = load i8, i8* %arrayidx1318, align 1, !tbaa !64
  %conv1319 = zext i8 %750 to i32
  %shr1320 = ashr i32 %conv1319, 1
  %751 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom1321 = sext i32 %751 to i64
  %752 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1322 = getelementptr inbounds i8, i8* %752, i64 %idxprom1321
  %753 = load i8, i8* %arrayidx1322, align 1, !tbaa !64
  %conv1323 = zext i8 %753 to i32
  %shr1324 = ashr i32 %conv1323, 13
  %sub1325 = sub nsw i32 %shr1320, %shr1324
  %conv1326 = trunc i32 %sub1325 to i16
  %conv1327 = sext i16 %conv1326 to i32
  br label %cond.end.1345

cond.false.1328:                                  ; preds = %for.body.1310
  %754 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom1329 = sext i32 %754 to i64
  %755 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1330 = getelementptr inbounds i8, i8* %755, i64 %idxprom1329
  %756 = load i8, i8* %arrayidx1330, align 1, !tbaa !64
  %conv1331 = zext i8 %756 to i32
  %shr1332 = ashr i32 %conv1331, 1
  %757 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom1333 = sext i32 %757 to i64
  %758 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1334 = getelementptr inbounds i8, i8* %758, i64 %idxprom1333
  %759 = load i8, i8* %arrayidx1334, align 1, !tbaa !64
  %conv1335 = zext i8 %759 to i32
  %shr1336 = ashr i32 %conv1335, 13
  %sub1337 = sub nsw i32 %shr1332, %shr1336
  %conv1338 = trunc i32 %sub1337 to i16
  %760 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer1339 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %760, i32 0, i32 47
  %arrayidx1340 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer1339, i32 0, i64 3
  %761 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx1340, align 8, !tbaa !1
  %values1341 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %761, i32 0, i32 4
  %arrayidx1342 = getelementptr inbounds [256 x i16], [256 x i16]* %values1341, i32 0, i64 0
  %call1343 = call signext i16 @gx_color_frac_map(i16 signext %conv1338, i16* %arrayidx1342) #7
  %conv1344 = sext i16 %call1343 to i32
  br label %cond.end.1345

cond.end.1345:                                    ; preds = %cond.false.1328, %cond.true.1316
  %cond1346 = phi i32 [ %conv1327, %cond.true.1316 ], [ %conv1344, %cond.false.1328 ]
  %shl1347 = shl i32 %cond1346, 1
  %762 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer1348 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %762, i32 0, i32 47
  %arrayidx1349 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer1348, i32 0, i64 3
  %763 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx1349, align 8, !tbaa !1
  %proc1350 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %763, i32 0, i32 1
  %764 = load float (double, %struct.gx_transfer_map_s*)*, float (double, %struct.gx_transfer_map_s*)** %proc1350, align 8, !tbaa !346
  %cmp1351 = icmp eq float (double, %struct.gx_transfer_map_s*)* %764, @gs_identity_transfer
  br i1 %cmp1351, label %cond.true.1353, label %cond.false.1365

cond.true.1353:                                   ; preds = %cond.end.1345
  %765 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom1354 = sext i32 %765 to i64
  %766 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1355 = getelementptr inbounds i8, i8* %766, i64 %idxprom1354
  %767 = load i8, i8* %arrayidx1355, align 1, !tbaa !64
  %conv1356 = zext i8 %767 to i32
  %shr1357 = ashr i32 %conv1356, 1
  %768 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom1358 = sext i32 %768 to i64
  %769 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1359 = getelementptr inbounds i8, i8* %769, i64 %idxprom1358
  %770 = load i8, i8* %arrayidx1359, align 1, !tbaa !64
  %conv1360 = zext i8 %770 to i32
  %shr1361 = ashr i32 %conv1360, 13
  %sub1362 = sub nsw i32 %shr1357, %shr1361
  %conv1363 = trunc i32 %sub1362 to i16
  %conv1364 = sext i16 %conv1363 to i32
  br label %cond.end.1382

cond.false.1365:                                  ; preds = %cond.end.1345
  %771 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom1366 = sext i32 %771 to i64
  %772 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1367 = getelementptr inbounds i8, i8* %772, i64 %idxprom1366
  %773 = load i8, i8* %arrayidx1367, align 1, !tbaa !64
  %conv1368 = zext i8 %773 to i32
  %shr1369 = ashr i32 %conv1368, 1
  %774 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom1370 = sext i32 %774 to i64
  %775 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1371 = getelementptr inbounds i8, i8* %775, i64 %idxprom1370
  %776 = load i8, i8* %arrayidx1371, align 1, !tbaa !64
  %conv1372 = zext i8 %776 to i32
  %shr1373 = ashr i32 %conv1372, 13
  %sub1374 = sub nsw i32 %shr1369, %shr1373
  %conv1375 = trunc i32 %sub1374 to i16
  %777 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer1376 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %777, i32 0, i32 47
  %arrayidx1377 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer1376, i32 0, i64 3
  %778 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx1377, align 8, !tbaa !1
  %values1378 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %778, i32 0, i32 4
  %arrayidx1379 = getelementptr inbounds [256 x i16], [256 x i16]* %values1378, i32 0, i64 0
  %call1380 = call signext i16 @gx_color_frac_map(i16 signext %conv1375, i16* %arrayidx1379) #7
  %conv1381 = sext i16 %call1380 to i32
  br label %cond.end.1382

cond.end.1382:                                    ; preds = %cond.false.1365, %cond.true.1353
  %cond1383 = phi i32 [ %conv1364, %cond.true.1353 ], [ %conv1381, %cond.false.1365 ]
  %shr1384 = ashr i32 %cond1383, 11
  %add1385 = add nsw i32 %shl1347, %shr1384
  %conv1386 = trunc i32 %add1385 to i16
  %conv1387 = zext i16 %conv1386 to i32
  %cmp1388 = icmp slt i32 255, %conv1387
  br i1 %cmp1388, label %cond.true.1390, label %cond.false.1391

cond.true.1390:                                   ; preds = %cond.end.1382
  br label %cond.end.1469

cond.false.1391:                                  ; preds = %cond.end.1382
  %779 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer1392 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %779, i32 0, i32 47
  %arrayidx1393 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer1392, i32 0, i64 3
  %780 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx1393, align 8, !tbaa !1
  %proc1394 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %780, i32 0, i32 1
  %781 = load float (double, %struct.gx_transfer_map_s*)*, float (double, %struct.gx_transfer_map_s*)** %proc1394, align 8, !tbaa !346
  %cmp1395 = icmp eq float (double, %struct.gx_transfer_map_s*)* %781, @gs_identity_transfer
  br i1 %cmp1395, label %cond.true.1397, label %cond.false.1409

cond.true.1397:                                   ; preds = %cond.false.1391
  %782 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom1398 = sext i32 %782 to i64
  %783 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1399 = getelementptr inbounds i8, i8* %783, i64 %idxprom1398
  %784 = load i8, i8* %arrayidx1399, align 1, !tbaa !64
  %conv1400 = zext i8 %784 to i32
  %shr1401 = ashr i32 %conv1400, 1
  %785 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom1402 = sext i32 %785 to i64
  %786 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1403 = getelementptr inbounds i8, i8* %786, i64 %idxprom1402
  %787 = load i8, i8* %arrayidx1403, align 1, !tbaa !64
  %conv1404 = zext i8 %787 to i32
  %shr1405 = ashr i32 %conv1404, 13
  %sub1406 = sub nsw i32 %shr1401, %shr1405
  %conv1407 = trunc i32 %sub1406 to i16
  %conv1408 = sext i16 %conv1407 to i32
  br label %cond.end.1426

cond.false.1409:                                  ; preds = %cond.false.1391
  %788 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom1410 = sext i32 %788 to i64
  %789 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1411 = getelementptr inbounds i8, i8* %789, i64 %idxprom1410
  %790 = load i8, i8* %arrayidx1411, align 1, !tbaa !64
  %conv1412 = zext i8 %790 to i32
  %shr1413 = ashr i32 %conv1412, 1
  %791 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom1414 = sext i32 %791 to i64
  %792 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1415 = getelementptr inbounds i8, i8* %792, i64 %idxprom1414
  %793 = load i8, i8* %arrayidx1415, align 1, !tbaa !64
  %conv1416 = zext i8 %793 to i32
  %shr1417 = ashr i32 %conv1416, 13
  %sub1418 = sub nsw i32 %shr1413, %shr1417
  %conv1419 = trunc i32 %sub1418 to i16
  %794 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer1420 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %794, i32 0, i32 47
  %arrayidx1421 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer1420, i32 0, i64 3
  %795 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx1421, align 8, !tbaa !1
  %values1422 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %795, i32 0, i32 4
  %arrayidx1423 = getelementptr inbounds [256 x i16], [256 x i16]* %values1422, i32 0, i64 0
  %call1424 = call signext i16 @gx_color_frac_map(i16 signext %conv1419, i16* %arrayidx1423) #7
  %conv1425 = sext i16 %call1424 to i32
  br label %cond.end.1426

cond.end.1426:                                    ; preds = %cond.false.1409, %cond.true.1397
  %cond1427 = phi i32 [ %conv1408, %cond.true.1397 ], [ %conv1425, %cond.false.1409 ]
  %shl1428 = shl i32 %cond1427, 1
  %796 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer1429 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %796, i32 0, i32 47
  %arrayidx1430 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer1429, i32 0, i64 3
  %797 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx1430, align 8, !tbaa !1
  %proc1431 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %797, i32 0, i32 1
  %798 = load float (double, %struct.gx_transfer_map_s*)*, float (double, %struct.gx_transfer_map_s*)** %proc1431, align 8, !tbaa !346
  %cmp1432 = icmp eq float (double, %struct.gx_transfer_map_s*)* %798, @gs_identity_transfer
  br i1 %cmp1432, label %cond.true.1434, label %cond.false.1446

cond.true.1434:                                   ; preds = %cond.end.1426
  %799 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom1435 = sext i32 %799 to i64
  %800 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1436 = getelementptr inbounds i8, i8* %800, i64 %idxprom1435
  %801 = load i8, i8* %arrayidx1436, align 1, !tbaa !64
  %conv1437 = zext i8 %801 to i32
  %shr1438 = ashr i32 %conv1437, 1
  %802 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom1439 = sext i32 %802 to i64
  %803 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1440 = getelementptr inbounds i8, i8* %803, i64 %idxprom1439
  %804 = load i8, i8* %arrayidx1440, align 1, !tbaa !64
  %conv1441 = zext i8 %804 to i32
  %shr1442 = ashr i32 %conv1441, 13
  %sub1443 = sub nsw i32 %shr1438, %shr1442
  %conv1444 = trunc i32 %sub1443 to i16
  %conv1445 = sext i16 %conv1444 to i32
  br label %cond.end.1463

cond.false.1446:                                  ; preds = %cond.end.1426
  %805 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom1447 = sext i32 %805 to i64
  %806 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1448 = getelementptr inbounds i8, i8* %806, i64 %idxprom1447
  %807 = load i8, i8* %arrayidx1448, align 1, !tbaa !64
  %conv1449 = zext i8 %807 to i32
  %shr1450 = ashr i32 %conv1449, 1
  %808 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom1451 = sext i32 %808 to i64
  %809 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1452 = getelementptr inbounds i8, i8* %809, i64 %idxprom1451
  %810 = load i8, i8* %arrayidx1452, align 1, !tbaa !64
  %conv1453 = zext i8 %810 to i32
  %shr1454 = ashr i32 %conv1453, 13
  %sub1455 = sub nsw i32 %shr1450, %shr1454
  %conv1456 = trunc i32 %sub1455 to i16
  %811 = load %struct.gs_imager_state_s*, %struct.gs_imager_state_s** %pis, align 8, !tbaa !1
  %effective_transfer1457 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %811, i32 0, i32 47
  %arrayidx1458 = getelementptr inbounds [64 x %struct.gx_transfer_map_s*], [64 x %struct.gx_transfer_map_s*]* %effective_transfer1457, i32 0, i64 3
  %812 = load %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s** %arrayidx1458, align 8, !tbaa !1
  %values1459 = getelementptr inbounds %struct.gx_transfer_map_s, %struct.gx_transfer_map_s* %812, i32 0, i32 4
  %arrayidx1460 = getelementptr inbounds [256 x i16], [256 x i16]* %values1459, i32 0, i64 0
  %call1461 = call signext i16 @gx_color_frac_map(i16 signext %conv1456, i16* %arrayidx1460) #7
  %conv1462 = sext i16 %call1461 to i32
  br label %cond.end.1463

cond.end.1463:                                    ; preds = %cond.false.1446, %cond.true.1434
  %cond1464 = phi i32 [ %conv1445, %cond.true.1434 ], [ %conv1462, %cond.false.1446 ]
  %shr1465 = ashr i32 %cond1464, 11
  %add1466 = add nsw i32 %shl1428, %shr1465
  %conv1467 = trunc i32 %add1466 to i16
  %conv1468 = zext i16 %conv1467 to i32
  br label %cond.end.1469

cond.end.1469:                                    ; preds = %cond.end.1463, %cond.true.1390
  %cond1470 = phi i32 [ 255, %cond.true.1390 ], [ %conv1468, %cond.end.1463 ]
  %conv1471 = trunc i32 %cond1470 to i8
  %813 = load i32, i32* %j, align 4, !tbaa !5
  %idxprom1472 = sext i32 %813 to i64
  %814 = load i8*, i8** %ptr, align 8, !tbaa !1
  %arrayidx1473 = getelementptr inbounds i8, i8* %814, i64 %idxprom1472
  store i8 %conv1471, i8* %arrayidx1473, align 1, !tbaa !64
  br label %for.inc.1474

for.inc.1474:                                     ; preds = %cond.end.1469
  %815 = load i32, i32* %j, align 4, !tbaa !5
  %inc1475 = add nsw i32 %815, 1
  store i32 %inc1475, i32* %j, align 4, !tbaa !5
  br label %for.cond.1306

for.end.1476:                                     ; preds = %for.cond.1306
  br label %for.inc.1477

for.inc.1477:                                     ; preds = %for.end.1476
  %816 = load i32, i32* %i, align 4, !tbaa !5
  %inc1478 = add nsw i32 %816, 1
  store i32 %inc1478, i32* %i, align 4, !tbaa !5
  br label %for.cond.1299

for.end.1479:                                     ; preds = %for.cond.1299
  br label %if.end.1480

if.end.1480:                                      ; preds = %for.end.1479, %if.else.1294
  br label %if.end.1481

if.end.1481:                                      ; preds = %if.end.1480, %for.end.1293
  %817 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpTransferDrawImage = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %817, i32 0, i32 59
  %818 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** %opvpTransferDrawImage, align 8, !tbaa !251
  %tobool1482 = icmp ne i32 (i32, i32, i8*)* %818, null
  br i1 %tobool1482, label %if.then.1483, label %if.end.1487

if.then.1483:                                     ; preds = %if.end.1481
  %819 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpTransferDrawImage1484 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %819, i32 0, i32 59
  %820 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** %opvpTransferDrawImage1484, align 8, !tbaa !251
  %821 = load i32, i32* @printerContext, align 4, !tbaa !5
  %822 = load i32, i32* %raster_length, align 4, !tbaa !5
  %823 = load i32, i32* %height.addr, align 4, !tbaa !5
  %mul1485 = mul nsw i32 %822, %823
  %824 = load i8*, i8** %buf, align 8, !tbaa !1
  %call1486 = call i32 %820(i32 %821, i32 %mul1485, i8* %824) #7
  br label %if.end.1487

if.end.1487:                                      ; preds = %if.then.1483, %if.end.1481
  %825 = load i8*, i8** %buf, align 8, !tbaa !1
  %tobool1488 = icmp ne i8* %825, null
  br i1 %tobool1488, label %if.then.1489, label %if.end.1490

if.then.1489:                                     ; preds = %if.end.1487
  %826 = load i8*, i8** %buf, align 8, !tbaa !1
  call void @free(i8* %826) #8
  br label %if.end.1490

if.end.1490:                                      ; preds = %if.then.1489, %if.end.1487
  br label %if.end.1491

if.end.1491:                                      ; preds = %if.end.1490, %if.end.14
  %827 = load i32, i32* %height.addr, align 4, !tbaa !5
  %828 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %y = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %828, i32 0, i32 15
  %829 = load i32, i32* %y, align 4, !tbaa !349
  %add1492 = add nsw i32 %829, %827
  store i32 %add1492, i32* %y, align 4, !tbaa !349
  %830 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %y1493 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %830, i32 0, i32 15
  %831 = load i32, i32* %y1493, align 4, !tbaa !349
  %832 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %height1494 = getelementptr inbounds %struct.gdev_vector_image_enum_s, %struct.gdev_vector_image_enum_s* %832, i32 0, i32 12
  %833 = load i32, i32* %height1494, align 4, !tbaa !121
  %cmp1495 = icmp sge i32 %831, %833
  %conv1496 = zext i1 %cmp1495 to i32
  store i32 %conv1496, i32* %ecode, align 4, !tbaa !5
  %834 = load i32, i32* %ecode, align 4, !tbaa !5
  store i32 %834, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup

cleanup:                                          ; preds = %if.end.1491, %if.then
  %835 = bitcast %struct.gs_imager_state_s** %pis to i8*
  call void @llvm.lifetime.end(i64 8, i8* %835) #2
  %836 = bitcast %struct.gx_image_enum_s** %tinfo to i8*
  call void @llvm.lifetime.end(i64 8, i8* %836) #2
  %837 = bitcast %struct.bbox_image_enum_s** %pbe to i8*
  call void @llvm.lifetime.end(i64 8, i8* %837) #2
  %838 = bitcast i8** %ptr to i8*
  call void @llvm.lifetime.end(i64 8, i8* %838) #2
  %839 = bitcast i8** %ppalette to i8*
  call void @llvm.lifetime.end(i64 8, i8* %839) #2
  %840 = bitcast i8** %dst_ptr to i8*
  call void @llvm.lifetime.end(i64 8, i8* %840) #2
  %841 = bitcast i8** %src_ptr to i8*
  call void @llvm.lifetime.end(i64 8, i8* %841) #2
  %842 = bitcast i32* %j to i8*
  call void @llvm.lifetime.end(i64 4, i8* %842) #2
  %843 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %843) #2
  %844 = bitcast i32* %ecode to i8*
  call void @llvm.lifetime.end(i64 4, i8* %844) #2
  %845 = bitcast i32* %h to i8*
  call void @llvm.lifetime.end(i64 4, i8* %845) #2
  %846 = bitcast i32* %d to i8*
  call void @llvm.lifetime.end(i64 4, i8* %846) #2
  %847 = bitcast i32* %x to i8*
  call void @llvm.lifetime.end(i64 4, i8* %847) #2
  %848 = bitcast i32* %p to i8*
  call void @llvm.lifetime.end(i64 4, i8* %848) #2
  %849 = bitcast i32* %dst_length to i8*
  call void @llvm.lifetime.end(i64 4, i8* %849) #2
  %850 = bitcast i32* %raster_length to i8*
  call void @llvm.lifetime.end(i64 4, i8* %850) #2
  %851 = bitcast i32* %dst_bytes to i8*
  call void @llvm.lifetime.end(i64 4, i8* %851) #2
  %852 = bitcast i32* %data_bytes to i8*
  call void @llvm.lifetime.end(i64 4, i8* %852) #2
  %853 = bitcast i32* %bits_per_pixel to i8*
  call void @llvm.lifetime.end(i64 4, i8* %853) #2
  %854 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %854) #2
  %855 = bitcast i8** %tmp_buf to i8*
  call void @llvm.lifetime.end(i64 8, i8* %855) #2
  %856 = bitcast %struct.gdev_vector_image_enum_s** %vinfo to i8*
  call void @llvm.lifetime.end(i64 8, i8* %856) #2
  %857 = load i32, i32* %retval
  ret i32 %857
}

; Function Attrs: nounwind uwtable
define internal i32 @opvp_image_end_image(%struct.gx_image_enum_common_s* %info, i32 %draw_last) #0 {
entry:
  %info.addr = alloca %struct.gx_image_enum_common_s*, align 8
  %draw_last.addr = alloca i32, align 4
  %dev = alloca %struct.gx_device_s*, align 8
  %vdev = alloca %struct.gx_device_vector_s*, align 8
  %vinfo = alloca %struct.gdev_vector_image_enum_s*, align 8
  %ctm = alloca %struct._opvp_ctm, align 4
  store %struct.gx_image_enum_common_s* %info, %struct.gx_image_enum_common_s** %info.addr, align 8, !tbaa !1
  store i32 %draw_last, i32* %draw_last.addr, align 4, !tbaa !5
  %0 = bitcast %struct.gx_device_s** %dev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #2
  %1 = load %struct.gx_image_enum_common_s*, %struct.gx_image_enum_common_s** %info.addr, align 8, !tbaa !1
  %dev1 = getelementptr inbounds %struct.gx_image_enum_common_s, %struct.gx_image_enum_common_s* %1, i32 0, i32 2
  %2 = load %struct.gx_device_s*, %struct.gx_device_s** %dev1, align 8, !tbaa !350
  store %struct.gx_device_s* %2, %struct.gx_device_s** %dev, align 8, !tbaa !1
  %3 = bitcast %struct.gx_device_vector_s** %vdev to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #2
  %4 = load %struct.gx_device_s*, %struct.gx_device_s** %dev, align 8, !tbaa !1
  %5 = bitcast %struct.gx_device_s* %4 to %struct.gx_device_vector_s*
  store %struct.gx_device_vector_s* %5, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %6 = bitcast %struct.gdev_vector_image_enum_s** %vinfo to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = bitcast %struct._opvp_ctm* %ctm to i8*
  call void @llvm.lifetime.start(i64 24, i8* %7) #2
  %8 = load %struct.gx_image_enum_common_s*, %struct.gx_image_enum_common_s** %info.addr, align 8, !tbaa !1
  %9 = bitcast %struct.gx_image_enum_common_s* %8 to %struct.gdev_vector_image_enum_s*
  store %struct.gdev_vector_image_enum_s* %9, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %10 = load i32, i32* @begin_image, align 4, !tbaa !5
  %tobool = icmp ne i32 %10, 0
  br i1 %tobool, label %if.then, label %if.end.33

if.then:                                          ; preds = %entry
  %11 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpEndDrawImage = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %11, i32 0, i32 60
  %12 = load i32 (i32)*, i32 (i32)** %opvpEndDrawImage, align 8, !tbaa !124
  %tobool2 = icmp ne i32 (i32)* %12, null
  br i1 %tobool2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %13 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpEndDrawImage4 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %13, i32 0, i32 60
  %14 = load i32 (i32)*, i32 (i32)** %opvpEndDrawImage4, align 8, !tbaa !124
  %15 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call = call i32 %14(i32 %15) #7
  br label %if.end

if.end:                                           ; preds = %if.then.3, %if.then
  store i32 0, i32* @begin_image, align 4, !tbaa !5
  %16 = load i32, i32* @FastImageMode, align 4, !tbaa !64
  %cmp = icmp ne i32 %16, 1
  br i1 %cmp, label %if.then.5, label %if.end.16

if.then.5:                                        ; preds = %if.end
  %17 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpResetCTM = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %17, i32 0, i32 11
  %18 = load i32 (i32)*, i32 (i32)** %opvpResetCTM, align 8, !tbaa !74
  %tobool6 = icmp ne i32 (i32)* %18, null
  br i1 %tobool6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %if.then.5
  %19 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpResetCTM8 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %19, i32 0, i32 11
  %20 = load i32 (i32)*, i32 (i32)** %opvpResetCTM8, align 8, !tbaa !74
  %21 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call9 = call i32 %20(i32 %21) #7
  br label %if.end.15

if.else:                                          ; preds = %if.then.5
  %a = getelementptr inbounds %struct._opvp_ctm, %struct._opvp_ctm* %ctm, i32 0, i32 0
  store float 1.000000e+00, float* %a, align 4, !tbaa !75
  %b = getelementptr inbounds %struct._opvp_ctm, %struct._opvp_ctm* %ctm, i32 0, i32 1
  store float 0.000000e+00, float* %b, align 4, !tbaa !77
  %c = getelementptr inbounds %struct._opvp_ctm, %struct._opvp_ctm* %ctm, i32 0, i32 2
  store float 0.000000e+00, float* %c, align 4, !tbaa !78
  %d = getelementptr inbounds %struct._opvp_ctm, %struct._opvp_ctm* %ctm, i32 0, i32 3
  store float 1.000000e+00, float* %d, align 4, !tbaa !79
  %e = getelementptr inbounds %struct._opvp_ctm, %struct._opvp_ctm* %ctm, i32 0, i32 4
  store float 0.000000e+00, float* %e, align 4, !tbaa !80
  %f = getelementptr inbounds %struct._opvp_ctm, %struct._opvp_ctm* %ctm, i32 0, i32 5
  store float 0.000000e+00, float* %f, align 4, !tbaa !81
  %22 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetCTM = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %22, i32 0, i32 12
  %23 = load i32 (i32, %struct._opvp_ctm*)*, i32 (i32, %struct._opvp_ctm*)** %opvpSetCTM, align 8, !tbaa !82
  %tobool10 = icmp ne i32 (i32, %struct._opvp_ctm*)* %23, null
  br i1 %tobool10, label %if.then.11, label %if.end.14

if.then.11:                                       ; preds = %if.else
  %24 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetCTM12 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %24, i32 0, i32 12
  %25 = load i32 (i32, %struct._opvp_ctm*)*, i32 (i32, %struct._opvp_ctm*)** %opvpSetCTM12, align 8, !tbaa !82
  %26 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call13 = call i32 %25(i32 %26, %struct._opvp_ctm* %ctm) #7
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.11, %if.else
  br label %if.end.15

if.end.15:                                        ; preds = %if.end.14, %if.then.7
  br label %if.end.16

if.end.16:                                        ; preds = %if.end.15, %if.end
  %27 = load i32, i32* @change_paint_mode, align 4, !tbaa !5
  %tobool17 = icmp ne i32 %27, 0
  br i1 %tobool17, label %if.then.18, label %if.end.24

if.then.18:                                       ; preds = %if.end.16
  %28 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetPaintMode = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %28, i32 0, i32 38
  %29 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetPaintMode, align 8, !tbaa !96
  %tobool19 = icmp ne i32 (i32, i32)* %29, null
  br i1 %tobool19, label %if.then.20, label %if.end.23

if.then.20:                                       ; preds = %if.then.18
  %30 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetPaintMode21 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %30, i32 0, i32 38
  %31 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetPaintMode21, align 8, !tbaa !96
  %32 = load i32, i32* @printerContext, align 4, !tbaa !5
  %call22 = call i32 %31(i32 %32, i32 1) #7
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.20, %if.then.18
  store i32 0, i32* @change_paint_mode, align 4, !tbaa !5
  br label %if.end.24

if.end.24:                                        ; preds = %if.end.23, %if.end.16
  %33 = load i32, i32* @change_cspace, align 4, !tbaa !5
  %tobool25 = icmp ne i32 %33, 0
  br i1 %tobool25, label %if.then.26, label %if.end.32

if.then.26:                                       ; preds = %if.end.24
  %34 = load i32, i32* @savedColorSpace, align 4, !tbaa !64
  store i32 %34, i32* @colorSpace, align 4, !tbaa !64
  %35 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetColorSpace = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %35, i32 0, i32 18
  %36 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetColorSpace, align 8, !tbaa !123
  %tobool27 = icmp ne i32 (i32, i32)* %36, null
  br i1 %tobool27, label %if.then.28, label %if.end.31

if.then.28:                                       ; preds = %if.then.26
  %37 = load %struct._opvp_api_procs*, %struct._opvp_api_procs** @apiEntry, align 8, !tbaa !1
  %opvpSetColorSpace29 = getelementptr inbounds %struct._opvp_api_procs, %struct._opvp_api_procs* %37, i32 0, i32 18
  %38 = load i32 (i32, i32)*, i32 (i32, i32)** %opvpSetColorSpace29, align 8, !tbaa !123
  %39 = load i32, i32* @printerContext, align 4, !tbaa !5
  %40 = load i32, i32* @colorSpace, align 4, !tbaa !64
  %call30 = call i32 %38(i32 %39, i32 %40) #7
  br label %if.end.31

if.end.31:                                        ; preds = %if.then.28, %if.then.26
  store i32 0, i32* @change_cspace, align 4, !tbaa !5
  br label %if.end.32

if.end.32:                                        ; preds = %if.end.31, %if.end.24
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.32, %entry
  %41 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %42 = load %struct.gdev_vector_image_enum_s*, %struct.gdev_vector_image_enum_s** %vinfo, align 8, !tbaa !1
  %43 = load i32, i32* %draw_last.addr, align 4, !tbaa !5
  %44 = load %struct.gx_device_vector_s*, %struct.gx_device_vector_s** %vdev, align 8, !tbaa !1
  %white = getelementptr inbounds %struct.gx_device_vector_s, %struct.gx_device_vector_s* %44, i32 0, i32 66
  %45 = load i64, i64* %white, align 8, !tbaa !352
  %call34 = call i32 @gdev_vector_end_image(%struct.gx_device_vector_s* %41, %struct.gdev_vector_image_enum_s* %42, i32 %43, i64 %45) #7
  %46 = bitcast %struct._opvp_ctm* %ctm to i8*
  call void @llvm.lifetime.end(i64 24, i8* %46) #2
  %47 = bitcast %struct.gdev_vector_image_enum_s** %vinfo to i8*
  call void @llvm.lifetime.end(i64 8, i8* %47) #2
  %48 = bitcast %struct.gx_device_vector_s** %vdev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %48) #2
  %49 = bitcast %struct.gx_device_s** %dev to i8*
  call void @llvm.lifetime.end(i64 8, i8* %49) #2
  ret i32 %call34
}

declare i32 @gx_image_plane_data(%struct.gx_image_enum_common_s*, %struct.gx_image_plane_s*, i32) #1

declare float @gs_identity_transfer(double, %struct.gx_transfer_map_s*) #1

declare signext i16 @gx_color_frac_map(i16 signext, i16*) #1

declare i32 @gdev_vector_end_image(%struct.gx_device_vector_s*, %struct.gdev_vector_image_enum_s*, i32, i64) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind readonly uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin }
attributes #8 = { nobuiltin nounwind }
attributes #9 = { nobuiltin nounwind readonly }
attributes #10 = { nobuiltin nounwind readnone }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!1 = !{!2, !2, i64 0}
!2 = !{!"any pointer", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
!5 = !{!6, !6, i64 0}
!6 = !{!"int", !3, i64 0}
!7 = !{!8, !2, i64 32}
!8 = !{!"gs_memory_struct_type_s", !6, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !2, i64 40, !2, i64 48, !2, i64 56}
!9 = !{!8, !2, i64 40}
!10 = !{!11, !11, i64 0}
!11 = !{!"float", !3, i64 0}
!12 = !{!13, !6, i64 832}
!13 = !{!"gx_device_s", !6, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !6, i64 40, !2, i64 48, !14, i64 56, !6, i64 80, !6, i64 84, !6, i64 88, !16, i64 96, !19, i64 816, !6, i64 832, !6, i64 836, !6, i64 840, !6, i64 844, !6, i64 848, !6, i64 852, !3, i64 856, !3, i64 864, !6, i64 880, !3, i64 884, !3, i64 892, !3, i64 900, !3, i64 908, !15, i64 928, !15, i64 936, !6, i64 944, !6, i64 948, !6, i64 952, !6, i64 956, !6, i64 960, !15, i64 968, !15, i64 976, !20, i64 984, !6, i64 1052, !6, i64 1056, !21, i64 1064, !2, i64 1104, !3, i64 1112, !23, i64 1120, !24, i64 1144}
!14 = !{!"rc_header_s", !15, i64 0, !2, i64 8, !2, i64 16}
!15 = !{!"long", !3, i64 0}
!16 = !{!"gx_device_color_info_s", !6, i64 0, !6, i64 4, !3, i64 8, !17, i64 12, !3, i64 14, !6, i64 16, !6, i64 20, !6, i64 24, !6, i64 28, !18, i64 32, !3, i64 40, !3, i64 44, !3, i64 108, !3, i64 176, !2, i64 688, !3, i64 696, !15, i64 704, !6, i64 712}
!17 = !{!"short", !3, i64 0}
!18 = !{!"gx_device_anti_alias_info_s", !6, i64 0, !6, i64 4}
!19 = !{!"gx_device_cached_colors_s", !15, i64 0, !15, i64 8}
!20 = !{!"gx_stroked_gradient_recognizer_s", !6, i64 0, !3, i64 4, !3, i64 36}
!21 = !{!"gdev_space_params_s", !15, i64 0, !15, i64 8, !22, i64 16, !6, i64 32, !3, i64 36}
!22 = !{!"gx_band_params_s", !6, i64 0, !6, i64 4, !15, i64 8}
!23 = !{!"gx_page_device_procs_s", !2, i64 0, !2, i64 8, !2, i64 16}
!24 = !{!"gx_device_procs_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !2, i64 40, !2, i64 48, !2, i64 56, !2, i64 64, !2, i64 72, !2, i64 80, !2, i64 88, !2, i64 96, !2, i64 104, !2, i64 112, !2, i64 120, !2, i64 128, !2, i64 136, !2, i64 144, !2, i64 152, !2, i64 160, !2, i64 168, !2, i64 176, !2, i64 184, !2, i64 192, !2, i64 200, !2, i64 208, !2, i64 216, !2, i64 224, !2, i64 232, !2, i64 240, !2, i64 248, !2, i64 256, !2, i64 264, !2, i64 272, !2, i64 280, !2, i64 288, !2, i64 296, !2, i64 304, !2, i64 312, !2, i64 320, !2, i64 328, !2, i64 336, !2, i64 344, !2, i64 352, !2, i64 360, !2, i64 368, !2, i64 376, !2, i64 384, !2, i64 392, !2, i64 400, !2, i64 408, !2, i64 416, !2, i64 424, !2, i64 432, !2, i64 440, !2, i64 448, !2, i64 456, !2, i64 464, !2, i64 472, !2, i64 480, !2, i64 488, !2, i64 496, !2, i64 504, !2, i64 512, !2, i64 520, !2, i64 528, !2, i64 536, !2, i64 544, !2, i64 552, !2, i64 560, !2, i64 568, !2, i64 576}
!25 = !{!13, !6, i64 836}
!26 = !{!27, !2, i64 24}
!27 = !{!"gx_device_opvp_s", !6, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !6, i64 40, !2, i64 48, !14, i64 56, !6, i64 80, !6, i64 84, !6, i64 88, !16, i64 96, !19, i64 816, !6, i64 832, !6, i64 836, !6, i64 840, !6, i64 844, !6, i64 848, !6, i64 852, !3, i64 856, !3, i64 864, !6, i64 880, !3, i64 884, !3, i64 892, !3, i64 900, !3, i64 908, !15, i64 928, !15, i64 936, !6, i64 944, !6, i64 948, !6, i64 952, !6, i64 956, !6, i64 960, !15, i64 968, !15, i64 976, !20, i64 984, !6, i64 1052, !6, i64 1056, !21, i64 1064, !2, i64 1104, !3, i64 1112, !23, i64 1120, !24, i64 1144, !2, i64 1728, !2, i64 1736, !3, i64 1744, !2, i64 5840, !2, i64 5848, !2, i64 5856, !6, i64 5864, !6, i64 5868, !28, i64 5872, !2, i64 7488, !6, i64 7496, !6, i64 7500, !6, i64 7504, !40, i64 7512, !40, i64 8144, !15, i64 8776, !15, i64 8784, !3, i64 8792, !3, i64 8796, !33, i64 8800, !6, i64 8816, !2, i64 8824, !15, i64 8832, !15, i64 8840}
!28 = !{!"gs_imager_state_s", !6, i64 0, !2, i64 8, !2, i64 16, !29, i64 24, !6, i64 128, !32, i64 132, !6, i64 168, !33, i64 176, !33, i64 192, !6, i64 208, !6, i64 212, !17, i64 216, !3, i64 220, !35, i64 224, !35, i64 228, !36, i64 232, !15, i64 240, !6, i64 248, !6, i64 252, !6, i64 256, !2, i64 264, !6, i64 272, !6, i64 276, !6, i64 280, !6, i64 284, !6, i64 288, !6, i64 292, !11, i64 296, !37, i64 300, !6, i64 308, !6, i64 312, !6, i64 316, !11, i64 320, !6, i64 324, !6, i64 328, !2, i64 336, !2, i64 344, !2, i64 352, !2, i64 360, !2, i64 368, !3, i64 376, !2, i64 392, !2, i64 400, !6, i64 408, !2, i64 416, !2, i64 424, !38, i64 432, !3, i64 496, !2, i64 1008, !2, i64 1016, !39, i64 1024, !2, i64 1304, !2, i64 1312, !2, i64 1320, !2, i64 1328, !39, i64 1336}
!29 = !{!"gx_line_params_s", !11, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !6, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !6, i64 36, !30, i64 40, !31, i64 64}
!30 = !{!"gs_matrix_s", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20}
!31 = !{!"gx_dash_params_s", !2, i64 0, !6, i64 8, !11, i64 12, !6, i64 16, !11, i64 20, !6, i64 24, !6, i64 28, !11, i64 32}
!32 = !{!"gs_matrix_fixed_s", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !6, i64 24, !6, i64 28, !6, i64 32}
!33 = !{!"gs_point_s", !34, i64 0, !34, i64 8}
!34 = !{!"double", !3, i64 0}
!35 = !{!"gs_transparency_source_s", !11, i64 0}
!36 = !{!"gs_xstate_trans_flags", !6, i64 0, !6, i64 4}
!37 = !{!"gs_fixed_point_s", !6, i64 0, !6, i64 4}
!38 = !{!"gx_transfer_s", !6, i64 0, !2, i64 8, !6, i64 16, !2, i64 24, !6, i64 32, !2, i64 40, !6, i64 48, !2, i64 56}
!39 = !{!"gs_devicen_color_map_s", !6, i64 0, !3, i64 4, !6, i64 8, !6, i64 12, !15, i64 16, !3, i64 24}
!40 = !{!"gx_hl_saved_color_s", !15, i64 0, !15, i64 8, !6, i64 16, !41, i64 24, !43, i64 288}
!41 = !{!"gs_client_color_s", !2, i64 0, !42, i64 8}
!42 = !{!"gs_paint_color_s", !3, i64 0}
!43 = !{!"gx_device_color_saved_s", !2, i64 0, !3, i64 8, !44, i64 336}
!44 = !{!"gs_int_point_s", !6, i64 0, !6, i64 4}
!45 = !{!46, !2, i64 32}
!46 = !{!"gs_memory_s", !2, i64 0, !47, i64 8, !2, i64 192, !2, i64 200, !2, i64 208}
!47 = !{!"gs_memory_procs_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !2, i64 40, !2, i64 48, !2, i64 56, !2, i64 64, !2, i64 72, !2, i64 80, !2, i64 88, !2, i64 96, !2, i64 104, !2, i64 112, !2, i64 120, !2, i64 128, !2, i64 136, !2, i64 144, !2, i64 152, !2, i64 160, !2, i64 168, !2, i64 176}
!48 = !{!27, !2, i64 1728}
!49 = !{!27, !2, i64 8824}
!50 = !{!51, !2, i64 24}
!51 = !{!"gx_device_bbox_s", !6, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !6, i64 40, !2, i64 48, !14, i64 56, !6, i64 80, !6, i64 84, !6, i64 88, !16, i64 96, !19, i64 816, !6, i64 832, !6, i64 836, !6, i64 840, !6, i64 844, !6, i64 848, !6, i64 852, !3, i64 856, !3, i64 864, !6, i64 880, !3, i64 884, !3, i64 892, !3, i64 900, !3, i64 908, !15, i64 928, !15, i64 936, !6, i64 944, !6, i64 948, !6, i64 952, !6, i64 956, !6, i64 960, !15, i64 968, !15, i64 976, !20, i64 984, !6, i64 1052, !6, i64 1056, !21, i64 1064, !2, i64 1104, !3, i64 1112, !23, i64 1120, !24, i64 1144, !2, i64 1728, !6, i64 1736, !6, i64 1740, !52, i64 1744, !2, i64 1776, !6, i64 1784, !53, i64 1788, !15, i64 1808, !15, i64 1816, !15, i64 1824}
!52 = !{!"gx_device_bbox_procs_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24}
!53 = !{!"gs_fixed_rect_s", !37, i64 0, !37, i64 8}
!54 = !{!13, !2, i64 24}
!55 = !{!27, !2, i64 5840}
!56 = !{!57, !2, i64 17176}
!57 = !{!"gx_device_oprp_s", !6, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !6, i64 40, !2, i64 48, !14, i64 56, !6, i64 80, !6, i64 84, !6, i64 88, !16, i64 96, !19, i64 816, !6, i64 832, !6, i64 836, !6, i64 840, !6, i64 844, !6, i64 848, !6, i64 852, !3, i64 856, !3, i64 864, !6, i64 880, !3, i64 884, !3, i64 892, !3, i64 900, !3, i64 908, !15, i64 928, !15, i64 936, !6, i64 944, !6, i64 948, !6, i64 952, !6, i64 956, !6, i64 960, !15, i64 968, !15, i64 976, !20, i64 984, !6, i64 1052, !6, i64 1056, !21, i64 1064, !2, i64 1104, !3, i64 1112, !23, i64 1120, !24, i64 1144, !3, i64 1728, !58, i64 12968, !3, i64 13056, !6, i64 17152, !6, i64 17156, !6, i64 17160, !6, i64 17164, !6, i64 17168, !6, i64 17172, !2, i64 17176, !15, i64 17184, !2, i64 17192, !2, i64 17200, !2, i64 17208, !2, i64 17216, !2, i64 17224, !6, i64 17232, !2, i64 17240, !6, i64 17248, !6, i64 17252, !60, i64 17256, !6, i64 17288, !2, i64 17296, !24, i64 17304, !24, i64 17888}
!58 = !{!"gx_printer_device_procs_s", !2, i64 0, !2, i64 8, !59, i64 16, !2, i64 48, !2, i64 56, !2, i64 64, !2, i64 72, !2, i64 80}
!59 = !{!"gx_device_buf_procs_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24}
!60 = !{!"bg_print_s", !2, i64 0, !2, i64 8, !2, i64 16, !6, i64 24, !6, i64 28}
!61 = !{!27, !2, i64 1736}
!62 = !{!63, !2, i64 136}
!63 = !{!"_opvp_api_procs", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !2, i64 40, !2, i64 48, !2, i64 56, !2, i64 64, !2, i64 72, !2, i64 80, !2, i64 88, !2, i64 96, !2, i64 104, !2, i64 112, !2, i64 120, !2, i64 128, !2, i64 136, !2, i64 144, !2, i64 152, !2, i64 160, !2, i64 168, !2, i64 176, !2, i64 184, !2, i64 192, !2, i64 200, !2, i64 208, !2, i64 216, !2, i64 224, !2, i64 232, !2, i64 240, !2, i64 248, !2, i64 256, !2, i64 264, !2, i64 272, !2, i64 280, !2, i64 288, !2, i64 296, !2, i64 304, !2, i64 312, !2, i64 320, !2, i64 328, !2, i64 336, !2, i64 344, !2, i64 352, !2, i64 360, !2, i64 368, !2, i64 376, !2, i64 384, !2, i64 392, !2, i64 400, !2, i64 408, !2, i64 416, !2, i64 424, !2, i64 432, !2, i64 440, !2, i64 448, !2, i64 456, !2, i64 464, !2, i64 472, !2, i64 480, !2, i64 488, !2, i64 496, !2, i64 504, !2, i64 512, !2, i64 520, !2, i64 528, !2, i64 536, !2, i64 544, !2, i64 552, !2, i64 560}
!64 = !{!3, !3, i64 0}
!65 = !{!63, !2, i64 16}
!66 = !{!63, !2, i64 40}
!67 = !{!30, !11, i64 0}
!68 = !{!30, !11, i64 4}
!69 = !{!30, !11, i64 8}
!70 = !{!30, !11, i64 12}
!71 = !{!30, !11, i64 16}
!72 = !{!30, !11, i64 20}
!73 = !{!27, !6, i64 84}
!74 = !{!63, !2, i64 88}
!75 = !{!76, !11, i64 0}
!76 = !{!"_opvp_ctm", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20}
!77 = !{!76, !11, i64 4}
!78 = !{!76, !11, i64 8}
!79 = !{!76, !11, i64 12}
!80 = !{!76, !11, i64 16}
!81 = !{!76, !11, i64 20}
!82 = !{!63, !2, i64 96}
!83 = !{!84, !2, i64 0}
!84 = !{!"gx_device_vector_procs_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !2, i64 40, !2, i64 48, !2, i64 56, !2, i64 64, !2, i64 72, !2, i64 80, !2, i64 88, !2, i64 96, !2, i64 104, !2, i64 112, !2, i64 120, !2, i64 128, !2, i64 136, !2, i64 144}
!85 = !{!27, !6, i64 8816}
!86 = !{!63, !2, i64 48}
!87 = !{!63, !2, i64 24}
!88 = !{!63, !2, i64 8}
!89 = !{!17, !17, i64 0}
!90 = !{!15, !15, i64 0}
!91 = !{!63, !2, i64 328}
!92 = !{!93, !6, i64 0}
!93 = !{!"_opvp_point", !6, i64 0, !6, i64 4}
!94 = !{!93, !6, i64 4}
!95 = !{!63, !2, i64 400}
!96 = !{!63, !2, i64 304}
!97 = !{!63, !2, i64 336}
!98 = !{!27, !17, i64 108}
!99 = !{!63, !2, i64 384}
!100 = !{!53, !6, i64 0}
!101 = !{!53, !6, i64 4}
!102 = !{!53, !6, i64 8}
!103 = !{!53, !6, i64 12}
!104 = !{!105, !2, i64 576}
!105 = !{!"gs_image1_s", !2, i64 0, !30, i64 8, !6, i64 32, !6, i64 36, !6, i64 40, !3, i64 44, !6, i64 564, !3, i64 568, !6, i64 572, !2, i64 576, !6, i64 584, !6, i64 588, !3, i64 592, !3, i64 596}
!106 = !{!46, !2, i64 72}
!107 = !{!108, !2, i64 24}
!108 = !{!"gdev_vector_image_enum_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !15, i64 32, !6, i64 40, !6, i64 44, !3, i64 48, !3, i64 308, !2, i64 568, !2, i64 576, !6, i64 584, !6, i64 588, !6, i64 592, !6, i64 596, !6, i64 600}
!109 = !{!108, !6, i64 44}
!110 = !{!105, !6, i64 584}
!111 = !{!112, !2, i64 0}
!112 = !{!"gs_color_space_s", !2, i64 0, !14, i64 8, !15, i64 32, !2, i64 40, !2, i64 48, !2, i64 56, !2, i64 64, !3, i64 72}
!113 = !{!114, !3, i64 0}
!114 = !{!"gs_color_space_type_s", !3, i64 0, !6, i64 4, !6, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !2, i64 40, !2, i64 48, !2, i64 56, !2, i64 64, !2, i64 72, !2, i64 80, !2, i64 88, !2, i64 96, !2, i64 104, !2, i64 112, !2, i64 120, !2, i64 128}
!115 = !{!116, !6, i64 0}
!116 = !{!"gs_indexed_params_s", !6, i64 0, !6, i64 4, !3, i64 8, !6, i64 24}
!117 = !{!118, !2, i64 0}
!118 = !{!"gs_const_string_s", !2, i64 0, !6, i64 8}
!119 = !{!118, !6, i64 8}
!120 = !{!108, !6, i64 584}
!121 = !{!108, !6, i64 588}
!122 = !{!63, !2, i64 464}
!123 = !{!63, !2, i64 144}
!124 = !{!63, !2, i64 480}
!125 = !{!126, !6, i64 832}
!126 = !{!"gx_device_printer_s", !6, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !6, i64 40, !2, i64 48, !14, i64 56, !6, i64 80, !6, i64 84, !6, i64 88, !16, i64 96, !19, i64 816, !6, i64 832, !6, i64 836, !6, i64 840, !6, i64 844, !6, i64 848, !6, i64 852, !3, i64 856, !3, i64 864, !6, i64 880, !3, i64 884, !3, i64 892, !3, i64 900, !3, i64 908, !15, i64 928, !15, i64 936, !6, i64 944, !6, i64 948, !6, i64 952, !6, i64 956, !6, i64 960, !15, i64 968, !15, i64 976, !20, i64 984, !6, i64 1052, !6, i64 1056, !21, i64 1064, !2, i64 1104, !3, i64 1112, !23, i64 1120, !24, i64 1144, !3, i64 1728, !58, i64 12968, !3, i64 13056, !6, i64 17152, !6, i64 17156, !6, i64 17160, !6, i64 17164, !6, i64 17168, !6, i64 17172, !2, i64 17176, !15, i64 17184, !2, i64 17192, !2, i64 17200, !2, i64 17208, !2, i64 17216, !2, i64 17224, !6, i64 17232, !2, i64 17240, !6, i64 17248, !6, i64 17252, !60, i64 17256, !6, i64 17288, !2, i64 17296, !24, i64 17304, !24, i64 17888}
!127 = !{!63, !2, i64 512}
!128 = !{!63, !2, i64 528}
!129 = !{!126, !17, i64 108}
!130 = !{!63, !2, i64 520}
!131 = !{!63, !2, i64 536}
!132 = !{!13, !2, i64 1152}
!133 = !{!134, !2, i64 0}
!134 = !{!"gs_param_string_s", !2, i64 0, !6, i64 8, !6, i64 12}
!135 = !{!134, !6, i64 8}
!136 = !{!134, !6, i64 12}
!137 = !{!138, !2, i64 0}
!138 = !{!"gs_param_list_s", !2, i64 0, !2, i64 8, !6, i64 16}
!139 = !{!140, !2, i64 56}
!140 = !{!"gs_param_list_procs_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !2, i64 40, !2, i64 48, !2, i64 56, !2, i64 64}
!141 = !{!63, !2, i64 344}
!142 = !{!63, !2, i64 352}
!143 = !{!63, !2, i64 360}
!144 = !{!63, !2, i64 408}
!145 = !{!63, !2, i64 440}
!146 = !{!63, !2, i64 152}
!147 = !{!13, !6, i64 100}
!148 = !{!13, !17, i64 108}
!149 = !{!13, !6, i64 112}
!150 = !{!13, !6, i64 116}
!151 = !{!13, !6, i64 120}
!152 = !{!13, !6, i64 124}
!153 = !{!13, !2, i64 1536}
!154 = !{!13, !2, i64 1544}
!155 = !{!156, !2, i64 8}
!156 = !{!"_OPVP_api_procs", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !2, i64 40, !2, i64 48, !2, i64 56, !2, i64 64, !2, i64 72, !2, i64 80, !2, i64 88, !2, i64 96, !2, i64 104, !2, i64 112, !2, i64 120, !2, i64 128, !2, i64 136, !2, i64 144, !2, i64 152, !2, i64 160, !2, i64 168, !2, i64 176, !2, i64 184, !2, i64 192, !2, i64 200, !2, i64 208, !2, i64 216, !2, i64 224, !2, i64 232, !2, i64 240, !2, i64 248, !2, i64 256, !2, i64 264, !2, i64 272, !2, i64 280, !2, i64 288, !2, i64 296, !2, i64 304, !2, i64 312, !2, i64 320, !2, i64 328, !2, i64 336, !2, i64 344, !2, i64 352, !2, i64 360, !2, i64 368, !2, i64 376, !2, i64 384, !2, i64 392, !2, i64 400, !2, i64 408, !2, i64 416, !2, i64 424, !2, i64 432, !2, i64 440, !2, i64 448, !2, i64 456, !2, i64 464, !2, i64 472, !2, i64 480, !2, i64 488, !2, i64 496, !2, i64 504, !2, i64 512, !2, i64 520, !2, i64 528, !2, i64 536, !2, i64 544, !2, i64 552, !2, i64 560, !2, i64 568, !2, i64 576, !2, i64 584}
!157 = !{!156, !2, i64 16}
!158 = !{!156, !2, i64 24}
!159 = !{!63, !2, i64 32}
!160 = !{!156, !2, i64 32}
!161 = !{!156, !2, i64 40}
!162 = !{!156, !2, i64 48}
!163 = !{!63, !2, i64 56}
!164 = !{!156, !2, i64 56}
!165 = !{!63, !2, i64 64}
!166 = !{!156, !2, i64 64}
!167 = !{!63, !2, i64 72}
!168 = !{!156, !2, i64 72}
!169 = !{!63, !2, i64 80}
!170 = !{!156, !2, i64 80}
!171 = !{!156, !2, i64 88}
!172 = !{!156, !2, i64 96}
!173 = !{!63, !2, i64 104}
!174 = !{!156, !2, i64 104}
!175 = !{!63, !2, i64 112}
!176 = !{!156, !2, i64 112}
!177 = !{!63, !2, i64 120}
!178 = !{!156, !2, i64 120}
!179 = !{!63, !2, i64 128}
!180 = !{!156, !2, i64 128}
!181 = !{!156, !2, i64 136}
!182 = !{!156, !2, i64 144}
!183 = !{!156, !2, i64 176}
!184 = !{!63, !2, i64 160}
!185 = !{!156, !2, i64 184}
!186 = !{!63, !2, i64 168}
!187 = !{!156, !2, i64 192}
!188 = !{!63, !2, i64 176}
!189 = !{!156, !2, i64 200}
!190 = !{!63, !2, i64 184}
!191 = !{!156, !2, i64 208}
!192 = !{!63, !2, i64 192}
!193 = !{!156, !2, i64 216}
!194 = !{!63, !2, i64 200}
!195 = !{!156, !2, i64 224}
!196 = !{!63, !2, i64 208}
!197 = !{!156, !2, i64 232}
!198 = !{!63, !2, i64 216}
!199 = !{!156, !2, i64 240}
!200 = !{!63, !2, i64 224}
!201 = !{!156, !2, i64 248}
!202 = !{!63, !2, i64 232}
!203 = !{!156, !2, i64 256}
!204 = !{!63, !2, i64 240}
!205 = !{!156, !2, i64 264}
!206 = !{!63, !2, i64 248}
!207 = !{!156, !2, i64 272}
!208 = !{!63, !2, i64 256}
!209 = !{!156, !2, i64 280}
!210 = !{!63, !2, i64 264}
!211 = !{!156, !2, i64 288}
!212 = !{!63, !2, i64 272}
!213 = !{!156, !2, i64 296}
!214 = !{!63, !2, i64 280}
!215 = !{!156, !2, i64 304}
!216 = !{!63, !2, i64 288}
!217 = !{!156, !2, i64 312}
!218 = !{!63, !2, i64 296}
!219 = !{!156, !2, i64 320}
!220 = !{!156, !2, i64 328}
!221 = !{!63, !2, i64 312}
!222 = !{!156, !2, i64 336}
!223 = !{!63, !2, i64 320}
!224 = !{!156, !2, i64 344}
!225 = !{!156, !2, i64 352}
!226 = !{!156, !2, i64 360}
!227 = !{!156, !2, i64 368}
!228 = !{!156, !2, i64 376}
!229 = !{!156, !2, i64 384}
!230 = !{!63, !2, i64 368}
!231 = !{!156, !2, i64 392}
!232 = !{!63, !2, i64 376}
!233 = !{!156, !2, i64 400}
!234 = !{!156, !2, i64 408}
!235 = !{!63, !2, i64 392}
!236 = !{!156, !2, i64 416}
!237 = !{!156, !2, i64 424}
!238 = !{!156, !2, i64 432}
!239 = !{!63, !2, i64 416}
!240 = !{!156, !2, i64 440}
!241 = !{!63, !2, i64 424}
!242 = !{!156, !2, i64 448}
!243 = !{!63, !2, i64 432}
!244 = !{!156, !2, i64 456}
!245 = !{!156, !2, i64 464}
!246 = !{!63, !2, i64 448}
!247 = !{!156, !2, i64 480}
!248 = !{!63, !2, i64 456}
!249 = !{!156, !2, i64 488}
!250 = !{!156, !2, i64 496}
!251 = !{!63, !2, i64 472}
!252 = !{!156, !2, i64 504}
!253 = !{!156, !2, i64 512}
!254 = !{!63, !2, i64 488}
!255 = !{!156, !2, i64 520}
!256 = !{!63, !2, i64 496}
!257 = !{!156, !2, i64 528}
!258 = !{!63, !2, i64 504}
!259 = !{!156, !2, i64 536}
!260 = !{!156, !2, i64 544}
!261 = !{!156, !2, i64 552}
!262 = !{!156, !2, i64 560}
!263 = !{!156, !2, i64 568}
!264 = !{!63, !2, i64 544}
!265 = !{!156, !2, i64 576}
!266 = !{!63, !2, i64 552}
!267 = !{!156, !2, i64 584}
!268 = !{!63, !2, i64 560}
!269 = !{!156, !2, i64 160}
!270 = !{!271, !3, i64 0}
!271 = !{!"_opvp_brush", !3, i64 0, !3, i64 4, !6, i64 20, !6, i64 24, !2, i64 32}
!272 = !{!273, !3, i64 0}
!273 = !{!"_OPVP_Brush", !3, i64 0, !3, i64 4, !6, i64 20, !6, i64 24, !2, i64 32}
!274 = !{!271, !6, i64 20}
!275 = !{!273, !6, i64 20}
!276 = !{!271, !6, i64 24}
!277 = !{!273, !6, i64 24}
!278 = !{!271, !2, i64 32}
!279 = !{!273, !2, i64 32}
!280 = !{!281, !6, i64 0}
!281 = !{!"_OPVP_Rectangle", !282, i64 0, !282, i64 8}
!282 = !{!"_OPVP_Point", !6, i64 0, !6, i64 4}
!283 = !{!281, !6, i64 4}
!284 = !{!281, !6, i64 8}
!285 = !{!281, !6, i64 12}
!286 = !{!34, !34, i64 0}
!287 = !{!288, !2, i64 0}
!288 = !{!"gx_device_color_s", !2, i64 0, !3, i64 8, !44, i64 352, !6, i64 360, !41, i64 368, !289, i64 632}
!289 = !{!"_mask", !290, i64 0, !15, i64 8, !2, i64 16}
!290 = !{!"mp_", !6, i64 0, !6, i64 4}
!291 = !{!292, !34, i64 8}
!292 = !{!"", !34, i64 0, !34, i64 8}
!293 = !{!292, !34, i64 0}
!294 = !{!295, !2, i64 1736}
!295 = !{!"gx_device_vector_s", !6, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !2, i64 32, !6, i64 40, !2, i64 48, !14, i64 56, !6, i64 80, !6, i64 84, !6, i64 88, !16, i64 96, !19, i64 816, !6, i64 832, !6, i64 836, !6, i64 840, !6, i64 844, !6, i64 848, !6, i64 852, !3, i64 856, !3, i64 864, !6, i64 880, !3, i64 884, !3, i64 892, !3, i64 900, !3, i64 908, !15, i64 928, !15, i64 936, !6, i64 944, !6, i64 948, !6, i64 952, !6, i64 956, !6, i64 960, !15, i64 968, !15, i64 976, !20, i64 984, !6, i64 1052, !6, i64 1056, !21, i64 1064, !2, i64 1104, !3, i64 1112, !23, i64 1120, !24, i64 1144, !2, i64 1728, !2, i64 1736, !3, i64 1744, !2, i64 5840, !2, i64 5848, !2, i64 5856, !6, i64 5864, !6, i64 5868, !28, i64 5872, !2, i64 7488, !6, i64 7496, !6, i64 7500, !6, i64 7504, !40, i64 7512, !40, i64 8144, !15, i64 8776, !15, i64 8784, !3, i64 8792, !3, i64 8796, !33, i64 8800, !6, i64 8816, !2, i64 8824, !15, i64 8832, !15, i64 8840}
!296 = !{!84, !2, i64 96}
!297 = !{!84, !2, i64 104}
!298 = !{i64 0, i64 8, !286, i64 8, i64 8, !286}
!299 = !{!33, !34, i64 0}
!300 = !{!33, !34, i64 8}
!301 = !{!84, !2, i64 136}
!302 = !{!84, !2, i64 144}
!303 = !{!304, !6, i64 0}
!304 = !{!"_opvp_rectangle", !93, i64 0, !93, i64 8}
!305 = !{!304, !6, i64 4}
!306 = !{!304, !6, i64 8}
!307 = !{!304, !6, i64 12}
!308 = !{!13, !6, i64 952}
!309 = !{!13, !6, i64 948}
!310 = !{!13, !6, i64 944}
!311 = !{!312, !2, i64 8}
!312 = !{!"", !2, i64 0, !2, i64 8, !11, i64 16, !11, i64 20}
!313 = !{!312, !2, i64 0}
!314 = !{!312, !11, i64 16}
!315 = !{!312, !11, i64 20}
!316 = !{!317, !6, i64 280}
!317 = !{!"gx_clip_path_s", !318, i64 0, !321, i64 128, !6, i64 232, !53, i64 236, !53, i64 252, !2, i64 272, !6, i64 280, !2, i64 288, !15, i64 296}
!318 = !{!"gx_path_s", !319, i64 0, !2, i64 40, !3, i64 48, !2, i64 56, !2, i64 64, !53, i64 72, !2, i64 88, !3, i64 96, !3, i64 97, !3, i64 98, !3, i64 99, !3, i64 100, !6, i64 104, !6, i64 108, !37, i64 112, !2, i64 120}
!319 = !{!"gx_path_segments_s", !14, i64 0, !320, i64 24}
!320 = !{!"psc_", !2, i64 0, !2, i64 8}
!321 = !{!"gx_clip_rect_list_s", !14, i64 0, !322, i64 24}
!322 = !{!"gx_clip_list_s", !323, i64 0, !2, i64 40, !2, i64 48, !2, i64 56, !6, i64 64, !6, i64 68, !6, i64 72}
!323 = !{!"gx_clip_rect_s", !2, i64 0, !2, i64 8, !6, i64 16, !6, i64 20, !6, i64 24, !6, i64 28, !3, i64 32}
!324 = !{!322, !2, i64 40}
!325 = !{!323, !2, i64 0}
!326 = !{!108, !2, i64 568}
!327 = !{!108, !2, i64 576}
!328 = !{!329, !2, i64 600}
!329 = !{!"bbox_image_enum_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !15, i64 32, !6, i64 40, !6, i64 44, !3, i64 48, !3, i64 308, !30, i64 568, !2, i64 592, !2, i64 600, !6, i64 608, !6, i64 612, !6, i64 616, !6, i64 620, !6, i64 624}
!330 = !{!331, !2, i64 1216}
!331 = !{!"gx_image_enum_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !15, i64 32, !6, i64 40, !6, i64 44, !3, i64 48, !3, i64 308, !6, i64 568, !6, i64 572, !3, i64 576, !3, i64 577, !3, i64 578, !3, i64 579, !3, i64 580, !332, i64 584, !3, i64 1116, !3, i64 1117, !3, i64 1118, !3, i64 1119, !30, i64 1120, !333, i64 1144, !334, i64 1160, !6, i64 1176, !6, i64 1180, !37, i64 1184, !37, i64 1192, !2, i64 1200, !2, i64 1208, !2, i64 1216, !2, i64 1224, !2, i64 1232, !6, i64 1240, !2, i64 1248, !6, i64 1256, !6, i64 1260, !3, i64 1264, !3, i64 1268, !3, i64 1269, !3, i64 1270, !3, i64 1271, !53, i64 1272, !53, i64 1288, !6, i64 1304, !6, i64 1308, !6, i64 1312, !6, i64 1316, !2, i64 1320, !2, i64 1328, !2, i64 1336, !6, i64 1344, !44, i64 1348, !37, i64 1356, !37, i64 1364, !335, i64 1372, !6, i64 1492, !6, i64 1496, !44, i64 1500, !6, i64 1508, !6, i64 1512, !6, i64 1516, !6, i64 1520, !6, i64 1524, !3, i64 1528, !2, i64 23112, !288, i64 23120, !288, i64 23776, !2, i64 24432, !2, i64 24440, !2, i64 24448, !2, i64 24456, !2, i64 24464, !6, i64 24472, !6, i64 24476, !6, i64 24480, !2, i64 24488, !6, i64 24496, !3, i64 24500, !340, i64 24504, !341, i64 24792, !6, i64 24808}
!332 = !{!"mc_", !3, i64 0, !6, i64 520, !6, i64 524, !6, i64 528}
!333 = !{!"r_", !6, i64 0, !6, i64 4, !6, i64 8, !6, i64 12}
!334 = !{!"", !6, i64 0, !6, i64 4, !6, i64 8, !6, i64 12}
!335 = !{!"dd_", !336, i64 0, !336, i64 40, !336, i64 80}
!336 = !{!"gx_dda_fixed_point_s", !337, i64 0, !337, i64 20}
!337 = !{!"gx_dda_fixed_s", !338, i64 0, !339, i64 8}
!338 = !{!"_a", !6, i64 0, !6, i64 4}
!339 = !{!"_e", !6, i64 0, !6, i64 4, !6, i64 8}
!340 = !{!"ht_landscape_info_s", !6, i64 0, !3, i64 4, !6, i64 260, !6, i64 264, !6, i64 268, !6, i64 272, !6, i64 276, !6, i64 280, !6, i64 284}
!341 = !{!"gx_image_icc_setup_s", !6, i64 0, !6, i64 4, !6, i64 8, !6, i64 12}
!342 = !{!343, !2, i64 0}
!343 = !{!"gx_image_plane_s", !2, i64 0, !6, i64 8, !6, i64 12}
!344 = !{!331, !3, i64 1118}
!345 = !{!108, !6, i64 592}
!346 = !{!347, !2, i64 24}
!347 = !{!"gx_transfer_map_s", !14, i64 0, !2, i64 24, !348, i64 32, !15, i64 48, !3, i64 56}
!348 = !{!"gs_mapping_closure_s", !2, i64 0, !2, i64 8}
!349 = !{!108, !6, i64 600}
!350 = !{!351, !2, i64 16}
!351 = !{!"gx_image_enum_common_s", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !15, i64 32, !6, i64 40, !6, i64 44, !3, i64 48, !3, i64 308}
!352 = !{!295, !15, i64 8840}
