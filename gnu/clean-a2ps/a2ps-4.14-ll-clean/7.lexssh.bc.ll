; ModuleID = './src/lexssh.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.yy_buffer_state = type { %struct._IO_FILE*, i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%union.YYSTYPE = type { i8* }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.pattern = type { i8*, i64 }

@sshin = global %struct._IO_FILE* null, align 8
@sshout = global %struct._IO_FILE* null, align 8
@sshlineno = global i32 1, align 4
@ssh_flex_debug = global i32 0, align 4
@yy_init = internal global i32 0, align 4
@yy_start = internal global i32 0, align 4
@stdin = external global %struct._IO_FILE*, align 8
@stdout = external global %struct._IO_FILE*, align 8
@yy_buffer_stack = internal global %struct.yy_buffer_state** null, align 8
@yy_buffer_stack_top = internal global i64 0, align 8
@yy_c_buf_p = internal global i8* null, align 8
@yy_hold_char = internal global i8 0, align 1
@yy_ec = internal constant [256 x i32] [i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 3, i32 1, i32 2, i32 2, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 1, i32 4, i32 5, i32 1, i32 1, i32 1, i32 1, i32 6, i32 6, i32 1, i32 6, i32 6, i32 7, i32 1, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 9, i32 9, i32 9, i32 14, i32 14, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 1, i32 22, i32 1, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 1, i32 29, i32 30, i32 31, i32 32, i32 1, i32 1, i32 33, i32 1, i32 34, i32 1, i32 35, i32 1, i32 1, i32 36, i32 1, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 1, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1], align 16
@yy_accept = internal constant [901 x i16] [i16 0, i16 2, i16 2, i16 0, i16 0, i16 0, i16 0, i16 218, i16 185, i16 2, i16 2, i16 3, i16 1, i16 186, i16 185, i16 4, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 201, i16 200, i16 187, i16 217, i16 216, i16 215, i16 202, i16 217, i16 185, i16 2, i16 1, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 137, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 143, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 152, i16 154, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 201, i16 199, i16 188, i16 190, i16 191, i16 192, i16 193, i16 194, i16 195, i16 196, i16 197, i16 198, i16 199, i16 216, i16 214, i16 203, i16 205, i16 206, i16 207, i16 208, i16 209, i16 210, i16 211, i16 212, i16 213, i16 214, i16 91, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 94, i16 185, i16 185, i16 185, i16 185, i16 21, i16 22, i16 185, i16 185, i16 24, i16 185, i16 95, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 32, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 107, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 50, i16 185, i16 185, i16 185, i16 51, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 53, i16 80, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 96, i16 61, i16 185, i16 185, i16 185, i16 185, i16 142, i16 185, i16 185, i16 185, i16 149, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 188, i16 189, i16 203, i16 204, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 175, i16 176, i16 177, i16 178, i16 185, i16 185, i16 11, i16 185, i16 185, i16 185, i16 16, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 14, i16 33, i16 26, i16 185, i16 185, i16 28, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 100, i16 185, i16 185, i16 40, i16 185, i16 185, i16 185, i16 185, i16 101, i16 185, i16 185, i16 86, i16 185, i16 185, i16 185, i16 185, i16 45, i16 185, i16 185, i16 185, i16 185, i16 81, i16 185, i16 185, i16 134, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 67, i16 185, i16 185, i16 87, i16 117, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 43, i16 185, i16 185, i16 62, i16 185, i16 185, i16 185, i16 185, i16 185, i16 55, i16 185, i16 185, i16 64, i16 185, i16 185, i16 185, i16 130, i16 185, i16 185, i16 57, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 119, i16 185, i16 185, i16 138, i16 185, i16 185, i16 144, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 188, i16 189, i16 203, i16 204, i16 185, i16 185, i16 185, i16 185, i16 168, i16 185, i16 185, i16 185, i16 169, i16 165, i16 185, i16 185, i16 185, i16 10, i16 185, i16 185, i16 185, i16 185, i16 17, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 34, i16 185, i16 185, i16 185, i16 185, i16 39, i16 185, i16 185, i16 116, i16 79, i16 185, i16 8, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 46, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 36, i16 185, i16 114, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 115, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 63, i16 185, i16 185, i16 185, i16 185, i16 185, i16 151, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 162, i16 185, i16 185, i16 146, i16 185, i16 185, i16 185, i16 179, i16 180, i16 181, i16 182, i16 185, i16 185, i16 185, i16 171, i16 172, i16 9, i16 12, i16 185, i16 185, i16 15, i16 19, i16 185, i16 185, i16 185, i16 31, i16 185, i16 185, i16 27, i16 25, i16 185, i16 185, i16 93, i16 38, i16 109, i16 185, i16 185, i16 185, i16 185, i16 185, i16 41, i16 185, i16 185, i16 185, i16 185, i16 88, i16 185, i16 185, i16 185, i16 44, i16 185, i16 68, i16 48, i16 185, i16 185, i16 131, i16 90, i16 185, i16 185, i16 185, i16 110, i16 185, i16 185, i16 60, i16 185, i16 98, i16 185, i16 185, i16 66, i16 185, i16 185, i16 185, i16 135, i16 185, i16 185, i16 185, i16 56, i16 185, i16 185, i16 185, i16 185, i16 185, i16 54, i16 82, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 59, i16 185, i16 185, i16 185, i16 185, i16 118, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 157, i16 185, i16 185, i16 185, i16 185, i16 185, i16 173, i16 185, i16 185, i16 166, i16 185, i16 185, i16 185, i16 20, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 89, i16 85, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 6, i16 69, i16 5, i16 185, i16 49, i16 126, i16 185, i16 185, i16 132, i16 108, i16 185, i16 185, i16 97, i16 185, i16 83, i16 185, i16 133, i16 185, i16 136, i16 185, i16 185, i16 105, i16 185, i16 102, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 47, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 145, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 163, i16 164, i16 147, i16 185, i16 183, i16 185, i16 185, i16 185, i16 185, i16 13, i16 185, i16 185, i16 23, i16 185, i16 122, i16 29, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 42, i16 185, i16 185, i16 185, i16 185, i16 52, i16 84, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 76, i16 58, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 139, i16 185, i16 185, i16 185, i16 185, i16 155, i16 185, i16 160, i16 156, i16 185, i16 185, i16 185, i16 184, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 70, i16 185, i16 185, i16 185, i16 99, i16 185, i16 185, i16 185, i16 185, i16 185, i16 127, i16 185, i16 185, i16 106, i16 7, i16 103, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 30, i16 18, i16 185, i16 140, i16 141, i16 185, i16 185, i16 185, i16 159, i16 158, i16 161, i16 185, i16 185, i16 185, i16 124, i16 121, i16 185, i16 185, i16 185, i16 128, i16 185, i16 78, i16 72, i16 75, i16 185, i16 185, i16 37, i16 185, i16 73, i16 35, i16 129, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 150, i16 185, i16 185, i16 185, i16 185, i16 185, i16 123, i16 185, i16 185, i16 185, i16 104, i16 77, i16 65, i16 185, i16 185, i16 185, i16 185, i16 185, i16 153, i16 185, i16 185, i16 170, i16 185, i16 185, i16 71, i16 185, i16 185, i16 185, i16 111, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 185, i16 112, i16 185, i16 113, i16 148, i16 174, i16 167, i16 185, i16 185, i16 185, i16 185, i16 120, i16 92, i16 74, i16 125, i16 0], align 16
@yy_last_accepting_state = internal global i32 0, align 4
@yy_last_accepting_cpos = internal global i8* null, align 8
@yy_base = internal constant [913 x i16] [i16 0, i16 0, i16 0, i16 59, i16 61, i16 63, i16 64, i16 1012, i16 0, i16 66, i16 71, i16 1013, i16 0, i16 1013, i16 1004, i16 1013, i16 63, i16 26, i16 961, i16 968, i16 971, i16 960, i16 21, i16 969, i16 113, i16 164, i16 945, i16 40, i16 954, i16 29, i16 958, i16 31, i16 961, i16 950, i16 959, i16 42, i16 958, i16 945, i16 0, i16 1013, i16 1013, i16 209, i16 0, i16 1013, i16 1013, i16 260, i16 0, i16 87, i16 0, i16 990, i16 47, i16 948, i16 956, i16 941, i16 51, i16 933, i16 954, i16 954, i16 937, i16 941, i16 945, i16 93, i16 940, i16 945, i16 941, i16 43, i16 60, i16 947, i16 62, i16 946, i16 80, i16 926, i16 925, i16 932, i16 132, i16 137, i16 934, i16 72, i16 927, i16 932, i16 935, i16 136, i16 138, i16 151, i16 139, i16 151, i16 45, i16 156, i16 934, i16 69, i16 937, i16 186, i16 917, i16 192, i16 157, i16 237, i16 193, i16 209, i16 199, i16 921, i16 163, i16 173, i16 926, i16 929, i16 918, i16 917, i16 928, i16 925, i16 0, i16 911, i16 914, i16 924, i16 922, i16 922, i16 907, i16 905, i16 0, i16 898, i16 190, i16 905, i16 228, i16 896, i16 902, i16 909, i16 0, i16 1013, i16 283, i16 1013, i16 1013, i16 1013, i16 1013, i16 1013, i16 1013, i16 1013, i16 1013, i16 1013, i16 0, i16 0, i16 1013, i16 294, i16 1013, i16 1013, i16 1013, i16 1013, i16 1013, i16 1013, i16 1013, i16 1013, i16 1013, i16 0, i16 0, i16 909, i16 897, i16 903, i16 900, i16 899, i16 907, i16 902, i16 888, i16 904, i16 899, i16 898, i16 904, i16 276, i16 890, i16 885, i16 894, i16 891, i16 879, i16 882, i16 898, i16 886, i16 0, i16 878, i16 881, i16 883, i16 888, i16 0, i16 0, i16 212, i16 884, i16 0, i16 883, i16 0, i16 877, i16 883, i16 882, i16 868, i16 882, i16 155, i16 0, i16 867, i16 267, i16 878, i16 869, i16 864, i16 871, i16 188, i16 867, i16 871, i16 862, i16 858, i16 210, i16 862, i16 865, i16 218, i16 853, i16 859, i16 855, i16 852, i16 870, i16 861, i16 855, i16 851, i16 855, i16 850, i16 864, i16 221, i16 845, i16 848, i16 167, i16 857, i16 847, i16 268, i16 849, i16 0, i16 857, i16 842, i16 838, i16 0, i16 238, i16 845, i16 846, i16 837, i16 836, i16 843, i16 0, i16 0, i16 266, i16 842, i16 272, i16 845, i16 842, i16 837, i16 833, i16 839, i16 279, i16 844, i16 285, i16 824, i16 838, i16 830, i16 840, i16 277, i16 823, i16 834, i16 834, i16 0, i16 0, i16 818, i16 818, i16 827, i16 829, i16 0, i16 828, i16 814, i16 811, i16 0, i16 825, i16 811, i16 823, i16 805, i16 809, i16 816, i16 804, i16 809, i16 804, i16 801, i16 809, i16 801, i16 799, i16 330, i16 0, i16 335, i16 0, i16 816, i16 799, i16 810, i16 810, i16 796, i16 789, i16 793, i16 796, i16 798, i16 795, i16 794, i16 792, i16 0, i16 0, i16 0, i16 0, i16 797, i16 803, i16 0, i16 784, i16 789, i16 792, i16 0, i16 788, i16 798, i16 783, i16 795, i16 777, i16 788, i16 791, i16 0, i16 0, i16 0, i16 785, i16 780, i16 0, i16 772, i16 773, i16 780, i16 787, i16 772, i16 778, i16 774, i16 767, i16 782, i16 771, i16 0, i16 764, i16 761, i16 0, i16 776, i16 776, i16 770, i16 752, i16 0, i16 756, i16 762, i16 0, i16 760, i16 753, i16 762, i16 761, i16 0, i16 751, i16 751, i16 766, i16 754, i16 0, i16 748, i16 745, i16 0, i16 762, i16 747, i16 759, i16 753, i16 750, i16 739, i16 738, i16 0, i16 742, i16 744, i16 0, i16 755, i16 746, i16 749, i16 731, i16 738, i16 730, i16 733, i16 0, i16 735, i16 286, i16 0, i16 737, i16 738, i16 735, i16 734, i16 728, i16 0, i16 733, i16 728, i16 0, i16 735, i16 720, i16 729, i16 0, i16 718, i16 731, i16 0, i16 275, i16 729, i16 729, i16 715, i16 722, i16 317, i16 0, i16 723, i16 728, i16 0, i16 727, i16 709, i16 0, i16 721, i16 713, i16 709, i16 704, i16 709, i16 707, i16 719, i16 705, i16 709, i16 704, i16 707, i16 710, i16 709, i16 704, i16 693, i16 1013, i16 1013, i16 1013, i16 1013, i16 694, i16 701, i16 696, i16 699, i16 0, i16 340, i16 698, i16 689, i16 705, i16 0, i16 697, i16 692, i16 701, i16 0, i16 700, i16 699, i16 688, i16 697, i16 0, i16 696, i16 692, i16 203, i16 694, i16 677, i16 674, i16 691, i16 690, i16 673, i16 678, i16 0, i16 680, i16 686, i16 681, i16 671, i16 0, i16 679, i16 674, i16 0, i16 0, i16 664, i16 0, i16 664, i16 679, i16 665, i16 677, i16 653, i16 665, i16 654, i16 655, i16 664, i16 661, i16 670, i16 651, i16 645, i16 0, i16 667, i16 663, i16 655, i16 654, i16 646, i16 321, i16 649, i16 661, i16 280, i16 660, i16 643, i16 641, i16 653, i16 648, i16 0, i16 651, i16 0, i16 636, i16 651, i16 642, i16 641, i16 633, i16 636, i16 630, i16 647, i16 642, i16 641, i16 626, i16 639, i16 0, i16 638, i16 641, i16 623, i16 635, i16 622, i16 627, i16 622, i16 622, i16 626, i16 310, i16 629, i16 624, i16 316, i16 627, i16 0, i16 629, i16 611, i16 612, i16 623, i16 608, i16 0, i16 608, i16 608, i16 605, i16 610, i16 605, i16 617, i16 601, i16 606, i16 0, i16 604, i16 612, i16 0, i16 603, i16 596, i16 601, i16 0, i16 0, i16 0, i16 0, i16 611, i16 608, i16 593, i16 0, i16 0, i16 0, i16 0, i16 593, i16 595, i16 0, i16 0, i16 607, i16 590, i16 597, i16 0, i16 591, i16 603, i16 0, i16 0, i16 589, i16 588, i16 0, i16 0, i16 0, i16 578, i16 581, i16 598, i16 578, i16 588, i16 0, i16 583, i16 578, i16 576, i16 579, i16 0, i16 574, i16 578, i16 579, i16 0, i16 571, i16 0, i16 0, i16 587, i16 582, i16 0, i16 0, i16 569, i16 576, i16 567, i16 0, i16 570, i16 562, i16 0, i16 567, i16 0, i16 562, i16 578, i16 0, i16 564, i16 576, i16 571, i16 0, i16 556, i16 557, i16 572, i16 0, i16 554, i16 552, i16 562, i16 550, i16 562, i16 0, i16 0, i16 555, i16 552, i16 551, i16 546, i16 548, i16 561, i16 552, i16 0, i16 553, i16 552, i16 553, i16 556, i16 0, i16 551, i16 541, i16 536, i16 540, i16 543, i16 542, i16 546, i16 535, i16 547, i16 542, i16 0, i16 537, i16 542, i16 531, i16 530, i16 535, i16 541, i16 533, i16 528, i16 538, i16 518, i16 519, i16 522, i16 0, i16 517, i16 526, i16 519, i16 514, i16 508, i16 516, i16 0, i16 0, i16 521, i16 518, i16 519, i16 521, i16 507, i16 518, i16 509, i16 0, i16 0, i16 0, i16 501, i16 0, i16 0, i16 503, i16 512, i16 0, i16 0, i16 516, i16 504, i16 0, i16 505, i16 0, i16 504, i16 0, i16 509, i16 0, i16 496, i16 492, i16 506, i16 509, i16 504, i16 494, i16 506, i16 484, i16 492, i16 495, i16 479, i16 490, i16 0, i16 492, i16 488, i16 480, i16 494, i16 478, i16 479, i16 0, i16 476, i16 480, i16 474, i16 474, i16 474, i16 479, i16 471, i16 467, i16 482, i16 0, i16 0, i16 0, i16 468, i16 0, i16 480, i16 462, i16 459, i16 460, i16 0, i16 453, i16 454, i16 0, i16 444, i16 0, i16 0, i16 449, i16 27, i16 56, i16 136, i16 234, i16 244, i16 0, i16 284, i16 282, i16 291, i16 305, i16 0, i16 0, i16 320, i16 309, i16 310, i16 319, i16 313, i16 311, i16 315, i16 320, i16 322, i16 0, i16 0, i16 329, i16 324, i16 328, i16 325, i16 343, i16 344, i16 341, i16 329, i16 330, i16 348, i16 337, i16 342, i16 0, i16 334, i16 0, i16 0, i16 348, i16 336, i16 336, i16 0, i16 337, i16 343, i16 336, i16 337, i16 341, i16 347, i16 345, i16 0, i16 344, i16 344, i16 343, i16 0, i16 347, i16 345, i16 349, i16 364, i16 347, i16 0, i16 357, i16 353, i16 0, i16 0, i16 0, i16 368, i16 364, i16 361, i16 367, i16 364, i16 359, i16 0, i16 0, i16 367, i16 0, i16 0, i16 361, i16 363, i16 361, i16 0, i16 0, i16 0, i16 366, i16 367, i16 372, i16 0, i16 0, i16 385, i16 365, i16 383, i16 0, i16 380, i16 0, i16 0, i16 0, i16 389, i16 372, i16 0, i16 370, i16 0, i16 0, i16 0, i16 380, i16 387, i16 391, i16 391, i16 396, i16 389, i16 0, i16 394, i16 386, i16 387, i16 395, i16 386, i16 0, i16 385, i16 386, i16 389, i16 0, i16 0, i16 0, i16 399, i16 390, i16 392, i16 393, i16 397, i16 0, i16 399, i16 400, i16 0, i16 397, i16 395, i16 0, i16 399, i16 398, i16 398, i16 0, i16 409, i16 407, i16 414, i16 415, i16 409, i16 407, i16 411, i16 0, i16 417, i16 0, i16 0, i16 0, i16 0, i16 405, i16 415, i16 407, i16 411, i16 0, i16 0, i16 0, i16 0, i16 1013, i16 466, i16 473, i16 480, i16 487, i16 494, i16 500, i16 507, i16 513, i16 476, i16 477, i16 478, i16 479], align 16
@yy_chk = internal constant [1075 x i16] [i16 0, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 3, i16 3, i16 4, i16 4, i16 5, i16 6, i16 9, i16 9, i16 16, i16 5, i16 6, i16 10, i16 10, i16 17, i16 22, i16 27, i16 29, i16 17, i16 31, i16 22, i16 741, i16 35, i16 65, i16 31, i16 50, i16 27, i16 29, i16 47, i16 47, i16 54, i16 86, i16 65, i16 3, i16 86, i16 4, i16 35, i16 5, i16 6, i16 742, i16 50, i16 61, i16 61, i16 61, i16 61, i16 61, i16 61, i16 54, i16 77, i16 68, i16 66, i16 68, i16 16, i16 24, i16 66, i16 77, i16 70, i16 89, i16 89, i16 24, i16 70, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 25, i16 74, i16 74, i16 75, i16 82, i16 84, i16 75, i16 75, i16 81, i16 84, i16 81, i16 74, i16 81, i16 83, i16 84, i16 743, i16 83, i16 189, i16 87, i16 82, i16 83, i16 83, i16 87, i16 83, i16 85, i16 100, i16 83, i16 85, i16 85, i16 100, i16 94, i16 85, i16 83, i16 94, i16 189, i16 85, i16 25, i16 94, i16 25, i16 101, i16 220, i16 220, i16 25, i16 41, i16 41, i16 41, i16 41, i16 41, i16 91, i16 101, i16 91, i16 91, i16 91, i16 91, i16 93, i16 96, i16 118, i16 96, i16 93, i16 96, i16 96, i16 98, i16 96, i16 96, i16 197, i16 447, i16 197, i16 93, i16 98, i16 98, i16 118, i16 41, i16 41, i16 93, i16 41, i16 41, i16 41, i16 98, i16 179, i16 97, i16 205, i16 447, i16 179, i16 41, i16 202, i16 97, i16 202, i16 41, i16 217, i16 41, i16 97, i16 41, i16 120, i16 41, i16 45, i16 45, i16 45, i16 45, i16 45, i16 95, i16 205, i16 217, i16 120, i16 95, i16 230, i16 120, i16 95, i16 95, i16 230, i16 744, i16 95, i16 163, i16 163, i16 163, i16 163, i16 95, i16 95, i16 126, i16 126, i16 126, i16 126, i16 126, i16 45, i16 45, i16 745, i16 45, i16 45, i16 45, i16 139, i16 139, i16 139, i16 139, i16 139, i16 192, i16 45, i16 223, i16 238, i16 240, i16 45, i16 253, i16 45, i16 238, i16 45, i16 192, i16 45, i16 223, i16 240, i16 246, i16 248, i16 248, i16 489, i16 376, i16 246, i16 394, i16 747, i16 394, i16 253, i16 748, i16 248, i16 489, i16 749, i16 248, i16 376, i16 248, i16 281, i16 281, i16 281, i16 281, i16 281, i16 283, i16 283, i16 283, i16 283, i16 283, i16 399, i16 431, i16 431, i16 431, i16 431, i16 520, i16 520, i16 399, i16 399, i16 486, i16 750, i16 523, i16 753, i16 754, i16 755, i16 756, i16 757, i16 758, i16 759, i16 399, i16 523, i16 399, i16 399, i16 399, i16 760, i16 486, i16 761, i16 764, i16 765, i16 766, i16 767, i16 768, i16 769, i16 770, i16 771, i16 772, i16 773, i16 774, i16 775, i16 777, i16 780, i16 781, i16 782, i16 784, i16 785, i16 786, i16 787, i16 788, i16 789, i16 790, i16 792, i16 793, i16 794, i16 796, i16 797, i16 798, i16 799, i16 800, i16 802, i16 803, i16 807, i16 808, i16 809, i16 810, i16 811, i16 812, i16 815, i16 818, i16 819, i16 820, i16 824, i16 825, i16 826, i16 829, i16 830, i16 831, i16 833, i16 837, i16 838, i16 840, i16 844, i16 845, i16 846, i16 847, i16 848, i16 849, i16 851, i16 852, i16 853, i16 854, i16 855, i16 857, i16 858, i16 859, i16 863, i16 864, i16 865, i16 866, i16 867, i16 869, i16 870, i16 872, i16 873, i16 875, i16 876, i16 877, i16 879, i16 880, i16 881, i16 882, i16 883, i16 884, i16 885, i16 887, i16 892, i16 893, i16 894, i16 895, i16 901, i16 901, i16 901, i16 901, i16 901, i16 901, i16 901, i16 902, i16 902, i16 902, i16 902, i16 902, i16 902, i16 902, i16 903, i16 909, i16 910, i16 911, i16 912, i16 903, i16 903, i16 904, i16 904, i16 740, i16 904, i16 904, i16 904, i16 904, i16 905, i16 905, i16 737, i16 735, i16 905, i16 905, i16 906, i16 906, i16 734, i16 906, i16 906, i16 906, i16 906, i16 907, i16 907, i16 732, i16 907, i16 731, i16 907, i16 908, i16 908, i16 730, i16 908, i16 908, i16 908, i16 908, i16 729, i16 727, i16 723, i16 722, i16 721, i16 720, i16 719, i16 718, i16 717, i16 716, i16 715, i16 713, i16 712, i16 711, i16 710, i16 709, i16 708, i16 706, i16 705, i16 704, i16 703, i16 702, i16 701, i16 700, i16 699, i16 698, i16 697, i16 696, i16 695, i16 693, i16 691, i16 689, i16 687, i16 686, i16 683, i16 682, i16 679, i16 675, i16 674, i16 673, i16 672, i16 671, i16 670, i16 669, i16 666, i16 665, i16 664, i16 663, i16 662, i16 661, i16 659, i16 658, i16 657, i16 656, i16 655, i16 654, i16 653, i16 652, i16 651, i16 650, i16 649, i16 648, i16 646, i16 645, i16 644, i16 643, i16 642, i16 641, i16 640, i16 639, i16 638, i16 637, i16 635, i16 634, i16 633, i16 632, i16 630, i16 629, i16 628, i16 627, i16 626, i16 625, i16 624, i16 621, i16 620, i16 619, i16 618, i16 617, i16 615, i16 614, i16 613, i16 611, i16 610, i16 609, i16 607, i16 606, i16 604, i16 602, i16 601, i16 599, i16 598, i16 597, i16 594, i16 593, i16 590, i16 588, i16 587, i16 586, i16 584, i16 583, i16 582, i16 581, i16 579, i16 578, i16 577, i16 576, i16 575, i16 571, i16 570, i16 567, i16 566, i16 564, i16 563, i16 562, i16 559, i16 558, i16 553, i16 552, i16 551, i16 546, i16 545, i16 544, i16 542, i16 541, i16 539, i16 538, i16 537, i16 536, i16 535, i16 534, i16 533, i16 532, i16 530, i16 529, i16 528, i16 527, i16 526, i16 524, i16 522, i16 521, i16 519, i16 518, i16 517, i16 516, i16 515, i16 514, i16 513, i16 512, i16 511, i16 509, i16 508, i16 507, i16 506, i16 505, i16 504, i16 503, i16 502, i16 501, i16 500, i16 499, i16 498, i16 496, i16 494, i16 493, i16 492, i16 491, i16 490, i16 488, i16 487, i16 485, i16 484, i16 483, i16 482, i16 481, i16 479, i16 478, i16 477, i16 476, i16 475, i16 474, i16 473, i16 472, i16 471, i16 470, i16 469, i16 468, i16 467, i16 465, i16 462, i16 461, i16 459, i16 458, i16 457, i16 456, i16 454, i16 453, i16 452, i16 451, i16 450, i16 449, i16 448, i16 446, i16 445, i16 443, i16 442, i16 441, i16 440, i16 438, i16 437, i16 436, i16 434, i16 433, i16 432, i16 429, i16 428, i16 427, i16 426, i16 421, i16 420, i16 419, i16 418, i16 417, i16 416, i16 415, i16 414, i16 413, i16 412, i16 411, i16 410, i16 409, i16 408, i16 407, i16 405, i16 404, i16 402, i16 401, i16 398, i16 397, i16 396, i16 395, i16 392, i16 391, i16 389, i16 388, i16 387, i16 385, i16 384, i16 382, i16 381, i16 380, i16 379, i16 378, i16 375, i16 373, i16 372, i16 371, i16 370, i16 369, i16 368, i16 367, i16 365, i16 364, i16 362, i16 361, i16 360, i16 359, i16 358, i16 357, i16 356, i16 354, i16 353, i16 351, i16 350, i16 349, i16 348, i16 346, i16 345, i16 344, i16 343, i16 341, i16 340, i16 338, i16 337, i16 336, i16 335, i16 333, i16 332, i16 330, i16 329, i16 328, i16 327, i16 326, i16 325, i16 324, i16 323, i16 322, i16 321, i16 319, i16 318, i16 314, i16 313, i16 312, i16 311, i16 310, i16 309, i16 308, i16 306, i16 305, i16 304, i16 302, i16 301, i16 296, i16 295, i16 294, i16 293, i16 292, i16 291, i16 290, i16 289, i16 288, i16 287, i16 286, i16 285, i16 280, i16 279, i16 278, i16 277, i16 276, i16 275, i16 274, i16 273, i16 272, i16 271, i16 270, i16 269, i16 268, i16 266, i16 265, i16 264, i16 262, i16 261, i16 260, i16 259, i16 256, i16 255, i16 254, i16 252, i16 251, i16 250, i16 249, i16 247, i16 245, i16 244, i16 243, i16 242, i16 241, i16 239, i16 235, i16 234, i16 233, i16 232, i16 231, i16 228, i16 227, i16 226, i16 224, i16 222, i16 221, i16 219, i16 218, i16 216, i16 215, i16 214, i16 213, i16 212, i16 211, i16 210, i16 209, i16 208, i16 207, i16 206, i16 204, i16 203, i16 201, i16 200, i16 199, i16 198, i16 196, i16 195, i16 194, i16 193, i16 191, i16 188, i16 187, i16 186, i16 185, i16 184, i16 182, i16 180, i16 176, i16 175, i16 174, i16 173, i16 171, i16 170, i16 169, i16 168, i16 167, i16 166, i16 165, i16 164, i16 162, i16 161, i16 160, i16 159, i16 158, i16 157, i16 156, i16 155, i16 154, i16 153, i16 152, i16 151, i16 123, i16 122, i16 121, i16 119, i16 117, i16 115, i16 114, i16 113, i16 112, i16 111, i16 110, i16 109, i16 107, i16 106, i16 105, i16 104, i16 103, i16 102, i16 99, i16 92, i16 90, i16 88, i16 80, i16 79, i16 78, i16 76, i16 73, i16 72, i16 71, i16 69, i16 67, i16 64, i16 63, i16 62, i16 60, i16 59, i16 58, i16 57, i16 56, i16 55, i16 53, i16 52, i16 51, i16 49, i16 37, i16 36, i16 34, i16 33, i16 32, i16 30, i16 28, i16 26, i16 23, i16 21, i16 20, i16 19, i16 18, i16 14, i16 7, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900], align 16
@yy_def = internal constant [913 x i16] [i16 0, i16 900, i16 1, i16 901, i16 901, i16 902, i16 902, i16 900, i16 903, i16 900, i16 900, i16 900, i16 904, i16 900, i16 903, i16 900, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 900, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 905, i16 900, i16 900, i16 906, i16 907, i16 900, i16 900, i16 908, i16 903, i16 900, i16 904, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 905, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 909, i16 907, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 910, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 900, i16 911, i16 900, i16 912, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 900, i16 900, i16 900, i16 900, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 903, i16 0, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900], align 16
@yy_meta = internal constant [62 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 2, i32 2, i32 1, i32 5, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 7, i32 1, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1], align 16
@yy_nxt = internal constant [1075 x i16] [i16 0, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 16, i16 8, i16 17, i16 8, i16 8, i16 18, i16 19, i16 20, i16 8, i16 8, i16 8, i16 21, i16 8, i16 22, i16 23, i16 8, i16 8, i16 8, i16 24, i16 8, i16 25, i16 26, i16 27, i16 28, i16 29, i16 30, i16 8, i16 8, i16 31, i16 32, i16 8, i16 8, i16 8, i16 33, i16 8, i16 8, i16 34, i16 35, i16 8, i16 8, i16 36, i16 37, i16 8, i16 8, i16 8, i16 39, i16 40, i16 39, i16 40, i16 43, i16 43, i16 47, i16 47, i16 50, i16 44, i16 44, i16 47, i16 47, i16 52, i16 58, i16 109, i16 112, i16 53, i16 115, i16 59, i16 791, i16 120, i16 167, i16 116, i16 151, i16 110, i16 113, i16 47, i16 47, i16 156, i16 212, i16 168, i16 41, i16 213, i16 41, i16 121, i16 45, i16 45, i16 792, i16 152, i16 61, i16 61, i16 61, i16 61, i16 61, i16 61, i16 157, i16 187, i16 172, i16 169, i16 173, i16 51, i16 46, i16 170, i16 188, i16 175, i16 217, i16 218, i16 46, i16 176, i16 61, i16 61, i16 61, i16 61, i16 61, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 46, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 73, i16 74, i16 75, i16 76, i16 77, i16 78, i16 79, i16 80, i16 46, i16 46, i16 81, i16 82, i16 83, i16 84, i16 85, i16 86, i16 87, i16 88, i16 89, i16 90, i16 91, i16 92, i16 93, i16 94, i16 95, i16 46, i16 96, i16 97, i16 98, i16 99, i16 100, i16 101, i16 102, i16 46, i16 103, i16 104, i16 180, i16 181, i16 183, i16 195, i16 204, i16 184, i16 185, i16 192, i16 205, i16 193, i16 182, i16 194, i16 197, i16 206, i16 793, i16 198, i16 322, i16 214, i16 196, i16 199, i16 200, i16 215, i16 201, i16 207, i16 254, i16 202, i16 208, i16 209, i16 255, i16 230, i16 210, i16 203, i16 231, i16 323, i16 211, i16 105, i16 232, i16 106, i16 256, i16 358, i16 359, i16 107, i16 126, i16 126, i16 126, i16 126, i16 126, i16 220, i16 257, i16 221, i16 222, i16 223, i16 224, i16 226, i16 240, i16 272, i16 241, i16 227, i16 242, i16 243, i16 249, i16 244, i16 245, i16 331, i16 563, i16 332, i16 228, i16 250, i16 251, i16 273, i16 127, i16 128, i16 229, i16 129, i16 130, i16 131, i16 252, i16 313, i16 246, i16 341, i16 564, i16 314, i16 132, i16 337, i16 247, i16 338, i16 133, i16 354, i16 134, i16 248, i16 135, i16 275, i16 136, i16 139, i16 139, i16 139, i16 139, i16 139, i16 233, i16 342, i16 355, i16 276, i16 234, i16 368, i16 277, i16 235, i16 236, i16 369, i16 794, i16 237, i16 297, i16 298, i16 299, i16 300, i16 238, i16 239, i16 281, i16 281, i16 281, i16 281, i16 281, i16 140, i16 141, i16 795, i16 142, i16 143, i16 144, i16 283, i16 283, i16 283, i16 283, i16 283, i16 325, i16 145, i16 362, i16 375, i16 378, i16 146, i16 397, i16 147, i16 376, i16 148, i16 326, i16 149, i16 363, i16 379, i16 385, i16 388, i16 389, i16 601, i16 497, i16 386, i16 511, i16 796, i16 512, i16 398, i16 797, i16 390, i16 602, i16 798, i16 391, i16 498, i16 392, i16 422, i16 422, i16 422, i16 422, i16 422, i16 424, i16 424, i16 424, i16 424, i16 424, i16 517, i16 547, i16 548, i16 549, i16 550, i16 630, i16 631, i16 518, i16 519, i16 597, i16 799, i16 634, i16 800, i16 801, i16 802, i16 803, i16 804, i16 805, i16 806, i16 520, i16 635, i16 521, i16 522, i16 523, i16 807, i16 598, i16 808, i16 809, i16 810, i16 811, i16 812, i16 813, i16 814, i16 815, i16 816, i16 817, i16 818, i16 819, i16 820, i16 821, i16 822, i16 823, i16 824, i16 825, i16 826, i16 827, i16 828, i16 829, i16 830, i16 831, i16 832, i16 833, i16 834, i16 835, i16 836, i16 837, i16 838, i16 839, i16 840, i16 841, i16 842, i16 843, i16 844, i16 845, i16 846, i16 847, i16 848, i16 849, i16 850, i16 851, i16 852, i16 853, i16 854, i16 855, i16 856, i16 857, i16 858, i16 859, i16 860, i16 861, i16 862, i16 863, i16 864, i16 865, i16 866, i16 867, i16 868, i16 869, i16 870, i16 871, i16 872, i16 873, i16 874, i16 875, i16 876, i16 877, i16 878, i16 879, i16 880, i16 881, i16 882, i16 883, i16 884, i16 885, i16 886, i16 887, i16 888, i16 889, i16 890, i16 891, i16 892, i16 893, i16 894, i16 895, i16 896, i16 897, i16 898, i16 899, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 42, i16 42, i16 42, i16 42, i16 42, i16 42, i16 42, i16 46, i16 282, i16 284, i16 423, i16 425, i16 46, i16 46, i16 48, i16 48, i16 790, i16 48, i16 48, i16 48, i16 48, i16 124, i16 124, i16 789, i16 788, i16 124, i16 124, i16 125, i16 125, i16 787, i16 125, i16 125, i16 125, i16 125, i16 137, i16 137, i16 786, i16 137, i16 785, i16 137, i16 138, i16 138, i16 784, i16 138, i16 138, i16 138, i16 138, i16 783, i16 782, i16 781, i16 780, i16 779, i16 778, i16 777, i16 776, i16 775, i16 774, i16 773, i16 772, i16 771, i16 770, i16 769, i16 768, i16 767, i16 766, i16 765, i16 764, i16 763, i16 762, i16 761, i16 760, i16 759, i16 758, i16 757, i16 756, i16 755, i16 754, i16 753, i16 752, i16 751, i16 750, i16 749, i16 748, i16 747, i16 746, i16 745, i16 744, i16 743, i16 742, i16 741, i16 740, i16 739, i16 738, i16 737, i16 736, i16 735, i16 734, i16 733, i16 732, i16 731, i16 730, i16 729, i16 728, i16 727, i16 726, i16 725, i16 724, i16 723, i16 722, i16 721, i16 720, i16 719, i16 718, i16 717, i16 716, i16 715, i16 714, i16 713, i16 712, i16 711, i16 710, i16 709, i16 708, i16 707, i16 706, i16 705, i16 704, i16 703, i16 702, i16 701, i16 700, i16 699, i16 698, i16 697, i16 696, i16 695, i16 694, i16 693, i16 692, i16 691, i16 690, i16 689, i16 688, i16 687, i16 686, i16 685, i16 684, i16 683, i16 682, i16 681, i16 680, i16 679, i16 678, i16 677, i16 676, i16 675, i16 674, i16 673, i16 672, i16 671, i16 670, i16 669, i16 668, i16 667, i16 666, i16 665, i16 664, i16 663, i16 662, i16 661, i16 660, i16 659, i16 658, i16 657, i16 656, i16 655, i16 654, i16 653, i16 652, i16 651, i16 650, i16 649, i16 648, i16 647, i16 646, i16 645, i16 644, i16 643, i16 642, i16 641, i16 640, i16 639, i16 638, i16 637, i16 636, i16 633, i16 632, i16 629, i16 628, i16 627, i16 626, i16 625, i16 624, i16 623, i16 622, i16 621, i16 620, i16 619, i16 618, i16 617, i16 616, i16 615, i16 614, i16 613, i16 612, i16 611, i16 610, i16 609, i16 608, i16 607, i16 606, i16 605, i16 604, i16 603, i16 600, i16 599, i16 596, i16 595, i16 594, i16 593, i16 592, i16 591, i16 590, i16 589, i16 588, i16 587, i16 586, i16 585, i16 584, i16 583, i16 582, i16 581, i16 580, i16 579, i16 578, i16 577, i16 576, i16 575, i16 574, i16 573, i16 572, i16 571, i16 570, i16 569, i16 568, i16 567, i16 566, i16 565, i16 562, i16 561, i16 560, i16 559, i16 558, i16 557, i16 556, i16 555, i16 554, i16 553, i16 552, i16 551, i16 546, i16 545, i16 544, i16 543, i16 542, i16 541, i16 540, i16 539, i16 538, i16 537, i16 536, i16 535, i16 534, i16 533, i16 532, i16 531, i16 530, i16 529, i16 528, i16 527, i16 526, i16 525, i16 524, i16 516, i16 515, i16 514, i16 513, i16 510, i16 509, i16 508, i16 507, i16 506, i16 505, i16 504, i16 503, i16 502, i16 501, i16 500, i16 499, i16 496, i16 495, i16 494, i16 493, i16 492, i16 491, i16 490, i16 489, i16 488, i16 487, i16 486, i16 485, i16 484, i16 483, i16 482, i16 481, i16 480, i16 479, i16 478, i16 477, i16 476, i16 475, i16 474, i16 473, i16 472, i16 471, i16 470, i16 469, i16 468, i16 467, i16 466, i16 465, i16 464, i16 463, i16 462, i16 461, i16 460, i16 459, i16 458, i16 457, i16 456, i16 455, i16 454, i16 453, i16 452, i16 451, i16 450, i16 449, i16 448, i16 447, i16 446, i16 445, i16 444, i16 443, i16 442, i16 441, i16 440, i16 439, i16 438, i16 437, i16 436, i16 435, i16 434, i16 433, i16 432, i16 431, i16 430, i16 429, i16 428, i16 427, i16 426, i16 421, i16 420, i16 419, i16 418, i16 417, i16 416, i16 415, i16 414, i16 413, i16 412, i16 411, i16 410, i16 409, i16 408, i16 407, i16 406, i16 405, i16 404, i16 403, i16 402, i16 401, i16 400, i16 399, i16 396, i16 395, i16 394, i16 393, i16 387, i16 384, i16 383, i16 382, i16 381, i16 380, i16 377, i16 374, i16 373, i16 372, i16 371, i16 370, i16 367, i16 366, i16 365, i16 364, i16 361, i16 360, i16 357, i16 356, i16 353, i16 352, i16 351, i16 350, i16 349, i16 348, i16 347, i16 346, i16 345, i16 344, i16 343, i16 340, i16 339, i16 336, i16 335, i16 334, i16 333, i16 330, i16 329, i16 328, i16 327, i16 324, i16 321, i16 320, i16 319, i16 318, i16 317, i16 316, i16 315, i16 312, i16 311, i16 310, i16 309, i16 308, i16 307, i16 306, i16 305, i16 304, i16 303, i16 302, i16 301, i16 296, i16 295, i16 294, i16 293, i16 292, i16 291, i16 290, i16 289, i16 288, i16 287, i16 286, i16 285, i16 280, i16 279, i16 278, i16 274, i16 271, i16 270, i16 269, i16 268, i16 267, i16 266, i16 265, i16 264, i16 263, i16 262, i16 261, i16 260, i16 259, i16 258, i16 253, i16 225, i16 219, i16 216, i16 191, i16 190, i16 189, i16 186, i16 179, i16 178, i16 177, i16 174, i16 171, i16 166, i16 165, i16 164, i16 163, i16 162, i16 161, i16 160, i16 159, i16 158, i16 155, i16 154, i16 153, i16 150, i16 123, i16 122, i16 119, i16 118, i16 117, i16 114, i16 111, i16 108, i16 60, i16 57, i16 56, i16 55, i16 54, i16 49, i16 900, i16 7, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900, i16 900], align 16
@sshtext = common global i8* null, align 8
@sshleng = common global i32 0, align 4
@yy_rule_can_match_eol = internal constant [218 x i32] [i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0], align 16
@.str = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@sshlval = external global %union.YYSTYPE, align 8
@.str.1 = private unnamed_addr constant [2 x i8] c"$\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"@\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"B\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"D\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"E\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"F\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"G\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"H\00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"I\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"J\00", align 1
@.str.14 = private unnamed_addr constant [2 x i8] c"K\00", align 1
@.str.15 = private unnamed_addr constant [2 x i8] c"L\00", align 1
@.str.16 = private unnamed_addr constant [2 x i8] c"M\00", align 1
@.str.17 = private unnamed_addr constant [2 x i8] c"N\00", align 1
@.str.18 = private unnamed_addr constant [2 x i8] c"O\00", align 1
@.str.19 = private unnamed_addr constant [2 x i8] c"P\00", align 1
@.str.20 = private unnamed_addr constant [2 x i8] c"Q\00", align 1
@.str.21 = private unnamed_addr constant [2 x i8] c"R\00", align 1
@.str.22 = private unnamed_addr constant [2 x i8] c"S\00", align 1
@.str.23 = private unnamed_addr constant [2 x i8] c"T\00", align 1
@.str.24 = private unnamed_addr constant [2 x i8] c"U\00", align 1
@.str.25 = private unnamed_addr constant [2 x i8] c"V\00", align 1
@.str.26 = private unnamed_addr constant [2 x i8] c"W\00", align 1
@.str.27 = private unnamed_addr constant [2 x i8] c"X\00", align 1
@.str.28 = private unnamed_addr constant [2 x i8] c"Y\00", align 1
@.str.29 = private unnamed_addr constant [2 x i8] c"Z\00", align 1
@.str.30 = private unnamed_addr constant [2 x i8] c"\5C\00", align 1
@.str.31 = private unnamed_addr constant [2 x i8] c"^\00", align 1
@.str.32 = private unnamed_addr constant [2 x i8] c"`\00", align 1
@.str.33 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.34 = private unnamed_addr constant [2 x i8] c"b\00", align 1
@.str.35 = private unnamed_addr constant [2 x i8] c"c\00", align 1
@.str.36 = private unnamed_addr constant [2 x i8] c"d\00", align 1
@.str.37 = private unnamed_addr constant [2 x i8] c"e\00", align 1
@.str.38 = private unnamed_addr constant [2 x i8] c"f\00", align 1
@.str.39 = private unnamed_addr constant [2 x i8] c"g\00", align 1
@.str.40 = private unnamed_addr constant [2 x i8] c"h\00", align 1
@.str.41 = private unnamed_addr constant [2 x i8] c"i\00", align 1
@.str.42 = private unnamed_addr constant [2 x i8] c"j\00", align 1
@.str.43 = private unnamed_addr constant [2 x i8] c"k\00", align 1
@.str.44 = private unnamed_addr constant [2 x i8] c"l\00", align 1
@.str.45 = private unnamed_addr constant [2 x i8] c"m\00", align 1
@.str.46 = private unnamed_addr constant [2 x i8] c"n\00", align 1
@.str.47 = private unnamed_addr constant [2 x i8] c"o\00", align 1
@.str.48 = private unnamed_addr constant [2 x i8] c"p\00", align 1
@.str.49 = private unnamed_addr constant [2 x i8] c"q\00", align 1
@.str.50 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.51 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str.52 = private unnamed_addr constant [2 x i8] c"t\00", align 1
@.str.53 = private unnamed_addr constant [2 x i8] c"u\00", align 1
@.str.54 = private unnamed_addr constant [2 x i8] c"v\00", align 1
@.str.55 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.56 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.57 = private unnamed_addr constant [2 x i8] c"y\00", align 1
@.str.58 = private unnamed_addr constant [2 x i8] c"z\00", align 1
@.str.59 = private unnamed_addr constant [2 x i8] c"~\00", align 1
@.str.60 = private unnamed_addr constant [2 x i8] c"\A1\00", align 1
@.str.61 = private unnamed_addr constant [2 x i8] c"\A2\00", align 1
@.str.62 = private unnamed_addr constant [2 x i8] c"\A3\00", align 1
@.str.63 = private unnamed_addr constant [2 x i8] c"\A5\00", align 1
@.str.64 = private unnamed_addr constant [2 x i8] c"\A6\00", align 1
@.str.65 = private unnamed_addr constant [2 x i8] c"\A7\00", align 1
@.str.66 = private unnamed_addr constant [2 x i8] c"\A8\00", align 1
@.str.67 = private unnamed_addr constant [2 x i8] c"\A9\00", align 1
@.str.68 = private unnamed_addr constant [2 x i8] c"\AA\00", align 1
@.str.69 = private unnamed_addr constant [2 x i8] c"\AB\00", align 1
@.str.70 = private unnamed_addr constant [2 x i8] c"\AC\00", align 1
@.str.71 = private unnamed_addr constant [2 x i8] c"\AD\00", align 1
@.str.72 = private unnamed_addr constant [2 x i8] c"\AE\00", align 1
@.str.73 = private unnamed_addr constant [2 x i8] c"\AF\00", align 1
@.str.74 = private unnamed_addr constant [2 x i8] c"\B0\00", align 1
@.str.75 = private unnamed_addr constant [2 x i8] c"\B1\00", align 1
@.str.76 = private unnamed_addr constant [2 x i8] c"\B3\00", align 1
@.str.77 = private unnamed_addr constant [2 x i8] c"\B4\00", align 1
@.str.78 = private unnamed_addr constant [2 x i8] c"\B5\00", align 1
@.str.79 = private unnamed_addr constant [2 x i8] c"\B6\00", align 1
@.str.80 = private unnamed_addr constant [2 x i8] c"\B7\00", align 1
@.str.81 = private unnamed_addr constant [2 x i8] c"\B8\00", align 1
@.str.82 = private unnamed_addr constant [2 x i8] c"\B9\00", align 1
@.str.83 = private unnamed_addr constant [2 x i8] c"\BA\00", align 1
@.str.84 = private unnamed_addr constant [2 x i8] c"\BB\00", align 1
@.str.85 = private unnamed_addr constant [2 x i8] c"\BC\00", align 1
@.str.86 = private unnamed_addr constant [2 x i8] c"\BE\00", align 1
@.str.87 = private unnamed_addr constant [2 x i8] c"\BF\00", align 1
@.str.88 = private unnamed_addr constant [2 x i8] c"\C0\00", align 1
@.str.89 = private unnamed_addr constant [2 x i8] c"\C1\00", align 1
@.str.90 = private unnamed_addr constant [2 x i8] c"\C2\00", align 1
@.str.91 = private unnamed_addr constant [2 x i8] c"\C3\00", align 1
@.str.92 = private unnamed_addr constant [2 x i8] c"\C4\00", align 1
@.str.93 = private unnamed_addr constant [2 x i8] c"\C5\00", align 1
@.str.94 = private unnamed_addr constant [2 x i8] c"\C6\00", align 1
@.str.95 = private unnamed_addr constant [2 x i8] c"\C7\00", align 1
@.str.96 = private unnamed_addr constant [2 x i8] c"\C8\00", align 1
@.str.97 = private unnamed_addr constant [2 x i8] c"\C9\00", align 1
@.str.98 = private unnamed_addr constant [2 x i8] c"\CA\00", align 1
@.str.99 = private unnamed_addr constant [2 x i8] c"\CB\00", align 1
@.str.100 = private unnamed_addr constant [2 x i8] c"\CC\00", align 1
@.str.101 = private unnamed_addr constant [2 x i8] c"\CD\00", align 1
@.str.102 = private unnamed_addr constant [2 x i8] c"\CE\00", align 1
@.str.103 = private unnamed_addr constant [2 x i8] c"\CF\00", align 1
@.str.104 = private unnamed_addr constant [2 x i8] c"\D0\00", align 1
@.str.105 = private unnamed_addr constant [2 x i8] c"\D1\00", align 1
@.str.106 = private unnamed_addr constant [2 x i8] c"\D2\00", align 1
@.str.107 = private unnamed_addr constant [2 x i8] c"\D4\00", align 1
@.str.108 = private unnamed_addr constant [2 x i8] c"\D5\00", align 1
@.str.109 = private unnamed_addr constant [2 x i8] c"\D6\00", align 1
@.str.110 = private unnamed_addr constant [2 x i8] c"\D7\00", align 1
@.str.111 = private unnamed_addr constant [2 x i8] c"\D8\00", align 1
@.str.112 = private unnamed_addr constant [2 x i8] c"\D9\00", align 1
@.str.113 = private unnamed_addr constant [2 x i8] c"\DA\00", align 1
@.str.114 = private unnamed_addr constant [2 x i8] c"\DB\00", align 1
@.str.115 = private unnamed_addr constant [2 x i8] c"\DC\00", align 1
@.str.116 = private unnamed_addr constant [2 x i8] c"\DD\00", align 1
@.str.117 = private unnamed_addr constant [2 x i8] c"\DE\00", align 1
@.str.118 = private unnamed_addr constant [2 x i8] c"\DF\00", align 1
@.str.119 = private unnamed_addr constant [2 x i8] c"\E0\00", align 1
@.str.120 = private unnamed_addr constant [2 x i8] c"\E1\00", align 1
@.str.121 = private unnamed_addr constant [2 x i8] c"\E2\00", align 1
@.str.122 = private unnamed_addr constant [2 x i8] c"\E4\00", align 1
@.str.123 = private unnamed_addr constant [2 x i8] c"\E5\00", align 1
@.str.124 = private unnamed_addr constant [2 x i8] c"\E9\00", align 1
@.str.125 = private unnamed_addr constant [2 x i8] c"\EB\00", align 1
@.str.126 = private unnamed_addr constant [2 x i8] c"\F1\00", align 1
@.str.127 = private unnamed_addr constant [2 x i8] c"\F2\00", align 1
@.str.128 = private unnamed_addr constant [2 x i8] c"\F9\00", align 1
@.str.129 = private unnamed_addr constant [2 x i8] c"\FB\00", align 1
@strip_level = external global i32, align 4
@string_stack = internal global %struct.obstack zeroinitializer, align 8
@.str.130 = private unnamed_addr constant [31 x i8] c"end-of-line in string constant\00", align 1
@sshfilename = common global i8* null, align 8
@.str.131 = private unnamed_addr constant [24 x i8] c"end of line inside a %s\00", align 1
@.str.132 = private unnamed_addr constant [5 x i8] c"\22..\22\00", align 1
@yy_n_chars = internal global i32 0, align 4
@yy_did_buffer_switch_on_eof = internal global i32 0, align 4
@.str.133 = private unnamed_addr constant [51 x i8] c"fatal flex scanner internal error--no action found\00", align 1
@.str.134 = private unnamed_addr constant [45 x i8] c"out of dynamic memory in ssh_create_buffer()\00", align 1
@.str.135 = private unnamed_addr constant [43 x i8] c"out of dynamic memory in ssh_scan_buffer()\00", align 1
@.str.136 = private unnamed_addr constant [42 x i8] c"out of dynamic memory in ssh_scan_bytes()\00", align 1
@.str.137 = private unnamed_addr constant [31 x i8] c"bad buffer in ssh_scan_bytes()\00", align 1
@sshlex_initialize.first_time = internal global i32 1, align 4
@.str.138 = private unnamed_addr constant [56 x i8] c"fatal flex scanner internal error--end of buffer missed\00", align 1
@.str.139 = private unnamed_addr constant [44 x i8] c"fatal error - scanner input buffer overflow\00", align 1
@.str.140 = private unnamed_addr constant [29 x i8] c"input in flex scanner failed\00", align 1
@yy_buffer_stack_max = internal global i64 0, align 8
@stderr = external global %struct._IO_FILE*, align 8
@.str.141 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @sshlex() #0 {
entry:
  %retval = alloca i32, align 4
  %yy_current_state = alloca i32, align 4
  %yy_cp = alloca i8*, align 8
  %yy_bp = alloca i8*, align 8
  %yy_act = alloca i32, align 4
  %yy_c = alloca i8, align 1
  %yyl = alloca i32, align 4
  %value = alloca i32, align 4
  %cursor = alloca i8*, align 8
  %string = alloca i8*, align 8
  %__o = alloca %struct.obstack*, align 8
  %__o1 = alloca %struct.obstack*, align 8
  %value435 = alloca i8*, align 8
  %tmp = alloca i8*, align 8
  %__o468 = alloca %struct.obstack*, align 8
  %__obj = alloca i8*, align 8
  %value485 = alloca i32, align 4
  %cursor490 = alloca i8*, align 8
  %__o502 = alloca %struct.obstack*, align 8
  %value515 = alloca i32, align 4
  %cursor517 = alloca i8*, align 8
  %__o561 = alloca %struct.obstack*, align 8
  %__o574 = alloca %struct.obstack*, align 8
  %__o586 = alloca %struct.obstack*, align 8
  %__o598 = alloca %struct.obstack*, align 8
  %__o610 = alloca %struct.obstack*, align 8
  %__o622 = alloca %struct.obstack*, align 8
  %__o634 = alloca %struct.obstack*, align 8
  %__o646 = alloca %struct.obstack*, align 8
  %__o658 = alloca %struct.obstack*, align 8
  %__o670 = alloca %struct.obstack*, align 8
  %__o682 = alloca %struct.obstack*, align 8
  %__o697 = alloca %struct.obstack*, align 8
  %__len = alloca i32, align 4
  %pattern = alloca i8*, align 8
  %pattern_len = alloca i32, align 4
  %__o715 = alloca %struct.obstack*, align 8
  %__o726 = alloca %struct.obstack*, align 8
  %tmp727 = alloca i32, align 4
  %__o1735 = alloca %struct.obstack*, align 8
  %value737 = alloca i8*, align 8
  %tmp778 = alloca i8*, align 8
  %__o780 = alloca %struct.obstack*, align 8
  %__obj782 = alloca i8*, align 8
  %value806 = alloca i32, align 4
  %cursor811 = alloca i8*, align 8
  %__o823 = alloca %struct.obstack*, align 8
  %value836 = alloca i32, align 4
  %cursor838 = alloca i8*, align 8
  %__o882 = alloca %struct.obstack*, align 8
  %__o895 = alloca %struct.obstack*, align 8
  %__o907 = alloca %struct.obstack*, align 8
  %__o919 = alloca %struct.obstack*, align 8
  %__o931 = alloca %struct.obstack*, align 8
  %__o943 = alloca %struct.obstack*, align 8
  %__o955 = alloca %struct.obstack*, align 8
  %__o967 = alloca %struct.obstack*, align 8
  %__o979 = alloca %struct.obstack*, align 8
  %__o991 = alloca %struct.obstack*, align 8
  %__o1003 = alloca %struct.obstack*, align 8
  %__o1018 = alloca %struct.obstack*, align 8
  %__len1020 = alloca i32, align 4
  %yy_amount_of_matched_text = alloca i32, align 4
  %yy_next_state = alloca i32, align 4
  %0 = load i32, i32* @yy_init, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end.14, label %if.then

if.then:                                          ; preds = %entry
  store i32 1, i32* @yy_init, align 4
  %1 = load i32, i32* @yy_start, align 4
  %tobool1 = icmp ne i32 %1, 0
  br i1 %tobool1, label %if.end, label %if.then.2

if.then.2:                                        ; preds = %if.then
  store i32 1, i32* @yy_start, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.2, %if.then
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @sshin, align 8
  %tobool3 = icmp ne %struct._IO_FILE* %2, null
  br i1 %tobool3, label %if.end.5, label %if.then.4

if.then.4:                                        ; preds = %if.end
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  store %struct._IO_FILE* %3, %struct._IO_FILE** @sshin, align 8
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.4, %if.end
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @sshout, align 8
  %tobool6 = icmp ne %struct._IO_FILE* %4, null
  br i1 %tobool6, label %if.end.8, label %if.then.7

if.then.7:                                        ; preds = %if.end.5
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  store %struct._IO_FILE* %5, %struct._IO_FILE** @sshout, align 8
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.7, %if.end.5
  %6 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %tobool9 = icmp ne %struct.yy_buffer_state** %6, null
  br i1 %tobool9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.8
  %7 = load i64, i64* @yy_buffer_stack_top, align 8
  %8 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %8, i64 %7
  %9 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx, align 8
  %tobool10 = icmp ne %struct.yy_buffer_state* %9, null
  br i1 %tobool10, label %if.end.13, label %if.then.11

cond.false:                                       ; preds = %if.end.8
  br i1 false, label %if.end.13, label %if.then.11

if.then.11:                                       ; preds = %cond.false, %cond.true
  call void @sshensure_buffer_stack()
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @sshin, align 8
  %call = call %struct.yy_buffer_state* @ssh_create_buffer(%struct._IO_FILE* %10, i32 16384)
  %11 = load i64, i64* @yy_buffer_stack_top, align 8
  %12 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx12 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %12, i64 %11
  store %struct.yy_buffer_state* %call, %struct.yy_buffer_state** %arrayidx12, align 8
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.11, %cond.false, %cond.true
  call void @ssh_load_buffer_state()
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.13, %entry
  br label %while.body

while.body:                                       ; preds = %if.end.14, %sw.epilog.1098
  %13 = load i8*, i8** @yy_c_buf_p, align 8
  store i8* %13, i8** %yy_cp, align 8
  %14 = load i8, i8* @yy_hold_char, align 1
  %15 = load i8*, i8** %yy_cp, align 8
  store i8 %14, i8* %15, align 1
  %16 = load i8*, i8** %yy_cp, align 8
  store i8* %16, i8** %yy_bp, align 8
  %17 = load i32, i32* @yy_start, align 4
  store i32 %17, i32* %yy_current_state, align 4
  br label %yy_match

yy_match:                                         ; preds = %sw.bb.1085, %if.then.1067, %while.body
  br label %do.body

do.body:                                          ; preds = %do.cond, %yy_match
  %18 = load i8*, i8** %yy_cp, align 8
  %19 = load i8, i8* %18, align 1
  %conv = zext i8 %19 to i32
  %idxprom = zext i32 %conv to i64
  %arrayidx15 = getelementptr inbounds [256 x i32], [256 x i32]* @yy_ec, i32 0, i64 %idxprom
  %20 = load i32, i32* %arrayidx15, align 4
  %conv16 = trunc i32 %20 to i8
  store i8 %conv16, i8* %yy_c, align 1
  %21 = load i32, i32* %yy_current_state, align 4
  %idxprom17 = sext i32 %21 to i64
  %arrayidx18 = getelementptr inbounds [901 x i16], [901 x i16]* @yy_accept, i32 0, i64 %idxprom17
  %22 = load i16, i16* %arrayidx18, align 2
  %tobool19 = icmp ne i16 %22, 0
  br i1 %tobool19, label %if.then.20, label %if.end.21

if.then.20:                                       ; preds = %do.body
  %23 = load i32, i32* %yy_current_state, align 4
  store i32 %23, i32* @yy_last_accepting_state, align 4
  %24 = load i8*, i8** %yy_cp, align 8
  store i8* %24, i8** @yy_last_accepting_cpos, align 8
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.20, %do.body
  br label %while.cond.22

while.cond.22:                                    ; preds = %if.end.42, %if.end.21
  %25 = load i32, i32* %yy_current_state, align 4
  %idxprom23 = sext i32 %25 to i64
  %arrayidx24 = getelementptr inbounds [913 x i16], [913 x i16]* @yy_base, i32 0, i64 %idxprom23
  %26 = load i16, i16* %arrayidx24, align 2
  %conv25 = sext i16 %26 to i32
  %27 = load i8, i8* %yy_c, align 1
  %conv26 = zext i8 %27 to i32
  %add = add nsw i32 %conv25, %conv26
  %idxprom27 = sext i32 %add to i64
  %arrayidx28 = getelementptr inbounds [1075 x i16], [1075 x i16]* @yy_chk, i32 0, i64 %idxprom27
  %28 = load i16, i16* %arrayidx28, align 2
  %conv29 = sext i16 %28 to i32
  %29 = load i32, i32* %yy_current_state, align 4
  %cmp = icmp ne i32 %conv29, %29
  br i1 %cmp, label %while.body.31, label %while.end

while.body.31:                                    ; preds = %while.cond.22
  %30 = load i32, i32* %yy_current_state, align 4
  %idxprom32 = sext i32 %30 to i64
  %arrayidx33 = getelementptr inbounds [913 x i16], [913 x i16]* @yy_def, i32 0, i64 %idxprom32
  %31 = load i16, i16* %arrayidx33, align 2
  %conv34 = sext i16 %31 to i32
  store i32 %conv34, i32* %yy_current_state, align 4
  %32 = load i32, i32* %yy_current_state, align 4
  %cmp35 = icmp sge i32 %32, 901
  br i1 %cmp35, label %if.then.37, label %if.end.42

if.then.37:                                       ; preds = %while.body.31
  %33 = load i8, i8* %yy_c, align 1
  %conv38 = zext i8 %33 to i32
  %idxprom39 = zext i32 %conv38 to i64
  %arrayidx40 = getelementptr inbounds [62 x i32], [62 x i32]* @yy_meta, i32 0, i64 %idxprom39
  %34 = load i32, i32* %arrayidx40, align 4
  %conv41 = trunc i32 %34 to i8
  store i8 %conv41, i8* %yy_c, align 1
  br label %if.end.42

if.end.42:                                        ; preds = %if.then.37, %while.body.31
  br label %while.cond.22

while.end:                                        ; preds = %while.cond.22
  %35 = load i32, i32* %yy_current_state, align 4
  %idxprom43 = sext i32 %35 to i64
  %arrayidx44 = getelementptr inbounds [913 x i16], [913 x i16]* @yy_base, i32 0, i64 %idxprom43
  %36 = load i16, i16* %arrayidx44, align 2
  %conv45 = sext i16 %36 to i32
  %37 = load i8, i8* %yy_c, align 1
  %conv46 = zext i8 %37 to i32
  %add47 = add i32 %conv45, %conv46
  %idxprom48 = zext i32 %add47 to i64
  %arrayidx49 = getelementptr inbounds [1075 x i16], [1075 x i16]* @yy_nxt, i32 0, i64 %idxprom48
  %38 = load i16, i16* %arrayidx49, align 2
  %conv50 = sext i16 %38 to i32
  store i32 %conv50, i32* %yy_current_state, align 4
  %39 = load i8*, i8** %yy_cp, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %39, i32 1
  store i8* %incdec.ptr, i8** %yy_cp, align 8
  br label %do.cond

do.cond:                                          ; preds = %while.end
  %40 = load i32, i32* %yy_current_state, align 4
  %idxprom51 = sext i32 %40 to i64
  %arrayidx52 = getelementptr inbounds [913 x i16], [913 x i16]* @yy_base, i32 0, i64 %idxprom51
  %41 = load i16, i16* %arrayidx52, align 2
  %conv53 = sext i16 %41 to i32
  %cmp54 = icmp ne i32 %conv53, 1013
  br i1 %cmp54, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %yy_find_action

yy_find_action:                                   ; preds = %sw.bb.1090, %if.else.1069, %sw.bb, %do.end
  %42 = load i32, i32* %yy_current_state, align 4
  %idxprom56 = sext i32 %42 to i64
  %arrayidx57 = getelementptr inbounds [901 x i16], [901 x i16]* @yy_accept, i32 0, i64 %idxprom56
  %43 = load i16, i16* %arrayidx57, align 2
  %conv58 = sext i16 %43 to i32
  store i32 %conv58, i32* %yy_act, align 4
  %44 = load i32, i32* %yy_act, align 4
  %cmp59 = icmp eq i32 %44, 0
  br i1 %cmp59, label %if.then.61, label %if.end.65

if.then.61:                                       ; preds = %yy_find_action
  %45 = load i8*, i8** @yy_last_accepting_cpos, align 8
  store i8* %45, i8** %yy_cp, align 8
  %46 = load i32, i32* @yy_last_accepting_state, align 4
  store i32 %46, i32* %yy_current_state, align 4
  %47 = load i32, i32* %yy_current_state, align 4
  %idxprom62 = sext i32 %47 to i64
  %arrayidx63 = getelementptr inbounds [901 x i16], [901 x i16]* @yy_accept, i32 0, i64 %idxprom62
  %48 = load i16, i16* %arrayidx63, align 2
  %conv64 = sext i16 %48 to i32
  store i32 %conv64, i32* %yy_act, align 4
  br label %if.end.65

if.end.65:                                        ; preds = %if.then.61, %yy_find_action
  %49 = load i8*, i8** %yy_bp, align 8
  store i8* %49, i8** @sshtext, align 8
  %50 = load i8*, i8** %yy_cp, align 8
  %51 = load i8*, i8** %yy_bp, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %50 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %51 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv66 = trunc i64 %sub.ptr.sub to i32
  store i32 %conv66, i32* @sshleng, align 4
  %52 = load i8*, i8** %yy_cp, align 8
  %53 = load i8, i8* %52, align 1
  store i8 %53, i8* @yy_hold_char, align 1
  %54 = load i8*, i8** %yy_cp, align 8
  store i8 0, i8* %54, align 1
  %55 = load i8*, i8** %yy_cp, align 8
  store i8* %55, i8** @yy_c_buf_p, align 8
  %56 = load i32, i32* %yy_act, align 4
  %cmp67 = icmp ne i32 %56, 218
  br i1 %cmp67, label %land.lhs.true, label %if.end.83

land.lhs.true:                                    ; preds = %if.end.65
  %57 = load i32, i32* %yy_act, align 4
  %idxprom69 = sext i32 %57 to i64
  %arrayidx70 = getelementptr inbounds [218 x i32], [218 x i32]* @yy_rule_can_match_eol, i32 0, i64 %idxprom69
  %58 = load i32, i32* %arrayidx70, align 4
  %tobool71 = icmp ne i32 %58, 0
  br i1 %tobool71, label %if.then.72, label %if.end.83

if.then.72:                                       ; preds = %land.lhs.true
  store i32 0, i32* %yyl, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.72
  %59 = load i32, i32* %yyl, align 4
  %60 = load i32, i32* @sshleng, align 4
  %cmp73 = icmp slt i32 %59, %60
  br i1 %cmp73, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %61 = load i32, i32* %yyl, align 4
  %idxprom75 = sext i32 %61 to i64
  %62 = load i8*, i8** @sshtext, align 8
  %arrayidx76 = getelementptr inbounds i8, i8* %62, i64 %idxprom75
  %63 = load i8, i8* %arrayidx76, align 1
  %conv77 = sext i8 %63 to i32
  %cmp78 = icmp eq i32 %conv77, 10
  br i1 %cmp78, label %if.then.80, label %if.end.81

if.then.80:                                       ; preds = %for.body
  %64 = load i32, i32* @sshlineno, align 4
  %inc = add nsw i32 %64, 1
  store i32 %inc, i32* @sshlineno, align 4
  br label %if.end.81

if.end.81:                                        ; preds = %if.then.80, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.81
  %65 = load i32, i32* %yyl, align 4
  %inc82 = add nsw i32 %65, 1
  store i32 %inc82, i32* %yyl, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.83

if.end.83:                                        ; preds = %for.end, %land.lhs.true, %if.end.65
  br label %do_action

do_action:                                        ; preds = %if.then.1075, %if.end.83
  %66 = load i32, i32* %yy_act, align 4
  switch i32 %66, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.84
    i32 2, label %sw.bb.85
    i32 3, label %sw.bb.86
    i32 4, label %sw.bb.87
    i32 5, label %sw.bb.88
    i32 6, label %sw.bb.90
    i32 7, label %sw.bb.92
    i32 8, label %sw.bb.94
    i32 9, label %sw.bb.96
    i32 10, label %sw.bb.98
    i32 11, label %sw.bb.100
    i32 12, label %sw.bb.102
    i32 13, label %sw.bb.104
    i32 14, label %sw.bb.106
    i32 15, label %sw.bb.108
    i32 16, label %sw.bb.110
    i32 17, label %sw.bb.112
    i32 18, label %sw.bb.114
    i32 19, label %sw.bb.116
    i32 20, label %sw.bb.118
    i32 21, label %sw.bb.120
    i32 22, label %sw.bb.122
    i32 23, label %sw.bb.124
    i32 24, label %sw.bb.126
    i32 25, label %sw.bb.128
    i32 26, label %sw.bb.130
    i32 27, label %sw.bb.132
    i32 28, label %sw.bb.134
    i32 29, label %sw.bb.136
    i32 30, label %sw.bb.138
    i32 31, label %sw.bb.140
    i32 32, label %sw.bb.142
    i32 33, label %sw.bb.144
    i32 34, label %sw.bb.146
    i32 35, label %sw.bb.148
    i32 36, label %sw.bb.150
    i32 37, label %sw.bb.152
    i32 38, label %sw.bb.154
    i32 39, label %sw.bb.156
    i32 40, label %sw.bb.158
    i32 41, label %sw.bb.160
    i32 42, label %sw.bb.162
    i32 43, label %sw.bb.164
    i32 44, label %sw.bb.166
    i32 45, label %sw.bb.168
    i32 46, label %sw.bb.170
    i32 47, label %sw.bb.172
    i32 48, label %sw.bb.174
    i32 49, label %sw.bb.176
    i32 50, label %sw.bb.178
    i32 51, label %sw.bb.180
    i32 52, label %sw.bb.182
    i32 53, label %sw.bb.184
    i32 54, label %sw.bb.186
    i32 55, label %sw.bb.188
    i32 56, label %sw.bb.190
    i32 57, label %sw.bb.192
    i32 58, label %sw.bb.194
    i32 59, label %sw.bb.196
    i32 60, label %sw.bb.198
    i32 61, label %sw.bb.200
    i32 62, label %sw.bb.202
    i32 63, label %sw.bb.204
    i32 64, label %sw.bb.206
    i32 65, label %sw.bb.208
    i32 66, label %sw.bb.210
    i32 67, label %sw.bb.212
    i32 68, label %sw.bb.214
    i32 69, label %sw.bb.216
    i32 70, label %sw.bb.218
    i32 71, label %sw.bb.220
    i32 72, label %sw.bb.222
    i32 73, label %sw.bb.224
    i32 74, label %sw.bb.226
    i32 75, label %sw.bb.228
    i32 76, label %sw.bb.230
    i32 77, label %sw.bb.232
    i32 78, label %sw.bb.234
    i32 79, label %sw.bb.236
    i32 80, label %sw.bb.238
    i32 81, label %sw.bb.240
    i32 82, label %sw.bb.242
    i32 83, label %sw.bb.244
    i32 84, label %sw.bb.246
    i32 85, label %sw.bb.248
    i32 86, label %sw.bb.250
    i32 87, label %sw.bb.252
    i32 88, label %sw.bb.254
    i32 89, label %sw.bb.256
    i32 90, label %sw.bb.258
    i32 91, label %sw.bb.260
    i32 92, label %sw.bb.262
    i32 93, label %sw.bb.264
    i32 94, label %sw.bb.266
    i32 95, label %sw.bb.268
    i32 96, label %sw.bb.270
    i32 97, label %sw.bb.272
    i32 98, label %sw.bb.274
    i32 99, label %sw.bb.276
    i32 100, label %sw.bb.278
    i32 101, label %sw.bb.280
    i32 102, label %sw.bb.282
    i32 103, label %sw.bb.284
    i32 104, label %sw.bb.286
    i32 105, label %sw.bb.288
    i32 106, label %sw.bb.290
    i32 107, label %sw.bb.292
    i32 108, label %sw.bb.294
    i32 109, label %sw.bb.296
    i32 110, label %sw.bb.298
    i32 111, label %sw.bb.300
    i32 112, label %sw.bb.302
    i32 113, label %sw.bb.304
    i32 114, label %sw.bb.306
    i32 115, label %sw.bb.308
    i32 116, label %sw.bb.310
    i32 117, label %sw.bb.312
    i32 118, label %sw.bb.314
    i32 119, label %sw.bb.316
    i32 120, label %sw.bb.318
    i32 121, label %sw.bb.320
    i32 122, label %sw.bb.322
    i32 123, label %sw.bb.324
    i32 124, label %sw.bb.326
    i32 125, label %sw.bb.328
    i32 126, label %sw.bb.330
    i32 127, label %sw.bb.332
    i32 128, label %sw.bb.334
    i32 129, label %sw.bb.336
    i32 130, label %sw.bb.338
    i32 131, label %sw.bb.340
    i32 132, label %sw.bb.342
    i32 133, label %sw.bb.344
    i32 134, label %sw.bb.346
    i32 135, label %sw.bb.348
    i32 136, label %sw.bb.350
    i32 137, label %sw.bb.352
    i32 138, label %sw.bb.363
    i32 139, label %sw.bb.364
    i32 140, label %sw.bb.365
    i32 141, label %sw.bb.366
    i32 142, label %sw.bb.367
    i32 143, label %sw.bb.368
    i32 144, label %sw.bb.369
    i32 145, label %sw.bb.370
    i32 146, label %sw.bb.371
    i32 147, label %sw.bb.372
    i32 148, label %sw.bb.373
    i32 149, label %sw.bb.374
    i32 150, label %sw.bb.375
    i32 151, label %sw.bb.376
    i32 152, label %sw.bb.377
    i32 153, label %sw.bb.378
    i32 154, label %sw.bb.379
    i32 155, label %sw.bb.380
    i32 156, label %sw.bb.381
    i32 157, label %sw.bb.382
    i32 158, label %sw.bb.383
    i32 159, label %sw.bb.384
    i32 160, label %sw.bb.385
    i32 161, label %sw.bb.386
    i32 162, label %sw.bb.387
    i32 163, label %sw.bb.388
    i32 164, label %sw.bb.389
    i32 165, label %sw.bb.390
    i32 166, label %sw.bb.391
    i32 167, label %sw.bb.392
    i32 168, label %sw.bb.393
    i32 169, label %sw.bb.394
    i32 170, label %sw.bb.395
    i32 171, label %sw.bb.396
    i32 172, label %sw.bb.397
    i32 173, label %sw.bb.398
    i32 174, label %sw.bb.404
    i32 175, label %sw.bb.412
    i32 176, label %sw.bb.413
    i32 177, label %sw.bb.414
    i32 178, label %sw.bb.415
    i32 179, label %sw.bb.416
    i32 180, label %sw.bb.417
    i32 181, label %sw.bb.418
    i32 182, label %sw.bb.419
    i32 183, label %sw.bb.420
    i32 184, label %sw.bb.421
    i32 185, label %sw.bb.422
    i32 186, label %sw.bb.424
    i32 187, label %sw.bb.427
    i32 188, label %sw.bb.483
    i32 189, label %sw.bb.513
    i32 190, label %sw.bb.572
    i32 191, label %sw.bb.584
    i32 192, label %sw.bb.596
    i32 193, label %sw.bb.608
    i32 194, label %sw.bb.620
    i32 195, label %sw.bb.632
    i32 196, label %sw.bb.644
    i32 197, label %sw.bb.656
    i32 198, label %sw.bb.668
    i32 199, label %sw.bb.680
    i32 200, label %sw.bb.693
    i32 201, label %sw.bb.695
    i32 202, label %sw.bb.711
    i32 203, label %sw.bb.804
    i32 204, label %sw.bb.834
    i32 205, label %sw.bb.893
    i32 206, label %sw.bb.905
    i32 207, label %sw.bb.917
    i32 208, label %sw.bb.929
    i32 209, label %sw.bb.941
    i32 210, label %sw.bb.953
    i32 211, label %sw.bb.965
    i32 212, label %sw.bb.977
    i32 213, label %sw.bb.989
    i32 214, label %sw.bb.1001
    i32 215, label %sw.bb.1014
    i32 216, label %sw.bb.1016
    i32 217, label %sw.bb.1034
    i32 219, label %sw.bb.1037
    i32 220, label %sw.bb.1037
    i32 221, label %sw.bb.1037
    i32 218, label %sw.bb.1038
  ]

sw.bb:                                            ; preds = %do_action
  %67 = load i8, i8* @yy_hold_char, align 1
  %68 = load i8*, i8** %yy_cp, align 8
  store i8 %67, i8* %68, align 1
  %69 = load i8*, i8** @yy_last_accepting_cpos, align 8
  store i8* %69, i8** %yy_cp, align 8
  %70 = load i32, i32* @yy_last_accepting_state, align 4
  store i32 %70, i32* %yy_current_state, align 4
  br label %yy_find_action

sw.bb.84:                                         ; preds = %do_action
  br label %sw.epilog.1098

sw.bb.85:                                         ; preds = %do_action
  br label %sw.epilog.1098

sw.bb.86:                                         ; preds = %do_action
  store i32 3, i32* @yy_start, align 4
  br label %sw.epilog.1098

sw.bb.87:                                         ; preds = %do_action
  store i32 5, i32* @yy_start, align 4
  br label %sw.epilog.1098

sw.bb.88:                                         ; preds = %do_action
  %call89 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i8* %call89, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.90:                                         ; preds = %do_action
  %call91 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  store i8* %call91, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.92:                                         ; preds = %do_action
  %call93 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  store i8* %call93, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.94:                                         ; preds = %do_action
  %call95 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  store i8* %call95, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.96:                                         ; preds = %do_action
  %call97 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  store i8* %call97, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.98:                                         ; preds = %do_action
  %call99 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  store i8* %call99, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.100:                                        ; preds = %do_action
  %call101 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0))
  store i8* %call101, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.102:                                        ; preds = %do_action
  %call103 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i8* %call103, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.104:                                        ; preds = %do_action
  %call105 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i32 0, i32 0))
  store i8* %call105, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.106:                                        ; preds = %do_action
  %call107 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0))
  store i8* %call107, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.108:                                        ; preds = %do_action
  %call109 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i32 0, i32 0))
  store i8* %call109, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.110:                                        ; preds = %do_action
  %call111 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i32 0, i32 0))
  store i8* %call111, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.112:                                        ; preds = %do_action
  %call113 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0))
  store i8* %call113, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.114:                                        ; preds = %do_action
  %call115 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i32 0, i32 0))
  store i8* %call115, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.116:                                        ; preds = %do_action
  %call117 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i32 0, i32 0))
  store i8* %call117, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.118:                                        ; preds = %do_action
  %call119 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i32 0, i32 0))
  store i8* %call119, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.120:                                        ; preds = %do_action
  %call121 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i32 0, i32 0))
  store i8* %call121, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.122:                                        ; preds = %do_action
  %call123 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i32 0, i32 0))
  store i8* %call123, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.124:                                        ; preds = %do_action
  %call125 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  store i8* %call125, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.126:                                        ; preds = %do_action
  %call127 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i32 0, i32 0))
  store i8* %call127, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.128:                                        ; preds = %do_action
  %call129 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20, i32 0, i32 0))
  store i8* %call129, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.130:                                        ; preds = %do_action
  %call131 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i32 0, i32 0))
  store i8* %call131, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.132:                                        ; preds = %do_action
  %call133 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i32 0, i32 0))
  store i8* %call133, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.134:                                        ; preds = %do_action
  %call135 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.23, i32 0, i32 0))
  store i8* %call135, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.136:                                        ; preds = %do_action
  %call137 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24, i32 0, i32 0))
  store i8* %call137, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.138:                                        ; preds = %do_action
  %call139 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.25, i32 0, i32 0))
  store i8* %call139, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.140:                                        ; preds = %do_action
  %call141 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.26, i32 0, i32 0))
  store i8* %call141, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.142:                                        ; preds = %do_action
  %call143 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.27, i32 0, i32 0))
  store i8* %call143, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.144:                                        ; preds = %do_action
  %call145 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i32 0, i32 0))
  store i8* %call145, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.146:                                        ; preds = %do_action
  %call147 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.29, i32 0, i32 0))
  store i8* %call147, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.148:                                        ; preds = %do_action
  %call149 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30, i32 0, i32 0))
  store i8* %call149, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.150:                                        ; preds = %do_action
  %call151 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.31, i32 0, i32 0))
  store i8* %call151, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.152:                                        ; preds = %do_action
  %call153 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i32 0, i32 0))
  store i8* %call153, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.154:                                        ; preds = %do_action
  %call155 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.33, i32 0, i32 0))
  store i8* %call155, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.156:                                        ; preds = %do_action
  %call157 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0))
  store i8* %call157, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.158:                                        ; preds = %do_action
  %call159 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.35, i32 0, i32 0))
  store i8* %call159, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.160:                                        ; preds = %do_action
  %call161 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i32 0, i32 0))
  store i8* %call161, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.162:                                        ; preds = %do_action
  %call163 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.37, i32 0, i32 0))
  store i8* %call163, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.164:                                        ; preds = %do_action
  %call165 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i32 0, i32 0))
  store i8* %call165, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.166:                                        ; preds = %do_action
  %call167 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.39, i32 0, i32 0))
  store i8* %call167, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.168:                                        ; preds = %do_action
  %call169 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.40, i32 0, i32 0))
  store i8* %call169, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.170:                                        ; preds = %do_action
  %call171 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.41, i32 0, i32 0))
  store i8* %call171, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.172:                                        ; preds = %do_action
  %call173 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.42, i32 0, i32 0))
  store i8* %call173, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.174:                                        ; preds = %do_action
  %call175 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.43, i32 0, i32 0))
  store i8* %call175, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.176:                                        ; preds = %do_action
  %call177 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.44, i32 0, i32 0))
  store i8* %call177, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.178:                                        ; preds = %do_action
  %call179 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i32 0, i32 0))
  store i8* %call179, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.180:                                        ; preds = %do_action
  %call181 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.46, i32 0, i32 0))
  store i8* %call181, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.182:                                        ; preds = %do_action
  %call183 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.47, i32 0, i32 0))
  store i8* %call183, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.184:                                        ; preds = %do_action
  %call185 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.48, i32 0, i32 0))
  store i8* %call185, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.186:                                        ; preds = %do_action
  %call187 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.49, i32 0, i32 0))
  store i8* %call187, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.188:                                        ; preds = %do_action
  %call189 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.50, i32 0, i32 0))
  store i8* %call189, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.190:                                        ; preds = %do_action
  %call191 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.51, i32 0, i32 0))
  store i8* %call191, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.192:                                        ; preds = %do_action
  %call193 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i32 0, i32 0))
  store i8* %call193, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.194:                                        ; preds = %do_action
  %call195 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.53, i32 0, i32 0))
  store i8* %call195, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.196:                                        ; preds = %do_action
  %call197 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.54, i32 0, i32 0))
  store i8* %call197, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.198:                                        ; preds = %do_action
  %call199 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.55, i32 0, i32 0))
  store i8* %call199, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.200:                                        ; preds = %do_action
  %call201 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.56, i32 0, i32 0))
  store i8* %call201, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.202:                                        ; preds = %do_action
  %call203 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.57, i32 0, i32 0))
  store i8* %call203, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.204:                                        ; preds = %do_action
  %call205 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.58, i32 0, i32 0))
  store i8* %call205, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.206:                                        ; preds = %do_action
  %call207 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.59, i32 0, i32 0))
  store i8* %call207, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.208:                                        ; preds = %do_action
  %call209 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.60, i32 0, i32 0))
  store i8* %call209, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.210:                                        ; preds = %do_action
  %call211 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.61, i32 0, i32 0))
  store i8* %call211, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.212:                                        ; preds = %do_action
  %call213 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.62, i32 0, i32 0))
  store i8* %call213, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.214:                                        ; preds = %do_action
  %call215 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.63, i32 0, i32 0))
  store i8* %call215, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.216:                                        ; preds = %do_action
  %call217 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.64, i32 0, i32 0))
  store i8* %call217, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.218:                                        ; preds = %do_action
  %call219 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.65, i32 0, i32 0))
  store i8* %call219, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.220:                                        ; preds = %do_action
  %call221 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.66, i32 0, i32 0))
  store i8* %call221, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.222:                                        ; preds = %do_action
  %call223 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.67, i32 0, i32 0))
  store i8* %call223, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.224:                                        ; preds = %do_action
  %call225 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.68, i32 0, i32 0))
  store i8* %call225, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.226:                                        ; preds = %do_action
  %call227 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.69, i32 0, i32 0))
  store i8* %call227, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.228:                                        ; preds = %do_action
  %call229 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.70, i32 0, i32 0))
  store i8* %call229, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.230:                                        ; preds = %do_action
  %call231 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.71, i32 0, i32 0))
  store i8* %call231, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.232:                                        ; preds = %do_action
  %call233 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.72, i32 0, i32 0))
  store i8* %call233, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.234:                                        ; preds = %do_action
  %call235 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.73, i32 0, i32 0))
  store i8* %call235, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.236:                                        ; preds = %do_action
  %call237 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.74, i32 0, i32 0))
  store i8* %call237, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.238:                                        ; preds = %do_action
  %call239 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.75, i32 0, i32 0))
  store i8* %call239, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.240:                                        ; preds = %do_action
  %call241 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.76, i32 0, i32 0))
  store i8* %call241, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.242:                                        ; preds = %do_action
  %call243 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.77, i32 0, i32 0))
  store i8* %call243, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.244:                                        ; preds = %do_action
  %call245 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.78, i32 0, i32 0))
  store i8* %call245, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.246:                                        ; preds = %do_action
  %call247 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.79, i32 0, i32 0))
  store i8* %call247, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.248:                                        ; preds = %do_action
  %call249 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.80, i32 0, i32 0))
  store i8* %call249, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.250:                                        ; preds = %do_action
  %call251 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.81, i32 0, i32 0))
  store i8* %call251, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.252:                                        ; preds = %do_action
  %call253 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.82, i32 0, i32 0))
  store i8* %call253, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.254:                                        ; preds = %do_action
  %call255 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.83, i32 0, i32 0))
  store i8* %call255, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.256:                                        ; preds = %do_action
  %call257 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.84, i32 0, i32 0))
  store i8* %call257, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.258:                                        ; preds = %do_action
  %call259 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.85, i32 0, i32 0))
  store i8* %call259, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.260:                                        ; preds = %do_action
  %call261 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.86, i32 0, i32 0))
  store i8* %call261, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.262:                                        ; preds = %do_action
  %call263 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.87, i32 0, i32 0))
  store i8* %call263, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.264:                                        ; preds = %do_action
  %call265 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.88, i32 0, i32 0))
  store i8* %call265, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.266:                                        ; preds = %do_action
  %call267 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.89, i32 0, i32 0))
  store i8* %call267, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.268:                                        ; preds = %do_action
  %call269 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.90, i32 0, i32 0))
  store i8* %call269, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.270:                                        ; preds = %do_action
  %call271 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.91, i32 0, i32 0))
  store i8* %call271, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.272:                                        ; preds = %do_action
  %call273 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.92, i32 0, i32 0))
  store i8* %call273, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.274:                                        ; preds = %do_action
  %call275 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.93, i32 0, i32 0))
  store i8* %call275, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.276:                                        ; preds = %do_action
  %call277 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.94, i32 0, i32 0))
  store i8* %call277, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.278:                                        ; preds = %do_action
  %call279 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.95, i32 0, i32 0))
  store i8* %call279, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.280:                                        ; preds = %do_action
  %call281 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96, i32 0, i32 0))
  store i8* %call281, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.282:                                        ; preds = %do_action
  %call283 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.97, i32 0, i32 0))
  store i8* %call283, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.284:                                        ; preds = %do_action
  %call285 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.98, i32 0, i32 0))
  store i8* %call285, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.286:                                        ; preds = %do_action
  %call287 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.99, i32 0, i32 0))
  store i8* %call287, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.288:                                        ; preds = %do_action
  %call289 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.100, i32 0, i32 0))
  store i8* %call289, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.290:                                        ; preds = %do_action
  %call291 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.101, i32 0, i32 0))
  store i8* %call291, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.292:                                        ; preds = %do_action
  %call293 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.102, i32 0, i32 0))
  store i8* %call293, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.294:                                        ; preds = %do_action
  %call295 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.103, i32 0, i32 0))
  store i8* %call295, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.296:                                        ; preds = %do_action
  %call297 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.104, i32 0, i32 0))
  store i8* %call297, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.298:                                        ; preds = %do_action
  %call299 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.105, i32 0, i32 0))
  store i8* %call299, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.300:                                        ; preds = %do_action
  %call301 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.106, i32 0, i32 0))
  store i8* %call301, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.302:                                        ; preds = %do_action
  %call303 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.107, i32 0, i32 0))
  store i8* %call303, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.304:                                        ; preds = %do_action
  %call305 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.107, i32 0, i32 0))
  store i8* %call305, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.306:                                        ; preds = %do_action
  %call307 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.108, i32 0, i32 0))
  store i8* %call307, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.308:                                        ; preds = %do_action
  %call309 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.109, i32 0, i32 0))
  store i8* %call309, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.310:                                        ; preds = %do_action
  %call311 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.110, i32 0, i32 0))
  store i8* %call311, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.312:                                        ; preds = %do_action
  %call313 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.111, i32 0, i32 0))
  store i8* %call313, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.314:                                        ; preds = %do_action
  %call315 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.112, i32 0, i32 0))
  store i8* %call315, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.316:                                        ; preds = %do_action
  %call317 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.113, i32 0, i32 0))
  store i8* %call317, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.318:                                        ; preds = %do_action
  %call319 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.114, i32 0, i32 0))
  store i8* %call319, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.320:                                        ; preds = %do_action
  %call321 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.115, i32 0, i32 0))
  store i8* %call321, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.322:                                        ; preds = %do_action
  %call323 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.116, i32 0, i32 0))
  store i8* %call323, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.324:                                        ; preds = %do_action
  %call325 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.117, i32 0, i32 0))
  store i8* %call325, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.326:                                        ; preds = %do_action
  %call327 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.118, i32 0, i32 0))
  store i8* %call327, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.328:                                        ; preds = %do_action
  %call329 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.119, i32 0, i32 0))
  store i8* %call329, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.330:                                        ; preds = %do_action
  %call331 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.120, i32 0, i32 0))
  store i8* %call331, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.332:                                        ; preds = %do_action
  %call333 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.121, i32 0, i32 0))
  store i8* %call333, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.334:                                        ; preds = %do_action
  %call335 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.121, i32 0, i32 0))
  store i8* %call335, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.336:                                        ; preds = %do_action
  %call337 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.122, i32 0, i32 0))
  store i8* %call337, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.338:                                        ; preds = %do_action
  %call339 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.123, i32 0, i32 0))
  store i8* %call339, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.340:                                        ; preds = %do_action
  %call341 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.124, i32 0, i32 0))
  store i8* %call341, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.342:                                        ; preds = %do_action
  %call343 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.125, i32 0, i32 0))
  store i8* %call343, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.344:                                        ; preds = %do_action
  %call345 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.126, i32 0, i32 0))
  store i8* %call345, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.346:                                        ; preds = %do_action
  %call347 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.127, i32 0, i32 0))
  store i8* %call347, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.348:                                        ; preds = %do_action
  %call349 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.128, i32 0, i32 0))
  store i8* %call349, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.350:                                        ; preds = %do_action
  %call351 = call i8* @xstrdup(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.129, i32 0, i32 0))
  store i8* %call351, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 286, i32* %retval
  br label %return

sw.bb.352:                                        ; preds = %do_action
  %71 = load i8*, i8** @sshtext, align 8
  %arrayidx353 = getelementptr inbounds i8, i8* %71, i64 1
  %72 = load i8, i8* %arrayidx353, align 1
  %conv354 = sext i8 %72 to i32
  %sub = sub nsw i32 %conv354, 48
  store i32 %sub, i32* %value, align 4
  %73 = load i8*, i8** @sshtext, align 8
  %add.ptr = getelementptr inbounds i8, i8* %73, i64 2
  store i8* %add.ptr, i8** %cursor, align 8
  br label %while.cond.355

while.cond.355:                                   ; preds = %while.body.357, %sw.bb.352
  %74 = load i8*, i8** %cursor, align 8
  %75 = load i8, i8* %74, align 1
  %tobool356 = icmp ne i8 %75, 0
  br i1 %tobool356, label %while.body.357, label %while.end.362

while.body.357:                                   ; preds = %while.cond.355
  %76 = load i32, i32* %value, align 4
  %mul = mul nsw i32 8, %76
  %77 = load i8*, i8** %cursor, align 8
  %incdec.ptr358 = getelementptr inbounds i8, i8* %77, i32 1
  store i8* %incdec.ptr358, i8** %cursor, align 8
  %78 = load i8, i8* %77, align 1
  %conv359 = sext i8 %78 to i32
  %add360 = add nsw i32 %mul, %conv359
  %sub361 = sub nsw i32 %add360, 48
  store i32 %sub361, i32* %value, align 4
  br label %while.cond.355

while.end.362:                                    ; preds = %while.cond.355
  %79 = load i32, i32* %value, align 4
  store i32 %79, i32* bitcast (%union.YYSTYPE* @sshlval to i32*), align 4
  store i32 289, i32* %retval
  br label %return

sw.bb.363:                                        ; preds = %do_action
  store i32 281, i32* %retval
  br label %return

sw.bb.364:                                        ; preds = %do_action
  store i32 268, i32* %retval
  br label %return

sw.bb.365:                                        ; preds = %do_action
  store i32 269, i32* %retval
  br label %return

sw.bb.366:                                        ; preds = %do_action
  store i32 282, i32* %retval
  br label %return

sw.bb.367:                                        ; preds = %do_action
  store i32 262, i32* %retval
  br label %return

sw.bb.368:                                        ; preds = %do_action
  store i32 278, i32* %retval
  br label %return

sw.bb.369:                                        ; preds = %do_action
  store i32 272, i32* %retval
  br label %return

sw.bb.370:                                        ; preds = %do_action
  store i32 276, i32* %retval
  br label %return

sw.bb.371:                                        ; preds = %do_action
  store i32 274, i32* %retval
  br label %return

sw.bb.372:                                        ; preds = %do_action
  store i32 273, i32* %retval
  br label %return

sw.bb.373:                                        ; preds = %do_action
  store i32 270, i32* %retval
  br label %return

sw.bb.374:                                        ; preds = %do_action
  store i32 260, i32* %retval
  br label %return

sw.bb.375:                                        ; preds = %do_action
  store i32 271, i32* %retval
  br label %return

sw.bb.376:                                        ; preds = %do_action
  store i32 266, i32* %retval
  br label %return

sw.bb.377:                                        ; preds = %do_action
  store i32 263, i32* %retval
  br label %return

sw.bb.378:                                        ; preds = %do_action
  store i32 1, i32* bitcast (%union.YYSTYPE* @sshlval to i32*), align 4
  store i32 288, i32* %retval
  br label %return

sw.bb.379:                                        ; preds = %do_action
  store i32 259, i32* %retval
  br label %return

sw.bb.380:                                        ; preds = %do_action
  store i32 261, i32* %retval
  br label %return

sw.bb.381:                                        ; preds = %do_action
  store i32 280, i32* %retval
  br label %return

sw.bb.382:                                        ; preds = %do_action
  store i32 267, i32* %retval
  br label %return

sw.bb.383:                                        ; preds = %do_action
  store i32 0, i32* bitcast (%union.YYSTYPE* @sshlval to i32*), align 4
  store i32 288, i32* %retval
  br label %return

sw.bb.384:                                        ; preds = %do_action
  store i32 264, i32* %retval
  br label %return

sw.bb.385:                                        ; preds = %do_action
  store i32 275, i32* %retval
  br label %return

sw.bb.386:                                        ; preds = %do_action
  store i32 265, i32* %retval
  br label %return

sw.bb.387:                                        ; preds = %do_action
  store i32 258, i32* %retval
  br label %return

sw.bb.388:                                        ; preds = %do_action
  store i32 279, i32* %retval
  br label %return

sw.bb.389:                                        ; preds = %do_action
  store i32 277, i32* %retval
  br label %return

sw.bb.390:                                        ; preds = %do_action
  store i32 0, i32* bitcast (%union.YYSTYPE* @sshlval to i32*), align 4
  store i32 283, i32* %retval
  br label %return

sw.bb.391:                                        ; preds = %do_action
  store i32 1, i32* bitcast (%union.YYSTYPE* @sshlval to i32*), align 4
  store i32 283, i32* %retval
  br label %return

sw.bb.392:                                        ; preds = %do_action
  store i32 2, i32* bitcast (%union.YYSTYPE* @sshlval to i32*), align 4
  store i32 283, i32* %retval
  br label %return

sw.bb.393:                                        ; preds = %do_action
  store i32 7, i32* bitcast (%union.YYSTYPE* @sshlval to i32*), align 4
  store i32 283, i32* %retval
  br label %return

sw.bb.394:                                        ; preds = %do_action
  store i32 3, i32* bitcast (%union.YYSTYPE* @sshlval to i32*), align 4
  store i32 283, i32* %retval
  br label %return

sw.bb.395:                                        ; preds = %do_action
  store i32 4, i32* bitcast (%union.YYSTYPE* @sshlval to i32*), align 4
  store i32 283, i32* %retval
  br label %return

sw.bb.396:                                        ; preds = %do_action
  store i32 5, i32* bitcast (%union.YYSTYPE* @sshlval to i32*), align 4
  store i32 283, i32* %retval
  br label %return

sw.bb.397:                                        ; preds = %do_action
  store i32 6, i32* bitcast (%union.YYSTYPE* @sshlval to i32*), align 4
  store i32 283, i32* %retval
  br label %return

sw.bb.398:                                        ; preds = %do_action
  %80 = load i32, i32* @strip_level, align 4
  %cmp399 = icmp eq i32 %80, 1
  br i1 %cmp399, label %if.then.403, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb.398
  %81 = load i32, i32* @strip_level, align 4
  %cmp401 = icmp eq i32 %81, 3
  br i1 %cmp401, label %if.then.403, label %if.else

if.then.403:                                      ; preds = %lor.lhs.false, %sw.bb.398
  store i32 1, i32* bitcast (%union.YYSTYPE* @sshlval to i32*), align 4
  store i32 284, i32* %retval
  br label %return

if.else:                                          ; preds = %lor.lhs.false
  store i32 8, i32* bitcast (%union.YYSTYPE* @sshlval to i32*), align 4
  store i32 283, i32* %retval
  br label %return

sw.bb.404:                                        ; preds = %do_action
  %82 = load i32, i32* @strip_level, align 4
  %cmp405 = icmp eq i32 %82, 2
  br i1 %cmp405, label %if.then.410, label %lor.lhs.false.407

lor.lhs.false.407:                                ; preds = %sw.bb.404
  %83 = load i32, i32* @strip_level, align 4
  %cmp408 = icmp eq i32 %83, 3
  br i1 %cmp408, label %if.then.410, label %if.else.411

if.then.410:                                      ; preds = %lor.lhs.false.407, %sw.bb.404
  store i32 1, i32* bitcast (%union.YYSTYPE* @sshlval to i32*), align 4
  store i32 284, i32* %retval
  br label %return

if.else.411:                                      ; preds = %lor.lhs.false.407
  store i32 9, i32* bitcast (%union.YYSTYPE* @sshlval to i32*), align 4
  store i32 283, i32* %retval
  br label %return

sw.bb.412:                                        ; preds = %do_action
  store i32 2, i32* bitcast (%union.YYSTYPE* @sshlval to i32*), align 4
  store i32 284, i32* %retval
  br label %return

sw.bb.413:                                        ; preds = %do_action
  store i32 4, i32* bitcast (%union.YYSTYPE* @sshlval to i32*), align 4
  store i32 284, i32* %retval
  br label %return

sw.bb.414:                                        ; preds = %do_action
  store i32 8, i32* bitcast (%union.YYSTYPE* @sshlval to i32*), align 4
  store i32 284, i32* %retval
  br label %return

sw.bb.415:                                        ; preds = %do_action
  store i32 16, i32* bitcast (%union.YYSTYPE* @sshlval to i32*), align 4
  store i32 284, i32* %retval
  br label %return

sw.bb.416:                                        ; preds = %do_action
  store i32 32, i32* bitcast (%union.YYSTYPE* @sshlval to i32*), align 4
  store i32 284, i32* %retval
  br label %return

sw.bb.417:                                        ; preds = %do_action
  store i32 64, i32* bitcast (%union.YYSTYPE* @sshlval to i32*), align 4
  store i32 284, i32* %retval
  br label %return

sw.bb.418:                                        ; preds = %do_action
  store i32 128, i32* bitcast (%union.YYSTYPE* @sshlval to i32*), align 4
  store i32 284, i32* %retval
  br label %return

sw.bb.419:                                        ; preds = %do_action
  store i32 256, i32* bitcast (%union.YYSTYPE* @sshlval to i32*), align 4
  store i32 284, i32* %retval
  br label %return

sw.bb.420:                                        ; preds = %do_action
  store i32 512, i32* bitcast (%union.YYSTYPE* @sshlval to i32*), align 4
  store i32 284, i32* %retval
  br label %return

sw.bb.421:                                        ; preds = %do_action
  store i32 1, i32* bitcast (%union.YYSTYPE* @sshlval to i32*), align 4
  store i32 284, i32* %retval
  br label %return

sw.bb.422:                                        ; preds = %do_action
  %84 = load i8*, i8** @sshtext, align 8
  %call423 = call i8* @xstrdup(i8* %84)
  store i8* %call423, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 285, i32* %retval
  br label %return

sw.bb.424:                                        ; preds = %do_action
  %85 = load i8*, i8** @sshtext, align 8
  %arrayidx425 = getelementptr inbounds i8, i8* %85, i64 0
  %86 = load i8, i8* %arrayidx425, align 1
  %conv426 = sext i8 %86 to i32
  store i32 %conv426, i32* %retval
  br label %return

sw.bb.427:                                        ; preds = %do_action
  store %struct.obstack* @string_stack, %struct.obstack** %__o, align 8
  %87 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %87, i32 0, i32 3
  %88 = load i8*, i8** %next_free, align 8
  %add.ptr428 = getelementptr inbounds i8, i8* %88, i64 1
  %89 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %89, i32 0, i32 4
  %90 = load i8*, i8** %chunk_limit, align 8
  %cmp429 = icmp ugt i8* %add.ptr428, %90
  br i1 %cmp429, label %if.then.431, label %if.end.432

if.then.431:                                      ; preds = %sw.bb.427
  %91 = load %struct.obstack*, %struct.obstack** %__o, align 8
  call void @_obstack_newchunk(%struct.obstack* %91, i32 1)
  br label %if.end.432

if.end.432:                                       ; preds = %if.then.431, %sw.bb.427
  %92 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %next_free433 = getelementptr inbounds %struct.obstack, %struct.obstack* %92, i32 0, i32 3
  %93 = load i8*, i8** %next_free433, align 8
  %incdec.ptr434 = getelementptr inbounds i8, i8* %93, i32 1
  store i8* %incdec.ptr434, i8** %next_free433, align 8
  store i8 0, i8* %93, align 1
  store %struct.obstack* @string_stack, %struct.obstack** %__o1, align 8
  %94 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %94, i32 0, i32 2
  %95 = load i8*, i8** %object_base, align 8
  store i8* %95, i8** %value435, align 8
  %96 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free436 = getelementptr inbounds %struct.obstack, %struct.obstack* %96, i32 0, i32 3
  %97 = load i8*, i8** %next_free436, align 8
  %98 = load i8*, i8** %value435, align 8
  %cmp437 = icmp eq i8* %97, %98
  br i1 %cmp437, label %if.then.439, label %if.end.440

if.then.439:                                      ; preds = %if.end.432
  %99 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %99, i32 0, i32 10
  %bf.load = load i8, i8* %maybe_empty_object, align 8
  %bf.clear = and i8 %bf.load, -3
  %bf.set = or i8 %bf.clear, 2
  store i8 %bf.set, i8* %maybe_empty_object, align 8
  br label %if.end.440

if.end.440:                                       ; preds = %if.then.439, %if.end.432
  %100 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free441 = getelementptr inbounds %struct.obstack, %struct.obstack* %100, i32 0, i32 3
  %101 = load i8*, i8** %next_free441, align 8
  %sub.ptr.lhs.cast442 = ptrtoint i8* %101 to i64
  %sub.ptr.sub443 = sub i64 %sub.ptr.lhs.cast442, 0
  %102 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %102, i32 0, i32 6
  %103 = load i32, i32* %alignment_mask, align 4
  %conv444 = sext i32 %103 to i64
  %add445 = add nsw i64 %sub.ptr.sub443, %conv444
  %104 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %alignment_mask446 = getelementptr inbounds %struct.obstack, %struct.obstack* %104, i32 0, i32 6
  %105 = load i32, i32* %alignment_mask446, align 4
  %neg = xor i32 %105, -1
  %conv447 = sext i32 %neg to i64
  %and = and i64 %add445, %conv447
  %add.ptr448 = getelementptr inbounds i8, i8* null, i64 %and
  %106 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free449 = getelementptr inbounds %struct.obstack, %struct.obstack* %106, i32 0, i32 3
  store i8* %add.ptr448, i8** %next_free449, align 8
  %107 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free450 = getelementptr inbounds %struct.obstack, %struct.obstack* %107, i32 0, i32 3
  %108 = load i8*, i8** %next_free450, align 8
  %109 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %109, i32 0, i32 1
  %110 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8
  %111 = bitcast %struct._obstack_chunk* %110 to i8*
  %sub.ptr.lhs.cast451 = ptrtoint i8* %108 to i64
  %sub.ptr.rhs.cast452 = ptrtoint i8* %111 to i64
  %sub.ptr.sub453 = sub i64 %sub.ptr.lhs.cast451, %sub.ptr.rhs.cast452
  %112 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk_limit454 = getelementptr inbounds %struct.obstack, %struct.obstack* %112, i32 0, i32 4
  %113 = load i8*, i8** %chunk_limit454, align 8
  %114 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk455 = getelementptr inbounds %struct.obstack, %struct.obstack* %114, i32 0, i32 1
  %115 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk455, align 8
  %116 = bitcast %struct._obstack_chunk* %115 to i8*
  %sub.ptr.lhs.cast456 = ptrtoint i8* %113 to i64
  %sub.ptr.rhs.cast457 = ptrtoint i8* %116 to i64
  %sub.ptr.sub458 = sub i64 %sub.ptr.lhs.cast456, %sub.ptr.rhs.cast457
  %cmp459 = icmp sgt i64 %sub.ptr.sub453, %sub.ptr.sub458
  br i1 %cmp459, label %if.then.461, label %if.end.464

if.then.461:                                      ; preds = %if.end.440
  %117 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk_limit462 = getelementptr inbounds %struct.obstack, %struct.obstack* %117, i32 0, i32 4
  %118 = load i8*, i8** %chunk_limit462, align 8
  %119 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free463 = getelementptr inbounds %struct.obstack, %struct.obstack* %119, i32 0, i32 3
  store i8* %118, i8** %next_free463, align 8
  br label %if.end.464

if.end.464:                                       ; preds = %if.then.461, %if.end.440
  %120 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free465 = getelementptr inbounds %struct.obstack, %struct.obstack* %120, i32 0, i32 3
  %121 = load i8*, i8** %next_free465, align 8
  %122 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %object_base466 = getelementptr inbounds %struct.obstack, %struct.obstack* %122, i32 0, i32 2
  store i8* %121, i8** %object_base466, align 8
  %123 = load i8*, i8** %value435, align 8
  store i8* %123, i8** %tmp
  %124 = load i8*, i8** %tmp
  store i8* %124, i8** %string, align 8
  store %struct.obstack* @string_stack, %struct.obstack** %__o468, align 8
  %125 = load i8*, i8** %string, align 8
  store i8* %125, i8** %__obj, align 8
  %126 = load i8*, i8** %__obj, align 8
  %127 = load %struct.obstack*, %struct.obstack** %__o468, align 8
  %chunk470 = getelementptr inbounds %struct.obstack, %struct.obstack* %127, i32 0, i32 1
  %128 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk470, align 8
  %129 = bitcast %struct._obstack_chunk* %128 to i8*
  %cmp471 = icmp ugt i8* %126, %129
  br i1 %cmp471, label %land.lhs.true.473, label %if.else.480

land.lhs.true.473:                                ; preds = %if.end.464
  %130 = load i8*, i8** %__obj, align 8
  %131 = load %struct.obstack*, %struct.obstack** %__o468, align 8
  %chunk_limit474 = getelementptr inbounds %struct.obstack, %struct.obstack* %131, i32 0, i32 4
  %132 = load i8*, i8** %chunk_limit474, align 8
  %cmp475 = icmp ult i8* %130, %132
  br i1 %cmp475, label %if.then.477, label %if.else.480

if.then.477:                                      ; preds = %land.lhs.true.473
  %133 = load i8*, i8** %__obj, align 8
  %134 = load %struct.obstack*, %struct.obstack** %__o468, align 8
  %object_base478 = getelementptr inbounds %struct.obstack, %struct.obstack* %134, i32 0, i32 2
  store i8* %133, i8** %object_base478, align 8
  %135 = load %struct.obstack*, %struct.obstack** %__o468, align 8
  %next_free479 = getelementptr inbounds %struct.obstack, %struct.obstack* %135, i32 0, i32 3
  store i8* %133, i8** %next_free479, align 8
  br label %if.end.481

if.else.480:                                      ; preds = %land.lhs.true.473, %if.end.464
  %136 = load %struct.obstack*, %struct.obstack** %__o468, align 8
  %137 = load i8*, i8** %__obj, align 8
  call void @obstack_free(%struct.obstack* %136, i8* %137)
  br label %if.end.481

if.end.481:                                       ; preds = %if.else.480, %if.then.477
  store i32 1, i32* @yy_start, align 4
  %138 = load i8*, i8** %string, align 8
  %call482 = call i8* @xstrdup(i8* %138)
  store i8* %call482, i8** getelementptr inbounds (%union.YYSTYPE, %union.YYSTYPE* @sshlval, i32 0, i32 0), align 8
  store i32 285, i32* %retval
  br label %return

sw.bb.483:                                        ; preds = %do_action
  %139 = load i8*, i8** @sshtext, align 8
  %arrayidx486 = getelementptr inbounds i8, i8* %139, i64 1
  %140 = load i8, i8* %arrayidx486, align 1
  %conv487 = sext i8 %140 to i32
  %sub488 = sub nsw i32 %conv487, 48
  store i32 %sub488, i32* %value485, align 4
  %141 = load i8*, i8** @sshtext, align 8
  %add.ptr491 = getelementptr inbounds i8, i8* %141, i64 2
  store i8* %add.ptr491, i8** %cursor490, align 8
  br label %while.cond.492

while.cond.492:                                   ; preds = %while.body.494, %sw.bb.483
  %142 = load i8*, i8** %cursor490, align 8
  %143 = load i8, i8* %142, align 1
  %tobool493 = icmp ne i8 %143, 0
  br i1 %tobool493, label %while.body.494, label %while.end.500

while.body.494:                                   ; preds = %while.cond.492
  %144 = load i32, i32* %value485, align 4
  %mul495 = mul nsw i32 8, %144
  %145 = load i8*, i8** %cursor490, align 8
  %incdec.ptr496 = getelementptr inbounds i8, i8* %145, i32 1
  store i8* %incdec.ptr496, i8** %cursor490, align 8
  %146 = load i8, i8* %145, align 1
  %conv497 = sext i8 %146 to i32
  %add498 = add nsw i32 %mul495, %conv497
  %sub499 = sub nsw i32 %add498, 48
  store i32 %sub499, i32* %value485, align 4
  br label %while.cond.492

while.end.500:                                    ; preds = %while.cond.492
  store %struct.obstack* @string_stack, %struct.obstack** %__o502, align 8
  %147 = load %struct.obstack*, %struct.obstack** %__o502, align 8
  %next_free503 = getelementptr inbounds %struct.obstack, %struct.obstack* %147, i32 0, i32 3
  %148 = load i8*, i8** %next_free503, align 8
  %add.ptr504 = getelementptr inbounds i8, i8* %148, i64 1
  %149 = load %struct.obstack*, %struct.obstack** %__o502, align 8
  %chunk_limit505 = getelementptr inbounds %struct.obstack, %struct.obstack* %149, i32 0, i32 4
  %150 = load i8*, i8** %chunk_limit505, align 8
  %cmp506 = icmp ugt i8* %add.ptr504, %150
  br i1 %cmp506, label %if.then.508, label %if.end.509

if.then.508:                                      ; preds = %while.end.500
  %151 = load %struct.obstack*, %struct.obstack** %__o502, align 8
  call void @_obstack_newchunk(%struct.obstack* %151, i32 1)
  br label %if.end.509

if.end.509:                                       ; preds = %if.then.508, %while.end.500
  %152 = load i32, i32* %value485, align 4
  %conv510 = trunc i32 %152 to i8
  %153 = load %struct.obstack*, %struct.obstack** %__o502, align 8
  %next_free511 = getelementptr inbounds %struct.obstack, %struct.obstack* %153, i32 0, i32 3
  %154 = load i8*, i8** %next_free511, align 8
  %incdec.ptr512 = getelementptr inbounds i8, i8* %154, i32 1
  store i8* %incdec.ptr512, i8** %next_free511, align 8
  store i8 %conv510, i8* %154, align 1
  br label %sw.epilog.1098

sw.bb.513:                                        ; preds = %do_action
  store i32 0, i32* %value515, align 4
  %155 = load i8*, i8** @sshtext, align 8
  %add.ptr518 = getelementptr inbounds i8, i8* %155, i64 2
  store i8* %add.ptr518, i8** %cursor517, align 8
  br label %while.cond.519

while.cond.519:                                   ; preds = %if.end.558, %sw.bb.513
  %156 = load i8*, i8** %cursor517, align 8
  %157 = load i8, i8* %156, align 1
  %tobool520 = icmp ne i8 %157, 0
  br i1 %tobool520, label %while.body.521, label %while.end.559

while.body.521:                                   ; preds = %while.cond.519
  %158 = load i8*, i8** %cursor517, align 8
  %159 = load i8, i8* %158, align 1
  %conv522 = sext i8 %159 to i32
  %cmp523 = icmp sge i32 %conv522, 97
  br i1 %cmp523, label %land.lhs.true.525, label %if.else.536

land.lhs.true.525:                                ; preds = %while.body.521
  %160 = load i8*, i8** %cursor517, align 8
  %161 = load i8, i8* %160, align 1
  %conv526 = sext i8 %161 to i32
  %cmp527 = icmp sle i32 %conv526, 102
  br i1 %cmp527, label %if.then.529, label %if.else.536

if.then.529:                                      ; preds = %land.lhs.true.525
  %162 = load i32, i32* %value515, align 4
  %mul530 = mul nsw i32 16, %162
  %163 = load i8*, i8** %cursor517, align 8
  %incdec.ptr531 = getelementptr inbounds i8, i8* %163, i32 1
  store i8* %incdec.ptr531, i8** %cursor517, align 8
  %164 = load i8, i8* %163, align 1
  %conv532 = sext i8 %164 to i32
  %add533 = add nsw i32 %mul530, %conv532
  %sub534 = sub nsw i32 %add533, 97
  %add535 = add nsw i32 %sub534, 10
  store i32 %add535, i32* %value515, align 4
  br label %if.end.558

if.else.536:                                      ; preds = %land.lhs.true.525, %while.body.521
  %165 = load i8*, i8** %cursor517, align 8
  %166 = load i8, i8* %165, align 1
  %conv537 = sext i8 %166 to i32
  %cmp538 = icmp sge i32 %conv537, 65
  br i1 %cmp538, label %land.lhs.true.540, label %if.else.551

land.lhs.true.540:                                ; preds = %if.else.536
  %167 = load i8*, i8** %cursor517, align 8
  %168 = load i8, i8* %167, align 1
  %conv541 = sext i8 %168 to i32
  %cmp542 = icmp sle i32 %conv541, 70
  br i1 %cmp542, label %if.then.544, label %if.else.551

if.then.544:                                      ; preds = %land.lhs.true.540
  %169 = load i32, i32* %value515, align 4
  %mul545 = mul nsw i32 16, %169
  %170 = load i8*, i8** %cursor517, align 8
  %incdec.ptr546 = getelementptr inbounds i8, i8* %170, i32 1
  store i8* %incdec.ptr546, i8** %cursor517, align 8
  %171 = load i8, i8* %170, align 1
  %conv547 = sext i8 %171 to i32
  %add548 = add nsw i32 %mul545, %conv547
  %sub549 = sub nsw i32 %add548, 65
  %add550 = add nsw i32 %sub549, 10
  store i32 %add550, i32* %value515, align 4
  br label %if.end.557

if.else.551:                                      ; preds = %land.lhs.true.540, %if.else.536
  %172 = load i32, i32* %value515, align 4
  %mul552 = mul nsw i32 16, %172
  %173 = load i8*, i8** %cursor517, align 8
  %incdec.ptr553 = getelementptr inbounds i8, i8* %173, i32 1
  store i8* %incdec.ptr553, i8** %cursor517, align 8
  %174 = load i8, i8* %173, align 1
  %conv554 = sext i8 %174 to i32
  %add555 = add nsw i32 %mul552, %conv554
  %sub556 = sub nsw i32 %add555, 48
  store i32 %sub556, i32* %value515, align 4
  br label %if.end.557

if.end.557:                                       ; preds = %if.else.551, %if.then.544
  br label %if.end.558

if.end.558:                                       ; preds = %if.end.557, %if.then.529
  br label %while.cond.519

while.end.559:                                    ; preds = %while.cond.519
  store %struct.obstack* @string_stack, %struct.obstack** %__o561, align 8
  %175 = load %struct.obstack*, %struct.obstack** %__o561, align 8
  %next_free562 = getelementptr inbounds %struct.obstack, %struct.obstack* %175, i32 0, i32 3
  %176 = load i8*, i8** %next_free562, align 8
  %add.ptr563 = getelementptr inbounds i8, i8* %176, i64 1
  %177 = load %struct.obstack*, %struct.obstack** %__o561, align 8
  %chunk_limit564 = getelementptr inbounds %struct.obstack, %struct.obstack* %177, i32 0, i32 4
  %178 = load i8*, i8** %chunk_limit564, align 8
  %cmp565 = icmp ugt i8* %add.ptr563, %178
  br i1 %cmp565, label %if.then.567, label %if.end.568

if.then.567:                                      ; preds = %while.end.559
  %179 = load %struct.obstack*, %struct.obstack** %__o561, align 8
  call void @_obstack_newchunk(%struct.obstack* %179, i32 1)
  br label %if.end.568

if.end.568:                                       ; preds = %if.then.567, %while.end.559
  %180 = load i32, i32* %value515, align 4
  %conv569 = trunc i32 %180 to i8
  %181 = load %struct.obstack*, %struct.obstack** %__o561, align 8
  %next_free570 = getelementptr inbounds %struct.obstack, %struct.obstack* %181, i32 0, i32 3
  %182 = load i8*, i8** %next_free570, align 8
  %incdec.ptr571 = getelementptr inbounds i8, i8* %182, i32 1
  store i8* %incdec.ptr571, i8** %next_free570, align 8
  store i8 %conv569, i8* %182, align 1
  br label %sw.epilog.1098

sw.bb.572:                                        ; preds = %do_action
  store %struct.obstack* @string_stack, %struct.obstack** %__o574, align 8
  %183 = load %struct.obstack*, %struct.obstack** %__o574, align 8
  %next_free575 = getelementptr inbounds %struct.obstack, %struct.obstack* %183, i32 0, i32 3
  %184 = load i8*, i8** %next_free575, align 8
  %add.ptr576 = getelementptr inbounds i8, i8* %184, i64 1
  %185 = load %struct.obstack*, %struct.obstack** %__o574, align 8
  %chunk_limit577 = getelementptr inbounds %struct.obstack, %struct.obstack* %185, i32 0, i32 4
  %186 = load i8*, i8** %chunk_limit577, align 8
  %cmp578 = icmp ugt i8* %add.ptr576, %186
  br i1 %cmp578, label %if.then.580, label %if.end.581

if.then.580:                                      ; preds = %sw.bb.572
  %187 = load %struct.obstack*, %struct.obstack** %__o574, align 8
  call void @_obstack_newchunk(%struct.obstack* %187, i32 1)
  br label %if.end.581

if.end.581:                                       ; preds = %if.then.580, %sw.bb.572
  %188 = load %struct.obstack*, %struct.obstack** %__o574, align 8
  %next_free582 = getelementptr inbounds %struct.obstack, %struct.obstack* %188, i32 0, i32 3
  %189 = load i8*, i8** %next_free582, align 8
  %incdec.ptr583 = getelementptr inbounds i8, i8* %189, i32 1
  store i8* %incdec.ptr583, i8** %next_free582, align 8
  store i8 7, i8* %189, align 1
  br label %sw.epilog.1098

sw.bb.584:                                        ; preds = %do_action
  store %struct.obstack* @string_stack, %struct.obstack** %__o586, align 8
  %190 = load %struct.obstack*, %struct.obstack** %__o586, align 8
  %next_free587 = getelementptr inbounds %struct.obstack, %struct.obstack* %190, i32 0, i32 3
  %191 = load i8*, i8** %next_free587, align 8
  %add.ptr588 = getelementptr inbounds i8, i8* %191, i64 1
  %192 = load %struct.obstack*, %struct.obstack** %__o586, align 8
  %chunk_limit589 = getelementptr inbounds %struct.obstack, %struct.obstack* %192, i32 0, i32 4
  %193 = load i8*, i8** %chunk_limit589, align 8
  %cmp590 = icmp ugt i8* %add.ptr588, %193
  br i1 %cmp590, label %if.then.592, label %if.end.593

if.then.592:                                      ; preds = %sw.bb.584
  %194 = load %struct.obstack*, %struct.obstack** %__o586, align 8
  call void @_obstack_newchunk(%struct.obstack* %194, i32 1)
  br label %if.end.593

if.end.593:                                       ; preds = %if.then.592, %sw.bb.584
  %195 = load %struct.obstack*, %struct.obstack** %__o586, align 8
  %next_free594 = getelementptr inbounds %struct.obstack, %struct.obstack* %195, i32 0, i32 3
  %196 = load i8*, i8** %next_free594, align 8
  %incdec.ptr595 = getelementptr inbounds i8, i8* %196, i32 1
  store i8* %incdec.ptr595, i8** %next_free594, align 8
  store i8 8, i8* %196, align 1
  br label %sw.epilog.1098

sw.bb.596:                                        ; preds = %do_action
  store %struct.obstack* @string_stack, %struct.obstack** %__o598, align 8
  %197 = load %struct.obstack*, %struct.obstack** %__o598, align 8
  %next_free599 = getelementptr inbounds %struct.obstack, %struct.obstack* %197, i32 0, i32 3
  %198 = load i8*, i8** %next_free599, align 8
  %add.ptr600 = getelementptr inbounds i8, i8* %198, i64 1
  %199 = load %struct.obstack*, %struct.obstack** %__o598, align 8
  %chunk_limit601 = getelementptr inbounds %struct.obstack, %struct.obstack* %199, i32 0, i32 4
  %200 = load i8*, i8** %chunk_limit601, align 8
  %cmp602 = icmp ugt i8* %add.ptr600, %200
  br i1 %cmp602, label %if.then.604, label %if.end.605

if.then.604:                                      ; preds = %sw.bb.596
  %201 = load %struct.obstack*, %struct.obstack** %__o598, align 8
  call void @_obstack_newchunk(%struct.obstack* %201, i32 1)
  br label %if.end.605

if.end.605:                                       ; preds = %if.then.604, %sw.bb.596
  %202 = load %struct.obstack*, %struct.obstack** %__o598, align 8
  %next_free606 = getelementptr inbounds %struct.obstack, %struct.obstack* %202, i32 0, i32 3
  %203 = load i8*, i8** %next_free606, align 8
  %incdec.ptr607 = getelementptr inbounds i8, i8* %203, i32 1
  store i8* %incdec.ptr607, i8** %next_free606, align 8
  store i8 127, i8* %203, align 1
  br label %sw.epilog.1098

sw.bb.608:                                        ; preds = %do_action
  store %struct.obstack* @string_stack, %struct.obstack** %__o610, align 8
  %204 = load %struct.obstack*, %struct.obstack** %__o610, align 8
  %next_free611 = getelementptr inbounds %struct.obstack, %struct.obstack* %204, i32 0, i32 3
  %205 = load i8*, i8** %next_free611, align 8
  %add.ptr612 = getelementptr inbounds i8, i8* %205, i64 1
  %206 = load %struct.obstack*, %struct.obstack** %__o610, align 8
  %chunk_limit613 = getelementptr inbounds %struct.obstack, %struct.obstack* %206, i32 0, i32 4
  %207 = load i8*, i8** %chunk_limit613, align 8
  %cmp614 = icmp ugt i8* %add.ptr612, %207
  br i1 %cmp614, label %if.then.616, label %if.end.617

if.then.616:                                      ; preds = %sw.bb.608
  %208 = load %struct.obstack*, %struct.obstack** %__o610, align 8
  call void @_obstack_newchunk(%struct.obstack* %208, i32 1)
  br label %if.end.617

if.end.617:                                       ; preds = %if.then.616, %sw.bb.608
  %209 = load %struct.obstack*, %struct.obstack** %__o610, align 8
  %next_free618 = getelementptr inbounds %struct.obstack, %struct.obstack* %209, i32 0, i32 3
  %210 = load i8*, i8** %next_free618, align 8
  %incdec.ptr619 = getelementptr inbounds i8, i8* %210, i32 1
  store i8* %incdec.ptr619, i8** %next_free618, align 8
  store i8 27, i8* %210, align 1
  br label %sw.epilog.1098

sw.bb.620:                                        ; preds = %do_action
  store %struct.obstack* @string_stack, %struct.obstack** %__o622, align 8
  %211 = load %struct.obstack*, %struct.obstack** %__o622, align 8
  %next_free623 = getelementptr inbounds %struct.obstack, %struct.obstack* %211, i32 0, i32 3
  %212 = load i8*, i8** %next_free623, align 8
  %add.ptr624 = getelementptr inbounds i8, i8* %212, i64 1
  %213 = load %struct.obstack*, %struct.obstack** %__o622, align 8
  %chunk_limit625 = getelementptr inbounds %struct.obstack, %struct.obstack* %213, i32 0, i32 4
  %214 = load i8*, i8** %chunk_limit625, align 8
  %cmp626 = icmp ugt i8* %add.ptr624, %214
  br i1 %cmp626, label %if.then.628, label %if.end.629

if.then.628:                                      ; preds = %sw.bb.620
  %215 = load %struct.obstack*, %struct.obstack** %__o622, align 8
  call void @_obstack_newchunk(%struct.obstack* %215, i32 1)
  br label %if.end.629

if.end.629:                                       ; preds = %if.then.628, %sw.bb.620
  %216 = load %struct.obstack*, %struct.obstack** %__o622, align 8
  %next_free630 = getelementptr inbounds %struct.obstack, %struct.obstack* %216, i32 0, i32 3
  %217 = load i8*, i8** %next_free630, align 8
  %incdec.ptr631 = getelementptr inbounds i8, i8* %217, i32 1
  store i8* %incdec.ptr631, i8** %next_free630, align 8
  store i8 12, i8* %217, align 1
  br label %sw.epilog.1098

sw.bb.632:                                        ; preds = %do_action
  store %struct.obstack* @string_stack, %struct.obstack** %__o634, align 8
  %218 = load %struct.obstack*, %struct.obstack** %__o634, align 8
  %next_free635 = getelementptr inbounds %struct.obstack, %struct.obstack* %218, i32 0, i32 3
  %219 = load i8*, i8** %next_free635, align 8
  %add.ptr636 = getelementptr inbounds i8, i8* %219, i64 1
  %220 = load %struct.obstack*, %struct.obstack** %__o634, align 8
  %chunk_limit637 = getelementptr inbounds %struct.obstack, %struct.obstack* %220, i32 0, i32 4
  %221 = load i8*, i8** %chunk_limit637, align 8
  %cmp638 = icmp ugt i8* %add.ptr636, %221
  br i1 %cmp638, label %if.then.640, label %if.end.641

if.then.640:                                      ; preds = %sw.bb.632
  %222 = load %struct.obstack*, %struct.obstack** %__o634, align 8
  call void @_obstack_newchunk(%struct.obstack* %222, i32 1)
  br label %if.end.641

if.end.641:                                       ; preds = %if.then.640, %sw.bb.632
  %223 = load %struct.obstack*, %struct.obstack** %__o634, align 8
  %next_free642 = getelementptr inbounds %struct.obstack, %struct.obstack* %223, i32 0, i32 3
  %224 = load i8*, i8** %next_free642, align 8
  %incdec.ptr643 = getelementptr inbounds i8, i8* %224, i32 1
  store i8* %incdec.ptr643, i8** %next_free642, align 8
  store i8 10, i8* %224, align 1
  br label %sw.epilog.1098

sw.bb.644:                                        ; preds = %do_action
  store %struct.obstack* @string_stack, %struct.obstack** %__o646, align 8
  %225 = load %struct.obstack*, %struct.obstack** %__o646, align 8
  %next_free647 = getelementptr inbounds %struct.obstack, %struct.obstack* %225, i32 0, i32 3
  %226 = load i8*, i8** %next_free647, align 8
  %add.ptr648 = getelementptr inbounds i8, i8* %226, i64 1
  %227 = load %struct.obstack*, %struct.obstack** %__o646, align 8
  %chunk_limit649 = getelementptr inbounds %struct.obstack, %struct.obstack* %227, i32 0, i32 4
  %228 = load i8*, i8** %chunk_limit649, align 8
  %cmp650 = icmp ugt i8* %add.ptr648, %228
  br i1 %cmp650, label %if.then.652, label %if.end.653

if.then.652:                                      ; preds = %sw.bb.644
  %229 = load %struct.obstack*, %struct.obstack** %__o646, align 8
  call void @_obstack_newchunk(%struct.obstack* %229, i32 1)
  br label %if.end.653

if.end.653:                                       ; preds = %if.then.652, %sw.bb.644
  %230 = load %struct.obstack*, %struct.obstack** %__o646, align 8
  %next_free654 = getelementptr inbounds %struct.obstack, %struct.obstack* %230, i32 0, i32 3
  %231 = load i8*, i8** %next_free654, align 8
  %incdec.ptr655 = getelementptr inbounds i8, i8* %231, i32 1
  store i8* %incdec.ptr655, i8** %next_free654, align 8
  store i8 13, i8* %231, align 1
  br label %sw.epilog.1098

sw.bb.656:                                        ; preds = %do_action
  store %struct.obstack* @string_stack, %struct.obstack** %__o658, align 8
  %232 = load %struct.obstack*, %struct.obstack** %__o658, align 8
  %next_free659 = getelementptr inbounds %struct.obstack, %struct.obstack* %232, i32 0, i32 3
  %233 = load i8*, i8** %next_free659, align 8
  %add.ptr660 = getelementptr inbounds i8, i8* %233, i64 1
  %234 = load %struct.obstack*, %struct.obstack** %__o658, align 8
  %chunk_limit661 = getelementptr inbounds %struct.obstack, %struct.obstack* %234, i32 0, i32 4
  %235 = load i8*, i8** %chunk_limit661, align 8
  %cmp662 = icmp ugt i8* %add.ptr660, %235
  br i1 %cmp662, label %if.then.664, label %if.end.665

if.then.664:                                      ; preds = %sw.bb.656
  %236 = load %struct.obstack*, %struct.obstack** %__o658, align 8
  call void @_obstack_newchunk(%struct.obstack* %236, i32 1)
  br label %if.end.665

if.end.665:                                       ; preds = %if.then.664, %sw.bb.656
  %237 = load %struct.obstack*, %struct.obstack** %__o658, align 8
  %next_free666 = getelementptr inbounds %struct.obstack, %struct.obstack* %237, i32 0, i32 3
  %238 = load i8*, i8** %next_free666, align 8
  %incdec.ptr667 = getelementptr inbounds i8, i8* %238, i32 1
  store i8* %incdec.ptr667, i8** %next_free666, align 8
  store i8 9, i8* %238, align 1
  br label %sw.epilog.1098

sw.bb.668:                                        ; preds = %do_action
  store %struct.obstack* @string_stack, %struct.obstack** %__o670, align 8
  %239 = load %struct.obstack*, %struct.obstack** %__o670, align 8
  %next_free671 = getelementptr inbounds %struct.obstack, %struct.obstack* %239, i32 0, i32 3
  %240 = load i8*, i8** %next_free671, align 8
  %add.ptr672 = getelementptr inbounds i8, i8* %240, i64 1
  %241 = load %struct.obstack*, %struct.obstack** %__o670, align 8
  %chunk_limit673 = getelementptr inbounds %struct.obstack, %struct.obstack* %241, i32 0, i32 4
  %242 = load i8*, i8** %chunk_limit673, align 8
  %cmp674 = icmp ugt i8* %add.ptr672, %242
  br i1 %cmp674, label %if.then.676, label %if.end.677

if.then.676:                                      ; preds = %sw.bb.668
  %243 = load %struct.obstack*, %struct.obstack** %__o670, align 8
  call void @_obstack_newchunk(%struct.obstack* %243, i32 1)
  br label %if.end.677

if.end.677:                                       ; preds = %if.then.676, %sw.bb.668
  %244 = load %struct.obstack*, %struct.obstack** %__o670, align 8
  %next_free678 = getelementptr inbounds %struct.obstack, %struct.obstack* %244, i32 0, i32 3
  %245 = load i8*, i8** %next_free678, align 8
  %incdec.ptr679 = getelementptr inbounds i8, i8* %245, i32 1
  store i8* %incdec.ptr679, i8** %next_free678, align 8
  store i8 11, i8* %245, align 1
  br label %sw.epilog.1098

sw.bb.680:                                        ; preds = %do_action
  store %struct.obstack* @string_stack, %struct.obstack** %__o682, align 8
  %246 = load %struct.obstack*, %struct.obstack** %__o682, align 8
  %next_free683 = getelementptr inbounds %struct.obstack, %struct.obstack* %246, i32 0, i32 3
  %247 = load i8*, i8** %next_free683, align 8
  %add.ptr684 = getelementptr inbounds i8, i8* %247, i64 1
  %248 = load %struct.obstack*, %struct.obstack** %__o682, align 8
  %chunk_limit685 = getelementptr inbounds %struct.obstack, %struct.obstack* %248, i32 0, i32 4
  %249 = load i8*, i8** %chunk_limit685, align 8
  %cmp686 = icmp ugt i8* %add.ptr684, %249
  br i1 %cmp686, label %if.then.688, label %if.end.689

if.then.688:                                      ; preds = %sw.bb.680
  %250 = load %struct.obstack*, %struct.obstack** %__o682, align 8
  call void @_obstack_newchunk(%struct.obstack* %250, i32 1)
  br label %if.end.689

if.end.689:                                       ; preds = %if.then.688, %sw.bb.680
  %251 = load i8*, i8** @sshtext, align 8
  %arrayidx690 = getelementptr inbounds i8, i8* %251, i64 1
  %252 = load i8, i8* %arrayidx690, align 1
  %253 = load %struct.obstack*, %struct.obstack** %__o682, align 8
  %next_free691 = getelementptr inbounds %struct.obstack, %struct.obstack* %253, i32 0, i32 3
  %254 = load i8*, i8** %next_free691, align 8
  %incdec.ptr692 = getelementptr inbounds i8, i8* %254, i32 1
  store i8* %incdec.ptr692, i8** %next_free691, align 8
  store i8 %252, i8* %254, align 1
  br label %sw.epilog.1098

sw.bb.693:                                        ; preds = %do_action
  %call694 = call i8* @gettext(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.130, i32 0, i32 0)) #3
  call void @ssherror(i8* %call694)
  br label %sw.epilog.1098

sw.bb.695:                                        ; preds = %do_action
  store %struct.obstack* @string_stack, %struct.obstack** %__o697, align 8
  %255 = load i32, i32* @sshleng, align 4
  store i32 %255, i32* %__len, align 4
  %256 = load %struct.obstack*, %struct.obstack** %__o697, align 8
  %next_free699 = getelementptr inbounds %struct.obstack, %struct.obstack* %256, i32 0, i32 3
  %257 = load i8*, i8** %next_free699, align 8
  %258 = load i32, i32* %__len, align 4
  %idx.ext = sext i32 %258 to i64
  %add.ptr700 = getelementptr inbounds i8, i8* %257, i64 %idx.ext
  %259 = load %struct.obstack*, %struct.obstack** %__o697, align 8
  %chunk_limit701 = getelementptr inbounds %struct.obstack, %struct.obstack* %259, i32 0, i32 4
  %260 = load i8*, i8** %chunk_limit701, align 8
  %cmp702 = icmp ugt i8* %add.ptr700, %260
  br i1 %cmp702, label %if.then.704, label %if.end.705

if.then.704:                                      ; preds = %sw.bb.695
  %261 = load %struct.obstack*, %struct.obstack** %__o697, align 8
  %262 = load i32, i32* %__len, align 4
  call void @_obstack_newchunk(%struct.obstack* %261, i32 %262)
  br label %if.end.705

if.end.705:                                       ; preds = %if.then.704, %sw.bb.695
  %263 = load %struct.obstack*, %struct.obstack** %__o697, align 8
  %next_free706 = getelementptr inbounds %struct.obstack, %struct.obstack* %263, i32 0, i32 3
  %264 = load i8*, i8** %next_free706, align 8
  %265 = load i8*, i8** @sshtext, align 8
  %266 = load i32, i32* %__len, align 4
  %conv707 = sext i32 %266 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %264, i8* %265, i64 %conv707, i32 1, i1 false)
  %267 = load i32, i32* %__len, align 4
  %268 = load %struct.obstack*, %struct.obstack** %__o697, align 8
  %next_free708 = getelementptr inbounds %struct.obstack, %struct.obstack* %268, i32 0, i32 3
  %269 = load i8*, i8** %next_free708, align 8
  %idx.ext709 = sext i32 %267 to i64
  %add.ptr710 = getelementptr inbounds i8, i8* %269, i64 %idx.ext709
  store i8* %add.ptr710, i8** %next_free708, align 8
  br label %sw.epilog.1098

sw.bb.711:                                        ; preds = %do_action
  store %struct.obstack* @string_stack, %struct.obstack** %__o715, align 8
  %270 = load %struct.obstack*, %struct.obstack** %__o715, align 8
  %next_free716 = getelementptr inbounds %struct.obstack, %struct.obstack* %270, i32 0, i32 3
  %271 = load i8*, i8** %next_free716, align 8
  %add.ptr717 = getelementptr inbounds i8, i8* %271, i64 1
  %272 = load %struct.obstack*, %struct.obstack** %__o715, align 8
  %chunk_limit718 = getelementptr inbounds %struct.obstack, %struct.obstack* %272, i32 0, i32 4
  %273 = load i8*, i8** %chunk_limit718, align 8
  %cmp719 = icmp ugt i8* %add.ptr717, %273
  br i1 %cmp719, label %if.then.721, label %if.end.722

if.then.721:                                      ; preds = %sw.bb.711
  %274 = load %struct.obstack*, %struct.obstack** %__o715, align 8
  call void @_obstack_newchunk(%struct.obstack* %274, i32 1)
  br label %if.end.722

if.end.722:                                       ; preds = %if.then.721, %sw.bb.711
  %275 = load %struct.obstack*, %struct.obstack** %__o715, align 8
  %next_free723 = getelementptr inbounds %struct.obstack, %struct.obstack* %275, i32 0, i32 3
  %276 = load i8*, i8** %next_free723, align 8
  %incdec.ptr724 = getelementptr inbounds i8, i8* %276, i32 1
  store i8* %incdec.ptr724, i8** %next_free723, align 8
  store i8 0, i8* %276, align 1
  store %struct.obstack* @string_stack, %struct.obstack** %__o726, align 8
  %277 = load %struct.obstack*, %struct.obstack** %__o726, align 8
  %next_free728 = getelementptr inbounds %struct.obstack, %struct.obstack* %277, i32 0, i32 3
  %278 = load i8*, i8** %next_free728, align 8
  %279 = load %struct.obstack*, %struct.obstack** %__o726, align 8
  %object_base729 = getelementptr inbounds %struct.obstack, %struct.obstack* %279, i32 0, i32 2
  %280 = load i8*, i8** %object_base729, align 8
  %sub.ptr.lhs.cast730 = ptrtoint i8* %278 to i64
  %sub.ptr.rhs.cast731 = ptrtoint i8* %280 to i64
  %sub.ptr.sub732 = sub i64 %sub.ptr.lhs.cast730, %sub.ptr.rhs.cast731
  %conv733 = trunc i64 %sub.ptr.sub732 to i32
  store i32 %conv733, i32* %tmp727
  %281 = load i32, i32* %tmp727
  store i32 %281, i32* %pattern_len, align 4
  store %struct.obstack* @string_stack, %struct.obstack** %__o1735, align 8
  %282 = load %struct.obstack*, %struct.obstack** %__o1735, align 8
  %object_base738 = getelementptr inbounds %struct.obstack, %struct.obstack* %282, i32 0, i32 2
  %283 = load i8*, i8** %object_base738, align 8
  store i8* %283, i8** %value737, align 8
  %284 = load %struct.obstack*, %struct.obstack** %__o1735, align 8
  %next_free739 = getelementptr inbounds %struct.obstack, %struct.obstack* %284, i32 0, i32 3
  %285 = load i8*, i8** %next_free739, align 8
  %286 = load i8*, i8** %value737, align 8
  %cmp740 = icmp eq i8* %285, %286
  br i1 %cmp740, label %if.then.742, label %if.end.747

if.then.742:                                      ; preds = %if.end.722
  %287 = load %struct.obstack*, %struct.obstack** %__o1735, align 8
  %maybe_empty_object743 = getelementptr inbounds %struct.obstack, %struct.obstack* %287, i32 0, i32 10
  %bf.load744 = load i8, i8* %maybe_empty_object743, align 8
  %bf.clear745 = and i8 %bf.load744, -3
  %bf.set746 = or i8 %bf.clear745, 2
  store i8 %bf.set746, i8* %maybe_empty_object743, align 8
  br label %if.end.747

if.end.747:                                       ; preds = %if.then.742, %if.end.722
  %288 = load %struct.obstack*, %struct.obstack** %__o1735, align 8
  %next_free748 = getelementptr inbounds %struct.obstack, %struct.obstack* %288, i32 0, i32 3
  %289 = load i8*, i8** %next_free748, align 8
  %sub.ptr.lhs.cast749 = ptrtoint i8* %289 to i64
  %sub.ptr.sub750 = sub i64 %sub.ptr.lhs.cast749, 0
  %290 = load %struct.obstack*, %struct.obstack** %__o1735, align 8
  %alignment_mask751 = getelementptr inbounds %struct.obstack, %struct.obstack* %290, i32 0, i32 6
  %291 = load i32, i32* %alignment_mask751, align 4
  %conv752 = sext i32 %291 to i64
  %add753 = add nsw i64 %sub.ptr.sub750, %conv752
  %292 = load %struct.obstack*, %struct.obstack** %__o1735, align 8
  %alignment_mask754 = getelementptr inbounds %struct.obstack, %struct.obstack* %292, i32 0, i32 6
  %293 = load i32, i32* %alignment_mask754, align 4
  %neg755 = xor i32 %293, -1
  %conv756 = sext i32 %neg755 to i64
  %and757 = and i64 %add753, %conv756
  %add.ptr758 = getelementptr inbounds i8, i8* null, i64 %and757
  %294 = load %struct.obstack*, %struct.obstack** %__o1735, align 8
  %next_free759 = getelementptr inbounds %struct.obstack, %struct.obstack* %294, i32 0, i32 3
  store i8* %add.ptr758, i8** %next_free759, align 8
  %295 = load %struct.obstack*, %struct.obstack** %__o1735, align 8
  %next_free760 = getelementptr inbounds %struct.obstack, %struct.obstack* %295, i32 0, i32 3
  %296 = load i8*, i8** %next_free760, align 8
  %297 = load %struct.obstack*, %struct.obstack** %__o1735, align 8
  %chunk761 = getelementptr inbounds %struct.obstack, %struct.obstack* %297, i32 0, i32 1
  %298 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk761, align 8
  %299 = bitcast %struct._obstack_chunk* %298 to i8*
  %sub.ptr.lhs.cast762 = ptrtoint i8* %296 to i64
  %sub.ptr.rhs.cast763 = ptrtoint i8* %299 to i64
  %sub.ptr.sub764 = sub i64 %sub.ptr.lhs.cast762, %sub.ptr.rhs.cast763
  %300 = load %struct.obstack*, %struct.obstack** %__o1735, align 8
  %chunk_limit765 = getelementptr inbounds %struct.obstack, %struct.obstack* %300, i32 0, i32 4
  %301 = load i8*, i8** %chunk_limit765, align 8
  %302 = load %struct.obstack*, %struct.obstack** %__o1735, align 8
  %chunk766 = getelementptr inbounds %struct.obstack, %struct.obstack* %302, i32 0, i32 1
  %303 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk766, align 8
  %304 = bitcast %struct._obstack_chunk* %303 to i8*
  %sub.ptr.lhs.cast767 = ptrtoint i8* %301 to i64
  %sub.ptr.rhs.cast768 = ptrtoint i8* %304 to i64
  %sub.ptr.sub769 = sub i64 %sub.ptr.lhs.cast767, %sub.ptr.rhs.cast768
  %cmp770 = icmp sgt i64 %sub.ptr.sub764, %sub.ptr.sub769
  br i1 %cmp770, label %if.then.772, label %if.end.775

if.then.772:                                      ; preds = %if.end.747
  %305 = load %struct.obstack*, %struct.obstack** %__o1735, align 8
  %chunk_limit773 = getelementptr inbounds %struct.obstack, %struct.obstack* %305, i32 0, i32 4
  %306 = load i8*, i8** %chunk_limit773, align 8
  %307 = load %struct.obstack*, %struct.obstack** %__o1735, align 8
  %next_free774 = getelementptr inbounds %struct.obstack, %struct.obstack* %307, i32 0, i32 3
  store i8* %306, i8** %next_free774, align 8
  br label %if.end.775

if.end.775:                                       ; preds = %if.then.772, %if.end.747
  %308 = load %struct.obstack*, %struct.obstack** %__o1735, align 8
  %next_free776 = getelementptr inbounds %struct.obstack, %struct.obstack* %308, i32 0, i32 3
  %309 = load i8*, i8** %next_free776, align 8
  %310 = load %struct.obstack*, %struct.obstack** %__o1735, align 8
  %object_base777 = getelementptr inbounds %struct.obstack, %struct.obstack* %310, i32 0, i32 2
  store i8* %309, i8** %object_base777, align 8
  %311 = load i8*, i8** %value737, align 8
  store i8* %311, i8** %tmp778
  %312 = load i8*, i8** %tmp778
  store i8* %312, i8** %pattern, align 8
  store %struct.obstack* @string_stack, %struct.obstack** %__o780, align 8
  %313 = load i8*, i8** %pattern, align 8
  store i8* %313, i8** %__obj782, align 8
  %314 = load i8*, i8** %__obj782, align 8
  %315 = load %struct.obstack*, %struct.obstack** %__o780, align 8
  %chunk783 = getelementptr inbounds %struct.obstack, %struct.obstack* %315, i32 0, i32 1
  %316 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk783, align 8
  %317 = bitcast %struct._obstack_chunk* %316 to i8*
  %cmp784 = icmp ugt i8* %314, %317
  br i1 %cmp784, label %land.lhs.true.786, label %if.else.793

land.lhs.true.786:                                ; preds = %if.end.775
  %318 = load i8*, i8** %__obj782, align 8
  %319 = load %struct.obstack*, %struct.obstack** %__o780, align 8
  %chunk_limit787 = getelementptr inbounds %struct.obstack, %struct.obstack* %319, i32 0, i32 4
  %320 = load i8*, i8** %chunk_limit787, align 8
  %cmp788 = icmp ult i8* %318, %320
  br i1 %cmp788, label %if.then.790, label %if.else.793

if.then.790:                                      ; preds = %land.lhs.true.786
  %321 = load i8*, i8** %__obj782, align 8
  %322 = load %struct.obstack*, %struct.obstack** %__o780, align 8
  %object_base791 = getelementptr inbounds %struct.obstack, %struct.obstack* %322, i32 0, i32 2
  store i8* %321, i8** %object_base791, align 8
  %323 = load %struct.obstack*, %struct.obstack** %__o780, align 8
  %next_free792 = getelementptr inbounds %struct.obstack, %struct.obstack* %323, i32 0, i32 3
  store i8* %321, i8** %next_free792, align 8
  br label %if.end.794

if.else.793:                                      ; preds = %land.lhs.true.786, %if.end.775
  %324 = load %struct.obstack*, %struct.obstack** %__o780, align 8
  %325 = load i8*, i8** %__obj782, align 8
  call void @obstack_free(%struct.obstack* %324, i8* %325)
  br label %if.end.794

if.end.794:                                       ; preds = %if.else.793, %if.then.790
  %call795 = call i8* @xmalloc(i64 16)
  %326 = bitcast i8* %call795 to %struct.pattern*
  store %struct.pattern* %326, %struct.pattern** bitcast (%union.YYSTYPE* @sshlval to %struct.pattern**), align 8
  %327 = load i32, i32* %pattern_len, align 4
  %sub796 = sub nsw i32 %327, 1
  %conv797 = sext i32 %sub796 to i64
  %328 = load %struct.pattern*, %struct.pattern** bitcast (%union.YYSTYPE* @sshlval to %struct.pattern**), align 8
  %len = getelementptr inbounds %struct.pattern, %struct.pattern* %328, i32 0, i32 1
  store i64 %conv797, i64* %len, align 8
  %329 = load i32, i32* %pattern_len, align 4
  %conv798 = sext i32 %329 to i64
  %mul799 = mul i64 1, %conv798
  %call800 = call i8* @xmalloc(i64 %mul799)
  %330 = load %struct.pattern*, %struct.pattern** bitcast (%union.YYSTYPE* @sshlval to %struct.pattern**), align 8
  %pattern801 = getelementptr inbounds %struct.pattern, %struct.pattern* %330, i32 0, i32 0
  store i8* %call800, i8** %pattern801, align 8
  %331 = load %struct.pattern*, %struct.pattern** bitcast (%union.YYSTYPE* @sshlval to %struct.pattern**), align 8
  %pattern802 = getelementptr inbounds %struct.pattern, %struct.pattern* %331, i32 0, i32 0
  %332 = load i8*, i8** %pattern802, align 8
  %333 = load i8*, i8** %pattern, align 8
  %334 = load i32, i32* %pattern_len, align 4
  %conv803 = sext i32 %334 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %332, i8* %333, i64 %conv803, i32 1, i1 false)
  store i32 1, i32* @yy_start, align 4
  store i32 287, i32* %retval
  br label %return

sw.bb.804:                                        ; preds = %do_action
  %335 = load i8*, i8** @sshtext, align 8
  %arrayidx807 = getelementptr inbounds i8, i8* %335, i64 1
  %336 = load i8, i8* %arrayidx807, align 1
  %conv808 = sext i8 %336 to i32
  %sub809 = sub nsw i32 %conv808, 48
  store i32 %sub809, i32* %value806, align 4
  %337 = load i8*, i8** @sshtext, align 8
  %add.ptr812 = getelementptr inbounds i8, i8* %337, i64 2
  store i8* %add.ptr812, i8** %cursor811, align 8
  br label %while.cond.813

while.cond.813:                                   ; preds = %while.body.815, %sw.bb.804
  %338 = load i8*, i8** %cursor811, align 8
  %339 = load i8, i8* %338, align 1
  %tobool814 = icmp ne i8 %339, 0
  br i1 %tobool814, label %while.body.815, label %while.end.821

while.body.815:                                   ; preds = %while.cond.813
  %340 = load i32, i32* %value806, align 4
  %mul816 = mul nsw i32 8, %340
  %341 = load i8*, i8** %cursor811, align 8
  %incdec.ptr817 = getelementptr inbounds i8, i8* %341, i32 1
  store i8* %incdec.ptr817, i8** %cursor811, align 8
  %342 = load i8, i8* %341, align 1
  %conv818 = sext i8 %342 to i32
  %add819 = add nsw i32 %mul816, %conv818
  %sub820 = sub nsw i32 %add819, 48
  store i32 %sub820, i32* %value806, align 4
  br label %while.cond.813

while.end.821:                                    ; preds = %while.cond.813
  store %struct.obstack* @string_stack, %struct.obstack** %__o823, align 8
  %343 = load %struct.obstack*, %struct.obstack** %__o823, align 8
  %next_free824 = getelementptr inbounds %struct.obstack, %struct.obstack* %343, i32 0, i32 3
  %344 = load i8*, i8** %next_free824, align 8
  %add.ptr825 = getelementptr inbounds i8, i8* %344, i64 1
  %345 = load %struct.obstack*, %struct.obstack** %__o823, align 8
  %chunk_limit826 = getelementptr inbounds %struct.obstack, %struct.obstack* %345, i32 0, i32 4
  %346 = load i8*, i8** %chunk_limit826, align 8
  %cmp827 = icmp ugt i8* %add.ptr825, %346
  br i1 %cmp827, label %if.then.829, label %if.end.830

if.then.829:                                      ; preds = %while.end.821
  %347 = load %struct.obstack*, %struct.obstack** %__o823, align 8
  call void @_obstack_newchunk(%struct.obstack* %347, i32 1)
  br label %if.end.830

if.end.830:                                       ; preds = %if.then.829, %while.end.821
  %348 = load i32, i32* %value806, align 4
  %conv831 = trunc i32 %348 to i8
  %349 = load %struct.obstack*, %struct.obstack** %__o823, align 8
  %next_free832 = getelementptr inbounds %struct.obstack, %struct.obstack* %349, i32 0, i32 3
  %350 = load i8*, i8** %next_free832, align 8
  %incdec.ptr833 = getelementptr inbounds i8, i8* %350, i32 1
  store i8* %incdec.ptr833, i8** %next_free832, align 8
  store i8 %conv831, i8* %350, align 1
  br label %sw.epilog.1098

sw.bb.834:                                        ; preds = %do_action
  store i32 0, i32* %value836, align 4
  %351 = load i8*, i8** @sshtext, align 8
  %add.ptr839 = getelementptr inbounds i8, i8* %351, i64 2
  store i8* %add.ptr839, i8** %cursor838, align 8
  br label %while.cond.840

while.cond.840:                                   ; preds = %if.end.879, %sw.bb.834
  %352 = load i8*, i8** %cursor838, align 8
  %353 = load i8, i8* %352, align 1
  %tobool841 = icmp ne i8 %353, 0
  br i1 %tobool841, label %while.body.842, label %while.end.880

while.body.842:                                   ; preds = %while.cond.840
  %354 = load i8*, i8** %cursor838, align 8
  %355 = load i8, i8* %354, align 1
  %conv843 = sext i8 %355 to i32
  %cmp844 = icmp sge i32 %conv843, 97
  br i1 %cmp844, label %land.lhs.true.846, label %if.else.857

land.lhs.true.846:                                ; preds = %while.body.842
  %356 = load i8*, i8** %cursor838, align 8
  %357 = load i8, i8* %356, align 1
  %conv847 = sext i8 %357 to i32
  %cmp848 = icmp sle i32 %conv847, 102
  br i1 %cmp848, label %if.then.850, label %if.else.857

if.then.850:                                      ; preds = %land.lhs.true.846
  %358 = load i32, i32* %value836, align 4
  %mul851 = mul nsw i32 16, %358
  %359 = load i8*, i8** %cursor838, align 8
  %incdec.ptr852 = getelementptr inbounds i8, i8* %359, i32 1
  store i8* %incdec.ptr852, i8** %cursor838, align 8
  %360 = load i8, i8* %359, align 1
  %conv853 = sext i8 %360 to i32
  %add854 = add nsw i32 %mul851, %conv853
  %sub855 = sub nsw i32 %add854, 97
  %add856 = add nsw i32 %sub855, 10
  store i32 %add856, i32* %value836, align 4
  br label %if.end.879

if.else.857:                                      ; preds = %land.lhs.true.846, %while.body.842
  %361 = load i8*, i8** %cursor838, align 8
  %362 = load i8, i8* %361, align 1
  %conv858 = sext i8 %362 to i32
  %cmp859 = icmp sge i32 %conv858, 65
  br i1 %cmp859, label %land.lhs.true.861, label %if.else.872

land.lhs.true.861:                                ; preds = %if.else.857
  %363 = load i8*, i8** %cursor838, align 8
  %364 = load i8, i8* %363, align 1
  %conv862 = sext i8 %364 to i32
  %cmp863 = icmp sle i32 %conv862, 70
  br i1 %cmp863, label %if.then.865, label %if.else.872

if.then.865:                                      ; preds = %land.lhs.true.861
  %365 = load i32, i32* %value836, align 4
  %mul866 = mul nsw i32 16, %365
  %366 = load i8*, i8** %cursor838, align 8
  %incdec.ptr867 = getelementptr inbounds i8, i8* %366, i32 1
  store i8* %incdec.ptr867, i8** %cursor838, align 8
  %367 = load i8, i8* %366, align 1
  %conv868 = sext i8 %367 to i32
  %add869 = add nsw i32 %mul866, %conv868
  %sub870 = sub nsw i32 %add869, 65
  %add871 = add nsw i32 %sub870, 10
  store i32 %add871, i32* %value836, align 4
  br label %if.end.878

if.else.872:                                      ; preds = %land.lhs.true.861, %if.else.857
  %368 = load i32, i32* %value836, align 4
  %mul873 = mul nsw i32 16, %368
  %369 = load i8*, i8** %cursor838, align 8
  %incdec.ptr874 = getelementptr inbounds i8, i8* %369, i32 1
  store i8* %incdec.ptr874, i8** %cursor838, align 8
  %370 = load i8, i8* %369, align 1
  %conv875 = sext i8 %370 to i32
  %add876 = add nsw i32 %mul873, %conv875
  %sub877 = sub nsw i32 %add876, 48
  store i32 %sub877, i32* %value836, align 4
  br label %if.end.878

if.end.878:                                       ; preds = %if.else.872, %if.then.865
  br label %if.end.879

if.end.879:                                       ; preds = %if.end.878, %if.then.850
  br label %while.cond.840

while.end.880:                                    ; preds = %while.cond.840
  store %struct.obstack* @string_stack, %struct.obstack** %__o882, align 8
  %371 = load %struct.obstack*, %struct.obstack** %__o882, align 8
  %next_free883 = getelementptr inbounds %struct.obstack, %struct.obstack* %371, i32 0, i32 3
  %372 = load i8*, i8** %next_free883, align 8
  %add.ptr884 = getelementptr inbounds i8, i8* %372, i64 1
  %373 = load %struct.obstack*, %struct.obstack** %__o882, align 8
  %chunk_limit885 = getelementptr inbounds %struct.obstack, %struct.obstack* %373, i32 0, i32 4
  %374 = load i8*, i8** %chunk_limit885, align 8
  %cmp886 = icmp ugt i8* %add.ptr884, %374
  br i1 %cmp886, label %if.then.888, label %if.end.889

if.then.888:                                      ; preds = %while.end.880
  %375 = load %struct.obstack*, %struct.obstack** %__o882, align 8
  call void @_obstack_newchunk(%struct.obstack* %375, i32 1)
  br label %if.end.889

if.end.889:                                       ; preds = %if.then.888, %while.end.880
  %376 = load i32, i32* %value836, align 4
  %conv890 = trunc i32 %376 to i8
  %377 = load %struct.obstack*, %struct.obstack** %__o882, align 8
  %next_free891 = getelementptr inbounds %struct.obstack, %struct.obstack* %377, i32 0, i32 3
  %378 = load i8*, i8** %next_free891, align 8
  %incdec.ptr892 = getelementptr inbounds i8, i8* %378, i32 1
  store i8* %incdec.ptr892, i8** %next_free891, align 8
  store i8 %conv890, i8* %378, align 1
  br label %sw.epilog.1098

sw.bb.893:                                        ; preds = %do_action
  store %struct.obstack* @string_stack, %struct.obstack** %__o895, align 8
  %379 = load %struct.obstack*, %struct.obstack** %__o895, align 8
  %next_free896 = getelementptr inbounds %struct.obstack, %struct.obstack* %379, i32 0, i32 3
  %380 = load i8*, i8** %next_free896, align 8
  %add.ptr897 = getelementptr inbounds i8, i8* %380, i64 1
  %381 = load %struct.obstack*, %struct.obstack** %__o895, align 8
  %chunk_limit898 = getelementptr inbounds %struct.obstack, %struct.obstack* %381, i32 0, i32 4
  %382 = load i8*, i8** %chunk_limit898, align 8
  %cmp899 = icmp ugt i8* %add.ptr897, %382
  br i1 %cmp899, label %if.then.901, label %if.end.902

if.then.901:                                      ; preds = %sw.bb.893
  %383 = load %struct.obstack*, %struct.obstack** %__o895, align 8
  call void @_obstack_newchunk(%struct.obstack* %383, i32 1)
  br label %if.end.902

if.end.902:                                       ; preds = %if.then.901, %sw.bb.893
  %384 = load %struct.obstack*, %struct.obstack** %__o895, align 8
  %next_free903 = getelementptr inbounds %struct.obstack, %struct.obstack* %384, i32 0, i32 3
  %385 = load i8*, i8** %next_free903, align 8
  %incdec.ptr904 = getelementptr inbounds i8, i8* %385, i32 1
  store i8* %incdec.ptr904, i8** %next_free903, align 8
  store i8 7, i8* %385, align 1
  br label %sw.epilog.1098

sw.bb.905:                                        ; preds = %do_action
  store %struct.obstack* @string_stack, %struct.obstack** %__o907, align 8
  %386 = load %struct.obstack*, %struct.obstack** %__o907, align 8
  %next_free908 = getelementptr inbounds %struct.obstack, %struct.obstack* %386, i32 0, i32 3
  %387 = load i8*, i8** %next_free908, align 8
  %add.ptr909 = getelementptr inbounds i8, i8* %387, i64 1
  %388 = load %struct.obstack*, %struct.obstack** %__o907, align 8
  %chunk_limit910 = getelementptr inbounds %struct.obstack, %struct.obstack* %388, i32 0, i32 4
  %389 = load i8*, i8** %chunk_limit910, align 8
  %cmp911 = icmp ugt i8* %add.ptr909, %389
  br i1 %cmp911, label %if.then.913, label %if.end.914

if.then.913:                                      ; preds = %sw.bb.905
  %390 = load %struct.obstack*, %struct.obstack** %__o907, align 8
  call void @_obstack_newchunk(%struct.obstack* %390, i32 1)
  br label %if.end.914

if.end.914:                                       ; preds = %if.then.913, %sw.bb.905
  %391 = load %struct.obstack*, %struct.obstack** %__o907, align 8
  %next_free915 = getelementptr inbounds %struct.obstack, %struct.obstack* %391, i32 0, i32 3
  %392 = load i8*, i8** %next_free915, align 8
  %incdec.ptr916 = getelementptr inbounds i8, i8* %392, i32 1
  store i8* %incdec.ptr916, i8** %next_free915, align 8
  store i8 8, i8* %392, align 1
  br label %sw.epilog.1098

sw.bb.917:                                        ; preds = %do_action
  store %struct.obstack* @string_stack, %struct.obstack** %__o919, align 8
  %393 = load %struct.obstack*, %struct.obstack** %__o919, align 8
  %next_free920 = getelementptr inbounds %struct.obstack, %struct.obstack* %393, i32 0, i32 3
  %394 = load i8*, i8** %next_free920, align 8
  %add.ptr921 = getelementptr inbounds i8, i8* %394, i64 1
  %395 = load %struct.obstack*, %struct.obstack** %__o919, align 8
  %chunk_limit922 = getelementptr inbounds %struct.obstack, %struct.obstack* %395, i32 0, i32 4
  %396 = load i8*, i8** %chunk_limit922, align 8
  %cmp923 = icmp ugt i8* %add.ptr921, %396
  br i1 %cmp923, label %if.then.925, label %if.end.926

if.then.925:                                      ; preds = %sw.bb.917
  %397 = load %struct.obstack*, %struct.obstack** %__o919, align 8
  call void @_obstack_newchunk(%struct.obstack* %397, i32 1)
  br label %if.end.926

if.end.926:                                       ; preds = %if.then.925, %sw.bb.917
  %398 = load %struct.obstack*, %struct.obstack** %__o919, align 8
  %next_free927 = getelementptr inbounds %struct.obstack, %struct.obstack* %398, i32 0, i32 3
  %399 = load i8*, i8** %next_free927, align 8
  %incdec.ptr928 = getelementptr inbounds i8, i8* %399, i32 1
  store i8* %incdec.ptr928, i8** %next_free927, align 8
  store i8 127, i8* %399, align 1
  br label %sw.epilog.1098

sw.bb.929:                                        ; preds = %do_action
  store %struct.obstack* @string_stack, %struct.obstack** %__o931, align 8
  %400 = load %struct.obstack*, %struct.obstack** %__o931, align 8
  %next_free932 = getelementptr inbounds %struct.obstack, %struct.obstack* %400, i32 0, i32 3
  %401 = load i8*, i8** %next_free932, align 8
  %add.ptr933 = getelementptr inbounds i8, i8* %401, i64 1
  %402 = load %struct.obstack*, %struct.obstack** %__o931, align 8
  %chunk_limit934 = getelementptr inbounds %struct.obstack, %struct.obstack* %402, i32 0, i32 4
  %403 = load i8*, i8** %chunk_limit934, align 8
  %cmp935 = icmp ugt i8* %add.ptr933, %403
  br i1 %cmp935, label %if.then.937, label %if.end.938

if.then.937:                                      ; preds = %sw.bb.929
  %404 = load %struct.obstack*, %struct.obstack** %__o931, align 8
  call void @_obstack_newchunk(%struct.obstack* %404, i32 1)
  br label %if.end.938

if.end.938:                                       ; preds = %if.then.937, %sw.bb.929
  %405 = load %struct.obstack*, %struct.obstack** %__o931, align 8
  %next_free939 = getelementptr inbounds %struct.obstack, %struct.obstack* %405, i32 0, i32 3
  %406 = load i8*, i8** %next_free939, align 8
  %incdec.ptr940 = getelementptr inbounds i8, i8* %406, i32 1
  store i8* %incdec.ptr940, i8** %next_free939, align 8
  store i8 27, i8* %406, align 1
  br label %sw.epilog.1098

sw.bb.941:                                        ; preds = %do_action
  store %struct.obstack* @string_stack, %struct.obstack** %__o943, align 8
  %407 = load %struct.obstack*, %struct.obstack** %__o943, align 8
  %next_free944 = getelementptr inbounds %struct.obstack, %struct.obstack* %407, i32 0, i32 3
  %408 = load i8*, i8** %next_free944, align 8
  %add.ptr945 = getelementptr inbounds i8, i8* %408, i64 1
  %409 = load %struct.obstack*, %struct.obstack** %__o943, align 8
  %chunk_limit946 = getelementptr inbounds %struct.obstack, %struct.obstack* %409, i32 0, i32 4
  %410 = load i8*, i8** %chunk_limit946, align 8
  %cmp947 = icmp ugt i8* %add.ptr945, %410
  br i1 %cmp947, label %if.then.949, label %if.end.950

if.then.949:                                      ; preds = %sw.bb.941
  %411 = load %struct.obstack*, %struct.obstack** %__o943, align 8
  call void @_obstack_newchunk(%struct.obstack* %411, i32 1)
  br label %if.end.950

if.end.950:                                       ; preds = %if.then.949, %sw.bb.941
  %412 = load %struct.obstack*, %struct.obstack** %__o943, align 8
  %next_free951 = getelementptr inbounds %struct.obstack, %struct.obstack* %412, i32 0, i32 3
  %413 = load i8*, i8** %next_free951, align 8
  %incdec.ptr952 = getelementptr inbounds i8, i8* %413, i32 1
  store i8* %incdec.ptr952, i8** %next_free951, align 8
  store i8 12, i8* %413, align 1
  br label %sw.epilog.1098

sw.bb.953:                                        ; preds = %do_action
  store %struct.obstack* @string_stack, %struct.obstack** %__o955, align 8
  %414 = load %struct.obstack*, %struct.obstack** %__o955, align 8
  %next_free956 = getelementptr inbounds %struct.obstack, %struct.obstack* %414, i32 0, i32 3
  %415 = load i8*, i8** %next_free956, align 8
  %add.ptr957 = getelementptr inbounds i8, i8* %415, i64 1
  %416 = load %struct.obstack*, %struct.obstack** %__o955, align 8
  %chunk_limit958 = getelementptr inbounds %struct.obstack, %struct.obstack* %416, i32 0, i32 4
  %417 = load i8*, i8** %chunk_limit958, align 8
  %cmp959 = icmp ugt i8* %add.ptr957, %417
  br i1 %cmp959, label %if.then.961, label %if.end.962

if.then.961:                                      ; preds = %sw.bb.953
  %418 = load %struct.obstack*, %struct.obstack** %__o955, align 8
  call void @_obstack_newchunk(%struct.obstack* %418, i32 1)
  br label %if.end.962

if.end.962:                                       ; preds = %if.then.961, %sw.bb.953
  %419 = load %struct.obstack*, %struct.obstack** %__o955, align 8
  %next_free963 = getelementptr inbounds %struct.obstack, %struct.obstack* %419, i32 0, i32 3
  %420 = load i8*, i8** %next_free963, align 8
  %incdec.ptr964 = getelementptr inbounds i8, i8* %420, i32 1
  store i8* %incdec.ptr964, i8** %next_free963, align 8
  store i8 10, i8* %420, align 1
  br label %sw.epilog.1098

sw.bb.965:                                        ; preds = %do_action
  store %struct.obstack* @string_stack, %struct.obstack** %__o967, align 8
  %421 = load %struct.obstack*, %struct.obstack** %__o967, align 8
  %next_free968 = getelementptr inbounds %struct.obstack, %struct.obstack* %421, i32 0, i32 3
  %422 = load i8*, i8** %next_free968, align 8
  %add.ptr969 = getelementptr inbounds i8, i8* %422, i64 1
  %423 = load %struct.obstack*, %struct.obstack** %__o967, align 8
  %chunk_limit970 = getelementptr inbounds %struct.obstack, %struct.obstack* %423, i32 0, i32 4
  %424 = load i8*, i8** %chunk_limit970, align 8
  %cmp971 = icmp ugt i8* %add.ptr969, %424
  br i1 %cmp971, label %if.then.973, label %if.end.974

if.then.973:                                      ; preds = %sw.bb.965
  %425 = load %struct.obstack*, %struct.obstack** %__o967, align 8
  call void @_obstack_newchunk(%struct.obstack* %425, i32 1)
  br label %if.end.974

if.end.974:                                       ; preds = %if.then.973, %sw.bb.965
  %426 = load %struct.obstack*, %struct.obstack** %__o967, align 8
  %next_free975 = getelementptr inbounds %struct.obstack, %struct.obstack* %426, i32 0, i32 3
  %427 = load i8*, i8** %next_free975, align 8
  %incdec.ptr976 = getelementptr inbounds i8, i8* %427, i32 1
  store i8* %incdec.ptr976, i8** %next_free975, align 8
  store i8 13, i8* %427, align 1
  br label %sw.epilog.1098

sw.bb.977:                                        ; preds = %do_action
  store %struct.obstack* @string_stack, %struct.obstack** %__o979, align 8
  %428 = load %struct.obstack*, %struct.obstack** %__o979, align 8
  %next_free980 = getelementptr inbounds %struct.obstack, %struct.obstack* %428, i32 0, i32 3
  %429 = load i8*, i8** %next_free980, align 8
  %add.ptr981 = getelementptr inbounds i8, i8* %429, i64 1
  %430 = load %struct.obstack*, %struct.obstack** %__o979, align 8
  %chunk_limit982 = getelementptr inbounds %struct.obstack, %struct.obstack* %430, i32 0, i32 4
  %431 = load i8*, i8** %chunk_limit982, align 8
  %cmp983 = icmp ugt i8* %add.ptr981, %431
  br i1 %cmp983, label %if.then.985, label %if.end.986

if.then.985:                                      ; preds = %sw.bb.977
  %432 = load %struct.obstack*, %struct.obstack** %__o979, align 8
  call void @_obstack_newchunk(%struct.obstack* %432, i32 1)
  br label %if.end.986

if.end.986:                                       ; preds = %if.then.985, %sw.bb.977
  %433 = load %struct.obstack*, %struct.obstack** %__o979, align 8
  %next_free987 = getelementptr inbounds %struct.obstack, %struct.obstack* %433, i32 0, i32 3
  %434 = load i8*, i8** %next_free987, align 8
  %incdec.ptr988 = getelementptr inbounds i8, i8* %434, i32 1
  store i8* %incdec.ptr988, i8** %next_free987, align 8
  store i8 9, i8* %434, align 1
  br label %sw.epilog.1098

sw.bb.989:                                        ; preds = %do_action
  store %struct.obstack* @string_stack, %struct.obstack** %__o991, align 8
  %435 = load %struct.obstack*, %struct.obstack** %__o991, align 8
  %next_free992 = getelementptr inbounds %struct.obstack, %struct.obstack* %435, i32 0, i32 3
  %436 = load i8*, i8** %next_free992, align 8
  %add.ptr993 = getelementptr inbounds i8, i8* %436, i64 1
  %437 = load %struct.obstack*, %struct.obstack** %__o991, align 8
  %chunk_limit994 = getelementptr inbounds %struct.obstack, %struct.obstack* %437, i32 0, i32 4
  %438 = load i8*, i8** %chunk_limit994, align 8
  %cmp995 = icmp ugt i8* %add.ptr993, %438
  br i1 %cmp995, label %if.then.997, label %if.end.998

if.then.997:                                      ; preds = %sw.bb.989
  %439 = load %struct.obstack*, %struct.obstack** %__o991, align 8
  call void @_obstack_newchunk(%struct.obstack* %439, i32 1)
  br label %if.end.998

if.end.998:                                       ; preds = %if.then.997, %sw.bb.989
  %440 = load %struct.obstack*, %struct.obstack** %__o991, align 8
  %next_free999 = getelementptr inbounds %struct.obstack, %struct.obstack* %440, i32 0, i32 3
  %441 = load i8*, i8** %next_free999, align 8
  %incdec.ptr1000 = getelementptr inbounds i8, i8* %441, i32 1
  store i8* %incdec.ptr1000, i8** %next_free999, align 8
  store i8 11, i8* %441, align 1
  br label %sw.epilog.1098

sw.bb.1001:                                       ; preds = %do_action
  store %struct.obstack* @string_stack, %struct.obstack** %__o1003, align 8
  %442 = load %struct.obstack*, %struct.obstack** %__o1003, align 8
  %next_free1004 = getelementptr inbounds %struct.obstack, %struct.obstack* %442, i32 0, i32 3
  %443 = load i8*, i8** %next_free1004, align 8
  %add.ptr1005 = getelementptr inbounds i8, i8* %443, i64 1
  %444 = load %struct.obstack*, %struct.obstack** %__o1003, align 8
  %chunk_limit1006 = getelementptr inbounds %struct.obstack, %struct.obstack* %444, i32 0, i32 4
  %445 = load i8*, i8** %chunk_limit1006, align 8
  %cmp1007 = icmp ugt i8* %add.ptr1005, %445
  br i1 %cmp1007, label %if.then.1009, label %if.end.1010

if.then.1009:                                     ; preds = %sw.bb.1001
  %446 = load %struct.obstack*, %struct.obstack** %__o1003, align 8
  call void @_obstack_newchunk(%struct.obstack* %446, i32 1)
  br label %if.end.1010

if.end.1010:                                      ; preds = %if.then.1009, %sw.bb.1001
  %447 = load i8*, i8** @sshtext, align 8
  %arrayidx1011 = getelementptr inbounds i8, i8* %447, i64 1
  %448 = load i8, i8* %arrayidx1011, align 1
  %449 = load %struct.obstack*, %struct.obstack** %__o1003, align 8
  %next_free1012 = getelementptr inbounds %struct.obstack, %struct.obstack* %449, i32 0, i32 3
  %450 = load i8*, i8** %next_free1012, align 8
  %incdec.ptr1013 = getelementptr inbounds i8, i8* %450, i32 1
  store i8* %incdec.ptr1013, i8** %next_free1012, align 8
  store i8 %448, i8* %450, align 1
  br label %sw.epilog.1098

sw.bb.1014:                                       ; preds = %do_action
  %451 = load i8*, i8** @sshfilename, align 8
  %452 = load i32, i32* @sshlineno, align 4
  %call1015 = call i8* @gettext(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.131, i32 0, i32 0)) #3
  call void (i32, i32, i8*, i32, i8*, ...) @error_at_line(i32 1, i32 0, i8* %451, i32 %452, i8* %call1015, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.132, i32 0, i32 0))
  br label %sw.epilog.1098

sw.bb.1016:                                       ; preds = %do_action
  store %struct.obstack* @string_stack, %struct.obstack** %__o1018, align 8
  %453 = load i32, i32* @sshleng, align 4
  store i32 %453, i32* %__len1020, align 4
  %454 = load %struct.obstack*, %struct.obstack** %__o1018, align 8
  %next_free1021 = getelementptr inbounds %struct.obstack, %struct.obstack* %454, i32 0, i32 3
  %455 = load i8*, i8** %next_free1021, align 8
  %456 = load i32, i32* %__len1020, align 4
  %idx.ext1022 = sext i32 %456 to i64
  %add.ptr1023 = getelementptr inbounds i8, i8* %455, i64 %idx.ext1022
  %457 = load %struct.obstack*, %struct.obstack** %__o1018, align 8
  %chunk_limit1024 = getelementptr inbounds %struct.obstack, %struct.obstack* %457, i32 0, i32 4
  %458 = load i8*, i8** %chunk_limit1024, align 8
  %cmp1025 = icmp ugt i8* %add.ptr1023, %458
  br i1 %cmp1025, label %if.then.1027, label %if.end.1028

if.then.1027:                                     ; preds = %sw.bb.1016
  %459 = load %struct.obstack*, %struct.obstack** %__o1018, align 8
  %460 = load i32, i32* %__len1020, align 4
  call void @_obstack_newchunk(%struct.obstack* %459, i32 %460)
  br label %if.end.1028

if.end.1028:                                      ; preds = %if.then.1027, %sw.bb.1016
  %461 = load %struct.obstack*, %struct.obstack** %__o1018, align 8
  %next_free1029 = getelementptr inbounds %struct.obstack, %struct.obstack* %461, i32 0, i32 3
  %462 = load i8*, i8** %next_free1029, align 8
  %463 = load i8*, i8** @sshtext, align 8
  %464 = load i32, i32* %__len1020, align 4
  %conv1030 = sext i32 %464 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %462, i8* %463, i64 %conv1030, i32 1, i1 false)
  %465 = load i32, i32* %__len1020, align 4
  %466 = load %struct.obstack*, %struct.obstack** %__o1018, align 8
  %next_free1031 = getelementptr inbounds %struct.obstack, %struct.obstack* %466, i32 0, i32 3
  %467 = load i8*, i8** %next_free1031, align 8
  %idx.ext1032 = sext i32 %465 to i64
  %add.ptr1033 = getelementptr inbounds i8, i8* %467, i64 %idx.ext1032
  store i8* %add.ptr1033, i8** %next_free1031, align 8
  br label %sw.epilog.1098

sw.bb.1034:                                       ; preds = %do_action
  %468 = load i8*, i8** @sshtext, align 8
  %469 = load i32, i32* @sshleng, align 4
  %conv1035 = sext i32 %469 to i64
  %470 = load %struct._IO_FILE*, %struct._IO_FILE** @sshout, align 8
  %call1036 = call i64 @fwrite(i8* %468, i64 %conv1035, i64 1, %struct._IO_FILE* %470)
  br label %sw.epilog.1098

sw.bb.1037:                                       ; preds = %do_action, %do_action, %do_action
  store i32 0, i32* %retval
  br label %return

sw.bb.1038:                                       ; preds = %do_action
  %471 = load i8*, i8** %yy_cp, align 8
  %472 = load i8*, i8** @sshtext, align 8
  %sub.ptr.lhs.cast1040 = ptrtoint i8* %471 to i64
  %sub.ptr.rhs.cast1041 = ptrtoint i8* %472 to i64
  %sub.ptr.sub1042 = sub i64 %sub.ptr.lhs.cast1040, %sub.ptr.rhs.cast1041
  %conv1043 = trunc i64 %sub.ptr.sub1042 to i32
  %sub1044 = sub nsw i32 %conv1043, 1
  store i32 %sub1044, i32* %yy_amount_of_matched_text, align 4
  %473 = load i8, i8* @yy_hold_char, align 1
  %474 = load i8*, i8** %yy_cp, align 8
  store i8 %473, i8* %474, align 1
  %475 = load i64, i64* @yy_buffer_stack_top, align 8
  %476 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx1045 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %476, i64 %475
  %477 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx1045, align 8
  %yy_buffer_status = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %477, i32 0, i32 11
  %478 = load i32, i32* %yy_buffer_status, align 4
  %cmp1046 = icmp eq i32 %478, 0
  br i1 %cmp1046, label %if.then.1048, label %if.end.1053

if.then.1048:                                     ; preds = %sw.bb.1038
  %479 = load i64, i64* @yy_buffer_stack_top, align 8
  %480 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx1049 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %480, i64 %479
  %481 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx1049, align 8
  %yy_n_chars = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %481, i32 0, i32 4
  %482 = load i32, i32* %yy_n_chars, align 4
  store i32 %482, i32* @yy_n_chars, align 4
  %483 = load %struct._IO_FILE*, %struct._IO_FILE** @sshin, align 8
  %484 = load i64, i64* @yy_buffer_stack_top, align 8
  %485 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx1050 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %485, i64 %484
  %486 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx1050, align 8
  %yy_input_file = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %486, i32 0, i32 0
  store %struct._IO_FILE* %483, %struct._IO_FILE** %yy_input_file, align 8
  %487 = load i64, i64* @yy_buffer_stack_top, align 8
  %488 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx1051 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %488, i64 %487
  %489 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx1051, align 8
  %yy_buffer_status1052 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %489, i32 0, i32 11
  store i32 1, i32* %yy_buffer_status1052, align 4
  br label %if.end.1053

if.end.1053:                                      ; preds = %if.then.1048, %sw.bb.1038
  %490 = load i8*, i8** @yy_c_buf_p, align 8
  %491 = load i32, i32* @yy_n_chars, align 4
  %idxprom1054 = sext i32 %491 to i64
  %492 = load i64, i64* @yy_buffer_stack_top, align 8
  %493 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx1055 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %493, i64 %492
  %494 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx1055, align 8
  %yy_ch_buf = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %494, i32 0, i32 1
  %495 = load i8*, i8** %yy_ch_buf, align 8
  %arrayidx1056 = getelementptr inbounds i8, i8* %495, i64 %idxprom1054
  %cmp1057 = icmp ule i8* %490, %arrayidx1056
  br i1 %cmp1057, label %if.then.1059, label %if.else.1070

if.then.1059:                                     ; preds = %if.end.1053
  %496 = load i8*, i8** @sshtext, align 8
  %497 = load i32, i32* %yy_amount_of_matched_text, align 4
  %idx.ext1061 = sext i32 %497 to i64
  %add.ptr1062 = getelementptr inbounds i8, i8* %496, i64 %idx.ext1061
  store i8* %add.ptr1062, i8** @yy_c_buf_p, align 8
  %call1063 = call i32 @yy_get_previous_state()
  store i32 %call1063, i32* %yy_current_state, align 4
  %498 = load i32, i32* %yy_current_state, align 4
  %call1064 = call i32 @yy_try_NUL_trans(i32 %498)
  store i32 %call1064, i32* %yy_next_state, align 4
  %499 = load i8*, i8** @sshtext, align 8
  %add.ptr1065 = getelementptr inbounds i8, i8* %499, i64 0
  store i8* %add.ptr1065, i8** %yy_bp, align 8
  %500 = load i32, i32* %yy_next_state, align 4
  %tobool1066 = icmp ne i32 %500, 0
  br i1 %tobool1066, label %if.then.1067, label %if.else.1069

if.then.1067:                                     ; preds = %if.then.1059
  %501 = load i8*, i8** @yy_c_buf_p, align 8
  %incdec.ptr1068 = getelementptr inbounds i8, i8* %501, i32 1
  store i8* %incdec.ptr1068, i8** @yy_c_buf_p, align 8
  store i8* %incdec.ptr1068, i8** %yy_cp, align 8
  %502 = load i32, i32* %yy_next_state, align 4
  store i32 %502, i32* %yy_current_state, align 4
  br label %yy_match

if.else.1069:                                     ; preds = %if.then.1059
  %503 = load i8*, i8** @yy_c_buf_p, align 8
  store i8* %503, i8** %yy_cp, align 8
  br label %yy_find_action

if.else.1070:                                     ; preds = %if.end.1053
  %call1071 = call i32 @yy_get_next_buffer()
  switch i32 %call1071, label %sw.epilog [
    i32 1, label %sw.bb.1072
    i32 0, label %sw.bb.1085
    i32 2, label %sw.bb.1090
  ]

sw.bb.1072:                                       ; preds = %if.else.1070
  store i32 0, i32* @yy_did_buffer_switch_on_eof, align 4
  %call1073 = call i32 @sshwrap()
  %tobool1074 = icmp ne i32 %call1073, 0
  br i1 %tobool1074, label %if.then.1075, label %if.else.1080

if.then.1075:                                     ; preds = %sw.bb.1072
  %504 = load i8*, i8** @sshtext, align 8
  %add.ptr1076 = getelementptr inbounds i8, i8* %504, i64 0
  store i8* %add.ptr1076, i8** @yy_c_buf_p, align 8
  %505 = load i32, i32* @yy_start, align 4
  %sub1077 = sub nsw i32 %505, 1
  %div = sdiv i32 %sub1077, 2
  %add1078 = add nsw i32 218, %div
  %add1079 = add nsw i32 %add1078, 1
  store i32 %add1079, i32* %yy_act, align 4
  br label %do_action

if.else.1080:                                     ; preds = %sw.bb.1072
  %506 = load i32, i32* @yy_did_buffer_switch_on_eof, align 4
  %tobool1081 = icmp ne i32 %506, 0
  br i1 %tobool1081, label %if.end.1083, label %if.then.1082

if.then.1082:                                     ; preds = %if.else.1080
  %507 = load %struct._IO_FILE*, %struct._IO_FILE** @sshin, align 8
  call void @sshrestart(%struct._IO_FILE* %507)
  br label %if.end.1083

if.end.1083:                                      ; preds = %if.then.1082, %if.else.1080
  br label %if.end.1084

if.end.1084:                                      ; preds = %if.end.1083
  br label %sw.epilog

sw.bb.1085:                                       ; preds = %if.else.1070
  %508 = load i8*, i8** @sshtext, align 8
  %509 = load i32, i32* %yy_amount_of_matched_text, align 4
  %idx.ext1086 = sext i32 %509 to i64
  %add.ptr1087 = getelementptr inbounds i8, i8* %508, i64 %idx.ext1086
  store i8* %add.ptr1087, i8** @yy_c_buf_p, align 8
  %call1088 = call i32 @yy_get_previous_state()
  store i32 %call1088, i32* %yy_current_state, align 4
  %510 = load i8*, i8** @yy_c_buf_p, align 8
  store i8* %510, i8** %yy_cp, align 8
  %511 = load i8*, i8** @sshtext, align 8
  %add.ptr1089 = getelementptr inbounds i8, i8* %511, i64 0
  store i8* %add.ptr1089, i8** %yy_bp, align 8
  br label %yy_match

sw.bb.1090:                                       ; preds = %if.else.1070
  %512 = load i32, i32* @yy_n_chars, align 4
  %idxprom1091 = sext i32 %512 to i64
  %513 = load i64, i64* @yy_buffer_stack_top, align 8
  %514 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx1092 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %514, i64 %513
  %515 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx1092, align 8
  %yy_ch_buf1093 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %515, i32 0, i32 1
  %516 = load i8*, i8** %yy_ch_buf1093, align 8
  %arrayidx1094 = getelementptr inbounds i8, i8* %516, i64 %idxprom1091
  store i8* %arrayidx1094, i8** @yy_c_buf_p, align 8
  %call1095 = call i32 @yy_get_previous_state()
  store i32 %call1095, i32* %yy_current_state, align 4
  %517 = load i8*, i8** @yy_c_buf_p, align 8
  store i8* %517, i8** %yy_cp, align 8
  %518 = load i8*, i8** @sshtext, align 8
  %add.ptr1096 = getelementptr inbounds i8, i8* %518, i64 0
  store i8* %add.ptr1096, i8** %yy_bp, align 8
  br label %yy_find_action

sw.epilog:                                        ; preds = %if.else.1070, %if.end.1084
  br label %if.end.1097

if.end.1097:                                      ; preds = %sw.epilog
  br label %sw.epilog.1098

sw.default:                                       ; preds = %do_action
  call void @yy_fatal_error(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.133, i32 0, i32 0))
  br label %sw.epilog.1098

sw.epilog.1098:                                   ; preds = %sw.default, %if.end.1097, %sw.bb.1034, %if.end.1028, %sw.bb.1014, %if.end.1010, %if.end.998, %if.end.986, %if.end.974, %if.end.962, %if.end.950, %if.end.938, %if.end.926, %if.end.914, %if.end.902, %if.end.889, %if.end.830, %if.end.705, %sw.bb.693, %if.end.689, %if.end.677, %if.end.665, %if.end.653, %if.end.641, %if.end.629, %if.end.617, %if.end.605, %if.end.593, %if.end.581, %if.end.568, %if.end.509, %sw.bb.87, %sw.bb.86, %sw.bb.85, %sw.bb.84
  br label %while.body

return:                                           ; preds = %sw.bb.1037, %if.end.794, %if.end.481, %sw.bb.424, %sw.bb.422, %sw.bb.421, %sw.bb.420, %sw.bb.419, %sw.bb.418, %sw.bb.417, %sw.bb.416, %sw.bb.415, %sw.bb.414, %sw.bb.413, %sw.bb.412, %if.else.411, %if.then.410, %if.else, %if.then.403, %sw.bb.397, %sw.bb.396, %sw.bb.395, %sw.bb.394, %sw.bb.393, %sw.bb.392, %sw.bb.391, %sw.bb.390, %sw.bb.389, %sw.bb.388, %sw.bb.387, %sw.bb.386, %sw.bb.385, %sw.bb.384, %sw.bb.383, %sw.bb.382, %sw.bb.381, %sw.bb.380, %sw.bb.379, %sw.bb.378, %sw.bb.377, %sw.bb.376, %sw.bb.375, %sw.bb.374, %sw.bb.373, %sw.bb.372, %sw.bb.371, %sw.bb.370, %sw.bb.369, %sw.bb.368, %sw.bb.367, %sw.bb.366, %sw.bb.365, %sw.bb.364, %sw.bb.363, %while.end.362, %sw.bb.350, %sw.bb.348, %sw.bb.346, %sw.bb.344, %sw.bb.342, %sw.bb.340, %sw.bb.338, %sw.bb.336, %sw.bb.334, %sw.bb.332, %sw.bb.330, %sw.bb.328, %sw.bb.326, %sw.bb.324, %sw.bb.322, %sw.bb.320, %sw.bb.318, %sw.bb.316, %sw.bb.314, %sw.bb.312, %sw.bb.310, %sw.bb.308, %sw.bb.306, %sw.bb.304, %sw.bb.302, %sw.bb.300, %sw.bb.298, %sw.bb.296, %sw.bb.294, %sw.bb.292, %sw.bb.290, %sw.bb.288, %sw.bb.286, %sw.bb.284, %sw.bb.282, %sw.bb.280, %sw.bb.278, %sw.bb.276, %sw.bb.274, %sw.bb.272, %sw.bb.270, %sw.bb.268, %sw.bb.266, %sw.bb.264, %sw.bb.262, %sw.bb.260, %sw.bb.258, %sw.bb.256, %sw.bb.254, %sw.bb.252, %sw.bb.250, %sw.bb.248, %sw.bb.246, %sw.bb.244, %sw.bb.242, %sw.bb.240, %sw.bb.238, %sw.bb.236, %sw.bb.234, %sw.bb.232, %sw.bb.230, %sw.bb.228, %sw.bb.226, %sw.bb.224, %sw.bb.222, %sw.bb.220, %sw.bb.218, %sw.bb.216, %sw.bb.214, %sw.bb.212, %sw.bb.210, %sw.bb.208, %sw.bb.206, %sw.bb.204, %sw.bb.202, %sw.bb.200, %sw.bb.198, %sw.bb.196, %sw.bb.194, %sw.bb.192, %sw.bb.190, %sw.bb.188, %sw.bb.186, %sw.bb.184, %sw.bb.182, %sw.bb.180, %sw.bb.178, %sw.bb.176, %sw.bb.174, %sw.bb.172, %sw.bb.170, %sw.bb.168, %sw.bb.166, %sw.bb.164, %sw.bb.162, %sw.bb.160, %sw.bb.158, %sw.bb.156, %sw.bb.154, %sw.bb.152, %sw.bb.150, %sw.bb.148, %sw.bb.146, %sw.bb.144, %sw.bb.142, %sw.bb.140, %sw.bb.138, %sw.bb.136, %sw.bb.134, %sw.bb.132, %sw.bb.130, %sw.bb.128, %sw.bb.126, %sw.bb.124, %sw.bb.122, %sw.bb.120, %sw.bb.118, %sw.bb.116, %sw.bb.114, %sw.bb.112, %sw.bb.110, %sw.bb.108, %sw.bb.106, %sw.bb.104, %sw.bb.102, %sw.bb.100, %sw.bb.98, %sw.bb.96, %sw.bb.94, %sw.bb.92, %sw.bb.90, %sw.bb.88
  %519 = load i32, i32* %retval
  ret i32 %519
}

; Function Attrs: nounwind uwtable
define internal void @sshensure_buffer_stack() #0 {
entry:
  %num_to_alloc = alloca i32, align 4
  %grow_size = alloca i32, align 4
  %0 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %tobool = icmp ne %struct.yy_buffer_state** %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 1, i32* %num_to_alloc, align 4
  %1 = load i32, i32* %num_to_alloc, align 4
  %conv = sext i32 %1 to i64
  %mul = mul i64 %conv, 8
  %conv1 = trunc i64 %mul to i32
  %call = call i8* @sshalloc(i32 %conv1)
  %2 = bitcast i8* %call to %struct.yy_buffer_state**
  store %struct.yy_buffer_state** %2, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %3 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %4 = bitcast %struct.yy_buffer_state** %3 to i8*
  %5 = load i32, i32* %num_to_alloc, align 4
  %conv2 = sext i32 %5 to i64
  %mul3 = mul i64 %conv2, 8
  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 %mul3, i32 8, i1 false)
  %6 = load i32, i32* %num_to_alloc, align 4
  %conv4 = sext i32 %6 to i64
  store i64 %conv4, i64* @yy_buffer_stack_max, align 8
  store i64 0, i64* @yy_buffer_stack_top, align 8
  br label %if.end.16

if.end:                                           ; preds = %entry
  %7 = load i64, i64* @yy_buffer_stack_top, align 8
  %8 = load i64, i64* @yy_buffer_stack_max, align 8
  %sub = sub i64 %8, 1
  %cmp = icmp uge i64 %7, %sub
  br i1 %cmp, label %if.then.6, label %if.end.16

if.then.6:                                        ; preds = %if.end
  store i32 8, i32* %grow_size, align 4
  %9 = load i64, i64* @yy_buffer_stack_max, align 8
  %10 = load i32, i32* %grow_size, align 4
  %conv7 = sext i32 %10 to i64
  %add = add i64 %9, %conv7
  %conv8 = trunc i64 %add to i32
  store i32 %conv8, i32* %num_to_alloc, align 4
  %11 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %12 = bitcast %struct.yy_buffer_state** %11 to i8*
  %13 = load i32, i32* %num_to_alloc, align 4
  %conv9 = sext i32 %13 to i64
  %mul10 = mul i64 %conv9, 8
  %conv11 = trunc i64 %mul10 to i32
  %call12 = call i8* @sshrealloc(i8* %12, i32 %conv11)
  %14 = bitcast i8* %call12 to %struct.yy_buffer_state**
  store %struct.yy_buffer_state** %14, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %15 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %16 = load i64, i64* @yy_buffer_stack_max, align 8
  %add.ptr = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %15, i64 %16
  %17 = bitcast %struct.yy_buffer_state** %add.ptr to i8*
  %18 = load i32, i32* %grow_size, align 4
  %conv13 = sext i32 %18 to i64
  %mul14 = mul i64 %conv13, 8
  call void @llvm.memset.p0i8.i64(i8* %17, i8 0, i64 %mul14, i32 8, i1 false)
  %19 = load i32, i32* %num_to_alloc, align 4
  %conv15 = sext i32 %19 to i64
  store i64 %conv15, i64* @yy_buffer_stack_max, align 8
  br label %if.end.16

if.end.16:                                        ; preds = %if.then, %if.then.6, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.yy_buffer_state* @ssh_create_buffer(%struct._IO_FILE* %file, i32 %size) #0 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %size.addr = alloca i32, align 4
  %b = alloca %struct.yy_buffer_state*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  store i32 %size, i32* %size.addr, align 4
  %call = call i8* @sshalloc(i32 64)
  %0 = bitcast i8* %call to %struct.yy_buffer_state*
  store %struct.yy_buffer_state* %0, %struct.yy_buffer_state** %b, align 8
  %1 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %tobool = icmp ne %struct.yy_buffer_state* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @yy_fatal_error(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.134, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %size.addr, align 4
  %3 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_buf_size = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %3, i32 0, i32 3
  store i32 %2, i32* %yy_buf_size, align 4
  %4 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_buf_size1 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %4, i32 0, i32 3
  %5 = load i32, i32* %yy_buf_size1, align 4
  %add = add i32 %5, 2
  %call2 = call i8* @sshalloc(i32 %add)
  %6 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_ch_buf = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %6, i32 0, i32 1
  store i8* %call2, i8** %yy_ch_buf, align 8
  %7 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_ch_buf3 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %7, i32 0, i32 1
  %8 = load i8*, i8** %yy_ch_buf3, align 8
  %tobool4 = icmp ne i8* %8, null
  br i1 %tobool4, label %if.end.6, label %if.then.5

if.then.5:                                        ; preds = %if.end
  call void @yy_fatal_error(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.134, i32 0, i32 0))
  br label %if.end.6

if.end.6:                                         ; preds = %if.then.5, %if.end
  %9 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_is_our_buffer = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %9, i32 0, i32 5
  store i32 1, i32* %yy_is_our_buffer, align 4
  %10 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  call void @ssh_init_buffer(%struct.yy_buffer_state* %10, %struct._IO_FILE* %11)
  %12 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  ret %struct.yy_buffer_state* %12
}

; Function Attrs: nounwind uwtable
define internal void @ssh_load_buffer_state() #0 {
entry:
  %0 = load i64, i64* @yy_buffer_stack_top, align 8
  %1 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %1, i64 %0
  %2 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx, align 8
  %yy_n_chars = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %2, i32 0, i32 4
  %3 = load i32, i32* %yy_n_chars, align 4
  store i32 %3, i32* @yy_n_chars, align 4
  %4 = load i64, i64* @yy_buffer_stack_top, align 8
  %5 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx1 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %5, i64 %4
  %6 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx1, align 8
  %yy_buf_pos = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %6, i32 0, i32 2
  %7 = load i8*, i8** %yy_buf_pos, align 8
  store i8* %7, i8** @yy_c_buf_p, align 8
  store i8* %7, i8** @sshtext, align 8
  %8 = load i64, i64* @yy_buffer_stack_top, align 8
  %9 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx2 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %9, i64 %8
  %10 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx2, align 8
  %yy_input_file = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %10, i32 0, i32 0
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %yy_input_file, align 8
  store %struct._IO_FILE* %11, %struct._IO_FILE** @sshin, align 8
  %12 = load i8*, i8** @yy_c_buf_p, align 8
  %13 = load i8, i8* %12, align 1
  store i8 %13, i8* @yy_hold_char, align 1
  ret void
}

declare i8* @xstrdup(i8*) #1

declare void @_obstack_newchunk(%struct.obstack*, i32) #1

declare void @obstack_free(%struct.obstack*, i8*) #1

declare void @ssherror(i8*) #1

; Function Attrs: nounwind
declare i8* @gettext(i8*) #2

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #3

declare i8* @xmalloc(i64) #1

declare void @error_at_line(i32, i32, i8*, i32, i8*, ...) #1

declare i64 @fwrite(i8*, i64, i64, %struct._IO_FILE*) #1

; Function Attrs: nounwind uwtable
define internal i32 @yy_get_previous_state() #0 {
entry:
  %yy_current_state = alloca i32, align 4
  %yy_cp = alloca i8*, align 8
  %yy_c = alloca i8, align 1
  %0 = load i32, i32* @yy_start, align 4
  store i32 %0, i32* %yy_current_state, align 4
  %1 = load i8*, i8** @sshtext, align 8
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 0
  store i8* %add.ptr, i8** %yy_cp, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i8*, i8** %yy_cp, align 8
  %3 = load i8*, i8** @yy_c_buf_p, align 8
  %cmp = icmp ult i8* %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %yy_cp, align 8
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %6 = load i8*, i8** %yy_cp, align 8
  %7 = load i8, i8* %6, align 1
  %conv1 = zext i8 %7 to i32
  %idxprom = zext i32 %conv1 to i64
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @yy_ec, i32 0, i64 %idxprom
  %8 = load i32, i32* %arrayidx, align 4
  br label %cond.end

cond.false:                                       ; preds = %for.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %8, %cond.true ], [ 1, %cond.false ]
  %conv2 = trunc i32 %cond to i8
  store i8 %conv2, i8* %yy_c, align 1
  %9 = load i32, i32* %yy_current_state, align 4
  %idxprom3 = sext i32 %9 to i64
  %arrayidx4 = getelementptr inbounds [901 x i16], [901 x i16]* @yy_accept, i32 0, i64 %idxprom3
  %10 = load i16, i16* %arrayidx4, align 2
  %tobool5 = icmp ne i16 %10, 0
  br i1 %tobool5, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %11 = load i32, i32* %yy_current_state, align 4
  store i32 %11, i32* @yy_last_accepting_state, align 4
  %12 = load i8*, i8** %yy_cp, align 8
  store i8* %12, i8** @yy_last_accepting_cpos, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  br label %while.cond

while.cond:                                       ; preds = %if.end.25, %if.end
  %13 = load i32, i32* %yy_current_state, align 4
  %idxprom6 = sext i32 %13 to i64
  %arrayidx7 = getelementptr inbounds [913 x i16], [913 x i16]* @yy_base, i32 0, i64 %idxprom6
  %14 = load i16, i16* %arrayidx7, align 2
  %conv8 = sext i16 %14 to i32
  %15 = load i8, i8* %yy_c, align 1
  %conv9 = zext i8 %15 to i32
  %add = add nsw i32 %conv8, %conv9
  %idxprom10 = sext i32 %add to i64
  %arrayidx11 = getelementptr inbounds [1075 x i16], [1075 x i16]* @yy_chk, i32 0, i64 %idxprom10
  %16 = load i16, i16* %arrayidx11, align 2
  %conv12 = sext i16 %16 to i32
  %17 = load i32, i32* %yy_current_state, align 4
  %cmp13 = icmp ne i32 %conv12, %17
  br i1 %cmp13, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %18 = load i32, i32* %yy_current_state, align 4
  %idxprom15 = sext i32 %18 to i64
  %arrayidx16 = getelementptr inbounds [913 x i16], [913 x i16]* @yy_def, i32 0, i64 %idxprom15
  %19 = load i16, i16* %arrayidx16, align 2
  %conv17 = sext i16 %19 to i32
  store i32 %conv17, i32* %yy_current_state, align 4
  %20 = load i32, i32* %yy_current_state, align 4
  %cmp18 = icmp sge i32 %20, 901
  br i1 %cmp18, label %if.then.20, label %if.end.25

if.then.20:                                       ; preds = %while.body
  %21 = load i8, i8* %yy_c, align 1
  %conv21 = zext i8 %21 to i32
  %idxprom22 = zext i32 %conv21 to i64
  %arrayidx23 = getelementptr inbounds [62 x i32], [62 x i32]* @yy_meta, i32 0, i64 %idxprom22
  %22 = load i32, i32* %arrayidx23, align 4
  %conv24 = trunc i32 %22 to i8
  store i8 %conv24, i8* %yy_c, align 1
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.20, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %23 = load i32, i32* %yy_current_state, align 4
  %idxprom26 = sext i32 %23 to i64
  %arrayidx27 = getelementptr inbounds [913 x i16], [913 x i16]* @yy_base, i32 0, i64 %idxprom26
  %24 = load i16, i16* %arrayidx27, align 2
  %conv28 = sext i16 %24 to i32
  %25 = load i8, i8* %yy_c, align 1
  %conv29 = zext i8 %25 to i32
  %add30 = add i32 %conv28, %conv29
  %idxprom31 = zext i32 %add30 to i64
  %arrayidx32 = getelementptr inbounds [1075 x i16], [1075 x i16]* @yy_nxt, i32 0, i64 %idxprom31
  %26 = load i16, i16* %arrayidx32, align 2
  %conv33 = sext i16 %26 to i32
  store i32 %conv33, i32* %yy_current_state, align 4
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %27 = load i8*, i8** %yy_cp, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %27, i32 1
  store i8* %incdec.ptr, i8** %yy_cp, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load i32, i32* %yy_current_state, align 4
  ret i32 %28
}

; Function Attrs: nounwind uwtable
define internal i32 @yy_try_NUL_trans(i32 %yy_current_state) #0 {
entry:
  %yy_current_state.addr = alloca i32, align 4
  %yy_is_jam = alloca i32, align 4
  %yy_cp = alloca i8*, align 8
  %yy_c = alloca i8, align 1
  store i32 %yy_current_state, i32* %yy_current_state.addr, align 4
  %0 = load i8*, i8** @yy_c_buf_p, align 8
  store i8* %0, i8** %yy_cp, align 8
  store i8 1, i8* %yy_c, align 1
  %1 = load i32, i32* %yy_current_state.addr, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [901 x i16], [901 x i16]* @yy_accept, i32 0, i64 %idxprom
  %2 = load i16, i16* %arrayidx, align 2
  %tobool = icmp ne i16 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %yy_current_state.addr, align 4
  store i32 %3, i32* @yy_last_accepting_state, align 4
  %4 = load i8*, i8** %yy_cp, align 8
  store i8* %4, i8** @yy_last_accepting_cpos, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end.18, %if.end
  %5 = load i32, i32* %yy_current_state.addr, align 4
  %idxprom1 = sext i32 %5 to i64
  %arrayidx2 = getelementptr inbounds [913 x i16], [913 x i16]* @yy_base, i32 0, i64 %idxprom1
  %6 = load i16, i16* %arrayidx2, align 2
  %conv = sext i16 %6 to i32
  %7 = load i8, i8* %yy_c, align 1
  %conv3 = zext i8 %7 to i32
  %add = add nsw i32 %conv, %conv3
  %idxprom4 = sext i32 %add to i64
  %arrayidx5 = getelementptr inbounds [1075 x i16], [1075 x i16]* @yy_chk, i32 0, i64 %idxprom4
  %8 = load i16, i16* %arrayidx5, align 2
  %conv6 = sext i16 %8 to i32
  %9 = load i32, i32* %yy_current_state.addr, align 4
  %cmp = icmp ne i32 %conv6, %9
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %10 = load i32, i32* %yy_current_state.addr, align 4
  %idxprom8 = sext i32 %10 to i64
  %arrayidx9 = getelementptr inbounds [913 x i16], [913 x i16]* @yy_def, i32 0, i64 %idxprom8
  %11 = load i16, i16* %arrayidx9, align 2
  %conv10 = sext i16 %11 to i32
  store i32 %conv10, i32* %yy_current_state.addr, align 4
  %12 = load i32, i32* %yy_current_state.addr, align 4
  %cmp11 = icmp sge i32 %12, 901
  br i1 %cmp11, label %if.then.13, label %if.end.18

if.then.13:                                       ; preds = %while.body
  %13 = load i8, i8* %yy_c, align 1
  %conv14 = zext i8 %13 to i32
  %idxprom15 = zext i32 %conv14 to i64
  %arrayidx16 = getelementptr inbounds [62 x i32], [62 x i32]* @yy_meta, i32 0, i64 %idxprom15
  %14 = load i32, i32* %arrayidx16, align 4
  %conv17 = trunc i32 %14 to i8
  store i8 %conv17, i8* %yy_c, align 1
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.13, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %15 = load i32, i32* %yy_current_state.addr, align 4
  %idxprom19 = sext i32 %15 to i64
  %arrayidx20 = getelementptr inbounds [913 x i16], [913 x i16]* @yy_base, i32 0, i64 %idxprom19
  %16 = load i16, i16* %arrayidx20, align 2
  %conv21 = sext i16 %16 to i32
  %17 = load i8, i8* %yy_c, align 1
  %conv22 = zext i8 %17 to i32
  %add23 = add i32 %conv21, %conv22
  %idxprom24 = zext i32 %add23 to i64
  %arrayidx25 = getelementptr inbounds [1075 x i16], [1075 x i16]* @yy_nxt, i32 0, i64 %idxprom24
  %18 = load i16, i16* %arrayidx25, align 2
  %conv26 = sext i16 %18 to i32
  store i32 %conv26, i32* %yy_current_state.addr, align 4
  %19 = load i32, i32* %yy_current_state.addr, align 4
  %cmp27 = icmp eq i32 %19, 900
  %conv28 = zext i1 %cmp27 to i32
  store i32 %conv28, i32* %yy_is_jam, align 4
  %20 = load i32, i32* %yy_is_jam, align 4
  %tobool29 = icmp ne i32 %20, 0
  br i1 %tobool29, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.end
  br label %cond.end

cond.false:                                       ; preds = %while.end
  %21 = load i32, i32* %yy_current_state.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %21, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind uwtable
define internal i32 @yy_get_next_buffer() #0 {
entry:
  %retval = alloca i32, align 4
  %dest = alloca i8*, align 8
  %source = alloca i8*, align 8
  %number_to_move = alloca i32, align 4
  %i = alloca i32, align 4
  %ret_val = alloca i32, align 4
  %num_to_read = alloca i32, align 4
  %b = alloca %struct.yy_buffer_state*, align 8
  %yy_c_buf_p_offset = alloca i32, align 4
  %new_size = alloca i32, align 4
  %c = alloca i32, align 4
  %n = alloca i64, align 8
  %0 = load i64, i64* @yy_buffer_stack_top, align 8
  %1 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %1, i64 %0
  %2 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx, align 8
  %yy_ch_buf = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %2, i32 0, i32 1
  %3 = load i8*, i8** %yy_ch_buf, align 8
  store i8* %3, i8** %dest, align 8
  %4 = load i8*, i8** @sshtext, align 8
  store i8* %4, i8** %source, align 8
  %5 = load i8*, i8** @yy_c_buf_p, align 8
  %6 = load i32, i32* @yy_n_chars, align 4
  %add = add nsw i32 %6, 1
  %idxprom = sext i32 %add to i64
  %7 = load i64, i64* @yy_buffer_stack_top, align 8
  %8 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx1 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %8, i64 %7
  %9 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx1, align 8
  %yy_ch_buf2 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %9, i32 0, i32 1
  %10 = load i8*, i8** %yy_ch_buf2, align 8
  %arrayidx3 = getelementptr inbounds i8, i8* %10, i64 %idxprom
  %cmp = icmp ugt i8* %5, %arrayidx3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @yy_fatal_error(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.138, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %11 = load i64, i64* @yy_buffer_stack_top, align 8
  %12 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx4 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %12, i64 %11
  %13 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx4, align 8
  %yy_fill_buffer = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %13, i32 0, i32 10
  %14 = load i32, i32* %yy_fill_buffer, align 4
  %cmp5 = icmp eq i32 %14, 0
  br i1 %cmp5, label %if.then.6, label %if.end.9

if.then.6:                                        ; preds = %if.end
  %15 = load i8*, i8** @yy_c_buf_p, align 8
  %16 = load i8*, i8** @sshtext, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %15 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %16 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub = sub nsw i64 %sub.ptr.sub, 0
  %cmp7 = icmp eq i64 %sub, 1
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %if.then.6
  store i32 1, i32* %retval
  br label %return

if.else:                                          ; preds = %if.then.6
  store i32 2, i32* %retval
  br label %return

if.end.9:                                         ; preds = %if.end
  %17 = load i8*, i8** @yy_c_buf_p, align 8
  %18 = load i8*, i8** @sshtext, align 8
  %sub.ptr.lhs.cast10 = ptrtoint i8* %17 to i64
  %sub.ptr.rhs.cast11 = ptrtoint i8* %18 to i64
  %sub.ptr.sub12 = sub i64 %sub.ptr.lhs.cast10, %sub.ptr.rhs.cast11
  %conv = trunc i64 %sub.ptr.sub12 to i32
  %sub13 = sub nsw i32 %conv, 1
  store i32 %sub13, i32* %number_to_move, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.9
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %number_to_move, align 4
  %cmp14 = icmp slt i32 %19, %20
  br i1 %cmp14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %21 = load i8*, i8** %source, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %21, i32 1
  store i8* %incdec.ptr, i8** %source, align 8
  %22 = load i8, i8* %21, align 1
  %23 = load i8*, i8** %dest, align 8
  %incdec.ptr16 = getelementptr inbounds i8, i8* %23, i32 1
  store i8* %incdec.ptr16, i8** %dest, align 8
  store i8 %22, i8* %23, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %24 = load i32, i32* %i, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %25 = load i64, i64* @yy_buffer_stack_top, align 8
  %26 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx17 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %26, i64 %25
  %27 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx17, align 8
  %yy_buffer_status = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %27, i32 0, i32 11
  %28 = load i32, i32* %yy_buffer_status, align 4
  %cmp18 = icmp eq i32 %28, 2
  br i1 %cmp18, label %if.then.20, label %if.else.22

if.then.20:                                       ; preds = %for.end
  store i32 0, i32* @yy_n_chars, align 4
  %29 = load i64, i64* @yy_buffer_stack_top, align 8
  %30 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx21 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %30, i64 %29
  %31 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx21, align 8
  %yy_n_chars = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %31, i32 0, i32 4
  store i32 0, i32* %yy_n_chars, align 4
  br label %if.end.137

if.else.22:                                       ; preds = %for.end
  %32 = load i64, i64* @yy_buffer_stack_top, align 8
  %33 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx23 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %33, i64 %32
  %34 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx23, align 8
  %yy_buf_size = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %34, i32 0, i32 3
  %35 = load i32, i32* %yy_buf_size, align 4
  %36 = load i32, i32* %number_to_move, align 4
  %sub24 = sub i32 %35, %36
  %sub25 = sub i32 %sub24, 1
  store i32 %sub25, i32* %num_to_read, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end.57, %if.else.22
  %37 = load i32, i32* %num_to_read, align 4
  %cmp26 = icmp sle i32 %37, 0
  br i1 %cmp26, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %38 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %tobool = icmp ne %struct.yy_buffer_state** %38, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %39 = load i64, i64* @yy_buffer_stack_top, align 8
  %40 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx28 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %40, i64 %39
  %41 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx28, align 8
  br label %cond.end

cond.false:                                       ; preds = %while.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.yy_buffer_state* [ %41, %cond.true ], [ null, %cond.false ]
  store %struct.yy_buffer_state* %cond, %struct.yy_buffer_state** %b, align 8
  %42 = load i8*, i8** @yy_c_buf_p, align 8
  %43 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_ch_buf29 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %43, i32 0, i32 1
  %44 = load i8*, i8** %yy_ch_buf29, align 8
  %sub.ptr.lhs.cast30 = ptrtoint i8* %42 to i64
  %sub.ptr.rhs.cast31 = ptrtoint i8* %44 to i64
  %sub.ptr.sub32 = sub i64 %sub.ptr.lhs.cast30, %sub.ptr.rhs.cast31
  %conv33 = trunc i64 %sub.ptr.sub32 to i32
  store i32 %conv33, i32* %yy_c_buf_p_offset, align 4
  %45 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_is_our_buffer = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %45, i32 0, i32 5
  %46 = load i32, i32* %yy_is_our_buffer, align 4
  %tobool34 = icmp ne i32 %46, 0
  br i1 %tobool34, label %if.then.35, label %if.else.51

if.then.35:                                       ; preds = %cond.end
  %47 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_buf_size36 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %47, i32 0, i32 3
  %48 = load i32, i32* %yy_buf_size36, align 4
  %mul = mul i32 %48, 2
  store i32 %mul, i32* %new_size, align 4
  %49 = load i32, i32* %new_size, align 4
  %cmp37 = icmp sle i32 %49, 0
  br i1 %cmp37, label %if.then.39, label %if.else.43

if.then.39:                                       ; preds = %if.then.35
  %50 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_buf_size40 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %50, i32 0, i32 3
  %51 = load i32, i32* %yy_buf_size40, align 4
  %div = udiv i32 %51, 8
  %52 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_buf_size41 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %52, i32 0, i32 3
  %53 = load i32, i32* %yy_buf_size41, align 4
  %add42 = add i32 %53, %div
  store i32 %add42, i32* %yy_buf_size41, align 4
  br label %if.end.46

if.else.43:                                       ; preds = %if.then.35
  %54 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_buf_size44 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %54, i32 0, i32 3
  %55 = load i32, i32* %yy_buf_size44, align 4
  %mul45 = mul i32 %55, 2
  store i32 %mul45, i32* %yy_buf_size44, align 4
  br label %if.end.46

if.end.46:                                        ; preds = %if.else.43, %if.then.39
  %56 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_ch_buf47 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %56, i32 0, i32 1
  %57 = load i8*, i8** %yy_ch_buf47, align 8
  %58 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_buf_size48 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %58, i32 0, i32 3
  %59 = load i32, i32* %yy_buf_size48, align 4
  %add49 = add i32 %59, 2
  %call = call i8* @sshrealloc(i8* %57, i32 %add49)
  %60 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_ch_buf50 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %60, i32 0, i32 1
  store i8* %call, i8** %yy_ch_buf50, align 8
  br label %if.end.53

if.else.51:                                       ; preds = %cond.end
  %61 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_ch_buf52 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %61, i32 0, i32 1
  store i8* null, i8** %yy_ch_buf52, align 8
  br label %if.end.53

if.end.53:                                        ; preds = %if.else.51, %if.end.46
  %62 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_ch_buf54 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %62, i32 0, i32 1
  %63 = load i8*, i8** %yy_ch_buf54, align 8
  %tobool55 = icmp ne i8* %63, null
  br i1 %tobool55, label %if.end.57, label %if.then.56

if.then.56:                                       ; preds = %if.end.53
  call void @yy_fatal_error(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.139, i32 0, i32 0))
  br label %if.end.57

if.end.57:                                        ; preds = %if.then.56, %if.end.53
  %64 = load i32, i32* %yy_c_buf_p_offset, align 4
  %idxprom58 = sext i32 %64 to i64
  %65 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_ch_buf59 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %65, i32 0, i32 1
  %66 = load i8*, i8** %yy_ch_buf59, align 8
  %arrayidx60 = getelementptr inbounds i8, i8* %66, i64 %idxprom58
  store i8* %arrayidx60, i8** @yy_c_buf_p, align 8
  %67 = load i64, i64* @yy_buffer_stack_top, align 8
  %68 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx61 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %68, i64 %67
  %69 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx61, align 8
  %yy_buf_size62 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %69, i32 0, i32 3
  %70 = load i32, i32* %yy_buf_size62, align 4
  %71 = load i32, i32* %number_to_move, align 4
  %sub63 = sub i32 %70, %71
  %sub64 = sub i32 %sub63, 1
  store i32 %sub64, i32* %num_to_read, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %72 = load i32, i32* %num_to_read, align 4
  %cmp65 = icmp sgt i32 %72, 8192
  br i1 %cmp65, label %if.then.67, label %if.end.68

if.then.67:                                       ; preds = %while.end
  store i32 8192, i32* %num_to_read, align 4
  br label %if.end.68

if.end.68:                                        ; preds = %if.then.67, %while.end
  %73 = load i64, i64* @yy_buffer_stack_top, align 8
  %74 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx69 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %74, i64 %73
  %75 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx69, align 8
  %yy_is_interactive = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %75, i32 0, i32 6
  %76 = load i32, i32* %yy_is_interactive, align 4
  %tobool70 = icmp ne i32 %76, 0
  br i1 %tobool70, label %if.then.71, label %if.else.110

if.then.71:                                       ; preds = %if.end.68
  store i32 42, i32* %c, align 4
  store i64 0, i64* %n, align 8
  br label %for.cond.72

for.cond.72:                                      ; preds = %for.inc.88, %if.then.71
  %77 = load i64, i64* %n, align 8
  %78 = load i32, i32* %num_to_read, align 4
  %conv73 = sext i32 %78 to i64
  %cmp74 = icmp ult i64 %77, %conv73
  br i1 %cmp74, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %for.cond.72
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** @sshin, align 8
  %call76 = call i32 @_IO_getc(%struct._IO_FILE* %79)
  store i32 %call76, i32* %c, align 4
  %cmp77 = icmp ne i32 %call76, -1
  br i1 %cmp77, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %80 = load i32, i32* %c, align 4
  %cmp79 = icmp ne i32 %80, 10
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %for.cond.72
  %81 = phi i1 [ false, %land.lhs.true ], [ false, %for.cond.72 ], [ %cmp79, %land.rhs ]
  br i1 %81, label %for.body.81, label %for.end.90

for.body.81:                                      ; preds = %land.end
  %82 = load i32, i32* %c, align 4
  %conv82 = trunc i32 %82 to i8
  %83 = load i64, i64* %n, align 8
  %84 = load i32, i32* %number_to_move, align 4
  %idxprom83 = sext i32 %84 to i64
  %85 = load i64, i64* @yy_buffer_stack_top, align 8
  %86 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx84 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %86, i64 %85
  %87 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx84, align 8
  %yy_ch_buf85 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %87, i32 0, i32 1
  %88 = load i8*, i8** %yy_ch_buf85, align 8
  %arrayidx86 = getelementptr inbounds i8, i8* %88, i64 %idxprom83
  %arrayidx87 = getelementptr inbounds i8, i8* %arrayidx86, i64 %83
  store i8 %conv82, i8* %arrayidx87, align 1
  br label %for.inc.88

for.inc.88:                                       ; preds = %for.body.81
  %89 = load i64, i64* %n, align 8
  %inc89 = add i64 %89, 1
  store i64 %inc89, i64* %n, align 8
  br label %for.cond.72

for.end.90:                                       ; preds = %land.end
  %90 = load i32, i32* %c, align 4
  %cmp91 = icmp eq i32 %90, 10
  br i1 %cmp91, label %if.then.93, label %if.end.101

if.then.93:                                       ; preds = %for.end.90
  %91 = load i32, i32* %c, align 4
  %conv94 = trunc i32 %91 to i8
  %92 = load i64, i64* %n, align 8
  %inc95 = add i64 %92, 1
  store i64 %inc95, i64* %n, align 8
  %93 = load i32, i32* %number_to_move, align 4
  %idxprom96 = sext i32 %93 to i64
  %94 = load i64, i64* @yy_buffer_stack_top, align 8
  %95 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx97 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %95, i64 %94
  %96 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx97, align 8
  %yy_ch_buf98 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %96, i32 0, i32 1
  %97 = load i8*, i8** %yy_ch_buf98, align 8
  %arrayidx99 = getelementptr inbounds i8, i8* %97, i64 %idxprom96
  %arrayidx100 = getelementptr inbounds i8, i8* %arrayidx99, i64 %92
  store i8 %conv94, i8* %arrayidx100, align 1
  br label %if.end.101

if.end.101:                                       ; preds = %if.then.93, %for.end.90
  %98 = load i32, i32* %c, align 4
  %cmp102 = icmp eq i32 %98, -1
  br i1 %cmp102, label %land.lhs.true.104, label %if.end.108

land.lhs.true.104:                                ; preds = %if.end.101
  %99 = load %struct._IO_FILE*, %struct._IO_FILE** @sshin, align 8
  %call105 = call i32 @ferror(%struct._IO_FILE* %99) #3
  %tobool106 = icmp ne i32 %call105, 0
  br i1 %tobool106, label %if.then.107, label %if.end.108

if.then.107:                                      ; preds = %land.lhs.true.104
  call void @yy_fatal_error(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.140, i32 0, i32 0))
  br label %if.end.108

if.end.108:                                       ; preds = %if.then.107, %land.lhs.true.104, %if.end.101
  %100 = load i64, i64* %n, align 8
  %conv109 = trunc i64 %100 to i32
  store i32 %conv109, i32* @yy_n_chars, align 4
  br label %if.end.134

if.else.110:                                      ; preds = %if.end.68
  %call111 = call i32* @__errno_location() #7
  store i32 0, i32* %call111, align 4
  br label %while.cond.112

while.cond.112:                                   ; preds = %if.end.131, %if.else.110
  %101 = load i32, i32* %number_to_move, align 4
  %idxprom113 = sext i32 %101 to i64
  %102 = load i64, i64* @yy_buffer_stack_top, align 8
  %103 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx114 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %103, i64 %102
  %104 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx114, align 8
  %yy_ch_buf115 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %104, i32 0, i32 1
  %105 = load i8*, i8** %yy_ch_buf115, align 8
  %arrayidx116 = getelementptr inbounds i8, i8* %105, i64 %idxprom113
  %106 = load i32, i32* %num_to_read, align 4
  %conv117 = sext i32 %106 to i64
  %107 = load %struct._IO_FILE*, %struct._IO_FILE** @sshin, align 8
  %call118 = call i64 @fread(i8* %arrayidx116, i64 1, i64 %conv117, %struct._IO_FILE* %107)
  %conv119 = trunc i64 %call118 to i32
  store i32 %conv119, i32* @yy_n_chars, align 4
  %cmp120 = icmp eq i32 %conv119, 0
  br i1 %cmp120, label %land.rhs.122, label %land.end.125

land.rhs.122:                                     ; preds = %while.cond.112
  %108 = load %struct._IO_FILE*, %struct._IO_FILE** @sshin, align 8
  %call123 = call i32 @ferror(%struct._IO_FILE* %108) #3
  %tobool124 = icmp ne i32 %call123, 0
  br label %land.end.125

land.end.125:                                     ; preds = %land.rhs.122, %while.cond.112
  %109 = phi i1 [ false, %while.cond.112 ], [ %tobool124, %land.rhs.122 ]
  br i1 %109, label %while.body.126, label %while.end.133

while.body.126:                                   ; preds = %land.end.125
  %call127 = call i32* @__errno_location() #7
  %110 = load i32, i32* %call127, align 4
  %cmp128 = icmp ne i32 %110, 4
  br i1 %cmp128, label %if.then.130, label %if.end.131

if.then.130:                                      ; preds = %while.body.126
  call void @yy_fatal_error(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.140, i32 0, i32 0))
  br label %while.end.133

if.end.131:                                       ; preds = %while.body.126
  %call132 = call i32* @__errno_location() #7
  store i32 0, i32* %call132, align 4
  %111 = load %struct._IO_FILE*, %struct._IO_FILE** @sshin, align 8
  call void @clearerr(%struct._IO_FILE* %111) #3
  br label %while.cond.112

while.end.133:                                    ; preds = %if.then.130, %land.end.125
  br label %if.end.134

if.end.134:                                       ; preds = %while.end.133, %if.end.108
  %112 = load i32, i32* @yy_n_chars, align 4
  %113 = load i64, i64* @yy_buffer_stack_top, align 8
  %114 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx135 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %114, i64 %113
  %115 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx135, align 8
  %yy_n_chars136 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %115, i32 0, i32 4
  store i32 %112, i32* %yy_n_chars136, align 4
  br label %if.end.137

if.end.137:                                       ; preds = %if.end.134, %if.then.20
  %116 = load i32, i32* @yy_n_chars, align 4
  %cmp138 = icmp eq i32 %116, 0
  br i1 %cmp138, label %if.then.140, label %if.else.148

if.then.140:                                      ; preds = %if.end.137
  %117 = load i32, i32* %number_to_move, align 4
  %cmp141 = icmp eq i32 %117, 0
  br i1 %cmp141, label %if.then.143, label %if.else.144

if.then.143:                                      ; preds = %if.then.140
  store i32 1, i32* %ret_val, align 4
  %118 = load %struct._IO_FILE*, %struct._IO_FILE** @sshin, align 8
  call void @sshrestart(%struct._IO_FILE* %118)
  br label %if.end.147

if.else.144:                                      ; preds = %if.then.140
  store i32 2, i32* %ret_val, align 4
  %119 = load i64, i64* @yy_buffer_stack_top, align 8
  %120 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx145 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %120, i64 %119
  %121 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx145, align 8
  %yy_buffer_status146 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %121, i32 0, i32 11
  store i32 2, i32* %yy_buffer_status146, align 4
  br label %if.end.147

if.end.147:                                       ; preds = %if.else.144, %if.then.143
  br label %if.end.149

if.else.148:                                      ; preds = %if.end.137
  store i32 0, i32* %ret_val, align 4
  br label %if.end.149

if.end.149:                                       ; preds = %if.else.148, %if.end.147
  %122 = load i32, i32* %number_to_move, align 4
  %123 = load i32, i32* @yy_n_chars, align 4
  %add150 = add nsw i32 %123, %122
  store i32 %add150, i32* @yy_n_chars, align 4
  %124 = load i32, i32* @yy_n_chars, align 4
  %idxprom151 = sext i32 %124 to i64
  %125 = load i64, i64* @yy_buffer_stack_top, align 8
  %126 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx152 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %126, i64 %125
  %127 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx152, align 8
  %yy_ch_buf153 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %127, i32 0, i32 1
  %128 = load i8*, i8** %yy_ch_buf153, align 8
  %arrayidx154 = getelementptr inbounds i8, i8* %128, i64 %idxprom151
  store i8 0, i8* %arrayidx154, align 1
  %129 = load i32, i32* @yy_n_chars, align 4
  %add155 = add nsw i32 %129, 1
  %idxprom156 = sext i32 %add155 to i64
  %130 = load i64, i64* @yy_buffer_stack_top, align 8
  %131 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx157 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %131, i64 %130
  %132 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx157, align 8
  %yy_ch_buf158 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %132, i32 0, i32 1
  %133 = load i8*, i8** %yy_ch_buf158, align 8
  %arrayidx159 = getelementptr inbounds i8, i8* %133, i64 %idxprom156
  store i8 0, i8* %arrayidx159, align 1
  %134 = load i64, i64* @yy_buffer_stack_top, align 8
  %135 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx160 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %135, i64 %134
  %136 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx160, align 8
  %yy_ch_buf161 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %136, i32 0, i32 1
  %137 = load i8*, i8** %yy_ch_buf161, align 8
  %arrayidx162 = getelementptr inbounds i8, i8* %137, i64 0
  store i8* %arrayidx162, i8** @sshtext, align 8
  %138 = load i32, i32* %ret_val, align 4
  store i32 %138, i32* %retval
  br label %return

return:                                           ; preds = %if.end.149, %if.else, %if.then.8
  %139 = load i32, i32* %retval
  ret i32 %139
}

; Function Attrs: nounwind uwtable
define i32 @sshwrap() #0 {
entry:
  ret i32 1
}

; Function Attrs: nounwind uwtable
define void @sshrestart(%struct._IO_FILE* %input_file) #0 {
entry:
  %input_file.addr = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %input_file, %struct._IO_FILE** %input_file.addr, align 8
  %0 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %tobool = icmp ne %struct.yy_buffer_state** %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i64, i64* @yy_buffer_stack_top, align 8
  %2 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %2, i64 %1
  %3 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx, align 8
  %tobool1 = icmp ne %struct.yy_buffer_state* %3, null
  br i1 %tobool1, label %if.end, label %if.then

cond.false:                                       ; preds = %entry
  br i1 false, label %if.end, label %if.then

if.then:                                          ; preds = %cond.false, %cond.true
  call void @sshensure_buffer_stack()
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @sshin, align 8
  %call = call %struct.yy_buffer_state* @ssh_create_buffer(%struct._IO_FILE* %4, i32 16384)
  %5 = load i64, i64* @yy_buffer_stack_top, align 8
  %6 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx2 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %6, i64 %5
  store %struct.yy_buffer_state* %call, %struct.yy_buffer_state** %arrayidx2, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  %7 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %tobool3 = icmp ne %struct.yy_buffer_state** %7, null
  br i1 %tobool3, label %cond.true.4, label %cond.false.6

cond.true.4:                                      ; preds = %if.end
  %8 = load i64, i64* @yy_buffer_stack_top, align 8
  %9 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx5 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %9, i64 %8
  %10 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx5, align 8
  br label %cond.end

cond.false.6:                                     ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false.6, %cond.true.4
  %cond = phi %struct.yy_buffer_state* [ %10, %cond.true.4 ], [ null, %cond.false.6 ]
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %input_file.addr, align 8
  call void @ssh_init_buffer(%struct.yy_buffer_state* %cond, %struct._IO_FILE* %11)
  call void @ssh_load_buffer_state()
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @yy_fatal_error(i8* %msg) #0 {
entry:
  %msg.addr = alloca i8*, align 8
  store i8* %msg, i8** %msg.addr, align 8
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %1 = load i8*, i8** %msg.addr, align 8
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.141, i32 0, i32 0), i8* %1)
  call void @exit(i32 2) #8
  unreachable

return:                                           ; No predecessors!
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @ssh_init_buffer(%struct.yy_buffer_state* %b, %struct._IO_FILE* %file) #0 {
entry:
  %b.addr = alloca %struct.yy_buffer_state*, align 8
  %file.addr = alloca %struct._IO_FILE*, align 8
  %oerrno = alloca i32, align 4
  store %struct.yy_buffer_state* %b, %struct.yy_buffer_state** %b.addr, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  %call = call i32* @__errno_location() #7
  %0 = load i32, i32* %call, align 4
  store i32 %0, i32* %oerrno, align 4
  %1 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  call void @ssh_flush_buffer(%struct.yy_buffer_state* %1)
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %3 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %yy_input_file = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %3, i32 0, i32 0
  store %struct._IO_FILE* %2, %struct._IO_FILE** %yy_input_file, align 8
  %4 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %yy_fill_buffer = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %4, i32 0, i32 10
  store i32 1, i32* %yy_fill_buffer, align 4
  %5 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %6 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %tobool = icmp ne %struct.yy_buffer_state** %6, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %7 = load i64, i64* @yy_buffer_stack_top, align 8
  %8 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %8, i64 %7
  %9 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.yy_buffer_state* [ %9, %cond.true ], [ null, %cond.false ]
  %cmp = icmp ne %struct.yy_buffer_state* %5, %cond
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %10 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %yy_bs_lineno = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %10, i32 0, i32 8
  store i32 1, i32* %yy_bs_lineno, align 4
  %11 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %yy_bs_column = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %11, i32 0, i32 9
  store i32 0, i32* %yy_bs_column, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %tobool1 = icmp ne %struct._IO_FILE* %12, null
  br i1 %tobool1, label %cond.true.2, label %cond.false.6

cond.true.2:                                      ; preds = %if.end
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call3 = call i32 @fileno(%struct._IO_FILE* %13) #3
  %call4 = call i32 @isatty(i32 %call3) #3
  %cmp5 = icmp sgt i32 %call4, 0
  %conv = zext i1 %cmp5 to i32
  br label %cond.end.7

cond.false.6:                                     ; preds = %if.end
  br label %cond.end.7

cond.end.7:                                       ; preds = %cond.false.6, %cond.true.2
  %cond8 = phi i32 [ %conv, %cond.true.2 ], [ 0, %cond.false.6 ]
  %14 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %yy_is_interactive = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %14, i32 0, i32 6
  store i32 %cond8, i32* %yy_is_interactive, align 4
  %15 = load i32, i32* %oerrno, align 4
  %call9 = call i32* @__errno_location() #7
  store i32 %15, i32* %call9, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @ssh_switch_to_buffer(%struct.yy_buffer_state* %new_buffer) #0 {
entry:
  %new_buffer.addr = alloca %struct.yy_buffer_state*, align 8
  store %struct.yy_buffer_state* %new_buffer, %struct.yy_buffer_state** %new_buffer.addr, align 8
  call void @sshensure_buffer_stack()
  %0 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %tobool = icmp ne %struct.yy_buffer_state** %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i64, i64* @yy_buffer_stack_top, align 8
  %2 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %2, i64 %1
  %3 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.yy_buffer_state* [ %3, %cond.true ], [ null, %cond.false ]
  %4 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %new_buffer.addr, align 8
  %cmp = icmp eq %struct.yy_buffer_state* %cond, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  br label %return

if.end:                                           ; preds = %cond.end
  %5 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %tobool1 = icmp ne %struct.yy_buffer_state** %5, null
  br i1 %tobool1, label %cond.true.2, label %cond.false.5

cond.true.2:                                      ; preds = %if.end
  %6 = load i64, i64* @yy_buffer_stack_top, align 8
  %7 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx3 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %7, i64 %6
  %8 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx3, align 8
  %tobool4 = icmp ne %struct.yy_buffer_state* %8, null
  br i1 %tobool4, label %if.then.6, label %if.end.9

cond.false.5:                                     ; preds = %if.end
  br i1 false, label %if.then.6, label %if.end.9

if.then.6:                                        ; preds = %cond.false.5, %cond.true.2
  %9 = load i8, i8* @yy_hold_char, align 1
  %10 = load i8*, i8** @yy_c_buf_p, align 8
  store i8 %9, i8* %10, align 1
  %11 = load i8*, i8** @yy_c_buf_p, align 8
  %12 = load i64, i64* @yy_buffer_stack_top, align 8
  %13 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx7 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %13, i64 %12
  %14 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx7, align 8
  %yy_buf_pos = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %14, i32 0, i32 2
  store i8* %11, i8** %yy_buf_pos, align 8
  %15 = load i32, i32* @yy_n_chars, align 4
  %16 = load i64, i64* @yy_buffer_stack_top, align 8
  %17 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx8 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %17, i64 %16
  %18 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx8, align 8
  %yy_n_chars = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %18, i32 0, i32 4
  store i32 %15, i32* %yy_n_chars, align 4
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.6, %cond.false.5, %cond.true.2
  %19 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %new_buffer.addr, align 8
  %20 = load i64, i64* @yy_buffer_stack_top, align 8
  %21 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx10 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %21, i64 %20
  store %struct.yy_buffer_state* %19, %struct.yy_buffer_state** %arrayidx10, align 8
  call void @ssh_load_buffer_state()
  store i32 1, i32* @yy_did_buffer_switch_on_eof, align 4
  br label %return

return:                                           ; preds = %if.end.9, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define i8* @sshalloc(i32 %size) #0 {
entry:
  %size.addr = alloca i32, align 4
  store i32 %size, i32* %size.addr, align 4
  %0 = load i32, i32* %size.addr, align 4
  %conv = zext i32 %0 to i64
  %call = call noalias i8* @malloc(i64 %conv) #3
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define void @ssh_delete_buffer(%struct.yy_buffer_state* %b) #0 {
entry:
  %b.addr = alloca %struct.yy_buffer_state*, align 8
  store %struct.yy_buffer_state* %b, %struct.yy_buffer_state** %b.addr, align 8
  %0 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %tobool = icmp ne %struct.yy_buffer_state* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %2 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %tobool1 = icmp ne %struct.yy_buffer_state** %2, null
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %3 = load i64, i64* @yy_buffer_stack_top, align 8
  %4 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %4, i64 %3
  %5 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.yy_buffer_state* [ %5, %cond.true ], [ null, %cond.false ]
  %cmp = icmp eq %struct.yy_buffer_state* %1, %cond
  br i1 %cmp, label %if.then.2, label %if.end.4

if.then.2:                                        ; preds = %cond.end
  %6 = load i64, i64* @yy_buffer_stack_top, align 8
  %7 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx3 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %7, i64 %6
  store %struct.yy_buffer_state* null, %struct.yy_buffer_state** %arrayidx3, align 8
  br label %if.end.4

if.end.4:                                         ; preds = %if.then.2, %cond.end
  %8 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %yy_is_our_buffer = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %8, i32 0, i32 5
  %9 = load i32, i32* %yy_is_our_buffer, align 4
  %tobool5 = icmp ne i32 %9, 0
  br i1 %tobool5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end.4
  %10 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %yy_ch_buf = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %10, i32 0, i32 1
  %11 = load i8*, i8** %yy_ch_buf, align 8
  call void @sshfree(i8* %11)
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.6, %if.end.4
  %12 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %13 = bitcast %struct.yy_buffer_state* %12 to i8*
  call void @sshfree(i8* %13)
  br label %return

return:                                           ; preds = %if.end.7, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define void @sshfree(i8* %ptr) #0 {
entry:
  %ptr.addr = alloca i8*, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  call void @free(i8* %0) #3
  ret void
}

; Function Attrs: nounwind uwtable
define void @ssh_flush_buffer(%struct.yy_buffer_state* %b) #0 {
entry:
  %b.addr = alloca %struct.yy_buffer_state*, align 8
  store %struct.yy_buffer_state* %b, %struct.yy_buffer_state** %b.addr, align 8
  %0 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %tobool = icmp ne %struct.yy_buffer_state* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %if.end.8

if.end:                                           ; preds = %entry
  %1 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %yy_n_chars = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %1, i32 0, i32 4
  store i32 0, i32* %yy_n_chars, align 4
  %2 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %yy_ch_buf = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %2, i32 0, i32 1
  %3 = load i8*, i8** %yy_ch_buf, align 8
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 0
  store i8 0, i8* %arrayidx, align 1
  %4 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %yy_ch_buf1 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %4, i32 0, i32 1
  %5 = load i8*, i8** %yy_ch_buf1, align 8
  %arrayidx2 = getelementptr inbounds i8, i8* %5, i64 1
  store i8 0, i8* %arrayidx2, align 1
  %6 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %yy_ch_buf3 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %6, i32 0, i32 1
  %7 = load i8*, i8** %yy_ch_buf3, align 8
  %arrayidx4 = getelementptr inbounds i8, i8* %7, i64 0
  %8 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %yy_buf_pos = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %8, i32 0, i32 2
  store i8* %arrayidx4, i8** %yy_buf_pos, align 8
  %9 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %yy_at_bol = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %9, i32 0, i32 7
  store i32 1, i32* %yy_at_bol, align 4
  %10 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %yy_buffer_status = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %10, i32 0, i32 11
  store i32 0, i32* %yy_buffer_status, align 4
  %11 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %12 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %tobool5 = icmp ne %struct.yy_buffer_state** %12, null
  br i1 %tobool5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %13 = load i64, i64* @yy_buffer_stack_top, align 8
  %14 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx6 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %14, i64 %13
  %15 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx6, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.yy_buffer_state* [ %15, %cond.true ], [ null, %cond.false ]
  %cmp = icmp eq %struct.yy_buffer_state* %11, %cond
  br i1 %cmp, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %cond.end
  call void @ssh_load_buffer_state()
  br label %if.end.8

if.end.8:                                         ; preds = %if.then, %if.then.7, %cond.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @sshpush_buffer_state(%struct.yy_buffer_state* %new_buffer) #0 {
entry:
  %new_buffer.addr = alloca %struct.yy_buffer_state*, align 8
  store %struct.yy_buffer_state* %new_buffer, %struct.yy_buffer_state** %new_buffer.addr, align 8
  %0 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %new_buffer.addr, align 8
  %cmp = icmp eq %struct.yy_buffer_state* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  call void @sshensure_buffer_stack()
  %1 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %tobool = icmp ne %struct.yy_buffer_state** %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %2 = load i64, i64* @yy_buffer_stack_top, align 8
  %3 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %3, i64 %2
  %4 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx, align 8
  %tobool1 = icmp ne %struct.yy_buffer_state* %4, null
  br i1 %tobool1, label %if.then.2, label %if.end.5

cond.false:                                       ; preds = %if.end
  br i1 false, label %if.then.2, label %if.end.5

if.then.2:                                        ; preds = %cond.false, %cond.true
  %5 = load i8, i8* @yy_hold_char, align 1
  %6 = load i8*, i8** @yy_c_buf_p, align 8
  store i8 %5, i8* %6, align 1
  %7 = load i8*, i8** @yy_c_buf_p, align 8
  %8 = load i64, i64* @yy_buffer_stack_top, align 8
  %9 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx3 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %9, i64 %8
  %10 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx3, align 8
  %yy_buf_pos = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %10, i32 0, i32 2
  store i8* %7, i8** %yy_buf_pos, align 8
  %11 = load i32, i32* @yy_n_chars, align 4
  %12 = load i64, i64* @yy_buffer_stack_top, align 8
  %13 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx4 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %13, i64 %12
  %14 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx4, align 8
  %yy_n_chars = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %14, i32 0, i32 4
  store i32 %11, i32* %yy_n_chars, align 4
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.2, %cond.false, %cond.true
  %15 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %tobool6 = icmp ne %struct.yy_buffer_state** %15, null
  br i1 %tobool6, label %cond.true.7, label %cond.false.10

cond.true.7:                                      ; preds = %if.end.5
  %16 = load i64, i64* @yy_buffer_stack_top, align 8
  %17 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx8 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %17, i64 %16
  %18 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx8, align 8
  %tobool9 = icmp ne %struct.yy_buffer_state* %18, null
  br i1 %tobool9, label %if.then.11, label %if.end.12

cond.false.10:                                    ; preds = %if.end.5
  br i1 false, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %cond.false.10, %cond.true.7
  %19 = load i64, i64* @yy_buffer_stack_top, align 8
  %inc = add i64 %19, 1
  store i64 %inc, i64* @yy_buffer_stack_top, align 8
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.11, %cond.false.10, %cond.true.7
  %20 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %new_buffer.addr, align 8
  %21 = load i64, i64* @yy_buffer_stack_top, align 8
  %22 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx13 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %22, i64 %21
  store %struct.yy_buffer_state* %20, %struct.yy_buffer_state** %arrayidx13, align 8
  call void @ssh_load_buffer_state()
  store i32 1, i32* @yy_did_buffer_switch_on_eof, align 4
  br label %return

return:                                           ; preds = %if.end.12, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define void @sshpop_buffer_state() #0 {
entry:
  %0 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %tobool = icmp ne %struct.yy_buffer_state** %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i64, i64* @yy_buffer_stack_top, align 8
  %2 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %2, i64 %1
  %3 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx, align 8
  %tobool1 = icmp ne %struct.yy_buffer_state* %3, null
  br i1 %tobool1, label %if.end, label %if.then

cond.false:                                       ; preds = %entry
  br i1 false, label %if.end, label %if.then

if.then:                                          ; preds = %cond.false, %cond.true
  br label %if.end.15

if.end:                                           ; preds = %cond.false, %cond.true
  %4 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %tobool2 = icmp ne %struct.yy_buffer_state** %4, null
  br i1 %tobool2, label %cond.true.3, label %cond.false.5

cond.true.3:                                      ; preds = %if.end
  %5 = load i64, i64* @yy_buffer_stack_top, align 8
  %6 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx4 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %6, i64 %5
  %7 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx4, align 8
  br label %cond.end

cond.false.5:                                     ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false.5, %cond.true.3
  %cond = phi %struct.yy_buffer_state* [ %7, %cond.true.3 ], [ null, %cond.false.5 ]
  call void @ssh_delete_buffer(%struct.yy_buffer_state* %cond)
  %8 = load i64, i64* @yy_buffer_stack_top, align 8
  %9 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx6 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %9, i64 %8
  store %struct.yy_buffer_state* null, %struct.yy_buffer_state** %arrayidx6, align 8
  %10 = load i64, i64* @yy_buffer_stack_top, align 8
  %cmp = icmp ugt i64 %10, 0
  br i1 %cmp, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %cond.end
  %11 = load i64, i64* @yy_buffer_stack_top, align 8
  %dec = add i64 %11, -1
  store i64 %dec, i64* @yy_buffer_stack_top, align 8
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.7, %cond.end
  %12 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %tobool9 = icmp ne %struct.yy_buffer_state** %12, null
  br i1 %tobool9, label %cond.true.10, label %cond.false.13

cond.true.10:                                     ; preds = %if.end.8
  %13 = load i64, i64* @yy_buffer_stack_top, align 8
  %14 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx11 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %14, i64 %13
  %15 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx11, align 8
  %tobool12 = icmp ne %struct.yy_buffer_state* %15, null
  br i1 %tobool12, label %if.then.14, label %if.end.15

cond.false.13:                                    ; preds = %if.end.8
  br i1 false, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %cond.false.13, %cond.true.10
  call void @ssh_load_buffer_state()
  store i32 1, i32* @yy_did_buffer_switch_on_eof, align 4
  br label %if.end.15

if.end.15:                                        ; preds = %if.then, %if.then.14, %cond.false.13, %cond.true.10
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.yy_buffer_state* @ssh_scan_buffer(i8* %base, i32 %size) #0 {
entry:
  %retval = alloca %struct.yy_buffer_state*, align 8
  %base.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  %b = alloca %struct.yy_buffer_state*, align 8
  store i8* %base, i8** %base.addr, align 8
  store i32 %size, i32* %size.addr, align 4
  %0 = load i32, i32* %size.addr, align 4
  %cmp = icmp ult i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %size.addr, align 4
  %sub = sub i32 %1, 2
  %idxprom = zext i32 %sub to i64
  %2 = load i8*, i8** %base.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp ne i32 %conv, 0
  br i1 %cmp1, label %if.then, label %lor.lhs.false.3

lor.lhs.false.3:                                  ; preds = %lor.lhs.false
  %4 = load i32, i32* %size.addr, align 4
  %sub4 = sub i32 %4, 1
  %idxprom5 = zext i32 %sub4 to i64
  %5 = load i8*, i8** %base.addr, align 8
  %arrayidx6 = getelementptr inbounds i8, i8* %5, i64 %idxprom5
  %6 = load i8, i8* %arrayidx6, align 1
  %conv7 = sext i8 %6 to i32
  %cmp8 = icmp ne i32 %conv7, 0
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.3, %lor.lhs.false, %entry
  store %struct.yy_buffer_state* null, %struct.yy_buffer_state** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.3
  %call = call i8* @sshalloc(i32 64)
  %7 = bitcast i8* %call to %struct.yy_buffer_state*
  store %struct.yy_buffer_state* %7, %struct.yy_buffer_state** %b, align 8
  %8 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %tobool = icmp ne %struct.yy_buffer_state* %8, null
  br i1 %tobool, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %if.end
  call void @yy_fatal_error(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.135, i32 0, i32 0))
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.10, %if.end
  %9 = load i32, i32* %size.addr, align 4
  %sub12 = sub i32 %9, 2
  %10 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_buf_size = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %10, i32 0, i32 3
  store i32 %sub12, i32* %yy_buf_size, align 4
  %11 = load i8*, i8** %base.addr, align 8
  %12 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_ch_buf = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %12, i32 0, i32 1
  store i8* %11, i8** %yy_ch_buf, align 8
  %13 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_buf_pos = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %13, i32 0, i32 2
  store i8* %11, i8** %yy_buf_pos, align 8
  %14 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_is_our_buffer = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %14, i32 0, i32 5
  store i32 0, i32* %yy_is_our_buffer, align 4
  %15 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_input_file = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %15, i32 0, i32 0
  store %struct._IO_FILE* null, %struct._IO_FILE** %yy_input_file, align 8
  %16 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_buf_size13 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %16, i32 0, i32 3
  %17 = load i32, i32* %yy_buf_size13, align 4
  %18 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_n_chars = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %18, i32 0, i32 4
  store i32 %17, i32* %yy_n_chars, align 4
  %19 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_is_interactive = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %19, i32 0, i32 6
  store i32 0, i32* %yy_is_interactive, align 4
  %20 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_at_bol = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %20, i32 0, i32 7
  store i32 1, i32* %yy_at_bol, align 4
  %21 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_fill_buffer = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %21, i32 0, i32 10
  store i32 0, i32* %yy_fill_buffer, align 4
  %22 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_buffer_status = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %22, i32 0, i32 11
  store i32 0, i32* %yy_buffer_status, align 4
  %23 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  call void @ssh_switch_to_buffer(%struct.yy_buffer_state* %23)
  %24 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  store %struct.yy_buffer_state* %24, %struct.yy_buffer_state** %retval
  br label %return

return:                                           ; preds = %if.end.11, %if.then
  %25 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %retval
  ret %struct.yy_buffer_state* %25
}

; Function Attrs: nounwind uwtable
define %struct.yy_buffer_state* @ssh_scan_string(i8* %yystr) #0 {
entry:
  %yystr.addr = alloca i8*, align 8
  store i8* %yystr, i8** %yystr.addr, align 8
  %0 = load i8*, i8** %yystr.addr, align 8
  %1 = load i8*, i8** %yystr.addr, align 8
  %call = call i64 @strlen(i8* %1) #9
  %conv = trunc i64 %call to i32
  %call1 = call %struct.yy_buffer_state* @ssh_scan_bytes(i8* %0, i32 %conv)
  ret %struct.yy_buffer_state* %call1
}

; Function Attrs: nounwind uwtable
define %struct.yy_buffer_state* @ssh_scan_bytes(i8* %yybytes, i32 %_yybytes_len) #0 {
entry:
  %yybytes.addr = alloca i8*, align 8
  %_yybytes_len.addr = alloca i32, align 4
  %b = alloca %struct.yy_buffer_state*, align 8
  %buf = alloca i8*, align 8
  %n = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %yybytes, i8** %yybytes.addr, align 8
  store i32 %_yybytes_len, i32* %_yybytes_len.addr, align 4
  %0 = load i32, i32* %_yybytes_len.addr, align 4
  %add = add nsw i32 %0, 2
  store i32 %add, i32* %n, align 4
  %1 = load i32, i32* %n, align 4
  %call = call i8* @sshalloc(i32 %1)
  store i8* %call, i8** %buf, align 8
  %2 = load i8*, i8** %buf, align 8
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @yy_fatal_error(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.136, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %_yybytes_len.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %6 = load i8*, i8** %yybytes.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 %idxprom
  %7 = load i8, i8* %arrayidx, align 1
  %8 = load i32, i32* %i, align 4
  %idxprom1 = sext i32 %8 to i64
  %9 = load i8*, i8** %buf, align 8
  %arrayidx2 = getelementptr inbounds i8, i8* %9, i64 %idxprom1
  store i8 %7, i8* %arrayidx2, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i32, i32* %_yybytes_len.addr, align 4
  %add3 = add nsw i32 %11, 1
  %idxprom4 = sext i32 %add3 to i64
  %12 = load i8*, i8** %buf, align 8
  %arrayidx5 = getelementptr inbounds i8, i8* %12, i64 %idxprom4
  store i8 0, i8* %arrayidx5, align 1
  %13 = load i32, i32* %_yybytes_len.addr, align 4
  %idxprom6 = sext i32 %13 to i64
  %14 = load i8*, i8** %buf, align 8
  %arrayidx7 = getelementptr inbounds i8, i8* %14, i64 %idxprom6
  store i8 0, i8* %arrayidx7, align 1
  %15 = load i8*, i8** %buf, align 8
  %16 = load i32, i32* %n, align 4
  %call8 = call %struct.yy_buffer_state* @ssh_scan_buffer(i8* %15, i32 %16)
  store %struct.yy_buffer_state* %call8, %struct.yy_buffer_state** %b, align 8
  %17 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %tobool9 = icmp ne %struct.yy_buffer_state* %17, null
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %for.end
  call void @yy_fatal_error(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.137, i32 0, i32 0))
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.10, %for.end
  %18 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_is_our_buffer = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %18, i32 0, i32 5
  store i32 1, i32* %yy_is_our_buffer, align 4
  %19 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  ret %struct.yy_buffer_state* %19
}

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #4

; Function Attrs: nounwind uwtable
define i32 @sshget_lineno() #0 {
entry:
  %0 = load i32, i32* @sshlineno, align 4
  ret i32 %0
}

; Function Attrs: nounwind uwtable
define %struct._IO_FILE* @sshget_in() #0 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @sshin, align 8
  ret %struct._IO_FILE* %0
}

; Function Attrs: nounwind uwtable
define %struct._IO_FILE* @sshget_out() #0 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @sshout, align 8
  ret %struct._IO_FILE* %0
}

; Function Attrs: nounwind uwtable
define i32 @sshget_leng() #0 {
entry:
  %0 = load i32, i32* @sshleng, align 4
  ret i32 %0
}

; Function Attrs: nounwind uwtable
define i8* @sshget_text() #0 {
entry:
  %0 = load i8*, i8** @sshtext, align 8
  ret i8* %0
}

; Function Attrs: nounwind uwtable
define void @sshset_lineno(i32 %line_number) #0 {
entry:
  %line_number.addr = alloca i32, align 4
  store i32 %line_number, i32* %line_number.addr, align 4
  %0 = load i32, i32* %line_number.addr, align 4
  store i32 %0, i32* @sshlineno, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @sshset_in(%struct._IO_FILE* %in_str) #0 {
entry:
  %in_str.addr = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %in_str, %struct._IO_FILE** %in_str.addr, align 8
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %in_str.addr, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** @sshin, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @sshset_out(%struct._IO_FILE* %out_str) #0 {
entry:
  %out_str.addr = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %out_str, %struct._IO_FILE** %out_str.addr, align 8
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %out_str.addr, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** @sshout, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @sshget_debug() #0 {
entry:
  %0 = load i32, i32* @ssh_flex_debug, align 4
  ret i32 %0
}

; Function Attrs: nounwind uwtable
define void @sshset_debug(i32 %bdebug) #0 {
entry:
  %bdebug.addr = alloca i32, align 4
  store i32 %bdebug, i32* %bdebug.addr, align 4
  %0 = load i32, i32* %bdebug.addr, align 4
  store i32 %0, i32* @ssh_flex_debug, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @sshlex_destroy() #0 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %cond.end.6, %entry
  %0 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %tobool = icmp ne %struct.yy_buffer_state** %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.cond
  %1 = load i64, i64* @yy_buffer_stack_top, align 8
  %2 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %2, i64 %1
  %3 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx, align 8
  br label %cond.end

cond.false:                                       ; preds = %while.cond
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.yy_buffer_state* [ %3, %cond.true ], [ null, %cond.false ]
  %tobool1 = icmp ne %struct.yy_buffer_state* %cond, null
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %cond.end
  %4 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %tobool2 = icmp ne %struct.yy_buffer_state** %4, null
  br i1 %tobool2, label %cond.true.3, label %cond.false.5

cond.true.3:                                      ; preds = %while.body
  %5 = load i64, i64* @yy_buffer_stack_top, align 8
  %6 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx4 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %6, i64 %5
  %7 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %arrayidx4, align 8
  br label %cond.end.6

cond.false.5:                                     ; preds = %while.body
  br label %cond.end.6

cond.end.6:                                       ; preds = %cond.false.5, %cond.true.3
  %cond7 = phi %struct.yy_buffer_state* [ %7, %cond.true.3 ], [ null, %cond.false.5 ]
  call void @ssh_delete_buffer(%struct.yy_buffer_state* %cond7)
  %8 = load i64, i64* @yy_buffer_stack_top, align 8
  %9 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %arrayidx8 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %9, i64 %8
  store %struct.yy_buffer_state* null, %struct.yy_buffer_state** %arrayidx8, align 8
  call void @sshpop_buffer_state()
  br label %while.cond

while.end:                                        ; preds = %cond.end
  %10 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %11 = bitcast %struct.yy_buffer_state** %10 to i8*
  call void @sshfree(i8* %11)
  store %struct.yy_buffer_state** null, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %call = call i32 @yy_init_globals()
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @yy_init_globals() #0 {
entry:
  store i32 1, i32* @sshlineno, align 4
  store %struct.yy_buffer_state** null, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  store i64 0, i64* @yy_buffer_stack_top, align 8
  store i64 0, i64* @yy_buffer_stack_max, align 8
  store i8* null, i8** @yy_c_buf_p, align 8
  store i32 0, i32* @yy_init, align 4
  store i32 0, i32* @yy_start, align 4
  store %struct._IO_FILE* null, %struct._IO_FILE** @sshin, align 8
  store %struct._IO_FILE* null, %struct._IO_FILE** @sshout, align 8
  ret i32 0
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #2

; Function Attrs: nounwind uwtable
define i8* @sshrealloc(i8* %ptr, i32 %size) #0 {
entry:
  %ptr.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  store i8* %ptr, i8** %ptr.addr, align 8
  store i32 %size, i32* %size.addr, align 4
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i32, i32* %size.addr, align 4
  %conv = zext i32 %1 to i64
  %call = call i8* @realloc(i8* %0, i64 %conv) #3
  ret i8* %call
}

; Function Attrs: nounwind
declare i8* @realloc(i8*, i64) #2

; Function Attrs: nounwind
declare void @free(i8*) #2

; Function Attrs: nounwind uwtable
define void @sshlex_initialize() #0 {
entry:
  %0 = load i32, i32* @sshlex_initialize.first_time, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* @sshlex_initialize.first_time, align 4
  %call = call i32 @_obstack_begin(%struct.obstack* @string_stack, i32 0, i32 0, i8* (i64)* @xmalloc, void (i8*)* @free)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare i32 @_obstack_begin(%struct.obstack*, i32, i32, i8* (i64)*, void (i8*)*) #1

declare i32 @_IO_getc(%struct._IO_FILE*) #1

; Function Attrs: nounwind
declare i32 @ferror(%struct._IO_FILE*) #2

; Function Attrs: nounwind readnone
declare i32* @__errno_location() #5

declare i64 @fread(i8*, i64, i64, %struct._IO_FILE*) #1

; Function Attrs: nounwind
declare void @clearerr(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare i32 @isatty(i32) #2

; Function Attrs: nounwind
declare i32 @fileno(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #3

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #1

; Function Attrs: noreturn nounwind
declare void @exit(i32) #6

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone }
attributes #8 = { noreturn nounwind }
attributes #9 = { nounwind readonly }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
