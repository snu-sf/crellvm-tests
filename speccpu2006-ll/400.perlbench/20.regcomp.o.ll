; ModuleID = 'regcomp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.regnode = type { i8, i8, i16 }
%struct.scan_data_t = type { i32, i32, i32, i32, %struct.sv*, i32, i32, i32, %struct.sv**, %struct.sv*, i32, %struct.sv*, i32, i32, i32, i32, i32*, %struct.regnode_charclass_class* }
%struct.sv = type { i8*, i32, i32 }
%struct.regnode_charclass_class = type { i8, i8, i16, i32, [32 x i8], [4 x i8] }
%struct.reg_data = type { i32, i8*, [1 x i8*] }
%struct.av = type { %struct.xpvav*, i32, i32 }
%struct.xpvav = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, %struct.sv**, %struct.sv*, i8 }
%struct.magic = type { %struct.magic*, %struct.mgvtbl*, i16, i8, i8, %struct.sv*, i8*, i32 }
%struct.mgvtbl = type { i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*, %struct.sv*, i8*, i32)*, i32 (%struct.magic*, %struct.clone_params*)* }
%struct.clone_params = type { %struct.av*, i64, %struct.interpreter* }
%struct.interpreter = type { i8 }
%struct.hv = type { %struct.xpvhv*, i32, i32 }
%struct.xpvhv = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, i32, %struct.he*, %struct.pmop*, i8* }
%struct.he = type { %struct.he*, %struct.hek*, %struct.sv* }
%struct.hek = type { i32, i32, [1 x i8] }
%struct.pmop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i16, i8, i8, %struct.op*, %struct.op*, %struct.op*, %struct.op*, %struct.pmop*, %struct.regexp*, i32, i32, i8, %struct.hv* }
%struct.op = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i16, i8, i8 }
%struct.regexp = type { i32*, i32*, %struct.regnode*, %struct.reg_substr_data*, i8*, %struct.reg_data*, i8*, i32*, i32, i32, i32, i32, i32, i32, i32, i32, [1 x %struct.regnode] }
%struct.reg_substr_data = type { [3 x %struct.reg_substr_datum] }
%struct.reg_substr_datum = type { i32, i32, %struct.sv*, %struct.sv* }
%struct.curcur = type { i32, i32, i32, i32, i32, %struct.regnode*, %struct.regnode*, i8*, %struct.curcur* }
%struct.cop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i16, i8, i8, i8*, %struct.hv*, %struct.gv*, i32, i32, i32, %struct.sv*, %struct.sv* }
%struct.gv = type { %struct.xpvgv*, i32, i32 }
%struct.xpvgv = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, %struct.gp*, i8*, i64, %struct.hv*, i8 }
%struct.gp = type { %struct.sv*, i32, %struct.io*, %struct.cv*, %struct.av*, %struct.hv*, %struct.gv*, %struct.cv*, i32, i32, i32, i8* }
%struct.io = type { %struct.xpvio*, i32, i32 }
%struct.xpvio = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, %struct._PerlIO**, %struct._PerlIO**, %union.anon, i64, i64, i64, i64, i8*, %struct.gv*, i8*, %struct.gv*, i8*, %struct.gv*, i16, i8, i8 }
%struct._PerlIO = type opaque
%union.anon = type { %struct.__dirstream* }
%struct.__dirstream = type opaque
%struct.cv = type { %struct.xpvcv*, i32, i32 }
%struct.xpvcv = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, %struct.hv*, %struct.op*, %struct.op*, void (%struct.cv*)*, %union.any, %struct.gv*, i8*, i64, %struct.av*, %struct.cv*, i16, i32 }
%union.any = type { i8* }
%struct.re_cc_state = type opaque
%struct.RExC_state_t = type { i32, i8*, %struct.regexp*, i8*, i8*, i8*, i32, %struct.regnode*, %struct.regnode*, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.regnode_2 = type { i8, i8, i16, i16, i16 }
%struct.xpv = type { i8*, i64, i64 }
%struct.regnode_1 = type { i8, i8, i16, i32 }
%struct.regnode_string = type { i8, i8, i16, [1 x i8] }
%struct.regnode_charclass = type { i8, i8, i16, i32, [32 x i8] }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@PL_regkind = constant [62 x i8] c"\00\00\02\02\02\06\06\06\06\09\09\0B\0B\0D\0E\0E\0E\11\12\12\14\14\16\16\18\18\1A\1A\1C\1C\1E\1F !!!$$&'((((,-.///88886789:;8$", align 16
@PL_varies = constant [17 x i8] c"\1F &'(+/01,*)854\1E\00", align 16
@PL_simple = constant [15 x i8] c"\0E\0F\10\11\12\13\14\15\16\17\18\19\1A\1C\00", align 1
@.str = private unnamed_addr constant [15 x i8] c"PERL_RE_COLORS\00", align 1
@PL_colors = external global [6 x i8*], align 16
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@PL_colorset = external global i32, align 4
@PL_regdummy = external global %struct.regnode, align 2
@.str.2 = private unnamed_addr constant [4 x i8] c"...\00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c"%s in regex m/%.*s%s/\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"NULL regexp argument\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"Regexp out of space\00", align 1
@zero_scan_data = internal global %struct.scan_data_t zeroinitializer, align 8
@regarglen = internal constant [62 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\01\01\01\00\01\01\01\01\01\01\01\01\01\01\01\01\01\00\00\01\00", align 16
@.str.6 = private unnamed_addr constant [2 x i8] c"f\00", align 1
@PL_regdata = external global %struct.reg_data*, align 8
@.str.7 = private unnamed_addr constant [24 x i8] c"panic: pregfree comppad\00", align 1
@PL_comppad = external global %struct.av*, align 8
@PL_curpad = external global %struct.sv**, align 8
@.str.8 = private unnamed_addr constant [30 x i8] c"panic: regfree data code '%c'\00", align 1
@reg_off_by_arg = internal constant [62 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\02\01\01\00\01\01\00\00\00\01\00", align 16
@PL_reg_flags = external global i32, align 4
@PL_bostr = external global i8*, align 8
@PL_reginput = external global i8*, align 8
@PL_regbol = external global i8*, align 8
@PL_regeol = external global i8*, align 8
@PL_regstartp = external global i32*, align 8
@PL_regendp = external global i32*, align 8
@PL_reglastparen = external global i32*, align 8
@PL_reglastcloseparen = external global i32*, align 8
@PL_regtill = external global i8*, align 8
@PL_reg_start_tmp = external global i8**, align 8
@PL_reg_start_tmpl = external global i32, align 4
@PL_reg_eval_set = external global i32, align 4
@PL_regnarrate = external global i32, align 4
@PL_regprogram = external global %struct.regnode*, align 8
@PL_regindent = external global i32, align 4
@PL_regcc = external global %struct.curcur*, align 8
@PL_curcop = external global %struct.cop*, align 8
@PL_reg_call_cc = external global %struct.re_cc_state*, align 8
@PL_reg_re = external global %struct.regexp*, align 8
@PL_reg_ganch = external global i8*, align 8
@PL_reg_sv = external global %struct.sv*, align 8
@PL_reg_match_utf8 = external global i8, align 1
@PL_reg_magic = external global %struct.magic*, align 8
@PL_reg_oldpos = external global i32, align 4
@PL_reg_oldcurpm = external global %struct.pmop*, align 8
@PL_reg_curpm = external global %struct.pmop*, align 8
@PL_reg_oldsaved = external global i8*, align 8
@PL_reg_oldsavedlen = external global i64, align 8
@PL_reg_maxiter = external global i32, align 4
@PL_reg_leftiter = external global i32, align 4
@PL_reg_poscache = external global i8*, align 8
@PL_reg_poscache_size = external global i64, align 8
@PL_regprecomp = external global i8*, align 8
@PL_regnpar = external global i32, align 4
@PL_regsize = external global i32, align 4
@PL_curpm = external global %struct.pmop*, align 8
@.str.9 = private unnamed_addr constant [4 x i8] c"%lu\00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"\CC\88\CC\81\00", align 1
@PL_fold = external constant [0 x i8], align 1
@PL_dowarn = external global i8, align 1
@.str.11 = private unnamed_addr constant [55 x i8] c"%s in regex; marked by <-- HERE in m/%.*s <-- HERE %s/\00", align 1
@.str.12 = private unnamed_addr constant [48 x i8] c"Quantifier unexpected on zero-length expression\00", align 1
@.str.13 = private unnamed_addr constant [16 x i8] c"Panic opt close\00", align 1
@.str.14 = private unnamed_addr constant [43 x i8] c"Variable length lookbehind not implemented\00", align 1
@.str.15 = private unnamed_addr constant [43 x i8] c"Lookbehind longer than %lu not implemented\00", align 1
@.str.16 = private unnamed_addr constant [53 x i8] c" in regex; marked by <-- HERE in m/%.*s <-- HERE %s/\00", align 1
@.str.17 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.18 = private unnamed_addr constant [33 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\00", align 1
@.str.19 = private unnamed_addr constant [34 x i8] c"Sequence (?%c...) not implemented\00", align 1
@.str.20 = private unnamed_addr constant [31 x i8] c"Sequence (?#... not terminated\00", align 1
@.str.21 = private unnamed_addr constant [34 x i8] c"(?p{}) is deprecated - use (??{})\00", align 1
@.str.22 = private unnamed_addr constant [52 x i8] c"Sequence (?{...}) not terminated or not {}-balanced\00", align 1
@.str.23 = private unnamed_addr constant [3 x i8] c"re\00", align 1
@.str.24 = private unnamed_addr constant [4 x i8] c"nop\00", align 1
@PL_reginterp_cnt = external global i32, align 4
@PL_compiling = external global %struct.cop, align 8
@.str.25 = private unnamed_addr constant [49 x i8] c"Eval-group not allowed at runtime, use re 'eval'\00", align 1
@PL_tainting = external global i8, align 1
@PL_tainted = external global i8, align 1
@.str.26 = private unnamed_addr constant [42 x i8] c"Eval-group in insecure regular expression\00", align 1
@.str.27 = private unnamed_addr constant [36 x i8] c"value of node is %d in Length macro\00", align 1
@.str.28 = private unnamed_addr constant [36 x i8] c"value of node is %d in Offset macro\00", align 1
@.str.29 = private unnamed_addr constant [32 x i8] c"Switch condition not recognized\00", align 1
@.str.30 = private unnamed_addr constant [51 x i8] c"Switch (?(condition)... contains too many branches\00", align 1
@.str.31 = private unnamed_addr constant [33 x i8] c"Unknown switch condition (?(%.2s\00", align 1
@.str.32 = private unnamed_addr constant [23 x i8] c"Sequence (? incomplete\00", align 1
@.str.33 = private unnamed_addr constant [8 x i8] c"iogcmsx\00", align 1
@.str.34 = private unnamed_addr constant [88 x i8] c"Useless (%s%c) - %suse /%c modifier in regex; marked by <-- HERE in m/%.*s <-- HERE %s/\00", align 1
@.str.35 = private unnamed_addr constant [3 x i8] c"?-\00", align 1
@.str.36 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.37 = private unnamed_addr constant [7 x i8] c"don't \00", align 1
@.str.38 = private unnamed_addr constant [87 x i8] c"Useless (%sc) - %suse /gc modifier in regex; marked by <-- HERE in m/%.*s <-- HERE %s/\00", align 1
@.str.39 = private unnamed_addr constant [34 x i8] c"Sequence (%.*s...) not recognized\00", align 1
@S_reg.parens = internal global [6 x i8] c"=!<,>\00", align 1
@.str.40 = private unnamed_addr constant [12 x i8] c"Unmatched (\00", align 1
@.str.41 = private unnamed_addr constant [12 x i8] c"Unmatched )\00", align 1
@.str.42 = private unnamed_addr constant [22 x i8] c"Junk on end of regexp\00", align 1
@.str.43 = private unnamed_addr constant [33 x i8] c"Quantifier in {,} bigger than %d\00", align 1
@.str.44 = private unnamed_addr constant [26 x i8] c"Can't do {n,m} with n > m\00", align 1
@.str.45 = private unnamed_addr constant [88 x i8] c"%.*s matches null string many times in regex; marked by <-- HERE in m/%.*s <-- HERE %s/\00", align 1
@.str.46 = private unnamed_addr constant [19 x i8] c"Nested quantifiers\00", align 1
@.str.47 = private unnamed_addr constant [12 x i8] c"Unmatched [\00", align 1
@.str.48 = private unnamed_addr constant [13 x i8] c"Internal urp\00", align 1
@.str.49 = private unnamed_addr constant [27 x i8] c"Quantifier follows nothing\00", align 1
@.str.50 = private unnamed_addr constant [29 x i8] c"Missing right brace on \5C%c{}\00", align 1
@.str.51 = private unnamed_addr constant [31 x i8] c"Reference to nonexistent group\00", align 1
@.str.52 = private unnamed_addr constant [11 x i8] c"Trailing \5C\00", align 1
@.str.53 = private unnamed_addr constant [28 x i8] c"Missing right brace on \5Cx{}\00", align 1
@.str.54 = private unnamed_addr constant [91 x i8] c"Unrecognized escape \5C%c passed through in regex; marked by <-- HERE in m/%.*s <-- HERE %s/\00", align 1
@.str.55 = private unnamed_addr constant [18 x i8] c"Internal disaster\00", align 1
@PL_encoding = external global %struct.sv*, align 8
@.str.56 = private unnamed_addr constant [11 x i8] c"# comment\0A\00", align 1
@.str.57 = private unnamed_addr constant [12 x i8] c"Empty \5C%c{}\00", align 1
@.str.58 = private unnamed_addr constant [13 x i8] c"+utf8::%.*s\0A\00", align 1
@.str.59 = private unnamed_addr constant [13 x i8] c"!utf8::%.*s\0A\00", align 1
@.str.60 = private unnamed_addr constant [110 x i8] c"Unrecognized escape \5C%c in character class passed through in regex; marked by <-- HERE in m/%.*s <-- HERE %s/\00", align 1
@.str.61 = private unnamed_addr constant [75 x i8] c"False [] range \22%*.*s\22 in regex; marked by <-- HERE in m/%.*s <-- HERE %s/\00", align 1
@.str.62 = private unnamed_addr constant [13 x i8] c"%04lx\0A%04lx\0A\00", align 1
@.str.63 = private unnamed_addr constant [5 x i8] c"Word\00", align 1
@.str.64 = private unnamed_addr constant [6 x i8] c"Alnum\00", align 1
@.str.65 = private unnamed_addr constant [6 x i8] c"Alpha\00", align 1
@.str.66 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1
@.str.67 = private unnamed_addr constant [6 x i8] c"Blank\00", align 1
@.str.68 = private unnamed_addr constant [6 x i8] c"Cntrl\00", align 1
@.str.69 = private unnamed_addr constant [6 x i8] c"Digit\00", align 1
@.str.70 = private unnamed_addr constant [6 x i8] c"Graph\00", align 1
@.str.71 = private unnamed_addr constant [6 x i8] c"Lower\00", align 1
@.str.72 = private unnamed_addr constant [6 x i8] c"Print\00", align 1
@.str.73 = private unnamed_addr constant [6 x i8] c"Space\00", align 1
@.str.74 = private unnamed_addr constant [6 x i8] c"Punct\00", align 1
@.str.75 = private unnamed_addr constant [10 x i8] c"SpacePerl\00", align 1
@.str.76 = private unnamed_addr constant [6 x i8] c"Upper\00", align 1
@.str.77 = private unnamed_addr constant [7 x i8] c"XDigit\00", align 1
@.str.78 = private unnamed_addr constant [19 x i8] c"Invalid [::] class\00", align 1
@.str.79 = private unnamed_addr constant [14 x i8] c"%cutf8::Is%s\0A\00", align 1
@.str.80 = private unnamed_addr constant [25 x i8] c"Invalid [] range \22%*.*s\22\00", align 1
@.str.81 = private unnamed_addr constant [13 x i8] c"%04lx\09%04lx\0A\00", align 1
@.str.82 = private unnamed_addr constant [7 x i8] c"%04lx\0A\00", align 1
@.str.83 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str.84 = private unnamed_addr constant [106 x i8] c"POSIX syntax [%c %c] belongs inside character classes in regex; marked by <-- HERE in m/%.*s <-- HERE %s/\00", align 1
@.str.85 = private unnamed_addr constant [55 x i8] c"POSIX syntax [%c %c] is reserved for future extensions\00", align 1
@.str.86 = private unnamed_addr constant [5 x i8] c"word\00", align 1
@.str.87 = private unnamed_addr constant [5 x i8] c"alph\00", align 1
@.str.88 = private unnamed_addr constant [5 x i8] c"spac\00", align 1
@.str.89 = private unnamed_addr constant [5 x i8] c"grap\00", align 1
@.str.90 = private unnamed_addr constant [5 x i8] c"asci\00", align 1
@.str.91 = private unnamed_addr constant [5 x i8] c"blan\00", align 1
@.str.92 = private unnamed_addr constant [5 x i8] c"cntr\00", align 1
@.str.93 = private unnamed_addr constant [5 x i8] c"alnu\00", align 1
@.str.94 = private unnamed_addr constant [5 x i8] c"lowe\00", align 1
@.str.95 = private unnamed_addr constant [5 x i8] c"uppe\00", align 1
@.str.96 = private unnamed_addr constant [5 x i8] c"digi\00", align 1
@.str.97 = private unnamed_addr constant [5 x i8] c"prin\00", align 1
@.str.98 = private unnamed_addr constant [5 x i8] c"punc\00", align 1
@.str.99 = private unnamed_addr constant [7 x i8] c"xdigit\00", align 1
@.str.100 = private unnamed_addr constant [29 x i8] c"POSIX class [:%.*s:] unknown\00", align 1
@PL_regfree = external global void (%struct.regexp*)*, align 8

; Function Attrs: nounwind uwtable
define void @Perl_reginitcolors() #0 {
entry:
  %i = alloca i32, align 4
  %s = alloca i8*, align 8
  store i32 0, i32* %i, align 4
  %call = call i8* @getenv(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i32 0, i32 0))
  store i8* %call, i8** %s, align 8
  %0 = load i8*, i8** %s, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.then, label %if.else.7

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %s, align 8
  %call1 = call i8* @Perl_savepv(i8* %1)
  store i8* %call1, i8** %s, align 8
  store i8* %call1, i8** getelementptr inbounds ([6 x i8*], [6 x i8*]* @PL_colors, i32 0, i64 0), align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.then
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  %cmp = icmp slt i32 %inc, 6
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %s, align 8
  %call2 = call i8* @strchr(i8* %3, i32 9)
  store i8* %call2, i8** %s, align 8
  %4 = load i8*, i8** %s, align 8
  %tobool3 = icmp ne i8* %4, null
  br i1 %tobool3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %while.body
  %5 = load i8*, i8** %s, align 8
  store i8 0, i8* %5, align 1
  %6 = load i8*, i8** %s, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %s, align 8
  %7 = load i32, i32* %i, align 4
  %idxprom = sext i32 %7 to i64
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @PL_colors, i32 0, i64 %idxprom
  store i8* %incdec.ptr, i8** %arrayidx, align 8
  br label %if.end

if.else:                                          ; preds = %while.body
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8** %s, align 8
  %8 = load i32, i32* %i, align 4
  %idxprom5 = sext i32 %8 to i64
  %arrayidx6 = getelementptr inbounds [6 x i8*], [6 x i8*]* @PL_colors, i32 0, i64 %idxprom5
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8** %arrayidx6, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.15

if.else.7:                                        ; preds = %entry
  br label %while.cond.8

while.cond.8:                                     ; preds = %while.body.10, %if.else.7
  %9 = load i32, i32* %i, align 4
  %cmp9 = icmp slt i32 %9, 6
  br i1 %cmp9, label %while.body.10, label %while.end.14

while.body.10:                                    ; preds = %while.cond.8
  %10 = load i32, i32* %i, align 4
  %inc11 = add nsw i32 %10, 1
  store i32 %inc11, i32* %i, align 4
  %idxprom12 = sext i32 %10 to i64
  %arrayidx13 = getelementptr inbounds [6 x i8*], [6 x i8*]* @PL_colors, i32 0, i64 %idxprom12
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8** %arrayidx13, align 8
  br label %while.cond.8

while.end.14:                                     ; preds = %while.cond.8
  br label %if.end.15

if.end.15:                                        ; preds = %while.end.14, %while.end
  store i32 1, i32* @PL_colorset, align 4
  ret void
}

declare i8* @getenv(i8*) #1

declare i8* @Perl_savepv(i8*) #1

declare i8* @strchr(i8*, i32) #1

; Function Attrs: nounwind uwtable
define %struct.regexp* @Perl_pregcomp(i8* %exp, i8* %xend, %struct.pmop* %pm) #0 {
entry:
  %retval = alloca %struct.regexp*, align 8
  %exp.addr = alloca i8*, align 8
  %xend.addr = alloca i8*, align 8
  %pm.addr = alloca %struct.pmop*, align 8
  %r = alloca %struct.regexp*, align 8
  %scan = alloca %struct.regnode*, align 8
  %first = alloca %struct.regnode*, align 8
  %flags = alloca i32, align 4
  %minlen = alloca i32, align 4
  %sawplus = alloca i32, align 4
  %sawopen = alloca i32, align 4
  %data = alloca %struct.scan_data_t, align 8
  %RExC_state = alloca %struct.RExC_state_t, align 8
  %pRExC_state = alloca %struct.RExC_state_t*, align 8
  %ellipses = alloca i8*, align 8
  %len = alloca i64, align 8
  %ellipses45 = alloca i8*, align 8
  %len46 = alloca i64, align 8
  %fake = alloca i32, align 4
  %longest_float_length = alloca i64, align 8
  %longest_fixed_length = alloca i64, align 8
  %ch_class = alloca %struct.regnode_charclass_class, align 4
  %stclass_flag = alloca i32, align 4
  %last_close = alloca i32, align 4
  %type301 = alloca i32, align 4
  %t = alloca i32, align 4
  %t502 = alloca i32, align 4
  %n = alloca i32, align 4
  %fake741 = alloca i32, align 4
  %ch_class742 = alloca %struct.regnode_charclass_class, align 4
  %last_close743 = alloca i32, align 4
  %n787 = alloca i32, align 4
  store i8* %exp, i8** %exp.addr, align 8
  store i8* %xend, i8** %xend.addr, align 8
  store %struct.pmop* %pm, %struct.pmop** %pm.addr, align 8
  store i32 0, i32* %minlen, align 4
  store i32 0, i32* %sawplus, align 4
  store i32 0, i32* %sawopen, align 4
  store %struct.RExC_state_t* %RExC_state, %struct.RExC_state_t** %pRExC_state, align 8
  %0 = load i8*, i8** %exp.addr, align 8
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %if.then, label %if.end.7

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8** %ellipses, align 8
  %1 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %end = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1, i32 0, i32 4
  %2 = load i8*, i8** %end, align 8
  %3 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %precomp = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %3, i32 0, i32 1
  %4 = load i8*, i8** %precomp, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %4 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %len, align 8
  %5 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %5, i32 0, i32 8
  %6 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %cmp1 = icmp eq %struct.regnode* %6, @PL_regdummy
  br i1 %cmp1, label %if.end, label %if.then.2

if.then.2:                                        ; preds = %if.then
  %7 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %rx = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %7, i32 0, i32 2
  %8 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %9 = bitcast %struct.regexp* %8 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %9)
  br label %if.end

if.end:                                           ; preds = %if.then.2, %if.then
  %10 = load i64, i64* %len, align 8
  %cmp3 = icmp sgt i64 %10, 127
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end
  store i64 117, i64* %len, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8** %ellipses, align 8
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.4, %if.end
  %11 = load i64, i64* %len, align 8
  %conv = trunc i64 %11 to i32
  %12 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %precomp6 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %12, i32 0, i32 1
  %13 = load i8*, i8** %precomp6, align 8
  %14 = load i8*, i8** %ellipses, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0), i32 %conv, i8* %13, i8* %14)
  br label %if.end.7

if.end.7:                                         ; preds = %if.end.5, %entry
  %15 = load %struct.pmop*, %struct.pmop** %pm.addr, align 8
  %op_pmdynflags = getelementptr inbounds %struct.pmop, %struct.pmop* %15, i32 0, i32 16
  %16 = load i8, i8* %op_pmdynflags, align 1
  %conv8 = zext i8 %16 to i32
  %and = and i32 %conv8, 12
  %17 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %utf8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %17, i32 0, i32 17
  store i32 %and, i32* %utf8, align 4
  %18 = load i8*, i8** %exp.addr, align 8
  %19 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %precomp9 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %19, i32 0, i32 1
  store i8* %18, i8** %precomp9, align 8
  %20 = load %struct.pmop*, %struct.pmop** %pm.addr, align 8
  %op_pmflags = getelementptr inbounds %struct.pmop, %struct.pmop* %20, i32 0, i32 14
  %21 = load i32, i32* %op_pmflags, align 4
  %22 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %flags10 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %22, i32 0, i32 0
  store i32 %21, i32* %flags10, align 4
  %23 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %sawback = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %23, i32 0, i32 10
  store i32 0, i32* %sawback, align 4
  %24 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %seen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %24, i32 0, i32 11
  store i32 0, i32* %seen, align 4
  %25 = load i8*, i8** %exp.addr, align 8
  %26 = load i8, i8* %25, align 1
  %conv11 = sext i8 %26 to i32
  %cmp12 = icmp eq i32 %conv11, 94
  %cond = select i1 %cmp12, i32 -1, i32 0
  %27 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %seen_zerolen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %27, i32 0, i32 15
  store i32 %cond, i32* %seen_zerolen, align 4
  %28 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %seen_evals = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %28, i32 0, i32 16
  store i32 0, i32* %seen_evals, align 4
  %29 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %extralen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %29, i32 0, i32 14
  store i32 0, i32* %extralen, align 4
  %30 = load i8*, i8** %exp.addr, align 8
  %31 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %parse = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %31, i32 0, i32 5
  store i8* %30, i8** %parse, align 8
  %32 = load i8*, i8** %exp.addr, align 8
  %33 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %start = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %33, i32 0, i32 3
  store i8* %32, i8** %start, align 8
  %34 = load i8*, i8** %xend.addr, align 8
  %35 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %end14 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %35, i32 0, i32 4
  store i8* %34, i8** %end14, align 8
  %36 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %naughty = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %36, i32 0, i32 9
  store i32 0, i32* %naughty, align 4
  %37 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %npar = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %37, i32 0, i32 13
  store i32 1, i32* %npar, align 4
  %38 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %size = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %38, i32 0, i32 12
  store i32 0, i32* %size, align 4
  %39 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %emit15 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %39, i32 0, i32 8
  store %struct.regnode* @PL_regdummy, %struct.regnode** %emit15, align 8
  %40 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %whilem_seen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %40, i32 0, i32 6
  store i32 0, i32* %whilem_seen, align 4
  %41 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %call = call %struct.regnode* @S_reg(%struct.RExC_state_t* %41, i32 0, i32* %flags)
  %cmp16 = icmp eq %struct.regnode* %call, null
  br i1 %cmp16, label %if.then.18, label %if.end.20

if.then.18:                                       ; preds = %if.end.7
  %42 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %precomp19 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %42, i32 0, i32 1
  store i8* null, i8** %precomp19, align 8
  store %struct.regexp* null, %struct.regexp** %retval
  br label %return

if.end.20:                                        ; preds = %if.end.7
  %43 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %size21 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %43, i32 0, i32 12
  %44 = load i32, i32* %size21, align 4
  %conv22 = sext i32 %44 to i64
  %cmp23 = icmp sge i64 %conv22, 65536
  br i1 %cmp23, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end.20
  %45 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %extralen25 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %45, i32 0, i32 14
  %46 = load i32, i32* %extralen25, align 4
  %tobool = icmp ne i32 %46, 0
  br i1 %tobool, label %if.then.26, label %if.else

if.then.26:                                       ; preds = %land.lhs.true
  %47 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %extralen27 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %47, i32 0, i32 14
  %48 = load i32, i32* %extralen27, align 4
  %49 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %size28 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %49, i32 0, i32 12
  %50 = load i32, i32* %size28, align 4
  %add = add nsw i32 %50, %48
  store i32 %add, i32* %size28, align 4
  br label %if.end.30

if.else:                                          ; preds = %land.lhs.true, %if.end.20
  %51 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %extralen29 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %51, i32 0, i32 14
  store i32 0, i32* %extralen29, align 4
  br label %if.end.30

if.end.30:                                        ; preds = %if.else, %if.then.26
  %52 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %whilem_seen31 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %52, i32 0, i32 6
  %53 = load i32, i32* %whilem_seen31, align 4
  %cmp32 = icmp sgt i32 %53, 15
  br i1 %cmp32, label %if.then.34, label %if.end.36

if.then.34:                                       ; preds = %if.end.30
  %54 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %whilem_seen35 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %54, i32 0, i32 6
  store i32 15, i32* %whilem_seen35, align 4
  br label %if.end.36

if.end.36:                                        ; preds = %if.then.34, %if.end.30
  %55 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %size37 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %55, i32 0, i32 12
  %56 = load i32, i32* %size37, align 4
  %conv38 = zext i32 %56 to i64
  %mul = mul i64 %conv38, 4
  %add39 = add i64 104, %mul
  %mul40 = mul i64 %add39, 1
  %call41 = call i8* @Perl_safesysmalloc(i64 %mul40)
  %57 = bitcast i8* %call41 to %struct.regexp*
  store %struct.regexp* %57, %struct.regexp** %r, align 8
  %58 = load %struct.regexp*, %struct.regexp** %r, align 8
  %cmp42 = icmp eq %struct.regexp* %58, null
  br i1 %cmp42, label %if.then.44, label %if.end.64

if.then.44:                                       ; preds = %if.end.36
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8** %ellipses45, align 8
  %59 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %end47 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %59, i32 0, i32 4
  %60 = load i8*, i8** %end47, align 8
  %61 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %precomp48 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %61, i32 0, i32 1
  %62 = load i8*, i8** %precomp48, align 8
  %sub.ptr.lhs.cast49 = ptrtoint i8* %60 to i64
  %sub.ptr.rhs.cast50 = ptrtoint i8* %62 to i64
  %sub.ptr.sub51 = sub i64 %sub.ptr.lhs.cast49, %sub.ptr.rhs.cast50
  store i64 %sub.ptr.sub51, i64* %len46, align 8
  %63 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %emit52 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %63, i32 0, i32 8
  %64 = load %struct.regnode*, %struct.regnode** %emit52, align 8
  %cmp53 = icmp eq %struct.regnode* %64, @PL_regdummy
  br i1 %cmp53, label %if.end.57, label %if.then.55

if.then.55:                                       ; preds = %if.then.44
  %65 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %rx56 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %65, i32 0, i32 2
  %66 = load %struct.regexp*, %struct.regexp** %rx56, align 8
  %67 = bitcast %struct.regexp* %66 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %67)
  br label %if.end.57

if.end.57:                                        ; preds = %if.then.55, %if.then.44
  %68 = load i64, i64* %len46, align 8
  %cmp58 = icmp sgt i64 %68, 127
  br i1 %cmp58, label %if.then.60, label %if.end.61

if.then.60:                                       ; preds = %if.end.57
  store i64 117, i64* %len46, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8** %ellipses45, align 8
  br label %if.end.61

if.end.61:                                        ; preds = %if.then.60, %if.end.57
  %69 = load i64, i64* %len46, align 8
  %conv62 = trunc i64 %69 to i32
  %70 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %precomp63 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %70, i32 0, i32 1
  %71 = load i8*, i8** %precomp63, align 8
  %72 = load i8*, i8** %ellipses45, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i32 0, i32 0), i32 %conv62, i8* %71, i8* %72)
  br label %if.end.64

if.end.64:                                        ; preds = %if.end.61, %if.end.36
  %73 = load %struct.regexp*, %struct.regexp** %r, align 8
  %refcnt = getelementptr inbounds %struct.regexp, %struct.regexp* %73, i32 0, i32 9
  store i32 1, i32* %refcnt, align 4
  %74 = load i8*, i8** %xend.addr, align 8
  %75 = load i8*, i8** %exp.addr, align 8
  %sub.ptr.lhs.cast65 = ptrtoint i8* %74 to i64
  %sub.ptr.rhs.cast66 = ptrtoint i8* %75 to i64
  %sub.ptr.sub67 = sub i64 %sub.ptr.lhs.cast65, %sub.ptr.rhs.cast66
  %conv68 = trunc i64 %sub.ptr.sub67 to i32
  %76 = load %struct.regexp*, %struct.regexp** %r, align 8
  %prelen = getelementptr inbounds %struct.regexp, %struct.regexp* %76, i32 0, i32 11
  store i32 %conv68, i32* %prelen, align 4
  %77 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %precomp69 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %77, i32 0, i32 1
  %78 = load i8*, i8** %precomp69, align 8
  %79 = load %struct.regexp*, %struct.regexp** %r, align 8
  %prelen70 = getelementptr inbounds %struct.regexp, %struct.regexp* %79, i32 0, i32 11
  %80 = load i32, i32* %prelen70, align 4
  %call71 = call i8* @Perl_savepvn(i8* %78, i32 %80)
  %81 = load %struct.regexp*, %struct.regexp** %r, align 8
  %precomp72 = getelementptr inbounds %struct.regexp, %struct.regexp* %81, i32 0, i32 4
  store i8* %call71, i8** %precomp72, align 8
  %82 = load %struct.regexp*, %struct.regexp** %r, align 8
  %subbeg = getelementptr inbounds %struct.regexp, %struct.regexp* %82, i32 0, i32 6
  store i8* null, i8** %subbeg, align 8
  %83 = load %struct.pmop*, %struct.pmop** %pm.addr, align 8
  %op_pmflags73 = getelementptr inbounds %struct.pmop, %struct.pmop* %83, i32 0, i32 14
  %84 = load i32, i32* %op_pmflags73, align 4
  %and74 = and i32 %84, 63488
  %85 = load %struct.regexp*, %struct.regexp** %r, align 8
  %reganch = getelementptr inbounds %struct.regexp, %struct.regexp* %85, i32 0, i32 15
  store i32 %and74, i32* %reganch, align 4
  %86 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %npar75 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %86, i32 0, i32 13
  %87 = load i32, i32* %npar75, align 4
  %sub = sub nsw i32 %87, 1
  %88 = load %struct.regexp*, %struct.regexp** %r, align 8
  %nparens = getelementptr inbounds %struct.regexp, %struct.regexp* %88, i32 0, i32 12
  store i32 %sub, i32* %nparens, align 4
  %89 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs = getelementptr inbounds %struct.regexp, %struct.regexp* %89, i32 0, i32 3
  store %struct.reg_substr_data* null, %struct.reg_substr_data** %substrs, align 8
  %90 = load %struct.regexp*, %struct.regexp** %r, align 8
  %startp = getelementptr inbounds %struct.regexp, %struct.regexp* %90, i32 0, i32 0
  store i32* null, i32** %startp, align 8
  %91 = load %struct.regexp*, %struct.regexp** %r, align 8
  %endp = getelementptr inbounds %struct.regexp, %struct.regexp* %91, i32 0, i32 1
  store i32* null, i32** %endp, align 8
  %92 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %size76 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %92, i32 0, i32 12
  %93 = load i32, i32* %size76, align 4
  %mul77 = mul nsw i32 2, %93
  %add78 = add nsw i32 %mul77, 1
  %conv79 = sext i32 %add78 to i64
  %mul80 = mul i64 %conv79, 4
  %call81 = call i8* @Perl_safesysmalloc(i64 %mul80)
  %94 = bitcast i8* %call81 to i32*
  %95 = load %struct.regexp*, %struct.regexp** %r, align 8
  %offsets = getelementptr inbounds %struct.regexp, %struct.regexp* %95, i32 0, i32 7
  store i32* %94, i32** %offsets, align 8
  %96 = load %struct.regexp*, %struct.regexp** %r, align 8
  %offsets82 = getelementptr inbounds %struct.regexp, %struct.regexp* %96, i32 0, i32 7
  %97 = load i32*, i32** %offsets82, align 8
  %98 = bitcast i32* %97 to i8*
  %99 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %size83 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %99, i32 0, i32 12
  %100 = load i32, i32* %size83, align 4
  %mul84 = mul nsw i32 2, %100
  %add85 = add nsw i32 %mul84, 1
  %conv86 = sext i32 %add85 to i64
  %mul87 = mul i64 %conv86, 4
  call void @llvm.memset.p0i8.i64(i8* %98, i8 0, i64 %mul87, i32 1, i1 false)
  %101 = load %struct.regexp*, %struct.regexp** %r, align 8
  %offsets88 = getelementptr inbounds %struct.regexp, %struct.regexp* %101, i32 0, i32 7
  %102 = load i32*, i32** %offsets88, align 8
  %tobool89 = icmp ne i32* %102, null
  br i1 %tobool89, label %if.then.90, label %if.end.93

if.then.90:                                       ; preds = %if.end.64
  %103 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %size91 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %103, i32 0, i32 12
  %104 = load i32, i32* %size91, align 4
  %105 = load %struct.regexp*, %struct.regexp** %r, align 8
  %offsets92 = getelementptr inbounds %struct.regexp, %struct.regexp* %105, i32 0, i32 7
  %106 = load i32*, i32** %offsets92, align 8
  %arrayidx = getelementptr inbounds i32, i32* %106, i64 0
  store i32 %104, i32* %arrayidx, align 4
  br label %if.end.93

if.end.93:                                        ; preds = %if.then.90, %if.end.64
  %107 = load %struct.regexp*, %struct.regexp** %r, align 8
  %108 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %rx94 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %108, i32 0, i32 2
  store %struct.regexp* %107, %struct.regexp** %rx94, align 8
  %109 = load %struct.pmop*, %struct.pmop** %pm.addr, align 8
  %op_pmflags95 = getelementptr inbounds %struct.pmop, %struct.pmop* %109, i32 0, i32 14
  %110 = load i32, i32* %op_pmflags95, align 4
  %111 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %flags96 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %111, i32 0, i32 0
  store i32 %110, i32* %flags96, align 4
  %112 = load i8*, i8** %exp.addr, align 8
  %113 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %parse97 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %113, i32 0, i32 5
  store i8* %112, i8** %parse97, align 8
  %114 = load i8*, i8** %xend.addr, align 8
  %115 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %end98 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %115, i32 0, i32 4
  store i8* %114, i8** %end98, align 8
  %116 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %naughty99 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %116, i32 0, i32 9
  store i32 0, i32* %naughty99, align 4
  %117 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %npar100 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %117, i32 0, i32 13
  store i32 1, i32* %npar100, align 4
  %118 = load %struct.regexp*, %struct.regexp** %r, align 8
  %program = getelementptr inbounds %struct.regexp, %struct.regexp* %118, i32 0, i32 16
  %arraydecay = getelementptr inbounds [1 x %struct.regnode], [1 x %struct.regnode]* %program, i32 0, i32 0
  %119 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %emit_start = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %119, i32 0, i32 7
  store %struct.regnode* %arraydecay, %struct.regnode** %emit_start, align 8
  %120 = load %struct.regexp*, %struct.regexp** %r, align 8
  %program101 = getelementptr inbounds %struct.regexp, %struct.regexp* %120, i32 0, i32 16
  %arraydecay102 = getelementptr inbounds [1 x %struct.regnode], [1 x %struct.regnode]* %program101, i32 0, i32 0
  %121 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %emit103 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %121, i32 0, i32 8
  store %struct.regnode* %arraydecay102, %struct.regnode** %emit103, align 8
  %122 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %seen_evals104 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %122, i32 0, i32 16
  %123 = load i32, i32* %seen_evals104, align 4
  %cmp105 = icmp sgt i32 %123, 65535
  br i1 %cmp105, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.93
  br label %cond.end

cond.false:                                       ; preds = %if.end.93
  %124 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %seen_evals107 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %124, i32 0, i32 16
  %125 = load i32, i32* %seen_evals107, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond108 = phi i32 [ 65535, %cond.true ], [ %125, %cond.false ]
  %conv109 = trunc i32 %cond108 to i16
  %126 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %emit110 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %126, i32 0, i32 8
  %127 = load %struct.regnode*, %struct.regnode** %emit110, align 8
  %next_off = getelementptr inbounds %struct.regnode, %struct.regnode* %127, i32 0, i32 2
  store i16 %conv109, i16* %next_off, align 2
  %128 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %emit111 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %128, i32 0, i32 8
  %129 = load %struct.regnode*, %struct.regnode** %emit111, align 8
  %cmp112 = icmp eq %struct.regnode* %129, @PL_regdummy
  br i1 %cmp112, label %if.else.116, label %if.then.114

if.then.114:                                      ; preds = %cond.end
  %130 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %emit115 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %130, i32 0, i32 8
  %131 = load %struct.regnode*, %struct.regnode** %emit115, align 8
  %incdec.ptr = getelementptr inbounds %struct.regnode, %struct.regnode* %131, i32 1
  store %struct.regnode* %incdec.ptr, %struct.regnode** %emit115, align 8
  %132 = bitcast %struct.regnode* %131 to i8*
  store i8 -100, i8* %132, align 1
  br label %if.end.119

if.else.116:                                      ; preds = %cond.end
  %133 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %emit117 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %133, i32 0, i32 8
  %134 = load %struct.regnode*, %struct.regnode** %emit117, align 8
  %incdec.ptr118 = getelementptr inbounds %struct.regnode, %struct.regnode* %134, i32 1
  store %struct.regnode* %incdec.ptr118, %struct.regnode** %emit117, align 8
  %135 = bitcast %struct.regnode* %134 to i8*
  br label %if.end.119

if.end.119:                                       ; preds = %if.else.116, %if.then.114
  %136 = load %struct.regexp*, %struct.regexp** %r, align 8
  %data120 = getelementptr inbounds %struct.regexp, %struct.regexp* %136, i32 0, i32 5
  store %struct.reg_data* null, %struct.reg_data** %data120, align 8
  %137 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %call121 = call %struct.regnode* @S_reg(%struct.RExC_state_t* %137, i32 0, i32* %flags)
  %cmp122 = icmp eq %struct.regnode* %call121, null
  br i1 %cmp122, label %if.then.124, label %if.end.125

if.then.124:                                      ; preds = %if.end.119
  store %struct.regexp* null, %struct.regexp** %retval
  br label %return

if.end.125:                                       ; preds = %if.end.119
  %138 = load %struct.pmop*, %struct.pmop** %pm.addr, align 8
  %op_pmflags126 = getelementptr inbounds %struct.pmop, %struct.pmop* %138, i32 0, i32 14
  %139 = load i32, i32* %op_pmflags126, align 4
  %and127 = and i32 %139, 63488
  %140 = load %struct.regexp*, %struct.regexp** %r, align 8
  %reganch128 = getelementptr inbounds %struct.regexp, %struct.regexp* %140, i32 0, i32 15
  store i32 %and127, i32* %reganch128, align 4
  %141 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %flags129 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %141, i32 0, i32 0
  %142 = load i32, i32* %flags129, align 4
  %143 = load %struct.pmop*, %struct.pmop** %pm.addr, align 8
  %op_pmflags130 = getelementptr inbounds %struct.pmop, %struct.pmop* %143, i32 0, i32 14
  store i32 %142, i32* %op_pmflags130, align 4
  %144 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %utf8131 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %144, i32 0, i32 17
  %145 = load i32, i32* %utf8131, align 4
  %cmp132 = icmp ne i32 %145, 0
  br i1 %cmp132, label %if.then.134, label %if.end.136

if.then.134:                                      ; preds = %if.end.125
  %146 = load %struct.regexp*, %struct.regexp** %r, align 8
  %reganch135 = getelementptr inbounds %struct.regexp, %struct.regexp* %146, i32 0, i32 15
  %147 = load i32, i32* %reganch135, align 4
  %or = or i32 %147, 65536
  store i32 %or, i32* %reganch135, align 4
  br label %if.end.136

if.end.136:                                       ; preds = %if.then.134, %if.end.125
  %148 = load %struct.regexp*, %struct.regexp** %r, align 8
  %regstclass = getelementptr inbounds %struct.regexp, %struct.regexp* %148, i32 0, i32 2
  store %struct.regnode* null, %struct.regnode** %regstclass, align 8
  %149 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %naughty137 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %149, i32 0, i32 9
  %150 = load i32, i32* %naughty137, align 4
  %cmp138 = icmp sge i32 %150, 10
  br i1 %cmp138, label %if.then.140, label %if.end.143

if.then.140:                                      ; preds = %if.end.136
  %151 = load %struct.regexp*, %struct.regexp** %r, align 8
  %reganch141 = getelementptr inbounds %struct.regexp, %struct.regexp* %151, i32 0, i32 15
  %152 = load i32, i32* %reganch141, align 4
  %or142 = or i32 %152, 131072
  store i32 %or142, i32* %reganch141, align 4
  br label %if.end.143

if.end.143:                                       ; preds = %if.then.140, %if.end.136
  %153 = load %struct.regexp*, %struct.regexp** %r, align 8
  %program144 = getelementptr inbounds %struct.regexp, %struct.regexp* %153, i32 0, i32 16
  %arraydecay145 = getelementptr inbounds [1 x %struct.regnode], [1 x %struct.regnode]* %program144, i32 0, i32 0
  %add.ptr = getelementptr inbounds %struct.regnode, %struct.regnode* %arraydecay145, i64 1
  store %struct.regnode* %add.ptr, %struct.regnode** %scan, align 8
  %call146 = call i8* @Perl_safesysmalloc(i64 72)
  %154 = bitcast i8* %call146 to %struct.reg_substr_data*
  %155 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs147 = getelementptr inbounds %struct.regexp, %struct.regexp* %155, i32 0, i32 3
  store %struct.reg_substr_data* %154, %struct.reg_substr_data** %substrs147, align 8
  %156 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs148 = getelementptr inbounds %struct.regexp, %struct.regexp* %156, i32 0, i32 3
  %157 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs148, align 8
  %158 = bitcast %struct.reg_substr_data* %157 to i8*
  call void @llvm.memset.p0i8.i64(i8* %158, i8 0, i64 72, i32 1, i1 false)
  %159 = bitcast %struct.scan_data_t* %data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %159, i8* bitcast (%struct.scan_data_t* @zero_scan_data to i8*), i64 104, i32 8, i1 false)
  %160 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type = getelementptr inbounds %struct.regnode, %struct.regnode* %160, i32 0, i32 1
  %161 = load i8, i8* %type, align 1
  %conv149 = zext i8 %161 to i32
  %cmp150 = icmp ne i32 %conv149, 31
  br i1 %cmp150, label %if.then.152, label %if.else.740

if.then.152:                                      ; preds = %if.end.143
  store i32 0, i32* %last_close, align 4
  %162 = load %struct.regnode*, %struct.regnode** %scan, align 8
  store %struct.regnode* %162, %struct.regnode** %first, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.197, %if.then.152
  %163 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type153 = getelementptr inbounds %struct.regnode, %struct.regnode* %163, i32 0, i32 1
  %164 = load i8, i8* %type153, align 1
  %conv154 = zext i8 %164 to i32
  %cmp155 = icmp eq i32 %conv154, 45
  br i1 %cmp155, label %land.lhs.true.157, label %lor.lhs.false

land.lhs.true.157:                                ; preds = %while.cond
  store i32 1, i32* %sawopen, align 4
  br i1 true, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.157, %while.cond
  %165 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type158 = getelementptr inbounds %struct.regnode, %struct.regnode* %165, i32 0, i32 1
  %166 = load i8, i8* %type158, align 1
  %conv159 = zext i8 %166 to i32
  %cmp160 = icmp eq i32 %conv159, 31
  br i1 %cmp160, label %land.lhs.true.162, label %lor.lhs.false.168

land.lhs.true.162:                                ; preds = %lor.lhs.false
  %167 = load %struct.regnode*, %struct.regnode** %first, align 8
  %call163 = call %struct.regnode* @Perl_regnext(%struct.regnode* %167)
  %type164 = getelementptr inbounds %struct.regnode, %struct.regnode* %call163, i32 0, i32 1
  %168 = load i8, i8* %type164, align 1
  %conv165 = zext i8 %168 to i32
  %cmp166 = icmp ne i32 %conv165, 31
  br i1 %cmp166, label %lor.end, label %lor.lhs.false.168

lor.lhs.false.168:                                ; preds = %land.lhs.true.162, %lor.lhs.false
  %169 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type169 = getelementptr inbounds %struct.regnode, %struct.regnode* %169, i32 0, i32 1
  %170 = load i8, i8* %type169, align 1
  %conv170 = zext i8 %170 to i32
  %cmp171 = icmp eq i32 %conv170, 39
  br i1 %cmp171, label %lor.end, label %lor.lhs.false.173

lor.lhs.false.173:                                ; preds = %lor.lhs.false.168
  %171 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type174 = getelementptr inbounds %struct.regnode, %struct.regnode* %171, i32 0, i32 1
  %172 = load i8, i8* %type174, align 1
  %conv175 = zext i8 %172 to i32
  %cmp176 = icmp eq i32 %conv175, 58
  br i1 %cmp176, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false.173
  %173 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type178 = getelementptr inbounds %struct.regnode, %struct.regnode* %173, i32 0, i32 1
  %174 = load i8, i8* %type178, align 1
  %idxprom = zext i8 %174 to i64
  %arrayidx179 = getelementptr inbounds [62 x i8], [62 x i8]* @PL_regkind, i32 0, i64 %idxprom
  %175 = load i8, i8* %arrayidx179, align 1
  %conv180 = zext i8 %175 to i32
  %cmp181 = icmp eq i32 %conv180, 40
  br i1 %cmp181, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %176 = load %struct.regnode*, %struct.regnode** %first, align 8
  %177 = bitcast %struct.regnode* %176 to %struct.regnode_2*
  %arg1 = getelementptr inbounds %struct.regnode_2, %struct.regnode_2* %177, i32 0, i32 3
  %178 = load i16, i16* %arg1, align 2
  %conv183 = zext i16 %178 to i32
  %cmp184 = icmp sgt i32 %conv183, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %179 = phi i1 [ false, %lor.rhs ], [ %cmp184, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %lor.lhs.false.173, %lor.lhs.false.168, %land.lhs.true.162, %land.lhs.true.157
  %180 = phi i1 [ true, %lor.lhs.false.173 ], [ true, %lor.lhs.false.168 ], [ true, %land.lhs.true.162 ], [ true, %land.lhs.true.157 ], [ %179, %land.end ]
  br i1 %180, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end
  %181 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type186 = getelementptr inbounds %struct.regnode, %struct.regnode* %181, i32 0, i32 1
  %182 = load i8, i8* %type186, align 1
  %conv187 = zext i8 %182 to i32
  %cmp188 = icmp eq i32 %conv187, 39
  br i1 %cmp188, label %if.then.190, label %if.else.191

if.then.190:                                      ; preds = %while.body
  store i32 1, i32* %sawplus, align 4
  br label %if.end.197

if.else.191:                                      ; preds = %while.body
  %183 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type192 = getelementptr inbounds %struct.regnode, %struct.regnode* %183, i32 0, i32 1
  %184 = load i8, i8* %type192, align 1
  %idxprom193 = zext i8 %184 to i64
  %arrayidx194 = getelementptr inbounds [62 x i8], [62 x i8]* @regarglen, i32 0, i64 %idxprom193
  %185 = load i8, i8* %arrayidx194, align 1
  %conv195 = zext i8 %185 to i32
  %186 = load %struct.regnode*, %struct.regnode** %first, align 8
  %idx.ext = sext i32 %conv195 to i64
  %add.ptr196 = getelementptr inbounds %struct.regnode, %struct.regnode* %186, i64 %idx.ext
  store %struct.regnode* %add.ptr196, %struct.regnode** %first, align 8
  br label %if.end.197

if.end.197:                                       ; preds = %if.else.191, %if.then.190
  %187 = load %struct.regnode*, %struct.regnode** %first, align 8
  %add.ptr198 = getelementptr inbounds %struct.regnode, %struct.regnode* %187, i64 1
  store %struct.regnode* %add.ptr198, %struct.regnode** %first, align 8
  br label %while.cond

while.end:                                        ; preds = %lor.end
  br label %again

again:                                            ; preds = %if.end.309, %if.then.277, %cond.end.267, %while.end
  %188 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type199 = getelementptr inbounds %struct.regnode, %struct.regnode* %188, i32 0, i32 1
  %189 = load i8, i8* %type199, align 1
  %idxprom200 = zext i8 %189 to i64
  %arrayidx201 = getelementptr inbounds [62 x i8], [62 x i8]* @PL_regkind, i32 0, i64 %idxprom200
  %190 = load i8, i8* %arrayidx201, align 1
  %conv202 = zext i8 %190 to i32
  %cmp203 = icmp eq i32 %conv202, 33
  br i1 %cmp203, label %if.then.205, label %if.else.225

if.then.205:                                      ; preds = %again
  %191 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type206 = getelementptr inbounds %struct.regnode, %struct.regnode* %191, i32 0, i32 1
  %192 = load i8, i8* %type206, align 1
  %conv207 = zext i8 %192 to i32
  %cmp208 = icmp eq i32 %conv207, 33
  br i1 %cmp208, label %if.then.210, label %if.else.211

if.then.210:                                      ; preds = %if.then.205
  br label %if.end.224

if.else.211:                                      ; preds = %if.then.205
  %193 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type212 = getelementptr inbounds %struct.regnode, %struct.regnode* %193, i32 0, i32 1
  %194 = load i8, i8* %type212, align 1
  %conv213 = zext i8 %194 to i32
  %cmp214 = icmp eq i32 %conv213, 34
  br i1 %cmp214, label %if.then.221, label %lor.lhs.false.216

lor.lhs.false.216:                                ; preds = %if.else.211
  %195 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type217 = getelementptr inbounds %struct.regnode, %struct.regnode* %195, i32 0, i32 1
  %196 = load i8, i8* %type217, align 1
  %conv218 = zext i8 %196 to i32
  %cmp219 = icmp eq i32 %conv218, 35
  br i1 %cmp219, label %if.then.221, label %if.end.223

if.then.221:                                      ; preds = %lor.lhs.false.216, %if.else.211
  %197 = load %struct.regnode*, %struct.regnode** %first, align 8
  %198 = load %struct.regexp*, %struct.regexp** %r, align 8
  %regstclass222 = getelementptr inbounds %struct.regexp, %struct.regexp* %198, i32 0, i32 2
  store %struct.regnode* %197, %struct.regnode** %regstclass222, align 8
  br label %if.end.223

if.end.223:                                       ; preds = %if.then.221, %lor.lhs.false.216
  br label %if.end.224

if.end.224:                                       ; preds = %if.end.223, %if.then.210
  br label %if.end.319

if.else.225:                                      ; preds = %again
  %199 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type226 = getelementptr inbounds %struct.regnode, %struct.regnode* %199, i32 0, i32 1
  %200 = load i8, i8* %type226, align 1
  %conv227 = zext i8 %200 to i32
  %call228 = call i8* @strchr(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @PL_simple, i32 0, i32 0), i32 %conv227)
  %tobool229 = icmp ne i8* %call228, null
  br i1 %tobool229, label %if.then.230, label %if.else.232

if.then.230:                                      ; preds = %if.else.225
  %201 = load %struct.regnode*, %struct.regnode** %first, align 8
  %202 = load %struct.regexp*, %struct.regexp** %r, align 8
  %regstclass231 = getelementptr inbounds %struct.regexp, %struct.regexp* %202, i32 0, i32 2
  store %struct.regnode* %201, %struct.regnode** %regstclass231, align 8
  br label %if.end.318

if.else.232:                                      ; preds = %if.else.225
  %203 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type233 = getelementptr inbounds %struct.regnode, %struct.regnode* %203, i32 0, i32 1
  %204 = load i8, i8* %type233, align 1
  %idxprom234 = zext i8 %204 to i64
  %arrayidx235 = getelementptr inbounds [62 x i8], [62 x i8]* @PL_regkind, i32 0, i64 %idxprom234
  %205 = load i8, i8* %arrayidx235, align 1
  %conv236 = zext i8 %205 to i32
  %cmp237 = icmp eq i32 %conv236, 9
  br i1 %cmp237, label %if.then.246, label %lor.lhs.false.239

lor.lhs.false.239:                                ; preds = %if.else.232
  %206 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type240 = getelementptr inbounds %struct.regnode, %struct.regnode* %206, i32 0, i32 1
  %207 = load i8, i8* %type240, align 1
  %idxprom241 = zext i8 %207 to i64
  %arrayidx242 = getelementptr inbounds [62 x i8], [62 x i8]* @PL_regkind, i32 0, i64 %idxprom241
  %208 = load i8, i8* %arrayidx242, align 1
  %conv243 = zext i8 %208 to i32
  %cmp244 = icmp eq i32 %conv243, 11
  br i1 %cmp244, label %if.then.246, label %if.else.248

if.then.246:                                      ; preds = %lor.lhs.false.239, %if.else.232
  %209 = load %struct.regnode*, %struct.regnode** %first, align 8
  %210 = load %struct.regexp*, %struct.regexp** %r, align 8
  %regstclass247 = getelementptr inbounds %struct.regexp, %struct.regexp* %210, i32 0, i32 2
  store %struct.regnode* %209, %struct.regnode** %regstclass247, align 8
  br label %if.end.317

if.else.248:                                      ; preds = %lor.lhs.false.239
  %211 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type249 = getelementptr inbounds %struct.regnode, %struct.regnode* %211, i32 0, i32 1
  %212 = load i8, i8* %type249, align 1
  %idxprom250 = zext i8 %212 to i64
  %arrayidx251 = getelementptr inbounds [62 x i8], [62 x i8]* @PL_regkind, i32 0, i64 %idxprom250
  %213 = load i8, i8* %arrayidx251, align 1
  %conv252 = zext i8 %213 to i32
  %cmp253 = icmp eq i32 %conv252, 2
  br i1 %cmp253, label %if.then.255, label %if.else.272

if.then.255:                                      ; preds = %if.else.248
  %214 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type256 = getelementptr inbounds %struct.regnode, %struct.regnode* %214, i32 0, i32 1
  %215 = load i8, i8* %type256, align 1
  %conv257 = zext i8 %215 to i32
  %cmp258 = icmp eq i32 %conv257, 3
  br i1 %cmp258, label %cond.true.260, label %cond.false.261

cond.true.260:                                    ; preds = %if.then.255
  br label %cond.end.267

cond.false.261:                                   ; preds = %if.then.255
  %216 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type262 = getelementptr inbounds %struct.regnode, %struct.regnode* %216, i32 0, i32 1
  %217 = load i8, i8* %type262, align 1
  %conv263 = zext i8 %217 to i32
  %cmp264 = icmp eq i32 %conv263, 4
  %cond266 = select i1 %cmp264, i32 4, i32 1
  br label %cond.end.267

cond.end.267:                                     ; preds = %cond.false.261, %cond.true.260
  %cond268 = phi i32 [ 2, %cond.true.260 ], [ %cond266, %cond.false.261 ]
  %218 = load %struct.regexp*, %struct.regexp** %r, align 8
  %reganch269 = getelementptr inbounds %struct.regexp, %struct.regexp* %218, i32 0, i32 15
  %219 = load i32, i32* %reganch269, align 4
  %or270 = or i32 %219, %cond268
  store i32 %or270, i32* %reganch269, align 4
  %220 = load %struct.regnode*, %struct.regnode** %first, align 8
  %add.ptr271 = getelementptr inbounds %struct.regnode, %struct.regnode* %220, i64 1
  store %struct.regnode* %add.ptr271, %struct.regnode** %first, align 8
  br label %again

if.else.272:                                      ; preds = %if.else.248
  %221 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type273 = getelementptr inbounds %struct.regnode, %struct.regnode* %221, i32 0, i32 1
  %222 = load i8, i8* %type273, align 1
  %conv274 = zext i8 %222 to i32
  %cmp275 = icmp eq i32 %conv274, 13
  br i1 %cmp275, label %if.then.277, label %if.else.281

if.then.277:                                      ; preds = %if.else.272
  %223 = load %struct.regexp*, %struct.regexp** %r, align 8
  %reganch278 = getelementptr inbounds %struct.regexp, %struct.regexp* %223, i32 0, i32 15
  %224 = load i32, i32* %reganch278, align 4
  %or279 = or i32 %224, 8
  store i32 %or279, i32* %reganch278, align 4
  %225 = load %struct.regnode*, %struct.regnode** %first, align 8
  %add.ptr280 = getelementptr inbounds %struct.regnode, %struct.regnode* %225, i64 1
  store %struct.regnode* %add.ptr280, %struct.regnode** %first, align 8
  br label %again

if.else.281:                                      ; preds = %if.else.272
  %226 = load i32, i32* %sawopen, align 4
  %tobool282 = icmp ne i32 %226, 0
  br i1 %tobool282, label %if.end.314, label %land.lhs.true.283

land.lhs.true.283:                                ; preds = %if.else.281
  %227 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type284 = getelementptr inbounds %struct.regnode, %struct.regnode* %227, i32 0, i32 1
  %228 = load i8, i8* %type284, align 1
  %conv285 = zext i8 %228 to i32
  %cmp286 = icmp eq i32 %conv285, 38
  br i1 %cmp286, label %land.lhs.true.288, label %if.end.314

land.lhs.true.288:                                ; preds = %land.lhs.true.283
  %229 = load %struct.regnode*, %struct.regnode** %first, align 8
  %add.ptr289 = getelementptr inbounds %struct.regnode, %struct.regnode* %229, i64 1
  %type290 = getelementptr inbounds %struct.regnode, %struct.regnode* %add.ptr289, i32 0, i32 1
  %230 = load i8, i8* %type290, align 1
  %idxprom291 = zext i8 %230 to i64
  %arrayidx292 = getelementptr inbounds [62 x i8], [62 x i8]* @PL_regkind, i32 0, i64 %idxprom291
  %231 = load i8, i8* %arrayidx292, align 1
  %conv293 = zext i8 %231 to i32
  %cmp294 = icmp eq i32 %conv293, 14
  br i1 %cmp294, label %land.lhs.true.296, label %if.end.314

land.lhs.true.296:                                ; preds = %land.lhs.true.288
  %232 = load %struct.regexp*, %struct.regexp** %r, align 8
  %reganch297 = getelementptr inbounds %struct.regexp, %struct.regexp* %232, i32 0, i32 15
  %233 = load i32, i32* %reganch297, align 4
  %and298 = and i32 %233, 15
  %tobool299 = icmp ne i32 %and298, 0
  br i1 %tobool299, label %if.end.314, label %if.then.300

if.then.300:                                      ; preds = %land.lhs.true.296
  %234 = load %struct.regnode*, %struct.regnode** %first, align 8
  %add.ptr302 = getelementptr inbounds %struct.regnode, %struct.regnode* %234, i64 1
  %type303 = getelementptr inbounds %struct.regnode, %struct.regnode* %add.ptr302, i32 0, i32 1
  %235 = load i8, i8* %type303, align 1
  %conv304 = zext i8 %235 to i32
  store i32 %conv304, i32* %type301, align 4
  %236 = load i32, i32* %type301, align 4
  %cmp305 = icmp eq i32 %236, 14
  br i1 %cmp305, label %if.then.307, label %if.else.308

if.then.307:                                      ; preds = %if.then.300
  store i32 2, i32* %type301, align 4
  br label %if.end.309

if.else.308:                                      ; preds = %if.then.300
  store i32 4, i32* %type301, align 4
  br label %if.end.309

if.end.309:                                       ; preds = %if.else.308, %if.then.307
  %237 = load i32, i32* %type301, align 4
  %or310 = or i32 %237, 32
  %238 = load %struct.regexp*, %struct.regexp** %r, align 8
  %reganch311 = getelementptr inbounds %struct.regexp, %struct.regexp* %238, i32 0, i32 15
  %239 = load i32, i32* %reganch311, align 4
  %or312 = or i32 %239, %or310
  store i32 %or312, i32* %reganch311, align 4
  %240 = load %struct.regnode*, %struct.regnode** %first, align 8
  %add.ptr313 = getelementptr inbounds %struct.regnode, %struct.regnode* %240, i64 1
  store %struct.regnode* %add.ptr313, %struct.regnode** %first, align 8
  br label %again

if.end.314:                                       ; preds = %land.lhs.true.296, %land.lhs.true.288, %land.lhs.true.283, %if.else.281
  br label %if.end.315

if.end.315:                                       ; preds = %if.end.314
  br label %if.end.316

if.end.316:                                       ; preds = %if.end.315
  br label %if.end.317

if.end.317:                                       ; preds = %if.end.316, %if.then.246
  br label %if.end.318

if.end.318:                                       ; preds = %if.end.317, %if.then.230
  br label %if.end.319

if.end.319:                                       ; preds = %if.end.318, %if.end.224
  %241 = load i32, i32* %sawplus, align 4
  %tobool320 = icmp ne i32 %241, 0
  br i1 %tobool320, label %land.lhs.true.321, label %if.end.333

land.lhs.true.321:                                ; preds = %if.end.319
  %242 = load i32, i32* %sawopen, align 4
  %tobool322 = icmp ne i32 %242, 0
  br i1 %tobool322, label %lor.lhs.false.323, label %land.lhs.true.326

lor.lhs.false.323:                                ; preds = %land.lhs.true.321
  %243 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %sawback324 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %243, i32 0, i32 10
  %244 = load i32, i32* %sawback324, align 4
  %tobool325 = icmp ne i32 %244, 0
  br i1 %tobool325, label %if.end.333, label %land.lhs.true.326

land.lhs.true.326:                                ; preds = %lor.lhs.false.323, %land.lhs.true.321
  %245 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %seen327 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %245, i32 0, i32 11
  %246 = load i32, i32* %seen327, align 4
  %and328 = and i32 %246, 8
  %tobool329 = icmp ne i32 %and328, 0
  br i1 %tobool329, label %if.end.333, label %if.then.330

if.then.330:                                      ; preds = %land.lhs.true.326
  %247 = load %struct.regexp*, %struct.regexp** %r, align 8
  %reganch331 = getelementptr inbounds %struct.regexp, %struct.regexp* %247, i32 0, i32 15
  %248 = load i32, i32* %reganch331, align 4
  %or332 = or i32 %248, 16
  store i32 %or332, i32* %reganch331, align 4
  br label %if.end.333

if.end.333:                                       ; preds = %if.then.330, %land.lhs.true.326, %lor.lhs.false.323, %if.end.319
  store i32 0, i32* %minlen, align 4
  %call334 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i64 0)
  %longest_fixed = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 9
  store %struct.sv* %call334, %struct.sv** %longest_fixed, align 8
  %call335 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i64 0)
  %longest_float = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 11
  store %struct.sv* %call335, %struct.sv** %longest_float, align 8
  %call336 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i64 0)
  %last_found = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 4
  store %struct.sv* %call336, %struct.sv** %last_found, align 8
  %longest_fixed337 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 9
  %longest = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 8
  store %struct.sv** %longest_fixed337, %struct.sv*** %longest, align 8
  %249 = load %struct.regnode*, %struct.regnode** %scan, align 8
  store %struct.regnode* %249, %struct.regnode** %first, align 8
  %250 = load %struct.regexp*, %struct.regexp** %r, align 8
  %regstclass338 = getelementptr inbounds %struct.regexp, %struct.regexp* %250, i32 0, i32 2
  %251 = load %struct.regnode*, %struct.regnode** %regstclass338, align 8
  %tobool339 = icmp ne %struct.regnode* %251, null
  br i1 %tobool339, label %if.else.341, label %if.then.340

if.then.340:                                      ; preds = %if.end.333
  %252 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  call void @S_cl_init(%struct.RExC_state_t* %252, %struct.regnode_charclass_class* %ch_class)
  %start_class = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 17
  store %struct.regnode_charclass_class* %ch_class, %struct.regnode_charclass_class** %start_class, align 8
  store i32 2048, i32* %stclass_flag, align 4
  br label %if.end.342

if.else.341:                                      ; preds = %if.end.333
  store i32 0, i32* %stclass_flag, align 4
  br label %if.end.342

if.end.342:                                       ; preds = %if.else.341, %if.then.340
  %last_closep = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 16
  store i32* %last_close, i32** %last_closep, align 8
  %253 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %254 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %255 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %size343 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %255, i32 0, i32 12
  %256 = load i32, i32* %size343, align 4
  %idx.ext344 = sext i32 %256 to i64
  %add.ptr345 = getelementptr inbounds %struct.regnode, %struct.regnode* %254, i64 %idx.ext344
  %257 = load i32, i32* %stclass_flag, align 4
  %or346 = or i32 9216, %257
  %call347 = call i32 @S_study_chunk(%struct.RExC_state_t* %253, %struct.regnode** %first, i32* %fake, %struct.regnode* %add.ptr345, %struct.scan_data_t* %data, i32 %or346)
  store i32 %call347, i32* %minlen, align 4
  %258 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %npar348 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %258, i32 0, i32 13
  %259 = load i32, i32* %npar348, align 4
  %cmp349 = icmp eq i32 %259, 1
  br i1 %cmp349, label %land.lhs.true.351, label %if.end.376

land.lhs.true.351:                                ; preds = %if.end.342
  %longest352 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 8
  %260 = load %struct.sv**, %struct.sv*** %longest352, align 8
  %longest_fixed353 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 9
  %cmp354 = icmp eq %struct.sv** %260, %longest_fixed353
  br i1 %cmp354, label %land.lhs.true.356, label %if.end.376

land.lhs.true.356:                                ; preds = %land.lhs.true.351
  %last_start_min = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 6
  %261 = load i32, i32* %last_start_min, align 4
  %cmp357 = icmp eq i32 %261, 0
  br i1 %cmp357, label %land.lhs.true.359, label %if.end.376

land.lhs.true.359:                                ; preds = %land.lhs.true.356
  %last_end = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 5
  %262 = load i32, i32* %last_end, align 4
  %cmp360 = icmp sgt i32 %262, 0
  br i1 %cmp360, label %land.lhs.true.362, label %if.end.376

land.lhs.true.362:                                ; preds = %land.lhs.true.359
  %263 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %seen_zerolen363 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %263, i32 0, i32 15
  %264 = load i32, i32* %seen_zerolen363, align 4
  %tobool364 = icmp ne i32 %264, 0
  br i1 %tobool364, label %if.end.376, label %land.lhs.true.365

land.lhs.true.365:                                ; preds = %land.lhs.true.362
  %265 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %seen366 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %265, i32 0, i32 11
  %266 = load i32, i32* %seen366, align 4
  %and367 = and i32 %266, 4
  %tobool368 = icmp ne i32 %and367, 0
  br i1 %tobool368, label %lor.lhs.false.369, label %if.then.373

lor.lhs.false.369:                                ; preds = %land.lhs.true.365
  %267 = load %struct.regexp*, %struct.regexp** %r, align 8
  %reganch370 = getelementptr inbounds %struct.regexp, %struct.regexp* %267, i32 0, i32 15
  %268 = load i32, i32* %reganch370, align 4
  %and371 = and i32 %268, 8
  %tobool372 = icmp ne i32 %and371, 0
  br i1 %tobool372, label %if.then.373, label %if.end.376

if.then.373:                                      ; preds = %lor.lhs.false.369, %land.lhs.true.365
  %269 = load %struct.regexp*, %struct.regexp** %r, align 8
  %reganch374 = getelementptr inbounds %struct.regexp, %struct.regexp* %269, i32 0, i32 15
  %270 = load i32, i32* %reganch374, align 4
  %or375 = or i32 %270, 256
  store i32 %or375, i32* %reganch374, align 4
  br label %if.end.376

if.end.376:                                       ; preds = %if.then.373, %lor.lhs.false.369, %land.lhs.true.362, %land.lhs.true.359, %land.lhs.true.356, %land.lhs.true.351, %if.end.342
  %271 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  call void @S_scan_commit(%struct.RExC_state_t* %271, %struct.scan_data_t* %data)
  %last_found377 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 4
  %272 = load %struct.sv*, %struct.sv** %last_found377, align 8
  call void @Perl_sv_free(%struct.sv* %272)
  %273 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %utf8378 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %273, i32 0, i32 17
  %274 = load i32, i32* %utf8378, align 4
  %cmp379 = icmp ne i32 %274, 0
  br i1 %cmp379, label %cond.true.381, label %cond.false.384

cond.true.381:                                    ; preds = %if.end.376
  %longest_float382 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 11
  %275 = load %struct.sv*, %struct.sv** %longest_float382, align 8
  %call383 = call i64 @Perl_sv_len_utf8(%struct.sv* %275)
  br label %cond.end.386

cond.false.384:                                   ; preds = %if.end.376
  %longest_float385 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 11
  %276 = load %struct.sv*, %struct.sv** %longest_float385, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %276, i32 0, i32 0
  %277 = load i8*, i8** %sv_any, align 8
  %278 = bitcast i8* %277 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %278, i32 0, i32 1
  %279 = load i64, i64* %xpv_cur, align 8
  br label %cond.end.386

cond.end.386:                                     ; preds = %cond.false.384, %cond.true.381
  %cond387 = phi i64 [ %call383, %cond.true.381 ], [ %279, %cond.false.384 ]
  store i64 %cond387, i64* %longest_float_length, align 8
  %280 = load i64, i64* %longest_float_length, align 8
  %tobool388 = icmp ne i64 %280, 0
  br i1 %tobool388, label %if.then.401, label %lor.lhs.false.389

lor.lhs.false.389:                                ; preds = %cond.end.386
  %flags390 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 14
  %281 = load i32, i32* %flags390, align 4
  %and391 = and i32 %281, 48
  %tobool392 = icmp ne i32 %and391, 0
  br i1 %tobool392, label %land.lhs.true.393, label %if.else.465

land.lhs.true.393:                                ; preds = %lor.lhs.false.389
  %flags394 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 14
  %282 = load i32, i32* %flags394, align 4
  %and395 = and i32 %282, 32
  %tobool396 = icmp ne i32 %and395, 0
  br i1 %tobool396, label %lor.lhs.false.397, label %if.then.401

lor.lhs.false.397:                                ; preds = %land.lhs.true.393
  %283 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %flags398 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %283, i32 0, i32 0
  %284 = load i32, i32* %flags398, align 4
  %and399 = and i32 %284, 4096
  %tobool400 = icmp ne i32 %and399, 0
  br i1 %tobool400, label %if.then.401, label %if.else.465

if.then.401:                                      ; preds = %lor.lhs.false.397, %land.lhs.true.393, %cond.end.386
  %longest_fixed402 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 9
  %285 = load %struct.sv*, %struct.sv** %longest_fixed402, align 8
  %sv_any403 = getelementptr inbounds %struct.sv, %struct.sv* %285, i32 0, i32 0
  %286 = load i8*, i8** %sv_any403, align 8
  %287 = bitcast i8* %286 to %struct.xpv*
  %xpv_cur404 = getelementptr inbounds %struct.xpv, %struct.xpv* %287, i32 0, i32 1
  %288 = load i64, i64* %xpv_cur404, align 8
  %tobool405 = icmp ne i64 %288, 0
  br i1 %tobool405, label %land.lhs.true.406, label %if.end.419

land.lhs.true.406:                                ; preds = %if.then.401
  %offset_fixed = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 10
  %289 = load i32, i32* %offset_fixed, align 4
  %offset_float_min = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 12
  %290 = load i32, i32* %offset_float_min, align 4
  %cmp407 = icmp eq i32 %289, %290
  br i1 %cmp407, label %land.lhs.true.409, label %if.end.419

land.lhs.true.409:                                ; preds = %land.lhs.true.406
  %longest_fixed410 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 9
  %291 = load %struct.sv*, %struct.sv** %longest_fixed410, align 8
  %sv_any411 = getelementptr inbounds %struct.sv, %struct.sv* %291, i32 0, i32 0
  %292 = load i8*, i8** %sv_any411, align 8
  %293 = bitcast i8* %292 to %struct.xpv*
  %xpv_cur412 = getelementptr inbounds %struct.xpv, %struct.xpv* %293, i32 0, i32 1
  %294 = load i64, i64* %xpv_cur412, align 8
  %longest_float413 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 11
  %295 = load %struct.sv*, %struct.sv** %longest_float413, align 8
  %sv_any414 = getelementptr inbounds %struct.sv, %struct.sv* %295, i32 0, i32 0
  %296 = load i8*, i8** %sv_any414, align 8
  %297 = bitcast i8* %296 to %struct.xpv*
  %xpv_cur415 = getelementptr inbounds %struct.xpv, %struct.xpv* %297, i32 0, i32 1
  %298 = load i64, i64* %xpv_cur415, align 8
  %cmp416 = icmp eq i64 %294, %298
  br i1 %cmp416, label %if.then.418, label %if.end.419

if.then.418:                                      ; preds = %land.lhs.true.409
  br label %remove_float

if.end.419:                                       ; preds = %land.lhs.true.409, %land.lhs.true.406, %if.then.401
  %longest_float420 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 11
  %299 = load %struct.sv*, %struct.sv** %longest_float420, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %299, i32 0, i32 2
  %300 = load i32, i32* %sv_flags, align 4
  %and421 = and i32 %300, 536870912
  %tobool422 = icmp ne i32 %and421, 0
  br i1 %tobool422, label %if.then.423, label %if.else.431

if.then.423:                                      ; preds = %if.end.419
  %longest_float424 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 11
  %301 = load %struct.sv*, %struct.sv** %longest_float424, align 8
  %302 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs425 = getelementptr inbounds %struct.regexp, %struct.regexp* %302, i32 0, i32 3
  %303 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs425, align 8
  %data426 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %303, i32 0, i32 0
  %arrayidx427 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data426, i32 0, i64 1
  %utf8_substr = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx427, i32 0, i32 3
  store %struct.sv* %301, %struct.sv** %utf8_substr, align 8
  %304 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs428 = getelementptr inbounds %struct.regexp, %struct.regexp* %304, i32 0, i32 3
  %305 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs428, align 8
  %data429 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %305, i32 0, i32 0
  %arrayidx430 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data429, i32 0, i64 1
  %substr = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx430, i32 0, i32 2
  store %struct.sv* null, %struct.sv** %substr, align 8
  br label %if.end.441

if.else.431:                                      ; preds = %if.end.419
  %longest_float432 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 11
  %306 = load %struct.sv*, %struct.sv** %longest_float432, align 8
  %307 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs433 = getelementptr inbounds %struct.regexp, %struct.regexp* %307, i32 0, i32 3
  %308 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs433, align 8
  %data434 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %308, i32 0, i32 0
  %arrayidx435 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data434, i32 0, i64 1
  %substr436 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx435, i32 0, i32 2
  store %struct.sv* %306, %struct.sv** %substr436, align 8
  %309 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs437 = getelementptr inbounds %struct.regexp, %struct.regexp* %309, i32 0, i32 3
  %310 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs437, align 8
  %data438 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %310, i32 0, i32 0
  %arrayidx439 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data438, i32 0, i64 1
  %utf8_substr440 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx439, i32 0, i32 3
  store %struct.sv* null, %struct.sv** %utf8_substr440, align 8
  br label %if.end.441

if.end.441:                                       ; preds = %if.else.431, %if.then.423
  %offset_float_min442 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 12
  %311 = load i32, i32* %offset_float_min442, align 4
  %312 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs443 = getelementptr inbounds %struct.regexp, %struct.regexp* %312, i32 0, i32 3
  %313 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs443, align 8
  %data444 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %313, i32 0, i32 0
  %arrayidx445 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data444, i32 0, i64 1
  %min_offset = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx445, i32 0, i32 0
  store i32 %311, i32* %min_offset, align 4
  %offset_float_max = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 13
  %314 = load i32, i32* %offset_float_max, align 4
  %315 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs446 = getelementptr inbounds %struct.regexp, %struct.regexp* %315, i32 0, i32 3
  %316 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs446, align 8
  %data447 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %316, i32 0, i32 0
  %arrayidx448 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data447, i32 0, i64 1
  %max_offset = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx448, i32 0, i32 1
  store i32 %314, i32* %max_offset, align 4
  %flags449 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 14
  %317 = load i32, i32* %flags449, align 4
  %and450 = and i32 %317, 48
  %tobool451 = icmp ne i32 %and450, 0
  br i1 %tobool451, label %land.rhs.452, label %land.end.461

land.rhs.452:                                     ; preds = %if.end.441
  %flags453 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 14
  %318 = load i32, i32* %flags453, align 4
  %and454 = and i32 %318, 32
  %tobool455 = icmp ne i32 %and454, 0
  br i1 %tobool455, label %lor.rhs.456, label %lor.end.460

lor.rhs.456:                                      ; preds = %land.rhs.452
  %319 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %flags457 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %319, i32 0, i32 0
  %320 = load i32, i32* %flags457, align 4
  %and458 = and i32 %320, 4096
  %tobool459 = icmp ne i32 %and458, 0
  br label %lor.end.460

lor.end.460:                                      ; preds = %lor.rhs.456, %land.rhs.452
  %321 = phi i1 [ true, %land.rhs.452 ], [ %tobool459, %lor.rhs.456 ]
  br label %land.end.461

land.end.461:                                     ; preds = %lor.end.460, %if.end.441
  %322 = phi i1 [ false, %if.end.441 ], [ %321, %lor.end.460 ]
  %land.ext = zext i1 %322 to i32
  store i32 %land.ext, i32* %t, align 4
  %longest_float462 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 11
  %323 = load %struct.sv*, %struct.sv** %longest_float462, align 8
  %324 = load i32, i32* %t, align 4
  %tobool463 = icmp ne i32 %324, 0
  %cond464 = select i1 %tobool463, i32 15, i32 0
  call void @Perl_fbm_compile(%struct.sv* %323, i32 %cond464)
  br label %if.end.475

if.else.465:                                      ; preds = %lor.lhs.false.397, %lor.lhs.false.389
  br label %remove_float

remove_float:                                     ; preds = %if.else.465, %if.then.418
  %325 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs466 = getelementptr inbounds %struct.regexp, %struct.regexp* %325, i32 0, i32 3
  %326 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs466, align 8
  %data467 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %326, i32 0, i32 0
  %arrayidx468 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data467, i32 0, i64 1
  %utf8_substr469 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx468, i32 0, i32 3
  store %struct.sv* null, %struct.sv** %utf8_substr469, align 8
  %327 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs470 = getelementptr inbounds %struct.regexp, %struct.regexp* %327, i32 0, i32 3
  %328 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs470, align 8
  %data471 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %328, i32 0, i32 0
  %arrayidx472 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data471, i32 0, i64 1
  %substr473 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx472, i32 0, i32 2
  store %struct.sv* null, %struct.sv** %substr473, align 8
  %longest_float474 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 11
  %329 = load %struct.sv*, %struct.sv** %longest_float474, align 8
  call void @Perl_sv_free(%struct.sv* %329)
  store i64 0, i64* %longest_float_length, align 8
  br label %if.end.475

if.end.475:                                       ; preds = %remove_float, %land.end.461
  %330 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %utf8476 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %330, i32 0, i32 17
  %331 = load i32, i32* %utf8476, align 4
  %cmp477 = icmp ne i32 %331, 0
  br i1 %cmp477, label %cond.true.479, label %cond.false.482

cond.true.479:                                    ; preds = %if.end.475
  %longest_fixed480 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 9
  %332 = load %struct.sv*, %struct.sv** %longest_fixed480, align 8
  %call481 = call i64 @Perl_sv_len_utf8(%struct.sv* %332)
  br label %cond.end.486

cond.false.482:                                   ; preds = %if.end.475
  %longest_fixed483 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 9
  %333 = load %struct.sv*, %struct.sv** %longest_fixed483, align 8
  %sv_any484 = getelementptr inbounds %struct.sv, %struct.sv* %333, i32 0, i32 0
  %334 = load i8*, i8** %sv_any484, align 8
  %335 = bitcast i8* %334 to %struct.xpv*
  %xpv_cur485 = getelementptr inbounds %struct.xpv, %struct.xpv* %335, i32 0, i32 1
  %336 = load i64, i64* %xpv_cur485, align 8
  br label %cond.end.486

cond.end.486:                                     ; preds = %cond.false.482, %cond.true.479
  %cond487 = phi i64 [ %call481, %cond.true.479 ], [ %336, %cond.false.482 ]
  store i64 %cond487, i64* %longest_fixed_length, align 8
  %337 = load i64, i64* %longest_fixed_length, align 8
  %tobool488 = icmp ne i64 %337, 0
  br i1 %tobool488, label %if.then.501, label %lor.lhs.false.489

lor.lhs.false.489:                                ; preds = %cond.end.486
  %flags490 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 14
  %338 = load i32, i32* %flags490, align 4
  %and491 = and i32 %338, 12
  %tobool492 = icmp ne i32 %and491, 0
  br i1 %tobool492, label %land.lhs.true.493, label %if.else.550

land.lhs.true.493:                                ; preds = %lor.lhs.false.489
  %flags494 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 14
  %339 = load i32, i32* %flags494, align 4
  %and495 = and i32 %339, 8
  %tobool496 = icmp ne i32 %and495, 0
  br i1 %tobool496, label %lor.lhs.false.497, label %if.then.501

lor.lhs.false.497:                                ; preds = %land.lhs.true.493
  %340 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %flags498 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %340, i32 0, i32 0
  %341 = load i32, i32* %flags498, align 4
  %and499 = and i32 %341, 4096
  %tobool500 = icmp ne i32 %and499, 0
  br i1 %tobool500, label %if.then.501, label %if.else.550

if.then.501:                                      ; preds = %lor.lhs.false.497, %land.lhs.true.493, %cond.end.486
  %longest_fixed503 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 9
  %342 = load %struct.sv*, %struct.sv** %longest_fixed503, align 8
  %sv_flags504 = getelementptr inbounds %struct.sv, %struct.sv* %342, i32 0, i32 2
  %343 = load i32, i32* %sv_flags504, align 4
  %and505 = and i32 %343, 536870912
  %tobool506 = icmp ne i32 %and505, 0
  br i1 %tobool506, label %if.then.507, label %if.else.517

if.then.507:                                      ; preds = %if.then.501
  %longest_fixed508 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 9
  %344 = load %struct.sv*, %struct.sv** %longest_fixed508, align 8
  %345 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs509 = getelementptr inbounds %struct.regexp, %struct.regexp* %345, i32 0, i32 3
  %346 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs509, align 8
  %data510 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %346, i32 0, i32 0
  %arrayidx511 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data510, i32 0, i64 0
  %utf8_substr512 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx511, i32 0, i32 3
  store %struct.sv* %344, %struct.sv** %utf8_substr512, align 8
  %347 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs513 = getelementptr inbounds %struct.regexp, %struct.regexp* %347, i32 0, i32 3
  %348 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs513, align 8
  %data514 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %348, i32 0, i32 0
  %arrayidx515 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data514, i32 0, i64 0
  %substr516 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx515, i32 0, i32 2
  store %struct.sv* null, %struct.sv** %substr516, align 8
  br label %if.end.527

if.else.517:                                      ; preds = %if.then.501
  %longest_fixed518 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 9
  %349 = load %struct.sv*, %struct.sv** %longest_fixed518, align 8
  %350 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs519 = getelementptr inbounds %struct.regexp, %struct.regexp* %350, i32 0, i32 3
  %351 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs519, align 8
  %data520 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %351, i32 0, i32 0
  %arrayidx521 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data520, i32 0, i64 0
  %substr522 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx521, i32 0, i32 2
  store %struct.sv* %349, %struct.sv** %substr522, align 8
  %352 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs523 = getelementptr inbounds %struct.regexp, %struct.regexp* %352, i32 0, i32 3
  %353 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs523, align 8
  %data524 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %353, i32 0, i32 0
  %arrayidx525 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data524, i32 0, i64 0
  %utf8_substr526 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx525, i32 0, i32 3
  store %struct.sv* null, %struct.sv** %utf8_substr526, align 8
  br label %if.end.527

if.end.527:                                       ; preds = %if.else.517, %if.then.507
  %offset_fixed528 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 10
  %354 = load i32, i32* %offset_fixed528, align 4
  %355 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs529 = getelementptr inbounds %struct.regexp, %struct.regexp* %355, i32 0, i32 3
  %356 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs529, align 8
  %data530 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %356, i32 0, i32 0
  %arrayidx531 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data530, i32 0, i64 0
  %min_offset532 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx531, i32 0, i32 0
  store i32 %354, i32* %min_offset532, align 4
  %flags533 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 14
  %357 = load i32, i32* %flags533, align 4
  %and534 = and i32 %357, 12
  %tobool535 = icmp ne i32 %and534, 0
  br i1 %tobool535, label %land.rhs.536, label %land.end.545

land.rhs.536:                                     ; preds = %if.end.527
  %flags537 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 14
  %358 = load i32, i32* %flags537, align 4
  %and538 = and i32 %358, 8
  %tobool539 = icmp ne i32 %and538, 0
  br i1 %tobool539, label %lor.rhs.540, label %lor.end.544

lor.rhs.540:                                      ; preds = %land.rhs.536
  %359 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %flags541 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %359, i32 0, i32 0
  %360 = load i32, i32* %flags541, align 4
  %and542 = and i32 %360, 4096
  %tobool543 = icmp ne i32 %and542, 0
  br label %lor.end.544

lor.end.544:                                      ; preds = %lor.rhs.540, %land.rhs.536
  %361 = phi i1 [ true, %land.rhs.536 ], [ %tobool543, %lor.rhs.540 ]
  br label %land.end.545

land.end.545:                                     ; preds = %lor.end.544, %if.end.527
  %362 = phi i1 [ false, %if.end.527 ], [ %361, %lor.end.544 ]
  %land.ext546 = zext i1 %362 to i32
  store i32 %land.ext546, i32* %t502, align 4
  %longest_fixed547 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 9
  %363 = load %struct.sv*, %struct.sv** %longest_fixed547, align 8
  %364 = load i32, i32* %t502, align 4
  %tobool548 = icmp ne i32 %364, 0
  %cond549 = select i1 %tobool548, i32 15, i32 0
  call void @Perl_fbm_compile(%struct.sv* %363, i32 %cond549)
  br label %if.end.560

if.else.550:                                      ; preds = %lor.lhs.false.497, %lor.lhs.false.489
  %365 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs551 = getelementptr inbounds %struct.regexp, %struct.regexp* %365, i32 0, i32 3
  %366 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs551, align 8
  %data552 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %366, i32 0, i32 0
  %arrayidx553 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data552, i32 0, i64 0
  %utf8_substr554 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx553, i32 0, i32 3
  store %struct.sv* null, %struct.sv** %utf8_substr554, align 8
  %367 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs555 = getelementptr inbounds %struct.regexp, %struct.regexp* %367, i32 0, i32 3
  %368 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs555, align 8
  %data556 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %368, i32 0, i32 0
  %arrayidx557 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data556, i32 0, i64 0
  %substr558 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx557, i32 0, i32 2
  store %struct.sv* null, %struct.sv** %substr558, align 8
  %longest_fixed559 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 9
  %369 = load %struct.sv*, %struct.sv** %longest_fixed559, align 8
  call void @Perl_sv_free(%struct.sv* %369)
  store i64 0, i64* %longest_fixed_length, align 8
  br label %if.end.560

if.end.560:                                       ; preds = %if.else.550, %land.end.545
  %370 = load %struct.regexp*, %struct.regexp** %r, align 8
  %regstclass561 = getelementptr inbounds %struct.regexp, %struct.regexp* %370, i32 0, i32 2
  %371 = load %struct.regnode*, %struct.regnode** %regstclass561, align 8
  %tobool562 = icmp ne %struct.regnode* %371, null
  br i1 %tobool562, label %land.lhs.true.563, label %if.end.577

land.lhs.true.563:                                ; preds = %if.end.560
  %372 = load %struct.regexp*, %struct.regexp** %r, align 8
  %regstclass564 = getelementptr inbounds %struct.regexp, %struct.regexp* %372, i32 0, i32 2
  %373 = load %struct.regnode*, %struct.regnode** %regstclass564, align 8
  %type565 = getelementptr inbounds %struct.regnode, %struct.regnode* %373, i32 0, i32 1
  %374 = load i8, i8* %type565, align 1
  %conv566 = zext i8 %374 to i32
  %cmp567 = icmp eq i32 %conv566, 14
  br i1 %cmp567, label %if.then.575, label %lor.lhs.false.569

lor.lhs.false.569:                                ; preds = %land.lhs.true.563
  %375 = load %struct.regexp*, %struct.regexp** %r, align 8
  %regstclass570 = getelementptr inbounds %struct.regexp, %struct.regexp* %375, i32 0, i32 2
  %376 = load %struct.regnode*, %struct.regnode** %regstclass570, align 8
  %type571 = getelementptr inbounds %struct.regnode, %struct.regnode* %376, i32 0, i32 1
  %377 = load i8, i8* %type571, align 1
  %conv572 = zext i8 %377 to i32
  %cmp573 = icmp eq i32 %conv572, 15
  br i1 %cmp573, label %if.then.575, label %if.end.577

if.then.575:                                      ; preds = %lor.lhs.false.569, %land.lhs.true.563
  %378 = load %struct.regexp*, %struct.regexp** %r, align 8
  %regstclass576 = getelementptr inbounds %struct.regexp, %struct.regexp* %378, i32 0, i32 2
  store %struct.regnode* null, %struct.regnode** %regstclass576, align 8
  br label %if.end.577

if.end.577:                                       ; preds = %if.then.575, %lor.lhs.false.569, %if.end.560
  %379 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs578 = getelementptr inbounds %struct.regexp, %struct.regexp* %379, i32 0, i32 3
  %380 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs578, align 8
  %data579 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %380, i32 0, i32 0
  %arrayidx580 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data579, i32 0, i64 0
  %substr581 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx580, i32 0, i32 2
  %381 = load %struct.sv*, %struct.sv** %substr581, align 8
  %tobool582 = icmp ne %struct.sv* %381, null
  br i1 %tobool582, label %lor.lhs.false.589, label %lor.lhs.false.583

lor.lhs.false.583:                                ; preds = %if.end.577
  %382 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs584 = getelementptr inbounds %struct.regexp, %struct.regexp* %382, i32 0, i32 3
  %383 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs584, align 8
  %data585 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %383, i32 0, i32 0
  %arrayidx586 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data585, i32 0, i64 0
  %utf8_substr587 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx586, i32 0, i32 3
  %384 = load %struct.sv*, %struct.sv** %utf8_substr587, align 8
  %tobool588 = icmp ne %struct.sv* %384, null
  br i1 %tobool588, label %lor.lhs.false.589, label %land.lhs.true.595

lor.lhs.false.589:                                ; preds = %lor.lhs.false.583, %if.end.577
  %385 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs590 = getelementptr inbounds %struct.regexp, %struct.regexp* %385, i32 0, i32 3
  %386 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs590, align 8
  %data591 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %386, i32 0, i32 0
  %arrayidx592 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data591, i32 0, i64 0
  %min_offset593 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx592, i32 0, i32 0
  %387 = load i32, i32* %min_offset593, align 4
  %tobool594 = icmp ne i32 %387, 0
  br i1 %tobool594, label %land.lhs.true.595, label %if.end.630

land.lhs.true.595:                                ; preds = %lor.lhs.false.589, %lor.lhs.false.583
  %388 = load i32, i32* %stclass_flag, align 4
  %tobool596 = icmp ne i32 %388, 0
  br i1 %tobool596, label %land.lhs.true.597, label %if.end.630

land.lhs.true.597:                                ; preds = %land.lhs.true.595
  %start_class598 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 17
  %389 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class598, align 8
  %flags599 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %389, i32 0, i32 0
  %390 = load i8, i8* %flags599, align 1
  %conv600 = zext i8 %390 to i32
  %and601 = and i32 %conv600, 16
  %tobool602 = icmp ne i32 %and601, 0
  br i1 %tobool602, label %if.end.630, label %land.lhs.true.603

land.lhs.true.603:                                ; preds = %land.lhs.true.597
  %start_class604 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 17
  %391 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class604, align 8
  %call605 = call i32 @S_cl_is_anything(%struct.regnode_charclass_class* %391)
  %tobool606 = icmp ne i32 %call605, 0
  br i1 %tobool606, label %if.end.630, label %if.then.607

if.then.607:                                      ; preds = %land.lhs.true.603
  %392 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %call608 = call i32 @S_add_data(%struct.RExC_state_t* %392, i32 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0))
  store i32 %call608, i32* %n, align 4
  %call609 = call i8* @Perl_safesysmalloc(i64 44)
  %393 = bitcast i8* %call609 to %struct.regnode_charclass_class*
  %394 = bitcast %struct.regnode_charclass_class* %393 to i8*
  %395 = load i32, i32* %n, align 4
  %idxprom610 = sext i32 %395 to i64
  %396 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %rx611 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %396, i32 0, i32 2
  %397 = load %struct.regexp*, %struct.regexp** %rx611, align 8
  %data612 = getelementptr inbounds %struct.regexp, %struct.regexp* %397, i32 0, i32 5
  %398 = load %struct.reg_data*, %struct.reg_data** %data612, align 8
  %data613 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %398, i32 0, i32 2
  %arrayidx614 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data613, i32 0, i64 %idxprom610
  store i8* %394, i8** %arrayidx614, align 8
  %399 = load i32, i32* %n, align 4
  %idxprom615 = sext i32 %399 to i64
  %400 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %rx616 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %400, i32 0, i32 2
  %401 = load %struct.regexp*, %struct.regexp** %rx616, align 8
  %data617 = getelementptr inbounds %struct.regexp, %struct.regexp* %401, i32 0, i32 5
  %402 = load %struct.reg_data*, %struct.reg_data** %data617, align 8
  %data618 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %402, i32 0, i32 2
  %arrayidx619 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data618, i32 0, i64 %idxprom615
  %403 = load i8*, i8** %arrayidx619, align 8
  %404 = bitcast i8* %403 to %struct.regnode_charclass_class*
  %start_class620 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 17
  %405 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class620, align 8
  %406 = bitcast %struct.regnode_charclass_class* %404 to i8*
  %407 = bitcast %struct.regnode_charclass_class* %405 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %406, i8* %407, i64 44, i32 4, i1 false)
  %408 = load i32, i32* %n, align 4
  %idxprom621 = sext i32 %408 to i64
  %409 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %rx622 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %409, i32 0, i32 2
  %410 = load %struct.regexp*, %struct.regexp** %rx622, align 8
  %data623 = getelementptr inbounds %struct.regexp, %struct.regexp* %410, i32 0, i32 5
  %411 = load %struct.reg_data*, %struct.reg_data** %data623, align 8
  %data624 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %411, i32 0, i32 2
  %arrayidx625 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data624, i32 0, i64 %idxprom621
  %412 = load i8*, i8** %arrayidx625, align 8
  %413 = bitcast i8* %412 to %struct.regnode*
  %414 = load %struct.regexp*, %struct.regexp** %r, align 8
  %regstclass626 = getelementptr inbounds %struct.regexp, %struct.regexp* %414, i32 0, i32 2
  store %struct.regnode* %413, %struct.regnode** %regstclass626, align 8
  %415 = load %struct.regexp*, %struct.regexp** %r, align 8
  %reganch627 = getelementptr inbounds %struct.regexp, %struct.regexp* %415, i32 0, i32 15
  %416 = load i32, i32* %reganch627, align 4
  %and628 = and i32 %416, -17
  store i32 %and628, i32* %reganch627, align 4
  %417 = load %struct.regexp*, %struct.regexp** %r, align 8
  %data629 = getelementptr inbounds %struct.regexp, %struct.regexp* %417, i32 0, i32 5
  %418 = load %struct.reg_data*, %struct.reg_data** %data629, align 8
  store %struct.reg_data* %418, %struct.reg_data** @PL_regdata, align 8
  br label %if.end.630

if.end.630:                                       ; preds = %if.then.607, %land.lhs.true.603, %land.lhs.true.597, %land.lhs.true.595, %lor.lhs.false.589
  %419 = load i64, i64* %longest_fixed_length, align 8
  %420 = load i64, i64* %longest_float_length, align 8
  %cmp631 = icmp ugt i64 %419, %420
  br i1 %cmp631, label %if.then.633, label %if.else.669

if.then.633:                                      ; preds = %if.end.630
  %421 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs634 = getelementptr inbounds %struct.regexp, %struct.regexp* %421, i32 0, i32 3
  %422 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs634, align 8
  %data635 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %422, i32 0, i32 0
  %arrayidx636 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data635, i32 0, i64 0
  %substr637 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx636, i32 0, i32 2
  %423 = load %struct.sv*, %struct.sv** %substr637, align 8
  %424 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs638 = getelementptr inbounds %struct.regexp, %struct.regexp* %424, i32 0, i32 3
  %425 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs638, align 8
  %data639 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %425, i32 0, i32 0
  %arrayidx640 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data639, i32 0, i64 2
  %substr641 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx640, i32 0, i32 2
  store %struct.sv* %423, %struct.sv** %substr641, align 8
  %426 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs642 = getelementptr inbounds %struct.regexp, %struct.regexp* %426, i32 0, i32 3
  %427 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs642, align 8
  %data643 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %427, i32 0, i32 0
  %arrayidx644 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data643, i32 0, i64 0
  %utf8_substr645 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx644, i32 0, i32 3
  %428 = load %struct.sv*, %struct.sv** %utf8_substr645, align 8
  %429 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs646 = getelementptr inbounds %struct.regexp, %struct.regexp* %429, i32 0, i32 3
  %430 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs646, align 8
  %data647 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %430, i32 0, i32 0
  %arrayidx648 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data647, i32 0, i64 2
  %utf8_substr649 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx648, i32 0, i32 3
  store %struct.sv* %428, %struct.sv** %utf8_substr649, align 8
  %431 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs650 = getelementptr inbounds %struct.regexp, %struct.regexp* %431, i32 0, i32 3
  %432 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs650, align 8
  %data651 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %432, i32 0, i32 0
  %arrayidx652 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data651, i32 0, i64 0
  %min_offset653 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx652, i32 0, i32 0
  %433 = load i32, i32* %min_offset653, align 4
  %434 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs654 = getelementptr inbounds %struct.regexp, %struct.regexp* %434, i32 0, i32 3
  %435 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs654, align 8
  %data655 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %435, i32 0, i32 0
  %arrayidx656 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data655, i32 0, i64 2
  %max_offset657 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx656, i32 0, i32 1
  store i32 %433, i32* %max_offset657, align 4
  %436 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs658 = getelementptr inbounds %struct.regexp, %struct.regexp* %436, i32 0, i32 3
  %437 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs658, align 8
  %data659 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %437, i32 0, i32 0
  %arrayidx660 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data659, i32 0, i64 2
  %min_offset661 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx660, i32 0, i32 0
  store i32 %433, i32* %min_offset661, align 4
  %438 = load %struct.regexp*, %struct.regexp** %r, align 8
  %reganch662 = getelementptr inbounds %struct.regexp, %struct.regexp* %438, i32 0, i32 15
  %439 = load i32, i32* %reganch662, align 4
  %and663 = and i32 %439, 12
  %tobool664 = icmp ne i32 %and663, 0
  br i1 %tobool664, label %if.then.665, label %if.end.668

if.then.665:                                      ; preds = %if.then.633
  %440 = load %struct.regexp*, %struct.regexp** %r, align 8
  %reganch666 = getelementptr inbounds %struct.regexp, %struct.regexp* %440, i32 0, i32 15
  %441 = load i32, i32* %reganch666, align 4
  %or667 = or i32 %441, 64
  store i32 %or667, i32* %reganch666, align 4
  br label %if.end.668

if.end.668:                                       ; preds = %if.then.665, %if.then.633
  br label %if.end.696

if.else.669:                                      ; preds = %if.end.630
  %442 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs670 = getelementptr inbounds %struct.regexp, %struct.regexp* %442, i32 0, i32 3
  %443 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs670, align 8
  %data671 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %443, i32 0, i32 0
  %arrayidx672 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data671, i32 0, i64 1
  %substr673 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx672, i32 0, i32 2
  %444 = load %struct.sv*, %struct.sv** %substr673, align 8
  %445 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs674 = getelementptr inbounds %struct.regexp, %struct.regexp* %445, i32 0, i32 3
  %446 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs674, align 8
  %data675 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %446, i32 0, i32 0
  %arrayidx676 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data675, i32 0, i64 2
  %substr677 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx676, i32 0, i32 2
  store %struct.sv* %444, %struct.sv** %substr677, align 8
  %447 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs678 = getelementptr inbounds %struct.regexp, %struct.regexp* %447, i32 0, i32 3
  %448 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs678, align 8
  %data679 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %448, i32 0, i32 0
  %arrayidx680 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data679, i32 0, i64 1
  %utf8_substr681 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx680, i32 0, i32 3
  %449 = load %struct.sv*, %struct.sv** %utf8_substr681, align 8
  %450 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs682 = getelementptr inbounds %struct.regexp, %struct.regexp* %450, i32 0, i32 3
  %451 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs682, align 8
  %data683 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %451, i32 0, i32 0
  %arrayidx684 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data683, i32 0, i64 2
  %utf8_substr685 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx684, i32 0, i32 3
  store %struct.sv* %449, %struct.sv** %utf8_substr685, align 8
  %offset_float_min686 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 12
  %452 = load i32, i32* %offset_float_min686, align 4
  %453 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs687 = getelementptr inbounds %struct.regexp, %struct.regexp* %453, i32 0, i32 3
  %454 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs687, align 8
  %data688 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %454, i32 0, i32 0
  %arrayidx689 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data688, i32 0, i64 2
  %min_offset690 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx689, i32 0, i32 0
  store i32 %452, i32* %min_offset690, align 4
  %offset_float_max691 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 13
  %455 = load i32, i32* %offset_float_max691, align 4
  %456 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs692 = getelementptr inbounds %struct.regexp, %struct.regexp* %456, i32 0, i32 3
  %457 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs692, align 8
  %data693 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %457, i32 0, i32 0
  %arrayidx694 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data693, i32 0, i64 2
  %max_offset695 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx694, i32 0, i32 1
  store i32 %455, i32* %max_offset695, align 4
  br label %if.end.696

if.end.696:                                       ; preds = %if.else.669, %if.end.668
  %458 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs697 = getelementptr inbounds %struct.regexp, %struct.regexp* %458, i32 0, i32 3
  %459 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs697, align 8
  %data698 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %459, i32 0, i32 0
  %arrayidx699 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data698, i32 0, i64 2
  %substr700 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx699, i32 0, i32 2
  %460 = load %struct.sv*, %struct.sv** %substr700, align 8
  %tobool701 = icmp ne %struct.sv* %460, null
  br i1 %tobool701, label %land.lhs.true.708, label %lor.lhs.false.702

lor.lhs.false.702:                                ; preds = %if.end.696
  %461 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs703 = getelementptr inbounds %struct.regexp, %struct.regexp* %461, i32 0, i32 3
  %462 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs703, align 8
  %data704 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %462, i32 0, i32 0
  %arrayidx705 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data704, i32 0, i64 2
  %utf8_substr706 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx705, i32 0, i32 3
  %463 = load %struct.sv*, %struct.sv** %utf8_substr706, align 8
  %tobool707 = icmp ne %struct.sv* %463, null
  br i1 %tobool707, label %land.lhs.true.708, label %if.end.739

land.lhs.true.708:                                ; preds = %lor.lhs.false.702, %if.end.696
  %464 = load %struct.regexp*, %struct.regexp** %r, align 8
  %reganch709 = getelementptr inbounds %struct.regexp, %struct.regexp* %464, i32 0, i32 15
  %465 = load i32, i32* %reganch709, align 4
  %and710 = and i32 %465, 8
  %tobool711 = icmp ne i32 %and710, 0
  br i1 %tobool711, label %if.end.739, label %if.then.712

if.then.712:                                      ; preds = %land.lhs.true.708
  %466 = load %struct.regexp*, %struct.regexp** %r, align 8
  %reganch713 = getelementptr inbounds %struct.regexp, %struct.regexp* %466, i32 0, i32 15
  %467 = load i32, i32* %reganch713, align 4
  %or714 = or i32 %467, 3145728
  store i32 %or714, i32* %reganch713, align 4
  %468 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs715 = getelementptr inbounds %struct.regexp, %struct.regexp* %468, i32 0, i32 3
  %469 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs715, align 8
  %data716 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %469, i32 0, i32 0
  %arrayidx717 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data716, i32 0, i64 2
  %substr718 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx717, i32 0, i32 2
  %470 = load %struct.sv*, %struct.sv** %substr718, align 8
  %tobool719 = icmp ne %struct.sv* %470, null
  br i1 %tobool719, label %cond.true.720, label %cond.false.725

cond.true.720:                                    ; preds = %if.then.712
  %471 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs721 = getelementptr inbounds %struct.regexp, %struct.regexp* %471, i32 0, i32 3
  %472 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs721, align 8
  %data722 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %472, i32 0, i32 0
  %arrayidx723 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data722, i32 0, i64 2
  %substr724 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx723, i32 0, i32 2
  %473 = load %struct.sv*, %struct.sv** %substr724, align 8
  br label %cond.end.730

cond.false.725:                                   ; preds = %if.then.712
  %474 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs726 = getelementptr inbounds %struct.regexp, %struct.regexp* %474, i32 0, i32 3
  %475 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs726, align 8
  %data727 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %475, i32 0, i32 0
  %arrayidx728 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data727, i32 0, i64 2
  %utf8_substr729 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx728, i32 0, i32 3
  %476 = load %struct.sv*, %struct.sv** %utf8_substr729, align 8
  br label %cond.end.730

cond.end.730:                                     ; preds = %cond.false.725, %cond.true.720
  %cond731 = phi %struct.sv* [ %473, %cond.true.720 ], [ %476, %cond.false.725 ]
  %sv_flags732 = getelementptr inbounds %struct.sv, %struct.sv* %cond731, i32 0, i32 2
  %477 = load i32, i32* %sv_flags732, align 4
  %and733 = and i32 %477, 1073741824
  %tobool734 = icmp ne i32 %and733, 0
  br i1 %tobool734, label %if.then.735, label %if.end.738

if.then.735:                                      ; preds = %cond.end.730
  %478 = load %struct.regexp*, %struct.regexp** %r, align 8
  %reganch736 = getelementptr inbounds %struct.regexp, %struct.regexp* %478, i32 0, i32 15
  %479 = load i32, i32* %reganch736, align 4
  %or737 = or i32 %479, 134217728
  store i32 %or737, i32* %reganch736, align 4
  br label %if.end.738

if.end.738:                                       ; preds = %if.then.735, %cond.end.730
  br label %if.end.739

if.end.739:                                       ; preds = %if.end.738, %land.lhs.true.708, %lor.lhs.false.702
  br label %if.end.810

if.else.740:                                      ; preds = %if.end.143
  store i32 0, i32* %last_close743, align 4
  %480 = load %struct.regexp*, %struct.regexp** %r, align 8
  %program744 = getelementptr inbounds %struct.regexp, %struct.regexp* %480, i32 0, i32 16
  %arraydecay745 = getelementptr inbounds [1 x %struct.regnode], [1 x %struct.regnode]* %program744, i32 0, i32 0
  %add.ptr746 = getelementptr inbounds %struct.regnode, %struct.regnode* %arraydecay745, i64 1
  store %struct.regnode* %add.ptr746, %struct.regnode** %scan, align 8
  %481 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  call void @S_cl_init(%struct.RExC_state_t* %481, %struct.regnode_charclass_class* %ch_class742)
  %start_class747 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 17
  store %struct.regnode_charclass_class* %ch_class742, %struct.regnode_charclass_class** %start_class747, align 8
  %last_closep748 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 16
  store i32* %last_close743, i32** %last_closep748, align 8
  %482 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %483 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %484 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %size749 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %484, i32 0, i32 12
  %485 = load i32, i32* %size749, align 4
  %idx.ext750 = sext i32 %485 to i64
  %add.ptr751 = getelementptr inbounds %struct.regnode, %struct.regnode* %483, i64 %idx.ext750
  %call752 = call i32 @S_study_chunk(%struct.RExC_state_t* %482, %struct.regnode** %scan, i32* %fake741, %struct.regnode* %add.ptr751, %struct.scan_data_t* %data, i32 10240)
  store i32 %call752, i32* %minlen, align 4
  %486 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs753 = getelementptr inbounds %struct.regexp, %struct.regexp* %486, i32 0, i32 3
  %487 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs753, align 8
  %data754 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %487, i32 0, i32 0
  %arrayidx755 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data754, i32 0, i64 1
  %utf8_substr756 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx755, i32 0, i32 3
  store %struct.sv* null, %struct.sv** %utf8_substr756, align 8
  %488 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs757 = getelementptr inbounds %struct.regexp, %struct.regexp* %488, i32 0, i32 3
  %489 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs757, align 8
  %data758 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %489, i32 0, i32 0
  %arrayidx759 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data758, i32 0, i64 1
  %substr760 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx759, i32 0, i32 2
  store %struct.sv* null, %struct.sv** %substr760, align 8
  %490 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs761 = getelementptr inbounds %struct.regexp, %struct.regexp* %490, i32 0, i32 3
  %491 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs761, align 8
  %data762 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %491, i32 0, i32 0
  %arrayidx763 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data762, i32 0, i64 0
  %utf8_substr764 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx763, i32 0, i32 3
  store %struct.sv* null, %struct.sv** %utf8_substr764, align 8
  %492 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs765 = getelementptr inbounds %struct.regexp, %struct.regexp* %492, i32 0, i32 3
  %493 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs765, align 8
  %data766 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %493, i32 0, i32 0
  %arrayidx767 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data766, i32 0, i64 0
  %substr768 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx767, i32 0, i32 2
  store %struct.sv* null, %struct.sv** %substr768, align 8
  %494 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs769 = getelementptr inbounds %struct.regexp, %struct.regexp* %494, i32 0, i32 3
  %495 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs769, align 8
  %data770 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %495, i32 0, i32 0
  %arrayidx771 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data770, i32 0, i64 2
  %utf8_substr772 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx771, i32 0, i32 3
  store %struct.sv* null, %struct.sv** %utf8_substr772, align 8
  %496 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs773 = getelementptr inbounds %struct.regexp, %struct.regexp* %496, i32 0, i32 3
  %497 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs773, align 8
  %data774 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %497, i32 0, i32 0
  %arrayidx775 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data774, i32 0, i64 2
  %substr776 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx775, i32 0, i32 2
  store %struct.sv* null, %struct.sv** %substr776, align 8
  %start_class777 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 17
  %498 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class777, align 8
  %flags778 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %498, i32 0, i32 0
  %499 = load i8, i8* %flags778, align 1
  %conv779 = zext i8 %499 to i32
  %and780 = and i32 %conv779, 16
  %tobool781 = icmp ne i32 %and780, 0
  br i1 %tobool781, label %if.end.809, label %land.lhs.true.782

land.lhs.true.782:                                ; preds = %if.else.740
  %start_class783 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 17
  %500 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class783, align 8
  %call784 = call i32 @S_cl_is_anything(%struct.regnode_charclass_class* %500)
  %tobool785 = icmp ne i32 %call784, 0
  br i1 %tobool785, label %if.end.809, label %if.then.786

if.then.786:                                      ; preds = %land.lhs.true.782
  %501 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %call788 = call i32 @S_add_data(%struct.RExC_state_t* %501, i32 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0))
  store i32 %call788, i32* %n787, align 4
  %call789 = call i8* @Perl_safesysmalloc(i64 44)
  %502 = bitcast i8* %call789 to %struct.regnode_charclass_class*
  %503 = bitcast %struct.regnode_charclass_class* %502 to i8*
  %504 = load i32, i32* %n787, align 4
  %idxprom790 = sext i32 %504 to i64
  %505 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %rx791 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %505, i32 0, i32 2
  %506 = load %struct.regexp*, %struct.regexp** %rx791, align 8
  %data792 = getelementptr inbounds %struct.regexp, %struct.regexp* %506, i32 0, i32 5
  %507 = load %struct.reg_data*, %struct.reg_data** %data792, align 8
  %data793 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %507, i32 0, i32 2
  %arrayidx794 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data793, i32 0, i64 %idxprom790
  store i8* %503, i8** %arrayidx794, align 8
  %508 = load i32, i32* %n787, align 4
  %idxprom795 = sext i32 %508 to i64
  %509 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %rx796 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %509, i32 0, i32 2
  %510 = load %struct.regexp*, %struct.regexp** %rx796, align 8
  %data797 = getelementptr inbounds %struct.regexp, %struct.regexp* %510, i32 0, i32 5
  %511 = load %struct.reg_data*, %struct.reg_data** %data797, align 8
  %data798 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %511, i32 0, i32 2
  %arrayidx799 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data798, i32 0, i64 %idxprom795
  %512 = load i8*, i8** %arrayidx799, align 8
  %513 = bitcast i8* %512 to %struct.regnode_charclass_class*
  %start_class800 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 17
  %514 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class800, align 8
  %515 = bitcast %struct.regnode_charclass_class* %513 to i8*
  %516 = bitcast %struct.regnode_charclass_class* %514 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %515, i8* %516, i64 44, i32 4, i1 false)
  %517 = load i32, i32* %n787, align 4
  %idxprom801 = sext i32 %517 to i64
  %518 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %rx802 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %518, i32 0, i32 2
  %519 = load %struct.regexp*, %struct.regexp** %rx802, align 8
  %data803 = getelementptr inbounds %struct.regexp, %struct.regexp* %519, i32 0, i32 5
  %520 = load %struct.reg_data*, %struct.reg_data** %data803, align 8
  %data804 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %520, i32 0, i32 2
  %arrayidx805 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data804, i32 0, i64 %idxprom801
  %521 = load i8*, i8** %arrayidx805, align 8
  %522 = bitcast i8* %521 to %struct.regnode*
  %523 = load %struct.regexp*, %struct.regexp** %r, align 8
  %regstclass806 = getelementptr inbounds %struct.regexp, %struct.regexp* %523, i32 0, i32 2
  store %struct.regnode* %522, %struct.regnode** %regstclass806, align 8
  %524 = load %struct.regexp*, %struct.regexp** %r, align 8
  %reganch807 = getelementptr inbounds %struct.regexp, %struct.regexp* %524, i32 0, i32 15
  %525 = load i32, i32* %reganch807, align 4
  %and808 = and i32 %525, -17
  store i32 %and808, i32* %reganch807, align 4
  br label %if.end.809

if.end.809:                                       ; preds = %if.then.786, %land.lhs.true.782, %if.else.740
  br label %if.end.810

if.end.810:                                       ; preds = %if.end.809, %if.end.739
  %526 = load i32, i32* %minlen, align 4
  %527 = load %struct.regexp*, %struct.regexp** %r, align 8
  %minlen811 = getelementptr inbounds %struct.regexp, %struct.regexp* %527, i32 0, i32 10
  store i32 %526, i32* %minlen811, align 4
  %528 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %seen812 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %528, i32 0, i32 11
  %529 = load i32, i32* %seen812, align 4
  %and813 = and i32 %529, 4
  %tobool814 = icmp ne i32 %and813, 0
  br i1 %tobool814, label %if.then.815, label %if.end.818

if.then.815:                                      ; preds = %if.end.810
  %530 = load %struct.regexp*, %struct.regexp** %r, align 8
  %reganch816 = getelementptr inbounds %struct.regexp, %struct.regexp* %530, i32 0, i32 15
  %531 = load i32, i32* %reganch816, align 4
  %or817 = or i32 %531, 128
  store i32 %or817, i32* %reganch816, align 4
  br label %if.end.818

if.end.818:                                       ; preds = %if.then.815, %if.end.810
  %532 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %seen819 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %532, i32 0, i32 11
  %533 = load i32, i32* %seen819, align 4
  %and820 = and i32 %533, 2
  %tobool821 = icmp ne i32 %and820, 0
  br i1 %tobool821, label %if.then.822, label %if.end.825

if.then.822:                                      ; preds = %if.end.818
  %534 = load %struct.regexp*, %struct.regexp** %r, align 8
  %reganch823 = getelementptr inbounds %struct.regexp, %struct.regexp* %534, i32 0, i32 15
  %535 = load i32, i32* %reganch823, align 4
  %or824 = or i32 %535, 512
  store i32 %or824, i32* %reganch823, align 4
  br label %if.end.825

if.end.825:                                       ; preds = %if.then.822, %if.end.818
  %536 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %seen826 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %536, i32 0, i32 11
  %537 = load i32, i32* %seen826, align 4
  %and827 = and i32 %537, 8
  %tobool828 = icmp ne i32 %and827, 0
  br i1 %tobool828, label %if.then.829, label %if.end.832

if.then.829:                                      ; preds = %if.end.825
  %538 = load %struct.regexp*, %struct.regexp** %r, align 8
  %reganch830 = getelementptr inbounds %struct.regexp, %struct.regexp* %538, i32 0, i32 15
  %539 = load i32, i32* %reganch830, align 4
  %or831 = or i32 %539, 1024
  store i32 %or831, i32* %reganch830, align 4
  br label %if.end.832

if.end.832:                                       ; preds = %if.then.829, %if.end.825
  %540 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %seen833 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %540, i32 0, i32 11
  %541 = load i32, i32* %seen833, align 4
  %and834 = and i32 %541, 16
  %tobool835 = icmp ne i32 %and834, 0
  br i1 %tobool835, label %if.then.836, label %if.end.839

if.then.836:                                      ; preds = %if.end.832
  %542 = load %struct.regexp*, %struct.regexp** %r, align 8
  %reganch837 = getelementptr inbounds %struct.regexp, %struct.regexp* %542, i32 0, i32 15
  %543 = load i32, i32* %reganch837, align 4
  %or838 = or i32 %543, 2048
  store i32 %or838, i32* %reganch837, align 4
  br label %if.end.839

if.end.839:                                       ; preds = %if.then.836, %if.end.832
  %544 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %npar840 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %544, i32 0, i32 13
  %545 = load i32, i32* %npar840, align 4
  %conv841 = sext i32 %545 to i64
  %mul842 = mul i64 %conv841, 4
  %call843 = call i8* @Perl_safesysmalloc(i64 %mul842)
  %546 = bitcast i8* %call843 to i32*
  %547 = load %struct.regexp*, %struct.regexp** %r, align 8
  %startp844 = getelementptr inbounds %struct.regexp, %struct.regexp* %547, i32 0, i32 0
  store i32* %546, i32** %startp844, align 8
  %548 = load %struct.regexp*, %struct.regexp** %r, align 8
  %startp845 = getelementptr inbounds %struct.regexp, %struct.regexp* %548, i32 0, i32 0
  %549 = load i32*, i32** %startp845, align 8
  %550 = bitcast i32* %549 to i8*
  %551 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %npar846 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %551, i32 0, i32 13
  %552 = load i32, i32* %npar846, align 4
  %conv847 = sext i32 %552 to i64
  %mul848 = mul i64 %conv847, 4
  call void @llvm.memset.p0i8.i64(i8* %550, i8 0, i64 %mul848, i32 1, i1 false)
  %553 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %npar849 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %553, i32 0, i32 13
  %554 = load i32, i32* %npar849, align 4
  %conv850 = sext i32 %554 to i64
  %mul851 = mul i64 %conv850, 4
  %call852 = call i8* @Perl_safesysmalloc(i64 %mul851)
  %555 = bitcast i8* %call852 to i32*
  %556 = load %struct.regexp*, %struct.regexp** %r, align 8
  %endp853 = getelementptr inbounds %struct.regexp, %struct.regexp* %556, i32 0, i32 1
  store i32* %555, i32** %endp853, align 8
  %557 = load %struct.regexp*, %struct.regexp** %r, align 8
  %endp854 = getelementptr inbounds %struct.regexp, %struct.regexp* %557, i32 0, i32 1
  %558 = load i32*, i32** %endp854, align 8
  %559 = bitcast i32* %558 to i8*
  %560 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %npar855 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %560, i32 0, i32 13
  %561 = load i32, i32* %npar855, align 4
  %conv856 = sext i32 %561 to i64
  %mul857 = mul i64 %conv856, 4
  call void @llvm.memset.p0i8.i64(i8* %559, i8 0, i64 %mul857, i32 1, i1 false)
  %562 = load %struct.regexp*, %struct.regexp** %r, align 8
  %data858 = getelementptr inbounds %struct.regexp, %struct.regexp* %562, i32 0, i32 5
  %563 = load %struct.reg_data*, %struct.reg_data** %data858, align 8
  store %struct.reg_data* %563, %struct.reg_data** @PL_regdata, align 8
  %564 = load %struct.regexp*, %struct.regexp** %r, align 8
  store %struct.regexp* %564, %struct.regexp** %retval
  br label %return

return:                                           ; preds = %if.end.839, %if.then.124, %if.then.18
  %565 = load %struct.regexp*, %struct.regexp** %retval
  ret %struct.regexp* %565
}

declare void @Perl_save_destructor_x(void (i8*)*, i8*) #1

; Function Attrs: nounwind uwtable
define internal void @clear_re(i8* %r) #0 {
entry:
  %r.addr = alloca i8*, align 8
  store i8* %r, i8** %r.addr, align 8
  %0 = load void (%struct.regexp*)*, void (%struct.regexp*)** @PL_regfree, align 8
  %1 = load i8*, i8** %r.addr, align 8
  %2 = bitcast i8* %1 to %struct.regexp*
  call void %0(%struct.regexp* %2)
  ret void
}

declare void @Perl_croak(i8*, ...) #1

; Function Attrs: nounwind uwtable
define internal %struct.regnode* @S_reg(%struct.RExC_state_t* %pRExC_state, i32 %paren, i32* %flagp) #0 {
entry:
  %retval = alloca %struct.regnode*, align 8
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %paren.addr = alloca i32, align 4
  %flagp.addr = alloca i32*, align 8
  %ret = alloca %struct.regnode*, align 8
  %br = alloca %struct.regnode*, align 8
  %lastbr = alloca %struct.regnode*, align 8
  %ender = alloca %struct.regnode*, align 8
  %parno = alloca i32, align 4
  %flags = alloca i32, align 4
  %oregflags = alloca i32, align 4
  %have_branch = alloca i32, align 4
  %open = alloca i32, align 4
  %wastedflags = alloca i32, align 4
  %wasted_o = alloca i32, align 4
  %wasted_g = alloca i32, align 4
  %wasted_gc = alloca i32, align 4
  %wasted_c = alloca i32, align 4
  %parse_start = alloca i8*, align 8
  %oregcomp_parse = alloca i8*, align 8
  %c = alloca i8, align 1
  %posflags = alloca i32, align 4
  %negflags = alloca i32, align 4
  %flagsp = alloca i32*, align 8
  %logical = alloca i32, align 4
  %seqstart = alloca i8*, align 8
  %offset = alloca i64, align 8
  %ellipses = alloca i8*, align 8
  %len = alloca i64, align 8
  %offset106 = alloca i64, align 8
  %count = alloca i32, align 4
  %n = alloca i32, align 4
  %c128 = alloca i8, align 1
  %s = alloca i8*, align 8
  %sv = alloca %struct.sv*, align 8
  %sop = alloca %struct.op*, align 8
  %rop = alloca %struct.op*, align 8
  %offset181 = alloca i64, align 8
  %pad = alloca %struct.av*, align 8
  %ellipses239 = alloca i8*, align 8
  %len240 = alloca i64, align 8
  %ellipses265 = alloca i8*, align 8
  %len266 = alloca i64, align 8
  %flag = alloca i32, align 4
  %offset446 = alloca i64, align 8
  %offset496 = alloca i64, align 8
  %offset521 = alloca i64, align 8
  %offset543 = alloca i64, align 8
  %wflagbit = alloca i32, align 4
  %offset616 = alloca i64, align 8
  %offset681 = alloca i64, align 8
  %offset741 = alloca i64, align 8
  %p = alloca i8*, align 8
  %node = alloca i8, align 1
  %flag1076 = alloca i32, align 4
  %offset1179 = alloca i64, align 8
  %offset1211 = alloca i64, align 8
  %ellipses1222 = alloca i8*, align 8
  %len1223 = alloca i64, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i32 %paren, i32* %paren.addr, align 4
  store i32* %flagp, i32** %flagp.addr, align 8
  store %struct.regnode* null, %struct.regnode** %ender, align 8
  store i32 0, i32* %parno, align 4
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %0, i32 0, i32 0
  %1 = load i32, i32* %flags1, align 4
  store i32 %1, i32* %oregflags, align 4
  store i32 0, i32* %have_branch, align 4
  store i32 0, i32* %open, align 4
  store i32 0, i32* %wastedflags, align 4
  store i32 1, i32* %wasted_o, align 4
  store i32 2, i32* %wasted_g, align 4
  store i32 6, i32* %wasted_gc, align 4
  store i32 4, i32* %wasted_c, align 4
  %2 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2, i32 0, i32 5
  %3 = load i8*, i8** %parse, align 8
  store i8* %3, i8** %parse_start, align 8
  %4 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %4, i32 0, i32 5
  %5 = load i8*, i8** %parse2, align 8
  store i8* %5, i8** %oregcomp_parse, align 8
  %6 = load i32*, i32** %flagp.addr, align 8
  store i32 0, i32* %6, align 4
  %7 = load i32, i32* %paren.addr, align 4
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %if.then, label %if.else.827

if.then:                                          ; preds = %entry
  %8 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse3 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %8, i32 0, i32 5
  %9 = load i8*, i8** %parse3, align 8
  %10 = load i8, i8* %9, align 1
  %conv = sext i8 %10 to i32
  %cmp = icmp eq i32 %conv, 63
  br i1 %cmp, label %if.then.5, label %if.else.757

if.then.5:                                        ; preds = %if.then
  store i32 0, i32* %posflags, align 4
  store i32 0, i32* %negflags, align 4
  store i32* %posflags, i32** %flagsp, align 8
  store i32 0, i32* %logical, align 4
  %11 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse6 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %11, i32 0, i32 5
  %12 = load i8*, i8** %parse6, align 8
  store i8* %12, i8** %seqstart, align 8
  %13 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse7 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %13, i32 0, i32 5
  %14 = load i8*, i8** %parse7, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %14, i32 1
  store i8* %incdec.ptr, i8** %parse7, align 8
  %15 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %15, i32 0, i32 5
  %16 = load i8*, i8** %parse8, align 8
  %incdec.ptr9 = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %incdec.ptr9, i8** %parse8, align 8
  %17 = load i8, i8* %16, align 1
  %conv10 = sext i8 %17 to i32
  store i32 %conv10, i32* %paren.addr, align 4
  store %struct.regnode* null, %struct.regnode** %ret, align 8
  %18 = load i32, i32* %paren.addr, align 4
  switch i32 %18, label %sw.default [
    i32 60, label %sw.bb
    i32 61, label %sw.bb.28
    i32 33, label %sw.bb.28
    i32 58, label %sw.bb.29
    i32 62, label %sw.bb.29
    i32 36, label %sw.bb.30
    i32 64, label %sw.bb.30
    i32 35, label %sw.bb.39
    i32 112, label %sw.bb.71
    i32 63, label %sw.bb.117
    i32 123, label %sw.bb.127
    i32 40, label %sw.bb.363
    i32 0, label %sw.bb.534
  ]

sw.bb:                                            ; preds = %if.then.5
  %19 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %19, i32 0, i32 11
  %20 = load i32, i32* %seen, align 4
  %or = or i32 %20, 2
  store i32 %or, i32* %seen, align 4
  %21 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse11 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %21, i32 0, i32 5
  %22 = load i8*, i8** %parse11, align 8
  %23 = load i8, i8* %22, align 1
  %conv12 = sext i8 %23 to i32
  %cmp13 = icmp eq i32 %conv12, 33
  br i1 %cmp13, label %if.then.15, label %if.end

if.then.15:                                       ; preds = %sw.bb
  store i32 44, i32* %paren.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.15, %sw.bb
  %24 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse16 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %24, i32 0, i32 5
  %25 = load i8*, i8** %parse16, align 8
  %26 = load i8, i8* %25, align 1
  %conv17 = sext i8 %26 to i32
  %cmp18 = icmp ne i32 %conv17, 61
  br i1 %cmp18, label %land.lhs.true, label %if.end.25

land.lhs.true:                                    ; preds = %if.end
  %27 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse20 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %27, i32 0, i32 5
  %28 = load i8*, i8** %parse20, align 8
  %29 = load i8, i8* %28, align 1
  %conv21 = sext i8 %29 to i32
  %cmp22 = icmp ne i32 %conv21, 33
  br i1 %cmp22, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %land.lhs.true
  br label %unknown

if.end.25:                                        ; preds = %land.lhs.true, %if.end
  %30 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse26 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %30, i32 0, i32 5
  %31 = load i8*, i8** %parse26, align 8
  %incdec.ptr27 = getelementptr inbounds i8, i8* %31, i32 1
  store i8* %incdec.ptr27, i8** %parse26, align 8
  br label %sw.bb.28

sw.bb.28:                                         ; preds = %if.then.5, %if.then.5, %if.end.25
  %32 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen_zerolen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %32, i32 0, i32 15
  %33 = load i32, i32* %seen_zerolen, align 4
  %inc = add nsw i32 %33, 1
  store i32 %inc, i32* %seen_zerolen, align 4
  br label %sw.bb.29

sw.bb.29:                                         ; preds = %if.then.5, %if.then.5, %sw.bb.28
  br label %sw.epilog

sw.bb.30:                                         ; preds = %if.then.5, %if.then.5
  %34 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %34, i32 0, i32 8
  %35 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %cmp31 = icmp eq %struct.regnode* %35, @PL_regdummy
  br i1 %cmp31, label %if.end.34, label %if.then.33

if.then.33:                                       ; preds = %sw.bb.30
  %36 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %36, i32 0, i32 2
  %37 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %38 = bitcast %struct.regexp* %37 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %38)
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.33, %sw.bb.30
  %39 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse35 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %39, i32 0, i32 5
  %40 = load i8*, i8** %parse35, align 8
  %41 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %41, i32 0, i32 1
  %42 = load i8*, i8** %precomp, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %40 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %42 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %offset, align 8
  %43 = load i32, i32* %paren.addr, align 4
  %44 = load i64, i64* %offset, align 8
  %conv36 = trunc i64 %44 to i32
  %45 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp37 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %45, i32 0, i32 1
  %46 = load i8*, i8** %precomp37, align 8
  %47 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp38 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %47, i32 0, i32 1
  %48 = load i8*, i8** %precomp38, align 8
  %49 = load i64, i64* %offset, align 8
  %add.ptr = getelementptr inbounds i8, i8* %48, i64 %49
  call void (i8*, i8*, ...) @S_re_croak2(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.16, i32 0, i32 0), i32 %43, i32 %conv36, i8* %46, i8* %add.ptr)
  br label %sw.epilog

sw.bb.39:                                         ; preds = %if.then.5
  br label %while.cond

while.cond:                                       ; preds = %while.body, %sw.bb.39
  %50 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse40 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %50, i32 0, i32 5
  %51 = load i8*, i8** %parse40, align 8
  %52 = load i8, i8* %51, align 1
  %conv41 = sext i8 %52 to i32
  %tobool42 = icmp ne i32 %conv41, 0
  br i1 %tobool42, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %53 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse43 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %53, i32 0, i32 5
  %54 = load i8*, i8** %parse43, align 8
  %55 = load i8, i8* %54, align 1
  %conv44 = sext i8 %55 to i32
  %cmp45 = icmp ne i32 %conv44, 41
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %56 = phi i1 [ false, %while.cond ], [ %cmp45, %land.rhs ]
  br i1 %56, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %57 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse47 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %57, i32 0, i32 5
  %58 = load i8*, i8** %parse47, align 8
  %incdec.ptr48 = getelementptr inbounds i8, i8* %58, i32 1
  store i8* %incdec.ptr48, i8** %parse47, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %59 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse49 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %59, i32 0, i32 5
  %60 = load i8*, i8** %parse49, align 8
  %61 = load i8, i8* %60, align 1
  %conv50 = sext i8 %61 to i32
  %cmp51 = icmp ne i32 %conv50, 41
  br i1 %cmp51, label %if.then.53, label %if.end.70

if.then.53:                                       ; preds = %while.end
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8** %ellipses, align 8
  %62 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %62, i32 0, i32 4
  %63 = load i8*, i8** %end, align 8
  %64 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp54 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %64, i32 0, i32 1
  %65 = load i8*, i8** %precomp54, align 8
  %sub.ptr.lhs.cast55 = ptrtoint i8* %63 to i64
  %sub.ptr.rhs.cast56 = ptrtoint i8* %65 to i64
  %sub.ptr.sub57 = sub i64 %sub.ptr.lhs.cast55, %sub.ptr.rhs.cast56
  store i64 %sub.ptr.sub57, i64* %len, align 8
  %66 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit58 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %66, i32 0, i32 8
  %67 = load %struct.regnode*, %struct.regnode** %emit58, align 8
  %cmp59 = icmp eq %struct.regnode* %67, @PL_regdummy
  br i1 %cmp59, label %if.end.63, label %if.then.61

if.then.61:                                       ; preds = %if.then.53
  %68 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx62 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %68, i32 0, i32 2
  %69 = load %struct.regexp*, %struct.regexp** %rx62, align 8
  %70 = bitcast %struct.regexp* %69 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %70)
  br label %if.end.63

if.end.63:                                        ; preds = %if.then.61, %if.then.53
  %71 = load i64, i64* %len, align 8
  %cmp64 = icmp sgt i64 %71, 127
  br i1 %cmp64, label %if.then.66, label %if.end.67

if.then.66:                                       ; preds = %if.end.63
  store i64 117, i64* %len, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8** %ellipses, align 8
  br label %if.end.67

if.end.67:                                        ; preds = %if.then.66, %if.end.63
  %72 = load i64, i64* %len, align 8
  %conv68 = trunc i64 %72 to i32
  %73 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp69 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %73, i32 0, i32 1
  %74 = load i8*, i8** %precomp69, align 8
  %75 = load i8*, i8** %ellipses, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.20, i32 0, i32 0), i32 %conv68, i8* %74, i8* %75)
  br label %if.end.70

if.end.70:                                        ; preds = %if.end.67, %while.end
  %76 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call = call i8* @S_nextchar(%struct.RExC_state_t* %76)
  %77 = load i32*, i32** %flagp.addr, align 8
  store i32 8, i32* %77, align 4
  store %struct.regnode* null, %struct.regnode** %retval
  br label %return

sw.bb.71:                                         ; preds = %if.then.5
  %78 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit72 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %78, i32 0, i32 8
  %79 = load %struct.regnode*, %struct.regnode** %emit72, align 8
  %cmp73 = icmp eq %struct.regnode* %79, @PL_regdummy
  br i1 %cmp73, label %land.lhs.true.75, label %if.end.116

land.lhs.true.75:                                 ; preds = %sw.bb.71
  %80 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %80, i32 0, i32 14
  %81 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp76 = icmp ne %struct.sv* %81, null
  br i1 %cmp76, label %land.lhs.true.78, label %lor.lhs.false.97

land.lhs.true.78:                                 ; preds = %land.lhs.true.75
  %82 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings79 = getelementptr inbounds %struct.cop, %struct.cop* %82, i32 0, i32 14
  %83 = load %struct.sv*, %struct.sv** %cop_warnings79, align 8
  %cmp80 = icmp ne %struct.sv* %83, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp80, label %land.lhs.true.82, label %lor.lhs.false.97

land.lhs.true.82:                                 ; preds = %land.lhs.true.78
  %84 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings83 = getelementptr inbounds %struct.cop, %struct.cop* %84, i32 0, i32 14
  %85 = load %struct.sv*, %struct.sv** %cop_warnings83, align 8
  %cmp84 = icmp eq %struct.sv* %85, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp84, label %if.then.105, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.82
  %86 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings86 = getelementptr inbounds %struct.cop, %struct.cop* %86, i32 0, i32 14
  %87 = load %struct.sv*, %struct.sv** %cop_warnings86, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %87, i32 0, i32 0
  %88 = load i8*, i8** %sv_any, align 8
  %89 = bitcast i8* %88 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %89, i32 0, i32 0
  %90 = load i8*, i8** %xpv_pv, align 8
  %arrayidx = getelementptr inbounds i8, i8* %90, i64 0
  %91 = load i8, i8* %arrayidx, align 1
  %conv87 = sext i8 %91 to i32
  %and = and i32 %conv87, 16
  %tobool88 = icmp ne i32 %and, 0
  br i1 %tobool88, label %if.then.105, label %lor.lhs.false.89

lor.lhs.false.89:                                 ; preds = %lor.lhs.false
  %92 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings90 = getelementptr inbounds %struct.cop, %struct.cop* %92, i32 0, i32 14
  %93 = load %struct.sv*, %struct.sv** %cop_warnings90, align 8
  %sv_any91 = getelementptr inbounds %struct.sv, %struct.sv* %93, i32 0, i32 0
  %94 = load i8*, i8** %sv_any91, align 8
  %95 = bitcast i8* %94 to %struct.xpv*
  %xpv_pv92 = getelementptr inbounds %struct.xpv, %struct.xpv* %95, i32 0, i32 0
  %96 = load i8*, i8** %xpv_pv92, align 8
  %arrayidx93 = getelementptr inbounds i8, i8* %96, i64 5
  %97 = load i8, i8* %arrayidx93, align 1
  %conv94 = sext i8 %97 to i32
  %and95 = and i32 %conv94, 1
  %tobool96 = icmp ne i32 %and95, 0
  br i1 %tobool96, label %if.then.105, label %lor.lhs.false.97

lor.lhs.false.97:                                 ; preds = %lor.lhs.false.89, %land.lhs.true.78, %land.lhs.true.75
  %98 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings98 = getelementptr inbounds %struct.cop, %struct.cop* %98, i32 0, i32 14
  %99 = load %struct.sv*, %struct.sv** %cop_warnings98, align 8
  %cmp99 = icmp eq %struct.sv* %99, null
  br i1 %cmp99, label %land.lhs.true.101, label %if.end.116

land.lhs.true.101:                                ; preds = %lor.lhs.false.97
  %100 = load i8, i8* @PL_dowarn, align 1
  %conv102 = zext i8 %100 to i32
  %and103 = and i32 %conv102, 1
  %tobool104 = icmp ne i32 %and103, 0
  br i1 %tobool104, label %if.then.105, label %if.end.116

if.then.105:                                      ; preds = %land.lhs.true.101, %lor.lhs.false.89, %lor.lhs.false, %land.lhs.true.82
  %101 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse107 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %101, i32 0, i32 5
  %102 = load i8*, i8** %parse107, align 8
  %103 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp108 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %103, i32 0, i32 1
  %104 = load i8*, i8** %precomp108, align 8
  %sub.ptr.lhs.cast109 = ptrtoint i8* %102 to i64
  %sub.ptr.rhs.cast110 = ptrtoint i8* %104 to i64
  %sub.ptr.sub111 = sub i64 %sub.ptr.lhs.cast109, %sub.ptr.rhs.cast110
  store i64 %sub.ptr.sub111, i64* %offset106, align 8
  %105 = load i64, i64* %offset106, align 8
  %conv112 = trunc i64 %105 to i32
  %106 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp113 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %106, i32 0, i32 1
  %107 = load i8*, i8** %precomp113, align 8
  %108 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp114 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %108, i32 0, i32 1
  %109 = load i8*, i8** %precomp114, align 8
  %110 = load i64, i64* %offset106, align 8
  %add.ptr115 = getelementptr inbounds i8, i8* %109, i64 %110
  call void (i32, i8*, ...) @Perl_warner(i32 5122, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.21, i32 0, i32 0), i32 %conv112, i8* %107, i8* %add.ptr115)
  br label %if.end.116

if.end.116:                                       ; preds = %if.then.105, %land.lhs.true.101, %lor.lhs.false.97, %sw.bb.71
  br label %sw.bb.117

sw.bb.117:                                        ; preds = %if.then.5, %if.end.116
  store i32 1, i32* %logical, align 4
  %111 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse118 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %111, i32 0, i32 5
  %112 = load i8*, i8** %parse118, align 8
  %113 = load i8, i8* %112, align 1
  %conv119 = sext i8 %113 to i32
  %cmp120 = icmp ne i32 %conv119, 123
  br i1 %cmp120, label %if.then.122, label %if.end.123

if.then.122:                                      ; preds = %sw.bb.117
  br label %unknown

if.end.123:                                       ; preds = %sw.bb.117
  %114 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse124 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %114, i32 0, i32 5
  %115 = load i8*, i8** %parse124, align 8
  %incdec.ptr125 = getelementptr inbounds i8, i8* %115, i32 1
  store i8* %incdec.ptr125, i8** %parse124, align 8
  %116 = load i8, i8* %115, align 1
  %conv126 = sext i8 %116 to i32
  store i32 %conv126, i32* %paren.addr, align 4
  br label %sw.bb.127

sw.bb.127:                                        ; preds = %if.then.5, %if.end.123
  store i32 1, i32* %count, align 4
  store i32 0, i32* %n, align 4
  %117 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse129 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %117, i32 0, i32 5
  %118 = load i8*, i8** %parse129, align 8
  store i8* %118, i8** %s, align 8
  %119 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen_zerolen130 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %119, i32 0, i32 15
  %120 = load i32, i32* %seen_zerolen130, align 4
  %inc131 = add nsw i32 %120, 1
  store i32 %inc131, i32* %seen_zerolen130, align 4
  %121 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen132 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %121, i32 0, i32 11
  %122 = load i32, i32* %seen132, align 4
  %or133 = or i32 %122, 8
  store i32 %or133, i32* %seen132, align 4
  br label %while.cond.134

while.cond.134:                                   ; preds = %if.end.165, %sw.bb.127
  %123 = load i32, i32* %count, align 4
  %tobool135 = icmp ne i32 %123, 0
  br i1 %tobool135, label %land.rhs.136, label %land.end.140

land.rhs.136:                                     ; preds = %while.cond.134
  %124 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse137 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %124, i32 0, i32 5
  %125 = load i8*, i8** %parse137, align 8
  %126 = load i8, i8* %125, align 1
  store i8 %126, i8* %c128, align 1
  %conv138 = sext i8 %126 to i32
  %tobool139 = icmp ne i32 %conv138, 0
  br label %land.end.140

land.end.140:                                     ; preds = %land.rhs.136, %while.cond.134
  %127 = phi i1 [ false, %while.cond.134 ], [ %tobool139, %land.rhs.136 ]
  br i1 %127, label %while.body.141, label %while.end.168

while.body.141:                                   ; preds = %land.end.140
  %128 = load i8, i8* %c128, align 1
  %conv142 = sext i8 %128 to i32
  %cmp143 = icmp eq i32 %conv142, 92
  br i1 %cmp143, label %land.lhs.true.145, label %if.else

land.lhs.true.145:                                ; preds = %while.body.141
  %129 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse146 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %129, i32 0, i32 5
  %130 = load i8*, i8** %parse146, align 8
  %arrayidx147 = getelementptr inbounds i8, i8* %130, i64 1
  %131 = load i8, i8* %arrayidx147, align 1
  %conv148 = sext i8 %131 to i32
  %tobool149 = icmp ne i32 %conv148, 0
  br i1 %tobool149, label %if.then.150, label %if.else

if.then.150:                                      ; preds = %land.lhs.true.145
  %132 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse151 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %132, i32 0, i32 5
  %133 = load i8*, i8** %parse151, align 8
  %incdec.ptr152 = getelementptr inbounds i8, i8* %133, i32 1
  store i8* %incdec.ptr152, i8** %parse151, align 8
  br label %if.end.165

if.else:                                          ; preds = %land.lhs.true.145, %while.body.141
  %134 = load i8, i8* %c128, align 1
  %conv153 = sext i8 %134 to i32
  %cmp154 = icmp eq i32 %conv153, 123
  br i1 %cmp154, label %if.then.156, label %if.else.158

if.then.156:                                      ; preds = %if.else
  %135 = load i32, i32* %count, align 4
  %inc157 = add nsw i32 %135, 1
  store i32 %inc157, i32* %count, align 4
  br label %if.end.164

if.else.158:                                      ; preds = %if.else
  %136 = load i8, i8* %c128, align 1
  %conv159 = sext i8 %136 to i32
  %cmp160 = icmp eq i32 %conv159, 125
  br i1 %cmp160, label %if.then.162, label %if.end.163

if.then.162:                                      ; preds = %if.else.158
  %137 = load i32, i32* %count, align 4
  %dec = add nsw i32 %137, -1
  store i32 %dec, i32* %count, align 4
  br label %if.end.163

if.end.163:                                       ; preds = %if.then.162, %if.else.158
  br label %if.end.164

if.end.164:                                       ; preds = %if.end.163, %if.then.156
  br label %if.end.165

if.end.165:                                       ; preds = %if.end.164, %if.then.150
  %138 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse166 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %138, i32 0, i32 5
  %139 = load i8*, i8** %parse166, align 8
  %incdec.ptr167 = getelementptr inbounds i8, i8* %139, i32 1
  store i8* %incdec.ptr167, i8** %parse166, align 8
  br label %while.cond.134

while.end.168:                                    ; preds = %land.end.140
  %140 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse169 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %140, i32 0, i32 5
  %141 = load i8*, i8** %parse169, align 8
  %142 = load i8, i8* %141, align 1
  %conv170 = sext i8 %142 to i32
  %cmp171 = icmp ne i32 %conv170, 41
  br i1 %cmp171, label %if.then.173, label %if.end.191

if.then.173:                                      ; preds = %while.end.168
  %143 = load i8*, i8** %s, align 8
  %144 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse174 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %144, i32 0, i32 5
  store i8* %143, i8** %parse174, align 8
  %145 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit175 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %145, i32 0, i32 8
  %146 = load %struct.regnode*, %struct.regnode** %emit175, align 8
  %cmp176 = icmp eq %struct.regnode* %146, @PL_regdummy
  br i1 %cmp176, label %if.end.180, label %if.then.178

if.then.178:                                      ; preds = %if.then.173
  %147 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx179 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %147, i32 0, i32 2
  %148 = load %struct.regexp*, %struct.regexp** %rx179, align 8
  %149 = bitcast %struct.regexp* %148 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %149)
  br label %if.end.180

if.end.180:                                       ; preds = %if.then.178, %if.then.173
  %150 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse182 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %150, i32 0, i32 5
  %151 = load i8*, i8** %parse182, align 8
  %152 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp183 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %152, i32 0, i32 1
  %153 = load i8*, i8** %precomp183, align 8
  %sub.ptr.lhs.cast184 = ptrtoint i8* %151 to i64
  %sub.ptr.rhs.cast185 = ptrtoint i8* %153 to i64
  %sub.ptr.sub186 = sub i64 %sub.ptr.lhs.cast184, %sub.ptr.rhs.cast185
  store i64 %sub.ptr.sub186, i64* %offset181, align 8
  %154 = load i64, i64* %offset181, align 8
  %conv187 = trunc i64 %154 to i32
  %155 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp188 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %155, i32 0, i32 1
  %156 = load i8*, i8** %precomp188, align 8
  %157 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp189 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %157, i32 0, i32 1
  %158 = load i8*, i8** %precomp189, align 8
  %159 = load i64, i64* %offset181, align 8
  %add.ptr190 = getelementptr inbounds i8, i8* %158, i64 %159
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.22, i32 0, i32 0), i32 %conv187, i8* %156, i8* %add.ptr190)
  br label %if.end.191

if.end.191:                                       ; preds = %if.end.180, %while.end.168
  %160 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit192 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %160, i32 0, i32 8
  %161 = load %struct.regnode*, %struct.regnode** %emit192, align 8
  %cmp193 = icmp eq %struct.regnode* %161, @PL_regdummy
  br i1 %cmp193, label %if.else.231, label %if.then.195

if.then.195:                                      ; preds = %if.end.191
  %162 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse196 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %162, i32 0, i32 5
  %163 = load i8*, i8** %parse196, align 8
  %add.ptr197 = getelementptr inbounds i8, i8* %163, i64 -1
  %164 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast198 = ptrtoint i8* %add.ptr197 to i64
  %sub.ptr.rhs.cast199 = ptrtoint i8* %164 to i64
  %sub.ptr.sub200 = sub i64 %sub.ptr.lhs.cast198, %sub.ptr.rhs.cast199
  %tobool201 = icmp ne i64 %sub.ptr.sub200, 0
  br i1 %tobool201, label %if.then.202, label %if.else.209

if.then.202:                                      ; preds = %if.then.195
  %165 = load i8*, i8** %s, align 8
  %166 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse203 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %166, i32 0, i32 5
  %167 = load i8*, i8** %parse203, align 8
  %add.ptr204 = getelementptr inbounds i8, i8* %167, i64 -1
  %168 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast205 = ptrtoint i8* %add.ptr204 to i64
  %sub.ptr.rhs.cast206 = ptrtoint i8* %168 to i64
  %sub.ptr.sub207 = sub i64 %sub.ptr.lhs.cast205, %sub.ptr.rhs.cast206
  %call208 = call %struct.sv* @Perl_newSVpvn(i8* %165, i64 %sub.ptr.sub207)
  store %struct.sv* %call208, %struct.sv** %sv, align 8
  br label %if.end.211

if.else.209:                                      ; preds = %if.then.195
  %call210 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i64 0)
  store %struct.sv* %call210, %struct.sv** %sv, align 8
  br label %if.end.211

if.end.211:                                       ; preds = %if.else.209, %if.then.202
  call void @Perl_push_scope()
  call void @Perl_save_re_context()
  %169 = load %struct.sv*, %struct.sv** %sv, align 8
  %call212 = call %struct.op* @Perl_sv_compile_2op(%struct.sv* %169, %struct.op** %sop, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23, i32 0, i32 0), %struct.av** %pad)
  store %struct.op* %call212, %struct.op** %rop, align 8
  %170 = load %struct.op*, %struct.op** %sop, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %170, i32 0, i32 7
  %171 = load i8, i8* %op_private, align 1
  %conv213 = zext i8 %171 to i32
  %or214 = or i32 %conv213, 64
  %conv215 = trunc i32 %or214 to i8
  store i8 %conv215, i8* %op_private, align 1
  %172 = load %struct.op*, %struct.op** %sop, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %172, i32 0, i32 3
  store i64 1, i64* %op_targ, align 8
  call void @Perl_pop_scope()
  %173 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call216 = call i32 @S_add_data(%struct.RExC_state_t* %173, i32 3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.24, i32 0, i32 0))
  store i32 %call216, i32* %n, align 4
  %174 = load %struct.op*, %struct.op** %rop, align 8
  %175 = bitcast %struct.op* %174 to i8*
  %176 = load i32, i32* %n, align 4
  %idxprom = sext i32 %176 to i64
  %177 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx217 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %177, i32 0, i32 2
  %178 = load %struct.regexp*, %struct.regexp** %rx217, align 8
  %data = getelementptr inbounds %struct.regexp, %struct.regexp* %178, i32 0, i32 5
  %179 = load %struct.reg_data*, %struct.reg_data** %data, align 8
  %data218 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %179, i32 0, i32 2
  %arrayidx219 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data218, i32 0, i64 %idxprom
  store i8* %175, i8** %arrayidx219, align 8
  %180 = load %struct.op*, %struct.op** %sop, align 8
  %181 = bitcast %struct.op* %180 to i8*
  %182 = load i32, i32* %n, align 4
  %add = add nsw i32 %182, 1
  %idxprom220 = sext i32 %add to i64
  %183 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx221 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %183, i32 0, i32 2
  %184 = load %struct.regexp*, %struct.regexp** %rx221, align 8
  %data222 = getelementptr inbounds %struct.regexp, %struct.regexp* %184, i32 0, i32 5
  %185 = load %struct.reg_data*, %struct.reg_data** %data222, align 8
  %data223 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %185, i32 0, i32 2
  %arrayidx224 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data223, i32 0, i64 %idxprom220
  store i8* %181, i8** %arrayidx224, align 8
  %186 = load %struct.av*, %struct.av** %pad, align 8
  %187 = bitcast %struct.av* %186 to i8*
  %188 = load i32, i32* %n, align 4
  %add225 = add nsw i32 %188, 2
  %idxprom226 = sext i32 %add225 to i64
  %189 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx227 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %189, i32 0, i32 2
  %190 = load %struct.regexp*, %struct.regexp** %rx227, align 8
  %data228 = getelementptr inbounds %struct.regexp, %struct.regexp* %190, i32 0, i32 5
  %191 = load %struct.reg_data*, %struct.reg_data** %data228, align 8
  %data229 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %191, i32 0, i32 2
  %arrayidx230 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data229, i32 0, i64 %idxprom226
  store i8* %187, i8** %arrayidx230, align 8
  %192 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_free(%struct.sv* %192)
  br label %if.end.285

if.else.231:                                      ; preds = %if.end.191
  %193 = load i32, i32* @PL_reginterp_cnt, align 4
  %194 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen_evals = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %194, i32 0, i32 16
  %195 = load i32, i32* %seen_evals, align 4
  %inc232 = add nsw i32 %195, 1
  store i32 %inc232, i32* %seen_evals, align 4
  %cmp233 = icmp slt i32 %193, %inc232
  br i1 %cmp233, label %land.lhs.true.235, label %if.end.258

land.lhs.true.235:                                ; preds = %if.else.231
  %196 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cmp236 = icmp ne %struct.cop* %196, @PL_compiling
  br i1 %cmp236, label %if.then.238, label %if.end.258

if.then.238:                                      ; preds = %land.lhs.true.235
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8** %ellipses239, align 8
  %197 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end241 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %197, i32 0, i32 4
  %198 = load i8*, i8** %end241, align 8
  %199 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp242 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %199, i32 0, i32 1
  %200 = load i8*, i8** %precomp242, align 8
  %sub.ptr.lhs.cast243 = ptrtoint i8* %198 to i64
  %sub.ptr.rhs.cast244 = ptrtoint i8* %200 to i64
  %sub.ptr.sub245 = sub i64 %sub.ptr.lhs.cast243, %sub.ptr.rhs.cast244
  store i64 %sub.ptr.sub245, i64* %len240, align 8
  %201 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit246 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %201, i32 0, i32 8
  %202 = load %struct.regnode*, %struct.regnode** %emit246, align 8
  %cmp247 = icmp eq %struct.regnode* %202, @PL_regdummy
  br i1 %cmp247, label %if.end.251, label %if.then.249

if.then.249:                                      ; preds = %if.then.238
  %203 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx250 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %203, i32 0, i32 2
  %204 = load %struct.regexp*, %struct.regexp** %rx250, align 8
  %205 = bitcast %struct.regexp* %204 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %205)
  br label %if.end.251

if.end.251:                                       ; preds = %if.then.249, %if.then.238
  %206 = load i64, i64* %len240, align 8
  %cmp252 = icmp sgt i64 %206, 127
  br i1 %cmp252, label %if.then.254, label %if.end.255

if.then.254:                                      ; preds = %if.end.251
  store i64 117, i64* %len240, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8** %ellipses239, align 8
  br label %if.end.255

if.end.255:                                       ; preds = %if.then.254, %if.end.251
  %207 = load i64, i64* %len240, align 8
  %conv256 = trunc i64 %207 to i32
  %208 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp257 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %208, i32 0, i32 1
  %209 = load i8*, i8** %precomp257, align 8
  %210 = load i8*, i8** %ellipses239, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.25, i32 0, i32 0), i32 %conv256, i8* %209, i8* %210)
  br label %if.end.258

if.end.258:                                       ; preds = %if.end.255, %land.lhs.true.235, %if.else.231
  %211 = load i8, i8* @PL_tainting, align 1
  %conv259 = sext i8 %211 to i32
  %tobool260 = icmp ne i32 %conv259, 0
  br i1 %tobool260, label %land.lhs.true.261, label %if.end.284

land.lhs.true.261:                                ; preds = %if.end.258
  %212 = load i8, i8* @PL_tainted, align 1
  %conv262 = sext i8 %212 to i32
  %tobool263 = icmp ne i32 %conv262, 0
  br i1 %tobool263, label %if.then.264, label %if.end.284

if.then.264:                                      ; preds = %land.lhs.true.261
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8** %ellipses265, align 8
  %213 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end267 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %213, i32 0, i32 4
  %214 = load i8*, i8** %end267, align 8
  %215 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp268 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %215, i32 0, i32 1
  %216 = load i8*, i8** %precomp268, align 8
  %sub.ptr.lhs.cast269 = ptrtoint i8* %214 to i64
  %sub.ptr.rhs.cast270 = ptrtoint i8* %216 to i64
  %sub.ptr.sub271 = sub i64 %sub.ptr.lhs.cast269, %sub.ptr.rhs.cast270
  store i64 %sub.ptr.sub271, i64* %len266, align 8
  %217 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit272 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %217, i32 0, i32 8
  %218 = load %struct.regnode*, %struct.regnode** %emit272, align 8
  %cmp273 = icmp eq %struct.regnode* %218, @PL_regdummy
  br i1 %cmp273, label %if.end.277, label %if.then.275

if.then.275:                                      ; preds = %if.then.264
  %219 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx276 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %219, i32 0, i32 2
  %220 = load %struct.regexp*, %struct.regexp** %rx276, align 8
  %221 = bitcast %struct.regexp* %220 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %221)
  br label %if.end.277

if.end.277:                                       ; preds = %if.then.275, %if.then.264
  %222 = load i64, i64* %len266, align 8
  %cmp278 = icmp sgt i64 %222, 127
  br i1 %cmp278, label %if.then.280, label %if.end.281

if.then.280:                                      ; preds = %if.end.277
  store i64 117, i64* %len266, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8** %ellipses265, align 8
  br label %if.end.281

if.end.281:                                       ; preds = %if.then.280, %if.end.277
  %223 = load i64, i64* %len266, align 8
  %conv282 = trunc i64 %223 to i32
  %224 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp283 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %224, i32 0, i32 1
  %225 = load i8*, i8** %precomp283, align 8
  %226 = load i8*, i8** %ellipses265, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26, i32 0, i32 0), i32 %conv282, i8* %225, i8* %226)
  br label %if.end.284

if.end.284:                                       ; preds = %if.end.281, %land.lhs.true.261, %if.end.258
  br label %if.end.285

if.end.285:                                       ; preds = %if.end.284, %if.end.211
  %227 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call286 = call i8* @S_nextchar(%struct.RExC_state_t* %227)
  %228 = load i32, i32* %logical, align 4
  %tobool287 = icmp ne i32 %228, 0
  br i1 %tobool287, label %if.then.288, label %if.end.297

if.then.288:                                      ; preds = %if.end.285
  %229 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call289 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %229, i8 zeroext 59)
  store %struct.regnode* %call289, %struct.regnode** %ret, align 8
  %230 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit290 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %230, i32 0, i32 8
  %231 = load %struct.regnode*, %struct.regnode** %emit290, align 8
  %cmp291 = icmp eq %struct.regnode* %231, @PL_regdummy
  br i1 %cmp291, label %if.end.295, label %if.then.293

if.then.293:                                      ; preds = %if.then.288
  %232 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags294 = getelementptr inbounds %struct.regnode, %struct.regnode* %232, i32 0, i32 0
  store i8 2, i8* %flags294, align 1
  br label %if.end.295

if.end.295:                                       ; preds = %if.then.293, %if.then.288
  %233 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %234 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %235 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %236 = load i32, i32* %n, align 4
  %call296 = call %struct.regnode* @S_reganode(%struct.RExC_state_t* %235, i8 zeroext 57, i32 %236)
  call void @S_regtail(%struct.RExC_state_t* %233, %struct.regnode* %234, %struct.regnode* %call296)
  %237 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %237, %struct.regnode** %retval
  br label %return

if.end.297:                                       ; preds = %if.end.285
  %238 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %239 = load i32, i32* %n, align 4
  %call298 = call %struct.regnode* @S_reganode(%struct.RExC_state_t* %238, i8 zeroext 57, i32 %239)
  store %struct.regnode* %call298, %struct.regnode** %ret, align 8
  %240 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit299 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %240, i32 0, i32 8
  %241 = load %struct.regnode*, %struct.regnode** %emit299, align 8
  %cmp300 = icmp eq %struct.regnode* %241, @PL_regdummy
  br i1 %cmp300, label %if.end.329, label %if.then.302

if.then.302:                                      ; preds = %if.end.297
  %242 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %243 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %243, i32 0, i32 7
  %244 = load %struct.regnode*, %struct.regnode** %emit_start, align 8
  %sub.ptr.lhs.cast303 = ptrtoint %struct.regnode* %242 to i64
  %sub.ptr.rhs.cast304 = ptrtoint %struct.regnode* %244 to i64
  %sub.ptr.sub305 = sub i64 %sub.ptr.lhs.cast303, %sub.ptr.rhs.cast304
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub305, 4
  %cmp306 = icmp slt i64 %sub.ptr.div, 0
  br i1 %cmp306, label %if.then.308, label %if.else.314

if.then.308:                                      ; preds = %if.then.302
  %245 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %246 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start309 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %246, i32 0, i32 7
  %247 = load %struct.regnode*, %struct.regnode** %emit_start309, align 8
  %sub.ptr.lhs.cast310 = ptrtoint %struct.regnode* %245 to i64
  %sub.ptr.rhs.cast311 = ptrtoint %struct.regnode* %247 to i64
  %sub.ptr.sub312 = sub i64 %sub.ptr.lhs.cast310, %sub.ptr.rhs.cast311
  %sub.ptr.div313 = sdiv exact i64 %sub.ptr.sub312, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i32 0, i32 0), i64 %sub.ptr.div313)
  br label %if.end.328

if.else.314:                                      ; preds = %if.then.302
  %248 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse315 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %248, i32 0, i32 5
  %249 = load i8*, i8** %parse315, align 8
  %250 = load i8*, i8** %parse_start, align 8
  %sub.ptr.lhs.cast316 = ptrtoint i8* %249 to i64
  %sub.ptr.rhs.cast317 = ptrtoint i8* %250 to i64
  %sub.ptr.sub318 = sub i64 %sub.ptr.lhs.cast316, %sub.ptr.rhs.cast317
  %add319 = add nsw i64 %sub.ptr.sub318, 1
  %conv320 = trunc i64 %add319 to i32
  %251 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %252 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start321 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %252, i32 0, i32 7
  %253 = load %struct.regnode*, %struct.regnode** %emit_start321, align 8
  %sub.ptr.lhs.cast322 = ptrtoint %struct.regnode* %251 to i64
  %sub.ptr.rhs.cast323 = ptrtoint %struct.regnode* %253 to i64
  %sub.ptr.sub324 = sub i64 %sub.ptr.lhs.cast322, %sub.ptr.rhs.cast323
  %sub.ptr.div325 = sdiv exact i64 %sub.ptr.sub324, 4
  %mul = mul nsw i64 2, %sub.ptr.div325
  %254 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx326 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %254, i32 0, i32 2
  %255 = load %struct.regexp*, %struct.regexp** %rx326, align 8
  %offsets = getelementptr inbounds %struct.regexp, %struct.regexp* %255, i32 0, i32 7
  %256 = load i32*, i32** %offsets, align 8
  %arrayidx327 = getelementptr inbounds i32, i32* %256, i64 %mul
  store i32 %conv320, i32* %arrayidx327, align 4
  br label %if.end.328

if.end.328:                                       ; preds = %if.else.314, %if.then.308
  br label %if.end.329

if.end.329:                                       ; preds = %if.end.328, %if.end.297
  %257 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit330 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %257, i32 0, i32 8
  %258 = load %struct.regnode*, %struct.regnode** %emit330, align 8
  %cmp331 = icmp eq %struct.regnode* %258, @PL_regdummy
  br i1 %cmp331, label %if.end.362, label %if.then.333

if.then.333:                                      ; preds = %if.end.329
  %259 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %260 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start334 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %260, i32 0, i32 7
  %261 = load %struct.regnode*, %struct.regnode** %emit_start334, align 8
  %sub.ptr.lhs.cast335 = ptrtoint %struct.regnode* %259 to i64
  %sub.ptr.rhs.cast336 = ptrtoint %struct.regnode* %261 to i64
  %sub.ptr.sub337 = sub i64 %sub.ptr.lhs.cast335, %sub.ptr.rhs.cast336
  %sub.ptr.div338 = sdiv exact i64 %sub.ptr.sub337, 4
  %cmp339 = icmp slt i64 %sub.ptr.div338, 0
  br i1 %cmp339, label %if.then.341, label %if.else.347

if.then.341:                                      ; preds = %if.then.333
  %262 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %263 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start342 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %263, i32 0, i32 7
  %264 = load %struct.regnode*, %struct.regnode** %emit_start342, align 8
  %sub.ptr.lhs.cast343 = ptrtoint %struct.regnode* %262 to i64
  %sub.ptr.rhs.cast344 = ptrtoint %struct.regnode* %264 to i64
  %sub.ptr.sub345 = sub i64 %sub.ptr.lhs.cast343, %sub.ptr.rhs.cast344
  %sub.ptr.div346 = sdiv exact i64 %sub.ptr.sub345, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.28, i32 0, i32 0), i64 %sub.ptr.div346)
  br label %if.end.361

if.else.347:                                      ; preds = %if.then.333
  %265 = load i8*, i8** %parse_start, align 8
  %266 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %start = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %266, i32 0, i32 3
  %267 = load i8*, i8** %start, align 8
  %sub.ptr.lhs.cast348 = ptrtoint i8* %265 to i64
  %sub.ptr.rhs.cast349 = ptrtoint i8* %267 to i64
  %sub.ptr.sub350 = sub i64 %sub.ptr.lhs.cast348, %sub.ptr.rhs.cast349
  %conv351 = trunc i64 %sub.ptr.sub350 to i32
  %268 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %269 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start352 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %269, i32 0, i32 7
  %270 = load %struct.regnode*, %struct.regnode** %emit_start352, align 8
  %sub.ptr.lhs.cast353 = ptrtoint %struct.regnode* %268 to i64
  %sub.ptr.rhs.cast354 = ptrtoint %struct.regnode* %270 to i64
  %sub.ptr.sub355 = sub i64 %sub.ptr.lhs.cast353, %sub.ptr.rhs.cast354
  %sub.ptr.div356 = sdiv exact i64 %sub.ptr.sub355, 4
  %mul357 = mul nsw i64 2, %sub.ptr.div356
  %sub = sub nsw i64 %mul357, 1
  %271 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx358 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %271, i32 0, i32 2
  %272 = load %struct.regexp*, %struct.regexp** %rx358, align 8
  %offsets359 = getelementptr inbounds %struct.regexp, %struct.regexp* %272, i32 0, i32 7
  %273 = load i32*, i32** %offsets359, align 8
  %arrayidx360 = getelementptr inbounds i32, i32* %273, i64 %sub
  store i32 %conv351, i32* %arrayidx360, align 4
  br label %if.end.361

if.end.361:                                       ; preds = %if.else.347, %if.then.341
  br label %if.end.362

if.end.362:                                       ; preds = %if.end.361, %if.end.329
  %274 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %274, %struct.regnode** %retval
  br label %return

sw.bb.363:                                        ; preds = %if.then.5
  %275 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse364 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %275, i32 0, i32 5
  %276 = load i8*, i8** %parse364, align 8
  %arrayidx365 = getelementptr inbounds i8, i8* %276, i64 0
  %277 = load i8, i8* %arrayidx365, align 1
  %conv366 = sext i8 %277 to i32
  %cmp367 = icmp eq i32 %conv366, 63
  br i1 %cmp367, label %if.then.369, label %if.else.403

if.then.369:                                      ; preds = %sw.bb.363
  %278 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse370 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %278, i32 0, i32 5
  %279 = load i8*, i8** %parse370, align 8
  %arrayidx371 = getelementptr inbounds i8, i8* %279, i64 1
  %280 = load i8, i8* %arrayidx371, align 1
  %conv372 = sext i8 %280 to i32
  %cmp373 = icmp eq i32 %conv372, 61
  br i1 %cmp373, label %if.then.393, label %lor.lhs.false.375

lor.lhs.false.375:                                ; preds = %if.then.369
  %281 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse376 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %281, i32 0, i32 5
  %282 = load i8*, i8** %parse376, align 8
  %arrayidx377 = getelementptr inbounds i8, i8* %282, i64 1
  %283 = load i8, i8* %arrayidx377, align 1
  %conv378 = sext i8 %283 to i32
  %cmp379 = icmp eq i32 %conv378, 33
  br i1 %cmp379, label %if.then.393, label %lor.lhs.false.381

lor.lhs.false.381:                                ; preds = %lor.lhs.false.375
  %284 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse382 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %284, i32 0, i32 5
  %285 = load i8*, i8** %parse382, align 8
  %arrayidx383 = getelementptr inbounds i8, i8* %285, i64 1
  %286 = load i8, i8* %arrayidx383, align 1
  %conv384 = sext i8 %286 to i32
  %cmp385 = icmp eq i32 %conv384, 60
  br i1 %cmp385, label %if.then.393, label %lor.lhs.false.387

lor.lhs.false.387:                                ; preds = %lor.lhs.false.381
  %287 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse388 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %287, i32 0, i32 5
  %288 = load i8*, i8** %parse388, align 8
  %arrayidx389 = getelementptr inbounds i8, i8* %288, i64 1
  %289 = load i8, i8* %arrayidx389, align 1
  %conv390 = sext i8 %289 to i32
  %cmp391 = icmp eq i32 %conv390, 123
  br i1 %cmp391, label %if.then.393, label %if.end.402

if.then.393:                                      ; preds = %lor.lhs.false.387, %lor.lhs.false.381, %lor.lhs.false.375, %if.then.369
  %290 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call394 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %290, i8 zeroext 59)
  store %struct.regnode* %call394, %struct.regnode** %ret, align 8
  %291 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit395 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %291, i32 0, i32 8
  %292 = load %struct.regnode*, %struct.regnode** %emit395, align 8
  %cmp396 = icmp eq %struct.regnode* %292, @PL_regdummy
  br i1 %cmp396, label %if.end.400, label %if.then.398

if.then.398:                                      ; preds = %if.then.393
  %293 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags399 = getelementptr inbounds %struct.regnode, %struct.regnode* %293, i32 0, i32 0
  store i8 1, i8* %flags399, align 1
  br label %if.end.400

if.end.400:                                       ; preds = %if.then.398, %if.then.393
  %294 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %295 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %296 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call401 = call %struct.regnode* @S_reg(%struct.RExC_state_t* %296, i32 1, i32* %flag)
  call void @S_regtail(%struct.RExC_state_t* %294, %struct.regnode* %295, %struct.regnode* %call401)
  br label %insert_if

if.end.402:                                       ; preds = %lor.lhs.false.387
  br label %if.end.533

if.else.403:                                      ; preds = %sw.bb.363
  %297 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse404 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %297, i32 0, i32 5
  %298 = load i8*, i8** %parse404, align 8
  %arrayidx405 = getelementptr inbounds i8, i8* %298, i64 0
  %299 = load i8, i8* %arrayidx405, align 1
  %conv406 = sext i8 %299 to i32
  %cmp407 = icmp sge i32 %conv406, 49
  br i1 %cmp407, label %land.lhs.true.409, label %if.else.514

land.lhs.true.409:                                ; preds = %if.else.403
  %300 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse410 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %300, i32 0, i32 5
  %301 = load i8*, i8** %parse410, align 8
  %arrayidx411 = getelementptr inbounds i8, i8* %301, i64 0
  %302 = load i8, i8* %arrayidx411, align 1
  %conv412 = sext i8 %302 to i32
  %cmp413 = icmp sle i32 %conv412, 57
  br i1 %cmp413, label %if.then.415, label %if.else.514

if.then.415:                                      ; preds = %land.lhs.true.409
  %303 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse416 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %303, i32 0, i32 5
  %304 = load i8*, i8** %parse416, align 8
  %incdec.ptr417 = getelementptr inbounds i8, i8* %304, i32 1
  store i8* %incdec.ptr417, i8** %parse416, align 8
  %call418 = call i32 @atoi(i8* %304)
  store i32 %call418, i32* %parno, align 4
  br label %while.cond.419

while.cond.419:                                   ; preds = %while.body.430, %if.then.415
  %305 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse420 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %305, i32 0, i32 5
  %306 = load i8*, i8** %parse420, align 8
  %307 = load i8, i8* %306, align 1
  %conv421 = sext i8 %307 to i32
  %cmp422 = icmp sge i32 %conv421, 48
  br i1 %cmp422, label %land.rhs.424, label %land.end.429

land.rhs.424:                                     ; preds = %while.cond.419
  %308 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse425 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %308, i32 0, i32 5
  %309 = load i8*, i8** %parse425, align 8
  %310 = load i8, i8* %309, align 1
  %conv426 = sext i8 %310 to i32
  %cmp427 = icmp sle i32 %conv426, 57
  br label %land.end.429

land.end.429:                                     ; preds = %land.rhs.424, %while.cond.419
  %311 = phi i1 [ false, %while.cond.419 ], [ %cmp427, %land.rhs.424 ]
  br i1 %311, label %while.body.430, label %while.end.433

while.body.430:                                   ; preds = %land.end.429
  %312 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse431 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %312, i32 0, i32 5
  %313 = load i8*, i8** %parse431, align 8
  %incdec.ptr432 = getelementptr inbounds i8, i8* %313, i32 1
  store i8* %incdec.ptr432, i8** %parse431, align 8
  br label %while.cond.419

while.end.433:                                    ; preds = %land.end.429
  %314 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %315 = load i32, i32* %parno, align 4
  %call434 = call %struct.regnode* @S_reganode(%struct.RExC_state_t* %314, i8 zeroext 54, i32 %315)
  store %struct.regnode* %call434, %struct.regnode** %ret, align 8
  %316 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call435 = call i8* @S_nextchar(%struct.RExC_state_t* %316)
  %317 = load i8, i8* %call435, align 1
  store i8 %317, i8* %c, align 1
  %conv436 = sext i8 %317 to i32
  %cmp437 = icmp ne i32 %conv436, 41
  br i1 %cmp437, label %if.then.439, label %if.end.456

if.then.439:                                      ; preds = %while.end.433
  %318 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit440 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %318, i32 0, i32 8
  %319 = load %struct.regnode*, %struct.regnode** %emit440, align 8
  %cmp441 = icmp eq %struct.regnode* %319, @PL_regdummy
  br i1 %cmp441, label %if.end.445, label %if.then.443

if.then.443:                                      ; preds = %if.then.439
  %320 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx444 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %320, i32 0, i32 2
  %321 = load %struct.regexp*, %struct.regexp** %rx444, align 8
  %322 = bitcast %struct.regexp* %321 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %322)
  br label %if.end.445

if.end.445:                                       ; preds = %if.then.443, %if.then.439
  %323 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse447 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %323, i32 0, i32 5
  %324 = load i8*, i8** %parse447, align 8
  %325 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp448 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %325, i32 0, i32 1
  %326 = load i8*, i8** %precomp448, align 8
  %sub.ptr.lhs.cast449 = ptrtoint i8* %324 to i64
  %sub.ptr.rhs.cast450 = ptrtoint i8* %326 to i64
  %sub.ptr.sub451 = sub i64 %sub.ptr.lhs.cast449, %sub.ptr.rhs.cast450
  store i64 %sub.ptr.sub451, i64* %offset446, align 8
  %327 = load i64, i64* %offset446, align 8
  %conv452 = trunc i64 %327 to i32
  %328 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp453 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %328, i32 0, i32 1
  %329 = load i8*, i8** %precomp453, align 8
  %330 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp454 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %330, i32 0, i32 1
  %331 = load i8*, i8** %precomp454, align 8
  %332 = load i64, i64* %offset446, align 8
  %add.ptr455 = getelementptr inbounds i8, i8* %331, i64 %332
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.29, i32 0, i32 0), i32 %conv452, i8* %329, i8* %add.ptr455)
  br label %if.end.456

if.end.456:                                       ; preds = %if.end.445, %while.end.433
  br label %insert_if

insert_if:                                        ; preds = %if.end.456, %if.end.400
  %333 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %334 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %335 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call457 = call %struct.regnode* @S_reganode(%struct.RExC_state_t* %335, i8 zeroext 53, i32 0)
  call void @S_regtail(%struct.RExC_state_t* %333, %struct.regnode* %334, %struct.regnode* %call457)
  %336 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call458 = call %struct.regnode* @S_regbranch(%struct.RExC_state_t* %336, i32* %flags, i32 1)
  store %struct.regnode* %call458, %struct.regnode** %br, align 8
  %337 = load %struct.regnode*, %struct.regnode** %br, align 8
  %cmp459 = icmp eq %struct.regnode* %337, null
  br i1 %cmp459, label %if.then.461, label %if.else.463

if.then.461:                                      ; preds = %insert_if
  %338 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call462 = call %struct.regnode* @S_reganode(%struct.RExC_state_t* %338, i8 zeroext 55, i32 0)
  store %struct.regnode* %call462, %struct.regnode** %br, align 8
  br label %if.end.465

if.else.463:                                      ; preds = %insert_if
  %339 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %340 = load %struct.regnode*, %struct.regnode** %br, align 8
  %341 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call464 = call %struct.regnode* @S_reganode(%struct.RExC_state_t* %341, i8 zeroext 55, i32 0)
  call void @S_regtail(%struct.RExC_state_t* %339, %struct.regnode* %340, %struct.regnode* %call464)
  br label %if.end.465

if.end.465:                                       ; preds = %if.else.463, %if.then.461
  %342 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call466 = call i8* @S_nextchar(%struct.RExC_state_t* %342)
  %343 = load i8, i8* %call466, align 1
  store i8 %343, i8* %c, align 1
  %344 = load i32, i32* %flags, align 4
  %and467 = and i32 %344, 1
  %tobool468 = icmp ne i32 %and467, 0
  br i1 %tobool468, label %if.then.469, label %if.end.471

if.then.469:                                      ; preds = %if.end.465
  %345 = load i32*, i32** %flagp.addr, align 8
  %346 = load i32, i32* %345, align 4
  %or470 = or i32 %346, 1
  store i32 %or470, i32* %345, align 4
  br label %if.end.471

if.end.471:                                       ; preds = %if.then.469, %if.end.465
  %347 = load i8, i8* %c, align 1
  %conv472 = sext i8 %347 to i32
  %cmp473 = icmp eq i32 %conv472, 124
  br i1 %cmp473, label %if.then.475, label %if.else.484

if.then.475:                                      ; preds = %if.end.471
  %348 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call476 = call %struct.regnode* @S_reganode(%struct.RExC_state_t* %348, i8 zeroext 53, i32 0)
  store %struct.regnode* %call476, %struct.regnode** %lastbr, align 8
  %349 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call477 = call %struct.regnode* @S_regbranch(%struct.RExC_state_t* %349, i32* %flags, i32 1)
  %350 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %351 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %352 = load %struct.regnode*, %struct.regnode** %lastbr, align 8
  call void @S_regtail(%struct.RExC_state_t* %350, %struct.regnode* %351, %struct.regnode* %352)
  %353 = load i32, i32* %flags, align 4
  %and478 = and i32 %353, 1
  %tobool479 = icmp ne i32 %and478, 0
  br i1 %tobool479, label %if.then.480, label %if.end.482

if.then.480:                                      ; preds = %if.then.475
  %354 = load i32*, i32** %flagp.addr, align 8
  %355 = load i32, i32* %354, align 4
  %or481 = or i32 %355, 1
  store i32 %or481, i32* %354, align 4
  br label %if.end.482

if.end.482:                                       ; preds = %if.then.480, %if.then.475
  %356 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call483 = call i8* @S_nextchar(%struct.RExC_state_t* %356)
  %357 = load i8, i8* %call483, align 1
  store i8 %357, i8* %c, align 1
  br label %if.end.485

if.else.484:                                      ; preds = %if.end.471
  store %struct.regnode* null, %struct.regnode** %lastbr, align 8
  br label %if.end.485

if.end.485:                                       ; preds = %if.else.484, %if.end.482
  %358 = load i8, i8* %c, align 1
  %conv486 = sext i8 %358 to i32
  %cmp487 = icmp ne i32 %conv486, 41
  br i1 %cmp487, label %if.then.489, label %if.end.506

if.then.489:                                      ; preds = %if.end.485
  %359 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit490 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %359, i32 0, i32 8
  %360 = load %struct.regnode*, %struct.regnode** %emit490, align 8
  %cmp491 = icmp eq %struct.regnode* %360, @PL_regdummy
  br i1 %cmp491, label %if.end.495, label %if.then.493

if.then.493:                                      ; preds = %if.then.489
  %361 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx494 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %361, i32 0, i32 2
  %362 = load %struct.regexp*, %struct.regexp** %rx494, align 8
  %363 = bitcast %struct.regexp* %362 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %363)
  br label %if.end.495

if.end.495:                                       ; preds = %if.then.493, %if.then.489
  %364 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse497 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %364, i32 0, i32 5
  %365 = load i8*, i8** %parse497, align 8
  %366 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp498 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %366, i32 0, i32 1
  %367 = load i8*, i8** %precomp498, align 8
  %sub.ptr.lhs.cast499 = ptrtoint i8* %365 to i64
  %sub.ptr.rhs.cast500 = ptrtoint i8* %367 to i64
  %sub.ptr.sub501 = sub i64 %sub.ptr.lhs.cast499, %sub.ptr.rhs.cast500
  store i64 %sub.ptr.sub501, i64* %offset496, align 8
  %368 = load i64, i64* %offset496, align 8
  %conv502 = trunc i64 %368 to i32
  %369 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp503 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %369, i32 0, i32 1
  %370 = load i8*, i8** %precomp503, align 8
  %371 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp504 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %371, i32 0, i32 1
  %372 = load i8*, i8** %precomp504, align 8
  %373 = load i64, i64* %offset496, align 8
  %add.ptr505 = getelementptr inbounds i8, i8* %372, i64 %373
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.30, i32 0, i32 0), i32 %conv502, i8* %370, i8* %add.ptr505)
  br label %if.end.506

if.end.506:                                       ; preds = %if.end.495, %if.end.485
  %374 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call507 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %374, i8 zeroext 37)
  store %struct.regnode* %call507, %struct.regnode** %ender, align 8
  %375 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %376 = load %struct.regnode*, %struct.regnode** %br, align 8
  %377 = load %struct.regnode*, %struct.regnode** %ender, align 8
  call void @S_regtail(%struct.RExC_state_t* %375, %struct.regnode* %376, %struct.regnode* %377)
  %378 = load %struct.regnode*, %struct.regnode** %lastbr, align 8
  %tobool508 = icmp ne %struct.regnode* %378, null
  br i1 %tobool508, label %if.then.509, label %if.else.512

if.then.509:                                      ; preds = %if.end.506
  %379 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %380 = load %struct.regnode*, %struct.regnode** %lastbr, align 8
  %381 = load %struct.regnode*, %struct.regnode** %ender, align 8
  call void @S_regtail(%struct.RExC_state_t* %379, %struct.regnode* %380, %struct.regnode* %381)
  %382 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %383 = load %struct.regnode*, %struct.regnode** %lastbr, align 8
  %add.ptr510 = getelementptr inbounds %struct.regnode, %struct.regnode* %383, i64 1
  %add.ptr511 = getelementptr inbounds %struct.regnode, %struct.regnode* %add.ptr510, i64 1
  %384 = load %struct.regnode*, %struct.regnode** %ender, align 8
  call void @S_regtail(%struct.RExC_state_t* %382, %struct.regnode* %add.ptr511, %struct.regnode* %384)
  br label %if.end.513

if.else.512:                                      ; preds = %if.end.506
  %385 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %386 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %387 = load %struct.regnode*, %struct.regnode** %ender, align 8
  call void @S_regtail(%struct.RExC_state_t* %385, %struct.regnode* %386, %struct.regnode* %387)
  br label %if.end.513

if.end.513:                                       ; preds = %if.else.512, %if.then.509
  %388 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %388, %struct.regnode** %retval
  br label %return

if.else.514:                                      ; preds = %land.lhs.true.409, %if.else.403
  %389 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit515 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %389, i32 0, i32 8
  %390 = load %struct.regnode*, %struct.regnode** %emit515, align 8
  %cmp516 = icmp eq %struct.regnode* %390, @PL_regdummy
  br i1 %cmp516, label %if.end.520, label %if.then.518

if.then.518:                                      ; preds = %if.else.514
  %391 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx519 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %391, i32 0, i32 2
  %392 = load %struct.regexp*, %struct.regexp** %rx519, align 8
  %393 = bitcast %struct.regexp* %392 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %393)
  br label %if.end.520

if.end.520:                                       ; preds = %if.then.518, %if.else.514
  %394 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse522 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %394, i32 0, i32 5
  %395 = load i8*, i8** %parse522, align 8
  %396 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp523 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %396, i32 0, i32 1
  %397 = load i8*, i8** %precomp523, align 8
  %sub.ptr.lhs.cast524 = ptrtoint i8* %395 to i64
  %sub.ptr.rhs.cast525 = ptrtoint i8* %397 to i64
  %sub.ptr.sub526 = sub i64 %sub.ptr.lhs.cast524, %sub.ptr.rhs.cast525
  store i64 %sub.ptr.sub526, i64* %offset521, align 8
  %398 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse527 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %398, i32 0, i32 5
  %399 = load i8*, i8** %parse527, align 8
  %400 = load i64, i64* %offset521, align 8
  %conv528 = trunc i64 %400 to i32
  %401 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp529 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %401, i32 0, i32 1
  %402 = load i8*, i8** %precomp529, align 8
  %403 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp530 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %403, i32 0, i32 1
  %404 = load i8*, i8** %precomp530, align 8
  %405 = load i64, i64* %offset521, align 8
  %add.ptr531 = getelementptr inbounds i8, i8* %404, i64 %405
  call void (i8*, i8*, ...) @S_re_croak2(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.16, i32 0, i32 0), i8* %399, i32 %conv528, i8* %402, i8* %add.ptr531)
  br label %if.end.532

if.end.532:                                       ; preds = %if.end.520
  br label %if.end.533

if.end.533:                                       ; preds = %if.end.532, %if.end.402
  br label %sw.bb.534

sw.bb.534:                                        ; preds = %if.then.5, %if.end.533
  %406 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse535 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %406, i32 0, i32 5
  %407 = load i8*, i8** %parse535, align 8
  %incdec.ptr536 = getelementptr inbounds i8, i8* %407, i32 -1
  store i8* %incdec.ptr536, i8** %parse535, align 8
  %408 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit537 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %408, i32 0, i32 8
  %409 = load %struct.regnode*, %struct.regnode** %emit537, align 8
  %cmp538 = icmp eq %struct.regnode* %409, @PL_regdummy
  br i1 %cmp538, label %if.end.542, label %if.then.540

if.then.540:                                      ; preds = %sw.bb.534
  %410 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx541 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %410, i32 0, i32 2
  %411 = load %struct.regexp*, %struct.regexp** %rx541, align 8
  %412 = bitcast %struct.regexp* %411 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %412)
  br label %if.end.542

if.end.542:                                       ; preds = %if.then.540, %sw.bb.534
  %413 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse544 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %413, i32 0, i32 5
  %414 = load i8*, i8** %parse544, align 8
  %415 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp545 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %415, i32 0, i32 1
  %416 = load i8*, i8** %precomp545, align 8
  %sub.ptr.lhs.cast546 = ptrtoint i8* %414 to i64
  %sub.ptr.rhs.cast547 = ptrtoint i8* %416 to i64
  %sub.ptr.sub548 = sub i64 %sub.ptr.lhs.cast546, %sub.ptr.rhs.cast547
  store i64 %sub.ptr.sub548, i64* %offset543, align 8
  %417 = load i64, i64* %offset543, align 8
  %conv549 = trunc i64 %417 to i32
  %418 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp550 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %418, i32 0, i32 1
  %419 = load i8*, i8** %precomp550, align 8
  %420 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp551 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %420, i32 0, i32 1
  %421 = load i8*, i8** %precomp551, align 8
  %422 = load i64, i64* %offset543, align 8
  %add.ptr552 = getelementptr inbounds i8, i8* %421, i64 %422
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.32, i32 0, i32 0), i32 %conv549, i8* %419, i8* %add.ptr552)
  br label %sw.epilog

sw.default:                                       ; preds = %if.then.5
  %423 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse553 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %423, i32 0, i32 5
  %424 = load i8*, i8** %parse553, align 8
  %incdec.ptr554 = getelementptr inbounds i8, i8* %424, i32 -1
  store i8* %incdec.ptr554, i8** %parse553, align 8
  br label %parse_flags

parse_flags:                                      ; preds = %if.then.712, %sw.default
  br label %while.cond.555

while.cond.555:                                   ; preds = %if.end.704, %parse_flags
  %425 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse556 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %425, i32 0, i32 5
  %426 = load i8*, i8** %parse556, align 8
  %427 = load i8, i8* %426, align 1
  %conv557 = sext i8 %427 to i32
  %tobool558 = icmp ne i32 %conv557, 0
  br i1 %tobool558, label %land.rhs.559, label %land.end.564

land.rhs.559:                                     ; preds = %while.cond.555
  %428 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse560 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %428, i32 0, i32 5
  %429 = load i8*, i8** %parse560, align 8
  %430 = load i8, i8* %429, align 1
  %conv561 = sext i8 %430 to i32
  %call562 = call i8* @strchr(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.33, i32 0, i32 0), i32 %conv561)
  %tobool563 = icmp ne i8* %call562, null
  br label %land.end.564

land.end.564:                                     ; preds = %land.rhs.559, %while.cond.555
  %431 = phi i1 [ false, %while.cond.555 ], [ %tobool563, %land.rhs.559 ]
  br i1 %431, label %while.body.565, label %while.end.707

while.body.565:                                   ; preds = %land.end.564
  %432 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse566 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %432, i32 0, i32 5
  %433 = load i8*, i8** %parse566, align 8
  %434 = load i8, i8* %433, align 1
  %conv567 = sext i8 %434 to i32
  %cmp568 = icmp eq i32 %conv567, 111
  br i1 %cmp568, label %if.then.575, label %lor.lhs.false.570

lor.lhs.false.570:                                ; preds = %while.body.565
  %435 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse571 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %435, i32 0, i32 5
  %436 = load i8*, i8** %parse571, align 8
  %437 = load i8, i8* %436, align 1
  %conv572 = sext i8 %437 to i32
  %cmp573 = icmp eq i32 %conv572, 103
  br i1 %cmp573, label %if.then.575, label %if.else.639

if.then.575:                                      ; preds = %lor.lhs.false.570, %while.body.565
  %438 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit576 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %438, i32 0, i32 8
  %439 = load %struct.regnode*, %struct.regnode** %emit576, align 8
  %cmp577 = icmp eq %struct.regnode* %439, @PL_regdummy
  br i1 %cmp577, label %land.lhs.true.579, label %if.end.638

land.lhs.true.579:                                ; preds = %if.then.575
  %440 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings580 = getelementptr inbounds %struct.cop, %struct.cop* %440, i32 0, i32 14
  %441 = load %struct.sv*, %struct.sv** %cop_warnings580, align 8
  %cmp581 = icmp ne %struct.sv* %441, null
  br i1 %cmp581, label %land.lhs.true.583, label %lor.lhs.false.599

land.lhs.true.583:                                ; preds = %land.lhs.true.579
  %442 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings584 = getelementptr inbounds %struct.cop, %struct.cop* %442, i32 0, i32 14
  %443 = load %struct.sv*, %struct.sv** %cop_warnings584, align 8
  %cmp585 = icmp ne %struct.sv* %443, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp585, label %land.lhs.true.587, label %lor.lhs.false.599

land.lhs.true.587:                                ; preds = %land.lhs.true.583
  %444 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings588 = getelementptr inbounds %struct.cop, %struct.cop* %444, i32 0, i32 14
  %445 = load %struct.sv*, %struct.sv** %cop_warnings588, align 8
  %cmp589 = icmp eq %struct.sv* %445, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp589, label %if.then.607, label %lor.lhs.false.591

lor.lhs.false.591:                                ; preds = %land.lhs.true.587
  %446 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings592 = getelementptr inbounds %struct.cop, %struct.cop* %446, i32 0, i32 14
  %447 = load %struct.sv*, %struct.sv** %cop_warnings592, align 8
  %sv_any593 = getelementptr inbounds %struct.sv, %struct.sv* %447, i32 0, i32 0
  %448 = load i8*, i8** %sv_any593, align 8
  %449 = bitcast i8* %448 to %struct.xpv*
  %xpv_pv594 = getelementptr inbounds %struct.xpv, %struct.xpv* %449, i32 0, i32 0
  %450 = load i8*, i8** %xpv_pv594, align 8
  %arrayidx595 = getelementptr inbounds i8, i8* %450, i64 5
  %451 = load i8, i8* %arrayidx595, align 1
  %conv596 = sext i8 %451 to i32
  %and597 = and i32 %conv596, 1
  %tobool598 = icmp ne i32 %and597, 0
  br i1 %tobool598, label %if.then.607, label %lor.lhs.false.599

lor.lhs.false.599:                                ; preds = %lor.lhs.false.591, %land.lhs.true.583, %land.lhs.true.579
  %452 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings600 = getelementptr inbounds %struct.cop, %struct.cop* %452, i32 0, i32 14
  %453 = load %struct.sv*, %struct.sv** %cop_warnings600, align 8
  %cmp601 = icmp eq %struct.sv* %453, null
  br i1 %cmp601, label %land.lhs.true.603, label %if.end.638

land.lhs.true.603:                                ; preds = %lor.lhs.false.599
  %454 = load i8, i8* @PL_dowarn, align 1
  %conv604 = zext i8 %454 to i32
  %and605 = and i32 %conv604, 1
  %tobool606 = icmp ne i32 %and605, 0
  br i1 %tobool606, label %if.then.607, label %if.end.638

if.then.607:                                      ; preds = %land.lhs.true.603, %lor.lhs.false.591, %land.lhs.true.587
  %455 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse608 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %455, i32 0, i32 5
  %456 = load i8*, i8** %parse608, align 8
  %457 = load i8, i8* %456, align 1
  %conv609 = sext i8 %457 to i32
  %cmp610 = icmp eq i32 %conv609, 111
  br i1 %cmp610, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.607
  %458 = load i32, i32* %wasted_o, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then.607
  %459 = load i32, i32* %wasted_g, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %458, %cond.true ], [ %459, %cond.false ]
  store i32 %cond, i32* %wflagbit, align 4
  %460 = load i32, i32* %wastedflags, align 4
  %461 = load i32, i32* %wflagbit, align 4
  %and612 = and i32 %460, %461
  %tobool613 = icmp ne i32 %and612, 0
  br i1 %tobool613, label %if.end.637, label %if.then.614

if.then.614:                                      ; preds = %cond.end
  %462 = load i32, i32* %wflagbit, align 4
  %463 = load i32, i32* %wastedflags, align 4
  %or615 = or i32 %463, %462
  store i32 %or615, i32* %wastedflags, align 4
  %464 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse617 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %464, i32 0, i32 5
  %465 = load i8*, i8** %parse617, align 8
  %add.ptr618 = getelementptr inbounds i8, i8* %465, i64 1
  %466 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp619 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %466, i32 0, i32 1
  %467 = load i8*, i8** %precomp619, align 8
  %sub.ptr.lhs.cast620 = ptrtoint i8* %add.ptr618 to i64
  %sub.ptr.rhs.cast621 = ptrtoint i8* %467 to i64
  %sub.ptr.sub622 = sub i64 %sub.ptr.lhs.cast620, %sub.ptr.rhs.cast621
  store i64 %sub.ptr.sub622, i64* %offset616, align 8
  %468 = load i32*, i32** %flagsp, align 8
  %cmp623 = icmp eq i32* %468, %negflags
  %cond625 = select i1 %cmp623, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i32 0, i32 0)
  %469 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse626 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %469, i32 0, i32 5
  %470 = load i8*, i8** %parse626, align 8
  %471 = load i8, i8* %470, align 1
  %conv627 = sext i8 %471 to i32
  %472 = load i32*, i32** %flagsp, align 8
  %cmp628 = icmp eq i32* %472, %negflags
  %cond630 = select i1 %cmp628, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0)
  %473 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse631 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %473, i32 0, i32 5
  %474 = load i8*, i8** %parse631, align 8
  %475 = load i8, i8* %474, align 1
  %conv632 = sext i8 %475 to i32
  %476 = load i64, i64* %offset616, align 8
  %conv633 = trunc i64 %476 to i32
  %477 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp634 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %477, i32 0, i32 1
  %478 = load i8*, i8** %precomp634, align 8
  %479 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp635 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %479, i32 0, i32 1
  %480 = load i8*, i8** %precomp635, align 8
  %481 = load i64, i64* %offset616, align 8
  %add.ptr636 = getelementptr inbounds i8, i8* %480, i64 %481
  call void (i32, i8*, ...) @Perl_warner(i32 20, i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.34, i32 0, i32 0), i8* %cond625, i32 %conv627, i8* %cond630, i32 %conv632, i32 %conv633, i8* %478, i8* %add.ptr636)
  br label %if.end.637

if.end.637:                                       ; preds = %if.then.614, %cond.end
  br label %if.end.638

if.end.638:                                       ; preds = %if.end.637, %land.lhs.true.603, %lor.lhs.false.599, %if.then.575
  br label %if.end.704

if.else.639:                                      ; preds = %lor.lhs.false.570
  %482 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse640 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %482, i32 0, i32 5
  %483 = load i8*, i8** %parse640, align 8
  %484 = load i8, i8* %483, align 1
  %conv641 = sext i8 %484 to i32
  %cmp642 = icmp eq i32 %conv641, 99
  br i1 %cmp642, label %if.then.644, label %if.else.700

if.then.644:                                      ; preds = %if.else.639
  %485 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit645 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %485, i32 0, i32 8
  %486 = load %struct.regnode*, %struct.regnode** %emit645, align 8
  %cmp646 = icmp eq %struct.regnode* %486, @PL_regdummy
  br i1 %cmp646, label %land.lhs.true.648, label %if.end.699

land.lhs.true.648:                                ; preds = %if.then.644
  %487 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings649 = getelementptr inbounds %struct.cop, %struct.cop* %487, i32 0, i32 14
  %488 = load %struct.sv*, %struct.sv** %cop_warnings649, align 8
  %cmp650 = icmp ne %struct.sv* %488, null
  br i1 %cmp650, label %land.lhs.true.652, label %lor.lhs.false.668

land.lhs.true.652:                                ; preds = %land.lhs.true.648
  %489 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings653 = getelementptr inbounds %struct.cop, %struct.cop* %489, i32 0, i32 14
  %490 = load %struct.sv*, %struct.sv** %cop_warnings653, align 8
  %cmp654 = icmp ne %struct.sv* %490, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp654, label %land.lhs.true.656, label %lor.lhs.false.668

land.lhs.true.656:                                ; preds = %land.lhs.true.652
  %491 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings657 = getelementptr inbounds %struct.cop, %struct.cop* %491, i32 0, i32 14
  %492 = load %struct.sv*, %struct.sv** %cop_warnings657, align 8
  %cmp658 = icmp eq %struct.sv* %492, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp658, label %if.then.676, label %lor.lhs.false.660

lor.lhs.false.660:                                ; preds = %land.lhs.true.656
  %493 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings661 = getelementptr inbounds %struct.cop, %struct.cop* %493, i32 0, i32 14
  %494 = load %struct.sv*, %struct.sv** %cop_warnings661, align 8
  %sv_any662 = getelementptr inbounds %struct.sv, %struct.sv* %494, i32 0, i32 0
  %495 = load i8*, i8** %sv_any662, align 8
  %496 = bitcast i8* %495 to %struct.xpv*
  %xpv_pv663 = getelementptr inbounds %struct.xpv, %struct.xpv* %496, i32 0, i32 0
  %497 = load i8*, i8** %xpv_pv663, align 8
  %arrayidx664 = getelementptr inbounds i8, i8* %497, i64 5
  %498 = load i8, i8* %arrayidx664, align 1
  %conv665 = sext i8 %498 to i32
  %and666 = and i32 %conv665, 1
  %tobool667 = icmp ne i32 %and666, 0
  br i1 %tobool667, label %if.then.676, label %lor.lhs.false.668

lor.lhs.false.668:                                ; preds = %lor.lhs.false.660, %land.lhs.true.652, %land.lhs.true.648
  %499 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings669 = getelementptr inbounds %struct.cop, %struct.cop* %499, i32 0, i32 14
  %500 = load %struct.sv*, %struct.sv** %cop_warnings669, align 8
  %cmp670 = icmp eq %struct.sv* %500, null
  br i1 %cmp670, label %land.lhs.true.672, label %if.end.699

land.lhs.true.672:                                ; preds = %lor.lhs.false.668
  %501 = load i8, i8* @PL_dowarn, align 1
  %conv673 = zext i8 %501 to i32
  %and674 = and i32 %conv673, 1
  %tobool675 = icmp ne i32 %and674, 0
  br i1 %tobool675, label %if.then.676, label %if.end.699

if.then.676:                                      ; preds = %land.lhs.true.672, %lor.lhs.false.660, %land.lhs.true.656
  %502 = load i32, i32* %wastedflags, align 4
  %503 = load i32, i32* %wasted_c, align 4
  %and677 = and i32 %502, %503
  %tobool678 = icmp ne i32 %and677, 0
  br i1 %tobool678, label %if.end.698, label %if.then.679

if.then.679:                                      ; preds = %if.then.676
  %504 = load i32, i32* %wasted_gc, align 4
  %505 = load i32, i32* %wastedflags, align 4
  %or680 = or i32 %505, %504
  store i32 %or680, i32* %wastedflags, align 4
  %506 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse682 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %506, i32 0, i32 5
  %507 = load i8*, i8** %parse682, align 8
  %add.ptr683 = getelementptr inbounds i8, i8* %507, i64 1
  %508 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp684 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %508, i32 0, i32 1
  %509 = load i8*, i8** %precomp684, align 8
  %sub.ptr.lhs.cast685 = ptrtoint i8* %add.ptr683 to i64
  %sub.ptr.rhs.cast686 = ptrtoint i8* %509 to i64
  %sub.ptr.sub687 = sub i64 %sub.ptr.lhs.cast685, %sub.ptr.rhs.cast686
  store i64 %sub.ptr.sub687, i64* %offset681, align 8
  %510 = load i32*, i32** %flagsp, align 8
  %cmp688 = icmp eq i32* %510, %negflags
  %cond690 = select i1 %cmp688, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i32 0, i32 0)
  %511 = load i32*, i32** %flagsp, align 8
  %cmp691 = icmp eq i32* %511, %negflags
  %cond693 = select i1 %cmp691, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0)
  %512 = load i64, i64* %offset681, align 8
  %conv694 = trunc i64 %512 to i32
  %513 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp695 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %513, i32 0, i32 1
  %514 = load i8*, i8** %precomp695, align 8
  %515 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp696 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %515, i32 0, i32 1
  %516 = load i8*, i8** %precomp696, align 8
  %517 = load i64, i64* %offset681, align 8
  %add.ptr697 = getelementptr inbounds i8, i8* %516, i64 %517
  call void (i32, i8*, ...) @Perl_warner(i32 20, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @.str.38, i32 0, i32 0), i8* %cond690, i8* %cond693, i32 %conv694, i8* %514, i8* %add.ptr697)
  br label %if.end.698

if.end.698:                                       ; preds = %if.then.679, %if.then.676
  br label %if.end.699

if.end.699:                                       ; preds = %if.end.698, %land.lhs.true.672, %lor.lhs.false.668, %if.then.644
  br label %if.end.703

if.else.700:                                      ; preds = %if.else.639
  %518 = load i32*, i32** %flagsp, align 8
  %519 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse701 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %519, i32 0, i32 5
  %520 = load i8*, i8** %parse701, align 8
  %521 = load i8, i8* %520, align 1
  %conv702 = sext i8 %521 to i32
  call void @Perl_pmflag(i32* %518, i32 %conv702)
  br label %if.end.703

if.end.703:                                       ; preds = %if.else.700, %if.end.699
  br label %if.end.704

if.end.704:                                       ; preds = %if.end.703, %if.end.638
  %522 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse705 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %522, i32 0, i32 5
  %523 = load i8*, i8** %parse705, align 8
  %incdec.ptr706 = getelementptr inbounds i8, i8* %523, i32 1
  store i8* %incdec.ptr706, i8** %parse705, align 8
  br label %while.cond.555

while.end.707:                                    ; preds = %land.end.564
  %524 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse708 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %524, i32 0, i32 5
  %525 = load i8*, i8** %parse708, align 8
  %526 = load i8, i8* %525, align 1
  %conv709 = sext i8 %526 to i32
  %cmp710 = icmp eq i32 %conv709, 45
  br i1 %cmp710, label %if.then.712, label %if.end.715

if.then.712:                                      ; preds = %while.end.707
  store i32* %negflags, i32** %flagsp, align 8
  store i32 0, i32* %wastedflags, align 4
  %527 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse713 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %527, i32 0, i32 5
  %528 = load i8*, i8** %parse713, align 8
  %incdec.ptr714 = getelementptr inbounds i8, i8* %528, i32 1
  store i8* %incdec.ptr714, i8** %parse713, align 8
  br label %parse_flags

if.end.715:                                       ; preds = %while.end.707
  %529 = load i32, i32* %posflags, align 4
  %530 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags716 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %530, i32 0, i32 0
  %531 = load i32, i32* %flags716, align 4
  %or717 = or i32 %531, %529
  store i32 %or717, i32* %flags716, align 4
  %532 = load i32, i32* %negflags, align 4
  %neg = xor i32 %532, -1
  %533 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags718 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %533, i32 0, i32 0
  %534 = load i32, i32* %flags718, align 4
  %and719 = and i32 %534, %neg
  store i32 %and719, i32* %flags718, align 4
  %535 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse720 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %535, i32 0, i32 5
  %536 = load i8*, i8** %parse720, align 8
  %537 = load i8, i8* %536, align 1
  %conv721 = sext i8 %537 to i32
  %cmp722 = icmp eq i32 %conv721, 58
  br i1 %cmp722, label %if.then.724, label %if.end.727

if.then.724:                                      ; preds = %if.end.715
  %538 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse725 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %538, i32 0, i32 5
  %539 = load i8*, i8** %parse725, align 8
  %incdec.ptr726 = getelementptr inbounds i8, i8* %539, i32 1
  store i8* %incdec.ptr726, i8** %parse725, align 8
  store i32 58, i32* %paren.addr, align 4
  br label %sw.epilog

if.end.727:                                       ; preds = %if.end.715
  br label %unknown

unknown:                                          ; preds = %if.end.727, %if.then.122, %if.then.24
  %540 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse728 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %540, i32 0, i32 5
  %541 = load i8*, i8** %parse728, align 8
  %542 = load i8, i8* %541, align 1
  %conv729 = sext i8 %542 to i32
  %cmp730 = icmp ne i32 %conv729, 41
  br i1 %cmp730, label %if.then.732, label %if.end.755

if.then.732:                                      ; preds = %unknown
  %543 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse733 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %543, i32 0, i32 5
  %544 = load i8*, i8** %parse733, align 8
  %incdec.ptr734 = getelementptr inbounds i8, i8* %544, i32 1
  store i8* %incdec.ptr734, i8** %parse733, align 8
  %545 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit735 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %545, i32 0, i32 8
  %546 = load %struct.regnode*, %struct.regnode** %emit735, align 8
  %cmp736 = icmp eq %struct.regnode* %546, @PL_regdummy
  br i1 %cmp736, label %if.end.740, label %if.then.738

if.then.738:                                      ; preds = %if.then.732
  %547 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx739 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %547, i32 0, i32 2
  %548 = load %struct.regexp*, %struct.regexp** %rx739, align 8
  %549 = bitcast %struct.regexp* %548 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %549)
  br label %if.end.740

if.end.740:                                       ; preds = %if.then.738, %if.then.732
  %550 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse742 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %550, i32 0, i32 5
  %551 = load i8*, i8** %parse742, align 8
  %552 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp743 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %552, i32 0, i32 1
  %553 = load i8*, i8** %precomp743, align 8
  %sub.ptr.lhs.cast744 = ptrtoint i8* %551 to i64
  %sub.ptr.rhs.cast745 = ptrtoint i8* %553 to i64
  %sub.ptr.sub746 = sub i64 %sub.ptr.lhs.cast744, %sub.ptr.rhs.cast745
  store i64 %sub.ptr.sub746, i64* %offset741, align 8
  %554 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse747 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %554, i32 0, i32 5
  %555 = load i8*, i8** %parse747, align 8
  %556 = load i8*, i8** %seqstart, align 8
  %sub.ptr.lhs.cast748 = ptrtoint i8* %555 to i64
  %sub.ptr.rhs.cast749 = ptrtoint i8* %556 to i64
  %sub.ptr.sub750 = sub i64 %sub.ptr.lhs.cast748, %sub.ptr.rhs.cast749
  %557 = load i8*, i8** %seqstart, align 8
  %558 = load i64, i64* %offset741, align 8
  %conv751 = trunc i64 %558 to i32
  %559 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp752 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %559, i32 0, i32 1
  %560 = load i8*, i8** %precomp752, align 8
  %561 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp753 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %561, i32 0, i32 1
  %562 = load i8*, i8** %precomp753, align 8
  %563 = load i64, i64* %offset741, align 8
  %add.ptr754 = getelementptr inbounds i8, i8* %562, i64 %563
  call void (i8*, i8*, ...) @S_re_croak2(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.16, i32 0, i32 0), i64 %sub.ptr.sub750, i8* %557, i32 %conv751, i8* %560, i8* %add.ptr754)
  br label %if.end.755

if.end.755:                                       ; preds = %if.end.740, %unknown
  %564 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call756 = call i8* @S_nextchar(%struct.RExC_state_t* %564)
  %565 = load i32*, i32** %flagp.addr, align 8
  store i32 8, i32* %565, align 4
  store %struct.regnode* null, %struct.regnode** %retval
  br label %return

sw.epilog:                                        ; preds = %if.then.724, %if.end.542, %if.end.34, %sw.bb.29
  br label %if.end.826

if.else.757:                                      ; preds = %if.then
  %566 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %npar = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %566, i32 0, i32 13
  %567 = load i32, i32* %npar, align 4
  store i32 %567, i32* %parno, align 4
  %568 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %npar758 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %568, i32 0, i32 13
  %569 = load i32, i32* %npar758, align 4
  %inc759 = add nsw i32 %569, 1
  store i32 %inc759, i32* %npar758, align 4
  %570 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %571 = load i32, i32* %parno, align 4
  %call760 = call %struct.regnode* @S_reganode(%struct.RExC_state_t* %570, i8 zeroext 45, i32 %571)
  store %struct.regnode* %call760, %struct.regnode** %ret, align 8
  %572 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit761 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %572, i32 0, i32 8
  %573 = load %struct.regnode*, %struct.regnode** %emit761, align 8
  %cmp762 = icmp eq %struct.regnode* %573, @PL_regdummy
  br i1 %cmp762, label %if.end.789, label %if.then.764

if.then.764:                                      ; preds = %if.else.757
  %574 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %575 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start765 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %575, i32 0, i32 7
  %576 = load %struct.regnode*, %struct.regnode** %emit_start765, align 8
  %sub.ptr.lhs.cast766 = ptrtoint %struct.regnode* %574 to i64
  %sub.ptr.rhs.cast767 = ptrtoint %struct.regnode* %576 to i64
  %sub.ptr.sub768 = sub i64 %sub.ptr.lhs.cast766, %sub.ptr.rhs.cast767
  %sub.ptr.div769 = sdiv exact i64 %sub.ptr.sub768, 4
  %cmp770 = icmp slt i64 %sub.ptr.div769, 0
  br i1 %cmp770, label %if.then.772, label %if.else.778

if.then.772:                                      ; preds = %if.then.764
  %577 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %578 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start773 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %578, i32 0, i32 7
  %579 = load %struct.regnode*, %struct.regnode** %emit_start773, align 8
  %sub.ptr.lhs.cast774 = ptrtoint %struct.regnode* %577 to i64
  %sub.ptr.rhs.cast775 = ptrtoint %struct.regnode* %579 to i64
  %sub.ptr.sub776 = sub i64 %sub.ptr.lhs.cast774, %sub.ptr.rhs.cast775
  %sub.ptr.div777 = sdiv exact i64 %sub.ptr.sub776, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i32 0, i32 0), i64 %sub.ptr.div777)
  br label %if.end.788

if.else.778:                                      ; preds = %if.then.764
  %580 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %581 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start779 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %581, i32 0, i32 7
  %582 = load %struct.regnode*, %struct.regnode** %emit_start779, align 8
  %sub.ptr.lhs.cast780 = ptrtoint %struct.regnode* %580 to i64
  %sub.ptr.rhs.cast781 = ptrtoint %struct.regnode* %582 to i64
  %sub.ptr.sub782 = sub i64 %sub.ptr.lhs.cast780, %sub.ptr.rhs.cast781
  %sub.ptr.div783 = sdiv exact i64 %sub.ptr.sub782, 4
  %mul784 = mul nsw i64 2, %sub.ptr.div783
  %583 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx785 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %583, i32 0, i32 2
  %584 = load %struct.regexp*, %struct.regexp** %rx785, align 8
  %offsets786 = getelementptr inbounds %struct.regexp, %struct.regexp* %584, i32 0, i32 7
  %585 = load i32*, i32** %offsets786, align 8
  %arrayidx787 = getelementptr inbounds i32, i32* %585, i64 %mul784
  store i32 1, i32* %arrayidx787, align 4
  br label %if.end.788

if.end.788:                                       ; preds = %if.else.778, %if.then.772
  br label %if.end.789

if.end.789:                                       ; preds = %if.end.788, %if.else.757
  %586 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit790 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %586, i32 0, i32 8
  %587 = load %struct.regnode*, %struct.regnode** %emit790, align 8
  %cmp791 = icmp eq %struct.regnode* %587, @PL_regdummy
  br i1 %cmp791, label %if.end.825, label %if.then.793

if.then.793:                                      ; preds = %if.end.789
  %588 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %589 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start794 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %589, i32 0, i32 7
  %590 = load %struct.regnode*, %struct.regnode** %emit_start794, align 8
  %sub.ptr.lhs.cast795 = ptrtoint %struct.regnode* %588 to i64
  %sub.ptr.rhs.cast796 = ptrtoint %struct.regnode* %590 to i64
  %sub.ptr.sub797 = sub i64 %sub.ptr.lhs.cast795, %sub.ptr.rhs.cast796
  %sub.ptr.div798 = sdiv exact i64 %sub.ptr.sub797, 4
  %cmp799 = icmp slt i64 %sub.ptr.div798, 0
  br i1 %cmp799, label %if.then.801, label %if.else.807

if.then.801:                                      ; preds = %if.then.793
  %591 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %592 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start802 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %592, i32 0, i32 7
  %593 = load %struct.regnode*, %struct.regnode** %emit_start802, align 8
  %sub.ptr.lhs.cast803 = ptrtoint %struct.regnode* %591 to i64
  %sub.ptr.rhs.cast804 = ptrtoint %struct.regnode* %593 to i64
  %sub.ptr.sub805 = sub i64 %sub.ptr.lhs.cast803, %sub.ptr.rhs.cast804
  %sub.ptr.div806 = sdiv exact i64 %sub.ptr.sub805, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.28, i32 0, i32 0), i64 %sub.ptr.div806)
  br label %if.end.824

if.else.807:                                      ; preds = %if.then.793
  %594 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse808 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %594, i32 0, i32 5
  %595 = load i8*, i8** %parse808, align 8
  %596 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %start809 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %596, i32 0, i32 3
  %597 = load i8*, i8** %start809, align 8
  %sub.ptr.lhs.cast810 = ptrtoint i8* %595 to i64
  %sub.ptr.rhs.cast811 = ptrtoint i8* %597 to i64
  %sub.ptr.sub812 = sub i64 %sub.ptr.lhs.cast810, %sub.ptr.rhs.cast811
  %conv813 = trunc i64 %sub.ptr.sub812 to i32
  %598 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %599 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start814 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %599, i32 0, i32 7
  %600 = load %struct.regnode*, %struct.regnode** %emit_start814, align 8
  %sub.ptr.lhs.cast815 = ptrtoint %struct.regnode* %598 to i64
  %sub.ptr.rhs.cast816 = ptrtoint %struct.regnode* %600 to i64
  %sub.ptr.sub817 = sub i64 %sub.ptr.lhs.cast815, %sub.ptr.rhs.cast816
  %sub.ptr.div818 = sdiv exact i64 %sub.ptr.sub817, 4
  %mul819 = mul nsw i64 2, %sub.ptr.div818
  %sub820 = sub nsw i64 %mul819, 1
  %601 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx821 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %601, i32 0, i32 2
  %602 = load %struct.regexp*, %struct.regexp** %rx821, align 8
  %offsets822 = getelementptr inbounds %struct.regexp, %struct.regexp* %602, i32 0, i32 7
  %603 = load i32*, i32** %offsets822, align 8
  %arrayidx823 = getelementptr inbounds i32, i32* %603, i64 %sub820
  store i32 %conv813, i32* %arrayidx823, align 4
  br label %if.end.824

if.end.824:                                       ; preds = %if.else.807, %if.then.801
  br label %if.end.825

if.end.825:                                       ; preds = %if.end.824, %if.end.789
  store i32 1, i32* %open, align 4
  br label %if.end.826

if.end.826:                                       ; preds = %if.end.825, %sw.epilog
  br label %if.end.828

if.else.827:                                      ; preds = %entry
  store %struct.regnode* null, %struct.regnode** %ret, align 8
  br label %if.end.828

if.end.828:                                       ; preds = %if.else.827, %if.end.826
  %604 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse829 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %604, i32 0, i32 5
  %605 = load i8*, i8** %parse829, align 8
  store i8* %605, i8** %parse_start, align 8
  %606 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call830 = call %struct.regnode* @S_regbranch(%struct.RExC_state_t* %606, i32* %flags, i32 1)
  store %struct.regnode* %call830, %struct.regnode** %br, align 8
  %607 = load %struct.regnode*, %struct.regnode** %br, align 8
  %cmp831 = icmp eq %struct.regnode* %607, null
  br i1 %cmp831, label %if.then.833, label %if.end.834

if.then.833:                                      ; preds = %if.end.828
  store %struct.regnode* null, %struct.regnode** %retval
  br label %return

if.end.834:                                       ; preds = %if.end.828
  %608 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse835 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %608, i32 0, i32 5
  %609 = load i8*, i8** %parse835, align 8
  %610 = load i8, i8* %609, align 1
  %conv836 = sext i8 %610 to i32
  %cmp837 = icmp eq i32 %conv836, 124
  br i1 %cmp837, label %if.then.839, label %if.else.921

if.then.839:                                      ; preds = %if.end.834
  %611 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit840 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %611, i32 0, i32 8
  %612 = load %struct.regnode*, %struct.regnode** %emit840, align 8
  %cmp841 = icmp eq %struct.regnode* %612, @PL_regdummy
  br i1 %cmp841, label %if.else.846, label %land.lhs.true.843

land.lhs.true.843:                                ; preds = %if.then.839
  %613 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %extralen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %613, i32 0, i32 14
  %614 = load i32, i32* %extralen, align 4
  %tobool844 = icmp ne i32 %614, 0
  br i1 %tobool844, label %if.then.845, label %if.else.846

if.then.845:                                      ; preds = %land.lhs.true.843
  %615 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %616 = load %struct.regnode*, %struct.regnode** %br, align 8
  call void @S_reginsert(%struct.RExC_state_t* %615, i8 zeroext 56, %struct.regnode* %616)
  br label %if.end.913

if.else.846:                                      ; preds = %land.lhs.true.843, %if.then.839
  %617 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %618 = load %struct.regnode*, %struct.regnode** %br, align 8
  call void @S_reginsert(%struct.RExC_state_t* %617, i8 zeroext 31, %struct.regnode* %618)
  %619 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit847 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %619, i32 0, i32 8
  %620 = load %struct.regnode*, %struct.regnode** %emit847, align 8
  %cmp848 = icmp eq %struct.regnode* %620, @PL_regdummy
  br i1 %cmp848, label %if.end.877, label %if.then.850

if.then.850:                                      ; preds = %if.else.846
  %621 = load %struct.regnode*, %struct.regnode** %br, align 8
  %622 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start851 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %622, i32 0, i32 7
  %623 = load %struct.regnode*, %struct.regnode** %emit_start851, align 8
  %sub.ptr.lhs.cast852 = ptrtoint %struct.regnode* %621 to i64
  %sub.ptr.rhs.cast853 = ptrtoint %struct.regnode* %623 to i64
  %sub.ptr.sub854 = sub i64 %sub.ptr.lhs.cast852, %sub.ptr.rhs.cast853
  %sub.ptr.div855 = sdiv exact i64 %sub.ptr.sub854, 4
  %cmp856 = icmp slt i64 %sub.ptr.div855, 0
  br i1 %cmp856, label %if.then.858, label %if.else.864

if.then.858:                                      ; preds = %if.then.850
  %624 = load %struct.regnode*, %struct.regnode** %br, align 8
  %625 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start859 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %625, i32 0, i32 7
  %626 = load %struct.regnode*, %struct.regnode** %emit_start859, align 8
  %sub.ptr.lhs.cast860 = ptrtoint %struct.regnode* %624 to i64
  %sub.ptr.rhs.cast861 = ptrtoint %struct.regnode* %626 to i64
  %sub.ptr.sub862 = sub i64 %sub.ptr.lhs.cast860, %sub.ptr.rhs.cast861
  %sub.ptr.div863 = sdiv exact i64 %sub.ptr.sub862, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i32 0, i32 0), i64 %sub.ptr.div863)
  br label %if.end.876

if.else.864:                                      ; preds = %if.then.850
  %627 = load i32, i32* %paren.addr, align 4
  %cmp865 = icmp ne i32 %627, 0
  %conv866 = zext i1 %cmp865 to i32
  %628 = load %struct.regnode*, %struct.regnode** %br, align 8
  %629 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start867 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %629, i32 0, i32 7
  %630 = load %struct.regnode*, %struct.regnode** %emit_start867, align 8
  %sub.ptr.lhs.cast868 = ptrtoint %struct.regnode* %628 to i64
  %sub.ptr.rhs.cast869 = ptrtoint %struct.regnode* %630 to i64
  %sub.ptr.sub870 = sub i64 %sub.ptr.lhs.cast868, %sub.ptr.rhs.cast869
  %sub.ptr.div871 = sdiv exact i64 %sub.ptr.sub870, 4
  %mul872 = mul nsw i64 2, %sub.ptr.div871
  %631 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx873 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %631, i32 0, i32 2
  %632 = load %struct.regexp*, %struct.regexp** %rx873, align 8
  %offsets874 = getelementptr inbounds %struct.regexp, %struct.regexp* %632, i32 0, i32 7
  %633 = load i32*, i32** %offsets874, align 8
  %arrayidx875 = getelementptr inbounds i32, i32* %633, i64 %mul872
  store i32 %conv866, i32* %arrayidx875, align 4
  br label %if.end.876

if.end.876:                                       ; preds = %if.else.864, %if.then.858
  br label %if.end.877

if.end.877:                                       ; preds = %if.end.876, %if.else.846
  %634 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit878 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %634, i32 0, i32 8
  %635 = load %struct.regnode*, %struct.regnode** %emit878, align 8
  %cmp879 = icmp eq %struct.regnode* %635, @PL_regdummy
  br i1 %cmp879, label %if.end.912, label %if.then.881

if.then.881:                                      ; preds = %if.end.877
  %636 = load %struct.regnode*, %struct.regnode** %br, align 8
  %637 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start882 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %637, i32 0, i32 7
  %638 = load %struct.regnode*, %struct.regnode** %emit_start882, align 8
  %sub.ptr.lhs.cast883 = ptrtoint %struct.regnode* %636 to i64
  %sub.ptr.rhs.cast884 = ptrtoint %struct.regnode* %638 to i64
  %sub.ptr.sub885 = sub i64 %sub.ptr.lhs.cast883, %sub.ptr.rhs.cast884
  %sub.ptr.div886 = sdiv exact i64 %sub.ptr.sub885, 4
  %cmp887 = icmp slt i64 %sub.ptr.div886, 0
  br i1 %cmp887, label %if.then.889, label %if.else.895

if.then.889:                                      ; preds = %if.then.881
  %639 = load %struct.regnode*, %struct.regnode** %br, align 8
  %640 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start890 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %640, i32 0, i32 7
  %641 = load %struct.regnode*, %struct.regnode** %emit_start890, align 8
  %sub.ptr.lhs.cast891 = ptrtoint %struct.regnode* %639 to i64
  %sub.ptr.rhs.cast892 = ptrtoint %struct.regnode* %641 to i64
  %sub.ptr.sub893 = sub i64 %sub.ptr.lhs.cast891, %sub.ptr.rhs.cast892
  %sub.ptr.div894 = sdiv exact i64 %sub.ptr.sub893, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.28, i32 0, i32 0), i64 %sub.ptr.div894)
  br label %if.end.911

if.else.895:                                      ; preds = %if.then.881
  %642 = load i8*, i8** %parse_start, align 8
  %643 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %start896 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %643, i32 0, i32 3
  %644 = load i8*, i8** %start896, align 8
  %sub.ptr.lhs.cast897 = ptrtoint i8* %642 to i64
  %sub.ptr.rhs.cast898 = ptrtoint i8* %644 to i64
  %sub.ptr.sub899 = sub i64 %sub.ptr.lhs.cast897, %sub.ptr.rhs.cast898
  %conv900 = trunc i64 %sub.ptr.sub899 to i32
  %645 = load %struct.regnode*, %struct.regnode** %br, align 8
  %646 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start901 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %646, i32 0, i32 7
  %647 = load %struct.regnode*, %struct.regnode** %emit_start901, align 8
  %sub.ptr.lhs.cast902 = ptrtoint %struct.regnode* %645 to i64
  %sub.ptr.rhs.cast903 = ptrtoint %struct.regnode* %647 to i64
  %sub.ptr.sub904 = sub i64 %sub.ptr.lhs.cast902, %sub.ptr.rhs.cast903
  %sub.ptr.div905 = sdiv exact i64 %sub.ptr.sub904, 4
  %mul906 = mul nsw i64 2, %sub.ptr.div905
  %sub907 = sub nsw i64 %mul906, 1
  %648 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx908 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %648, i32 0, i32 2
  %649 = load %struct.regexp*, %struct.regexp** %rx908, align 8
  %offsets909 = getelementptr inbounds %struct.regexp, %struct.regexp* %649, i32 0, i32 7
  %650 = load i32*, i32** %offsets909, align 8
  %arrayidx910 = getelementptr inbounds i32, i32* %650, i64 %sub907
  store i32 %conv900, i32* %arrayidx910, align 4
  br label %if.end.911

if.end.911:                                       ; preds = %if.else.895, %if.then.889
  br label %if.end.912

if.end.912:                                       ; preds = %if.end.911, %if.end.877
  br label %if.end.913

if.end.913:                                       ; preds = %if.end.912, %if.then.845
  store i32 1, i32* %have_branch, align 4
  %651 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit914 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %651, i32 0, i32 8
  %652 = load %struct.regnode*, %struct.regnode** %emit914, align 8
  %cmp915 = icmp eq %struct.regnode* %652, @PL_regdummy
  br i1 %cmp915, label %if.then.917, label %if.end.920

if.then.917:                                      ; preds = %if.end.913
  %653 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %extralen918 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %653, i32 0, i32 14
  %654 = load i32, i32* %extralen918, align 4
  %add919 = add nsw i32 %654, 1
  store i32 %add919, i32* %extralen918, align 4
  br label %if.end.920

if.end.920:                                       ; preds = %if.then.917, %if.end.913
  br label %if.end.928

if.else.921:                                      ; preds = %if.end.834
  %655 = load i32, i32* %paren.addr, align 4
  %cmp922 = icmp eq i32 %655, 58
  br i1 %cmp922, label %if.then.924, label %if.end.927

if.then.924:                                      ; preds = %if.else.921
  %656 = load i32, i32* %flags, align 4
  %and925 = and i32 %656, 2
  %657 = load i32*, i32** %flagp.addr, align 8
  %658 = load i32, i32* %657, align 4
  %or926 = or i32 %658, %and925
  store i32 %or926, i32* %657, align 4
  br label %if.end.927

if.end.927:                                       ; preds = %if.then.924, %if.else.921
  br label %if.end.928

if.end.928:                                       ; preds = %if.end.927, %if.end.920
  %659 = load i32, i32* %open, align 4
  %tobool929 = icmp ne i32 %659, 0
  br i1 %tobool929, label %if.then.930, label %if.else.931

if.then.930:                                      ; preds = %if.end.928
  %660 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %661 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %662 = load %struct.regnode*, %struct.regnode** %br, align 8
  call void @S_regtail(%struct.RExC_state_t* %660, %struct.regnode* %661, %struct.regnode* %662)
  br label %if.end.936

if.else.931:                                      ; preds = %if.end.928
  %663 = load i32, i32* %paren.addr, align 4
  %cmp932 = icmp ne i32 %663, 63
  br i1 %cmp932, label %if.then.934, label %if.end.935

if.then.934:                                      ; preds = %if.else.931
  %664 = load %struct.regnode*, %struct.regnode** %br, align 8
  store %struct.regnode* %664, %struct.regnode** %ret, align 8
  br label %if.end.935

if.end.935:                                       ; preds = %if.then.934, %if.else.931
  br label %if.end.936

if.end.936:                                       ; preds = %if.end.935, %if.then.930
  %665 = load i32, i32* %flags, align 4
  %and937 = and i32 %665, 5
  %666 = load i32*, i32** %flagp.addr, align 8
  %667 = load i32, i32* %666, align 4
  %or938 = or i32 %667, %and937
  store i32 %or938, i32* %666, align 4
  %668 = load %struct.regnode*, %struct.regnode** %br, align 8
  store %struct.regnode* %668, %struct.regnode** %lastbr, align 8
  br label %while.cond.939

while.cond.939:                                   ; preds = %if.end.973, %if.end.936
  %669 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse940 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %669, i32 0, i32 5
  %670 = load i8*, i8** %parse940, align 8
  %671 = load i8, i8* %670, align 1
  %conv941 = sext i8 %671 to i32
  %cmp942 = icmp eq i32 %conv941, 124
  br i1 %cmp942, label %while.body.944, label %while.end.976

while.body.944:                                   ; preds = %while.cond.939
  %672 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit945 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %672, i32 0, i32 8
  %673 = load %struct.regnode*, %struct.regnode** %emit945, align 8
  %cmp946 = icmp eq %struct.regnode* %673, @PL_regdummy
  br i1 %cmp946, label %if.end.955, label %land.lhs.true.948

land.lhs.true.948:                                ; preds = %while.body.944
  %674 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %extralen949 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %674, i32 0, i32 14
  %675 = load i32, i32* %extralen949, align 4
  %tobool950 = icmp ne i32 %675, 0
  br i1 %tobool950, label %if.then.951, label %if.end.955

if.then.951:                                      ; preds = %land.lhs.true.948
  %676 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call952 = call %struct.regnode* @S_reganode(%struct.RExC_state_t* %676, i8 zeroext 55, i32 0)
  store %struct.regnode* %call952, %struct.regnode** %ender, align 8
  %677 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %678 = load %struct.regnode*, %struct.regnode** %lastbr, align 8
  %add.ptr953 = getelementptr inbounds %struct.regnode, %struct.regnode* %678, i64 1
  %add.ptr954 = getelementptr inbounds %struct.regnode, %struct.regnode* %add.ptr953, i64 1
  %679 = load %struct.regnode*, %struct.regnode** %ender, align 8
  call void @S_regtail(%struct.RExC_state_t* %677, %struct.regnode* %add.ptr954, %struct.regnode* %679)
  br label %if.end.955

if.end.955:                                       ; preds = %if.then.951, %land.lhs.true.948, %while.body.944
  %680 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit956 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %680, i32 0, i32 8
  %681 = load %struct.regnode*, %struct.regnode** %emit956, align 8
  %cmp957 = icmp eq %struct.regnode* %681, @PL_regdummy
  br i1 %cmp957, label %if.then.959, label %if.end.962

if.then.959:                                      ; preds = %if.end.955
  %682 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %extralen960 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %682, i32 0, i32 14
  %683 = load i32, i32* %extralen960, align 4
  %add961 = add nsw i32 %683, 2
  store i32 %add961, i32* %extralen960, align 4
  br label %if.end.962

if.end.962:                                       ; preds = %if.then.959, %if.end.955
  %684 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call963 = call i8* @S_nextchar(%struct.RExC_state_t* %684)
  %685 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call964 = call %struct.regnode* @S_regbranch(%struct.RExC_state_t* %685, i32* %flags, i32 0)
  store %struct.regnode* %call964, %struct.regnode** %br, align 8
  %686 = load %struct.regnode*, %struct.regnode** %br, align 8
  %cmp965 = icmp eq %struct.regnode* %686, null
  br i1 %cmp965, label %if.then.967, label %if.end.968

if.then.967:                                      ; preds = %if.end.962
  store %struct.regnode* null, %struct.regnode** %retval
  br label %return

if.end.968:                                       ; preds = %if.end.962
  %687 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %688 = load %struct.regnode*, %struct.regnode** %lastbr, align 8
  %689 = load %struct.regnode*, %struct.regnode** %br, align 8
  call void @S_regtail(%struct.RExC_state_t* %687, %struct.regnode* %688, %struct.regnode* %689)
  %690 = load %struct.regnode*, %struct.regnode** %br, align 8
  store %struct.regnode* %690, %struct.regnode** %lastbr, align 8
  %691 = load i32, i32* %flags, align 4
  %and969 = and i32 %691, 1
  %tobool970 = icmp ne i32 %and969, 0
  br i1 %tobool970, label %if.then.971, label %if.end.973

if.then.971:                                      ; preds = %if.end.968
  %692 = load i32*, i32** %flagp.addr, align 8
  %693 = load i32, i32* %692, align 4
  %or972 = or i32 %693, 1
  store i32 %or972, i32* %692, align 4
  br label %if.end.973

if.end.973:                                       ; preds = %if.then.971, %if.end.968
  %694 = load i32, i32* %flags, align 4
  %and974 = and i32 %694, 4
  %695 = load i32*, i32** %flagp.addr, align 8
  %696 = load i32, i32* %695, align 4
  %or975 = or i32 %696, %and974
  store i32 %or975, i32* %695, align 4
  br label %while.cond.939

while.end.976:                                    ; preds = %while.cond.939
  %697 = load i32, i32* %have_branch, align 4
  %tobool977 = icmp ne i32 %697, 0
  br i1 %tobool977, label %if.then.981, label %lor.lhs.false.978

lor.lhs.false.978:                                ; preds = %while.end.976
  %698 = load i32, i32* %paren.addr, align 4
  %cmp979 = icmp ne i32 %698, 58
  br i1 %cmp979, label %if.then.981, label %if.end.1065

if.then.981:                                      ; preds = %lor.lhs.false.978, %while.end.976
  %699 = load i32, i32* %paren.addr, align 4
  switch i32 %699, label %sw.epilog.1058 [
    i32 58, label %sw.bb.982
    i32 1, label %sw.bb.984
    i32 60, label %sw.bb.1052
    i32 44, label %sw.bb.1052
    i32 61, label %sw.bb.1052
    i32 33, label %sw.bb.1052
    i32 62, label %sw.bb.1054
    i32 0, label %sw.bb.1056
  ]

sw.bb.982:                                        ; preds = %if.then.981
  %700 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call983 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %700, i8 zeroext 37)
  store %struct.regnode* %call983, %struct.regnode** %ender, align 8
  br label %sw.epilog.1058

sw.bb.984:                                        ; preds = %if.then.981
  %701 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %702 = load i32, i32* %parno, align 4
  %call985 = call %struct.regnode* @S_reganode(%struct.RExC_state_t* %701, i8 zeroext 46, i32 %702)
  store %struct.regnode* %call985, %struct.regnode** %ender, align 8
  %703 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit986 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %703, i32 0, i32 8
  %704 = load %struct.regnode*, %struct.regnode** %emit986, align 8
  %cmp987 = icmp eq %struct.regnode* %704, @PL_regdummy
  br i1 %cmp987, label %if.end.1022, label %if.then.989

if.then.989:                                      ; preds = %sw.bb.984
  %705 = load %struct.regnode*, %struct.regnode** %ender, align 8
  %706 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start990 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %706, i32 0, i32 7
  %707 = load %struct.regnode*, %struct.regnode** %emit_start990, align 8
  %sub.ptr.lhs.cast991 = ptrtoint %struct.regnode* %705 to i64
  %sub.ptr.rhs.cast992 = ptrtoint %struct.regnode* %707 to i64
  %sub.ptr.sub993 = sub i64 %sub.ptr.lhs.cast991, %sub.ptr.rhs.cast992
  %sub.ptr.div994 = sdiv exact i64 %sub.ptr.sub993, 4
  %cmp995 = icmp slt i64 %sub.ptr.div994, 0
  br i1 %cmp995, label %if.then.997, label %if.else.1003

if.then.997:                                      ; preds = %if.then.989
  %708 = load %struct.regnode*, %struct.regnode** %ender, align 8
  %709 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start998 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %709, i32 0, i32 7
  %710 = load %struct.regnode*, %struct.regnode** %emit_start998, align 8
  %sub.ptr.lhs.cast999 = ptrtoint %struct.regnode* %708 to i64
  %sub.ptr.rhs.cast1000 = ptrtoint %struct.regnode* %710 to i64
  %sub.ptr.sub1001 = sub i64 %sub.ptr.lhs.cast999, %sub.ptr.rhs.cast1000
  %sub.ptr.div1002 = sdiv exact i64 %sub.ptr.sub1001, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.28, i32 0, i32 0), i64 %sub.ptr.div1002)
  br label %if.end.1021

if.else.1003:                                     ; preds = %if.then.989
  %711 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1004 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %711, i32 0, i32 5
  %712 = load i8*, i8** %parse1004, align 8
  %add.ptr1005 = getelementptr inbounds i8, i8* %712, i64 1
  %713 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %start1006 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %713, i32 0, i32 3
  %714 = load i8*, i8** %start1006, align 8
  %sub.ptr.lhs.cast1007 = ptrtoint i8* %add.ptr1005 to i64
  %sub.ptr.rhs.cast1008 = ptrtoint i8* %714 to i64
  %sub.ptr.sub1009 = sub i64 %sub.ptr.lhs.cast1007, %sub.ptr.rhs.cast1008
  %conv1010 = trunc i64 %sub.ptr.sub1009 to i32
  %715 = load %struct.regnode*, %struct.regnode** %ender, align 8
  %716 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start1011 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %716, i32 0, i32 7
  %717 = load %struct.regnode*, %struct.regnode** %emit_start1011, align 8
  %sub.ptr.lhs.cast1012 = ptrtoint %struct.regnode* %715 to i64
  %sub.ptr.rhs.cast1013 = ptrtoint %struct.regnode* %717 to i64
  %sub.ptr.sub1014 = sub i64 %sub.ptr.lhs.cast1012, %sub.ptr.rhs.cast1013
  %sub.ptr.div1015 = sdiv exact i64 %sub.ptr.sub1014, 4
  %mul1016 = mul nsw i64 2, %sub.ptr.div1015
  %sub1017 = sub nsw i64 %mul1016, 1
  %718 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx1018 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %718, i32 0, i32 2
  %719 = load %struct.regexp*, %struct.regexp** %rx1018, align 8
  %offsets1019 = getelementptr inbounds %struct.regexp, %struct.regexp* %719, i32 0, i32 7
  %720 = load i32*, i32** %offsets1019, align 8
  %arrayidx1020 = getelementptr inbounds i32, i32* %720, i64 %sub1017
  store i32 %conv1010, i32* %arrayidx1020, align 4
  br label %if.end.1021

if.end.1021:                                      ; preds = %if.else.1003, %if.then.997
  br label %if.end.1022

if.end.1022:                                      ; preds = %if.end.1021, %sw.bb.984
  %721 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1023 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %721, i32 0, i32 8
  %722 = load %struct.regnode*, %struct.regnode** %emit1023, align 8
  %cmp1024 = icmp eq %struct.regnode* %722, @PL_regdummy
  br i1 %cmp1024, label %if.end.1051, label %if.then.1026

if.then.1026:                                     ; preds = %if.end.1022
  %723 = load %struct.regnode*, %struct.regnode** %ender, align 8
  %724 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start1027 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %724, i32 0, i32 7
  %725 = load %struct.regnode*, %struct.regnode** %emit_start1027, align 8
  %sub.ptr.lhs.cast1028 = ptrtoint %struct.regnode* %723 to i64
  %sub.ptr.rhs.cast1029 = ptrtoint %struct.regnode* %725 to i64
  %sub.ptr.sub1030 = sub i64 %sub.ptr.lhs.cast1028, %sub.ptr.rhs.cast1029
  %sub.ptr.div1031 = sdiv exact i64 %sub.ptr.sub1030, 4
  %cmp1032 = icmp slt i64 %sub.ptr.div1031, 0
  br i1 %cmp1032, label %if.then.1034, label %if.else.1040

if.then.1034:                                     ; preds = %if.then.1026
  %726 = load %struct.regnode*, %struct.regnode** %ender, align 8
  %727 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start1035 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %727, i32 0, i32 7
  %728 = load %struct.regnode*, %struct.regnode** %emit_start1035, align 8
  %sub.ptr.lhs.cast1036 = ptrtoint %struct.regnode* %726 to i64
  %sub.ptr.rhs.cast1037 = ptrtoint %struct.regnode* %728 to i64
  %sub.ptr.sub1038 = sub i64 %sub.ptr.lhs.cast1036, %sub.ptr.rhs.cast1037
  %sub.ptr.div1039 = sdiv exact i64 %sub.ptr.sub1038, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i32 0, i32 0), i64 %sub.ptr.div1039)
  br label %if.end.1050

if.else.1040:                                     ; preds = %if.then.1026
  %729 = load %struct.regnode*, %struct.regnode** %ender, align 8
  %730 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start1041 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %730, i32 0, i32 7
  %731 = load %struct.regnode*, %struct.regnode** %emit_start1041, align 8
  %sub.ptr.lhs.cast1042 = ptrtoint %struct.regnode* %729 to i64
  %sub.ptr.rhs.cast1043 = ptrtoint %struct.regnode* %731 to i64
  %sub.ptr.sub1044 = sub i64 %sub.ptr.lhs.cast1042, %sub.ptr.rhs.cast1043
  %sub.ptr.div1045 = sdiv exact i64 %sub.ptr.sub1044, 4
  %mul1046 = mul nsw i64 2, %sub.ptr.div1045
  %732 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx1047 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %732, i32 0, i32 2
  %733 = load %struct.regexp*, %struct.regexp** %rx1047, align 8
  %offsets1048 = getelementptr inbounds %struct.regexp, %struct.regexp* %733, i32 0, i32 7
  %734 = load i32*, i32** %offsets1048, align 8
  %arrayidx1049 = getelementptr inbounds i32, i32* %734, i64 %mul1046
  store i32 1, i32* %arrayidx1049, align 4
  br label %if.end.1050

if.end.1050:                                      ; preds = %if.else.1040, %if.then.1034
  br label %if.end.1051

if.end.1051:                                      ; preds = %if.end.1050, %if.end.1022
  br label %sw.epilog.1058

sw.bb.1052:                                       ; preds = %if.then.981, %if.then.981, %if.then.981, %if.then.981
  %735 = load i32*, i32** %flagp.addr, align 8
  %736 = load i32, i32* %735, align 4
  %and1053 = and i32 %736, -2
  store i32 %and1053, i32* %735, align 4
  br label %sw.bb.1054

sw.bb.1054:                                       ; preds = %if.then.981, %sw.bb.1052
  %737 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call1055 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %737, i8 zeroext 1)
  store %struct.regnode* %call1055, %struct.regnode** %ender, align 8
  br label %sw.epilog.1058

sw.bb.1056:                                       ; preds = %if.then.981
  %738 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call1057 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %738, i8 zeroext 0)
  store %struct.regnode* %call1057, %struct.regnode** %ender, align 8
  br label %sw.epilog.1058

sw.epilog.1058:                                   ; preds = %if.then.981, %sw.bb.1056, %sw.bb.1054, %if.end.1051, %sw.bb.982
  %739 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %740 = load %struct.regnode*, %struct.regnode** %lastbr, align 8
  %741 = load %struct.regnode*, %struct.regnode** %ender, align 8
  call void @S_regtail(%struct.RExC_state_t* %739, %struct.regnode* %740, %struct.regnode* %741)
  %742 = load i32, i32* %have_branch, align 4
  %tobool1059 = icmp ne i32 %742, 0
  br i1 %tobool1059, label %if.then.1060, label %if.end.1064

if.then.1060:                                     ; preds = %sw.epilog.1058
  %743 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %743, %struct.regnode** %br, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.1060
  %744 = load %struct.regnode*, %struct.regnode** %br, align 8
  %cmp1061 = icmp ne %struct.regnode* %744, null
  br i1 %cmp1061, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %745 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %746 = load %struct.regnode*, %struct.regnode** %br, align 8
  %747 = load %struct.regnode*, %struct.regnode** %ender, align 8
  call void @S_regoptail(%struct.RExC_state_t* %745, %struct.regnode* %746, %struct.regnode* %747)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %748 = load %struct.regnode*, %struct.regnode** %br, align 8
  %call1063 = call %struct.regnode* @Perl_regnext(%struct.regnode* %748)
  store %struct.regnode* %call1063, %struct.regnode** %br, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.1064

if.end.1064:                                      ; preds = %for.end, %sw.epilog.1058
  br label %if.end.1065

if.end.1065:                                      ; preds = %if.end.1064, %lor.lhs.false.978
  %749 = load i32, i32* %paren.addr, align 4
  %tobool1066 = icmp ne i32 %749, 0
  br i1 %tobool1066, label %land.lhs.true.1067, label %if.end.1158

land.lhs.true.1067:                               ; preds = %if.end.1065
  %750 = load i32, i32* %paren.addr, align 4
  %call1068 = call i8* @strchr(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @S_reg.parens, i32 0, i32 0), i32 %750)
  store i8* %call1068, i8** %p, align 8
  %tobool1069 = icmp ne i8* %call1068, null
  br i1 %tobool1069, label %if.then.1070, label %if.end.1158

if.then.1070:                                     ; preds = %land.lhs.true.1067
  %751 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast1071 = ptrtoint i8* %751 to i64
  %sub.ptr.sub1072 = sub i64 %sub.ptr.lhs.cast1071, ptrtoint ([6 x i8]* @S_reg.parens to i64)
  %rem = srem i64 %sub.ptr.sub1072, 2
  %tobool1073 = icmp ne i64 %rem, 0
  %cond1074 = select i1 %tobool1073, i32 51, i32 50
  %conv1075 = trunc i32 %cond1074 to i8
  store i8 %conv1075, i8* %node, align 1
  %752 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast1077 = ptrtoint i8* %752 to i64
  %sub.ptr.sub1078 = sub i64 %sub.ptr.lhs.cast1077, ptrtoint ([6 x i8]* @S_reg.parens to i64)
  %cmp1079 = icmp sgt i64 %sub.ptr.sub1078, 1
  %conv1080 = zext i1 %cmp1079 to i32
  store i32 %conv1080, i32* %flag1076, align 4
  %753 = load i32, i32* %paren.addr, align 4
  %cmp1081 = icmp eq i32 %753, 62
  br i1 %cmp1081, label %if.then.1083, label %if.end.1084

if.then.1083:                                     ; preds = %if.then.1070
  store i8 52, i8* %node, align 1
  store i32 0, i32* %flag1076, align 4
  br label %if.end.1084

if.end.1084:                                      ; preds = %if.then.1083, %if.then.1070
  %754 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %755 = load i8, i8* %node, align 1
  %756 = load %struct.regnode*, %struct.regnode** %ret, align 8
  call void @S_reginsert(%struct.RExC_state_t* %754, i8 zeroext %755, %struct.regnode* %756)
  %757 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1085 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %757, i32 0, i32 8
  %758 = load %struct.regnode*, %struct.regnode** %emit1085, align 8
  %cmp1086 = icmp eq %struct.regnode* %758, @PL_regdummy
  br i1 %cmp1086, label %if.end.1118, label %if.then.1088

if.then.1088:                                     ; preds = %if.end.1084
  %759 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %760 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start1089 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %760, i32 0, i32 7
  %761 = load %struct.regnode*, %struct.regnode** %emit_start1089, align 8
  %sub.ptr.lhs.cast1090 = ptrtoint %struct.regnode* %759 to i64
  %sub.ptr.rhs.cast1091 = ptrtoint %struct.regnode* %761 to i64
  %sub.ptr.sub1092 = sub i64 %sub.ptr.lhs.cast1090, %sub.ptr.rhs.cast1091
  %sub.ptr.div1093 = sdiv exact i64 %sub.ptr.sub1092, 4
  %cmp1094 = icmp slt i64 %sub.ptr.div1093, 0
  br i1 %cmp1094, label %if.then.1096, label %if.else.1102

if.then.1096:                                     ; preds = %if.then.1088
  %762 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %763 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start1097 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %763, i32 0, i32 7
  %764 = load %struct.regnode*, %struct.regnode** %emit_start1097, align 8
  %sub.ptr.lhs.cast1098 = ptrtoint %struct.regnode* %762 to i64
  %sub.ptr.rhs.cast1099 = ptrtoint %struct.regnode* %764 to i64
  %sub.ptr.sub1100 = sub i64 %sub.ptr.lhs.cast1098, %sub.ptr.rhs.cast1099
  %sub.ptr.div1101 = sdiv exact i64 %sub.ptr.sub1100, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i32 0, i32 0), i64 %sub.ptr.div1101)
  br label %if.end.1117

if.else.1102:                                     ; preds = %if.then.1088
  %765 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1103 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %765, i32 0, i32 5
  %766 = load i8*, i8** %parse1103, align 8
  %767 = load i8*, i8** %parse_start, align 8
  %sub.ptr.lhs.cast1104 = ptrtoint i8* %766 to i64
  %sub.ptr.rhs.cast1105 = ptrtoint i8* %767 to i64
  %sub.ptr.sub1106 = sub i64 %sub.ptr.lhs.cast1104, %sub.ptr.rhs.cast1105
  %conv1107 = trunc i64 %sub.ptr.sub1106 to i32
  %768 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %769 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start1108 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %769, i32 0, i32 7
  %770 = load %struct.regnode*, %struct.regnode** %emit_start1108, align 8
  %sub.ptr.lhs.cast1109 = ptrtoint %struct.regnode* %768 to i64
  %sub.ptr.rhs.cast1110 = ptrtoint %struct.regnode* %770 to i64
  %sub.ptr.sub1111 = sub i64 %sub.ptr.lhs.cast1109, %sub.ptr.rhs.cast1110
  %sub.ptr.div1112 = sdiv exact i64 %sub.ptr.sub1111, 4
  %mul1113 = mul nsw i64 2, %sub.ptr.div1112
  %771 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx1114 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %771, i32 0, i32 2
  %772 = load %struct.regexp*, %struct.regexp** %rx1114, align 8
  %offsets1115 = getelementptr inbounds %struct.regexp, %struct.regexp* %772, i32 0, i32 7
  %773 = load i32*, i32** %offsets1115, align 8
  %arrayidx1116 = getelementptr inbounds i32, i32* %773, i64 %mul1113
  store i32 %conv1107, i32* %arrayidx1116, align 4
  br label %if.end.1117

if.end.1117:                                      ; preds = %if.else.1102, %if.then.1096
  br label %if.end.1118

if.end.1118:                                      ; preds = %if.end.1117, %if.end.1084
  %774 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1119 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %774, i32 0, i32 8
  %775 = load %struct.regnode*, %struct.regnode** %emit1119, align 8
  %cmp1120 = icmp eq %struct.regnode* %775, @PL_regdummy
  br i1 %cmp1120, label %if.end.1154, label %if.then.1122

if.then.1122:                                     ; preds = %if.end.1118
  %776 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %777 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start1123 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %777, i32 0, i32 7
  %778 = load %struct.regnode*, %struct.regnode** %emit_start1123, align 8
  %sub.ptr.lhs.cast1124 = ptrtoint %struct.regnode* %776 to i64
  %sub.ptr.rhs.cast1125 = ptrtoint %struct.regnode* %778 to i64
  %sub.ptr.sub1126 = sub i64 %sub.ptr.lhs.cast1124, %sub.ptr.rhs.cast1125
  %sub.ptr.div1127 = sdiv exact i64 %sub.ptr.sub1126, 4
  %cmp1128 = icmp slt i64 %sub.ptr.div1127, 0
  br i1 %cmp1128, label %if.then.1130, label %if.else.1136

if.then.1130:                                     ; preds = %if.then.1122
  %779 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %780 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start1131 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %780, i32 0, i32 7
  %781 = load %struct.regnode*, %struct.regnode** %emit_start1131, align 8
  %sub.ptr.lhs.cast1132 = ptrtoint %struct.regnode* %779 to i64
  %sub.ptr.rhs.cast1133 = ptrtoint %struct.regnode* %781 to i64
  %sub.ptr.sub1134 = sub i64 %sub.ptr.lhs.cast1132, %sub.ptr.rhs.cast1133
  %sub.ptr.div1135 = sdiv exact i64 %sub.ptr.sub1134, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.28, i32 0, i32 0), i64 %sub.ptr.div1135)
  br label %if.end.1153

if.else.1136:                                     ; preds = %if.then.1122
  %782 = load i8*, i8** %parse_start, align 8
  %add.ptr1137 = getelementptr inbounds i8, i8* %782, i64 1
  %783 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %start1138 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %783, i32 0, i32 3
  %784 = load i8*, i8** %start1138, align 8
  %sub.ptr.lhs.cast1139 = ptrtoint i8* %add.ptr1137 to i64
  %sub.ptr.rhs.cast1140 = ptrtoint i8* %784 to i64
  %sub.ptr.sub1141 = sub i64 %sub.ptr.lhs.cast1139, %sub.ptr.rhs.cast1140
  %conv1142 = trunc i64 %sub.ptr.sub1141 to i32
  %785 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %786 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start1143 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %786, i32 0, i32 7
  %787 = load %struct.regnode*, %struct.regnode** %emit_start1143, align 8
  %sub.ptr.lhs.cast1144 = ptrtoint %struct.regnode* %785 to i64
  %sub.ptr.rhs.cast1145 = ptrtoint %struct.regnode* %787 to i64
  %sub.ptr.sub1146 = sub i64 %sub.ptr.lhs.cast1144, %sub.ptr.rhs.cast1145
  %sub.ptr.div1147 = sdiv exact i64 %sub.ptr.sub1146, 4
  %mul1148 = mul nsw i64 2, %sub.ptr.div1147
  %sub1149 = sub nsw i64 %mul1148, 1
  %788 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx1150 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %788, i32 0, i32 2
  %789 = load %struct.regexp*, %struct.regexp** %rx1150, align 8
  %offsets1151 = getelementptr inbounds %struct.regexp, %struct.regexp* %789, i32 0, i32 7
  %790 = load i32*, i32** %offsets1151, align 8
  %arrayidx1152 = getelementptr inbounds i32, i32* %790, i64 %sub1149
  store i32 %conv1142, i32* %arrayidx1152, align 4
  br label %if.end.1153

if.end.1153:                                      ; preds = %if.else.1136, %if.then.1130
  br label %if.end.1154

if.end.1154:                                      ; preds = %if.end.1153, %if.end.1118
  %791 = load i32, i32* %flag1076, align 4
  %conv1155 = trunc i32 %791 to i8
  %792 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags1156 = getelementptr inbounds %struct.regnode, %struct.regnode* %792, i32 0, i32 0
  store i8 %conv1155, i8* %flags1156, align 1
  %793 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %794 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %795 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call1157 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %795, i8 zeroext 37)
  call void @S_regtail(%struct.RExC_state_t* %793, %struct.regnode* %794, %struct.regnode* %call1157)
  br label %if.end.1158

if.end.1158:                                      ; preds = %if.end.1154, %land.lhs.true.1067, %if.end.1065
  %796 = load i32, i32* %paren.addr, align 4
  %tobool1159 = icmp ne i32 %796, 0
  br i1 %tobool1159, label %if.then.1160, label %if.else.1190

if.then.1160:                                     ; preds = %if.end.1158
  %797 = load i32, i32* %oregflags, align 4
  %798 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1161 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %798, i32 0, i32 0
  store i32 %797, i32* %flags1161, align 4
  %799 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1162 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %799, i32 0, i32 5
  %800 = load i8*, i8** %parse1162, align 8
  %801 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1163 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %801, i32 0, i32 4
  %802 = load i8*, i8** %end1163, align 8
  %cmp1164 = icmp uge i8* %800, %802
  br i1 %cmp1164, label %if.then.1171, label %lor.lhs.false.1166

lor.lhs.false.1166:                               ; preds = %if.then.1160
  %803 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call1167 = call i8* @S_nextchar(%struct.RExC_state_t* %803)
  %804 = load i8, i8* %call1167, align 1
  %conv1168 = sext i8 %804 to i32
  %cmp1169 = icmp ne i32 %conv1168, 41
  br i1 %cmp1169, label %if.then.1171, label %if.end.1189

if.then.1171:                                     ; preds = %lor.lhs.false.1166, %if.then.1160
  %805 = load i8*, i8** %oregcomp_parse, align 8
  %806 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1172 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %806, i32 0, i32 5
  store i8* %805, i8** %parse1172, align 8
  %807 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1173 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %807, i32 0, i32 8
  %808 = load %struct.regnode*, %struct.regnode** %emit1173, align 8
  %cmp1174 = icmp eq %struct.regnode* %808, @PL_regdummy
  br i1 %cmp1174, label %if.end.1178, label %if.then.1176

if.then.1176:                                     ; preds = %if.then.1171
  %809 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx1177 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %809, i32 0, i32 2
  %810 = load %struct.regexp*, %struct.regexp** %rx1177, align 8
  %811 = bitcast %struct.regexp* %810 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %811)
  br label %if.end.1178

if.end.1178:                                      ; preds = %if.then.1176, %if.then.1171
  %812 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1180 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %812, i32 0, i32 5
  %813 = load i8*, i8** %parse1180, align 8
  %814 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1181 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %814, i32 0, i32 1
  %815 = load i8*, i8** %precomp1181, align 8
  %sub.ptr.lhs.cast1182 = ptrtoint i8* %813 to i64
  %sub.ptr.rhs.cast1183 = ptrtoint i8* %815 to i64
  %sub.ptr.sub1184 = sub i64 %sub.ptr.lhs.cast1182, %sub.ptr.rhs.cast1183
  store i64 %sub.ptr.sub1184, i64* %offset1179, align 8
  %816 = load i64, i64* %offset1179, align 8
  %conv1185 = trunc i64 %816 to i32
  %817 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1186 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %817, i32 0, i32 1
  %818 = load i8*, i8** %precomp1186, align 8
  %819 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1187 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %819, i32 0, i32 1
  %820 = load i8*, i8** %precomp1187, align 8
  %821 = load i64, i64* %offset1179, align 8
  %add.ptr1188 = getelementptr inbounds i8, i8* %820, i64 %821
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.40, i32 0, i32 0), i32 %conv1185, i8* %818, i8* %add.ptr1188)
  br label %if.end.1189

if.end.1189:                                      ; preds = %if.end.1178, %lor.lhs.false.1166
  br label %if.end.1243

if.else.1190:                                     ; preds = %if.end.1158
  %822 = load i32, i32* %paren.addr, align 4
  %tobool1191 = icmp ne i32 %822, 0
  br i1 %tobool1191, label %if.end.1242, label %land.lhs.true.1192

land.lhs.true.1192:                               ; preds = %if.else.1190
  %823 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1193 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %823, i32 0, i32 5
  %824 = load i8*, i8** %parse1193, align 8
  %825 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1194 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %825, i32 0, i32 4
  %826 = load i8*, i8** %end1194, align 8
  %cmp1195 = icmp ult i8* %824, %826
  br i1 %cmp1195, label %if.then.1197, label %if.end.1242

if.then.1197:                                     ; preds = %land.lhs.true.1192
  %827 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1198 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %827, i32 0, i32 5
  %828 = load i8*, i8** %parse1198, align 8
  %829 = load i8, i8* %828, align 1
  %conv1199 = sext i8 %829 to i32
  %cmp1200 = icmp eq i32 %conv1199, 41
  br i1 %cmp1200, label %if.then.1202, label %if.else.1221

if.then.1202:                                     ; preds = %if.then.1197
  %830 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1203 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %830, i32 0, i32 5
  %831 = load i8*, i8** %parse1203, align 8
  %incdec.ptr1204 = getelementptr inbounds i8, i8* %831, i32 1
  store i8* %incdec.ptr1204, i8** %parse1203, align 8
  %832 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1205 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %832, i32 0, i32 8
  %833 = load %struct.regnode*, %struct.regnode** %emit1205, align 8
  %cmp1206 = icmp eq %struct.regnode* %833, @PL_regdummy
  br i1 %cmp1206, label %if.end.1210, label %if.then.1208

if.then.1208:                                     ; preds = %if.then.1202
  %834 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx1209 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %834, i32 0, i32 2
  %835 = load %struct.regexp*, %struct.regexp** %rx1209, align 8
  %836 = bitcast %struct.regexp* %835 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %836)
  br label %if.end.1210

if.end.1210:                                      ; preds = %if.then.1208, %if.then.1202
  %837 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1212 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %837, i32 0, i32 5
  %838 = load i8*, i8** %parse1212, align 8
  %839 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1213 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %839, i32 0, i32 1
  %840 = load i8*, i8** %precomp1213, align 8
  %sub.ptr.lhs.cast1214 = ptrtoint i8* %838 to i64
  %sub.ptr.rhs.cast1215 = ptrtoint i8* %840 to i64
  %sub.ptr.sub1216 = sub i64 %sub.ptr.lhs.cast1214, %sub.ptr.rhs.cast1215
  store i64 %sub.ptr.sub1216, i64* %offset1211, align 8
  %841 = load i64, i64* %offset1211, align 8
  %conv1217 = trunc i64 %841 to i32
  %842 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1218 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %842, i32 0, i32 1
  %843 = load i8*, i8** %precomp1218, align 8
  %844 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1219 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %844, i32 0, i32 1
  %845 = load i8*, i8** %precomp1219, align 8
  %846 = load i64, i64* %offset1211, align 8
  %add.ptr1220 = getelementptr inbounds i8, i8* %845, i64 %846
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.41, i32 0, i32 0), i32 %conv1217, i8* %843, i8* %add.ptr1220)
  br label %if.end.1241

if.else.1221:                                     ; preds = %if.then.1197
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8** %ellipses1222, align 8
  %847 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1224 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %847, i32 0, i32 4
  %848 = load i8*, i8** %end1224, align 8
  %849 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1225 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %849, i32 0, i32 1
  %850 = load i8*, i8** %precomp1225, align 8
  %sub.ptr.lhs.cast1226 = ptrtoint i8* %848 to i64
  %sub.ptr.rhs.cast1227 = ptrtoint i8* %850 to i64
  %sub.ptr.sub1228 = sub i64 %sub.ptr.lhs.cast1226, %sub.ptr.rhs.cast1227
  store i64 %sub.ptr.sub1228, i64* %len1223, align 8
  %851 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1229 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %851, i32 0, i32 8
  %852 = load %struct.regnode*, %struct.regnode** %emit1229, align 8
  %cmp1230 = icmp eq %struct.regnode* %852, @PL_regdummy
  br i1 %cmp1230, label %if.end.1234, label %if.then.1232

if.then.1232:                                     ; preds = %if.else.1221
  %853 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx1233 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %853, i32 0, i32 2
  %854 = load %struct.regexp*, %struct.regexp** %rx1233, align 8
  %855 = bitcast %struct.regexp* %854 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %855)
  br label %if.end.1234

if.end.1234:                                      ; preds = %if.then.1232, %if.else.1221
  %856 = load i64, i64* %len1223, align 8
  %cmp1235 = icmp sgt i64 %856, 127
  br i1 %cmp1235, label %if.then.1237, label %if.end.1238

if.then.1237:                                     ; preds = %if.end.1234
  store i64 117, i64* %len1223, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8** %ellipses1222, align 8
  br label %if.end.1238

if.end.1238:                                      ; preds = %if.then.1237, %if.end.1234
  %857 = load i64, i64* %len1223, align 8
  %conv1239 = trunc i64 %857 to i32
  %858 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1240 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %858, i32 0, i32 1
  %859 = load i8*, i8** %precomp1240, align 8
  %860 = load i8*, i8** %ellipses1222, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.42, i32 0, i32 0), i32 %conv1239, i8* %859, i8* %860)
  br label %if.end.1241

if.end.1241:                                      ; preds = %if.end.1238, %if.end.1210
  br label %if.end.1242

if.end.1242:                                      ; preds = %if.end.1241, %land.lhs.true.1192, %if.else.1190
  br label %if.end.1243

if.end.1243:                                      ; preds = %if.end.1242, %if.end.1189
  %861 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %861, %struct.regnode** %retval
  br label %return

return:                                           ; preds = %if.end.1243, %if.then.967, %if.then.833, %if.end.755, %if.end.513, %if.end.362, %if.end.295, %if.end.70
  %862 = load %struct.regnode*, %struct.regnode** %retval
  ret %struct.regnode* %862
}

declare i8* @Perl_safesysmalloc(i64) #1

declare i8* @Perl_savepvn(i8*, i32) #1

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #2

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #2

; Function Attrs: nounwind uwtable
define %struct.regnode* @Perl_regnext(%struct.regnode* %p) #0 {
entry:
  %retval = alloca %struct.regnode*, align 8
  %p.addr = alloca %struct.regnode*, align 8
  %offset = alloca i32, align 4
  store %struct.regnode* %p, %struct.regnode** %p.addr, align 8
  %0 = load %struct.regnode*, %struct.regnode** %p.addr, align 8
  %cmp = icmp eq %struct.regnode* %0, @PL_regdummy
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.regnode* null, %struct.regnode** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.regnode*, %struct.regnode** %p.addr, align 8
  %type = getelementptr inbounds %struct.regnode, %struct.regnode* %1, i32 0, i32 1
  %2 = load i8, i8* %type, align 1
  %idxprom = zext i8 %2 to i64
  %arrayidx = getelementptr inbounds [62 x i8], [62 x i8]* @reg_off_by_arg, i32 0, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %4 = load %struct.regnode*, %struct.regnode** %p.addr, align 8
  %5 = bitcast %struct.regnode* %4 to %struct.regnode_1*
  %arg1 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %5, i32 0, i32 3
  %6 = load i32, i32* %arg1, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %7 = load %struct.regnode*, %struct.regnode** %p.addr, align 8
  %next_off = getelementptr inbounds %struct.regnode, %struct.regnode* %7, i32 0, i32 2
  %8 = load i16, i16* %next_off, align 2
  %conv1 = zext i16 %8 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %6, %cond.true ], [ %conv1, %cond.false ]
  store i32 %cond, i32* %offset, align 4
  %9 = load i32, i32* %offset, align 4
  %cmp2 = icmp eq i32 %9, 0
  br i1 %cmp2, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %cond.end
  store %struct.regnode* null, %struct.regnode** %retval
  br label %return

if.end.5:                                         ; preds = %cond.end
  %10 = load %struct.regnode*, %struct.regnode** %p.addr, align 8
  %11 = load i32, i32* %offset, align 4
  %idx.ext = sext i32 %11 to i64
  %add.ptr = getelementptr inbounds %struct.regnode, %struct.regnode* %10, i64 %idx.ext
  store %struct.regnode* %add.ptr, %struct.regnode** %retval
  br label %return

return:                                           ; preds = %if.end.5, %if.then.4, %if.then
  %12 = load %struct.regnode*, %struct.regnode** %retval
  ret %struct.regnode* %12
}

declare %struct.sv* @Perl_newSVpvn(i8*, i64) #1

; Function Attrs: nounwind uwtable
define internal void @S_cl_init(%struct.RExC_state_t* %pRExC_state, %struct.regnode_charclass_class* %cl) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %cl.addr = alloca %struct.regnode_charclass_class*, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store %struct.regnode_charclass_class* %cl, %struct.regnode_charclass_class** %cl.addr, align 8
  %0 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %1 = bitcast %struct.regnode_charclass_class* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 44, i32 1, i1 false)
  %2 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %type = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %2, i32 0, i32 1
  store i8 17, i8* %type, align 1
  %3 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %4 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  call void @S_cl_anything(%struct.RExC_state_t* %3, %struct.regnode_charclass_class* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @S_study_chunk(%struct.RExC_state_t* %pRExC_state, %struct.regnode** %scanp, i32* %deltap, %struct.regnode* %last, %struct.scan_data_t* %data, i32 %flags) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %scanp.addr = alloca %struct.regnode**, align 8
  %deltap.addr = alloca i32*, align 8
  %last.addr = alloca %struct.regnode*, align 8
  %data.addr = alloca %struct.scan_data_t*, align 8
  %flags.addr = alloca i32, align 4
  %min = alloca i32, align 4
  %pars = alloca i32, align 4
  %code = alloca i32, align 4
  %scan = alloca %struct.regnode*, align 8
  %next = alloca %struct.regnode*, align 8
  %delta = alloca i32, align 4
  %is_inf = alloca i32, align 4
  %is_inf_internal = alloca i32, align 4
  %is_par = alloca i32, align 4
  %data_fake = alloca %struct.scan_data_t, align 8
  %and_with = alloca %struct.regnode_charclass_class, align 4
  %n = alloca %struct.regnode*, align 8
  %stringok = alloca i32, align 4
  %oldl = alloca i32, align 4
  %nnext = alloca %struct.regnode*, align 8
  %s0 = alloca i8*, align 8
  %s = alloca i8*, align 8
  %t = alloca i8*, align 8
  %s1 = alloca i8*, align 8
  %s2 = alloca i8*, align 8
  %t0 = alloca i8*, align 8
  %t1 = alloca i8*, align 8
  %max = alloca i32, align 4
  %off = alloca i32, align 4
  %noff = alloca i32, align 4
  %n191 = alloca %struct.regnode*, align 8
  %max1 = alloca i32, align 4
  %min1 = alloca i32, align 4
  %num = alloca i32, align 4
  %accum = alloca %struct.regnode_charclass_class, align 4
  %deltanext = alloca i32, align 4
  %minnext = alloca i32, align 4
  %f = alloca i32, align 4
  %fake = alloca i32, align 4
  %this_class = alloca %struct.regnode_charclass_class, align 4
  %l = alloca i32, align 4
  %uc = alloca i64, align 8
  %s427 = alloca i8*, align 8
  %sv = alloca %struct.sv*, align 8
  %mg = alloca %struct.magic*, align 8
  %compat = alloca i32, align 4
  %l622 = alloca i32, align 4
  %uc625 = alloca i64, align 8
  %s637 = alloca i8*, align 8
  %compat658 = alloca i32, align 4
  %mincount = alloca i32, align 4
  %maxcount = alloca i32, align 4
  %minnext779 = alloca i32, align 4
  %deltanext780 = alloca i32, align 4
  %fl = alloca i32, align 4
  %f781 = alloca i32, align 4
  %pos_before = alloca i32, align 4
  %oscan = alloca %struct.regnode*, align 8
  %this_class782 = alloca %struct.regnode_charclass_class, align 4
  %oclass = alloca %struct.regnode_charclass_class*, align 8
  %next_is_eval = alloca i32, align 4
  %lp = alloca i32, align 4
  %offset = alloca i64, align 8
  %nxt = alloca %struct.regnode*, align 8
  %nxt1 = alloca %struct.regnode*, align 8
  %nxt1094 = alloca %struct.regnode*, align 8
  %nxt2 = alloca %struct.regnode*, align 8
  %nxt11115 = alloca %struct.regnode*, align 8
  %ellipses = alloca i8*, align 8
  %len = alloca i64, align 8
  %nxt1166 = alloca %struct.regnode*, align 8
  %last_str = alloca %struct.sv*, align 8
  %counted = alloca i32, align 4
  %b = alloca i32, align 4
  %l1216 = alloca i64, align 8
  %s1217 = alloca i8*, align 8
  %old = alloca i32, align 4
  %tmp = alloca i64, align 8
  %sv1303 = alloca %struct.sv*, align 8
  %mg1306 = alloca %struct.magic*, align 8
  %value = alloca i32, align 4
  %deltanext2352 = alloca i32, align 4
  %minnext2354 = alloca i32, align 4
  %fake2356 = alloca i32, align 4
  %nscan = alloca %struct.regnode*, align 8
  %intrnl = alloca %struct.regnode_charclass_class, align 4
  %f2360 = alloca i32, align 4
  %offset2406 = alloca i64, align 8
  %offset2427 = alloca i64, align 8
  %was = alloca i32, align 4
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store %struct.regnode** %scanp, %struct.regnode*** %scanp.addr, align 8
  store i32* %deltap, i32** %deltap.addr, align 8
  store %struct.regnode* %last, %struct.regnode** %last.addr, align 8
  store %struct.scan_data_t* %data, %struct.scan_data_t** %data.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i32 0, i32* %min, align 4
  store i32 0, i32* %pars, align 4
  %0 = load %struct.regnode**, %struct.regnode*** %scanp.addr, align 8
  %1 = load %struct.regnode*, %struct.regnode** %0, align 8
  store %struct.regnode* %1, %struct.regnode** %scan, align 8
  store i32 0, i32* %delta, align 4
  %2 = load i32, i32* %flags.addr, align 4
  %and = and i32 %2, 1024
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags1 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %3, i32 0, i32 14
  %4 = load i32, i32* %flags1, align 4
  %and2 = and i32 %4, 64
  %tobool3 = icmp ne i32 %and2, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %5 = phi i1 [ false, %entry ], [ %tobool3, %land.rhs ]
  %land.ext = zext i1 %5 to i32
  store i32 %land.ext, i32* %is_inf, align 4
  store i32 0, i32* %is_inf_internal, align 4
  %6 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type = getelementptr inbounds %struct.regnode, %struct.regnode* %6, i32 0, i32 1
  %7 = load i8, i8* %type, align 1
  %conv = zext i8 %7 to i32
  %cmp = icmp eq i32 %conv, 45
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.end
  %8 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %9 = bitcast %struct.regnode* %8 to %struct.regnode_1*
  %arg1 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %9, i32 0, i32 3
  %10 = load i32, i32* %arg1, align 4
  br label %cond.end

cond.false:                                       ; preds = %land.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %10, %cond.true ], [ 0, %cond.false ]
  store i32 %cond, i32* %is_par, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end.2561, %if.end.1466, %if.end.411, %cond.end
  %11 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %tobool5 = icmp ne %struct.regnode* %11, null
  br i1 %tobool5, label %land.lhs.true, label %land.end.13

land.lhs.true:                                    ; preds = %while.cond
  %12 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type6 = getelementptr inbounds %struct.regnode, %struct.regnode* %12, i32 0, i32 1
  %13 = load i8, i8* %type6, align 1
  %conv7 = zext i8 %13 to i32
  %cmp8 = icmp ne i32 %conv7, 0
  br i1 %cmp8, label %land.rhs.10, label %land.end.13

land.rhs.10:                                      ; preds = %land.lhs.true
  %14 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %15 = load %struct.regnode*, %struct.regnode** %last.addr, align 8
  %cmp11 = icmp ult %struct.regnode* %14, %15
  br label %land.end.13

land.end.13:                                      ; preds = %land.rhs.10, %land.lhs.true, %while.cond
  %16 = phi i1 [ false, %land.lhs.true ], [ false, %while.cond ], [ %cmp11, %land.rhs.10 ]
  br i1 %16, label %while.body, label %while.end.2563

while.body:                                       ; preds = %land.end.13
  %17 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type15 = getelementptr inbounds %struct.regnode, %struct.regnode* %17, i32 0, i32 1
  %18 = load i8, i8* %type15, align 1
  %idxprom = zext i8 %18 to i64
  %arrayidx = getelementptr inbounds [62 x i8], [62 x i8]* @PL_regkind, i32 0, i64 %idxprom
  %19 = load i8, i8* %arrayidx, align 1
  %conv16 = zext i8 %19 to i32
  %cmp17 = icmp eq i32 %conv16, 33
  br i1 %cmp17, label %if.then, label %if.end.167

if.then:                                          ; preds = %while.body
  %20 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %call = call %struct.regnode* @Perl_regnext(%struct.regnode* %20)
  store %struct.regnode* %call, %struct.regnode** %n, align 8
  store i32 1, i32* %stringok, align 4
  %21 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %22 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %23 = bitcast %struct.regnode* %22 to %struct.regnode_string*
  %str_len = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %23, i32 0, i32 0
  %24 = load i8, i8* %str_len, align 1
  %conv19 = zext i8 %24 to i64
  %add = add i64 %conv19, 4
  %sub = sub i64 %add, 1
  %div = udiv i64 %sub, 4
  %add20 = add i64 %div, 1
  %add.ptr = getelementptr inbounds %struct.regnode, %struct.regnode* %21, i64 %add20
  store %struct.regnode* %add.ptr, %struct.regnode** %next, align 8
  br label %while.cond.21

while.cond.21:                                    ; preds = %if.end.112, %if.then
  %25 = load %struct.regnode*, %struct.regnode** %n, align 8
  %tobool22 = icmp ne %struct.regnode* %25, null
  br i1 %tobool22, label %land.lhs.true.23, label %land.end.49

land.lhs.true.23:                                 ; preds = %while.cond.21
  %26 = load %struct.regnode*, %struct.regnode** %n, align 8
  %type24 = getelementptr inbounds %struct.regnode, %struct.regnode* %26, i32 0, i32 1
  %27 = load i8, i8* %type24, align 1
  %idxprom25 = zext i8 %27 to i64
  %arrayidx26 = getelementptr inbounds [62 x i8], [62 x i8]* @PL_regkind, i32 0, i64 %idxprom25
  %28 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %28 to i32
  %cmp28 = icmp eq i32 %conv27, 36
  br i1 %cmp28, label %land.lhs.true.38, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.23
  %29 = load i32, i32* %stringok, align 4
  %tobool30 = icmp ne i32 %29, 0
  br i1 %tobool30, label %land.lhs.true.31, label %land.end.49

land.lhs.true.31:                                 ; preds = %lor.lhs.false
  %30 = load %struct.regnode*, %struct.regnode** %n, align 8
  %type32 = getelementptr inbounds %struct.regnode, %struct.regnode* %30, i32 0, i32 1
  %31 = load i8, i8* %type32, align 1
  %conv33 = zext i8 %31 to i32
  %32 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type34 = getelementptr inbounds %struct.regnode, %struct.regnode* %32, i32 0, i32 1
  %33 = load i8, i8* %type34, align 1
  %conv35 = zext i8 %33 to i32
  %cmp36 = icmp eq i32 %conv33, %conv35
  br i1 %cmp36, label %land.lhs.true.38, label %land.end.49

land.lhs.true.38:                                 ; preds = %land.lhs.true.31, %land.lhs.true.23
  %34 = load %struct.regnode*, %struct.regnode** %n, align 8
  %next_off = getelementptr inbounds %struct.regnode, %struct.regnode* %34, i32 0, i32 2
  %35 = load i16, i16* %next_off, align 2
  %conv39 = zext i16 %35 to i32
  %tobool40 = icmp ne i32 %conv39, 0
  br i1 %tobool40, label %land.rhs.41, label %land.end.49

land.rhs.41:                                      ; preds = %land.lhs.true.38
  %36 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %next_off42 = getelementptr inbounds %struct.regnode, %struct.regnode* %36, i32 0, i32 2
  %37 = load i16, i16* %next_off42, align 2
  %conv43 = zext i16 %37 to i32
  %38 = load %struct.regnode*, %struct.regnode** %n, align 8
  %next_off44 = getelementptr inbounds %struct.regnode, %struct.regnode* %38, i32 0, i32 2
  %39 = load i16, i16* %next_off44, align 2
  %conv45 = zext i16 %39 to i32
  %add46 = add nsw i32 %conv43, %conv45
  %cmp47 = icmp slt i32 %add46, 32767
  br label %land.end.49

land.end.49:                                      ; preds = %land.rhs.41, %land.lhs.true.38, %land.lhs.true.31, %lor.lhs.false, %while.cond.21
  %40 = phi i1 [ false, %land.lhs.true.38 ], [ false, %land.lhs.true.31 ], [ false, %lor.lhs.false ], [ false, %while.cond.21 ], [ %cmp47, %land.rhs.41 ]
  br i1 %40, label %while.body.51, label %while.end

while.body.51:                                    ; preds = %land.end.49
  %41 = load %struct.regnode*, %struct.regnode** %n, align 8
  %type52 = getelementptr inbounds %struct.regnode, %struct.regnode* %41, i32 0, i32 1
  %42 = load i8, i8* %type52, align 1
  %conv53 = zext i8 %42 to i32
  %cmp54 = icmp eq i32 %conv53, 37
  br i1 %cmp54, label %if.then.59, label %lor.lhs.false.56

lor.lhs.false.56:                                 ; preds = %while.body.51
  %43 = load %struct.regnode*, %struct.regnode** %n, align 8
  %44 = load %struct.regnode*, %struct.regnode** %next, align 8
  %cmp57 = icmp ugt %struct.regnode* %43, %44
  br i1 %cmp57, label %if.then.59, label %if.end

if.then.59:                                       ; preds = %lor.lhs.false.56, %while.body.51
  store i32 0, i32* %stringok, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.59, %lor.lhs.false.56
  %45 = load %struct.regnode*, %struct.regnode** %n, align 8
  %type60 = getelementptr inbounds %struct.regnode, %struct.regnode* %45, i32 0, i32 1
  %46 = load i8, i8* %type60, align 1
  %idxprom61 = zext i8 %46 to i64
  %arrayidx62 = getelementptr inbounds [62 x i8], [62 x i8]* @PL_regkind, i32 0, i64 %idxprom61
  %47 = load i8, i8* %arrayidx62, align 1
  %conv63 = zext i8 %47 to i32
  %cmp64 = icmp eq i32 %conv63, 36
  br i1 %cmp64, label %if.then.66, label %if.else

if.then.66:                                       ; preds = %if.end
  %48 = load %struct.regnode*, %struct.regnode** %n, align 8
  %next_off67 = getelementptr inbounds %struct.regnode, %struct.regnode* %48, i32 0, i32 2
  %49 = load i16, i16* %next_off67, align 2
  %conv68 = zext i16 %49 to i32
  %50 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %next_off69 = getelementptr inbounds %struct.regnode, %struct.regnode* %50, i32 0, i32 2
  %51 = load i16, i16* %next_off69, align 2
  %conv70 = zext i16 %51 to i32
  %add71 = add nsw i32 %conv70, %conv68
  %conv72 = trunc i32 %add71 to i16
  store i16 %conv72, i16* %next_off69, align 2
  %52 = load %struct.regnode*, %struct.regnode** %n, align 8
  %add.ptr73 = getelementptr inbounds %struct.regnode, %struct.regnode* %52, i64 1
  store %struct.regnode* %add.ptr73, %struct.regnode** %next, align 8
  %53 = load %struct.regnode*, %struct.regnode** %n, align 8
  %call74 = call %struct.regnode* @Perl_regnext(%struct.regnode* %53)
  store %struct.regnode* %call74, %struct.regnode** %n, align 8
  br label %if.end.112

if.else:                                          ; preds = %if.end
  %54 = load i32, i32* %stringok, align 4
  %tobool75 = icmp ne i32 %54, 0
  br i1 %tobool75, label %if.then.76, label %if.end.111

if.then.76:                                       ; preds = %if.else
  %55 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %56 = bitcast %struct.regnode* %55 to %struct.regnode_string*
  %str_len77 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %56, i32 0, i32 0
  %57 = load i8, i8* %str_len77, align 1
  %conv78 = zext i8 %57 to i32
  store i32 %conv78, i32* %oldl, align 4
  %58 = load %struct.regnode*, %struct.regnode** %n, align 8
  %call79 = call %struct.regnode* @Perl_regnext(%struct.regnode* %58)
  store %struct.regnode* %call79, %struct.regnode** %nnext, align 8
  %59 = load i32, i32* %oldl, align 4
  %60 = load %struct.regnode*, %struct.regnode** %n, align 8
  %61 = bitcast %struct.regnode* %60 to %struct.regnode_string*
  %str_len80 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %61, i32 0, i32 0
  %62 = load i8, i8* %str_len80, align 1
  %conv81 = zext i8 %62 to i32
  %add82 = add nsw i32 %59, %conv81
  %cmp83 = icmp sgt i32 %add82, 255
  br i1 %cmp83, label %if.then.85, label %if.end.86

if.then.85:                                       ; preds = %if.then.76
  br label %while.end

if.end.86:                                        ; preds = %if.then.76
  %63 = load %struct.regnode*, %struct.regnode** %n, align 8
  %next_off87 = getelementptr inbounds %struct.regnode, %struct.regnode* %63, i32 0, i32 2
  %64 = load i16, i16* %next_off87, align 2
  %conv88 = zext i16 %64 to i32
  %65 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %next_off89 = getelementptr inbounds %struct.regnode, %struct.regnode* %65, i32 0, i32 2
  %66 = load i16, i16* %next_off89, align 2
  %conv90 = zext i16 %66 to i32
  %add91 = add nsw i32 %conv90, %conv88
  %conv92 = trunc i32 %add91 to i16
  store i16 %conv92, i16* %next_off89, align 2
  %67 = load %struct.regnode*, %struct.regnode** %n, align 8
  %68 = bitcast %struct.regnode* %67 to %struct.regnode_string*
  %str_len93 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %68, i32 0, i32 0
  %69 = load i8, i8* %str_len93, align 1
  %conv94 = zext i8 %69 to i32
  %70 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %71 = bitcast %struct.regnode* %70 to %struct.regnode_string*
  %str_len95 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %71, i32 0, i32 0
  %72 = load i8, i8* %str_len95, align 1
  %conv96 = zext i8 %72 to i32
  %add97 = add nsw i32 %conv96, %conv94
  %conv98 = trunc i32 %add97 to i8
  store i8 %conv98, i8* %str_len95, align 1
  %73 = load %struct.regnode*, %struct.regnode** %n, align 8
  %74 = load %struct.regnode*, %struct.regnode** %n, align 8
  %75 = bitcast %struct.regnode* %74 to %struct.regnode_string*
  %str_len99 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %75, i32 0, i32 0
  %76 = load i8, i8* %str_len99, align 1
  %conv100 = zext i8 %76 to i64
  %add101 = add i64 %conv100, 4
  %sub102 = sub i64 %add101, 1
  %div103 = udiv i64 %sub102, 4
  %add104 = add i64 %div103, 1
  %add.ptr105 = getelementptr inbounds %struct.regnode, %struct.regnode* %73, i64 %add104
  store %struct.regnode* %add.ptr105, %struct.regnode** %next, align 8
  %77 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %78 = bitcast %struct.regnode* %77 to %struct.regnode_string*
  %string = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %78, i32 0, i32 3
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %string, i32 0, i32 0
  %79 = load i32, i32* %oldl, align 4
  %idx.ext = sext i32 %79 to i64
  %add.ptr106 = getelementptr inbounds i8, i8* %arraydecay, i64 %idx.ext
  %80 = load %struct.regnode*, %struct.regnode** %n, align 8
  %81 = bitcast %struct.regnode* %80 to %struct.regnode_string*
  %string107 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %81, i32 0, i32 3
  %arraydecay108 = getelementptr inbounds [1 x i8], [1 x i8]* %string107, i32 0, i32 0
  %82 = load %struct.regnode*, %struct.regnode** %n, align 8
  %83 = bitcast %struct.regnode* %82 to %struct.regnode_string*
  %str_len109 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %83, i32 0, i32 0
  %84 = load i8, i8* %str_len109, align 1
  %conv110 = zext i8 %84 to i64
  %mul = mul i64 %conv110, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %add.ptr106, i8* %arraydecay108, i64 %mul, i32 1, i1 false)
  %85 = load %struct.regnode*, %struct.regnode** %nnext, align 8
  store %struct.regnode* %85, %struct.regnode** %n, align 8
  br label %if.end.111

if.end.111:                                       ; preds = %if.end.86, %if.else
  br label %if.end.112

if.end.112:                                       ; preds = %if.end.111, %if.then.66
  br label %while.cond.21

while.end:                                        ; preds = %if.then.85, %land.end.49
  %86 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %86, i32 0, i32 17
  %87 = load i32, i32* %utf8, align 4
  %cmp113 = icmp ne i32 %87, 0
  br i1 %cmp113, label %land.lhs.true.115, label %if.end.166

land.lhs.true.115:                                ; preds = %while.end
  %88 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type116 = getelementptr inbounds %struct.regnode, %struct.regnode* %88, i32 0, i32 1
  %89 = load i8, i8* %type116, align 1
  %conv117 = zext i8 %89 to i32
  %cmp118 = icmp eq i32 %conv117, 34
  br i1 %cmp118, label %land.lhs.true.120, label %if.end.166

land.lhs.true.120:                                ; preds = %land.lhs.true.115
  %90 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %91 = bitcast %struct.regnode* %90 to %struct.regnode_string*
  %str_len121 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %91, i32 0, i32 0
  %92 = load i8, i8* %str_len121, align 1
  %conv122 = zext i8 %92 to i32
  %cmp123 = icmp sge i32 %conv122, 6
  br i1 %cmp123, label %if.then.125, label %if.end.166

if.then.125:                                      ; preds = %land.lhs.true.120
  %93 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %94 = bitcast %struct.regnode* %93 to %struct.regnode_string*
  %string126 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %94, i32 0, i32 3
  %arraydecay127 = getelementptr inbounds [1 x i8], [1 x i8]* %string126, i32 0, i32 0
  store i8* %arraydecay127, i8** %s0, align 8
  %95 = load i8*, i8** %s0, align 8
  %96 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %97 = bitcast %struct.regnode* %96 to %struct.regnode_string*
  %str_len128 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %97, i32 0, i32 0
  %98 = load i8, i8* %str_len128, align 1
  %conv129 = zext i8 %98 to i32
  %idx.ext130 = sext i32 %conv129 to i64
  %add.ptr131 = getelementptr inbounds i8, i8* %95, i64 %idx.ext130
  %add.ptr132 = getelementptr inbounds i8, i8* %add.ptr131, i64 -1
  store i8* %add.ptr132, i8** %s1, align 8
  %99 = load i8*, i8** %s1, align 8
  %add.ptr133 = getelementptr inbounds i8, i8* %99, i64 -4
  store i8* %add.ptr133, i8** %s2, align 8
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i32 0, i32 0), i8** %t0, align 8
  %100 = load i8*, i8** %t0, align 8
  %add.ptr134 = getelementptr inbounds i8, i8* %100, i64 3
  store i8* %add.ptr134, i8** %t1, align 8
  %101 = load i8*, i8** %s0, align 8
  %add.ptr135 = getelementptr inbounds i8, i8* %101, i64 2
  store i8* %add.ptr135, i8** %s, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.125
  %102 = load i8*, i8** %s, align 8
  %103 = load i8*, i8** %s2, align 8
  %cmp136 = icmp ult i8* %102, %103
  br i1 %cmp136, label %land.rhs.138, label %land.end.141

land.rhs.138:                                     ; preds = %for.cond
  %104 = load i8*, i8** %s, align 8
  %105 = load i8*, i8** %s1, align 8
  %106 = load i8*, i8** %t0, align 8
  %107 = load i8*, i8** %t1, align 8
  %call139 = call i8* @Perl_ninstr(i8* %104, i8* %105, i8* %106, i8* %107)
  store i8* %call139, i8** %t, align 8
  %tobool140 = icmp ne i8* %call139, null
  br label %land.end.141

land.end.141:                                     ; preds = %land.rhs.138, %for.cond
  %108 = phi i1 [ false, %for.cond ], [ %tobool140, %land.rhs.138 ]
  br i1 %108, label %for.body, label %for.end

for.body:                                         ; preds = %land.end.141
  %109 = load i8*, i8** %t, align 8
  %arrayidx143 = getelementptr inbounds i8, i8* %109, i64 -1
  %110 = load i8, i8* %arrayidx143, align 1
  %conv144 = zext i8 %110 to i32
  %cmp145 = icmp eq i32 %conv144, 185
  br i1 %cmp145, label %land.lhs.true.147, label %lor.lhs.false.152

land.lhs.true.147:                                ; preds = %for.body
  %111 = load i8*, i8** %t, align 8
  %arrayidx148 = getelementptr inbounds i8, i8* %111, i64 -2
  %112 = load i8, i8* %arrayidx148, align 1
  %conv149 = zext i8 %112 to i32
  %cmp150 = icmp eq i32 %conv149, 206
  br i1 %cmp150, label %if.then.162, label %lor.lhs.false.152

lor.lhs.false.152:                                ; preds = %land.lhs.true.147, %for.body
  %113 = load i8*, i8** %t, align 8
  %arrayidx153 = getelementptr inbounds i8, i8* %113, i64 -1
  %114 = load i8, i8* %arrayidx153, align 1
  %conv154 = zext i8 %114 to i32
  %cmp155 = icmp eq i32 %conv154, 133
  br i1 %cmp155, label %land.lhs.true.157, label %if.end.164

land.lhs.true.157:                                ; preds = %lor.lhs.false.152
  %115 = load i8*, i8** %t, align 8
  %arrayidx158 = getelementptr inbounds i8, i8* %115, i64 -2
  %116 = load i8, i8* %arrayidx158, align 1
  %conv159 = zext i8 %116 to i32
  %cmp160 = icmp eq i32 %conv159, 207
  br i1 %cmp160, label %if.then.162, label %if.end.164

if.then.162:                                      ; preds = %land.lhs.true.157, %land.lhs.true.147
  %117 = load i32, i32* %min, align 4
  %sub163 = sub nsw i32 %117, 4
  store i32 %sub163, i32* %min, align 4
  br label %if.end.164

if.end.164:                                       ; preds = %if.then.162, %land.lhs.true.157, %lor.lhs.false.152
  br label %for.inc

for.inc:                                          ; preds = %if.end.164
  %118 = load i8*, i8** %t, align 8
  %add.ptr165 = getelementptr inbounds i8, i8* %118, i64 4
  store i8* %add.ptr165, i8** %s, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end.141
  br label %if.end.166

if.end.166:                                       ; preds = %for.end, %land.lhs.true.120, %land.lhs.true.115, %while.end
  br label %if.end.167

if.end.167:                                       ; preds = %if.end.166, %while.body
  %119 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type168 = getelementptr inbounds %struct.regnode, %struct.regnode* %119, i32 0, i32 1
  %120 = load i8, i8* %type168, align 1
  %conv169 = zext i8 %120 to i32
  %cmp170 = icmp ne i32 %conv169, 43
  br i1 %cmp170, label %if.then.172, label %if.end.233

if.then.172:                                      ; preds = %if.end.167
  %121 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type173 = getelementptr inbounds %struct.regnode, %struct.regnode* %121, i32 0, i32 1
  %122 = load i8, i8* %type173, align 1
  %idxprom174 = zext i8 %122 to i64
  %arrayidx175 = getelementptr inbounds [62 x i8], [62 x i8]* @reg_off_by_arg, i32 0, i64 %idxprom174
  %123 = load i8, i8* %arrayidx175, align 1
  %conv176 = sext i8 %123 to i32
  %tobool177 = icmp ne i32 %conv176, 0
  %cond178 = select i1 %tobool177, i32 2147483647, i32 65535
  store i32 %cond178, i32* %max, align 4
  %124 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type179 = getelementptr inbounds %struct.regnode, %struct.regnode* %124, i32 0, i32 1
  %125 = load i8, i8* %type179, align 1
  %idxprom180 = zext i8 %125 to i64
  %arrayidx181 = getelementptr inbounds [62 x i8], [62 x i8]* @reg_off_by_arg, i32 0, i64 %idxprom180
  %126 = load i8, i8* %arrayidx181, align 1
  %conv182 = sext i8 %126 to i32
  %tobool183 = icmp ne i32 %conv182, 0
  br i1 %tobool183, label %cond.true.184, label %cond.false.186

cond.true.184:                                    ; preds = %if.then.172
  %127 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %128 = bitcast %struct.regnode* %127 to %struct.regnode_1*
  %arg1185 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %128, i32 0, i32 3
  %129 = load i32, i32* %arg1185, align 4
  br label %cond.end.189

cond.false.186:                                   ; preds = %if.then.172
  %130 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %next_off187 = getelementptr inbounds %struct.regnode, %struct.regnode* %130, i32 0, i32 2
  %131 = load i16, i16* %next_off187, align 2
  %conv188 = zext i16 %131 to i32
  br label %cond.end.189

cond.end.189:                                     ; preds = %cond.false.186, %cond.true.184
  %cond190 = phi i32 [ %129, %cond.true.184 ], [ %conv188, %cond.false.186 ]
  store i32 %cond190, i32* %off, align 4
  %132 = load %struct.regnode*, %struct.regnode** %scan, align 8
  store %struct.regnode* %132, %struct.regnode** %n191, align 8
  br label %while.cond.192

while.cond.192:                                   ; preds = %while.body.220, %cond.end.189
  %133 = load %struct.regnode*, %struct.regnode** %n191, align 8
  %call193 = call %struct.regnode* @Perl_regnext(%struct.regnode* %133)
  store %struct.regnode* %call193, %struct.regnode** %n191, align 8
  %tobool194 = icmp ne %struct.regnode* %call193, null
  br i1 %tobool194, label %land.lhs.true.195, label %land.end.218

land.lhs.true.195:                                ; preds = %while.cond.192
  %134 = load %struct.regnode*, %struct.regnode** %n191, align 8
  %type196 = getelementptr inbounds %struct.regnode, %struct.regnode* %134, i32 0, i32 1
  %135 = load i8, i8* %type196, align 1
  %idxprom197 = zext i8 %135 to i64
  %arrayidx198 = getelementptr inbounds [62 x i8], [62 x i8]* @PL_regkind, i32 0, i64 %idxprom197
  %136 = load i8, i8* %arrayidx198, align 1
  %conv199 = zext i8 %136 to i32
  %cmp200 = icmp eq i32 %conv199, 36
  br i1 %cmp200, label %land.lhs.true.202, label %lor.lhs.false.206

land.lhs.true.202:                                ; preds = %land.lhs.true.195
  %137 = load %struct.regnode*, %struct.regnode** %n191, align 8
  %next_off203 = getelementptr inbounds %struct.regnode, %struct.regnode* %137, i32 0, i32 2
  %138 = load i16, i16* %next_off203, align 2
  %conv204 = zext i16 %138 to i32
  store i32 %conv204, i32* %noff, align 4
  %tobool205 = icmp ne i32 %conv204, 0
  br i1 %tobool205, label %land.rhs.214, label %lor.lhs.false.206

lor.lhs.false.206:                                ; preds = %land.lhs.true.202, %land.lhs.true.195
  %139 = load %struct.regnode*, %struct.regnode** %n191, align 8
  %type207 = getelementptr inbounds %struct.regnode, %struct.regnode* %139, i32 0, i32 1
  %140 = load i8, i8* %type207, align 1
  %conv208 = zext i8 %140 to i32
  %cmp209 = icmp eq i32 %conv208, 55
  br i1 %cmp209, label %land.lhs.true.211, label %land.end.218

land.lhs.true.211:                                ; preds = %lor.lhs.false.206
  %141 = load %struct.regnode*, %struct.regnode** %n191, align 8
  %142 = bitcast %struct.regnode* %141 to %struct.regnode_1*
  %arg1212 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %142, i32 0, i32 3
  %143 = load i32, i32* %arg1212, align 4
  store i32 %143, i32* %noff, align 4
  %tobool213 = icmp ne i32 %143, 0
  br i1 %tobool213, label %land.rhs.214, label %land.end.218

land.rhs.214:                                     ; preds = %land.lhs.true.211, %land.lhs.true.202
  %144 = load i32, i32* %off, align 4
  %145 = load i32, i32* %noff, align 4
  %add215 = add nsw i32 %144, %145
  %146 = load i32, i32* %max, align 4
  %cmp216 = icmp slt i32 %add215, %146
  br label %land.end.218

land.end.218:                                     ; preds = %land.rhs.214, %land.lhs.true.211, %lor.lhs.false.206, %while.cond.192
  %147 = phi i1 [ false, %land.lhs.true.211 ], [ false, %lor.lhs.false.206 ], [ false, %while.cond.192 ], [ %cmp216, %land.rhs.214 ]
  br i1 %147, label %while.body.220, label %while.end.222

while.body.220:                                   ; preds = %land.end.218
  %148 = load i32, i32* %noff, align 4
  %149 = load i32, i32* %off, align 4
  %add221 = add nsw i32 %149, %148
  store i32 %add221, i32* %off, align 4
  br label %while.cond.192

while.end.222:                                    ; preds = %land.end.218
  %150 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type223 = getelementptr inbounds %struct.regnode, %struct.regnode* %150, i32 0, i32 1
  %151 = load i8, i8* %type223, align 1
  %idxprom224 = zext i8 %151 to i64
  %arrayidx225 = getelementptr inbounds [62 x i8], [62 x i8]* @reg_off_by_arg, i32 0, i64 %idxprom224
  %152 = load i8, i8* %arrayidx225, align 1
  %tobool226 = icmp ne i8 %152, 0
  br i1 %tobool226, label %if.then.227, label %if.else.229

if.then.227:                                      ; preds = %while.end.222
  %153 = load i32, i32* %off, align 4
  %154 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %155 = bitcast %struct.regnode* %154 to %struct.regnode_1*
  %arg1228 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %155, i32 0, i32 3
  store i32 %153, i32* %arg1228, align 4
  br label %if.end.232

if.else.229:                                      ; preds = %while.end.222
  %156 = load i32, i32* %off, align 4
  %conv230 = trunc i32 %156 to i16
  %157 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %next_off231 = getelementptr inbounds %struct.regnode, %struct.regnode* %157, i32 0, i32 2
  store i16 %conv230, i16* %next_off231, align 2
  br label %if.end.232

if.end.232:                                       ; preds = %if.else.229, %if.then.227
  br label %if.end.233

if.end.233:                                       ; preds = %if.end.232, %if.end.167
  %158 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type234 = getelementptr inbounds %struct.regnode, %struct.regnode* %158, i32 0, i32 1
  %159 = load i8, i8* %type234, align 1
  %conv235 = zext i8 %159 to i32
  %cmp236 = icmp eq i32 %conv235, 31
  br i1 %cmp236, label %if.then.253, label %lor.lhs.false.238

lor.lhs.false.238:                                ; preds = %if.end.233
  %160 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type239 = getelementptr inbounds %struct.regnode, %struct.regnode* %160, i32 0, i32 1
  %161 = load i8, i8* %type239, align 1
  %conv240 = zext i8 %161 to i32
  %cmp241 = icmp eq i32 %conv240, 56
  br i1 %cmp241, label %if.then.253, label %lor.lhs.false.243

lor.lhs.false.243:                                ; preds = %lor.lhs.false.238
  %162 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type244 = getelementptr inbounds %struct.regnode, %struct.regnode* %162, i32 0, i32 1
  %163 = load i8, i8* %type244, align 1
  %conv245 = zext i8 %163 to i32
  %cmp246 = icmp eq i32 %conv245, 53
  br i1 %cmp246, label %if.then.253, label %lor.lhs.false.248

lor.lhs.false.248:                                ; preds = %lor.lhs.false.243
  %164 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type249 = getelementptr inbounds %struct.regnode, %struct.regnode* %164, i32 0, i32 1
  %165 = load i8, i8* %type249, align 1
  %conv250 = zext i8 %165 to i32
  %cmp251 = icmp eq i32 %conv250, 52
  br i1 %cmp251, label %if.then.253, label %if.else.412

if.then.253:                                      ; preds = %lor.lhs.false.248, %lor.lhs.false.243, %lor.lhs.false.238, %if.end.233
  %166 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %call254 = call %struct.regnode* @Perl_regnext(%struct.regnode* %166)
  store %struct.regnode* %call254, %struct.regnode** %next, align 8
  %167 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type255 = getelementptr inbounds %struct.regnode, %struct.regnode* %167, i32 0, i32 1
  %168 = load i8, i8* %type255, align 1
  %conv256 = zext i8 %168 to i32
  store i32 %conv256, i32* %code, align 4
  %169 = load %struct.regnode*, %struct.regnode** %next, align 8
  %type257 = getelementptr inbounds %struct.regnode, %struct.regnode* %169, i32 0, i32 1
  %170 = load i8, i8* %type257, align 1
  %conv258 = zext i8 %170 to i32
  %171 = load i32, i32* %code, align 4
  %cmp259 = icmp eq i32 %conv258, %171
  br i1 %cmp259, label %if.then.267, label %lor.lhs.false.261

lor.lhs.false.261:                                ; preds = %if.then.253
  %172 = load i32, i32* %code, align 4
  %cmp262 = icmp eq i32 %172, 53
  br i1 %cmp262, label %if.then.267, label %lor.lhs.false.264

lor.lhs.false.264:                                ; preds = %lor.lhs.false.261
  %173 = load i32, i32* %code, align 4
  %cmp265 = icmp eq i32 %173, 52
  br i1 %cmp265, label %if.then.267, label %if.else.402

if.then.267:                                      ; preds = %lor.lhs.false.264, %lor.lhs.false.261, %if.then.253
  store i32 0, i32* %max1, align 4
  store i32 2147483647, i32* %min1, align 4
  store i32 0, i32* %num, align 4
  %174 = load i32, i32* %flags.addr, align 4
  %and268 = and i32 %174, 1024
  %tobool269 = icmp ne i32 %and268, 0
  br i1 %tobool269, label %if.then.270, label %if.end.271

if.then.270:                                      ; preds = %if.then.267
  %175 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %176 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  call void @S_scan_commit(%struct.RExC_state_t* %175, %struct.scan_data_t* %176)
  br label %if.end.271

if.end.271:                                       ; preds = %if.then.270, %if.then.267
  %177 = load i32, i32* %flags.addr, align 4
  %and272 = and i32 %177, 6144
  %tobool273 = icmp ne i32 %and272, 0
  br i1 %tobool273, label %if.then.274, label %if.end.275

if.then.274:                                      ; preds = %if.end.271
  %178 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  call void @S_cl_init_zero(%struct.RExC_state_t* %178, %struct.regnode_charclass_class* %accum)
  br label %if.end.275

if.end.275:                                       ; preds = %if.then.274, %if.end.271
  br label %while.cond.276

while.cond.276:                                   ; preds = %if.end.347, %if.end.275
  %179 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type277 = getelementptr inbounds %struct.regnode, %struct.regnode* %179, i32 0, i32 1
  %180 = load i8, i8* %type277, align 1
  %conv278 = zext i8 %180 to i32
  %181 = load i32, i32* %code, align 4
  %cmp279 = icmp eq i32 %conv278, %181
  br i1 %cmp279, label %while.body.281, label %while.end.348

while.body.281:                                   ; preds = %while.cond.276
  store i32 0, i32* %f, align 4
  %182 = load i32, i32* %num, align 4
  %inc = add nsw i32 %182, 1
  store i32 %inc, i32* %num, align 4
  %flags282 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 14
  store i32 0, i32* %flags282, align 4
  %183 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool283 = icmp ne %struct.scan_data_t* %183, null
  br i1 %tobool283, label %if.then.284, label %if.else.287

if.then.284:                                      ; preds = %while.body.281
  %184 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %whilem_c = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %184, i32 0, i32 15
  %185 = load i32, i32* %whilem_c, align 4
  %whilem_c285 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 15
  store i32 %185, i32* %whilem_c285, align 4
  %186 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_closep = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %186, i32 0, i32 16
  %187 = load i32*, i32** %last_closep, align 8
  %last_closep286 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 16
  store i32* %187, i32** %last_closep286, align 8
  br label %if.end.289

if.else.287:                                      ; preds = %while.body.281
  %last_closep288 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 16
  store i32* %fake, i32** %last_closep288, align 8
  br label %if.end.289

if.end.289:                                       ; preds = %if.else.287, %if.then.284
  %188 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %call290 = call %struct.regnode* @Perl_regnext(%struct.regnode* %188)
  store %struct.regnode* %call290, %struct.regnode** %next, align 8
  %189 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %add.ptr291 = getelementptr inbounds %struct.regnode, %struct.regnode* %189, i64 1
  store %struct.regnode* %add.ptr291, %struct.regnode** %scan, align 8
  %190 = load i32, i32* %code, align 4
  %cmp292 = icmp ne i32 %190, 31
  br i1 %cmp292, label %if.then.294, label %if.end.296

if.then.294:                                      ; preds = %if.end.289
  %191 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %add.ptr295 = getelementptr inbounds %struct.regnode, %struct.regnode* %191, i64 1
  store %struct.regnode* %add.ptr295, %struct.regnode** %scan, align 8
  br label %if.end.296

if.end.296:                                       ; preds = %if.then.294, %if.end.289
  %192 = load i32, i32* %flags.addr, align 4
  %and297 = and i32 %192, 6144
  %tobool298 = icmp ne i32 %and297, 0
  br i1 %tobool298, label %if.then.299, label %if.end.300

if.then.299:                                      ; preds = %if.end.296
  %193 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  call void @S_cl_init(%struct.RExC_state_t* %193, %struct.regnode_charclass_class* %this_class)
  %start_class = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 17
  store %struct.regnode_charclass_class* %this_class, %struct.regnode_charclass_class** %start_class, align 8
  store i32 2048, i32* %f, align 4
  br label %if.end.300

if.end.300:                                       ; preds = %if.then.299, %if.end.296
  %194 = load i32, i32* %flags.addr, align 4
  %and301 = and i32 %194, 8192
  %tobool302 = icmp ne i32 %and301, 0
  br i1 %tobool302, label %if.then.303, label %if.end.304

if.then.303:                                      ; preds = %if.end.300
  %195 = load i32, i32* %f, align 4
  %or = or i32 %195, 8192
  store i32 %or, i32* %f, align 4
  br label %if.end.304

if.end.304:                                       ; preds = %if.then.303, %if.end.300
  %196 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %197 = load %struct.regnode*, %struct.regnode** %next, align 8
  %198 = load i32, i32* %f, align 4
  %call305 = call i32 @S_study_chunk(%struct.RExC_state_t* %196, %struct.regnode** %scan, i32* %deltanext, %struct.regnode* %197, %struct.scan_data_t* %data_fake, i32 %198)
  store i32 %call305, i32* %minnext, align 4
  %199 = load i32, i32* %min1, align 4
  %200 = load i32, i32* %minnext, align 4
  %cmp306 = icmp sgt i32 %199, %200
  br i1 %cmp306, label %if.then.308, label %if.end.309

if.then.308:                                      ; preds = %if.end.304
  %201 = load i32, i32* %minnext, align 4
  store i32 %201, i32* %min1, align 4
  br label %if.end.309

if.end.309:                                       ; preds = %if.then.308, %if.end.304
  %202 = load i32, i32* %max1, align 4
  %203 = load i32, i32* %minnext, align 4
  %204 = load i32, i32* %deltanext, align 4
  %add310 = add nsw i32 %203, %204
  %cmp311 = icmp slt i32 %202, %add310
  br i1 %cmp311, label %if.then.313, label %if.end.315

if.then.313:                                      ; preds = %if.end.309
  %205 = load i32, i32* %minnext, align 4
  %206 = load i32, i32* %deltanext, align 4
  %add314 = add nsw i32 %205, %206
  store i32 %add314, i32* %max1, align 4
  br label %if.end.315

if.end.315:                                       ; preds = %if.then.313, %if.end.309
  %207 = load i32, i32* %deltanext, align 4
  %cmp316 = icmp eq i32 %207, 2147483647
  br i1 %cmp316, label %if.then.318, label %if.end.319

if.then.318:                                      ; preds = %if.end.315
  store i32 1, i32* %is_inf_internal, align 4
  store i32 1, i32* %is_inf, align 4
  br label %if.end.319

if.end.319:                                       ; preds = %if.then.318, %if.end.315
  %208 = load %struct.regnode*, %struct.regnode** %next, align 8
  store %struct.regnode* %208, %struct.regnode** %scan, align 8
  %flags320 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 14
  %209 = load i32, i32* %flags320, align 4
  %and321 = and i32 %209, 384
  %tobool322 = icmp ne i32 %and321, 0
  br i1 %tobool322, label %if.then.323, label %if.end.325

if.then.323:                                      ; preds = %if.end.319
  %210 = load i32, i32* %pars, align 4
  %inc324 = add nsw i32 %210, 1
  store i32 %inc324, i32* %pars, align 4
  br label %if.end.325

if.end.325:                                       ; preds = %if.then.323, %if.end.319
  %211 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool326 = icmp ne %struct.scan_data_t* %211, null
  br i1 %tobool326, label %land.lhs.true.327, label %if.end.334

land.lhs.true.327:                                ; preds = %if.end.325
  %flags328 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 14
  %212 = load i32, i32* %flags328, align 4
  %and329 = and i32 %212, 512
  %tobool330 = icmp ne i32 %and329, 0
  br i1 %tobool330, label %if.then.331, label %if.end.334

if.then.331:                                      ; preds = %land.lhs.true.327
  %213 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags332 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %213, i32 0, i32 14
  %214 = load i32, i32* %flags332, align 4
  %or333 = or i32 %214, 512
  store i32 %or333, i32* %flags332, align 4
  br label %if.end.334

if.end.334:                                       ; preds = %if.then.331, %land.lhs.true.327, %if.end.325
  %215 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool335 = icmp ne %struct.scan_data_t* %215, null
  br i1 %tobool335, label %if.then.336, label %if.end.339

if.then.336:                                      ; preds = %if.end.334
  %whilem_c337 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 15
  %216 = load i32, i32* %whilem_c337, align 4
  %217 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %whilem_c338 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %217, i32 0, i32 15
  store i32 %216, i32* %whilem_c338, align 4
  br label %if.end.339

if.end.339:                                       ; preds = %if.then.336, %if.end.334
  %218 = load i32, i32* %flags.addr, align 4
  %and340 = and i32 %218, 6144
  %tobool341 = icmp ne i32 %and340, 0
  br i1 %tobool341, label %if.then.342, label %if.end.343

if.then.342:                                      ; preds = %if.end.339
  %219 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  call void @S_cl_or(%struct.RExC_state_t* %219, %struct.regnode_charclass_class* %accum, %struct.regnode_charclass_class* %this_class)
  br label %if.end.343

if.end.343:                                       ; preds = %if.then.342, %if.end.339
  %220 = load i32, i32* %code, align 4
  %cmp344 = icmp eq i32 %220, 52
  br i1 %cmp344, label %if.then.346, label %if.end.347

if.then.346:                                      ; preds = %if.end.343
  br label %while.end.348

if.end.347:                                       ; preds = %if.end.343
  br label %while.cond.276

while.end.348:                                    ; preds = %if.then.346, %while.cond.276
  %221 = load i32, i32* %code, align 4
  %cmp349 = icmp eq i32 %221, 53
  br i1 %cmp349, label %land.lhs.true.351, label %if.end.355

land.lhs.true.351:                                ; preds = %while.end.348
  %222 = load i32, i32* %num, align 4
  %cmp352 = icmp slt i32 %222, 2
  br i1 %cmp352, label %if.then.354, label %if.end.355

if.then.354:                                      ; preds = %land.lhs.true.351
  store i32 0, i32* %min1, align 4
  br label %if.end.355

if.end.355:                                       ; preds = %if.then.354, %land.lhs.true.351, %while.end.348
  %223 = load i32, i32* %flags.addr, align 4
  %and356 = and i32 %223, 1024
  %tobool357 = icmp ne i32 %and356, 0
  br i1 %tobool357, label %if.then.358, label %if.end.368

if.then.358:                                      ; preds = %if.end.355
  %224 = load i32, i32* %min1, align 4
  %225 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %225, i32 0, i32 2
  %226 = load i32, i32* %pos_min, align 4
  %add359 = add nsw i32 %226, %224
  store i32 %add359, i32* %pos_min, align 4
  %227 = load i32, i32* %max1, align 4
  %228 = load i32, i32* %min1, align 4
  %sub360 = sub nsw i32 %227, %228
  %229 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_delta = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %229, i32 0, i32 3
  %230 = load i32, i32* %pos_delta, align 4
  %add361 = add nsw i32 %230, %sub360
  store i32 %add361, i32* %pos_delta, align 4
  %231 = load i32, i32* %max1, align 4
  %232 = load i32, i32* %min1, align 4
  %cmp362 = icmp ne i32 %231, %232
  br i1 %cmp362, label %if.then.366, label %lor.lhs.false.364

lor.lhs.false.364:                                ; preds = %if.then.358
  %233 = load i32, i32* %is_inf, align 4
  %tobool365 = icmp ne i32 %233, 0
  br i1 %tobool365, label %if.then.366, label %if.end.367

if.then.366:                                      ; preds = %lor.lhs.false.364, %if.then.358
  %234 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest_float = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %234, i32 0, i32 11
  %235 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %235, i32 0, i32 8
  store %struct.sv** %longest_float, %struct.sv*** %longest, align 8
  br label %if.end.367

if.end.367:                                       ; preds = %if.then.366, %lor.lhs.false.364
  br label %if.end.368

if.end.368:                                       ; preds = %if.end.367, %if.end.355
  %236 = load i32, i32* %min1, align 4
  %237 = load i32, i32* %min, align 4
  %add369 = add nsw i32 %237, %236
  store i32 %add369, i32* %min, align 4
  %238 = load i32, i32* %max1, align 4
  %239 = load i32, i32* %min1, align 4
  %sub370 = sub nsw i32 %238, %239
  %240 = load i32, i32* %delta, align 4
  %add371 = add nsw i32 %240, %sub370
  store i32 %add371, i32* %delta, align 4
  %241 = load i32, i32* %flags.addr, align 4
  %and372 = and i32 %241, 4096
  %tobool373 = icmp ne i32 %and372, 0
  br i1 %tobool373, label %if.then.374, label %if.else.381

if.then.374:                                      ; preds = %if.end.368
  %242 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %243 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class375 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %243, i32 0, i32 17
  %244 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class375, align 8
  call void @S_cl_or(%struct.RExC_state_t* %242, %struct.regnode_charclass_class* %244, %struct.regnode_charclass_class* %accum)
  %245 = load i32, i32* %min1, align 4
  %tobool376 = icmp ne i32 %245, 0
  br i1 %tobool376, label %if.then.377, label %if.end.380

if.then.377:                                      ; preds = %if.then.374
  %246 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class378 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %246, i32 0, i32 17
  %247 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class378, align 8
  call void @S_cl_and(%struct.regnode_charclass_class* %247, %struct.regnode_charclass_class* %and_with)
  %248 = load i32, i32* %flags.addr, align 4
  %and379 = and i32 %248, -6145
  store i32 %and379, i32* %flags.addr, align 4
  br label %if.end.380

if.end.380:                                       ; preds = %if.then.377, %if.then.374
  br label %if.end.401

if.else.381:                                      ; preds = %if.end.368
  %249 = load i32, i32* %flags.addr, align 4
  %and382 = and i32 %249, 2048
  %tobool383 = icmp ne i32 %and382, 0
  br i1 %tobool383, label %if.then.384, label %if.end.400

if.then.384:                                      ; preds = %if.else.381
  %250 = load i32, i32* %min1, align 4
  %tobool385 = icmp ne i32 %250, 0
  br i1 %tobool385, label %if.then.386, label %if.else.389

if.then.386:                                      ; preds = %if.then.384
  %251 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class387 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %251, i32 0, i32 17
  %252 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class387, align 8
  call void @S_cl_and(%struct.regnode_charclass_class* %252, %struct.regnode_charclass_class* %accum)
  %253 = load i32, i32* %flags.addr, align 4
  %and388 = and i32 %253, -6145
  store i32 %and388, i32* %flags.addr, align 4
  br label %if.end.399

if.else.389:                                      ; preds = %if.then.384
  %254 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class390 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %254, i32 0, i32 17
  %255 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class390, align 8
  %256 = bitcast %struct.regnode_charclass_class* %and_with to i8*
  %257 = bitcast %struct.regnode_charclass_class* %255 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %256, i8* %257, i64 44, i32 4, i1 false)
  %258 = load i32, i32* %flags.addr, align 4
  %and391 = and i32 %258, -2049
  store i32 %and391, i32* %flags.addr, align 4
  %259 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class392 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %259, i32 0, i32 17
  %260 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class392, align 8
  %261 = bitcast %struct.regnode_charclass_class* %260 to i8*
  %262 = bitcast %struct.regnode_charclass_class* %accum to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %261, i8* %262, i64 44, i32 4, i1 false)
  %263 = load i32, i32* %flags.addr, align 4
  %or393 = or i32 %263, 4096
  store i32 %or393, i32* %flags.addr, align 4
  %264 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class394 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %264, i32 0, i32 17
  %265 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class394, align 8
  %flags395 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %265, i32 0, i32 0
  %266 = load i8, i8* %flags395, align 1
  %conv396 = zext i8 %266 to i32
  %or397 = or i32 %conv396, 16
  %conv398 = trunc i32 %or397 to i8
  store i8 %conv398, i8* %flags395, align 1
  br label %if.end.399

if.end.399:                                       ; preds = %if.else.389, %if.then.386
  br label %if.end.400

if.end.400:                                       ; preds = %if.end.399, %if.else.381
  br label %if.end.401

if.end.401:                                       ; preds = %if.end.400, %if.end.380
  br label %if.end.411

if.else.402:                                      ; preds = %lor.lhs.false.264
  %267 = load i32, i32* %code, align 4
  %cmp403 = icmp eq i32 %267, 56
  br i1 %cmp403, label %if.then.405, label %if.else.408

if.then.405:                                      ; preds = %if.else.402
  %268 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %add.ptr406 = getelementptr inbounds %struct.regnode, %struct.regnode* %268, i64 1
  %add.ptr407 = getelementptr inbounds %struct.regnode, %struct.regnode* %add.ptr406, i64 1
  store %struct.regnode* %add.ptr407, %struct.regnode** %scan, align 8
  br label %if.end.410

if.else.408:                                      ; preds = %if.else.402
  %269 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %add.ptr409 = getelementptr inbounds %struct.regnode, %struct.regnode* %269, i64 1
  store %struct.regnode* %add.ptr409, %struct.regnode** %scan, align 8
  br label %if.end.410

if.end.410:                                       ; preds = %if.else.408, %if.then.405
  br label %if.end.411

if.end.411:                                       ; preds = %if.end.410, %if.end.401
  br label %while.cond

if.else.412:                                      ; preds = %lor.lhs.false.248
  %270 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type413 = getelementptr inbounds %struct.regnode, %struct.regnode* %270, i32 0, i32 1
  %271 = load i8, i8* %type413, align 1
  %conv414 = zext i8 %271 to i32
  %cmp415 = icmp eq i32 %conv414, 33
  br i1 %cmp415, label %if.then.417, label %if.else.614

if.then.417:                                      ; preds = %if.else.412
  %272 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %273 = bitcast %struct.regnode* %272 to %struct.regnode_string*
  %str_len418 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %273, i32 0, i32 0
  %274 = load i8, i8* %str_len418, align 1
  %conv419 = zext i8 %274 to i32
  store i32 %conv419, i32* %l, align 4
  %275 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %276 = bitcast %struct.regnode* %275 to %struct.regnode_string*
  %string420 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %276, i32 0, i32 3
  %arraydecay421 = getelementptr inbounds [1 x i8], [1 x i8]* %string420, i32 0, i32 0
  %277 = load i8, i8* %arraydecay421, align 1
  %conv422 = zext i8 %277 to i64
  store i64 %conv422, i64* %uc, align 8
  %278 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8423 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %278, i32 0, i32 17
  %279 = load i32, i32* %utf8423, align 4
  %cmp424 = icmp ne i32 %279, 0
  br i1 %cmp424, label %if.then.426, label %if.end.435

if.then.426:                                      ; preds = %if.then.417
  %280 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %281 = bitcast %struct.regnode* %280 to %struct.regnode_string*
  %string428 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %281, i32 0, i32 3
  %arraydecay429 = getelementptr inbounds [1 x i8], [1 x i8]* %string428, i32 0, i32 0
  store i8* %arraydecay429, i8** %s427, align 8
  %282 = load i8*, i8** %s427, align 8
  %283 = load i8*, i8** %s427, align 8
  %284 = load i32, i32* %l, align 4
  %idx.ext430 = sext i32 %284 to i64
  %add.ptr431 = getelementptr inbounds i8, i8* %283, i64 %idx.ext430
  %call432 = call i64 @Perl_utf8_length(i8* %282, i8* %add.ptr431)
  %conv433 = trunc i64 %call432 to i32
  store i32 %conv433, i32* %l, align 4
  %285 = load i8*, i8** %s427, align 8
  %call434 = call i64 @Perl_utf8_to_uvchr(i8* %285, i64* null)
  store i64 %call434, i64* %uc, align 8
  br label %if.end.435

if.end.435:                                       ; preds = %if.then.426, %if.then.417
  %286 = load i32, i32* %l, align 4
  %287 = load i32, i32* %min, align 4
  %add436 = add nsw i32 %287, %286
  store i32 %add436, i32* %min, align 4
  %288 = load i32, i32* %flags.addr, align 4
  %and437 = and i32 %288, 1024
  %tobool438 = icmp ne i32 %and437, 0
  br i1 %tobool438, label %if.then.439, label %if.end.503

if.then.439:                                      ; preds = %if.end.435
  %289 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_end = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %289, i32 0, i32 5
  %290 = load i32, i32* %last_end, align 4
  %cmp440 = icmp eq i32 %290, -1
  br i1 %cmp440, label %if.then.442, label %if.end.452

if.then.442:                                      ; preds = %if.then.439
  %291 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min443 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %291, i32 0, i32 2
  %292 = load i32, i32* %pos_min443, align 4
  %293 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_start_min = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %293, i32 0, i32 6
  store i32 %292, i32* %last_start_min, align 4
  %294 = load i32, i32* %is_inf, align 4
  %tobool444 = icmp ne i32 %294, 0
  br i1 %tobool444, label %cond.true.445, label %cond.false.446

cond.true.445:                                    ; preds = %if.then.442
  br label %cond.end.450

cond.false.446:                                   ; preds = %if.then.442
  %295 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min447 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %295, i32 0, i32 2
  %296 = load i32, i32* %pos_min447, align 4
  %297 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_delta448 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %297, i32 0, i32 3
  %298 = load i32, i32* %pos_delta448, align 4
  %add449 = add nsw i32 %296, %298
  br label %cond.end.450

cond.end.450:                                     ; preds = %cond.false.446, %cond.true.445
  %cond451 = phi i32 [ 2147483647, %cond.true.445 ], [ %add449, %cond.false.446 ]
  %299 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_start_max = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %299, i32 0, i32 7
  store i32 %cond451, i32* %last_start_max, align 4
  br label %if.end.452

if.end.452:                                       ; preds = %cond.end.450, %if.then.439
  %300 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %300, i32 0, i32 4
  %301 = load %struct.sv*, %struct.sv** %last_found, align 8
  %302 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %303 = bitcast %struct.regnode* %302 to %struct.regnode_string*
  %string453 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %303, i32 0, i32 3
  %arraydecay454 = getelementptr inbounds [1 x i8], [1 x i8]* %string453, i32 0, i32 0
  %304 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %305 = bitcast %struct.regnode* %304 to %struct.regnode_string*
  %str_len455 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %305, i32 0, i32 0
  %306 = load i8, i8* %str_len455, align 1
  %conv456 = zext i8 %306 to i64
  call void @Perl_sv_catpvn_flags(%struct.sv* %301, i8* %arraydecay454, i64 %conv456, i32 2)
  %307 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found457 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %307, i32 0, i32 4
  %308 = load %struct.sv*, %struct.sv** %last_found457, align 8
  store %struct.sv* %308, %struct.sv** %sv, align 8
  %309 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %309, i32 0, i32 2
  %310 = load i32, i32* %sv_flags, align 4
  %and458 = and i32 %310, 536870912
  %tobool459 = icmp ne i32 %and458, 0
  br i1 %tobool459, label %land.lhs.true.460, label %cond.false.466

land.lhs.true.460:                                ; preds = %if.end.452
  %311 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags461 = getelementptr inbounds %struct.sv, %struct.sv* %311, i32 0, i32 2
  %312 = load i32, i32* %sv_flags461, align 4
  %and462 = and i32 %312, 57344
  %tobool463 = icmp ne i32 %and462, 0
  br i1 %tobool463, label %cond.true.464, label %cond.false.466

cond.true.464:                                    ; preds = %land.lhs.true.460
  %313 = load %struct.sv*, %struct.sv** %sv, align 8
  %call465 = call %struct.magic* @Perl_mg_find(%struct.sv* %313, i32 119)
  br label %cond.end.467

cond.false.466:                                   ; preds = %land.lhs.true.460, %if.end.452
  br label %cond.end.467

cond.end.467:                                     ; preds = %cond.false.466, %cond.true.464
  %cond468 = phi %struct.magic* [ %call465, %cond.true.464 ], [ null, %cond.false.466 ]
  store %struct.magic* %cond468, %struct.magic** %mg, align 8
  %314 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool469 = icmp ne %struct.magic* %314, null
  br i1 %tobool469, label %land.lhs.true.470, label %if.end.487

land.lhs.true.470:                                ; preds = %cond.end.467
  %315 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %315, i32 0, i32 7
  %316 = load i32, i32* %mg_len, align 4
  %cmp471 = icmp sge i32 %316, 0
  br i1 %cmp471, label %if.then.473, label %if.end.487

if.then.473:                                      ; preds = %land.lhs.true.470
  %317 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %318 = bitcast %struct.regnode* %317 to %struct.regnode_string*
  %string474 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %318, i32 0, i32 3
  %arraydecay475 = getelementptr inbounds [1 x i8], [1 x i8]* %string474, i32 0, i32 0
  %319 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %320 = bitcast %struct.regnode* %319 to %struct.regnode_string*
  %string476 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %320, i32 0, i32 3
  %arraydecay477 = getelementptr inbounds [1 x i8], [1 x i8]* %string476, i32 0, i32 0
  %321 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %322 = bitcast %struct.regnode* %321 to %struct.regnode_string*
  %str_len478 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %322, i32 0, i32 0
  %323 = load i8, i8* %str_len478, align 1
  %conv479 = zext i8 %323 to i32
  %idx.ext480 = sext i32 %conv479 to i64
  %add.ptr481 = getelementptr inbounds i8, i8* %arraydecay477, i64 %idx.ext480
  %call482 = call i64 @Perl_utf8_length(i8* %arraydecay475, i8* %add.ptr481)
  %324 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len483 = getelementptr inbounds %struct.magic, %struct.magic* %324, i32 0, i32 7
  %325 = load i32, i32* %mg_len483, align 4
  %conv484 = sext i32 %325 to i64
  %add485 = add i64 %conv484, %call482
  %conv486 = trunc i64 %add485 to i32
  store i32 %conv486, i32* %mg_len483, align 4
  br label %if.end.487

if.end.487:                                       ; preds = %if.then.473, %land.lhs.true.470, %cond.end.467
  %326 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8488 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %326, i32 0, i32 17
  %327 = load i32, i32* %utf8488, align 4
  %cmp489 = icmp ne i32 %327, 0
  br i1 %cmp489, label %if.then.491, label %if.end.495

if.then.491:                                      ; preds = %if.end.487
  %328 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found492 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %328, i32 0, i32 4
  %329 = load %struct.sv*, %struct.sv** %last_found492, align 8
  %sv_flags493 = getelementptr inbounds %struct.sv, %struct.sv* %329, i32 0, i32 2
  %330 = load i32, i32* %sv_flags493, align 4
  %or494 = or i32 %330, 536870912
  store i32 %or494, i32* %sv_flags493, align 4
  br label %if.end.495

if.end.495:                                       ; preds = %if.then.491, %if.end.487
  %331 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min496 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %331, i32 0, i32 2
  %332 = load i32, i32* %pos_min496, align 4
  %333 = load i32, i32* %l, align 4
  %add497 = add nsw i32 %332, %333
  %334 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_end498 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %334, i32 0, i32 5
  store i32 %add497, i32* %last_end498, align 4
  %335 = load i32, i32* %l, align 4
  %336 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min499 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %336, i32 0, i32 2
  %337 = load i32, i32* %pos_min499, align 4
  %add500 = add nsw i32 %337, %335
  store i32 %add500, i32* %pos_min499, align 4
  %338 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags501 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %338, i32 0, i32 14
  %339 = load i32, i32* %flags501, align 4
  %and502 = and i32 %339, -4
  store i32 %and502, i32* %flags501, align 4
  br label %if.end.503

if.end.503:                                       ; preds = %if.end.495, %if.end.435
  %340 = load i32, i32* %flags.addr, align 4
  %and504 = and i32 %340, 2048
  %tobool505 = icmp ne i32 %and504, 0
  br i1 %tobool505, label %if.then.506, label %if.else.580

if.then.506:                                      ; preds = %if.end.503
  store i32 1, i32* %compat, align 4
  %341 = load i64, i64* %uc, align 8
  %cmp507 = icmp uge i64 %341, 256
  br i1 %cmp507, label %if.then.545, label %lor.lhs.false.509

lor.lhs.false.509:                                ; preds = %if.then.506
  %342 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class510 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %342, i32 0, i32 17
  %343 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class510, align 8
  %flags511 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %343, i32 0, i32 0
  %344 = load i8, i8* %flags511, align 1
  %conv512 = zext i8 %344 to i32
  %and513 = and i32 %conv512, 9
  %tobool514 = icmp ne i32 %and513, 0
  br i1 %tobool514, label %if.end.546, label %land.lhs.true.515

land.lhs.true.515:                                ; preds = %lor.lhs.false.509
  %345 = load i64, i64* %uc, align 8
  %shr = lshr i64 %345, 3
  %and516 = and i64 %shr, 31
  %346 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class517 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %346, i32 0, i32 17
  %347 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class517, align 8
  %348 = bitcast %struct.regnode_charclass_class* %347 to %struct.regnode_charclass*
  %bitmap = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %348, i32 0, i32 4
  %arrayidx518 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap, i32 0, i64 %and516
  %349 = load i8, i8* %arrayidx518, align 1
  %conv519 = sext i8 %349 to i32
  %350 = load i64, i64* %uc, align 8
  %and520 = and i64 %350, 7
  %sh_prom = trunc i64 %and520 to i32
  %shl = shl i32 1, %sh_prom
  %and521 = and i32 %conv519, %shl
  %tobool522 = icmp ne i32 %and521, 0
  br i1 %tobool522, label %if.end.546, label %land.lhs.true.523

land.lhs.true.523:                                ; preds = %land.lhs.true.515
  %351 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class524 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %351, i32 0, i32 17
  %352 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class524, align 8
  %flags525 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %352, i32 0, i32 0
  %353 = load i8, i8* %flags525, align 1
  %conv526 = zext i8 %353 to i32
  %and527 = and i32 %conv526, 2
  %tobool528 = icmp ne i32 %and527, 0
  br i1 %tobool528, label %lor.lhs.false.529, label %if.then.545

lor.lhs.false.529:                                ; preds = %land.lhs.true.523
  %354 = load i64, i64* %uc, align 8
  %arrayidx530 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_fold, i32 0, i64 %354
  %355 = load i8, i8* %arrayidx530, align 1
  %conv531 = zext i8 %355 to i32
  %shr532 = ashr i32 %conv531, 3
  %and533 = and i32 %shr532, 31
  %idxprom534 = sext i32 %and533 to i64
  %356 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class535 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %356, i32 0, i32 17
  %357 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class535, align 8
  %358 = bitcast %struct.regnode_charclass_class* %357 to %struct.regnode_charclass*
  %bitmap536 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %358, i32 0, i32 4
  %arrayidx537 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap536, i32 0, i64 %idxprom534
  %359 = load i8, i8* %arrayidx537, align 1
  %conv538 = sext i8 %359 to i32
  %360 = load i64, i64* %uc, align 8
  %arrayidx539 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_fold, i32 0, i64 %360
  %361 = load i8, i8* %arrayidx539, align 1
  %conv540 = zext i8 %361 to i32
  %and541 = and i32 %conv540, 7
  %shl542 = shl i32 1, %and541
  %and543 = and i32 %conv538, %shl542
  %tobool544 = icmp ne i32 %and543, 0
  br i1 %tobool544, label %if.end.546, label %if.then.545

if.then.545:                                      ; preds = %lor.lhs.false.529, %land.lhs.true.523, %if.then.506
  store i32 0, i32* %compat, align 4
  br label %if.end.546

if.end.546:                                       ; preds = %if.then.545, %lor.lhs.false.529, %land.lhs.true.515, %lor.lhs.false.509
  %362 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class547 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %362, i32 0, i32 17
  %363 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class547, align 8
  %classflags = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %363, i32 0, i32 5
  %arraydecay548 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* %arraydecay548, i8 0, i64 4, i32 1, i1 false)
  %364 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class549 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %364, i32 0, i32 17
  %365 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class549, align 8
  %366 = bitcast %struct.regnode_charclass_class* %365 to %struct.regnode_charclass*
  %bitmap550 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %366, i32 0, i32 4
  %arraydecay551 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap550, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* %arraydecay551, i8 0, i64 32, i32 1, i1 false)
  %367 = load i32, i32* %compat, align 4
  %tobool552 = icmp ne i32 %367, 0
  br i1 %tobool552, label %if.then.553, label %if.end.565

if.then.553:                                      ; preds = %if.end.546
  %368 = load i64, i64* %uc, align 8
  %and554 = and i64 %368, 7
  %sh_prom555 = trunc i64 %and554 to i32
  %shl556 = shl i32 1, %sh_prom555
  %369 = load i64, i64* %uc, align 8
  %shr557 = lshr i64 %369, 3
  %and558 = and i64 %shr557, 31
  %370 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class559 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %370, i32 0, i32 17
  %371 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class559, align 8
  %372 = bitcast %struct.regnode_charclass_class* %371 to %struct.regnode_charclass*
  %bitmap560 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %372, i32 0, i32 4
  %arrayidx561 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap560, i32 0, i64 %and558
  %373 = load i8, i8* %arrayidx561, align 1
  %conv562 = sext i8 %373 to i32
  %or563 = or i32 %conv562, %shl556
  %conv564 = trunc i32 %or563 to i8
  store i8 %conv564, i8* %arrayidx561, align 1
  br label %if.end.565

if.end.565:                                       ; preds = %if.then.553, %if.end.546
  %374 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class566 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %374, i32 0, i32 17
  %375 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class566, align 8
  %flags567 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %375, i32 0, i32 0
  %376 = load i8, i8* %flags567, align 1
  %conv568 = zext i8 %376 to i32
  %and569 = and i32 %conv568, -17
  %conv570 = trunc i32 %and569 to i8
  store i8 %conv570, i8* %flags567, align 1
  %377 = load i64, i64* %uc, align 8
  %cmp571 = icmp ult i64 %377, 256
  br i1 %cmp571, label %if.then.573, label %if.end.579

if.then.573:                                      ; preds = %if.end.565
  %378 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class574 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %378, i32 0, i32 17
  %379 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class574, align 8
  %flags575 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %379, i32 0, i32 0
  %380 = load i8, i8* %flags575, align 1
  %conv576 = zext i8 %380 to i32
  %and577 = and i32 %conv576, -65
  %conv578 = trunc i32 %and577 to i8
  store i8 %conv578, i8* %flags575, align 1
  br label %if.end.579

if.end.579:                                       ; preds = %if.then.573, %if.end.565
  br label %if.end.612

if.else.580:                                      ; preds = %if.end.503
  %381 = load i32, i32* %flags.addr, align 4
  %and581 = and i32 %381, 4096
  %tobool582 = icmp ne i32 %and581, 0
  br i1 %tobool582, label %if.then.583, label %if.end.611

if.then.583:                                      ; preds = %if.else.580
  %382 = load i64, i64* %uc, align 8
  %cmp584 = icmp ult i64 %382, 256
  br i1 %cmp584, label %if.then.586, label %if.else.598

if.then.586:                                      ; preds = %if.then.583
  %383 = load i64, i64* %uc, align 8
  %and587 = and i64 %383, 7
  %sh_prom588 = trunc i64 %and587 to i32
  %shl589 = shl i32 1, %sh_prom588
  %384 = load i64, i64* %uc, align 8
  %shr590 = lshr i64 %384, 3
  %and591 = and i64 %shr590, 31
  %385 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class592 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %385, i32 0, i32 17
  %386 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class592, align 8
  %387 = bitcast %struct.regnode_charclass_class* %386 to %struct.regnode_charclass*
  %bitmap593 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %387, i32 0, i32 4
  %arrayidx594 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap593, i32 0, i64 %and591
  %388 = load i8, i8* %arrayidx594, align 1
  %conv595 = sext i8 %388 to i32
  %or596 = or i32 %conv595, %shl589
  %conv597 = trunc i32 %or596 to i8
  store i8 %conv597, i8* %arrayidx594, align 1
  br label %if.end.604

if.else.598:                                      ; preds = %if.then.583
  %389 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class599 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %389, i32 0, i32 17
  %390 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class599, align 8
  %flags600 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %390, i32 0, i32 0
  %391 = load i8, i8* %flags600, align 1
  %conv601 = zext i8 %391 to i32
  %or602 = or i32 %conv601, 64
  %conv603 = trunc i32 %or602 to i8
  store i8 %conv603, i8* %flags600, align 1
  br label %if.end.604

if.end.604:                                       ; preds = %if.else.598, %if.then.586
  %392 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class605 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %392, i32 0, i32 17
  %393 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class605, align 8
  %flags606 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %393, i32 0, i32 0
  %394 = load i8, i8* %flags606, align 1
  %conv607 = zext i8 %394 to i32
  %and608 = and i32 %conv607, -17
  %conv609 = trunc i32 %and608 to i8
  store i8 %conv609, i8* %flags606, align 1
  %395 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class610 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %395, i32 0, i32 17
  %396 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class610, align 8
  call void @S_cl_and(%struct.regnode_charclass_class* %396, %struct.regnode_charclass_class* %and_with)
  br label %if.end.611

if.end.611:                                       ; preds = %if.end.604, %if.else.580
  br label %if.end.612

if.end.612:                                       ; preds = %if.end.611, %if.end.579
  %397 = load i32, i32* %flags.addr, align 4
  %and613 = and i32 %397, -6145
  store i32 %and613, i32* %flags.addr, align 4
  br label %if.end.2560

if.else.614:                                      ; preds = %if.else.412
  %398 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type615 = getelementptr inbounds %struct.regnode, %struct.regnode* %398, i32 0, i32 1
  %399 = load i8, i8* %type615, align 1
  %idxprom616 = zext i8 %399 to i64
  %arrayidx617 = getelementptr inbounds [62 x i8], [62 x i8]* @PL_regkind, i32 0, i64 %idxprom616
  %400 = load i8, i8* %arrayidx617, align 1
  %conv618 = zext i8 %400 to i32
  %cmp619 = icmp eq i32 %conv618, 33
  br i1 %cmp619, label %if.then.621, label %if.else.773

if.then.621:                                      ; preds = %if.else.614
  %401 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %402 = bitcast %struct.regnode* %401 to %struct.regnode_string*
  %str_len623 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %402, i32 0, i32 0
  %403 = load i8, i8* %str_len623, align 1
  %conv624 = zext i8 %403 to i32
  store i32 %conv624, i32* %l622, align 4
  %404 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %405 = bitcast %struct.regnode* %404 to %struct.regnode_string*
  %string626 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %405, i32 0, i32 3
  %arraydecay627 = getelementptr inbounds [1 x i8], [1 x i8]* %string626, i32 0, i32 0
  %406 = load i8, i8* %arraydecay627, align 1
  %conv628 = zext i8 %406 to i64
  store i64 %conv628, i64* %uc625, align 8
  %407 = load i32, i32* %flags.addr, align 4
  %and629 = and i32 %407, 1024
  %tobool630 = icmp ne i32 %and629, 0
  br i1 %tobool630, label %if.then.631, label %if.end.632

if.then.631:                                      ; preds = %if.then.621
  %408 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %409 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  call void @S_scan_commit(%struct.RExC_state_t* %408, %struct.scan_data_t* %409)
  br label %if.end.632

if.end.632:                                       ; preds = %if.then.631, %if.then.621
  %410 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8633 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %410, i32 0, i32 17
  %411 = load i32, i32* %utf8633, align 4
  %cmp634 = icmp ne i32 %411, 0
  br i1 %cmp634, label %if.then.636, label %if.end.645

if.then.636:                                      ; preds = %if.end.632
  %412 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %413 = bitcast %struct.regnode* %412 to %struct.regnode_string*
  %string638 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %413, i32 0, i32 3
  %arraydecay639 = getelementptr inbounds [1 x i8], [1 x i8]* %string638, i32 0, i32 0
  store i8* %arraydecay639, i8** %s637, align 8
  %414 = load i8*, i8** %s637, align 8
  %415 = load i8*, i8** %s637, align 8
  %416 = load i32, i32* %l622, align 4
  %idx.ext640 = sext i32 %416 to i64
  %add.ptr641 = getelementptr inbounds i8, i8* %415, i64 %idx.ext640
  %call642 = call i64 @Perl_utf8_length(i8* %414, i8* %add.ptr641)
  %conv643 = trunc i64 %call642 to i32
  store i32 %conv643, i32* %l622, align 4
  %417 = load i8*, i8** %s637, align 8
  %call644 = call i64 @Perl_utf8_to_uvchr(i8* %417, i64* null)
  store i64 %call644, i64* %uc625, align 8
  br label %if.end.645

if.end.645:                                       ; preds = %if.then.636, %if.end.632
  %418 = load i32, i32* %l622, align 4
  %419 = load i32, i32* %min, align 4
  %add646 = add nsw i32 %419, %418
  store i32 %add646, i32* %min, align 4
  %420 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool647 = icmp ne %struct.scan_data_t* %420, null
  br i1 %tobool647, label %land.lhs.true.648, label %if.end.654

land.lhs.true.648:                                ; preds = %if.end.645
  %421 = load i32, i32* %flags.addr, align 4
  %and649 = and i32 %421, 1024
  %tobool650 = icmp ne i32 %and649, 0
  br i1 %tobool650, label %if.then.651, label %if.end.654

if.then.651:                                      ; preds = %land.lhs.true.648
  %422 = load i32, i32* %l622, align 4
  %423 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min652 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %423, i32 0, i32 2
  %424 = load i32, i32* %pos_min652, align 4
  %add653 = add nsw i32 %424, %422
  store i32 %add653, i32* %pos_min652, align 4
  br label %if.end.654

if.end.654:                                       ; preds = %if.then.651, %land.lhs.true.648, %if.end.645
  %425 = load i32, i32* %flags.addr, align 4
  %and655 = and i32 %425, 2048
  %tobool656 = icmp ne i32 %and655, 0
  br i1 %tobool656, label %if.then.657, label %if.else.738

if.then.657:                                      ; preds = %if.end.654
  store i32 1, i32* %compat658, align 4
  %426 = load i64, i64* %uc625, align 8
  %cmp659 = icmp uge i64 %426, 256
  br i1 %cmp659, label %if.then.695, label %lor.lhs.false.661

lor.lhs.false.661:                                ; preds = %if.then.657
  %427 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class662 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %427, i32 0, i32 17
  %428 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class662, align 8
  %flags663 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %428, i32 0, i32 0
  %429 = load i8, i8* %flags663, align 1
  %conv664 = zext i8 %429 to i32
  %and665 = and i32 %conv664, 9
  %tobool666 = icmp ne i32 %and665, 0
  br i1 %tobool666, label %if.end.696, label %land.lhs.true.667

land.lhs.true.667:                                ; preds = %lor.lhs.false.661
  %430 = load i64, i64* %uc625, align 8
  %shr668 = lshr i64 %430, 3
  %and669 = and i64 %shr668, 31
  %431 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class670 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %431, i32 0, i32 17
  %432 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class670, align 8
  %433 = bitcast %struct.regnode_charclass_class* %432 to %struct.regnode_charclass*
  %bitmap671 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %433, i32 0, i32 4
  %arrayidx672 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap671, i32 0, i64 %and669
  %434 = load i8, i8* %arrayidx672, align 1
  %conv673 = sext i8 %434 to i32
  %435 = load i64, i64* %uc625, align 8
  %and674 = and i64 %435, 7
  %sh_prom675 = trunc i64 %and674 to i32
  %shl676 = shl i32 1, %sh_prom675
  %and677 = and i32 %conv673, %shl676
  %tobool678 = icmp ne i32 %and677, 0
  br i1 %tobool678, label %if.end.696, label %land.lhs.true.679

land.lhs.true.679:                                ; preds = %land.lhs.true.667
  %436 = load i64, i64* %uc625, align 8
  %arrayidx680 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_fold, i32 0, i64 %436
  %437 = load i8, i8* %arrayidx680, align 1
  %conv681 = zext i8 %437 to i32
  %shr682 = ashr i32 %conv681, 3
  %and683 = and i32 %shr682, 31
  %idxprom684 = sext i32 %and683 to i64
  %438 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class685 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %438, i32 0, i32 17
  %439 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class685, align 8
  %440 = bitcast %struct.regnode_charclass_class* %439 to %struct.regnode_charclass*
  %bitmap686 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %440, i32 0, i32 4
  %arrayidx687 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap686, i32 0, i64 %idxprom684
  %441 = load i8, i8* %arrayidx687, align 1
  %conv688 = sext i8 %441 to i32
  %442 = load i64, i64* %uc625, align 8
  %arrayidx689 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_fold, i32 0, i64 %442
  %443 = load i8, i8* %arrayidx689, align 1
  %conv690 = zext i8 %443 to i32
  %and691 = and i32 %conv690, 7
  %shl692 = shl i32 1, %and691
  %and693 = and i32 %conv688, %shl692
  %tobool694 = icmp ne i32 %and693, 0
  br i1 %tobool694, label %if.end.696, label %if.then.695

if.then.695:                                      ; preds = %land.lhs.true.679, %if.then.657
  store i32 0, i32* %compat658, align 4
  br label %if.end.696

if.end.696:                                       ; preds = %if.then.695, %land.lhs.true.679, %land.lhs.true.667, %lor.lhs.false.661
  %444 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class697 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %444, i32 0, i32 17
  %445 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class697, align 8
  %classflags698 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %445, i32 0, i32 5
  %arraydecay699 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags698, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* %arraydecay699, i8 0, i64 4, i32 1, i1 false)
  %446 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class700 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %446, i32 0, i32 17
  %447 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class700, align 8
  %448 = bitcast %struct.regnode_charclass_class* %447 to %struct.regnode_charclass*
  %bitmap701 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %448, i32 0, i32 4
  %arraydecay702 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap701, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* %arraydecay702, i8 0, i64 32, i32 1, i1 false)
  %449 = load i32, i32* %compat658, align 4
  %tobool703 = icmp ne i32 %449, 0
  br i1 %tobool703, label %if.then.704, label %if.end.737

if.then.704:                                      ; preds = %if.end.696
  %450 = load i64, i64* %uc625, align 8
  %and705 = and i64 %450, 7
  %sh_prom706 = trunc i64 %and705 to i32
  %shl707 = shl i32 1, %sh_prom706
  %451 = load i64, i64* %uc625, align 8
  %shr708 = lshr i64 %451, 3
  %and709 = and i64 %shr708, 31
  %452 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class710 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %452, i32 0, i32 17
  %453 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class710, align 8
  %454 = bitcast %struct.regnode_charclass_class* %453 to %struct.regnode_charclass*
  %bitmap711 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %454, i32 0, i32 4
  %arrayidx712 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap711, i32 0, i64 %and709
  %455 = load i8, i8* %arrayidx712, align 1
  %conv713 = sext i8 %455 to i32
  %or714 = or i32 %conv713, %shl707
  %conv715 = trunc i32 %or714 to i8
  store i8 %conv715, i8* %arrayidx712, align 1
  %456 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class716 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %456, i32 0, i32 17
  %457 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class716, align 8
  %flags717 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %457, i32 0, i32 0
  %458 = load i8, i8* %flags717, align 1
  %conv718 = zext i8 %458 to i32
  %and719 = and i32 %conv718, -17
  %conv720 = trunc i32 %and719 to i8
  store i8 %conv720, i8* %flags717, align 1
  %459 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class721 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %459, i32 0, i32 17
  %460 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class721, align 8
  %flags722 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %460, i32 0, i32 0
  %461 = load i8, i8* %flags722, align 1
  %conv723 = zext i8 %461 to i32
  %or724 = or i32 %conv723, 2
  %conv725 = trunc i32 %or724 to i8
  store i8 %conv725, i8* %flags722, align 1
  %462 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type726 = getelementptr inbounds %struct.regnode, %struct.regnode* %462, i32 0, i32 1
  %463 = load i8, i8* %type726, align 1
  %conv727 = zext i8 %463 to i32
  %cmp728 = icmp eq i32 %conv727, 35
  br i1 %cmp728, label %if.then.730, label %if.end.736

if.then.730:                                      ; preds = %if.then.704
  %464 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class731 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %464, i32 0, i32 17
  %465 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class731, align 8
  %flags732 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %465, i32 0, i32 0
  %466 = load i8, i8* %flags732, align 1
  %conv733 = zext i8 %466 to i32
  %or734 = or i32 %conv733, 1
  %conv735 = trunc i32 %or734 to i8
  store i8 %conv735, i8* %flags732, align 1
  br label %if.end.736

if.end.736:                                       ; preds = %if.then.730, %if.then.704
  br label %if.end.737

if.end.737:                                       ; preds = %if.end.736, %if.end.696
  br label %if.end.771

if.else.738:                                      ; preds = %if.end.654
  %467 = load i32, i32* %flags.addr, align 4
  %and739 = and i32 %467, 4096
  %tobool740 = icmp ne i32 %and739, 0
  br i1 %tobool740, label %if.then.741, label %if.end.770

if.then.741:                                      ; preds = %if.else.738
  %468 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class742 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %468, i32 0, i32 17
  %469 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class742, align 8
  %flags743 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %469, i32 0, i32 0
  %470 = load i8, i8* %flags743, align 1
  %conv744 = zext i8 %470 to i32
  %and745 = and i32 %conv744, 2
  %tobool746 = icmp ne i32 %and745, 0
  br i1 %tobool746, label %if.then.747, label %if.end.768

if.then.747:                                      ; preds = %if.then.741
  %471 = load i64, i64* %uc625, align 8
  %cmp748 = icmp ult i64 %471, 256
  br i1 %cmp748, label %if.then.750, label %if.end.762

if.then.750:                                      ; preds = %if.then.747
  %472 = load i64, i64* %uc625, align 8
  %and751 = and i64 %472, 7
  %sh_prom752 = trunc i64 %and751 to i32
  %shl753 = shl i32 1, %sh_prom752
  %473 = load i64, i64* %uc625, align 8
  %shr754 = lshr i64 %473, 3
  %and755 = and i64 %shr754, 31
  %474 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class756 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %474, i32 0, i32 17
  %475 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class756, align 8
  %476 = bitcast %struct.regnode_charclass_class* %475 to %struct.regnode_charclass*
  %bitmap757 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %476, i32 0, i32 4
  %arrayidx758 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap757, i32 0, i64 %and755
  %477 = load i8, i8* %arrayidx758, align 1
  %conv759 = sext i8 %477 to i32
  %or760 = or i32 %conv759, %shl753
  %conv761 = trunc i32 %or760 to i8
  store i8 %conv761, i8* %arrayidx758, align 1
  br label %if.end.762

if.end.762:                                       ; preds = %if.then.750, %if.then.747
  %478 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class763 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %478, i32 0, i32 17
  %479 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class763, align 8
  %flags764 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %479, i32 0, i32 0
  %480 = load i8, i8* %flags764, align 1
  %conv765 = zext i8 %480 to i32
  %and766 = and i32 %conv765, -17
  %conv767 = trunc i32 %and766 to i8
  store i8 %conv767, i8* %flags764, align 1
  br label %if.end.768

if.end.768:                                       ; preds = %if.end.762, %if.then.741
  %481 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class769 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %481, i32 0, i32 17
  %482 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class769, align 8
  call void @S_cl_and(%struct.regnode_charclass_class* %482, %struct.regnode_charclass_class* %and_with)
  br label %if.end.770

if.end.770:                                       ; preds = %if.end.768, %if.else.738
  br label %if.end.771

if.end.771:                                       ; preds = %if.end.770, %if.end.737
  %483 = load i32, i32* %flags.addr, align 4
  %and772 = and i32 %483, -6145
  store i32 %and772, i32* %flags.addr, align 4
  br label %if.end.2559

if.else.773:                                      ; preds = %if.else.614
  %484 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type774 = getelementptr inbounds %struct.regnode, %struct.regnode* %484, i32 0, i32 1
  %485 = load i8, i8* %type774, align 1
  %conv775 = zext i8 %485 to i32
  %call776 = call i8* @strchr(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @PL_varies, i32 0, i32 0), i32 %conv775)
  %tobool777 = icmp ne i8* %call776, null
  br i1 %tobool777, label %if.then.778, label %if.else.1479

if.then.778:                                      ; preds = %if.else.773
  store i32 0, i32* %fl, align 4
  %486 = load i32, i32* %flags.addr, align 4
  store i32 %486, i32* %f781, align 4
  store i32 0, i32* %pos_before, align 4
  %487 = load %struct.regnode*, %struct.regnode** %scan, align 8
  store %struct.regnode* %487, %struct.regnode** %oscan, align 8
  store %struct.regnode_charclass_class* null, %struct.regnode_charclass_class** %oclass, align 8
  store i32 0, i32* %next_is_eval, align 4
  %488 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type783 = getelementptr inbounds %struct.regnode, %struct.regnode* %488, i32 0, i32 1
  %489 = load i8, i8* %type783, align 1
  %idxprom784 = zext i8 %489 to i64
  %arrayidx785 = getelementptr inbounds [62 x i8], [62 x i8]* @PL_regkind, i32 0, i64 %idxprom784
  %490 = load i8, i8* %arrayidx785, align 1
  %conv786 = zext i8 %490 to i32
  switch i32 %conv786, label %sw.default [
    i32 44, label %sw.bb
    i32 39, label %sw.bb.788
    i32 38, label %sw.bb.812
    i32 40, label %sw.bb.826
  ]

sw.bb:                                            ; preds = %if.then.778
  %491 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %add.ptr787 = getelementptr inbounds %struct.regnode, %struct.regnode* %491, i64 1
  store %struct.regnode* %add.ptr787, %struct.regnode** %scan, align 8
  br label %finish

sw.bb.788:                                        ; preds = %if.then.778
  %492 = load i32, i32* %flags.addr, align 4
  %and789 = and i32 %492, 7168
  %tobool790 = icmp ne i32 %and789, 0
  br i1 %tobool790, label %if.then.791, label %if.end.804

if.then.791:                                      ; preds = %sw.bb.788
  %493 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %add.ptr792 = getelementptr inbounds %struct.regnode, %struct.regnode* %493, i64 1
  store %struct.regnode* %add.ptr792, %struct.regnode** %next, align 8
  %494 = load %struct.regnode*, %struct.regnode** %next, align 8
  %type793 = getelementptr inbounds %struct.regnode, %struct.regnode* %494, i32 0, i32 1
  %495 = load i8, i8* %type793, align 1
  %conv794 = zext i8 %495 to i32
  %cmp795 = icmp eq i32 %conv794, 33
  br i1 %cmp795, label %if.then.800, label %lor.lhs.false.797

lor.lhs.false.797:                                ; preds = %if.then.791
  %496 = load i32, i32* %flags.addr, align 4
  %and798 = and i32 %496, 6144
  %tobool799 = icmp ne i32 %and798, 0
  br i1 %tobool799, label %if.then.800, label %if.end.803

if.then.800:                                      ; preds = %lor.lhs.false.797, %if.then.791
  store i32 1, i32* %mincount, align 4
  store i32 32767, i32* %maxcount, align 4
  %497 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %call801 = call %struct.regnode* @Perl_regnext(%struct.regnode* %497)
  store %struct.regnode* %call801, %struct.regnode** %next, align 8
  %498 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %add.ptr802 = getelementptr inbounds %struct.regnode, %struct.regnode* %498, i64 1
  store %struct.regnode* %add.ptr802, %struct.regnode** %scan, align 8
  br label %do_curly

if.end.803:                                       ; preds = %lor.lhs.false.797
  br label %if.end.804

if.end.804:                                       ; preds = %if.end.803, %sw.bb.788
  %499 = load i32, i32* %flags.addr, align 4
  %and805 = and i32 %499, 1024
  %tobool806 = icmp ne i32 %and805, 0
  br i1 %tobool806, label %if.then.807, label %if.end.810

if.then.807:                                      ; preds = %if.end.804
  %500 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min808 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %500, i32 0, i32 2
  %501 = load i32, i32* %pos_min808, align 4
  %inc809 = add nsw i32 %501, 1
  store i32 %inc809, i32* %pos_min808, align 4
  br label %if.end.810

if.end.810:                                       ; preds = %if.then.807, %if.end.804
  %502 = load i32, i32* %min, align 4
  %inc811 = add nsw i32 %502, 1
  store i32 %inc811, i32* %min, align 4
  br label %sw.bb.812

sw.bb.812:                                        ; preds = %if.then.778, %if.end.810
  %503 = load i32, i32* %flags.addr, align 4
  %and813 = and i32 %503, 6144
  %tobool814 = icmp ne i32 %and813, 0
  br i1 %tobool814, label %if.then.815, label %if.end.818

if.then.815:                                      ; preds = %sw.bb.812
  store i32 0, i32* %mincount, align 4
  store i32 32767, i32* %maxcount, align 4
  %504 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %call816 = call %struct.regnode* @Perl_regnext(%struct.regnode* %504)
  store %struct.regnode* %call816, %struct.regnode** %next, align 8
  %505 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %add.ptr817 = getelementptr inbounds %struct.regnode, %struct.regnode* %505, i64 1
  store %struct.regnode* %add.ptr817, %struct.regnode** %scan, align 8
  br label %do_curly

if.end.818:                                       ; preds = %sw.bb.812
  store i32 1, i32* %is_inf_internal, align 4
  store i32 1, i32* %is_inf, align 4
  %506 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %call819 = call %struct.regnode* @Perl_regnext(%struct.regnode* %506)
  store %struct.regnode* %call819, %struct.regnode** %scan, align 8
  %507 = load i32, i32* %flags.addr, align 4
  %and820 = and i32 %507, 1024
  %tobool821 = icmp ne i32 %and820, 0
  br i1 %tobool821, label %if.then.822, label %if.end.825

if.then.822:                                      ; preds = %if.end.818
  %508 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %509 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  call void @S_scan_commit(%struct.RExC_state_t* %508, %struct.scan_data_t* %509)
  %510 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest_float823 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %510, i32 0, i32 11
  %511 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest824 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %511, i32 0, i32 8
  store %struct.sv** %longest_float823, %struct.sv*** %longest824, align 8
  br label %if.end.825

if.end.825:                                       ; preds = %if.then.822, %if.end.818
  br label %optimize_curly_tail

sw.bb.826:                                        ; preds = %if.then.778
  %512 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %513 = bitcast %struct.regnode* %512 to %struct.regnode_2*
  %arg1827 = getelementptr inbounds %struct.regnode_2, %struct.regnode_2* %513, i32 0, i32 3
  %514 = load i16, i16* %arg1827, align 2
  %conv828 = zext i16 %514 to i32
  store i32 %conv828, i32* %mincount, align 4
  %515 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %516 = bitcast %struct.regnode* %515 to %struct.regnode_2*
  %arg2 = getelementptr inbounds %struct.regnode_2, %struct.regnode_2* %516, i32 0, i32 4
  %517 = load i16, i16* %arg2, align 2
  %conv829 = zext i16 %517 to i32
  store i32 %conv829, i32* %maxcount, align 4
  %518 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %call830 = call %struct.regnode* @Perl_regnext(%struct.regnode* %518)
  store %struct.regnode* %call830, %struct.regnode** %next, align 8
  %519 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type831 = getelementptr inbounds %struct.regnode, %struct.regnode* %519, i32 0, i32 1
  %520 = load i8, i8* %type831, align 1
  %conv832 = zext i8 %520 to i32
  %cmp833 = icmp eq i32 %conv832, 43
  br i1 %cmp833, label %if.then.835, label %if.end.850

if.then.835:                                      ; preds = %sw.bb.826
  %521 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool836 = icmp ne %struct.scan_data_t* %521, null
  br i1 %tobool836, label %cond.true.837, label %cond.false.839

cond.true.837:                                    ; preds = %if.then.835
  %522 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_closep838 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %522, i32 0, i32 16
  %523 = load i32*, i32** %last_closep838, align 8
  %524 = load i32, i32* %523, align 4
  br label %cond.end.840

cond.false.839:                                   ; preds = %if.then.835
  br label %cond.end.840

cond.end.840:                                     ; preds = %cond.false.839, %cond.true.837
  %cond841 = phi i32 [ %524, %cond.true.837 ], [ 0, %cond.false.839 ]
  store i32 %cond841, i32* %lp, align 4
  %525 = load i32, i32* %lp, align 4
  %cmp842 = icmp sle i32 %525, 255
  br i1 %cmp842, label %cond.true.844, label %cond.false.845

cond.true.844:                                    ; preds = %cond.end.840
  %526 = load i32, i32* %lp, align 4
  br label %cond.end.846

cond.false.845:                                   ; preds = %cond.end.840
  br label %cond.end.846

cond.end.846:                                     ; preds = %cond.false.845, %cond.true.844
  %cond847 = phi i32 [ %526, %cond.true.844 ], [ 255, %cond.false.845 ]
  %conv848 = trunc i32 %cond847 to i8
  %527 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %flags849 = getelementptr inbounds %struct.regnode, %struct.regnode* %527, i32 0, i32 0
  store i8 %conv848, i8* %flags849, align 1
  br label %if.end.850

if.end.850:                                       ; preds = %cond.end.846, %sw.bb.826
  %528 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %add.ptr851 = getelementptr inbounds %struct.regnode, %struct.regnode* %528, i64 1
  %add.ptr852 = getelementptr inbounds %struct.regnode, %struct.regnode* %add.ptr851, i64 1
  store %struct.regnode* %add.ptr852, %struct.regnode** %scan, align 8
  %529 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type853 = getelementptr inbounds %struct.regnode, %struct.regnode* %529, i32 0, i32 1
  %530 = load i8, i8* %type853, align 1
  %conv854 = zext i8 %530 to i32
  %cmp855 = icmp eq i32 %conv854, 57
  %conv856 = zext i1 %cmp855 to i32
  store i32 %conv856, i32* %next_is_eval, align 4
  br label %do_curly

do_curly:                                         ; preds = %if.end.850, %if.then.815, %if.then.800
  %531 = load i32, i32* %flags.addr, align 4
  %and857 = and i32 %531, 1024
  %tobool858 = icmp ne i32 %and857, 0
  br i1 %tobool858, label %if.then.859, label %if.end.865

if.then.859:                                      ; preds = %do_curly
  %532 = load i32, i32* %mincount, align 4
  %cmp860 = icmp eq i32 %532, 0
  br i1 %cmp860, label %if.then.862, label %if.end.863

if.then.862:                                      ; preds = %if.then.859
  %533 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %534 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  call void @S_scan_commit(%struct.RExC_state_t* %533, %struct.scan_data_t* %534)
  br label %if.end.863

if.end.863:                                       ; preds = %if.then.862, %if.then.859
  %535 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min864 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %535, i32 0, i32 2
  %536 = load i32, i32* %pos_min864, align 4
  store i32 %536, i32* %pos_before, align 4
  br label %if.end.865

if.end.865:                                       ; preds = %if.end.863, %do_curly
  %537 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool866 = icmp ne %struct.scan_data_t* %537, null
  br i1 %tobool866, label %if.then.867, label %if.end.876

if.then.867:                                      ; preds = %if.end.865
  %538 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags868 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %538, i32 0, i32 14
  %539 = load i32, i32* %flags868, align 4
  store i32 %539, i32* %fl, align 4
  %540 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags869 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %540, i32 0, i32 14
  %541 = load i32, i32* %flags869, align 4
  %and870 = and i32 %541, -897
  store i32 %and870, i32* %flags869, align 4
  %542 = load i32, i32* %is_inf, align 4
  %tobool871 = icmp ne i32 %542, 0
  br i1 %tobool871, label %if.then.872, label %if.end.875

if.then.872:                                      ; preds = %if.then.867
  %543 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags873 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %543, i32 0, i32 14
  %544 = load i32, i32* %flags873, align 4
  %or874 = or i32 %544, 64
  store i32 %or874, i32* %flags873, align 4
  br label %if.end.875

if.end.875:                                       ; preds = %if.then.872, %if.then.867
  br label %if.end.876

if.end.876:                                       ; preds = %if.end.875, %if.end.865
  %545 = load i32, i32* %flags.addr, align 4
  %and877 = and i32 %545, 6144
  %tobool878 = icmp ne i32 %and877, 0
  br i1 %tobool878, label %if.then.879, label %if.end.884

if.then.879:                                      ; preds = %if.end.876
  %546 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  call void @S_cl_init(%struct.RExC_state_t* %546, %struct.regnode_charclass_class* %this_class782)
  %547 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class880 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %547, i32 0, i32 17
  %548 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class880, align 8
  store %struct.regnode_charclass_class* %548, %struct.regnode_charclass_class** %oclass, align 8
  %549 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class881 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %549, i32 0, i32 17
  store %struct.regnode_charclass_class* %this_class782, %struct.regnode_charclass_class** %start_class881, align 8
  %550 = load i32, i32* %f781, align 4
  %or882 = or i32 %550, 2048
  store i32 %or882, i32* %f781, align 4
  %551 = load i32, i32* %f781, align 4
  %and883 = and i32 %551, -4097
  store i32 %and883, i32* %f781, align 4
  br label %if.end.884

if.end.884:                                       ; preds = %if.then.879, %if.end.876
  %552 = load i32, i32* %mincount, align 4
  %553 = load i32, i32* %maxcount, align 4
  %sub885 = sub nsw i32 %553, 1
  %cmp886 = icmp ne i32 %552, %sub885
  br i1 %cmp886, label %land.lhs.true.888, label %if.end.893

land.lhs.true.888:                                ; preds = %if.end.884
  %554 = load i32, i32* %maxcount, align 4
  %cmp889 = icmp ne i32 %554, 32767
  br i1 %cmp889, label %if.then.891, label %if.end.893

if.then.891:                                      ; preds = %land.lhs.true.888
  %555 = load i32, i32* %f781, align 4
  %and892 = and i32 %555, -8193
  store i32 %and892, i32* %f781, align 4
  br label %if.end.893

if.end.893:                                       ; preds = %if.then.891, %land.lhs.true.888, %if.end.884
  %556 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %557 = load %struct.regnode*, %struct.regnode** %last.addr, align 8
  %558 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %559 = load i32, i32* %mincount, align 4
  %cmp894 = icmp eq i32 %559, 0
  br i1 %cmp894, label %cond.true.896, label %cond.false.898

cond.true.896:                                    ; preds = %if.end.893
  %560 = load i32, i32* %f781, align 4
  %and897 = and i32 %560, -1025
  br label %cond.end.899

cond.false.898:                                   ; preds = %if.end.893
  %561 = load i32, i32* %f781, align 4
  br label %cond.end.899

cond.end.899:                                     ; preds = %cond.false.898, %cond.true.896
  %cond900 = phi i32 [ %and897, %cond.true.896 ], [ %561, %cond.false.898 ]
  %call901 = call i32 @S_study_chunk(%struct.RExC_state_t* %556, %struct.regnode** %scan, i32* %deltanext780, %struct.regnode* %557, %struct.scan_data_t* %558, i32 %cond900)
  store i32 %call901, i32* %minnext779, align 4
  %562 = load i32, i32* %flags.addr, align 4
  %and902 = and i32 %562, 6144
  %tobool903 = icmp ne i32 %and902, 0
  br i1 %tobool903, label %if.then.904, label %if.end.906

if.then.904:                                      ; preds = %cond.end.899
  %563 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %oclass, align 8
  %564 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class905 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %564, i32 0, i32 17
  store %struct.regnode_charclass_class* %563, %struct.regnode_charclass_class** %start_class905, align 8
  br label %if.end.906

if.end.906:                                       ; preds = %if.then.904, %cond.end.899
  %565 = load i32, i32* %mincount, align 4
  %cmp907 = icmp eq i32 %565, 0
  br i1 %cmp907, label %if.then.912, label %lor.lhs.false.909

lor.lhs.false.909:                                ; preds = %if.end.906
  %566 = load i32, i32* %minnext779, align 4
  %cmp910 = icmp eq i32 %566, 0
  br i1 %cmp910, label %if.then.912, label %if.else.932

if.then.912:                                      ; preds = %lor.lhs.false.909, %if.end.906
  %567 = load i32, i32* %flags.addr, align 4
  %and913 = and i32 %567, 4096
  %tobool914 = icmp ne i32 %and913, 0
  br i1 %tobool914, label %if.then.915, label %if.else.917

if.then.915:                                      ; preds = %if.then.912
  %568 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %569 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class916 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %569, i32 0, i32 17
  %570 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class916, align 8
  call void @S_cl_or(%struct.RExC_state_t* %568, %struct.regnode_charclass_class* %570, %struct.regnode_charclass_class* %this_class782)
  br label %if.end.931

if.else.917:                                      ; preds = %if.then.912
  %571 = load i32, i32* %flags.addr, align 4
  %and918 = and i32 %571, 2048
  %tobool919 = icmp ne i32 %and918, 0
  br i1 %tobool919, label %if.then.920, label %if.end.930

if.then.920:                                      ; preds = %if.else.917
  %572 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class921 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %572, i32 0, i32 17
  %573 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class921, align 8
  %574 = bitcast %struct.regnode_charclass_class* %and_with to i8*
  %575 = bitcast %struct.regnode_charclass_class* %573 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %574, i8* %575, i64 44, i32 4, i1 false)
  %576 = load i32, i32* %flags.addr, align 4
  %and922 = and i32 %576, -2049
  store i32 %and922, i32* %flags.addr, align 4
  %577 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class923 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %577, i32 0, i32 17
  %578 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class923, align 8
  %579 = bitcast %struct.regnode_charclass_class* %578 to i8*
  %580 = bitcast %struct.regnode_charclass_class* %this_class782 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %579, i8* %580, i64 44, i32 4, i1 false)
  %581 = load i32, i32* %flags.addr, align 4
  %or924 = or i32 %581, 4096
  store i32 %or924, i32* %flags.addr, align 4
  %582 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class925 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %582, i32 0, i32 17
  %583 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class925, align 8
  %flags926 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %583, i32 0, i32 0
  %584 = load i8, i8* %flags926, align 1
  %conv927 = zext i8 %584 to i32
  %or928 = or i32 %conv927, 16
  %conv929 = trunc i32 %or928 to i8
  store i8 %conv929, i8* %flags926, align 1
  br label %if.end.930

if.end.930:                                       ; preds = %if.then.920, %if.else.917
  br label %if.end.931

if.end.931:                                       ; preds = %if.end.930, %if.then.915
  br label %if.end.946

if.else.932:                                      ; preds = %lor.lhs.false.909
  %585 = load i32, i32* %flags.addr, align 4
  %and933 = and i32 %585, 4096
  %tobool934 = icmp ne i32 %and933, 0
  br i1 %tobool934, label %if.then.935, label %if.else.938

if.then.935:                                      ; preds = %if.else.932
  %586 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %587 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class936 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %587, i32 0, i32 17
  %588 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class936, align 8
  call void @S_cl_or(%struct.RExC_state_t* %586, %struct.regnode_charclass_class* %588, %struct.regnode_charclass_class* %this_class782)
  %589 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class937 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %589, i32 0, i32 17
  %590 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class937, align 8
  call void @S_cl_and(%struct.regnode_charclass_class* %590, %struct.regnode_charclass_class* %and_with)
  br label %if.end.944

if.else.938:                                      ; preds = %if.else.932
  %591 = load i32, i32* %flags.addr, align 4
  %and939 = and i32 %591, 2048
  %tobool940 = icmp ne i32 %and939, 0
  br i1 %tobool940, label %if.then.941, label %if.end.943

if.then.941:                                      ; preds = %if.else.938
  %592 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class942 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %592, i32 0, i32 17
  %593 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class942, align 8
  call void @S_cl_and(%struct.regnode_charclass_class* %593, %struct.regnode_charclass_class* %this_class782)
  br label %if.end.943

if.end.943:                                       ; preds = %if.then.941, %if.else.938
  br label %if.end.944

if.end.944:                                       ; preds = %if.end.943, %if.then.935
  %594 = load i32, i32* %flags.addr, align 4
  %and945 = and i32 %594, -6145
  store i32 %and945, i32* %flags.addr, align 4
  br label %if.end.946

if.end.946:                                       ; preds = %if.end.944, %if.end.931
  %595 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %tobool947 = icmp ne %struct.regnode* %595, null
  br i1 %tobool947, label %if.end.949, label %if.then.948

if.then.948:                                      ; preds = %if.end.946
  %596 = load %struct.regnode*, %struct.regnode** %next, align 8
  store %struct.regnode* %596, %struct.regnode** %scan, align 8
  br label %if.end.949

if.end.949:                                       ; preds = %if.then.948, %if.end.946
  %597 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %597, i32 0, i32 14
  %598 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp950 = icmp ne %struct.sv* %598, null
  br i1 %cmp950, label %land.lhs.true.952, label %lor.lhs.false.966

land.lhs.true.952:                                ; preds = %if.end.949
  %599 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings953 = getelementptr inbounds %struct.cop, %struct.cop* %599, i32 0, i32 14
  %600 = load %struct.sv*, %struct.sv** %cop_warnings953, align 8
  %cmp954 = icmp ne %struct.sv* %600, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp954, label %land.lhs.true.956, label %lor.lhs.false.966

land.lhs.true.956:                                ; preds = %land.lhs.true.952
  %601 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings957 = getelementptr inbounds %struct.cop, %struct.cop* %601, i32 0, i32 14
  %602 = load %struct.sv*, %struct.sv** %cop_warnings957, align 8
  %cmp958 = icmp eq %struct.sv* %602, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp958, label %land.lhs.true.974, label %lor.lhs.false.960

lor.lhs.false.960:                                ; preds = %land.lhs.true.956
  %603 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings961 = getelementptr inbounds %struct.cop, %struct.cop* %603, i32 0, i32 14
  %604 = load %struct.sv*, %struct.sv** %cop_warnings961, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %604, i32 0, i32 0
  %605 = load i8*, i8** %sv_any, align 8
  %606 = bitcast i8* %605 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %606, i32 0, i32 0
  %607 = load i8*, i8** %xpv_pv, align 8
  %arrayidx962 = getelementptr inbounds i8, i8* %607, i64 5
  %608 = load i8, i8* %arrayidx962, align 1
  %conv963 = sext i8 %608 to i32
  %and964 = and i32 %conv963, 1
  %tobool965 = icmp ne i32 %and964, 0
  br i1 %tobool965, label %land.lhs.true.974, label %lor.lhs.false.966

lor.lhs.false.966:                                ; preds = %lor.lhs.false.960, %land.lhs.true.952, %if.end.949
  %609 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings967 = getelementptr inbounds %struct.cop, %struct.cop* %609, i32 0, i32 14
  %610 = load %struct.sv*, %struct.sv** %cop_warnings967, align 8
  %cmp968 = icmp eq %struct.sv* %610, null
  br i1 %cmp968, label %land.lhs.true.970, label %if.end.1002

land.lhs.true.970:                                ; preds = %lor.lhs.false.966
  %611 = load i8, i8* @PL_dowarn, align 1
  %conv971 = zext i8 %611 to i32
  %and972 = and i32 %conv971, 1
  %tobool973 = icmp ne i32 %and972, 0
  br i1 %tobool973, label %land.lhs.true.974, label %if.end.1002

land.lhs.true.974:                                ; preds = %land.lhs.true.970, %lor.lhs.false.960, %land.lhs.true.956
  %612 = load i32, i32* %next_is_eval, align 4
  %tobool975 = icmp ne i32 %612, 0
  br i1 %tobool975, label %land.lhs.true.982, label %lor.lhs.false.976

lor.lhs.false.976:                                ; preds = %land.lhs.true.974
  %613 = load i32, i32* %mincount, align 4
  %cmp977 = icmp eq i32 %613, 0
  br i1 %cmp977, label %land.lhs.true.979, label %land.lhs.true.982

land.lhs.true.979:                                ; preds = %lor.lhs.false.976
  %614 = load i32, i32* %maxcount, align 4
  %cmp980 = icmp eq i32 %614, 1
  br i1 %cmp980, label %if.end.1002, label %land.lhs.true.982

land.lhs.true.982:                                ; preds = %land.lhs.true.979, %lor.lhs.false.976, %land.lhs.true.974
  %615 = load i32, i32* %minnext779, align 4
  %cmp983 = icmp eq i32 %615, 0
  br i1 %cmp983, label %land.lhs.true.985, label %if.end.1002

land.lhs.true.985:                                ; preds = %land.lhs.true.982
  %616 = load i32, i32* %deltanext780, align 4
  %cmp986 = icmp eq i32 %616, 0
  br i1 %cmp986, label %land.lhs.true.988, label %if.end.1002

land.lhs.true.988:                                ; preds = %land.lhs.true.985
  %617 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool989 = icmp ne %struct.scan_data_t* %617, null
  br i1 %tobool989, label %land.lhs.true.990, label %if.end.1002

land.lhs.true.990:                                ; preds = %land.lhs.true.988
  %618 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags991 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %618, i32 0, i32 14
  %619 = load i32, i32* %flags991, align 4
  %and992 = and i32 %619, 384
  %tobool993 = icmp ne i32 %and992, 0
  br i1 %tobool993, label %if.end.1002, label %land.lhs.true.994

land.lhs.true.994:                                ; preds = %land.lhs.true.990
  %620 = load i32, i32* %maxcount, align 4
  %cmp995 = icmp sle i32 %620, 10922
  br i1 %cmp995, label %if.then.997, label %if.end.1002

if.then.997:                                      ; preds = %land.lhs.true.994
  %621 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %621, i32 0, i32 5
  %622 = load i8*, i8** %parse, align 8
  %623 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %623, i32 0, i32 1
  %624 = load i8*, i8** %precomp, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %622 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %624 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %offset, align 8
  %625 = load i64, i64* %offset, align 8
  %conv998 = trunc i64 %625 to i32
  %626 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp999 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %626, i32 0, i32 1
  %627 = load i8*, i8** %precomp999, align 8
  %628 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1000 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %628, i32 0, i32 1
  %629 = load i8*, i8** %precomp1000, align 8
  %630 = load i64, i64* %offset, align 8
  %add.ptr1001 = getelementptr inbounds i8, i8* %629, i64 %630
  call void (i32, i8*, ...) @Perl_warner(i32 20, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.12, i32 0, i32 0), i32 %conv998, i8* %627, i8* %add.ptr1001)
  br label %if.end.1002

if.end.1002:                                      ; preds = %if.then.997, %land.lhs.true.994, %land.lhs.true.990, %land.lhs.true.988, %land.lhs.true.985, %land.lhs.true.982, %land.lhs.true.979, %land.lhs.true.970, %lor.lhs.false.966
  %631 = load i32, i32* %minnext779, align 4
  %632 = load i32, i32* %mincount, align 4
  %mul1003 = mul nsw i32 %631, %632
  %633 = load i32, i32* %min, align 4
  %add1004 = add nsw i32 %633, %mul1003
  store i32 %add1004, i32* %min, align 4
  %634 = load i32, i32* %maxcount, align 4
  %cmp1005 = icmp eq i32 %634, 32767
  br i1 %cmp1005, label %land.lhs.true.1007, label %lor.rhs

land.lhs.true.1007:                               ; preds = %if.end.1002
  %635 = load i32, i32* %minnext779, align 4
  %636 = load i32, i32* %deltanext780, align 4
  %add1008 = add nsw i32 %635, %636
  %cmp1009 = icmp sgt i32 %add1008, 0
  br i1 %cmp1009, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.lhs.true.1007, %if.end.1002
  %637 = load i32, i32* %deltanext780, align 4
  %cmp1011 = icmp eq i32 %637, 2147483647
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.lhs.true.1007
  %638 = phi i1 [ true, %land.lhs.true.1007 ], [ %cmp1011, %lor.rhs ]
  %lor.ext = zext i1 %638 to i32
  %639 = load i32, i32* %is_inf_internal, align 4
  %or1013 = or i32 %639, %lor.ext
  store i32 %or1013, i32* %is_inf_internal, align 4
  %640 = load i32, i32* %is_inf_internal, align 4
  %641 = load i32, i32* %is_inf, align 4
  %or1014 = or i32 %641, %640
  store i32 %or1014, i32* %is_inf, align 4
  %642 = load i32, i32* %minnext779, align 4
  %643 = load i32, i32* %deltanext780, align 4
  %add1015 = add nsw i32 %642, %643
  %644 = load i32, i32* %maxcount, align 4
  %mul1016 = mul nsw i32 %add1015, %644
  %645 = load i32, i32* %minnext779, align 4
  %646 = load i32, i32* %mincount, align 4
  %mul1017 = mul nsw i32 %645, %646
  %sub1018 = sub nsw i32 %mul1016, %mul1017
  %647 = load i32, i32* %delta, align 4
  %add1019 = add nsw i32 %647, %sub1018
  store i32 %add1019, i32* %delta, align 4
  %648 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %type1020 = getelementptr inbounds %struct.regnode, %struct.regnode* %648, i32 0, i32 1
  %649 = load i8, i8* %type1020, align 1
  %conv1021 = zext i8 %649 to i32
  %cmp1022 = icmp eq i32 %conv1021, 43
  br i1 %cmp1022, label %land.lhs.true.1024, label %if.end.1073

land.lhs.true.1024:                               ; preds = %lor.end
  %650 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool1025 = icmp ne %struct.scan_data_t* %650, null
  br i1 %tobool1025, label %land.lhs.true.1026, label %if.end.1073

land.lhs.true.1026:                               ; preds = %land.lhs.true.1024
  %651 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags1027 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %651, i32 0, i32 14
  %652 = load i32, i32* %flags1027, align 4
  %and1028 = and i32 %652, 256
  %tobool1029 = icmp ne i32 %and1028, 0
  br i1 %tobool1029, label %land.lhs.true.1030, label %if.end.1073

land.lhs.true.1030:                               ; preds = %land.lhs.true.1026
  %653 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags1031 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %653, i32 0, i32 14
  %654 = load i32, i32* %flags1031, align 4
  %and1032 = and i32 %654, 512
  %tobool1033 = icmp ne i32 %and1032, 0
  br i1 %tobool1033, label %if.end.1073, label %land.lhs.true.1034

land.lhs.true.1034:                               ; preds = %land.lhs.true.1030
  %655 = load i32, i32* %deltanext780, align 4
  %tobool1035 = icmp ne i32 %655, 0
  br i1 %tobool1035, label %if.end.1073, label %land.lhs.true.1036

land.lhs.true.1036:                               ; preds = %land.lhs.true.1034
  %656 = load i32, i32* %minnext779, align 4
  %cmp1037 = icmp eq i32 %656, 1
  br i1 %cmp1037, label %if.then.1039, label %if.end.1073

if.then.1039:                                     ; preds = %land.lhs.true.1036
  %657 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %add.ptr1040 = getelementptr inbounds %struct.regnode, %struct.regnode* %657, i64 1
  %add.ptr1041 = getelementptr inbounds %struct.regnode, %struct.regnode* %add.ptr1040, i64 1
  store %struct.regnode* %add.ptr1041, %struct.regnode** %nxt, align 8
  %658 = load %struct.regnode*, %struct.regnode** %nxt, align 8
  store %struct.regnode* %658, %struct.regnode** %nxt1, align 8
  %659 = load %struct.regnode*, %struct.regnode** %nxt, align 8
  %call1042 = call %struct.regnode* @Perl_regnext(%struct.regnode* %659)
  store %struct.regnode* %call1042, %struct.regnode** %nxt, align 8
  %660 = load %struct.regnode*, %struct.regnode** %nxt, align 8
  %type1043 = getelementptr inbounds %struct.regnode, %struct.regnode* %660, i32 0, i32 1
  %661 = load i8, i8* %type1043, align 1
  %conv1044 = zext i8 %661 to i32
  %call1045 = call i8* @strchr(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @PL_simple, i32 0, i32 0), i32 %conv1044)
  %tobool1046 = icmp ne i8* %call1045, null
  br i1 %tobool1046, label %if.end.1060, label %land.lhs.true.1047

land.lhs.true.1047:                               ; preds = %if.then.1039
  %662 = load %struct.regnode*, %struct.regnode** %nxt, align 8
  %type1048 = getelementptr inbounds %struct.regnode, %struct.regnode* %662, i32 0, i32 1
  %663 = load i8, i8* %type1048, align 1
  %idxprom1049 = zext i8 %663 to i64
  %arrayidx1050 = getelementptr inbounds [62 x i8], [62 x i8]* @PL_regkind, i32 0, i64 %idxprom1049
  %664 = load i8, i8* %arrayidx1050, align 1
  %conv1051 = zext i8 %664 to i32
  %cmp1052 = icmp eq i32 %conv1051, 33
  br i1 %cmp1052, label %land.lhs.true.1054, label %if.then.1059

land.lhs.true.1054:                               ; preds = %land.lhs.true.1047
  %665 = load %struct.regnode*, %struct.regnode** %nxt, align 8
  %666 = bitcast %struct.regnode* %665 to %struct.regnode_string*
  %str_len1055 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %666, i32 0, i32 0
  %667 = load i8, i8* %str_len1055, align 1
  %conv1056 = zext i8 %667 to i32
  %cmp1057 = icmp eq i32 %conv1056, 1
  br i1 %cmp1057, label %if.end.1060, label %if.then.1059

if.then.1059:                                     ; preds = %land.lhs.true.1054, %land.lhs.true.1047
  br label %nogo

if.end.1060:                                      ; preds = %land.lhs.true.1054, %if.then.1039
  %668 = load %struct.regnode*, %struct.regnode** %nxt, align 8
  %call1061 = call %struct.regnode* @Perl_regnext(%struct.regnode* %668)
  store %struct.regnode* %call1061, %struct.regnode** %nxt, align 8
  %669 = load %struct.regnode*, %struct.regnode** %nxt, align 8
  %type1062 = getelementptr inbounds %struct.regnode, %struct.regnode* %669, i32 0, i32 1
  %670 = load i8, i8* %type1062, align 1
  %conv1063 = zext i8 %670 to i32
  %cmp1064 = icmp ne i32 %conv1063, 46
  br i1 %cmp1064, label %if.then.1066, label %if.end.1067

if.then.1066:                                     ; preds = %if.end.1060
  br label %nogo

if.end.1067:                                      ; preds = %if.end.1060
  %671 = load %struct.regnode*, %struct.regnode** %nxt, align 8
  %672 = bitcast %struct.regnode* %671 to %struct.regnode_1*
  %arg11068 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %672, i32 0, i32 3
  %673 = load i32, i32* %arg11068, align 4
  %conv1069 = trunc i32 %673 to i8
  %674 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %flags1070 = getelementptr inbounds %struct.regnode, %struct.regnode* %674, i32 0, i32 0
  store i8 %conv1069, i8* %flags1070, align 1
  %675 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %type1071 = getelementptr inbounds %struct.regnode, %struct.regnode* %675, i32 0, i32 1
  store i8 41, i8* %type1071, align 1
  %676 = load %struct.regnode*, %struct.regnode** %nxt1, align 8
  %type1072 = getelementptr inbounds %struct.regnode, %struct.regnode* %676, i32 0, i32 1
  store i8 36, i8* %type1072, align 1
  br label %if.end.1073

if.end.1073:                                      ; preds = %if.end.1067, %land.lhs.true.1036, %land.lhs.true.1034, %land.lhs.true.1030, %land.lhs.true.1026, %land.lhs.true.1024, %lor.end
  br label %nogo

nogo:                                             ; preds = %if.end.1073, %if.then.1066, %if.then.1059
  %677 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %type1074 = getelementptr inbounds %struct.regnode, %struct.regnode* %677, i32 0, i32 1
  %678 = load i8, i8* %type1074, align 1
  %conv1075 = zext i8 %678 to i32
  %cmp1076 = icmp eq i32 %conv1075, 43
  br i1 %cmp1076, label %land.lhs.true.1078, label %if.else.1147

land.lhs.true.1078:                               ; preds = %nogo
  %679 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool1079 = icmp ne %struct.scan_data_t* %679, null
  br i1 %tobool1079, label %land.lhs.true.1080, label %if.else.1147

land.lhs.true.1080:                               ; preds = %land.lhs.true.1078
  %680 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags1081 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %680, i32 0, i32 14
  %681 = load i32, i32* %flags1081, align 4
  %and1082 = and i32 %681, 128
  %tobool1083 = icmp ne i32 %and1082, 0
  br i1 %tobool1083, label %if.else.1147, label %land.lhs.true.1084

land.lhs.true.1084:                               ; preds = %land.lhs.true.1080
  %682 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags1085 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %682, i32 0, i32 14
  %683 = load i32, i32* %flags1085, align 4
  %and1086 = and i32 %683, 512
  %tobool1087 = icmp ne i32 %and1086, 0
  br i1 %tobool1087, label %if.else.1147, label %land.lhs.true.1088

land.lhs.true.1088:                               ; preds = %land.lhs.true.1084
  %684 = load i32, i32* %deltanext780, align 4
  %tobool1089 = icmp ne i32 %684, 0
  br i1 %tobool1089, label %if.else.1147, label %land.lhs.true.1090

land.lhs.true.1090:                               ; preds = %land.lhs.true.1088
  %685 = load i32, i32* %minnext779, align 4
  %cmp1091 = icmp ne i32 %685, 0
  br i1 %cmp1091, label %if.then.1093, label %if.else.1147

if.then.1093:                                     ; preds = %land.lhs.true.1090
  %686 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %add.ptr1095 = getelementptr inbounds %struct.regnode, %struct.regnode* %686, i64 1
  %add.ptr1096 = getelementptr inbounds %struct.regnode, %struct.regnode* %add.ptr1095, i64 1
  store %struct.regnode* %add.ptr1096, %struct.regnode** %nxt1094, align 8
  %687 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %type1097 = getelementptr inbounds %struct.regnode, %struct.regnode* %687, i32 0, i32 1
  store i8 42, i8* %type1097, align 1
  br label %while.cond.1098

while.cond.1098:                                  ; preds = %while.body.1108, %if.then.1093
  %688 = load %struct.regnode*, %struct.regnode** %nxt1094, align 8
  %call1099 = call %struct.regnode* @Perl_regnext(%struct.regnode* %688)
  store %struct.regnode* %call1099, %struct.regnode** %nxt2, align 8
  %tobool1100 = icmp ne %struct.regnode* %call1099, null
  br i1 %tobool1100, label %land.rhs.1101, label %land.end.1106

land.rhs.1101:                                    ; preds = %while.cond.1098
  %689 = load %struct.regnode*, %struct.regnode** %nxt2, align 8
  %type1102 = getelementptr inbounds %struct.regnode, %struct.regnode* %689, i32 0, i32 1
  %690 = load i8, i8* %type1102, align 1
  %conv1103 = zext i8 %690 to i32
  %cmp1104 = icmp ne i32 %conv1103, 44
  br label %land.end.1106

land.end.1106:                                    ; preds = %land.rhs.1101, %while.cond.1098
  %691 = phi i1 [ false, %while.cond.1098 ], [ %cmp1104, %land.rhs.1101 ]
  br i1 %691, label %while.body.1108, label %while.end.1109

while.body.1108:                                  ; preds = %land.end.1106
  %692 = load %struct.regnode*, %struct.regnode** %nxt2, align 8
  store %struct.regnode* %692, %struct.regnode** %nxt1094, align 8
  br label %while.cond.1098

while.end.1109:                                   ; preds = %land.end.1106
  %693 = load %struct.regnode*, %struct.regnode** %nxt2, align 8
  %type1110 = getelementptr inbounds %struct.regnode, %struct.regnode* %693, i32 0, i32 1
  store i8 1, i8* %type1110, align 1
  %694 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags1111 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %694, i32 0, i32 14
  %695 = load i32, i32* %flags1111, align 4
  %and1112 = and i32 %695, 256
  %tobool1113 = icmp ne i32 %and1112, 0
  br i1 %tobool1113, label %if.then.1114, label %if.else.1144

if.then.1114:                                     ; preds = %while.end.1109
  %696 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %add.ptr1116 = getelementptr inbounds %struct.regnode, %struct.regnode* %696, i64 1
  %add.ptr1117 = getelementptr inbounds %struct.regnode, %struct.regnode* %add.ptr1116, i64 1
  store %struct.regnode* %add.ptr1117, %struct.regnode** %nxt11115, align 8
  %697 = load %struct.regnode*, %struct.regnode** %nxt1094, align 8
  %type1118 = getelementptr inbounds %struct.regnode, %struct.regnode* %697, i32 0, i32 1
  %698 = load i8, i8* %type1118, align 1
  %conv1119 = zext i8 %698 to i32
  %cmp1120 = icmp ne i32 %conv1119, 46
  br i1 %cmp1120, label %if.then.1122, label %if.end.1137

if.then.1122:                                     ; preds = %if.then.1114
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8** %ellipses, align 8
  %699 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %699, i32 0, i32 4
  %700 = load i8*, i8** %end, align 8
  %701 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1123 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %701, i32 0, i32 1
  %702 = load i8*, i8** %precomp1123, align 8
  %sub.ptr.lhs.cast1124 = ptrtoint i8* %700 to i64
  %sub.ptr.rhs.cast1125 = ptrtoint i8* %702 to i64
  %sub.ptr.sub1126 = sub i64 %sub.ptr.lhs.cast1124, %sub.ptr.rhs.cast1125
  store i64 %sub.ptr.sub1126, i64* %len, align 8
  %703 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %703, i32 0, i32 8
  %704 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %cmp1127 = icmp eq %struct.regnode* %704, @PL_regdummy
  br i1 %cmp1127, label %if.end.1130, label %if.then.1129

if.then.1129:                                     ; preds = %if.then.1122
  %705 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %705, i32 0, i32 2
  %706 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %707 = bitcast %struct.regexp* %706 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %707)
  br label %if.end.1130

if.end.1130:                                      ; preds = %if.then.1129, %if.then.1122
  %708 = load i64, i64* %len, align 8
  %cmp1131 = icmp sgt i64 %708, 127
  br i1 %cmp1131, label %if.then.1133, label %if.end.1134

if.then.1133:                                     ; preds = %if.end.1130
  store i64 117, i64* %len, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8** %ellipses, align 8
  br label %if.end.1134

if.end.1134:                                      ; preds = %if.then.1133, %if.end.1130
  %709 = load i64, i64* %len, align 8
  %conv1135 = trunc i64 %709 to i32
  %710 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1136 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %710, i32 0, i32 1
  %711 = load i8*, i8** %precomp1136, align 8
  %712 = load i8*, i8** %ellipses, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.13, i32 0, i32 0), i32 %conv1135, i8* %711, i8* %712)
  br label %if.end.1137

if.end.1137:                                      ; preds = %if.end.1134, %if.then.1114
  %713 = load %struct.regnode*, %struct.regnode** %nxt1094, align 8
  %714 = bitcast %struct.regnode* %713 to %struct.regnode_1*
  %arg11138 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %714, i32 0, i32 3
  %715 = load i32, i32* %arg11138, align 4
  %conv1139 = trunc i32 %715 to i8
  %716 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %flags1140 = getelementptr inbounds %struct.regnode, %struct.regnode* %716, i32 0, i32 0
  store i8 %conv1139, i8* %flags1140, align 1
  %717 = load %struct.regnode*, %struct.regnode** %nxt11115, align 8
  %type1141 = getelementptr inbounds %struct.regnode, %struct.regnode* %717, i32 0, i32 1
  store i8 61, i8* %type1141, align 1
  %718 = load %struct.regnode*, %struct.regnode** %nxt1094, align 8
  %type1142 = getelementptr inbounds %struct.regnode, %struct.regnode* %718, i32 0, i32 1
  store i8 61, i8* %type1142, align 1
  %719 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %720 = load %struct.regnode*, %struct.regnode** %nxt1094, align 8
  %call1143 = call i32 @S_study_chunk(%struct.RExC_state_t* %719, %struct.regnode** %nxt11115, i32* %deltanext780, %struct.regnode* %720, %struct.scan_data_t* null, i32 0)
  br label %if.end.1146

if.else.1144:                                     ; preds = %while.end.1109
  %721 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %flags1145 = getelementptr inbounds %struct.regnode, %struct.regnode* %721, i32 0, i32 0
  store i8 0, i8* %flags1145, align 1
  br label %if.end.1146

if.end.1146:                                      ; preds = %if.else.1144, %if.end.1137
  br label %if.end.1188

if.else.1147:                                     ; preds = %land.lhs.true.1090, %land.lhs.true.1088, %land.lhs.true.1084, %land.lhs.true.1080, %land.lhs.true.1078, %nogo
  %722 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %type1148 = getelementptr inbounds %struct.regnode, %struct.regnode* %722, i32 0, i32 1
  %723 = load i8, i8* %type1148, align 1
  %conv1149 = zext i8 %723 to i32
  %cmp1150 = icmp eq i32 %conv1149, 43
  br i1 %cmp1150, label %land.lhs.true.1152, label %if.end.1187

land.lhs.true.1152:                               ; preds = %if.else.1147
  %724 = load i32, i32* %flags.addr, align 4
  %and1153 = and i32 %724, 8192
  %tobool1154 = icmp ne i32 %and1153, 0
  br i1 %tobool1154, label %land.lhs.true.1155, label %if.end.1187

land.lhs.true.1155:                               ; preds = %land.lhs.true.1152
  %725 = load i32, i32* %maxcount, align 4
  %cmp1156 = icmp eq i32 %725, 32767
  br i1 %cmp1156, label %land.lhs.true.1158, label %if.end.1187

land.lhs.true.1158:                               ; preds = %land.lhs.true.1155
  %726 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool1159 = icmp ne %struct.scan_data_t* %726, null
  br i1 %tobool1159, label %land.lhs.true.1160, label %if.end.1187

land.lhs.true.1160:                               ; preds = %land.lhs.true.1158
  %727 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %whilem_c1161 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %727, i32 0, i32 15
  %728 = load i32, i32* %whilem_c1161, align 4
  %inc1162 = add nsw i32 %728, 1
  store i32 %inc1162, i32* %whilem_c1161, align 4
  %cmp1163 = icmp slt i32 %inc1162, 16
  br i1 %cmp1163, label %if.then.1165, label %if.end.1187

if.then.1165:                                     ; preds = %land.lhs.true.1160
  %729 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %730 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %next_off1167 = getelementptr inbounds %struct.regnode, %struct.regnode* %730, i32 0, i32 2
  %731 = load i16, i16* %next_off1167, align 2
  %conv1168 = zext i16 %731 to i32
  %idx.ext1169 = sext i32 %conv1168 to i64
  %add.ptr1170 = getelementptr inbounds %struct.regnode, %struct.regnode* %729, i64 %idx.ext1169
  store %struct.regnode* %add.ptr1170, %struct.regnode** %nxt1166, align 8
  %732 = load %struct.regnode*, %struct.regnode** %nxt1166, align 8
  %add.ptr1171 = getelementptr inbounds %struct.regnode, %struct.regnode* %732, i64 -1
  %type1172 = getelementptr inbounds %struct.regnode, %struct.regnode* %add.ptr1171, i32 0, i32 1
  %733 = load i8, i8* %type1172, align 1
  %conv1173 = zext i8 %733 to i32
  %cmp1174 = icmp eq i32 %conv1173, 36
  br i1 %cmp1174, label %if.then.1176, label %if.end.1180

if.then.1176:                                     ; preds = %if.then.1165
  %734 = load %struct.regnode*, %struct.regnode** %nxt1166, align 8
  %735 = bitcast %struct.regnode* %734 to %struct.regnode_1*
  %arg11177 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %735, i32 0, i32 3
  %736 = load i32, i32* %arg11177, align 4
  %737 = load %struct.regnode*, %struct.regnode** %nxt1166, align 8
  %idx.ext1178 = zext i32 %736 to i64
  %add.ptr1179 = getelementptr inbounds %struct.regnode, %struct.regnode* %737, i64 %idx.ext1178
  store %struct.regnode* %add.ptr1179, %struct.regnode** %nxt1166, align 8
  br label %if.end.1180

if.end.1180:                                      ; preds = %if.then.1176, %if.then.1165
  %738 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %whilem_c1181 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %738, i32 0, i32 15
  %739 = load i32, i32* %whilem_c1181, align 4
  %740 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %whilem_seen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %740, i32 0, i32 6
  %741 = load i32, i32* %whilem_seen, align 4
  %shl1182 = shl i32 %741, 4
  %or1183 = or i32 %739, %shl1182
  %conv1184 = trunc i32 %or1183 to i8
  %742 = load %struct.regnode*, %struct.regnode** %nxt1166, align 8
  %add.ptr1185 = getelementptr inbounds %struct.regnode, %struct.regnode* %742, i64 -1
  %flags1186 = getelementptr inbounds %struct.regnode, %struct.regnode* %add.ptr1185, i32 0, i32 0
  store i8 %conv1184, i8* %flags1186, align 1
  br label %if.end.1187

if.end.1187:                                      ; preds = %if.end.1180, %land.lhs.true.1160, %land.lhs.true.1158, %land.lhs.true.1155, %land.lhs.true.1152, %if.else.1147
  br label %if.end.1188

if.end.1188:                                      ; preds = %if.end.1187, %if.end.1146
  %743 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool1189 = icmp ne %struct.scan_data_t* %743, null
  br i1 %tobool1189, label %land.lhs.true.1190, label %if.end.1195

land.lhs.true.1190:                               ; preds = %if.end.1188
  %744 = load i32, i32* %fl, align 4
  %and1191 = and i32 %744, 384
  %tobool1192 = icmp ne i32 %and1191, 0
  br i1 %tobool1192, label %if.then.1193, label %if.end.1195

if.then.1193:                                     ; preds = %land.lhs.true.1190
  %745 = load i32, i32* %pars, align 4
  %inc1194 = add nsw i32 %745, 1
  store i32 %inc1194, i32* %pars, align 4
  br label %if.end.1195

if.end.1195:                                      ; preds = %if.then.1193, %land.lhs.true.1190, %if.end.1188
  %746 = load i32, i32* %flags.addr, align 4
  %and1196 = and i32 %746, 1024
  %tobool1197 = icmp ne i32 %and1196, 0
  br i1 %tobool1197, label %if.then.1198, label %if.end.1430

if.then.1198:                                     ; preds = %if.end.1195
  store %struct.sv* null, %struct.sv** %last_str, align 8
  %747 = load i32, i32* %mincount, align 4
  %cmp1199 = icmp ne i32 %747, 0
  %conv1200 = zext i1 %cmp1199 to i32
  store i32 %conv1200, i32* %counted, align 4
  %748 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_end1201 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %748, i32 0, i32 5
  %749 = load i32, i32* %last_end1201, align 4
  %cmp1202 = icmp sgt i32 %749, 0
  br i1 %cmp1202, label %land.lhs.true.1204, label %if.end.1365

land.lhs.true.1204:                               ; preds = %if.then.1198
  %750 = load i32, i32* %mincount, align 4
  %cmp1205 = icmp ne i32 %750, 0
  br i1 %cmp1205, label %if.then.1207, label %if.end.1365

if.then.1207:                                     ; preds = %land.lhs.true.1204
  %751 = load i32, i32* %pos_before, align 4
  %752 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_start_min1208 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %752, i32 0, i32 6
  %753 = load i32, i32* %last_start_min1208, align 4
  %cmp1209 = icmp sge i32 %751, %753
  br i1 %cmp1209, label %cond.true.1211, label %cond.false.1212

cond.true.1211:                                   ; preds = %if.then.1207
  %754 = load i32, i32* %pos_before, align 4
  br label %cond.end.1214

cond.false.1212:                                  ; preds = %if.then.1207
  %755 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_start_min1213 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %755, i32 0, i32 6
  %756 = load i32, i32* %last_start_min1213, align 4
  br label %cond.end.1214

cond.end.1214:                                    ; preds = %cond.false.1212, %cond.true.1211
  %cond1215 = phi i32 [ %754, %cond.true.1211 ], [ %756, %cond.false.1212 ]
  store i32 %cond1215, i32* %b, align 4
  %757 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found1218 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %757, i32 0, i32 4
  %758 = load %struct.sv*, %struct.sv** %last_found1218, align 8
  %sv_flags1219 = getelementptr inbounds %struct.sv, %struct.sv* %758, i32 0, i32 2
  %759 = load i32, i32* %sv_flags1219, align 4
  %and1220 = and i32 %759, 262144
  %cmp1221 = icmp eq i32 %and1220, 262144
  br i1 %cmp1221, label %cond.true.1223, label %cond.false.1229

cond.true.1223:                                   ; preds = %cond.end.1214
  %760 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found1224 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %760, i32 0, i32 4
  %761 = load %struct.sv*, %struct.sv** %last_found1224, align 8
  %sv_any1225 = getelementptr inbounds %struct.sv, %struct.sv* %761, i32 0, i32 0
  %762 = load i8*, i8** %sv_any1225, align 8
  %763 = bitcast i8* %762 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %763, i32 0, i32 1
  %764 = load i64, i64* %xpv_cur, align 8
  store i64 %764, i64* %l1216, align 8
  %765 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found1226 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %765, i32 0, i32 4
  %766 = load %struct.sv*, %struct.sv** %last_found1226, align 8
  %sv_any1227 = getelementptr inbounds %struct.sv, %struct.sv* %766, i32 0, i32 0
  %767 = load i8*, i8** %sv_any1227, align 8
  %768 = bitcast i8* %767 to %struct.xpv*
  %xpv_pv1228 = getelementptr inbounds %struct.xpv, %struct.xpv* %768, i32 0, i32 0
  %769 = load i8*, i8** %xpv_pv1228, align 8
  br label %cond.end.1232

cond.false.1229:                                  ; preds = %cond.end.1214
  %770 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found1230 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %770, i32 0, i32 4
  %771 = load %struct.sv*, %struct.sv** %last_found1230, align 8
  %call1231 = call i8* @Perl_sv_2pv_flags(%struct.sv* %771, i64* %l1216, i32 2)
  br label %cond.end.1232

cond.end.1232:                                    ; preds = %cond.false.1229, %cond.true.1223
  %cond1233 = phi i8* [ %769, %cond.true.1223 ], [ %call1231, %cond.false.1229 ]
  store i8* %cond1233, i8** %s1217, align 8
  %772 = load i32, i32* %b, align 4
  %773 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_start_min1234 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %773, i32 0, i32 6
  %774 = load i32, i32* %last_start_min1234, align 4
  %sub1235 = sub nsw i32 %772, %774
  store i32 %sub1235, i32* %old, align 4
  %775 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81236 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %775, i32 0, i32 17
  %776 = load i32, i32* %utf81236, align 4
  %cmp1237 = icmp ne i32 %776, 0
  br i1 %cmp1237, label %if.then.1239, label %if.end.1245

if.then.1239:                                     ; preds = %cond.end.1232
  %777 = load i8*, i8** %s1217, align 8
  %778 = load i32, i32* %old, align 4
  %call1240 = call i8* @Perl_utf8_hop(i8* %777, i32 %778)
  %779 = load i8*, i8** %s1217, align 8
  %sub.ptr.lhs.cast1241 = ptrtoint i8* %call1240 to i64
  %sub.ptr.rhs.cast1242 = ptrtoint i8* %779 to i64
  %sub.ptr.sub1243 = sub i64 %sub.ptr.lhs.cast1241, %sub.ptr.rhs.cast1242
  %conv1244 = trunc i64 %sub.ptr.sub1243 to i32
  store i32 %conv1244, i32* %old, align 4
  br label %if.end.1245

if.end.1245:                                      ; preds = %if.then.1239, %cond.end.1232
  %780 = load i32, i32* %old, align 4
  %conv1246 = sext i32 %780 to i64
  %781 = load i64, i64* %l1216, align 8
  %sub1247 = sub i64 %781, %conv1246
  store i64 %sub1247, i64* %l1216, align 8
  %782 = load i8*, i8** %s1217, align 8
  %783 = load i32, i32* %old, align 4
  %idx.ext1248 = sext i32 %783 to i64
  %add.ptr1249 = getelementptr inbounds i8, i8* %782, i64 %idx.ext1248
  %784 = load i64, i64* %l1216, align 8
  %call1250 = call %struct.sv* @Perl_newSVpvn(i8* %add.ptr1249, i64 %784)
  store %struct.sv* %call1250, %struct.sv** %last_str, align 8
  %785 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81251 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %785, i32 0, i32 17
  %786 = load i32, i32* %utf81251, align 4
  %cmp1252 = icmp ne i32 %786, 0
  br i1 %cmp1252, label %if.then.1254, label %if.end.1257

if.then.1254:                                     ; preds = %if.end.1245
  %787 = load %struct.sv*, %struct.sv** %last_str, align 8
  %sv_flags1255 = getelementptr inbounds %struct.sv, %struct.sv* %787, i32 0, i32 2
  %788 = load i32, i32* %sv_flags1255, align 4
  %or1256 = or i32 %788, 536870912
  store i32 %or1256, i32* %sv_flags1255, align 4
  br label %if.end.1257

if.end.1257:                                      ; preds = %if.then.1254, %if.end.1245
  %789 = load i32, i32* %deltanext780, align 4
  %cmp1258 = icmp eq i32 %789, 0
  br i1 %cmp1258, label %land.lhs.true.1260, label %if.else.1348

land.lhs.true.1260:                               ; preds = %if.end.1257
  %790 = load i32, i32* %pos_before, align 4
  %791 = load i32, i32* %b, align 4
  %cmp1261 = icmp eq i32 %790, %791
  br i1 %cmp1261, label %if.then.1263, label %if.else.1348

if.then.1263:                                     ; preds = %land.lhs.true.1260
  %792 = load i32, i32* %mincount, align 4
  %cmp1264 = icmp sgt i32 %792, 1
  br i1 %cmp1264, label %if.then.1266, label %if.end.1347

if.then.1266:                                     ; preds = %if.then.1263
  %793 = load %struct.sv*, %struct.sv** %last_str, align 8
  %sv_any1267 = getelementptr inbounds %struct.sv, %struct.sv* %793, i32 0, i32 0
  %794 = load i8*, i8** %sv_any1267, align 8
  %795 = bitcast i8* %794 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %795, i32 0, i32 2
  %796 = load i64, i64* %xpv_len, align 8
  %797 = load i32, i32* %mincount, align 4
  %conv1268 = sext i32 %797 to i64
  %798 = load i64, i64* %l1216, align 8
  %mul1269 = mul i64 %conv1268, %798
  %add1270 = add i64 %mul1269, 1
  %cmp1271 = icmp ult i64 %796, %add1270
  br i1 %cmp1271, label %cond.true.1273, label %cond.false.1278

cond.true.1273:                                   ; preds = %if.then.1266
  %799 = load %struct.sv*, %struct.sv** %last_str, align 8
  %800 = load i32, i32* %mincount, align 4
  %conv1274 = sext i32 %800 to i64
  %801 = load i64, i64* %l1216, align 8
  %mul1275 = mul i64 %conv1274, %801
  %add1276 = add i64 %mul1275, 1
  %call1277 = call i8* @Perl_sv_grow(%struct.sv* %799, i64 %add1276)
  br label %cond.end.1281

cond.false.1278:                                  ; preds = %if.then.1266
  %802 = load %struct.sv*, %struct.sv** %last_str, align 8
  %sv_any1279 = getelementptr inbounds %struct.sv, %struct.sv* %802, i32 0, i32 0
  %803 = load i8*, i8** %sv_any1279, align 8
  %804 = bitcast i8* %803 to %struct.xpv*
  %xpv_pv1280 = getelementptr inbounds %struct.xpv, %struct.xpv* %804, i32 0, i32 0
  %805 = load i8*, i8** %xpv_pv1280, align 8
  br label %cond.end.1281

cond.end.1281:                                    ; preds = %cond.false.1278, %cond.true.1273
  %cond1282 = phi i8* [ %call1277, %cond.true.1273 ], [ %805, %cond.false.1278 ]
  %806 = load %struct.sv*, %struct.sv** %last_str, align 8
  %sv_any1283 = getelementptr inbounds %struct.sv, %struct.sv* %806, i32 0, i32 0
  %807 = load i8*, i8** %sv_any1283, align 8
  %808 = bitcast i8* %807 to %struct.xpv*
  %xpv_pv1284 = getelementptr inbounds %struct.xpv, %struct.xpv* %808, i32 0, i32 0
  %809 = load i8*, i8** %xpv_pv1284, align 8
  %810 = load i64, i64* %l1216, align 8
  %add.ptr1285 = getelementptr inbounds i8, i8* %809, i64 %810
  %811 = load %struct.sv*, %struct.sv** %last_str, align 8
  %sv_any1286 = getelementptr inbounds %struct.sv, %struct.sv* %811, i32 0, i32 0
  %812 = load i8*, i8** %sv_any1286, align 8
  %813 = bitcast i8* %812 to %struct.xpv*
  %xpv_pv1287 = getelementptr inbounds %struct.xpv, %struct.xpv* %813, i32 0, i32 0
  %814 = load i8*, i8** %xpv_pv1287, align 8
  %815 = load i64, i64* %l1216, align 8
  %conv1288 = trunc i64 %815 to i32
  %816 = load i32, i32* %mincount, align 4
  %sub1289 = sub nsw i32 %816, 1
  call void @Perl_repeatcpy(i8* %add.ptr1285, i8* %814, i32 %conv1288, i32 %sub1289)
  %817 = load i32, i32* %mincount, align 4
  %conv1290 = sext i32 %817 to i64
  %818 = load %struct.sv*, %struct.sv** %last_str, align 8
  %sv_any1291 = getelementptr inbounds %struct.sv, %struct.sv* %818, i32 0, i32 0
  %819 = load i8*, i8** %sv_any1291, align 8
  %820 = bitcast i8* %819 to %struct.xpv*
  %xpv_cur1292 = getelementptr inbounds %struct.xpv, %struct.xpv* %820, i32 0, i32 1
  %821 = load i64, i64* %xpv_cur1292, align 8
  %mul1293 = mul i64 %821, %conv1290
  store i64 %mul1293, i64* %xpv_cur1292, align 8
  %822 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found1294 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %822, i32 0, i32 4
  %823 = load %struct.sv*, %struct.sv** %last_found1294, align 8
  %sv_any1295 = getelementptr inbounds %struct.sv, %struct.sv* %823, i32 0, i32 0
  %824 = load i8*, i8** %sv_any1295, align 8
  %825 = bitcast i8* %824 to %struct.xpv*
  %xpv_cur1296 = getelementptr inbounds %struct.xpv, %struct.xpv* %825, i32 0, i32 1
  %826 = load i64, i64* %xpv_cur1296, align 8
  %827 = load i64, i64* %l1216, align 8
  %sub1297 = sub i64 %826, %827
  %828 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found1298 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %828, i32 0, i32 4
  %829 = load %struct.sv*, %struct.sv** %last_found1298, align 8
  %sv_any1299 = getelementptr inbounds %struct.sv, %struct.sv* %829, i32 0, i32 0
  %830 = load i8*, i8** %sv_any1299, align 8
  %831 = bitcast i8* %830 to %struct.xpv*
  %xpv_cur1300 = getelementptr inbounds %struct.xpv, %struct.xpv* %831, i32 0, i32 1
  store i64 %sub1297, i64* %xpv_cur1300, align 8
  store i64 %sub1297, i64* %tmp
  %832 = load i64, i64* %tmp
  %833 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found1301 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %833, i32 0, i32 4
  %834 = load %struct.sv*, %struct.sv** %last_found1301, align 8
  %835 = load %struct.sv*, %struct.sv** %last_str, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %834, %struct.sv* %835, i32 2)
  %836 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found1304 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %836, i32 0, i32 4
  %837 = load %struct.sv*, %struct.sv** %last_found1304, align 8
  store %struct.sv* %837, %struct.sv** %sv1303, align 8
  %838 = load %struct.sv*, %struct.sv** %sv1303, align 8
  %sv_flags1307 = getelementptr inbounds %struct.sv, %struct.sv* %838, i32 0, i32 2
  %839 = load i32, i32* %sv_flags1307, align 4
  %and1308 = and i32 %839, 536870912
  %tobool1309 = icmp ne i32 %and1308, 0
  br i1 %tobool1309, label %land.lhs.true.1310, label %cond.false.1316

land.lhs.true.1310:                               ; preds = %cond.end.1281
  %840 = load %struct.sv*, %struct.sv** %sv1303, align 8
  %sv_flags1311 = getelementptr inbounds %struct.sv, %struct.sv* %840, i32 0, i32 2
  %841 = load i32, i32* %sv_flags1311, align 4
  %and1312 = and i32 %841, 57344
  %tobool1313 = icmp ne i32 %and1312, 0
  br i1 %tobool1313, label %cond.true.1314, label %cond.false.1316

cond.true.1314:                                   ; preds = %land.lhs.true.1310
  %842 = load %struct.sv*, %struct.sv** %sv1303, align 8
  %call1315 = call %struct.magic* @Perl_mg_find(%struct.sv* %842, i32 119)
  br label %cond.end.1317

cond.false.1316:                                  ; preds = %land.lhs.true.1310, %cond.end.1281
  br label %cond.end.1317

cond.end.1317:                                    ; preds = %cond.false.1316, %cond.true.1314
  %cond1318 = phi %struct.magic* [ %call1315, %cond.true.1314 ], [ null, %cond.false.1316 ]
  store %struct.magic* %cond1318, %struct.magic** %mg1306, align 8
  %843 = load %struct.magic*, %struct.magic** %mg1306, align 8
  %tobool1319 = icmp ne %struct.magic* %843, null
  br i1 %tobool1319, label %land.lhs.true.1320, label %if.end.1339

land.lhs.true.1320:                               ; preds = %cond.end.1317
  %844 = load %struct.magic*, %struct.magic** %mg1306, align 8
  %mg_len1321 = getelementptr inbounds %struct.magic, %struct.magic* %844, i32 0, i32 7
  %845 = load i32, i32* %mg_len1321, align 4
  %cmp1322 = icmp sge i32 %845, 0
  br i1 %cmp1322, label %if.then.1324, label %if.end.1339

if.then.1324:                                     ; preds = %land.lhs.true.1320
  %846 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81325 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %846, i32 0, i32 17
  %847 = load i32, i32* %utf81325, align 4
  %cmp1326 = icmp ne i32 %847, 0
  br i1 %cmp1326, label %cond.true.1328, label %cond.false.1330

cond.true.1328:                                   ; preds = %if.then.1324
  %848 = load %struct.sv*, %struct.sv** %last_str, align 8
  %call1329 = call i64 @Perl_sv_len_utf8(%struct.sv* %848)
  br label %cond.end.1333

cond.false.1330:                                  ; preds = %if.then.1324
  %849 = load %struct.sv*, %struct.sv** %last_str, align 8
  %sv_any1331 = getelementptr inbounds %struct.sv, %struct.sv* %849, i32 0, i32 0
  %850 = load i8*, i8** %sv_any1331, align 8
  %851 = bitcast i8* %850 to %struct.xpv*
  %xpv_cur1332 = getelementptr inbounds %struct.xpv, %struct.xpv* %851, i32 0, i32 1
  %852 = load i64, i64* %xpv_cur1332, align 8
  br label %cond.end.1333

cond.end.1333:                                    ; preds = %cond.false.1330, %cond.true.1328
  %cond1334 = phi i64 [ %call1329, %cond.true.1328 ], [ %852, %cond.false.1330 ]
  %853 = load %struct.magic*, %struct.magic** %mg1306, align 8
  %mg_len1335 = getelementptr inbounds %struct.magic, %struct.magic* %853, i32 0, i32 7
  %854 = load i32, i32* %mg_len1335, align 4
  %conv1336 = sext i32 %854 to i64
  %add1337 = add i64 %conv1336, %cond1334
  %conv1338 = trunc i64 %add1337 to i32
  store i32 %conv1338, i32* %mg_len1335, align 4
  br label %if.end.1339

if.end.1339:                                      ; preds = %cond.end.1333, %land.lhs.true.1320, %cond.end.1317
  %855 = load i64, i64* %l1216, align 8
  %856 = load i32, i32* %mincount, align 4
  %sub1340 = sub nsw i32 %856, 1
  %conv1341 = sext i32 %sub1340 to i64
  %mul1342 = mul i64 %855, %conv1341
  %857 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_end1343 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %857, i32 0, i32 5
  %858 = load i32, i32* %last_end1343, align 4
  %conv1344 = sext i32 %858 to i64
  %add1345 = add i64 %conv1344, %mul1342
  %conv1346 = trunc i64 %add1345 to i32
  store i32 %conv1346, i32* %last_end1343, align 4
  br label %if.end.1347

if.end.1347:                                      ; preds = %if.end.1339, %if.then.1263
  br label %if.end.1364

if.else.1348:                                     ; preds = %land.lhs.true.1260, %if.end.1257
  %859 = load i32, i32* %minnext779, align 4
  %860 = load i32, i32* %mincount, align 4
  %sub1349 = sub nsw i32 %860, 1
  %mul1350 = mul nsw i32 %859, %sub1349
  %861 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_start_min1351 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %861, i32 0, i32 6
  %862 = load i32, i32* %last_start_min1351, align 4
  %add1352 = add nsw i32 %862, %mul1350
  store i32 %add1352, i32* %last_start_min1351, align 4
  %863 = load i32, i32* %is_inf, align 4
  %tobool1353 = icmp ne i32 %863, 0
  br i1 %tobool1353, label %cond.true.1354, label %cond.false.1355

cond.true.1354:                                   ; preds = %if.else.1348
  br label %cond.end.1360

cond.false.1355:                                  ; preds = %if.else.1348
  %864 = load i32, i32* %maxcount, align 4
  %sub1356 = sub nsw i32 %864, 1
  %865 = load i32, i32* %minnext779, align 4
  %866 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_delta1357 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %866, i32 0, i32 3
  %867 = load i32, i32* %pos_delta1357, align 4
  %add1358 = add nsw i32 %865, %867
  %mul1359 = mul nsw i32 %sub1356, %add1358
  br label %cond.end.1360

cond.end.1360:                                    ; preds = %cond.false.1355, %cond.true.1354
  %cond1361 = phi i32 [ 2147483647, %cond.true.1354 ], [ %mul1359, %cond.false.1355 ]
  %868 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_start_max1362 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %868, i32 0, i32 7
  %869 = load i32, i32* %last_start_max1362, align 4
  %add1363 = add nsw i32 %869, %cond1361
  store i32 %add1363, i32* %last_start_max1362, align 4
  br label %if.end.1364

if.end.1364:                                      ; preds = %cond.end.1360, %if.end.1347
  br label %if.end.1365

if.end.1365:                                      ; preds = %if.end.1364, %land.lhs.true.1204, %if.then.1198
  %870 = load i32, i32* %minnext779, align 4
  %871 = load i32, i32* %mincount, align 4
  %872 = load i32, i32* %counted, align 4
  %sub1366 = sub nsw i32 %871, %872
  %mul1367 = mul nsw i32 %870, %sub1366
  %873 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min1368 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %873, i32 0, i32 2
  %874 = load i32, i32* %pos_min1368, align 4
  %add1369 = add nsw i32 %874, %mul1367
  store i32 %add1369, i32* %pos_min1368, align 4
  %875 = load i32, i32* %counted, align 4
  %sub1370 = sub nsw i32 0, %875
  %876 = load i32, i32* %deltanext780, align 4
  %mul1371 = mul nsw i32 %sub1370, %876
  %877 = load i32, i32* %minnext779, align 4
  %878 = load i32, i32* %deltanext780, align 4
  %add1372 = add nsw i32 %877, %878
  %879 = load i32, i32* %maxcount, align 4
  %mul1373 = mul nsw i32 %add1372, %879
  %add1374 = add nsw i32 %mul1371, %mul1373
  %880 = load i32, i32* %minnext779, align 4
  %881 = load i32, i32* %mincount, align 4
  %mul1375 = mul nsw i32 %880, %881
  %sub1376 = sub nsw i32 %add1374, %mul1375
  %882 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_delta1377 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %882, i32 0, i32 3
  %883 = load i32, i32* %pos_delta1377, align 4
  %add1378 = add nsw i32 %883, %sub1376
  store i32 %add1378, i32* %pos_delta1377, align 4
  %884 = load i32, i32* %mincount, align 4
  %885 = load i32, i32* %maxcount, align 4
  %cmp1379 = icmp ne i32 %884, %885
  br i1 %cmp1379, label %if.then.1381, label %if.end.1429

if.then.1381:                                     ; preds = %if.end.1365
  %886 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %887 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  call void @S_scan_commit(%struct.RExC_state_t* %886, %struct.scan_data_t* %887)
  %888 = load i32, i32* %mincount, align 4
  %tobool1382 = icmp ne i32 %888, 0
  br i1 %tobool1382, label %land.lhs.true.1383, label %if.end.1426

land.lhs.true.1383:                               ; preds = %if.then.1381
  %889 = load %struct.sv*, %struct.sv** %last_str, align 8
  %tobool1384 = icmp ne %struct.sv* %889, null
  br i1 %tobool1384, label %if.then.1385, label %if.end.1426

if.then.1385:                                     ; preds = %land.lhs.true.1383
  %890 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found1386 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %890, i32 0, i32 4
  %891 = load %struct.sv*, %struct.sv** %last_found1386, align 8
  %892 = load %struct.sv*, %struct.sv** %last_str, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %891, %struct.sv* %892, i32 2)
  %893 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min1387 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %893, i32 0, i32 2
  %894 = load i32, i32* %pos_min1387, align 4
  %895 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_end1388 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %895, i32 0, i32 5
  store i32 %894, i32* %last_end1388, align 4
  %896 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min1389 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %896, i32 0, i32 2
  %897 = load i32, i32* %pos_min1389, align 4
  %conv1390 = sext i32 %897 to i64
  %898 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81391 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %898, i32 0, i32 17
  %899 = load i32, i32* %utf81391, align 4
  %cmp1392 = icmp ne i32 %899, 0
  br i1 %cmp1392, label %cond.true.1394, label %cond.false.1396

cond.true.1394:                                   ; preds = %if.then.1385
  %900 = load %struct.sv*, %struct.sv** %last_str, align 8
  %call1395 = call i64 @Perl_sv_len_utf8(%struct.sv* %900)
  br label %cond.end.1399

cond.false.1396:                                  ; preds = %if.then.1385
  %901 = load %struct.sv*, %struct.sv** %last_str, align 8
  %sv_any1397 = getelementptr inbounds %struct.sv, %struct.sv* %901, i32 0, i32 0
  %902 = load i8*, i8** %sv_any1397, align 8
  %903 = bitcast i8* %902 to %struct.xpv*
  %xpv_cur1398 = getelementptr inbounds %struct.xpv, %struct.xpv* %903, i32 0, i32 1
  %904 = load i64, i64* %xpv_cur1398, align 8
  br label %cond.end.1399

cond.end.1399:                                    ; preds = %cond.false.1396, %cond.true.1394
  %cond1400 = phi i64 [ %call1395, %cond.true.1394 ], [ %904, %cond.false.1396 ]
  %sub1401 = sub i64 %conv1390, %cond1400
  %conv1402 = trunc i64 %sub1401 to i32
  %905 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_start_min1403 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %905, i32 0, i32 6
  store i32 %conv1402, i32* %last_start_min1403, align 4
  %906 = load i32, i32* %is_inf, align 4
  %tobool1404 = icmp ne i32 %906, 0
  br i1 %tobool1404, label %cond.true.1405, label %cond.false.1406

cond.true.1405:                                   ; preds = %cond.end.1399
  br label %cond.end.1422

cond.false.1406:                                  ; preds = %cond.end.1399
  %907 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min1407 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %907, i32 0, i32 2
  %908 = load i32, i32* %pos_min1407, align 4
  %909 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_delta1408 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %909, i32 0, i32 3
  %910 = load i32, i32* %pos_delta1408, align 4
  %add1409 = add nsw i32 %908, %910
  %conv1410 = sext i32 %add1409 to i64
  %911 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81411 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %911, i32 0, i32 17
  %912 = load i32, i32* %utf81411, align 4
  %cmp1412 = icmp ne i32 %912, 0
  br i1 %cmp1412, label %cond.true.1414, label %cond.false.1416

cond.true.1414:                                   ; preds = %cond.false.1406
  %913 = load %struct.sv*, %struct.sv** %last_str, align 8
  %call1415 = call i64 @Perl_sv_len_utf8(%struct.sv* %913)
  br label %cond.end.1419

cond.false.1416:                                  ; preds = %cond.false.1406
  %914 = load %struct.sv*, %struct.sv** %last_str, align 8
  %sv_any1417 = getelementptr inbounds %struct.sv, %struct.sv* %914, i32 0, i32 0
  %915 = load i8*, i8** %sv_any1417, align 8
  %916 = bitcast i8* %915 to %struct.xpv*
  %xpv_cur1418 = getelementptr inbounds %struct.xpv, %struct.xpv* %916, i32 0, i32 1
  %917 = load i64, i64* %xpv_cur1418, align 8
  br label %cond.end.1419

cond.end.1419:                                    ; preds = %cond.false.1416, %cond.true.1414
  %cond1420 = phi i64 [ %call1415, %cond.true.1414 ], [ %917, %cond.false.1416 ]
  %sub1421 = sub i64 %conv1410, %cond1420
  br label %cond.end.1422

cond.end.1422:                                    ; preds = %cond.end.1419, %cond.true.1405
  %cond1423 = phi i64 [ 2147483647, %cond.true.1405 ], [ %sub1421, %cond.end.1419 ]
  %conv1424 = trunc i64 %cond1423 to i32
  %918 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_start_max1425 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %918, i32 0, i32 7
  store i32 %conv1424, i32* %last_start_max1425, align 4
  br label %if.end.1426

if.end.1426:                                      ; preds = %cond.end.1422, %land.lhs.true.1383, %if.then.1381
  %919 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest_float1427 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %919, i32 0, i32 11
  %920 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest1428 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %920, i32 0, i32 8
  store %struct.sv** %longest_float1427, %struct.sv*** %longest1428, align 8
  br label %if.end.1429

if.end.1429:                                      ; preds = %if.end.1426, %if.end.1365
  %921 = load %struct.sv*, %struct.sv** %last_str, align 8
  call void @Perl_sv_free(%struct.sv* %921)
  br label %if.end.1430

if.end.1430:                                      ; preds = %if.end.1429, %if.end.1195
  %922 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool1431 = icmp ne %struct.scan_data_t* %922, null
  br i1 %tobool1431, label %land.lhs.true.1432, label %if.end.1438

land.lhs.true.1432:                               ; preds = %if.end.1430
  %923 = load i32, i32* %fl, align 4
  %and1433 = and i32 %923, 512
  %tobool1434 = icmp ne i32 %and1433, 0
  br i1 %tobool1434, label %if.then.1435, label %if.end.1438

if.then.1435:                                     ; preds = %land.lhs.true.1432
  %924 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags1436 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %924, i32 0, i32 14
  %925 = load i32, i32* %flags1436, align 4
  %or1437 = or i32 %925, 512
  store i32 %or1437, i32* %flags1436, align 4
  br label %if.end.1438

if.end.1438:                                      ; preds = %if.then.1435, %land.lhs.true.1432, %if.end.1430
  br label %optimize_curly_tail

optimize_curly_tail:                              ; preds = %if.end.1438, %if.end.825
  %926 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %type1439 = getelementptr inbounds %struct.regnode, %struct.regnode* %926, i32 0, i32 1
  %927 = load i8, i8* %type1439, align 1
  %conv1440 = zext i8 %927 to i32
  %cmp1441 = icmp ne i32 %conv1440, 43
  br i1 %cmp1441, label %if.then.1443, label %if.end.1466

if.then.1443:                                     ; preds = %optimize_curly_tail
  br label %while.cond.1444

while.cond.1444:                                  ; preds = %while.body.1458, %if.then.1443
  %928 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %call1445 = call %struct.regnode* @Perl_regnext(%struct.regnode* %928)
  store %struct.regnode* %call1445, %struct.regnode** %next, align 8
  %type1446 = getelementptr inbounds %struct.regnode, %struct.regnode* %call1445, i32 0, i32 1
  %929 = load i8, i8* %type1446, align 1
  %idxprom1447 = zext i8 %929 to i64
  %arrayidx1448 = getelementptr inbounds [62 x i8], [62 x i8]* @PL_regkind, i32 0, i64 %idxprom1447
  %930 = load i8, i8* %arrayidx1448, align 1
  %conv1449 = zext i8 %930 to i32
  %cmp1450 = icmp eq i32 %conv1449, 36
  br i1 %cmp1450, label %land.rhs.1452, label %land.end.1456

land.rhs.1452:                                    ; preds = %while.cond.1444
  %931 = load %struct.regnode*, %struct.regnode** %next, align 8
  %next_off1453 = getelementptr inbounds %struct.regnode, %struct.regnode* %931, i32 0, i32 2
  %932 = load i16, i16* %next_off1453, align 2
  %conv1454 = zext i16 %932 to i32
  %tobool1455 = icmp ne i32 %conv1454, 0
  br label %land.end.1456

land.end.1456:                                    ; preds = %land.rhs.1452, %while.cond.1444
  %933 = phi i1 [ false, %while.cond.1444 ], [ %tobool1455, %land.rhs.1452 ]
  br i1 %933, label %while.body.1458, label %while.end.1465

while.body.1458:                                  ; preds = %land.end.1456
  %934 = load %struct.regnode*, %struct.regnode** %next, align 8
  %next_off1459 = getelementptr inbounds %struct.regnode, %struct.regnode* %934, i32 0, i32 2
  %935 = load i16, i16* %next_off1459, align 2
  %conv1460 = zext i16 %935 to i32
  %936 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %next_off1461 = getelementptr inbounds %struct.regnode, %struct.regnode* %936, i32 0, i32 2
  %937 = load i16, i16* %next_off1461, align 2
  %conv1462 = zext i16 %937 to i32
  %add1463 = add nsw i32 %conv1462, %conv1460
  %conv1464 = trunc i32 %add1463 to i16
  store i16 %conv1464, i16* %next_off1461, align 2
  br label %while.cond.1444

while.end.1465:                                   ; preds = %land.end.1456
  br label %if.end.1466

if.end.1466:                                      ; preds = %while.end.1465, %optimize_curly_tail
  br label %while.cond

sw.default:                                       ; preds = %if.then.778
  %938 = load i32, i32* %flags.addr, align 4
  %and1467 = and i32 %938, 1024
  %tobool1468 = icmp ne i32 %and1467, 0
  br i1 %tobool1468, label %if.then.1469, label %if.end.1472

if.then.1469:                                     ; preds = %sw.default
  %939 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %940 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  call void @S_scan_commit(%struct.RExC_state_t* %939, %struct.scan_data_t* %940)
  %941 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest_float1470 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %941, i32 0, i32 11
  %942 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest1471 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %942, i32 0, i32 8
  store %struct.sv** %longest_float1470, %struct.sv*** %longest1471, align 8
  br label %if.end.1472

if.end.1472:                                      ; preds = %if.then.1469, %sw.default
  store i32 1, i32* %is_inf_internal, align 4
  store i32 1, i32* %is_inf, align 4
  %943 = load i32, i32* %flags.addr, align 4
  %and1473 = and i32 %943, 4096
  %tobool1474 = icmp ne i32 %and1473, 0
  br i1 %tobool1474, label %if.then.1475, label %if.end.1477

if.then.1475:                                     ; preds = %if.end.1472
  %944 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %945 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1476 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %945, i32 0, i32 17
  %946 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1476, align 8
  call void @S_cl_anything(%struct.RExC_state_t* %944, %struct.regnode_charclass_class* %946)
  br label %if.end.1477

if.end.1477:                                      ; preds = %if.then.1475, %if.end.1472
  %947 = load i32, i32* %flags.addr, align 4
  %and1478 = and i32 %947, -6145
  store i32 %and1478, i32* %flags.addr, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end.1477
  br label %if.end.2558

if.else.1479:                                     ; preds = %if.else.773
  %948 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type1480 = getelementptr inbounds %struct.regnode, %struct.regnode* %948, i32 0, i32 1
  %949 = load i8, i8* %type1480, align 1
  %conv1481 = zext i8 %949 to i32
  %call1482 = call i8* @strchr(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @PL_simple, i32 0, i32 0), i32 %conv1481)
  %tobool1483 = icmp ne i8* %call1482, null
  br i1 %tobool1483, label %if.then.1484, label %if.else.2306

if.then.1484:                                     ; preds = %if.else.1479
  store i32 0, i32* %value, align 4
  %950 = load i32, i32* %flags.addr, align 4
  %and1486 = and i32 %950, 1024
  %tobool1487 = icmp ne i32 %and1486, 0
  br i1 %tobool1487, label %if.then.1488, label %if.end.1491

if.then.1488:                                     ; preds = %if.then.1484
  %951 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %952 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  call void @S_scan_commit(%struct.RExC_state_t* %951, %struct.scan_data_t* %952)
  %953 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min1489 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %953, i32 0, i32 2
  %954 = load i32, i32* %pos_min1489, align 4
  %inc1490 = add nsw i32 %954, 1
  store i32 %inc1490, i32* %pos_min1489, align 4
  br label %if.end.1491

if.end.1491:                                      ; preds = %if.then.1488, %if.then.1484
  %955 = load i32, i32* %min, align 4
  %inc1492 = add nsw i32 %955, 1
  store i32 %inc1492, i32* %min, align 4
  %956 = load i32, i32* %flags.addr, align 4
  %and1493 = and i32 %956, 6144
  %tobool1494 = icmp ne i32 %and1493, 0
  br i1 %tobool1494, label %if.then.1495, label %if.end.2305

if.then.1495:                                     ; preds = %if.end.1491
  %957 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1496 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %957, i32 0, i32 17
  %958 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1496, align 8
  %flags1497 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %958, i32 0, i32 0
  %959 = load i8, i8* %flags1497, align 1
  %conv1498 = zext i8 %959 to i32
  %and1499 = and i32 %conv1498, -17
  %conv1500 = trunc i32 %and1499 to i8
  store i8 %conv1500, i8* %flags1497, align 1
  %960 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type1501 = getelementptr inbounds %struct.regnode, %struct.regnode* %960, i32 0, i32 1
  %961 = load i8, i8* %type1501, align 1
  %idxprom1502 = zext i8 %961 to i64
  %arrayidx1503 = getelementptr inbounds [62 x i8], [62 x i8]* @PL_regkind, i32 0, i64 %idxprom1502
  %962 = load i8, i8* %arrayidx1503, align 1
  %conv1504 = zext i8 %962 to i32
  switch i32 %conv1504, label %sw.default.1506 [
    i32 15, label %sw.bb.1505
    i32 14, label %sw.bb.1512
    i32 17, label %sw.bb.1550
    i32 18, label %sw.bb.1558
    i32 19, label %sw.bb.1671
    i32 20, label %sw.bb.1701
    i32 21, label %sw.bb.1815
    i32 22, label %sw.bb.1845
    i32 23, label %sw.bb.1947
    i32 24, label %sw.bb.1977
    i32 25, label %sw.bb.2079
    i32 26, label %sw.bb.2144
    i32 28, label %sw.bb.2221
  ]

sw.bb.1505:                                       ; preds = %if.then.1495
  br label %sw.default.1506

sw.default.1506:                                  ; preds = %if.then.1495, %sw.bb.1505
  br label %do_default

do_default:                                       ; preds = %if.then.1517, %sw.default.1506
  %963 = load i32, i32* %flags.addr, align 4
  %and1507 = and i32 %963, 4096
  %tobool1508 = icmp ne i32 %and1507, 0
  br i1 %tobool1508, label %if.then.1509, label %if.end.1511

if.then.1509:                                     ; preds = %do_default
  %964 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %965 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1510 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %965, i32 0, i32 17
  %966 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1510, align 8
  call void @S_cl_anything(%struct.RExC_state_t* %964, %struct.regnode_charclass_class* %966)
  br label %if.end.1511

if.end.1511:                                      ; preds = %if.then.1509, %do_default
  br label %sw.epilog.2298

sw.bb.1512:                                       ; preds = %if.then.1495
  %967 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type1513 = getelementptr inbounds %struct.regnode, %struct.regnode* %967, i32 0, i32 1
  %968 = load i8, i8* %type1513, align 1
  %conv1514 = zext i8 %968 to i32
  %cmp1515 = icmp eq i32 %conv1514, 15
  br i1 %cmp1515, label %if.then.1517, label %if.end.1518

if.then.1517:                                     ; preds = %sw.bb.1512
  br label %do_default

if.end.1518:                                      ; preds = %sw.bb.1512
  %969 = load i32, i32* %flags.addr, align 4
  %and1519 = and i32 %969, 4096
  %tobool1520 = icmp ne i32 %and1519, 0
  br i1 %tobool1520, label %if.then.1521, label %if.end.1537

if.then.1521:                                     ; preds = %if.end.1518
  %970 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1522 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %970, i32 0, i32 17
  %971 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1522, align 8
  %972 = bitcast %struct.regnode_charclass_class* %971 to %struct.regnode_charclass*
  %bitmap1523 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %972, i32 0, i32 4
  %arrayidx1524 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap1523, i32 0, i64 1
  %973 = load i8, i8* %arrayidx1524, align 1
  %conv1525 = sext i8 %973 to i32
  %and1526 = and i32 %conv1525, 4
  %tobool1527 = icmp ne i32 %and1526, 0
  br i1 %tobool1527, label %lor.end.1534, label %lor.rhs.1528

lor.rhs.1528:                                     ; preds = %if.then.1521
  %974 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1529 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %974, i32 0, i32 17
  %975 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1529, align 8
  %flags1530 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %975, i32 0, i32 0
  %976 = load i8, i8* %flags1530, align 1
  %conv1531 = zext i8 %976 to i32
  %and1532 = and i32 %conv1531, 8
  %tobool1533 = icmp ne i32 %and1532, 0
  br label %lor.end.1534

lor.end.1534:                                     ; preds = %lor.rhs.1528, %if.then.1521
  %977 = phi i1 [ true, %if.then.1521 ], [ %tobool1533, %lor.rhs.1528 ]
  %lor.ext1535 = zext i1 %977 to i32
  store i32 %lor.ext1535, i32* %value, align 4
  %978 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %979 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1536 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %979, i32 0, i32 17
  %980 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1536, align 8
  call void @S_cl_anything(%struct.RExC_state_t* %978, %struct.regnode_charclass_class* %980)
  br label %if.end.1537

if.end.1537:                                      ; preds = %lor.end.1534, %if.end.1518
  %981 = load i32, i32* %flags.addr, align 4
  %and1538 = and i32 %981, 2048
  %tobool1539 = icmp ne i32 %and1538, 0
  br i1 %tobool1539, label %if.then.1542, label %lor.lhs.false.1540

lor.lhs.false.1540:                               ; preds = %if.end.1537
  %982 = load i32, i32* %value, align 4
  %tobool1541 = icmp ne i32 %982, 0
  br i1 %tobool1541, label %if.end.1549, label %if.then.1542

if.then.1542:                                     ; preds = %lor.lhs.false.1540, %if.end.1537
  %983 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1543 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %983, i32 0, i32 17
  %984 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1543, align 8
  %985 = bitcast %struct.regnode_charclass_class* %984 to %struct.regnode_charclass*
  %bitmap1544 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %985, i32 0, i32 4
  %arrayidx1545 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap1544, i32 0, i64 1
  %986 = load i8, i8* %arrayidx1545, align 1
  %conv1546 = sext i8 %986 to i32
  %and1547 = and i32 %conv1546, -5
  %conv1548 = trunc i32 %and1547 to i8
  store i8 %conv1548, i8* %arrayidx1545, align 1
  br label %if.end.1549

if.end.1549:                                      ; preds = %if.then.1542, %lor.lhs.false.1540
  br label %sw.epilog.2298

sw.bb.1550:                                       ; preds = %if.then.1495
  %987 = load i32, i32* %flags.addr, align 4
  %and1551 = and i32 %987, 2048
  %tobool1552 = icmp ne i32 %and1551, 0
  br i1 %tobool1552, label %if.then.1553, label %if.else.1555

if.then.1553:                                     ; preds = %sw.bb.1550
  %988 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1554 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %988, i32 0, i32 17
  %989 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1554, align 8
  %990 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %991 = bitcast %struct.regnode* %990 to %struct.regnode_charclass_class*
  call void @S_cl_and(%struct.regnode_charclass_class* %989, %struct.regnode_charclass_class* %991)
  br label %if.end.1557

if.else.1555:                                     ; preds = %sw.bb.1550
  %992 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %993 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1556 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %993, i32 0, i32 17
  %994 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1556, align 8
  %995 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %996 = bitcast %struct.regnode* %995 to %struct.regnode_charclass_class*
  call void @S_cl_or(%struct.RExC_state_t* %992, %struct.regnode_charclass_class* %994, %struct.regnode_charclass_class* %996)
  br label %if.end.1557

if.end.1557:                                      ; preds = %if.else.1555, %if.then.1553
  br label %sw.epilog.2298

sw.bb.1558:                                       ; preds = %if.then.1495
  %997 = load i32, i32* %flags.addr, align 4
  %and1559 = and i32 %997, 2048
  %tobool1560 = icmp ne i32 %and1559, 0
  br i1 %tobool1560, label %if.then.1561, label %if.else.1615

if.then.1561:                                     ; preds = %sw.bb.1558
  %998 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1562 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %998, i32 0, i32 17
  %999 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1562, align 8
  %flags1563 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %999, i32 0, i32 0
  %1000 = load i8, i8* %flags1563, align 1
  %conv1564 = zext i8 %1000 to i32
  %and1565 = and i32 %conv1564, 1
  %tobool1566 = icmp ne i32 %and1565, 0
  br i1 %tobool1566, label %if.end.1614, label %if.then.1567

if.then.1567:                                     ; preds = %if.then.1561
  %1001 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1568 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1001, i32 0, i32 17
  %1002 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1568, align 8
  %classflags1569 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1002, i32 0, i32 5
  %arrayidx1570 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1569, i32 0, i64 0
  %1003 = load i8, i8* %arrayidx1570, align 1
  %conv1571 = sext i8 %1003 to i32
  %and1572 = and i32 %conv1571, -3
  %conv1573 = trunc i32 %and1572 to i8
  store i8 %conv1573, i8* %arrayidx1570, align 1
  store i32 0, i32* %value, align 4
  br label %for.cond.1574

for.cond.1574:                                    ; preds = %for.inc.1611, %if.then.1567
  %1004 = load i32, i32* %value, align 4
  %cmp1575 = icmp slt i32 %1004, 256
  br i1 %cmp1575, label %for.body.1577, label %for.end.1613

for.body.1577:                                    ; preds = %for.cond.1574
  %1005 = load i32, i32* %value, align 4
  %cmp1578 = icmp sge i32 %1005, 65
  br i1 %cmp1578, label %land.lhs.true.1580, label %lor.lhs.false.1583

land.lhs.true.1580:                               ; preds = %for.body.1577
  %1006 = load i32, i32* %value, align 4
  %cmp1581 = icmp sle i32 %1006, 90
  br i1 %cmp1581, label %if.end.1610, label %lor.lhs.false.1583

lor.lhs.false.1583:                               ; preds = %land.lhs.true.1580, %for.body.1577
  %1007 = load i32, i32* %value, align 4
  %cmp1584 = icmp sge i32 %1007, 97
  br i1 %cmp1584, label %land.lhs.true.1586, label %lor.lhs.false.1589

land.lhs.true.1586:                               ; preds = %lor.lhs.false.1583
  %1008 = load i32, i32* %value, align 4
  %cmp1587 = icmp sle i32 %1008, 122
  br i1 %cmp1587, label %if.end.1610, label %lor.lhs.false.1589

lor.lhs.false.1589:                               ; preds = %land.lhs.true.1586, %lor.lhs.false.1583
  %1009 = load i32, i32* %value, align 4
  %cmp1590 = icmp sge i32 %1009, 48
  br i1 %cmp1590, label %land.lhs.true.1592, label %lor.lhs.false.1595

land.lhs.true.1592:                               ; preds = %lor.lhs.false.1589
  %1010 = load i32, i32* %value, align 4
  %cmp1593 = icmp sle i32 %1010, 57
  br i1 %cmp1593, label %if.end.1610, label %lor.lhs.false.1595

lor.lhs.false.1595:                               ; preds = %land.lhs.true.1592, %lor.lhs.false.1589
  %1011 = load i32, i32* %value, align 4
  %cmp1596 = icmp eq i32 %1011, 95
  br i1 %cmp1596, label %if.end.1610, label %if.then.1598

if.then.1598:                                     ; preds = %lor.lhs.false.1595
  %1012 = load i32, i32* %value, align 4
  %and1599 = and i32 %1012, 7
  %shl1600 = shl i32 1, %and1599
  %neg = xor i32 %shl1600, -1
  %1013 = load i32, i32* %value, align 4
  %shr1601 = ashr i32 %1013, 3
  %and1602 = and i32 %shr1601, 31
  %idxprom1603 = sext i32 %and1602 to i64
  %1014 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1604 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1014, i32 0, i32 17
  %1015 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1604, align 8
  %1016 = bitcast %struct.regnode_charclass_class* %1015 to %struct.regnode_charclass*
  %bitmap1605 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %1016, i32 0, i32 4
  %arrayidx1606 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap1605, i32 0, i64 %idxprom1603
  %1017 = load i8, i8* %arrayidx1606, align 1
  %conv1607 = sext i8 %1017 to i32
  %and1608 = and i32 %conv1607, %neg
  %conv1609 = trunc i32 %and1608 to i8
  store i8 %conv1609, i8* %arrayidx1606, align 1
  br label %if.end.1610

if.end.1610:                                      ; preds = %if.then.1598, %lor.lhs.false.1595, %land.lhs.true.1592, %land.lhs.true.1586, %land.lhs.true.1580
  br label %for.inc.1611

for.inc.1611:                                     ; preds = %if.end.1610
  %1018 = load i32, i32* %value, align 4
  %inc1612 = add nsw i32 %1018, 1
  store i32 %inc1612, i32* %value, align 4
  br label %for.cond.1574

for.end.1613:                                     ; preds = %for.cond.1574
  br label %if.end.1614

if.end.1614:                                      ; preds = %for.end.1613, %if.then.1561
  br label %if.end.1670

if.else.1615:                                     ; preds = %sw.bb.1558
  %1019 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1616 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1019, i32 0, i32 17
  %1020 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1616, align 8
  %flags1617 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1020, i32 0, i32 0
  %1021 = load i8, i8* %flags1617, align 1
  %conv1618 = zext i8 %1021 to i32
  %and1619 = and i32 %conv1618, 1
  %tobool1620 = icmp ne i32 %and1619, 0
  br i1 %tobool1620, label %if.then.1621, label %if.else.1628

if.then.1621:                                     ; preds = %if.else.1615
  %1022 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1622 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1022, i32 0, i32 17
  %1023 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1622, align 8
  %classflags1623 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1023, i32 0, i32 5
  %arrayidx1624 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1623, i32 0, i64 0
  %1024 = load i8, i8* %arrayidx1624, align 1
  %conv1625 = sext i8 %1024 to i32
  %or1626 = or i32 %conv1625, 1
  %conv1627 = trunc i32 %or1626 to i8
  store i8 %conv1627, i8* %arrayidx1624, align 1
  br label %if.end.1669

if.else.1628:                                     ; preds = %if.else.1615
  store i32 0, i32* %value, align 4
  br label %for.cond.1629

for.cond.1629:                                    ; preds = %for.inc.1666, %if.else.1628
  %1025 = load i32, i32* %value, align 4
  %cmp1630 = icmp slt i32 %1025, 256
  br i1 %cmp1630, label %for.body.1632, label %for.end.1668

for.body.1632:                                    ; preds = %for.cond.1629
  %1026 = load i32, i32* %value, align 4
  %cmp1633 = icmp sge i32 %1026, 65
  br i1 %cmp1633, label %land.lhs.true.1635, label %lor.lhs.false.1638

land.lhs.true.1635:                               ; preds = %for.body.1632
  %1027 = load i32, i32* %value, align 4
  %cmp1636 = icmp sle i32 %1027, 90
  br i1 %cmp1636, label %if.then.1653, label %lor.lhs.false.1638

lor.lhs.false.1638:                               ; preds = %land.lhs.true.1635, %for.body.1632
  %1028 = load i32, i32* %value, align 4
  %cmp1639 = icmp sge i32 %1028, 97
  br i1 %cmp1639, label %land.lhs.true.1641, label %lor.lhs.false.1644

land.lhs.true.1641:                               ; preds = %lor.lhs.false.1638
  %1029 = load i32, i32* %value, align 4
  %cmp1642 = icmp sle i32 %1029, 122
  br i1 %cmp1642, label %if.then.1653, label %lor.lhs.false.1644

lor.lhs.false.1644:                               ; preds = %land.lhs.true.1641, %lor.lhs.false.1638
  %1030 = load i32, i32* %value, align 4
  %cmp1645 = icmp sge i32 %1030, 48
  br i1 %cmp1645, label %land.lhs.true.1647, label %lor.lhs.false.1650

land.lhs.true.1647:                               ; preds = %lor.lhs.false.1644
  %1031 = load i32, i32* %value, align 4
  %cmp1648 = icmp sle i32 %1031, 57
  br i1 %cmp1648, label %if.then.1653, label %lor.lhs.false.1650

lor.lhs.false.1650:                               ; preds = %land.lhs.true.1647, %lor.lhs.false.1644
  %1032 = load i32, i32* %value, align 4
  %cmp1651 = icmp eq i32 %1032, 95
  br i1 %cmp1651, label %if.then.1653, label %if.end.1665

if.then.1653:                                     ; preds = %lor.lhs.false.1650, %land.lhs.true.1647, %land.lhs.true.1641, %land.lhs.true.1635
  %1033 = load i32, i32* %value, align 4
  %and1654 = and i32 %1033, 7
  %shl1655 = shl i32 1, %and1654
  %1034 = load i32, i32* %value, align 4
  %shr1656 = ashr i32 %1034, 3
  %and1657 = and i32 %shr1656, 31
  %idxprom1658 = sext i32 %and1657 to i64
  %1035 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1659 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1035, i32 0, i32 17
  %1036 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1659, align 8
  %1037 = bitcast %struct.regnode_charclass_class* %1036 to %struct.regnode_charclass*
  %bitmap1660 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %1037, i32 0, i32 4
  %arrayidx1661 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap1660, i32 0, i64 %idxprom1658
  %1038 = load i8, i8* %arrayidx1661, align 1
  %conv1662 = sext i8 %1038 to i32
  %or1663 = or i32 %conv1662, %shl1655
  %conv1664 = trunc i32 %or1663 to i8
  store i8 %conv1664, i8* %arrayidx1661, align 1
  br label %if.end.1665

if.end.1665:                                      ; preds = %if.then.1653, %lor.lhs.false.1650
  br label %for.inc.1666

for.inc.1666:                                     ; preds = %if.end.1665
  %1039 = load i32, i32* %value, align 4
  %inc1667 = add nsw i32 %1039, 1
  store i32 %inc1667, i32* %value, align 4
  br label %for.cond.1629

for.end.1668:                                     ; preds = %for.cond.1629
  br label %if.end.1669

if.end.1669:                                      ; preds = %for.end.1668, %if.then.1621
  br label %if.end.1670

if.end.1670:                                      ; preds = %if.end.1669, %if.end.1614
  br label %sw.epilog.2298

sw.bb.1671:                                       ; preds = %if.then.1495
  %1040 = load i32, i32* %flags.addr, align 4
  %and1672 = and i32 %1040, 2048
  %tobool1673 = icmp ne i32 %and1672, 0
  br i1 %tobool1673, label %if.then.1674, label %if.else.1688

if.then.1674:                                     ; preds = %sw.bb.1671
  %1041 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1675 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1041, i32 0, i32 17
  %1042 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1675, align 8
  %flags1676 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1042, i32 0, i32 0
  %1043 = load i8, i8* %flags1676, align 1
  %conv1677 = zext i8 %1043 to i32
  %and1678 = and i32 %conv1677, 1
  %tobool1679 = icmp ne i32 %and1678, 0
  br i1 %tobool1679, label %if.then.1680, label %if.end.1687

if.then.1680:                                     ; preds = %if.then.1674
  %1044 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1681 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1044, i32 0, i32 17
  %1045 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1681, align 8
  %classflags1682 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1045, i32 0, i32 5
  %arrayidx1683 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1682, i32 0, i64 0
  %1046 = load i8, i8* %arrayidx1683, align 1
  %conv1684 = sext i8 %1046 to i32
  %and1685 = and i32 %conv1684, -3
  %conv1686 = trunc i32 %and1685 to i8
  store i8 %conv1686, i8* %arrayidx1683, align 1
  br label %if.end.1687

if.end.1687:                                      ; preds = %if.then.1680, %if.then.1674
  br label %if.end.1700

if.else.1688:                                     ; preds = %sw.bb.1671
  %1047 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1689 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1047, i32 0, i32 17
  %1048 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1689, align 8
  %classflags1690 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1048, i32 0, i32 5
  %arrayidx1691 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1690, i32 0, i64 0
  %1049 = load i8, i8* %arrayidx1691, align 1
  %conv1692 = sext i8 %1049 to i32
  %or1693 = or i32 %conv1692, 1
  %conv1694 = trunc i32 %or1693 to i8
  store i8 %conv1694, i8* %arrayidx1691, align 1
  %1050 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1695 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1050, i32 0, i32 17
  %1051 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1695, align 8
  %flags1696 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1051, i32 0, i32 0
  %1052 = load i8, i8* %flags1696, align 1
  %conv1697 = zext i8 %1052 to i32
  %or1698 = or i32 %conv1697, 1
  %conv1699 = trunc i32 %or1698 to i8
  store i8 %conv1699, i8* %flags1696, align 1
  br label %if.end.1700

if.end.1700:                                      ; preds = %if.else.1688, %if.end.1687
  br label %sw.epilog.2298

sw.bb.1701:                                       ; preds = %if.then.1495
  %1053 = load i32, i32* %flags.addr, align 4
  %and1702 = and i32 %1053, 2048
  %tobool1703 = icmp ne i32 %and1702, 0
  br i1 %tobool1703, label %if.then.1704, label %if.else.1759

if.then.1704:                                     ; preds = %sw.bb.1701
  %1054 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1705 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1054, i32 0, i32 17
  %1055 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1705, align 8
  %flags1706 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1055, i32 0, i32 0
  %1056 = load i8, i8* %flags1706, align 1
  %conv1707 = zext i8 %1056 to i32
  %and1708 = and i32 %conv1707, 1
  %tobool1709 = icmp ne i32 %and1708, 0
  br i1 %tobool1709, label %if.end.1758, label %if.then.1710

if.then.1710:                                     ; preds = %if.then.1704
  %1057 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1711 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1057, i32 0, i32 17
  %1058 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1711, align 8
  %classflags1712 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1058, i32 0, i32 5
  %arrayidx1713 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1712, i32 0, i64 0
  %1059 = load i8, i8* %arrayidx1713, align 1
  %conv1714 = sext i8 %1059 to i32
  %and1715 = and i32 %conv1714, -2
  %conv1716 = trunc i32 %and1715 to i8
  store i8 %conv1716, i8* %arrayidx1713, align 1
  store i32 0, i32* %value, align 4
  br label %for.cond.1717

for.cond.1717:                                    ; preds = %for.inc.1755, %if.then.1710
  %1060 = load i32, i32* %value, align 4
  %cmp1718 = icmp slt i32 %1060, 256
  br i1 %cmp1718, label %for.body.1720, label %for.end.1757

for.body.1720:                                    ; preds = %for.cond.1717
  %1061 = load i32, i32* %value, align 4
  %cmp1721 = icmp sge i32 %1061, 65
  br i1 %cmp1721, label %land.lhs.true.1723, label %lor.lhs.false.1726

land.lhs.true.1723:                               ; preds = %for.body.1720
  %1062 = load i32, i32* %value, align 4
  %cmp1724 = icmp sle i32 %1062, 90
  br i1 %cmp1724, label %if.then.1741, label %lor.lhs.false.1726

lor.lhs.false.1726:                               ; preds = %land.lhs.true.1723, %for.body.1720
  %1063 = load i32, i32* %value, align 4
  %cmp1727 = icmp sge i32 %1063, 97
  br i1 %cmp1727, label %land.lhs.true.1729, label %lor.lhs.false.1732

land.lhs.true.1729:                               ; preds = %lor.lhs.false.1726
  %1064 = load i32, i32* %value, align 4
  %cmp1730 = icmp sle i32 %1064, 122
  br i1 %cmp1730, label %if.then.1741, label %lor.lhs.false.1732

lor.lhs.false.1732:                               ; preds = %land.lhs.true.1729, %lor.lhs.false.1726
  %1065 = load i32, i32* %value, align 4
  %cmp1733 = icmp sge i32 %1065, 48
  br i1 %cmp1733, label %land.lhs.true.1735, label %lor.lhs.false.1738

land.lhs.true.1735:                               ; preds = %lor.lhs.false.1732
  %1066 = load i32, i32* %value, align 4
  %cmp1736 = icmp sle i32 %1066, 57
  br i1 %cmp1736, label %if.then.1741, label %lor.lhs.false.1738

lor.lhs.false.1738:                               ; preds = %land.lhs.true.1735, %lor.lhs.false.1732
  %1067 = load i32, i32* %value, align 4
  %cmp1739 = icmp eq i32 %1067, 95
  br i1 %cmp1739, label %if.then.1741, label %if.end.1754

if.then.1741:                                     ; preds = %lor.lhs.false.1738, %land.lhs.true.1735, %land.lhs.true.1729, %land.lhs.true.1723
  %1068 = load i32, i32* %value, align 4
  %and1742 = and i32 %1068, 7
  %shl1743 = shl i32 1, %and1742
  %neg1744 = xor i32 %shl1743, -1
  %1069 = load i32, i32* %value, align 4
  %shr1745 = ashr i32 %1069, 3
  %and1746 = and i32 %shr1745, 31
  %idxprom1747 = sext i32 %and1746 to i64
  %1070 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1748 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1070, i32 0, i32 17
  %1071 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1748, align 8
  %1072 = bitcast %struct.regnode_charclass_class* %1071 to %struct.regnode_charclass*
  %bitmap1749 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %1072, i32 0, i32 4
  %arrayidx1750 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap1749, i32 0, i64 %idxprom1747
  %1073 = load i8, i8* %arrayidx1750, align 1
  %conv1751 = sext i8 %1073 to i32
  %and1752 = and i32 %conv1751, %neg1744
  %conv1753 = trunc i32 %and1752 to i8
  store i8 %conv1753, i8* %arrayidx1750, align 1
  br label %if.end.1754

if.end.1754:                                      ; preds = %if.then.1741, %lor.lhs.false.1738
  br label %for.inc.1755

for.inc.1755:                                     ; preds = %if.end.1754
  %1074 = load i32, i32* %value, align 4
  %inc1756 = add nsw i32 %1074, 1
  store i32 %inc1756, i32* %value, align 4
  br label %for.cond.1717

for.end.1757:                                     ; preds = %for.cond.1717
  br label %if.end.1758

if.end.1758:                                      ; preds = %for.end.1757, %if.then.1704
  br label %if.end.1814

if.else.1759:                                     ; preds = %sw.bb.1701
  %1075 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1760 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1075, i32 0, i32 17
  %1076 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1760, align 8
  %flags1761 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1076, i32 0, i32 0
  %1077 = load i8, i8* %flags1761, align 1
  %conv1762 = zext i8 %1077 to i32
  %and1763 = and i32 %conv1762, 1
  %tobool1764 = icmp ne i32 %and1763, 0
  br i1 %tobool1764, label %if.then.1765, label %if.else.1772

if.then.1765:                                     ; preds = %if.else.1759
  %1078 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1766 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1078, i32 0, i32 17
  %1079 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1766, align 8
  %classflags1767 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1079, i32 0, i32 5
  %arrayidx1768 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1767, i32 0, i64 0
  %1080 = load i8, i8* %arrayidx1768, align 1
  %conv1769 = sext i8 %1080 to i32
  %or1770 = or i32 %conv1769, 2
  %conv1771 = trunc i32 %or1770 to i8
  store i8 %conv1771, i8* %arrayidx1768, align 1
  br label %if.end.1813

if.else.1772:                                     ; preds = %if.else.1759
  store i32 0, i32* %value, align 4
  br label %for.cond.1773

for.cond.1773:                                    ; preds = %for.inc.1810, %if.else.1772
  %1081 = load i32, i32* %value, align 4
  %cmp1774 = icmp slt i32 %1081, 256
  br i1 %cmp1774, label %for.body.1776, label %for.end.1812

for.body.1776:                                    ; preds = %for.cond.1773
  %1082 = load i32, i32* %value, align 4
  %cmp1777 = icmp sge i32 %1082, 65
  br i1 %cmp1777, label %land.lhs.true.1779, label %lor.lhs.false.1782

land.lhs.true.1779:                               ; preds = %for.body.1776
  %1083 = load i32, i32* %value, align 4
  %cmp1780 = icmp sle i32 %1083, 90
  br i1 %cmp1780, label %if.end.1809, label %lor.lhs.false.1782

lor.lhs.false.1782:                               ; preds = %land.lhs.true.1779, %for.body.1776
  %1084 = load i32, i32* %value, align 4
  %cmp1783 = icmp sge i32 %1084, 97
  br i1 %cmp1783, label %land.lhs.true.1785, label %lor.lhs.false.1788

land.lhs.true.1785:                               ; preds = %lor.lhs.false.1782
  %1085 = load i32, i32* %value, align 4
  %cmp1786 = icmp sle i32 %1085, 122
  br i1 %cmp1786, label %if.end.1809, label %lor.lhs.false.1788

lor.lhs.false.1788:                               ; preds = %land.lhs.true.1785, %lor.lhs.false.1782
  %1086 = load i32, i32* %value, align 4
  %cmp1789 = icmp sge i32 %1086, 48
  br i1 %cmp1789, label %land.lhs.true.1791, label %lor.lhs.false.1794

land.lhs.true.1791:                               ; preds = %lor.lhs.false.1788
  %1087 = load i32, i32* %value, align 4
  %cmp1792 = icmp sle i32 %1087, 57
  br i1 %cmp1792, label %if.end.1809, label %lor.lhs.false.1794

lor.lhs.false.1794:                               ; preds = %land.lhs.true.1791, %lor.lhs.false.1788
  %1088 = load i32, i32* %value, align 4
  %cmp1795 = icmp eq i32 %1088, 95
  br i1 %cmp1795, label %if.end.1809, label %if.then.1797

if.then.1797:                                     ; preds = %lor.lhs.false.1794
  %1089 = load i32, i32* %value, align 4
  %and1798 = and i32 %1089, 7
  %shl1799 = shl i32 1, %and1798
  %1090 = load i32, i32* %value, align 4
  %shr1800 = ashr i32 %1090, 3
  %and1801 = and i32 %shr1800, 31
  %idxprom1802 = sext i32 %and1801 to i64
  %1091 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1803 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1091, i32 0, i32 17
  %1092 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1803, align 8
  %1093 = bitcast %struct.regnode_charclass_class* %1092 to %struct.regnode_charclass*
  %bitmap1804 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %1093, i32 0, i32 4
  %arrayidx1805 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap1804, i32 0, i64 %idxprom1802
  %1094 = load i8, i8* %arrayidx1805, align 1
  %conv1806 = sext i8 %1094 to i32
  %or1807 = or i32 %conv1806, %shl1799
  %conv1808 = trunc i32 %or1807 to i8
  store i8 %conv1808, i8* %arrayidx1805, align 1
  br label %if.end.1809

if.end.1809:                                      ; preds = %if.then.1797, %lor.lhs.false.1794, %land.lhs.true.1791, %land.lhs.true.1785, %land.lhs.true.1779
  br label %for.inc.1810

for.inc.1810:                                     ; preds = %if.end.1809
  %1095 = load i32, i32* %value, align 4
  %inc1811 = add nsw i32 %1095, 1
  store i32 %inc1811, i32* %value, align 4
  br label %for.cond.1773

for.end.1812:                                     ; preds = %for.cond.1773
  br label %if.end.1813

if.end.1813:                                      ; preds = %for.end.1812, %if.then.1765
  br label %if.end.1814

if.end.1814:                                      ; preds = %if.end.1813, %if.end.1758
  br label %sw.epilog.2298

sw.bb.1815:                                       ; preds = %if.then.1495
  %1096 = load i32, i32* %flags.addr, align 4
  %and1816 = and i32 %1096, 2048
  %tobool1817 = icmp ne i32 %and1816, 0
  br i1 %tobool1817, label %if.then.1818, label %if.else.1832

if.then.1818:                                     ; preds = %sw.bb.1815
  %1097 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1819 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1097, i32 0, i32 17
  %1098 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1819, align 8
  %flags1820 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1098, i32 0, i32 0
  %1099 = load i8, i8* %flags1820, align 1
  %conv1821 = zext i8 %1099 to i32
  %and1822 = and i32 %conv1821, 1
  %tobool1823 = icmp ne i32 %and1822, 0
  br i1 %tobool1823, label %if.then.1824, label %if.end.1831

if.then.1824:                                     ; preds = %if.then.1818
  %1100 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1825 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1100, i32 0, i32 17
  %1101 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1825, align 8
  %classflags1826 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1101, i32 0, i32 5
  %arrayidx1827 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1826, i32 0, i64 0
  %1102 = load i8, i8* %arrayidx1827, align 1
  %conv1828 = sext i8 %1102 to i32
  %and1829 = and i32 %conv1828, -2
  %conv1830 = trunc i32 %and1829 to i8
  store i8 %conv1830, i8* %arrayidx1827, align 1
  br label %if.end.1831

if.end.1831:                                      ; preds = %if.then.1824, %if.then.1818
  br label %if.end.1844

if.else.1832:                                     ; preds = %sw.bb.1815
  %1103 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1833 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1103, i32 0, i32 17
  %1104 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1833, align 8
  %flags1834 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1104, i32 0, i32 0
  %1105 = load i8, i8* %flags1834, align 1
  %conv1835 = zext i8 %1105 to i32
  %or1836 = or i32 %conv1835, 1
  %conv1837 = trunc i32 %or1836 to i8
  store i8 %conv1837, i8* %flags1834, align 1
  %1106 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1838 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1106, i32 0, i32 17
  %1107 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1838, align 8
  %classflags1839 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1107, i32 0, i32 5
  %arrayidx1840 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1839, i32 0, i64 0
  %1108 = load i8, i8* %arrayidx1840, align 1
  %conv1841 = sext i8 %1108 to i32
  %or1842 = or i32 %conv1841, 2
  %conv1843 = trunc i32 %or1842 to i8
  store i8 %conv1843, i8* %arrayidx1840, align 1
  br label %if.end.1844

if.end.1844:                                      ; preds = %if.else.1832, %if.end.1831
  br label %sw.epilog.2298

sw.bb.1845:                                       ; preds = %if.then.1495
  %1109 = load i32, i32* %flags.addr, align 4
  %and1846 = and i32 %1109, 2048
  %tobool1847 = icmp ne i32 %and1846, 0
  br i1 %tobool1847, label %if.then.1848, label %if.else.1897

if.then.1848:                                     ; preds = %sw.bb.1845
  %1110 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1849 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1110, i32 0, i32 17
  %1111 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1849, align 8
  %flags1850 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1111, i32 0, i32 0
  %1112 = load i8, i8* %flags1850, align 1
  %conv1851 = zext i8 %1112 to i32
  %and1852 = and i32 %conv1851, 1
  %tobool1853 = icmp ne i32 %and1852, 0
  br i1 %tobool1853, label %if.end.1896, label %if.then.1854

if.then.1854:                                     ; preds = %if.then.1848
  %1113 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1855 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1113, i32 0, i32 17
  %1114 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1855, align 8
  %classflags1856 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1114, i32 0, i32 5
  %arrayidx1857 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1856, i32 0, i64 0
  %1115 = load i8, i8* %arrayidx1857, align 1
  %conv1858 = sext i8 %1115 to i32
  %and1859 = and i32 %conv1858, -9
  %conv1860 = trunc i32 %and1859 to i8
  store i8 %conv1860, i8* %arrayidx1857, align 1
  store i32 0, i32* %value, align 4
  br label %for.cond.1861

for.cond.1861:                                    ; preds = %for.inc.1893, %if.then.1854
  %1116 = load i32, i32* %value, align 4
  %cmp1862 = icmp slt i32 %1116, 256
  br i1 %cmp1862, label %for.body.1864, label %for.end.1895

for.body.1864:                                    ; preds = %for.cond.1861
  %1117 = load i32, i32* %value, align 4
  %cmp1865 = icmp eq i32 %1117, 32
  br i1 %cmp1865, label %if.end.1892, label %lor.lhs.false.1867

lor.lhs.false.1867:                               ; preds = %for.body.1864
  %1118 = load i32, i32* %value, align 4
  %cmp1868 = icmp eq i32 %1118, 9
  br i1 %cmp1868, label %if.end.1892, label %lor.lhs.false.1870

lor.lhs.false.1870:                               ; preds = %lor.lhs.false.1867
  %1119 = load i32, i32* %value, align 4
  %cmp1871 = icmp eq i32 %1119, 10
  br i1 %cmp1871, label %if.end.1892, label %lor.lhs.false.1873

lor.lhs.false.1873:                               ; preds = %lor.lhs.false.1870
  %1120 = load i32, i32* %value, align 4
  %cmp1874 = icmp eq i32 %1120, 13
  br i1 %cmp1874, label %if.end.1892, label %lor.lhs.false.1876

lor.lhs.false.1876:                               ; preds = %lor.lhs.false.1873
  %1121 = load i32, i32* %value, align 4
  %cmp1877 = icmp eq i32 %1121, 12
  br i1 %cmp1877, label %if.end.1892, label %if.then.1879

if.then.1879:                                     ; preds = %lor.lhs.false.1876
  %1122 = load i32, i32* %value, align 4
  %and1880 = and i32 %1122, 7
  %shl1881 = shl i32 1, %and1880
  %neg1882 = xor i32 %shl1881, -1
  %1123 = load i32, i32* %value, align 4
  %shr1883 = ashr i32 %1123, 3
  %and1884 = and i32 %shr1883, 31
  %idxprom1885 = sext i32 %and1884 to i64
  %1124 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1886 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1124, i32 0, i32 17
  %1125 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1886, align 8
  %1126 = bitcast %struct.regnode_charclass_class* %1125 to %struct.regnode_charclass*
  %bitmap1887 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %1126, i32 0, i32 4
  %arrayidx1888 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap1887, i32 0, i64 %idxprom1885
  %1127 = load i8, i8* %arrayidx1888, align 1
  %conv1889 = sext i8 %1127 to i32
  %and1890 = and i32 %conv1889, %neg1882
  %conv1891 = trunc i32 %and1890 to i8
  store i8 %conv1891, i8* %arrayidx1888, align 1
  br label %if.end.1892

if.end.1892:                                      ; preds = %if.then.1879, %lor.lhs.false.1876, %lor.lhs.false.1873, %lor.lhs.false.1870, %lor.lhs.false.1867, %for.body.1864
  br label %for.inc.1893

for.inc.1893:                                     ; preds = %if.end.1892
  %1128 = load i32, i32* %value, align 4
  %inc1894 = add nsw i32 %1128, 1
  store i32 %inc1894, i32* %value, align 4
  br label %for.cond.1861

for.end.1895:                                     ; preds = %for.cond.1861
  br label %if.end.1896

if.end.1896:                                      ; preds = %for.end.1895, %if.then.1848
  br label %if.end.1946

if.else.1897:                                     ; preds = %sw.bb.1845
  %1129 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1898 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1129, i32 0, i32 17
  %1130 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1898, align 8
  %flags1899 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1130, i32 0, i32 0
  %1131 = load i8, i8* %flags1899, align 1
  %conv1900 = zext i8 %1131 to i32
  %and1901 = and i32 %conv1900, 1
  %tobool1902 = icmp ne i32 %and1901, 0
  br i1 %tobool1902, label %if.then.1903, label %if.else.1910

if.then.1903:                                     ; preds = %if.else.1897
  %1132 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1904 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1132, i32 0, i32 17
  %1133 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1904, align 8
  %classflags1905 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1133, i32 0, i32 5
  %arrayidx1906 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1905, i32 0, i64 0
  %1134 = load i8, i8* %arrayidx1906, align 1
  %conv1907 = sext i8 %1134 to i32
  %or1908 = or i32 %conv1907, 4
  %conv1909 = trunc i32 %or1908 to i8
  store i8 %conv1909, i8* %arrayidx1906, align 1
  br label %if.end.1945

if.else.1910:                                     ; preds = %if.else.1897
  store i32 0, i32* %value, align 4
  br label %for.cond.1911

for.cond.1911:                                    ; preds = %for.inc.1942, %if.else.1910
  %1135 = load i32, i32* %value, align 4
  %cmp1912 = icmp slt i32 %1135, 256
  br i1 %cmp1912, label %for.body.1914, label %for.end.1944

for.body.1914:                                    ; preds = %for.cond.1911
  %1136 = load i32, i32* %value, align 4
  %cmp1915 = icmp eq i32 %1136, 32
  br i1 %cmp1915, label %if.then.1929, label %lor.lhs.false.1917

lor.lhs.false.1917:                               ; preds = %for.body.1914
  %1137 = load i32, i32* %value, align 4
  %cmp1918 = icmp eq i32 %1137, 9
  br i1 %cmp1918, label %if.then.1929, label %lor.lhs.false.1920

lor.lhs.false.1920:                               ; preds = %lor.lhs.false.1917
  %1138 = load i32, i32* %value, align 4
  %cmp1921 = icmp eq i32 %1138, 10
  br i1 %cmp1921, label %if.then.1929, label %lor.lhs.false.1923

lor.lhs.false.1923:                               ; preds = %lor.lhs.false.1920
  %1139 = load i32, i32* %value, align 4
  %cmp1924 = icmp eq i32 %1139, 13
  br i1 %cmp1924, label %if.then.1929, label %lor.lhs.false.1926

lor.lhs.false.1926:                               ; preds = %lor.lhs.false.1923
  %1140 = load i32, i32* %value, align 4
  %cmp1927 = icmp eq i32 %1140, 12
  br i1 %cmp1927, label %if.then.1929, label %if.end.1941

if.then.1929:                                     ; preds = %lor.lhs.false.1926, %lor.lhs.false.1923, %lor.lhs.false.1920, %lor.lhs.false.1917, %for.body.1914
  %1141 = load i32, i32* %value, align 4
  %and1930 = and i32 %1141, 7
  %shl1931 = shl i32 1, %and1930
  %1142 = load i32, i32* %value, align 4
  %shr1932 = ashr i32 %1142, 3
  %and1933 = and i32 %shr1932, 31
  %idxprom1934 = sext i32 %and1933 to i64
  %1143 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1935 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1143, i32 0, i32 17
  %1144 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1935, align 8
  %1145 = bitcast %struct.regnode_charclass_class* %1144 to %struct.regnode_charclass*
  %bitmap1936 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %1145, i32 0, i32 4
  %arrayidx1937 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap1936, i32 0, i64 %idxprom1934
  %1146 = load i8, i8* %arrayidx1937, align 1
  %conv1938 = sext i8 %1146 to i32
  %or1939 = or i32 %conv1938, %shl1931
  %conv1940 = trunc i32 %or1939 to i8
  store i8 %conv1940, i8* %arrayidx1937, align 1
  br label %if.end.1941

if.end.1941:                                      ; preds = %if.then.1929, %lor.lhs.false.1926
  br label %for.inc.1942

for.inc.1942:                                     ; preds = %if.end.1941
  %1147 = load i32, i32* %value, align 4
  %inc1943 = add nsw i32 %1147, 1
  store i32 %inc1943, i32* %value, align 4
  br label %for.cond.1911

for.end.1944:                                     ; preds = %for.cond.1911
  br label %if.end.1945

if.end.1945:                                      ; preds = %for.end.1944, %if.then.1903
  br label %if.end.1946

if.end.1946:                                      ; preds = %if.end.1945, %if.end.1896
  br label %sw.epilog.2298

sw.bb.1947:                                       ; preds = %if.then.1495
  %1148 = load i32, i32* %flags.addr, align 4
  %and1948 = and i32 %1148, 2048
  %tobool1949 = icmp ne i32 %and1948, 0
  br i1 %tobool1949, label %if.then.1950, label %if.else.1964

if.then.1950:                                     ; preds = %sw.bb.1947
  %1149 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1951 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1149, i32 0, i32 17
  %1150 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1951, align 8
  %flags1952 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1150, i32 0, i32 0
  %1151 = load i8, i8* %flags1952, align 1
  %conv1953 = zext i8 %1151 to i32
  %and1954 = and i32 %conv1953, 1
  %tobool1955 = icmp ne i32 %and1954, 0
  br i1 %tobool1955, label %if.then.1956, label %if.end.1963

if.then.1956:                                     ; preds = %if.then.1950
  %1152 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1957 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1152, i32 0, i32 17
  %1153 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1957, align 8
  %classflags1958 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1153, i32 0, i32 5
  %arrayidx1959 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1958, i32 0, i64 0
  %1154 = load i8, i8* %arrayidx1959, align 1
  %conv1960 = sext i8 %1154 to i32
  %and1961 = and i32 %conv1960, -9
  %conv1962 = trunc i32 %and1961 to i8
  store i8 %conv1962, i8* %arrayidx1959, align 1
  br label %if.end.1963

if.end.1963:                                      ; preds = %if.then.1956, %if.then.1950
  br label %if.end.1976

if.else.1964:                                     ; preds = %sw.bb.1947
  %1155 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1965 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1155, i32 0, i32 17
  %1156 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1965, align 8
  %flags1966 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1156, i32 0, i32 0
  %1157 = load i8, i8* %flags1966, align 1
  %conv1967 = zext i8 %1157 to i32
  %or1968 = or i32 %conv1967, 1
  %conv1969 = trunc i32 %or1968 to i8
  store i8 %conv1969, i8* %flags1966, align 1
  %1158 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1970 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1158, i32 0, i32 17
  %1159 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1970, align 8
  %classflags1971 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1159, i32 0, i32 5
  %arrayidx1972 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1971, i32 0, i64 0
  %1160 = load i8, i8* %arrayidx1972, align 1
  %conv1973 = sext i8 %1160 to i32
  %or1974 = or i32 %conv1973, 4
  %conv1975 = trunc i32 %or1974 to i8
  store i8 %conv1975, i8* %arrayidx1972, align 1
  br label %if.end.1976

if.end.1976:                                      ; preds = %if.else.1964, %if.end.1963
  br label %sw.epilog.2298

sw.bb.1977:                                       ; preds = %if.then.1495
  %1161 = load i32, i32* %flags.addr, align 4
  %and1978 = and i32 %1161, 2048
  %tobool1979 = icmp ne i32 %and1978, 0
  br i1 %tobool1979, label %if.then.1980, label %if.else.2029

if.then.1980:                                     ; preds = %sw.bb.1977
  %1162 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1981 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1162, i32 0, i32 17
  %1163 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1981, align 8
  %flags1982 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1163, i32 0, i32 0
  %1164 = load i8, i8* %flags1982, align 1
  %conv1983 = zext i8 %1164 to i32
  %and1984 = and i32 %conv1983, 1
  %tobool1985 = icmp ne i32 %and1984, 0
  br i1 %tobool1985, label %if.end.2028, label %if.then.1986

if.then.1986:                                     ; preds = %if.then.1980
  %1165 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1987 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1165, i32 0, i32 17
  %1166 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class1987, align 8
  %classflags1988 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1166, i32 0, i32 5
  %arrayidx1989 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1988, i32 0, i64 0
  %1167 = load i8, i8* %arrayidx1989, align 1
  %conv1990 = sext i8 %1167 to i32
  %and1991 = and i32 %conv1990, -5
  %conv1992 = trunc i32 %and1991 to i8
  store i8 %conv1992, i8* %arrayidx1989, align 1
  store i32 0, i32* %value, align 4
  br label %for.cond.1993

for.cond.1993:                                    ; preds = %for.inc.2025, %if.then.1986
  %1168 = load i32, i32* %value, align 4
  %cmp1994 = icmp slt i32 %1168, 256
  br i1 %cmp1994, label %for.body.1996, label %for.end.2027

for.body.1996:                                    ; preds = %for.cond.1993
  %1169 = load i32, i32* %value, align 4
  %cmp1997 = icmp eq i32 %1169, 32
  br i1 %cmp1997, label %if.then.2011, label %lor.lhs.false.1999

lor.lhs.false.1999:                               ; preds = %for.body.1996
  %1170 = load i32, i32* %value, align 4
  %cmp2000 = icmp eq i32 %1170, 9
  br i1 %cmp2000, label %if.then.2011, label %lor.lhs.false.2002

lor.lhs.false.2002:                               ; preds = %lor.lhs.false.1999
  %1171 = load i32, i32* %value, align 4
  %cmp2003 = icmp eq i32 %1171, 10
  br i1 %cmp2003, label %if.then.2011, label %lor.lhs.false.2005

lor.lhs.false.2005:                               ; preds = %lor.lhs.false.2002
  %1172 = load i32, i32* %value, align 4
  %cmp2006 = icmp eq i32 %1172, 13
  br i1 %cmp2006, label %if.then.2011, label %lor.lhs.false.2008

lor.lhs.false.2008:                               ; preds = %lor.lhs.false.2005
  %1173 = load i32, i32* %value, align 4
  %cmp2009 = icmp eq i32 %1173, 12
  br i1 %cmp2009, label %if.then.2011, label %if.end.2024

if.then.2011:                                     ; preds = %lor.lhs.false.2008, %lor.lhs.false.2005, %lor.lhs.false.2002, %lor.lhs.false.1999, %for.body.1996
  %1174 = load i32, i32* %value, align 4
  %and2012 = and i32 %1174, 7
  %shl2013 = shl i32 1, %and2012
  %neg2014 = xor i32 %shl2013, -1
  %1175 = load i32, i32* %value, align 4
  %shr2015 = ashr i32 %1175, 3
  %and2016 = and i32 %shr2015, 31
  %idxprom2017 = sext i32 %and2016 to i64
  %1176 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2018 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1176, i32 0, i32 17
  %1177 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class2018, align 8
  %1178 = bitcast %struct.regnode_charclass_class* %1177 to %struct.regnode_charclass*
  %bitmap2019 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %1178, i32 0, i32 4
  %arrayidx2020 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap2019, i32 0, i64 %idxprom2017
  %1179 = load i8, i8* %arrayidx2020, align 1
  %conv2021 = sext i8 %1179 to i32
  %and2022 = and i32 %conv2021, %neg2014
  %conv2023 = trunc i32 %and2022 to i8
  store i8 %conv2023, i8* %arrayidx2020, align 1
  br label %if.end.2024

if.end.2024:                                      ; preds = %if.then.2011, %lor.lhs.false.2008
  br label %for.inc.2025

for.inc.2025:                                     ; preds = %if.end.2024
  %1180 = load i32, i32* %value, align 4
  %inc2026 = add nsw i32 %1180, 1
  store i32 %inc2026, i32* %value, align 4
  br label %for.cond.1993

for.end.2027:                                     ; preds = %for.cond.1993
  br label %if.end.2028

if.end.2028:                                      ; preds = %for.end.2027, %if.then.1980
  br label %if.end.2078

if.else.2029:                                     ; preds = %sw.bb.1977
  %1181 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2030 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1181, i32 0, i32 17
  %1182 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class2030, align 8
  %flags2031 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1182, i32 0, i32 0
  %1183 = load i8, i8* %flags2031, align 1
  %conv2032 = zext i8 %1183 to i32
  %and2033 = and i32 %conv2032, 1
  %tobool2034 = icmp ne i32 %and2033, 0
  br i1 %tobool2034, label %if.then.2035, label %if.else.2042

if.then.2035:                                     ; preds = %if.else.2029
  %1184 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2036 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1184, i32 0, i32 17
  %1185 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class2036, align 8
  %classflags2037 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1185, i32 0, i32 5
  %arrayidx2038 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags2037, i32 0, i64 0
  %1186 = load i8, i8* %arrayidx2038, align 1
  %conv2039 = sext i8 %1186 to i32
  %or2040 = or i32 %conv2039, 8
  %conv2041 = trunc i32 %or2040 to i8
  store i8 %conv2041, i8* %arrayidx2038, align 1
  br label %if.end.2077

if.else.2042:                                     ; preds = %if.else.2029
  store i32 0, i32* %value, align 4
  br label %for.cond.2043

for.cond.2043:                                    ; preds = %for.inc.2074, %if.else.2042
  %1187 = load i32, i32* %value, align 4
  %cmp2044 = icmp slt i32 %1187, 256
  br i1 %cmp2044, label %for.body.2046, label %for.end.2076

for.body.2046:                                    ; preds = %for.cond.2043
  %1188 = load i32, i32* %value, align 4
  %cmp2047 = icmp eq i32 %1188, 32
  br i1 %cmp2047, label %if.end.2073, label %lor.lhs.false.2049

lor.lhs.false.2049:                               ; preds = %for.body.2046
  %1189 = load i32, i32* %value, align 4
  %cmp2050 = icmp eq i32 %1189, 9
  br i1 %cmp2050, label %if.end.2073, label %lor.lhs.false.2052

lor.lhs.false.2052:                               ; preds = %lor.lhs.false.2049
  %1190 = load i32, i32* %value, align 4
  %cmp2053 = icmp eq i32 %1190, 10
  br i1 %cmp2053, label %if.end.2073, label %lor.lhs.false.2055

lor.lhs.false.2055:                               ; preds = %lor.lhs.false.2052
  %1191 = load i32, i32* %value, align 4
  %cmp2056 = icmp eq i32 %1191, 13
  br i1 %cmp2056, label %if.end.2073, label %lor.lhs.false.2058

lor.lhs.false.2058:                               ; preds = %lor.lhs.false.2055
  %1192 = load i32, i32* %value, align 4
  %cmp2059 = icmp eq i32 %1192, 12
  br i1 %cmp2059, label %if.end.2073, label %if.then.2061

if.then.2061:                                     ; preds = %lor.lhs.false.2058
  %1193 = load i32, i32* %value, align 4
  %and2062 = and i32 %1193, 7
  %shl2063 = shl i32 1, %and2062
  %1194 = load i32, i32* %value, align 4
  %shr2064 = ashr i32 %1194, 3
  %and2065 = and i32 %shr2064, 31
  %idxprom2066 = sext i32 %and2065 to i64
  %1195 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2067 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1195, i32 0, i32 17
  %1196 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class2067, align 8
  %1197 = bitcast %struct.regnode_charclass_class* %1196 to %struct.regnode_charclass*
  %bitmap2068 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %1197, i32 0, i32 4
  %arrayidx2069 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap2068, i32 0, i64 %idxprom2066
  %1198 = load i8, i8* %arrayidx2069, align 1
  %conv2070 = sext i8 %1198 to i32
  %or2071 = or i32 %conv2070, %shl2063
  %conv2072 = trunc i32 %or2071 to i8
  store i8 %conv2072, i8* %arrayidx2069, align 1
  br label %if.end.2073

if.end.2073:                                      ; preds = %if.then.2061, %lor.lhs.false.2058, %lor.lhs.false.2055, %lor.lhs.false.2052, %lor.lhs.false.2049, %for.body.2046
  br label %for.inc.2074

for.inc.2074:                                     ; preds = %if.end.2073
  %1199 = load i32, i32* %value, align 4
  %inc2075 = add nsw i32 %1199, 1
  store i32 %inc2075, i32* %value, align 4
  br label %for.cond.2043

for.end.2076:                                     ; preds = %for.cond.2043
  br label %if.end.2077

if.end.2077:                                      ; preds = %for.end.2076, %if.then.2035
  br label %if.end.2078

if.end.2078:                                      ; preds = %if.end.2077, %if.end.2028
  br label %sw.epilog.2298

sw.bb.2079:                                       ; preds = %if.then.1495
  %1200 = load i32, i32* %flags.addr, align 4
  %and2080 = and i32 %1200, 2048
  %tobool2081 = icmp ne i32 %and2080, 0
  br i1 %tobool2081, label %if.then.2082, label %if.else.2131

if.then.2082:                                     ; preds = %sw.bb.2079
  %1201 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2083 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1201, i32 0, i32 17
  %1202 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class2083, align 8
  %flags2084 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1202, i32 0, i32 0
  %1203 = load i8, i8* %flags2084, align 1
  %conv2085 = zext i8 %1203 to i32
  %and2086 = and i32 %conv2085, 1
  %tobool2087 = icmp ne i32 %and2086, 0
  br i1 %tobool2087, label %if.then.2088, label %if.end.2130

if.then.2088:                                     ; preds = %if.then.2082
  %1204 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2089 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1204, i32 0, i32 17
  %1205 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class2089, align 8
  %classflags2090 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1205, i32 0, i32 5
  %arrayidx2091 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags2090, i32 0, i64 0
  %1206 = load i8, i8* %arrayidx2091, align 1
  %conv2092 = sext i8 %1206 to i32
  %and2093 = and i32 %conv2092, -5
  %conv2094 = trunc i32 %and2093 to i8
  store i8 %conv2094, i8* %arrayidx2091, align 1
  store i32 0, i32* %value, align 4
  br label %for.cond.2095

for.cond.2095:                                    ; preds = %for.inc.2127, %if.then.2088
  %1207 = load i32, i32* %value, align 4
  %cmp2096 = icmp slt i32 %1207, 256
  br i1 %cmp2096, label %for.body.2098, label %for.end.2129

for.body.2098:                                    ; preds = %for.cond.2095
  %1208 = load i32, i32* %value, align 4
  %cmp2099 = icmp eq i32 %1208, 32
  br i1 %cmp2099, label %if.end.2126, label %lor.lhs.false.2101

lor.lhs.false.2101:                               ; preds = %for.body.2098
  %1209 = load i32, i32* %value, align 4
  %cmp2102 = icmp eq i32 %1209, 9
  br i1 %cmp2102, label %if.end.2126, label %lor.lhs.false.2104

lor.lhs.false.2104:                               ; preds = %lor.lhs.false.2101
  %1210 = load i32, i32* %value, align 4
  %cmp2105 = icmp eq i32 %1210, 10
  br i1 %cmp2105, label %if.end.2126, label %lor.lhs.false.2107

lor.lhs.false.2107:                               ; preds = %lor.lhs.false.2104
  %1211 = load i32, i32* %value, align 4
  %cmp2108 = icmp eq i32 %1211, 13
  br i1 %cmp2108, label %if.end.2126, label %lor.lhs.false.2110

lor.lhs.false.2110:                               ; preds = %lor.lhs.false.2107
  %1212 = load i32, i32* %value, align 4
  %cmp2111 = icmp eq i32 %1212, 12
  br i1 %cmp2111, label %if.end.2126, label %if.then.2113

if.then.2113:                                     ; preds = %lor.lhs.false.2110
  %1213 = load i32, i32* %value, align 4
  %and2114 = and i32 %1213, 7
  %shl2115 = shl i32 1, %and2114
  %neg2116 = xor i32 %shl2115, -1
  %1214 = load i32, i32* %value, align 4
  %shr2117 = ashr i32 %1214, 3
  %and2118 = and i32 %shr2117, 31
  %idxprom2119 = sext i32 %and2118 to i64
  %1215 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2120 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1215, i32 0, i32 17
  %1216 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class2120, align 8
  %1217 = bitcast %struct.regnode_charclass_class* %1216 to %struct.regnode_charclass*
  %bitmap2121 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %1217, i32 0, i32 4
  %arrayidx2122 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap2121, i32 0, i64 %idxprom2119
  %1218 = load i8, i8* %arrayidx2122, align 1
  %conv2123 = sext i8 %1218 to i32
  %and2124 = and i32 %conv2123, %neg2116
  %conv2125 = trunc i32 %and2124 to i8
  store i8 %conv2125, i8* %arrayidx2122, align 1
  br label %if.end.2126

if.end.2126:                                      ; preds = %if.then.2113, %lor.lhs.false.2110, %lor.lhs.false.2107, %lor.lhs.false.2104, %lor.lhs.false.2101, %for.body.2098
  br label %for.inc.2127

for.inc.2127:                                     ; preds = %if.end.2126
  %1219 = load i32, i32* %value, align 4
  %inc2128 = add nsw i32 %1219, 1
  store i32 %inc2128, i32* %value, align 4
  br label %for.cond.2095

for.end.2129:                                     ; preds = %for.cond.2095
  br label %if.end.2130

if.end.2130:                                      ; preds = %for.end.2129, %if.then.2082
  br label %if.end.2143

if.else.2131:                                     ; preds = %sw.bb.2079
  %1220 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2132 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1220, i32 0, i32 17
  %1221 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class2132, align 8
  %flags2133 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1221, i32 0, i32 0
  %1222 = load i8, i8* %flags2133, align 1
  %conv2134 = zext i8 %1222 to i32
  %or2135 = or i32 %conv2134, 1
  %conv2136 = trunc i32 %or2135 to i8
  store i8 %conv2136, i8* %flags2133, align 1
  %1223 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2137 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1223, i32 0, i32 17
  %1224 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class2137, align 8
  %classflags2138 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1224, i32 0, i32 5
  %arrayidx2139 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags2138, i32 0, i64 0
  %1225 = load i8, i8* %arrayidx2139, align 1
  %conv2140 = sext i8 %1225 to i32
  %or2141 = or i32 %conv2140, 8
  %conv2142 = trunc i32 %or2141 to i8
  store i8 %conv2142, i8* %arrayidx2139, align 1
  br label %if.end.2143

if.end.2143:                                      ; preds = %if.else.2131, %if.end.2130
  br label %sw.epilog.2298

sw.bb.2144:                                       ; preds = %if.then.1495
  %1226 = load i32, i32* %flags.addr, align 4
  %and2145 = and i32 %1226, 2048
  %tobool2146 = icmp ne i32 %and2145, 0
  br i1 %tobool2146, label %if.then.2147, label %if.else.2180

if.then.2147:                                     ; preds = %sw.bb.2144
  %1227 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2148 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1227, i32 0, i32 17
  %1228 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class2148, align 8
  %classflags2149 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1228, i32 0, i32 5
  %arrayidx2150 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags2149, i32 0, i64 0
  %1229 = load i8, i8* %arrayidx2150, align 1
  %conv2151 = sext i8 %1229 to i32
  %and2152 = and i32 %conv2151, -33
  %conv2153 = trunc i32 %and2152 to i8
  store i8 %conv2153, i8* %arrayidx2150, align 1
  store i32 0, i32* %value, align 4
  br label %for.cond.2154

for.cond.2154:                                    ; preds = %for.inc.2177, %if.then.2147
  %1230 = load i32, i32* %value, align 4
  %cmp2155 = icmp slt i32 %1230, 256
  br i1 %cmp2155, label %for.body.2157, label %for.end.2179

for.body.2157:                                    ; preds = %for.cond.2154
  %1231 = load i32, i32* %value, align 4
  %cmp2158 = icmp sge i32 %1231, 48
  br i1 %cmp2158, label %land.lhs.true.2160, label %if.then.2163

land.lhs.true.2160:                               ; preds = %for.body.2157
  %1232 = load i32, i32* %value, align 4
  %cmp2161 = icmp sle i32 %1232, 57
  br i1 %cmp2161, label %if.end.2176, label %if.then.2163

if.then.2163:                                     ; preds = %land.lhs.true.2160, %for.body.2157
  %1233 = load i32, i32* %value, align 4
  %and2164 = and i32 %1233, 7
  %shl2165 = shl i32 1, %and2164
  %neg2166 = xor i32 %shl2165, -1
  %1234 = load i32, i32* %value, align 4
  %shr2167 = ashr i32 %1234, 3
  %and2168 = and i32 %shr2167, 31
  %idxprom2169 = sext i32 %and2168 to i64
  %1235 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2170 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1235, i32 0, i32 17
  %1236 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class2170, align 8
  %1237 = bitcast %struct.regnode_charclass_class* %1236 to %struct.regnode_charclass*
  %bitmap2171 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %1237, i32 0, i32 4
  %arrayidx2172 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap2171, i32 0, i64 %idxprom2169
  %1238 = load i8, i8* %arrayidx2172, align 1
  %conv2173 = sext i8 %1238 to i32
  %and2174 = and i32 %conv2173, %neg2166
  %conv2175 = trunc i32 %and2174 to i8
  store i8 %conv2175, i8* %arrayidx2172, align 1
  br label %if.end.2176

if.end.2176:                                      ; preds = %if.then.2163, %land.lhs.true.2160
  br label %for.inc.2177

for.inc.2177:                                     ; preds = %if.end.2176
  %1239 = load i32, i32* %value, align 4
  %inc2178 = add nsw i32 %1239, 1
  store i32 %inc2178, i32* %value, align 4
  br label %for.cond.2154

for.end.2179:                                     ; preds = %for.cond.2154
  br label %if.end.2220

if.else.2180:                                     ; preds = %sw.bb.2144
  %1240 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2181 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1240, i32 0, i32 17
  %1241 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class2181, align 8
  %flags2182 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1241, i32 0, i32 0
  %1242 = load i8, i8* %flags2182, align 1
  %conv2183 = zext i8 %1242 to i32
  %and2184 = and i32 %conv2183, 1
  %tobool2185 = icmp ne i32 %and2184, 0
  br i1 %tobool2185, label %if.then.2186, label %if.else.2193

if.then.2186:                                     ; preds = %if.else.2180
  %1243 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2187 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1243, i32 0, i32 17
  %1244 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class2187, align 8
  %classflags2188 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1244, i32 0, i32 5
  %arrayidx2189 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags2188, i32 0, i64 0
  %1245 = load i8, i8* %arrayidx2189, align 1
  %conv2190 = sext i8 %1245 to i32
  %or2191 = or i32 %conv2190, 16
  %conv2192 = trunc i32 %or2191 to i8
  store i8 %conv2192, i8* %arrayidx2189, align 1
  br label %if.end.2219

if.else.2193:                                     ; preds = %if.else.2180
  store i32 0, i32* %value, align 4
  br label %for.cond.2194

for.cond.2194:                                    ; preds = %for.inc.2216, %if.else.2193
  %1246 = load i32, i32* %value, align 4
  %cmp2195 = icmp slt i32 %1246, 256
  br i1 %cmp2195, label %for.body.2197, label %for.end.2218

for.body.2197:                                    ; preds = %for.cond.2194
  %1247 = load i32, i32* %value, align 4
  %cmp2198 = icmp sge i32 %1247, 48
  br i1 %cmp2198, label %land.lhs.true.2200, label %if.end.2215

land.lhs.true.2200:                               ; preds = %for.body.2197
  %1248 = load i32, i32* %value, align 4
  %cmp2201 = icmp sle i32 %1248, 57
  br i1 %cmp2201, label %if.then.2203, label %if.end.2215

if.then.2203:                                     ; preds = %land.lhs.true.2200
  %1249 = load i32, i32* %value, align 4
  %and2204 = and i32 %1249, 7
  %shl2205 = shl i32 1, %and2204
  %1250 = load i32, i32* %value, align 4
  %shr2206 = ashr i32 %1250, 3
  %and2207 = and i32 %shr2206, 31
  %idxprom2208 = sext i32 %and2207 to i64
  %1251 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2209 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1251, i32 0, i32 17
  %1252 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class2209, align 8
  %1253 = bitcast %struct.regnode_charclass_class* %1252 to %struct.regnode_charclass*
  %bitmap2210 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %1253, i32 0, i32 4
  %arrayidx2211 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap2210, i32 0, i64 %idxprom2208
  %1254 = load i8, i8* %arrayidx2211, align 1
  %conv2212 = sext i8 %1254 to i32
  %or2213 = or i32 %conv2212, %shl2205
  %conv2214 = trunc i32 %or2213 to i8
  store i8 %conv2214, i8* %arrayidx2211, align 1
  br label %if.end.2215

if.end.2215:                                      ; preds = %if.then.2203, %land.lhs.true.2200, %for.body.2197
  br label %for.inc.2216

for.inc.2216:                                     ; preds = %if.end.2215
  %1255 = load i32, i32* %value, align 4
  %inc2217 = add nsw i32 %1255, 1
  store i32 %inc2217, i32* %value, align 4
  br label %for.cond.2194

for.end.2218:                                     ; preds = %for.cond.2194
  br label %if.end.2219

if.end.2219:                                      ; preds = %for.end.2218, %if.then.2186
  br label %if.end.2220

if.end.2220:                                      ; preds = %if.end.2219, %for.end.2179
  br label %sw.epilog.2298

sw.bb.2221:                                       ; preds = %if.then.1495
  %1256 = load i32, i32* %flags.addr, align 4
  %and2222 = and i32 %1256, 2048
  %tobool2223 = icmp ne i32 %and2222, 0
  br i1 %tobool2223, label %if.then.2224, label %if.else.2257

if.then.2224:                                     ; preds = %sw.bb.2221
  %1257 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2225 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1257, i32 0, i32 17
  %1258 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class2225, align 8
  %classflags2226 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1258, i32 0, i32 5
  %arrayidx2227 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags2226, i32 0, i64 0
  %1259 = load i8, i8* %arrayidx2227, align 1
  %conv2228 = sext i8 %1259 to i32
  %and2229 = and i32 %conv2228, -17
  %conv2230 = trunc i32 %and2229 to i8
  store i8 %conv2230, i8* %arrayidx2227, align 1
  store i32 0, i32* %value, align 4
  br label %for.cond.2231

for.cond.2231:                                    ; preds = %for.inc.2254, %if.then.2224
  %1260 = load i32, i32* %value, align 4
  %cmp2232 = icmp slt i32 %1260, 256
  br i1 %cmp2232, label %for.body.2234, label %for.end.2256

for.body.2234:                                    ; preds = %for.cond.2231
  %1261 = load i32, i32* %value, align 4
  %cmp2235 = icmp sge i32 %1261, 48
  br i1 %cmp2235, label %land.lhs.true.2237, label %if.end.2253

land.lhs.true.2237:                               ; preds = %for.body.2234
  %1262 = load i32, i32* %value, align 4
  %cmp2238 = icmp sle i32 %1262, 57
  br i1 %cmp2238, label %if.then.2240, label %if.end.2253

if.then.2240:                                     ; preds = %land.lhs.true.2237
  %1263 = load i32, i32* %value, align 4
  %and2241 = and i32 %1263, 7
  %shl2242 = shl i32 1, %and2241
  %neg2243 = xor i32 %shl2242, -1
  %1264 = load i32, i32* %value, align 4
  %shr2244 = ashr i32 %1264, 3
  %and2245 = and i32 %shr2244, 31
  %idxprom2246 = sext i32 %and2245 to i64
  %1265 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2247 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1265, i32 0, i32 17
  %1266 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class2247, align 8
  %1267 = bitcast %struct.regnode_charclass_class* %1266 to %struct.regnode_charclass*
  %bitmap2248 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %1267, i32 0, i32 4
  %arrayidx2249 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap2248, i32 0, i64 %idxprom2246
  %1268 = load i8, i8* %arrayidx2249, align 1
  %conv2250 = sext i8 %1268 to i32
  %and2251 = and i32 %conv2250, %neg2243
  %conv2252 = trunc i32 %and2251 to i8
  store i8 %conv2252, i8* %arrayidx2249, align 1
  br label %if.end.2253

if.end.2253:                                      ; preds = %if.then.2240, %land.lhs.true.2237, %for.body.2234
  br label %for.inc.2254

for.inc.2254:                                     ; preds = %if.end.2253
  %1269 = load i32, i32* %value, align 4
  %inc2255 = add nsw i32 %1269, 1
  store i32 %inc2255, i32* %value, align 4
  br label %for.cond.2231

for.end.2256:                                     ; preds = %for.cond.2231
  br label %if.end.2297

if.else.2257:                                     ; preds = %sw.bb.2221
  %1270 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2258 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1270, i32 0, i32 17
  %1271 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class2258, align 8
  %flags2259 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1271, i32 0, i32 0
  %1272 = load i8, i8* %flags2259, align 1
  %conv2260 = zext i8 %1272 to i32
  %and2261 = and i32 %conv2260, 1
  %tobool2262 = icmp ne i32 %and2261, 0
  br i1 %tobool2262, label %if.then.2263, label %if.else.2270

if.then.2263:                                     ; preds = %if.else.2257
  %1273 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2264 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1273, i32 0, i32 17
  %1274 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class2264, align 8
  %classflags2265 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1274, i32 0, i32 5
  %arrayidx2266 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags2265, i32 0, i64 0
  %1275 = load i8, i8* %arrayidx2266, align 1
  %conv2267 = sext i8 %1275 to i32
  %or2268 = or i32 %conv2267, 32
  %conv2269 = trunc i32 %or2268 to i8
  store i8 %conv2269, i8* %arrayidx2266, align 1
  br label %if.end.2296

if.else.2270:                                     ; preds = %if.else.2257
  store i32 0, i32* %value, align 4
  br label %for.cond.2271

for.cond.2271:                                    ; preds = %for.inc.2293, %if.else.2270
  %1276 = load i32, i32* %value, align 4
  %cmp2272 = icmp slt i32 %1276, 256
  br i1 %cmp2272, label %for.body.2274, label %for.end.2295

for.body.2274:                                    ; preds = %for.cond.2271
  %1277 = load i32, i32* %value, align 4
  %cmp2275 = icmp sge i32 %1277, 48
  br i1 %cmp2275, label %land.lhs.true.2277, label %if.then.2280

land.lhs.true.2277:                               ; preds = %for.body.2274
  %1278 = load i32, i32* %value, align 4
  %cmp2278 = icmp sle i32 %1278, 57
  br i1 %cmp2278, label %if.end.2292, label %if.then.2280

if.then.2280:                                     ; preds = %land.lhs.true.2277, %for.body.2274
  %1279 = load i32, i32* %value, align 4
  %and2281 = and i32 %1279, 7
  %shl2282 = shl i32 1, %and2281
  %1280 = load i32, i32* %value, align 4
  %shr2283 = ashr i32 %1280, 3
  %and2284 = and i32 %shr2283, 31
  %idxprom2285 = sext i32 %and2284 to i64
  %1281 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2286 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1281, i32 0, i32 17
  %1282 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class2286, align 8
  %1283 = bitcast %struct.regnode_charclass_class* %1282 to %struct.regnode_charclass*
  %bitmap2287 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %1283, i32 0, i32 4
  %arrayidx2288 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap2287, i32 0, i64 %idxprom2285
  %1284 = load i8, i8* %arrayidx2288, align 1
  %conv2289 = sext i8 %1284 to i32
  %or2290 = or i32 %conv2289, %shl2282
  %conv2291 = trunc i32 %or2290 to i8
  store i8 %conv2291, i8* %arrayidx2288, align 1
  br label %if.end.2292

if.end.2292:                                      ; preds = %if.then.2280, %land.lhs.true.2277
  br label %for.inc.2293

for.inc.2293:                                     ; preds = %if.end.2292
  %1285 = load i32, i32* %value, align 4
  %inc2294 = add nsw i32 %1285, 1
  store i32 %inc2294, i32* %value, align 4
  br label %for.cond.2271

for.end.2295:                                     ; preds = %for.cond.2271
  br label %if.end.2296

if.end.2296:                                      ; preds = %for.end.2295, %if.then.2263
  br label %if.end.2297

if.end.2297:                                      ; preds = %if.end.2296, %for.end.2256
  br label %sw.epilog.2298

sw.epilog.2298:                                   ; preds = %if.end.2297, %if.end.2220, %if.end.2143, %if.end.2078, %if.end.1976, %if.end.1946, %if.end.1844, %if.end.1814, %if.end.1700, %if.end.1670, %if.end.1557, %if.end.1549, %if.end.1511
  %1286 = load i32, i32* %flags.addr, align 4
  %and2299 = and i32 %1286, 4096
  %tobool2300 = icmp ne i32 %and2299, 0
  br i1 %tobool2300, label %if.then.2301, label %if.end.2303

if.then.2301:                                     ; preds = %sw.epilog.2298
  %1287 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2302 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1287, i32 0, i32 17
  %1288 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class2302, align 8
  call void @S_cl_and(%struct.regnode_charclass_class* %1288, %struct.regnode_charclass_class* %and_with)
  br label %if.end.2303

if.end.2303:                                      ; preds = %if.then.2301, %sw.epilog.2298
  %1289 = load i32, i32* %flags.addr, align 4
  %and2304 = and i32 %1289, -6145
  store i32 %and2304, i32* %flags.addr, align 4
  br label %if.end.2305

if.end.2305:                                      ; preds = %if.end.2303, %if.end.1491
  br label %if.end.2557

if.else.2306:                                     ; preds = %if.else.1479
  %1290 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type2307 = getelementptr inbounds %struct.regnode, %struct.regnode* %1290, i32 0, i32 1
  %1291 = load i8, i8* %type2307, align 1
  %idxprom2308 = zext i8 %1291 to i64
  %arrayidx2309 = getelementptr inbounds [62 x i8], [62 x i8]* @PL_regkind, i32 0, i64 %idxprom2308
  %1292 = load i8, i8* %arrayidx2309, align 1
  %conv2310 = zext i8 %1292 to i32
  %cmp2311 = icmp eq i32 %conv2310, 6
  br i1 %cmp2311, label %land.lhs.true.2313, label %if.else.2324

land.lhs.true.2313:                               ; preds = %if.else.2306
  %1293 = load i32, i32* %flags.addr, align 4
  %and2314 = and i32 %1293, 1024
  %tobool2315 = icmp ne i32 %and2314, 0
  br i1 %tobool2315, label %if.then.2316, label %if.else.2324

if.then.2316:                                     ; preds = %land.lhs.true.2313
  %1294 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type2317 = getelementptr inbounds %struct.regnode, %struct.regnode* %1294, i32 0, i32 1
  %1295 = load i8, i8* %type2317, align 1
  %conv2318 = zext i8 %1295 to i32
  %cmp2319 = icmp eq i32 %conv2318, 7
  %cond2321 = select i1 %cmp2319, i32 2, i32 1
  %1296 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags2322 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1296, i32 0, i32 14
  %1297 = load i32, i32* %flags2322, align 4
  %or2323 = or i32 %1297, %cond2321
  store i32 %or2323, i32* %flags2322, align 4
  br label %if.end.2556

if.else.2324:                                     ; preds = %land.lhs.true.2313, %if.else.2306
  %1298 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type2325 = getelementptr inbounds %struct.regnode, %struct.regnode* %1298, i32 0, i32 1
  %1299 = load i8, i8* %type2325, align 1
  %idxprom2326 = zext i8 %1299 to i64
  %arrayidx2327 = getelementptr inbounds [62 x i8], [62 x i8]* @PL_regkind, i32 0, i64 %idxprom2326
  %1300 = load i8, i8* %arrayidx2327, align 1
  %conv2328 = zext i8 %1300 to i32
  %cmp2329 = icmp eq i32 %conv2328, 56
  br i1 %cmp2329, label %land.lhs.true.2331, label %if.else.2482

land.lhs.true.2331:                               ; preds = %if.else.2324
  %1301 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %flags2332 = getelementptr inbounds %struct.regnode, %struct.regnode* %1301, i32 0, i32 0
  %1302 = load i8, i8* %flags2332, align 1
  %conv2333 = zext i8 %1302 to i32
  %tobool2334 = icmp ne i32 %conv2333, 0
  br i1 %tobool2334, label %land.lhs.true.2340, label %lor.lhs.false.2335

lor.lhs.false.2335:                               ; preds = %land.lhs.true.2331
  %1303 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool2336 = icmp ne %struct.scan_data_t* %1303, null
  br i1 %tobool2336, label %land.lhs.true.2340, label %lor.lhs.false.2337

lor.lhs.false.2337:                               ; preds = %lor.lhs.false.2335
  %1304 = load i32, i32* %flags.addr, align 4
  %and2338 = and i32 %1304, 6144
  %tobool2339 = icmp ne i32 %and2338, 0
  br i1 %tobool2339, label %land.lhs.true.2340, label %if.else.2482

land.lhs.true.2340:                               ; preds = %lor.lhs.false.2337, %lor.lhs.false.2335, %land.lhs.true.2331
  %1305 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type2341 = getelementptr inbounds %struct.regnode, %struct.regnode* %1305, i32 0, i32 1
  %1306 = load i8, i8* %type2341, align 1
  %conv2342 = zext i8 %1306 to i32
  %cmp2343 = icmp eq i32 %conv2342, 50
  br i1 %cmp2343, label %if.then.2350, label %lor.lhs.false.2345

lor.lhs.false.2345:                               ; preds = %land.lhs.true.2340
  %1307 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type2346 = getelementptr inbounds %struct.regnode, %struct.regnode* %1307, i32 0, i32 1
  %1308 = load i8, i8* %type2346, align 1
  %conv2347 = zext i8 %1308 to i32
  %cmp2348 = icmp eq i32 %conv2347, 51
  br i1 %cmp2348, label %if.then.2350, label %if.else.2482

if.then.2350:                                     ; preds = %lor.lhs.false.2345, %land.lhs.true.2340
  store i32 0, i32* %fake2356, align 4
  store i32 0, i32* %f2360, align 4
  %flags2361 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 14
  store i32 0, i32* %flags2361, align 4
  %1309 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool2362 = icmp ne %struct.scan_data_t* %1309, null
  br i1 %tobool2362, label %if.then.2363, label %if.else.2368

if.then.2363:                                     ; preds = %if.then.2350
  %1310 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %whilem_c2364 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1310, i32 0, i32 15
  %1311 = load i32, i32* %whilem_c2364, align 4
  %whilem_c2365 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 15
  store i32 %1311, i32* %whilem_c2365, align 4
  %1312 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_closep2366 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1312, i32 0, i32 16
  %1313 = load i32*, i32** %last_closep2366, align 8
  %last_closep2367 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 16
  store i32* %1313, i32** %last_closep2367, align 8
  br label %if.end.2370

if.else.2368:                                     ; preds = %if.then.2350
  %last_closep2369 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 16
  store i32* %fake2356, i32** %last_closep2369, align 8
  br label %if.end.2370

if.end.2370:                                      ; preds = %if.else.2368, %if.then.2363
  %1314 = load i32, i32* %flags.addr, align 4
  %and2371 = and i32 %1314, 6144
  %tobool2372 = icmp ne i32 %and2371, 0
  br i1 %tobool2372, label %land.lhs.true.2373, label %if.end.2384

land.lhs.true.2373:                               ; preds = %if.end.2370
  %1315 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %flags2374 = getelementptr inbounds %struct.regnode, %struct.regnode* %1315, i32 0, i32 0
  %1316 = load i8, i8* %flags2374, align 1
  %tobool2375 = icmp ne i8 %1316, 0
  br i1 %tobool2375, label %if.end.2384, label %land.lhs.true.2376

land.lhs.true.2376:                               ; preds = %land.lhs.true.2373
  %1317 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type2377 = getelementptr inbounds %struct.regnode, %struct.regnode* %1317, i32 0, i32 1
  %1318 = load i8, i8* %type2377, align 1
  %conv2378 = zext i8 %1318 to i32
  %cmp2379 = icmp eq i32 %conv2378, 50
  br i1 %cmp2379, label %if.then.2381, label %if.end.2384

if.then.2381:                                     ; preds = %land.lhs.true.2376
  %1319 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  call void @S_cl_init(%struct.RExC_state_t* %1319, %struct.regnode_charclass_class* %intrnl)
  %start_class2382 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 17
  store %struct.regnode_charclass_class* %intrnl, %struct.regnode_charclass_class** %start_class2382, align 8
  %1320 = load i32, i32* %f2360, align 4
  %or2383 = or i32 %1320, 2048
  store i32 %or2383, i32* %f2360, align 4
  br label %if.end.2384

if.end.2384:                                      ; preds = %if.then.2381, %land.lhs.true.2376, %land.lhs.true.2373, %if.end.2370
  %1321 = load i32, i32* %flags.addr, align 4
  %and2385 = and i32 %1321, 8192
  %tobool2386 = icmp ne i32 %and2385, 0
  br i1 %tobool2386, label %if.then.2387, label %if.end.2389

if.then.2387:                                     ; preds = %if.end.2384
  %1322 = load i32, i32* %f2360, align 4
  %or2388 = or i32 %1322, 8192
  store i32 %or2388, i32* %f2360, align 4
  br label %if.end.2389

if.end.2389:                                      ; preds = %if.then.2387, %if.end.2384
  %1323 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %call2390 = call %struct.regnode* @Perl_regnext(%struct.regnode* %1323)
  store %struct.regnode* %call2390, %struct.regnode** %next, align 8
  %1324 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %add.ptr2391 = getelementptr inbounds %struct.regnode, %struct.regnode* %1324, i64 1
  %add.ptr2392 = getelementptr inbounds %struct.regnode, %struct.regnode* %add.ptr2391, i64 1
  store %struct.regnode* %add.ptr2392, %struct.regnode** %nscan, align 8
  %1325 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1326 = load %struct.regnode*, %struct.regnode** %last.addr, align 8
  %1327 = load i32, i32* %f2360, align 4
  %call2393 = call i32 @S_study_chunk(%struct.RExC_state_t* %1325, %struct.regnode** %nscan, i32* %deltanext2352, %struct.regnode* %1326, %struct.scan_data_t* %data_fake, i32 %1327)
  store i32 %call2393, i32* %minnext2354, align 4
  %1328 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %flags2394 = getelementptr inbounds %struct.regnode, %struct.regnode* %1328, i32 0, i32 0
  %1329 = load i8, i8* %flags2394, align 1
  %tobool2395 = icmp ne i8 %1329, 0
  br i1 %tobool2395, label %if.then.2396, label %if.end.2441

if.then.2396:                                     ; preds = %if.end.2389
  %1330 = load i32, i32* %deltanext2352, align 4
  %tobool2397 = icmp ne i32 %1330, 0
  br i1 %tobool2397, label %if.then.2398, label %if.else.2416

if.then.2398:                                     ; preds = %if.then.2396
  %1331 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2399 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1331, i32 0, i32 8
  %1332 = load %struct.regnode*, %struct.regnode** %emit2399, align 8
  %cmp2400 = icmp eq %struct.regnode* %1332, @PL_regdummy
  br i1 %cmp2400, label %if.end.2404, label %if.then.2402

if.then.2402:                                     ; preds = %if.then.2398
  %1333 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx2403 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1333, i32 0, i32 2
  %1334 = load %struct.regexp*, %struct.regexp** %rx2403, align 8
  %1335 = bitcast %struct.regexp* %1334 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %1335)
  br label %if.end.2404

if.end.2404:                                      ; preds = %if.then.2402, %if.then.2398
  %1336 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2407 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1336, i32 0, i32 5
  %1337 = load i8*, i8** %parse2407, align 8
  %1338 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2408 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1338, i32 0, i32 1
  %1339 = load i8*, i8** %precomp2408, align 8
  %sub.ptr.lhs.cast2409 = ptrtoint i8* %1337 to i64
  %sub.ptr.rhs.cast2410 = ptrtoint i8* %1339 to i64
  %sub.ptr.sub2411 = sub i64 %sub.ptr.lhs.cast2409, %sub.ptr.rhs.cast2410
  store i64 %sub.ptr.sub2411, i64* %offset2406, align 8
  %1340 = load i64, i64* %offset2406, align 8
  %conv2412 = trunc i64 %1340 to i32
  %1341 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2413 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1341, i32 0, i32 1
  %1342 = load i8*, i8** %precomp2413, align 8
  %1343 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2414 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1343, i32 0, i32 1
  %1344 = load i8*, i8** %precomp2414, align 8
  %1345 = load i64, i64* %offset2406, align 8
  %add.ptr2415 = getelementptr inbounds i8, i8* %1344, i64 %1345
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.14, i32 0, i32 0), i32 %conv2412, i8* %1342, i8* %add.ptr2415)
  br label %if.end.2438

if.else.2416:                                     ; preds = %if.then.2396
  %1346 = load i32, i32* %minnext2354, align 4
  %cmp2417 = icmp sgt i32 %1346, 255
  br i1 %cmp2417, label %if.then.2419, label %if.end.2437

if.then.2419:                                     ; preds = %if.else.2416
  %1347 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2420 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1347, i32 0, i32 8
  %1348 = load %struct.regnode*, %struct.regnode** %emit2420, align 8
  %cmp2421 = icmp eq %struct.regnode* %1348, @PL_regdummy
  br i1 %cmp2421, label %if.end.2425, label %if.then.2423

if.then.2423:                                     ; preds = %if.then.2419
  %1349 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx2424 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1349, i32 0, i32 2
  %1350 = load %struct.regexp*, %struct.regexp** %rx2424, align 8
  %1351 = bitcast %struct.regexp* %1350 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %1351)
  br label %if.end.2425

if.end.2425:                                      ; preds = %if.then.2423, %if.then.2419
  %1352 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2428 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1352, i32 0, i32 5
  %1353 = load i8*, i8** %parse2428, align 8
  %1354 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2429 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1354, i32 0, i32 1
  %1355 = load i8*, i8** %precomp2429, align 8
  %sub.ptr.lhs.cast2430 = ptrtoint i8* %1353 to i64
  %sub.ptr.rhs.cast2431 = ptrtoint i8* %1355 to i64
  %sub.ptr.sub2432 = sub i64 %sub.ptr.lhs.cast2430, %sub.ptr.rhs.cast2431
  store i64 %sub.ptr.sub2432, i64* %offset2427, align 8
  %1356 = load i64, i64* %offset2427, align 8
  %conv2433 = trunc i64 %1356 to i32
  %1357 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2434 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1357, i32 0, i32 1
  %1358 = load i8*, i8** %precomp2434, align 8
  %1359 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2435 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1359, i32 0, i32 1
  %1360 = load i8*, i8** %precomp2435, align 8
  %1361 = load i64, i64* %offset2427, align 8
  %add.ptr2436 = getelementptr inbounds i8, i8* %1360, i64 %1361
  call void (i8*, i8*, ...) @S_re_croak2(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.16, i32 0, i32 0), i64 255, i32 %conv2433, i8* %1358, i8* %add.ptr2436)
  br label %if.end.2437

if.end.2437:                                      ; preds = %if.end.2425, %if.else.2416
  br label %if.end.2438

if.end.2438:                                      ; preds = %if.end.2437, %if.end.2404
  %1362 = load i32, i32* %minnext2354, align 4
  %conv2439 = trunc i32 %1362 to i8
  %1363 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %flags2440 = getelementptr inbounds %struct.regnode, %struct.regnode* %1363, i32 0, i32 0
  store i8 %conv2439, i8* %flags2440, align 1
  br label %if.end.2441

if.end.2441:                                      ; preds = %if.end.2438, %if.end.2389
  %1364 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool2442 = icmp ne %struct.scan_data_t* %1364, null
  br i1 %tobool2442, label %land.lhs.true.2443, label %if.end.2449

land.lhs.true.2443:                               ; preds = %if.end.2441
  %flags2444 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 14
  %1365 = load i32, i32* %flags2444, align 4
  %and2445 = and i32 %1365, 384
  %tobool2446 = icmp ne i32 %and2445, 0
  br i1 %tobool2446, label %if.then.2447, label %if.end.2449

if.then.2447:                                     ; preds = %land.lhs.true.2443
  %1366 = load i32, i32* %pars, align 4
  %inc2448 = add nsw i32 %1366, 1
  store i32 %inc2448, i32* %pars, align 4
  br label %if.end.2449

if.end.2449:                                      ; preds = %if.then.2447, %land.lhs.true.2443, %if.end.2441
  %1367 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool2450 = icmp ne %struct.scan_data_t* %1367, null
  br i1 %tobool2450, label %land.lhs.true.2451, label %if.end.2458

land.lhs.true.2451:                               ; preds = %if.end.2449
  %flags2452 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 14
  %1368 = load i32, i32* %flags2452, align 4
  %and2453 = and i32 %1368, 512
  %tobool2454 = icmp ne i32 %and2453, 0
  br i1 %tobool2454, label %if.then.2455, label %if.end.2458

if.then.2455:                                     ; preds = %land.lhs.true.2451
  %1369 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags2456 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1369, i32 0, i32 14
  %1370 = load i32, i32* %flags2456, align 4
  %or2457 = or i32 %1370, 512
  store i32 %or2457, i32* %flags2456, align 4
  br label %if.end.2458

if.end.2458:                                      ; preds = %if.then.2455, %land.lhs.true.2451, %if.end.2449
  %1371 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool2459 = icmp ne %struct.scan_data_t* %1371, null
  br i1 %tobool2459, label %if.then.2460, label %if.end.2463

if.then.2460:                                     ; preds = %if.end.2458
  %whilem_c2461 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 15
  %1372 = load i32, i32* %whilem_c2461, align 4
  %1373 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %whilem_c2462 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1373, i32 0, i32 15
  store i32 %1372, i32* %whilem_c2462, align 4
  br label %if.end.2463

if.end.2463:                                      ; preds = %if.then.2460, %if.end.2458
  %1374 = load i32, i32* %f2360, align 4
  %and2464 = and i32 %1374, 2048
  %tobool2465 = icmp ne i32 %and2464, 0
  br i1 %tobool2465, label %if.then.2466, label %if.end.2481

if.then.2466:                                     ; preds = %if.end.2463
  %1375 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2468 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1375, i32 0, i32 17
  %1376 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class2468, align 8
  %flags2469 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1376, i32 0, i32 0
  %1377 = load i8, i8* %flags2469, align 1
  %conv2470 = zext i8 %1377 to i32
  %and2471 = and i32 %conv2470, 16
  store i32 %and2471, i32* %was, align 4
  %1378 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2472 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1378, i32 0, i32 17
  %1379 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class2472, align 8
  call void @S_cl_and(%struct.regnode_charclass_class* %1379, %struct.regnode_charclass_class* %intrnl)
  %1380 = load i32, i32* %was, align 4
  %tobool2473 = icmp ne i32 %1380, 0
  br i1 %tobool2473, label %if.then.2474, label %if.end.2480

if.then.2474:                                     ; preds = %if.then.2466
  %1381 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2475 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1381, i32 0, i32 17
  %1382 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class2475, align 8
  %flags2476 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1382, i32 0, i32 0
  %1383 = load i8, i8* %flags2476, align 1
  %conv2477 = zext i8 %1383 to i32
  %or2478 = or i32 %conv2477, 16
  %conv2479 = trunc i32 %or2478 to i8
  store i8 %conv2479, i8* %flags2476, align 1
  br label %if.end.2480

if.end.2480:                                      ; preds = %if.then.2474, %if.then.2466
  br label %if.end.2481

if.end.2481:                                      ; preds = %if.end.2480, %if.end.2463
  br label %if.end.2555

if.else.2482:                                     ; preds = %lor.lhs.false.2345, %lor.lhs.false.2337, %if.else.2324
  %1384 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type2483 = getelementptr inbounds %struct.regnode, %struct.regnode* %1384, i32 0, i32 1
  %1385 = load i8, i8* %type2483, align 1
  %conv2484 = zext i8 %1385 to i32
  %cmp2485 = icmp eq i32 %conv2484, 45
  br i1 %cmp2485, label %if.then.2487, label %if.else.2489

if.then.2487:                                     ; preds = %if.else.2482
  %1386 = load i32, i32* %pars, align 4
  %inc2488 = add nsw i32 %1386, 1
  store i32 %inc2488, i32* %pars, align 4
  br label %if.end.2554

if.else.2489:                                     ; preds = %if.else.2482
  %1387 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type2490 = getelementptr inbounds %struct.regnode, %struct.regnode* %1387, i32 0, i32 1
  %1388 = load i8, i8* %type2490, align 1
  %conv2491 = zext i8 %1388 to i32
  %cmp2492 = icmp eq i32 %conv2491, 46
  br i1 %cmp2492, label %if.then.2494, label %if.else.2517

if.then.2494:                                     ; preds = %if.else.2489
  %1389 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %1390 = bitcast %struct.regnode* %1389 to %struct.regnode_1*
  %arg12495 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %1390, i32 0, i32 3
  %1391 = load i32, i32* %arg12495, align 4
  %1392 = load i32, i32* %is_par, align 4
  %cmp2496 = icmp eq i32 %1391, %1392
  br i1 %cmp2496, label %if.then.2498, label %if.end.2511

if.then.2498:                                     ; preds = %if.then.2494
  %1393 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %call2499 = call %struct.regnode* @Perl_regnext(%struct.regnode* %1393)
  store %struct.regnode* %call2499, %struct.regnode** %next, align 8
  %1394 = load %struct.regnode*, %struct.regnode** %next, align 8
  %tobool2500 = icmp ne %struct.regnode* %1394, null
  br i1 %tobool2500, label %land.lhs.true.2501, label %if.end.2510

land.lhs.true.2501:                               ; preds = %if.then.2498
  %1395 = load %struct.regnode*, %struct.regnode** %next, align 8
  %type2502 = getelementptr inbounds %struct.regnode, %struct.regnode* %1395, i32 0, i32 1
  %1396 = load i8, i8* %type2502, align 1
  %conv2503 = zext i8 %1396 to i32
  %cmp2504 = icmp ne i32 %conv2503, 44
  br i1 %cmp2504, label %land.lhs.true.2506, label %if.end.2510

land.lhs.true.2506:                               ; preds = %land.lhs.true.2501
  %1397 = load %struct.regnode*, %struct.regnode** %next, align 8
  %1398 = load %struct.regnode*, %struct.regnode** %last.addr, align 8
  %cmp2507 = icmp ult %struct.regnode* %1397, %1398
  br i1 %cmp2507, label %if.then.2509, label %if.end.2510

if.then.2509:                                     ; preds = %land.lhs.true.2506
  store i32 0, i32* %is_par, align 4
  br label %if.end.2510

if.end.2510:                                      ; preds = %if.then.2509, %land.lhs.true.2506, %land.lhs.true.2501, %if.then.2498
  br label %if.end.2511

if.end.2511:                                      ; preds = %if.end.2510, %if.then.2494
  %1399 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool2512 = icmp ne %struct.scan_data_t* %1399, null
  br i1 %tobool2512, label %if.then.2513, label %if.end.2516

if.then.2513:                                     ; preds = %if.end.2511
  %1400 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %1401 = bitcast %struct.regnode* %1400 to %struct.regnode_1*
  %arg12514 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %1401, i32 0, i32 3
  %1402 = load i32, i32* %arg12514, align 4
  %1403 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_closep2515 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1403, i32 0, i32 16
  %1404 = load i32*, i32** %last_closep2515, align 8
  store i32 %1402, i32* %1404, align 4
  br label %if.end.2516

if.end.2516:                                      ; preds = %if.then.2513, %if.end.2511
  br label %if.end.2553

if.else.2517:                                     ; preds = %if.else.2489
  %1405 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type2518 = getelementptr inbounds %struct.regnode, %struct.regnode* %1405, i32 0, i32 1
  %1406 = load i8, i8* %type2518, align 1
  %conv2519 = zext i8 %1406 to i32
  %cmp2520 = icmp eq i32 %conv2519, 57
  br i1 %cmp2520, label %if.then.2522, label %if.else.2528

if.then.2522:                                     ; preds = %if.else.2517
  %1407 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool2523 = icmp ne %struct.scan_data_t* %1407, null
  br i1 %tobool2523, label %if.then.2524, label %if.end.2527

if.then.2524:                                     ; preds = %if.then.2522
  %1408 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags2525 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1408, i32 0, i32 14
  %1409 = load i32, i32* %flags2525, align 4
  %or2526 = or i32 %1409, 512
  store i32 %or2526, i32* %flags2525, align 4
  br label %if.end.2527

if.end.2527:                                      ; preds = %if.then.2524, %if.then.2522
  br label %if.end.2552

if.else.2528:                                     ; preds = %if.else.2517
  %1410 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type2529 = getelementptr inbounds %struct.regnode, %struct.regnode* %1410, i32 0, i32 1
  %1411 = load i8, i8* %type2529, align 1
  %conv2530 = zext i8 %1411 to i32
  %cmp2531 = icmp eq i32 %conv2530, 59
  br i1 %cmp2531, label %land.lhs.true.2533, label %if.end.2551

land.lhs.true.2533:                               ; preds = %if.else.2528
  %1412 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %flags2534 = getelementptr inbounds %struct.regnode, %struct.regnode* %1412, i32 0, i32 0
  %1413 = load i8, i8* %flags2534, align 1
  %conv2535 = zext i8 %1413 to i32
  %cmp2536 = icmp eq i32 %conv2535, 2
  br i1 %cmp2536, label %if.then.2538, label %if.end.2551

if.then.2538:                                     ; preds = %land.lhs.true.2533
  %1414 = load i32, i32* %flags.addr, align 4
  %and2539 = and i32 %1414, 1024
  %tobool2540 = icmp ne i32 %and2539, 0
  br i1 %tobool2540, label %if.then.2541, label %if.end.2544

if.then.2541:                                     ; preds = %if.then.2538
  %1415 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1416 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  call void @S_scan_commit(%struct.RExC_state_t* %1415, %struct.scan_data_t* %1416)
  %1417 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest_float2542 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1417, i32 0, i32 11
  %1418 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest2543 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1418, i32 0, i32 8
  store %struct.sv** %longest_float2542, %struct.sv*** %longest2543, align 8
  br label %if.end.2544

if.end.2544:                                      ; preds = %if.then.2541, %if.then.2538
  store i32 1, i32* %is_inf_internal, align 4
  store i32 1, i32* %is_inf, align 4
  %1419 = load i32, i32* %flags.addr, align 4
  %and2545 = and i32 %1419, 4096
  %tobool2546 = icmp ne i32 %and2545, 0
  br i1 %tobool2546, label %if.then.2547, label %if.end.2549

if.then.2547:                                     ; preds = %if.end.2544
  %1420 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1421 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2548 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1421, i32 0, i32 17
  %1422 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class2548, align 8
  call void @S_cl_anything(%struct.RExC_state_t* %1420, %struct.regnode_charclass_class* %1422)
  br label %if.end.2549

if.end.2549:                                      ; preds = %if.then.2547, %if.end.2544
  %1423 = load i32, i32* %flags.addr, align 4
  %and2550 = and i32 %1423, -6145
  store i32 %and2550, i32* %flags.addr, align 4
  br label %if.end.2551

if.end.2551:                                      ; preds = %if.end.2549, %land.lhs.true.2533, %if.else.2528
  br label %if.end.2552

if.end.2552:                                      ; preds = %if.end.2551, %if.end.2527
  br label %if.end.2553

if.end.2553:                                      ; preds = %if.end.2552, %if.end.2516
  br label %if.end.2554

if.end.2554:                                      ; preds = %if.end.2553, %if.then.2487
  br label %if.end.2555

if.end.2555:                                      ; preds = %if.end.2554, %if.end.2481
  br label %if.end.2556

if.end.2556:                                      ; preds = %if.end.2555, %if.then.2316
  br label %if.end.2557

if.end.2557:                                      ; preds = %if.end.2556, %if.end.2305
  br label %if.end.2558

if.end.2558:                                      ; preds = %if.end.2557, %sw.epilog
  br label %if.end.2559

if.end.2559:                                      ; preds = %if.end.2558, %if.end.771
  br label %if.end.2560

if.end.2560:                                      ; preds = %if.end.2559, %if.end.612
  br label %if.end.2561

if.end.2561:                                      ; preds = %if.end.2560
  %1424 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %call2562 = call %struct.regnode* @Perl_regnext(%struct.regnode* %1424)
  store %struct.regnode* %call2562, %struct.regnode** %scan, align 8
  br label %while.cond

while.end.2563:                                   ; preds = %land.end.13
  br label %finish

finish:                                           ; preds = %while.end.2563, %sw.bb
  %1425 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %1426 = load %struct.regnode**, %struct.regnode*** %scanp.addr, align 8
  store %struct.regnode* %1425, %struct.regnode** %1426, align 8
  %1427 = load i32, i32* %is_inf_internal, align 4
  %tobool2564 = icmp ne i32 %1427, 0
  br i1 %tobool2564, label %cond.true.2565, label %cond.false.2566

cond.true.2565:                                   ; preds = %finish
  br label %cond.end.2567

cond.false.2566:                                  ; preds = %finish
  %1428 = load i32, i32* %delta, align 4
  br label %cond.end.2567

cond.end.2567:                                    ; preds = %cond.false.2566, %cond.true.2565
  %cond2568 = phi i32 [ 2147483647, %cond.true.2565 ], [ %1428, %cond.false.2566 ]
  %1429 = load i32*, i32** %deltap.addr, align 8
  store i32 %cond2568, i32* %1429, align 4
  %1430 = load i32, i32* %flags.addr, align 4
  %and2569 = and i32 %1430, 1024
  %tobool2570 = icmp ne i32 %and2569, 0
  br i1 %tobool2570, label %land.lhs.true.2571, label %if.end.2577

land.lhs.true.2571:                               ; preds = %cond.end.2567
  %1431 = load i32, i32* %is_inf, align 4
  %tobool2572 = icmp ne i32 %1431, 0
  br i1 %tobool2572, label %if.then.2573, label %if.end.2577

if.then.2573:                                     ; preds = %land.lhs.true.2571
  %1432 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min2574 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1432, i32 0, i32 2
  %1433 = load i32, i32* %pos_min2574, align 4
  %sub2575 = sub nsw i32 2147483647, %1433
  %1434 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_delta2576 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1434, i32 0, i32 3
  store i32 %sub2575, i32* %pos_delta2576, align 4
  br label %if.end.2577

if.end.2577:                                      ; preds = %if.then.2573, %land.lhs.true.2571, %cond.end.2567
  %1435 = load i32, i32* %is_par, align 4
  %cmp2578 = icmp sgt i32 %1435, 255
  br i1 %cmp2578, label %if.then.2580, label %if.end.2581

if.then.2580:                                     ; preds = %if.end.2577
  store i32 0, i32* %is_par, align 4
  br label %if.end.2581

if.end.2581:                                      ; preds = %if.then.2580, %if.end.2577
  %1436 = load i32, i32* %is_par, align 4
  %tobool2582 = icmp ne i32 %1436, 0
  br i1 %tobool2582, label %land.lhs.true.2583, label %if.else.2593

land.lhs.true.2583:                               ; preds = %if.end.2581
  %1437 = load i32, i32* %pars, align 4
  %cmp2584 = icmp eq i32 %1437, 1
  br i1 %cmp2584, label %land.lhs.true.2586, label %if.else.2593

land.lhs.true.2586:                               ; preds = %land.lhs.true.2583
  %1438 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool2587 = icmp ne %struct.scan_data_t* %1438, null
  br i1 %tobool2587, label %if.then.2588, label %if.else.2593

if.then.2588:                                     ; preds = %land.lhs.true.2586
  %1439 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags2589 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1439, i32 0, i32 14
  %1440 = load i32, i32* %flags2589, align 4
  %or2590 = or i32 %1440, 256
  store i32 %or2590, i32* %flags2589, align 4
  %1441 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags2591 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1441, i32 0, i32 14
  %1442 = load i32, i32* %flags2591, align 4
  %and2592 = and i32 %1442, -129
  store i32 %and2592, i32* %flags2591, align 4
  br label %if.end.2603

if.else.2593:                                     ; preds = %land.lhs.true.2586, %land.lhs.true.2583, %if.end.2581
  %1443 = load i32, i32* %pars, align 4
  %tobool2594 = icmp ne i32 %1443, 0
  br i1 %tobool2594, label %land.lhs.true.2595, label %if.end.2602

land.lhs.true.2595:                               ; preds = %if.else.2593
  %1444 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool2596 = icmp ne %struct.scan_data_t* %1444, null
  br i1 %tobool2596, label %if.then.2597, label %if.end.2602

if.then.2597:                                     ; preds = %land.lhs.true.2595
  %1445 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags2598 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1445, i32 0, i32 14
  %1446 = load i32, i32* %flags2598, align 4
  %or2599 = or i32 %1446, 128
  store i32 %or2599, i32* %flags2598, align 4
  %1447 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags2600 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1447, i32 0, i32 14
  %1448 = load i32, i32* %flags2600, align 4
  %and2601 = and i32 %1448, -257
  store i32 %and2601, i32* %flags2600, align 4
  br label %if.end.2602

if.end.2602:                                      ; preds = %if.then.2597, %land.lhs.true.2595, %if.else.2593
  br label %if.end.2603

if.end.2603:                                      ; preds = %if.end.2602, %if.then.2588
  %1449 = load i32, i32* %flags.addr, align 4
  %and2604 = and i32 %1449, 4096
  %tobool2605 = icmp ne i32 %and2604, 0
  br i1 %tobool2605, label %if.then.2606, label %if.end.2608

if.then.2606:                                     ; preds = %if.end.2603
  %1450 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2607 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1450, i32 0, i32 17
  %1451 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %start_class2607, align 8
  call void @S_cl_and(%struct.regnode_charclass_class* %1451, %struct.regnode_charclass_class* %and_with)
  br label %if.end.2608

if.end.2608:                                      ; preds = %if.then.2606, %if.end.2603
  %1452 = load i32, i32* %min, align 4
  ret i32 %1452
}

; Function Attrs: nounwind uwtable
define internal void @S_scan_commit(%struct.RExC_state_t* %pRExC_state, %struct.scan_data_t* %data) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %data.addr = alloca %struct.scan_data_t*, align 8
  %l = alloca i64, align 8
  %old_l = alloca i64, align 8
  %tmp = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  %mg = alloca %struct.magic*, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store %struct.scan_data_t* %data, %struct.scan_data_t** %data.addr, align 8
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %0, i32 0, i32 17
  %1 = load i32, i32* %utf8, align 4
  %cmp = icmp ne i32 %1, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %2, i32 0, i32 4
  %3 = load %struct.sv*, %struct.sv** %last_found, align 8
  %call = call i64 @Perl_sv_len_utf8(%struct.sv* %3)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %4 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found1 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %4, i32 0, i32 4
  %5 = load %struct.sv*, %struct.sv** %last_found1, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 0
  %6 = load i8*, i8** %sv_any, align 8
  %7 = bitcast i8* %6 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %7, i32 0, i32 1
  %8 = load i64, i64* %xpv_cur, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call, %cond.true ], [ %8, %cond.false ]
  store i64 %cond, i64* %l, align 8
  %9 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %9, i32 0, i32 17
  %10 = load i32, i32* %utf82, align 4
  %cmp3 = icmp ne i32 %10, 0
  br i1 %cmp3, label %cond.true.4, label %cond.false.6

cond.true.4:                                      ; preds = %cond.end
  %11 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %11, i32 0, i32 8
  %12 = load %struct.sv**, %struct.sv*** %longest, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %call5 = call i64 @Perl_sv_len_utf8(%struct.sv* %13)
  br label %cond.end.10

cond.false.6:                                     ; preds = %cond.end
  %14 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest7 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %14, i32 0, i32 8
  %15 = load %struct.sv**, %struct.sv*** %longest7, align 8
  %16 = load %struct.sv*, %struct.sv** %15, align 8
  %sv_any8 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 0
  %17 = load i8*, i8** %sv_any8, align 8
  %18 = bitcast i8* %17 to %struct.xpv*
  %xpv_cur9 = getelementptr inbounds %struct.xpv, %struct.xpv* %18, i32 0, i32 1
  %19 = load i64, i64* %xpv_cur9, align 8
  br label %cond.end.10

cond.end.10:                                      ; preds = %cond.false.6, %cond.true.4
  %cond11 = phi i64 [ %call5, %cond.true.4 ], [ %19, %cond.false.6 ]
  store i64 %cond11, i64* %old_l, align 8
  %20 = load i64, i64* %l, align 8
  %21 = load i64, i64* %old_l, align 8
  %cmp12 = icmp uge i64 %20, %21
  br i1 %cmp12, label %land.lhs.true, label %if.end.78

land.lhs.true:                                    ; preds = %cond.end.10
  %22 = load i64, i64* %l, align 8
  %23 = load i64, i64* %old_l, align 8
  %cmp13 = icmp ugt i64 %22, %23
  br i1 %cmp13, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %24 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %24, i32 0, i32 14
  %25 = load i32, i32* %flags, align 4
  %and = and i32 %25, 3
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end.78

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %26 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest14 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %26, i32 0, i32 8
  %27 = load %struct.sv**, %struct.sv*** %longest14, align 8
  %28 = load %struct.sv*, %struct.sv** %27, align 8
  %29 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found15 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %29, i32 0, i32 4
  %30 = load %struct.sv*, %struct.sv** %last_found15, align 8
  %cmp16 = icmp ne %struct.sv* %28, %30
  br i1 %cmp16, label %if.then.17, label %if.end.26

if.then.17:                                       ; preds = %if.then
  %31 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest18 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %31, i32 0, i32 8
  %32 = load %struct.sv**, %struct.sv*** %longest18, align 8
  %33 = load %struct.sv*, %struct.sv** %32, align 8
  %34 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found19 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %34, i32 0, i32 4
  %35 = load %struct.sv*, %struct.sv** %last_found19, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %33, %struct.sv* %35, i32 2)
  %36 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest20 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %36, i32 0, i32 8
  %37 = load %struct.sv**, %struct.sv*** %longest20, align 8
  %38 = load %struct.sv*, %struct.sv** %37, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 2
  %39 = load i32, i32* %sv_flags, align 4
  %and21 = and i32 %39, 16384
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %if.then.23, label %if.end

if.then.23:                                       ; preds = %if.then.17
  %40 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest24 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %40, i32 0, i32 8
  %41 = load %struct.sv**, %struct.sv*** %longest24, align 8
  %42 = load %struct.sv*, %struct.sv** %41, align 8
  %call25 = call i32 @Perl_mg_set(%struct.sv* %42)
  br label %if.end

if.end:                                           ; preds = %if.then.23, %if.then.17
  br label %if.end.26

if.end.26:                                        ; preds = %if.end, %if.then
  %43 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest27 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %43, i32 0, i32 8
  %44 = load %struct.sv**, %struct.sv*** %longest27, align 8
  %45 = load %struct.sv*, %struct.sv** %44, align 8
  %46 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest_fixed = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %46, i32 0, i32 9
  %47 = load %struct.sv*, %struct.sv** %longest_fixed, align 8
  %cmp28 = icmp eq %struct.sv* %45, %47
  br i1 %cmp28, label %if.then.29, label %if.else.45

if.then.29:                                       ; preds = %if.end.26
  %48 = load i64, i64* %l, align 8
  %tobool30 = icmp ne i64 %48, 0
  br i1 %tobool30, label %cond.true.31, label %cond.false.32

cond.true.31:                                     ; preds = %if.then.29
  %49 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_start_min = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %49, i32 0, i32 6
  %50 = load i32, i32* %last_start_min, align 4
  br label %cond.end.33

cond.false.32:                                    ; preds = %if.then.29
  %51 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %51, i32 0, i32 2
  %52 = load i32, i32* %pos_min, align 4
  br label %cond.end.33

cond.end.33:                                      ; preds = %cond.false.32, %cond.true.31
  %cond34 = phi i32 [ %50, %cond.true.31 ], [ %52, %cond.false.32 ]
  %53 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %offset_fixed = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %53, i32 0, i32 10
  store i32 %cond34, i32* %offset_fixed, align 4
  %54 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags35 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %54, i32 0, i32 14
  %55 = load i32, i32* %flags35, align 4
  %and36 = and i32 %55, 3
  %tobool37 = icmp ne i32 %and36, 0
  br i1 %tobool37, label %if.then.38, label %if.else

if.then.38:                                       ; preds = %cond.end.33
  %56 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags39 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %56, i32 0, i32 14
  %57 = load i32, i32* %flags39, align 4
  %and40 = and i32 %57, 3
  %shl = shl i32 %and40, 2
  %58 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags41 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %58, i32 0, i32 14
  %59 = load i32, i32* %flags41, align 4
  %or = or i32 %59, %shl
  store i32 %or, i32* %flags41, align 4
  br label %if.end.44

if.else:                                          ; preds = %cond.end.33
  %60 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags42 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %60, i32 0, i32 14
  %61 = load i32, i32* %flags42, align 4
  %and43 = and i32 %61, -13
  store i32 %and43, i32* %flags42, align 4
  br label %if.end.44

if.end.44:                                        ; preds = %if.else, %if.then.38
  br label %if.end.77

if.else.45:                                       ; preds = %if.end.26
  %62 = load i64, i64* %l, align 8
  %tobool46 = icmp ne i64 %62, 0
  br i1 %tobool46, label %cond.true.47, label %cond.false.49

cond.true.47:                                     ; preds = %if.else.45
  %63 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_start_min48 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %63, i32 0, i32 6
  %64 = load i32, i32* %last_start_min48, align 4
  br label %cond.end.51

cond.false.49:                                    ; preds = %if.else.45
  %65 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min50 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %65, i32 0, i32 2
  %66 = load i32, i32* %pos_min50, align 4
  br label %cond.end.51

cond.end.51:                                      ; preds = %cond.false.49, %cond.true.47
  %cond52 = phi i32 [ %64, %cond.true.47 ], [ %66, %cond.false.49 ]
  %67 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %offset_float_min = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %67, i32 0, i32 12
  store i32 %cond52, i32* %offset_float_min, align 4
  %68 = load i64, i64* %l, align 8
  %tobool53 = icmp ne i64 %68, 0
  br i1 %tobool53, label %cond.true.54, label %cond.false.55

cond.true.54:                                     ; preds = %cond.end.51
  %69 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_start_max = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %69, i32 0, i32 7
  %70 = load i32, i32* %last_start_max, align 4
  br label %cond.end.57

cond.false.55:                                    ; preds = %cond.end.51
  %71 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min56 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %71, i32 0, i32 2
  %72 = load i32, i32* %pos_min56, align 4
  %73 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_delta = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %73, i32 0, i32 3
  %74 = load i32, i32* %pos_delta, align 4
  %add = add nsw i32 %72, %74
  br label %cond.end.57

cond.end.57:                                      ; preds = %cond.false.55, %cond.true.54
  %cond58 = phi i32 [ %70, %cond.true.54 ], [ %add, %cond.false.55 ]
  %75 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %offset_float_max = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %75, i32 0, i32 13
  store i32 %cond58, i32* %offset_float_max, align 4
  %76 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %offset_float_max59 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %76, i32 0, i32 13
  %77 = load i32, i32* %offset_float_max59, align 4
  %cmp60 = icmp ugt i32 %77, 2147483647
  br i1 %cmp60, label %if.then.61, label %if.end.63

if.then.61:                                       ; preds = %cond.end.57
  %78 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %offset_float_max62 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %78, i32 0, i32 13
  store i32 2147483647, i32* %offset_float_max62, align 4
  br label %if.end.63

if.end.63:                                        ; preds = %if.then.61, %cond.end.57
  %79 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags64 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %79, i32 0, i32 14
  %80 = load i32, i32* %flags64, align 4
  %and65 = and i32 %80, 3
  %tobool66 = icmp ne i32 %and65, 0
  br i1 %tobool66, label %if.then.67, label %if.else.73

if.then.67:                                       ; preds = %if.end.63
  %81 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags68 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %81, i32 0, i32 14
  %82 = load i32, i32* %flags68, align 4
  %and69 = and i32 %82, 3
  %shl70 = shl i32 %and69, 4
  %83 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags71 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %83, i32 0, i32 14
  %84 = load i32, i32* %flags71, align 4
  %or72 = or i32 %84, %shl70
  store i32 %or72, i32* %flags71, align 4
  br label %if.end.76

if.else.73:                                       ; preds = %if.end.63
  %85 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags74 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %85, i32 0, i32 14
  %86 = load i32, i32* %flags74, align 4
  %and75 = and i32 %86, -49
  store i32 %and75, i32* %flags74, align 4
  br label %if.end.76

if.end.76:                                        ; preds = %if.else.73, %if.then.67
  br label %if.end.77

if.end.77:                                        ; preds = %if.end.76, %if.end.44
  br label %if.end.78

if.end.78:                                        ; preds = %if.end.77, %lor.lhs.false, %cond.end.10
  %87 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found79 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %87, i32 0, i32 4
  %88 = load %struct.sv*, %struct.sv** %last_found79, align 8
  %sv_any80 = getelementptr inbounds %struct.sv, %struct.sv* %88, i32 0, i32 0
  %89 = load i8*, i8** %sv_any80, align 8
  %90 = bitcast i8* %89 to %struct.xpv*
  %xpv_cur81 = getelementptr inbounds %struct.xpv, %struct.xpv* %90, i32 0, i32 1
  store i64 0, i64* %xpv_cur81, align 8
  store i64 0, i64* %tmp
  %91 = load i64, i64* %tmp
  %92 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found83 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %92, i32 0, i32 4
  %93 = load %struct.sv*, %struct.sv** %last_found83, align 8
  store %struct.sv* %93, %struct.sv** %sv, align 8
  %94 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags85 = getelementptr inbounds %struct.sv, %struct.sv* %94, i32 0, i32 2
  %95 = load i32, i32* %sv_flags85, align 4
  %and86 = and i32 %95, 536870912
  %tobool87 = icmp ne i32 %and86, 0
  br i1 %tobool87, label %land.lhs.true.88, label %cond.false.94

land.lhs.true.88:                                 ; preds = %if.end.78
  %96 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags89 = getelementptr inbounds %struct.sv, %struct.sv* %96, i32 0, i32 2
  %97 = load i32, i32* %sv_flags89, align 4
  %and90 = and i32 %97, 57344
  %tobool91 = icmp ne i32 %and90, 0
  br i1 %tobool91, label %cond.true.92, label %cond.false.94

cond.true.92:                                     ; preds = %land.lhs.true.88
  %98 = load %struct.sv*, %struct.sv** %sv, align 8
  %call93 = call %struct.magic* @Perl_mg_find(%struct.sv* %98, i32 119)
  br label %cond.end.95

cond.false.94:                                    ; preds = %land.lhs.true.88, %if.end.78
  br label %cond.end.95

cond.end.95:                                      ; preds = %cond.false.94, %cond.true.92
  %cond96 = phi %struct.magic* [ %call93, %cond.true.92 ], [ null, %cond.false.94 ]
  store %struct.magic* %cond96, %struct.magic** %mg, align 8
  %99 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool97 = icmp ne %struct.magic* %99, null
  br i1 %tobool97, label %land.lhs.true.98, label %if.end.102

land.lhs.true.98:                                 ; preds = %cond.end.95
  %100 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %100, i32 0, i32 7
  %101 = load i32, i32* %mg_len, align 4
  %cmp99 = icmp sgt i32 %101, 0
  br i1 %cmp99, label %if.then.100, label %if.end.102

if.then.100:                                      ; preds = %land.lhs.true.98
  %102 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len101 = getelementptr inbounds %struct.magic, %struct.magic* %102, i32 0, i32 7
  store i32 0, i32* %mg_len101, align 4
  br label %if.end.102

if.end.102:                                       ; preds = %if.then.100, %land.lhs.true.98, %cond.end.95
  %103 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_end = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %103, i32 0, i32 5
  store i32 -1, i32* %last_end, align 4
  %104 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags103 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %104, i32 0, i32 14
  %105 = load i32, i32* %flags103, align 4
  %and104 = and i32 %105, -4
  store i32 %and104, i32* %flags103, align 4
  ret void
}

declare void @Perl_sv_free(%struct.sv*) #1

declare i64 @Perl_sv_len_utf8(%struct.sv*) #1

declare void @Perl_fbm_compile(%struct.sv*, i32) #1

; Function Attrs: nounwind uwtable
define internal i32 @S_cl_is_anything(%struct.regnode_charclass_class* %cl) #0 {
entry:
  %retval = alloca i32, align 4
  %cl.addr = alloca %struct.regnode_charclass_class*, align 8
  %value = alloca i32, align 4
  store %struct.regnode_charclass_class* %cl, %struct.regnode_charclass_class** %cl.addr, align 8
  store i32 0, i32* %value, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %value, align 4
  %cmp = icmp sle i32 %0, 32
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %value, align 4
  %shr = ashr i32 %1, 3
  %and = and i32 %shr, 3
  %idxprom = sext i32 %and to i64
  %2 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %classflags = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %2, i32 0, i32 5
  %arrayidx = getelementptr inbounds [4 x i8], [4 x i8]* %classflags, i32 0, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %4 = load i32, i32* %value, align 4
  %and1 = and i32 %4, 7
  %shl = shl i32 1, %and1
  %and2 = and i32 %conv, %shl
  %tobool = icmp ne i32 %and2, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %5 = load i32, i32* %value, align 4
  %add = add nsw i32 %5, 1
  %shr3 = ashr i32 %add, 3
  %and4 = and i32 %shr3, 3
  %idxprom5 = sext i32 %and4 to i64
  %6 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %classflags6 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %6, i32 0, i32 5
  %arrayidx7 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags6, i32 0, i64 %idxprom5
  %7 = load i8, i8* %arrayidx7, align 1
  %conv8 = sext i8 %7 to i32
  %8 = load i32, i32* %value, align 4
  %add9 = add nsw i32 %8, 1
  %and10 = and i32 %add9, 7
  %shl11 = shl i32 1, %and10
  %and12 = and i32 %conv8, %shl11
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %value, align 4
  %add14 = add nsw i32 %9, 2
  store i32 %add14, i32* %value, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %flags = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %10, i32 0, i32 0
  %11 = load i8, i8* %flags, align 1
  %conv15 = zext i8 %11 to i32
  %and16 = and i32 %conv15, 64
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %if.end.19, label %if.then.18

if.then.18:                                       ; preds = %for.end
  store i32 0, i32* %retval
  br label %return

if.end.19:                                        ; preds = %for.end
  %12 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %13 = bitcast %struct.regnode_charclass_class* %12 to %struct.regnode_charclass*
  %bitmap = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %13, i32 0, i32 4
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap, i32 0, i32 0
  %call = call i32 @memcmp(i8* %arraydecay, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.18, i32 0, i32 0), i64 32)
  %tobool20 = icmp ne i32 %call, 0
  br i1 %tobool20, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %if.end.19
  store i32 0, i32* %retval
  br label %return

if.end.22:                                        ; preds = %if.end.19
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.22, %if.then.21, %if.then.18, %if.then
  %14 = load i32, i32* %retval
  ret i32 %14
}

; Function Attrs: nounwind uwtable
define internal i32 @S_add_data(%struct.RExC_state_t* %pRExC_state, i32 %n, i8* %s) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %n.addr = alloca i32, align 4
  %s.addr = alloca i8*, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  store i8* %s, i8** %s.addr, align 8
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %0, i32 0, i32 2
  %1 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %data = getelementptr inbounds %struct.regexp, %struct.regexp* %1, i32 0, i32 5
  %2 = load %struct.reg_data*, %struct.reg_data** %data, align 8
  %tobool = icmp ne %struct.reg_data* %2, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx1 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %3, i32 0, i32 2
  %4 = load %struct.regexp*, %struct.regexp** %rx1, align 8
  %data2 = getelementptr inbounds %struct.regexp, %struct.regexp* %4, i32 0, i32 5
  %5 = load %struct.reg_data*, %struct.reg_data** %data2, align 8
  %6 = bitcast %struct.reg_data* %5 to i8*
  %7 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx3 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %7, i32 0, i32 2
  %8 = load %struct.regexp*, %struct.regexp** %rx3, align 8
  %data4 = getelementptr inbounds %struct.regexp, %struct.regexp* %8, i32 0, i32 5
  %9 = load %struct.reg_data*, %struct.reg_data** %data4, align 8
  %count = getelementptr inbounds %struct.reg_data, %struct.reg_data* %9, i32 0, i32 0
  %10 = load i32, i32* %count, align 4
  %11 = load i32, i32* %n.addr, align 4
  %add = add i32 %10, %11
  %sub = sub i32 %add, 1
  %conv = zext i32 %sub to i64
  %mul = mul i64 8, %conv
  %add5 = add i64 24, %mul
  %mul6 = mul i64 %add5, 1
  %call = call i8* @Perl_safesysrealloc(i8* %6, i64 %mul6)
  %12 = bitcast i8* %call to %struct.reg_data*
  %13 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx7 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %13, i32 0, i32 2
  %14 = load %struct.regexp*, %struct.regexp** %rx7, align 8
  %data8 = getelementptr inbounds %struct.regexp, %struct.regexp* %14, i32 0, i32 5
  store %struct.reg_data* %12, %struct.reg_data** %data8, align 8
  %15 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx9 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %15, i32 0, i32 2
  %16 = load %struct.regexp*, %struct.regexp** %rx9, align 8
  %data10 = getelementptr inbounds %struct.regexp, %struct.regexp* %16, i32 0, i32 5
  %17 = load %struct.reg_data*, %struct.reg_data** %data10, align 8
  %what = getelementptr inbounds %struct.reg_data, %struct.reg_data* %17, i32 0, i32 1
  %18 = load i8*, i8** %what, align 8
  %19 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx11 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %19, i32 0, i32 2
  %20 = load %struct.regexp*, %struct.regexp** %rx11, align 8
  %data12 = getelementptr inbounds %struct.regexp, %struct.regexp* %20, i32 0, i32 5
  %21 = load %struct.reg_data*, %struct.reg_data** %data12, align 8
  %count13 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %21, i32 0, i32 0
  %22 = load i32, i32* %count13, align 4
  %23 = load i32, i32* %n.addr, align 4
  %add14 = add i32 %22, %23
  %conv15 = zext i32 %add14 to i64
  %mul16 = mul i64 %conv15, 1
  %call17 = call i8* @Perl_safesysrealloc(i8* %18, i64 %mul16)
  %24 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx18 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %24, i32 0, i32 2
  %25 = load %struct.regexp*, %struct.regexp** %rx18, align 8
  %data19 = getelementptr inbounds %struct.regexp, %struct.regexp* %25, i32 0, i32 5
  %26 = load %struct.reg_data*, %struct.reg_data** %data19, align 8
  %what20 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %26, i32 0, i32 1
  store i8* %call17, i8** %what20, align 8
  %27 = load i32, i32* %n.addr, align 4
  %28 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx21 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %28, i32 0, i32 2
  %29 = load %struct.regexp*, %struct.regexp** %rx21, align 8
  %data22 = getelementptr inbounds %struct.regexp, %struct.regexp* %29, i32 0, i32 5
  %30 = load %struct.reg_data*, %struct.reg_data** %data22, align 8
  %count23 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %30, i32 0, i32 0
  %31 = load i32, i32* %count23, align 4
  %add24 = add i32 %31, %27
  store i32 %add24, i32* %count23, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %32 = load i32, i32* %n.addr, align 4
  %sub25 = sub nsw i32 %32, 1
  %conv26 = sext i32 %sub25 to i64
  %mul27 = mul i64 8, %conv26
  %add28 = add i64 24, %mul27
  %mul29 = mul i64 %add28, 1
  %call30 = call i8* @Perl_safesysmalloc(i64 %mul29)
  %33 = bitcast i8* %call30 to %struct.reg_data*
  %34 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx31 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %34, i32 0, i32 2
  %35 = load %struct.regexp*, %struct.regexp** %rx31, align 8
  %data32 = getelementptr inbounds %struct.regexp, %struct.regexp* %35, i32 0, i32 5
  store %struct.reg_data* %33, %struct.reg_data** %data32, align 8
  %36 = load i32, i32* %n.addr, align 4
  %conv33 = sext i32 %36 to i64
  %mul34 = mul i64 %conv33, 1
  %call35 = call i8* @Perl_safesysmalloc(i64 %mul34)
  %37 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx36 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %37, i32 0, i32 2
  %38 = load %struct.regexp*, %struct.regexp** %rx36, align 8
  %data37 = getelementptr inbounds %struct.regexp, %struct.regexp* %38, i32 0, i32 5
  %39 = load %struct.reg_data*, %struct.reg_data** %data37, align 8
  %what38 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %39, i32 0, i32 1
  store i8* %call35, i8** %what38, align 8
  %40 = load i32, i32* %n.addr, align 4
  %41 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx39 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %41, i32 0, i32 2
  %42 = load %struct.regexp*, %struct.regexp** %rx39, align 8
  %data40 = getelementptr inbounds %struct.regexp, %struct.regexp* %42, i32 0, i32 5
  %43 = load %struct.reg_data*, %struct.reg_data** %data40, align 8
  %count41 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %43, i32 0, i32 0
  store i32 %40, i32* %count41, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %44 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx42 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %44, i32 0, i32 2
  %45 = load %struct.regexp*, %struct.regexp** %rx42, align 8
  %data43 = getelementptr inbounds %struct.regexp, %struct.regexp* %45, i32 0, i32 5
  %46 = load %struct.reg_data*, %struct.reg_data** %data43, align 8
  %what44 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %46, i32 0, i32 1
  %47 = load i8*, i8** %what44, align 8
  %48 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx45 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %48, i32 0, i32 2
  %49 = load %struct.regexp*, %struct.regexp** %rx45, align 8
  %data46 = getelementptr inbounds %struct.regexp, %struct.regexp* %49, i32 0, i32 5
  %50 = load %struct.reg_data*, %struct.reg_data** %data46, align 8
  %count47 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %50, i32 0, i32 0
  %51 = load i32, i32* %count47, align 4
  %idx.ext = zext i32 %51 to i64
  %add.ptr = getelementptr inbounds i8, i8* %47, i64 %idx.ext
  %52 = load i32, i32* %n.addr, align 4
  %idx.ext48 = sext i32 %52 to i64
  %idx.neg = sub i64 0, %idx.ext48
  %add.ptr49 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.neg
  %53 = load i8*, i8** %s.addr, align 8
  %54 = load i32, i32* %n.addr, align 4
  %conv50 = sext i32 %54 to i64
  %mul51 = mul i64 %conv50, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr49, i8* %53, i64 %mul51, i32 1, i1 false)
  %55 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx52 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %55, i32 0, i32 2
  %56 = load %struct.regexp*, %struct.regexp** %rx52, align 8
  %data53 = getelementptr inbounds %struct.regexp, %struct.regexp* %56, i32 0, i32 5
  %57 = load %struct.reg_data*, %struct.reg_data** %data53, align 8
  %count54 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %57, i32 0, i32 0
  %58 = load i32, i32* %count54, align 4
  %59 = load i32, i32* %n.addr, align 4
  %sub55 = sub i32 %58, %59
  ret i32 %sub55
}

; Function Attrs: nounwind uwtable
define void @Perl_regdump(%struct.regexp* %r) #0 {
entry:
  %r.addr = alloca %struct.regexp*, align 8
  store %struct.regexp* %r, %struct.regexp** %r.addr, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_regprop(%struct.sv* %sv, %struct.regnode* %o) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %o.addr = alloca %struct.regnode*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store %struct.regnode* %o, %struct.regnode** %o.addr, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.sv* @Perl_re_intuit_string(%struct.regexp* %prog) #0 {
entry:
  %prog.addr = alloca %struct.regexp*, align 8
  store %struct.regexp* %prog, %struct.regexp** %prog.addr, align 8
  %0 = load %struct.regexp*, %struct.regexp** %prog.addr, align 8
  %substrs = getelementptr inbounds %struct.regexp, %struct.regexp* %0, i32 0, i32 3
  %1 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs, align 8
  %data = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %1, i32 0, i32 0
  %arrayidx = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data, i32 0, i64 2
  %substr = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx, i32 0, i32 2
  %2 = load %struct.sv*, %struct.sv** %substr, align 8
  %tobool = icmp ne %struct.sv* %2, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.regexp*, %struct.regexp** %prog.addr, align 8
  %substrs1 = getelementptr inbounds %struct.regexp, %struct.regexp* %3, i32 0, i32 3
  %4 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1, align 8
  %data2 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %4, i32 0, i32 0
  %arrayidx3 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data2, i32 0, i64 2
  %substr4 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx3, i32 0, i32 2
  %5 = load %struct.sv*, %struct.sv** %substr4, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load %struct.regexp*, %struct.regexp** %prog.addr, align 8
  %substrs5 = getelementptr inbounds %struct.regexp, %struct.regexp* %6, i32 0, i32 3
  %7 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs5, align 8
  %data6 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %7, i32 0, i32 0
  %arrayidx7 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data6, i32 0, i64 2
  %utf8_substr = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx7, i32 0, i32 3
  %8 = load %struct.sv*, %struct.sv** %utf8_substr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %5, %cond.true ], [ %8, %cond.false ]
  ret %struct.sv* %cond
}

; Function Attrs: nounwind uwtable
define void @Perl_pregfree(%struct.regexp* %r) #0 {
entry:
  %r.addr = alloca %struct.regexp*, align 8
  %n = alloca i32, align 4
  %new_comppad = alloca %struct.av*, align 8
  %old_comppad = alloca %struct.av*, align 8
  %refcnt60 = alloca i64, align 8
  store %struct.regexp* %r, %struct.regexp** %r.addr, align 8
  %0 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %tobool = icmp ne %struct.regexp* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %refcnt = getelementptr inbounds %struct.regexp, %struct.regexp* %1, i32 0, i32 9
  %2 = load i32, i32* %refcnt, align 4
  %dec = add nsw i32 %2, -1
  store i32 %dec, i32* %refcnt, align 4
  %cmp = icmp sgt i32 %dec, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %precomp = getelementptr inbounds %struct.regexp, %struct.regexp* %3, i32 0, i32 4
  %4 = load i8*, i8** %precomp, align 8
  %tobool1 = icmp ne i8* %4, null
  br i1 %tobool1, label %if.then.2, label %if.end.4

if.then.2:                                        ; preds = %if.end
  %5 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %precomp3 = getelementptr inbounds %struct.regexp, %struct.regexp* %5, i32 0, i32 4
  %6 = load i8*, i8** %precomp3, align 8
  call void @Perl_safesysfree(i8* %6)
  br label %if.end.4

if.end.4:                                         ; preds = %if.then.2, %if.end
  %7 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %offsets = getelementptr inbounds %struct.regexp, %struct.regexp* %7, i32 0, i32 7
  %8 = load i32*, i32** %offsets, align 8
  %tobool5 = icmp ne i32* %8, null
  br i1 %tobool5, label %if.then.6, label %if.end.8

if.then.6:                                        ; preds = %if.end.4
  %9 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %offsets7 = getelementptr inbounds %struct.regexp, %struct.regexp* %9, i32 0, i32 7
  %10 = load i32*, i32** %offsets7, align 8
  %11 = bitcast i32* %10 to i8*
  call void @Perl_safesysfree(i8* %11)
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.6, %if.end.4
  %12 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %reganch = getelementptr inbounds %struct.regexp, %struct.regexp* %12, i32 0, i32 15
  %13 = load i32, i32* %reganch, align 4
  %and = and i32 %13, 262144
  %tobool9 = icmp ne i32 %and, 0
  br i1 %tobool9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %if.end.8
  %14 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %subbeg = getelementptr inbounds %struct.regexp, %struct.regexp* %14, i32 0, i32 6
  %15 = load i8*, i8** %subbeg, align 8
  call void @Perl_safesysfree(i8* %15)
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.10, %if.end.8
  %16 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %substrs = getelementptr inbounds %struct.regexp, %struct.regexp* %16, i32 0, i32 3
  %17 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs, align 8
  %tobool12 = icmp ne %struct.reg_substr_data* %17, null
  br i1 %tobool12, label %if.then.13, label %if.end.55

if.then.13:                                       ; preds = %if.end.11
  %18 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %substrs14 = getelementptr inbounds %struct.regexp, %struct.regexp* %18, i32 0, i32 3
  %19 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs14, align 8
  %data = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %19, i32 0, i32 0
  %arrayidx = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data, i32 0, i64 0
  %substr = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx, i32 0, i32 2
  %20 = load %struct.sv*, %struct.sv** %substr, align 8
  %tobool15 = icmp ne %struct.sv* %20, null
  br i1 %tobool15, label %if.then.16, label %if.end.21

if.then.16:                                       ; preds = %if.then.13
  %21 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %substrs17 = getelementptr inbounds %struct.regexp, %struct.regexp* %21, i32 0, i32 3
  %22 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs17, align 8
  %data18 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %22, i32 0, i32 0
  %arrayidx19 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data18, i32 0, i64 0
  %substr20 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx19, i32 0, i32 2
  %23 = load %struct.sv*, %struct.sv** %substr20, align 8
  call void @Perl_sv_free(%struct.sv* %23)
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.16, %if.then.13
  %24 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %substrs22 = getelementptr inbounds %struct.regexp, %struct.regexp* %24, i32 0, i32 3
  %25 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs22, align 8
  %data23 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %25, i32 0, i32 0
  %arrayidx24 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data23, i32 0, i64 0
  %utf8_substr = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx24, i32 0, i32 3
  %26 = load %struct.sv*, %struct.sv** %utf8_substr, align 8
  %tobool25 = icmp ne %struct.sv* %26, null
  br i1 %tobool25, label %if.then.26, label %if.end.31

if.then.26:                                       ; preds = %if.end.21
  %27 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %substrs27 = getelementptr inbounds %struct.regexp, %struct.regexp* %27, i32 0, i32 3
  %28 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs27, align 8
  %data28 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %28, i32 0, i32 0
  %arrayidx29 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data28, i32 0, i64 0
  %utf8_substr30 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx29, i32 0, i32 3
  %29 = load %struct.sv*, %struct.sv** %utf8_substr30, align 8
  call void @Perl_sv_free(%struct.sv* %29)
  br label %if.end.31

if.end.31:                                        ; preds = %if.then.26, %if.end.21
  %30 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %substrs32 = getelementptr inbounds %struct.regexp, %struct.regexp* %30, i32 0, i32 3
  %31 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs32, align 8
  %data33 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %31, i32 0, i32 0
  %arrayidx34 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data33, i32 0, i64 1
  %substr35 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx34, i32 0, i32 2
  %32 = load %struct.sv*, %struct.sv** %substr35, align 8
  %tobool36 = icmp ne %struct.sv* %32, null
  br i1 %tobool36, label %if.then.37, label %if.end.42

if.then.37:                                       ; preds = %if.end.31
  %33 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %substrs38 = getelementptr inbounds %struct.regexp, %struct.regexp* %33, i32 0, i32 3
  %34 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs38, align 8
  %data39 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %34, i32 0, i32 0
  %arrayidx40 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data39, i32 0, i64 1
  %substr41 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx40, i32 0, i32 2
  %35 = load %struct.sv*, %struct.sv** %substr41, align 8
  call void @Perl_sv_free(%struct.sv* %35)
  br label %if.end.42

if.end.42:                                        ; preds = %if.then.37, %if.end.31
  %36 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %substrs43 = getelementptr inbounds %struct.regexp, %struct.regexp* %36, i32 0, i32 3
  %37 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs43, align 8
  %data44 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %37, i32 0, i32 0
  %arrayidx45 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data44, i32 0, i64 1
  %utf8_substr46 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx45, i32 0, i32 3
  %38 = load %struct.sv*, %struct.sv** %utf8_substr46, align 8
  %tobool47 = icmp ne %struct.sv* %38, null
  br i1 %tobool47, label %if.then.48, label %if.end.53

if.then.48:                                       ; preds = %if.end.42
  %39 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %substrs49 = getelementptr inbounds %struct.regexp, %struct.regexp* %39, i32 0, i32 3
  %40 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs49, align 8
  %data50 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %40, i32 0, i32 0
  %arrayidx51 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data50, i32 0, i64 1
  %utf8_substr52 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx51, i32 0, i32 3
  %41 = load %struct.sv*, %struct.sv** %utf8_substr52, align 8
  call void @Perl_sv_free(%struct.sv* %41)
  br label %if.end.53

if.end.53:                                        ; preds = %if.then.48, %if.end.42
  %42 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %substrs54 = getelementptr inbounds %struct.regexp, %struct.regexp* %42, i32 0, i32 3
  %43 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs54, align 8
  %44 = bitcast %struct.reg_substr_data* %43 to i8*
  call void @Perl_safesysfree(i8* %44)
  br label %if.end.55

if.end.55:                                        ; preds = %if.end.53, %if.end.11
  %45 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %data56 = getelementptr inbounds %struct.regexp, %struct.regexp* %45, i32 0, i32 5
  %46 = load %struct.reg_data*, %struct.reg_data** %data56, align 8
  %tobool57 = icmp ne %struct.reg_data* %46, null
  br i1 %tobool57, label %if.then.58, label %if.end.120

if.then.58:                                       ; preds = %if.end.55
  %47 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %data59 = getelementptr inbounds %struct.regexp, %struct.regexp* %47, i32 0, i32 5
  %48 = load %struct.reg_data*, %struct.reg_data** %data59, align 8
  %count = getelementptr inbounds %struct.reg_data, %struct.reg_data* %48, i32 0, i32 0
  %49 = load i32, i32* %count, align 4
  store i32 %49, i32* %n, align 4
  store %struct.av* null, %struct.av** %new_comppad, align 8
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %if.then.58
  %50 = load i32, i32* %n, align 4
  %dec61 = add nsw i32 %50, -1
  store i32 %dec61, i32* %n, align 4
  %cmp62 = icmp sge i32 %dec61, 0
  br i1 %cmp62, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %51 = load i32, i32* %n, align 4
  %idxprom = sext i32 %51 to i64
  %52 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %data63 = getelementptr inbounds %struct.regexp, %struct.regexp* %52, i32 0, i32 5
  %53 = load %struct.reg_data*, %struct.reg_data** %data63, align 8
  %what = getelementptr inbounds %struct.reg_data, %struct.reg_data* %53, i32 0, i32 1
  %54 = load i8*, i8** %what, align 8
  %arrayidx64 = getelementptr inbounds i8, i8* %54, i64 %idxprom
  %55 = load i8, i8* %arrayidx64, align 1
  %conv = zext i8 %55 to i32
  switch i32 %conv, label %sw.default [
    i32 115, label %sw.bb
    i32 102, label %sw.bb.69
    i32 112, label %sw.bb.74
    i32 111, label %sw.bb.79
    i32 110, label %sw.bb.111
  ]

sw.bb:                                            ; preds = %while.body
  %56 = load i32, i32* %n, align 4
  %idxprom65 = sext i32 %56 to i64
  %57 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %data66 = getelementptr inbounds %struct.regexp, %struct.regexp* %57, i32 0, i32 5
  %58 = load %struct.reg_data*, %struct.reg_data** %data66, align 8
  %data67 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %58, i32 0, i32 2
  %arrayidx68 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data67, i32 0, i64 %idxprom65
  %59 = load i8*, i8** %arrayidx68, align 8
  %60 = bitcast i8* %59 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %60)
  br label %sw.epilog

sw.bb.69:                                         ; preds = %while.body
  %61 = load i32, i32* %n, align 4
  %idxprom70 = sext i32 %61 to i64
  %62 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %data71 = getelementptr inbounds %struct.regexp, %struct.regexp* %62, i32 0, i32 5
  %63 = load %struct.reg_data*, %struct.reg_data** %data71, align 8
  %data72 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %63, i32 0, i32 2
  %arrayidx73 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data72, i32 0, i64 %idxprom70
  %64 = load i8*, i8** %arrayidx73, align 8
  call void @Perl_safesysfree(i8* %64)
  br label %sw.epilog

sw.bb.74:                                         ; preds = %while.body
  %65 = load i32, i32* %n, align 4
  %idxprom75 = sext i32 %65 to i64
  %66 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %data76 = getelementptr inbounds %struct.regexp, %struct.regexp* %66, i32 0, i32 5
  %67 = load %struct.reg_data*, %struct.reg_data** %data76, align 8
  %data77 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %67, i32 0, i32 2
  %arrayidx78 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data77, i32 0, i64 %idxprom75
  %68 = load i8*, i8** %arrayidx78, align 8
  %69 = bitcast i8* %68 to %struct.av*
  store %struct.av* %69, %struct.av** %new_comppad, align 8
  br label %sw.epilog

sw.bb.79:                                         ; preds = %while.body
  %70 = load %struct.av*, %struct.av** %new_comppad, align 8
  %cmp80 = icmp eq %struct.av* %70, null
  br i1 %cmp80, label %if.then.82, label %if.end.83

if.then.82:                                       ; preds = %sw.bb.79
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end.83

if.end.83:                                        ; preds = %if.then.82, %sw.bb.79
  %71 = load %struct.av*, %struct.av** @PL_comppad, align 8
  store %struct.av* %71, %struct.av** %old_comppad, align 8
  %72 = load %struct.av*, %struct.av** %new_comppad, align 8
  %sv_flags = getelementptr inbounds %struct.av, %struct.av* %72, i32 0, i32 2
  %73 = load i32, i32* %sv_flags, align 4
  %and84 = and i32 %73, 255
  %cmp85 = icmp eq i32 %and84, 10
  br i1 %cmp85, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.83
  %74 = load %struct.av*, %struct.av** %new_comppad, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end.83
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.av* [ %74, %cond.true ], [ null, %cond.false ]
  store %struct.av* %cond, %struct.av** @PL_comppad, align 8
  %75 = load %struct.av*, %struct.av** @PL_comppad, align 8
  %tobool87 = icmp ne %struct.av* %75, null
  br i1 %tobool87, label %cond.true.88, label %cond.false.89

cond.true.88:                                     ; preds = %cond.end
  %76 = load %struct.av*, %struct.av** @PL_comppad, align 8
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %76, i32 0, i32 0
  %77 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_array = getelementptr inbounds %struct.xpvav, %struct.xpvav* %77, i32 0, i32 0
  %78 = load i8*, i8** %xav_array, align 8
  %79 = bitcast i8* %78 to %struct.sv**
  br label %cond.end.90

cond.false.89:                                    ; preds = %cond.end
  br label %cond.end.90

cond.end.90:                                      ; preds = %cond.false.89, %cond.true.88
  %cond91 = phi %struct.sv** [ %79, %cond.true.88 ], [ null, %cond.false.89 ]
  store %struct.sv** %cond91, %struct.sv*** @PL_curpad, align 8
  %80 = load i32, i32* %n, align 4
  %idxprom92 = sext i32 %80 to i64
  %81 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %data93 = getelementptr inbounds %struct.regexp, %struct.regexp* %81, i32 0, i32 5
  %82 = load %struct.reg_data*, %struct.reg_data** %data93, align 8
  %data94 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %82, i32 0, i32 2
  %arrayidx95 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data94, i32 0, i64 %idxprom92
  %83 = load i8*, i8** %arrayidx95, align 8
  %84 = bitcast i8* %83 to %struct.op*
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %84, i32 0, i32 3
  %85 = load i64, i64* %op_targ, align 8
  %dec96 = add i64 %85, -1
  store i64 %dec96, i64* %op_targ, align 8
  store i64 %dec96, i64* %refcnt60, align 8
  %86 = load i64, i64* %refcnt60, align 8
  %tobool97 = icmp ne i64 %86, 0
  br i1 %tobool97, label %if.end.103, label %if.then.98

if.then.98:                                       ; preds = %cond.end.90
  %87 = load i32, i32* %n, align 4
  %idxprom99 = sext i32 %87 to i64
  %88 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %data100 = getelementptr inbounds %struct.regexp, %struct.regexp* %88, i32 0, i32 5
  %89 = load %struct.reg_data*, %struct.reg_data** %data100, align 8
  %data101 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %89, i32 0, i32 2
  %arrayidx102 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data101, i32 0, i64 %idxprom99
  %90 = load i8*, i8** %arrayidx102, align 8
  %91 = bitcast i8* %90 to %struct.op*
  call void @Perl_op_free(%struct.op* %91)
  br label %if.end.103

if.end.103:                                       ; preds = %if.then.98, %cond.end.90
  %92 = load %struct.av*, %struct.av** %old_comppad, align 8
  store %struct.av* %92, %struct.av** @PL_comppad, align 8
  %93 = load %struct.av*, %struct.av** @PL_comppad, align 8
  %tobool104 = icmp ne %struct.av* %93, null
  br i1 %tobool104, label %cond.true.105, label %cond.false.108

cond.true.105:                                    ; preds = %if.end.103
  %94 = load %struct.av*, %struct.av** @PL_comppad, align 8
  %sv_any106 = getelementptr inbounds %struct.av, %struct.av* %94, i32 0, i32 0
  %95 = load %struct.xpvav*, %struct.xpvav** %sv_any106, align 8
  %xav_array107 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %95, i32 0, i32 0
  %96 = load i8*, i8** %xav_array107, align 8
  %97 = bitcast i8* %96 to %struct.sv**
  br label %cond.end.109

cond.false.108:                                   ; preds = %if.end.103
  br label %cond.end.109

cond.end.109:                                     ; preds = %cond.false.108, %cond.true.105
  %cond110 = phi %struct.sv** [ %97, %cond.true.105 ], [ null, %cond.false.108 ]
  store %struct.sv** %cond110, %struct.sv*** @PL_curpad, align 8
  %98 = load %struct.av*, %struct.av** %new_comppad, align 8
  %99 = bitcast %struct.av* %98 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %99)
  store %struct.av* null, %struct.av** %new_comppad, align 8
  br label %sw.epilog

sw.bb.111:                                        ; preds = %while.body
  br label %sw.epilog

sw.default:                                       ; preds = %while.body
  %100 = load i32, i32* %n, align 4
  %idxprom112 = sext i32 %100 to i64
  %101 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %data113 = getelementptr inbounds %struct.regexp, %struct.regexp* %101, i32 0, i32 5
  %102 = load %struct.reg_data*, %struct.reg_data** %data113, align 8
  %what114 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %102, i32 0, i32 1
  %103 = load i8*, i8** %what114, align 8
  %arrayidx115 = getelementptr inbounds i8, i8* %103, i64 %idxprom112
  %104 = load i8, i8* %arrayidx115, align 1
  %conv116 = zext i8 %104 to i32
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.8, i32 0, i32 0), i32 %conv116)
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.111, %cond.end.109, %sw.bb.74, %sw.bb.69, %sw.bb
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %105 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %data117 = getelementptr inbounds %struct.regexp, %struct.regexp* %105, i32 0, i32 5
  %106 = load %struct.reg_data*, %struct.reg_data** %data117, align 8
  %what118 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %106, i32 0, i32 1
  %107 = load i8*, i8** %what118, align 8
  call void @Perl_safesysfree(i8* %107)
  %108 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %data119 = getelementptr inbounds %struct.regexp, %struct.regexp* %108, i32 0, i32 5
  %109 = load %struct.reg_data*, %struct.reg_data** %data119, align 8
  %110 = bitcast %struct.reg_data* %109 to i8*
  call void @Perl_safesysfree(i8* %110)
  br label %if.end.120

if.end.120:                                       ; preds = %while.end, %if.end.55
  %111 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %startp = getelementptr inbounds %struct.regexp, %struct.regexp* %111, i32 0, i32 0
  %112 = load i32*, i32** %startp, align 8
  %113 = bitcast i32* %112 to i8*
  call void @Perl_safesysfree(i8* %113)
  %114 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %endp = getelementptr inbounds %struct.regexp, %struct.regexp* %114, i32 0, i32 1
  %115 = load i32*, i32** %endp, align 8
  %116 = bitcast i32* %115 to i8*
  call void @Perl_safesysfree(i8* %116)
  %117 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  %118 = bitcast %struct.regexp* %117 to i8*
  call void @Perl_safesysfree(i8* %118)
  br label %return

return:                                           ; preds = %if.end.120, %if.then
  ret void
}

declare void @Perl_safesysfree(i8*) #1

declare void @Perl_op_free(%struct.op*) #1

; Function Attrs: nounwind uwtable
define void @Perl_save_re_context() #0 {
entry:
  %i = alloca i32, align 4
  %mgv = alloca %struct.gv*, align 8
  %rx = alloca %struct.regexp*, align 8
  %digits = alloca [22 x i8], align 16
  call void @Perl_save_I32(i32* @PL_reg_flags)
  call void @Perl_save_pptr(i8** @PL_bostr)
  call void @Perl_save_pptr(i8** @PL_reginput)
  call void @Perl_save_pptr(i8** @PL_regbol)
  call void @Perl_save_pptr(i8** @PL_regeol)
  call void @Perl_save_vptr(i8* bitcast (i32** @PL_regstartp to i8*))
  call void @Perl_save_vptr(i8* bitcast (i32** @PL_regendp to i8*))
  call void @Perl_save_vptr(i8* bitcast (i32** @PL_reglastparen to i8*))
  call void @Perl_save_vptr(i8* bitcast (i32** @PL_reglastcloseparen to i8*))
  call void @Perl_save_pptr(i8** @PL_regtill)
  call void @Perl_save_generic_pvref(i8** bitcast (i8*** @PL_reg_start_tmp to i8**))
  store i8** null, i8*** @PL_reg_start_tmp, align 8
  call void @Perl_save_I32(i32* @PL_reg_start_tmpl)
  store i32 0, i32* @PL_reg_start_tmpl, align 4
  call void @Perl_save_vptr(i8* bitcast (%struct.reg_data** @PL_regdata to i8*))
  call void @Perl_save_I32(i32* @PL_reg_eval_set)
  call void @Perl_save_I32(i32* @PL_regnarrate)
  call void @Perl_save_vptr(i8* bitcast (%struct.regnode** @PL_regprogram to i8*))
  call void @Perl_save_int(i32* @PL_regindent)
  call void @Perl_save_vptr(i8* bitcast (%struct.curcur** @PL_regcc to i8*))
  call void @Perl_save_vptr(i8* bitcast (%struct.cop** @PL_curcop to i8*))
  call void @Perl_save_vptr(i8* bitcast (%struct.re_cc_state** @PL_reg_call_cc to i8*))
  call void @Perl_save_vptr(i8* bitcast (%struct.regexp** @PL_reg_re to i8*))
  call void @Perl_save_pptr(i8** @PL_reg_ganch)
  call void @Perl_save_sptr(%struct.sv** @PL_reg_sv)
  call void @Perl_save_bool(i8* @PL_reg_match_utf8)
  call void @Perl_save_vptr(i8* bitcast (%struct.magic** @PL_reg_magic to i8*))
  call void @Perl_save_I32(i32* @PL_reg_oldpos)
  call void @Perl_save_vptr(i8* bitcast (%struct.pmop** @PL_reg_oldcurpm to i8*))
  call void @Perl_save_vptr(i8* bitcast (%struct.pmop** @PL_reg_curpm to i8*))
  call void @Perl_save_pptr(i8** @PL_reg_oldsaved)
  store i8* null, i8** @PL_reg_oldsaved, align 8
  call void @Perl_save_I32(i32* bitcast (i64* @PL_reg_oldsavedlen to i32*))
  store i64 0, i64* @PL_reg_oldsavedlen, align 8
  call void @Perl_save_I32(i32* @PL_reg_maxiter)
  store i32 0, i32* @PL_reg_maxiter, align 4
  call void @Perl_save_I32(i32* @PL_reg_leftiter)
  store i32 0, i32* @PL_reg_leftiter, align 4
  call void @Perl_save_generic_pvref(i8** @PL_reg_poscache)
  store i8* null, i8** @PL_reg_poscache, align 8
  call void @Perl_save_I32(i32* bitcast (i64* @PL_reg_poscache_size to i32*))
  store i64 0, i64* @PL_reg_poscache_size, align 8
  call void @Perl_save_pptr(i8** @PL_regprecomp)
  call void @Perl_save_I32(i32* @PL_regnpar)
  call void @Perl_save_I32(i32* @PL_regsize)
  %0 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  %tobool = icmp ne %struct.pmop* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end.7

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  %op_pmregexp = getelementptr inbounds %struct.pmop, %struct.pmop* %1, i32 0, i32 13
  %2 = load %struct.regexp*, %struct.regexp** %op_pmregexp, align 8
  store %struct.regexp* %2, %struct.regexp** %rx, align 8
  %tobool1 = icmp ne %struct.regexp* %2, null
  br i1 %tobool1, label %if.then, label %if.end.7

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %nparens = getelementptr inbounds %struct.regexp, %struct.regexp* %4, i32 0, i32 12
  %5 = load i32, i32* %nparens, align 4
  %cmp = icmp ule i32 %3, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [22 x i8], [22 x i8]* %digits, i32 0, i32 0
  %6 = load i32, i32* %i, align 4
  %conv = zext i32 %6 to i64
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i64 %conv)
  %arraydecay2 = getelementptr inbounds [22 x i8], [22 x i8]* %digits, i32 0, i32 0
  %call3 = call %struct.gv* @Perl_gv_fetchpv(i8* %arraydecay2, i32 0, i32 4)
  store %struct.gv* %call3, %struct.gv** %mgv, align 8
  %tobool4 = icmp ne %struct.gv* %call3, null
  br i1 %tobool4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %for.body
  %7 = load %struct.gv*, %struct.gv** %mgv, align 8
  %call6 = call %struct.sv* @Perl_save_scalar(%struct.gv* %7)
  br label %if.end

if.end:                                           ; preds = %if.then.5, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.7

if.end.7:                                         ; preds = %for.end, %land.lhs.true, %entry
  ret void
}

declare void @Perl_save_I32(i32*) #1

declare void @Perl_save_pptr(i8**) #1

declare void @Perl_save_vptr(i8*) #1

declare void @Perl_save_generic_pvref(i8**) #1

declare void @Perl_save_int(i32*) #1

declare void @Perl_save_sptr(%struct.sv**) #1

declare void @Perl_save_bool(i8*) #1

declare i32 @sprintf(i8*, i8*, ...) #1

declare %struct.gv* @Perl_gv_fetchpv(i8*, i32, i32) #1

declare %struct.sv* @Perl_save_scalar(%struct.gv*) #1

; Function Attrs: nounwind uwtable
define internal void @S_cl_anything(%struct.RExC_state_t* %pRExC_state, %struct.regnode_charclass_class* %cl) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %cl.addr = alloca %struct.regnode_charclass_class*, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store %struct.regnode_charclass_class* %cl, %struct.regnode_charclass_class** %cl.addr, align 8
  %0 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %classflags = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %0, i32 0, i32 5
  %arraydecay = getelementptr inbounds [4 x i8], [4 x i8]* %classflags, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* %arraydecay, i8 0, i64 4, i32 1, i1 false)
  %1 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %2 = bitcast %struct.regnode_charclass_class* %1 to %struct.regnode_charclass*
  %bitmap = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %2, i32 0, i32 4
  %3 = bitcast [32 x i8]* %bitmap to i8*
  call void @llvm.memset.p0i8.i64(i8* %3, i8 -1, i64 32, i32 4, i1 false)
  %4 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %flags = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %4, i32 0, i32 0
  store i8 80, i8* %flags, align 1
  %5 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %5, i32 0, i32 0
  %6 = load i32, i32* %flags1, align 4
  %and = and i32 %6, 2048
  %cmp = icmp ne i32 %and, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %flags2 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %7, i32 0, i32 0
  %8 = load i8, i8* %flags2, align 1
  %conv = zext i8 %8 to i32
  %or = or i32 %conv, 1
  %conv3 = trunc i32 %or to i8
  store i8 %conv3, i8* %flags2, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #2

declare i8* @Perl_ninstr(i8*, i8*, i8*, i8*) #1

; Function Attrs: nounwind uwtable
define internal void @S_cl_init_zero(%struct.RExC_state_t* %pRExC_state, %struct.regnode_charclass_class* %cl) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %cl.addr = alloca %struct.regnode_charclass_class*, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store %struct.regnode_charclass_class* %cl, %struct.regnode_charclass_class** %cl.addr, align 8
  %0 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %1 = bitcast %struct.regnode_charclass_class* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 44, i32 1, i1 false)
  %2 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %type = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %2, i32 0, i32 1
  store i8 17, i8* %type, align 1
  %3 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %4 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  call void @S_cl_anything(%struct.RExC_state_t* %3, %struct.regnode_charclass_class* %4)
  %5 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %5, i32 0, i32 0
  %6 = load i32, i32* %flags, align 4
  %and = and i32 %6, 2048
  %cmp = icmp ne i32 %and, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %flags1 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %7, i32 0, i32 0
  %8 = load i8, i8* %flags1, align 1
  %conv = zext i8 %8 to i32
  %or = or i32 %conv, 1
  %conv2 = trunc i32 %or to i8
  store i8 %conv2, i8* %flags1, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @S_cl_or(%struct.RExC_state_t* %pRExC_state, %struct.regnode_charclass_class* %cl, %struct.regnode_charclass_class* %or_with) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %cl.addr = alloca %struct.regnode_charclass_class*, align 8
  %or_with.addr = alloca %struct.regnode_charclass_class*, align 8
  %i = alloca i32, align 4
  %i45 = alloca i32, align 4
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store %struct.regnode_charclass_class* %cl, %struct.regnode_charclass_class** %cl.addr, align 8
  store %struct.regnode_charclass_class* %or_with, %struct.regnode_charclass_class** %or_with.addr, align 8
  %0 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %or_with.addr, align 8
  %flags = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else.26

if.then:                                          ; preds = %entry
  %2 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %or_with.addr, align 8
  %flags1 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %2, i32 0, i32 0
  %3 = load i8, i8* %flags1, align 1
  %conv2 = zext i8 %3 to i32
  %and3 = and i32 %conv2, 1
  %4 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %flags4 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %4, i32 0, i32 0
  %5 = load i8, i8* %flags4, align 1
  %conv5 = zext i8 %5 to i32
  %and6 = and i32 %conv5, 1
  %cmp = icmp eq i32 %and3, %and6
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then
  %6 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %or_with.addr, align 8
  %flags8 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %6, i32 0, i32 0
  %7 = load i8, i8* %flags8, align 1
  %conv9 = zext i8 %7 to i32
  %and10 = and i32 %conv9, 2
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %if.else, label %land.lhs.true.12

land.lhs.true.12:                                 ; preds = %land.lhs.true
  %8 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %flags13 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %8, i32 0, i32 0
  %9 = load i8, i8* %flags13, align 1
  %conv14 = zext i8 %9 to i32
  %and15 = and i32 %conv14, 2
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %if.else, label %if.then.17

if.then.17:                                       ; preds = %land.lhs.true.12
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.17
  %10 = load i32, i32* %i, align 4
  %cmp18 = icmp slt i32 %10, 32
  br i1 %cmp18, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i32, i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %12 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %or_with.addr, align 8
  %bitmap = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %12, i32 0, i32 4
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap, i32 0, i64 %idxprom
  %13 = load i8, i8* %arrayidx, align 1
  %conv20 = sext i8 %13 to i32
  %neg = xor i32 %conv20, -1
  %14 = load i32, i32* %i, align 4
  %idxprom21 = sext i32 %14 to i64
  %15 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %bitmap22 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %15, i32 0, i32 4
  %arrayidx23 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap22, i32 0, i64 %idxprom21
  %16 = load i8, i8* %arrayidx23, align 1
  %conv24 = sext i8 %16 to i32
  %or = or i32 %conv24, %neg
  %conv25 = trunc i32 %or to i8
  store i8 %conv25, i8* %arrayidx23, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.else:                                          ; preds = %land.lhs.true.12, %land.lhs.true, %if.then
  %18 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %19 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  call void @S_cl_anything(%struct.RExC_state_t* %18, %struct.regnode_charclass_class* %19)
  br label %if.end

if.end:                                           ; preds = %if.else, %for.end
  br label %if.end.91

if.else.26:                                       ; preds = %entry
  %20 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %or_with.addr, align 8
  %flags27 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %20, i32 0, i32 0
  %21 = load i8, i8* %flags27, align 1
  %conv28 = zext i8 %21 to i32
  %and29 = and i32 %conv28, 1
  %22 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %flags30 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %22, i32 0, i32 0
  %23 = load i8, i8* %flags30, align 1
  %conv31 = zext i8 %23 to i32
  %and32 = and i32 %conv31, 1
  %cmp33 = icmp eq i32 %and29, %and32
  br i1 %cmp33, label %land.lhs.true.35, label %if.else.89

land.lhs.true.35:                                 ; preds = %if.else.26
  %24 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %or_with.addr, align 8
  %flags36 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %24, i32 0, i32 0
  %25 = load i8, i8* %flags36, align 1
  %conv37 = zext i8 %25 to i32
  %and38 = and i32 %conv37, 2
  %tobool39 = icmp ne i32 %and38, 0
  br i1 %tobool39, label %lor.lhs.false, label %if.then.44

lor.lhs.false:                                    ; preds = %land.lhs.true.35
  %26 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %flags40 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %26, i32 0, i32 0
  %27 = load i8, i8* %flags40, align 1
  %conv41 = zext i8 %27 to i32
  %and42 = and i32 %conv41, 2
  %tobool43 = icmp ne i32 %and42, 0
  br i1 %tobool43, label %if.then.44, label %if.else.89

if.then.44:                                       ; preds = %lor.lhs.false, %land.lhs.true.35
  store i32 0, i32* %i45, align 4
  br label %for.cond.46

for.cond.46:                                      ; preds = %for.inc.60, %if.then.44
  %28 = load i32, i32* %i45, align 4
  %cmp47 = icmp slt i32 %28, 32
  br i1 %cmp47, label %for.body.49, label %for.end.62

for.body.49:                                      ; preds = %for.cond.46
  %29 = load i32, i32* %i45, align 4
  %idxprom50 = sext i32 %29 to i64
  %30 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %or_with.addr, align 8
  %bitmap51 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %30, i32 0, i32 4
  %arrayidx52 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap51, i32 0, i64 %idxprom50
  %31 = load i8, i8* %arrayidx52, align 1
  %conv53 = sext i8 %31 to i32
  %32 = load i32, i32* %i45, align 4
  %idxprom54 = sext i32 %32 to i64
  %33 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %bitmap55 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %33, i32 0, i32 4
  %arrayidx56 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap55, i32 0, i64 %idxprom54
  %34 = load i8, i8* %arrayidx56, align 1
  %conv57 = sext i8 %34 to i32
  %or58 = or i32 %conv57, %conv53
  %conv59 = trunc i32 %or58 to i8
  store i8 %conv59, i8* %arrayidx56, align 1
  br label %for.inc.60

for.inc.60:                                       ; preds = %for.body.49
  %35 = load i32, i32* %i45, align 4
  %inc61 = add nsw i32 %35, 1
  store i32 %inc61, i32* %i45, align 4
  br label %for.cond.46

for.end.62:                                       ; preds = %for.cond.46
  %36 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %or_with.addr, align 8
  %flags63 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %36, i32 0, i32 0
  %37 = load i8, i8* %flags63, align 1
  %conv64 = zext i8 %37 to i32
  %and65 = and i32 %conv64, 8
  %tobool66 = icmp ne i32 %and65, 0
  br i1 %tobool66, label %if.then.67, label %if.end.88

if.then.67:                                       ; preds = %for.end.62
  store i32 0, i32* %i45, align 4
  br label %for.cond.68

for.cond.68:                                      ; preds = %for.inc.81, %if.then.67
  %38 = load i32, i32* %i45, align 4
  %cmp69 = icmp slt i32 %38, 4
  br i1 %cmp69, label %for.body.71, label %for.end.83

for.body.71:                                      ; preds = %for.cond.68
  %39 = load i32, i32* %i45, align 4
  %idxprom72 = sext i32 %39 to i64
  %40 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %or_with.addr, align 8
  %classflags = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %40, i32 0, i32 5
  %arrayidx73 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags, i32 0, i64 %idxprom72
  %41 = load i8, i8* %arrayidx73, align 1
  %conv74 = sext i8 %41 to i32
  %42 = load i32, i32* %i45, align 4
  %idxprom75 = sext i32 %42 to i64
  %43 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %classflags76 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %43, i32 0, i32 5
  %arrayidx77 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags76, i32 0, i64 %idxprom75
  %44 = load i8, i8* %arrayidx77, align 1
  %conv78 = sext i8 %44 to i32
  %or79 = or i32 %conv78, %conv74
  %conv80 = trunc i32 %or79 to i8
  store i8 %conv80, i8* %arrayidx77, align 1
  br label %for.inc.81

for.inc.81:                                       ; preds = %for.body.71
  %45 = load i32, i32* %i45, align 4
  %inc82 = add nsw i32 %45, 1
  store i32 %inc82, i32* %i45, align 4
  br label %for.cond.68

for.end.83:                                       ; preds = %for.cond.68
  %46 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %flags84 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %46, i32 0, i32 0
  %47 = load i8, i8* %flags84, align 1
  %conv85 = zext i8 %47 to i32
  %or86 = or i32 %conv85, 8
  %conv87 = trunc i32 %or86 to i8
  store i8 %conv87, i8* %flags84, align 1
  br label %if.end.88

if.end.88:                                        ; preds = %for.end.83, %for.end.62
  br label %if.end.90

if.else.89:                                       ; preds = %lor.lhs.false, %if.else.26
  %48 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %49 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  call void @S_cl_anything(%struct.RExC_state_t* %48, %struct.regnode_charclass_class* %49)
  br label %if.end.90

if.end.90:                                        ; preds = %if.else.89, %if.end.88
  br label %if.end.91

if.end.91:                                        ; preds = %if.end.90, %if.end
  %50 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %or_with.addr, align 8
  %flags92 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %50, i32 0, i32 0
  %51 = load i8, i8* %flags92, align 1
  %conv93 = zext i8 %51 to i32
  %and94 = and i32 %conv93, 16
  %tobool95 = icmp ne i32 %and94, 0
  br i1 %tobool95, label %if.then.96, label %if.end.101

if.then.96:                                       ; preds = %if.end.91
  %52 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %flags97 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %52, i32 0, i32 0
  %53 = load i8, i8* %flags97, align 1
  %conv98 = zext i8 %53 to i32
  %or99 = or i32 %conv98, 16
  %conv100 = trunc i32 %or99 to i8
  store i8 %conv100, i8* %flags97, align 1
  br label %if.end.101

if.end.101:                                       ; preds = %if.then.96, %if.end.91
  %54 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %flags102 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %54, i32 0, i32 0
  %55 = load i8, i8* %flags102, align 1
  %conv103 = zext i8 %55 to i32
  %and104 = and i32 %conv103, 32
  %tobool105 = icmp ne i32 %and104, 0
  br i1 %tobool105, label %land.lhs.true.106, label %if.end.124

land.lhs.true.106:                                ; preds = %if.end.101
  %56 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %or_with.addr, align 8
  %flags107 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %56, i32 0, i32 0
  %57 = load i8, i8* %flags107, align 1
  %conv108 = zext i8 %57 to i32
  %and109 = and i32 %conv108, 32
  %tobool110 = icmp ne i32 %and109, 0
  br i1 %tobool110, label %land.lhs.true.111, label %if.end.124

land.lhs.true.111:                                ; preds = %land.lhs.true.106
  %58 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %59 = bitcast %struct.regnode_charclass_class* %58 to %struct.regnode_1*
  %arg1 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %59, i32 0, i32 3
  %60 = load i32, i32* %arg1, align 4
  %61 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %or_with.addr, align 8
  %62 = bitcast %struct.regnode_charclass_class* %61 to %struct.regnode_1*
  %arg1112 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %62, i32 0, i32 3
  %63 = load i32, i32* %arg1112, align 4
  %cmp113 = icmp ne i32 %60, %63
  br i1 %cmp113, label %if.then.115, label %if.end.124

if.then.115:                                      ; preds = %land.lhs.true.111
  %64 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %flags116 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %64, i32 0, i32 0
  %65 = load i8, i8* %flags116, align 1
  %conv117 = zext i8 %65 to i32
  %or118 = or i32 %conv117, 64
  %conv119 = trunc i32 %or118 to i8
  store i8 %conv119, i8* %flags116, align 1
  %66 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %flags120 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %66, i32 0, i32 0
  %67 = load i8, i8* %flags120, align 1
  %conv121 = zext i8 %67 to i32
  %and122 = and i32 %conv121, -33
  %conv123 = trunc i32 %and122 to i8
  store i8 %conv123, i8* %flags120, align 1
  br label %if.end.124

if.end.124:                                       ; preds = %if.then.115, %land.lhs.true.111, %land.lhs.true.106, %if.end.101
  %68 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %or_with.addr, align 8
  %flags125 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %68, i32 0, i32 0
  %69 = load i8, i8* %flags125, align 1
  %conv126 = zext i8 %69 to i32
  %and127 = and i32 %conv126, 64
  %tobool128 = icmp ne i32 %and127, 0
  br i1 %tobool128, label %if.then.129, label %if.end.138

if.then.129:                                      ; preds = %if.end.124
  %70 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %flags130 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %70, i32 0, i32 0
  %71 = load i8, i8* %flags130, align 1
  %conv131 = zext i8 %71 to i32
  %or132 = or i32 %conv131, 64
  %conv133 = trunc i32 %or132 to i8
  store i8 %conv133, i8* %flags130, align 1
  %72 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %flags134 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %72, i32 0, i32 0
  %73 = load i8, i8* %flags134, align 1
  %conv135 = zext i8 %73 to i32
  %and136 = and i32 %conv135, -33
  %conv137 = trunc i32 %and136 to i8
  store i8 %conv137, i8* %flags134, align 1
  br label %if.end.138

if.end.138:                                       ; preds = %if.then.129, %if.end.124
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @S_cl_and(%struct.regnode_charclass_class* %cl, %struct.regnode_charclass_class* %and_with) #0 {
entry:
  %cl.addr = alloca %struct.regnode_charclass_class*, align 8
  %and_with.addr = alloca %struct.regnode_charclass_class*, align 8
  %i = alloca i32, align 4
  store %struct.regnode_charclass_class* %cl, %struct.regnode_charclass_class** %cl.addr, align 8
  store %struct.regnode_charclass_class* %and_with, %struct.regnode_charclass_class** %and_with.addr, align 8
  %0 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %and_with.addr, align 8
  %flags = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 8
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end.54, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %flags1 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %2, i32 0, i32 0
  %3 = load i8, i8* %flags1, align 1
  %conv2 = zext i8 %3 to i32
  %and3 = and i32 %conv2, 8
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %if.end.54, label %land.lhs.true.5

land.lhs.true.5:                                  ; preds = %land.lhs.true
  %4 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %and_with.addr, align 8
  %flags6 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %4, i32 0, i32 0
  %5 = load i8, i8* %flags6, align 1
  %conv7 = zext i8 %5 to i32
  %and8 = and i32 %conv7, 1
  %6 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %flags9 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %6, i32 0, i32 0
  %7 = load i8, i8* %flags9, align 1
  %conv10 = zext i8 %7 to i32
  %and11 = and i32 %conv10, 1
  %cmp = icmp eq i32 %and8, %and11
  br i1 %cmp, label %land.lhs.true.13, label %if.end.54

land.lhs.true.13:                                 ; preds = %land.lhs.true.5
  %8 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %and_with.addr, align 8
  %flags14 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %8, i32 0, i32 0
  %9 = load i8, i8* %flags14, align 1
  %conv15 = zext i8 %9 to i32
  %and16 = and i32 %conv15, 2
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %if.end.54, label %land.lhs.true.18

land.lhs.true.18:                                 ; preds = %land.lhs.true.13
  %10 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %flags19 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %10, i32 0, i32 0
  %11 = load i8, i8* %flags19, align 1
  %conv20 = zext i8 %11 to i32
  %and21 = and i32 %conv20, 2
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %if.end.54, label %if.then

if.then:                                          ; preds = %land.lhs.true.18
  %12 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %and_with.addr, align 8
  %flags23 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %12, i32 0, i32 0
  %13 = load i8, i8* %flags23, align 1
  %conv24 = zext i8 %13 to i32
  %and25 = and i32 %conv24, 4
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %if.then.27, label %if.else

if.then.27:                                       ; preds = %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.27
  %14 = load i32, i32* %i, align 4
  %cmp28 = icmp slt i32 %14, 32
  br i1 %cmp28, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %15 = load i32, i32* %i, align 4
  %idxprom = sext i32 %15 to i64
  %16 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %and_with.addr, align 8
  %bitmap = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %16, i32 0, i32 4
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap, i32 0, i64 %idxprom
  %17 = load i8, i8* %arrayidx, align 1
  %conv30 = sext i8 %17 to i32
  %neg = xor i32 %conv30, -1
  %18 = load i32, i32* %i, align 4
  %idxprom31 = sext i32 %18 to i64
  %19 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %bitmap32 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %19, i32 0, i32 4
  %arrayidx33 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap32, i32 0, i64 %idxprom31
  %20 = load i8, i8* %arrayidx33, align 1
  %conv34 = sext i8 %20 to i32
  %and35 = and i32 %conv34, %neg
  %conv36 = trunc i32 %and35 to i8
  store i8 %conv36, i8* %arrayidx33, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %21 = load i32, i32* %i, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.else:                                          ; preds = %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond.37

for.cond.37:                                      ; preds = %for.inc.51, %if.else
  %22 = load i32, i32* %i, align 4
  %cmp38 = icmp slt i32 %22, 32
  br i1 %cmp38, label %for.body.40, label %for.end.53

for.body.40:                                      ; preds = %for.cond.37
  %23 = load i32, i32* %i, align 4
  %idxprom41 = sext i32 %23 to i64
  %24 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %and_with.addr, align 8
  %bitmap42 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %24, i32 0, i32 4
  %arrayidx43 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap42, i32 0, i64 %idxprom41
  %25 = load i8, i8* %arrayidx43, align 1
  %conv44 = sext i8 %25 to i32
  %26 = load i32, i32* %i, align 4
  %idxprom45 = sext i32 %26 to i64
  %27 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %bitmap46 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %27, i32 0, i32 4
  %arrayidx47 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap46, i32 0, i64 %idxprom45
  %28 = load i8, i8* %arrayidx47, align 1
  %conv48 = sext i8 %28 to i32
  %and49 = and i32 %conv48, %conv44
  %conv50 = trunc i32 %and49 to i8
  store i8 %conv50, i8* %arrayidx47, align 1
  br label %for.inc.51

for.inc.51:                                       ; preds = %for.body.40
  %29 = load i32, i32* %i, align 4
  %inc52 = add nsw i32 %29, 1
  store i32 %inc52, i32* %i, align 4
  br label %for.cond.37

for.end.53:                                       ; preds = %for.cond.37
  br label %if.end

if.end:                                           ; preds = %for.end.53, %for.end
  br label %if.end.54

if.end.54:                                        ; preds = %if.end, %land.lhs.true.18, %land.lhs.true.13, %land.lhs.true.5, %land.lhs.true, %entry
  %30 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %and_with.addr, align 8
  %flags55 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %30, i32 0, i32 0
  %31 = load i8, i8* %flags55, align 1
  %conv56 = zext i8 %31 to i32
  %and57 = and i32 %conv56, 16
  %tobool58 = icmp ne i32 %and57, 0
  br i1 %tobool58, label %if.end.64, label %if.then.59

if.then.59:                                       ; preds = %if.end.54
  %32 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %flags60 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %32, i32 0, i32 0
  %33 = load i8, i8* %flags60, align 1
  %conv61 = zext i8 %33 to i32
  %and62 = and i32 %conv61, -17
  %conv63 = trunc i32 %and62 to i8
  store i8 %conv63, i8* %flags60, align 1
  br label %if.end.64

if.end.64:                                        ; preds = %if.then.59, %if.end.54
  %34 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %flags65 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %34, i32 0, i32 0
  %35 = load i8, i8* %flags65, align 1
  %conv66 = zext i8 %35 to i32
  %and67 = and i32 %conv66, 64
  %tobool68 = icmp ne i32 %and67, 0
  br i1 %tobool68, label %land.lhs.true.69, label %if.end.88

land.lhs.true.69:                                 ; preds = %if.end.64
  %36 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %and_with.addr, align 8
  %flags70 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %36, i32 0, i32 0
  %37 = load i8, i8* %flags70, align 1
  %conv71 = zext i8 %37 to i32
  %and72 = and i32 %conv71, 32
  %tobool73 = icmp ne i32 %and72, 0
  br i1 %tobool73, label %land.lhs.true.74, label %if.end.88

land.lhs.true.74:                                 ; preds = %land.lhs.true.69
  %38 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %and_with.addr, align 8
  %flags75 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %38, i32 0, i32 0
  %39 = load i8, i8* %flags75, align 1
  %conv76 = zext i8 %39 to i32
  %and77 = and i32 %conv76, 4
  %tobool78 = icmp ne i32 %and77, 0
  br i1 %tobool78, label %if.end.88, label %if.then.79

if.then.79:                                       ; preds = %land.lhs.true.74
  %40 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %flags80 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %40, i32 0, i32 0
  %41 = load i8, i8* %flags80, align 1
  %conv81 = zext i8 %41 to i32
  %and82 = and i32 %conv81, -65
  %conv83 = trunc i32 %and82 to i8
  store i8 %conv83, i8* %flags80, align 1
  %42 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %flags84 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %42, i32 0, i32 0
  %43 = load i8, i8* %flags84, align 1
  %conv85 = zext i8 %43 to i32
  %or = or i32 %conv85, 32
  %conv86 = trunc i32 %or to i8
  store i8 %conv86, i8* %flags84, align 1
  %44 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %and_with.addr, align 8
  %45 = bitcast %struct.regnode_charclass_class* %44 to %struct.regnode_1*
  %arg1 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %45, i32 0, i32 3
  %46 = load i32, i32* %arg1, align 4
  %47 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %48 = bitcast %struct.regnode_charclass_class* %47 to %struct.regnode_1*
  %arg187 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %48, i32 0, i32 3
  store i32 %46, i32* %arg187, align 4
  br label %if.end.88

if.end.88:                                        ; preds = %if.then.79, %land.lhs.true.74, %land.lhs.true.69, %if.end.64
  %49 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %and_with.addr, align 8
  %flags89 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %49, i32 0, i32 0
  %50 = load i8, i8* %flags89, align 1
  %conv90 = zext i8 %50 to i32
  %and91 = and i32 %conv90, 64
  %tobool92 = icmp ne i32 %and91, 0
  br i1 %tobool92, label %if.end.103, label %land.lhs.true.93

land.lhs.true.93:                                 ; preds = %if.end.88
  %51 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %and_with.addr, align 8
  %flags94 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %51, i32 0, i32 0
  %52 = load i8, i8* %flags94, align 1
  %conv95 = zext i8 %52 to i32
  %and96 = and i32 %conv95, 4
  %tobool97 = icmp ne i32 %and96, 0
  br i1 %tobool97, label %if.end.103, label %if.then.98

if.then.98:                                       ; preds = %land.lhs.true.93
  %53 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %flags99 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %53, i32 0, i32 0
  %54 = load i8, i8* %flags99, align 1
  %conv100 = zext i8 %54 to i32
  %and101 = and i32 %conv100, -65
  %conv102 = trunc i32 %and101 to i8
  store i8 %conv102, i8* %flags99, align 1
  br label %if.end.103

if.end.103:                                       ; preds = %if.then.98, %land.lhs.true.93, %if.end.88
  %55 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %and_with.addr, align 8
  %flags104 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %55, i32 0, i32 0
  %56 = load i8, i8* %flags104, align 1
  %conv105 = zext i8 %56 to i32
  %and106 = and i32 %conv105, 96
  %tobool107 = icmp ne i32 %and106, 0
  br i1 %tobool107, label %if.end.118, label %land.lhs.true.108

land.lhs.true.108:                                ; preds = %if.end.103
  %57 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %and_with.addr, align 8
  %flags109 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %57, i32 0, i32 0
  %58 = load i8, i8* %flags109, align 1
  %conv110 = zext i8 %58 to i32
  %and111 = and i32 %conv110, 4
  %tobool112 = icmp ne i32 %and111, 0
  br i1 %tobool112, label %if.end.118, label %if.then.113

if.then.113:                                      ; preds = %land.lhs.true.108
  %59 = load %struct.regnode_charclass_class*, %struct.regnode_charclass_class** %cl.addr, align 8
  %flags114 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %59, i32 0, i32 0
  %60 = load i8, i8* %flags114, align 1
  %conv115 = zext i8 %60 to i32
  %and116 = and i32 %conv115, -33
  %conv117 = trunc i32 %and116 to i8
  store i8 %conv117, i8* %flags114, align 1
  br label %if.end.118

if.end.118:                                       ; preds = %if.then.113, %land.lhs.true.108, %if.end.103
  ret void
}

declare i64 @Perl_utf8_length(i8*, i8*) #1

declare i64 @Perl_utf8_to_uvchr(i8*, i64*) #1

declare void @Perl_sv_catpvn_flags(%struct.sv*, i8*, i64, i32) #1

declare %struct.magic* @Perl_mg_find(%struct.sv*, i32) #1

declare void @Perl_warner(i32, i8*, ...) #1

declare i8* @Perl_sv_2pv_flags(%struct.sv*, i64*, i32) #1

declare i8* @Perl_utf8_hop(i8*, i32) #1

declare i8* @Perl_sv_grow(%struct.sv*, i64) #1

declare void @Perl_repeatcpy(i8*, i8*, i32, i32) #1

declare void @Perl_sv_catsv_flags(%struct.sv*, %struct.sv*, i32) #1

declare void @Perl_sv_setsv_flags(%struct.sv*, %struct.sv*, i32) #1

; Function Attrs: nounwind uwtable
define internal void @S_re_croak2(i8* %pat1, i8* %pat2, ...) #0 {
entry:
  %pat1.addr = alloca i8*, align 8
  %pat2.addr = alloca i8*, align 8
  %args = alloca [1 x %struct.__va_list_tag], align 16
  %l1 = alloca i64, align 8
  %l2 = alloca i64, align 8
  %buf = alloca [512 x i8], align 16
  %msv = alloca %struct.sv*, align 8
  %message = alloca i8*, align 8
  store i8* %pat1, i8** %pat1.addr, align 8
  store i8* %pat2, i8** %pat2.addr, align 8
  %0 = load i8*, i8** %pat1.addr, align 8
  %call = call i64 @strlen(i8* %0)
  store i64 %call, i64* %l1, align 8
  %1 = load i8*, i8** %pat2.addr, align 8
  %call1 = call i64 @strlen(i8* %1)
  store i64 %call1, i64* %l2, align 8
  %2 = load i64, i64* %l1, align 8
  %cmp = icmp ugt i64 %2, 510
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 510, i64* %l1, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i64, i64* %l1, align 8
  %4 = load i64, i64* %l2, align 8
  %add = add i64 %3, %4
  %cmp2 = icmp ugt i64 %add, 510
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  %5 = load i64, i64* %l1, align 8
  %sub = sub i64 510, %5
  store i64 %sub, i64* %l2, align 8
  br label %if.end.4

if.end.4:                                         ; preds = %if.then.3, %if.end
  %arraydecay = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 0
  %6 = load i8*, i8** %pat1.addr, align 8
  %7 = load i64, i64* %l1, align 8
  %mul = mul i64 %7, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %arraydecay, i8* %6, i64 %mul, i32 1, i1 false)
  %arraydecay5 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 0
  %8 = load i64, i64* %l1, align 8
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay5, i64 %8
  %9 = load i8*, i8** %pat2.addr, align 8
  %10 = load i64, i64* %l2, align 8
  %mul6 = mul i64 %10, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr, i8* %9, i64 %mul6, i32 1, i1 false)
  %11 = load i64, i64* %l1, align 8
  %12 = load i64, i64* %l2, align 8
  %add7 = add i64 %11, %12
  %arrayidx = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i64 %add7
  store i8 10, i8* %arrayidx, align 1
  %13 = load i64, i64* %l1, align 8
  %14 = load i64, i64* %l2, align 8
  %add8 = add i64 %13, %14
  %add9 = add i64 %add8, 1
  %arrayidx10 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i64 %add9
  store i8 0, i8* %arrayidx10, align 1
  %arraydecay11 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i32 0, i32 0
  %arraydecay1112 = bitcast %struct.__va_list_tag* %arraydecay11 to i8*
  call void @llvm.va_start(i8* %arraydecay1112)
  %arraydecay13 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 0
  %call14 = call %struct.sv* @Perl_vmess(i8* %arraydecay13, [1 x %struct.__va_list_tag]* %args)
  store %struct.sv* %call14, %struct.sv** %msv, align 8
  %arraydecay15 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i32 0, i32 0
  %arraydecay1516 = bitcast %struct.__va_list_tag* %arraydecay15 to i8*
  call void @llvm.va_end(i8* %arraydecay1516)
  %15 = load %struct.sv*, %struct.sv** %msv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags, align 4
  %and = and i32 %16, 262144
  %cmp17 = icmp eq i32 %and, 262144
  br i1 %cmp17, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.4
  %17 = load %struct.sv*, %struct.sv** %msv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 0
  %18 = load i8*, i8** %sv_any, align 8
  %19 = bitcast i8* %18 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %19, i32 0, i32 1
  %20 = load i64, i64* %xpv_cur, align 8
  store i64 %20, i64* %l1, align 8
  %21 = load %struct.sv*, %struct.sv** %msv, align 8
  %sv_any18 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any18, align 8
  %23 = bitcast i8* %22 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %23, i32 0, i32 0
  %24 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end.4
  %25 = load %struct.sv*, %struct.sv** %msv, align 8
  %call19 = call i8* @Perl_sv_2pv_flags(%struct.sv* %25, i64* %l1, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %24, %cond.true ], [ %call19, %cond.false ]
  store i8* %cond, i8** %message, align 8
  %26 = load i64, i64* %l1, align 8
  %cmp20 = icmp ugt i64 %26, 512
  br i1 %cmp20, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %cond.end
  store i64 512, i64* %l1, align 8
  br label %if.end.22

if.end.22:                                        ; preds = %if.then.21, %cond.end
  %arraydecay23 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 0
  %27 = load i8*, i8** %message, align 8
  %28 = load i64, i64* %l1, align 8
  %mul24 = mul i64 %28, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %arraydecay23, i8* %27, i64 %mul24, i32 1, i1 false)
  %29 = load i64, i64* %l1, align 8
  %sub25 = sub i64 %29, 1
  %arrayidx26 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i64 %sub25
  store i8 0, i8* %arrayidx26, align 1
  %arraydecay27 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 0
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0), i8* %arraydecay27)
  ret void
}

declare i64 @strlen(i8*) #1

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #2

declare %struct.sv* @Perl_vmess(i8*, [1 x %struct.__va_list_tag]*) #1

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #2

declare i32 @Perl_mg_set(%struct.sv*) #1

declare i32 @memcmp(i8*, i8*, i64) #1

declare i8* @Perl_safesysrealloc(i8*, i64) #1

; Function Attrs: nounwind uwtable
define internal i8* @S_nextchar(%struct.RExC_state_t* %pRExC_state) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %retval1 = alloca i8*, align 8
  %ellipses = alloca i8*, align 8
  %len = alloca i64, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %0, i32 0, i32 5
  %1 = load i8*, i8** %parse, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %1, i32 1
  store i8* %incdec.ptr, i8** %parse, align 8
  store i8* %1, i8** %retval1, align 8
  br label %for.cond

for.cond:                                         ; preds = %while.end.83, %if.then.62, %while.end, %entry
  %2 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2, i32 0, i32 5
  %3 = load i8*, i8** %parse2, align 8
  %4 = load i8, i8* %3, align 1
  %conv = sext i8 %4 to i32
  %cmp = icmp eq i32 %conv, 40
  br i1 %cmp, label %land.lhs.true, label %if.end.37

land.lhs.true:                                    ; preds = %for.cond
  %5 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse4 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %5, i32 0, i32 5
  %6 = load i8*, i8** %parse4, align 8
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 1
  %7 = load i8, i8* %arrayidx, align 1
  %conv5 = sext i8 %7 to i32
  %cmp6 = icmp eq i32 %conv5, 63
  br i1 %cmp6, label %land.lhs.true.8, label %if.end.37

land.lhs.true.8:                                  ; preds = %land.lhs.true
  %8 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse9 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %8, i32 0, i32 5
  %9 = load i8*, i8** %parse9, align 8
  %arrayidx10 = getelementptr inbounds i8, i8* %9, i64 2
  %10 = load i8, i8* %arrayidx10, align 1
  %conv11 = sext i8 %10 to i32
  %cmp12 = icmp eq i32 %conv11, 35
  br i1 %cmp12, label %if.then, label %if.end.37

if.then:                                          ; preds = %land.lhs.true.8
  br label %while.cond

while.cond:                                       ; preds = %if.end.32, %if.then
  %11 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse14 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %11, i32 0, i32 5
  %12 = load i8*, i8** %parse14, align 8
  %13 = load i8, i8* %12, align 1
  %conv15 = sext i8 %13 to i32
  %cmp16 = icmp ne i32 %conv15, 41
  br i1 %cmp16, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %14 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse18 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %14, i32 0, i32 5
  %15 = load i8*, i8** %parse18, align 8
  %16 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %16, i32 0, i32 4
  %17 = load i8*, i8** %end, align 8
  %cmp19 = icmp eq i8* %15, %17
  br i1 %cmp19, label %if.then.21, label %if.end.32

if.then.21:                                       ; preds = %while.body
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8** %ellipses, align 8
  %18 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end22 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %18, i32 0, i32 4
  %19 = load i8*, i8** %end22, align 8
  %20 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %20, i32 0, i32 1
  %21 = load i8*, i8** %precomp, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %19 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %21 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %len, align 8
  %22 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %22, i32 0, i32 8
  %23 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %cmp23 = icmp eq %struct.regnode* %23, @PL_regdummy
  br i1 %cmp23, label %if.end, label %if.then.25

if.then.25:                                       ; preds = %if.then.21
  %24 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %24, i32 0, i32 2
  %25 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %26 = bitcast %struct.regexp* %25 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %26)
  br label %if.end

if.end:                                           ; preds = %if.then.25, %if.then.21
  %27 = load i64, i64* %len, align 8
  %cmp26 = icmp sgt i64 %27, 127
  br i1 %cmp26, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %if.end
  store i64 117, i64* %len, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8** %ellipses, align 8
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.28, %if.end
  %28 = load i64, i64* %len, align 8
  %conv30 = trunc i64 %28 to i32
  %29 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp31 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %29, i32 0, i32 1
  %30 = load i8*, i8** %precomp31, align 8
  %31 = load i8*, i8** %ellipses, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.20, i32 0, i32 0), i32 %conv30, i8* %30, i8* %31)
  br label %if.end.32

if.end.32:                                        ; preds = %if.end.29, %while.body
  %32 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse33 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %32, i32 0, i32 5
  %33 = load i8*, i8** %parse33, align 8
  %incdec.ptr34 = getelementptr inbounds i8, i8* %33, i32 1
  store i8* %incdec.ptr34, i8** %parse33, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %34 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse35 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %34, i32 0, i32 5
  %35 = load i8*, i8** %parse35, align 8
  %incdec.ptr36 = getelementptr inbounds i8, i8* %35, i32 1
  store i8* %incdec.ptr36, i8** %parse35, align 8
  br label %for.cond

if.end.37:                                        ; preds = %land.lhs.true.8, %land.lhs.true, %for.cond
  %36 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %36, i32 0, i32 0
  %37 = load i32, i32* %flags, align 4
  %and = and i32 %37, 32768
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.38, label %if.end.86

if.then.38:                                       ; preds = %if.end.37
  %38 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse39 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %38, i32 0, i32 5
  %39 = load i8*, i8** %parse39, align 8
  %40 = load i8, i8* %39, align 1
  %conv40 = sext i8 %40 to i32
  %cmp41 = icmp eq i32 %conv40, 32
  br i1 %cmp41, label %if.then.62, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.38
  %41 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse43 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %41, i32 0, i32 5
  %42 = load i8*, i8** %parse43, align 8
  %43 = load i8, i8* %42, align 1
  %conv44 = sext i8 %43 to i32
  %cmp45 = icmp eq i32 %conv44, 9
  br i1 %cmp45, label %if.then.62, label %lor.lhs.false.47

lor.lhs.false.47:                                 ; preds = %lor.lhs.false
  %44 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse48 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %44, i32 0, i32 5
  %45 = load i8*, i8** %parse48, align 8
  %46 = load i8, i8* %45, align 1
  %conv49 = sext i8 %46 to i32
  %cmp50 = icmp eq i32 %conv49, 10
  br i1 %cmp50, label %if.then.62, label %lor.lhs.false.52

lor.lhs.false.52:                                 ; preds = %lor.lhs.false.47
  %47 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse53 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %47, i32 0, i32 5
  %48 = load i8*, i8** %parse53, align 8
  %49 = load i8, i8* %48, align 1
  %conv54 = sext i8 %49 to i32
  %cmp55 = icmp eq i32 %conv54, 13
  br i1 %cmp55, label %if.then.62, label %lor.lhs.false.57

lor.lhs.false.57:                                 ; preds = %lor.lhs.false.52
  %50 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse58 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %50, i32 0, i32 5
  %51 = load i8*, i8** %parse58, align 8
  %52 = load i8, i8* %51, align 1
  %conv59 = sext i8 %52 to i32
  %cmp60 = icmp eq i32 %conv59, 12
  br i1 %cmp60, label %if.then.62, label %if.else

if.then.62:                                       ; preds = %lor.lhs.false.57, %lor.lhs.false.52, %lor.lhs.false.47, %lor.lhs.false, %if.then.38
  %53 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse63 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %53, i32 0, i32 5
  %54 = load i8*, i8** %parse63, align 8
  %incdec.ptr64 = getelementptr inbounds i8, i8* %54, i32 1
  store i8* %incdec.ptr64, i8** %parse63, align 8
  br label %for.cond

if.else:                                          ; preds = %lor.lhs.false.57
  %55 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse65 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %55, i32 0, i32 5
  %56 = load i8*, i8** %parse65, align 8
  %57 = load i8, i8* %56, align 1
  %conv66 = sext i8 %57 to i32
  %cmp67 = icmp eq i32 %conv66, 35
  br i1 %cmp67, label %if.then.69, label %if.end.84

if.then.69:                                       ; preds = %if.else
  br label %while.cond.70

while.cond.70:                                    ; preds = %if.end.82, %if.then.69
  %58 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse71 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %58, i32 0, i32 5
  %59 = load i8*, i8** %parse71, align 8
  %60 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end72 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %60, i32 0, i32 4
  %61 = load i8*, i8** %end72, align 8
  %cmp73 = icmp ult i8* %59, %61
  br i1 %cmp73, label %while.body.75, label %while.end.83

while.body.75:                                    ; preds = %while.cond.70
  %62 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse76 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %62, i32 0, i32 5
  %63 = load i8*, i8** %parse76, align 8
  %incdec.ptr77 = getelementptr inbounds i8, i8* %63, i32 1
  store i8* %incdec.ptr77, i8** %parse76, align 8
  %64 = load i8, i8* %63, align 1
  %conv78 = sext i8 %64 to i32
  %cmp79 = icmp eq i32 %conv78, 10
  br i1 %cmp79, label %if.then.81, label %if.end.82

if.then.81:                                       ; preds = %while.body.75
  br label %while.end.83

if.end.82:                                        ; preds = %while.body.75
  br label %while.cond.70

while.end.83:                                     ; preds = %if.then.81, %while.cond.70
  br label %for.cond

if.end.84:                                        ; preds = %if.else
  br label %if.end.85

if.end.85:                                        ; preds = %if.end.84
  br label %if.end.86

if.end.86:                                        ; preds = %if.end.85, %if.end.37
  %65 = load i8*, i8** %retval1, align 8
  ret i8* %65
}

declare void @Perl_push_scope() #1

declare %struct.op* @Perl_sv_compile_2op(%struct.sv*, %struct.op**, i8*, %struct.av**) #1

declare void @Perl_pop_scope() #1

; Function Attrs: nounwind uwtable
define internal %struct.regnode* @S_reg_node(%struct.RExC_state_t* %pRExC_state, i8 zeroext %op) #0 {
entry:
  %retval = alloca %struct.regnode*, align 8
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %op.addr = alloca i8, align 1
  %ret = alloca %struct.regnode*, align 8
  %ptr = alloca %struct.regnode*, align 8
  %tmp = alloca %struct.regnode*, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i8 %op, i8* %op.addr, align 1
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %0, i32 0, i32 8
  %1 = load %struct.regnode*, %struct.regnode** %emit, align 8
  store %struct.regnode* %1, %struct.regnode** %ret, align 8
  %2 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2, i32 0, i32 8
  %3 = load %struct.regnode*, %struct.regnode** %emit1, align 8
  %cmp = icmp eq %struct.regnode* %3, @PL_regdummy
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %size = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %4, i32 0, i32 12
  %5 = load i32, i32* %size, align 4
  %add = add nsw i32 %5, 1
  store i32 %add, i32* %size, align 4
  %6 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %6, %struct.regnode** %retval
  br label %return

if.end:                                           ; preds = %entry
  %7 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags = getelementptr inbounds %struct.regnode, %struct.regnode* %7, i32 0, i32 0
  store i8 -34, i8* %flags, align 1
  %8 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %8, %struct.regnode** %ptr, align 8
  %9 = load i8, i8* %op.addr, align 1
  %10 = load %struct.regnode*, %struct.regnode** %ptr, align 8
  %type = getelementptr inbounds %struct.regnode, %struct.regnode* %10, i32 0, i32 1
  store i8 %9, i8* %type, align 1
  %11 = load %struct.regnode*, %struct.regnode** %ptr, align 8
  %next_off = getelementptr inbounds %struct.regnode, %struct.regnode* %11, i32 0, i32 2
  store i16 0, i16* %next_off, align 2
  %12 = load %struct.regnode*, %struct.regnode** %ptr, align 8
  %incdec.ptr = getelementptr inbounds %struct.regnode, %struct.regnode* %12, i32 1
  store %struct.regnode* %incdec.ptr, %struct.regnode** %ptr, align 8
  store %struct.regnode* %12, %struct.regnode** %tmp
  %13 = load %struct.regnode*, %struct.regnode** %tmp
  %14 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %14, i32 0, i32 2
  %15 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %offsets = getelementptr inbounds %struct.regexp, %struct.regexp* %15, i32 0, i32 7
  %16 = load i32*, i32** %offsets, align 8
  %tobool = icmp ne i32* %16, null
  br i1 %tobool, label %if.then.2, label %if.end.31

if.then.2:                                        ; preds = %if.end
  %17 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit3 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %17, i32 0, i32 8
  %18 = load %struct.regnode*, %struct.regnode** %emit3, align 8
  %cmp4 = icmp eq %struct.regnode* %18, @PL_regdummy
  br i1 %cmp4, label %if.end.30, label %if.then.5

if.then.5:                                        ; preds = %if.then.2
  %19 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit6 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %19, i32 0, i32 8
  %20 = load %struct.regnode*, %struct.regnode** %emit6, align 8
  %21 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %21, i32 0, i32 7
  %22 = load %struct.regnode*, %struct.regnode** %emit_start, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.regnode* %20 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.regnode* %22 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 4
  %cmp7 = icmp slt i64 %sub.ptr.div, 0
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %if.then.5
  %23 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit9 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %23, i32 0, i32 8
  %24 = load %struct.regnode*, %struct.regnode** %emit9, align 8
  %25 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start10 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %25, i32 0, i32 7
  %26 = load %struct.regnode*, %struct.regnode** %emit_start10, align 8
  %sub.ptr.lhs.cast11 = ptrtoint %struct.regnode* %24 to i64
  %sub.ptr.rhs.cast12 = ptrtoint %struct.regnode* %26 to i64
  %sub.ptr.sub13 = sub i64 %sub.ptr.lhs.cast11, %sub.ptr.rhs.cast12
  %sub.ptr.div14 = sdiv exact i64 %sub.ptr.sub13, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.28, i32 0, i32 0), i64 %sub.ptr.div14)
  br label %if.end.29

if.else:                                          ; preds = %if.then.5
  %27 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %27, i32 0, i32 5
  %28 = load i8*, i8** %parse, align 8
  %29 = load i8, i8* %op.addr, align 1
  %conv = zext i8 %29 to i32
  %cmp15 = icmp eq i32 %conv, 0
  %conv16 = zext i1 %cmp15 to i32
  %idx.ext = sext i32 %conv16 to i64
  %add.ptr = getelementptr inbounds i8, i8* %28, i64 %idx.ext
  %30 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %start = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %30, i32 0, i32 3
  %31 = load i8*, i8** %start, align 8
  %sub.ptr.lhs.cast17 = ptrtoint i8* %add.ptr to i64
  %sub.ptr.rhs.cast18 = ptrtoint i8* %31 to i64
  %sub.ptr.sub19 = sub i64 %sub.ptr.lhs.cast17, %sub.ptr.rhs.cast18
  %conv20 = trunc i64 %sub.ptr.sub19 to i32
  %32 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit21 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %32, i32 0, i32 8
  %33 = load %struct.regnode*, %struct.regnode** %emit21, align 8
  %34 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start22 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %34, i32 0, i32 7
  %35 = load %struct.regnode*, %struct.regnode** %emit_start22, align 8
  %sub.ptr.lhs.cast23 = ptrtoint %struct.regnode* %33 to i64
  %sub.ptr.rhs.cast24 = ptrtoint %struct.regnode* %35 to i64
  %sub.ptr.sub25 = sub i64 %sub.ptr.lhs.cast23, %sub.ptr.rhs.cast24
  %sub.ptr.div26 = sdiv exact i64 %sub.ptr.sub25, 4
  %mul = mul nsw i64 2, %sub.ptr.div26
  %sub = sub nsw i64 %mul, 1
  %36 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx27 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %36, i32 0, i32 2
  %37 = load %struct.regexp*, %struct.regexp** %rx27, align 8
  %offsets28 = getelementptr inbounds %struct.regexp, %struct.regexp* %37, i32 0, i32 7
  %38 = load i32*, i32** %offsets28, align 8
  %arrayidx = getelementptr inbounds i32, i32* %38, i64 %sub
  store i32 %conv20, i32* %arrayidx, align 4
  br label %if.end.29

if.end.29:                                        ; preds = %if.else, %if.then.8
  br label %if.end.30

if.end.30:                                        ; preds = %if.end.29, %if.then.2
  br label %if.end.31

if.end.31:                                        ; preds = %if.end.30, %if.end
  %39 = load %struct.regnode*, %struct.regnode** %ptr, align 8
  %40 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit32 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %40, i32 0, i32 8
  store %struct.regnode* %39, %struct.regnode** %emit32, align 8
  %41 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %41, %struct.regnode** %retval
  br label %return

return:                                           ; preds = %if.end.31, %if.then
  %42 = load %struct.regnode*, %struct.regnode** %retval
  ret %struct.regnode* %42
}

; Function Attrs: nounwind uwtable
define internal void @S_regtail(%struct.RExC_state_t* %pRExC_state, %struct.regnode* %p, %struct.regnode* %val) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %p.addr = alloca %struct.regnode*, align 8
  %val.addr = alloca %struct.regnode*, align 8
  %scan = alloca %struct.regnode*, align 8
  %temp = alloca %struct.regnode*, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store %struct.regnode* %p, %struct.regnode** %p.addr, align 8
  store %struct.regnode* %val, %struct.regnode** %val.addr, align 8
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %0, i32 0, i32 8
  %1 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %cmp = icmp eq %struct.regnode* %1, @PL_regdummy
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end.10

if.end:                                           ; preds = %entry
  %2 = load %struct.regnode*, %struct.regnode** %p.addr, align 8
  store %struct.regnode* %2, %struct.regnode** %scan, align 8
  br label %for.cond

for.cond:                                         ; preds = %if.end.3, %if.end
  %3 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %call = call %struct.regnode* @Perl_regnext(%struct.regnode* %3)
  store %struct.regnode* %call, %struct.regnode** %temp, align 8
  %4 = load %struct.regnode*, %struct.regnode** %temp, align 8
  %cmp1 = icmp eq %struct.regnode* %4, null
  br i1 %cmp1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %for.cond
  br label %for.end

if.end.3:                                         ; preds = %for.cond
  %5 = load %struct.regnode*, %struct.regnode** %temp, align 8
  store %struct.regnode* %5, %struct.regnode** %scan, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.2
  %6 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type = getelementptr inbounds %struct.regnode, %struct.regnode* %6, i32 0, i32 1
  %7 = load i8, i8* %type, align 1
  %idxprom = zext i8 %7 to i64
  %arrayidx = getelementptr inbounds [62 x i8], [62 x i8]* @reg_off_by_arg, i32 0, i64 %idxprom
  %8 = load i8, i8* %arrayidx, align 1
  %tobool = icmp ne i8 %8, 0
  br i1 %tobool, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %for.end
  %9 = load %struct.regnode*, %struct.regnode** %val.addr, align 8
  %10 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.regnode* %9 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.regnode* %10 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 4
  %conv = trunc i64 %sub.ptr.div to i32
  %11 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %12 = bitcast %struct.regnode* %11 to %struct.regnode_1*
  %arg1 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %12, i32 0, i32 3
  store i32 %conv, i32* %arg1, align 4
  br label %if.end.10

if.else:                                          ; preds = %for.end
  %13 = load %struct.regnode*, %struct.regnode** %val.addr, align 8
  %14 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %sub.ptr.lhs.cast5 = ptrtoint %struct.regnode* %13 to i64
  %sub.ptr.rhs.cast6 = ptrtoint %struct.regnode* %14 to i64
  %sub.ptr.sub7 = sub i64 %sub.ptr.lhs.cast5, %sub.ptr.rhs.cast6
  %sub.ptr.div8 = sdiv exact i64 %sub.ptr.sub7, 4
  %conv9 = trunc i64 %sub.ptr.div8 to i16
  %15 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %next_off = getelementptr inbounds %struct.regnode, %struct.regnode* %15, i32 0, i32 2
  store i16 %conv9, i16* %next_off, align 2
  br label %if.end.10

if.end.10:                                        ; preds = %if.then, %if.else, %if.then.4
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct.regnode* @S_reganode(%struct.RExC_state_t* %pRExC_state, i8 zeroext %op, i32 %arg) #0 {
entry:
  %retval = alloca %struct.regnode*, align 8
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %op.addr = alloca i8, align 1
  %arg.addr = alloca i32, align 4
  %ret = alloca %struct.regnode*, align 8
  %ptr = alloca %struct.regnode*, align 8
  %tmp = alloca %struct.regnode*, align 8
  %tmp2 = alloca %struct.regnode*, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i8 %op, i8* %op.addr, align 1
  store i32 %arg, i32* %arg.addr, align 4
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %0, i32 0, i32 8
  %1 = load %struct.regnode*, %struct.regnode** %emit, align 8
  store %struct.regnode* %1, %struct.regnode** %ret, align 8
  %2 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2, i32 0, i32 8
  %3 = load %struct.regnode*, %struct.regnode** %emit1, align 8
  %cmp = icmp eq %struct.regnode* %3, @PL_regdummy
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %size = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %4, i32 0, i32 12
  %5 = load i32, i32* %size, align 4
  %add = add nsw i32 %5, 2
  store i32 %add, i32* %size, align 4
  %6 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %6, %struct.regnode** %retval
  br label %return

if.end:                                           ; preds = %entry
  %7 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags = getelementptr inbounds %struct.regnode, %struct.regnode* %7, i32 0, i32 0
  store i8 -34, i8* %flags, align 1
  %8 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %8, %struct.regnode** %ptr, align 8
  %9 = load i32, i32* %arg.addr, align 4
  %10 = load %struct.regnode*, %struct.regnode** %ptr, align 8
  %11 = bitcast %struct.regnode* %10 to %struct.regnode_1*
  %arg1 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %11, i32 0, i32 3
  store i32 %9, i32* %arg1, align 4
  %12 = load i8, i8* %op.addr, align 1
  %13 = load %struct.regnode*, %struct.regnode** %ptr, align 8
  %type = getelementptr inbounds %struct.regnode, %struct.regnode* %13, i32 0, i32 1
  store i8 %12, i8* %type, align 1
  %14 = load %struct.regnode*, %struct.regnode** %ptr, align 8
  %next_off = getelementptr inbounds %struct.regnode, %struct.regnode* %14, i32 0, i32 2
  store i16 0, i16* %next_off, align 2
  %15 = load %struct.regnode*, %struct.regnode** %ptr, align 8
  %incdec.ptr = getelementptr inbounds %struct.regnode, %struct.regnode* %15, i32 1
  store %struct.regnode* %incdec.ptr, %struct.regnode** %ptr, align 8
  store %struct.regnode* %15, %struct.regnode** %tmp
  %16 = load %struct.regnode*, %struct.regnode** %tmp
  %17 = load %struct.regnode*, %struct.regnode** %ptr, align 8
  %add.ptr = getelementptr inbounds %struct.regnode, %struct.regnode* %17, i64 1
  store %struct.regnode* %add.ptr, %struct.regnode** %ptr, align 8
  store %struct.regnode* %add.ptr, %struct.regnode** %tmp2
  %18 = load %struct.regnode*, %struct.regnode** %tmp2
  %19 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %19, i32 0, i32 2
  %20 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %offsets = getelementptr inbounds %struct.regexp, %struct.regexp* %20, i32 0, i32 7
  %21 = load i32*, i32** %offsets, align 8
  %tobool = icmp ne i32* %21, null
  br i1 %tobool, label %if.then.3, label %if.end.29

if.then.3:                                        ; preds = %if.end
  %22 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit4 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %22, i32 0, i32 8
  %23 = load %struct.regnode*, %struct.regnode** %emit4, align 8
  %cmp5 = icmp eq %struct.regnode* %23, @PL_regdummy
  br i1 %cmp5, label %if.end.28, label %if.then.6

if.then.6:                                        ; preds = %if.then.3
  %24 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit7 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %24, i32 0, i32 8
  %25 = load %struct.regnode*, %struct.regnode** %emit7, align 8
  %26 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %26, i32 0, i32 7
  %27 = load %struct.regnode*, %struct.regnode** %emit_start, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.regnode* %25 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.regnode* %27 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 4
  %cmp8 = icmp slt i64 %sub.ptr.div, 0
  br i1 %cmp8, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %if.then.6
  %28 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit10 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %28, i32 0, i32 8
  %29 = load %struct.regnode*, %struct.regnode** %emit10, align 8
  %30 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start11 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %30, i32 0, i32 7
  %31 = load %struct.regnode*, %struct.regnode** %emit_start11, align 8
  %sub.ptr.lhs.cast12 = ptrtoint %struct.regnode* %29 to i64
  %sub.ptr.rhs.cast13 = ptrtoint %struct.regnode* %31 to i64
  %sub.ptr.sub14 = sub i64 %sub.ptr.lhs.cast12, %sub.ptr.rhs.cast13
  %sub.ptr.div15 = sdiv exact i64 %sub.ptr.sub14, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.28, i32 0, i32 0), i64 %sub.ptr.div15)
  br label %if.end.27

if.else:                                          ; preds = %if.then.6
  %32 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %32, i32 0, i32 5
  %33 = load i8*, i8** %parse, align 8
  %34 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %start = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %34, i32 0, i32 3
  %35 = load i8*, i8** %start, align 8
  %sub.ptr.lhs.cast16 = ptrtoint i8* %33 to i64
  %sub.ptr.rhs.cast17 = ptrtoint i8* %35 to i64
  %sub.ptr.sub18 = sub i64 %sub.ptr.lhs.cast16, %sub.ptr.rhs.cast17
  %conv = trunc i64 %sub.ptr.sub18 to i32
  %36 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit19 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %36, i32 0, i32 8
  %37 = load %struct.regnode*, %struct.regnode** %emit19, align 8
  %38 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start20 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %38, i32 0, i32 7
  %39 = load %struct.regnode*, %struct.regnode** %emit_start20, align 8
  %sub.ptr.lhs.cast21 = ptrtoint %struct.regnode* %37 to i64
  %sub.ptr.rhs.cast22 = ptrtoint %struct.regnode* %39 to i64
  %sub.ptr.sub23 = sub i64 %sub.ptr.lhs.cast21, %sub.ptr.rhs.cast22
  %sub.ptr.div24 = sdiv exact i64 %sub.ptr.sub23, 4
  %mul = mul nsw i64 2, %sub.ptr.div24
  %sub = sub nsw i64 %mul, 1
  %40 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx25 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %40, i32 0, i32 2
  %41 = load %struct.regexp*, %struct.regexp** %rx25, align 8
  %offsets26 = getelementptr inbounds %struct.regexp, %struct.regexp* %41, i32 0, i32 7
  %42 = load i32*, i32** %offsets26, align 8
  %arrayidx = getelementptr inbounds i32, i32* %42, i64 %sub
  store i32 %conv, i32* %arrayidx, align 4
  br label %if.end.27

if.end.27:                                        ; preds = %if.else, %if.then.9
  br label %if.end.28

if.end.28:                                        ; preds = %if.end.27, %if.then.3
  br label %if.end.29

if.end.29:                                        ; preds = %if.end.28, %if.end
  %43 = load %struct.regnode*, %struct.regnode** %ptr, align 8
  %44 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit30 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %44, i32 0, i32 8
  store %struct.regnode* %43, %struct.regnode** %emit30, align 8
  %45 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %45, %struct.regnode** %retval
  br label %return

return:                                           ; preds = %if.end.29, %if.then
  %46 = load %struct.regnode*, %struct.regnode** %retval
  ret %struct.regnode* %46
}

declare i32 @atoi(i8*) #1

; Function Attrs: nounwind uwtable
define internal %struct.regnode* @S_regbranch(%struct.RExC_state_t* %pRExC_state, i32* %flagp, i32 %first) #0 {
entry:
  %retval = alloca %struct.regnode*, align 8
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %flagp.addr = alloca i32*, align 8
  %first.addr = alloca i32, align 4
  %ret = alloca %struct.regnode*, align 8
  %chain = alloca %struct.regnode*, align 8
  %latest = alloca %struct.regnode*, align 8
  %flags = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i32* %flagp, i32** %flagp.addr, align 8
  store i32 %first, i32* %first.addr, align 4
  store %struct.regnode* null, %struct.regnode** %chain, align 8
  store i32 0, i32* %flags, align 4
  store i32 0, i32* %c, align 4
  %0 = load i32, i32* %first.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store %struct.regnode* null, %struct.regnode** %ret, align 8
  br label %if.end.23

if.else:                                          ; preds = %entry
  %1 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1, i32 0, i32 8
  %2 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %cmp = icmp eq %struct.regnode* %2, @PL_regdummy
  br i1 %cmp, label %if.else.3, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %3 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %extralen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %3, i32 0, i32 14
  %4 = load i32, i32* %extralen, align 4
  %tobool1 = icmp ne i32 %4, 0
  br i1 %tobool1, label %if.then.2, label %if.else.3

if.then.2:                                        ; preds = %land.lhs.true
  %5 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call = call %struct.regnode* @S_reganode(%struct.RExC_state_t* %5, i8 zeroext 56, i32 0)
  store %struct.regnode* %call, %struct.regnode** %ret, align 8
  br label %if.end.22

if.else.3:                                        ; preds = %land.lhs.true, %if.else
  %6 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call4 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %6, i8 zeroext 31)
  store %struct.regnode* %call4, %struct.regnode** %ret, align 8
  %7 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit5 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %7, i32 0, i32 8
  %8 = load %struct.regnode*, %struct.regnode** %emit5, align 8
  %cmp6 = icmp eq %struct.regnode* %8, @PL_regdummy
  br i1 %cmp6, label %if.end.21, label %if.then.7

if.then.7:                                        ; preds = %if.else.3
  %9 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %10 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %10, i32 0, i32 7
  %11 = load %struct.regnode*, %struct.regnode** %emit_start, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.regnode* %9 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.regnode* %11 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 4
  %cmp8 = icmp slt i64 %sub.ptr.div, 0
  br i1 %cmp8, label %if.then.9, label %if.else.15

if.then.9:                                        ; preds = %if.then.7
  %12 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %13 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start10 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %13, i32 0, i32 7
  %14 = load %struct.regnode*, %struct.regnode** %emit_start10, align 8
  %sub.ptr.lhs.cast11 = ptrtoint %struct.regnode* %12 to i64
  %sub.ptr.rhs.cast12 = ptrtoint %struct.regnode* %14 to i64
  %sub.ptr.sub13 = sub i64 %sub.ptr.lhs.cast11, %sub.ptr.rhs.cast12
  %sub.ptr.div14 = sdiv exact i64 %sub.ptr.sub13, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i32 0, i32 0), i64 %sub.ptr.div14)
  br label %if.end

if.else.15:                                       ; preds = %if.then.7
  %15 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %16 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start16 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %16, i32 0, i32 7
  %17 = load %struct.regnode*, %struct.regnode** %emit_start16, align 8
  %sub.ptr.lhs.cast17 = ptrtoint %struct.regnode* %15 to i64
  %sub.ptr.rhs.cast18 = ptrtoint %struct.regnode* %17 to i64
  %sub.ptr.sub19 = sub i64 %sub.ptr.lhs.cast17, %sub.ptr.rhs.cast18
  %sub.ptr.div20 = sdiv exact i64 %sub.ptr.sub19, 4
  %mul = mul nsw i64 2, %sub.ptr.div20
  %18 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %18, i32 0, i32 2
  %19 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %offsets = getelementptr inbounds %struct.regexp, %struct.regexp* %19, i32 0, i32 7
  %20 = load i32*, i32** %offsets, align 8
  %arrayidx = getelementptr inbounds i32, i32* %20, i64 %mul
  store i32 1, i32* %arrayidx, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.15, %if.then.9
  br label %if.end.21

if.end.21:                                        ; preds = %if.end, %if.else.3
  br label %if.end.22

if.end.22:                                        ; preds = %if.end.21, %if.then.2
  br label %if.end.23

if.end.23:                                        ; preds = %if.end.22, %if.then
  %21 = load i32, i32* %first.addr, align 4
  %tobool24 = icmp ne i32 %21, 0
  br i1 %tobool24, label %if.end.30, label %land.lhs.true.25

land.lhs.true.25:                                 ; preds = %if.end.23
  %22 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit26 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %22, i32 0, i32 8
  %23 = load %struct.regnode*, %struct.regnode** %emit26, align 8
  %cmp27 = icmp eq %struct.regnode* %23, @PL_regdummy
  br i1 %cmp27, label %if.then.28, label %if.end.30

if.then.28:                                       ; preds = %land.lhs.true.25
  %24 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %extralen29 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %24, i32 0, i32 14
  %25 = load i32, i32* %extralen29, align 4
  %add = add nsw i32 %25, 1
  store i32 %add, i32* %extralen29, align 4
  br label %if.end.30

if.end.30:                                        ; preds = %if.then.28, %land.lhs.true.25, %if.end.23
  %26 = load i32*, i32** %flagp.addr, align 8
  store i32 0, i32* %26, align 4
  %27 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %27, i32 0, i32 5
  %28 = load i8*, i8** %parse, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %28, i32 -1
  store i8* %incdec.ptr, i8** %parse, align 8
  %29 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call31 = call i8* @S_nextchar(%struct.RExC_state_t* %29)
  br label %while.cond

while.cond:                                       ; preds = %if.end.63, %if.then.48, %if.end.30
  %30 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse32 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %30, i32 0, i32 5
  %31 = load i8*, i8** %parse32, align 8
  %32 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %32, i32 0, i32 4
  %33 = load i8*, i8** %end, align 8
  %cmp33 = icmp ult i8* %31, %33
  br i1 %cmp33, label %land.lhs.true.34, label %land.end

land.lhs.true.34:                                 ; preds = %while.cond
  %34 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse35 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %34, i32 0, i32 5
  %35 = load i8*, i8** %parse35, align 8
  %36 = load i8, i8* %35, align 1
  %conv = sext i8 %36 to i32
  %cmp36 = icmp ne i32 %conv, 124
  br i1 %cmp36, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true.34
  %37 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse38 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %37, i32 0, i32 5
  %38 = load i8*, i8** %parse38, align 8
  %39 = load i8, i8* %38, align 1
  %conv39 = sext i8 %39 to i32
  %cmp40 = icmp ne i32 %conv39, 41
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true.34, %while.cond
  %40 = phi i1 [ false, %land.lhs.true.34 ], [ false, %while.cond ], [ %cmp40, %land.rhs ]
  br i1 %40, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %41 = load i32, i32* %flags, align 4
  %and = and i32 %41, -9
  store i32 %and, i32* %flags, align 4
  %42 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call42 = call %struct.regnode* @S_regpiece(%struct.RExC_state_t* %42, i32* %flags)
  store %struct.regnode* %call42, %struct.regnode** %latest, align 8
  %43 = load %struct.regnode*, %struct.regnode** %latest, align 8
  %cmp43 = icmp eq %struct.regnode* %43, null
  br i1 %cmp43, label %if.then.45, label %if.else.50

if.then.45:                                       ; preds = %while.body
  %44 = load i32, i32* %flags, align 4
  %and46 = and i32 %44, 8
  %tobool47 = icmp ne i32 %and46, 0
  br i1 %tobool47, label %if.then.48, label %if.end.49

if.then.48:                                       ; preds = %if.then.45
  br label %while.cond

if.end.49:                                        ; preds = %if.then.45
  store %struct.regnode* null, %struct.regnode** %retval
  br label %return

if.else.50:                                       ; preds = %while.body
  %45 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %cmp51 = icmp eq %struct.regnode* %45, null
  br i1 %cmp51, label %if.then.53, label %if.end.54

if.then.53:                                       ; preds = %if.else.50
  %46 = load %struct.regnode*, %struct.regnode** %latest, align 8
  store %struct.regnode* %46, %struct.regnode** %ret, align 8
  br label %if.end.54

if.end.54:                                        ; preds = %if.then.53, %if.else.50
  br label %if.end.55

if.end.55:                                        ; preds = %if.end.54
  %47 = load i32, i32* %flags, align 4
  %and56 = and i32 %47, 1
  %48 = load i32*, i32** %flagp.addr, align 8
  %49 = load i32, i32* %48, align 4
  %or = or i32 %49, %and56
  store i32 %or, i32* %48, align 4
  %50 = load %struct.regnode*, %struct.regnode** %chain, align 8
  %cmp57 = icmp eq %struct.regnode* %50, null
  br i1 %cmp57, label %if.then.59, label %if.else.62

if.then.59:                                       ; preds = %if.end.55
  %51 = load i32, i32* %flags, align 4
  %and60 = and i32 %51, 4
  %52 = load i32*, i32** %flagp.addr, align 8
  %53 = load i32, i32* %52, align 4
  %or61 = or i32 %53, %and60
  store i32 %or61, i32* %52, align 4
  br label %if.end.63

if.else.62:                                       ; preds = %if.end.55
  %54 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %54, i32 0, i32 9
  %55 = load i32, i32* %naughty, align 4
  %inc = add nsw i32 %55, 1
  store i32 %inc, i32* %naughty, align 4
  %56 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %57 = load %struct.regnode*, %struct.regnode** %chain, align 8
  %58 = load %struct.regnode*, %struct.regnode** %latest, align 8
  call void @S_regtail(%struct.RExC_state_t* %56, %struct.regnode* %57, %struct.regnode* %58)
  br label %if.end.63

if.end.63:                                        ; preds = %if.else.62, %if.then.59
  %59 = load %struct.regnode*, %struct.regnode** %latest, align 8
  store %struct.regnode* %59, %struct.regnode** %chain, align 8
  %60 = load i32, i32* %c, align 4
  %inc64 = add nsw i32 %60, 1
  store i32 %inc64, i32* %c, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  %61 = load %struct.regnode*, %struct.regnode** %chain, align 8
  %cmp65 = icmp eq %struct.regnode* %61, null
  br i1 %cmp65, label %if.then.67, label %if.end.73

if.then.67:                                       ; preds = %while.end
  %62 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call68 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %62, i8 zeroext 36)
  store %struct.regnode* %call68, %struct.regnode** %chain, align 8
  %63 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %cmp69 = icmp eq %struct.regnode* %63, null
  br i1 %cmp69, label %if.then.71, label %if.end.72

if.then.71:                                       ; preds = %if.then.67
  %64 = load %struct.regnode*, %struct.regnode** %chain, align 8
  store %struct.regnode* %64, %struct.regnode** %ret, align 8
  br label %if.end.72

if.end.72:                                        ; preds = %if.then.71, %if.then.67
  br label %if.end.73

if.end.73:                                        ; preds = %if.end.72, %while.end
  %65 = load i32, i32* %c, align 4
  %cmp74 = icmp eq i32 %65, 1
  br i1 %cmp74, label %if.then.76, label %if.end.79

if.then.76:                                       ; preds = %if.end.73
  %66 = load i32, i32* %flags, align 4
  %and77 = and i32 %66, 2
  %67 = load i32*, i32** %flagp.addr, align 8
  %68 = load i32, i32* %67, align 4
  %or78 = or i32 %68, %and77
  store i32 %or78, i32* %67, align 4
  br label %if.end.79

if.end.79:                                        ; preds = %if.then.76, %if.end.73
  %69 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %69, %struct.regnode** %retval
  br label %return

return:                                           ; preds = %if.end.79, %if.end.49
  %70 = load %struct.regnode*, %struct.regnode** %retval
  ret %struct.regnode* %70
}

declare void @Perl_pmflag(i32*, i32) #1

; Function Attrs: nounwind uwtable
define internal void @S_reginsert(%struct.RExC_state_t* %pRExC_state, i8 zeroext %op, %struct.regnode* %opnd) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %op.addr = alloca i8, align 1
  %opnd.addr = alloca %struct.regnode*, align 8
  %src = alloca %struct.regnode*, align 8
  %dst = alloca %struct.regnode*, align 8
  %place = alloca %struct.regnode*, align 8
  %offset = alloca i32, align 4
  %tmp = alloca %struct.regnode*, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i8 %op, i8* %op.addr, align 1
  store %struct.regnode* %opnd, %struct.regnode** %opnd.addr, align 8
  %0 = load i8, i8* %op.addr, align 1
  %idxprom = zext i8 %0 to i64
  %arrayidx = getelementptr inbounds [62 x i8], [62 x i8]* @regarglen, i32 0, i64 %idxprom
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  store i32 %conv, i32* %offset, align 4
  %2 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2, i32 0, i32 8
  %3 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %cmp = icmp eq %struct.regnode* %3, @PL_regdummy
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %offset, align 4
  %add = add nsw i32 1, %4
  %5 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %size = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %5, i32 0, i32 12
  %6 = load i32, i32* %size, align 4
  %add2 = add nsw i32 %6, %add
  store i32 %add2, i32* %size, align 4
  br label %return

if.end:                                           ; preds = %entry
  %7 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit3 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %7, i32 0, i32 8
  %8 = load %struct.regnode*, %struct.regnode** %emit3, align 8
  store %struct.regnode* %8, %struct.regnode** %src, align 8
  %9 = load i32, i32* %offset, align 4
  %add4 = add nsw i32 1, %9
  %10 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit5 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %10, i32 0, i32 8
  %11 = load %struct.regnode*, %struct.regnode** %emit5, align 8
  %idx.ext = sext i32 %add4 to i64
  %add.ptr = getelementptr inbounds %struct.regnode, %struct.regnode* %11, i64 %idx.ext
  store %struct.regnode* %add.ptr, %struct.regnode** %emit5, align 8
  %12 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit6 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %12, i32 0, i32 8
  %13 = load %struct.regnode*, %struct.regnode** %emit6, align 8
  store %struct.regnode* %13, %struct.regnode** %dst, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.81, %if.end
  %14 = load %struct.regnode*, %struct.regnode** %src, align 8
  %15 = load %struct.regnode*, %struct.regnode** %opnd.addr, align 8
  %cmp7 = icmp ugt %struct.regnode* %14, %15
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %16 = load %struct.regnode*, %struct.regnode** %dst, align 8
  %incdec.ptr = getelementptr inbounds %struct.regnode, %struct.regnode* %16, i32 -1
  store %struct.regnode* %incdec.ptr, %struct.regnode** %dst, align 8
  %17 = load %struct.regnode*, %struct.regnode** %src, align 8
  %incdec.ptr9 = getelementptr inbounds %struct.regnode, %struct.regnode* %17, i32 -1
  store %struct.regnode* %incdec.ptr9, %struct.regnode** %src, align 8
  %18 = bitcast %struct.regnode* %incdec.ptr to i8*
  %19 = bitcast %struct.regnode* %incdec.ptr9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %18, i8* %19, i64 4, i32 2, i1 false)
  %20 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %20, i32 0, i32 2
  %21 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %offsets = getelementptr inbounds %struct.regexp, %struct.regexp* %21, i32 0, i32 7
  %22 = load i32*, i32** %offsets, align 8
  %tobool = icmp ne i32* %22, null
  br i1 %tobool, label %if.then.10, label %if.end.81

if.then.10:                                       ; preds = %while.body
  %23 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit11 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %23, i32 0, i32 8
  %24 = load %struct.regnode*, %struct.regnode** %emit11, align 8
  %cmp12 = icmp eq %struct.regnode* %24, @PL_regdummy
  br i1 %cmp12, label %if.end.42, label %if.then.14

if.then.14:                                       ; preds = %if.then.10
  %25 = load %struct.regnode*, %struct.regnode** %dst, align 8
  %26 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %26, i32 0, i32 7
  %27 = load %struct.regnode*, %struct.regnode** %emit_start, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.regnode* %25 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.regnode* %27 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 4
  %cmp15 = icmp slt i64 %sub.ptr.div, 0
  br i1 %cmp15, label %if.then.17, label %if.else

if.then.17:                                       ; preds = %if.then.14
  %28 = load %struct.regnode*, %struct.regnode** %dst, align 8
  %29 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start18 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %29, i32 0, i32 7
  %30 = load %struct.regnode*, %struct.regnode** %emit_start18, align 8
  %sub.ptr.lhs.cast19 = ptrtoint %struct.regnode* %28 to i64
  %sub.ptr.rhs.cast20 = ptrtoint %struct.regnode* %30 to i64
  %sub.ptr.sub21 = sub i64 %sub.ptr.lhs.cast19, %sub.ptr.rhs.cast20
  %sub.ptr.div22 = sdiv exact i64 %sub.ptr.sub21, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.28, i32 0, i32 0), i64 %sub.ptr.div22)
  br label %if.end.41

if.else:                                          ; preds = %if.then.14
  %31 = load %struct.regnode*, %struct.regnode** %src, align 8
  %32 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start23 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %32, i32 0, i32 7
  %33 = load %struct.regnode*, %struct.regnode** %emit_start23, align 8
  %sub.ptr.lhs.cast24 = ptrtoint %struct.regnode* %31 to i64
  %sub.ptr.rhs.cast25 = ptrtoint %struct.regnode* %33 to i64
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast24, %sub.ptr.rhs.cast25
  %sub.ptr.div27 = sdiv exact i64 %sub.ptr.sub26, 4
  %mul = mul nsw i64 2, %sub.ptr.div27
  %sub = sub nsw i64 %mul, 1
  %34 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx28 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %34, i32 0, i32 2
  %35 = load %struct.regexp*, %struct.regexp** %rx28, align 8
  %offsets29 = getelementptr inbounds %struct.regexp, %struct.regexp* %35, i32 0, i32 7
  %36 = load i32*, i32** %offsets29, align 8
  %arrayidx30 = getelementptr inbounds i32, i32* %36, i64 %sub
  %37 = load i32, i32* %arrayidx30, align 4
  %38 = load %struct.regnode*, %struct.regnode** %dst, align 8
  %39 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start31 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %39, i32 0, i32 7
  %40 = load %struct.regnode*, %struct.regnode** %emit_start31, align 8
  %sub.ptr.lhs.cast32 = ptrtoint %struct.regnode* %38 to i64
  %sub.ptr.rhs.cast33 = ptrtoint %struct.regnode* %40 to i64
  %sub.ptr.sub34 = sub i64 %sub.ptr.lhs.cast32, %sub.ptr.rhs.cast33
  %sub.ptr.div35 = sdiv exact i64 %sub.ptr.sub34, 4
  %mul36 = mul nsw i64 2, %sub.ptr.div35
  %sub37 = sub nsw i64 %mul36, 1
  %41 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx38 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %41, i32 0, i32 2
  %42 = load %struct.regexp*, %struct.regexp** %rx38, align 8
  %offsets39 = getelementptr inbounds %struct.regexp, %struct.regexp* %42, i32 0, i32 7
  %43 = load i32*, i32** %offsets39, align 8
  %arrayidx40 = getelementptr inbounds i32, i32* %43, i64 %sub37
  store i32 %37, i32* %arrayidx40, align 4
  br label %if.end.41

if.end.41:                                        ; preds = %if.else, %if.then.17
  br label %if.end.42

if.end.42:                                        ; preds = %if.end.41, %if.then.10
  %44 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit43 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %44, i32 0, i32 8
  %45 = load %struct.regnode*, %struct.regnode** %emit43, align 8
  %cmp44 = icmp eq %struct.regnode* %45, @PL_regdummy
  br i1 %cmp44, label %if.end.80, label %if.then.46

if.then.46:                                       ; preds = %if.end.42
  %46 = load %struct.regnode*, %struct.regnode** %dst, align 8
  %47 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start47 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %47, i32 0, i32 7
  %48 = load %struct.regnode*, %struct.regnode** %emit_start47, align 8
  %sub.ptr.lhs.cast48 = ptrtoint %struct.regnode* %46 to i64
  %sub.ptr.rhs.cast49 = ptrtoint %struct.regnode* %48 to i64
  %sub.ptr.sub50 = sub i64 %sub.ptr.lhs.cast48, %sub.ptr.rhs.cast49
  %sub.ptr.div51 = sdiv exact i64 %sub.ptr.sub50, 4
  %cmp52 = icmp slt i64 %sub.ptr.div51, 0
  br i1 %cmp52, label %if.then.54, label %if.else.60

if.then.54:                                       ; preds = %if.then.46
  %49 = load %struct.regnode*, %struct.regnode** %dst, align 8
  %50 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start55 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %50, i32 0, i32 7
  %51 = load %struct.regnode*, %struct.regnode** %emit_start55, align 8
  %sub.ptr.lhs.cast56 = ptrtoint %struct.regnode* %49 to i64
  %sub.ptr.rhs.cast57 = ptrtoint %struct.regnode* %51 to i64
  %sub.ptr.sub58 = sub i64 %sub.ptr.lhs.cast56, %sub.ptr.rhs.cast57
  %sub.ptr.div59 = sdiv exact i64 %sub.ptr.sub58, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i32 0, i32 0), i64 %sub.ptr.div59)
  br label %if.end.79

if.else.60:                                       ; preds = %if.then.46
  %52 = load %struct.regnode*, %struct.regnode** %src, align 8
  %53 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start61 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %53, i32 0, i32 7
  %54 = load %struct.regnode*, %struct.regnode** %emit_start61, align 8
  %sub.ptr.lhs.cast62 = ptrtoint %struct.regnode* %52 to i64
  %sub.ptr.rhs.cast63 = ptrtoint %struct.regnode* %54 to i64
  %sub.ptr.sub64 = sub i64 %sub.ptr.lhs.cast62, %sub.ptr.rhs.cast63
  %sub.ptr.div65 = sdiv exact i64 %sub.ptr.sub64, 4
  %mul66 = mul nsw i64 2, %sub.ptr.div65
  %55 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx67 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %55, i32 0, i32 2
  %56 = load %struct.regexp*, %struct.regexp** %rx67, align 8
  %offsets68 = getelementptr inbounds %struct.regexp, %struct.regexp* %56, i32 0, i32 7
  %57 = load i32*, i32** %offsets68, align 8
  %arrayidx69 = getelementptr inbounds i32, i32* %57, i64 %mul66
  %58 = load i32, i32* %arrayidx69, align 4
  %59 = load %struct.regnode*, %struct.regnode** %dst, align 8
  %60 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start70 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %60, i32 0, i32 7
  %61 = load %struct.regnode*, %struct.regnode** %emit_start70, align 8
  %sub.ptr.lhs.cast71 = ptrtoint %struct.regnode* %59 to i64
  %sub.ptr.rhs.cast72 = ptrtoint %struct.regnode* %61 to i64
  %sub.ptr.sub73 = sub i64 %sub.ptr.lhs.cast71, %sub.ptr.rhs.cast72
  %sub.ptr.div74 = sdiv exact i64 %sub.ptr.sub73, 4
  %mul75 = mul nsw i64 2, %sub.ptr.div74
  %62 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx76 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %62, i32 0, i32 2
  %63 = load %struct.regexp*, %struct.regexp** %rx76, align 8
  %offsets77 = getelementptr inbounds %struct.regexp, %struct.regexp* %63, i32 0, i32 7
  %64 = load i32*, i32** %offsets77, align 8
  %arrayidx78 = getelementptr inbounds i32, i32* %64, i64 %mul75
  store i32 %58, i32* %arrayidx78, align 4
  br label %if.end.79

if.end.79:                                        ; preds = %if.else.60, %if.then.54
  br label %if.end.80

if.end.80:                                        ; preds = %if.end.79, %if.end.42
  br label %if.end.81

if.end.81:                                        ; preds = %if.end.80, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %65 = load %struct.regnode*, %struct.regnode** %opnd.addr, align 8
  store %struct.regnode* %65, %struct.regnode** %place, align 8
  %66 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx82 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %66, i32 0, i32 2
  %67 = load %struct.regexp*, %struct.regexp** %rx82, align 8
  %offsets83 = getelementptr inbounds %struct.regexp, %struct.regexp* %67, i32 0, i32 7
  %68 = load i32*, i32** %offsets83, align 8
  %tobool84 = icmp ne i32* %68, null
  br i1 %tobool84, label %if.then.85, label %if.end.149

if.then.85:                                       ; preds = %while.end
  %69 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit86 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %69, i32 0, i32 8
  %70 = load %struct.regnode*, %struct.regnode** %emit86, align 8
  %cmp87 = icmp eq %struct.regnode* %70, @PL_regdummy
  br i1 %cmp87, label %if.end.119, label %if.then.89

if.then.89:                                       ; preds = %if.then.85
  %71 = load %struct.regnode*, %struct.regnode** %place, align 8
  %72 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start90 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %72, i32 0, i32 7
  %73 = load %struct.regnode*, %struct.regnode** %emit_start90, align 8
  %sub.ptr.lhs.cast91 = ptrtoint %struct.regnode* %71 to i64
  %sub.ptr.rhs.cast92 = ptrtoint %struct.regnode* %73 to i64
  %sub.ptr.sub93 = sub i64 %sub.ptr.lhs.cast91, %sub.ptr.rhs.cast92
  %sub.ptr.div94 = sdiv exact i64 %sub.ptr.sub93, 4
  %cmp95 = icmp slt i64 %sub.ptr.div94, 0
  br i1 %cmp95, label %if.then.97, label %if.else.103

if.then.97:                                       ; preds = %if.then.89
  %74 = load %struct.regnode*, %struct.regnode** %place, align 8
  %75 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start98 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %75, i32 0, i32 7
  %76 = load %struct.regnode*, %struct.regnode** %emit_start98, align 8
  %sub.ptr.lhs.cast99 = ptrtoint %struct.regnode* %74 to i64
  %sub.ptr.rhs.cast100 = ptrtoint %struct.regnode* %76 to i64
  %sub.ptr.sub101 = sub i64 %sub.ptr.lhs.cast99, %sub.ptr.rhs.cast100
  %sub.ptr.div102 = sdiv exact i64 %sub.ptr.sub101, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.28, i32 0, i32 0), i64 %sub.ptr.div102)
  br label %if.end.118

if.else.103:                                      ; preds = %if.then.89
  %77 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %77, i32 0, i32 5
  %78 = load i8*, i8** %parse, align 8
  %79 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %start = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %79, i32 0, i32 3
  %80 = load i8*, i8** %start, align 8
  %sub.ptr.lhs.cast104 = ptrtoint i8* %78 to i64
  %sub.ptr.rhs.cast105 = ptrtoint i8* %80 to i64
  %sub.ptr.sub106 = sub i64 %sub.ptr.lhs.cast104, %sub.ptr.rhs.cast105
  %conv107 = trunc i64 %sub.ptr.sub106 to i32
  %81 = load %struct.regnode*, %struct.regnode** %place, align 8
  %82 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start108 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %82, i32 0, i32 7
  %83 = load %struct.regnode*, %struct.regnode** %emit_start108, align 8
  %sub.ptr.lhs.cast109 = ptrtoint %struct.regnode* %81 to i64
  %sub.ptr.rhs.cast110 = ptrtoint %struct.regnode* %83 to i64
  %sub.ptr.sub111 = sub i64 %sub.ptr.lhs.cast109, %sub.ptr.rhs.cast110
  %sub.ptr.div112 = sdiv exact i64 %sub.ptr.sub111, 4
  %mul113 = mul nsw i64 2, %sub.ptr.div112
  %sub114 = sub nsw i64 %mul113, 1
  %84 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx115 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %84, i32 0, i32 2
  %85 = load %struct.regexp*, %struct.regexp** %rx115, align 8
  %offsets116 = getelementptr inbounds %struct.regexp, %struct.regexp* %85, i32 0, i32 7
  %86 = load i32*, i32** %offsets116, align 8
  %arrayidx117 = getelementptr inbounds i32, i32* %86, i64 %sub114
  store i32 %conv107, i32* %arrayidx117, align 4
  br label %if.end.118

if.end.118:                                       ; preds = %if.else.103, %if.then.97
  br label %if.end.119

if.end.119:                                       ; preds = %if.end.118, %if.then.85
  %87 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit120 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %87, i32 0, i32 8
  %88 = load %struct.regnode*, %struct.regnode** %emit120, align 8
  %cmp121 = icmp eq %struct.regnode* %88, @PL_regdummy
  br i1 %cmp121, label %if.end.148, label %if.then.123

if.then.123:                                      ; preds = %if.end.119
  %89 = load %struct.regnode*, %struct.regnode** %place, align 8
  %90 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start124 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %90, i32 0, i32 7
  %91 = load %struct.regnode*, %struct.regnode** %emit_start124, align 8
  %sub.ptr.lhs.cast125 = ptrtoint %struct.regnode* %89 to i64
  %sub.ptr.rhs.cast126 = ptrtoint %struct.regnode* %91 to i64
  %sub.ptr.sub127 = sub i64 %sub.ptr.lhs.cast125, %sub.ptr.rhs.cast126
  %sub.ptr.div128 = sdiv exact i64 %sub.ptr.sub127, 4
  %cmp129 = icmp slt i64 %sub.ptr.div128, 0
  br i1 %cmp129, label %if.then.131, label %if.else.137

if.then.131:                                      ; preds = %if.then.123
  %92 = load %struct.regnode*, %struct.regnode** %place, align 8
  %93 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start132 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %93, i32 0, i32 7
  %94 = load %struct.regnode*, %struct.regnode** %emit_start132, align 8
  %sub.ptr.lhs.cast133 = ptrtoint %struct.regnode* %92 to i64
  %sub.ptr.rhs.cast134 = ptrtoint %struct.regnode* %94 to i64
  %sub.ptr.sub135 = sub i64 %sub.ptr.lhs.cast133, %sub.ptr.rhs.cast134
  %sub.ptr.div136 = sdiv exact i64 %sub.ptr.sub135, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i32 0, i32 0), i64 %sub.ptr.div136)
  br label %if.end.147

if.else.137:                                      ; preds = %if.then.123
  %95 = load %struct.regnode*, %struct.regnode** %place, align 8
  %96 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start138 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %96, i32 0, i32 7
  %97 = load %struct.regnode*, %struct.regnode** %emit_start138, align 8
  %sub.ptr.lhs.cast139 = ptrtoint %struct.regnode* %95 to i64
  %sub.ptr.rhs.cast140 = ptrtoint %struct.regnode* %97 to i64
  %sub.ptr.sub141 = sub i64 %sub.ptr.lhs.cast139, %sub.ptr.rhs.cast140
  %sub.ptr.div142 = sdiv exact i64 %sub.ptr.sub141, 4
  %mul143 = mul nsw i64 2, %sub.ptr.div142
  %98 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx144 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %98, i32 0, i32 2
  %99 = load %struct.regexp*, %struct.regexp** %rx144, align 8
  %offsets145 = getelementptr inbounds %struct.regexp, %struct.regexp* %99, i32 0, i32 7
  %100 = load i32*, i32** %offsets145, align 8
  %arrayidx146 = getelementptr inbounds i32, i32* %100, i64 %mul143
  store i32 1, i32* %arrayidx146, align 4
  br label %if.end.147

if.end.147:                                       ; preds = %if.else.137, %if.then.131
  br label %if.end.148

if.end.148:                                       ; preds = %if.end.147, %if.end.119
  br label %if.end.149

if.end.149:                                       ; preds = %if.end.148, %while.end
  %101 = load %struct.regnode*, %struct.regnode** %place, align 8
  %add.ptr150 = getelementptr inbounds %struct.regnode, %struct.regnode* %101, i64 1
  store %struct.regnode* %add.ptr150, %struct.regnode** %src, align 8
  %102 = load i8, i8* %op.addr, align 1
  %103 = load %struct.regnode*, %struct.regnode** %place, align 8
  %type = getelementptr inbounds %struct.regnode, %struct.regnode* %103, i32 0, i32 1
  store i8 %102, i8* %type, align 1
  %104 = load %struct.regnode*, %struct.regnode** %place, align 8
  %next_off = getelementptr inbounds %struct.regnode, %struct.regnode* %104, i32 0, i32 2
  store i16 0, i16* %next_off, align 2
  %105 = load %struct.regnode*, %struct.regnode** %place, align 8
  %incdec.ptr151 = getelementptr inbounds %struct.regnode, %struct.regnode* %105, i32 1
  store %struct.regnode* %incdec.ptr151, %struct.regnode** %place, align 8
  store %struct.regnode* %105, %struct.regnode** %tmp
  %106 = load %struct.regnode*, %struct.regnode** %tmp
  %107 = load %struct.regnode*, %struct.regnode** %src, align 8
  %108 = bitcast %struct.regnode* %107 to i8*
  %109 = load i32, i32* %offset, align 4
  %conv152 = sext i32 %109 to i64
  %mul153 = mul i64 %conv152, 4
  call void @llvm.memset.p0i8.i64(i8* %108, i8 0, i64 %mul153, i32 1, i1 false)
  br label %return

return:                                           ; preds = %if.end.149, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @S_regoptail(%struct.RExC_state_t* %pRExC_state, %struct.regnode* %p, %struct.regnode* %val) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %p.addr = alloca %struct.regnode*, align 8
  %val.addr = alloca %struct.regnode*, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store %struct.regnode* %p, %struct.regnode** %p.addr, align 8
  store %struct.regnode* %val, %struct.regnode** %val.addr, align 8
  %0 = load %struct.regnode*, %struct.regnode** %p.addr, align 8
  %cmp = icmp eq %struct.regnode* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1, i32 0, i32 8
  %2 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %cmp1 = icmp eq %struct.regnode* %2, @PL_regdummy
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %if.end.16

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct.regnode*, %struct.regnode** %p.addr, align 8
  %type = getelementptr inbounds %struct.regnode, %struct.regnode* %3, i32 0, i32 1
  %4 = load i8, i8* %type, align 1
  %idxprom = zext i8 %4 to i64
  %arrayidx = getelementptr inbounds [62 x i8], [62 x i8]* @PL_regkind, i32 0, i64 %idxprom
  %5 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %5 to i32
  %cmp2 = icmp eq i32 %conv, 31
  br i1 %cmp2, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.end
  %6 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %7 = load %struct.regnode*, %struct.regnode** %p.addr, align 8
  %add.ptr = getelementptr inbounds %struct.regnode, %struct.regnode* %7, i64 1
  %8 = load %struct.regnode*, %struct.regnode** %val.addr, align 8
  call void @S_regtail(%struct.RExC_state_t* %6, %struct.regnode* %add.ptr, %struct.regnode* %8)
  br label %if.end.16

if.else:                                          ; preds = %if.end
  %9 = load %struct.regnode*, %struct.regnode** %p.addr, align 8
  %type5 = getelementptr inbounds %struct.regnode, %struct.regnode* %9, i32 0, i32 1
  %10 = load i8, i8* %type5, align 1
  %idxprom6 = zext i8 %10 to i64
  %arrayidx7 = getelementptr inbounds [62 x i8], [62 x i8]* @PL_regkind, i32 0, i64 %idxprom6
  %11 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %11 to i32
  %cmp9 = icmp eq i32 %conv8, 56
  br i1 %cmp9, label %if.then.11, label %if.else.14

if.then.11:                                       ; preds = %if.else
  %12 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %13 = load %struct.regnode*, %struct.regnode** %p.addr, align 8
  %add.ptr12 = getelementptr inbounds %struct.regnode, %struct.regnode* %13, i64 1
  %add.ptr13 = getelementptr inbounds %struct.regnode, %struct.regnode* %add.ptr12, i64 1
  %14 = load %struct.regnode*, %struct.regnode** %val.addr, align 8
  call void @S_regtail(%struct.RExC_state_t* %12, %struct.regnode* %add.ptr13, %struct.regnode* %14)
  br label %if.end.15

if.else.14:                                       ; preds = %if.else
  br label %if.end.16

if.end.15:                                        ; preds = %if.then.11
  br label %if.end.16

if.end.16:                                        ; preds = %if.then, %if.else.14, %if.end.15, %if.then.4
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct.regnode* @S_regpiece(%struct.RExC_state_t* %pRExC_state, i32* %flagp) #0 {
entry:
  %retval = alloca %struct.regnode*, align 8
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %flagp.addr = alloca i32*, align 8
  %ret = alloca %struct.regnode*, align 8
  %op = alloca i8, align 1
  %next = alloca i8*, align 8
  %flags = alloca i32, align 4
  %origparse = alloca i8*, align 8
  %maxpos = alloca i8*, align 8
  %min = alloca i32, align 4
  %max = alloca i32, align 4
  %parse_start = alloca i8*, align 8
  %offset = alloca i64, align 8
  %w = alloca %struct.regnode*, align 8
  %offset267 = alloca i64, align 8
  %offset381 = alloca i64, align 8
  %offset436 = alloca i64, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i32* %flagp, i32** %flagp.addr, align 8
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %0, i32 0, i32 5
  %1 = load i8*, i8** %parse, align 8
  store i8* %1, i8** %origparse, align 8
  store i32 32767, i32* %max, align 4
  %2 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call = call %struct.regnode* @S_regatom(%struct.RExC_state_t* %2, i32* %flags)
  store %struct.regnode* %call, %struct.regnode** %ret, align 8
  %3 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %cmp = icmp eq %struct.regnode* %3, null
  br i1 %cmp, label %if.then, label %if.end.2

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %flags, align 4
  %and = and i32 %4, 8
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.1, label %if.end

if.then.1:                                        ; preds = %if.then
  %5 = load i32*, i32** %flagp.addr, align 8
  %6 = load i32, i32* %5, align 4
  %or = or i32 %6, 8
  store i32 %or, i32* %5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.1, %if.then
  store %struct.regnode* null, %struct.regnode** %retval
  br label %return

if.end.2:                                         ; preds = %entry
  %7 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse3 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %7, i32 0, i32 5
  %8 = load i8*, i8** %parse3, align 8
  %9 = load i8, i8* %8, align 1
  store i8 %9, i8* %op, align 1
  %10 = load i8, i8* %op, align 1
  %conv = sext i8 %10 to i32
  %cmp4 = icmp eq i32 %conv, 123
  br i1 %cmp4, label %land.lhs.true, label %if.end.286

land.lhs.true:                                    ; preds = %if.end.2
  %11 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse6 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %11, i32 0, i32 5
  %12 = load i8*, i8** %parse6, align 8
  %call7 = call i32 @S_regcurly(i8* %12)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.then.9, label %if.end.286

if.then.9:                                        ; preds = %land.lhs.true
  %13 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse10 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %13, i32 0, i32 5
  %14 = load i8*, i8** %parse10, align 8
  store i8* %14, i8** %parse_start, align 8
  %15 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse11 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %15, i32 0, i32 5
  %16 = load i8*, i8** %parse11, align 8
  %add.ptr = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %add.ptr, i8** %next, align 8
  store i8* null, i8** %maxpos, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.29, %if.then.9
  %17 = load i8*, i8** %next, align 8
  %18 = load i8, i8* %17, align 1
  %conv12 = sext i8 %18 to i32
  %cmp13 = icmp sge i32 %conv12, 48
  br i1 %cmp13, label %land.lhs.true.15, label %lor.rhs

land.lhs.true.15:                                 ; preds = %while.cond
  %19 = load i8*, i8** %next, align 8
  %20 = load i8, i8* %19, align 1
  %conv16 = sext i8 %20 to i32
  %cmp17 = icmp sle i32 %conv16, 57
  br i1 %cmp17, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.lhs.true.15, %while.cond
  %21 = load i8*, i8** %next, align 8
  %22 = load i8, i8* %21, align 1
  %conv19 = sext i8 %22 to i32
  %cmp20 = icmp eq i32 %conv19, 44
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.lhs.true.15
  %23 = phi i1 [ true, %land.lhs.true.15 ], [ %cmp20, %lor.rhs ]
  br i1 %23, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end
  %24 = load i8*, i8** %next, align 8
  %25 = load i8, i8* %24, align 1
  %conv22 = sext i8 %25 to i32
  %cmp23 = icmp eq i32 %conv22, 44
  br i1 %cmp23, label %if.then.25, label %if.end.29

if.then.25:                                       ; preds = %while.body
  %26 = load i8*, i8** %maxpos, align 8
  %tobool26 = icmp ne i8* %26, null
  br i1 %tobool26, label %if.then.27, label %if.else

if.then.27:                                       ; preds = %if.then.25
  br label %while.end

if.else:                                          ; preds = %if.then.25
  %27 = load i8*, i8** %next, align 8
  store i8* %27, i8** %maxpos, align 8
  br label %if.end.28

if.end.28:                                        ; preds = %if.else
  br label %if.end.29

if.end.29:                                        ; preds = %if.end.28, %while.body
  %28 = load i8*, i8** %next, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %28, i32 1
  store i8* %incdec.ptr, i8** %next, align 8
  br label %while.cond

while.end:                                        ; preds = %if.then.27, %lor.end
  %29 = load i8*, i8** %next, align 8
  %30 = load i8, i8* %29, align 1
  %conv30 = sext i8 %30 to i32
  %cmp31 = icmp eq i32 %conv30, 125
  br i1 %cmp31, label %if.then.33, label %if.end.285

if.then.33:                                       ; preds = %while.end
  %31 = load i8*, i8** %maxpos, align 8
  %tobool34 = icmp ne i8* %31, null
  br i1 %tobool34, label %if.end.36, label %if.then.35

if.then.35:                                       ; preds = %if.then.33
  %32 = load i8*, i8** %next, align 8
  store i8* %32, i8** %maxpos, align 8
  br label %if.end.36

if.end.36:                                        ; preds = %if.then.35, %if.then.33
  %33 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse37 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %33, i32 0, i32 5
  %34 = load i8*, i8** %parse37, align 8
  %incdec.ptr38 = getelementptr inbounds i8, i8* %34, i32 1
  store i8* %incdec.ptr38, i8** %parse37, align 8
  %35 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse39 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %35, i32 0, i32 5
  %36 = load i8*, i8** %parse39, align 8
  %call40 = call i32 @atoi(i8* %36)
  store i32 %call40, i32* %min, align 4
  %37 = load i8*, i8** %maxpos, align 8
  %38 = load i8, i8* %37, align 1
  %conv41 = sext i8 %38 to i32
  %cmp42 = icmp eq i32 %conv41, 44
  br i1 %cmp42, label %if.then.44, label %if.else.46

if.then.44:                                       ; preds = %if.end.36
  %39 = load i8*, i8** %maxpos, align 8
  %incdec.ptr45 = getelementptr inbounds i8, i8* %39, i32 1
  store i8* %incdec.ptr45, i8** %maxpos, align 8
  br label %if.end.48

if.else.46:                                       ; preds = %if.end.36
  %40 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse47 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %40, i32 0, i32 5
  %41 = load i8*, i8** %parse47, align 8
  store i8* %41, i8** %maxpos, align 8
  br label %if.end.48

if.end.48:                                        ; preds = %if.else.46, %if.then.44
  %42 = load i8*, i8** %maxpos, align 8
  %call49 = call i32 @atoi(i8* %42)
  store i32 %call49, i32* %max, align 4
  %43 = load i32, i32* %max, align 4
  %tobool50 = icmp ne i32 %43, 0
  br i1 %tobool50, label %if.else.56, label %land.lhs.true.51

land.lhs.true.51:                                 ; preds = %if.end.48
  %44 = load i8*, i8** %maxpos, align 8
  %45 = load i8, i8* %44, align 1
  %conv52 = sext i8 %45 to i32
  %cmp53 = icmp ne i32 %conv52, 48
  br i1 %cmp53, label %if.then.55, label %if.else.56

if.then.55:                                       ; preds = %land.lhs.true.51
  store i32 32767, i32* %max, align 4
  br label %if.end.70

if.else.56:                                       ; preds = %land.lhs.true.51, %if.end.48
  %46 = load i32, i32* %max, align 4
  %cmp57 = icmp sge i32 %46, 32767
  br i1 %cmp57, label %if.then.59, label %if.end.69

if.then.59:                                       ; preds = %if.else.56
  %47 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %47, i32 0, i32 8
  %48 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %cmp60 = icmp eq %struct.regnode* %48, @PL_regdummy
  br i1 %cmp60, label %if.end.63, label %if.then.62

if.then.62:                                       ; preds = %if.then.59
  %49 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %49, i32 0, i32 2
  %50 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %51 = bitcast %struct.regexp* %50 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %51)
  br label %if.end.63

if.end.63:                                        ; preds = %if.then.62, %if.then.59
  %52 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse64 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %52, i32 0, i32 5
  %53 = load i8*, i8** %parse64, align 8
  %54 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %54, i32 0, i32 1
  %55 = load i8*, i8** %precomp, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %53 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %55 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %offset, align 8
  %56 = load i64, i64* %offset, align 8
  %conv65 = trunc i64 %56 to i32
  %57 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp66 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %57, i32 0, i32 1
  %58 = load i8*, i8** %precomp66, align 8
  %59 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp67 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %59, i32 0, i32 1
  %60 = load i8*, i8** %precomp67, align 8
  %61 = load i64, i64* %offset, align 8
  %add.ptr68 = getelementptr inbounds i8, i8* %60, i64 %61
  call void (i8*, i8*, ...) @S_re_croak2(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.16, i32 0, i32 0), i32 32766, i32 %conv65, i8* %58, i8* %add.ptr68)
  br label %if.end.69

if.end.69:                                        ; preds = %if.end.63, %if.else.56
  br label %if.end.70

if.end.70:                                        ; preds = %if.end.69, %if.then.55
  %62 = load i8*, i8** %next, align 8
  %63 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse71 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %63, i32 0, i32 5
  store i8* %62, i8** %parse71, align 8
  %64 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call72 = call i8* @S_nextchar(%struct.RExC_state_t* %64)
  br label %do_curly

do_curly:                                         ; preds = %if.then.340, %if.then.335, %if.then.319, %if.end.70
  %65 = load i32, i32* %flags, align 4
  %and73 = and i32 %65, 2
  %tobool74 = icmp ne i32 %and73, 0
  br i1 %tobool74, label %if.then.75, label %if.else.141

if.then.75:                                       ; preds = %do_curly
  %66 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %66, i32 0, i32 9
  %67 = load i32, i32* %naughty, align 4
  %div = sdiv i32 %67, 2
  %add = add nsw i32 2, %div
  %68 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty76 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %68, i32 0, i32 9
  %69 = load i32, i32* %naughty76, align 4
  %add77 = add nsw i32 %69, %add
  store i32 %add77, i32* %naughty76, align 4
  %70 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %71 = load %struct.regnode*, %struct.regnode** %ret, align 8
  call void @S_reginsert(%struct.RExC_state_t* %70, i8 zeroext 40, %struct.regnode* %71)
  %72 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit78 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %72, i32 0, i32 8
  %73 = load %struct.regnode*, %struct.regnode** %emit78, align 8
  %cmp79 = icmp eq %struct.regnode* %73, @PL_regdummy
  br i1 %cmp79, label %if.end.106, label %if.then.81

if.then.81:                                       ; preds = %if.then.75
  %74 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %75 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %75, i32 0, i32 7
  %76 = load %struct.regnode*, %struct.regnode** %emit_start, align 8
  %sub.ptr.lhs.cast82 = ptrtoint %struct.regnode* %74 to i64
  %sub.ptr.rhs.cast83 = ptrtoint %struct.regnode* %76 to i64
  %sub.ptr.sub84 = sub i64 %sub.ptr.lhs.cast82, %sub.ptr.rhs.cast83
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub84, 4
  %cmp85 = icmp slt i64 %sub.ptr.div, 0
  br i1 %cmp85, label %if.then.87, label %if.else.93

if.then.87:                                       ; preds = %if.then.81
  %77 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %78 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start88 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %78, i32 0, i32 7
  %79 = load %struct.regnode*, %struct.regnode** %emit_start88, align 8
  %sub.ptr.lhs.cast89 = ptrtoint %struct.regnode* %77 to i64
  %sub.ptr.rhs.cast90 = ptrtoint %struct.regnode* %79 to i64
  %sub.ptr.sub91 = sub i64 %sub.ptr.lhs.cast89, %sub.ptr.rhs.cast90
  %sub.ptr.div92 = sdiv exact i64 %sub.ptr.sub91, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.28, i32 0, i32 0), i64 %sub.ptr.div92)
  br label %if.end.105

if.else.93:                                       ; preds = %if.then.81
  %80 = load i8*, i8** %parse_start, align 8
  %add.ptr94 = getelementptr inbounds i8, i8* %80, i64 1
  %81 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %start = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %81, i32 0, i32 3
  %82 = load i8*, i8** %start, align 8
  %sub.ptr.lhs.cast95 = ptrtoint i8* %add.ptr94 to i64
  %sub.ptr.rhs.cast96 = ptrtoint i8* %82 to i64
  %sub.ptr.sub97 = sub i64 %sub.ptr.lhs.cast95, %sub.ptr.rhs.cast96
  %conv98 = trunc i64 %sub.ptr.sub97 to i32
  %83 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %84 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start99 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %84, i32 0, i32 7
  %85 = load %struct.regnode*, %struct.regnode** %emit_start99, align 8
  %sub.ptr.lhs.cast100 = ptrtoint %struct.regnode* %83 to i64
  %sub.ptr.rhs.cast101 = ptrtoint %struct.regnode* %85 to i64
  %sub.ptr.sub102 = sub i64 %sub.ptr.lhs.cast100, %sub.ptr.rhs.cast101
  %sub.ptr.div103 = sdiv exact i64 %sub.ptr.sub102, 4
  %mul = mul nsw i64 2, %sub.ptr.div103
  %sub = sub nsw i64 %mul, 1
  %86 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx104 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %86, i32 0, i32 2
  %87 = load %struct.regexp*, %struct.regexp** %rx104, align 8
  %offsets = getelementptr inbounds %struct.regexp, %struct.regexp* %87, i32 0, i32 7
  %88 = load i32*, i32** %offsets, align 8
  %arrayidx = getelementptr inbounds i32, i32* %88, i64 %sub
  store i32 %conv98, i32* %arrayidx, align 4
  br label %if.end.105

if.end.105:                                       ; preds = %if.else.93, %if.then.87
  br label %if.end.106

if.end.106:                                       ; preds = %if.end.105, %if.then.75
  %89 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit107 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %89, i32 0, i32 8
  %90 = load %struct.regnode*, %struct.regnode** %emit107, align 8
  %cmp108 = icmp eq %struct.regnode* %90, @PL_regdummy
  br i1 %cmp108, label %if.end.140, label %if.then.110

if.then.110:                                      ; preds = %if.end.106
  %91 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %92 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start111 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %92, i32 0, i32 7
  %93 = load %struct.regnode*, %struct.regnode** %emit_start111, align 8
  %sub.ptr.lhs.cast112 = ptrtoint %struct.regnode* %91 to i64
  %sub.ptr.rhs.cast113 = ptrtoint %struct.regnode* %93 to i64
  %sub.ptr.sub114 = sub i64 %sub.ptr.lhs.cast112, %sub.ptr.rhs.cast113
  %sub.ptr.div115 = sdiv exact i64 %sub.ptr.sub114, 4
  %cmp116 = icmp slt i64 %sub.ptr.div115, 0
  br i1 %cmp116, label %if.then.118, label %if.else.124

if.then.118:                                      ; preds = %if.then.110
  %94 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %95 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start119 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %95, i32 0, i32 7
  %96 = load %struct.regnode*, %struct.regnode** %emit_start119, align 8
  %sub.ptr.lhs.cast120 = ptrtoint %struct.regnode* %94 to i64
  %sub.ptr.rhs.cast121 = ptrtoint %struct.regnode* %96 to i64
  %sub.ptr.sub122 = sub i64 %sub.ptr.lhs.cast120, %sub.ptr.rhs.cast121
  %sub.ptr.div123 = sdiv exact i64 %sub.ptr.sub122, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i32 0, i32 0), i64 %sub.ptr.div123)
  br label %if.end.139

if.else.124:                                      ; preds = %if.then.110
  %97 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse125 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %97, i32 0, i32 5
  %98 = load i8*, i8** %parse125, align 8
  %99 = load i8*, i8** %parse_start, align 8
  %sub.ptr.lhs.cast126 = ptrtoint i8* %98 to i64
  %sub.ptr.rhs.cast127 = ptrtoint i8* %99 to i64
  %sub.ptr.sub128 = sub i64 %sub.ptr.lhs.cast126, %sub.ptr.rhs.cast127
  %conv129 = trunc i64 %sub.ptr.sub128 to i32
  %100 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %101 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start130 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %101, i32 0, i32 7
  %102 = load %struct.regnode*, %struct.regnode** %emit_start130, align 8
  %sub.ptr.lhs.cast131 = ptrtoint %struct.regnode* %100 to i64
  %sub.ptr.rhs.cast132 = ptrtoint %struct.regnode* %102 to i64
  %sub.ptr.sub133 = sub i64 %sub.ptr.lhs.cast131, %sub.ptr.rhs.cast132
  %sub.ptr.div134 = sdiv exact i64 %sub.ptr.sub133, 4
  %mul135 = mul nsw i64 2, %sub.ptr.div134
  %103 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx136 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %103, i32 0, i32 2
  %104 = load %struct.regexp*, %struct.regexp** %rx136, align 8
  %offsets137 = getelementptr inbounds %struct.regexp, %struct.regexp* %104, i32 0, i32 7
  %105 = load i32*, i32** %offsets137, align 8
  %arrayidx138 = getelementptr inbounds i32, i32* %105, i64 %mul135
  store i32 %conv129, i32* %arrayidx138, align 4
  br label %if.end.139

if.end.139:                                       ; preds = %if.else.124, %if.then.118
  br label %if.end.140

if.end.140:                                       ; preds = %if.end.139, %if.end.106
  br label %if.end.245

if.else.141:                                      ; preds = %do_curly
  %106 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call142 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %106, i8 zeroext 44)
  store %struct.regnode* %call142, %struct.regnode** %w, align 8
  %107 = load %struct.regnode*, %struct.regnode** %w, align 8
  %flags143 = getelementptr inbounds %struct.regnode, %struct.regnode* %107, i32 0, i32 0
  store i8 0, i8* %flags143, align 1
  %108 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %109 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %110 = load %struct.regnode*, %struct.regnode** %w, align 8
  call void @S_regtail(%struct.RExC_state_t* %108, %struct.regnode* %109, %struct.regnode* %110)
  %111 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit144 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %111, i32 0, i32 8
  %112 = load %struct.regnode*, %struct.regnode** %emit144, align 8
  %cmp145 = icmp eq %struct.regnode* %112, @PL_regdummy
  br i1 %cmp145, label %if.end.150, label %land.lhs.true.147

land.lhs.true.147:                                ; preds = %if.else.141
  %113 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %extralen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %113, i32 0, i32 14
  %114 = load i32, i32* %extralen, align 4
  %tobool148 = icmp ne i32 %114, 0
  br i1 %tobool148, label %if.then.149, label %if.end.150

if.then.149:                                      ; preds = %land.lhs.true.147
  %115 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %116 = load %struct.regnode*, %struct.regnode** %ret, align 8
  call void @S_reginsert(%struct.RExC_state_t* %115, i8 zeroext 55, %struct.regnode* %116)
  %117 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %118 = load %struct.regnode*, %struct.regnode** %ret, align 8
  call void @S_reginsert(%struct.RExC_state_t* %117, i8 zeroext 36, %struct.regnode* %118)
  %119 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %next_off = getelementptr inbounds %struct.regnode, %struct.regnode* %119, i32 0, i32 2
  store i16 3, i16* %next_off, align 2
  br label %if.end.150

if.end.150:                                       ; preds = %if.then.149, %land.lhs.true.147, %if.else.141
  %120 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %121 = load %struct.regnode*, %struct.regnode** %ret, align 8
  call void @S_reginsert(%struct.RExC_state_t* %120, i8 zeroext 43, %struct.regnode* %121)
  %122 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit151 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %122, i32 0, i32 8
  %123 = load %struct.regnode*, %struct.regnode** %emit151, align 8
  %cmp152 = icmp eq %struct.regnode* %123, @PL_regdummy
  br i1 %cmp152, label %if.end.186, label %if.then.154

if.then.154:                                      ; preds = %if.end.150
  %124 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %125 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start155 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %125, i32 0, i32 7
  %126 = load %struct.regnode*, %struct.regnode** %emit_start155, align 8
  %sub.ptr.lhs.cast156 = ptrtoint %struct.regnode* %124 to i64
  %sub.ptr.rhs.cast157 = ptrtoint %struct.regnode* %126 to i64
  %sub.ptr.sub158 = sub i64 %sub.ptr.lhs.cast156, %sub.ptr.rhs.cast157
  %sub.ptr.div159 = sdiv exact i64 %sub.ptr.sub158, 4
  %cmp160 = icmp slt i64 %sub.ptr.div159, 0
  br i1 %cmp160, label %if.then.162, label %if.else.168

if.then.162:                                      ; preds = %if.then.154
  %127 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %128 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start163 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %128, i32 0, i32 7
  %129 = load %struct.regnode*, %struct.regnode** %emit_start163, align 8
  %sub.ptr.lhs.cast164 = ptrtoint %struct.regnode* %127 to i64
  %sub.ptr.rhs.cast165 = ptrtoint %struct.regnode* %129 to i64
  %sub.ptr.sub166 = sub i64 %sub.ptr.lhs.cast164, %sub.ptr.rhs.cast165
  %sub.ptr.div167 = sdiv exact i64 %sub.ptr.sub166, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.28, i32 0, i32 0), i64 %sub.ptr.div167)
  br label %if.end.185

if.else.168:                                      ; preds = %if.then.154
  %130 = load i8*, i8** %parse_start, align 8
  %add.ptr169 = getelementptr inbounds i8, i8* %130, i64 1
  %131 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %start170 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %131, i32 0, i32 3
  %132 = load i8*, i8** %start170, align 8
  %sub.ptr.lhs.cast171 = ptrtoint i8* %add.ptr169 to i64
  %sub.ptr.rhs.cast172 = ptrtoint i8* %132 to i64
  %sub.ptr.sub173 = sub i64 %sub.ptr.lhs.cast171, %sub.ptr.rhs.cast172
  %conv174 = trunc i64 %sub.ptr.sub173 to i32
  %133 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %134 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start175 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %134, i32 0, i32 7
  %135 = load %struct.regnode*, %struct.regnode** %emit_start175, align 8
  %sub.ptr.lhs.cast176 = ptrtoint %struct.regnode* %133 to i64
  %sub.ptr.rhs.cast177 = ptrtoint %struct.regnode* %135 to i64
  %sub.ptr.sub178 = sub i64 %sub.ptr.lhs.cast176, %sub.ptr.rhs.cast177
  %sub.ptr.div179 = sdiv exact i64 %sub.ptr.sub178, 4
  %mul180 = mul nsw i64 2, %sub.ptr.div179
  %sub181 = sub nsw i64 %mul180, 1
  %136 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx182 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %136, i32 0, i32 2
  %137 = load %struct.regexp*, %struct.regexp** %rx182, align 8
  %offsets183 = getelementptr inbounds %struct.regexp, %struct.regexp* %137, i32 0, i32 7
  %138 = load i32*, i32** %offsets183, align 8
  %arrayidx184 = getelementptr inbounds i32, i32* %138, i64 %sub181
  store i32 %conv174, i32* %arrayidx184, align 4
  br label %if.end.185

if.end.185:                                       ; preds = %if.else.168, %if.then.162
  br label %if.end.186

if.end.186:                                       ; preds = %if.end.185, %if.end.150
  %139 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit187 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %139, i32 0, i32 8
  %140 = load %struct.regnode*, %struct.regnode** %emit187, align 8
  %cmp188 = icmp eq %struct.regnode* %140, @PL_regdummy
  br i1 %cmp188, label %if.end.223, label %if.then.190

if.then.190:                                      ; preds = %if.end.186
  %141 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %142 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start191 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %142, i32 0, i32 7
  %143 = load %struct.regnode*, %struct.regnode** %emit_start191, align 8
  %sub.ptr.lhs.cast192 = ptrtoint %struct.regnode* %141 to i64
  %sub.ptr.rhs.cast193 = ptrtoint %struct.regnode* %143 to i64
  %sub.ptr.sub194 = sub i64 %sub.ptr.lhs.cast192, %sub.ptr.rhs.cast193
  %sub.ptr.div195 = sdiv exact i64 %sub.ptr.sub194, 4
  %cmp196 = icmp slt i64 %sub.ptr.div195, 0
  br i1 %cmp196, label %if.then.198, label %if.else.204

if.then.198:                                      ; preds = %if.then.190
  %144 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %145 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start199 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %145, i32 0, i32 7
  %146 = load %struct.regnode*, %struct.regnode** %emit_start199, align 8
  %sub.ptr.lhs.cast200 = ptrtoint %struct.regnode* %144 to i64
  %sub.ptr.rhs.cast201 = ptrtoint %struct.regnode* %146 to i64
  %sub.ptr.sub202 = sub i64 %sub.ptr.lhs.cast200, %sub.ptr.rhs.cast201
  %sub.ptr.div203 = sdiv exact i64 %sub.ptr.sub202, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i32 0, i32 0), i64 %sub.ptr.div203)
  br label %if.end.222

if.else.204:                                      ; preds = %if.then.190
  %147 = load i8, i8* %op, align 1
  %conv205 = sext i8 %147 to i32
  %cmp206 = icmp eq i32 %conv205, 123
  br i1 %cmp206, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else.204
  %148 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse208 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %148, i32 0, i32 5
  %149 = load i8*, i8** %parse208, align 8
  %150 = load i8*, i8** %parse_start, align 8
  %sub.ptr.lhs.cast209 = ptrtoint i8* %149 to i64
  %sub.ptr.rhs.cast210 = ptrtoint i8* %150 to i64
  %sub.ptr.sub211 = sub i64 %sub.ptr.lhs.cast209, %sub.ptr.rhs.cast210
  br label %cond.end

cond.false:                                       ; preds = %if.else.204
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %sub.ptr.sub211, %cond.true ], [ 1, %cond.false ]
  %conv212 = trunc i64 %cond to i32
  %151 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %152 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start213 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %152, i32 0, i32 7
  %153 = load %struct.regnode*, %struct.regnode** %emit_start213, align 8
  %sub.ptr.lhs.cast214 = ptrtoint %struct.regnode* %151 to i64
  %sub.ptr.rhs.cast215 = ptrtoint %struct.regnode* %153 to i64
  %sub.ptr.sub216 = sub i64 %sub.ptr.lhs.cast214, %sub.ptr.rhs.cast215
  %sub.ptr.div217 = sdiv exact i64 %sub.ptr.sub216, 4
  %mul218 = mul nsw i64 2, %sub.ptr.div217
  %154 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx219 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %154, i32 0, i32 2
  %155 = load %struct.regexp*, %struct.regexp** %rx219, align 8
  %offsets220 = getelementptr inbounds %struct.regexp, %struct.regexp* %155, i32 0, i32 7
  %156 = load i32*, i32** %offsets220, align 8
  %arrayidx221 = getelementptr inbounds i32, i32* %156, i64 %mul218
  store i32 %conv212, i32* %arrayidx221, align 4
  br label %if.end.222

if.end.222:                                       ; preds = %cond.end, %if.then.198
  br label %if.end.223

if.end.223:                                       ; preds = %if.end.222, %if.end.186
  %157 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit224 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %157, i32 0, i32 8
  %158 = load %struct.regnode*, %struct.regnode** %emit224, align 8
  %cmp225 = icmp eq %struct.regnode* %158, @PL_regdummy
  br i1 %cmp225, label %if.end.232, label %land.lhs.true.227

land.lhs.true.227:                                ; preds = %if.end.223
  %159 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %extralen228 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %159, i32 0, i32 14
  %160 = load i32, i32* %extralen228, align 4
  %tobool229 = icmp ne i32 %160, 0
  br i1 %tobool229, label %if.then.230, label %if.end.232

if.then.230:                                      ; preds = %land.lhs.true.227
  %161 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %next_off231 = getelementptr inbounds %struct.regnode, %struct.regnode* %161, i32 0, i32 2
  store i16 3, i16* %next_off231, align 2
  br label %if.end.232

if.end.232:                                       ; preds = %if.then.230, %land.lhs.true.227, %if.end.223
  %162 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %163 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %164 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call233 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %164, i8 zeroext 36)
  call void @S_regtail(%struct.RExC_state_t* %162, %struct.regnode* %163, %struct.regnode* %call233)
  %165 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit234 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %165, i32 0, i32 8
  %166 = load %struct.regnode*, %struct.regnode** %emit234, align 8
  %cmp235 = icmp eq %struct.regnode* %166, @PL_regdummy
  br i1 %cmp235, label %if.then.237, label %if.end.240

if.then.237:                                      ; preds = %if.end.232
  %167 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %whilem_seen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %167, i32 0, i32 6
  %168 = load i32, i32* %whilem_seen, align 4
  %inc = add nsw i32 %168, 1
  store i32 %inc, i32* %whilem_seen, align 4
  %169 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %extralen238 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %169, i32 0, i32 14
  %170 = load i32, i32* %extralen238, align 4
  %add239 = add nsw i32 %170, 3
  store i32 %add239, i32* %extralen238, align 4
  br label %if.end.240

if.end.240:                                       ; preds = %if.then.237, %if.end.232
  %171 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty241 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %171, i32 0, i32 9
  %172 = load i32, i32* %naughty241, align 4
  %add242 = add nsw i32 4, %172
  %173 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty243 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %173, i32 0, i32 9
  %174 = load i32, i32* %naughty243, align 4
  %add244 = add nsw i32 %174, %add242
  store i32 %add244, i32* %naughty243, align 4
  br label %if.end.245

if.end.245:                                       ; preds = %if.end.240, %if.end.140
  %175 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags246 = getelementptr inbounds %struct.regnode, %struct.regnode* %175, i32 0, i32 0
  store i8 0, i8* %flags246, align 1
  %176 = load i32, i32* %min, align 4
  %cmp247 = icmp sgt i32 %176, 0
  br i1 %cmp247, label %if.then.249, label %if.end.250

if.then.249:                                      ; preds = %if.end.245
  %177 = load i32*, i32** %flagp.addr, align 8
  store i32 0, i32* %177, align 4
  br label %if.end.250

if.end.250:                                       ; preds = %if.then.249, %if.end.245
  %178 = load i32, i32* %max, align 4
  %cmp251 = icmp sgt i32 %178, 0
  br i1 %cmp251, label %if.then.253, label %if.end.255

if.then.253:                                      ; preds = %if.end.250
  %179 = load i32*, i32** %flagp.addr, align 8
  %180 = load i32, i32* %179, align 4
  %or254 = or i32 %180, 1
  store i32 %or254, i32* %179, align 4
  br label %if.end.255

if.end.255:                                       ; preds = %if.then.253, %if.end.250
  %181 = load i32, i32* %max, align 4
  %tobool256 = icmp ne i32 %181, 0
  br i1 %tobool256, label %land.lhs.true.257, label %if.end.277

land.lhs.true.257:                                ; preds = %if.end.255
  %182 = load i32, i32* %max, align 4
  %183 = load i32, i32* %min, align 4
  %cmp258 = icmp slt i32 %182, %183
  br i1 %cmp258, label %if.then.260, label %if.end.277

if.then.260:                                      ; preds = %land.lhs.true.257
  %184 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit261 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %184, i32 0, i32 8
  %185 = load %struct.regnode*, %struct.regnode** %emit261, align 8
  %cmp262 = icmp eq %struct.regnode* %185, @PL_regdummy
  br i1 %cmp262, label %if.end.266, label %if.then.264

if.then.264:                                      ; preds = %if.then.260
  %186 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx265 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %186, i32 0, i32 2
  %187 = load %struct.regexp*, %struct.regexp** %rx265, align 8
  %188 = bitcast %struct.regexp* %187 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %188)
  br label %if.end.266

if.end.266:                                       ; preds = %if.then.264, %if.then.260
  %189 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse268 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %189, i32 0, i32 5
  %190 = load i8*, i8** %parse268, align 8
  %191 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp269 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %191, i32 0, i32 1
  %192 = load i8*, i8** %precomp269, align 8
  %sub.ptr.lhs.cast270 = ptrtoint i8* %190 to i64
  %sub.ptr.rhs.cast271 = ptrtoint i8* %192 to i64
  %sub.ptr.sub272 = sub i64 %sub.ptr.lhs.cast270, %sub.ptr.rhs.cast271
  store i64 %sub.ptr.sub272, i64* %offset267, align 8
  %193 = load i64, i64* %offset267, align 8
  %conv273 = trunc i64 %193 to i32
  %194 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp274 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %194, i32 0, i32 1
  %195 = load i8*, i8** %precomp274, align 8
  %196 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp275 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %196, i32 0, i32 1
  %197 = load i8*, i8** %precomp275, align 8
  %198 = load i64, i64* %offset267, align 8
  %add.ptr276 = getelementptr inbounds i8, i8* %197, i64 %198
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.44, i32 0, i32 0), i32 %conv273, i8* %195, i8* %add.ptr276)
  br label %if.end.277

if.end.277:                                       ; preds = %if.end.266, %land.lhs.true.257, %if.end.255
  %199 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit278 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %199, i32 0, i32 8
  %200 = load %struct.regnode*, %struct.regnode** %emit278, align 8
  %cmp279 = icmp eq %struct.regnode* %200, @PL_regdummy
  br i1 %cmp279, label %if.end.284, label %if.then.281

if.then.281:                                      ; preds = %if.end.277
  %201 = load i32, i32* %min, align 4
  %conv282 = trunc i32 %201 to i16
  %202 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %203 = bitcast %struct.regnode* %202 to %struct.regnode_2*
  %arg1 = getelementptr inbounds %struct.regnode_2, %struct.regnode_2* %203, i32 0, i32 3
  store i16 %conv282, i16* %arg1, align 2
  %204 = load i32, i32* %max, align 4
  %conv283 = trunc i32 %204 to i16
  %205 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %206 = bitcast %struct.regnode* %205 to %struct.regnode_2*
  %arg2 = getelementptr inbounds %struct.regnode_2, %struct.regnode_2* %206, i32 0, i32 4
  store i16 %conv283, i16* %arg2, align 2
  br label %if.end.284

if.end.284:                                       ; preds = %if.then.281, %if.end.277
  br label %nest_check

if.end.285:                                       ; preds = %while.end
  br label %if.end.286

if.end.286:                                       ; preds = %if.end.285, %land.lhs.true, %if.end.2
  %207 = load i8, i8* %op, align 1
  %conv287 = sext i8 %207 to i32
  %cmp288 = icmp eq i32 %conv287, 42
  br i1 %cmp288, label %if.end.298, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.286
  %208 = load i8, i8* %op, align 1
  %conv290 = sext i8 %208 to i32
  %cmp291 = icmp eq i32 %conv290, 43
  br i1 %cmp291, label %if.end.298, label %lor.lhs.false.293

lor.lhs.false.293:                                ; preds = %lor.lhs.false
  %209 = load i8, i8* %op, align 1
  %conv294 = sext i8 %209 to i32
  %cmp295 = icmp eq i32 %conv294, 63
  br i1 %cmp295, label %if.end.298, label %if.then.297

if.then.297:                                      ; preds = %lor.lhs.false.293
  %210 = load i32, i32* %flags, align 4
  %211 = load i32*, i32** %flagp.addr, align 8
  store i32 %210, i32* %211, align 4
  %212 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %212, %struct.regnode** %retval
  br label %return

if.end.298:                                       ; preds = %lor.lhs.false.293, %lor.lhs.false, %if.end.286
  %213 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse299 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %213, i32 0, i32 5
  %214 = load i8*, i8** %parse299, align 8
  store i8* %214, i8** %parse_start, align 8
  %215 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call300 = call i8* @S_nextchar(%struct.RExC_state_t* %215)
  %216 = load i8, i8* %op, align 1
  %conv301 = sext i8 %216 to i32
  %cmp302 = icmp ne i32 %conv301, 43
  %cond304 = select i1 %cmp302, i32 5, i32 1
  %217 = load i32*, i32** %flagp.addr, align 8
  store i32 %cond304, i32* %217, align 4
  %218 = load i8, i8* %op, align 1
  %conv305 = sext i8 %218 to i32
  %cmp306 = icmp eq i32 %conv305, 42
  br i1 %cmp306, label %land.lhs.true.308, label %if.else.315

land.lhs.true.308:                                ; preds = %if.end.298
  %219 = load i32, i32* %flags, align 4
  %and309 = and i32 %219, 2
  %tobool310 = icmp ne i32 %and309, 0
  br i1 %tobool310, label %if.then.311, label %if.else.315

if.then.311:                                      ; preds = %land.lhs.true.308
  %220 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %221 = load %struct.regnode*, %struct.regnode** %ret, align 8
  call void @S_reginsert(%struct.RExC_state_t* %220, i8 zeroext 38, %struct.regnode* %221)
  %222 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags312 = getelementptr inbounds %struct.regnode, %struct.regnode* %222, i32 0, i32 0
  store i8 0, i8* %flags312, align 1
  %223 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty313 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %223, i32 0, i32 9
  %224 = load i32, i32* %naughty313, align 4
  %add314 = add nsw i32 %224, 4
  store i32 %add314, i32* %naughty313, align 4
  br label %if.end.345

if.else.315:                                      ; preds = %land.lhs.true.308, %if.end.298
  %225 = load i8, i8* %op, align 1
  %conv316 = sext i8 %225 to i32
  %cmp317 = icmp eq i32 %conv316, 42
  br i1 %cmp317, label %if.then.319, label %if.else.320

if.then.319:                                      ; preds = %if.else.315
  store i32 0, i32* %min, align 4
  br label %do_curly

if.else.320:                                      ; preds = %if.else.315
  %226 = load i8, i8* %op, align 1
  %conv321 = sext i8 %226 to i32
  %cmp322 = icmp eq i32 %conv321, 43
  br i1 %cmp322, label %land.lhs.true.324, label %if.else.331

land.lhs.true.324:                                ; preds = %if.else.320
  %227 = load i32, i32* %flags, align 4
  %and325 = and i32 %227, 2
  %tobool326 = icmp ne i32 %and325, 0
  br i1 %tobool326, label %if.then.327, label %if.else.331

if.then.327:                                      ; preds = %land.lhs.true.324
  %228 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %229 = load %struct.regnode*, %struct.regnode** %ret, align 8
  call void @S_reginsert(%struct.RExC_state_t* %228, i8 zeroext 39, %struct.regnode* %229)
  %230 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags328 = getelementptr inbounds %struct.regnode, %struct.regnode* %230, i32 0, i32 0
  store i8 0, i8* %flags328, align 1
  %231 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty329 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %231, i32 0, i32 9
  %232 = load i32, i32* %naughty329, align 4
  %add330 = add nsw i32 %232, 3
  store i32 %add330, i32* %naughty329, align 4
  br label %if.end.343

if.else.331:                                      ; preds = %land.lhs.true.324, %if.else.320
  %233 = load i8, i8* %op, align 1
  %conv332 = sext i8 %233 to i32
  %cmp333 = icmp eq i32 %conv332, 43
  br i1 %cmp333, label %if.then.335, label %if.else.336

if.then.335:                                      ; preds = %if.else.331
  store i32 1, i32* %min, align 4
  br label %do_curly

if.else.336:                                      ; preds = %if.else.331
  %234 = load i8, i8* %op, align 1
  %conv337 = sext i8 %234 to i32
  %cmp338 = icmp eq i32 %conv337, 63
  br i1 %cmp338, label %if.then.340, label %if.end.341

if.then.340:                                      ; preds = %if.else.336
  store i32 0, i32* %min, align 4
  store i32 1, i32* %max, align 4
  br label %do_curly

if.end.341:                                       ; preds = %if.else.336
  br label %if.end.342

if.end.342:                                       ; preds = %if.end.341
  br label %if.end.343

if.end.343:                                       ; preds = %if.end.342, %if.then.327
  br label %if.end.344

if.end.344:                                       ; preds = %if.end.343
  br label %if.end.345

if.end.345:                                       ; preds = %if.end.344, %if.then.311
  br label %nest_check

nest_check:                                       ; preds = %if.end.345, %if.end.284
  %235 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %235, i32 0, i32 14
  %236 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp346 = icmp ne %struct.sv* %236, null
  br i1 %cmp346, label %land.lhs.true.348, label %lor.lhs.false.362

land.lhs.true.348:                                ; preds = %nest_check
  %237 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings349 = getelementptr inbounds %struct.cop, %struct.cop* %237, i32 0, i32 14
  %238 = load %struct.sv*, %struct.sv** %cop_warnings349, align 8
  %cmp350 = icmp ne %struct.sv* %238, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp350, label %land.lhs.true.352, label %lor.lhs.false.362

land.lhs.true.352:                                ; preds = %land.lhs.true.348
  %239 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings353 = getelementptr inbounds %struct.cop, %struct.cop* %239, i32 0, i32 14
  %240 = load %struct.sv*, %struct.sv** %cop_warnings353, align 8
  %cmp354 = icmp eq %struct.sv* %240, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp354, label %land.lhs.true.370, label %lor.lhs.false.356

lor.lhs.false.356:                                ; preds = %land.lhs.true.352
  %241 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings357 = getelementptr inbounds %struct.cop, %struct.cop* %241, i32 0, i32 14
  %242 = load %struct.sv*, %struct.sv** %cop_warnings357, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %242, i32 0, i32 0
  %243 = load i8*, i8** %sv_any, align 8
  %244 = bitcast i8* %243 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %244, i32 0, i32 0
  %245 = load i8*, i8** %xpv_pv, align 8
  %arrayidx358 = getelementptr inbounds i8, i8* %245, i64 5
  %246 = load i8, i8* %arrayidx358, align 1
  %conv359 = sext i8 %246 to i32
  %and360 = and i32 %conv359, 1
  %tobool361 = icmp ne i32 %and360, 0
  br i1 %tobool361, label %land.lhs.true.370, label %lor.lhs.false.362

lor.lhs.false.362:                                ; preds = %lor.lhs.false.356, %land.lhs.true.348, %nest_check
  %247 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings363 = getelementptr inbounds %struct.cop, %struct.cop* %247, i32 0, i32 14
  %248 = load %struct.sv*, %struct.sv** %cop_warnings363, align 8
  %cmp364 = icmp eq %struct.sv* %248, null
  br i1 %cmp364, label %land.lhs.true.366, label %if.end.395

land.lhs.true.366:                                ; preds = %lor.lhs.false.362
  %249 = load i8, i8* @PL_dowarn, align 1
  %conv367 = zext i8 %249 to i32
  %and368 = and i32 %conv367, 1
  %tobool369 = icmp ne i32 %and368, 0
  br i1 %tobool369, label %land.lhs.true.370, label %if.end.395

land.lhs.true.370:                                ; preds = %land.lhs.true.366, %lor.lhs.false.356, %land.lhs.true.352
  %250 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit371 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %250, i32 0, i32 8
  %251 = load %struct.regnode*, %struct.regnode** %emit371, align 8
  %cmp372 = icmp eq %struct.regnode* %251, @PL_regdummy
  br i1 %cmp372, label %if.end.395, label %land.lhs.true.374

land.lhs.true.374:                                ; preds = %land.lhs.true.370
  %252 = load i32, i32* %flags, align 4
  %and375 = and i32 %252, 1
  %tobool376 = icmp ne i32 %and375, 0
  br i1 %tobool376, label %if.end.395, label %land.lhs.true.377

land.lhs.true.377:                                ; preds = %land.lhs.true.374
  %253 = load i32, i32* %max, align 4
  %cmp378 = icmp sgt i32 %253, 10922
  br i1 %cmp378, label %if.then.380, label %if.end.395

if.then.380:                                      ; preds = %land.lhs.true.377
  %254 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse382 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %254, i32 0, i32 5
  %255 = load i8*, i8** %parse382, align 8
  %256 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp383 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %256, i32 0, i32 1
  %257 = load i8*, i8** %precomp383, align 8
  %sub.ptr.lhs.cast384 = ptrtoint i8* %255 to i64
  %sub.ptr.rhs.cast385 = ptrtoint i8* %257 to i64
  %sub.ptr.sub386 = sub i64 %sub.ptr.lhs.cast384, %sub.ptr.rhs.cast385
  store i64 %sub.ptr.sub386, i64* %offset381, align 8
  %258 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse387 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %258, i32 0, i32 5
  %259 = load i8*, i8** %parse387, align 8
  %260 = load i8*, i8** %origparse, align 8
  %sub.ptr.lhs.cast388 = ptrtoint i8* %259 to i64
  %sub.ptr.rhs.cast389 = ptrtoint i8* %260 to i64
  %sub.ptr.sub390 = sub i64 %sub.ptr.lhs.cast388, %sub.ptr.rhs.cast389
  %261 = load i8*, i8** %origparse, align 8
  %262 = load i64, i64* %offset381, align 8
  %conv391 = trunc i64 %262 to i32
  %263 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp392 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %263, i32 0, i32 1
  %264 = load i8*, i8** %precomp392, align 8
  %265 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp393 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %265, i32 0, i32 1
  %266 = load i8*, i8** %precomp393, align 8
  %267 = load i64, i64* %offset381, align 8
  %add.ptr394 = getelementptr inbounds i8, i8* %266, i64 %267
  call void (i32, i8*, ...) @Perl_warner(i32 20, i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.45, i32 0, i32 0), i64 %sub.ptr.sub390, i8* %261, i32 %conv391, i8* %264, i8* %add.ptr394)
  br label %if.end.395

if.end.395:                                       ; preds = %if.then.380, %land.lhs.true.377, %land.lhs.true.374, %land.lhs.true.370, %land.lhs.true.366, %lor.lhs.false.362
  %268 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse396 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %268, i32 0, i32 5
  %269 = load i8*, i8** %parse396, align 8
  %270 = load i8, i8* %269, align 1
  %conv397 = sext i8 %270 to i32
  %cmp398 = icmp eq i32 %conv397, 63
  br i1 %cmp398, label %if.then.400, label %if.end.403

if.then.400:                                      ; preds = %if.end.395
  %271 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call401 = call i8* @S_nextchar(%struct.RExC_state_t* %271)
  %272 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %273 = load %struct.regnode*, %struct.regnode** %ret, align 8
  call void @S_reginsert(%struct.RExC_state_t* %272, i8 zeroext 58, %struct.regnode* %273)
  %274 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %275 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %276 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %add.ptr402 = getelementptr inbounds %struct.regnode, %struct.regnode* %276, i64 1
  call void @S_regtail(%struct.RExC_state_t* %274, %struct.regnode* %275, %struct.regnode* %add.ptr402)
  br label %if.end.403

if.end.403:                                       ; preds = %if.then.400, %if.end.395
  %277 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse404 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %277, i32 0, i32 5
  %278 = load i8*, i8** %parse404, align 8
  %279 = load i8, i8* %278, align 1
  %conv405 = sext i8 %279 to i32
  %cmp406 = icmp eq i32 %conv405, 42
  br i1 %cmp406, label %if.then.427, label %lor.lhs.false.408

lor.lhs.false.408:                                ; preds = %if.end.403
  %280 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse409 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %280, i32 0, i32 5
  %281 = load i8*, i8** %parse409, align 8
  %282 = load i8, i8* %281, align 1
  %conv410 = sext i8 %282 to i32
  %cmp411 = icmp eq i32 %conv410, 43
  br i1 %cmp411, label %if.then.427, label %lor.lhs.false.413

lor.lhs.false.413:                                ; preds = %lor.lhs.false.408
  %283 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse414 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %283, i32 0, i32 5
  %284 = load i8*, i8** %parse414, align 8
  %285 = load i8, i8* %284, align 1
  %conv415 = sext i8 %285 to i32
  %cmp416 = icmp eq i32 %conv415, 63
  br i1 %cmp416, label %if.then.427, label %lor.lhs.false.418

lor.lhs.false.418:                                ; preds = %lor.lhs.false.413
  %286 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse419 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %286, i32 0, i32 5
  %287 = load i8*, i8** %parse419, align 8
  %288 = load i8, i8* %287, align 1
  %conv420 = sext i8 %288 to i32
  %cmp421 = icmp eq i32 %conv420, 123
  br i1 %cmp421, label %land.lhs.true.423, label %if.end.446

land.lhs.true.423:                                ; preds = %lor.lhs.false.418
  %289 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse424 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %289, i32 0, i32 5
  %290 = load i8*, i8** %parse424, align 8
  %call425 = call i32 @S_regcurly(i8* %290)
  %tobool426 = icmp ne i32 %call425, 0
  br i1 %tobool426, label %if.then.427, label %if.end.446

if.then.427:                                      ; preds = %land.lhs.true.423, %lor.lhs.false.413, %lor.lhs.false.408, %if.end.403
  %291 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse428 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %291, i32 0, i32 5
  %292 = load i8*, i8** %parse428, align 8
  %incdec.ptr429 = getelementptr inbounds i8, i8* %292, i32 1
  store i8* %incdec.ptr429, i8** %parse428, align 8
  %293 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit430 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %293, i32 0, i32 8
  %294 = load %struct.regnode*, %struct.regnode** %emit430, align 8
  %cmp431 = icmp eq %struct.regnode* %294, @PL_regdummy
  br i1 %cmp431, label %if.end.435, label %if.then.433

if.then.433:                                      ; preds = %if.then.427
  %295 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx434 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %295, i32 0, i32 2
  %296 = load %struct.regexp*, %struct.regexp** %rx434, align 8
  %297 = bitcast %struct.regexp* %296 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %297)
  br label %if.end.435

if.end.435:                                       ; preds = %if.then.433, %if.then.427
  %298 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse437 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %298, i32 0, i32 5
  %299 = load i8*, i8** %parse437, align 8
  %300 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp438 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %300, i32 0, i32 1
  %301 = load i8*, i8** %precomp438, align 8
  %sub.ptr.lhs.cast439 = ptrtoint i8* %299 to i64
  %sub.ptr.rhs.cast440 = ptrtoint i8* %301 to i64
  %sub.ptr.sub441 = sub i64 %sub.ptr.lhs.cast439, %sub.ptr.rhs.cast440
  store i64 %sub.ptr.sub441, i64* %offset436, align 8
  %302 = load i64, i64* %offset436, align 8
  %conv442 = trunc i64 %302 to i32
  %303 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp443 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %303, i32 0, i32 1
  %304 = load i8*, i8** %precomp443, align 8
  %305 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp444 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %305, i32 0, i32 1
  %306 = load i8*, i8** %precomp444, align 8
  %307 = load i64, i64* %offset436, align 8
  %add.ptr445 = getelementptr inbounds i8, i8* %306, i64 %307
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.46, i32 0, i32 0), i32 %conv442, i8* %304, i8* %add.ptr445)
  br label %if.end.446

if.end.446:                                       ; preds = %if.end.435, %land.lhs.true.423, %lor.lhs.false.418
  %308 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %308, %struct.regnode** %retval
  br label %return

return:                                           ; preds = %if.end.446, %if.then.297, %if.end
  %309 = load %struct.regnode*, %struct.regnode** %retval
  ret %struct.regnode* %309
}

; Function Attrs: nounwind uwtable
define internal %struct.regnode* @S_regatom(%struct.RExC_state_t* %pRExC_state, i32* %flagp) #0 {
entry:
  %retval = alloca %struct.regnode*, align 8
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %flagp.addr = alloca i32*, align 8
  %ret = alloca %struct.regnode*, align 8
  %flags = alloca i32, align 4
  %parse_start = alloca i8*, align 8
  %oregcomp_parse = alloca i8*, align 8
  %offset = alloca i64, align 8
  %offset212 = alloca i64, align 8
  %offset239 = alloca i64, align 8
  %oldregxend = alloca i8*, align 8
  %parse_start740 = alloca i8*, align 8
  %c = alloca i8, align 1
  %offset765 = alloca i64, align 8
  %num = alloca i32, align 4
  %parse_start876 = alloca i8*, align 8
  %offset903 = alloca i64, align 8
  %ellipses = alloca i8*, align 8
  %len = alloca i64, align 8
  %len1054 = alloca i64, align 8
  %ender = alloca i64, align 8
  %p = alloca i8*, align 8
  %oldp = alloca i8*, align 8
  %s = alloca i8*, align 8
  %numlen = alloca i64, align 8
  %foldlen = alloca i64, align 8
  %tmpbuf = alloca [7 x i8], align 1
  %foldbuf = alloca i8*, align 8
  %e = alloca i8*, align 8
  %offset1126 = alloca i64, align 8
  %flags1137 = alloca i32, align 4
  %flags1151 = alloca i32, align 4
  %flags1189 = alloca i32, align 4
  %ellipses1200 = alloca i8*, align 8
  %len1201 = alloca i64, align 8
  %offset1266 = alloca i64, align 8
  %unilen = alloca i64, align 8
  %unilen1397 = alloca i64, align 8
  %iv = alloca i64, align 8
  %offset1491 = alloca i64, align 8
  %oldlen = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  %s1559 = alloca i8*, align 8
  %newlen = alloca i64, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i32* %flagp, i32** %flagp.addr, align 8
  store %struct.regnode* null, %struct.regnode** %ret, align 8
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %0, i32 0, i32 5
  %1 = load i8*, i8** %parse, align 8
  store i8* %1, i8** %parse_start, align 8
  %2 = load i32*, i32** %flagp.addr, align 8
  store i32 0, i32* %2, align 4
  br label %tryagain

tryagain:                                         ; preds = %if.then.1050, %if.end.195, %entry
  %3 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %3, i32 0, i32 5
  %4 = load i8*, i8** %parse1, align 8
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  switch i32 %conv, label %sw.default.1053 [
    i32 94, label %sw.bb
    i32 36, label %sw.bb.30
    i32 46, label %sw.bb.82
    i32 91, label %sw.bb.122
    i32 40, label %sw.bb.181
    i32 124, label %sw.bb.200
    i32 41, label %sw.bb.200
    i32 123, label %sw.bb.222
    i32 63, label %sw.bb.230
    i32 43, label %sw.bb.230
    i32 42, label %sw.bb.230
    i32 92, label %sw.bb.249
    i32 35, label %sw.bb.1026
  ]

sw.bb:                                            ; preds = %tryagain
  %6 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen_zerolen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %6, i32 0, i32 15
  %7 = load i32, i32* %seen_zerolen, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %seen_zerolen, align 4
  %8 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call = call i8* @S_nextchar(%struct.RExC_state_t* %8)
  %9 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %9, i32 0, i32 0
  %10 = load i32, i32* %flags2, align 4
  %and = and i32 %10, 4096
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %sw.bb
  %11 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call3 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %11, i8 zeroext 3)
  store %struct.regnode* %call3, %struct.regnode** %ret, align 8
  br label %if.end.11

if.else:                                          ; preds = %sw.bb
  %12 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags4 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %12, i32 0, i32 0
  %13 = load i32, i32* %flags4, align 4
  %and5 = and i32 %13, 8192
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %if.then.7, label %if.else.9

if.then.7:                                        ; preds = %if.else
  %14 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call8 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %14, i8 zeroext 4)
  store %struct.regnode* %call8, %struct.regnode** %ret, align 8
  br label %if.end

if.else.9:                                        ; preds = %if.else
  %15 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call10 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %15, i8 zeroext 2)
  store %struct.regnode* %call10, %struct.regnode** %ret, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.9, %if.then.7
  br label %if.end.11

if.end.11:                                        ; preds = %if.end, %if.then
  %16 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %16, i32 0, i32 8
  %17 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %cmp = icmp eq %struct.regnode* %17, @PL_regdummy
  br i1 %cmp, label %if.end.29, label %if.then.13

if.then.13:                                       ; preds = %if.end.11
  %18 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %19 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %19, i32 0, i32 7
  %20 = load %struct.regnode*, %struct.regnode** %emit_start, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.regnode* %18 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.regnode* %20 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 4
  %cmp14 = icmp slt i64 %sub.ptr.div, 0
  br i1 %cmp14, label %if.then.16, label %if.else.22

if.then.16:                                       ; preds = %if.then.13
  %21 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %22 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start17 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %22, i32 0, i32 7
  %23 = load %struct.regnode*, %struct.regnode** %emit_start17, align 8
  %sub.ptr.lhs.cast18 = ptrtoint %struct.regnode* %21 to i64
  %sub.ptr.rhs.cast19 = ptrtoint %struct.regnode* %23 to i64
  %sub.ptr.sub20 = sub i64 %sub.ptr.lhs.cast18, %sub.ptr.rhs.cast19
  %sub.ptr.div21 = sdiv exact i64 %sub.ptr.sub20, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i32 0, i32 0), i64 %sub.ptr.div21)
  br label %if.end.28

if.else.22:                                       ; preds = %if.then.13
  %24 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %25 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start23 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %25, i32 0, i32 7
  %26 = load %struct.regnode*, %struct.regnode** %emit_start23, align 8
  %sub.ptr.lhs.cast24 = ptrtoint %struct.regnode* %24 to i64
  %sub.ptr.rhs.cast25 = ptrtoint %struct.regnode* %26 to i64
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast24, %sub.ptr.rhs.cast25
  %sub.ptr.div27 = sdiv exact i64 %sub.ptr.sub26, 4
  %mul = mul nsw i64 2, %sub.ptr.div27
  %27 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %27, i32 0, i32 2
  %28 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %offsets = getelementptr inbounds %struct.regexp, %struct.regexp* %28, i32 0, i32 7
  %29 = load i32*, i32** %offsets, align 8
  %arrayidx = getelementptr inbounds i32, i32* %29, i64 %mul
  store i32 1, i32* %arrayidx, align 4
  br label %if.end.28

if.end.28:                                        ; preds = %if.else.22, %if.then.16
  br label %if.end.29

if.end.29:                                        ; preds = %if.end.28, %if.end.11
  br label %sw.epilog.1537

sw.bb.30:                                         ; preds = %tryagain
  %30 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call31 = call i8* @S_nextchar(%struct.RExC_state_t* %30)
  %31 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse32 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %31, i32 0, i32 5
  %32 = load i8*, i8** %parse32, align 8
  %33 = load i8, i8* %32, align 1
  %tobool33 = icmp ne i8 %33, 0
  br i1 %tobool33, label %if.then.34, label %if.end.37

if.then.34:                                       ; preds = %sw.bb.30
  %34 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen_zerolen35 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %34, i32 0, i32 15
  %35 = load i32, i32* %seen_zerolen35, align 4
  %inc36 = add nsw i32 %35, 1
  store i32 %inc36, i32* %seen_zerolen35, align 4
  br label %if.end.37

if.end.37:                                        ; preds = %if.then.34, %sw.bb.30
  %36 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags38 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %36, i32 0, i32 0
  %37 = load i32, i32* %flags38, align 4
  %and39 = and i32 %37, 4096
  %tobool40 = icmp ne i32 %and39, 0
  br i1 %tobool40, label %if.then.41, label %if.else.43

if.then.41:                                       ; preds = %if.end.37
  %38 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call42 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %38, i8 zeroext 7)
  store %struct.regnode* %call42, %struct.regnode** %ret, align 8
  br label %if.end.52

if.else.43:                                       ; preds = %if.end.37
  %39 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags44 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %39, i32 0, i32 0
  %40 = load i32, i32* %flags44, align 4
  %and45 = and i32 %40, 8192
  %tobool46 = icmp ne i32 %and45, 0
  br i1 %tobool46, label %if.then.47, label %if.else.49

if.then.47:                                       ; preds = %if.else.43
  %41 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call48 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %41, i8 zeroext 8)
  store %struct.regnode* %call48, %struct.regnode** %ret, align 8
  br label %if.end.51

if.else.49:                                       ; preds = %if.else.43
  %42 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call50 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %42, i8 zeroext 6)
  store %struct.regnode* %call50, %struct.regnode** %ret, align 8
  br label %if.end.51

if.end.51:                                        ; preds = %if.else.49, %if.then.47
  br label %if.end.52

if.end.52:                                        ; preds = %if.end.51, %if.then.41
  %43 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit53 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %43, i32 0, i32 8
  %44 = load %struct.regnode*, %struct.regnode** %emit53, align 8
  %cmp54 = icmp eq %struct.regnode* %44, @PL_regdummy
  br i1 %cmp54, label %if.end.81, label %if.then.56

if.then.56:                                       ; preds = %if.end.52
  %45 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %46 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start57 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %46, i32 0, i32 7
  %47 = load %struct.regnode*, %struct.regnode** %emit_start57, align 8
  %sub.ptr.lhs.cast58 = ptrtoint %struct.regnode* %45 to i64
  %sub.ptr.rhs.cast59 = ptrtoint %struct.regnode* %47 to i64
  %sub.ptr.sub60 = sub i64 %sub.ptr.lhs.cast58, %sub.ptr.rhs.cast59
  %sub.ptr.div61 = sdiv exact i64 %sub.ptr.sub60, 4
  %cmp62 = icmp slt i64 %sub.ptr.div61, 0
  br i1 %cmp62, label %if.then.64, label %if.else.70

if.then.64:                                       ; preds = %if.then.56
  %48 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %49 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start65 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %49, i32 0, i32 7
  %50 = load %struct.regnode*, %struct.regnode** %emit_start65, align 8
  %sub.ptr.lhs.cast66 = ptrtoint %struct.regnode* %48 to i64
  %sub.ptr.rhs.cast67 = ptrtoint %struct.regnode* %50 to i64
  %sub.ptr.sub68 = sub i64 %sub.ptr.lhs.cast66, %sub.ptr.rhs.cast67
  %sub.ptr.div69 = sdiv exact i64 %sub.ptr.sub68, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i32 0, i32 0), i64 %sub.ptr.div69)
  br label %if.end.80

if.else.70:                                       ; preds = %if.then.56
  %51 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %52 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start71 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %52, i32 0, i32 7
  %53 = load %struct.regnode*, %struct.regnode** %emit_start71, align 8
  %sub.ptr.lhs.cast72 = ptrtoint %struct.regnode* %51 to i64
  %sub.ptr.rhs.cast73 = ptrtoint %struct.regnode* %53 to i64
  %sub.ptr.sub74 = sub i64 %sub.ptr.lhs.cast72, %sub.ptr.rhs.cast73
  %sub.ptr.div75 = sdiv exact i64 %sub.ptr.sub74, 4
  %mul76 = mul nsw i64 2, %sub.ptr.div75
  %54 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx77 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %54, i32 0, i32 2
  %55 = load %struct.regexp*, %struct.regexp** %rx77, align 8
  %offsets78 = getelementptr inbounds %struct.regexp, %struct.regexp* %55, i32 0, i32 7
  %56 = load i32*, i32** %offsets78, align 8
  %arrayidx79 = getelementptr inbounds i32, i32* %56, i64 %mul76
  store i32 1, i32* %arrayidx79, align 4
  br label %if.end.80

if.end.80:                                        ; preds = %if.else.70, %if.then.64
  br label %if.end.81

if.end.81:                                        ; preds = %if.end.80, %if.end.52
  br label %sw.epilog.1537

sw.bb.82:                                         ; preds = %tryagain
  %57 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call83 = call i8* @S_nextchar(%struct.RExC_state_t* %57)
  %58 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags84 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %58, i32 0, i32 0
  %59 = load i32, i32* %flags84, align 4
  %and85 = and i32 %59, 8192
  %tobool86 = icmp ne i32 %and85, 0
  br i1 %tobool86, label %if.then.87, label %if.else.89

if.then.87:                                       ; preds = %sw.bb.82
  %60 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call88 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %60, i8 zeroext 15)
  store %struct.regnode* %call88, %struct.regnode** %ret, align 8
  br label %if.end.91

if.else.89:                                       ; preds = %sw.bb.82
  %61 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call90 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %61, i8 zeroext 14)
  store %struct.regnode* %call90, %struct.regnode** %ret, align 8
  br label %if.end.91

if.end.91:                                        ; preds = %if.else.89, %if.then.87
  %62 = load i32*, i32** %flagp.addr, align 8
  %63 = load i32, i32* %62, align 4
  %or = or i32 %63, 3
  store i32 %or, i32* %62, align 4
  %64 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %64, i32 0, i32 9
  %65 = load i32, i32* %naughty, align 4
  %inc92 = add nsw i32 %65, 1
  store i32 %inc92, i32* %naughty, align 4
  %66 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit93 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %66, i32 0, i32 8
  %67 = load %struct.regnode*, %struct.regnode** %emit93, align 8
  %cmp94 = icmp eq %struct.regnode* %67, @PL_regdummy
  br i1 %cmp94, label %if.end.121, label %if.then.96

if.then.96:                                       ; preds = %if.end.91
  %68 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %69 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start97 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %69, i32 0, i32 7
  %70 = load %struct.regnode*, %struct.regnode** %emit_start97, align 8
  %sub.ptr.lhs.cast98 = ptrtoint %struct.regnode* %68 to i64
  %sub.ptr.rhs.cast99 = ptrtoint %struct.regnode* %70 to i64
  %sub.ptr.sub100 = sub i64 %sub.ptr.lhs.cast98, %sub.ptr.rhs.cast99
  %sub.ptr.div101 = sdiv exact i64 %sub.ptr.sub100, 4
  %cmp102 = icmp slt i64 %sub.ptr.div101, 0
  br i1 %cmp102, label %if.then.104, label %if.else.110

if.then.104:                                      ; preds = %if.then.96
  %71 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %72 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start105 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %72, i32 0, i32 7
  %73 = load %struct.regnode*, %struct.regnode** %emit_start105, align 8
  %sub.ptr.lhs.cast106 = ptrtoint %struct.regnode* %71 to i64
  %sub.ptr.rhs.cast107 = ptrtoint %struct.regnode* %73 to i64
  %sub.ptr.sub108 = sub i64 %sub.ptr.lhs.cast106, %sub.ptr.rhs.cast107
  %sub.ptr.div109 = sdiv exact i64 %sub.ptr.sub108, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i32 0, i32 0), i64 %sub.ptr.div109)
  br label %if.end.120

if.else.110:                                      ; preds = %if.then.96
  %74 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %75 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start111 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %75, i32 0, i32 7
  %76 = load %struct.regnode*, %struct.regnode** %emit_start111, align 8
  %sub.ptr.lhs.cast112 = ptrtoint %struct.regnode* %74 to i64
  %sub.ptr.rhs.cast113 = ptrtoint %struct.regnode* %76 to i64
  %sub.ptr.sub114 = sub i64 %sub.ptr.lhs.cast112, %sub.ptr.rhs.cast113
  %sub.ptr.div115 = sdiv exact i64 %sub.ptr.sub114, 4
  %mul116 = mul nsw i64 2, %sub.ptr.div115
  %77 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx117 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %77, i32 0, i32 2
  %78 = load %struct.regexp*, %struct.regexp** %rx117, align 8
  %offsets118 = getelementptr inbounds %struct.regexp, %struct.regexp* %78, i32 0, i32 7
  %79 = load i32*, i32** %offsets118, align 8
  %arrayidx119 = getelementptr inbounds i32, i32* %79, i64 %mul116
  store i32 1, i32* %arrayidx119, align 4
  br label %if.end.120

if.end.120:                                       ; preds = %if.else.110, %if.then.104
  br label %if.end.121

if.end.121:                                       ; preds = %if.end.120, %if.end.91
  br label %sw.epilog.1537

sw.bb.122:                                        ; preds = %tryagain
  %80 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse123 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %80, i32 0, i32 5
  %81 = load i8*, i8** %parse123, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %81, i32 1
  store i8* %incdec.ptr, i8** %parse123, align 8
  store i8* %incdec.ptr, i8** %oregcomp_parse, align 8
  %82 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call124 = call %struct.regnode* @S_regclass(%struct.RExC_state_t* %82)
  store %struct.regnode* %call124, %struct.regnode** %ret, align 8
  %83 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse125 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %83, i32 0, i32 5
  %84 = load i8*, i8** %parse125, align 8
  %85 = load i8, i8* %84, align 1
  %conv126 = sext i8 %85 to i32
  %cmp127 = icmp ne i32 %conv126, 93
  br i1 %cmp127, label %if.then.129, label %if.end.144

if.then.129:                                      ; preds = %sw.bb.122
  %86 = load i8*, i8** %oregcomp_parse, align 8
  %87 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse130 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %87, i32 0, i32 5
  store i8* %86, i8** %parse130, align 8
  %88 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit131 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %88, i32 0, i32 8
  %89 = load %struct.regnode*, %struct.regnode** %emit131, align 8
  %cmp132 = icmp eq %struct.regnode* %89, @PL_regdummy
  br i1 %cmp132, label %if.end.136, label %if.then.134

if.then.134:                                      ; preds = %if.then.129
  %90 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx135 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %90, i32 0, i32 2
  %91 = load %struct.regexp*, %struct.regexp** %rx135, align 8
  %92 = bitcast %struct.regexp* %91 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %92)
  br label %if.end.136

if.end.136:                                       ; preds = %if.then.134, %if.then.129
  %93 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse137 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %93, i32 0, i32 5
  %94 = load i8*, i8** %parse137, align 8
  %95 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %95, i32 0, i32 1
  %96 = load i8*, i8** %precomp, align 8
  %sub.ptr.lhs.cast138 = ptrtoint i8* %94 to i64
  %sub.ptr.rhs.cast139 = ptrtoint i8* %96 to i64
  %sub.ptr.sub140 = sub i64 %sub.ptr.lhs.cast138, %sub.ptr.rhs.cast139
  store i64 %sub.ptr.sub140, i64* %offset, align 8
  %97 = load i64, i64* %offset, align 8
  %conv141 = trunc i64 %97 to i32
  %98 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp142 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %98, i32 0, i32 1
  %99 = load i8*, i8** %precomp142, align 8
  %100 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp143 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %100, i32 0, i32 1
  %101 = load i8*, i8** %precomp143, align 8
  %102 = load i64, i64* %offset, align 8
  %add.ptr = getelementptr inbounds i8, i8* %101, i64 %102
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.47, i32 0, i32 0), i32 %conv141, i8* %99, i8* %add.ptr)
  br label %if.end.144

if.end.144:                                       ; preds = %if.end.136, %sw.bb.122
  %103 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call145 = call i8* @S_nextchar(%struct.RExC_state_t* %103)
  %104 = load i32*, i32** %flagp.addr, align 8
  %105 = load i32, i32* %104, align 4
  %or146 = or i32 %105, 3
  store i32 %or146, i32* %104, align 4
  %106 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit147 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %106, i32 0, i32 8
  %107 = load %struct.regnode*, %struct.regnode** %emit147, align 8
  %cmp148 = icmp eq %struct.regnode* %107, @PL_regdummy
  br i1 %cmp148, label %if.end.180, label %if.then.150

if.then.150:                                      ; preds = %if.end.144
  %108 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %109 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start151 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %109, i32 0, i32 7
  %110 = load %struct.regnode*, %struct.regnode** %emit_start151, align 8
  %sub.ptr.lhs.cast152 = ptrtoint %struct.regnode* %108 to i64
  %sub.ptr.rhs.cast153 = ptrtoint %struct.regnode* %110 to i64
  %sub.ptr.sub154 = sub i64 %sub.ptr.lhs.cast152, %sub.ptr.rhs.cast153
  %sub.ptr.div155 = sdiv exact i64 %sub.ptr.sub154, 4
  %cmp156 = icmp slt i64 %sub.ptr.div155, 0
  br i1 %cmp156, label %if.then.158, label %if.else.164

if.then.158:                                      ; preds = %if.then.150
  %111 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %112 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start159 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %112, i32 0, i32 7
  %113 = load %struct.regnode*, %struct.regnode** %emit_start159, align 8
  %sub.ptr.lhs.cast160 = ptrtoint %struct.regnode* %111 to i64
  %sub.ptr.rhs.cast161 = ptrtoint %struct.regnode* %113 to i64
  %sub.ptr.sub162 = sub i64 %sub.ptr.lhs.cast160, %sub.ptr.rhs.cast161
  %sub.ptr.div163 = sdiv exact i64 %sub.ptr.sub162, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i32 0, i32 0), i64 %sub.ptr.div163)
  br label %if.end.179

if.else.164:                                      ; preds = %if.then.150
  %114 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse165 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %114, i32 0, i32 5
  %115 = load i8*, i8** %parse165, align 8
  %116 = load i8*, i8** %oregcomp_parse, align 8
  %sub.ptr.lhs.cast166 = ptrtoint i8* %115 to i64
  %sub.ptr.rhs.cast167 = ptrtoint i8* %116 to i64
  %sub.ptr.sub168 = sub i64 %sub.ptr.lhs.cast166, %sub.ptr.rhs.cast167
  %add = add nsw i64 %sub.ptr.sub168, 1
  %conv169 = trunc i64 %add to i32
  %117 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %118 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start170 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %118, i32 0, i32 7
  %119 = load %struct.regnode*, %struct.regnode** %emit_start170, align 8
  %sub.ptr.lhs.cast171 = ptrtoint %struct.regnode* %117 to i64
  %sub.ptr.rhs.cast172 = ptrtoint %struct.regnode* %119 to i64
  %sub.ptr.sub173 = sub i64 %sub.ptr.lhs.cast171, %sub.ptr.rhs.cast172
  %sub.ptr.div174 = sdiv exact i64 %sub.ptr.sub173, 4
  %mul175 = mul nsw i64 2, %sub.ptr.div174
  %120 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx176 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %120, i32 0, i32 2
  %121 = load %struct.regexp*, %struct.regexp** %rx176, align 8
  %offsets177 = getelementptr inbounds %struct.regexp, %struct.regexp* %121, i32 0, i32 7
  %122 = load i32*, i32** %offsets177, align 8
  %arrayidx178 = getelementptr inbounds i32, i32* %122, i64 %mul175
  store i32 %conv169, i32* %arrayidx178, align 4
  br label %if.end.179

if.end.179:                                       ; preds = %if.else.164, %if.then.158
  br label %if.end.180

if.end.180:                                       ; preds = %if.end.179, %if.end.144
  br label %sw.epilog.1537

sw.bb.181:                                        ; preds = %tryagain
  %123 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call182 = call i8* @S_nextchar(%struct.RExC_state_t* %123)
  %124 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call183 = call %struct.regnode* @S_reg(%struct.RExC_state_t* %124, i32 1, i32* %flags)
  store %struct.regnode* %call183, %struct.regnode** %ret, align 8
  %125 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %cmp184 = icmp eq %struct.regnode* %125, null
  br i1 %cmp184, label %if.then.186, label %if.end.197

if.then.186:                                      ; preds = %sw.bb.181
  %126 = load i32, i32* %flags, align 4
  %and187 = and i32 %126, 8
  %tobool188 = icmp ne i32 %and187, 0
  br i1 %tobool188, label %if.then.189, label %if.end.196

if.then.189:                                      ; preds = %if.then.186
  %127 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse190 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %127, i32 0, i32 5
  %128 = load i8*, i8** %parse190, align 8
  %129 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %129, i32 0, i32 4
  %130 = load i8*, i8** %end, align 8
  %cmp191 = icmp eq i8* %128, %130
  br i1 %cmp191, label %if.then.193, label %if.end.195

if.then.193:                                      ; preds = %if.then.189
  %131 = load i32*, i32** %flagp.addr, align 8
  %132 = load i32, i32* %131, align 4
  %or194 = or i32 %132, 8
  store i32 %or194, i32* %131, align 4
  store %struct.regnode* null, %struct.regnode** %retval
  br label %return

if.end.195:                                       ; preds = %if.then.189
  br label %tryagain

if.end.196:                                       ; preds = %if.then.186
  store %struct.regnode* null, %struct.regnode** %retval
  br label %return

if.end.197:                                       ; preds = %sw.bb.181
  %133 = load i32, i32* %flags, align 4
  %and198 = and i32 %133, 7
  %134 = load i32*, i32** %flagp.addr, align 8
  %135 = load i32, i32* %134, align 4
  %or199 = or i32 %135, %and198
  store i32 %or199, i32* %134, align 4
  br label %sw.epilog.1537

sw.bb.200:                                        ; preds = %tryagain, %tryagain
  %136 = load i32, i32* %flags, align 4
  %and201 = and i32 %136, 8
  %tobool202 = icmp ne i32 %and201, 0
  br i1 %tobool202, label %if.then.203, label %if.end.205

if.then.203:                                      ; preds = %sw.bb.200
  %137 = load i32*, i32** %flagp.addr, align 8
  %138 = load i32, i32* %137, align 4
  %or204 = or i32 %138, 8
  store i32 %or204, i32* %137, align 4
  store %struct.regnode* null, %struct.regnode** %retval
  br label %return

if.end.205:                                       ; preds = %sw.bb.200
  %139 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit206 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %139, i32 0, i32 8
  %140 = load %struct.regnode*, %struct.regnode** %emit206, align 8
  %cmp207 = icmp eq %struct.regnode* %140, @PL_regdummy
  br i1 %cmp207, label %if.end.211, label %if.then.209

if.then.209:                                      ; preds = %if.end.205
  %141 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx210 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %141, i32 0, i32 2
  %142 = load %struct.regexp*, %struct.regexp** %rx210, align 8
  %143 = bitcast %struct.regexp* %142 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %143)
  br label %if.end.211

if.end.211:                                       ; preds = %if.then.209, %if.end.205
  %144 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse213 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %144, i32 0, i32 5
  %145 = load i8*, i8** %parse213, align 8
  %146 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp214 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %146, i32 0, i32 1
  %147 = load i8*, i8** %precomp214, align 8
  %sub.ptr.lhs.cast215 = ptrtoint i8* %145 to i64
  %sub.ptr.rhs.cast216 = ptrtoint i8* %147 to i64
  %sub.ptr.sub217 = sub i64 %sub.ptr.lhs.cast215, %sub.ptr.rhs.cast216
  store i64 %sub.ptr.sub217, i64* %offset212, align 8
  %148 = load i64, i64* %offset212, align 8
  %conv218 = trunc i64 %148 to i32
  %149 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp219 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %149, i32 0, i32 1
  %150 = load i8*, i8** %precomp219, align 8
  %151 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp220 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %151, i32 0, i32 1
  %152 = load i8*, i8** %precomp220, align 8
  %153 = load i64, i64* %offset212, align 8
  %add.ptr221 = getelementptr inbounds i8, i8* %152, i64 %153
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.48, i32 0, i32 0), i32 %conv218, i8* %150, i8* %add.ptr221)
  br label %sw.epilog.1537

sw.bb.222:                                        ; preds = %tryagain
  %154 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse223 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %154, i32 0, i32 5
  %155 = load i8*, i8** %parse223, align 8
  %call224 = call i32 @S_regcurly(i8* %155)
  %tobool225 = icmp ne i32 %call224, 0
  br i1 %tobool225, label %if.end.229, label %if.then.226

if.then.226:                                      ; preds = %sw.bb.222
  %156 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse227 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %156, i32 0, i32 5
  %157 = load i8*, i8** %parse227, align 8
  %incdec.ptr228 = getelementptr inbounds i8, i8* %157, i32 1
  store i8* %incdec.ptr228, i8** %parse227, align 8
  br label %defchar

if.end.229:                                       ; preds = %sw.bb.222
  br label %sw.bb.230

sw.bb.230:                                        ; preds = %tryagain, %tryagain, %tryagain, %if.end.229
  %158 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse231 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %158, i32 0, i32 5
  %159 = load i8*, i8** %parse231, align 8
  %incdec.ptr232 = getelementptr inbounds i8, i8* %159, i32 1
  store i8* %incdec.ptr232, i8** %parse231, align 8
  %160 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit233 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %160, i32 0, i32 8
  %161 = load %struct.regnode*, %struct.regnode** %emit233, align 8
  %cmp234 = icmp eq %struct.regnode* %161, @PL_regdummy
  br i1 %cmp234, label %if.end.238, label %if.then.236

if.then.236:                                      ; preds = %sw.bb.230
  %162 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx237 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %162, i32 0, i32 2
  %163 = load %struct.regexp*, %struct.regexp** %rx237, align 8
  %164 = bitcast %struct.regexp* %163 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %164)
  br label %if.end.238

if.end.238:                                       ; preds = %if.then.236, %sw.bb.230
  %165 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse240 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %165, i32 0, i32 5
  %166 = load i8*, i8** %parse240, align 8
  %167 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp241 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %167, i32 0, i32 1
  %168 = load i8*, i8** %precomp241, align 8
  %sub.ptr.lhs.cast242 = ptrtoint i8* %166 to i64
  %sub.ptr.rhs.cast243 = ptrtoint i8* %168 to i64
  %sub.ptr.sub244 = sub i64 %sub.ptr.lhs.cast242, %sub.ptr.rhs.cast243
  store i64 %sub.ptr.sub244, i64* %offset239, align 8
  %169 = load i64, i64* %offset239, align 8
  %conv245 = trunc i64 %169 to i32
  %170 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp246 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %170, i32 0, i32 1
  %171 = load i8*, i8** %precomp246, align 8
  %172 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp247 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %172, i32 0, i32 1
  %173 = load i8*, i8** %precomp247, align 8
  %174 = load i64, i64* %offset239, align 8
  %add.ptr248 = getelementptr inbounds i8, i8* %173, i64 %174
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.49, i32 0, i32 0), i32 %conv245, i8* %171, i8* %add.ptr248)
  br label %sw.epilog.1537

sw.bb.249:                                        ; preds = %tryagain
  %175 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse250 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %175, i32 0, i32 5
  %176 = load i8*, i8** %parse250, align 8
  %incdec.ptr251 = getelementptr inbounds i8, i8* %176, i32 1
  store i8* %incdec.ptr251, i8** %parse250, align 8
  %177 = load i8, i8* %incdec.ptr251, align 1
  %conv252 = sext i8 %177 to i32
  switch i32 %conv252, label %sw.default [
    i32 65, label %sw.bb.253
    i32 71, label %sw.bb.288
    i32 90, label %sw.bb.322
    i32 122, label %sw.bb.328
    i32 67, label %sw.bb.363
    i32 88, label %sw.bb.398
    i32 119, label %sw.bb.431
    i32 87, label %sw.bb.469
    i32 98, label %sw.bb.508
    i32 66, label %sw.bb.551
    i32 115, label %sw.bb.594
    i32 83, label %sw.bb.633
    i32 100, label %sw.bb.672
    i32 68, label %sw.bb.705
    i32 112, label %sw.bb.738
    i32 80, label %sw.bb.738
    i32 110, label %sw.bb.866
    i32 114, label %sw.bb.866
    i32 116, label %sw.bb.866
    i32 102, label %sw.bb.866
    i32 101, label %sw.bb.866
    i32 97, label %sw.bb.866
    i32 120, label %sw.bb.866
    i32 99, label %sw.bb.866
    i32 48, label %sw.bb.866
    i32 49, label %sw.bb.867
    i32 50, label %sw.bb.867
    i32 51, label %sw.bb.867
    i32 52, label %sw.bb.867
    i32 53, label %sw.bb.867
    i32 54, label %sw.bb.867
    i32 55, label %sw.bb.867
    i32 56, label %sw.bb.867
    i32 57, label %sw.bb.867
    i32 0, label %sw.bb.1001
  ]

sw.bb.253:                                        ; preds = %sw.bb.249
  %178 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen_zerolen254 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %178, i32 0, i32 15
  %179 = load i32, i32* %seen_zerolen254, align 4
  %inc255 = add nsw i32 %179, 1
  store i32 %inc255, i32* %seen_zerolen254, align 4
  %180 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call256 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %180, i8 zeroext 4)
  store %struct.regnode* %call256, %struct.regnode** %ret, align 8
  %181 = load i32*, i32** %flagp.addr, align 8
  %182 = load i32, i32* %181, align 4
  %or257 = or i32 %182, 2
  store i32 %or257, i32* %181, align 4
  %183 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call258 = call i8* @S_nextchar(%struct.RExC_state_t* %183)
  %184 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit259 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %184, i32 0, i32 8
  %185 = load %struct.regnode*, %struct.regnode** %emit259, align 8
  %cmp260 = icmp eq %struct.regnode* %185, @PL_regdummy
  br i1 %cmp260, label %if.end.287, label %if.then.262

if.then.262:                                      ; preds = %sw.bb.253
  %186 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %187 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start263 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %187, i32 0, i32 7
  %188 = load %struct.regnode*, %struct.regnode** %emit_start263, align 8
  %sub.ptr.lhs.cast264 = ptrtoint %struct.regnode* %186 to i64
  %sub.ptr.rhs.cast265 = ptrtoint %struct.regnode* %188 to i64
  %sub.ptr.sub266 = sub i64 %sub.ptr.lhs.cast264, %sub.ptr.rhs.cast265
  %sub.ptr.div267 = sdiv exact i64 %sub.ptr.sub266, 4
  %cmp268 = icmp slt i64 %sub.ptr.div267, 0
  br i1 %cmp268, label %if.then.270, label %if.else.276

if.then.270:                                      ; preds = %if.then.262
  %189 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %190 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start271 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %190, i32 0, i32 7
  %191 = load %struct.regnode*, %struct.regnode** %emit_start271, align 8
  %sub.ptr.lhs.cast272 = ptrtoint %struct.regnode* %189 to i64
  %sub.ptr.rhs.cast273 = ptrtoint %struct.regnode* %191 to i64
  %sub.ptr.sub274 = sub i64 %sub.ptr.lhs.cast272, %sub.ptr.rhs.cast273
  %sub.ptr.div275 = sdiv exact i64 %sub.ptr.sub274, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i32 0, i32 0), i64 %sub.ptr.div275)
  br label %if.end.286

if.else.276:                                      ; preds = %if.then.262
  %192 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %193 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start277 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %193, i32 0, i32 7
  %194 = load %struct.regnode*, %struct.regnode** %emit_start277, align 8
  %sub.ptr.lhs.cast278 = ptrtoint %struct.regnode* %192 to i64
  %sub.ptr.rhs.cast279 = ptrtoint %struct.regnode* %194 to i64
  %sub.ptr.sub280 = sub i64 %sub.ptr.lhs.cast278, %sub.ptr.rhs.cast279
  %sub.ptr.div281 = sdiv exact i64 %sub.ptr.sub280, 4
  %mul282 = mul nsw i64 2, %sub.ptr.div281
  %195 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx283 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %195, i32 0, i32 2
  %196 = load %struct.regexp*, %struct.regexp** %rx283, align 8
  %offsets284 = getelementptr inbounds %struct.regexp, %struct.regexp* %196, i32 0, i32 7
  %197 = load i32*, i32** %offsets284, align 8
  %arrayidx285 = getelementptr inbounds i32, i32* %197, i64 %mul282
  store i32 2, i32* %arrayidx285, align 4
  br label %if.end.286

if.end.286:                                       ; preds = %if.else.276, %if.then.270
  br label %if.end.287

if.end.287:                                       ; preds = %if.end.286, %sw.bb.253
  br label %sw.epilog

sw.bb.288:                                        ; preds = %sw.bb.249
  %198 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call289 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %198, i8 zeroext 13)
  store %struct.regnode* %call289, %struct.regnode** %ret, align 8
  %199 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %199, i32 0, i32 11
  %200 = load i32, i32* %seen, align 4
  %or290 = or i32 %200, 4
  store i32 %or290, i32* %seen, align 4
  %201 = load i32*, i32** %flagp.addr, align 8
  %202 = load i32, i32* %201, align 4
  %or291 = or i32 %202, 2
  store i32 %or291, i32* %201, align 4
  %203 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call292 = call i8* @S_nextchar(%struct.RExC_state_t* %203)
  %204 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit293 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %204, i32 0, i32 8
  %205 = load %struct.regnode*, %struct.regnode** %emit293, align 8
  %cmp294 = icmp eq %struct.regnode* %205, @PL_regdummy
  br i1 %cmp294, label %if.end.321, label %if.then.296

if.then.296:                                      ; preds = %sw.bb.288
  %206 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %207 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start297 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %207, i32 0, i32 7
  %208 = load %struct.regnode*, %struct.regnode** %emit_start297, align 8
  %sub.ptr.lhs.cast298 = ptrtoint %struct.regnode* %206 to i64
  %sub.ptr.rhs.cast299 = ptrtoint %struct.regnode* %208 to i64
  %sub.ptr.sub300 = sub i64 %sub.ptr.lhs.cast298, %sub.ptr.rhs.cast299
  %sub.ptr.div301 = sdiv exact i64 %sub.ptr.sub300, 4
  %cmp302 = icmp slt i64 %sub.ptr.div301, 0
  br i1 %cmp302, label %if.then.304, label %if.else.310

if.then.304:                                      ; preds = %if.then.296
  %209 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %210 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start305 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %210, i32 0, i32 7
  %211 = load %struct.regnode*, %struct.regnode** %emit_start305, align 8
  %sub.ptr.lhs.cast306 = ptrtoint %struct.regnode* %209 to i64
  %sub.ptr.rhs.cast307 = ptrtoint %struct.regnode* %211 to i64
  %sub.ptr.sub308 = sub i64 %sub.ptr.lhs.cast306, %sub.ptr.rhs.cast307
  %sub.ptr.div309 = sdiv exact i64 %sub.ptr.sub308, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i32 0, i32 0), i64 %sub.ptr.div309)
  br label %if.end.320

if.else.310:                                      ; preds = %if.then.296
  %212 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %213 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start311 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %213, i32 0, i32 7
  %214 = load %struct.regnode*, %struct.regnode** %emit_start311, align 8
  %sub.ptr.lhs.cast312 = ptrtoint %struct.regnode* %212 to i64
  %sub.ptr.rhs.cast313 = ptrtoint %struct.regnode* %214 to i64
  %sub.ptr.sub314 = sub i64 %sub.ptr.lhs.cast312, %sub.ptr.rhs.cast313
  %sub.ptr.div315 = sdiv exact i64 %sub.ptr.sub314, 4
  %mul316 = mul nsw i64 2, %sub.ptr.div315
  %215 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx317 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %215, i32 0, i32 2
  %216 = load %struct.regexp*, %struct.regexp** %rx317, align 8
  %offsets318 = getelementptr inbounds %struct.regexp, %struct.regexp* %216, i32 0, i32 7
  %217 = load i32*, i32** %offsets318, align 8
  %arrayidx319 = getelementptr inbounds i32, i32* %217, i64 %mul316
  store i32 2, i32* %arrayidx319, align 4
  br label %if.end.320

if.end.320:                                       ; preds = %if.else.310, %if.then.304
  br label %if.end.321

if.end.321:                                       ; preds = %if.end.320, %sw.bb.288
  br label %sw.epilog

sw.bb.322:                                        ; preds = %sw.bb.249
  %218 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call323 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %218, i8 zeroext 8)
  store %struct.regnode* %call323, %struct.regnode** %ret, align 8
  %219 = load i32*, i32** %flagp.addr, align 8
  %220 = load i32, i32* %219, align 4
  %or324 = or i32 %220, 2
  store i32 %or324, i32* %219, align 4
  %221 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen_zerolen325 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %221, i32 0, i32 15
  %222 = load i32, i32* %seen_zerolen325, align 4
  %inc326 = add nsw i32 %222, 1
  store i32 %inc326, i32* %seen_zerolen325, align 4
  %223 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call327 = call i8* @S_nextchar(%struct.RExC_state_t* %223)
  br label %sw.epilog

sw.bb.328:                                        ; preds = %sw.bb.249
  %224 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call329 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %224, i8 zeroext 5)
  store %struct.regnode* %call329, %struct.regnode** %ret, align 8
  %225 = load i32*, i32** %flagp.addr, align 8
  %226 = load i32, i32* %225, align 4
  %or330 = or i32 %226, 2
  store i32 %or330, i32* %225, align 4
  %227 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen_zerolen331 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %227, i32 0, i32 15
  %228 = load i32, i32* %seen_zerolen331, align 4
  %inc332 = add nsw i32 %228, 1
  store i32 %inc332, i32* %seen_zerolen331, align 4
  %229 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call333 = call i8* @S_nextchar(%struct.RExC_state_t* %229)
  %230 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit334 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %230, i32 0, i32 8
  %231 = load %struct.regnode*, %struct.regnode** %emit334, align 8
  %cmp335 = icmp eq %struct.regnode* %231, @PL_regdummy
  br i1 %cmp335, label %if.end.362, label %if.then.337

if.then.337:                                      ; preds = %sw.bb.328
  %232 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %233 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start338 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %233, i32 0, i32 7
  %234 = load %struct.regnode*, %struct.regnode** %emit_start338, align 8
  %sub.ptr.lhs.cast339 = ptrtoint %struct.regnode* %232 to i64
  %sub.ptr.rhs.cast340 = ptrtoint %struct.regnode* %234 to i64
  %sub.ptr.sub341 = sub i64 %sub.ptr.lhs.cast339, %sub.ptr.rhs.cast340
  %sub.ptr.div342 = sdiv exact i64 %sub.ptr.sub341, 4
  %cmp343 = icmp slt i64 %sub.ptr.div342, 0
  br i1 %cmp343, label %if.then.345, label %if.else.351

if.then.345:                                      ; preds = %if.then.337
  %235 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %236 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start346 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %236, i32 0, i32 7
  %237 = load %struct.regnode*, %struct.regnode** %emit_start346, align 8
  %sub.ptr.lhs.cast347 = ptrtoint %struct.regnode* %235 to i64
  %sub.ptr.rhs.cast348 = ptrtoint %struct.regnode* %237 to i64
  %sub.ptr.sub349 = sub i64 %sub.ptr.lhs.cast347, %sub.ptr.rhs.cast348
  %sub.ptr.div350 = sdiv exact i64 %sub.ptr.sub349, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i32 0, i32 0), i64 %sub.ptr.div350)
  br label %if.end.361

if.else.351:                                      ; preds = %if.then.337
  %238 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %239 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start352 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %239, i32 0, i32 7
  %240 = load %struct.regnode*, %struct.regnode** %emit_start352, align 8
  %sub.ptr.lhs.cast353 = ptrtoint %struct.regnode* %238 to i64
  %sub.ptr.rhs.cast354 = ptrtoint %struct.regnode* %240 to i64
  %sub.ptr.sub355 = sub i64 %sub.ptr.lhs.cast353, %sub.ptr.rhs.cast354
  %sub.ptr.div356 = sdiv exact i64 %sub.ptr.sub355, 4
  %mul357 = mul nsw i64 2, %sub.ptr.div356
  %241 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx358 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %241, i32 0, i32 2
  %242 = load %struct.regexp*, %struct.regexp** %rx358, align 8
  %offsets359 = getelementptr inbounds %struct.regexp, %struct.regexp* %242, i32 0, i32 7
  %243 = load i32*, i32** %offsets359, align 8
  %arrayidx360 = getelementptr inbounds i32, i32* %243, i64 %mul357
  store i32 2, i32* %arrayidx360, align 4
  br label %if.end.361

if.end.361:                                       ; preds = %if.else.351, %if.then.345
  br label %if.end.362

if.end.362:                                       ; preds = %if.end.361, %sw.bb.328
  br label %sw.epilog

sw.bb.363:                                        ; preds = %sw.bb.249
  %244 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call364 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %244, i8 zeroext 16)
  store %struct.regnode* %call364, %struct.regnode** %ret, align 8
  %245 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen365 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %245, i32 0, i32 11
  %246 = load i32, i32* %seen365, align 4
  %or366 = or i32 %246, 16
  store i32 %or366, i32* %seen365, align 4
  %247 = load i32*, i32** %flagp.addr, align 8
  %248 = load i32, i32* %247, align 4
  %or367 = or i32 %248, 3
  store i32 %or367, i32* %247, align 4
  %249 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call368 = call i8* @S_nextchar(%struct.RExC_state_t* %249)
  %250 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit369 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %250, i32 0, i32 8
  %251 = load %struct.regnode*, %struct.regnode** %emit369, align 8
  %cmp370 = icmp eq %struct.regnode* %251, @PL_regdummy
  br i1 %cmp370, label %if.end.397, label %if.then.372

if.then.372:                                      ; preds = %sw.bb.363
  %252 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %253 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start373 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %253, i32 0, i32 7
  %254 = load %struct.regnode*, %struct.regnode** %emit_start373, align 8
  %sub.ptr.lhs.cast374 = ptrtoint %struct.regnode* %252 to i64
  %sub.ptr.rhs.cast375 = ptrtoint %struct.regnode* %254 to i64
  %sub.ptr.sub376 = sub i64 %sub.ptr.lhs.cast374, %sub.ptr.rhs.cast375
  %sub.ptr.div377 = sdiv exact i64 %sub.ptr.sub376, 4
  %cmp378 = icmp slt i64 %sub.ptr.div377, 0
  br i1 %cmp378, label %if.then.380, label %if.else.386

if.then.380:                                      ; preds = %if.then.372
  %255 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %256 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start381 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %256, i32 0, i32 7
  %257 = load %struct.regnode*, %struct.regnode** %emit_start381, align 8
  %sub.ptr.lhs.cast382 = ptrtoint %struct.regnode* %255 to i64
  %sub.ptr.rhs.cast383 = ptrtoint %struct.regnode* %257 to i64
  %sub.ptr.sub384 = sub i64 %sub.ptr.lhs.cast382, %sub.ptr.rhs.cast383
  %sub.ptr.div385 = sdiv exact i64 %sub.ptr.sub384, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i32 0, i32 0), i64 %sub.ptr.div385)
  br label %if.end.396

if.else.386:                                      ; preds = %if.then.372
  %258 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %259 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start387 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %259, i32 0, i32 7
  %260 = load %struct.regnode*, %struct.regnode** %emit_start387, align 8
  %sub.ptr.lhs.cast388 = ptrtoint %struct.regnode* %258 to i64
  %sub.ptr.rhs.cast389 = ptrtoint %struct.regnode* %260 to i64
  %sub.ptr.sub390 = sub i64 %sub.ptr.lhs.cast388, %sub.ptr.rhs.cast389
  %sub.ptr.div391 = sdiv exact i64 %sub.ptr.sub390, 4
  %mul392 = mul nsw i64 2, %sub.ptr.div391
  %261 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx393 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %261, i32 0, i32 2
  %262 = load %struct.regexp*, %struct.regexp** %rx393, align 8
  %offsets394 = getelementptr inbounds %struct.regexp, %struct.regexp* %262, i32 0, i32 7
  %263 = load i32*, i32** %offsets394, align 8
  %arrayidx395 = getelementptr inbounds i32, i32* %263, i64 %mul392
  store i32 2, i32* %arrayidx395, align 4
  br label %if.end.396

if.end.396:                                       ; preds = %if.else.386, %if.then.380
  br label %if.end.397

if.end.397:                                       ; preds = %if.end.396, %sw.bb.363
  br label %sw.epilog

sw.bb.398:                                        ; preds = %sw.bb.249
  %264 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call399 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %264, i8 zeroext 30)
  store %struct.regnode* %call399, %struct.regnode** %ret, align 8
  %265 = load i32*, i32** %flagp.addr, align 8
  %266 = load i32, i32* %265, align 4
  %or400 = or i32 %266, 1
  store i32 %or400, i32* %265, align 4
  %267 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call401 = call i8* @S_nextchar(%struct.RExC_state_t* %267)
  %268 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit402 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %268, i32 0, i32 8
  %269 = load %struct.regnode*, %struct.regnode** %emit402, align 8
  %cmp403 = icmp eq %struct.regnode* %269, @PL_regdummy
  br i1 %cmp403, label %if.end.430, label %if.then.405

if.then.405:                                      ; preds = %sw.bb.398
  %270 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %271 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start406 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %271, i32 0, i32 7
  %272 = load %struct.regnode*, %struct.regnode** %emit_start406, align 8
  %sub.ptr.lhs.cast407 = ptrtoint %struct.regnode* %270 to i64
  %sub.ptr.rhs.cast408 = ptrtoint %struct.regnode* %272 to i64
  %sub.ptr.sub409 = sub i64 %sub.ptr.lhs.cast407, %sub.ptr.rhs.cast408
  %sub.ptr.div410 = sdiv exact i64 %sub.ptr.sub409, 4
  %cmp411 = icmp slt i64 %sub.ptr.div410, 0
  br i1 %cmp411, label %if.then.413, label %if.else.419

if.then.413:                                      ; preds = %if.then.405
  %273 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %274 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start414 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %274, i32 0, i32 7
  %275 = load %struct.regnode*, %struct.regnode** %emit_start414, align 8
  %sub.ptr.lhs.cast415 = ptrtoint %struct.regnode* %273 to i64
  %sub.ptr.rhs.cast416 = ptrtoint %struct.regnode* %275 to i64
  %sub.ptr.sub417 = sub i64 %sub.ptr.lhs.cast415, %sub.ptr.rhs.cast416
  %sub.ptr.div418 = sdiv exact i64 %sub.ptr.sub417, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i32 0, i32 0), i64 %sub.ptr.div418)
  br label %if.end.429

if.else.419:                                      ; preds = %if.then.405
  %276 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %277 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start420 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %277, i32 0, i32 7
  %278 = load %struct.regnode*, %struct.regnode** %emit_start420, align 8
  %sub.ptr.lhs.cast421 = ptrtoint %struct.regnode* %276 to i64
  %sub.ptr.rhs.cast422 = ptrtoint %struct.regnode* %278 to i64
  %sub.ptr.sub423 = sub i64 %sub.ptr.lhs.cast421, %sub.ptr.rhs.cast422
  %sub.ptr.div424 = sdiv exact i64 %sub.ptr.sub423, 4
  %mul425 = mul nsw i64 2, %sub.ptr.div424
  %279 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx426 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %279, i32 0, i32 2
  %280 = load %struct.regexp*, %struct.regexp** %rx426, align 8
  %offsets427 = getelementptr inbounds %struct.regexp, %struct.regexp* %280, i32 0, i32 7
  %281 = load i32*, i32** %offsets427, align 8
  %arrayidx428 = getelementptr inbounds i32, i32* %281, i64 %mul425
  store i32 2, i32* %arrayidx428, align 4
  br label %if.end.429

if.end.429:                                       ; preds = %if.else.419, %if.then.413
  br label %if.end.430

if.end.430:                                       ; preds = %if.end.429, %sw.bb.398
  br label %sw.epilog

sw.bb.431:                                        ; preds = %sw.bb.249
  %282 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %283 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags432 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %283, i32 0, i32 0
  %284 = load i32, i32* %flags432, align 4
  %and433 = and i32 %284, 2048
  %cmp434 = icmp ne i32 %and433, 0
  %cond = select i1 %cmp434, i32 19, i32 18
  %conv436 = trunc i32 %cond to i8
  %call437 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %282, i8 zeroext %conv436)
  store %struct.regnode* %call437, %struct.regnode** %ret, align 8
  %285 = load i32*, i32** %flagp.addr, align 8
  %286 = load i32, i32* %285, align 4
  %or438 = or i32 %286, 3
  store i32 %or438, i32* %285, align 4
  %287 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call439 = call i8* @S_nextchar(%struct.RExC_state_t* %287)
  %288 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit440 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %288, i32 0, i32 8
  %289 = load %struct.regnode*, %struct.regnode** %emit440, align 8
  %cmp441 = icmp eq %struct.regnode* %289, @PL_regdummy
  br i1 %cmp441, label %if.end.468, label %if.then.443

if.then.443:                                      ; preds = %sw.bb.431
  %290 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %291 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start444 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %291, i32 0, i32 7
  %292 = load %struct.regnode*, %struct.regnode** %emit_start444, align 8
  %sub.ptr.lhs.cast445 = ptrtoint %struct.regnode* %290 to i64
  %sub.ptr.rhs.cast446 = ptrtoint %struct.regnode* %292 to i64
  %sub.ptr.sub447 = sub i64 %sub.ptr.lhs.cast445, %sub.ptr.rhs.cast446
  %sub.ptr.div448 = sdiv exact i64 %sub.ptr.sub447, 4
  %cmp449 = icmp slt i64 %sub.ptr.div448, 0
  br i1 %cmp449, label %if.then.451, label %if.else.457

if.then.451:                                      ; preds = %if.then.443
  %293 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %294 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start452 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %294, i32 0, i32 7
  %295 = load %struct.regnode*, %struct.regnode** %emit_start452, align 8
  %sub.ptr.lhs.cast453 = ptrtoint %struct.regnode* %293 to i64
  %sub.ptr.rhs.cast454 = ptrtoint %struct.regnode* %295 to i64
  %sub.ptr.sub455 = sub i64 %sub.ptr.lhs.cast453, %sub.ptr.rhs.cast454
  %sub.ptr.div456 = sdiv exact i64 %sub.ptr.sub455, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i32 0, i32 0), i64 %sub.ptr.div456)
  br label %if.end.467

if.else.457:                                      ; preds = %if.then.443
  %296 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %297 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start458 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %297, i32 0, i32 7
  %298 = load %struct.regnode*, %struct.regnode** %emit_start458, align 8
  %sub.ptr.lhs.cast459 = ptrtoint %struct.regnode* %296 to i64
  %sub.ptr.rhs.cast460 = ptrtoint %struct.regnode* %298 to i64
  %sub.ptr.sub461 = sub i64 %sub.ptr.lhs.cast459, %sub.ptr.rhs.cast460
  %sub.ptr.div462 = sdiv exact i64 %sub.ptr.sub461, 4
  %mul463 = mul nsw i64 2, %sub.ptr.div462
  %299 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx464 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %299, i32 0, i32 2
  %300 = load %struct.regexp*, %struct.regexp** %rx464, align 8
  %offsets465 = getelementptr inbounds %struct.regexp, %struct.regexp* %300, i32 0, i32 7
  %301 = load i32*, i32** %offsets465, align 8
  %arrayidx466 = getelementptr inbounds i32, i32* %301, i64 %mul463
  store i32 2, i32* %arrayidx466, align 4
  br label %if.end.467

if.end.467:                                       ; preds = %if.else.457, %if.then.451
  br label %if.end.468

if.end.468:                                       ; preds = %if.end.467, %sw.bb.431
  br label %sw.epilog

sw.bb.469:                                        ; preds = %sw.bb.249
  %302 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %303 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags470 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %303, i32 0, i32 0
  %304 = load i32, i32* %flags470, align 4
  %and471 = and i32 %304, 2048
  %cmp472 = icmp ne i32 %and471, 0
  %cond474 = select i1 %cmp472, i32 21, i32 20
  %conv475 = trunc i32 %cond474 to i8
  %call476 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %302, i8 zeroext %conv475)
  store %struct.regnode* %call476, %struct.regnode** %ret, align 8
  %305 = load i32*, i32** %flagp.addr, align 8
  %306 = load i32, i32* %305, align 4
  %or477 = or i32 %306, 3
  store i32 %or477, i32* %305, align 4
  %307 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call478 = call i8* @S_nextchar(%struct.RExC_state_t* %307)
  %308 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit479 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %308, i32 0, i32 8
  %309 = load %struct.regnode*, %struct.regnode** %emit479, align 8
  %cmp480 = icmp eq %struct.regnode* %309, @PL_regdummy
  br i1 %cmp480, label %if.end.507, label %if.then.482

if.then.482:                                      ; preds = %sw.bb.469
  %310 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %311 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start483 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %311, i32 0, i32 7
  %312 = load %struct.regnode*, %struct.regnode** %emit_start483, align 8
  %sub.ptr.lhs.cast484 = ptrtoint %struct.regnode* %310 to i64
  %sub.ptr.rhs.cast485 = ptrtoint %struct.regnode* %312 to i64
  %sub.ptr.sub486 = sub i64 %sub.ptr.lhs.cast484, %sub.ptr.rhs.cast485
  %sub.ptr.div487 = sdiv exact i64 %sub.ptr.sub486, 4
  %cmp488 = icmp slt i64 %sub.ptr.div487, 0
  br i1 %cmp488, label %if.then.490, label %if.else.496

if.then.490:                                      ; preds = %if.then.482
  %313 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %314 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start491 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %314, i32 0, i32 7
  %315 = load %struct.regnode*, %struct.regnode** %emit_start491, align 8
  %sub.ptr.lhs.cast492 = ptrtoint %struct.regnode* %313 to i64
  %sub.ptr.rhs.cast493 = ptrtoint %struct.regnode* %315 to i64
  %sub.ptr.sub494 = sub i64 %sub.ptr.lhs.cast492, %sub.ptr.rhs.cast493
  %sub.ptr.div495 = sdiv exact i64 %sub.ptr.sub494, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i32 0, i32 0), i64 %sub.ptr.div495)
  br label %if.end.506

if.else.496:                                      ; preds = %if.then.482
  %316 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %317 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start497 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %317, i32 0, i32 7
  %318 = load %struct.regnode*, %struct.regnode** %emit_start497, align 8
  %sub.ptr.lhs.cast498 = ptrtoint %struct.regnode* %316 to i64
  %sub.ptr.rhs.cast499 = ptrtoint %struct.regnode* %318 to i64
  %sub.ptr.sub500 = sub i64 %sub.ptr.lhs.cast498, %sub.ptr.rhs.cast499
  %sub.ptr.div501 = sdiv exact i64 %sub.ptr.sub500, 4
  %mul502 = mul nsw i64 2, %sub.ptr.div501
  %319 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx503 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %319, i32 0, i32 2
  %320 = load %struct.regexp*, %struct.regexp** %rx503, align 8
  %offsets504 = getelementptr inbounds %struct.regexp, %struct.regexp* %320, i32 0, i32 7
  %321 = load i32*, i32** %offsets504, align 8
  %arrayidx505 = getelementptr inbounds i32, i32* %321, i64 %mul502
  store i32 2, i32* %arrayidx505, align 4
  br label %if.end.506

if.end.506:                                       ; preds = %if.else.496, %if.then.490
  br label %if.end.507

if.end.507:                                       ; preds = %if.end.506, %sw.bb.469
  br label %sw.epilog

sw.bb.508:                                        ; preds = %sw.bb.249
  %322 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen_zerolen509 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %322, i32 0, i32 15
  %323 = load i32, i32* %seen_zerolen509, align 4
  %inc510 = add nsw i32 %323, 1
  store i32 %inc510, i32* %seen_zerolen509, align 4
  %324 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen511 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %324, i32 0, i32 11
  %325 = load i32, i32* %seen511, align 4
  %or512 = or i32 %325, 2
  store i32 %or512, i32* %seen511, align 4
  %326 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %327 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags513 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %327, i32 0, i32 0
  %328 = load i32, i32* %flags513, align 4
  %and514 = and i32 %328, 2048
  %cmp515 = icmp ne i32 %and514, 0
  %cond517 = select i1 %cmp515, i32 10, i32 9
  %conv518 = trunc i32 %cond517 to i8
  %call519 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %326, i8 zeroext %conv518)
  store %struct.regnode* %call519, %struct.regnode** %ret, align 8
  %329 = load i32*, i32** %flagp.addr, align 8
  %330 = load i32, i32* %329, align 4
  %or520 = or i32 %330, 2
  store i32 %or520, i32* %329, align 4
  %331 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call521 = call i8* @S_nextchar(%struct.RExC_state_t* %331)
  %332 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit522 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %332, i32 0, i32 8
  %333 = load %struct.regnode*, %struct.regnode** %emit522, align 8
  %cmp523 = icmp eq %struct.regnode* %333, @PL_regdummy
  br i1 %cmp523, label %if.end.550, label %if.then.525

if.then.525:                                      ; preds = %sw.bb.508
  %334 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %335 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start526 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %335, i32 0, i32 7
  %336 = load %struct.regnode*, %struct.regnode** %emit_start526, align 8
  %sub.ptr.lhs.cast527 = ptrtoint %struct.regnode* %334 to i64
  %sub.ptr.rhs.cast528 = ptrtoint %struct.regnode* %336 to i64
  %sub.ptr.sub529 = sub i64 %sub.ptr.lhs.cast527, %sub.ptr.rhs.cast528
  %sub.ptr.div530 = sdiv exact i64 %sub.ptr.sub529, 4
  %cmp531 = icmp slt i64 %sub.ptr.div530, 0
  br i1 %cmp531, label %if.then.533, label %if.else.539

if.then.533:                                      ; preds = %if.then.525
  %337 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %338 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start534 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %338, i32 0, i32 7
  %339 = load %struct.regnode*, %struct.regnode** %emit_start534, align 8
  %sub.ptr.lhs.cast535 = ptrtoint %struct.regnode* %337 to i64
  %sub.ptr.rhs.cast536 = ptrtoint %struct.regnode* %339 to i64
  %sub.ptr.sub537 = sub i64 %sub.ptr.lhs.cast535, %sub.ptr.rhs.cast536
  %sub.ptr.div538 = sdiv exact i64 %sub.ptr.sub537, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i32 0, i32 0), i64 %sub.ptr.div538)
  br label %if.end.549

if.else.539:                                      ; preds = %if.then.525
  %340 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %341 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start540 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %341, i32 0, i32 7
  %342 = load %struct.regnode*, %struct.regnode** %emit_start540, align 8
  %sub.ptr.lhs.cast541 = ptrtoint %struct.regnode* %340 to i64
  %sub.ptr.rhs.cast542 = ptrtoint %struct.regnode* %342 to i64
  %sub.ptr.sub543 = sub i64 %sub.ptr.lhs.cast541, %sub.ptr.rhs.cast542
  %sub.ptr.div544 = sdiv exact i64 %sub.ptr.sub543, 4
  %mul545 = mul nsw i64 2, %sub.ptr.div544
  %343 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx546 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %343, i32 0, i32 2
  %344 = load %struct.regexp*, %struct.regexp** %rx546, align 8
  %offsets547 = getelementptr inbounds %struct.regexp, %struct.regexp* %344, i32 0, i32 7
  %345 = load i32*, i32** %offsets547, align 8
  %arrayidx548 = getelementptr inbounds i32, i32* %345, i64 %mul545
  store i32 2, i32* %arrayidx548, align 4
  br label %if.end.549

if.end.549:                                       ; preds = %if.else.539, %if.then.533
  br label %if.end.550

if.end.550:                                       ; preds = %if.end.549, %sw.bb.508
  br label %sw.epilog

sw.bb.551:                                        ; preds = %sw.bb.249
  %346 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen_zerolen552 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %346, i32 0, i32 15
  %347 = load i32, i32* %seen_zerolen552, align 4
  %inc553 = add nsw i32 %347, 1
  store i32 %inc553, i32* %seen_zerolen552, align 4
  %348 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen554 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %348, i32 0, i32 11
  %349 = load i32, i32* %seen554, align 4
  %or555 = or i32 %349, 2
  store i32 %or555, i32* %seen554, align 4
  %350 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %351 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags556 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %351, i32 0, i32 0
  %352 = load i32, i32* %flags556, align 4
  %and557 = and i32 %352, 2048
  %cmp558 = icmp ne i32 %and557, 0
  %cond560 = select i1 %cmp558, i32 12, i32 11
  %conv561 = trunc i32 %cond560 to i8
  %call562 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %350, i8 zeroext %conv561)
  store %struct.regnode* %call562, %struct.regnode** %ret, align 8
  %353 = load i32*, i32** %flagp.addr, align 8
  %354 = load i32, i32* %353, align 4
  %or563 = or i32 %354, 2
  store i32 %or563, i32* %353, align 4
  %355 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call564 = call i8* @S_nextchar(%struct.RExC_state_t* %355)
  %356 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit565 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %356, i32 0, i32 8
  %357 = load %struct.regnode*, %struct.regnode** %emit565, align 8
  %cmp566 = icmp eq %struct.regnode* %357, @PL_regdummy
  br i1 %cmp566, label %if.end.593, label %if.then.568

if.then.568:                                      ; preds = %sw.bb.551
  %358 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %359 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start569 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %359, i32 0, i32 7
  %360 = load %struct.regnode*, %struct.regnode** %emit_start569, align 8
  %sub.ptr.lhs.cast570 = ptrtoint %struct.regnode* %358 to i64
  %sub.ptr.rhs.cast571 = ptrtoint %struct.regnode* %360 to i64
  %sub.ptr.sub572 = sub i64 %sub.ptr.lhs.cast570, %sub.ptr.rhs.cast571
  %sub.ptr.div573 = sdiv exact i64 %sub.ptr.sub572, 4
  %cmp574 = icmp slt i64 %sub.ptr.div573, 0
  br i1 %cmp574, label %if.then.576, label %if.else.582

if.then.576:                                      ; preds = %if.then.568
  %361 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %362 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start577 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %362, i32 0, i32 7
  %363 = load %struct.regnode*, %struct.regnode** %emit_start577, align 8
  %sub.ptr.lhs.cast578 = ptrtoint %struct.regnode* %361 to i64
  %sub.ptr.rhs.cast579 = ptrtoint %struct.regnode* %363 to i64
  %sub.ptr.sub580 = sub i64 %sub.ptr.lhs.cast578, %sub.ptr.rhs.cast579
  %sub.ptr.div581 = sdiv exact i64 %sub.ptr.sub580, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i32 0, i32 0), i64 %sub.ptr.div581)
  br label %if.end.592

if.else.582:                                      ; preds = %if.then.568
  %364 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %365 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start583 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %365, i32 0, i32 7
  %366 = load %struct.regnode*, %struct.regnode** %emit_start583, align 8
  %sub.ptr.lhs.cast584 = ptrtoint %struct.regnode* %364 to i64
  %sub.ptr.rhs.cast585 = ptrtoint %struct.regnode* %366 to i64
  %sub.ptr.sub586 = sub i64 %sub.ptr.lhs.cast584, %sub.ptr.rhs.cast585
  %sub.ptr.div587 = sdiv exact i64 %sub.ptr.sub586, 4
  %mul588 = mul nsw i64 2, %sub.ptr.div587
  %367 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx589 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %367, i32 0, i32 2
  %368 = load %struct.regexp*, %struct.regexp** %rx589, align 8
  %offsets590 = getelementptr inbounds %struct.regexp, %struct.regexp* %368, i32 0, i32 7
  %369 = load i32*, i32** %offsets590, align 8
  %arrayidx591 = getelementptr inbounds i32, i32* %369, i64 %mul588
  store i32 2, i32* %arrayidx591, align 4
  br label %if.end.592

if.end.592:                                       ; preds = %if.else.582, %if.then.576
  br label %if.end.593

if.end.593:                                       ; preds = %if.end.592, %sw.bb.551
  br label %sw.epilog

sw.bb.594:                                        ; preds = %sw.bb.249
  %370 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %371 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags595 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %371, i32 0, i32 0
  %372 = load i32, i32* %flags595, align 4
  %and596 = and i32 %372, 2048
  %cmp597 = icmp ne i32 %and596, 0
  %cond599 = select i1 %cmp597, i32 23, i32 22
  %conv600 = trunc i32 %cond599 to i8
  %call601 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %370, i8 zeroext %conv600)
  store %struct.regnode* %call601, %struct.regnode** %ret, align 8
  %373 = load i32*, i32** %flagp.addr, align 8
  %374 = load i32, i32* %373, align 4
  %or602 = or i32 %374, 3
  store i32 %or602, i32* %373, align 4
  %375 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call603 = call i8* @S_nextchar(%struct.RExC_state_t* %375)
  %376 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit604 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %376, i32 0, i32 8
  %377 = load %struct.regnode*, %struct.regnode** %emit604, align 8
  %cmp605 = icmp eq %struct.regnode* %377, @PL_regdummy
  br i1 %cmp605, label %if.end.632, label %if.then.607

if.then.607:                                      ; preds = %sw.bb.594
  %378 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %379 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start608 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %379, i32 0, i32 7
  %380 = load %struct.regnode*, %struct.regnode** %emit_start608, align 8
  %sub.ptr.lhs.cast609 = ptrtoint %struct.regnode* %378 to i64
  %sub.ptr.rhs.cast610 = ptrtoint %struct.regnode* %380 to i64
  %sub.ptr.sub611 = sub i64 %sub.ptr.lhs.cast609, %sub.ptr.rhs.cast610
  %sub.ptr.div612 = sdiv exact i64 %sub.ptr.sub611, 4
  %cmp613 = icmp slt i64 %sub.ptr.div612, 0
  br i1 %cmp613, label %if.then.615, label %if.else.621

if.then.615:                                      ; preds = %if.then.607
  %381 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %382 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start616 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %382, i32 0, i32 7
  %383 = load %struct.regnode*, %struct.regnode** %emit_start616, align 8
  %sub.ptr.lhs.cast617 = ptrtoint %struct.regnode* %381 to i64
  %sub.ptr.rhs.cast618 = ptrtoint %struct.regnode* %383 to i64
  %sub.ptr.sub619 = sub i64 %sub.ptr.lhs.cast617, %sub.ptr.rhs.cast618
  %sub.ptr.div620 = sdiv exact i64 %sub.ptr.sub619, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i32 0, i32 0), i64 %sub.ptr.div620)
  br label %if.end.631

if.else.621:                                      ; preds = %if.then.607
  %384 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %385 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start622 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %385, i32 0, i32 7
  %386 = load %struct.regnode*, %struct.regnode** %emit_start622, align 8
  %sub.ptr.lhs.cast623 = ptrtoint %struct.regnode* %384 to i64
  %sub.ptr.rhs.cast624 = ptrtoint %struct.regnode* %386 to i64
  %sub.ptr.sub625 = sub i64 %sub.ptr.lhs.cast623, %sub.ptr.rhs.cast624
  %sub.ptr.div626 = sdiv exact i64 %sub.ptr.sub625, 4
  %mul627 = mul nsw i64 2, %sub.ptr.div626
  %387 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx628 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %387, i32 0, i32 2
  %388 = load %struct.regexp*, %struct.regexp** %rx628, align 8
  %offsets629 = getelementptr inbounds %struct.regexp, %struct.regexp* %388, i32 0, i32 7
  %389 = load i32*, i32** %offsets629, align 8
  %arrayidx630 = getelementptr inbounds i32, i32* %389, i64 %mul627
  store i32 2, i32* %arrayidx630, align 4
  br label %if.end.631

if.end.631:                                       ; preds = %if.else.621, %if.then.615
  br label %if.end.632

if.end.632:                                       ; preds = %if.end.631, %sw.bb.594
  br label %sw.epilog

sw.bb.633:                                        ; preds = %sw.bb.249
  %390 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %391 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags634 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %391, i32 0, i32 0
  %392 = load i32, i32* %flags634, align 4
  %and635 = and i32 %392, 2048
  %cmp636 = icmp ne i32 %and635, 0
  %cond638 = select i1 %cmp636, i32 25, i32 24
  %conv639 = trunc i32 %cond638 to i8
  %call640 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %390, i8 zeroext %conv639)
  store %struct.regnode* %call640, %struct.regnode** %ret, align 8
  %393 = load i32*, i32** %flagp.addr, align 8
  %394 = load i32, i32* %393, align 4
  %or641 = or i32 %394, 3
  store i32 %or641, i32* %393, align 4
  %395 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call642 = call i8* @S_nextchar(%struct.RExC_state_t* %395)
  %396 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit643 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %396, i32 0, i32 8
  %397 = load %struct.regnode*, %struct.regnode** %emit643, align 8
  %cmp644 = icmp eq %struct.regnode* %397, @PL_regdummy
  br i1 %cmp644, label %if.end.671, label %if.then.646

if.then.646:                                      ; preds = %sw.bb.633
  %398 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %399 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start647 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %399, i32 0, i32 7
  %400 = load %struct.regnode*, %struct.regnode** %emit_start647, align 8
  %sub.ptr.lhs.cast648 = ptrtoint %struct.regnode* %398 to i64
  %sub.ptr.rhs.cast649 = ptrtoint %struct.regnode* %400 to i64
  %sub.ptr.sub650 = sub i64 %sub.ptr.lhs.cast648, %sub.ptr.rhs.cast649
  %sub.ptr.div651 = sdiv exact i64 %sub.ptr.sub650, 4
  %cmp652 = icmp slt i64 %sub.ptr.div651, 0
  br i1 %cmp652, label %if.then.654, label %if.else.660

if.then.654:                                      ; preds = %if.then.646
  %401 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %402 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start655 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %402, i32 0, i32 7
  %403 = load %struct.regnode*, %struct.regnode** %emit_start655, align 8
  %sub.ptr.lhs.cast656 = ptrtoint %struct.regnode* %401 to i64
  %sub.ptr.rhs.cast657 = ptrtoint %struct.regnode* %403 to i64
  %sub.ptr.sub658 = sub i64 %sub.ptr.lhs.cast656, %sub.ptr.rhs.cast657
  %sub.ptr.div659 = sdiv exact i64 %sub.ptr.sub658, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i32 0, i32 0), i64 %sub.ptr.div659)
  br label %if.end.670

if.else.660:                                      ; preds = %if.then.646
  %404 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %405 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start661 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %405, i32 0, i32 7
  %406 = load %struct.regnode*, %struct.regnode** %emit_start661, align 8
  %sub.ptr.lhs.cast662 = ptrtoint %struct.regnode* %404 to i64
  %sub.ptr.rhs.cast663 = ptrtoint %struct.regnode* %406 to i64
  %sub.ptr.sub664 = sub i64 %sub.ptr.lhs.cast662, %sub.ptr.rhs.cast663
  %sub.ptr.div665 = sdiv exact i64 %sub.ptr.sub664, 4
  %mul666 = mul nsw i64 2, %sub.ptr.div665
  %407 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx667 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %407, i32 0, i32 2
  %408 = load %struct.regexp*, %struct.regexp** %rx667, align 8
  %offsets668 = getelementptr inbounds %struct.regexp, %struct.regexp* %408, i32 0, i32 7
  %409 = load i32*, i32** %offsets668, align 8
  %arrayidx669 = getelementptr inbounds i32, i32* %409, i64 %mul666
  store i32 2, i32* %arrayidx669, align 4
  br label %if.end.670

if.end.670:                                       ; preds = %if.else.660, %if.then.654
  br label %if.end.671

if.end.671:                                       ; preds = %if.end.670, %sw.bb.633
  br label %sw.epilog

sw.bb.672:                                        ; preds = %sw.bb.249
  %410 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call673 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %410, i8 zeroext 26)
  store %struct.regnode* %call673, %struct.regnode** %ret, align 8
  %411 = load i32*, i32** %flagp.addr, align 8
  %412 = load i32, i32* %411, align 4
  %or674 = or i32 %412, 3
  store i32 %or674, i32* %411, align 4
  %413 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call675 = call i8* @S_nextchar(%struct.RExC_state_t* %413)
  %414 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit676 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %414, i32 0, i32 8
  %415 = load %struct.regnode*, %struct.regnode** %emit676, align 8
  %cmp677 = icmp eq %struct.regnode* %415, @PL_regdummy
  br i1 %cmp677, label %if.end.704, label %if.then.679

if.then.679:                                      ; preds = %sw.bb.672
  %416 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %417 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start680 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %417, i32 0, i32 7
  %418 = load %struct.regnode*, %struct.regnode** %emit_start680, align 8
  %sub.ptr.lhs.cast681 = ptrtoint %struct.regnode* %416 to i64
  %sub.ptr.rhs.cast682 = ptrtoint %struct.regnode* %418 to i64
  %sub.ptr.sub683 = sub i64 %sub.ptr.lhs.cast681, %sub.ptr.rhs.cast682
  %sub.ptr.div684 = sdiv exact i64 %sub.ptr.sub683, 4
  %cmp685 = icmp slt i64 %sub.ptr.div684, 0
  br i1 %cmp685, label %if.then.687, label %if.else.693

if.then.687:                                      ; preds = %if.then.679
  %419 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %420 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start688 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %420, i32 0, i32 7
  %421 = load %struct.regnode*, %struct.regnode** %emit_start688, align 8
  %sub.ptr.lhs.cast689 = ptrtoint %struct.regnode* %419 to i64
  %sub.ptr.rhs.cast690 = ptrtoint %struct.regnode* %421 to i64
  %sub.ptr.sub691 = sub i64 %sub.ptr.lhs.cast689, %sub.ptr.rhs.cast690
  %sub.ptr.div692 = sdiv exact i64 %sub.ptr.sub691, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i32 0, i32 0), i64 %sub.ptr.div692)
  br label %if.end.703

if.else.693:                                      ; preds = %if.then.679
  %422 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %423 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start694 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %423, i32 0, i32 7
  %424 = load %struct.regnode*, %struct.regnode** %emit_start694, align 8
  %sub.ptr.lhs.cast695 = ptrtoint %struct.regnode* %422 to i64
  %sub.ptr.rhs.cast696 = ptrtoint %struct.regnode* %424 to i64
  %sub.ptr.sub697 = sub i64 %sub.ptr.lhs.cast695, %sub.ptr.rhs.cast696
  %sub.ptr.div698 = sdiv exact i64 %sub.ptr.sub697, 4
  %mul699 = mul nsw i64 2, %sub.ptr.div698
  %425 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx700 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %425, i32 0, i32 2
  %426 = load %struct.regexp*, %struct.regexp** %rx700, align 8
  %offsets701 = getelementptr inbounds %struct.regexp, %struct.regexp* %426, i32 0, i32 7
  %427 = load i32*, i32** %offsets701, align 8
  %arrayidx702 = getelementptr inbounds i32, i32* %427, i64 %mul699
  store i32 2, i32* %arrayidx702, align 4
  br label %if.end.703

if.end.703:                                       ; preds = %if.else.693, %if.then.687
  br label %if.end.704

if.end.704:                                       ; preds = %if.end.703, %sw.bb.672
  br label %sw.epilog

sw.bb.705:                                        ; preds = %sw.bb.249
  %428 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call706 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %428, i8 zeroext 28)
  store %struct.regnode* %call706, %struct.regnode** %ret, align 8
  %429 = load i32*, i32** %flagp.addr, align 8
  %430 = load i32, i32* %429, align 4
  %or707 = or i32 %430, 3
  store i32 %or707, i32* %429, align 4
  %431 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call708 = call i8* @S_nextchar(%struct.RExC_state_t* %431)
  %432 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit709 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %432, i32 0, i32 8
  %433 = load %struct.regnode*, %struct.regnode** %emit709, align 8
  %cmp710 = icmp eq %struct.regnode* %433, @PL_regdummy
  br i1 %cmp710, label %if.end.737, label %if.then.712

if.then.712:                                      ; preds = %sw.bb.705
  %434 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %435 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start713 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %435, i32 0, i32 7
  %436 = load %struct.regnode*, %struct.regnode** %emit_start713, align 8
  %sub.ptr.lhs.cast714 = ptrtoint %struct.regnode* %434 to i64
  %sub.ptr.rhs.cast715 = ptrtoint %struct.regnode* %436 to i64
  %sub.ptr.sub716 = sub i64 %sub.ptr.lhs.cast714, %sub.ptr.rhs.cast715
  %sub.ptr.div717 = sdiv exact i64 %sub.ptr.sub716, 4
  %cmp718 = icmp slt i64 %sub.ptr.div717, 0
  br i1 %cmp718, label %if.then.720, label %if.else.726

if.then.720:                                      ; preds = %if.then.712
  %437 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %438 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start721 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %438, i32 0, i32 7
  %439 = load %struct.regnode*, %struct.regnode** %emit_start721, align 8
  %sub.ptr.lhs.cast722 = ptrtoint %struct.regnode* %437 to i64
  %sub.ptr.rhs.cast723 = ptrtoint %struct.regnode* %439 to i64
  %sub.ptr.sub724 = sub i64 %sub.ptr.lhs.cast722, %sub.ptr.rhs.cast723
  %sub.ptr.div725 = sdiv exact i64 %sub.ptr.sub724, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i32 0, i32 0), i64 %sub.ptr.div725)
  br label %if.end.736

if.else.726:                                      ; preds = %if.then.712
  %440 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %441 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start727 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %441, i32 0, i32 7
  %442 = load %struct.regnode*, %struct.regnode** %emit_start727, align 8
  %sub.ptr.lhs.cast728 = ptrtoint %struct.regnode* %440 to i64
  %sub.ptr.rhs.cast729 = ptrtoint %struct.regnode* %442 to i64
  %sub.ptr.sub730 = sub i64 %sub.ptr.lhs.cast728, %sub.ptr.rhs.cast729
  %sub.ptr.div731 = sdiv exact i64 %sub.ptr.sub730, 4
  %mul732 = mul nsw i64 2, %sub.ptr.div731
  %443 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx733 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %443, i32 0, i32 2
  %444 = load %struct.regexp*, %struct.regexp** %rx733, align 8
  %offsets734 = getelementptr inbounds %struct.regexp, %struct.regexp* %444, i32 0, i32 7
  %445 = load i32*, i32** %offsets734, align 8
  %arrayidx735 = getelementptr inbounds i32, i32* %445, i64 %mul732
  store i32 2, i32* %arrayidx735, align 4
  br label %if.end.736

if.end.736:                                       ; preds = %if.else.726, %if.then.720
  br label %if.end.737

if.end.737:                                       ; preds = %if.end.736, %sw.bb.705
  br label %sw.epilog

sw.bb.738:                                        ; preds = %sw.bb.249, %sw.bb.249
  %446 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end739 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %446, i32 0, i32 4
  %447 = load i8*, i8** %end739, align 8
  store i8* %447, i8** %oldregxend, align 8
  %448 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse741 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %448, i32 0, i32 5
  %449 = load i8*, i8** %parse741, align 8
  %add.ptr742 = getelementptr inbounds i8, i8* %449, i64 -2
  store i8* %add.ptr742, i8** %parse_start740, align 8
  %450 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse743 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %450, i32 0, i32 5
  %451 = load i8*, i8** %parse743, align 8
  %arrayidx744 = getelementptr inbounds i8, i8* %451, i64 1
  %452 = load i8, i8* %arrayidx744, align 1
  %conv745 = sext i8 %452 to i32
  %cmp746 = icmp eq i32 %conv745, 123
  br i1 %cmp746, label %if.then.748, label %if.else.779

if.then.748:                                      ; preds = %sw.bb.738
  %453 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse749 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %453, i32 0, i32 5
  %454 = load i8*, i8** %parse749, align 8
  %call750 = call i8* @strchr(i8* %454, i32 125)
  %455 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end751 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %455, i32 0, i32 4
  store i8* %call750, i8** %end751, align 8
  %456 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end752 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %456, i32 0, i32 4
  %457 = load i8*, i8** %end752, align 8
  %tobool753 = icmp ne i8* %457, null
  br i1 %tobool753, label %if.end.776, label %if.then.754

if.then.754:                                      ; preds = %if.then.748
  %458 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse755 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %458, i32 0, i32 5
  %459 = load i8*, i8** %parse755, align 8
  %460 = load i8, i8* %459, align 1
  store i8 %460, i8* %c, align 1
  %461 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse756 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %461, i32 0, i32 5
  %462 = load i8*, i8** %parse756, align 8
  %add.ptr757 = getelementptr inbounds i8, i8* %462, i64 2
  store i8* %add.ptr757, i8** %parse756, align 8
  %463 = load i8*, i8** %oldregxend, align 8
  %464 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end758 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %464, i32 0, i32 4
  store i8* %463, i8** %end758, align 8
  %465 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit759 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %465, i32 0, i32 8
  %466 = load %struct.regnode*, %struct.regnode** %emit759, align 8
  %cmp760 = icmp eq %struct.regnode* %466, @PL_regdummy
  br i1 %cmp760, label %if.end.764, label %if.then.762

if.then.762:                                      ; preds = %if.then.754
  %467 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx763 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %467, i32 0, i32 2
  %468 = load %struct.regexp*, %struct.regexp** %rx763, align 8
  %469 = bitcast %struct.regexp* %468 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %469)
  br label %if.end.764

if.end.764:                                       ; preds = %if.then.762, %if.then.754
  %470 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse766 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %470, i32 0, i32 5
  %471 = load i8*, i8** %parse766, align 8
  %472 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp767 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %472, i32 0, i32 1
  %473 = load i8*, i8** %precomp767, align 8
  %sub.ptr.lhs.cast768 = ptrtoint i8* %471 to i64
  %sub.ptr.rhs.cast769 = ptrtoint i8* %473 to i64
  %sub.ptr.sub770 = sub i64 %sub.ptr.lhs.cast768, %sub.ptr.rhs.cast769
  store i64 %sub.ptr.sub770, i64* %offset765, align 8
  %474 = load i8, i8* %c, align 1
  %conv771 = zext i8 %474 to i32
  %475 = load i64, i64* %offset765, align 8
  %conv772 = trunc i64 %475 to i32
  %476 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp773 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %476, i32 0, i32 1
  %477 = load i8*, i8** %precomp773, align 8
  %478 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp774 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %478, i32 0, i32 1
  %479 = load i8*, i8** %precomp774, align 8
  %480 = load i64, i64* %offset765, align 8
  %add.ptr775 = getelementptr inbounds i8, i8* %479, i64 %480
  call void (i8*, i8*, ...) @S_re_croak2(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.16, i32 0, i32 0), i32 %conv771, i32 %conv772, i8* %477, i8* %add.ptr775)
  br label %if.end.776

if.end.776:                                       ; preds = %if.end.764, %if.then.748
  %481 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end777 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %481, i32 0, i32 4
  %482 = load i8*, i8** %end777, align 8
  %incdec.ptr778 = getelementptr inbounds i8, i8* %482, i32 1
  store i8* %incdec.ptr778, i8** %end777, align 8
  br label %if.end.789

if.else.779:                                      ; preds = %sw.bb.738
  %483 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse780 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %483, i32 0, i32 5
  %484 = load i8*, i8** %parse780, align 8
  %add.ptr781 = getelementptr inbounds i8, i8* %484, i64 2
  %485 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end782 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %485, i32 0, i32 4
  store i8* %add.ptr781, i8** %end782, align 8
  %486 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end783 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %486, i32 0, i32 4
  %487 = load i8*, i8** %end783, align 8
  %488 = load i8*, i8** %oldregxend, align 8
  %cmp784 = icmp ugt i8* %487, %488
  br i1 %cmp784, label %if.then.786, label %if.end.788

if.then.786:                                      ; preds = %if.else.779
  %489 = load i8*, i8** %oldregxend, align 8
  %490 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end787 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %490, i32 0, i32 4
  store i8* %489, i8** %end787, align 8
  br label %if.end.788

if.end.788:                                       ; preds = %if.then.786, %if.else.779
  br label %if.end.789

if.end.789:                                       ; preds = %if.end.788, %if.end.776
  %491 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse790 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %491, i32 0, i32 5
  %492 = load i8*, i8** %parse790, align 8
  %incdec.ptr791 = getelementptr inbounds i8, i8* %492, i32 -1
  store i8* %incdec.ptr791, i8** %parse790, align 8
  %493 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call792 = call %struct.regnode* @S_regclass(%struct.RExC_state_t* %493)
  store %struct.regnode* %call792, %struct.regnode** %ret, align 8
  %494 = load i8*, i8** %oldregxend, align 8
  %495 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end793 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %495, i32 0, i32 4
  store i8* %494, i8** %end793, align 8
  %496 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse794 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %496, i32 0, i32 5
  %497 = load i8*, i8** %parse794, align 8
  %incdec.ptr795 = getelementptr inbounds i8, i8* %497, i32 -1
  store i8* %incdec.ptr795, i8** %parse794, align 8
  %498 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit796 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %498, i32 0, i32 8
  %499 = load %struct.regnode*, %struct.regnode** %emit796, align 8
  %cmp797 = icmp eq %struct.regnode* %499, @PL_regdummy
  br i1 %cmp797, label %if.end.829, label %if.then.799

if.then.799:                                      ; preds = %if.end.789
  %500 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %501 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start800 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %501, i32 0, i32 7
  %502 = load %struct.regnode*, %struct.regnode** %emit_start800, align 8
  %sub.ptr.lhs.cast801 = ptrtoint %struct.regnode* %500 to i64
  %sub.ptr.rhs.cast802 = ptrtoint %struct.regnode* %502 to i64
  %sub.ptr.sub803 = sub i64 %sub.ptr.lhs.cast801, %sub.ptr.rhs.cast802
  %sub.ptr.div804 = sdiv exact i64 %sub.ptr.sub803, 4
  %cmp805 = icmp slt i64 %sub.ptr.div804, 0
  br i1 %cmp805, label %if.then.807, label %if.else.813

if.then.807:                                      ; preds = %if.then.799
  %503 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %504 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start808 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %504, i32 0, i32 7
  %505 = load %struct.regnode*, %struct.regnode** %emit_start808, align 8
  %sub.ptr.lhs.cast809 = ptrtoint %struct.regnode* %503 to i64
  %sub.ptr.rhs.cast810 = ptrtoint %struct.regnode* %505 to i64
  %sub.ptr.sub811 = sub i64 %sub.ptr.lhs.cast809, %sub.ptr.rhs.cast810
  %sub.ptr.div812 = sdiv exact i64 %sub.ptr.sub811, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.28, i32 0, i32 0), i64 %sub.ptr.div812)
  br label %if.end.828

if.else.813:                                      ; preds = %if.then.799
  %506 = load i8*, i8** %parse_start740, align 8
  %add.ptr814 = getelementptr inbounds i8, i8* %506, i64 2
  %507 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %start = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %507, i32 0, i32 3
  %508 = load i8*, i8** %start, align 8
  %sub.ptr.lhs.cast815 = ptrtoint i8* %add.ptr814 to i64
  %sub.ptr.rhs.cast816 = ptrtoint i8* %508 to i64
  %sub.ptr.sub817 = sub i64 %sub.ptr.lhs.cast815, %sub.ptr.rhs.cast816
  %conv818 = trunc i64 %sub.ptr.sub817 to i32
  %509 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %510 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start819 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %510, i32 0, i32 7
  %511 = load %struct.regnode*, %struct.regnode** %emit_start819, align 8
  %sub.ptr.lhs.cast820 = ptrtoint %struct.regnode* %509 to i64
  %sub.ptr.rhs.cast821 = ptrtoint %struct.regnode* %511 to i64
  %sub.ptr.sub822 = sub i64 %sub.ptr.lhs.cast820, %sub.ptr.rhs.cast821
  %sub.ptr.div823 = sdiv exact i64 %sub.ptr.sub822, 4
  %mul824 = mul nsw i64 2, %sub.ptr.div823
  %sub = sub nsw i64 %mul824, 1
  %512 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx825 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %512, i32 0, i32 2
  %513 = load %struct.regexp*, %struct.regexp** %rx825, align 8
  %offsets826 = getelementptr inbounds %struct.regexp, %struct.regexp* %513, i32 0, i32 7
  %514 = load i32*, i32** %offsets826, align 8
  %arrayidx827 = getelementptr inbounds i32, i32* %514, i64 %sub
  store i32 %conv818, i32* %arrayidx827, align 4
  br label %if.end.828

if.end.828:                                       ; preds = %if.else.813, %if.then.807
  br label %if.end.829

if.end.829:                                       ; preds = %if.end.828, %if.end.789
  %515 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit830 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %515, i32 0, i32 8
  %516 = load %struct.regnode*, %struct.regnode** %emit830, align 8
  %cmp831 = icmp eq %struct.regnode* %516, @PL_regdummy
  br i1 %cmp831, label %if.end.863, label %if.then.833

if.then.833:                                      ; preds = %if.end.829
  %517 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %518 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start834 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %518, i32 0, i32 7
  %519 = load %struct.regnode*, %struct.regnode** %emit_start834, align 8
  %sub.ptr.lhs.cast835 = ptrtoint %struct.regnode* %517 to i64
  %sub.ptr.rhs.cast836 = ptrtoint %struct.regnode* %519 to i64
  %sub.ptr.sub837 = sub i64 %sub.ptr.lhs.cast835, %sub.ptr.rhs.cast836
  %sub.ptr.div838 = sdiv exact i64 %sub.ptr.sub837, 4
  %cmp839 = icmp slt i64 %sub.ptr.div838, 0
  br i1 %cmp839, label %if.then.841, label %if.else.847

if.then.841:                                      ; preds = %if.then.833
  %520 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %521 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start842 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %521, i32 0, i32 7
  %522 = load %struct.regnode*, %struct.regnode** %emit_start842, align 8
  %sub.ptr.lhs.cast843 = ptrtoint %struct.regnode* %520 to i64
  %sub.ptr.rhs.cast844 = ptrtoint %struct.regnode* %522 to i64
  %sub.ptr.sub845 = sub i64 %sub.ptr.lhs.cast843, %sub.ptr.rhs.cast844
  %sub.ptr.div846 = sdiv exact i64 %sub.ptr.sub845, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i32 0, i32 0), i64 %sub.ptr.div846)
  br label %if.end.862

if.else.847:                                      ; preds = %if.then.833
  %523 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse848 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %523, i32 0, i32 5
  %524 = load i8*, i8** %parse848, align 8
  %525 = load i8*, i8** %parse_start740, align 8
  %sub.ptr.lhs.cast849 = ptrtoint i8* %524 to i64
  %sub.ptr.rhs.cast850 = ptrtoint i8* %525 to i64
  %sub.ptr.sub851 = sub i64 %sub.ptr.lhs.cast849, %sub.ptr.rhs.cast850
  %conv852 = trunc i64 %sub.ptr.sub851 to i32
  %526 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %527 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start853 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %527, i32 0, i32 7
  %528 = load %struct.regnode*, %struct.regnode** %emit_start853, align 8
  %sub.ptr.lhs.cast854 = ptrtoint %struct.regnode* %526 to i64
  %sub.ptr.rhs.cast855 = ptrtoint %struct.regnode* %528 to i64
  %sub.ptr.sub856 = sub i64 %sub.ptr.lhs.cast854, %sub.ptr.rhs.cast855
  %sub.ptr.div857 = sdiv exact i64 %sub.ptr.sub856, 4
  %mul858 = mul nsw i64 2, %sub.ptr.div857
  %529 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx859 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %529, i32 0, i32 2
  %530 = load %struct.regexp*, %struct.regexp** %rx859, align 8
  %offsets860 = getelementptr inbounds %struct.regexp, %struct.regexp* %530, i32 0, i32 7
  %531 = load i32*, i32** %offsets860, align 8
  %arrayidx861 = getelementptr inbounds i32, i32* %531, i64 %mul858
  store i32 %conv852, i32* %arrayidx861, align 4
  br label %if.end.862

if.end.862:                                       ; preds = %if.else.847, %if.then.841
  br label %if.end.863

if.end.863:                                       ; preds = %if.end.862, %if.end.829
  %532 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call864 = call i8* @S_nextchar(%struct.RExC_state_t* %532)
  %533 = load i32*, i32** %flagp.addr, align 8
  %534 = load i32, i32* %533, align 4
  %or865 = or i32 %534, 3
  store i32 %or865, i32* %533, align 4
  br label %sw.epilog

sw.bb.866:                                        ; preds = %sw.bb.249, %sw.bb.249, %sw.bb.249, %sw.bb.249, %sw.bb.249, %sw.bb.249, %sw.bb.249, %sw.bb.249, %sw.bb.249
  br label %defchar

sw.bb.867:                                        ; preds = %sw.bb.249, %sw.bb.249, %sw.bb.249, %sw.bb.249, %sw.bb.249, %sw.bb.249, %sw.bb.249, %sw.bb.249, %sw.bb.249
  %535 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse868 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %535, i32 0, i32 5
  %536 = load i8*, i8** %parse868, align 8
  %call869 = call i32 @atoi(i8* %536)
  store i32 %call869, i32* %num, align 4
  %537 = load i32, i32* %num, align 4
  %cmp870 = icmp sgt i32 %537, 9
  br i1 %cmp870, label %land.lhs.true, label %if.else.875

land.lhs.true:                                    ; preds = %sw.bb.867
  %538 = load i32, i32* %num, align 4
  %539 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %npar = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %539, i32 0, i32 13
  %540 = load i32, i32* %npar, align 4
  %cmp872 = icmp sge i32 %538, %540
  br i1 %cmp872, label %if.then.874, label %if.else.875

if.then.874:                                      ; preds = %land.lhs.true
  br label %defchar

if.else.875:                                      ; preds = %land.lhs.true, %sw.bb.867
  %541 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse877 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %541, i32 0, i32 5
  %542 = load i8*, i8** %parse877, align 8
  %add.ptr878 = getelementptr inbounds i8, i8* %542, i64 -1
  store i8* %add.ptr878, i8** %parse_start876, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else.875
  %543 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse879 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %543, i32 0, i32 5
  %544 = load i8*, i8** %parse879, align 8
  %545 = load i8, i8* %544, align 1
  %conv880 = sext i8 %545 to i32
  %cmp881 = icmp sge i32 %conv880, 48
  br i1 %cmp881, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %546 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse883 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %546, i32 0, i32 5
  %547 = load i8*, i8** %parse883, align 8
  %548 = load i8, i8* %547, align 1
  %conv884 = sext i8 %548 to i32
  %cmp885 = icmp sle i32 %conv884, 57
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %549 = phi i1 [ false, %while.cond ], [ %cmp885, %land.rhs ]
  br i1 %549, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %550 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse887 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %550, i32 0, i32 5
  %551 = load i8*, i8** %parse887, align 8
  %incdec.ptr888 = getelementptr inbounds i8, i8* %551, i32 1
  store i8* %incdec.ptr888, i8** %parse887, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %552 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit889 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %552, i32 0, i32 8
  %553 = load %struct.regnode*, %struct.regnode** %emit889, align 8
  %cmp890 = icmp eq %struct.regnode* %553, @PL_regdummy
  br i1 %cmp890, label %if.end.913, label %land.lhs.true.892

land.lhs.true.892:                                ; preds = %while.end
  %554 = load i32, i32* %num, align 4
  %555 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx893 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %555, i32 0, i32 2
  %556 = load %struct.regexp*, %struct.regexp** %rx893, align 8
  %nparens = getelementptr inbounds %struct.regexp, %struct.regexp* %556, i32 0, i32 12
  %557 = load i32, i32* %nparens, align 4
  %cmp894 = icmp sgt i32 %554, %557
  br i1 %cmp894, label %if.then.896, label %if.end.913

if.then.896:                                      ; preds = %land.lhs.true.892
  %558 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit897 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %558, i32 0, i32 8
  %559 = load %struct.regnode*, %struct.regnode** %emit897, align 8
  %cmp898 = icmp eq %struct.regnode* %559, @PL_regdummy
  br i1 %cmp898, label %if.end.902, label %if.then.900

if.then.900:                                      ; preds = %if.then.896
  %560 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx901 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %560, i32 0, i32 2
  %561 = load %struct.regexp*, %struct.regexp** %rx901, align 8
  %562 = bitcast %struct.regexp* %561 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %562)
  br label %if.end.902

if.end.902:                                       ; preds = %if.then.900, %if.then.896
  %563 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse904 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %563, i32 0, i32 5
  %564 = load i8*, i8** %parse904, align 8
  %565 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp905 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %565, i32 0, i32 1
  %566 = load i8*, i8** %precomp905, align 8
  %sub.ptr.lhs.cast906 = ptrtoint i8* %564 to i64
  %sub.ptr.rhs.cast907 = ptrtoint i8* %566 to i64
  %sub.ptr.sub908 = sub i64 %sub.ptr.lhs.cast906, %sub.ptr.rhs.cast907
  store i64 %sub.ptr.sub908, i64* %offset903, align 8
  %567 = load i64, i64* %offset903, align 8
  %conv909 = trunc i64 %567 to i32
  %568 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp910 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %568, i32 0, i32 1
  %569 = load i8*, i8** %precomp910, align 8
  %570 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp911 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %570, i32 0, i32 1
  %571 = load i8*, i8** %precomp911, align 8
  %572 = load i64, i64* %offset903, align 8
  %add.ptr912 = getelementptr inbounds i8, i8* %571, i64 %572
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.51, i32 0, i32 0), i32 %conv909, i8* %569, i8* %add.ptr912)
  br label %if.end.913

if.end.913:                                       ; preds = %if.end.902, %land.lhs.true.892, %while.end
  %573 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %sawback = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %573, i32 0, i32 10
  store i32 1, i32* %sawback, align 4
  %574 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %575 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags914 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %575, i32 0, i32 0
  %576 = load i32, i32* %flags914, align 4
  %and915 = and i32 %576, 16384
  %cmp916 = icmp ne i32 %and915, 0
  br i1 %cmp916, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.913
  %577 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags918 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %577, i32 0, i32 0
  %578 = load i32, i32* %flags918, align 4
  %and919 = and i32 %578, 2048
  %cmp920 = icmp ne i32 %and919, 0
  %cond922 = select i1 %cmp920, i32 49, i32 48
  br label %cond.end

cond.false:                                       ; preds = %if.end.913
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond923 = phi i32 [ %cond922, %cond.true ], [ 47, %cond.false ]
  %conv924 = trunc i32 %cond923 to i8
  %579 = load i32, i32* %num, align 4
  %call925 = call %struct.regnode* @S_reganode(%struct.RExC_state_t* %574, i8 zeroext %conv924, i32 %579)
  store %struct.regnode* %call925, %struct.regnode** %ret, align 8
  %580 = load i32*, i32** %flagp.addr, align 8
  %581 = load i32, i32* %580, align 4
  %or926 = or i32 %581, 1
  store i32 %or926, i32* %580, align 4
  %582 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit927 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %582, i32 0, i32 8
  %583 = load %struct.regnode*, %struct.regnode** %emit927, align 8
  %cmp928 = icmp eq %struct.regnode* %583, @PL_regdummy
  br i1 %cmp928, label %if.end.962, label %if.then.930

if.then.930:                                      ; preds = %cond.end
  %584 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %585 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start931 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %585, i32 0, i32 7
  %586 = load %struct.regnode*, %struct.regnode** %emit_start931, align 8
  %sub.ptr.lhs.cast932 = ptrtoint %struct.regnode* %584 to i64
  %sub.ptr.rhs.cast933 = ptrtoint %struct.regnode* %586 to i64
  %sub.ptr.sub934 = sub i64 %sub.ptr.lhs.cast932, %sub.ptr.rhs.cast933
  %sub.ptr.div935 = sdiv exact i64 %sub.ptr.sub934, 4
  %cmp936 = icmp slt i64 %sub.ptr.div935, 0
  br i1 %cmp936, label %if.then.938, label %if.else.944

if.then.938:                                      ; preds = %if.then.930
  %587 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %588 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start939 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %588, i32 0, i32 7
  %589 = load %struct.regnode*, %struct.regnode** %emit_start939, align 8
  %sub.ptr.lhs.cast940 = ptrtoint %struct.regnode* %587 to i64
  %sub.ptr.rhs.cast941 = ptrtoint %struct.regnode* %589 to i64
  %sub.ptr.sub942 = sub i64 %sub.ptr.lhs.cast940, %sub.ptr.rhs.cast941
  %sub.ptr.div943 = sdiv exact i64 %sub.ptr.sub942, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.28, i32 0, i32 0), i64 %sub.ptr.div943)
  br label %if.end.961

if.else.944:                                      ; preds = %if.then.930
  %590 = load i8*, i8** %parse_start876, align 8
  %add.ptr945 = getelementptr inbounds i8, i8* %590, i64 1
  %591 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %start946 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %591, i32 0, i32 3
  %592 = load i8*, i8** %start946, align 8
  %sub.ptr.lhs.cast947 = ptrtoint i8* %add.ptr945 to i64
  %sub.ptr.rhs.cast948 = ptrtoint i8* %592 to i64
  %sub.ptr.sub949 = sub i64 %sub.ptr.lhs.cast947, %sub.ptr.rhs.cast948
  %conv950 = trunc i64 %sub.ptr.sub949 to i32
  %593 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %594 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start951 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %594, i32 0, i32 7
  %595 = load %struct.regnode*, %struct.regnode** %emit_start951, align 8
  %sub.ptr.lhs.cast952 = ptrtoint %struct.regnode* %593 to i64
  %sub.ptr.rhs.cast953 = ptrtoint %struct.regnode* %595 to i64
  %sub.ptr.sub954 = sub i64 %sub.ptr.lhs.cast952, %sub.ptr.rhs.cast953
  %sub.ptr.div955 = sdiv exact i64 %sub.ptr.sub954, 4
  %mul956 = mul nsw i64 2, %sub.ptr.div955
  %sub957 = sub nsw i64 %mul956, 1
  %596 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx958 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %596, i32 0, i32 2
  %597 = load %struct.regexp*, %struct.regexp** %rx958, align 8
  %offsets959 = getelementptr inbounds %struct.regexp, %struct.regexp* %597, i32 0, i32 7
  %598 = load i32*, i32** %offsets959, align 8
  %arrayidx960 = getelementptr inbounds i32, i32* %598, i64 %sub957
  store i32 %conv950, i32* %arrayidx960, align 4
  br label %if.end.961

if.end.961:                                       ; preds = %if.else.944, %if.then.938
  br label %if.end.962

if.end.962:                                       ; preds = %if.end.961, %cond.end
  %599 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit963 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %599, i32 0, i32 8
  %600 = load %struct.regnode*, %struct.regnode** %emit963, align 8
  %cmp964 = icmp eq %struct.regnode* %600, @PL_regdummy
  br i1 %cmp964, label %if.end.996, label %if.then.966

if.then.966:                                      ; preds = %if.end.962
  %601 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %602 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start967 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %602, i32 0, i32 7
  %603 = load %struct.regnode*, %struct.regnode** %emit_start967, align 8
  %sub.ptr.lhs.cast968 = ptrtoint %struct.regnode* %601 to i64
  %sub.ptr.rhs.cast969 = ptrtoint %struct.regnode* %603 to i64
  %sub.ptr.sub970 = sub i64 %sub.ptr.lhs.cast968, %sub.ptr.rhs.cast969
  %sub.ptr.div971 = sdiv exact i64 %sub.ptr.sub970, 4
  %cmp972 = icmp slt i64 %sub.ptr.div971, 0
  br i1 %cmp972, label %if.then.974, label %if.else.980

if.then.974:                                      ; preds = %if.then.966
  %604 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %605 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start975 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %605, i32 0, i32 7
  %606 = load %struct.regnode*, %struct.regnode** %emit_start975, align 8
  %sub.ptr.lhs.cast976 = ptrtoint %struct.regnode* %604 to i64
  %sub.ptr.rhs.cast977 = ptrtoint %struct.regnode* %606 to i64
  %sub.ptr.sub978 = sub i64 %sub.ptr.lhs.cast976, %sub.ptr.rhs.cast977
  %sub.ptr.div979 = sdiv exact i64 %sub.ptr.sub978, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i32 0, i32 0), i64 %sub.ptr.div979)
  br label %if.end.995

if.else.980:                                      ; preds = %if.then.966
  %607 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse981 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %607, i32 0, i32 5
  %608 = load i8*, i8** %parse981, align 8
  %609 = load i8*, i8** %parse_start876, align 8
  %sub.ptr.lhs.cast982 = ptrtoint i8* %608 to i64
  %sub.ptr.rhs.cast983 = ptrtoint i8* %609 to i64
  %sub.ptr.sub984 = sub i64 %sub.ptr.lhs.cast982, %sub.ptr.rhs.cast983
  %conv985 = trunc i64 %sub.ptr.sub984 to i32
  %610 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %611 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start986 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %611, i32 0, i32 7
  %612 = load %struct.regnode*, %struct.regnode** %emit_start986, align 8
  %sub.ptr.lhs.cast987 = ptrtoint %struct.regnode* %610 to i64
  %sub.ptr.rhs.cast988 = ptrtoint %struct.regnode* %612 to i64
  %sub.ptr.sub989 = sub i64 %sub.ptr.lhs.cast987, %sub.ptr.rhs.cast988
  %sub.ptr.div990 = sdiv exact i64 %sub.ptr.sub989, 4
  %mul991 = mul nsw i64 2, %sub.ptr.div990
  %613 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx992 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %613, i32 0, i32 2
  %614 = load %struct.regexp*, %struct.regexp** %rx992, align 8
  %offsets993 = getelementptr inbounds %struct.regexp, %struct.regexp* %614, i32 0, i32 7
  %615 = load i32*, i32** %offsets993, align 8
  %arrayidx994 = getelementptr inbounds i32, i32* %615, i64 %mul991
  store i32 %conv985, i32* %arrayidx994, align 4
  br label %if.end.995

if.end.995:                                       ; preds = %if.else.980, %if.then.974
  br label %if.end.996

if.end.996:                                       ; preds = %if.end.995, %if.end.962
  %616 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse997 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %616, i32 0, i32 5
  %617 = load i8*, i8** %parse997, align 8
  %incdec.ptr998 = getelementptr inbounds i8, i8* %617, i32 -1
  store i8* %incdec.ptr998, i8** %parse997, align 8
  %618 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call999 = call i8* @S_nextchar(%struct.RExC_state_t* %618)
  br label %if.end.1000

if.end.1000:                                      ; preds = %if.end.996
  br label %sw.epilog

sw.bb.1001:                                       ; preds = %sw.bb.249
  %619 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1002 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %619, i32 0, i32 5
  %620 = load i8*, i8** %parse1002, align 8
  %621 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1003 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %621, i32 0, i32 4
  %622 = load i8*, i8** %end1003, align 8
  %cmp1004 = icmp uge i8* %620, %622
  br i1 %cmp1004, label %if.then.1006, label %if.end.1024

if.then.1006:                                     ; preds = %sw.bb.1001
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8** %ellipses, align 8
  %623 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1007 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %623, i32 0, i32 4
  %624 = load i8*, i8** %end1007, align 8
  %625 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1008 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %625, i32 0, i32 1
  %626 = load i8*, i8** %precomp1008, align 8
  %sub.ptr.lhs.cast1009 = ptrtoint i8* %624 to i64
  %sub.ptr.rhs.cast1010 = ptrtoint i8* %626 to i64
  %sub.ptr.sub1011 = sub i64 %sub.ptr.lhs.cast1009, %sub.ptr.rhs.cast1010
  store i64 %sub.ptr.sub1011, i64* %len, align 8
  %627 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1012 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %627, i32 0, i32 8
  %628 = load %struct.regnode*, %struct.regnode** %emit1012, align 8
  %cmp1013 = icmp eq %struct.regnode* %628, @PL_regdummy
  br i1 %cmp1013, label %if.end.1017, label %if.then.1015

if.then.1015:                                     ; preds = %if.then.1006
  %629 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx1016 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %629, i32 0, i32 2
  %630 = load %struct.regexp*, %struct.regexp** %rx1016, align 8
  %631 = bitcast %struct.regexp* %630 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %631)
  br label %if.end.1017

if.end.1017:                                      ; preds = %if.then.1015, %if.then.1006
  %632 = load i64, i64* %len, align 8
  %cmp1018 = icmp sgt i64 %632, 127
  br i1 %cmp1018, label %if.then.1020, label %if.end.1021

if.then.1020:                                     ; preds = %if.end.1017
  store i64 117, i64* %len, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8** %ellipses, align 8
  br label %if.end.1021

if.end.1021:                                      ; preds = %if.then.1020, %if.end.1017
  %633 = load i64, i64* %len, align 8
  %conv1022 = trunc i64 %633 to i32
  %634 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1023 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %634, i32 0, i32 1
  %635 = load i8*, i8** %precomp1023, align 8
  %636 = load i8*, i8** %ellipses, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.52, i32 0, i32 0), i32 %conv1022, i8* %635, i8* %636)
  br label %if.end.1024

if.end.1024:                                      ; preds = %if.end.1021, %sw.bb.1001
  br label %sw.default

sw.default:                                       ; preds = %sw.bb.249, %if.end.1024
  %637 = load i8*, i8** %parse_start, align 8
  %incdec.ptr1025 = getelementptr inbounds i8, i8* %637, i32 -1
  store i8* %incdec.ptr1025, i8** %parse_start, align 8
  br label %defchar

sw.epilog:                                        ; preds = %if.end.1000, %if.end.863, %if.end.737, %if.end.704, %if.end.671, %if.end.632, %if.end.593, %if.end.550, %if.end.507, %if.end.468, %if.end.430, %if.end.397, %if.end.362, %sw.bb.322, %if.end.321, %if.end.287
  br label %sw.epilog.1537

sw.bb.1026:                                       ; preds = %tryagain
  %638 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1027 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %638, i32 0, i32 0
  %639 = load i32, i32* %flags1027, align 4
  %and1028 = and i32 %639, 32768
  %tobool1029 = icmp ne i32 %and1028, 0
  br i1 %tobool1029, label %if.then.1030, label %if.end.1052

if.then.1030:                                     ; preds = %sw.bb.1026
  br label %while.cond.1031

while.cond.1031:                                  ; preds = %while.body.1042, %if.then.1030
  %640 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1032 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %640, i32 0, i32 5
  %641 = load i8*, i8** %parse1032, align 8
  %642 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1033 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %642, i32 0, i32 4
  %643 = load i8*, i8** %end1033, align 8
  %cmp1034 = icmp ult i8* %641, %643
  br i1 %cmp1034, label %land.rhs.1036, label %land.end.1041

land.rhs.1036:                                    ; preds = %while.cond.1031
  %644 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1037 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %644, i32 0, i32 5
  %645 = load i8*, i8** %parse1037, align 8
  %646 = load i8, i8* %645, align 1
  %conv1038 = sext i8 %646 to i32
  %cmp1039 = icmp ne i32 %conv1038, 10
  br label %land.end.1041

land.end.1041:                                    ; preds = %land.rhs.1036, %while.cond.1031
  %647 = phi i1 [ false, %while.cond.1031 ], [ %cmp1039, %land.rhs.1036 ]
  br i1 %647, label %while.body.1042, label %while.end.1045

while.body.1042:                                  ; preds = %land.end.1041
  %648 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1043 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %648, i32 0, i32 5
  %649 = load i8*, i8** %parse1043, align 8
  %incdec.ptr1044 = getelementptr inbounds i8, i8* %649, i32 1
  store i8* %incdec.ptr1044, i8** %parse1043, align 8
  br label %while.cond.1031

while.end.1045:                                   ; preds = %land.end.1041
  %650 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1046 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %650, i32 0, i32 5
  %651 = load i8*, i8** %parse1046, align 8
  %652 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1047 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %652, i32 0, i32 4
  %653 = load i8*, i8** %end1047, align 8
  %cmp1048 = icmp ult i8* %651, %653
  br i1 %cmp1048, label %if.then.1050, label %if.end.1051

if.then.1050:                                     ; preds = %while.end.1045
  br label %tryagain

if.end.1051:                                      ; preds = %while.end.1045
  br label %if.end.1052

if.end.1052:                                      ; preds = %if.end.1051, %sw.bb.1026
  br label %sw.default.1053

sw.default.1053:                                  ; preds = %tryagain, %if.end.1052
  %654 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1055 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %654, i32 0, i32 5
  %655 = load i8*, i8** %parse1055, align 8
  %add.ptr1056 = getelementptr inbounds i8, i8* %655, i64 -1
  store i8* %add.ptr1056, i8** %parse_start, align 8
  %656 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1057 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %656, i32 0, i32 5
  %657 = load i8*, i8** %parse1057, align 8
  %incdec.ptr1058 = getelementptr inbounds i8, i8* %657, i32 1
  store i8* %incdec.ptr1058, i8** %parse1057, align 8
  br label %defchar

defchar:                                          ; preds = %sw.default.1053, %sw.default, %if.then.874, %sw.bb.866, %if.then.226
  store i64 0, i64* %ender, align 8
  %658 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %659 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1059 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %659, i32 0, i32 0
  %660 = load i32, i32* %flags1059, align 4
  %and1060 = and i32 %660, 16384
  %cmp1061 = icmp ne i32 %and1060, 0
  br i1 %cmp1061, label %cond.true.1063, label %cond.false.1069

cond.true.1063:                                   ; preds = %defchar
  %661 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1064 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %661, i32 0, i32 0
  %662 = load i32, i32* %flags1064, align 4
  %and1065 = and i32 %662, 2048
  %cmp1066 = icmp ne i32 %and1065, 0
  %cond1068 = select i1 %cmp1066, i32 35, i32 34
  br label %cond.end.1070

cond.false.1069:                                  ; preds = %defchar
  br label %cond.end.1070

cond.end.1070:                                    ; preds = %cond.false.1069, %cond.true.1063
  %cond1071 = phi i32 [ %cond1068, %cond.true.1063 ], [ 33, %cond.false.1069 ]
  %conv1072 = trunc i32 %cond1071 to i8
  %call1073 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %658, i8 zeroext %conv1072)
  store %struct.regnode* %call1073, %struct.regnode** %ret, align 8
  %663 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %664 = bitcast %struct.regnode* %663 to %struct.regnode_string*
  %string = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %664, i32 0, i32 3
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %string, i32 0, i32 0
  store i8* %arraydecay, i8** %s, align 8
  store i64 0, i64* %len1054, align 8
  %665 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1074 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %665, i32 0, i32 5
  %666 = load i8*, i8** %parse1074, align 8
  %add.ptr1075 = getelementptr inbounds i8, i8* %666, i64 -1
  store i8* %add.ptr1075, i8** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.1442, %cond.end.1070
  %667 = load i64, i64* %len1054, align 8
  %cmp1076 = icmp ult i64 %667, 127
  br i1 %cmp1076, label %land.rhs.1078, label %land.end.1082

land.rhs.1078:                                    ; preds = %for.cond
  %668 = load i8*, i8** %p, align 8
  %669 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1079 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %669, i32 0, i32 4
  %670 = load i8*, i8** %end1079, align 8
  %cmp1080 = icmp ult i8* %668, %670
  br label %land.end.1082

land.end.1082:                                    ; preds = %land.rhs.1078, %for.cond
  %671 = phi i1 [ false, %for.cond ], [ %cmp1080, %land.rhs.1078 ]
  br i1 %671, label %for.body, label %for.end.1444

for.body:                                         ; preds = %land.end.1082
  %672 = load i8*, i8** %p, align 8
  store i8* %672, i8** %oldp, align 8
  %673 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1083 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %673, i32 0, i32 0
  %674 = load i32, i32* %flags1083, align 4
  %and1084 = and i32 %674, 32768
  %tobool1085 = icmp ne i32 %and1084, 0
  br i1 %tobool1085, label %if.then.1086, label %if.end.1089

if.then.1086:                                     ; preds = %for.body
  %675 = load i8*, i8** %p, align 8
  %676 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1087 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %676, i32 0, i32 4
  %677 = load i8*, i8** %end1087, align 8
  %call1088 = call i8* @S_regwhite(i8* %675, i8* %677)
  store i8* %call1088, i8** %p, align 8
  br label %if.end.1089

if.end.1089:                                      ; preds = %if.then.1086, %for.body
  %678 = load i8*, i8** %p, align 8
  %679 = load i8, i8* %678, align 1
  %conv1090 = sext i8 %679 to i32
  switch i32 %conv1090, label %sw.default.1279 [
    i32 94, label %sw.bb.1091
    i32 36, label %sw.bb.1091
    i32 46, label %sw.bb.1091
    i32 91, label %sw.bb.1091
    i32 40, label %sw.bb.1091
    i32 41, label %sw.bb.1091
    i32 124, label %sw.bb.1091
    i32 92, label %sw.bb.1092
  ]

sw.bb.1091:                                       ; preds = %if.end.1089, %if.end.1089, %if.end.1089, %if.end.1089, %if.end.1089, %if.end.1089, %if.end.1089
  br label %loopdone

sw.bb.1092:                                       ; preds = %if.end.1089
  %680 = load i8*, i8** %p, align 8
  %incdec.ptr1093 = getelementptr inbounds i8, i8* %680, i32 1
  store i8* %incdec.ptr1093, i8** %p, align 8
  %681 = load i8, i8* %incdec.ptr1093, align 1
  %conv1094 = sext i8 %681 to i32
  switch i32 %conv1094, label %sw.default.1220 [
    i32 65, label %sw.bb.1095
    i32 67, label %sw.bb.1095
    i32 88, label %sw.bb.1095
    i32 71, label %sw.bb.1095
    i32 90, label %sw.bb.1095
    i32 122, label %sw.bb.1095
    i32 119, label %sw.bb.1095
    i32 87, label %sw.bb.1095
    i32 98, label %sw.bb.1095
    i32 66, label %sw.bb.1095
    i32 115, label %sw.bb.1095
    i32 83, label %sw.bb.1095
    i32 100, label %sw.bb.1095
    i32 68, label %sw.bb.1095
    i32 112, label %sw.bb.1095
    i32 80, label %sw.bb.1095
    i32 110, label %sw.bb.1097
    i32 114, label %sw.bb.1099
    i32 116, label %sw.bb.1101
    i32 102, label %sw.bb.1103
    i32 101, label %sw.bb.1105
    i32 97, label %sw.bb.1107
    i32 120, label %sw.bb.1109
    i32 99, label %sw.bb.1155
    i32 48, label %sw.bb.1170
    i32 49, label %sw.bb.1170
    i32 50, label %sw.bb.1170
    i32 51, label %sw.bb.1170
    i32 52, label %sw.bb.1170
    i32 53, label %sw.bb.1170
    i32 54, label %sw.bb.1170
    i32 55, label %sw.bb.1170
    i32 56, label %sw.bb.1170
    i32 57, label %sw.bb.1170
    i32 0, label %sw.bb.1195
  ]

sw.bb.1095:                                       ; preds = %sw.bb.1092, %sw.bb.1092, %sw.bb.1092, %sw.bb.1092, %sw.bb.1092, %sw.bb.1092, %sw.bb.1092, %sw.bb.1092, %sw.bb.1092, %sw.bb.1092, %sw.bb.1092, %sw.bb.1092, %sw.bb.1092, %sw.bb.1092, %sw.bb.1092, %sw.bb.1092
  %682 = load i8*, i8** %p, align 8
  %incdec.ptr1096 = getelementptr inbounds i8, i8* %682, i32 -1
  store i8* %incdec.ptr1096, i8** %p, align 8
  br label %loopdone

sw.bb.1097:                                       ; preds = %sw.bb.1092
  store i64 10, i64* %ender, align 8
  %683 = load i8*, i8** %p, align 8
  %incdec.ptr1098 = getelementptr inbounds i8, i8* %683, i32 1
  store i8* %incdec.ptr1098, i8** %p, align 8
  br label %sw.epilog.1278

sw.bb.1099:                                       ; preds = %sw.bb.1092
  store i64 13, i64* %ender, align 8
  %684 = load i8*, i8** %p, align 8
  %incdec.ptr1100 = getelementptr inbounds i8, i8* %684, i32 1
  store i8* %incdec.ptr1100, i8** %p, align 8
  br label %sw.epilog.1278

sw.bb.1101:                                       ; preds = %sw.bb.1092
  store i64 9, i64* %ender, align 8
  %685 = load i8*, i8** %p, align 8
  %incdec.ptr1102 = getelementptr inbounds i8, i8* %685, i32 1
  store i8* %incdec.ptr1102, i8** %p, align 8
  br label %sw.epilog.1278

sw.bb.1103:                                       ; preds = %sw.bb.1092
  store i64 12, i64* %ender, align 8
  %686 = load i8*, i8** %p, align 8
  %incdec.ptr1104 = getelementptr inbounds i8, i8* %686, i32 1
  store i8* %incdec.ptr1104, i8** %p, align 8
  br label %sw.epilog.1278

sw.bb.1105:                                       ; preds = %sw.bb.1092
  store i64 27, i64* %ender, align 8
  %687 = load i8*, i8** %p, align 8
  %incdec.ptr1106 = getelementptr inbounds i8, i8* %687, i32 1
  store i8* %incdec.ptr1106, i8** %p, align 8
  br label %sw.epilog.1278

sw.bb.1107:                                       ; preds = %sw.bb.1092
  store i64 7, i64* %ender, align 8
  %688 = load i8*, i8** %p, align 8
  %incdec.ptr1108 = getelementptr inbounds i8, i8* %688, i32 1
  store i8* %incdec.ptr1108, i8** %p, align 8
  br label %sw.epilog.1278

sw.bb.1109:                                       ; preds = %sw.bb.1092
  %689 = load i8*, i8** %p, align 8
  %incdec.ptr1110 = getelementptr inbounds i8, i8* %689, i32 1
  store i8* %incdec.ptr1110, i8** %p, align 8
  %690 = load i8, i8* %incdec.ptr1110, align 1
  %conv1111 = sext i8 %690 to i32
  %cmp1112 = icmp eq i32 %conv1111, 123
  br i1 %cmp1112, label %if.then.1114, label %if.else.1150

if.then.1114:                                     ; preds = %sw.bb.1109
  %691 = load i8*, i8** %p, align 8
  %call1115 = call i8* @strchr(i8* %691, i32 125)
  store i8* %call1115, i8** %e, align 8
  %692 = load i8*, i8** %e, align 8
  %tobool1116 = icmp ne i8* %692, null
  br i1 %tobool1116, label %if.else.1136, label %if.then.1117

if.then.1117:                                     ; preds = %if.then.1114
  %693 = load i8*, i8** %p, align 8
  %add.ptr1118 = getelementptr inbounds i8, i8* %693, i64 1
  %694 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1119 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %694, i32 0, i32 5
  store i8* %add.ptr1118, i8** %parse1119, align 8
  %695 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1120 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %695, i32 0, i32 8
  %696 = load %struct.regnode*, %struct.regnode** %emit1120, align 8
  %cmp1121 = icmp eq %struct.regnode* %696, @PL_regdummy
  br i1 %cmp1121, label %if.end.1125, label %if.then.1123

if.then.1123:                                     ; preds = %if.then.1117
  %697 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx1124 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %697, i32 0, i32 2
  %698 = load %struct.regexp*, %struct.regexp** %rx1124, align 8
  %699 = bitcast %struct.regexp* %698 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %699)
  br label %if.end.1125

if.end.1125:                                      ; preds = %if.then.1123, %if.then.1117
  %700 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1127 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %700, i32 0, i32 5
  %701 = load i8*, i8** %parse1127, align 8
  %702 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1128 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %702, i32 0, i32 1
  %703 = load i8*, i8** %precomp1128, align 8
  %sub.ptr.lhs.cast1129 = ptrtoint i8* %701 to i64
  %sub.ptr.rhs.cast1130 = ptrtoint i8* %703 to i64
  %sub.ptr.sub1131 = sub i64 %sub.ptr.lhs.cast1129, %sub.ptr.rhs.cast1130
  store i64 %sub.ptr.sub1131, i64* %offset1126, align 8
  %704 = load i64, i64* %offset1126, align 8
  %conv1132 = trunc i64 %704 to i32
  %705 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1133 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %705, i32 0, i32 1
  %706 = load i8*, i8** %precomp1133, align 8
  %707 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1134 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %707, i32 0, i32 1
  %708 = load i8*, i8** %precomp1134, align 8
  %709 = load i64, i64* %offset1126, align 8
  %add.ptr1135 = getelementptr inbounds i8, i8* %708, i64 %709
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.53, i32 0, i32 0), i32 %conv1132, i8* %706, i8* %add.ptr1135)
  br label %if.end.1149

if.else.1136:                                     ; preds = %if.then.1114
  store i32 3, i32* %flags1137, align 4
  %710 = load i8*, i8** %e, align 8
  %711 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast1138 = ptrtoint i8* %710 to i64
  %sub.ptr.rhs.cast1139 = ptrtoint i8* %711 to i64
  %sub.ptr.sub1140 = sub i64 %sub.ptr.lhs.cast1138, %sub.ptr.rhs.cast1139
  %sub1141 = sub nsw i64 %sub.ptr.sub1140, 1
  store i64 %sub1141, i64* %numlen, align 8
  %712 = load i8*, i8** %p, align 8
  %add.ptr1142 = getelementptr inbounds i8, i8* %712, i64 1
  %call1143 = call i64 @Perl_grok_hex(i8* %add.ptr1142, i64* %numlen, i32* %flags1137, double* null)
  store i64 %call1143, i64* %ender, align 8
  %713 = load i64, i64* %ender, align 8
  %cmp1144 = icmp ugt i64 %713, 255
  br i1 %cmp1144, label %if.then.1146, label %if.end.1147

if.then.1146:                                     ; preds = %if.else.1136
  %714 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %714, i32 0, i32 17
  store i32 1, i32* %utf8, align 4
  br label %if.end.1147

if.end.1147:                                      ; preds = %if.then.1146, %if.else.1136
  %715 = load i8*, i8** %e, align 8
  %add.ptr1148 = getelementptr inbounds i8, i8* %715, i64 1
  store i8* %add.ptr1148, i8** %p, align 8
  br label %if.end.1149

if.end.1149:                                      ; preds = %if.end.1147, %if.end.1125
  br label %if.end.1154

if.else.1150:                                     ; preds = %sw.bb.1109
  store i32 2, i32* %flags1151, align 4
  store i64 2, i64* %numlen, align 8
  %716 = load i8*, i8** %p, align 8
  %call1152 = call i64 @Perl_grok_hex(i8* %716, i64* %numlen, i32* %flags1151, double* null)
  store i64 %call1152, i64* %ender, align 8
  %717 = load i64, i64* %numlen, align 8
  %718 = load i8*, i8** %p, align 8
  %add.ptr1153 = getelementptr inbounds i8, i8* %718, i64 %717
  store i8* %add.ptr1153, i8** %p, align 8
  br label %if.end.1154

if.end.1154:                                      ; preds = %if.else.1150, %if.end.1149
  br label %sw.epilog.1278

sw.bb.1155:                                       ; preds = %sw.bb.1092
  %719 = load i8*, i8** %p, align 8
  %incdec.ptr1156 = getelementptr inbounds i8, i8* %719, i32 1
  store i8* %incdec.ptr1156, i8** %p, align 8
  %720 = load i8*, i8** %p, align 8
  %incdec.ptr1157 = getelementptr inbounds i8, i8* %720, i32 1
  store i8* %incdec.ptr1157, i8** %p, align 8
  %721 = load i8, i8* %720, align 1
  %conv1158 = zext i8 %721 to i32
  %conv1159 = sext i32 %conv1158 to i64
  store i64 %conv1159, i64* %ender, align 8
  %722 = load i64, i64* %ender, align 8
  %cmp1160 = icmp uge i64 %722, 97
  br i1 %cmp1160, label %land.lhs.true.1162, label %cond.false.1167

land.lhs.true.1162:                               ; preds = %sw.bb.1155
  %723 = load i64, i64* %ender, align 8
  %cmp1163 = icmp ule i64 %723, 122
  br i1 %cmp1163, label %cond.true.1165, label %cond.false.1167

cond.true.1165:                                   ; preds = %land.lhs.true.1162
  %724 = load i64, i64* %ender, align 8
  %sub1166 = sub i64 %724, 32
  br label %cond.end.1168

cond.false.1167:                                  ; preds = %land.lhs.true.1162, %sw.bb.1155
  %725 = load i64, i64* %ender, align 8
  br label %cond.end.1168

cond.end.1168:                                    ; preds = %cond.false.1167, %cond.true.1165
  %cond1169 = phi i64 [ %sub1166, %cond.true.1165 ], [ %725, %cond.false.1167 ]
  %xor = xor i64 %cond1169, 64
  store i64 %xor, i64* %ender, align 8
  br label %sw.epilog.1278

sw.bb.1170:                                       ; preds = %sw.bb.1092, %sw.bb.1092, %sw.bb.1092, %sw.bb.1092, %sw.bb.1092, %sw.bb.1092, %sw.bb.1092, %sw.bb.1092, %sw.bb.1092, %sw.bb.1092
  %726 = load i8*, i8** %p, align 8
  %727 = load i8, i8* %726, align 1
  %conv1171 = sext i8 %727 to i32
  %cmp1172 = icmp eq i32 %conv1171, 48
  br i1 %cmp1172, label %if.then.1188, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb.1170
  %728 = load i8*, i8** %p, align 8
  %arrayidx1174 = getelementptr inbounds i8, i8* %728, i64 1
  %729 = load i8, i8* %arrayidx1174, align 1
  %conv1175 = sext i8 %729 to i32
  %cmp1176 = icmp sge i32 %conv1175, 48
  br i1 %cmp1176, label %land.lhs.true.1178, label %if.else.1192

land.lhs.true.1178:                               ; preds = %lor.lhs.false
  %730 = load i8*, i8** %p, align 8
  %arrayidx1179 = getelementptr inbounds i8, i8* %730, i64 1
  %731 = load i8, i8* %arrayidx1179, align 1
  %conv1180 = sext i8 %731 to i32
  %cmp1181 = icmp sle i32 %conv1180, 57
  br i1 %cmp1181, label %land.lhs.true.1183, label %if.else.1192

land.lhs.true.1183:                               ; preds = %land.lhs.true.1178
  %732 = load i8*, i8** %p, align 8
  %call1184 = call i32 @atoi(i8* %732)
  %733 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %npar1185 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %733, i32 0, i32 13
  %734 = load i32, i32* %npar1185, align 4
  %cmp1186 = icmp sge i32 %call1184, %734
  br i1 %cmp1186, label %if.then.1188, label %if.else.1192

if.then.1188:                                     ; preds = %land.lhs.true.1183, %sw.bb.1170
  store i32 0, i32* %flags1189, align 4
  store i64 3, i64* %numlen, align 8
  %735 = load i8*, i8** %p, align 8
  %call1190 = call i64 @Perl_grok_oct(i8* %735, i64* %numlen, i32* %flags1189, double* null)
  store i64 %call1190, i64* %ender, align 8
  %736 = load i64, i64* %numlen, align 8
  %737 = load i8*, i8** %p, align 8
  %add.ptr1191 = getelementptr inbounds i8, i8* %737, i64 %736
  store i8* %add.ptr1191, i8** %p, align 8
  br label %if.end.1194

if.else.1192:                                     ; preds = %land.lhs.true.1183, %land.lhs.true.1178, %lor.lhs.false
  %738 = load i8*, i8** %p, align 8
  %incdec.ptr1193 = getelementptr inbounds i8, i8* %738, i32 -1
  store i8* %incdec.ptr1193, i8** %p, align 8
  br label %loopdone

if.end.1194:                                      ; preds = %if.then.1188
  br label %sw.epilog.1278

sw.bb.1195:                                       ; preds = %sw.bb.1092
  %739 = load i8*, i8** %p, align 8
  %740 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1196 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %740, i32 0, i32 4
  %741 = load i8*, i8** %end1196, align 8
  %cmp1197 = icmp uge i8* %739, %741
  br i1 %cmp1197, label %if.then.1199, label %if.end.1219

if.then.1199:                                     ; preds = %sw.bb.1195
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8** %ellipses1200, align 8
  %742 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1202 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %742, i32 0, i32 4
  %743 = load i8*, i8** %end1202, align 8
  %744 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1203 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %744, i32 0, i32 1
  %745 = load i8*, i8** %precomp1203, align 8
  %sub.ptr.lhs.cast1204 = ptrtoint i8* %743 to i64
  %sub.ptr.rhs.cast1205 = ptrtoint i8* %745 to i64
  %sub.ptr.sub1206 = sub i64 %sub.ptr.lhs.cast1204, %sub.ptr.rhs.cast1205
  store i64 %sub.ptr.sub1206, i64* %len1201, align 8
  %746 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1207 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %746, i32 0, i32 8
  %747 = load %struct.regnode*, %struct.regnode** %emit1207, align 8
  %cmp1208 = icmp eq %struct.regnode* %747, @PL_regdummy
  br i1 %cmp1208, label %if.end.1212, label %if.then.1210

if.then.1210:                                     ; preds = %if.then.1199
  %748 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx1211 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %748, i32 0, i32 2
  %749 = load %struct.regexp*, %struct.regexp** %rx1211, align 8
  %750 = bitcast %struct.regexp* %749 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %750)
  br label %if.end.1212

if.end.1212:                                      ; preds = %if.then.1210, %if.then.1199
  %751 = load i64, i64* %len1201, align 8
  %cmp1213 = icmp sgt i64 %751, 127
  br i1 %cmp1213, label %if.then.1215, label %if.end.1216

if.then.1215:                                     ; preds = %if.end.1212
  store i64 117, i64* %len1201, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8** %ellipses1200, align 8
  br label %if.end.1216

if.end.1216:                                      ; preds = %if.then.1215, %if.end.1212
  %752 = load i64, i64* %len1201, align 8
  %conv1217 = trunc i64 %752 to i32
  %753 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1218 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %753, i32 0, i32 1
  %754 = load i8*, i8** %precomp1218, align 8
  %755 = load i8*, i8** %ellipses1200, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.52, i32 0, i32 0), i32 %conv1217, i8* %754, i8* %755)
  br label %if.end.1219

if.end.1219:                                      ; preds = %if.end.1216, %sw.bb.1195
  br label %sw.default.1220

sw.default.1220:                                  ; preds = %sw.bb.1092, %if.end.1219
  %756 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1221 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %756, i32 0, i32 8
  %757 = load %struct.regnode*, %struct.regnode** %emit1221, align 8
  %cmp1222 = icmp eq %struct.regnode* %757, @PL_regdummy
  br i1 %cmp1222, label %if.end.1277, label %land.lhs.true.1224

land.lhs.true.1224:                               ; preds = %sw.default.1220
  %758 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %758, i32 0, i32 14
  %759 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp1225 = icmp ne %struct.sv* %759, null
  br i1 %cmp1225, label %land.lhs.true.1227, label %lor.lhs.false.1241

land.lhs.true.1227:                               ; preds = %land.lhs.true.1224
  %760 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings1228 = getelementptr inbounds %struct.cop, %struct.cop* %760, i32 0, i32 14
  %761 = load %struct.sv*, %struct.sv** %cop_warnings1228, align 8
  %cmp1229 = icmp ne %struct.sv* %761, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp1229, label %land.lhs.true.1231, label %lor.lhs.false.1241

land.lhs.true.1231:                               ; preds = %land.lhs.true.1227
  %762 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings1232 = getelementptr inbounds %struct.cop, %struct.cop* %762, i32 0, i32 14
  %763 = load %struct.sv*, %struct.sv** %cop_warnings1232, align 8
  %cmp1233 = icmp eq %struct.sv* %763, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp1233, label %land.lhs.true.1249, label %lor.lhs.false.1235

lor.lhs.false.1235:                               ; preds = %land.lhs.true.1231
  %764 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings1236 = getelementptr inbounds %struct.cop, %struct.cop* %764, i32 0, i32 14
  %765 = load %struct.sv*, %struct.sv** %cop_warnings1236, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %765, i32 0, i32 0
  %766 = load i8*, i8** %sv_any, align 8
  %767 = bitcast i8* %766 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %767, i32 0, i32 0
  %768 = load i8*, i8** %xpv_pv, align 8
  %arrayidx1237 = getelementptr inbounds i8, i8* %768, i64 5
  %769 = load i8, i8* %arrayidx1237, align 1
  %conv1238 = sext i8 %769 to i32
  %and1239 = and i32 %conv1238, 1
  %tobool1240 = icmp ne i32 %and1239, 0
  br i1 %tobool1240, label %land.lhs.true.1249, label %lor.lhs.false.1241

lor.lhs.false.1241:                               ; preds = %lor.lhs.false.1235, %land.lhs.true.1227, %land.lhs.true.1224
  %770 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings1242 = getelementptr inbounds %struct.cop, %struct.cop* %770, i32 0, i32 14
  %771 = load %struct.sv*, %struct.sv** %cop_warnings1242, align 8
  %cmp1243 = icmp eq %struct.sv* %771, null
  br i1 %cmp1243, label %land.lhs.true.1245, label %if.end.1277

land.lhs.true.1245:                               ; preds = %lor.lhs.false.1241
  %772 = load i8, i8* @PL_dowarn, align 1
  %conv1246 = zext i8 %772 to i32
  %and1247 = and i32 %conv1246, 1
  %tobool1248 = icmp ne i32 %and1247, 0
  br i1 %tobool1248, label %land.lhs.true.1249, label %if.end.1277

land.lhs.true.1249:                               ; preds = %land.lhs.true.1245, %lor.lhs.false.1235, %land.lhs.true.1231
  %773 = load i8*, i8** %p, align 8
  %774 = load i8, i8* %773, align 1
  %conv1250 = sext i8 %774 to i32
  %cmp1251 = icmp sge i32 %conv1250, 65
  br i1 %cmp1251, label %land.lhs.true.1253, label %lor.lhs.false.1257

land.lhs.true.1253:                               ; preds = %land.lhs.true.1249
  %775 = load i8*, i8** %p, align 8
  %776 = load i8, i8* %775, align 1
  %conv1254 = sext i8 %776 to i32
  %cmp1255 = icmp sle i32 %conv1254, 90
  br i1 %cmp1255, label %if.then.1265, label %lor.lhs.false.1257

lor.lhs.false.1257:                               ; preds = %land.lhs.true.1253, %land.lhs.true.1249
  %777 = load i8*, i8** %p, align 8
  %778 = load i8, i8* %777, align 1
  %conv1258 = sext i8 %778 to i32
  %cmp1259 = icmp sge i32 %conv1258, 97
  br i1 %cmp1259, label %land.lhs.true.1261, label %if.end.1277

land.lhs.true.1261:                               ; preds = %lor.lhs.false.1257
  %779 = load i8*, i8** %p, align 8
  %780 = load i8, i8* %779, align 1
  %conv1262 = sext i8 %780 to i32
  %cmp1263 = icmp sle i32 %conv1262, 122
  br i1 %cmp1263, label %if.then.1265, label %if.end.1277

if.then.1265:                                     ; preds = %land.lhs.true.1261, %land.lhs.true.1253
  %781 = load i8*, i8** %p, align 8
  %add.ptr1267 = getelementptr inbounds i8, i8* %781, i64 1
  %782 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1268 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %782, i32 0, i32 1
  %783 = load i8*, i8** %precomp1268, align 8
  %sub.ptr.lhs.cast1269 = ptrtoint i8* %add.ptr1267 to i64
  %sub.ptr.rhs.cast1270 = ptrtoint i8* %783 to i64
  %sub.ptr.sub1271 = sub i64 %sub.ptr.lhs.cast1269, %sub.ptr.rhs.cast1270
  store i64 %sub.ptr.sub1271, i64* %offset1266, align 8
  %784 = load i8*, i8** %p, align 8
  %785 = load i8, i8* %784, align 1
  %conv1272 = zext i8 %785 to i32
  %786 = load i64, i64* %offset1266, align 8
  %conv1273 = trunc i64 %786 to i32
  %787 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1274 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %787, i32 0, i32 1
  %788 = load i8*, i8** %precomp1274, align 8
  %789 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1275 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %789, i32 0, i32 1
  %790 = load i8*, i8** %precomp1275, align 8
  %791 = load i64, i64* %offset1266, align 8
  %add.ptr1276 = getelementptr inbounds i8, i8* %790, i64 %791
  call void (i32, i8*, ...) @Perl_warner(i32 20, i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.54, i32 0, i32 0), i32 %conv1272, i32 %conv1273, i8* %788, i8* %add.ptr1276)
  br label %if.end.1277

if.end.1277:                                      ; preds = %if.then.1265, %land.lhs.true.1261, %lor.lhs.false.1257, %land.lhs.true.1245, %lor.lhs.false.1241, %sw.default.1220
  br label %normal_default

sw.epilog.1278:                                   ; preds = %if.end.1194, %cond.end.1168, %if.end.1154, %sw.bb.1107, %sw.bb.1105, %sw.bb.1103, %sw.bb.1101, %sw.bb.1099, %sw.bb.1097
  br label %sw.epilog.1302

sw.default.1279:                                  ; preds = %if.end.1089
  br label %normal_default

normal_default:                                   ; preds = %sw.default.1279, %if.end.1277
  %792 = load i8*, i8** %p, align 8
  %793 = load i8, i8* %792, align 1
  %conv1280 = zext i8 %793 to i32
  %cmp1281 = icmp sge i32 %conv1280, 192
  br i1 %cmp1281, label %land.lhs.true.1283, label %if.else.1298

land.lhs.true.1283:                               ; preds = %normal_default
  %794 = load i8*, i8** %p, align 8
  %795 = load i8, i8* %794, align 1
  %conv1284 = zext i8 %795 to i32
  %cmp1285 = icmp sle i32 %conv1284, 253
  br i1 %cmp1285, label %land.lhs.true.1287, label %if.else.1298

land.lhs.true.1287:                               ; preds = %land.lhs.true.1283
  %796 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81288 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %796, i32 0, i32 17
  %797 = load i32, i32* %utf81288, align 4
  %cmp1289 = icmp ne i32 %797, 0
  br i1 %cmp1289, label %if.then.1291, label %if.else.1298

if.then.1291:                                     ; preds = %land.lhs.true.1287
  %798 = load i8*, i8** %p, align 8
  %799 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1292 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %799, i32 0, i32 4
  %800 = load i8*, i8** %end1292, align 8
  %801 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast1293 = ptrtoint i8* %800 to i64
  %sub.ptr.rhs.cast1294 = ptrtoint i8* %801 to i64
  %sub.ptr.sub1295 = sub i64 %sub.ptr.lhs.cast1293, %sub.ptr.rhs.cast1294
  %call1296 = call i64 @Perl_utf8n_to_uvuni(i8* %798, i64 %sub.ptr.sub1295, i64* %numlen, i32 0)
  store i64 %call1296, i64* %ender, align 8
  %802 = load i64, i64* %numlen, align 8
  %803 = load i8*, i8** %p, align 8
  %add.ptr1297 = getelementptr inbounds i8, i8* %803, i64 %802
  store i8* %add.ptr1297, i8** %p, align 8
  br label %if.end.1301

if.else.1298:                                     ; preds = %land.lhs.true.1287, %land.lhs.true.1283, %normal_default
  %804 = load i8*, i8** %p, align 8
  %incdec.ptr1299 = getelementptr inbounds i8, i8* %804, i32 1
  store i8* %incdec.ptr1299, i8** %p, align 8
  %805 = load i8, i8* %804, align 1
  %conv1300 = sext i8 %805 to i64
  store i64 %conv1300, i64* %ender, align 8
  br label %if.end.1301

if.end.1301:                                      ; preds = %if.else.1298, %if.then.1291
  br label %sw.epilog.1302

sw.epilog.1302:                                   ; preds = %if.end.1301, %sw.epilog.1278
  %806 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1303 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %806, i32 0, i32 0
  %807 = load i32, i32* %flags1303, align 4
  %and1304 = and i32 %807, 32768
  %tobool1305 = icmp ne i32 %and1304, 0
  br i1 %tobool1305, label %if.then.1306, label %if.end.1309

if.then.1306:                                     ; preds = %sw.epilog.1302
  %808 = load i8*, i8** %p, align 8
  %809 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1307 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %809, i32 0, i32 4
  %810 = load i8*, i8** %end1307, align 8
  %call1308 = call i8* @S_regwhite(i8* %808, i8* %810)
  store i8* %call1308, i8** %p, align 8
  br label %if.end.1309

if.end.1309:                                      ; preds = %if.then.1306, %sw.epilog.1302
  %811 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81310 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %811, i32 0, i32 17
  %812 = load i32, i32* %utf81310, align 4
  %cmp1311 = icmp ne i32 %812, 0
  br i1 %cmp1311, label %land.lhs.true.1313, label %if.end.1321

land.lhs.true.1313:                               ; preds = %if.end.1309
  %813 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1314 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %813, i32 0, i32 0
  %814 = load i32, i32* %flags1314, align 4
  %and1315 = and i32 %814, 16384
  %cmp1316 = icmp ne i32 %and1315, 0
  br i1 %cmp1316, label %if.then.1318, label %if.end.1321

if.then.1318:                                     ; preds = %land.lhs.true.1313
  %815 = load i64, i64* %ender, align 8
  %arraydecay1319 = getelementptr inbounds [7 x i8], [7 x i8]* %tmpbuf, i32 0, i32 0
  %call1320 = call i64 @Perl_to_uni_fold(i64 %815, i8* %arraydecay1319, i64* %foldlen)
  store i64 %call1320, i64* %ender, align 8
  br label %if.end.1321

if.end.1321:                                      ; preds = %if.then.1318, %land.lhs.true.1313, %if.end.1309
  %816 = load i8*, i8** %p, align 8
  %817 = load i8, i8* %816, align 1
  %conv1322 = sext i8 %817 to i32
  %cmp1323 = icmp eq i32 %conv1322, 42
  br i1 %cmp1323, label %if.then.1340, label %lor.lhs.false.1325

lor.lhs.false.1325:                               ; preds = %if.end.1321
  %818 = load i8*, i8** %p, align 8
  %819 = load i8, i8* %818, align 1
  %conv1326 = sext i8 %819 to i32
  %cmp1327 = icmp eq i32 %conv1326, 43
  br i1 %cmp1327, label %if.then.1340, label %lor.lhs.false.1329

lor.lhs.false.1329:                               ; preds = %lor.lhs.false.1325
  %820 = load i8*, i8** %p, align 8
  %821 = load i8, i8* %820, align 1
  %conv1330 = sext i8 %821 to i32
  %cmp1331 = icmp eq i32 %conv1330, 63
  br i1 %cmp1331, label %if.then.1340, label %lor.lhs.false.1333

lor.lhs.false.1333:                               ; preds = %lor.lhs.false.1329
  %822 = load i8*, i8** %p, align 8
  %823 = load i8, i8* %822, align 1
  %conv1334 = sext i8 %823 to i32
  %cmp1335 = icmp eq i32 %conv1334, 123
  br i1 %cmp1335, label %land.lhs.true.1337, label %if.end.1392

land.lhs.true.1337:                               ; preds = %lor.lhs.false.1333
  %824 = load i8*, i8** %p, align 8
  %call1338 = call i32 @S_regcurly(i8* %824)
  %tobool1339 = icmp ne i32 %call1338, 0
  br i1 %tobool1339, label %if.then.1340, label %if.end.1392

if.then.1340:                                     ; preds = %land.lhs.true.1337, %lor.lhs.false.1329, %lor.lhs.false.1325, %if.end.1321
  %825 = load i64, i64* %len1054, align 8
  %tobool1341 = icmp ne i64 %825, 0
  br i1 %tobool1341, label %if.then.1342, label %if.else.1343

if.then.1342:                                     ; preds = %if.then.1340
  %826 = load i8*, i8** %oldp, align 8
  store i8* %826, i8** %p, align 8
  br label %if.end.1391

if.else.1343:                                     ; preds = %if.then.1340
  %827 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81344 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %827, i32 0, i32 17
  %828 = load i32, i32* %utf81344, align 4
  %cmp1345 = icmp ne i32 %828, 0
  br i1 %cmp1345, label %if.then.1347, label %if.else.1379

if.then.1347:                                     ; preds = %if.else.1343
  %829 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1348 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %829, i32 0, i32 0
  %830 = load i32, i32* %flags1348, align 4
  %and1349 = and i32 %830, 16384
  %cmp1350 = icmp ne i32 %and1349, 0
  br i1 %cmp1350, label %if.then.1352, label %if.else.1371

if.then.1352:                                     ; preds = %if.then.1347
  %arraydecay1353 = getelementptr inbounds [7 x i8], [7 x i8]* %tmpbuf, i32 0, i32 0
  store i8* %arraydecay1353, i8** %foldbuf, align 8
  br label %for.cond.1354

for.cond.1354:                                    ; preds = %for.inc, %if.then.1352
  %831 = load i64, i64* %foldlen, align 8
  %tobool1355 = icmp ne i64 %831, 0
  br i1 %tobool1355, label %for.body.1356, label %for.end

for.body.1356:                                    ; preds = %for.cond.1354
  %832 = load i8*, i8** %foldbuf, align 8
  %call1357 = call i64 @Perl_utf8_to_uvchr(i8* %832, i64* %numlen)
  store i64 %call1357, i64* %ender, align 8
  %833 = load i64, i64* %numlen, align 8
  %cmp1358 = icmp ugt i64 %833, 0
  br i1 %cmp1358, label %if.then.1360, label %if.else.1368

if.then.1360:                                     ; preds = %for.body.1356
  %834 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %835 = load i64, i64* %ender, align 8
  %836 = load i8*, i8** %s, align 8
  call void @S_reguni(%struct.RExC_state_t* %834, i64 %835, i8* %836, i64* %unilen)
  %837 = load i64, i64* %unilen, align 8
  %838 = load i8*, i8** %s, align 8
  %add.ptr1361 = getelementptr inbounds i8, i8* %838, i64 %837
  store i8* %add.ptr1361, i8** %s, align 8
  %839 = load i64, i64* %unilen, align 8
  %840 = load i64, i64* %len1054, align 8
  %add1362 = add i64 %840, %839
  store i64 %add1362, i64* %len1054, align 8
  %841 = load i64, i64* %numlen, align 8
  %842 = load i8*, i8** %foldbuf, align 8
  %add.ptr1363 = getelementptr inbounds i8, i8* %842, i64 %841
  store i8* %add.ptr1363, i8** %foldbuf, align 8
  %843 = load i64, i64* %numlen, align 8
  %844 = load i64, i64* %foldlen, align 8
  %cmp1364 = icmp uge i64 %843, %844
  br i1 %cmp1364, label %if.then.1366, label %if.end.1367

if.then.1366:                                     ; preds = %if.then.1360
  br label %for.end

if.end.1367:                                      ; preds = %if.then.1360
  br label %if.end.1369

if.else.1368:                                     ; preds = %for.body.1356
  br label %for.end

if.end.1369:                                      ; preds = %if.end.1367
  br label %for.inc

for.inc:                                          ; preds = %if.end.1369
  %845 = load i64, i64* %numlen, align 8
  %846 = load i64, i64* %foldlen, align 8
  %sub1370 = sub i64 %846, %845
  store i64 %sub1370, i64* %foldlen, align 8
  br label %for.cond.1354

for.end:                                          ; preds = %if.else.1368, %if.then.1366, %for.cond.1354
  br label %if.end.1378

if.else.1371:                                     ; preds = %if.then.1347
  %847 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %848 = load i64, i64* %ender, align 8
  %849 = load i8*, i8** %s, align 8
  call void @S_reguni(%struct.RExC_state_t* %847, i64 %848, i8* %849, i64* %unilen)
  %850 = load i64, i64* %unilen, align 8
  %cmp1372 = icmp ugt i64 %850, 0
  br i1 %cmp1372, label %if.then.1374, label %if.end.1377

if.then.1374:                                     ; preds = %if.else.1371
  %851 = load i64, i64* %unilen, align 8
  %852 = load i8*, i8** %s, align 8
  %add.ptr1375 = getelementptr inbounds i8, i8* %852, i64 %851
  store i8* %add.ptr1375, i8** %s, align 8
  %853 = load i64, i64* %unilen, align 8
  %854 = load i64, i64* %len1054, align 8
  %add1376 = add i64 %854, %853
  store i64 %add1376, i64* %len1054, align 8
  br label %if.end.1377

if.end.1377:                                      ; preds = %if.then.1374, %if.else.1371
  br label %if.end.1378

if.end.1378:                                      ; preds = %if.end.1377, %for.end
  br label %if.end.1390

if.else.1379:                                     ; preds = %if.else.1343
  %855 = load i64, i64* %len1054, align 8
  %inc1380 = add i64 %855, 1
  store i64 %inc1380, i64* %len1054, align 8
  %856 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1381 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %856, i32 0, i32 8
  %857 = load %struct.regnode*, %struct.regnode** %emit1381, align 8
  %cmp1382 = icmp eq %struct.regnode* %857, @PL_regdummy
  br i1 %cmp1382, label %if.else.1387, label %if.then.1384

if.then.1384:                                     ; preds = %if.else.1379
  %858 = load i64, i64* %ender, align 8
  %conv1385 = trunc i64 %858 to i8
  %859 = load i8*, i8** %s, align 8
  %incdec.ptr1386 = getelementptr inbounds i8, i8* %859, i32 1
  store i8* %incdec.ptr1386, i8** %s, align 8
  store i8 %conv1385, i8* %859, align 1
  br label %if.end.1389

if.else.1387:                                     ; preds = %if.else.1379
  %860 = load i8*, i8** %s, align 8
  %incdec.ptr1388 = getelementptr inbounds i8, i8* %860, i32 1
  store i8* %incdec.ptr1388, i8** %s, align 8
  br label %if.end.1389

if.end.1389:                                      ; preds = %if.else.1387, %if.then.1384
  br label %if.end.1390

if.end.1390:                                      ; preds = %if.end.1389, %if.end.1378
  br label %if.end.1391

if.end.1391:                                      ; preds = %if.end.1390, %if.then.1342
  br label %for.end.1444

if.end.1392:                                      ; preds = %land.lhs.true.1337, %lor.lhs.false.1333
  %861 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81393 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %861, i32 0, i32 17
  %862 = load i32, i32* %utf81393, align 4
  %cmp1394 = icmp ne i32 %862, 0
  br i1 %cmp1394, label %if.then.1396, label %if.else.1431

if.then.1396:                                     ; preds = %if.end.1392
  %863 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1398 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %863, i32 0, i32 0
  %864 = load i32, i32* %flags1398, align 4
  %and1399 = and i32 %864, 16384
  %cmp1400 = icmp ne i32 %and1399, 0
  br i1 %cmp1400, label %if.then.1402, label %if.else.1423

if.then.1402:                                     ; preds = %if.then.1396
  %arraydecay1403 = getelementptr inbounds [7 x i8], [7 x i8]* %tmpbuf, i32 0, i32 0
  store i8* %arraydecay1403, i8** %foldbuf, align 8
  br label %for.cond.1404

for.cond.1404:                                    ; preds = %for.inc.1420, %if.then.1402
  %865 = load i64, i64* %foldlen, align 8
  %tobool1405 = icmp ne i64 %865, 0
  br i1 %tobool1405, label %for.body.1406, label %for.end.1422

for.body.1406:                                    ; preds = %for.cond.1404
  %866 = load i8*, i8** %foldbuf, align 8
  %call1407 = call i64 @Perl_utf8_to_uvchr(i8* %866, i64* %numlen)
  store i64 %call1407, i64* %ender, align 8
  %867 = load i64, i64* %numlen, align 8
  %cmp1408 = icmp ugt i64 %867, 0
  br i1 %cmp1408, label %if.then.1410, label %if.else.1418

if.then.1410:                                     ; preds = %for.body.1406
  %868 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %869 = load i64, i64* %ender, align 8
  %870 = load i8*, i8** %s, align 8
  call void @S_reguni(%struct.RExC_state_t* %868, i64 %869, i8* %870, i64* %unilen1397)
  %871 = load i64, i64* %unilen1397, align 8
  %872 = load i64, i64* %len1054, align 8
  %add1411 = add i64 %872, %871
  store i64 %add1411, i64* %len1054, align 8
  %873 = load i64, i64* %unilen1397, align 8
  %874 = load i8*, i8** %s, align 8
  %add.ptr1412 = getelementptr inbounds i8, i8* %874, i64 %873
  store i8* %add.ptr1412, i8** %s, align 8
  %875 = load i64, i64* %numlen, align 8
  %876 = load i8*, i8** %foldbuf, align 8
  %add.ptr1413 = getelementptr inbounds i8, i8* %876, i64 %875
  store i8* %add.ptr1413, i8** %foldbuf, align 8
  %877 = load i64, i64* %numlen, align 8
  %878 = load i64, i64* %foldlen, align 8
  %cmp1414 = icmp uge i64 %877, %878
  br i1 %cmp1414, label %if.then.1416, label %if.end.1417

if.then.1416:                                     ; preds = %if.then.1410
  br label %for.end.1422

if.end.1417:                                      ; preds = %if.then.1410
  br label %if.end.1419

if.else.1418:                                     ; preds = %for.body.1406
  br label %for.end.1422

if.end.1419:                                      ; preds = %if.end.1417
  br label %for.inc.1420

for.inc.1420:                                     ; preds = %if.end.1419
  %879 = load i64, i64* %numlen, align 8
  %880 = load i64, i64* %foldlen, align 8
  %sub1421 = sub i64 %880, %879
  store i64 %sub1421, i64* %foldlen, align 8
  br label %for.cond.1404

for.end.1422:                                     ; preds = %if.else.1418, %if.then.1416, %for.cond.1404
  br label %if.end.1430

if.else.1423:                                     ; preds = %if.then.1396
  %881 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %882 = load i64, i64* %ender, align 8
  %883 = load i8*, i8** %s, align 8
  call void @S_reguni(%struct.RExC_state_t* %881, i64 %882, i8* %883, i64* %unilen1397)
  %884 = load i64, i64* %unilen1397, align 8
  %cmp1424 = icmp ugt i64 %884, 0
  br i1 %cmp1424, label %if.then.1426, label %if.end.1429

if.then.1426:                                     ; preds = %if.else.1423
  %885 = load i64, i64* %unilen1397, align 8
  %886 = load i8*, i8** %s, align 8
  %add.ptr1427 = getelementptr inbounds i8, i8* %886, i64 %885
  store i8* %add.ptr1427, i8** %s, align 8
  %887 = load i64, i64* %unilen1397, align 8
  %888 = load i64, i64* %len1054, align 8
  %add1428 = add i64 %888, %887
  store i64 %add1428, i64* %len1054, align 8
  br label %if.end.1429

if.end.1429:                                      ; preds = %if.then.1426, %if.else.1423
  br label %if.end.1430

if.end.1430:                                      ; preds = %if.end.1429, %for.end.1422
  %889 = load i64, i64* %len1054, align 8
  %dec = add i64 %889, -1
  store i64 %dec, i64* %len1054, align 8
  br label %if.end.1441

if.else.1431:                                     ; preds = %if.end.1392
  %890 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1432 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %890, i32 0, i32 8
  %891 = load %struct.regnode*, %struct.regnode** %emit1432, align 8
  %cmp1433 = icmp eq %struct.regnode* %891, @PL_regdummy
  br i1 %cmp1433, label %if.else.1438, label %if.then.1435

if.then.1435:                                     ; preds = %if.else.1431
  %892 = load i64, i64* %ender, align 8
  %conv1436 = trunc i64 %892 to i8
  %893 = load i8*, i8** %s, align 8
  %incdec.ptr1437 = getelementptr inbounds i8, i8* %893, i32 1
  store i8* %incdec.ptr1437, i8** %s, align 8
  store i8 %conv1436, i8* %893, align 1
  br label %if.end.1440

if.else.1438:                                     ; preds = %if.else.1431
  %894 = load i8*, i8** %s, align 8
  %incdec.ptr1439 = getelementptr inbounds i8, i8* %894, i32 1
  store i8* %incdec.ptr1439, i8** %s, align 8
  br label %if.end.1440

if.end.1440:                                      ; preds = %if.else.1438, %if.then.1435
  br label %if.end.1441

if.end.1441:                                      ; preds = %if.end.1440, %if.end.1430
  br label %for.inc.1442

for.inc.1442:                                     ; preds = %if.end.1441
  %895 = load i64, i64* %len1054, align 8
  %inc1443 = add i64 %895, 1
  store i64 %inc1443, i64* %len1054, align 8
  br label %for.cond

for.end.1444:                                     ; preds = %if.end.1391, %land.end.1082
  br label %loopdone

loopdone:                                         ; preds = %for.end.1444, %if.else.1192, %sw.bb.1095, %sw.bb.1091
  %896 = load i8*, i8** %p, align 8
  %add.ptr1445 = getelementptr inbounds i8, i8* %896, i64 -1
  %897 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1446 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %897, i32 0, i32 5
  store i8* %add.ptr1445, i8** %parse1446, align 8
  %898 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1447 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %898, i32 0, i32 8
  %899 = load %struct.regnode*, %struct.regnode** %emit1447, align 8
  %cmp1448 = icmp eq %struct.regnode* %899, @PL_regdummy
  br i1 %cmp1448, label %if.end.1480, label %if.then.1450

if.then.1450:                                     ; preds = %loopdone
  %900 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %901 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start1451 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %901, i32 0, i32 7
  %902 = load %struct.regnode*, %struct.regnode** %emit_start1451, align 8
  %sub.ptr.lhs.cast1452 = ptrtoint %struct.regnode* %900 to i64
  %sub.ptr.rhs.cast1453 = ptrtoint %struct.regnode* %902 to i64
  %sub.ptr.sub1454 = sub i64 %sub.ptr.lhs.cast1452, %sub.ptr.rhs.cast1453
  %sub.ptr.div1455 = sdiv exact i64 %sub.ptr.sub1454, 4
  %cmp1456 = icmp slt i64 %sub.ptr.div1455, 0
  br i1 %cmp1456, label %if.then.1458, label %if.else.1464

if.then.1458:                                     ; preds = %if.then.1450
  %903 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %904 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start1459 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %904, i32 0, i32 7
  %905 = load %struct.regnode*, %struct.regnode** %emit_start1459, align 8
  %sub.ptr.lhs.cast1460 = ptrtoint %struct.regnode* %903 to i64
  %sub.ptr.rhs.cast1461 = ptrtoint %struct.regnode* %905 to i64
  %sub.ptr.sub1462 = sub i64 %sub.ptr.lhs.cast1460, %sub.ptr.rhs.cast1461
  %sub.ptr.div1463 = sdiv exact i64 %sub.ptr.sub1462, 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.27, i32 0, i32 0), i64 %sub.ptr.div1463)
  br label %if.end.1479

if.else.1464:                                     ; preds = %if.then.1450
  %906 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1465 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %906, i32 0, i32 5
  %907 = load i8*, i8** %parse1465, align 8
  %908 = load i8*, i8** %parse_start, align 8
  %sub.ptr.lhs.cast1466 = ptrtoint i8* %907 to i64
  %sub.ptr.rhs.cast1467 = ptrtoint i8* %908 to i64
  %sub.ptr.sub1468 = sub i64 %sub.ptr.lhs.cast1466, %sub.ptr.rhs.cast1467
  %conv1469 = trunc i64 %sub.ptr.sub1468 to i32
  %909 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %910 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_start1470 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %910, i32 0, i32 7
  %911 = load %struct.regnode*, %struct.regnode** %emit_start1470, align 8
  %sub.ptr.lhs.cast1471 = ptrtoint %struct.regnode* %909 to i64
  %sub.ptr.rhs.cast1472 = ptrtoint %struct.regnode* %911 to i64
  %sub.ptr.sub1473 = sub i64 %sub.ptr.lhs.cast1471, %sub.ptr.rhs.cast1472
  %sub.ptr.div1474 = sdiv exact i64 %sub.ptr.sub1473, 4
  %mul1475 = mul nsw i64 2, %sub.ptr.div1474
  %912 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx1476 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %912, i32 0, i32 2
  %913 = load %struct.regexp*, %struct.regexp** %rx1476, align 8
  %offsets1477 = getelementptr inbounds %struct.regexp, %struct.regexp* %913, i32 0, i32 7
  %914 = load i32*, i32** %offsets1477, align 8
  %arrayidx1478 = getelementptr inbounds i32, i32* %914, i64 %mul1475
  store i32 %conv1469, i32* %arrayidx1478, align 4
  br label %if.end.1479

if.end.1479:                                      ; preds = %if.else.1464, %if.then.1458
  br label %if.end.1480

if.end.1480:                                      ; preds = %if.end.1479, %loopdone
  %915 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call1481 = call i8* @S_nextchar(%struct.RExC_state_t* %915)
  %916 = load i64, i64* %len1054, align 8
  store i64 %916, i64* %iv, align 8
  %917 = load i64, i64* %iv, align 8
  %cmp1482 = icmp slt i64 %917, 0
  br i1 %cmp1482, label %if.then.1484, label %if.end.1501

if.then.1484:                                     ; preds = %if.end.1480
  %918 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1485 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %918, i32 0, i32 8
  %919 = load %struct.regnode*, %struct.regnode** %emit1485, align 8
  %cmp1486 = icmp eq %struct.regnode* %919, @PL_regdummy
  br i1 %cmp1486, label %if.end.1490, label %if.then.1488

if.then.1488:                                     ; preds = %if.then.1484
  %920 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx1489 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %920, i32 0, i32 2
  %921 = load %struct.regexp*, %struct.regexp** %rx1489, align 8
  %922 = bitcast %struct.regexp* %921 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %922)
  br label %if.end.1490

if.end.1490:                                      ; preds = %if.then.1488, %if.then.1484
  %923 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1492 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %923, i32 0, i32 5
  %924 = load i8*, i8** %parse1492, align 8
  %925 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1493 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %925, i32 0, i32 1
  %926 = load i8*, i8** %precomp1493, align 8
  %sub.ptr.lhs.cast1494 = ptrtoint i8* %924 to i64
  %sub.ptr.rhs.cast1495 = ptrtoint i8* %926 to i64
  %sub.ptr.sub1496 = sub i64 %sub.ptr.lhs.cast1494, %sub.ptr.rhs.cast1495
  store i64 %sub.ptr.sub1496, i64* %offset1491, align 8
  %927 = load i64, i64* %offset1491, align 8
  %conv1497 = trunc i64 %927 to i32
  %928 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1498 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %928, i32 0, i32 1
  %929 = load i8*, i8** %precomp1498, align 8
  %930 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1499 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %930, i32 0, i32 1
  %931 = load i8*, i8** %precomp1499, align 8
  %932 = load i64, i64* %offset1491, align 8
  %add.ptr1500 = getelementptr inbounds i8, i8* %931, i64 %932
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.55, i32 0, i32 0), i32 %conv1497, i8* %929, i8* %add.ptr1500)
  br label %if.end.1501

if.end.1501:                                      ; preds = %if.end.1490, %if.end.1480
  %933 = load i64, i64* %len1054, align 8
  %cmp1502 = icmp ugt i64 %933, 0
  br i1 %cmp1502, label %if.then.1504, label %if.end.1506

if.then.1504:                                     ; preds = %if.end.1501
  %934 = load i32*, i32** %flagp.addr, align 8
  %935 = load i32, i32* %934, align 4
  %or1505 = or i32 %935, 1
  store i32 %or1505, i32* %934, align 4
  br label %if.end.1506

if.end.1506:                                      ; preds = %if.then.1504, %if.end.1501
  %936 = load i64, i64* %len1054, align 8
  %cmp1507 = icmp eq i64 %936, 1
  br i1 %cmp1507, label %land.lhs.true.1509, label %if.end.1514

land.lhs.true.1509:                               ; preds = %if.end.1506
  %937 = load i64, i64* %ender, align 8
  %cmp1510 = icmp ult i64 %937, 128
  br i1 %cmp1510, label %if.then.1512, label %if.end.1514

if.then.1512:                                     ; preds = %land.lhs.true.1509
  %938 = load i32*, i32** %flagp.addr, align 8
  %939 = load i32, i32* %938, align 4
  %or1513 = or i32 %939, 2
  store i32 %or1513, i32* %938, align 4
  br label %if.end.1514

if.end.1514:                                      ; preds = %if.then.1512, %land.lhs.true.1509, %if.end.1506
  %940 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1515 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %940, i32 0, i32 8
  %941 = load %struct.regnode*, %struct.regnode** %emit1515, align 8
  %cmp1516 = icmp eq %struct.regnode* %941, @PL_regdummy
  br i1 %cmp1516, label %if.end.1520, label %if.then.1518

if.then.1518:                                     ; preds = %if.end.1514
  %942 = load i64, i64* %len1054, align 8
  %conv1519 = trunc i64 %942 to i8
  %943 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %944 = bitcast %struct.regnode* %943 to %struct.regnode_string*
  %str_len = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %944, i32 0, i32 0
  store i8 %conv1519, i8* %str_len, align 1
  br label %if.end.1520

if.end.1520:                                      ; preds = %if.then.1518, %if.end.1514
  %945 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1521 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %945, i32 0, i32 8
  %946 = load %struct.regnode*, %struct.regnode** %emit1521, align 8
  %cmp1522 = icmp eq %struct.regnode* %946, @PL_regdummy
  br i1 %cmp1522, label %if.then.1524, label %if.else.1530

if.then.1524:                                     ; preds = %if.end.1520
  %947 = load i64, i64* %len1054, align 8
  %add1525 = add i64 %947, 4
  %sub1526 = sub i64 %add1525, 1
  %div = udiv i64 %sub1526, 4
  %948 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %size = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %948, i32 0, i32 12
  %949 = load i32, i32* %size, align 4
  %conv1527 = sext i32 %949 to i64
  %add1528 = add i64 %conv1527, %div
  %conv1529 = trunc i64 %add1528 to i32
  store i32 %conv1529, i32* %size, align 4
  br label %if.end.1536

if.else.1530:                                     ; preds = %if.end.1520
  %950 = load i64, i64* %len1054, align 8
  %add1531 = add i64 %950, 4
  %sub1532 = sub i64 %add1531, 1
  %div1533 = udiv i64 %sub1532, 4
  %951 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1534 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %951, i32 0, i32 8
  %952 = load %struct.regnode*, %struct.regnode** %emit1534, align 8
  %add.ptr1535 = getelementptr inbounds %struct.regnode, %struct.regnode* %952, i64 %div1533
  store %struct.regnode* %add.ptr1535, %struct.regnode** %emit1534, align 8
  br label %if.end.1536

if.end.1536:                                      ; preds = %if.else.1530, %if.then.1524
  br label %sw.epilog.1537

sw.epilog.1537:                                   ; preds = %if.end.1536, %sw.epilog, %if.end.238, %if.end.211, %if.end.197, %if.end.180, %if.end.121, %if.end.81, %if.end.29
  %953 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %tobool1538 = icmp ne %struct.sv* %953, null
  br i1 %tobool1538, label %land.lhs.true.1539, label %if.end.1603

land.lhs.true.1539:                               ; preds = %sw.epilog.1537
  %954 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %type = getelementptr inbounds %struct.regnode, %struct.regnode* %954, i32 0, i32 1
  %955 = load i8, i8* %type, align 1
  %idxprom = zext i8 %955 to i64
  %arrayidx1540 = getelementptr inbounds [62 x i8], [62 x i8]* @PL_regkind, i32 0, i64 %idxprom
  %956 = load i8, i8* %arrayidx1540, align 1
  %conv1541 = zext i8 %956 to i32
  %cmp1542 = icmp eq i32 %conv1541, 33
  br i1 %cmp1542, label %if.then.1544, label %if.end.1603

if.then.1544:                                     ; preds = %land.lhs.true.1539
  %957 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %958 = bitcast %struct.regnode* %957 to %struct.regnode_string*
  %str_len1545 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %958, i32 0, i32 0
  %959 = load i8, i8* %str_len1545, align 1
  %conv1546 = zext i8 %959 to i64
  store i64 %conv1546, i64* %oldlen, align 8
  %960 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %961 = bitcast %struct.regnode* %960 to %struct.regnode_string*
  %string1547 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %961, i32 0, i32 3
  %arraydecay1548 = getelementptr inbounds [1 x i8], [1 x i8]* %string1547, i32 0, i32 0
  %962 = load i64, i64* %oldlen, align 8
  %call1549 = call %struct.sv* @Perl_newSVpvn(i8* %arraydecay1548, i64 %962)
  %call1550 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call1549)
  store %struct.sv* %call1550, %struct.sv** %sv, align 8
  %963 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81551 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %963, i32 0, i32 17
  %964 = load i32, i32* %utf81551, align 4
  %tobool1552 = icmp ne i32 %964, 0
  br i1 %tobool1552, label %if.then.1553, label %if.end.1555

if.then.1553:                                     ; preds = %if.then.1544
  %965 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %965, i32 0, i32 2
  %966 = load i32, i32* %sv_flags, align 4
  %or1554 = or i32 %966, 536870912
  store i32 %or1554, i32* %sv_flags, align 4
  br label %if.end.1555

if.end.1555:                                      ; preds = %if.then.1553, %if.then.1544
  %967 = load %struct.sv*, %struct.sv** %sv, align 8
  %call1556 = call signext i8 @Perl_sv_utf8_downgrade(%struct.sv* %967, i8 signext 1)
  %tobool1557 = icmp ne i8 %call1556, 0
  br i1 %tobool1557, label %if.then.1558, label %if.end.1602

if.then.1558:                                     ; preds = %if.end.1555
  %968 = load %struct.sv*, %struct.sv** %sv, align 8
  %969 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %call1560 = call i8* @Perl_sv_recode_to_utf8(%struct.sv* %968, %struct.sv* %969)
  store i8* %call1560, i8** %s1559, align 8
  %970 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any1561 = getelementptr inbounds %struct.sv, %struct.sv* %970, i32 0, i32 0
  %971 = load i8*, i8** %sv_any1561, align 8
  %972 = bitcast i8* %971 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %972, i32 0, i32 1
  %973 = load i64, i64* %xpv_cur, align 8
  store i64 %973, i64* %newlen, align 8
  %974 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags1562 = getelementptr inbounds %struct.sv, %struct.sv* %974, i32 0, i32 2
  %975 = load i32, i32* %sv_flags1562, align 4
  %and1563 = and i32 %975, 536870912
  %tobool1564 = icmp ne i32 %and1563, 0
  br i1 %tobool1564, label %if.then.1565, label %if.end.1567

if.then.1565:                                     ; preds = %if.then.1558
  %976 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81566 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %976, i32 0, i32 17
  store i32 1, i32* %utf81566, align 4
  br label %if.end.1567

if.end.1567:                                      ; preds = %if.then.1565, %if.then.1558
  %977 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1568 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %977, i32 0, i32 8
  %978 = load %struct.regnode*, %struct.regnode** %emit1568, align 8
  %cmp1569 = icmp eq %struct.regnode* %978, @PL_regdummy
  br i1 %cmp1569, label %if.else.1589, label %if.then.1571

if.then.1571:                                     ; preds = %if.end.1567
  %979 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %980 = bitcast %struct.regnode* %979 to %struct.regnode_string*
  %string1572 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %980, i32 0, i32 3
  %arraydecay1573 = getelementptr inbounds [1 x i8], [1 x i8]* %string1572, i32 0, i32 0
  %981 = load i8*, i8** %s1559, align 8
  %982 = load i64, i64* %newlen, align 8
  %mul1574 = mul i64 %982, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %arraydecay1573, i8* %981, i64 %mul1574, i32 1, i1 false)
  %983 = load i64, i64* %newlen, align 8
  %984 = load i64, i64* %oldlen, align 8
  %sub1575 = sub i64 %983, %984
  %985 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %986 = bitcast %struct.regnode* %985 to %struct.regnode_string*
  %str_len1576 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %986, i32 0, i32 0
  %987 = load i8, i8* %str_len1576, align 1
  %conv1577 = zext i8 %987 to i64
  %add1578 = add i64 %conv1577, %sub1575
  %conv1579 = trunc i64 %add1578 to i8
  store i8 %conv1579, i8* %str_len1576, align 1
  %988 = load i64, i64* %newlen, align 8
  %add1580 = add i64 %988, 4
  %sub1581 = sub i64 %add1580, 1
  %div1582 = udiv i64 %sub1581, 4
  %989 = load i64, i64* %oldlen, align 8
  %add1583 = add i64 %989, 4
  %sub1584 = sub i64 %add1583, 1
  %div1585 = udiv i64 %sub1584, 4
  %sub1586 = sub i64 %div1582, %div1585
  %990 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1587 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %990, i32 0, i32 8
  %991 = load %struct.regnode*, %struct.regnode** %emit1587, align 8
  %add.ptr1588 = getelementptr inbounds %struct.regnode, %struct.regnode* %991, i64 %sub1586
  store %struct.regnode* %add.ptr1588, %struct.regnode** %emit1587, align 8
  br label %if.end.1601

if.else.1589:                                     ; preds = %if.end.1567
  %992 = load i64, i64* %newlen, align 8
  %add1590 = add i64 %992, 4
  %sub1591 = sub i64 %add1590, 1
  %div1592 = udiv i64 %sub1591, 4
  %993 = load i64, i64* %oldlen, align 8
  %add1593 = add i64 %993, 4
  %sub1594 = sub i64 %add1593, 1
  %div1595 = udiv i64 %sub1594, 4
  %sub1596 = sub i64 %div1592, %div1595
  %994 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %size1597 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %994, i32 0, i32 12
  %995 = load i32, i32* %size1597, align 4
  %conv1598 = sext i32 %995 to i64
  %add1599 = add i64 %conv1598, %sub1596
  %conv1600 = trunc i64 %add1599 to i32
  store i32 %conv1600, i32* %size1597, align 4
  br label %if.end.1601

if.end.1601:                                      ; preds = %if.else.1589, %if.then.1571
  br label %if.end.1602

if.end.1602:                                      ; preds = %if.end.1601, %if.end.1555
  br label %if.end.1603

if.end.1603:                                      ; preds = %if.end.1602, %land.lhs.true.1539, %sw.epilog.1537
  %996 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %996, %struct.regnode** %retval
  br label %return

return:                                           ; preds = %if.end.1603, %if.then.203, %if.end.196, %if.then.193
  %997 = load %struct.regnode*, %struct.regnode** %retval
  ret %struct.regnode* %997
}

; Function Attrs: nounwind uwtable
define internal i32 @S_regcurly(i8* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 8
  store i8* %s, i8** %s.addr, align 8
  %0 = load i8*, i8** %s.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 8
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 123
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %s.addr, align 8
  %3 = load i8, i8* %2, align 1
  %conv2 = sext i8 %3 to i32
  %cmp3 = icmp sge i32 %conv2, 48
  br i1 %cmp3, label %land.lhs.true, label %if.then.8

land.lhs.true:                                    ; preds = %if.end
  %4 = load i8*, i8** %s.addr, align 8
  %5 = load i8, i8* %4, align 1
  %conv5 = sext i8 %5 to i32
  %cmp6 = icmp sle i32 %conv5, 57
  br i1 %cmp6, label %if.end.9, label %if.then.8

if.then.8:                                        ; preds = %land.lhs.true, %if.end
  store i32 0, i32* %retval
  br label %return

if.end.9:                                         ; preds = %land.lhs.true
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end.9
  %6 = load i8*, i8** %s.addr, align 8
  %7 = load i8, i8* %6, align 1
  %conv10 = sext i8 %7 to i32
  %cmp11 = icmp sge i32 %conv10, 48
  br i1 %cmp11, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %8 = load i8*, i8** %s.addr, align 8
  %9 = load i8, i8* %8, align 1
  %conv13 = sext i8 %9 to i32
  %cmp14 = icmp sle i32 %conv13, 57
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %10 = phi i1 [ false, %while.cond ], [ %cmp14, %land.rhs ]
  br i1 %10, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %11 = load i8*, i8** %s.addr, align 8
  %incdec.ptr16 = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr16, i8** %s.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %12 = load i8*, i8** %s.addr, align 8
  %13 = load i8, i8* %12, align 1
  %conv17 = sext i8 %13 to i32
  %cmp18 = icmp eq i32 %conv17, 44
  br i1 %cmp18, label %if.then.20, label %if.end.22

if.then.20:                                       ; preds = %while.end
  %14 = load i8*, i8** %s.addr, align 8
  %incdec.ptr21 = getelementptr inbounds i8, i8* %14, i32 1
  store i8* %incdec.ptr21, i8** %s.addr, align 8
  br label %if.end.22

if.end.22:                                        ; preds = %if.then.20, %while.end
  br label %while.cond.23

while.cond.23:                                    ; preds = %while.body.32, %if.end.22
  %15 = load i8*, i8** %s.addr, align 8
  %16 = load i8, i8* %15, align 1
  %conv24 = sext i8 %16 to i32
  %cmp25 = icmp sge i32 %conv24, 48
  br i1 %cmp25, label %land.rhs.27, label %land.end.31

land.rhs.27:                                      ; preds = %while.cond.23
  %17 = load i8*, i8** %s.addr, align 8
  %18 = load i8, i8* %17, align 1
  %conv28 = sext i8 %18 to i32
  %cmp29 = icmp sle i32 %conv28, 57
  br label %land.end.31

land.end.31:                                      ; preds = %land.rhs.27, %while.cond.23
  %19 = phi i1 [ false, %while.cond.23 ], [ %cmp29, %land.rhs.27 ]
  br i1 %19, label %while.body.32, label %while.end.34

while.body.32:                                    ; preds = %land.end.31
  %20 = load i8*, i8** %s.addr, align 8
  %incdec.ptr33 = getelementptr inbounds i8, i8* %20, i32 1
  store i8* %incdec.ptr33, i8** %s.addr, align 8
  br label %while.cond.23

while.end.34:                                     ; preds = %land.end.31
  %21 = load i8*, i8** %s.addr, align 8
  %22 = load i8, i8* %21, align 1
  %conv35 = sext i8 %22 to i32
  %cmp36 = icmp ne i32 %conv35, 125
  br i1 %cmp36, label %if.then.38, label %if.end.39

if.then.38:                                       ; preds = %while.end.34
  store i32 0, i32* %retval
  br label %return

if.end.39:                                        ; preds = %while.end.34
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.39, %if.then.38, %if.then.8, %if.then
  %23 = load i32, i32* %retval
  ret i32 %23
}

; Function Attrs: nounwind uwtable
define internal %struct.regnode* @S_regclass(%struct.RExC_state_t* %pRExC_state) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %value = alloca i64, align 8
  %nextvalue = alloca i64, align 8
  %prevvalue = alloca i64, align 8
  %range = alloca i64, align 8
  %ret = alloca %struct.regnode*, align 8
  %numlen = alloca i64, align 8
  %namedclass = alloca i64, align 8
  %rangebegin = alloca i8*, align 8
  %need_class = alloca i8, align 1
  %listsv = alloca %struct.sv*, align 8
  %e = alloca i8*, align 8
  %n = alloca i64, align 8
  %optimize_invert = alloca i8, align 1
  %unicode_alternate = alloca %struct.av*, align 8
  %offset = alloca i64, align 8
  %c = alloca i8, align 1
  %offset186 = alloca i64, align 8
  %offset235 = alloca i64, align 8
  %flags369 = alloca i32, align 4
  %offset381 = alloca i64, align 8
  %flags401 = alloca i32, align 4
  %flags422 = alloca i32, align 4
  %offset468 = alloca i64, align 8
  %offset527 = alloca i64, align 8
  %what = alloca i8*, align 8
  %yesno = alloca i8, align 1
  %offset1933 = alloca i64, align 8
  %offset1965 = alloca i64, align 8
  %offset2035 = alloca i64, align 8
  %i = alloca i64, align 8
  %ceilvalue = alloca i64, align 8
  %prevnatvalue = alloca i64, align 8
  %natvalue = alloca i64, align 8
  %foldbuf = alloca [7 x i8], align 1
  %foldlen = alloca i64, align 8
  %f = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  %fold = alloca i64, align 8
  %av = alloca %struct.av*, align 8
  %rv = alloca %struct.sv*, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i64 12345678, i64* %prevvalue, align 8
  store i64 0, i64* %range, align 8
  store i8* null, i8** %rangebegin, align 8
  store i8 0, i8* %need_class, align 1
  store %struct.sv* null, %struct.sv** %listsv, align 8
  store i8 1, i8* %optimize_invert, align 1
  store %struct.av* null, %struct.av** %unicode_alternate, align 8
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call = call %struct.regnode* @S_reganode(%struct.RExC_state_t* %0, i8 zeroext 17, i32 0)
  store %struct.regnode* %call, %struct.regnode** %ret, align 8
  %1 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1, i32 0, i32 8
  %2 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %cmp = icmp eq %struct.regnode* %2, @PL_regdummy
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %3 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags = getelementptr inbounds %struct.regnode, %struct.regnode* %3, i32 0, i32 0
  store i8 0, i8* %flags, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %4, i32 0, i32 5
  %5 = load i8*, i8** %parse, align 8
  %6 = load i8, i8* %5, align 1
  %conv = zext i8 %6 to i32
  %cmp1 = icmp eq i32 %conv, 94
  br i1 %cmp1, label %if.then.3, label %if.end.13

if.then.3:                                        ; preds = %if.end
  %7 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %7, i32 0, i32 9
  %8 = load i32, i32* %naughty, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %naughty, align 4
  %9 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse4 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %9, i32 0, i32 5
  %10 = load i8*, i8** %parse4, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr, i8** %parse4, align 8
  %11 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit5 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %11, i32 0, i32 8
  %12 = load %struct.regnode*, %struct.regnode** %emit5, align 8
  %cmp6 = icmp eq %struct.regnode* %12, @PL_regdummy
  br i1 %cmp6, label %if.end.12, label %if.then.8

if.then.8:                                        ; preds = %if.then.3
  %13 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags9 = getelementptr inbounds %struct.regnode, %struct.regnode* %13, i32 0, i32 0
  %14 = load i8, i8* %flags9, align 1
  %conv10 = zext i8 %14 to i32
  %or = or i32 %conv10, 4
  %conv11 = trunc i32 %or to i8
  store i8 %conv11, i8* %flags9, align 1
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.8, %if.then.3
  br label %if.end.13

if.end.13:                                        ; preds = %if.end.12, %if.end
  %15 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit14 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %15, i32 0, i32 8
  %16 = load %struct.regnode*, %struct.regnode** %emit14, align 8
  %cmp15 = icmp eq %struct.regnode* %16, @PL_regdummy
  br i1 %cmp15, label %if.then.17, label %if.else

if.then.17:                                       ; preds = %if.end.13
  %17 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %size = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %17, i32 0, i32 12
  %18 = load i32, i32* %size, align 4
  %conv18 = sext i32 %18 to i64
  %add = add i64 %conv18, 9
  %conv19 = trunc i64 %add to i32
  store i32 %conv19, i32* %size, align 4
  br label %if.end.41

if.else:                                          ; preds = %if.end.13
  %19 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit20 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %19, i32 0, i32 8
  %20 = load %struct.regnode*, %struct.regnode** %emit20, align 8
  %add.ptr = getelementptr inbounds %struct.regnode, %struct.regnode* %20, i64 9
  store %struct.regnode* %add.ptr, %struct.regnode** %emit20, align 8
  %21 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags21 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %21, i32 0, i32 0
  %22 = load i32, i32* %flags21, align 4
  %and = and i32 %22, 16384
  %cmp22 = icmp ne i32 %and, 0
  br i1 %cmp22, label %if.then.24, label %if.end.29

if.then.24:                                       ; preds = %if.else
  %23 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags25 = getelementptr inbounds %struct.regnode, %struct.regnode* %23, i32 0, i32 0
  %24 = load i8, i8* %flags25, align 1
  %conv26 = zext i8 %24 to i32
  %or27 = or i32 %conv26, 2
  %conv28 = trunc i32 %or27 to i8
  store i8 %conv28, i8* %flags25, align 1
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.24, %if.else
  %25 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags30 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %25, i32 0, i32 0
  %26 = load i32, i32* %flags30, align 4
  %and31 = and i32 %26, 2048
  %cmp32 = icmp ne i32 %and31, 0
  br i1 %cmp32, label %if.then.34, label %if.end.39

if.then.34:                                       ; preds = %if.end.29
  %27 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags35 = getelementptr inbounds %struct.regnode, %struct.regnode* %27, i32 0, i32 0
  %28 = load i8, i8* %flags35, align 1
  %conv36 = zext i8 %28 to i32
  %or37 = or i32 %conv36, 1
  %conv38 = trunc i32 %or37 to i8
  store i8 %conv38, i8* %flags35, align 1
  br label %if.end.39

if.end.39:                                        ; preds = %if.then.34, %if.end.29
  %29 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %30 = bitcast %struct.regnode* %29 to %struct.regnode_charclass*
  %bitmap = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %30, i32 0, i32 4
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* %arraydecay, i8 0, i64 32, i32 1, i1 false)
  %call40 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.56, i32 0, i32 0), i64 10)
  store %struct.sv* %call40, %struct.sv** %listsv, align 8
  br label %if.end.41

if.end.41:                                        ; preds = %if.end.39, %if.then.17
  %31 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse42 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %31, i32 0, i32 5
  %32 = load i8*, i8** %parse42, align 8
  %33 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %33, i32 0, i32 4
  %34 = load i8*, i8** %end, align 8
  %cmp43 = icmp ult i8* %32, %34
  br i1 %cmp43, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.41
  %35 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse45 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %35, i32 0, i32 5
  %36 = load i8*, i8** %parse45, align 8
  %37 = load i8, i8* %36, align 1
  %conv46 = zext i8 %37 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end.41
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv46, %cond.true ], [ 0, %cond.false ]
  %conv47 = sext i32 %cond to i64
  store i64 %conv47, i64* %nextvalue, align 8
  %38 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit48 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %38, i32 0, i32 8
  %39 = load %struct.regnode*, %struct.regnode** %emit48, align 8
  %cmp49 = icmp eq %struct.regnode* %39, @PL_regdummy
  br i1 %cmp49, label %if.end.59, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.end
  %40 = load i64, i64* %nextvalue, align 8
  %cmp51 = icmp eq i64 %40, 58
  br i1 %cmp51, label %if.then.58, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %41 = load i64, i64* %nextvalue, align 8
  %cmp53 = icmp eq i64 %41, 61
  br i1 %cmp53, label %if.then.58, label %lor.lhs.false.55

lor.lhs.false.55:                                 ; preds = %lor.lhs.false
  %42 = load i64, i64* %nextvalue, align 8
  %cmp56 = icmp eq i64 %42, 46
  br i1 %cmp56, label %if.then.58, label %if.end.59

if.then.58:                                       ; preds = %lor.lhs.false.55, %lor.lhs.false, %land.lhs.true
  %43 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  call void @S_checkposixcc(%struct.RExC_state_t* %43)
  br label %if.end.59

if.end.59:                                        ; preds = %if.then.58, %lor.lhs.false.55, %cond.end
  %44 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse60 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %44, i32 0, i32 5
  %45 = load i8*, i8** %parse60, align 8
  %46 = load i8, i8* %45, align 1
  %conv61 = zext i8 %46 to i32
  %cmp62 = icmp eq i32 %conv61, 93
  br i1 %cmp62, label %if.then.64, label %if.end.65

if.then.64:                                       ; preds = %if.end.59
  br label %charclassloop

if.end.65:                                        ; preds = %if.end.59
  br label %while.cond

while.cond:                                       ; preds = %if.end.2193, %if.end.2065, %if.end.1957, %if.end.65
  %47 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse66 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %47, i32 0, i32 5
  %48 = load i8*, i8** %parse66, align 8
  %49 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end67 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %49, i32 0, i32 4
  %50 = load i8*, i8** %end67, align 8
  %cmp68 = icmp ult i8* %48, %50
  br i1 %cmp68, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %51 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse70 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %51, i32 0, i32 5
  %52 = load i8*, i8** %parse70, align 8
  %53 = load i8, i8* %52, align 1
  %conv71 = zext i8 %53 to i32
  %cmp72 = icmp ne i32 %conv71, 93
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %54 = phi i1 [ false, %while.cond ], [ %cmp72, %land.rhs ]
  br i1 %54, label %while.body, label %while.end.2194

while.body:                                       ; preds = %land.end
  br label %charclassloop

charclassloop:                                    ; preds = %while.body, %if.then.64
  store i64 -1, i64* %namedclass, align 8
  %55 = load i64, i64* %range, align 8
  %tobool = icmp ne i64 %55, 0
  br i1 %tobool, label %if.end.76, label %if.then.74

if.then.74:                                       ; preds = %charclassloop
  %56 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse75 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %56, i32 0, i32 5
  %57 = load i8*, i8** %parse75, align 8
  store i8* %57, i8** %rangebegin, align 8
  br label %if.end.76

if.end.76:                                        ; preds = %if.then.74, %charclassloop
  %58 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %58, i32 0, i32 17
  %59 = load i32, i32* %utf8, align 4
  %cmp77 = icmp ne i32 %59, 0
  br i1 %cmp77, label %if.then.79, label %if.else.86

if.then.79:                                       ; preds = %if.end.76
  %60 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse80 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %60, i32 0, i32 5
  %61 = load i8*, i8** %parse80, align 8
  %62 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end81 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %62, i32 0, i32 4
  %63 = load i8*, i8** %end81, align 8
  %64 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse82 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %64, i32 0, i32 5
  %65 = load i8*, i8** %parse82, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %63 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %65 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call83 = call i64 @Perl_utf8n_to_uvuni(i8* %61, i64 %sub.ptr.sub, i64* %numlen, i32 0)
  store i64 %call83, i64* %value, align 8
  %66 = load i64, i64* %numlen, align 8
  %67 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse84 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %67, i32 0, i32 5
  %68 = load i8*, i8** %parse84, align 8
  %add.ptr85 = getelementptr inbounds i8, i8* %68, i64 %66
  store i8* %add.ptr85, i8** %parse84, align 8
  br label %if.end.91

if.else.86:                                       ; preds = %if.end.76
  %69 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse87 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %69, i32 0, i32 5
  %70 = load i8*, i8** %parse87, align 8
  %incdec.ptr88 = getelementptr inbounds i8, i8* %70, i32 1
  store i8* %incdec.ptr88, i8** %parse87, align 8
  %71 = load i8, i8* %70, align 1
  %conv89 = zext i8 %71 to i32
  %conv90 = sext i32 %conv89 to i64
  store i64 %conv90, i64* %value, align 8
  br label %if.end.91

if.end.91:                                        ; preds = %if.else.86, %if.then.79
  %72 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse92 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %72, i32 0, i32 5
  %73 = load i8*, i8** %parse92, align 8
  %74 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end93 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %74, i32 0, i32 4
  %75 = load i8*, i8** %end93, align 8
  %cmp94 = icmp ult i8* %73, %75
  br i1 %cmp94, label %cond.true.96, label %cond.false.99

cond.true.96:                                     ; preds = %if.end.91
  %76 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse97 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %76, i32 0, i32 5
  %77 = load i8*, i8** %parse97, align 8
  %78 = load i8, i8* %77, align 1
  %conv98 = zext i8 %78 to i32
  br label %cond.end.100

cond.false.99:                                    ; preds = %if.end.91
  br label %cond.end.100

cond.end.100:                                     ; preds = %cond.false.99, %cond.true.96
  %cond101 = phi i32 [ %conv98, %cond.true.96 ], [ 0, %cond.false.99 ]
  %conv102 = sext i32 %cond101 to i64
  store i64 %conv102, i64* %nextvalue, align 8
  %79 = load i64, i64* %value, align 8
  %cmp103 = icmp eq i64 %79, 91
  br i1 %cmp103, label %land.lhs.true.105, label %if.else.118

land.lhs.true.105:                                ; preds = %cond.end.100
  %80 = load i64, i64* %nextvalue, align 8
  %cmp106 = icmp eq i64 %80, 58
  br i1 %cmp106, label %if.then.114, label %lor.lhs.false.108

lor.lhs.false.108:                                ; preds = %land.lhs.true.105
  %81 = load i64, i64* %nextvalue, align 8
  %cmp109 = icmp eq i64 %81, 61
  br i1 %cmp109, label %if.then.114, label %lor.lhs.false.111

lor.lhs.false.111:                                ; preds = %lor.lhs.false.108
  %82 = load i64, i64* %nextvalue, align 8
  %cmp112 = icmp eq i64 %82, 46
  br i1 %cmp112, label %if.then.114, label %if.else.118

if.then.114:                                      ; preds = %lor.lhs.false.111, %lor.lhs.false.108, %land.lhs.true.105
  %83 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %84 = load i64, i64* %value, align 8
  %conv115 = trunc i64 %84 to i32
  %call116 = call i32 @S_regpposixcc(%struct.RExC_state_t* %83, i32 %conv115)
  %conv117 = sext i32 %call116 to i64
  store i64 %conv117, i64* %namedclass, align 8
  br label %if.end.481

if.else.118:                                      ; preds = %lor.lhs.false.111, %cond.end.100
  %85 = load i64, i64* %value, align 8
  %cmp119 = icmp eq i64 %85, 92
  br i1 %cmp119, label %if.then.121, label %if.end.480

if.then.121:                                      ; preds = %if.else.118
  %86 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8122 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %86, i32 0, i32 17
  %87 = load i32, i32* %utf8122, align 4
  %cmp123 = icmp ne i32 %87, 0
  br i1 %cmp123, label %if.then.125, label %if.else.135

if.then.125:                                      ; preds = %if.then.121
  %88 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse126 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %88, i32 0, i32 5
  %89 = load i8*, i8** %parse126, align 8
  %90 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end127 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %90, i32 0, i32 4
  %91 = load i8*, i8** %end127, align 8
  %92 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse128 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %92, i32 0, i32 5
  %93 = load i8*, i8** %parse128, align 8
  %sub.ptr.lhs.cast129 = ptrtoint i8* %91 to i64
  %sub.ptr.rhs.cast130 = ptrtoint i8* %93 to i64
  %sub.ptr.sub131 = sub i64 %sub.ptr.lhs.cast129, %sub.ptr.rhs.cast130
  %call132 = call i64 @Perl_utf8n_to_uvuni(i8* %89, i64 %sub.ptr.sub131, i64* %numlen, i32 0)
  store i64 %call132, i64* %value, align 8
  %94 = load i64, i64* %numlen, align 8
  %95 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse133 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %95, i32 0, i32 5
  %96 = load i8*, i8** %parse133, align 8
  %add.ptr134 = getelementptr inbounds i8, i8* %96, i64 %94
  store i8* %add.ptr134, i8** %parse133, align 8
  br label %if.end.140

if.else.135:                                      ; preds = %if.then.121
  %97 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse136 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %97, i32 0, i32 5
  %98 = load i8*, i8** %parse136, align 8
  %incdec.ptr137 = getelementptr inbounds i8, i8* %98, i32 1
  store i8* %incdec.ptr137, i8** %parse136, align 8
  %99 = load i8, i8* %98, align 1
  %conv138 = zext i8 %99 to i32
  %conv139 = sext i32 %conv138 to i64
  store i64 %conv139, i64* %value, align 8
  br label %if.end.140

if.end.140:                                       ; preds = %if.else.135, %if.then.125
  %100 = load i64, i64* %value, align 8
  %conv141 = trunc i64 %100 to i32
  switch i32 %conv141, label %sw.default [
    i32 119, label %sw.bb
    i32 87, label %sw.bb.142
    i32 115, label %sw.bb.143
    i32 83, label %sw.bb.144
    i32 100, label %sw.bb.145
    i32 68, label %sw.bb.146
    i32 112, label %sw.bb.147
    i32 80, label %sw.bb.147
    i32 110, label %sw.bb.356
    i32 114, label %sw.bb.357
    i32 116, label %sw.bb.358
    i32 102, label %sw.bb.359
    i32 98, label %sw.bb.360
    i32 101, label %sw.bb.361
    i32 97, label %sw.bb.362
    i32 120, label %sw.bb.363
    i32 99, label %sw.bb.407
    i32 48, label %sw.bb.421
    i32 49, label %sw.bb.421
    i32 50, label %sw.bb.421
    i32 51, label %sw.bb.421
    i32 52, label %sw.bb.421
    i32 53, label %sw.bb.421
    i32 54, label %sw.bb.421
    i32 55, label %sw.bb.421
    i32 56, label %sw.bb.421
    i32 57, label %sw.bb.421
  ]

sw.bb:                                            ; preds = %if.end.140
  store i64 0, i64* %namedclass, align 8
  br label %sw.epilog

sw.bb.142:                                        ; preds = %if.end.140
  store i64 1, i64* %namedclass, align 8
  br label %sw.epilog

sw.bb.143:                                        ; preds = %if.end.140
  store i64 2, i64* %namedclass, align 8
  br label %sw.epilog

sw.bb.144:                                        ; preds = %if.end.140
  store i64 3, i64* %namedclass, align 8
  br label %sw.epilog

sw.bb.145:                                        ; preds = %if.end.140
  store i64 4, i64* %namedclass, align 8
  br label %sw.epilog

sw.bb.146:                                        ; preds = %if.end.140
  store i64 5, i64* %namedclass, align 8
  br label %sw.epilog

sw.bb.147:                                        ; preds = %if.end.140, %if.end.140
  %101 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse148 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %101, i32 0, i32 5
  %102 = load i8*, i8** %parse148, align 8
  %103 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end149 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %103, i32 0, i32 4
  %104 = load i8*, i8** %end149, align 8
  %cmp150 = icmp uge i8* %102, %104
  br i1 %cmp150, label %if.then.152, label %if.end.168

if.then.152:                                      ; preds = %sw.bb.147
  %105 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit153 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %105, i32 0, i32 8
  %106 = load %struct.regnode*, %struct.regnode** %emit153, align 8
  %cmp154 = icmp eq %struct.regnode* %106, @PL_regdummy
  br i1 %cmp154, label %if.end.157, label %if.then.156

if.then.156:                                      ; preds = %if.then.152
  %107 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %107, i32 0, i32 2
  %108 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %109 = bitcast %struct.regexp* %108 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %109)
  br label %if.end.157

if.end.157:                                       ; preds = %if.then.156, %if.then.152
  %110 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse158 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %110, i32 0, i32 5
  %111 = load i8*, i8** %parse158, align 8
  %112 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %112, i32 0, i32 1
  %113 = load i8*, i8** %precomp, align 8
  %sub.ptr.lhs.cast159 = ptrtoint i8* %111 to i64
  %sub.ptr.rhs.cast160 = ptrtoint i8* %113 to i64
  %sub.ptr.sub161 = sub i64 %sub.ptr.lhs.cast159, %sub.ptr.rhs.cast160
  store i64 %sub.ptr.sub161, i64* %offset, align 8
  %114 = load i64, i64* %value, align 8
  %conv162 = trunc i64 %114 to i8
  %conv163 = zext i8 %conv162 to i32
  %115 = load i64, i64* %offset, align 8
  %conv164 = trunc i64 %115 to i32
  %116 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp165 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %116, i32 0, i32 1
  %117 = load i8*, i8** %precomp165, align 8
  %118 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp166 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %118, i32 0, i32 1
  %119 = load i8*, i8** %precomp166, align 8
  %120 = load i64, i64* %offset, align 8
  %add.ptr167 = getelementptr inbounds i8, i8* %119, i64 %120
  call void (i8*, i8*, ...) @S_re_croak2(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.57, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.16, i32 0, i32 0), i32 %conv163, i32 %conv164, i8* %117, i8* %add.ptr167)
  br label %if.end.168

if.end.168:                                       ; preds = %if.end.157, %sw.bb.147
  %121 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse169 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %121, i32 0, i32 5
  %122 = load i8*, i8** %parse169, align 8
  %123 = load i8, i8* %122, align 1
  %conv170 = sext i8 %123 to i32
  %cmp171 = icmp eq i32 %conv170, 123
  br i1 %cmp171, label %if.then.173, label %if.else.289

if.then.173:                                      ; preds = %if.end.168
  %124 = load i64, i64* %value, align 8
  %conv174 = trunc i64 %124 to i8
  store i8 %conv174, i8* %c, align 1
  %125 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse175 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %125, i32 0, i32 5
  %126 = load i8*, i8** %parse175, align 8
  %incdec.ptr176 = getelementptr inbounds i8, i8* %126, i32 1
  store i8* %incdec.ptr176, i8** %parse175, align 8
  %call177 = call i8* @strchr(i8* %126, i32 125)
  store i8* %call177, i8** %e, align 8
  %127 = load i8*, i8** %e, align 8
  %tobool178 = icmp ne i8* %127, null
  br i1 %tobool178, label %if.end.197, label %if.then.179

if.then.179:                                      ; preds = %if.then.173
  %128 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit180 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %128, i32 0, i32 8
  %129 = load %struct.regnode*, %struct.regnode** %emit180, align 8
  %cmp181 = icmp eq %struct.regnode* %129, @PL_regdummy
  br i1 %cmp181, label %if.end.185, label %if.then.183

if.then.183:                                      ; preds = %if.then.179
  %130 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx184 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %130, i32 0, i32 2
  %131 = load %struct.regexp*, %struct.regexp** %rx184, align 8
  %132 = bitcast %struct.regexp* %131 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %132)
  br label %if.end.185

if.end.185:                                       ; preds = %if.then.183, %if.then.179
  %133 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse187 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %133, i32 0, i32 5
  %134 = load i8*, i8** %parse187, align 8
  %135 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp188 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %135, i32 0, i32 1
  %136 = load i8*, i8** %precomp188, align 8
  %sub.ptr.lhs.cast189 = ptrtoint i8* %134 to i64
  %sub.ptr.rhs.cast190 = ptrtoint i8* %136 to i64
  %sub.ptr.sub191 = sub i64 %sub.ptr.lhs.cast189, %sub.ptr.rhs.cast190
  store i64 %sub.ptr.sub191, i64* %offset186, align 8
  %137 = load i8, i8* %c, align 1
  %conv192 = zext i8 %137 to i32
  %138 = load i64, i64* %offset186, align 8
  %conv193 = trunc i64 %138 to i32
  %139 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp194 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %139, i32 0, i32 1
  %140 = load i8*, i8** %precomp194, align 8
  %141 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp195 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %141, i32 0, i32 1
  %142 = load i8*, i8** %precomp195, align 8
  %143 = load i64, i64* %offset186, align 8
  %add.ptr196 = getelementptr inbounds i8, i8* %142, i64 %143
  call void (i8*, i8*, ...) @S_re_croak2(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.16, i32 0, i32 0), i32 %conv192, i32 %conv193, i8* %140, i8* %add.ptr196)
  br label %if.end.197

if.end.197:                                       ; preds = %if.end.185, %if.then.173
  br label %while.cond.198

while.cond.198:                                   ; preds = %while.body.222, %if.end.197
  %144 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse199 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %144, i32 0, i32 5
  %145 = load i8*, i8** %parse199, align 8
  %146 = load i8, i8* %145, align 1
  %conv200 = zext i8 %146 to i32
  %cmp201 = icmp eq i32 %conv200, 32
  br i1 %cmp201, label %lor.end, label %lor.lhs.false.203

lor.lhs.false.203:                                ; preds = %while.cond.198
  %147 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse204 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %147, i32 0, i32 5
  %148 = load i8*, i8** %parse204, align 8
  %149 = load i8, i8* %148, align 1
  %conv205 = zext i8 %149 to i32
  %cmp206 = icmp eq i32 %conv205, 9
  br i1 %cmp206, label %lor.end, label %lor.lhs.false.208

lor.lhs.false.208:                                ; preds = %lor.lhs.false.203
  %150 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse209 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %150, i32 0, i32 5
  %151 = load i8*, i8** %parse209, align 8
  %152 = load i8, i8* %151, align 1
  %conv210 = zext i8 %152 to i32
  %cmp211 = icmp eq i32 %conv210, 10
  br i1 %cmp211, label %lor.end, label %lor.lhs.false.213

lor.lhs.false.213:                                ; preds = %lor.lhs.false.208
  %153 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse214 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %153, i32 0, i32 5
  %154 = load i8*, i8** %parse214, align 8
  %155 = load i8, i8* %154, align 1
  %conv215 = zext i8 %155 to i32
  %cmp216 = icmp eq i32 %conv215, 13
  br i1 %cmp216, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false.213
  %156 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse218 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %156, i32 0, i32 5
  %157 = load i8*, i8** %parse218, align 8
  %158 = load i8, i8* %157, align 1
  %conv219 = zext i8 %158 to i32
  %cmp220 = icmp eq i32 %conv219, 12
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false.213, %lor.lhs.false.208, %lor.lhs.false.203, %while.cond.198
  %159 = phi i1 [ true, %lor.lhs.false.213 ], [ true, %lor.lhs.false.208 ], [ true, %lor.lhs.false.203 ], [ true, %while.cond.198 ], [ %cmp220, %lor.rhs ]
  br i1 %159, label %while.body.222, label %while.end

while.body.222:                                   ; preds = %lor.end
  %160 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse223 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %160, i32 0, i32 5
  %161 = load i8*, i8** %parse223, align 8
  %incdec.ptr224 = getelementptr inbounds i8, i8* %161, i32 1
  store i8* %incdec.ptr224, i8** %parse223, align 8
  br label %while.cond.198

while.end:                                        ; preds = %lor.end
  %162 = load i8*, i8** %e, align 8
  %163 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse225 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %163, i32 0, i32 5
  %164 = load i8*, i8** %parse225, align 8
  %cmp226 = icmp eq i8* %162, %164
  br i1 %cmp226, label %if.then.228, label %if.end.246

if.then.228:                                      ; preds = %while.end
  %165 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit229 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %165, i32 0, i32 8
  %166 = load %struct.regnode*, %struct.regnode** %emit229, align 8
  %cmp230 = icmp eq %struct.regnode* %166, @PL_regdummy
  br i1 %cmp230, label %if.end.234, label %if.then.232

if.then.232:                                      ; preds = %if.then.228
  %167 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx233 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %167, i32 0, i32 2
  %168 = load %struct.regexp*, %struct.regexp** %rx233, align 8
  %169 = bitcast %struct.regexp* %168 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %169)
  br label %if.end.234

if.end.234:                                       ; preds = %if.then.232, %if.then.228
  %170 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse236 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %170, i32 0, i32 5
  %171 = load i8*, i8** %parse236, align 8
  %172 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp237 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %172, i32 0, i32 1
  %173 = load i8*, i8** %precomp237, align 8
  %sub.ptr.lhs.cast238 = ptrtoint i8* %171 to i64
  %sub.ptr.rhs.cast239 = ptrtoint i8* %173 to i64
  %sub.ptr.sub240 = sub i64 %sub.ptr.lhs.cast238, %sub.ptr.rhs.cast239
  store i64 %sub.ptr.sub240, i64* %offset235, align 8
  %174 = load i8, i8* %c, align 1
  %conv241 = zext i8 %174 to i32
  %175 = load i64, i64* %offset235, align 8
  %conv242 = trunc i64 %175 to i32
  %176 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp243 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %176, i32 0, i32 1
  %177 = load i8*, i8** %precomp243, align 8
  %178 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp244 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %178, i32 0, i32 1
  %179 = load i8*, i8** %precomp244, align 8
  %180 = load i64, i64* %offset235, align 8
  %add.ptr245 = getelementptr inbounds i8, i8* %179, i64 %180
  call void (i8*, i8*, ...) @S_re_croak2(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.57, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.16, i32 0, i32 0), i32 %conv241, i32 %conv242, i8* %177, i8* %add.ptr245)
  br label %if.end.246

if.end.246:                                       ; preds = %if.end.234, %while.end
  %181 = load i8*, i8** %e, align 8
  %182 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse247 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %182, i32 0, i32 5
  %183 = load i8*, i8** %parse247, align 8
  %sub.ptr.lhs.cast248 = ptrtoint i8* %181 to i64
  %sub.ptr.rhs.cast249 = ptrtoint i8* %183 to i64
  %sub.ptr.sub250 = sub i64 %sub.ptr.lhs.cast248, %sub.ptr.rhs.cast249
  store i64 %sub.ptr.sub250, i64* %n, align 8
  br label %while.cond.251

while.cond.251:                                   ; preds = %while.body.287, %if.end.246
  %184 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse252 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %184, i32 0, i32 5
  %185 = load i8*, i8** %parse252, align 8
  %186 = load i64, i64* %n, align 8
  %add.ptr253 = getelementptr inbounds i8, i8* %185, i64 %186
  %add.ptr254 = getelementptr inbounds i8, i8* %add.ptr253, i64 -1
  %187 = load i8, i8* %add.ptr254, align 1
  %conv255 = zext i8 %187 to i32
  %cmp256 = icmp eq i32 %conv255, 32
  br i1 %cmp256, label %lor.end.286, label %lor.lhs.false.258

lor.lhs.false.258:                                ; preds = %while.cond.251
  %188 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse259 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %188, i32 0, i32 5
  %189 = load i8*, i8** %parse259, align 8
  %190 = load i64, i64* %n, align 8
  %add.ptr260 = getelementptr inbounds i8, i8* %189, i64 %190
  %add.ptr261 = getelementptr inbounds i8, i8* %add.ptr260, i64 -1
  %191 = load i8, i8* %add.ptr261, align 1
  %conv262 = zext i8 %191 to i32
  %cmp263 = icmp eq i32 %conv262, 9
  br i1 %cmp263, label %lor.end.286, label %lor.lhs.false.265

lor.lhs.false.265:                                ; preds = %lor.lhs.false.258
  %192 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse266 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %192, i32 0, i32 5
  %193 = load i8*, i8** %parse266, align 8
  %194 = load i64, i64* %n, align 8
  %add.ptr267 = getelementptr inbounds i8, i8* %193, i64 %194
  %add.ptr268 = getelementptr inbounds i8, i8* %add.ptr267, i64 -1
  %195 = load i8, i8* %add.ptr268, align 1
  %conv269 = zext i8 %195 to i32
  %cmp270 = icmp eq i32 %conv269, 10
  br i1 %cmp270, label %lor.end.286, label %lor.lhs.false.272

lor.lhs.false.272:                                ; preds = %lor.lhs.false.265
  %196 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse273 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %196, i32 0, i32 5
  %197 = load i8*, i8** %parse273, align 8
  %198 = load i64, i64* %n, align 8
  %add.ptr274 = getelementptr inbounds i8, i8* %197, i64 %198
  %add.ptr275 = getelementptr inbounds i8, i8* %add.ptr274, i64 -1
  %199 = load i8, i8* %add.ptr275, align 1
  %conv276 = zext i8 %199 to i32
  %cmp277 = icmp eq i32 %conv276, 13
  br i1 %cmp277, label %lor.end.286, label %lor.rhs.279

lor.rhs.279:                                      ; preds = %lor.lhs.false.272
  %200 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse280 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %200, i32 0, i32 5
  %201 = load i8*, i8** %parse280, align 8
  %202 = load i64, i64* %n, align 8
  %add.ptr281 = getelementptr inbounds i8, i8* %201, i64 %202
  %add.ptr282 = getelementptr inbounds i8, i8* %add.ptr281, i64 -1
  %203 = load i8, i8* %add.ptr282, align 1
  %conv283 = zext i8 %203 to i32
  %cmp284 = icmp eq i32 %conv283, 12
  br label %lor.end.286

lor.end.286:                                      ; preds = %lor.rhs.279, %lor.lhs.false.272, %lor.lhs.false.265, %lor.lhs.false.258, %while.cond.251
  %204 = phi i1 [ true, %lor.lhs.false.272 ], [ true, %lor.lhs.false.265 ], [ true, %lor.lhs.false.258 ], [ true, %while.cond.251 ], [ %cmp284, %lor.rhs.279 ]
  br i1 %204, label %while.body.287, label %while.end.288

while.body.287:                                   ; preds = %lor.end.286
  %205 = load i64, i64* %n, align 8
  %dec = add i64 %205, -1
  store i64 %dec, i64* %n, align 8
  br label %while.cond.251

while.end.288:                                    ; preds = %lor.end.286
  br label %if.end.291

if.else.289:                                      ; preds = %if.end.168
  %206 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse290 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %206, i32 0, i32 5
  %207 = load i8*, i8** %parse290, align 8
  store i8* %207, i8** %e, align 8
  store i64 1, i64* %n, align 8
  br label %if.end.291

if.end.291:                                       ; preds = %if.else.289, %while.end.288
  %208 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit292 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %208, i32 0, i32 8
  %209 = load %struct.regnode*, %struct.regnode** %emit292, align 8
  %cmp293 = icmp eq %struct.regnode* %209, @PL_regdummy
  br i1 %cmp293, label %if.end.349, label %if.then.295

if.then.295:                                      ; preds = %if.end.291
  %210 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse296 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %210, i32 0, i32 5
  %211 = load i8*, i8** %parse296, align 8
  %212 = load i8, i8* %211, align 1
  %conv297 = zext i8 %212 to i32
  %cmp298 = icmp eq i32 %conv297, 94
  br i1 %cmp298, label %if.then.300, label %if.end.339

if.then.300:                                      ; preds = %if.then.295
  %213 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse301 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %213, i32 0, i32 5
  %214 = load i8*, i8** %parse301, align 8
  %incdec.ptr302 = getelementptr inbounds i8, i8* %214, i32 1
  store i8* %incdec.ptr302, i8** %parse301, align 8
  %215 = load i64, i64* %n, align 8
  %dec303 = add i64 %215, -1
  store i64 %dec303, i64* %n, align 8
  %216 = load i64, i64* %value, align 8
  %cmp304 = icmp eq i64 %216, 112
  %cond306 = select i1 %cmp304, i32 80, i32 112
  %conv307 = sext i32 %cond306 to i64
  store i64 %conv307, i64* %value, align 8
  br label %while.cond.308

while.cond.308:                                   ; preds = %while.body.334, %if.then.300
  %217 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse309 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %217, i32 0, i32 5
  %218 = load i8*, i8** %parse309, align 8
  %219 = load i8, i8* %218, align 1
  %conv310 = zext i8 %219 to i32
  %cmp311 = icmp eq i32 %conv310, 32
  br i1 %cmp311, label %lor.end.333, label %lor.lhs.false.313

lor.lhs.false.313:                                ; preds = %while.cond.308
  %220 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse314 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %220, i32 0, i32 5
  %221 = load i8*, i8** %parse314, align 8
  %222 = load i8, i8* %221, align 1
  %conv315 = zext i8 %222 to i32
  %cmp316 = icmp eq i32 %conv315, 9
  br i1 %cmp316, label %lor.end.333, label %lor.lhs.false.318

lor.lhs.false.318:                                ; preds = %lor.lhs.false.313
  %223 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse319 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %223, i32 0, i32 5
  %224 = load i8*, i8** %parse319, align 8
  %225 = load i8, i8* %224, align 1
  %conv320 = zext i8 %225 to i32
  %cmp321 = icmp eq i32 %conv320, 10
  br i1 %cmp321, label %lor.end.333, label %lor.lhs.false.323

lor.lhs.false.323:                                ; preds = %lor.lhs.false.318
  %226 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse324 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %226, i32 0, i32 5
  %227 = load i8*, i8** %parse324, align 8
  %228 = load i8, i8* %227, align 1
  %conv325 = zext i8 %228 to i32
  %cmp326 = icmp eq i32 %conv325, 13
  br i1 %cmp326, label %lor.end.333, label %lor.rhs.328

lor.rhs.328:                                      ; preds = %lor.lhs.false.323
  %229 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse329 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %229, i32 0, i32 5
  %230 = load i8*, i8** %parse329, align 8
  %231 = load i8, i8* %230, align 1
  %conv330 = zext i8 %231 to i32
  %cmp331 = icmp eq i32 %conv330, 12
  br label %lor.end.333

lor.end.333:                                      ; preds = %lor.rhs.328, %lor.lhs.false.323, %lor.lhs.false.318, %lor.lhs.false.313, %while.cond.308
  %232 = phi i1 [ true, %lor.lhs.false.323 ], [ true, %lor.lhs.false.318 ], [ true, %lor.lhs.false.313 ], [ true, %while.cond.308 ], [ %cmp331, %lor.rhs.328 ]
  br i1 %232, label %while.body.334, label %while.end.338

while.body.334:                                   ; preds = %lor.end.333
  %233 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse335 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %233, i32 0, i32 5
  %234 = load i8*, i8** %parse335, align 8
  %incdec.ptr336 = getelementptr inbounds i8, i8* %234, i32 1
  store i8* %incdec.ptr336, i8** %parse335, align 8
  %235 = load i64, i64* %n, align 8
  %dec337 = add i64 %235, -1
  store i64 %dec337, i64* %n, align 8
  br label %while.cond.308

while.end.338:                                    ; preds = %lor.end.333
  br label %if.end.339

if.end.339:                                       ; preds = %while.end.338, %if.then.295
  %236 = load i64, i64* %value, align 8
  %cmp340 = icmp eq i64 %236, 112
  br i1 %cmp340, label %if.then.342, label %if.else.345

if.then.342:                                      ; preds = %if.end.339
  %237 = load %struct.sv*, %struct.sv** %listsv, align 8
  %238 = load i64, i64* %n, align 8
  %conv343 = trunc i64 %238 to i32
  %239 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse344 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %239, i32 0, i32 5
  %240 = load i8*, i8** %parse344, align 8
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %237, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.58, i32 0, i32 0), i32 %conv343, i8* %240)
  br label %if.end.348

if.else.345:                                      ; preds = %if.end.339
  %241 = load %struct.sv*, %struct.sv** %listsv, align 8
  %242 = load i64, i64* %n, align 8
  %conv346 = trunc i64 %242 to i32
  %243 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse347 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %243, i32 0, i32 5
  %244 = load i8*, i8** %parse347, align 8
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %241, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.59, i32 0, i32 0), i32 %conv346, i8* %244)
  br label %if.end.348

if.end.348:                                       ; preds = %if.else.345, %if.then.342
  br label %if.end.349

if.end.349:                                       ; preds = %if.end.348, %if.end.291
  %245 = load i8*, i8** %e, align 8
  %add.ptr350 = getelementptr inbounds i8, i8* %245, i64 1
  %246 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse351 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %246, i32 0, i32 5
  store i8* %add.ptr350, i8** %parse351, align 8
  %247 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags352 = getelementptr inbounds %struct.regnode, %struct.regnode* %247, i32 0, i32 0
  %248 = load i8, i8* %flags352, align 1
  %conv353 = zext i8 %248 to i32
  %or354 = or i32 %conv353, 32
  %conv355 = trunc i32 %or354 to i8
  store i8 %conv355, i8* %flags352, align 1
  store i64 32, i64* %namedclass, align 8
  br label %sw.epilog

sw.bb.356:                                        ; preds = %if.end.140
  store i64 10, i64* %value, align 8
  br label %sw.epilog

sw.bb.357:                                        ; preds = %if.end.140
  store i64 13, i64* %value, align 8
  br label %sw.epilog

sw.bb.358:                                        ; preds = %if.end.140
  store i64 9, i64* %value, align 8
  br label %sw.epilog

sw.bb.359:                                        ; preds = %if.end.140
  store i64 12, i64* %value, align 8
  br label %sw.epilog

sw.bb.360:                                        ; preds = %if.end.140
  store i64 8, i64* %value, align 8
  br label %sw.epilog

sw.bb.361:                                        ; preds = %if.end.140
  store i64 27, i64* %value, align 8
  br label %sw.epilog

sw.bb.362:                                        ; preds = %if.end.140
  store i64 7, i64* %value, align 8
  br label %sw.epilog

sw.bb.363:                                        ; preds = %if.end.140
  %249 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse364 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %249, i32 0, i32 5
  %250 = load i8*, i8** %parse364, align 8
  %251 = load i8, i8* %250, align 1
  %conv365 = sext i8 %251 to i32
  %cmp366 = icmp eq i32 %conv365, 123
  br i1 %cmp366, label %if.then.368, label %if.else.400

if.then.368:                                      ; preds = %sw.bb.363
  store i32 3, i32* %flags369, align 4
  %252 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse370 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %252, i32 0, i32 5
  %253 = load i8*, i8** %parse370, align 8
  %incdec.ptr371 = getelementptr inbounds i8, i8* %253, i32 1
  store i8* %incdec.ptr371, i8** %parse370, align 8
  %call372 = call i8* @strchr(i8* %253, i32 125)
  store i8* %call372, i8** %e, align 8
  %254 = load i8*, i8** %e, align 8
  %tobool373 = icmp ne i8* %254, null
  br i1 %tobool373, label %if.end.391, label %if.then.374

if.then.374:                                      ; preds = %if.then.368
  %255 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit375 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %255, i32 0, i32 8
  %256 = load %struct.regnode*, %struct.regnode** %emit375, align 8
  %cmp376 = icmp eq %struct.regnode* %256, @PL_regdummy
  br i1 %cmp376, label %if.end.380, label %if.then.378

if.then.378:                                      ; preds = %if.then.374
  %257 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx379 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %257, i32 0, i32 2
  %258 = load %struct.regexp*, %struct.regexp** %rx379, align 8
  %259 = bitcast %struct.regexp* %258 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %259)
  br label %if.end.380

if.end.380:                                       ; preds = %if.then.378, %if.then.374
  %260 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse382 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %260, i32 0, i32 5
  %261 = load i8*, i8** %parse382, align 8
  %262 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp383 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %262, i32 0, i32 1
  %263 = load i8*, i8** %precomp383, align 8
  %sub.ptr.lhs.cast384 = ptrtoint i8* %261 to i64
  %sub.ptr.rhs.cast385 = ptrtoint i8* %263 to i64
  %sub.ptr.sub386 = sub i64 %sub.ptr.lhs.cast384, %sub.ptr.rhs.cast385
  store i64 %sub.ptr.sub386, i64* %offset381, align 8
  %264 = load i64, i64* %offset381, align 8
  %conv387 = trunc i64 %264 to i32
  %265 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp388 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %265, i32 0, i32 1
  %266 = load i8*, i8** %precomp388, align 8
  %267 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp389 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %267, i32 0, i32 1
  %268 = load i8*, i8** %precomp389, align 8
  %269 = load i64, i64* %offset381, align 8
  %add.ptr390 = getelementptr inbounds i8, i8* %268, i64 %269
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.53, i32 0, i32 0), i32 %conv387, i8* %266, i8* %add.ptr390)
  br label %if.end.391

if.end.391:                                       ; preds = %if.end.380, %if.then.368
  %270 = load i8*, i8** %e, align 8
  %271 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse392 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %271, i32 0, i32 5
  %272 = load i8*, i8** %parse392, align 8
  %sub.ptr.lhs.cast393 = ptrtoint i8* %270 to i64
  %sub.ptr.rhs.cast394 = ptrtoint i8* %272 to i64
  %sub.ptr.sub395 = sub i64 %sub.ptr.lhs.cast393, %sub.ptr.rhs.cast394
  store i64 %sub.ptr.sub395, i64* %numlen, align 8
  %273 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse396 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %273, i32 0, i32 5
  %274 = load i8*, i8** %parse396, align 8
  %call397 = call i64 @Perl_grok_hex(i8* %274, i64* %numlen, i32* %flags369, double* null)
  store i64 %call397, i64* %value, align 8
  %275 = load i8*, i8** %e, align 8
  %add.ptr398 = getelementptr inbounds i8, i8* %275, i64 1
  %276 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse399 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %276, i32 0, i32 5
  store i8* %add.ptr398, i8** %parse399, align 8
  br label %if.end.406

if.else.400:                                      ; preds = %sw.bb.363
  store i32 2, i32* %flags401, align 4
  store i64 2, i64* %numlen, align 8
  %277 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse402 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %277, i32 0, i32 5
  %278 = load i8*, i8** %parse402, align 8
  %call403 = call i64 @Perl_grok_hex(i8* %278, i64* %numlen, i32* %flags401, double* null)
  store i64 %call403, i64* %value, align 8
  %279 = load i64, i64* %numlen, align 8
  %280 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse404 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %280, i32 0, i32 5
  %281 = load i8*, i8** %parse404, align 8
  %add.ptr405 = getelementptr inbounds i8, i8* %281, i64 %279
  store i8* %add.ptr405, i8** %parse404, align 8
  br label %if.end.406

if.end.406:                                       ; preds = %if.else.400, %if.end.391
  br label %sw.epilog

sw.bb.407:                                        ; preds = %if.end.140
  %282 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse408 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %282, i32 0, i32 5
  %283 = load i8*, i8** %parse408, align 8
  %incdec.ptr409 = getelementptr inbounds i8, i8* %283, i32 1
  store i8* %incdec.ptr409, i8** %parse408, align 8
  %284 = load i8, i8* %283, align 1
  %conv410 = zext i8 %284 to i32
  %conv411 = sext i32 %conv410 to i64
  store i64 %conv411, i64* %value, align 8
  %285 = load i64, i64* %value, align 8
  %cmp412 = icmp uge i64 %285, 97
  br i1 %cmp412, label %land.lhs.true.414, label %cond.false.418

land.lhs.true.414:                                ; preds = %sw.bb.407
  %286 = load i64, i64* %value, align 8
  %cmp415 = icmp ule i64 %286, 122
  br i1 %cmp415, label %cond.true.417, label %cond.false.418

cond.true.417:                                    ; preds = %land.lhs.true.414
  %287 = load i64, i64* %value, align 8
  %sub = sub i64 %287, 32
  br label %cond.end.419

cond.false.418:                                   ; preds = %land.lhs.true.414, %sw.bb.407
  %288 = load i64, i64* %value, align 8
  br label %cond.end.419

cond.end.419:                                     ; preds = %cond.false.418, %cond.true.417
  %cond420 = phi i64 [ %sub, %cond.true.417 ], [ %288, %cond.false.418 ]
  %xor = xor i64 %cond420, 64
  store i64 %xor, i64* %value, align 8
  br label %sw.epilog

sw.bb.421:                                        ; preds = %if.end.140, %if.end.140, %if.end.140, %if.end.140, %if.end.140, %if.end.140, %if.end.140, %if.end.140, %if.end.140, %if.end.140
  store i32 0, i32* %flags422, align 4
  store i64 3, i64* %numlen, align 8
  %289 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse423 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %289, i32 0, i32 5
  %290 = load i8*, i8** %parse423, align 8
  %incdec.ptr424 = getelementptr inbounds i8, i8* %290, i32 -1
  store i8* %incdec.ptr424, i8** %parse423, align 8
  %call425 = call i64 @Perl_grok_oct(i8* %incdec.ptr424, i64* %numlen, i32* %flags422, double* null)
  store i64 %call425, i64* %value, align 8
  %291 = load i64, i64* %numlen, align 8
  %292 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse426 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %292, i32 0, i32 5
  %293 = load i8*, i8** %parse426, align 8
  %add.ptr427 = getelementptr inbounds i8, i8* %293, i64 %291
  store i8* %add.ptr427, i8** %parse426, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.140
  %294 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit428 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %294, i32 0, i32 8
  %295 = load %struct.regnode*, %struct.regnode** %emit428, align 8
  %cmp429 = icmp eq %struct.regnode* %295, @PL_regdummy
  br i1 %cmp429, label %if.end.479, label %land.lhs.true.431

land.lhs.true.431:                                ; preds = %sw.default
  %296 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %296, i32 0, i32 14
  %297 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp432 = icmp ne %struct.sv* %297, null
  br i1 %cmp432, label %land.lhs.true.434, label %lor.lhs.false.447

land.lhs.true.434:                                ; preds = %land.lhs.true.431
  %298 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings435 = getelementptr inbounds %struct.cop, %struct.cop* %298, i32 0, i32 14
  %299 = load %struct.sv*, %struct.sv** %cop_warnings435, align 8
  %cmp436 = icmp ne %struct.sv* %299, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp436, label %land.lhs.true.438, label %lor.lhs.false.447

land.lhs.true.438:                                ; preds = %land.lhs.true.434
  %300 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings439 = getelementptr inbounds %struct.cop, %struct.cop* %300, i32 0, i32 14
  %301 = load %struct.sv*, %struct.sv** %cop_warnings439, align 8
  %cmp440 = icmp eq %struct.sv* %301, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp440, label %land.lhs.true.455, label %lor.lhs.false.442

lor.lhs.false.442:                                ; preds = %land.lhs.true.438
  %302 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings443 = getelementptr inbounds %struct.cop, %struct.cop* %302, i32 0, i32 14
  %303 = load %struct.sv*, %struct.sv** %cop_warnings443, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %303, i32 0, i32 0
  %304 = load i8*, i8** %sv_any, align 8
  %305 = bitcast i8* %304 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %305, i32 0, i32 0
  %306 = load i8*, i8** %xpv_pv, align 8
  %arrayidx = getelementptr inbounds i8, i8* %306, i64 5
  %307 = load i8, i8* %arrayidx, align 1
  %conv444 = sext i8 %307 to i32
  %and445 = and i32 %conv444, 1
  %tobool446 = icmp ne i32 %and445, 0
  br i1 %tobool446, label %land.lhs.true.455, label %lor.lhs.false.447

lor.lhs.false.447:                                ; preds = %lor.lhs.false.442, %land.lhs.true.434, %land.lhs.true.431
  %308 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings448 = getelementptr inbounds %struct.cop, %struct.cop* %308, i32 0, i32 14
  %309 = load %struct.sv*, %struct.sv** %cop_warnings448, align 8
  %cmp449 = icmp eq %struct.sv* %309, null
  br i1 %cmp449, label %land.lhs.true.451, label %if.end.479

land.lhs.true.451:                                ; preds = %lor.lhs.false.447
  %310 = load i8, i8* @PL_dowarn, align 1
  %conv452 = zext i8 %310 to i32
  %and453 = and i32 %conv452, 1
  %tobool454 = icmp ne i32 %and453, 0
  br i1 %tobool454, label %land.lhs.true.455, label %if.end.479

land.lhs.true.455:                                ; preds = %land.lhs.true.451, %lor.lhs.false.442, %land.lhs.true.438
  %311 = load i64, i64* %value, align 8
  %cmp456 = icmp uge i64 %311, 65
  br i1 %cmp456, label %land.lhs.true.458, label %lor.lhs.false.461

land.lhs.true.458:                                ; preds = %land.lhs.true.455
  %312 = load i64, i64* %value, align 8
  %cmp459 = icmp ule i64 %312, 90
  br i1 %cmp459, label %if.then.467, label %lor.lhs.false.461

lor.lhs.false.461:                                ; preds = %land.lhs.true.458, %land.lhs.true.455
  %313 = load i64, i64* %value, align 8
  %cmp462 = icmp uge i64 %313, 97
  br i1 %cmp462, label %land.lhs.true.464, label %if.end.479

land.lhs.true.464:                                ; preds = %lor.lhs.false.461
  %314 = load i64, i64* %value, align 8
  %cmp465 = icmp ule i64 %314, 122
  br i1 %cmp465, label %if.then.467, label %if.end.479

if.then.467:                                      ; preds = %land.lhs.true.464, %land.lhs.true.458
  %315 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse469 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %315, i32 0, i32 5
  %316 = load i8*, i8** %parse469, align 8
  %317 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp470 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %317, i32 0, i32 1
  %318 = load i8*, i8** %precomp470, align 8
  %sub.ptr.lhs.cast471 = ptrtoint i8* %316 to i64
  %sub.ptr.rhs.cast472 = ptrtoint i8* %318 to i64
  %sub.ptr.sub473 = sub i64 %sub.ptr.lhs.cast471, %sub.ptr.rhs.cast472
  store i64 %sub.ptr.sub473, i64* %offset468, align 8
  %319 = load i64, i64* %value, align 8
  %conv474 = trunc i64 %319 to i32
  %320 = load i64, i64* %offset468, align 8
  %conv475 = trunc i64 %320 to i32
  %321 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp476 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %321, i32 0, i32 1
  %322 = load i8*, i8** %precomp476, align 8
  %323 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp477 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %323, i32 0, i32 1
  %324 = load i8*, i8** %precomp477, align 8
  %325 = load i64, i64* %offset468, align 8
  %add.ptr478 = getelementptr inbounds i8, i8* %324, i64 %325
  call void (i32, i8*, ...) @Perl_warner(i32 20, i8* getelementptr inbounds ([110 x i8], [110 x i8]* @.str.60, i32 0, i32 0), i32 %conv474, i32 %conv475, i8* %322, i8* %add.ptr478)
  br label %if.end.479

if.end.479:                                       ; preds = %if.then.467, %land.lhs.true.464, %lor.lhs.false.461, %land.lhs.true.451, %lor.lhs.false.447, %sw.default
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end.479, %sw.bb.421, %cond.end.419, %if.end.406, %sw.bb.362, %sw.bb.361, %sw.bb.360, %sw.bb.359, %sw.bb.358, %sw.bb.357, %sw.bb.356, %if.end.349, %sw.bb.146, %sw.bb.145, %sw.bb.144, %sw.bb.143, %sw.bb.142, %sw.bb
  br label %if.end.480

if.end.480:                                       ; preds = %sw.epilog, %if.else.118
  br label %if.end.481

if.end.481:                                       ; preds = %if.end.480, %if.then.114
  %326 = load i64, i64* %namedclass, align 8
  %cmp482 = icmp sgt i64 %326, -1
  br i1 %cmp482, label %if.then.484, label %if.end.1959

if.then.484:                                      ; preds = %if.end.481
  %327 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit485 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %327, i32 0, i32 8
  %328 = load %struct.regnode*, %struct.regnode** %emit485, align 8
  %cmp486 = icmp eq %struct.regnode* %328, @PL_regdummy
  br i1 %cmp486, label %if.end.492, label %land.lhs.true.488

land.lhs.true.488:                                ; preds = %if.then.484
  %329 = load i8, i8* %need_class, align 1
  %tobool489 = icmp ne i8 %329, 0
  br i1 %tobool489, label %if.end.492, label %if.then.490

if.then.490:                                      ; preds = %land.lhs.true.488
  %330 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %331 = bitcast %struct.regnode* %330 to %struct.regnode_charclass_class*
  %classflags = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %331, i32 0, i32 5
  %arraydecay491 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* %arraydecay491, i8 0, i64 4, i32 1, i1 false)
  br label %if.end.492

if.end.492:                                       ; preds = %if.then.490, %land.lhs.true.488, %if.then.484
  store i8 1, i8* %need_class, align 1
  %332 = load i64, i64* %range, align 8
  %tobool493 = icmp ne i64 %332, 0
  br i1 %tobool493, label %if.then.494, label %if.end.568

if.then.494:                                      ; preds = %if.end.492
  %333 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit495 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %333, i32 0, i32 8
  %334 = load %struct.regnode*, %struct.regnode** %emit495, align 8
  %cmp496 = icmp eq %struct.regnode* %334, @PL_regdummy
  br i1 %cmp496, label %if.end.567, label %if.then.498

if.then.498:                                      ; preds = %if.then.494
  %335 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings499 = getelementptr inbounds %struct.cop, %struct.cop* %335, i32 0, i32 14
  %336 = load %struct.sv*, %struct.sv** %cop_warnings499, align 8
  %cmp500 = icmp ne %struct.sv* %336, null
  br i1 %cmp500, label %land.lhs.true.502, label %lor.lhs.false.518

land.lhs.true.502:                                ; preds = %if.then.498
  %337 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings503 = getelementptr inbounds %struct.cop, %struct.cop* %337, i32 0, i32 14
  %338 = load %struct.sv*, %struct.sv** %cop_warnings503, align 8
  %cmp504 = icmp ne %struct.sv* %338, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp504, label %land.lhs.true.506, label %lor.lhs.false.518

land.lhs.true.506:                                ; preds = %land.lhs.true.502
  %339 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings507 = getelementptr inbounds %struct.cop, %struct.cop* %339, i32 0, i32 14
  %340 = load %struct.sv*, %struct.sv** %cop_warnings507, align 8
  %cmp508 = icmp eq %struct.sv* %340, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp508, label %if.then.526, label %lor.lhs.false.510

lor.lhs.false.510:                                ; preds = %land.lhs.true.506
  %341 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings511 = getelementptr inbounds %struct.cop, %struct.cop* %341, i32 0, i32 14
  %342 = load %struct.sv*, %struct.sv** %cop_warnings511, align 8
  %sv_any512 = getelementptr inbounds %struct.sv, %struct.sv* %342, i32 0, i32 0
  %343 = load i8*, i8** %sv_any512, align 8
  %344 = bitcast i8* %343 to %struct.xpv*
  %xpv_pv513 = getelementptr inbounds %struct.xpv, %struct.xpv* %344, i32 0, i32 0
  %345 = load i8*, i8** %xpv_pv513, align 8
  %arrayidx514 = getelementptr inbounds i8, i8* %345, i64 5
  %346 = load i8, i8* %arrayidx514, align 1
  %conv515 = sext i8 %346 to i32
  %and516 = and i32 %conv515, 1
  %tobool517 = icmp ne i32 %and516, 0
  br i1 %tobool517, label %if.then.526, label %lor.lhs.false.518

lor.lhs.false.518:                                ; preds = %lor.lhs.false.510, %land.lhs.true.502, %if.then.498
  %347 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings519 = getelementptr inbounds %struct.cop, %struct.cop* %347, i32 0, i32 14
  %348 = load %struct.sv*, %struct.sv** %cop_warnings519, align 8
  %cmp520 = icmp eq %struct.sv* %348, null
  br i1 %cmp520, label %land.lhs.true.522, label %if.end.545

land.lhs.true.522:                                ; preds = %lor.lhs.false.518
  %349 = load i8, i8* @PL_dowarn, align 1
  %conv523 = zext i8 %349 to i32
  %and524 = and i32 %conv523, 1
  %tobool525 = icmp ne i32 %and524, 0
  br i1 %tobool525, label %if.then.526, label %if.end.545

if.then.526:                                      ; preds = %land.lhs.true.522, %lor.lhs.false.510, %land.lhs.true.506
  %350 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse528 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %350, i32 0, i32 5
  %351 = load i8*, i8** %parse528, align 8
  %352 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp529 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %352, i32 0, i32 1
  %353 = load i8*, i8** %precomp529, align 8
  %sub.ptr.lhs.cast530 = ptrtoint i8* %351 to i64
  %sub.ptr.rhs.cast531 = ptrtoint i8* %353 to i64
  %sub.ptr.sub532 = sub i64 %sub.ptr.lhs.cast530, %sub.ptr.rhs.cast531
  store i64 %sub.ptr.sub532, i64* %offset527, align 8
  %354 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse533 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %354, i32 0, i32 5
  %355 = load i8*, i8** %parse533, align 8
  %356 = load i8*, i8** %rangebegin, align 8
  %sub.ptr.lhs.cast534 = ptrtoint i8* %355 to i64
  %sub.ptr.rhs.cast535 = ptrtoint i8* %356 to i64
  %sub.ptr.sub536 = sub i64 %sub.ptr.lhs.cast534, %sub.ptr.rhs.cast535
  %357 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse537 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %357, i32 0, i32 5
  %358 = load i8*, i8** %parse537, align 8
  %359 = load i8*, i8** %rangebegin, align 8
  %sub.ptr.lhs.cast538 = ptrtoint i8* %358 to i64
  %sub.ptr.rhs.cast539 = ptrtoint i8* %359 to i64
  %sub.ptr.sub540 = sub i64 %sub.ptr.lhs.cast538, %sub.ptr.rhs.cast539
  %360 = load i8*, i8** %rangebegin, align 8
  %361 = load i64, i64* %offset527, align 8
  %conv541 = trunc i64 %361 to i32
  %362 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp542 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %362, i32 0, i32 1
  %363 = load i8*, i8** %precomp542, align 8
  %364 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp543 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %364, i32 0, i32 1
  %365 = load i8*, i8** %precomp543, align 8
  %366 = load i64, i64* %offset527, align 8
  %add.ptr544 = getelementptr inbounds i8, i8* %365, i64 %366
  call void (i32, i8*, ...) @Perl_warner(i32 20, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.61, i32 0, i32 0), i64 %sub.ptr.sub536, i64 %sub.ptr.sub540, i8* %360, i32 %conv541, i8* %363, i8* %add.ptr544)
  br label %if.end.545

if.end.545:                                       ; preds = %if.then.526, %land.lhs.true.522, %lor.lhs.false.518
  %367 = load i64, i64* %prevvalue, align 8
  %cmp546 = icmp slt i64 %367, 256
  br i1 %cmp546, label %if.then.548, label %if.else.561

if.then.548:                                      ; preds = %if.end.545
  %368 = load i64, i64* %prevvalue, align 8
  %and549 = and i64 %368, 7
  %sh_prom = trunc i64 %and549 to i32
  %shl = shl i32 1, %sh_prom
  %369 = load i64, i64* %prevvalue, align 8
  %shr = ashr i64 %369, 3
  %and550 = and i64 %shr, 31
  %370 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %371 = bitcast %struct.regnode* %370 to %struct.regnode_charclass*
  %bitmap551 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %371, i32 0, i32 4
  %arrayidx552 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap551, i32 0, i64 %and550
  %372 = load i8, i8* %arrayidx552, align 1
  %conv553 = sext i8 %372 to i32
  %or554 = or i32 %conv553, %shl
  %conv555 = trunc i32 %or554 to i8
  store i8 %conv555, i8* %arrayidx552, align 1
  %373 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %374 = bitcast %struct.regnode* %373 to %struct.regnode_charclass*
  %bitmap556 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %374, i32 0, i32 4
  %arrayidx557 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap556, i32 0, i64 5
  %375 = load i8, i8* %arrayidx557, align 1
  %conv558 = sext i8 %375 to i32
  %or559 = or i32 %conv558, 32
  %conv560 = trunc i32 %or559 to i8
  store i8 %conv560, i8* %arrayidx557, align 1
  br label %if.end.566

if.else.561:                                      ; preds = %if.end.545
  %376 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags562 = getelementptr inbounds %struct.regnode, %struct.regnode* %376, i32 0, i32 0
  %377 = load i8, i8* %flags562, align 1
  %conv563 = zext i8 %377 to i32
  %or564 = or i32 %conv563, 32
  %conv565 = trunc i32 %or564 to i8
  store i8 %conv565, i8* %flags562, align 1
  %378 = load %struct.sv*, %struct.sv** %listsv, align 8
  %379 = load i64, i64* %prevvalue, align 8
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %378, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.62, i32 0, i32 0), i64 %379, i64 45)
  br label %if.end.566

if.end.566:                                       ; preds = %if.else.561, %if.then.548
  br label %if.end.567

if.end.567:                                       ; preds = %if.end.566, %if.then.494
  store i64 0, i64* %range, align 8
  br label %if.end.568

if.end.568:                                       ; preds = %if.end.567, %if.end.492
  %380 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit569 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %380, i32 0, i32 8
  %381 = load %struct.regnode*, %struct.regnode** %emit569, align 8
  %cmp570 = icmp eq %struct.regnode* %381, @PL_regdummy
  br i1 %cmp570, label %if.end.1958, label %if.then.572

if.then.572:                                      ; preds = %if.end.568
  store i8* null, i8** %what, align 8
  store i8 0, i8* %yesno, align 1
  %382 = load i64, i64* %namedclass, align 8
  %cmp573 = icmp sgt i64 %382, -1
  br i1 %cmp573, label %if.then.575, label %if.end.576

if.then.575:                                      ; preds = %if.then.572
  store i8 0, i8* %optimize_invert, align 1
  br label %if.end.576

if.end.576:                                       ; preds = %if.then.575, %if.then.572
  %383 = load i64, i64* %namedclass, align 8
  %conv577 = trunc i64 %383 to i32
  switch i32 %conv577, label %sw.default.1926 [
    i32 0, label %sw.bb.578
    i32 1, label %sw.bb.626
    i32 6, label %sw.bb.678
    i32 7, label %sw.bb.727
    i32 8, label %sw.bb.776
    i32 9, label %sw.bb.819
    i32 10, label %sw.bb.862
    i32 11, label %sw.bb.892
    i32 28, label %sw.bb.922
    i32 29, label %sw.bb.959
    i32 12, label %sw.bb.996
    i32 13, label %sw.bb.1033
    i32 4, label %sw.bb.1070
    i32 5, label %sw.bb.1100
    i32 14, label %sw.bb.1147
    i32 15, label %sw.bb.1223
    i32 16, label %sw.bb.1299
    i32 17, label %sw.bb.1336
    i32 18, label %sw.bb.1373
    i32 19, label %sw.bb.1413
    i32 26, label %sw.bb.1453
    i32 27, label %sw.bb.1502
    i32 20, label %sw.bb.1551
    i32 21, label %sw.bb.1606
    i32 2, label %sw.bb.1661
    i32 3, label %sw.bb.1707
    i32 22, label %sw.bb.1753
    i32 23, label %sw.bb.1790
    i32 24, label %sw.bb.1827
    i32 25, label %sw.bb.1876
    i32 32, label %sw.bb.1925
  ]

sw.bb.578:                                        ; preds = %if.end.576
  %384 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags579 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %384, i32 0, i32 0
  %385 = load i32, i32* %flags579, align 4
  %and580 = and i32 %385, 2048
  %cmp581 = icmp ne i32 %and580, 0
  br i1 %cmp581, label %if.then.583, label %if.else.589

if.then.583:                                      ; preds = %sw.bb.578
  %386 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %387 = bitcast %struct.regnode* %386 to %struct.regnode_charclass_class*
  %classflags584 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %387, i32 0, i32 5
  %arrayidx585 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags584, i32 0, i64 0
  %388 = load i8, i8* %arrayidx585, align 1
  %conv586 = sext i8 %388 to i32
  %or587 = or i32 %conv586, 1
  %conv588 = trunc i32 %or587 to i8
  store i8 %conv588, i8* %arrayidx585, align 1
  br label %if.end.625

if.else.589:                                      ; preds = %sw.bb.578
  store i64 0, i64* %value, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else.589
  %389 = load i64, i64* %value, align 8
  %cmp590 = icmp ult i64 %389, 256
  br i1 %cmp590, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %390 = load i64, i64* %value, align 8
  %cmp592 = icmp uge i64 %390, 65
  br i1 %cmp592, label %land.lhs.true.594, label %lor.lhs.false.597

land.lhs.true.594:                                ; preds = %for.body
  %391 = load i64, i64* %value, align 8
  %cmp595 = icmp ule i64 %391, 90
  br i1 %cmp595, label %if.then.612, label %lor.lhs.false.597

lor.lhs.false.597:                                ; preds = %land.lhs.true.594, %for.body
  %392 = load i64, i64* %value, align 8
  %cmp598 = icmp uge i64 %392, 97
  br i1 %cmp598, label %land.lhs.true.600, label %lor.lhs.false.603

land.lhs.true.600:                                ; preds = %lor.lhs.false.597
  %393 = load i64, i64* %value, align 8
  %cmp601 = icmp ule i64 %393, 122
  br i1 %cmp601, label %if.then.612, label %lor.lhs.false.603

lor.lhs.false.603:                                ; preds = %land.lhs.true.600, %lor.lhs.false.597
  %394 = load i64, i64* %value, align 8
  %cmp604 = icmp uge i64 %394, 48
  br i1 %cmp604, label %land.lhs.true.606, label %lor.lhs.false.609

land.lhs.true.606:                                ; preds = %lor.lhs.false.603
  %395 = load i64, i64* %value, align 8
  %cmp607 = icmp ule i64 %395, 57
  br i1 %cmp607, label %if.then.612, label %lor.lhs.false.609

lor.lhs.false.609:                                ; preds = %land.lhs.true.606, %lor.lhs.false.603
  %396 = load i64, i64* %value, align 8
  %cmp610 = icmp eq i64 %396, 95
  br i1 %cmp610, label %if.then.612, label %if.end.623

if.then.612:                                      ; preds = %lor.lhs.false.609, %land.lhs.true.606, %land.lhs.true.600, %land.lhs.true.594
  %397 = load i64, i64* %value, align 8
  %and613 = and i64 %397, 7
  %sh_prom614 = trunc i64 %and613 to i32
  %shl615 = shl i32 1, %sh_prom614
  %398 = load i64, i64* %value, align 8
  %shr616 = lshr i64 %398, 3
  %and617 = and i64 %shr616, 31
  %399 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %400 = bitcast %struct.regnode* %399 to %struct.regnode_charclass*
  %bitmap618 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %400, i32 0, i32 4
  %arrayidx619 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap618, i32 0, i64 %and617
  %401 = load i8, i8* %arrayidx619, align 1
  %conv620 = sext i8 %401 to i32
  %or621 = or i32 %conv620, %shl615
  %conv622 = trunc i32 %or621 to i8
  store i8 %conv622, i8* %arrayidx619, align 1
  br label %if.end.623

if.end.623:                                       ; preds = %if.then.612, %lor.lhs.false.609
  br label %for.inc

for.inc:                                          ; preds = %if.end.623
  %402 = load i64, i64* %value, align 8
  %inc624 = add i64 %402, 1
  store i64 %inc624, i64* %value, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.625

if.end.625:                                       ; preds = %for.end, %if.then.583
  store i8 43, i8* %yesno, align 1
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.63, i32 0, i32 0), i8** %what, align 8
  br label %sw.epilog.1943

sw.bb.626:                                        ; preds = %if.end.576
  %403 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags627 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %403, i32 0, i32 0
  %404 = load i32, i32* %flags627, align 4
  %and628 = and i32 %404, 2048
  %cmp629 = icmp ne i32 %and628, 0
  br i1 %cmp629, label %if.then.631, label %if.else.637

if.then.631:                                      ; preds = %sw.bb.626
  %405 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %406 = bitcast %struct.regnode* %405 to %struct.regnode_charclass_class*
  %classflags632 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %406, i32 0, i32 5
  %arrayidx633 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags632, i32 0, i64 0
  %407 = load i8, i8* %arrayidx633, align 1
  %conv634 = sext i8 %407 to i32
  %or635 = or i32 %conv634, 2
  %conv636 = trunc i32 %or635 to i8
  store i8 %conv636, i8* %arrayidx633, align 1
  br label %if.end.677

if.else.637:                                      ; preds = %sw.bb.626
  store i64 0, i64* %value, align 8
  br label %for.cond.638

for.cond.638:                                     ; preds = %for.inc.674, %if.else.637
  %408 = load i64, i64* %value, align 8
  %cmp639 = icmp ult i64 %408, 256
  br i1 %cmp639, label %for.body.641, label %for.end.676

for.body.641:                                     ; preds = %for.cond.638
  %409 = load i64, i64* %value, align 8
  %cmp642 = icmp uge i64 %409, 65
  br i1 %cmp642, label %land.lhs.true.644, label %lor.lhs.false.647

land.lhs.true.644:                                ; preds = %for.body.641
  %410 = load i64, i64* %value, align 8
  %cmp645 = icmp ule i64 %410, 90
  br i1 %cmp645, label %if.end.673, label %lor.lhs.false.647

lor.lhs.false.647:                                ; preds = %land.lhs.true.644, %for.body.641
  %411 = load i64, i64* %value, align 8
  %cmp648 = icmp uge i64 %411, 97
  br i1 %cmp648, label %land.lhs.true.650, label %lor.lhs.false.653

land.lhs.true.650:                                ; preds = %lor.lhs.false.647
  %412 = load i64, i64* %value, align 8
  %cmp651 = icmp ule i64 %412, 122
  br i1 %cmp651, label %if.end.673, label %lor.lhs.false.653

lor.lhs.false.653:                                ; preds = %land.lhs.true.650, %lor.lhs.false.647
  %413 = load i64, i64* %value, align 8
  %cmp654 = icmp uge i64 %413, 48
  br i1 %cmp654, label %land.lhs.true.656, label %lor.lhs.false.659

land.lhs.true.656:                                ; preds = %lor.lhs.false.653
  %414 = load i64, i64* %value, align 8
  %cmp657 = icmp ule i64 %414, 57
  br i1 %cmp657, label %if.end.673, label %lor.lhs.false.659

lor.lhs.false.659:                                ; preds = %land.lhs.true.656, %lor.lhs.false.653
  %415 = load i64, i64* %value, align 8
  %cmp660 = icmp eq i64 %415, 95
  br i1 %cmp660, label %if.end.673, label %if.then.662

if.then.662:                                      ; preds = %lor.lhs.false.659
  %416 = load i64, i64* %value, align 8
  %and663 = and i64 %416, 7
  %sh_prom664 = trunc i64 %and663 to i32
  %shl665 = shl i32 1, %sh_prom664
  %417 = load i64, i64* %value, align 8
  %shr666 = lshr i64 %417, 3
  %and667 = and i64 %shr666, 31
  %418 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %419 = bitcast %struct.regnode* %418 to %struct.regnode_charclass*
  %bitmap668 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %419, i32 0, i32 4
  %arrayidx669 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap668, i32 0, i64 %and667
  %420 = load i8, i8* %arrayidx669, align 1
  %conv670 = sext i8 %420 to i32
  %or671 = or i32 %conv670, %shl665
  %conv672 = trunc i32 %or671 to i8
  store i8 %conv672, i8* %arrayidx669, align 1
  br label %if.end.673

if.end.673:                                       ; preds = %if.then.662, %lor.lhs.false.659, %land.lhs.true.656, %land.lhs.true.650, %land.lhs.true.644
  br label %for.inc.674

for.inc.674:                                      ; preds = %if.end.673
  %421 = load i64, i64* %value, align 8
  %inc675 = add i64 %421, 1
  store i64 %inc675, i64* %value, align 8
  br label %for.cond.638

for.end.676:                                      ; preds = %for.cond.638
  br label %if.end.677

if.end.677:                                       ; preds = %for.end.676, %if.then.631
  store i8 33, i8* %yesno, align 1
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.63, i32 0, i32 0), i8** %what, align 8
  br label %sw.epilog.1943

sw.bb.678:                                        ; preds = %if.end.576
  %422 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags679 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %422, i32 0, i32 0
  %423 = load i32, i32* %flags679, align 4
  %and680 = and i32 %423, 2048
  %cmp681 = icmp ne i32 %and680, 0
  br i1 %cmp681, label %if.then.683, label %if.else.689

if.then.683:                                      ; preds = %sw.bb.678
  %424 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %425 = bitcast %struct.regnode* %424 to %struct.regnode_charclass_class*
  %classflags684 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %425, i32 0, i32 5
  %arrayidx685 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags684, i32 0, i64 0
  %426 = load i8, i8* %arrayidx685, align 1
  %conv686 = sext i8 %426 to i32
  %or687 = or i32 %conv686, 64
  %conv688 = trunc i32 %or687 to i8
  store i8 %conv688, i8* %arrayidx685, align 1
  br label %if.end.726

if.else.689:                                      ; preds = %sw.bb.678
  store i64 0, i64* %value, align 8
  br label %for.cond.690

for.cond.690:                                     ; preds = %for.inc.723, %if.else.689
  %427 = load i64, i64* %value, align 8
  %cmp691 = icmp ult i64 %427, 256
  br i1 %cmp691, label %for.body.693, label %for.end.725

for.body.693:                                     ; preds = %for.cond.690
  %428 = load i64, i64* %value, align 8
  %cmp694 = icmp uge i64 %428, 65
  br i1 %cmp694, label %land.lhs.true.696, label %lor.lhs.false.699

land.lhs.true.696:                                ; preds = %for.body.693
  %429 = load i64, i64* %value, align 8
  %cmp697 = icmp ule i64 %429, 90
  br i1 %cmp697, label %if.then.711, label %lor.lhs.false.699

lor.lhs.false.699:                                ; preds = %land.lhs.true.696, %for.body.693
  %430 = load i64, i64* %value, align 8
  %cmp700 = icmp uge i64 %430, 97
  br i1 %cmp700, label %land.lhs.true.702, label %lor.lhs.false.705

land.lhs.true.702:                                ; preds = %lor.lhs.false.699
  %431 = load i64, i64* %value, align 8
  %cmp703 = icmp ule i64 %431, 122
  br i1 %cmp703, label %if.then.711, label %lor.lhs.false.705

lor.lhs.false.705:                                ; preds = %land.lhs.true.702, %lor.lhs.false.699
  %432 = load i64, i64* %value, align 8
  %cmp706 = icmp uge i64 %432, 48
  br i1 %cmp706, label %land.lhs.true.708, label %if.end.722

land.lhs.true.708:                                ; preds = %lor.lhs.false.705
  %433 = load i64, i64* %value, align 8
  %cmp709 = icmp ule i64 %433, 57
  br i1 %cmp709, label %if.then.711, label %if.end.722

if.then.711:                                      ; preds = %land.lhs.true.708, %land.lhs.true.702, %land.lhs.true.696
  %434 = load i64, i64* %value, align 8
  %and712 = and i64 %434, 7
  %sh_prom713 = trunc i64 %and712 to i32
  %shl714 = shl i32 1, %sh_prom713
  %435 = load i64, i64* %value, align 8
  %shr715 = lshr i64 %435, 3
  %and716 = and i64 %shr715, 31
  %436 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %437 = bitcast %struct.regnode* %436 to %struct.regnode_charclass*
  %bitmap717 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %437, i32 0, i32 4
  %arrayidx718 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap717, i32 0, i64 %and716
  %438 = load i8, i8* %arrayidx718, align 1
  %conv719 = sext i8 %438 to i32
  %or720 = or i32 %conv719, %shl714
  %conv721 = trunc i32 %or720 to i8
  store i8 %conv721, i8* %arrayidx718, align 1
  br label %if.end.722

if.end.722:                                       ; preds = %if.then.711, %land.lhs.true.708, %lor.lhs.false.705
  br label %for.inc.723

for.inc.723:                                      ; preds = %if.end.722
  %439 = load i64, i64* %value, align 8
  %inc724 = add i64 %439, 1
  store i64 %inc724, i64* %value, align 8
  br label %for.cond.690

for.end.725:                                      ; preds = %for.cond.690
  br label %if.end.726

if.end.726:                                       ; preds = %for.end.725, %if.then.683
  store i8 43, i8* %yesno, align 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.64, i32 0, i32 0), i8** %what, align 8
  br label %sw.epilog.1943

sw.bb.727:                                        ; preds = %if.end.576
  %440 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags728 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %440, i32 0, i32 0
  %441 = load i32, i32* %flags728, align 4
  %and729 = and i32 %441, 2048
  %cmp730 = icmp ne i32 %and729, 0
  br i1 %cmp730, label %if.then.732, label %if.else.738

if.then.732:                                      ; preds = %sw.bb.727
  %442 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %443 = bitcast %struct.regnode* %442 to %struct.regnode_charclass_class*
  %classflags733 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %443, i32 0, i32 5
  %arrayidx734 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags733, i32 0, i64 0
  %444 = load i8, i8* %arrayidx734, align 1
  %conv735 = sext i8 %444 to i32
  %or736 = or i32 %conv735, 128
  %conv737 = trunc i32 %or736 to i8
  store i8 %conv737, i8* %arrayidx734, align 1
  br label %if.end.775

if.else.738:                                      ; preds = %sw.bb.727
  store i64 0, i64* %value, align 8
  br label %for.cond.739

for.cond.739:                                     ; preds = %for.inc.772, %if.else.738
  %445 = load i64, i64* %value, align 8
  %cmp740 = icmp ult i64 %445, 256
  br i1 %cmp740, label %for.body.742, label %for.end.774

for.body.742:                                     ; preds = %for.cond.739
  %446 = load i64, i64* %value, align 8
  %cmp743 = icmp uge i64 %446, 65
  br i1 %cmp743, label %land.lhs.true.745, label %lor.lhs.false.748

land.lhs.true.745:                                ; preds = %for.body.742
  %447 = load i64, i64* %value, align 8
  %cmp746 = icmp ule i64 %447, 90
  br i1 %cmp746, label %if.end.771, label %lor.lhs.false.748

lor.lhs.false.748:                                ; preds = %land.lhs.true.745, %for.body.742
  %448 = load i64, i64* %value, align 8
  %cmp749 = icmp uge i64 %448, 97
  br i1 %cmp749, label %land.lhs.true.751, label %lor.lhs.false.754

land.lhs.true.751:                                ; preds = %lor.lhs.false.748
  %449 = load i64, i64* %value, align 8
  %cmp752 = icmp ule i64 %449, 122
  br i1 %cmp752, label %if.end.771, label %lor.lhs.false.754

lor.lhs.false.754:                                ; preds = %land.lhs.true.751, %lor.lhs.false.748
  %450 = load i64, i64* %value, align 8
  %cmp755 = icmp uge i64 %450, 48
  br i1 %cmp755, label %land.lhs.true.757, label %if.then.760

land.lhs.true.757:                                ; preds = %lor.lhs.false.754
  %451 = load i64, i64* %value, align 8
  %cmp758 = icmp ule i64 %451, 57
  br i1 %cmp758, label %if.end.771, label %if.then.760

if.then.760:                                      ; preds = %land.lhs.true.757, %lor.lhs.false.754
  %452 = load i64, i64* %value, align 8
  %and761 = and i64 %452, 7
  %sh_prom762 = trunc i64 %and761 to i32
  %shl763 = shl i32 1, %sh_prom762
  %453 = load i64, i64* %value, align 8
  %shr764 = lshr i64 %453, 3
  %and765 = and i64 %shr764, 31
  %454 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %455 = bitcast %struct.regnode* %454 to %struct.regnode_charclass*
  %bitmap766 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %455, i32 0, i32 4
  %arrayidx767 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap766, i32 0, i64 %and765
  %456 = load i8, i8* %arrayidx767, align 1
  %conv768 = sext i8 %456 to i32
  %or769 = or i32 %conv768, %shl763
  %conv770 = trunc i32 %or769 to i8
  store i8 %conv770, i8* %arrayidx767, align 1
  br label %if.end.771

if.end.771:                                       ; preds = %if.then.760, %land.lhs.true.757, %land.lhs.true.751, %land.lhs.true.745
  br label %for.inc.772

for.inc.772:                                      ; preds = %if.end.771
  %457 = load i64, i64* %value, align 8
  %inc773 = add i64 %457, 1
  store i64 %inc773, i64* %value, align 8
  br label %for.cond.739

for.end.774:                                      ; preds = %for.cond.739
  br label %if.end.775

if.end.775:                                       ; preds = %for.end.774, %if.then.732
  store i8 33, i8* %yesno, align 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.64, i32 0, i32 0), i8** %what, align 8
  br label %sw.epilog.1943

sw.bb.776:                                        ; preds = %if.end.576
  %458 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags777 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %458, i32 0, i32 0
  %459 = load i32, i32* %flags777, align 4
  %and778 = and i32 %459, 2048
  %cmp779 = icmp ne i32 %and778, 0
  br i1 %cmp779, label %if.then.781, label %if.else.787

if.then.781:                                      ; preds = %sw.bb.776
  %460 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %461 = bitcast %struct.regnode* %460 to %struct.regnode_charclass_class*
  %classflags782 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %461, i32 0, i32 5
  %arrayidx783 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags782, i32 0, i64 1
  %462 = load i8, i8* %arrayidx783, align 1
  %conv784 = sext i8 %462 to i32
  %or785 = or i32 %conv784, 1
  %conv786 = trunc i32 %or785 to i8
  store i8 %conv786, i8* %arrayidx783, align 1
  br label %if.end.818

if.else.787:                                      ; preds = %sw.bb.776
  store i64 0, i64* %value, align 8
  br label %for.cond.788

for.cond.788:                                     ; preds = %for.inc.815, %if.else.787
  %463 = load i64, i64* %value, align 8
  %cmp789 = icmp ult i64 %463, 256
  br i1 %cmp789, label %for.body.791, label %for.end.817

for.body.791:                                     ; preds = %for.cond.788
  %464 = load i64, i64* %value, align 8
  %cmp792 = icmp uge i64 %464, 65
  br i1 %cmp792, label %land.lhs.true.794, label %lor.lhs.false.797

land.lhs.true.794:                                ; preds = %for.body.791
  %465 = load i64, i64* %value, align 8
  %cmp795 = icmp ule i64 %465, 90
  br i1 %cmp795, label %if.then.803, label %lor.lhs.false.797

lor.lhs.false.797:                                ; preds = %land.lhs.true.794, %for.body.791
  %466 = load i64, i64* %value, align 8
  %cmp798 = icmp uge i64 %466, 97
  br i1 %cmp798, label %land.lhs.true.800, label %if.end.814

land.lhs.true.800:                                ; preds = %lor.lhs.false.797
  %467 = load i64, i64* %value, align 8
  %cmp801 = icmp ule i64 %467, 122
  br i1 %cmp801, label %if.then.803, label %if.end.814

if.then.803:                                      ; preds = %land.lhs.true.800, %land.lhs.true.794
  %468 = load i64, i64* %value, align 8
  %and804 = and i64 %468, 7
  %sh_prom805 = trunc i64 %and804 to i32
  %shl806 = shl i32 1, %sh_prom805
  %469 = load i64, i64* %value, align 8
  %shr807 = lshr i64 %469, 3
  %and808 = and i64 %shr807, 31
  %470 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %471 = bitcast %struct.regnode* %470 to %struct.regnode_charclass*
  %bitmap809 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %471, i32 0, i32 4
  %arrayidx810 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap809, i32 0, i64 %and808
  %472 = load i8, i8* %arrayidx810, align 1
  %conv811 = sext i8 %472 to i32
  %or812 = or i32 %conv811, %shl806
  %conv813 = trunc i32 %or812 to i8
  store i8 %conv813, i8* %arrayidx810, align 1
  br label %if.end.814

if.end.814:                                       ; preds = %if.then.803, %land.lhs.true.800, %lor.lhs.false.797
  br label %for.inc.815

for.inc.815:                                      ; preds = %if.end.814
  %473 = load i64, i64* %value, align 8
  %inc816 = add i64 %473, 1
  store i64 %inc816, i64* %value, align 8
  br label %for.cond.788

for.end.817:                                      ; preds = %for.cond.788
  br label %if.end.818

if.end.818:                                       ; preds = %for.end.817, %if.then.781
  store i8 43, i8* %yesno, align 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.65, i32 0, i32 0), i8** %what, align 8
  br label %sw.epilog.1943

sw.bb.819:                                        ; preds = %if.end.576
  %474 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags820 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %474, i32 0, i32 0
  %475 = load i32, i32* %flags820, align 4
  %and821 = and i32 %475, 2048
  %cmp822 = icmp ne i32 %and821, 0
  br i1 %cmp822, label %if.then.824, label %if.else.830

if.then.824:                                      ; preds = %sw.bb.819
  %476 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %477 = bitcast %struct.regnode* %476 to %struct.regnode_charclass_class*
  %classflags825 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %477, i32 0, i32 5
  %arrayidx826 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags825, i32 0, i64 1
  %478 = load i8, i8* %arrayidx826, align 1
  %conv827 = sext i8 %478 to i32
  %or828 = or i32 %conv827, 2
  %conv829 = trunc i32 %or828 to i8
  store i8 %conv829, i8* %arrayidx826, align 1
  br label %if.end.861

if.else.830:                                      ; preds = %sw.bb.819
  store i64 0, i64* %value, align 8
  br label %for.cond.831

for.cond.831:                                     ; preds = %for.inc.858, %if.else.830
  %479 = load i64, i64* %value, align 8
  %cmp832 = icmp ult i64 %479, 256
  br i1 %cmp832, label %for.body.834, label %for.end.860

for.body.834:                                     ; preds = %for.cond.831
  %480 = load i64, i64* %value, align 8
  %cmp835 = icmp uge i64 %480, 65
  br i1 %cmp835, label %land.lhs.true.837, label %lor.lhs.false.840

land.lhs.true.837:                                ; preds = %for.body.834
  %481 = load i64, i64* %value, align 8
  %cmp838 = icmp ule i64 %481, 90
  br i1 %cmp838, label %if.end.857, label %lor.lhs.false.840

lor.lhs.false.840:                                ; preds = %land.lhs.true.837, %for.body.834
  %482 = load i64, i64* %value, align 8
  %cmp841 = icmp uge i64 %482, 97
  br i1 %cmp841, label %land.lhs.true.843, label %if.then.846

land.lhs.true.843:                                ; preds = %lor.lhs.false.840
  %483 = load i64, i64* %value, align 8
  %cmp844 = icmp ule i64 %483, 122
  br i1 %cmp844, label %if.end.857, label %if.then.846

if.then.846:                                      ; preds = %land.lhs.true.843, %lor.lhs.false.840
  %484 = load i64, i64* %value, align 8
  %and847 = and i64 %484, 7
  %sh_prom848 = trunc i64 %and847 to i32
  %shl849 = shl i32 1, %sh_prom848
  %485 = load i64, i64* %value, align 8
  %shr850 = lshr i64 %485, 3
  %and851 = and i64 %shr850, 31
  %486 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %487 = bitcast %struct.regnode* %486 to %struct.regnode_charclass*
  %bitmap852 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %487, i32 0, i32 4
  %arrayidx853 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap852, i32 0, i64 %and851
  %488 = load i8, i8* %arrayidx853, align 1
  %conv854 = sext i8 %488 to i32
  %or855 = or i32 %conv854, %shl849
  %conv856 = trunc i32 %or855 to i8
  store i8 %conv856, i8* %arrayidx853, align 1
  br label %if.end.857

if.end.857:                                       ; preds = %if.then.846, %land.lhs.true.843, %land.lhs.true.837
  br label %for.inc.858

for.inc.858:                                      ; preds = %if.end.857
  %489 = load i64, i64* %value, align 8
  %inc859 = add i64 %489, 1
  store i64 %inc859, i64* %value, align 8
  br label %for.cond.831

for.end.860:                                      ; preds = %for.cond.831
  br label %if.end.861

if.end.861:                                       ; preds = %for.end.860, %if.then.824
  store i8 33, i8* %yesno, align 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.65, i32 0, i32 0), i8** %what, align 8
  br label %sw.epilog.1943

sw.bb.862:                                        ; preds = %if.end.576
  %490 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags863 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %490, i32 0, i32 0
  %491 = load i32, i32* %flags863, align 4
  %and864 = and i32 %491, 2048
  %cmp865 = icmp ne i32 %and864, 0
  br i1 %cmp865, label %if.then.867, label %if.else.873

if.then.867:                                      ; preds = %sw.bb.862
  %492 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %493 = bitcast %struct.regnode* %492 to %struct.regnode_charclass_class*
  %classflags868 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %493, i32 0, i32 5
  %arrayidx869 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags868, i32 0, i64 1
  %494 = load i8, i8* %arrayidx869, align 1
  %conv870 = sext i8 %494 to i32
  %or871 = or i32 %conv870, 4
  %conv872 = trunc i32 %or871 to i8
  store i8 %conv872, i8* %arrayidx869, align 1
  br label %if.end.891

if.else.873:                                      ; preds = %sw.bb.862
  store i64 0, i64* %value, align 8
  br label %for.cond.874

for.cond.874:                                     ; preds = %for.inc.888, %if.else.873
  %495 = load i64, i64* %value, align 8
  %cmp875 = icmp ult i64 %495, 128
  br i1 %cmp875, label %for.body.877, label %for.end.890

for.body.877:                                     ; preds = %for.cond.874
  %496 = load i64, i64* %value, align 8
  %and878 = and i64 %496, 7
  %sh_prom879 = trunc i64 %and878 to i32
  %shl880 = shl i32 1, %sh_prom879
  %497 = load i64, i64* %value, align 8
  %shr881 = lshr i64 %497, 3
  %and882 = and i64 %shr881, 31
  %498 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %499 = bitcast %struct.regnode* %498 to %struct.regnode_charclass*
  %bitmap883 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %499, i32 0, i32 4
  %arrayidx884 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap883, i32 0, i64 %and882
  %500 = load i8, i8* %arrayidx884, align 1
  %conv885 = sext i8 %500 to i32
  %or886 = or i32 %conv885, %shl880
  %conv887 = trunc i32 %or886 to i8
  store i8 %conv887, i8* %arrayidx884, align 1
  br label %for.inc.888

for.inc.888:                                      ; preds = %for.body.877
  %501 = load i64, i64* %value, align 8
  %inc889 = add i64 %501, 1
  store i64 %inc889, i64* %value, align 8
  br label %for.cond.874

for.end.890:                                      ; preds = %for.cond.874
  br label %if.end.891

if.end.891:                                       ; preds = %for.end.890, %if.then.867
  store i8 43, i8* %yesno, align 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.66, i32 0, i32 0), i8** %what, align 8
  br label %sw.epilog.1943

sw.bb.892:                                        ; preds = %if.end.576
  %502 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags893 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %502, i32 0, i32 0
  %503 = load i32, i32* %flags893, align 4
  %and894 = and i32 %503, 2048
  %cmp895 = icmp ne i32 %and894, 0
  br i1 %cmp895, label %if.then.897, label %if.else.903

if.then.897:                                      ; preds = %sw.bb.892
  %504 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %505 = bitcast %struct.regnode* %504 to %struct.regnode_charclass_class*
  %classflags898 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %505, i32 0, i32 5
  %arrayidx899 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags898, i32 0, i64 1
  %506 = load i8, i8* %arrayidx899, align 1
  %conv900 = sext i8 %506 to i32
  %or901 = or i32 %conv900, 8
  %conv902 = trunc i32 %or901 to i8
  store i8 %conv902, i8* %arrayidx899, align 1
  br label %if.end.921

if.else.903:                                      ; preds = %sw.bb.892
  store i64 128, i64* %value, align 8
  br label %for.cond.904

for.cond.904:                                     ; preds = %for.inc.918, %if.else.903
  %507 = load i64, i64* %value, align 8
  %cmp905 = icmp ult i64 %507, 256
  br i1 %cmp905, label %for.body.907, label %for.end.920

for.body.907:                                     ; preds = %for.cond.904
  %508 = load i64, i64* %value, align 8
  %and908 = and i64 %508, 7
  %sh_prom909 = trunc i64 %and908 to i32
  %shl910 = shl i32 1, %sh_prom909
  %509 = load i64, i64* %value, align 8
  %shr911 = lshr i64 %509, 3
  %and912 = and i64 %shr911, 31
  %510 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %511 = bitcast %struct.regnode* %510 to %struct.regnode_charclass*
  %bitmap913 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %511, i32 0, i32 4
  %arrayidx914 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap913, i32 0, i64 %and912
  %512 = load i8, i8* %arrayidx914, align 1
  %conv915 = sext i8 %512 to i32
  %or916 = or i32 %conv915, %shl910
  %conv917 = trunc i32 %or916 to i8
  store i8 %conv917, i8* %arrayidx914, align 1
  br label %for.inc.918

for.inc.918:                                      ; preds = %for.body.907
  %513 = load i64, i64* %value, align 8
  %inc919 = add i64 %513, 1
  store i64 %inc919, i64* %value, align 8
  br label %for.cond.904

for.end.920:                                      ; preds = %for.cond.904
  br label %if.end.921

if.end.921:                                       ; preds = %for.end.920, %if.then.897
  store i8 33, i8* %yesno, align 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.66, i32 0, i32 0), i8** %what, align 8
  br label %sw.epilog.1943

sw.bb.922:                                        ; preds = %if.end.576
  %514 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags923 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %514, i32 0, i32 0
  %515 = load i32, i32* %flags923, align 4
  %and924 = and i32 %515, 2048
  %cmp925 = icmp ne i32 %and924, 0
  br i1 %cmp925, label %if.then.927, label %if.else.933

if.then.927:                                      ; preds = %sw.bb.922
  %516 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %517 = bitcast %struct.regnode* %516 to %struct.regnode_charclass_class*
  %classflags928 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %517, i32 0, i32 5
  %arrayidx929 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags928, i32 0, i64 3
  %518 = load i8, i8* %arrayidx929, align 1
  %conv930 = sext i8 %518 to i32
  %or931 = or i32 %conv930, 16
  %conv932 = trunc i32 %or931 to i8
  store i8 %conv932, i8* %arrayidx929, align 1
  br label %if.end.958

if.else.933:                                      ; preds = %sw.bb.922
  store i64 0, i64* %value, align 8
  br label %for.cond.934

for.cond.934:                                     ; preds = %for.inc.955, %if.else.933
  %519 = load i64, i64* %value, align 8
  %cmp935 = icmp ult i64 %519, 256
  br i1 %cmp935, label %for.body.937, label %for.end.957

for.body.937:                                     ; preds = %for.cond.934
  %520 = load i64, i64* %value, align 8
  %cmp938 = icmp eq i64 %520, 32
  br i1 %cmp938, label %if.then.943, label %lor.lhs.false.940

lor.lhs.false.940:                                ; preds = %for.body.937
  %521 = load i64, i64* %value, align 8
  %cmp941 = icmp eq i64 %521, 9
  br i1 %cmp941, label %if.then.943, label %if.end.954

if.then.943:                                      ; preds = %lor.lhs.false.940, %for.body.937
  %522 = load i64, i64* %value, align 8
  %and944 = and i64 %522, 7
  %sh_prom945 = trunc i64 %and944 to i32
  %shl946 = shl i32 1, %sh_prom945
  %523 = load i64, i64* %value, align 8
  %shr947 = lshr i64 %523, 3
  %and948 = and i64 %shr947, 31
  %524 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %525 = bitcast %struct.regnode* %524 to %struct.regnode_charclass*
  %bitmap949 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %525, i32 0, i32 4
  %arrayidx950 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap949, i32 0, i64 %and948
  %526 = load i8, i8* %arrayidx950, align 1
  %conv951 = sext i8 %526 to i32
  %or952 = or i32 %conv951, %shl946
  %conv953 = trunc i32 %or952 to i8
  store i8 %conv953, i8* %arrayidx950, align 1
  br label %if.end.954

if.end.954:                                       ; preds = %if.then.943, %lor.lhs.false.940
  br label %for.inc.955

for.inc.955:                                      ; preds = %if.end.954
  %527 = load i64, i64* %value, align 8
  %inc956 = add i64 %527, 1
  store i64 %inc956, i64* %value, align 8
  br label %for.cond.934

for.end.957:                                      ; preds = %for.cond.934
  br label %if.end.958

if.end.958:                                       ; preds = %for.end.957, %if.then.927
  store i8 43, i8* %yesno, align 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.67, i32 0, i32 0), i8** %what, align 8
  br label %sw.epilog.1943

sw.bb.959:                                        ; preds = %if.end.576
  %528 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags960 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %528, i32 0, i32 0
  %529 = load i32, i32* %flags960, align 4
  %and961 = and i32 %529, 2048
  %cmp962 = icmp ne i32 %and961, 0
  br i1 %cmp962, label %if.then.964, label %if.else.970

if.then.964:                                      ; preds = %sw.bb.959
  %530 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %531 = bitcast %struct.regnode* %530 to %struct.regnode_charclass_class*
  %classflags965 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %531, i32 0, i32 5
  %arrayidx966 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags965, i32 0, i64 3
  %532 = load i8, i8* %arrayidx966, align 1
  %conv967 = sext i8 %532 to i32
  %or968 = or i32 %conv967, 32
  %conv969 = trunc i32 %or968 to i8
  store i8 %conv969, i8* %arrayidx966, align 1
  br label %if.end.995

if.else.970:                                      ; preds = %sw.bb.959
  store i64 0, i64* %value, align 8
  br label %for.cond.971

for.cond.971:                                     ; preds = %for.inc.992, %if.else.970
  %533 = load i64, i64* %value, align 8
  %cmp972 = icmp ult i64 %533, 256
  br i1 %cmp972, label %for.body.974, label %for.end.994

for.body.974:                                     ; preds = %for.cond.971
  %534 = load i64, i64* %value, align 8
  %cmp975 = icmp eq i64 %534, 32
  br i1 %cmp975, label %if.end.991, label %lor.lhs.false.977

lor.lhs.false.977:                                ; preds = %for.body.974
  %535 = load i64, i64* %value, align 8
  %cmp978 = icmp eq i64 %535, 9
  br i1 %cmp978, label %if.end.991, label %if.then.980

if.then.980:                                      ; preds = %lor.lhs.false.977
  %536 = load i64, i64* %value, align 8
  %and981 = and i64 %536, 7
  %sh_prom982 = trunc i64 %and981 to i32
  %shl983 = shl i32 1, %sh_prom982
  %537 = load i64, i64* %value, align 8
  %shr984 = lshr i64 %537, 3
  %and985 = and i64 %shr984, 31
  %538 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %539 = bitcast %struct.regnode* %538 to %struct.regnode_charclass*
  %bitmap986 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %539, i32 0, i32 4
  %arrayidx987 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap986, i32 0, i64 %and985
  %540 = load i8, i8* %arrayidx987, align 1
  %conv988 = sext i8 %540 to i32
  %or989 = or i32 %conv988, %shl983
  %conv990 = trunc i32 %or989 to i8
  store i8 %conv990, i8* %arrayidx987, align 1
  br label %if.end.991

if.end.991:                                       ; preds = %if.then.980, %lor.lhs.false.977, %for.body.974
  br label %for.inc.992

for.inc.992:                                      ; preds = %if.end.991
  %541 = load i64, i64* %value, align 8
  %inc993 = add i64 %541, 1
  store i64 %inc993, i64* %value, align 8
  br label %for.cond.971

for.end.994:                                      ; preds = %for.cond.971
  br label %if.end.995

if.end.995:                                       ; preds = %for.end.994, %if.then.964
  store i8 33, i8* %yesno, align 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.67, i32 0, i32 0), i8** %what, align 8
  br label %sw.epilog.1943

sw.bb.996:                                        ; preds = %if.end.576
  %542 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags997 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %542, i32 0, i32 0
  %543 = load i32, i32* %flags997, align 4
  %and998 = and i32 %543, 2048
  %cmp999 = icmp ne i32 %and998, 0
  br i1 %cmp999, label %if.then.1001, label %if.else.1007

if.then.1001:                                     ; preds = %sw.bb.996
  %544 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %545 = bitcast %struct.regnode* %544 to %struct.regnode_charclass_class*
  %classflags1002 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %545, i32 0, i32 5
  %arrayidx1003 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1002, i32 0, i64 1
  %546 = load i8, i8* %arrayidx1003, align 1
  %conv1004 = sext i8 %546 to i32
  %or1005 = or i32 %conv1004, 16
  %conv1006 = trunc i32 %or1005 to i8
  store i8 %conv1006, i8* %arrayidx1003, align 1
  br label %if.end.1032

if.else.1007:                                     ; preds = %sw.bb.996
  store i64 0, i64* %value, align 8
  br label %for.cond.1008

for.cond.1008:                                    ; preds = %for.inc.1029, %if.else.1007
  %547 = load i64, i64* %value, align 8
  %cmp1009 = icmp ult i64 %547, 256
  br i1 %cmp1009, label %for.body.1011, label %for.end.1031

for.body.1011:                                    ; preds = %for.cond.1008
  %548 = load i64, i64* %value, align 8
  %cmp1012 = icmp ult i64 %548, 32
  br i1 %cmp1012, label %if.then.1017, label %lor.lhs.false.1014

lor.lhs.false.1014:                               ; preds = %for.body.1011
  %549 = load i64, i64* %value, align 8
  %cmp1015 = icmp eq i64 %549, 127
  br i1 %cmp1015, label %if.then.1017, label %if.end.1028

if.then.1017:                                     ; preds = %lor.lhs.false.1014, %for.body.1011
  %550 = load i64, i64* %value, align 8
  %and1018 = and i64 %550, 7
  %sh_prom1019 = trunc i64 %and1018 to i32
  %shl1020 = shl i32 1, %sh_prom1019
  %551 = load i64, i64* %value, align 8
  %shr1021 = lshr i64 %551, 3
  %and1022 = and i64 %shr1021, 31
  %552 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %553 = bitcast %struct.regnode* %552 to %struct.regnode_charclass*
  %bitmap1023 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %553, i32 0, i32 4
  %arrayidx1024 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap1023, i32 0, i64 %and1022
  %554 = load i8, i8* %arrayidx1024, align 1
  %conv1025 = sext i8 %554 to i32
  %or1026 = or i32 %conv1025, %shl1020
  %conv1027 = trunc i32 %or1026 to i8
  store i8 %conv1027, i8* %arrayidx1024, align 1
  br label %if.end.1028

if.end.1028:                                      ; preds = %if.then.1017, %lor.lhs.false.1014
  br label %for.inc.1029

for.inc.1029:                                     ; preds = %if.end.1028
  %555 = load i64, i64* %value, align 8
  %inc1030 = add i64 %555, 1
  store i64 %inc1030, i64* %value, align 8
  br label %for.cond.1008

for.end.1031:                                     ; preds = %for.cond.1008
  br label %if.end.1032

if.end.1032:                                      ; preds = %for.end.1031, %if.then.1001
  store i8 43, i8* %yesno, align 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.68, i32 0, i32 0), i8** %what, align 8
  br label %sw.epilog.1943

sw.bb.1033:                                       ; preds = %if.end.576
  %556 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1034 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %556, i32 0, i32 0
  %557 = load i32, i32* %flags1034, align 4
  %and1035 = and i32 %557, 2048
  %cmp1036 = icmp ne i32 %and1035, 0
  br i1 %cmp1036, label %if.then.1038, label %if.else.1044

if.then.1038:                                     ; preds = %sw.bb.1033
  %558 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %559 = bitcast %struct.regnode* %558 to %struct.regnode_charclass_class*
  %classflags1039 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %559, i32 0, i32 5
  %arrayidx1040 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1039, i32 0, i64 1
  %560 = load i8, i8* %arrayidx1040, align 1
  %conv1041 = sext i8 %560 to i32
  %or1042 = or i32 %conv1041, 32
  %conv1043 = trunc i32 %or1042 to i8
  store i8 %conv1043, i8* %arrayidx1040, align 1
  br label %if.end.1069

if.else.1044:                                     ; preds = %sw.bb.1033
  store i64 0, i64* %value, align 8
  br label %for.cond.1045

for.cond.1045:                                    ; preds = %for.inc.1066, %if.else.1044
  %561 = load i64, i64* %value, align 8
  %cmp1046 = icmp ult i64 %561, 256
  br i1 %cmp1046, label %for.body.1048, label %for.end.1068

for.body.1048:                                    ; preds = %for.cond.1045
  %562 = load i64, i64* %value, align 8
  %cmp1049 = icmp ult i64 %562, 32
  br i1 %cmp1049, label %if.end.1065, label %lor.lhs.false.1051

lor.lhs.false.1051:                               ; preds = %for.body.1048
  %563 = load i64, i64* %value, align 8
  %cmp1052 = icmp eq i64 %563, 127
  br i1 %cmp1052, label %if.end.1065, label %if.then.1054

if.then.1054:                                     ; preds = %lor.lhs.false.1051
  %564 = load i64, i64* %value, align 8
  %and1055 = and i64 %564, 7
  %sh_prom1056 = trunc i64 %and1055 to i32
  %shl1057 = shl i32 1, %sh_prom1056
  %565 = load i64, i64* %value, align 8
  %shr1058 = lshr i64 %565, 3
  %and1059 = and i64 %shr1058, 31
  %566 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %567 = bitcast %struct.regnode* %566 to %struct.regnode_charclass*
  %bitmap1060 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %567, i32 0, i32 4
  %arrayidx1061 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap1060, i32 0, i64 %and1059
  %568 = load i8, i8* %arrayidx1061, align 1
  %conv1062 = sext i8 %568 to i32
  %or1063 = or i32 %conv1062, %shl1057
  %conv1064 = trunc i32 %or1063 to i8
  store i8 %conv1064, i8* %arrayidx1061, align 1
  br label %if.end.1065

if.end.1065:                                      ; preds = %if.then.1054, %lor.lhs.false.1051, %for.body.1048
  br label %for.inc.1066

for.inc.1066:                                     ; preds = %if.end.1065
  %569 = load i64, i64* %value, align 8
  %inc1067 = add i64 %569, 1
  store i64 %inc1067, i64* %value, align 8
  br label %for.cond.1045

for.end.1068:                                     ; preds = %for.cond.1045
  br label %if.end.1069

if.end.1069:                                      ; preds = %for.end.1068, %if.then.1038
  store i8 33, i8* %yesno, align 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.68, i32 0, i32 0), i8** %what, align 8
  br label %sw.epilog.1943

sw.bb.1070:                                       ; preds = %if.end.576
  %570 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1071 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %570, i32 0, i32 0
  %571 = load i32, i32* %flags1071, align 4
  %and1072 = and i32 %571, 2048
  %cmp1073 = icmp ne i32 %and1072, 0
  br i1 %cmp1073, label %if.then.1075, label %if.else.1081

if.then.1075:                                     ; preds = %sw.bb.1070
  %572 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %573 = bitcast %struct.regnode* %572 to %struct.regnode_charclass_class*
  %classflags1076 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %573, i32 0, i32 5
  %arrayidx1077 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1076, i32 0, i64 0
  %574 = load i8, i8* %arrayidx1077, align 1
  %conv1078 = sext i8 %574 to i32
  %or1079 = or i32 %conv1078, 16
  %conv1080 = trunc i32 %or1079 to i8
  store i8 %conv1080, i8* %arrayidx1077, align 1
  br label %if.end.1099

if.else.1081:                                     ; preds = %sw.bb.1070
  store i64 48, i64* %value, align 8
  br label %for.cond.1082

for.cond.1082:                                    ; preds = %for.inc.1096, %if.else.1081
  %575 = load i64, i64* %value, align 8
  %cmp1083 = icmp ule i64 %575, 57
  br i1 %cmp1083, label %for.body.1085, label %for.end.1098

for.body.1085:                                    ; preds = %for.cond.1082
  %576 = load i64, i64* %value, align 8
  %and1086 = and i64 %576, 7
  %sh_prom1087 = trunc i64 %and1086 to i32
  %shl1088 = shl i32 1, %sh_prom1087
  %577 = load i64, i64* %value, align 8
  %shr1089 = lshr i64 %577, 3
  %and1090 = and i64 %shr1089, 31
  %578 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %579 = bitcast %struct.regnode* %578 to %struct.regnode_charclass*
  %bitmap1091 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %579, i32 0, i32 4
  %arrayidx1092 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap1091, i32 0, i64 %and1090
  %580 = load i8, i8* %arrayidx1092, align 1
  %conv1093 = sext i8 %580 to i32
  %or1094 = or i32 %conv1093, %shl1088
  %conv1095 = trunc i32 %or1094 to i8
  store i8 %conv1095, i8* %arrayidx1092, align 1
  br label %for.inc.1096

for.inc.1096:                                     ; preds = %for.body.1085
  %581 = load i64, i64* %value, align 8
  %inc1097 = add i64 %581, 1
  store i64 %inc1097, i64* %value, align 8
  br label %for.cond.1082

for.end.1098:                                     ; preds = %for.cond.1082
  br label %if.end.1099

if.end.1099:                                      ; preds = %for.end.1098, %if.then.1075
  store i8 43, i8* %yesno, align 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.69, i32 0, i32 0), i8** %what, align 8
  br label %sw.epilog.1943

sw.bb.1100:                                       ; preds = %if.end.576
  %582 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1101 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %582, i32 0, i32 0
  %583 = load i32, i32* %flags1101, align 4
  %and1102 = and i32 %583, 2048
  %cmp1103 = icmp ne i32 %and1102, 0
  br i1 %cmp1103, label %if.then.1105, label %if.else.1111

if.then.1105:                                     ; preds = %sw.bb.1100
  %584 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %585 = bitcast %struct.regnode* %584 to %struct.regnode_charclass_class*
  %classflags1106 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %585, i32 0, i32 5
  %arrayidx1107 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1106, i32 0, i64 0
  %586 = load i8, i8* %arrayidx1107, align 1
  %conv1108 = sext i8 %586 to i32
  %or1109 = or i32 %conv1108, 32
  %conv1110 = trunc i32 %or1109 to i8
  store i8 %conv1110, i8* %arrayidx1107, align 1
  br label %if.end.1146

if.else.1111:                                     ; preds = %sw.bb.1100
  store i64 0, i64* %value, align 8
  br label %for.cond.1112

for.cond.1112:                                    ; preds = %for.inc.1126, %if.else.1111
  %587 = load i64, i64* %value, align 8
  %cmp1113 = icmp ult i64 %587, 48
  br i1 %cmp1113, label %for.body.1115, label %for.end.1128

for.body.1115:                                    ; preds = %for.cond.1112
  %588 = load i64, i64* %value, align 8
  %and1116 = and i64 %588, 7
  %sh_prom1117 = trunc i64 %and1116 to i32
  %shl1118 = shl i32 1, %sh_prom1117
  %589 = load i64, i64* %value, align 8
  %shr1119 = lshr i64 %589, 3
  %and1120 = and i64 %shr1119, 31
  %590 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %591 = bitcast %struct.regnode* %590 to %struct.regnode_charclass*
  %bitmap1121 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %591, i32 0, i32 4
  %arrayidx1122 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap1121, i32 0, i64 %and1120
  %592 = load i8, i8* %arrayidx1122, align 1
  %conv1123 = sext i8 %592 to i32
  %or1124 = or i32 %conv1123, %shl1118
  %conv1125 = trunc i32 %or1124 to i8
  store i8 %conv1125, i8* %arrayidx1122, align 1
  br label %for.inc.1126

for.inc.1126:                                     ; preds = %for.body.1115
  %593 = load i64, i64* %value, align 8
  %inc1127 = add i64 %593, 1
  store i64 %inc1127, i64* %value, align 8
  br label %for.cond.1112

for.end.1128:                                     ; preds = %for.cond.1112
  store i64 58, i64* %value, align 8
  br label %for.cond.1129

for.cond.1129:                                    ; preds = %for.inc.1143, %for.end.1128
  %594 = load i64, i64* %value, align 8
  %cmp1130 = icmp ult i64 %594, 256
  br i1 %cmp1130, label %for.body.1132, label %for.end.1145

for.body.1132:                                    ; preds = %for.cond.1129
  %595 = load i64, i64* %value, align 8
  %and1133 = and i64 %595, 7
  %sh_prom1134 = trunc i64 %and1133 to i32
  %shl1135 = shl i32 1, %sh_prom1134
  %596 = load i64, i64* %value, align 8
  %shr1136 = lshr i64 %596, 3
  %and1137 = and i64 %shr1136, 31
  %597 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %598 = bitcast %struct.regnode* %597 to %struct.regnode_charclass*
  %bitmap1138 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %598, i32 0, i32 4
  %arrayidx1139 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap1138, i32 0, i64 %and1137
  %599 = load i8, i8* %arrayidx1139, align 1
  %conv1140 = sext i8 %599 to i32
  %or1141 = or i32 %conv1140, %shl1135
  %conv1142 = trunc i32 %or1141 to i8
  store i8 %conv1142, i8* %arrayidx1139, align 1
  br label %for.inc.1143

for.inc.1143:                                     ; preds = %for.body.1132
  %600 = load i64, i64* %value, align 8
  %inc1144 = add i64 %600, 1
  store i64 %inc1144, i64* %value, align 8
  br label %for.cond.1129

for.end.1145:                                     ; preds = %for.cond.1129
  br label %if.end.1146

if.end.1146:                                      ; preds = %for.end.1145, %if.then.1105
  store i8 33, i8* %yesno, align 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.69, i32 0, i32 0), i8** %what, align 8
  br label %sw.epilog.1943

sw.bb.1147:                                       ; preds = %if.end.576
  %601 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1148 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %601, i32 0, i32 0
  %602 = load i32, i32* %flags1148, align 4
  %and1149 = and i32 %602, 2048
  %cmp1150 = icmp ne i32 %and1149, 0
  br i1 %cmp1150, label %if.then.1152, label %if.else.1158

if.then.1152:                                     ; preds = %sw.bb.1147
  %603 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %604 = bitcast %struct.regnode* %603 to %struct.regnode_charclass_class*
  %classflags1153 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %604, i32 0, i32 5
  %arrayidx1154 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1153, i32 0, i64 1
  %605 = load i8, i8* %arrayidx1154, align 1
  %conv1155 = sext i8 %605 to i32
  %or1156 = or i32 %conv1155, 64
  %conv1157 = trunc i32 %or1156 to i8
  store i8 %conv1157, i8* %arrayidx1154, align 1
  br label %if.end.1222

if.else.1158:                                     ; preds = %sw.bb.1147
  store i64 0, i64* %value, align 8
  br label %for.cond.1159

for.cond.1159:                                    ; preds = %for.inc.1219, %if.else.1158
  %606 = load i64, i64* %value, align 8
  %cmp1160 = icmp ult i64 %606, 256
  br i1 %cmp1160, label %for.body.1162, label %for.end.1221

for.body.1162:                                    ; preds = %for.cond.1159
  %607 = load i64, i64* %value, align 8
  %cmp1163 = icmp uge i64 %607, 65
  br i1 %cmp1163, label %land.lhs.true.1165, label %lor.lhs.false.1168

land.lhs.true.1165:                               ; preds = %for.body.1162
  %608 = load i64, i64* %value, align 8
  %cmp1166 = icmp ule i64 %608, 90
  br i1 %cmp1166, label %if.then.1207, label %lor.lhs.false.1168

lor.lhs.false.1168:                               ; preds = %land.lhs.true.1165, %for.body.1162
  %609 = load i64, i64* %value, align 8
  %cmp1169 = icmp uge i64 %609, 97
  br i1 %cmp1169, label %land.lhs.true.1171, label %lor.lhs.false.1174

land.lhs.true.1171:                               ; preds = %lor.lhs.false.1168
  %610 = load i64, i64* %value, align 8
  %cmp1172 = icmp ule i64 %610, 122
  br i1 %cmp1172, label %if.then.1207, label %lor.lhs.false.1174

lor.lhs.false.1174:                               ; preds = %land.lhs.true.1171, %lor.lhs.false.1168
  %611 = load i64, i64* %value, align 8
  %cmp1175 = icmp uge i64 %611, 48
  br i1 %cmp1175, label %land.lhs.true.1177, label %lor.lhs.false.1180

land.lhs.true.1177:                               ; preds = %lor.lhs.false.1174
  %612 = load i64, i64* %value, align 8
  %cmp1178 = icmp ule i64 %612, 57
  br i1 %cmp1178, label %if.then.1207, label %lor.lhs.false.1180

lor.lhs.false.1180:                               ; preds = %land.lhs.true.1177, %lor.lhs.false.1174
  %613 = load i64, i64* %value, align 8
  %cmp1181 = icmp eq i64 %613, 95
  br i1 %cmp1181, label %if.then.1207, label %lor.lhs.false.1183

lor.lhs.false.1183:                               ; preds = %lor.lhs.false.1180
  %614 = load i64, i64* %value, align 8
  %cmp1184 = icmp uge i64 %614, 33
  br i1 %cmp1184, label %land.lhs.true.1186, label %lor.lhs.false.1189

land.lhs.true.1186:                               ; preds = %lor.lhs.false.1183
  %615 = load i64, i64* %value, align 8
  %cmp1187 = icmp ule i64 %615, 47
  br i1 %cmp1187, label %if.then.1207, label %lor.lhs.false.1189

lor.lhs.false.1189:                               ; preds = %land.lhs.true.1186, %lor.lhs.false.1183
  %616 = load i64, i64* %value, align 8
  %cmp1190 = icmp uge i64 %616, 58
  br i1 %cmp1190, label %land.lhs.true.1192, label %lor.lhs.false.1195

land.lhs.true.1192:                               ; preds = %lor.lhs.false.1189
  %617 = load i64, i64* %value, align 8
  %cmp1193 = icmp ule i64 %617, 64
  br i1 %cmp1193, label %if.then.1207, label %lor.lhs.false.1195

lor.lhs.false.1195:                               ; preds = %land.lhs.true.1192, %lor.lhs.false.1189
  %618 = load i64, i64* %value, align 8
  %cmp1196 = icmp uge i64 %618, 91
  br i1 %cmp1196, label %land.lhs.true.1198, label %lor.lhs.false.1201

land.lhs.true.1198:                               ; preds = %lor.lhs.false.1195
  %619 = load i64, i64* %value, align 8
  %cmp1199 = icmp ule i64 %619, 96
  br i1 %cmp1199, label %if.then.1207, label %lor.lhs.false.1201

lor.lhs.false.1201:                               ; preds = %land.lhs.true.1198, %lor.lhs.false.1195
  %620 = load i64, i64* %value, align 8
  %cmp1202 = icmp uge i64 %620, 123
  br i1 %cmp1202, label %land.lhs.true.1204, label %if.end.1218

land.lhs.true.1204:                               ; preds = %lor.lhs.false.1201
  %621 = load i64, i64* %value, align 8
  %cmp1205 = icmp ule i64 %621, 126
  br i1 %cmp1205, label %if.then.1207, label %if.end.1218

if.then.1207:                                     ; preds = %land.lhs.true.1204, %land.lhs.true.1198, %land.lhs.true.1192, %land.lhs.true.1186, %lor.lhs.false.1180, %land.lhs.true.1177, %land.lhs.true.1171, %land.lhs.true.1165
  %622 = load i64, i64* %value, align 8
  %and1208 = and i64 %622, 7
  %sh_prom1209 = trunc i64 %and1208 to i32
  %shl1210 = shl i32 1, %sh_prom1209
  %623 = load i64, i64* %value, align 8
  %shr1211 = lshr i64 %623, 3
  %and1212 = and i64 %shr1211, 31
  %624 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %625 = bitcast %struct.regnode* %624 to %struct.regnode_charclass*
  %bitmap1213 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %625, i32 0, i32 4
  %arrayidx1214 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap1213, i32 0, i64 %and1212
  %626 = load i8, i8* %arrayidx1214, align 1
  %conv1215 = sext i8 %626 to i32
  %or1216 = or i32 %conv1215, %shl1210
  %conv1217 = trunc i32 %or1216 to i8
  store i8 %conv1217, i8* %arrayidx1214, align 1
  br label %if.end.1218

if.end.1218:                                      ; preds = %if.then.1207, %land.lhs.true.1204, %lor.lhs.false.1201
  br label %for.inc.1219

for.inc.1219:                                     ; preds = %if.end.1218
  %627 = load i64, i64* %value, align 8
  %inc1220 = add i64 %627, 1
  store i64 %inc1220, i64* %value, align 8
  br label %for.cond.1159

for.end.1221:                                     ; preds = %for.cond.1159
  br label %if.end.1222

if.end.1222:                                      ; preds = %for.end.1221, %if.then.1152
  store i8 43, i8* %yesno, align 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.70, i32 0, i32 0), i8** %what, align 8
  br label %sw.epilog.1943

sw.bb.1223:                                       ; preds = %if.end.576
  %628 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1224 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %628, i32 0, i32 0
  %629 = load i32, i32* %flags1224, align 4
  %and1225 = and i32 %629, 2048
  %cmp1226 = icmp ne i32 %and1225, 0
  br i1 %cmp1226, label %if.then.1228, label %if.else.1234

if.then.1228:                                     ; preds = %sw.bb.1223
  %630 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %631 = bitcast %struct.regnode* %630 to %struct.regnode_charclass_class*
  %classflags1229 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %631, i32 0, i32 5
  %arrayidx1230 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1229, i32 0, i64 1
  %632 = load i8, i8* %arrayidx1230, align 1
  %conv1231 = sext i8 %632 to i32
  %or1232 = or i32 %conv1231, 128
  %conv1233 = trunc i32 %or1232 to i8
  store i8 %conv1233, i8* %arrayidx1230, align 1
  br label %if.end.1298

if.else.1234:                                     ; preds = %sw.bb.1223
  store i64 0, i64* %value, align 8
  br label %for.cond.1235

for.cond.1235:                                    ; preds = %for.inc.1295, %if.else.1234
  %633 = load i64, i64* %value, align 8
  %cmp1236 = icmp ult i64 %633, 256
  br i1 %cmp1236, label %for.body.1238, label %for.end.1297

for.body.1238:                                    ; preds = %for.cond.1235
  %634 = load i64, i64* %value, align 8
  %cmp1239 = icmp uge i64 %634, 65
  br i1 %cmp1239, label %land.lhs.true.1241, label %lor.lhs.false.1244

land.lhs.true.1241:                               ; preds = %for.body.1238
  %635 = load i64, i64* %value, align 8
  %cmp1242 = icmp ule i64 %635, 90
  br i1 %cmp1242, label %if.end.1294, label %lor.lhs.false.1244

lor.lhs.false.1244:                               ; preds = %land.lhs.true.1241, %for.body.1238
  %636 = load i64, i64* %value, align 8
  %cmp1245 = icmp uge i64 %636, 97
  br i1 %cmp1245, label %land.lhs.true.1247, label %lor.lhs.false.1250

land.lhs.true.1247:                               ; preds = %lor.lhs.false.1244
  %637 = load i64, i64* %value, align 8
  %cmp1248 = icmp ule i64 %637, 122
  br i1 %cmp1248, label %if.end.1294, label %lor.lhs.false.1250

lor.lhs.false.1250:                               ; preds = %land.lhs.true.1247, %lor.lhs.false.1244
  %638 = load i64, i64* %value, align 8
  %cmp1251 = icmp uge i64 %638, 48
  br i1 %cmp1251, label %land.lhs.true.1253, label %lor.lhs.false.1256

land.lhs.true.1253:                               ; preds = %lor.lhs.false.1250
  %639 = load i64, i64* %value, align 8
  %cmp1254 = icmp ule i64 %639, 57
  br i1 %cmp1254, label %if.end.1294, label %lor.lhs.false.1256

lor.lhs.false.1256:                               ; preds = %land.lhs.true.1253, %lor.lhs.false.1250
  %640 = load i64, i64* %value, align 8
  %cmp1257 = icmp eq i64 %640, 95
  br i1 %cmp1257, label %if.end.1294, label %lor.lhs.false.1259

lor.lhs.false.1259:                               ; preds = %lor.lhs.false.1256
  %641 = load i64, i64* %value, align 8
  %cmp1260 = icmp uge i64 %641, 33
  br i1 %cmp1260, label %land.lhs.true.1262, label %lor.lhs.false.1265

land.lhs.true.1262:                               ; preds = %lor.lhs.false.1259
  %642 = load i64, i64* %value, align 8
  %cmp1263 = icmp ule i64 %642, 47
  br i1 %cmp1263, label %if.end.1294, label %lor.lhs.false.1265

lor.lhs.false.1265:                               ; preds = %land.lhs.true.1262, %lor.lhs.false.1259
  %643 = load i64, i64* %value, align 8
  %cmp1266 = icmp uge i64 %643, 58
  br i1 %cmp1266, label %land.lhs.true.1268, label %lor.lhs.false.1271

land.lhs.true.1268:                               ; preds = %lor.lhs.false.1265
  %644 = load i64, i64* %value, align 8
  %cmp1269 = icmp ule i64 %644, 64
  br i1 %cmp1269, label %if.end.1294, label %lor.lhs.false.1271

lor.lhs.false.1271:                               ; preds = %land.lhs.true.1268, %lor.lhs.false.1265
  %645 = load i64, i64* %value, align 8
  %cmp1272 = icmp uge i64 %645, 91
  br i1 %cmp1272, label %land.lhs.true.1274, label %lor.lhs.false.1277

land.lhs.true.1274:                               ; preds = %lor.lhs.false.1271
  %646 = load i64, i64* %value, align 8
  %cmp1275 = icmp ule i64 %646, 96
  br i1 %cmp1275, label %if.end.1294, label %lor.lhs.false.1277

lor.lhs.false.1277:                               ; preds = %land.lhs.true.1274, %lor.lhs.false.1271
  %647 = load i64, i64* %value, align 8
  %cmp1278 = icmp uge i64 %647, 123
  br i1 %cmp1278, label %land.lhs.true.1280, label %if.then.1283

land.lhs.true.1280:                               ; preds = %lor.lhs.false.1277
  %648 = load i64, i64* %value, align 8
  %cmp1281 = icmp ule i64 %648, 126
  br i1 %cmp1281, label %if.end.1294, label %if.then.1283

if.then.1283:                                     ; preds = %land.lhs.true.1280, %lor.lhs.false.1277
  %649 = load i64, i64* %value, align 8
  %and1284 = and i64 %649, 7
  %sh_prom1285 = trunc i64 %and1284 to i32
  %shl1286 = shl i32 1, %sh_prom1285
  %650 = load i64, i64* %value, align 8
  %shr1287 = lshr i64 %650, 3
  %and1288 = and i64 %shr1287, 31
  %651 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %652 = bitcast %struct.regnode* %651 to %struct.regnode_charclass*
  %bitmap1289 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %652, i32 0, i32 4
  %arrayidx1290 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap1289, i32 0, i64 %and1288
  %653 = load i8, i8* %arrayidx1290, align 1
  %conv1291 = sext i8 %653 to i32
  %or1292 = or i32 %conv1291, %shl1286
  %conv1293 = trunc i32 %or1292 to i8
  store i8 %conv1293, i8* %arrayidx1290, align 1
  br label %if.end.1294

if.end.1294:                                      ; preds = %if.then.1283, %land.lhs.true.1280, %land.lhs.true.1274, %land.lhs.true.1268, %land.lhs.true.1262, %lor.lhs.false.1256, %land.lhs.true.1253, %land.lhs.true.1247, %land.lhs.true.1241
  br label %for.inc.1295

for.inc.1295:                                     ; preds = %if.end.1294
  %654 = load i64, i64* %value, align 8
  %inc1296 = add i64 %654, 1
  store i64 %inc1296, i64* %value, align 8
  br label %for.cond.1235

for.end.1297:                                     ; preds = %for.cond.1235
  br label %if.end.1298

if.end.1298:                                      ; preds = %for.end.1297, %if.then.1228
  store i8 33, i8* %yesno, align 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.70, i32 0, i32 0), i8** %what, align 8
  br label %sw.epilog.1943

sw.bb.1299:                                       ; preds = %if.end.576
  %655 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1300 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %655, i32 0, i32 0
  %656 = load i32, i32* %flags1300, align 4
  %and1301 = and i32 %656, 2048
  %cmp1302 = icmp ne i32 %and1301, 0
  br i1 %cmp1302, label %if.then.1304, label %if.else.1310

if.then.1304:                                     ; preds = %sw.bb.1299
  %657 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %658 = bitcast %struct.regnode* %657 to %struct.regnode_charclass_class*
  %classflags1305 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %658, i32 0, i32 5
  %arrayidx1306 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1305, i32 0, i64 2
  %659 = load i8, i8* %arrayidx1306, align 1
  %conv1307 = sext i8 %659 to i32
  %or1308 = or i32 %conv1307, 1
  %conv1309 = trunc i32 %or1308 to i8
  store i8 %conv1309, i8* %arrayidx1306, align 1
  br label %if.end.1335

if.else.1310:                                     ; preds = %sw.bb.1299
  store i64 0, i64* %value, align 8
  br label %for.cond.1311

for.cond.1311:                                    ; preds = %for.inc.1332, %if.else.1310
  %660 = load i64, i64* %value, align 8
  %cmp1312 = icmp ult i64 %660, 256
  br i1 %cmp1312, label %for.body.1314, label %for.end.1334

for.body.1314:                                    ; preds = %for.cond.1311
  %661 = load i64, i64* %value, align 8
  %cmp1315 = icmp uge i64 %661, 97
  br i1 %cmp1315, label %land.lhs.true.1317, label %if.end.1331

land.lhs.true.1317:                               ; preds = %for.body.1314
  %662 = load i64, i64* %value, align 8
  %cmp1318 = icmp ule i64 %662, 122
  br i1 %cmp1318, label %if.then.1320, label %if.end.1331

if.then.1320:                                     ; preds = %land.lhs.true.1317
  %663 = load i64, i64* %value, align 8
  %and1321 = and i64 %663, 7
  %sh_prom1322 = trunc i64 %and1321 to i32
  %shl1323 = shl i32 1, %sh_prom1322
  %664 = load i64, i64* %value, align 8
  %shr1324 = lshr i64 %664, 3
  %and1325 = and i64 %shr1324, 31
  %665 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %666 = bitcast %struct.regnode* %665 to %struct.regnode_charclass*
  %bitmap1326 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %666, i32 0, i32 4
  %arrayidx1327 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap1326, i32 0, i64 %and1325
  %667 = load i8, i8* %arrayidx1327, align 1
  %conv1328 = sext i8 %667 to i32
  %or1329 = or i32 %conv1328, %shl1323
  %conv1330 = trunc i32 %or1329 to i8
  store i8 %conv1330, i8* %arrayidx1327, align 1
  br label %if.end.1331

if.end.1331:                                      ; preds = %if.then.1320, %land.lhs.true.1317, %for.body.1314
  br label %for.inc.1332

for.inc.1332:                                     ; preds = %if.end.1331
  %668 = load i64, i64* %value, align 8
  %inc1333 = add i64 %668, 1
  store i64 %inc1333, i64* %value, align 8
  br label %for.cond.1311

for.end.1334:                                     ; preds = %for.cond.1311
  br label %if.end.1335

if.end.1335:                                      ; preds = %for.end.1334, %if.then.1304
  store i8 43, i8* %yesno, align 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.71, i32 0, i32 0), i8** %what, align 8
  br label %sw.epilog.1943

sw.bb.1336:                                       ; preds = %if.end.576
  %669 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1337 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %669, i32 0, i32 0
  %670 = load i32, i32* %flags1337, align 4
  %and1338 = and i32 %670, 2048
  %cmp1339 = icmp ne i32 %and1338, 0
  br i1 %cmp1339, label %if.then.1341, label %if.else.1347

if.then.1341:                                     ; preds = %sw.bb.1336
  %671 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %672 = bitcast %struct.regnode* %671 to %struct.regnode_charclass_class*
  %classflags1342 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %672, i32 0, i32 5
  %arrayidx1343 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1342, i32 0, i64 2
  %673 = load i8, i8* %arrayidx1343, align 1
  %conv1344 = sext i8 %673 to i32
  %or1345 = or i32 %conv1344, 2
  %conv1346 = trunc i32 %or1345 to i8
  store i8 %conv1346, i8* %arrayidx1343, align 1
  br label %if.end.1372

if.else.1347:                                     ; preds = %sw.bb.1336
  store i64 0, i64* %value, align 8
  br label %for.cond.1348

for.cond.1348:                                    ; preds = %for.inc.1369, %if.else.1347
  %674 = load i64, i64* %value, align 8
  %cmp1349 = icmp ult i64 %674, 256
  br i1 %cmp1349, label %for.body.1351, label %for.end.1371

for.body.1351:                                    ; preds = %for.cond.1348
  %675 = load i64, i64* %value, align 8
  %cmp1352 = icmp uge i64 %675, 97
  br i1 %cmp1352, label %land.lhs.true.1354, label %if.then.1357

land.lhs.true.1354:                               ; preds = %for.body.1351
  %676 = load i64, i64* %value, align 8
  %cmp1355 = icmp ule i64 %676, 122
  br i1 %cmp1355, label %if.end.1368, label %if.then.1357

if.then.1357:                                     ; preds = %land.lhs.true.1354, %for.body.1351
  %677 = load i64, i64* %value, align 8
  %and1358 = and i64 %677, 7
  %sh_prom1359 = trunc i64 %and1358 to i32
  %shl1360 = shl i32 1, %sh_prom1359
  %678 = load i64, i64* %value, align 8
  %shr1361 = lshr i64 %678, 3
  %and1362 = and i64 %shr1361, 31
  %679 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %680 = bitcast %struct.regnode* %679 to %struct.regnode_charclass*
  %bitmap1363 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %680, i32 0, i32 4
  %arrayidx1364 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap1363, i32 0, i64 %and1362
  %681 = load i8, i8* %arrayidx1364, align 1
  %conv1365 = sext i8 %681 to i32
  %or1366 = or i32 %conv1365, %shl1360
  %conv1367 = trunc i32 %or1366 to i8
  store i8 %conv1367, i8* %arrayidx1364, align 1
  br label %if.end.1368

if.end.1368:                                      ; preds = %if.then.1357, %land.lhs.true.1354
  br label %for.inc.1369

for.inc.1369:                                     ; preds = %if.end.1368
  %682 = load i64, i64* %value, align 8
  %inc1370 = add i64 %682, 1
  store i64 %inc1370, i64* %value, align 8
  br label %for.cond.1348

for.end.1371:                                     ; preds = %for.cond.1348
  br label %if.end.1372

if.end.1372:                                      ; preds = %for.end.1371, %if.then.1341
  store i8 33, i8* %yesno, align 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.71, i32 0, i32 0), i8** %what, align 8
  br label %sw.epilog.1943

sw.bb.1373:                                       ; preds = %if.end.576
  %683 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1374 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %683, i32 0, i32 0
  %684 = load i32, i32* %flags1374, align 4
  %and1375 = and i32 %684, 2048
  %cmp1376 = icmp ne i32 %and1375, 0
  br i1 %cmp1376, label %if.then.1378, label %if.else.1384

if.then.1378:                                     ; preds = %sw.bb.1373
  %685 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %686 = bitcast %struct.regnode* %685 to %struct.regnode_charclass_class*
  %classflags1379 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %686, i32 0, i32 5
  %arrayidx1380 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1379, i32 0, i64 2
  %687 = load i8, i8* %arrayidx1380, align 1
  %conv1381 = sext i8 %687 to i32
  %or1382 = or i32 %conv1381, 4
  %conv1383 = trunc i32 %or1382 to i8
  store i8 %conv1383, i8* %arrayidx1380, align 1
  br label %if.end.1412

if.else.1384:                                     ; preds = %sw.bb.1373
  store i64 0, i64* %value, align 8
  br label %for.cond.1385

for.cond.1385:                                    ; preds = %for.inc.1409, %if.else.1384
  %688 = load i64, i64* %value, align 8
  %cmp1386 = icmp ult i64 %688, 256
  br i1 %cmp1386, label %for.body.1388, label %for.end.1411

for.body.1388:                                    ; preds = %for.cond.1385
  %689 = load i64, i64* %value, align 8
  %cmp1389 = icmp ugt i64 %689, 32
  br i1 %cmp1389, label %land.lhs.true.1391, label %lor.lhs.false.1394

land.lhs.true.1391:                               ; preds = %for.body.1388
  %690 = load i64, i64* %value, align 8
  %cmp1392 = icmp ult i64 %690, 127
  br i1 %cmp1392, label %if.then.1397, label %lor.lhs.false.1394

lor.lhs.false.1394:                               ; preds = %land.lhs.true.1391, %for.body.1388
  %691 = load i64, i64* %value, align 8
  %cmp1395 = icmp eq i64 %691, 32
  br i1 %cmp1395, label %if.then.1397, label %if.end.1408

if.then.1397:                                     ; preds = %lor.lhs.false.1394, %land.lhs.true.1391
  %692 = load i64, i64* %value, align 8
  %and1398 = and i64 %692, 7
  %sh_prom1399 = trunc i64 %and1398 to i32
  %shl1400 = shl i32 1, %sh_prom1399
  %693 = load i64, i64* %value, align 8
  %shr1401 = lshr i64 %693, 3
  %and1402 = and i64 %shr1401, 31
  %694 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %695 = bitcast %struct.regnode* %694 to %struct.regnode_charclass*
  %bitmap1403 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %695, i32 0, i32 4
  %arrayidx1404 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap1403, i32 0, i64 %and1402
  %696 = load i8, i8* %arrayidx1404, align 1
  %conv1405 = sext i8 %696 to i32
  %or1406 = or i32 %conv1405, %shl1400
  %conv1407 = trunc i32 %or1406 to i8
  store i8 %conv1407, i8* %arrayidx1404, align 1
  br label %if.end.1408

if.end.1408:                                      ; preds = %if.then.1397, %lor.lhs.false.1394
  br label %for.inc.1409

for.inc.1409:                                     ; preds = %if.end.1408
  %697 = load i64, i64* %value, align 8
  %inc1410 = add i64 %697, 1
  store i64 %inc1410, i64* %value, align 8
  br label %for.cond.1385

for.end.1411:                                     ; preds = %for.cond.1385
  br label %if.end.1412

if.end.1412:                                      ; preds = %for.end.1411, %if.then.1378
  store i8 43, i8* %yesno, align 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.72, i32 0, i32 0), i8** %what, align 8
  br label %sw.epilog.1943

sw.bb.1413:                                       ; preds = %if.end.576
  %698 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1414 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %698, i32 0, i32 0
  %699 = load i32, i32* %flags1414, align 4
  %and1415 = and i32 %699, 2048
  %cmp1416 = icmp ne i32 %and1415, 0
  br i1 %cmp1416, label %if.then.1418, label %if.else.1424

if.then.1418:                                     ; preds = %sw.bb.1413
  %700 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %701 = bitcast %struct.regnode* %700 to %struct.regnode_charclass_class*
  %classflags1419 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %701, i32 0, i32 5
  %arrayidx1420 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1419, i32 0, i64 2
  %702 = load i8, i8* %arrayidx1420, align 1
  %conv1421 = sext i8 %702 to i32
  %or1422 = or i32 %conv1421, 8
  %conv1423 = trunc i32 %or1422 to i8
  store i8 %conv1423, i8* %arrayidx1420, align 1
  br label %if.end.1452

if.else.1424:                                     ; preds = %sw.bb.1413
  store i64 0, i64* %value, align 8
  br label %for.cond.1425

for.cond.1425:                                    ; preds = %for.inc.1449, %if.else.1424
  %703 = load i64, i64* %value, align 8
  %cmp1426 = icmp ult i64 %703, 256
  br i1 %cmp1426, label %for.body.1428, label %for.end.1451

for.body.1428:                                    ; preds = %for.cond.1425
  %704 = load i64, i64* %value, align 8
  %cmp1429 = icmp ugt i64 %704, 32
  br i1 %cmp1429, label %land.lhs.true.1431, label %lor.lhs.false.1434

land.lhs.true.1431:                               ; preds = %for.body.1428
  %705 = load i64, i64* %value, align 8
  %cmp1432 = icmp ult i64 %705, 127
  br i1 %cmp1432, label %if.end.1448, label %lor.lhs.false.1434

lor.lhs.false.1434:                               ; preds = %land.lhs.true.1431, %for.body.1428
  %706 = load i64, i64* %value, align 8
  %cmp1435 = icmp eq i64 %706, 32
  br i1 %cmp1435, label %if.end.1448, label %if.then.1437

if.then.1437:                                     ; preds = %lor.lhs.false.1434
  %707 = load i64, i64* %value, align 8
  %and1438 = and i64 %707, 7
  %sh_prom1439 = trunc i64 %and1438 to i32
  %shl1440 = shl i32 1, %sh_prom1439
  %708 = load i64, i64* %value, align 8
  %shr1441 = lshr i64 %708, 3
  %and1442 = and i64 %shr1441, 31
  %709 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %710 = bitcast %struct.regnode* %709 to %struct.regnode_charclass*
  %bitmap1443 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %710, i32 0, i32 4
  %arrayidx1444 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap1443, i32 0, i64 %and1442
  %711 = load i8, i8* %arrayidx1444, align 1
  %conv1445 = sext i8 %711 to i32
  %or1446 = or i32 %conv1445, %shl1440
  %conv1447 = trunc i32 %or1446 to i8
  store i8 %conv1447, i8* %arrayidx1444, align 1
  br label %if.end.1448

if.end.1448:                                      ; preds = %if.then.1437, %lor.lhs.false.1434, %land.lhs.true.1431
  br label %for.inc.1449

for.inc.1449:                                     ; preds = %if.end.1448
  %712 = load i64, i64* %value, align 8
  %inc1450 = add i64 %712, 1
  store i64 %inc1450, i64* %value, align 8
  br label %for.cond.1425

for.end.1451:                                     ; preds = %for.cond.1425
  br label %if.end.1452

if.end.1452:                                      ; preds = %for.end.1451, %if.then.1418
  store i8 33, i8* %yesno, align 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.72, i32 0, i32 0), i8** %what, align 8
  br label %sw.epilog.1943

sw.bb.1453:                                       ; preds = %if.end.576
  %713 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1454 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %713, i32 0, i32 0
  %714 = load i32, i32* %flags1454, align 4
  %and1455 = and i32 %714, 2048
  %cmp1456 = icmp ne i32 %and1455, 0
  br i1 %cmp1456, label %if.then.1458, label %if.else.1464

if.then.1458:                                     ; preds = %sw.bb.1453
  %715 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %716 = bitcast %struct.regnode* %715 to %struct.regnode_charclass_class*
  %classflags1459 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %716, i32 0, i32 5
  %arrayidx1460 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1459, i32 0, i64 3
  %717 = load i8, i8* %arrayidx1460, align 1
  %conv1461 = sext i8 %717 to i32
  %or1462 = or i32 %conv1461, 4
  %conv1463 = trunc i32 %or1462 to i8
  store i8 %conv1463, i8* %arrayidx1460, align 1
  br label %if.end.1501

if.else.1464:                                     ; preds = %sw.bb.1453
  store i64 0, i64* %value, align 8
  br label %for.cond.1465

for.cond.1465:                                    ; preds = %for.inc.1498, %if.else.1464
  %718 = load i64, i64* %value, align 8
  %cmp1466 = icmp ult i64 %718, 256
  br i1 %cmp1466, label %for.body.1468, label %for.end.1500

for.body.1468:                                    ; preds = %for.cond.1465
  %719 = load i64, i64* %value, align 8
  %cmp1469 = icmp eq i64 %719, 32
  br i1 %cmp1469, label %if.then.1486, label %lor.lhs.false.1471

lor.lhs.false.1471:                               ; preds = %for.body.1468
  %720 = load i64, i64* %value, align 8
  %cmp1472 = icmp eq i64 %720, 9
  br i1 %cmp1472, label %if.then.1486, label %lor.lhs.false.1474

lor.lhs.false.1474:                               ; preds = %lor.lhs.false.1471
  %721 = load i64, i64* %value, align 8
  %cmp1475 = icmp eq i64 %721, 10
  br i1 %cmp1475, label %if.then.1486, label %lor.lhs.false.1477

lor.lhs.false.1477:                               ; preds = %lor.lhs.false.1474
  %722 = load i64, i64* %value, align 8
  %cmp1478 = icmp eq i64 %722, 13
  br i1 %cmp1478, label %if.then.1486, label %lor.lhs.false.1480

lor.lhs.false.1480:                               ; preds = %lor.lhs.false.1477
  %723 = load i64, i64* %value, align 8
  %cmp1481 = icmp eq i64 %723, 12
  br i1 %cmp1481, label %if.then.1486, label %lor.lhs.false.1483

lor.lhs.false.1483:                               ; preds = %lor.lhs.false.1480
  %724 = load i64, i64* %value, align 8
  %cmp1484 = icmp eq i64 %724, 11
  br i1 %cmp1484, label %if.then.1486, label %if.end.1497

if.then.1486:                                     ; preds = %lor.lhs.false.1483, %lor.lhs.false.1480, %lor.lhs.false.1477, %lor.lhs.false.1474, %lor.lhs.false.1471, %for.body.1468
  %725 = load i64, i64* %value, align 8
  %and1487 = and i64 %725, 7
  %sh_prom1488 = trunc i64 %and1487 to i32
  %shl1489 = shl i32 1, %sh_prom1488
  %726 = load i64, i64* %value, align 8
  %shr1490 = lshr i64 %726, 3
  %and1491 = and i64 %shr1490, 31
  %727 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %728 = bitcast %struct.regnode* %727 to %struct.regnode_charclass*
  %bitmap1492 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %728, i32 0, i32 4
  %arrayidx1493 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap1492, i32 0, i64 %and1491
  %729 = load i8, i8* %arrayidx1493, align 1
  %conv1494 = sext i8 %729 to i32
  %or1495 = or i32 %conv1494, %shl1489
  %conv1496 = trunc i32 %or1495 to i8
  store i8 %conv1496, i8* %arrayidx1493, align 1
  br label %if.end.1497

if.end.1497:                                      ; preds = %if.then.1486, %lor.lhs.false.1483
  br label %for.inc.1498

for.inc.1498:                                     ; preds = %if.end.1497
  %730 = load i64, i64* %value, align 8
  %inc1499 = add i64 %730, 1
  store i64 %inc1499, i64* %value, align 8
  br label %for.cond.1465

for.end.1500:                                     ; preds = %for.cond.1465
  br label %if.end.1501

if.end.1501:                                      ; preds = %for.end.1500, %if.then.1458
  store i8 43, i8* %yesno, align 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.73, i32 0, i32 0), i8** %what, align 8
  br label %sw.epilog.1943

sw.bb.1502:                                       ; preds = %if.end.576
  %731 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1503 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %731, i32 0, i32 0
  %732 = load i32, i32* %flags1503, align 4
  %and1504 = and i32 %732, 2048
  %cmp1505 = icmp ne i32 %and1504, 0
  br i1 %cmp1505, label %if.then.1507, label %if.else.1513

if.then.1507:                                     ; preds = %sw.bb.1502
  %733 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %734 = bitcast %struct.regnode* %733 to %struct.regnode_charclass_class*
  %classflags1508 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %734, i32 0, i32 5
  %arrayidx1509 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1508, i32 0, i64 3
  %735 = load i8, i8* %arrayidx1509, align 1
  %conv1510 = sext i8 %735 to i32
  %or1511 = or i32 %conv1510, 8
  %conv1512 = trunc i32 %or1511 to i8
  store i8 %conv1512, i8* %arrayidx1509, align 1
  br label %if.end.1550

if.else.1513:                                     ; preds = %sw.bb.1502
  store i64 0, i64* %value, align 8
  br label %for.cond.1514

for.cond.1514:                                    ; preds = %for.inc.1547, %if.else.1513
  %736 = load i64, i64* %value, align 8
  %cmp1515 = icmp ult i64 %736, 256
  br i1 %cmp1515, label %for.body.1517, label %for.end.1549

for.body.1517:                                    ; preds = %for.cond.1514
  %737 = load i64, i64* %value, align 8
  %cmp1518 = icmp eq i64 %737, 32
  br i1 %cmp1518, label %if.end.1546, label %lor.lhs.false.1520

lor.lhs.false.1520:                               ; preds = %for.body.1517
  %738 = load i64, i64* %value, align 8
  %cmp1521 = icmp eq i64 %738, 9
  br i1 %cmp1521, label %if.end.1546, label %lor.lhs.false.1523

lor.lhs.false.1523:                               ; preds = %lor.lhs.false.1520
  %739 = load i64, i64* %value, align 8
  %cmp1524 = icmp eq i64 %739, 10
  br i1 %cmp1524, label %if.end.1546, label %lor.lhs.false.1526

lor.lhs.false.1526:                               ; preds = %lor.lhs.false.1523
  %740 = load i64, i64* %value, align 8
  %cmp1527 = icmp eq i64 %740, 13
  br i1 %cmp1527, label %if.end.1546, label %lor.lhs.false.1529

lor.lhs.false.1529:                               ; preds = %lor.lhs.false.1526
  %741 = load i64, i64* %value, align 8
  %cmp1530 = icmp eq i64 %741, 12
  br i1 %cmp1530, label %if.end.1546, label %lor.lhs.false.1532

lor.lhs.false.1532:                               ; preds = %lor.lhs.false.1529
  %742 = load i64, i64* %value, align 8
  %cmp1533 = icmp eq i64 %742, 11
  br i1 %cmp1533, label %if.end.1546, label %if.then.1535

if.then.1535:                                     ; preds = %lor.lhs.false.1532
  %743 = load i64, i64* %value, align 8
  %and1536 = and i64 %743, 7
  %sh_prom1537 = trunc i64 %and1536 to i32
  %shl1538 = shl i32 1, %sh_prom1537
  %744 = load i64, i64* %value, align 8
  %shr1539 = lshr i64 %744, 3
  %and1540 = and i64 %shr1539, 31
  %745 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %746 = bitcast %struct.regnode* %745 to %struct.regnode_charclass*
  %bitmap1541 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %746, i32 0, i32 4
  %arrayidx1542 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap1541, i32 0, i64 %and1540
  %747 = load i8, i8* %arrayidx1542, align 1
  %conv1543 = sext i8 %747 to i32
  %or1544 = or i32 %conv1543, %shl1538
  %conv1545 = trunc i32 %or1544 to i8
  store i8 %conv1545, i8* %arrayidx1542, align 1
  br label %if.end.1546

if.end.1546:                                      ; preds = %if.then.1535, %lor.lhs.false.1532, %lor.lhs.false.1529, %lor.lhs.false.1526, %lor.lhs.false.1523, %lor.lhs.false.1520, %for.body.1517
  br label %for.inc.1547

for.inc.1547:                                     ; preds = %if.end.1546
  %748 = load i64, i64* %value, align 8
  %inc1548 = add i64 %748, 1
  store i64 %inc1548, i64* %value, align 8
  br label %for.cond.1514

for.end.1549:                                     ; preds = %for.cond.1514
  br label %if.end.1550

if.end.1550:                                      ; preds = %for.end.1549, %if.then.1507
  store i8 33, i8* %yesno, align 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.73, i32 0, i32 0), i8** %what, align 8
  br label %sw.epilog.1943

sw.bb.1551:                                       ; preds = %if.end.576
  %749 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1552 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %749, i32 0, i32 0
  %750 = load i32, i32* %flags1552, align 4
  %and1553 = and i32 %750, 2048
  %cmp1554 = icmp ne i32 %and1553, 0
  br i1 %cmp1554, label %if.then.1556, label %if.else.1562

if.then.1556:                                     ; preds = %sw.bb.1551
  %751 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %752 = bitcast %struct.regnode* %751 to %struct.regnode_charclass_class*
  %classflags1557 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %752, i32 0, i32 5
  %arrayidx1558 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1557, i32 0, i64 2
  %753 = load i8, i8* %arrayidx1558, align 1
  %conv1559 = sext i8 %753 to i32
  %or1560 = or i32 %conv1559, 16
  %conv1561 = trunc i32 %or1560 to i8
  store i8 %conv1561, i8* %arrayidx1558, align 1
  br label %if.end.1605

if.else.1562:                                     ; preds = %sw.bb.1551
  store i64 0, i64* %value, align 8
  br label %for.cond.1563

for.cond.1563:                                    ; preds = %for.inc.1602, %if.else.1562
  %754 = load i64, i64* %value, align 8
  %cmp1564 = icmp ult i64 %754, 256
  br i1 %cmp1564, label %for.body.1566, label %for.end.1604

for.body.1566:                                    ; preds = %for.cond.1563
  %755 = load i64, i64* %value, align 8
  %cmp1567 = icmp uge i64 %755, 33
  br i1 %cmp1567, label %land.lhs.true.1569, label %lor.lhs.false.1572

land.lhs.true.1569:                               ; preds = %for.body.1566
  %756 = load i64, i64* %value, align 8
  %cmp1570 = icmp ule i64 %756, 47
  br i1 %cmp1570, label %if.then.1590, label %lor.lhs.false.1572

lor.lhs.false.1572:                               ; preds = %land.lhs.true.1569, %for.body.1566
  %757 = load i64, i64* %value, align 8
  %cmp1573 = icmp uge i64 %757, 58
  br i1 %cmp1573, label %land.lhs.true.1575, label %lor.lhs.false.1578

land.lhs.true.1575:                               ; preds = %lor.lhs.false.1572
  %758 = load i64, i64* %value, align 8
  %cmp1576 = icmp ule i64 %758, 64
  br i1 %cmp1576, label %if.then.1590, label %lor.lhs.false.1578

lor.lhs.false.1578:                               ; preds = %land.lhs.true.1575, %lor.lhs.false.1572
  %759 = load i64, i64* %value, align 8
  %cmp1579 = icmp uge i64 %759, 91
  br i1 %cmp1579, label %land.lhs.true.1581, label %lor.lhs.false.1584

land.lhs.true.1581:                               ; preds = %lor.lhs.false.1578
  %760 = load i64, i64* %value, align 8
  %cmp1582 = icmp ule i64 %760, 96
  br i1 %cmp1582, label %if.then.1590, label %lor.lhs.false.1584

lor.lhs.false.1584:                               ; preds = %land.lhs.true.1581, %lor.lhs.false.1578
  %761 = load i64, i64* %value, align 8
  %cmp1585 = icmp uge i64 %761, 123
  br i1 %cmp1585, label %land.lhs.true.1587, label %if.end.1601

land.lhs.true.1587:                               ; preds = %lor.lhs.false.1584
  %762 = load i64, i64* %value, align 8
  %cmp1588 = icmp ule i64 %762, 126
  br i1 %cmp1588, label %if.then.1590, label %if.end.1601

if.then.1590:                                     ; preds = %land.lhs.true.1587, %land.lhs.true.1581, %land.lhs.true.1575, %land.lhs.true.1569
  %763 = load i64, i64* %value, align 8
  %and1591 = and i64 %763, 7
  %sh_prom1592 = trunc i64 %and1591 to i32
  %shl1593 = shl i32 1, %sh_prom1592
  %764 = load i64, i64* %value, align 8
  %shr1594 = lshr i64 %764, 3
  %and1595 = and i64 %shr1594, 31
  %765 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %766 = bitcast %struct.regnode* %765 to %struct.regnode_charclass*
  %bitmap1596 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %766, i32 0, i32 4
  %arrayidx1597 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap1596, i32 0, i64 %and1595
  %767 = load i8, i8* %arrayidx1597, align 1
  %conv1598 = sext i8 %767 to i32
  %or1599 = or i32 %conv1598, %shl1593
  %conv1600 = trunc i32 %or1599 to i8
  store i8 %conv1600, i8* %arrayidx1597, align 1
  br label %if.end.1601

if.end.1601:                                      ; preds = %if.then.1590, %land.lhs.true.1587, %lor.lhs.false.1584
  br label %for.inc.1602

for.inc.1602:                                     ; preds = %if.end.1601
  %768 = load i64, i64* %value, align 8
  %inc1603 = add i64 %768, 1
  store i64 %inc1603, i64* %value, align 8
  br label %for.cond.1563

for.end.1604:                                     ; preds = %for.cond.1563
  br label %if.end.1605

if.end.1605:                                      ; preds = %for.end.1604, %if.then.1556
  store i8 43, i8* %yesno, align 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.74, i32 0, i32 0), i8** %what, align 8
  br label %sw.epilog.1943

sw.bb.1606:                                       ; preds = %if.end.576
  %769 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1607 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %769, i32 0, i32 0
  %770 = load i32, i32* %flags1607, align 4
  %and1608 = and i32 %770, 2048
  %cmp1609 = icmp ne i32 %and1608, 0
  br i1 %cmp1609, label %if.then.1611, label %if.else.1617

if.then.1611:                                     ; preds = %sw.bb.1606
  %771 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %772 = bitcast %struct.regnode* %771 to %struct.regnode_charclass_class*
  %classflags1612 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %772, i32 0, i32 5
  %arrayidx1613 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1612, i32 0, i64 2
  %773 = load i8, i8* %arrayidx1613, align 1
  %conv1614 = sext i8 %773 to i32
  %or1615 = or i32 %conv1614, 32
  %conv1616 = trunc i32 %or1615 to i8
  store i8 %conv1616, i8* %arrayidx1613, align 1
  br label %if.end.1660

if.else.1617:                                     ; preds = %sw.bb.1606
  store i64 0, i64* %value, align 8
  br label %for.cond.1618

for.cond.1618:                                    ; preds = %for.inc.1657, %if.else.1617
  %774 = load i64, i64* %value, align 8
  %cmp1619 = icmp ult i64 %774, 256
  br i1 %cmp1619, label %for.body.1621, label %for.end.1659

for.body.1621:                                    ; preds = %for.cond.1618
  %775 = load i64, i64* %value, align 8
  %cmp1622 = icmp uge i64 %775, 33
  br i1 %cmp1622, label %land.lhs.true.1624, label %lor.lhs.false.1627

land.lhs.true.1624:                               ; preds = %for.body.1621
  %776 = load i64, i64* %value, align 8
  %cmp1625 = icmp ule i64 %776, 47
  br i1 %cmp1625, label %if.end.1656, label %lor.lhs.false.1627

lor.lhs.false.1627:                               ; preds = %land.lhs.true.1624, %for.body.1621
  %777 = load i64, i64* %value, align 8
  %cmp1628 = icmp uge i64 %777, 58
  br i1 %cmp1628, label %land.lhs.true.1630, label %lor.lhs.false.1633

land.lhs.true.1630:                               ; preds = %lor.lhs.false.1627
  %778 = load i64, i64* %value, align 8
  %cmp1631 = icmp ule i64 %778, 64
  br i1 %cmp1631, label %if.end.1656, label %lor.lhs.false.1633

lor.lhs.false.1633:                               ; preds = %land.lhs.true.1630, %lor.lhs.false.1627
  %779 = load i64, i64* %value, align 8
  %cmp1634 = icmp uge i64 %779, 91
  br i1 %cmp1634, label %land.lhs.true.1636, label %lor.lhs.false.1639

land.lhs.true.1636:                               ; preds = %lor.lhs.false.1633
  %780 = load i64, i64* %value, align 8
  %cmp1637 = icmp ule i64 %780, 96
  br i1 %cmp1637, label %if.end.1656, label %lor.lhs.false.1639

lor.lhs.false.1639:                               ; preds = %land.lhs.true.1636, %lor.lhs.false.1633
  %781 = load i64, i64* %value, align 8
  %cmp1640 = icmp uge i64 %781, 123
  br i1 %cmp1640, label %land.lhs.true.1642, label %if.then.1645

land.lhs.true.1642:                               ; preds = %lor.lhs.false.1639
  %782 = load i64, i64* %value, align 8
  %cmp1643 = icmp ule i64 %782, 126
  br i1 %cmp1643, label %if.end.1656, label %if.then.1645

if.then.1645:                                     ; preds = %land.lhs.true.1642, %lor.lhs.false.1639
  %783 = load i64, i64* %value, align 8
  %and1646 = and i64 %783, 7
  %sh_prom1647 = trunc i64 %and1646 to i32
  %shl1648 = shl i32 1, %sh_prom1647
  %784 = load i64, i64* %value, align 8
  %shr1649 = lshr i64 %784, 3
  %and1650 = and i64 %shr1649, 31
  %785 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %786 = bitcast %struct.regnode* %785 to %struct.regnode_charclass*
  %bitmap1651 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %786, i32 0, i32 4
  %arrayidx1652 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap1651, i32 0, i64 %and1650
  %787 = load i8, i8* %arrayidx1652, align 1
  %conv1653 = sext i8 %787 to i32
  %or1654 = or i32 %conv1653, %shl1648
  %conv1655 = trunc i32 %or1654 to i8
  store i8 %conv1655, i8* %arrayidx1652, align 1
  br label %if.end.1656

if.end.1656:                                      ; preds = %if.then.1645, %land.lhs.true.1642, %land.lhs.true.1636, %land.lhs.true.1630, %land.lhs.true.1624
  br label %for.inc.1657

for.inc.1657:                                     ; preds = %if.end.1656
  %788 = load i64, i64* %value, align 8
  %inc1658 = add i64 %788, 1
  store i64 %inc1658, i64* %value, align 8
  br label %for.cond.1618

for.end.1659:                                     ; preds = %for.cond.1618
  br label %if.end.1660

if.end.1660:                                      ; preds = %for.end.1659, %if.then.1611
  store i8 33, i8* %yesno, align 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.74, i32 0, i32 0), i8** %what, align 8
  br label %sw.epilog.1943

sw.bb.1661:                                       ; preds = %if.end.576
  %789 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1662 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %789, i32 0, i32 0
  %790 = load i32, i32* %flags1662, align 4
  %and1663 = and i32 %790, 2048
  %cmp1664 = icmp ne i32 %and1663, 0
  br i1 %cmp1664, label %if.then.1666, label %if.else.1672

if.then.1666:                                     ; preds = %sw.bb.1661
  %791 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %792 = bitcast %struct.regnode* %791 to %struct.regnode_charclass_class*
  %classflags1667 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %792, i32 0, i32 5
  %arrayidx1668 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1667, i32 0, i64 0
  %793 = load i8, i8* %arrayidx1668, align 1
  %conv1669 = sext i8 %793 to i32
  %or1670 = or i32 %conv1669, 4
  %conv1671 = trunc i32 %or1670 to i8
  store i8 %conv1671, i8* %arrayidx1668, align 1
  br label %if.end.1706

if.else.1672:                                     ; preds = %sw.bb.1661
  store i64 0, i64* %value, align 8
  br label %for.cond.1673

for.cond.1673:                                    ; preds = %for.inc.1703, %if.else.1672
  %794 = load i64, i64* %value, align 8
  %cmp1674 = icmp ult i64 %794, 256
  br i1 %cmp1674, label %for.body.1676, label %for.end.1705

for.body.1676:                                    ; preds = %for.cond.1673
  %795 = load i64, i64* %value, align 8
  %cmp1677 = icmp eq i64 %795, 32
  br i1 %cmp1677, label %if.then.1691, label %lor.lhs.false.1679

lor.lhs.false.1679:                               ; preds = %for.body.1676
  %796 = load i64, i64* %value, align 8
  %cmp1680 = icmp eq i64 %796, 9
  br i1 %cmp1680, label %if.then.1691, label %lor.lhs.false.1682

lor.lhs.false.1682:                               ; preds = %lor.lhs.false.1679
  %797 = load i64, i64* %value, align 8
  %cmp1683 = icmp eq i64 %797, 10
  br i1 %cmp1683, label %if.then.1691, label %lor.lhs.false.1685

lor.lhs.false.1685:                               ; preds = %lor.lhs.false.1682
  %798 = load i64, i64* %value, align 8
  %cmp1686 = icmp eq i64 %798, 13
  br i1 %cmp1686, label %if.then.1691, label %lor.lhs.false.1688

lor.lhs.false.1688:                               ; preds = %lor.lhs.false.1685
  %799 = load i64, i64* %value, align 8
  %cmp1689 = icmp eq i64 %799, 12
  br i1 %cmp1689, label %if.then.1691, label %if.end.1702

if.then.1691:                                     ; preds = %lor.lhs.false.1688, %lor.lhs.false.1685, %lor.lhs.false.1682, %lor.lhs.false.1679, %for.body.1676
  %800 = load i64, i64* %value, align 8
  %and1692 = and i64 %800, 7
  %sh_prom1693 = trunc i64 %and1692 to i32
  %shl1694 = shl i32 1, %sh_prom1693
  %801 = load i64, i64* %value, align 8
  %shr1695 = lshr i64 %801, 3
  %and1696 = and i64 %shr1695, 31
  %802 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %803 = bitcast %struct.regnode* %802 to %struct.regnode_charclass*
  %bitmap1697 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %803, i32 0, i32 4
  %arrayidx1698 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap1697, i32 0, i64 %and1696
  %804 = load i8, i8* %arrayidx1698, align 1
  %conv1699 = sext i8 %804 to i32
  %or1700 = or i32 %conv1699, %shl1694
  %conv1701 = trunc i32 %or1700 to i8
  store i8 %conv1701, i8* %arrayidx1698, align 1
  br label %if.end.1702

if.end.1702:                                      ; preds = %if.then.1691, %lor.lhs.false.1688
  br label %for.inc.1703

for.inc.1703:                                     ; preds = %if.end.1702
  %805 = load i64, i64* %value, align 8
  %inc1704 = add i64 %805, 1
  store i64 %inc1704, i64* %value, align 8
  br label %for.cond.1673

for.end.1705:                                     ; preds = %for.cond.1673
  br label %if.end.1706

if.end.1706:                                      ; preds = %for.end.1705, %if.then.1666
  store i8 43, i8* %yesno, align 1
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.75, i32 0, i32 0), i8** %what, align 8
  br label %sw.epilog.1943

sw.bb.1707:                                       ; preds = %if.end.576
  %806 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1708 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %806, i32 0, i32 0
  %807 = load i32, i32* %flags1708, align 4
  %and1709 = and i32 %807, 2048
  %cmp1710 = icmp ne i32 %and1709, 0
  br i1 %cmp1710, label %if.then.1712, label %if.else.1718

if.then.1712:                                     ; preds = %sw.bb.1707
  %808 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %809 = bitcast %struct.regnode* %808 to %struct.regnode_charclass_class*
  %classflags1713 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %809, i32 0, i32 5
  %arrayidx1714 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1713, i32 0, i64 0
  %810 = load i8, i8* %arrayidx1714, align 1
  %conv1715 = sext i8 %810 to i32
  %or1716 = or i32 %conv1715, 8
  %conv1717 = trunc i32 %or1716 to i8
  store i8 %conv1717, i8* %arrayidx1714, align 1
  br label %if.end.1752

if.else.1718:                                     ; preds = %sw.bb.1707
  store i64 0, i64* %value, align 8
  br label %for.cond.1719

for.cond.1719:                                    ; preds = %for.inc.1749, %if.else.1718
  %811 = load i64, i64* %value, align 8
  %cmp1720 = icmp ult i64 %811, 256
  br i1 %cmp1720, label %for.body.1722, label %for.end.1751

for.body.1722:                                    ; preds = %for.cond.1719
  %812 = load i64, i64* %value, align 8
  %cmp1723 = icmp eq i64 %812, 32
  br i1 %cmp1723, label %if.end.1748, label %lor.lhs.false.1725

lor.lhs.false.1725:                               ; preds = %for.body.1722
  %813 = load i64, i64* %value, align 8
  %cmp1726 = icmp eq i64 %813, 9
  br i1 %cmp1726, label %if.end.1748, label %lor.lhs.false.1728

lor.lhs.false.1728:                               ; preds = %lor.lhs.false.1725
  %814 = load i64, i64* %value, align 8
  %cmp1729 = icmp eq i64 %814, 10
  br i1 %cmp1729, label %if.end.1748, label %lor.lhs.false.1731

lor.lhs.false.1731:                               ; preds = %lor.lhs.false.1728
  %815 = load i64, i64* %value, align 8
  %cmp1732 = icmp eq i64 %815, 13
  br i1 %cmp1732, label %if.end.1748, label %lor.lhs.false.1734

lor.lhs.false.1734:                               ; preds = %lor.lhs.false.1731
  %816 = load i64, i64* %value, align 8
  %cmp1735 = icmp eq i64 %816, 12
  br i1 %cmp1735, label %if.end.1748, label %if.then.1737

if.then.1737:                                     ; preds = %lor.lhs.false.1734
  %817 = load i64, i64* %value, align 8
  %and1738 = and i64 %817, 7
  %sh_prom1739 = trunc i64 %and1738 to i32
  %shl1740 = shl i32 1, %sh_prom1739
  %818 = load i64, i64* %value, align 8
  %shr1741 = lshr i64 %818, 3
  %and1742 = and i64 %shr1741, 31
  %819 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %820 = bitcast %struct.regnode* %819 to %struct.regnode_charclass*
  %bitmap1743 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %820, i32 0, i32 4
  %arrayidx1744 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap1743, i32 0, i64 %and1742
  %821 = load i8, i8* %arrayidx1744, align 1
  %conv1745 = sext i8 %821 to i32
  %or1746 = or i32 %conv1745, %shl1740
  %conv1747 = trunc i32 %or1746 to i8
  store i8 %conv1747, i8* %arrayidx1744, align 1
  br label %if.end.1748

if.end.1748:                                      ; preds = %if.then.1737, %lor.lhs.false.1734, %lor.lhs.false.1731, %lor.lhs.false.1728, %lor.lhs.false.1725, %for.body.1722
  br label %for.inc.1749

for.inc.1749:                                     ; preds = %if.end.1748
  %822 = load i64, i64* %value, align 8
  %inc1750 = add i64 %822, 1
  store i64 %inc1750, i64* %value, align 8
  br label %for.cond.1719

for.end.1751:                                     ; preds = %for.cond.1719
  br label %if.end.1752

if.end.1752:                                      ; preds = %for.end.1751, %if.then.1712
  store i8 33, i8* %yesno, align 1
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.75, i32 0, i32 0), i8** %what, align 8
  br label %sw.epilog.1943

sw.bb.1753:                                       ; preds = %if.end.576
  %823 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1754 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %823, i32 0, i32 0
  %824 = load i32, i32* %flags1754, align 4
  %and1755 = and i32 %824, 2048
  %cmp1756 = icmp ne i32 %and1755, 0
  br i1 %cmp1756, label %if.then.1758, label %if.else.1764

if.then.1758:                                     ; preds = %sw.bb.1753
  %825 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %826 = bitcast %struct.regnode* %825 to %struct.regnode_charclass_class*
  %classflags1759 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %826, i32 0, i32 5
  %arrayidx1760 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1759, i32 0, i64 2
  %827 = load i8, i8* %arrayidx1760, align 1
  %conv1761 = sext i8 %827 to i32
  %or1762 = or i32 %conv1761, 64
  %conv1763 = trunc i32 %or1762 to i8
  store i8 %conv1763, i8* %arrayidx1760, align 1
  br label %if.end.1789

if.else.1764:                                     ; preds = %sw.bb.1753
  store i64 0, i64* %value, align 8
  br label %for.cond.1765

for.cond.1765:                                    ; preds = %for.inc.1786, %if.else.1764
  %828 = load i64, i64* %value, align 8
  %cmp1766 = icmp ult i64 %828, 256
  br i1 %cmp1766, label %for.body.1768, label %for.end.1788

for.body.1768:                                    ; preds = %for.cond.1765
  %829 = load i64, i64* %value, align 8
  %cmp1769 = icmp uge i64 %829, 65
  br i1 %cmp1769, label %land.lhs.true.1771, label %if.end.1785

land.lhs.true.1771:                               ; preds = %for.body.1768
  %830 = load i64, i64* %value, align 8
  %cmp1772 = icmp ule i64 %830, 90
  br i1 %cmp1772, label %if.then.1774, label %if.end.1785

if.then.1774:                                     ; preds = %land.lhs.true.1771
  %831 = load i64, i64* %value, align 8
  %and1775 = and i64 %831, 7
  %sh_prom1776 = trunc i64 %and1775 to i32
  %shl1777 = shl i32 1, %sh_prom1776
  %832 = load i64, i64* %value, align 8
  %shr1778 = lshr i64 %832, 3
  %and1779 = and i64 %shr1778, 31
  %833 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %834 = bitcast %struct.regnode* %833 to %struct.regnode_charclass*
  %bitmap1780 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %834, i32 0, i32 4
  %arrayidx1781 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap1780, i32 0, i64 %and1779
  %835 = load i8, i8* %arrayidx1781, align 1
  %conv1782 = sext i8 %835 to i32
  %or1783 = or i32 %conv1782, %shl1777
  %conv1784 = trunc i32 %or1783 to i8
  store i8 %conv1784, i8* %arrayidx1781, align 1
  br label %if.end.1785

if.end.1785:                                      ; preds = %if.then.1774, %land.lhs.true.1771, %for.body.1768
  br label %for.inc.1786

for.inc.1786:                                     ; preds = %if.end.1785
  %836 = load i64, i64* %value, align 8
  %inc1787 = add i64 %836, 1
  store i64 %inc1787, i64* %value, align 8
  br label %for.cond.1765

for.end.1788:                                     ; preds = %for.cond.1765
  br label %if.end.1789

if.end.1789:                                      ; preds = %for.end.1788, %if.then.1758
  store i8 43, i8* %yesno, align 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.76, i32 0, i32 0), i8** %what, align 8
  br label %sw.epilog.1943

sw.bb.1790:                                       ; preds = %if.end.576
  %837 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1791 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %837, i32 0, i32 0
  %838 = load i32, i32* %flags1791, align 4
  %and1792 = and i32 %838, 2048
  %cmp1793 = icmp ne i32 %and1792, 0
  br i1 %cmp1793, label %if.then.1795, label %if.else.1801

if.then.1795:                                     ; preds = %sw.bb.1790
  %839 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %840 = bitcast %struct.regnode* %839 to %struct.regnode_charclass_class*
  %classflags1796 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %840, i32 0, i32 5
  %arrayidx1797 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1796, i32 0, i64 2
  %841 = load i8, i8* %arrayidx1797, align 1
  %conv1798 = sext i8 %841 to i32
  %or1799 = or i32 %conv1798, 128
  %conv1800 = trunc i32 %or1799 to i8
  store i8 %conv1800, i8* %arrayidx1797, align 1
  br label %if.end.1826

if.else.1801:                                     ; preds = %sw.bb.1790
  store i64 0, i64* %value, align 8
  br label %for.cond.1802

for.cond.1802:                                    ; preds = %for.inc.1823, %if.else.1801
  %842 = load i64, i64* %value, align 8
  %cmp1803 = icmp ult i64 %842, 256
  br i1 %cmp1803, label %for.body.1805, label %for.end.1825

for.body.1805:                                    ; preds = %for.cond.1802
  %843 = load i64, i64* %value, align 8
  %cmp1806 = icmp uge i64 %843, 65
  br i1 %cmp1806, label %land.lhs.true.1808, label %if.then.1811

land.lhs.true.1808:                               ; preds = %for.body.1805
  %844 = load i64, i64* %value, align 8
  %cmp1809 = icmp ule i64 %844, 90
  br i1 %cmp1809, label %if.end.1822, label %if.then.1811

if.then.1811:                                     ; preds = %land.lhs.true.1808, %for.body.1805
  %845 = load i64, i64* %value, align 8
  %and1812 = and i64 %845, 7
  %sh_prom1813 = trunc i64 %and1812 to i32
  %shl1814 = shl i32 1, %sh_prom1813
  %846 = load i64, i64* %value, align 8
  %shr1815 = lshr i64 %846, 3
  %and1816 = and i64 %shr1815, 31
  %847 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %848 = bitcast %struct.regnode* %847 to %struct.regnode_charclass*
  %bitmap1817 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %848, i32 0, i32 4
  %arrayidx1818 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap1817, i32 0, i64 %and1816
  %849 = load i8, i8* %arrayidx1818, align 1
  %conv1819 = sext i8 %849 to i32
  %or1820 = or i32 %conv1819, %shl1814
  %conv1821 = trunc i32 %or1820 to i8
  store i8 %conv1821, i8* %arrayidx1818, align 1
  br label %if.end.1822

if.end.1822:                                      ; preds = %if.then.1811, %land.lhs.true.1808
  br label %for.inc.1823

for.inc.1823:                                     ; preds = %if.end.1822
  %850 = load i64, i64* %value, align 8
  %inc1824 = add i64 %850, 1
  store i64 %inc1824, i64* %value, align 8
  br label %for.cond.1802

for.end.1825:                                     ; preds = %for.cond.1802
  br label %if.end.1826

if.end.1826:                                      ; preds = %for.end.1825, %if.then.1795
  store i8 33, i8* %yesno, align 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.76, i32 0, i32 0), i8** %what, align 8
  br label %sw.epilog.1943

sw.bb.1827:                                       ; preds = %if.end.576
  %851 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1828 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %851, i32 0, i32 0
  %852 = load i32, i32* %flags1828, align 4
  %and1829 = and i32 %852, 2048
  %cmp1830 = icmp ne i32 %and1829, 0
  br i1 %cmp1830, label %if.then.1832, label %if.else.1838

if.then.1832:                                     ; preds = %sw.bb.1827
  %853 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %854 = bitcast %struct.regnode* %853 to %struct.regnode_charclass_class*
  %classflags1833 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %854, i32 0, i32 5
  %arrayidx1834 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1833, i32 0, i64 3
  %855 = load i8, i8* %arrayidx1834, align 1
  %conv1835 = sext i8 %855 to i32
  %or1836 = or i32 %conv1835, 1
  %conv1837 = trunc i32 %or1836 to i8
  store i8 %conv1837, i8* %arrayidx1834, align 1
  br label %if.end.1875

if.else.1838:                                     ; preds = %sw.bb.1827
  store i64 0, i64* %value, align 8
  br label %for.cond.1839

for.cond.1839:                                    ; preds = %for.inc.1872, %if.else.1838
  %856 = load i64, i64* %value, align 8
  %cmp1840 = icmp ult i64 %856, 256
  br i1 %cmp1840, label %for.body.1842, label %for.end.1874

for.body.1842:                                    ; preds = %for.cond.1839
  %857 = load i64, i64* %value, align 8
  %cmp1843 = icmp uge i64 %857, 48
  br i1 %cmp1843, label %land.lhs.true.1845, label %lor.lhs.false.1848

land.lhs.true.1845:                               ; preds = %for.body.1842
  %858 = load i64, i64* %value, align 8
  %cmp1846 = icmp ule i64 %858, 57
  br i1 %cmp1846, label %if.then.1860, label %lor.lhs.false.1848

lor.lhs.false.1848:                               ; preds = %land.lhs.true.1845, %for.body.1842
  %859 = load i64, i64* %value, align 8
  %cmp1849 = icmp uge i64 %859, 97
  br i1 %cmp1849, label %land.lhs.true.1851, label %lor.lhs.false.1854

land.lhs.true.1851:                               ; preds = %lor.lhs.false.1848
  %860 = load i64, i64* %value, align 8
  %cmp1852 = icmp ule i64 %860, 102
  br i1 %cmp1852, label %if.then.1860, label %lor.lhs.false.1854

lor.lhs.false.1854:                               ; preds = %land.lhs.true.1851, %lor.lhs.false.1848
  %861 = load i64, i64* %value, align 8
  %cmp1855 = icmp uge i64 %861, 65
  br i1 %cmp1855, label %land.lhs.true.1857, label %if.end.1871

land.lhs.true.1857:                               ; preds = %lor.lhs.false.1854
  %862 = load i64, i64* %value, align 8
  %cmp1858 = icmp ule i64 %862, 70
  br i1 %cmp1858, label %if.then.1860, label %if.end.1871

if.then.1860:                                     ; preds = %land.lhs.true.1857, %land.lhs.true.1851, %land.lhs.true.1845
  %863 = load i64, i64* %value, align 8
  %and1861 = and i64 %863, 7
  %sh_prom1862 = trunc i64 %and1861 to i32
  %shl1863 = shl i32 1, %sh_prom1862
  %864 = load i64, i64* %value, align 8
  %shr1864 = lshr i64 %864, 3
  %and1865 = and i64 %shr1864, 31
  %865 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %866 = bitcast %struct.regnode* %865 to %struct.regnode_charclass*
  %bitmap1866 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %866, i32 0, i32 4
  %arrayidx1867 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap1866, i32 0, i64 %and1865
  %867 = load i8, i8* %arrayidx1867, align 1
  %conv1868 = sext i8 %867 to i32
  %or1869 = or i32 %conv1868, %shl1863
  %conv1870 = trunc i32 %or1869 to i8
  store i8 %conv1870, i8* %arrayidx1867, align 1
  br label %if.end.1871

if.end.1871:                                      ; preds = %if.then.1860, %land.lhs.true.1857, %lor.lhs.false.1854
  br label %for.inc.1872

for.inc.1872:                                     ; preds = %if.end.1871
  %868 = load i64, i64* %value, align 8
  %inc1873 = add i64 %868, 1
  store i64 %inc1873, i64* %value, align 8
  br label %for.cond.1839

for.end.1874:                                     ; preds = %for.cond.1839
  br label %if.end.1875

if.end.1875:                                      ; preds = %for.end.1874, %if.then.1832
  store i8 43, i8* %yesno, align 1
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.77, i32 0, i32 0), i8** %what, align 8
  br label %sw.epilog.1943

sw.bb.1876:                                       ; preds = %if.end.576
  %869 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1877 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %869, i32 0, i32 0
  %870 = load i32, i32* %flags1877, align 4
  %and1878 = and i32 %870, 2048
  %cmp1879 = icmp ne i32 %and1878, 0
  br i1 %cmp1879, label %if.then.1881, label %if.else.1887

if.then.1881:                                     ; preds = %sw.bb.1876
  %871 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %872 = bitcast %struct.regnode* %871 to %struct.regnode_charclass_class*
  %classflags1882 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %872, i32 0, i32 5
  %arrayidx1883 = getelementptr inbounds [4 x i8], [4 x i8]* %classflags1882, i32 0, i64 3
  %873 = load i8, i8* %arrayidx1883, align 1
  %conv1884 = sext i8 %873 to i32
  %or1885 = or i32 %conv1884, 2
  %conv1886 = trunc i32 %or1885 to i8
  store i8 %conv1886, i8* %arrayidx1883, align 1
  br label %if.end.1924

if.else.1887:                                     ; preds = %sw.bb.1876
  store i64 0, i64* %value, align 8
  br label %for.cond.1888

for.cond.1888:                                    ; preds = %for.inc.1921, %if.else.1887
  %874 = load i64, i64* %value, align 8
  %cmp1889 = icmp ult i64 %874, 256
  br i1 %cmp1889, label %for.body.1891, label %for.end.1923

for.body.1891:                                    ; preds = %for.cond.1888
  %875 = load i64, i64* %value, align 8
  %cmp1892 = icmp uge i64 %875, 48
  br i1 %cmp1892, label %land.lhs.true.1894, label %lor.lhs.false.1897

land.lhs.true.1894:                               ; preds = %for.body.1891
  %876 = load i64, i64* %value, align 8
  %cmp1895 = icmp ule i64 %876, 57
  br i1 %cmp1895, label %if.end.1920, label %lor.lhs.false.1897

lor.lhs.false.1897:                               ; preds = %land.lhs.true.1894, %for.body.1891
  %877 = load i64, i64* %value, align 8
  %cmp1898 = icmp uge i64 %877, 97
  br i1 %cmp1898, label %land.lhs.true.1900, label %lor.lhs.false.1903

land.lhs.true.1900:                               ; preds = %lor.lhs.false.1897
  %878 = load i64, i64* %value, align 8
  %cmp1901 = icmp ule i64 %878, 102
  br i1 %cmp1901, label %if.end.1920, label %lor.lhs.false.1903

lor.lhs.false.1903:                               ; preds = %land.lhs.true.1900, %lor.lhs.false.1897
  %879 = load i64, i64* %value, align 8
  %cmp1904 = icmp uge i64 %879, 65
  br i1 %cmp1904, label %land.lhs.true.1906, label %if.then.1909

land.lhs.true.1906:                               ; preds = %lor.lhs.false.1903
  %880 = load i64, i64* %value, align 8
  %cmp1907 = icmp ule i64 %880, 70
  br i1 %cmp1907, label %if.end.1920, label %if.then.1909

if.then.1909:                                     ; preds = %land.lhs.true.1906, %lor.lhs.false.1903
  %881 = load i64, i64* %value, align 8
  %and1910 = and i64 %881, 7
  %sh_prom1911 = trunc i64 %and1910 to i32
  %shl1912 = shl i32 1, %sh_prom1911
  %882 = load i64, i64* %value, align 8
  %shr1913 = lshr i64 %882, 3
  %and1914 = and i64 %shr1913, 31
  %883 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %884 = bitcast %struct.regnode* %883 to %struct.regnode_charclass*
  %bitmap1915 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %884, i32 0, i32 4
  %arrayidx1916 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap1915, i32 0, i64 %and1914
  %885 = load i8, i8* %arrayidx1916, align 1
  %conv1917 = sext i8 %885 to i32
  %or1918 = or i32 %conv1917, %shl1912
  %conv1919 = trunc i32 %or1918 to i8
  store i8 %conv1919, i8* %arrayidx1916, align 1
  br label %if.end.1920

if.end.1920:                                      ; preds = %if.then.1909, %land.lhs.true.1906, %land.lhs.true.1900, %land.lhs.true.1894
  br label %for.inc.1921

for.inc.1921:                                     ; preds = %if.end.1920
  %886 = load i64, i64* %value, align 8
  %inc1922 = add i64 %886, 1
  store i64 %inc1922, i64* %value, align 8
  br label %for.cond.1888

for.end.1923:                                     ; preds = %for.cond.1888
  br label %if.end.1924

if.end.1924:                                      ; preds = %for.end.1923, %if.then.1881
  store i8 33, i8* %yesno, align 1
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.77, i32 0, i32 0), i8** %what, align 8
  br label %sw.epilog.1943

sw.bb.1925:                                       ; preds = %if.end.576
  br label %sw.epilog.1943

sw.default.1926:                                  ; preds = %if.end.576
  %887 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1927 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %887, i32 0, i32 8
  %888 = load %struct.regnode*, %struct.regnode** %emit1927, align 8
  %cmp1928 = icmp eq %struct.regnode* %888, @PL_regdummy
  br i1 %cmp1928, label %if.end.1932, label %if.then.1930

if.then.1930:                                     ; preds = %sw.default.1926
  %889 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx1931 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %889, i32 0, i32 2
  %890 = load %struct.regexp*, %struct.regexp** %rx1931, align 8
  %891 = bitcast %struct.regexp* %890 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @clear_re, i8* %891)
  br label %if.end.1932

if.end.1932:                                      ; preds = %if.then.1930, %sw.default.1926
  %892 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1934 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %892, i32 0, i32 5
  %893 = load i8*, i8** %parse1934, align 8
  %894 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1935 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %894, i32 0, i32 1
  %895 = load i8*, i8** %precomp1935, align 8
  %sub.ptr.lhs.cast1936 = ptrtoint i8* %893 to i64
  %sub.ptr.rhs.cast1937 = ptrtoint i8* %895 to i64
  %sub.ptr.sub1938 = sub i64 %sub.ptr.lhs.cast1936, %sub.ptr.rhs.cast1937
  store i64 %sub.ptr.sub1938, i64* %offset1933, align 8
  %896 = load i64, i64* %offset1933, align 8
  %conv1939 = trunc i64 %896 to i32
  %897 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1940 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %897, i32 0, i32 1
  %898 = load i8*, i8** %precomp1940, align 8
  %899 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1941 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %899, i32 0, i32 1
  %900 = load i8*, i8** %precomp1941, align 8
  %901 = load i64, i64* %offset1933, align 8
  %add.ptr1942 = getelementptr inbounds i8, i8* %900, i64 %901
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.78, i32 0, i32 0), i32 %conv1939, i8* %898, i8* %add.ptr1942)
  br label %sw.epilog.1943

sw.epilog.1943:                                   ; preds = %if.end.1932, %sw.bb.1925, %if.end.1924, %if.end.1875, %if.end.1826, %if.end.1789, %if.end.1752, %if.end.1706, %if.end.1660, %if.end.1605, %if.end.1550, %if.end.1501, %if.end.1452, %if.end.1412, %if.end.1372, %if.end.1335, %if.end.1298, %if.end.1222, %if.end.1146, %if.end.1099, %if.end.1069, %if.end.1032, %if.end.995, %if.end.958, %if.end.921, %if.end.891, %if.end.861, %if.end.818, %if.end.775, %if.end.726, %if.end.677, %if.end.625
  %902 = load i8*, i8** %what, align 8
  %tobool1944 = icmp ne i8* %902, null
  br i1 %tobool1944, label %if.then.1945, label %if.end.1947

if.then.1945:                                     ; preds = %sw.epilog.1943
  %903 = load %struct.sv*, %struct.sv** %listsv, align 8
  %904 = load i8, i8* %yesno, align 1
  %conv1946 = sext i8 %904 to i32
  %905 = load i8*, i8** %what, align 8
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %903, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.79, i32 0, i32 0), i32 %conv1946, i8* %905)
  br label %if.end.1947

if.end.1947:                                      ; preds = %if.then.1945, %sw.epilog.1943
  %906 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1948 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %906, i32 0, i32 0
  %907 = load i32, i32* %flags1948, align 4
  %and1949 = and i32 %907, 2048
  %cmp1950 = icmp ne i32 %and1949, 0
  br i1 %cmp1950, label %if.then.1952, label %if.end.1957

if.then.1952:                                     ; preds = %if.end.1947
  %908 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags1953 = getelementptr inbounds %struct.regnode, %struct.regnode* %908, i32 0, i32 0
  %909 = load i8, i8* %flags1953, align 1
  %conv1954 = zext i8 %909 to i32
  %or1955 = or i32 %conv1954, 8
  %conv1956 = trunc i32 %or1955 to i8
  store i8 %conv1956, i8* %flags1953, align 1
  br label %if.end.1957

if.end.1957:                                      ; preds = %if.then.1952, %if.end.1947
  br label %while.cond

if.end.1958:                                      ; preds = %if.end.568
  br label %if.end.1959

if.end.1959:                                      ; preds = %if.end.1958, %if.end.481
  %910 = load i64, i64* %range, align 8
  %tobool1960 = icmp ne i64 %910, 0
  br i1 %tobool1960, label %if.then.1961, label %if.else.1984

if.then.1961:                                     ; preds = %if.end.1959
  %911 = load i64, i64* %prevvalue, align 8
  %912 = load i64, i64* %value, align 8
  %cmp1962 = icmp sgt i64 %911, %912
  br i1 %cmp1962, label %if.then.1964, label %if.end.1983

if.then.1964:                                     ; preds = %if.then.1961
  %913 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1966 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %913, i32 0, i32 5
  %914 = load i8*, i8** %parse1966, align 8
  %915 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1967 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %915, i32 0, i32 1
  %916 = load i8*, i8** %precomp1967, align 8
  %sub.ptr.lhs.cast1968 = ptrtoint i8* %914 to i64
  %sub.ptr.rhs.cast1969 = ptrtoint i8* %916 to i64
  %sub.ptr.sub1970 = sub i64 %sub.ptr.lhs.cast1968, %sub.ptr.rhs.cast1969
  store i64 %sub.ptr.sub1970, i64* %offset1965, align 8
  %917 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1971 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %917, i32 0, i32 5
  %918 = load i8*, i8** %parse1971, align 8
  %919 = load i8*, i8** %rangebegin, align 8
  %sub.ptr.lhs.cast1972 = ptrtoint i8* %918 to i64
  %sub.ptr.rhs.cast1973 = ptrtoint i8* %919 to i64
  %sub.ptr.sub1974 = sub i64 %sub.ptr.lhs.cast1972, %sub.ptr.rhs.cast1973
  %920 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1975 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %920, i32 0, i32 5
  %921 = load i8*, i8** %parse1975, align 8
  %922 = load i8*, i8** %rangebegin, align 8
  %sub.ptr.lhs.cast1976 = ptrtoint i8* %921 to i64
  %sub.ptr.rhs.cast1977 = ptrtoint i8* %922 to i64
  %sub.ptr.sub1978 = sub i64 %sub.ptr.lhs.cast1976, %sub.ptr.rhs.cast1977
  %923 = load i8*, i8** %rangebegin, align 8
  %924 = load i64, i64* %offset1965, align 8
  %conv1979 = trunc i64 %924 to i32
  %925 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1980 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %925, i32 0, i32 1
  %926 = load i8*, i8** %precomp1980, align 8
  %927 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1981 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %927, i32 0, i32 1
  %928 = load i8*, i8** %precomp1981, align 8
  %929 = load i64, i64* %offset1965, align 8
  %add.ptr1982 = getelementptr inbounds i8, i8* %928, i64 %929
  call void (i8*, i8*, ...) @S_re_croak2(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.80, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.16, i32 0, i32 0), i64 %sub.ptr.sub1974, i64 %sub.ptr.sub1978, i8* %923, i32 %conv1979, i8* %926, i8* %add.ptr1982)
  store i64 0, i64* %range, align 8
  br label %if.end.1983

if.end.1983:                                      ; preds = %if.then.1964, %if.then.1961
  br label %if.end.2067

if.else.1984:                                     ; preds = %if.end.1959
  %930 = load i64, i64* %value, align 8
  store i64 %930, i64* %prevvalue, align 8
  %931 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1985 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %931, i32 0, i32 5
  %932 = load i8*, i8** %parse1985, align 8
  %933 = load i8, i8* %932, align 1
  %conv1986 = sext i8 %933 to i32
  %cmp1987 = icmp eq i32 %conv1986, 45
  br i1 %cmp1987, label %land.lhs.true.1989, label %if.end.2066

land.lhs.true.1989:                               ; preds = %if.else.1984
  %934 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1990 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %934, i32 0, i32 5
  %935 = load i8*, i8** %parse1990, align 8
  %add.ptr1991 = getelementptr inbounds i8, i8* %935, i64 1
  %936 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1992 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %936, i32 0, i32 4
  %937 = load i8*, i8** %end1992, align 8
  %cmp1993 = icmp ult i8* %add.ptr1991, %937
  br i1 %cmp1993, label %land.lhs.true.1995, label %if.end.2066

land.lhs.true.1995:                               ; preds = %land.lhs.true.1989
  %938 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1996 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %938, i32 0, i32 5
  %939 = load i8*, i8** %parse1996, align 8
  %arrayidx1997 = getelementptr inbounds i8, i8* %939, i64 1
  %940 = load i8, i8* %arrayidx1997, align 1
  %conv1998 = sext i8 %940 to i32
  %cmp1999 = icmp ne i32 %conv1998, 93
  br i1 %cmp1999, label %if.then.2001, label %if.end.2066

if.then.2001:                                     ; preds = %land.lhs.true.1995
  %941 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2002 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %941, i32 0, i32 5
  %942 = load i8*, i8** %parse2002, align 8
  %incdec.ptr2003 = getelementptr inbounds i8, i8* %942, i32 1
  store i8* %incdec.ptr2003, i8** %parse2002, align 8
  %943 = load i64, i64* %namedclass, align 8
  %cmp2004 = icmp sgt i64 %943, -1
  br i1 %cmp2004, label %if.then.2006, label %if.else.2064

if.then.2006:                                     ; preds = %if.then.2001
  %944 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings2007 = getelementptr inbounds %struct.cop, %struct.cop* %944, i32 0, i32 14
  %945 = load %struct.sv*, %struct.sv** %cop_warnings2007, align 8
  %cmp2008 = icmp ne %struct.sv* %945, null
  br i1 %cmp2008, label %land.lhs.true.2010, label %lor.lhs.false.2026

land.lhs.true.2010:                               ; preds = %if.then.2006
  %946 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings2011 = getelementptr inbounds %struct.cop, %struct.cop* %946, i32 0, i32 14
  %947 = load %struct.sv*, %struct.sv** %cop_warnings2011, align 8
  %cmp2012 = icmp ne %struct.sv* %947, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp2012, label %land.lhs.true.2014, label %lor.lhs.false.2026

land.lhs.true.2014:                               ; preds = %land.lhs.true.2010
  %948 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings2015 = getelementptr inbounds %struct.cop, %struct.cop* %948, i32 0, i32 14
  %949 = load %struct.sv*, %struct.sv** %cop_warnings2015, align 8
  %cmp2016 = icmp eq %struct.sv* %949, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp2016, label %if.then.2034, label %lor.lhs.false.2018

lor.lhs.false.2018:                               ; preds = %land.lhs.true.2014
  %950 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings2019 = getelementptr inbounds %struct.cop, %struct.cop* %950, i32 0, i32 14
  %951 = load %struct.sv*, %struct.sv** %cop_warnings2019, align 8
  %sv_any2020 = getelementptr inbounds %struct.sv, %struct.sv* %951, i32 0, i32 0
  %952 = load i8*, i8** %sv_any2020, align 8
  %953 = bitcast i8* %952 to %struct.xpv*
  %xpv_pv2021 = getelementptr inbounds %struct.xpv, %struct.xpv* %953, i32 0, i32 0
  %954 = load i8*, i8** %xpv_pv2021, align 8
  %arrayidx2022 = getelementptr inbounds i8, i8* %954, i64 5
  %955 = load i8, i8* %arrayidx2022, align 1
  %conv2023 = sext i8 %955 to i32
  %and2024 = and i32 %conv2023, 1
  %tobool2025 = icmp ne i32 %and2024, 0
  br i1 %tobool2025, label %if.then.2034, label %lor.lhs.false.2026

lor.lhs.false.2026:                               ; preds = %lor.lhs.false.2018, %land.lhs.true.2010, %if.then.2006
  %956 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings2027 = getelementptr inbounds %struct.cop, %struct.cop* %956, i32 0, i32 14
  %957 = load %struct.sv*, %struct.sv** %cop_warnings2027, align 8
  %cmp2028 = icmp eq %struct.sv* %957, null
  br i1 %cmp2028, label %land.lhs.true.2030, label %if.end.2053

land.lhs.true.2030:                               ; preds = %lor.lhs.false.2026
  %958 = load i8, i8* @PL_dowarn, align 1
  %conv2031 = zext i8 %958 to i32
  %and2032 = and i32 %conv2031, 1
  %tobool2033 = icmp ne i32 %and2032, 0
  br i1 %tobool2033, label %if.then.2034, label %if.end.2053

if.then.2034:                                     ; preds = %land.lhs.true.2030, %lor.lhs.false.2018, %land.lhs.true.2014
  %959 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2036 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %959, i32 0, i32 5
  %960 = load i8*, i8** %parse2036, align 8
  %961 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2037 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %961, i32 0, i32 1
  %962 = load i8*, i8** %precomp2037, align 8
  %sub.ptr.lhs.cast2038 = ptrtoint i8* %960 to i64
  %sub.ptr.rhs.cast2039 = ptrtoint i8* %962 to i64
  %sub.ptr.sub2040 = sub i64 %sub.ptr.lhs.cast2038, %sub.ptr.rhs.cast2039
  store i64 %sub.ptr.sub2040, i64* %offset2035, align 8
  %963 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2041 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %963, i32 0, i32 5
  %964 = load i8*, i8** %parse2041, align 8
  %965 = load i8*, i8** %rangebegin, align 8
  %sub.ptr.lhs.cast2042 = ptrtoint i8* %964 to i64
  %sub.ptr.rhs.cast2043 = ptrtoint i8* %965 to i64
  %sub.ptr.sub2044 = sub i64 %sub.ptr.lhs.cast2042, %sub.ptr.rhs.cast2043
  %966 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2045 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %966, i32 0, i32 5
  %967 = load i8*, i8** %parse2045, align 8
  %968 = load i8*, i8** %rangebegin, align 8
  %sub.ptr.lhs.cast2046 = ptrtoint i8* %967 to i64
  %sub.ptr.rhs.cast2047 = ptrtoint i8* %968 to i64
  %sub.ptr.sub2048 = sub i64 %sub.ptr.lhs.cast2046, %sub.ptr.rhs.cast2047
  %969 = load i8*, i8** %rangebegin, align 8
  %970 = load i64, i64* %offset2035, align 8
  %conv2049 = trunc i64 %970 to i32
  %971 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2050 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %971, i32 0, i32 1
  %972 = load i8*, i8** %precomp2050, align 8
  %973 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2051 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %973, i32 0, i32 1
  %974 = load i8*, i8** %precomp2051, align 8
  %975 = load i64, i64* %offset2035, align 8
  %add.ptr2052 = getelementptr inbounds i8, i8* %974, i64 %975
  call void (i32, i8*, ...) @Perl_warner(i32 20, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.61, i32 0, i32 0), i64 %sub.ptr.sub2044, i64 %sub.ptr.sub2048, i8* %969, i32 %conv2049, i8* %972, i8* %add.ptr2052)
  br label %if.end.2053

if.end.2053:                                      ; preds = %if.then.2034, %land.lhs.true.2030, %lor.lhs.false.2026
  %976 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2054 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %976, i32 0, i32 8
  %977 = load %struct.regnode*, %struct.regnode** %emit2054, align 8
  %cmp2055 = icmp eq %struct.regnode* %977, @PL_regdummy
  br i1 %cmp2055, label %if.end.2063, label %if.then.2057

if.then.2057:                                     ; preds = %if.end.2053
  %978 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %979 = bitcast %struct.regnode* %978 to %struct.regnode_charclass*
  %bitmap2058 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %979, i32 0, i32 4
  %arrayidx2059 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap2058, i32 0, i64 5
  %980 = load i8, i8* %arrayidx2059, align 1
  %conv2060 = sext i8 %980 to i32
  %or2061 = or i32 %conv2060, 32
  %conv2062 = trunc i32 %or2061 to i8
  store i8 %conv2062, i8* %arrayidx2059, align 1
  br label %if.end.2063

if.end.2063:                                      ; preds = %if.then.2057, %if.end.2053
  br label %if.end.2065

if.else.2064:                                     ; preds = %if.then.2001
  store i64 1, i64* %range, align 8
  br label %if.end.2065

if.end.2065:                                      ; preds = %if.else.2064, %if.end.2063
  br label %while.cond

if.end.2066:                                      ; preds = %land.lhs.true.1995, %land.lhs.true.1989, %if.else.1984
  br label %if.end.2067

if.end.2067:                                      ; preds = %if.end.2066, %if.end.1983
  %981 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2068 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %981, i32 0, i32 8
  %982 = load %struct.regnode*, %struct.regnode** %emit2068, align 8
  %cmp2069 = icmp eq %struct.regnode* %982, @PL_regdummy
  br i1 %cmp2069, label %if.end.2193, label %if.then.2071

if.then.2071:                                     ; preds = %if.end.2067
  %983 = load i64, i64* %prevvalue, align 8
  %cmp2072 = icmp slt i64 %983, 256
  br i1 %cmp2072, label %if.then.2074, label %if.end.2098

if.then.2074:                                     ; preds = %if.then.2071
  %984 = load i64, i64* %value, align 8
  %cmp2075 = icmp ult i64 %984, 256
  br i1 %cmp2075, label %cond.true.2077, label %cond.false.2078

cond.true.2077:                                   ; preds = %if.then.2074
  %985 = load i64, i64* %value, align 8
  br label %cond.end.2079

cond.false.2078:                                  ; preds = %if.then.2074
  br label %cond.end.2079

cond.end.2079:                                    ; preds = %cond.false.2078, %cond.true.2077
  %cond2080 = phi i64 [ %985, %cond.true.2077 ], [ 255, %cond.false.2078 ]
  store i64 %cond2080, i64* %ceilvalue, align 8
  %986 = load i64, i64* %prevvalue, align 8
  store i64 %986, i64* %i, align 8
  br label %for.cond.2081

for.cond.2081:                                    ; preds = %for.inc.2095, %cond.end.2079
  %987 = load i64, i64* %i, align 8
  %988 = load i64, i64* %ceilvalue, align 8
  %cmp2082 = icmp sle i64 %987, %988
  br i1 %cmp2082, label %for.body.2084, label %for.end.2097

for.body.2084:                                    ; preds = %for.cond.2081
  %989 = load i64, i64* %i, align 8
  %and2085 = and i64 %989, 7
  %sh_prom2086 = trunc i64 %and2085 to i32
  %shl2087 = shl i32 1, %sh_prom2086
  %990 = load i64, i64* %i, align 8
  %shr2088 = ashr i64 %990, 3
  %and2089 = and i64 %shr2088, 31
  %991 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %992 = bitcast %struct.regnode* %991 to %struct.regnode_charclass*
  %bitmap2090 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %992, i32 0, i32 4
  %arrayidx2091 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap2090, i32 0, i64 %and2089
  %993 = load i8, i8* %arrayidx2091, align 1
  %conv2092 = sext i8 %993 to i32
  %or2093 = or i32 %conv2092, %shl2087
  %conv2094 = trunc i32 %or2093 to i8
  store i8 %conv2094, i8* %arrayidx2091, align 1
  br label %for.inc.2095

for.inc.2095:                                     ; preds = %for.body.2084
  %994 = load i64, i64* %i, align 8
  %inc2096 = add nsw i64 %994, 1
  store i64 %inc2096, i64* %i, align 8
  br label %for.cond.2081

for.end.2097:                                     ; preds = %for.cond.2081
  br label %if.end.2098

if.end.2098:                                      ; preds = %for.end.2097, %if.then.2071
  %995 = load i64, i64* %value, align 8
  %cmp2099 = icmp ugt i64 %995, 255
  br i1 %cmp2099, label %if.then.2105, label %lor.lhs.false.2101

lor.lhs.false.2101:                               ; preds = %if.end.2098
  %996 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82102 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %996, i32 0, i32 17
  %997 = load i32, i32* %utf82102, align 4
  %cmp2103 = icmp ne i32 %997, 0
  br i1 %cmp2103, label %if.then.2105, label %if.end.2192

if.then.2105:                                     ; preds = %lor.lhs.false.2101, %if.end.2098
  %998 = load i64, i64* %prevvalue, align 8
  store i64 %998, i64* %prevnatvalue, align 8
  %999 = load i64, i64* %value, align 8
  store i64 %999, i64* %natvalue, align 8
  %1000 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags2106 = getelementptr inbounds %struct.regnode, %struct.regnode* %1000, i32 0, i32 0
  %1001 = load i8, i8* %flags2106, align 1
  %conv2107 = zext i8 %1001 to i32
  %or2108 = or i32 %conv2107, 32
  %conv2109 = trunc i32 %or2108 to i8
  store i8 %conv2109, i8* %flags2106, align 1
  %1002 = load i64, i64* %prevnatvalue, align 8
  %1003 = load i64, i64* %natvalue, align 8
  %cmp2110 = icmp ult i64 %1002, %1003
  br i1 %cmp2110, label %if.then.2112, label %if.else.2113

if.then.2112:                                     ; preds = %if.then.2105
  %1004 = load %struct.sv*, %struct.sv** %listsv, align 8
  %1005 = load i64, i64* %prevnatvalue, align 8
  %1006 = load i64, i64* %natvalue, align 8
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %1004, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.81, i32 0, i32 0), i64 %1005, i64 %1006)
  br label %if.end.2191

if.else.2113:                                     ; preds = %if.then.2105
  %1007 = load i64, i64* %prevnatvalue, align 8
  %1008 = load i64, i64* %natvalue, align 8
  %cmp2114 = icmp eq i64 %1007, %1008
  br i1 %cmp2114, label %if.then.2116, label %if.end.2190

if.then.2116:                                     ; preds = %if.else.2113
  %1009 = load %struct.sv*, %struct.sv** %listsv, align 8
  %1010 = load i64, i64* %natvalue, align 8
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %1009, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.82, i32 0, i32 0), i64 %1010)
  %1011 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2117 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1011, i32 0, i32 0
  %1012 = load i32, i32* %flags2117, align 4
  %and2118 = and i32 %1012, 16384
  %cmp2119 = icmp ne i32 %and2118, 0
  br i1 %cmp2119, label %if.then.2121, label %if.end.2189

if.then.2121:                                     ; preds = %if.then.2116
  %1013 = load i64, i64* %natvalue, align 8
  %arraydecay2122 = getelementptr inbounds [7 x i8], [7 x i8]* %foldbuf, i32 0, i32 0
  %call2123 = call i64 @Perl_to_uni_fold(i64 %1013, i8* %arraydecay2122, i64* %foldlen)
  store i64 %call2123, i64* %f, align 8
  %1014 = load i64, i64* %f, align 8
  %1015 = load i64, i64* %value, align 8
  %cmp2124 = icmp ne i64 %1014, %1015
  br i1 %cmp2124, label %if.then.2126, label %if.end.2179

if.then.2126:                                     ; preds = %if.then.2121
  %1016 = load i64, i64* %foldlen, align 8
  %1017 = load i64, i64* %f, align 8
  %cmp2127 = icmp ult i64 %1017, 128
  br i1 %cmp2127, label %cond.true.2129, label %cond.false.2130

cond.true.2129:                                   ; preds = %if.then.2126
  br label %cond.end.2164

cond.false.2130:                                  ; preds = %if.then.2126
  %1018 = load i64, i64* %f, align 8
  %cmp2131 = icmp ult i64 %1018, 2048
  br i1 %cmp2131, label %cond.true.2133, label %cond.false.2134

cond.true.2133:                                   ; preds = %cond.false.2130
  br label %cond.end.2162

cond.false.2134:                                  ; preds = %cond.false.2130
  %1019 = load i64, i64* %f, align 8
  %cmp2135 = icmp ult i64 %1019, 65536
  br i1 %cmp2135, label %cond.true.2137, label %cond.false.2138

cond.true.2137:                                   ; preds = %cond.false.2134
  br label %cond.end.2160

cond.false.2138:                                  ; preds = %cond.false.2134
  %1020 = load i64, i64* %f, align 8
  %cmp2139 = icmp ult i64 %1020, 2097152
  br i1 %cmp2139, label %cond.true.2141, label %cond.false.2142

cond.true.2141:                                   ; preds = %cond.false.2138
  br label %cond.end.2158

cond.false.2142:                                  ; preds = %cond.false.2138
  %1021 = load i64, i64* %f, align 8
  %cmp2143 = icmp ult i64 %1021, 67108864
  br i1 %cmp2143, label %cond.true.2145, label %cond.false.2146

cond.true.2145:                                   ; preds = %cond.false.2142
  br label %cond.end.2156

cond.false.2146:                                  ; preds = %cond.false.2142
  %1022 = load i64, i64* %f, align 8
  %cmp2147 = icmp ult i64 %1022, 2147483648
  br i1 %cmp2147, label %cond.true.2149, label %cond.false.2150

cond.true.2149:                                   ; preds = %cond.false.2146
  br label %cond.end.2154

cond.false.2150:                                  ; preds = %cond.false.2146
  %1023 = load i64, i64* %f, align 8
  %cmp2151 = icmp ult i64 %1023, 68719476736
  %cond2153 = select i1 %cmp2151, i32 7, i32 13
  br label %cond.end.2154

cond.end.2154:                                    ; preds = %cond.false.2150, %cond.true.2149
  %cond2155 = phi i32 [ 6, %cond.true.2149 ], [ %cond2153, %cond.false.2150 ]
  br label %cond.end.2156

cond.end.2156:                                    ; preds = %cond.end.2154, %cond.true.2145
  %cond2157 = phi i32 [ 5, %cond.true.2145 ], [ %cond2155, %cond.end.2154 ]
  br label %cond.end.2158

cond.end.2158:                                    ; preds = %cond.end.2156, %cond.true.2141
  %cond2159 = phi i32 [ 4, %cond.true.2141 ], [ %cond2157, %cond.end.2156 ]
  br label %cond.end.2160

cond.end.2160:                                    ; preds = %cond.end.2158, %cond.true.2137
  %cond2161 = phi i32 [ 3, %cond.true.2137 ], [ %cond2159, %cond.end.2158 ]
  br label %cond.end.2162

cond.end.2162:                                    ; preds = %cond.end.2160, %cond.true.2133
  %cond2163 = phi i32 [ 2, %cond.true.2133 ], [ %cond2161, %cond.end.2160 ]
  br label %cond.end.2164

cond.end.2164:                                    ; preds = %cond.end.2162, %cond.true.2129
  %cond2165 = phi i32 [ 1, %cond.true.2129 ], [ %cond2163, %cond.end.2162 ]
  %conv2166 = sext i32 %cond2165 to i64
  %cmp2167 = icmp eq i64 %1016, %conv2166
  br i1 %cmp2167, label %if.then.2169, label %if.else.2170

if.then.2169:                                     ; preds = %cond.end.2164
  %1024 = load %struct.sv*, %struct.sv** %listsv, align 8
  %1025 = load i64, i64* %f, align 8
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %1024, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.82, i32 0, i32 0), i64 %1025)
  br label %if.end.2178

if.else.2170:                                     ; preds = %cond.end.2164
  %1026 = load %struct.av*, %struct.av** %unicode_alternate, align 8
  %tobool2171 = icmp ne %struct.av* %1026, null
  br i1 %tobool2171, label %if.end.2174, label %if.then.2172

if.then.2172:                                     ; preds = %if.else.2170
  %call2173 = call %struct.av* @Perl_newAV()
  store %struct.av* %call2173, %struct.av** %unicode_alternate, align 8
  br label %if.end.2174

if.end.2174:                                      ; preds = %if.then.2172, %if.else.2170
  %arraydecay2175 = getelementptr inbounds [7 x i8], [7 x i8]* %foldbuf, i32 0, i32 0
  %1027 = load i64, i64* %foldlen, align 8
  %call2176 = call %struct.sv* @Perl_newSVpvn(i8* %arraydecay2175, i64 %1027)
  store %struct.sv* %call2176, %struct.sv** %sv, align 8
  %1028 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1028, i32 0, i32 2
  %1029 = load i32, i32* %sv_flags, align 4
  %or2177 = or i32 %1029, 536870912
  store i32 %or2177, i32* %sv_flags, align 4
  %1030 = load %struct.av*, %struct.av** %unicode_alternate, align 8
  %1031 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_av_push(%struct.av* %1030, %struct.sv* %1031)
  br label %if.end.2178

if.end.2178:                                      ; preds = %if.end.2174, %if.then.2169
  br label %if.end.2179

if.end.2179:                                      ; preds = %if.end.2178, %if.then.2121
  %1032 = load i64, i64* %value, align 8
  %cmp2180 = icmp eq i64 %1032, 962
  br i1 %cmp2180, label %if.then.2182, label %if.else.2183

if.then.2182:                                     ; preds = %if.end.2179
  %1033 = load %struct.sv*, %struct.sv** %listsv, align 8
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %1033, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.82, i32 0, i32 0), i64 931)
  %1034 = load %struct.sv*, %struct.sv** %listsv, align 8
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %1034, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.82, i32 0, i32 0), i64 963)
  br label %if.end.2188

if.else.2183:                                     ; preds = %if.end.2179
  %1035 = load i64, i64* %value, align 8
  %cmp2184 = icmp eq i64 %1035, 931
  br i1 %cmp2184, label %if.then.2186, label %if.end.2187

if.then.2186:                                     ; preds = %if.else.2183
  %1036 = load %struct.sv*, %struct.sv** %listsv, align 8
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %1036, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.82, i32 0, i32 0), i64 963)
  br label %if.end.2187

if.end.2187:                                      ; preds = %if.then.2186, %if.else.2183
  br label %if.end.2188

if.end.2188:                                      ; preds = %if.end.2187, %if.then.2182
  br label %if.end.2189

if.end.2189:                                      ; preds = %if.end.2188, %if.then.2116
  br label %if.end.2190

if.end.2190:                                      ; preds = %if.end.2189, %if.else.2113
  br label %if.end.2191

if.end.2191:                                      ; preds = %if.end.2190, %if.then.2112
  br label %if.end.2192

if.end.2192:                                      ; preds = %if.end.2191, %lor.lhs.false.2101
  br label %if.end.2193

if.end.2193:                                      ; preds = %if.end.2192, %if.end.2067
  store i64 0, i64* %range, align 8
  br label %while.cond

while.end.2194:                                   ; preds = %land.end
  %1037 = load i8, i8* %need_class, align 1
  %tobool2195 = icmp ne i8 %1037, 0
  br i1 %tobool2195, label %if.then.2196, label %if.end.2213

if.then.2196:                                     ; preds = %while.end.2194
  %1038 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags2197 = getelementptr inbounds %struct.regnode, %struct.regnode* %1038, i32 0, i32 0
  %1039 = load i8, i8* %flags2197, align 1
  %conv2198 = zext i8 %1039 to i32
  %or2199 = or i32 %conv2198, 128
  %conv2200 = trunc i32 %or2199 to i8
  store i8 %conv2200, i8* %flags2197, align 1
  %1040 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2201 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1040, i32 0, i32 8
  %1041 = load %struct.regnode*, %struct.regnode** %emit2201, align 8
  %cmp2202 = icmp eq %struct.regnode* %1041, @PL_regdummy
  br i1 %cmp2202, label %if.then.2204, label %if.else.2209

if.then.2204:                                     ; preds = %if.then.2196
  %1042 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %size2205 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1042, i32 0, i32 12
  %1043 = load i32, i32* %size2205, align 4
  %conv2206 = sext i32 %1043 to i64
  %add2207 = add i64 %conv2206, 1
  %conv2208 = trunc i64 %add2207 to i32
  store i32 %conv2208, i32* %size2205, align 4
  br label %if.end.2212

if.else.2209:                                     ; preds = %if.then.2196
  %1044 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2210 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1044, i32 0, i32 8
  %1045 = load %struct.regnode*, %struct.regnode** %emit2210, align 8
  %add.ptr2211 = getelementptr inbounds %struct.regnode, %struct.regnode* %1045, i64 1
  store %struct.regnode* %add.ptr2211, %struct.regnode** %emit2210, align 8
  br label %if.end.2212

if.end.2212:                                      ; preds = %if.else.2209, %if.then.2204
  br label %if.end.2213

if.end.2213:                                      ; preds = %if.end.2212, %while.end.2194
  %1046 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2214 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1046, i32 0, i32 8
  %1047 = load %struct.regnode*, %struct.regnode** %emit2214, align 8
  %cmp2215 = icmp eq %struct.regnode* %1047, @PL_regdummy
  br i1 %cmp2215, label %if.end.2263, label %land.lhs.true.2217

land.lhs.true.2217:                               ; preds = %if.end.2213
  %1048 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags2218 = getelementptr inbounds %struct.regnode, %struct.regnode* %1048, i32 0, i32 0
  %1049 = load i8, i8* %flags2218, align 1
  %conv2219 = zext i8 %1049 to i32
  %and2220 = and i32 %conv2219, 251
  %cmp2221 = icmp eq i32 %and2220, 2
  br i1 %cmp2221, label %if.then.2223, label %if.end.2263

if.then.2223:                                     ; preds = %land.lhs.true.2217
  store i64 0, i64* %value, align 8
  br label %for.cond.2224

for.cond.2224:                                    ; preds = %for.inc.2256, %if.then.2223
  %1050 = load i64, i64* %value, align 8
  %cmp2225 = icmp ult i64 %1050, 256
  br i1 %cmp2225, label %for.body.2227, label %for.end.2258

for.body.2227:                                    ; preds = %for.cond.2224
  %1051 = load i64, i64* %value, align 8
  %shr2228 = lshr i64 %1051, 3
  %and2229 = and i64 %shr2228, 31
  %1052 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %1053 = bitcast %struct.regnode* %1052 to %struct.regnode_charclass*
  %bitmap2230 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %1053, i32 0, i32 4
  %arrayidx2231 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap2230, i32 0, i64 %and2229
  %1054 = load i8, i8* %arrayidx2231, align 1
  %conv2232 = sext i8 %1054 to i32
  %1055 = load i64, i64* %value, align 8
  %and2233 = and i64 %1055, 7
  %sh_prom2234 = trunc i64 %and2233 to i32
  %shl2235 = shl i32 1, %sh_prom2234
  %and2236 = and i32 %conv2232, %shl2235
  %tobool2237 = icmp ne i32 %and2236, 0
  br i1 %tobool2237, label %if.then.2238, label %if.end.2255

if.then.2238:                                     ; preds = %for.body.2227
  %1056 = load i64, i64* %value, align 8
  %arrayidx2239 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_fold, i32 0, i64 %1056
  %1057 = load i8, i8* %arrayidx2239, align 1
  %conv2240 = zext i8 %1057 to i64
  store i64 %conv2240, i64* %fold, align 8
  %1058 = load i64, i64* %fold, align 8
  %1059 = load i64, i64* %value, align 8
  %cmp2241 = icmp ne i64 %1058, %1059
  br i1 %cmp2241, label %if.then.2243, label %if.end.2254

if.then.2243:                                     ; preds = %if.then.2238
  %1060 = load i64, i64* %fold, align 8
  %and2244 = and i64 %1060, 7
  %sh_prom2245 = trunc i64 %and2244 to i32
  %shl2246 = shl i32 1, %sh_prom2245
  %1061 = load i64, i64* %fold, align 8
  %shr2247 = lshr i64 %1061, 3
  %and2248 = and i64 %shr2247, 31
  %1062 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %1063 = bitcast %struct.regnode* %1062 to %struct.regnode_charclass*
  %bitmap2249 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %1063, i32 0, i32 4
  %arrayidx2250 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap2249, i32 0, i64 %and2248
  %1064 = load i8, i8* %arrayidx2250, align 1
  %conv2251 = sext i8 %1064 to i32
  %or2252 = or i32 %conv2251, %shl2246
  %conv2253 = trunc i32 %or2252 to i8
  store i8 %conv2253, i8* %arrayidx2250, align 1
  br label %if.end.2254

if.end.2254:                                      ; preds = %if.then.2243, %if.then.2238
  br label %if.end.2255

if.end.2255:                                      ; preds = %if.end.2254, %for.body.2227
  br label %for.inc.2256

for.inc.2256:                                     ; preds = %if.end.2255
  %1065 = load i64, i64* %value, align 8
  %inc2257 = add i64 %1065, 1
  store i64 %inc2257, i64* %value, align 8
  br label %for.cond.2224

for.end.2258:                                     ; preds = %for.cond.2224
  %1066 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags2259 = getelementptr inbounds %struct.regnode, %struct.regnode* %1066, i32 0, i32 0
  %1067 = load i8, i8* %flags2259, align 1
  %conv2260 = zext i8 %1067 to i32
  %and2261 = and i32 %conv2260, -3
  %conv2262 = trunc i32 %and2261 to i8
  store i8 %conv2262, i8* %flags2259, align 1
  br label %if.end.2263

if.end.2263:                                      ; preds = %for.end.2258, %land.lhs.true.2217, %if.end.2213
  %1068 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2264 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1068, i32 0, i32 8
  %1069 = load %struct.regnode*, %struct.regnode** %emit2264, align 8
  %cmp2265 = icmp eq %struct.regnode* %1069, @PL_regdummy
  br i1 %cmp2265, label %if.end.2290, label %land.lhs.true.2267

land.lhs.true.2267:                               ; preds = %if.end.2263
  %1070 = load i8, i8* %optimize_invert, align 1
  %conv2268 = sext i8 %1070 to i32
  %tobool2269 = icmp ne i32 %conv2268, 0
  br i1 %tobool2269, label %land.lhs.true.2270, label %if.end.2290

land.lhs.true.2270:                               ; preds = %land.lhs.true.2267
  %1071 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags2271 = getelementptr inbounds %struct.regnode, %struct.regnode* %1071, i32 0, i32 0
  %1072 = load i8, i8* %flags2271, align 1
  %conv2272 = zext i8 %1072 to i32
  %and2273 = and i32 %conv2272, 255
  %cmp2274 = icmp eq i32 %and2273, 4
  br i1 %cmp2274, label %if.then.2276, label %if.end.2290

if.then.2276:                                     ; preds = %land.lhs.true.2270
  store i64 0, i64* %value, align 8
  br label %for.cond.2277

for.cond.2277:                                    ; preds = %for.inc.2286, %if.then.2276
  %1073 = load i64, i64* %value, align 8
  %cmp2278 = icmp ult i64 %1073, 32
  br i1 %cmp2278, label %for.body.2280, label %for.end.2288

for.body.2280:                                    ; preds = %for.cond.2277
  %1074 = load i64, i64* %value, align 8
  %1075 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %1076 = bitcast %struct.regnode* %1075 to %struct.regnode_charclass*
  %bitmap2281 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %1076, i32 0, i32 4
  %arrayidx2282 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap2281, i32 0, i64 %1074
  %1077 = load i8, i8* %arrayidx2282, align 1
  %conv2283 = sext i8 %1077 to i32
  %xor2284 = xor i32 %conv2283, 255
  %conv2285 = trunc i32 %xor2284 to i8
  store i8 %conv2285, i8* %arrayidx2282, align 1
  br label %for.inc.2286

for.inc.2286:                                     ; preds = %for.body.2280
  %1078 = load i64, i64* %value, align 8
  %inc2287 = add i64 %1078, 1
  store i64 %inc2287, i64* %value, align 8
  br label %for.cond.2277

for.end.2288:                                     ; preds = %for.cond.2277
  %1079 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags2289 = getelementptr inbounds %struct.regnode, %struct.regnode* %1079, i32 0, i32 0
  store i8 64, i8* %flags2289, align 1
  br label %if.end.2290

if.end.2290:                                      ; preds = %for.end.2288, %land.lhs.true.2270, %land.lhs.true.2267, %if.end.2263
  %1080 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2291 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1080, i32 0, i32 8
  %1081 = load %struct.regnode*, %struct.regnode** %emit2291, align 8
  %cmp2292 = icmp eq %struct.regnode* %1081, @PL_regdummy
  br i1 %cmp2292, label %if.end.2306, label %if.then.2294

if.then.2294:                                     ; preds = %if.end.2290
  %call2295 = call %struct.av* @Perl_newAV()
  store %struct.av* %call2295, %struct.av** %av, align 8
  %1082 = load %struct.av*, %struct.av** %av, align 8
  %1083 = load %struct.sv*, %struct.sv** %listsv, align 8
  %call2296 = call %struct.sv** @Perl_av_store(%struct.av* %1082, i32 0, %struct.sv* %1083)
  %1084 = load %struct.av*, %struct.av** %av, align 8
  %call2297 = call %struct.sv** @Perl_av_store(%struct.av* %1084, i32 1, %struct.sv* null)
  %1085 = load %struct.av*, %struct.av** %av, align 8
  %1086 = load %struct.av*, %struct.av** %unicode_alternate, align 8
  %1087 = bitcast %struct.av* %1086 to %struct.sv*
  %call2298 = call %struct.sv** @Perl_av_store(%struct.av* %1085, i32 2, %struct.sv* %1087)
  %1088 = load %struct.av*, %struct.av** %av, align 8
  %1089 = bitcast %struct.av* %1088 to %struct.sv*
  %call2299 = call %struct.sv* @Perl_newRV_noinc(%struct.sv* %1089)
  store %struct.sv* %call2299, %struct.sv** %rv, align 8
  %1090 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call2300 = call i32 @S_add_data(%struct.RExC_state_t* %1090, i32 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.83, i32 0, i32 0))
  %conv2301 = sext i32 %call2300 to i64
  store i64 %conv2301, i64* %n, align 8
  %1091 = load %struct.sv*, %struct.sv** %rv, align 8
  %1092 = bitcast %struct.sv* %1091 to i8*
  %1093 = load i64, i64* %n, align 8
  %1094 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx2302 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1094, i32 0, i32 2
  %1095 = load %struct.regexp*, %struct.regexp** %rx2302, align 8
  %data = getelementptr inbounds %struct.regexp, %struct.regexp* %1095, i32 0, i32 5
  %1096 = load %struct.reg_data*, %struct.reg_data** %data, align 8
  %data2303 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %1096, i32 0, i32 2
  %arrayidx2304 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data2303, i32 0, i64 %1093
  store i8* %1092, i8** %arrayidx2304, align 8
  %1097 = load i64, i64* %n, align 8
  %conv2305 = trunc i64 %1097 to i32
  %1098 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %1099 = bitcast %struct.regnode* %1098 to %struct.regnode_1*
  %arg1 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %1099, i32 0, i32 3
  store i32 %conv2305, i32* %arg1, align 4
  br label %if.end.2306

if.end.2306:                                      ; preds = %if.then.2294, %if.end.2290
  %1100 = load %struct.regnode*, %struct.regnode** %ret, align 8
  ret %struct.regnode* %1100
}

; Function Attrs: nounwind uwtable
define internal i8* @S_regwhite(i8* %p, i8* %e) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %e.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i8* %e, i8** %e.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.29, %entry
  %0 = load i8*, i8** %p.addr, align 8
  %1 = load i8*, i8** %e.addr, align 8
  %cmp = icmp ult i8* %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %p.addr, align 8
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 32
  br i1 %cmp1, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %4 = load i8*, i8** %p.addr, align 8
  %5 = load i8, i8* %4, align 1
  %conv3 = sext i8 %5 to i32
  %cmp4 = icmp eq i32 %conv3, 9
  br i1 %cmp4, label %if.then, label %lor.lhs.false.6

lor.lhs.false.6:                                  ; preds = %lor.lhs.false
  %6 = load i8*, i8** %p.addr, align 8
  %7 = load i8, i8* %6, align 1
  %conv7 = sext i8 %7 to i32
  %cmp8 = icmp eq i32 %conv7, 10
  br i1 %cmp8, label %if.then, label %lor.lhs.false.10

lor.lhs.false.10:                                 ; preds = %lor.lhs.false.6
  %8 = load i8*, i8** %p.addr, align 8
  %9 = load i8, i8* %8, align 1
  %conv11 = sext i8 %9 to i32
  %cmp12 = icmp eq i32 %conv11, 13
  br i1 %cmp12, label %if.then, label %lor.lhs.false.14

lor.lhs.false.14:                                 ; preds = %lor.lhs.false.10
  %10 = load i8*, i8** %p.addr, align 8
  %11 = load i8, i8* %10, align 1
  %conv15 = sext i8 %11 to i32
  %cmp16 = icmp eq i32 %conv15, 12
  br i1 %cmp16, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false.14, %lor.lhs.false.10, %lor.lhs.false.6, %lor.lhs.false, %while.body
  %12 = load i8*, i8** %p.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr, i8** %p.addr, align 8
  br label %if.end.29

if.else:                                          ; preds = %lor.lhs.false.14
  %13 = load i8*, i8** %p.addr, align 8
  %14 = load i8, i8* %13, align 1
  %conv18 = sext i8 %14 to i32
  %cmp19 = icmp eq i32 %conv18, 35
  br i1 %cmp19, label %if.then.21, label %if.else.28

if.then.21:                                       ; preds = %if.else
  br label %do.body

do.body:                                          ; preds = %land.end, %if.then.21
  %15 = load i8*, i8** %p.addr, align 8
  %incdec.ptr22 = getelementptr inbounds i8, i8* %15, i32 1
  store i8* %incdec.ptr22, i8** %p.addr, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %16 = load i8*, i8** %p.addr, align 8
  %17 = load i8*, i8** %e.addr, align 8
  %cmp23 = icmp ult i8* %16, %17
  br i1 %cmp23, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %18 = load i8*, i8** %p.addr, align 8
  %19 = load i8, i8* %18, align 1
  %conv25 = sext i8 %19 to i32
  %cmp26 = icmp ne i32 %conv25, 10
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %20 = phi i1 [ false, %do.cond ], [ %cmp26, %land.rhs ]
  br i1 %20, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  br label %if.end

if.else.28:                                       ; preds = %if.else
  br label %while.end

if.end:                                           ; preds = %do.end
  br label %if.end.29

if.end.29:                                        ; preds = %if.end, %if.then
  br label %while.cond

while.end:                                        ; preds = %if.else.28, %while.cond
  %21 = load i8*, i8** %p.addr, align 8
  ret i8* %21
}

declare i64 @Perl_grok_hex(i8*, i64*, i32*, double*) #1

declare i64 @Perl_grok_oct(i8*, i64*, i32*, double*) #1

declare i64 @Perl_utf8n_to_uvuni(i8*, i64, i64*, i32) #1

declare i64 @Perl_to_uni_fold(i64, i8*, i64*) #1

; Function Attrs: nounwind uwtable
define internal void @S_reguni(%struct.RExC_state_t* %pRExC_state, i64 %uv, i8* %s, i64* %lenp) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %uv.addr = alloca i64, align 8
  %s.addr = alloca i8*, align 8
  %lenp.addr = alloca i64*, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i64 %uv, i64* %uv.addr, align 8
  store i8* %s, i8** %s.addr, align 8
  store i64* %lenp, i64** %lenp.addr, align 8
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %0, i32 0, i32 8
  %1 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %cmp = icmp eq %struct.regnode* %1, @PL_regdummy
  br i1 %cmp, label %cond.true, label %cond.false.30

cond.true:                                        ; preds = %entry
  %2 = load i64, i64* %uv.addr, align 8
  %cmp1 = icmp ult i64 %2, 128
  br i1 %cmp1, label %cond.true.2, label %cond.false

cond.true.2:                                      ; preds = %cond.true
  br label %cond.end.28

cond.false:                                       ; preds = %cond.true
  %3 = load i64, i64* %uv.addr, align 8
  %cmp3 = icmp ult i64 %3, 2048
  br i1 %cmp3, label %cond.true.4, label %cond.false.5

cond.true.4:                                      ; preds = %cond.false
  br label %cond.end.26

cond.false.5:                                     ; preds = %cond.false
  %4 = load i64, i64* %uv.addr, align 8
  %cmp6 = icmp ult i64 %4, 65536
  br i1 %cmp6, label %cond.true.7, label %cond.false.8

cond.true.7:                                      ; preds = %cond.false.5
  br label %cond.end.24

cond.false.8:                                     ; preds = %cond.false.5
  %5 = load i64, i64* %uv.addr, align 8
  %cmp9 = icmp ult i64 %5, 2097152
  br i1 %cmp9, label %cond.true.10, label %cond.false.11

cond.true.10:                                     ; preds = %cond.false.8
  br label %cond.end.22

cond.false.11:                                    ; preds = %cond.false.8
  %6 = load i64, i64* %uv.addr, align 8
  %cmp12 = icmp ult i64 %6, 67108864
  br i1 %cmp12, label %cond.true.13, label %cond.false.14

cond.true.13:                                     ; preds = %cond.false.11
  br label %cond.end.20

cond.false.14:                                    ; preds = %cond.false.11
  %7 = load i64, i64* %uv.addr, align 8
  %cmp15 = icmp ult i64 %7, 2147483648
  br i1 %cmp15, label %cond.true.16, label %cond.false.17

cond.true.16:                                     ; preds = %cond.false.14
  br label %cond.end

cond.false.17:                                    ; preds = %cond.false.14
  %8 = load i64, i64* %uv.addr, align 8
  %cmp18 = icmp ult i64 %8, 68719476736
  %cond = select i1 %cmp18, i32 7, i32 13
  br label %cond.end

cond.end:                                         ; preds = %cond.false.17, %cond.true.16
  %cond19 = phi i32 [ 6, %cond.true.16 ], [ %cond, %cond.false.17 ]
  br label %cond.end.20

cond.end.20:                                      ; preds = %cond.end, %cond.true.13
  %cond21 = phi i32 [ 5, %cond.true.13 ], [ %cond19, %cond.end ]
  br label %cond.end.22

cond.end.22:                                      ; preds = %cond.end.20, %cond.true.10
  %cond23 = phi i32 [ 4, %cond.true.10 ], [ %cond21, %cond.end.20 ]
  br label %cond.end.24

cond.end.24:                                      ; preds = %cond.end.22, %cond.true.7
  %cond25 = phi i32 [ 3, %cond.true.7 ], [ %cond23, %cond.end.22 ]
  br label %cond.end.26

cond.end.26:                                      ; preds = %cond.end.24, %cond.true.4
  %cond27 = phi i32 [ 2, %cond.true.4 ], [ %cond25, %cond.end.24 ]
  br label %cond.end.28

cond.end.28:                                      ; preds = %cond.end.26, %cond.true.2
  %cond29 = phi i32 [ 1, %cond.true.2 ], [ %cond27, %cond.end.26 ]
  %conv = sext i32 %cond29 to i64
  br label %cond.end.31

cond.false.30:                                    ; preds = %entry
  %9 = load i8*, i8** %s.addr, align 8
  %10 = load i64, i64* %uv.addr, align 8
  %call = call i8* @Perl_uvuni_to_utf8(i8* %9, i64 %10)
  %11 = load i8*, i8** %s.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %call to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %11 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  br label %cond.end.31

cond.end.31:                                      ; preds = %cond.false.30, %cond.end.28
  %cond32 = phi i64 [ %conv, %cond.end.28 ], [ %sub.ptr.sub, %cond.false.30 ]
  %12 = load i64*, i64** %lenp.addr, align 8
  store i64 %cond32, i64* %12, align 8
  ret void
}

declare %struct.sv* @Perl_sv_2mortal(%struct.sv*) #1

declare signext i8 @Perl_sv_utf8_downgrade(%struct.sv*, i8 signext) #1

declare i8* @Perl_sv_recode_to_utf8(%struct.sv*, %struct.sv*) #1

; Function Attrs: nounwind uwtable
define internal void @S_checkposixcc(%struct.RExC_state_t* %pRExC_state) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %s = alloca i8*, align 8
  %c = alloca i8, align 1
  %offset = alloca i64, align 8
  %offset104 = alloca i64, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %0, i32 0, i32 8
  %1 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %cmp = icmp eq %struct.regnode* %1, @PL_regdummy
  br i1 %cmp, label %if.end.118, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2, i32 0, i32 5
  %3 = load i8*, i8** %parse, align 8
  %4 = load i8, i8* %3, align 1
  %conv = zext i8 %4 to i32
  %cmp1 = icmp eq i32 %conv, 58
  br i1 %cmp1, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %5 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse3 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %5, i32 0, i32 5
  %6 = load i8*, i8** %parse3, align 8
  %7 = load i8, i8* %6, align 1
  %conv4 = zext i8 %7 to i32
  %cmp5 = icmp eq i32 %conv4, 61
  br i1 %cmp5, label %if.then, label %lor.lhs.false.7

lor.lhs.false.7:                                  ; preds = %lor.lhs.false
  %8 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %8, i32 0, i32 5
  %9 = load i8*, i8** %parse8, align 8
  %10 = load i8, i8* %9, align 1
  %conv9 = zext i8 %10 to i32
  %cmp10 = icmp eq i32 %conv9, 46
  br i1 %cmp10, label %if.then, label %if.end.118

if.then:                                          ; preds = %lor.lhs.false.7, %lor.lhs.false, %land.lhs.true
  %11 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse12 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %11, i32 0, i32 5
  %12 = load i8*, i8** %parse12, align 8
  store i8* %12, i8** %s, align 8
  %13 = load i8*, i8** %s, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %13, i32 1
  store i8* %incdec.ptr, i8** %s, align 8
  %14 = load i8, i8* %13, align 1
  store i8 %14, i8* %c, align 1
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %15 = load i8*, i8** %s, align 8
  %16 = load i8, i8* %15, align 1
  %conv13 = sext i8 %16 to i32
  %tobool = icmp ne i32 %conv13, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %17 = load i8*, i8** %s, align 8
  %18 = load i8, i8* %17, align 1
  %conv14 = sext i8 %18 to i32
  %cmp15 = icmp sge i32 %conv14, 65
  br i1 %cmp15, label %land.lhs.true.17, label %lor.lhs.false.21

land.lhs.true.17:                                 ; preds = %land.rhs
  %19 = load i8*, i8** %s, align 8
  %20 = load i8, i8* %19, align 1
  %conv18 = sext i8 %20 to i32
  %cmp19 = icmp sle i32 %conv18, 90
  br i1 %cmp19, label %lor.end, label %lor.lhs.false.21

lor.lhs.false.21:                                 ; preds = %land.lhs.true.17, %land.rhs
  %21 = load i8*, i8** %s, align 8
  %22 = load i8, i8* %21, align 1
  %conv22 = sext i8 %22 to i32
  %cmp23 = icmp sge i32 %conv22, 97
  br i1 %cmp23, label %land.lhs.true.25, label %lor.lhs.false.29

land.lhs.true.25:                                 ; preds = %lor.lhs.false.21
  %23 = load i8*, i8** %s, align 8
  %24 = load i8, i8* %23, align 1
  %conv26 = sext i8 %24 to i32
  %cmp27 = icmp sle i32 %conv26, 122
  br i1 %cmp27, label %lor.end, label %lor.lhs.false.29

lor.lhs.false.29:                                 ; preds = %land.lhs.true.25, %lor.lhs.false.21
  %25 = load i8*, i8** %s, align 8
  %26 = load i8, i8* %25, align 1
  %conv30 = sext i8 %26 to i32
  %cmp31 = icmp sge i32 %conv30, 48
  br i1 %cmp31, label %land.lhs.true.33, label %lor.rhs

land.lhs.true.33:                                 ; preds = %lor.lhs.false.29
  %27 = load i8*, i8** %s, align 8
  %28 = load i8, i8* %27, align 1
  %conv34 = sext i8 %28 to i32
  %cmp35 = icmp sle i32 %conv34, 57
  br i1 %cmp35, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.lhs.true.33, %lor.lhs.false.29
  %29 = load i8*, i8** %s, align 8
  %30 = load i8, i8* %29, align 1
  %conv37 = sext i8 %30 to i32
  %cmp38 = icmp eq i32 %conv37, 95
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.lhs.true.33, %land.lhs.true.25, %land.lhs.true.17
  %31 = phi i1 [ true, %land.lhs.true.33 ], [ true, %land.lhs.true.25 ], [ true, %land.lhs.true.17 ], [ %cmp38, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %while.cond
  %32 = phi i1 [ false, %while.cond ], [ %31, %lor.end ]
  br i1 %32, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %33 = load i8*, i8** %s, align 8
  %incdec.ptr40 = getelementptr inbounds i8, i8* %33, i32 1
  store i8* %incdec.ptr40, i8** %s, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %34 = load i8*, i8** %s, align 8
  %35 = load i8, i8* %34, align 1
  %conv41 = sext i8 %35 to i32
  %tobool42 = icmp ne i32 %conv41, 0
  br i1 %tobool42, label %land.lhs.true.43, label %if.end.117

land.lhs.true.43:                                 ; preds = %while.end
  %36 = load i8, i8* %c, align 1
  %conv44 = sext i8 %36 to i32
  %37 = load i8*, i8** %s, align 8
  %38 = load i8, i8* %37, align 1
  %conv45 = sext i8 %38 to i32
  %cmp46 = icmp eq i32 %conv44, %conv45
  br i1 %cmp46, label %land.lhs.true.48, label %if.end.117

land.lhs.true.48:                                 ; preds = %land.lhs.true.43
  %39 = load i8*, i8** %s, align 8
  %arrayidx = getelementptr inbounds i8, i8* %39, i64 1
  %40 = load i8, i8* %arrayidx, align 1
  %conv49 = sext i8 %40 to i32
  %cmp50 = icmp eq i32 %conv49, 93
  br i1 %cmp50, label %if.then.52, label %if.end.117

if.then.52:                                       ; preds = %land.lhs.true.48
  %41 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %41, i32 0, i32 14
  %42 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp53 = icmp ne %struct.sv* %42, null
  br i1 %cmp53, label %land.lhs.true.55, label %lor.lhs.false.68

land.lhs.true.55:                                 ; preds = %if.then.52
  %43 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings56 = getelementptr inbounds %struct.cop, %struct.cop* %43, i32 0, i32 14
  %44 = load %struct.sv*, %struct.sv** %cop_warnings56, align 8
  %cmp57 = icmp ne %struct.sv* %44, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp57, label %land.lhs.true.59, label %lor.lhs.false.68

land.lhs.true.59:                                 ; preds = %land.lhs.true.55
  %45 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings60 = getelementptr inbounds %struct.cop, %struct.cop* %45, i32 0, i32 14
  %46 = load %struct.sv*, %struct.sv** %cop_warnings60, align 8
  %cmp61 = icmp eq %struct.sv* %46, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp61, label %if.then.76, label %lor.lhs.false.63

lor.lhs.false.63:                                 ; preds = %land.lhs.true.59
  %47 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings64 = getelementptr inbounds %struct.cop, %struct.cop* %47, i32 0, i32 14
  %48 = load %struct.sv*, %struct.sv** %cop_warnings64, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 0
  %49 = load i8*, i8** %sv_any, align 8
  %50 = bitcast i8* %49 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %50, i32 0, i32 0
  %51 = load i8*, i8** %xpv_pv, align 8
  %arrayidx65 = getelementptr inbounds i8, i8* %51, i64 5
  %52 = load i8, i8* %arrayidx65, align 1
  %conv66 = sext i8 %52 to i32
  %and = and i32 %conv66, 1
  %tobool67 = icmp ne i32 %and, 0
  br i1 %tobool67, label %if.then.76, label %lor.lhs.false.68

lor.lhs.false.68:                                 ; preds = %lor.lhs.false.63, %land.lhs.true.55, %if.then.52
  %53 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings69 = getelementptr inbounds %struct.cop, %struct.cop* %53, i32 0, i32 14
  %54 = load %struct.sv*, %struct.sv** %cop_warnings69, align 8
  %cmp70 = icmp eq %struct.sv* %54, null
  br i1 %cmp70, label %land.lhs.true.72, label %if.end

land.lhs.true.72:                                 ; preds = %lor.lhs.false.68
  %55 = load i8, i8* @PL_dowarn, align 1
  %conv73 = zext i8 %55 to i32
  %and74 = and i32 %conv73, 1
  %tobool75 = icmp ne i32 %and74, 0
  br i1 %tobool75, label %if.then.76, label %if.end

if.then.76:                                       ; preds = %land.lhs.true.72, %lor.lhs.false.63, %land.lhs.true.59
  %56 = load i8*, i8** %s, align 8
  %add.ptr = getelementptr inbounds i8, i8* %56, i64 2
  %57 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %57, i32 0, i32 1
  %58 = load i8*, i8** %precomp, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %add.ptr to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %58 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %offset, align 8
  %59 = load i8, i8* %c, align 1
  %conv77 = sext i8 %59 to i32
  %60 = load i8, i8* %c, align 1
  %conv78 = sext i8 %60 to i32
  %61 = load i64, i64* %offset, align 8
  %conv79 = trunc i64 %61 to i32
  %62 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp80 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %62, i32 0, i32 1
  %63 = load i8*, i8** %precomp80, align 8
  %64 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp81 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %64, i32 0, i32 1
  %65 = load i8*, i8** %precomp81, align 8
  %66 = load i64, i64* %offset, align 8
  %add.ptr82 = getelementptr inbounds i8, i8* %65, i64 %66
  call void (i32, i8*, ...) @Perl_warner(i32 20, i8* getelementptr inbounds ([106 x i8], [106 x i8]* @.str.84, i32 0, i32 0), i32 %conv77, i32 %conv78, i32 %conv79, i8* %63, i8* %add.ptr82)
  br label %if.end

if.end:                                           ; preds = %if.then.76, %land.lhs.true.72, %lor.lhs.false.68
  %67 = load i8, i8* %c, align 1
  %conv83 = sext i8 %67 to i32
  %cmp84 = icmp eq i32 %conv83, 61
  br i1 %cmp84, label %if.then.90, label %lor.lhs.false.86

lor.lhs.false.86:                                 ; preds = %if.end
  %68 = load i8, i8* %c, align 1
  %conv87 = sext i8 %68 to i32
  %cmp88 = icmp eq i32 %conv87, 46
  br i1 %cmp88, label %if.then.90, label %if.end.116

if.then.90:                                       ; preds = %lor.lhs.false.86, %if.end
  br label %while.cond.91

while.cond.91:                                    ; preds = %while.body.102, %if.then.90
  %69 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse92 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %69, i32 0, i32 5
  %70 = load i8*, i8** %parse92, align 8
  %71 = load i8, i8* %70, align 1
  %conv93 = zext i8 %71 to i32
  %tobool94 = icmp ne i32 %conv93, 0
  br i1 %tobool94, label %land.rhs.95, label %land.end.101

land.rhs.95:                                      ; preds = %while.cond.91
  %72 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse96 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %72, i32 0, i32 5
  %73 = load i8*, i8** %parse96, align 8
  %incdec.ptr97 = getelementptr inbounds i8, i8* %73, i32 1
  store i8* %incdec.ptr97, i8** %parse96, align 8
  %74 = load i8, i8* %73, align 1
  %conv98 = zext i8 %74 to i32
  %cmp99 = icmp ne i32 %conv98, 93
  br label %land.end.101

land.end.101:                                     ; preds = %land.rhs.95, %while.cond.91
  %75 = phi i1 [ false, %while.cond.91 ], [ %cmp99, %land.rhs.95 ]
  br i1 %75, label %while.body.102, label %while.end.103

while.body.102:                                   ; preds = %land.end.101
  br label %while.cond.91

while.end.103:                                    ; preds = %land.end.101
  %76 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse105 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %76, i32 0, i32 5
  %77 = load i8*, i8** %parse105, align 8
  %78 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp106 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %78, i32 0, i32 1
  %79 = load i8*, i8** %precomp106, align 8
  %sub.ptr.lhs.cast107 = ptrtoint i8* %77 to i64
  %sub.ptr.rhs.cast108 = ptrtoint i8* %79 to i64
  %sub.ptr.sub109 = sub i64 %sub.ptr.lhs.cast107, %sub.ptr.rhs.cast108
  store i64 %sub.ptr.sub109, i64* %offset104, align 8
  %80 = load i8, i8* %c, align 1
  %conv110 = sext i8 %80 to i32
  %81 = load i8, i8* %c, align 1
  %conv111 = sext i8 %81 to i32
  %82 = load i64, i64* %offset104, align 8
  %conv112 = trunc i64 %82 to i32
  %83 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp113 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %83, i32 0, i32 1
  %84 = load i8*, i8** %precomp113, align 8
  %85 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp114 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %85, i32 0, i32 1
  %86 = load i8*, i8** %precomp114, align 8
  %87 = load i64, i64* %offset104, align 8
  %add.ptr115 = getelementptr inbounds i8, i8* %86, i64 %87
  call void (i8*, i8*, ...) @S_re_croak2(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.85, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.16, i32 0, i32 0), i32 %conv110, i32 %conv111, i32 %conv112, i8* %84, i8* %add.ptr115)
  br label %if.end.116

if.end.116:                                       ; preds = %while.end.103, %lor.lhs.false.86
  br label %if.end.117

if.end.117:                                       ; preds = %if.end.116, %land.lhs.true.48, %land.lhs.true.43, %while.end
  br label %if.end.118

if.end.118:                                       ; preds = %if.end.117, %lor.lhs.false.7, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @S_regpposixcc(%struct.RExC_state_t* %pRExC_state, i32 %value) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %value.addr = alloca i32, align 4
  %posixcc = alloca i8*, align 8
  %namedclass = alloca i32, align 4
  %c = alloca i8, align 1
  %s = alloca i8*, align 8
  %t = alloca i8*, align 8
  %complement = alloca i32, align 4
  %skip = alloca i32, align 4
  %offset = alloca i64, align 8
  %offset184 = alloca i64, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i32 %value, i32* %value.addr, align 4
  store i8* null, i8** %posixcc, align 8
  store i32 -1, i32* %namedclass, align 4
  %0 = load i32, i32* %value.addr, align 4
  %cmp = icmp eq i32 %0, 91
  br i1 %cmp, label %land.lhs.true, label %if.end.202

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1, i32 0, i32 5
  %2 = load i8*, i8** %parse, align 8
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 1
  %3 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %3, i32 0, i32 4
  %4 = load i8*, i8** %end, align 8
  %cmp1 = icmp ult i8* %add.ptr, %4
  br i1 %cmp1, label %land.lhs.true.2, label %if.end.202

land.lhs.true.2:                                  ; preds = %land.lhs.true
  %5 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse3 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %5, i32 0, i32 5
  %6 = load i8*, i8** %parse3, align 8
  %7 = load i8, i8* %6, align 1
  %conv = zext i8 %7 to i32
  %cmp4 = icmp eq i32 %conv, 58
  br i1 %cmp4, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.2
  %8 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse6 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %8, i32 0, i32 5
  %9 = load i8*, i8** %parse6, align 8
  %10 = load i8, i8* %9, align 1
  %conv7 = zext i8 %10 to i32
  %cmp8 = icmp eq i32 %conv7, 61
  br i1 %cmp8, label %if.then, label %lor.lhs.false.10

lor.lhs.false.10:                                 ; preds = %lor.lhs.false
  %11 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse11 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %11, i32 0, i32 5
  %12 = load i8*, i8** %parse11, align 8
  %13 = load i8, i8* %12, align 1
  %conv12 = zext i8 %13 to i32
  %cmp13 = icmp eq i32 %conv12, 46
  br i1 %cmp13, label %if.then, label %if.end.202

if.then:                                          ; preds = %lor.lhs.false.10, %lor.lhs.false, %land.lhs.true.2
  %14 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse15 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %14, i32 0, i32 5
  %15 = load i8*, i8** %parse15, align 8
  %16 = load i8, i8* %15, align 1
  %conv16 = zext i8 %16 to i32
  %conv17 = trunc i32 %conv16 to i8
  store i8 %conv17, i8* %c, align 1
  %17 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse18 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %17, i32 0, i32 5
  %18 = load i8*, i8** %parse18, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr, i8** %parse18, align 8
  store i8* %18, i8** %s, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %19 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse19 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %19, i32 0, i32 5
  %20 = load i8*, i8** %parse19, align 8
  %21 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end20 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %21, i32 0, i32 4
  %22 = load i8*, i8** %end20, align 8
  %cmp21 = icmp ult i8* %20, %22
  br i1 %cmp21, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %23 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse23 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %23, i32 0, i32 5
  %24 = load i8*, i8** %parse23, align 8
  %25 = load i8, i8* %24, align 1
  %conv24 = zext i8 %25 to i32
  %26 = load i8, i8* %c, align 1
  %conv25 = sext i8 %26 to i32
  %cmp26 = icmp ne i32 %conv24, %conv25
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %27 = phi i1 [ false, %while.cond ], [ %cmp26, %land.rhs ]
  br i1 %27, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %28 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse28 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %28, i32 0, i32 5
  %29 = load i8*, i8** %parse28, align 8
  %incdec.ptr29 = getelementptr inbounds i8, i8* %29, i32 1
  store i8* %incdec.ptr29, i8** %parse28, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %30 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse30 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %30, i32 0, i32 5
  %31 = load i8*, i8** %parse30, align 8
  %32 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end31 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %32, i32 0, i32 4
  %33 = load i8*, i8** %end31, align 8
  %cmp32 = icmp eq i8* %31, %33
  br i1 %cmp32, label %if.then.34, label %if.else

if.then.34:                                       ; preds = %while.end
  %34 = load i8*, i8** %s, align 8
  %35 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse35 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %35, i32 0, i32 5
  store i8* %34, i8** %parse35, align 8
  br label %if.end.201

if.else:                                          ; preds = %while.end
  %36 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse36 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %36, i32 0, i32 5
  %37 = load i8*, i8** %parse36, align 8
  %incdec.ptr37 = getelementptr inbounds i8, i8* %37, i32 1
  store i8* %incdec.ptr37, i8** %parse36, align 8
  store i8* %37, i8** %t, align 8
  %38 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse38 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %38, i32 0, i32 5
  %39 = load i8*, i8** %parse38, align 8
  %40 = load i8, i8* %39, align 1
  %conv39 = zext i8 %40 to i32
  %cmp40 = icmp eq i32 %conv39, 93
  br i1 %cmp40, label %if.then.42, label %if.else.198

if.then.42:                                       ; preds = %if.else
  %41 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse43 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %41, i32 0, i32 5
  %42 = load i8*, i8** %parse43, align 8
  %incdec.ptr44 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %incdec.ptr44, i8** %parse43, align 8
  %43 = load i8*, i8** %s, align 8
  %add.ptr45 = getelementptr inbounds i8, i8* %43, i64 1
  store i8* %add.ptr45, i8** %posixcc, align 8
  %44 = load i8*, i8** %s, align 8
  %45 = load i8, i8* %44, align 1
  %conv46 = sext i8 %45 to i32
  %cmp47 = icmp eq i32 %conv46, 58
  br i1 %cmp47, label %if.then.49, label %if.else.166

if.then.49:                                       ; preds = %if.then.42
  %46 = load i8*, i8** %posixcc, align 8
  %47 = load i8, i8* %46, align 1
  %conv50 = sext i8 %47 to i32
  %cmp51 = icmp eq i32 %conv50, 94
  br i1 %cmp51, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.49
  %48 = load i8*, i8** %posixcc, align 8
  %incdec.ptr53 = getelementptr inbounds i8, i8* %48, i32 1
  store i8* %incdec.ptr53, i8** %posixcc, align 8
  %49 = load i8, i8* %48, align 1
  %conv54 = sext i8 %49 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.then.49
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv54, %cond.true ], [ 0, %cond.false ]
  store i32 %cond, i32* %complement, align 4
  %50 = load i8*, i8** %t, align 8
  %51 = load i8*, i8** %posixcc, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %50 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %51 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv55 = trunc i64 %sub.ptr.sub to i32
  store i32 %conv55, i32* %skip, align 4
  %52 = load i32, i32* %skip, align 4
  switch i32 %52, label %sw.epilog.149 [
    i32 4, label %sw.bb
    i32 5, label %sw.bb.59
    i32 6, label %sw.bb.142
  ]

sw.bb:                                            ; preds = %cond.end
  %53 = load i8*, i8** %posixcc, align 8
  %call = call i32 @memcmp(i8* %53, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.86, i32 0, i32 0), i64 4)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then.56

if.then.56:                                       ; preds = %sw.bb
  %54 = load i32, i32* %complement, align 4
  %tobool57 = icmp ne i32 %54, 0
  %cond58 = select i1 %tobool57, i32 1, i32 0
  store i32 %cond58, i32* %namedclass, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.56, %sw.bb
  br label %sw.epilog.149

sw.bb.59:                                         ; preds = %cond.end
  %55 = load i8*, i8** %posixcc, align 8
  %arrayidx = getelementptr inbounds i8, i8* %55, i64 4
  %56 = load i8, i8* %arrayidx, align 1
  %conv60 = sext i8 %56 to i32
  switch i32 %conv60, label %sw.epilog [
    i32 97, label %sw.bb.61
    i32 101, label %sw.bb.68
    i32 104, label %sw.bb.75
    i32 105, label %sw.bb.82
    i32 107, label %sw.bb.89
    i32 108, label %sw.bb.96
    i32 109, label %sw.bb.103
    i32 114, label %sw.bb.110
    i32 116, label %sw.bb.123
  ]

sw.bb.61:                                         ; preds = %sw.bb.59
  %57 = load i8*, i8** %posixcc, align 8
  %call62 = call i32 @memcmp(i8* %57, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.87, i32 0, i32 0), i64 4)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %if.end.67, label %if.then.64

if.then.64:                                       ; preds = %sw.bb.61
  %58 = load i32, i32* %complement, align 4
  %tobool65 = icmp ne i32 %58, 0
  %cond66 = select i1 %tobool65, i32 9, i32 8
  store i32 %cond66, i32* %namedclass, align 4
  br label %if.end.67

if.end.67:                                        ; preds = %if.then.64, %sw.bb.61
  br label %sw.epilog

sw.bb.68:                                         ; preds = %sw.bb.59
  %59 = load i8*, i8** %posixcc, align 8
  %call69 = call i32 @memcmp(i8* %59, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.88, i32 0, i32 0), i64 4)
  %tobool70 = icmp ne i32 %call69, 0
  br i1 %tobool70, label %if.end.74, label %if.then.71

if.then.71:                                       ; preds = %sw.bb.68
  %60 = load i32, i32* %complement, align 4
  %tobool72 = icmp ne i32 %60, 0
  %cond73 = select i1 %tobool72, i32 27, i32 26
  store i32 %cond73, i32* %namedclass, align 4
  br label %if.end.74

if.end.74:                                        ; preds = %if.then.71, %sw.bb.68
  br label %sw.epilog

sw.bb.75:                                         ; preds = %sw.bb.59
  %61 = load i8*, i8** %posixcc, align 8
  %call76 = call i32 @memcmp(i8* %61, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.89, i32 0, i32 0), i64 4)
  %tobool77 = icmp ne i32 %call76, 0
  br i1 %tobool77, label %if.end.81, label %if.then.78

if.then.78:                                       ; preds = %sw.bb.75
  %62 = load i32, i32* %complement, align 4
  %tobool79 = icmp ne i32 %62, 0
  %cond80 = select i1 %tobool79, i32 15, i32 14
  store i32 %cond80, i32* %namedclass, align 4
  br label %if.end.81

if.end.81:                                        ; preds = %if.then.78, %sw.bb.75
  br label %sw.epilog

sw.bb.82:                                         ; preds = %sw.bb.59
  %63 = load i8*, i8** %posixcc, align 8
  %call83 = call i32 @memcmp(i8* %63, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.90, i32 0, i32 0), i64 4)
  %tobool84 = icmp ne i32 %call83, 0
  br i1 %tobool84, label %if.end.88, label %if.then.85

if.then.85:                                       ; preds = %sw.bb.82
  %64 = load i32, i32* %complement, align 4
  %tobool86 = icmp ne i32 %64, 0
  %cond87 = select i1 %tobool86, i32 11, i32 10
  store i32 %cond87, i32* %namedclass, align 4
  br label %if.end.88

if.end.88:                                        ; preds = %if.then.85, %sw.bb.82
  br label %sw.epilog

sw.bb.89:                                         ; preds = %sw.bb.59
  %65 = load i8*, i8** %posixcc, align 8
  %call90 = call i32 @memcmp(i8* %65, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.91, i32 0, i32 0), i64 4)
  %tobool91 = icmp ne i32 %call90, 0
  br i1 %tobool91, label %if.end.95, label %if.then.92

if.then.92:                                       ; preds = %sw.bb.89
  %66 = load i32, i32* %complement, align 4
  %tobool93 = icmp ne i32 %66, 0
  %cond94 = select i1 %tobool93, i32 29, i32 28
  store i32 %cond94, i32* %namedclass, align 4
  br label %if.end.95

if.end.95:                                        ; preds = %if.then.92, %sw.bb.89
  br label %sw.epilog

sw.bb.96:                                         ; preds = %sw.bb.59
  %67 = load i8*, i8** %posixcc, align 8
  %call97 = call i32 @memcmp(i8* %67, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.92, i32 0, i32 0), i64 4)
  %tobool98 = icmp ne i32 %call97, 0
  br i1 %tobool98, label %if.end.102, label %if.then.99

if.then.99:                                       ; preds = %sw.bb.96
  %68 = load i32, i32* %complement, align 4
  %tobool100 = icmp ne i32 %68, 0
  %cond101 = select i1 %tobool100, i32 13, i32 12
  store i32 %cond101, i32* %namedclass, align 4
  br label %if.end.102

if.end.102:                                       ; preds = %if.then.99, %sw.bb.96
  br label %sw.epilog

sw.bb.103:                                        ; preds = %sw.bb.59
  %69 = load i8*, i8** %posixcc, align 8
  %call104 = call i32 @memcmp(i8* %69, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.93, i32 0, i32 0), i64 4)
  %tobool105 = icmp ne i32 %call104, 0
  br i1 %tobool105, label %if.end.109, label %if.then.106

if.then.106:                                      ; preds = %sw.bb.103
  %70 = load i32, i32* %complement, align 4
  %tobool107 = icmp ne i32 %70, 0
  %cond108 = select i1 %tobool107, i32 7, i32 6
  store i32 %cond108, i32* %namedclass, align 4
  br label %if.end.109

if.end.109:                                       ; preds = %if.then.106, %sw.bb.103
  br label %sw.epilog

sw.bb.110:                                        ; preds = %sw.bb.59
  %71 = load i8*, i8** %posixcc, align 8
  %call111 = call i32 @memcmp(i8* %71, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.94, i32 0, i32 0), i64 4)
  %tobool112 = icmp ne i32 %call111, 0
  br i1 %tobool112, label %if.end.116, label %if.then.113

if.then.113:                                      ; preds = %sw.bb.110
  %72 = load i32, i32* %complement, align 4
  %tobool114 = icmp ne i32 %72, 0
  %cond115 = select i1 %tobool114, i32 17, i32 16
  store i32 %cond115, i32* %namedclass, align 4
  br label %if.end.116

if.end.116:                                       ; preds = %if.then.113, %sw.bb.110
  %73 = load i8*, i8** %posixcc, align 8
  %call117 = call i32 @memcmp(i8* %73, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.95, i32 0, i32 0), i64 4)
  %tobool118 = icmp ne i32 %call117, 0
  br i1 %tobool118, label %if.end.122, label %if.then.119

if.then.119:                                      ; preds = %if.end.116
  %74 = load i32, i32* %complement, align 4
  %tobool120 = icmp ne i32 %74, 0
  %cond121 = select i1 %tobool120, i32 23, i32 22
  store i32 %cond121, i32* %namedclass, align 4
  br label %if.end.122

if.end.122:                                       ; preds = %if.then.119, %if.end.116
  br label %sw.epilog

sw.bb.123:                                        ; preds = %sw.bb.59
  %75 = load i8*, i8** %posixcc, align 8
  %call124 = call i32 @memcmp(i8* %75, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.96, i32 0, i32 0), i64 4)
  %tobool125 = icmp ne i32 %call124, 0
  br i1 %tobool125, label %if.end.129, label %if.then.126

if.then.126:                                      ; preds = %sw.bb.123
  %76 = load i32, i32* %complement, align 4
  %tobool127 = icmp ne i32 %76, 0
  %cond128 = select i1 %tobool127, i32 5, i32 4
  store i32 %cond128, i32* %namedclass, align 4
  br label %if.end.129

if.end.129:                                       ; preds = %if.then.126, %sw.bb.123
  %77 = load i8*, i8** %posixcc, align 8
  %call130 = call i32 @memcmp(i8* %77, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.97, i32 0, i32 0), i64 4)
  %tobool131 = icmp ne i32 %call130, 0
  br i1 %tobool131, label %if.end.135, label %if.then.132

if.then.132:                                      ; preds = %if.end.129
  %78 = load i32, i32* %complement, align 4
  %tobool133 = icmp ne i32 %78, 0
  %cond134 = select i1 %tobool133, i32 19, i32 18
  store i32 %cond134, i32* %namedclass, align 4
  br label %if.end.135

if.end.135:                                       ; preds = %if.then.132, %if.end.129
  %79 = load i8*, i8** %posixcc, align 8
  %call136 = call i32 @memcmp(i8* %79, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.98, i32 0, i32 0), i64 4)
  %tobool137 = icmp ne i32 %call136, 0
  br i1 %tobool137, label %if.end.141, label %if.then.138

if.then.138:                                      ; preds = %if.end.135
  %80 = load i32, i32* %complement, align 4
  %tobool139 = icmp ne i32 %80, 0
  %cond140 = select i1 %tobool139, i32 21, i32 20
  store i32 %cond140, i32* %namedclass, align 4
  br label %if.end.141

if.end.141:                                       ; preds = %if.then.138, %if.end.135
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb.59, %if.end.141, %if.end.122, %if.end.109, %if.end.102, %if.end.95, %if.end.88, %if.end.81, %if.end.74, %if.end.67
  br label %sw.epilog.149

sw.bb.142:                                        ; preds = %cond.end
  %81 = load i8*, i8** %posixcc, align 8
  %call143 = call i32 @memcmp(i8* %81, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.99, i32 0, i32 0), i64 6)
  %tobool144 = icmp ne i32 %call143, 0
  br i1 %tobool144, label %if.end.148, label %if.then.145

if.then.145:                                      ; preds = %sw.bb.142
  %82 = load i32, i32* %complement, align 4
  %tobool146 = icmp ne i32 %82, 0
  %cond147 = select i1 %tobool146, i32 25, i32 24
  store i32 %cond147, i32* %namedclass, align 4
  br label %if.end.148

if.end.148:                                       ; preds = %if.then.145, %sw.bb.142
  br label %sw.epilog.149

sw.epilog.149:                                    ; preds = %cond.end, %if.end.148, %sw.epilog, %if.end
  %83 = load i32, i32* %namedclass, align 4
  %cmp150 = icmp eq i32 %83, -1
  br i1 %cmp150, label %if.then.152, label %if.end.165

if.then.152:                                      ; preds = %sw.epilog.149
  %84 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse153 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %84, i32 0, i32 5
  %85 = load i8*, i8** %parse153, align 8
  %86 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %86, i32 0, i32 1
  %87 = load i8*, i8** %precomp, align 8
  %sub.ptr.lhs.cast154 = ptrtoint i8* %85 to i64
  %sub.ptr.rhs.cast155 = ptrtoint i8* %87 to i64
  %sub.ptr.sub156 = sub i64 %sub.ptr.lhs.cast154, %sub.ptr.rhs.cast155
  store i64 %sub.ptr.sub156, i64* %offset, align 8
  %88 = load i8*, i8** %t, align 8
  %89 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast157 = ptrtoint i8* %88 to i64
  %sub.ptr.rhs.cast158 = ptrtoint i8* %89 to i64
  %sub.ptr.sub159 = sub i64 %sub.ptr.lhs.cast157, %sub.ptr.rhs.cast158
  %sub = sub nsw i64 %sub.ptr.sub159, 1
  %90 = load i8*, i8** %s, align 8
  %add.ptr160 = getelementptr inbounds i8, i8* %90, i64 1
  %91 = load i64, i64* %offset, align 8
  %conv161 = trunc i64 %91 to i32
  %92 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp162 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %92, i32 0, i32 1
  %93 = load i8*, i8** %precomp162, align 8
  %94 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp163 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %94, i32 0, i32 1
  %95 = load i8*, i8** %precomp163, align 8
  %96 = load i64, i64* %offset, align 8
  %add.ptr164 = getelementptr inbounds i8, i8* %95, i64 %96
  call void (i8*, i8*, ...) @S_re_croak2(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.100, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.16, i32 0, i32 0), i64 %sub, i8* %add.ptr160, i32 %conv161, i8* %93, i8* %add.ptr164)
  br label %if.end.165

if.end.165:                                       ; preds = %if.then.152, %sw.epilog.149
  br label %if.end.197

if.else.166:                                      ; preds = %if.then.42
  %97 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %97, i32 0, i32 8
  %98 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %cmp167 = icmp eq %struct.regnode* %98, @PL_regdummy
  br i1 %cmp167, label %if.end.196, label %if.then.169

if.then.169:                                      ; preds = %if.else.166
  br label %while.cond.170

while.cond.170:                                   ; preds = %while.body.180, %if.then.169
  %99 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse171 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %99, i32 0, i32 5
  %100 = load i8*, i8** %parse171, align 8
  %101 = load i8, i8* %100, align 1
  %conv172 = zext i8 %101 to i32
  %tobool173 = icmp ne i32 %conv172, 0
  br i1 %tobool173, label %land.rhs.174, label %land.end.179

land.rhs.174:                                     ; preds = %while.cond.170
  %102 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse175 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %102, i32 0, i32 5
  %103 = load i8*, i8** %parse175, align 8
  %104 = load i8, i8* %103, align 1
  %conv176 = zext i8 %104 to i32
  %cmp177 = icmp ne i32 %conv176, 93
  br label %land.end.179

land.end.179:                                     ; preds = %land.rhs.174, %while.cond.170
  %105 = phi i1 [ false, %while.cond.170 ], [ %cmp177, %land.rhs.174 ]
  br i1 %105, label %while.body.180, label %while.end.183

while.body.180:                                   ; preds = %land.end.179
  %106 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse181 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %106, i32 0, i32 5
  %107 = load i8*, i8** %parse181, align 8
  %incdec.ptr182 = getelementptr inbounds i8, i8* %107, i32 1
  store i8* %incdec.ptr182, i8** %parse181, align 8
  br label %while.cond.170

while.end.183:                                    ; preds = %land.end.179
  %108 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse185 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %108, i32 0, i32 5
  %109 = load i8*, i8** %parse185, align 8
  %110 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp186 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %110, i32 0, i32 1
  %111 = load i8*, i8** %precomp186, align 8
  %sub.ptr.lhs.cast187 = ptrtoint i8* %109 to i64
  %sub.ptr.rhs.cast188 = ptrtoint i8* %111 to i64
  %sub.ptr.sub189 = sub i64 %sub.ptr.lhs.cast187, %sub.ptr.rhs.cast188
  store i64 %sub.ptr.sub189, i64* %offset184, align 8
  %112 = load i8, i8* %c, align 1
  %conv190 = sext i8 %112 to i32
  %113 = load i8, i8* %c, align 1
  %conv191 = sext i8 %113 to i32
  %114 = load i64, i64* %offset184, align 8
  %conv192 = trunc i64 %114 to i32
  %115 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp193 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %115, i32 0, i32 1
  %116 = load i8*, i8** %precomp193, align 8
  %117 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp194 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %117, i32 0, i32 1
  %118 = load i8*, i8** %precomp194, align 8
  %119 = load i64, i64* %offset184, align 8
  %add.ptr195 = getelementptr inbounds i8, i8* %118, i64 %119
  call void (i8*, i8*, ...) @S_re_croak2(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.85, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.16, i32 0, i32 0), i32 %conv190, i32 %conv191, i32 %conv192, i8* %116, i8* %add.ptr195)
  br label %if.end.196

if.end.196:                                       ; preds = %while.end.183, %if.else.166
  br label %if.end.197

if.end.197:                                       ; preds = %if.end.196, %if.end.165
  br label %if.end.200

if.else.198:                                      ; preds = %if.else
  %120 = load i8*, i8** %s, align 8
  %121 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse199 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %121, i32 0, i32 5
  store i8* %120, i8** %parse199, align 8
  br label %if.end.200

if.end.200:                                       ; preds = %if.else.198, %if.end.197
  br label %if.end.201

if.end.201:                                       ; preds = %if.end.200, %if.then.34
  br label %if.end.202

if.end.202:                                       ; preds = %if.end.201, %lor.lhs.false.10, %land.lhs.true, %entry
  %122 = load i32, i32* %namedclass, align 4
  ret i32 %122
}

declare void @Perl_sv_catpvf(%struct.sv*, i8*, ...) #1

declare %struct.av* @Perl_newAV() #1

declare void @Perl_av_push(%struct.av*, %struct.sv*) #1

declare %struct.sv** @Perl_av_store(%struct.av*, i32, %struct.sv*) #1

declare %struct.sv* @Perl_newRV_noinc(%struct.sv*) #1

declare i8* @Perl_uvuni_to_utf8(i8*, i64) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
