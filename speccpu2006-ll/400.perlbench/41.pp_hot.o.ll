; ModuleID = 'pp_hot.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sv = type { i8*, i32, i32 }
%struct.op = type { %struct.op*, %struct.op*, {}*, i64, i16, i16, i8, i8 }
%struct.cop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i16, i8, i8, i8*, %struct.hv*, %struct.gv*, i32, i32, i32, %struct.sv*, %struct.sv* }
%struct.hv = type { %struct.xpvhv*, i32, i32 }
%struct.xpvhv = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, i32, %struct.he*, %struct.pmop*, i8* }
%struct.magic = type { %struct.magic*, %struct.mgvtbl*, i16, i8, i8, %struct.sv*, i8*, i32 }
%struct.mgvtbl = type { i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*, %struct.sv*, i8*, i32)*, i32 (%struct.magic*, %struct.clone_params*)* }
%struct.clone_params = type { %struct.av*, i64, %struct.interpreter* }
%struct.av = type { %struct.xpvav*, i32, i32 }
%struct.xpvav = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, %struct.sv**, %struct.sv*, i8 }
%struct.interpreter = type { i8 }
%struct.he = type { %struct.he*, %struct.hek*, %struct.sv* }
%struct.hek = type { i32, i32, [1 x i8] }
%struct.pmop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i16, i8, i8, %struct.op*, %struct.op*, %struct.op*, %struct.op*, %struct.pmop*, %struct.regexp*, i32, i32, i8, %struct.hv* }
%struct.regexp = type { i32*, i32*, %struct.regnode*, %struct.reg_substr_data*, i8*, %struct.reg_data*, i8*, i32*, i32, i32, i32, i32, i32, i32, i32, i32, [1 x %struct.regnode] }
%struct.regnode = type { i8, i8, i16 }
%struct.reg_substr_data = type opaque
%struct.reg_data = type opaque
%struct.gv = type { %struct.xpvgv*, i32, i32 }
%struct.xpvgv = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, %struct.gp*, i8*, i64, %struct.hv*, i8 }
%struct.gp = type { %struct.sv*, i32, %struct.io*, %struct.cv*, %struct.av*, %struct.hv*, %struct.gv*, %struct.cv*, i32, i32, i32, i8* }
%struct.io = type { %struct.xpvio*, i32, i32 }
%struct.xpvio = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, %struct._PerlIO**, %struct._PerlIO**, %union.anon, i64, i64, i64, i64, i8*, %struct.gv*, i8*, %struct.gv*, i8*, %struct.gv*, i16, i8, i8 }
%struct._PerlIO = type opaque
%union.anon = type { %struct.__dirstream* }
%struct.__dirstream = type opaque
%struct.cv = type { %struct.xpvcv*, i32, i32 }
%struct.xpvcv = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, %struct.hv*, %struct.op*, %struct.op*, void (%struct.cv*)*, %union.any, %struct.gv*, i8*, i64, %struct.av*, %struct.cv*, i16, i32 }
%union.any = type { i8* }
%struct.stackinfo = type { %struct.av*, %struct.context*, i32, i32, i32, %struct.stackinfo*, %struct.stackinfo*, i32 }
%struct.context = type { i32, %union.anon.0 }
%union.anon.0 = type { %struct.block }
%struct.block = type { i32, %struct.cop*, i32, i32, i32, %struct.pmop*, i8, %union.anon.1 }
%union.anon.1 = type { %struct.block_loop }
%struct.block_loop = type { i8*, i32, %struct.op*, %struct.op*, %struct.op*, %struct.sv**, %struct.sv*, %struct.sv*, %struct.av*, i64, i64 }
%struct.xpv = type { i8*, i64, i64 }
%struct.re_scream_pos_data_s = type opaque
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.svop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i16, i8, i8, %struct.sv* }
%struct.xpviv = type { i8*, i64, i64, i64 }
%struct.xpvnv = type { i8*, i64, i64, i64, double }
%struct.logop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i16, i8, i8, %struct.op*, %struct.op* }
%struct.xrv = type { %struct.sv* }
%struct.xpvuv = type { i8*, i64, i64, i64 }
%struct.binop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i16, i8, i8, %struct.op*, %struct.op* }
%struct.listop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i16, i8, i8, %struct.op*, %struct.op* }
%struct.xpvmg = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv* }
%struct.xpvlv = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, i64, i64, %struct.sv*, i8 }
%struct.subst = type { i32, i32, i32, i32, i8, i8, i8*, %struct.sv*, %struct.sv*, i8*, i8*, i8*, i8*, %struct.regexp* }
%struct.block_sub = type { %struct.cv*, %struct.gv*, %struct.gv*, %struct.av*, %struct.av*, i64, i8, i8, %struct.av* }

@PL_stack_sp = external global %struct.sv**, align 8
@PL_stack_max = external global %struct.sv**, align 8
@PL_op = external global %struct.op*, align 8
@PL_curcop = external global %struct.cop*, align 8
@PL_tainted = external global i8, align 1
@PL_stack_base = external global %struct.sv**, align 8
@PL_curstackinfo = external global %struct.stackinfo*, align 8
@PL_tmps_ix = external global i32, align 4
@PL_tmps_floor = external global i32, align 4
@PL_markstack_ptr = external global i32*, align 8
@PL_markstack_max = external global i32*, align 8
@PL_curpad = external global %struct.sv**, align 8
@PL_Xpv = external global %struct.xpv*, align 8
@PL_tainting = external global i8, align 1
@PL_Sv = external global %struct.sv*, align 8
@PL_scopestack_ix = external global i32, align 4
@PL_scopestack = external global i32*, align 8
@PL_savestack_ix = external global i32, align 4
@PL_amagic_generation = external global i64, align 8
@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@PL_sv_undef = external global %struct.sv, align 8
@PL_last_in_gv = external global %struct.gv*, align 8
@PL_sv_yes = external global %struct.sv, align 8
@PL_sv_no = external global %struct.sv, align 8
@PL_no_modify = external constant [0 x i8], align 1
@PL_defoutgv = external global %struct.gv*, align 8
@.str.1 = private unnamed_addr constant [6 x i8] c"PRINT\00", align 1
@PL_dowarn = external global i8, align 1
@PL_ofs_sv = external global %struct.sv*, align 8
@PL_ors_sv = external global %struct.sv*, align 8
@.str.2 = private unnamed_addr constant [50 x i8] c"Overloaded dereference did not return a reference\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"Not an ARRAY reference\00", align 1
@.str.4 = private unnamed_addr constant [44 x i8] c"Can't return array to lvalue scalar context\00", align 1
@PL_no_localize_ref = external constant [0 x i8], align 1
@PL_no_usym = external constant [0 x i8], align 1
@.str.5 = private unnamed_addr constant [9 x i8] c"an ARRAY\00", align 1
@PL_no_symref = external constant [0 x i8], align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"Not a HASH reference\00", align 1
@.str.7 = private unnamed_addr constant [43 x i8] c"Can't return hash to lvalue scalar context\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"a HASH\00", align 1
@PL_delaymagic = external global i32, align 4
@PL_tmps_max = external global i32, align 4
@PL_sv_placeholder = external global %struct.sv, align 8
@PL_uid = external global i32, align 4
@PL_euid = external global i32, align 4
@.str.9 = private unnamed_addr constant [22 x i8] c"No setreuid available\00", align 1
@PL_gid = external global i32, align 4
@PL_egid = external global i32, align 4
@.str.10 = private unnamed_addr constant [22 x i8] c"No setregid available\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"Regexp\00", align 1
@PL_defgv = external global %struct.gv*, align 8
@.str.12 = private unnamed_addr constant [16 x i8] c"panic: pp_match\00", align 1
@PL_reg_match_utf8 = external global i8, align 1
@PL_curpm = external global %struct.pmop*, align 8
@PL_sawampersand = external global i8, align 1
@PL_multiline = external global i32, align 4
@PL_bostr = external global i8*, align 8
@PL_regint_start = external global i8* (%struct.regexp*, %struct.sv*, i8*, i8*, i32, %struct.re_scream_pos_data_s*)*, align 8
@PL_regexecp = external global i32 (%struct.regexp*, i8*, i8*, i8*, i32, %struct.sv*, i8*, i32)*, align 8
@.str.13 = private unnamed_addr constant [35 x i8] c"panic: pp_match start/end pointers\00", align 1
@.str.14 = private unnamed_addr constant [9 x i8] c"READLINE\00", align 1
@.str.15 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.16 = private unnamed_addr constant [36 x i8] c"glob failed (can't start child: %s)\00", align 1
@PL_rs = external global %struct.sv*, align 8
@.str.17 = private unnamed_addr constant [44 x i8] c"glob failed (child exited with status %d%s)\00", align 1
@PL_statusvalue = external global i32, align 4
@.str.18 = private unnamed_addr constant [14 x i8] c", core dumped\00", align 1
@.str.19 = private unnamed_addr constant [20 x i8] c"$&*(){}[]'\22;\5C|?<>~`\00", align 1
@PL_statbuf = external global %struct.stat, align 8
@.str.20 = private unnamed_addr constant [38 x i8] c"utf8 \22\5Cx%02X\22 does not map to Unicode\00", align 1
@PL_markstack = external global i32*, align 8
@PL_retstack_ix = external global i32, align 4
@.str.21 = private unnamed_addr constant [7 x i8] c"EXISTS\00", align 1
@.str.22 = private unnamed_addr constant [7 x i8] c"DELETE\00", align 1
@.str.23 = private unnamed_addr constant [35 x i8] c"Can't localize pseudo-hash element\00", align 1
@PL_no_helem = external constant [0 x i8], align 1
@.str.24 = private unnamed_addr constant [15 x i8] c"panic: pp_iter\00", align 1
@PL_curstack = external global %struct.av*, align 8
@.str.25 = private unnamed_addr constant [32 x i8] c"Use of freed value in iteration\00", align 1
@.str.26 = private unnamed_addr constant [16 x i8] c"panic: pp_subst\00", align 1
@PL_encoding = external global %struct.sv*, align 8
@.str.27 = private unnamed_addr constant [18 x i8] c"Substitution loop\00", align 1
@PL_tmps_stack = external global %struct.sv**, align 8
@.str.28 = private unnamed_addr constant [40 x i8] c"Can't modify non-lvalue subroutine call\00", align 1
@.str.29 = private unnamed_addr constant [39 x i8] c"Can't return %s from lvalue subroutine\00", align 1
@.str.30 = private unnamed_addr constant [6 x i8] c"undef\00", align 1
@.str.31 = private unnamed_addr constant [17 x i8] c"a readonly value\00", align 1
@.str.32 = private unnamed_addr constant [12 x i8] c"a temporary\00", align 1
@.str.33 = private unnamed_addr constant [53 x i8] c"%s returned from lvalue subroutine in scalar context\00", align 1
@.str.34 = private unnamed_addr constant [12 x i8] c"Empty array\00", align 1
@.str.35 = private unnamed_addr constant [6 x i8] c"Array\00", align 1
@.str.36 = private unnamed_addr constant [41 x i8] c"Can't return a %s from lvalue subroutine\00", align 1
@.str.37 = private unnamed_addr constant [15 x i8] c"readonly value\00", align 1
@.str.38 = private unnamed_addr constant [10 x i8] c"temporary\00", align 1
@.str.39 = private unnamed_addr constant [21 x i8] c"Not a CODE reference\00", align 1
@.str.40 = private unnamed_addr constant [13 x i8] c"a subroutine\00", align 1
@.str.41 = private unnamed_addr constant [28 x i8] c"Undefined subroutine called\00", align 1
@.str.42 = private unnamed_addr constant [32 x i8] c"Undefined subroutine &%_ called\00", align 1
@PL_DBsub = external global %struct.gv*, align 8
@.str.43 = private unnamed_addr constant [27 x i8] c"No DB::sub routine defined\00", align 1
@PL_curcopdb = external global %struct.cop*, align 8
@PL_savestack_max = external global i32, align 4
@PL_comppad = external global %struct.av*, align 8
@PL_savestack = external global %union.any*, align 8
@PL_perldb = external global i32, align 4
@.str.44 = private unnamed_addr constant [39 x i8] c"Deep recursion on anonymous subroutine\00", align 1
@.str.45 = private unnamed_addr constant [34 x i8] c"Deep recursion on subroutine \22%_\22\00", align 1
@.str.46 = private unnamed_addr constant [37 x i8] c"Use of reference \22%_\22 as array index\00", align 1
@PL_no_aelem = external constant [0 x i8], align 1
@.str.47 = private unnamed_addr constant [47 x i8] c"Reference found where even-sized list expected\00", align 1
@.str.48 = private unnamed_addr constant [42 x i8] c"Odd number of elements in hash assignment\00", align 1
@.str.49 = private unnamed_addr constant [4 x i8] c"END\00", align 1
@.str.50 = private unnamed_addr constant [45 x i8] c"Can't call method \22%s\22 on an undefined value\00", align 1
@PL_stashcache = external global %struct.hv*, align 8
@.str.51 = private unnamed_addr constant [26 x i8] c"Can't call method \22%s\22 %s\00", align 1
@.str.52 = private unnamed_addr constant [38 x i8] c"without a package or object reference\00", align 1
@.str.53 = private unnamed_addr constant [22 x i8] c"on an undefined value\00", align 1
@.str.54 = private unnamed_addr constant [46 x i8] c"Can't call method \22%s\22 on unblessed reference\00", align 1
@PL_sub_generation = external global i32, align 4
@.str.55 = private unnamed_addr constant [6 x i8] c"SUPER\00", align 1
@.str.56 = private unnamed_addr constant [51 x i8] c"Can't use anonymous symbol table for method lookup\00", align 1
@.str.57 = private unnamed_addr constant [51 x i8] c"Can't locate object method \22%s\22 via package \22%.*s\22\00", align 1
@.str.58 = private unnamed_addr constant [88 x i8] c"Can't locate object method \22%s\22 via package \22%.*s\22 (perhaps you forgot to load \22%.*s\22?)\00", align 1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_const() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %tmp = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %2 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %1 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %3, %struct.sv** %4, i32 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %6 = bitcast %struct.op* %5 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %6, i32 0, i32 8
  %7 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %8 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %8, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %7, %struct.sv** %incdec.ptr, align 8
  store %struct.sv* %7, %struct.sv** %tmp
  %9 = load %struct.sv*, %struct.sv** %tmp
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %10, %struct.sv*** @PL_stack_sp, align 8
  %11 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 0
  %12 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %12
}

declare %struct.sv** @Perl_stack_grow(%struct.sv**, %struct.sv**, i32) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_nextstate() #0 {
entry:
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %1 = bitcast %struct.op* %0 to %struct.cop*
  store volatile %struct.cop* %1, %struct.cop** @PL_curcop, align 8
  store i8 0, i8* @PL_tainted, align 1
  %2 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %3 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %3, i32 0, i32 2
  %4 = load i32, i32* %si_cxix, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %5, i32 0, i32 1
  %6 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %6, i64 %idxprom
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %arrayidx, i32 0, i32 1
  %cx_blk = bitcast %union.anon.0* %cx_u to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 0
  %7 = load i32, i32* %blku_oldsp, align 4
  %idx.ext = sext i32 %7 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %2, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** @PL_stack_sp, align 8
  %8 = load i32, i32* @PL_tmps_ix, align 4
  %9 = load i32, i32* @PL_tmps_floor, align 4
  %cmp = icmp sgt i32 %8, %9
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @Perl_free_tmps()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %10 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 0
  %11 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %11
}

declare void @Perl_free_tmps() #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_gvsv() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %2 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %1 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %3, %struct.sv** %4, i32 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 7
  %6 = load i8, i8* %op_private, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %8 = bitcast %struct.op* %7 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %8, i32 0, i32 8
  %9 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %10 = bitcast %struct.sv* %9 to %struct.gv*
  %call2 = call %struct.sv* @Perl_save_scalar(%struct.gv* %10)
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %11, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %call2, %struct.sv** %incdec.ptr, align 8
  br label %if.end.5

if.else:                                          ; preds = %if.end
  %12 = load %struct.op*, %struct.op** @PL_op, align 8
  %13 = bitcast %struct.op* %12 to %struct.svop*
  %op_sv3 = getelementptr inbounds %struct.svop, %struct.svop* %13, i32 0, i32 8
  %14 = load %struct.sv*, %struct.sv** %op_sv3, align 8
  %15 = bitcast %struct.sv* %14 to %struct.gv*
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %15, i32 0, i32 0
  %16 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %16, i32 0, i32 7
  %17 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %17, i32 0, i32 0
  %18 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr4 = getelementptr inbounds %struct.sv*, %struct.sv** %19, i32 1
  store %struct.sv** %incdec.ptr4, %struct.sv*** %sp, align 8
  store %struct.sv* %18, %struct.sv** %incdec.ptr4, align 8
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.1
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %20, %struct.sv*** @PL_stack_sp, align 8
  %21 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 0
  %22 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %22
}

declare %struct.sv* @Perl_save_scalar(%struct.gv*) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_null() #0 {
entry:
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 0
  %1 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %1
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_setstate() #0 {
entry:
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %1 = bitcast %struct.op* %0 to %struct.cop*
  store volatile %struct.cop* %1, %struct.cop** @PL_curcop, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 0
  %3 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %3
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_pushmark() #0 {
entry:
  %tmp = alloca i32, align 4
  %0 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %0, i32 1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %1 = load i32*, i32** @PL_markstack_max, align 8
  %cmp = icmp eq i32* %incdec.ptr, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @Perl_markstack_grow()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %3 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %2 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %3 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  %4 = load i32*, i32** @PL_markstack_ptr, align 8
  store i32 %conv, i32* %4, align 4
  store i32 %conv, i32* %tmp
  %5 = load i32, i32* %tmp
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 0
  %7 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %7
}

declare void @Perl_markstack_grow() #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_stringify() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %tmp = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 3
  %2 = load i64, i64* %op_targ, align 8
  %3 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %3, i64 %2
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  %5 = load %struct.sv*, %struct.sv** %targ, align 8
  %6 = load %struct.sv**, %struct.sv*** %sp, align 8
  %7 = load %struct.sv*, %struct.sv** %6, align 8
  call void @Perl_sv_copypv(%struct.sv* %5, %struct.sv* %7)
  %8 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags, align 4
  %and = and i32 %9, 16384
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %10 = load %struct.sv*, %struct.sv** %targ, align 8
  %call = call i32 @Perl_mg_set(%struct.sv* %10)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %11 = load %struct.sv*, %struct.sv** %targ, align 8
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %11, %struct.sv** %12, align 8
  store %struct.sv* %11, %struct.sv** %tmp
  %13 = load %struct.sv*, %struct.sv** %tmp
  %14 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %14, %struct.sv*** @PL_stack_sp, align 8
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 0
  %16 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %16
}

declare void @Perl_sv_copypv(%struct.sv*, %struct.sv*) #1

declare i32 @Perl_mg_set(%struct.sv*) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_gv() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %tmp = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %2 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %1 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %3, %struct.sv** %4, i32 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %6 = bitcast %struct.op* %5 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %6, i32 0, i32 8
  %7 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %8 = bitcast %struct.sv* %7 to %struct.gv*
  %9 = bitcast %struct.gv* %8 to %struct.sv*
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %10, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %9, %struct.sv** %incdec.ptr, align 8
  store %struct.sv* %9, %struct.sv** %tmp
  %11 = load %struct.sv*, %struct.sv** %tmp
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %12, %struct.sv*** @PL_stack_sp, align 8
  %13 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 0
  %14 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %14
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_and() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  %tobool = icmp ne %struct.sv* %2, null
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %entry
  br i1 false, label %if.else, label %if.then

cond.false:                                       ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %4 = load %struct.sv*, %struct.sv** %3, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags, align 4
  %and = and i32 %5, 262144
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %cond.true.2, label %cond.false.11

cond.true.2:                                      ; preds = %cond.false
  %6 = load %struct.sv**, %struct.sv*** %sp, align 8
  %7 = load %struct.sv*, %struct.sv** %6, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  %8 = load i8*, i8** %sv_any, align 8
  %9 = bitcast i8* %8 to %struct.xpv*
  store %struct.xpv* %9, %struct.xpv** @PL_Xpv, align 8
  %tobool3 = icmp ne %struct.xpv* %9, null
  br i1 %tobool3, label %land.lhs.true, label %cond.false.10

land.lhs.true:                                    ; preds = %cond.true.2
  %10 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %10, i32 0, i32 1
  %11 = load i64, i64* %xpv_cur, align 8
  %cmp = icmp ugt i64 %11, 1
  br i1 %cmp, label %cond.true.9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %12 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_cur4 = getelementptr inbounds %struct.xpv, %struct.xpv* %12, i32 0, i32 1
  %13 = load i64, i64* %xpv_cur4, align 8
  %tobool5 = icmp ne i64 %13, 0
  br i1 %tobool5, label %land.lhs.true.6, label %cond.false.10

land.lhs.true.6:                                  ; preds = %lor.lhs.false
  %14 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %14, i32 0, i32 0
  %15 = load i8*, i8** %xpv_pv, align 8
  %16 = load i8, i8* %15, align 1
  %conv = sext i8 %16 to i32
  %cmp7 = icmp ne i32 %conv, 48
  br i1 %cmp7, label %cond.true.9, label %cond.false.10

cond.true.9:                                      ; preds = %land.lhs.true.6, %land.lhs.true
  br i1 true, label %if.else, label %if.then

cond.false.10:                                    ; preds = %land.lhs.true.6, %lor.lhs.false, %cond.true.2
  br i1 false, label %if.else, label %if.then

cond.false.11:                                    ; preds = %cond.false
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %19, 65536
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %cond.true.15, label %cond.false.19

cond.true.15:                                     ; preds = %cond.false.11
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %21 = load %struct.sv*, %struct.sv** %20, align 8
  %sv_any16 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any16, align 8
  %23 = bitcast i8* %22 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %23, i32 0, i32 3
  %24 = load i64, i64* %xiv_iv, align 8
  %cmp17 = icmp ne i64 %24, 0
  br i1 %cmp17, label %if.else, label %if.then

cond.false.19:                                    ; preds = %cond.false.11
  %25 = load %struct.sv**, %struct.sv*** %sp, align 8
  %26 = load %struct.sv*, %struct.sv** %25, align 8
  %sv_flags20 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags20, align 4
  %and21 = and i32 %27, 131072
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %cond.true.23, label %cond.false.27

cond.true.23:                                     ; preds = %cond.false.19
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %29 = load %struct.sv*, %struct.sv** %28, align 8
  %sv_any24 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 0
  %30 = load i8*, i8** %sv_any24, align 8
  %31 = bitcast i8* %30 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %31, i32 0, i32 4
  %32 = load double, double* %xnv_nv, align 8
  %cmp25 = fcmp une double %32, 0.000000e+00
  br i1 %cmp25, label %if.else, label %if.then

cond.false.27:                                    ; preds = %cond.false.19
  %33 = load %struct.sv**, %struct.sv*** %sp, align 8
  %34 = load %struct.sv*, %struct.sv** %33, align 8
  %call = call signext i8 @Perl_sv_2bool(%struct.sv* %34)
  %conv28 = sext i8 %call to i32
  %tobool29 = icmp ne i32 %conv28, 0
  br i1 %tobool29, label %if.else, label %if.then

if.then:                                          ; preds = %cond.false.27, %cond.true.23, %cond.true.15, %cond.false.10, %cond.true.9, %cond.true
  %35 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %35, %struct.sv*** @PL_stack_sp, align 8
  %36 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %36, i32 0, i32 0
  %37 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %37, %struct.op** %retval
  br label %return

if.else:                                          ; preds = %cond.false.27, %cond.true.23, %cond.true.15, %cond.false.10, %cond.true.9, %cond.true
  %38 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %38, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %39 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %39, %struct.sv*** @PL_stack_sp, align 8
  %40 = load %struct.op*, %struct.op** @PL_op, align 8
  %41 = bitcast %struct.op* %40 to %struct.logop*
  %op_other = getelementptr inbounds %struct.logop, %struct.logop* %41, i32 0, i32 9
  %42 = load %struct.op*, %struct.op** %op_other, align 8
  store %struct.op* %42, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %43 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %43
}

declare signext i8 @Perl_sv_2bool(%struct.sv*) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_sassign() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %right = alloca %struct.sv*, align 8
  %left = alloca %struct.sv*, align 8
  %temp = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** %right, align 8
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %4 = load %struct.sv*, %struct.sv** %3, align 8
  store %struct.sv* %4, %struct.sv** %left, align 8
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 7
  %6 = load i8, i8* %op_private, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load %struct.sv*, %struct.sv** %left, align 8
  store %struct.sv* %7, %struct.sv** %temp, align 8
  %8 = load %struct.sv*, %struct.sv** %right, align 8
  store %struct.sv* %8, %struct.sv** %left, align 8
  %9 = load %struct.sv*, %struct.sv** %temp, align 8
  store %struct.sv* %9, %struct.sv** %right, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %10 = load i8, i8* @PL_tainting, align 1
  %conv1 = sext i8 %10 to i32
  %tobool2 = icmp ne i32 %conv1, 0
  br i1 %tobool2, label %land.lhs.true, label %if.end.12

land.lhs.true:                                    ; preds = %if.end
  %11 = load i8, i8* @PL_tainted, align 1
  %conv3 = sext i8 %11 to i32
  %tobool4 = icmp ne i32 %conv3, 0
  br i1 %tobool4, label %land.lhs.true.5, label %if.end.12

land.lhs.true.5:                                  ; preds = %land.lhs.true
  %12 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags, align 4
  %and6 = and i32 %13, 57344
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %land.lhs.true.8, label %if.then.11

land.lhs.true.8:                                  ; preds = %land.lhs.true.5
  %14 = load %struct.sv*, %struct.sv** %left, align 8
  %call = call signext i8 @Perl_sv_tainted(%struct.sv* %14)
  %conv9 = sext i8 %call to i32
  %tobool10 = icmp ne i32 %conv9, 0
  br i1 %tobool10, label %if.end.12, label %if.then.11

if.then.11:                                       ; preds = %land.lhs.true.8, %land.lhs.true.5
  store i8 0, i8* @PL_tainted, align 1
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.11, %land.lhs.true.8, %land.lhs.true, %if.end
  %15 = load %struct.sv*, %struct.sv** %right, align 8
  %16 = load %struct.sv*, %struct.sv** %left, align 8
  %cmp = icmp ne %struct.sv* %15, %16
  br i1 %cmp, label %if.then.14, label %if.end.21

if.then.14:                                       ; preds = %if.end.12
  %17 = load %struct.sv*, %struct.sv** %right, align 8
  %18 = load %struct.sv*, %struct.sv** %left, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %17, %struct.sv* %18, i32 2)
  %19 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %20, 16384
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %if.then.18, label %if.end.20

if.then.18:                                       ; preds = %if.then.14
  %21 = load %struct.sv*, %struct.sv** %right, align 8
  %call19 = call i32 @Perl_mg_set(%struct.sv* %21)
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.18, %if.then.14
  br label %if.end.21

if.end.21:                                        ; preds = %if.end.20, %if.end.12
  %22 = load %struct.sv*, %struct.sv** %right, align 8
  %23 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %22, %struct.sv** %23, align 8
  %24 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %24, %struct.sv*** @PL_stack_sp, align 8
  %25 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %25, i32 0, i32 0
  %26 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %26
}

declare signext i8 @Perl_sv_tainted(%struct.sv*) #1

declare void @Perl_sv_setsv_flags(%struct.sv*, %struct.sv*, i32) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_cond_expr() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** @PL_Sv, align 8
  %3 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool = icmp ne %struct.sv* %3, null
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %entry
  br label %cond.end.33

cond.false:                                       ; preds = %entry
  %4 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags, align 4
  %and = and i32 %5, 262144
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %cond.true.2, label %cond.false.10

cond.true.2:                                      ; preds = %cond.false
  %6 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  %7 = load i8*, i8** %sv_any, align 8
  %8 = bitcast i8* %7 to %struct.xpv*
  store %struct.xpv* %8, %struct.xpv** @PL_Xpv, align 8
  %tobool3 = icmp ne %struct.xpv* %8, null
  br i1 %tobool3, label %land.rhs, label %land.end.9

land.rhs:                                         ; preds = %cond.true.2
  %9 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %9, i32 0, i32 1
  %10 = load i64, i64* %xpv_cur, align 8
  %cmp = icmp ugt i64 %10, 1
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %11 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_cur4 = getelementptr inbounds %struct.xpv, %struct.xpv* %11, i32 0, i32 1
  %12 = load i64, i64* %xpv_cur4, align 8
  %tobool5 = icmp ne i64 %12, 0
  br i1 %tobool5, label %land.rhs.6, label %land.end

land.rhs.6:                                       ; preds = %lor.rhs
  %13 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %13, i32 0, i32 0
  %14 = load i8*, i8** %xpv_pv, align 8
  %15 = load i8, i8* %14, align 1
  %conv = sext i8 %15 to i32
  %cmp7 = icmp ne i32 %conv, 48
  br label %land.end

land.end:                                         ; preds = %land.rhs.6, %lor.rhs
  %16 = phi i1 [ false, %lor.rhs ], [ %cmp7, %land.rhs.6 ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %land.rhs
  %17 = phi i1 [ true, %land.rhs ], [ %16, %land.end ]
  br label %land.end.9

land.end.9:                                       ; preds = %lor.end, %cond.true.2
  %18 = phi i1 [ false, %cond.true.2 ], [ %17, %lor.end ]
  %cond = select i1 %18, i32 1, i32 0
  br label %cond.end.31

cond.false.10:                                    ; preds = %cond.false
  %19 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %20, 65536
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %cond.true.14, label %cond.false.18

cond.true.14:                                     ; preds = %cond.false.10
  %21 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any15 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any15, align 8
  %23 = bitcast i8* %22 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %23, i32 0, i32 3
  %24 = load i64, i64* %xiv_iv, align 8
  %cmp16 = icmp ne i64 %24, 0
  %conv17 = zext i1 %cmp16 to i32
  br label %cond.end.29

cond.false.18:                                    ; preds = %cond.false.10
  %25 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %26, 131072
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %cond.true.22, label %cond.false.26

cond.true.22:                                     ; preds = %cond.false.18
  %27 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any23 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 0
  %28 = load i8*, i8** %sv_any23, align 8
  %29 = bitcast i8* %28 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %29, i32 0, i32 4
  %30 = load double, double* %xnv_nv, align 8
  %cmp24 = fcmp une double %30, 0.000000e+00
  %conv25 = zext i1 %cmp24 to i32
  br label %cond.end

cond.false.26:                                    ; preds = %cond.false.18
  %31 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call = call signext i8 @Perl_sv_2bool(%struct.sv* %31)
  %conv27 = sext i8 %call to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false.26, %cond.true.22
  %cond28 = phi i32 [ %conv25, %cond.true.22 ], [ %conv27, %cond.false.26 ]
  br label %cond.end.29

cond.end.29:                                      ; preds = %cond.end, %cond.true.14
  %cond30 = phi i32 [ %conv17, %cond.true.14 ], [ %cond28, %cond.end ]
  br label %cond.end.31

cond.end.31:                                      ; preds = %cond.end.29, %land.end.9
  %cond32 = phi i32 [ %cond, %land.end.9 ], [ %cond30, %cond.end.29 ]
  br label %cond.end.33

cond.end.33:                                      ; preds = %cond.end.31, %cond.true
  %cond34 = phi i32 [ 0, %cond.true ], [ %cond32, %cond.end.31 ]
  %tobool35 = icmp ne i32 %cond34, 0
  br i1 %tobool35, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end.33
  %32 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %32, %struct.sv*** @PL_stack_sp, align 8
  %33 = load %struct.op*, %struct.op** @PL_op, align 8
  %34 = bitcast %struct.op* %33 to %struct.logop*
  %op_other = getelementptr inbounds %struct.logop, %struct.logop* %34, i32 0, i32 9
  %35 = load %struct.op*, %struct.op** %op_other, align 8
  store %struct.op* %35, %struct.op** %retval
  br label %return

if.else:                                          ; preds = %cond.end.33
  %36 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %36, %struct.sv*** @PL_stack_sp, align 8
  %37 = load %struct.op*, %struct.op** @PL_op, align 8
  %38 = bitcast %struct.op* %37 to %struct.logop*
  %op_next = getelementptr inbounds %struct.logop, %struct.logop* %38, i32 0, i32 0
  %39 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %39, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %40 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %40
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_unstack() #0 {
entry:
  %oldsave = alloca i32, align 4
  store i8 0, i8* @PL_tainted, align 1
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %1 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %1, i32 0, i32 2
  %2 = load i32, i32* %si_cxix, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %3, i32 0, i32 1
  %4 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %4, i64 %idxprom
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %arrayidx, i32 0, i32 1
  %cx_blk = bitcast %union.anon.0* %cx_u to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 0
  %5 = load i32, i32* %blku_oldsp, align 4
  %idx.ext = sext i32 %5 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %0, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** @PL_stack_sp, align 8
  %6 = load i32, i32* @PL_tmps_ix, align 4
  %7 = load i32, i32* @PL_tmps_floor, align 4
  %cmp = icmp sgt i32 %6, %7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @Perl_free_tmps()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load i32, i32* @PL_scopestack_ix, align 4
  %sub = sub nsw i32 %8, 1
  %idxprom1 = sext i32 %sub to i64
  %9 = load i32*, i32** @PL_scopestack, align 8
  %arrayidx2 = getelementptr inbounds i32, i32* %9, i64 %idxprom1
  %10 = load i32, i32* %arrayidx2, align 4
  store i32 %10, i32* %oldsave, align 4
  %11 = load i32, i32* @PL_savestack_ix, align 4
  %12 = load i32, i32* %oldsave, align 4
  %cmp3 = icmp sgt i32 %11, %12
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end
  %13 = load i32, i32* %oldsave, align 4
  call void @Perl_leave_scope(i32 %13)
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.4, %if.end
  %14 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 0
  %15 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %15
}

declare void @Perl_leave_scope(i32) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_concat() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %tmpsv = alloca %struct.sv*, align 8
  %right = alloca %struct.sv*, align 8
  %left = alloca %struct.sv*, align 8
  %tmp = alloca %struct.sv*, align 8
  %right33 = alloca %struct.sv*, align 8
  %left36 = alloca %struct.sv*, align 8
  %llen = alloca i64, align 8
  %lpv = alloca i8*, align 8
  %lbyte = alloca i8, align 1
  %rlen = alloca i64, align 8
  %rpv = alloca i8*, align 8
  %rbyte = alloca i8, align 1
  %rcopied = alloca i8, align 1
  %tmp204 = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  %2 = load i8, i8* %op_flags, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %3, i64 -1
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 3
  %6 = load i64, i64* %op_targ, align 8
  %7 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %arrayidx1 = getelementptr inbounds %struct.sv*, %struct.sv** %7, i64 %6
  %8 = load %struct.sv*, %struct.sv** %arrayidx1, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %4, %cond.true ], [ %8, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %targ, align 8
  %9 = load i64, i64* @PL_amagic_generation, align 8
  %tobool2 = icmp ne i64 %9, 0
  br i1 %tobool2, label %if.then, label %if.end.31

if.then:                                          ; preds = %cond.end
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %11 = load %struct.sv*, %struct.sv** %10, align 8
  store %struct.sv* %11, %struct.sv** %right, align 8
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %12, i64 -1
  %13 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  store %struct.sv* %13, %struct.sv** %left, align 8
  %14 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags, align 4
  %and3 = and i32 %15, 268435456
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %16 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %17, 268435456
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %land.lhs.true, label %if.end.30

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.then
  %18 = load %struct.sv*, %struct.sv** %left, align 8
  %19 = load %struct.sv*, %struct.sv** %right, align 8
  %20 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags8 = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 6
  %21 = load i8, i8* %op_flags8, align 1
  %conv9 = zext i8 %21 to i32
  %and10 = and i32 %conv9, 64
  %tobool11 = icmp ne i32 %and10, 0
  %cond12 = select i1 %tobool11, i32 4, i32 0
  %call = call %struct.sv* @Perl_amagic_call(%struct.sv* %18, %struct.sv* %19, i32 54, i32 %cond12)
  store %struct.sv* %call, %struct.sv** %tmpsv, align 8
  %tobool13 = icmp ne %struct.sv* %call, null
  br i1 %tobool13, label %if.then.14, label %if.end.30

if.then.14:                                       ; preds = %land.lhs.true
  %22 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %22, %struct.sv*** %sp, align 8
  %23 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %23, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %24 = load %struct.sv*, %struct.sv** %23, align 8
  %25 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags15 = getelementptr inbounds %struct.op, %struct.op* %25, i32 0, i32 6
  %26 = load i8, i8* %op_flags15, align 1
  %conv16 = zext i8 %26 to i32
  %and17 = and i32 %conv16, 64
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %if.then.23, label %lor.lhs.false.19

lor.lhs.false.19:                                 ; preds = %if.then.14
  %27 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags20 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags20, align 4
  %and21 = and i32 %28, 1024
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %if.then.23, label %if.else

if.then.23:                                       ; preds = %lor.lhs.false.19, %if.then.14
  %29 = load %struct.sv*, %struct.sv** %targ, align 8
  %30 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %29, %struct.sv* %30, i32 2)
  %31 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags24 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags24, align 4
  %and25 = and i32 %32, 16384
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %if.then.27, label %if.end

if.then.27:                                       ; preds = %if.then.23
  %33 = load %struct.sv*, %struct.sv** %targ, align 8
  %call28 = call i32 @Perl_mg_set(%struct.sv* %33)
  br label %if.end

if.end:                                           ; preds = %if.then.27, %if.then.23
  %34 = load %struct.sv*, %struct.sv** %targ, align 8
  %35 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %34, %struct.sv** %35, align 8
  store %struct.sv* %34, %struct.sv** %tmp
  %36 = load %struct.sv*, %struct.sv** %tmp
  br label %if.end.29

if.else:                                          ; preds = %lor.lhs.false.19
  %37 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %38 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %37, %struct.sv** %38, align 8
  br label %if.end.29

if.end.29:                                        ; preds = %if.else, %if.end
  %39 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %39, %struct.sv*** @PL_stack_sp, align 8
  %40 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %40, i32 0, i32 0
  %41 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %41, %struct.op** %retval
  br label %return

if.end.30:                                        ; preds = %land.lhs.true, %lor.lhs.false
  br label %if.end.31

if.end.31:                                        ; preds = %if.end.30, %cond.end
  %42 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr34 = getelementptr inbounds %struct.sv*, %struct.sv** %42, i32 -1
  store %struct.sv** %incdec.ptr34, %struct.sv*** %sp, align 8
  %43 = load %struct.sv*, %struct.sv** %42, align 8
  store %struct.sv* %43, %struct.sv** %right33, align 8
  %44 = load %struct.sv**, %struct.sv*** %sp, align 8
  %45 = load %struct.sv*, %struct.sv** %44, align 8
  store %struct.sv* %45, %struct.sv** %left36, align 8
  %46 = load %struct.sv*, %struct.sv** %right33, align 8
  %sv_flags42 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags42, align 4
  %and43 = and i32 %47, 262144
  %cmp = icmp eq i32 %and43, 262144
  br i1 %cmp, label %cond.true.45, label %cond.false.47

cond.true.45:                                     ; preds = %if.end.31
  %48 = load %struct.sv*, %struct.sv** %right33, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 0
  %49 = load i8*, i8** %sv_any, align 8
  %50 = bitcast i8* %49 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %50, i32 0, i32 1
  %51 = load i64, i64* %xpv_cur, align 8
  store i64 %51, i64* %rlen, align 8
  %52 = load %struct.sv*, %struct.sv** %right33, align 8
  %sv_any46 = getelementptr inbounds %struct.sv, %struct.sv* %52, i32 0, i32 0
  %53 = load i8*, i8** %sv_any46, align 8
  %54 = bitcast i8* %53 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %54, i32 0, i32 0
  %55 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end.49

cond.false.47:                                    ; preds = %if.end.31
  %56 = load %struct.sv*, %struct.sv** %right33, align 8
  %call48 = call i8* @Perl_sv_2pv_flags(%struct.sv* %56, i64* %rlen, i32 2)
  br label %cond.end.49

cond.end.49:                                      ; preds = %cond.false.47, %cond.true.45
  %cond50 = phi i8* [ %55, %cond.true.45 ], [ %call48, %cond.false.47 ]
  store i8* %cond50, i8** %rpv, align 8
  %57 = load %struct.sv*, %struct.sv** %right33, align 8
  %sv_flags52 = getelementptr inbounds %struct.sv, %struct.sv* %57, i32 0, i32 2
  %58 = load i32, i32* %sv_flags52, align 4
  %and53 = and i32 %58, 536870912
  %tobool54 = icmp ne i32 %and53, 0
  br i1 %tobool54, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.end.49
  %59 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private = getelementptr inbounds %struct.cop, %struct.cop* %59, i32 0, i32 7
  %60 = load i8, i8* %op_private, align 1
  %conv55 = zext i8 %60 to i32
  %and56 = and i32 %conv55, 8
  %tobool57 = icmp ne i32 %and56, 0
  %lnot = xor i1 %tobool57, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.end.49
  %61 = phi i1 [ false, %cond.end.49 ], [ %lnot, %land.rhs ]
  %lnot58 = xor i1 %61, true
  %lnot.ext = zext i1 %lnot58 to i32
  %conv59 = trunc i32 %lnot.ext to i8
  store i8 %conv59, i8* %rbyte, align 1
  store i8 0, i8* %rcopied, align 1
  %62 = load %struct.sv*, %struct.sv** %targ, align 8
  %63 = load %struct.sv*, %struct.sv** %right33, align 8
  %cmp61 = icmp eq %struct.sv* %62, %63
  br i1 %cmp61, label %land.lhs.true.63, label %if.end.82

land.lhs.true.63:                                 ; preds = %land.end
  %64 = load %struct.sv*, %struct.sv** %right33, align 8
  %65 = load %struct.sv*, %struct.sv** %left36, align 8
  %cmp64 = icmp ne %struct.sv* %64, %65
  br i1 %cmp64, label %if.then.66, label %if.end.82

if.then.66:                                       ; preds = %land.lhs.true.63
  %66 = load i8*, i8** %rpv, align 8
  %67 = load i64, i64* %rlen, align 8
  %call67 = call %struct.sv* @Perl_newSVpvn(i8* %66, i64 %67)
  %call68 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call67)
  store %struct.sv* %call68, %struct.sv** %right33, align 8
  %68 = load %struct.sv*, %struct.sv** %right33, align 8
  %sv_flags69 = getelementptr inbounds %struct.sv, %struct.sv* %68, i32 0, i32 2
  %69 = load i32, i32* %sv_flags69, align 4
  %and70 = and i32 %69, 262144
  %cmp71 = icmp eq i32 %and70, 262144
  br i1 %cmp71, label %cond.true.73, label %cond.false.78

cond.true.73:                                     ; preds = %if.then.66
  %70 = load %struct.sv*, %struct.sv** %right33, align 8
  %sv_any74 = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 0
  %71 = load i8*, i8** %sv_any74, align 8
  %72 = bitcast i8* %71 to %struct.xpv*
  %xpv_cur75 = getelementptr inbounds %struct.xpv, %struct.xpv* %72, i32 0, i32 1
  %73 = load i64, i64* %xpv_cur75, align 8
  store i64 %73, i64* %rlen, align 8
  %74 = load %struct.sv*, %struct.sv** %right33, align 8
  %sv_any76 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 0
  %75 = load i8*, i8** %sv_any76, align 8
  %76 = bitcast i8* %75 to %struct.xpv*
  %xpv_pv77 = getelementptr inbounds %struct.xpv, %struct.xpv* %76, i32 0, i32 0
  %77 = load i8*, i8** %xpv_pv77, align 8
  br label %cond.end.80

cond.false.78:                                    ; preds = %if.then.66
  %78 = load %struct.sv*, %struct.sv** %right33, align 8
  %call79 = call i8* @Perl_sv_2pv_flags(%struct.sv* %78, i64* %rlen, i32 2)
  br label %cond.end.80

cond.end.80:                                      ; preds = %cond.false.78, %cond.true.73
  %cond81 = phi i8* [ %77, %cond.true.73 ], [ %call79, %cond.false.78 ]
  store i8* %cond81, i8** %rpv, align 8
  store i8 1, i8* %rcopied, align 1
  br label %if.end.82

if.end.82:                                        ; preds = %cond.end.80, %land.lhs.true.63, %land.end
  %79 = load %struct.sv*, %struct.sv** %targ, align 8
  %80 = load %struct.sv*, %struct.sv** %left36, align 8
  %cmp83 = icmp ne %struct.sv* %79, %80
  br i1 %cmp83, label %if.then.85, label %if.else.120

if.then.85:                                       ; preds = %if.end.82
  %81 = load %struct.sv*, %struct.sv** %left36, align 8
  %sv_flags86 = getelementptr inbounds %struct.sv, %struct.sv* %81, i32 0, i32 2
  %82 = load i32, i32* %sv_flags86, align 4
  %and87 = and i32 %82, 262144
  %cmp88 = icmp eq i32 %and87, 262144
  br i1 %cmp88, label %cond.true.90, label %cond.false.95

cond.true.90:                                     ; preds = %if.then.85
  %83 = load %struct.sv*, %struct.sv** %left36, align 8
  %sv_any91 = getelementptr inbounds %struct.sv, %struct.sv* %83, i32 0, i32 0
  %84 = load i8*, i8** %sv_any91, align 8
  %85 = bitcast i8* %84 to %struct.xpv*
  %xpv_cur92 = getelementptr inbounds %struct.xpv, %struct.xpv* %85, i32 0, i32 1
  %86 = load i64, i64* %xpv_cur92, align 8
  store i64 %86, i64* %llen, align 8
  %87 = load %struct.sv*, %struct.sv** %left36, align 8
  %sv_any93 = getelementptr inbounds %struct.sv, %struct.sv* %87, i32 0, i32 0
  %88 = load i8*, i8** %sv_any93, align 8
  %89 = bitcast i8* %88 to %struct.xpv*
  %xpv_pv94 = getelementptr inbounds %struct.xpv, %struct.xpv* %89, i32 0, i32 0
  %90 = load i8*, i8** %xpv_pv94, align 8
  br label %cond.end.97

cond.false.95:                                    ; preds = %if.then.85
  %91 = load %struct.sv*, %struct.sv** %left36, align 8
  %call96 = call i8* @Perl_sv_2pv_flags(%struct.sv* %91, i64* %llen, i32 2)
  br label %cond.end.97

cond.end.97:                                      ; preds = %cond.false.95, %cond.true.90
  %cond98 = phi i8* [ %90, %cond.true.90 ], [ %call96, %cond.false.95 ]
  store i8* %cond98, i8** %lpv, align 8
  %92 = load %struct.sv*, %struct.sv** %left36, align 8
  %sv_flags99 = getelementptr inbounds %struct.sv, %struct.sv* %92, i32 0, i32 2
  %93 = load i32, i32* %sv_flags99, align 4
  %and100 = and i32 %93, 536870912
  %tobool101 = icmp ne i32 %and100, 0
  br i1 %tobool101, label %land.rhs.102, label %land.end.109

land.rhs.102:                                     ; preds = %cond.end.97
  %94 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private103 = getelementptr inbounds %struct.cop, %struct.cop* %94, i32 0, i32 7
  %95 = load i8, i8* %op_private103, align 1
  %conv104 = zext i8 %95 to i32
  %and105 = and i32 %conv104, 8
  %tobool106 = icmp ne i32 %and105, 0
  %lnot107 = xor i1 %tobool106, true
  br label %land.end.109

land.end.109:                                     ; preds = %land.rhs.102, %cond.end.97
  %96 = phi i1 [ false, %cond.end.97 ], [ %lnot107, %land.rhs.102 ]
  %lnot110 = xor i1 %96, true
  %lnot.ext111 = zext i1 %lnot110 to i32
  %conv112 = trunc i32 %lnot.ext111 to i8
  store i8 %conv112, i8* %lbyte, align 1
  %97 = load %struct.sv*, %struct.sv** %targ, align 8
  %98 = load i8*, i8** %lpv, align 8
  %99 = load i64, i64* %llen, align 8
  call void @Perl_sv_setpvn(%struct.sv* %97, i8* %98, i64 %99)
  %100 = load i8, i8* %lbyte, align 1
  %tobool113 = icmp ne i8 %100, 0
  br i1 %tobool113, label %if.else.116, label %if.then.114

if.then.114:                                      ; preds = %land.end.109
  %101 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags115 = getelementptr inbounds %struct.sv, %struct.sv* %101, i32 0, i32 2
  %102 = load i32, i32* %sv_flags115, align 4
  %or = or i32 %102, 536870912
  store i32 %or, i32* %sv_flags115, align 4
  br label %if.end.119

if.else.116:                                      ; preds = %land.end.109
  %103 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags117 = getelementptr inbounds %struct.sv, %struct.sv* %103, i32 0, i32 2
  %104 = load i32, i32* %sv_flags117, align 4
  %and118 = and i32 %104, -536870913
  store i32 %and118, i32* %sv_flags117, align 4
  br label %if.end.119

if.end.119:                                       ; preds = %if.else.116, %if.then.114
  br label %if.end.167

if.else.120:                                      ; preds = %if.end.82
  %105 = load %struct.sv*, %struct.sv** %left36, align 8
  %sv_flags121 = getelementptr inbounds %struct.sv, %struct.sv* %105, i32 0, i32 2
  %106 = load i32, i32* %sv_flags121, align 4
  %and122 = and i32 %106, 8192
  %tobool123 = icmp ne i32 %and122, 0
  br i1 %tobool123, label %if.then.124, label %if.end.126

if.then.124:                                      ; preds = %if.else.120
  %107 = load %struct.sv*, %struct.sv** %left36, align 8
  %call125 = call i32 @Perl_mg_get(%struct.sv* %107)
  br label %if.end.126

if.end.126:                                       ; preds = %if.then.124, %if.else.120
  %108 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags127 = getelementptr inbounds %struct.sv, %struct.sv* %108, i32 0, i32 2
  %109 = load i32, i32* %sv_flags127, align 4
  %and128 = and i32 %109, 118423552
  %tobool129 = icmp ne i32 %and128, 0
  br i1 %tobool129, label %if.end.131, label %if.then.130

if.then.130:                                      ; preds = %if.end.126
  %110 = load %struct.sv*, %struct.sv** %left36, align 8
  call void @Perl_sv_setpv(%struct.sv* %110, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i32 0))
  br label %if.end.131

if.end.131:                                       ; preds = %if.then.130, %if.end.126
  %111 = load %struct.sv*, %struct.sv** %left36, align 8
  %sv_flags132 = getelementptr inbounds %struct.sv, %struct.sv* %111, i32 0, i32 2
  %112 = load i32, i32* %sv_flags132, align 4
  %and133 = and i32 %112, 262144
  %cmp134 = icmp eq i32 %and133, 262144
  br i1 %cmp134, label %cond.true.136, label %cond.false.141

cond.true.136:                                    ; preds = %if.end.131
  %113 = load %struct.sv*, %struct.sv** %left36, align 8
  %sv_any137 = getelementptr inbounds %struct.sv, %struct.sv* %113, i32 0, i32 0
  %114 = load i8*, i8** %sv_any137, align 8
  %115 = bitcast i8* %114 to %struct.xpv*
  %xpv_cur138 = getelementptr inbounds %struct.xpv, %struct.xpv* %115, i32 0, i32 1
  %116 = load i64, i64* %xpv_cur138, align 8
  store i64 %116, i64* %llen, align 8
  %117 = load %struct.sv*, %struct.sv** %left36, align 8
  %sv_any139 = getelementptr inbounds %struct.sv, %struct.sv* %117, i32 0, i32 0
  %118 = load i8*, i8** %sv_any139, align 8
  %119 = bitcast i8* %118 to %struct.xpv*
  %xpv_pv140 = getelementptr inbounds %struct.xpv, %struct.xpv* %119, i32 0, i32 0
  %120 = load i8*, i8** %xpv_pv140, align 8
  br label %cond.end.143

cond.false.141:                                   ; preds = %if.end.131
  %121 = load %struct.sv*, %struct.sv** %left36, align 8
  %call142 = call i8* @Perl_sv_2pv_flags(%struct.sv* %121, i64* %llen, i32 0)
  br label %cond.end.143

cond.end.143:                                     ; preds = %cond.false.141, %cond.true.136
  %cond144 = phi i8* [ %120, %cond.true.136 ], [ %call142, %cond.false.141 ]
  store i8* %cond144, i8** %lpv, align 8
  %122 = load %struct.sv*, %struct.sv** %left36, align 8
  %sv_flags145 = getelementptr inbounds %struct.sv, %struct.sv* %122, i32 0, i32 2
  %123 = load i32, i32* %sv_flags145, align 4
  %and146 = and i32 %123, 536870912
  %tobool147 = icmp ne i32 %and146, 0
  br i1 %tobool147, label %land.rhs.148, label %land.end.155

land.rhs.148:                                     ; preds = %cond.end.143
  %124 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private149 = getelementptr inbounds %struct.cop, %struct.cop* %124, i32 0, i32 7
  %125 = load i8, i8* %op_private149, align 1
  %conv150 = zext i8 %125 to i32
  %and151 = and i32 %conv150, 8
  %tobool152 = icmp ne i32 %and151, 0
  %lnot153 = xor i1 %tobool152, true
  br label %land.end.155

land.end.155:                                     ; preds = %land.rhs.148, %cond.end.143
  %126 = phi i1 [ false, %cond.end.143 ], [ %lnot153, %land.rhs.148 ]
  %lnot156 = xor i1 %126, true
  %lnot.ext157 = zext i1 %lnot156 to i32
  %conv158 = trunc i32 %lnot.ext157 to i8
  store i8 %conv158, i8* %lbyte, align 1
  %127 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private159 = getelementptr inbounds %struct.cop, %struct.cop* %127, i32 0, i32 7
  %128 = load i8, i8* %op_private159, align 1
  %conv160 = zext i8 %128 to i32
  %and161 = and i32 %conv160, 8
  %tobool162 = icmp ne i32 %and161, 0
  br i1 %tobool162, label %if.then.163, label %if.end.166

if.then.163:                                      ; preds = %land.end.155
  %129 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags164 = getelementptr inbounds %struct.sv, %struct.sv* %129, i32 0, i32 2
  %130 = load i32, i32* %sv_flags164, align 4
  %and165 = and i32 %130, -536870913
  store i32 %and165, i32* %sv_flags164, align 4
  br label %if.end.166

if.end.166:                                       ; preds = %if.then.163, %land.end.155
  br label %if.end.167

if.end.167:                                       ; preds = %if.end.166, %if.end.119
  %131 = load i8, i8* %lbyte, align 1
  %conv168 = sext i8 %131 to i32
  %132 = load i8, i8* %rbyte, align 1
  %conv169 = sext i8 %132 to i32
  %cmp170 = icmp ne i32 %conv168, %conv169
  br i1 %cmp170, label %if.then.172, label %if.end.197

if.then.172:                                      ; preds = %if.end.167
  %133 = load i8, i8* %lbyte, align 1
  %tobool173 = icmp ne i8 %133, 0
  br i1 %tobool173, label %if.then.174, label %if.else.176

if.then.174:                                      ; preds = %if.then.172
  %134 = load %struct.sv*, %struct.sv** %targ, align 8
  %call175 = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %134, i32 0)
  br label %if.end.196

if.else.176:                                      ; preds = %if.then.172
  %135 = load i8, i8* %rcopied, align 1
  %tobool177 = icmp ne i8 %135, 0
  br i1 %tobool177, label %if.end.181, label %if.then.178

if.then.178:                                      ; preds = %if.else.176
  %136 = load i8*, i8** %rpv, align 8
  %137 = load i64, i64* %rlen, align 8
  %call179 = call %struct.sv* @Perl_newSVpvn(i8* %136, i64 %137)
  %call180 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call179)
  store %struct.sv* %call180, %struct.sv** %right33, align 8
  br label %if.end.181

if.end.181:                                       ; preds = %if.then.178, %if.else.176
  %138 = load %struct.sv*, %struct.sv** %right33, align 8
  %call182 = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %138, i32 0)
  %139 = load %struct.sv*, %struct.sv** %right33, align 8
  %sv_flags183 = getelementptr inbounds %struct.sv, %struct.sv* %139, i32 0, i32 2
  %140 = load i32, i32* %sv_flags183, align 4
  %and184 = and i32 %140, 262144
  %cmp185 = icmp eq i32 %and184, 262144
  br i1 %cmp185, label %cond.true.187, label %cond.false.192

cond.true.187:                                    ; preds = %if.end.181
  %141 = load %struct.sv*, %struct.sv** %right33, align 8
  %sv_any188 = getelementptr inbounds %struct.sv, %struct.sv* %141, i32 0, i32 0
  %142 = load i8*, i8** %sv_any188, align 8
  %143 = bitcast i8* %142 to %struct.xpv*
  %xpv_cur189 = getelementptr inbounds %struct.xpv, %struct.xpv* %143, i32 0, i32 1
  %144 = load i64, i64* %xpv_cur189, align 8
  store i64 %144, i64* %rlen, align 8
  %145 = load %struct.sv*, %struct.sv** %right33, align 8
  %sv_any190 = getelementptr inbounds %struct.sv, %struct.sv* %145, i32 0, i32 0
  %146 = load i8*, i8** %sv_any190, align 8
  %147 = bitcast i8* %146 to %struct.xpv*
  %xpv_pv191 = getelementptr inbounds %struct.xpv, %struct.xpv* %147, i32 0, i32 0
  %148 = load i8*, i8** %xpv_pv191, align 8
  br label %cond.end.194

cond.false.192:                                   ; preds = %if.end.181
  %149 = load %struct.sv*, %struct.sv** %right33, align 8
  %call193 = call i8* @Perl_sv_2pv_flags(%struct.sv* %149, i64* %rlen, i32 2)
  br label %cond.end.194

cond.end.194:                                     ; preds = %cond.false.192, %cond.true.187
  %cond195 = phi i8* [ %148, %cond.true.187 ], [ %call193, %cond.false.192 ]
  store i8* %cond195, i8** %rpv, align 8
  br label %if.end.196

if.end.196:                                       ; preds = %cond.end.194, %if.then.174
  br label %if.end.197

if.end.197:                                       ; preds = %if.end.196, %if.end.167
  %150 = load %struct.sv*, %struct.sv** %targ, align 8
  %151 = load i8*, i8** %rpv, align 8
  %152 = load i64, i64* %rlen, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %150, i8* %151, i64 %152, i32 0)
  %153 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags198 = getelementptr inbounds %struct.sv, %struct.sv* %153, i32 0, i32 2
  %154 = load i32, i32* %sv_flags198, align 4
  %and199 = and i32 %154, 16384
  %tobool200 = icmp ne i32 %and199, 0
  br i1 %tobool200, label %if.then.201, label %if.end.203

if.then.201:                                      ; preds = %if.end.197
  %155 = load %struct.sv*, %struct.sv** %targ, align 8
  %call202 = call i32 @Perl_mg_set(%struct.sv* %155)
  br label %if.end.203

if.end.203:                                       ; preds = %if.then.201, %if.end.197
  %156 = load %struct.sv*, %struct.sv** %targ, align 8
  %157 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %156, %struct.sv** %157, align 8
  store %struct.sv* %156, %struct.sv** %tmp204
  %158 = load %struct.sv*, %struct.sv** %tmp204
  %159 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %159, %struct.sv*** @PL_stack_sp, align 8
  %160 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next205 = getelementptr inbounds %struct.op, %struct.op* %160, i32 0, i32 0
  %161 = load %struct.op*, %struct.op** %op_next205, align 8
  store %struct.op* %161, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.end.203, %if.end.29
  %162 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %162
}

declare %struct.sv* @Perl_amagic_call(%struct.sv*, %struct.sv*, i32, i32) #1

declare i8* @Perl_sv_2pv_flags(%struct.sv*, i64*, i32) #1

declare %struct.sv* @Perl_sv_2mortal(%struct.sv*) #1

declare %struct.sv* @Perl_newSVpvn(i8*, i64) #1

declare void @Perl_sv_setpvn(%struct.sv*, i8*, i64) #1

declare i32 @Perl_mg_get(%struct.sv*) #1

declare void @Perl_sv_setpv(%struct.sv*, i8*) #1

declare i64 @Perl_sv_utf8_upgrade_flags(%struct.sv*, i32) #1

declare void @Perl_sv_catpvn_flags(%struct.sv*, i8*, i64, i32) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_padsv() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %tmp = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 3
  %2 = load i64, i64* %op_targ, align 8
  %3 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %3, i64 %2
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %6 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %6 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %8 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %7, %struct.sv** %8, i32 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %9 = load %struct.sv*, %struct.sv** %targ, align 8
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %10, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %9, %struct.sv** %incdec.ptr, align 8
  store %struct.sv* %9, %struct.sv** %tmp
  %11 = load %struct.sv*, %struct.sv** %tmp
  %12 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 6
  %13 = load i8, i8* %op_flags, align 1
  %conv = zext i8 %13 to i32
  %and = and i32 %conv, 32
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.1, label %if.end.20

if.then.1:                                        ; preds = %if.end
  %14 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 7
  %15 = load i8, i8* %op_private, align 1
  %conv2 = zext i8 %15 to i32
  %and3 = and i32 %conv2, 128
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %if.then.1
  %16 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ6 = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 3
  %17 = load i64, i64* %op_targ6, align 8
  %18 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %arrayidx7 = getelementptr inbounds %struct.sv*, %struct.sv** %18, i64 %17
  call void @Perl_save_clearsv(%struct.sv** %arrayidx7)
  br label %if.end.19

if.else:                                          ; preds = %if.then.1
  %19 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private8 = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 7
  %20 = load i8, i8* %op_private8, align 1
  %conv9 = zext i8 %20 to i32
  %and10 = and i32 %conv9, 96
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %if.then.12, label %if.end.18

if.then.12:                                       ; preds = %if.else
  %21 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %21, %struct.sv*** @PL_stack_sp, align 8
  %22 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ13 = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 3
  %23 = load i64, i64* %op_targ13, align 8
  %24 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %arrayidx14 = getelementptr inbounds %struct.sv*, %struct.sv** %24, i64 %23
  %25 = load %struct.sv*, %struct.sv** %arrayidx14, align 8
  %26 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private15 = getelementptr inbounds %struct.op, %struct.op* %26, i32 0, i32 7
  %27 = load i8, i8* %op_private15, align 1
  %conv16 = zext i8 %27 to i32
  %and17 = and i32 %conv16, 96
  call void @Perl_vivify_ref(%struct.sv* %25, i32 %and17)
  %28 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %28, %struct.sv*** %sp, align 8
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.12, %if.else
  br label %if.end.19

if.end.19:                                        ; preds = %if.end.18, %if.then.5
  br label %if.end.20

if.end.20:                                        ; preds = %if.end.19, %if.end
  %29 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %29, %struct.sv*** @PL_stack_sp, align 8
  %30 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 0
  %31 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %31
}

declare void @Perl_save_clearsv(%struct.sv**) #1

; Function Attrs: nounwind uwtable
define void @Perl_vivify_ref(%struct.sv* %sv, i32 %to_what) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %to_what.addr = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32 %to_what, i32* %to_what.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 8192
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %4, 118423552
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.end.44, label %if.then.4

if.then.4:                                        ; preds = %if.end
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %6, 8388608
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.then.4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_modify, i32 0, i32 0))
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.8, %if.then.4
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %8, 255
  %cmp = icmp ult i32 %and11, 3
  br i1 %cmp, label %if.then.12, label %if.else

if.then.12:                                       ; preds = %if.end.9
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call13 = call signext i8 @Perl_sv_upgrade(%struct.sv* %9, i32 3)
  br label %if.end.26

if.else:                                          ; preds = %if.end.9
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %11, 255
  %cmp16 = icmp uge i32 %and15, 4
  br i1 %cmp16, label %if.then.17, label %if.end.25

if.then.17:                                       ; preds = %if.else
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags18 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags18, align 4
  %and19 = and i32 %13, 2097152
  %tobool20 = icmp ne i32 %and19, 0
  br i1 %tobool20, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.17
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call21 = call i32 @Perl_sv_backoff(%struct.sv* %14)
  %tobool22 = icmp ne i32 %call21, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.17
  %15 = phi i1 [ false, %if.then.17 ], [ %tobool22, %land.rhs ]
  %land.ext = zext i1 %15 to i32
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 0
  %17 = load i8*, i8** %sv_any, align 8
  %18 = bitcast i8* %17 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %18, i32 0, i32 0
  %19 = load i8*, i8** %xpv_pv, align 8
  call void @Perl_safesysfree(i8* %19)
  %20 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any23 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 0
  %21 = load i8*, i8** %sv_any23, align 8
  %22 = bitcast i8* %21 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %22, i32 0, i32 1
  store i64 0, i64* %xpv_cur, align 8
  %23 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any24 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 0
  %24 = load i8*, i8** %sv_any24, align 8
  %25 = bitcast i8* %24 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %25, i32 0, i32 2
  store i64 0, i64* %xpv_len, align 8
  br label %if.end.25

if.end.25:                                        ; preds = %land.end, %if.else
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %if.then.12
  %26 = load i32, i32* %to_what.addr, align 4
  switch i32 %26, label %sw.epilog [
    i32 96, label %sw.bb
    i32 32, label %sw.bb.29
    i32 64, label %sw.bb.33
  ]

sw.bb:                                            ; preds = %if.end.26
  %call27 = call %struct.sv* @Perl_newSV(i64 0)
  %27 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any28 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 0
  %28 = load i8*, i8** %sv_any28, align 8
  %29 = bitcast i8* %28 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %29, i32 0, i32 0
  store %struct.sv* %call27, %struct.sv** %xrv_rv, align 8
  br label %sw.epilog

sw.bb.29:                                         ; preds = %if.end.26
  %call30 = call %struct.av* @Perl_newAV()
  %30 = bitcast %struct.av* %call30 to %struct.sv*
  %31 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any31 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 0
  %32 = load i8*, i8** %sv_any31, align 8
  %33 = bitcast i8* %32 to %struct.xrv*
  %xrv_rv32 = getelementptr inbounds %struct.xrv, %struct.xrv* %33, i32 0, i32 0
  store %struct.sv* %30, %struct.sv** %xrv_rv32, align 8
  br label %sw.epilog

sw.bb.33:                                         ; preds = %if.end.26
  %call34 = call %struct.hv* @Perl_newHV()
  %34 = bitcast %struct.hv* %call34 to %struct.sv*
  %35 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any35 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 0
  %36 = load i8*, i8** %sv_any35, align 8
  %37 = bitcast i8* %36 to %struct.xrv*
  %xrv_rv36 = getelementptr inbounds %struct.xrv, %struct.xrv* %37, i32 0, i32 0
  store %struct.sv* %34, %struct.sv** %xrv_rv36, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end.26, %sw.bb.33, %sw.bb.29, %sw.bb
  %38 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 2
  %39 = load i32, i32* %sv_flags37, align 4
  %or = or i32 %39, 524288
  store i32 %or, i32* %sv_flags37, align 4
  %40 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags38 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 2
  %41 = load i32, i32* %sv_flags38, align 4
  %and39 = and i32 %41, 16384
  %tobool40 = icmp ne i32 %and39, 0
  br i1 %tobool40, label %if.then.41, label %if.end.43

if.then.41:                                       ; preds = %sw.epilog
  %42 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call42 = call i32 @Perl_mg_set(%struct.sv* %42)
  br label %if.end.43

if.end.43:                                        ; preds = %if.then.41, %sw.epilog
  br label %if.end.44

if.end.44:                                        ; preds = %if.end.43, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_readline() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %sp2 = alloca %struct.sv**, align 8
  %tmpsv = alloca %struct.sv*, align 8
  %arg = alloca %struct.sv*, align 8
  %tmp = alloca %struct.sv*, align 8
  %sp33 = alloca %struct.sv**, align 8
  %tmp39 = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 6
  %3 = load i8, i8* %op_flags, align 1
  %conv = zext i8 %3 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr1 = getelementptr inbounds %struct.sv*, %struct.sv** %4, i32 -1
  store %struct.sv** %incdec.ptr1, %struct.sv*** %sp, align 8
  %5 = load %struct.sv*, %struct.sv** %4, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 3
  %7 = load i64, i64* %op_targ, align 8
  %8 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %8, i64 %7
  %9 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %5, %cond.true ], [ %9, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %targ, align 8
  %10 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %10, %struct.sv*** %sp2, align 8
  %11 = load i64, i64* @PL_amagic_generation, align 8
  %tobool3 = icmp ne i64 %11, 0
  br i1 %tobool3, label %if.then, label %if.end.15

if.then:                                          ; preds = %cond.end
  %12 = load %struct.sv**, %struct.sv*** %sp2, align 8
  %arrayidx4 = getelementptr inbounds %struct.sv*, %struct.sv** %12, i64 0
  %13 = load %struct.sv*, %struct.sv** %arrayidx4, align 8
  store %struct.sv* %13, %struct.sv** %arg, align 8
  br label %am_again

am_again:                                         ; preds = %if.then
  %14 = load %struct.sv*, %struct.sv** %arg, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags, align 4
  %and5 = and i32 %15, 268435456
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %land.lhs.true, label %if.end.14

land.lhs.true:                                    ; preds = %am_again
  %16 = load %struct.sv*, %struct.sv** %arg, align 8
  %call = call %struct.sv* @Perl_amagic_call(%struct.sv* %16, %struct.sv* @PL_sv_undef, i32 63, i32 9)
  store %struct.sv* %call, %struct.sv** %tmpsv, align 8
  %tobool7 = icmp ne %struct.sv* %call, null
  br i1 %tobool7, label %if.then.8, label %if.end.14

if.then.8:                                        ; preds = %land.lhs.true
  %17 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %17, %struct.sv*** %sp2, align 8
  %18 = load %struct.sv*, %struct.sv** %targ, align 8
  %19 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %18, %struct.sv* %19, i32 2)
  %20 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %21, 16384
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %if.then.12, label %if.end

if.then.12:                                       ; preds = %if.then.8
  %22 = load %struct.sv*, %struct.sv** %targ, align 8
  %call13 = call i32 @Perl_mg_set(%struct.sv* %22)
  br label %if.end

if.end:                                           ; preds = %if.then.12, %if.then.8
  %23 = load %struct.sv*, %struct.sv** %targ, align 8
  %24 = load %struct.sv**, %struct.sv*** %sp2, align 8
  store %struct.sv* %23, %struct.sv** %24, align 8
  store %struct.sv* %23, %struct.sv** %tmp
  %25 = load %struct.sv*, %struct.sv** %tmp
  %26 = load %struct.sv**, %struct.sv*** %sp2, align 8
  store %struct.sv** %26, %struct.sv*** @PL_stack_sp, align 8
  %27 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %27, i32 0, i32 0
  %28 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %28, %struct.op** %retval
  br label %return

if.end.14:                                        ; preds = %land.lhs.true, %am_again
  br label %if.end.15

if.end.15:                                        ; preds = %if.end.14, %cond.end
  %29 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %incdec.ptr16 = getelementptr inbounds %struct.sv*, %struct.sv** %29, i32 -1
  store %struct.sv** %incdec.ptr16, %struct.sv*** @PL_stack_sp, align 8
  %30 = load %struct.sv*, %struct.sv** %29, align 8
  %31 = bitcast %struct.sv* %30 to %struct.gv*
  store %struct.gv* %31, %struct.gv** @PL_last_in_gv, align 8
  %32 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_flags17 = getelementptr inbounds %struct.gv, %struct.gv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %33, 255
  %cmp = icmp ne i32 %and18, 13
  br i1 %cmp, label %if.then.20, label %if.end.44

if.then.20:                                       ; preds = %if.end.15
  %34 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_flags21 = getelementptr inbounds %struct.gv, %struct.gv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags21, align 4
  %and22 = and i32 %35, 524288
  %tobool23 = icmp ne i32 %and22, 0
  br i1 %tobool23, label %land.lhs.true.24, label %if.else

land.lhs.true.24:                                 ; preds = %if.then.20
  %36 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %36, i32 0, i32 0
  %37 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %38 = bitcast %struct.xpvgv* %37 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %38, i32 0, i32 0
  %39 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  %sv_flags25 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags25, align 4
  %and26 = and i32 %40, 255
  %cmp27 = icmp eq i32 %and26, 13
  br i1 %cmp27, label %if.then.29, label %if.else

if.then.29:                                       ; preds = %land.lhs.true.24
  %41 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_any30 = getelementptr inbounds %struct.gv, %struct.gv* %41, i32 0, i32 0
  %42 = load %struct.xpvgv*, %struct.xpvgv** %sv_any30, align 8
  %43 = bitcast %struct.xpvgv* %42 to %struct.xrv*
  %xrv_rv31 = getelementptr inbounds %struct.xrv, %struct.xrv* %43, i32 0, i32 0
  %44 = load %struct.sv*, %struct.sv** %xrv_rv31, align 8
  %45 = bitcast %struct.sv* %44 to %struct.gv*
  store %struct.gv* %45, %struct.gv** @PL_last_in_gv, align 8
  br label %if.end.43

if.else:                                          ; preds = %land.lhs.true.24, %if.then.20
  %46 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %46, %struct.sv*** %sp33, align 8
  %47 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %48 = load %struct.sv**, %struct.sv*** %sp33, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %47 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %48 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp34 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp34, label %if.then.36, label %if.end.38

if.then.36:                                       ; preds = %if.else
  %49 = load %struct.sv**, %struct.sv*** %sp33, align 8
  %50 = load %struct.sv**, %struct.sv*** %sp33, align 8
  %call37 = call %struct.sv** @Perl_stack_grow(%struct.sv** %49, %struct.sv** %50, i32 1)
  store %struct.sv** %call37, %struct.sv*** %sp33, align 8
  br label %if.end.38

if.end.38:                                        ; preds = %if.then.36, %if.else
  %51 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %52 = bitcast %struct.gv* %51 to %struct.sv*
  %53 = load %struct.sv**, %struct.sv*** %sp33, align 8
  %incdec.ptr40 = getelementptr inbounds %struct.sv*, %struct.sv** %53, i32 1
  store %struct.sv** %incdec.ptr40, %struct.sv*** %sp33, align 8
  store %struct.sv* %52, %struct.sv** %incdec.ptr40, align 8
  store %struct.sv* %52, %struct.sv** %tmp39
  %54 = load %struct.sv*, %struct.sv** %tmp39
  %55 = load %struct.sv**, %struct.sv*** %sp33, align 8
  store %struct.sv** %55, %struct.sv*** @PL_stack_sp, align 8
  %call41 = call %struct.op* @Perl_pp_rv2gv()
  %56 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %incdec.ptr42 = getelementptr inbounds %struct.sv*, %struct.sv** %56, i32 -1
  store %struct.sv** %incdec.ptr42, %struct.sv*** @PL_stack_sp, align 8
  %57 = load %struct.sv*, %struct.sv** %56, align 8
  %58 = bitcast %struct.sv* %57 to %struct.gv*
  store %struct.gv* %58, %struct.gv** @PL_last_in_gv, align 8
  br label %if.end.43

if.end.43:                                        ; preds = %if.end.38, %if.then.29
  br label %if.end.44

if.end.44:                                        ; preds = %if.end.43, %if.end.15
  %call45 = call %struct.op* @Perl_do_readline()
  store %struct.op* %call45, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.end.44, %if.end
  %59 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %59
}

declare %struct.op* @Perl_pp_rv2gv() #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_do_readline() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %sv = alloca %struct.sv*, align 8
  %tmplen = alloca i64, align 8
  %offset = alloca i64, align 8
  %fp = alloca %struct._PerlIO**, align 8
  %io = alloca %struct.io*, align 8
  %type = alloca i32, align 4
  %gimme = alloca i32, align 4
  %mg = alloca %struct.magic*, align 8
  %tmp = alloca i32, align 4
  %tmp65 = alloca %struct.sv*, align 8
  %result = alloca %struct.sv*, align 8
  %tmp91 = alloca %struct.sv*, align 8
  %tmp287 = alloca %struct.sv*, align 8
  %n_a = alloca i64, align 8
  %tmp455 = alloca %struct.sv*, align 8
  %tmp501 = alloca %struct.sv*, align 8
  %tmps = alloca i8*, align 8
  %s = alloca i8*, align 8
  %len = alloca i64, align 8
  %f = alloca i8*, align 8
  %tmp648 = alloca i64, align 8
  %tmp682 = alloca i64, align 8
  %tmp686 = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  %2 = load i8, i8* %op_flags, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %3, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %4 = load %struct.sv*, %struct.sv** %3, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 3
  %6 = load i64, i64* %op_targ, align 8
  %7 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %7, i64 %6
  %8 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %4, %cond.true ], [ %8, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %targ, align 8
  store i64 0, i64* %tmplen, align 8
  %9 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %tobool1 = icmp ne %struct.gv* %9, null
  br i1 %tobool1, label %land.lhs.true, label %cond.false.9

land.lhs.true:                                    ; preds = %cond.end
  %10 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %11 = bitcast %struct.gv* %10 to %struct.sv*
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags, align 4
  %and2 = and i32 %12, 255
  %cmp = icmp eq i32 %and2, 13
  br i1 %cmp, label %land.lhs.true.4, label %cond.false.9

land.lhs.true.4:                                  ; preds = %land.lhs.true
  %13 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %13, i32 0, i32 0
  %14 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %14, i32 0, i32 7
  %15 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %tobool5 = icmp ne %struct.gp* %15, null
  br i1 %tobool5, label %cond.true.6, label %cond.false.9

cond.true.6:                                      ; preds = %land.lhs.true.4
  %16 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_any7 = getelementptr inbounds %struct.gv, %struct.gv* %16, i32 0, i32 0
  %17 = load %struct.xpvgv*, %struct.xpvgv** %sv_any7, align 8
  %xgv_gp8 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %17, i32 0, i32 7
  %18 = load %struct.gp*, %struct.gp** %xgv_gp8, align 8
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %18, i32 0, i32 2
  %19 = load %struct.io*, %struct.io** %gp_io, align 8
  br label %cond.end.10

cond.false.9:                                     ; preds = %land.lhs.true.4, %land.lhs.true, %cond.end
  br label %cond.end.10

cond.end.10:                                      ; preds = %cond.false.9, %cond.true.6
  %cond11 = phi %struct.io* [ %19, %cond.true.6 ], [ null, %cond.false.9 ]
  store %struct.io* %cond11, %struct.io** %io, align 8
  %20 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 4
  %21 = load i16, i16* %op_type, align 2
  %conv12 = zext i16 %21 to i32
  store i32 %conv12, i32* %type, align 4
  %22 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags13 = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 6
  %23 = load i8, i8* %op_flags13, align 1
  %conv14 = zext i8 %23 to i32
  %and15 = and i32 %conv14, 3
  %cmp16 = icmp eq i32 %and15, 1
  br i1 %cmp16, label %cond.true.18, label %cond.false.19

cond.true.18:                                     ; preds = %cond.end.10
  br label %cond.end.38

cond.false.19:                                    ; preds = %cond.end.10
  %24 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags20 = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 6
  %25 = load i8, i8* %op_flags20, align 1
  %conv21 = zext i8 %25 to i32
  %and22 = and i32 %conv21, 3
  %cmp23 = icmp eq i32 %and22, 2
  br i1 %cmp23, label %cond.true.25, label %cond.false.26

cond.true.25:                                     ; preds = %cond.false.19
  br label %cond.end.36

cond.false.26:                                    ; preds = %cond.false.19
  %26 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags27 = getelementptr inbounds %struct.op, %struct.op* %26, i32 0, i32 6
  %27 = load i8, i8* %op_flags27, align 1
  %conv28 = zext i8 %27 to i32
  %and29 = and i32 %conv28, 3
  %cmp30 = icmp eq i32 %and29, 3
  br i1 %cmp30, label %cond.true.32, label %cond.false.33

cond.true.32:                                     ; preds = %cond.false.26
  br label %cond.end.34

cond.false.33:                                    ; preds = %cond.false.26
  %call = call i32 @Perl_block_gimme()
  br label %cond.end.34

cond.end.34:                                      ; preds = %cond.false.33, %cond.true.32
  %cond35 = phi i32 [ 1, %cond.true.32 ], [ %call, %cond.false.33 ]
  br label %cond.end.36

cond.end.36:                                      ; preds = %cond.end.34, %cond.true.25
  %cond37 = phi i32 [ 0, %cond.true.25 ], [ %cond35, %cond.end.34 ]
  br label %cond.end.38

cond.end.38:                                      ; preds = %cond.end.36, %cond.true.18
  %cond39 = phi i32 [ 128, %cond.true.18 ], [ %cond37, %cond.end.36 ]
  store i32 %cond39, i32* %gimme, align 4
  %28 = load %struct.io*, %struct.io** %io, align 8
  %tobool40 = icmp ne %struct.io* %28, null
  br i1 %tobool40, label %land.lhs.true.41, label %if.end.94

land.lhs.true.41:                                 ; preds = %cond.end.38
  %29 = load %struct.io*, %struct.io** %io, align 8
  %30 = bitcast %struct.io* %29 to %struct.sv*
  %sv_flags42 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags42, align 4
  %and43 = and i32 %31, 32768
  %tobool44 = icmp ne i32 %and43, 0
  br i1 %tobool44, label %cond.true.45, label %cond.false.47

cond.true.45:                                     ; preds = %land.lhs.true.41
  %32 = load %struct.io*, %struct.io** %io, align 8
  %33 = bitcast %struct.io* %32 to %struct.sv*
  %call46 = call %struct.magic* @Perl_mg_find(%struct.sv* %33, i32 113)
  br label %cond.end.48

cond.false.47:                                    ; preds = %land.lhs.true.41
  br label %cond.end.48

cond.end.48:                                      ; preds = %cond.false.47, %cond.true.45
  %cond49 = phi %struct.magic* [ %call46, %cond.true.45 ], [ null, %cond.false.47 ]
  store %struct.magic* %cond49, %struct.magic** %mg, align 8
  %tobool50 = icmp ne %struct.magic* %cond49, null
  br i1 %tobool50, label %if.then, label %if.end.94

if.then:                                          ; preds = %cond.end.48
  %34 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr51 = getelementptr inbounds i32, i32* %34, i32 1
  store i32* %incdec.ptr51, i32** @PL_markstack_ptr, align 8
  %35 = load i32*, i32** @PL_markstack_max, align 8
  %cmp52 = icmp eq i32* %incdec.ptr51, %35
  br i1 %cmp52, label %if.then.54, label %if.end

if.then.54:                                       ; preds = %if.then
  call void @Perl_markstack_grow()
  br label %if.end

if.end:                                           ; preds = %if.then.54, %if.then
  %36 = load %struct.sv**, %struct.sv*** %sp, align 8
  %37 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %36 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %37 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv55 = trunc i64 %sub.ptr.div to i32
  %38 = load i32*, i32** @PL_markstack_ptr, align 8
  store i32 %conv55, i32* %38, align 4
  store i32 %conv55, i32* %tmp
  %39 = load i32, i32* %tmp
  %40 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %41 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast56 = ptrtoint %struct.sv** %40 to i64
  %sub.ptr.rhs.cast57 = ptrtoint %struct.sv** %41 to i64
  %sub.ptr.sub58 = sub i64 %sub.ptr.lhs.cast56, %sub.ptr.rhs.cast57
  %sub.ptr.div59 = sdiv exact i64 %sub.ptr.sub58, 8
  %cmp60 = icmp slt i64 %sub.ptr.div59, 1
  br i1 %cmp60, label %if.then.62, label %if.end.64

if.then.62:                                       ; preds = %if.end
  %42 = load %struct.sv**, %struct.sv*** %sp, align 8
  %43 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call63 = call %struct.sv** @Perl_stack_grow(%struct.sv** %42, %struct.sv** %43, i32 1)
  store %struct.sv** %call63, %struct.sv*** %sp, align 8
  br label %if.end.64

if.end.64:                                        ; preds = %if.then.62, %if.end
  %44 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %44, i32 0, i32 5
  %45 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  %tobool66 = icmp ne %struct.sv* %45, null
  br i1 %tobool66, label %cond.true.67, label %cond.false.69

cond.true.67:                                     ; preds = %if.end.64
  %46 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj68 = getelementptr inbounds %struct.magic, %struct.magic* %46, i32 0, i32 5
  %47 = load %struct.sv*, %struct.sv** %mg_obj68, align 8
  br label %cond.end.72

cond.false.69:                                    ; preds = %if.end.64
  %48 = load %struct.io*, %struct.io** %io, align 8
  %49 = bitcast %struct.io* %48 to %struct.sv*
  %call70 = call %struct.sv* @Perl_newRV(%struct.sv* %49)
  %call71 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call70)
  br label %cond.end.72

cond.end.72:                                      ; preds = %cond.false.69, %cond.true.67
  %cond73 = phi %struct.sv* [ %47, %cond.true.67 ], [ %call71, %cond.false.69 ]
  %50 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr74 = getelementptr inbounds %struct.sv*, %struct.sv** %50, i32 1
  store %struct.sv** %incdec.ptr74, %struct.sv*** %sp, align 8
  store %struct.sv* %cond73, %struct.sv** %incdec.ptr74, align 8
  store %struct.sv* %cond73, %struct.sv** %tmp65
  %51 = load %struct.sv*, %struct.sv** %tmp65
  %52 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %52, %struct.sv*** @PL_stack_sp, align 8
  call void @Perl_push_scope()
  %53 = load i32, i32* %gimme, align 4
  %call75 = call i32 @Perl_call_method(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0), i32 %53)
  call void @Perl_pop_scope()
  %54 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %54, %struct.sv*** %sp, align 8
  %55 = load i32, i32* %gimme, align 4
  %cmp76 = icmp eq i32 %55, 0
  br i1 %cmp76, label %if.then.78, label %if.end.93

if.then.78:                                       ; preds = %cond.end.72
  %56 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr80 = getelementptr inbounds %struct.sv*, %struct.sv** %56, i32 -1
  store %struct.sv** %incdec.ptr80, %struct.sv*** %sp, align 8
  %57 = load %struct.sv*, %struct.sv** %56, align 8
  store %struct.sv* %57, %struct.sv** %result, align 8
  %58 = load %struct.sv*, %struct.sv** %targ, align 8
  %59 = load %struct.sv*, %struct.sv** %result, align 8
  %cmp81 = icmp ne %struct.sv* %58, %59
  br i1 %cmp81, label %if.then.83, label %if.end.84

if.then.83:                                       ; preds = %if.then.78
  %60 = load %struct.sv*, %struct.sv** %targ, align 8
  %61 = load %struct.sv*, %struct.sv** %result, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %60, %struct.sv* %61, i32 18)
  br label %if.end.84

if.end.84:                                        ; preds = %if.then.83, %if.then.78
  %62 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags85 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 2
  %63 = load i32, i32* %sv_flags85, align 4
  %and86 = and i32 %63, 16384
  %tobool87 = icmp ne i32 %and86, 0
  br i1 %tobool87, label %if.then.88, label %if.end.90

if.then.88:                                       ; preds = %if.end.84
  %64 = load %struct.sv*, %struct.sv** %targ, align 8
  %call89 = call i32 @Perl_mg_set(%struct.sv* %64)
  br label %if.end.90

if.end.90:                                        ; preds = %if.then.88, %if.end.84
  %65 = load %struct.sv*, %struct.sv** %targ, align 8
  %66 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr92 = getelementptr inbounds %struct.sv*, %struct.sv** %66, i32 1
  store %struct.sv** %incdec.ptr92, %struct.sv*** %sp, align 8
  store %struct.sv* %65, %struct.sv** %incdec.ptr92, align 8
  store %struct.sv* %65, %struct.sv** %tmp91
  %67 = load %struct.sv*, %struct.sv** %tmp91
  br label %if.end.93

if.end.93:                                        ; preds = %if.end.90, %cond.end.72
  %68 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %68, %struct.sv*** @PL_stack_sp, align 8
  %69 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %69, i32 0, i32 0
  %70 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %70, %struct.op** %retval
  br label %return

if.end.94:                                        ; preds = %cond.end.48, %cond.end.38
  store %struct._PerlIO** null, %struct._PerlIO*** %fp, align 8
  %71 = load %struct.io*, %struct.io** %io, align 8
  %tobool95 = icmp ne %struct.io* %71, null
  br i1 %tobool95, label %if.then.96, label %if.end.205

if.then.96:                                       ; preds = %if.end.94
  %72 = load %struct.io*, %struct.io** %io, align 8
  %sv_any97 = getelementptr inbounds %struct.io, %struct.io* %72, i32 0, i32 0
  %73 = load %struct.xpvio*, %struct.xpvio** %sv_any97, align 8
  %xio_ifp = getelementptr inbounds %struct.xpvio, %struct.xpvio* %73, i32 0, i32 7
  %74 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ifp, align 8
  store %struct._PerlIO** %74, %struct._PerlIO*** %fp, align 8
  %75 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %tobool98 = icmp ne %struct._PerlIO** %75, null
  br i1 %tobool98, label %if.else.166, label %if.then.99

if.then.99:                                       ; preds = %if.then.96
  %76 = load %struct.io*, %struct.io** %io, align 8
  %sv_any100 = getelementptr inbounds %struct.io, %struct.io* %76, i32 0, i32 0
  %77 = load %struct.xpvio*, %struct.xpvio** %sv_any100, align 8
  %xio_flags = getelementptr inbounds %struct.xpvio, %struct.xpvio* %77, i32 0, i32 22
  %78 = load i8, i8* %xio_flags, align 1
  %conv101 = sext i8 %78 to i32
  %and102 = and i32 %conv101, 1
  %tobool103 = icmp ne i32 %and102, 0
  br i1 %tobool103, label %if.then.104, label %if.else

if.then.104:                                      ; preds = %if.then.99
  %79 = load %struct.io*, %struct.io** %io, align 8
  %sv_any105 = getelementptr inbounds %struct.io, %struct.io* %79, i32 0, i32 0
  %80 = load %struct.xpvio*, %struct.xpvio** %sv_any105, align 8
  %xio_flags106 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %80, i32 0, i32 22
  %81 = load i8, i8* %xio_flags106, align 1
  %conv107 = sext i8 %81 to i32
  %and108 = and i32 %conv107, 2
  %tobool109 = icmp ne i32 %and108, 0
  br i1 %tobool109, label %if.then.110, label %if.end.153

if.then.110:                                      ; preds = %if.then.104
  %82 = load %struct.io*, %struct.io** %io, align 8
  %sv_any111 = getelementptr inbounds %struct.io, %struct.io* %82, i32 0, i32 0
  %83 = load %struct.xpvio*, %struct.xpvio** %sv_any111, align 8
  %xio_lines = getelementptr inbounds %struct.xpvio, %struct.xpvio* %83, i32 0, i32 10
  store i64 0, i64* %xio_lines, align 8
  %84 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_any112 = getelementptr inbounds %struct.gv, %struct.gv* %84, i32 0, i32 0
  %85 = load %struct.xpvgv*, %struct.xpvgv** %sv_any112, align 8
  %xgv_gp113 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %85, i32 0, i32 7
  %86 = load %struct.gp*, %struct.gp** %xgv_gp113, align 8
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %86, i32 0, i32 4
  %87 = load %struct.av*, %struct.av** %gp_av, align 8
  %tobool114 = icmp ne %struct.av* %87, null
  br i1 %tobool114, label %cond.true.115, label %cond.false.119

cond.true.115:                                    ; preds = %if.then.110
  %88 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_any116 = getelementptr inbounds %struct.gv, %struct.gv* %88, i32 0, i32 0
  %89 = load %struct.xpvgv*, %struct.xpvgv** %sv_any116, align 8
  %xgv_gp117 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %89, i32 0, i32 7
  %90 = load %struct.gp*, %struct.gp** %xgv_gp117, align 8
  %gp_av118 = getelementptr inbounds %struct.gp, %struct.gp* %90, i32 0, i32 4
  %91 = load %struct.av*, %struct.av** %gp_av118, align 8
  br label %cond.end.124

cond.false.119:                                   ; preds = %if.then.110
  %92 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %call120 = call %struct.gv* @Perl_gv_AVadd(%struct.gv* %92)
  %sv_any121 = getelementptr inbounds %struct.gv, %struct.gv* %call120, i32 0, i32 0
  %93 = load %struct.xpvgv*, %struct.xpvgv** %sv_any121, align 8
  %xgv_gp122 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %93, i32 0, i32 7
  %94 = load %struct.gp*, %struct.gp** %xgv_gp122, align 8
  %gp_av123 = getelementptr inbounds %struct.gp, %struct.gp* %94, i32 0, i32 4
  %95 = load %struct.av*, %struct.av** %gp_av123, align 8
  br label %cond.end.124

cond.end.124:                                     ; preds = %cond.false.119, %cond.true.115
  %cond125 = phi %struct.av* [ %91, %cond.true.115 ], [ %95, %cond.false.119 ]
  %call126 = call i32 @Perl_av_len(%struct.av* %cond125)
  %cmp127 = icmp slt i32 %call126, 0
  br i1 %cmp127, label %if.then.129, label %if.end.152

if.then.129:                                      ; preds = %cond.end.124
  %96 = load %struct.io*, %struct.io** %io, align 8
  %sv_any130 = getelementptr inbounds %struct.io, %struct.io* %96, i32 0, i32 0
  %97 = load %struct.xpvio*, %struct.xpvio** %sv_any130, align 8
  %xio_flags131 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %97, i32 0, i32 22
  %98 = load i8, i8* %xio_flags131, align 1
  %conv132 = sext i8 %98 to i32
  %and133 = and i32 %conv132, -3
  %conv134 = trunc i32 %and133 to i8
  store i8 %conv134, i8* %xio_flags131, align 1
  %99 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %call135 = call signext i8 @Perl_do_open(%struct.gv* %99, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i32 0, i32 0), i32 1, i32 0, i32 0, i32 0, %struct._PerlIO** null)
  %100 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_any136 = getelementptr inbounds %struct.gv, %struct.gv* %100, i32 0, i32 0
  %101 = load %struct.xpvgv*, %struct.xpvgv** %sv_any136, align 8
  %xgv_gp137 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %101, i32 0, i32 7
  %102 = load %struct.gp*, %struct.gp** %xgv_gp137, align 8
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %102, i32 0, i32 0
  %103 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  call void @Perl_sv_setpvn(%struct.sv* %103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i32 0, i32 0), i64 1)
  %104 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_any138 = getelementptr inbounds %struct.gv, %struct.gv* %104, i32 0, i32 0
  %105 = load %struct.xpvgv*, %struct.xpvgv** %sv_any138, align 8
  %xgv_gp139 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %105, i32 0, i32 7
  %106 = load %struct.gp*, %struct.gp** %xgv_gp139, align 8
  %gp_sv140 = getelementptr inbounds %struct.gp, %struct.gp* %106, i32 0, i32 0
  %107 = load %struct.sv*, %struct.sv** %gp_sv140, align 8
  %sv_flags141 = getelementptr inbounds %struct.sv, %struct.sv* %107, i32 0, i32 2
  %108 = load i32, i32* %sv_flags141, align 4
  %and142 = and i32 %108, 16384
  %tobool143 = icmp ne i32 %and142, 0
  br i1 %tobool143, label %if.then.144, label %if.end.149

if.then.144:                                      ; preds = %if.then.129
  %109 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_any145 = getelementptr inbounds %struct.gv, %struct.gv* %109, i32 0, i32 0
  %110 = load %struct.xpvgv*, %struct.xpvgv** %sv_any145, align 8
  %xgv_gp146 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %110, i32 0, i32 7
  %111 = load %struct.gp*, %struct.gp** %xgv_gp146, align 8
  %gp_sv147 = getelementptr inbounds %struct.gp, %struct.gp* %111, i32 0, i32 0
  %112 = load %struct.sv*, %struct.sv** %gp_sv147, align 8
  %call148 = call i32 @Perl_mg_set(%struct.sv* %112)
  br label %if.end.149

if.end.149:                                       ; preds = %if.then.144, %if.then.129
  %113 = load %struct.io*, %struct.io** %io, align 8
  %sv_any150 = getelementptr inbounds %struct.io, %struct.io* %113, i32 0, i32 0
  %114 = load %struct.xpvio*, %struct.xpvio** %sv_any150, align 8
  %xio_ifp151 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %114, i32 0, i32 7
  %115 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ifp151, align 8
  store %struct._PerlIO** %115, %struct._PerlIO*** %fp, align 8
  br label %have_fp

if.end.152:                                       ; preds = %cond.end.124
  br label %if.end.153

if.end.153:                                       ; preds = %if.end.152, %if.then.104
  %116 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %call154 = call %struct._PerlIO** @Perl_nextargv(%struct.gv* %116)
  store %struct._PerlIO** %call154, %struct._PerlIO*** %fp, align 8
  %117 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %tobool155 = icmp ne %struct._PerlIO** %117, null
  br i1 %tobool155, label %if.end.158, label %if.then.156

if.then.156:                                      ; preds = %if.end.153
  %118 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %call157 = call signext i8 @Perl_do_close(%struct.gv* %118, i8 signext 0)
  br label %if.end.158

if.end.158:                                       ; preds = %if.then.156, %if.end.153
  br label %if.end.165

if.else:                                          ; preds = %if.then.99
  %119 = load i32, i32* %type, align 4
  %cmp159 = icmp eq i32 %119, 25
  br i1 %cmp159, label %if.then.161, label %if.end.164

if.then.161:                                      ; preds = %if.else
  %120 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr162 = getelementptr inbounds %struct.sv*, %struct.sv** %120, i32 -1
  store %struct.sv** %incdec.ptr162, %struct.sv*** %sp, align 8
  %121 = load %struct.sv*, %struct.sv** %120, align 8
  %122 = load %struct.io*, %struct.io** %io, align 8
  %call163 = call %struct._PerlIO** @Perl_start_glob(%struct.sv* %121, %struct.io* %122)
  store %struct._PerlIO** %call163, %struct._PerlIO*** %fp, align 8
  br label %if.end.164

if.end.164:                                       ; preds = %if.then.161, %if.else
  br label %if.end.165

if.end.165:                                       ; preds = %if.end.164, %if.end.158
  br label %if.end.204

if.else.166:                                      ; preds = %if.then.96
  %123 = load i32, i32* %type, align 4
  %cmp167 = icmp eq i32 %123, 25
  br i1 %cmp167, label %if.then.169, label %if.else.171

if.then.169:                                      ; preds = %if.else.166
  %124 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr170 = getelementptr inbounds %struct.sv*, %struct.sv** %124, i32 -1
  store %struct.sv** %incdec.ptr170, %struct.sv*** %sp, align 8
  br label %if.end.203

if.else.171:                                      ; preds = %if.else.166
  %125 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %125, i32 0, i32 14
  %126 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp172 = icmp ne %struct.sv* %126, null
  br i1 %cmp172, label %land.lhs.true.174, label %lor.lhs.false.188

land.lhs.true.174:                                ; preds = %if.else.171
  %127 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings175 = getelementptr inbounds %struct.cop, %struct.cop* %127, i32 0, i32 14
  %128 = load %struct.sv*, %struct.sv** %cop_warnings175, align 8
  %cmp176 = icmp ne %struct.sv* %128, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp176, label %land.lhs.true.178, label %lor.lhs.false.188

land.lhs.true.178:                                ; preds = %land.lhs.true.174
  %129 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings179 = getelementptr inbounds %struct.cop, %struct.cop* %129, i32 0, i32 14
  %130 = load %struct.sv*, %struct.sv** %cop_warnings179, align 8
  %cmp180 = icmp eq %struct.sv* %130, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp180, label %land.lhs.true.196, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.178
  %131 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings182 = getelementptr inbounds %struct.cop, %struct.cop* %131, i32 0, i32 14
  %132 = load %struct.sv*, %struct.sv** %cop_warnings182, align 8
  %sv_any183 = getelementptr inbounds %struct.sv, %struct.sv* %132, i32 0, i32 0
  %133 = load i8*, i8** %sv_any183, align 8
  %134 = bitcast i8* %133 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %134, i32 0, i32 0
  %135 = load i8*, i8** %xpv_pv, align 8
  %arrayidx184 = getelementptr inbounds i8, i8* %135, i64 1
  %136 = load i8, i8* %arrayidx184, align 1
  %conv185 = sext i8 %136 to i32
  %and186 = and i32 %conv185, 4
  %tobool187 = icmp ne i32 %and186, 0
  br i1 %tobool187, label %land.lhs.true.196, label %lor.lhs.false.188

lor.lhs.false.188:                                ; preds = %lor.lhs.false, %land.lhs.true.174, %if.else.171
  %137 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings189 = getelementptr inbounds %struct.cop, %struct.cop* %137, i32 0, i32 14
  %138 = load %struct.sv*, %struct.sv** %cop_warnings189, align 8
  %cmp190 = icmp eq %struct.sv* %138, null
  br i1 %cmp190, label %land.lhs.true.192, label %if.end.202

land.lhs.true.192:                                ; preds = %lor.lhs.false.188
  %139 = load i8, i8* @PL_dowarn, align 1
  %conv193 = zext i8 %139 to i32
  %and194 = and i32 %conv193, 1
  %tobool195 = icmp ne i32 %and194, 0
  br i1 %tobool195, label %land.lhs.true.196, label %if.end.202

land.lhs.true.196:                                ; preds = %land.lhs.true.192, %lor.lhs.false, %land.lhs.true.178
  %140 = load %struct.io*, %struct.io** %io, align 8
  %sv_any197 = getelementptr inbounds %struct.io, %struct.io* %140, i32 0, i32 0
  %141 = load %struct.xpvio*, %struct.xpvio** %sv_any197, align 8
  %xio_type = getelementptr inbounds %struct.xpvio, %struct.xpvio* %141, i32 0, i32 21
  %142 = load i8, i8* %xio_type, align 1
  %conv198 = sext i8 %142 to i32
  %cmp199 = icmp eq i32 %conv198, 62
  br i1 %cmp199, label %if.then.201, label %if.end.202

if.then.201:                                      ; preds = %land.lhs.true.196
  %143 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %144 = load %struct.io*, %struct.io** %io, align 8
  call void @Perl_report_evil_fh(%struct.gv* %143, %struct.io* %144, i32 -2)
  br label %if.end.202

if.end.202:                                       ; preds = %if.then.201, %land.lhs.true.196, %land.lhs.true.192, %lor.lhs.false.188
  br label %if.end.203

if.end.203:                                       ; preds = %if.end.202, %if.then.169
  br label %if.end.204

if.end.204:                                       ; preds = %if.end.203, %if.end.165
  br label %if.end.205

if.end.205:                                       ; preds = %if.end.204, %if.end.94
  %145 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %tobool206 = icmp ne %struct._PerlIO** %145, null
  br i1 %tobool206, label %if.end.291, label %if.then.207

if.then.207:                                      ; preds = %if.end.205
  %146 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings208 = getelementptr inbounds %struct.cop, %struct.cop* %146, i32 0, i32 14
  %147 = load %struct.sv*, %struct.sv** %cop_warnings208, align 8
  %cmp209 = icmp ne %struct.sv* %147, null
  br i1 %cmp209, label %land.lhs.true.211, label %lor.lhs.false.235

land.lhs.true.211:                                ; preds = %if.then.207
  %148 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings212 = getelementptr inbounds %struct.cop, %struct.cop* %148, i32 0, i32 14
  %149 = load %struct.sv*, %struct.sv** %cop_warnings212, align 8
  %cmp213 = icmp ne %struct.sv* %149, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp213, label %land.lhs.true.215, label %lor.lhs.false.235

land.lhs.true.215:                                ; preds = %land.lhs.true.211
  %150 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings216 = getelementptr inbounds %struct.cop, %struct.cop* %150, i32 0, i32 14
  %151 = load %struct.sv*, %struct.sv** %cop_warnings216, align 8
  %cmp217 = icmp eq %struct.sv* %151, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp217, label %land.lhs.true.243, label %lor.lhs.false.219

lor.lhs.false.219:                                ; preds = %land.lhs.true.215
  %152 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings220 = getelementptr inbounds %struct.cop, %struct.cop* %152, i32 0, i32 14
  %153 = load %struct.sv*, %struct.sv** %cop_warnings220, align 8
  %sv_any221 = getelementptr inbounds %struct.sv, %struct.sv* %153, i32 0, i32 0
  %154 = load i8*, i8** %sv_any221, align 8
  %155 = bitcast i8* %154 to %struct.xpv*
  %xpv_pv222 = getelementptr inbounds %struct.xpv, %struct.xpv* %155, i32 0, i32 0
  %156 = load i8*, i8** %xpv_pv222, align 8
  %arrayidx223 = getelementptr inbounds i8, i8* %156, i64 1
  %157 = load i8, i8* %arrayidx223, align 1
  %conv224 = sext i8 %157 to i32
  %and225 = and i32 %conv224, 1
  %tobool226 = icmp ne i32 %and225, 0
  br i1 %tobool226, label %land.lhs.true.243, label %lor.lhs.false.227

lor.lhs.false.227:                                ; preds = %lor.lhs.false.219
  %158 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings228 = getelementptr inbounds %struct.cop, %struct.cop* %158, i32 0, i32 14
  %159 = load %struct.sv*, %struct.sv** %cop_warnings228, align 8
  %sv_any229 = getelementptr inbounds %struct.sv, %struct.sv* %159, i32 0, i32 0
  %160 = load i8*, i8** %sv_any229, align 8
  %161 = bitcast i8* %160 to %struct.xpv*
  %xpv_pv230 = getelementptr inbounds %struct.xpv, %struct.xpv* %161, i32 0, i32 0
  %162 = load i8*, i8** %xpv_pv230, align 8
  %arrayidx231 = getelementptr inbounds i8, i8* %162, i64 1
  %163 = load i8, i8* %arrayidx231, align 1
  %conv232 = sext i8 %163 to i32
  %and233 = and i32 %conv232, 16
  %tobool234 = icmp ne i32 %and233, 0
  br i1 %tobool234, label %land.lhs.true.243, label %lor.lhs.false.235

lor.lhs.false.235:                                ; preds = %lor.lhs.false.227, %land.lhs.true.211, %if.then.207
  %164 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings236 = getelementptr inbounds %struct.cop, %struct.cop* %164, i32 0, i32 14
  %165 = load %struct.sv*, %struct.sv** %cop_warnings236, align 8
  %cmp237 = icmp eq %struct.sv* %165, null
  br i1 %cmp237, label %land.lhs.true.239, label %if.end.261

land.lhs.true.239:                                ; preds = %lor.lhs.false.235
  %166 = load i8, i8* @PL_dowarn, align 1
  %conv240 = zext i8 %166 to i32
  %and241 = and i32 %conv240, 1
  %tobool242 = icmp ne i32 %and241, 0
  br i1 %tobool242, label %land.lhs.true.243, label %if.end.261

land.lhs.true.243:                                ; preds = %land.lhs.true.239, %lor.lhs.false.227, %lor.lhs.false.219, %land.lhs.true.215
  %167 = load %struct.io*, %struct.io** %io, align 8
  %tobool244 = icmp ne %struct.io* %167, null
  br i1 %tobool244, label %lor.lhs.false.245, label %if.then.251

lor.lhs.false.245:                                ; preds = %land.lhs.true.243
  %168 = load %struct.io*, %struct.io** %io, align 8
  %sv_any246 = getelementptr inbounds %struct.io, %struct.io* %168, i32 0, i32 0
  %169 = load %struct.xpvio*, %struct.xpvio** %sv_any246, align 8
  %xio_flags247 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %169, i32 0, i32 22
  %170 = load i8, i8* %xio_flags247, align 1
  %conv248 = sext i8 %170 to i32
  %and249 = and i32 %conv248, 2
  %tobool250 = icmp ne i32 %and249, 0
  br i1 %tobool250, label %if.end.261, label %if.then.251

if.then.251:                                      ; preds = %lor.lhs.false.245, %land.lhs.true.243
  %171 = load i32, i32* %type, align 4
  %cmp252 = icmp eq i32 %171, 25
  br i1 %cmp252, label %if.then.254, label %if.else.257

if.then.254:                                      ; preds = %if.then.251
  %call255 = call i32* @__errno_location()
  %172 = load i32, i32* %call255, align 4
  %call256 = call i8* @strerror(i32 %172)
  call void (i32, i8*, ...) @Perl_warner(i32 4, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.16, i32 0, i32 0), i8* %call256)
  br label %if.end.260

if.else.257:                                      ; preds = %if.then.251
  %173 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %174 = load %struct.io*, %struct.io** %io, align 8
  %175 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type258 = getelementptr inbounds %struct.op, %struct.op* %175, i32 0, i32 4
  %176 = load i16, i16* %op_type258, align 2
  %conv259 = zext i16 %176 to i32
  call void @Perl_report_evil_fh(%struct.gv* %173, %struct.io* %174, i32 %conv259)
  br label %if.end.260

if.end.260:                                       ; preds = %if.else.257, %if.then.254
  br label %if.end.261

if.end.261:                                       ; preds = %if.end.260, %lor.lhs.false.245, %land.lhs.true.239, %lor.lhs.false.235
  %177 = load i32, i32* %gimme, align 4
  %cmp262 = icmp eq i32 %177, 0
  br i1 %cmp262, label %if.then.264, label %if.end.289

if.then.264:                                      ; preds = %if.end.261
  %178 = load i32, i32* %type, align 4
  %cmp265 = icmp ne i32 %178, 27
  br i1 %cmp265, label %if.then.267, label %if.end.280

if.then.267:                                      ; preds = %if.then.264
  %179 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags268 = getelementptr inbounds %struct.sv, %struct.sv* %179, i32 0, i32 2
  %180 = load i32, i32* %sv_flags268, align 4
  %and269 = and i32 %180, 9961472
  %tobool270 = icmp ne i32 %and269, 0
  br i1 %tobool270, label %if.then.271, label %if.end.272

if.then.271:                                      ; preds = %if.then.267
  %181 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_force_normal(%struct.sv* %181)
  br label %if.end.272

if.end.272:                                       ; preds = %if.then.271, %if.then.267
  %182 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags273 = getelementptr inbounds %struct.sv, %struct.sv* %182, i32 0, i32 2
  %183 = load i32, i32* %sv_flags273, align 4
  %and274 = and i32 %183, 1223753727
  store i32 %and274, i32* %sv_flags273, align 4
  %184 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags275 = getelementptr inbounds %struct.sv, %struct.sv* %184, i32 0, i32 2
  %185 = load i32, i32* %sv_flags275, align 4
  %and276 = and i32 %185, 2097152
  %tobool277 = icmp ne i32 %and276, 0
  br i1 %tobool277, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end.272
  %186 = load %struct.sv*, %struct.sv** %targ, align 8
  %call278 = call i32 @Perl_sv_backoff(%struct.sv* %186)
  %tobool279 = icmp ne i32 %call278, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end.272
  %187 = phi i1 [ false, %if.end.272 ], [ %tobool279, %land.rhs ]
  %land.ext = zext i1 %187 to i32
  br label %if.end.280

if.end.280:                                       ; preds = %land.end, %if.then.264
  %188 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags281 = getelementptr inbounds %struct.sv, %struct.sv* %188, i32 0, i32 2
  %189 = load i32, i32* %sv_flags281, align 4
  %and282 = and i32 %189, 16384
  %tobool283 = icmp ne i32 %and282, 0
  br i1 %tobool283, label %if.then.284, label %if.end.286

if.then.284:                                      ; preds = %if.end.280
  %190 = load %struct.sv*, %struct.sv** %targ, align 8
  %call285 = call i32 @Perl_mg_set(%struct.sv* %190)
  br label %if.end.286

if.end.286:                                       ; preds = %if.then.284, %if.end.280
  %191 = load %struct.sv*, %struct.sv** %targ, align 8
  %192 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr288 = getelementptr inbounds %struct.sv*, %struct.sv** %192, i32 1
  store %struct.sv** %incdec.ptr288, %struct.sv*** %sp, align 8
  store %struct.sv* %191, %struct.sv** %incdec.ptr288, align 8
  store %struct.sv* %191, %struct.sv** %tmp287
  %193 = load %struct.sv*, %struct.sv** %tmp287
  br label %if.end.289

if.end.289:                                       ; preds = %if.end.286, %if.end.261
  %194 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %194, %struct.sv*** @PL_stack_sp, align 8
  %195 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next290 = getelementptr inbounds %struct.op, %struct.op* %195, i32 0, i32 0
  %196 = load %struct.op*, %struct.op** %op_next290, align 8
  store %struct.op* %196, %struct.op** %retval
  br label %return

if.end.291:                                       ; preds = %if.end.205
  br label %have_fp

have_fp:                                          ; preds = %if.end.291, %if.end.149
  %197 = load i32, i32* %gimme, align 4
  %cmp292 = icmp eq i32 %197, 0
  br i1 %cmp292, label %if.then.294, label %if.else.344

if.then.294:                                      ; preds = %have_fp
  %198 = load %struct.sv*, %struct.sv** %targ, align 8
  store %struct.sv* %198, %struct.sv** %sv, align 8
  %199 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags295 = getelementptr inbounds %struct.sv, %struct.sv* %199, i32 0, i32 2
  %200 = load i32, i32* %sv_flags295, align 4
  %and296 = and i32 %200, 524288
  %tobool297 = icmp ne i32 %and296, 0
  br i1 %tobool297, label %if.then.298, label %if.end.299

if.then.298:                                      ; preds = %if.then.294
  %201 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_unref(%struct.sv* %201)
  br label %if.end.299

if.end.299:                                       ; preds = %if.then.298, %if.then.294
  %202 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags300 = getelementptr inbounds %struct.sv, %struct.sv* %202, i32 0, i32 2
  %203 = load i32, i32* %sv_flags300, align 4
  %and301 = and i32 %203, 255
  %cmp302 = icmp uge i32 %and301, 4
  br i1 %cmp302, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end.299
  %204 = load %struct.sv*, %struct.sv** %sv, align 8
  %call304 = call signext i8 @Perl_sv_upgrade(%struct.sv* %204, i32 4)
  %conv305 = sext i8 %call304 to i32
  %tobool306 = icmp ne i32 %conv305, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end.299
  %205 = phi i1 [ true, %if.end.299 ], [ %tobool306, %lor.rhs ]
  %lor.ext = zext i1 %205 to i32
  %206 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any307 = getelementptr inbounds %struct.sv, %struct.sv* %206, i32 0, i32 0
  %207 = load i8*, i8** %sv_any307, align 8
  %208 = bitcast i8* %207 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %208, i32 0, i32 2
  %209 = load i64, i64* %xpv_len, align 8
  store i64 %209, i64* %tmplen, align 8
  %210 = load i64, i64* %tmplen, align 8
  %tobool308 = icmp ne i64 %210, 0
  br i1 %tobool308, label %if.end.315, label %land.lhs.true.309

land.lhs.true.309:                                ; preds = %lor.end
  %211 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags310 = getelementptr inbounds %struct.sv, %struct.sv* %211, i32 0, i32 2
  %212 = load i32, i32* %sv_flags310, align 4
  %and311 = and i32 %212, 8388608
  %tobool312 = icmp ne i32 %and311, 0
  br i1 %tobool312, label %if.end.315, label %if.then.313

if.then.313:                                      ; preds = %land.lhs.true.309
  %213 = load %struct.sv*, %struct.sv** %sv, align 8
  %call314 = call i8* @Perl_sv_grow(%struct.sv* %213, i64 80)
  br label %if.end.315

if.end.315:                                       ; preds = %if.then.313, %land.lhs.true.309, %lor.end
  store i64 0, i64* %offset, align 8
  %214 = load i32, i32* %type, align 4
  %cmp316 = icmp eq i32 %214, 27
  br i1 %cmp316, label %land.lhs.true.318, label %if.end.343

land.lhs.true.318:                                ; preds = %if.end.315
  %215 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags319 = getelementptr inbounds %struct.sv, %struct.sv* %215, i32 0, i32 2
  %216 = load i32, i32* %sv_flags319, align 4
  %and320 = and i32 %216, 118423552
  %tobool321 = icmp ne i32 %and320, 0
  br i1 %tobool321, label %if.then.322, label %if.end.343

if.then.322:                                      ; preds = %land.lhs.true.318
  %217 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags323 = getelementptr inbounds %struct.sv, %struct.sv* %217, i32 0, i32 2
  %218 = load i32, i32* %sv_flags323, align 4
  %and324 = and i32 %218, 262144
  %tobool325 = icmp ne i32 %and324, 0
  br i1 %tobool325, label %if.end.340, label %if.then.326

if.then.326:                                      ; preds = %if.then.322
  %219 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags328 = getelementptr inbounds %struct.sv, %struct.sv* %219, i32 0, i32 2
  %220 = load i32, i32* %sv_flags328, align 4
  %and329 = and i32 %220, 10223616
  %cmp330 = icmp eq i32 %and329, 262144
  br i1 %cmp330, label %cond.true.332, label %cond.false.336

cond.true.332:                                    ; preds = %if.then.326
  %221 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any333 = getelementptr inbounds %struct.sv, %struct.sv* %221, i32 0, i32 0
  %222 = load i8*, i8** %sv_any333, align 8
  %223 = bitcast i8* %222 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %223, i32 0, i32 1
  %224 = load i64, i64* %xpv_cur, align 8
  store i64 %224, i64* %n_a, align 8
  %225 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any334 = getelementptr inbounds %struct.sv, %struct.sv* %225, i32 0, i32 0
  %226 = load i8*, i8** %sv_any334, align 8
  %227 = bitcast i8* %226 to %struct.xpv*
  %xpv_pv335 = getelementptr inbounds %struct.xpv, %struct.xpv* %227, i32 0, i32 0
  %228 = load i8*, i8** %xpv_pv335, align 8
  br label %cond.end.338

cond.false.336:                                   ; preds = %if.then.326
  %229 = load %struct.sv*, %struct.sv** %sv, align 8
  %call337 = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %229, i64* %n_a, i32 2)
  br label %cond.end.338

cond.end.338:                                     ; preds = %cond.false.336, %cond.true.332
  %cond339 = phi i8* [ %228, %cond.true.332 ], [ %call337, %cond.false.336 ]
  br label %if.end.340

if.end.340:                                       ; preds = %cond.end.338, %if.then.322
  %230 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any341 = getelementptr inbounds %struct.sv, %struct.sv* %230, i32 0, i32 0
  %231 = load i8*, i8** %sv_any341, align 8
  %232 = bitcast i8* %231 to %struct.xpv*
  %xpv_cur342 = getelementptr inbounds %struct.xpv, %struct.xpv* %232, i32 0, i32 1
  %233 = load i64, i64* %xpv_cur342, align 8
  store i64 %233, i64* %offset, align 8
  br label %if.end.343

if.end.343:                                       ; preds = %if.end.340, %land.lhs.true.318, %if.end.315
  br label %if.end.347

if.else.344:                                      ; preds = %have_fp
  %call345 = call %struct.sv* @Perl_newSV(i64 80)
  %call346 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call345)
  store %struct.sv* %call346, %struct.sv** %sv, align 8
  store i64 0, i64* %offset, align 8
  br label %if.end.347

if.end.347:                                       ; preds = %if.else.344, %if.end.343
  br label %for.cond

for.cond:                                         ; preds = %if.end.660, %if.then.575, %if.then.383, %if.end.347
  %234 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %234, %struct.sv*** @PL_stack_sp, align 8
  %235 = load %struct.sv*, %struct.sv** %sv, align 8
  %236 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %237 = load i64, i64* %offset, align 8
  %conv348 = trunc i64 %237 to i32
  %call349 = call i8* @Perl_sv_gets(%struct.sv* %235, %struct._PerlIO** %236, i32 %conv348)
  %tobool350 = icmp ne i8* %call349, null
  br i1 %tobool350, label %if.end.469, label %land.lhs.true.351

land.lhs.true.351:                                ; preds = %for.cond
  %238 = load i32, i32* %type, align 4
  %cmp352 = icmp eq i32 %238, 25
  br i1 %cmp352, label %if.then.374, label %lor.lhs.false.354

lor.lhs.false.354:                                ; preds = %land.lhs.true.351
  %239 = load i32, i32* %gimme, align 4
  %cmp355 = icmp ne i32 %239, 0
  br i1 %cmp355, label %if.then.374, label %lor.lhs.false.357

lor.lhs.false.357:                                ; preds = %lor.lhs.false.354
  %240 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any358 = getelementptr inbounds %struct.sv, %struct.sv* %240, i32 0, i32 0
  %241 = load i8*, i8** %sv_any358, align 8
  %242 = bitcast i8* %241 to %struct.xpv*
  %xpv_cur359 = getelementptr inbounds %struct.xpv, %struct.xpv* %242, i32 0, i32 1
  %243 = load i64, i64* %xpv_cur359, align 8
  %tobool360 = icmp ne i64 %243, 0
  br i1 %tobool360, label %if.then.374, label %lor.lhs.false.361

lor.lhs.false.361:                                ; preds = %lor.lhs.false.357
  %244 = load %struct.io*, %struct.io** %io, align 8
  %sv_any362 = getelementptr inbounds %struct.io, %struct.io* %244, i32 0, i32 0
  %245 = load %struct.xpvio*, %struct.xpvio** %sv_any362, align 8
  %xio_flags363 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %245, i32 0, i32 22
  %246 = load i8, i8* %xio_flags363, align 1
  %conv364 = sext i8 %246 to i32
  %and365 = and i32 %conv364, 32
  %tobool366 = icmp ne i32 %and365, 0
  br i1 %tobool366, label %if.then.374, label %lor.lhs.false.367

lor.lhs.false.367:                                ; preds = %lor.lhs.false.361
  %247 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags368 = getelementptr inbounds %struct.sv, %struct.sv* %247, i32 0, i32 2
  %248 = load i32, i32* %sv_flags368, align 4
  %and369 = and i32 %248, 118423552
  %tobool370 = icmp ne i32 %and369, 0
  br i1 %tobool370, label %if.then.374, label %lor.lhs.false.371

lor.lhs.false.371:                                ; preds = %lor.lhs.false.367
  %249 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %call372 = call i32 @Perl_PerlIO_error(%struct._PerlIO** %249)
  %tobool373 = icmp ne i32 %call372, 0
  br i1 %tobool373, label %if.then.374, label %if.end.469

if.then.374:                                      ; preds = %lor.lhs.false.371, %lor.lhs.false.367, %lor.lhs.false.361, %lor.lhs.false.357, %lor.lhs.false.354, %land.lhs.true.351
  %250 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  call void @Perl_PerlIO_clearerr(%struct._PerlIO** %250)
  %251 = load %struct.io*, %struct.io** %io, align 8
  %sv_any375 = getelementptr inbounds %struct.io, %struct.io* %251, i32 0, i32 0
  %252 = load %struct.xpvio*, %struct.xpvio** %sv_any375, align 8
  %xio_flags376 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %252, i32 0, i32 22
  %253 = load i8, i8* %xio_flags376, align 1
  %conv377 = sext i8 %253 to i32
  %and378 = and i32 %conv377, 1
  %tobool379 = icmp ne i32 %and378, 0
  br i1 %tobool379, label %if.then.380, label %if.else.386

if.then.380:                                      ; preds = %if.then.374
  %254 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %call381 = call %struct._PerlIO** @Perl_nextargv(%struct.gv* %254)
  store %struct._PerlIO** %call381, %struct._PerlIO*** %fp, align 8
  %255 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %tobool382 = icmp ne %struct._PerlIO** %255, null
  br i1 %tobool382, label %if.then.383, label %if.end.384

if.then.383:                                      ; preds = %if.then.380
  br label %for.cond

if.end.384:                                       ; preds = %if.then.380
  %256 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %call385 = call signext i8 @Perl_do_close(%struct.gv* %256, i8 signext 0)
  br label %if.end.426

if.else.386:                                      ; preds = %if.then.374
  %257 = load i32, i32* %type, align 4
  %cmp387 = icmp eq i32 %257, 25
  br i1 %cmp387, label %if.then.389, label %if.end.425

if.then.389:                                      ; preds = %if.else.386
  %258 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %call390 = call signext i8 @Perl_do_close(%struct.gv* %258, i8 signext 0)
  %tobool391 = icmp ne i8 %call390, 0
  br i1 %tobool391, label %if.end.424, label %land.lhs.true.392

land.lhs.true.392:                                ; preds = %if.then.389
  %259 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings393 = getelementptr inbounds %struct.cop, %struct.cop* %259, i32 0, i32 14
  %260 = load %struct.sv*, %struct.sv** %cop_warnings393, align 8
  %cmp394 = icmp ne %struct.sv* %260, null
  br i1 %cmp394, label %land.lhs.true.396, label %lor.lhs.false.412

land.lhs.true.396:                                ; preds = %land.lhs.true.392
  %261 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings397 = getelementptr inbounds %struct.cop, %struct.cop* %261, i32 0, i32 14
  %262 = load %struct.sv*, %struct.sv** %cop_warnings397, align 8
  %cmp398 = icmp ne %struct.sv* %262, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp398, label %land.lhs.true.400, label %lor.lhs.false.412

land.lhs.true.400:                                ; preds = %land.lhs.true.396
  %263 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings401 = getelementptr inbounds %struct.cop, %struct.cop* %263, i32 0, i32 14
  %264 = load %struct.sv*, %struct.sv** %cop_warnings401, align 8
  %cmp402 = icmp eq %struct.sv* %264, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp402, label %if.then.420, label %lor.lhs.false.404

lor.lhs.false.404:                                ; preds = %land.lhs.true.400
  %265 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings405 = getelementptr inbounds %struct.cop, %struct.cop* %265, i32 0, i32 14
  %266 = load %struct.sv*, %struct.sv** %cop_warnings405, align 8
  %sv_any406 = getelementptr inbounds %struct.sv, %struct.sv* %266, i32 0, i32 0
  %267 = load i8*, i8** %sv_any406, align 8
  %268 = bitcast i8* %267 to %struct.xpv*
  %xpv_pv407 = getelementptr inbounds %struct.xpv, %struct.xpv* %268, i32 0, i32 0
  %269 = load i8*, i8** %xpv_pv407, align 8
  %arrayidx408 = getelementptr inbounds i8, i8* %269, i64 1
  %270 = load i8, i8* %arrayidx408, align 1
  %conv409 = sext i8 %270 to i32
  %and410 = and i32 %conv409, 1
  %tobool411 = icmp ne i32 %and410, 0
  br i1 %tobool411, label %if.then.420, label %lor.lhs.false.412

lor.lhs.false.412:                                ; preds = %lor.lhs.false.404, %land.lhs.true.396, %land.lhs.true.392
  %271 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings413 = getelementptr inbounds %struct.cop, %struct.cop* %271, i32 0, i32 14
  %272 = load %struct.sv*, %struct.sv** %cop_warnings413, align 8
  %cmp414 = icmp eq %struct.sv* %272, null
  br i1 %cmp414, label %land.lhs.true.416, label %if.end.424

land.lhs.true.416:                                ; preds = %lor.lhs.false.412
  %273 = load i8, i8* @PL_dowarn, align 1
  %conv417 = zext i8 %273 to i32
  %and418 = and i32 %conv417, 1
  %tobool419 = icmp ne i32 %and418, 0
  br i1 %tobool419, label %if.then.420, label %if.end.424

if.then.420:                                      ; preds = %land.lhs.true.416, %lor.lhs.false.404, %land.lhs.true.400
  %274 = load i32, i32* @PL_statusvalue, align 4
  %shr = ashr i32 %274, 8
  %275 = load i32, i32* @PL_statusvalue, align 4
  %and421 = and i32 %275, 128
  %tobool422 = icmp ne i32 %and421, 0
  %cond423 = select i1 %tobool422, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i32 0)
  call void (i32, i8*, ...) @Perl_warner(i32 4, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.17, i32 0, i32 0), i32 %shr, i8* %cond423)
  br label %if.end.424

if.end.424:                                       ; preds = %if.then.420, %land.lhs.true.416, %lor.lhs.false.412, %if.then.389
  br label %if.end.425

if.end.425:                                       ; preds = %if.end.424, %if.else.386
  br label %if.end.426

if.end.426:                                       ; preds = %if.end.425, %if.end.384
  %276 = load i32, i32* %gimme, align 4
  %cmp427 = icmp eq i32 %276, 0
  br i1 %cmp427, label %if.then.429, label %if.end.457

if.then.429:                                      ; preds = %if.end.426
  %277 = load i32, i32* %type, align 4
  %cmp430 = icmp ne i32 %277, 27
  br i1 %cmp430, label %if.then.432, label %if.end.448

if.then.432:                                      ; preds = %if.then.429
  %278 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags433 = getelementptr inbounds %struct.sv, %struct.sv* %278, i32 0, i32 2
  %279 = load i32, i32* %sv_flags433, align 4
  %and434 = and i32 %279, 9961472
  %tobool435 = icmp ne i32 %and434, 0
  br i1 %tobool435, label %if.then.436, label %if.end.437

if.then.436:                                      ; preds = %if.then.432
  %280 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_force_normal(%struct.sv* %280)
  br label %if.end.437

if.end.437:                                       ; preds = %if.then.436, %if.then.432
  %281 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags438 = getelementptr inbounds %struct.sv, %struct.sv* %281, i32 0, i32 2
  %282 = load i32, i32* %sv_flags438, align 4
  %and439 = and i32 %282, 1223753727
  store i32 %and439, i32* %sv_flags438, align 4
  %283 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags440 = getelementptr inbounds %struct.sv, %struct.sv* %283, i32 0, i32 2
  %284 = load i32, i32* %sv_flags440, align 4
  %and441 = and i32 %284, 2097152
  %tobool442 = icmp ne i32 %and441, 0
  br i1 %tobool442, label %land.rhs.443, label %land.end.446

land.rhs.443:                                     ; preds = %if.end.437
  %285 = load %struct.sv*, %struct.sv** %targ, align 8
  %call444 = call i32 @Perl_sv_backoff(%struct.sv* %285)
  %tobool445 = icmp ne i32 %call444, 0
  br label %land.end.446

land.end.446:                                     ; preds = %land.rhs.443, %if.end.437
  %286 = phi i1 [ false, %if.end.437 ], [ %tobool445, %land.rhs.443 ]
  %land.ext447 = zext i1 %286 to i32
  br label %if.end.448

if.end.448:                                       ; preds = %land.end.446, %if.then.429
  %287 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %287, %struct.sv*** %sp, align 8
  %288 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags449 = getelementptr inbounds %struct.sv, %struct.sv* %288, i32 0, i32 2
  %289 = load i32, i32* %sv_flags449, align 4
  %and450 = and i32 %289, 16384
  %tobool451 = icmp ne i32 %and450, 0
  br i1 %tobool451, label %if.then.452, label %if.end.454

if.then.452:                                      ; preds = %if.end.448
  %290 = load %struct.sv*, %struct.sv** %targ, align 8
  %call453 = call i32 @Perl_mg_set(%struct.sv* %290)
  br label %if.end.454

if.end.454:                                       ; preds = %if.then.452, %if.end.448
  %291 = load %struct.sv*, %struct.sv** %targ, align 8
  %292 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr456 = getelementptr inbounds %struct.sv*, %struct.sv** %292, i32 1
  store %struct.sv** %incdec.ptr456, %struct.sv*** %sp, align 8
  store %struct.sv* %291, %struct.sv** %incdec.ptr456, align 8
  store %struct.sv* %291, %struct.sv** %tmp455
  %293 = load %struct.sv*, %struct.sv** %tmp455
  br label %if.end.457

if.end.457:                                       ; preds = %if.end.454, %if.end.426
  %294 = load %struct.io*, %struct.io** %io, align 8
  %sv_any458 = getelementptr inbounds %struct.io, %struct.io* %294, i32 0, i32 0
  %295 = load %struct.xpvio*, %struct.xpvio** %sv_any458, align 8
  %xio_flags459 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %295, i32 0, i32 22
  %296 = load i8, i8* %xio_flags459, align 1
  %conv460 = sext i8 %296 to i32
  %and461 = and i32 %conv460, 16
  %tobool462 = icmp ne i32 %and461, 0
  br i1 %tobool462, label %if.end.467, label %if.then.463

if.then.463:                                      ; preds = %if.end.457
  store i8 1, i8* @PL_tainted, align 1
  %297 = load i8, i8* @PL_tainting, align 1
  %tobool464 = icmp ne i8 %297, 0
  br i1 %tobool464, label %if.then.465, label %if.end.466

if.then.465:                                      ; preds = %if.then.463
  %298 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_taint(%struct.sv* %298)
  br label %if.end.466

if.end.466:                                       ; preds = %if.then.465, %if.then.463
  br label %if.end.467

if.end.467:                                       ; preds = %if.end.466, %if.end.457
  %299 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %299, %struct.sv*** @PL_stack_sp, align 8
  %300 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next468 = getelementptr inbounds %struct.op, %struct.op* %300, i32 0, i32 0
  %301 = load %struct.op*, %struct.op** %op_next468, align 8
  store %struct.op* %301, %struct.op** %retval
  br label %return

if.end.469:                                       ; preds = %lor.lhs.false.371, %for.cond
  %302 = load %struct.io*, %struct.io** %io, align 8
  %sv_any470 = getelementptr inbounds %struct.io, %struct.io* %302, i32 0, i32 0
  %303 = load %struct.xpvio*, %struct.xpvio** %sv_any470, align 8
  %xio_flags471 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %303, i32 0, i32 22
  %304 = load i8, i8* %xio_flags471, align 1
  %conv472 = sext i8 %304 to i32
  %and473 = and i32 %conv472, 16
  %tobool474 = icmp ne i32 %and473, 0
  br i1 %tobool474, label %if.end.479, label %if.then.475

if.then.475:                                      ; preds = %if.end.469
  store i8 1, i8* @PL_tainted, align 1
  %305 = load i8, i8* @PL_tainting, align 1
  %tobool476 = icmp ne i8 %305, 0
  br i1 %tobool476, label %if.then.477, label %if.end.478

if.then.477:                                      ; preds = %if.then.475
  %306 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_taint(%struct.sv* %306)
  br label %if.end.478

if.end.478:                                       ; preds = %if.then.477, %if.then.475
  br label %if.end.479

if.end.479:                                       ; preds = %if.end.478, %if.end.469
  %307 = load %struct.io*, %struct.io** %io, align 8
  %sv_any480 = getelementptr inbounds %struct.io, %struct.io* %307, i32 0, i32 0
  %308 = load %struct.xpvio*, %struct.xpvio** %sv_any480, align 8
  %xio_lines481 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %308, i32 0, i32 10
  %309 = load i64, i64* %xio_lines481, align 8
  %inc = add nsw i64 %309, 1
  store i64 %inc, i64* %xio_lines481, align 8
  %310 = load %struct.io*, %struct.io** %io, align 8
  %sv_any482 = getelementptr inbounds %struct.io, %struct.io* %310, i32 0, i32 0
  %311 = load %struct.xpvio*, %struct.xpvio** %sv_any482, align 8
  %xio_flags483 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %311, i32 0, i32 22
  %312 = load i8, i8* %xio_flags483, align 1
  %conv484 = sext i8 %312 to i32
  %or = or i32 %conv484, 32
  %conv485 = trunc i32 %or to i8
  store i8 %conv485, i8* %xio_flags483, align 1
  %313 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags486 = getelementptr inbounds %struct.sv, %struct.sv* %313, i32 0, i32 2
  %314 = load i32, i32* %sv_flags486, align 4
  %and487 = and i32 %314, 16384
  %tobool488 = icmp ne i32 %and487, 0
  br i1 %tobool488, label %if.then.489, label %if.end.491

if.then.489:                                      ; preds = %if.end.479
  %315 = load %struct.sv*, %struct.sv** %sv, align 8
  %call490 = call i32 @Perl_mg_set(%struct.sv* %315)
  br label %if.end.491

if.end.491:                                       ; preds = %if.then.489, %if.end.479
  %316 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %316, %struct.sv*** %sp, align 8
  %317 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %318 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast492 = ptrtoint %struct.sv** %317 to i64
  %sub.ptr.rhs.cast493 = ptrtoint %struct.sv** %318 to i64
  %sub.ptr.sub494 = sub i64 %sub.ptr.lhs.cast492, %sub.ptr.rhs.cast493
  %sub.ptr.div495 = sdiv exact i64 %sub.ptr.sub494, 8
  %cmp496 = icmp slt i64 %sub.ptr.div495, 1
  br i1 %cmp496, label %if.then.498, label %if.end.500

if.then.498:                                      ; preds = %if.end.491
  %319 = load %struct.sv**, %struct.sv*** %sp, align 8
  %320 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call499 = call %struct.sv** @Perl_stack_grow(%struct.sv** %319, %struct.sv** %320, i32 1)
  store %struct.sv** %call499, %struct.sv*** %sp, align 8
  br label %if.end.500

if.end.500:                                       ; preds = %if.then.498, %if.end.491
  %321 = load %struct.sv*, %struct.sv** %sv, align 8
  %322 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr502 = getelementptr inbounds %struct.sv*, %struct.sv** %322, i32 1
  store %struct.sv** %incdec.ptr502, %struct.sv*** %sp, align 8
  store %struct.sv* %321, %struct.sv** %incdec.ptr502, align 8
  store %struct.sv* %321, %struct.sv** %tmp501
  %323 = load %struct.sv*, %struct.sv** %tmp501
  %324 = load i32, i32* %type, align 4
  %cmp503 = icmp eq i32 %324, 25
  br i1 %cmp503, label %if.then.505, label %if.else.578

if.then.505:                                      ; preds = %if.end.500
  %325 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any507 = getelementptr inbounds %struct.sv, %struct.sv* %325, i32 0, i32 0
  %326 = load i8*, i8** %sv_any507, align 8
  %327 = bitcast i8* %326 to %struct.xpv*
  %xpv_cur508 = getelementptr inbounds %struct.xpv, %struct.xpv* %327, i32 0, i32 1
  %328 = load i64, i64* %xpv_cur508, align 8
  %cmp509 = icmp ugt i64 %328, 0
  br i1 %cmp509, label %land.lhs.true.511, label %if.end.532

land.lhs.true.511:                                ; preds = %if.then.505
  %329 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_any512 = getelementptr inbounds %struct.sv, %struct.sv* %329, i32 0, i32 0
  %330 = load i8*, i8** %sv_any512, align 8
  %331 = bitcast i8* %330 to %struct.xpv*
  %xpv_cur513 = getelementptr inbounds %struct.xpv, %struct.xpv* %331, i32 0, i32 1
  %332 = load i64, i64* %xpv_cur513, align 8
  %cmp514 = icmp ugt i64 %332, 0
  br i1 %cmp514, label %if.then.516, label %if.end.532

if.then.516:                                      ; preds = %land.lhs.true.511
  %333 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any517 = getelementptr inbounds %struct.sv, %struct.sv* %333, i32 0, i32 0
  %334 = load i8*, i8** %sv_any517, align 8
  %335 = bitcast i8* %334 to %struct.xpv*
  %xpv_pv518 = getelementptr inbounds %struct.xpv, %struct.xpv* %335, i32 0, i32 0
  %336 = load i8*, i8** %xpv_pv518, align 8
  %337 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any519 = getelementptr inbounds %struct.sv, %struct.sv* %337, i32 0, i32 0
  %338 = load i8*, i8** %sv_any519, align 8
  %339 = bitcast i8* %338 to %struct.xpv*
  %xpv_cur520 = getelementptr inbounds %struct.xpv, %struct.xpv* %339, i32 0, i32 1
  %340 = load i64, i64* %xpv_cur520, align 8
  %add.ptr = getelementptr inbounds i8, i8* %336, i64 %340
  %add.ptr521 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  store i8* %add.ptr521, i8** %tmps, align 8
  %341 = load i8*, i8** %tmps, align 8
  %342 = load i8, i8* %341, align 1
  %conv522 = sext i8 %342 to i32
  %343 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_any523 = getelementptr inbounds %struct.sv, %struct.sv* %343, i32 0, i32 0
  %344 = load i8*, i8** %sv_any523, align 8
  %345 = bitcast i8* %344 to %struct.xpv*
  %xpv_pv524 = getelementptr inbounds %struct.xpv, %struct.xpv* %345, i32 0, i32 0
  %346 = load i8*, i8** %xpv_pv524, align 8
  %347 = load i8, i8* %346, align 1
  %conv525 = sext i8 %347 to i32
  %cmp526 = icmp eq i32 %conv522, %conv525
  br i1 %cmp526, label %if.then.528, label %if.end.531

if.then.528:                                      ; preds = %if.then.516
  %348 = load i8*, i8** %tmps, align 8
  store i8 0, i8* %348, align 1
  %349 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any529 = getelementptr inbounds %struct.sv, %struct.sv* %349, i32 0, i32 0
  %350 = load i8*, i8** %sv_any529, align 8
  %351 = bitcast i8* %350 to %struct.xpv*
  %xpv_cur530 = getelementptr inbounds %struct.xpv, %struct.xpv* %351, i32 0, i32 1
  %352 = load i64, i64* %xpv_cur530, align 8
  %dec = add i64 %352, -1
  store i64 %dec, i64* %xpv_cur530, align 8
  br label %if.end.531

if.end.531:                                       ; preds = %if.then.528, %if.then.516
  br label %if.end.532

if.end.532:                                       ; preds = %if.end.531, %land.lhs.true.511, %if.then.505
  %353 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any533 = getelementptr inbounds %struct.sv, %struct.sv* %353, i32 0, i32 0
  %354 = load i8*, i8** %sv_any533, align 8
  %355 = bitcast i8* %354 to %struct.xpv*
  %xpv_pv534 = getelementptr inbounds %struct.xpv, %struct.xpv* %355, i32 0, i32 0
  %356 = load i8*, i8** %xpv_pv534, align 8
  store i8* %356, i8** %tmps, align 8
  br label %for.cond.535

for.cond.535:                                     ; preds = %for.inc, %if.end.532
  %357 = load i8*, i8** %tmps, align 8
  %358 = load i8, i8* %357, align 1
  %tobool536 = icmp ne i8 %358, 0
  br i1 %tobool536, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond.535
  %359 = load i8*, i8** %tmps, align 8
  %360 = load i8, i8* %359, align 1
  %conv537 = sext i8 %360 to i32
  %cmp538 = icmp sge i32 %conv537, 65
  br i1 %cmp538, label %land.lhs.true.540, label %lor.lhs.false.544

land.lhs.true.540:                                ; preds = %for.body
  %361 = load i8*, i8** %tmps, align 8
  %362 = load i8, i8* %361, align 1
  %conv541 = sext i8 %362 to i32
  %cmp542 = icmp sle i32 %conv541, 90
  br i1 %cmp542, label %if.end.565, label %lor.lhs.false.544

lor.lhs.false.544:                                ; preds = %land.lhs.true.540, %for.body
  %363 = load i8*, i8** %tmps, align 8
  %364 = load i8, i8* %363, align 1
  %conv545 = sext i8 %364 to i32
  %cmp546 = icmp sge i32 %conv545, 97
  br i1 %cmp546, label %land.lhs.true.548, label %land.lhs.true.552

land.lhs.true.548:                                ; preds = %lor.lhs.false.544
  %365 = load i8*, i8** %tmps, align 8
  %366 = load i8, i8* %365, align 1
  %conv549 = sext i8 %366 to i32
  %cmp550 = icmp sle i32 %conv549, 122
  br i1 %cmp550, label %if.end.565, label %land.lhs.true.552

land.lhs.true.552:                                ; preds = %land.lhs.true.548, %lor.lhs.false.544
  %367 = load i8*, i8** %tmps, align 8
  %368 = load i8, i8* %367, align 1
  %conv553 = sext i8 %368 to i32
  %cmp554 = icmp sge i32 %conv553, 48
  br i1 %cmp554, label %land.lhs.true.556, label %land.lhs.true.560

land.lhs.true.556:                                ; preds = %land.lhs.true.552
  %369 = load i8*, i8** %tmps, align 8
  %370 = load i8, i8* %369, align 1
  %conv557 = sext i8 %370 to i32
  %cmp558 = icmp sle i32 %conv557, 57
  br i1 %cmp558, label %if.end.565, label %land.lhs.true.560

land.lhs.true.560:                                ; preds = %land.lhs.true.556, %land.lhs.true.552
  %371 = load i8*, i8** %tmps, align 8
  %372 = load i8, i8* %371, align 1
  %conv561 = sext i8 %372 to i32
  %call562 = call i8* @strchr(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.19, i32 0, i32 0), i32 %conv561)
  %tobool563 = icmp ne i8* %call562, null
  br i1 %tobool563, label %if.then.564, label %if.end.565

if.then.564:                                      ; preds = %land.lhs.true.560
  br label %for.end

if.end.565:                                       ; preds = %land.lhs.true.560, %land.lhs.true.556, %land.lhs.true.548, %land.lhs.true.540
  br label %for.inc

for.inc:                                          ; preds = %if.end.565
  %373 = load i8*, i8** %tmps, align 8
  %incdec.ptr566 = getelementptr inbounds i8, i8* %373, i32 1
  store i8* %incdec.ptr566, i8** %tmps, align 8
  br label %for.cond.535

for.end:                                          ; preds = %if.then.564, %for.cond.535
  %374 = load i8*, i8** %tmps, align 8
  %375 = load i8, i8* %374, align 1
  %conv567 = sext i8 %375 to i32
  %tobool568 = icmp ne i32 %conv567, 0
  br i1 %tobool568, label %land.lhs.true.569, label %if.end.577

land.lhs.true.569:                                ; preds = %for.end
  %376 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any570 = getelementptr inbounds %struct.sv, %struct.sv* %376, i32 0, i32 0
  %377 = load i8*, i8** %sv_any570, align 8
  %378 = bitcast i8* %377 to %struct.xpv*
  %xpv_pv571 = getelementptr inbounds %struct.xpv, %struct.xpv* %378, i32 0, i32 0
  %379 = load i8*, i8** %xpv_pv571, align 8
  %call572 = call i32 @stat(i8* %379, %struct.stat* @PL_statbuf)
  %cmp573 = icmp slt i32 %call572, 0
  br i1 %cmp573, label %if.then.575, label %if.end.577

if.then.575:                                      ; preds = %land.lhs.true.569
  %380 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr576 = getelementptr inbounds %struct.sv*, %struct.sv** %380, i32 -1
  store %struct.sv** %incdec.ptr576, %struct.sv*** %sp, align 8
  %381 = load %struct.sv*, %struct.sv** %380, align 8
  br label %for.cond

if.end.577:                                       ; preds = %land.lhs.true.569, %for.end
  br label %if.end.636

if.else.578:                                      ; preds = %if.end.500
  %382 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags579 = getelementptr inbounds %struct.sv, %struct.sv* %382, i32 0, i32 2
  %383 = load i32, i32* %sv_flags579, align 4
  %and580 = and i32 %383, 536870912
  %tobool581 = icmp ne i32 %and580, 0
  br i1 %tobool581, label %if.then.582, label %if.end.635

if.then.582:                                      ; preds = %if.else.578
  %384 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any584 = getelementptr inbounds %struct.sv, %struct.sv* %384, i32 0, i32 0
  %385 = load i8*, i8** %sv_any584, align 8
  %386 = bitcast i8* %385 to %struct.xpv*
  %xpv_pv585 = getelementptr inbounds %struct.xpv, %struct.xpv* %386, i32 0, i32 0
  %387 = load i8*, i8** %xpv_pv585, align 8
  %388 = load i64, i64* %offset, align 8
  %add.ptr586 = getelementptr inbounds i8, i8* %387, i64 %388
  store i8* %add.ptr586, i8** %s, align 8
  %389 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any588 = getelementptr inbounds %struct.sv, %struct.sv* %389, i32 0, i32 0
  %390 = load i8*, i8** %sv_any588, align 8
  %391 = bitcast i8* %390 to %struct.xpv*
  %xpv_cur589 = getelementptr inbounds %struct.xpv, %struct.xpv* %391, i32 0, i32 1
  %392 = load i64, i64* %xpv_cur589, align 8
  %393 = load i64, i64* %offset, align 8
  %sub = sub i64 %392, %393
  store i64 %sub, i64* %len, align 8
  %394 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings591 = getelementptr inbounds %struct.cop, %struct.cop* %394, i32 0, i32 14
  %395 = load %struct.sv*, %struct.sv** %cop_warnings591, align 8
  %cmp592 = icmp ne %struct.sv* %395, null
  br i1 %cmp592, label %land.lhs.true.594, label %lor.lhs.false.610

land.lhs.true.594:                                ; preds = %if.then.582
  %396 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings595 = getelementptr inbounds %struct.cop, %struct.cop* %396, i32 0, i32 14
  %397 = load %struct.sv*, %struct.sv** %cop_warnings595, align 8
  %cmp596 = icmp ne %struct.sv* %397, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp596, label %land.lhs.true.598, label %lor.lhs.false.610

land.lhs.true.598:                                ; preds = %land.lhs.true.594
  %398 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings599 = getelementptr inbounds %struct.cop, %struct.cop* %398, i32 0, i32 14
  %399 = load %struct.sv*, %struct.sv** %cop_warnings599, align 8
  %cmp600 = icmp eq %struct.sv* %399, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp600, label %land.lhs.true.618, label %lor.lhs.false.602

lor.lhs.false.602:                                ; preds = %land.lhs.true.598
  %400 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings603 = getelementptr inbounds %struct.cop, %struct.cop* %400, i32 0, i32 14
  %401 = load %struct.sv*, %struct.sv** %cop_warnings603, align 8
  %sv_any604 = getelementptr inbounds %struct.sv, %struct.sv* %401, i32 0, i32 0
  %402 = load i8*, i8** %sv_any604, align 8
  %403 = bitcast i8* %402 to %struct.xpv*
  %xpv_pv605 = getelementptr inbounds %struct.xpv, %struct.xpv* %403, i32 0, i32 0
  %404 = load i8*, i8** %xpv_pv605, align 8
  %arrayidx606 = getelementptr inbounds i8, i8* %404, i64 11
  %405 = load i8, i8* %arrayidx606, align 1
  %conv607 = sext i8 %405 to i32
  %and608 = and i32 %conv607, 1
  %tobool609 = icmp ne i32 %and608, 0
  br i1 %tobool609, label %land.lhs.true.618, label %lor.lhs.false.610

lor.lhs.false.610:                                ; preds = %lor.lhs.false.602, %land.lhs.true.594, %if.then.582
  %406 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings611 = getelementptr inbounds %struct.cop, %struct.cop* %406, i32 0, i32 14
  %407 = load %struct.sv*, %struct.sv** %cop_warnings611, align 8
  %cmp612 = icmp eq %struct.sv* %407, null
  br i1 %cmp612, label %land.lhs.true.614, label %if.end.634

land.lhs.true.614:                                ; preds = %lor.lhs.false.610
  %408 = load i8, i8* @PL_dowarn, align 1
  %conv615 = zext i8 %408 to i32
  %and616 = and i32 %conv615, 1
  %tobool617 = icmp ne i32 %and616, 0
  br i1 %tobool617, label %land.lhs.true.618, label %if.end.634

land.lhs.true.618:                                ; preds = %land.lhs.true.614, %lor.lhs.false.602, %land.lhs.true.598
  %409 = load i8*, i8** %s, align 8
  %410 = load i64, i64* %len, align 8
  %call619 = call signext i8 @Perl_is_utf8_string_loc(i8* %409, i64 %410, i8** %f)
  %tobool620 = icmp ne i8 %call619, 0
  br i1 %tobool620, label %if.end.634, label %if.then.621

if.then.621:                                      ; preds = %land.lhs.true.618
  %411 = load i8*, i8** %f, align 8
  %412 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any622 = getelementptr inbounds %struct.sv, %struct.sv* %412, i32 0, i32 0
  %413 = load i8*, i8** %sv_any622, align 8
  %414 = bitcast i8* %413 to %struct.xpv*
  %xpv_pv623 = getelementptr inbounds %struct.xpv, %struct.xpv* %414, i32 0, i32 0
  %415 = load i8*, i8** %xpv_pv623, align 8
  %416 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any624 = getelementptr inbounds %struct.sv, %struct.sv* %416, i32 0, i32 0
  %417 = load i8*, i8** %sv_any624, align 8
  %418 = bitcast i8* %417 to %struct.xpv*
  %xpv_cur625 = getelementptr inbounds %struct.xpv, %struct.xpv* %418, i32 0, i32 1
  %419 = load i64, i64* %xpv_cur625, align 8
  %add.ptr626 = getelementptr inbounds i8, i8* %415, i64 %419
  %cmp627 = icmp ult i8* %411, %add.ptr626
  br i1 %cmp627, label %cond.true.629, label %cond.false.631

cond.true.629:                                    ; preds = %if.then.621
  %420 = load i8*, i8** %f, align 8
  %421 = load i8, i8* %420, align 1
  %conv630 = zext i8 %421 to i32
  br label %cond.end.632

cond.false.631:                                   ; preds = %if.then.621
  br label %cond.end.632

cond.end.632:                                     ; preds = %cond.false.631, %cond.true.629
  %cond633 = phi i32 [ %conv630, %cond.true.629 ], [ 0, %cond.false.631 ]
  call void (i32, i8*, ...) @Perl_warner(i32 44, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.20, i32 0, i32 0), i32 %cond633)
  br label %if.end.634

if.end.634:                                       ; preds = %cond.end.632, %land.lhs.true.618, %land.lhs.true.614, %lor.lhs.false.610
  br label %if.end.635

if.end.635:                                       ; preds = %if.end.634, %if.else.578
  br label %if.end.636

if.end.636:                                       ; preds = %if.end.635, %if.end.577
  %422 = load i32, i32* %gimme, align 4
  %cmp637 = icmp eq i32 %422, 1
  br i1 %cmp637, label %if.then.639, label %if.else.663

if.then.639:                                      ; preds = %if.end.636
  %423 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any640 = getelementptr inbounds %struct.sv, %struct.sv* %423, i32 0, i32 0
  %424 = load i8*, i8** %sv_any640, align 8
  %425 = bitcast i8* %424 to %struct.xpv*
  %xpv_len641 = getelementptr inbounds %struct.xpv, %struct.xpv* %425, i32 0, i32 2
  %426 = load i64, i64* %xpv_len641, align 8
  %427 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any642 = getelementptr inbounds %struct.sv, %struct.sv* %427, i32 0, i32 0
  %428 = load i8*, i8** %sv_any642, align 8
  %429 = bitcast i8* %428 to %struct.xpv*
  %xpv_cur643 = getelementptr inbounds %struct.xpv, %struct.xpv* %429, i32 0, i32 1
  %430 = load i64, i64* %xpv_cur643, align 8
  %sub644 = sub i64 %426, %430
  %cmp645 = icmp ugt i64 %sub644, 20
  br i1 %cmp645, label %if.then.647, label %if.end.660

if.then.647:                                      ; preds = %if.then.639
  %431 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any649 = getelementptr inbounds %struct.sv, %struct.sv* %431, i32 0, i32 0
  %432 = load i8*, i8** %sv_any649, align 8
  %433 = bitcast i8* %432 to %struct.xpv*
  %xpv_cur650 = getelementptr inbounds %struct.xpv, %struct.xpv* %433, i32 0, i32 1
  %434 = load i64, i64* %xpv_cur650, align 8
  %add = add i64 %434, 1
  %435 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any651 = getelementptr inbounds %struct.sv, %struct.sv* %435, i32 0, i32 0
  %436 = load i8*, i8** %sv_any651, align 8
  %437 = bitcast i8* %436 to %struct.xpv*
  %xpv_len652 = getelementptr inbounds %struct.xpv, %struct.xpv* %437, i32 0, i32 2
  store i64 %add, i64* %xpv_len652, align 8
  store i64 %add, i64* %tmp648
  %438 = load i64, i64* %tmp648
  %439 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any653 = getelementptr inbounds %struct.sv, %struct.sv* %439, i32 0, i32 0
  %440 = load i8*, i8** %sv_any653, align 8
  %441 = bitcast i8* %440 to %struct.xpv*
  %xpv_pv654 = getelementptr inbounds %struct.xpv, %struct.xpv* %441, i32 0, i32 0
  %442 = load i8*, i8** %xpv_pv654, align 8
  %443 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any655 = getelementptr inbounds %struct.sv, %struct.sv* %443, i32 0, i32 0
  %444 = load i8*, i8** %sv_any655, align 8
  %445 = bitcast i8* %444 to %struct.xpv*
  %xpv_len656 = getelementptr inbounds %struct.xpv, %struct.xpv* %445, i32 0, i32 2
  %446 = load i64, i64* %xpv_len656, align 8
  %mul = mul i64 %446, 1
  %call657 = call i8* @Perl_safesysrealloc(i8* %442, i64 %mul)
  %447 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any658 = getelementptr inbounds %struct.sv, %struct.sv* %447, i32 0, i32 0
  %448 = load i8*, i8** %sv_any658, align 8
  %449 = bitcast i8* %448 to %struct.xpv*
  %xpv_pv659 = getelementptr inbounds %struct.xpv, %struct.xpv* %449, i32 0, i32 0
  store i8* %call657, i8** %xpv_pv659, align 8
  br label %if.end.660

if.end.660:                                       ; preds = %if.then.647, %if.then.639
  %call661 = call %struct.sv* @Perl_newSV(i64 80)
  %call662 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call661)
  store %struct.sv* %call662, %struct.sv** %sv, align 8
  br label %for.cond

if.else.663:                                      ; preds = %if.end.636
  %450 = load i32, i32* %gimme, align 4
  %cmp664 = icmp eq i32 %450, 0
  br i1 %cmp664, label %land.lhs.true.666, label %if.end.701

land.lhs.true.666:                                ; preds = %if.else.663
  %451 = load i64, i64* %tmplen, align 8
  %tobool667 = icmp ne i64 %451, 0
  br i1 %tobool667, label %if.end.701, label %land.lhs.true.668

land.lhs.true.668:                                ; preds = %land.lhs.true.666
  %452 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any669 = getelementptr inbounds %struct.sv, %struct.sv* %452, i32 0, i32 0
  %453 = load i8*, i8** %sv_any669, align 8
  %454 = bitcast i8* %453 to %struct.xpv*
  %xpv_len670 = getelementptr inbounds %struct.xpv, %struct.xpv* %454, i32 0, i32 2
  %455 = load i64, i64* %xpv_len670, align 8
  %456 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any671 = getelementptr inbounds %struct.sv, %struct.sv* %456, i32 0, i32 0
  %457 = load i8*, i8** %sv_any671, align 8
  %458 = bitcast i8* %457 to %struct.xpv*
  %xpv_cur672 = getelementptr inbounds %struct.xpv, %struct.xpv* %458, i32 0, i32 1
  %459 = load i64, i64* %xpv_cur672, align 8
  %sub673 = sub i64 %455, %459
  %cmp674 = icmp ugt i64 %sub673, 80
  br i1 %cmp674, label %if.then.676, label %if.end.701

if.then.676:                                      ; preds = %land.lhs.true.668
  %460 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any677 = getelementptr inbounds %struct.sv, %struct.sv* %460, i32 0, i32 0
  %461 = load i8*, i8** %sv_any677, align 8
  %462 = bitcast i8* %461 to %struct.xpv*
  %xpv_cur678 = getelementptr inbounds %struct.xpv, %struct.xpv* %462, i32 0, i32 1
  %463 = load i64, i64* %xpv_cur678, align 8
  %cmp679 = icmp ult i64 %463, 60
  br i1 %cmp679, label %if.then.681, label %if.else.685

if.then.681:                                      ; preds = %if.then.676
  %464 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any683 = getelementptr inbounds %struct.sv, %struct.sv* %464, i32 0, i32 0
  %465 = load i8*, i8** %sv_any683, align 8
  %466 = bitcast i8* %465 to %struct.xpv*
  %xpv_len684 = getelementptr inbounds %struct.xpv, %struct.xpv* %466, i32 0, i32 2
  store i64 80, i64* %xpv_len684, align 8
  store i64 80, i64* %tmp682
  %467 = load i64, i64* %tmp682
  br label %if.end.692

if.else.685:                                      ; preds = %if.then.676
  %468 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any687 = getelementptr inbounds %struct.sv, %struct.sv* %468, i32 0, i32 0
  %469 = load i8*, i8** %sv_any687, align 8
  %470 = bitcast i8* %469 to %struct.xpv*
  %xpv_cur688 = getelementptr inbounds %struct.xpv, %struct.xpv* %470, i32 0, i32 1
  %471 = load i64, i64* %xpv_cur688, align 8
  %add689 = add i64 %471, 40
  %472 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any690 = getelementptr inbounds %struct.sv, %struct.sv* %472, i32 0, i32 0
  %473 = load i8*, i8** %sv_any690, align 8
  %474 = bitcast i8* %473 to %struct.xpv*
  %xpv_len691 = getelementptr inbounds %struct.xpv, %struct.xpv* %474, i32 0, i32 2
  store i64 %add689, i64* %xpv_len691, align 8
  store i64 %add689, i64* %tmp686
  %475 = load i64, i64* %tmp686
  br label %if.end.692

if.end.692:                                       ; preds = %if.else.685, %if.then.681
  %476 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any693 = getelementptr inbounds %struct.sv, %struct.sv* %476, i32 0, i32 0
  %477 = load i8*, i8** %sv_any693, align 8
  %478 = bitcast i8* %477 to %struct.xpv*
  %xpv_pv694 = getelementptr inbounds %struct.xpv, %struct.xpv* %478, i32 0, i32 0
  %479 = load i8*, i8** %xpv_pv694, align 8
  %480 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any695 = getelementptr inbounds %struct.sv, %struct.sv* %480, i32 0, i32 0
  %481 = load i8*, i8** %sv_any695, align 8
  %482 = bitcast i8* %481 to %struct.xpv*
  %xpv_len696 = getelementptr inbounds %struct.xpv, %struct.xpv* %482, i32 0, i32 2
  %483 = load i64, i64* %xpv_len696, align 8
  %mul697 = mul i64 %483, 1
  %call698 = call i8* @Perl_safesysrealloc(i8* %479, i64 %mul697)
  %484 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any699 = getelementptr inbounds %struct.sv, %struct.sv* %484, i32 0, i32 0
  %485 = load i8*, i8** %sv_any699, align 8
  %486 = bitcast i8* %485 to %struct.xpv*
  %xpv_pv700 = getelementptr inbounds %struct.xpv, %struct.xpv* %486, i32 0, i32 0
  store i8* %call698, i8** %xpv_pv700, align 8
  br label %if.end.701

if.end.701:                                       ; preds = %if.end.692, %land.lhs.true.668, %land.lhs.true.666, %if.else.663
  br label %if.end.702

if.end.702:                                       ; preds = %if.end.701
  %487 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %487, %struct.sv*** @PL_stack_sp, align 8
  %488 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next703 = getelementptr inbounds %struct.op, %struct.op* %488, i32 0, i32 0
  %489 = load %struct.op*, %struct.op** %op_next703, align 8
  store %struct.op* %489, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.end.702, %if.end.467, %if.end.289, %if.end.93
  %490 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %490
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_eq() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %tmpsv = alloca %struct.sv*, align 8
  %right = alloca %struct.sv*, align 8
  %left = alloca %struct.sv*, align 8
  %auvok = alloca i8, align 1
  %buvok = alloca i8, align 1
  %buv = alloca i64, align 8
  %auv = alloca i64, align 8
  %ivp = alloca %struct.sv*, align 8
  %uvp = alloca %struct.sv*, align 8
  %iv = alloca i64, align 8
  %value = alloca double, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load i64, i64* @PL_amagic_generation, align 8
  %tobool = icmp ne i64 %1, 0
  br i1 %tobool, label %if.then, label %if.end.7

if.then:                                          ; preds = %entry
  %2 = load %struct.sv**, %struct.sv*** %sp, align 8
  %3 = load %struct.sv*, %struct.sv** %2, align 8
  store %struct.sv* %3, %struct.sv** %right, align 8
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %4, i64 -1
  %5 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  store %struct.sv* %5, %struct.sv** %left, align 8
  %6 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags, align 4
  %and = and i32 %7, 268435456
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %8 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %9, 268435456
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.then
  %10 = load %struct.sv*, %struct.sv** %left, align 8
  %11 = load %struct.sv*, %struct.sv** %right, align 8
  %call = call %struct.sv* @Perl_amagic_call(%struct.sv* %10, %struct.sv* %11, i32 32, i32 0)
  store %struct.sv* %call, %struct.sv** %tmpsv, align 8
  %tobool5 = icmp ne %struct.sv* %call, null
  br i1 %tobool5, label %if.then.6, label %if.end

if.then.6:                                        ; preds = %land.lhs.true
  %12 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %12, %struct.sv*** %sp, align 8
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %13, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %14 = load %struct.sv*, %struct.sv** %13, align 8
  %15 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %16 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %15, %struct.sv** %16, align 8
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %17, %struct.sv*** @PL_stack_sp, align 8
  %18 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 0
  %19 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %19, %struct.op** %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  br label %if.end.7

if.end.7:                                         ; preds = %if.end, %entry
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %21 = load %struct.sv*, %struct.sv** %20, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %22, 524288
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %land.lhs.true.11, label %if.end.31

land.lhs.true.11:                                 ; preds = %if.end.7
  %23 = load %struct.sv**, %struct.sv*** %sp, align 8
  %24 = load %struct.sv*, %struct.sv** %23, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %25, 268435456
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %if.end.31, label %land.lhs.true.15

land.lhs.true.15:                                 ; preds = %land.lhs.true.11
  %26 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr16 = getelementptr inbounds %struct.sv*, %struct.sv** %26, i64 -1
  %27 = load %struct.sv*, %struct.sv** %add.ptr16, align 8
  %sv_flags17 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %28, 524288
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %land.lhs.true.20, label %if.end.31

land.lhs.true.20:                                 ; preds = %land.lhs.true.15
  %29 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr21 = getelementptr inbounds %struct.sv*, %struct.sv** %29, i64 -1
  %30 = load %struct.sv*, %struct.sv** %add.ptr21, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %31, 268435456
  %tobool24 = icmp ne i32 %and23, 0
  br i1 %tobool24, label %if.end.31, label %if.then.25

if.then.25:                                       ; preds = %land.lhs.true.20
  %32 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr26 = getelementptr inbounds %struct.sv*, %struct.sv** %32, i32 -1
  store %struct.sv** %incdec.ptr26, %struct.sv*** %sp, align 8
  %33 = load %struct.sv**, %struct.sv*** %sp, align 8
  %34 = load %struct.sv*, %struct.sv** %33, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 0
  %35 = load i8*, i8** %sv_any, align 8
  %36 = bitcast i8* %35 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %36, i32 0, i32 0
  %37 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  %38 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr27 = getelementptr inbounds %struct.sv*, %struct.sv** %38, i64 1
  %39 = load %struct.sv*, %struct.sv** %add.ptr27, align 8
  %sv_any28 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 0
  %40 = load i8*, i8** %sv_any28, align 8
  %41 = bitcast i8* %40 to %struct.xrv*
  %xrv_rv29 = getelementptr inbounds %struct.xrv, %struct.xrv* %41, i32 0, i32 0
  %42 = load %struct.sv*, %struct.sv** %xrv_rv29, align 8
  %cmp = icmp eq %struct.sv* %37, %42
  %cond = select i1 %cmp, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  %43 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %cond, %struct.sv** %43, align 8
  %44 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %44, %struct.sv*** @PL_stack_sp, align 8
  %45 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next30 = getelementptr inbounds %struct.op, %struct.op* %45, i32 0, i32 0
  %46 = load %struct.op*, %struct.op** %op_next30, align 8
  store %struct.op* %46, %struct.op** %retval
  br label %return

if.end.31:                                        ; preds = %land.lhs.true.20, %land.lhs.true.15, %land.lhs.true.11, %if.end.7
  %47 = load %struct.sv**, %struct.sv*** %sp, align 8
  %48 = load %struct.sv*, %struct.sv** %47, align 8
  %sv_flags32 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 2
  %49 = load i32, i32* %sv_flags32, align 4
  %and33 = and i32 %49, 16777216
  %tobool34 = icmp ne i32 %and33, 0
  br i1 %tobool34, label %if.end.50, label %land.lhs.true.35

land.lhs.true.35:                                 ; preds = %if.end.31
  %50 = load %struct.sv**, %struct.sv*** %sp, align 8
  %51 = load %struct.sv*, %struct.sv** %50, align 8
  %sv_flags36 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 2
  %52 = load i32, i32* %sv_flags36, align 4
  %and37 = and i32 %52, 131072
  %tobool38 = icmp ne i32 %and37, 0
  br i1 %tobool38, label %if.then.43, label %lor.lhs.false.39

lor.lhs.false.39:                                 ; preds = %land.lhs.true.35
  %53 = load %struct.sv**, %struct.sv*** %sp, align 8
  %54 = load %struct.sv*, %struct.sv** %53, align 8
  %sv_flags40 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 2
  %55 = load i32, i32* %sv_flags40, align 4
  %and41 = and i32 %55, 262144
  %tobool42 = icmp ne i32 %and41, 0
  br i1 %tobool42, label %if.then.43, label %if.end.50

if.then.43:                                       ; preds = %lor.lhs.false.39, %land.lhs.true.35
  %56 = load %struct.sv**, %struct.sv*** %sp, align 8
  %57 = load %struct.sv*, %struct.sv** %56, align 8
  %sv_flags44 = getelementptr inbounds %struct.sv, %struct.sv* %57, i32 0, i32 2
  %58 = load i32, i32* %sv_flags44, align 4
  %and45 = and i32 %58, 65536
  %tobool46 = icmp ne i32 %and45, 0
  br i1 %tobool46, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.43
  %59 = load %struct.sv**, %struct.sv*** %sp, align 8
  %60 = load %struct.sv*, %struct.sv** %59, align 8
  %sv_any47 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 0
  %61 = load i8*, i8** %sv_any47, align 8
  %62 = bitcast i8* %61 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %62, i32 0, i32 3
  %63 = load i64, i64* %xiv_iv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then.43
  %64 = load %struct.sv**, %struct.sv*** %sp, align 8
  %65 = load %struct.sv*, %struct.sv** %64, align 8
  %call48 = call i64 @Perl_sv_2iv(%struct.sv* %65)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond49 = phi i64 [ %63, %cond.true ], [ %call48, %cond.false ]
  br label %if.end.50

if.end.50:                                        ; preds = %cond.end, %lor.lhs.false.39, %if.end.31
  %66 = load %struct.sv**, %struct.sv*** %sp, align 8
  %67 = load %struct.sv*, %struct.sv** %66, align 8
  %sv_flags51 = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 2
  %68 = load i32, i32* %sv_flags51, align 4
  %and52 = and i32 %68, 65536
  %tobool53 = icmp ne i32 %and52, 0
  br i1 %tobool53, label %if.then.54, label %if.end.132

if.then.54:                                       ; preds = %if.end.50
  %69 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr55 = getelementptr inbounds %struct.sv*, %struct.sv** %69, i64 -1
  %70 = load %struct.sv*, %struct.sv** %add.ptr55, align 8
  %sv_flags56 = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 2
  %71 = load i32, i32* %sv_flags56, align 4
  %and57 = and i32 %71, 16777216
  %tobool58 = icmp ne i32 %and57, 0
  br i1 %tobool58, label %if.end.83, label %land.lhs.true.59

land.lhs.true.59:                                 ; preds = %if.then.54
  %72 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr60 = getelementptr inbounds %struct.sv*, %struct.sv** %72, i64 -1
  %73 = load %struct.sv*, %struct.sv** %add.ptr60, align 8
  %sv_flags61 = getelementptr inbounds %struct.sv, %struct.sv* %73, i32 0, i32 2
  %74 = load i32, i32* %sv_flags61, align 4
  %and62 = and i32 %74, 131072
  %tobool63 = icmp ne i32 %and62, 0
  br i1 %tobool63, label %if.then.69, label %lor.lhs.false.64

lor.lhs.false.64:                                 ; preds = %land.lhs.true.59
  %75 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr65 = getelementptr inbounds %struct.sv*, %struct.sv** %75, i64 -1
  %76 = load %struct.sv*, %struct.sv** %add.ptr65, align 8
  %sv_flags66 = getelementptr inbounds %struct.sv, %struct.sv* %76, i32 0, i32 2
  %77 = load i32, i32* %sv_flags66, align 4
  %and67 = and i32 %77, 262144
  %tobool68 = icmp ne i32 %and67, 0
  br i1 %tobool68, label %if.then.69, label %if.end.83

if.then.69:                                       ; preds = %lor.lhs.false.64, %land.lhs.true.59
  %78 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr70 = getelementptr inbounds %struct.sv*, %struct.sv** %78, i64 -1
  %79 = load %struct.sv*, %struct.sv** %add.ptr70, align 8
  %sv_flags71 = getelementptr inbounds %struct.sv, %struct.sv* %79, i32 0, i32 2
  %80 = load i32, i32* %sv_flags71, align 4
  %and72 = and i32 %80, 65536
  %tobool73 = icmp ne i32 %and72, 0
  br i1 %tobool73, label %cond.true.74, label %cond.false.78

cond.true.74:                                     ; preds = %if.then.69
  %81 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr75 = getelementptr inbounds %struct.sv*, %struct.sv** %81, i64 -1
  %82 = load %struct.sv*, %struct.sv** %add.ptr75, align 8
  %sv_any76 = getelementptr inbounds %struct.sv, %struct.sv* %82, i32 0, i32 0
  %83 = load i8*, i8** %sv_any76, align 8
  %84 = bitcast i8* %83 to %struct.xpviv*
  %xiv_iv77 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %84, i32 0, i32 3
  %85 = load i64, i64* %xiv_iv77, align 8
  br label %cond.end.81

cond.false.78:                                    ; preds = %if.then.69
  %86 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr79 = getelementptr inbounds %struct.sv*, %struct.sv** %86, i64 -1
  %87 = load %struct.sv*, %struct.sv** %add.ptr79, align 8
  %call80 = call i64 @Perl_sv_2iv(%struct.sv* %87)
  br label %cond.end.81

cond.end.81:                                      ; preds = %cond.false.78, %cond.true.74
  %cond82 = phi i64 [ %85, %cond.true.74 ], [ %call80, %cond.false.78 ]
  br label %if.end.83

if.end.83:                                        ; preds = %cond.end.81, %lor.lhs.false.64, %if.then.54
  %88 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr84 = getelementptr inbounds %struct.sv*, %struct.sv** %88, i64 -1
  %89 = load %struct.sv*, %struct.sv** %add.ptr84, align 8
  %sv_flags85 = getelementptr inbounds %struct.sv, %struct.sv* %89, i32 0, i32 2
  %90 = load i32, i32* %sv_flags85, align 4
  %and86 = and i32 %90, 65536
  %tobool87 = icmp ne i32 %and86, 0
  br i1 %tobool87, label %if.then.88, label %if.end.131

if.then.88:                                       ; preds = %if.end.83
  %91 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr89 = getelementptr inbounds %struct.sv*, %struct.sv** %91, i64 -1
  %92 = load %struct.sv*, %struct.sv** %add.ptr89, align 8
  %sv_flags90 = getelementptr inbounds %struct.sv, %struct.sv* %92, i32 0, i32 2
  %93 = load i32, i32* %sv_flags90, align 4
  %and91 = and i32 %93, -2147418112
  %cmp92 = icmp eq i32 %and91, -2147418112
  %conv = zext i1 %cmp92 to i32
  %conv93 = trunc i32 %conv to i8
  store i8 %conv93, i8* %auvok, align 1
  %94 = load %struct.sv**, %struct.sv*** %sp, align 8
  %95 = load %struct.sv*, %struct.sv** %94, align 8
  %sv_flags94 = getelementptr inbounds %struct.sv, %struct.sv* %95, i32 0, i32 2
  %96 = load i32, i32* %sv_flags94, align 4
  %and95 = and i32 %96, -2147418112
  %cmp96 = icmp eq i32 %and95, -2147418112
  %conv97 = zext i1 %cmp96 to i32
  %conv98 = trunc i32 %conv97 to i8
  store i8 %conv98, i8* %buvok, align 1
  %97 = load i8, i8* %auvok, align 1
  %conv99 = sext i8 %97 to i32
  %98 = load i8, i8* %buvok, align 1
  %conv100 = sext i8 %98 to i32
  %cmp101 = icmp eq i32 %conv99, %conv100
  br i1 %cmp101, label %if.then.103, label %if.end.112

if.then.103:                                      ; preds = %if.then.88
  %99 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr104 = getelementptr inbounds %struct.sv*, %struct.sv** %99, i32 -1
  store %struct.sv** %incdec.ptr104, %struct.sv*** %sp, align 8
  %100 = load %struct.sv*, %struct.sv** %99, align 8
  %sv_any105 = getelementptr inbounds %struct.sv, %struct.sv* %100, i32 0, i32 0
  %101 = load i8*, i8** %sv_any105, align 8
  %102 = bitcast i8* %101 to %struct.xpvuv*
  %xuv_uv = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %102, i32 0, i32 3
  %103 = load i64, i64* %xuv_uv, align 8
  store i64 %103, i64* %buv, align 8
  %104 = load %struct.sv**, %struct.sv*** %sp, align 8
  %105 = load %struct.sv*, %struct.sv** %104, align 8
  %sv_any106 = getelementptr inbounds %struct.sv, %struct.sv* %105, i32 0, i32 0
  %106 = load i8*, i8** %sv_any106, align 8
  %107 = bitcast i8* %106 to %struct.xpvuv*
  %xuv_uv107 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %107, i32 0, i32 3
  %108 = load i64, i64* %xuv_uv107, align 8
  store i64 %108, i64* %auv, align 8
  %109 = load i64, i64* %auv, align 8
  %110 = load i64, i64* %buv, align 8
  %cmp108 = icmp eq i64 %109, %110
  %cond110 = select i1 %cmp108, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  %111 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %cond110, %struct.sv** %111, align 8
  %112 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %112, %struct.sv*** @PL_stack_sp, align 8
  %113 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next111 = getelementptr inbounds %struct.op, %struct.op* %113, i32 0, i32 0
  %114 = load %struct.op*, %struct.op** %op_next111, align 8
  store %struct.op* %114, %struct.op** %retval
  br label %return

if.end.112:                                       ; preds = %if.then.88
  %115 = load i8, i8* %auvok, align 1
  %tobool113 = icmp ne i8 %115, 0
  br i1 %tobool113, label %if.then.114, label %if.else

if.then.114:                                      ; preds = %if.end.112
  %116 = load %struct.sv**, %struct.sv*** %sp, align 8
  %117 = load %struct.sv*, %struct.sv** %116, align 8
  store %struct.sv* %117, %struct.sv** %ivp, align 8
  %118 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr115 = getelementptr inbounds %struct.sv*, %struct.sv** %118, i32 -1
  store %struct.sv** %incdec.ptr115, %struct.sv*** %sp, align 8
  %119 = load %struct.sv*, %struct.sv** %incdec.ptr115, align 8
  store %struct.sv* %119, %struct.sv** %uvp, align 8
  br label %if.end.117

if.else:                                          ; preds = %if.end.112
  %120 = load %struct.sv**, %struct.sv*** %sp, align 8
  %121 = load %struct.sv*, %struct.sv** %120, align 8
  store %struct.sv* %121, %struct.sv** %uvp, align 8
  %122 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr116 = getelementptr inbounds %struct.sv*, %struct.sv** %122, i32 -1
  store %struct.sv** %incdec.ptr116, %struct.sv*** %sp, align 8
  %123 = load %struct.sv*, %struct.sv** %incdec.ptr116, align 8
  store %struct.sv* %123, %struct.sv** %ivp, align 8
  br label %if.end.117

if.end.117:                                       ; preds = %if.else, %if.then.114
  %124 = load %struct.sv*, %struct.sv** %ivp, align 8
  %sv_any118 = getelementptr inbounds %struct.sv, %struct.sv* %124, i32 0, i32 0
  %125 = load i8*, i8** %sv_any118, align 8
  %126 = bitcast i8* %125 to %struct.xpviv*
  %xiv_iv119 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %126, i32 0, i32 3
  %127 = load i64, i64* %xiv_iv119, align 8
  store i64 %127, i64* %iv, align 8
  %128 = load i64, i64* %iv, align 8
  %cmp120 = icmp slt i64 %128, 0
  br i1 %cmp120, label %if.then.122, label %if.end.124

if.then.122:                                      ; preds = %if.end.117
  %129 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_no, %struct.sv** %129, align 8
  %130 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %130, %struct.sv*** @PL_stack_sp, align 8
  %131 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next123 = getelementptr inbounds %struct.op, %struct.op* %131, i32 0, i32 0
  %132 = load %struct.op*, %struct.op** %op_next123, align 8
  store %struct.op* %132, %struct.op** %retval
  br label %return

if.end.124:                                       ; preds = %if.end.117
  %133 = load i64, i64* %iv, align 8
  %134 = load %struct.sv*, %struct.sv** %uvp, align 8
  %sv_any125 = getelementptr inbounds %struct.sv, %struct.sv* %134, i32 0, i32 0
  %135 = load i8*, i8** %sv_any125, align 8
  %136 = bitcast i8* %135 to %struct.xpvuv*
  %xuv_uv126 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %136, i32 0, i32 3
  %137 = load i64, i64* %xuv_uv126, align 8
  %cmp127 = icmp eq i64 %133, %137
  %cond129 = select i1 %cmp127, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  %138 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %cond129, %struct.sv** %138, align 8
  %139 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %139, %struct.sv*** @PL_stack_sp, align 8
  %140 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next130 = getelementptr inbounds %struct.op, %struct.op* %140, i32 0, i32 0
  %141 = load %struct.op*, %struct.op** %op_next130, align 8
  store %struct.op* %141, %struct.op** %retval
  br label %return

if.end.131:                                       ; preds = %if.end.83
  br label %if.end.132

if.end.132:                                       ; preds = %if.end.131, %if.end.50
  %142 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr133 = getelementptr inbounds %struct.sv*, %struct.sv** %142, i32 -1
  store %struct.sv** %incdec.ptr133, %struct.sv*** %sp, align 8
  %143 = load %struct.sv*, %struct.sv** %142, align 8
  store %struct.sv* %143, %struct.sv** @PL_Sv, align 8
  %144 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags134 = getelementptr inbounds %struct.sv, %struct.sv* %144, i32 0, i32 2
  %145 = load i32, i32* %sv_flags134, align 4
  %and135 = and i32 %145, 131072
  %tobool136 = icmp ne i32 %and135, 0
  br i1 %tobool136, label %cond.true.137, label %cond.false.139

cond.true.137:                                    ; preds = %if.end.132
  %146 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any138 = getelementptr inbounds %struct.sv, %struct.sv* %146, i32 0, i32 0
  %147 = load i8*, i8** %sv_any138, align 8
  %148 = bitcast i8* %147 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %148, i32 0, i32 4
  %149 = load double, double* %xnv_nv, align 8
  br label %cond.end.141

cond.false.139:                                   ; preds = %if.end.132
  %150 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call140 = call double @Perl_sv_2nv(%struct.sv* %150)
  br label %cond.end.141

cond.end.141:                                     ; preds = %cond.false.139, %cond.true.137
  %cond142 = phi double [ %149, %cond.true.137 ], [ %call140, %cond.false.139 ]
  store double %cond142, double* %value, align 8
  %151 = load %struct.sv**, %struct.sv*** %sp, align 8
  %152 = load %struct.sv*, %struct.sv** %151, align 8
  %sv_flags143 = getelementptr inbounds %struct.sv, %struct.sv* %152, i32 0, i32 2
  %153 = load i32, i32* %sv_flags143, align 4
  %and144 = and i32 %153, 131072
  %tobool145 = icmp ne i32 %and144, 0
  br i1 %tobool145, label %cond.true.146, label %cond.false.149

cond.true.146:                                    ; preds = %cond.end.141
  %154 = load %struct.sv**, %struct.sv*** %sp, align 8
  %155 = load %struct.sv*, %struct.sv** %154, align 8
  %sv_any147 = getelementptr inbounds %struct.sv, %struct.sv* %155, i32 0, i32 0
  %156 = load i8*, i8** %sv_any147, align 8
  %157 = bitcast i8* %156 to %struct.xpvnv*
  %xnv_nv148 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %157, i32 0, i32 4
  %158 = load double, double* %xnv_nv148, align 8
  br label %cond.end.151

cond.false.149:                                   ; preds = %cond.end.141
  %159 = load %struct.sv**, %struct.sv*** %sp, align 8
  %160 = load %struct.sv*, %struct.sv** %159, align 8
  %call150 = call double @Perl_sv_2nv(%struct.sv* %160)
  br label %cond.end.151

cond.end.151:                                     ; preds = %cond.false.149, %cond.true.146
  %cond152 = phi double [ %158, %cond.true.146 ], [ %call150, %cond.false.149 ]
  %161 = load double, double* %value, align 8
  %cmp153 = fcmp oeq double %cond152, %161
  %cond155 = select i1 %cmp153, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  %162 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %cond155, %struct.sv** %162, align 8
  %163 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %163, %struct.sv*** @PL_stack_sp, align 8
  %164 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next156 = getelementptr inbounds %struct.op, %struct.op* %164, i32 0, i32 0
  %165 = load %struct.op*, %struct.op** %op_next156, align 8
  store %struct.op* %165, %struct.op** %retval
  br label %return

return:                                           ; preds = %cond.end.151, %if.end.124, %if.then.122, %if.then.103, %if.then.25, %if.then.6
  %166 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %166
}

declare i64 @Perl_sv_2iv(%struct.sv*) #1

declare double @Perl_sv_2nv(%struct.sv*) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_preinc() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 255
  %cmp = icmp ugt i32 %and, 9
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_modify, i32 0, i32 0))
  store %struct.op* %call, %struct.op** %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %5 = load %struct.sv*, %struct.sv** %4, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %6, 8388608
  %tobool = icmp ne i32 %and2, 0
  br i1 %tobool, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %8 = load %struct.sv*, %struct.sv** %7, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %9, -2147418112
  %cmp5 = icmp eq i32 %and4, 65536
  br i1 %cmp5, label %land.lhs.true.6, label %if.else

land.lhs.true.6:                                  ; preds = %land.lhs.true
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %11 = load %struct.sv*, %struct.sv** %10, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %12, 131072
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %if.else, label %land.lhs.true.10

land.lhs.true.10:                                 ; preds = %land.lhs.true.6
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  %14 = load %struct.sv*, %struct.sv** %13, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %15, 262144
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %if.else, label %land.lhs.true.14

land.lhs.true.14:                                 ; preds = %land.lhs.true.10
  %16 = load %struct.sv**, %struct.sv*** %sp, align 8
  %17 = load %struct.sv*, %struct.sv** %16, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 0
  %18 = load i8*, i8** %sv_any, align 8
  %19 = bitcast i8* %18 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %19, i32 0, i32 3
  %20 = load i64, i64* %xiv_iv, align 8
  %cmp15 = icmp ne i64 %20, 9223372036854775807
  br i1 %cmp15, label %if.then.16, label %if.else

if.then.16:                                       ; preds = %land.lhs.true.14
  %21 = load %struct.sv**, %struct.sv*** %sp, align 8
  %22 = load %struct.sv*, %struct.sv** %21, align 8
  %sv_any17 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 0
  %23 = load i8*, i8** %sv_any17, align 8
  %24 = bitcast i8* %23 to %struct.xpviv*
  %xiv_iv18 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %24, i32 0, i32 3
  %25 = load i64, i64* %xiv_iv18, align 8
  %inc = add nsw i64 %25, 1
  store i64 %inc, i64* %xiv_iv18, align 8
  %26 = load %struct.sv**, %struct.sv*** %sp, align 8
  %27 = load %struct.sv*, %struct.sv** %26, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %28, -100663297
  store i32 %and20, i32* %sv_flags19, align 4
  br label %if.end.21

if.else:                                          ; preds = %land.lhs.true.14, %land.lhs.true.10, %land.lhs.true.6, %land.lhs.true, %if.end
  %29 = load %struct.sv**, %struct.sv*** %sp, align 8
  %30 = load %struct.sv*, %struct.sv** %29, align 8
  call void @Perl_sv_inc(%struct.sv* %30)
  br label %if.end.21

if.end.21:                                        ; preds = %if.else, %if.then.16
  %31 = load %struct.sv**, %struct.sv*** %sp, align 8
  %32 = load %struct.sv*, %struct.sv** %31, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %33, 16384
  %tobool24 = icmp ne i32 %and23, 0
  br i1 %tobool24, label %if.then.25, label %if.end.27

if.then.25:                                       ; preds = %if.end.21
  %34 = load %struct.sv**, %struct.sv*** %sp, align 8
  %35 = load %struct.sv*, %struct.sv** %34, align 8
  %call26 = call i32 @Perl_mg_set(%struct.sv* %35)
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.25, %if.end.21
  %36 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %36, i32 0, i32 0
  %37 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %37, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.end.27, %if.then
  %38 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %38
}

declare %struct.op* @Perl_die(i8*, ...) #1

declare void @Perl_sv_inc(%struct.sv*) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_or() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  %tobool = icmp ne %struct.sv* %2, null
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %entry
  br i1 false, label %if.then, label %if.else

cond.false:                                       ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %4 = load %struct.sv*, %struct.sv** %3, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags, align 4
  %and = and i32 %5, 262144
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %cond.true.2, label %cond.false.11

cond.true.2:                                      ; preds = %cond.false
  %6 = load %struct.sv**, %struct.sv*** %sp, align 8
  %7 = load %struct.sv*, %struct.sv** %6, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  %8 = load i8*, i8** %sv_any, align 8
  %9 = bitcast i8* %8 to %struct.xpv*
  store %struct.xpv* %9, %struct.xpv** @PL_Xpv, align 8
  %tobool3 = icmp ne %struct.xpv* %9, null
  br i1 %tobool3, label %land.lhs.true, label %cond.false.10

land.lhs.true:                                    ; preds = %cond.true.2
  %10 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %10, i32 0, i32 1
  %11 = load i64, i64* %xpv_cur, align 8
  %cmp = icmp ugt i64 %11, 1
  br i1 %cmp, label %cond.true.9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %12 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_cur4 = getelementptr inbounds %struct.xpv, %struct.xpv* %12, i32 0, i32 1
  %13 = load i64, i64* %xpv_cur4, align 8
  %tobool5 = icmp ne i64 %13, 0
  br i1 %tobool5, label %land.lhs.true.6, label %cond.false.10

land.lhs.true.6:                                  ; preds = %lor.lhs.false
  %14 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %14, i32 0, i32 0
  %15 = load i8*, i8** %xpv_pv, align 8
  %16 = load i8, i8* %15, align 1
  %conv = sext i8 %16 to i32
  %cmp7 = icmp ne i32 %conv, 48
  br i1 %cmp7, label %cond.true.9, label %cond.false.10

cond.true.9:                                      ; preds = %land.lhs.true.6, %land.lhs.true
  br i1 true, label %if.then, label %if.else

cond.false.10:                                    ; preds = %land.lhs.true.6, %lor.lhs.false, %cond.true.2
  br i1 false, label %if.then, label %if.else

cond.false.11:                                    ; preds = %cond.false
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %19, 65536
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %cond.true.15, label %cond.false.19

cond.true.15:                                     ; preds = %cond.false.11
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %21 = load %struct.sv*, %struct.sv** %20, align 8
  %sv_any16 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any16, align 8
  %23 = bitcast i8* %22 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %23, i32 0, i32 3
  %24 = load i64, i64* %xiv_iv, align 8
  %cmp17 = icmp ne i64 %24, 0
  br i1 %cmp17, label %if.then, label %if.else

cond.false.19:                                    ; preds = %cond.false.11
  %25 = load %struct.sv**, %struct.sv*** %sp, align 8
  %26 = load %struct.sv*, %struct.sv** %25, align 8
  %sv_flags20 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags20, align 4
  %and21 = and i32 %27, 131072
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %cond.true.23, label %cond.false.27

cond.true.23:                                     ; preds = %cond.false.19
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %29 = load %struct.sv*, %struct.sv** %28, align 8
  %sv_any24 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 0
  %30 = load i8*, i8** %sv_any24, align 8
  %31 = bitcast i8* %30 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %31, i32 0, i32 4
  %32 = load double, double* %xnv_nv, align 8
  %cmp25 = fcmp une double %32, 0.000000e+00
  br i1 %cmp25, label %if.then, label %if.else

cond.false.27:                                    ; preds = %cond.false.19
  %33 = load %struct.sv**, %struct.sv*** %sp, align 8
  %34 = load %struct.sv*, %struct.sv** %33, align 8
  %call = call signext i8 @Perl_sv_2bool(%struct.sv* %34)
  %conv28 = sext i8 %call to i32
  %tobool29 = icmp ne i32 %conv28, 0
  br i1 %tobool29, label %if.then, label %if.else

if.then:                                          ; preds = %cond.false.27, %cond.true.23, %cond.true.15, %cond.false.10, %cond.true.9, %cond.true
  %35 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %35, %struct.sv*** @PL_stack_sp, align 8
  %36 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %36, i32 0, i32 0
  %37 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %37, %struct.op** %retval
  br label %return

if.else:                                          ; preds = %cond.false.27, %cond.true.23, %cond.true.15, %cond.false.10, %cond.true.9, %cond.true
  %38 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %38, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %39 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %39, %struct.sv*** @PL_stack_sp, align 8
  %40 = load %struct.op*, %struct.op** @PL_op, align 8
  %41 = bitcast %struct.op* %40 to %struct.logop*
  %op_other = getelementptr inbounds %struct.logop, %struct.logop* %41, i32 0, i32 9
  %42 = load %struct.op*, %struct.op** %op_other, align 8
  store %struct.op* %42, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %43 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %43
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_add() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %useleft = alloca i8, align 1
  %tmpsv = alloca %struct.sv*, align 8
  %right = alloca %struct.sv*, align 8
  %left = alloca %struct.sv*, align 8
  %tmp = alloca %struct.sv*, align 8
  %auv = alloca i64, align 8
  %auvok = alloca i8, align 1
  %a_valid = alloca i8, align 1
  %aiv = alloca i64, align 8
  %result_good = alloca i8, align 1
  %result = alloca i64, align 8
  %buv = alloca i64, align 8
  %buvok = alloca i8, align 1
  %biv = alloca i64, align 8
  %tmp198 = alloca %struct.sv*, align 8
  %tmp210 = alloca %struct.sv*, align 8
  %tmp220 = alloca %struct.sv*, align 8
  %value = alloca double, align 8
  %tmp246 = alloca %struct.sv*, align 8
  %tmp266 = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  %2 = load i8, i8* %op_flags, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %3, i64 -1
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 3
  %6 = load i64, i64* %op_targ, align 8
  %7 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %arrayidx1 = getelementptr inbounds %struct.sv*, %struct.sv** %7, i64 %6
  %8 = load %struct.sv*, %struct.sv** %arrayidx1, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %4, %cond.true ], [ %8, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %targ, align 8
  %9 = load i64, i64* @PL_amagic_generation, align 8
  %tobool2 = icmp ne i64 %9, 0
  br i1 %tobool2, label %if.then, label %if.end.31

if.then:                                          ; preds = %cond.end
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %11 = load %struct.sv*, %struct.sv** %10, align 8
  store %struct.sv* %11, %struct.sv** %right, align 8
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %12, i64 -1
  %13 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  store %struct.sv* %13, %struct.sv** %left, align 8
  %14 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags, align 4
  %and3 = and i32 %15, 268435456
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %16 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %17, 268435456
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %land.lhs.true, label %if.end.30

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.then
  %18 = load %struct.sv*, %struct.sv** %left, align 8
  %19 = load %struct.sv*, %struct.sv** %right, align 8
  %20 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags8 = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 6
  %21 = load i8, i8* %op_flags8, align 1
  %conv9 = zext i8 %21 to i32
  %and10 = and i32 %conv9, 64
  %tobool11 = icmp ne i32 %and10, 0
  %cond12 = select i1 %tobool11, i32 4, i32 0
  %call = call %struct.sv* @Perl_amagic_call(%struct.sv* %18, %struct.sv* %19, i32 6, i32 %cond12)
  store %struct.sv* %call, %struct.sv** %tmpsv, align 8
  %tobool13 = icmp ne %struct.sv* %call, null
  br i1 %tobool13, label %if.then.14, label %if.end.30

if.then.14:                                       ; preds = %land.lhs.true
  %22 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %22, %struct.sv*** %sp, align 8
  %23 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %23, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %24 = load %struct.sv*, %struct.sv** %23, align 8
  %25 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags15 = getelementptr inbounds %struct.op, %struct.op* %25, i32 0, i32 6
  %26 = load i8, i8* %op_flags15, align 1
  %conv16 = zext i8 %26 to i32
  %and17 = and i32 %conv16, 64
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %if.then.23, label %lor.lhs.false.19

lor.lhs.false.19:                                 ; preds = %if.then.14
  %27 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags20 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags20, align 4
  %and21 = and i32 %28, 1024
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %if.then.23, label %if.else

if.then.23:                                       ; preds = %lor.lhs.false.19, %if.then.14
  %29 = load %struct.sv*, %struct.sv** %targ, align 8
  %30 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %29, %struct.sv* %30, i32 2)
  %31 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags24 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags24, align 4
  %and25 = and i32 %32, 16384
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %if.then.27, label %if.end

if.then.27:                                       ; preds = %if.then.23
  %33 = load %struct.sv*, %struct.sv** %targ, align 8
  %call28 = call i32 @Perl_mg_set(%struct.sv* %33)
  br label %if.end

if.end:                                           ; preds = %if.then.27, %if.then.23
  %34 = load %struct.sv*, %struct.sv** %targ, align 8
  %35 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %34, %struct.sv** %35, align 8
  store %struct.sv* %34, %struct.sv** %tmp
  %36 = load %struct.sv*, %struct.sv** %tmp
  br label %if.end.29

if.else:                                          ; preds = %lor.lhs.false.19
  %37 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %38 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %37, %struct.sv** %38, align 8
  br label %if.end.29

if.end.29:                                        ; preds = %if.else, %if.end
  %39 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %39, %struct.sv*** @PL_stack_sp, align 8
  %40 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %40, i32 0, i32 0
  %41 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %41, %struct.op** %retval
  br label %return

if.end.30:                                        ; preds = %land.lhs.true, %lor.lhs.false
  br label %if.end.31

if.end.31:                                        ; preds = %if.end.30, %cond.end
  %42 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr32 = getelementptr inbounds %struct.sv*, %struct.sv** %42, i64 -1
  %43 = load %struct.sv*, %struct.sv** %add.ptr32, align 8
  %sv_flags33 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 2
  %44 = load i32, i32* %sv_flags33, align 4
  %and34 = and i32 %44, 118423552
  %tobool35 = icmp ne i32 %and34, 0
  br i1 %tobool35, label %lor.end, label %lor.lhs.false.36

lor.lhs.false.36:                                 ; preds = %if.end.31
  %45 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr37 = getelementptr inbounds %struct.sv*, %struct.sv** %45, i64 -1
  %46 = load %struct.sv*, %struct.sv** %add.ptr37, align 8
  %sv_flags38 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags38, align 4
  %and39 = and i32 %47, 8192
  %tobool40 = icmp ne i32 %and39, 0
  br i1 %tobool40, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false.36
  %48 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags41 = getelementptr inbounds %struct.op, %struct.op* %48, i32 0, i32 6
  %49 = load i8, i8* %op_flags41, align 1
  %conv42 = zext i8 %49 to i32
  %and43 = and i32 %conv42, 64
  %tobool44 = icmp ne i32 %and43, 0
  %lnot = xor i1 %tobool44, true
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false.36, %if.end.31
  %50 = phi i1 [ true, %lor.lhs.false.36 ], [ true, %if.end.31 ], [ %lnot, %lor.rhs ]
  %lor.ext = zext i1 %50 to i32
  %conv45 = trunc i32 %lor.ext to i8
  store i8 %conv45, i8* %useleft, align 1
  %51 = load %struct.sv**, %struct.sv*** %sp, align 8
  %52 = load %struct.sv*, %struct.sv** %51, align 8
  %sv_flags46 = getelementptr inbounds %struct.sv, %struct.sv* %52, i32 0, i32 2
  %53 = load i32, i32* %sv_flags46, align 4
  %and47 = and i32 %53, 16777216
  %tobool48 = icmp ne i32 %and47, 0
  br i1 %tobool48, label %if.end.66, label %land.lhs.true.49

land.lhs.true.49:                                 ; preds = %lor.end
  %54 = load %struct.sv**, %struct.sv*** %sp, align 8
  %55 = load %struct.sv*, %struct.sv** %54, align 8
  %sv_flags50 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 2
  %56 = load i32, i32* %sv_flags50, align 4
  %and51 = and i32 %56, 131072
  %tobool52 = icmp ne i32 %and51, 0
  br i1 %tobool52, label %if.then.57, label %lor.lhs.false.53

lor.lhs.false.53:                                 ; preds = %land.lhs.true.49
  %57 = load %struct.sv**, %struct.sv*** %sp, align 8
  %58 = load %struct.sv*, %struct.sv** %57, align 8
  %sv_flags54 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 2
  %59 = load i32, i32* %sv_flags54, align 4
  %and55 = and i32 %59, 262144
  %tobool56 = icmp ne i32 %and55, 0
  br i1 %tobool56, label %if.then.57, label %if.end.66

if.then.57:                                       ; preds = %lor.lhs.false.53, %land.lhs.true.49
  %60 = load %struct.sv**, %struct.sv*** %sp, align 8
  %61 = load %struct.sv*, %struct.sv** %60, align 8
  %sv_flags58 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 2
  %62 = load i32, i32* %sv_flags58, align 4
  %and59 = and i32 %62, 65536
  %tobool60 = icmp ne i32 %and59, 0
  br i1 %tobool60, label %cond.true.61, label %cond.false.62

cond.true.61:                                     ; preds = %if.then.57
  %63 = load %struct.sv**, %struct.sv*** %sp, align 8
  %64 = load %struct.sv*, %struct.sv** %63, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 0
  %65 = load i8*, i8** %sv_any, align 8
  %66 = bitcast i8* %65 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %66, i32 0, i32 3
  %67 = load i64, i64* %xiv_iv, align 8
  br label %cond.end.64

cond.false.62:                                    ; preds = %if.then.57
  %68 = load %struct.sv**, %struct.sv*** %sp, align 8
  %69 = load %struct.sv*, %struct.sv** %68, align 8
  %call63 = call i64 @Perl_sv_2iv(%struct.sv* %69)
  br label %cond.end.64

cond.end.64:                                      ; preds = %cond.false.62, %cond.true.61
  %cond65 = phi i64 [ %67, %cond.true.61 ], [ %call63, %cond.false.62 ]
  br label %if.end.66

if.end.66:                                        ; preds = %cond.end.64, %lor.lhs.false.53, %lor.end
  %70 = load %struct.sv**, %struct.sv*** %sp, align 8
  %71 = load %struct.sv*, %struct.sv** %70, align 8
  %sv_flags67 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 2
  %72 = load i32, i32* %sv_flags67, align 4
  %and68 = and i32 %72, 65536
  %tobool69 = icmp ne i32 %and68, 0
  br i1 %tobool69, label %if.then.70, label %if.end.226

if.then.70:                                       ; preds = %if.end.66
  store i64 0, i64* %auv, align 8
  store i8 0, i8* %auvok, align 1
  store i8 0, i8* %a_valid, align 1
  %73 = load i8, i8* %useleft, align 1
  %tobool74 = icmp ne i8 %73, 0
  br i1 %tobool74, label %if.else.76, label %if.then.75

if.then.75:                                       ; preds = %if.then.70
  store i64 0, i64* %auv, align 8
  store i8 1, i8* %auvok, align 1
  store i8 1, i8* %a_valid, align 1
  br label %if.end.132

if.else.76:                                       ; preds = %if.then.70
  %74 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr77 = getelementptr inbounds %struct.sv*, %struct.sv** %74, i64 -1
  %75 = load %struct.sv*, %struct.sv** %add.ptr77, align 8
  %sv_flags78 = getelementptr inbounds %struct.sv, %struct.sv* %75, i32 0, i32 2
  %76 = load i32, i32* %sv_flags78, align 4
  %and79 = and i32 %76, 16777216
  %tobool80 = icmp ne i32 %and79, 0
  br i1 %tobool80, label %if.end.105, label %land.lhs.true.81

land.lhs.true.81:                                 ; preds = %if.else.76
  %77 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr82 = getelementptr inbounds %struct.sv*, %struct.sv** %77, i64 -1
  %78 = load %struct.sv*, %struct.sv** %add.ptr82, align 8
  %sv_flags83 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 2
  %79 = load i32, i32* %sv_flags83, align 4
  %and84 = and i32 %79, 131072
  %tobool85 = icmp ne i32 %and84, 0
  br i1 %tobool85, label %if.then.91, label %lor.lhs.false.86

lor.lhs.false.86:                                 ; preds = %land.lhs.true.81
  %80 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr87 = getelementptr inbounds %struct.sv*, %struct.sv** %80, i64 -1
  %81 = load %struct.sv*, %struct.sv** %add.ptr87, align 8
  %sv_flags88 = getelementptr inbounds %struct.sv, %struct.sv* %81, i32 0, i32 2
  %82 = load i32, i32* %sv_flags88, align 4
  %and89 = and i32 %82, 262144
  %tobool90 = icmp ne i32 %and89, 0
  br i1 %tobool90, label %if.then.91, label %if.end.105

if.then.91:                                       ; preds = %lor.lhs.false.86, %land.lhs.true.81
  %83 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr92 = getelementptr inbounds %struct.sv*, %struct.sv** %83, i64 -1
  %84 = load %struct.sv*, %struct.sv** %add.ptr92, align 8
  %sv_flags93 = getelementptr inbounds %struct.sv, %struct.sv* %84, i32 0, i32 2
  %85 = load i32, i32* %sv_flags93, align 4
  %and94 = and i32 %85, 65536
  %tobool95 = icmp ne i32 %and94, 0
  br i1 %tobool95, label %cond.true.96, label %cond.false.100

cond.true.96:                                     ; preds = %if.then.91
  %86 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr97 = getelementptr inbounds %struct.sv*, %struct.sv** %86, i64 -1
  %87 = load %struct.sv*, %struct.sv** %add.ptr97, align 8
  %sv_any98 = getelementptr inbounds %struct.sv, %struct.sv* %87, i32 0, i32 0
  %88 = load i8*, i8** %sv_any98, align 8
  %89 = bitcast i8* %88 to %struct.xpviv*
  %xiv_iv99 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %89, i32 0, i32 3
  %90 = load i64, i64* %xiv_iv99, align 8
  br label %cond.end.103

cond.false.100:                                   ; preds = %if.then.91
  %91 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr101 = getelementptr inbounds %struct.sv*, %struct.sv** %91, i64 -1
  %92 = load %struct.sv*, %struct.sv** %add.ptr101, align 8
  %call102 = call i64 @Perl_sv_2iv(%struct.sv* %92)
  br label %cond.end.103

cond.end.103:                                     ; preds = %cond.false.100, %cond.true.96
  %cond104 = phi i64 [ %90, %cond.true.96 ], [ %call102, %cond.false.100 ]
  br label %if.end.105

if.end.105:                                       ; preds = %cond.end.103, %lor.lhs.false.86, %if.else.76
  %93 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr106 = getelementptr inbounds %struct.sv*, %struct.sv** %93, i64 -1
  %94 = load %struct.sv*, %struct.sv** %add.ptr106, align 8
  %sv_flags107 = getelementptr inbounds %struct.sv, %struct.sv* %94, i32 0, i32 2
  %95 = load i32, i32* %sv_flags107, align 4
  %and108 = and i32 %95, 65536
  %tobool109 = icmp ne i32 %and108, 0
  br i1 %tobool109, label %if.then.110, label %if.end.131

if.then.110:                                      ; preds = %if.end.105
  %96 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr111 = getelementptr inbounds %struct.sv*, %struct.sv** %96, i64 -1
  %97 = load %struct.sv*, %struct.sv** %add.ptr111, align 8
  %sv_flags112 = getelementptr inbounds %struct.sv, %struct.sv* %97, i32 0, i32 2
  %98 = load i32, i32* %sv_flags112, align 4
  %and113 = and i32 %98, -2147418112
  %cmp = icmp eq i32 %and113, -2147418112
  %conv114 = zext i1 %cmp to i32
  %conv115 = trunc i32 %conv114 to i8
  store i8 %conv115, i8* %auvok, align 1
  %tobool116 = icmp ne i8 %conv115, 0
  br i1 %tobool116, label %if.then.117, label %if.else.120

if.then.117:                                      ; preds = %if.then.110
  %99 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr118 = getelementptr inbounds %struct.sv*, %struct.sv** %99, i64 -1
  %100 = load %struct.sv*, %struct.sv** %add.ptr118, align 8
  %sv_any119 = getelementptr inbounds %struct.sv, %struct.sv* %100, i32 0, i32 0
  %101 = load i8*, i8** %sv_any119, align 8
  %102 = bitcast i8* %101 to %struct.xpvuv*
  %xuv_uv = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %102, i32 0, i32 3
  %103 = load i64, i64* %xuv_uv, align 8
  store i64 %103, i64* %auv, align 8
  br label %if.end.130

if.else.120:                                      ; preds = %if.then.110
  %104 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr122 = getelementptr inbounds %struct.sv*, %struct.sv** %104, i64 -1
  %105 = load %struct.sv*, %struct.sv** %add.ptr122, align 8
  %sv_any123 = getelementptr inbounds %struct.sv, %struct.sv* %105, i32 0, i32 0
  %106 = load i8*, i8** %sv_any123, align 8
  %107 = bitcast i8* %106 to %struct.xpviv*
  %xiv_iv124 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %107, i32 0, i32 3
  %108 = load i64, i64* %xiv_iv124, align 8
  store i64 %108, i64* %aiv, align 8
  %109 = load i64, i64* %aiv, align 8
  %cmp125 = icmp sge i64 %109, 0
  br i1 %cmp125, label %if.then.127, label %if.else.128

if.then.127:                                      ; preds = %if.else.120
  %110 = load i64, i64* %aiv, align 8
  store i64 %110, i64* %auv, align 8
  store i8 1, i8* %auvok, align 1
  br label %if.end.129

if.else.128:                                      ; preds = %if.else.120
  %111 = load i64, i64* %aiv, align 8
  %sub = sub nsw i64 0, %111
  store i64 %sub, i64* %auv, align 8
  br label %if.end.129

if.end.129:                                       ; preds = %if.else.128, %if.then.127
  br label %if.end.130

if.end.130:                                       ; preds = %if.end.129, %if.then.117
  store i8 1, i8* %a_valid, align 1
  br label %if.end.131

if.end.131:                                       ; preds = %if.end.130, %if.end.105
  br label %if.end.132

if.end.132:                                       ; preds = %if.end.131, %if.then.75
  %112 = load i8, i8* %a_valid, align 1
  %tobool133 = icmp ne i8 %112, 0
  br i1 %tobool133, label %if.then.134, label %if.end.225

if.then.134:                                      ; preds = %if.end.132
  store i8 0, i8* %result_good, align 1
  %113 = load %struct.sv**, %struct.sv*** %sp, align 8
  %114 = load %struct.sv*, %struct.sv** %113, align 8
  %sv_flags139 = getelementptr inbounds %struct.sv, %struct.sv* %114, i32 0, i32 2
  %115 = load i32, i32* %sv_flags139, align 4
  %and140 = and i32 %115, -2147418112
  %cmp141 = icmp eq i32 %and140, -2147418112
  %conv142 = zext i1 %cmp141 to i32
  %conv143 = trunc i32 %conv142 to i8
  store i8 %conv143, i8* %buvok, align 1
  %116 = load i8, i8* %buvok, align 1
  %tobool144 = icmp ne i8 %116, 0
  br i1 %tobool144, label %if.then.145, label %if.else.148

if.then.145:                                      ; preds = %if.then.134
  %117 = load %struct.sv**, %struct.sv*** %sp, align 8
  %118 = load %struct.sv*, %struct.sv** %117, align 8
  %sv_any146 = getelementptr inbounds %struct.sv, %struct.sv* %118, i32 0, i32 0
  %119 = load i8*, i8** %sv_any146, align 8
  %120 = bitcast i8* %119 to %struct.xpvuv*
  %xuv_uv147 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %120, i32 0, i32 3
  %121 = load i64, i64* %xuv_uv147, align 8
  store i64 %121, i64* %buv, align 8
  br label %if.end.158

if.else.148:                                      ; preds = %if.then.134
  %122 = load %struct.sv**, %struct.sv*** %sp, align 8
  %123 = load %struct.sv*, %struct.sv** %122, align 8
  %sv_any150 = getelementptr inbounds %struct.sv, %struct.sv* %123, i32 0, i32 0
  %124 = load i8*, i8** %sv_any150, align 8
  %125 = bitcast i8* %124 to %struct.xpviv*
  %xiv_iv151 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %125, i32 0, i32 3
  %126 = load i64, i64* %xiv_iv151, align 8
  store i64 %126, i64* %biv, align 8
  %127 = load i64, i64* %biv, align 8
  %cmp152 = icmp sge i64 %127, 0
  br i1 %cmp152, label %if.then.154, label %if.else.155

if.then.154:                                      ; preds = %if.else.148
  %128 = load i64, i64* %biv, align 8
  store i64 %128, i64* %buv, align 8
  store i8 1, i8* %buvok, align 1
  br label %if.end.157

if.else.155:                                      ; preds = %if.else.148
  %129 = load i64, i64* %biv, align 8
  %sub156 = sub nsw i64 0, %129
  store i64 %sub156, i64* %buv, align 8
  br label %if.end.157

if.end.157:                                       ; preds = %if.else.155, %if.then.154
  br label %if.end.158

if.end.158:                                       ; preds = %if.end.157, %if.then.145
  %130 = load i8, i8* %auvok, align 1
  %conv159 = sext i8 %130 to i32
  %131 = load i8, i8* %buvok, align 1
  %conv160 = sext i8 %131 to i32
  %xor = xor i32 %conv159, %conv160
  %tobool161 = icmp ne i32 %xor, 0
  br i1 %tobool161, label %if.then.162, label %if.else.181

if.then.162:                                      ; preds = %if.end.158
  %132 = load i64, i64* %auv, align 8
  %133 = load i64, i64* %buv, align 8
  %cmp163 = icmp uge i64 %132, %133
  br i1 %cmp163, label %if.then.165, label %if.else.171

if.then.165:                                      ; preds = %if.then.162
  %134 = load i64, i64* %auv, align 8
  %135 = load i64, i64* %buv, align 8
  %sub166 = sub i64 %134, %135
  store i64 %sub166, i64* %result, align 8
  %136 = load i64, i64* %result, align 8
  %137 = load i64, i64* %auv, align 8
  %cmp167 = icmp ule i64 %136, %137
  br i1 %cmp167, label %if.then.169, label %if.end.170

if.then.169:                                      ; preds = %if.then.165
  store i8 1, i8* %result_good, align 1
  br label %if.end.170

if.end.170:                                       ; preds = %if.then.169, %if.then.165
  br label %if.end.180

if.else.171:                                      ; preds = %if.then.162
  %138 = load i64, i64* %buv, align 8
  %139 = load i64, i64* %auv, align 8
  %sub172 = sub i64 %138, %139
  store i64 %sub172, i64* %result, align 8
  %140 = load i64, i64* %result, align 8
  %141 = load i64, i64* %buv, align 8
  %cmp173 = icmp ule i64 %140, %141
  br i1 %cmp173, label %if.then.175, label %if.end.179

if.then.175:                                      ; preds = %if.else.171
  %142 = load i8, i8* %auvok, align 1
  %tobool176 = icmp ne i8 %142, 0
  %lnot177 = xor i1 %tobool176, true
  %lnot.ext = zext i1 %lnot177 to i32
  %conv178 = trunc i32 %lnot.ext to i8
  store i8 %conv178, i8* %auvok, align 1
  store i8 1, i8* %result_good, align 1
  br label %if.end.179

if.end.179:                                       ; preds = %if.then.175, %if.else.171
  br label %if.end.180

if.end.180:                                       ; preds = %if.end.179, %if.end.170
  br label %if.end.186

if.else.181:                                      ; preds = %if.end.158
  %143 = load i64, i64* %auv, align 8
  %144 = load i64, i64* %buv, align 8
  %add = add i64 %143, %144
  store i64 %add, i64* %result, align 8
  %145 = load i64, i64* %result, align 8
  %146 = load i64, i64* %auv, align 8
  %cmp182 = icmp uge i64 %145, %146
  br i1 %cmp182, label %if.then.184, label %if.end.185

if.then.184:                                      ; preds = %if.else.181
  store i8 1, i8* %result_good, align 1
  br label %if.end.185

if.end.185:                                       ; preds = %if.then.184, %if.else.181
  br label %if.end.186

if.end.186:                                       ; preds = %if.end.185, %if.end.180
  %147 = load i8, i8* %result_good, align 1
  %tobool187 = icmp ne i8 %147, 0
  br i1 %tobool187, label %if.then.188, label %if.end.224

if.then.188:                                      ; preds = %if.end.186
  %148 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr189 = getelementptr inbounds %struct.sv*, %struct.sv** %148, i32 -1
  store %struct.sv** %incdec.ptr189, %struct.sv*** %sp, align 8
  %149 = load i8, i8* %auvok, align 1
  %tobool190 = icmp ne i8 %149, 0
  br i1 %tobool190, label %if.then.191, label %if.else.199

if.then.191:                                      ; preds = %if.then.188
  %150 = load %struct.sv*, %struct.sv** %targ, align 8
  %151 = load i64, i64* %result, align 8
  call void @Perl_sv_setuv(%struct.sv* %150, i64 %151)
  %152 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags192 = getelementptr inbounds %struct.sv, %struct.sv* %152, i32 0, i32 2
  %153 = load i32, i32* %sv_flags192, align 4
  %and193 = and i32 %153, 16384
  %tobool194 = icmp ne i32 %and193, 0
  br i1 %tobool194, label %if.then.195, label %if.end.197

if.then.195:                                      ; preds = %if.then.191
  %154 = load %struct.sv*, %struct.sv** %targ, align 8
  %call196 = call i32 @Perl_mg_set(%struct.sv* %154)
  br label %if.end.197

if.end.197:                                       ; preds = %if.then.195, %if.then.191
  %155 = load %struct.sv*, %struct.sv** %targ, align 8
  %156 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %155, %struct.sv** %156, align 8
  store %struct.sv* %155, %struct.sv** %tmp198
  %157 = load %struct.sv*, %struct.sv** %tmp198
  br label %if.end.222

if.else.199:                                      ; preds = %if.then.188
  %158 = load i64, i64* %result, align 8
  %cmp200 = icmp ule i64 %158, -9223372036854775808
  br i1 %cmp200, label %if.then.202, label %if.else.211

if.then.202:                                      ; preds = %if.else.199
  %159 = load %struct.sv*, %struct.sv** %targ, align 8
  %160 = load i64, i64* %result, align 8
  %sub203 = sub nsw i64 0, %160
  call void @Perl_sv_setiv(%struct.sv* %159, i64 %sub203)
  %161 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags204 = getelementptr inbounds %struct.sv, %struct.sv* %161, i32 0, i32 2
  %162 = load i32, i32* %sv_flags204, align 4
  %and205 = and i32 %162, 16384
  %tobool206 = icmp ne i32 %and205, 0
  br i1 %tobool206, label %if.then.207, label %if.end.209

if.then.207:                                      ; preds = %if.then.202
  %163 = load %struct.sv*, %struct.sv** %targ, align 8
  %call208 = call i32 @Perl_mg_set(%struct.sv* %163)
  br label %if.end.209

if.end.209:                                       ; preds = %if.then.207, %if.then.202
  %164 = load %struct.sv*, %struct.sv** %targ, align 8
  %165 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %164, %struct.sv** %165, align 8
  store %struct.sv* %164, %struct.sv** %tmp210
  %166 = load %struct.sv*, %struct.sv** %tmp210
  br label %if.end.221

if.else.211:                                      ; preds = %if.else.199
  %167 = load %struct.sv*, %struct.sv** %targ, align 8
  %168 = load i64, i64* %result, align 8
  %conv212 = uitofp i64 %168 to double
  %sub213 = fsub double -0.000000e+00, %conv212
  call void @Perl_sv_setnv(%struct.sv* %167, double %sub213)
  %169 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags214 = getelementptr inbounds %struct.sv, %struct.sv* %169, i32 0, i32 2
  %170 = load i32, i32* %sv_flags214, align 4
  %and215 = and i32 %170, 16384
  %tobool216 = icmp ne i32 %and215, 0
  br i1 %tobool216, label %if.then.217, label %if.end.219

if.then.217:                                      ; preds = %if.else.211
  %171 = load %struct.sv*, %struct.sv** %targ, align 8
  %call218 = call i32 @Perl_mg_set(%struct.sv* %171)
  br label %if.end.219

if.end.219:                                       ; preds = %if.then.217, %if.else.211
  %172 = load %struct.sv*, %struct.sv** %targ, align 8
  %173 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %172, %struct.sv** %173, align 8
  store %struct.sv* %172, %struct.sv** %tmp220
  %174 = load %struct.sv*, %struct.sv** %tmp220
  br label %if.end.221

if.end.221:                                       ; preds = %if.end.219, %if.end.209
  br label %if.end.222

if.end.222:                                       ; preds = %if.end.221, %if.end.197
  %175 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %175, %struct.sv*** @PL_stack_sp, align 8
  %176 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next223 = getelementptr inbounds %struct.op, %struct.op* %176, i32 0, i32 0
  %177 = load %struct.op*, %struct.op** %op_next223, align 8
  store %struct.op* %177, %struct.op** %retval
  br label %return

if.end.224:                                       ; preds = %if.end.186
  br label %if.end.225

if.end.225:                                       ; preds = %if.end.224, %if.end.132
  br label %if.end.226

if.end.226:                                       ; preds = %if.end.225, %if.end.66
  %178 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr228 = getelementptr inbounds %struct.sv*, %struct.sv** %178, i32 -1
  store %struct.sv** %incdec.ptr228, %struct.sv*** %sp, align 8
  %179 = load %struct.sv*, %struct.sv** %178, align 8
  store %struct.sv* %179, %struct.sv** @PL_Sv, align 8
  %180 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags229 = getelementptr inbounds %struct.sv, %struct.sv* %180, i32 0, i32 2
  %181 = load i32, i32* %sv_flags229, align 4
  %and230 = and i32 %181, 131072
  %tobool231 = icmp ne i32 %and230, 0
  br i1 %tobool231, label %cond.true.232, label %cond.false.234

cond.true.232:                                    ; preds = %if.end.226
  %182 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any233 = getelementptr inbounds %struct.sv, %struct.sv* %182, i32 0, i32 0
  %183 = load i8*, i8** %sv_any233, align 8
  %184 = bitcast i8* %183 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %184, i32 0, i32 4
  %185 = load double, double* %xnv_nv, align 8
  br label %cond.end.236

cond.false.234:                                   ; preds = %if.end.226
  %186 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call235 = call double @Perl_sv_2nv(%struct.sv* %186)
  br label %cond.end.236

cond.end.236:                                     ; preds = %cond.false.234, %cond.true.232
  %cond237 = phi double [ %185, %cond.true.232 ], [ %call235, %cond.false.234 ]
  store double %cond237, double* %value, align 8
  %187 = load i8, i8* %useleft, align 1
  %tobool238 = icmp ne i8 %187, 0
  br i1 %tobool238, label %if.end.248, label %if.then.239

if.then.239:                                      ; preds = %cond.end.236
  %188 = load %struct.sv*, %struct.sv** %targ, align 8
  %189 = load double, double* %value, align 8
  call void @Perl_sv_setnv(%struct.sv* %188, double %189)
  %190 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags240 = getelementptr inbounds %struct.sv, %struct.sv* %190, i32 0, i32 2
  %191 = load i32, i32* %sv_flags240, align 4
  %and241 = and i32 %191, 16384
  %tobool242 = icmp ne i32 %and241, 0
  br i1 %tobool242, label %if.then.243, label %if.end.245

if.then.243:                                      ; preds = %if.then.239
  %192 = load %struct.sv*, %struct.sv** %targ, align 8
  %call244 = call i32 @Perl_mg_set(%struct.sv* %192)
  br label %if.end.245

if.end.245:                                       ; preds = %if.then.243, %if.then.239
  %193 = load %struct.sv*, %struct.sv** %targ, align 8
  %194 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %193, %struct.sv** %194, align 8
  store %struct.sv* %193, %struct.sv** %tmp246
  %195 = load %struct.sv*, %struct.sv** %tmp246
  %196 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %196, %struct.sv*** @PL_stack_sp, align 8
  %197 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next247 = getelementptr inbounds %struct.op, %struct.op* %197, i32 0, i32 0
  %198 = load %struct.op*, %struct.op** %op_next247, align 8
  store %struct.op* %198, %struct.op** %retval
  br label %return

if.end.248:                                       ; preds = %cond.end.236
  %199 = load %struct.sv*, %struct.sv** %targ, align 8
  %200 = load double, double* %value, align 8
  %201 = load %struct.sv**, %struct.sv*** %sp, align 8
  %202 = load %struct.sv*, %struct.sv** %201, align 8
  %sv_flags249 = getelementptr inbounds %struct.sv, %struct.sv* %202, i32 0, i32 2
  %203 = load i32, i32* %sv_flags249, align 4
  %and250 = and i32 %203, 131072
  %tobool251 = icmp ne i32 %and250, 0
  br i1 %tobool251, label %cond.true.252, label %cond.false.255

cond.true.252:                                    ; preds = %if.end.248
  %204 = load %struct.sv**, %struct.sv*** %sp, align 8
  %205 = load %struct.sv*, %struct.sv** %204, align 8
  %sv_any253 = getelementptr inbounds %struct.sv, %struct.sv* %205, i32 0, i32 0
  %206 = load i8*, i8** %sv_any253, align 8
  %207 = bitcast i8* %206 to %struct.xpvnv*
  %xnv_nv254 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %207, i32 0, i32 4
  %208 = load double, double* %xnv_nv254, align 8
  br label %cond.end.257

cond.false.255:                                   ; preds = %if.end.248
  %209 = load %struct.sv**, %struct.sv*** %sp, align 8
  %210 = load %struct.sv*, %struct.sv** %209, align 8
  %call256 = call double @Perl_sv_2nv(%struct.sv* %210)
  br label %cond.end.257

cond.end.257:                                     ; preds = %cond.false.255, %cond.true.252
  %cond258 = phi double [ %208, %cond.true.252 ], [ %call256, %cond.false.255 ]
  %add259 = fadd double %200, %cond258
  call void @Perl_sv_setnv(%struct.sv* %199, double %add259)
  %211 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags260 = getelementptr inbounds %struct.sv, %struct.sv* %211, i32 0, i32 2
  %212 = load i32, i32* %sv_flags260, align 4
  %and261 = and i32 %212, 16384
  %tobool262 = icmp ne i32 %and261, 0
  br i1 %tobool262, label %if.then.263, label %if.end.265

if.then.263:                                      ; preds = %cond.end.257
  %213 = load %struct.sv*, %struct.sv** %targ, align 8
  %call264 = call i32 @Perl_mg_set(%struct.sv* %213)
  br label %if.end.265

if.end.265:                                       ; preds = %if.then.263, %cond.end.257
  %214 = load %struct.sv*, %struct.sv** %targ, align 8
  %215 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %214, %struct.sv** %215, align 8
  store %struct.sv* %214, %struct.sv** %tmp266
  %216 = load %struct.sv*, %struct.sv** %tmp266
  %217 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %217, %struct.sv*** @PL_stack_sp, align 8
  %218 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next267 = getelementptr inbounds %struct.op, %struct.op* %218, i32 0, i32 0
  %219 = load %struct.op*, %struct.op** %op_next267, align 8
  store %struct.op* %219, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.end.265, %if.end.245, %if.end.222, %if.end.29
  %220 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %220
}

declare void @Perl_sv_setuv(%struct.sv*, i64) #1

declare void @Perl_sv_setiv(%struct.sv*, i64) #1

declare void @Perl_sv_setnv(%struct.sv*, double) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_aelemfast() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %av = alloca %struct.av*, align 8
  %lval = alloca i32, align 4
  %svp = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  %2 = load i8, i8* %op_flags, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 3
  %4 = load i64, i64* %op_targ, align 8
  %5 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 %4
  %6 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  %7 = bitcast %struct.sv* %6 to %struct.av*
  br label %cond.end

cond.false:                                       ; preds = %entry
  %8 = load %struct.op*, %struct.op** @PL_op, align 8
  %9 = bitcast %struct.op* %8 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %9, i32 0, i32 8
  %10 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %11 = bitcast %struct.sv* %10 to %struct.gv*
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %11, i32 0, i32 0
  %12 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %12, i32 0, i32 7
  %13 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %13, i32 0, i32 4
  %14 = load %struct.av*, %struct.av** %gp_av, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.av* [ %7, %cond.true ], [ %14, %cond.false ]
  store %struct.av* %cond, %struct.av** %av, align 8
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags1 = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 6
  %16 = load i8, i8* %op_flags1, align 1
  %conv2 = zext i8 %16 to i32
  %and3 = and i32 %conv2, 32
  store i32 %and3, i32* %lval, align 4
  %17 = load %struct.av*, %struct.av** %av, align 8
  %18 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 7
  %19 = load i8, i8* %op_private, align 1
  %conv4 = zext i8 %19 to i32
  %20 = load i32, i32* %lval, align 4
  %call = call %struct.sv** @Perl_av_fetch(%struct.av* %17, i32 %conv4, i32 %20)
  store %struct.sv** %call, %struct.sv*** %svp, align 8
  %21 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool5 = icmp ne %struct.sv** %21, null
  br i1 %tobool5, label %cond.true.6, label %cond.false.7

cond.true.6:                                      ; preds = %cond.end
  %22 = load %struct.sv**, %struct.sv*** %svp, align 8
  %23 = load %struct.sv*, %struct.sv** %22, align 8
  br label %cond.end.8

cond.false.7:                                     ; preds = %cond.end
  br label %cond.end.8

cond.end.8:                                       ; preds = %cond.false.7, %cond.true.6
  %cond9 = phi %struct.sv* [ %23, %cond.true.6 ], [ @PL_sv_undef, %cond.false.7 ]
  store %struct.sv* %cond9, %struct.sv** %sv, align 8
  %24 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %25 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %24 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %25 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.8
  %26 = load %struct.sv**, %struct.sv*** %sp, align 8
  %27 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call11 = call %struct.sv** @Perl_stack_grow(%struct.sv** %26, %struct.sv** %27, i32 1)
  store %struct.sv** %call11, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end.8
  %28 = load i32, i32* %lval, align 4
  %tobool12 = icmp ne i32 %28, 0
  br i1 %tobool12, label %if.end.17, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %29 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags, align 4
  %and13 = and i32 %30, 8192
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %if.then.15, label %if.end.17

if.then.15:                                       ; preds = %land.lhs.true
  %31 = load %struct.sv*, %struct.sv** %sv, align 8
  %call16 = call %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %31)
  store %struct.sv* %call16, %struct.sv** %sv, align 8
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.15, %land.lhs.true, %if.end
  %32 = load %struct.sv*, %struct.sv** %sv, align 8
  %33 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %33, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %32, %struct.sv** %incdec.ptr, align 8
  %34 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %34, %struct.sv*** @PL_stack_sp, align 8
  %35 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %35, i32 0, i32 0
  %36 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %36
}

declare %struct.sv** @Perl_av_fetch(%struct.av*, i32, i32) #1

declare %struct.sv* @Perl_sv_mortalcopy(%struct.sv*) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_join() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %4 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 3
  %5 = load i64, i64* %op_targ, align 8
  %6 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %6, i64 %5
  %7 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %7, %struct.sv** %targ, align 8
  %8 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr1 = getelementptr inbounds %struct.sv*, %struct.sv** %8, i32 1
  store %struct.sv** %incdec.ptr1, %struct.sv*** %mark, align 8
  %9 = load %struct.sv*, %struct.sv** %targ, align 8
  %10 = load %struct.sv**, %struct.sv*** %mark, align 8
  %11 = load %struct.sv*, %struct.sv** %10, align 8
  %12 = load %struct.sv**, %struct.sv*** %mark, align 8
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  call void @Perl_do_join(%struct.sv* %9, %struct.sv* %11, %struct.sv** %12, %struct.sv** %13)
  %14 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv** %14, %struct.sv*** %sp, align 8
  %15 = load %struct.sv*, %struct.sv** %targ, align 8
  %16 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %15, %struct.sv** %16, align 8
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %17, %struct.sv*** @PL_stack_sp, align 8
  %18 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 0
  %19 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %19
}

declare void @Perl_do_join(%struct.sv*, %struct.sv*, %struct.sv**, %struct.sv**) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_pushre() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %tmp = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %2 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %1 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %3, %struct.sv** %4, i32 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %6 = bitcast %struct.op* %5 to %struct.sv*
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %7, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %6, %struct.sv** %incdec.ptr, align 8
  store %struct.sv* %6, %struct.sv** %tmp
  %8 = load %struct.sv*, %struct.sv** %tmp
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %9, %struct.sv*** @PL_stack_sp, align 8
  %10 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 0
  %11 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %11
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_print() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %origmark = alloca i32, align 4
  %gv = alloca %struct.gv*, align 8
  %io = alloca %struct.io*, align 8
  %fp = alloca %struct._PerlIO**, align 8
  %mg = alloca %struct.magic*, align 8
  %markoff = alloca i32, align 4
  %tmp = alloca i32, align 4
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %4 = load %struct.sv**, %struct.sv*** %mark, align 8
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %4 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  store i32 %conv, i32* %origmark, align 4
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 6
  %7 = load i8, i8* %op_flags, align 1
  %conv1 = zext i8 %7 to i32
  %and = and i32 %conv1, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %8 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr2 = getelementptr inbounds %struct.sv*, %struct.sv** %8, i32 1
  store %struct.sv** %incdec.ptr2, %struct.sv*** %mark, align 8
  %9 = load %struct.sv*, %struct.sv** %incdec.ptr2, align 8
  %10 = bitcast %struct.sv* %9 to %struct.gv*
  store %struct.gv* %10, %struct.gv** %gv, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %11 = load %struct.gv*, %struct.gv** @PL_defoutgv, align 8
  store %struct.gv* %11, %struct.gv** %gv, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %12 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool3 = icmp ne %struct.gv* %12, null
  br i1 %tobool3, label %land.lhs.true, label %if.end.75

land.lhs.true:                                    ; preds = %if.end
  %13 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool4 = icmp ne %struct.gv* %13, null
  br i1 %tobool4, label %land.lhs.true.5, label %cond.false

land.lhs.true.5:                                  ; preds = %land.lhs.true
  %14 = load %struct.gv*, %struct.gv** %gv, align 8
  %15 = bitcast %struct.gv* %14 to %struct.sv*
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags, align 4
  %and6 = and i32 %16, 255
  %cmp = icmp eq i32 %and6, 13
  br i1 %cmp, label %land.lhs.true.8, label %cond.false

land.lhs.true.8:                                  ; preds = %land.lhs.true.5
  %17 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %17, i32 0, i32 0
  %18 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %18, i32 0, i32 7
  %19 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %tobool9 = icmp ne %struct.gp* %19, null
  br i1 %tobool9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.8
  %20 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any10 = getelementptr inbounds %struct.gv, %struct.gv* %20, i32 0, i32 0
  %21 = load %struct.xpvgv*, %struct.xpvgv** %sv_any10, align 8
  %xgv_gp11 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %21, i32 0, i32 7
  %22 = load %struct.gp*, %struct.gp** %xgv_gp11, align 8
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %22, i32 0, i32 2
  %23 = load %struct.io*, %struct.io** %gp_io, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.8, %land.lhs.true.5, %land.lhs.true
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.io* [ %23, %cond.true ], [ null, %cond.false ]
  store %struct.io* %cond, %struct.io** %io, align 8
  %tobool12 = icmp ne %struct.io* %cond, null
  br i1 %tobool12, label %land.lhs.true.13, label %if.end.75

land.lhs.true.13:                                 ; preds = %cond.end
  %24 = load %struct.io*, %struct.io** %io, align 8
  %25 = bitcast %struct.io* %24 to %struct.sv*
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %26, 32768
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %cond.true.17, label %cond.false.18

cond.true.17:                                     ; preds = %land.lhs.true.13
  %27 = load %struct.io*, %struct.io** %io, align 8
  %28 = bitcast %struct.io* %27 to %struct.sv*
  %call = call %struct.magic* @Perl_mg_find(%struct.sv* %28, i32 113)
  br label %cond.end.19

cond.false.18:                                    ; preds = %land.lhs.true.13
  br label %cond.end.19

cond.end.19:                                      ; preds = %cond.false.18, %cond.true.17
  %cond20 = phi %struct.magic* [ %call, %cond.true.17 ], [ null, %cond.false.18 ]
  store %struct.magic* %cond20, %struct.magic** %mg, align 8
  %tobool21 = icmp ne %struct.magic* %cond20, null
  br i1 %tobool21, label %if.then.22, label %if.end.75

if.then.22:                                       ; preds = %cond.end.19
  br label %had_magic

had_magic:                                        ; preds = %if.then.139, %if.then.22
  %29 = load %struct.sv**, %struct.sv*** %mark, align 8
  %30 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %31 = load i32, i32* %origmark, align 4
  %idx.ext23 = sext i32 %31 to i64
  %add.ptr24 = getelementptr inbounds %struct.sv*, %struct.sv** %30, i64 %idx.ext23
  %cmp25 = icmp eq %struct.sv** %29, %add.ptr24
  br i1 %cmp25, label %if.then.27, label %if.end.51

if.then.27:                                       ; preds = %had_magic
  %32 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %33 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast28 = ptrtoint %struct.sv** %32 to i64
  %sub.ptr.rhs.cast29 = ptrtoint %struct.sv** %33 to i64
  %sub.ptr.sub30 = sub i64 %sub.ptr.lhs.cast28, %sub.ptr.rhs.cast29
  %sub.ptr.div31 = sdiv exact i64 %sub.ptr.sub30, 8
  %cmp32 = icmp slt i64 %sub.ptr.div31, 1
  br i1 %cmp32, label %if.then.34, label %if.end.43

if.then.34:                                       ; preds = %if.then.27
  %34 = load %struct.sv**, %struct.sv*** %mark, align 8
  %35 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast35 = ptrtoint %struct.sv** %34 to i64
  %sub.ptr.rhs.cast36 = ptrtoint %struct.sv** %35 to i64
  %sub.ptr.sub37 = sub i64 %sub.ptr.lhs.cast35, %sub.ptr.rhs.cast36
  %sub.ptr.div38 = sdiv exact i64 %sub.ptr.sub37, 8
  %conv39 = trunc i64 %sub.ptr.div38 to i32
  store i32 %conv39, i32* %markoff, align 4
  %36 = load %struct.sv**, %struct.sv*** %sp, align 8
  %37 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call40 = call %struct.sv** @Perl_stack_grow(%struct.sv** %36, %struct.sv** %37, i32 1)
  store %struct.sv** %call40, %struct.sv*** %sp, align 8
  %38 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %39 = load i32, i32* %markoff, align 4
  %idx.ext41 = sext i32 %39 to i64
  %add.ptr42 = getelementptr inbounds %struct.sv*, %struct.sv** %38, i64 %idx.ext41
  store %struct.sv** %add.ptr42, %struct.sv*** %mark, align 8
  br label %if.end.43

if.end.43:                                        ; preds = %if.then.34, %if.then.27
  %40 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr44 = getelementptr inbounds %struct.sv*, %struct.sv** %40, i32 1
  store %struct.sv** %incdec.ptr44, %struct.sv*** %mark, align 8
  %41 = load %struct.sv**, %struct.sv*** %mark, align 8
  %add.ptr45 = getelementptr inbounds %struct.sv*, %struct.sv** %41, i64 1
  %42 = bitcast %struct.sv** %add.ptr45 to i8*
  %43 = load %struct.sv**, %struct.sv*** %mark, align 8
  %44 = bitcast %struct.sv** %43 to i8*
  %45 = load %struct.sv**, %struct.sv*** %sp, align 8
  %46 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast46 = ptrtoint %struct.sv** %45 to i64
  %sub.ptr.rhs.cast47 = ptrtoint %struct.sv** %46 to i64
  %sub.ptr.sub48 = sub i64 %sub.ptr.lhs.cast46, %sub.ptr.rhs.cast47
  %sub.ptr.div49 = sdiv exact i64 %sub.ptr.sub48, 8
  %add = add nsw i64 %sub.ptr.div49, 1
  %mul = mul i64 %add, 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %42, i8* %44, i64 %mul, i32 1, i1 false)
  %47 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr50 = getelementptr inbounds %struct.sv*, %struct.sv** %47, i32 1
  store %struct.sv** %incdec.ptr50, %struct.sv*** %sp, align 8
  br label %if.end.51

if.end.51:                                        ; preds = %if.end.43, %had_magic
  %48 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr52 = getelementptr inbounds i32, i32* %48, i32 1
  store i32* %incdec.ptr52, i32** @PL_markstack_ptr, align 8
  %49 = load i32*, i32** @PL_markstack_max, align 8
  %cmp53 = icmp eq i32* %incdec.ptr52, %49
  br i1 %cmp53, label %if.then.55, label %if.end.56

if.then.55:                                       ; preds = %if.end.51
  call void @Perl_markstack_grow()
  br label %if.end.56

if.end.56:                                        ; preds = %if.then.55, %if.end.51
  %50 = load %struct.sv**, %struct.sv*** %mark, align 8
  %add.ptr57 = getelementptr inbounds %struct.sv*, %struct.sv** %50, i64 -1
  %51 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast58 = ptrtoint %struct.sv** %add.ptr57 to i64
  %sub.ptr.rhs.cast59 = ptrtoint %struct.sv** %51 to i64
  %sub.ptr.sub60 = sub i64 %sub.ptr.lhs.cast58, %sub.ptr.rhs.cast59
  %sub.ptr.div61 = sdiv exact i64 %sub.ptr.sub60, 8
  %conv62 = trunc i64 %sub.ptr.div61 to i32
  %52 = load i32*, i32** @PL_markstack_ptr, align 8
  store i32 %conv62, i32* %52, align 4
  store i32 %conv62, i32* %tmp
  %53 = load i32, i32* %tmp
  %54 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %54, i32 0, i32 5
  %55 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  %tobool63 = icmp ne %struct.sv* %55, null
  br i1 %tobool63, label %cond.true.64, label %cond.false.66

cond.true.64:                                     ; preds = %if.end.56
  %56 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj65 = getelementptr inbounds %struct.magic, %struct.magic* %56, i32 0, i32 5
  %57 = load %struct.sv*, %struct.sv** %mg_obj65, align 8
  br label %cond.end.69

cond.false.66:                                    ; preds = %if.end.56
  %58 = load %struct.io*, %struct.io** %io, align 8
  %59 = bitcast %struct.io* %58 to %struct.sv*
  %call67 = call %struct.sv* @Perl_newRV(%struct.sv* %59)
  %call68 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call67)
  br label %cond.end.69

cond.end.69:                                      ; preds = %cond.false.66, %cond.true.64
  %cond70 = phi %struct.sv* [ %57, %cond.true.64 ], [ %call68, %cond.false.66 ]
  %60 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %cond70, %struct.sv** %60, align 8
  %61 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %61, %struct.sv*** @PL_stack_sp, align 8
  call void @Perl_push_scope()
  %call71 = call i32 @Perl_call_method(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i32 0)
  call void @Perl_pop_scope()
  %62 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %62, %struct.sv*** %sp, align 8
  %63 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %64 = load i32, i32* %origmark, align 4
  %idx.ext72 = sext i32 %64 to i64
  %add.ptr73 = getelementptr inbounds %struct.sv*, %struct.sv** %63, i64 %idx.ext72
  %add.ptr74 = getelementptr inbounds %struct.sv*, %struct.sv** %add.ptr73, i64 1
  store %struct.sv** %add.ptr74, %struct.sv*** %mark, align 8
  %65 = load %struct.sv**, %struct.sv*** %sp, align 8
  %66 = load %struct.sv*, %struct.sv** %65, align 8
  %67 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %66, %struct.sv** %67, align 8
  %68 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv** %68, %struct.sv*** %sp, align 8
  %69 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %69, %struct.sv*** @PL_stack_sp, align 8
  %70 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %70, i32 0, i32 0
  %71 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %71, %struct.op** %retval
  br label %return

if.end.75:                                        ; preds = %cond.end.19, %cond.end, %if.end
  %72 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool76 = icmp ne %struct.gv* %72, null
  br i1 %tobool76, label %land.lhs.true.77, label %cond.false.90

land.lhs.true.77:                                 ; preds = %if.end.75
  %73 = load %struct.gv*, %struct.gv** %gv, align 8
  %74 = bitcast %struct.gv* %73 to %struct.sv*
  %sv_flags78 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 2
  %75 = load i32, i32* %sv_flags78, align 4
  %and79 = and i32 %75, 255
  %cmp80 = icmp eq i32 %and79, 13
  br i1 %cmp80, label %land.lhs.true.82, label %cond.false.90

land.lhs.true.82:                                 ; preds = %land.lhs.true.77
  %76 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any83 = getelementptr inbounds %struct.gv, %struct.gv* %76, i32 0, i32 0
  %77 = load %struct.xpvgv*, %struct.xpvgv** %sv_any83, align 8
  %xgv_gp84 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %77, i32 0, i32 7
  %78 = load %struct.gp*, %struct.gp** %xgv_gp84, align 8
  %tobool85 = icmp ne %struct.gp* %78, null
  br i1 %tobool85, label %cond.true.86, label %cond.false.90

cond.true.86:                                     ; preds = %land.lhs.true.82
  %79 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any87 = getelementptr inbounds %struct.gv, %struct.gv* %79, i32 0, i32 0
  %80 = load %struct.xpvgv*, %struct.xpvgv** %sv_any87, align 8
  %xgv_gp88 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %80, i32 0, i32 7
  %81 = load %struct.gp*, %struct.gp** %xgv_gp88, align 8
  %gp_io89 = getelementptr inbounds %struct.gp, %struct.gp* %81, i32 0, i32 2
  %82 = load %struct.io*, %struct.io** %gp_io89, align 8
  br label %cond.end.91

cond.false.90:                                    ; preds = %land.lhs.true.82, %land.lhs.true.77, %if.end.75
  br label %cond.end.91

cond.end.91:                                      ; preds = %cond.false.90, %cond.true.86
  %cond92 = phi %struct.io* [ %82, %cond.true.86 ], [ null, %cond.false.90 ]
  store %struct.io* %cond92, %struct.io** %io, align 8
  %tobool93 = icmp ne %struct.io* %cond92, null
  br i1 %tobool93, label %if.else.176, label %if.then.94

if.then.94:                                       ; preds = %cond.end.91
  %83 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any95 = getelementptr inbounds %struct.gv, %struct.gv* %83, i32 0, i32 0
  %84 = load %struct.xpvgv*, %struct.xpvgv** %sv_any95, align 8
  %xgv_gp96 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %84, i32 0, i32 7
  %85 = load %struct.gp*, %struct.gp** %xgv_gp96, align 8
  %gp_egv = getelementptr inbounds %struct.gp, %struct.gp* %85, i32 0, i32 6
  %86 = load %struct.gv*, %struct.gv** %gp_egv, align 8
  %tobool97 = icmp ne %struct.gv* %86, null
  br i1 %tobool97, label %land.lhs.true.98, label %if.end.140

land.lhs.true.98:                                 ; preds = %if.then.94
  %87 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any99 = getelementptr inbounds %struct.gv, %struct.gv* %87, i32 0, i32 0
  %88 = load %struct.xpvgv*, %struct.xpvgv** %sv_any99, align 8
  %xgv_gp100 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %88, i32 0, i32 7
  %89 = load %struct.gp*, %struct.gp** %xgv_gp100, align 8
  %gp_egv101 = getelementptr inbounds %struct.gp, %struct.gp* %89, i32 0, i32 6
  %90 = load %struct.gv*, %struct.gv** %gp_egv101, align 8
  %tobool102 = icmp ne %struct.gv* %90, null
  br i1 %tobool102, label %land.lhs.true.103, label %cond.false.125

land.lhs.true.103:                                ; preds = %land.lhs.true.98
  %91 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any104 = getelementptr inbounds %struct.gv, %struct.gv* %91, i32 0, i32 0
  %92 = load %struct.xpvgv*, %struct.xpvgv** %sv_any104, align 8
  %xgv_gp105 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %92, i32 0, i32 7
  %93 = load %struct.gp*, %struct.gp** %xgv_gp105, align 8
  %gp_egv106 = getelementptr inbounds %struct.gp, %struct.gp* %93, i32 0, i32 6
  %94 = load %struct.gv*, %struct.gv** %gp_egv106, align 8
  %95 = bitcast %struct.gv* %94 to %struct.sv*
  %sv_flags107 = getelementptr inbounds %struct.sv, %struct.sv* %95, i32 0, i32 2
  %96 = load i32, i32* %sv_flags107, align 4
  %and108 = and i32 %96, 255
  %cmp109 = icmp eq i32 %and108, 13
  br i1 %cmp109, label %land.lhs.true.111, label %cond.false.125

land.lhs.true.111:                                ; preds = %land.lhs.true.103
  %97 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any112 = getelementptr inbounds %struct.gv, %struct.gv* %97, i32 0, i32 0
  %98 = load %struct.xpvgv*, %struct.xpvgv** %sv_any112, align 8
  %xgv_gp113 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %98, i32 0, i32 7
  %99 = load %struct.gp*, %struct.gp** %xgv_gp113, align 8
  %gp_egv114 = getelementptr inbounds %struct.gp, %struct.gp* %99, i32 0, i32 6
  %100 = load %struct.gv*, %struct.gv** %gp_egv114, align 8
  %sv_any115 = getelementptr inbounds %struct.gv, %struct.gv* %100, i32 0, i32 0
  %101 = load %struct.xpvgv*, %struct.xpvgv** %sv_any115, align 8
  %xgv_gp116 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %101, i32 0, i32 7
  %102 = load %struct.gp*, %struct.gp** %xgv_gp116, align 8
  %tobool117 = icmp ne %struct.gp* %102, null
  br i1 %tobool117, label %cond.true.118, label %cond.false.125

cond.true.118:                                    ; preds = %land.lhs.true.111
  %103 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any119 = getelementptr inbounds %struct.gv, %struct.gv* %103, i32 0, i32 0
  %104 = load %struct.xpvgv*, %struct.xpvgv** %sv_any119, align 8
  %xgv_gp120 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %104, i32 0, i32 7
  %105 = load %struct.gp*, %struct.gp** %xgv_gp120, align 8
  %gp_egv121 = getelementptr inbounds %struct.gp, %struct.gp* %105, i32 0, i32 6
  %106 = load %struct.gv*, %struct.gv** %gp_egv121, align 8
  %sv_any122 = getelementptr inbounds %struct.gv, %struct.gv* %106, i32 0, i32 0
  %107 = load %struct.xpvgv*, %struct.xpvgv** %sv_any122, align 8
  %xgv_gp123 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %107, i32 0, i32 7
  %108 = load %struct.gp*, %struct.gp** %xgv_gp123, align 8
  %gp_io124 = getelementptr inbounds %struct.gp, %struct.gp* %108, i32 0, i32 2
  %109 = load %struct.io*, %struct.io** %gp_io124, align 8
  br label %cond.end.126

cond.false.125:                                   ; preds = %land.lhs.true.111, %land.lhs.true.103, %land.lhs.true.98
  br label %cond.end.126

cond.end.126:                                     ; preds = %cond.false.125, %cond.true.118
  %cond127 = phi %struct.io* [ %109, %cond.true.118 ], [ null, %cond.false.125 ]
  store %struct.io* %cond127, %struct.io** %io, align 8
  %tobool128 = icmp ne %struct.io* %cond127, null
  br i1 %tobool128, label %land.lhs.true.129, label %if.end.140

land.lhs.true.129:                                ; preds = %cond.end.126
  %110 = load %struct.io*, %struct.io** %io, align 8
  %111 = bitcast %struct.io* %110 to %struct.sv*
  %sv_flags130 = getelementptr inbounds %struct.sv, %struct.sv* %111, i32 0, i32 2
  %112 = load i32, i32* %sv_flags130, align 4
  %and131 = and i32 %112, 32768
  %tobool132 = icmp ne i32 %and131, 0
  br i1 %tobool132, label %cond.true.133, label %cond.false.135

cond.true.133:                                    ; preds = %land.lhs.true.129
  %113 = load %struct.io*, %struct.io** %io, align 8
  %114 = bitcast %struct.io* %113 to %struct.sv*
  %call134 = call %struct.magic* @Perl_mg_find(%struct.sv* %114, i32 113)
  br label %cond.end.136

cond.false.135:                                   ; preds = %land.lhs.true.129
  br label %cond.end.136

cond.end.136:                                     ; preds = %cond.false.135, %cond.true.133
  %cond137 = phi %struct.magic* [ %call134, %cond.true.133 ], [ null, %cond.false.135 ]
  store %struct.magic* %cond137, %struct.magic** %mg, align 8
  %tobool138 = icmp ne %struct.magic* %cond137, null
  br i1 %tobool138, label %if.then.139, label %if.end.140

if.then.139:                                      ; preds = %cond.end.136
  br label %had_magic

if.end.140:                                       ; preds = %cond.end.136, %cond.end.126, %if.then.94
  %115 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %115, i32 0, i32 14
  %116 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp141 = icmp ne %struct.sv* %116, null
  br i1 %cmp141, label %land.lhs.true.143, label %lor.lhs.false.164

land.lhs.true.143:                                ; preds = %if.end.140
  %117 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings144 = getelementptr inbounds %struct.cop, %struct.cop* %117, i32 0, i32 14
  %118 = load %struct.sv*, %struct.sv** %cop_warnings144, align 8
  %cmp145 = icmp ne %struct.sv* %118, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp145, label %land.lhs.true.147, label %lor.lhs.false.164

land.lhs.true.147:                                ; preds = %land.lhs.true.143
  %119 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings148 = getelementptr inbounds %struct.cop, %struct.cop* %119, i32 0, i32 14
  %120 = load %struct.sv*, %struct.sv** %cop_warnings148, align 8
  %cmp149 = icmp eq %struct.sv* %120, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp149, label %if.then.172, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.147
  %121 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings151 = getelementptr inbounds %struct.cop, %struct.cop* %121, i32 0, i32 14
  %122 = load %struct.sv*, %struct.sv** %cop_warnings151, align 8
  %sv_any152 = getelementptr inbounds %struct.sv, %struct.sv* %122, i32 0, i32 0
  %123 = load i8*, i8** %sv_any152, align 8
  %124 = bitcast i8* %123 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %124, i32 0, i32 0
  %125 = load i8*, i8** %xpv_pv, align 8
  %arrayidx = getelementptr inbounds i8, i8* %125, i64 2
  %126 = load i8, i8* %arrayidx, align 1
  %conv153 = sext i8 %126 to i32
  %and154 = and i32 %conv153, 64
  %tobool155 = icmp ne i32 %and154, 0
  br i1 %tobool155, label %if.then.172, label %lor.lhs.false.156

lor.lhs.false.156:                                ; preds = %lor.lhs.false
  %127 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings157 = getelementptr inbounds %struct.cop, %struct.cop* %127, i32 0, i32 14
  %128 = load %struct.sv*, %struct.sv** %cop_warnings157, align 8
  %sv_any158 = getelementptr inbounds %struct.sv, %struct.sv* %128, i32 0, i32 0
  %129 = load i8*, i8** %sv_any158, align 8
  %130 = bitcast i8* %129 to %struct.xpv*
  %xpv_pv159 = getelementptr inbounds %struct.xpv, %struct.xpv* %130, i32 0, i32 0
  %131 = load i8*, i8** %xpv_pv159, align 8
  %arrayidx160 = getelementptr inbounds i8, i8* %131, i64 1
  %132 = load i8, i8* %arrayidx160, align 1
  %conv161 = sext i8 %132 to i32
  %and162 = and i32 %conv161, 16
  %tobool163 = icmp ne i32 %and162, 0
  br i1 %tobool163, label %if.then.172, label %lor.lhs.false.164

lor.lhs.false.164:                                ; preds = %lor.lhs.false.156, %land.lhs.true.143, %if.end.140
  %133 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings165 = getelementptr inbounds %struct.cop, %struct.cop* %133, i32 0, i32 14
  %134 = load %struct.sv*, %struct.sv** %cop_warnings165, align 8
  %cmp166 = icmp eq %struct.sv* %134, null
  br i1 %cmp166, label %land.lhs.true.168, label %if.end.174

land.lhs.true.168:                                ; preds = %lor.lhs.false.164
  %135 = load i8, i8* @PL_dowarn, align 1
  %conv169 = zext i8 %135 to i32
  %and170 = and i32 %conv169, 1
  %tobool171 = icmp ne i32 %and170, 0
  br i1 %tobool171, label %if.then.172, label %if.end.174

if.then.172:                                      ; preds = %land.lhs.true.168, %lor.lhs.false.156, %lor.lhs.false, %land.lhs.true.147
  %136 = load %struct.gv*, %struct.gv** %gv, align 8
  %137 = load %struct.io*, %struct.io** %io, align 8
  %138 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %138, i32 0, i32 4
  %139 = load i16, i16* %op_type, align 2
  %conv173 = zext i16 %139 to i32
  call void @Perl_report_evil_fh(%struct.gv* %136, %struct.io* %137, i32 %conv173)
  br label %if.end.174

if.end.174:                                       ; preds = %if.then.172, %land.lhs.true.168, %lor.lhs.false.164
  %call175 = call i32* @__errno_location()
  store i32 9, i32* %call175, align 4
  br label %just_say_no

if.else.176:                                      ; preds = %cond.end.91
  %140 = load %struct.io*, %struct.io** %io, align 8
  %sv_any177 = getelementptr inbounds %struct.io, %struct.io* %140, i32 0, i32 0
  %141 = load %struct.xpvio*, %struct.xpvio** %sv_any177, align 8
  %xio_ofp = getelementptr inbounds %struct.xpvio, %struct.xpvio* %141, i32 0, i32 8
  %142 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ofp, align 8
  store %struct._PerlIO** %142, %struct._PerlIO*** %fp, align 8
  %tobool178 = icmp ne %struct._PerlIO** %142, null
  br i1 %tobool178, label %if.else.262, label %if.then.179

if.then.179:                                      ; preds = %if.else.176
  %143 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings180 = getelementptr inbounds %struct.cop, %struct.cop* %143, i32 0, i32 14
  %144 = load %struct.sv*, %struct.sv** %cop_warnings180, align 8
  %cmp181 = icmp ne %struct.sv* %144, null
  br i1 %cmp181, label %land.lhs.true.183, label %lor.lhs.false.207

land.lhs.true.183:                                ; preds = %if.then.179
  %145 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings184 = getelementptr inbounds %struct.cop, %struct.cop* %145, i32 0, i32 14
  %146 = load %struct.sv*, %struct.sv** %cop_warnings184, align 8
  %cmp185 = icmp ne %struct.sv* %146, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp185, label %land.lhs.true.187, label %lor.lhs.false.207

land.lhs.true.187:                                ; preds = %land.lhs.true.183
  %147 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings188 = getelementptr inbounds %struct.cop, %struct.cop* %147, i32 0, i32 14
  %148 = load %struct.sv*, %struct.sv** %cop_warnings188, align 8
  %cmp189 = icmp eq %struct.sv* %148, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp189, label %if.then.215, label %lor.lhs.false.191

lor.lhs.false.191:                                ; preds = %land.lhs.true.187
  %149 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings192 = getelementptr inbounds %struct.cop, %struct.cop* %149, i32 0, i32 14
  %150 = load %struct.sv*, %struct.sv** %cop_warnings192, align 8
  %sv_any193 = getelementptr inbounds %struct.sv, %struct.sv* %150, i32 0, i32 0
  %151 = load i8*, i8** %sv_any193, align 8
  %152 = bitcast i8* %151 to %struct.xpv*
  %xpv_pv194 = getelementptr inbounds %struct.xpv, %struct.xpv* %152, i32 0, i32 0
  %153 = load i8*, i8** %xpv_pv194, align 8
  %arrayidx195 = getelementptr inbounds i8, i8* %153, i64 1
  %154 = load i8, i8* %arrayidx195, align 1
  %conv196 = sext i8 %154 to i32
  %and197 = and i32 %conv196, 16
  %tobool198 = icmp ne i32 %and197, 0
  br i1 %tobool198, label %if.then.215, label %lor.lhs.false.199

lor.lhs.false.199:                                ; preds = %lor.lhs.false.191
  %155 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings200 = getelementptr inbounds %struct.cop, %struct.cop* %155, i32 0, i32 14
  %156 = load %struct.sv*, %struct.sv** %cop_warnings200, align 8
  %sv_any201 = getelementptr inbounds %struct.sv, %struct.sv* %156, i32 0, i32 0
  %157 = load i8*, i8** %sv_any201, align 8
  %158 = bitcast i8* %157 to %struct.xpv*
  %xpv_pv202 = getelementptr inbounds %struct.xpv, %struct.xpv* %158, i32 0, i32 0
  %159 = load i8*, i8** %xpv_pv202, align 8
  %arrayidx203 = getelementptr inbounds i8, i8* %159, i64 1
  %160 = load i8, i8* %arrayidx203, align 1
  %conv204 = sext i8 %160 to i32
  %and205 = and i32 %conv204, 4
  %tobool206 = icmp ne i32 %and205, 0
  br i1 %tobool206, label %if.then.215, label %lor.lhs.false.207

lor.lhs.false.207:                                ; preds = %lor.lhs.false.199, %land.lhs.true.183, %if.then.179
  %161 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings208 = getelementptr inbounds %struct.cop, %struct.cop* %161, i32 0, i32 14
  %162 = load %struct.sv*, %struct.sv** %cop_warnings208, align 8
  %cmp209 = icmp eq %struct.sv* %162, null
  br i1 %cmp209, label %land.lhs.true.211, label %if.end.260

land.lhs.true.211:                                ; preds = %lor.lhs.false.207
  %163 = load i8, i8* @PL_dowarn, align 1
  %conv212 = zext i8 %163 to i32
  %and213 = and i32 %conv212, 1
  %tobool214 = icmp ne i32 %and213, 0
  br i1 %tobool214, label %if.then.215, label %if.end.260

if.then.215:                                      ; preds = %land.lhs.true.211, %lor.lhs.false.199, %lor.lhs.false.191, %land.lhs.true.187
  %164 = load %struct.io*, %struct.io** %io, align 8
  %sv_any216 = getelementptr inbounds %struct.io, %struct.io* %164, i32 0, i32 0
  %165 = load %struct.xpvio*, %struct.xpvio** %sv_any216, align 8
  %xio_ifp = getelementptr inbounds %struct.xpvio, %struct.xpvio* %165, i32 0, i32 7
  %166 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ifp, align 8
  %tobool217 = icmp ne %struct._PerlIO** %166, null
  br i1 %tobool217, label %if.then.218, label %if.else.219

if.then.218:                                      ; preds = %if.then.215
  %167 = load %struct.gv*, %struct.gv** %gv, align 8
  %168 = load %struct.io*, %struct.io** %io, align 8
  call void @Perl_report_evil_fh(%struct.gv* %167, %struct.io* %168, i32 -1)
  br label %if.end.259

if.else.219:                                      ; preds = %if.then.215
  %169 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings220 = getelementptr inbounds %struct.cop, %struct.cop* %169, i32 0, i32 14
  %170 = load %struct.sv*, %struct.sv** %cop_warnings220, align 8
  %cmp221 = icmp ne %struct.sv* %170, null
  br i1 %cmp221, label %land.lhs.true.223, label %lor.lhs.false.247

land.lhs.true.223:                                ; preds = %if.else.219
  %171 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings224 = getelementptr inbounds %struct.cop, %struct.cop* %171, i32 0, i32 14
  %172 = load %struct.sv*, %struct.sv** %cop_warnings224, align 8
  %cmp225 = icmp ne %struct.sv* %172, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp225, label %land.lhs.true.227, label %lor.lhs.false.247

land.lhs.true.227:                                ; preds = %land.lhs.true.223
  %173 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings228 = getelementptr inbounds %struct.cop, %struct.cop* %173, i32 0, i32 14
  %174 = load %struct.sv*, %struct.sv** %cop_warnings228, align 8
  %cmp229 = icmp eq %struct.sv* %174, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp229, label %if.then.255, label %lor.lhs.false.231

lor.lhs.false.231:                                ; preds = %land.lhs.true.227
  %175 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings232 = getelementptr inbounds %struct.cop, %struct.cop* %175, i32 0, i32 14
  %176 = load %struct.sv*, %struct.sv** %cop_warnings232, align 8
  %sv_any233 = getelementptr inbounds %struct.sv, %struct.sv* %176, i32 0, i32 0
  %177 = load i8*, i8** %sv_any233, align 8
  %178 = bitcast i8* %177 to %struct.xpv*
  %xpv_pv234 = getelementptr inbounds %struct.xpv, %struct.xpv* %178, i32 0, i32 0
  %179 = load i8*, i8** %xpv_pv234, align 8
  %arrayidx235 = getelementptr inbounds i8, i8* %179, i64 2
  %180 = load i8, i8* %arrayidx235, align 1
  %conv236 = sext i8 %180 to i32
  %and237 = and i32 %conv236, 64
  %tobool238 = icmp ne i32 %and237, 0
  br i1 %tobool238, label %if.then.255, label %lor.lhs.false.239

lor.lhs.false.239:                                ; preds = %lor.lhs.false.231
  %181 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings240 = getelementptr inbounds %struct.cop, %struct.cop* %181, i32 0, i32 14
  %182 = load %struct.sv*, %struct.sv** %cop_warnings240, align 8
  %sv_any241 = getelementptr inbounds %struct.sv, %struct.sv* %182, i32 0, i32 0
  %183 = load i8*, i8** %sv_any241, align 8
  %184 = bitcast i8* %183 to %struct.xpv*
  %xpv_pv242 = getelementptr inbounds %struct.xpv, %struct.xpv* %184, i32 0, i32 0
  %185 = load i8*, i8** %xpv_pv242, align 8
  %arrayidx243 = getelementptr inbounds i8, i8* %185, i64 1
  %186 = load i8, i8* %arrayidx243, align 1
  %conv244 = sext i8 %186 to i32
  %and245 = and i32 %conv244, 16
  %tobool246 = icmp ne i32 %and245, 0
  br i1 %tobool246, label %if.then.255, label %lor.lhs.false.247

lor.lhs.false.247:                                ; preds = %lor.lhs.false.239, %land.lhs.true.223, %if.else.219
  %187 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings248 = getelementptr inbounds %struct.cop, %struct.cop* %187, i32 0, i32 14
  %188 = load %struct.sv*, %struct.sv** %cop_warnings248, align 8
  %cmp249 = icmp eq %struct.sv* %188, null
  br i1 %cmp249, label %land.lhs.true.251, label %if.end.258

land.lhs.true.251:                                ; preds = %lor.lhs.false.247
  %189 = load i8, i8* @PL_dowarn, align 1
  %conv252 = zext i8 %189 to i32
  %and253 = and i32 %conv252, 1
  %tobool254 = icmp ne i32 %and253, 0
  br i1 %tobool254, label %if.then.255, label %if.end.258

if.then.255:                                      ; preds = %land.lhs.true.251, %lor.lhs.false.239, %lor.lhs.false.231, %land.lhs.true.227
  %190 = load %struct.gv*, %struct.gv** %gv, align 8
  %191 = load %struct.io*, %struct.io** %io, align 8
  %192 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type256 = getelementptr inbounds %struct.op, %struct.op* %192, i32 0, i32 4
  %193 = load i16, i16* %op_type256, align 2
  %conv257 = zext i16 %193 to i32
  call void @Perl_report_evil_fh(%struct.gv* %190, %struct.io* %191, i32 %conv257)
  br label %if.end.258

if.end.258:                                       ; preds = %if.then.255, %land.lhs.true.251, %lor.lhs.false.247
  br label %if.end.259

if.end.259:                                       ; preds = %if.end.258, %if.then.218
  br label %if.end.260

if.end.260:                                       ; preds = %if.end.259, %land.lhs.true.211, %lor.lhs.false.207
  %call261 = call i32* @__errno_location()
  store i32 9, i32* %call261, align 4
  br label %just_say_no

if.else.262:                                      ; preds = %if.else.176
  %194 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr263 = getelementptr inbounds %struct.sv*, %struct.sv** %194, i32 1
  store %struct.sv** %incdec.ptr263, %struct.sv*** %mark, align 8
  %195 = load %struct.sv*, %struct.sv** @PL_ofs_sv, align 8
  %tobool264 = icmp ne %struct.sv* %195, null
  br i1 %tobool264, label %land.lhs.true.265, label %if.else.286

land.lhs.true.265:                                ; preds = %if.else.262
  %196 = load %struct.sv*, %struct.sv** @PL_ofs_sv, align 8
  %sv_flags266 = getelementptr inbounds %struct.sv, %struct.sv* %196, i32 0, i32 2
  %197 = load i32, i32* %sv_flags266, align 4
  %and267 = and i32 %197, 118423552
  %tobool268 = icmp ne i32 %and267, 0
  br i1 %tobool268, label %if.then.269, label %if.else.286

if.then.269:                                      ; preds = %land.lhs.true.265
  br label %while.cond

while.cond:                                       ; preds = %if.end.285, %if.then.269
  %198 = load %struct.sv**, %struct.sv*** %mark, align 8
  %199 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp270 = icmp ule %struct.sv** %198, %199
  br i1 %cmp270, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %200 = load %struct.sv**, %struct.sv*** %mark, align 8
  %201 = load %struct.sv*, %struct.sv** %200, align 8
  %202 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %call272 = call signext i8 @Perl_do_print(%struct.sv* %201, %struct._PerlIO** %202)
  %tobool273 = icmp ne i8 %call272, 0
  br i1 %tobool273, label %if.end.275, label %if.then.274

if.then.274:                                      ; preds = %while.body
  br label %while.end

if.end.275:                                       ; preds = %while.body
  %203 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr276 = getelementptr inbounds %struct.sv*, %struct.sv** %203, i32 1
  store %struct.sv** %incdec.ptr276, %struct.sv*** %mark, align 8
  %204 = load %struct.sv**, %struct.sv*** %mark, align 8
  %205 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp277 = icmp ule %struct.sv** %204, %205
  br i1 %cmp277, label %if.then.279, label %if.end.285

if.then.279:                                      ; preds = %if.end.275
  %206 = load %struct.sv*, %struct.sv** @PL_ofs_sv, align 8
  %207 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %call280 = call signext i8 @Perl_do_print(%struct.sv* %206, %struct._PerlIO** %207)
  %tobool281 = icmp ne i8 %call280, 0
  br i1 %tobool281, label %if.end.284, label %if.then.282

if.then.282:                                      ; preds = %if.then.279
  %208 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr283 = getelementptr inbounds %struct.sv*, %struct.sv** %208, i32 -1
  store %struct.sv** %incdec.ptr283, %struct.sv*** %mark, align 8
  br label %while.end

if.end.284:                                       ; preds = %if.then.279
  br label %if.end.285

if.end.285:                                       ; preds = %if.end.284, %if.end.275
  br label %while.cond

while.end:                                        ; preds = %if.then.282, %if.then.274, %while.cond
  br label %if.end.297

if.else.286:                                      ; preds = %land.lhs.true.265, %if.else.262
  br label %while.cond.287

while.cond.287:                                   ; preds = %if.end.294, %if.else.286
  %209 = load %struct.sv**, %struct.sv*** %mark, align 8
  %210 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp288 = icmp ule %struct.sv** %209, %210
  br i1 %cmp288, label %while.body.290, label %while.end.296

while.body.290:                                   ; preds = %while.cond.287
  %211 = load %struct.sv**, %struct.sv*** %mark, align 8
  %212 = load %struct.sv*, %struct.sv** %211, align 8
  %213 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %call291 = call signext i8 @Perl_do_print(%struct.sv* %212, %struct._PerlIO** %213)
  %tobool292 = icmp ne i8 %call291, 0
  br i1 %tobool292, label %if.end.294, label %if.then.293

if.then.293:                                      ; preds = %while.body.290
  br label %while.end.296

if.end.294:                                       ; preds = %while.body.290
  %214 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr295 = getelementptr inbounds %struct.sv*, %struct.sv** %214, i32 1
  store %struct.sv** %incdec.ptr295, %struct.sv*** %mark, align 8
  br label %while.cond.287

while.end.296:                                    ; preds = %if.then.293, %while.cond.287
  br label %if.end.297

if.end.297:                                       ; preds = %while.end.296, %while.end
  %215 = load %struct.sv**, %struct.sv*** %mark, align 8
  %216 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp298 = icmp ule %struct.sv** %215, %216
  br i1 %cmp298, label %if.then.300, label %if.else.301

if.then.300:                                      ; preds = %if.end.297
  br label %just_say_no

if.else.301:                                      ; preds = %if.end.297
  %217 = load %struct.sv*, %struct.sv** @PL_ors_sv, align 8
  %tobool302 = icmp ne %struct.sv* %217, null
  br i1 %tobool302, label %land.lhs.true.303, label %if.end.312

land.lhs.true.303:                                ; preds = %if.else.301
  %218 = load %struct.sv*, %struct.sv** @PL_ors_sv, align 8
  %sv_flags304 = getelementptr inbounds %struct.sv, %struct.sv* %218, i32 0, i32 2
  %219 = load i32, i32* %sv_flags304, align 4
  %and305 = and i32 %219, 118423552
  %tobool306 = icmp ne i32 %and305, 0
  br i1 %tobool306, label %if.then.307, label %if.end.312

if.then.307:                                      ; preds = %land.lhs.true.303
  %220 = load %struct.sv*, %struct.sv** @PL_ors_sv, align 8
  %221 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %call308 = call signext i8 @Perl_do_print(%struct.sv* %220, %struct._PerlIO** %221)
  %tobool309 = icmp ne i8 %call308, 0
  br i1 %tobool309, label %if.end.311, label %if.then.310

if.then.310:                                      ; preds = %if.then.307
  br label %just_say_no

if.end.311:                                       ; preds = %if.then.307
  br label %if.end.312

if.end.312:                                       ; preds = %if.end.311, %land.lhs.true.303, %if.else.301
  %222 = load %struct.io*, %struct.io** %io, align 8
  %sv_any313 = getelementptr inbounds %struct.io, %struct.io* %222, i32 0, i32 0
  %223 = load %struct.xpvio*, %struct.xpvio** %sv_any313, align 8
  %xio_flags = getelementptr inbounds %struct.xpvio, %struct.xpvio* %223, i32 0, i32 22
  %224 = load i8, i8* %xio_flags, align 1
  %conv314 = sext i8 %224 to i32
  %and315 = and i32 %conv314, 4
  %tobool316 = icmp ne i32 %and315, 0
  br i1 %tobool316, label %if.then.317, label %if.end.323

if.then.317:                                      ; preds = %if.end.312
  %225 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %call318 = call i32 @Perl_PerlIO_flush(%struct._PerlIO** %225)
  %cmp319 = icmp eq i32 %call318, -1
  br i1 %cmp319, label %if.then.321, label %if.end.322

if.then.321:                                      ; preds = %if.then.317
  br label %just_say_no

if.end.322:                                       ; preds = %if.then.317
  br label %if.end.323

if.end.323:                                       ; preds = %if.end.322, %if.end.312
  br label %if.end.324

if.end.324:                                       ; preds = %if.end.323
  br label %if.end.325

if.end.325:                                       ; preds = %if.end.324
  br label %if.end.326

if.end.326:                                       ; preds = %if.end.325
  %226 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %227 = load i32, i32* %origmark, align 4
  %idx.ext327 = sext i32 %227 to i64
  %add.ptr328 = getelementptr inbounds %struct.sv*, %struct.sv** %226, i64 %idx.ext327
  store %struct.sv** %add.ptr328, %struct.sv*** %sp, align 8
  %228 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr329 = getelementptr inbounds %struct.sv*, %struct.sv** %228, i32 1
  store %struct.sv** %incdec.ptr329, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr329, align 8
  %229 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %229, %struct.sv*** @PL_stack_sp, align 8
  %230 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next330 = getelementptr inbounds %struct.op, %struct.op* %230, i32 0, i32 0
  %231 = load %struct.op*, %struct.op** %op_next330, align 8
  store %struct.op* %231, %struct.op** %retval
  br label %return

just_say_no:                                      ; preds = %if.then.321, %if.then.310, %if.then.300, %if.end.260, %if.end.174
  %232 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %233 = load i32, i32* %origmark, align 4
  %idx.ext331 = sext i32 %233 to i64
  %add.ptr332 = getelementptr inbounds %struct.sv*, %struct.sv** %232, i64 %idx.ext331
  store %struct.sv** %add.ptr332, %struct.sv*** %sp, align 8
  %234 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr333 = getelementptr inbounds %struct.sv*, %struct.sv** %234, i32 1
  store %struct.sv** %incdec.ptr333, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr333, align 8
  %235 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %235, %struct.sv*** @PL_stack_sp, align 8
  %236 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next334 = getelementptr inbounds %struct.op, %struct.op* %236, i32 0, i32 0
  %237 = load %struct.op*, %struct.op** %op_next334, align 8
  store %struct.op* %237, %struct.op** %retval
  br label %return

return:                                           ; preds = %just_say_no, %if.end.326, %cond.end.69
  %238 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %238
}

declare %struct.magic* @Perl_mg_find(%struct.sv*, i32) #1

; Function Attrs: nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #2

declare %struct.sv* @Perl_newRV(%struct.sv*) #1

declare void @Perl_push_scope() #1

declare i32 @Perl_call_method(i8*, i32) #1

declare void @Perl_pop_scope() #1

declare void @Perl_report_evil_fh(%struct.gv*, %struct.io*, i32) #1

declare i32* @__errno_location() #1

declare signext i8 @Perl_do_print(%struct.sv*, %struct._PerlIO**) #1

declare i32 @Perl_PerlIO_flush(%struct._PerlIO**) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_rv2av() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  %av = alloca %struct.av*, align 8
  %tmpsv = alloca %struct.sv*, align 8
  %arg = alloca %struct.sv*, align 8
  %gv = alloca %struct.gv*, align 8
  %sym = alloca i8*, align 8
  %len = alloca i64, align 8
  %maxarg = alloca i32, align 4
  %i = alloca i32, align 4
  %svp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %maxarg392 = alloca i32, align 4
  %tmp = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** %sv, align 8
  %3 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %and = and i32 %4, 524288
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else.68

if.then:                                          ; preds = %entry
  br label %wasref

wasref:                                           ; preds = %if.then.125, %if.then
  %5 = load i64, i64* @PL_amagic_generation, align 8
  %tobool1 = icmp ne i64 %5, 0
  br i1 %tobool1, label %if.then.2, label %if.end.19

if.then.2:                                        ; preds = %wasref
  %6 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %6, i64 0
  %7 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %7, %struct.sv** %arg, align 8
  br label %am_again

am_again:                                         ; preds = %if.then.16, %if.then.2
  %8 = load %struct.sv*, %struct.sv** %arg, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %9, 268435456
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %land.lhs.true, label %if.end.18

land.lhs.true:                                    ; preds = %am_again
  %10 = load %struct.sv*, %struct.sv** %arg, align 8
  %call = call %struct.sv* @Perl_amagic_call(%struct.sv* %10, %struct.sv* @PL_sv_undef, i32 59, i32 9)
  store %struct.sv* %call, %struct.sv** %tmpsv, align 8
  %tobool6 = icmp ne %struct.sv* %call, null
  br i1 %tobool6, label %if.then.7, label %if.end.18

if.then.7:                                        ; preds = %land.lhs.true
  %11 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %11, %struct.sv*** %sp, align 8
  %12 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  store %struct.sv* %12, %struct.sv** %sv, align 8
  %13 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %14, 524288
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.end, label %if.then.11

if.then.11:                                       ; preds = %if.then.7
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then.11, %if.then.7
  %15 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %16 = load %struct.sv*, %struct.sv** %arg, align 8
  %cmp = icmp ne %struct.sv* %15, %16
  br i1 %cmp, label %land.lhs.true.12, label %if.end.17

land.lhs.true.12:                                 ; preds = %if.end
  %17 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 0
  %18 = load i8*, i8** %sv_any, align 8
  %19 = bitcast i8* %18 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %19, i32 0, i32 0
  %20 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  %21 = load %struct.sv*, %struct.sv** %arg, align 8
  %sv_any13 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any13, align 8
  %23 = bitcast i8* %22 to %struct.xrv*
  %xrv_rv14 = getelementptr inbounds %struct.xrv, %struct.xrv* %23, i32 0, i32 0
  %24 = load %struct.sv*, %struct.sv** %xrv_rv14, align 8
  %cmp15 = icmp ne %struct.sv* %20, %24
  br i1 %cmp15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %land.lhs.true.12
  %25 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  store %struct.sv* %25, %struct.sv** %arg, align 8
  br label %am_again

if.end.17:                                        ; preds = %land.lhs.true.12, %if.end
  br label %if.end.18

if.end.18:                                        ; preds = %if.end.17, %land.lhs.true, %am_again
  br label %if.end.19

if.end.19:                                        ; preds = %if.end.18, %wasref
  %26 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any20 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 0
  %27 = load i8*, i8** %sv_any20, align 8
  %28 = bitcast i8* %27 to %struct.xrv*
  %xrv_rv21 = getelementptr inbounds %struct.xrv, %struct.xrv* %28, i32 0, i32 0
  %29 = load %struct.sv*, %struct.sv** %xrv_rv21, align 8
  %30 = bitcast %struct.sv* %29 to %struct.av*
  store %struct.av* %30, %struct.av** %av, align 8
  %31 = load %struct.av*, %struct.av** %av, align 8
  %sv_flags22 = getelementptr inbounds %struct.av, %struct.av* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %32, 255
  %cmp24 = icmp ne i32 %and23, 10
  br i1 %cmp24, label %if.then.25, label %if.end.27

if.then.25:                                       ; preds = %if.end.19
  %call26 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i32 0, i32 0))
  store %struct.op* %call26, %struct.op** %retval
  br label %return

if.end.27:                                        ; preds = %if.end.19
  %33 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %33, i32 0, i32 6
  %34 = load i8, i8* %op_flags, align 1
  %conv = zext i8 %34 to i32
  %and28 = and i32 %conv, 16
  %tobool29 = icmp ne i32 %and28, 0
  br i1 %tobool29, label %if.then.30, label %if.else

if.then.30:                                       ; preds = %if.end.27
  %35 = load %struct.av*, %struct.av** %av, align 8
  %36 = bitcast %struct.av* %35 to %struct.sv*
  %37 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %36, %struct.sv** %37, align 8
  %38 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %38, %struct.sv*** @PL_stack_sp, align 8
  %39 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %39, i32 0, i32 0
  %40 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %40, %struct.op** %retval
  br label %return

if.else:                                          ; preds = %if.end.27
  %41 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %41, i32 0, i32 7
  %42 = load i8, i8* %op_private, align 1
  %conv31 = zext i8 %42 to i32
  %and32 = and i32 %conv31, 8
  %tobool33 = icmp ne i32 %and32, 0
  br i1 %tobool33, label %land.lhs.true.34, label %if.else.54

land.lhs.true.34:                                 ; preds = %if.else
  %call35 = call i32 @Perl_is_lvalue_sub()
  %tobool36 = icmp ne i32 %call35, 0
  br i1 %tobool36, label %if.then.37, label %if.else.54

if.then.37:                                       ; preds = %land.lhs.true.34
  %43 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags38 = getelementptr inbounds %struct.op, %struct.op* %43, i32 0, i32 6
  %44 = load i8, i8* %op_flags38, align 1
  %conv39 = zext i8 %44 to i32
  %and40 = and i32 %conv39, 3
  %tobool41 = icmp ne i32 %and40, 0
  br i1 %tobool41, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.37
  %45 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags42 = getelementptr inbounds %struct.op, %struct.op* %45, i32 0, i32 6
  %46 = load i8, i8* %op_flags42, align 1
  %conv43 = zext i8 %46 to i32
  %and44 = and i32 %conv43, 3
  %cmp45 = icmp eq i32 %and44, 3
  %cond = select i1 %cmp45, i32 1, i32 0
  br label %cond.end

cond.false:                                       ; preds = %if.then.37
  %call47 = call i32 @Perl_dowantarray()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond48 = phi i32 [ %cond, %cond.true ], [ %call47, %cond.false ]
  %cmp49 = icmp eq i32 %cond48, 0
  br i1 %cmp49, label %if.then.51, label %if.end.52

if.then.51:                                       ; preds = %cond.end
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.4, i32 0, i32 0))
  br label %if.end.52

if.end.52:                                        ; preds = %if.then.51, %cond.end
  %47 = load %struct.av*, %struct.av** %av, align 8
  %48 = bitcast %struct.av* %47 to %struct.sv*
  %49 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %48, %struct.sv** %49, align 8
  %50 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %50, %struct.sv*** @PL_stack_sp, align 8
  %51 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next53 = getelementptr inbounds %struct.op, %struct.op* %51, i32 0, i32 0
  %52 = load %struct.op*, %struct.op** %op_next53, align 8
  store %struct.op* %52, %struct.op** %retval
  br label %return

if.else.54:                                       ; preds = %land.lhs.true.34, %if.else
  %53 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags55 = getelementptr inbounds %struct.op, %struct.op* %53, i32 0, i32 6
  %54 = load i8, i8* %op_flags55, align 1
  %conv56 = zext i8 %54 to i32
  %and57 = and i32 %conv56, 32
  %tobool58 = icmp ne i32 %and57, 0
  br i1 %tobool58, label %land.lhs.true.59, label %if.end.65

land.lhs.true.59:                                 ; preds = %if.else.54
  %55 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private60 = getelementptr inbounds %struct.op, %struct.op* %55, i32 0, i32 7
  %56 = load i8, i8* %op_private60, align 1
  %conv61 = zext i8 %56 to i32
  %and62 = and i32 %conv61, 128
  %tobool63 = icmp ne i32 %and62, 0
  br i1 %tobool63, label %if.then.64, label %if.end.65

if.then.64:                                       ; preds = %land.lhs.true.59
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_localize_ref, i32 0, i32 0))
  br label %if.end.65

if.end.65:                                        ; preds = %if.then.64, %land.lhs.true.59, %if.else.54
  br label %if.end.66

if.end.66:                                        ; preds = %if.end.65
  br label %if.end.67

if.end.67:                                        ; preds = %if.end.66
  br label %if.end.295

if.else.68:                                       ; preds = %entry
  %57 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags69 = getelementptr inbounds %struct.sv, %struct.sv* %57, i32 0, i32 2
  %58 = load i32, i32* %sv_flags69, align 4
  %and70 = and i32 %58, 255
  %cmp71 = icmp eq i32 %and70, 10
  br i1 %cmp71, label %if.then.73, label %if.else.111

if.then.73:                                       ; preds = %if.else.68
  %59 = load %struct.sv*, %struct.sv** %sv, align 8
  %60 = bitcast %struct.sv* %59 to %struct.av*
  store %struct.av* %60, %struct.av** %av, align 8
  %61 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags74 = getelementptr inbounds %struct.op, %struct.op* %61, i32 0, i32 6
  %62 = load i8, i8* %op_flags74, align 1
  %conv75 = zext i8 %62 to i32
  %and76 = and i32 %conv75, 16
  %tobool77 = icmp ne i32 %and76, 0
  br i1 %tobool77, label %if.then.78, label %if.else.80

if.then.78:                                       ; preds = %if.then.73
  %63 = load %struct.av*, %struct.av** %av, align 8
  %64 = bitcast %struct.av* %63 to %struct.sv*
  %65 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %64, %struct.sv** %65, align 8
  %66 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %66, %struct.sv*** @PL_stack_sp, align 8
  %67 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next79 = getelementptr inbounds %struct.op, %struct.op* %67, i32 0, i32 0
  %68 = load %struct.op*, %struct.op** %op_next79, align 8
  store %struct.op* %68, %struct.op** %retval
  br label %return

if.else.80:                                       ; preds = %if.then.73
  %69 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private81 = getelementptr inbounds %struct.op, %struct.op* %69, i32 0, i32 7
  %70 = load i8, i8* %op_private81, align 1
  %conv82 = zext i8 %70 to i32
  %and83 = and i32 %conv82, 8
  %tobool84 = icmp ne i32 %and83, 0
  br i1 %tobool84, label %land.lhs.true.85, label %if.end.109

land.lhs.true.85:                                 ; preds = %if.else.80
  %call86 = call i32 @Perl_is_lvalue_sub()
  %tobool87 = icmp ne i32 %call86, 0
  br i1 %tobool87, label %if.then.88, label %if.end.109

if.then.88:                                       ; preds = %land.lhs.true.85
  %71 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags89 = getelementptr inbounds %struct.op, %struct.op* %71, i32 0, i32 6
  %72 = load i8, i8* %op_flags89, align 1
  %conv90 = zext i8 %72 to i32
  %and91 = and i32 %conv90, 3
  %tobool92 = icmp ne i32 %and91, 0
  br i1 %tobool92, label %cond.true.93, label %cond.false.100

cond.true.93:                                     ; preds = %if.then.88
  %73 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags94 = getelementptr inbounds %struct.op, %struct.op* %73, i32 0, i32 6
  %74 = load i8, i8* %op_flags94, align 1
  %conv95 = zext i8 %74 to i32
  %and96 = and i32 %conv95, 3
  %cmp97 = icmp eq i32 %and96, 3
  %cond99 = select i1 %cmp97, i32 1, i32 0
  br label %cond.end.102

cond.false.100:                                   ; preds = %if.then.88
  %call101 = call i32 @Perl_dowantarray()
  br label %cond.end.102

cond.end.102:                                     ; preds = %cond.false.100, %cond.true.93
  %cond103 = phi i32 [ %cond99, %cond.true.93 ], [ %call101, %cond.false.100 ]
  %cmp104 = icmp eq i32 %cond103, 0
  br i1 %cmp104, label %if.then.106, label %if.end.107

if.then.106:                                      ; preds = %cond.end.102
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.4, i32 0, i32 0))
  br label %if.end.107

if.end.107:                                       ; preds = %if.then.106, %cond.end.102
  %75 = load %struct.av*, %struct.av** %av, align 8
  %76 = bitcast %struct.av* %75 to %struct.sv*
  %77 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %76, %struct.sv** %77, align 8
  %78 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %78, %struct.sv*** @PL_stack_sp, align 8
  %79 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next108 = getelementptr inbounds %struct.op, %struct.op* %79, i32 0, i32 0
  %80 = load %struct.op*, %struct.op** %op_next108, align 8
  store %struct.op* %80, %struct.op** %retval
  br label %return

if.end.109:                                       ; preds = %land.lhs.true.85, %if.else.80
  br label %if.end.110

if.end.110:                                       ; preds = %if.end.109
  br label %if.end.294

if.else.111:                                      ; preds = %if.else.68
  %81 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags112 = getelementptr inbounds %struct.sv, %struct.sv* %81, i32 0, i32 2
  %82 = load i32, i32* %sv_flags112, align 4
  %and113 = and i32 %82, 255
  %cmp114 = icmp ne i32 %and113, 13
  br i1 %cmp114, label %if.then.116, label %if.else.235

if.then.116:                                      ; preds = %if.else.111
  %83 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags117 = getelementptr inbounds %struct.sv, %struct.sv* %83, i32 0, i32 2
  %84 = load i32, i32* %sv_flags117, align 4
  %and118 = and i32 %84, 8192
  %tobool119 = icmp ne i32 %and118, 0
  br i1 %tobool119, label %if.then.120, label %if.end.127

if.then.120:                                      ; preds = %if.then.116
  %85 = load %struct.sv*, %struct.sv** %sv, align 8
  %call121 = call i32 @Perl_mg_get(%struct.sv* %85)
  %86 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags122 = getelementptr inbounds %struct.sv, %struct.sv* %86, i32 0, i32 2
  %87 = load i32, i32* %sv_flags122, align 4
  %and123 = and i32 %87, 524288
  %tobool124 = icmp ne i32 %and123, 0
  br i1 %tobool124, label %if.then.125, label %if.end.126

if.then.125:                                      ; preds = %if.then.120
  br label %wasref

if.end.126:                                       ; preds = %if.then.120
  br label %if.end.127

if.end.127:                                       ; preds = %if.end.126, %if.then.116
  %88 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags128 = getelementptr inbounds %struct.sv, %struct.sv* %88, i32 0, i32 2
  %89 = load i32, i32* %sv_flags128, align 4
  %and129 = and i32 %89, 118423552
  %tobool130 = icmp ne i32 %and129, 0
  br i1 %tobool130, label %if.end.191, label %if.then.131

if.then.131:                                      ; preds = %if.end.127
  %90 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags132 = getelementptr inbounds %struct.op, %struct.op* %90, i32 0, i32 6
  %91 = load i8, i8* %op_flags132, align 1
  %conv133 = zext i8 %91 to i32
  %and134 = and i32 %conv133, 16
  %tobool135 = icmp ne i32 %and134, 0
  br i1 %tobool135, label %if.then.140, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.131
  %92 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private136 = getelementptr inbounds %struct.op, %struct.op* %92, i32 0, i32 7
  %93 = load i8, i8* %op_private136, align 1
  %conv137 = zext i8 %93 to i32
  %and138 = and i32 %conv137, 2
  %tobool139 = icmp ne i32 %and138, 0
  br i1 %tobool139, label %if.then.140, label %if.end.142

if.then.140:                                      ; preds = %lor.lhs.false, %if.then.131
  %call141 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_usym, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i32 0, i32 0))
  store %struct.op* %call141, %struct.op** %retval
  br label %return

if.end.142:                                       ; preds = %lor.lhs.false
  %94 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %94, i32 0, i32 14
  %95 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp143 = icmp ne %struct.sv* %95, null
  br i1 %cmp143, label %land.lhs.true.145, label %lor.lhs.false.160

land.lhs.true.145:                                ; preds = %if.end.142
  %96 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings146 = getelementptr inbounds %struct.cop, %struct.cop* %96, i32 0, i32 14
  %97 = load %struct.sv*, %struct.sv** %cop_warnings146, align 8
  %cmp147 = icmp ne %struct.sv* %97, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp147, label %land.lhs.true.149, label %lor.lhs.false.160

land.lhs.true.149:                                ; preds = %land.lhs.true.145
  %98 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings150 = getelementptr inbounds %struct.cop, %struct.cop* %98, i32 0, i32 14
  %99 = load %struct.sv*, %struct.sv** %cop_warnings150, align 8
  %cmp151 = icmp eq %struct.sv* %99, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp151, label %if.then.168, label %lor.lhs.false.153

lor.lhs.false.153:                                ; preds = %land.lhs.true.149
  %100 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings154 = getelementptr inbounds %struct.cop, %struct.cop* %100, i32 0, i32 14
  %101 = load %struct.sv*, %struct.sv** %cop_warnings154, align 8
  %sv_any155 = getelementptr inbounds %struct.sv, %struct.sv* %101, i32 0, i32 0
  %102 = load i8*, i8** %sv_any155, align 8
  %103 = bitcast i8* %102 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %103, i32 0, i32 0
  %104 = load i8*, i8** %xpv_pv, align 8
  %arrayidx156 = getelementptr inbounds i8, i8* %104, i64 10
  %105 = load i8, i8* %arrayidx156, align 1
  %conv157 = sext i8 %105 to i32
  %and158 = and i32 %conv157, 4
  %tobool159 = icmp ne i32 %and158, 0
  br i1 %tobool159, label %if.then.168, label %lor.lhs.false.160

lor.lhs.false.160:                                ; preds = %lor.lhs.false.153, %land.lhs.true.145, %if.end.142
  %106 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings161 = getelementptr inbounds %struct.cop, %struct.cop* %106, i32 0, i32 14
  %107 = load %struct.sv*, %struct.sv** %cop_warnings161, align 8
  %cmp162 = icmp eq %struct.sv* %107, null
  br i1 %cmp162, label %land.lhs.true.164, label %if.end.169

land.lhs.true.164:                                ; preds = %lor.lhs.false.160
  %108 = load i8, i8* @PL_dowarn, align 1
  %conv165 = zext i8 %108 to i32
  %and166 = and i32 %conv165, 1
  %tobool167 = icmp ne i32 %and166, 0
  br i1 %tobool167, label %if.then.168, label %if.end.169

if.then.168:                                      ; preds = %land.lhs.true.164, %lor.lhs.false.153, %land.lhs.true.149
  call void @Perl_report_uninit()
  br label %if.end.169

if.end.169:                                       ; preds = %if.then.168, %land.lhs.true.164, %lor.lhs.false.160
  %109 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags170 = getelementptr inbounds %struct.op, %struct.op* %109, i32 0, i32 6
  %110 = load i8, i8* %op_flags170, align 1
  %conv171 = zext i8 %110 to i32
  %and172 = and i32 %conv171, 3
  %tobool173 = icmp ne i32 %and172, 0
  br i1 %tobool173, label %cond.true.174, label %cond.false.181

cond.true.174:                                    ; preds = %if.end.169
  %111 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags175 = getelementptr inbounds %struct.op, %struct.op* %111, i32 0, i32 6
  %112 = load i8, i8* %op_flags175, align 1
  %conv176 = zext i8 %112 to i32
  %and177 = and i32 %conv176, 3
  %cmp178 = icmp eq i32 %and177, 3
  %cond180 = select i1 %cmp178, i32 1, i32 0
  br label %cond.end.183

cond.false.181:                                   ; preds = %if.end.169
  %call182 = call i32 @Perl_dowantarray()
  br label %cond.end.183

cond.end.183:                                     ; preds = %cond.false.181, %cond.true.174
  %cond184 = phi i32 [ %cond180, %cond.true.174 ], [ %call182, %cond.false.181 ]
  %cmp185 = icmp eq i32 %cond184, 1
  br i1 %cmp185, label %if.then.187, label %if.end.189

if.then.187:                                      ; preds = %cond.end.183
  %113 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %113, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %114 = load %struct.sv*, %struct.sv** %113, align 8
  %115 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %115, %struct.sv*** @PL_stack_sp, align 8
  %116 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next188 = getelementptr inbounds %struct.op, %struct.op* %116, i32 0, i32 0
  %117 = load %struct.op*, %struct.op** %op_next188, align 8
  store %struct.op* %117, %struct.op** %retval
  br label %return

if.end.189:                                       ; preds = %cond.end.183
  %118 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %118, align 8
  %119 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %119, %struct.sv*** @PL_stack_sp, align 8
  %120 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next190 = getelementptr inbounds %struct.op, %struct.op* %120, i32 0, i32 0
  %121 = load %struct.op*, %struct.op** %op_next190, align 8
  store %struct.op* %121, %struct.op** %retval
  br label %return

if.end.191:                                       ; preds = %if.end.127
  %122 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags192 = getelementptr inbounds %struct.sv, %struct.sv* %122, i32 0, i32 2
  %123 = load i32, i32* %sv_flags192, align 4
  %and193 = and i32 %123, 262144
  %cmp194 = icmp eq i32 %and193, 262144
  br i1 %cmp194, label %cond.true.196, label %cond.false.200

cond.true.196:                                    ; preds = %if.end.191
  %124 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any197 = getelementptr inbounds %struct.sv, %struct.sv* %124, i32 0, i32 0
  %125 = load i8*, i8** %sv_any197, align 8
  %126 = bitcast i8* %125 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %126, i32 0, i32 1
  %127 = load i64, i64* %xpv_cur, align 8
  store i64 %127, i64* %len, align 8
  %128 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any198 = getelementptr inbounds %struct.sv, %struct.sv* %128, i32 0, i32 0
  %129 = load i8*, i8** %sv_any198, align 8
  %130 = bitcast i8* %129 to %struct.xpv*
  %xpv_pv199 = getelementptr inbounds %struct.xpv, %struct.xpv* %130, i32 0, i32 0
  %131 = load i8*, i8** %xpv_pv199, align 8
  br label %cond.end.202

cond.false.200:                                   ; preds = %if.end.191
  %132 = load %struct.sv*, %struct.sv** %sv, align 8
  %call201 = call i8* @Perl_sv_2pv_flags(%struct.sv* %132, i64* %len, i32 2)
  br label %cond.end.202

cond.end.202:                                     ; preds = %cond.false.200, %cond.true.196
  %cond203 = phi i8* [ %131, %cond.true.196 ], [ %call201, %cond.false.200 ]
  store i8* %cond203, i8** %sym, align 8
  %133 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags204 = getelementptr inbounds %struct.op, %struct.op* %133, i32 0, i32 6
  %134 = load i8, i8* %op_flags204, align 1
  %conv205 = zext i8 %134 to i32
  %and206 = and i32 %conv205, 128
  %tobool207 = icmp ne i32 %and206, 0
  br i1 %tobool207, label %land.lhs.true.208, label %if.else.225

land.lhs.true.208:                                ; preds = %cond.end.202
  %135 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags209 = getelementptr inbounds %struct.op, %struct.op* %135, i32 0, i32 6
  %136 = load i8, i8* %op_flags209, align 1
  %conv210 = zext i8 %136 to i32
  %and211 = and i32 %conv210, 32
  %tobool212 = icmp ne i32 %and211, 0
  br i1 %tobool212, label %if.else.225, label %if.then.213

if.then.213:                                      ; preds = %land.lhs.true.208
  %137 = load i8*, i8** %sym, align 8
  %call214 = call %struct.gv* @Perl_gv_fetchpv(i8* %137, i32 0, i32 10)
  store %struct.gv* %call214, %struct.gv** %gv, align 8
  %138 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool215 = icmp ne %struct.gv* %138, null
  br i1 %tobool215, label %if.end.224, label %land.lhs.true.216

land.lhs.true.216:                                ; preds = %if.then.213
  %139 = load i8*, i8** %sym, align 8
  %140 = load i64, i64* %len, align 8
  %call217 = call signext i8 @Perl_is_gv_magical(i8* %139, i64 %140, i32 0)
  %tobool218 = icmp ne i8 %call217, 0
  br i1 %tobool218, label %lor.lhs.false.219, label %if.then.222

lor.lhs.false.219:                                ; preds = %land.lhs.true.216
  %141 = load i8*, i8** %sym, align 8
  %call220 = call %struct.gv* @Perl_gv_fetchpv(i8* %141, i32 1, i32 10)
  store %struct.gv* %call220, %struct.gv** %gv, align 8
  %tobool221 = icmp ne %struct.gv* %call220, null
  br i1 %tobool221, label %if.end.224, label %if.then.222

if.then.222:                                      ; preds = %lor.lhs.false.219, %land.lhs.true.216
  %142 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %142, align 8
  %143 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %143, %struct.sv*** @PL_stack_sp, align 8
  %144 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next223 = getelementptr inbounds %struct.op, %struct.op* %144, i32 0, i32 0
  %145 = load %struct.op*, %struct.op** %op_next223, align 8
  store %struct.op* %145, %struct.op** %retval
  br label %return

if.end.224:                                       ; preds = %lor.lhs.false.219, %if.then.213
  br label %if.end.234

if.else.225:                                      ; preds = %land.lhs.true.208, %cond.end.202
  %146 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private226 = getelementptr inbounds %struct.op, %struct.op* %146, i32 0, i32 7
  %147 = load i8, i8* %op_private226, align 1
  %conv227 = zext i8 %147 to i32
  %and228 = and i32 %conv227, 2
  %tobool229 = icmp ne i32 %and228, 0
  br i1 %tobool229, label %if.then.230, label %if.end.232

if.then.230:                                      ; preds = %if.else.225
  %148 = load i8*, i8** %sym, align 8
  %call231 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_symref, i32 0, i32 0), i8* %148, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i32 0, i32 0))
  store %struct.op* %call231, %struct.op** %retval
  br label %return

if.end.232:                                       ; preds = %if.else.225
  %149 = load i8*, i8** %sym, align 8
  %call233 = call %struct.gv* @Perl_gv_fetchpv(i8* %149, i32 1, i32 10)
  store %struct.gv* %call233, %struct.gv** %gv, align 8
  br label %if.end.234

if.end.234:                                       ; preds = %if.end.232, %if.end.224
  br label %if.end.236

if.else.235:                                      ; preds = %if.else.111
  %150 = load %struct.sv*, %struct.sv** %sv, align 8
  %151 = bitcast %struct.sv* %150 to %struct.gv*
  store %struct.gv* %151, %struct.gv** %gv, align 8
  br label %if.end.236

if.end.236:                                       ; preds = %if.else.235, %if.end.234
  %152 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any237 = getelementptr inbounds %struct.gv, %struct.gv* %152, i32 0, i32 0
  %153 = load %struct.xpvgv*, %struct.xpvgv** %sv_any237, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %153, i32 0, i32 7
  %154 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %154, i32 0, i32 4
  %155 = load %struct.av*, %struct.av** %gp_av, align 8
  %tobool238 = icmp ne %struct.av* %155, null
  br i1 %tobool238, label %cond.true.239, label %cond.false.243

cond.true.239:                                    ; preds = %if.end.236
  %156 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any240 = getelementptr inbounds %struct.gv, %struct.gv* %156, i32 0, i32 0
  %157 = load %struct.xpvgv*, %struct.xpvgv** %sv_any240, align 8
  %xgv_gp241 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %157, i32 0, i32 7
  %158 = load %struct.gp*, %struct.gp** %xgv_gp241, align 8
  %gp_av242 = getelementptr inbounds %struct.gp, %struct.gp* %158, i32 0, i32 4
  %159 = load %struct.av*, %struct.av** %gp_av242, align 8
  br label %cond.end.248

cond.false.243:                                   ; preds = %if.end.236
  %160 = load %struct.gv*, %struct.gv** %gv, align 8
  %call244 = call %struct.gv* @Perl_gv_AVadd(%struct.gv* %160)
  %sv_any245 = getelementptr inbounds %struct.gv, %struct.gv* %call244, i32 0, i32 0
  %161 = load %struct.xpvgv*, %struct.xpvgv** %sv_any245, align 8
  %xgv_gp246 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %161, i32 0, i32 7
  %162 = load %struct.gp*, %struct.gp** %xgv_gp246, align 8
  %gp_av247 = getelementptr inbounds %struct.gp, %struct.gp* %162, i32 0, i32 4
  %163 = load %struct.av*, %struct.av** %gp_av247, align 8
  br label %cond.end.248

cond.end.248:                                     ; preds = %cond.false.243, %cond.true.239
  %cond249 = phi %struct.av* [ %159, %cond.true.239 ], [ %163, %cond.false.243 ]
  store %struct.av* %cond249, %struct.av** %av, align 8
  %164 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private250 = getelementptr inbounds %struct.op, %struct.op* %164, i32 0, i32 7
  %165 = load i8, i8* %op_private250, align 1
  %conv251 = zext i8 %165 to i32
  %and252 = and i32 %conv251, 128
  %tobool253 = icmp ne i32 %and252, 0
  br i1 %tobool253, label %if.then.254, label %if.end.256

if.then.254:                                      ; preds = %cond.end.248
  %166 = load %struct.gv*, %struct.gv** %gv, align 8
  %call255 = call %struct.av* @Perl_save_ary(%struct.gv* %166)
  store %struct.av* %call255, %struct.av** %av, align 8
  br label %if.end.256

if.end.256:                                       ; preds = %if.then.254, %cond.end.248
  %167 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags257 = getelementptr inbounds %struct.op, %struct.op* %167, i32 0, i32 6
  %168 = load i8, i8* %op_flags257, align 1
  %conv258 = zext i8 %168 to i32
  %and259 = and i32 %conv258, 16
  %tobool260 = icmp ne i32 %and259, 0
  br i1 %tobool260, label %if.then.261, label %if.else.263

if.then.261:                                      ; preds = %if.end.256
  %169 = load %struct.av*, %struct.av** %av, align 8
  %170 = bitcast %struct.av* %169 to %struct.sv*
  %171 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %170, %struct.sv** %171, align 8
  %172 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %172, %struct.sv*** @PL_stack_sp, align 8
  %173 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next262 = getelementptr inbounds %struct.op, %struct.op* %173, i32 0, i32 0
  %174 = load %struct.op*, %struct.op** %op_next262, align 8
  store %struct.op* %174, %struct.op** %retval
  br label %return

if.else.263:                                      ; preds = %if.end.256
  %175 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private264 = getelementptr inbounds %struct.op, %struct.op* %175, i32 0, i32 7
  %176 = load i8, i8* %op_private264, align 1
  %conv265 = zext i8 %176 to i32
  %and266 = and i32 %conv265, 8
  %tobool267 = icmp ne i32 %and266, 0
  br i1 %tobool267, label %land.lhs.true.268, label %if.end.292

land.lhs.true.268:                                ; preds = %if.else.263
  %call269 = call i32 @Perl_is_lvalue_sub()
  %tobool270 = icmp ne i32 %call269, 0
  br i1 %tobool270, label %if.then.271, label %if.end.292

if.then.271:                                      ; preds = %land.lhs.true.268
  %177 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags272 = getelementptr inbounds %struct.op, %struct.op* %177, i32 0, i32 6
  %178 = load i8, i8* %op_flags272, align 1
  %conv273 = zext i8 %178 to i32
  %and274 = and i32 %conv273, 3
  %tobool275 = icmp ne i32 %and274, 0
  br i1 %tobool275, label %cond.true.276, label %cond.false.283

cond.true.276:                                    ; preds = %if.then.271
  %179 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags277 = getelementptr inbounds %struct.op, %struct.op* %179, i32 0, i32 6
  %180 = load i8, i8* %op_flags277, align 1
  %conv278 = zext i8 %180 to i32
  %and279 = and i32 %conv278, 3
  %cmp280 = icmp eq i32 %and279, 3
  %cond282 = select i1 %cmp280, i32 1, i32 0
  br label %cond.end.285

cond.false.283:                                   ; preds = %if.then.271
  %call284 = call i32 @Perl_dowantarray()
  br label %cond.end.285

cond.end.285:                                     ; preds = %cond.false.283, %cond.true.276
  %cond286 = phi i32 [ %cond282, %cond.true.276 ], [ %call284, %cond.false.283 ]
  %cmp287 = icmp eq i32 %cond286, 0
  br i1 %cmp287, label %if.then.289, label %if.end.290

if.then.289:                                      ; preds = %cond.end.285
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.4, i32 0, i32 0))
  br label %if.end.290

if.end.290:                                       ; preds = %if.then.289, %cond.end.285
  %181 = load %struct.av*, %struct.av** %av, align 8
  %182 = bitcast %struct.av* %181 to %struct.sv*
  %183 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %182, %struct.sv** %183, align 8
  %184 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %184, %struct.sv*** @PL_stack_sp, align 8
  %185 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next291 = getelementptr inbounds %struct.op, %struct.op* %185, i32 0, i32 0
  %186 = load %struct.op*, %struct.op** %op_next291, align 8
  store %struct.op* %186, %struct.op** %retval
  br label %return

if.end.292:                                       ; preds = %land.lhs.true.268, %if.else.263
  br label %if.end.293

if.end.293:                                       ; preds = %if.end.292
  br label %if.end.294

if.end.294:                                       ; preds = %if.end.293, %if.end.110
  br label %if.end.295

if.end.295:                                       ; preds = %if.end.294, %if.end.67
  %187 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags296 = getelementptr inbounds %struct.op, %struct.op* %187, i32 0, i32 6
  %188 = load i8, i8* %op_flags296, align 1
  %conv297 = zext i8 %188 to i32
  %and298 = and i32 %conv297, 3
  %tobool299 = icmp ne i32 %and298, 0
  br i1 %tobool299, label %cond.true.300, label %cond.false.307

cond.true.300:                                    ; preds = %if.end.295
  %189 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags301 = getelementptr inbounds %struct.op, %struct.op* %189, i32 0, i32 6
  %190 = load i8, i8* %op_flags301, align 1
  %conv302 = zext i8 %190 to i32
  %and303 = and i32 %conv302, 3
  %cmp304 = icmp eq i32 %and303, 3
  %cond306 = select i1 %cmp304, i32 1, i32 0
  br label %cond.end.309

cond.false.307:                                   ; preds = %if.end.295
  %call308 = call i32 @Perl_dowantarray()
  br label %cond.end.309

cond.end.309:                                     ; preds = %cond.false.307, %cond.true.300
  %cond310 = phi i32 [ %cond306, %cond.true.300 ], [ %call308, %cond.false.307 ]
  %cmp311 = icmp eq i32 %cond310, 1
  br i1 %cmp311, label %if.then.313, label %if.else.359

if.then.313:                                      ; preds = %cond.end.309
  %191 = load %struct.av*, %struct.av** %av, align 8
  %192 = bitcast %struct.av* %191 to %struct.sv*
  %sv_flags314 = getelementptr inbounds %struct.sv, %struct.sv* %192, i32 0, i32 2
  %193 = load i32, i32* %sv_flags314, align 4
  %and315 = and i32 %193, 32768
  %tobool316 = icmp ne i32 %and315, 0
  br i1 %tobool316, label %cond.true.317, label %cond.false.320

cond.true.317:                                    ; preds = %if.then.313
  %194 = load %struct.av*, %struct.av** %av, align 8
  %195 = bitcast %struct.av* %194 to %struct.sv*
  %call318 = call i32 @Perl_mg_size(%struct.sv* %195)
  %conv319 = sext i32 %call318 to i64
  br label %cond.end.322

cond.false.320:                                   ; preds = %if.then.313
  %196 = load %struct.av*, %struct.av** %av, align 8
  %sv_any321 = getelementptr inbounds %struct.av, %struct.av* %196, i32 0, i32 0
  %197 = load %struct.xpvav*, %struct.xpvav** %sv_any321, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %197, i32 0, i32 1
  %198 = load i64, i64* %xav_fill, align 8
  br label %cond.end.322

cond.end.322:                                     ; preds = %cond.false.320, %cond.true.317
  %cond323 = phi i64 [ %conv319, %cond.true.317 ], [ %198, %cond.false.320 ]
  %add = add nsw i64 %cond323, 1
  %conv324 = trunc i64 %add to i32
  store i32 %conv324, i32* %maxarg, align 4
  %199 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr325 = getelementptr inbounds %struct.sv*, %struct.sv** %199, i32 -1
  store %struct.sv** %incdec.ptr325, %struct.sv*** %sp, align 8
  %200 = load %struct.sv*, %struct.sv** %199, align 8
  %201 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %202 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %201 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %202 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %203 = load i32, i32* %maxarg, align 4
  %conv326 = sext i32 %203 to i64
  %cmp327 = icmp slt i64 %sub.ptr.div, %conv326
  br i1 %cmp327, label %if.then.329, label %if.end.331

if.then.329:                                      ; preds = %cond.end.322
  %204 = load %struct.sv**, %struct.sv*** %sp, align 8
  %205 = load %struct.sv**, %struct.sv*** %sp, align 8
  %206 = load i32, i32* %maxarg, align 4
  %call330 = call %struct.sv** @Perl_stack_grow(%struct.sv** %204, %struct.sv** %205, i32 %206)
  store %struct.sv** %call330, %struct.sv*** %sp, align 8
  br label %if.end.331

if.end.331:                                       ; preds = %if.then.329, %cond.end.322
  %207 = load %struct.av*, %struct.av** %av, align 8
  %sv_flags332 = getelementptr inbounds %struct.av, %struct.av* %207, i32 0, i32 2
  %208 = load i32, i32* %sv_flags332, align 4
  %and333 = and i32 %208, 32768
  %tobool334 = icmp ne i32 %and333, 0
  br i1 %tobool334, label %if.then.335, label %if.else.354

if.then.335:                                      ; preds = %if.end.331
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.335
  %209 = load i32, i32* %i, align 4
  %210 = load i32, i32* %maxarg, align 4
  %cmp336 = icmp ult i32 %209, %210
  br i1 %cmp336, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %211 = load %struct.av*, %struct.av** %av, align 8
  %212 = load i32, i32* %i, align 4
  %call338 = call %struct.sv** @Perl_av_fetch(%struct.av* %211, i32 %212, i32 0)
  store %struct.sv** %call338, %struct.sv*** %svp, align 8
  %213 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool339 = icmp ne %struct.sv** %213, null
  br i1 %tobool339, label %cond.true.340, label %cond.false.349

cond.true.340:                                    ; preds = %for.body
  %214 = load %struct.sv**, %struct.sv*** %svp, align 8
  %215 = load %struct.sv*, %struct.sv** %214, align 8
  %sv_flags341 = getelementptr inbounds %struct.sv, %struct.sv* %215, i32 0, i32 2
  %216 = load i32, i32* %sv_flags341, align 4
  %and342 = and i32 %216, 8192
  %tobool343 = icmp ne i32 %and342, 0
  br i1 %tobool343, label %cond.true.344, label %cond.false.346

cond.true.344:                                    ; preds = %cond.true.340
  %217 = load %struct.sv**, %struct.sv*** %svp, align 8
  %218 = load %struct.sv*, %struct.sv** %217, align 8
  %call345 = call %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %218)
  br label %cond.end.347

cond.false.346:                                   ; preds = %cond.true.340
  %219 = load %struct.sv**, %struct.sv*** %svp, align 8
  %220 = load %struct.sv*, %struct.sv** %219, align 8
  br label %cond.end.347

cond.end.347:                                     ; preds = %cond.false.346, %cond.true.344
  %cond348 = phi %struct.sv* [ %call345, %cond.true.344 ], [ %220, %cond.false.346 ]
  br label %cond.end.350

cond.false.349:                                   ; preds = %for.body
  br label %cond.end.350

cond.end.350:                                     ; preds = %cond.false.349, %cond.end.347
  %cond351 = phi %struct.sv* [ %cond348, %cond.end.347 ], [ @PL_sv_undef, %cond.false.349 ]
  %221 = load i32, i32* %i, align 4
  %add352 = add i32 %221, 1
  %idxprom = zext i32 %add352 to i64
  %222 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx353 = getelementptr inbounds %struct.sv*, %struct.sv** %222, i64 %idxprom
  store %struct.sv* %cond351, %struct.sv** %arrayidx353, align 8
  br label %for.inc

for.inc:                                          ; preds = %cond.end.350
  %223 = load i32, i32* %i, align 4
  %inc = add i32 %223, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.357

if.else.354:                                      ; preds = %if.end.331
  %224 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %224, i64 1
  %225 = bitcast %struct.sv** %add.ptr to i8*
  %226 = load %struct.av*, %struct.av** %av, align 8
  %sv_any355 = getelementptr inbounds %struct.av, %struct.av* %226, i32 0, i32 0
  %227 = load %struct.xpvav*, %struct.xpvav** %sv_any355, align 8
  %xav_array = getelementptr inbounds %struct.xpvav, %struct.xpvav* %227, i32 0, i32 0
  %228 = load i8*, i8** %xav_array, align 8
  %229 = bitcast i8* %228 to %struct.sv**
  %230 = bitcast %struct.sv** %229 to i8*
  %231 = load i32, i32* %maxarg, align 4
  %conv356 = sext i32 %231 to i64
  %mul = mul i64 %conv356, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %225, i8* %230, i64 %mul, i32 1, i1 false)
  br label %if.end.357

if.end.357:                                       ; preds = %if.else.354, %for.end
  %232 = load i32, i32* %maxarg, align 4
  %233 = load %struct.sv**, %struct.sv*** %sp, align 8
  %idx.ext = sext i32 %232 to i64
  %add.ptr358 = getelementptr inbounds %struct.sv*, %struct.sv** %233, i64 %idx.ext
  store %struct.sv** %add.ptr358, %struct.sv*** %sp, align 8
  br label %if.end.414

if.else.359:                                      ; preds = %cond.end.309
  %234 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags360 = getelementptr inbounds %struct.op, %struct.op* %234, i32 0, i32 6
  %235 = load i8, i8* %op_flags360, align 1
  %conv361 = zext i8 %235 to i32
  %and362 = and i32 %conv361, 3
  %cmp363 = icmp eq i32 %and362, 1
  br i1 %cmp363, label %cond.true.365, label %cond.false.366

cond.true.365:                                    ; preds = %if.else.359
  br label %cond.end.386

cond.false.366:                                   ; preds = %if.else.359
  %236 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags367 = getelementptr inbounds %struct.op, %struct.op* %236, i32 0, i32 6
  %237 = load i8, i8* %op_flags367, align 1
  %conv368 = zext i8 %237 to i32
  %and369 = and i32 %conv368, 3
  %cmp370 = icmp eq i32 %and369, 2
  br i1 %cmp370, label %cond.true.372, label %cond.false.373

cond.true.372:                                    ; preds = %cond.false.366
  br label %cond.end.384

cond.false.373:                                   ; preds = %cond.false.366
  %238 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags374 = getelementptr inbounds %struct.op, %struct.op* %238, i32 0, i32 6
  %239 = load i8, i8* %op_flags374, align 1
  %conv375 = zext i8 %239 to i32
  %and376 = and i32 %conv375, 3
  %cmp377 = icmp eq i32 %and376, 3
  br i1 %cmp377, label %cond.true.379, label %cond.false.380

cond.true.379:                                    ; preds = %cond.false.373
  br label %cond.end.382

cond.false.380:                                   ; preds = %cond.false.373
  %call381 = call i32 @Perl_block_gimme()
  br label %cond.end.382

cond.end.382:                                     ; preds = %cond.false.380, %cond.true.379
  %cond383 = phi i32 [ 1, %cond.true.379 ], [ %call381, %cond.false.380 ]
  br label %cond.end.384

cond.end.384:                                     ; preds = %cond.end.382, %cond.true.372
  %cond385 = phi i32 [ 0, %cond.true.372 ], [ %cond383, %cond.end.382 ]
  br label %cond.end.386

cond.end.386:                                     ; preds = %cond.end.384, %cond.true.365
  %cond387 = phi i32 [ 128, %cond.true.365 ], [ %cond385, %cond.end.384 ]
  %cmp388 = icmp eq i32 %cond387, 0
  br i1 %cmp388, label %if.then.390, label %if.end.413

if.then.390:                                      ; preds = %cond.end.386
  %240 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %240, i32 0, i32 3
  %241 = load i64, i64* %op_targ, align 8
  %242 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %arrayidx391 = getelementptr inbounds %struct.sv*, %struct.sv** %242, i64 %241
  %243 = load %struct.sv*, %struct.sv** %arrayidx391, align 8
  store %struct.sv* %243, %struct.sv** %targ, align 8
  %244 = load %struct.av*, %struct.av** %av, align 8
  %245 = bitcast %struct.av* %244 to %struct.sv*
  %sv_flags393 = getelementptr inbounds %struct.sv, %struct.sv* %245, i32 0, i32 2
  %246 = load i32, i32* %sv_flags393, align 4
  %and394 = and i32 %246, 32768
  %tobool395 = icmp ne i32 %and394, 0
  br i1 %tobool395, label %cond.true.396, label %cond.false.399

cond.true.396:                                    ; preds = %if.then.390
  %247 = load %struct.av*, %struct.av** %av, align 8
  %248 = bitcast %struct.av* %247 to %struct.sv*
  %call397 = call i32 @Perl_mg_size(%struct.sv* %248)
  %conv398 = sext i32 %call397 to i64
  br label %cond.end.402

cond.false.399:                                   ; preds = %if.then.390
  %249 = load %struct.av*, %struct.av** %av, align 8
  %sv_any400 = getelementptr inbounds %struct.av, %struct.av* %249, i32 0, i32 0
  %250 = load %struct.xpvav*, %struct.xpvav** %sv_any400, align 8
  %xav_fill401 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %250, i32 0, i32 1
  %251 = load i64, i64* %xav_fill401, align 8
  br label %cond.end.402

cond.end.402:                                     ; preds = %cond.false.399, %cond.true.396
  %cond403 = phi i64 [ %conv398, %cond.true.396 ], [ %251, %cond.false.399 ]
  %add404 = add nsw i64 %cond403, 1
  %conv405 = trunc i64 %add404 to i32
  store i32 %conv405, i32* %maxarg392, align 4
  %252 = load %struct.sv*, %struct.sv** %targ, align 8
  %253 = load i32, i32* %maxarg392, align 4
  %conv406 = sext i32 %253 to i64
  call void @Perl_sv_setiv(%struct.sv* %252, i64 %conv406)
  %254 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags407 = getelementptr inbounds %struct.sv, %struct.sv* %254, i32 0, i32 2
  %255 = load i32, i32* %sv_flags407, align 4
  %and408 = and i32 %255, 16384
  %tobool409 = icmp ne i32 %and408, 0
  br i1 %tobool409, label %if.then.410, label %if.end.412

if.then.410:                                      ; preds = %cond.end.402
  %256 = load %struct.sv*, %struct.sv** %targ, align 8
  %call411 = call i32 @Perl_mg_set(%struct.sv* %256)
  br label %if.end.412

if.end.412:                                       ; preds = %if.then.410, %cond.end.402
  %257 = load %struct.sv*, %struct.sv** %targ, align 8
  %258 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %257, %struct.sv** %258, align 8
  store %struct.sv* %257, %struct.sv** %tmp
  %259 = load %struct.sv*, %struct.sv** %tmp
  br label %if.end.413

if.end.413:                                       ; preds = %if.end.412, %cond.end.386
  br label %if.end.414

if.end.414:                                       ; preds = %if.end.413, %if.end.357
  %260 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %260, %struct.sv*** @PL_stack_sp, align 8
  %261 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next415 = getelementptr inbounds %struct.op, %struct.op* %261, i32 0, i32 0
  %262 = load %struct.op*, %struct.op** %op_next415, align 8
  store %struct.op* %262, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.end.414, %if.end.290, %if.then.261, %if.then.230, %if.then.222, %if.end.189, %if.then.187, %if.then.140, %if.end.107, %if.then.78, %if.end.52, %if.then.30, %if.then.25
  %263 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %263
}

declare void @Perl_croak(i8*, ...) #1

declare i32 @Perl_is_lvalue_sub() #1

declare i32 @Perl_dowantarray() #1

declare void @Perl_report_uninit() #1

declare %struct.gv* @Perl_gv_fetchpv(i8*, i32, i32) #1

declare signext i8 @Perl_is_gv_magical(i8*, i64, i32) #1

declare %struct.gv* @Perl_gv_AVadd(%struct.gv*) #1

declare %struct.av* @Perl_save_ary(%struct.gv*) #1

declare i32 @Perl_mg_size(%struct.sv*) #1

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #2

declare i32 @Perl_block_gimme() #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_rv2hv() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  %hv = alloca %struct.hv*, align 8
  %gimme = alloca i32, align 4
  %tmpsv = alloca %struct.sv*, align 8
  %arg = alloca %struct.sv*, align 8
  %gv = alloca %struct.gv*, align 8
  %sym = alloca i8*, align 8
  %len = alloca i64, align 8
  %targ = alloca %struct.sv*, align 8
  %tmp = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** %sv, align 8
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 6
  %4 = load i8, i8* %op_flags, align 1
  %conv = zext i8 %4 to i32
  %and = and i32 %conv, 3
  %cmp = icmp eq i32 %and, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end.18

cond.false:                                       ; preds = %entry
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags2 = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 6
  %6 = load i8, i8* %op_flags2, align 1
  %conv3 = zext i8 %6 to i32
  %and4 = and i32 %conv3, 3
  %cmp5 = icmp eq i32 %and4, 2
  br i1 %cmp5, label %cond.true.7, label %cond.false.8

cond.true.7:                                      ; preds = %cond.false
  br label %cond.end.16

cond.false.8:                                     ; preds = %cond.false
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags9 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 6
  %8 = load i8, i8* %op_flags9, align 1
  %conv10 = zext i8 %8 to i32
  %and11 = and i32 %conv10, 3
  %cmp12 = icmp eq i32 %and11, 3
  br i1 %cmp12, label %cond.true.14, label %cond.false.15

cond.true.14:                                     ; preds = %cond.false.8
  br label %cond.end

cond.false.15:                                    ; preds = %cond.false.8
  %call = call i32 @Perl_block_gimme()
  br label %cond.end

cond.end:                                         ; preds = %cond.false.15, %cond.true.14
  %cond = phi i32 [ 1, %cond.true.14 ], [ %call, %cond.false.15 ]
  br label %cond.end.16

cond.end.16:                                      ; preds = %cond.end, %cond.true.7
  %cond17 = phi i32 [ 0, %cond.true.7 ], [ %cond, %cond.end ]
  br label %cond.end.18

cond.end.18:                                      ; preds = %cond.end.16, %cond.true
  %cond19 = phi i32 [ 128, %cond.true ], [ %cond17, %cond.end.16 ]
  store i32 %cond19, i32* %gimme, align 4
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags, align 4
  %and20 = and i32 %10, 524288
  %tobool = icmp ne i32 %and20, 0
  br i1 %tobool, label %if.then, label %if.else.89

if.then:                                          ; preds = %cond.end.18
  br label %wasref

wasref:                                           ; preds = %if.then.135, %if.then
  %11 = load i64, i64* @PL_amagic_generation, align 8
  %tobool21 = icmp ne i64 %11, 0
  br i1 %tobool21, label %if.then.22, label %if.end.43

if.then.22:                                       ; preds = %wasref
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %12, i64 0
  %13 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %13, %struct.sv** %arg, align 8
  br label %am_again

am_again:                                         ; preds = %if.then.40, %if.then.22
  %14 = load %struct.sv*, %struct.sv** %arg, align 8
  %sv_flags23 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags23, align 4
  %and24 = and i32 %15, 268435456
  %tobool25 = icmp ne i32 %and24, 0
  br i1 %tobool25, label %land.lhs.true, label %if.end.42

land.lhs.true:                                    ; preds = %am_again
  %16 = load %struct.sv*, %struct.sv** %arg, align 8
  %call26 = call %struct.sv* @Perl_amagic_call(%struct.sv* %16, %struct.sv* @PL_sv_undef, i32 60, i32 9)
  store %struct.sv* %call26, %struct.sv** %tmpsv, align 8
  %tobool27 = icmp ne %struct.sv* %call26, null
  br i1 %tobool27, label %if.then.28, label %if.end.42

if.then.28:                                       ; preds = %land.lhs.true
  %17 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %17, %struct.sv*** %sp, align 8
  %18 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  store %struct.sv* %18, %struct.sv** %sv, align 8
  %19 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_flags29 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags29, align 4
  %and30 = and i32 %20, 524288
  %tobool31 = icmp ne i32 %and30, 0
  br i1 %tobool31, label %if.end, label %if.then.32

if.then.32:                                       ; preds = %if.then.28
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then.32, %if.then.28
  %21 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %22 = load %struct.sv*, %struct.sv** %arg, align 8
  %cmp33 = icmp ne %struct.sv* %21, %22
  br i1 %cmp33, label %land.lhs.true.35, label %if.end.41

land.lhs.true.35:                                 ; preds = %if.end
  %23 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 0
  %24 = load i8*, i8** %sv_any, align 8
  %25 = bitcast i8* %24 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %25, i32 0, i32 0
  %26 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  %27 = load %struct.sv*, %struct.sv** %arg, align 8
  %sv_any36 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 0
  %28 = load i8*, i8** %sv_any36, align 8
  %29 = bitcast i8* %28 to %struct.xrv*
  %xrv_rv37 = getelementptr inbounds %struct.xrv, %struct.xrv* %29, i32 0, i32 0
  %30 = load %struct.sv*, %struct.sv** %xrv_rv37, align 8
  %cmp38 = icmp ne %struct.sv* %26, %30
  br i1 %cmp38, label %if.then.40, label %if.end.41

if.then.40:                                       ; preds = %land.lhs.true.35
  %31 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  store %struct.sv* %31, %struct.sv** %arg, align 8
  br label %am_again

if.end.41:                                        ; preds = %land.lhs.true.35, %if.end
  br label %if.end.42

if.end.42:                                        ; preds = %if.end.41, %land.lhs.true, %am_again
  br label %if.end.43

if.end.43:                                        ; preds = %if.end.42, %wasref
  %32 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any44 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 0
  %33 = load i8*, i8** %sv_any44, align 8
  %34 = bitcast i8* %33 to %struct.xrv*
  %xrv_rv45 = getelementptr inbounds %struct.xrv, %struct.xrv* %34, i32 0, i32 0
  %35 = load %struct.sv*, %struct.sv** %xrv_rv45, align 8
  %36 = bitcast %struct.sv* %35 to %struct.hv*
  store %struct.hv* %36, %struct.hv** %hv, align 8
  %37 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_flags46 = getelementptr inbounds %struct.hv, %struct.hv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags46, align 4
  %and47 = and i32 %38, 255
  %cmp48 = icmp ne i32 %and47, 11
  br i1 %cmp48, label %land.lhs.true.50, label %if.end.57

land.lhs.true.50:                                 ; preds = %if.end.43
  %39 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_flags51 = getelementptr inbounds %struct.hv, %struct.hv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags51, align 4
  %and52 = and i32 %40, 255
  %cmp53 = icmp ne i32 %and52, 10
  br i1 %cmp53, label %if.then.55, label %if.end.57

if.then.55:                                       ; preds = %land.lhs.true.50
  %call56 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i32 0, i32 0))
  store %struct.op* %call56, %struct.op** %retval
  br label %return

if.end.57:                                        ; preds = %land.lhs.true.50, %if.end.43
  %41 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags58 = getelementptr inbounds %struct.op, %struct.op* %41, i32 0, i32 6
  %42 = load i8, i8* %op_flags58, align 1
  %conv59 = zext i8 %42 to i32
  %and60 = and i32 %conv59, 16
  %tobool61 = icmp ne i32 %and60, 0
  br i1 %tobool61, label %if.then.62, label %if.else

if.then.62:                                       ; preds = %if.end.57
  %43 = load %struct.hv*, %struct.hv** %hv, align 8
  %44 = bitcast %struct.hv* %43 to %struct.sv*
  %45 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %44, %struct.sv** %45, align 8
  %46 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %46, %struct.sv*** @PL_stack_sp, align 8
  %47 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %47, i32 0, i32 0
  %48 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %48, %struct.op** %retval
  br label %return

if.else:                                          ; preds = %if.end.57
  %49 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %49, i32 0, i32 7
  %50 = load i8, i8* %op_private, align 1
  %conv63 = zext i8 %50 to i32
  %and64 = and i32 %conv63, 8
  %tobool65 = icmp ne i32 %and64, 0
  br i1 %tobool65, label %land.lhs.true.66, label %if.else.75

land.lhs.true.66:                                 ; preds = %if.else
  %call67 = call i32 @Perl_is_lvalue_sub()
  %tobool68 = icmp ne i32 %call67, 0
  br i1 %tobool68, label %if.then.69, label %if.else.75

if.then.69:                                       ; preds = %land.lhs.true.66
  %51 = load i32, i32* %gimme, align 4
  %cmp70 = icmp ne i32 %51, 1
  br i1 %cmp70, label %if.then.72, label %if.end.73

if.then.72:                                       ; preds = %if.then.69
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end.73

if.end.73:                                        ; preds = %if.then.72, %if.then.69
  %52 = load %struct.hv*, %struct.hv** %hv, align 8
  %53 = bitcast %struct.hv* %52 to %struct.sv*
  %54 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %53, %struct.sv** %54, align 8
  %55 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %55, %struct.sv*** @PL_stack_sp, align 8
  %56 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next74 = getelementptr inbounds %struct.op, %struct.op* %56, i32 0, i32 0
  %57 = load %struct.op*, %struct.op** %op_next74, align 8
  store %struct.op* %57, %struct.op** %retval
  br label %return

if.else.75:                                       ; preds = %land.lhs.true.66, %if.else
  %58 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags76 = getelementptr inbounds %struct.op, %struct.op* %58, i32 0, i32 6
  %59 = load i8, i8* %op_flags76, align 1
  %conv77 = zext i8 %59 to i32
  %and78 = and i32 %conv77, 32
  %tobool79 = icmp ne i32 %and78, 0
  br i1 %tobool79, label %land.lhs.true.80, label %if.end.86

land.lhs.true.80:                                 ; preds = %if.else.75
  %60 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private81 = getelementptr inbounds %struct.op, %struct.op* %60, i32 0, i32 7
  %61 = load i8, i8* %op_private81, align 1
  %conv82 = zext i8 %61 to i32
  %and83 = and i32 %conv82, 128
  %tobool84 = icmp ne i32 %and83, 0
  br i1 %tobool84, label %if.then.85, label %if.end.86

if.then.85:                                       ; preds = %land.lhs.true.80
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_localize_ref, i32 0, i32 0))
  br label %if.end.86

if.end.86:                                        ; preds = %if.then.85, %land.lhs.true.80, %if.else.75
  br label %if.end.87

if.end.87:                                        ; preds = %if.end.86
  br label %if.end.88

if.end.88:                                        ; preds = %if.end.87
  br label %if.end.276

if.else.89:                                       ; preds = %cond.end.18
  %62 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags90 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 2
  %63 = load i32, i32* %sv_flags90, align 4
  %and91 = and i32 %63, 255
  %cmp92 = icmp eq i32 %and91, 11
  br i1 %cmp92, label %if.then.98, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else.89
  %64 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags94 = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 2
  %65 = load i32, i32* %sv_flags94, align 4
  %and95 = and i32 %65, 255
  %cmp96 = icmp eq i32 %and95, 10
  br i1 %cmp96, label %if.then.98, label %if.else.121

if.then.98:                                       ; preds = %lor.lhs.false, %if.else.89
  %66 = load %struct.sv*, %struct.sv** %sv, align 8
  %67 = bitcast %struct.sv* %66 to %struct.hv*
  store %struct.hv* %67, %struct.hv** %hv, align 8
  %68 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags99 = getelementptr inbounds %struct.op, %struct.op* %68, i32 0, i32 6
  %69 = load i8, i8* %op_flags99, align 1
  %conv100 = zext i8 %69 to i32
  %and101 = and i32 %conv100, 16
  %tobool102 = icmp ne i32 %and101, 0
  br i1 %tobool102, label %if.then.103, label %if.else.105

if.then.103:                                      ; preds = %if.then.98
  %70 = load %struct.hv*, %struct.hv** %hv, align 8
  %71 = bitcast %struct.hv* %70 to %struct.sv*
  %72 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %71, %struct.sv** %72, align 8
  %73 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %73, %struct.sv*** @PL_stack_sp, align 8
  %74 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next104 = getelementptr inbounds %struct.op, %struct.op* %74, i32 0, i32 0
  %75 = load %struct.op*, %struct.op** %op_next104, align 8
  store %struct.op* %75, %struct.op** %retval
  br label %return

if.else.105:                                      ; preds = %if.then.98
  %76 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private106 = getelementptr inbounds %struct.op, %struct.op* %76, i32 0, i32 7
  %77 = load i8, i8* %op_private106, align 1
  %conv107 = zext i8 %77 to i32
  %and108 = and i32 %conv107, 8
  %tobool109 = icmp ne i32 %and108, 0
  br i1 %tobool109, label %land.lhs.true.110, label %if.end.119

land.lhs.true.110:                                ; preds = %if.else.105
  %call111 = call i32 @Perl_is_lvalue_sub()
  %tobool112 = icmp ne i32 %call111, 0
  br i1 %tobool112, label %if.then.113, label %if.end.119

if.then.113:                                      ; preds = %land.lhs.true.110
  %78 = load i32, i32* %gimme, align 4
  %cmp114 = icmp ne i32 %78, 1
  br i1 %cmp114, label %if.then.116, label %if.end.117

if.then.116:                                      ; preds = %if.then.113
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end.117

if.end.117:                                       ; preds = %if.then.116, %if.then.113
  %79 = load %struct.hv*, %struct.hv** %hv, align 8
  %80 = bitcast %struct.hv* %79 to %struct.sv*
  %81 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %80, %struct.sv** %81, align 8
  %82 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %82, %struct.sv*** @PL_stack_sp, align 8
  %83 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next118 = getelementptr inbounds %struct.op, %struct.op* %83, i32 0, i32 0
  %84 = load %struct.op*, %struct.op** %op_next118, align 8
  store %struct.op* %84, %struct.op** %retval
  br label %return

if.end.119:                                       ; preds = %land.lhs.true.110, %if.else.105
  br label %if.end.120

if.end.120:                                       ; preds = %if.end.119
  br label %if.end.275

if.else.121:                                      ; preds = %lor.lhs.false
  %85 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags122 = getelementptr inbounds %struct.sv, %struct.sv* %85, i32 0, i32 2
  %86 = load i32, i32* %sv_flags122, align 4
  %and123 = and i32 %86, 255
  %cmp124 = icmp ne i32 %and123, 13
  br i1 %cmp124, label %if.then.126, label %if.else.231

if.then.126:                                      ; preds = %if.else.121
  %87 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags127 = getelementptr inbounds %struct.sv, %struct.sv* %87, i32 0, i32 2
  %88 = load i32, i32* %sv_flags127, align 4
  %and128 = and i32 %88, 8192
  %tobool129 = icmp ne i32 %and128, 0
  br i1 %tobool129, label %if.then.130, label %if.end.137

if.then.130:                                      ; preds = %if.then.126
  %89 = load %struct.sv*, %struct.sv** %sv, align 8
  %call131 = call i32 @Perl_mg_get(%struct.sv* %89)
  %90 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags132 = getelementptr inbounds %struct.sv, %struct.sv* %90, i32 0, i32 2
  %91 = load i32, i32* %sv_flags132, align 4
  %and133 = and i32 %91, 524288
  %tobool134 = icmp ne i32 %and133, 0
  br i1 %tobool134, label %if.then.135, label %if.end.136

if.then.135:                                      ; preds = %if.then.130
  br label %wasref

if.end.136:                                       ; preds = %if.then.130
  br label %if.end.137

if.end.137:                                       ; preds = %if.end.136, %if.then.126
  %92 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags138 = getelementptr inbounds %struct.sv, %struct.sv* %92, i32 0, i32 2
  %93 = load i32, i32* %sv_flags138, align 4
  %and139 = and i32 %93, 118423552
  %tobool140 = icmp ne i32 %and139, 0
  br i1 %tobool140, label %if.end.187, label %if.then.141

if.then.141:                                      ; preds = %if.end.137
  %94 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags142 = getelementptr inbounds %struct.op, %struct.op* %94, i32 0, i32 6
  %95 = load i8, i8* %op_flags142, align 1
  %conv143 = zext i8 %95 to i32
  %and144 = and i32 %conv143, 16
  %tobool145 = icmp ne i32 %and144, 0
  br i1 %tobool145, label %if.then.151, label %lor.lhs.false.146

lor.lhs.false.146:                                ; preds = %if.then.141
  %96 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private147 = getelementptr inbounds %struct.op, %struct.op* %96, i32 0, i32 7
  %97 = load i8, i8* %op_private147, align 1
  %conv148 = zext i8 %97 to i32
  %and149 = and i32 %conv148, 2
  %tobool150 = icmp ne i32 %and149, 0
  br i1 %tobool150, label %if.then.151, label %if.end.153

if.then.151:                                      ; preds = %lor.lhs.false.146, %if.then.141
  %call152 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_usym, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0))
  store %struct.op* %call152, %struct.op** %retval
  br label %return

if.end.153:                                       ; preds = %lor.lhs.false.146
  %98 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %98, i32 0, i32 14
  %99 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp154 = icmp ne %struct.sv* %99, null
  br i1 %cmp154, label %land.lhs.true.156, label %lor.lhs.false.171

land.lhs.true.156:                                ; preds = %if.end.153
  %100 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings157 = getelementptr inbounds %struct.cop, %struct.cop* %100, i32 0, i32 14
  %101 = load %struct.sv*, %struct.sv** %cop_warnings157, align 8
  %cmp158 = icmp ne %struct.sv* %101, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp158, label %land.lhs.true.160, label %lor.lhs.false.171

land.lhs.true.160:                                ; preds = %land.lhs.true.156
  %102 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings161 = getelementptr inbounds %struct.cop, %struct.cop* %102, i32 0, i32 14
  %103 = load %struct.sv*, %struct.sv** %cop_warnings161, align 8
  %cmp162 = icmp eq %struct.sv* %103, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp162, label %if.then.179, label %lor.lhs.false.164

lor.lhs.false.164:                                ; preds = %land.lhs.true.160
  %104 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings165 = getelementptr inbounds %struct.cop, %struct.cop* %104, i32 0, i32 14
  %105 = load %struct.sv*, %struct.sv** %cop_warnings165, align 8
  %sv_any166 = getelementptr inbounds %struct.sv, %struct.sv* %105, i32 0, i32 0
  %106 = load i8*, i8** %sv_any166, align 8
  %107 = bitcast i8* %106 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %107, i32 0, i32 0
  %108 = load i8*, i8** %xpv_pv, align 8
  %arrayidx167 = getelementptr inbounds i8, i8* %108, i64 10
  %109 = load i8, i8* %arrayidx167, align 1
  %conv168 = sext i8 %109 to i32
  %and169 = and i32 %conv168, 4
  %tobool170 = icmp ne i32 %and169, 0
  br i1 %tobool170, label %if.then.179, label %lor.lhs.false.171

lor.lhs.false.171:                                ; preds = %lor.lhs.false.164, %land.lhs.true.156, %if.end.153
  %110 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings172 = getelementptr inbounds %struct.cop, %struct.cop* %110, i32 0, i32 14
  %111 = load %struct.sv*, %struct.sv** %cop_warnings172, align 8
  %cmp173 = icmp eq %struct.sv* %111, null
  br i1 %cmp173, label %land.lhs.true.175, label %if.end.180

land.lhs.true.175:                                ; preds = %lor.lhs.false.171
  %112 = load i8, i8* @PL_dowarn, align 1
  %conv176 = zext i8 %112 to i32
  %and177 = and i32 %conv176, 1
  %tobool178 = icmp ne i32 %and177, 0
  br i1 %tobool178, label %if.then.179, label %if.end.180

if.then.179:                                      ; preds = %land.lhs.true.175, %lor.lhs.false.164, %land.lhs.true.160
  call void @Perl_report_uninit()
  br label %if.end.180

if.end.180:                                       ; preds = %if.then.179, %land.lhs.true.175, %lor.lhs.false.171
  %113 = load i32, i32* %gimme, align 4
  %cmp181 = icmp eq i32 %113, 1
  br i1 %cmp181, label %if.then.183, label %if.end.185

if.then.183:                                      ; preds = %if.end.180
  %114 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %114, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %115 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %115, %struct.sv*** @PL_stack_sp, align 8
  %116 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next184 = getelementptr inbounds %struct.op, %struct.op* %116, i32 0, i32 0
  %117 = load %struct.op*, %struct.op** %op_next184, align 8
  store %struct.op* %117, %struct.op** %retval
  br label %return

if.end.185:                                       ; preds = %if.end.180
  %118 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %118, align 8
  %119 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %119, %struct.sv*** @PL_stack_sp, align 8
  %120 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next186 = getelementptr inbounds %struct.op, %struct.op* %120, i32 0, i32 0
  %121 = load %struct.op*, %struct.op** %op_next186, align 8
  store %struct.op* %121, %struct.op** %retval
  br label %return

if.end.187:                                       ; preds = %if.end.137
  %122 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags188 = getelementptr inbounds %struct.sv, %struct.sv* %122, i32 0, i32 2
  %123 = load i32, i32* %sv_flags188, align 4
  %and189 = and i32 %123, 262144
  %cmp190 = icmp eq i32 %and189, 262144
  br i1 %cmp190, label %cond.true.192, label %cond.false.196

cond.true.192:                                    ; preds = %if.end.187
  %124 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any193 = getelementptr inbounds %struct.sv, %struct.sv* %124, i32 0, i32 0
  %125 = load i8*, i8** %sv_any193, align 8
  %126 = bitcast i8* %125 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %126, i32 0, i32 1
  %127 = load i64, i64* %xpv_cur, align 8
  store i64 %127, i64* %len, align 8
  %128 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any194 = getelementptr inbounds %struct.sv, %struct.sv* %128, i32 0, i32 0
  %129 = load i8*, i8** %sv_any194, align 8
  %130 = bitcast i8* %129 to %struct.xpv*
  %xpv_pv195 = getelementptr inbounds %struct.xpv, %struct.xpv* %130, i32 0, i32 0
  %131 = load i8*, i8** %xpv_pv195, align 8
  br label %cond.end.198

cond.false.196:                                   ; preds = %if.end.187
  %132 = load %struct.sv*, %struct.sv** %sv, align 8
  %call197 = call i8* @Perl_sv_2pv_flags(%struct.sv* %132, i64* %len, i32 2)
  br label %cond.end.198

cond.end.198:                                     ; preds = %cond.false.196, %cond.true.192
  %cond199 = phi i8* [ %131, %cond.true.192 ], [ %call197, %cond.false.196 ]
  store i8* %cond199, i8** %sym, align 8
  %133 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags200 = getelementptr inbounds %struct.op, %struct.op* %133, i32 0, i32 6
  %134 = load i8, i8* %op_flags200, align 1
  %conv201 = zext i8 %134 to i32
  %and202 = and i32 %conv201, 128
  %tobool203 = icmp ne i32 %and202, 0
  br i1 %tobool203, label %land.lhs.true.204, label %if.else.221

land.lhs.true.204:                                ; preds = %cond.end.198
  %135 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags205 = getelementptr inbounds %struct.op, %struct.op* %135, i32 0, i32 6
  %136 = load i8, i8* %op_flags205, align 1
  %conv206 = zext i8 %136 to i32
  %and207 = and i32 %conv206, 32
  %tobool208 = icmp ne i32 %and207, 0
  br i1 %tobool208, label %if.else.221, label %if.then.209

if.then.209:                                      ; preds = %land.lhs.true.204
  %137 = load i8*, i8** %sym, align 8
  %call210 = call %struct.gv* @Perl_gv_fetchpv(i8* %137, i32 0, i32 11)
  store %struct.gv* %call210, %struct.gv** %gv, align 8
  %138 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool211 = icmp ne %struct.gv* %138, null
  br i1 %tobool211, label %if.end.220, label %land.lhs.true.212

land.lhs.true.212:                                ; preds = %if.then.209
  %139 = load i8*, i8** %sym, align 8
  %140 = load i64, i64* %len, align 8
  %call213 = call signext i8 @Perl_is_gv_magical(i8* %139, i64 %140, i32 0)
  %tobool214 = icmp ne i8 %call213, 0
  br i1 %tobool214, label %lor.lhs.false.215, label %if.then.218

lor.lhs.false.215:                                ; preds = %land.lhs.true.212
  %141 = load i8*, i8** %sym, align 8
  %call216 = call %struct.gv* @Perl_gv_fetchpv(i8* %141, i32 1, i32 11)
  store %struct.gv* %call216, %struct.gv** %gv, align 8
  %tobool217 = icmp ne %struct.gv* %call216, null
  br i1 %tobool217, label %if.end.220, label %if.then.218

if.then.218:                                      ; preds = %lor.lhs.false.215, %land.lhs.true.212
  %142 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %142, align 8
  %143 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %143, %struct.sv*** @PL_stack_sp, align 8
  %144 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next219 = getelementptr inbounds %struct.op, %struct.op* %144, i32 0, i32 0
  %145 = load %struct.op*, %struct.op** %op_next219, align 8
  store %struct.op* %145, %struct.op** %retval
  br label %return

if.end.220:                                       ; preds = %lor.lhs.false.215, %if.then.209
  br label %if.end.230

if.else.221:                                      ; preds = %land.lhs.true.204, %cond.end.198
  %146 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private222 = getelementptr inbounds %struct.op, %struct.op* %146, i32 0, i32 7
  %147 = load i8, i8* %op_private222, align 1
  %conv223 = zext i8 %147 to i32
  %and224 = and i32 %conv223, 2
  %tobool225 = icmp ne i32 %and224, 0
  br i1 %tobool225, label %if.then.226, label %if.end.228

if.then.226:                                      ; preds = %if.else.221
  %148 = load i8*, i8** %sym, align 8
  %call227 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_symref, i32 0, i32 0), i8* %148, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0))
  store %struct.op* %call227, %struct.op** %retval
  br label %return

if.end.228:                                       ; preds = %if.else.221
  %149 = load i8*, i8** %sym, align 8
  %call229 = call %struct.gv* @Perl_gv_fetchpv(i8* %149, i32 1, i32 11)
  store %struct.gv* %call229, %struct.gv** %gv, align 8
  br label %if.end.230

if.end.230:                                       ; preds = %if.end.228, %if.end.220
  br label %if.end.232

if.else.231:                                      ; preds = %if.else.121
  %150 = load %struct.sv*, %struct.sv** %sv, align 8
  %151 = bitcast %struct.sv* %150 to %struct.gv*
  store %struct.gv* %151, %struct.gv** %gv, align 8
  br label %if.end.232

if.end.232:                                       ; preds = %if.else.231, %if.end.230
  %152 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any233 = getelementptr inbounds %struct.gv, %struct.gv* %152, i32 0, i32 0
  %153 = load %struct.xpvgv*, %struct.xpvgv** %sv_any233, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %153, i32 0, i32 7
  %154 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %154, i32 0, i32 5
  %155 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  %tobool234 = icmp ne %struct.hv* %155, null
  br i1 %tobool234, label %cond.true.235, label %cond.false.239

cond.true.235:                                    ; preds = %if.end.232
  %156 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any236 = getelementptr inbounds %struct.gv, %struct.gv* %156, i32 0, i32 0
  %157 = load %struct.xpvgv*, %struct.xpvgv** %sv_any236, align 8
  %xgv_gp237 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %157, i32 0, i32 7
  %158 = load %struct.gp*, %struct.gp** %xgv_gp237, align 8
  %gp_hv238 = getelementptr inbounds %struct.gp, %struct.gp* %158, i32 0, i32 5
  %159 = load %struct.hv*, %struct.hv** %gp_hv238, align 8
  br label %cond.end.244

cond.false.239:                                   ; preds = %if.end.232
  %160 = load %struct.gv*, %struct.gv** %gv, align 8
  %call240 = call %struct.gv* @Perl_gv_HVadd(%struct.gv* %160)
  %sv_any241 = getelementptr inbounds %struct.gv, %struct.gv* %call240, i32 0, i32 0
  %161 = load %struct.xpvgv*, %struct.xpvgv** %sv_any241, align 8
  %xgv_gp242 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %161, i32 0, i32 7
  %162 = load %struct.gp*, %struct.gp** %xgv_gp242, align 8
  %gp_hv243 = getelementptr inbounds %struct.gp, %struct.gp* %162, i32 0, i32 5
  %163 = load %struct.hv*, %struct.hv** %gp_hv243, align 8
  br label %cond.end.244

cond.end.244:                                     ; preds = %cond.false.239, %cond.true.235
  %cond245 = phi %struct.hv* [ %159, %cond.true.235 ], [ %163, %cond.false.239 ]
  store %struct.hv* %cond245, %struct.hv** %hv, align 8
  %164 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private246 = getelementptr inbounds %struct.op, %struct.op* %164, i32 0, i32 7
  %165 = load i8, i8* %op_private246, align 1
  %conv247 = zext i8 %165 to i32
  %and248 = and i32 %conv247, 128
  %tobool249 = icmp ne i32 %and248, 0
  br i1 %tobool249, label %if.then.250, label %if.end.252

if.then.250:                                      ; preds = %cond.end.244
  %166 = load %struct.gv*, %struct.gv** %gv, align 8
  %call251 = call %struct.hv* @Perl_save_hash(%struct.gv* %166)
  store %struct.hv* %call251, %struct.hv** %hv, align 8
  br label %if.end.252

if.end.252:                                       ; preds = %if.then.250, %cond.end.244
  %167 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags253 = getelementptr inbounds %struct.op, %struct.op* %167, i32 0, i32 6
  %168 = load i8, i8* %op_flags253, align 1
  %conv254 = zext i8 %168 to i32
  %and255 = and i32 %conv254, 16
  %tobool256 = icmp ne i32 %and255, 0
  br i1 %tobool256, label %if.then.257, label %if.else.259

if.then.257:                                      ; preds = %if.end.252
  %169 = load %struct.hv*, %struct.hv** %hv, align 8
  %170 = bitcast %struct.hv* %169 to %struct.sv*
  %171 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %170, %struct.sv** %171, align 8
  %172 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %172, %struct.sv*** @PL_stack_sp, align 8
  %173 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next258 = getelementptr inbounds %struct.op, %struct.op* %173, i32 0, i32 0
  %174 = load %struct.op*, %struct.op** %op_next258, align 8
  store %struct.op* %174, %struct.op** %retval
  br label %return

if.else.259:                                      ; preds = %if.end.252
  %175 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private260 = getelementptr inbounds %struct.op, %struct.op* %175, i32 0, i32 7
  %176 = load i8, i8* %op_private260, align 1
  %conv261 = zext i8 %176 to i32
  %and262 = and i32 %conv261, 8
  %tobool263 = icmp ne i32 %and262, 0
  br i1 %tobool263, label %land.lhs.true.264, label %if.end.273

land.lhs.true.264:                                ; preds = %if.else.259
  %call265 = call i32 @Perl_is_lvalue_sub()
  %tobool266 = icmp ne i32 %call265, 0
  br i1 %tobool266, label %if.then.267, label %if.end.273

if.then.267:                                      ; preds = %land.lhs.true.264
  %177 = load i32, i32* %gimme, align 4
  %cmp268 = icmp ne i32 %177, 1
  br i1 %cmp268, label %if.then.270, label %if.end.271

if.then.270:                                      ; preds = %if.then.267
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end.271

if.end.271:                                       ; preds = %if.then.270, %if.then.267
  %178 = load %struct.hv*, %struct.hv** %hv, align 8
  %179 = bitcast %struct.hv* %178 to %struct.sv*
  %180 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %179, %struct.sv** %180, align 8
  %181 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %181, %struct.sv*** @PL_stack_sp, align 8
  %182 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next272 = getelementptr inbounds %struct.op, %struct.op* %182, i32 0, i32 0
  %183 = load %struct.op*, %struct.op** %op_next272, align 8
  store %struct.op* %183, %struct.op** %retval
  br label %return

if.end.273:                                       ; preds = %land.lhs.true.264, %if.else.259
  br label %if.end.274

if.end.274:                                       ; preds = %if.end.273
  br label %if.end.275

if.end.275:                                       ; preds = %if.end.274, %if.end.120
  br label %if.end.276

if.end.276:                                       ; preds = %if.end.275, %if.end.88
  %184 = load i32, i32* %gimme, align 4
  %cmp277 = icmp eq i32 %184, 1
  br i1 %cmp277, label %if.then.279, label %if.else.281

if.then.279:                                      ; preds = %if.end.276
  %185 = load %struct.hv*, %struct.hv** %hv, align 8
  %186 = bitcast %struct.hv* %185 to %struct.sv*
  %187 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv* %186, %struct.sv** %187, align 8
  %call280 = call %struct.op* @Perl_do_kv()
  store %struct.op* %call280, %struct.op** %retval
  br label %return

if.else.281:                                      ; preds = %if.end.276
  %188 = load i32, i32* %gimme, align 4
  %cmp282 = icmp eq i32 %188, 0
  br i1 %cmp282, label %if.then.284, label %if.end.300

if.then.284:                                      ; preds = %if.else.281
  %189 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %189, i32 0, i32 3
  %190 = load i64, i64* %op_targ, align 8
  %191 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %arrayidx285 = getelementptr inbounds %struct.sv*, %struct.sv** %191, i64 %190
  %192 = load %struct.sv*, %struct.sv** %arrayidx285, align 8
  store %struct.sv* %192, %struct.sv** %targ, align 8
  %193 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_flags286 = getelementptr inbounds %struct.hv, %struct.hv* %193, i32 0, i32 2
  %194 = load i32, i32* %sv_flags286, align 4
  %and287 = and i32 %194, 255
  %cmp288 = icmp eq i32 %and287, 10
  br i1 %cmp288, label %if.then.290, label %if.end.292

if.then.290:                                      ; preds = %if.then.284
  %195 = load %struct.hv*, %struct.hv** %hv, align 8
  %196 = bitcast %struct.hv* %195 to %struct.av*
  %call291 = call %struct.hv* @Perl_avhv_keys(%struct.av* %196)
  store %struct.hv* %call291, %struct.hv** %hv, align 8
  br label %if.end.292

if.end.292:                                       ; preds = %if.then.290, %if.then.284
  %197 = load %struct.hv*, %struct.hv** %hv, align 8
  %call293 = call %struct.sv* @Perl_hv_scalar(%struct.hv* %197)
  store %struct.sv* %call293, %struct.sv** %targ, align 8
  %198 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags294 = getelementptr inbounds %struct.sv, %struct.sv* %198, i32 0, i32 2
  %199 = load i32, i32* %sv_flags294, align 4
  %and295 = and i32 %199, 16384
  %tobool296 = icmp ne i32 %and295, 0
  br i1 %tobool296, label %if.then.297, label %if.end.299

if.then.297:                                      ; preds = %if.end.292
  %200 = load %struct.sv*, %struct.sv** %targ, align 8
  %call298 = call i32 @Perl_mg_set(%struct.sv* %200)
  br label %if.end.299

if.end.299:                                       ; preds = %if.then.297, %if.end.292
  %201 = load %struct.sv*, %struct.sv** %targ, align 8
  %202 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %201, %struct.sv** %202, align 8
  store %struct.sv* %201, %struct.sv** %tmp
  %203 = load %struct.sv*, %struct.sv** %tmp
  br label %if.end.300

if.end.300:                                       ; preds = %if.end.299, %if.else.281
  br label %if.end.301

if.end.301:                                       ; preds = %if.end.300
  %204 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %204, %struct.sv*** @PL_stack_sp, align 8
  %205 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next302 = getelementptr inbounds %struct.op, %struct.op* %205, i32 0, i32 0
  %206 = load %struct.op*, %struct.op** %op_next302, align 8
  store %struct.op* %206, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.end.301, %if.then.279, %if.end.271, %if.then.257, %if.then.226, %if.then.218, %if.end.185, %if.then.183, %if.then.151, %if.end.117, %if.then.103, %if.end.73, %if.then.62, %if.then.55
  %207 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %207
}

declare %struct.gv* @Perl_gv_HVadd(%struct.gv*) #1

declare %struct.hv* @Perl_save_hash(%struct.gv*) #1

declare %struct.op* @Perl_do_kv() #1

declare %struct.hv* @Perl_avhv_keys(%struct.av*) #1

declare %struct.sv* @Perl_hv_scalar(%struct.hv*) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_aassign() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %lastlelem = alloca %struct.sv**, align 8
  %lastrelem = alloca %struct.sv**, align 8
  %firstrelem = alloca %struct.sv**, align 8
  %firstlelem = alloca %struct.sv**, align 8
  %relem = alloca %struct.sv**, align 8
  %lelem = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  %ary = alloca %struct.av*, align 8
  %gimme = alloca i32, align 4
  %hash = alloca %struct.hv*, align 8
  %i = alloca i32, align 4
  %magic = alloca i32, align 4
  %duplicates = alloca i32, align 4
  %firsthashrelem = alloca %struct.sv**, align 8
  %didstore = alloca %struct.sv**, align 8
  %tmpstr = alloca %struct.sv*, align 8
  %didstore99 = alloca %struct.he*, align 8
  %targ = alloca %struct.sv*, align 8
  %tmp = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %1, %struct.sv*** %lastlelem, align 8
  %2 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %3 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %3, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %4 = load i32, i32* %3, align 4
  %idx.ext = sext i32 %4 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %2, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %lastrelem, align 8
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %6 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr1 = getelementptr inbounds i32, i32* %6, i32 -1
  store i32* %incdec.ptr1, i32** @PL_markstack_ptr, align 8
  %7 = load i32, i32* %6, align 4
  %idx.ext2 = sext i32 %7 to i64
  %add.ptr3 = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 %idx.ext2
  %add.ptr4 = getelementptr inbounds %struct.sv*, %struct.sv** %add.ptr3, i64 1
  store %struct.sv** %add.ptr4, %struct.sv*** %firstrelem, align 8
  %8 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  %add.ptr5 = getelementptr inbounds %struct.sv*, %struct.sv** %8, i64 1
  store %struct.sv** %add.ptr5, %struct.sv*** %firstlelem, align 8
  store i32 0, i32* %duplicates, align 4
  store %struct.sv** null, %struct.sv*** %firsthashrelem, align 8
  store i32 256, i32* @PL_delaymagic, align 4
  %9 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 6
  %10 = load i8, i8* %op_flags, align 1
  %conv = zext i8 %10 to i32
  %and = and i32 %conv, 3
  %cmp = icmp eq i32 %and, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end.23

cond.false:                                       ; preds = %entry
  %11 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags7 = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 6
  %12 = load i8, i8* %op_flags7, align 1
  %conv8 = zext i8 %12 to i32
  %and9 = and i32 %conv8, 3
  %cmp10 = icmp eq i32 %and9, 2
  br i1 %cmp10, label %cond.true.12, label %cond.false.13

cond.true.12:                                     ; preds = %cond.false
  br label %cond.end.21

cond.false.13:                                    ; preds = %cond.false
  %13 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags14 = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 6
  %14 = load i8, i8* %op_flags14, align 1
  %conv15 = zext i8 %14 to i32
  %and16 = and i32 %conv15, 3
  %cmp17 = icmp eq i32 %and16, 3
  br i1 %cmp17, label %cond.true.19, label %cond.false.20

cond.true.19:                                     ; preds = %cond.false.13
  br label %cond.end

cond.false.20:                                    ; preds = %cond.false.13
  %call = call i32 @Perl_block_gimme()
  br label %cond.end

cond.end:                                         ; preds = %cond.false.20, %cond.true.19
  %cond = phi i32 [ 1, %cond.true.19 ], [ %call, %cond.false.20 ]
  br label %cond.end.21

cond.end.21:                                      ; preds = %cond.end, %cond.true.12
  %cond22 = phi i32 [ 0, %cond.true.12 ], [ %cond, %cond.end ]
  br label %cond.end.23

cond.end.23:                                      ; preds = %cond.end.21, %cond.true
  %cond24 = phi i32 [ 128, %cond.true ], [ %cond22, %cond.end.21 ]
  store i32 %cond24, i32* %gimme, align 4
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 7
  %16 = load i8, i8* %op_private, align 1
  %conv25 = zext i8 %16 to i32
  %and26 = and i32 %conv25, 64
  %tobool = icmp ne i32 %and26, 0
  br i1 %tobool, label %if.then, label %if.end.46

if.then:                                          ; preds = %cond.end.23
  %17 = load i32, i32* @PL_tmps_ix, align 4
  %conv27 = sext i32 %17 to i64
  %18 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  %19 = load %struct.sv**, %struct.sv*** %firstrelem, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %18 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %19 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %add = add nsw i64 %sub.ptr.div, 1
  %add28 = add nsw i64 %conv27, %add
  %20 = load i32, i32* @PL_tmps_max, align 4
  %conv29 = sext i32 %20 to i64
  %cmp30 = icmp sge i64 %add28, %conv29
  br i1 %cmp30, label %if.then.32, label %if.end

if.then.32:                                       ; preds = %if.then
  %21 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  %22 = load %struct.sv**, %struct.sv*** %firstrelem, align 8
  %sub.ptr.lhs.cast33 = ptrtoint %struct.sv** %21 to i64
  %sub.ptr.rhs.cast34 = ptrtoint %struct.sv** %22 to i64
  %sub.ptr.sub35 = sub i64 %sub.ptr.lhs.cast33, %sub.ptr.rhs.cast34
  %sub.ptr.div36 = sdiv exact i64 %sub.ptr.sub35, 8
  %add37 = add nsw i64 %sub.ptr.div36, 1
  %conv38 = trunc i64 %add37 to i32
  call void @Perl_tmps_grow(i32 %conv38)
  br label %if.end

if.end:                                           ; preds = %if.then.32, %if.then
  %23 = load %struct.sv**, %struct.sv*** %firstrelem, align 8
  store %struct.sv** %23, %struct.sv*** %relem, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %24 = load %struct.sv**, %struct.sv*** %relem, align 8
  %25 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  %cmp39 = icmp ule %struct.sv** %24, %25
  br i1 %cmp39, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %26 = load %struct.sv**, %struct.sv*** %relem, align 8
  %27 = load %struct.sv*, %struct.sv** %26, align 8
  store %struct.sv* %27, %struct.sv** %sv, align 8
  %tobool41 = icmp ne %struct.sv* %27, null
  br i1 %tobool41, label %if.then.42, label %if.end.44

if.then.42:                                       ; preds = %for.body
  store i8 0, i8* @PL_tainted, align 1
  %28 = load %struct.sv*, %struct.sv** %sv, align 8
  %call43 = call %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %28)
  %29 = load %struct.sv**, %struct.sv*** %relem, align 8
  store %struct.sv* %call43, %struct.sv** %29, align 8
  br label %if.end.44

if.end.44:                                        ; preds = %if.then.42, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.44
  %30 = load %struct.sv**, %struct.sv*** %relem, align 8
  %incdec.ptr45 = getelementptr inbounds %struct.sv*, %struct.sv** %30, i32 1
  store %struct.sv** %incdec.ptr45, %struct.sv*** %relem, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.46

if.end.46:                                        ; preds = %for.end, %cond.end.23
  %31 = load %struct.sv**, %struct.sv*** %firstrelem, align 8
  store %struct.sv** %31, %struct.sv*** %relem, align 8
  %32 = load %struct.sv**, %struct.sv*** %firstlelem, align 8
  store %struct.sv** %32, %struct.sv*** %lelem, align 8
  store %struct.av* null, %struct.av** %ary, align 8
  store %struct.hv* null, %struct.hv** %hash, align 8
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.167, %if.end.46
  %33 = load %struct.sv**, %struct.sv*** %lelem, align 8
  %34 = load %struct.sv**, %struct.sv*** %lastlelem, align 8
  %cmp47 = icmp ule %struct.sv** %33, %34
  br i1 %cmp47, label %while.body, label %while.end.168

while.body:                                       ; preds = %while.cond
  store i8 0, i8* @PL_tainted, align 1
  %35 = load %struct.sv**, %struct.sv*** %lelem, align 8
  %incdec.ptr49 = getelementptr inbounds %struct.sv*, %struct.sv** %35, i32 1
  store %struct.sv** %incdec.ptr49, %struct.sv*** %lelem, align 8
  %36 = load %struct.sv*, %struct.sv** %35, align 8
  store %struct.sv* %36, %struct.sv** %sv, align 8
  %37 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags, align 4
  %and50 = and i32 %38, 255
  switch i32 %and50, label %sw.default [
    i32 10, label %sw.bb
    i32 11, label %sw.bb.90
  ]

sw.bb:                                            ; preds = %while.body
  %39 = load %struct.sv*, %struct.sv** %sv, align 8
  %40 = bitcast %struct.sv* %39 to %struct.av*
  store %struct.av* %40, %struct.av** %ary, align 8
  %41 = load %struct.av*, %struct.av** %ary, align 8
  %sv_flags51 = getelementptr inbounds %struct.av, %struct.av* %41, i32 0, i32 2
  %42 = load i32, i32* %sv_flags51, align 4
  %and52 = and i32 %42, 57344
  %cmp53 = icmp ne i32 %and52, 0
  %conv54 = zext i1 %cmp53 to i32
  store i32 %conv54, i32* %magic, align 4
  %43 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private55 = getelementptr inbounds %struct.op, %struct.op* %43, i32 0, i32 7
  %44 = load i8, i8* %op_private55, align 1
  %conv56 = zext i8 %44 to i32
  %and57 = and i32 %conv56, 32
  %tobool58 = icmp ne i32 %and57, 0
  br i1 %tobool58, label %if.then.59, label %if.end.64

if.then.59:                                       ; preds = %sw.bb
  %45 = load %struct.av*, %struct.av** %ary, align 8
  %46 = load %struct.sv**, %struct.sv*** %lelem, align 8
  %47 = load %struct.sv**, %struct.sv*** %firstlelem, align 8
  %48 = load %struct.sv**, %struct.sv*** %relem, align 8
  %49 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  %call60 = call i32 @S_do_maybe_phash(%struct.av* %45, %struct.sv** %46, %struct.sv** %47, %struct.sv** %48, %struct.sv** %49)
  switch i32 %call60, label %sw.epilog [
    i32 0, label %sw.bb.61
    i32 1, label %sw.bb.62
  ]

sw.bb.61:                                         ; preds = %if.then.59
  br label %normal_array

sw.bb.62:                                         ; preds = %if.then.59
  %50 = load %struct.av*, %struct.av** %ary, align 8
  %51 = bitcast %struct.av* %50 to %struct.hv*
  %52 = load %struct.sv**, %struct.sv*** %relem, align 8
  %53 = load %struct.sv**, %struct.sv*** %firstrelem, align 8
  call void @S_do_oddball(%struct.hv* %51, %struct.sv** %52, %struct.sv** %53)
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb.62, %if.then.59
  %54 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  %add.ptr63 = getelementptr inbounds %struct.sv*, %struct.sv** %54, i64 1
  store %struct.sv** %add.ptr63, %struct.sv*** %relem, align 8
  br label %sw.epilog.167

if.end.64:                                        ; preds = %sw.bb
  br label %normal_array

normal_array:                                     ; preds = %if.end.64, %sw.bb.61
  %55 = load %struct.av*, %struct.av** %ary, align 8
  call void @Perl_av_clear(%struct.av* %55)
  %56 = load %struct.av*, %struct.av** %ary, align 8
  %57 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  %58 = load %struct.sv**, %struct.sv*** %relem, align 8
  %sub.ptr.lhs.cast65 = ptrtoint %struct.sv** %57 to i64
  %sub.ptr.rhs.cast66 = ptrtoint %struct.sv** %58 to i64
  %sub.ptr.sub67 = sub i64 %sub.ptr.lhs.cast65, %sub.ptr.rhs.cast66
  %sub.ptr.div68 = sdiv exact i64 %sub.ptr.sub67, 8
  %conv69 = trunc i64 %sub.ptr.div68 to i32
  call void @Perl_av_extend(%struct.av* %56, i32 %conv69)
  store i32 0, i32* %i, align 4
  br label %while.cond.70

while.cond.70:                                    ; preds = %if.end.89, %normal_array
  %59 = load %struct.sv**, %struct.sv*** %relem, align 8
  %60 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  %cmp71 = icmp ule %struct.sv** %59, %60
  br i1 %cmp71, label %while.body.73, label %while.end

while.body.73:                                    ; preds = %while.cond.70
  %61 = load %struct.sv**, %struct.sv*** %relem, align 8
  %62 = load %struct.sv*, %struct.sv** %61, align 8
  %call74 = call %struct.sv* @Perl_newSVsv(%struct.sv* %62)
  store %struct.sv* %call74, %struct.sv** %sv, align 8
  %63 = load %struct.sv*, %struct.sv** %sv, align 8
  %64 = load %struct.sv**, %struct.sv*** %relem, align 8
  %incdec.ptr75 = getelementptr inbounds %struct.sv*, %struct.sv** %64, i32 1
  store %struct.sv** %incdec.ptr75, %struct.sv*** %relem, align 8
  store %struct.sv* %63, %struct.sv** %64, align 8
  %65 = load %struct.av*, %struct.av** %ary, align 8
  %66 = load i32, i32* %i, align 4
  %inc = add nsw i32 %66, 1
  store i32 %inc, i32* %i, align 4
  %67 = load %struct.sv*, %struct.sv** %sv, align 8
  %call76 = call %struct.sv** @Perl_av_store(%struct.av* %65, i32 %66, %struct.sv* %67)
  store %struct.sv** %call76, %struct.sv*** %didstore, align 8
  %68 = load i32, i32* %magic, align 4
  %tobool77 = icmp ne i32 %68, 0
  br i1 %tobool77, label %if.then.78, label %if.end.89

if.then.78:                                       ; preds = %while.body.73
  %69 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags79 = getelementptr inbounds %struct.sv, %struct.sv* %69, i32 0, i32 2
  %70 = load i32, i32* %sv_flags79, align 4
  %and80 = and i32 %70, 16384
  %tobool81 = icmp ne i32 %and80, 0
  br i1 %tobool81, label %if.then.82, label %if.end.84

if.then.82:                                       ; preds = %if.then.78
  %71 = load %struct.sv*, %struct.sv** %sv, align 8
  %call83 = call i32 @Perl_mg_set(%struct.sv* %71)
  br label %if.end.84

if.end.84:                                        ; preds = %if.then.82, %if.then.78
  %72 = load %struct.sv**, %struct.sv*** %didstore, align 8
  %tobool85 = icmp ne %struct.sv** %72, null
  br i1 %tobool85, label %if.end.88, label %if.then.86

if.then.86:                                       ; preds = %if.end.84
  %73 = load %struct.sv*, %struct.sv** %sv, align 8
  %call87 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %73)
  br label %if.end.88

if.end.88:                                        ; preds = %if.then.86, %if.end.84
  br label %if.end.89

if.end.89:                                        ; preds = %if.end.88, %while.body.73
  store i8 0, i8* @PL_tainted, align 1
  br label %while.cond.70

while.end:                                        ; preds = %while.cond.70
  br label %sw.epilog.167

sw.bb.90:                                         ; preds = %while.body
  %74 = load %struct.sv*, %struct.sv** %sv, align 8
  %75 = bitcast %struct.sv* %74 to %struct.hv*
  store %struct.hv* %75, %struct.hv** %hash, align 8
  %76 = load %struct.hv*, %struct.hv** %hash, align 8
  %sv_flags91 = getelementptr inbounds %struct.hv, %struct.hv* %76, i32 0, i32 2
  %77 = load i32, i32* %sv_flags91, align 4
  %and92 = and i32 %77, 57344
  %cmp93 = icmp ne i32 %and92, 0
  %conv94 = zext i1 %cmp93 to i32
  store i32 %conv94, i32* %magic, align 4
  %78 = load %struct.hv*, %struct.hv** %hash, align 8
  call void @Perl_hv_clear(%struct.hv* %78)
  %79 = load %struct.sv**, %struct.sv*** %relem, align 8
  store %struct.sv** %79, %struct.sv*** %firsthashrelem, align 8
  br label %while.cond.95

while.cond.95:                                    ; preds = %if.end.131, %sw.bb.90
  %80 = load %struct.sv**, %struct.sv*** %relem, align 8
  %81 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  %cmp96 = icmp ult %struct.sv** %80, %81
  br i1 %cmp96, label %while.body.98, label %while.end.132

while.body.98:                                    ; preds = %while.cond.95
  %82 = load %struct.sv**, %struct.sv*** %relem, align 8
  %83 = load %struct.sv*, %struct.sv** %82, align 8
  %tobool100 = icmp ne %struct.sv* %83, null
  br i1 %tobool100, label %if.then.101, label %if.else

if.then.101:                                      ; preds = %while.body.98
  %84 = load %struct.sv**, %struct.sv*** %relem, align 8
  %incdec.ptr102 = getelementptr inbounds %struct.sv*, %struct.sv** %84, i32 1
  store %struct.sv** %incdec.ptr102, %struct.sv*** %relem, align 8
  %85 = load %struct.sv*, %struct.sv** %84, align 8
  store %struct.sv* %85, %struct.sv** %sv, align 8
  br label %if.end.104

if.else:                                          ; preds = %while.body.98
  store %struct.sv* @PL_sv_no, %struct.sv** %sv, align 8
  %86 = load %struct.sv**, %struct.sv*** %relem, align 8
  %incdec.ptr103 = getelementptr inbounds %struct.sv*, %struct.sv** %86, i32 1
  store %struct.sv** %incdec.ptr103, %struct.sv*** %relem, align 8
  br label %if.end.104

if.end.104:                                       ; preds = %if.else, %if.then.101
  %call105 = call %struct.sv* @Perl_newSV(i64 0)
  store %struct.sv* %call105, %struct.sv** %tmpstr, align 8
  %87 = load %struct.sv**, %struct.sv*** %relem, align 8
  %88 = load %struct.sv*, %struct.sv** %87, align 8
  %tobool106 = icmp ne %struct.sv* %88, null
  br i1 %tobool106, label %if.then.107, label %if.end.108

if.then.107:                                      ; preds = %if.end.104
  %89 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %90 = load %struct.sv**, %struct.sv*** %relem, align 8
  %91 = load %struct.sv*, %struct.sv** %90, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %89, %struct.sv* %91, i32 2)
  br label %if.end.108

if.end.108:                                       ; preds = %if.then.107, %if.end.104
  %92 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %93 = load %struct.sv**, %struct.sv*** %relem, align 8
  %incdec.ptr109 = getelementptr inbounds %struct.sv*, %struct.sv** %93, i32 1
  store %struct.sv** %incdec.ptr109, %struct.sv*** %relem, align 8
  store %struct.sv* %92, %struct.sv** %93, align 8
  %94 = load i32, i32* %gimme, align 4
  %cmp110 = icmp ne i32 %94, 128
  br i1 %cmp110, label %land.lhs.true, label %if.end.117

land.lhs.true:                                    ; preds = %if.end.108
  %95 = load %struct.hv*, %struct.hv** %hash, align 8
  %96 = load %struct.sv*, %struct.sv** %sv, align 8
  %call112 = call signext i8 @Perl_hv_exists_ent(%struct.hv* %95, %struct.sv* %96, i32 0)
  %conv113 = sext i8 %call112 to i32
  %tobool114 = icmp ne i32 %conv113, 0
  br i1 %tobool114, label %if.then.115, label %if.end.117

if.then.115:                                      ; preds = %land.lhs.true
  %97 = load i32, i32* %duplicates, align 4
  %add116 = add nsw i32 %97, 2
  store i32 %add116, i32* %duplicates, align 4
  br label %if.end.117

if.end.117:                                       ; preds = %if.then.115, %land.lhs.true, %if.end.108
  %98 = load %struct.hv*, %struct.hv** %hash, align 8
  %99 = load %struct.sv*, %struct.sv** %sv, align 8
  %100 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %call118 = call %struct.he* @Perl_hv_store_ent(%struct.hv* %98, %struct.sv* %99, %struct.sv* %100, i32 0)
  store %struct.he* %call118, %struct.he** %didstore99, align 8
  %101 = load i32, i32* %magic, align 4
  %tobool119 = icmp ne i32 %101, 0
  br i1 %tobool119, label %if.then.120, label %if.end.131

if.then.120:                                      ; preds = %if.end.117
  %102 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags121 = getelementptr inbounds %struct.sv, %struct.sv* %102, i32 0, i32 2
  %103 = load i32, i32* %sv_flags121, align 4
  %and122 = and i32 %103, 16384
  %tobool123 = icmp ne i32 %and122, 0
  br i1 %tobool123, label %if.then.124, label %if.end.126

if.then.124:                                      ; preds = %if.then.120
  %104 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %call125 = call i32 @Perl_mg_set(%struct.sv* %104)
  br label %if.end.126

if.end.126:                                       ; preds = %if.then.124, %if.then.120
  %105 = load %struct.he*, %struct.he** %didstore99, align 8
  %tobool127 = icmp ne %struct.he* %105, null
  br i1 %tobool127, label %if.end.130, label %if.then.128

if.then.128:                                      ; preds = %if.end.126
  %106 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %call129 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %106)
  br label %if.end.130

if.end.130:                                       ; preds = %if.then.128, %if.end.126
  br label %if.end.131

if.end.131:                                       ; preds = %if.end.130, %if.end.117
  store i8 0, i8* @PL_tainted, align 1
  br label %while.cond.95

while.end.132:                                    ; preds = %while.cond.95
  %107 = load %struct.sv**, %struct.sv*** %relem, align 8
  %108 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  %cmp133 = icmp eq %struct.sv** %107, %108
  br i1 %cmp133, label %if.then.135, label %if.end.137

if.then.135:                                      ; preds = %while.end.132
  %109 = load %struct.hv*, %struct.hv** %hash, align 8
  %110 = load %struct.sv**, %struct.sv*** %relem, align 8
  %111 = load %struct.sv**, %struct.sv*** %firstrelem, align 8
  call void @S_do_oddball(%struct.hv* %109, %struct.sv** %110, %struct.sv** %111)
  %112 = load %struct.sv**, %struct.sv*** %relem, align 8
  %incdec.ptr136 = getelementptr inbounds %struct.sv*, %struct.sv** %112, i32 1
  store %struct.sv** %incdec.ptr136, %struct.sv*** %relem, align 8
  br label %if.end.137

if.end.137:                                       ; preds = %if.then.135, %while.end.132
  br label %sw.epilog.167

sw.default:                                       ; preds = %while.body
  %113 = load %struct.sv*, %struct.sv** %sv, align 8
  %cmp138 = icmp eq %struct.sv* %113, @PL_sv_undef
  br i1 %cmp138, label %if.then.148, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.default
  %114 = load %struct.sv*, %struct.sv** %sv, align 8
  %cmp140 = icmp eq %struct.sv* %114, @PL_sv_yes
  br i1 %cmp140, label %if.then.148, label %lor.lhs.false.142

lor.lhs.false.142:                                ; preds = %lor.lhs.false
  %115 = load %struct.sv*, %struct.sv** %sv, align 8
  %cmp143 = icmp eq %struct.sv* %115, @PL_sv_no
  br i1 %cmp143, label %if.then.148, label %lor.lhs.false.145

lor.lhs.false.145:                                ; preds = %lor.lhs.false.142
  %116 = load %struct.sv*, %struct.sv** %sv, align 8
  %cmp146 = icmp eq %struct.sv* %116, @PL_sv_placeholder
  br i1 %cmp146, label %if.then.148, label %if.end.154

if.then.148:                                      ; preds = %lor.lhs.false.145, %lor.lhs.false.142, %lor.lhs.false, %sw.default
  %117 = load %struct.sv**, %struct.sv*** %relem, align 8
  %118 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  %cmp149 = icmp ule %struct.sv** %117, %118
  br i1 %cmp149, label %if.then.151, label %if.end.153

if.then.151:                                      ; preds = %if.then.148
  %119 = load %struct.sv**, %struct.sv*** %relem, align 8
  %incdec.ptr152 = getelementptr inbounds %struct.sv*, %struct.sv** %119, i32 1
  store %struct.sv** %incdec.ptr152, %struct.sv*** %relem, align 8
  br label %if.end.153

if.end.153:                                       ; preds = %if.then.151, %if.then.148
  br label %sw.epilog.167

if.end.154:                                       ; preds = %lor.lhs.false.145
  %120 = load %struct.sv**, %struct.sv*** %relem, align 8
  %121 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  %cmp155 = icmp ule %struct.sv** %120, %121
  br i1 %cmp155, label %if.then.157, label %if.else.159

if.then.157:                                      ; preds = %if.end.154
  %122 = load %struct.sv*, %struct.sv** %sv, align 8
  %123 = load %struct.sv**, %struct.sv*** %relem, align 8
  %124 = load %struct.sv*, %struct.sv** %123, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %122, %struct.sv* %124, i32 2)
  %125 = load %struct.sv*, %struct.sv** %sv, align 8
  %126 = load %struct.sv**, %struct.sv*** %relem, align 8
  %incdec.ptr158 = getelementptr inbounds %struct.sv*, %struct.sv** %126, i32 1
  store %struct.sv** %incdec.ptr158, %struct.sv*** %relem, align 8
  store %struct.sv* %125, %struct.sv** %126, align 8
  br label %if.end.160

if.else.159:                                      ; preds = %if.end.154
  %127 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %127, %struct.sv* @PL_sv_undef, i32 2)
  br label %if.end.160

if.end.160:                                       ; preds = %if.else.159, %if.then.157
  %128 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags161 = getelementptr inbounds %struct.sv, %struct.sv* %128, i32 0, i32 2
  %129 = load i32, i32* %sv_flags161, align 4
  %and162 = and i32 %129, 16384
  %tobool163 = icmp ne i32 %and162, 0
  br i1 %tobool163, label %if.then.164, label %if.end.166

if.then.164:                                      ; preds = %if.end.160
  %130 = load %struct.sv*, %struct.sv** %sv, align 8
  %call165 = call i32 @Perl_mg_set(%struct.sv* %130)
  br label %if.end.166

if.end.166:                                       ; preds = %if.then.164, %if.end.160
  br label %sw.epilog.167

sw.epilog.167:                                    ; preds = %if.end.166, %if.end.153, %if.end.137, %while.end, %sw.epilog
  br label %while.cond

while.end.168:                                    ; preds = %while.cond
  %131 = load i32, i32* @PL_delaymagic, align 4
  %and169 = and i32 %131, -257
  %tobool170 = icmp ne i32 %and169, 0
  br i1 %tobool170, label %if.then.171, label %if.end.211

if.then.171:                                      ; preds = %while.end.168
  %132 = load i32, i32* @PL_delaymagic, align 4
  %and172 = and i32 %132, 3
  %tobool173 = icmp ne i32 %and172, 0
  br i1 %tobool173, label %if.then.174, label %if.end.187

if.then.174:                                      ; preds = %if.then.171
  %133 = load i32, i32* @PL_delaymagic, align 4
  %and175 = and i32 %133, 3
  %tobool176 = icmp ne i32 %and175, 0
  br i1 %tobool176, label %if.then.177, label %if.end.184

if.then.177:                                      ; preds = %if.then.174
  %134 = load i32, i32* @PL_uid, align 4
  %135 = load i32, i32* @PL_euid, align 4
  %cmp178 = icmp ne i32 %134, %135
  br i1 %cmp178, label %if.then.180, label %if.end.182

if.then.180:                                      ; preds = %if.then.177
  %call181 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i32 0, i32 0))
  store %struct.op* %call181, %struct.op** %retval
  br label %return

if.end.182:                                       ; preds = %if.then.177
  %136 = load i32, i32* @PL_uid, align 4
  %call183 = call i32 @setuid(i32 %136)
  br label %if.end.184

if.end.184:                                       ; preds = %if.end.182, %if.then.174
  %call185 = call i32 @getuid()
  store i32 %call185, i32* @PL_uid, align 4
  %call186 = call i32 @geteuid()
  store i32 %call186, i32* @PL_euid, align 4
  br label %if.end.187

if.end.187:                                       ; preds = %if.end.184, %if.then.171
  %137 = load i32, i32* @PL_delaymagic, align 4
  %and188 = and i32 %137, 48
  %tobool189 = icmp ne i32 %and188, 0
  br i1 %tobool189, label %if.then.190, label %if.end.203

if.then.190:                                      ; preds = %if.end.187
  %138 = load i32, i32* @PL_delaymagic, align 4
  %and191 = and i32 %138, 48
  %tobool192 = icmp ne i32 %and191, 0
  br i1 %tobool192, label %if.then.193, label %if.end.200

if.then.193:                                      ; preds = %if.then.190
  %139 = load i32, i32* @PL_gid, align 4
  %140 = load i32, i32* @PL_egid, align 4
  %cmp194 = icmp ne i32 %139, %140
  br i1 %cmp194, label %if.then.196, label %if.end.198

if.then.196:                                      ; preds = %if.then.193
  %call197 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i32 0, i32 0))
  store %struct.op* %call197, %struct.op** %retval
  br label %return

if.end.198:                                       ; preds = %if.then.193
  %141 = load i32, i32* @PL_gid, align 4
  %call199 = call i32 @setgid(i32 %141)
  br label %if.end.200

if.end.200:                                       ; preds = %if.end.198, %if.then.190
  %call201 = call i32 @getgid()
  store i32 %call201, i32* @PL_gid, align 4
  %call202 = call i32 @getegid()
  store i32 %call202, i32* @PL_egid, align 4
  br label %if.end.203

if.end.203:                                       ; preds = %if.end.200, %if.end.187
  %142 = load i32, i32* @PL_uid, align 4
  %tobool204 = icmp ne i32 %142, 0
  br i1 %tobool204, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end.203
  %143 = load i32, i32* @PL_euid, align 4
  %144 = load i32, i32* @PL_uid, align 4
  %cmp205 = icmp ne i32 %143, %144
  br i1 %cmp205, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %145 = load i32, i32* @PL_egid, align 4
  %146 = load i32, i32* @PL_gid, align 4
  %cmp207 = icmp ne i32 %145, %146
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %147 = phi i1 [ true, %land.rhs ], [ %cmp207, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %if.end.203
  %148 = phi i1 [ false, %if.end.203 ], [ %147, %lor.end ]
  %land.ext = zext i1 %148 to i32
  %149 = load i8, i8* @PL_tainting, align 1
  %conv209 = sext i8 %149 to i32
  %or = or i32 %conv209, %land.ext
  %conv210 = trunc i32 %or to i8
  store i8 %conv210, i8* @PL_tainting, align 1
  br label %if.end.211

if.end.211:                                       ; preds = %land.end, %while.end.168
  store i32 0, i32* @PL_delaymagic, align 4
  %150 = load i32, i32* %gimme, align 4
  %cmp212 = icmp eq i32 %150, 128
  br i1 %cmp212, label %if.then.214, label %if.else.216

if.then.214:                                      ; preds = %if.end.211
  %151 = load %struct.sv**, %struct.sv*** %firstrelem, align 8
  %add.ptr215 = getelementptr inbounds %struct.sv*, %struct.sv** %151, i64 -1
  store %struct.sv** %add.ptr215, %struct.sv*** %sp, align 8
  br label %if.end.273

if.else.216:                                      ; preds = %if.end.211
  %152 = load i32, i32* %gimme, align 4
  %cmp217 = icmp eq i32 %152, 0
  br i1 %cmp217, label %if.then.219, label %if.else.232

if.then.219:                                      ; preds = %if.else.216
  %153 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %153, i32 0, i32 3
  %154 = load i64, i64* %op_targ, align 8
  %155 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %155, i64 %154
  %156 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %156, %struct.sv** %targ, align 8
  %157 = load %struct.sv**, %struct.sv*** %firstrelem, align 8
  store %struct.sv** %157, %struct.sv*** %sp, align 8
  %158 = load %struct.sv*, %struct.sv** %targ, align 8
  %159 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  %160 = load %struct.sv**, %struct.sv*** %firstrelem, align 8
  %sub.ptr.lhs.cast220 = ptrtoint %struct.sv** %159 to i64
  %sub.ptr.rhs.cast221 = ptrtoint %struct.sv** %160 to i64
  %sub.ptr.sub222 = sub i64 %sub.ptr.lhs.cast220, %sub.ptr.rhs.cast221
  %sub.ptr.div223 = sdiv exact i64 %sub.ptr.sub222, 8
  %add224 = add nsw i64 %sub.ptr.div223, 1
  %161 = load i32, i32* %duplicates, align 4
  %conv225 = sext i32 %161 to i64
  %sub = sub nsw i64 %add224, %conv225
  call void @Perl_sv_setiv(%struct.sv* %158, i64 %sub)
  %162 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags226 = getelementptr inbounds %struct.sv, %struct.sv* %162, i32 0, i32 2
  %163 = load i32, i32* %sv_flags226, align 4
  %and227 = and i32 %163, 16384
  %tobool228 = icmp ne i32 %and227, 0
  br i1 %tobool228, label %if.then.229, label %if.end.231

if.then.229:                                      ; preds = %if.then.219
  %164 = load %struct.sv*, %struct.sv** %targ, align 8
  %call230 = call i32 @Perl_mg_set(%struct.sv* %164)
  br label %if.end.231

if.end.231:                                       ; preds = %if.then.229, %if.then.219
  %165 = load %struct.sv*, %struct.sv** %targ, align 8
  %166 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %165, %struct.sv** %166, align 8
  store %struct.sv* %165, %struct.sv** %tmp
  %167 = load %struct.sv*, %struct.sv** %tmp
  br label %if.end.272

if.else.232:                                      ; preds = %if.else.216
  %168 = load %struct.av*, %struct.av** %ary, align 8
  %tobool233 = icmp ne %struct.av* %168, null
  br i1 %tobool233, label %if.then.234, label %if.else.235

if.then.234:                                      ; preds = %if.else.232
  %169 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  store %struct.sv** %169, %struct.sv*** %sp, align 8
  br label %if.end.253

if.else.235:                                      ; preds = %if.else.232
  %170 = load %struct.hv*, %struct.hv** %hash, align 8
  %tobool236 = icmp ne %struct.hv* %170, null
  br i1 %tobool236, label %if.then.237, label %if.else.246

if.then.237:                                      ; preds = %if.else.235
  %171 = load i32, i32* %duplicates, align 4
  %tobool238 = icmp ne i32 %171, 0
  br i1 %tobool238, label %if.then.239, label %if.end.245

if.then.239:                                      ; preds = %if.then.237
  %172 = load %struct.sv**, %struct.sv*** %firsthashrelem, align 8
  %173 = bitcast %struct.sv** %172 to i8*
  %174 = load %struct.sv**, %struct.sv*** %firsthashrelem, align 8
  %175 = load i32, i32* %duplicates, align 4
  %idx.ext240 = sext i32 %175 to i64
  %add.ptr241 = getelementptr inbounds %struct.sv*, %struct.sv** %174, i64 %idx.ext240
  %176 = bitcast %struct.sv** %add.ptr241 to i8*
  %177 = load i32, i32* %duplicates, align 4
  %conv242 = sext i32 %177 to i64
  %mul = mul i64 %conv242, 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %173, i8* %176, i64 %mul, i32 1, i1 false)
  %178 = load i32, i32* %duplicates, align 4
  %179 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  %idx.ext243 = sext i32 %178 to i64
  %idx.neg = sub i64 0, %idx.ext243
  %add.ptr244 = getelementptr inbounds %struct.sv*, %struct.sv** %179, i64 %idx.neg
  store %struct.sv** %add.ptr244, %struct.sv*** %lastrelem, align 8
  br label %if.end.245

if.end.245:                                       ; preds = %if.then.239, %if.then.237
  %180 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  store %struct.sv** %180, %struct.sv*** %sp, align 8
  br label %if.end.252

if.else.246:                                      ; preds = %if.else.235
  %181 = load %struct.sv**, %struct.sv*** %firstrelem, align 8
  %182 = load %struct.sv**, %struct.sv*** %lastlelem, align 8
  %183 = load %struct.sv**, %struct.sv*** %firstlelem, align 8
  %sub.ptr.lhs.cast247 = ptrtoint %struct.sv** %182 to i64
  %sub.ptr.rhs.cast248 = ptrtoint %struct.sv** %183 to i64
  %sub.ptr.sub249 = sub i64 %sub.ptr.lhs.cast247, %sub.ptr.rhs.cast248
  %sub.ptr.div250 = sdiv exact i64 %sub.ptr.sub249, 8
  %add.ptr251 = getelementptr inbounds %struct.sv*, %struct.sv** %181, i64 %sub.ptr.div250
  store %struct.sv** %add.ptr251, %struct.sv*** %sp, align 8
  br label %if.end.252

if.end.252:                                       ; preds = %if.else.246, %if.end.245
  br label %if.end.253

if.end.253:                                       ; preds = %if.end.252, %if.then.234
  %184 = load %struct.sv**, %struct.sv*** %firstlelem, align 8
  %185 = load %struct.sv**, %struct.sv*** %relem, align 8
  %186 = load %struct.sv**, %struct.sv*** %firstrelem, align 8
  %sub.ptr.lhs.cast254 = ptrtoint %struct.sv** %185 to i64
  %sub.ptr.rhs.cast255 = ptrtoint %struct.sv** %186 to i64
  %sub.ptr.sub256 = sub i64 %sub.ptr.lhs.cast254, %sub.ptr.rhs.cast255
  %sub.ptr.div257 = sdiv exact i64 %sub.ptr.sub256, 8
  %add.ptr258 = getelementptr inbounds %struct.sv*, %struct.sv** %184, i64 %sub.ptr.div257
  store %struct.sv** %add.ptr258, %struct.sv*** %lelem, align 8
  br label %while.cond.259

while.cond.259:                                   ; preds = %cond.end.268, %if.end.253
  %187 = load %struct.sv**, %struct.sv*** %relem, align 8
  %188 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp260 = icmp ule %struct.sv** %187, %188
  br i1 %cmp260, label %while.body.262, label %while.end.271

while.body.262:                                   ; preds = %while.cond.259
  %189 = load %struct.sv**, %struct.sv*** %lelem, align 8
  %190 = load %struct.sv**, %struct.sv*** %lastlelem, align 8
  %cmp263 = icmp ule %struct.sv** %189, %190
  br i1 %cmp263, label %cond.true.265, label %cond.false.267

cond.true.265:                                    ; preds = %while.body.262
  %191 = load %struct.sv**, %struct.sv*** %lelem, align 8
  %incdec.ptr266 = getelementptr inbounds %struct.sv*, %struct.sv** %191, i32 1
  store %struct.sv** %incdec.ptr266, %struct.sv*** %lelem, align 8
  %192 = load %struct.sv*, %struct.sv** %191, align 8
  br label %cond.end.268

cond.false.267:                                   ; preds = %while.body.262
  br label %cond.end.268

cond.end.268:                                     ; preds = %cond.false.267, %cond.true.265
  %cond269 = phi %struct.sv* [ %192, %cond.true.265 ], [ @PL_sv_undef, %cond.false.267 ]
  %193 = load %struct.sv**, %struct.sv*** %relem, align 8
  %incdec.ptr270 = getelementptr inbounds %struct.sv*, %struct.sv** %193, i32 1
  store %struct.sv** %incdec.ptr270, %struct.sv*** %relem, align 8
  store %struct.sv* %cond269, %struct.sv** %193, align 8
  br label %while.cond.259

while.end.271:                                    ; preds = %while.cond.259
  br label %if.end.272

if.end.272:                                       ; preds = %while.end.271, %if.end.231
  br label %if.end.273

if.end.273:                                       ; preds = %if.end.272, %if.then.214
  %194 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %194, %struct.sv*** @PL_stack_sp, align 8
  %195 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %195, i32 0, i32 0
  %196 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %196, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.end.273, %if.then.196, %if.then.180
  %197 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %197
}

declare void @Perl_tmps_grow(i32) #1

; Function Attrs: nounwind uwtable
define internal i32 @S_do_maybe_phash(%struct.av* %ary, %struct.sv** %lelem, %struct.sv** %firstlelem, %struct.sv** %relem, %struct.sv** %lastrelem) #0 {
entry:
  %retval = alloca i32, align 4
  %ary.addr = alloca %struct.av*, align 8
  %lelem.addr = alloca %struct.sv**, align 8
  %firstlelem.addr = alloca %struct.sv**, align 8
  %relem.addr = alloca %struct.sv**, align 8
  %lastrelem.addr = alloca %struct.sv**, align 8
  %leftop = alloca %struct.op*, align 8
  %i = alloca i32, align 4
  %tmpstr = alloca %struct.sv*, align 8
  store %struct.av* %ary, %struct.av** %ary.addr, align 8
  store %struct.sv** %lelem, %struct.sv*** %lelem.addr, align 8
  store %struct.sv** %firstlelem, %struct.sv*** %firstlelem.addr, align 8
  store %struct.sv** %relem, %struct.sv*** %relem.addr, align 8
  store %struct.sv** %lastrelem, %struct.sv*** %lastrelem.addr, align 8
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %1 = bitcast %struct.op* %0 to %struct.binop*
  %op_last = getelementptr inbounds %struct.binop, %struct.binop* %1, i32 0, i32 9
  %2 = load %struct.op*, %struct.op** %op_last, align 8
  store %struct.op* %2, %struct.op** %leftop, align 8
  %3 = load %struct.op*, %struct.op** %leftop, align 8
  %4 = bitcast %struct.op* %3 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %4, i32 0, i32 8
  %5 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %5, %struct.op** %leftop, align 8
  %6 = load %struct.sv**, %struct.sv*** %lelem.addr, align 8
  %7 = load %struct.sv**, %struct.sv*** %firstlelem.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %6 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %7 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  store i32 %conv, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %i, align 4
  %cmp = icmp sgt i32 %8, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load %struct.op*, %struct.op** %leftop, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 1
  %10 = load %struct.op*, %struct.op** %op_sibling, align 8
  store %struct.op* %10, %struct.op** %leftop, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %dec = add nsw i32 %11, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load %struct.op*, %struct.op** %leftop, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 4
  %13 = load i16, i16* %op_type, align 2
  %conv2 = zext i16 %13 to i32
  %cmp3 = icmp ne i32 %conv2, 134
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %for.end
  %14 = load %struct.av*, %struct.av** %ary.addr, align 8
  %call = call i32 @Perl_av_len(%struct.av* %14)
  %cmp5 = icmp sgt i32 %call, 0
  br i1 %cmp5, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end
  %15 = load %struct.av*, %struct.av** %ary.addr, align 8
  call void @Perl_av_fill(%struct.av* %15, i32 0)
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.7, %if.end
  %16 = load %struct.sv**, %struct.sv*** %lastrelem.addr, align 8
  %17 = load %struct.sv**, %struct.sv*** %relem.addr, align 8
  %cmp9 = icmp uge %struct.sv** %16, %17
  br i1 %cmp9, label %if.then.11, label %if.end.30

if.then.11:                                       ; preds = %if.end.8
  br label %while.cond

while.cond:                                       ; preds = %if.end.29, %if.then.11
  %18 = load %struct.sv**, %struct.sv*** %relem.addr, align 8
  %19 = load %struct.sv**, %struct.sv*** %lastrelem.addr, align 8
  %cmp12 = icmp ult %struct.sv** %18, %19
  br i1 %cmp12, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call14 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call14, %struct.sv** %tmpstr, align 8
  %20 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %21 = load %struct.sv**, %struct.sv*** %relem.addr, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %21, i64 1
  %22 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %20, %struct.sv* %22, i32 2)
  %23 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %24 = load %struct.sv**, %struct.sv*** %relem.addr, align 8
  %arrayidx15 = getelementptr inbounds %struct.sv*, %struct.sv** %24, i64 1
  store %struct.sv* %23, %struct.sv** %arrayidx15, align 8
  %25 = load %struct.av*, %struct.av** %ary.addr, align 8
  %26 = load %struct.sv**, %struct.sv*** %relem.addr, align 8
  %arrayidx16 = getelementptr inbounds %struct.sv*, %struct.sv** %26, i64 0
  %27 = load %struct.sv*, %struct.sv** %arrayidx16, align 8
  %28 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %call17 = call %struct.sv** @Perl_avhv_store_ent(%struct.av* %25, %struct.sv* %27, %struct.sv* %28, i32 0)
  %tobool = icmp ne %struct.sv** %call17, null
  br i1 %tobool, label %if.then.18, label %if.end.21

if.then.18:                                       ; preds = %while.body
  %29 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  store %struct.sv* %29, %struct.sv** @PL_Sv, align 8
  %30 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool19 = icmp ne %struct.sv* %30, null
  br i1 %tobool19, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.18
  %31 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 1
  %32 = load i32, i32* %sv_refcnt, align 4
  %inc = add i32 %32, 1
  store i32 %inc, i32* %sv_refcnt, align 4
  %tobool20 = icmp ne i32 %inc, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.18
  %33 = phi i1 [ false, %if.then.18 ], [ %tobool20, %land.rhs ]
  %land.ext = zext i1 %33 to i32
  %34 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  br label %if.end.21

if.end.21:                                        ; preds = %land.end, %while.body
  %35 = load %struct.av*, %struct.av** %ary.addr, align 8
  %sv_flags = getelementptr inbounds %struct.av, %struct.av* %35, i32 0, i32 2
  %36 = load i32, i32* %sv_flags, align 4
  %and = and i32 %36, 57344
  %cmp22 = icmp ne i32 %and, 0
  br i1 %cmp22, label %land.lhs.true, label %if.end.29

land.lhs.true:                                    ; preds = %if.end.21
  %37 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags24 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags24, align 4
  %and25 = and i32 %38, 16384
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %if.then.27, label %if.end.29

if.then.27:                                       ; preds = %land.lhs.true
  %39 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %call28 = call i32 @Perl_mg_set(%struct.sv* %39)
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.27, %land.lhs.true, %if.end.21
  %40 = load %struct.sv**, %struct.sv*** %relem.addr, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %40, i64 2
  store %struct.sv** %add.ptr, %struct.sv*** %relem.addr, align 8
  store i8 0, i8* @PL_tainted, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.30

if.end.30:                                        ; preds = %while.end, %if.end.8
  %41 = load %struct.sv**, %struct.sv*** %relem.addr, align 8
  %42 = load %struct.sv**, %struct.sv*** %lastrelem.addr, align 8
  %cmp31 = icmp eq %struct.sv** %41, %42
  br i1 %cmp31, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %if.end.30
  store i32 1, i32* %retval
  br label %return

if.end.34:                                        ; preds = %if.end.30
  store i32 2, i32* %retval
  br label %return

return:                                           ; preds = %if.end.34, %if.then.33, %if.then
  %43 = load i32, i32* %retval
  ret i32 %43
}

; Function Attrs: nounwind uwtable
define internal void @S_do_oddball(%struct.hv* %hash, %struct.sv** %relem, %struct.sv** %firstrelem) #0 {
entry:
  %hash.addr = alloca %struct.hv*, align 8
  %relem.addr = alloca %struct.sv**, align 8
  %firstrelem.addr = alloca %struct.sv**, align 8
  %tmpstr = alloca %struct.sv*, align 8
  %didstore = alloca %struct.he*, align 8
  store %struct.hv* %hash, %struct.hv** %hash.addr, align 8
  store %struct.sv** %relem, %struct.sv*** %relem.addr, align 8
  store %struct.sv** %firstrelem, %struct.sv*** %firstrelem.addr, align 8
  %0 = load %struct.sv**, %struct.sv*** %relem.addr, align 8
  %1 = load %struct.sv*, %struct.sv** %0, align 8
  %tobool = icmp ne %struct.sv* %1, null
  br i1 %tobool, label %if.then, label %if.end.77

if.then:                                          ; preds = %entry
  %2 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %2, i32 0, i32 14
  %3 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp = icmp ne %struct.sv* %3, null
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false.8

land.lhs.true:                                    ; preds = %if.then
  %4 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings1 = getelementptr inbounds %struct.cop, %struct.cop* %4, i32 0, i32 14
  %5 = load %struct.sv*, %struct.sv** %cop_warnings1, align 8
  %cmp2 = icmp ne %struct.sv* %5, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp2, label %land.lhs.true.3, label %lor.lhs.false.8

land.lhs.true.3:                                  ; preds = %land.lhs.true
  %6 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings4 = getelementptr inbounds %struct.cop, %struct.cop* %6, i32 0, i32 14
  %7 = load %struct.sv*, %struct.sv** %cop_warnings4, align 8
  %cmp5 = icmp eq %struct.sv* %7, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp5, label %if.then.16, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.3
  %8 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings6 = getelementptr inbounds %struct.cop, %struct.cop* %8, i32 0, i32 14
  %9 = load %struct.sv*, %struct.sv** %cop_warnings6, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 0
  %10 = load i8*, i8** %sv_any, align 8
  %11 = bitcast i8* %10 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %11, i32 0, i32 0
  %12 = load i8*, i8** %xpv_pv, align 8
  %arrayidx = getelementptr inbounds i8, i8* %12, i64 3
  %13 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %13 to i32
  %and = and i32 %conv, 1
  %tobool7 = icmp ne i32 %and, 0
  br i1 %tobool7, label %if.then.16, label %lor.lhs.false.8

lor.lhs.false.8:                                  ; preds = %lor.lhs.false, %land.lhs.true, %if.then
  %14 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings9 = getelementptr inbounds %struct.cop, %struct.cop* %14, i32 0, i32 14
  %15 = load %struct.sv*, %struct.sv** %cop_warnings9, align 8
  %cmp10 = icmp eq %struct.sv* %15, null
  br i1 %cmp10, label %land.lhs.true.12, label %if.end.36

land.lhs.true.12:                                 ; preds = %lor.lhs.false.8
  %16 = load i8, i8* @PL_dowarn, align 1
  %conv13 = zext i8 %16 to i32
  %and14 = and i32 %conv13, 1
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %if.then.16, label %if.end.36

if.then.16:                                       ; preds = %land.lhs.true.12, %lor.lhs.false, %land.lhs.true.3
  %17 = load %struct.sv**, %struct.sv*** %relem.addr, align 8
  %18 = load %struct.sv**, %struct.sv*** %firstrelem.addr, align 8
  %cmp17 = icmp eq %struct.sv** %17, %18
  br i1 %cmp17, label %land.lhs.true.19, label %if.else

land.lhs.true.19:                                 ; preds = %if.then.16
  %19 = load %struct.sv**, %struct.sv*** %relem.addr, align 8
  %20 = load %struct.sv*, %struct.sv** %19, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags, align 4
  %and20 = and i32 %21, 524288
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %land.lhs.true.22, label %if.else

land.lhs.true.22:                                 ; preds = %land.lhs.true.19
  %22 = load %struct.sv**, %struct.sv*** %relem.addr, align 8
  %23 = load %struct.sv*, %struct.sv** %22, align 8
  %sv_any23 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 0
  %24 = load i8*, i8** %sv_any23, align 8
  %25 = bitcast i8* %24 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %25, i32 0, i32 0
  %26 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  %sv_flags24 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags24, align 4
  %and25 = and i32 %27, 255
  %cmp26 = icmp eq i32 %and25, 10
  br i1 %cmp26, label %if.then.35, label %lor.lhs.false.28

lor.lhs.false.28:                                 ; preds = %land.lhs.true.22
  %28 = load %struct.sv**, %struct.sv*** %relem.addr, align 8
  %29 = load %struct.sv*, %struct.sv** %28, align 8
  %sv_any29 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 0
  %30 = load i8*, i8** %sv_any29, align 8
  %31 = bitcast i8* %30 to %struct.xrv*
  %xrv_rv30 = getelementptr inbounds %struct.xrv, %struct.xrv* %31, i32 0, i32 0
  %32 = load %struct.sv*, %struct.sv** %xrv_rv30, align 8
  %sv_flags31 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags31, align 4
  %and32 = and i32 %33, 255
  %cmp33 = icmp eq i32 %and32, 11
  br i1 %cmp33, label %if.then.35, label %if.else

if.then.35:                                       ; preds = %lor.lhs.false.28, %land.lhs.true.22
  call void (i32, i8*, ...) @Perl_warner(i32 12, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.47, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false.28, %land.lhs.true.19, %if.then.16
  call void (i32, i8*, ...) @Perl_warner(i32 12, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.48, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.35
  br label %if.end.36

if.end.36:                                        ; preds = %if.end, %land.lhs.true.12, %lor.lhs.false.8
  %34 = load %struct.hv*, %struct.hv** %hash.addr, align 8
  %sv_flags37 = getelementptr inbounds %struct.hv, %struct.hv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags37, align 4
  %and38 = and i32 %35, 255
  %cmp39 = icmp eq i32 %and38, 10
  br i1 %cmp39, label %if.then.41, label %if.else.58

if.then.41:                                       ; preds = %if.end.36
  %call = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call, %struct.sv** %tmpstr, align 8
  %36 = load %struct.hv*, %struct.hv** %hash.addr, align 8
  %37 = bitcast %struct.hv* %36 to %struct.av*
  %38 = load %struct.sv**, %struct.sv*** %relem.addr, align 8
  %39 = load %struct.sv*, %struct.sv** %38, align 8
  %40 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %call42 = call %struct.sv** @Perl_avhv_store_ent(%struct.av* %37, %struct.sv* %39, %struct.sv* %40, i32 0)
  %tobool43 = icmp ne %struct.sv** %call42, null
  br i1 %tobool43, label %if.then.44, label %if.end.47

if.then.44:                                       ; preds = %if.then.41
  %41 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  store %struct.sv* %41, %struct.sv** @PL_Sv, align 8
  %42 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool45 = icmp ne %struct.sv* %42, null
  br i1 %tobool45, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.44
  %43 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 1
  %44 = load i32, i32* %sv_refcnt, align 4
  %inc = add i32 %44, 1
  store i32 %inc, i32* %sv_refcnt, align 4
  %tobool46 = icmp ne i32 %inc, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.44
  %45 = phi i1 [ false, %if.then.44 ], [ %tobool46, %land.rhs ]
  %land.ext = zext i1 %45 to i32
  %46 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  br label %if.end.47

if.end.47:                                        ; preds = %land.end, %if.then.41
  %47 = load %struct.hv*, %struct.hv** %hash.addr, align 8
  %sv_flags48 = getelementptr inbounds %struct.hv, %struct.hv* %47, i32 0, i32 2
  %48 = load i32, i32* %sv_flags48, align 4
  %and49 = and i32 %48, 57344
  %tobool50 = icmp ne i32 %and49, 0
  br i1 %tobool50, label %land.lhs.true.51, label %if.end.57

land.lhs.true.51:                                 ; preds = %if.end.47
  %49 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags52 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 2
  %50 = load i32, i32* %sv_flags52, align 4
  %and53 = and i32 %50, 16384
  %tobool54 = icmp ne i32 %and53, 0
  br i1 %tobool54, label %if.then.55, label %if.end.57

if.then.55:                                       ; preds = %land.lhs.true.51
  %51 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %call56 = call i32 @Perl_mg_set(%struct.sv* %51)
  br label %if.end.57

if.end.57:                                        ; preds = %if.then.55, %land.lhs.true.51, %if.end.47
  br label %if.end.76

if.else.58:                                       ; preds = %if.end.36
  %call59 = call %struct.sv* @Perl_newSV(i64 0)
  store %struct.sv* %call59, %struct.sv** %tmpstr, align 8
  %52 = load %struct.hv*, %struct.hv** %hash.addr, align 8
  %53 = load %struct.sv**, %struct.sv*** %relem.addr, align 8
  %54 = load %struct.sv*, %struct.sv** %53, align 8
  %55 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %call60 = call %struct.he* @Perl_hv_store_ent(%struct.hv* %52, %struct.sv* %54, %struct.sv* %55, i32 0)
  store %struct.he* %call60, %struct.he** %didstore, align 8
  %56 = load %struct.hv*, %struct.hv** %hash.addr, align 8
  %sv_flags61 = getelementptr inbounds %struct.hv, %struct.hv* %56, i32 0, i32 2
  %57 = load i32, i32* %sv_flags61, align 4
  %and62 = and i32 %57, 57344
  %tobool63 = icmp ne i32 %and62, 0
  br i1 %tobool63, label %if.then.64, label %if.end.75

if.then.64:                                       ; preds = %if.else.58
  %58 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags65 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 2
  %59 = load i32, i32* %sv_flags65, align 4
  %and66 = and i32 %59, 16384
  %tobool67 = icmp ne i32 %and66, 0
  br i1 %tobool67, label %if.then.68, label %if.end.70

if.then.68:                                       ; preds = %if.then.64
  %60 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %call69 = call i32 @Perl_mg_set(%struct.sv* %60)
  br label %if.end.70

if.end.70:                                        ; preds = %if.then.68, %if.then.64
  %61 = load %struct.he*, %struct.he** %didstore, align 8
  %tobool71 = icmp ne %struct.he* %61, null
  br i1 %tobool71, label %if.end.74, label %if.then.72

if.then.72:                                       ; preds = %if.end.70
  %62 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %call73 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %62)
  br label %if.end.74

if.end.74:                                        ; preds = %if.then.72, %if.end.70
  br label %if.end.75

if.end.75:                                        ; preds = %if.end.74, %if.else.58
  br label %if.end.76

if.end.76:                                        ; preds = %if.end.75, %if.end.57
  store i8 0, i8* @PL_tainted, align 1
  br label %if.end.77

if.end.77:                                        ; preds = %if.end.76, %entry
  ret void
}

declare void @Perl_av_clear(%struct.av*) #1

declare void @Perl_av_extend(%struct.av*, i32) #1

declare %struct.sv* @Perl_newSVsv(%struct.sv*) #1

declare %struct.sv** @Perl_av_store(%struct.av*, i32, %struct.sv*) #1

declare void @Perl_hv_clear(%struct.hv*) #1

declare %struct.sv* @Perl_newSV(i64) #1

declare signext i8 @Perl_hv_exists_ent(%struct.hv*, %struct.sv*, i32) #1

declare %struct.he* @Perl_hv_store_ent(%struct.hv*, %struct.sv*, %struct.sv*, i32) #1

declare i32 @setuid(i32) #1

declare i32 @getuid() #1

declare i32 @geteuid() #1

declare i32 @setgid(i32) #1

declare i32 @getgid() #1

declare i32 @getegid() #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_qr() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %pm = alloca %struct.pmop*, align 8
  %rv = alloca %struct.sv*, align 8
  %sv = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %2 = bitcast %struct.op* %1 to %struct.pmop*
  store %struct.pmop* %2, %struct.pmop** %pm, align 8
  %call = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call, %struct.sv** %rv, align 8
  %3 = load %struct.sv*, %struct.sv** %rv, align 8
  %call1 = call %struct.sv* @Perl_newSVrv(%struct.sv* %3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0))
  store %struct.sv* %call1, %struct.sv** %sv, align 8
  %4 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmdynflags = getelementptr inbounds %struct.pmop, %struct.pmop* %4, i32 0, i32 16
  %5 = load i8, i8* %op_pmdynflags, align 1
  %conv = zext i8 %5 to i32
  %and = and i32 %conv, 2
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end.4

if.then:                                          ; preds = %entry
  %6 = load i8, i8* @PL_tainting, align 1
  %tobool2 = icmp ne i8 %6, 0
  br i1 %tobool2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %7 = load %struct.sv*, %struct.sv** %rv, align 8
  call void @Perl_sv_taint(%struct.sv* %7)
  br label %if.end

if.end:                                           ; preds = %if.then.3, %if.then
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %entry
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %9 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp = getelementptr inbounds %struct.pmop, %struct.pmop* %9, i32 0, i32 13
  %10 = load %struct.regexp*, %struct.regexp** %op_pmregexp, align 8
  %tobool5 = icmp ne %struct.regexp* %10, null
  br i1 %tobool5, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end.4
  %11 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp6 = getelementptr inbounds %struct.pmop, %struct.pmop* %11, i32 0, i32 13
  %12 = load %struct.regexp*, %struct.regexp** %op_pmregexp6, align 8
  %refcnt = getelementptr inbounds %struct.regexp, %struct.regexp* %12, i32 0, i32 9
  %13 = load i32, i32* %refcnt, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %refcnt, align 4
  %tobool7 = icmp ne i32 %13, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end.4
  %14 = phi i1 [ false, %if.end.4 ], [ %tobool7, %land.rhs ]
  %land.ext = zext i1 %14 to i32
  %15 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp8 = getelementptr inbounds %struct.pmop, %struct.pmop* %15, i32 0, i32 13
  %16 = load %struct.regexp*, %struct.regexp** %op_pmregexp8, align 8
  %17 = bitcast %struct.regexp* %16 to %struct.sv*
  call void @Perl_sv_magic(%struct.sv* %8, %struct.sv* %17, i32 114, i8* null, i32 0)
  %18 = load %struct.sv*, %struct.sv** %rv, align 8
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %19, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %18, %struct.sv** %incdec.ptr, align 8
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %20, %struct.sv*** @PL_stack_sp, align 8
  %21 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 0
  %22 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %22
}

declare %struct.sv* @Perl_sv_newmortal() #1

declare %struct.sv* @Perl_newSVrv(%struct.sv*, i8*) #1

declare void @Perl_sv_taint(%struct.sv*) #1

declare void @Perl_sv_magic(%struct.sv*, %struct.sv*, i32, i8*, i32) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_match() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %pm = alloca %struct.pmop*, align 8
  %dynpm = alloca %struct.pmop*, align 8
  %t = alloca i8*, align 8
  %s = alloca i8*, align 8
  %strend = alloca i8*, align 8
  %global = alloca i32, align 4
  %r_flags = alloca i32, align 4
  %truebase = alloca i8*, align 8
  %rx = alloca %struct.regexp*, align 8
  %rxtainted = alloca i8, align 1
  %gimme = alloca i32, align 4
  %len = alloca i64, align 8
  %minmatch = alloca i32, align 4
  %oldsave = alloca i32, align 4
  %update_minmatch = alloca i32, align 4
  %had_zerolen = alloca i32, align 4
  %mg = alloca %struct.magic*, align 8
  %nparens235 = alloca i32, align 4
  %i = alloca i32, align 4
  %len236 = alloca i32, align 4
  %mg340 = alloca %struct.magic*, align 8
  %tmp = alloca %struct.sv*, align 8
  %mg421 = alloca %struct.magic*, align 8
  %t511 = alloca i8*, align 8
  %off = alloca i32, align 4
  %mg602 = alloca %struct.magic*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %2 = bitcast %struct.op* %1 to %struct.pmop*
  store %struct.pmop* %2, %struct.pmop** %pm, align 8
  %3 = load %struct.pmop*, %struct.pmop** %pm, align 8
  store %struct.pmop* %3, %struct.pmop** %dynpm, align 8
  store i32 2, i32* %r_flags, align 4
  %4 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp = getelementptr inbounds %struct.pmop, %struct.pmop* %4, i32 0, i32 13
  %5 = load %struct.regexp*, %struct.regexp** %op_pmregexp, align 8
  store %struct.regexp* %5, %struct.regexp** %rx, align 8
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 6
  %7 = load i8, i8* %op_flags, align 1
  %conv = zext i8 %7 to i32
  %and = and i32 %conv, 3
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %8 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags1 = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 6
  %9 = load i8, i8* %op_flags1, align 1
  %conv2 = zext i8 %9 to i32
  %and3 = and i32 %conv2, 3
  %cmp = icmp eq i32 %and3, 3
  %cond = select i1 %cmp, i32 1, i32 0
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call i32 @Perl_dowantarray()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond5 = phi i32 [ %cond, %cond.true ], [ %call, %cond.false ]
  store i32 %cond5, i32* %gimme, align 4
  store i32 0, i32* %minmatch, align 4
  %10 = load i32, i32* @PL_savestack_ix, align 4
  store i32 %10, i32* %oldsave, align 4
  store i32 1, i32* %update_minmatch, align 4
  store i32 0, i32* %had_zerolen, align 4
  %11 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags6 = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 6
  %12 = load i8, i8* %op_flags6, align 1
  %conv7 = zext i8 %12 to i32
  %and8 = and i32 %conv7, 64
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %13, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %14 = load %struct.sv*, %struct.sv** %13, align 8
  store %struct.sv* %14, %struct.sv** %targ, align 8
  br label %if.end.14

if.else:                                          ; preds = %cond.end
  %15 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %15, i32 0, i32 0
  %16 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %16, i32 0, i32 7
  %17 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %17, i32 0, i32 0
  %18 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  store %struct.sv* %18, %struct.sv** %targ, align 8
  %19 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %19 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %20 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp10 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp10, label %if.then.12, label %if.end

if.then.12:                                       ; preds = %if.else
  %21 = load %struct.sv**, %struct.sv*** %sp, align 8
  %22 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call13 = call %struct.sv** @Perl_stack_grow(%struct.sv** %21, %struct.sv** %22, i32 1)
  store %struct.sv** %call13, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.12, %if.else
  br label %if.end.14

if.end.14:                                        ; preds = %if.end, %if.then
  %23 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %23, %struct.sv*** @PL_stack_sp, align 8
  %24 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags, align 4
  %and15 = and i32 %25, 262144
  %cmp16 = icmp eq i32 %and15, 262144
  br i1 %cmp16, label %cond.true.18, label %cond.false.21

cond.true.18:                                     ; preds = %if.end.14
  %26 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any19 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 0
  %27 = load i8*, i8** %sv_any19, align 8
  %28 = bitcast i8* %27 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %28, i32 0, i32 1
  %29 = load i64, i64* %xpv_cur, align 8
  store i64 %29, i64* %len, align 8
  %30 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any20 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 0
  %31 = load i8*, i8** %sv_any20, align 8
  %32 = bitcast i8* %31 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %32, i32 0, i32 0
  %33 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end.23

cond.false.21:                                    ; preds = %if.end.14
  %34 = load %struct.sv*, %struct.sv** %targ, align 8
  %call22 = call i8* @Perl_sv_2pv_flags(%struct.sv* %34, i64* %len, i32 2)
  br label %cond.end.23

cond.end.23:                                      ; preds = %cond.false.21, %cond.true.18
  %cond24 = phi i8* [ %33, %cond.true.18 ], [ %call22, %cond.false.21 ]
  store i8* %cond24, i8** %s, align 8
  %35 = load i8*, i8** %s, align 8
  %36 = load i64, i64* %len, align 8
  %add.ptr = getelementptr inbounds i8, i8* %35, i64 %36
  store i8* %add.ptr, i8** %strend, align 8
  %37 = load i8*, i8** %s, align 8
  %tobool25 = icmp ne i8* %37, null
  br i1 %tobool25, label %if.end.28, label %if.then.26

if.then.26:                                       ; preds = %cond.end.23
  %call27 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.12, i32 0, i32 0))
  store %struct.op* %call27, %struct.op** %retval
  br label %return

if.end.28:                                        ; preds = %cond.end.23
  %38 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmdynflags = getelementptr inbounds %struct.pmop, %struct.pmop* %38, i32 0, i32 16
  %39 = load i8, i8* %op_pmdynflags, align 1
  %conv29 = zext i8 %39 to i32
  %and30 = and i32 %conv29, 2
  %tobool31 = icmp ne i32 %and30, 0
  br i1 %tobool31, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end.28
  %40 = load i8, i8* @PL_tainted, align 1
  %conv32 = sext i8 %40 to i32
  %tobool33 = icmp ne i32 %conv32, 0
  br i1 %tobool33, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %41 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmflags = getelementptr inbounds %struct.pmop, %struct.pmop* %41, i32 0, i32 14
  %42 = load i32, i32* %op_pmflags, align 4
  %and34 = and i32 %42, 1
  %tobool35 = icmp ne i32 %and34, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %43 = phi i1 [ false, %lor.rhs ], [ %tobool35, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %if.end.28
  %44 = phi i1 [ true, %if.end.28 ], [ %43, %land.end ]
  %lor.ext = zext i1 %44 to i32
  %conv36 = trunc i32 %lor.ext to i8
  store i8 %conv36, i8* %rxtainted, align 1
  store i8 0, i8* @PL_tainted, align 1
  %45 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 2
  %46 = load i32, i32* %sv_flags37, align 4
  %and38 = and i32 %46, 536870912
  %tobool39 = icmp ne i32 %and38, 0
  br i1 %tobool39, label %land.lhs.true, label %cond.false.44

land.lhs.true:                                    ; preds = %lor.end
  %47 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private = getelementptr inbounds %struct.cop, %struct.cop* %47, i32 0, i32 7
  %48 = load i8, i8* %op_private, align 1
  %conv40 = zext i8 %48 to i32
  %and41 = and i32 %conv40, 8
  %tobool42 = icmp ne i32 %and41, 0
  br i1 %tobool42, label %cond.false.44, label %cond.true.43

cond.true.43:                                     ; preds = %land.lhs.true
  %49 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch = getelementptr inbounds %struct.regexp, %struct.regexp* %49, i32 0, i32 15
  %50 = load i32, i32* %reganch, align 4
  %or = or i32 %50, 268435456
  store i32 %or, i32* %reganch, align 4
  store i8 1, i8* @PL_reg_match_utf8, align 1
  br label %cond.end.47

cond.false.44:                                    ; preds = %land.lhs.true, %lor.end
  %51 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch45 = getelementptr inbounds %struct.regexp, %struct.regexp* %51, i32 0, i32 15
  %52 = load i32, i32* %reganch45, align 4
  %and46 = and i32 %52, -268435457
  store i32 %and46, i32* %reganch45, align 4
  store i8 0, i8* @PL_reg_match_utf8, align 1
  br label %cond.end.47

cond.end.47:                                      ; preds = %cond.false.44, %cond.true.43
  %cond48 = phi i32 [ 1, %cond.true.43 ], [ 0, %cond.false.44 ]
  %53 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmdynflags49 = getelementptr inbounds %struct.pmop, %struct.pmop* %53, i32 0, i32 16
  %54 = load i8, i8* %op_pmdynflags49, align 1
  %conv50 = zext i8 %54 to i32
  %and51 = and i32 %conv50, 1
  %tobool52 = icmp ne i32 %and51, 0
  br i1 %tobool52, label %if.then.53, label %if.end.60

if.then.53:                                       ; preds = %cond.end.47
  br label %failure

failure:                                          ; preds = %if.then.70, %if.then.53
  %55 = load i32, i32* %gimme, align 4
  %cmp54 = icmp eq i32 %55, 1
  br i1 %cmp54, label %if.then.56, label %if.end.57

if.then.56:                                       ; preds = %failure
  %56 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %56, %struct.sv*** @PL_stack_sp, align 8
  %57 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %57, i32 0, i32 0
  %58 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %58, %struct.op** %retval
  br label %return

if.end.57:                                        ; preds = %failure
  %59 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr58 = getelementptr inbounds %struct.sv*, %struct.sv** %59, i32 1
  store %struct.sv** %incdec.ptr58, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_no, %struct.sv** %incdec.ptr58, align 8
  %60 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %60, %struct.sv*** @PL_stack_sp, align 8
  %61 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next59 = getelementptr inbounds %struct.op, %struct.op* %61, i32 0, i32 0
  %62 = load %struct.op*, %struct.op** %op_next59, align 8
  store %struct.op* %62, %struct.op** %retval
  br label %return

if.end.60:                                        ; preds = %cond.end.47
  %63 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %prelen = getelementptr inbounds %struct.regexp, %struct.regexp* %63, i32 0, i32 11
  %64 = load i32, i32* %prelen, align 4
  %tobool61 = icmp ne i32 %64, 0
  br i1 %tobool61, label %if.end.66, label %land.lhs.true.62

land.lhs.true.62:                                 ; preds = %if.end.60
  %65 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  %tobool63 = icmp ne %struct.pmop* %65, null
  br i1 %tobool63, label %if.then.64, label %if.end.66

if.then.64:                                       ; preds = %land.lhs.true.62
  %66 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  store %struct.pmop* %66, %struct.pmop** %pm, align 8
  %67 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp65 = getelementptr inbounds %struct.pmop, %struct.pmop* %67, i32 0, i32 13
  %68 = load %struct.regexp*, %struct.regexp** %op_pmregexp65, align 8
  store %struct.regexp* %68, %struct.regexp** %rx, align 8
  br label %if.end.66

if.end.66:                                        ; preds = %if.then.64, %land.lhs.true.62, %if.end.60
  %69 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %minlen = getelementptr inbounds %struct.regexp, %struct.regexp* %69, i32 0, i32 10
  %70 = load i32, i32* %minlen, align 4
  %71 = load i64, i64* %len, align 8
  %conv67 = trunc i64 %71 to i32
  %cmp68 = icmp sgt i32 %70, %conv67
  br i1 %cmp68, label %if.then.70, label %if.end.71

if.then.70:                                       ; preds = %if.end.66
  br label %failure

if.end.71:                                        ; preds = %if.end.66
  %72 = load i8*, i8** %s, align 8
  store i8* %72, i8** %t, align 8
  store i8* %72, i8** %truebase, align 8
  %73 = load %struct.pmop*, %struct.pmop** %dynpm, align 8
  %op_pmflags72 = getelementptr inbounds %struct.pmop, %struct.pmop* %73, i32 0, i32 14
  %74 = load i32, i32* %op_pmflags72, align 4
  %and73 = and i32 %74, 256
  store i32 %and73, i32* %global, align 4
  %tobool74 = icmp ne i32 %and73, 0
  br i1 %tobool74, label %if.then.75, label %if.end.115

if.then.75:                                       ; preds = %if.end.71
  %75 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %startp = getelementptr inbounds %struct.regexp, %struct.regexp* %75, i32 0, i32 0
  %76 = load i32*, i32** %startp, align 8
  %arrayidx = getelementptr inbounds i32, i32* %76, i64 0
  store i32 -1, i32* %arrayidx, align 4
  %77 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags76 = getelementptr inbounds %struct.sv, %struct.sv* %77, i32 0, i32 2
  %78 = load i32, i32* %sv_flags76, align 4
  %and77 = and i32 %78, 255
  %cmp78 = icmp uge i32 %and77, 7
  br i1 %cmp78, label %land.lhs.true.80, label %if.end.114

land.lhs.true.80:                                 ; preds = %if.then.75
  %79 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any81 = getelementptr inbounds %struct.sv, %struct.sv* %79, i32 0, i32 0
  %80 = load i8*, i8** %sv_any81, align 8
  %81 = bitcast i8* %80 to %struct.xpvmg*
  %xmg_magic = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %81, i32 0, i32 5
  %82 = load %struct.magic*, %struct.magic** %xmg_magic, align 8
  %tobool82 = icmp ne %struct.magic* %82, null
  br i1 %tobool82, label %if.then.83, label %if.end.114

if.then.83:                                       ; preds = %land.lhs.true.80
  %83 = load %struct.sv*, %struct.sv** %targ, align 8
  %call84 = call %struct.magic* @Perl_mg_find(%struct.sv* %83, i32 103)
  store %struct.magic* %call84, %struct.magic** %mg, align 8
  %84 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool85 = icmp ne %struct.magic* %84, null
  br i1 %tobool85, label %land.lhs.true.86, label %if.end.113

land.lhs.true.86:                                 ; preds = %if.then.83
  %85 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %85, i32 0, i32 7
  %86 = load i32, i32* %mg_len, align 4
  %cmp87 = icmp sge i32 %86, 0
  br i1 %cmp87, label %if.then.89, label %if.end.113

if.then.89:                                       ; preds = %land.lhs.true.86
  %87 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch90 = getelementptr inbounds %struct.regexp, %struct.regexp* %87, i32 0, i32 15
  %88 = load i32, i32* %reganch90, align 4
  %and91 = and i32 %88, 128
  %tobool92 = icmp ne i32 %and91, 0
  br i1 %tobool92, label %if.else.98, label %if.then.93

if.then.93:                                       ; preds = %if.then.89
  %89 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len94 = getelementptr inbounds %struct.magic, %struct.magic* %89, i32 0, i32 7
  %90 = load i32, i32* %mg_len94, align 4
  %91 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %startp95 = getelementptr inbounds %struct.regexp, %struct.regexp* %91, i32 0, i32 0
  %92 = load i32*, i32** %startp95, align 8
  %arrayidx96 = getelementptr inbounds i32, i32* %92, i64 0
  store i32 %90, i32* %arrayidx96, align 4
  %93 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %endp = getelementptr inbounds %struct.regexp, %struct.regexp* %93, i32 0, i32 1
  %94 = load i32*, i32** %endp, align 8
  %arrayidx97 = getelementptr inbounds i32, i32* %94, i64 0
  store i32 %90, i32* %arrayidx97, align 4
  br label %if.end.110

if.else.98:                                       ; preds = %if.then.89
  %95 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch99 = getelementptr inbounds %struct.regexp, %struct.regexp* %95, i32 0, i32 15
  %96 = load i32, i32* %reganch99, align 4
  %and100 = and i32 %96, 8
  %tobool101 = icmp ne i32 %and100, 0
  br i1 %tobool101, label %if.then.102, label %if.end.109

if.then.102:                                      ; preds = %if.else.98
  %97 = load i32, i32* %r_flags, align 4
  %or103 = or i32 %97, 8
  store i32 %or103, i32* %r_flags, align 4
  %98 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len104 = getelementptr inbounds %struct.magic, %struct.magic* %98, i32 0, i32 7
  %99 = load i32, i32* %mg_len104, align 4
  %100 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %startp105 = getelementptr inbounds %struct.regexp, %struct.regexp* %100, i32 0, i32 0
  %101 = load i32*, i32** %startp105, align 8
  %arrayidx106 = getelementptr inbounds i32, i32* %101, i64 0
  store i32 %99, i32* %arrayidx106, align 4
  %102 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %endp107 = getelementptr inbounds %struct.regexp, %struct.regexp* %102, i32 0, i32 1
  %103 = load i32*, i32** %endp107, align 8
  %arrayidx108 = getelementptr inbounds i32, i32* %103, i64 0
  store i32 %99, i32* %arrayidx108, align 4
  br label %if.end.109

if.end.109:                                       ; preds = %if.then.102, %if.else.98
  br label %if.end.110

if.end.110:                                       ; preds = %if.end.109, %if.then.93
  %104 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_flags = getelementptr inbounds %struct.magic, %struct.magic* %104, i32 0, i32 4
  %105 = load i8, i8* %mg_flags, align 1
  %conv111 = zext i8 %105 to i32
  %and112 = and i32 %conv111, 1
  store i32 %and112, i32* %minmatch, align 4
  store i32 0, i32* %update_minmatch, align 4
  br label %if.end.113

if.end.113:                                       ; preds = %if.end.110, %land.lhs.true.86, %if.then.83
  br label %if.end.114

if.end.114:                                       ; preds = %if.end.113, %land.lhs.true.80, %if.then.75
  br label %if.end.115

if.end.115:                                       ; preds = %if.end.114, %if.end.71
  %106 = load i32, i32* %global, align 4
  %tobool116 = icmp ne i32 %106, 0
  br i1 %tobool116, label %lor.lhs.false, label %land.lhs.true.117

land.lhs.true.117:                                ; preds = %if.end.115
  %107 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %nparens = getelementptr inbounds %struct.regexp, %struct.regexp* %107, i32 0, i32 12
  %108 = load i32, i32* %nparens, align 4
  %tobool118 = icmp ne i32 %108, 0
  br i1 %tobool118, label %if.then.125, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.117, %if.end.115
  %109 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags119 = getelementptr inbounds %struct.sv, %struct.sv* %109, i32 0, i32 2
  %110 = load i32, i32* %sv_flags119, align 4
  %and120 = and i32 %110, 2048
  %tobool121 = icmp ne i32 %and120, 0
  br i1 %tobool121, label %if.then.125, label %lor.lhs.false.122

lor.lhs.false.122:                                ; preds = %lor.lhs.false
  %111 = load i8, i8* @PL_sawampersand, align 1
  %conv123 = sext i8 %111 to i32
  %tobool124 = icmp ne i32 %conv123, 0
  br i1 %tobool124, label %if.then.125, label %if.end.127

if.then.125:                                      ; preds = %lor.lhs.false.122, %lor.lhs.false, %land.lhs.true.117
  %112 = load i32, i32* %r_flags, align 4
  %or126 = or i32 %112, 1
  store i32 %or126, i32* %r_flags, align 4
  br label %if.end.127

if.end.127:                                       ; preds = %if.then.125, %lor.lhs.false.122
  %113 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags128 = getelementptr inbounds %struct.sv, %struct.sv* %113, i32 0, i32 2
  %114 = load i32, i32* %sv_flags128, align 4
  %and129 = and i32 %114, 134217728
  %tobool130 = icmp ne i32 %and129, 0
  br i1 %tobool130, label %if.then.131, label %if.end.133

if.then.131:                                      ; preds = %if.end.127
  %115 = load i32, i32* %r_flags, align 4
  %or132 = or i32 %115, 4
  store i32 %or132, i32* %r_flags, align 4
  br label %if.end.133

if.end.133:                                       ; preds = %if.then.131, %if.end.127
  %116 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmflags134 = getelementptr inbounds %struct.pmop, %struct.pmop* %116, i32 0, i32 14
  %117 = load i32, i32* %op_pmflags134, align 4
  %and135 = and i32 %117, 12288
  %tobool136 = icmp ne i32 %and135, 0
  br i1 %tobool136, label %if.then.137, label %if.end.140

if.then.137:                                      ; preds = %if.end.133
  call void @Perl_save_int(i32* @PL_multiline)
  %118 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmflags138 = getelementptr inbounds %struct.pmop, %struct.pmop* %118, i32 0, i32 14
  %119 = load i32, i32* %op_pmflags138, align 4
  %and139 = and i32 %119, 4096
  store i32 %and139, i32* @PL_multiline, align 4
  br label %if.end.140

if.end.140:                                       ; preds = %if.then.137, %if.end.133
  br label %play_it_again

play_it_again:                                    ; preds = %land.end.394, %if.end.140
  %120 = load i32, i32* %global, align 4
  %tobool141 = icmp ne i32 %120, 0
  br i1 %tobool141, label %land.lhs.true.142, label %if.end.161

land.lhs.true.142:                                ; preds = %play_it_again
  %121 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %startp143 = getelementptr inbounds %struct.regexp, %struct.regexp* %121, i32 0, i32 0
  %122 = load i32*, i32** %startp143, align 8
  %arrayidx144 = getelementptr inbounds i32, i32* %122, i64 0
  %123 = load i32, i32* %arrayidx144, align 4
  %cmp145 = icmp ne i32 %123, -1
  br i1 %cmp145, label %if.then.147, label %if.end.161

if.then.147:                                      ; preds = %land.lhs.true.142
  %124 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %endp148 = getelementptr inbounds %struct.regexp, %struct.regexp* %124, i32 0, i32 1
  %125 = load i32*, i32** %endp148, align 8
  %arrayidx149 = getelementptr inbounds i32, i32* %125, i64 0
  %126 = load i32, i32* %arrayidx149, align 4
  %127 = load i8*, i8** %truebase, align 8
  %idx.ext = sext i32 %126 to i64
  %add.ptr150 = getelementptr inbounds i8, i8* %127, i64 %idx.ext
  store i8* %add.ptr150, i8** %s, align 8
  store i8* %add.ptr150, i8** %t, align 8
  %128 = load i8*, i8** %s, align 8
  %129 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %minlen151 = getelementptr inbounds %struct.regexp, %struct.regexp* %129, i32 0, i32 10
  %130 = load i32, i32* %minlen151, align 4
  %idx.ext152 = sext i32 %130 to i64
  %add.ptr153 = getelementptr inbounds i8, i8* %128, i64 %idx.ext152
  %131 = load i8*, i8** %strend, align 8
  %cmp154 = icmp ugt i8* %add.ptr153, %131
  br i1 %cmp154, label %if.then.156, label %if.end.157

if.then.156:                                      ; preds = %if.then.147
  br label %nope

if.end.157:                                       ; preds = %if.then.147
  %132 = load i32, i32* %update_minmatch, align 4
  %inc = add nsw i32 %132, 1
  store i32 %inc, i32* %update_minmatch, align 4
  %tobool158 = icmp ne i32 %132, 0
  br i1 %tobool158, label %if.then.159, label %if.end.160

if.then.159:                                      ; preds = %if.end.157
  %133 = load i32, i32* %had_zerolen, align 4
  store i32 %133, i32* %minmatch, align 4
  br label %if.end.160

if.end.160:                                       ; preds = %if.then.159, %if.end.157
  br label %if.end.161

if.end.161:                                       ; preds = %if.end.160, %land.lhs.true.142, %play_it_again
  %134 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch162 = getelementptr inbounds %struct.regexp, %struct.regexp* %134, i32 0, i32 15
  %135 = load i32, i32* %reganch162, align 4
  %and163 = and i32 %135, 3145728
  %tobool164 = icmp ne i32 %and163, 0
  br i1 %tobool164, label %land.lhs.true.165, label %if.end.208

land.lhs.true.165:                                ; preds = %if.end.161
  %136 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags166 = getelementptr inbounds %struct.sv, %struct.sv* %136, i32 0, i32 2
  %137 = load i32, i32* %sv_flags166, align 4
  %and167 = and i32 %137, 536870912
  %tobool168 = icmp ne i32 %and167, 0
  br i1 %tobool168, label %land.rhs.169, label %land.end.174

land.rhs.169:                                     ; preds = %land.lhs.true.165
  %138 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private170 = getelementptr inbounds %struct.cop, %struct.cop* %138, i32 0, i32 7
  %139 = load i8, i8* %op_private170, align 1
  %conv171 = zext i8 %139 to i32
  %and172 = and i32 %conv171, 8
  %tobool173 = icmp ne i32 %and172, 0
  %lnot = xor i1 %tobool173, true
  br label %land.end.174

land.end.174:                                     ; preds = %land.rhs.169, %land.lhs.true.165
  %140 = phi i1 [ false, %land.lhs.true.165 ], [ %lnot, %land.rhs.169 ]
  %land.ext = zext i1 %140 to i32
  %141 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch175 = getelementptr inbounds %struct.regexp, %struct.regexp* %141, i32 0, i32 15
  %142 = load i32, i32* %reganch175, align 4
  %and176 = and i32 %142, 65536
  %cmp177 = icmp ne i32 %and176, 0
  %conv178 = zext i1 %cmp177 to i32
  %cmp179 = icmp eq i32 %land.ext, %conv178
  br i1 %cmp179, label %if.then.181, label %if.end.208

if.then.181:                                      ; preds = %land.end.174
  %143 = load i8*, i8** %truebase, align 8
  store i8* %143, i8** @PL_bostr, align 8
  %144 = load i8* (%struct.regexp*, %struct.sv*, i8*, i8*, i32, %struct.re_scream_pos_data_s*)*, i8* (%struct.regexp*, %struct.sv*, i8*, i8*, i32, %struct.re_scream_pos_data_s*)** @PL_regint_start, align 8
  %145 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %146 = load %struct.sv*, %struct.sv** %targ, align 8
  %147 = load i8*, i8** %s, align 8
  %148 = load i8*, i8** %strend, align 8
  %149 = load i32, i32* %r_flags, align 4
  %call182 = call i8* %144(%struct.regexp* %145, %struct.sv* %146, i8* %147, i8* %148, i32 %149, %struct.re_scream_pos_data_s* null)
  store i8* %call182, i8** %s, align 8
  %150 = load i8*, i8** %s, align 8
  %tobool183 = icmp ne i8* %150, null
  br i1 %tobool183, label %if.end.185, label %if.then.184

if.then.184:                                      ; preds = %if.then.181
  br label %nope

if.end.185:                                       ; preds = %if.then.181
  %151 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch186 = getelementptr inbounds %struct.regexp, %struct.regexp* %151, i32 0, i32 15
  %152 = load i32, i32* %reganch186, align 4
  %and187 = and i32 %152, 256
  %tobool188 = icmp ne i32 %and187, 0
  br i1 %tobool188, label %land.lhs.true.189, label %if.end.207

land.lhs.true.189:                                ; preds = %if.end.185
  %153 = load i8, i8* @PL_sawampersand, align 1
  %tobool190 = icmp ne i8 %153, 0
  br i1 %tobool190, label %if.end.207, label %land.lhs.true.191

land.lhs.true.191:                                ; preds = %land.lhs.true.189
  %154 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch192 = getelementptr inbounds %struct.regexp, %struct.regexp* %154, i32 0, i32 15
  %155 = load i32, i32* %reganch192, align 4
  %and193 = and i32 %155, 64
  %tobool194 = icmp ne i32 %and193, 0
  br i1 %tobool194, label %land.lhs.true.202, label %lor.lhs.false.195

lor.lhs.false.195:                                ; preds = %land.lhs.true.191
  %156 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch196 = getelementptr inbounds %struct.regexp, %struct.regexp* %156, i32 0, i32 15
  %157 = load i32, i32* %reganch196, align 4
  %and197 = and i32 %157, 134217728
  %tobool198 = icmp ne i32 %and197, 0
  br i1 %tobool198, label %land.lhs.true.199, label %land.lhs.true.202

land.lhs.true.199:                                ; preds = %lor.lhs.false.195
  %158 = load i32, i32* %r_flags, align 4
  %and200 = and i32 %158, 4
  %tobool201 = icmp ne i32 %and200, 0
  br i1 %tobool201, label %if.end.207, label %land.lhs.true.202

land.lhs.true.202:                                ; preds = %land.lhs.true.199, %lor.lhs.false.195, %land.lhs.true.191
  %159 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags203 = getelementptr inbounds %struct.sv, %struct.sv* %159, i32 0, i32 2
  %160 = load i32, i32* %sv_flags203, align 4
  %and204 = and i32 %160, 524288
  %tobool205 = icmp ne i32 %and204, 0
  br i1 %tobool205, label %if.end.207, label %if.then.206

if.then.206:                                      ; preds = %land.lhs.true.202
  br label %yup

if.end.207:                                       ; preds = %land.lhs.true.202, %land.lhs.true.199, %land.lhs.true.189, %if.end.185
  br label %if.end.208

if.end.208:                                       ; preds = %if.end.207, %land.end.174, %if.end.161
  %161 = load i32 (%struct.regexp*, i8*, i8*, i8*, i32, %struct.sv*, i8*, i32)*, i32 (%struct.regexp*, i8*, i8*, i8*, i32, %struct.sv*, i8*, i32)** @PL_regexecp, align 8
  %162 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %163 = load i8*, i8** %s, align 8
  %164 = load i8*, i8** %strend, align 8
  %165 = load i8*, i8** %truebase, align 8
  %166 = load i32, i32* %minmatch, align 4
  %167 = load %struct.sv*, %struct.sv** %targ, align 8
  %168 = load i32, i32* %r_flags, align 4
  %call209 = call i32 %161(%struct.regexp* %162, i8* %163, i8* %164, i8* %165, i32 %166, %struct.sv* %167, i8* null, i32 %168)
  %tobool210 = icmp ne i32 %call209, 0
  br i1 %tobool210, label %if.then.211, label %if.else.221

if.then.211:                                      ; preds = %if.end.208
  %169 = load %struct.pmop*, %struct.pmop** %pm, align 8
  store %struct.pmop* %169, %struct.pmop** @PL_curpm, align 8
  %170 = load %struct.pmop*, %struct.pmop** %dynpm, align 8
  %op_pmflags212 = getelementptr inbounds %struct.pmop, %struct.pmop* %170, i32 0, i32 14
  %171 = load i32, i32* %op_pmflags212, align 4
  %and213 = and i32 %171, 2
  %tobool214 = icmp ne i32 %and213, 0
  br i1 %tobool214, label %if.then.215, label %if.end.220

if.then.215:                                      ; preds = %if.then.211
  %172 = load %struct.pmop*, %struct.pmop** %dynpm, align 8
  %op_pmdynflags216 = getelementptr inbounds %struct.pmop, %struct.pmop* %172, i32 0, i32 16
  %173 = load i8, i8* %op_pmdynflags216, align 1
  %conv217 = zext i8 %173 to i32
  %or218 = or i32 %conv217, 1
  %conv219 = trunc i32 %or218 to i8
  store i8 %conv219, i8* %op_pmdynflags216, align 1
  br label %if.end.220

if.end.220:                                       ; preds = %if.then.215, %if.then.211
  br label %gotcha

if.else.221:                                      ; preds = %if.end.208
  br label %ret_no

gotcha:                                           ; preds = %if.end.530, %if.end.220
  %174 = load i8, i8* %rxtainted, align 1
  %tobool222 = icmp ne i8 %174, 0
  br i1 %tobool222, label %if.then.223, label %if.end.226

if.then.223:                                      ; preds = %gotcha
  %175 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch224 = getelementptr inbounds %struct.regexp, %struct.regexp* %175, i32 0, i32 15
  %176 = load i32, i32* %reganch224, align 4
  %or225 = or i32 %176, 524288
  store i32 %or225, i32* %reganch224, align 4
  br label %if.end.226

if.end.226:                                       ; preds = %if.then.223, %gotcha
  %177 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch227 = getelementptr inbounds %struct.regexp, %struct.regexp* %177, i32 0, i32 15
  %178 = load i32, i32* %reganch227, align 4
  %and228 = and i32 %178, 524288
  %tobool229 = icmp ne i32 %and228, 0
  br i1 %tobool229, label %if.then.230, label %if.end.231

if.then.230:                                      ; preds = %if.end.226
  store i8 1, i8* @PL_tainted, align 1
  br label %if.end.231

if.end.231:                                       ; preds = %if.then.230, %if.end.226
  %179 = load i32, i32* %gimme, align 4
  %cmp232 = icmp eq i32 %179, 1
  br i1 %cmp232, label %if.then.234, label %if.else.417

if.then.234:                                      ; preds = %if.end.231
  %180 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %nparens237 = getelementptr inbounds %struct.regexp, %struct.regexp* %180, i32 0, i32 12
  %181 = load i32, i32* %nparens237, align 4
  store i32 %181, i32* %nparens235, align 4
  %182 = load i32, i32* %global, align 4
  %tobool238 = icmp ne i32 %182, 0
  br i1 %tobool238, label %land.lhs.true.239, label %if.else.242

land.lhs.true.239:                                ; preds = %if.then.234
  %183 = load i32, i32* %nparens235, align 4
  %tobool240 = icmp ne i32 %183, 0
  br i1 %tobool240, label %if.else.242, label %if.then.241

if.then.241:                                      ; preds = %land.lhs.true.239
  store i32 1, i32* %i, align 4
  br label %if.end.243

if.else.242:                                      ; preds = %land.lhs.true.239, %if.then.234
  store i32 0, i32* %i, align 4
  br label %if.end.243

if.end.243:                                       ; preds = %if.else.242, %if.then.241
  %184 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %184, %struct.sv*** %sp, align 8
  %185 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %186 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast244 = ptrtoint %struct.sv** %185 to i64
  %sub.ptr.rhs.cast245 = ptrtoint %struct.sv** %186 to i64
  %sub.ptr.sub246 = sub i64 %sub.ptr.lhs.cast244, %sub.ptr.rhs.cast245
  %sub.ptr.div247 = sdiv exact i64 %sub.ptr.sub246, 8
  %187 = load i32, i32* %nparens235, align 4
  %188 = load i32, i32* %i, align 4
  %add = add nsw i32 %187, %188
  %conv248 = sext i32 %add to i64
  %cmp249 = icmp slt i64 %sub.ptr.div247, %conv248
  br i1 %cmp249, label %if.then.251, label %if.end.254

if.then.251:                                      ; preds = %if.end.243
  %189 = load %struct.sv**, %struct.sv*** %sp, align 8
  %190 = load %struct.sv**, %struct.sv*** %sp, align 8
  %191 = load i32, i32* %nparens235, align 4
  %192 = load i32, i32* %i, align 4
  %add252 = add nsw i32 %191, %192
  %call253 = call %struct.sv** @Perl_stack_grow(%struct.sv** %189, %struct.sv** %190, i32 %add252)
  store %struct.sv** %call253, %struct.sv*** %sp, align 8
  br label %if.end.254

if.end.254:                                       ; preds = %if.then.251, %if.end.243
  %193 = load i32, i32* @PL_tmps_ix, align 4
  %194 = load i32, i32* %nparens235, align 4
  %195 = load i32, i32* %i, align 4
  %add255 = add nsw i32 %194, %195
  %add256 = add nsw i32 %193, %add255
  %196 = load i32, i32* @PL_tmps_max, align 4
  %cmp257 = icmp sge i32 %add256, %196
  br i1 %cmp257, label %if.then.259, label %if.end.261

if.then.259:                                      ; preds = %if.end.254
  %197 = load i32, i32* %nparens235, align 4
  %198 = load i32, i32* %i, align 4
  %add260 = add nsw i32 %197, %198
  call void @Perl_tmps_grow(i32 %add260)
  br label %if.end.261

if.end.261:                                       ; preds = %if.then.259, %if.end.254
  %199 = load i32, i32* %i, align 4
  %tobool262 = icmp ne i32 %199, 0
  %lnot263 = xor i1 %tobool262, true
  %lnot.ext = zext i1 %lnot263 to i32
  store i32 %lnot.ext, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.261
  %200 = load i32, i32* %i, align 4
  %201 = load i32, i32* %nparens235, align 4
  %cmp264 = icmp sle i32 %200, %201
  br i1 %cmp264, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call266 = call %struct.sv* @Perl_sv_newmortal()
  %202 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr267 = getelementptr inbounds %struct.sv*, %struct.sv** %202, i32 1
  store %struct.sv** %incdec.ptr267, %struct.sv*** %sp, align 8
  store %struct.sv* %call266, %struct.sv** %incdec.ptr267, align 8
  %203 = load i32, i32* %i, align 4
  %idxprom = sext i32 %203 to i64
  %204 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %startp268 = getelementptr inbounds %struct.regexp, %struct.regexp* %204, i32 0, i32 0
  %205 = load i32*, i32** %startp268, align 8
  %arrayidx269 = getelementptr inbounds i32, i32* %205, i64 %idxprom
  %206 = load i32, i32* %arrayidx269, align 4
  %cmp270 = icmp ne i32 %206, -1
  br i1 %cmp270, label %land.lhs.true.272, label %if.end.332

land.lhs.true.272:                                ; preds = %for.body
  %207 = load i32, i32* %i, align 4
  %idxprom273 = sext i32 %207 to i64
  %208 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %endp274 = getelementptr inbounds %struct.regexp, %struct.regexp* %208, i32 0, i32 1
  %209 = load i32*, i32** %endp274, align 8
  %arrayidx275 = getelementptr inbounds i32, i32* %209, i64 %idxprom273
  %210 = load i32, i32* %arrayidx275, align 4
  %cmp276 = icmp ne i32 %210, -1
  br i1 %cmp276, label %if.then.278, label %if.end.332

if.then.278:                                      ; preds = %land.lhs.true.272
  %211 = load i32, i32* %i, align 4
  %idxprom279 = sext i32 %211 to i64
  %212 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %endp280 = getelementptr inbounds %struct.regexp, %struct.regexp* %212, i32 0, i32 1
  %213 = load i32*, i32** %endp280, align 8
  %arrayidx281 = getelementptr inbounds i32, i32* %213, i64 %idxprom279
  %214 = load i32, i32* %arrayidx281, align 4
  %215 = load i32, i32* %i, align 4
  %idxprom282 = sext i32 %215 to i64
  %216 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %startp283 = getelementptr inbounds %struct.regexp, %struct.regexp* %216, i32 0, i32 0
  %217 = load i32*, i32** %startp283, align 8
  %arrayidx284 = getelementptr inbounds i32, i32* %217, i64 %idxprom282
  %218 = load i32, i32* %arrayidx284, align 4
  %sub = sub nsw i32 %214, %218
  store i32 %sub, i32* %len236, align 4
  %219 = load i32, i32* %i, align 4
  %idxprom285 = sext i32 %219 to i64
  %220 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %startp286 = getelementptr inbounds %struct.regexp, %struct.regexp* %220, i32 0, i32 0
  %221 = load i32*, i32** %startp286, align 8
  %arrayidx287 = getelementptr inbounds i32, i32* %221, i64 %idxprom285
  %222 = load i32, i32* %arrayidx287, align 4
  %223 = load i8*, i8** %truebase, align 8
  %idx.ext288 = sext i32 %222 to i64
  %add.ptr289 = getelementptr inbounds i8, i8* %223, i64 %idx.ext288
  store i8* %add.ptr289, i8** %s, align 8
  %224 = load i32, i32* %i, align 4
  %idxprom290 = sext i32 %224 to i64
  %225 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %endp291 = getelementptr inbounds %struct.regexp, %struct.regexp* %225, i32 0, i32 1
  %226 = load i32*, i32** %endp291, align 8
  %arrayidx292 = getelementptr inbounds i32, i32* %226, i64 %idxprom290
  %227 = load i32, i32* %arrayidx292, align 4
  %cmp293 = icmp slt i32 %227, 0
  br i1 %cmp293, label %if.then.311, label %lor.lhs.false.295

lor.lhs.false.295:                                ; preds = %if.then.278
  %228 = load i32, i32* %i, align 4
  %idxprom296 = sext i32 %228 to i64
  %229 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %startp297 = getelementptr inbounds %struct.regexp, %struct.regexp* %229, i32 0, i32 0
  %230 = load i32*, i32** %startp297, align 8
  %arrayidx298 = getelementptr inbounds i32, i32* %230, i64 %idxprom296
  %231 = load i32, i32* %arrayidx298, align 4
  %cmp299 = icmp slt i32 %231, 0
  br i1 %cmp299, label %if.then.311, label %lor.lhs.false.301

lor.lhs.false.301:                                ; preds = %lor.lhs.false.295
  %232 = load i32, i32* %len236, align 4
  %cmp302 = icmp slt i32 %232, 0
  br i1 %cmp302, label %if.then.311, label %lor.lhs.false.304

lor.lhs.false.304:                                ; preds = %lor.lhs.false.301
  %233 = load i32, i32* %len236, align 4
  %conv305 = sext i32 %233 to i64
  %234 = load i8*, i8** %strend, align 8
  %235 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast306 = ptrtoint i8* %234 to i64
  %sub.ptr.rhs.cast307 = ptrtoint i8* %235 to i64
  %sub.ptr.sub308 = sub i64 %sub.ptr.lhs.cast306, %sub.ptr.rhs.cast307
  %cmp309 = icmp sgt i64 %conv305, %sub.ptr.sub308
  br i1 %cmp309, label %if.then.311, label %if.end.313

if.then.311:                                      ; preds = %lor.lhs.false.304, %lor.lhs.false.301, %lor.lhs.false.295, %if.then.278
  %call312 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.13, i32 0, i32 0))
  store %struct.op* %call312, %struct.op** %retval
  br label %return

if.end.313:                                       ; preds = %lor.lhs.false.304
  %236 = load %struct.sv**, %struct.sv*** %sp, align 8
  %237 = load %struct.sv*, %struct.sv** %236, align 8
  %238 = load i8*, i8** %s, align 8
  %239 = load i32, i32* %len236, align 4
  %conv314 = sext i32 %239 to i64
  call void @Perl_sv_setpvn(%struct.sv* %237, i8* %238, i64 %conv314)
  %240 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags315 = getelementptr inbounds %struct.sv, %struct.sv* %240, i32 0, i32 2
  %241 = load i32, i32* %sv_flags315, align 4
  %and316 = and i32 %241, 536870912
  %tobool317 = icmp ne i32 %and316, 0
  br i1 %tobool317, label %land.lhs.true.318, label %if.end.331

land.lhs.true.318:                                ; preds = %if.end.313
  %242 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private319 = getelementptr inbounds %struct.cop, %struct.cop* %242, i32 0, i32 7
  %243 = load i8, i8* %op_private319, align 1
  %conv320 = zext i8 %243 to i32
  %and321 = and i32 %conv320, 8
  %tobool322 = icmp ne i32 %and321, 0
  br i1 %tobool322, label %if.end.331, label %land.lhs.true.323

land.lhs.true.323:                                ; preds = %land.lhs.true.318
  %244 = load i8*, i8** %s, align 8
  %245 = load i32, i32* %len236, align 4
  %conv324 = sext i32 %245 to i64
  %call325 = call signext i8 @Perl_is_utf8_string(i8* %244, i64 %conv324)
  %conv326 = sext i8 %call325 to i32
  %tobool327 = icmp ne i32 %conv326, 0
  br i1 %tobool327, label %if.then.328, label %if.end.331

if.then.328:                                      ; preds = %land.lhs.true.323
  %246 = load %struct.sv**, %struct.sv*** %sp, align 8
  %247 = load %struct.sv*, %struct.sv** %246, align 8
  %sv_flags329 = getelementptr inbounds %struct.sv, %struct.sv* %247, i32 0, i32 2
  %248 = load i32, i32* %sv_flags329, align 4
  %or330 = or i32 %248, 536870912
  store i32 %or330, i32* %sv_flags329, align 4
  br label %if.end.331

if.end.331:                                       ; preds = %if.then.328, %land.lhs.true.323, %land.lhs.true.318, %if.end.313
  br label %if.end.332

if.end.332:                                       ; preds = %if.end.331, %land.lhs.true.272, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.332
  %249 = load i32, i32* %i, align 4
  %inc333 = add nsw i32 %249, 1
  store i32 %inc333, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %250 = load i32, i32* %global, align 4
  %tobool334 = icmp ne i32 %250, 0
  br i1 %tobool334, label %if.then.335, label %if.else.397

if.then.335:                                      ; preds = %for.end
  %251 = load %struct.pmop*, %struct.pmop** %dynpm, align 8
  %op_pmflags336 = getelementptr inbounds %struct.pmop, %struct.pmop* %251, i32 0, i32 14
  %252 = load i32, i32* %op_pmflags336, align 4
  %and337 = and i32 %252, 512
  %tobool338 = icmp ne i32 %and337, 0
  br i1 %tobool338, label %if.then.339, label %if.end.382

if.then.339:                                      ; preds = %if.then.335
  store %struct.magic* null, %struct.magic** %mg340, align 8
  %253 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags341 = getelementptr inbounds %struct.sv, %struct.sv* %253, i32 0, i32 2
  %254 = load i32, i32* %sv_flags341, align 4
  %and342 = and i32 %254, 255
  %cmp343 = icmp uge i32 %and342, 7
  br i1 %cmp343, label %land.lhs.true.345, label %if.end.351

land.lhs.true.345:                                ; preds = %if.then.339
  %255 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any346 = getelementptr inbounds %struct.sv, %struct.sv* %255, i32 0, i32 0
  %256 = load i8*, i8** %sv_any346, align 8
  %257 = bitcast i8* %256 to %struct.xpvmg*
  %xmg_magic347 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %257, i32 0, i32 5
  %258 = load %struct.magic*, %struct.magic** %xmg_magic347, align 8
  %tobool348 = icmp ne %struct.magic* %258, null
  br i1 %tobool348, label %if.then.349, label %if.end.351

if.then.349:                                      ; preds = %land.lhs.true.345
  %259 = load %struct.sv*, %struct.sv** %targ, align 8
  %call350 = call %struct.magic* @Perl_mg_find(%struct.sv* %259, i32 103)
  store %struct.magic* %call350, %struct.magic** %mg340, align 8
  br label %if.end.351

if.end.351:                                       ; preds = %if.then.349, %land.lhs.true.345, %if.then.339
  %260 = load %struct.magic*, %struct.magic** %mg340, align 8
  %tobool352 = icmp ne %struct.magic* %260, null
  br i1 %tobool352, label %if.end.355, label %if.then.353

if.then.353:                                      ; preds = %if.end.351
  %261 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_magic(%struct.sv* %261, %struct.sv* null, i32 103, i8* null, i32 0)
  %262 = load %struct.sv*, %struct.sv** %targ, align 8
  %call354 = call %struct.magic* @Perl_mg_find(%struct.sv* %262, i32 103)
  store %struct.magic* %call354, %struct.magic** %mg340, align 8
  br label %if.end.355

if.end.355:                                       ; preds = %if.then.353, %if.end.351
  %263 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %startp356 = getelementptr inbounds %struct.regexp, %struct.regexp* %263, i32 0, i32 0
  %264 = load i32*, i32** %startp356, align 8
  %arrayidx357 = getelementptr inbounds i32, i32* %264, i64 0
  %265 = load i32, i32* %arrayidx357, align 4
  %cmp358 = icmp ne i32 %265, -1
  br i1 %cmp358, label %if.then.360, label %if.end.381

if.then.360:                                      ; preds = %if.end.355
  %266 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %endp361 = getelementptr inbounds %struct.regexp, %struct.regexp* %266, i32 0, i32 1
  %267 = load i32*, i32** %endp361, align 8
  %arrayidx362 = getelementptr inbounds i32, i32* %267, i64 0
  %268 = load i32, i32* %arrayidx362, align 4
  %269 = load %struct.magic*, %struct.magic** %mg340, align 8
  %mg_len363 = getelementptr inbounds %struct.magic, %struct.magic* %269, i32 0, i32 7
  store i32 %268, i32* %mg_len363, align 4
  %270 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %startp364 = getelementptr inbounds %struct.regexp, %struct.regexp* %270, i32 0, i32 0
  %271 = load i32*, i32** %startp364, align 8
  %arrayidx365 = getelementptr inbounds i32, i32* %271, i64 0
  %272 = load i32, i32* %arrayidx365, align 4
  %273 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %endp366 = getelementptr inbounds %struct.regexp, %struct.regexp* %273, i32 0, i32 1
  %274 = load i32*, i32** %endp366, align 8
  %arrayidx367 = getelementptr inbounds i32, i32* %274, i64 0
  %275 = load i32, i32* %arrayidx367, align 4
  %cmp368 = icmp eq i32 %272, %275
  br i1 %cmp368, label %if.then.370, label %if.else.375

if.then.370:                                      ; preds = %if.then.360
  %276 = load %struct.magic*, %struct.magic** %mg340, align 8
  %mg_flags371 = getelementptr inbounds %struct.magic, %struct.magic* %276, i32 0, i32 4
  %277 = load i8, i8* %mg_flags371, align 1
  %conv372 = zext i8 %277 to i32
  %or373 = or i32 %conv372, 1
  %conv374 = trunc i32 %or373 to i8
  store i8 %conv374, i8* %mg_flags371, align 1
  br label %if.end.380

if.else.375:                                      ; preds = %if.then.360
  %278 = load %struct.magic*, %struct.magic** %mg340, align 8
  %mg_flags376 = getelementptr inbounds %struct.magic, %struct.magic* %278, i32 0, i32 4
  %279 = load i8, i8* %mg_flags376, align 1
  %conv377 = zext i8 %279 to i32
  %and378 = and i32 %conv377, -2
  %conv379 = trunc i32 %and378 to i8
  store i8 %conv379, i8* %mg_flags376, align 1
  br label %if.end.380

if.end.380:                                       ; preds = %if.else.375, %if.then.370
  br label %if.end.381

if.end.381:                                       ; preds = %if.end.380, %if.end.355
  br label %if.end.382

if.end.382:                                       ; preds = %if.end.381, %if.then.335
  %280 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %startp383 = getelementptr inbounds %struct.regexp, %struct.regexp* %280, i32 0, i32 0
  %281 = load i32*, i32** %startp383, align 8
  %arrayidx384 = getelementptr inbounds i32, i32* %281, i64 0
  %282 = load i32, i32* %arrayidx384, align 4
  %cmp385 = icmp ne i32 %282, -1
  br i1 %cmp385, label %land.rhs.387, label %land.end.394

land.rhs.387:                                     ; preds = %if.end.382
  %283 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %startp388 = getelementptr inbounds %struct.regexp, %struct.regexp* %283, i32 0, i32 0
  %284 = load i32*, i32** %startp388, align 8
  %arrayidx389 = getelementptr inbounds i32, i32* %284, i64 0
  %285 = load i32, i32* %arrayidx389, align 4
  %286 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %endp390 = getelementptr inbounds %struct.regexp, %struct.regexp* %286, i32 0, i32 1
  %287 = load i32*, i32** %endp390, align 8
  %arrayidx391 = getelementptr inbounds i32, i32* %287, i64 0
  %288 = load i32, i32* %arrayidx391, align 4
  %cmp392 = icmp eq i32 %285, %288
  br label %land.end.394

land.end.394:                                     ; preds = %land.rhs.387, %if.end.382
  %289 = phi i1 [ false, %if.end.382 ], [ %cmp392, %land.rhs.387 ]
  %land.ext395 = zext i1 %289 to i32
  store i32 %land.ext395, i32* %had_zerolen, align 4
  %290 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %290, %struct.sv*** @PL_stack_sp, align 8
  %291 = load i32, i32* %r_flags, align 4
  %or396 = or i32 %291, 24
  store i32 %or396, i32* %r_flags, align 4
  br label %play_it_again

if.else.397:                                      ; preds = %for.end
  %292 = load i32, i32* %nparens235, align 4
  %tobool398 = icmp ne i32 %292, 0
  br i1 %tobool398, label %if.end.410, label %if.then.399

if.then.399:                                      ; preds = %if.else.397
  %293 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %294 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast400 = ptrtoint %struct.sv** %293 to i64
  %sub.ptr.rhs.cast401 = ptrtoint %struct.sv** %294 to i64
  %sub.ptr.sub402 = sub i64 %sub.ptr.lhs.cast400, %sub.ptr.rhs.cast401
  %sub.ptr.div403 = sdiv exact i64 %sub.ptr.sub402, 8
  %cmp404 = icmp slt i64 %sub.ptr.div403, 1
  br i1 %cmp404, label %if.then.406, label %if.end.408

if.then.406:                                      ; preds = %if.then.399
  %295 = load %struct.sv**, %struct.sv*** %sp, align 8
  %296 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call407 = call %struct.sv** @Perl_stack_grow(%struct.sv** %295, %struct.sv** %296, i32 1)
  store %struct.sv** %call407, %struct.sv*** %sp, align 8
  br label %if.end.408

if.end.408:                                       ; preds = %if.then.406, %if.then.399
  %297 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr409 = getelementptr inbounds %struct.sv*, %struct.sv** %297, i32 1
  store %struct.sv** %incdec.ptr409, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr409, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %tmp
  %298 = load %struct.sv*, %struct.sv** %tmp
  br label %if.end.410

if.end.410:                                       ; preds = %if.end.408, %if.else.397
  br label %if.end.411

if.end.411:                                       ; preds = %if.end.410
  %299 = load i32, i32* @PL_savestack_ix, align 4
  %300 = load i32, i32* %oldsave, align 4
  %cmp412 = icmp sgt i32 %299, %300
  br i1 %cmp412, label %if.then.414, label %if.end.415

if.then.414:                                      ; preds = %if.end.411
  %301 = load i32, i32* %oldsave, align 4
  call void @Perl_leave_scope(i32 %301)
  br label %if.end.415

if.end.415:                                       ; preds = %if.then.414, %if.end.411
  %302 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %302, %struct.sv*** @PL_stack_sp, align 8
  %303 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next416 = getelementptr inbounds %struct.op, %struct.op* %303, i32 0, i32 0
  %304 = load %struct.op*, %struct.op** %op_next416, align 8
  store %struct.op* %304, %struct.op** %retval
  br label %return

if.else.417:                                      ; preds = %if.end.231
  %305 = load i32, i32* %global, align 4
  %tobool418 = icmp ne i32 %305, 0
  br i1 %tobool418, label %if.then.419, label %if.end.463

if.then.419:                                      ; preds = %if.else.417
  store %struct.magic* null, %struct.magic** %mg421, align 8
  %306 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags422 = getelementptr inbounds %struct.sv, %struct.sv* %306, i32 0, i32 2
  %307 = load i32, i32* %sv_flags422, align 4
  %and423 = and i32 %307, 255
  %cmp424 = icmp uge i32 %and423, 7
  br i1 %cmp424, label %land.lhs.true.426, label %if.end.432

land.lhs.true.426:                                ; preds = %if.then.419
  %308 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any427 = getelementptr inbounds %struct.sv, %struct.sv* %308, i32 0, i32 0
  %309 = load i8*, i8** %sv_any427, align 8
  %310 = bitcast i8* %309 to %struct.xpvmg*
  %xmg_magic428 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %310, i32 0, i32 5
  %311 = load %struct.magic*, %struct.magic** %xmg_magic428, align 8
  %tobool429 = icmp ne %struct.magic* %311, null
  br i1 %tobool429, label %if.then.430, label %if.end.432

if.then.430:                                      ; preds = %land.lhs.true.426
  %312 = load %struct.sv*, %struct.sv** %targ, align 8
  %call431 = call %struct.magic* @Perl_mg_find(%struct.sv* %312, i32 103)
  store %struct.magic* %call431, %struct.magic** %mg421, align 8
  br label %if.end.432

if.end.432:                                       ; preds = %if.then.430, %land.lhs.true.426, %if.then.419
  %313 = load %struct.magic*, %struct.magic** %mg421, align 8
  %tobool433 = icmp ne %struct.magic* %313, null
  br i1 %tobool433, label %if.end.436, label %if.then.434

if.then.434:                                      ; preds = %if.end.432
  %314 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_magic(%struct.sv* %314, %struct.sv* null, i32 103, i8* null, i32 0)
  %315 = load %struct.sv*, %struct.sv** %targ, align 8
  %call435 = call %struct.magic* @Perl_mg_find(%struct.sv* %315, i32 103)
  store %struct.magic* %call435, %struct.magic** %mg421, align 8
  br label %if.end.436

if.end.436:                                       ; preds = %if.then.434, %if.end.432
  %316 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %startp437 = getelementptr inbounds %struct.regexp, %struct.regexp* %316, i32 0, i32 0
  %317 = load i32*, i32** %startp437, align 8
  %arrayidx438 = getelementptr inbounds i32, i32* %317, i64 0
  %318 = load i32, i32* %arrayidx438, align 4
  %cmp439 = icmp ne i32 %318, -1
  br i1 %cmp439, label %if.then.441, label %if.end.462

if.then.441:                                      ; preds = %if.end.436
  %319 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %endp442 = getelementptr inbounds %struct.regexp, %struct.regexp* %319, i32 0, i32 1
  %320 = load i32*, i32** %endp442, align 8
  %arrayidx443 = getelementptr inbounds i32, i32* %320, i64 0
  %321 = load i32, i32* %arrayidx443, align 4
  %322 = load %struct.magic*, %struct.magic** %mg421, align 8
  %mg_len444 = getelementptr inbounds %struct.magic, %struct.magic* %322, i32 0, i32 7
  store i32 %321, i32* %mg_len444, align 4
  %323 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %startp445 = getelementptr inbounds %struct.regexp, %struct.regexp* %323, i32 0, i32 0
  %324 = load i32*, i32** %startp445, align 8
  %arrayidx446 = getelementptr inbounds i32, i32* %324, i64 0
  %325 = load i32, i32* %arrayidx446, align 4
  %326 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %endp447 = getelementptr inbounds %struct.regexp, %struct.regexp* %326, i32 0, i32 1
  %327 = load i32*, i32** %endp447, align 8
  %arrayidx448 = getelementptr inbounds i32, i32* %327, i64 0
  %328 = load i32, i32* %arrayidx448, align 4
  %cmp449 = icmp eq i32 %325, %328
  br i1 %cmp449, label %if.then.451, label %if.else.456

if.then.451:                                      ; preds = %if.then.441
  %329 = load %struct.magic*, %struct.magic** %mg421, align 8
  %mg_flags452 = getelementptr inbounds %struct.magic, %struct.magic* %329, i32 0, i32 4
  %330 = load i8, i8* %mg_flags452, align 1
  %conv453 = zext i8 %330 to i32
  %or454 = or i32 %conv453, 1
  %conv455 = trunc i32 %or454 to i8
  store i8 %conv455, i8* %mg_flags452, align 1
  br label %if.end.461

if.else.456:                                      ; preds = %if.then.441
  %331 = load %struct.magic*, %struct.magic** %mg421, align 8
  %mg_flags457 = getelementptr inbounds %struct.magic, %struct.magic* %331, i32 0, i32 4
  %332 = load i8, i8* %mg_flags457, align 1
  %conv458 = zext i8 %332 to i32
  %and459 = and i32 %conv458, -2
  %conv460 = trunc i32 %and459 to i8
  store i8 %conv460, i8* %mg_flags457, align 1
  br label %if.end.461

if.end.461:                                       ; preds = %if.else.456, %if.then.451
  br label %if.end.462

if.end.462:                                       ; preds = %if.end.461, %if.end.436
  br label %if.end.463

if.end.463:                                       ; preds = %if.end.462, %if.else.417
  %333 = load i32, i32* @PL_savestack_ix, align 4
  %334 = load i32, i32* %oldsave, align 4
  %cmp464 = icmp sgt i32 %333, %334
  br i1 %cmp464, label %if.then.466, label %if.end.467

if.then.466:                                      ; preds = %if.end.463
  %335 = load i32, i32* %oldsave, align 4
  call void @Perl_leave_scope(i32 %335)
  br label %if.end.467

if.end.467:                                       ; preds = %if.then.466, %if.end.463
  %336 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr468 = getelementptr inbounds %struct.sv*, %struct.sv** %336, i32 1
  store %struct.sv** %incdec.ptr468, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr468, align 8
  %337 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %337, %struct.sv*** @PL_stack_sp, align 8
  %338 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next469 = getelementptr inbounds %struct.op, %struct.op* %338, i32 0, i32 0
  %339 = load %struct.op*, %struct.op** %op_next469, align 8
  store %struct.op* %339, %struct.op** %retval
  br label %return

yup:                                              ; preds = %if.then.206
  %340 = load i8, i8* %rxtainted, align 1
  %tobool470 = icmp ne i8 %340, 0
  br i1 %tobool470, label %if.then.471, label %if.end.474

if.then.471:                                      ; preds = %yup
  %341 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch472 = getelementptr inbounds %struct.regexp, %struct.regexp* %341, i32 0, i32 15
  %342 = load i32, i32* %reganch472, align 4
  %or473 = or i32 %342, 524288
  store i32 %or473, i32* %reganch472, align 4
  br label %if.end.474

if.end.474:                                       ; preds = %if.then.471, %yup
  %343 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch475 = getelementptr inbounds %struct.regexp, %struct.regexp* %343, i32 0, i32 15
  %344 = load i32, i32* %reganch475, align 4
  %and476 = and i32 %344, 524288
  %tobool477 = icmp ne i32 %and476, 0
  br i1 %tobool477, label %if.then.478, label %if.end.479

if.then.478:                                      ; preds = %if.end.474
  store i8 1, i8* @PL_tainted, align 1
  br label %if.end.479

if.end.479:                                       ; preds = %if.then.478, %if.end.474
  %345 = load %struct.pmop*, %struct.pmop** %pm, align 8
  store %struct.pmop* %345, %struct.pmop** @PL_curpm, align 8
  %346 = load %struct.pmop*, %struct.pmop** %dynpm, align 8
  %op_pmflags480 = getelementptr inbounds %struct.pmop, %struct.pmop* %346, i32 0, i32 14
  %347 = load i32, i32* %op_pmflags480, align 4
  %and481 = and i32 %347, 2
  %tobool482 = icmp ne i32 %and481, 0
  br i1 %tobool482, label %if.then.483, label %if.end.488

if.then.483:                                      ; preds = %if.end.479
  %348 = load %struct.pmop*, %struct.pmop** %dynpm, align 8
  %op_pmdynflags484 = getelementptr inbounds %struct.pmop, %struct.pmop* %348, i32 0, i32 16
  %349 = load i8, i8* %op_pmdynflags484, align 1
  %conv485 = zext i8 %349 to i32
  %or486 = or i32 %conv485, 1
  %conv487 = trunc i32 %or486 to i8
  store i8 %conv487, i8* %op_pmdynflags484, align 1
  br label %if.end.488

if.end.488:                                       ; preds = %if.then.483, %if.end.479
  %350 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch489 = getelementptr inbounds %struct.regexp, %struct.regexp* %350, i32 0, i32 15
  %351 = load i32, i32* %reganch489, align 4
  %and490 = and i32 %351, 262144
  %tobool491 = icmp ne i32 %and490, 0
  br i1 %tobool491, label %if.then.492, label %if.end.493

if.then.492:                                      ; preds = %if.end.488
  %352 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %subbeg = getelementptr inbounds %struct.regexp, %struct.regexp* %352, i32 0, i32 6
  %353 = load i8*, i8** %subbeg, align 8
  call void @Perl_safesysfree(i8* %353)
  br label %if.end.493

if.end.493:                                       ; preds = %if.then.492, %if.end.488
  %354 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch494 = getelementptr inbounds %struct.regexp, %struct.regexp* %354, i32 0, i32 15
  %355 = load i32, i32* %reganch494, align 4
  %and495 = and i32 %355, -262145
  store i32 %and495, i32* %reganch494, align 4
  %356 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %subbeg496 = getelementptr inbounds %struct.regexp, %struct.regexp* %356, i32 0, i32 6
  store i8* null, i8** %subbeg496, align 8
  %357 = load i32, i32* %global, align 4
  %tobool497 = icmp ne i32 %357, 0
  br i1 %tobool497, label %if.then.498, label %if.end.535

if.then.498:                                      ; preds = %if.end.493
  %358 = load i8*, i8** %truebase, align 8
  %359 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %subbeg499 = getelementptr inbounds %struct.regexp, %struct.regexp* %359, i32 0, i32 6
  store i8* %358, i8** %subbeg499, align 8
  %360 = load i8*, i8** %s, align 8
  %361 = load i8*, i8** %truebase, align 8
  %sub.ptr.lhs.cast500 = ptrtoint i8* %360 to i64
  %sub.ptr.rhs.cast501 = ptrtoint i8* %361 to i64
  %sub.ptr.sub502 = sub i64 %sub.ptr.lhs.cast500, %sub.ptr.rhs.cast501
  %conv503 = trunc i64 %sub.ptr.sub502 to i32
  %362 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %startp504 = getelementptr inbounds %struct.regexp, %struct.regexp* %362, i32 0, i32 0
  %363 = load i32*, i32** %startp504, align 8
  %arrayidx505 = getelementptr inbounds i32, i32* %363, i64 0
  store i32 %conv503, i32* %arrayidx505, align 4
  %364 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch506 = getelementptr inbounds %struct.regexp, %struct.regexp* %364, i32 0, i32 15
  %365 = load i32, i32* %reganch506, align 4
  %and507 = and i32 %365, 268435456
  %tobool508 = icmp ne i32 %and507, 0
  br i1 %tobool508, label %if.then.509, label %if.else.520

if.then.509:                                      ; preds = %if.then.498
  %366 = load i8*, i8** %s, align 8
  %367 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %minlen512 = getelementptr inbounds %struct.regexp, %struct.regexp* %367, i32 0, i32 10
  %368 = load i32, i32* %minlen512, align 4
  %call513 = call i8* @Perl_utf8_hop(i8* %366, i32 %368)
  store i8* %call513, i8** %t511, align 8
  %369 = load i8*, i8** %t511, align 8
  %370 = load i8*, i8** %truebase, align 8
  %sub.ptr.lhs.cast514 = ptrtoint i8* %369 to i64
  %sub.ptr.rhs.cast515 = ptrtoint i8* %370 to i64
  %sub.ptr.sub516 = sub i64 %sub.ptr.lhs.cast514, %sub.ptr.rhs.cast515
  %conv517 = trunc i64 %sub.ptr.sub516 to i32
  %371 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %endp518 = getelementptr inbounds %struct.regexp, %struct.regexp* %371, i32 0, i32 1
  %372 = load i32*, i32** %endp518, align 8
  %arrayidx519 = getelementptr inbounds i32, i32* %372, i64 0
  store i32 %conv517, i32* %arrayidx519, align 4
  br label %if.end.530

if.else.520:                                      ; preds = %if.then.498
  %373 = load i8*, i8** %s, align 8
  %374 = load i8*, i8** %truebase, align 8
  %sub.ptr.lhs.cast521 = ptrtoint i8* %373 to i64
  %sub.ptr.rhs.cast522 = ptrtoint i8* %374 to i64
  %sub.ptr.sub523 = sub i64 %sub.ptr.lhs.cast521, %sub.ptr.rhs.cast522
  %375 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %minlen524 = getelementptr inbounds %struct.regexp, %struct.regexp* %375, i32 0, i32 10
  %376 = load i32, i32* %minlen524, align 4
  %conv525 = sext i32 %376 to i64
  %add526 = add nsw i64 %sub.ptr.sub523, %conv525
  %conv527 = trunc i64 %add526 to i32
  %377 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %endp528 = getelementptr inbounds %struct.regexp, %struct.regexp* %377, i32 0, i32 1
  %378 = load i32*, i32** %endp528, align 8
  %arrayidx529 = getelementptr inbounds i32, i32* %378, i64 0
  store i32 %conv527, i32* %arrayidx529, align 4
  br label %if.end.530

if.end.530:                                       ; preds = %if.else.520, %if.then.509
  %379 = load i8*, i8** %strend, align 8
  %380 = load i8*, i8** %truebase, align 8
  %sub.ptr.lhs.cast531 = ptrtoint i8* %379 to i64
  %sub.ptr.rhs.cast532 = ptrtoint i8* %380 to i64
  %sub.ptr.sub533 = sub i64 %sub.ptr.lhs.cast531, %sub.ptr.rhs.cast532
  %conv534 = trunc i64 %sub.ptr.sub533 to i32
  %381 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %sublen = getelementptr inbounds %struct.regexp, %struct.regexp* %381, i32 0, i32 8
  store i32 %conv534, i32* %sublen, align 4
  br label %gotcha

if.end.535:                                       ; preds = %if.end.493
  %382 = load i8, i8* @PL_sawampersand, align 1
  %tobool536 = icmp ne i8 %382, 0
  br i1 %tobool536, label %if.then.537, label %if.else.562

if.then.537:                                      ; preds = %if.end.535
  %383 = load i8*, i8** %t, align 8
  %384 = load i8*, i8** %strend, align 8
  %385 = load i8*, i8** %t, align 8
  %sub.ptr.lhs.cast539 = ptrtoint i8* %384 to i64
  %sub.ptr.rhs.cast540 = ptrtoint i8* %385 to i64
  %sub.ptr.sub541 = sub i64 %sub.ptr.lhs.cast539, %sub.ptr.rhs.cast540
  %conv542 = trunc i64 %sub.ptr.sub541 to i32
  %call543 = call i8* @Perl_savepvn(i8* %383, i32 %conv542)
  %386 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %subbeg544 = getelementptr inbounds %struct.regexp, %struct.regexp* %386, i32 0, i32 6
  store i8* %call543, i8** %subbeg544, align 8
  %387 = load i8*, i8** %strend, align 8
  %388 = load i8*, i8** %t, align 8
  %sub.ptr.lhs.cast545 = ptrtoint i8* %387 to i64
  %sub.ptr.rhs.cast546 = ptrtoint i8* %388 to i64
  %sub.ptr.sub547 = sub i64 %sub.ptr.lhs.cast545, %sub.ptr.rhs.cast546
  %conv548 = trunc i64 %sub.ptr.sub547 to i32
  %389 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %sublen549 = getelementptr inbounds %struct.regexp, %struct.regexp* %389, i32 0, i32 8
  store i32 %conv548, i32* %sublen549, align 4
  %390 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch550 = getelementptr inbounds %struct.regexp, %struct.regexp* %390, i32 0, i32 15
  %391 = load i32, i32* %reganch550, align 4
  %or551 = or i32 %391, 262144
  store i32 %or551, i32* %reganch550, align 4
  %392 = load i8*, i8** %s, align 8
  %393 = load i8*, i8** %t, align 8
  %sub.ptr.lhs.cast552 = ptrtoint i8* %392 to i64
  %sub.ptr.rhs.cast553 = ptrtoint i8* %393 to i64
  %sub.ptr.sub554 = sub i64 %sub.ptr.lhs.cast552, %sub.ptr.rhs.cast553
  %conv555 = trunc i64 %sub.ptr.sub554 to i32
  %394 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %startp556 = getelementptr inbounds %struct.regexp, %struct.regexp* %394, i32 0, i32 0
  %395 = load i32*, i32** %startp556, align 8
  %arrayidx557 = getelementptr inbounds i32, i32* %395, i64 0
  store i32 %conv555, i32* %arrayidx557, align 4
  store i32 %conv555, i32* %off, align 4
  %396 = load i32, i32* %off, align 4
  %397 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %minlen558 = getelementptr inbounds %struct.regexp, %struct.regexp* %397, i32 0, i32 10
  %398 = load i32, i32* %minlen558, align 4
  %add559 = add nsw i32 %396, %398
  %399 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %endp560 = getelementptr inbounds %struct.regexp, %struct.regexp* %399, i32 0, i32 1
  %400 = load i32*, i32** %endp560, align 8
  %arrayidx561 = getelementptr inbounds i32, i32* %400, i64 0
  store i32 %add559, i32* %arrayidx561, align 4
  br label %if.end.578

if.else.562:                                      ; preds = %if.end.535
  %401 = load i8*, i8** %s, align 8
  %402 = load i8*, i8** %truebase, align 8
  %sub.ptr.lhs.cast563 = ptrtoint i8* %401 to i64
  %sub.ptr.rhs.cast564 = ptrtoint i8* %402 to i64
  %sub.ptr.sub565 = sub i64 %sub.ptr.lhs.cast563, %sub.ptr.rhs.cast564
  %conv566 = trunc i64 %sub.ptr.sub565 to i32
  %403 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %startp567 = getelementptr inbounds %struct.regexp, %struct.regexp* %403, i32 0, i32 0
  %404 = load i32*, i32** %startp567, align 8
  %arrayidx568 = getelementptr inbounds i32, i32* %404, i64 0
  store i32 %conv566, i32* %arrayidx568, align 4
  %405 = load i8*, i8** %s, align 8
  %406 = load i8*, i8** %truebase, align 8
  %sub.ptr.lhs.cast569 = ptrtoint i8* %405 to i64
  %sub.ptr.rhs.cast570 = ptrtoint i8* %406 to i64
  %sub.ptr.sub571 = sub i64 %sub.ptr.lhs.cast569, %sub.ptr.rhs.cast570
  %407 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %minlen572 = getelementptr inbounds %struct.regexp, %struct.regexp* %407, i32 0, i32 10
  %408 = load i32, i32* %minlen572, align 4
  %conv573 = sext i32 %408 to i64
  %add574 = add nsw i64 %sub.ptr.sub571, %conv573
  %conv575 = trunc i64 %add574 to i32
  %409 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %endp576 = getelementptr inbounds %struct.regexp, %struct.regexp* %409, i32 0, i32 1
  %410 = load i32*, i32** %endp576, align 8
  %arrayidx577 = getelementptr inbounds i32, i32* %410, i64 0
  store i32 %conv575, i32* %arrayidx577, align 4
  br label %if.end.578

if.end.578:                                       ; preds = %if.else.562, %if.then.537
  %411 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %lastcloseparen = getelementptr inbounds %struct.regexp, %struct.regexp* %411, i32 0, i32 14
  store i32 0, i32* %lastcloseparen, align 4
  %412 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %lastparen = getelementptr inbounds %struct.regexp, %struct.regexp* %412, i32 0, i32 13
  store i32 0, i32* %lastparen, align 4
  %413 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %nparens579 = getelementptr inbounds %struct.regexp, %struct.regexp* %413, i32 0, i32 12
  store i32 0, i32* %nparens579, align 4
  %414 = load i32, i32* @PL_savestack_ix, align 4
  %415 = load i32, i32* %oldsave, align 4
  %cmp580 = icmp sgt i32 %414, %415
  br i1 %cmp580, label %if.then.582, label %if.end.583

if.then.582:                                      ; preds = %if.end.578
  %416 = load i32, i32* %oldsave, align 4
  call void @Perl_leave_scope(i32 %416)
  br label %if.end.583

if.end.583:                                       ; preds = %if.then.582, %if.end.578
  %417 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr584 = getelementptr inbounds %struct.sv*, %struct.sv** %417, i32 1
  store %struct.sv** %incdec.ptr584, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr584, align 8
  %418 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %418, %struct.sv*** @PL_stack_sp, align 8
  %419 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next585 = getelementptr inbounds %struct.op, %struct.op* %419, i32 0, i32 0
  %420 = load %struct.op*, %struct.op** %op_next585, align 8
  store %struct.op* %420, %struct.op** %retval
  br label %return

nope:                                             ; preds = %if.then.184, %if.then.156
  br label %ret_no

ret_no:                                           ; preds = %nope, %if.else.221
  %421 = load i32, i32* %global, align 4
  %tobool586 = icmp ne i32 %421, 0
  br i1 %tobool586, label %land.lhs.true.587, label %if.end.609

land.lhs.true.587:                                ; preds = %ret_no
  %422 = load %struct.pmop*, %struct.pmop** %dynpm, align 8
  %op_pmflags588 = getelementptr inbounds %struct.pmop, %struct.pmop* %422, i32 0, i32 14
  %423 = load i32, i32* %op_pmflags588, align 4
  %and589 = and i32 %423, 512
  %tobool590 = icmp ne i32 %and589, 0
  br i1 %tobool590, label %if.end.609, label %if.then.591

if.then.591:                                      ; preds = %land.lhs.true.587
  %424 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags592 = getelementptr inbounds %struct.sv, %struct.sv* %424, i32 0, i32 2
  %425 = load i32, i32* %sv_flags592, align 4
  %and593 = and i32 %425, 255
  %cmp594 = icmp uge i32 %and593, 7
  br i1 %cmp594, label %land.lhs.true.596, label %if.end.608

land.lhs.true.596:                                ; preds = %if.then.591
  %426 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any597 = getelementptr inbounds %struct.sv, %struct.sv* %426, i32 0, i32 0
  %427 = load i8*, i8** %sv_any597, align 8
  %428 = bitcast i8* %427 to %struct.xpvmg*
  %xmg_magic598 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %428, i32 0, i32 5
  %429 = load %struct.magic*, %struct.magic** %xmg_magic598, align 8
  %tobool599 = icmp ne %struct.magic* %429, null
  br i1 %tobool599, label %if.then.600, label %if.end.608

if.then.600:                                      ; preds = %land.lhs.true.596
  %430 = load %struct.sv*, %struct.sv** %targ, align 8
  %call603 = call %struct.magic* @Perl_mg_find(%struct.sv* %430, i32 103)
  store %struct.magic* %call603, %struct.magic** %mg602, align 8
  %431 = load %struct.magic*, %struct.magic** %mg602, align 8
  %tobool604 = icmp ne %struct.magic* %431, null
  br i1 %tobool604, label %if.then.605, label %if.end.607

if.then.605:                                      ; preds = %if.then.600
  %432 = load %struct.magic*, %struct.magic** %mg602, align 8
  %mg_len606 = getelementptr inbounds %struct.magic, %struct.magic* %432, i32 0, i32 7
  store i32 -1, i32* %mg_len606, align 4
  br label %if.end.607

if.end.607:                                       ; preds = %if.then.605, %if.then.600
  br label %if.end.608

if.end.608:                                       ; preds = %if.end.607, %land.lhs.true.596, %if.then.591
  br label %if.end.609

if.end.609:                                       ; preds = %if.end.608, %land.lhs.true.587, %ret_no
  %433 = load i32, i32* @PL_savestack_ix, align 4
  %434 = load i32, i32* %oldsave, align 4
  %cmp610 = icmp sgt i32 %433, %434
  br i1 %cmp610, label %if.then.612, label %if.end.613

if.then.612:                                      ; preds = %if.end.609
  %435 = load i32, i32* %oldsave, align 4
  call void @Perl_leave_scope(i32 %435)
  br label %if.end.613

if.end.613:                                       ; preds = %if.then.612, %if.end.609
  %436 = load i32, i32* %gimme, align 4
  %cmp614 = icmp eq i32 %436, 1
  br i1 %cmp614, label %if.then.616, label %if.end.618

if.then.616:                                      ; preds = %if.end.613
  %437 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %437, %struct.sv*** @PL_stack_sp, align 8
  %438 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next617 = getelementptr inbounds %struct.op, %struct.op* %438, i32 0, i32 0
  %439 = load %struct.op*, %struct.op** %op_next617, align 8
  store %struct.op* %439, %struct.op** %retval
  br label %return

if.end.618:                                       ; preds = %if.end.613
  %440 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr619 = getelementptr inbounds %struct.sv*, %struct.sv** %440, i32 1
  store %struct.sv** %incdec.ptr619, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_no, %struct.sv** %incdec.ptr619, align 8
  %441 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %441, %struct.sv*** @PL_stack_sp, align 8
  %442 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next620 = getelementptr inbounds %struct.op, %struct.op* %442, i32 0, i32 0
  %443 = load %struct.op*, %struct.op** %op_next620, align 8
  store %struct.op* %443, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.end.618, %if.then.616, %if.end.583, %if.end.467, %if.end.415, %if.then.311, %if.end.57, %if.then.56, %if.then.26
  %444 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %444
}

declare void @Perl_save_int(i32*) #1

declare signext i8 @Perl_is_utf8_string(i8*, i64) #1

declare void @Perl_safesysfree(i8*) #1

declare i8* @Perl_utf8_hop(i8*, i32) #1

declare i8* @Perl_savepvn(i8*, i32) #1

declare i32 @Perl_av_len(%struct.av*) #1

declare signext i8 @Perl_do_open(%struct.gv*, i8*, i32, i32, i32, i32, %struct._PerlIO**) #1

declare %struct._PerlIO** @Perl_nextargv(%struct.gv*) #1

declare signext i8 @Perl_do_close(%struct.gv*, i8 signext) #1

declare %struct._PerlIO** @Perl_start_glob(%struct.sv*, %struct.io*) #1

declare void @Perl_warner(i32, i8*, ...) #1

declare i8* @strerror(i32) #1

declare void @Perl_sv_force_normal(%struct.sv*) #1

declare i32 @Perl_sv_backoff(%struct.sv*) #1

declare void @Perl_sv_unref(%struct.sv*) #1

declare signext i8 @Perl_sv_upgrade(%struct.sv*, i32) #1

declare i8* @Perl_sv_grow(%struct.sv*, i64) #1

declare i8* @Perl_sv_pvn_force_flags(%struct.sv*, i64*, i32) #1

declare i8* @Perl_sv_gets(%struct.sv*, %struct._PerlIO**, i32) #1

declare i32 @Perl_PerlIO_error(%struct._PerlIO**) #1

declare void @Perl_PerlIO_clearerr(%struct._PerlIO**) #1

declare i8* @strchr(i8*, i32) #1

declare i32 @stat(i8*, %struct.stat*) #1

declare signext i8 @Perl_is_utf8_string_loc(i8*, i64, i8**) #1

declare i8* @Perl_safesysrealloc(i8*, i64) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_enter() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %cx = alloca %struct.context*, align 8
  %gimme = alloca i32, align 4
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  %2 = load i8, i8* %op_flags, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 3
  %cmp = icmp eq i32 %and, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end.15

cond.false:                                       ; preds = %entry
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags2 = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 6
  %4 = load i8, i8* %op_flags2, align 1
  %conv3 = zext i8 %4 to i32
  %and4 = and i32 %conv3, 3
  %cmp5 = icmp eq i32 %and4, 2
  br i1 %cmp5, label %cond.true.7, label %cond.false.8

cond.true.7:                                      ; preds = %cond.false
  br label %cond.end

cond.false.8:                                     ; preds = %cond.false
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags9 = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 6
  %6 = load i8, i8* %op_flags9, align 1
  %conv10 = zext i8 %6 to i32
  %and11 = and i32 %conv10, 3
  %cmp12 = icmp eq i32 %and11, 3
  %cond = select i1 %cmp12, i32 1, i32 -1
  br label %cond.end

cond.end:                                         ; preds = %cond.false.8, %cond.true.7
  %cond14 = phi i32 [ 0, %cond.true.7 ], [ %cond, %cond.false.8 ]
  br label %cond.end.15

cond.end.15:                                      ; preds = %cond.end, %cond.true
  %cond16 = phi i32 [ 128, %cond.true ], [ %cond14, %cond.end ]
  store i32 %cond16, i32* %gimme, align 4
  %7 = load i32, i32* %gimme, align 4
  %cmp17 = icmp eq i32 %7, -1
  br i1 %cmp17, label %if.then, label %if.end.24

if.then:                                          ; preds = %cond.end.15
  %8 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %8, i32 0, i32 2
  %9 = load i32, i32* %si_cxix, align 4
  %cmp19 = icmp sge i32 %9, 0
  br i1 %cmp19, label %if.then.21, label %if.else

if.then.21:                                       ; preds = %if.then
  %10 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix22 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %10, i32 0, i32 2
  %11 = load i32, i32* %si_cxix22, align 4
  %idxprom = sext i32 %11 to i64
  %12 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %12, i32 0, i32 1
  %13 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %13, i64 %idxprom
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %arrayidx, i32 0, i32 1
  %cx_blk = bitcast %union.anon.0* %cx_u to %struct.block*
  %blku_gimme = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 6
  %14 = load i8, i8* %blku_gimme, align 1
  %conv23 = zext i8 %14 to i32
  store i32 %conv23, i32* %gimme, align 4
  br label %if.end

if.else:                                          ; preds = %if.then
  store i32 0, i32* %gimme, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.21
  br label %if.end.24

if.end.24:                                        ; preds = %if.end, %cond.end.15
  call void @Perl_push_scope()
  call void @Perl_save_int(i32* @PL_tmps_floor)
  %15 = load i32, i32* @PL_tmps_ix, align 4
  store i32 %15, i32* @PL_tmps_floor, align 4
  %16 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix25 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %16, i32 0, i32 2
  %17 = load i32, i32* %si_cxix25, align 4
  %18 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxmax = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %18, i32 0, i32 3
  %19 = load i32, i32* %si_cxmax, align 4
  %cmp26 = icmp slt i32 %17, %19
  br i1 %cmp26, label %cond.true.28, label %cond.false.30

cond.true.28:                                     ; preds = %if.end.24
  %20 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix29 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %20, i32 0, i32 2
  %21 = load i32, i32* %si_cxix29, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %si_cxix29, align 4
  br label %cond.end.32

cond.false.30:                                    ; preds = %if.end.24
  %call = call i32 @Perl_cxinc()
  %22 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix31 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %22, i32 0, i32 2
  store i32 %call, i32* %si_cxix31, align 4
  br label %cond.end.32

cond.end.32:                                      ; preds = %cond.false.30, %cond.true.28
  %cond33 = phi i32 [ %inc, %cond.true.28 ], [ %call, %cond.false.30 ]
  %23 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix34 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %23, i32 0, i32 2
  %24 = load i32, i32* %si_cxix34, align 4
  %idxprom35 = sext i32 %24 to i64
  %25 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack36 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %25, i32 0, i32 1
  %26 = load %struct.context*, %struct.context** %si_cxstack36, align 8
  %arrayidx37 = getelementptr inbounds %struct.context, %struct.context* %26, i64 %idxprom35
  store %struct.context* %arrayidx37, %struct.context** %cx, align 8
  %27 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type = getelementptr inbounds %struct.context, %struct.context* %27, i32 0, i32 0
  store i32 5, i32* %cx_type, align 4
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %29 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %28 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %29 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv38 = trunc i64 %sub.ptr.div to i32
  %30 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u39 = getelementptr inbounds %struct.context, %struct.context* %30, i32 0, i32 1
  %cx_blk40 = bitcast %union.anon.0* %cx_u39 to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk40, i32 0, i32 0
  store i32 %conv38, i32* %blku_oldsp, align 4
  %31 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %32 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u41 = getelementptr inbounds %struct.context, %struct.context* %32, i32 0, i32 1
  %cx_blk42 = bitcast %union.anon.0* %cx_u41 to %struct.block*
  %blku_oldcop = getelementptr inbounds %struct.block, %struct.block* %cx_blk42, i32 0, i32 1
  store %struct.cop* %31, %struct.cop** %blku_oldcop, align 8
  %33 = load i32*, i32** @PL_markstack_ptr, align 8
  %34 = load i32*, i32** @PL_markstack, align 8
  %sub.ptr.lhs.cast43 = ptrtoint i32* %33 to i64
  %sub.ptr.rhs.cast44 = ptrtoint i32* %34 to i64
  %sub.ptr.sub45 = sub i64 %sub.ptr.lhs.cast43, %sub.ptr.rhs.cast44
  %sub.ptr.div46 = sdiv exact i64 %sub.ptr.sub45, 4
  %conv47 = trunc i64 %sub.ptr.div46 to i32
  %35 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u48 = getelementptr inbounds %struct.context, %struct.context* %35, i32 0, i32 1
  %cx_blk49 = bitcast %union.anon.0* %cx_u48 to %struct.block*
  %blku_oldmarksp = getelementptr inbounds %struct.block, %struct.block* %cx_blk49, i32 0, i32 3
  store i32 %conv47, i32* %blku_oldmarksp, align 4
  %36 = load i32, i32* @PL_scopestack_ix, align 4
  %37 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u50 = getelementptr inbounds %struct.context, %struct.context* %37, i32 0, i32 1
  %cx_blk51 = bitcast %union.anon.0* %cx_u50 to %struct.block*
  %blku_oldscopesp = getelementptr inbounds %struct.block, %struct.block* %cx_blk51, i32 0, i32 4
  store i32 %36, i32* %blku_oldscopesp, align 4
  %38 = load i32, i32* @PL_retstack_ix, align 4
  %39 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u52 = getelementptr inbounds %struct.context, %struct.context* %39, i32 0, i32 1
  %cx_blk53 = bitcast %union.anon.0* %cx_u52 to %struct.block*
  %blku_oldretsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk53, i32 0, i32 2
  store i32 %38, i32* %blku_oldretsp, align 4
  %40 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  %41 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u54 = getelementptr inbounds %struct.context, %struct.context* %41, i32 0, i32 1
  %cx_blk55 = bitcast %union.anon.0* %cx_u54 to %struct.block*
  %blku_oldpm = getelementptr inbounds %struct.block, %struct.block* %cx_blk55, i32 0, i32 5
  store %struct.pmop* %40, %struct.pmop** %blku_oldpm, align 8
  %42 = load i32, i32* %gimme, align 4
  %conv56 = trunc i32 %42 to i8
  %43 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u57 = getelementptr inbounds %struct.context, %struct.context* %43, i32 0, i32 1
  %cx_blk58 = bitcast %union.anon.0* %cx_u57 to %struct.block*
  %blku_gimme59 = getelementptr inbounds %struct.block, %struct.block* %cx_blk58, i32 0, i32 6
  store i8 %conv56, i8* %blku_gimme59, align 1
  %44 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %44, %struct.sv*** @PL_stack_sp, align 8
  %45 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %45, i32 0, i32 0
  %46 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %46
}

declare i32 @Perl_cxinc() #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_helem() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %he = alloca %struct.he*, align 8
  %svp = alloca %struct.sv**, align 8
  %keysv = alloca %struct.sv*, align 8
  %hv = alloca %struct.hv*, align 8
  %lval = alloca i32, align 4
  %defer = alloca i32, align 4
  %sv = alloca %struct.sv*, align 8
  %hash = alloca i32, align 4
  %preeminent = alloca i32, align 4
  %mg = alloca %struct.magic*, align 8
  %stash = alloca %struct.hv*, align 8
  %lv = alloca %struct.sv*, align 8
  %key2 = alloca %struct.sv*, align 8
  %n_a = alloca i64, align 8
  %keylen = alloca i64, align 8
  %key = alloca i8*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** %keysv, align 8
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr1 = getelementptr inbounds %struct.sv*, %struct.sv** %3, i32 -1
  store %struct.sv** %incdec.ptr1, %struct.sv*** %sp, align 8
  %4 = load %struct.sv*, %struct.sv** %3, align 8
  %5 = bitcast %struct.sv* %4 to %struct.hv*
  store %struct.hv* %5, %struct.hv** %hv, align 8
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 6
  %7 = load i8, i8* %op_flags, align 1
  %conv = zext i8 %7 to i32
  %and = and i32 %conv, 32
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %8 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 7
  %9 = load i8, i8* %op_private, align 1
  %conv2 = zext i8 %9 to i32
  %and3 = and i32 %conv2, 8
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %call = call i32 @Perl_is_lvalue_sub()
  %tobool5 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %10 = phi i1 [ false, %lor.rhs ], [ %tobool5, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %entry
  %11 = phi i1 [ true, %entry ], [ %10, %land.end ]
  %lor.ext = zext i1 %11 to i32
  store i32 %lor.ext, i32* %lval, align 4
  %12 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private6 = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 7
  %13 = load i8, i8* %op_private6, align 1
  %conv7 = zext i8 %13 to i32
  %and8 = and i32 %conv7, 16
  store i32 %and8, i32* %defer, align 4
  %14 = load %struct.sv*, %struct.sv** %keysv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags, align 4
  %and9 = and i32 %15, 1048576
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %lor.end
  %16 = load %struct.sv*, %struct.sv** %keysv, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %17, 8388608
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %18 = load %struct.sv*, %struct.sv** %keysv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 0
  %19 = load i8*, i8** %sv_any, align 8
  %20 = bitcast i8* %19 to %struct.xpvuv*
  %xuv_uv = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %20, i32 0, i32 3
  %21 = load i64, i64* %xuv_uv, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %lor.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %21, %cond.true ], [ 0, %cond.false ]
  %conv14 = trunc i64 %cond to i32
  store i32 %conv14, i32* %hash, align 4
  store i32 0, i32* %preeminent, align 4
  %22 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_flags15 = getelementptr inbounds %struct.hv, %struct.hv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %23, 255
  %cmp = icmp eq i32 %and16, 11
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %24 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private18 = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 7
  %25 = load i8, i8* %op_private18, align 1
  %conv19 = zext i8 %25 to i32
  %and20 = and i32 %conv19, 128
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %if.then.22, label %if.end

if.then.22:                                       ; preds = %if.then
  %26 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_flags23 = getelementptr inbounds %struct.hv, %struct.hv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags23, align 4
  %and24 = and i32 %27, 32768
  %tobool25 = icmp ne i32 %and24, 0
  br i1 %tobool25, label %lor.lhs.false, label %cond.true.49

lor.lhs.false:                                    ; preds = %if.then.22
  %28 = load %struct.hv*, %struct.hv** %hv, align 8
  %29 = bitcast %struct.hv* %28 to %struct.sv*
  %call26 = call %struct.magic* @Perl_mg_find(%struct.sv* %29, i32 69)
  %tobool27 = icmp ne %struct.magic* %call26, null
  br i1 %tobool27, label %cond.true.49, label %lor.lhs.false.28

lor.lhs.false.28:                                 ; preds = %lor.lhs.false
  %30 = load %struct.hv*, %struct.hv** %hv, align 8
  %31 = bitcast %struct.hv* %30 to %struct.sv*
  %call29 = call %struct.magic* @Perl_mg_find(%struct.sv* %31, i32 80)
  store %struct.magic* %call29, %struct.magic** %mg, align 8
  %tobool30 = icmp ne %struct.magic* %call29, null
  br i1 %tobool30, label %land.lhs.true.31, label %cond.false.52

land.lhs.true.31:                                 ; preds = %lor.lhs.false.28
  %32 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %32, i32 0, i32 5
  %33 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  %tobool32 = icmp ne %struct.sv* %33, null
  br i1 %tobool32, label %cond.true.33, label %cond.false.35

cond.true.33:                                     ; preds = %land.lhs.true.31
  %34 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj34 = getelementptr inbounds %struct.magic, %struct.magic* %34, i32 0, i32 5
  %35 = load %struct.sv*, %struct.sv** %mg_obj34, align 8
  br label %cond.end.38

cond.false.35:                                    ; preds = %land.lhs.true.31
  %36 = load %struct.hv*, %struct.hv** %hv, align 8
  %37 = bitcast %struct.hv* %36 to %struct.sv*
  %call36 = call %struct.sv* @Perl_newRV(%struct.sv* %37)
  %call37 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call36)
  br label %cond.end.38

cond.end.38:                                      ; preds = %cond.false.35, %cond.true.33
  %cond39 = phi %struct.sv* [ %35, %cond.true.33 ], [ %call37, %cond.false.35 ]
  %sv_any40 = getelementptr inbounds %struct.sv, %struct.sv* %cond39, i32 0, i32 0
  %38 = load i8*, i8** %sv_any40, align 8
  %39 = bitcast i8* %38 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %39, i32 0, i32 0
  %40 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  %sv_any41 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 0
  %41 = load i8*, i8** %sv_any41, align 8
  %42 = bitcast i8* %41 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %42, i32 0, i32 6
  %43 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  store %struct.hv* %43, %struct.hv** %stash, align 8
  %tobool42 = icmp ne %struct.hv* %43, null
  br i1 %tobool42, label %land.lhs.true.43, label %cond.false.52

land.lhs.true.43:                                 ; preds = %cond.end.38
  %44 = load %struct.hv*, %struct.hv** %stash, align 8
  %call44 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %44, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i32 0, i32 0), i32 1)
  %tobool45 = icmp ne %struct.gv* %call44, null
  br i1 %tobool45, label %land.lhs.true.46, label %cond.false.52

land.lhs.true.46:                                 ; preds = %land.lhs.true.43
  %45 = load %struct.hv*, %struct.hv** %stash, align 8
  %call47 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %45, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i32 0, i32 0), i32 1)
  %tobool48 = icmp ne %struct.gv* %call47, null
  br i1 %tobool48, label %cond.true.49, label %cond.false.52

cond.true.49:                                     ; preds = %land.lhs.true.46, %lor.lhs.false, %if.then.22
  %46 = load %struct.hv*, %struct.hv** %hv, align 8
  %47 = load %struct.sv*, %struct.sv** %keysv, align 8
  %call50 = call signext i8 @Perl_hv_exists_ent(%struct.hv* %46, %struct.sv* %47, i32 0)
  %conv51 = sext i8 %call50 to i32
  br label %cond.end.53

cond.false.52:                                    ; preds = %land.lhs.true.46, %land.lhs.true.43, %cond.end.38, %lor.lhs.false.28
  br label %cond.end.53

cond.end.53:                                      ; preds = %cond.false.52, %cond.true.49
  %cond54 = phi i32 [ %conv51, %cond.true.49 ], [ 1, %cond.false.52 ]
  store i32 %cond54, i32* %preeminent, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end.53, %if.then
  %48 = load %struct.hv*, %struct.hv** %hv, align 8
  %49 = load %struct.sv*, %struct.sv** %keysv, align 8
  %50 = load i32, i32* %lval, align 4
  %tobool55 = icmp ne i32 %50, 0
  br i1 %tobool55, label %land.rhs.56, label %land.end.58

land.rhs.56:                                      ; preds = %if.end
  %51 = load i32, i32* %defer, align 4
  %tobool57 = icmp ne i32 %51, 0
  %lnot = xor i1 %tobool57, true
  br label %land.end.58

land.end.58:                                      ; preds = %land.rhs.56, %if.end
  %52 = phi i1 [ false, %if.end ], [ %lnot, %land.rhs.56 ]
  %land.ext = zext i1 %52 to i32
  %53 = load i32, i32* %hash, align 4
  %call59 = call %struct.he* @Perl_hv_fetch_ent(%struct.hv* %48, %struct.sv* %49, i32 %land.ext, i32 %53)
  store %struct.he* %call59, %struct.he** %he, align 8
  %54 = load %struct.he*, %struct.he** %he, align 8
  %tobool60 = icmp ne %struct.he* %54, null
  br i1 %tobool60, label %cond.true.61, label %cond.false.62

cond.true.61:                                     ; preds = %land.end.58
  %55 = load %struct.he*, %struct.he** %he, align 8
  %hent_val = getelementptr inbounds %struct.he, %struct.he* %55, i32 0, i32 2
  br label %cond.end.63

cond.false.62:                                    ; preds = %land.end.58
  br label %cond.end.63

cond.end.63:                                      ; preds = %cond.false.62, %cond.true.61
  %cond64 = phi %struct.sv** [ %hent_val, %cond.true.61 ], [ null, %cond.false.62 ]
  store %struct.sv** %cond64, %struct.sv*** %svp, align 8
  br label %if.end.87

if.else:                                          ; preds = %cond.end
  %56 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_flags65 = getelementptr inbounds %struct.hv, %struct.hv* %56, i32 0, i32 2
  %57 = load i32, i32* %sv_flags65, align 4
  %and66 = and i32 %57, 255
  %cmp67 = icmp eq i32 %and66, 10
  br i1 %cmp67, label %if.then.69, label %if.else.84

if.then.69:                                       ; preds = %if.else
  %58 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private70 = getelementptr inbounds %struct.op, %struct.op* %58, i32 0, i32 7
  %59 = load i8, i8* %op_private70, align 1
  %conv71 = zext i8 %59 to i32
  %and72 = and i32 %conv71, 128
  %tobool73 = icmp ne i32 %and72, 0
  br i1 %tobool73, label %if.then.74, label %if.end.76

if.then.74:                                       ; preds = %if.then.69
  %call75 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.23, i32 0, i32 0))
  store %struct.op* %call75, %struct.op** %retval
  br label %return

if.end.76:                                        ; preds = %if.then.69
  %60 = load %struct.hv*, %struct.hv** %hv, align 8
  %61 = bitcast %struct.hv* %60 to %struct.av*
  %62 = load %struct.sv*, %struct.sv** %keysv, align 8
  %63 = load i32, i32* %lval, align 4
  %tobool77 = icmp ne i32 %63, 0
  br i1 %tobool77, label %land.rhs.78, label %land.end.81

land.rhs.78:                                      ; preds = %if.end.76
  %64 = load i32, i32* %defer, align 4
  %tobool79 = icmp ne i32 %64, 0
  %lnot80 = xor i1 %tobool79, true
  br label %land.end.81

land.end.81:                                      ; preds = %land.rhs.78, %if.end.76
  %65 = phi i1 [ false, %if.end.76 ], [ %lnot80, %land.rhs.78 ]
  %land.ext82 = zext i1 %65 to i32
  %66 = load i32, i32* %hash, align 4
  %call83 = call %struct.sv** @Perl_avhv_fetch_ent(%struct.av* %61, %struct.sv* %62, i32 %land.ext82, i32 %66)
  store %struct.sv** %call83, %struct.sv*** %svp, align 8
  br label %if.end.86

if.else.84:                                       ; preds = %if.else
  %67 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr85 = getelementptr inbounds %struct.sv*, %struct.sv** %67, i32 1
  store %struct.sv** %incdec.ptr85, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr85, align 8
  %68 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %68, %struct.sv*** @PL_stack_sp, align 8
  %69 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %69, i32 0, i32 0
  %70 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %70, %struct.op** %retval
  br label %return

if.end.86:                                        ; preds = %land.end.81
  br label %if.end.87

if.end.87:                                        ; preds = %if.end.86, %cond.end.63
  %71 = load i32, i32* %lval, align 4
  %tobool88 = icmp ne i32 %71, 0
  br i1 %tobool88, label %if.then.89, label %if.end.175

if.then.89:                                       ; preds = %if.end.87
  %72 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool90 = icmp ne %struct.sv** %72, null
  br i1 %tobool90, label %lor.lhs.false.91, label %if.then.94

lor.lhs.false.91:                                 ; preds = %if.then.89
  %73 = load %struct.sv**, %struct.sv*** %svp, align 8
  %74 = load %struct.sv*, %struct.sv** %73, align 8
  %cmp92 = icmp eq %struct.sv* %74, @PL_sv_undef
  br i1 %cmp92, label %if.then.94, label %if.end.123

if.then.94:                                       ; preds = %lor.lhs.false.91, %if.then.89
  %75 = load i32, i32* %defer, align 4
  %tobool95 = icmp ne i32 %75, 0
  br i1 %tobool95, label %if.end.109, label %if.then.96

if.then.96:                                       ; preds = %if.then.94
  %76 = load %struct.sv*, %struct.sv** %keysv, align 8
  %sv_flags97 = getelementptr inbounds %struct.sv, %struct.sv* %76, i32 0, i32 2
  %77 = load i32, i32* %sv_flags97, align 4
  %and98 = and i32 %77, 262144
  %cmp99 = icmp eq i32 %and98, 262144
  br i1 %cmp99, label %cond.true.101, label %cond.false.104

cond.true.101:                                    ; preds = %if.then.96
  %78 = load %struct.sv*, %struct.sv** %keysv, align 8
  %sv_any102 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 0
  %79 = load i8*, i8** %sv_any102, align 8
  %80 = bitcast i8* %79 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %80, i32 0, i32 1
  %81 = load i64, i64* %xpv_cur, align 8
  store i64 %81, i64* %n_a, align 8
  %82 = load %struct.sv*, %struct.sv** %keysv, align 8
  %sv_any103 = getelementptr inbounds %struct.sv, %struct.sv* %82, i32 0, i32 0
  %83 = load i8*, i8** %sv_any103, align 8
  %84 = bitcast i8* %83 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %84, i32 0, i32 0
  %85 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end.106

cond.false.104:                                   ; preds = %if.then.96
  %86 = load %struct.sv*, %struct.sv** %keysv, align 8
  %call105 = call i8* @Perl_sv_2pv_flags(%struct.sv* %86, i64* %n_a, i32 2)
  br label %cond.end.106

cond.end.106:                                     ; preds = %cond.false.104, %cond.true.101
  %cond107 = phi i8* [ %85, %cond.true.101 ], [ %call105, %cond.false.104 ]
  %call108 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_helem, i32 0, i32 0), i8* %cond107)
  store %struct.op* %call108, %struct.op** %retval
  br label %return

if.end.109:                                       ; preds = %if.then.94
  %call110 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call110, %struct.sv** %lv, align 8
  %87 = load %struct.sv*, %struct.sv** %lv, align 8
  %call111 = call signext i8 @Perl_sv_upgrade(%struct.sv* %87, i32 9)
  %88 = load %struct.sv*, %struct.sv** %lv, align 8
  %sv_any112 = getelementptr inbounds %struct.sv, %struct.sv* %88, i32 0, i32 0
  %89 = load i8*, i8** %sv_any112, align 8
  %90 = bitcast i8* %89 to %struct.xpvlv*
  %xlv_type = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %90, i32 0, i32 10
  store i8 121, i8* %xlv_type, align 1
  %91 = load %struct.sv*, %struct.sv** %lv, align 8
  %92 = load %struct.sv*, %struct.sv** %keysv, align 8
  %call113 = call %struct.sv* @Perl_newSVsv(%struct.sv* %92)
  store %struct.sv* %call113, %struct.sv** %key2, align 8
  call void @Perl_sv_magic(%struct.sv* %91, %struct.sv* %call113, i32 121, i8* null, i32 0)
  %93 = load %struct.sv*, %struct.sv** %key2, align 8
  call void @Perl_sv_free(%struct.sv* %93)
  %94 = load %struct.hv*, %struct.hv** %hv, align 8
  %95 = bitcast %struct.hv* %94 to %struct.sv*
  store %struct.sv* %95, %struct.sv** @PL_Sv, align 8
  %96 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool114 = icmp ne %struct.sv* %96, null
  br i1 %tobool114, label %land.rhs.115, label %land.end.117

land.rhs.115:                                     ; preds = %if.end.109
  %97 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %97, i32 0, i32 1
  %98 = load i32, i32* %sv_refcnt, align 4
  %inc = add i32 %98, 1
  store i32 %inc, i32* %sv_refcnt, align 4
  %tobool116 = icmp ne i32 %inc, 0
  br label %land.end.117

land.end.117:                                     ; preds = %land.rhs.115, %if.end.109
  %99 = phi i1 [ false, %if.end.109 ], [ %tobool116, %land.rhs.115 ]
  %land.ext118 = zext i1 %99 to i32
  %100 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %101 = load %struct.sv*, %struct.sv** %lv, align 8
  %sv_any119 = getelementptr inbounds %struct.sv, %struct.sv* %101, i32 0, i32 0
  %102 = load i8*, i8** %sv_any119, align 8
  %103 = bitcast i8* %102 to %struct.xpvlv*
  %xlv_targ = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %103, i32 0, i32 9
  store %struct.sv* %100, %struct.sv** %xlv_targ, align 8
  %104 = load %struct.sv*, %struct.sv** %lv, align 8
  %sv_any120 = getelementptr inbounds %struct.sv, %struct.sv* %104, i32 0, i32 0
  %105 = load i8*, i8** %sv_any120, align 8
  %106 = bitcast i8* %105 to %struct.xpvlv*
  %xlv_targlen = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %106, i32 0, i32 8
  store i64 1, i64* %xlv_targlen, align 8
  %107 = load %struct.sv*, %struct.sv** %lv, align 8
  %108 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr121 = getelementptr inbounds %struct.sv*, %struct.sv** %108, i32 1
  store %struct.sv** %incdec.ptr121, %struct.sv*** %sp, align 8
  store %struct.sv* %107, %struct.sv** %incdec.ptr121, align 8
  %109 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %109, %struct.sv*** @PL_stack_sp, align 8
  %110 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next122 = getelementptr inbounds %struct.op, %struct.op* %110, i32 0, i32 0
  %111 = load %struct.op*, %struct.op** %op_next122, align 8
  store %struct.op* %111, %struct.op** %retval
  br label %return

if.end.123:                                       ; preds = %lor.lhs.false.91
  %112 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private124 = getelementptr inbounds %struct.op, %struct.op* %112, i32 0, i32 7
  %113 = load i8, i8* %op_private124, align 1
  %conv125 = zext i8 %113 to i32
  %and126 = and i32 %conv125, 128
  %tobool127 = icmp ne i32 %and126, 0
  br i1 %tobool127, label %if.then.128, label %if.else.164

if.then.128:                                      ; preds = %if.end.123
  %114 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any129 = getelementptr inbounds %struct.hv, %struct.hv* %114, i32 0, i32 0
  %115 = load %struct.xpvhv*, %struct.xpvhv** %sv_any129, align 8
  %xhv_name = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %115, i32 0, i32 10
  %116 = load i8*, i8** %xhv_name, align 8
  %tobool130 = icmp ne i8* %116, null
  br i1 %tobool130, label %land.lhs.true.131, label %if.else.142

land.lhs.true.131:                                ; preds = %if.then.128
  %117 = load %struct.sv**, %struct.sv*** %svp, align 8
  %118 = load %struct.sv*, %struct.sv** %117, align 8
  %sv_flags132 = getelementptr inbounds %struct.sv, %struct.sv* %118, i32 0, i32 2
  %119 = load i32, i32* %sv_flags132, align 4
  %and133 = and i32 %119, 255
  %cmp134 = icmp eq i32 %and133, 13
  br i1 %cmp134, label %if.then.136, label %if.else.142

if.then.136:                                      ; preds = %land.lhs.true.131
  %120 = load %struct.sv**, %struct.sv*** %svp, align 8
  %121 = load %struct.sv*, %struct.sv** %120, align 8
  %122 = bitcast %struct.sv* %121 to %struct.gv*
  %123 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags137 = getelementptr inbounds %struct.op, %struct.op* %123, i32 0, i32 6
  %124 = load i8, i8* %op_flags137, align 1
  %conv138 = zext i8 %124 to i32
  %and139 = and i32 %conv138, 128
  %tobool140 = icmp ne i32 %and139, 0
  %lnot141 = xor i1 %tobool140, true
  %lnot.ext = zext i1 %lnot141 to i32
  call void @Perl_save_gp(%struct.gv* %122, i32 %lnot.ext)
  br label %if.end.163

if.else.142:                                      ; preds = %land.lhs.true.131, %if.then.128
  %125 = load i32, i32* %preeminent, align 4
  %tobool143 = icmp ne i32 %125, 0
  br i1 %tobool143, label %if.else.161, label %if.then.144

if.then.144:                                      ; preds = %if.else.142
  %126 = load %struct.sv*, %struct.sv** %keysv, align 8
  %sv_flags145 = getelementptr inbounds %struct.sv, %struct.sv* %126, i32 0, i32 2
  %127 = load i32, i32* %sv_flags145, align 4
  %and146 = and i32 %127, 262144
  %cmp147 = icmp eq i32 %and146, 262144
  br i1 %cmp147, label %cond.true.149, label %cond.false.154

cond.true.149:                                    ; preds = %if.then.144
  %128 = load %struct.sv*, %struct.sv** %keysv, align 8
  %sv_any150 = getelementptr inbounds %struct.sv, %struct.sv* %128, i32 0, i32 0
  %129 = load i8*, i8** %sv_any150, align 8
  %130 = bitcast i8* %129 to %struct.xpv*
  %xpv_cur151 = getelementptr inbounds %struct.xpv, %struct.xpv* %130, i32 0, i32 1
  %131 = load i64, i64* %xpv_cur151, align 8
  store i64 %131, i64* %keylen, align 8
  %132 = load %struct.sv*, %struct.sv** %keysv, align 8
  %sv_any152 = getelementptr inbounds %struct.sv, %struct.sv* %132, i32 0, i32 0
  %133 = load i8*, i8** %sv_any152, align 8
  %134 = bitcast i8* %133 to %struct.xpv*
  %xpv_pv153 = getelementptr inbounds %struct.xpv, %struct.xpv* %134, i32 0, i32 0
  %135 = load i8*, i8** %xpv_pv153, align 8
  br label %cond.end.156

cond.false.154:                                   ; preds = %if.then.144
  %136 = load %struct.sv*, %struct.sv** %keysv, align 8
  %call155 = call i8* @Perl_sv_2pv_flags(%struct.sv* %136, i64* %keylen, i32 2)
  br label %cond.end.156

cond.end.156:                                     ; preds = %cond.false.154, %cond.true.149
  %cond157 = phi i8* [ %135, %cond.true.149 ], [ %call155, %cond.false.154 ]
  store i8* %cond157, i8** %key, align 8
  %137 = load %struct.hv*, %struct.hv** %hv, align 8
  %138 = load i8*, i8** %key, align 8
  %139 = load i64, i64* %keylen, align 8
  %conv158 = trunc i64 %139 to i32
  %call159 = call i8* @Perl_savepvn(i8* %138, i32 %conv158)
  %140 = load i64, i64* %keylen, align 8
  %conv160 = trunc i64 %140 to i32
  call void @Perl_save_delete(%struct.hv* %137, i8* %call159, i32 %conv160)
  br label %if.end.162

if.else.161:                                      ; preds = %if.else.142
  %141 = load %struct.hv*, %struct.hv** %hv, align 8
  %142 = load %struct.sv*, %struct.sv** %keysv, align 8
  %143 = load %struct.sv**, %struct.sv*** %svp, align 8
  call void @Perl_save_helem(%struct.hv* %141, %struct.sv* %142, %struct.sv** %143)
  br label %if.end.162

if.end.162:                                       ; preds = %if.else.161, %cond.end.156
  br label %if.end.163

if.end.163:                                       ; preds = %if.end.162, %if.then.136
  br label %if.end.174

if.else.164:                                      ; preds = %if.end.123
  %144 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private165 = getelementptr inbounds %struct.op, %struct.op* %144, i32 0, i32 7
  %145 = load i8, i8* %op_private165, align 1
  %conv166 = zext i8 %145 to i32
  %and167 = and i32 %conv166, 96
  %tobool168 = icmp ne i32 %and167, 0
  br i1 %tobool168, label %if.then.169, label %if.end.173

if.then.169:                                      ; preds = %if.else.164
  %146 = load %struct.sv**, %struct.sv*** %svp, align 8
  %147 = load %struct.sv*, %struct.sv** %146, align 8
  %148 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private170 = getelementptr inbounds %struct.op, %struct.op* %148, i32 0, i32 7
  %149 = load i8, i8* %op_private170, align 1
  %conv171 = zext i8 %149 to i32
  %and172 = and i32 %conv171, 96
  call void @Perl_vivify_ref(%struct.sv* %147, i32 %and172)
  br label %if.end.173

if.end.173:                                       ; preds = %if.then.169, %if.else.164
  br label %if.end.174

if.end.174:                                       ; preds = %if.end.173, %if.end.163
  br label %if.end.175

if.end.175:                                       ; preds = %if.end.174, %if.end.87
  %150 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool176 = icmp ne %struct.sv** %150, null
  br i1 %tobool176, label %cond.true.177, label %cond.false.178

cond.true.177:                                    ; preds = %if.end.175
  %151 = load %struct.sv**, %struct.sv*** %svp, align 8
  %152 = load %struct.sv*, %struct.sv** %151, align 8
  br label %cond.end.179

cond.false.178:                                   ; preds = %if.end.175
  br label %cond.end.179

cond.end.179:                                     ; preds = %cond.false.178, %cond.true.177
  %cond180 = phi %struct.sv* [ %152, %cond.true.177 ], [ @PL_sv_undef, %cond.false.178 ]
  store %struct.sv* %cond180, %struct.sv** %sv, align 8
  %153 = load i32, i32* %lval, align 4
  %tobool181 = icmp ne i32 %153, 0
  br i1 %tobool181, label %if.end.188, label %land.lhs.true.182

land.lhs.true.182:                                ; preds = %cond.end.179
  %154 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags183 = getelementptr inbounds %struct.sv, %struct.sv* %154, i32 0, i32 2
  %155 = load i32, i32* %sv_flags183, align 4
  %and184 = and i32 %155, 8192
  %tobool185 = icmp ne i32 %and184, 0
  br i1 %tobool185, label %if.then.186, label %if.end.188

if.then.186:                                      ; preds = %land.lhs.true.182
  %156 = load %struct.sv*, %struct.sv** %sv, align 8
  %call187 = call %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %156)
  store %struct.sv* %call187, %struct.sv** %sv, align 8
  br label %if.end.188

if.end.188:                                       ; preds = %if.then.186, %land.lhs.true.182, %cond.end.179
  %157 = load %struct.sv*, %struct.sv** %sv, align 8
  %158 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr189 = getelementptr inbounds %struct.sv*, %struct.sv** %158, i32 1
  store %struct.sv** %incdec.ptr189, %struct.sv*** %sp, align 8
  store %struct.sv* %157, %struct.sv** %incdec.ptr189, align 8
  %159 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %159, %struct.sv*** @PL_stack_sp, align 8
  %160 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next190 = getelementptr inbounds %struct.op, %struct.op* %160, i32 0, i32 0
  %161 = load %struct.op*, %struct.op** %op_next190, align 8
  store %struct.op* %161, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.end.188, %land.end.117, %cond.end.106, %if.else.84, %if.then.74
  %162 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %162
}

declare %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv*, i8*, i32) #1

declare %struct.he* @Perl_hv_fetch_ent(%struct.hv*, %struct.sv*, i32, i32) #1

declare %struct.sv** @Perl_avhv_fetch_ent(%struct.av*, %struct.sv*, i32, i32) #1

declare void @Perl_sv_free(%struct.sv*) #1

declare void @Perl_save_gp(%struct.gv*, i32) #1

declare void @Perl_save_delete(%struct.hv*, i8*, i32) #1

declare void @Perl_save_helem(%struct.hv*, %struct.sv*, %struct.sv**) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_leave() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %cx = alloca %struct.context*, align 8
  %mark = alloca %struct.sv**, align 8
  %newsp = alloca %struct.sv**, align 8
  %newpm = alloca %struct.pmop*, align 8
  %gimme = alloca i32, align 4
  %markoff = alloca i32, align 4
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  %2 = load i8, i8* %op_flags, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %3, i32 0, i32 2
  %4 = load i32, i32* %si_cxix, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %5, i32 0, i32 1
  %6 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %6, i64 %idxprom
  store %struct.context* %arrayidx, %struct.context** %cx, align 8
  %7 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  %8 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %8, i32 0, i32 1
  %cx_blk = bitcast %union.anon.0* %cx_u to %struct.block*
  %blku_oldpm = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 5
  store %struct.pmop* %7, %struct.pmop** %blku_oldpm, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %9 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix1 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %9, i32 0, i32 2
  %10 = load i32, i32* %si_cxix1, align 4
  %dec = add nsw i32 %10, -1
  store i32 %dec, i32* %si_cxix1, align 4
  %idxprom2 = sext i32 %10 to i64
  %11 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack3 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %11, i32 0, i32 1
  %12 = load %struct.context*, %struct.context** %si_cxstack3, align 8
  %arrayidx4 = getelementptr inbounds %struct.context, %struct.context* %12, i64 %idxprom2
  store %struct.context* %arrayidx4, %struct.context** %cx, align 8
  %13 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %14 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u5 = getelementptr inbounds %struct.context, %struct.context* %14, i32 0, i32 1
  %cx_blk6 = bitcast %union.anon.0* %cx_u5 to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk6, i32 0, i32 0
  %15 = load i32, i32* %blku_oldsp, align 4
  %idx.ext = sext i32 %15 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %13, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %newsp, align 8
  %16 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u7 = getelementptr inbounds %struct.context, %struct.context* %16, i32 0, i32 1
  %cx_blk8 = bitcast %union.anon.0* %cx_u7 to %struct.block*
  %blku_oldcop = getelementptr inbounds %struct.block, %struct.block* %cx_blk8, i32 0, i32 1
  %17 = load %struct.cop*, %struct.cop** %blku_oldcop, align 8
  store volatile %struct.cop* %17, %struct.cop** @PL_curcop, align 8
  %18 = load i32*, i32** @PL_markstack, align 8
  %19 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u9 = getelementptr inbounds %struct.context, %struct.context* %19, i32 0, i32 1
  %cx_blk10 = bitcast %union.anon.0* %cx_u9 to %struct.block*
  %blku_oldmarksp = getelementptr inbounds %struct.block, %struct.block* %cx_blk10, i32 0, i32 3
  %20 = load i32, i32* %blku_oldmarksp, align 4
  %idx.ext11 = sext i32 %20 to i64
  %add.ptr12 = getelementptr inbounds i32, i32* %18, i64 %idx.ext11
  store i32* %add.ptr12, i32** @PL_markstack_ptr, align 8
  %21 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u13 = getelementptr inbounds %struct.context, %struct.context* %21, i32 0, i32 1
  %cx_blk14 = bitcast %union.anon.0* %cx_u13 to %struct.block*
  %blku_oldscopesp = getelementptr inbounds %struct.block, %struct.block* %cx_blk14, i32 0, i32 4
  %22 = load i32, i32* %blku_oldscopesp, align 4
  store i32 %22, i32* @PL_scopestack_ix, align 4
  %23 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u15 = getelementptr inbounds %struct.context, %struct.context* %23, i32 0, i32 1
  %cx_blk16 = bitcast %union.anon.0* %cx_u15 to %struct.block*
  %blku_oldretsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk16, i32 0, i32 2
  %24 = load i32, i32* %blku_oldretsp, align 4
  store i32 %24, i32* @PL_retstack_ix, align 4
  %25 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u17 = getelementptr inbounds %struct.context, %struct.context* %25, i32 0, i32 1
  %cx_blk18 = bitcast %union.anon.0* %cx_u17 to %struct.block*
  %blku_oldpm19 = getelementptr inbounds %struct.block, %struct.block* %cx_blk18, i32 0, i32 5
  %26 = load %struct.pmop*, %struct.pmop** %blku_oldpm19, align 8
  store %struct.pmop* %26, %struct.pmop** %newpm, align 8
  %27 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u20 = getelementptr inbounds %struct.context, %struct.context* %27, i32 0, i32 1
  %cx_blk21 = bitcast %union.anon.0* %cx_u20 to %struct.block*
  %blku_gimme = getelementptr inbounds %struct.block, %struct.block* %cx_blk21, i32 0, i32 6
  %28 = load i8, i8* %blku_gimme, align 1
  %conv22 = zext i8 %28 to i32
  store i32 %conv22, i32* %gimme, align 4
  %29 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags23 = getelementptr inbounds %struct.op, %struct.op* %29, i32 0, i32 6
  %30 = load i8, i8* %op_flags23, align 1
  %conv24 = zext i8 %30 to i32
  %and25 = and i32 %conv24, 3
  %cmp = icmp eq i32 %and25, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end.40

cond.false:                                       ; preds = %if.end
  %31 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags27 = getelementptr inbounds %struct.op, %struct.op* %31, i32 0, i32 6
  %32 = load i8, i8* %op_flags27, align 1
  %conv28 = zext i8 %32 to i32
  %and29 = and i32 %conv28, 3
  %cmp30 = icmp eq i32 %and29, 2
  br i1 %cmp30, label %cond.true.32, label %cond.false.33

cond.true.32:                                     ; preds = %cond.false
  br label %cond.end

cond.false.33:                                    ; preds = %cond.false
  %33 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags34 = getelementptr inbounds %struct.op, %struct.op* %33, i32 0, i32 6
  %34 = load i8, i8* %op_flags34, align 1
  %conv35 = zext i8 %34 to i32
  %and36 = and i32 %conv35, 3
  %cmp37 = icmp eq i32 %and36, 3
  %cond = select i1 %cmp37, i32 1, i32 -1
  br label %cond.end

cond.end:                                         ; preds = %cond.false.33, %cond.true.32
  %cond39 = phi i32 [ 0, %cond.true.32 ], [ %cond, %cond.false.33 ]
  br label %cond.end.40

cond.end.40:                                      ; preds = %cond.end, %cond.true
  %cond41 = phi i32 [ 128, %cond.true ], [ %cond39, %cond.end ]
  store i32 %cond41, i32* %gimme, align 4
  %35 = load i32, i32* %gimme, align 4
  %cmp42 = icmp eq i32 %35, -1
  br i1 %cmp42, label %if.then.44, label %if.end.58

if.then.44:                                       ; preds = %cond.end.40
  %36 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix45 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %36, i32 0, i32 2
  %37 = load i32, i32* %si_cxix45, align 4
  %cmp46 = icmp sge i32 %37, 0
  br i1 %cmp46, label %if.then.48, label %if.else

if.then.48:                                       ; preds = %if.then.44
  %38 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix49 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %38, i32 0, i32 2
  %39 = load i32, i32* %si_cxix49, align 4
  %idxprom50 = sext i32 %39 to i64
  %40 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack51 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %40, i32 0, i32 1
  %41 = load %struct.context*, %struct.context** %si_cxstack51, align 8
  %arrayidx52 = getelementptr inbounds %struct.context, %struct.context* %41, i64 %idxprom50
  %cx_u53 = getelementptr inbounds %struct.context, %struct.context* %arrayidx52, i32 0, i32 1
  %cx_blk54 = bitcast %union.anon.0* %cx_u53 to %struct.block*
  %blku_gimme55 = getelementptr inbounds %struct.block, %struct.block* %cx_blk54, i32 0, i32 6
  %42 = load i8, i8* %blku_gimme55, align 1
  %conv56 = zext i8 %42 to i32
  store i32 %conv56, i32* %gimme, align 4
  br label %if.end.57

if.else:                                          ; preds = %if.then.44
  store i32 0, i32* %gimme, align 4
  br label %if.end.57

if.end.57:                                        ; preds = %if.else, %if.then.48
  br label %if.end.58

if.end.58:                                        ; preds = %if.end.57, %cond.end.40
  store i8 0, i8* @PL_tainted, align 1
  %43 = load i32, i32* %gimme, align 4
  %cmp59 = icmp eq i32 %43, 128
  br i1 %cmp59, label %if.then.61, label %if.else.62

if.then.61:                                       ; preds = %if.end.58
  %44 = load %struct.sv**, %struct.sv*** %newsp, align 8
  store %struct.sv** %44, %struct.sv*** %sp, align 8
  br label %if.end.104

if.else.62:                                       ; preds = %if.end.58
  %45 = load i32, i32* %gimme, align 4
  %cmp63 = icmp eq i32 %45, 0
  br i1 %cmp63, label %if.then.65, label %if.else.89

if.then.65:                                       ; preds = %if.else.62
  %46 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %add.ptr66 = getelementptr inbounds %struct.sv*, %struct.sv** %46, i64 1
  store %struct.sv** %add.ptr66, %struct.sv*** %mark, align 8
  %47 = load %struct.sv**, %struct.sv*** %mark, align 8
  %48 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp67 = icmp ule %struct.sv** %47, %48
  br i1 %cmp67, label %if.then.69, label %if.else.75

if.then.69:                                       ; preds = %if.then.65
  %49 = load %struct.sv**, %struct.sv*** %sp, align 8
  %50 = load %struct.sv*, %struct.sv** %49, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 2
  %51 = load i32, i32* %sv_flags, align 4
  %and70 = and i32 %51, 2560
  %tobool71 = icmp ne i32 %and70, 0
  br i1 %tobool71, label %if.then.72, label %if.else.73

if.then.72:                                       ; preds = %if.then.69
  %52 = load %struct.sv**, %struct.sv*** %sp, align 8
  %53 = load %struct.sv*, %struct.sv** %52, align 8
  %54 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %53, %struct.sv** %54, align 8
  br label %if.end.74

if.else.73:                                       ; preds = %if.then.69
  %55 = load %struct.sv**, %struct.sv*** %sp, align 8
  %56 = load %struct.sv*, %struct.sv** %55, align 8
  %call = call %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %56)
  %57 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %call, %struct.sv** %57, align 8
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.73, %if.then.72
  br label %if.end.88

if.else.75:                                       ; preds = %if.then.65
  %58 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %59 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %58 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %59 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp76 = icmp slt i64 %sub.ptr.div, 0
  br i1 %cmp76, label %if.then.78, label %if.end.87

if.then.78:                                       ; preds = %if.else.75
  %60 = load %struct.sv**, %struct.sv*** %mark, align 8
  %61 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast79 = ptrtoint %struct.sv** %60 to i64
  %sub.ptr.rhs.cast80 = ptrtoint %struct.sv** %61 to i64
  %sub.ptr.sub81 = sub i64 %sub.ptr.lhs.cast79, %sub.ptr.rhs.cast80
  %sub.ptr.div82 = sdiv exact i64 %sub.ptr.sub81, 8
  %conv83 = trunc i64 %sub.ptr.div82 to i32
  store i32 %conv83, i32* %markoff, align 4
  %62 = load %struct.sv**, %struct.sv*** %sp, align 8
  %63 = load %struct.sv**, %struct.sv*** %mark, align 8
  %call84 = call %struct.sv** @Perl_stack_grow(%struct.sv** %62, %struct.sv** %63, i32 0)
  store %struct.sv** %call84, %struct.sv*** %sp, align 8
  %64 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %65 = load i32, i32* %markoff, align 4
  %idx.ext85 = sext i32 %65 to i64
  %add.ptr86 = getelementptr inbounds %struct.sv*, %struct.sv** %64, i64 %idx.ext85
  store %struct.sv** %add.ptr86, %struct.sv*** %mark, align 8
  br label %if.end.87

if.end.87:                                        ; preds = %if.then.78, %if.else.75
  %66 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %66, align 8
  br label %if.end.88

if.end.88:                                        ; preds = %if.end.87, %if.end.74
  %67 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv** %67, %struct.sv*** %sp, align 8
  br label %if.end.103

if.else.89:                                       ; preds = %if.else.62
  %68 = load i32, i32* %gimme, align 4
  %cmp90 = icmp eq i32 %68, 1
  br i1 %cmp90, label %if.then.92, label %if.end.102

if.then.92:                                       ; preds = %if.else.89
  %69 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %add.ptr93 = getelementptr inbounds %struct.sv*, %struct.sv** %69, i64 1
  store %struct.sv** %add.ptr93, %struct.sv*** %mark, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.92
  %70 = load %struct.sv**, %struct.sv*** %mark, align 8
  %71 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp94 = icmp ule %struct.sv** %70, %71
  br i1 %cmp94, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %72 = load %struct.sv**, %struct.sv*** %mark, align 8
  %73 = load %struct.sv*, %struct.sv** %72, align 8
  %sv_flags96 = getelementptr inbounds %struct.sv, %struct.sv* %73, i32 0, i32 2
  %74 = load i32, i32* %sv_flags96, align 4
  %and97 = and i32 %74, 2560
  %tobool98 = icmp ne i32 %and97, 0
  br i1 %tobool98, label %if.end.101, label %if.then.99

if.then.99:                                       ; preds = %for.body
  %75 = load %struct.sv**, %struct.sv*** %mark, align 8
  %76 = load %struct.sv*, %struct.sv** %75, align 8
  %call100 = call %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %76)
  %77 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %call100, %struct.sv** %77, align 8
  store i8 0, i8* @PL_tainted, align 1
  br label %if.end.101

if.end.101:                                       ; preds = %if.then.99, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.101
  %78 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %78, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %mark, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.102

if.end.102:                                       ; preds = %for.end, %if.else.89
  br label %if.end.103

if.end.103:                                       ; preds = %if.end.102, %if.end.88
  br label %if.end.104

if.end.104:                                       ; preds = %if.end.103, %if.then.61
  %79 = load %struct.pmop*, %struct.pmop** %newpm, align 8
  store %struct.pmop* %79, %struct.pmop** @PL_curpm, align 8
  call void @Perl_pop_scope()
  %80 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %80, %struct.sv*** @PL_stack_sp, align 8
  %81 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %81, i32 0, i32 0
  %82 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %82
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_iter() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %cx = alloca %struct.context*, align 8
  %sv = alloca %struct.sv*, align 8
  %oldsv = alloca %struct.sv*, align 8
  %av = alloca %struct.av*, align 8
  %itersvp = alloca %struct.sv**, align 8
  %cur = alloca %struct.sv*, align 8
  %maxlen = alloca i64, align 8
  %max = alloca i8*, align 8
  %svp = alloca %struct.sv**, align 8
  %svp186 = alloca %struct.sv**, align 8
  %lv = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %2 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %1 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %3, %struct.sv** %4, i32 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %5, i32 0, i32 2
  %6 = load i32, i32* %si_cxix, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %7, i32 0, i32 1
  %8 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %8, i64 %idxprom
  store %struct.context* %arrayidx, %struct.context** %cx, align 8
  %9 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type = getelementptr inbounds %struct.context, %struct.context* %9, i32 0, i32 0
  %10 = load i32, i32* %cx_type, align 4
  %and = and i32 %10, 255
  %cmp1 = icmp ne i32 %and, 3
  br i1 %cmp1, label %if.then.2, label %if.end.4

if.then.2:                                        ; preds = %if.end
  %call3 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.24, i32 0, i32 0))
  store %struct.op* %call3, %struct.op** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %11 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %11, i32 0, i32 1
  %cx_blk = bitcast %union.anon.0* %cx_u to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 7
  %blku_loop = bitcast %union.anon.1* %blk_u to %struct.block_loop*
  %itervar = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop, i32 0, i32 5
  %12 = load %struct.sv**, %struct.sv*** %itervar, align 8
  store %struct.sv** %12, %struct.sv*** %itersvp, align 8
  %13 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u5 = getelementptr inbounds %struct.context, %struct.context* %13, i32 0, i32 1
  %cx_blk6 = bitcast %union.anon.0* %cx_u5 to %struct.block*
  %blk_u7 = getelementptr inbounds %struct.block, %struct.block* %cx_blk6, i32 0, i32 7
  %blku_loop8 = bitcast %union.anon.1* %blk_u7 to %struct.block_loop*
  %iterary = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop8, i32 0, i32 8
  %14 = load %struct.av*, %struct.av** %iterary, align 8
  store %struct.av* %14, %struct.av** %av, align 8
  %15 = load %struct.av*, %struct.av** %av, align 8
  %sv_flags = getelementptr inbounds %struct.av, %struct.av* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags, align 4
  %and9 = and i32 %16, 255
  %cmp10 = icmp ne i32 %and9, 10
  br i1 %cmp10, label %if.then.11, label %if.end.96

if.then.11:                                       ; preds = %if.end.4
  %17 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u12 = getelementptr inbounds %struct.context, %struct.context* %17, i32 0, i32 1
  %cx_blk13 = bitcast %union.anon.0* %cx_u12 to %struct.block*
  %blk_u14 = getelementptr inbounds %struct.block, %struct.block* %cx_blk13, i32 0, i32 7
  %blku_loop15 = bitcast %union.anon.1* %blk_u14 to %struct.block_loop*
  %iterlval = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop15, i32 0, i32 7
  %18 = load %struct.sv*, %struct.sv** %iterlval, align 8
  %tobool = icmp ne %struct.sv* %18, null
  br i1 %tobool, label %if.then.16, label %if.end.59

if.then.16:                                       ; preds = %if.then.11
  %19 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u17 = getelementptr inbounds %struct.context, %struct.context* %19, i32 0, i32 1
  %cx_blk18 = bitcast %union.anon.0* %cx_u17 to %struct.block*
  %blk_u19 = getelementptr inbounds %struct.block, %struct.block* %cx_blk18, i32 0, i32 7
  %blku_loop20 = bitcast %union.anon.1* %blk_u19 to %struct.block_loop*
  %iterlval21 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop20, i32 0, i32 7
  %20 = load %struct.sv*, %struct.sv** %iterlval21, align 8
  store %struct.sv* %20, %struct.sv** %cur, align 8
  store i64 0, i64* %maxlen, align 8
  %21 = load %struct.av*, %struct.av** %av, align 8
  %22 = bitcast %struct.av* %21 to %struct.sv*
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %23, 118423552
  %tobool24 = icmp ne i32 %and23, 0
  br i1 %tobool24, label %cond.true, label %cond.false.31

cond.true:                                        ; preds = %if.then.16
  %24 = load %struct.av*, %struct.av** %av, align 8
  %25 = bitcast %struct.av* %24 to %struct.sv*
  %sv_flags25 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags25, align 4
  %and26 = and i32 %26, 262144
  %cmp27 = icmp eq i32 %and26, 262144
  br i1 %cmp27, label %cond.true.28, label %cond.false

cond.true.28:                                     ; preds = %cond.true
  %27 = load %struct.av*, %struct.av** %av, align 8
  %28 = bitcast %struct.av* %27 to %struct.sv*
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 0
  %29 = load i8*, i8** %sv_any, align 8
  %30 = bitcast i8* %29 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %30, i32 0, i32 1
  %31 = load i64, i64* %xpv_cur, align 8
  store i64 %31, i64* %maxlen, align 8
  %32 = load %struct.av*, %struct.av** %av, align 8
  %33 = bitcast %struct.av* %32 to %struct.sv*
  %sv_any29 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 0
  %34 = load i8*, i8** %sv_any29, align 8
  %35 = bitcast i8* %34 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %35, i32 0, i32 0
  %36 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %37 = load %struct.av*, %struct.av** %av, align 8
  %38 = bitcast %struct.av* %37 to %struct.sv*
  %call30 = call i8* @Perl_sv_2pv_flags(%struct.sv* %38, i64* %maxlen, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.28
  %cond = phi i8* [ %36, %cond.true.28 ], [ %call30, %cond.false ]
  br label %cond.end.32

cond.false.31:                                    ; preds = %if.then.16
  br label %cond.end.32

cond.end.32:                                      ; preds = %cond.false.31, %cond.end
  %cond33 = phi i8* [ %cond, %cond.end ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i32 0), %cond.false.31 ]
  store i8* %cond33, i8** %max, align 8
  %39 = load %struct.sv*, %struct.sv** %cur, align 8
  %sv_flags34 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags34, align 4
  %and35 = and i32 %40, 196608
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %if.end.56, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.end.32
  %41 = load %struct.sv*, %struct.sv** %cur, align 8
  %sv_any37 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 0
  %42 = load i8*, i8** %sv_any37, align 8
  %43 = bitcast i8* %42 to %struct.xpv*
  %xpv_cur38 = getelementptr inbounds %struct.xpv, %struct.xpv* %43, i32 0, i32 1
  %44 = load i64, i64* %xpv_cur38, align 8
  %45 = load i64, i64* %maxlen, align 8
  %cmp39 = icmp ule i64 %44, %45
  br i1 %cmp39, label %if.then.40, label %if.end.56

if.then.40:                                       ; preds = %land.lhs.true
  %46 = load %struct.sv**, %struct.sv*** %itersvp, align 8
  %47 = load %struct.sv*, %struct.sv** %46, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 1
  %48 = load i32, i32* %sv_refcnt, align 4
  %cmp41 = icmp eq i32 %48, 1
  br i1 %cmp41, label %land.lhs.true.42, label %if.else

land.lhs.true.42:                                 ; preds = %if.then.40
  %49 = load %struct.sv**, %struct.sv*** %itersvp, align 8
  %50 = load %struct.sv*, %struct.sv** %49, align 8
  %sv_flags43 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 2
  %51 = load i32, i32* %sv_flags43, align 4
  %and44 = and i32 %51, 57344
  %tobool45 = icmp ne i32 %and44, 0
  br i1 %tobool45, label %if.else, label %if.then.46

if.then.46:                                       ; preds = %land.lhs.true.42
  %52 = load %struct.sv**, %struct.sv*** %itersvp, align 8
  %53 = load %struct.sv*, %struct.sv** %52, align 8
  %54 = load %struct.sv*, %struct.sv** %cur, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %53, %struct.sv* %54, i32 2)
  br label %if.end.48

if.else:                                          ; preds = %land.lhs.true.42, %if.then.40
  %55 = load %struct.sv**, %struct.sv*** %itersvp, align 8
  %56 = load %struct.sv*, %struct.sv** %55, align 8
  store %struct.sv* %56, %struct.sv** %oldsv, align 8
  %57 = load %struct.sv*, %struct.sv** %cur, align 8
  %call47 = call %struct.sv* @Perl_newSVsv(%struct.sv* %57)
  %58 = load %struct.sv**, %struct.sv*** %itersvp, align 8
  store %struct.sv* %call47, %struct.sv** %58, align 8
  %59 = load %struct.sv*, %struct.sv** %oldsv, align 8
  call void @Perl_sv_free(%struct.sv* %59)
  br label %if.end.48

if.end.48:                                        ; preds = %if.else, %if.then.46
  %60 = load %struct.sv*, %struct.sv** %cur, align 8
  %sv_any49 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 0
  %61 = load i8*, i8** %sv_any49, align 8
  %62 = bitcast i8* %61 to %struct.xpv*
  %xpv_pv50 = getelementptr inbounds %struct.xpv, %struct.xpv* %62, i32 0, i32 0
  %63 = load i8*, i8** %xpv_pv50, align 8
  %64 = load i8*, i8** %max, align 8
  %call51 = call i32 @strcmp(i8* %63, i8* %64)
  %tobool52 = icmp ne i32 %call51, 0
  br i1 %tobool52, label %if.else.54, label %if.then.53

if.then.53:                                       ; preds = %if.end.48
  %65 = load %struct.sv*, %struct.sv** %cur, align 8
  call void @Perl_sv_setiv(%struct.sv* %65, i64 0)
  br label %if.end.55

if.else.54:                                       ; preds = %if.end.48
  %66 = load %struct.sv*, %struct.sv** %cur, align 8
  call void @Perl_sv_inc(%struct.sv* %66)
  br label %if.end.55

if.end.55:                                        ; preds = %if.else.54, %if.then.53
  %67 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %67, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr, align 8
  %68 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %68, %struct.sv*** @PL_stack_sp, align 8
  %69 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %69, i32 0, i32 0
  %70 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %70, %struct.op** %retval
  br label %return

if.end.56:                                        ; preds = %land.lhs.true, %cond.end.32
  %71 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr57 = getelementptr inbounds %struct.sv*, %struct.sv** %71, i32 1
  store %struct.sv** %incdec.ptr57, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_no, %struct.sv** %incdec.ptr57, align 8
  %72 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %72, %struct.sv*** @PL_stack_sp, align 8
  %73 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next58 = getelementptr inbounds %struct.op, %struct.op* %73, i32 0, i32 0
  %74 = load %struct.op*, %struct.op** %op_next58, align 8
  store %struct.op* %74, %struct.op** %retval
  br label %return

if.end.59:                                        ; preds = %if.then.11
  %75 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u60 = getelementptr inbounds %struct.context, %struct.context* %75, i32 0, i32 1
  %cx_blk61 = bitcast %union.anon.0* %cx_u60 to %struct.block*
  %blk_u62 = getelementptr inbounds %struct.block, %struct.block* %cx_blk61, i32 0, i32 7
  %blku_loop63 = bitcast %union.anon.1* %blk_u62 to %struct.block_loop*
  %iterix = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop63, i32 0, i32 9
  %76 = load i64, i64* %iterix, align 8
  %77 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u64 = getelementptr inbounds %struct.context, %struct.context* %77, i32 0, i32 1
  %cx_blk65 = bitcast %union.anon.0* %cx_u64 to %struct.block*
  %blk_u66 = getelementptr inbounds %struct.block, %struct.block* %cx_blk65, i32 0, i32 7
  %blku_loop67 = bitcast %union.anon.1* %blk_u66 to %struct.block_loop*
  %itermax = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop67, i32 0, i32 10
  %78 = load i64, i64* %itermax, align 8
  %cmp68 = icmp sgt i64 %76, %78
  br i1 %cmp68, label %if.then.69, label %if.end.72

if.then.69:                                       ; preds = %if.end.59
  %79 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr70 = getelementptr inbounds %struct.sv*, %struct.sv** %79, i32 1
  store %struct.sv** %incdec.ptr70, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_no, %struct.sv** %incdec.ptr70, align 8
  %80 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %80, %struct.sv*** @PL_stack_sp, align 8
  %81 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next71 = getelementptr inbounds %struct.op, %struct.op* %81, i32 0, i32 0
  %82 = load %struct.op*, %struct.op** %op_next71, align 8
  store %struct.op* %82, %struct.op** %retval
  br label %return

if.end.72:                                        ; preds = %if.end.59
  %83 = load %struct.sv**, %struct.sv*** %itersvp, align 8
  %84 = load %struct.sv*, %struct.sv** %83, align 8
  %sv_refcnt73 = getelementptr inbounds %struct.sv, %struct.sv* %84, i32 0, i32 1
  %85 = load i32, i32* %sv_refcnt73, align 4
  %cmp74 = icmp eq i32 %85, 1
  br i1 %cmp74, label %land.lhs.true.75, label %if.else.85

land.lhs.true.75:                                 ; preds = %if.end.72
  %86 = load %struct.sv**, %struct.sv*** %itersvp, align 8
  %87 = load %struct.sv*, %struct.sv** %86, align 8
  %sv_flags76 = getelementptr inbounds %struct.sv, %struct.sv* %87, i32 0, i32 2
  %88 = load i32, i32* %sv_flags76, align 4
  %and77 = and i32 %88, 57344
  %tobool78 = icmp ne i32 %and77, 0
  br i1 %tobool78, label %if.else.85, label %if.then.79

if.then.79:                                       ; preds = %land.lhs.true.75
  %89 = load %struct.sv**, %struct.sv*** %itersvp, align 8
  %90 = load %struct.sv*, %struct.sv** %89, align 8
  %91 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u80 = getelementptr inbounds %struct.context, %struct.context* %91, i32 0, i32 1
  %cx_blk81 = bitcast %union.anon.0* %cx_u80 to %struct.block*
  %blk_u82 = getelementptr inbounds %struct.block, %struct.block* %cx_blk81, i32 0, i32 7
  %blku_loop83 = bitcast %union.anon.1* %blk_u82 to %struct.block_loop*
  %iterix84 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop83, i32 0, i32 9
  %92 = load i64, i64* %iterix84, align 8
  %inc = add nsw i64 %92, 1
  store i64 %inc, i64* %iterix84, align 8
  call void @Perl_sv_setiv(%struct.sv* %90, i64 %92)
  br label %if.end.93

if.else.85:                                       ; preds = %land.lhs.true.75, %if.end.72
  %93 = load %struct.sv**, %struct.sv*** %itersvp, align 8
  %94 = load %struct.sv*, %struct.sv** %93, align 8
  store %struct.sv* %94, %struct.sv** %oldsv, align 8
  %95 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u86 = getelementptr inbounds %struct.context, %struct.context* %95, i32 0, i32 1
  %cx_blk87 = bitcast %union.anon.0* %cx_u86 to %struct.block*
  %blk_u88 = getelementptr inbounds %struct.block, %struct.block* %cx_blk87, i32 0, i32 7
  %blku_loop89 = bitcast %union.anon.1* %blk_u88 to %struct.block_loop*
  %iterix90 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop89, i32 0, i32 9
  %96 = load i64, i64* %iterix90, align 8
  %inc91 = add nsw i64 %96, 1
  store i64 %inc91, i64* %iterix90, align 8
  %call92 = call %struct.sv* @Perl_newSViv(i64 %96)
  %97 = load %struct.sv**, %struct.sv*** %itersvp, align 8
  store %struct.sv* %call92, %struct.sv** %97, align 8
  %98 = load %struct.sv*, %struct.sv** %oldsv, align 8
  call void @Perl_sv_free(%struct.sv* %98)
  br label %if.end.93

if.end.93:                                        ; preds = %if.else.85, %if.then.79
  %99 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr94 = getelementptr inbounds %struct.sv*, %struct.sv** %99, i32 1
  store %struct.sv** %incdec.ptr94, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr94, align 8
  %100 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %100, %struct.sv*** @PL_stack_sp, align 8
  %101 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next95 = getelementptr inbounds %struct.op, %struct.op* %101, i32 0, i32 0
  %102 = load %struct.op*, %struct.op** %op_next95, align 8
  store %struct.op* %102, %struct.op** %retval
  br label %return

if.end.96:                                        ; preds = %if.end.4
  %103 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %103, i32 0, i32 7
  %104 = load i8, i8* %op_private, align 1
  %conv = zext i8 %104 to i32
  %and97 = and i32 %conv, 4
  %tobool98 = icmp ne i32 %and97, 0
  br i1 %tobool98, label %if.then.99, label %if.else.145

if.then.99:                                       ; preds = %if.end.96
  %105 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u100 = getelementptr inbounds %struct.context, %struct.context* %105, i32 0, i32 1
  %cx_blk101 = bitcast %union.anon.0* %cx_u100 to %struct.block*
  %blk_u102 = getelementptr inbounds %struct.block, %struct.block* %cx_blk101, i32 0, i32 7
  %blku_loop103 = bitcast %union.anon.1* %blk_u102 to %struct.block_loop*
  %iterix104 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop103, i32 0, i32 9
  %106 = load i64, i64* %iterix104, align 8
  %107 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u105 = getelementptr inbounds %struct.context, %struct.context* %107, i32 0, i32 1
  %cx_blk106 = bitcast %union.anon.0* %cx_u105 to %struct.block*
  %blk_u107 = getelementptr inbounds %struct.block, %struct.block* %cx_blk106, i32 0, i32 7
  %blku_loop108 = bitcast %union.anon.1* %blk_u107 to %struct.block_loop*
  %itermax109 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop108, i32 0, i32 10
  %108 = load i64, i64* %itermax109, align 8
  %cmp110 = icmp sle i64 %106, %108
  br i1 %cmp110, label %if.then.112, label %if.end.115

if.then.112:                                      ; preds = %if.then.99
  %109 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr113 = getelementptr inbounds %struct.sv*, %struct.sv** %109, i32 1
  store %struct.sv** %incdec.ptr113, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_no, %struct.sv** %incdec.ptr113, align 8
  %110 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %110, %struct.sv*** @PL_stack_sp, align 8
  %111 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next114 = getelementptr inbounds %struct.op, %struct.op* %111, i32 0, i32 0
  %112 = load %struct.op*, %struct.op** %op_next114, align 8
  store %struct.op* %112, %struct.op** %retval
  br label %return

if.end.115:                                       ; preds = %if.then.99
  %113 = load %struct.av*, %struct.av** %av, align 8
  %sv_flags116 = getelementptr inbounds %struct.av, %struct.av* %113, i32 0, i32 2
  %114 = load i32, i32* %sv_flags116, align 4
  %and117 = and i32 %114, 57344
  %tobool118 = icmp ne i32 %and117, 0
  br i1 %tobool118, label %if.then.123, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.115
  %115 = load %struct.av*, %struct.av** %av, align 8
  %sv_any119 = getelementptr inbounds %struct.av, %struct.av* %115, i32 0, i32 0
  %116 = load %struct.xpvav*, %struct.xpvav** %sv_any119, align 8
  %xav_flags = getelementptr inbounds %struct.xpvav, %struct.xpvav* %116, i32 0, i32 9
  %117 = load i8, i8* %xav_flags, align 1
  %conv120 = zext i8 %117 to i32
  %and121 = and i32 %conv120, 2
  %tobool122 = icmp ne i32 %and121, 0
  br i1 %tobool122, label %if.then.123, label %if.else.135

if.then.123:                                      ; preds = %lor.lhs.false, %if.end.115
  %118 = load %struct.av*, %struct.av** %av, align 8
  %119 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u124 = getelementptr inbounds %struct.context, %struct.context* %119, i32 0, i32 1
  %cx_blk125 = bitcast %union.anon.0* %cx_u124 to %struct.block*
  %blk_u126 = getelementptr inbounds %struct.block, %struct.block* %cx_blk125, i32 0, i32 7
  %blku_loop127 = bitcast %union.anon.1* %blk_u126 to %struct.block_loop*
  %iterix128 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop127, i32 0, i32 9
  %120 = load i64, i64* %iterix128, align 8
  %dec = add nsw i64 %120, -1
  store i64 %dec, i64* %iterix128, align 8
  %conv129 = trunc i64 %120 to i32
  %call130 = call %struct.sv** @Perl_av_fetch(%struct.av* %118, i32 %conv129, i32 0)
  store %struct.sv** %call130, %struct.sv*** %svp, align 8
  %121 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool131 = icmp ne %struct.sv** %121, null
  br i1 %tobool131, label %if.then.132, label %if.else.133

if.then.132:                                      ; preds = %if.then.123
  %122 = load %struct.sv**, %struct.sv*** %svp, align 8
  %123 = load %struct.sv*, %struct.sv** %122, align 8
  store %struct.sv* %123, %struct.sv** %sv, align 8
  br label %if.end.134

if.else.133:                                      ; preds = %if.then.123
  store %struct.sv* null, %struct.sv** %sv, align 8
  br label %if.end.134

if.end.134:                                       ; preds = %if.else.133, %if.then.132
  br label %if.end.144

if.else.135:                                      ; preds = %lor.lhs.false
  %124 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u136 = getelementptr inbounds %struct.context, %struct.context* %124, i32 0, i32 1
  %cx_blk137 = bitcast %union.anon.0* %cx_u136 to %struct.block*
  %blk_u138 = getelementptr inbounds %struct.block, %struct.block* %cx_blk137, i32 0, i32 7
  %blku_loop139 = bitcast %union.anon.1* %blk_u138 to %struct.block_loop*
  %iterix140 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop139, i32 0, i32 9
  %125 = load i64, i64* %iterix140, align 8
  %dec141 = add nsw i64 %125, -1
  store i64 %dec141, i64* %iterix140, align 8
  %126 = load %struct.av*, %struct.av** %av, align 8
  %sv_any142 = getelementptr inbounds %struct.av, %struct.av* %126, i32 0, i32 0
  %127 = load %struct.xpvav*, %struct.xpvav** %sv_any142, align 8
  %xav_array = getelementptr inbounds %struct.xpvav, %struct.xpvav* %127, i32 0, i32 0
  %128 = load i8*, i8** %xav_array, align 8
  %129 = bitcast i8* %128 to %struct.sv**
  %arrayidx143 = getelementptr inbounds %struct.sv*, %struct.sv** %129, i64 %125
  %130 = load %struct.sv*, %struct.sv** %arrayidx143, align 8
  store %struct.sv* %130, %struct.sv** %sv, align 8
  br label %if.end.144

if.end.144:                                       ; preds = %if.else.135, %if.end.134
  br label %if.end.210

if.else.145:                                      ; preds = %if.end.96
  %131 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u146 = getelementptr inbounds %struct.context, %struct.context* %131, i32 0, i32 1
  %cx_blk147 = bitcast %union.anon.0* %cx_u146 to %struct.block*
  %blk_u148 = getelementptr inbounds %struct.block, %struct.block* %cx_blk147, i32 0, i32 7
  %blku_loop149 = bitcast %union.anon.1* %blk_u148 to %struct.block_loop*
  %iterix150 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop149, i32 0, i32 9
  %132 = load i64, i64* %iterix150, align 8
  %133 = load %struct.av*, %struct.av** %av, align 8
  %134 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %cmp151 = icmp eq %struct.av* %133, %134
  br i1 %cmp151, label %cond.true.153, label %cond.false.157

cond.true.153:                                    ; preds = %if.else.145
  %135 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u154 = getelementptr inbounds %struct.context, %struct.context* %135, i32 0, i32 1
  %cx_blk155 = bitcast %union.anon.0* %cx_u154 to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk155, i32 0, i32 0
  %136 = load i32, i32* %blku_oldsp, align 4
  %conv156 = sext i32 %136 to i64
  br label %cond.end.168

cond.false.157:                                   ; preds = %if.else.145
  %137 = load %struct.av*, %struct.av** %av, align 8
  %138 = bitcast %struct.av* %137 to %struct.sv*
  %sv_flags158 = getelementptr inbounds %struct.sv, %struct.sv* %138, i32 0, i32 2
  %139 = load i32, i32* %sv_flags158, align 4
  %and159 = and i32 %139, 32768
  %tobool160 = icmp ne i32 %and159, 0
  br i1 %tobool160, label %cond.true.161, label %cond.false.164

cond.true.161:                                    ; preds = %cond.false.157
  %140 = load %struct.av*, %struct.av** %av, align 8
  %141 = bitcast %struct.av* %140 to %struct.sv*
  %call162 = call i32 @Perl_mg_size(%struct.sv* %141)
  %conv163 = sext i32 %call162 to i64
  br label %cond.end.166

cond.false.164:                                   ; preds = %cond.false.157
  %142 = load %struct.av*, %struct.av** %av, align 8
  %sv_any165 = getelementptr inbounds %struct.av, %struct.av* %142, i32 0, i32 0
  %143 = load %struct.xpvav*, %struct.xpvav** %sv_any165, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %143, i32 0, i32 1
  %144 = load i64, i64* %xav_fill, align 8
  br label %cond.end.166

cond.end.166:                                     ; preds = %cond.false.164, %cond.true.161
  %cond167 = phi i64 [ %conv163, %cond.true.161 ], [ %144, %cond.false.164 ]
  br label %cond.end.168

cond.end.168:                                     ; preds = %cond.end.166, %cond.true.153
  %cond169 = phi i64 [ %conv156, %cond.true.153 ], [ %cond167, %cond.end.166 ]
  %cmp170 = icmp sge i64 %132, %cond169
  br i1 %cmp170, label %if.then.172, label %if.end.175

if.then.172:                                      ; preds = %cond.end.168
  %145 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr173 = getelementptr inbounds %struct.sv*, %struct.sv** %145, i32 1
  store %struct.sv** %incdec.ptr173, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_no, %struct.sv** %incdec.ptr173, align 8
  %146 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %146, %struct.sv*** @PL_stack_sp, align 8
  %147 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next174 = getelementptr inbounds %struct.op, %struct.op* %147, i32 0, i32 0
  %148 = load %struct.op*, %struct.op** %op_next174, align 8
  store %struct.op* %148, %struct.op** %retval
  br label %return

if.end.175:                                       ; preds = %cond.end.168
  %149 = load %struct.av*, %struct.av** %av, align 8
  %sv_flags176 = getelementptr inbounds %struct.av, %struct.av* %149, i32 0, i32 2
  %150 = load i32, i32* %sv_flags176, align 4
  %and177 = and i32 %150, 57344
  %tobool178 = icmp ne i32 %and177, 0
  br i1 %tobool178, label %if.then.185, label %lor.lhs.false.179

lor.lhs.false.179:                                ; preds = %if.end.175
  %151 = load %struct.av*, %struct.av** %av, align 8
  %sv_any180 = getelementptr inbounds %struct.av, %struct.av* %151, i32 0, i32 0
  %152 = load %struct.xpvav*, %struct.xpvav** %sv_any180, align 8
  %xav_flags181 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %152, i32 0, i32 9
  %153 = load i8, i8* %xav_flags181, align 1
  %conv182 = zext i8 %153 to i32
  %and183 = and i32 %conv182, 2
  %tobool184 = icmp ne i32 %and183, 0
  br i1 %tobool184, label %if.then.185, label %if.else.199

if.then.185:                                      ; preds = %lor.lhs.false.179, %if.end.175
  %154 = load %struct.av*, %struct.av** %av, align 8
  %155 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u187 = getelementptr inbounds %struct.context, %struct.context* %155, i32 0, i32 1
  %cx_blk188 = bitcast %union.anon.0* %cx_u187 to %struct.block*
  %blk_u189 = getelementptr inbounds %struct.block, %struct.block* %cx_blk188, i32 0, i32 7
  %blku_loop190 = bitcast %union.anon.1* %blk_u189 to %struct.block_loop*
  %iterix191 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop190, i32 0, i32 9
  %156 = load i64, i64* %iterix191, align 8
  %inc192 = add nsw i64 %156, 1
  store i64 %inc192, i64* %iterix191, align 8
  %conv193 = trunc i64 %inc192 to i32
  %call194 = call %struct.sv** @Perl_av_fetch(%struct.av* %154, i32 %conv193, i32 0)
  store %struct.sv** %call194, %struct.sv*** %svp186, align 8
  %157 = load %struct.sv**, %struct.sv*** %svp186, align 8
  %tobool195 = icmp ne %struct.sv** %157, null
  br i1 %tobool195, label %if.then.196, label %if.else.197

if.then.196:                                      ; preds = %if.then.185
  %158 = load %struct.sv**, %struct.sv*** %svp186, align 8
  %159 = load %struct.sv*, %struct.sv** %158, align 8
  store %struct.sv* %159, %struct.sv** %sv, align 8
  br label %if.end.198

if.else.197:                                      ; preds = %if.then.185
  store %struct.sv* null, %struct.sv** %sv, align 8
  br label %if.end.198

if.end.198:                                       ; preds = %if.else.197, %if.then.196
  br label %if.end.209

if.else.199:                                      ; preds = %lor.lhs.false.179
  %160 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u200 = getelementptr inbounds %struct.context, %struct.context* %160, i32 0, i32 1
  %cx_blk201 = bitcast %union.anon.0* %cx_u200 to %struct.block*
  %blk_u202 = getelementptr inbounds %struct.block, %struct.block* %cx_blk201, i32 0, i32 7
  %blku_loop203 = bitcast %union.anon.1* %blk_u202 to %struct.block_loop*
  %iterix204 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop203, i32 0, i32 9
  %161 = load i64, i64* %iterix204, align 8
  %inc205 = add nsw i64 %161, 1
  store i64 %inc205, i64* %iterix204, align 8
  %162 = load %struct.av*, %struct.av** %av, align 8
  %sv_any206 = getelementptr inbounds %struct.av, %struct.av* %162, i32 0, i32 0
  %163 = load %struct.xpvav*, %struct.xpvav** %sv_any206, align 8
  %xav_array207 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %163, i32 0, i32 0
  %164 = load i8*, i8** %xav_array207, align 8
  %165 = bitcast i8* %164 to %struct.sv**
  %arrayidx208 = getelementptr inbounds %struct.sv*, %struct.sv** %165, i64 %inc205
  %166 = load %struct.sv*, %struct.sv** %arrayidx208, align 8
  store %struct.sv* %166, %struct.sv** %sv, align 8
  br label %if.end.209

if.end.209:                                       ; preds = %if.else.199, %if.end.198
  br label %if.end.210

if.end.210:                                       ; preds = %if.end.209, %if.end.144
  %167 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool211 = icmp ne %struct.sv* %167, null
  br i1 %tobool211, label %land.lhs.true.212, label %if.end.217

land.lhs.true.212:                                ; preds = %if.end.210
  %168 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt213 = getelementptr inbounds %struct.sv, %struct.sv* %168, i32 0, i32 1
  %169 = load i32, i32* %sv_refcnt213, align 4
  %cmp214 = icmp eq i32 %169, 0
  br i1 %cmp214, label %if.then.216, label %if.end.217

if.then.216:                                      ; preds = %land.lhs.true.212
  %170 = load %struct.sv**, %struct.sv*** %itersvp, align 8
  store %struct.sv* null, %struct.sv** %170, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.25, i32 0, i32 0))
  br label %if.end.217

if.end.217:                                       ; preds = %if.then.216, %land.lhs.true.212, %if.end.210
  %171 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool218 = icmp ne %struct.sv* %171, null
  br i1 %tobool218, label %if.then.219, label %if.else.222

if.then.219:                                      ; preds = %if.end.217
  %172 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags220 = getelementptr inbounds %struct.sv, %struct.sv* %172, i32 0, i32 2
  %173 = load i32, i32* %sv_flags220, align 4
  %and221 = and i32 %173, -2049
  store i32 %and221, i32* %sv_flags220, align 4
  br label %if.end.223

if.else.222:                                      ; preds = %if.end.217
  store %struct.sv* @PL_sv_undef, %struct.sv** %sv, align 8
  br label %if.end.223

if.end.223:                                       ; preds = %if.else.222, %if.then.219
  %174 = load %struct.av*, %struct.av** %av, align 8
  %175 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %cmp224 = icmp ne %struct.av* %174, %175
  br i1 %cmp224, label %land.lhs.true.226, label %if.end.268

land.lhs.true.226:                                ; preds = %if.end.223
  %176 = load %struct.sv*, %struct.sv** %sv, align 8
  %cmp227 = icmp eq %struct.sv* %176, @PL_sv_undef
  br i1 %cmp227, label %if.then.229, label %if.end.268

if.then.229:                                      ; preds = %land.lhs.true.226
  %177 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u230 = getelementptr inbounds %struct.context, %struct.context* %177, i32 0, i32 1
  %cx_blk231 = bitcast %union.anon.0* %cx_u230 to %struct.block*
  %blk_u232 = getelementptr inbounds %struct.block, %struct.block* %cx_blk231, i32 0, i32 7
  %blku_loop233 = bitcast %union.anon.1* %blk_u232 to %struct.block_loop*
  %iterlval234 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop233, i32 0, i32 7
  %178 = load %struct.sv*, %struct.sv** %iterlval234, align 8
  store %struct.sv* %178, %struct.sv** %lv, align 8
  %179 = load %struct.sv*, %struct.sv** %lv, align 8
  %tobool235 = icmp ne %struct.sv* %179, null
  br i1 %tobool235, label %land.lhs.true.236, label %if.end.241

land.lhs.true.236:                                ; preds = %if.then.229
  %180 = load %struct.sv*, %struct.sv** %lv, align 8
  %sv_refcnt237 = getelementptr inbounds %struct.sv, %struct.sv* %180, i32 0, i32 1
  %181 = load i32, i32* %sv_refcnt237, align 4
  %cmp238 = icmp ugt i32 %181, 1
  br i1 %cmp238, label %if.then.240, label %if.end.241

if.then.240:                                      ; preds = %land.lhs.true.236
  %182 = load %struct.sv*, %struct.sv** %lv, align 8
  call void @Perl_sv_free(%struct.sv* %182)
  store %struct.sv* null, %struct.sv** %lv, align 8
  br label %if.end.241

if.end.241:                                       ; preds = %if.then.240, %land.lhs.true.236, %if.then.229
  %183 = load %struct.sv*, %struct.sv** %lv, align 8
  %tobool242 = icmp ne %struct.sv* %183, null
  br i1 %tobool242, label %if.then.243, label %if.else.245

if.then.243:                                      ; preds = %if.end.241
  %184 = load %struct.sv*, %struct.sv** %lv, align 8
  %sv_any244 = getelementptr inbounds %struct.sv, %struct.sv* %184, i32 0, i32 0
  %185 = load i8*, i8** %sv_any244, align 8
  %186 = bitcast i8* %185 to %struct.xpvlv*
  %xlv_targ = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %186, i32 0, i32 9
  %187 = load %struct.sv*, %struct.sv** %xlv_targ, align 8
  call void @Perl_sv_free(%struct.sv* %187)
  br label %if.end.254

if.else.245:                                      ; preds = %if.end.241
  %call246 = call %struct.sv* @Perl_newSV(i64 0)
  %188 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u247 = getelementptr inbounds %struct.context, %struct.context* %188, i32 0, i32 1
  %cx_blk248 = bitcast %union.anon.0* %cx_u247 to %struct.block*
  %blk_u249 = getelementptr inbounds %struct.block, %struct.block* %cx_blk248, i32 0, i32 7
  %blku_loop250 = bitcast %union.anon.1* %blk_u249 to %struct.block_loop*
  %iterlval251 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop250, i32 0, i32 7
  store %struct.sv* %call246, %struct.sv** %iterlval251, align 8
  store %struct.sv* %call246, %struct.sv** %lv, align 8
  %189 = load %struct.sv*, %struct.sv** %lv, align 8
  %call252 = call signext i8 @Perl_sv_upgrade(%struct.sv* %189, i32 9)
  %190 = load %struct.sv*, %struct.sv** %lv, align 8
  %sv_any253 = getelementptr inbounds %struct.sv, %struct.sv* %190, i32 0, i32 0
  %191 = load i8*, i8** %sv_any253, align 8
  %192 = bitcast i8* %191 to %struct.xpvlv*
  %xlv_type = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %192, i32 0, i32 10
  store i8 121, i8* %xlv_type, align 1
  %193 = load %struct.sv*, %struct.sv** %lv, align 8
  call void @Perl_sv_magic(%struct.sv* %193, %struct.sv* null, i32 121, i8* null, i32 0)
  br label %if.end.254

if.end.254:                                       ; preds = %if.else.245, %if.then.243
  %194 = load %struct.av*, %struct.av** %av, align 8
  %195 = bitcast %struct.av* %194 to %struct.sv*
  store %struct.sv* %195, %struct.sv** @PL_Sv, align 8
  %196 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool255 = icmp ne %struct.sv* %196, null
  br i1 %tobool255, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end.254
  %197 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt256 = getelementptr inbounds %struct.sv, %struct.sv* %197, i32 0, i32 1
  %198 = load i32, i32* %sv_refcnt256, align 4
  %inc257 = add i32 %198, 1
  store i32 %inc257, i32* %sv_refcnt256, align 4
  %tobool258 = icmp ne i32 %inc257, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end.254
  %199 = phi i1 [ false, %if.end.254 ], [ %tobool258, %land.rhs ]
  %land.ext = zext i1 %199 to i32
  %200 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %201 = load %struct.sv*, %struct.sv** %lv, align 8
  %sv_any259 = getelementptr inbounds %struct.sv, %struct.sv* %201, i32 0, i32 0
  %202 = load i8*, i8** %sv_any259, align 8
  %203 = bitcast i8* %202 to %struct.xpvlv*
  %xlv_targ260 = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %203, i32 0, i32 9
  store %struct.sv* %200, %struct.sv** %xlv_targ260, align 8
  %204 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u261 = getelementptr inbounds %struct.context, %struct.context* %204, i32 0, i32 1
  %cx_blk262 = bitcast %union.anon.0* %cx_u261 to %struct.block*
  %blk_u263 = getelementptr inbounds %struct.block, %struct.block* %cx_blk262, i32 0, i32 7
  %blku_loop264 = bitcast %union.anon.1* %blk_u263 to %struct.block_loop*
  %iterix265 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop264, i32 0, i32 9
  %205 = load i64, i64* %iterix265, align 8
  %206 = load %struct.sv*, %struct.sv** %lv, align 8
  %sv_any266 = getelementptr inbounds %struct.sv, %struct.sv* %206, i32 0, i32 0
  %207 = load i8*, i8** %sv_any266, align 8
  %208 = bitcast i8* %207 to %struct.xpvlv*
  %xlv_targoff = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %208, i32 0, i32 7
  store i64 %205, i64* %xlv_targoff, align 8
  %209 = load %struct.sv*, %struct.sv** %lv, align 8
  %sv_any267 = getelementptr inbounds %struct.sv, %struct.sv* %209, i32 0, i32 0
  %210 = load i8*, i8** %sv_any267, align 8
  %211 = bitcast i8* %210 to %struct.xpvlv*
  %xlv_targlen = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %211, i32 0, i32 8
  store i64 -1, i64* %xlv_targlen, align 8
  %212 = load %struct.sv*, %struct.sv** %lv, align 8
  store %struct.sv* %212, %struct.sv** %sv, align 8
  br label %if.end.268

if.end.268:                                       ; preds = %land.end, %land.lhs.true.226, %if.end.223
  %213 = load %struct.sv**, %struct.sv*** %itersvp, align 8
  %214 = load %struct.sv*, %struct.sv** %213, align 8
  store %struct.sv* %214, %struct.sv** %oldsv, align 8
  %215 = load %struct.sv*, %struct.sv** %sv, align 8
  store %struct.sv* %215, %struct.sv** @PL_Sv, align 8
  %216 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool269 = icmp ne %struct.sv* %216, null
  br i1 %tobool269, label %land.rhs.270, label %land.end.274

land.rhs.270:                                     ; preds = %if.end.268
  %217 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt271 = getelementptr inbounds %struct.sv, %struct.sv* %217, i32 0, i32 1
  %218 = load i32, i32* %sv_refcnt271, align 4
  %inc272 = add i32 %218, 1
  store i32 %inc272, i32* %sv_refcnt271, align 4
  %tobool273 = icmp ne i32 %inc272, 0
  br label %land.end.274

land.end.274:                                     ; preds = %land.rhs.270, %if.end.268
  %219 = phi i1 [ false, %if.end.268 ], [ %tobool273, %land.rhs.270 ]
  %land.ext275 = zext i1 %219 to i32
  %220 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %221 = load %struct.sv**, %struct.sv*** %itersvp, align 8
  store %struct.sv* %220, %struct.sv** %221, align 8
  %222 = load %struct.sv*, %struct.sv** %oldsv, align 8
  call void @Perl_sv_free(%struct.sv* %222)
  %223 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr276 = getelementptr inbounds %struct.sv*, %struct.sv** %223, i32 1
  store %struct.sv** %incdec.ptr276, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr276, align 8
  %224 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %224, %struct.sv*** @PL_stack_sp, align 8
  %225 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next277 = getelementptr inbounds %struct.op, %struct.op* %225, i32 0, i32 0
  %226 = load %struct.op*, %struct.op** %op_next277, align 8
  store %struct.op* %226, %struct.op** %retval
  br label %return

return:                                           ; preds = %land.end.274, %if.then.172, %if.then.112, %if.end.93, %if.then.69, %if.end.56, %if.end.55, %if.then.2
  %227 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %227
}

declare i32 @strcmp(i8*, i8*) #1

declare %struct.sv* @Perl_newSViv(i64) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_subst() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %pm = alloca %struct.pmop*, align 8
  %rpm = alloca %struct.pmop*, align 8
  %dstr = alloca %struct.sv*, align 8
  %s = alloca i8*, align 8
  %strend = alloca i8*, align 8
  %m = alloca i8*, align 8
  %c = alloca i8*, align 8
  %d = alloca i8*, align 8
  %clen = alloca i64, align 8
  %iters = alloca i32, align 4
  %maxiters = alloca i32, align 4
  %i = alloca i32, align 4
  %once = alloca i8, align 1
  %rxtainted = alloca i8, align 1
  %orig = alloca i8*, align 8
  %r_flags = alloca i32, align 4
  %rx = alloca %struct.regexp*, align 8
  %len = alloca i64, align 8
  %force_on_match = alloca i32, align 4
  %oldsave = alloca i32, align 4
  %slen = alloca i64, align 8
  %doutf8 = alloca i8, align 1
  %nsv = alloca %struct.sv*, align 8
  %tmp = alloca i64, align 8
  %tmp384 = alloca i64, align 8
  %cx = alloca %struct.context*, align 8
  %tmp660 = alloca i64, align 8
  %tmp665 = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %2 = bitcast %struct.op* %1 to %struct.pmop*
  store %struct.pmop* %2, %struct.pmop** %pm, align 8
  %3 = load %struct.pmop*, %struct.pmop** %pm, align 8
  store %struct.pmop* %3, %struct.pmop** %rpm, align 8
  store i32 0, i32* %iters, align 4
  %4 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp = getelementptr inbounds %struct.pmop, %struct.pmop* %4, i32 0, i32 13
  %5 = load %struct.regexp*, %struct.regexp** %op_pmregexp, align 8
  store %struct.regexp* %5, %struct.regexp** %rx, align 8
  store i32 0, i32* %force_on_match, align 4
  %6 = load i32, i32* @PL_savestack_ix, align 4
  store i32 %6, i32* %oldsave, align 4
  store i8 0, i8* %doutf8, align 1
  store %struct.sv* null, %struct.sv** %nsv, align 8
  %7 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmflags = getelementptr inbounds %struct.pmop, %struct.pmop* %7, i32 0, i32 14
  %8 = load i32, i32* %op_pmflags, align 4
  %and = and i32 %8, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %10, %cond.true ], [ null, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %dstr, align 8
  %11 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 6
  %12 = load i8, i8* %op_flags, align 1
  %conv = zext i8 %12 to i32
  %and1 = and i32 %conv, 64
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr3 = getelementptr inbounds %struct.sv*, %struct.sv** %13, i32 -1
  store %struct.sv** %incdec.ptr3, %struct.sv*** %sp, align 8
  %14 = load %struct.sv*, %struct.sv** %13, align 8
  store %struct.sv* %14, %struct.sv** %targ, align 8
  br label %if.end.6

if.else:                                          ; preds = %cond.end
  %15 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %15, i32 0, i32 0
  %16 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %16, i32 0, i32 7
  %17 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %17, i32 0, i32 0
  %18 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  store %struct.sv* %18, %struct.sv** %targ, align 8
  %19 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %19 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %20 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.else
  %21 = load %struct.sv**, %struct.sv*** %sp, align 8
  %22 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %21, %struct.sv** %22, i32 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.5, %if.else
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %if.then
  %23 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags, align 4
  %and7 = and i32 %24, 1048576
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %land.lhs.true, label %if.end.13

land.lhs.true:                                    ; preds = %if.end.6
  %25 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %26, 8388608
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %land.lhs.true
  %27 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_force_normal(%struct.sv* %27)
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.12, %land.lhs.true, %if.end.6
  %28 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %29, 8388608
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %if.then.30, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.13
  %30 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags17 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %31, 255
  %cmp19 = icmp ugt i32 %and18, 9
  br i1 %cmp19, label %land.lhs.true.21, label %if.end.32

land.lhs.true.21:                                 ; preds = %lor.lhs.false
  %32 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %33, 255
  %cmp24 = icmp eq i32 %and23, 13
  br i1 %cmp24, label %land.lhs.true.26, label %if.then.30

land.lhs.true.26:                                 ; preds = %land.lhs.true.21
  %34 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags27 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags27, align 4
  %and28 = and i32 %35, 1048576
  %tobool29 = icmp ne i32 %and28, 0
  br i1 %tobool29, label %if.end.32, label %if.then.30

if.then.30:                                       ; preds = %land.lhs.true.26, %land.lhs.true.21, %if.end.13
  %call31 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_modify, i32 0, i32 0))
  store %struct.op* %call31, %struct.op** %retval
  br label %return

if.end.32:                                        ; preds = %land.lhs.true.26, %lor.lhs.false
  %36 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %36, %struct.sv*** @PL_stack_sp, align 8
  %37 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags33 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags33, align 4
  %and34 = and i32 %38, 262144
  %cmp35 = icmp eq i32 %and34, 262144
  br i1 %cmp35, label %cond.true.37, label %cond.false.40

cond.true.37:                                     ; preds = %if.end.32
  %39 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any38 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 0
  %40 = load i8*, i8** %sv_any38, align 8
  %41 = bitcast i8* %40 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %41, i32 0, i32 1
  %42 = load i64, i64* %xpv_cur, align 8
  store i64 %42, i64* %len, align 8
  %43 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any39 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 0
  %44 = load i8*, i8** %sv_any39, align 8
  %45 = bitcast i8* %44 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %45, i32 0, i32 0
  %46 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end.42

cond.false.40:                                    ; preds = %if.end.32
  %47 = load %struct.sv*, %struct.sv** %targ, align 8
  %call41 = call i8* @Perl_sv_2pv_flags(%struct.sv* %47, i64* %len, i32 2)
  br label %cond.end.42

cond.end.42:                                      ; preds = %cond.false.40, %cond.true.37
  %cond43 = phi i8* [ %46, %cond.true.37 ], [ %call41, %cond.false.40 ]
  store i8* %cond43, i8** %s, align 8
  %48 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags44 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 2
  %49 = load i32, i32* %sv_flags44, align 4
  %and45 = and i32 %49, 67108864
  %tobool46 = icmp ne i32 %and45, 0
  br i1 %tobool46, label %lor.lhs.false.47, label %if.then.52

lor.lhs.false.47:                                 ; preds = %cond.end.42
  %50 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags48 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 2
  %51 = load i32, i32* %sv_flags48, align 4
  %and49 = and i32 %51, 255
  %cmp50 = icmp eq i32 %and49, 13
  br i1 %cmp50, label %if.then.52, label %if.end.53

if.then.52:                                       ; preds = %lor.lhs.false.47, %cond.end.42
  store i32 1, i32* %force_on_match, align 4
  br label %if.end.53

if.end.53:                                        ; preds = %if.then.52, %lor.lhs.false.47
  %52 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmdynflags = getelementptr inbounds %struct.pmop, %struct.pmop* %52, i32 0, i32 16
  %53 = load i8, i8* %op_pmdynflags, align 1
  %conv54 = zext i8 %53 to i32
  %and55 = and i32 %conv54, 2
  %tobool56 = icmp ne i32 %and55, 0
  br i1 %tobool56, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end.53
  %54 = load i8, i8* @PL_tainted, align 1
  %conv57 = sext i8 %54 to i32
  %tobool58 = icmp ne i32 %conv57, 0
  br i1 %tobool58, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %55 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmflags59 = getelementptr inbounds %struct.pmop, %struct.pmop* %55, i32 0, i32 14
  %56 = load i32, i32* %op_pmflags59, align 4
  %and60 = and i32 %56, 1
  %tobool61 = icmp ne i32 %and60, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %57 = phi i1 [ false, %lor.rhs ], [ %tobool61, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %if.end.53
  %58 = phi i1 [ true, %if.end.53 ], [ %57, %land.end ]
  %lor.ext = zext i1 %58 to i32
  %conv62 = trunc i32 %lor.ext to i8
  store i8 %conv62, i8* %rxtainted, align 1
  %59 = load i8, i8* @PL_tainted, align 1
  %tobool63 = icmp ne i8 %59, 0
  br i1 %tobool63, label %if.then.64, label %if.end.67

if.then.64:                                       ; preds = %lor.end
  %60 = load i8, i8* %rxtainted, align 1
  %conv65 = sext i8 %60 to i32
  %or = or i32 %conv65, 2
  %conv66 = trunc i32 %or to i8
  store i8 %conv66, i8* %rxtainted, align 1
  br label %if.end.67

if.end.67:                                        ; preds = %if.then.64, %lor.end
  store i8 0, i8* @PL_tainted, align 1
  %61 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags68 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 2
  %62 = load i32, i32* %sv_flags68, align 4
  %and69 = and i32 %62, 536870912
  %tobool70 = icmp ne i32 %and69, 0
  br i1 %tobool70, label %land.lhs.true.71, label %cond.false.77

land.lhs.true.71:                                 ; preds = %if.end.67
  %63 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private = getelementptr inbounds %struct.cop, %struct.cop* %63, i32 0, i32 7
  %64 = load i8, i8* %op_private, align 1
  %conv72 = zext i8 %64 to i32
  %and73 = and i32 %conv72, 8
  %tobool74 = icmp ne i32 %and73, 0
  br i1 %tobool74, label %cond.false.77, label %cond.true.75

cond.true.75:                                     ; preds = %land.lhs.true.71
  %65 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch = getelementptr inbounds %struct.regexp, %struct.regexp* %65, i32 0, i32 15
  %66 = load i32, i32* %reganch, align 4
  %or76 = or i32 %66, 268435456
  store i32 %or76, i32* %reganch, align 4
  store i8 1, i8* @PL_reg_match_utf8, align 1
  br label %cond.end.80

cond.false.77:                                    ; preds = %land.lhs.true.71, %if.end.67
  %67 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch78 = getelementptr inbounds %struct.regexp, %struct.regexp* %67, i32 0, i32 15
  %68 = load i32, i32* %reganch78, align 4
  %and79 = and i32 %68, -268435457
  store i32 %and79, i32* %reganch78, align 4
  store i8 0, i8* @PL_reg_match_utf8, align 1
  br label %cond.end.80

cond.end.80:                                      ; preds = %cond.false.77, %cond.true.75
  %cond81 = phi i32 [ 1, %cond.true.75 ], [ 0, %cond.false.77 ]
  br label %force_it

force_it:                                         ; preds = %cond.end.458, %cond.end.251, %cond.end.80
  %69 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %tobool82 = icmp ne %struct.pmop* %69, null
  br i1 %tobool82, label %lor.lhs.false.83, label %if.then.85

lor.lhs.false.83:                                 ; preds = %force_it
  %70 = load i8*, i8** %s, align 8
  %tobool84 = icmp ne i8* %70, null
  br i1 %tobool84, label %if.end.87, label %if.then.85

if.then.85:                                       ; preds = %lor.lhs.false.83, %force_it
  %call86 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.26, i32 0, i32 0))
  store %struct.op* %call86, %struct.op** %retval
  br label %return

if.end.87:                                        ; preds = %lor.lhs.false.83
  %71 = load i8*, i8** %s, align 8
  %72 = load i64, i64* %len, align 8
  %add.ptr = getelementptr inbounds i8, i8* %71, i64 %72
  store i8* %add.ptr, i8** %strend, align 8
  %73 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch88 = getelementptr inbounds %struct.regexp, %struct.regexp* %73, i32 0, i32 15
  %74 = load i32, i32* %reganch88, align 4
  %and89 = and i32 %74, 268435456
  %tobool90 = icmp ne i32 %and89, 0
  br i1 %tobool90, label %cond.true.91, label %cond.false.93

cond.true.91:                                     ; preds = %if.end.87
  %75 = load i8*, i8** %s, align 8
  %76 = load i8*, i8** %strend, align 8
  %call92 = call i64 @Perl_utf8_length(i8* %75, i8* %76)
  br label %cond.end.94

cond.false.93:                                    ; preds = %if.end.87
  %77 = load i64, i64* %len, align 8
  br label %cond.end.94

cond.end.94:                                      ; preds = %cond.false.93, %cond.true.91
  %cond95 = phi i64 [ %call92, %cond.true.91 ], [ %77, %cond.false.93 ]
  store i64 %cond95, i64* %slen, align 8
  %78 = load i64, i64* %slen, align 8
  %mul = mul i64 2, %78
  %add = add i64 %mul, 10
  %conv96 = trunc i64 %add to i32
  store i32 %conv96, i32* %maxiters, align 4
  %79 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %prelen = getelementptr inbounds %struct.regexp, %struct.regexp* %79, i32 0, i32 11
  %80 = load i32, i32* %prelen, align 4
  %tobool97 = icmp ne i32 %80, 0
  br i1 %tobool97, label %if.end.102, label %land.lhs.true.98

land.lhs.true.98:                                 ; preds = %cond.end.94
  %81 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  %tobool99 = icmp ne %struct.pmop* %81, null
  br i1 %tobool99, label %if.then.100, label %if.end.102

if.then.100:                                      ; preds = %land.lhs.true.98
  %82 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  store %struct.pmop* %82, %struct.pmop** %pm, align 8
  %83 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp101 = getelementptr inbounds %struct.pmop, %struct.pmop* %83, i32 0, i32 13
  %84 = load %struct.regexp*, %struct.regexp** %op_pmregexp101, align 8
  store %struct.regexp* %84, %struct.regexp** %rx, align 8
  br label %if.end.102

if.end.102:                                       ; preds = %if.then.100, %land.lhs.true.98, %cond.end.94
  %85 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %nparens = getelementptr inbounds %struct.regexp, %struct.regexp* %85, i32 0, i32 12
  %86 = load i32, i32* %nparens, align 4
  %tobool103 = icmp ne i32 %86, 0
  br i1 %tobool103, label %lor.end.111, label %lor.lhs.false.104

lor.lhs.false.104:                                ; preds = %if.end.102
  %87 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags105 = getelementptr inbounds %struct.sv, %struct.sv* %87, i32 0, i32 2
  %88 = load i32, i32* %sv_flags105, align 4
  %and106 = and i32 %88, 2048
  %tobool107 = icmp ne i32 %and106, 0
  br i1 %tobool107, label %lor.end.111, label %lor.rhs.108

lor.rhs.108:                                      ; preds = %lor.lhs.false.104
  %89 = load i8, i8* @PL_sawampersand, align 1
  %conv109 = sext i8 %89 to i32
  %tobool110 = icmp ne i32 %conv109, 0
  br label %lor.end.111

lor.end.111:                                      ; preds = %lor.rhs.108, %lor.lhs.false.104, %if.end.102
  %90 = phi i1 [ true, %lor.lhs.false.104 ], [ true, %if.end.102 ], [ %tobool110, %lor.rhs.108 ]
  %cond113 = select i1 %90, i32 1, i32 0
  store i32 %cond113, i32* %r_flags, align 4
  %91 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags114 = getelementptr inbounds %struct.sv, %struct.sv* %91, i32 0, i32 2
  %92 = load i32, i32* %sv_flags114, align 4
  %and115 = and i32 %92, 134217728
  %tobool116 = icmp ne i32 %and115, 0
  br i1 %tobool116, label %if.then.117, label %if.end.119

if.then.117:                                      ; preds = %lor.end.111
  %93 = load i32, i32* %r_flags, align 4
  %or118 = or i32 %93, 4
  store i32 %or118, i32* %r_flags, align 4
  br label %if.end.119

if.end.119:                                       ; preds = %if.then.117, %lor.end.111
  %94 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmflags120 = getelementptr inbounds %struct.pmop, %struct.pmop* %94, i32 0, i32 14
  %95 = load i32, i32* %op_pmflags120, align 4
  %and121 = and i32 %95, 12288
  %tobool122 = icmp ne i32 %and121, 0
  br i1 %tobool122, label %if.then.123, label %if.end.126

if.then.123:                                      ; preds = %if.end.119
  call void @Perl_save_int(i32* @PL_multiline)
  %96 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmflags124 = getelementptr inbounds %struct.pmop, %struct.pmop* %96, i32 0, i32 14
  %97 = load i32, i32* %op_pmflags124, align 4
  %and125 = and i32 %97, 4096
  store i32 %and125, i32* @PL_multiline, align 4
  br label %if.end.126

if.end.126:                                       ; preds = %if.then.123, %if.end.119
  %98 = load i8*, i8** %s, align 8
  store i8* %98, i8** %m, align 8
  store i8* %98, i8** %orig, align 8
  %99 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch127 = getelementptr inbounds %struct.regexp, %struct.regexp* %99, i32 0, i32 15
  %100 = load i32, i32* %reganch127, align 4
  %and128 = and i32 %100, 3145728
  %tobool129 = icmp ne i32 %and128, 0
  br i1 %tobool129, label %if.then.130, label %if.end.135

if.then.130:                                      ; preds = %if.end.126
  %101 = load i8*, i8** %orig, align 8
  store i8* %101, i8** @PL_bostr, align 8
  %102 = load i8* (%struct.regexp*, %struct.sv*, i8*, i8*, i32, %struct.re_scream_pos_data_s*)*, i8* (%struct.regexp*, %struct.sv*, i8*, i8*, i32, %struct.re_scream_pos_data_s*)** @PL_regint_start, align 8
  %103 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %104 = load %struct.sv*, %struct.sv** %targ, align 8
  %105 = load i8*, i8** %s, align 8
  %106 = load i8*, i8** %strend, align 8
  %107 = load i32, i32* %r_flags, align 4
  %call131 = call i8* %102(%struct.regexp* %103, %struct.sv* %104, i8* %105, i8* %106, i32 %107, %struct.re_scream_pos_data_s* null)
  store i8* %call131, i8** %s, align 8
  %108 = load i8*, i8** %s, align 8
  %tobool132 = icmp ne i8* %108, null
  br i1 %tobool132, label %if.end.134, label %if.then.133

if.then.133:                                      ; preds = %if.then.130
  br label %nope

if.end.134:                                       ; preds = %if.then.130
  br label %if.end.135

if.end.135:                                       ; preds = %if.end.134, %if.end.126
  %109 = load %struct.pmop*, %struct.pmop** %rpm, align 8
  %op_pmflags136 = getelementptr inbounds %struct.pmop, %struct.pmop* %109, i32 0, i32 14
  %110 = load i32, i32* %op_pmflags136, align 4
  %and137 = and i32 %110, 256
  %tobool138 = icmp ne i32 %and137, 0
  %lnot = xor i1 %tobool138, true
  %lnot.ext = zext i1 %lnot to i32
  %conv139 = trunc i32 %lnot.ext to i8
  store i8 %conv139, i8* %once, align 1
  %111 = load %struct.sv*, %struct.sv** %dstr, align 8
  %tobool140 = icmp ne %struct.sv* %111, null
  br i1 %tobool140, label %if.then.141, label %if.else.204

if.then.141:                                      ; preds = %if.end.135
  %112 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags142 = getelementptr inbounds %struct.sv, %struct.sv* %112, i32 0, i32 2
  %113 = load i32, i32* %sv_flags142, align 4
  %and143 = and i32 %113, 536870912
  %tobool144 = icmp ne i32 %and143, 0
  br i1 %tobool144, label %land.lhs.true.145, label %if.else.177

land.lhs.true.145:                                ; preds = %if.then.141
  %114 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private146 = getelementptr inbounds %struct.cop, %struct.cop* %114, i32 0, i32 7
  %115 = load i8, i8* %op_private146, align 1
  %conv147 = zext i8 %115 to i32
  %and148 = and i32 %conv147, 8
  %tobool149 = icmp ne i32 %and148, 0
  br i1 %tobool149, label %if.else.177, label %land.lhs.true.150

land.lhs.true.150:                                ; preds = %land.lhs.true.145
  %116 = load i8, i8* %doutf8, align 1
  %tobool151 = icmp ne i8 %116, 0
  br i1 %tobool151, label %if.else.177, label %if.then.152

if.then.152:                                      ; preds = %land.lhs.true.150
  %call153 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call153, %struct.sv** %nsv, align 8
  %117 = load %struct.sv*, %struct.sv** %nsv, align 8
  %118 = load %struct.sv*, %struct.sv** %dstr, align 8
  %cmp154 = icmp ne %struct.sv* %117, %118
  br i1 %cmp154, label %if.then.156, label %if.end.157

if.then.156:                                      ; preds = %if.then.152
  %119 = load %struct.sv*, %struct.sv** %nsv, align 8
  %120 = load %struct.sv*, %struct.sv** %dstr, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %119, %struct.sv* %120, i32 2)
  br label %if.end.157

if.end.157:                                       ; preds = %if.then.156, %if.then.152
  %121 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %tobool158 = icmp ne %struct.sv* %121, null
  br i1 %tobool158, label %if.then.159, label %if.else.161

if.then.159:                                      ; preds = %if.end.157
  %122 = load %struct.sv*, %struct.sv** %nsv, align 8
  %123 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %call160 = call i8* @Perl_sv_recode_to_utf8(%struct.sv* %122, %struct.sv* %123)
  br label %if.end.163

if.else.161:                                      ; preds = %if.end.157
  %124 = load %struct.sv*, %struct.sv** %nsv, align 8
  %call162 = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %124, i32 2)
  br label %if.end.163

if.end.163:                                       ; preds = %if.else.161, %if.then.159
  %125 = load %struct.sv*, %struct.sv** %nsv, align 8
  %sv_flags164 = getelementptr inbounds %struct.sv, %struct.sv* %125, i32 0, i32 2
  %126 = load i32, i32* %sv_flags164, align 4
  %and165 = and i32 %126, 262144
  %cmp166 = icmp eq i32 %and165, 262144
  br i1 %cmp166, label %cond.true.168, label %cond.false.173

cond.true.168:                                    ; preds = %if.end.163
  %127 = load %struct.sv*, %struct.sv** %nsv, align 8
  %sv_any169 = getelementptr inbounds %struct.sv, %struct.sv* %127, i32 0, i32 0
  %128 = load i8*, i8** %sv_any169, align 8
  %129 = bitcast i8* %128 to %struct.xpv*
  %xpv_cur170 = getelementptr inbounds %struct.xpv, %struct.xpv* %129, i32 0, i32 1
  %130 = load i64, i64* %xpv_cur170, align 8
  store i64 %130, i64* %clen, align 8
  %131 = load %struct.sv*, %struct.sv** %nsv, align 8
  %sv_any171 = getelementptr inbounds %struct.sv, %struct.sv* %131, i32 0, i32 0
  %132 = load i8*, i8** %sv_any171, align 8
  %133 = bitcast i8* %132 to %struct.xpv*
  %xpv_pv172 = getelementptr inbounds %struct.xpv, %struct.xpv* %133, i32 0, i32 0
  %134 = load i8*, i8** %xpv_pv172, align 8
  br label %cond.end.175

cond.false.173:                                   ; preds = %if.end.163
  %135 = load %struct.sv*, %struct.sv** %nsv, align 8
  %call174 = call i8* @Perl_sv_2pv_flags(%struct.sv* %135, i64* %clen, i32 2)
  br label %cond.end.175

cond.end.175:                                     ; preds = %cond.false.173, %cond.true.168
  %cond176 = phi i8* [ %134, %cond.true.168 ], [ %call174, %cond.false.173 ]
  store i8* %cond176, i8** %c, align 8
  store i8 1, i8* %doutf8, align 1
  br label %if.end.203

if.else.177:                                      ; preds = %land.lhs.true.150, %land.lhs.true.145, %if.then.141
  %136 = load %struct.sv*, %struct.sv** %dstr, align 8
  %sv_flags178 = getelementptr inbounds %struct.sv, %struct.sv* %136, i32 0, i32 2
  %137 = load i32, i32* %sv_flags178, align 4
  %and179 = and i32 %137, 262144
  %cmp180 = icmp eq i32 %and179, 262144
  br i1 %cmp180, label %cond.true.182, label %cond.false.187

cond.true.182:                                    ; preds = %if.else.177
  %138 = load %struct.sv*, %struct.sv** %dstr, align 8
  %sv_any183 = getelementptr inbounds %struct.sv, %struct.sv* %138, i32 0, i32 0
  %139 = load i8*, i8** %sv_any183, align 8
  %140 = bitcast i8* %139 to %struct.xpv*
  %xpv_cur184 = getelementptr inbounds %struct.xpv, %struct.xpv* %140, i32 0, i32 1
  %141 = load i64, i64* %xpv_cur184, align 8
  store i64 %141, i64* %clen, align 8
  %142 = load %struct.sv*, %struct.sv** %dstr, align 8
  %sv_any185 = getelementptr inbounds %struct.sv, %struct.sv* %142, i32 0, i32 0
  %143 = load i8*, i8** %sv_any185, align 8
  %144 = bitcast i8* %143 to %struct.xpv*
  %xpv_pv186 = getelementptr inbounds %struct.xpv, %struct.xpv* %144, i32 0, i32 0
  %145 = load i8*, i8** %xpv_pv186, align 8
  br label %cond.end.189

cond.false.187:                                   ; preds = %if.else.177
  %146 = load %struct.sv*, %struct.sv** %dstr, align 8
  %call188 = call i8* @Perl_sv_2pv_flags(%struct.sv* %146, i64* %clen, i32 2)
  br label %cond.end.189

cond.end.189:                                     ; preds = %cond.false.187, %cond.true.182
  %cond190 = phi i8* [ %145, %cond.true.182 ], [ %call188, %cond.false.187 ]
  store i8* %cond190, i8** %c, align 8
  %147 = load %struct.sv*, %struct.sv** %dstr, align 8
  %sv_flags191 = getelementptr inbounds %struct.sv, %struct.sv* %147, i32 0, i32 2
  %148 = load i32, i32* %sv_flags191, align 4
  %and192 = and i32 %148, 536870912
  %tobool193 = icmp ne i32 %and192, 0
  br i1 %tobool193, label %land.rhs.194, label %land.end.201

land.rhs.194:                                     ; preds = %cond.end.189
  %149 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private195 = getelementptr inbounds %struct.cop, %struct.cop* %149, i32 0, i32 7
  %150 = load i8, i8* %op_private195, align 1
  %conv196 = zext i8 %150 to i32
  %and197 = and i32 %conv196, 8
  %tobool198 = icmp ne i32 %and197, 0
  %lnot199 = xor i1 %tobool198, true
  br label %land.end.201

land.end.201:                                     ; preds = %land.rhs.194, %cond.end.189
  %151 = phi i1 [ false, %cond.end.189 ], [ %lnot199, %land.rhs.194 ]
  %land.ext = zext i1 %151 to i32
  %conv202 = trunc i32 %land.ext to i8
  store i8 %conv202, i8* %doutf8, align 1
  br label %if.end.203

if.end.203:                                       ; preds = %land.end.201, %cond.end.175
  br label %if.end.205

if.else.204:                                      ; preds = %if.end.135
  store i8* null, i8** %c, align 8
  store i8 0, i8* %doutf8, align 1
  br label %if.end.205

if.end.205:                                       ; preds = %if.else.204, %if.end.203
  %152 = load i8*, i8** %c, align 8
  %tobool206 = icmp ne i8* %152, null
  br i1 %tobool206, label %land.lhs.true.207, label %if.end.440

land.lhs.true.207:                                ; preds = %if.end.205
  %153 = load i64, i64* %clen, align 8
  %conv208 = trunc i64 %153 to i32
  %154 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %minlen = getelementptr inbounds %struct.regexp, %struct.regexp* %154, i32 0, i32 10
  %155 = load i32, i32* %minlen, align 4
  %cmp209 = icmp sle i32 %conv208, %155
  br i1 %cmp209, label %land.lhs.true.211, label %if.end.440

land.lhs.true.211:                                ; preds = %land.lhs.true.207
  %156 = load i8, i8* %once, align 1
  %conv212 = sext i8 %156 to i32
  %tobool213 = icmp ne i32 %conv212, 0
  br i1 %tobool213, label %land.lhs.true.217, label %lor.lhs.false.214

lor.lhs.false.214:                                ; preds = %land.lhs.true.211
  %157 = load i32, i32* %r_flags, align 4
  %and215 = and i32 %157, 1
  %tobool216 = icmp ne i32 %and215, 0
  br i1 %tobool216, label %if.end.440, label %land.lhs.true.217

land.lhs.true.217:                                ; preds = %lor.lhs.false.214, %land.lhs.true.211
  %158 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch218 = getelementptr inbounds %struct.regexp, %struct.regexp* %158, i32 0, i32 15
  %159 = load i32, i32* %reganch218, align 4
  %and219 = and i32 %159, 512
  %tobool220 = icmp ne i32 %and219, 0
  br i1 %tobool220, label %if.end.440, label %land.lhs.true.221

land.lhs.true.221:                                ; preds = %land.lhs.true.217
  %160 = load i8, i8* %doutf8, align 1
  %tobool222 = icmp ne i8 %160, 0
  br i1 %tobool222, label %lor.lhs.false.223, label %if.then.227

lor.lhs.false.223:                                ; preds = %land.lhs.true.221
  %161 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags224 = getelementptr inbounds %struct.sv, %struct.sv* %161, i32 0, i32 2
  %162 = load i32, i32* %sv_flags224, align 4
  %and225 = and i32 %162, 536870912
  %tobool226 = icmp ne i32 %and225, 0
  br i1 %tobool226, label %if.then.227, label %if.end.440

if.then.227:                                      ; preds = %lor.lhs.false.223, %land.lhs.true.221
  %163 = load i32 (%struct.regexp*, i8*, i8*, i8*, i32, %struct.sv*, i8*, i32)*, i32 (%struct.regexp*, i8*, i8*, i8*, i32, %struct.sv*, i8*, i32)** @PL_regexecp, align 8
  %164 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %165 = load i8*, i8** %s, align 8
  %166 = load i8*, i8** %strend, align 8
  %167 = load i8*, i8** %orig, align 8
  %168 = load %struct.sv*, %struct.sv** %targ, align 8
  %169 = load i32, i32* %r_flags, align 4
  %or228 = or i32 %169, 2
  %call229 = call i32 %163(%struct.regexp* %164, i8* %165, i8* %166, i8* %167, i32 0, %struct.sv* %168, i8* null, i32 %or228)
  %tobool230 = icmp ne i32 %call229, 0
  br i1 %tobool230, label %if.end.237, label %if.then.231

if.then.231:                                      ; preds = %if.then.227
  %170 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %170, %struct.sv*** %sp, align 8
  %171 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr232 = getelementptr inbounds %struct.sv*, %struct.sv** %171, i32 1
  store %struct.sv** %incdec.ptr232, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_no, %struct.sv** %incdec.ptr232, align 8
  %172 = load i32, i32* @PL_savestack_ix, align 4
  %173 = load i32, i32* %oldsave, align 4
  %cmp233 = icmp sgt i32 %172, %173
  br i1 %cmp233, label %if.then.235, label %if.end.236

if.then.235:                                      ; preds = %if.then.231
  %174 = load i32, i32* %oldsave, align 4
  call void @Perl_leave_scope(i32 %174)
  br label %if.end.236

if.end.236:                                       ; preds = %if.then.235, %if.then.231
  %175 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %175, %struct.sv*** @PL_stack_sp, align 8
  %176 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %176, i32 0, i32 0
  %177 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %177, %struct.op** %retval
  br label %return

if.end.237:                                       ; preds = %if.then.227
  %178 = load i32, i32* %force_on_match, align 4
  %tobool238 = icmp ne i32 %178, 0
  br i1 %tobool238, label %if.then.239, label %if.end.253

if.then.239:                                      ; preds = %if.end.237
  store i32 0, i32* %force_on_match, align 4
  %179 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags240 = getelementptr inbounds %struct.sv, %struct.sv* %179, i32 0, i32 2
  %180 = load i32, i32* %sv_flags240, align 4
  %and241 = and i32 %180, 10223616
  %cmp242 = icmp eq i32 %and241, 262144
  br i1 %cmp242, label %cond.true.244, label %cond.false.249

cond.true.244:                                    ; preds = %if.then.239
  %181 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any245 = getelementptr inbounds %struct.sv, %struct.sv* %181, i32 0, i32 0
  %182 = load i8*, i8** %sv_any245, align 8
  %183 = bitcast i8* %182 to %struct.xpv*
  %xpv_cur246 = getelementptr inbounds %struct.xpv, %struct.xpv* %183, i32 0, i32 1
  %184 = load i64, i64* %xpv_cur246, align 8
  store i64 %184, i64* %len, align 8
  %185 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any247 = getelementptr inbounds %struct.sv, %struct.sv* %185, i32 0, i32 0
  %186 = load i8*, i8** %sv_any247, align 8
  %187 = bitcast i8* %186 to %struct.xpv*
  %xpv_pv248 = getelementptr inbounds %struct.xpv, %struct.xpv* %187, i32 0, i32 0
  %188 = load i8*, i8** %xpv_pv248, align 8
  br label %cond.end.251

cond.false.249:                                   ; preds = %if.then.239
  %189 = load %struct.sv*, %struct.sv** %targ, align 8
  %call250 = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %189, i64* %len, i32 2)
  br label %cond.end.251

cond.end.251:                                     ; preds = %cond.false.249, %cond.true.244
  %cond252 = phi i8* [ %188, %cond.true.244 ], [ %call250, %cond.false.249 ]
  store i8* %cond252, i8** %s, align 8
  br label %force_it

if.end.253:                                       ; preds = %if.end.237
  %190 = load i8*, i8** %s, align 8
  store i8* %190, i8** %d, align 8
  %191 = load %struct.pmop*, %struct.pmop** %pm, align 8
  store %struct.pmop* %191, %struct.pmop** @PL_curpm, align 8
  %192 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags254 = getelementptr inbounds %struct.sv, %struct.sv* %192, i32 0, i32 2
  %193 = load i32, i32* %sv_flags254, align 4
  %and255 = and i32 %193, -134217729
  store i32 %and255, i32* %sv_flags254, align 4
  %194 = load i8, i8* %once, align 1
  %tobool256 = icmp ne i8 %194, 0
  br i1 %tobool256, label %if.then.257, label %if.else.334

if.then.257:                                      ; preds = %if.end.253
  %195 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch258 = getelementptr inbounds %struct.regexp, %struct.regexp* %195, i32 0, i32 15
  %196 = load i32, i32* %reganch258, align 4
  %and259 = and i32 %196, 524288
  %197 = load i8, i8* %rxtainted, align 1
  %conv260 = sext i8 %197 to i32
  %or261 = or i32 %conv260, %and259
  %conv262 = trunc i32 %or261 to i8
  store i8 %conv262, i8* %rxtainted, align 1
  %198 = load i8*, i8** %orig, align 8
  %199 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %startp = getelementptr inbounds %struct.regexp, %struct.regexp* %199, i32 0, i32 0
  %200 = load i32*, i32** %startp, align 8
  %arrayidx = getelementptr inbounds i32, i32* %200, i64 0
  %201 = load i32, i32* %arrayidx, align 4
  %idx.ext = sext i32 %201 to i64
  %add.ptr263 = getelementptr inbounds i8, i8* %198, i64 %idx.ext
  store i8* %add.ptr263, i8** %m, align 8
  %202 = load i8*, i8** %orig, align 8
  %203 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %endp = getelementptr inbounds %struct.regexp, %struct.regexp* %203, i32 0, i32 1
  %204 = load i32*, i32** %endp, align 8
  %arrayidx264 = getelementptr inbounds i32, i32* %204, i64 0
  %205 = load i32, i32* %arrayidx264, align 4
  %idx.ext265 = sext i32 %205 to i64
  %add.ptr266 = getelementptr inbounds i8, i8* %202, i64 %idx.ext265
  store i8* %add.ptr266, i8** %d, align 8
  %206 = load i8*, i8** %orig, align 8
  store i8* %206, i8** %s, align 8
  %207 = load i8*, i8** %m, align 8
  %208 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast267 = ptrtoint i8* %207 to i64
  %sub.ptr.rhs.cast268 = ptrtoint i8* %208 to i64
  %sub.ptr.sub269 = sub i64 %sub.ptr.lhs.cast267, %sub.ptr.rhs.cast268
  %209 = load i8*, i8** %strend, align 8
  %210 = load i8*, i8** %d, align 8
  %sub.ptr.lhs.cast270 = ptrtoint i8* %209 to i64
  %sub.ptr.rhs.cast271 = ptrtoint i8* %210 to i64
  %sub.ptr.sub272 = sub i64 %sub.ptr.lhs.cast270, %sub.ptr.rhs.cast271
  %cmp273 = icmp sgt i64 %sub.ptr.sub269, %sub.ptr.sub272
  br i1 %cmp273, label %if.then.275, label %if.else.298

if.then.275:                                      ; preds = %if.then.257
  %211 = load i64, i64* %clen, align 8
  %tobool276 = icmp ne i64 %211, 0
  br i1 %tobool276, label %if.then.277, label %if.end.280

if.then.277:                                      ; preds = %if.then.275
  %212 = load i8*, i8** %m, align 8
  %213 = load i8*, i8** %c, align 8
  %214 = load i64, i64* %clen, align 8
  %mul278 = mul i64 %214, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %212, i8* %213, i64 %mul278, i32 1, i1 false)
  %215 = load i64, i64* %clen, align 8
  %216 = load i8*, i8** %m, align 8
  %add.ptr279 = getelementptr inbounds i8, i8* %216, i64 %215
  store i8* %add.ptr279, i8** %m, align 8
  br label %if.end.280

if.end.280:                                       ; preds = %if.then.277, %if.then.275
  %217 = load i8*, i8** %strend, align 8
  %218 = load i8*, i8** %d, align 8
  %sub.ptr.lhs.cast281 = ptrtoint i8* %217 to i64
  %sub.ptr.rhs.cast282 = ptrtoint i8* %218 to i64
  %sub.ptr.sub283 = sub i64 %sub.ptr.lhs.cast281, %sub.ptr.rhs.cast282
  %conv284 = trunc i64 %sub.ptr.sub283 to i32
  store i32 %conv284, i32* %i, align 4
  %219 = load i32, i32* %i, align 4
  %cmp285 = icmp sgt i32 %219, 0
  br i1 %cmp285, label %if.then.287, label %if.end.292

if.then.287:                                      ; preds = %if.end.280
  %220 = load i8*, i8** %m, align 8
  %221 = load i8*, i8** %d, align 8
  %222 = load i32, i32* %i, align 4
  %conv288 = sext i32 %222 to i64
  %mul289 = mul i64 %conv288, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %220, i8* %221, i64 %mul289, i32 1, i1 false)
  %223 = load i32, i32* %i, align 4
  %224 = load i8*, i8** %m, align 8
  %idx.ext290 = sext i32 %223 to i64
  %add.ptr291 = getelementptr inbounds i8, i8* %224, i64 %idx.ext290
  store i8* %add.ptr291, i8** %m, align 8
  br label %if.end.292

if.end.292:                                       ; preds = %if.then.287, %if.end.280
  %225 = load i8*, i8** %m, align 8
  store i8 0, i8* %225, align 1
  %226 = load i8*, i8** %m, align 8
  %227 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast293 = ptrtoint i8* %226 to i64
  %sub.ptr.rhs.cast294 = ptrtoint i8* %227 to i64
  %sub.ptr.sub295 = sub i64 %sub.ptr.lhs.cast293, %sub.ptr.rhs.cast294
  %228 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any296 = getelementptr inbounds %struct.sv, %struct.sv* %228, i32 0, i32 0
  %229 = load i8*, i8** %sv_any296, align 8
  %230 = bitcast i8* %229 to %struct.xpv*
  %xpv_cur297 = getelementptr inbounds %struct.xpv, %struct.xpv* %230, i32 0, i32 1
  store i64 %sub.ptr.sub295, i64* %xpv_cur297, align 8
  store i64 %sub.ptr.sub295, i64* %tmp
  %231 = load i64, i64* %tmp
  br label %if.end.327

if.else.298:                                      ; preds = %if.then.257
  %232 = load i8*, i8** %m, align 8
  %233 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast299 = ptrtoint i8* %232 to i64
  %sub.ptr.rhs.cast300 = ptrtoint i8* %233 to i64
  %sub.ptr.sub301 = sub i64 %sub.ptr.lhs.cast299, %sub.ptr.rhs.cast300
  %conv302 = trunc i64 %sub.ptr.sub301 to i32
  store i32 %conv302, i32* %i, align 4
  %tobool303 = icmp ne i32 %conv302, 0
  br i1 %tobool303, label %if.then.304, label %if.else.318

if.then.304:                                      ; preds = %if.else.298
  %234 = load i64, i64* %clen, align 8
  %235 = load i8*, i8** %d, align 8
  %idx.neg = sub i64 0, %234
  %add.ptr305 = getelementptr inbounds i8, i8* %235, i64 %idx.neg
  store i8* %add.ptr305, i8** %d, align 8
  %236 = load i8*, i8** %d, align 8
  store i8* %236, i8** %m, align 8
  %237 = load %struct.sv*, %struct.sv** %targ, align 8
  %238 = load i8*, i8** %d, align 8
  %239 = load i32, i32* %i, align 4
  %idx.ext306 = sext i32 %239 to i64
  %idx.neg307 = sub i64 0, %idx.ext306
  %add.ptr308 = getelementptr inbounds i8, i8* %238, i64 %idx.neg307
  call void @Perl_sv_chop(%struct.sv* %237, i8* %add.ptr308)
  %240 = load i32, i32* %i, align 4
  %241 = load i8*, i8** %s, align 8
  %idx.ext309 = sext i32 %240 to i64
  %add.ptr310 = getelementptr inbounds i8, i8* %241, i64 %idx.ext309
  store i8* %add.ptr310, i8** %s, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.304
  %242 = load i32, i32* %i, align 4
  %dec = add nsw i32 %242, -1
  store i32 %dec, i32* %i, align 4
  %tobool311 = icmp ne i32 %242, 0
  br i1 %tobool311, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %243 = load i8*, i8** %s, align 8
  %incdec.ptr312 = getelementptr inbounds i8, i8* %243, i32 -1
  store i8* %incdec.ptr312, i8** %s, align 8
  %244 = load i8, i8* %incdec.ptr312, align 1
  %245 = load i8*, i8** %d, align 8
  %incdec.ptr313 = getelementptr inbounds i8, i8* %245, i32 -1
  store i8* %incdec.ptr313, i8** %d, align 8
  store i8 %244, i8* %incdec.ptr313, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %246 = load i64, i64* %clen, align 8
  %tobool314 = icmp ne i64 %246, 0
  br i1 %tobool314, label %if.then.315, label %if.end.317

if.then.315:                                      ; preds = %while.end
  %247 = load i8*, i8** %m, align 8
  %248 = load i8*, i8** %c, align 8
  %249 = load i64, i64* %clen, align 8
  %mul316 = mul i64 %249, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %247, i8* %248, i64 %mul316, i32 1, i1 false)
  br label %if.end.317

if.end.317:                                       ; preds = %if.then.315, %while.end
  br label %if.end.326

if.else.318:                                      ; preds = %if.else.298
  %250 = load i64, i64* %clen, align 8
  %tobool319 = icmp ne i64 %250, 0
  br i1 %tobool319, label %if.then.320, label %if.else.324

if.then.320:                                      ; preds = %if.else.318
  %251 = load i64, i64* %clen, align 8
  %252 = load i8*, i8** %d, align 8
  %idx.neg321 = sub i64 0, %251
  %add.ptr322 = getelementptr inbounds i8, i8* %252, i64 %idx.neg321
  store i8* %add.ptr322, i8** %d, align 8
  %253 = load %struct.sv*, %struct.sv** %targ, align 8
  %254 = load i8*, i8** %d, align 8
  call void @Perl_sv_chop(%struct.sv* %253, i8* %254)
  %255 = load i8*, i8** %d, align 8
  %256 = load i8*, i8** %c, align 8
  %257 = load i64, i64* %clen, align 8
  %mul323 = mul i64 %257, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %255, i8* %256, i64 %mul323, i32 1, i1 false)
  br label %if.end.325

if.else.324:                                      ; preds = %if.else.318
  %258 = load %struct.sv*, %struct.sv** %targ, align 8
  %259 = load i8*, i8** %d, align 8
  call void @Perl_sv_chop(%struct.sv* %258, i8* %259)
  br label %if.end.325

if.end.325:                                       ; preds = %if.else.324, %if.then.320
  br label %if.end.326

if.end.326:                                       ; preds = %if.end.325, %if.end.317
  br label %if.end.327

if.end.327:                                       ; preds = %if.end.326, %if.end.292
  %260 = load i8, i8* %rxtainted, align 1
  %conv328 = sext i8 %260 to i32
  %and329 = and i32 %conv328, 1
  %tobool330 = icmp ne i32 %and329, 0
  br i1 %tobool330, label %if.then.331, label %if.end.332

if.then.331:                                      ; preds = %if.end.327
  store i8 1, i8* @PL_tainted, align 1
  br label %if.end.332

if.end.332:                                       ; preds = %if.then.331, %if.end.327
  %261 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %261, %struct.sv*** %sp, align 8
  %262 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr333 = getelementptr inbounds %struct.sv*, %struct.sv** %262, i32 1
  store %struct.sv** %incdec.ptr333, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr333, align 8
  br label %if.end.407

if.else.334:                                      ; preds = %if.end.253
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.else.334
  %263 = load i32, i32* %iters, align 4
  %inc = add nsw i32 %263, 1
  store i32 %inc, i32* %iters, align 4
  %264 = load i32, i32* %maxiters, align 4
  %cmp335 = icmp sgt i32 %263, %264
  br i1 %cmp335, label %if.then.337, label %if.end.339

if.then.337:                                      ; preds = %do.body
  %call338 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.27, i32 0, i32 0))
  store %struct.op* %call338, %struct.op** %retval
  br label %return

if.end.339:                                       ; preds = %do.body
  %265 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch340 = getelementptr inbounds %struct.regexp, %struct.regexp* %265, i32 0, i32 15
  %266 = load i32, i32* %reganch340, align 4
  %and341 = and i32 %266, 524288
  %267 = load i8, i8* %rxtainted, align 1
  %conv342 = sext i8 %267 to i32
  %or343 = or i32 %conv342, %and341
  %conv344 = trunc i32 %or343 to i8
  store i8 %conv344, i8* %rxtainted, align 1
  %268 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %startp345 = getelementptr inbounds %struct.regexp, %struct.regexp* %268, i32 0, i32 0
  %269 = load i32*, i32** %startp345, align 8
  %arrayidx346 = getelementptr inbounds i32, i32* %269, i64 0
  %270 = load i32, i32* %arrayidx346, align 4
  %271 = load i8*, i8** %orig, align 8
  %idx.ext347 = sext i32 %270 to i64
  %add.ptr348 = getelementptr inbounds i8, i8* %271, i64 %idx.ext347
  store i8* %add.ptr348, i8** %m, align 8
  %272 = load i8*, i8** %m, align 8
  %273 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast349 = ptrtoint i8* %272 to i64
  %sub.ptr.rhs.cast350 = ptrtoint i8* %273 to i64
  %sub.ptr.sub351 = sub i64 %sub.ptr.lhs.cast349, %sub.ptr.rhs.cast350
  %conv352 = trunc i64 %sub.ptr.sub351 to i32
  store i32 %conv352, i32* %i, align 4
  %tobool353 = icmp ne i32 %conv352, 0
  br i1 %tobool353, label %if.then.354, label %if.end.363

if.then.354:                                      ; preds = %if.end.339
  %274 = load i8*, i8** %s, align 8
  %275 = load i8*, i8** %d, align 8
  %cmp355 = icmp ne i8* %274, %275
  br i1 %cmp355, label %if.then.357, label %if.end.360

if.then.357:                                      ; preds = %if.then.354
  %276 = load i8*, i8** %d, align 8
  %277 = load i8*, i8** %s, align 8
  %278 = load i32, i32* %i, align 4
  %conv358 = sext i32 %278 to i64
  %mul359 = mul i64 %conv358, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %276, i8* %277, i64 %mul359, i32 1, i1 false)
  br label %if.end.360

if.end.360:                                       ; preds = %if.then.357, %if.then.354
  %279 = load i32, i32* %i, align 4
  %280 = load i8*, i8** %d, align 8
  %idx.ext361 = sext i32 %279 to i64
  %add.ptr362 = getelementptr inbounds i8, i8* %280, i64 %idx.ext361
  store i8* %add.ptr362, i8** %d, align 8
  br label %if.end.363

if.end.363:                                       ; preds = %if.end.360, %if.end.339
  %281 = load i64, i64* %clen, align 8
  %tobool364 = icmp ne i64 %281, 0
  br i1 %tobool364, label %if.then.365, label %if.end.368

if.then.365:                                      ; preds = %if.end.363
  %282 = load i8*, i8** %d, align 8
  %283 = load i8*, i8** %c, align 8
  %284 = load i64, i64* %clen, align 8
  %mul366 = mul i64 %284, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %282, i8* %283, i64 %mul366, i32 1, i1 false)
  %285 = load i64, i64* %clen, align 8
  %286 = load i8*, i8** %d, align 8
  %add.ptr367 = getelementptr inbounds i8, i8* %286, i64 %285
  store i8* %add.ptr367, i8** %d, align 8
  br label %if.end.368

if.end.368:                                       ; preds = %if.then.365, %if.end.363
  %287 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %endp369 = getelementptr inbounds %struct.regexp, %struct.regexp* %287, i32 0, i32 1
  %288 = load i32*, i32** %endp369, align 8
  %arrayidx370 = getelementptr inbounds i32, i32* %288, i64 0
  %289 = load i32, i32* %arrayidx370, align 4
  %290 = load i8*, i8** %orig, align 8
  %idx.ext371 = sext i32 %289 to i64
  %add.ptr372 = getelementptr inbounds i8, i8* %290, i64 %idx.ext371
  store i8* %add.ptr372, i8** %s, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end.368
  %291 = load i32 (%struct.regexp*, i8*, i8*, i8*, i32, %struct.sv*, i8*, i32)*, i32 (%struct.regexp*, i8*, i8*, i8*, i32, %struct.sv*, i8*, i32)** @PL_regexecp, align 8
  %292 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %293 = load i8*, i8** %s, align 8
  %294 = load i8*, i8** %strend, align 8
  %295 = load i8*, i8** %orig, align 8
  %296 = load i8*, i8** %s, align 8
  %297 = load i8*, i8** %m, align 8
  %cmp373 = icmp eq i8* %296, %297
  %conv374 = zext i1 %cmp373 to i32
  %298 = load %struct.sv*, %struct.sv** %targ, align 8
  %call375 = call i32 %291(%struct.regexp* %292, i8* %293, i8* %294, i8* %295, i32 %conv374, %struct.sv* %298, i8* null, i32 24)
  %tobool376 = icmp ne i32 %call375, 0
  br i1 %tobool376, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %299 = load i8*, i8** %s, align 8
  %300 = load i8*, i8** %d, align 8
  %cmp377 = icmp ne i8* %299, %300
  br i1 %cmp377, label %if.then.379, label %if.end.397

if.then.379:                                      ; preds = %do.end
  %301 = load i8*, i8** %strend, align 8
  %302 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast380 = ptrtoint i8* %301 to i64
  %sub.ptr.rhs.cast381 = ptrtoint i8* %302 to i64
  %sub.ptr.sub382 = sub i64 %sub.ptr.lhs.cast380, %sub.ptr.rhs.cast381
  %conv383 = trunc i64 %sub.ptr.sub382 to i32
  store i32 %conv383, i32* %i, align 4
  %303 = load i8*, i8** %d, align 8
  %304 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any385 = getelementptr inbounds %struct.sv, %struct.sv* %304, i32 0, i32 0
  %305 = load i8*, i8** %sv_any385, align 8
  %306 = bitcast i8* %305 to %struct.xpv*
  %xpv_pv386 = getelementptr inbounds %struct.xpv, %struct.xpv* %306, i32 0, i32 0
  %307 = load i8*, i8** %xpv_pv386, align 8
  %sub.ptr.lhs.cast387 = ptrtoint i8* %303 to i64
  %sub.ptr.rhs.cast388 = ptrtoint i8* %307 to i64
  %sub.ptr.sub389 = sub i64 %sub.ptr.lhs.cast387, %sub.ptr.rhs.cast388
  %308 = load i32, i32* %i, align 4
  %conv390 = sext i32 %308 to i64
  %add391 = add nsw i64 %sub.ptr.sub389, %conv390
  %309 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any392 = getelementptr inbounds %struct.sv, %struct.sv* %309, i32 0, i32 0
  %310 = load i8*, i8** %sv_any392, align 8
  %311 = bitcast i8* %310 to %struct.xpv*
  %xpv_cur393 = getelementptr inbounds %struct.xpv, %struct.xpv* %311, i32 0, i32 1
  store i64 %add391, i64* %xpv_cur393, align 8
  store i64 %add391, i64* %tmp384
  %312 = load i64, i64* %tmp384
  %313 = load i8*, i8** %d, align 8
  %314 = load i8*, i8** %s, align 8
  %315 = load i32, i32* %i, align 4
  %add394 = add nsw i32 %315, 1
  %conv395 = sext i32 %add394 to i64
  %mul396 = mul i64 %conv395, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %313, i8* %314, i64 %mul396, i32 1, i1 false)
  br label %if.end.397

if.end.397:                                       ; preds = %if.then.379, %do.end
  %316 = load i8, i8* %rxtainted, align 1
  %conv398 = sext i8 %316 to i32
  %and399 = and i32 %conv398, 1
  %tobool400 = icmp ne i32 %and399, 0
  br i1 %tobool400, label %if.then.401, label %if.end.402

if.then.401:                                      ; preds = %if.end.397
  store i8 1, i8* @PL_tainted, align 1
  br label %if.end.402

if.end.402:                                       ; preds = %if.then.401, %if.end.397
  %317 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %317, %struct.sv*** %sp, align 8
  %318 = load i32, i32* %iters, align 4
  %conv403 = sext i32 %318 to i64
  %call404 = call %struct.sv* @Perl_newSViv(i64 %conv403)
  %call405 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call404)
  %319 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr406 = getelementptr inbounds %struct.sv*, %struct.sv** %319, i32 1
  store %struct.sv** %incdec.ptr406, %struct.sv*** %sp, align 8
  store %struct.sv* %call405, %struct.sv** %incdec.ptr406, align 8
  br label %if.end.407

if.end.407:                                       ; preds = %if.end.402, %if.end.332
  %320 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags408 = getelementptr inbounds %struct.sv, %struct.sv* %320, i32 0, i32 2
  %321 = load i32, i32* %sv_flags408, align 4
  %and409 = and i32 %321, 1760624639
  store i32 %and409, i32* %sv_flags408, align 4
  %322 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags410 = getelementptr inbounds %struct.sv, %struct.sv* %322, i32 0, i32 2
  %323 = load i32, i32* %sv_flags410, align 4
  %or411 = or i32 %323, 67371008
  store i32 %or411, i32* %sv_flags410, align 4
  %324 = load i8, i8* %rxtainted, align 1
  %tobool412 = icmp ne i8 %324, 0
  br i1 %tobool412, label %if.then.413, label %if.end.414

if.then.413:                                      ; preds = %if.end.407
  store i8 1, i8* @PL_tainted, align 1
  br label %if.end.414

if.end.414:                                       ; preds = %if.then.413, %if.end.407
  %325 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags415 = getelementptr inbounds %struct.sv, %struct.sv* %325, i32 0, i32 2
  %326 = load i32, i32* %sv_flags415, align 4
  %and416 = and i32 %326, 16384
  %tobool417 = icmp ne i32 %and416, 0
  br i1 %tobool417, label %if.then.418, label %if.end.420

if.then.418:                                      ; preds = %if.end.414
  %327 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %327, %struct.sv*** @PL_stack_sp, align 8
  %328 = load %struct.sv*, %struct.sv** %targ, align 8
  %call419 = call i32 @Perl_mg_set(%struct.sv* %328)
  %329 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %329, %struct.sv*** %sp, align 8
  br label %if.end.420

if.end.420:                                       ; preds = %if.then.418, %if.end.414
  %330 = load i8, i8* @PL_tainting, align 1
  %tobool421 = icmp ne i8 %330, 0
  br i1 %tobool421, label %if.then.422, label %if.end.429

if.then.422:                                      ; preds = %if.end.420
  %331 = load i8, i8* @PL_tainted, align 1
  %tobool423 = icmp ne i8 %331, 0
  br i1 %tobool423, label %if.then.424, label %if.end.428

if.then.424:                                      ; preds = %if.then.422
  %332 = load i8, i8* @PL_tainting, align 1
  %tobool425 = icmp ne i8 %332, 0
  br i1 %tobool425, label %if.then.426, label %if.end.427

if.then.426:                                      ; preds = %if.then.424
  %333 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_taint(%struct.sv* %333)
  br label %if.end.427

if.end.427:                                       ; preds = %if.then.426, %if.then.424
  br label %if.end.428

if.end.428:                                       ; preds = %if.end.427, %if.then.422
  br label %if.end.429

if.end.429:                                       ; preds = %if.end.428, %if.end.420
  %334 = load i8, i8* %doutf8, align 1
  %tobool430 = icmp ne i8 %334, 0
  br i1 %tobool430, label %if.then.431, label %if.end.434

if.then.431:                                      ; preds = %if.end.429
  %335 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags432 = getelementptr inbounds %struct.sv, %struct.sv* %335, i32 0, i32 2
  %336 = load i32, i32* %sv_flags432, align 4
  %or433 = or i32 %336, 536870912
  store i32 %or433, i32* %sv_flags432, align 4
  br label %if.end.434

if.end.434:                                       ; preds = %if.then.431, %if.end.429
  %337 = load i32, i32* @PL_savestack_ix, align 4
  %338 = load i32, i32* %oldsave, align 4
  %cmp435 = icmp sgt i32 %337, %338
  br i1 %cmp435, label %if.then.437, label %if.end.438

if.then.437:                                      ; preds = %if.end.434
  %339 = load i32, i32* %oldsave, align 4
  call void @Perl_leave_scope(i32 %339)
  br label %if.end.438

if.end.438:                                       ; preds = %if.then.437, %if.end.434
  %340 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %340, %struct.sv*** @PL_stack_sp, align 8
  %341 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next439 = getelementptr inbounds %struct.op, %struct.op* %341, i32 0, i32 0
  %342 = load %struct.op*, %struct.op** %op_next439, align 8
  store %struct.op* %342, %struct.op** %retval
  br label %return

if.end.440:                                       ; preds = %lor.lhs.false.223, %land.lhs.true.217, %lor.lhs.false.214, %land.lhs.true.207, %if.end.205
  %343 = load i32 (%struct.regexp*, i8*, i8*, i8*, i32, %struct.sv*, i8*, i32)*, i32 (%struct.regexp*, i8*, i8*, i8*, i32, %struct.sv*, i8*, i32)** @PL_regexecp, align 8
  %344 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %345 = load i8*, i8** %s, align 8
  %346 = load i8*, i8** %strend, align 8
  %347 = load i8*, i8** %orig, align 8
  %348 = load %struct.sv*, %struct.sv** %targ, align 8
  %349 = load i32, i32* %r_flags, align 4
  %or441 = or i32 %349, 2
  %call442 = call i32 %343(%struct.regexp* %344, i8* %345, i8* %346, i8* %347, i32 0, %struct.sv* %348, i8* null, i32 %or441)
  %tobool443 = icmp ne i32 %call442, 0
  br i1 %tobool443, label %if.then.444, label %if.end.728

if.then.444:                                      ; preds = %if.end.440
  %350 = load i32, i32* %force_on_match, align 4
  %tobool445 = icmp ne i32 %350, 0
  br i1 %tobool445, label %if.then.446, label %if.end.460

if.then.446:                                      ; preds = %if.then.444
  store i32 0, i32* %force_on_match, align 4
  %351 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags447 = getelementptr inbounds %struct.sv, %struct.sv* %351, i32 0, i32 2
  %352 = load i32, i32* %sv_flags447, align 4
  %and448 = and i32 %352, 10223616
  %cmp449 = icmp eq i32 %and448, 262144
  br i1 %cmp449, label %cond.true.451, label %cond.false.456

cond.true.451:                                    ; preds = %if.then.446
  %353 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any452 = getelementptr inbounds %struct.sv, %struct.sv* %353, i32 0, i32 0
  %354 = load i8*, i8** %sv_any452, align 8
  %355 = bitcast i8* %354 to %struct.xpv*
  %xpv_cur453 = getelementptr inbounds %struct.xpv, %struct.xpv* %355, i32 0, i32 1
  %356 = load i64, i64* %xpv_cur453, align 8
  store i64 %356, i64* %len, align 8
  %357 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any454 = getelementptr inbounds %struct.sv, %struct.sv* %357, i32 0, i32 0
  %358 = load i8*, i8** %sv_any454, align 8
  %359 = bitcast i8* %358 to %struct.xpv*
  %xpv_pv455 = getelementptr inbounds %struct.xpv, %struct.xpv* %359, i32 0, i32 0
  %360 = load i8*, i8** %xpv_pv455, align 8
  br label %cond.end.458

cond.false.456:                                   ; preds = %if.then.446
  %361 = load %struct.sv*, %struct.sv** %targ, align 8
  %call457 = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %361, i64* %len, i32 2)
  br label %cond.end.458

cond.end.458:                                     ; preds = %cond.false.456, %cond.true.451
  %cond459 = phi i8* [ %360, %cond.true.451 ], [ %call457, %cond.false.456 ]
  store i8* %cond459, i8** %s, align 8
  br label %force_it

if.end.460:                                       ; preds = %if.then.444
  %362 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch461 = getelementptr inbounds %struct.regexp, %struct.regexp* %362, i32 0, i32 15
  %363 = load i32, i32* %reganch461, align 4
  %and462 = and i32 %363, 524288
  %364 = load i8, i8* %rxtainted, align 1
  %conv463 = sext i8 %364 to i32
  %or464 = or i32 %conv463, %and462
  %conv465 = trunc i32 %or464 to i8
  store i8 %conv465, i8* %rxtainted, align 1
  %365 = load i8*, i8** %m, align 8
  %366 = load i8*, i8** %s, align 8
  %367 = load i8*, i8** %m, align 8
  %sub.ptr.lhs.cast466 = ptrtoint i8* %366 to i64
  %sub.ptr.rhs.cast467 = ptrtoint i8* %367 to i64
  %sub.ptr.sub468 = sub i64 %sub.ptr.lhs.cast466, %sub.ptr.rhs.cast467
  %call469 = call %struct.sv* @Perl_newSVpvn(i8* %365, i64 %sub.ptr.sub468)
  store %struct.sv* %call469, %struct.sv** %dstr, align 8
  %368 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags470 = getelementptr inbounds %struct.sv, %struct.sv* %368, i32 0, i32 2
  %369 = load i32, i32* %sv_flags470, align 4
  %and471 = and i32 %369, 536870912
  %tobool472 = icmp ne i32 %and471, 0
  br i1 %tobool472, label %land.lhs.true.473, label %if.end.481

land.lhs.true.473:                                ; preds = %if.end.460
  %370 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private474 = getelementptr inbounds %struct.cop, %struct.cop* %370, i32 0, i32 7
  %371 = load i8, i8* %op_private474, align 1
  %conv475 = zext i8 %371 to i32
  %and476 = and i32 %conv475, 8
  %tobool477 = icmp ne i32 %and476, 0
  br i1 %tobool477, label %if.end.481, label %if.then.478

if.then.478:                                      ; preds = %land.lhs.true.473
  %372 = load %struct.sv*, %struct.sv** %dstr, align 8
  %sv_flags479 = getelementptr inbounds %struct.sv, %struct.sv* %372, i32 0, i32 2
  %373 = load i32, i32* %sv_flags479, align 4
  %or480 = or i32 %373, 536870912
  store i32 %or480, i32* %sv_flags479, align 4
  br label %if.end.481

if.end.481:                                       ; preds = %if.then.478, %land.lhs.true.473, %if.end.460
  %374 = load %struct.pmop*, %struct.pmop** %pm, align 8
  store %struct.pmop* %374, %struct.pmop** @PL_curpm, align 8
  %375 = load i8*, i8** %c, align 8
  %tobool482 = icmp ne i8* %375, null
  br i1 %tobool482, label %if.end.532, label %if.then.483

if.then.483:                                      ; preds = %if.end.481
  %376 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %376, %struct.sv*** %sp, align 8
  %377 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %tobool485 = icmp ne %struct.regexp* %377, null
  br i1 %tobool485, label %land.rhs.486, label %land.end.489

land.rhs.486:                                     ; preds = %if.then.483
  %378 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %refcnt = getelementptr inbounds %struct.regexp, %struct.regexp* %378, i32 0, i32 9
  %379 = load i32, i32* %refcnt, align 4
  %inc487 = add nsw i32 %379, 1
  store i32 %inc487, i32* %refcnt, align 4
  %tobool488 = icmp ne i32 %379, 0
  br label %land.end.489

land.end.489:                                     ; preds = %land.rhs.486, %if.then.483
  %380 = phi i1 [ false, %if.then.483 ], [ %tobool488, %land.rhs.486 ]
  %land.ext490 = zext i1 %380 to i32
  %381 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %382 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %382, i32 0, i32 2
  %383 = load i32, i32* %si_cxix, align 4
  %384 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxmax = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %384, i32 0, i32 3
  %385 = load i32, i32* %si_cxmax, align 4
  %cmp491 = icmp slt i32 %383, %385
  br i1 %cmp491, label %cond.true.493, label %cond.false.496

cond.true.493:                                    ; preds = %land.end.489
  %386 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix494 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %386, i32 0, i32 2
  %387 = load i32, i32* %si_cxix494, align 4
  %inc495 = add nsw i32 %387, 1
  store i32 %inc495, i32* %si_cxix494, align 4
  br label %cond.end.499

cond.false.496:                                   ; preds = %land.end.489
  %call497 = call i32 @Perl_cxinc()
  %388 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix498 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %388, i32 0, i32 2
  store i32 %call497, i32* %si_cxix498, align 4
  br label %cond.end.499

cond.end.499:                                     ; preds = %cond.false.496, %cond.true.493
  %cond500 = phi i32 [ %inc495, %cond.true.493 ], [ %call497, %cond.false.496 ]
  %389 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix501 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %389, i32 0, i32 2
  %390 = load i32, i32* %si_cxix501, align 4
  %idxprom = sext i32 %390 to i64
  %391 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %391, i32 0, i32 1
  %392 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx502 = getelementptr inbounds %struct.context, %struct.context* %392, i64 %idxprom
  store %struct.context* %arrayidx502, %struct.context** %cx, align 8
  %393 = load i32, i32* %iters, align 4
  %394 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %394, i32 0, i32 1
  %cx_subst = bitcast %union.anon.0* %cx_u to %struct.subst*
  %sbu_iters = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst, i32 0, i32 0
  store i32 %393, i32* %sbu_iters, align 4
  %395 = load i32, i32* %maxiters, align 4
  %396 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u503 = getelementptr inbounds %struct.context, %struct.context* %396, i32 0, i32 1
  %cx_subst504 = bitcast %union.anon.0* %cx_u503 to %struct.subst*
  %sbu_maxiters = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst504, i32 0, i32 1
  store i32 %395, i32* %sbu_maxiters, align 4
  %397 = load i32, i32* %r_flags, align 4
  %398 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u505 = getelementptr inbounds %struct.context, %struct.context* %398, i32 0, i32 1
  %cx_subst506 = bitcast %union.anon.0* %cx_u505 to %struct.subst*
  %sbu_rflags = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst506, i32 0, i32 2
  store i32 %397, i32* %sbu_rflags, align 4
  %399 = load i32, i32* %oldsave, align 4
  %400 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u507 = getelementptr inbounds %struct.context, %struct.context* %400, i32 0, i32 1
  %cx_subst508 = bitcast %union.anon.0* %cx_u507 to %struct.subst*
  %sbu_oldsave = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst508, i32 0, i32 3
  store i32 %399, i32* %sbu_oldsave, align 4
  %401 = load i8, i8* %once, align 1
  %402 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u509 = getelementptr inbounds %struct.context, %struct.context* %402, i32 0, i32 1
  %cx_subst510 = bitcast %union.anon.0* %cx_u509 to %struct.subst*
  %sbu_once = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst510, i32 0, i32 4
  store i8 %401, i8* %sbu_once, align 1
  %403 = load i8, i8* %rxtainted, align 1
  %404 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u511 = getelementptr inbounds %struct.context, %struct.context* %404, i32 0, i32 1
  %cx_subst512 = bitcast %union.anon.0* %cx_u511 to %struct.subst*
  %sbu_rxtainted = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst512, i32 0, i32 5
  store i8 %403, i8* %sbu_rxtainted, align 1
  %405 = load i8*, i8** %orig, align 8
  %406 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u513 = getelementptr inbounds %struct.context, %struct.context* %406, i32 0, i32 1
  %cx_subst514 = bitcast %union.anon.0* %cx_u513 to %struct.subst*
  %sbu_orig = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst514, i32 0, i32 6
  store i8* %405, i8** %sbu_orig, align 8
  %407 = load %struct.sv*, %struct.sv** %dstr, align 8
  %408 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u515 = getelementptr inbounds %struct.context, %struct.context* %408, i32 0, i32 1
  %cx_subst516 = bitcast %union.anon.0* %cx_u515 to %struct.subst*
  %sbu_dstr = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst516, i32 0, i32 7
  store %struct.sv* %407, %struct.sv** %sbu_dstr, align 8
  %409 = load %struct.sv*, %struct.sv** %targ, align 8
  %410 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u517 = getelementptr inbounds %struct.context, %struct.context* %410, i32 0, i32 1
  %cx_subst518 = bitcast %union.anon.0* %cx_u517 to %struct.subst*
  %sbu_targ = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst518, i32 0, i32 8
  store %struct.sv* %409, %struct.sv** %sbu_targ, align 8
  %411 = load i8*, i8** %s, align 8
  %412 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u519 = getelementptr inbounds %struct.context, %struct.context* %412, i32 0, i32 1
  %cx_subst520 = bitcast %union.anon.0* %cx_u519 to %struct.subst*
  %sbu_s = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst520, i32 0, i32 9
  store i8* %411, i8** %sbu_s, align 8
  %413 = load i8*, i8** %m, align 8
  %414 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u521 = getelementptr inbounds %struct.context, %struct.context* %414, i32 0, i32 1
  %cx_subst522 = bitcast %union.anon.0* %cx_u521 to %struct.subst*
  %sbu_m = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst522, i32 0, i32 10
  store i8* %413, i8** %sbu_m, align 8
  %415 = load i8*, i8** %strend, align 8
  %416 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u523 = getelementptr inbounds %struct.context, %struct.context* %416, i32 0, i32 1
  %cx_subst524 = bitcast %union.anon.0* %cx_u523 to %struct.subst*
  %sbu_strend = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst524, i32 0, i32 11
  store i8* %415, i8** %sbu_strend, align 8
  %417 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u525 = getelementptr inbounds %struct.context, %struct.context* %417, i32 0, i32 1
  %cx_subst526 = bitcast %union.anon.0* %cx_u525 to %struct.subst*
  %sbu_rxres = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst526, i32 0, i32 12
  store i8* null, i8** %sbu_rxres, align 8
  %418 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %419 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u527 = getelementptr inbounds %struct.context, %struct.context* %419, i32 0, i32 1
  %cx_subst528 = bitcast %union.anon.0* %cx_u527 to %struct.subst*
  %sbu_rx = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst528, i32 0, i32 13
  store %struct.regexp* %418, %struct.regexp** %sbu_rx, align 8
  %420 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type = getelementptr inbounds %struct.context, %struct.context* %420, i32 0, i32 0
  store i32 4, i32* %cx_type, align 4
  %421 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u529 = getelementptr inbounds %struct.context, %struct.context* %421, i32 0, i32 1
  %cx_subst530 = bitcast %union.anon.0* %cx_u529 to %struct.subst*
  %sbu_rxres531 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst530, i32 0, i32 12
  %422 = load %struct.regexp*, %struct.regexp** %rx, align 8
  call void @Perl_rxres_save(i8** %sbu_rxres531, %struct.regexp* %422)
  %423 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %423, %struct.sv*** @PL_stack_sp, align 8
  %424 = load %struct.op*, %struct.op** @PL_op, align 8
  %425 = bitcast %struct.op* %424 to %struct.pmop*
  %op_pmreplroot = getelementptr inbounds %struct.pmop, %struct.pmop* %425, i32 0, i32 10
  %426 = load %struct.op*, %struct.op** %op_pmreplroot, align 8
  store %struct.op* %426, %struct.op** %retval
  br label %return

if.end.532:                                       ; preds = %if.end.481
  %427 = load i32, i32* %r_flags, align 4
  %or533 = or i32 %427, 24
  store i32 %or533, i32* %r_flags, align 4
  br label %do.body.534

do.body.534:                                      ; preds = %do.cond.604, %if.end.532
  %428 = load i32, i32* %iters, align 4
  %inc535 = add nsw i32 %428, 1
  store i32 %inc535, i32* %iters, align 4
  %429 = load i32, i32* %maxiters, align 4
  %cmp536 = icmp sgt i32 %428, %429
  br i1 %cmp536, label %if.then.538, label %if.end.540

if.then.538:                                      ; preds = %do.body.534
  %call539 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.27, i32 0, i32 0))
  store %struct.op* %call539, %struct.op** %retval
  br label %return

if.end.540:                                       ; preds = %do.body.534
  %430 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch541 = getelementptr inbounds %struct.regexp, %struct.regexp* %430, i32 0, i32 15
  %431 = load i32, i32* %reganch541, align 4
  %and542 = and i32 %431, 524288
  %432 = load i8, i8* %rxtainted, align 1
  %conv543 = sext i8 %432 to i32
  %or544 = or i32 %conv543, %and542
  %conv545 = trunc i32 %or544 to i8
  store i8 %conv545, i8* %rxtainted, align 1
  %433 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch546 = getelementptr inbounds %struct.regexp, %struct.regexp* %433, i32 0, i32 15
  %434 = load i32, i32* %reganch546, align 4
  %and547 = and i32 %434, 262144
  %tobool548 = icmp ne i32 %and547, 0
  br i1 %tobool548, label %land.lhs.true.549, label %if.end.562

land.lhs.true.549:                                ; preds = %if.end.540
  %435 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %subbeg = getelementptr inbounds %struct.regexp, %struct.regexp* %435, i32 0, i32 6
  %436 = load i8*, i8** %subbeg, align 8
  %437 = load i8*, i8** %orig, align 8
  %cmp550 = icmp ne i8* %436, %437
  br i1 %cmp550, label %if.then.552, label %if.end.562

if.then.552:                                      ; preds = %land.lhs.true.549
  %438 = load i8*, i8** %s, align 8
  store i8* %438, i8** %m, align 8
  %439 = load i8*, i8** %orig, align 8
  store i8* %439, i8** %s, align 8
  %440 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %subbeg553 = getelementptr inbounds %struct.regexp, %struct.regexp* %440, i32 0, i32 6
  %441 = load i8*, i8** %subbeg553, align 8
  store i8* %441, i8** %orig, align 8
  %442 = load i8*, i8** %orig, align 8
  %443 = load i8*, i8** %m, align 8
  %444 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast554 = ptrtoint i8* %443 to i64
  %sub.ptr.rhs.cast555 = ptrtoint i8* %444 to i64
  %sub.ptr.sub556 = sub i64 %sub.ptr.lhs.cast554, %sub.ptr.rhs.cast555
  %add.ptr557 = getelementptr inbounds i8, i8* %442, i64 %sub.ptr.sub556
  store i8* %add.ptr557, i8** %s, align 8
  %445 = load i8*, i8** %s, align 8
  %446 = load i8*, i8** %strend, align 8
  %447 = load i8*, i8** %m, align 8
  %sub.ptr.lhs.cast558 = ptrtoint i8* %446 to i64
  %sub.ptr.rhs.cast559 = ptrtoint i8* %447 to i64
  %sub.ptr.sub560 = sub i64 %sub.ptr.lhs.cast558, %sub.ptr.rhs.cast559
  %add.ptr561 = getelementptr inbounds i8, i8* %445, i64 %sub.ptr.sub560
  store i8* %add.ptr561, i8** %strend, align 8
  br label %if.end.562

if.end.562:                                       ; preds = %if.then.552, %land.lhs.true.549, %if.end.540
  %448 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %startp563 = getelementptr inbounds %struct.regexp, %struct.regexp* %448, i32 0, i32 0
  %449 = load i32*, i32** %startp563, align 8
  %arrayidx564 = getelementptr inbounds i32, i32* %449, i64 0
  %450 = load i32, i32* %arrayidx564, align 4
  %451 = load i8*, i8** %orig, align 8
  %idx.ext565 = sext i32 %450 to i64
  %add.ptr566 = getelementptr inbounds i8, i8* %451, i64 %idx.ext565
  store i8* %add.ptr566, i8** %m, align 8
  %452 = load i8, i8* %doutf8, align 1
  %conv567 = sext i8 %452 to i32
  %tobool568 = icmp ne i32 %conv567, 0
  br i1 %tobool568, label %land.lhs.true.569, label %if.else.589

land.lhs.true.569:                                ; preds = %if.end.562
  %453 = load %struct.sv*, %struct.sv** %dstr, align 8
  %sv_flags570 = getelementptr inbounds %struct.sv, %struct.sv* %453, i32 0, i32 2
  %454 = load i32, i32* %sv_flags570, align 4
  %and571 = and i32 %454, 536870912
  %tobool572 = icmp ne i32 %and571, 0
  br i1 %tobool572, label %if.else.589, label %if.then.573

if.then.573:                                      ; preds = %land.lhs.true.569
  %455 = load %struct.sv*, %struct.sv** %nsv, align 8
  %tobool574 = icmp ne %struct.sv* %455, null
  br i1 %tobool574, label %if.else.581, label %if.then.575

if.then.575:                                      ; preds = %if.then.573
  %456 = load i8*, i8** %s, align 8
  %457 = load i8*, i8** %m, align 8
  %458 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast576 = ptrtoint i8* %457 to i64
  %sub.ptr.rhs.cast577 = ptrtoint i8* %458 to i64
  %sub.ptr.sub578 = sub i64 %sub.ptr.lhs.cast576, %sub.ptr.rhs.cast577
  %call579 = call %struct.sv* @Perl_newSVpvn(i8* %456, i64 %sub.ptr.sub578)
  %call580 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call579)
  store %struct.sv* %call580, %struct.sv** %nsv, align 8
  br label %if.end.585

if.else.581:                                      ; preds = %if.then.573
  %459 = load %struct.sv*, %struct.sv** %nsv, align 8
  %460 = load i8*, i8** %s, align 8
  %461 = load i8*, i8** %m, align 8
  %462 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast582 = ptrtoint i8* %461 to i64
  %sub.ptr.rhs.cast583 = ptrtoint i8* %462 to i64
  %sub.ptr.sub584 = sub i64 %sub.ptr.lhs.cast582, %sub.ptr.rhs.cast583
  call void @Perl_sv_setpvn(%struct.sv* %459, i8* %460, i64 %sub.ptr.sub584)
  br label %if.end.585

if.end.585:                                       ; preds = %if.else.581, %if.then.575
  %463 = load %struct.sv*, %struct.sv** %nsv, align 8
  %sv_flags586 = getelementptr inbounds %struct.sv, %struct.sv* %463, i32 0, i32 2
  %464 = load i32, i32* %sv_flags586, align 4
  %and587 = and i32 %464, -536870913
  store i32 %and587, i32* %sv_flags586, align 4
  %465 = load %struct.sv*, %struct.sv** %nsv, align 8
  %call588 = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %465, i32 2)
  %466 = load %struct.sv*, %struct.sv** %dstr, align 8
  %467 = load %struct.sv*, %struct.sv** %nsv, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %466, %struct.sv* %467, i32 2)
  br label %if.end.593

if.else.589:                                      ; preds = %land.lhs.true.569, %if.end.562
  %468 = load %struct.sv*, %struct.sv** %dstr, align 8
  %469 = load i8*, i8** %s, align 8
  %470 = load i8*, i8** %m, align 8
  %471 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast590 = ptrtoint i8* %470 to i64
  %sub.ptr.rhs.cast591 = ptrtoint i8* %471 to i64
  %sub.ptr.sub592 = sub i64 %sub.ptr.lhs.cast590, %sub.ptr.rhs.cast591
  call void @Perl_sv_catpvn_flags(%struct.sv* %468, i8* %469, i64 %sub.ptr.sub592, i32 2)
  br label %if.end.593

if.end.593:                                       ; preds = %if.else.589, %if.end.585
  %472 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %endp594 = getelementptr inbounds %struct.regexp, %struct.regexp* %472, i32 0, i32 1
  %473 = load i32*, i32** %endp594, align 8
  %arrayidx595 = getelementptr inbounds i32, i32* %473, i64 0
  %474 = load i32, i32* %arrayidx595, align 4
  %475 = load i8*, i8** %orig, align 8
  %idx.ext596 = sext i32 %474 to i64
  %add.ptr597 = getelementptr inbounds i8, i8* %475, i64 %idx.ext596
  store i8* %add.ptr597, i8** %s, align 8
  %476 = load i64, i64* %clen, align 8
  %tobool598 = icmp ne i64 %476, 0
  br i1 %tobool598, label %if.then.599, label %if.end.600

if.then.599:                                      ; preds = %if.end.593
  %477 = load %struct.sv*, %struct.sv** %dstr, align 8
  %478 = load i8*, i8** %c, align 8
  %479 = load i64, i64* %clen, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %477, i8* %478, i64 %479, i32 2)
  br label %if.end.600

if.end.600:                                       ; preds = %if.then.599, %if.end.593
  %480 = load i8, i8* %once, align 1
  %tobool601 = icmp ne i8 %480, 0
  br i1 %tobool601, label %if.then.602, label %if.end.603

if.then.602:                                      ; preds = %if.end.600
  br label %do.end.609

if.end.603:                                       ; preds = %if.end.600
  br label %do.cond.604

do.cond.604:                                      ; preds = %if.end.603
  %481 = load i32 (%struct.regexp*, i8*, i8*, i8*, i32, %struct.sv*, i8*, i32)*, i32 (%struct.regexp*, i8*, i8*, i8*, i32, %struct.sv*, i8*, i32)** @PL_regexecp, align 8
  %482 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %483 = load i8*, i8** %s, align 8
  %484 = load i8*, i8** %strend, align 8
  %485 = load i8*, i8** %orig, align 8
  %486 = load i8*, i8** %s, align 8
  %487 = load i8*, i8** %m, align 8
  %cmp605 = icmp eq i8* %486, %487
  %conv606 = zext i1 %cmp605 to i32
  %488 = load %struct.sv*, %struct.sv** %targ, align 8
  %489 = load i32, i32* %r_flags, align 4
  %call607 = call i32 %481(%struct.regexp* %482, i8* %483, i8* %484, i8* %485, i32 %conv606, %struct.sv* %488, i8* null, i32 %489)
  %tobool608 = icmp ne i32 %call607, 0
  br i1 %tobool608, label %do.body.534, label %do.end.609

do.end.609:                                       ; preds = %do.cond.604, %if.then.602
  %490 = load i8, i8* %doutf8, align 1
  %conv610 = sext i8 %490 to i32
  %tobool611 = icmp ne i32 %conv610, 0
  br i1 %tobool611, label %land.lhs.true.612, label %if.else.637

land.lhs.true.612:                                ; preds = %do.end.609
  %491 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags613 = getelementptr inbounds %struct.sv, %struct.sv* %491, i32 0, i32 2
  %492 = load i32, i32* %sv_flags613, align 4
  %and614 = and i32 %492, 536870912
  %tobool615 = icmp ne i32 %and614, 0
  br i1 %tobool615, label %land.lhs.true.616, label %if.then.621

land.lhs.true.616:                                ; preds = %land.lhs.true.612
  %493 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private617 = getelementptr inbounds %struct.cop, %struct.cop* %493, i32 0, i32 7
  %494 = load i8, i8* %op_private617, align 1
  %conv618 = zext i8 %494 to i32
  %and619 = and i32 %conv618, 8
  %tobool620 = icmp ne i32 %and619, 0
  br i1 %tobool620, label %if.then.621, label %if.else.637

if.then.621:                                      ; preds = %land.lhs.true.616, %land.lhs.true.612
  %495 = load %struct.sv*, %struct.sv** %nsv, align 8
  %tobool622 = icmp ne %struct.sv* %495, null
  br i1 %tobool622, label %if.else.629, label %if.then.623

if.then.623:                                      ; preds = %if.then.621
  %496 = load i8*, i8** %s, align 8
  %497 = load i8*, i8** %strend, align 8
  %498 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast624 = ptrtoint i8* %497 to i64
  %sub.ptr.rhs.cast625 = ptrtoint i8* %498 to i64
  %sub.ptr.sub626 = sub i64 %sub.ptr.lhs.cast624, %sub.ptr.rhs.cast625
  %call627 = call %struct.sv* @Perl_newSVpvn(i8* %496, i64 %sub.ptr.sub626)
  %call628 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call627)
  store %struct.sv* %call628, %struct.sv** %nsv, align 8
  br label %if.end.633

if.else.629:                                      ; preds = %if.then.621
  %499 = load %struct.sv*, %struct.sv** %nsv, align 8
  %500 = load i8*, i8** %s, align 8
  %501 = load i8*, i8** %strend, align 8
  %502 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast630 = ptrtoint i8* %501 to i64
  %sub.ptr.rhs.cast631 = ptrtoint i8* %502 to i64
  %sub.ptr.sub632 = sub i64 %sub.ptr.lhs.cast630, %sub.ptr.rhs.cast631
  call void @Perl_sv_setpvn(%struct.sv* %499, i8* %500, i64 %sub.ptr.sub632)
  br label %if.end.633

if.end.633:                                       ; preds = %if.else.629, %if.then.623
  %503 = load %struct.sv*, %struct.sv** %nsv, align 8
  %sv_flags634 = getelementptr inbounds %struct.sv, %struct.sv* %503, i32 0, i32 2
  %504 = load i32, i32* %sv_flags634, align 4
  %and635 = and i32 %504, -536870913
  store i32 %and635, i32* %sv_flags634, align 4
  %505 = load %struct.sv*, %struct.sv** %nsv, align 8
  %call636 = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %505, i32 2)
  %506 = load %struct.sv*, %struct.sv** %dstr, align 8
  %507 = load %struct.sv*, %struct.sv** %nsv, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %506, %struct.sv* %507, i32 2)
  br label %if.end.641

if.else.637:                                      ; preds = %land.lhs.true.616, %do.end.609
  %508 = load %struct.sv*, %struct.sv** %dstr, align 8
  %509 = load i8*, i8** %s, align 8
  %510 = load i8*, i8** %strend, align 8
  %511 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast638 = ptrtoint i8* %510 to i64
  %sub.ptr.rhs.cast639 = ptrtoint i8* %511 to i64
  %sub.ptr.sub640 = sub i64 %sub.ptr.lhs.cast638, %sub.ptr.rhs.cast639
  call void @Perl_sv_catpvn_flags(%struct.sv* %508, i8* %509, i64 %sub.ptr.sub640, i32 2)
  br label %if.end.641

if.end.641:                                       ; preds = %if.else.637, %if.end.633
  %512 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags642 = getelementptr inbounds %struct.sv, %struct.sv* %512, i32 0, i32 2
  %513 = load i32, i32* %sv_flags642, align 4
  %and643 = and i32 %513, 2097152
  %tobool644 = icmp ne i32 %and643, 0
  br i1 %tobool644, label %land.rhs.645, label %land.end.648

land.rhs.645:                                     ; preds = %if.end.641
  %514 = load %struct.sv*, %struct.sv** %targ, align 8
  %call646 = call i32 @Perl_sv_backoff(%struct.sv* %514)
  %tobool647 = icmp ne i32 %call646, 0
  br label %land.end.648

land.end.648:                                     ; preds = %land.rhs.645, %if.end.641
  %515 = phi i1 [ false, %if.end.641 ], [ %tobool647, %land.rhs.645 ]
  %land.ext649 = zext i1 %515 to i32
  %516 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any650 = getelementptr inbounds %struct.sv, %struct.sv* %516, i32 0, i32 0
  %517 = load i8*, i8** %sv_any650, align 8
  %518 = bitcast i8* %517 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %518, i32 0, i32 2
  %519 = load i64, i64* %xpv_len, align 8
  %tobool651 = icmp ne i64 %519, 0
  br i1 %tobool651, label %if.then.652, label %if.end.655

if.then.652:                                      ; preds = %land.end.648
  %520 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any653 = getelementptr inbounds %struct.sv, %struct.sv* %520, i32 0, i32 0
  %521 = load i8*, i8** %sv_any653, align 8
  %522 = bitcast i8* %521 to %struct.xpv*
  %xpv_pv654 = getelementptr inbounds %struct.xpv, %struct.xpv* %522, i32 0, i32 0
  %523 = load i8*, i8** %xpv_pv654, align 8
  call void @Perl_safesysfree(i8* %523)
  br label %if.end.655

if.end.655:                                       ; preds = %if.then.652, %land.end.648
  %524 = load %struct.sv*, %struct.sv** %dstr, align 8
  %sv_any656 = getelementptr inbounds %struct.sv, %struct.sv* %524, i32 0, i32 0
  %525 = load i8*, i8** %sv_any656, align 8
  %526 = bitcast i8* %525 to %struct.xpv*
  %xpv_pv657 = getelementptr inbounds %struct.xpv, %struct.xpv* %526, i32 0, i32 0
  %527 = load i8*, i8** %xpv_pv657, align 8
  %528 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any658 = getelementptr inbounds %struct.sv, %struct.sv* %528, i32 0, i32 0
  %529 = load i8*, i8** %sv_any658, align 8
  %530 = bitcast i8* %529 to %struct.xpv*
  %xpv_pv659 = getelementptr inbounds %struct.xpv, %struct.xpv* %530, i32 0, i32 0
  store i8* %527, i8** %xpv_pv659, align 8
  %531 = load %struct.sv*, %struct.sv** %dstr, align 8
  %sv_any661 = getelementptr inbounds %struct.sv, %struct.sv* %531, i32 0, i32 0
  %532 = load i8*, i8** %sv_any661, align 8
  %533 = bitcast i8* %532 to %struct.xpv*
  %xpv_cur662 = getelementptr inbounds %struct.xpv, %struct.xpv* %533, i32 0, i32 1
  %534 = load i64, i64* %xpv_cur662, align 8
  %535 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any663 = getelementptr inbounds %struct.sv, %struct.sv* %535, i32 0, i32 0
  %536 = load i8*, i8** %sv_any663, align 8
  %537 = bitcast i8* %536 to %struct.xpv*
  %xpv_cur664 = getelementptr inbounds %struct.xpv, %struct.xpv* %537, i32 0, i32 1
  store i64 %534, i64* %xpv_cur664, align 8
  store i64 %534, i64* %tmp660
  %538 = load i64, i64* %tmp660
  %539 = load %struct.sv*, %struct.sv** %dstr, align 8
  %sv_any666 = getelementptr inbounds %struct.sv, %struct.sv* %539, i32 0, i32 0
  %540 = load i8*, i8** %sv_any666, align 8
  %541 = bitcast i8* %540 to %struct.xpv*
  %xpv_len667 = getelementptr inbounds %struct.xpv, %struct.xpv* %541, i32 0, i32 2
  %542 = load i64, i64* %xpv_len667, align 8
  %543 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any668 = getelementptr inbounds %struct.sv, %struct.sv* %543, i32 0, i32 0
  %544 = load i8*, i8** %sv_any668, align 8
  %545 = bitcast i8* %544 to %struct.xpv*
  %xpv_len669 = getelementptr inbounds %struct.xpv, %struct.xpv* %545, i32 0, i32 2
  store i64 %542, i64* %xpv_len669, align 8
  store i64 %542, i64* %tmp665
  %546 = load i64, i64* %tmp665
  %547 = load %struct.sv*, %struct.sv** %dstr, align 8
  %sv_flags670 = getelementptr inbounds %struct.sv, %struct.sv* %547, i32 0, i32 2
  %548 = load i32, i32* %sv_flags670, align 4
  %and671 = and i32 %548, 536870912
  %tobool672 = icmp ne i32 %and671, 0
  br i1 %tobool672, label %land.rhs.673, label %land.end.680

land.rhs.673:                                     ; preds = %if.end.655
  %549 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private674 = getelementptr inbounds %struct.cop, %struct.cop* %549, i32 0, i32 7
  %550 = load i8, i8* %op_private674, align 1
  %conv675 = zext i8 %550 to i32
  %and676 = and i32 %conv675, 8
  %tobool677 = icmp ne i32 %and676, 0
  %lnot678 = xor i1 %tobool677, true
  br label %land.end.680

land.end.680:                                     ; preds = %land.rhs.673, %if.end.655
  %551 = phi i1 [ false, %if.end.655 ], [ %lnot678, %land.rhs.673 ]
  %land.ext681 = zext i1 %551 to i32
  %552 = load i8, i8* %doutf8, align 1
  %conv682 = sext i8 %552 to i32
  %or683 = or i32 %conv682, %land.ext681
  %conv684 = trunc i32 %or683 to i8
  store i8 %conv684, i8* %doutf8, align 1
  %553 = load %struct.sv*, %struct.sv** %dstr, align 8
  %sv_any685 = getelementptr inbounds %struct.sv, %struct.sv* %553, i32 0, i32 0
  %554 = load i8*, i8** %sv_any685, align 8
  %555 = bitcast i8* %554 to %struct.xpv*
  %xpv_pv686 = getelementptr inbounds %struct.xpv, %struct.xpv* %555, i32 0, i32 0
  store i8* null, i8** %xpv_pv686, align 8
  %556 = load %struct.sv*, %struct.sv** %dstr, align 8
  call void @Perl_sv_free(%struct.sv* %556)
  %557 = load i8, i8* %rxtainted, align 1
  %conv687 = sext i8 %557 to i32
  %and688 = and i32 %conv687, 1
  %tobool689 = icmp ne i32 %and688, 0
  br i1 %tobool689, label %if.then.690, label %if.end.691

if.then.690:                                      ; preds = %land.end.680
  store i8 1, i8* @PL_tainted, align 1
  br label %if.end.691

if.end.691:                                       ; preds = %if.then.690, %land.end.680
  %558 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %558, %struct.sv*** %sp, align 8
  %559 = load i32, i32* %iters, align 4
  %conv692 = sext i32 %559 to i64
  %call693 = call %struct.sv* @Perl_newSViv(i64 %conv692)
  %call694 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call693)
  %560 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr695 = getelementptr inbounds %struct.sv*, %struct.sv** %560, i32 1
  store %struct.sv** %incdec.ptr695, %struct.sv*** %sp, align 8
  store %struct.sv* %call694, %struct.sv** %incdec.ptr695, align 8
  %561 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags696 = getelementptr inbounds %struct.sv, %struct.sv* %561, i32 0, i32 2
  %562 = load i32, i32* %sv_flags696, align 4
  %and697 = and i32 %562, 1223753727
  store i32 %and697, i32* %sv_flags696, align 4
  %563 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags698 = getelementptr inbounds %struct.sv, %struct.sv* %563, i32 0, i32 2
  %564 = load i32, i32* %sv_flags698, align 4
  %or699 = or i32 %564, 67371008
  store i32 %or699, i32* %sv_flags698, align 4
  %565 = load i8, i8* %doutf8, align 1
  %tobool700 = icmp ne i8 %565, 0
  br i1 %tobool700, label %if.then.701, label %if.end.704

if.then.701:                                      ; preds = %if.end.691
  %566 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags702 = getelementptr inbounds %struct.sv, %struct.sv* %566, i32 0, i32 2
  %567 = load i32, i32* %sv_flags702, align 4
  %or703 = or i32 %567, 536870912
  store i32 %or703, i32* %sv_flags702, align 4
  br label %if.end.704

if.end.704:                                       ; preds = %if.then.701, %if.end.691
  %568 = load i8, i8* %rxtainted, align 1
  %tobool705 = icmp ne i8 %568, 0
  br i1 %tobool705, label %if.then.706, label %if.end.707

if.then.706:                                      ; preds = %if.end.704
  store i8 1, i8* @PL_tainted, align 1
  br label %if.end.707

if.end.707:                                       ; preds = %if.then.706, %if.end.704
  %569 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags708 = getelementptr inbounds %struct.sv, %struct.sv* %569, i32 0, i32 2
  %570 = load i32, i32* %sv_flags708, align 4
  %and709 = and i32 %570, 16384
  %tobool710 = icmp ne i32 %and709, 0
  br i1 %tobool710, label %if.then.711, label %if.end.713

if.then.711:                                      ; preds = %if.end.707
  %571 = load %struct.sv*, %struct.sv** %targ, align 8
  %call712 = call i32 @Perl_mg_set(%struct.sv* %571)
  br label %if.end.713

if.end.713:                                       ; preds = %if.then.711, %if.end.707
  %572 = load i8, i8* @PL_tainting, align 1
  %tobool714 = icmp ne i8 %572, 0
  br i1 %tobool714, label %if.then.715, label %if.end.722

if.then.715:                                      ; preds = %if.end.713
  %573 = load i8, i8* @PL_tainted, align 1
  %tobool716 = icmp ne i8 %573, 0
  br i1 %tobool716, label %if.then.717, label %if.end.721

if.then.717:                                      ; preds = %if.then.715
  %574 = load i8, i8* @PL_tainting, align 1
  %tobool718 = icmp ne i8 %574, 0
  br i1 %tobool718, label %if.then.719, label %if.end.720

if.then.719:                                      ; preds = %if.then.717
  %575 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_taint(%struct.sv* %575)
  br label %if.end.720

if.end.720:                                       ; preds = %if.then.719, %if.then.717
  br label %if.end.721

if.end.721:                                       ; preds = %if.end.720, %if.then.715
  br label %if.end.722

if.end.722:                                       ; preds = %if.end.721, %if.end.713
  %576 = load i32, i32* @PL_savestack_ix, align 4
  %577 = load i32, i32* %oldsave, align 4
  %cmp723 = icmp sgt i32 %576, %577
  br i1 %cmp723, label %if.then.725, label %if.end.726

if.then.725:                                      ; preds = %if.end.722
  %578 = load i32, i32* %oldsave, align 4
  call void @Perl_leave_scope(i32 %578)
  br label %if.end.726

if.end.726:                                       ; preds = %if.then.725, %if.end.722
  %579 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %579, %struct.sv*** @PL_stack_sp, align 8
  %580 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next727 = getelementptr inbounds %struct.op, %struct.op* %580, i32 0, i32 0
  %581 = load %struct.op*, %struct.op** %op_next727, align 8
  store %struct.op* %581, %struct.op** %retval
  br label %return

if.end.728:                                       ; preds = %if.end.440
  br label %ret_no

nope:                                             ; preds = %if.then.133
  br label %ret_no

ret_no:                                           ; preds = %nope, %if.end.728
  %582 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %582, %struct.sv*** %sp, align 8
  %583 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr729 = getelementptr inbounds %struct.sv*, %struct.sv** %583, i32 1
  store %struct.sv** %incdec.ptr729, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_no, %struct.sv** %incdec.ptr729, align 8
  %584 = load i32, i32* @PL_savestack_ix, align 4
  %585 = load i32, i32* %oldsave, align 4
  %cmp730 = icmp sgt i32 %584, %585
  br i1 %cmp730, label %if.then.732, label %if.end.733

if.then.732:                                      ; preds = %ret_no
  %586 = load i32, i32* %oldsave, align 4
  call void @Perl_leave_scope(i32 %586)
  br label %if.end.733

if.end.733:                                       ; preds = %if.then.732, %ret_no
  %587 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %587, %struct.sv*** @PL_stack_sp, align 8
  %588 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next734 = getelementptr inbounds %struct.op, %struct.op* %588, i32 0, i32 0
  %589 = load %struct.op*, %struct.op** %op_next734, align 8
  store %struct.op* %589, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.end.733, %if.end.726, %if.then.538, %cond.end.499, %if.end.438, %if.then.337, %if.end.236, %if.then.85, %if.then.30
  %590 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %590
}

declare i64 @Perl_utf8_length(i8*, i8*) #1

declare i8* @Perl_sv_recode_to_utf8(%struct.sv*, %struct.sv*) #1

declare void @Perl_sv_chop(%struct.sv*, i8*) #1

declare void @Perl_rxres_save(i8**, %struct.regexp*) #1

declare void @Perl_sv_catsv_flags(%struct.sv*, %struct.sv*, i32) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_grepwhile() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %items = alloca i32, align 4
  %gimme = alloca i32, align 4
  %targ = alloca %struct.sv*, align 8
  %tmp = alloca %struct.sv*, align 8
  %src = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** @PL_Sv, align 8
  %3 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool = icmp ne %struct.sv* %3, null
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %entry
  br label %cond.end.33

cond.false:                                       ; preds = %entry
  %4 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags, align 4
  %and = and i32 %5, 262144
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %cond.true.2, label %cond.false.10

cond.true.2:                                      ; preds = %cond.false
  %6 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  %7 = load i8*, i8** %sv_any, align 8
  %8 = bitcast i8* %7 to %struct.xpv*
  store %struct.xpv* %8, %struct.xpv** @PL_Xpv, align 8
  %tobool3 = icmp ne %struct.xpv* %8, null
  br i1 %tobool3, label %land.rhs, label %land.end.9

land.rhs:                                         ; preds = %cond.true.2
  %9 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %9, i32 0, i32 1
  %10 = load i64, i64* %xpv_cur, align 8
  %cmp = icmp ugt i64 %10, 1
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %11 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_cur4 = getelementptr inbounds %struct.xpv, %struct.xpv* %11, i32 0, i32 1
  %12 = load i64, i64* %xpv_cur4, align 8
  %tobool5 = icmp ne i64 %12, 0
  br i1 %tobool5, label %land.rhs.6, label %land.end

land.rhs.6:                                       ; preds = %lor.rhs
  %13 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %13, i32 0, i32 0
  %14 = load i8*, i8** %xpv_pv, align 8
  %15 = load i8, i8* %14, align 1
  %conv = sext i8 %15 to i32
  %cmp7 = icmp ne i32 %conv, 48
  br label %land.end

land.end:                                         ; preds = %land.rhs.6, %lor.rhs
  %16 = phi i1 [ false, %lor.rhs ], [ %cmp7, %land.rhs.6 ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %land.rhs
  %17 = phi i1 [ true, %land.rhs ], [ %16, %land.end ]
  br label %land.end.9

land.end.9:                                       ; preds = %lor.end, %cond.true.2
  %18 = phi i1 [ false, %cond.true.2 ], [ %17, %lor.end ]
  %cond = select i1 %18, i32 1, i32 0
  br label %cond.end.31

cond.false.10:                                    ; preds = %cond.false
  %19 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %20, 65536
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %cond.true.14, label %cond.false.18

cond.true.14:                                     ; preds = %cond.false.10
  %21 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any15 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any15, align 8
  %23 = bitcast i8* %22 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %23, i32 0, i32 3
  %24 = load i64, i64* %xiv_iv, align 8
  %cmp16 = icmp ne i64 %24, 0
  %conv17 = zext i1 %cmp16 to i32
  br label %cond.end.29

cond.false.18:                                    ; preds = %cond.false.10
  %25 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %26, 131072
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %cond.true.22, label %cond.false.26

cond.true.22:                                     ; preds = %cond.false.18
  %27 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any23 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 0
  %28 = load i8*, i8** %sv_any23, align 8
  %29 = bitcast i8* %28 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %29, i32 0, i32 4
  %30 = load double, double* %xnv_nv, align 8
  %cmp24 = fcmp une double %30, 0.000000e+00
  %conv25 = zext i1 %cmp24 to i32
  br label %cond.end

cond.false.26:                                    ; preds = %cond.false.18
  %31 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call = call signext i8 @Perl_sv_2bool(%struct.sv* %31)
  %conv27 = sext i8 %call to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false.26, %cond.true.22
  %cond28 = phi i32 [ %conv25, %cond.true.22 ], [ %conv27, %cond.false.26 ]
  br label %cond.end.29

cond.end.29:                                      ; preds = %cond.end, %cond.true.14
  %cond30 = phi i32 [ %conv17, %cond.true.14 ], [ %cond28, %cond.end ]
  br label %cond.end.31

cond.end.31:                                      ; preds = %cond.end.29, %land.end.9
  %cond32 = phi i32 [ %cond, %land.end.9 ], [ %cond30, %cond.end.29 ]
  br label %cond.end.33

cond.end.33:                                      ; preds = %cond.end.31, %cond.true
  %cond34 = phi i32 [ 0, %cond.true ], [ %cond32, %cond.end.31 ]
  %tobool35 = icmp ne i32 %cond34, 0
  br i1 %tobool35, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.33
  %32 = load i32*, i32** @PL_markstack_ptr, align 8
  %33 = load i32, i32* %32, align 4
  %idxprom = sext i32 %33 to i64
  %34 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %34, i64 %idxprom
  %35 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  %36 = load i32*, i32** @PL_markstack_ptr, align 8
  %arrayidx36 = getelementptr inbounds i32, i32* %36, i64 -1
  %37 = load i32, i32* %arrayidx36, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %arrayidx36, align 4
  %idxprom37 = sext i32 %37 to i64
  %38 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %arrayidx38 = getelementptr inbounds %struct.sv*, %struct.sv** %38, i64 %idxprom37
  store %struct.sv* %35, %struct.sv** %arrayidx38, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end.33
  %39 = load i32*, i32** @PL_markstack_ptr, align 8
  %40 = load i32, i32* %39, align 4
  %inc39 = add nsw i32 %40, 1
  store i32 %inc39, i32* %39, align 4
  call void @Perl_pop_scope()
  %41 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %42 = load i32*, i32** @PL_markstack_ptr, align 8
  %43 = load i32, i32* %42, align 4
  %idx.ext = sext i32 %43 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %41, i64 %idx.ext
  %44 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp40 = icmp ugt %struct.sv** %add.ptr, %44
  br i1 %cmp40, label %if.then.42, label %if.else.100

if.then.42:                                       ; preds = %if.end
  %45 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %45, i32 0, i32 6
  %46 = load i8, i8* %op_flags, align 1
  %conv43 = zext i8 %46 to i32
  %and44 = and i32 %conv43, 3
  %cmp45 = icmp eq i32 %and44, 1
  br i1 %cmp45, label %cond.true.47, label %cond.false.48

cond.true.47:                                     ; preds = %if.then.42
  br label %cond.end.68

cond.false.48:                                    ; preds = %if.then.42
  %47 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags49 = getelementptr inbounds %struct.op, %struct.op* %47, i32 0, i32 6
  %48 = load i8, i8* %op_flags49, align 1
  %conv50 = zext i8 %48 to i32
  %and51 = and i32 %conv50, 3
  %cmp52 = icmp eq i32 %and51, 2
  br i1 %cmp52, label %cond.true.54, label %cond.false.55

cond.true.54:                                     ; preds = %cond.false.48
  br label %cond.end.66

cond.false.55:                                    ; preds = %cond.false.48
  %49 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags56 = getelementptr inbounds %struct.op, %struct.op* %49, i32 0, i32 6
  %50 = load i8, i8* %op_flags56, align 1
  %conv57 = zext i8 %50 to i32
  %and58 = and i32 %conv57, 3
  %cmp59 = icmp eq i32 %and58, 3
  br i1 %cmp59, label %cond.true.61, label %cond.false.62

cond.true.61:                                     ; preds = %cond.false.55
  br label %cond.end.64

cond.false.62:                                    ; preds = %cond.false.55
  %call63 = call i32 @Perl_block_gimme()
  br label %cond.end.64

cond.end.64:                                      ; preds = %cond.false.62, %cond.true.61
  %cond65 = phi i32 [ 1, %cond.true.61 ], [ %call63, %cond.false.62 ]
  br label %cond.end.66

cond.end.66:                                      ; preds = %cond.end.64, %cond.true.54
  %cond67 = phi i32 [ 0, %cond.true.54 ], [ %cond65, %cond.end.64 ]
  br label %cond.end.68

cond.end.68:                                      ; preds = %cond.end.66, %cond.true.47
  %cond69 = phi i32 [ 128, %cond.true.47 ], [ %cond67, %cond.end.66 ]
  store i32 %cond69, i32* %gimme, align 4
  call void @Perl_pop_scope()
  %51 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr70 = getelementptr inbounds i32, i32* %51, i32 -1
  store i32* %incdec.ptr70, i32** @PL_markstack_ptr, align 8
  %52 = load i32, i32* %51, align 4
  %53 = load i32*, i32** @PL_markstack_ptr, align 8
  %54 = load i32, i32* %53, align 4
  %dec = add nsw i32 %54, -1
  store i32 %dec, i32* %53, align 4
  %55 = load i32*, i32** @PL_markstack_ptr, align 8
  %arrayidx71 = getelementptr inbounds i32, i32* %55, i64 -1
  %56 = load i32, i32* %arrayidx71, align 4
  %sub = sub nsw i32 %dec, %56
  store i32 %sub, i32* %items, align 4
  %57 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr72 = getelementptr inbounds i32, i32* %57, i32 -1
  store i32* %incdec.ptr72, i32** @PL_markstack_ptr, align 8
  %58 = load i32, i32* %57, align 4
  %59 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %60 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr73 = getelementptr inbounds i32, i32* %60, i32 -1
  store i32* %incdec.ptr73, i32** @PL_markstack_ptr, align 8
  %61 = load i32, i32* %60, align 4
  %idx.ext74 = sext i32 %61 to i64
  %add.ptr75 = getelementptr inbounds %struct.sv*, %struct.sv** %59, i64 %idx.ext74
  store %struct.sv** %add.ptr75, %struct.sv*** %sp, align 8
  %62 = load i32, i32* %gimme, align 4
  %cmp76 = icmp eq i32 %62, 0
  br i1 %cmp76, label %if.then.78, label %if.else

if.then.78:                                       ; preds = %cond.end.68
  %63 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %63, i32 0, i32 3
  %64 = load i64, i64* %op_targ, align 8
  %65 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %arrayidx79 = getelementptr inbounds %struct.sv*, %struct.sv** %65, i64 %64
  %66 = load %struct.sv*, %struct.sv** %arrayidx79, align 8
  store %struct.sv* %66, %struct.sv** %targ, align 8
  %67 = load %struct.sv*, %struct.sv** %targ, align 8
  %68 = load i32, i32* %items, align 4
  %conv80 = sext i32 %68 to i64
  call void @Perl_sv_setiv(%struct.sv* %67, i64 %conv80)
  %69 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags81 = getelementptr inbounds %struct.sv, %struct.sv* %69, i32 0, i32 2
  %70 = load i32, i32* %sv_flags81, align 4
  %and82 = and i32 %70, 16384
  %tobool83 = icmp ne i32 %and82, 0
  br i1 %tobool83, label %if.then.84, label %if.end.86

if.then.84:                                       ; preds = %if.then.78
  %71 = load %struct.sv*, %struct.sv** %targ, align 8
  %call85 = call i32 @Perl_mg_set(%struct.sv* %71)
  br label %if.end.86

if.end.86:                                        ; preds = %if.then.84, %if.then.78
  %72 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %73 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %72 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %73 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp87 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp87, label %if.then.89, label %if.end.91

if.then.89:                                       ; preds = %if.end.86
  %74 = load %struct.sv**, %struct.sv*** %sp, align 8
  %75 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call90 = call %struct.sv** @Perl_stack_grow(%struct.sv** %74, %struct.sv** %75, i32 1)
  store %struct.sv** %call90, %struct.sv*** %sp, align 8
  br label %if.end.91

if.end.91:                                        ; preds = %if.then.89, %if.end.86
  %76 = load %struct.sv*, %struct.sv** %targ, align 8
  %77 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr92 = getelementptr inbounds %struct.sv*, %struct.sv** %77, i32 1
  store %struct.sv** %incdec.ptr92, %struct.sv*** %sp, align 8
  store %struct.sv* %76, %struct.sv** %incdec.ptr92, align 8
  store %struct.sv* %76, %struct.sv** %tmp
  %78 = load %struct.sv*, %struct.sv** %tmp
  br label %if.end.99

if.else:                                          ; preds = %cond.end.68
  %79 = load i32, i32* %gimme, align 4
  %cmp93 = icmp eq i32 %79, 1
  br i1 %cmp93, label %if.then.95, label %if.end.98

if.then.95:                                       ; preds = %if.else
  %80 = load i32, i32* %items, align 4
  %81 = load %struct.sv**, %struct.sv*** %sp, align 8
  %idx.ext96 = sext i32 %80 to i64
  %add.ptr97 = getelementptr inbounds %struct.sv*, %struct.sv** %81, i64 %idx.ext96
  store %struct.sv** %add.ptr97, %struct.sv*** %sp, align 8
  br label %if.end.98

if.end.98:                                        ; preds = %if.then.95, %if.else
  br label %if.end.99

if.end.99:                                        ; preds = %if.end.98, %if.end.91
  %82 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %82, %struct.sv*** @PL_stack_sp, align 8
  %83 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %83, i32 0, i32 0
  %84 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %84, %struct.op** %retval
  br label %return

if.else.100:                                      ; preds = %if.end
  call void @Perl_push_scope()
  call void @Perl_save_vptr(i8* bitcast (%struct.pmop** @PL_curpm to i8*))
  %85 = load i32*, i32** @PL_markstack_ptr, align 8
  %86 = load i32, i32* %85, align 4
  %idxprom102 = sext i32 %86 to i64
  %87 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %arrayidx103 = getelementptr inbounds %struct.sv*, %struct.sv** %87, i64 %idxprom102
  %88 = load %struct.sv*, %struct.sv** %arrayidx103, align 8
  store %struct.sv* %88, %struct.sv** %src, align 8
  %89 = load %struct.sv*, %struct.sv** %src, align 8
  %sv_flags104 = getelementptr inbounds %struct.sv, %struct.sv* %89, i32 0, i32 2
  %90 = load i32, i32* %sv_flags104, align 4
  %and105 = and i32 %90, -2049
  store i32 %and105, i32* %sv_flags104, align 4
  %91 = load %struct.sv*, %struct.sv** %src, align 8
  %92 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any106 = getelementptr inbounds %struct.gv, %struct.gv* %92, i32 0, i32 0
  %93 = load %struct.xpvgv*, %struct.xpvgv** %sv_any106, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %93, i32 0, i32 7
  %94 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %94, i32 0, i32 0
  store %struct.sv* %91, %struct.sv** %gp_sv, align 8
  %95 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %95, %struct.sv*** @PL_stack_sp, align 8
  %96 = load %struct.op*, %struct.op** @PL_op, align 8
  %97 = bitcast %struct.op* %96 to %struct.logop*
  %op_other = getelementptr inbounds %struct.logop, %struct.logop* %97, i32 0, i32 9
  %98 = load %struct.op*, %struct.op** %op_other, align 8
  store %struct.op* %98, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.else.100, %if.end.99
  %99 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %99
}

declare void @Perl_save_vptr(i8*) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_leavesub() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %newsp = alloca %struct.sv**, align 8
  %newpm = alloca %struct.pmop*, align 8
  %gimme = alloca i32, align 4
  %cx = alloca %struct.context*, align 8
  %sv = alloca %struct.sv*, align 8
  %markoff = alloca i32, align 4
  %tmp = alloca %struct.av*, align 8
  %fill = alloca i64, align 8
  %tmp191 = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %1, i32 0, i32 2
  %2 = load i32, i32* %si_cxix, align 4
  %dec = add nsw i32 %2, -1
  store i32 %dec, i32* %si_cxix, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %3, i32 0, i32 1
  %4 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %4, i64 %idxprom
  store %struct.context* %arrayidx, %struct.context** %cx, align 8
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %6 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %6, i32 0, i32 1
  %cx_blk = bitcast %union.anon.0* %cx_u to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 0
  %7 = load i32, i32* %blku_oldsp, align 4
  %idx.ext = sext i32 %7 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %newsp, align 8
  %8 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u1 = getelementptr inbounds %struct.context, %struct.context* %8, i32 0, i32 1
  %cx_blk2 = bitcast %union.anon.0* %cx_u1 to %struct.block*
  %blku_oldcop = getelementptr inbounds %struct.block, %struct.block* %cx_blk2, i32 0, i32 1
  %9 = load %struct.cop*, %struct.cop** %blku_oldcop, align 8
  store volatile %struct.cop* %9, %struct.cop** @PL_curcop, align 8
  %10 = load i32*, i32** @PL_markstack, align 8
  %11 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u3 = getelementptr inbounds %struct.context, %struct.context* %11, i32 0, i32 1
  %cx_blk4 = bitcast %union.anon.0* %cx_u3 to %struct.block*
  %blku_oldmarksp = getelementptr inbounds %struct.block, %struct.block* %cx_blk4, i32 0, i32 3
  %12 = load i32, i32* %blku_oldmarksp, align 4
  %idx.ext5 = sext i32 %12 to i64
  %add.ptr6 = getelementptr inbounds i32, i32* %10, i64 %idx.ext5
  store i32* %add.ptr6, i32** @PL_markstack_ptr, align 8
  %13 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u7 = getelementptr inbounds %struct.context, %struct.context* %13, i32 0, i32 1
  %cx_blk8 = bitcast %union.anon.0* %cx_u7 to %struct.block*
  %blku_oldscopesp = getelementptr inbounds %struct.block, %struct.block* %cx_blk8, i32 0, i32 4
  %14 = load i32, i32* %blku_oldscopesp, align 4
  store i32 %14, i32* @PL_scopestack_ix, align 4
  %15 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u9 = getelementptr inbounds %struct.context, %struct.context* %15, i32 0, i32 1
  %cx_blk10 = bitcast %union.anon.0* %cx_u9 to %struct.block*
  %blku_oldretsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk10, i32 0, i32 2
  %16 = load i32, i32* %blku_oldretsp, align 4
  store i32 %16, i32* @PL_retstack_ix, align 4
  %17 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u11 = getelementptr inbounds %struct.context, %struct.context* %17, i32 0, i32 1
  %cx_blk12 = bitcast %union.anon.0* %cx_u11 to %struct.block*
  %blku_oldpm = getelementptr inbounds %struct.block, %struct.block* %cx_blk12, i32 0, i32 5
  %18 = load %struct.pmop*, %struct.pmop** %blku_oldpm, align 8
  store %struct.pmop* %18, %struct.pmop** %newpm, align 8
  %19 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u13 = getelementptr inbounds %struct.context, %struct.context* %19, i32 0, i32 1
  %cx_blk14 = bitcast %union.anon.0* %cx_u13 to %struct.block*
  %blku_gimme = getelementptr inbounds %struct.block, %struct.block* %cx_blk14, i32 0, i32 6
  %20 = load i8, i8* %blku_gimme, align 1
  %conv = zext i8 %20 to i32
  store i32 %conv, i32* %gimme, align 4
  %21 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix15 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %21, i32 0, i32 2
  %22 = load i32, i32* %si_cxix15, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %si_cxix15, align 4
  store i8 0, i8* @PL_tainted, align 1
  %23 = load i32, i32* %gimme, align 4
  %cmp = icmp eq i32 %23, 0
  br i1 %cmp, label %if.then, label %if.else.72

if.then:                                          ; preds = %entry
  %24 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %add.ptr17 = getelementptr inbounds %struct.sv*, %struct.sv** %24, i64 1
  store %struct.sv** %add.ptr17, %struct.sv*** %mark, align 8
  %25 = load %struct.sv**, %struct.sv*** %mark, align 8
  %26 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp18 = icmp ule %struct.sv** %25, %26
  br i1 %cmp18, label %if.then.20, label %if.else.58

if.then.20:                                       ; preds = %if.then
  %27 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u21 = getelementptr inbounds %struct.context, %struct.context* %27, i32 0, i32 1
  %cx_blk22 = bitcast %union.anon.0* %cx_u21 to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk22, i32 0, i32 7
  %blku_sub = bitcast %union.anon.1* %blk_u to %struct.block_sub*
  %cv = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub, i32 0, i32 0
  %28 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool = icmp ne %struct.cv* %28, null
  br i1 %tobool, label %land.lhs.true, label %if.else.52

land.lhs.true:                                    ; preds = %if.then.20
  %29 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u23 = getelementptr inbounds %struct.context, %struct.context* %29, i32 0, i32 1
  %cx_blk24 = bitcast %union.anon.0* %cx_u23 to %struct.block*
  %blk_u25 = getelementptr inbounds %struct.block, %struct.block* %cx_blk24, i32 0, i32 7
  %blku_sub26 = bitcast %union.anon.1* %blk_u25 to %struct.block_sub*
  %cv27 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub26, i32 0, i32 0
  %30 = load %struct.cv*, %struct.cv** %cv27, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %30, i32 0, i32 0
  %31 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %xcv_depth = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %31, i32 0, i32 14
  %32 = load i64, i64* %xcv_depth, align 8
  %cmp28 = icmp sgt i64 %32, 1
  br i1 %cmp28, label %if.then.30, label %if.else.52

if.then.30:                                       ; preds = %land.lhs.true
  %33 = load %struct.sv**, %struct.sv*** %sp, align 8
  %34 = load %struct.sv*, %struct.sv** %33, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags, align 4
  %and = and i32 %35, 2048
  %tobool31 = icmp ne i32 %and, 0
  br i1 %tobool31, label %if.then.32, label %if.else

if.then.32:                                       ; preds = %if.then.30
  %36 = load %struct.sv**, %struct.sv*** %sp, align 8
  %37 = load %struct.sv*, %struct.sv** %36, align 8
  store %struct.sv* %37, %struct.sv** @PL_Sv, align 8
  %38 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool33 = icmp ne %struct.sv* %38, null
  br i1 %tobool33, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.32
  %39 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 1
  %40 = load i32, i32* %sv_refcnt, align 4
  %inc34 = add i32 %40, 1
  store i32 %inc34, i32* %sv_refcnt, align 4
  %tobool35 = icmp ne i32 %inc34, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.32
  %41 = phi i1 [ false, %if.then.32 ], [ %tobool35, %land.rhs ]
  %land.ext = zext i1 %41 to i32
  %42 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %43 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %42, %struct.sv** %43, align 8
  %44 = load i32, i32* @PL_tmps_ix, align 4
  %45 = load i32, i32* @PL_tmps_floor, align 4
  %cmp36 = icmp sgt i32 %44, %45
  br i1 %cmp36, label %if.then.38, label %if.end

if.then.38:                                       ; preds = %land.end
  call void @Perl_free_tmps()
  br label %if.end

if.end:                                           ; preds = %if.then.38, %land.end
  %46 = load %struct.sv**, %struct.sv*** %mark, align 8
  %47 = load %struct.sv*, %struct.sv** %46, align 8
  %call = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %47)
  br label %if.end.51

if.else:                                          ; preds = %if.then.30
  %48 = load %struct.sv**, %struct.sv*** %sp, align 8
  %49 = load %struct.sv*, %struct.sv** %48, align 8
  store %struct.sv* %49, %struct.sv** @PL_Sv, align 8
  %50 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool39 = icmp ne %struct.sv* %50, null
  br i1 %tobool39, label %land.rhs.40, label %land.end.44

land.rhs.40:                                      ; preds = %if.else
  %51 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt41 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 1
  %52 = load i32, i32* %sv_refcnt41, align 4
  %inc42 = add i32 %52, 1
  store i32 %inc42, i32* %sv_refcnt41, align 4
  %tobool43 = icmp ne i32 %inc42, 0
  br label %land.end.44

land.end.44:                                      ; preds = %land.rhs.40, %if.else
  %53 = phi i1 [ false, %if.else ], [ %tobool43, %land.rhs.40 ]
  %land.ext45 = zext i1 %53 to i32
  %54 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  store %struct.sv* %54, %struct.sv** %sv, align 8
  %55 = load i32, i32* @PL_tmps_ix, align 4
  %56 = load i32, i32* @PL_tmps_floor, align 4
  %cmp46 = icmp sgt i32 %55, %56
  br i1 %cmp46, label %if.then.48, label %if.end.49

if.then.48:                                       ; preds = %land.end.44
  call void @Perl_free_tmps()
  br label %if.end.49

if.end.49:                                        ; preds = %if.then.48, %land.end.44
  %57 = load %struct.sv*, %struct.sv** %sv, align 8
  %call50 = call %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %57)
  %58 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %call50, %struct.sv** %58, align 8
  %59 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_free(%struct.sv* %59)
  br label %if.end.51

if.end.51:                                        ; preds = %if.end.49, %if.end
  br label %if.end.57

if.else.52:                                       ; preds = %land.lhs.true, %if.then.20
  %60 = load %struct.sv**, %struct.sv*** %sp, align 8
  %61 = load %struct.sv*, %struct.sv** %60, align 8
  %sv_flags53 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 2
  %62 = load i32, i32* %sv_flags53, align 4
  %and54 = and i32 %62, 2048
  %tobool55 = icmp ne i32 %and54, 0
  br i1 %tobool55, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else.52
  %63 = load %struct.sv**, %struct.sv*** %sp, align 8
  %64 = load %struct.sv*, %struct.sv** %63, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else.52
  %65 = load %struct.sv**, %struct.sv*** %sp, align 8
  %66 = load %struct.sv*, %struct.sv** %65, align 8
  %call56 = call %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %66)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %64, %cond.true ], [ %call56, %cond.false ]
  %67 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %cond, %struct.sv** %67, align 8
  br label %if.end.57

if.end.57:                                        ; preds = %cond.end, %if.end.51
  br label %if.end.71

if.else.58:                                       ; preds = %if.then
  %68 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %69 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %68 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %69 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp59 = icmp slt i64 %sub.ptr.div, 0
  br i1 %cmp59, label %if.then.61, label %if.end.70

if.then.61:                                       ; preds = %if.else.58
  %70 = load %struct.sv**, %struct.sv*** %mark, align 8
  %71 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast62 = ptrtoint %struct.sv** %70 to i64
  %sub.ptr.rhs.cast63 = ptrtoint %struct.sv** %71 to i64
  %sub.ptr.sub64 = sub i64 %sub.ptr.lhs.cast62, %sub.ptr.rhs.cast63
  %sub.ptr.div65 = sdiv exact i64 %sub.ptr.sub64, 8
  %conv66 = trunc i64 %sub.ptr.div65 to i32
  store i32 %conv66, i32* %markoff, align 4
  %72 = load %struct.sv**, %struct.sv*** %sp, align 8
  %73 = load %struct.sv**, %struct.sv*** %mark, align 8
  %call67 = call %struct.sv** @Perl_stack_grow(%struct.sv** %72, %struct.sv** %73, i32 0)
  store %struct.sv** %call67, %struct.sv*** %sp, align 8
  %74 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %75 = load i32, i32* %markoff, align 4
  %idx.ext68 = sext i32 %75 to i64
  %add.ptr69 = getelementptr inbounds %struct.sv*, %struct.sv** %74, i64 %idx.ext68
  store %struct.sv** %add.ptr69, %struct.sv*** %mark, align 8
  br label %if.end.70

if.end.70:                                        ; preds = %if.then.61, %if.else.58
  %76 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %76, align 8
  br label %if.end.71

if.end.71:                                        ; preds = %if.end.70, %if.end.57
  %77 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv** %77, %struct.sv*** %sp, align 8
  br label %if.end.86

if.else.72:                                       ; preds = %entry
  %78 = load i32, i32* %gimme, align 4
  %cmp73 = icmp eq i32 %78, 1
  br i1 %cmp73, label %if.then.75, label %if.end.85

if.then.75:                                       ; preds = %if.else.72
  %79 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %add.ptr76 = getelementptr inbounds %struct.sv*, %struct.sv** %79, i64 1
  store %struct.sv** %add.ptr76, %struct.sv*** %mark, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.75
  %80 = load %struct.sv**, %struct.sv*** %mark, align 8
  %81 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp77 = icmp ule %struct.sv** %80, %81
  br i1 %cmp77, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %82 = load %struct.sv**, %struct.sv*** %mark, align 8
  %83 = load %struct.sv*, %struct.sv** %82, align 8
  %sv_flags79 = getelementptr inbounds %struct.sv, %struct.sv* %83, i32 0, i32 2
  %84 = load i32, i32* %sv_flags79, align 4
  %and80 = and i32 %84, 2048
  %tobool81 = icmp ne i32 %and80, 0
  br i1 %tobool81, label %if.end.84, label %if.then.82

if.then.82:                                       ; preds = %for.body
  %85 = load %struct.sv**, %struct.sv*** %mark, align 8
  %86 = load %struct.sv*, %struct.sv** %85, align 8
  %call83 = call %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %86)
  %87 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %call83, %struct.sv** %87, align 8
  store i8 0, i8* @PL_tainted, align 1
  br label %if.end.84

if.end.84:                                        ; preds = %if.then.82, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.84
  %88 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %88, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %mark, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.85

if.end.85:                                        ; preds = %for.end, %if.else.72
  br label %if.end.86

if.end.86:                                        ; preds = %if.end.85, %if.end.71
  %89 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %89, %struct.sv*** @PL_stack_sp, align 8
  call void @Perl_pop_scope()
  %90 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix87 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %90, i32 0, i32 2
  %91 = load i32, i32* %si_cxix87, align 4
  %dec88 = add nsw i32 %91, -1
  store i32 %dec88, i32* %si_cxix87, align 4
  %92 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u89 = getelementptr inbounds %struct.context, %struct.context* %92, i32 0, i32 1
  %cx_blk90 = bitcast %union.anon.0* %cx_u89 to %struct.block*
  %blk_u91 = getelementptr inbounds %struct.block, %struct.block* %cx_blk90, i32 0, i32 7
  %blku_sub92 = bitcast %union.anon.1* %blk_u91 to %struct.block_sub*
  %hasargs = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub92, i32 0, i32 6
  %93 = load i8, i8* %hasargs, align 1
  %tobool93 = icmp ne i8 %93, 0
  br i1 %tobool93, label %if.then.94, label %if.end.200

if.then.94:                                       ; preds = %if.end.86
  %94 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any95 = getelementptr inbounds %struct.gv, %struct.gv* %94, i32 0, i32 0
  %95 = load %struct.xpvgv*, %struct.xpvgv** %sv_any95, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %95, i32 0, i32 7
  %96 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %96, i32 0, i32 4
  %97 = load %struct.av*, %struct.av** %gp_av, align 8
  %98 = bitcast %struct.av* %97 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %98)
  %99 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u96 = getelementptr inbounds %struct.context, %struct.context* %99, i32 0, i32 1
  %cx_blk97 = bitcast %union.anon.0* %cx_u96 to %struct.block*
  %blk_u98 = getelementptr inbounds %struct.block, %struct.block* %cx_blk97, i32 0, i32 7
  %blku_sub99 = bitcast %union.anon.1* %blk_u98 to %struct.block_sub*
  %savearray = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub99, i32 0, i32 3
  %100 = load %struct.av*, %struct.av** %savearray, align 8
  %101 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any100 = getelementptr inbounds %struct.gv, %struct.gv* %101, i32 0, i32 0
  %102 = load %struct.xpvgv*, %struct.xpvgv** %sv_any100, align 8
  %xgv_gp101 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %102, i32 0, i32 7
  %103 = load %struct.gp*, %struct.gp** %xgv_gp101, align 8
  %gp_av102 = getelementptr inbounds %struct.gp, %struct.gp* %103, i32 0, i32 4
  store %struct.av* %100, %struct.av** %gp_av102, align 8
  store %struct.av* %100, %struct.av** %tmp
  %104 = load %struct.av*, %struct.av** %tmp
  %105 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u103 = getelementptr inbounds %struct.context, %struct.context* %105, i32 0, i32 1
  %cx_blk104 = bitcast %union.anon.0* %cx_u103 to %struct.block*
  %blk_u105 = getelementptr inbounds %struct.block, %struct.block* %cx_blk104, i32 0, i32 7
  %blku_sub106 = bitcast %union.anon.1* %blk_u105 to %struct.block_sub*
  %argarray = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub106, i32 0, i32 4
  %106 = load %struct.av*, %struct.av** %argarray, align 8
  %sv_any107 = getelementptr inbounds %struct.av, %struct.av* %106, i32 0, i32 0
  %107 = load %struct.xpvav*, %struct.xpvav** %sv_any107, align 8
  %xav_flags = getelementptr inbounds %struct.xpvav, %struct.xpvav* %107, i32 0, i32 9
  %108 = load i8, i8* %xav_flags, align 1
  %conv108 = zext i8 %108 to i32
  %and109 = and i32 %conv108, 1
  %tobool110 = icmp ne i32 %and109, 0
  br i1 %tobool110, label %if.then.111, label %if.else.154

if.then.111:                                      ; preds = %if.then.94
  %109 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u113 = getelementptr inbounds %struct.context, %struct.context* %109, i32 0, i32 1
  %cx_blk114 = bitcast %union.anon.0* %cx_u113 to %struct.block*
  %blk_u115 = getelementptr inbounds %struct.block, %struct.block* %cx_blk114, i32 0, i32 7
  %blku_sub116 = bitcast %union.anon.1* %blk_u115 to %struct.block_sub*
  %argarray117 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub116, i32 0, i32 4
  %110 = load %struct.av*, %struct.av** %argarray117, align 8
  %sv_any118 = getelementptr inbounds %struct.av, %struct.av* %110, i32 0, i32 0
  %111 = load %struct.xpvav*, %struct.xpvav** %sv_any118, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %111, i32 0, i32 1
  %112 = load i64, i64* %xav_fill, align 8
  store i64 %112, i64* %fill, align 8
  %113 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u119 = getelementptr inbounds %struct.context, %struct.context* %113, i32 0, i32 1
  %cx_blk120 = bitcast %union.anon.0* %cx_u119 to %struct.block*
  %blk_u121 = getelementptr inbounds %struct.block, %struct.block* %cx_blk120, i32 0, i32 7
  %blku_sub122 = bitcast %union.anon.1* %blk_u121 to %struct.block_sub*
  %argarray123 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub122, i32 0, i32 4
  %114 = load %struct.av*, %struct.av** %argarray123, align 8
  %115 = bitcast %struct.av* %114 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %115)
  %call124 = call %struct.av* @Perl_newAV()
  %116 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u125 = getelementptr inbounds %struct.context, %struct.context* %116, i32 0, i32 1
  %cx_blk126 = bitcast %union.anon.0* %cx_u125 to %struct.block*
  %blk_u127 = getelementptr inbounds %struct.block, %struct.block* %cx_blk126, i32 0, i32 7
  %blku_sub128 = bitcast %union.anon.1* %blk_u127 to %struct.block_sub*
  %argarray129 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub128, i32 0, i32 4
  store %struct.av* %call124, %struct.av** %argarray129, align 8
  %117 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u130 = getelementptr inbounds %struct.context, %struct.context* %117, i32 0, i32 1
  %cx_blk131 = bitcast %union.anon.0* %cx_u130 to %struct.block*
  %blk_u132 = getelementptr inbounds %struct.block, %struct.block* %cx_blk131, i32 0, i32 7
  %blku_sub133 = bitcast %union.anon.1* %blk_u132 to %struct.block_sub*
  %argarray134 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub133, i32 0, i32 4
  %118 = load %struct.av*, %struct.av** %argarray134, align 8
  %119 = load i64, i64* %fill, align 8
  %conv135 = trunc i64 %119 to i32
  call void @Perl_av_extend(%struct.av* %118, i32 %conv135)
  %120 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u136 = getelementptr inbounds %struct.context, %struct.context* %120, i32 0, i32 1
  %cx_blk137 = bitcast %union.anon.0* %cx_u136 to %struct.block*
  %blk_u138 = getelementptr inbounds %struct.block, %struct.block* %cx_blk137, i32 0, i32 7
  %blku_sub139 = bitcast %union.anon.1* %blk_u138 to %struct.block_sub*
  %argarray140 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub139, i32 0, i32 4
  %121 = load %struct.av*, %struct.av** %argarray140, align 8
  %sv_any141 = getelementptr inbounds %struct.av, %struct.av* %121, i32 0, i32 0
  %122 = load %struct.xpvav*, %struct.xpvav** %sv_any141, align 8
  %xav_flags142 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %122, i32 0, i32 9
  store i8 2, i8* %xav_flags142, align 1
  %123 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u143 = getelementptr inbounds %struct.context, %struct.context* %123, i32 0, i32 1
  %cx_blk144 = bitcast %union.anon.0* %cx_u143 to %struct.block*
  %blk_u145 = getelementptr inbounds %struct.block, %struct.block* %cx_blk144, i32 0, i32 7
  %blku_sub146 = bitcast %union.anon.1* %blk_u145 to %struct.block_sub*
  %argarray147 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub146, i32 0, i32 4
  %124 = load %struct.av*, %struct.av** %argarray147, align 8
  %125 = bitcast %struct.av* %124 to %struct.sv*
  %126 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u148 = getelementptr inbounds %struct.context, %struct.context* %126, i32 0, i32 1
  %cx_blk149 = bitcast %union.anon.0* %cx_u148 to %struct.block*
  %blk_u150 = getelementptr inbounds %struct.block, %struct.block* %cx_blk149, i32 0, i32 7
  %blku_sub151 = bitcast %union.anon.1* %blk_u150 to %struct.block_sub*
  %oldcomppad = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub151, i32 0, i32 8
  %127 = load %struct.av*, %struct.av** %oldcomppad, align 8
  %sv_any152 = getelementptr inbounds %struct.av, %struct.av* %127, i32 0, i32 0
  %128 = load %struct.xpvav*, %struct.xpvav** %sv_any152, align 8
  %xav_array = getelementptr inbounds %struct.xpvav, %struct.xpvav* %128, i32 0, i32 0
  %129 = load i8*, i8** %xav_array, align 8
  %130 = bitcast i8* %129 to %struct.sv**
  %arrayidx153 = getelementptr inbounds %struct.sv*, %struct.sv** %130, i64 0
  store %struct.sv* %125, %struct.sv** %arrayidx153, align 8
  br label %if.end.199

if.else.154:                                      ; preds = %if.then.94
  %131 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u155 = getelementptr inbounds %struct.context, %struct.context* %131, i32 0, i32 1
  %cx_blk156 = bitcast %union.anon.0* %cx_u155 to %struct.block*
  %blk_u157 = getelementptr inbounds %struct.block, %struct.block* %cx_blk156, i32 0, i32 7
  %blku_sub158 = bitcast %union.anon.1* %blk_u157 to %struct.block_sub*
  %argarray159 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub158, i32 0, i32 4
  %132 = load %struct.av*, %struct.av** %argarray159, align 8
  %sv_any160 = getelementptr inbounds %struct.av, %struct.av* %132, i32 0, i32 0
  %133 = load %struct.xpvav*, %struct.xpvav** %sv_any160, align 8
  %xav_array161 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %133, i32 0, i32 0
  %134 = load i8*, i8** %xav_array161, align 8
  %135 = bitcast i8* %134 to %struct.sv**
  %136 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u162 = getelementptr inbounds %struct.context, %struct.context* %136, i32 0, i32 1
  %cx_blk163 = bitcast %union.anon.0* %cx_u162 to %struct.block*
  %blk_u164 = getelementptr inbounds %struct.block, %struct.block* %cx_blk163, i32 0, i32 7
  %blku_sub165 = bitcast %union.anon.1* %blk_u164 to %struct.block_sub*
  %argarray166 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub165, i32 0, i32 4
  %137 = load %struct.av*, %struct.av** %argarray166, align 8
  %sv_any167 = getelementptr inbounds %struct.av, %struct.av* %137, i32 0, i32 0
  %138 = load %struct.xpvav*, %struct.xpvav** %sv_any167, align 8
  %xav_alloc = getelementptr inbounds %struct.xpvav, %struct.xpvav* %138, i32 0, i32 7
  %139 = load %struct.sv**, %struct.sv*** %xav_alloc, align 8
  %sub.ptr.lhs.cast168 = ptrtoint %struct.sv** %135 to i64
  %sub.ptr.rhs.cast169 = ptrtoint %struct.sv** %139 to i64
  %sub.ptr.sub170 = sub i64 %sub.ptr.lhs.cast168, %sub.ptr.rhs.cast169
  %sub.ptr.div171 = sdiv exact i64 %sub.ptr.sub170, 8
  %140 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u172 = getelementptr inbounds %struct.context, %struct.context* %140, i32 0, i32 1
  %cx_blk173 = bitcast %union.anon.0* %cx_u172 to %struct.block*
  %blk_u174 = getelementptr inbounds %struct.block, %struct.block* %cx_blk173, i32 0, i32 7
  %blku_sub175 = bitcast %union.anon.1* %blk_u174 to %struct.block_sub*
  %argarray176 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub175, i32 0, i32 4
  %141 = load %struct.av*, %struct.av** %argarray176, align 8
  %sv_any177 = getelementptr inbounds %struct.av, %struct.av* %141, i32 0, i32 0
  %142 = load %struct.xpvav*, %struct.xpvav** %sv_any177, align 8
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %142, i32 0, i32 2
  %143 = load i64, i64* %xav_max, align 8
  %add = add nsw i64 %143, %sub.ptr.div171
  store i64 %add, i64* %xav_max, align 8
  %144 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u178 = getelementptr inbounds %struct.context, %struct.context* %144, i32 0, i32 1
  %cx_blk179 = bitcast %union.anon.0* %cx_u178 to %struct.block*
  %blk_u180 = getelementptr inbounds %struct.block, %struct.block* %cx_blk179, i32 0, i32 7
  %blku_sub181 = bitcast %union.anon.1* %blk_u180 to %struct.block_sub*
  %argarray182 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub181, i32 0, i32 4
  %145 = load %struct.av*, %struct.av** %argarray182, align 8
  %sv_any183 = getelementptr inbounds %struct.av, %struct.av* %145, i32 0, i32 0
  %146 = load %struct.xpvav*, %struct.xpvav** %sv_any183, align 8
  %xav_alloc184 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %146, i32 0, i32 7
  %147 = load %struct.sv**, %struct.sv*** %xav_alloc184, align 8
  %148 = bitcast %struct.sv** %147 to i8*
  %149 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u185 = getelementptr inbounds %struct.context, %struct.context* %149, i32 0, i32 1
  %cx_blk186 = bitcast %union.anon.0* %cx_u185 to %struct.block*
  %blk_u187 = getelementptr inbounds %struct.block, %struct.block* %cx_blk186, i32 0, i32 7
  %blku_sub188 = bitcast %union.anon.1* %blk_u187 to %struct.block_sub*
  %argarray189 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub188, i32 0, i32 4
  %150 = load %struct.av*, %struct.av** %argarray189, align 8
  %sv_any190 = getelementptr inbounds %struct.av, %struct.av* %150, i32 0, i32 0
  %151 = load %struct.xpvav*, %struct.xpvav** %sv_any190, align 8
  %152 = bitcast %struct.xpvav* %151 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %152, i32 0, i32 0
  store i8* %148, i8** %xpv_pv, align 8
  %153 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u192 = getelementptr inbounds %struct.context, %struct.context* %153, i32 0, i32 1
  %cx_blk193 = bitcast %union.anon.0* %cx_u192 to %struct.block*
  %blk_u194 = getelementptr inbounds %struct.block, %struct.block* %cx_blk193, i32 0, i32 7
  %blku_sub195 = bitcast %union.anon.1* %blk_u194 to %struct.block_sub*
  %argarray196 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub195, i32 0, i32 4
  %154 = load %struct.av*, %struct.av** %argarray196, align 8
  %sv_any197 = getelementptr inbounds %struct.av, %struct.av* %154, i32 0, i32 0
  %155 = load %struct.xpvav*, %struct.xpvav** %sv_any197, align 8
  %xav_fill198 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %155, i32 0, i32 1
  store i64 -1, i64* %xav_fill198, align 8
  store i64 -1, i64* %tmp191
  %156 = load i64, i64* %tmp191
  br label %if.end.199

if.end.199:                                       ; preds = %if.else.154, %if.then.111
  br label %if.end.200

if.end.200:                                       ; preds = %if.end.199, %if.end.86
  %157 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u201 = getelementptr inbounds %struct.context, %struct.context* %157, i32 0, i32 1
  %cx_blk202 = bitcast %union.anon.0* %cx_u201 to %struct.block*
  %blk_u203 = getelementptr inbounds %struct.block, %struct.block* %cx_blk202, i32 0, i32 7
  %blku_sub204 = bitcast %union.anon.1* %blk_u203 to %struct.block_sub*
  %cv205 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub204, i32 0, i32 0
  %158 = load %struct.cv*, %struct.cv** %cv205, align 8
  %159 = bitcast %struct.cv* %158 to %struct.sv*
  store %struct.sv* %159, %struct.sv** %sv, align 8
  %160 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool206 = icmp ne %struct.sv* %160, null
  br i1 %tobool206, label %land.lhs.true.207, label %if.end.216

land.lhs.true.207:                                ; preds = %if.end.200
  %161 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u208 = getelementptr inbounds %struct.context, %struct.context* %161, i32 0, i32 1
  %cx_blk209 = bitcast %union.anon.0* %cx_u208 to %struct.block*
  %blk_u210 = getelementptr inbounds %struct.block, %struct.block* %cx_blk209, i32 0, i32 7
  %blku_sub211 = bitcast %union.anon.1* %blk_u210 to %struct.block_sub*
  %olddepth = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub211, i32 0, i32 5
  %162 = load i64, i64* %olddepth, align 8
  %163 = load %struct.sv*, %struct.sv** %sv, align 8
  %164 = bitcast %struct.sv* %163 to %struct.cv*
  %sv_any212 = getelementptr inbounds %struct.cv, %struct.cv* %164, i32 0, i32 0
  %165 = load %struct.xpvcv*, %struct.xpvcv** %sv_any212, align 8
  %xcv_depth213 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %165, i32 0, i32 14
  store i64 %162, i64* %xcv_depth213, align 8
  %tobool214 = icmp ne i64 %162, 0
  br i1 %tobool214, label %if.then.215, label %if.end.216

if.then.215:                                      ; preds = %land.lhs.true.207
  store %struct.sv* null, %struct.sv** %sv, align 8
  br label %if.end.216

if.end.216:                                       ; preds = %if.then.215, %land.lhs.true.207, %if.end.200
  %166 = load %struct.pmop*, %struct.pmop** %newpm, align 8
  store %struct.pmop* %166, %struct.pmop** @PL_curpm, align 8
  %167 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool217 = icmp ne %struct.sv* %167, null
  br i1 %tobool217, label %if.then.218, label %if.end.219

if.then.218:                                      ; preds = %if.end.216
  %168 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_free(%struct.sv* %168)
  br label %if.end.219

if.end.219:                                       ; preds = %if.then.218, %if.end.216
  %call220 = call %struct.op* @Perl_pop_return()
  ret %struct.op* %call220
}

declare %struct.av* @Perl_newAV() #1

declare %struct.op* @Perl_pop_return() #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_leavesublv() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %newsp = alloca %struct.sv**, align 8
  %newpm = alloca %struct.pmop*, align 8
  %gimme = alloca i32, align 4
  %cx = alloca %struct.context*, align 8
  %sv = alloca %struct.sv*, align 8
  %tmp = alloca %struct.av*, align 8
  %fill = alloca i64, align 8
  %tmp188 = alloca i64, align 8
  %tmp245 = alloca %struct.av*, align 8
  %fill266 = alloca i64, align 8
  %tmp352 = alloca i64, align 8
  %tmp414 = alloca %struct.av*, align 8
  %fill435 = alloca i64, align 8
  %tmp521 = alloca i64, align 8
  %tmp600 = alloca %struct.av*, align 8
  %fill621 = alloca i64, align 8
  %tmp707 = alloca i64, align 8
  %markoff = alloca i32, align 4
  %tmp877 = alloca %struct.av*, align 8
  %fill898 = alloca i64, align 8
  %tmp984 = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %1, i32 0, i32 2
  %2 = load i32, i32* %si_cxix, align 4
  %dec = add nsw i32 %2, -1
  store i32 %dec, i32* %si_cxix, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %3, i32 0, i32 1
  %4 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %4, i64 %idxprom
  store %struct.context* %arrayidx, %struct.context** %cx, align 8
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %6 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %6, i32 0, i32 1
  %cx_blk = bitcast %union.anon.0* %cx_u to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 0
  %7 = load i32, i32* %blku_oldsp, align 4
  %idx.ext = sext i32 %7 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %newsp, align 8
  %8 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u1 = getelementptr inbounds %struct.context, %struct.context* %8, i32 0, i32 1
  %cx_blk2 = bitcast %union.anon.0* %cx_u1 to %struct.block*
  %blku_oldcop = getelementptr inbounds %struct.block, %struct.block* %cx_blk2, i32 0, i32 1
  %9 = load %struct.cop*, %struct.cop** %blku_oldcop, align 8
  store volatile %struct.cop* %9, %struct.cop** @PL_curcop, align 8
  %10 = load i32*, i32** @PL_markstack, align 8
  %11 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u3 = getelementptr inbounds %struct.context, %struct.context* %11, i32 0, i32 1
  %cx_blk4 = bitcast %union.anon.0* %cx_u3 to %struct.block*
  %blku_oldmarksp = getelementptr inbounds %struct.block, %struct.block* %cx_blk4, i32 0, i32 3
  %12 = load i32, i32* %blku_oldmarksp, align 4
  %idx.ext5 = sext i32 %12 to i64
  %add.ptr6 = getelementptr inbounds i32, i32* %10, i64 %idx.ext5
  store i32* %add.ptr6, i32** @PL_markstack_ptr, align 8
  %13 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u7 = getelementptr inbounds %struct.context, %struct.context* %13, i32 0, i32 1
  %cx_blk8 = bitcast %union.anon.0* %cx_u7 to %struct.block*
  %blku_oldscopesp = getelementptr inbounds %struct.block, %struct.block* %cx_blk8, i32 0, i32 4
  %14 = load i32, i32* %blku_oldscopesp, align 4
  store i32 %14, i32* @PL_scopestack_ix, align 4
  %15 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u9 = getelementptr inbounds %struct.context, %struct.context* %15, i32 0, i32 1
  %cx_blk10 = bitcast %union.anon.0* %cx_u9 to %struct.block*
  %blku_oldretsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk10, i32 0, i32 2
  %16 = load i32, i32* %blku_oldretsp, align 4
  store i32 %16, i32* @PL_retstack_ix, align 4
  %17 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u11 = getelementptr inbounds %struct.context, %struct.context* %17, i32 0, i32 1
  %cx_blk12 = bitcast %union.anon.0* %cx_u11 to %struct.block*
  %blku_oldpm = getelementptr inbounds %struct.block, %struct.block* %cx_blk12, i32 0, i32 5
  %18 = load %struct.pmop*, %struct.pmop** %blku_oldpm, align 8
  store %struct.pmop* %18, %struct.pmop** %newpm, align 8
  %19 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u13 = getelementptr inbounds %struct.context, %struct.context* %19, i32 0, i32 1
  %cx_blk14 = bitcast %union.anon.0* %cx_u13 to %struct.block*
  %blku_gimme = getelementptr inbounds %struct.block, %struct.block* %cx_blk14, i32 0, i32 6
  %20 = load i8, i8* %blku_gimme, align 1
  %conv = zext i8 %20 to i32
  store i32 %conv, i32* %gimme, align 4
  %21 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix15 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %21, i32 0, i32 2
  %22 = load i32, i32* %si_cxix15, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %si_cxix15, align 4
  store i8 0, i8* @PL_tainted, align 1
  %23 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u16 = getelementptr inbounds %struct.context, %struct.context* %23, i32 0, i32 1
  %cx_blk17 = bitcast %union.anon.0* %cx_u16 to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk17, i32 0, i32 7
  %blku_sub = bitcast %union.anon.1* %blk_u to %struct.block_sub*
  %lval = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub, i32 0, i32 7
  %24 = load i8, i8* %lval, align 1
  %conv18 = zext i8 %24 to i32
  %and = and i32 %conv18, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else.64

if.then:                                          ; preds = %entry
  %25 = load i32, i32* %gimme, align 4
  %cmp = icmp eq i32 %25, 0
  br i1 %cmp, label %if.then.20, label %if.end

if.then.20:                                       ; preds = %if.then
  br label %temporise

if.end:                                           ; preds = %if.then
  %26 = load i32, i32* %gimme, align 4
  %cmp21 = icmp eq i32 %26, 1
  br i1 %cmp21, label %if.then.23, label %if.end.63

if.then.23:                                       ; preds = %if.end
  %27 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u24 = getelementptr inbounds %struct.context, %struct.context* %27, i32 0, i32 1
  %cx_blk25 = bitcast %union.anon.0* %cx_u24 to %struct.block*
  %blk_u26 = getelementptr inbounds %struct.block, %struct.block* %cx_blk25, i32 0, i32 7
  %blku_sub27 = bitcast %union.anon.1* %blk_u26 to %struct.block_sub*
  %cv = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub27, i32 0, i32 0
  %28 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %28, i32 0, i32 0
  %29 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %29, i32 0, i32 17
  %30 = load i16, i16* %xcv_flags, align 2
  %conv28 = zext i16 %30 to i32
  %and29 = and i32 %conv28, 256
  %tobool30 = icmp ne i32 %and29, 0
  br i1 %tobool30, label %if.end.32, label %if.then.31

if.then.31:                                       ; preds = %if.then.23
  br label %temporise_array

if.end.32:                                        ; preds = %if.then.23
  %31 = load i32, i32* @PL_tmps_ix, align 4
  %conv33 = sext i32 %31 to i64
  %32 = load %struct.sv**, %struct.sv*** %sp, align 8
  %33 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %32 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %33 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %add = add nsw i64 %conv33, %sub.ptr.div
  %34 = load i32, i32* @PL_tmps_max, align 4
  %conv34 = sext i32 %34 to i64
  %cmp35 = icmp sge i64 %add, %conv34
  br i1 %cmp35, label %if.then.37, label %if.end.43

if.then.37:                                       ; preds = %if.end.32
  %35 = load %struct.sv**, %struct.sv*** %sp, align 8
  %36 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %sub.ptr.lhs.cast38 = ptrtoint %struct.sv** %35 to i64
  %sub.ptr.rhs.cast39 = ptrtoint %struct.sv** %36 to i64
  %sub.ptr.sub40 = sub i64 %sub.ptr.lhs.cast38, %sub.ptr.rhs.cast39
  %sub.ptr.div41 = sdiv exact i64 %sub.ptr.sub40, 8
  %conv42 = trunc i64 %sub.ptr.div41 to i32
  call void @Perl_tmps_grow(i32 %conv42)
  br label %if.end.43

if.end.43:                                        ; preds = %if.then.37, %if.end.32
  %37 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %add.ptr44 = getelementptr inbounds %struct.sv*, %struct.sv** %37, i64 1
  store %struct.sv** %add.ptr44, %struct.sv*** %mark, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.43
  %38 = load %struct.sv**, %struct.sv*** %mark, align 8
  %39 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp45 = icmp ule %struct.sv** %38, %39
  br i1 %cmp45, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %40 = load %struct.sv**, %struct.sv*** %mark, align 8
  %41 = load %struct.sv*, %struct.sv** %40, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 2
  %42 = load i32, i32* %sv_flags, align 4
  %and47 = and i32 %42, 2048
  %tobool48 = icmp ne i32 %and47, 0
  br i1 %tobool48, label %if.then.49, label %if.else

if.then.49:                                       ; preds = %for.body
  br label %if.end.62

if.else:                                          ; preds = %for.body
  %43 = load %struct.sv**, %struct.sv*** %mark, align 8
  %44 = load %struct.sv*, %struct.sv** %43, align 8
  %sv_flags50 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 2
  %45 = load i32, i32* %sv_flags50, align 4
  %and51 = and i32 %45, 8389120
  %tobool52 = icmp ne i32 %and51, 0
  br i1 %tobool52, label %if.then.53, label %if.else.54

if.then.53:                                       ; preds = %if.else
  %46 = load %struct.sv**, %struct.sv*** %mark, align 8
  %47 = load %struct.sv*, %struct.sv** %46, align 8
  %call = call %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %47)
  %48 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %call, %struct.sv** %48, align 8
  br label %if.end.61

if.else.54:                                       ; preds = %if.else
  %49 = load %struct.sv**, %struct.sv*** %mark, align 8
  %50 = load %struct.sv*, %struct.sv** %49, align 8
  %51 = load i32, i32* @PL_tmps_ix, align 4
  %inc55 = add nsw i32 %51, 1
  store i32 %inc55, i32* @PL_tmps_ix, align 4
  %idxprom56 = sext i32 %inc55 to i64
  %52 = load %struct.sv**, %struct.sv*** @PL_tmps_stack, align 8
  %arrayidx57 = getelementptr inbounds %struct.sv*, %struct.sv** %52, i64 %idxprom56
  store %struct.sv* %50, %struct.sv** %arrayidx57, align 8
  %53 = load %struct.sv**, %struct.sv*** %mark, align 8
  %54 = load %struct.sv*, %struct.sv** %53, align 8
  store %struct.sv* %54, %struct.sv** @PL_Sv, align 8
  %55 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool58 = icmp ne %struct.sv* %55, null
  br i1 %tobool58, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.else.54
  %56 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 1
  %57 = load i32, i32* %sv_refcnt, align 4
  %inc59 = add i32 %57, 1
  store i32 %inc59, i32* %sv_refcnt, align 4
  %tobool60 = icmp ne i32 %inc59, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.else.54
  %58 = phi i1 [ false, %if.else.54 ], [ %tobool60, %land.rhs ]
  %land.ext = zext i1 %58 to i32
  %59 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  br label %if.end.61

if.end.61:                                        ; preds = %land.end, %if.then.53
  br label %if.end.62

if.end.62:                                        ; preds = %if.end.61, %if.then.49
  br label %for.inc

for.inc:                                          ; preds = %if.end.62
  %60 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %60, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %mark, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.63

if.end.63:                                        ; preds = %for.end, %if.end
  br label %if.end.864

if.else.64:                                       ; preds = %entry
  %61 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u65 = getelementptr inbounds %struct.context, %struct.context* %61, i32 0, i32 1
  %cx_blk66 = bitcast %union.anon.0* %cx_u65 to %struct.block*
  %blk_u67 = getelementptr inbounds %struct.block, %struct.block* %cx_blk66, i32 0, i32 7
  %blku_sub68 = bitcast %union.anon.1* %blk_u67 to %struct.block_sub*
  %lval69 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub68, i32 0, i32 7
  %62 = load i8, i8* %lval69, align 1
  %tobool70 = icmp ne i8 %62, 0
  br i1 %tobool70, label %if.then.71, label %if.else.759

if.then.71:                                       ; preds = %if.else.64
  %63 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u72 = getelementptr inbounds %struct.context, %struct.context* %63, i32 0, i32 1
  %cx_blk73 = bitcast %union.anon.0* %cx_u72 to %struct.block*
  %blk_u74 = getelementptr inbounds %struct.block, %struct.block* %cx_blk73, i32 0, i32 7
  %blku_sub75 = bitcast %union.anon.1* %blk_u74 to %struct.block_sub*
  %cv76 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub75, i32 0, i32 0
  %64 = load %struct.cv*, %struct.cv** %cv76, align 8
  %sv_any77 = getelementptr inbounds %struct.cv, %struct.cv* %64, i32 0, i32 0
  %65 = load %struct.xpvcv*, %struct.xpvcv** %sv_any77, align 8
  %xcv_flags78 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %65, i32 0, i32 17
  %66 = load i16, i16* %xcv_flags78, align 2
  %conv79 = zext i16 %66 to i32
  %and80 = and i32 %conv79, 256
  %tobool81 = icmp ne i32 %and80, 0
  br i1 %tobool81, label %if.end.216, label %if.then.82

if.then.82:                                       ; preds = %if.then.71
  call void @Perl_pop_scope()
  %67 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix83 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %67, i32 0, i32 2
  %68 = load i32, i32* %si_cxix83, align 4
  %dec84 = add nsw i32 %68, -1
  store i32 %dec84, i32* %si_cxix83, align 4
  %69 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u85 = getelementptr inbounds %struct.context, %struct.context* %69, i32 0, i32 1
  %cx_blk86 = bitcast %union.anon.0* %cx_u85 to %struct.block*
  %blk_u87 = getelementptr inbounds %struct.block, %struct.block* %cx_blk86, i32 0, i32 7
  %blku_sub88 = bitcast %union.anon.1* %blk_u87 to %struct.block_sub*
  %hasargs = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub88, i32 0, i32 6
  %70 = load i8, i8* %hasargs, align 1
  %tobool89 = icmp ne i8 %70, 0
  br i1 %tobool89, label %if.then.90, label %if.end.197

if.then.90:                                       ; preds = %if.then.82
  %71 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any91 = getelementptr inbounds %struct.gv, %struct.gv* %71, i32 0, i32 0
  %72 = load %struct.xpvgv*, %struct.xpvgv** %sv_any91, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %72, i32 0, i32 7
  %73 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %73, i32 0, i32 4
  %74 = load %struct.av*, %struct.av** %gp_av, align 8
  %75 = bitcast %struct.av* %74 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %75)
  %76 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u92 = getelementptr inbounds %struct.context, %struct.context* %76, i32 0, i32 1
  %cx_blk93 = bitcast %union.anon.0* %cx_u92 to %struct.block*
  %blk_u94 = getelementptr inbounds %struct.block, %struct.block* %cx_blk93, i32 0, i32 7
  %blku_sub95 = bitcast %union.anon.1* %blk_u94 to %struct.block_sub*
  %savearray = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub95, i32 0, i32 3
  %77 = load %struct.av*, %struct.av** %savearray, align 8
  %78 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any96 = getelementptr inbounds %struct.gv, %struct.gv* %78, i32 0, i32 0
  %79 = load %struct.xpvgv*, %struct.xpvgv** %sv_any96, align 8
  %xgv_gp97 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %79, i32 0, i32 7
  %80 = load %struct.gp*, %struct.gp** %xgv_gp97, align 8
  %gp_av98 = getelementptr inbounds %struct.gp, %struct.gp* %80, i32 0, i32 4
  store %struct.av* %77, %struct.av** %gp_av98, align 8
  store %struct.av* %77, %struct.av** %tmp
  %81 = load %struct.av*, %struct.av** %tmp
  %82 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u99 = getelementptr inbounds %struct.context, %struct.context* %82, i32 0, i32 1
  %cx_blk100 = bitcast %union.anon.0* %cx_u99 to %struct.block*
  %blk_u101 = getelementptr inbounds %struct.block, %struct.block* %cx_blk100, i32 0, i32 7
  %blku_sub102 = bitcast %union.anon.1* %blk_u101 to %struct.block_sub*
  %argarray = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub102, i32 0, i32 4
  %83 = load %struct.av*, %struct.av** %argarray, align 8
  %sv_any103 = getelementptr inbounds %struct.av, %struct.av* %83, i32 0, i32 0
  %84 = load %struct.xpvav*, %struct.xpvav** %sv_any103, align 8
  %xav_flags = getelementptr inbounds %struct.xpvav, %struct.xpvav* %84, i32 0, i32 9
  %85 = load i8, i8* %xav_flags, align 1
  %conv104 = zext i8 %85 to i32
  %and105 = and i32 %conv104, 1
  %tobool106 = icmp ne i32 %and105, 0
  br i1 %tobool106, label %if.then.107, label %if.else.150

if.then.107:                                      ; preds = %if.then.90
  %86 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u109 = getelementptr inbounds %struct.context, %struct.context* %86, i32 0, i32 1
  %cx_blk110 = bitcast %union.anon.0* %cx_u109 to %struct.block*
  %blk_u111 = getelementptr inbounds %struct.block, %struct.block* %cx_blk110, i32 0, i32 7
  %blku_sub112 = bitcast %union.anon.1* %blk_u111 to %struct.block_sub*
  %argarray113 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub112, i32 0, i32 4
  %87 = load %struct.av*, %struct.av** %argarray113, align 8
  %sv_any114 = getelementptr inbounds %struct.av, %struct.av* %87, i32 0, i32 0
  %88 = load %struct.xpvav*, %struct.xpvav** %sv_any114, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %88, i32 0, i32 1
  %89 = load i64, i64* %xav_fill, align 8
  store i64 %89, i64* %fill, align 8
  %90 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u115 = getelementptr inbounds %struct.context, %struct.context* %90, i32 0, i32 1
  %cx_blk116 = bitcast %union.anon.0* %cx_u115 to %struct.block*
  %blk_u117 = getelementptr inbounds %struct.block, %struct.block* %cx_blk116, i32 0, i32 7
  %blku_sub118 = bitcast %union.anon.1* %blk_u117 to %struct.block_sub*
  %argarray119 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub118, i32 0, i32 4
  %91 = load %struct.av*, %struct.av** %argarray119, align 8
  %92 = bitcast %struct.av* %91 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %92)
  %call120 = call %struct.av* @Perl_newAV()
  %93 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u121 = getelementptr inbounds %struct.context, %struct.context* %93, i32 0, i32 1
  %cx_blk122 = bitcast %union.anon.0* %cx_u121 to %struct.block*
  %blk_u123 = getelementptr inbounds %struct.block, %struct.block* %cx_blk122, i32 0, i32 7
  %blku_sub124 = bitcast %union.anon.1* %blk_u123 to %struct.block_sub*
  %argarray125 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub124, i32 0, i32 4
  store %struct.av* %call120, %struct.av** %argarray125, align 8
  %94 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u126 = getelementptr inbounds %struct.context, %struct.context* %94, i32 0, i32 1
  %cx_blk127 = bitcast %union.anon.0* %cx_u126 to %struct.block*
  %blk_u128 = getelementptr inbounds %struct.block, %struct.block* %cx_blk127, i32 0, i32 7
  %blku_sub129 = bitcast %union.anon.1* %blk_u128 to %struct.block_sub*
  %argarray130 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub129, i32 0, i32 4
  %95 = load %struct.av*, %struct.av** %argarray130, align 8
  %96 = load i64, i64* %fill, align 8
  %conv131 = trunc i64 %96 to i32
  call void @Perl_av_extend(%struct.av* %95, i32 %conv131)
  %97 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u132 = getelementptr inbounds %struct.context, %struct.context* %97, i32 0, i32 1
  %cx_blk133 = bitcast %union.anon.0* %cx_u132 to %struct.block*
  %blk_u134 = getelementptr inbounds %struct.block, %struct.block* %cx_blk133, i32 0, i32 7
  %blku_sub135 = bitcast %union.anon.1* %blk_u134 to %struct.block_sub*
  %argarray136 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub135, i32 0, i32 4
  %98 = load %struct.av*, %struct.av** %argarray136, align 8
  %sv_any137 = getelementptr inbounds %struct.av, %struct.av* %98, i32 0, i32 0
  %99 = load %struct.xpvav*, %struct.xpvav** %sv_any137, align 8
  %xav_flags138 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %99, i32 0, i32 9
  store i8 2, i8* %xav_flags138, align 1
  %100 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u139 = getelementptr inbounds %struct.context, %struct.context* %100, i32 0, i32 1
  %cx_blk140 = bitcast %union.anon.0* %cx_u139 to %struct.block*
  %blk_u141 = getelementptr inbounds %struct.block, %struct.block* %cx_blk140, i32 0, i32 7
  %blku_sub142 = bitcast %union.anon.1* %blk_u141 to %struct.block_sub*
  %argarray143 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub142, i32 0, i32 4
  %101 = load %struct.av*, %struct.av** %argarray143, align 8
  %102 = bitcast %struct.av* %101 to %struct.sv*
  %103 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u144 = getelementptr inbounds %struct.context, %struct.context* %103, i32 0, i32 1
  %cx_blk145 = bitcast %union.anon.0* %cx_u144 to %struct.block*
  %blk_u146 = getelementptr inbounds %struct.block, %struct.block* %cx_blk145, i32 0, i32 7
  %blku_sub147 = bitcast %union.anon.1* %blk_u146 to %struct.block_sub*
  %oldcomppad = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub147, i32 0, i32 8
  %104 = load %struct.av*, %struct.av** %oldcomppad, align 8
  %sv_any148 = getelementptr inbounds %struct.av, %struct.av* %104, i32 0, i32 0
  %105 = load %struct.xpvav*, %struct.xpvav** %sv_any148, align 8
  %xav_array = getelementptr inbounds %struct.xpvav, %struct.xpvav* %105, i32 0, i32 0
  %106 = load i8*, i8** %xav_array, align 8
  %107 = bitcast i8* %106 to %struct.sv**
  %arrayidx149 = getelementptr inbounds %struct.sv*, %struct.sv** %107, i64 0
  store %struct.sv* %102, %struct.sv** %arrayidx149, align 8
  br label %if.end.196

if.else.150:                                      ; preds = %if.then.90
  %108 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u151 = getelementptr inbounds %struct.context, %struct.context* %108, i32 0, i32 1
  %cx_blk152 = bitcast %union.anon.0* %cx_u151 to %struct.block*
  %blk_u153 = getelementptr inbounds %struct.block, %struct.block* %cx_blk152, i32 0, i32 7
  %blku_sub154 = bitcast %union.anon.1* %blk_u153 to %struct.block_sub*
  %argarray155 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub154, i32 0, i32 4
  %109 = load %struct.av*, %struct.av** %argarray155, align 8
  %sv_any156 = getelementptr inbounds %struct.av, %struct.av* %109, i32 0, i32 0
  %110 = load %struct.xpvav*, %struct.xpvav** %sv_any156, align 8
  %xav_array157 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %110, i32 0, i32 0
  %111 = load i8*, i8** %xav_array157, align 8
  %112 = bitcast i8* %111 to %struct.sv**
  %113 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u158 = getelementptr inbounds %struct.context, %struct.context* %113, i32 0, i32 1
  %cx_blk159 = bitcast %union.anon.0* %cx_u158 to %struct.block*
  %blk_u160 = getelementptr inbounds %struct.block, %struct.block* %cx_blk159, i32 0, i32 7
  %blku_sub161 = bitcast %union.anon.1* %blk_u160 to %struct.block_sub*
  %argarray162 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub161, i32 0, i32 4
  %114 = load %struct.av*, %struct.av** %argarray162, align 8
  %sv_any163 = getelementptr inbounds %struct.av, %struct.av* %114, i32 0, i32 0
  %115 = load %struct.xpvav*, %struct.xpvav** %sv_any163, align 8
  %xav_alloc = getelementptr inbounds %struct.xpvav, %struct.xpvav* %115, i32 0, i32 7
  %116 = load %struct.sv**, %struct.sv*** %xav_alloc, align 8
  %sub.ptr.lhs.cast164 = ptrtoint %struct.sv** %112 to i64
  %sub.ptr.rhs.cast165 = ptrtoint %struct.sv** %116 to i64
  %sub.ptr.sub166 = sub i64 %sub.ptr.lhs.cast164, %sub.ptr.rhs.cast165
  %sub.ptr.div167 = sdiv exact i64 %sub.ptr.sub166, 8
  %117 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u168 = getelementptr inbounds %struct.context, %struct.context* %117, i32 0, i32 1
  %cx_blk169 = bitcast %union.anon.0* %cx_u168 to %struct.block*
  %blk_u170 = getelementptr inbounds %struct.block, %struct.block* %cx_blk169, i32 0, i32 7
  %blku_sub171 = bitcast %union.anon.1* %blk_u170 to %struct.block_sub*
  %argarray172 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub171, i32 0, i32 4
  %118 = load %struct.av*, %struct.av** %argarray172, align 8
  %sv_any173 = getelementptr inbounds %struct.av, %struct.av* %118, i32 0, i32 0
  %119 = load %struct.xpvav*, %struct.xpvav** %sv_any173, align 8
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %119, i32 0, i32 2
  %120 = load i64, i64* %xav_max, align 8
  %add174 = add nsw i64 %120, %sub.ptr.div167
  store i64 %add174, i64* %xav_max, align 8
  %121 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u175 = getelementptr inbounds %struct.context, %struct.context* %121, i32 0, i32 1
  %cx_blk176 = bitcast %union.anon.0* %cx_u175 to %struct.block*
  %blk_u177 = getelementptr inbounds %struct.block, %struct.block* %cx_blk176, i32 0, i32 7
  %blku_sub178 = bitcast %union.anon.1* %blk_u177 to %struct.block_sub*
  %argarray179 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub178, i32 0, i32 4
  %122 = load %struct.av*, %struct.av** %argarray179, align 8
  %sv_any180 = getelementptr inbounds %struct.av, %struct.av* %122, i32 0, i32 0
  %123 = load %struct.xpvav*, %struct.xpvav** %sv_any180, align 8
  %xav_alloc181 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %123, i32 0, i32 7
  %124 = load %struct.sv**, %struct.sv*** %xav_alloc181, align 8
  %125 = bitcast %struct.sv** %124 to i8*
  %126 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u182 = getelementptr inbounds %struct.context, %struct.context* %126, i32 0, i32 1
  %cx_blk183 = bitcast %union.anon.0* %cx_u182 to %struct.block*
  %blk_u184 = getelementptr inbounds %struct.block, %struct.block* %cx_blk183, i32 0, i32 7
  %blku_sub185 = bitcast %union.anon.1* %blk_u184 to %struct.block_sub*
  %argarray186 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub185, i32 0, i32 4
  %127 = load %struct.av*, %struct.av** %argarray186, align 8
  %sv_any187 = getelementptr inbounds %struct.av, %struct.av* %127, i32 0, i32 0
  %128 = load %struct.xpvav*, %struct.xpvav** %sv_any187, align 8
  %129 = bitcast %struct.xpvav* %128 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %129, i32 0, i32 0
  store i8* %125, i8** %xpv_pv, align 8
  %130 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u189 = getelementptr inbounds %struct.context, %struct.context* %130, i32 0, i32 1
  %cx_blk190 = bitcast %union.anon.0* %cx_u189 to %struct.block*
  %blk_u191 = getelementptr inbounds %struct.block, %struct.block* %cx_blk190, i32 0, i32 7
  %blku_sub192 = bitcast %union.anon.1* %blk_u191 to %struct.block_sub*
  %argarray193 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub192, i32 0, i32 4
  %131 = load %struct.av*, %struct.av** %argarray193, align 8
  %sv_any194 = getelementptr inbounds %struct.av, %struct.av* %131, i32 0, i32 0
  %132 = load %struct.xpvav*, %struct.xpvav** %sv_any194, align 8
  %xav_fill195 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %132, i32 0, i32 1
  store i64 -1, i64* %xav_fill195, align 8
  store i64 -1, i64* %tmp188
  %133 = load i64, i64* %tmp188
  br label %if.end.196

if.end.196:                                       ; preds = %if.else.150, %if.then.107
  br label %if.end.197

if.end.197:                                       ; preds = %if.end.196, %if.then.82
  %134 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u198 = getelementptr inbounds %struct.context, %struct.context* %134, i32 0, i32 1
  %cx_blk199 = bitcast %union.anon.0* %cx_u198 to %struct.block*
  %blk_u200 = getelementptr inbounds %struct.block, %struct.block* %cx_blk199, i32 0, i32 7
  %blku_sub201 = bitcast %union.anon.1* %blk_u200 to %struct.block_sub*
  %cv202 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub201, i32 0, i32 0
  %135 = load %struct.cv*, %struct.cv** %cv202, align 8
  %136 = bitcast %struct.cv* %135 to %struct.sv*
  store %struct.sv* %136, %struct.sv** %sv, align 8
  %137 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool203 = icmp ne %struct.sv* %137, null
  br i1 %tobool203, label %land.lhs.true, label %if.end.211

land.lhs.true:                                    ; preds = %if.end.197
  %138 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u204 = getelementptr inbounds %struct.context, %struct.context* %138, i32 0, i32 1
  %cx_blk205 = bitcast %union.anon.0* %cx_u204 to %struct.block*
  %blk_u206 = getelementptr inbounds %struct.block, %struct.block* %cx_blk205, i32 0, i32 7
  %blku_sub207 = bitcast %union.anon.1* %blk_u206 to %struct.block_sub*
  %olddepth = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub207, i32 0, i32 5
  %139 = load i64, i64* %olddepth, align 8
  %140 = load %struct.sv*, %struct.sv** %sv, align 8
  %141 = bitcast %struct.sv* %140 to %struct.cv*
  %sv_any208 = getelementptr inbounds %struct.cv, %struct.cv* %141, i32 0, i32 0
  %142 = load %struct.xpvcv*, %struct.xpvcv** %sv_any208, align 8
  %xcv_depth = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %142, i32 0, i32 14
  store i64 %139, i64* %xcv_depth, align 8
  %tobool209 = icmp ne i64 %139, 0
  br i1 %tobool209, label %if.then.210, label %if.end.211

if.then.210:                                      ; preds = %land.lhs.true
  store %struct.sv* null, %struct.sv** %sv, align 8
  br label %if.end.211

if.end.211:                                       ; preds = %if.then.210, %land.lhs.true, %if.end.197
  %143 = load %struct.pmop*, %struct.pmop** %newpm, align 8
  store %struct.pmop* %143, %struct.pmop** @PL_curpm, align 8
  %144 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool212 = icmp ne %struct.sv* %144, null
  br i1 %tobool212, label %if.then.213, label %if.end.214

if.then.213:                                      ; preds = %if.end.211
  %145 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_free(%struct.sv* %145)
  br label %if.end.214

if.end.214:                                       ; preds = %if.then.213, %if.end.211
  %call215 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.28, i32 0, i32 0))
  store %struct.op* %call215, %struct.op** %retval
  br label %return

if.end.216:                                       ; preds = %if.then.71
  %146 = load i32, i32* %gimme, align 4
  %cmp217 = icmp eq i32 %146, 0
  br i1 %cmp217, label %if.then.219, label %if.else.556

if.then.219:                                      ; preds = %if.end.216
  %147 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %add.ptr220 = getelementptr inbounds %struct.sv*, %struct.sv** %147, i64 1
  store %struct.sv** %add.ptr220, %struct.sv*** %mark, align 8
  %148 = load i32, i32* @PL_tmps_ix, align 4
  %add221 = add nsw i32 %148, 1
  %149 = load i32, i32* @PL_tmps_max, align 4
  %cmp222 = icmp sge i32 %add221, %149
  br i1 %cmp222, label %if.then.224, label %if.end.225

if.then.224:                                      ; preds = %if.then.219
  call void @Perl_tmps_grow(i32 1)
  br label %if.end.225

if.end.225:                                       ; preds = %if.then.224, %if.then.219
  %150 = load %struct.sv**, %struct.sv*** %mark, align 8
  %151 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp226 = icmp eq %struct.sv** %150, %151
  br i1 %cmp226, label %if.then.228, label %if.else.401

if.then.228:                                      ; preds = %if.end.225
  %152 = load %struct.sv**, %struct.sv*** %sp, align 8
  %153 = load %struct.sv*, %struct.sv** %152, align 8
  %sv_flags229 = getelementptr inbounds %struct.sv, %struct.sv* %153, i32 0, i32 2
  %154 = load i32, i32* %sv_flags229, align 4
  %and230 = and i32 %154, 8391168
  %tobool231 = icmp ne i32 %and230, 0
  br i1 %tobool231, label %if.then.232, label %if.else.389

if.then.232:                                      ; preds = %if.then.228
  call void @Perl_pop_scope()
  %155 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix233 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %155, i32 0, i32 2
  %156 = load i32, i32* %si_cxix233, align 4
  %dec234 = add nsw i32 %156, -1
  store i32 %dec234, i32* %si_cxix233, align 4
  %157 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u235 = getelementptr inbounds %struct.context, %struct.context* %157, i32 0, i32 1
  %cx_blk236 = bitcast %union.anon.0* %cx_u235 to %struct.block*
  %blk_u237 = getelementptr inbounds %struct.block, %struct.block* %cx_blk236, i32 0, i32 7
  %blku_sub238 = bitcast %union.anon.1* %blk_u237 to %struct.block_sub*
  %hasargs239 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub238, i32 0, i32 6
  %158 = load i8, i8* %hasargs239, align 1
  %tobool240 = icmp ne i8 %158, 0
  br i1 %tobool240, label %if.then.241, label %if.end.361

if.then.241:                                      ; preds = %if.then.232
  %159 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any242 = getelementptr inbounds %struct.gv, %struct.gv* %159, i32 0, i32 0
  %160 = load %struct.xpvgv*, %struct.xpvgv** %sv_any242, align 8
  %xgv_gp243 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %160, i32 0, i32 7
  %161 = load %struct.gp*, %struct.gp** %xgv_gp243, align 8
  %gp_av244 = getelementptr inbounds %struct.gp, %struct.gp* %161, i32 0, i32 4
  %162 = load %struct.av*, %struct.av** %gp_av244, align 8
  %163 = bitcast %struct.av* %162 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %163)
  %164 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u246 = getelementptr inbounds %struct.context, %struct.context* %164, i32 0, i32 1
  %cx_blk247 = bitcast %union.anon.0* %cx_u246 to %struct.block*
  %blk_u248 = getelementptr inbounds %struct.block, %struct.block* %cx_blk247, i32 0, i32 7
  %blku_sub249 = bitcast %union.anon.1* %blk_u248 to %struct.block_sub*
  %savearray250 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub249, i32 0, i32 3
  %165 = load %struct.av*, %struct.av** %savearray250, align 8
  %166 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any251 = getelementptr inbounds %struct.gv, %struct.gv* %166, i32 0, i32 0
  %167 = load %struct.xpvgv*, %struct.xpvgv** %sv_any251, align 8
  %xgv_gp252 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %167, i32 0, i32 7
  %168 = load %struct.gp*, %struct.gp** %xgv_gp252, align 8
  %gp_av253 = getelementptr inbounds %struct.gp, %struct.gp* %168, i32 0, i32 4
  store %struct.av* %165, %struct.av** %gp_av253, align 8
  store %struct.av* %165, %struct.av** %tmp245
  %169 = load %struct.av*, %struct.av** %tmp245
  %170 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u254 = getelementptr inbounds %struct.context, %struct.context* %170, i32 0, i32 1
  %cx_blk255 = bitcast %union.anon.0* %cx_u254 to %struct.block*
  %blk_u256 = getelementptr inbounds %struct.block, %struct.block* %cx_blk255, i32 0, i32 7
  %blku_sub257 = bitcast %union.anon.1* %blk_u256 to %struct.block_sub*
  %argarray258 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub257, i32 0, i32 4
  %171 = load %struct.av*, %struct.av** %argarray258, align 8
  %sv_any259 = getelementptr inbounds %struct.av, %struct.av* %171, i32 0, i32 0
  %172 = load %struct.xpvav*, %struct.xpvav** %sv_any259, align 8
  %xav_flags260 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %172, i32 0, i32 9
  %173 = load i8, i8* %xav_flags260, align 1
  %conv261 = zext i8 %173 to i32
  %and262 = and i32 %conv261, 1
  %tobool263 = icmp ne i32 %and262, 0
  br i1 %tobool263, label %if.then.264, label %if.else.311

if.then.264:                                      ; preds = %if.then.241
  %174 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u267 = getelementptr inbounds %struct.context, %struct.context* %174, i32 0, i32 1
  %cx_blk268 = bitcast %union.anon.0* %cx_u267 to %struct.block*
  %blk_u269 = getelementptr inbounds %struct.block, %struct.block* %cx_blk268, i32 0, i32 7
  %blku_sub270 = bitcast %union.anon.1* %blk_u269 to %struct.block_sub*
  %argarray271 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub270, i32 0, i32 4
  %175 = load %struct.av*, %struct.av** %argarray271, align 8
  %sv_any272 = getelementptr inbounds %struct.av, %struct.av* %175, i32 0, i32 0
  %176 = load %struct.xpvav*, %struct.xpvav** %sv_any272, align 8
  %xav_fill273 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %176, i32 0, i32 1
  %177 = load i64, i64* %xav_fill273, align 8
  store i64 %177, i64* %fill266, align 8
  %178 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u274 = getelementptr inbounds %struct.context, %struct.context* %178, i32 0, i32 1
  %cx_blk275 = bitcast %union.anon.0* %cx_u274 to %struct.block*
  %blk_u276 = getelementptr inbounds %struct.block, %struct.block* %cx_blk275, i32 0, i32 7
  %blku_sub277 = bitcast %union.anon.1* %blk_u276 to %struct.block_sub*
  %argarray278 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub277, i32 0, i32 4
  %179 = load %struct.av*, %struct.av** %argarray278, align 8
  %180 = bitcast %struct.av* %179 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %180)
  %call279 = call %struct.av* @Perl_newAV()
  %181 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u280 = getelementptr inbounds %struct.context, %struct.context* %181, i32 0, i32 1
  %cx_blk281 = bitcast %union.anon.0* %cx_u280 to %struct.block*
  %blk_u282 = getelementptr inbounds %struct.block, %struct.block* %cx_blk281, i32 0, i32 7
  %blku_sub283 = bitcast %union.anon.1* %blk_u282 to %struct.block_sub*
  %argarray284 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub283, i32 0, i32 4
  store %struct.av* %call279, %struct.av** %argarray284, align 8
  %182 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u285 = getelementptr inbounds %struct.context, %struct.context* %182, i32 0, i32 1
  %cx_blk286 = bitcast %union.anon.0* %cx_u285 to %struct.block*
  %blk_u287 = getelementptr inbounds %struct.block, %struct.block* %cx_blk286, i32 0, i32 7
  %blku_sub288 = bitcast %union.anon.1* %blk_u287 to %struct.block_sub*
  %argarray289 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub288, i32 0, i32 4
  %183 = load %struct.av*, %struct.av** %argarray289, align 8
  %184 = load i64, i64* %fill266, align 8
  %conv290 = trunc i64 %184 to i32
  call void @Perl_av_extend(%struct.av* %183, i32 %conv290)
  %185 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u291 = getelementptr inbounds %struct.context, %struct.context* %185, i32 0, i32 1
  %cx_blk292 = bitcast %union.anon.0* %cx_u291 to %struct.block*
  %blk_u293 = getelementptr inbounds %struct.block, %struct.block* %cx_blk292, i32 0, i32 7
  %blku_sub294 = bitcast %union.anon.1* %blk_u293 to %struct.block_sub*
  %argarray295 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub294, i32 0, i32 4
  %186 = load %struct.av*, %struct.av** %argarray295, align 8
  %sv_any296 = getelementptr inbounds %struct.av, %struct.av* %186, i32 0, i32 0
  %187 = load %struct.xpvav*, %struct.xpvav** %sv_any296, align 8
  %xav_flags297 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %187, i32 0, i32 9
  store i8 2, i8* %xav_flags297, align 1
  %188 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u298 = getelementptr inbounds %struct.context, %struct.context* %188, i32 0, i32 1
  %cx_blk299 = bitcast %union.anon.0* %cx_u298 to %struct.block*
  %blk_u300 = getelementptr inbounds %struct.block, %struct.block* %cx_blk299, i32 0, i32 7
  %blku_sub301 = bitcast %union.anon.1* %blk_u300 to %struct.block_sub*
  %argarray302 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub301, i32 0, i32 4
  %189 = load %struct.av*, %struct.av** %argarray302, align 8
  %190 = bitcast %struct.av* %189 to %struct.sv*
  %191 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u303 = getelementptr inbounds %struct.context, %struct.context* %191, i32 0, i32 1
  %cx_blk304 = bitcast %union.anon.0* %cx_u303 to %struct.block*
  %blk_u305 = getelementptr inbounds %struct.block, %struct.block* %cx_blk304, i32 0, i32 7
  %blku_sub306 = bitcast %union.anon.1* %blk_u305 to %struct.block_sub*
  %oldcomppad307 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub306, i32 0, i32 8
  %192 = load %struct.av*, %struct.av** %oldcomppad307, align 8
  %sv_any308 = getelementptr inbounds %struct.av, %struct.av* %192, i32 0, i32 0
  %193 = load %struct.xpvav*, %struct.xpvav** %sv_any308, align 8
  %xav_array309 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %193, i32 0, i32 0
  %194 = load i8*, i8** %xav_array309, align 8
  %195 = bitcast i8* %194 to %struct.sv**
  %arrayidx310 = getelementptr inbounds %struct.sv*, %struct.sv** %195, i64 0
  store %struct.sv* %190, %struct.sv** %arrayidx310, align 8
  br label %if.end.360

if.else.311:                                      ; preds = %if.then.241
  %196 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u312 = getelementptr inbounds %struct.context, %struct.context* %196, i32 0, i32 1
  %cx_blk313 = bitcast %union.anon.0* %cx_u312 to %struct.block*
  %blk_u314 = getelementptr inbounds %struct.block, %struct.block* %cx_blk313, i32 0, i32 7
  %blku_sub315 = bitcast %union.anon.1* %blk_u314 to %struct.block_sub*
  %argarray316 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub315, i32 0, i32 4
  %197 = load %struct.av*, %struct.av** %argarray316, align 8
  %sv_any317 = getelementptr inbounds %struct.av, %struct.av* %197, i32 0, i32 0
  %198 = load %struct.xpvav*, %struct.xpvav** %sv_any317, align 8
  %xav_array318 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %198, i32 0, i32 0
  %199 = load i8*, i8** %xav_array318, align 8
  %200 = bitcast i8* %199 to %struct.sv**
  %201 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u319 = getelementptr inbounds %struct.context, %struct.context* %201, i32 0, i32 1
  %cx_blk320 = bitcast %union.anon.0* %cx_u319 to %struct.block*
  %blk_u321 = getelementptr inbounds %struct.block, %struct.block* %cx_blk320, i32 0, i32 7
  %blku_sub322 = bitcast %union.anon.1* %blk_u321 to %struct.block_sub*
  %argarray323 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub322, i32 0, i32 4
  %202 = load %struct.av*, %struct.av** %argarray323, align 8
  %sv_any324 = getelementptr inbounds %struct.av, %struct.av* %202, i32 0, i32 0
  %203 = load %struct.xpvav*, %struct.xpvav** %sv_any324, align 8
  %xav_alloc325 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %203, i32 0, i32 7
  %204 = load %struct.sv**, %struct.sv*** %xav_alloc325, align 8
  %sub.ptr.lhs.cast326 = ptrtoint %struct.sv** %200 to i64
  %sub.ptr.rhs.cast327 = ptrtoint %struct.sv** %204 to i64
  %sub.ptr.sub328 = sub i64 %sub.ptr.lhs.cast326, %sub.ptr.rhs.cast327
  %sub.ptr.div329 = sdiv exact i64 %sub.ptr.sub328, 8
  %205 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u330 = getelementptr inbounds %struct.context, %struct.context* %205, i32 0, i32 1
  %cx_blk331 = bitcast %union.anon.0* %cx_u330 to %struct.block*
  %blk_u332 = getelementptr inbounds %struct.block, %struct.block* %cx_blk331, i32 0, i32 7
  %blku_sub333 = bitcast %union.anon.1* %blk_u332 to %struct.block_sub*
  %argarray334 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub333, i32 0, i32 4
  %206 = load %struct.av*, %struct.av** %argarray334, align 8
  %sv_any335 = getelementptr inbounds %struct.av, %struct.av* %206, i32 0, i32 0
  %207 = load %struct.xpvav*, %struct.xpvav** %sv_any335, align 8
  %xav_max336 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %207, i32 0, i32 2
  %208 = load i64, i64* %xav_max336, align 8
  %add337 = add nsw i64 %208, %sub.ptr.div329
  store i64 %add337, i64* %xav_max336, align 8
  %209 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u338 = getelementptr inbounds %struct.context, %struct.context* %209, i32 0, i32 1
  %cx_blk339 = bitcast %union.anon.0* %cx_u338 to %struct.block*
  %blk_u340 = getelementptr inbounds %struct.block, %struct.block* %cx_blk339, i32 0, i32 7
  %blku_sub341 = bitcast %union.anon.1* %blk_u340 to %struct.block_sub*
  %argarray342 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub341, i32 0, i32 4
  %210 = load %struct.av*, %struct.av** %argarray342, align 8
  %sv_any343 = getelementptr inbounds %struct.av, %struct.av* %210, i32 0, i32 0
  %211 = load %struct.xpvav*, %struct.xpvav** %sv_any343, align 8
  %xav_alloc344 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %211, i32 0, i32 7
  %212 = load %struct.sv**, %struct.sv*** %xav_alloc344, align 8
  %213 = bitcast %struct.sv** %212 to i8*
  %214 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u345 = getelementptr inbounds %struct.context, %struct.context* %214, i32 0, i32 1
  %cx_blk346 = bitcast %union.anon.0* %cx_u345 to %struct.block*
  %blk_u347 = getelementptr inbounds %struct.block, %struct.block* %cx_blk346, i32 0, i32 7
  %blku_sub348 = bitcast %union.anon.1* %blk_u347 to %struct.block_sub*
  %argarray349 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub348, i32 0, i32 4
  %215 = load %struct.av*, %struct.av** %argarray349, align 8
  %sv_any350 = getelementptr inbounds %struct.av, %struct.av* %215, i32 0, i32 0
  %216 = load %struct.xpvav*, %struct.xpvav** %sv_any350, align 8
  %217 = bitcast %struct.xpvav* %216 to %struct.xpv*
  %xpv_pv351 = getelementptr inbounds %struct.xpv, %struct.xpv* %217, i32 0, i32 0
  store i8* %213, i8** %xpv_pv351, align 8
  %218 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u353 = getelementptr inbounds %struct.context, %struct.context* %218, i32 0, i32 1
  %cx_blk354 = bitcast %union.anon.0* %cx_u353 to %struct.block*
  %blk_u355 = getelementptr inbounds %struct.block, %struct.block* %cx_blk354, i32 0, i32 7
  %blku_sub356 = bitcast %union.anon.1* %blk_u355 to %struct.block_sub*
  %argarray357 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub356, i32 0, i32 4
  %219 = load %struct.av*, %struct.av** %argarray357, align 8
  %sv_any358 = getelementptr inbounds %struct.av, %struct.av* %219, i32 0, i32 0
  %220 = load %struct.xpvav*, %struct.xpvav** %sv_any358, align 8
  %xav_fill359 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %220, i32 0, i32 1
  store i64 -1, i64* %xav_fill359, align 8
  store i64 -1, i64* %tmp352
  %221 = load i64, i64* %tmp352
  br label %if.end.360

if.end.360:                                       ; preds = %if.else.311, %if.then.264
  br label %if.end.361

if.end.361:                                       ; preds = %if.end.360, %if.then.232
  %222 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u362 = getelementptr inbounds %struct.context, %struct.context* %222, i32 0, i32 1
  %cx_blk363 = bitcast %union.anon.0* %cx_u362 to %struct.block*
  %blk_u364 = getelementptr inbounds %struct.block, %struct.block* %cx_blk363, i32 0, i32 7
  %blku_sub365 = bitcast %union.anon.1* %blk_u364 to %struct.block_sub*
  %cv366 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub365, i32 0, i32 0
  %223 = load %struct.cv*, %struct.cv** %cv366, align 8
  %224 = bitcast %struct.cv* %223 to %struct.sv*
  store %struct.sv* %224, %struct.sv** %sv, align 8
  %225 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool367 = icmp ne %struct.sv* %225, null
  br i1 %tobool367, label %land.lhs.true.368, label %if.end.378

land.lhs.true.368:                                ; preds = %if.end.361
  %226 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u369 = getelementptr inbounds %struct.context, %struct.context* %226, i32 0, i32 1
  %cx_blk370 = bitcast %union.anon.0* %cx_u369 to %struct.block*
  %blk_u371 = getelementptr inbounds %struct.block, %struct.block* %cx_blk370, i32 0, i32 7
  %blku_sub372 = bitcast %union.anon.1* %blk_u371 to %struct.block_sub*
  %olddepth373 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub372, i32 0, i32 5
  %227 = load i64, i64* %olddepth373, align 8
  %228 = load %struct.sv*, %struct.sv** %sv, align 8
  %229 = bitcast %struct.sv* %228 to %struct.cv*
  %sv_any374 = getelementptr inbounds %struct.cv, %struct.cv* %229, i32 0, i32 0
  %230 = load %struct.xpvcv*, %struct.xpvcv** %sv_any374, align 8
  %xcv_depth375 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %230, i32 0, i32 14
  store i64 %227, i64* %xcv_depth375, align 8
  %tobool376 = icmp ne i64 %227, 0
  br i1 %tobool376, label %if.then.377, label %if.end.378

if.then.377:                                      ; preds = %land.lhs.true.368
  store %struct.sv* null, %struct.sv** %sv, align 8
  br label %if.end.378

if.end.378:                                       ; preds = %if.then.377, %land.lhs.true.368, %if.end.361
  %231 = load %struct.pmop*, %struct.pmop** %newpm, align 8
  store %struct.pmop* %231, %struct.pmop** @PL_curpm, align 8
  %232 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool379 = icmp ne %struct.sv* %232, null
  br i1 %tobool379, label %if.then.380, label %if.end.381

if.then.380:                                      ; preds = %if.end.378
  %233 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_free(%struct.sv* %233)
  br label %if.end.381

if.end.381:                                       ; preds = %if.then.380, %if.end.378
  %234 = load %struct.sv**, %struct.sv*** %sp, align 8
  %235 = load %struct.sv*, %struct.sv** %234, align 8
  %sv_flags382 = getelementptr inbounds %struct.sv, %struct.sv* %235, i32 0, i32 2
  %236 = load i32, i32* %sv_flags382, align 4
  %and383 = and i32 %236, 8388608
  %tobool384 = icmp ne i32 %and383, 0
  br i1 %tobool384, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.381
  %237 = load %struct.sv**, %struct.sv*** %sp, align 8
  %238 = load %struct.sv*, %struct.sv** %237, align 8
  %cmp385 = icmp eq %struct.sv* %238, @PL_sv_undef
  %cond = select i1 %cmp385, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.31, i32 0, i32 0)
  br label %cond.end

cond.false:                                       ; preds = %if.end.381
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond387 = phi i8* [ %cond, %cond.true ], [ getelementptr inbounds ([12 x i8], [12 x i8]* @.str.32, i32 0, i32 0), %cond.false ]
  %call388 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.29, i32 0, i32 0), i8* %cond387)
  store %struct.op* %call388, %struct.op** %retval
  br label %return

if.else.389:                                      ; preds = %if.then.228
  %239 = load %struct.sv**, %struct.sv*** %mark, align 8
  %240 = load %struct.sv*, %struct.sv** %239, align 8
  %241 = load i32, i32* @PL_tmps_ix, align 4
  %inc390 = add nsw i32 %241, 1
  store i32 %inc390, i32* @PL_tmps_ix, align 4
  %idxprom391 = sext i32 %inc390 to i64
  %242 = load %struct.sv**, %struct.sv*** @PL_tmps_stack, align 8
  %arrayidx392 = getelementptr inbounds %struct.sv*, %struct.sv** %242, i64 %idxprom391
  store %struct.sv* %240, %struct.sv** %arrayidx392, align 8
  %243 = load %struct.sv**, %struct.sv*** %mark, align 8
  %244 = load %struct.sv*, %struct.sv** %243, align 8
  store %struct.sv* %244, %struct.sv** @PL_Sv, align 8
  %245 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool393 = icmp ne %struct.sv* %245, null
  br i1 %tobool393, label %land.rhs.394, label %land.end.398

land.rhs.394:                                     ; preds = %if.else.389
  %246 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt395 = getelementptr inbounds %struct.sv, %struct.sv* %246, i32 0, i32 1
  %247 = load i32, i32* %sv_refcnt395, align 4
  %inc396 = add i32 %247, 1
  store i32 %inc396, i32* %sv_refcnt395, align 4
  %tobool397 = icmp ne i32 %inc396, 0
  br label %land.end.398

land.end.398:                                     ; preds = %land.rhs.394, %if.else.389
  %248 = phi i1 [ false, %if.else.389 ], [ %tobool397, %land.rhs.394 ]
  %land.ext399 = zext i1 %248 to i32
  %249 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  br label %if.end.400

if.end.400:                                       ; preds = %land.end.398
  br label %if.end.555

if.else.401:                                      ; preds = %if.end.225
  call void @Perl_pop_scope()
  %250 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix402 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %250, i32 0, i32 2
  %251 = load i32, i32* %si_cxix402, align 4
  %dec403 = add nsw i32 %251, -1
  store i32 %dec403, i32* %si_cxix402, align 4
  %252 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u404 = getelementptr inbounds %struct.context, %struct.context* %252, i32 0, i32 1
  %cx_blk405 = bitcast %union.anon.0* %cx_u404 to %struct.block*
  %blk_u406 = getelementptr inbounds %struct.block, %struct.block* %cx_blk405, i32 0, i32 7
  %blku_sub407 = bitcast %union.anon.1* %blk_u406 to %struct.block_sub*
  %hasargs408 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub407, i32 0, i32 6
  %253 = load i8, i8* %hasargs408, align 1
  %tobool409 = icmp ne i8 %253, 0
  br i1 %tobool409, label %if.then.410, label %if.end.530

if.then.410:                                      ; preds = %if.else.401
  %254 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any411 = getelementptr inbounds %struct.gv, %struct.gv* %254, i32 0, i32 0
  %255 = load %struct.xpvgv*, %struct.xpvgv** %sv_any411, align 8
  %xgv_gp412 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %255, i32 0, i32 7
  %256 = load %struct.gp*, %struct.gp** %xgv_gp412, align 8
  %gp_av413 = getelementptr inbounds %struct.gp, %struct.gp* %256, i32 0, i32 4
  %257 = load %struct.av*, %struct.av** %gp_av413, align 8
  %258 = bitcast %struct.av* %257 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %258)
  %259 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u415 = getelementptr inbounds %struct.context, %struct.context* %259, i32 0, i32 1
  %cx_blk416 = bitcast %union.anon.0* %cx_u415 to %struct.block*
  %blk_u417 = getelementptr inbounds %struct.block, %struct.block* %cx_blk416, i32 0, i32 7
  %blku_sub418 = bitcast %union.anon.1* %blk_u417 to %struct.block_sub*
  %savearray419 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub418, i32 0, i32 3
  %260 = load %struct.av*, %struct.av** %savearray419, align 8
  %261 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any420 = getelementptr inbounds %struct.gv, %struct.gv* %261, i32 0, i32 0
  %262 = load %struct.xpvgv*, %struct.xpvgv** %sv_any420, align 8
  %xgv_gp421 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %262, i32 0, i32 7
  %263 = load %struct.gp*, %struct.gp** %xgv_gp421, align 8
  %gp_av422 = getelementptr inbounds %struct.gp, %struct.gp* %263, i32 0, i32 4
  store %struct.av* %260, %struct.av** %gp_av422, align 8
  store %struct.av* %260, %struct.av** %tmp414
  %264 = load %struct.av*, %struct.av** %tmp414
  %265 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u423 = getelementptr inbounds %struct.context, %struct.context* %265, i32 0, i32 1
  %cx_blk424 = bitcast %union.anon.0* %cx_u423 to %struct.block*
  %blk_u425 = getelementptr inbounds %struct.block, %struct.block* %cx_blk424, i32 0, i32 7
  %blku_sub426 = bitcast %union.anon.1* %blk_u425 to %struct.block_sub*
  %argarray427 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub426, i32 0, i32 4
  %266 = load %struct.av*, %struct.av** %argarray427, align 8
  %sv_any428 = getelementptr inbounds %struct.av, %struct.av* %266, i32 0, i32 0
  %267 = load %struct.xpvav*, %struct.xpvav** %sv_any428, align 8
  %xav_flags429 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %267, i32 0, i32 9
  %268 = load i8, i8* %xav_flags429, align 1
  %conv430 = zext i8 %268 to i32
  %and431 = and i32 %conv430, 1
  %tobool432 = icmp ne i32 %and431, 0
  br i1 %tobool432, label %if.then.433, label %if.else.480

if.then.433:                                      ; preds = %if.then.410
  %269 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u436 = getelementptr inbounds %struct.context, %struct.context* %269, i32 0, i32 1
  %cx_blk437 = bitcast %union.anon.0* %cx_u436 to %struct.block*
  %blk_u438 = getelementptr inbounds %struct.block, %struct.block* %cx_blk437, i32 0, i32 7
  %blku_sub439 = bitcast %union.anon.1* %blk_u438 to %struct.block_sub*
  %argarray440 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub439, i32 0, i32 4
  %270 = load %struct.av*, %struct.av** %argarray440, align 8
  %sv_any441 = getelementptr inbounds %struct.av, %struct.av* %270, i32 0, i32 0
  %271 = load %struct.xpvav*, %struct.xpvav** %sv_any441, align 8
  %xav_fill442 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %271, i32 0, i32 1
  %272 = load i64, i64* %xav_fill442, align 8
  store i64 %272, i64* %fill435, align 8
  %273 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u443 = getelementptr inbounds %struct.context, %struct.context* %273, i32 0, i32 1
  %cx_blk444 = bitcast %union.anon.0* %cx_u443 to %struct.block*
  %blk_u445 = getelementptr inbounds %struct.block, %struct.block* %cx_blk444, i32 0, i32 7
  %blku_sub446 = bitcast %union.anon.1* %blk_u445 to %struct.block_sub*
  %argarray447 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub446, i32 0, i32 4
  %274 = load %struct.av*, %struct.av** %argarray447, align 8
  %275 = bitcast %struct.av* %274 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %275)
  %call448 = call %struct.av* @Perl_newAV()
  %276 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u449 = getelementptr inbounds %struct.context, %struct.context* %276, i32 0, i32 1
  %cx_blk450 = bitcast %union.anon.0* %cx_u449 to %struct.block*
  %blk_u451 = getelementptr inbounds %struct.block, %struct.block* %cx_blk450, i32 0, i32 7
  %blku_sub452 = bitcast %union.anon.1* %blk_u451 to %struct.block_sub*
  %argarray453 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub452, i32 0, i32 4
  store %struct.av* %call448, %struct.av** %argarray453, align 8
  %277 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u454 = getelementptr inbounds %struct.context, %struct.context* %277, i32 0, i32 1
  %cx_blk455 = bitcast %union.anon.0* %cx_u454 to %struct.block*
  %blk_u456 = getelementptr inbounds %struct.block, %struct.block* %cx_blk455, i32 0, i32 7
  %blku_sub457 = bitcast %union.anon.1* %blk_u456 to %struct.block_sub*
  %argarray458 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub457, i32 0, i32 4
  %278 = load %struct.av*, %struct.av** %argarray458, align 8
  %279 = load i64, i64* %fill435, align 8
  %conv459 = trunc i64 %279 to i32
  call void @Perl_av_extend(%struct.av* %278, i32 %conv459)
  %280 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u460 = getelementptr inbounds %struct.context, %struct.context* %280, i32 0, i32 1
  %cx_blk461 = bitcast %union.anon.0* %cx_u460 to %struct.block*
  %blk_u462 = getelementptr inbounds %struct.block, %struct.block* %cx_blk461, i32 0, i32 7
  %blku_sub463 = bitcast %union.anon.1* %blk_u462 to %struct.block_sub*
  %argarray464 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub463, i32 0, i32 4
  %281 = load %struct.av*, %struct.av** %argarray464, align 8
  %sv_any465 = getelementptr inbounds %struct.av, %struct.av* %281, i32 0, i32 0
  %282 = load %struct.xpvav*, %struct.xpvav** %sv_any465, align 8
  %xav_flags466 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %282, i32 0, i32 9
  store i8 2, i8* %xav_flags466, align 1
  %283 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u467 = getelementptr inbounds %struct.context, %struct.context* %283, i32 0, i32 1
  %cx_blk468 = bitcast %union.anon.0* %cx_u467 to %struct.block*
  %blk_u469 = getelementptr inbounds %struct.block, %struct.block* %cx_blk468, i32 0, i32 7
  %blku_sub470 = bitcast %union.anon.1* %blk_u469 to %struct.block_sub*
  %argarray471 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub470, i32 0, i32 4
  %284 = load %struct.av*, %struct.av** %argarray471, align 8
  %285 = bitcast %struct.av* %284 to %struct.sv*
  %286 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u472 = getelementptr inbounds %struct.context, %struct.context* %286, i32 0, i32 1
  %cx_blk473 = bitcast %union.anon.0* %cx_u472 to %struct.block*
  %blk_u474 = getelementptr inbounds %struct.block, %struct.block* %cx_blk473, i32 0, i32 7
  %blku_sub475 = bitcast %union.anon.1* %blk_u474 to %struct.block_sub*
  %oldcomppad476 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub475, i32 0, i32 8
  %287 = load %struct.av*, %struct.av** %oldcomppad476, align 8
  %sv_any477 = getelementptr inbounds %struct.av, %struct.av* %287, i32 0, i32 0
  %288 = load %struct.xpvav*, %struct.xpvav** %sv_any477, align 8
  %xav_array478 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %288, i32 0, i32 0
  %289 = load i8*, i8** %xav_array478, align 8
  %290 = bitcast i8* %289 to %struct.sv**
  %arrayidx479 = getelementptr inbounds %struct.sv*, %struct.sv** %290, i64 0
  store %struct.sv* %285, %struct.sv** %arrayidx479, align 8
  br label %if.end.529

if.else.480:                                      ; preds = %if.then.410
  %291 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u481 = getelementptr inbounds %struct.context, %struct.context* %291, i32 0, i32 1
  %cx_blk482 = bitcast %union.anon.0* %cx_u481 to %struct.block*
  %blk_u483 = getelementptr inbounds %struct.block, %struct.block* %cx_blk482, i32 0, i32 7
  %blku_sub484 = bitcast %union.anon.1* %blk_u483 to %struct.block_sub*
  %argarray485 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub484, i32 0, i32 4
  %292 = load %struct.av*, %struct.av** %argarray485, align 8
  %sv_any486 = getelementptr inbounds %struct.av, %struct.av* %292, i32 0, i32 0
  %293 = load %struct.xpvav*, %struct.xpvav** %sv_any486, align 8
  %xav_array487 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %293, i32 0, i32 0
  %294 = load i8*, i8** %xav_array487, align 8
  %295 = bitcast i8* %294 to %struct.sv**
  %296 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u488 = getelementptr inbounds %struct.context, %struct.context* %296, i32 0, i32 1
  %cx_blk489 = bitcast %union.anon.0* %cx_u488 to %struct.block*
  %blk_u490 = getelementptr inbounds %struct.block, %struct.block* %cx_blk489, i32 0, i32 7
  %blku_sub491 = bitcast %union.anon.1* %blk_u490 to %struct.block_sub*
  %argarray492 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub491, i32 0, i32 4
  %297 = load %struct.av*, %struct.av** %argarray492, align 8
  %sv_any493 = getelementptr inbounds %struct.av, %struct.av* %297, i32 0, i32 0
  %298 = load %struct.xpvav*, %struct.xpvav** %sv_any493, align 8
  %xav_alloc494 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %298, i32 0, i32 7
  %299 = load %struct.sv**, %struct.sv*** %xav_alloc494, align 8
  %sub.ptr.lhs.cast495 = ptrtoint %struct.sv** %295 to i64
  %sub.ptr.rhs.cast496 = ptrtoint %struct.sv** %299 to i64
  %sub.ptr.sub497 = sub i64 %sub.ptr.lhs.cast495, %sub.ptr.rhs.cast496
  %sub.ptr.div498 = sdiv exact i64 %sub.ptr.sub497, 8
  %300 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u499 = getelementptr inbounds %struct.context, %struct.context* %300, i32 0, i32 1
  %cx_blk500 = bitcast %union.anon.0* %cx_u499 to %struct.block*
  %blk_u501 = getelementptr inbounds %struct.block, %struct.block* %cx_blk500, i32 0, i32 7
  %blku_sub502 = bitcast %union.anon.1* %blk_u501 to %struct.block_sub*
  %argarray503 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub502, i32 0, i32 4
  %301 = load %struct.av*, %struct.av** %argarray503, align 8
  %sv_any504 = getelementptr inbounds %struct.av, %struct.av* %301, i32 0, i32 0
  %302 = load %struct.xpvav*, %struct.xpvav** %sv_any504, align 8
  %xav_max505 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %302, i32 0, i32 2
  %303 = load i64, i64* %xav_max505, align 8
  %add506 = add nsw i64 %303, %sub.ptr.div498
  store i64 %add506, i64* %xav_max505, align 8
  %304 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u507 = getelementptr inbounds %struct.context, %struct.context* %304, i32 0, i32 1
  %cx_blk508 = bitcast %union.anon.0* %cx_u507 to %struct.block*
  %blk_u509 = getelementptr inbounds %struct.block, %struct.block* %cx_blk508, i32 0, i32 7
  %blku_sub510 = bitcast %union.anon.1* %blk_u509 to %struct.block_sub*
  %argarray511 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub510, i32 0, i32 4
  %305 = load %struct.av*, %struct.av** %argarray511, align 8
  %sv_any512 = getelementptr inbounds %struct.av, %struct.av* %305, i32 0, i32 0
  %306 = load %struct.xpvav*, %struct.xpvav** %sv_any512, align 8
  %xav_alloc513 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %306, i32 0, i32 7
  %307 = load %struct.sv**, %struct.sv*** %xav_alloc513, align 8
  %308 = bitcast %struct.sv** %307 to i8*
  %309 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u514 = getelementptr inbounds %struct.context, %struct.context* %309, i32 0, i32 1
  %cx_blk515 = bitcast %union.anon.0* %cx_u514 to %struct.block*
  %blk_u516 = getelementptr inbounds %struct.block, %struct.block* %cx_blk515, i32 0, i32 7
  %blku_sub517 = bitcast %union.anon.1* %blk_u516 to %struct.block_sub*
  %argarray518 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub517, i32 0, i32 4
  %310 = load %struct.av*, %struct.av** %argarray518, align 8
  %sv_any519 = getelementptr inbounds %struct.av, %struct.av* %310, i32 0, i32 0
  %311 = load %struct.xpvav*, %struct.xpvav** %sv_any519, align 8
  %312 = bitcast %struct.xpvav* %311 to %struct.xpv*
  %xpv_pv520 = getelementptr inbounds %struct.xpv, %struct.xpv* %312, i32 0, i32 0
  store i8* %308, i8** %xpv_pv520, align 8
  %313 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u522 = getelementptr inbounds %struct.context, %struct.context* %313, i32 0, i32 1
  %cx_blk523 = bitcast %union.anon.0* %cx_u522 to %struct.block*
  %blk_u524 = getelementptr inbounds %struct.block, %struct.block* %cx_blk523, i32 0, i32 7
  %blku_sub525 = bitcast %union.anon.1* %blk_u524 to %struct.block_sub*
  %argarray526 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub525, i32 0, i32 4
  %314 = load %struct.av*, %struct.av** %argarray526, align 8
  %sv_any527 = getelementptr inbounds %struct.av, %struct.av* %314, i32 0, i32 0
  %315 = load %struct.xpvav*, %struct.xpvav** %sv_any527, align 8
  %xav_fill528 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %315, i32 0, i32 1
  store i64 -1, i64* %xav_fill528, align 8
  store i64 -1, i64* %tmp521
  %316 = load i64, i64* %tmp521
  br label %if.end.529

if.end.529:                                       ; preds = %if.else.480, %if.then.433
  br label %if.end.530

if.end.530:                                       ; preds = %if.end.529, %if.else.401
  %317 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u531 = getelementptr inbounds %struct.context, %struct.context* %317, i32 0, i32 1
  %cx_blk532 = bitcast %union.anon.0* %cx_u531 to %struct.block*
  %blk_u533 = getelementptr inbounds %struct.block, %struct.block* %cx_blk532, i32 0, i32 7
  %blku_sub534 = bitcast %union.anon.1* %blk_u533 to %struct.block_sub*
  %cv535 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub534, i32 0, i32 0
  %318 = load %struct.cv*, %struct.cv** %cv535, align 8
  %319 = bitcast %struct.cv* %318 to %struct.sv*
  store %struct.sv* %319, %struct.sv** %sv, align 8
  %320 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool536 = icmp ne %struct.sv* %320, null
  br i1 %tobool536, label %land.lhs.true.537, label %if.end.547

land.lhs.true.537:                                ; preds = %if.end.530
  %321 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u538 = getelementptr inbounds %struct.context, %struct.context* %321, i32 0, i32 1
  %cx_blk539 = bitcast %union.anon.0* %cx_u538 to %struct.block*
  %blk_u540 = getelementptr inbounds %struct.block, %struct.block* %cx_blk539, i32 0, i32 7
  %blku_sub541 = bitcast %union.anon.1* %blk_u540 to %struct.block_sub*
  %olddepth542 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub541, i32 0, i32 5
  %322 = load i64, i64* %olddepth542, align 8
  %323 = load %struct.sv*, %struct.sv** %sv, align 8
  %324 = bitcast %struct.sv* %323 to %struct.cv*
  %sv_any543 = getelementptr inbounds %struct.cv, %struct.cv* %324, i32 0, i32 0
  %325 = load %struct.xpvcv*, %struct.xpvcv** %sv_any543, align 8
  %xcv_depth544 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %325, i32 0, i32 14
  store i64 %322, i64* %xcv_depth544, align 8
  %tobool545 = icmp ne i64 %322, 0
  br i1 %tobool545, label %if.then.546, label %if.end.547

if.then.546:                                      ; preds = %land.lhs.true.537
  store %struct.sv* null, %struct.sv** %sv, align 8
  br label %if.end.547

if.end.547:                                       ; preds = %if.then.546, %land.lhs.true.537, %if.end.530
  %326 = load %struct.pmop*, %struct.pmop** %newpm, align 8
  store %struct.pmop* %326, %struct.pmop** @PL_curpm, align 8
  %327 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool548 = icmp ne %struct.sv* %327, null
  br i1 %tobool548, label %if.then.549, label %if.end.550

if.then.549:                                      ; preds = %if.end.547
  %328 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_free(%struct.sv* %328)
  br label %if.end.550

if.end.550:                                       ; preds = %if.then.549, %if.end.547
  %329 = load %struct.sv**, %struct.sv*** %mark, align 8
  %330 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp551 = icmp ugt %struct.sv** %329, %330
  %cond553 = select i1 %cmp551, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35, i32 0, i32 0)
  %call554 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.33, i32 0, i32 0), i8* %cond553)
  store %struct.op* %call554, %struct.op** %retval
  br label %return

if.end.555:                                       ; preds = %if.end.400
  %331 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv** %331, %struct.sv*** %sp, align 8
  br label %if.end.758

if.else.556:                                      ; preds = %if.end.216
  %332 = load i32, i32* %gimme, align 4
  %cmp557 = icmp eq i32 %332, 1
  br i1 %cmp557, label %if.then.559, label %if.end.757

if.then.559:                                      ; preds = %if.else.556
  %333 = load i32, i32* @PL_tmps_ix, align 4
  %conv560 = sext i32 %333 to i64
  %334 = load %struct.sv**, %struct.sv*** %sp, align 8
  %335 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %sub.ptr.lhs.cast561 = ptrtoint %struct.sv** %334 to i64
  %sub.ptr.rhs.cast562 = ptrtoint %struct.sv** %335 to i64
  %sub.ptr.sub563 = sub i64 %sub.ptr.lhs.cast561, %sub.ptr.rhs.cast562
  %sub.ptr.div564 = sdiv exact i64 %sub.ptr.sub563, 8
  %add565 = add nsw i64 %conv560, %sub.ptr.div564
  %336 = load i32, i32* @PL_tmps_max, align 4
  %conv566 = sext i32 %336 to i64
  %cmp567 = icmp sge i64 %add565, %conv566
  br i1 %cmp567, label %if.then.569, label %if.end.575

if.then.569:                                      ; preds = %if.then.559
  %337 = load %struct.sv**, %struct.sv*** %sp, align 8
  %338 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %sub.ptr.lhs.cast570 = ptrtoint %struct.sv** %337 to i64
  %sub.ptr.rhs.cast571 = ptrtoint %struct.sv** %338 to i64
  %sub.ptr.sub572 = sub i64 %sub.ptr.lhs.cast570, %sub.ptr.rhs.cast571
  %sub.ptr.div573 = sdiv exact i64 %sub.ptr.sub572, 8
  %conv574 = trunc i64 %sub.ptr.div573 to i32
  call void @Perl_tmps_grow(i32 %conv574)
  br label %if.end.575

if.end.575:                                       ; preds = %if.then.569, %if.then.559
  %339 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %add.ptr576 = getelementptr inbounds %struct.sv*, %struct.sv** %339, i64 1
  store %struct.sv** %add.ptr576, %struct.sv*** %mark, align 8
  br label %for.cond.577

for.cond.577:                                     ; preds = %for.inc.754, %if.end.575
  %340 = load %struct.sv**, %struct.sv*** %mark, align 8
  %341 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp578 = icmp ule %struct.sv** %340, %341
  br i1 %cmp578, label %for.body.580, label %for.end.756

for.body.580:                                     ; preds = %for.cond.577
  %342 = load %struct.sv**, %struct.sv*** %mark, align 8
  %343 = load %struct.sv*, %struct.sv** %342, align 8
  %cmp581 = icmp ne %struct.sv* %343, @PL_sv_undef
  br i1 %cmp581, label %land.lhs.true.583, label %if.else.742

land.lhs.true.583:                                ; preds = %for.body.580
  %344 = load %struct.sv**, %struct.sv*** %mark, align 8
  %345 = load %struct.sv*, %struct.sv** %344, align 8
  %sv_flags584 = getelementptr inbounds %struct.sv, %struct.sv* %345, i32 0, i32 2
  %346 = load i32, i32* %sv_flags584, align 4
  %and585 = and i32 %346, 8391168
  %tobool586 = icmp ne i32 %and585, 0
  br i1 %tobool586, label %if.then.587, label %if.else.742

if.then.587:                                      ; preds = %land.lhs.true.583
  %347 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %347, %struct.sv*** @PL_stack_sp, align 8
  call void @Perl_pop_scope()
  %348 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix588 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %348, i32 0, i32 2
  %349 = load i32, i32* %si_cxix588, align 4
  %dec589 = add nsw i32 %349, -1
  store i32 %dec589, i32* %si_cxix588, align 4
  %350 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u590 = getelementptr inbounds %struct.context, %struct.context* %350, i32 0, i32 1
  %cx_blk591 = bitcast %union.anon.0* %cx_u590 to %struct.block*
  %blk_u592 = getelementptr inbounds %struct.block, %struct.block* %cx_blk591, i32 0, i32 7
  %blku_sub593 = bitcast %union.anon.1* %blk_u592 to %struct.block_sub*
  %hasargs594 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub593, i32 0, i32 6
  %351 = load i8, i8* %hasargs594, align 1
  %tobool595 = icmp ne i8 %351, 0
  br i1 %tobool595, label %if.then.596, label %if.end.716

if.then.596:                                      ; preds = %if.then.587
  %352 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any597 = getelementptr inbounds %struct.gv, %struct.gv* %352, i32 0, i32 0
  %353 = load %struct.xpvgv*, %struct.xpvgv** %sv_any597, align 8
  %xgv_gp598 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %353, i32 0, i32 7
  %354 = load %struct.gp*, %struct.gp** %xgv_gp598, align 8
  %gp_av599 = getelementptr inbounds %struct.gp, %struct.gp* %354, i32 0, i32 4
  %355 = load %struct.av*, %struct.av** %gp_av599, align 8
  %356 = bitcast %struct.av* %355 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %356)
  %357 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u601 = getelementptr inbounds %struct.context, %struct.context* %357, i32 0, i32 1
  %cx_blk602 = bitcast %union.anon.0* %cx_u601 to %struct.block*
  %blk_u603 = getelementptr inbounds %struct.block, %struct.block* %cx_blk602, i32 0, i32 7
  %blku_sub604 = bitcast %union.anon.1* %blk_u603 to %struct.block_sub*
  %savearray605 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub604, i32 0, i32 3
  %358 = load %struct.av*, %struct.av** %savearray605, align 8
  %359 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any606 = getelementptr inbounds %struct.gv, %struct.gv* %359, i32 0, i32 0
  %360 = load %struct.xpvgv*, %struct.xpvgv** %sv_any606, align 8
  %xgv_gp607 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %360, i32 0, i32 7
  %361 = load %struct.gp*, %struct.gp** %xgv_gp607, align 8
  %gp_av608 = getelementptr inbounds %struct.gp, %struct.gp* %361, i32 0, i32 4
  store %struct.av* %358, %struct.av** %gp_av608, align 8
  store %struct.av* %358, %struct.av** %tmp600
  %362 = load %struct.av*, %struct.av** %tmp600
  %363 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u609 = getelementptr inbounds %struct.context, %struct.context* %363, i32 0, i32 1
  %cx_blk610 = bitcast %union.anon.0* %cx_u609 to %struct.block*
  %blk_u611 = getelementptr inbounds %struct.block, %struct.block* %cx_blk610, i32 0, i32 7
  %blku_sub612 = bitcast %union.anon.1* %blk_u611 to %struct.block_sub*
  %argarray613 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub612, i32 0, i32 4
  %364 = load %struct.av*, %struct.av** %argarray613, align 8
  %sv_any614 = getelementptr inbounds %struct.av, %struct.av* %364, i32 0, i32 0
  %365 = load %struct.xpvav*, %struct.xpvav** %sv_any614, align 8
  %xav_flags615 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %365, i32 0, i32 9
  %366 = load i8, i8* %xav_flags615, align 1
  %conv616 = zext i8 %366 to i32
  %and617 = and i32 %conv616, 1
  %tobool618 = icmp ne i32 %and617, 0
  br i1 %tobool618, label %if.then.619, label %if.else.666

if.then.619:                                      ; preds = %if.then.596
  %367 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u622 = getelementptr inbounds %struct.context, %struct.context* %367, i32 0, i32 1
  %cx_blk623 = bitcast %union.anon.0* %cx_u622 to %struct.block*
  %blk_u624 = getelementptr inbounds %struct.block, %struct.block* %cx_blk623, i32 0, i32 7
  %blku_sub625 = bitcast %union.anon.1* %blk_u624 to %struct.block_sub*
  %argarray626 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub625, i32 0, i32 4
  %368 = load %struct.av*, %struct.av** %argarray626, align 8
  %sv_any627 = getelementptr inbounds %struct.av, %struct.av* %368, i32 0, i32 0
  %369 = load %struct.xpvav*, %struct.xpvav** %sv_any627, align 8
  %xav_fill628 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %369, i32 0, i32 1
  %370 = load i64, i64* %xav_fill628, align 8
  store i64 %370, i64* %fill621, align 8
  %371 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u629 = getelementptr inbounds %struct.context, %struct.context* %371, i32 0, i32 1
  %cx_blk630 = bitcast %union.anon.0* %cx_u629 to %struct.block*
  %blk_u631 = getelementptr inbounds %struct.block, %struct.block* %cx_blk630, i32 0, i32 7
  %blku_sub632 = bitcast %union.anon.1* %blk_u631 to %struct.block_sub*
  %argarray633 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub632, i32 0, i32 4
  %372 = load %struct.av*, %struct.av** %argarray633, align 8
  %373 = bitcast %struct.av* %372 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %373)
  %call634 = call %struct.av* @Perl_newAV()
  %374 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u635 = getelementptr inbounds %struct.context, %struct.context* %374, i32 0, i32 1
  %cx_blk636 = bitcast %union.anon.0* %cx_u635 to %struct.block*
  %blk_u637 = getelementptr inbounds %struct.block, %struct.block* %cx_blk636, i32 0, i32 7
  %blku_sub638 = bitcast %union.anon.1* %blk_u637 to %struct.block_sub*
  %argarray639 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub638, i32 0, i32 4
  store %struct.av* %call634, %struct.av** %argarray639, align 8
  %375 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u640 = getelementptr inbounds %struct.context, %struct.context* %375, i32 0, i32 1
  %cx_blk641 = bitcast %union.anon.0* %cx_u640 to %struct.block*
  %blk_u642 = getelementptr inbounds %struct.block, %struct.block* %cx_blk641, i32 0, i32 7
  %blku_sub643 = bitcast %union.anon.1* %blk_u642 to %struct.block_sub*
  %argarray644 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub643, i32 0, i32 4
  %376 = load %struct.av*, %struct.av** %argarray644, align 8
  %377 = load i64, i64* %fill621, align 8
  %conv645 = trunc i64 %377 to i32
  call void @Perl_av_extend(%struct.av* %376, i32 %conv645)
  %378 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u646 = getelementptr inbounds %struct.context, %struct.context* %378, i32 0, i32 1
  %cx_blk647 = bitcast %union.anon.0* %cx_u646 to %struct.block*
  %blk_u648 = getelementptr inbounds %struct.block, %struct.block* %cx_blk647, i32 0, i32 7
  %blku_sub649 = bitcast %union.anon.1* %blk_u648 to %struct.block_sub*
  %argarray650 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub649, i32 0, i32 4
  %379 = load %struct.av*, %struct.av** %argarray650, align 8
  %sv_any651 = getelementptr inbounds %struct.av, %struct.av* %379, i32 0, i32 0
  %380 = load %struct.xpvav*, %struct.xpvav** %sv_any651, align 8
  %xav_flags652 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %380, i32 0, i32 9
  store i8 2, i8* %xav_flags652, align 1
  %381 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u653 = getelementptr inbounds %struct.context, %struct.context* %381, i32 0, i32 1
  %cx_blk654 = bitcast %union.anon.0* %cx_u653 to %struct.block*
  %blk_u655 = getelementptr inbounds %struct.block, %struct.block* %cx_blk654, i32 0, i32 7
  %blku_sub656 = bitcast %union.anon.1* %blk_u655 to %struct.block_sub*
  %argarray657 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub656, i32 0, i32 4
  %382 = load %struct.av*, %struct.av** %argarray657, align 8
  %383 = bitcast %struct.av* %382 to %struct.sv*
  %384 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u658 = getelementptr inbounds %struct.context, %struct.context* %384, i32 0, i32 1
  %cx_blk659 = bitcast %union.anon.0* %cx_u658 to %struct.block*
  %blk_u660 = getelementptr inbounds %struct.block, %struct.block* %cx_blk659, i32 0, i32 7
  %blku_sub661 = bitcast %union.anon.1* %blk_u660 to %struct.block_sub*
  %oldcomppad662 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub661, i32 0, i32 8
  %385 = load %struct.av*, %struct.av** %oldcomppad662, align 8
  %sv_any663 = getelementptr inbounds %struct.av, %struct.av* %385, i32 0, i32 0
  %386 = load %struct.xpvav*, %struct.xpvav** %sv_any663, align 8
  %xav_array664 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %386, i32 0, i32 0
  %387 = load i8*, i8** %xav_array664, align 8
  %388 = bitcast i8* %387 to %struct.sv**
  %arrayidx665 = getelementptr inbounds %struct.sv*, %struct.sv** %388, i64 0
  store %struct.sv* %383, %struct.sv** %arrayidx665, align 8
  br label %if.end.715

if.else.666:                                      ; preds = %if.then.596
  %389 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u667 = getelementptr inbounds %struct.context, %struct.context* %389, i32 0, i32 1
  %cx_blk668 = bitcast %union.anon.0* %cx_u667 to %struct.block*
  %blk_u669 = getelementptr inbounds %struct.block, %struct.block* %cx_blk668, i32 0, i32 7
  %blku_sub670 = bitcast %union.anon.1* %blk_u669 to %struct.block_sub*
  %argarray671 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub670, i32 0, i32 4
  %390 = load %struct.av*, %struct.av** %argarray671, align 8
  %sv_any672 = getelementptr inbounds %struct.av, %struct.av* %390, i32 0, i32 0
  %391 = load %struct.xpvav*, %struct.xpvav** %sv_any672, align 8
  %xav_array673 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %391, i32 0, i32 0
  %392 = load i8*, i8** %xav_array673, align 8
  %393 = bitcast i8* %392 to %struct.sv**
  %394 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u674 = getelementptr inbounds %struct.context, %struct.context* %394, i32 0, i32 1
  %cx_blk675 = bitcast %union.anon.0* %cx_u674 to %struct.block*
  %blk_u676 = getelementptr inbounds %struct.block, %struct.block* %cx_blk675, i32 0, i32 7
  %blku_sub677 = bitcast %union.anon.1* %blk_u676 to %struct.block_sub*
  %argarray678 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub677, i32 0, i32 4
  %395 = load %struct.av*, %struct.av** %argarray678, align 8
  %sv_any679 = getelementptr inbounds %struct.av, %struct.av* %395, i32 0, i32 0
  %396 = load %struct.xpvav*, %struct.xpvav** %sv_any679, align 8
  %xav_alloc680 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %396, i32 0, i32 7
  %397 = load %struct.sv**, %struct.sv*** %xav_alloc680, align 8
  %sub.ptr.lhs.cast681 = ptrtoint %struct.sv** %393 to i64
  %sub.ptr.rhs.cast682 = ptrtoint %struct.sv** %397 to i64
  %sub.ptr.sub683 = sub i64 %sub.ptr.lhs.cast681, %sub.ptr.rhs.cast682
  %sub.ptr.div684 = sdiv exact i64 %sub.ptr.sub683, 8
  %398 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u685 = getelementptr inbounds %struct.context, %struct.context* %398, i32 0, i32 1
  %cx_blk686 = bitcast %union.anon.0* %cx_u685 to %struct.block*
  %blk_u687 = getelementptr inbounds %struct.block, %struct.block* %cx_blk686, i32 0, i32 7
  %blku_sub688 = bitcast %union.anon.1* %blk_u687 to %struct.block_sub*
  %argarray689 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub688, i32 0, i32 4
  %399 = load %struct.av*, %struct.av** %argarray689, align 8
  %sv_any690 = getelementptr inbounds %struct.av, %struct.av* %399, i32 0, i32 0
  %400 = load %struct.xpvav*, %struct.xpvav** %sv_any690, align 8
  %xav_max691 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %400, i32 0, i32 2
  %401 = load i64, i64* %xav_max691, align 8
  %add692 = add nsw i64 %401, %sub.ptr.div684
  store i64 %add692, i64* %xav_max691, align 8
  %402 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u693 = getelementptr inbounds %struct.context, %struct.context* %402, i32 0, i32 1
  %cx_blk694 = bitcast %union.anon.0* %cx_u693 to %struct.block*
  %blk_u695 = getelementptr inbounds %struct.block, %struct.block* %cx_blk694, i32 0, i32 7
  %blku_sub696 = bitcast %union.anon.1* %blk_u695 to %struct.block_sub*
  %argarray697 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub696, i32 0, i32 4
  %403 = load %struct.av*, %struct.av** %argarray697, align 8
  %sv_any698 = getelementptr inbounds %struct.av, %struct.av* %403, i32 0, i32 0
  %404 = load %struct.xpvav*, %struct.xpvav** %sv_any698, align 8
  %xav_alloc699 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %404, i32 0, i32 7
  %405 = load %struct.sv**, %struct.sv*** %xav_alloc699, align 8
  %406 = bitcast %struct.sv** %405 to i8*
  %407 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u700 = getelementptr inbounds %struct.context, %struct.context* %407, i32 0, i32 1
  %cx_blk701 = bitcast %union.anon.0* %cx_u700 to %struct.block*
  %blk_u702 = getelementptr inbounds %struct.block, %struct.block* %cx_blk701, i32 0, i32 7
  %blku_sub703 = bitcast %union.anon.1* %blk_u702 to %struct.block_sub*
  %argarray704 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub703, i32 0, i32 4
  %408 = load %struct.av*, %struct.av** %argarray704, align 8
  %sv_any705 = getelementptr inbounds %struct.av, %struct.av* %408, i32 0, i32 0
  %409 = load %struct.xpvav*, %struct.xpvav** %sv_any705, align 8
  %410 = bitcast %struct.xpvav* %409 to %struct.xpv*
  %xpv_pv706 = getelementptr inbounds %struct.xpv, %struct.xpv* %410, i32 0, i32 0
  store i8* %406, i8** %xpv_pv706, align 8
  %411 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u708 = getelementptr inbounds %struct.context, %struct.context* %411, i32 0, i32 1
  %cx_blk709 = bitcast %union.anon.0* %cx_u708 to %struct.block*
  %blk_u710 = getelementptr inbounds %struct.block, %struct.block* %cx_blk709, i32 0, i32 7
  %blku_sub711 = bitcast %union.anon.1* %blk_u710 to %struct.block_sub*
  %argarray712 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub711, i32 0, i32 4
  %412 = load %struct.av*, %struct.av** %argarray712, align 8
  %sv_any713 = getelementptr inbounds %struct.av, %struct.av* %412, i32 0, i32 0
  %413 = load %struct.xpvav*, %struct.xpvav** %sv_any713, align 8
  %xav_fill714 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %413, i32 0, i32 1
  store i64 -1, i64* %xav_fill714, align 8
  store i64 -1, i64* %tmp707
  %414 = load i64, i64* %tmp707
  br label %if.end.715

if.end.715:                                       ; preds = %if.else.666, %if.then.619
  br label %if.end.716

if.end.716:                                       ; preds = %if.end.715, %if.then.587
  %415 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u717 = getelementptr inbounds %struct.context, %struct.context* %415, i32 0, i32 1
  %cx_blk718 = bitcast %union.anon.0* %cx_u717 to %struct.block*
  %blk_u719 = getelementptr inbounds %struct.block, %struct.block* %cx_blk718, i32 0, i32 7
  %blku_sub720 = bitcast %union.anon.1* %blk_u719 to %struct.block_sub*
  %cv721 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub720, i32 0, i32 0
  %416 = load %struct.cv*, %struct.cv** %cv721, align 8
  %417 = bitcast %struct.cv* %416 to %struct.sv*
  store %struct.sv* %417, %struct.sv** %sv, align 8
  %418 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool722 = icmp ne %struct.sv* %418, null
  br i1 %tobool722, label %land.lhs.true.723, label %if.end.733

land.lhs.true.723:                                ; preds = %if.end.716
  %419 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u724 = getelementptr inbounds %struct.context, %struct.context* %419, i32 0, i32 1
  %cx_blk725 = bitcast %union.anon.0* %cx_u724 to %struct.block*
  %blk_u726 = getelementptr inbounds %struct.block, %struct.block* %cx_blk725, i32 0, i32 7
  %blku_sub727 = bitcast %union.anon.1* %blk_u726 to %struct.block_sub*
  %olddepth728 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub727, i32 0, i32 5
  %420 = load i64, i64* %olddepth728, align 8
  %421 = load %struct.sv*, %struct.sv** %sv, align 8
  %422 = bitcast %struct.sv* %421 to %struct.cv*
  %sv_any729 = getelementptr inbounds %struct.cv, %struct.cv* %422, i32 0, i32 0
  %423 = load %struct.xpvcv*, %struct.xpvcv** %sv_any729, align 8
  %xcv_depth730 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %423, i32 0, i32 14
  store i64 %420, i64* %xcv_depth730, align 8
  %tobool731 = icmp ne i64 %420, 0
  br i1 %tobool731, label %if.then.732, label %if.end.733

if.then.732:                                      ; preds = %land.lhs.true.723
  store %struct.sv* null, %struct.sv** %sv, align 8
  br label %if.end.733

if.end.733:                                       ; preds = %if.then.732, %land.lhs.true.723, %if.end.716
  %424 = load %struct.pmop*, %struct.pmop** %newpm, align 8
  store %struct.pmop* %424, %struct.pmop** @PL_curpm, align 8
  %425 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool734 = icmp ne %struct.sv* %425, null
  br i1 %tobool734, label %if.then.735, label %if.end.736

if.then.735:                                      ; preds = %if.end.733
  %426 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_free(%struct.sv* %426)
  br label %if.end.736

if.end.736:                                       ; preds = %if.then.735, %if.end.733
  %427 = load %struct.sv**, %struct.sv*** %sp, align 8
  %428 = load %struct.sv*, %struct.sv** %427, align 8
  %sv_flags737 = getelementptr inbounds %struct.sv, %struct.sv* %428, i32 0, i32 2
  %429 = load i32, i32* %sv_flags737, align 4
  %and738 = and i32 %429, 8388608
  %tobool739 = icmp ne i32 %and738, 0
  %cond740 = select i1 %tobool739, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.38, i32 0, i32 0)
  %call741 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.36, i32 0, i32 0), i8* %cond740)
  store %struct.op* %call741, %struct.op** %retval
  br label %return

if.else.742:                                      ; preds = %land.lhs.true.583, %for.body.580
  %430 = load %struct.sv**, %struct.sv*** %mark, align 8
  %431 = load %struct.sv*, %struct.sv** %430, align 8
  %432 = load i32, i32* @PL_tmps_ix, align 4
  %inc743 = add nsw i32 %432, 1
  store i32 %inc743, i32* @PL_tmps_ix, align 4
  %idxprom744 = sext i32 %inc743 to i64
  %433 = load %struct.sv**, %struct.sv*** @PL_tmps_stack, align 8
  %arrayidx745 = getelementptr inbounds %struct.sv*, %struct.sv** %433, i64 %idxprom744
  store %struct.sv* %431, %struct.sv** %arrayidx745, align 8
  %434 = load %struct.sv**, %struct.sv*** %mark, align 8
  %435 = load %struct.sv*, %struct.sv** %434, align 8
  store %struct.sv* %435, %struct.sv** @PL_Sv, align 8
  %436 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool746 = icmp ne %struct.sv* %436, null
  br i1 %tobool746, label %land.rhs.747, label %land.end.751

land.rhs.747:                                     ; preds = %if.else.742
  %437 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt748 = getelementptr inbounds %struct.sv, %struct.sv* %437, i32 0, i32 1
  %438 = load i32, i32* %sv_refcnt748, align 4
  %inc749 = add i32 %438, 1
  store i32 %inc749, i32* %sv_refcnt748, align 4
  %tobool750 = icmp ne i32 %inc749, 0
  br label %land.end.751

land.end.751:                                     ; preds = %land.rhs.747, %if.else.742
  %439 = phi i1 [ false, %if.else.742 ], [ %tobool750, %land.rhs.747 ]
  %land.ext752 = zext i1 %439 to i32
  %440 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  br label %if.end.753

if.end.753:                                       ; preds = %land.end.751
  br label %for.inc.754

for.inc.754:                                      ; preds = %if.end.753
  %441 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr755 = getelementptr inbounds %struct.sv*, %struct.sv** %441, i32 1
  store %struct.sv** %incdec.ptr755, %struct.sv*** %mark, align 8
  br label %for.cond.577

for.end.756:                                      ; preds = %for.cond.577
  br label %if.end.757

if.end.757:                                       ; preds = %for.end.756, %if.else.556
  br label %if.end.758

if.end.758:                                       ; preds = %if.end.757, %if.end.555
  br label %if.end.863

if.else.759:                                      ; preds = %if.else.64
  %442 = load i32, i32* %gimme, align 4
  %cmp760 = icmp eq i32 %442, 0
  br i1 %cmp760, label %if.then.762, label %if.else.843

if.then.762:                                      ; preds = %if.else.759
  br label %temporise

temporise:                                        ; preds = %if.then.762, %if.then.20
  %443 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %add.ptr763 = getelementptr inbounds %struct.sv*, %struct.sv** %443, i64 1
  store %struct.sv** %add.ptr763, %struct.sv*** %mark, align 8
  %444 = load %struct.sv**, %struct.sv*** %mark, align 8
  %445 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp764 = icmp ule %struct.sv** %444, %445
  br i1 %cmp764, label %if.then.766, label %if.else.824

if.then.766:                                      ; preds = %temporise
  %446 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u767 = getelementptr inbounds %struct.context, %struct.context* %446, i32 0, i32 1
  %cx_blk768 = bitcast %union.anon.0* %cx_u767 to %struct.block*
  %blk_u769 = getelementptr inbounds %struct.block, %struct.block* %cx_blk768, i32 0, i32 7
  %blku_sub770 = bitcast %union.anon.1* %blk_u769 to %struct.block_sub*
  %cv771 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub770, i32 0, i32 0
  %447 = load %struct.cv*, %struct.cv** %cv771, align 8
  %tobool772 = icmp ne %struct.cv* %447, null
  br i1 %tobool772, label %land.lhs.true.773, label %if.else.814

land.lhs.true.773:                                ; preds = %if.then.766
  %448 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u774 = getelementptr inbounds %struct.context, %struct.context* %448, i32 0, i32 1
  %cx_blk775 = bitcast %union.anon.0* %cx_u774 to %struct.block*
  %blk_u776 = getelementptr inbounds %struct.block, %struct.block* %cx_blk775, i32 0, i32 7
  %blku_sub777 = bitcast %union.anon.1* %blk_u776 to %struct.block_sub*
  %cv778 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub777, i32 0, i32 0
  %449 = load %struct.cv*, %struct.cv** %cv778, align 8
  %sv_any779 = getelementptr inbounds %struct.cv, %struct.cv* %449, i32 0, i32 0
  %450 = load %struct.xpvcv*, %struct.xpvcv** %sv_any779, align 8
  %xcv_depth780 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %450, i32 0, i32 14
  %451 = load i64, i64* %xcv_depth780, align 8
  %cmp781 = icmp sgt i64 %451, 1
  br i1 %cmp781, label %if.then.783, label %if.else.814

if.then.783:                                      ; preds = %land.lhs.true.773
  %452 = load %struct.sv**, %struct.sv*** %sp, align 8
  %453 = load %struct.sv*, %struct.sv** %452, align 8
  %sv_flags784 = getelementptr inbounds %struct.sv, %struct.sv* %453, i32 0, i32 2
  %454 = load i32, i32* %sv_flags784, align 4
  %and785 = and i32 %454, 2048
  %tobool786 = icmp ne i32 %and785, 0
  br i1 %tobool786, label %if.then.787, label %if.else.800

if.then.787:                                      ; preds = %if.then.783
  %455 = load %struct.sv**, %struct.sv*** %sp, align 8
  %456 = load %struct.sv*, %struct.sv** %455, align 8
  store %struct.sv* %456, %struct.sv** @PL_Sv, align 8
  %457 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool788 = icmp ne %struct.sv* %457, null
  br i1 %tobool788, label %land.rhs.789, label %land.end.793

land.rhs.789:                                     ; preds = %if.then.787
  %458 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt790 = getelementptr inbounds %struct.sv, %struct.sv* %458, i32 0, i32 1
  %459 = load i32, i32* %sv_refcnt790, align 4
  %inc791 = add i32 %459, 1
  store i32 %inc791, i32* %sv_refcnt790, align 4
  %tobool792 = icmp ne i32 %inc791, 0
  br label %land.end.793

land.end.793:                                     ; preds = %land.rhs.789, %if.then.787
  %460 = phi i1 [ false, %if.then.787 ], [ %tobool792, %land.rhs.789 ]
  %land.ext794 = zext i1 %460 to i32
  %461 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %462 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %461, %struct.sv** %462, align 8
  %463 = load i32, i32* @PL_tmps_ix, align 4
  %464 = load i32, i32* @PL_tmps_floor, align 4
  %cmp795 = icmp sgt i32 %463, %464
  br i1 %cmp795, label %if.then.797, label %if.end.798

if.then.797:                                      ; preds = %land.end.793
  call void @Perl_free_tmps()
  br label %if.end.798

if.end.798:                                       ; preds = %if.then.797, %land.end.793
  %465 = load %struct.sv**, %struct.sv*** %mark, align 8
  %466 = load %struct.sv*, %struct.sv** %465, align 8
  %call799 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %466)
  br label %if.end.813

if.else.800:                                      ; preds = %if.then.783
  %467 = load %struct.sv**, %struct.sv*** %sp, align 8
  %468 = load %struct.sv*, %struct.sv** %467, align 8
  store %struct.sv* %468, %struct.sv** @PL_Sv, align 8
  %469 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool801 = icmp ne %struct.sv* %469, null
  br i1 %tobool801, label %land.rhs.802, label %land.end.806

land.rhs.802:                                     ; preds = %if.else.800
  %470 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt803 = getelementptr inbounds %struct.sv, %struct.sv* %470, i32 0, i32 1
  %471 = load i32, i32* %sv_refcnt803, align 4
  %inc804 = add i32 %471, 1
  store i32 %inc804, i32* %sv_refcnt803, align 4
  %tobool805 = icmp ne i32 %inc804, 0
  br label %land.end.806

land.end.806:                                     ; preds = %land.rhs.802, %if.else.800
  %472 = phi i1 [ false, %if.else.800 ], [ %tobool805, %land.rhs.802 ]
  %land.ext807 = zext i1 %472 to i32
  %473 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  store %struct.sv* %473, %struct.sv** %sv, align 8
  %474 = load i32, i32* @PL_tmps_ix, align 4
  %475 = load i32, i32* @PL_tmps_floor, align 4
  %cmp808 = icmp sgt i32 %474, %475
  br i1 %cmp808, label %if.then.810, label %if.end.811

if.then.810:                                      ; preds = %land.end.806
  call void @Perl_free_tmps()
  br label %if.end.811

if.end.811:                                       ; preds = %if.then.810, %land.end.806
  %476 = load %struct.sv*, %struct.sv** %sv, align 8
  %call812 = call %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %476)
  %477 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %call812, %struct.sv** %477, align 8
  %478 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_free(%struct.sv* %478)
  br label %if.end.813

if.end.813:                                       ; preds = %if.end.811, %if.end.798
  br label %if.end.823

if.else.814:                                      ; preds = %land.lhs.true.773, %if.then.766
  %479 = load %struct.sv**, %struct.sv*** %sp, align 8
  %480 = load %struct.sv*, %struct.sv** %479, align 8
  %sv_flags815 = getelementptr inbounds %struct.sv, %struct.sv* %480, i32 0, i32 2
  %481 = load i32, i32* %sv_flags815, align 4
  %and816 = and i32 %481, 2048
  %tobool817 = icmp ne i32 %and816, 0
  br i1 %tobool817, label %cond.true.818, label %cond.false.819

cond.true.818:                                    ; preds = %if.else.814
  %482 = load %struct.sv**, %struct.sv*** %sp, align 8
  %483 = load %struct.sv*, %struct.sv** %482, align 8
  br label %cond.end.821

cond.false.819:                                   ; preds = %if.else.814
  %484 = load %struct.sv**, %struct.sv*** %sp, align 8
  %485 = load %struct.sv*, %struct.sv** %484, align 8
  %call820 = call %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %485)
  br label %cond.end.821

cond.end.821:                                     ; preds = %cond.false.819, %cond.true.818
  %cond822 = phi %struct.sv* [ %483, %cond.true.818 ], [ %call820, %cond.false.819 ]
  %486 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %cond822, %struct.sv** %486, align 8
  br label %if.end.823

if.end.823:                                       ; preds = %cond.end.821, %if.end.813
  br label %if.end.842

if.else.824:                                      ; preds = %temporise
  %487 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %488 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast825 = ptrtoint %struct.sv** %487 to i64
  %sub.ptr.rhs.cast826 = ptrtoint %struct.sv** %488 to i64
  %sub.ptr.sub827 = sub i64 %sub.ptr.lhs.cast825, %sub.ptr.rhs.cast826
  %sub.ptr.div828 = sdiv exact i64 %sub.ptr.sub827, 8
  %cmp829 = icmp slt i64 %sub.ptr.div828, 0
  br i1 %cmp829, label %if.then.831, label %if.end.841

if.then.831:                                      ; preds = %if.else.824
  %489 = load %struct.sv**, %struct.sv*** %mark, align 8
  %490 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast833 = ptrtoint %struct.sv** %489 to i64
  %sub.ptr.rhs.cast834 = ptrtoint %struct.sv** %490 to i64
  %sub.ptr.sub835 = sub i64 %sub.ptr.lhs.cast833, %sub.ptr.rhs.cast834
  %sub.ptr.div836 = sdiv exact i64 %sub.ptr.sub835, 8
  %conv837 = trunc i64 %sub.ptr.div836 to i32
  store i32 %conv837, i32* %markoff, align 4
  %491 = load %struct.sv**, %struct.sv*** %sp, align 8
  %492 = load %struct.sv**, %struct.sv*** %mark, align 8
  %call838 = call %struct.sv** @Perl_stack_grow(%struct.sv** %491, %struct.sv** %492, i32 0)
  store %struct.sv** %call838, %struct.sv*** %sp, align 8
  %493 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %494 = load i32, i32* %markoff, align 4
  %idx.ext839 = sext i32 %494 to i64
  %add.ptr840 = getelementptr inbounds %struct.sv*, %struct.sv** %493, i64 %idx.ext839
  store %struct.sv** %add.ptr840, %struct.sv*** %mark, align 8
  br label %if.end.841

if.end.841:                                       ; preds = %if.then.831, %if.else.824
  %495 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %495, align 8
  br label %if.end.842

if.end.842:                                       ; preds = %if.end.841, %if.end.823
  %496 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv** %496, %struct.sv*** %sp, align 8
  br label %if.end.862

if.else.843:                                      ; preds = %if.else.759
  %497 = load i32, i32* %gimme, align 4
  %cmp844 = icmp eq i32 %497, 1
  br i1 %cmp844, label %if.then.846, label %if.end.861

if.then.846:                                      ; preds = %if.else.843
  br label %temporise_array

temporise_array:                                  ; preds = %if.then.846, %if.then.31
  %498 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %add.ptr847 = getelementptr inbounds %struct.sv*, %struct.sv** %498, i64 1
  store %struct.sv** %add.ptr847, %struct.sv*** %mark, align 8
  br label %for.cond.848

for.cond.848:                                     ; preds = %for.inc.858, %temporise_array
  %499 = load %struct.sv**, %struct.sv*** %mark, align 8
  %500 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp849 = icmp ule %struct.sv** %499, %500
  br i1 %cmp849, label %for.body.851, label %for.end.860

for.body.851:                                     ; preds = %for.cond.848
  %501 = load %struct.sv**, %struct.sv*** %mark, align 8
  %502 = load %struct.sv*, %struct.sv** %501, align 8
  %sv_flags852 = getelementptr inbounds %struct.sv, %struct.sv* %502, i32 0, i32 2
  %503 = load i32, i32* %sv_flags852, align 4
  %and853 = and i32 %503, 2048
  %tobool854 = icmp ne i32 %and853, 0
  br i1 %tobool854, label %if.end.857, label %if.then.855

if.then.855:                                      ; preds = %for.body.851
  %504 = load %struct.sv**, %struct.sv*** %mark, align 8
  %505 = load %struct.sv*, %struct.sv** %504, align 8
  %call856 = call %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %505)
  %506 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %call856, %struct.sv** %506, align 8
  store i8 0, i8* @PL_tainted, align 1
  br label %if.end.857

if.end.857:                                       ; preds = %if.then.855, %for.body.851
  br label %for.inc.858

for.inc.858:                                      ; preds = %if.end.857
  %507 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr859 = getelementptr inbounds %struct.sv*, %struct.sv** %507, i32 1
  store %struct.sv** %incdec.ptr859, %struct.sv*** %mark, align 8
  br label %for.cond.848

for.end.860:                                      ; preds = %for.cond.848
  br label %if.end.861

if.end.861:                                       ; preds = %for.end.860, %if.else.843
  br label %if.end.862

if.end.862:                                       ; preds = %if.end.861, %if.end.842
  br label %if.end.863

if.end.863:                                       ; preds = %if.end.862, %if.end.758
  br label %if.end.864

if.end.864:                                       ; preds = %if.end.863, %if.end.63
  %508 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %508, %struct.sv*** @PL_stack_sp, align 8
  call void @Perl_pop_scope()
  %509 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix865 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %509, i32 0, i32 2
  %510 = load i32, i32* %si_cxix865, align 4
  %dec866 = add nsw i32 %510, -1
  store i32 %dec866, i32* %si_cxix865, align 4
  %511 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u867 = getelementptr inbounds %struct.context, %struct.context* %511, i32 0, i32 1
  %cx_blk868 = bitcast %union.anon.0* %cx_u867 to %struct.block*
  %blk_u869 = getelementptr inbounds %struct.block, %struct.block* %cx_blk868, i32 0, i32 7
  %blku_sub870 = bitcast %union.anon.1* %blk_u869 to %struct.block_sub*
  %hasargs871 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub870, i32 0, i32 6
  %512 = load i8, i8* %hasargs871, align 1
  %tobool872 = icmp ne i8 %512, 0
  br i1 %tobool872, label %if.then.873, label %if.end.993

if.then.873:                                      ; preds = %if.end.864
  %513 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any874 = getelementptr inbounds %struct.gv, %struct.gv* %513, i32 0, i32 0
  %514 = load %struct.xpvgv*, %struct.xpvgv** %sv_any874, align 8
  %xgv_gp875 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %514, i32 0, i32 7
  %515 = load %struct.gp*, %struct.gp** %xgv_gp875, align 8
  %gp_av876 = getelementptr inbounds %struct.gp, %struct.gp* %515, i32 0, i32 4
  %516 = load %struct.av*, %struct.av** %gp_av876, align 8
  %517 = bitcast %struct.av* %516 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %517)
  %518 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u878 = getelementptr inbounds %struct.context, %struct.context* %518, i32 0, i32 1
  %cx_blk879 = bitcast %union.anon.0* %cx_u878 to %struct.block*
  %blk_u880 = getelementptr inbounds %struct.block, %struct.block* %cx_blk879, i32 0, i32 7
  %blku_sub881 = bitcast %union.anon.1* %blk_u880 to %struct.block_sub*
  %savearray882 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub881, i32 0, i32 3
  %519 = load %struct.av*, %struct.av** %savearray882, align 8
  %520 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any883 = getelementptr inbounds %struct.gv, %struct.gv* %520, i32 0, i32 0
  %521 = load %struct.xpvgv*, %struct.xpvgv** %sv_any883, align 8
  %xgv_gp884 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %521, i32 0, i32 7
  %522 = load %struct.gp*, %struct.gp** %xgv_gp884, align 8
  %gp_av885 = getelementptr inbounds %struct.gp, %struct.gp* %522, i32 0, i32 4
  store %struct.av* %519, %struct.av** %gp_av885, align 8
  store %struct.av* %519, %struct.av** %tmp877
  %523 = load %struct.av*, %struct.av** %tmp877
  %524 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u886 = getelementptr inbounds %struct.context, %struct.context* %524, i32 0, i32 1
  %cx_blk887 = bitcast %union.anon.0* %cx_u886 to %struct.block*
  %blk_u888 = getelementptr inbounds %struct.block, %struct.block* %cx_blk887, i32 0, i32 7
  %blku_sub889 = bitcast %union.anon.1* %blk_u888 to %struct.block_sub*
  %argarray890 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub889, i32 0, i32 4
  %525 = load %struct.av*, %struct.av** %argarray890, align 8
  %sv_any891 = getelementptr inbounds %struct.av, %struct.av* %525, i32 0, i32 0
  %526 = load %struct.xpvav*, %struct.xpvav** %sv_any891, align 8
  %xav_flags892 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %526, i32 0, i32 9
  %527 = load i8, i8* %xav_flags892, align 1
  %conv893 = zext i8 %527 to i32
  %and894 = and i32 %conv893, 1
  %tobool895 = icmp ne i32 %and894, 0
  br i1 %tobool895, label %if.then.896, label %if.else.943

if.then.896:                                      ; preds = %if.then.873
  %528 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u899 = getelementptr inbounds %struct.context, %struct.context* %528, i32 0, i32 1
  %cx_blk900 = bitcast %union.anon.0* %cx_u899 to %struct.block*
  %blk_u901 = getelementptr inbounds %struct.block, %struct.block* %cx_blk900, i32 0, i32 7
  %blku_sub902 = bitcast %union.anon.1* %blk_u901 to %struct.block_sub*
  %argarray903 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub902, i32 0, i32 4
  %529 = load %struct.av*, %struct.av** %argarray903, align 8
  %sv_any904 = getelementptr inbounds %struct.av, %struct.av* %529, i32 0, i32 0
  %530 = load %struct.xpvav*, %struct.xpvav** %sv_any904, align 8
  %xav_fill905 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %530, i32 0, i32 1
  %531 = load i64, i64* %xav_fill905, align 8
  store i64 %531, i64* %fill898, align 8
  %532 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u906 = getelementptr inbounds %struct.context, %struct.context* %532, i32 0, i32 1
  %cx_blk907 = bitcast %union.anon.0* %cx_u906 to %struct.block*
  %blk_u908 = getelementptr inbounds %struct.block, %struct.block* %cx_blk907, i32 0, i32 7
  %blku_sub909 = bitcast %union.anon.1* %blk_u908 to %struct.block_sub*
  %argarray910 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub909, i32 0, i32 4
  %533 = load %struct.av*, %struct.av** %argarray910, align 8
  %534 = bitcast %struct.av* %533 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %534)
  %call911 = call %struct.av* @Perl_newAV()
  %535 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u912 = getelementptr inbounds %struct.context, %struct.context* %535, i32 0, i32 1
  %cx_blk913 = bitcast %union.anon.0* %cx_u912 to %struct.block*
  %blk_u914 = getelementptr inbounds %struct.block, %struct.block* %cx_blk913, i32 0, i32 7
  %blku_sub915 = bitcast %union.anon.1* %blk_u914 to %struct.block_sub*
  %argarray916 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub915, i32 0, i32 4
  store %struct.av* %call911, %struct.av** %argarray916, align 8
  %536 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u917 = getelementptr inbounds %struct.context, %struct.context* %536, i32 0, i32 1
  %cx_blk918 = bitcast %union.anon.0* %cx_u917 to %struct.block*
  %blk_u919 = getelementptr inbounds %struct.block, %struct.block* %cx_blk918, i32 0, i32 7
  %blku_sub920 = bitcast %union.anon.1* %blk_u919 to %struct.block_sub*
  %argarray921 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub920, i32 0, i32 4
  %537 = load %struct.av*, %struct.av** %argarray921, align 8
  %538 = load i64, i64* %fill898, align 8
  %conv922 = trunc i64 %538 to i32
  call void @Perl_av_extend(%struct.av* %537, i32 %conv922)
  %539 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u923 = getelementptr inbounds %struct.context, %struct.context* %539, i32 0, i32 1
  %cx_blk924 = bitcast %union.anon.0* %cx_u923 to %struct.block*
  %blk_u925 = getelementptr inbounds %struct.block, %struct.block* %cx_blk924, i32 0, i32 7
  %blku_sub926 = bitcast %union.anon.1* %blk_u925 to %struct.block_sub*
  %argarray927 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub926, i32 0, i32 4
  %540 = load %struct.av*, %struct.av** %argarray927, align 8
  %sv_any928 = getelementptr inbounds %struct.av, %struct.av* %540, i32 0, i32 0
  %541 = load %struct.xpvav*, %struct.xpvav** %sv_any928, align 8
  %xav_flags929 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %541, i32 0, i32 9
  store i8 2, i8* %xav_flags929, align 1
  %542 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u930 = getelementptr inbounds %struct.context, %struct.context* %542, i32 0, i32 1
  %cx_blk931 = bitcast %union.anon.0* %cx_u930 to %struct.block*
  %blk_u932 = getelementptr inbounds %struct.block, %struct.block* %cx_blk931, i32 0, i32 7
  %blku_sub933 = bitcast %union.anon.1* %blk_u932 to %struct.block_sub*
  %argarray934 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub933, i32 0, i32 4
  %543 = load %struct.av*, %struct.av** %argarray934, align 8
  %544 = bitcast %struct.av* %543 to %struct.sv*
  %545 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u935 = getelementptr inbounds %struct.context, %struct.context* %545, i32 0, i32 1
  %cx_blk936 = bitcast %union.anon.0* %cx_u935 to %struct.block*
  %blk_u937 = getelementptr inbounds %struct.block, %struct.block* %cx_blk936, i32 0, i32 7
  %blku_sub938 = bitcast %union.anon.1* %blk_u937 to %struct.block_sub*
  %oldcomppad939 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub938, i32 0, i32 8
  %546 = load %struct.av*, %struct.av** %oldcomppad939, align 8
  %sv_any940 = getelementptr inbounds %struct.av, %struct.av* %546, i32 0, i32 0
  %547 = load %struct.xpvav*, %struct.xpvav** %sv_any940, align 8
  %xav_array941 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %547, i32 0, i32 0
  %548 = load i8*, i8** %xav_array941, align 8
  %549 = bitcast i8* %548 to %struct.sv**
  %arrayidx942 = getelementptr inbounds %struct.sv*, %struct.sv** %549, i64 0
  store %struct.sv* %544, %struct.sv** %arrayidx942, align 8
  br label %if.end.992

if.else.943:                                      ; preds = %if.then.873
  %550 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u944 = getelementptr inbounds %struct.context, %struct.context* %550, i32 0, i32 1
  %cx_blk945 = bitcast %union.anon.0* %cx_u944 to %struct.block*
  %blk_u946 = getelementptr inbounds %struct.block, %struct.block* %cx_blk945, i32 0, i32 7
  %blku_sub947 = bitcast %union.anon.1* %blk_u946 to %struct.block_sub*
  %argarray948 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub947, i32 0, i32 4
  %551 = load %struct.av*, %struct.av** %argarray948, align 8
  %sv_any949 = getelementptr inbounds %struct.av, %struct.av* %551, i32 0, i32 0
  %552 = load %struct.xpvav*, %struct.xpvav** %sv_any949, align 8
  %xav_array950 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %552, i32 0, i32 0
  %553 = load i8*, i8** %xav_array950, align 8
  %554 = bitcast i8* %553 to %struct.sv**
  %555 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u951 = getelementptr inbounds %struct.context, %struct.context* %555, i32 0, i32 1
  %cx_blk952 = bitcast %union.anon.0* %cx_u951 to %struct.block*
  %blk_u953 = getelementptr inbounds %struct.block, %struct.block* %cx_blk952, i32 0, i32 7
  %blku_sub954 = bitcast %union.anon.1* %blk_u953 to %struct.block_sub*
  %argarray955 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub954, i32 0, i32 4
  %556 = load %struct.av*, %struct.av** %argarray955, align 8
  %sv_any956 = getelementptr inbounds %struct.av, %struct.av* %556, i32 0, i32 0
  %557 = load %struct.xpvav*, %struct.xpvav** %sv_any956, align 8
  %xav_alloc957 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %557, i32 0, i32 7
  %558 = load %struct.sv**, %struct.sv*** %xav_alloc957, align 8
  %sub.ptr.lhs.cast958 = ptrtoint %struct.sv** %554 to i64
  %sub.ptr.rhs.cast959 = ptrtoint %struct.sv** %558 to i64
  %sub.ptr.sub960 = sub i64 %sub.ptr.lhs.cast958, %sub.ptr.rhs.cast959
  %sub.ptr.div961 = sdiv exact i64 %sub.ptr.sub960, 8
  %559 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u962 = getelementptr inbounds %struct.context, %struct.context* %559, i32 0, i32 1
  %cx_blk963 = bitcast %union.anon.0* %cx_u962 to %struct.block*
  %blk_u964 = getelementptr inbounds %struct.block, %struct.block* %cx_blk963, i32 0, i32 7
  %blku_sub965 = bitcast %union.anon.1* %blk_u964 to %struct.block_sub*
  %argarray966 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub965, i32 0, i32 4
  %560 = load %struct.av*, %struct.av** %argarray966, align 8
  %sv_any967 = getelementptr inbounds %struct.av, %struct.av* %560, i32 0, i32 0
  %561 = load %struct.xpvav*, %struct.xpvav** %sv_any967, align 8
  %xav_max968 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %561, i32 0, i32 2
  %562 = load i64, i64* %xav_max968, align 8
  %add969 = add nsw i64 %562, %sub.ptr.div961
  store i64 %add969, i64* %xav_max968, align 8
  %563 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u970 = getelementptr inbounds %struct.context, %struct.context* %563, i32 0, i32 1
  %cx_blk971 = bitcast %union.anon.0* %cx_u970 to %struct.block*
  %blk_u972 = getelementptr inbounds %struct.block, %struct.block* %cx_blk971, i32 0, i32 7
  %blku_sub973 = bitcast %union.anon.1* %blk_u972 to %struct.block_sub*
  %argarray974 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub973, i32 0, i32 4
  %564 = load %struct.av*, %struct.av** %argarray974, align 8
  %sv_any975 = getelementptr inbounds %struct.av, %struct.av* %564, i32 0, i32 0
  %565 = load %struct.xpvav*, %struct.xpvav** %sv_any975, align 8
  %xav_alloc976 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %565, i32 0, i32 7
  %566 = load %struct.sv**, %struct.sv*** %xav_alloc976, align 8
  %567 = bitcast %struct.sv** %566 to i8*
  %568 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u977 = getelementptr inbounds %struct.context, %struct.context* %568, i32 0, i32 1
  %cx_blk978 = bitcast %union.anon.0* %cx_u977 to %struct.block*
  %blk_u979 = getelementptr inbounds %struct.block, %struct.block* %cx_blk978, i32 0, i32 7
  %blku_sub980 = bitcast %union.anon.1* %blk_u979 to %struct.block_sub*
  %argarray981 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub980, i32 0, i32 4
  %569 = load %struct.av*, %struct.av** %argarray981, align 8
  %sv_any982 = getelementptr inbounds %struct.av, %struct.av* %569, i32 0, i32 0
  %570 = load %struct.xpvav*, %struct.xpvav** %sv_any982, align 8
  %571 = bitcast %struct.xpvav* %570 to %struct.xpv*
  %xpv_pv983 = getelementptr inbounds %struct.xpv, %struct.xpv* %571, i32 0, i32 0
  store i8* %567, i8** %xpv_pv983, align 8
  %572 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u985 = getelementptr inbounds %struct.context, %struct.context* %572, i32 0, i32 1
  %cx_blk986 = bitcast %union.anon.0* %cx_u985 to %struct.block*
  %blk_u987 = getelementptr inbounds %struct.block, %struct.block* %cx_blk986, i32 0, i32 7
  %blku_sub988 = bitcast %union.anon.1* %blk_u987 to %struct.block_sub*
  %argarray989 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub988, i32 0, i32 4
  %573 = load %struct.av*, %struct.av** %argarray989, align 8
  %sv_any990 = getelementptr inbounds %struct.av, %struct.av* %573, i32 0, i32 0
  %574 = load %struct.xpvav*, %struct.xpvav** %sv_any990, align 8
  %xav_fill991 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %574, i32 0, i32 1
  store i64 -1, i64* %xav_fill991, align 8
  store i64 -1, i64* %tmp984
  %575 = load i64, i64* %tmp984
  br label %if.end.992

if.end.992:                                       ; preds = %if.else.943, %if.then.896
  br label %if.end.993

if.end.993:                                       ; preds = %if.end.992, %if.end.864
  %576 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u994 = getelementptr inbounds %struct.context, %struct.context* %576, i32 0, i32 1
  %cx_blk995 = bitcast %union.anon.0* %cx_u994 to %struct.block*
  %blk_u996 = getelementptr inbounds %struct.block, %struct.block* %cx_blk995, i32 0, i32 7
  %blku_sub997 = bitcast %union.anon.1* %blk_u996 to %struct.block_sub*
  %cv998 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub997, i32 0, i32 0
  %577 = load %struct.cv*, %struct.cv** %cv998, align 8
  %578 = bitcast %struct.cv* %577 to %struct.sv*
  store %struct.sv* %578, %struct.sv** %sv, align 8
  %579 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool999 = icmp ne %struct.sv* %579, null
  br i1 %tobool999, label %land.lhs.true.1000, label %if.end.1010

land.lhs.true.1000:                               ; preds = %if.end.993
  %580 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u1001 = getelementptr inbounds %struct.context, %struct.context* %580, i32 0, i32 1
  %cx_blk1002 = bitcast %union.anon.0* %cx_u1001 to %struct.block*
  %blk_u1003 = getelementptr inbounds %struct.block, %struct.block* %cx_blk1002, i32 0, i32 7
  %blku_sub1004 = bitcast %union.anon.1* %blk_u1003 to %struct.block_sub*
  %olddepth1005 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub1004, i32 0, i32 5
  %581 = load i64, i64* %olddepth1005, align 8
  %582 = load %struct.sv*, %struct.sv** %sv, align 8
  %583 = bitcast %struct.sv* %582 to %struct.cv*
  %sv_any1006 = getelementptr inbounds %struct.cv, %struct.cv* %583, i32 0, i32 0
  %584 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1006, align 8
  %xcv_depth1007 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %584, i32 0, i32 14
  store i64 %581, i64* %xcv_depth1007, align 8
  %tobool1008 = icmp ne i64 %581, 0
  br i1 %tobool1008, label %if.then.1009, label %if.end.1010

if.then.1009:                                     ; preds = %land.lhs.true.1000
  store %struct.sv* null, %struct.sv** %sv, align 8
  br label %if.end.1010

if.end.1010:                                      ; preds = %if.then.1009, %land.lhs.true.1000, %if.end.993
  %585 = load %struct.pmop*, %struct.pmop** %newpm, align 8
  store %struct.pmop* %585, %struct.pmop** @PL_curpm, align 8
  %586 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool1011 = icmp ne %struct.sv* %586, null
  br i1 %tobool1011, label %if.then.1012, label %if.end.1013

if.then.1012:                                     ; preds = %if.end.1010
  %587 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_free(%struct.sv* %587)
  br label %if.end.1013

if.end.1013:                                      ; preds = %if.then.1012, %if.end.1010
  %call1014 = call %struct.op* @Perl_pop_return()
  store %struct.op* %call1014, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.end.1013, %if.end.736, %if.end.550, %cond.end, %if.end.214
  %588 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %588
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_entersub() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  %gv = alloca %struct.gv*, align 8
  %stash = alloca %struct.hv*, align 8
  %cv = alloca %struct.cv*, align 8
  %cx = alloca %struct.context*, align 8
  %gimme = alloca i32, align 4
  %hasargs = alloca i8, align 1
  %sym = alloca i8*, align 8
  %n_a = alloca i64, align 8
  %sp54 = alloca %struct.sv**, align 8
  %tmpsv = alloca %struct.sv*, align 8
  %arg = alloca %struct.sv*, align 8
  %autogv = alloca %struct.gv*, align 8
  %sub_name = alloca %struct.sv*, align 8
  %markix = alloca i32, align 4
  %av = alloca %struct.av*, align 8
  %items = alloca i32, align 4
  %mark = alloca %struct.sv**, align 8
  %items270 = alloca i32, align 4
  %padlist = alloca %struct.av*, align 8
  %tmp = alloca i32, align 4
  %av382 = alloca %struct.av*, align 8
  %ary = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** %sv, align 8
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 6
  %4 = load i8, i8* %op_flags, align 1
  %conv = zext i8 %4 to i32
  %and = and i32 %conv, 64
  %cmp = icmp ne i32 %and, 0
  %conv1 = zext i1 %cmp to i32
  %conv2 = trunc i32 %conv1 to i8
  store i8 %conv2, i8* %hasargs, align 1
  %5 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool = icmp ne %struct.sv* %5, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.39, i32 0, i32 0))
  store %struct.op* %call, %struct.op** %retval
  br label %return

if.end:                                           ; preds = %entry
  %6 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags, align 4
  %and3 = and i32 %7, 255
  switch i32 %and3, label %sw.default [
    i32 11, label %sw.bb
    i32 10, label %sw.bb
    i32 12, label %sw.bb.89
    i32 13, label %sw.bb.90
  ]

sw.default:                                       ; preds = %if.end
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %9, 524288
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %if.end.53, label %if.then.7

if.then.7:                                        ; preds = %sw.default
  %10 = load %struct.sv*, %struct.sv** %sv, align 8
  %cmp8 = icmp eq %struct.sv* %10, @PL_sv_yes
  br i1 %cmp8, label %if.then.10, label %if.end.15

if.then.10:                                       ; preds = %if.then.7
  %11 = load i8, i8* %hasargs, align 1
  %tobool11 = icmp ne i8 %11, 0
  br i1 %tobool11, label %if.then.12, label %if.end.14

if.then.12:                                       ; preds = %if.then.10
  %12 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %13 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr13 = getelementptr inbounds i32, i32* %13, i32 -1
  store i32* %incdec.ptr13, i32** @PL_markstack_ptr, align 8
  %14 = load i32, i32* %13, align 4
  %idx.ext = sext i32 %14 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %12, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %sp, align 8
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.12, %if.then.10
  %15 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %15, %struct.sv*** @PL_stack_sp, align 8
  %16 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 0
  %17 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %17, %struct.op** %retval
  br label %return

if.end.15:                                        ; preds = %if.then.7
  %18 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags16 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags16, align 4
  %and17 = and i32 %19, 8192
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %if.then.19, label %if.else

if.then.19:                                       ; preds = %if.end.15
  %20 = load %struct.sv*, %struct.sv** %sv, align 8
  %call20 = call i32 @Perl_mg_get(%struct.sv* %20)
  %21 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags21 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags21, align 4
  %and22 = and i32 %22, 524288
  %tobool23 = icmp ne i32 %and22, 0
  br i1 %tobool23, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %if.then.19
  br label %got_rv

if.end.25:                                        ; preds = %if.then.19
  %23 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags26 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %24, 67108864
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.25
  %25 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 0
  %26 = load i8*, i8** %sv_any, align 8
  %27 = bitcast i8* %26 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %27, i32 0, i32 0
  %28 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end.25
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %28, %cond.true ], [ null, %cond.false ]
  store i8* %cond, i8** %sym, align 8
  br label %if.end.41

if.else:                                          ; preds = %if.end.15
  %29 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags29 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags29, align 4
  %and30 = and i32 %30, 262144
  %cmp31 = icmp eq i32 %and30, 262144
  br i1 %cmp31, label %cond.true.33, label %cond.false.37

cond.true.33:                                     ; preds = %if.else
  %31 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any34 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 0
  %32 = load i8*, i8** %sv_any34, align 8
  %33 = bitcast i8* %32 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %33, i32 0, i32 1
  %34 = load i64, i64* %xpv_cur, align 8
  store i64 %34, i64* %n_a, align 8
  %35 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any35 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 0
  %36 = load i8*, i8** %sv_any35, align 8
  %37 = bitcast i8* %36 to %struct.xpv*
  %xpv_pv36 = getelementptr inbounds %struct.xpv, %struct.xpv* %37, i32 0, i32 0
  %38 = load i8*, i8** %xpv_pv36, align 8
  br label %cond.end.39

cond.false.37:                                    ; preds = %if.else
  %39 = load %struct.sv*, %struct.sv** %sv, align 8
  %call38 = call i8* @Perl_sv_2pv_flags(%struct.sv* %39, i64* %n_a, i32 2)
  br label %cond.end.39

cond.end.39:                                      ; preds = %cond.false.37, %cond.true.33
  %cond40 = phi i8* [ %38, %cond.true.33 ], [ %call38, %cond.false.37 ]
  store i8* %cond40, i8** %sym, align 8
  br label %if.end.41

if.end.41:                                        ; preds = %cond.end.39, %cond.end
  %40 = load i8*, i8** %sym, align 8
  %tobool42 = icmp ne i8* %40, null
  br i1 %tobool42, label %if.end.45, label %if.then.43

if.then.43:                                       ; preds = %if.end.41
  %call44 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_usym, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.40, i32 0, i32 0))
  store %struct.op* %call44, %struct.op** %retval
  br label %return

if.end.45:                                        ; preds = %if.end.41
  %41 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %41, i32 0, i32 7
  %42 = load i8, i8* %op_private, align 1
  %conv46 = zext i8 %42 to i32
  %and47 = and i32 %conv46, 2
  %tobool48 = icmp ne i32 %and47, 0
  br i1 %tobool48, label %if.then.49, label %if.end.51

if.then.49:                                       ; preds = %if.end.45
  %43 = load i8*, i8** %sym, align 8
  %call50 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_symref, i32 0, i32 0), i8* %43, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.40, i32 0, i32 0))
  store %struct.op* %call50, %struct.op** %retval
  br label %return

if.end.51:                                        ; preds = %if.end.45
  %44 = load i8*, i8** %sym, align 8
  %call52 = call %struct.cv* @Perl_get_cv(i8* %44, i32 1)
  store %struct.cv* %call52, %struct.cv** %cv, align 8
  br label %sw.epilog

if.end.53:                                        ; preds = %sw.default
  br label %got_rv

got_rv:                                           ; preds = %if.end.53, %if.then.24
  store %struct.sv** %sv, %struct.sv*** %sp54, align 8
  %45 = load i64, i64* @PL_amagic_generation, align 8
  %tobool55 = icmp ne i64 %45, 0
  br i1 %tobool55, label %if.then.56, label %if.end.79

if.then.56:                                       ; preds = %got_rv
  %46 = load %struct.sv**, %struct.sv*** %sp54, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %46, i64 0
  %47 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %47, %struct.sv** %arg, align 8
  br label %am_again

am_again:                                         ; preds = %if.then.76, %if.then.56
  %48 = load %struct.sv*, %struct.sv** %arg, align 8
  %sv_flags57 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 2
  %49 = load i32, i32* %sv_flags57, align 4
  %and58 = and i32 %49, 268435456
  %tobool59 = icmp ne i32 %and58, 0
  br i1 %tobool59, label %land.lhs.true, label %if.end.78

land.lhs.true:                                    ; preds = %am_again
  %50 = load %struct.sv*, %struct.sv** %arg, align 8
  %call60 = call %struct.sv* @Perl_amagic_call(%struct.sv* %50, %struct.sv* @PL_sv_undef, i32 62, i32 9)
  store %struct.sv* %call60, %struct.sv** %tmpsv, align 8
  %tobool61 = icmp ne %struct.sv* %call60, null
  br i1 %tobool61, label %if.then.62, label %if.end.78

if.then.62:                                       ; preds = %land.lhs.true
  %51 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %51, %struct.sv*** %sp54, align 8
  %52 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  store %struct.sv* %52, %struct.sv** %sv, align 8
  %53 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_flags63 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 2
  %54 = load i32, i32* %sv_flags63, align 4
  %and64 = and i32 %54, 524288
  %tobool65 = icmp ne i32 %and64, 0
  br i1 %tobool65, label %if.end.67, label %if.then.66

if.then.66:                                       ; preds = %if.then.62
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end.67

if.end.67:                                        ; preds = %if.then.66, %if.then.62
  %55 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %56 = load %struct.sv*, %struct.sv** %arg, align 8
  %cmp68 = icmp ne %struct.sv* %55, %56
  br i1 %cmp68, label %land.lhs.true.70, label %if.end.77

land.lhs.true.70:                                 ; preds = %if.end.67
  %57 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_any71 = getelementptr inbounds %struct.sv, %struct.sv* %57, i32 0, i32 0
  %58 = load i8*, i8** %sv_any71, align 8
  %59 = bitcast i8* %58 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %59, i32 0, i32 0
  %60 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  %61 = load %struct.sv*, %struct.sv** %arg, align 8
  %sv_any72 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 0
  %62 = load i8*, i8** %sv_any72, align 8
  %63 = bitcast i8* %62 to %struct.xrv*
  %xrv_rv73 = getelementptr inbounds %struct.xrv, %struct.xrv* %63, i32 0, i32 0
  %64 = load %struct.sv*, %struct.sv** %xrv_rv73, align 8
  %cmp74 = icmp ne %struct.sv* %60, %64
  br i1 %cmp74, label %if.then.76, label %if.end.77

if.then.76:                                       ; preds = %land.lhs.true.70
  %65 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  store %struct.sv* %65, %struct.sv** %arg, align 8
  br label %am_again

if.end.77:                                        ; preds = %land.lhs.true.70, %if.end.67
  br label %if.end.78

if.end.78:                                        ; preds = %if.end.77, %land.lhs.true, %am_again
  br label %if.end.79

if.end.79:                                        ; preds = %if.end.78, %got_rv
  %66 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any80 = getelementptr inbounds %struct.sv, %struct.sv* %66, i32 0, i32 0
  %67 = load i8*, i8** %sv_any80, align 8
  %68 = bitcast i8* %67 to %struct.xrv*
  %xrv_rv81 = getelementptr inbounds %struct.xrv, %struct.xrv* %68, i32 0, i32 0
  %69 = load %struct.sv*, %struct.sv** %xrv_rv81, align 8
  %70 = bitcast %struct.sv* %69 to %struct.cv*
  store %struct.cv* %70, %struct.cv** %cv, align 8
  %71 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_flags82 = getelementptr inbounds %struct.cv, %struct.cv* %71, i32 0, i32 2
  %72 = load i32, i32* %sv_flags82, align 4
  %and83 = and i32 %72, 255
  %cmp84 = icmp eq i32 %and83, 12
  br i1 %cmp84, label %if.then.86, label %if.end.87

if.then.86:                                       ; preds = %if.end.79
  br label %sw.epilog

if.end.87:                                        ; preds = %if.end.79
  br label %sw.bb

sw.bb:                                            ; preds = %if.end, %if.end, %if.end.87
  %call88 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.39, i32 0, i32 0))
  store %struct.op* %call88, %struct.op** %retval
  br label %return

sw.bb.89:                                         ; preds = %if.end
  %73 = load %struct.sv*, %struct.sv** %sv, align 8
  %74 = bitcast %struct.sv* %73 to %struct.cv*
  store %struct.cv* %74, %struct.cv** %cv, align 8
  br label %sw.epilog

sw.bb.90:                                         ; preds = %if.end
  %75 = load %struct.sv*, %struct.sv** %sv, align 8
  %76 = bitcast %struct.sv* %75 to %struct.gv*
  %sv_any91 = getelementptr inbounds %struct.gv, %struct.gv* %76, i32 0, i32 0
  %77 = load %struct.xpvgv*, %struct.xpvgv** %sv_any91, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %77, i32 0, i32 7
  %78 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_cvgen = getelementptr inbounds %struct.gp, %struct.gp* %78, i32 0, i32 8
  %79 = load i32, i32* %gp_cvgen, align 4
  %tobool92 = icmp ne i32 %79, 0
  br i1 %tobool92, label %cond.true.93, label %cond.false.94

cond.true.93:                                     ; preds = %sw.bb.90
  br label %cond.end.97

cond.false.94:                                    ; preds = %sw.bb.90
  %80 = load %struct.sv*, %struct.sv** %sv, align 8
  %81 = bitcast %struct.sv* %80 to %struct.gv*
  %sv_any95 = getelementptr inbounds %struct.gv, %struct.gv* %81, i32 0, i32 0
  %82 = load %struct.xpvgv*, %struct.xpvgv** %sv_any95, align 8
  %xgv_gp96 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %82, i32 0, i32 7
  %83 = load %struct.gp*, %struct.gp** %xgv_gp96, align 8
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %83, i32 0, i32 7
  %84 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  br label %cond.end.97

cond.end.97:                                      ; preds = %cond.false.94, %cond.true.93
  %cond98 = phi %struct.cv* [ null, %cond.true.93 ], [ %84, %cond.false.94 ]
  store %struct.cv* %cond98, %struct.cv** %cv, align 8
  %tobool99 = icmp ne %struct.cv* %cond98, null
  br i1 %tobool99, label %if.end.102, label %if.then.100

if.then.100:                                      ; preds = %cond.end.97
  %85 = load %struct.sv*, %struct.sv** %sv, align 8
  %call101 = call %struct.cv* @Perl_sv_2cv(%struct.sv* %85, %struct.hv** %stash, %struct.gv** %gv, i32 0)
  store %struct.cv* %call101, %struct.cv** %cv, align 8
  br label %if.end.102

if.end.102:                                       ; preds = %if.then.100, %cond.end.97
  %86 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool103 = icmp ne %struct.cv* %86, null
  br i1 %tobool103, label %if.end.105, label %if.then.104

if.then.104:                                      ; preds = %if.end.102
  call void @Perl_push_scope()
  call void @Perl_save_int(i32* @PL_tmps_floor)
  %87 = load i32, i32* @PL_tmps_ix, align 4
  store i32 %87, i32* @PL_tmps_floor, align 4
  br label %try_autoload

if.end.105:                                       ; preds = %if.end.102
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end.105, %sw.bb.89, %if.then.86, %if.end.51
  call void @Perl_push_scope()
  call void @Perl_save_int(i32* @PL_tmps_floor)
  %88 = load i32, i32* @PL_tmps_ix, align 4
  store i32 %88, i32* @PL_tmps_floor, align 4
  br label %retry

retry:                                            ; preds = %if.end.148, %sw.epilog
  %89 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any106 = getelementptr inbounds %struct.cv, %struct.cv* %89, i32 0, i32 0
  %90 = load %struct.xpvcv*, %struct.xpvcv** %sv_any106, align 8
  %xcv_root = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %90, i32 0, i32 9
  %91 = load %struct.op*, %struct.op** %xcv_root, align 8
  %tobool107 = icmp ne %struct.op* %91, null
  br i1 %tobool107, label %if.end.149, label %land.lhs.true.108

land.lhs.true.108:                                ; preds = %retry
  %92 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any109 = getelementptr inbounds %struct.cv, %struct.cv* %92, i32 0, i32 0
  %93 = load %struct.xpvcv*, %struct.xpvcv** %sv_any109, align 8
  %xcv_xsub = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %93, i32 0, i32 10
  %94 = load void (%struct.cv*)*, void (%struct.cv*)** %xcv_xsub, align 8
  %tobool110 = icmp ne void (%struct.cv*)* %94, null
  br i1 %tobool110, label %if.end.149, label %if.then.111

if.then.111:                                      ; preds = %land.lhs.true.108
  %95 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any112 = getelementptr inbounds %struct.cv, %struct.cv* %95, i32 0, i32 0
  %96 = load %struct.xpvcv*, %struct.xpvcv** %sv_any112, align 8
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %96, i32 0, i32 17
  %97 = load i16, i16* %xcv_flags, align 2
  %conv113 = zext i16 %97 to i32
  %and114 = and i32 %conv113, 4
  %tobool115 = icmp ne i32 %and114, 0
  br i1 %tobool115, label %if.then.118, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.111
  %98 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any116 = getelementptr inbounds %struct.cv, %struct.cv* %98, i32 0, i32 0
  %99 = load %struct.xpvcv*, %struct.xpvcv** %sv_any116, align 8
  %xcv_gv = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %99, i32 0, i32 12
  %100 = load %struct.gv*, %struct.gv** %xcv_gv, align 8
  store %struct.gv* %100, %struct.gv** %gv, align 8
  %tobool117 = icmp ne %struct.gv* %100, null
  br i1 %tobool117, label %if.end.120, label %if.then.118

if.then.118:                                      ; preds = %lor.lhs.false, %if.then.111
  %call119 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.41, i32 0, i32 0))
  store %struct.op* %call119, %struct.op** %retval
  br label %return

if.end.120:                                       ; preds = %lor.lhs.false
  %101 = load %struct.cv*, %struct.cv** %cv, align 8
  %102 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any121 = getelementptr inbounds %struct.gv, %struct.gv* %102, i32 0, i32 0
  %103 = load %struct.xpvgv*, %struct.xpvgv** %sv_any121, align 8
  %xgv_gp122 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %103, i32 0, i32 7
  %104 = load %struct.gp*, %struct.gp** %xgv_gp122, align 8
  %gp_cv123 = getelementptr inbounds %struct.gp, %struct.gp* %104, i32 0, i32 7
  %105 = load %struct.cv*, %struct.cv** %gp_cv123, align 8
  %cmp124 = icmp ne %struct.cv* %101, %105
  br i1 %cmp124, label %if.then.126, label %if.else.130

if.then.126:                                      ; preds = %if.end.120
  %106 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any127 = getelementptr inbounds %struct.gv, %struct.gv* %106, i32 0, i32 0
  %107 = load %struct.xpvgv*, %struct.xpvgv** %sv_any127, align 8
  %xgv_gp128 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %107, i32 0, i32 7
  %108 = load %struct.gp*, %struct.gp** %xgv_gp128, align 8
  %gp_cv129 = getelementptr inbounds %struct.gp, %struct.gp* %108, i32 0, i32 7
  %109 = load %struct.cv*, %struct.cv** %gp_cv129, align 8
  store %struct.cv* %109, %struct.cv** %cv, align 8
  br label %if.end.144

if.else.130:                                      ; preds = %if.end.120
  br label %try_autoload

try_autoload:                                     ; preds = %if.else.130, %if.then.104
  %110 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any131 = getelementptr inbounds %struct.gv, %struct.gv* %110, i32 0, i32 0
  %111 = load %struct.xpvgv*, %struct.xpvgv** %sv_any131, align 8
  %xgv_stash = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %111, i32 0, i32 10
  %112 = load %struct.hv*, %struct.hv** %xgv_stash, align 8
  %113 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any132 = getelementptr inbounds %struct.gv, %struct.gv* %113, i32 0, i32 0
  %114 = load %struct.xpvgv*, %struct.xpvgv** %sv_any132, align 8
  %xgv_name = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %114, i32 0, i32 8
  %115 = load i8*, i8** %xgv_name, align 8
  %116 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any133 = getelementptr inbounds %struct.gv, %struct.gv* %116, i32 0, i32 0
  %117 = load %struct.xpvgv*, %struct.xpvgv** %sv_any133, align 8
  %xgv_namelen = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %117, i32 0, i32 9
  %118 = load i64, i64* %xgv_namelen, align 8
  %call134 = call %struct.gv* @Perl_gv_autoload4(%struct.hv* %112, i8* %115, i64 %118, i32 0)
  store %struct.gv* %call134, %struct.gv** %autogv, align 8
  %tobool135 = icmp ne %struct.gv* %call134, null
  br i1 %tobool135, label %if.then.136, label %if.else.140

if.then.136:                                      ; preds = %try_autoload
  %119 = load %struct.gv*, %struct.gv** %autogv, align 8
  %sv_any137 = getelementptr inbounds %struct.gv, %struct.gv* %119, i32 0, i32 0
  %120 = load %struct.xpvgv*, %struct.xpvgv** %sv_any137, align 8
  %xgv_gp138 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %120, i32 0, i32 7
  %121 = load %struct.gp*, %struct.gp** %xgv_gp138, align 8
  %gp_cv139 = getelementptr inbounds %struct.gp, %struct.gp* %121, i32 0, i32 7
  %122 = load %struct.cv*, %struct.cv** %gp_cv139, align 8
  store %struct.cv* %122, %struct.cv** %cv, align 8
  br label %if.end.143

if.else.140:                                      ; preds = %try_autoload
  %call141 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call141, %struct.sv** %sub_name, align 8
  %123 = load %struct.sv*, %struct.sv** %sub_name, align 8
  %124 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_gv_efullname4(%struct.sv* %123, %struct.gv* %124, i8* null, i8 signext 1)
  %125 = load %struct.sv*, %struct.sv** %sub_name, align 8
  %call142 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.42, i32 0, i32 0), %struct.sv* %125)
  store %struct.op* %call142, %struct.op** %retval
  br label %return

if.end.143:                                       ; preds = %if.then.136
  br label %if.end.144

if.end.144:                                       ; preds = %if.end.143, %if.then.126
  %126 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool145 = icmp ne %struct.cv* %126, null
  br i1 %tobool145, label %if.end.148, label %if.then.146

if.then.146:                                      ; preds = %if.end.144
  %call147 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.39, i32 0, i32 0))
  store %struct.op* %call147, %struct.op** %retval
  br label %return

if.end.148:                                       ; preds = %if.end.144
  br label %retry

if.end.149:                                       ; preds = %land.lhs.true.108, %retry
  %127 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags150 = getelementptr inbounds %struct.op, %struct.op* %127, i32 0, i32 6
  %128 = load i8, i8* %op_flags150, align 1
  %conv151 = zext i8 %128 to i32
  %and152 = and i32 %conv151, 3
  %cmp153 = icmp eq i32 %and152, 1
  br i1 %cmp153, label %cond.true.155, label %cond.false.156

cond.true.155:                                    ; preds = %if.end.149
  br label %cond.end.176

cond.false.156:                                   ; preds = %if.end.149
  %129 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags157 = getelementptr inbounds %struct.op, %struct.op* %129, i32 0, i32 6
  %130 = load i8, i8* %op_flags157, align 1
  %conv158 = zext i8 %130 to i32
  %and159 = and i32 %conv158, 3
  %cmp160 = icmp eq i32 %and159, 2
  br i1 %cmp160, label %cond.true.162, label %cond.false.163

cond.true.162:                                    ; preds = %cond.false.156
  br label %cond.end.174

cond.false.163:                                   ; preds = %cond.false.156
  %131 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags164 = getelementptr inbounds %struct.op, %struct.op* %131, i32 0, i32 6
  %132 = load i8, i8* %op_flags164, align 1
  %conv165 = zext i8 %132 to i32
  %and166 = and i32 %conv165, 3
  %cmp167 = icmp eq i32 %and166, 3
  br i1 %cmp167, label %cond.true.169, label %cond.false.170

cond.true.169:                                    ; preds = %cond.false.163
  br label %cond.end.172

cond.false.170:                                   ; preds = %cond.false.163
  %call171 = call i32 @Perl_block_gimme()
  br label %cond.end.172

cond.end.172:                                     ; preds = %cond.false.170, %cond.true.169
  %cond173 = phi i32 [ 1, %cond.true.169 ], [ %call171, %cond.false.170 ]
  br label %cond.end.174

cond.end.174:                                     ; preds = %cond.end.172, %cond.true.162
  %cond175 = phi i32 [ 0, %cond.true.162 ], [ %cond173, %cond.end.172 ]
  br label %cond.end.176

cond.end.176:                                     ; preds = %cond.end.174, %cond.true.155
  %cond177 = phi i32 [ 128, %cond.true.155 ], [ %cond175, %cond.end.174 ]
  store i32 %cond177, i32* %gimme, align 4
  %133 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private178 = getelementptr inbounds %struct.op, %struct.op* %133, i32 0, i32 7
  %134 = load i8, i8* %op_private178, align 1
  %conv179 = zext i8 %134 to i32
  %and180 = and i32 %conv179, 16
  %tobool181 = icmp ne i32 %and180, 0
  br i1 %tobool181, label %land.lhs.true.182, label %if.end.206

land.lhs.true.182:                                ; preds = %cond.end.176
  %135 = load %struct.gv*, %struct.gv** @PL_DBsub, align 8
  %sv_any183 = getelementptr inbounds %struct.gv, %struct.gv* %135, i32 0, i32 0
  %136 = load %struct.xpvgv*, %struct.xpvgv** %sv_any183, align 8
  %xgv_gp184 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %136, i32 0, i32 7
  %137 = load %struct.gp*, %struct.gp** %xgv_gp184, align 8
  %gp_cv185 = getelementptr inbounds %struct.gp, %struct.gp* %137, i32 0, i32 7
  %138 = load %struct.cv*, %struct.cv** %gp_cv185, align 8
  %tobool186 = icmp ne %struct.cv* %138, null
  br i1 %tobool186, label %land.lhs.true.187, label %if.end.206

land.lhs.true.187:                                ; preds = %land.lhs.true.182
  %139 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any188 = getelementptr inbounds %struct.cv, %struct.cv* %139, i32 0, i32 0
  %140 = load %struct.xpvcv*, %struct.xpvcv** %sv_any188, align 8
  %xcv_flags189 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %140, i32 0, i32 17
  %141 = load i16, i16* %xcv_flags189, align 2
  %conv190 = zext i16 %141 to i32
  %and191 = and i32 %conv190, 32
  %tobool192 = icmp ne i32 %and191, 0
  br i1 %tobool192, label %if.end.206, label %if.then.193

if.then.193:                                      ; preds = %land.lhs.true.187
  %142 = load %struct.cv*, %struct.cv** %cv, align 8
  %call194 = call %struct.cv* @S_get_db_sub(%struct.sv** %sv, %struct.cv* %142)
  store %struct.cv* %call194, %struct.cv** %cv, align 8
  %143 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool195 = icmp ne %struct.cv* %143, null
  br i1 %tobool195, label %lor.lhs.false.196, label %if.then.203

lor.lhs.false.196:                                ; preds = %if.then.193
  %144 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any197 = getelementptr inbounds %struct.cv, %struct.cv* %144, i32 0, i32 0
  %145 = load %struct.xpvcv*, %struct.xpvcv** %sv_any197, align 8
  %xcv_xsub198 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %145, i32 0, i32 10
  %146 = load void (%struct.cv*)*, void (%struct.cv*)** %xcv_xsub198, align 8
  %tobool199 = icmp ne void (%struct.cv*)* %146, null
  br i1 %tobool199, label %if.end.205, label %land.lhs.true.200

land.lhs.true.200:                                ; preds = %lor.lhs.false.196
  %147 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any201 = getelementptr inbounds %struct.cv, %struct.cv* %147, i32 0, i32 0
  %148 = load %struct.xpvcv*, %struct.xpvcv** %sv_any201, align 8
  %xcv_start = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %148, i32 0, i32 8
  %149 = load %struct.op*, %struct.op** %xcv_start, align 8
  %tobool202 = icmp ne %struct.op* %149, null
  br i1 %tobool202, label %if.end.205, label %if.then.203

if.then.203:                                      ; preds = %land.lhs.true.200, %if.then.193
  %call204 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.43, i32 0, i32 0))
  store %struct.op* %call204, %struct.op** %retval
  br label %return

if.end.205:                                       ; preds = %land.lhs.true.200, %lor.lhs.false.196
  br label %if.end.206

if.end.206:                                       ; preds = %if.end.205, %land.lhs.true.187, %land.lhs.true.182, %cond.end.176
  %150 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any207 = getelementptr inbounds %struct.cv, %struct.cv* %150, i32 0, i32 0
  %151 = load %struct.xpvcv*, %struct.xpvcv** %sv_any207, align 8
  %xcv_xsub208 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %151, i32 0, i32 10
  %152 = load void (%struct.cv*)*, void (%struct.cv*)** %xcv_xsub208, align 8
  %tobool209 = icmp ne void (%struct.cv*)* %152, null
  br i1 %tobool209, label %if.then.210, label %if.else.266

if.then.210:                                      ; preds = %if.end.206
  %153 = load i32*, i32** @PL_markstack_ptr, align 8
  %154 = load i32, i32* %153, align 4
  store i32 %154, i32* %markix, align 4
  %155 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %155, %struct.sv*** @PL_stack_sp, align 8
  %156 = load i8, i8* %hasargs, align 1
  %tobool211 = icmp ne i8 %156, 0
  br i1 %tobool211, label %if.end.231, label %if.then.212

if.then.212:                                      ; preds = %if.then.210
  %157 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any213 = getelementptr inbounds %struct.gv, %struct.gv* %157, i32 0, i32 0
  %158 = load %struct.xpvgv*, %struct.xpvgv** %sv_any213, align 8
  %xgv_gp214 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %158, i32 0, i32 7
  %159 = load %struct.gp*, %struct.gp** %xgv_gp214, align 8
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %159, i32 0, i32 4
  %160 = load %struct.av*, %struct.av** %gp_av, align 8
  store %struct.av* %160, %struct.av** %av, align 8
  %161 = load %struct.av*, %struct.av** %av, align 8
  %sv_any215 = getelementptr inbounds %struct.av, %struct.av* %161, i32 0, i32 0
  %162 = load %struct.xpvav*, %struct.xpvav** %sv_any215, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %162, i32 0, i32 1
  %163 = load i64, i64* %xav_fill, align 8
  %add = add nsw i64 %163, 1
  %conv216 = trunc i64 %add to i32
  store i32 %conv216, i32* %items, align 4
  %164 = load i32, i32* %items, align 4
  %tobool217 = icmp ne i32 %164, 0
  br i1 %tobool217, label %if.then.218, label %if.end.230

if.then.218:                                      ; preds = %if.then.212
  %165 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %166 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %165 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %166 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %167 = load i32, i32* %items, align 4
  %conv219 = sext i32 %167 to i64
  %cmp220 = icmp slt i64 %sub.ptr.div, %conv219
  br i1 %cmp220, label %if.then.222, label %if.end.224

if.then.222:                                      ; preds = %if.then.218
  %168 = load %struct.sv**, %struct.sv*** %sp, align 8
  %169 = load %struct.sv**, %struct.sv*** %sp, align 8
  %170 = load i32, i32* %items, align 4
  %call223 = call %struct.sv** @Perl_stack_grow(%struct.sv** %168, %struct.sv** %169, i32 %170)
  store %struct.sv** %call223, %struct.sv*** %sp, align 8
  br label %if.end.224

if.end.224:                                       ; preds = %if.then.222, %if.then.218
  %171 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr225 = getelementptr inbounds %struct.sv*, %struct.sv** %171, i64 1
  %172 = bitcast %struct.sv** %add.ptr225 to i8*
  %173 = load %struct.av*, %struct.av** %av, align 8
  %sv_any226 = getelementptr inbounds %struct.av, %struct.av* %173, i32 0, i32 0
  %174 = load %struct.xpvav*, %struct.xpvav** %sv_any226, align 8
  %xav_array = getelementptr inbounds %struct.xpvav, %struct.xpvav* %174, i32 0, i32 0
  %175 = load i8*, i8** %xav_array, align 8
  %176 = bitcast i8* %175 to %struct.sv**
  %177 = bitcast %struct.sv** %176 to i8*
  %178 = load i32, i32* %items, align 4
  %conv227 = sext i32 %178 to i64
  %mul = mul i64 %conv227, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %172, i8* %177, i64 %mul, i32 1, i1 false)
  %179 = load i32, i32* %items, align 4
  %180 = load %struct.sv**, %struct.sv*** %sp, align 8
  %idx.ext228 = sext i32 %179 to i64
  %add.ptr229 = getelementptr inbounds %struct.sv*, %struct.sv** %180, i64 %idx.ext228
  store %struct.sv** %add.ptr229, %struct.sv*** %sp, align 8
  %181 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %181, %struct.sv*** @PL_stack_sp, align 8
  br label %if.end.230

if.end.230:                                       ; preds = %if.end.224, %if.then.212
  br label %if.end.231

if.end.231:                                       ; preds = %if.end.230, %if.then.210
  %182 = load %struct.cop*, %struct.cop** @PL_curcopdb, align 8
  %tobool232 = icmp ne %struct.cop* %182, null
  br i1 %tobool232, label %if.then.233, label %if.end.234

if.then.233:                                      ; preds = %if.end.231
  call void @Perl_save_vptr(i8* bitcast (%struct.cop** @PL_curcop to i8*))
  %183 = load %struct.cop*, %struct.cop** @PL_curcopdb, align 8
  store volatile %struct.cop* %183, %struct.cop** @PL_curcop, align 8
  store %struct.cop* null, %struct.cop** @PL_curcopdb, align 8
  br label %if.end.234

if.end.234:                                       ; preds = %if.then.233, %if.end.231
  %184 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any235 = getelementptr inbounds %struct.cv, %struct.cv* %184, i32 0, i32 0
  %185 = load %struct.xpvcv*, %struct.xpvcv** %sv_any235, align 8
  %xcv_xsub236 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %185, i32 0, i32 10
  %186 = load void (%struct.cv*)*, void (%struct.cv*)** %xcv_xsub236, align 8
  %187 = load %struct.cv*, %struct.cv** %cv, align 8
  call void %186(%struct.cv* %187)
  %188 = load i32, i32* %gimme, align 4
  %cmp237 = icmp eq i32 %188, 0
  br i1 %cmp237, label %land.lhs.true.239, label %if.end.264

land.lhs.true.239:                                ; preds = %if.end.234
  %189 = load i32, i32* %markix, align 4
  %inc = add nsw i32 %189, 1
  store i32 %inc, i32* %markix, align 4
  %conv240 = sext i32 %inc to i64
  %190 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %191 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast241 = ptrtoint %struct.sv** %190 to i64
  %sub.ptr.rhs.cast242 = ptrtoint %struct.sv** %191 to i64
  %sub.ptr.sub243 = sub i64 %sub.ptr.lhs.cast241, %sub.ptr.rhs.cast242
  %sub.ptr.div244 = sdiv exact i64 %sub.ptr.sub243, 8
  %cmp245 = icmp ne i64 %conv240, %sub.ptr.div244
  br i1 %cmp245, label %if.then.247, label %if.end.264

if.then.247:                                      ; preds = %land.lhs.true.239
  %192 = load i32, i32* %markix, align 4
  %conv248 = sext i32 %192 to i64
  %193 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %194 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast249 = ptrtoint %struct.sv** %193 to i64
  %sub.ptr.rhs.cast250 = ptrtoint %struct.sv** %194 to i64
  %sub.ptr.sub251 = sub i64 %sub.ptr.lhs.cast249, %sub.ptr.rhs.cast250
  %sub.ptr.div252 = sdiv exact i64 %sub.ptr.sub251, 8
  %cmp253 = icmp sgt i64 %conv248, %sub.ptr.div252
  br i1 %cmp253, label %if.then.255, label %if.else.258

if.then.255:                                      ; preds = %if.then.247
  %195 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %196 = load i32, i32* %markix, align 4
  %idx.ext256 = sext i32 %196 to i64
  %add.ptr257 = getelementptr inbounds %struct.sv*, %struct.sv** %195, i64 %idx.ext256
  store %struct.sv* @PL_sv_undef, %struct.sv** %add.ptr257, align 8
  br label %if.end.261

if.else.258:                                      ; preds = %if.then.247
  %197 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %198 = load %struct.sv*, %struct.sv** %197, align 8
  %199 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %200 = load i32, i32* %markix, align 4
  %idx.ext259 = sext i32 %200 to i64
  %add.ptr260 = getelementptr inbounds %struct.sv*, %struct.sv** %199, i64 %idx.ext259
  store %struct.sv* %198, %struct.sv** %add.ptr260, align 8
  br label %if.end.261

if.end.261:                                       ; preds = %if.else.258, %if.then.255
  %201 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %202 = load i32, i32* %markix, align 4
  %idx.ext262 = sext i32 %202 to i64
  %add.ptr263 = getelementptr inbounds %struct.sv*, %struct.sv** %201, i64 %idx.ext262
  store %struct.sv** %add.ptr263, %struct.sv*** @PL_stack_sp, align 8
  br label %if.end.264

if.end.264:                                       ; preds = %if.end.261, %land.lhs.true.239, %if.end.234
  call void @Perl_pop_scope()
  %203 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next265 = getelementptr inbounds %struct.op, %struct.op* %203, i32 0, i32 0
  %204 = load %struct.op*, %struct.op** %op_next265, align 8
  store %struct.op* %204, %struct.op** %retval
  br label %return

if.else.266:                                      ; preds = %if.end.206
  %205 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %206 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr267 = getelementptr inbounds i32, i32* %206, i32 -1
  store i32* %incdec.ptr267, i32** @PL_markstack_ptr, align 8
  %207 = load i32, i32* %206, align 4
  %idx.ext268 = sext i32 %207 to i64
  %add.ptr269 = getelementptr inbounds %struct.sv*, %struct.sv** %205, i64 %idx.ext268
  store %struct.sv** %add.ptr269, %struct.sv*** %mark, align 8
  %208 = load %struct.sv**, %struct.sv*** %sp, align 8
  %209 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast271 = ptrtoint %struct.sv** %208 to i64
  %sub.ptr.rhs.cast272 = ptrtoint %struct.sv** %209 to i64
  %sub.ptr.sub273 = sub i64 %sub.ptr.lhs.cast271, %sub.ptr.rhs.cast272
  %sub.ptr.div274 = sdiv exact i64 %sub.ptr.sub273, 8
  %conv275 = trunc i64 %sub.ptr.div274 to i32
  store i32 %conv275, i32* %items270, align 4
  %210 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any276 = getelementptr inbounds %struct.cv, %struct.cv* %210, i32 0, i32 0
  %211 = load %struct.xpvcv*, %struct.xpvcv** %sv_any276, align 8
  %xcv_padlist = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %211, i32 0, i32 15
  %212 = load %struct.av*, %struct.av** %xcv_padlist, align 8
  store %struct.av* %212, %struct.av** %padlist, align 8
  %213 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next277 = getelementptr inbounds %struct.op, %struct.op* %213, i32 0, i32 0
  %214 = load %struct.op*, %struct.op** %op_next277, align 8
  call void @Perl_push_return(%struct.op* %214)
  %215 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %215, i32 0, i32 2
  %216 = load i32, i32* %si_cxix, align 4
  %217 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxmax = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %217, i32 0, i32 3
  %218 = load i32, i32* %si_cxmax, align 4
  %cmp278 = icmp slt i32 %216, %218
  br i1 %cmp278, label %cond.true.280, label %cond.false.283

cond.true.280:                                    ; preds = %if.else.266
  %219 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix281 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %219, i32 0, i32 2
  %220 = load i32, i32* %si_cxix281, align 4
  %inc282 = add nsw i32 %220, 1
  store i32 %inc282, i32* %si_cxix281, align 4
  br label %cond.end.286

cond.false.283:                                   ; preds = %if.else.266
  %call284 = call i32 @Perl_cxinc()
  %221 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix285 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %221, i32 0, i32 2
  store i32 %call284, i32* %si_cxix285, align 4
  br label %cond.end.286

cond.end.286:                                     ; preds = %cond.false.283, %cond.true.280
  %cond287 = phi i32 [ %inc282, %cond.true.280 ], [ %call284, %cond.false.283 ]
  %222 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix288 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %222, i32 0, i32 2
  %223 = load i32, i32* %si_cxix288, align 4
  %idxprom = sext i32 %223 to i64
  %224 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %224, i32 0, i32 1
  %225 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx289 = getelementptr inbounds %struct.context, %struct.context* %225, i64 %idxprom
  store %struct.context* %arrayidx289, %struct.context** %cx, align 8
  %226 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type = getelementptr inbounds %struct.context, %struct.context* %226, i32 0, i32 0
  store i32 1, i32* %cx_type, align 4
  %227 = load %struct.sv**, %struct.sv*** %mark, align 8
  %228 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast290 = ptrtoint %struct.sv** %227 to i64
  %sub.ptr.rhs.cast291 = ptrtoint %struct.sv** %228 to i64
  %sub.ptr.sub292 = sub i64 %sub.ptr.lhs.cast290, %sub.ptr.rhs.cast291
  %sub.ptr.div293 = sdiv exact i64 %sub.ptr.sub292, 8
  %conv294 = trunc i64 %sub.ptr.div293 to i32
  %229 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %229, i32 0, i32 1
  %cx_blk = bitcast %union.anon.0* %cx_u to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 0
  store i32 %conv294, i32* %blku_oldsp, align 4
  %230 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %231 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u295 = getelementptr inbounds %struct.context, %struct.context* %231, i32 0, i32 1
  %cx_blk296 = bitcast %union.anon.0* %cx_u295 to %struct.block*
  %blku_oldcop = getelementptr inbounds %struct.block, %struct.block* %cx_blk296, i32 0, i32 1
  store %struct.cop* %230, %struct.cop** %blku_oldcop, align 8
  %232 = load i32*, i32** @PL_markstack_ptr, align 8
  %233 = load i32*, i32** @PL_markstack, align 8
  %sub.ptr.lhs.cast297 = ptrtoint i32* %232 to i64
  %sub.ptr.rhs.cast298 = ptrtoint i32* %233 to i64
  %sub.ptr.sub299 = sub i64 %sub.ptr.lhs.cast297, %sub.ptr.rhs.cast298
  %sub.ptr.div300 = sdiv exact i64 %sub.ptr.sub299, 4
  %conv301 = trunc i64 %sub.ptr.div300 to i32
  %234 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u302 = getelementptr inbounds %struct.context, %struct.context* %234, i32 0, i32 1
  %cx_blk303 = bitcast %union.anon.0* %cx_u302 to %struct.block*
  %blku_oldmarksp = getelementptr inbounds %struct.block, %struct.block* %cx_blk303, i32 0, i32 3
  store i32 %conv301, i32* %blku_oldmarksp, align 4
  %235 = load i32, i32* @PL_scopestack_ix, align 4
  %236 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u304 = getelementptr inbounds %struct.context, %struct.context* %236, i32 0, i32 1
  %cx_blk305 = bitcast %union.anon.0* %cx_u304 to %struct.block*
  %blku_oldscopesp = getelementptr inbounds %struct.block, %struct.block* %cx_blk305, i32 0, i32 4
  store i32 %235, i32* %blku_oldscopesp, align 4
  %237 = load i32, i32* @PL_retstack_ix, align 4
  %238 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u306 = getelementptr inbounds %struct.context, %struct.context* %238, i32 0, i32 1
  %cx_blk307 = bitcast %union.anon.0* %cx_u306 to %struct.block*
  %blku_oldretsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk307, i32 0, i32 2
  store i32 %237, i32* %blku_oldretsp, align 4
  %239 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  %240 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u308 = getelementptr inbounds %struct.context, %struct.context* %240, i32 0, i32 1
  %cx_blk309 = bitcast %union.anon.0* %cx_u308 to %struct.block*
  %blku_oldpm = getelementptr inbounds %struct.block, %struct.block* %cx_blk309, i32 0, i32 5
  store %struct.pmop* %239, %struct.pmop** %blku_oldpm, align 8
  %241 = load i32, i32* %gimme, align 4
  %conv310 = trunc i32 %241 to i8
  %242 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u311 = getelementptr inbounds %struct.context, %struct.context* %242, i32 0, i32 1
  %cx_blk312 = bitcast %union.anon.0* %cx_u311 to %struct.block*
  %blku_gimme = getelementptr inbounds %struct.block, %struct.block* %cx_blk312, i32 0, i32 6
  store i8 %conv310, i8* %blku_gimme, align 1
  %243 = load %struct.cv*, %struct.cv** %cv, align 8
  %244 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u313 = getelementptr inbounds %struct.context, %struct.context* %244, i32 0, i32 1
  %cx_blk314 = bitcast %union.anon.0* %cx_u313 to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk314, i32 0, i32 7
  %blku_sub = bitcast %union.anon.1* %blk_u to %struct.block_sub*
  %cv315 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub, i32 0, i32 0
  store %struct.cv* %243, %struct.cv** %cv315, align 8
  %245 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any316 = getelementptr inbounds %struct.cv, %struct.cv* %245, i32 0, i32 0
  %246 = load %struct.xpvcv*, %struct.xpvcv** %sv_any316, align 8
  %xcv_depth = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %246, i32 0, i32 14
  %247 = load i64, i64* %xcv_depth, align 8
  %248 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u317 = getelementptr inbounds %struct.context, %struct.context* %248, i32 0, i32 1
  %cx_blk318 = bitcast %union.anon.0* %cx_u317 to %struct.block*
  %blk_u319 = getelementptr inbounds %struct.block, %struct.block* %cx_blk318, i32 0, i32 7
  %blku_sub320 = bitcast %union.anon.1* %blk_u319 to %struct.block_sub*
  %olddepth = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub320, i32 0, i32 5
  store i64 %247, i64* %olddepth, align 8
  %249 = load i8, i8* %hasargs, align 1
  %250 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u321 = getelementptr inbounds %struct.context, %struct.context* %250, i32 0, i32 1
  %cx_blk322 = bitcast %union.anon.0* %cx_u321 to %struct.block*
  %blk_u323 = getelementptr inbounds %struct.block, %struct.block* %cx_blk322, i32 0, i32 7
  %blku_sub324 = bitcast %union.anon.1* %blk_u323 to %struct.block_sub*
  %hasargs325 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub324, i32 0, i32 6
  store i8 %249, i8* %hasargs325, align 1
  %251 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any326 = getelementptr inbounds %struct.cv, %struct.cv* %251, i32 0, i32 0
  %252 = load %struct.xpvcv*, %struct.xpvcv** %sv_any326, align 8
  %xcv_depth327 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %252, i32 0, i32 14
  %253 = load i64, i64* %xcv_depth327, align 8
  %tobool328 = icmp ne i64 %253, 0
  br i1 %tobool328, label %if.end.340, label %if.then.329

if.then.329:                                      ; preds = %cond.end.286
  %254 = load %struct.cv*, %struct.cv** %cv, align 8
  %255 = bitcast %struct.cv* %254 to %struct.sv*
  store %struct.sv* %255, %struct.sv** @PL_Sv, align 8
  %256 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool330 = icmp ne %struct.sv* %256, null
  br i1 %tobool330, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.329
  %257 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %257, i32 0, i32 1
  %258 = load i32, i32* %sv_refcnt, align 4
  %inc331 = add i32 %258, 1
  store i32 %inc331, i32* %sv_refcnt, align 4
  %tobool332 = icmp ne i32 %inc331, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.329
  %259 = phi i1 [ false, %if.then.329 ], [ %tobool332, %land.rhs ]
  %land.ext = zext i1 %259 to i32
  %260 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %261 = load %struct.cv*, %struct.cv** %cv, align 8
  %262 = bitcast %struct.cv* %261 to %struct.sv*
  store %struct.sv* %262, %struct.sv** @PL_Sv, align 8
  %263 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool333 = icmp ne %struct.sv* %263, null
  br i1 %tobool333, label %land.rhs.334, label %land.end.338

land.rhs.334:                                     ; preds = %land.end
  %264 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt335 = getelementptr inbounds %struct.sv, %struct.sv* %264, i32 0, i32 1
  %265 = load i32, i32* %sv_refcnt335, align 4
  %inc336 = add i32 %265, 1
  store i32 %inc336, i32* %sv_refcnt335, align 4
  %tobool337 = icmp ne i32 %inc336, 0
  br label %land.end.338

land.end.338:                                     ; preds = %land.rhs.334, %land.end
  %266 = phi i1 [ false, %land.end ], [ %tobool337, %land.rhs.334 ]
  %land.ext339 = zext i1 %266 to i32
  %267 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %268 = load %struct.cv*, %struct.cv** %cv, align 8
  %269 = bitcast %struct.cv* %268 to %struct.sv*
  call void @Perl_save_freesv(%struct.sv* %269)
  br label %if.end.340

if.end.340:                                       ; preds = %land.end.338, %cond.end.286
  %270 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private341 = getelementptr inbounds %struct.op, %struct.op* %270, i32 0, i32 7
  %271 = load i8, i8* %op_private341, align 1
  %conv342 = zext i8 %271 to i32
  %and343 = and i32 %conv342, 132
  %conv344 = trunc i32 %and343 to i8
  %272 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u345 = getelementptr inbounds %struct.context, %struct.context* %272, i32 0, i32 1
  %cx_blk346 = bitcast %union.anon.0* %cx_u345 to %struct.block*
  %blk_u347 = getelementptr inbounds %struct.block, %struct.block* %cx_blk346, i32 0, i32 7
  %blku_sub348 = bitcast %union.anon.1* %blk_u347 to %struct.block_sub*
  %lval = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub348, i32 0, i32 7
  store i8 %conv344, i8* %lval, align 1
  %273 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any349 = getelementptr inbounds %struct.cv, %struct.cv* %273, i32 0, i32 0
  %274 = load %struct.xpvcv*, %struct.xpvcv** %sv_any349, align 8
  %xcv_depth350 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %274, i32 0, i32 14
  %275 = load i64, i64* %xcv_depth350, align 8
  %inc351 = add nsw i64 %275, 1
  store i64 %inc351, i64* %xcv_depth350, align 8
  %276 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any352 = getelementptr inbounds %struct.cv, %struct.cv* %276, i32 0, i32 0
  %277 = load %struct.xpvcv*, %struct.xpvcv** %sv_any352, align 8
  %xcv_depth353 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %277, i32 0, i32 14
  %278 = load i64, i64* %xcv_depth353, align 8
  %cmp354 = icmp sge i64 %278, 2
  br i1 %cmp354, label %if.then.356, label %if.end.360

if.then.356:                                      ; preds = %if.end.340
  %279 = load %struct.av*, %struct.av** %padlist, align 8
  %280 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any357 = getelementptr inbounds %struct.cv, %struct.cv* %280, i32 0, i32 0
  %281 = load %struct.xpvcv*, %struct.xpvcv** %sv_any357, align 8
  %xcv_depth358 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %281, i32 0, i32 14
  %282 = load i64, i64* %xcv_depth358, align 8
  %conv359 = trunc i64 %282 to i32
  call void @Perl_pad_push(%struct.av* %279, i32 %conv359, i32 1)
  br label %if.end.360

if.end.360:                                       ; preds = %if.then.356, %if.end.340
  %283 = load i32, i32* @PL_savestack_ix, align 4
  %add361 = add nsw i32 %283, 2
  %284 = load i32, i32* @PL_savestack_max, align 4
  %cmp362 = icmp sgt i32 %add361, %284
  br i1 %cmp362, label %if.then.364, label %if.end.365

if.then.364:                                      ; preds = %if.end.360
  call void @Perl_savestack_grow()
  br label %if.end.365

if.end.365:                                       ; preds = %if.then.364, %if.end.360
  %285 = load %struct.av*, %struct.av** @PL_comppad, align 8
  %286 = bitcast %struct.av* %285 to %struct.sv*
  %287 = bitcast %struct.sv* %286 to i8*
  %288 = load i32, i32* @PL_savestack_ix, align 4
  %inc366 = add nsw i32 %288, 1
  store i32 %inc366, i32* @PL_savestack_ix, align 4
  %idxprom367 = sext i32 %288 to i64
  %289 = load %union.any*, %union.any** @PL_savestack, align 8
  %arrayidx368 = getelementptr inbounds %union.any, %union.any* %289, i64 %idxprom367
  %any_ptr = bitcast %union.any* %arrayidx368 to i8**
  store i8* %287, i8** %any_ptr, align 8
  %290 = load i32, i32* @PL_savestack_ix, align 4
  %inc369 = add nsw i32 %290, 1
  store i32 %inc369, i32* @PL_savestack_ix, align 4
  %idxprom370 = sext i32 %290 to i64
  %291 = load %union.any*, %union.any** @PL_savestack, align 8
  %arrayidx371 = getelementptr inbounds %union.any, %union.any* %291, i64 %idxprom370
  %any_i32 = bitcast %union.any* %arrayidx371 to i32*
  store i32 33, i32* %any_i32, align 4
  store i32 33, i32* %tmp
  %292 = load i32, i32* %tmp
  %293 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any372 = getelementptr inbounds %struct.cv, %struct.cv* %293, i32 0, i32 0
  %294 = load %struct.xpvcv*, %struct.xpvcv** %sv_any372, align 8
  %xcv_depth373 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %294, i32 0, i32 14
  %295 = load i64, i64* %xcv_depth373, align 8
  %296 = load %struct.av*, %struct.av** %padlist, align 8
  %sv_any374 = getelementptr inbounds %struct.av, %struct.av* %296, i32 0, i32 0
  %297 = load %struct.xpvav*, %struct.xpvav** %sv_any374, align 8
  %xav_array375 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %297, i32 0, i32 0
  %298 = load i8*, i8** %xav_array375, align 8
  %299 = bitcast i8* %298 to %struct.sv**
  %arrayidx376 = getelementptr inbounds %struct.sv*, %struct.sv** %299, i64 %295
  %300 = load %struct.sv*, %struct.sv** %arrayidx376, align 8
  %301 = bitcast %struct.sv* %300 to %struct.av*
  store %struct.av* %301, %struct.av** @PL_comppad, align 8
  %302 = load %struct.av*, %struct.av** @PL_comppad, align 8
  %sv_any377 = getelementptr inbounds %struct.av, %struct.av* %302, i32 0, i32 0
  %303 = load %struct.xpvav*, %struct.xpvav** %sv_any377, align 8
  %xav_array378 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %303, i32 0, i32 0
  %304 = load i8*, i8** %xav_array378, align 8
  %305 = bitcast i8* %304 to %struct.sv**
  store %struct.sv** %305, %struct.sv*** @PL_curpad, align 8
  %306 = load i8, i8* %hasargs, align 1
  %tobool379 = icmp ne i8 %306, 0
  br i1 %tobool379, label %if.then.380, label %if.end.486

if.then.380:                                      ; preds = %if.end.365
  %307 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %arrayidx384 = getelementptr inbounds %struct.sv*, %struct.sv** %307, i64 0
  %308 = load %struct.sv*, %struct.sv** %arrayidx384, align 8
  %309 = bitcast %struct.sv* %308 to %struct.av*
  store %struct.av* %309, %struct.av** %av382, align 8
  %310 = load %struct.av*, %struct.av** %av382, align 8
  %sv_any385 = getelementptr inbounds %struct.av, %struct.av* %310, i32 0, i32 0
  %311 = load %struct.xpvav*, %struct.xpvav** %sv_any385, align 8
  %xav_flags = getelementptr inbounds %struct.xpvav, %struct.xpvav* %311, i32 0, i32 9
  %312 = load i8, i8* %xav_flags, align 1
  %conv386 = zext i8 %312 to i32
  %and387 = and i32 %conv386, 1
  %tobool388 = icmp ne i32 %and387, 0
  br i1 %tobool388, label %if.then.389, label %if.end.399

if.then.389:                                      ; preds = %if.then.380
  %313 = load %struct.av*, %struct.av** %av382, align 8
  call void @Perl_av_clear(%struct.av* %313)
  %314 = load %struct.av*, %struct.av** %av382, align 8
  %sv_any390 = getelementptr inbounds %struct.av, %struct.av* %314, i32 0, i32 0
  %315 = load %struct.xpvav*, %struct.xpvav** %sv_any390, align 8
  %xav_flags391 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %315, i32 0, i32 9
  %316 = load i8, i8* %xav_flags391, align 1
  %conv392 = zext i8 %316 to i32
  %and393 = and i32 %conv392, -2
  %conv394 = trunc i32 %and393 to i8
  store i8 %conv394, i8* %xav_flags391, align 1
  %317 = load %struct.av*, %struct.av** %av382, align 8
  %sv_any395 = getelementptr inbounds %struct.av, %struct.av* %317, i32 0, i32 0
  %318 = load %struct.xpvav*, %struct.xpvav** %sv_any395, align 8
  %xav_flags396 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %318, i32 0, i32 9
  %319 = load i8, i8* %xav_flags396, align 1
  %conv397 = zext i8 %319 to i32
  %or = or i32 %conv397, 2
  %conv398 = trunc i32 %or to i8
  store i8 %conv398, i8* %xav_flags396, align 1
  br label %if.end.399

if.end.399:                                       ; preds = %if.then.389, %if.then.380
  %320 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any400 = getelementptr inbounds %struct.gv, %struct.gv* %320, i32 0, i32 0
  %321 = load %struct.xpvgv*, %struct.xpvgv** %sv_any400, align 8
  %xgv_gp401 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %321, i32 0, i32 7
  %322 = load %struct.gp*, %struct.gp** %xgv_gp401, align 8
  %gp_av402 = getelementptr inbounds %struct.gp, %struct.gp* %322, i32 0, i32 4
  %323 = load %struct.av*, %struct.av** %gp_av402, align 8
  %324 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u403 = getelementptr inbounds %struct.context, %struct.context* %324, i32 0, i32 1
  %cx_blk404 = bitcast %union.anon.0* %cx_u403 to %struct.block*
  %blk_u405 = getelementptr inbounds %struct.block, %struct.block* %cx_blk404, i32 0, i32 7
  %blku_sub406 = bitcast %union.anon.1* %blk_u405 to %struct.block_sub*
  %savearray = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub406, i32 0, i32 3
  store %struct.av* %323, %struct.av** %savearray, align 8
  %325 = load %struct.av*, %struct.av** %av382, align 8
  %326 = bitcast %struct.av* %325 to %struct.sv*
  store %struct.sv* %326, %struct.sv** @PL_Sv, align 8
  %327 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool407 = icmp ne %struct.sv* %327, null
  br i1 %tobool407, label %land.rhs.408, label %land.end.412

land.rhs.408:                                     ; preds = %if.end.399
  %328 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt409 = getelementptr inbounds %struct.sv, %struct.sv* %328, i32 0, i32 1
  %329 = load i32, i32* %sv_refcnt409, align 4
  %inc410 = add i32 %329, 1
  store i32 %inc410, i32* %sv_refcnt409, align 4
  %tobool411 = icmp ne i32 %inc410, 0
  br label %land.end.412

land.end.412:                                     ; preds = %land.rhs.408, %if.end.399
  %330 = phi i1 [ false, %if.end.399 ], [ %tobool411, %land.rhs.408 ]
  %land.ext413 = zext i1 %330 to i32
  %331 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %332 = bitcast %struct.sv* %331 to %struct.av*
  %333 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any414 = getelementptr inbounds %struct.gv, %struct.gv* %333, i32 0, i32 0
  %334 = load %struct.xpvgv*, %struct.xpvgv** %sv_any414, align 8
  %xgv_gp415 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %334, i32 0, i32 7
  %335 = load %struct.gp*, %struct.gp** %xgv_gp415, align 8
  %gp_av416 = getelementptr inbounds %struct.gp, %struct.gp* %335, i32 0, i32 4
  store %struct.av* %332, %struct.av** %gp_av416, align 8
  %336 = load %struct.av*, %struct.av** @PL_comppad, align 8
  %337 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u417 = getelementptr inbounds %struct.context, %struct.context* %337, i32 0, i32 1
  %cx_blk418 = bitcast %union.anon.0* %cx_u417 to %struct.block*
  %blk_u419 = getelementptr inbounds %struct.block, %struct.block* %cx_blk418, i32 0, i32 7
  %blku_sub420 = bitcast %union.anon.1* %blk_u419 to %struct.block_sub*
  %oldcomppad = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub420, i32 0, i32 8
  store %struct.av* %336, %struct.av** %oldcomppad, align 8
  %338 = load %struct.av*, %struct.av** %av382, align 8
  %339 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u421 = getelementptr inbounds %struct.context, %struct.context* %339, i32 0, i32 1
  %cx_blk422 = bitcast %union.anon.0* %cx_u421 to %struct.block*
  %blk_u423 = getelementptr inbounds %struct.block, %struct.block* %cx_blk422, i32 0, i32 7
  %blku_sub424 = bitcast %union.anon.1* %blk_u423 to %struct.block_sub*
  %argarray = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub424, i32 0, i32 4
  store %struct.av* %338, %struct.av** %argarray, align 8
  %340 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr425 = getelementptr inbounds %struct.sv*, %struct.sv** %340, i32 1
  store %struct.sv** %incdec.ptr425, %struct.sv*** %mark, align 8
  %341 = load i32, i32* %items270, align 4
  %conv426 = sext i32 %341 to i64
  %342 = load %struct.av*, %struct.av** %av382, align 8
  %sv_any427 = getelementptr inbounds %struct.av, %struct.av* %342, i32 0, i32 0
  %343 = load %struct.xpvav*, %struct.xpvav** %sv_any427, align 8
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %343, i32 0, i32 2
  %344 = load i64, i64* %xav_max, align 8
  %add428 = add nsw i64 %344, 1
  %cmp429 = icmp sgt i64 %conv426, %add428
  br i1 %cmp429, label %if.then.431, label %if.end.470

if.then.431:                                      ; preds = %land.end.412
  %345 = load %struct.av*, %struct.av** %av382, align 8
  %sv_any432 = getelementptr inbounds %struct.av, %struct.av* %345, i32 0, i32 0
  %346 = load %struct.xpvav*, %struct.xpvav** %sv_any432, align 8
  %xav_alloc = getelementptr inbounds %struct.xpvav, %struct.xpvav* %346, i32 0, i32 7
  %347 = load %struct.sv**, %struct.sv*** %xav_alloc, align 8
  store %struct.sv** %347, %struct.sv*** %ary, align 8
  %348 = load %struct.av*, %struct.av** %av382, align 8
  %sv_any433 = getelementptr inbounds %struct.av, %struct.av* %348, i32 0, i32 0
  %349 = load %struct.xpvav*, %struct.xpvav** %sv_any433, align 8
  %xav_array434 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %349, i32 0, i32 0
  %350 = load i8*, i8** %xav_array434, align 8
  %351 = bitcast i8* %350 to %struct.sv**
  %352 = load %struct.sv**, %struct.sv*** %ary, align 8
  %cmp435 = icmp ne %struct.sv** %351, %352
  br i1 %cmp435, label %if.then.437, label %if.end.451

if.then.437:                                      ; preds = %if.then.431
  %353 = load %struct.av*, %struct.av** %av382, align 8
  %sv_any438 = getelementptr inbounds %struct.av, %struct.av* %353, i32 0, i32 0
  %354 = load %struct.xpvav*, %struct.xpvav** %sv_any438, align 8
  %xav_array439 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %354, i32 0, i32 0
  %355 = load i8*, i8** %xav_array439, align 8
  %356 = bitcast i8* %355 to %struct.sv**
  %357 = load %struct.av*, %struct.av** %av382, align 8
  %sv_any440 = getelementptr inbounds %struct.av, %struct.av* %357, i32 0, i32 0
  %358 = load %struct.xpvav*, %struct.xpvav** %sv_any440, align 8
  %xav_alloc441 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %358, i32 0, i32 7
  %359 = load %struct.sv**, %struct.sv*** %xav_alloc441, align 8
  %sub.ptr.lhs.cast442 = ptrtoint %struct.sv** %356 to i64
  %sub.ptr.rhs.cast443 = ptrtoint %struct.sv** %359 to i64
  %sub.ptr.sub444 = sub i64 %sub.ptr.lhs.cast442, %sub.ptr.rhs.cast443
  %sub.ptr.div445 = sdiv exact i64 %sub.ptr.sub444, 8
  %360 = load %struct.av*, %struct.av** %av382, align 8
  %sv_any446 = getelementptr inbounds %struct.av, %struct.av* %360, i32 0, i32 0
  %361 = load %struct.xpvav*, %struct.xpvav** %sv_any446, align 8
  %xav_max447 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %361, i32 0, i32 2
  %362 = load i64, i64* %xav_max447, align 8
  %add448 = add nsw i64 %362, %sub.ptr.div445
  store i64 %add448, i64* %xav_max447, align 8
  %363 = load %struct.sv**, %struct.sv*** %ary, align 8
  %364 = bitcast %struct.sv** %363 to i8*
  %365 = load %struct.av*, %struct.av** %av382, align 8
  %sv_any449 = getelementptr inbounds %struct.av, %struct.av* %365, i32 0, i32 0
  %366 = load %struct.xpvav*, %struct.xpvav** %sv_any449, align 8
  %367 = bitcast %struct.xpvav* %366 to %struct.xpv*
  %xpv_pv450 = getelementptr inbounds %struct.xpv, %struct.xpv* %367, i32 0, i32 0
  store i8* %364, i8** %xpv_pv450, align 8
  br label %if.end.451

if.end.451:                                       ; preds = %if.then.437, %if.then.431
  %368 = load i32, i32* %items270, align 4
  %conv452 = sext i32 %368 to i64
  %369 = load %struct.av*, %struct.av** %av382, align 8
  %sv_any453 = getelementptr inbounds %struct.av, %struct.av* %369, i32 0, i32 0
  %370 = load %struct.xpvav*, %struct.xpvav** %sv_any453, align 8
  %xav_max454 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %370, i32 0, i32 2
  %371 = load i64, i64* %xav_max454, align 8
  %add455 = add nsw i64 %371, 1
  %cmp456 = icmp sgt i64 %conv452, %add455
  br i1 %cmp456, label %if.then.458, label %if.end.469

if.then.458:                                      ; preds = %if.end.451
  %372 = load i32, i32* %items270, align 4
  %sub = sub nsw i32 %372, 1
  %conv459 = sext i32 %sub to i64
  %373 = load %struct.av*, %struct.av** %av382, align 8
  %sv_any460 = getelementptr inbounds %struct.av, %struct.av* %373, i32 0, i32 0
  %374 = load %struct.xpvav*, %struct.xpvav** %sv_any460, align 8
  %xav_max461 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %374, i32 0, i32 2
  store i64 %conv459, i64* %xav_max461, align 8
  %375 = load %struct.sv**, %struct.sv*** %ary, align 8
  %376 = bitcast %struct.sv** %375 to i8*
  %377 = load i32, i32* %items270, align 4
  %conv462 = sext i32 %377 to i64
  %mul463 = mul i64 %conv462, 8
  %call464 = call i8* @Perl_safesysrealloc(i8* %376, i64 %mul463)
  %378 = bitcast i8* %call464 to %struct.sv**
  store %struct.sv** %378, %struct.sv*** %ary, align 8
  %379 = load %struct.sv**, %struct.sv*** %ary, align 8
  %380 = load %struct.av*, %struct.av** %av382, align 8
  %sv_any465 = getelementptr inbounds %struct.av, %struct.av* %380, i32 0, i32 0
  %381 = load %struct.xpvav*, %struct.xpvav** %sv_any465, align 8
  %xav_alloc466 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %381, i32 0, i32 7
  store %struct.sv** %379, %struct.sv*** %xav_alloc466, align 8
  %382 = load %struct.sv**, %struct.sv*** %ary, align 8
  %383 = bitcast %struct.sv** %382 to i8*
  %384 = load %struct.av*, %struct.av** %av382, align 8
  %sv_any467 = getelementptr inbounds %struct.av, %struct.av* %384, i32 0, i32 0
  %385 = load %struct.xpvav*, %struct.xpvav** %sv_any467, align 8
  %386 = bitcast %struct.xpvav* %385 to %struct.xpv*
  %xpv_pv468 = getelementptr inbounds %struct.xpv, %struct.xpv* %386, i32 0, i32 0
  store i8* %383, i8** %xpv_pv468, align 8
  br label %if.end.469

if.end.469:                                       ; preds = %if.then.458, %if.end.451
  br label %if.end.470

if.end.470:                                       ; preds = %if.end.469, %land.end.412
  %387 = load %struct.av*, %struct.av** %av382, align 8
  %sv_any471 = getelementptr inbounds %struct.av, %struct.av* %387, i32 0, i32 0
  %388 = load %struct.xpvav*, %struct.xpvav** %sv_any471, align 8
  %xav_array472 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %388, i32 0, i32 0
  %389 = load i8*, i8** %xav_array472, align 8
  %390 = bitcast i8* %389 to %struct.sv**
  %391 = bitcast %struct.sv** %390 to i8*
  %392 = load %struct.sv**, %struct.sv*** %mark, align 8
  %393 = bitcast %struct.sv** %392 to i8*
  %394 = load i32, i32* %items270, align 4
  %conv473 = sext i32 %394 to i64
  %mul474 = mul i64 %conv473, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %391, i8* %393, i64 %mul474, i32 1, i1 false)
  %395 = load i32, i32* %items270, align 4
  %sub475 = sub nsw i32 %395, 1
  %conv476 = sext i32 %sub475 to i64
  %396 = load %struct.av*, %struct.av** %av382, align 8
  %sv_any477 = getelementptr inbounds %struct.av, %struct.av* %396, i32 0, i32 0
  %397 = load %struct.xpvav*, %struct.xpvav** %sv_any477, align 8
  %xav_fill478 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %397, i32 0, i32 1
  store i64 %conv476, i64* %xav_fill478, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.484, %if.end.470
  %398 = load i32, i32* %items270, align 4
  %dec = add nsw i32 %398, -1
  store i32 %dec, i32* %items270, align 4
  %tobool479 = icmp ne i32 %398, 0
  br i1 %tobool479, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %399 = load %struct.sv**, %struct.sv*** %mark, align 8
  %400 = load %struct.sv*, %struct.sv** %399, align 8
  %tobool480 = icmp ne %struct.sv* %400, null
  br i1 %tobool480, label %if.then.481, label %if.end.484

if.then.481:                                      ; preds = %while.body
  %401 = load %struct.sv**, %struct.sv*** %mark, align 8
  %402 = load %struct.sv*, %struct.sv** %401, align 8
  %sv_flags482 = getelementptr inbounds %struct.sv, %struct.sv* %402, i32 0, i32 2
  %403 = load i32, i32* %sv_flags482, align 4
  %and483 = and i32 %403, -2049
  store i32 %and483, i32* %sv_flags482, align 4
  br label %if.end.484

if.end.484:                                       ; preds = %if.then.481, %while.body
  %404 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr485 = getelementptr inbounds %struct.sv*, %struct.sv** %404, i32 1
  store %struct.sv** %incdec.ptr485, %struct.sv*** %mark, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.486

if.end.486:                                       ; preds = %while.end, %if.end.365
  %405 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any487 = getelementptr inbounds %struct.cv, %struct.cv* %405, i32 0, i32 0
  %406 = load %struct.xpvcv*, %struct.xpvcv** %sv_any487, align 8
  %xcv_depth488 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %406, i32 0, i32 14
  %407 = load i64, i64* %xcv_depth488, align 8
  %cmp489 = icmp eq i64 %407, 100
  br i1 %cmp489, label %land.lhs.true.491, label %if.end.530

land.lhs.true.491:                                ; preds = %if.end.486
  %408 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %408, i32 0, i32 14
  %409 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp492 = icmp ne %struct.sv* %409, null
  br i1 %cmp492, label %land.lhs.true.494, label %lor.lhs.false.510

land.lhs.true.494:                                ; preds = %land.lhs.true.491
  %410 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings495 = getelementptr inbounds %struct.cop, %struct.cop* %410, i32 0, i32 14
  %411 = load %struct.sv*, %struct.sv** %cop_warnings495, align 8
  %cmp496 = icmp ne %struct.sv* %411, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp496, label %land.lhs.true.498, label %lor.lhs.false.510

land.lhs.true.498:                                ; preds = %land.lhs.true.494
  %412 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings499 = getelementptr inbounds %struct.cop, %struct.cop* %412, i32 0, i32 14
  %413 = load %struct.sv*, %struct.sv** %cop_warnings499, align 8
  %cmp500 = icmp eq %struct.sv* %413, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp500, label %land.lhs.true.518, label %lor.lhs.false.502

lor.lhs.false.502:                                ; preds = %land.lhs.true.498
  %414 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings503 = getelementptr inbounds %struct.cop, %struct.cop* %414, i32 0, i32 14
  %415 = load %struct.sv*, %struct.sv** %cop_warnings503, align 8
  %sv_any504 = getelementptr inbounds %struct.sv, %struct.sv* %415, i32 0, i32 0
  %416 = load i8*, i8** %sv_any504, align 8
  %417 = bitcast i8* %416 to %struct.xpv*
  %xpv_pv505 = getelementptr inbounds %struct.xpv, %struct.xpv* %417, i32 0, i32 0
  %418 = load i8*, i8** %xpv_pv505, align 8
  %arrayidx506 = getelementptr inbounds i8, i8* %418, i64 4
  %419 = load i8, i8* %arrayidx506, align 1
  %conv507 = sext i8 %419 to i32
  %and508 = and i32 %conv507, 16
  %tobool509 = icmp ne i32 %and508, 0
  br i1 %tobool509, label %land.lhs.true.518, label %lor.lhs.false.510

lor.lhs.false.510:                                ; preds = %lor.lhs.false.502, %land.lhs.true.494, %land.lhs.true.491
  %420 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings511 = getelementptr inbounds %struct.cop, %struct.cop* %420, i32 0, i32 14
  %421 = load %struct.sv*, %struct.sv** %cop_warnings511, align 8
  %cmp512 = icmp eq %struct.sv* %421, null
  br i1 %cmp512, label %land.lhs.true.514, label %if.end.530

land.lhs.true.514:                                ; preds = %lor.lhs.false.510
  %422 = load i8, i8* @PL_dowarn, align 1
  %conv515 = zext i8 %422 to i32
  %and516 = and i32 %conv515, 1
  %tobool517 = icmp ne i32 %and516, 0
  br i1 %tobool517, label %land.lhs.true.518, label %if.end.530

land.lhs.true.518:                                ; preds = %land.lhs.true.514, %lor.lhs.false.502, %land.lhs.true.498
  %423 = load i32, i32* @PL_perldb, align 4
  %tobool519 = icmp ne i32 %423, 0
  br i1 %tobool519, label %land.lhs.true.520, label %if.then.529

land.lhs.true.520:                                ; preds = %land.lhs.true.518
  %424 = load i32, i32* @PL_perldb, align 4
  %and521 = and i32 %424, 1
  %tobool522 = icmp ne i32 %and521, 0
  br i1 %tobool522, label %land.lhs.true.523, label %if.then.529

land.lhs.true.523:                                ; preds = %land.lhs.true.520
  %425 = load %struct.cv*, %struct.cv** %cv, align 8
  %426 = load %struct.gv*, %struct.gv** @PL_DBsub, align 8
  %sv_any524 = getelementptr inbounds %struct.gv, %struct.gv* %426, i32 0, i32 0
  %427 = load %struct.xpvgv*, %struct.xpvgv** %sv_any524, align 8
  %xgv_gp525 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %427, i32 0, i32 7
  %428 = load %struct.gp*, %struct.gp** %xgv_gp525, align 8
  %gp_cv526 = getelementptr inbounds %struct.gp, %struct.gp* %428, i32 0, i32 7
  %429 = load %struct.cv*, %struct.cv** %gp_cv526, align 8
  %cmp527 = icmp eq %struct.cv* %425, %429
  br i1 %cmp527, label %if.end.530, label %if.then.529

if.then.529:                                      ; preds = %land.lhs.true.523, %land.lhs.true.520, %land.lhs.true.518
  %430 = load %struct.cv*, %struct.cv** %cv, align 8
  call void @Perl_sub_crush_depth(%struct.cv* %430)
  br label %if.end.530

if.end.530:                                       ; preds = %if.then.529, %land.lhs.true.523, %land.lhs.true.514, %lor.lhs.false.510, %if.end.486
  %431 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %431, %struct.sv*** @PL_stack_sp, align 8
  %432 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any531 = getelementptr inbounds %struct.cv, %struct.cv* %432, i32 0, i32 0
  %433 = load %struct.xpvcv*, %struct.xpvcv** %sv_any531, align 8
  %xcv_start532 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %433, i32 0, i32 8
  %434 = load %struct.op*, %struct.op** %xcv_start532, align 8
  store %struct.op* %434, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.end.530, %if.end.264, %if.then.203, %if.then.146, %if.else.140, %if.then.118, %sw.bb, %if.then.49, %if.then.43, %if.end.14, %if.then
  %435 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %435
}

declare %struct.cv* @Perl_get_cv(i8*, i32) #1

declare %struct.cv* @Perl_sv_2cv(%struct.sv*, %struct.hv**, %struct.gv**, i32) #1

declare %struct.gv* @Perl_gv_autoload4(%struct.hv*, i8*, i64, i32) #1

declare void @Perl_gv_efullname4(%struct.sv*, %struct.gv*, i8*, i8 signext) #1

; Function Attrs: nounwind uwtable
define internal %struct.cv* @S_get_db_sub(%struct.sv** %svp, %struct.cv* %cv) #0 {
entry:
  %svp.addr = alloca %struct.sv**, align 8
  %cv.addr = alloca %struct.cv*, align 8
  %dbsv = alloca %struct.sv*, align 8
  %gv = alloca %struct.gv*, align 8
  %tmp = alloca %struct.sv*, align 8
  store %struct.sv** %svp, %struct.sv*** %svp.addr, align 8
  store %struct.cv* %cv, %struct.cv** %cv.addr, align 8
  %0 = load %struct.gv*, %struct.gv** @PL_DBsub, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %0, i32 0, i32 0
  %1 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %1, i32 0, i32 7
  %2 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %2, i32 0, i32 0
  %3 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  store %struct.sv* %3, %struct.sv** %dbsv, align 8
  %4 = load i32, i32* @PL_perldb, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %land.lhs.true, label %if.then

land.lhs.true:                                    ; preds = %entry
  %5 = load i32, i32* @PL_perldb, align 4
  %and = and i32 %5, 64
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.else.26, label %if.then

if.then:                                          ; preds = %land.lhs.true, %entry
  %6 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any2 = getelementptr inbounds %struct.cv, %struct.cv* %6, i32 0, i32 0
  %7 = load %struct.xpvcv*, %struct.xpvcv** %sv_any2, align 8
  %xcv_gv = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %7, i32 0, i32 12
  %8 = load %struct.gv*, %struct.gv** %xcv_gv, align 8
  store %struct.gv* %8, %struct.gv** %gv, align 8
  %9 = load %struct.sv*, %struct.sv** %dbsv, align 8
  call void @Perl_save_item(%struct.sv* %9)
  %10 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any3 = getelementptr inbounds %struct.cv, %struct.cv* %10, i32 0, i32 0
  %11 = load %struct.xpvcv*, %struct.xpvcv** %sv_any3, align 8
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %11, i32 0, i32 17
  %12 = load i16, i16* %xcv_flags, align 2
  %conv = zext i16 %12 to i32
  %and4 = and i32 %conv, 6
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.then.24, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %13 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any6 = getelementptr inbounds %struct.gv, %struct.gv* %13, i32 0, i32 0
  %14 = load %struct.xpvgv*, %struct.xpvgv** %sv_any6, align 8
  %xgv_name = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %14, i32 0, i32 8
  %15 = load i8*, i8** %xgv_name, align 8
  %call = call i32 @strcmp(i8* %15, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.49, i32 0, i32 0))
  %tobool7 = icmp ne i32 %call, 0
  br i1 %tobool7, label %lor.lhs.false.8, label %if.then.24

lor.lhs.false.8:                                  ; preds = %lor.lhs.false
  %16 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any9 = getelementptr inbounds %struct.gv, %struct.gv* %16, i32 0, i32 0
  %17 = load %struct.xpvgv*, %struct.xpvgv** %sv_any9, align 8
  %xgv_gp10 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %17, i32 0, i32 7
  %18 = load %struct.gp*, %struct.gp** %xgv_gp10, align 8
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %18, i32 0, i32 7
  %19 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %20 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %cmp = icmp ne %struct.cv* %19, %20
  br i1 %cmp, label %land.lhs.true.12, label %if.else

land.lhs.true.12:                                 ; preds = %lor.lhs.false.8
  %21 = load %struct.sv**, %struct.sv*** %svp.addr, align 8
  %22 = load %struct.sv*, %struct.sv** %21, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags, align 4
  %and13 = and i32 %23, 255
  %cmp14 = icmp eq i32 %and13, 13
  br i1 %cmp14, label %land.lhs.true.16, label %if.then.24

land.lhs.true.16:                                 ; preds = %land.lhs.true.12
  %24 = load %struct.sv**, %struct.sv*** %svp.addr, align 8
  %25 = load %struct.sv*, %struct.sv** %24, align 8
  %26 = bitcast %struct.sv* %25 to %struct.gv*
  %sv_any17 = getelementptr inbounds %struct.gv, %struct.gv* %26, i32 0, i32 0
  %27 = load %struct.xpvgv*, %struct.xpvgv** %sv_any17, align 8
  %xgv_gp18 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %27, i32 0, i32 7
  %28 = load %struct.gp*, %struct.gp** %xgv_gp18, align 8
  %gp_cv19 = getelementptr inbounds %struct.gp, %struct.gp* %28, i32 0, i32 7
  %29 = load %struct.cv*, %struct.cv** %gp_cv19, align 8
  %30 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %cmp20 = icmp eq %struct.cv* %29, %30
  br i1 %cmp20, label %land.lhs.true.22, label %if.then.24

land.lhs.true.22:                                 ; preds = %land.lhs.true.16
  %31 = load %struct.sv**, %struct.sv*** %svp.addr, align 8
  %32 = load %struct.sv*, %struct.sv** %31, align 8
  %33 = bitcast %struct.sv* %32 to %struct.gv*
  store %struct.gv* %33, %struct.gv** %gv, align 8
  %tobool23 = icmp ne %struct.gv* %33, null
  br i1 %tobool23, label %if.else, label %if.then.24

if.then.24:                                       ; preds = %land.lhs.true.22, %land.lhs.true.16, %land.lhs.true.12, %lor.lhs.false, %if.then
  %34 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %35 = bitcast %struct.cv* %34 to %struct.sv*
  %call25 = call %struct.sv* @Perl_newRV(%struct.sv* %35)
  store %struct.sv* %call25, %struct.sv** %tmp, align 8
  %36 = load %struct.sv*, %struct.sv** %dbsv, align 8
  %37 = load %struct.sv*, %struct.sv** %tmp, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %36, %struct.sv* %37, i32 2)
  %38 = load %struct.sv*, %struct.sv** %tmp, align 8
  call void @Perl_sv_free(%struct.sv* %38)
  br label %if.end

if.else:                                          ; preds = %land.lhs.true.22, %lor.lhs.false.8
  %39 = load %struct.sv*, %struct.sv** %dbsv, align 8
  %40 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_gv_efullname4(%struct.sv* %39, %struct.gv* %40, i8* null, i8 signext 1)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.24
  br label %if.end.43

if.else.26:                                       ; preds = %land.lhs.true
  %41 = load %struct.sv*, %struct.sv** %dbsv, align 8
  %sv_flags27 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 2
  %42 = load i32, i32* %sv_flags27, align 4
  %and28 = and i32 %42, 255
  %cmp29 = icmp uge i32 %and28, 5
  br i1 %cmp29, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.else.26
  %43 = load %struct.sv*, %struct.sv** %dbsv, align 8
  %call31 = call signext i8 @Perl_sv_upgrade(%struct.sv* %43, i32 5)
  %conv32 = sext i8 %call31 to i32
  %tobool33 = icmp ne i32 %conv32, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.else.26
  %44 = phi i1 [ true, %if.else.26 ], [ %tobool33, %lor.rhs ]
  %lor.ext = zext i1 %44 to i32
  %45 = load %struct.sv*, %struct.sv** %dbsv, align 8
  %sv_flags34 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 2
  %46 = load i32, i32* %sv_flags34, align 4
  %and35 = and i32 %46, 2097152
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.end
  %47 = load %struct.sv*, %struct.sv** %dbsv, align 8
  %call37 = call i32 @Perl_sv_backoff(%struct.sv* %47)
  %tobool38 = icmp ne i32 %call37, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.end
  %48 = phi i1 [ false, %lor.end ], [ %tobool38, %land.rhs ]
  %land.ext = zext i1 %48 to i32
  %49 = load %struct.sv*, %struct.sv** %dbsv, align 8
  %sv_flags39 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 2
  %50 = load i32, i32* %sv_flags39, align 4
  %or = or i32 %50, 16842752
  store i32 %or, i32* %sv_flags39, align 4
  %51 = load %struct.sv*, %struct.sv** %dbsv, align 8
  %sv_any40 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 0
  %52 = load i8*, i8** %sv_any40, align 8
  %53 = bitcast i8* %52 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %53, i32 0, i32 3
  call void @Perl_save_iv(i64* %xiv_iv)
  %54 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %55 = ptrtoint %struct.cv* %54 to i64
  %56 = load %struct.sv*, %struct.sv** %dbsv, align 8
  %sv_any41 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 0
  %57 = load i8*, i8** %sv_any41, align 8
  %58 = bitcast i8* %57 to %struct.xpviv*
  %xiv_iv42 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %58, i32 0, i32 3
  store i64 %55, i64* %xiv_iv42, align 8
  br label %if.end.43

if.end.43:                                        ; preds = %land.end, %if.end
  %59 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any44 = getelementptr inbounds %struct.cv, %struct.cv* %59, i32 0, i32 0
  %60 = load %struct.xpvcv*, %struct.xpvcv** %sv_any44, align 8
  %xcv_xsub = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %60, i32 0, i32 10
  %61 = load void (%struct.cv*)*, void (%struct.cv*)** %xcv_xsub, align 8
  %tobool45 = icmp ne void (%struct.cv*)* %61, null
  br i1 %tobool45, label %if.then.46, label %if.end.47

if.then.46:                                       ; preds = %if.end.43
  %62 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  store %struct.cop* %62, %struct.cop** @PL_curcopdb, align 8
  br label %if.end.47

if.end.47:                                        ; preds = %if.then.46, %if.end.43
  %63 = load %struct.gv*, %struct.gv** @PL_DBsub, align 8
  %sv_any48 = getelementptr inbounds %struct.gv, %struct.gv* %63, i32 0, i32 0
  %64 = load %struct.xpvgv*, %struct.xpvgv** %sv_any48, align 8
  %xgv_gp49 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %64, i32 0, i32 7
  %65 = load %struct.gp*, %struct.gp** %xgv_gp49, align 8
  %gp_cv50 = getelementptr inbounds %struct.gp, %struct.gp* %65, i32 0, i32 7
  %66 = load %struct.cv*, %struct.cv** %gp_cv50, align 8
  store %struct.cv* %66, %struct.cv** %cv.addr, align 8
  %67 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  ret %struct.cv* %67
}

declare void @Perl_push_return(%struct.op*) #1

declare void @Perl_save_freesv(%struct.sv*) #1

declare void @Perl_pad_push(%struct.av*, i32, i32) #1

declare void @Perl_savestack_grow() #1

; Function Attrs: nounwind uwtable
define void @Perl_sub_crush_depth(%struct.cv* %cv) #0 {
entry:
  %cv.addr = alloca %struct.cv*, align 8
  %tmpstr = alloca %struct.sv*, align 8
  store %struct.cv* %cv, %struct.cv** %cv.addr, align 8
  %0 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %0, i32 0, i32 0
  %1 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %1, i32 0, i32 17
  %2 = load i16, i16* %xcv_flags, align 2
  %conv = zext i16 %2 to i32
  %and = and i32 %conv, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  call void (i32, i8*, ...) @Perl_warner(i32 18, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.44, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %call = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call, %struct.sv** %tmpstr, align 8
  %3 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %4 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.cv, %struct.cv* %4, i32 0, i32 0
  %5 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1, align 8
  %xcv_gv = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %5, i32 0, i32 12
  %6 = load %struct.gv*, %struct.gv** %xcv_gv, align 8
  call void @Perl_gv_efullname4(%struct.sv* %3, %struct.gv* %6, i8* null, i8 signext 1)
  %7 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  call void (i32, i8*, ...) @Perl_warner(i32 18, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.45, i32 0, i32 0), %struct.sv* %7)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_aelem() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %svp = alloca %struct.sv**, align 8
  %elemsv = alloca %struct.sv*, align 8
  %elem = alloca i64, align 8
  %av = alloca %struct.av*, align 8
  %lval = alloca i32, align 4
  %defer = alloca i32, align 4
  %sv = alloca %struct.sv*, align 8
  %lv = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** %elemsv, align 8
  %3 = load %struct.sv*, %struct.sv** %elemsv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %and = and i32 %4, 65536
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %5 = load %struct.sv*, %struct.sv** %elemsv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 0
  %6 = load i8*, i8** %sv_any, align 8
  %7 = bitcast i8* %6 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %7, i32 0, i32 3
  %8 = load i64, i64* %xiv_iv, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %9 = load %struct.sv*, %struct.sv** %elemsv, align 8
  %call = call i64 @Perl_sv_2iv(%struct.sv* %9)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %8, %cond.true ], [ %call, %cond.false ]
  store i64 %cond, i64* %elem, align 8
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr1 = getelementptr inbounds %struct.sv*, %struct.sv** %10, i32 -1
  store %struct.sv** %incdec.ptr1, %struct.sv*** %sp, align 8
  %11 = load %struct.sv*, %struct.sv** %10, align 8
  %12 = bitcast %struct.sv* %11 to %struct.av*
  store %struct.av* %12, %struct.av** %av, align 8
  %13 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 6
  %14 = load i8, i8* %op_flags, align 1
  %conv = zext i8 %14 to i32
  %and2 = and i32 %conv, 32
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %cond.end
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 7
  %16 = load i8, i8* %op_private, align 1
  %conv4 = zext i8 %16 to i32
  %and5 = and i32 %conv4, 8
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %call7 = call i32 @Perl_is_lvalue_sub()
  %tobool8 = icmp ne i32 %call7, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %17 = phi i1 [ false, %lor.rhs ], [ %tobool8, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %cond.end
  %18 = phi i1 [ true, %cond.end ], [ %17, %land.end ]
  %lor.ext = zext i1 %18 to i32
  store i32 %lor.ext, i32* %lval, align 4
  %19 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private9 = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 7
  %20 = load i8, i8* %op_private9, align 1
  %conv10 = zext i8 %20 to i32
  %and11 = and i32 %conv10, 16
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %land.rhs.13, label %land.end.25

land.rhs.13:                                      ; preds = %lor.end
  %21 = load i64, i64* %elem, align 8
  %22 = load %struct.av*, %struct.av** %av, align 8
  %23 = bitcast %struct.av* %22 to %struct.sv*
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %24, 32768
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %cond.true.17, label %cond.false.20

cond.true.17:                                     ; preds = %land.rhs.13
  %25 = load %struct.av*, %struct.av** %av, align 8
  %26 = bitcast %struct.av* %25 to %struct.sv*
  %call18 = call i32 @Perl_mg_size(%struct.sv* %26)
  %conv19 = sext i32 %call18 to i64
  br label %cond.end.22

cond.false.20:                                    ; preds = %land.rhs.13
  %27 = load %struct.av*, %struct.av** %av, align 8
  %sv_any21 = getelementptr inbounds %struct.av, %struct.av* %27, i32 0, i32 0
  %28 = load %struct.xpvav*, %struct.xpvav** %sv_any21, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %28, i32 0, i32 1
  %29 = load i64, i64* %xav_fill, align 8
  br label %cond.end.22

cond.end.22:                                      ; preds = %cond.false.20, %cond.true.17
  %cond23 = phi i64 [ %conv19, %cond.true.17 ], [ %29, %cond.false.20 ]
  %cmp = icmp sgt i64 %21, %cond23
  br label %land.end.25

land.end.25:                                      ; preds = %cond.end.22, %lor.end
  %30 = phi i1 [ false, %lor.end ], [ %cmp, %cond.end.22 ]
  %land.ext = zext i1 %30 to i32
  store i32 %land.ext, i32* %defer, align 4
  %31 = load %struct.sv*, %struct.sv** %elemsv, align 8
  %sv_flags26 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %32, 524288
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %land.end.25
  %33 = load %struct.sv*, %struct.sv** %elemsv, align 8
  %sv_flags29 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 2
  %34 = load i32, i32* %sv_flags29, align 4
  %and30 = and i32 %34, 268443648
  %tobool31 = icmp ne i32 %and30, 0
  br i1 %tobool31, label %if.end, label %land.lhs.true.32

land.lhs.true.32:                                 ; preds = %land.lhs.true
  %35 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %35, i32 0, i32 14
  %36 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp33 = icmp ne %struct.sv* %36, null
  br i1 %cmp33, label %land.lhs.true.35, label %lor.lhs.false.48

land.lhs.true.35:                                 ; preds = %land.lhs.true.32
  %37 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings36 = getelementptr inbounds %struct.cop, %struct.cop* %37, i32 0, i32 14
  %38 = load %struct.sv*, %struct.sv** %cop_warnings36, align 8
  %cmp37 = icmp ne %struct.sv* %38, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp37, label %land.lhs.true.39, label %lor.lhs.false.48

land.lhs.true.39:                                 ; preds = %land.lhs.true.35
  %39 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings40 = getelementptr inbounds %struct.cop, %struct.cop* %39, i32 0, i32 14
  %40 = load %struct.sv*, %struct.sv** %cop_warnings40, align 8
  %cmp41 = icmp eq %struct.sv* %40, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp41, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.39
  %41 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings43 = getelementptr inbounds %struct.cop, %struct.cop* %41, i32 0, i32 14
  %42 = load %struct.sv*, %struct.sv** %cop_warnings43, align 8
  %sv_any44 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 0
  %43 = load i8*, i8** %sv_any44, align 8
  %44 = bitcast i8* %43 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %44, i32 0, i32 0
  %45 = load i8*, i8** %xpv_pv, align 8
  %arrayidx = getelementptr inbounds i8, i8* %45, i64 3
  %46 = load i8, i8* %arrayidx, align 1
  %conv45 = sext i8 %46 to i32
  %and46 = and i32 %conv45, 1
  %tobool47 = icmp ne i32 %and46, 0
  br i1 %tobool47, label %if.then, label %lor.lhs.false.48

lor.lhs.false.48:                                 ; preds = %lor.lhs.false, %land.lhs.true.35, %land.lhs.true.32
  %47 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings49 = getelementptr inbounds %struct.cop, %struct.cop* %47, i32 0, i32 14
  %48 = load %struct.sv*, %struct.sv** %cop_warnings49, align 8
  %cmp50 = icmp eq %struct.sv* %48, null
  br i1 %cmp50, label %land.lhs.true.52, label %if.end

land.lhs.true.52:                                 ; preds = %lor.lhs.false.48
  %49 = load i8, i8* @PL_dowarn, align 1
  %conv53 = zext i8 %49 to i32
  %and54 = and i32 %conv53, 1
  %tobool55 = icmp ne i32 %and54, 0
  br i1 %tobool55, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.52, %lor.lhs.false, %land.lhs.true.39
  %50 = load %struct.sv*, %struct.sv** %elemsv, align 8
  call void (i32, i8*, ...) @Perl_warner(i32 12, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.46, i32 0, i32 0), %struct.sv* %50)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.52, %lor.lhs.false.48, %land.lhs.true, %land.end.25
  %51 = load i64, i64* %elem, align 8
  %cmp56 = icmp sgt i64 %51, 0
  br i1 %cmp56, label %if.then.58, label %if.end.60

if.then.58:                                       ; preds = %if.end
  %52 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_arybase = getelementptr inbounds %struct.cop, %struct.cop* %52, i32 0, i32 12
  %53 = load i32, i32* %cop_arybase, align 4
  %conv59 = sext i32 %53 to i64
  %54 = load i64, i64* %elem, align 8
  %sub = sub nsw i64 %54, %conv59
  store i64 %sub, i64* %elem, align 8
  br label %if.end.60

if.end.60:                                        ; preds = %if.then.58, %if.end
  %55 = load %struct.av*, %struct.av** %av, align 8
  %sv_flags61 = getelementptr inbounds %struct.av, %struct.av* %55, i32 0, i32 2
  %56 = load i32, i32* %sv_flags61, align 4
  %and62 = and i32 %56, 255
  %cmp63 = icmp ne i32 %and62, 10
  br i1 %cmp63, label %if.then.65, label %if.end.67

if.then.65:                                       ; preds = %if.end.60
  %57 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr66 = getelementptr inbounds %struct.sv*, %struct.sv** %57, i32 1
  store %struct.sv** %incdec.ptr66, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr66, align 8
  %58 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %58, %struct.sv*** @PL_stack_sp, align 8
  %59 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %59, i32 0, i32 0
  %60 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %60, %struct.op** %retval
  br label %return

if.end.67:                                        ; preds = %if.end.60
  %61 = load %struct.av*, %struct.av** %av, align 8
  %62 = load i64, i64* %elem, align 8
  %conv68 = trunc i64 %62 to i32
  %63 = load i32, i32* %lval, align 4
  %tobool69 = icmp ne i32 %63, 0
  br i1 %tobool69, label %land.rhs.70, label %land.end.72

land.rhs.70:                                      ; preds = %if.end.67
  %64 = load i32, i32* %defer, align 4
  %tobool71 = icmp ne i32 %64, 0
  %lnot = xor i1 %tobool71, true
  br label %land.end.72

land.end.72:                                      ; preds = %land.rhs.70, %if.end.67
  %65 = phi i1 [ false, %if.end.67 ], [ %lnot, %land.rhs.70 ]
  %land.ext73 = zext i1 %65 to i32
  %call74 = call %struct.sv** @Perl_av_fetch(%struct.av* %61, i32 %conv68, i32 %land.ext73)
  store %struct.sv** %call74, %struct.sv*** %svp, align 8
  %66 = load i32, i32* %lval, align 4
  %tobool75 = icmp ne i32 %66, 0
  br i1 %tobool75, label %if.then.76, label %if.end.116

if.then.76:                                       ; preds = %land.end.72
  %67 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool77 = icmp ne %struct.sv** %67, null
  br i1 %tobool77, label %lor.lhs.false.78, label %if.then.81

lor.lhs.false.78:                                 ; preds = %if.then.76
  %68 = load %struct.sv**, %struct.sv*** %svp, align 8
  %69 = load %struct.sv*, %struct.sv** %68, align 8
  %cmp79 = icmp eq %struct.sv* %69, @PL_sv_undef
  br i1 %cmp79, label %if.then.81, label %if.end.99

if.then.81:                                       ; preds = %lor.lhs.false.78, %if.then.76
  %70 = load i32, i32* %defer, align 4
  %tobool82 = icmp ne i32 %70, 0
  br i1 %tobool82, label %if.end.85, label %if.then.83

if.then.83:                                       ; preds = %if.then.81
  %71 = load i64, i64* %elem, align 8
  %call84 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_aelem, i32 0, i32 0), i64 %71)
  store %struct.op* %call84, %struct.op** %retval
  br label %return

if.end.85:                                        ; preds = %if.then.81
  %call86 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call86, %struct.sv** %lv, align 8
  %72 = load %struct.sv*, %struct.sv** %lv, align 8
  %call87 = call signext i8 @Perl_sv_upgrade(%struct.sv* %72, i32 9)
  %73 = load %struct.sv*, %struct.sv** %lv, align 8
  %sv_any88 = getelementptr inbounds %struct.sv, %struct.sv* %73, i32 0, i32 0
  %74 = load i8*, i8** %sv_any88, align 8
  %75 = bitcast i8* %74 to %struct.xpvlv*
  %xlv_type = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %75, i32 0, i32 10
  store i8 121, i8* %xlv_type, align 1
  %76 = load %struct.sv*, %struct.sv** %lv, align 8
  call void @Perl_sv_magic(%struct.sv* %76, %struct.sv* null, i32 121, i8* null, i32 0)
  %77 = load %struct.av*, %struct.av** %av, align 8
  %78 = bitcast %struct.av* %77 to %struct.sv*
  store %struct.sv* %78, %struct.sv** @PL_Sv, align 8
  %79 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool89 = icmp ne %struct.sv* %79, null
  br i1 %tobool89, label %land.rhs.90, label %land.end.92

land.rhs.90:                                      ; preds = %if.end.85
  %80 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %80, i32 0, i32 1
  %81 = load i32, i32* %sv_refcnt, align 4
  %inc = add i32 %81, 1
  store i32 %inc, i32* %sv_refcnt, align 4
  %tobool91 = icmp ne i32 %inc, 0
  br label %land.end.92

land.end.92:                                      ; preds = %land.rhs.90, %if.end.85
  %82 = phi i1 [ false, %if.end.85 ], [ %tobool91, %land.rhs.90 ]
  %land.ext93 = zext i1 %82 to i32
  %83 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %84 = load %struct.sv*, %struct.sv** %lv, align 8
  %sv_any94 = getelementptr inbounds %struct.sv, %struct.sv* %84, i32 0, i32 0
  %85 = load i8*, i8** %sv_any94, align 8
  %86 = bitcast i8* %85 to %struct.xpvlv*
  %xlv_targ = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %86, i32 0, i32 9
  store %struct.sv* %83, %struct.sv** %xlv_targ, align 8
  %87 = load i64, i64* %elem, align 8
  %88 = load %struct.sv*, %struct.sv** %lv, align 8
  %sv_any95 = getelementptr inbounds %struct.sv, %struct.sv* %88, i32 0, i32 0
  %89 = load i8*, i8** %sv_any95, align 8
  %90 = bitcast i8* %89 to %struct.xpvlv*
  %xlv_targoff = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %90, i32 0, i32 7
  store i64 %87, i64* %xlv_targoff, align 8
  %91 = load %struct.sv*, %struct.sv** %lv, align 8
  %sv_any96 = getelementptr inbounds %struct.sv, %struct.sv* %91, i32 0, i32 0
  %92 = load i8*, i8** %sv_any96, align 8
  %93 = bitcast i8* %92 to %struct.xpvlv*
  %xlv_targlen = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %93, i32 0, i32 8
  store i64 1, i64* %xlv_targlen, align 8
  %94 = load %struct.sv*, %struct.sv** %lv, align 8
  %95 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr97 = getelementptr inbounds %struct.sv*, %struct.sv** %95, i32 1
  store %struct.sv** %incdec.ptr97, %struct.sv*** %sp, align 8
  store %struct.sv* %94, %struct.sv** %incdec.ptr97, align 8
  %96 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %96, %struct.sv*** @PL_stack_sp, align 8
  %97 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next98 = getelementptr inbounds %struct.op, %struct.op* %97, i32 0, i32 0
  %98 = load %struct.op*, %struct.op** %op_next98, align 8
  store %struct.op* %98, %struct.op** %retval
  br label %return

if.end.99:                                        ; preds = %lor.lhs.false.78
  %99 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private100 = getelementptr inbounds %struct.op, %struct.op* %99, i32 0, i32 7
  %100 = load i8, i8* %op_private100, align 1
  %conv101 = zext i8 %100 to i32
  %and102 = and i32 %conv101, 128
  %tobool103 = icmp ne i32 %and102, 0
  br i1 %tobool103, label %if.then.104, label %if.else

if.then.104:                                      ; preds = %if.end.99
  %101 = load %struct.av*, %struct.av** %av, align 8
  %102 = load i64, i64* %elem, align 8
  %conv105 = trunc i64 %102 to i32
  %103 = load %struct.sv**, %struct.sv*** %svp, align 8
  call void @Perl_save_aelem(%struct.av* %101, i32 %conv105, %struct.sv** %103)
  br label %if.end.115

if.else:                                          ; preds = %if.end.99
  %104 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private106 = getelementptr inbounds %struct.op, %struct.op* %104, i32 0, i32 7
  %105 = load i8, i8* %op_private106, align 1
  %conv107 = zext i8 %105 to i32
  %and108 = and i32 %conv107, 96
  %tobool109 = icmp ne i32 %and108, 0
  br i1 %tobool109, label %if.then.110, label %if.end.114

if.then.110:                                      ; preds = %if.else
  %106 = load %struct.sv**, %struct.sv*** %svp, align 8
  %107 = load %struct.sv*, %struct.sv** %106, align 8
  %108 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private111 = getelementptr inbounds %struct.op, %struct.op* %108, i32 0, i32 7
  %109 = load i8, i8* %op_private111, align 1
  %conv112 = zext i8 %109 to i32
  %and113 = and i32 %conv112, 96
  call void @Perl_vivify_ref(%struct.sv* %107, i32 %and113)
  br label %if.end.114

if.end.114:                                       ; preds = %if.then.110, %if.else
  br label %if.end.115

if.end.115:                                       ; preds = %if.end.114, %if.then.104
  br label %if.end.116

if.end.116:                                       ; preds = %if.end.115, %land.end.72
  %110 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool117 = icmp ne %struct.sv** %110, null
  br i1 %tobool117, label %cond.true.118, label %cond.false.119

cond.true.118:                                    ; preds = %if.end.116
  %111 = load %struct.sv**, %struct.sv*** %svp, align 8
  %112 = load %struct.sv*, %struct.sv** %111, align 8
  br label %cond.end.120

cond.false.119:                                   ; preds = %if.end.116
  br label %cond.end.120

cond.end.120:                                     ; preds = %cond.false.119, %cond.true.118
  %cond121 = phi %struct.sv* [ %112, %cond.true.118 ], [ @PL_sv_undef, %cond.false.119 ]
  store %struct.sv* %cond121, %struct.sv** %sv, align 8
  %113 = load i32, i32* %lval, align 4
  %tobool122 = icmp ne i32 %113, 0
  br i1 %tobool122, label %if.end.129, label %land.lhs.true.123

land.lhs.true.123:                                ; preds = %cond.end.120
  %114 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags124 = getelementptr inbounds %struct.sv, %struct.sv* %114, i32 0, i32 2
  %115 = load i32, i32* %sv_flags124, align 4
  %and125 = and i32 %115, 8192
  %tobool126 = icmp ne i32 %and125, 0
  br i1 %tobool126, label %if.then.127, label %if.end.129

if.then.127:                                      ; preds = %land.lhs.true.123
  %116 = load %struct.sv*, %struct.sv** %sv, align 8
  %call128 = call %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %116)
  store %struct.sv* %call128, %struct.sv** %sv, align 8
  br label %if.end.129

if.end.129:                                       ; preds = %if.then.127, %land.lhs.true.123, %cond.end.120
  %117 = load %struct.sv*, %struct.sv** %sv, align 8
  %118 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr130 = getelementptr inbounds %struct.sv*, %struct.sv** %118, i32 1
  store %struct.sv** %incdec.ptr130, %struct.sv*** %sp, align 8
  store %struct.sv* %117, %struct.sv** %incdec.ptr130, align 8
  %119 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %119, %struct.sv*** @PL_stack_sp, align 8
  %120 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next131 = getelementptr inbounds %struct.op, %struct.op* %120, i32 0, i32 0
  %121 = load %struct.op*, %struct.op** %op_next131, align 8
  store %struct.op* %121, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.end.129, %land.end.92, %if.then.83, %if.then.65
  %122 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %122
}

declare void @Perl_save_aelem(%struct.av*, i32, %struct.sv**) #1

declare %struct.hv* @Perl_newHV() #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_method() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  %rsv = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** %sv, align 8
  %3 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %and = and i32 %4, 524288
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end.4

if.then:                                          ; preds = %entry
  %5 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 0
  %6 = load i8*, i8** %sv_any, align 8
  %7 = bitcast i8* %6 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %7, i32 0, i32 0
  %8 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  store %struct.sv* %8, %struct.sv** %rsv, align 8
  %9 = load %struct.sv*, %struct.sv** %rsv, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %10, 255
  %cmp = icmp eq i32 %and2, 12
  br i1 %cmp, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %11 = load %struct.sv*, %struct.sv** %rsv, align 8
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %11, %struct.sv** %12, align 8
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %13, %struct.sv*** @PL_stack_sp, align 8
  %14 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 0
  %15 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %15, %struct.op** %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %entry
  %16 = load %struct.sv*, %struct.sv** %sv, align 8
  %call = call %struct.sv* @S_method_common(%struct.sv* %16, i32* null)
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %call, %struct.sv** %17, align 8
  %18 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %18, %struct.sv*** @PL_stack_sp, align 8
  %19 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next5 = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 0
  %20 = load %struct.op*, %struct.op** %op_next5, align 8
  store %struct.op* %20, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.end.4, %if.then.3
  %21 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %21
}

; Function Attrs: nounwind uwtable
define internal %struct.sv* @S_method_common(%struct.sv* %meth, i32* %hashp) #0 {
entry:
  %retval = alloca %struct.sv*, align 8
  %meth.addr = alloca %struct.sv*, align 8
  %hashp.addr = alloca i32*, align 8
  %sv = alloca %struct.sv*, align 8
  %ob = alloca %struct.sv*, align 8
  %gv = alloca %struct.gv*, align 8
  %stash = alloca %struct.hv*, align 8
  %name = alloca i8*, align 8
  %namelen = alloca i64, align 8
  %packname = alloca i8*, align 8
  %packsv = alloca %struct.sv*, align 8
  %packlen = alloca i64, align 8
  %iogv = alloca %struct.gv*, align 8
  %he = alloca %struct.he*, align 8
  %Perl_ref = alloca %struct.sv*, align 8
  %he174 = alloca %struct.he*, align 8
  %leaf = alloca i8*, align 8
  %sep = alloca i8*, align 8
  %p = alloca i8*, align 8
  store %struct.sv* %meth, %struct.sv** %meth.addr, align 8
  store i32* %hashp, i32** %hashp.addr, align 8
  store i8* null, i8** %packname, align 8
  store %struct.sv* null, %struct.sv** %packsv, align 8
  %0 = load %struct.sv*, %struct.sv** %meth.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 262144
  %cmp = icmp eq i32 %and, 262144
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %meth.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %4, i32 0, i32 1
  %5 = load i64, i64* %xpv_cur, align 8
  store i64 %5, i64* %namelen, align 8
  %6 = load %struct.sv*, %struct.sv** %meth.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  %7 = load i8*, i8** %sv_any1, align 8
  %8 = bitcast i8* %7 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %8, i32 0, i32 0
  %9 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %10 = load %struct.sv*, %struct.sv** %meth.addr, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %10, i64* %namelen, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %9, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %name, align 8
  %11 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %12 = load i32*, i32** @PL_markstack_ptr, align 8
  %13 = load i32, i32* %12, align 4
  %idx.ext = sext i32 %13 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %11, i64 %idx.ext
  %add.ptr2 = getelementptr inbounds %struct.sv*, %struct.sv** %add.ptr, i64 1
  %14 = load %struct.sv*, %struct.sv** %add.ptr2, align 8
  store %struct.sv* %14, %struct.sv** %sv, align 8
  %15 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool = icmp ne %struct.sv* %15, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end
  %16 = load i8*, i8** %name, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.50, i32 0, i32 0), i8* %16)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  %17 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %18, 8192
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.then.6, label %if.end.8

if.then.6:                                        ; preds = %if.end
  %19 = load %struct.sv*, %struct.sv** %sv, align 8
  %call7 = call i32 @Perl_mg_get(%struct.sv* %19)
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.6, %if.end
  %20 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %21, 524288
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %if.then.12, label %if.else

if.then.12:                                       ; preds = %if.end.8
  %22 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any13 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 0
  %23 = load i8*, i8** %sv_any13, align 8
  %24 = bitcast i8* %23 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %24, i32 0, i32 0
  %25 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  store %struct.sv* %25, %struct.sv** %ob, align 8
  br label %if.end.135

if.else:                                          ; preds = %if.end.8
  store i8* null, i8** %packname, align 8
  %26 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %27, 118423552
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %land.lhs.true, label %if.end.46

land.lhs.true:                                    ; preds = %if.else
  %28 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags17 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %29, 262144
  %cmp19 = icmp eq i32 %and18, 262144
  br i1 %cmp19, label %cond.true.20, label %cond.false.25

cond.true.20:                                     ; preds = %land.lhs.true
  %30 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any21 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 0
  %31 = load i8*, i8** %sv_any21, align 8
  %32 = bitcast i8* %31 to %struct.xpv*
  %xpv_cur22 = getelementptr inbounds %struct.xpv, %struct.xpv* %32, i32 0, i32 1
  %33 = load i64, i64* %xpv_cur22, align 8
  store i64 %33, i64* %packlen, align 8
  %34 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any23 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 0
  %35 = load i8*, i8** %sv_any23, align 8
  %36 = bitcast i8* %35 to %struct.xpv*
  %xpv_pv24 = getelementptr inbounds %struct.xpv, %struct.xpv* %36, i32 0, i32 0
  %37 = load i8*, i8** %xpv_pv24, align 8
  br label %cond.end.27

cond.false.25:                                    ; preds = %land.lhs.true
  %38 = load %struct.sv*, %struct.sv** %sv, align 8
  %call26 = call i8* @Perl_sv_2pv_flags(%struct.sv* %38, i64* %packlen, i32 2)
  br label %cond.end.27

cond.end.27:                                      ; preds = %cond.false.25, %cond.true.20
  %cond28 = phi i8* [ %37, %cond.true.20 ], [ %call26, %cond.false.25 ]
  store i8* %cond28, i8** %packname, align 8
  %tobool29 = icmp ne i8* %cond28, null
  br i1 %tobool29, label %if.then.30, label %if.end.46

if.then.30:                                       ; preds = %cond.end.27
  %39 = load %struct.hv*, %struct.hv** @PL_stashcache, align 8
  %40 = load %struct.sv*, %struct.sv** %sv, align 8
  %call31 = call %struct.he* @Perl_hv_fetch_ent(%struct.hv* %39, %struct.sv* %40, i32 0, i32 0)
  store %struct.he* %call31, %struct.he** %he, align 8
  %41 = load %struct.he*, %struct.he** %he, align 8
  %tobool32 = icmp ne %struct.he* %41, null
  br i1 %tobool32, label %if.then.33, label %if.end.45

if.then.33:                                       ; preds = %if.then.30
  %42 = load %struct.he*, %struct.he** %he, align 8
  %hent_val = getelementptr inbounds %struct.he, %struct.he* %42, i32 0, i32 2
  %43 = load %struct.sv*, %struct.sv** %hent_val, align 8
  %sv_flags34 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 2
  %44 = load i32, i32* %sv_flags34, align 4
  %and35 = and i32 %44, 65536
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %cond.true.37, label %cond.false.40

cond.true.37:                                     ; preds = %if.then.33
  %45 = load %struct.he*, %struct.he** %he, align 8
  %hent_val38 = getelementptr inbounds %struct.he, %struct.he* %45, i32 0, i32 2
  %46 = load %struct.sv*, %struct.sv** %hent_val38, align 8
  %sv_any39 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 0
  %47 = load i8*, i8** %sv_any39, align 8
  %48 = bitcast i8* %47 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %48, i32 0, i32 3
  %49 = load i64, i64* %xiv_iv, align 8
  br label %cond.end.43

cond.false.40:                                    ; preds = %if.then.33
  %50 = load %struct.he*, %struct.he** %he, align 8
  %hent_val41 = getelementptr inbounds %struct.he, %struct.he* %50, i32 0, i32 2
  %51 = load %struct.sv*, %struct.sv** %hent_val41, align 8
  %call42 = call i64 @Perl_sv_2iv(%struct.sv* %51)
  br label %cond.end.43

cond.end.43:                                      ; preds = %cond.false.40, %cond.true.37
  %cond44 = phi i64 [ %49, %cond.true.37 ], [ %call42, %cond.false.40 ]
  %52 = inttoptr i64 %cond44 to %struct.hv*
  store %struct.hv* %52, %struct.hv** %stash, align 8
  br label %fetch

if.end.45:                                        ; preds = %if.then.30
  br label %if.end.46

if.end.46:                                        ; preds = %if.end.45, %cond.end.27, %if.else
  %53 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags47 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 2
  %54 = load i32, i32* %sv_flags47, align 4
  %and48 = and i32 %54, 118423552
  %tobool49 = icmp ne i32 %and48, 0
  br i1 %tobool49, label %lor.lhs.false, label %if.then.70

lor.lhs.false:                                    ; preds = %if.end.46
  %55 = load i8*, i8** %packname, align 8
  %tobool50 = icmp ne i8* %55, null
  br i1 %tobool50, label %lor.lhs.false.51, label %if.then.70

lor.lhs.false.51:                                 ; preds = %lor.lhs.false
  %56 = load i8*, i8** %packname, align 8
  %call52 = call %struct.gv* @Perl_gv_fetchpv(i8* %56, i32 0, i32 15)
  store %struct.gv* %call52, %struct.gv** %iogv, align 8
  %tobool53 = icmp ne %struct.gv* %call52, null
  br i1 %tobool53, label %lor.lhs.false.54, label %if.then.70

lor.lhs.false.54:                                 ; preds = %lor.lhs.false.51
  %57 = load %struct.gv*, %struct.gv** %iogv, align 8
  %tobool55 = icmp ne %struct.gv* %57, null
  br i1 %tobool55, label %land.lhs.true.56, label %cond.false.66

land.lhs.true.56:                                 ; preds = %lor.lhs.false.54
  %58 = load %struct.gv*, %struct.gv** %iogv, align 8
  %59 = bitcast %struct.gv* %58 to %struct.sv*
  %sv_flags57 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 2
  %60 = load i32, i32* %sv_flags57, align 4
  %and58 = and i32 %60, 255
  %cmp59 = icmp eq i32 %and58, 13
  br i1 %cmp59, label %land.lhs.true.60, label %cond.false.66

land.lhs.true.60:                                 ; preds = %land.lhs.true.56
  %61 = load %struct.gv*, %struct.gv** %iogv, align 8
  %sv_any61 = getelementptr inbounds %struct.gv, %struct.gv* %61, i32 0, i32 0
  %62 = load %struct.xpvgv*, %struct.xpvgv** %sv_any61, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %62, i32 0, i32 7
  %63 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %tobool62 = icmp ne %struct.gp* %63, null
  br i1 %tobool62, label %cond.true.63, label %cond.false.66

cond.true.63:                                     ; preds = %land.lhs.true.60
  %64 = load %struct.gv*, %struct.gv** %iogv, align 8
  %sv_any64 = getelementptr inbounds %struct.gv, %struct.gv* %64, i32 0, i32 0
  %65 = load %struct.xpvgv*, %struct.xpvgv** %sv_any64, align 8
  %xgv_gp65 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %65, i32 0, i32 7
  %66 = load %struct.gp*, %struct.gp** %xgv_gp65, align 8
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %66, i32 0, i32 2
  %67 = load %struct.io*, %struct.io** %gp_io, align 8
  br label %cond.end.67

cond.false.66:                                    ; preds = %land.lhs.true.60, %land.lhs.true.56, %lor.lhs.false.54
  br label %cond.end.67

cond.end.67:                                      ; preds = %cond.false.66, %cond.true.63
  %cond68 = phi %struct.io* [ %67, %cond.true.63 ], [ null, %cond.false.66 ]
  %68 = bitcast %struct.io* %cond68 to %struct.sv*
  store %struct.sv* %68, %struct.sv** %ob, align 8
  %tobool69 = icmp ne %struct.sv* %68, null
  br i1 %tobool69, label %if.end.129, label %if.then.70

if.then.70:                                       ; preds = %cond.end.67, %lor.lhs.false.51, %lor.lhs.false, %if.end.46
  %69 = load i8*, i8** %packname, align 8
  %tobool71 = icmp ne i8* %69, null
  br i1 %tobool71, label %lor.lhs.false.72, label %if.then.114

lor.lhs.false.72:                                 ; preds = %if.then.70
  %70 = load i8*, i8** %packname, align 8
  %71 = load i8, i8* %70, align 1
  %conv = zext i8 %71 to i32
  %cmp73 = icmp sge i32 %conv, 192
  br i1 %cmp73, label %land.lhs.true.75, label %cond.false.94

land.lhs.true.75:                                 ; preds = %lor.lhs.false.72
  %72 = load i8*, i8** %packname, align 8
  %73 = load i8, i8* %72, align 1
  %conv76 = zext i8 %73 to i32
  %cmp77 = icmp sle i32 %conv76, 253
  br i1 %cmp77, label %land.lhs.true.79, label %cond.false.94

land.lhs.true.79:                                 ; preds = %land.lhs.true.75
  %74 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags80 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 2
  %75 = load i32, i32* %sv_flags80, align 4
  %and81 = and i32 %75, 536870912
  %tobool82 = icmp ne i32 %and81, 0
  br i1 %tobool82, label %land.lhs.true.83, label %cond.false.94

land.lhs.true.83:                                 ; preds = %land.lhs.true.79
  %76 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private = getelementptr inbounds %struct.cop, %struct.cop* %76, i32 0, i32 7
  %77 = load i8, i8* %op_private, align 1
  %conv84 = zext i8 %77 to i32
  %and85 = and i32 %conv84, 8
  %tobool86 = icmp ne i32 %and85, 0
  br i1 %tobool86, label %cond.false.94, label %cond.true.87

cond.true.87:                                     ; preds = %land.lhs.true.83
  %78 = load i8*, i8** %packname, align 8
  %call88 = call signext i8 @Perl_is_utf8_idcont(i8* %78)
  %conv89 = sext i8 %call88 to i32
  %tobool90 = icmp ne i32 %conv89, 0
  br i1 %tobool90, label %land.lhs.true.91, label %if.then.114

land.lhs.true.91:                                 ; preds = %cond.true.87
  %79 = load i8*, i8** %packname, align 8
  %call92 = call signext i8 @Perl_is_utf8_digit(i8* %79)
  %tobool93 = icmp ne i8 %call92, 0
  br i1 %tobool93, label %if.then.114, label %if.end.119

cond.false.94:                                    ; preds = %land.lhs.true.83, %land.lhs.true.79, %land.lhs.true.75, %lor.lhs.false.72
  %80 = load i8*, i8** %packname, align 8
  %81 = load i8, i8* %80, align 1
  %conv95 = sext i8 %81 to i32
  %cmp96 = icmp sge i32 %conv95, 65
  br i1 %cmp96, label %land.lhs.true.98, label %lor.lhs.false.102

land.lhs.true.98:                                 ; preds = %cond.false.94
  %82 = load i8*, i8** %packname, align 8
  %83 = load i8, i8* %82, align 1
  %conv99 = sext i8 %83 to i32
  %cmp100 = icmp sle i32 %conv99, 90
  br i1 %cmp100, label %if.end.119, label %lor.lhs.false.102

lor.lhs.false.102:                                ; preds = %land.lhs.true.98, %cond.false.94
  %84 = load i8*, i8** %packname, align 8
  %85 = load i8, i8* %84, align 1
  %conv103 = sext i8 %85 to i32
  %cmp104 = icmp sge i32 %conv103, 97
  br i1 %cmp104, label %land.lhs.true.106, label %lor.lhs.false.110

land.lhs.true.106:                                ; preds = %lor.lhs.false.102
  %86 = load i8*, i8** %packname, align 8
  %87 = load i8, i8* %86, align 1
  %conv107 = sext i8 %87 to i32
  %cmp108 = icmp sle i32 %conv107, 122
  br i1 %cmp108, label %if.end.119, label %lor.lhs.false.110

lor.lhs.false.110:                                ; preds = %land.lhs.true.106, %lor.lhs.false.102
  %88 = load i8*, i8** %packname, align 8
  %89 = load i8, i8* %88, align 1
  %conv111 = sext i8 %89 to i32
  %cmp112 = icmp eq i32 %conv111, 95
  br i1 %cmp112, label %if.end.119, label %if.then.114

if.then.114:                                      ; preds = %lor.lhs.false.110, %land.lhs.true.91, %cond.true.87, %if.then.70
  %90 = load i8*, i8** %name, align 8
  %91 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags115 = getelementptr inbounds %struct.sv, %struct.sv* %91, i32 0, i32 2
  %92 = load i32, i32* %sv_flags115, align 4
  %and116 = and i32 %92, 118423552
  %tobool117 = icmp ne i32 %and116, 0
  %cond118 = select i1 %tobool117, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.52, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.53, i32 0, i32 0)
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.51, i32 0, i32 0), i8* %90, i8* %cond118)
  br label %if.end.119

if.end.119:                                       ; preds = %if.then.114, %lor.lhs.false.110, %land.lhs.true.106, %land.lhs.true.98, %land.lhs.true.91
  %93 = load i8*, i8** %packname, align 8
  %94 = load i64, i64* %packlen, align 8
  %conv120 = trunc i64 %94 to i32
  %call121 = call %struct.hv* @Perl_gv_stashpvn(i8* %93, i32 %conv120, i32 0)
  store %struct.hv* %call121, %struct.hv** %stash, align 8
  %95 = load %struct.hv*, %struct.hv** %stash, align 8
  %tobool122 = icmp ne %struct.hv* %95, null
  br i1 %tobool122, label %if.else.124, label %if.then.123

if.then.123:                                      ; preds = %if.end.119
  %96 = load %struct.sv*, %struct.sv** %sv, align 8
  store %struct.sv* %96, %struct.sv** %packsv, align 8
  br label %if.end.128

if.else.124:                                      ; preds = %if.end.119
  %97 = load %struct.hv*, %struct.hv** %stash, align 8
  %98 = ptrtoint %struct.hv* %97 to i64
  %call125 = call %struct.sv* @Perl_newSViv(i64 %98)
  store %struct.sv* %call125, %struct.sv** %Perl_ref, align 8
  %99 = load %struct.hv*, %struct.hv** @PL_stashcache, align 8
  %100 = load i8*, i8** %packname, align 8
  %101 = load i64, i64* %packlen, align 8
  %conv126 = trunc i64 %101 to i32
  %102 = load %struct.sv*, %struct.sv** %Perl_ref, align 8
  %call127 = call %struct.sv** @Perl_hv_store(%struct.hv* %99, i8* %100, i32 %conv126, %struct.sv* %102, i32 0)
  br label %if.end.128

if.end.128:                                       ; preds = %if.else.124, %if.then.123
  br label %fetch

if.end.129:                                       ; preds = %cond.end.67
  %103 = load %struct.gv*, %struct.gv** %iogv, align 8
  %104 = bitcast %struct.gv* %103 to %struct.sv*
  %call130 = call %struct.sv* @Perl_newRV(%struct.sv* %104)
  %call131 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call130)
  %105 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %106 = load i32*, i32** @PL_markstack_ptr, align 8
  %107 = load i32, i32* %106, align 4
  %idx.ext132 = sext i32 %107 to i64
  %add.ptr133 = getelementptr inbounds %struct.sv*, %struct.sv** %105, i64 %idx.ext132
  %add.ptr134 = getelementptr inbounds %struct.sv*, %struct.sv** %add.ptr133, i64 1
  store %struct.sv* %call131, %struct.sv** %add.ptr134, align 8
  br label %if.end.135

if.end.135:                                       ; preds = %if.end.129, %if.then.12
  %108 = load %struct.sv*, %struct.sv** %ob, align 8
  %tobool136 = icmp ne %struct.sv* %108, null
  br i1 %tobool136, label %lor.lhs.false.137, label %if.then.169

lor.lhs.false.137:                                ; preds = %if.end.135
  %109 = load %struct.sv*, %struct.sv** %ob, align 8
  %sv_flags138 = getelementptr inbounds %struct.sv, %struct.sv* %109, i32 0, i32 2
  %110 = load i32, i32* %sv_flags138, align 4
  %and139 = and i32 %110, 4096
  %tobool140 = icmp ne i32 %and139, 0
  br i1 %tobool140, label %if.end.170, label %lor.lhs.false.141

lor.lhs.false.141:                                ; preds = %lor.lhs.false.137
  %111 = load %struct.sv*, %struct.sv** %ob, align 8
  %sv_flags142 = getelementptr inbounds %struct.sv, %struct.sv* %111, i32 0, i32 2
  %112 = load i32, i32* %sv_flags142, align 4
  %and143 = and i32 %112, 255
  %cmp144 = icmp eq i32 %and143, 13
  br i1 %cmp144, label %land.lhs.true.146, label %if.then.169

land.lhs.true.146:                                ; preds = %lor.lhs.false.141
  %113 = load %struct.sv*, %struct.sv** %ob, align 8
  %114 = bitcast %struct.sv* %113 to %struct.gv*
  %tobool147 = icmp ne %struct.gv* %114, null
  br i1 %tobool147, label %land.lhs.true.148, label %cond.false.161

land.lhs.true.148:                                ; preds = %land.lhs.true.146
  %115 = load %struct.sv*, %struct.sv** %ob, align 8
  %116 = bitcast %struct.sv* %115 to %struct.gv*
  %117 = bitcast %struct.gv* %116 to %struct.sv*
  %sv_flags149 = getelementptr inbounds %struct.sv, %struct.sv* %117, i32 0, i32 2
  %118 = load i32, i32* %sv_flags149, align 4
  %and150 = and i32 %118, 255
  %cmp151 = icmp eq i32 %and150, 13
  br i1 %cmp151, label %land.lhs.true.153, label %cond.false.161

land.lhs.true.153:                                ; preds = %land.lhs.true.148
  %119 = load %struct.sv*, %struct.sv** %ob, align 8
  %120 = bitcast %struct.sv* %119 to %struct.gv*
  %sv_any154 = getelementptr inbounds %struct.gv, %struct.gv* %120, i32 0, i32 0
  %121 = load %struct.xpvgv*, %struct.xpvgv** %sv_any154, align 8
  %xgv_gp155 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %121, i32 0, i32 7
  %122 = load %struct.gp*, %struct.gp** %xgv_gp155, align 8
  %tobool156 = icmp ne %struct.gp* %122, null
  br i1 %tobool156, label %cond.true.157, label %cond.false.161

cond.true.157:                                    ; preds = %land.lhs.true.153
  %123 = load %struct.sv*, %struct.sv** %ob, align 8
  %124 = bitcast %struct.sv* %123 to %struct.gv*
  %sv_any158 = getelementptr inbounds %struct.gv, %struct.gv* %124, i32 0, i32 0
  %125 = load %struct.xpvgv*, %struct.xpvgv** %sv_any158, align 8
  %xgv_gp159 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %125, i32 0, i32 7
  %126 = load %struct.gp*, %struct.gp** %xgv_gp159, align 8
  %gp_io160 = getelementptr inbounds %struct.gp, %struct.gp* %126, i32 0, i32 2
  %127 = load %struct.io*, %struct.io** %gp_io160, align 8
  br label %cond.end.162

cond.false.161:                                   ; preds = %land.lhs.true.153, %land.lhs.true.148, %land.lhs.true.146
  br label %cond.end.162

cond.end.162:                                     ; preds = %cond.false.161, %cond.true.157
  %cond163 = phi %struct.io* [ %127, %cond.true.157 ], [ null, %cond.false.161 ]
  %128 = bitcast %struct.io* %cond163 to %struct.sv*
  store %struct.sv* %128, %struct.sv** %ob, align 8
  %tobool164 = icmp ne %struct.sv* %128, null
  br i1 %tobool164, label %land.lhs.true.165, label %if.then.169

land.lhs.true.165:                                ; preds = %cond.end.162
  %129 = load %struct.sv*, %struct.sv** %ob, align 8
  %sv_flags166 = getelementptr inbounds %struct.sv, %struct.sv* %129, i32 0, i32 2
  %130 = load i32, i32* %sv_flags166, align 4
  %and167 = and i32 %130, 4096
  %tobool168 = icmp ne i32 %and167, 0
  br i1 %tobool168, label %if.end.170, label %if.then.169

if.then.169:                                      ; preds = %land.lhs.true.165, %cond.end.162, %lor.lhs.false.141, %if.end.135
  %131 = load i8*, i8** %name, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.54, i32 0, i32 0), i8* %131)
  br label %if.end.170

if.end.170:                                       ; preds = %if.then.169, %land.lhs.true.165, %lor.lhs.false.137
  %132 = load %struct.sv*, %struct.sv** %ob, align 8
  %sv_any171 = getelementptr inbounds %struct.sv, %struct.sv* %132, i32 0, i32 0
  %133 = load i8*, i8** %sv_any171, align 8
  %134 = bitcast i8* %133 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %134, i32 0, i32 6
  %135 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  store %struct.hv* %135, %struct.hv** %stash, align 8
  br label %fetch

fetch:                                            ; preds = %if.end.170, %if.end.128, %cond.end.43
  %136 = load i32*, i32** %hashp.addr, align 8
  %tobool172 = icmp ne i32* %136, null
  br i1 %tobool172, label %if.then.173, label %if.end.203

if.then.173:                                      ; preds = %fetch
  %137 = load %struct.hv*, %struct.hv** %stash, align 8
  %138 = load %struct.sv*, %struct.sv** %meth.addr, align 8
  %139 = load i32*, i32** %hashp.addr, align 8
  %140 = load i32, i32* %139, align 4
  %call175 = call %struct.he* @Perl_hv_fetch_ent(%struct.hv* %137, %struct.sv* %138, i32 0, i32 %140)
  store %struct.he* %call175, %struct.he** %he174, align 8
  %141 = load %struct.he*, %struct.he** %he174, align 8
  %tobool176 = icmp ne %struct.he* %141, null
  br i1 %tobool176, label %if.then.177, label %if.end.202

if.then.177:                                      ; preds = %if.then.173
  %142 = load %struct.he*, %struct.he** %he174, align 8
  %hent_val178 = getelementptr inbounds %struct.he, %struct.he* %142, i32 0, i32 2
  %143 = load %struct.sv*, %struct.sv** %hent_val178, align 8
  %144 = bitcast %struct.sv* %143 to %struct.gv*
  store %struct.gv* %144, %struct.gv** %gv, align 8
  %145 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags179 = getelementptr inbounds %struct.gv, %struct.gv* %145, i32 0, i32 2
  %146 = load i32, i32* %sv_flags179, align 4
  %and180 = and i32 %146, 255
  %cmp181 = icmp eq i32 %and180, 13
  br i1 %cmp181, label %land.lhs.true.183, label %if.end.201

land.lhs.true.183:                                ; preds = %if.then.177
  %147 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any184 = getelementptr inbounds %struct.gv, %struct.gv* %147, i32 0, i32 0
  %148 = load %struct.xpvgv*, %struct.xpvgv** %sv_any184, align 8
  %xgv_gp185 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %148, i32 0, i32 7
  %149 = load %struct.gp*, %struct.gp** %xgv_gp185, align 8
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %149, i32 0, i32 7
  %150 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %tobool186 = icmp ne %struct.cv* %150, null
  br i1 %tobool186, label %land.lhs.true.187, label %if.end.201

land.lhs.true.187:                                ; preds = %land.lhs.true.183
  %151 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any188 = getelementptr inbounds %struct.gv, %struct.gv* %151, i32 0, i32 0
  %152 = load %struct.xpvgv*, %struct.xpvgv** %sv_any188, align 8
  %xgv_gp189 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %152, i32 0, i32 7
  %153 = load %struct.gp*, %struct.gp** %xgv_gp189, align 8
  %gp_cvgen = getelementptr inbounds %struct.gp, %struct.gp* %153, i32 0, i32 8
  %154 = load i32, i32* %gp_cvgen, align 4
  %tobool190 = icmp ne i32 %154, 0
  br i1 %tobool190, label %lor.lhs.false.191, label %if.then.197

lor.lhs.false.191:                                ; preds = %land.lhs.true.187
  %155 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any192 = getelementptr inbounds %struct.gv, %struct.gv* %155, i32 0, i32 0
  %156 = load %struct.xpvgv*, %struct.xpvgv** %sv_any192, align 8
  %xgv_gp193 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %156, i32 0, i32 7
  %157 = load %struct.gp*, %struct.gp** %xgv_gp193, align 8
  %gp_cvgen194 = getelementptr inbounds %struct.gp, %struct.gp* %157, i32 0, i32 8
  %158 = load i32, i32* %gp_cvgen194, align 4
  %159 = load i32, i32* @PL_sub_generation, align 4
  %cmp195 = icmp eq i32 %158, %159
  br i1 %cmp195, label %if.then.197, label %if.end.201

if.then.197:                                      ; preds = %lor.lhs.false.191, %land.lhs.true.187
  %160 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any198 = getelementptr inbounds %struct.gv, %struct.gv* %160, i32 0, i32 0
  %161 = load %struct.xpvgv*, %struct.xpvgv** %sv_any198, align 8
  %xgv_gp199 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %161, i32 0, i32 7
  %162 = load %struct.gp*, %struct.gp** %xgv_gp199, align 8
  %gp_cv200 = getelementptr inbounds %struct.gp, %struct.gp* %162, i32 0, i32 7
  %163 = load %struct.cv*, %struct.cv** %gp_cv200, align 8
  %164 = bitcast %struct.cv* %163 to %struct.sv*
  store %struct.sv* %164, %struct.sv** %retval
  br label %return

if.end.201:                                       ; preds = %lor.lhs.false.191, %land.lhs.true.183, %if.then.177
  br label %if.end.202

if.end.202:                                       ; preds = %if.end.201, %if.then.173
  br label %if.end.203

if.end.203:                                       ; preds = %if.end.202, %fetch
  %165 = load %struct.hv*, %struct.hv** %stash, align 8
  %tobool204 = icmp ne %struct.hv* %165, null
  br i1 %tobool204, label %cond.true.205, label %cond.false.206

cond.true.205:                                    ; preds = %if.end.203
  %166 = load %struct.hv*, %struct.hv** %stash, align 8
  br label %cond.end.207

cond.false.206:                                   ; preds = %if.end.203
  %167 = load %struct.sv*, %struct.sv** %packsv, align 8
  %168 = bitcast %struct.sv* %167 to %struct.hv*
  br label %cond.end.207

cond.end.207:                                     ; preds = %cond.false.206, %cond.true.205
  %cond208 = phi %struct.hv* [ %166, %cond.true.205 ], [ %168, %cond.false.206 ]
  %169 = load i8*, i8** %name, align 8
  %call209 = call %struct.gv* @Perl_gv_fetchmethod(%struct.hv* %cond208, i8* %169)
  store %struct.gv* %call209, %struct.gv** %gv, align 8
  %170 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool210 = icmp ne %struct.gv* %170, null
  br i1 %tobool210, label %if.end.277, label %if.then.211

if.then.211:                                      ; preds = %cond.end.207
  %171 = load i8*, i8** %name, align 8
  store i8* %171, i8** %leaf, align 8
  store i8* null, i8** %sep, align 8
  %172 = load i8*, i8** %name, align 8
  store i8* %172, i8** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.211
  %173 = load i8*, i8** %p, align 8
  %174 = load i8, i8* %173, align 1
  %tobool212 = icmp ne i8 %174, 0
  br i1 %tobool212, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %175 = load i8*, i8** %p, align 8
  %176 = load i8, i8* %175, align 1
  %conv213 = sext i8 %176 to i32
  %cmp214 = icmp eq i32 %conv213, 39
  br i1 %cmp214, label %if.then.216, label %if.else.218

if.then.216:                                      ; preds = %for.body
  %177 = load i8*, i8** %p, align 8
  store i8* %177, i8** %sep, align 8
  %178 = load i8*, i8** %p, align 8
  %add.ptr217 = getelementptr inbounds i8, i8* %178, i64 1
  store i8* %add.ptr217, i8** %leaf, align 8
  br label %if.end.230

if.else.218:                                      ; preds = %for.body
  %179 = load i8*, i8** %p, align 8
  %180 = load i8, i8* %179, align 1
  %conv219 = sext i8 %180 to i32
  %cmp220 = icmp eq i32 %conv219, 58
  br i1 %cmp220, label %land.lhs.true.222, label %if.end.229

land.lhs.true.222:                                ; preds = %if.else.218
  %181 = load i8*, i8** %p, align 8
  %add.ptr223 = getelementptr inbounds i8, i8* %181, i64 1
  %182 = load i8, i8* %add.ptr223, align 1
  %conv224 = sext i8 %182 to i32
  %cmp225 = icmp eq i32 %conv224, 58
  br i1 %cmp225, label %if.then.227, label %if.end.229

if.then.227:                                      ; preds = %land.lhs.true.222
  %183 = load i8*, i8** %p, align 8
  store i8* %183, i8** %sep, align 8
  %184 = load i8*, i8** %p, align 8
  %add.ptr228 = getelementptr inbounds i8, i8* %184, i64 2
  store i8* %add.ptr228, i8** %leaf, align 8
  br label %if.end.229

if.end.229:                                       ; preds = %if.then.227, %land.lhs.true.222, %if.else.218
  br label %if.end.230

if.end.230:                                       ; preds = %if.end.229, %if.then.216
  br label %for.inc

for.inc:                                          ; preds = %if.end.230
  %185 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %185, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %186 = load i8*, i8** %sep, align 8
  %tobool231 = icmp ne i8* %186, null
  br i1 %tobool231, label %lor.lhs.false.232, label %if.then.238

lor.lhs.false.232:                                ; preds = %for.end
  %187 = load i8*, i8** %sep, align 8
  %188 = load i8*, i8** %name, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %187 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %188 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp233 = icmp eq i64 %sub.ptr.sub, 5
  br i1 %cmp233, label %land.lhs.true.235, label %if.else.263

land.lhs.true.235:                                ; preds = %lor.lhs.false.232
  %189 = load i8*, i8** %name, align 8
  %call236 = call i32 @strncmp(i8* %189, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.55, i32 0, i32 0), i64 5)
  %tobool237 = icmp ne i32 %call236, 0
  br i1 %tobool237, label %if.else.263, label %if.then.238

if.then.238:                                      ; preds = %land.lhs.true.235, %for.end
  %190 = load i8*, i8** %sep, align 8
  %tobool239 = icmp ne i8* %190, null
  br i1 %tobool239, label %cond.true.240, label %cond.false.248

cond.true.240:                                    ; preds = %if.then.238
  %191 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash = getelementptr inbounds %struct.cop, %struct.cop* %191, i32 0, i32 9
  %192 = load %struct.hv*, %struct.hv** %cop_stash, align 8
  %tobool241 = icmp ne %struct.hv* %192, null
  br i1 %tobool241, label %cond.true.242, label %cond.false.245

cond.true.242:                                    ; preds = %cond.true.240
  %193 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash243 = getelementptr inbounds %struct.cop, %struct.cop* %193, i32 0, i32 9
  %194 = load %struct.hv*, %struct.hv** %cop_stash243, align 8
  %sv_any244 = getelementptr inbounds %struct.hv, %struct.hv* %194, i32 0, i32 0
  %195 = load %struct.xpvhv*, %struct.xpvhv** %sv_any244, align 8
  %xhv_name = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %195, i32 0, i32 10
  %196 = load i8*, i8** %xhv_name, align 8
  br label %cond.end.246

cond.false.245:                                   ; preds = %cond.true.240
  br label %cond.end.246

cond.end.246:                                     ; preds = %cond.false.245, %cond.true.242
  %cond247 = phi i8* [ %196, %cond.true.242 ], [ null, %cond.false.245 ]
  br label %cond.end.256

cond.false.248:                                   ; preds = %if.then.238
  %197 = load %struct.hv*, %struct.hv** %stash, align 8
  %tobool249 = icmp ne %struct.hv* %197, null
  br i1 %tobool249, label %cond.true.250, label %cond.false.253

cond.true.250:                                    ; preds = %cond.false.248
  %198 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any251 = getelementptr inbounds %struct.hv, %struct.hv* %198, i32 0, i32 0
  %199 = load %struct.xpvhv*, %struct.xpvhv** %sv_any251, align 8
  %xhv_name252 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %199, i32 0, i32 10
  %200 = load i8*, i8** %xhv_name252, align 8
  br label %cond.end.254

cond.false.253:                                   ; preds = %cond.false.248
  %201 = load i8*, i8** %packname, align 8
  br label %cond.end.254

cond.end.254:                                     ; preds = %cond.false.253, %cond.true.250
  %cond255 = phi i8* [ %200, %cond.true.250 ], [ %201, %cond.false.253 ]
  br label %cond.end.256

cond.end.256:                                     ; preds = %cond.end.254, %cond.end.246
  %cond257 = phi i8* [ %cond247, %cond.end.246 ], [ %cond255, %cond.end.254 ]
  store i8* %cond257, i8** %packname, align 8
  %202 = load i8*, i8** %packname, align 8
  %tobool258 = icmp ne i8* %202, null
  br i1 %tobool258, label %if.else.260, label %if.then.259

if.then.259:                                      ; preds = %cond.end.256
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.56, i32 0, i32 0))
  br label %if.end.262

if.else.260:                                      ; preds = %cond.end.256
  %203 = load i8*, i8** %packname, align 8
  %call261 = call i64 @strlen(i8* %203)
  store i64 %call261, i64* %packlen, align 8
  br label %if.end.262

if.end.262:                                       ; preds = %if.else.260, %if.then.259
  br label %if.end.267

if.else.263:                                      ; preds = %land.lhs.true.235, %lor.lhs.false.232
  %204 = load i8*, i8** %name, align 8
  store i8* %204, i8** %packname, align 8
  %205 = load i8*, i8** %sep, align 8
  %206 = load i8*, i8** %name, align 8
  %sub.ptr.lhs.cast264 = ptrtoint i8* %205 to i64
  %sub.ptr.rhs.cast265 = ptrtoint i8* %206 to i64
  %sub.ptr.sub266 = sub i64 %sub.ptr.lhs.cast264, %sub.ptr.rhs.cast265
  store i64 %sub.ptr.sub266, i64* %packlen, align 8
  br label %if.end.267

if.end.267:                                       ; preds = %if.else.263, %if.end.262
  %207 = load i8*, i8** %packname, align 8
  %208 = load i64, i64* %packlen, align 8
  %conv268 = trunc i64 %208 to i32
  %call269 = call %struct.hv* @Perl_gv_stashpvn(i8* %207, i32 %conv268, i32 0)
  %tobool270 = icmp ne %struct.hv* %call269, null
  br i1 %tobool270, label %if.then.271, label %if.else.273

if.then.271:                                      ; preds = %if.end.267
  %209 = load i8*, i8** %leaf, align 8
  %210 = load i64, i64* %packlen, align 8
  %conv272 = trunc i64 %210 to i32
  %211 = load i8*, i8** %packname, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.57, i32 0, i32 0), i8* %209, i32 %conv272, i8* %211)
  br label %if.end.276

if.else.273:                                      ; preds = %if.end.267
  %212 = load i8*, i8** %leaf, align 8
  %213 = load i64, i64* %packlen, align 8
  %conv274 = trunc i64 %213 to i32
  %214 = load i8*, i8** %packname, align 8
  %215 = load i64, i64* %packlen, align 8
  %conv275 = trunc i64 %215 to i32
  %216 = load i8*, i8** %packname, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.58, i32 0, i32 0), i8* %212, i32 %conv274, i8* %214, i32 %conv275, i8* %216)
  br label %if.end.276

if.end.276:                                       ; preds = %if.else.273, %if.then.271
  br label %if.end.277

if.end.277:                                       ; preds = %if.end.276, %cond.end.207
  %217 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags278 = getelementptr inbounds %struct.gv, %struct.gv* %217, i32 0, i32 2
  %218 = load i32, i32* %sv_flags278, align 4
  %and279 = and i32 %218, 255
  %cmp280 = icmp eq i32 %and279, 13
  br i1 %cmp280, label %cond.true.282, label %cond.false.286

cond.true.282:                                    ; preds = %if.end.277
  %219 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any283 = getelementptr inbounds %struct.gv, %struct.gv* %219, i32 0, i32 0
  %220 = load %struct.xpvgv*, %struct.xpvgv** %sv_any283, align 8
  %xgv_gp284 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %220, i32 0, i32 7
  %221 = load %struct.gp*, %struct.gp** %xgv_gp284, align 8
  %gp_cv285 = getelementptr inbounds %struct.gp, %struct.gp* %221, i32 0, i32 7
  %222 = load %struct.cv*, %struct.cv** %gp_cv285, align 8
  %223 = bitcast %struct.cv* %222 to %struct.sv*
  br label %cond.end.287

cond.false.286:                                   ; preds = %if.end.277
  %224 = load %struct.gv*, %struct.gv** %gv, align 8
  %225 = bitcast %struct.gv* %224 to %struct.sv*
  br label %cond.end.287

cond.end.287:                                     ; preds = %cond.false.286, %cond.true.282
  %cond288 = phi %struct.sv* [ %223, %cond.true.282 ], [ %225, %cond.false.286 ]
  store %struct.sv* %cond288, %struct.sv** %retval
  br label %return

return:                                           ; preds = %cond.end.287, %if.then.197
  %226 = load %struct.sv*, %struct.sv** %retval
  ret %struct.sv* %226
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_method_named() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  %hash = alloca i32, align 4
  %tmp = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %2 = bitcast %struct.op* %1 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %2, i32 0, i32 8
  %3 = load %struct.sv*, %struct.sv** %op_sv, align 8
  store %struct.sv* %3, %struct.sv** %sv, align 8
  %4 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 0
  %5 = load i8*, i8** %sv_any, align 8
  %6 = bitcast i8* %5 to %struct.xpvuv*
  %xuv_uv = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %6, i32 0, i32 3
  %7 = load i64, i64* %xuv_uv, align 8
  %conv = trunc i64 %7 to i32
  store i32 %conv, i32* %hash, align 4
  %8 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %8 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %9 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %10, %struct.sv** %11, i32 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.sv*, %struct.sv** %sv, align 8
  %call2 = call %struct.sv* @S_method_common(%struct.sv* %12, i32* %hash)
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %13, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %call2, %struct.sv** %incdec.ptr, align 8
  store %struct.sv* %call2, %struct.sv** %tmp
  %14 = load %struct.sv*, %struct.sv** %tmp
  %15 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %15, %struct.sv*** @PL_stack_sp, align 8
  %16 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 0
  %17 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %17
}

declare void @Perl_av_fill(%struct.av*, i32) #1

declare %struct.sv** @Perl_avhv_store_ent(%struct.av*, %struct.sv*, %struct.sv*, i32) #1

declare void @Perl_save_item(%struct.sv*) #1

declare void @Perl_save_iv(i64*) #1

declare signext i8 @Perl_is_utf8_idcont(i8*) #1

declare signext i8 @Perl_is_utf8_digit(i8*) #1

declare %struct.hv* @Perl_gv_stashpvn(i8*, i32, i32) #1

declare %struct.sv** @Perl_hv_store(%struct.hv*, i8*, i32, %struct.sv*, i32) #1

declare %struct.gv* @Perl_gv_fetchmethod(%struct.hv*, i8*) #1

declare i32 @strncmp(i8*, i8*, i64) #1

declare i64 @strlen(i8*) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
